[00:03:16] *** alex_ is now known as alex11
[00:03:21] *** Quits: alex11 (~alex11@bras-base-mtrlpq5302w-grc-31-76-70-61-139.dsl.bell.ca) (Changing host)
[00:03:21] *** Joins: alex11 (~alex11@user/alex11)
[00:04:11] <Grinnz> i would say the docs should link to the moose manual somewhere early on
[00:10:57] *** Quits: tobybl_ (~tobybl@31.111.35.255) (Remote host closed the connection)
[00:11:09] *** Quits: averell (~averell@user/averell) (Quit: .)
[00:14:11] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[00:24:02] *** Quits: gizmomathboy_ (~gizmomath@206.127.53.107) (Ping timeout: 250 seconds)
[00:25:03] *** Quits: jbarton (~tmtowtdi@pool-108-48-30-133.washdc.fios.verizon.net) (Quit: Leaving)
[00:27:04] *** Joins: averell (~averell@user/averell)
[00:27:47] *** Quits: ufobat_ (~martin@dynamic-095-118-142-197.95.118.pool.telefonica.de) (Ping timeout: 240 seconds)
[00:30:34] *** Joins: tobybl (~tobybl@31.111.35.255)
[00:31:38] *** Quits: troller (~p@2a02:6b8:b081:1214::1:13) (Ping timeout: 246 seconds)
[00:35:05] *** Quits: sbates (~sbates@198.178.118.18) (Quit: Leaving)
[00:38:58] *** Joins: gizmomathboy_ (~gizmomath@206.127.53.107)
[00:39:39] *** Quits: tobybl (~tobybl@31.111.35.255) (Remote host closed the connection)
[00:44:31] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[00:49:00] *** Joins: krismatrix (~krismatri@38.80.149.51)
[00:59:09] *** Joins: mozambique (~waterproo@a95-93-140-250.cpe.netcabo.pt)
[01:07:23] *** Quits: superkuh (~superkuh@user/superkuh) (Excess Flood)
[01:08:01] *** Quits: mozambique (~waterproo@a95-93-140-250.cpe.netcabo.pt) (Ping timeout: 252 seconds)
[01:10:15] *** Joins: superkuh (~superkuh@user/superkuh)
[01:11:12] <LeoNerd> http://matrix.cpantesters.org/?dist=Syntax-Operator-Zip+0.02  -- much mix of FAIL and PASS here, but I can't see the pattern
[01:11:13] <Paperbot> Link title(s): [ CPAN Testers Matrix: Syntax-Operator-Zip 0.02 ]
[01:11:25] <LeoNerd> It's not perl version, or OS, or thready-vs-not, or debug-vs-not...
[01:11:59] <LeoNerd> It's also not random.. any given machine (e.g. of any of mine) is reliable... repeat the same test lots of times, it gives same result
[01:15:35] *** Joins: bit4bit (~bit4bit@181.49.102.14)
[01:18:58] *** Quits: superkuh (~superkuh@user/superkuh) (Excess Flood)
[01:21:50] *** Joins: superkuh (~superkuh@user/superkuh)
[01:25:02] <ether> let me send you some more data points...
[01:25:49] <ether> reports inbound
[01:25:55] <LeoNerd> Pretty sure I've got enough points already.. I just can't see the correlation
[01:26:30] <ether> is http://analysis.cpantesters.org/ still down?
[01:26:41] <ether> (seems to be) :/
[01:30:24] *** Quits: krismatrix (~krismatri@38.80.149.51) (Remote host closed the connection)
[01:30:33] <ether> are you dumping the versions of all prereqs in the reports?
[01:30:46] *** Joins: krismatrix (~krismatri@38.80.149.51)
[01:30:58] <LeoNerd> Hrm.. I don't think so, but there aren't many prereqs and eg. on my machines, they're all identical
[01:37:43] *** Quits: bit4bit (~bit4bit@181.49.102.14) (Remote host closed the connection)
[01:43:43] *** Quits: haj1 (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[01:44:14] *** Quits: gryphn (~gryphn@154.21.20.154) (Quit: kthxbye)
[01:46:31] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[01:47:52] <ether> I would suspect that some of the failures are on older prereqs
[01:48:15] <ether> with dzil, you can use Dist::Zilla::Plugin::Test::ReportPrereqs to get that automatically as a test that will show up in the report
[01:48:31] <ether> we will bring you over to the dark side eventually :)
[01:48:34] <ether> (we have cookies!)
[01:48:51] <ether> e.g. right now, I'm enjoying some Quadratinis
[01:50:26] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 252 seconds)
[01:51:40] * GumbyPAN CPAN Upload: Data-Text-0.05 by NHORNE https://metacpan.org/release/NHORNE/Data-Text-0.05
[01:52:01] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[01:52:08] *** Hexmind is now known as Hexmind_
[01:52:31] *** Hexmind_ is now known as Hexmind__
[01:52:37] *** Hexmind__ is now known as Hexmind
[01:53:37] *** Quits: whynot (~whynot@88.155.74.220) (Quit: leaving)
[02:03:55] <LeoNerd> ether: Ahyes, a good hint. The problem was List::Util v1.56, which added zip. Which wasn't mentioned as a prereq at all
[02:05:13] <xenu> you should ask List::Util's maintainer to stop adding new functions because they break your code
[02:06:18] <LeoNerd> Hah
[02:06:33] <LeoNerd> Yaeh but he's a crazy fool who never listens to anybody, so I won't bother
[02:07:45] <Grinnz> bahaha
[02:09:02] <choroba> :D
[02:22:01] <LeoNerd> Anyway, it wasn't the added function that upset things. It was simply that I was relying on it without specifying an exact version of the module
[02:22:06] <LeoNerd> But calling it without parens
[02:22:19] <LeoNerd> use List::Util;  List::Util::zip [thing], [otherthing]
[02:24:52] <Grinnz> oops
[02:25:13] <Grinnz> i mean, with parens just means it'd take longer to fail :P
[02:25:46] *** Quits: Pali (~pali@user/pali) (Ping timeout: 268 seconds)
[02:29:11] *** Quits: JustMe (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[02:29:25] <LeoNerd> True. But the failure would be an obvious complaint about function not existing
[02:29:35] <LeoNerd> Go read the error message it currently gives
[02:30:14] <Grinnz> lol
[02:30:15] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 250 seconds)
[02:30:15] <LeoNerd> Then realise that I encountered it while hacking away at lowlevel syntax parser internals.. You can see why the connection isn't obvious
[02:32:34] *** Quits: pizdets_ (~pizdets@183.182.111.176) (Ping timeout: 250 seconds)
[02:33:45] *** Joins: pizdets (~pizdets@183.182.115.5)
[02:38:46] *** Joins: bn_work (uid268505@id-268505.uxbridge.irccloud.com)
[02:41:39] *** Quits: tbcr (~brclark@user/tbcr) (Quit: WeeChat 2.8)
[02:43:12] *** Joins: proller (~p@2a02:6b8:b081:8023::1:d)
[02:43:41] *** Joins: humky (~humky@user/humky)
[02:49:30] *** Joins: semeion (~semeion@user/semeion)
[02:53:46] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[03:02:47] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[03:16:49] * GumbyPAN CPAN Upload: App-p5find-0.05 by GUGOD https://metacpan.org/release/GUGOD/App-p5find-0.05
[03:18:22] *** Joins: pucara (~i@181.111.20.21)
[03:21:49] * GumbyPAN CPAN Upload: PDL-LinearAlgebra-0.24 by ETJ https://metacpan.org/release/ETJ/PDL-LinearAlgebra-0.24
[03:26:10] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[03:31:51] * GumbyPAN CPAN Upload: PDL-FFTW3-0.17 by ETJ https://metacpan.org/release/ETJ/PDL-FFTW3-0.17
[03:41:33] *** Quits: zgu|skar0 (~zgu@cpe-172-101-198-113.rochester.res.rr.com) (Quit: Leaving)
[03:42:25] *** Joins: aspic (~shifty~~~@ppp121-44-115-43.syd-gls-har-bras39.tpg.internode.on.net)
[03:52:52] *** Quits: nutron (~nutron@66.51.134.122) (Read error: Connection reset by peer)
[04:05:20] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[04:08:08] *** Joins: nutron (~nutron@66.51.134.122)
[04:15:46] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[04:30:20] *** Joins: Harzilein (harzi@user/harzilein)
[04:31:02] <ozzzo_work> I'm trying to use this: https://docstore.mik.ua/orelly/perl4/cook/ch18_02.htm
[04:31:03] <Paperbot> Link title(s): [ Simple DNS Lookups (Perl Cookbook, 2nd Edition) ]
[04:31:13] <ozzzo_work> but I must be doing something wrong
[04:31:29] <ozzzo_work> https://perl.bot/p/g1wacu
[04:31:29] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[04:31:36] <ozzzo_work> https://perl.bot/p/q4oi7a
[04:31:36] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[04:32:07] *** Joins: zgu|skaro (~zgu@2603-7080-b704-0800-16be-797d-71a4-f478.res6.spectrum.com)
[04:32:15] <ozzzo_work> it looks like inet_ntoa is throwing an error because inet_aton($one_vm_name) returns an empty string
[04:37:21] *** Joins: tg (~tg@rockylinux/infra/tg)
[04:39:24] *** Quits: aspic (~shifty~~~@ppp121-44-115-43.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[04:39:41] *** Joins: aspic (~shifty~~~@ppp121-44-118-185.syd-gls-har-bras39.tpg.internode.on.net)
[04:50:50] *** Quits: Adura (~Adura@user/adura) (Ping timeout: 252 seconds)
[04:51:50] *** Joins: gast0n (~g4570n@user/gast0n)
[04:56:36] <ether> yes, you linked to a pirate site
[04:56:38] <ether> please don't do that
[05:04:25] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[05:16:35] *** Quits: Su-Shee_ (~Susanne@p5089447c.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:18:20] *** Joins: Su-Shee (~Susanne@p508949c9.dip0.t-ipconnect.de)
[05:19:15] *** Quits: proller (~p@2a02:6b8:b081:8023::1:d) (Ping timeout: 250 seconds)
[05:23:20] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 265 seconds)
[05:26:21] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:36:06] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[05:46:12] <ozzzo_work> is that not the oreilly perl cookbook?
[05:46:48] <ozzzo_work> it's the top result when I google "perl convert hostname to ip"
[05:47:42] <ozzzo_work> It looks like the 2nd result is the official oreilly site; it has the same recipe: https://www.oreilly.com/library/view/perl-cookbook/1565922433/ch18s02.html
[05:47:43] <Paperbot> Link title(s): [ Simple DNS Lookups - Perl Cookbook [Book] ]
[05:48:00] <ozzzo_work> but, it doesn't seem to work
[05:59:43] <Grinnz> so, a few things
[06:00:26] <Grinnz> inet_ntoa doesn't do that, so this book is stupid
[06:01:06] <Grinnz> gethostbyname is obsoleted by getaddrinfo, but thats probably just the book being old
[06:01:25] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[06:02:26] *** Joins: chn_crella (~chn_crell@120.84.12.165)
[06:06:44] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[06:06:52] <chn_crella> I\m a newbie and I would like know is it possible to pass two array to a subroutine in perl 5.32, because I think "@_" couldn't tell the length of the two array in params
[06:08:04] <pts33> what do you mean couldnt tell the length? What was the value?
[06:09:21] <chn_crella> Code: sub func { my @array1 = $PARAM1; my @array2 = $PARAM2; ...; }       Exec: my @a = (1,2,3); my @b = (4,5,6,7); func(@a, @b);
[06:10:19] <chn_crella> the same way in Ruby is : def func(array1, array2) ... end            
[06:11:06] <pts33> If @_ length is two, then it may need to be dereferenced, not sure though
[06:11:36] <pts33> or concat the two arrays 
[06:12:28] <Grinnz> ozzzo_work: here's an example how to use modern socket functions supporting both ipv4 and ipv6 https://perl.bot/p/mba8d4
[06:12:28] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[06:12:30] <pts33> maybe func(@a . @b)
[06:12:40] <xenu> ???
[06:13:10] <xenu> if you don't know the language, please don't mislead others by giving the wrong advice
[06:13:27] <pts33> not being a troll or anything.. ok
[06:13:39] <xenu> anyway, perl flattens arrays and lists
[06:13:59] <Grinnz> ozzzo_work: you can also call it as: getaddrinfo $hostname, undef, {family => AF_INET}; to restrict to ipv4 for example
[06:14:00] <xenu> you need to pass your arrays as references, like  this func(\@arr1, \@arr2)
[06:14:46] <xenu> eval: lists
[06:14:48] <perlbot> xenu: lists
[06:14:51] <xenu> er
[06:14:53] <xenu> perlbot: lists
[06:14:53] <perlbot> xenu: http://altreus.blogspot.com/2011/08/lists-and-things-made-of-lists.html
[06:15:08] <xenu> chn_crella: this blogpost explains the nuances of list handling in perl ^
[06:17:30] <xenu> hmm, actually this will be more helpful: https://perldoc.perl.org/perlreftut
[06:17:31] <Paperbot> Link title(s): [ perlreftut - Mark's very short tutorial about references - Perldoc Browser ]
[06:19:35] <chn_crella> thanks, some chinese perl5 tutorials describe the reference usage in perl5 but I thought it too difficult to understand
[06:20:15] <Grinnz> it's necessary for what you mentioned, and a lot of other parts of the language
[06:20:21] <Grinnz> so it's worth understanding
[06:21:24] <xenu> come to think of it, i'm unable to find a blogpost or a documentation page that explains list flattening
[06:21:38] <Grinnz> perllol maybe?
[06:22:20] <xenu> it tells you to use references but it doesn't explain why
[06:22:25] <xenu> ctrl - f "flat" no relevant results
[06:23:11] <Grinnz> https://perldoc.perl.org/perldata#List-value-constructors kinda covers it but it's a bit long winded
[06:23:12] <Paperbot> Link title(s): [ perldata - Perl data types - Perldoc Browser ]
[06:23:34] <Grinnz> and doesn't use the actual term flattening
[06:23:45] <xenu> i hoped that maybe perlfaq has it but nope
[06:26:40] *** Joins: holyghost (~holly@2a02:a03f:64c8:9200:4eb:e0c0:3a5:b494)
[06:31:53] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 264 seconds)
[06:33:24] *** Quits: chn_crella (~chn_crell@120.84.12.165) (Quit: Client closed)
[06:33:46] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:39:15] *** Joins: crella (~crella@120.238.232.215)
[06:44:12] <crella> What's the main performance difference between C#(.net framework 4) and Perl5, for example, in processing csv data and exporting text reports? 
[06:47:19] *** Quits: Paladin` (~paladin@S0106c0eae42a785d.vc.shawcable.net) (Remote host closed the connection)
[06:48:13] *** Quits: crella (~crella@120.238.232.215) (Quit: Client closed)
[06:50:59] *** Joins: Paladin` (~paladin@S0106c0eae42a785d.vc.shawcable.net)
[07:08:52] *** Joins: Martchus_ (~martchus@2a01:c23:c417:5400:d250:99ff:fe49:3cce)
[07:09:41] *** Quits: Martchus (~martchus@2a01:c23:c19a:a000:d250:99ff:fe49:3cce) (Ping timeout: 264 seconds)
[07:09:52] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[07:15:09] *** Joins: bmeneg_ (~bmeneg@2001:1284:f013:1328:18e3:1f16:60ab:3a68)
[07:15:41] *** Quits: bmeneg (~bmeneg@2001:1284:f016:7ee9:637d:e1b2:ef01:a3c0) (Ping timeout: 264 seconds)
[07:41:16] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 250 seconds)
[07:46:24] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[07:52:24] *** Quits: ozzzo_work (~ozzzo_wor@h87.s239.verisign.com) (Quit: Ping timeout (120 seconds))
[08:14:36] *** Joins: rindolf (~shlomif@87.68.240.138.adsl.012.net.il)
[08:30:05] *** Joins: mattil (~mattil@airio.portalify.com)
[08:41:07] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[08:43:45] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[08:44:21] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[08:44:33] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 250 seconds)
[08:45:19] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[08:45:31] *** Joins: mattil (~mattil@helsinki.portalify.com)
[08:49:00] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[08:49:36] *** Joins: mattil (~mattil@helsinki.portalify.com)
[08:57:19] *** Joins: jplesnik (~jplesnik@83.240.62.176)
[08:58:54] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:07:34] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[09:10:23] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:10:35] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:12:48] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[09:33:59] *** Joins: riceandb1ans (~zach@dev07.raasta.org)
[09:34:06] *** Joins: lllh (~llh@198.48.244.21)
[09:34:51] *** Joins: _phr3ak_ (~noreply@gnet.hu)
[09:35:12] *** Joins: perlmaros_ (~perlmaros@master.k-1.com)
[09:35:14] *** Joins: lucerne9 (~lucerne@ip202.ip-51-178-215.eu)
[09:35:25] *** Joins: randir_ (~randir@95-25-59-33.broadband.corbina.ru)
[09:35:51] *** Joins: tbcr (~tbcr@107.13.189.161)
[09:36:28] *** Joins: ram_ (~ram@82-65-77-141.subs.proxad.net)
[09:37:15] *** Joins: clarjon_1 (~clarjon1@user/clarjon1)
[09:37:22] *** Joins: alh_ (~alh@hiddenrealms.org)
[09:39:05] *** Joins: ether_ (~ether@vps-6c71e929.vps.ovh.net)
[09:39:06] *** Quits: ether_ (~ether@vps-6c71e929.vps.ovh.net) (Changing host)
[09:39:06] *** Joins: ether_ (~ether@perl/cpan-druid/ether)
[09:39:06] *** Joins: elcaro_ (~anonymous@45.32.191.75)
[09:39:08] *** Joins: mst_ (~matthewt@vps-6c71e929.vps.ovh.net)
[09:40:34] *** Joins: peder_ (4822@nidur.ifi.uio.no)
[09:40:43] *** Joins: jdv_ (~jdv79@jdv.devuyst.com)
[09:40:46] *** Joins: hodbogi_ (~hodbogi@9600-baud.net)
[09:41:08] *** Joins: quesker_ (idnet@2600:3c01::f03c:91ff:feac:4ce2)
[09:41:22] *** Joins: SysPete_ (~SysPete@fin.sysnix.com)
[09:41:36] *** Joins: garp (~chaos@user/pragmatic-chaos)
[09:42:11] *** Joins: phryk_ (~totallyno@user/phryk)
[09:42:41] *** Joins: i8c (~i7c@user/i7c)
[09:42:59] *** Joins: mjh4386_ (~mjh4386@165.22.53.231)
[09:43:02] *** Joins: jercos_ (jercos@xyl.be)
[09:43:03] *** Joins: oskie_ (usel@user/oskie)
[09:43:08] *** Joins: ilmari__ (~ilmari@user/ilmari)
[09:43:08] *** Joins: thowe_ (~thowe@66.39.169.133)
[09:43:26] *** Joins: cxreg2 (~count@63.228.111.44)
[09:43:28] *** Joins: tobs` (~tobs@taboege.de)
[09:44:05] *** Joins: skarn_ (~skarn@user/skarn)
[09:44:18] *** Quits: ethoxy (~caretaker@cx21.havox.ru) (*.net *.split)
[09:44:18] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[09:44:18] *** Quits: Nei (~ailin@user/nemui) (*.net *.split)
[09:44:19] *** Quits: llh (~llh@user/llh) (*.net *.split)
[09:44:19] *** Quits: tbcr_ (~tbcr@107.13.189.161) (*.net *.split)
[09:44:19] *** Quits: randir (~randir@95-25-59-33.broadband.corbina.ru) (*.net *.split)
[09:44:19] *** Quits: Repaster (~Repaster@perlbot/bot/grinnz/repaster) (*.net *.split)
[09:44:19] *** Quits: hodbogi (~hodbogi@user/fatalnix) (*.net *.split)
[09:44:19] *** Quits: ramix (~ram@82-65-77-141.subs.proxad.net) (*.net *.split)
[09:44:19] *** Quits: peder (4822@nidur.ifi.uio.no) (*.net *.split)
[09:44:19] *** Quits: rfi (~rfi@216.70.102.172) (*.net *.split)
[09:44:19] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (*.net *.split)
[09:44:19] *** Quits: ether (~ether@perl/cpan-druid/ether) (*.net *.split)
[09:44:19] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (*.net *.split)
[09:44:19] *** Quits: seekr (~seekr@130.44.164.192) (*.net *.split)
[09:44:19] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:44:19] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (*.net *.split)
[09:44:19] *** Quits: cxreg (~count@63.228.111.44) (*.net *.split)
[09:44:19] *** Quits: riceandbeans (~zach@user/riceandbeans) (*.net *.split)
[09:44:19] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (*.net *.split)
[09:44:19] *** Quits: SysPete (~SysPete@fin.sysnix.com) (*.net *.split)
[09:44:20] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[09:44:20] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[09:44:20] *** Quits: ilmari (~ilmari@user/ilmari) (*.net *.split)
[09:44:20] *** Quits: thowe (~thowe@66.39.169.133) (*.net *.split)
[09:44:20] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[09:44:20] *** Quits: i7c (~i7c@user/i7c) (*.net *.split)
[09:44:20] *** Quits: a3r0 (~aero@61.100.184.210) (*.net *.split)
[09:44:20] *** Quits: alh (~alh@hiddenrealms.org) (*.net *.split)
[09:44:20] *** Quits: tobs (~tobs@taboege.de) (*.net *.split)
[09:44:20] *** Quits: nicomen (~nicolas@178.124.223.35.bc.googleusercontent.com) (*.net *.split)
[09:44:20] *** Quits: jelly (jelly@user/jelly) (*.net *.split)
[09:44:20] *** Quits: glider (~glider@user/glider) (*.net *.split)
[09:44:20] *** Quits: jercos (jercos@xyl.be) (*.net *.split)
[09:44:20] *** Quits: quesker (~idnet@mail.89vx.net) (*.net *.split)
[09:44:20] *** Quits: Skarn (~skarn@user/skarn) (*.net *.split)
[09:44:20] *** Quits: elcaro (~anonymous@45.32.191.75) (*.net *.split)
[09:44:20] *** Quits: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder) (*.net *.split)
[09:44:20] *** Quits: perlmaros (~perlmaros@master.k-1.com) (*.net *.split)
[09:44:20] *** Quits: casaca (~casaca@user/casaca) (*.net *.split)
[09:44:20] *** Quits: oskie (usel@user/oskie) (*.net *.split)
[09:44:20] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (*.net *.split)
[09:44:20] *** Quits: phr3ak (~noreply@gnet.hu) (*.net *.split)
[09:44:20] *** Quits: raydiak (~raydiak@cyberuniverses.com) (*.net *.split)
[09:44:20] *** Quits: p71 (~p71@071-090-085-184.res.spectrum.com) (*.net *.split)
[09:44:20] *** Quits: jdv (~jdv79@jdv.devuyst.com) (*.net *.split)
[09:44:20] *** Quits: crashmatrix (~hatseflat@hatsuseno.rootaccess.nl) (*.net *.split)
[09:44:20] *** lucerne9 is now known as lucerne
[09:44:20] *** tobs` is now known as tobs
[09:44:20] *** quesker_ is now known as quesker
[09:44:20] *** Joins: jelly-home (jelly@user/jelly)
[09:44:21] *** SysPete_ is now known as SysPete
[09:44:21] *** perlmaros_ is now known as perlmaros
[09:44:21] *** _phr3ak_ is now known as phr3ak
[09:44:23] *** peder_ is now known as peder
[09:44:24] *** Joins: a3r0_ (~aero@61.100.184.210)
[09:44:34] *** Joins: tobybl (~tobybl@31.111.35.255)
[09:44:34] *** Joins: Nei (~ailin@user/nemui)
[09:44:50] *** skarn_ is now known as Skarn
[09:46:27] *** Joins: crashmatrix (~hatseflat@hatsuseno.rootaccess.nl)
[09:46:27] *** Joins: rfi (~rfi@216.70.102.172)
[09:46:27] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[09:46:27] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[09:46:27] *** Joins: chronon (~chronon@user/chronon)
[09:46:27] *** Joins: glider (~glider@user/glider)
[09:46:27] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[09:46:46] *** Joins: p71 (~p71@071-090-085-184.res.spectrum.com)
[09:47:26] *** Quits: jelly-home (jelly@user/jelly) (Excess Flood)
[09:47:31] *** Joins: ufobat_ (~martin@dynamic-095-114-034-172.95.114.pool.telefonica.de)
[09:49:06] *** Joins: seoul_man (~meh@097-080-088-148.res.spectrum.com)
[09:49:57] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:50:00] *** Joins: raydiak (~raydiak@cyberuniverses.com)
[09:50:23] *** Quits: ufobat_ (~martin@dynamic-095-114-034-172.95.114.pool.telefonica.de) (Client Quit)
[09:50:33] *** Joins: ethoxy (~caretaker@cx21.havox.ru)
[09:51:13] *** Joins: jelly (jelly@user/jelly)
[09:54:42] *** Joins: Repaster (~Repaster@ool-2f148218.dyn.optonline.net)
[09:54:42] *** Quits: Repaster (~Repaster@ool-2f148218.dyn.optonline.net) (Changing host)
[09:54:42] *** Joins: Repaster (~Repaster@perlbot/bot/grinnz/repaster)
[09:57:00] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[09:57:58] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[10:16:34] * GumbyPAN CPAN Upload: Game-FaceGenerator-1.02 by SCHROEDER https://metacpan.org/release/SCHROEDER/Game-FaceGenerator-1.02
[10:19:54] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca)
[10:20:28] *** Joins: glider_ (~glider@user/glider)
[10:20:32] *** Quits: glider (~glider@user/glider) (Ping timeout: 252 seconds)
[10:20:38] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (Read error: Connection reset by peer)
[10:21:00] *** Quits: aspic (~shifty~~~@ppp121-44-118-185.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[10:23:19] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[10:25:48] *** Joins: crashmat1ix (~hatseflat@hatsuseno.rootaccess.nl)
[10:26:47] *** Quits: crashmatrix (~hatseflat@hatsuseno.rootaccess.nl) (Ping timeout: 252 seconds)
[10:39:31] *** Joins: tomys_ (~tomys@c188-149-14-10.bredband.tele2.se)
[10:40:18] *** Joins: Nei_ (~ailin@user/nemui)
[10:40:24] *** Quits: Kimmono (~Kimmono@195-159-198-100.customer.powertech.no) (Read error: Connection reset by peer)
[10:40:47] *** Joins: Kimmono (~Kimmono@195-159-198-100.customer.powertech.no)
[10:41:24] *** Joins: voegelas_ (~voegelas@www.andreasvoegele.com)
[10:41:36] *** Joins: Nahra` (~user@static.161.95.99.88.clients.your-server.de)
[10:41:44] *** Quits: Nei (~ailin@user/nemui) (Ping timeout: 252 seconds)
[10:41:44] *** Quits: SysPete (~SysPete@fin.sysnix.com) (Ping timeout: 252 seconds)
[10:42:17] *** Quits: voegelas (~voegelas@www.andreasvoegele.com) (Ping timeout: 252 seconds)
[10:42:17] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 252 seconds)
[10:42:50] *** Quits: i8c (~i7c@user/i7c) (Ping timeout: 252 seconds)
[10:42:50] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 252 seconds)
[10:42:50] *** Quits: Bluewind (~Bluewind@user/bluewind) (Ping timeout: 252 seconds)
[10:43:31] *** Joins: choroba (~E.Choroba@88.146.255.106)
[10:43:40] *** Nei_ is now known as Nei
[10:43:59] *** Joins: SysPete (~SysPete@fin.sysnix.com)
[10:47:13] *** Joins: art1 (~romeyke@p200300ccdf068300af86fd278eed5767.dip0.t-ipconnect.de)
[10:47:29] *** Joins: tomys__ (~tomys@c188-149-14-10.bredband.tele2.se)
[10:48:16] *** Joins: Bluewind (~Bluewind@user/bluewind)
[10:48:38] *** Joins: i8c (~i7c@user/i7c)
[10:49:12] *** Joins: taeaad_ (~taeaad@user/taeaad)
[10:49:41] *** Joins: skyl4rk` (~tlvb@user/tlvb)
[10:49:55] *** Joins: Nei_ (~ailin@user/nemui)
[10:50:41] *** Joins: DrHyde_ (~david@bytemark.barnyard.co.uk)
[10:51:12] *** Quits: skyl4rk (~tlvb@user/tlvb) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: tomys_ (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: taeaad (~taeaad@user/taeaad) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com) (Remote host closed the connection)
[10:51:12] *** Quits: Nei (~ailin@user/nemui) (Remote host closed the connection)
[10:51:12] *** Quits: DrHyde (~david@bytemark.barnyard.co.uk) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: berndj (~berndj@ns2.linksynergy.co.za) (Remote host closed the connection)
[10:51:12] *** Quits: ori (~atdt@user/ori) (Ping timeout: 252 seconds)
[10:51:26] *** Joins: ori (~atdt@user/ori)
[10:51:53] *** Quits: digdilem (~digdilem@rolf.yuss.org) (Ping timeout: 252 seconds)
[10:52:11] *** Joins: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com)
[10:52:47] *** Quits: MikeGeorge[m] (~onesuitsa@2001:470:69fc:105::1f88) (Ping timeout: 252 seconds)
[10:52:47] *** Quits: fizzie (irc@selene.zem.fi) (Ping timeout: 252 seconds)
[10:52:51] *** Joins: berndj (~berndj@ns1.linksynergy.co.za)
[10:52:59] *** Joins: MikeGeorge[m] (~onesuitsa@2001:470:69fc:105::1f88)
[10:53:15] *** Nei_ is now known as Nei
[10:54:50] *** Joins: nperez_ (~nperez@86-93-223-59.fixed.kpn.net)
[10:54:53] *** Joins: voegelas (~voegelas@www.andreasvoegele.com)
[10:55:34] *** Joins: keir_ (~keir@user/keir)
[10:56:35] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[10:56:55] *** Joins: fizzie (irc@selene.zem.fi)
[10:57:02] *** Quits: APic (apic@apic.name) (Ping timeout: 252 seconds)
[10:57:02] *** Quits: nperez__ (~nperez@86-93-223-59.fixed.kpn.net) (Ping timeout: 252 seconds)
[10:57:02] *** Quits: keir (~keir@user/keir) (Ping timeout: 252 seconds)
[10:57:03] *** Quits: voegelas_ (~voegelas@www.andreasvoegele.com) (Ping timeout: 252 seconds)
[10:57:03] *** Joins: EPic_ (apic@apic.name)
[10:58:10] *** Joins: semeion (~semeion@user/semeion)
[10:58:38] *** Joins: Pali (~pali@user/pali)
[11:00:08] *** Joins: digdilem (~digdilem@rolf.yuss.org)
[11:00:43] *** Quits: randir_ (~randir@95-25-59-33.broadband.corbina.ru) (Remote host closed the connection)
[11:01:32] *** Joins: samcv_ (~samcv@194.233.102.77)
[11:04:43] *** Quits: samcv (~samcv@194.233.102.77) (Ping timeout: 252 seconds)
[11:07:45] *** Quits: Pali (~pali@user/pali) (Ping timeout: 260 seconds)
[11:13:16] *** Joins: Name (~clarjon1@user/clarjon1)
[11:13:25] *** Name is now known as Guest4024
[11:15:12] *** Quits: justache (~justache@user/justache) (Ping timeout: 250 seconds)
[11:15:12] *** Joins: justache (~justache@user/justache)
[11:15:37] *** Quits: bmeneg_ (~bmeneg@2001:1284:f013:1328:18e3:1f16:60ab:3a68) (Read error: Connection reset by peer)
[11:15:39] *** Joins: bmeneg (~bmeneg@2001:1284:f013:1328:18e3:1f16:60ab:3a68)
[11:15:47] *** Quits: edr (~edr@user/edr) (Ping timeout: 250 seconds)
[11:16:39] *** Quits: clarjon_1 (~clarjon1@user/clarjon1) (Ping timeout: 250 seconds)
[11:16:50] *** Joins: edr (~edr@enlo.co)
[11:16:50] *** Quits: edr (~edr@enlo.co) (Changing host)
[11:16:50] *** Joins: edr (~edr@user/edr)
[11:17:05] *** Quits: dilfridge (~quassel@gentoo/developer/dilfridge) (Ping timeout: 250 seconds)
[11:17:19] *** Joins: dilfridge (~quassel@gentoo/developer/dilfridge)
[11:17:30] *** Quits: rozie (~rozie@2001:15e8:110:2913:1:1:1:2) (Ping timeout: 250 seconds)
[11:17:38] *** Joins: rozie (~rozie@2001:15e8:110:2913:1:1:1:2)
[11:24:41] *** Quits: darkstardevx (~darkstard@2601:1c2:300:c8a0::f2b6) (Ping timeout: 264 seconds)
[11:29:31] *** Joins: randir (~randir@93.159.239.42)
[11:32:39] *** Joins: darkstardevx (~darkstard@c-24-21-53-33.hsd1.or.comcast.net)
[11:36:41] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[11:39:50] *** Guest4024 is now known as clarjon1
[11:43:49] *** Joins: zgu|skar0 (~zgu@2603-7080-b704-0800-16be-797d-71a4-f478.res6.spectrum.com)
[11:45:19] *** Quits: zgu|skaro (~zgu@2603-7080-b704-0800-16be-797d-71a4-f478.res6.spectrum.com) (Read error: Connection reset by peer)
[11:46:06] *** Quits: elcaro_ (~anonymous@45.32.191.75) (Ping timeout: 250 seconds)
[11:46:14] *** Joins: elcaro (~anonymous@45.32.191.75)
[11:47:50] *** Quits: jdv_ (~jdv79@jdv.devuyst.com) (Ping timeout: 250 seconds)
[11:47:51] *** Quits: TitanOfOld|work (~titan@gentoo/developer/TitanOfOld) (Ping timeout: 250 seconds)
[11:47:57] *** Joins: jdv (~jdv79@jdv.devuyst.com)
[11:48:15] *** Joins: TitanOfOld (titan@gentoo/developer/TitanOfOld)
[11:49:40] *** Joins: mnemonic (~semeion@user/semeion)
[11:50:55] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[11:53:25] *** Joins: iridium__ (~iridium@122.175.138.158)
[11:55:02] *** Joins: tomys_ (~tomys@c188-149-14-10.bredband.tele2.se)
[11:56:07] *** Joins: gloin_ (~gloin@user/gloin)
[11:56:15] *** Joins: Kimm0n0 (~Kimmono@195-159-198-100.customer.powertech.no)
[11:56:30] *** Quits: itok (sid418430@id-418430.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[11:56:31] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[11:56:37] *** Joins: Lemniscate (~sauvin@about/linux/staff/sauvin)
[11:56:43] *** Quits: gloin (~gloin@user/gloin) (Read error: Connection reset by peer)
[11:56:50] *** Joins: itok (sid418430@id-418430.ilkley.irccloud.com)
[11:58:32] *** Joins: pizdets_ (~pizdets@183.182.115.5)
[11:58:58] *** Quits: pizdets (~pizdets@183.182.115.5) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: tomys__ (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: rbraun (A40b89Sz@user/rbraun) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: liam (sid7517@id-7517.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[11:59:12] *** Joins: rbraun (roEQ9ZcC@WHELK.CLUB.CC.CMU.EDU)
[11:59:13] *** Quits: Kimmono (~Kimmono@195-159-198-100.customer.powertech.no) (Ping timeout: 252 seconds)
[11:59:13] *** Quits: integral (sid296274@user/integral) (Ping timeout: 252 seconds)
[11:59:14] *** Lemniscate is now known as Sauvin
[12:00:08] *** Joins: liam (sid7517@id-7517.helmsley.irccloud.com)
[12:01:25] *** Quits: alex11 (~alex11@user/alex11) (Ping timeout: 252 seconds)
[12:01:54] *** Joins: alex11 (~alex11@bras-base-mtrlpq5302w-grc-31-76-70-61-139.dsl.bell.ca)
[12:01:54] *** Quits: alex11 (~alex11@bras-base-mtrlpq5302w-grc-31-76-70-61-139.dsl.bell.ca) (Changing host)
[12:01:54] *** Joins: alex11 (~alex11@user/alex11)
[12:02:15] *** Joins: integral (sid296274@user/integral)
[12:02:22] *** Quits: alex11 (~alex11@user/alex11) (Remote host closed the connection)
[12:07:06] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[12:07:44] *** Joins: mattil (~mattil@airio.portalify.com)
[12:10:39] *** Quits: holyghost (~holly@2a02:a03f:64c8:9200:4eb:e0c0:3a5:b494) (Quit: bbl, work to do)
[12:11:23] *** Quits: karjala (sid176588@id-176588.lymington.irccloud.com) (Ping timeout: 252 seconds)
[12:12:20] *** Joins: odc_ (sid197788@id-197788.helmsley.irccloud.com)
[12:12:29] *** Quits: ranguard__ (sid496095@id-496095.lymington.irccloud.com) (Ping timeout: 252 seconds)
[12:12:29] *** Quits: odc (sid197788@id-197788.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[12:12:30] *** Quits: corwin (someone@fosshost/director/corwin) (Ping timeout: 252 seconds)
[12:12:30] *** odc_ is now known as odc
[12:12:43] *** Joins: karjala (sid176588@id-176588.lymington.irccloud.com)
[12:12:46] *** Quits: kcz (~quassel@5.180.201.135) (Remote host closed the connection)
[12:12:48] *** Joins: corwin (~someone@fosshost/director/corwin)
[12:12:54] *** Joins: ranguard__ (sid496095@id-496095.lymington.irccloud.com)
[12:12:57] *** Quits: daemon (znc@about/web/TheBeardedBSDer) (Read error: Connection reset by peer)
[12:12:58] *** Quits: Nahra` (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 252 seconds)
[12:12:58] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (Ping timeout: 252 seconds)
[12:12:58] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 252 seconds)
[12:12:58] *** Quits: Nowaker (~quassel@188.116.38.80) (Ping timeout: 252 seconds)
[12:12:58] *** Quits: nrr (sid20938@id-20938.lymington.irccloud.com) (Ping timeout: 252 seconds)
[12:12:58] *** Quits: ggherdov (sid11402@id-11402.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[12:13:05] *** Joins: Nowaker (~quassel@188.116.38.80)
[12:13:12] *** Joins: daemon (znc@about/web/TheBeardedBSDer)
[12:13:22] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[12:13:22] *** ChanServ sets mode: +v perlbot
[12:13:31] *** Quits: kiwiroy (sid374179@2a03:5180:f:2::5:b5a3) (Ping timeout: 252 seconds)
[12:13:37] *** Joins: Nahra` (~user@static.161.95.99.88.clients.your-server.de)
[12:13:43] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[12:14:09] *** Joins: kcz (~quassel@2a01:430:12:ff11::1)
[12:14:11] *** Joins: ggherdov (sid11402@id-11402.helmsley.irccloud.com)
[12:14:43] *** Joins: tomaw_ (tom@libera/staff/tomaw)
[12:15:50] *** Joins: nrr (sid20938@id-20938.lymington.irccloud.com)
[12:16:16] *** tomaw is now known as Guest6410
[12:16:16] *** tomaw_ is now known as tomaw
[12:16:28] *** Joins: kiwiroy (sid374179@id-374179.lymington.irccloud.com)
[12:18:50] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[12:20:07] *** Quits: Guest6410 (tom@libera/staff/tomaw) (Ping timeout: 630 seconds)
[12:31:04] *** Joins: aspic (~shifty~~~@ppp121-44-118-189.syd-gls-har-bras39.tpg.internode.on.net)
[12:35:09] *** Joins: jdltouraine__ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[12:35:39] *** Joins: tomys__ (~tomys@c188-149-14-10.bredband.tele2.se)
[12:37:14] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 250 seconds)
[12:37:35] *** Quits: jdv (~jdv79@jdv.devuyst.com) (Ping timeout: 252 seconds)
[12:37:40] *** Quits: voegelas (~voegelas@www.andreasvoegele.com) (Remote host closed the connection)
[12:37:40] *** Quits: Nahra` (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 252 seconds)
[12:37:40] *** Quits: tomys_ (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 252 seconds)
[12:37:42] *** Joins: Nei_ (~ailin@user/nemui)
[12:37:47] *** Quits: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com) (Read error: Connection reset by peer)
[12:37:47] *** Joins: jdv (~jdv79@jdv.devuyst.com)
[12:38:18] *** Joins: Nahra` (~user@static.161.95.99.88.clients.your-server.de)
[12:38:23] *** Joins: voegelas (~voegelas@www.andreasvoegele.com)
[12:39:21] *** Joins: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com)
[12:40:48] *** Joins: mnemonic (~semeion@user/semeion)
[12:41:30] *** Joins: berndj-blackout (~berndj@ns2.linksynergy.co.za)
[12:42:14] *** Joins: jdv_ (~jdv79@jdv.devuyst.com)
[12:43:42] *** Joins: edro (~edr@enlo.co)
[12:43:42] *** Quits: edro (~edr@enlo.co) (Changing host)
[12:43:42] *** Joins: edro (~edr@user/edr)
[12:44:39] *** Quits: edr (~edr@user/edr) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: Nei (~ailin@user/nemui) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: chronon (~chronon@user/chronon) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: elcaro (~anonymous@45.32.191.75) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: jdv (~jdv79@jdv.devuyst.com) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: berndj (~berndj@ns1.linksynergy.co.za) (Ping timeout: 252 seconds)
[12:44:39] *** Joins: elcaro (~anonymous@45.32.191.75)
[12:44:39] *** Quits: choroba (~E.Choroba@88.146.255.106) (Ping timeout: 252 seconds)
[12:45:38] *** Nei_ is now known as Nei
[12:45:41] *** Joins: choroba_ (~E.Choroba@88.146.255.106)
[12:45:59] *** berndj-blackout is now known as berndj
[12:46:15] *** Joins: chronon (~chronon@user/chronon)
[12:50:09] *** Quits: darkstardevx (~darkstard@c-24-21-53-33.hsd1.or.comcast.net) (Remote host closed the connection)
[12:50:21] *** Quits: jdltouraine__ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Read error: Connection reset by peer)
[12:50:31] *** Joins: darkstardevx (~darkstard@2601:1c2:300:c8a0::f2b6)
[12:50:38] *** Joins: jdltouraine__ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[12:53:51] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[12:55:56] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (Ping timeout: 245 seconds)
[12:57:11] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[13:00:19] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[13:00:23] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 252 seconds)
[13:03:14] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[13:05:40] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:06:19] *** Joins: mattil (~mattil@airio.portalify.com)
[13:13:20] *** Quits: Peppard (~quassel@2001:470:1f0b:751:e8e6:b6d3:a46d:1842) (Quit: No Ping reply in 180 seconds.)
[13:14:20] *** Quits: Michelle (~michelle@2407:8800:bc20:200a:c0de:24dc:8f07:a0bc) (Remote host closed the connection)
[13:14:29] *** Joins: Peppard (~quassel@2001:470:1f0b:751:b03d:fa1:9778:4e18)
[13:20:45] *** Joins: Michelle (~michelle@203.206.128.220)
[13:22:08] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[13:23:41] *** EPic_ is now known as APic
[13:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:31:01] *** Joins: csrf (~csrf@user/csrf)
[13:33:16] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:40:51] <xq> what side effects does { use 5.006; } have outside of its scope?
[13:41:25] <xq> (this is from Carp.pm)
[13:42:17] *** Joins: alex11 (~alex11@bras-base-mtrlpq5302w-grc-31-76-70-61-139.dsl.bell.ca)
[13:42:17] *** Quits: alex11 (~alex11@bras-base-mtrlpq5302w-grc-31-76-70-61-139.dsl.bell.ca) (Changing host)
[13:42:17] *** Joins: alex11 (~alex11@user/alex11)
[13:45:14] *** tomys__ is now known as kevin-oculus
[13:48:21] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[13:53:04] *** Quits: jdltouraine__ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Ping timeout: 252 seconds)
[13:54:32] *** Joins: casaca (~casaca@user/casaca)
[13:54:42] *** Quits: alex11 (~alex11@user/alex11) (Quit: Leaving)
[14:05:17] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 252 seconds)
[14:08:52] *** Joins: mnemonic (~semeion@user/semeion)
[14:16:59] * GumbyPAN CPAN Upload: OPM-Validate-1.10 by RENEEB https://metacpan.org/release/RENEEB/OPM-Validate-1.10
[14:20:41] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[14:21:37] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 252 seconds)
[14:32:48] <rindolf> xq: hi. it causes a compile-time error on perls 5.005 and below
[14:34:47] *** Joins: mnemonic (~semeion@user/semeion)
[14:43:04] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[14:48:27] *** Quits: keir_ (~keir@user/keir) (Quit: ZNC - https://znc.in)
[14:49:23] *** Joins: anthk_ (~anthk_@106.83-213-54.dynamic.clientes.euskaltel.es)
[14:51:07] *** Joins: keir (~keir@user/keir)
[15:09:12] *** Joins: holyghost (~holly@109.136.39.83)
[15:14:30] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:23:18] *** Quits: holyghost (~holly@109.136.39.83) (Quit: bbl)
[15:23:29] <ilmari__> use 5.006; doesn't have any other side-effects in its scope either. only 5.10 and upwards does that
[15:24:47] <ilmari__> from v5.10 it enables the corresponding feature bundle, from v5.12 it enables strict, and from v5.35 it enables warnings
[15:31:25] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[15:34:49] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 252 seconds)
[15:35:24] *** Martchus_ is now known as Martchus
[15:36:43] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[15:41:51] *** Joins: proller (~p@5.255.232.213-red.dhcp.yndx.net)
[15:44:07] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 252 seconds)
[15:45:16] *** Quits: rypervenche (~rypervenc@user/rypervenche) (Quit: 掰掰～)
[15:47:16] <LeoNerd> And depending on how we do it, maybe enables std/func/builtins/...
[15:48:01] *** ilmari__ is now known as ilmari
[15:49:44] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:50:26] *** Joins: mattil (~mattil@airio.portalify.com)
[15:57:27] *** Joins: mnemonic (~semeion@user/semeion)
[15:59:09] <xq> so why does Carp.pm have curly braces around `use 5.006;` ?
[15:59:28] *** Joins: rypervenche (~rypervenc@user/rypervenche)
[15:59:29] *** Quits: mattil (~mattil@airio.portalify.com) (Read error: Connection reset by peer)
[16:00:00] *** Joins: mattil (~mattil@airio.portalify.com)
[16:00:29] <LeoNerd> Perhaps overly-defensive futureproofing?
[16:01:39] <simcop2387> or some stupid quirk with older perls
[16:01:48] <simcop2387> like 5.5 and below
[16:02:52] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[16:03:04] <ilmari> it's zeframism, he's vehemently opposed to any implicit side effects
[16:03:38] <ilmari> so he always puts `use VERSION;` in its own scope, to avoid anything other than the version check
[16:03:52] <ilmari> s/avoid/$& having to think about/
[16:04:47] <simcop2387> fair enough
[16:05:37] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[16:07:11] * GumbyPAN CPAN Upload: Math-BigInt-1.999826 by PJACKLAM https://metacpan.org/release/PJACKLAM/Math-BigInt-1.999826
[16:08:51] <alh_> use feature VERSION does an implicit no feature ':all'
[16:08:53] *** alh_ is now known as alh
[16:09:28] <alh> eval5.16; { use 5.006 }; @x = qw(cat dog); $[ = 1; print $x[1]
[16:09:29] <perlbot> alh: ERROR: Assigning non-zero to $[ is no longer possible at (IRC) line 1. 
[16:09:31] <alh> eval5.16; use 5.006; @x = qw(cat dog); $[ = 1; print $x[1]
[16:09:33] <perlbot> alh: cat
[16:11:37] <xq> thanks
[16:12:12] * GumbyPAN CPAN Upload: Math-BigRat-0.2619 by PJACKLAM https://metacpan.org/release/PJACKLAM/Math-BigRat-0.2619
[16:12:12] * GumbyPAN CPAN Upload: bignum-0.61 by PJACKLAM https://metacpan.org/release/PJACKLAM/bignum-0.61
[16:16:18] <LeoNerd> alh: Yeeeeah... it's a weird one. It wants to be "use exactly and only the features of VERSION and no more"
[16:16:36] <LeoNerd> Which is different from basically any other `use` statement, which all act as simple additions and don't take anything away
[16:16:57] <alh> Yeah, 99% of the time I think of use 5.016; as # This minimum version please
[16:17:03] <alh> But I guess that's { use 5.016; } !
[16:17:21] <LeoNerd> Yeah. Also, you should get into the habit of putting the v on it.  use v5.16;
[16:17:36] <LeoNerd> It didn't used to be recommended waaay back because it was only added in 5.6
[16:18:16] <alh> Hah, my perldoc install is just old enough for v* is not recommended :<
[16:18:47] <LeoNerd> Recommended in practice by folks here, vs "recommended-by-docs" are two different things ;)
[16:19:01] <LeoNerd> I'm sure our docs until quite recently still "recommended" given/when, and smartmatch
[16:20:56] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[16:21:25] <ilmari> the use VERSION docs switched to recommending v5.x in 5.28: https://github.com/perl/perl5/commit/f1546a83e76781a253f643970b2e3dd9d00cd24d
[16:21:25] <Paperbot> Link title(s): [ pod/perlfunc: stop recommending older syntax supported by 5.6.* · Perl/perl5@f1546a8 · GitHub ]
[16:21:53] *** garp is now known as pragma-
[16:24:19] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 252 seconds)
[16:24:52] <alh> 5.26, alas
[16:29:22] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:34:20] *** Quits: Michelle (~michelle@203.206.128.220) (Ping timeout: 252 seconds)
[16:35:22] *** Joins: Michelle (~michelle@203.206.128.220)
[16:35:58] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[16:38:39] *** phryk_ is now known as phryk
[16:44:48] *** Joins: omegatron (~some@p54849842.dip0.t-ipconnect.de)
[16:45:18] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[16:45:53] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 252 seconds)
[16:46:56] *** Joins: holyghost (~holyghost@109.136.39.83)
[16:52:43] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[16:56:36] *** Joins: gggpkm (~gggpkm@188.119.64.181)
[16:58:38] *** Quits: iridium__ (~iridium@122.175.138.158) (Quit: Lost terminal)
[17:02:32] *** Quits: aspic (~shifty~~~@ppp121-44-118-189.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[17:02:49] *** Joins: aspic (~shifty~~~@ppp121-44-127-126.syd-gls-har-bras39.tpg.internode.on.net)
[17:08:22] *** Quits: aspic (~shifty~~~@ppp121-44-127-126.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[17:09:15] *** Joins: aspic (~shifty~~~@ppp121-44-104-104.syd-gls-har-bras38.tpg.internode.on.net)
[17:10:47] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Quit: leaving)
[17:11:02] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:12:00] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[17:14:28] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 252 seconds)
[17:16:45] *** Quits: pucara (~i@181.111.20.21) (Quit: Lost terminal)
[17:28:30] <phryk> How do I extend perls syntax through a module? Is there any good source on this?
[17:33:15] *** Joins: sbates (~sbates@198.178.118.18)
[17:34:05] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[17:35:11] *** Quits: tbcr (~tbcr@107.13.189.161) (Killed (NickServ (GHOST command used by tbcr_!~brclark@user/tbcr)))
[17:35:28] *** Joins: tbcr_ (~tbcr@107.13.189.161)
[17:37:32] *** Quits: aspic (~shifty~~~@ppp121-44-104-104.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[17:39:27] <rindolf> phryk: see the "Syntax::" namespace
[17:39:53] *** Quits: omegatron (~some@p54849842.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[17:40:50] <phryk> rindolf: no place that actually *documents* this stuff?
[17:41:29] *** choroba_ is now known as choroba
[17:42:02] <rindolf> phryk: there might be
[17:42:05] <Grinnz> phryk: somewhat vague question - the easiest way to extend perl's syntax is to define a subroutine, but that has limited ability to do so
[17:42:39] <Grinnz> beyond that, you either have to use a module like Keyword::Simple to define keywords by rewriting them to perl code, or write XS code to use the keyword api directly, or do crazier internals stuff
[17:42:48] <phryk> Grinnz: No, I want to add a new primitive/keyword.
[17:43:04] <phryk> Ah, Keyword::Simple sounds like a good place to look then. :)
[17:43:04] <Grinnz> most keywords are representable by regular subroutines
[17:45:36] *** Quits: art1 (~romeyke@p200300ccdf068300af86fd278eed5767.dip0.t-ipconnect.de) (Quit: Leaving.)
[17:45:58] <choroba> Do you already know all the existing keywords? You shouldn't add new ones before you know the old ones ;)
[17:46:10] *** Joins: mnemonic (~semeion@user/semeion)
[17:46:21] <phryk> I don't but i know it doesn't have what I'm looking for.
[17:46:47] <choroba> What's that?
[17:46:57] <phryk> I want easy to use readable function decoration. Honestly can't really believe that perl has nothing in this regard that isn't overly complicated or completely besides the issue…
[17:47:09] <choroba> Attributes?
[17:47:41] <phryk> You mean "has"? That's something completely different.
[17:48:19] <haj> I guess he means subroutine attributes, as in perldoc perlsub
[17:49:12] <Grinnz> subroutine attributes do exist and are customizable
[17:49:50] <Grinnz> please in the future describe what you're looking for instead of declaring it doesn't exist
[17:49:59] *** Joins: gast0n (~g4570n@user/gast0n)
[17:50:26] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[17:51:25] *** Quits: holyghost (~holyghost@109.136.39.83) (Quit:  bbl)
[17:52:24] <phryk> Okay, I read the perlsub documentation on Attributes and besides the Syntax still have no idea what those things do.
[17:52:48] <Grinnz> https://perldoc.perl.org/attributes
[17:52:48] <Paperbot> Link title(s): [ attributes - get/set subroutine or variable attributes - Perldoc Browser ]
[17:53:03] <Grinnz> they don't generally do anything until you tell them to do something
[17:56:45] <phryk> That doesn't even explain the concept of what attributes are… Why is all perl documentation like this? :/
[17:56:57] <alh> It's really not
[17:57:02] <alh> attributes documentation is particularly crappy
[17:57:19] <phryk> Nah, par for the course with everything I've seen the last couple weeks.
[17:57:27] <alh> ¯\_(ツ)_/¯
[17:57:43] <Grinnz> https://perldoc.perl.org/perlsub#Subroutine-Attributes as you were pointed to before explains the concept
[17:57:44] <Paperbot> Link title(s): [ perlsub - Perl subroutines - Perldoc Browser ]
[17:58:14] <Grinnz> i'm not sure what other explanation you're expecting, there is nothing else to them
[17:58:23] <Grinnz> they are just things you put on a subroutine and then define what that means
[17:59:11] <Grinnz> the reason that's all the docs there are for them is they aren't used very much
[17:59:43] <alh> https://www.perl.com/article/untangling-subroutine-attributes/ shows you how to overwrite a subroutine using attributes - if that's what you're trying to do
[17:59:43] <Paperbot> Link title(s): [ Untangling subroutine attributes ]
[17:59:52] <alh> It's pretty gross because attributes are pretty gross 
[18:00:07] <phryk> It doesn't. Where does that actually explain *what* an attribute is. It just presupposes that you know what attributes are and points to perldoc attributes *which also doesn't explain the concept+. I really want to like this language, but it's making it real hard.
[18:00:12] *** Joins: Getty (getty@stardestroyer.de)
[18:00:38] *** Joins: jdltouraine__ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[18:00:41] <Grinnz> again, what is there to explain about them?
[18:00:50] <Grinnz> they don't mean anything until you make them mean something
[18:01:23] <choroba> maybe check Attribute::Handlers
[18:01:27] <phryk> The whole concept. Are they functions that are called? Modules? Shmorbs?
[18:01:32] <Grinnz> no, no, no
[18:01:39] <Grinnz> they are words you put on a subroutine
[18:01:47] *** Quits: anthk_ (~anthk_@106.83-213-54.dynamic.clientes.euskaltel.es) (Ping timeout: 252 seconds)
[18:01:48] <Grinnz> you can register what those words mean
[18:01:53] <Grinnz> that's it, that's the entire feature
[18:02:03] <ilmari> they're a bit like decorators in other languages
[18:02:05] <ilmari> but not as useful
[18:02:08] <choroba> and when the subroutine is compiled, you can do something with the result of the compilation
[18:05:14] <phryk> choroba: i.e. i get a reference to the compiled function and can do decoration-style things with it? i.e. replace the function body with something around the compiled function?
[18:05:38] <alh> Yes, like in the link I provided
[18:05:58] <choroba> exactly
[18:06:09] <phryk> alh: ah, overread that one, thanks that looks like the most useful link in regards to this.
[18:06:18] <alh> o/
[18:06:57] <phryk> but if that's the case they should be exactly as powerful as decorators, shouldn't they? not sure what limitations ilmari was alluding to…
[18:07:22] <Grinnz> Attribute::Handlers is the easiest api for registering them
[18:07:42] <ircuser> man, would I swear out loud seeing attritubes used in real life
[18:09:12] <phryk> not my fault perl doesn't have any good syntax for just doing f1 = f2(f1)
[18:10:06] <Grinnz> 10:19:49 <Grinnz> please in the future describe what you're looking for instead of declaring it doesn't exist
[18:11:14] <Grinnz> at a guess, you're talking about wrapper functions? which you can do trivially for coderefs, or with Class::Method::Modifiers for named subs
[18:11:17] <ircuser> as I am not familiar with any other language besides perl, what is f1 = f2(f1) supposed to achive? curious
[18:11:24] <ilmari> phryk: the problem is that the sub attribute handler is invoked as soon as the sub is parsed, before the actual sub is compiled, so it can't easily modify it
[18:12:18] <ircuser> function 1 is now result of function 2 called with function 1? wat
[18:12:41] <phryk> ircuser: f2 takes a function as parameter and returns a function.
[18:12:50] <Grinnz> right, trivial with coderefs
[18:13:24] <phryk> you mean &func?
[18:13:46] <Grinnz> sweval: my $sub = sub { 42 }; my $adjuster = sub { my $orig = shift; sub { $orig->() * 2 } }; $adjuster->($sub)->()
[18:13:48] <perlbot> Grinnz: 84
[18:14:11] <ilmari> phryk: *f1 = f2(\&f1)
[18:14:15] <Grinnz> doing it with named subs is more complicated only because their position in the symbol table is a global feature
[18:14:23] <ilmari> huh, does perlbot no longer announce pastes?
[18:14:24] <ilmari> https://l.perl.bot/p/g724a2
[18:14:25] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[18:14:26] <Grinnz> so you're globally modifying the program, rather than just a variable
[18:14:29] *** Quits: jplesnik (~jplesnik@83.240.62.176) (Quit: Leaving)
[18:14:32] <phryk> ilmari: yeah, but that gets unreadable really fast. doesn't make for well maintainable code.
[18:14:43] <ilmari> phryk: what, the * and the \&?
[18:14:51] <ilmari> if you find that unreadable, perl is not the language for you
[18:16:57] <Grinnz> phryk: sub {} returns a reference to an unnamed (anonymous) sub, which you can pass around like \&foo, but there's no package namespace you have to mess with
[18:17:19] <alh> And if unreadable is the problem, then you use something like Class::Method::Modifiers which hides the ugly bits 
[18:17:36] <LeoNerd> CMM is for class methods.. it doesn't really do non-classy functions
[18:17:43] <LeoNerd> I.e. cares about $_[0] being self
[18:17:44] <Grinnz> anonymous subs are crucial for functional programming like this
[18:17:53] <Grinnz> LeoNerd: eh, it works well enough
[18:18:14] <LeoNerd> Usually if i want to do some sort of wrapper around named subs, I do that with a helper function like
[18:18:20] <Grinnz> i dont' think any part of it actually cares about $self
[18:18:25] <phryk> alh: I tried, can only take anonymous functions instead of just a named function, or at least I couldn't get it to work… and yeah I mean I can call a named function from the anonoymous function but that again results in readability problems.
[18:19:08] <LeoNerd> sub memoized($code) { my %cache; return sub ($arg) { return $cache{$arg} //= $code->($arg); } }    so then I can do   *cached_lookup = memoized sub ($arg) { lookup_the_thing($arg); };
[18:19:16] *** Joins: tobybl_ (~tobybl@31.111.35.255)
[18:19:16] <Grinnz> phryk: everything that works with anonymous functions also works with named functions, if you describe a specific problem we could help
[18:19:20] <alh> LeoNerd: I don't think that's true? You can just not treat $_[0] as $self
[18:19:54] <LeoNerd> There. I just defined a simple one-arg scalar memoization wrapper around functions, and then defined a function using it
[18:19:58] <phryk> Yeah, CMM docs also never explicitly mention that it's only for class methods but the name strongly implies it.
[18:20:33] <alh> eval: use Class::Method::Modifiers; sub foo { print "foo called with $_[0]\n" } around(foo => sub { my $orig = shift; print "around called with $_[0]\n"; $orig->($_[0]) }); foo("cat")
[18:20:35] <Grinnz> LeoNerd: unnamed, unfortunately
[18:20:35] <perlbot> alh: around called with cat foo called with cat 
[18:20:54] <Grinnz> LeoNerd: which is why i tend to throw it at Mojo::Util::monkey_patch since that will set_subname
[18:21:03] <LeoNerd> Wrapping a -named- function is a lot harder because the function was already named. So you'll have to yank it out of the symbol table first then stick a new one in its place
[18:21:17] <LeoNerd> Oh.. in that sense. Yes, lazy of me.. I should have set_subname'ed it
[18:21:34] <Grinnz> yeah sorry, the other naming :P
[18:22:05] *** Quits: tobybl (~tobybl@31.111.35.255) (Ping timeout: 252 seconds)
[18:22:14] <Grinnz> in one sense i understand why assigning a sub into the symbol table doesn't set its name, but on the other hand it kinda sucks
[18:22:35] <LeoNerd> It would be nice if it set a name onto anon subs
[18:22:41] <LeoNerd> Just not overwrote ones that already had a name
[18:22:48] <phryk> Grinnz: my specific problem is that i want easy to use, easy to read decorators. I already buttered like 5 hours into this, already read like two dozen documentation pages, looked into half a dozen "solutions" and still have no progress to show… while in python this would literally be a thing of 5 seconds. :F
[18:23:02] <Grinnz> this would be a good job for an actual api to assign a subref into the symbol table
[18:23:05] <LeoNerd> phryk: you can do that with attributes if you really want
[18:23:07] <Grinnz> while also setting its subname
[18:23:31] <LeoNerd> sub lookup :Memoized { ... }   would be possible
[18:23:47] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[18:24:05] <Grinnz> basically, a core Mojo::Util::monkey_patch would be nice to have
[18:24:13] <Grinnz> i would say Sub::Install, but that doesn't even set_subname
[18:24:13] <phryk> If I'm reading the link from alh right, that would mean I have to handle all my decorators from a single function, right?
[18:24:17] <LeoNerd> "Oh but how to do I define Memoized". as an attr "how?" well personally I'd define an attr-attr for making those.. ;)
[18:24:29] <phryk> This is happening in a Mojo project btw, should I look into that monkey_patch function there?
[18:24:35] <LeoNerd> sub Memoized :SubWrapper ($code) { return some wrapper around $code }
[18:24:44] *** Joins: mozambique (~waterproo@a95-93-140-250.cpe.netcabo.pt)
[18:24:46] <Grinnz> monkey_patch isn't specific to mojo, it just puts a subref into the symbol table
[18:24:48] <LeoNerd> Then just define SubWrapper accordingly ;)
[18:24:59] <Grinnz> i.e. makes it accessible by name
[18:25:33] <Grinnz> LeoNerd: that's basically how Attribute::Handlers works
[18:25:42] <LeoNerd> sub make_named_sub($name, $code) { no strict 'refs'; my $caller = pkg; *{"${caller}::$name"} = Sub::Util::set_subname "${caller}::$name" => $code; }
[18:25:52] <LeoNerd> Grinnz: yeah but A:H is *UNGODLY TERRIBLE*
[18:26:12] <Grinnz> if only anyone actually cared abotu sub attributes so there was good code for it :P
[18:26:18] <LeoNerd> Any time I have ever wanted an attribute I have ignored it and done my own thing that has always ended up much nicer than anything I could have done with A:H
[18:26:49] <Grinnz> also, you just reimplemented Mojo::Util::monkey_patch except that it takes a package to install into rather than using caller
[18:26:54] <LeoNerd> E.g. A:H defers the application time until later, in order to work around a perl 5.4(?) bug wherein the GV didn't actually have GvNAME set on it yet
[18:27:06] <LeoNerd> But by 5.6 that was fixed so that whole deferral system is entirely pointless now
[18:27:15] <Grinnz> oh neat
[18:27:56] <LeoNerd> And A:H's entire thing is all about making package-inheritable attributes, whereas any sensible implementation of attributes would be lexically scoped, not package inherited
[18:28:02] <LeoNerd> In summary: it all sucks
[18:28:37] *** Joins: semeion (~semeion@user/semeion)
[18:28:37] *** mnemonic is now known as Guest608
[18:29:13] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[18:31:19] <LeoNerd> phryk: In summary: Python's decorators expect to act like wrappers: code is passed in, expects to return (maybe diffrent?) code out. Whereas Perl's ones are observers. They *see* the function and its associated GV get passed through. This makes some things easier, and some other things harder. It's much analogous to the way that array passing differs between Perl and Python
[18:31:28] *** Quits: Guest608 (~semeion@user/semeion) (Ping timeout: 252 seconds)
[18:31:41] <phryk> GV?
[18:31:44] <Grinnz> but if you want functional programming like the syntax you mentioned, that's trivial with coderefs and you don't need attributes for that.
[18:32:04] <Grinnz> subs that take subs is easy, just not as pretty as attributes 
[18:32:14] <LeoNerd> Perl makes it easier to pass  func(@x, @y)  as one squashed up list whereas in Python you'd have to "add" them, a  func(x + y)  but then makes it more difficult to preserve the identity of two arrays, requirung  func(\@x, \@y)  as compared Python's  func(x, y)
[18:32:34] <Grinnz> GV = glob value, essentially the spot where the function is stored in the symbol table
[18:32:37] <LeoNerd> It's simply a matter of taking an arbitrary set of problems, and deciding which subset of them to make easier at the expense of others being more difficult
[18:32:42] <phryk> Yes, and I currently have things like *foo = somedecorator(sub(…){…}); and have been told that this is unreadable – and I concur. :P
[18:32:44] <Grinnz> well, the container
[18:33:11] <LeoNerd> neither solution is more "correct" than the other. They're equivalent and convertable, they just optimise some cases over others. Perhaps their original inventors simply judged some cases to be more likely than others
[18:33:17] <phryk> Also seems to fall on its face as soon as you nest mutliple decorators – haven't debugged that particular fire yet^^;
[18:33:31] <Grinnz> nesting them should work perfectly fine
[18:33:34] <LeoNerd> Often Perl attributes do a lot of other kinds of operations than simply code-wrapping... code-wrapping is kinda rare
[18:33:55] <phryk> So that's why I was looking into how extend perl syntax, so I can clean up the notation for that.
[18:33:59] <LeoNerd> So Perl's design is optimised to make obervation/alterating of code easier, at the expensive of making wrappers require a few more steps of hoop-jumping
[18:34:15] <LeoNerd> But you can totally implement wrappers as attributes
[18:34:32] <LeoNerd> I'd possibly argue the cleanest way is to define a "is a code wrapper attribute" attribute, as I showed above
[18:34:52] <LeoNerd> Then you could write all your wrapper attributes in the same sort of "takes a sub, returns a sub" style as the Python decorators
[18:35:17] <Grinnz> sweval: sub adjuster1 { my $orig = shift; sub { $orig->() * 2 } } sub adjuster2 { my ($orig, $value) = @_; sub { $orig->() + $value } } *foo = adjuster1 adjuster2 sub { 42 }, 5; foo()
[18:35:18] <perlbot> Grinnz: 94
[18:35:59] <LeoNerd> Oh, .. yah if you're doing multiple wrappers at once, doing them as functions probably makes it simpler to reason about ordering
[18:36:15] <LeoNerd> *foo = wrapper1(wrapper2(wrapper3(... sub {} )));  is "obvious" the nesting order.. they're regular function calls
[18:36:31] <LeoNerd> But given   sub foo :Wrapper1 :Wrapper2 :Wrapper3 { ... }   it isn't at all clear what order those apply in
[18:36:39] <LeoNerd> And offhand I myself don't know the answer. I'd have to look it up
[18:37:00] <Grinnz> i would guess in order of definition (so reverse the function call order) but i also don't know
[18:37:39] <LeoNerd> Yeah offhand I don't know what order the code runs in.. probably LtR.. maybe..?
[18:38:35] *** Joins: thrig (~thrig@65.113.153.50)
[18:41:54] *** Joins: gryphn (~gryphn@154.21.20.154)
[18:42:56] <phryk> Okay, so, basically the *foo = mydecorator(sub …); is stil the best way so I should just look into how to leverage something like Keyword::Simple to create syntax sugar to make this nicely readable – that about right?
[18:43:08] <LeoNerd> Ugh, I wouldn't use K:S
[18:43:44] <LeoNerd> My suggestions would be 1: what you've written, 2: a slight adjustment of that which sets the name, or 3: an attribute. As Isaid above abut 3 times now
[18:44:09] <LeoNerd> Suggestion 2 would be having it be somethinglike   decorated_func name => sub { ... };
[18:44:09] <phryk> but you said Attribute::Handler is horrible yourself.
[18:44:18] <LeoNerd> Yes. Attribute::Handlers is terrible
[18:44:21] <LeoNerd> attributes themselves are fine
[18:44:24] <LeoNerd> There are other ways to implement it ;)
[18:44:29] <Grinnz> phryk: depends a lot on what you consider "nicely readable" tbh, which could be anything :P
[18:44:54] <LeoNerd> Probably simplest is that option 2 there. You can set_subname on it then and ensure it has a name and isn't just set to __ANON__
[18:44:56] *** Joins: PapaChub (~PapaChub@vzw-54.parabon.com)
[18:44:59] <LeoNerd> which matters in things like stack traces
[18:45:04] <phryk> attributes would be something i consider nicely readable. I'm more worried about the implementation there.
[18:45:21] <LeoNerd> Yah, so you could do that with   sub foo :Wrapped { ... }
[18:45:28] <phryk> tho I'm not sure if attributes are parameterizable, which will become later on when i implement authorization (not authentication, which doesn't need parameters)
[18:45:36] <LeoNerd> Or   sub foo :Wrapped ($args, $go, @here) { .,. }  if using signatures
[18:45:40] <LeoNerd> Yes, they are. sortof
[18:45:49] <LeoNerd> sub foo :Wrapped(anyold string can go in here) { .. }
[18:45:50] <Grinnz> convince LeoNerd to write a better attributes registration wrapper for you and you can hide all the weirdness in that
[18:46:04] <phryk> :D
[18:46:05] <LeoNerd> but beware that's parsed as just a flat string, not a perl expression
[18:46:24] <Grinnz> yeah, attributes take params
[18:46:26] <phryk> cool with me, at least for now, as I'll only need to pass in permission names.
[18:46:32] <LeoNerd> So things like   my $one = 1;  sub foo :Wrapped(The value of $one here) { ... }   won't work as you expect. It literally sees the string  'The value of $one here'
[18:47:05] <LeoNerd> Sometime I'd love to make an  eval_at_caller()  to help attribute authors solve that one
[18:47:07] <LeoNerd> But ETIME
[18:47:09] <LeoNerd> ESOOOOOMUCHTIME
[18:47:22] <phryk> Now that's an issue i know^^
[18:47:34] <thrig> you might call it "uplevel"
[18:47:35] <mozambique> can someone tell me a bot to perl
[18:47:48] <ology> ?
[18:47:56] <Grinnz> please restate the question?
[18:47:58] <mozambique> because I want to put a bot in #astalavista 
[18:48:01] <LeoNerd> Ooh.. right maybe Uplevel has an eval()-wrapper
[18:48:11] <mozambique> I want to make a bot for a channel
[18:48:17] <mozambique> to teach about perl
[18:48:18] <Grinnz> perlbot: irc bot
[18:48:19] <perlbot> Grinnz: Don't parse IRC with regex! See Bot::BasicBot (and Bot::BotBasic::Pluggable), POE::Component::IRC, Net::Async::IRC, Mojo::IRC, or Parse::IRC. Avoid Net::IRC. | http://xkcd.com/1782/ | If you must use TCP directly, take a look at POE::Filter::IRC or Parse::IRC for parsing.
[18:48:21] <LeoNerd> Oh. no it doesn't
[18:48:30] <phryk> So, LeoNerd what do you recommendn for implementing custom attributes?
[18:48:33] *** Quits: Michelle (~michelle@203.206.128.220) (Quit: Leaving)
[18:48:35] <ology> Mojo::IRC++
[18:48:41] <LeoNerd> phryk: Actually writing the code
[18:48:56] <mozambique> ok
[18:49:01] <mozambique> I will try
[18:49:15] <phryk> LeoNerd: that doesn't tell me anything and the docs don't seem to mention the mechanism perl core has for that anywhere.
[18:49:31] <LeoNerd> sub MODIFY_CODE_ATTRIBUTES { bunch o stuff in here }
[18:49:45] <LeoNerd> But as I said: i'd suggest making a :SubWrapper attribute for defining yours
[18:50:02] <phryk> Aaah, that's part of core.
[18:50:31] <LeoNerd> core invokes MODIFY_CODE_ATTRIBUTES
[18:50:43] <LeoNerd> There's a bunch of careful steps you have to take to obey the expected protocol
[18:50:50] <LeoNerd> Attribute::Handlers is *one* possible implementation of that protocol
[18:50:53] <LeoNerd> Other modules can do it other ways
[18:51:28] * GumbyPAN CPAN Upload: OPM-Maker-1.10 by PERLSRVDE https://metacpan.org/release/PERLSRVDE/OPM-Maker-1.10
[18:54:05] *** Joins: Michelle (~michelle@203.206.128.220)
[18:56:07] *** Quits: mozambique (~waterproo@a95-93-140-250.cpe.netcabo.pt) (Ping timeout: 252 seconds)
[18:57:49] *** Joins: bit4bit (~bit4bit@181.49.102.14)
[19:00:32] <huf> hey! if you set $[ to a negative number, how does negative indexing work?
[19:01:08] <huf> eval5.16: use 5.006; @x = qw(cat dog); [grep defined $x[$_], -200..200]
[19:01:10] <perlbot> huf: [-2,-1,0,1]
[19:01:14] <huf> eval5.16: use 5.006; @x = qw(cat dog); $[ = -73; [grep defined $x[$_], -200..200]
[19:01:15] <perlbot> huf: [-73,-72]
[19:01:22] <huf> surely this is wrong
[19:01:50] <Grinnz> well, the feature doesn't exist anymore, so probably
[19:01:53] <thrig> maybe someone should deprecate $[ one of these days
[19:02:05] <huf> :(
[19:02:20] <huf> might as well just replace perl with python you know
[19:02:23] <thrig> perldoc -v '$[' | grep precat
[19:02:24] <perlbot> thrig: Your documentation is available at: https://perldoc.perl.org/variables/%27%24%5B%27
[19:02:28] <LeoNerd> eval: $[ = 0.5;
[19:02:29] <perlbot> LeoNerd: 0
[19:02:33] <LeoNerd> ... wat?
[19:02:41] <LeoNerd> eval: $[ = 1;
[19:02:43] <perlbot> LeoNerd: ERROR: Assigning non-zero to $[ is no longer possible at (IRC) line 1. 
[19:05:24] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[19:05:25] <huf> LeoNerd: perl is trying to teach us what solomon tried to teach those two women
[19:05:30] <huf> half a baby is no baby at all
[19:05:39] <LeoNerd> use more 'solomon';
[19:06:34] *** Parts: Fozzworth__ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net) (Leaving)
[19:07:44] <huf> heh, perlbot's perldoc -v plugin could use some work
[19:10:53] *** Quits: jdltouraine__ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Remote host closed the connection)
[19:11:10] *** Joins: jdltouraine__ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[19:13:47] *** Quits: Michelle (~michelle@203.206.128.220) (Quit: Leaving)
[19:16:02] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[19:17:19] *** Joins: Michelle (~michelle@203.206.128.220)
[19:18:26] <haj> What's the best way to define short names for constants you're using a *lot* in different modules?  Does exporting them from a module fall under the "Don't export variables" ban?
[19:19:08] <huf> constants are usually subs though
[19:19:32] <LeoNerd> I quote often define a "Some::Namespace::Constants" module that contains (and exports) just a lot of constants
[19:19:58] <haj> Yes, subs is what I'm doing right now, but .... it has really funny pitfalls.
[19:20:05] <LeoNerd> You can often do it by writing a little helper function in there that creates the actual const sub *and* adds the name to @EXPORT_OK at the same time
[19:20:24] <thrig> use constant { MAN_OF_CONSTANT_SORROW => 1 }; 
[19:20:25] <LeoNerd> (because I hatehatehate having to manually keep that @EXPORT_OK list in sync)
[19:20:54] <haj> The constants I'm talking about are the 3D unit vectors, so basically [1,0,0], [0,1,0], and [0,0,1]
[19:21:10] <LeoNerd> Ah, I J and K
[19:21:42] <haj> ....or I,J, and K, if you like :)
[19:22:08] <Grinnz> haj: there's really nothing wrong with exporting constant variables, as long as you make them readonly with something like ReadonlyX or Const::Fast
[19:22:31] *** Quits: proller (~p@5.255.232.213-red.dhcp.yndx.net) (Ping timeout: 252 seconds)
[19:22:40] <Grinnz> and also don't do it in @EXPORT
[19:23:00] <Grinnz> magic variables showing up without requesting them is not great
[19:23:01] <haj> Sure, I always @EXPORT_OK that stuff
[19:23:37] <haj> I tried constants (via subs) X, Y, and Z which had really funny pitfalls
[19:24:09] <Grinnz> if it's an arrayref then it's not really constant that way unfortunately
[19:24:18] <LeoNerd> Oh, well that too :)
[19:24:23] <Grinnz> you could make them list constants, but those are super weird
[19:24:36] <haj> Nah - they're objects, I can make them safe.
[19:24:56] <LeoNerd> X itself is constant, but  push X->@*, 0;  or   X->[0]++  are both permitted
[19:24:59] <haj> I want to do arithmetics
[19:25:21] <LeoNerd> You'll probably want to give them the various numeric op overloads
[19:25:29] <LeoNerd> ... isn't there alerady a standard module for this?
[19:25:41] <LeoNerd> I can't believe the whole of CPAN doesn't already have 3D vectors as a standard module
[19:25:53] <haj> LeoNerd: my current implementation uses a module called Object::Pad... so no chance fiddling with the data without going Meta
[19:26:17] <LeoNerd> Ohright. So your constants _aren't_ just those values then :)
[19:26:18] <haj> LeoNerd: There are dozens of modules on CPAN, some even seem to be still maintained
[19:27:09] <haj> Most of them do the overloading (which is really trivial)
[19:28:24] <haj> There's Math::Vector::Real and Math::VectorReal, for example.  Don't confuse these :)
[19:28:38] <thrig> Real::Vector::BelAire
[19:29:43] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[19:30:13] <haj> One of my observations is that a constant vector object Z doesn't play well with Syntax::Operator::Zip
[19:30:33] <Grinnz> well that's just LeoNerd's fault :P
[19:30:47] <LeoNerd> S:O:Zip wants a _list_ don't forget
[19:30:57] <LeoNerd> (1,2,3) Z (4,5,6)
[19:31:07] <LeoNerd> A single object is a single scalar. Not a list
[19:31:19] <Grinnz> that's not true though
[19:31:47] <Grinnz> but itym it won't unpack it into the list you want
[19:31:51] <haj> And also, while X-Y gives the correct vector (1,-1,0), Y-X is a syntax error
[19:32:06] <LeoNerd> .. Ohwait. Also, ... yes. Your constant Z vs. my infix operator Z will collide
[19:32:10] <Grinnz> the only way you could get it to unpack it is by either passing a list constant or dereffing it
[19:32:20] <LeoNerd> That's a fun one :)
[19:32:29] <LeoNerd> Find me a unicode Zip operator
[19:32:33] <Grinnz> sweval: sub X; sub Y; Y-X
[19:32:35] <perlbot> Grinnz: Use of uninitialized value $_ in -X at (IRC) line 1. ERROR: Undefined subroutine &main::Y called at (IRC) line 1. 
[19:32:38] <LeoNerd> Then you can import just that one and not Z
[19:32:40] <Grinnz> lmao
[19:32:50] <Grinnz> sweval: sub X; sub Y; Y - X
[19:32:52] <perlbot> Grinnz: ERROR: Undefined subroutine &main::X called at (IRC) line 1. 
[19:32:58] <LeoNerd> Grinnz: -X  is a filetest operator
[19:32:59] <Grinnz> haj: beware filetest operators with no spaces
[19:33:15] <LeoNerd> Oh. yes.  X-Y is X() - Y() but Y-X is Y( -X )
[19:33:19] <haj> Yeah, that was a really funny discovery.  -(X) works, - X works, -X() works
[19:33:38] <LeoNerd> Honestly those filetest operators are another ugly mess
[19:33:39] <haj> But I'm using that stuff in a REPL, so every key saved counts
[19:33:45] <Grinnz> though if it's a correctly declared constant sub, it shouldn't do that, because it doesn't accept args
[19:34:03] <Grinnz> sweval: no feature 'signatures'; sub X () {} sub Y () {} Y-X
[19:34:05] <perlbot> Grinnz: ERROR: syntax error at (IRC) line 1, near "Y-X" 
[19:34:12] <haj> -X is an unary opertor, not a function
[19:34:22] <Grinnz> real helpful error there
[19:34:51] <LeoNerd> I'm 99% convinced there's a bug somewhere in the parser which causes error messages to get lost, leaving just the generic "syntax error"
[19:34:57] <LeoNerd> Object::Pad manages to trigger it a lot
[19:35:09] <xenu> i'm surprised "my $foo = 5<newline>-5;" works as expected
[19:35:10] <haj> You need the empty prototype anyway, otherwise X+Y is interpreted as X(+Y)
[19:36:06] <thrig> I'm 100% convinced there's a bug somewhere in the parser
[19:36:08] <LeoNerd> If _I_ was going to implement 3D unit vector maths, I'd consider extending the way that numerical constants get parsed, allowing notation like  3i + 5j
[19:36:21] <LeoNerd> Just permit [ijk] as number suffixes
[19:36:29] <thrig> that sounds complex, though
[19:36:32] *** Joins: Pali (~pali@user/pali)
[19:36:46] <LeoNerd> Unsure if maths pun.. but I'll take it ;)
[19:36:49] *** Quits: gggpkm (~gggpkm@188.119.64.181) (Ping timeout: 252 seconds)
[19:37:13] <Grinnz> Paperbot: calc 3i + 5j
[19:37:14] <Paperbot> Grinnz: Error evaluating expression: Invalid function "j"
[19:37:27] <haj> Unfortunately, -k is also a file test, so you need to write -1k
[19:37:36] <Grinnz> or just - k
[19:37:40] <LeoNerd> Ugh :(
[19:37:43] <thrig> https://l.perl.bot/p/wlgppc
[19:37:44] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[19:37:45] * LeoNerd ponders  no filetests;
[19:37:54] <LeoNerd> Just to throw out that horrible bit of parser
[19:38:03] <huf> we could have normal looking file tests
[19:38:07] <LeoNerd> "Dear perl, this is maths code. I know I won't be doing any filetest operations here. I want the symbols back plz"
[19:38:09] <LeoNerd> huf: Yes
[19:38:12] <LeoNerd> DEARGODYES
[19:38:16] <LeoNerd> is_exec($path)
[19:39:03] <Grinnz> could add such methods to https://perldoc.perl.org/File::stat
[19:39:03] <Paperbot> Link title(s): [ File::stat - by-name interface to Perl's built-in stat() functions - Perldoc Browser ]
[19:39:21] <Grinnz> it already kind of does with ->cando but that's a shitty api
[19:39:39] *** Quits: tobybl_ (~tobybl@31.111.35.255) (Remote host closed the connection)
[19:42:00] *** Joins: tobybl (~tobybl@31.111.35.255)
[19:44:14] <haj> For a very short time I considered using 𝑿, 𝒀  and  𝒁... but then I remembered that I actually need to *type* that a lot
[19:44:29] <LeoNerd> Hehe yus
[19:44:36] <LeoNerd> Define a digraph in vim for it? ;)
[19:45:36] <thrig> APL called, they want their tofu back
[19:45:38] <Grinnz> xx, yy, zz
[19:45:56] <genio> food time
[19:46:18] *** Quits: tobybl (~tobybl@31.111.35.255) (Remote host closed the connection)
[19:46:20] <LeoNerd> > I tried remapping jk and kj to <Esc> but I turned it off when I was writing a novel about Dijkstra playing Blackjack in Reijkyavik
[19:46:33] * GumbyPAN CPAN Upload: Photonic-0.021 by WLMB https://metacpan.org/release/WLMB/Photonic-0.021
[19:46:33] * GumbyPAN CPAN Upload: Sys-Virt-v7.8.0 by DANBERR https://metacpan.org/release/DANBERR/Sys-Virt-v7.8.0
[19:46:43] <haj> Grinnz: Yes, that's probably what I'll go for.  Or XX YY ZZ, to make them "conventional" constants.
[19:47:00] <huf> stay in ascii, kids
[19:47:04] <LeoNerd> XX YY ZZ would be the "traditional" blackboard-bold sort of notations
[19:47:45] <Grinnz> go one step further and it's a 2002 vin diesel movie
[19:48:01] <thrig> "reverse this binary tree" "sure, do you have a screwdriver so I can remount this whiteboard?"
[19:48:58] *** ether_ is now known as ether
[19:49:23] <LeoNerd> Hrm. Though I suppose if these are unit-vectors, the proper Unicode notation for them ought to be X̂ Ŷ Ẑ
[19:49:55] *** Joins: proller (~p@2a00:1fa0:4af2:c2ef:6b10:871a:9d03:f41b)
[19:51:31] <haj> Depends whom you ask.  ISO 80000, as far as I recall, recommends bold italic
[19:51:49] <LeoNerd> But... unit vectors want hats
[19:52:03] <huf> no, that's people
[19:52:32] <Grinnz> yesssss the little hatsssss
[19:53:53] <LeoNerd> Grinnz, haj: I've just proposed `no feature 'filetests'` to p5p@
[19:54:18] <LeoNerd> Ugh, and because of that distraction I have now run out of Jacques Loussier before I've finished writing my actual PSC meeting notes.
[19:54:29] <haj> At school the notation was x⃗, but typical programming fonts don't combine the characters
[19:54:52] <thrig> mmm more tofu
[19:55:30] <haj> LeoNerd: Wow, thanks!  I guess this makes sense but don't recall whether they appear in neilb's quirks collection
[19:55:39] <LeoNerd> It did
[19:55:47] *** Quits: proller (~p@2a00:1fa0:4af2:c2ef:6b10:871a:9d03:f41b) (Ping timeout: 240 seconds)
[19:55:50] <LeoNerd> (We've spent maaaaaannny weeeeeeeeks staring at that doc in PSC)
[19:58:04] <haj> I also spent some time with that list because as the de-facto maintainer of Emacs' cperl-mode I wanted to check what things I don't need to support
[19:58:33] <LeoNerd> Ohgod just give up an use a langserv arleady
[19:58:41] <LeoNerd> ... though first we need a langserv that doesn't suck
[19:59:03] <LeoNerd> Perl is *farrrrr* too complex a language to let authors of editors/IDEs/synhi tools/etc... loose on thinking they can parse it
[19:59:10] <haj> Exactly, that's the point
[20:00:48] <haj> Ilya Z. (and others) spent a lot of time to teach cperl-mode many of its quirks, any other solution I know of is behind that in accuracy
[20:01:32] *** Joins: magla (~gelignite@55d4bce1.access.ecotel.net)
[20:01:35] <haj> I wouldn't have *started* to cperl-mode but I think it is good enough to *maintain* it
[20:01:44] <LeoNerd> The problem with it is that it will *always* be out of date
[20:02:14] <LeoNerd> I can guarantee you that the existing parser files inside your editor (or mine) won't understand the new bits of perl syntax I'm just definining in whatever my new Syntax::Operator::* module will be tomorrow
[20:02:22] <LeoNerd> Whereas if you ask perl, it can know
[20:02:29] <thrig> or segfault
[20:02:29] <LeoNerd> And be sure it has the right answer
[20:03:28] <haj> Well, actually I've already written a minor mode for Object::Pad.  But you keep renaming stuff faster than I can follow :)
[20:04:00] <LeoNerd> Which again is why it'd be far better if your editor just asked Object::Pad about it. That way it wouldn't ever get out of sync
[20:05:06] <thrig> not sure what vi would be asking anything about
[20:05:10] <haj> Is that possible?  Ask Object::Pad about its keywords?
[20:05:47] <LeoNerd> Not yet. But the reason I wrote XS::Parse::Keyword and the *way* I wrote it, and then rewrote *all* of my Syntax:: modules into using it, permits that kind of static question
[20:05:57] <LeoNerd> The entire syntax is specified in a *static* data structure
[20:06:15] <LeoNerd> So a suitable perl langserv could load that and statically enquire about it, without actually running any real perl code
[20:06:33] <LeoNerd> Not all of the necessary pieces exist yet, but that part does
[20:10:51] <haj> Well, I'll better stay tuned then
[20:12:03] <LeoNerd> Eh...
[20:12:18] <LeoNerd> Again see ETIME - I'm happy to point people in the direction fo stuff they can do to help :P
[20:12:28] <LeoNerd> Waiting on me to write /everything/ is going to be a slow disappointment
[20:14:50] *** Quits: rindolf (~shlomif@87.68.240.138.adsl.012.net.il) (Ping timeout: 252 seconds)
[20:20:29] *** Joins: slu (uid501941@id-501941.helmsley.irccloud.com)
[20:22:15] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[20:22:49] *** Joins: ugjka (~ugjka@ugjka.net)
[20:23:00] *** Quits: smitop (~smitop@user/smitop) (Remote host closed the connection)
[20:27:05] *** Joins: proller (~p@2a02:6b8:0:40c:d285:de7d:d85f:e71f)
[20:31:00] *** Joins: mattil (~mattil@87-92-83-230.bb.dnainternet.fi)
[20:33:21] *** Joins: YaoNai (~YaoNai@user/yaonai)
[20:34:01] <phryk> Why is "my ($foo, $bar, @bleh, @fnord) = @_" valid, but "sub oink($foo, $bar, @bleh, @fnord)" not? shouldn't both be equivalent?
[20:34:15] <LeoNerd> The former is "technically valid" but not useful
[20:34:29] <LeoNerd> @bleh will always slurp the entire rest of the list and @fnord will never see anything
[20:34:31] <thrig> pining for the empty @fnords
[20:34:56] <LeoNerd> So as a signature, that's just not supported. There can only be atmost one slurpy (i.e. not scalar) element to the signature; if present it must be the final one
[20:35:15] <phryk> Ah, so that just initialized fnord as empty list and was because somebody was too lazy to type out two "my" statements?
[20:35:27] <LeoNerd> That's just how list assignment works, yes
[20:35:29] *** Quits: mattil (~mattil@87-92-83-230.bb.dnainternet.fi) (Ping timeout: 264 seconds)
[20:35:33] <phryk> Okay, thanks. :)
[20:35:48] <LeoNerd> scalars eat a single thing, a nonscalar will eat everything remaining and thereafter nobody else gets anything
[20:36:20] <phryk> Yeah, was just assuming that the former would fail too in that case.
[20:36:39] <LeoNerd> Historically not.. :/
[20:36:52] <LeoNerd> "legacy perl" was very lax in allowing that kind of thing
[20:37:09] <thrig> also in random extra args to printf
[20:37:24] <LeoNerd> Heh.. it's just mimicking C there ;)
[20:37:40] <LeoNerd> printf("Value is %d", 1, 2, 3);   # just as valid in C ;)
[20:37:41] <alh> That at least warns now
[20:38:16] <thrig> depending on compiler flags, etc
[20:40:46] *** Joins: ozzzo_work (~ozzzo_wor@h87.s239.verisign.com)
[20:40:53] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 246 seconds)
[20:42:47] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[20:43:03] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[20:43:49] <LeoNerd> Grinnz: no quirk 'filetests';  ?
[20:44:36] <Grinnz> imo it can just be a standalone pragma
[20:44:50] <LeoNerd> Eh.. that way lies indirect
[20:45:05] <Grinnz> yes but this is worth doing that for, we'll never modify it in a feature bundle or anything
[20:47:04] *** Joins: jpmh_ (uid510532@id-510532.helmsley.irccloud.com)
[20:49:05] <jpmh_> I have a script that includes a $SIG{ALRM} = 'timedOut' and alarm(180);  For reasons that make no sense to me, when the alarm happens I get the fatal 'Alarm Clock' error.  Any degenerate script I make works perfectly.  The one unusual feature of the script is that it is using IO::Sockect::INET - any ideas?  It is almost as though the $SIG{ALRM} is being ignored
[20:49:44] <Grinnz> IO::Socket::IP is better than IO::Socket::INET
[20:50:16] <Grinnz> Time::Out is a useful alarm abstraction if you can use that, i don't use alarm directly so dunno otherwise
[20:50:25] <thrig> is there a sub timedOut { ... } somewhere?
[20:53:08] <jpmh_> thrig: YES 
[20:53:32] *** Joins: pj (~pj@ghettoforge/pj)
[20:53:53] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[20:54:10] <thrig> is something else meanwhile fiddling with $SIG{ALRM} ?
[20:56:11] *** Quits: jdltouraine__ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Remote host closed the connection)
[20:56:17] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[20:57:12] <jpmh_> thrig: not anything in my code - this is why I asked about the IO::Socket::INET - my source code has ONLY one $SIG line at all
[20:57:43] <LeoNerd> Why set it by name, by the way? Why not  = \&timedOut;  ?
[20:57:45] <jpmh_> However, I would point out that when I open the sockets I DO have a Timeout => 51
[20:57:46] <Grinnz> i would be very surprised if that module affected it
[20:57:53] <Grinnz> ah, that might be it
[20:58:18] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[20:58:34] <jpmh_> LeoNerd: good pont - just always did it as $SIG{ALRM} = 'name';  I guess I really don't like the & - it is used s rarely now
[20:58:36] <Grinnz> looks like it uses IO::Select to implement timeouts
[20:58:47] <Grinnz> jpmh_: it's perfectly normal to use \&, not &
[20:58:55] <Grinnz> that's just how you get a ref to the sub
[20:59:09] *** Quits: TieUpYourCamel (~david@2600:1702:26a0:2000:9519:9588:4da5:46ca) (Quit: Leaving)
[20:59:13] <Grinnz> bare & is unrelated and the only time you should use that is in defined() or exists()
[20:59:16] <jpmh_> Grinnz: I know on the & \& - it is just I am in the habbit of using the ='name'
[20:59:24] <LeoNerd> One minor upside to putting a string in there though, is that now you can just debug-print the value of $SIG{ALRM} lots of times, and see if observe it changing
[20:59:25] <Grinnz> or goto for tailcalls
[21:00:02] <jpmh_> so, on the actual issue here - do you guys think that the timeout in the socket is messing with the $SIG{ALRM} setting?
[21:00:32] <LeoNerd> Could well be
[21:00:43] <LeoNerd> Go see if it touches $SIG{ALRM} - either reading the code or just printing it lots
[21:00:52] <jpmh_> and indeed LeoNerd  I did print the value and it does not seem to be changing.  
[21:01:14] <Grinnz> could it be happening in C?
[21:01:24] <thrig> strace time!
[21:01:33] <jpmh_> Grinnz: I guess that is what I am asking you guys
[21:01:36] <LeoNerd> The interaction between alarm and sleep(3) is undefined
[21:01:41] <Grinnz> signals are simultaneously the best and the worst
[21:02:08] <LeoNerd> SIGALRM is not really one I'd suggest being super-stable or reliable
[21:02:14] <Grinnz> i would solve this by rewriting my program in IO::Async::Stream :P
[21:02:37] <LeoNerd> Any sort of rewrite woudl be useful yes
[21:02:43] <ilmari> LeoNerd: not undefined, merely unspecified
[21:03:21] <LeoNerd> If you already have some existing synchronous logic it'd be easier to rewrite that in terms of `await` calls on the corresponding Future::IO ops of same name, and then just do the "trivial" ->wait_any wrapper of that func + a timeout future
[21:03:30] <LeoNerd> It's generally the least amount of rewrite that way
[21:03:54] <ilmari> «If a SIGALRM signal is generated for the calling process during execution of sleep(), except as a result of a prior call to alarm(), and if the SIGALRM signal is not being ignored or blocked from delivery, it is unspecified whether that signal has any effect other than causing sleep() to return.» - sleep(3posix)
[21:04:26] <Grinnz> https://metacpan.org/pod/Future::IO#alarm - "Returns a Future that will become at a fixed point in the future"
[21:04:27] <Paperbot> Link title(s): [ Future::IO - Future-returning IO methods - metacpan.org ]
[21:04:32] <Grinnz> i think you a word
[21:05:12] <LeoNerd> IT BECOMES
[21:05:14] <thrig> Hilander: The Becomening
[21:05:29] <LeoNerd> Huh,.. yeah I thought I fixed that once
[21:05:30] <Grinnz> also it's weird that takes an epoch timestamp when alarm() takes a duration normally?
[21:05:45] <LeoNerd> Oh, I did not
[21:05:58] <ilmari> T̸̤̩̻̀ḧ̴͍͓͙́e̴̩͊͆ ̴͓̞̙̂̓̏͒F̵̼̋͋̍̅ù̵͕̠̇ṭ̵̊͒͝ͅṳ̴̡̐̽r̵͍͑͌̂́è̴̬̘̝̮̈́̉ ̵̧̞̳̳͋̌̓̂W̸̗̊̌̿i̷̡̳͈͈͗͂͒͝l̷̗̟̗͋̈̚͝ͅļ̸̃ ̷̣͛̇B̶̙͍̫̈́̄̑͌͜ẽ̵͈̱̔̃͝ć̵̡̳̍̏o̷̡̢̪̦͝m̷̙̽͘̕è̶̱̹̽̑
[21:06:21] <LeoNerd> Ahhh... Yes, that one
[21:06:45] <LeoNerd> I perhaps should name it  ->alarm_at
[21:06:56] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[21:07:31] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[21:07:57] <LeoNerd> I think I sortof copied it from a few event system ones where the argument is an absolute timestamp
[21:12:43] <jpmh_> well guys, I hate to rewrite that section, but sounds like I need to - thanks for the help
[21:13:39] *** Joins: jplesnik (~jplesnik@83.240.62.176)
[21:13:45] *** Quits: jplesnik (~jplesnik@83.240.62.176) (Remote host closed the connection)
[21:20:13] *** Joins: semeion (~semeion@user/semeion)
[21:25:21] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[21:26:44] <jpmh_> OK - so, indeed it is the Timeout in the IO::Socket::INET  - I guess it is undefined as to what it will do.  And I guess this is what it is doing.  I was not expecting it and had NOT set $SIG{ALRM} before that.  So, 100% my fault.  Thanks for the hekp
[21:28:39] <thrig> code sometimes can be quite alarming
[21:28:42] <jpmh_> what is interesting is that the alarm is NOT generaed the first few times.  The first few times it just does not create the socket.  But then...
[21:28:54] <jpmh_> thrig: very PUNNY
[21:29:15] <thrig> usually you want an async module and then not worry about what the heck the socket is doing at the sausage layer
[21:30:14] *** Joins: przemoc (~przemoc@user/przemoc)
[21:30:57] *** Quits: gryphn (~gryphn@154.21.20.154) (Quit: kthxbye)
[21:35:36] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[21:37:26] *** Quits: jess (~jess@libera/staff/jess) (Quit: Lost terminal)
[21:40:09] <ilmari> "the sausage layer", I like that
[21:40:34] <thrig> well the internet is made of tubes
[21:41:20] <huf> sausage is a portuguese word with no english equivalent, did you know that?
[21:42:17] <ilmari> nah, it's english now. they stole it fair and square.
[21:42:36] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[21:42:45] <thrig> english picking the pockets of other languages being a thing
[21:43:24] <ilmari> not just picking the pockets, but dragging them into a dark alley, knocking them unconscious and rifling throug their pockets
[21:43:59] <thrig> tis why the sun never set on the British Empire
[21:45:35] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[21:45:49] *** Joins: EGD (~egd@user/egd)
[21:46:19] *** Joins: R2robot (~R2robot@user/r2robot)
[21:48:26] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[21:48:45] *** Joins: semeion (~semeion@user/semeion)
[21:49:47] <ilmari> I almost said "we stole it", but I'm not english, I've only lived here for 15 years
[21:50:06] <ilmari> I will probably become a british citizen sometime in the near future, but definitely not english
[21:50:40] <ilmari> I'm a finnish-norwegian(-soon-technically-british) londoner
[21:51:23] <thrig> Romans exhibited similar leanings
[21:52:49] <ilmari> having citizenship would make many things easier, but the powers that be aren't exactly making me excited about the prospect
[21:52:49] *** Joins: jess (~jess@libera/staff/jess)
[22:00:42] <huf> romans never had any kind of finnish or norwegian leanings
[22:01:06] <thrig> s/finnish/sulmo/ s/norwegian/arctic grey/
[22:01:09] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[22:01:35] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 252 seconds)
[22:01:48] * GumbyPAN CPAN Upload: Valiant-0.001009 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/Valiant-0.001009
[22:02:15] <thrig> https://acoup.blog/2021/07/16/collections-the-queens-latin-or-who-were-the-romans-part-iii-bigotry-and-diversity-at-rome/ or such for the banal details
[22:02:16] <Paperbot> Link title(s): [ Collections: The Queen’s Latin or Who Were the Romans? Part III: Bigotry and Diversity at Rome – ... ]
[22:06:56] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:07:42] *** Quits: X-Scale (~ARM@46.50.4.85) (Ping timeout: 265 seconds)
[22:08:20] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[22:09:12] *** X-Scale` is now known as X-Scale
[22:09:57] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[22:13:50] *** Joins: pj (~pj@ghettoforge/pj)
[22:32:18] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[22:33:28] *** Quits: rbraun (roEQ9ZcC@WHELK.CLUB.CC.CMU.EDU) (Changing host)
[22:33:28] *** Joins: rbraun (roEQ9ZcC@user/rbraun)
[22:33:34] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:36:05] *** Quits: proller (~p@2a02:6b8:0:40c:d285:de7d:d85f:e71f) (Ping timeout: 264 seconds)
[22:43:41] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca)
[22:48:01] *** Quits: pts33 (~pts33@2603-8000-9103-a43f-ec88-df24-b392-23c7.res6.spectrum.com) (Ping timeout: 245 seconds)
[22:50:11] *** Quits: slu (uid501941@id-501941.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:50:12] *** TitanOfOld is now known as TitanOfOld|work
[22:52:33] *** Quits: zgu|skar0 (~zgu@2603-7080-b704-0800-16be-797d-71a4-f478.res6.spectrum.com) (Remote host closed the connection)
[22:52:47] *** Joins: zgu|skar0 (~zgu@2603-7080-b704-0800-832f-b7d5-7b90-f547.res6.spectrum.com)
[22:54:57] *** Joins: demostanis[m] (~demostani@2001:470:69fc:105::2c2)
[22:56:52] <demostanis[m]> Is there a way to match a named capture multiple times? Such that `print @+{p} if 'abc' =~ /(?<p>{\w})/g` prints abc?
[22:59:12] <demostanis[m]> Meant `print $+{p} if 'abc' =~ /(?<p>\w)+/g`
[23:04:00] <fizzie> Moving the + indoors isn't an option? Because the problem there would be that the thing inside the capture group (a single \w) is definitely not going to be more than one character.
[23:08:48] <demostanis[m]> My real case is a bit different. 
[23:08:48] <demostanis[m]> I need to match words separated by colons.
[23:08:48] <demostanis[m]> I use `((?<p>\w+)(,))+`
[23:08:48] <demostanis[m]> But it doesn't work.
[23:12:53] <xq> have you considered a much simpler solution based on split /,/ ?
[23:13:49] <demostanis[m]> Is there really no way of doing it like I want?
[23:15:29] <huf> //g in scalar context
[23:16:56] <xq> you want to use %+ as an accumulator of sorts, I can't think of a nice way to do it. In my view, if you have words separated by colons, then split is the best solution
[23:18:25] <fizzie> If you're really dedicated, I'm sure you could stick in a (?{..}) block somehow to concatenate the individual words.
[23:19:08] <xq> also, this better not be a CSV parser
[23:19:22] <huf> :D
[23:23:03] <zgu> no, probably an XML parser
[23:28:00] <demostanis[m]> No, something else parser
[23:28:01] <demostanis[m]> I'll try split
[23:31:44] <zgu> i just had to do a regex substitution in python ad didn't realize how unbearably clunky it was until now
[23:32:10] <demostanis[m]> Doesn't perl have Raku-like % in regexes?
[23:32:35] <zgu> or more accurately i had to do something that my perl-based brain assumed would take about 10 characters as a regex
[23:35:31] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 245 seconds)
[23:38:44] *** Quits: PapaChub (~PapaChub@vzw-54.parabon.com) (Quit: Leaving)
[23:49:51] *** pragma- is now known as garpbusters
[23:50:32] *** garpbusters is now known as pragmareonelmstr
[23:50:40] *** pragmareonelmstr is now known as pragmareonelmst
[23:53:46] <zgu> oh, it is actually significantly less bad than the lack of actual examples in this o'reilly pocket reference led me to assume
[23:55:02] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[23:56:34] *** Joins: diskin (~diskin@87.117.52.37)
