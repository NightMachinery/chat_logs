[00:01:26] *** Joins: nkatte (~nkatte@2804:214:859f:4496:dbf3:a788:99a3:915a)
[00:01:38] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[00:03:25] *** Joins: xsperry (~as@user/xsperry)
[00:07:16] *** Quits: mrcom (~msouth@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: Konversation terminated!)
[00:08:56] *** Joins: anticrisis (~anticrisi@user/anticrisis)
[00:11:21] *** Joins: lad (~lad@user/lad)
[00:14:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:17:33] *** Joins: cladur (~cladur@user-5-173-148-81.play-internet.pl)
[00:19:16] *** Joins: [deleted] (~livoreno@user/notzmv)
[00:21:32] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[00:22:01] *** Quits: cladur (~cladur@user-5-173-148-81.play-internet.pl) (Ping timeout: 248 seconds)
[00:22:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:23:54] *** Joins: cog (~Atlas@2604:3d08:b27f:ae00:912f:6c43:4e9d:1b80)
[00:31:00] *** Quits: nkatte (~nkatte@2804:214:859f:4496:dbf3:a788:99a3:915a) (Ping timeout: 268 seconds)
[00:35:05] *** Joins: nkatte (~nkatte@177.51.69.154)
[00:35:06] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[00:35:15] *** Joins: amb007 (~a_bakic@79.101.103.130)
[00:37:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:41:59] *** Quits: nkatte (~nkatte@177.51.69.154) (Ping timeout: 258 seconds)
[00:46:01] *** Quits: amb007 (~a_bakic@79.101.103.130) (Ping timeout: 248 seconds)
[00:46:28] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[00:52:11] *** Joins: nkatte (~nkatte@2804:214:859e:1e05:f23c:d2b0:4466:3ac8)
[00:55:25] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[00:57:43] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[00:59:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:02:12] *** Joins: skykanin (~skykanin@115.81-166-221.customer.lyse.net)
[01:04:04] *** Quits: skykanin (~skykanin@115.81-166-221.customer.lyse.net) (Client Quit)
[01:04:14] *** Joins: skykanin (~skykanin@115.81-166-221.customer.lyse.net)
[01:06:38] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:09:04] *** Joins: kingjulian (~kingjulia@41.1.139.138)
[01:11:05] *** Joins: Guest56 (~Guest56@202.50.0.100)
[01:16:57] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[01:18:54] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[01:20:54] *** Joins: lisp123_ (~lisp123@45.130.83.200)
[01:20:57] *** Quits: nkatte (~nkatte@2804:214:859e:1e05:f23c:d2b0:4466:3ac8) (Ping timeout: 268 seconds)
[01:24:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[01:24:57] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[01:25:16] *** Joins: livoreno (~livoreno@user/notzmv)
[01:28:51] *** Joins: lisp123__ (~lisp123@45.130.83.200)
[01:29:51] *** Joins: nirnam (~nirnam@1.46.28.192)
[01:31:03] *** Quits: lisp123_ (~lisp123@45.130.83.200) (Read error: Connection reset by peer)
[01:44:23] *** Joins: pillton (~user@2405:b000:600:b0::36a)
[01:45:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:53:17] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 258 seconds)
[01:53:18] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:56:26] *** Joins: nkatte (~nkatte@2804:214:859c:4e99:cd48:1383:66ec:84e6)
[01:56:40] *** Quits: lisp123__ (~lisp123@45.130.83.200) (Remote host closed the connection)
[01:57:20] *** Joins: lisp123 (~lisp123@45.130.83.200)
[01:58:26] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:00:38] *** Quits: nkatte (~nkatte@2804:214:859c:4e99:cd48:1383:66ec:84e6) (Ping timeout: 252 seconds)
[02:01:55] *** Quits: lisp123 (~lisp123@45.130.83.200) (Read error: Connection reset by peer)
[02:18:08] *** Quits: Guest5143 (~Guest51@72.92.132.99) (Quit: Client closed)
[02:19:13] *** Quits: nirnam (~nirnam@1.46.28.192) (Remote host closed the connection)
[02:20:00] *** Joins: [deleted] (~livoreno@user/notzmv)
[02:20:27] <wasamasa> moon-child: CHICKEN isn't terribly invested in R7RS, but recently someone tried porting as many of the easy SRFIs as possible to make it look better in comparison of supported SRFIs
[02:20:49] <wasamasa> moon-child: that someone eventually stopped doing that and now other people are picking up those ports
[02:22:33] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 248 seconds)
[02:26:17] *** Quits: lad (~lad@user/lad) (Ping timeout: 248 seconds)
[02:30:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:32:59] *** Joins: lisp123 (~lisp123@45.130.83.200)
[02:33:25] *** Joins: nirnam (~nirnam@1.46.28.192)
[02:33:56] *** Quits: thomasb06 (~thomasb06@eth-west-pareq2-46-193-0-224.wb.wifirst.net) (Quit: good night)
[02:35:08] *** Joins: nkatte (~nkatte@2804:214:8599:8bee:1b96:1d20:1ac8:74e5)
[02:37:07] *** Quits: Guest56 (~Guest56@202.50.0.100) (Quit: Client closed)
[02:38:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:39:17] *** Quits: kingjulian (~kingjulia@41.1.139.138) (Ping timeout: 258 seconds)
[02:39:40] *** Quits: nkatte (~nkatte@2804:214:8599:8bee:1b96:1d20:1ac8:74e5) (Ping timeout: 258 seconds)
[02:39:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:42:03] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Remote host closed the connection)
[02:42:04] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[02:42:21] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 258 seconds)
[02:42:24] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 276 seconds)
[02:43:12] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[02:43:44] *** Joins: nkatte (~nkatte@2804:214:859e:3271:eba5:aab8:e8c2:3af8)
[02:43:44] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[02:47:40] *** Joins: karlosz (~karlosz@router.cloyne.org)
[02:48:52] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8186:40cc:d89:9651)
[02:50:17] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 248 seconds)
[03:01:22] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8186:40cc:d89:9651) (Ping timeout: 272 seconds)
[03:01:23] *** Joins: raeda (~raeda@72.49.219.33)
[03:05:09] *** Joins: Guest56 (~Guest56@202.50.0.100)
[03:11:24] *** Quits: frgo (~frgo@p200300deef181d0098d569c215f9f88e.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:11:34] *** Joins: frgo (~frgo@p200300deef181d00e13f7bdeb1305ddd.dip0.t-ipconnect.de)
[03:13:47] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:14:40] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 272 seconds)
[03:15:14] *** Quits: cog (~Atlas@2604:3d08:b27f:ae00:912f:6c43:4e9d:1b80) (Remote host closed the connection)
[03:16:34] *** Quits: nkatte (~nkatte@2804:214:859e:3271:eba5:aab8:e8c2:3af8) (Ping timeout: 272 seconds)
[03:17:29] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 248 seconds)
[03:18:17] *** Joins: debsan (~debsan@2800:810:471:8425::1000)
[03:18:35] *** Joins: nkatte (~nkatte@2804:214:8599:43d1:b3fb:d6e3:84f:67c4)
[03:20:05] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[03:21:38] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:23:06] *** Joins: lisp123 (~lisp123@45.130.83.200)
[03:23:08] *** Quits: nkatte (~nkatte@2804:214:8599:43d1:b3fb:d6e3:84f:67c4) (Ping timeout: 252 seconds)
[03:27:46] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 268 seconds)
[03:33:28] *** Quits: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[03:39:37] *** Joins: Matthias1 (~Matthias1@2603-8001-b545-4900-9150-e432-def8-8add.res6.spectrum.com)
[03:43:45] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[03:45:46] *** Joins: khrbt_ (~khrbt@user/khrbt)
[03:46:29] *** Quits: khrbt (~khrbt@c-73-189-184-151.hsd1.ca.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[03:46:44] *** khrbt_ is now known as khrbt
[03:50:00] *** Joins: cladur (~cladur@user-5-173-146-83.play-internet.pl)
[03:51:10] *** Joins: tyson2 (~user@toroon12-3096782363.sdsl.bell.ca)
[03:52:25] *** khrbt is now known as khrbt_
[03:55:35] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[03:56:38] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[03:58:13] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:59:13] *** Quits: cladur (~cladur@user-5-173-146-83.play-internet.pl) (Ping timeout: 268 seconds)
[04:00:49] *** Joins: fizbin (~dtm@2601:82:c380:87a:d8e5:78df:ef65:49a7)
[04:02:02] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:02:10] *** Quits: anticrisis (~anticrisi@user/anticrisis) (Read error: Connection reset by peer)
[04:03:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:04:04] *** Joins: anticrisis (~anticrisi@user/anticrisis)
[04:06:41] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[04:07:45] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[04:08:59] *** d4 is now known as wxallowed
[04:11:32] *** Quits: PinealGl1ndOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[04:17:45] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[04:21:04] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[04:21:57] *** Quits: tyson2 (~user@toroon12-3096782363.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[04:22:01] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 248 seconds)
[04:22:02] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[04:22:23] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[04:22:40] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 268 seconds)
[04:32:41] *** Quits: random-nick (~random-ni@87.116.182.190) (Ping timeout: 248 seconds)
[04:34:40] *** Quits: khrbt_ (~khrbt@user/khrbt) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:35:50] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:36:30] *** Joins: makomo (~makomo@user/makomo)
[04:37:39] *** Joins: khrbt (~khrbt@user/khrbt)
[04:38:55] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[04:39:18] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[04:47:20] *** Quits: nirnam (~nirnam@1.46.28.192) (Ping timeout: 268 seconds)
[04:48:51] *** Quits: skykanin (~skykanin@115.81-166-221.customer.lyse.net) (Quit: WeeChat 3.2)
[04:51:35] *** Joins: nkatte (~nkatte@2804:14d:4cd1:84f5:38c8:72a:af61:be28)
[04:53:49] *** Joins: derelict (~derelict@user/derelict)
[04:54:01] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:56:10] *** Joins: khrbt (~khrbt@user/khrbt)
[04:59:28] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[04:59:35] *** Quits: fizbin (~dtm@2601:82:c380:87a:d8e5:78df:ef65:49a7) (Ping timeout: 258 seconds)
[05:02:08] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 268 seconds)
[05:08:25] *** Joins: Matthias_ (~Matthias1@2603-8001-b545-4900-6964-f050-e27a-a1cb.res6.spectrum.com)
[05:08:43] *** Quits: Matthias_ (~Matthias1@2603-8001-b545-4900-6964-f050-e27a-a1cb.res6.spectrum.com) (Remote host closed the connection)
[05:08:54] *** Joins: Matthias_ (~Matthias1@2603-8001-b545-4900-6964-f050-e27a-a1cb.res6.spectrum.com)
[05:09:17] *** Quits: nkatte (~nkatte@2804:14d:4cd1:84f5:38c8:72a:af61:be28) (Ping timeout: 252 seconds)
[05:10:39] *** Quits: Matthias_ (~Matthias1@2603-8001-b545-4900-6964-f050-e27a-a1cb.res6.spectrum.com) (Remote host closed the connection)
[05:11:01] *** Joins: Matthias_ (~Matthias1@2603-8001-b545-4900-6964-f050-e27a-a1cb.res6.spectrum.com)
[05:11:05] *** Quits: Matthias1 (~Matthias1@2603-8001-b545-4900-9150-e432-def8-8add.res6.spectrum.com) (Ping timeout: 258 seconds)
[05:11:45] *** Quits: AdmiralBumbleBee (~AdmiralBu@68.183.125.7) (Read error: Connection reset by peer)
[05:15:04] *** Quits: Guest56 (~Guest56@202.50.0.100) (Ping timeout: 246 seconds)
[05:16:48] *** Joins: karlosz (~karlosz@router.cloyne.org)
[05:24:48] *** Joins: fizbin (~dtm@2601:82:c380:87a:d8e5:78df:ef65:49a7)
[05:26:24] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 272 seconds)
[05:29:38] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 252 seconds)
[05:29:54] *** Joins: dsk (~dsk@user/dsk)
[05:32:11] *** Quits: archenoth (~archenoth@S0106889e6827f474.cg.shawcable.net) (Read error: Connection reset by peer)
[05:34:50] *** Quits: Matthias_ (~Matthias1@2603-8001-b545-4900-6964-f050-e27a-a1cb.res6.spectrum.com) (Remote host closed the connection)
[05:35:45] *** Joins: Matthias1 (~Matthias1@2603-8001-b545-4900-6964-f050-e27a-a1cb.res6.spectrum.com)
[05:36:22] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[05:39:08] *** Joins: Matthias_ (~Matthias1@2603-8001-b545-4900-090b-633c-a15a-3f3b.res6.spectrum.com)
[05:40:20] *** Quits: Matthias1 (~Matthias1@2603-8001-b545-4900-6964-f050-e27a-a1cb.res6.spectrum.com) (Ping timeout: 272 seconds)
[05:45:19] *** Quits: xsperry (~as@user/xsperry) ()
[05:49:02] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[05:51:54] *** Quits: Matthias_ (~Matthias1@2603-8001-b545-4900-090b-633c-a15a-3f3b.res6.spectrum.com) (Remote host closed the connection)
[05:52:48] *** Joins: Matthias1 (~Matthias1@2603-8001-b545-4900-090b-633c-a15a-3f3b.res6.spectrum.com)
[05:54:11] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[05:56:35] *** Joins: nkatte (~nkatte@2804:14c:7980:8c85:e471:9dbd:12ad:a018)
[05:57:28] *** Quits: Matthias1 (~Matthias1@2603-8001-b545-4900-090b-633c-a15a-3f3b.res6.spectrum.com) (Ping timeout: 258 seconds)
[05:59:56] *** Joins: wxie (~Thunderbi@222.64.216.101)
[06:03:00] *** Joins: starblue3 (~juergen@dslb-094-221-177-254.094.221.pools.vodafone-ip.de)
[06:06:18] *** Quits: starblue2 (~juergen@dslb-094-221-178-013.094.221.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[06:13:17] *** Joins: cladur (~cladur@user-5-173-146-9.play-internet.pl)
[06:13:25] *** Joins: Guest9936 (~Guest99@205.178.98.123)
[06:13:40] *** Quits: Guest9936 (~Guest99@205.178.98.123) (Client Quit)
[06:26:57] *** Joins: khrbt_ (~khrbt@2601:646:8600:2f6:3fa:485d:475e:2130)
[06:28:46] *** Quits: khrbt_ (~khrbt@2601:646:8600:2f6:3fa:485d:475e:2130) (Changing host)
[06:28:46] *** Joins: khrbt_ (~khrbt@user/khrbt)
[06:31:44] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: Textual IRC Client: www.textualapp.com)
[06:35:29] *** Joins: Matthias1 (~Matthias1@2603-8001-b545-4900-aca4-b81a-fb11-e9da.res6.spectrum.com)
[06:35:51] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 268 seconds)
[06:36:09] *** Quits: Matthias1 (~Matthias1@2603-8001-b545-4900-aca4-b81a-fb11-e9da.res6.spectrum.com) (Remote host closed the connection)
[06:40:10] *** Quits: khrbt_ (~khrbt@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[06:48:01] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[06:49:33] *** Quits: sp41 (~spal@64.253.214.14) (Remote host closed the connection)
[07:02:26] *** Joins: prxq_ (~quassel@x4db46964.dyn.telefonica.de)
[07:04:33] *** Quits: taiju (~taiju@240b:253:ec40:2400:7d70:b78b:4932:3d5a) (Ping timeout: 258 seconds)
[07:06:28] *** Quits: prxq (~quassel@x4dbedc88.dyn.telefonica.de) (Ping timeout: 272 seconds)
[07:06:54] *** Quits: remexre (~nathan@user/remexre) (Ping timeout: 250 seconds)
[07:10:54] *** Quits: fizbin (~dtm@2601:82:c380:87a:d8e5:78df:ef65:49a7) (Ping timeout: 272 seconds)
[07:13:13] *** Joins: taiju (~taiju@240b:253:ec40:2400:7d70:b78b:4932:3d5a)
[07:20:21] *** Quits: paravida (~myChateau@user/paravida) (Remote host closed the connection)
[07:21:58] *** Joins: fizbin (~dtm@2601:82:c380:87a:d8e5:78df:ef65:49a7)
[07:26:44] *** Quits: fizbin (~dtm@2601:82:c380:87a:d8e5:78df:ef65:49a7) (Ping timeout: 272 seconds)
[07:31:53] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[07:32:25] *** Joins: remexre (~nathan@user/remexre)
[07:33:01] *** Joins: flynn (~mcbloch@user/flynn)
[07:34:52] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[07:35:59] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 258 seconds)
[07:43:27] *** Joins: livoreno (~livoreno@user/notzmv)
[07:43:59] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be) (Quit: ZNC 1.8.2 - https://znc.in)
[07:44:15] *** Joins: jrjsmrtn (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be)
[07:48:28] *** Joins: hiruji (~hiruji@user/hiruji)
[07:51:55] *** Quits: nkatte (~nkatte@2804:14c:7980:8c85:e471:9dbd:12ad:a018) (Ping timeout: 268 seconds)
[07:57:52] *** Joins: nkatte (~nkatte@191.187.216.105)
[07:59:28] *** Quits: nkatte (~nkatte@191.187.216.105) (Read error: Connection reset by peer)
[08:01:07] *** Joins: xsperry (~as@user/xsperry)
[08:01:30] *** Joins: nkatte (~nkatte@2804:14c:7980:8c85:e471:9dbd:12ad:a018)
[08:04:01] *** Quits: anticrisis (~anticrisi@user/anticrisis) (Read error: Connection reset by peer)
[08:07:20] *** Joins: anticrisis (~anticrisi@user/anticrisis)
[08:08:24] *** Joins: oxum (~oxum@106.203.207.2)
[08:13:10] *** Quits: oxum (~oxum@106.203.207.2) (Ping timeout: 258 seconds)
[08:16:47] *** Joins: loke (~loke@junk.nocrew.org)
[08:20:47] *** Joins: arpunk (~arpunk@dynamic-186-31-185-38.dynamic.etb.net.co)
[08:22:49] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[08:22:57] *** Quits: wheelsucker (~user@2600:8801:8c03:1f00::8165) (Remote host closed the connection)
[08:23:09] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 268 seconds)
[08:23:10] *** Joins: wheelsucker (~user@2600:8801:8c03:1f00::8165)
[08:23:13] *** Joins: Matthias1 (~Matthias1@2603-8001-b545-4900-c172-9f24-99f4-d24a.res6.spectrum.com)
[08:25:31] *** Joins: Qwnavery (~Qwnavery@1.128.105.195)
[08:25:53] *** Quits: Qwnavery (~Qwnavery@1.128.105.195) (Changing host)
[08:25:53] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[08:26:00] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: leaving)
[08:27:19] *** Joins: z3t02 (~z3t0@107-159-14-254.on.dsl.ebox.net)
[08:27:21] *** Parts: Qwnavery (~Qwnavery@user/qwnavery) ()
[08:27:22] *** Quits: akarle (~akarle@user/akarle) (Remote host closed the connection)
[08:27:37] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[08:28:52] *** Joins: akarle (~akarle@user/akarle)
[08:29:29] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 248 seconds)
[08:30:09] *** Quits: z3t0 (~z3t0@107-159-10-134.on.dsl.ebox.net) (Ping timeout: 276 seconds)
[08:30:09] *** z3t02 is now known as z3t0
[08:30:30] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:35:47] *** Quits: robin (~robin@user/terpri) (Ping timeout: 258 seconds)
[08:38:17] *** Joins: robin (~robin@user/terpri)
[08:40:51] *** Joins: lad (~lad@user/lad)
[08:44:34] *** Joins: lisp123 (~lisp123@45.130.83.200)
[09:00:13] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[09:14:11] *** Joins: oxum (~oxum@106.203.207.2)
[09:19:17] *** Quits: oxum (~oxum@106.203.207.2) (Ping timeout: 268 seconds)
[09:31:49] *** Quits: Matthias1 (~Matthias1@2603-8001-b545-4900-c172-9f24-99f4-d24a.res6.spectrum.com) (Read error: Connection reset by peer)
[09:31:51] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[09:32:24] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[09:37:07] *** Quits: nkatte (~nkatte@2804:14c:7980:8c85:e471:9dbd:12ad:a018) (Ping timeout: 258 seconds)
[09:38:15] *** Joins: nkatte (~nkatte@2804:14c:7980:8c85:e471:9dbd:12ad:a018)
[09:40:57] *** Quits: wxie (~Thunderbi@222.64.216.101) (Ping timeout: 258 seconds)
[09:45:54] *** Quits: lisp123 (~lisp123@45.130.83.200) (Remote host closed the connection)
[09:46:56] *** Joins: lisp123 (~lisp123@45.130.83.200)
[09:51:58] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 268 seconds)
[09:52:50] *** Joins: lisp123 (~lisp123@45.130.83.200)
[09:55:43] *** Quits: lisp123 (~lisp123@45.130.83.200) (Read error: Connection reset by peer)
[10:01:23] *** Joins: shka (~herr@109.231.62.239)
[10:02:48] *** Joins: lisp123 (~lisp123@45.130.83.200)
[10:03:11] *** Quits: debsan (~debsan@2800:810:471:8425::1000) (Ping timeout: 258 seconds)
[10:05:21] *** Quits: copec (~copec@home.unaen.org) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:07:24] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 258 seconds)
[10:10:32] *** Quits: galex-713 (~quassel@portable.galex-713.eu) (Ping timeout: 245 seconds)
[10:14:57] *** Joins: wxie (~Thunderbi@222.64.216.101)
[10:18:53] *** Joins: nirnam (~nirnam@1.46.13.87)
[10:22:53] *** Joins: frost (~frost@59.71.240.119)
[10:25:21] *** Quits: nkatte (~nkatte@2804:14c:7980:8c85:e471:9dbd:12ad:a018) (Read error: Connection reset by peer)
[10:30:40] *** Joins: lisp123 (~lisp123@45.130.83.200)
[10:31:49] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[10:35:38] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Remote host closed the connection)
[10:38:38] *** Joins: oxum (~oxum@122.172.107.218)
[10:39:24] *** Joins: Matthias1 (~Matthias1@2603-8001-b545-4900-c870-813e-66c7-5f1f.res6.spectrum.com)
[10:43:36] *** Joins: nkatte (~nkatte@2804:14c:7980:8c85:e471:9dbd:12ad:a018)
[10:43:42] *** Quits: oxum (~oxum@122.172.107.218) (Ping timeout: 272 seconds)
[10:57:33] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:58:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:58:48] *** Lord_of_Life_ is now known as Lord_of_Life
[11:06:33] *** Joins: khrbt (~znc@user/khrbt)
[11:07:36] *** frost is now known as llllweqwe
[11:07:50] *** llllweqwe is now known as frost
[11:18:52] *** frost is now known as niner
[11:19:05] *** niner is now known as frost
[11:20:13] *** Joins: selwyn (~selwyn@user/selwyn)
[11:24:50] *** Quits: lad (~lad@user/lad) (Ping timeout: 258 seconds)
[11:28:11] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[11:28:27] *** Joins: frost (~frost@59.71.240.119)
[11:28:51] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a9ef:bcc0:fc64:d126)
[11:28:52] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a9ef:bcc0:fc64:d126) (Changing host)
[11:28:52] *** Joins: skapata (~Skapata@user/skapata)
[11:34:31] *** acolarh_ is now known as acolarh
[11:34:57] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 268 seconds)
[11:38:08] *** Joins: parnikkapore (~parnikkap@user/parnikkapore)
[11:38:16] *** Joins: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch)
[12:03:11] *** Joins: giammi (~giammi@62-167-236-20.static.adslpremium.ch)
[12:07:27] *** Joins: Matthias_ (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[12:09:01] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8186:40cc:d89:9651)
[12:10:50] *** Quits: Matthias1 (~Matthias1@2603-8001-b545-4900-c870-813e-66c7-5f1f.res6.spectrum.com) (Ping timeout: 258 seconds)
[12:18:14] *** Joins: oxum (~oxum@223.184.94.216)
[12:21:13] *** Quits: oxum (~oxum@223.184.94.216) (Remote host closed the connection)
[12:21:47] *** Joins: oxum (~oxum@223.184.94.216)
[12:22:03] *** Quits: oxum (~oxum@223.184.94.216) (Remote host closed the connection)
[12:25:35] *** Quits: wxie (~Thunderbi@222.64.216.101) (Quit: quit)
[12:31:02] *** Joins: thomasb06 (~thomasb06@eth-west-pareq2-46-193-0-224.wb.wifirst.net)
[12:35:27] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:35:27] *** Joins: oxum (~oxum@223.184.94.216)
[12:38:30] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:40:52] *** Quits: oxum (~oxum@223.184.94.216) (Ping timeout: 272 seconds)
[12:44:37] *** Quits: giammi (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 268 seconds)
[12:48:48] *** Quits: thomasb06 (~thomasb06@eth-west-pareq2-46-193-0-224.wb.wifirst.net) (Quit: test circe)
[12:49:30] *** Joins: thomasb06 (~thomasb06@eth-west-pareq2-46-193-0-224.wb.wifirst.net)
[12:55:45] *** Joins: selwyn_ (~selwyn@user/selwyn)
[12:56:24] *** Joins: ane (ane@shell.wilan.org)
[12:56:28] *** Quits: thomasb06 (~thomasb06@eth-west-pareq2-46-193-0-224.wb.wifirst.net) (Quit: circe test)
[12:57:38] *** Joins: thomasb06 (~thomasb06@eth-west-pareq2-46-193-0-224.wb.wifirst.net)
[12:57:45] *** Quits: thomasb06 (~thomasb06@eth-west-pareq2-46-193-0-224.wb.wifirst.net) (Remote host closed the connection)
[12:58:23] *** Joins: thomasb06 (~thomasb06@eth-west-pareq2-46-193-0-224.wb.wifirst.net)
[12:59:02] *** Joins: oxum (~oxum@223.184.94.216)
[12:59:14] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 272 seconds)
[13:04:00] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:04:55] *** Joins: khrbt (~znc@2601:646:8600:2f6:3fa:485d:475e:2130)
[13:12:41] *** Quits: oxum (~oxum@223.184.94.216) (Remote host closed the connection)
[13:15:55] *** Quits: anticrisis (~anticrisi@user/anticrisis) (Read error: Connection reset by peer)
[13:18:22] *** Quits: khrbt (~znc@2601:646:8600:2f6:3fa:485d:475e:2130) (Changing host)
[13:18:22] *** Joins: khrbt (~znc@user/khrbt)
[13:21:41] *** Joins: oxum (~oxum@223.184.94.216)
[13:23:23] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:25:25] *** Quits: parnikkapore (~parnikkap@user/parnikkapore) (Quit: Leaving)
[13:26:21] *** Quits: oxum (~oxum@223.184.94.216) (Ping timeout: 258 seconds)
[13:27:18] *** Quits: thomasb06 (~thomasb06@eth-west-pareq2-46-193-0-224.wb.wifirst.net) (Quit: testing circe config)
[13:27:59] *** Joins: thomasb06 (~thomasb06@eth-west-pareq2-46-193-0-224.wb.wifirst.net)
[13:29:54] *** Joins: dim (~dimlibera@2a02:2178:2:4:1658:d0ff:fe49:408c)
[13:34:01] *** Quits: nkatte (~nkatte@2804:14c:7980:8c85:e471:9dbd:12ad:a018) (Ping timeout: 258 seconds)
[13:34:47] *** Joins: montxero (~user@149.167.149.74)
[13:35:43] *** Joins: nkatte (~nkatte@2804:14c:7980:8c85:e471:9dbd:12ad:a018)
[13:37:14] *** Joins: silasfox (~silasfox@62.159.27.1)
[13:40:09] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Ping timeout: 258 seconds)
[13:40:26] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[13:46:07] *** Joins: makomo (~makomo@user/makomo)
[13:51:54] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 276 seconds)
[13:51:55] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:52:21] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[13:53:04] *** Quits: nkatte (~nkatte@2804:14c:7980:8c85:e471:9dbd:12ad:a018) (Ping timeout: 272 seconds)
[13:54:20] *** Quits: taiju (~taiju@240b:253:ec40:2400:7d70:b78b:4932:3d5a) (Ping timeout: 258 seconds)
[13:54:20] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:54:40] *** Joins: khrbt (~znc@2601:646:8600:2f6:3fa:485d:475e:2130)
[13:56:05] *** Quits: silasfox (~silasfox@62.159.27.1) (Quit: Connection closed)
[13:58:14] *** Joins: taiju (~taiju@240b:253:ec40:2400:7d70:b78b:4932:3d5a)
[13:58:32] *** Joins: silasfox (~silasfox@62.159.27.1)
[14:02:39] *** Joins: nkatte (~nkatte@191.187.216.105)
[14:02:46] *** Quits: khrbt (~znc@2601:646:8600:2f6:3fa:485d:475e:2130) (Changing host)
[14:02:46] *** Joins: khrbt (~znc@user/khrbt)
[14:04:11] *** Quits: prxq_ (~quassel@x4db46964.dyn.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[14:04:32] *** Quits: silasfox (~silasfox@62.159.27.1) (Quit: Connection closed)
[14:04:32] *** Quits: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net) (Remote host closed the connection)
[14:05:25] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[14:05:45] *** Joins: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net)
[14:07:16] *** Joins: silasfox (~silasfox@62.159.27.1)
[14:10:16] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (Ping timeout: 250 seconds)
[14:10:26] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[14:10:37] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[14:16:26] *** Joins: Guest85 (~Guest85@94.231.255.221)
[14:16:53] *** Guest85 is now known as Andi
[14:17:00] *** Andi is now known as Ande
[14:17:03] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[14:17:04] *** Ande is now known as Andi23
[14:17:59] *** Parts: Andi23 (~Guest85@94.231.255.221) ()
[14:20:43] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:20:52] *** Joins: amb007 (~a_bakic@87.116.175.56)
[14:26:21] *** Joins: prxq (~quassel@x4db5a3fe.dyn.telefonica.de)
[14:27:00] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (Ping timeout: 276 seconds)
[14:27:26] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[14:37:33] *** Joins: montxero (~user@149.167.149.74)
[14:40:00] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[14:40:19] *** Joins: livoreno (~livoreno@user/notzmv)
[14:43:02] *** Joins: elflng (~elflng@5.28.137.182)
[14:43:29] *** Quits: amb007 (~a_bakic@87.116.175.56) (Read error: Connection reset by peer)
[14:44:23] *** Joins: amb007 (~a_bakic@87.116.175.56)
[14:47:39] *** Quits: pillton (~user@2405:b000:600:b0::36a) (Ping timeout: 260 seconds)
[14:47:54] *** Joins: mikeliuk (~mikeliuk@109.249.187.96)
[14:48:46] *** Quits: amb007 (~a_bakic@87.116.175.56) (Ping timeout: 258 seconds)
[14:49:30] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[14:50:31] *** Quits: nirnam (~nirnam@1.46.13.87) (Read error: Connection reset by peer)
[14:50:39] *** Joins: nirnam (~nirnam@1.46.13.87)
[14:51:04] *** Quits: nirnam (~nirnam@1.46.13.87) (Client Quit)
[14:51:05] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:51:49] *** Joins: amb007 (~a_bakic@87.116.175.56)
[14:51:56] *** Joins: nirnam (~nirnam@1.46.13.87)
[14:55:12] *** Joins: giammi (~giammi@62-167-236-20.static.adslpremium.ch)
[14:59:42] *** Joins: karlosz (~karlosz@router.cloyne.org)
[15:01:41] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[15:11:04] *** Quits: frgo (~frgo@p200300deef181d00e13f7bdeb1305ddd.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:11:31] *** Joins: frgo (~frgo@p200300deef181d00e13f7bdeb1305ddd.dip0.t-ipconnect.de)
[15:12:29] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[15:14:50] *** Quits: amb007 (~a_bakic@87.116.175.56) (Ping timeout: 258 seconds)
[15:15:51] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[15:17:31] *** Joins: random-nick (~random-ni@87.116.177.228)
[15:18:09] *** Joins: lisp123 (~lisp123@45.130.83.200)
[15:18:40] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[15:22:53] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 258 seconds)
[15:23:16] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 258 seconds)
[15:24:36] *** Joins: trriplex (~trriplex@user/trriplex)
[15:25:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:25:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 258 seconds)
[15:28:38] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 258 seconds)
[15:28:39] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[15:29:27] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[15:32:10] *** Quits: trriplex (~trriplex@user/trriplex) (Ping timeout: 240 seconds)
[15:34:02] *** Joins: dlowe (~dlowe@user/dlowe)
[15:35:19] *** Joins: Oddity (Oddity@user/oddity)
[15:35:26] *** Quits: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 268 seconds)
[15:36:40] *** Quits: giammi (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 268 seconds)
[15:40:54] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Ping timeout: 258 seconds)
[15:42:13] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[15:43:25] *** Joins: fizbin (~dtm@2601:82:c380:87a:d8e5:78df:ef65:49a7)
[15:45:15] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[15:52:11] *** Joins: lisp123 (~lisp123@45.130.83.200)
[15:58:09] *** Quits: fizbin (~dtm@2601:82:c380:87a:d8e5:78df:ef65:49a7) (Ping timeout: 258 seconds)
[15:59:37] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 248 seconds)
[16:04:29] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:04:29] *** Quits: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net) (Remote host closed the connection)
[16:04:51] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[16:05:07] *** Joins: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net)
[16:05:15] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:09:46] *** Joins: oxum (~oxum@223.226.90.224)
[16:10:11] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8186:40cc:d89:9651) (Ping timeout: 268 seconds)
[16:14:04] *** Quits: mikeliuk (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[16:14:38] *** Quits: oxum (~oxum@223.226.90.224) (Ping timeout: 258 seconds)
[16:14:57] *** Joins: Guest51 (~Guest51@72.92.132.99)
[16:17:52] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[16:18:07] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[16:25:40] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[16:32:37] *** Quits: Guest51 (~Guest51@72.92.132.99) (Quit: Client closed)
[16:45:29] *** Quits: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net) (Ping timeout: 248 seconds)
[16:48:24] *** Joins: trriplex (~trriplex@user/trriplex)
[16:49:08] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[16:52:36] *** Joins: xiews (~wxie@101.93.23.227)
[17:00:43] *** Joins: giammi (~giammi@62-167-236-20.static.adslpremium.ch)
[17:03:12] *** Joins: selwyn (~selwyn@user/selwyn)
[17:03:47] *** Joins: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch)
[17:06:01] *** Joins: oxum (~oxum@223.226.90.224)
[17:06:20] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Read error: Connection reset by peer)
[17:06:36] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[17:10:59] *** Quits: oxum (~oxum@223.226.90.224) (Ping timeout: 258 seconds)
[17:13:21] *** Quits: trriplex (~trriplex@user/trriplex) (Remote host closed the connection)
[17:13:29] *** Joins: debsan (~debsan@2800:810:471:8425::1000)
[17:14:43] *** Quits: debsan (~debsan@2800:810:471:8425::1000) (Remote host closed the connection)
[17:18:39] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Ping timeout: 258 seconds)
[17:19:08] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[17:20:09] *** Quits: cladur (~cladur@user-5-173-146-9.play-internet.pl) (Ping timeout: 248 seconds)
[17:28:56] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:29:37] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:29:49] *** Joins: oxum (~oxum@223.226.90.224)
[17:35:04] *** Quits: giammi (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 268 seconds)
[17:44:28] *** Quits: oxum (~oxum@223.226.90.224) (Remote host closed the connection)
[17:45:43] *** Joins: oxum (~oxum@223.226.90.224)
[17:52:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:52:10] <raeda> TIL about tregex which is regular expressions for tree structures: https://nlp.stanford.edu/software/tregex.shtml
[17:52:49] *** Joins: mikeliuk (~mikeliuk@109.249.187.96)
[17:52:57] <raeda> Not sure if there are good applications for Lisp, unless someone's making a search engine for Lisp code
[17:54:16] *** Quits: oxum (~oxum@223.226.90.224) (Remote host closed the connection)
[17:56:33] *** Joins: oxum (~oxum@223.226.90.224)
[18:01:12] *** Quits: oxum (~oxum@223.226.90.224) (Ping timeout: 258 seconds)
[18:03:44] *** Joins: lisp123 (~lisp123@45.130.83.200)
[18:05:41] *** Joins: oxum (~oxum@223.226.90.224)
[18:06:59] *** Quits: oxum (~oxum@223.226.90.224) (Remote host closed the connection)
[18:13:06] *** Joins: euclid9 (~jrpilotte@bras-base-sbcypq6202w-grc-31-70-24-122-14.dsl.bell.ca)
[18:14:03] *** Joins: galex-713 (~quassel@portable.galex-713.eu)
[18:14:03] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:21:29] *** Quits: nkatte (~nkatte@191.187.216.105) (Ping timeout: 248 seconds)
[18:21:55] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[18:24:09] *** Joins: nkatte (~nkatte@191.187.216.105)
[18:26:15] *** Quits: silasfox (~silasfox@62.159.27.1) (Quit: Connection closed)
[18:28:01] *** Joins: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net)
[18:28:19] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:29:04] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[18:31:51] *** Joins: oxum (~oxum@223.226.90.224)
[18:32:42] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:34:25] *** Quits: nkatte (~nkatte@191.187.216.105) (Read error: Connection reset by peer)
[18:35:35] *** Joins: nkatte (~nkatte@2804:14c:7980:8c85:e471:9dbd:12ad:a018)
[18:36:28] *** Quits: oxum (~oxum@223.226.90.224) (Ping timeout: 258 seconds)
[18:43:05] *** Joins: oxum (~oxum@122.172.62.99)
[18:46:12] *** Joins: mattil (~mattilinn@62-113-178-139.bb.dnainternet.fi)
[18:47:37] *** Quits: oxum (~oxum@122.172.62.99) (Ping timeout: 248 seconds)
[18:48:04] *** Quits: mattil (~mattilinn@62-113-178-139.bb.dnainternet.fi) (Max SendQ exceeded)
[18:48:58] *** Joins: mattil (~mattilinn@62-113-178-139.bb.dnainternet.fi)
[18:50:35] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:54:08] *** Joins: yoonkn (~user@175.197.208.79)
[18:57:45] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[19:01:56] *** Joins: Guest93 (~Guest93@c-69-255-2-251.hsd1.md.comcast.net)
[19:03:24] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:04:05] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:11:10] <White_Flame> dash[m]: can you give an example of javascript homoiconicity?
[19:11:23] <White_Flame> (because I don't believe it ;) )
[19:11:41] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[19:11:41] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[19:11:43] *** Quits: lisp123 (~lisp123@45.130.83.200) (Quit: Leaving...)
[19:11:50] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[19:12:22] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[19:15:53] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:16:53] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.2)
[19:19:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:23:40] *** Joins: giammi (~giammi@62-167-236-20.static.adslpremium.ch)
[19:28:54] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[19:31:53] <yitzi> By that logic Python must also be homoiconic b.c. it has f-strings.
[19:32:23] <dash[m]> well, what does homoiconic mean
[19:33:26] <dash[m]> the ability to quote code and manipulate its structure?
[19:36:18] <mariari> some people call C homoiconic, afterall it's just string/byte-processing over itself
[19:38:31] *** Joins: Skyfire (~pyon@user/pyon)
[19:38:40] <dash[m]> obviously we can exclude the idea of being able to manipulate the string representation from discussion, everything can do that
[19:38:56] <yitzi> dash[m]: Are you really asking? Your response could be interpreted as sophistry.
[19:39:24] <dash[m]> yitzi: I'm asking which part is important. It's not the parentheses, I assume.
[19:39:49] <dash[m]> (this is my favorite discussion of C along those lines http://conal.net/blog/posts/the-c-language-is-purely-functional )
[19:40:49] <moon-child> homoiconicity is not really well defined
[19:40:51] <moon-child> but
[19:41:07] <yitzi> dash[m]: I am sure there are lots of definitions. https://en.wikipedia.org/wiki/Homoiconicity
[19:41:22] <yitzi> To me it is the last part "the program's internal representation can be inferred just by reading the program itself"
[19:41:27] <moon-child> I think as a general principle we can think of it as a property of a language where that languagae can be represented in a structured manner which follows obviously from its syntax
[19:41:46] <moon-child> (where 'obvious' is clearly down to judgement)
[19:42:58] <yitzi> And template strings or f-strings may just produces compiled code, there isn't really a manipulation of their structure required per se.
[19:51:00] *** Joins: tfb (~tfb@88.98.95.237)
[19:52:44] <dash[m]> The property I had in mind was being able to write something like "let x = js`3 + 4`; return js`2 * ${x}`" and get js`2 * (3 + 4)`
[19:53:52] <moon-child> so, structural manipulation of code?
[19:54:04] *** Quits: xiews (~wxie@101.93.23.227) (Remote host closed the connection)
[19:54:24] <dash[m]> right, source code literals that produce composable ASTs
[19:54:58] <moon-child> I think that to be _homo_iconic--the _same_ as its representation--that's not sufficient; the relationship between the ast and the source must be obvious
[19:54:59] *** Joins: oxum (~oxum@122.172.62.99)
[19:55:35] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[19:55:59] <dash[m]> the curse of being an expert, it seems obvious to me now ;-)
[19:56:07] <dash[m]> but yes I see your point
[19:57:00] <yitzi> Plus your example could be understood as macro expansion like TeX.
[19:57:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[19:57:16] <dash[m]> oh?
[19:57:30] <dash[m]> my memory of TeX was that it only did textual substitution
[19:57:44] *** Quits: giammi (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 258 seconds)
[19:59:21] <yitzi> Tokens specifically. There doesn't need to be any manipulation or creation of AST to replace x with `3+4`, imho.
[19:59:53] <moon-child> sure there does.  Otherwise you mess up your precedence
[19:59:53] <mfiano> Well no language is truly homoiconic; it comes in varying levels.
[20:00:30] <yitzi> Always putting parenthesis there would not violate precedence.
[20:01:08] <moon-child> 'always putting parentheses'  that's not a route you want to go down
[20:01:28] <yitzi> Why not?
[20:01:38] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[20:02:02] <dash[m]> right. anyway my intent was to demonstrate ast-based substitution, solutions of this nature are often strongly typed and will reject substitution of nodes that aren't legal syntax in that position, etc
[20:02:08] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:06:30] *** Quits: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[20:07:52] <jcowan> yitzi: Because your text becomes unreadable. I would say that homoiconicity means that the external representation of a program is the same as (a subset of) the external representation of fundamental datatypes (that is, not invented ad hoc) of the language itself.
[20:07:56] *** Joins: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net)
[20:12:58] *** Quits: oxum (~oxum@122.172.62.99) (Remote host closed the connection)
[20:15:05] *** Joins: copec (~copec@home.unaen.org)
[20:17:25] <wasamasa> step 1: identify the plain old data structures of the language
[20:17:44] <wasamasa> step 2: discover whether the language supports parsing its source code and how the AST is represented
[20:18:03] <wasamasa> if the AST doesn't use plain old data structures, well, nobody is going to do serious meta-programming
[20:18:20] <wasamasa> calling that homoiconicity is a bit pretentious, but here we are
[20:18:45] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:21:56] <wasamasa> on the other side this is what a ruby programmer believes a sexp to look like: https://rdoc.info/gems/ast/AST/Sexp
[20:22:36] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[20:23:43] *** Joins: oxum (~oxum@122.172.62.99)
[20:26:01] *** Quits: oxum (~oxum@122.172.62.99) (Remote host closed the connection)
[20:31:18] *** Joins: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se)
[20:31:57] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[20:34:05] <White_Flame> dash[m]: this javascript source code is not any JS data object, nor is it a string: function foo() {return 3;};
[20:34:23] <White_Flame> the string "function foo() {return 3};" is not the same as that source code, nor is manipulable directly as such
[20:34:58] *** pi37 is now known as johnjay
[20:35:02] <White_Flame> change the 3 to a 4, or arbitrarily visit & change any expression within it with proper semantics, and it's not just a simple string template thing
[20:35:43] <dash[m]> White_Flame: yes, "foo" and js`foo` are different
[20:35:55] <dash[m]> the former is a text string, the latter is a js ast
[20:36:21] <White_Flame> but it's marked up
[20:36:23] <White_Flame> it's not just text
[20:36:25] <White_Flame> erm, not just source code
[20:37:11] <dash[m]> yes? (defun square (x) (* x x)) and '(defun square (x) (* x x)) are also different
[20:37:32] <White_Flame> where are some examples of js` ?  that's not googlable
[20:38:08] <dash[m]> I don't remember which library it's in, I think it's either sweetjs or esprima
[20:38:14] <dash[m]> anyway this sort of thing was pioneered in E (https://erights.org/) which also had a pattern-matching facility to go with the constructor
[20:38:25] <White_Flame> oh, it's not a new feature of JS itself?
[20:38:38] <dash[m]> "template literals" are the new JS feature
[20:38:47] <dash[m]> that enables this sort of behavior
[20:39:09] <White_Flame> templates are usually for construction, while ast is destructuring
[20:39:27] <White_Flame> (or some analog to it)
[20:39:31] <dash[m]> how E does it: http://erights.org/elang/grammar/quasi-overview.html 
[20:40:02] <White_Flame> eg, extract the 2nd element from "[[1,2],3,4]"
[20:41:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:42:20] <White_Flame> so what is the actual value of js`function() {return 3;};`?
[20:42:27] *** Joins: retropikel_ (~retropike@83-245-241-195-nat-p.elisa-mobile.fi)
[20:42:33] <dash[m]> a javascript ast
[20:42:38] <dash[m]> for that function
[20:42:52] <White_Flame> that's not somethign typable or printable as function() {return 3;}?
[20:43:18] <White_Flame> specifically, the fact that it's AST objects kind of breaks the homoiconicity
[20:43:30] <White_Flame> there's no direct representation of the data
[20:43:41] <White_Flame> as the standard input format
[20:44:13] <dash[m]> mmm. what makes a representation "direct"?
[20:44:14] <White_Flame> (foo 3) is the natural data format for a list, as well as what it used for source code
[20:44:48] <White_Flame> function() {return3;} is not the same form as {type:"function", params:[], ...}
[20:45:01] <dash[m]> anyway re pattern matching, an example from E is "def deriv (expr, var) { if (expr =~ e`${var} ** @{subexpr}`) { return e`${subexpr} * (var ** (${subexpr} - 1))` }"
[20:45:18] *** Quits: retropikel (~retropike@2001:999:200:1f35:f194:c1b5:4044:270e) (Ping timeout: 272 seconds)
[20:45:30] <White_Flame> if JS source code looked like ["function", [], ...] then it would be homoiconic, because the source code is in data representation format
[20:46:23] <dash[m]> so you could call that like "deriv(e`x ** 3`, e`x`)" and get e`3 * (x ** (3 - 1))`
[20:46:44] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[20:47:04] <dash[m]> what makes a data format "natural"?
[20:47:31] <dash[m]> I'm not denying there's something there, I'm just trying to see if we can nail down what it is
[20:47:43] <White_Flame> the fundamental, documented, expected way of representing source code, as supported by the compiler/execution, has its source code in data structure representation
[20:47:58] <White_Flame> data literals
[20:48:09] <White_Flame> without any other syntax that's special to code
[20:48:50] <White_Flame> I found this page before, which constructs a new non-JS language inside JS that is basically homoiconic: http://blog.interfacevision.com/design/design-javascript-and-homoiconicity/
[20:49:06] *** Quits: retropikel_ (~retropike@83-245-241-195-nat-p.elisa-mobile.fi) (Quit: Leaving)
[20:49:24] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:49:43] <White_Flame> hmm, at least it appears to be.  With {left: add({left: num(3), right: num(-1)})}, those function calls aren't data, so I guess that doesn't really work either
[20:49:45] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Ping timeout: 248 seconds)
[20:49:55] <White_Flame> s/appears/appeared/
[20:50:12] <dash[m]> So arguably javascript is a bad example because this is a facility that came late, it's not integrated into the language, etc
[20:50:35] <White_Flame> no, the source code is not data literals
[20:50:39] <dash[m]> but it's standard behavior for E, the `eval` function in E takes an ast to run
[20:50:49] <dash[m]> it has standard literal syntax for source code
[20:51:06] <dash[m]> would you argue that still doesn't count?
[20:51:17] <White_Flame> I don't know E enough to evaluate that, but if you have to hop through AST forms that doesn't sound homoiconic
[20:51:42] *** Joins: oxum (~oxum@122.172.62.99)
[20:52:02] <dash[m]> not sure what you mean by 'hop', you can write everything as literals, both constructing and destructuring it
[20:52:10] <White_Flame> on wikipedia, I see println("Hello, World!").  What datastructure is that?
[20:52:26] <dash[m]> it's a `FunctionCallExpr`
[20:52:32] <White_Flame> prolog is probably the 2nd most well known homoiconic language behind lisps
[20:52:35] <mfiano> Does JS have a metacircular evaluator?
[20:52:53] *** Joins: jon89 (~jon89@24-233-185-117.miami.fl.bluestreamcable.net)
[20:53:18] <dash[m]> mfiano: "have"? it's not particularly had to write
[20:53:40] <mfiano> Yes, have.
[20:53:50] <dash[m]> hard*
[20:53:52] <White_Flame> in prolog, foo(3) is a compound (iirc), which is just a data tuple with a header slot.  Code is named by this data and matches its slots
[20:53:53] <mfiano> Built-in.
[20:54:07] <dash[m]> mfiano: does lisp? :)
[20:54:17] <mfiano> Of course.
[20:54:37] <White_Flame> what other uses does FunctionCallExpr have in data usage?  what's its parent class?  Is it just a generic data container?
[20:54:38] <dash[m]> then i think it's safe to say js does too
[20:54:57] <dash[m]> White_Flame: interesting questions!
[20:54:59] <moon-child> reductio ad absurdum, every turing-complete language has one
[20:55:20] <moon-child> iow, the question has lost meaning
[20:55:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:55:42] <dash[m]> White_Flame: now we're getting to points of potential differences. E doesn't have classes or generics, though
[20:56:10] <White_Flame> sure, and lisp doesn't really have much of a class tree for ye olde types of list and such
[20:56:44] *** Quits: oxum (~oxum@122.172.62.99) (Ping timeout: 268 seconds)
[20:56:50] <White_Flame> but a list is just a generic data structure, with list-oriented operations, all of which are useful for manipulating source code as well as data
[20:56:57] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[20:56:58] *** Parts: jon89 (~jon89@24-233-185-117.miami.fl.bluestreamcable.net) ()
[20:57:00] <White_Flame> it doesn't have or need special data structures for code
[20:57:12] <White_Flame> it's just "simple" data
[20:57:20] <White_Flame> which directly represents operations & expressions
[20:57:30] <White_Flame> and destructurable & composable as plain list data
[20:58:06] <White_Flame> so plain list tools are used in manipulating source code, instead of a special AST interface dedicated to source code datastructures
[20:58:24] *** Joins: Patch_ (~Patch@pool-108-51-126-77.washdc.fios.verizon.net)
[20:58:37] <White_Flame> (and yes, my goal here is to express this well, too :) )
[20:58:47] *** Joins: lad (~lad@user/lad)
[20:59:04] <dash[m]> Right. But what makes lists "plain" and "direct"? 
[20:59:19] <dash[m]> Literal syntax for them and lots of functions that operate on them?
[21:00:25] *** Quits: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net) (Ping timeout: 248 seconds)
[21:00:57] <mfiano> The fact that its a simple tree data structure no different than the AST.
[21:01:00] <White_Flame> they're not dedicated to code
[21:01:12] <White_Flame> FunctionCallExpr seems like something that's only applicable to code
[21:01:30] <White_Flame> (foo 1 2 3) is a list with 4 elements
[21:01:45] *** Quits: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[21:02:15] <dash[m]> Hmmm.
[21:02:50] <dash[m]> It occurs to me that another factor is that in lisp a lot of things are left to convention that are handled by structure in other languages
[21:03:09] <dash[m]> well, no, that's not even right
[21:03:50] <dash[m]> For instance: there's structure to a defun parameter list, an arbitrary list will not do
[21:05:17] <White_Flame> and (1 2 3) is not an evaluatable expression
[21:05:26] <mfiano> '(foo 1 2 3) is a list with 2 elements :)
[21:05:39] <White_Flame> yep :)
[21:05:43] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[21:06:49] *** Joins: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs)
[21:07:27] <White_Flame> I think that prolog is probably slightly more regular in those semantics
[21:07:43] <White_Flame> as compounds can only have an atom ("symbol" in lisp) as a head
[21:07:52] <dash[m]> So the list representation of lisp source code doesn't capture all of the structure needed to evaluate expressions
[21:08:07] <White_Flame> but that's an advantage when it comes to macros
[21:08:19] <White_Flame> in order to extend E, you need to create new AST types
[21:08:32] <White_Flame> in lisp, you just need to handle existing data literals
[21:09:00] <White_Flame> so yes, it's the form & policy of things that dictate how they operate, and that's easier to manipulate
[21:09:26] <White_Flame> rather than static type heirarchies of nodes
[21:09:27] <dash[m]> Right, language extensions have to fit into the constraints of existing syntax. And lisp expresses very few constraints on those
[21:09:51] <dash[m]> This is somewhat intentional for E because macros conflict with its design goals
[21:10:08] <White_Flame> what are its design goals like?
[21:10:45] <mfiano> No hidden control flow </zig>
[21:11:55] <dash[m]> White_Flame: Specifically it conflicts with auditability, being able to discern control and data flow locally everywhere 
[21:12:19] <dash[m]> http://www.erights.org/data/irrelevance.html talks about this a bit
[21:12:48] <dash[m]> They conclude that a macro expansion phase that ran after scope resolution would be OK but there are few examples of those
[21:13:59] <White_Flame> ok, so these very much mean a very statically defined language
[21:14:07] <White_Flame> lisp is built in lisp and extensible with lisp
[21:14:25] <White_Flame> Forth has a lot of similarities there, too, though it's not homoiconic
[21:14:36] <mfiano> One can write a Lisp compiler in about 20 lines of Lisp, but you don't learn much about compiler theory. It takes about 20kloc of good C code and extensive compiler theory background to write a C compiler.
[21:14:39] <dash[m]> Right. The old "flawless diamond"-vs-"big ball of mud" spectrum.
[21:14:45] <White_Flame> (forth doesn't really have an input format, so it's either irrelevant or arguable)
[21:15:27] <White_Flame> mfiano: forget compiler, even parsers are harder
[21:15:43] <mfiano> I was including all phases
[21:15:46] <dash[m]> Sure. So once you start talking about design principles and intent these distinctions get a lot clearer, when you get down into how it's implemented it's easy to dispute which side of the line something falls on
[21:15:53] <mfiano> But yes, each one on its own is harder by extension
[21:16:17] <dash[m]> You can't get away from parsers in lisp, though - defun parameter lists, at least, have to be parsed
[21:16:37] <dash[m]> as hbaker's famous parser demonstration shows :)
[21:16:41] <White_Flame> dash[m]: yes, and as somebody who banged my head against limitations of other languages in expressability, the dynamically defined nature of Lisp and that class of languages is very welcome
[21:17:08] <White_Flame> it's hard to create real abstractions & expressability in immutable languages (eg, where the language itself is immutable, not its data structures)
[21:17:11] <mfiano> I am back from a 2 month hiatus exploring static blub myself, and I feel nice and cozy again.
[21:17:39] <White_Flame> dash[m]: and it's super easy
[21:17:50] <dash[m]> White_Flame super easy? https://plover.com/~mjd/misc/hbaker-archive/Prag-Parse.html#fn12
[21:17:52] <White_Flame> that's the thing, people tend to avoid expressability
[21:18:18] <White_Flame> things like metaprogramming are "way out there" to most people, because the languages make them hard
[21:18:22] <dash[m]> Expressivity isn't good in all circumstances.
[21:18:30] <mfiano> White_Flame: What do you mean exactly by immutable language?
[21:18:32] <dash[m]> It's certainly fun though.
[21:18:36] <White_Flame> while lispers use them all the time in little tools to make their project much easier tow rite
[21:18:54] <White_Flame> mfiano: where it has static syntax & fundamental semantics
[21:19:30] <mfiano> Worse is the mutable immutable languages. The static syntax that changes every release.
[21:19:31] <White_Flame> dash[m]: less language-level dynamic espressivity means more work to state the same thing
[21:19:34] <dash[m]> White_Flame: There's gradations of that, consider MetaML or Template Haskell
[21:19:46] <White_Flame> mfiano: ugh, yes
[21:19:48] <dash[m]> Sure. But things that are more work to write are often easier to read.
[21:19:59] <White_Flame> dash[m]: no, because they're often bigger
[21:20:02] <dash[m]> (scratch that - can be easier to read)
[21:20:16] <White_Flame> creating a few syntactic abstractions shrinks your source code to things that are incredibly readable for its specific application domain
[21:20:19] *** Quits: Matthias_ (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Remote host closed the connection)
[21:20:34] <dash[m]> There's more than one definition of "readable"
[21:20:34] <mfiano> A good abstraction is not about reducing code
[21:20:43] <White_Flame> dash[m]: sure, machine readable doesn't care about size, for instance
[21:21:07] <White_Flame> mfiano: it kind of does, in a long tail effect
[21:21:09] <mfiano> It's about bringing the code closer to the problem domain.
[21:21:11] <dash[m]> Anyway if conciseness were the primary concern we'd all be using J or Hoon :)
[21:21:16] <White_Flame> direct expression of concepts, instead of boilerplating everything in
[21:21:32] <White_Flame> conceptual conciseness
[21:21:47] <White_Flame> not syntactic conciseness
[21:22:20] <White_Flame> lisp's s-expressions actauly tend to be syntactically larger than many other language's individiaul operations
[21:22:39] <White_Flame> foo[3].x, vs (foo-x (aref foo 3)) for instance
[21:23:09] <dash[m]> here's a lisp descendant that uses pairs of punctuation characters for common operations https://github.com/taalhavras/ucal/blob/master/urbit/lib/ucal/parser.hoon
[21:23:14] <White_Flame> but it's in the abstractions, compositions, interrelations, and boilerplate eliminations where lisp source code can shrink past most
[21:23:25] <dash[m]> (this is implementing an iCal parser for a calendar app)
[21:23:29] <White_Flame> (and again I'm comparing against things like C and Java, not E or code golf languages)
[21:23:35] <mfiano> I read somewhere a long time ago that parentheses in a typical Lisp program are approximately the same amount as bracket and semi-colon delimiters in blub
[21:23:49] <White_Flame> mfiano: yep
[21:24:04] <dash[m]> sure, but you never look at the parens in a lisp program right :)
[21:24:10] <mfiano> I never actually measured though. Would be quite difficult to run an unbiased experiment :)
[21:24:23] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[21:24:28] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:24:31] <dash[m]> mfiano: one of my college textbooks showed a function for reversing a list in C++ and in lisp, both having the same number of parentheses
[21:24:50] <mfiano> I am not surprised.
[21:24:54] <dash[m]> all this is reminding me I need to try out stumpwm again, it's been ~10 years
[21:25:17] <White_Flame> http://www.loper-os.org/wp-content/parphobia.png
[21:25:53] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[21:27:08] <White_Flame> algorithmic stuff like reversing things doesn't really take advantage of systemic, organizational abstractions
[21:27:21] <White_Flame> lisp is super efficient in the large
[21:27:23] <dash[m]> wait.. 10 years? no, more like 15 now
[21:27:30] <White_Flame> but basically equivalent to everythign else in the small
[21:27:31] *** Joins: dlowe (~dlowe@user/dlowe)
[21:27:39] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Quit: Leaving)
[21:27:43] <dash[m]> White_Flame: Maybe. I'm not convinced it has that much of an edge these days
[21:27:50] <dash[m]> most of its good ideas have been adopted elsewhere
[21:27:54] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[21:28:03] <White_Flame> many of its features have been adopted
[21:28:34] <White_Flame> but the love of static Object-Obsessed organization has been a massive roadblock in computational expressivity
[21:28:57] <dash[m]> I used to think that, I'm pretty sure it's not true now
[21:29:09] <White_Flame> how so?
[21:29:24] <dash[m]> I think it's more that scaling up software development organization requires reducing expressivity
[21:29:28] <White_Flame> you said specifically that E forewent macros, and eliminated lisp-like advantages with it, for its other tradeoffs for instance
[21:29:55] <White_Flame> I'm not talking about scaling up count of programmers, but scaling up size & flexibility of the software
[21:30:16] <dash[m]> I'm referring to both
[21:30:16] <mfiano> Read Sussman's new book :)
[21:30:38] <White_Flame> large software needs to be incredibly dynamic, to avoid constant refactoring
[21:30:43] <White_Flame> (and even then, you can't fully avoid it)
[21:30:57] <dash[m]> Mmm. Do you have examples of this?
[21:31:02] <White_Flame> having software write & organize your software for you is a massive leap forward in such scalability
[21:31:20] <White_Flame> you end up writing specifications, and expansions into real source code
[21:31:30] <dash[m]> I'm involved in refactoring an "incredibly dynamic" ten-year-old codebase at work :)
[21:31:37] <mfiano> Pretty much every tool described in SDfF is about this concept.
[21:31:38] <White_Flame> instead of starting from some static framework of OO modeling and having to force everything through that low level of expression
[21:31:51] <White_Flame> dash[m]: right, you can't fully avoid it
[21:32:00] <dash[m]> Again, I'd love to see examples - the lisp projects I'm familiar with don't seem to have a major advantage over ones written in other languages
[21:32:15] <White_Flame> well, my biggest stuff is commercial
[21:32:20] <White_Flame> let me see what I have in other things
[21:32:40] <White_Flame> but still, I start with specifications & pseudocode, and make those executable using lisp
[21:32:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:32:55] <White_Flame> changing pseudocode & specs is a TON easier than changing OO implementations of design concepts
[21:33:14] <White_Flame> and these all become native code, not a massive interpreter chain of abstract object instances
[21:33:29] <dash[m]> Mmm. If you say so.
[21:33:41] <White_Flame> then, you also easier get into code generation for other languages, for easily getting communications libraries going
[21:34:07] <White_Flame> you think that changing raw source code is easier than changing DSLs, specs, and pseudocode?
[21:34:10] <mfiano> On a related note, CLOS makes extensibility easy in a lot of ways. You can even recompile a class to update all existing instances. I don't always develop in production, but when I do, I use Lisp :)
[21:34:33] <White_Flame> it also means you can develop during testing
[21:34:35] <dash[m]> White_Flame: I've never had trouble generating e.g. Python code when I need it, and plenty of JS projects do so as well
[21:34:37] <White_Flame> instead of restarting all the tiem
[21:35:00] <White_Flame> is JS your main language?
[21:35:16] <dash[m]> python has mostly paid the bills here
[21:35:18] <White_Flame> mfiano: and micro-test during development, too
[21:35:26] <mfiano> Yes
[21:35:54] <White_Flame> I can't stand the python repl.  It blasphemes what should be possible ;)
[21:36:53] <White_Flame> and I mean what should be possible from with python itself.  You can't do on the commandlin what you can do from .py files, for some reason
[21:37:06] <White_Flame> s/commandlin/command prompt/
[21:37:14] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[21:37:43] <dash[m]> eh, sure you can
[21:37:53] <mfiano> REPL is only the interface. Need to do away with exceptions in favor of conditions, add interactive debugger, and be able to invoke any phase of the compiler from any other to really benefit :)
[21:38:06] <White_Flame> can you define new python classes in different packages from its repl?
[21:38:09] *** Joins: kingjulian (~kingjulia@41.1.139.138)
[21:38:10] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a859:ea2e:6d94:1d4f)
[21:38:10] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a859:ea2e:6d94:1d4f) (Changing host)
[21:38:10] *** Joins: skapata (~Skapata@user/skapata)
[21:38:15] <dash[m]> of course
[21:38:18] <White_Flame> can you import things as easily as from .py files?
[21:38:23] <dash[m]> yes
[21:38:31] <dash[m]> I pretty much never use the repl though
[21:38:34] <White_Flame> well, those are the sorts of things that it just would not do for me
[21:38:43] <White_Flame> and I did python for a few years
[21:39:26] <White_Flame> so you're constantly having to restart your program instead of just add & call functions to your running python application?
[21:40:12] <dash[m]> "restart"? I just run the test suite
[21:40:27] <White_Flame> and then it exits?
[21:40:34] <dash[m]> sure
[21:40:39] <White_Flame> you have to run your test suite just to write & test some function?
[21:41:00] <dash[m]> as opposed to...?
[21:41:06] <mfiano> Image based development?
[21:41:07] <White_Flame> just writing it and calling it?
[21:41:21] <White_Flame> over a few times as you edit live?
[21:41:25] <dash[m]> sure, same thing
[21:41:28] <White_Flame> and once it's reasonable, leave it in
[21:41:52] <White_Flame> no, you need to create test cases and launch new independent runs for it
[21:42:13] <White_Flame> instead of just creating an object and reusing it for multiple calls, you need to commit a place in static source code that instantiates it, etc
[21:42:41] <White_Flame> but, this sort of thing is endemic and accepted in traditional software dev cycles
[21:43:01] <White_Flame> instead of questioning where the time, effort, and source code juggling is being spent
[21:43:04] <dash[m]> no need to commit until I'm ready to push it
[21:43:14] <dash[m]> that's hardly different in lisp
[21:43:17] <White_Flame> I'm not talking about committing
[21:43:20] <White_Flame> in the vcs sense
[21:43:25] <dash[m]> then what?
[21:43:32] <White_Flame> but rather having a function instance you can call & change
[21:43:38] <White_Flame> interactively
[21:43:47] <mfiano> Or a variable, or a macro, or a...
[21:43:54] <White_Flame> in a retained scope of your other parts of the program retaining their state & callability
[21:44:12] <dash[m]> yes? edit the test, hit run, observe results, edit as needed
[21:44:29] <dash[m]> not familiar with the term "retained scope"
[21:44:46] <White_Flame> startup & instantiation takes time before you call your actual test functions
[21:44:59] <mfiano> That's a lot different than changing a function as it is running already. I would not be a game developer if I had to "hit run" every time I want to see minutia change on the screen
[21:45:11] <dash[m]> White_Flame: only if you're doing it wrong
[21:45:19] <White_Flame> just have all your functions & data instantiated, and be able to call functions in different ways, changing them and only them while your entire application is still online
[21:45:37] <dash[m]> mfiano: oh, sure if you've already got an event loop running for experiments that's different
[21:46:08] <dash[m]> White_Flame: sure, for things that aren't web development that probably matters
[21:46:33] <White_Flame> uh, so you're constantly restarting your python webserver when you're making changes and refreshing the page?
[21:46:58] <dash[m]> no, it does that automatically whenever the code changes.
[21:47:08] <White_Flame> web dev is usualy really slow in its turnaround for edits in any case, unless you have really dynamic SPAs
[21:47:33] <dash[m]> (it's not like hitting `eval-defun` and `save-buffer` are that different in terms of workflow)
[21:47:43] <White_Flame> yes they are
[21:48:03] <White_Flame> again, you can have instantiated state that took a lot to lead up to, and reuse or modify it, without it affecting your source code
[21:48:13] <mfiano> ^
[21:48:14] <dash[m]> yes
[21:48:16] <dash[m]> it's in postgres.
[21:48:24] <White_Flame> pause and explore & modify some "interesting" state you got into, etc
[21:48:31] *** Quits: mikeliuk (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[21:48:34] <White_Flame> right, tha'ts not python
[21:48:42] <White_Flame> and not exposing or exploring the python state if something goes wrong
[21:48:49] <White_Flame> for really simple programs, none of this becomes an issue
[21:49:01] <White_Flame> but if you're pushign development, complexity, scope, and scale, these things compound their costs
[21:49:55] <dash[m]> yes. at high scope/scale lisp interactive development conveniences become irrelevant because important state isn't ever local
[21:50:09] <White_Flame> not everything is a thin-operation database program
[21:50:21] <dash[m]> it's in shared data structures in redis, kafka, postgres, cassandra etc
[21:50:52] <White_Flame> in webdev, probably
[21:51:21] <White_Flame> in hard computation, not really
[21:51:33] <dash[m]> yes, in that too
[21:51:51] <White_Flame> and as you maybe knowingly allude to, basic common tasks of industry use their basic common languages well enough
[21:51:59] <dash[m]> once you need to parallelize or increase availability, state has to be decomposed
[21:53:00] *** Joins: ahungry (~user@99-40-9-245.lightspeed.livnmi.sbcglobal.net)
[21:53:08] <dash[m]> compute, storage, and IO all get specialized and scaled individually
[21:53:11] <White_Flame> right, because it's not abstracted well
[21:53:28] <dash[m]> wrong, this is how you abstract it properly
[21:53:39] <White_Flame> I meant to the decomposition of state
[21:53:47] <dash[m]> yes, me too.
[21:54:17] <White_Flame> but still, disconnecting those 3 elements without interconnected heuristics or overall declarations is a needless workflow burden
[21:54:32] <dash[m]> mmm, explain that a little more
[21:54:55] <White_Flame> they all interrelate.  One is going to be your overall bottleneck
[21:55:08] <White_Flame> and if throughput is king, then those tradeoffs change at runtime
[21:55:13] <dash[m]> at any single point in time, sure
[21:56:06] <White_Flame> however, everything is so locked in to legacy designs, that you can't really modify what goes on in common industry with those issues without rewriting all of computing
[21:56:24] <White_Flame> some people are fine with just "deal with it" work of manually programming all this crap
[21:56:49] <dash[m]> Mmm. I would be interested to hear your ideas on how to handle these issues better. 
[21:58:01] <White_Flame> how many years do you have? :-P
[21:58:09] <dash[m]> I think the high-scale tooling is often used by orgs that don't need it and could simplify, but some places really don't have better options
[21:58:24] <White_Flame> but the main problem is what the human needs to express to the machine.  The hardware is capable of a lot
[21:58:30] <dash[m]> My employer actually does need kubernetes or something like it, for example
[21:59:31] <White_Flame> why do you need containers specifically?
[21:59:41] <White_Flame> things like that I see as a failing of OS design
[22:00:13] <White_Flame> and that's more a rhetorical question, or to point at the human burdens that the legacy mudball of computing leaves us at
[22:00:15] <dash[m]> to run compute and IO workloads from ~20 different software developer teams on ~1200 VMs
[22:00:43] <White_Flame> right
[22:00:55] *** Joins: lisp123 (~lisp123@45.130.83.200)
[22:01:16] <White_Flame> these layers of deployment are really weird, but again necessitated by the failings of OS design
[22:01:22] <dash[m]> "containers" are just a historical contingency, even if there were an Actually Good alternative they'd still need a system for configuration and orchestration
[22:01:36] <dash[m]> what would a good OS design look like
[22:01:53] <mfiano> insert metamodular paper here
[22:02:15] <White_Flame> yep
[22:02:41] <White_Flame> and I'd say most of the problems might stem from the notion of an OS being delivered machine code binaries to blindly execute
[22:02:42] *** Quits: kingjulian (~kingjulia@41.1.139.138) (Ping timeout: 268 seconds)
[22:02:52] <dash[m]> mfiano: which?
[22:02:56] <White_Flame> which again have compiled-in notions of what's where
[22:02:59] <mfiano> CLOSOS
[22:03:18] <dash[m]> White_Flame: which problem does this cause
[22:03:36] <White_Flame> the problem of requiring containerization of full OSes just to deliver a program
[22:03:55] <dash[m]> again, that's a historical contingency and not a problem
[22:04:02] <White_Flame> there's also no scoping of configuration or much of the environment
[22:04:13] <White_Flame> right, I'm sayign that's the problem
[22:04:19] <White_Flame> it's a burden on people
[22:04:28] <dash[m]> even if everything was a bootable lisp image instead of a linux VM the general structure of the system and its operational needs would be the same
[22:04:28] *** Quits: Patch_ (~Patch@pool-108-51-126-77.washdc.fios.verizon.net) (Remote host closed the connection)
[22:04:39] <mfiano> um
[22:04:40] <dash[m]> It's an inconvenience, but not a big one
[22:04:55] <White_Flame> it makes companies have to use massive teams fo people specializing on multiple life support projects of various workaround layers for the mudball of computing design
[22:05:08] <dash[m]> there's so much scoping of configuration and environments. have you worked with k8s any?
[22:05:29] <White_Flame> only a little
[22:05:36] <dash[m]> White_Flame: not really, that will happen in any organization that contains both old and new code
[22:05:44] *** Joins: Patch_ (~Patch@pool-108-51-126-77.washdc.fios.verizon.net)
[22:05:45] <White_Flame> but the scoping of configuration is the reason for containerizing OSes themselves, not necessarily the management layer of them
[22:05:57] <White_Flame> *of the containers
[22:06:25] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[22:06:36] <White_Flame> it's a local dependency problem of what versions of utitilies & libs are stored where, and what OS assumptions there are of finding them
[22:06:50] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:07:01] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[22:07:12] <dash[m]> I'm not even sure what this has to do with decomposition of state as a result of scaling a distributed system
[22:07:18] <White_Flame> which specifically is why the contents of multiple containers cant' safely coexist
[22:07:31] <dash[m]> all the things you describe are solved problems even if you stick with linux as a base
[22:07:32] <White_Flame> yes, this is a separate thing brought up
[22:07:53] <White_Flame> but it's the attitude of "oh well, roll up sleeves and get into the muck" vs "this sucks, identify the problems, seek something better"
[22:08:17] <dash[m]> shrug, I find those to be the same attitude :)
[22:08:20] <White_Flame> and at the language level of this sort of thinking, Lisp is great
[22:08:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 256 seconds)
[22:09:15] <White_Flame> at the OS level, there's a lot of things that I see as burdens upon the human due to the legacy unix influence of OS design, which I identify as problems, not things to keep on burdening through
[22:09:47] <White_Flame> and no, I don't have a list of solutions for the OS layer of things, but at least I view them as unacceptable
[22:10:20] <dash[m]> genode (https://genode.org/) would probably be a better base for many systems
[22:10:21] <White_Flame> or at the very least, as smells
[22:11:56] <dash[m]> Strandh's CLOSOS ideas are similar to ones that have been around for a long while but they're not suited to modern hardware (or at least, to modern hardware that has to be connected to the internet)
[22:12:43] <White_Flame> the "first class environments" should completely isolate different trust domains from each other
[22:12:50] <dash[m]> they can't
[22:13:28] <dash[m]> you have to have hardware enforcement of memory protection
[22:13:39] <White_Flame> and the performance dynamics are very well suited to modern CPUs, while retaining very dynamic software capabilities
[22:13:57] <dash[m]> I don't know what "performance dynamics" are
[22:14:28] <White_Flame> how the various features are implemented at the memory layout & CPU operational level to operate efficiently
[22:14:45] <White_Flame> with respect to modern CPUs
[22:14:49] <moon-child> dash[m]: access restrictions are implemented at the software level
[22:14:56] <moon-child> using a safe language (lisp)
[22:14:57] <dash[m]> moon-child: they cannot be
[22:15:00] <dash[m]> not on modern hardware
[22:15:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:15:18] <White_Flame> are you talking about spectre style exploit protection?
[22:15:24] <moon-child> hardware restrictions don't do _more_ for you than software restrictions
[22:15:31] <dash[m]> right, the side channels from cache timing are too wide now
[22:15:38] <White_Flame> uh
[22:15:56] <White_Flame> how do you think that blindly executing raw machine code blobs is safer?
[22:15:57] <dash[m]> moon-child: an nteresting claim
[22:16:18] <dash[m]> White_Flame: "blindly" as opposed to what?
[22:16:29] <White_Flame> as opposed to a trusted local compiler?
[22:16:34] <moon-child> the whole point of sceptre is to exfiltrate data from _other_ process's address spaces.  What more do you think you can do if you're living in the same memory map as another process?
[22:17:36] *** Quits: nkatte (~nkatte@2804:14c:7980:8c85:e471:9dbd:12ad:a018) (Ping timeout: 276 seconds)
[22:17:46] <dash[m]> no, spectre is in a single process' memory space
[22:18:08] *** Joins: nkatte (~nkatte@2804:214:859d:4b94:84be:1c2:92b4:737c)
[22:18:11] *** Joins: djuber (~user@65.79.128.64)
[22:18:47] <White_Flame> many of those side-channel attacks don't respect process boundaries, to my knowledge
[22:18:47] <dash[m]> the one called "Meltdown" was across process boundaries and got fixed by page table isolation, if I recall correctly
[22:18:52] <moon-child> dash[m]: that's not true
[22:19:00] <dash[m]> moon-child: educate me
[22:19:41] <moon-child> https://spectreattack.com/spectre.pdf  abstract 'read arbitrary memory from the victim’s process', and 'violate the security assumptions underpinning [...] system process separation'
[22:19:52] <dash[m]> it wouldn't surprise me if Wikipedia was wrong but their page says "The basic difference between Spectre and Meltdown is that Spectre can be used to manipulate a process into revealing its own data. On the other hand, Meltdown can be used to read privileged memory in a process's address space which even the process itself would normally be unable to access"
[22:19:56] <dash[m]> moon-child: reading
[22:20:00] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Ping timeout: 256 seconds)
[22:20:41] <White_Flame> in any case, you're far more susceptible to such attacks with machine code blobs, and can at least have a central place for mitigation with a trusted local compiler
[22:21:07] *** Joins: amb007 (~a_bakic@87.116.175.34)
[22:21:28] <moon-child> White_Flame: javascript also has a 'central place for mitigation with a trusted local compiler'
[22:21:28] <dash[m]> White_Flame: If that could be done, I expect Chrome will implement it for their JS compiler
[22:21:43] <dash[m]> So far it seems like their efforts haven't resulted in complete mitigation
[22:22:16] <White_Flame> yep
[22:22:49] <White_Flame> however, other machine-instruction level attacks on hardware are simply not possible if you're not running blobs
[22:22:53] <dash[m]> So until that happens use of hardware memory protection seems necessary
[22:22:58] <dash[m]> White_Flame: Such as?
[22:23:35] <White_Flame> or even C level exploits
[22:24:00] <White_Flame> but I guess that's more language memory safety than instruction level
[22:30:24] *** Quits: amb007 (~a_bakic@87.116.175.34) (Read error: Connection reset by peer)
[22:30:51] *** Joins: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs)
[22:34:07] *** Quits: wheelsucker (~user@2600:8801:8c03:1f00::8165) (Remote host closed the connection)
[22:47:45] *** Joins: kingjulian (~kingjulia@41.1.139.138)
[22:50:12] *** Quits: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[22:50:29] *** Joins: amb007 (~a_bakic@109.245.227.26)
[22:53:36] *** Joins: oxum (~oxum@122.172.62.99)
[22:53:45] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[22:54:04] *** Joins: robin (~robin@user/terpri)
[22:54:44] *** Quits: oxum (~oxum@122.172.62.99) (Remote host closed the connection)
[22:55:11] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[22:55:45] *** Quits: amb007 (~a_bakic@109.245.227.26) (Ping timeout: 268 seconds)
[22:55:59] *** Quits: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net) (Ping timeout: 258 seconds)
[22:56:10] *** Joins: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net)
[22:57:21] *** Joins: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs)
[22:59:26] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) ()
[23:05:10] *** Joins: oxum (~oxum@122.172.62.99)
[23:05:11] *** Quits: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs) (Read error: Connection reset by peer)
[23:05:44] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:10:26] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 256 seconds)
[23:10:32] *** Quits: oxum (~oxum@122.172.62.99) (Ping timeout: 268 seconds)
[23:11:47] *** Quits: kingjulian (~kingjulia@41.1.139.138) (Ping timeout: 268 seconds)
[23:12:58] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:14:57] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:14:58] *** Quits: nkatte (~nkatte@2804:214:859d:4b94:84be:1c2:92b4:737c) (Ping timeout: 256 seconds)
[23:15:08] *** Joins: tfb (~tfb@88.98.95.237)
[23:15:43] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:15:54] *** Joins: tfb (~tfb@88.98.95.237)
[23:16:28] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:f4a8:187b:951a:2344)
[23:16:29] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:16:40] *** Joins: tfb (~tfb@88.98.95.237)
[23:17:16] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:17:26] *** Joins: tfb (~tfb@88.98.95.237)
[23:18:02] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:18:12] *** Joins: tfb (~tfb@88.98.95.237)
[23:18:48] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:18:58] *** Joins: tfb (~tfb@88.98.95.237)
[23:19:34] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:22:18] *** Quits: euclid9 (~jrpilotte@bras-base-sbcypq6202w-grc-31-70-24-122-14.dsl.bell.ca) (Quit: WeeChat 2.8)
[23:22:59] *** Joins: jrpilotte (~euclid9@bras-base-sbcypq6202w-grc-31-70-24-122-14.dsl.bell.ca)
[23:23:07] *** Joins: tfb (~tfb@88.98.95.237)
[23:25:22] *** Quits: jrpilotte (~euclid9@bras-base-sbcypq6202w-grc-31-70-24-122-14.dsl.bell.ca) (Client Quit)
[23:28:00] *** Quits: tfb (~tfb@88.98.95.237) (Ping timeout: 256 seconds)
[23:30:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:31:13] *** Quits: mattil (~mattilinn@62-113-178-139.bb.dnainternet.fi) (Quit: Leaving)
[23:31:53] *** Joins: gethuen_ (uid502979@id-502979.stonehaven.irccloud.com)
[23:33:09] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[23:33:31] *** Quits: gethuen_ (uid502979@id-502979.stonehaven.irccloud.com) (Client Quit)
[23:33:38] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:34:01] *** Joins: gethuen_ (uid502979@id-502979.stonehaven.irccloud.com)
[23:34:36] *** Quits: gethuen_ (uid502979@id-502979.stonehaven.irccloud.com) (Client Quit)
[23:35:25] *** Joins: gethuen (uid502979@id-502979.stonehaven.irccloud.com)
[23:36:41] *** Joins: karlosz (~karlosz@router.cloyne.org)
[23:42:25] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:43:19] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:45:30] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[23:45:45] *** Joins: montxero (~user@149.167.149.74)
[23:49:10] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[23:50:35] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[23:50:41] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:56:13] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[23:57:34] *** Joins: dlowe (~dlowe@user/dlowe)
[23:57:54] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
