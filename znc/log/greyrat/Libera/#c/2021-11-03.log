[00:00:19] <extern> what is the best method to test average case algorithms in C ?
[00:00:39] <extern> i heard that rand() srand(time(NULL)) is not uniform and have more chance to generate some numbers than others ? 
[00:00:45] <extern> https://stackoverflow.com/questions/2999075/generate-a-random-number-within-range/2999130#2999130
[00:01:16] *** Joins: nobody_ (~nobody@host-79-16-187-29.retail.telecomitalia.it)
[00:02:19] <extern> what im trying to do is to fill an array with "true randomess as possible" 
[00:02:35] <extern> a friend directed me to here:
[00:02:36] <extern> https://www.pcg-random.org/download.html#minimal-c-implementation
[00:04:02] <tk> extern: true randomness as possible?
[00:04:53] <tk> extern: I think the best random sources which exist right now are all done via specialised hardware.
[00:05:23] <extern> i need the best possible software solution 
[00:07:05] <tk> So I'm not really an expert on this topic but "best" in terms of software PRNGs depends on the circumstances.
[00:07:05] <Bou> the xorshift you linked to will be good enough for most purposes
[00:07:39] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 268 seconds)
[00:09:45] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[00:09:56] *** Quits: extern (~archer@141.226.62.146) (Quit: see you soon)
[00:11:06] <Bou> or there are hundreds of flavors of cryptographic hashing functions to choose from
[00:12:54] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[00:13:13] *** Joins: clamiax (~claudio@net-93-149-158-199.cust.vodafonedsl.it)
[00:13:14] <clamiax> re
[00:14:27] *** Quits: Arthuria (~Arthuria@user/arthuria) (Ping timeout: 268 seconds)
[00:14:41] *** Quits: Darkcoal (~user@2001:16a2:77f2:b600:40ab:61ff:fec1:1782) (Quit: Darkcoal)
[00:15:02] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[00:16:16] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[00:16:35] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[00:16:55] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9e2e:d238:6ddc:c88f) (Ping timeout: 268 seconds)
[00:17:53] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[00:18:04] <floatcomplex> if the goal is something like monte carlo analysis or a particle filter then use xorshift64star
[00:18:45] *** Quits: neightchan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[00:21:04] <alch> fyi OP has quit, it's still good advice nonetheless
[00:21:50] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[00:21:53] *** Joins: extern (~archer@141.226.62.146)
[00:22:51] <extern> how to make a library visible to all my directory tree without put it in /usr/include
[00:23:24] <floatcomplex> extern: are you a bot
[00:23:38] <extern> im not a bot
[00:23:58] <extern> what makes you say that im a bot 
[00:24:21] <extern> you know what i don't care what makes you say it 
[00:24:29] *** Joins: Betal (~Betal@user/betal)
[00:24:42] <extern> i just need to know how to make my libraries visible to all directory tree
[00:24:58] <tk> extern: directory trees do not have eyes and therefore cannot see libraries
[00:25:01] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[00:25:15] <strajder> /usr/include contains *headers*, fyi
[00:25:31] <tk> extern: do you mean you want all invocations of your C compiler to include -I/path/to/the/location/of/your/headers ?
[00:26:19] <tk> Are you sure you want this to be a system wide change?
[00:26:27] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:26:38] <tk> any system wide change would still require effectively editing files either in /usr/bin or /usr/lib if not /usr/include
[00:26:39] <extern> not really
[00:27:02] <strajder> man gcc make
[00:27:08] <tk> alternatively, if you want this to be a user-wide change you could define an alias which passes -I/path/to/the/location/of/your/headers
[00:27:29] <tk> if you want this to be a project wide change, put your compiler invocation in a local script, or use a build tool of your choice to pass extra parameters to your compiler
[00:27:35] *** Quits: extern (~archer@141.226.62.146) (Quit: WeeChat 3.3)
[00:27:39] <tk> ...
[00:27:53] <strajder> lol
[00:27:53] <floatcomplex> did they fuck off again
[00:28:13] <tk> these vague questions are a bit annoying
[00:29:11] <floatcomplex> joining twice, asking two unrelated questions each time, and then leaving halfway through the answers -> "are you a bot"
[00:31:42] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:32:15] *** Quits: Telvana (~capo@user/telvana) (Quit: ZNC 1.9.x-git-156-ac57c0e5 - https://znc.in)
[00:34:35] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 264 seconds)
[00:35:34] *** Quits: kadavul (~vazha@103.165.20.164) (Read error: Connection reset by peer)
[00:35:34] *** Quits: k4davul (~vazha@103.165.20.164) (Read error: Connection reset by peer)
[00:35:38] *** Joins: Chip1972 (~Chip1972@186.206.217.247)
[00:37:48] *** Quits: unmanbearpig (~unmanbear@45.76.95.141) (Ping timeout: 260 seconds)
[00:38:42] <sham1> Xorshift is a very nice algo yeah, to go back to that
[00:40:53] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[00:41:06] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[00:42:21] *** Quits: bogdomania (bogdomania@user/bogdomania) (Quit: Konversation terminated!)
[00:43:12] *** Quits: nobody_ (~nobody@host-79-16-187-29.retail.telecomitalia.it) (Remote host closed the connection)
[00:43:23] *** Quits: wehttam (~Android@159.196.24.74) (Read error: Connection reset by peer)
[00:44:22] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[00:44:27] *** Joins: Telvana (~capo@user/telvana)
[00:45:31] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[00:47:22] <rcf> Some of the variants are better depending on application 
[00:47:52] *** Quits: Tenn0 (~Tenn0@88.97.110.231) (Quit: WeeChat 3.3)
[00:48:20] <floatcomplex> xorshift64star seems like a good balance to me
[00:48:54] <floatcomplex> you can generate 64 bits at a time and keep only the most significant 23 or 51 or whatever you need if you are paranoid
[00:49:15] *** Quits: magla (~gelignite@55d4b8af.access.ecotel.net) (Quit: Stay safe!)
[00:49:25] *** Quits: Telvana (~capo@user/telvana) (Quit: ZNC 1.9.x-git-156-ac57c0e5 - https://znc.in)
[00:50:38] *** Quits: ntwk (~ntwk@user/ntwk) (Ping timeout: 260 seconds)
[00:51:07] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:52:17] *** Joins: wehttam (~Android@159.196.24.74)
[00:52:33] *** Quits: jbauer (~jbauer@146.71.11.98) (Remote host closed the connection)
[00:53:17] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[00:55:13] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:56:18] *** Quits: engest (~engest@50.126.101.161) (Read error: Connection reset by peer)
[00:57:12] *** Joins: llh (~llh@user/llh)
[01:00:04] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[01:00:23] *** Joins: Telvana (~capo@user/telvana)
[01:00:44] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Read error: Connection reset by peer)
[01:01:44] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[01:03:25] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Quit: see you tomorrow)
[01:03:55] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:04:42] *** Joins: ntwk (~ntwk@user/ntwk)
[01:11:11] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[01:13:04] *** Joins: engest (~engest@50.126.101.161)
[01:14:29] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[01:19:40] *** Quits: wehttam (~Android@159.196.24.74) (Read error: Connection reset by peer)
[01:20:00] *** Joins: Viewday0 (~Viewday@user/viewday)
[01:20:15] *** Joins: wehttam (~Android@159.196.24.74)
[01:21:26] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[01:21:46] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 245 seconds)
[01:21:46] *** Viewday0 is now known as Viewday
[01:21:52] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:23:17] *** Joins: Crescendo (~Crescendo@user/crescendo)
[01:25:01] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[01:25:21] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[01:26:06] *** Joins: ckdCreations (~ckdCreati@147.55.130.33)
[01:26:39] *** Joins: Klinda (~superleag@user/klinda)
[01:29:06] *** Quits: wehttam (~Android@159.196.24.74) (Read error: Connection reset by peer)
[01:30:20] <nomagno> https://raw.githubusercontent.com/Nomagno/Half-World/master/src/core/msg-c.h
[01:30:38] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[01:30:58] <nomagno> I think I ended up with a pretty clean 100-lines Object-Oriented macro header, right?
[01:31:08] *** Quits: Klinda (~superleag@user/klinda) (Client Quit)
[01:31:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:31:41] <nomagno> (The macros are not clean, this is insane manipulation though I cuadruple-checked and it is defined behaviour in C99, the actual usage should be clean though)
[01:33:19] *** Joins: wehttam (~Android@1.146.25.163)
[01:35:02] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:36:23] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:38:55] *** Quits: AmR (~AmREiSa@41.232.235.167) (Ping timeout: 268 seconds)
[01:39:20] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[01:40:09] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[01:40:56] *** Joins: Crescendo (~Crescendo@user/crescendo)
[01:41:05] *** Joins: Macuser (~Macuser@216.30.159.201)
[01:41:36] *** Quits: wehttam (~Android@1.146.25.163) (Read error: Connection reset by peer)
[01:46:42] *** Joins: wehttam (~Android@1.146.25.163)
[01:46:42] *** Quits: wehttam (~Android@1.146.25.163) (Read error: Connection reset by peer)
[01:51:15] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[01:52:49] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[01:54:19] <nitrix> As clean as a pig can be.
[01:54:41] *** Joins: wehttam (~Android@159.196.24.74)
[01:54:57] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[01:57:15] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[02:01:51] *** Joins: kaichiuchu (~kaichiuch@user/kaichiuchu)
[02:02:09] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[02:03:41] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Client Quit)
[02:04:21] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[02:04:40] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:07:25] *** Quits: Akuli (~Akuli@82-203-161-162.bb.dnainternet.fi) (Quit: Leaving)
[02:07:44] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[02:08:23] *** Joins: alphasierra (~alphasier@49.36.96.61)
[02:08:31] *** Quits: alch (~alch@151.68.40.215) (Ping timeout: 268 seconds)
[02:09:59] *** Joins: wehttam_ (~Android@1.146.25.163)
[02:12:03] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (Quit: quit)
[02:12:20] <nomagno> That doesn't sound very constructive
[02:12:35] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[02:12:55] <nomagno> new nitrix(); ba-dum tssssss;
[02:13:37] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:13:42] *** Quits: wehttam (~Android@159.196.24.74) (Ping timeout: 260 seconds)
[02:15:53] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[02:16:02] *** Joins: khrbt_ (~znc@user/khrbt)
[02:16:08] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:16:20] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:16:38] *** Quits: wehttam_ (~Android@1.146.25.163) (Read error: Connection reset by peer)
[02:16:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:17:11] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 264 seconds)
[02:17:43] *** Joins: wehttam (~Android@1.146.25.163)
[02:18:35] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[02:20:12] *** Quits: juliopcrj (~juliopcrj@177.44.227.40) (Quit: Leaving)
[02:25:14] <vin> Can I mmap a file and access one byte from the mapping? Example char* map = mmap(0, size, READ & SHARED, fd, 0); printf("%c", map[0]); I expect the char in file to be printed
[02:25:20] <vin> Is that correct?
[02:25:27] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[02:26:04] <fizzie> Yes, but `READ & SHARED` looks a little weird when it's the | operator that you *actually* need to use to combine them.
[02:26:46] <fizzie> Er, or rather they're two separate arguments, but you know what I meant.
[02:27:07] *** Joins: cn--j (~cn-j@user/cn-j)
[02:28:46] *** Joins: John99 (~johnny@87.200.94.90.dynamic.jazztel.es)
[02:29:10] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 260 seconds)
[02:29:21] *** Joins: retro_ (~retro@2e41e9c8.skybroadband.com)
[02:29:29] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[02:29:50] <fizzie> ,cc #include <sys/mman.h> #include <fcntl.h> char *prog = mmap(0, 1, 3, 2, open("prog.c", 0), 0); printf("the program starts with a: %c", prog[0]);
[02:29:51] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:8561:d34f:d94b:2b07) (Remote host closed the connection)
[02:29:52] <candide> fizzie: the program starts with a: #
[02:31:56] <vin> Yes fizzie, what does mmap use to rea the data? read? Does it read 4KB blocks on every byte touched?
[02:33:12] *** Quits: pizdets_ (~pizdets@183.182.110.102) (Ping timeout: 250 seconds)
[02:33:47] *** Joins: pizdets (~pizdets@183.182.115.195)
[02:34:16] <fizzie> It doesn't "read" the data, it maps the file to the process's address space.
[02:34:23] <fizzie> How that exactly happens is entirely up to the implementation, but I think typically it uses the exact same mechanism that's used to read the executable's code as well. It almost certainly won't be issuing any `read` system calls, because how could it.
[02:34:59] *** Parts: cn--j (~cn-j@user/cn-j) ()
[02:35:04] *** Joins: gatty (~gatty@2404:4408:4429:bf00:b99f:60e1:4458:b1ca)
[02:35:34] *** Quits: wehttam (~Android@1.146.25.163) (Read error: Connection reset by peer)
[02:36:04] <vin> Any idea what the mechanisim used to read the code in glibc?
[02:36:12] *** Joins: wehttam (~Android@1.146.25.163)
[02:36:25] <fizzie> It's not a mechanism in glibc.
[02:36:39] <fizzie> Memory mappings are an operating system service.
[02:37:20] *** Quits: alphasierra (~alphasier@49.36.96.61) (Remote host closed the connection)
[02:38:20] <vin> So on page fault the kernel should still issue a read to fetch the page correct?
[02:38:49] <fizzie> Well, yes, it needs to load a page from the backing file to memory. But that's not in glibc.
[02:39:51] *** Quits: wehttam (~Android@1.146.25.163) (Read error: Connection reset by peer)
[02:40:12] <vin> Yes, so when I do map[0] linux reads 4096B from disk to memory?
[02:40:14] *** Joins: wehttam (~Android@1.146.25.163)
[02:41:15] <edk> at least
[02:41:22] <edk> but it almost certainly does that if you read a byte any other way
[02:41:23] <fizzie> Possibly. Or it might have anticipated that. From the programmer's perspective, it's not visible when exactly that happens.
[02:41:39] <vin> Right
[02:41:41] <edk> it'd be a pretty crummy OS that didn't read ahead
[02:41:57] *** Joins: alphasierra (~alphasier@49.36.96.61)
[02:42:16] <nomagno> Lemme check POSIX, sec
[02:42:17] <vin> Any other mechanisim, read/fread will also have to load atleast 4KB
[02:43:11] <fizzie> The main difference between doing it with a `char c; read(fd, &c, 1)` call is probably that, while it almost certainly does read more than a byte from disk, it will only copy 1 byte into the memory of the userspace program, namely the byte allocated to the object `c`.
[02:43:50] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[02:44:24] <nomagno> POSIX does not require reading ahead
[02:44:42] <nomagno> Time to make POSIX-compliant CrummyOS then!
[02:44:45] <edk> how could it? it's an implementation detail
[02:45:09] <nomagno> edk: I was checking if it is defined or not
[02:46:36] <fizzie> There's a Linux-specific MAP_POPULATE flag that will tell it to try to pre-populate all the pages as part of the mapping. And the madvise / posix_madvise mechanisms to provide hints as to how you're planning to use an area of memory, that might affect in when it decides to load pages from the disk.
[02:47:08] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[02:48:37] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[02:49:26] *** Quits: sebbu (~sebbu@user/sebbu) (Quit: restart)
[02:52:35] *** Joins: ferdna (~ferdna@user/ferdna)
[02:53:26] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[02:53:34] *** Quits: John99 (~johnny@87.200.94.90.dynamic.jazztel.es) (Remote host closed the connection)
[02:54:08] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[02:54:53] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:55:43] *** Quits: alphasierra (~alphasier@49.36.96.61) (Remote host closed the connection)
[02:56:40] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[02:57:20] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[02:59:02] *** Quits: wehttam (~Android@1.146.25.163) (Ping timeout: 260 seconds)
[03:00:23] *** Quits: puke (~puke@user/puke) (Quit: puke)
[03:00:55] <vin> so perfromance wise it does not matter if mmap or read right
[03:01:55] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:02:59] *** Joins: quartz (~quartz@user/quartz)
[03:04:41] <fizzie> It can certainly make a difference, depending on what exactly you're doing. I mean, if you're planning to process a file of non-trivial size one byte at a time, there's almost certainly a big performance difference between doing a single mmap call and then looking at each of the bytes vs. calling `read` individually for each byte, just for system call overhead reasons.
[03:07:05] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:07:29] *** Joins: jim__ (~jim@182.253.75.235)
[03:07:34] <fizzie> As for calling `fgetc` for each byte, probably less so, due to buffering done in the C stdio streams, but then it becomes a question on whether those functions are doing some unnecessary locking to be thread-safe and so on. But you can't really have generic answers to performance questions, you can just profile specific circumstances.
[03:07:40] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:07:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:07:41] *** Joins: wroathe (~wroathe@user/wroathe)
[03:07:41] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:08:46] *** jim__ is now known as bereft
[03:08:58] *** Joins: Raguile (~Raguile@user/raguile)
[03:10:36] <bereft> hello. i am trying to use epoll to watch a process opened in popen.  it's actually remarkably hard to find some sample code for 'popen cat`
[03:10:52] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[03:15:02] <bereft> i havea  situation where epoll is confused about which FD's i am interested in and it waits for stdin to signal a read before the popen FD triggers epoll
[03:17:41] *** Joins: wehttam (~Android@159.196.24.74)
[03:18:49] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[03:19:16] *** Joins: Crescendo (~Crescendo@user/crescendo)
[03:19:40] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:19:58] *** Quits: eblip (~eb0t@90.194.37.155) (Read error: Connection reset by peer)
[03:20:15] *** Quits: Aighearach (~paris@user/aighearach) (Remote host closed the connection)
[03:21:58] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[03:22:11] *** Joins: Crescendo (~Crescendo@user/crescendo)
[03:24:07] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[03:25:07] <bereft> this is what i have thus far.   sort of whackamole https://gist.github.com/jnorthrup/9544f7828d26e59707cfea07ab294d1d
[03:25:42] *** Joins: eblip (~eb0t@90.202.252.138)
[03:26:50] *** Quits: X-Scale (~ARM@46.50.2.72) (Ping timeout: 268 seconds)
[03:28:14] *** X-Scale` is now known as X-Scale
[03:29:29] *** Joins: sebbu (~sebbu@user/sebbu)
[03:31:06] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com)
[03:32:46] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Quit: leaving)
[03:33:34] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[03:34:10] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[03:39:10] *** Quits: ntwk (~ntwk@user/ntwk) (Ping timeout: 260 seconds)
[03:41:02] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 268 seconds)
[03:41:51] *** Quits: wo0f (~wo0f@user/wo0f) (Remote host closed the connection)
[03:42:09] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:42:20] *** Joins: wo0f (~wo0f@vps-7f6eecbb.vps.ovh.net)
[03:42:20] *** Quits: wo0f (~wo0f@vps-7f6eecbb.vps.ovh.net) (Changing host)
[03:42:21] *** Joins: wo0f (~wo0f@user/wo0f)
[03:47:31] <Bou> bereft: the first iteration goes into if (running==1) and changes running to 2, that's meant to run once to add the filedescriptor
[03:48:06] <Bou> but it doesn't have a `continue` so it tries to read from it in the same loop
[03:48:53] <bereft> Bou: as mentioned this is whackamole i had the popen as the sole descriptor before that int running hack
[03:49:28] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:49:46] <bereft> it behaves differently with different external and popen stream.  if i do a.out </dev/null i get instant rejectin from epoll under all circumstances
[03:51:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[03:51:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:53:19] *** Joins: ntwk (~ntwk@user/ntwk)
[03:55:05] <bereft> $ ./a.out </dev/null ; Failed to add file descriptor to epoll_loop
[03:55:28] *** Quits: zacts (~zacts@user/zacts) (Quit: leaving)
[03:55:44] *** Joins: zacts (~zacts@user/zacts)
[03:55:45] <fizzie> I mean, you're right that it's a bit of a mess (what's with that commented-out code that causes the initial EPOLL_CTL_ADD to get a not fully initialized `struct epoll_event` argument?), maybe it's time to come up with a more minimal example.
[03:57:03] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[03:58:28] <vin> is EOF comparison a good check to see if you are at the end of a file?
[03:58:31] *** Quits: sdfgsdfg (sdfgsdfg@user/sdfgsdfg) (Quit: BNC by #bnc4you)
[03:58:39] *** Joins: Wulf (~Wulf@user/wulf)
[03:58:45] <bereft> yeah agreed, this is just where the smooth sailing hit a snag 
[03:58:59] <fizzie> Maybe one of those cases where strace might give you something too.
[03:59:01] <vin> example char c; while(c != EOF) // do work
[03:59:14] <fizzie> Definitely not with a `char c`.
[03:59:40] <Bou> or with any uninitialized variable
[03:59:55] <fizzie> The canonical fgetc-style loop of `int c; while ((c = fgetc(stdin)) != EOF) // do work` is a reasonable pattern though, as long as it's `int c`.
[04:00:17] <fizzie> (Doesn't differentiate between an end-of-file and an error condition in case you want to be fancy.)
[04:01:45] *** Quits: wehttam (~Android@159.196.24.74) (Read error: Connection reset by peer)
[04:03:47] <vin> Yes, so a byte wise map comparision with EOF should work. Ex: int j=0; while(map[j] != EOF) // do work; j++;
[04:04:15] <fizzie> No, that won't work at all, assuming `map` is a pointer to a mmap'd file.
[04:04:32] <vin> why not fizzie ?
[04:04:42] <fizzie> EOF is a special value used by certain functions to communicate an end-of-file or an error condition, not an actual byte that exists in a file.
[04:05:32] <vin> Ah, so I will need to iterate with the help of file size rather than checking for EOF?
[04:06:26] <fizzie> And there's a fundamental problem with any `c != EOF` where `c` is a character type: if your platform's plain `char` type is unsigned, that's guaranteed to never be true [*1]; and if it's a signed one, depending on what the platform has chosen for EOF, it's either also never true, or else there's a valid `char` value that might be present in a file but still compares equal to EOF.
[04:07:02] <fizzie> Yes, you'll need to know the amount of bytes you mapped.
[04:07:20] <vin> I see, that's why I didn't get any warnings
[04:08:14] <fizzie> (The [*1] footnote there is for a situation too ridiculous to contemplate.)
[04:11:31] *** Joins: jbauer (~jbauer@146.71.11.98)
[04:14:35] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[04:16:26] *** Quits: random-nick (~random-ni@87.116.177.136) (Ping timeout: 260 seconds)
[04:18:39] <bereft> https://gist.github.com/jnorthrup/9544f7828d26e59707cfea07ab294d1d is updated with the  fewest lines of code to do the wrong thing onw.
[04:18:41] <candide> Title of bereft's link: library.c · GitHub
[04:20:31] <floatcomplex> i like do-while loops for looping until an eof-like condition because they provide a place for code that happens before input, code that happens after the first input, code that happens on every input including the first one, and code that happens after the final input
[04:21:10] <floatcomplex> so if there's some secondary init that needs to happen once the first input has arrived, the values thus computed can still be const-correct
[04:23:56] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[04:25:18] *** Quits: zwr (~zwr@2804:d45:b966:fb00:fafc:e229:eaa8:5125) (Ping timeout: 260 seconds)
[04:25:58] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com)
[04:26:07] *** Joins: zwr (~zwr@2804:d45:b966:fb00:b936:89b6:abed:5ca)
[04:26:45] <fizzie> bereft: Oh... why does your call `epoll_ctl(epoll_fd, EPOLL_CTL_ADD, 0, &event)` pass 0 as the third (target file descriptor) argument? 
[04:27:50] *** Quits: Albright (~Albright@2001:19f0:8001:ca4:1b5c:1bd6:918c:5122) (Quit: ZNC 1.8.2 - https://znc.in)
[04:27:53] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[04:27:58] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[04:28:03] *** Joins: Albright (~Albright@2001:19f0:8001:ca4:4d0e:ce74:c79b:d28a)
[04:28:21] <floatcomplex> also maybe this was already discussed but what's wrong with regular poll()
[04:28:28] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com) (Client Quit)
[04:31:46] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[04:32:24] <fizzie> AIUI `event.data` (including `event.data.fd`) is just a user data field (a union with a few useful types) and doesn't actually control which file descriptor is being monitored.
[04:32:38] <fizzie> I'm a big fan of regular poll, I just didn't want to question that part. :)
[04:38:05] <floatcomplex> it's not e-enough
[04:38:25] <bereft> ill have to re-read that man page for the nth time to see what that third parm 0 is.  this looks like stdin is being polled before the popen call actually launches the process.  https://gist.github.com/jnorthrup/323a7751c6c7cd69f900053331d6f94a
[04:38:26] <candide> Title of bereft's link: a.out.strace · GitHub
[04:38:47] *** Quits: larry87 (~quassel@98.40.245.193) (Ping timeout: 264 seconds)
[04:38:51] *** Joins: wehttam (~Android@159.196.24.74)
[04:39:43] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:957a:697d:c4c6:fc71)
[04:41:52] <bereft> im a big fan of select tbh but when I saw a random medium post showing bazillions of select and poll cpu overheads and epoll almost unmoving i figured this is the right one to get right first.  and figure out OSX later. 
[04:42:30] <floatcomplex> bereft: not every program needs to solve the c10k problem
[04:42:39] <floatcomplex> or the c10M problem or whatever it's called these days
[04:42:53] <floatcomplex> conversely, *every* program should aim to be debuggable by other regular humans
[04:43:28] <floatcomplex> and using a framework that is more complicated than one that nicely solves your problem counts as unnecessary complexity
[04:43:30] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com)
[04:43:58] <bereft> im actually porting a socket FSM out of kotlin jvm to kotlin/native but i wanted to see how many asio birds i can kill with one stone first
[04:45:03] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[04:45:10] <bereft> it *is* working, it just does something i don't yet expect first.  
[04:48:34] *** Joins: loganlee (~Thunderbi@user/loganlee)
[04:49:28] <fizzie> The third parameter is the observed file descriptor, so passing 0 would tell it to watch stdin.
[04:50:20] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[04:50:36] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[04:50:37] <quartz> Sorry to keep bothering everyone about this, but when I run this program https://bpa.st/6G7Q  using valgrind, I get these error messages: https://bpa.st/NUQA . Essentially, line 34, 39, and 40 all have issues. I can't understand why, because I believe I allocated enough space using malloc for the struct MdbRec which contains char name[16]; char msg[24];
[04:50:48] <bereft> yeah that wasn't a flag it was an FD despite the &event violationof DRY
[04:51:45] <quartz> This is my api: https://bpa.st/ET4Q
[04:52:02] <fizzie> It's not a mandatory DRY violation, what you put in the event doesn't have to be the file descriptor.
[04:52:08] <nitrix> quartz, Where did you allocate the storage needed for entry->msg?
[04:52:27] <quartz> nitrix: Uhhhh
[04:52:40] <floatcomplex> quartz: strncpy(entry->msg, str + 16, 38); 
[04:53:02] <floatcomplex> that requires that the malloc be at least 16 + 38 bytes long
[04:53:03] <floatcomplex> not 40
[04:53:29] <fizzie> I feel like I definitely mentioned that last time.
[04:53:46] <quartz> floatcomplex: I thought that line meant it would begin copying at position 16 to 38
[04:53:54] <quartz> fizzie: Yeah I thought you did too :) I thought I fixed it
[04:54:14] <floatcomplex> quartz: it means copy up to 38 bytes starting 16 bytes into that allocation
[04:54:18] <floatcomplex> and the allocation is 40 bytes long
[04:54:42] <quartz> Uhhh :(
[04:55:00] <quartz> I'm going to look up strncpy again.
[04:55:10] <fizzie> It couldn't really be the end position, because strncpy is never told where the beginning of str is.
[04:55:39] *** Quits: zwr (~zwr@2804:d45:b966:fb00:b936:89b6:abed:5ca) (Ping timeout: 268 seconds)
[04:55:46] <fizzie> If you're just given the pointer str+16 and the integer 38, there's no way you can tell the first pointer is at an offset of 16.
[04:55:47] <floatcomplex> quartz: does your man page for strncpy contain an all-caps admonishment not to use strncpy?
[04:56:06] <nitrix> quartz, You allocated `struct MdbRec`, does that contains an array in its definition, or maybe a flexible-array member? Or is the `msg` member a simple `char *`?
[04:56:13] <quartz> floatcomplex: I usually just use google to look up these functions :)
[04:56:54] <floatcomplex> google needs to probably add that admonishment too
[04:56:55] <quartz> nitrix: struct MdbRec only contains char name[16] and char msg[24]
[04:57:00] <quartz> No pointers 
[04:57:28] <quartz> fizzie: Yeah sorry I'm bad at this :(
[04:57:40] <quartz> I dunno why I make such stupid errors
[04:57:58] <quartz> Makes me wonder if I was ever cut out to do this type of work haha
[04:58:17] <floatcomplex> not this agin
[04:58:49] <quartz> SOrry
[04:59:06] <floatcomplex> quartz: your code mostly works, and you have shown more than the usual amount of initiative at getting it working. your questions are just particularly good at nerd-sniping
[04:59:15] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[04:59:24] <nitrix> I see. Then you can disregard what I pointed out and only focus on the incorrect src/n parameters.
[04:59:25] <quartz> floatcomplex: nerd-sniping?
[04:59:28] <floatcomplex> and your professor is an idiot
[04:59:46] <quartz> floatcomplex: lol yes you've pointed that out several times :)
[05:00:18] <quartz> nitrix: OK thank you
[05:01:22] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[05:02:11] <nitrix> The code reads very easily and quartz is making definitive progress learning this new skill so the professor might not that incompetent.
[05:03:16] <nitrix> May have to do with just him putting in the work than the actual material thought though.
[05:03:17] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[05:04:35] <quartz> It's a challanging course, C is a bit brutal compared with other langauges.
[05:04:40] <quartz> But I"m sure everyone here knows that
[05:04:53] <nitrix> It forges character.
[05:05:27] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Read error: No route to host)
[05:05:42] <nitrix> "It's character building" if you prefer the C string joke.
[05:05:49] *** Joins: retroid_ (~retro@2e41e9c8.skybroadband.com)
[05:07:22] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 260 seconds)
[05:07:53] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[05:08:35] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 268 seconds)
[05:09:12] *** Quits: retro_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[05:12:02] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 260 seconds)
[05:12:23] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:12:33] *** Joins: soapsudsxx (~soapsudsx@209.221.40.144)
[05:12:52] <quartz> nitrix: Never heard that one, it's a good dad joke
[05:16:15] *** Joins: The_Jag_ (~The_Jag@host-79-52-47-230.retail.telecomitalia.it)
[05:16:52] *** Quits: Pentode (~Pentode@mobile-166-171-57-43.mycingular.net) (Killed (ozone (No Spam)))
[05:17:35] *** Quits: tempora (~tempus@user/tempora) (Quit: Bouncing away)
[05:17:39] *** Joins: tempus_fol (~tempus@user/tempora)
[05:17:51] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[05:18:58] *** Quits: The_Jag (~The_Jag@host-79-52-47-230.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[05:19:41] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:19:54] *** Quits: jonathanclarke (~jonathanc@202.51.76.91) (Ping timeout: 260 seconds)
[05:20:55] *** Quits: wo0f (~wo0f@user/wo0f) (Remote host closed the connection)
[05:21:37] *** Joins: wo0f (~wo0f@vps-7f6eecbb.vps.ovh.net)
[05:21:38] *** Quits: wo0f (~wo0f@vps-7f6eecbb.vps.ovh.net) (Changing host)
[05:21:38] *** Joins: wo0f (~wo0f@user/wo0f)
[05:25:42] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:25:57] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[05:28:21] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Read error: Connection reset by peer)
[05:28:32] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[05:30:41] *** Joins: sipu (~sipu@2001:da8:a800:7807:917a:e8c4:fb39:e526)
[05:30:58] *** Quits: sipu (~sipu@2001:da8:a800:7807:917a:e8c4:fb39:e526) (Remote host closed the connection)
[05:31:06] *** Joins: sipu (~sipu@2001:da8:a800:7807:917a:e8c4:fb39:e526)
[05:31:33] *** Quits: sipu (~sipu@2001:da8:a800:7807:917a:e8c4:fb39:e526) (Remote host closed the connection)
[05:32:03] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:32:05] *** Joins: jonathanclarke (~jonathanc@202.51.76.91)
[05:33:27] *** Joins: X-Scale` (~ARM@46.50.0.1)
[05:33:29] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[05:33:39] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[05:34:31] *** Joins: emanuele6 (~emanuele6@net-2-36-98-113.cust.vodafonedsl.it)
[05:34:51] *** Quits: emanuele6 (~emanuele6@net-2-36-98-113.cust.vodafonedsl.it) (Changing host)
[05:34:51] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[05:35:03] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (calcium.libera.chat (Nickname regained by services)))
[05:35:03] *** vinleod is now known as vdamewood
[05:35:06] *** Quits: wo0f (~wo0f@user/wo0f) (Remote host closed the connection)
[05:35:44] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 268 seconds)
[05:35:48] *** Joins: wo0f (~wo0f@vps-7f6eecbb.vps.ovh.net)
[05:35:49] *** Quits: wo0f (~wo0f@vps-7f6eecbb.vps.ovh.net) (Changing host)
[05:35:49] *** Joins: wo0f (~wo0f@user/wo0f)
[05:36:20] *** Joins: frost (~frost@user/frost)
[05:37:11] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:37:55] *** X-Scale` is now known as X-Scale
[05:38:49] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 268 seconds)
[05:39:08] *** Joins: itsjoints (~itsjoints@2001:470:69fc:105::1:29f4)
[05:43:08] *** Joins: hinata (~hinata@2402:8100:2331:b2e6:95d0:faa6:ccc2:4b67)
[05:44:21] *** Quits: mahmutov (~mahmutov@176.30.172.0) (Ping timeout: 268 seconds)
[05:45:32] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[05:47:26] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 268 seconds)
[05:49:54] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 268 seconds)
[05:50:24] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[05:51:09] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[05:51:48] *** Joins: brettgilio (~brettgili@x-node.gq)
[05:53:09] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[05:53:34] *** Joins: jnip (~jnip@node-1w7jr9yfylvne4my6nh25vn80.ipv6.telus.net)
[05:53:58] <katnis> idgi
[05:56:34] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[05:58:47] <vin> Is there a way to get file correct size of a file created from fallocate (a file that is sparse)? stat returns total size
[06:01:18] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[06:01:34] <vin> like du in C
[06:03:02] *** Joins: alphasierra (~alphasier@2405:201:e:4d:9f02:dbb3:fb6b:643f)
[06:03:52] *** Quits: alphasierra (~alphasier@2405:201:e:4d:9f02:dbb3:fb6b:643f) (Remote host closed the connection)
[06:06:29] <floatcomplex> vin: https://github.com/landley/toybox/blob/master/toys/posix/du.c
[06:07:40] <floatcomplex> actually maybe don't read this
[06:08:08] *** Joins: larry87 (~quassel@98.40.245.193)
[06:09:22] *** Quits: hinata (~hinata@2402:8100:2331:b2e6:95d0:faa6:ccc2:4b67) (Ping timeout: 260 seconds)
[06:09:22] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 260 seconds)
[06:10:11] <rcf> vin: sparse files are not standardized in POSIX, so it will be platform-specific. On Linux, anyway, plain old stat() works just fine -- st_blocks is the number of 512 byte blocks that are actually allocated, st_size is the full size in bytes. 
[06:11:16] <floatcomplex> yeah that's the takeaway i was going for in linking to an actual du implementation but this isn't very illuminating
[06:12:53] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:13:19] *** Joins: sdfgsdfg (sdfgsdfg@user/sdfgsdfg)
[06:13:48] *** Quits: celphi (sid97751@user/celphi) (Quit: Updating details, brb)
[06:13:57] *** Joins: celphi (sid97751@user/celphi)
[06:16:04] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[06:17:16] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[06:18:45] *** Joins: The_Jag (~The_Jag@host-79-33-167-46.retail.telecomitalia.it)
[06:21:58] *** Quits: The_Jag_ (~The_Jag@host-79-52-47-230.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[06:22:20] <vin> rcf: So if I fallocate 50M of a file, both ls -lh and du -sh show the same size. Is this because of the filesystem?
[06:22:37] <vin> Also thanks for the st_blocks, I will try that
[06:24:24] <vin> ah maybe because I am using -x flag to make it POSIX compliant!
[06:24:38] <rcf> vin: the filesystem must actually support sparse files, yes. 
[06:26:11] *** Joins: begriffs (~begriffs@user/begriffs)
[06:27:47] <vin> Weird I am on ext4 and fallocate without -x gives bad allocation
[06:30:54] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[06:31:23] <rcf> Being on ext4 itself can be misleading, as sparse file support is just another feature than can be enabled or disabled 
[06:33:04] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 268 seconds)
[06:34:08] *** Quits: wehttam (~Android@159.196.24.74) (Quit: -a- Connection Timed Out)
[06:34:40] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[06:34:59] *** Joins: karakedi (~eAC53C340@user/karakedi)
[06:35:06] *** Joins: kts (~kts@103.73.237.54)
[06:37:02] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: Connection reset by beer)
[06:37:14] *** Joins: dme2 (~dme2@67.205.140.199)
[06:37:35] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:37:35] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606)
[06:38:49] *** Joins: wehttam (~Android@159.196.24.74)
[06:44:45] *** Quits: engest (~engest@50.126.101.161) (Quit: Leaving)
[06:49:02] *** Quits: soapsudsxx (~soapsudsx@209.221.40.144) (Remote host closed the connection)
[06:49:18] *** Joins: mendel_munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[06:50:36] *** Joins: AmR (~AmREiSa@41.232.235.167)
[06:51:02] *** Quits: larry87 (~quassel@98.40.245.193) (Remote host closed the connection)
[06:51:34] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Ping timeout: 268 seconds)
[06:52:36] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:58] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[06:56:33] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:57:03] *** Joins: supernova (~quassel@2405:9800:ba11:6207:c2d5:8022:5655:db60)
[07:00:14] *** Quits: rcf (rcf@iceland.sdf.org) (Quit: WeeChat 3.2.1)
[07:04:25] *** Quits: wehttam (~Android@159.196.24.74) (Read error: Connection reset by peer)
[07:05:22] *** Quits: supernova (~quassel@2405:9800:ba11:6207:c2d5:8022:5655:db60) (Ping timeout: 260 seconds)
[07:05:40] *** Joins: wehttam (~Android@159.196.24.74)
[07:10:02] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[07:11:07] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Remote host closed the connection)
[07:12:26] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[07:13:53] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:15d8:4d84:771:818)
[07:14:33] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:15:05] *** Joins: supernova (~quassel@2405:9800:ba11:6207:d905:cfb3:917b:115a)
[07:15:10] *** Joins: rcf (~rcf@mab.sdf.org)
[07:20:05] *** Joins: seninha (~seninha@user/seninha)
[07:21:41] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[07:24:30] *** Joins: wehttam_ (~Android@1.146.58.55)
[07:25:29] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[07:27:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[07:28:35] *** Quits: wehttam (~Android@159.196.24.74) (Ping timeout: 268 seconds)
[07:30:10] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[07:32:11] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:35:21] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:39:25] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[07:39:52] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[07:40:03] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[07:41:20] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[07:44:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:44:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:44:00] *** Joins: wroathe (~wroathe@user/wroathe)
[07:45:09] *** Joins: mahmutov (~mahmutov@176.30.172.0)
[07:46:15] *** Joins: l0w1 (~l0w1@2600:1000:b144:b47f:d793:eb54:478b:298)
[07:48:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[07:54:04] *** Quits: l0w1 (~l0w1@2600:1000:b144:b47f:d793:eb54:478b:298) (Quit: Leaving)
[07:55:29] *** Joins: rsjw (~rob@pool-173-66-166-55.washdc.fios.verizon.net)
[07:56:17] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[07:57:12] *** Joins: Famine (~Famine@user/famine)
[07:58:22] *** Joins: Famine- (~Famine@user/famine)
[08:01:52] *** Quits: Famine (~Famine@user/famine) (Ping timeout: 268 seconds)
[08:02:04] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:02:35] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[08:03:09] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:06:37] *** Joins: engest (~engest@50.126.101.161)
[08:09:18] *** Quits: supernova (~quassel@2405:9800:ba11:6207:d905:cfb3:917b:115a) (Ping timeout: 260 seconds)
[08:11:08] *** Quits: mahmutov (~mahmutov@176.30.172.0) (Ping timeout: 268 seconds)
[08:13:30] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 260 seconds)
[08:14:31] *** Joins: supernova (~quassel@2405:9800:ba11:6207:f92f:ed3:2fbd:3843)
[08:17:58] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[08:18:21] *** Quits: gce108 (~gce@user/gce108) (Remote host closed the connection)
[08:19:22] *** Joins: gce108 (~gce@user/gce108)
[08:20:48] *** Joins: movingtxt (~movingtxt@user/movingtxt)
[08:22:12] *** Quits: wehttam_ (~Android@1.146.58.55) (Read error: Connection reset by peer)
[08:22:42] *** Joins: wehttam (~Android@1.146.63.31)
[08:26:00] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[08:29:39] *** Quits: rsjw (~rob@pool-173-66-166-55.washdc.fios.verizon.net) (Quit: leaving)
[08:29:50] *** Quits: supernova (~quassel@2405:9800:ba11:6207:f92f:ed3:2fbd:3843) (Ping timeout: 260 seconds)
[08:32:06] *** repmovsb[m] is now known as wfi[m]
[08:33:18] *** Joins: larry87 (~quassel@98.40.245.193)
[08:34:49] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:34:50] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[08:35:20] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:38:51] *** Quits: wehttam (~Android@1.146.63.31) (Read error: Connection reset by peer)
[08:39:20] *** Joins: wehttam (~Android@1.146.63.31)
[08:40:10] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[08:40:22] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[08:40:43] *** Quits: engest (~engest@50.126.101.161) (Ping timeout: 268 seconds)
[08:40:50] *** Quits: wehttam (~Android@1.146.63.31) (Read error: Connection reset by peer)
[08:41:05] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[08:41:05] *** vinleod is now known as vdamewood
[08:41:49] *** Joins: wehttam (~Android@1.146.63.31)
[08:43:17] *** Quits: vin (~vin@user/crash) (Remote host closed the connection)
[08:43:58] *** Quits: wehttam (~Android@1.146.63.31) (Read error: Connection reset by peer)
[08:44:47] *** Quits: coruja (~coruja@user/coruja) (Quit: ZNC 1.8.2 - https://znc.in)
[08:46:04] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[08:46:12] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[08:50:44] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Quit: Connection closed)
[08:51:41] *** Joins: coruja (~coruja@user/coruja)
[08:54:34] *** Quits: cust (amaama@blackbox.amaama.org) (Ping timeout: 260 seconds)
[08:56:29] *** Joins: cust (amaama@blackbox.amaama.org)
[09:01:46] *** Quits: fmac (bf93f83905@chat.sr.ht) (Ping timeout: 245 seconds)
[09:02:12] *** Joins: fmac (bf93f83905@2604:bf00:710:0:5054:ff:feea:5006)
[09:03:12] *** Quits: tinyweasel (~weasel@vps-947c96bd.vps.ovh.ca) (Quit: quit)
[09:03:31] *** Quits: Chip1972 (~Chip1972@186.206.217.247) (Remote host closed the connection)
[09:04:48] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[09:14:14] *** Joins: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:449b:b9b6:694c:302)
[09:15:29] *** Parts: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:449b:b9b6:694c:302) ()
[09:16:29] *** sirdidym1s is now known as sirdidymus
[09:17:43] *** Quits: reset (~reset@user/reset) (Quit: reset)
[09:18:22] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[09:22:40] *** Joins: wehttam (~Android@1.146.63.31)
[09:23:24] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:24:26] *** Quits: wehttam (~Android@1.146.63.31) (Read error: Connection reset by peer)
[09:26:28] *** Joins: wehttam (~Android@1.146.63.31)
[09:31:43] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:31:58] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[09:34:23] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[09:34:59] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606) (Ping timeout: 268 seconds)
[09:38:49] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[09:43:11] *** Joins: wehttam_ (~Android@159.196.24.74)
[09:44:28] *** Joins: wehttam__ (~Android@1.146.63.31)
[09:44:50] *** Quits: wehttam (~Android@1.146.63.31) (Read error: Connection reset by peer)
[09:46:25] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[09:46:42] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[09:46:49] *** Quits: wehttam__ (~Android@1.146.63.31) (Client Quit)
[09:46:54] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[09:47:50] *** Quits: wehttam_ (~Android@159.196.24.74) (Ping timeout: 260 seconds)
[09:56:13] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[09:58:30] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[10:02:04] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[10:07:43] *** Joins: puke (~puke@user/puke)
[10:10:46] *** Quits: The_Jag (~The_Jag@host-79-33-167-46.retail.telecomitalia.it) (Quit: The_Jag)
[10:15:40] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[10:16:27] *** Joins: missogra (~missogra@dynamic-077-008-237-118.77.8.pool.telefonica.de)
[10:17:33] *** Quits: missogra (~missogra@dynamic-077-008-237-118.77.8.pool.telefonica.de) (Client Quit)
[10:21:28] *** Joins: defefe (~defefe@178.49.152.42)
[10:22:13] <defefe> what format of data scanf expects with "%08X%08X"?
[10:28:54] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[10:33:14] <dave0> hex digits
[10:33:48] <dave0> i think the 0 makes no difference in scanf but i'd have to look it up
[10:35:32] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:35:41] <dave0> ,cc char *s="1234abcd5678abcd"; unsigned int a, b; if(sscanf(s, "%08X%08X", &a, &b) == 2) { printf("a=%u b=%u ", a, b); }
[10:35:44] <candide> dave0: a=305441741 b=1450748877
[10:36:21] <dave0> ,cc printf("%x %x ", 305441741, 1450748877);
[10:36:23] <candide> dave0: 1234abcd 5678abcd
[10:36:50] *** Joins: jetchisel (jetchisel@user/jetchisel)
[10:38:42] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:48:53] *** Quits: jnip (~jnip@node-1w7jr9yfylvne4my6nh25vn80.ipv6.telus.net) (Quit: WeeChat 3.3)
[10:55:14] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:55:32] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[10:57:50] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:00:06] *** Joins: hinata (~hinata@2402:8100:30a9:66a1:95d0:faa6:ccc2:4b67)
[11:01:40] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[11:02:28] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (calcium.libera.chat (Nickname regained by services)))
[11:02:28] *** vinleod is now known as vdamewood
[11:02:34] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Ping timeout: 268 seconds)
[11:04:09] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[11:05:26] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[11:05:47] *** Joins: doppel (~chatzilla@ip70-170-24-52.lv.lv.cox.net)
[11:06:41] *** Quits: Red (~Red@97.109-247-81.customer.lyse.net) (Ping timeout: 264 seconds)
[11:07:24] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 260 seconds)
[11:07:24] *** Joins: supernova (~quassel@2405:9800:ba11:6207:ce0:5a39:5c7e:1654)
[11:07:43] * doppel is relieved he can still find his irc chat logs
[11:10:35] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[11:11:04] *** Quits: KevinX_ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[11:11:35] *** Quits: doppel (~chatzilla@ip70-170-24-52.lv.lv.cox.net) (Quit: ChatZilla 0.9.93 [Firefox 56.0.2/20171024165158])
[11:11:48] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606)
[11:14:25] *** Joins: KevinX_ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[11:16:20] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:20:24] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[11:20:27] *** Quits: machinehum (~machinehu@45.131.194.55) (Ping timeout: 268 seconds)
[11:20:29] *** Quits: supernova (~quassel@2405:9800:ba11:6207:ce0:5a39:5c7e:1654) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:20:47] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[11:21:16] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:22:07] *** Joins: machinehum (~machinehu@45.131.194.253)
[11:25:59] *** Quits: rahl (~rahl@102.114.83.255) (Ping timeout: 268 seconds)
[11:27:38] *** Joins: mrig (~AdiIRC@user/mrig)
[11:27:46] *** Joins: rahl (~rahl@102.114.118.169)
[11:28:19] *** Joins: Xatenev (~xatenev@2a02:8108:9640:74d4:70aa:4621:c692:821e)
[11:29:08] *** Parts: Xatenev (~xatenev@2a02:8108:9640:74d4:70aa:4621:c692:821e) ()
[11:29:44] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[11:31:02] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:15d8:4d84:771:818) (Quit: Leaving)
[11:31:10] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:34:25] *** Joins: beta75 (~beta75@2409:8a34:46c:5830:ed1f:e7c0:e200:1095)
[11:40:38] *** Joins: Klinda (~superleag@user/klinda)
[11:40:55] *** Quits: beta75 (~beta75@2409:8a34:46c:5830:ed1f:e7c0:e200:1095) (Remote host closed the connection)
[11:41:45] *** Joins: beta75 (~beta75@2409:8a34:46c:5830:ed1f:e7c0:e200:1095)
[11:42:28] *** Joins: aradesh (~aradesh@user/aradesh)
[11:42:48] *** Joins: Red (~Red@97.109-247-81.customer.lyse.net)
[11:45:06] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[11:45:47] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr)
[11:49:07] *** Quits: defefe (~defefe@178.49.152.42) (Quit: Client closed)
[11:51:16] *** Quits: hinata (~hinata@2402:8100:30a9:66a1:95d0:faa6:ccc2:4b67) (Ping timeout: 268 seconds)
[11:51:48] *** Joins: hinata (~hinata@2402:8100:30ac:8ef4:95d0:faa6:ccc2:4b67)
[11:52:22] *** Joins: Rounin (~david@84.212.130.215)
[11:57:48] *** Joins: pulse (~pulse@user/pulse)
[11:58:48] *** Joins: thing_ (~thing@user/thing)
[12:00:03] *** Quits: thing (~thing@user/thing) (Ping timeout: 276 seconds)
[12:00:27] *** thing_ is now known as thing
[12:02:04] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:622a:e364:8d82:505a)
[12:02:43] *** Quits: wwilly (~wwilly@217.140.99.251) (Quit: Leaving)
[12:04:30] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 260 seconds)
[12:05:08] *** Joins: John99 (~johnny@87.200.94.90.dynamic.jazztel.es)
[12:06:34] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[12:07:18] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[12:08:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:10:05] *** Quits: KevinX_ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Read error: Connection reset by peer)
[12:10:37] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[12:17:00] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[12:17:27] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[12:17:46] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:24:56] *** Joins: p_____ (~dyeplexer@user/dyeplexer)
[12:25:14] *** Quits: p_____ (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[12:28:17] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 268 seconds)
[12:28:41] *** Joins: The_Jag (~The_Jag@host-62-110-17-18.business.telecomitalia.it)
[12:29:11] *** Quits: hinata (~hinata@2402:8100:30ac:8ef4:95d0:faa6:ccc2:4b67) (Ping timeout: 264 seconds)
[12:29:42] *** Joins: extern (~archer@141.226.62.146)
[12:30:23] <extern> i have a small library consists of two files file.h and file.c
[12:30:40] <extern> what is the best way to use this library in a dir tree without including both of the files in every directory ?
[12:31:35] <extern> -I won't work since it won't work with .c files
[12:32:46] <trenka> extern: you include your file.h and then link with file.o
[12:33:09] <trenka> you can include .c as well :)
[12:33:25] <extern> yes but how ? i need to copy it to every directory ? 
[12:33:27] <extern> the .h
[12:33:49] <trenka> no, why?
[12:34:09] <dave0> extern: you can use path names in the compiler command line, and in makefiles
[12:34:37] <dave0> extern: gcc mylib/file.c myprog/main.c -o myprogram.exe
[12:35:21] <dave0> extern: or if you want to compile separately..   gcc -c mylib/file.c ; gcc -c myprog/main.c ; gcc mylib/file.o myprog/main.o -o myprogram.exe
[12:35:30] <trenka> and in #include directive as well
[12:35:35] *** Quits: The_Jag (~The_Jag@host-62-110-17-18.business.telecomitalia.it) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:36:23] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 264 seconds)
[12:36:36] <dave0> extern: if    gcc -c mylib/file.c    puts file.o in the current directory, rather than mylib/ (i forget if it does), then you use -o     gcc -c mylib/file.c -o mylib/file.o
[12:37:07] <dave0> extern: stick it all in a makefile and viola
[12:40:09] <swinnenb> ,cc printf("%.2f\n", (UINT32_MAX - 40));
[12:40:12] <candide> swinnenb: [warning: format '%f' expects argument of type 'double', but argument 2 has type 'unsigned i​nt' [-Wformat=]] 0.00
[12:40:28] <swinnenb> hm
[12:40:55] <swinnenb> ,cc printf("%.2f\n", (double)(UINT32_MAX - 40));
[12:40:57] <candide> swinnenb: 4294967255.00
[12:41:26] <dave0> i believe double can uniquely represent all values of a uint32_t
[12:41:58] <extern> dave0: i guess it's time to get out of my comfort zone and actual write a makefile :D
[12:42:03] <dave0> so you don't need to print the fraction part
[12:42:37] <dave0> extern: it's not too hard to cruft together a simple makefile
[12:43:08] <swinnenb> ,cc printf("%.2f\n", (float)(UINT32_MAX - 40));
[12:43:10] <candide> swinnenb: 4294967296.00
[12:43:34] *** Joins: earnestly (~earnest@user/earnestly)
[12:43:34] <swinnenb> ok, so it is indeed a float-related thingy
[12:50:13] *** Quits: gatty (~gatty@2404:4408:4429:bf00:b99f:60e1:4458:b1ca) (Quit: Ping timeout (120 seconds))
[12:52:39] <dave0> extern: https://termbin.com/bunz
[12:53:24] <dave0> extern: be very careful. the indented lines must be tab. do not use spaces. make sure your editor inserts tab's
[12:54:16] <shan> how do i make a pointer to this type? --> intraFont *ltn[16];
[12:54:58] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:54:59] <dave0> extern: hopefully you can follow it... it assumes there are the following files:   library/file.c library/file.h src/main.c src/main.h   and it compiles them and combines it all into program.exe ... type 'make' by itself to build the program, type 'make clean' to remove .o files
[12:55:46] <dave0> shan: does this work?   intraFont *(*ltn)[16];
[12:56:20] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[12:56:23] <shan> i think it did, one second
[12:57:16] <dave0> ,cc typedef struct { int x; } intraFont; intraFont *foo[16] = { 0 }; intraFont *(*bar)[16]; bar = &foo;
[12:57:18] <candide> dave0: no output: foo = {0x0 <repeats 16 times>}; bar = 0x7fffffffe210
[12:57:26] *** Quits: beta75 (~beta75@2409:8a34:46c:5830:ed1f:e7c0:e200:1095) (Ping timeout: 256 seconds)
[12:57:36] <dave0> i think that's right
[12:57:58] <LangerJan> looks good to me
[12:58:08] <shan> dave0: it worked! thank you <3
[12:58:34] <dave0> no worries :-)
[12:59:38] <extern> dave0: thanks alot
[13:00:38] <dave0> extern: no worries
[13:04:40] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:ed1f:e7c0:e200:1095)
[13:06:43] <katnis> its been 17 days and i dont see any improvement
[13:06:55] <BtbN> of what?
[13:06:58] <katnis> i dont understand pointer at all
[13:07:19] <katnis> maybe everything
[13:07:25] <katnis> even kids code these days
[13:07:30] <katnis> :( ugh :(
[13:07:35] <dave0> pfft kids
[13:09:29] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4-dev)
[13:09:39] <BtbN> Kids click together code blocks or make websites and call it programming.
[13:10:05] <BtbN> Building Redstone-Circuits in Minecraft is more coding than that.
[13:10:30] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[13:13:06] *** Quits: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[13:19:24] *** Quits: ckdCreations (~ckdCreati@147.55.130.33) (Read error: Connection reset by peer)
[13:19:40] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[13:21:28] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[13:22:48] <shan> i agree with BtbN's sentiment, though the phrasing is a bit extreme -- the "kids" you speak of code in much simpler languages than C
[13:23:19] <shan> didn't C rank something like fifth-highest on the most-dreaded programming languages list?
[13:23:55] *** Joins: malloy (~jimery@116.30.220.108)
[13:25:01] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[13:25:13] *** Joins: Nselm (~Nselm@p200300d56f367618668d426b7dcc9fbd.dip0.t-ipconnect.de)
[13:25:34] *** Joins: ckdCreations (~ckdCreati@147.55.130.36)
[13:31:05] <sham1> I wouldn't call them simpler than C, but easier than C. C is very simple. Extremely simple even, but that comes at the cost of being somewhat difficult to get used to and do stuff in
[13:31:26] *** Quits: mrig (~AdiIRC@user/mrig) (Remote host closed the connection)
[13:31:39] *** Joins: mrig (~AdiIRC@user/mrig)
[13:32:01] *** Joins: Klinda (~superleag@user/klinda)
[13:32:59] <sham1> I mean, it's not as simple as many assembly languages or even something like FORTH, but compared to other high-level languages C is rather simple, some might even call it simplistic which is fair enough
[13:34:18] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[13:35:11] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:35:20] <bookworm> (effing mess is more like it, not like the std people are making it any better either)
[13:35:49] <bookworm> so much UB it isn't even fun, still no sane encoding handling in the standard language
[13:36:23] <bookworm> wide chars are not useful at all, don't quite understand what they based it on
[13:37:49] *** Joins: Techcable_ (~Techcable@168.235.93.147)
[13:37:50] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 260 seconds)
[13:38:09] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Ping timeout: 265 seconds)
[13:38:38] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 265 seconds)
[13:39:25] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Remote host closed the connection)
[13:39:40] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[13:39:43] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[13:39:54] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[13:41:02] <earnestly> wg14 goal is to destroy c
[13:41:21] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:43:13] <sham1> Can't destroy C when the old things still exist
[13:43:32] <Bou> C is just sugar coated ASM and it should stay that way imo, if you want Java, use Java
[13:47:08] <earnestly> sham1: Yeah, inhertia is keeping it going and certain appeals
[13:47:40] <katnis> what is the hardest language?
[13:47:46] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Remote host closed the connection)
[13:47:50] <earnestly> mumps
[13:48:17] <Bou> Malbolge :)
[13:48:35] <sham1> An unqualified question
[13:48:53] <jemius> I have perceived Rust as the hardest language I know, because you have to understand a great many rules and deal with a big syntax
[13:48:59] <sham1> What does it mean for a language to be hard (or difficult)
[13:49:09] <earnestly> Unalified questions get unqualified answers
[13:49:17] <Bou> "Malbolge was very difficult to understand when it arrived. It took two years for the first Malbolge program to appear. The author himself has never written a Malbolge program."
[13:49:37] <katnis> what a troll
[13:49:47] <earnestly> That's pretty impressive
[13:50:44] *** Joins: arinov (~arinov@178.240.160.150)
[13:51:23] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[13:51:31] *** Joins: somlis (~somlis@user/somlis)
[13:51:38] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[13:52:11] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:52:32] <shan> jemius: i'd say rust is hard to learn but easy to work in
[13:52:51] <Bou> I can't get used to Rust's "ownership" thing, it feels very backwards to me
[13:53:21] <Bou> I think it's much easier if you don't have prior programming experience
[13:54:00] <shan> that's fair
[13:54:04] <jemius> The situation with Rust is especially interesting because I as a C-Guy feel like a minority. Many Rust programmers I have met seem to come from the higher layers, webfoo
[13:54:23] <jemius> So you have people from both worlds entering that language
[13:54:24] <shan> oh yeah, they're working v hard to make Rust accessible to people coming from easier languages
[13:54:35] <shan> since the whole WebAssembly thing is a thing
[13:56:48] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[14:03:40] *** Joins: random-nick (~random-ni@87.116.177.136)
[14:04:43] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[14:06:07] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[14:07:18] *** Joins: dkdns (~dkdns@178.49.152.42)
[14:10:06] *** Joins: OO7 (~i.am@user/marlboro)
[14:11:16] *** Quits: extern (~archer@141.226.62.146) (Ping timeout: 268 seconds)
[14:12:05] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:622a:e364:8d82:505a) (Remote host closed the connection)
[14:12:25] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:f523:802f:1998:64e5)
[14:14:05] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[14:15:05] <asd> katnis: what about pointers are you having trouble with?
[14:15:34] *** Joins: alphasierra (~alphasier@2405:201:e:4d:9f02:dbb3:fb6b:643f)
[14:16:04] <katnis> oh
[14:16:18] <katnis> i can show you but i need to type it first
[14:17:02] *** Joins: NEYi (~NEYi@109.251.216.38)
[14:21:51] <katnis> original https://www.irccloud.com/pastebin/6qzeBhRF/
[14:22:48] <katnis> and this is the same result with using different functions.
[14:22:48] <katnis> https://www.irccloud.com/pastebin/nSqXiNnz/
[14:22:54] <katnis> @asd
[14:23:04] <katnis> i just dont know what happened here...
[14:23:06] *** Quits: arinov (~arinov@178.240.160.150) (Ping timeout: 260 seconds)
[14:24:12] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 268 seconds)
[14:25:08] <dave0> katnis: oh noes
[14:25:33] <katnis> those are the basically the same one
[14:25:44] <katnis> but the prof threw me the second one and left
[14:25:47] *** Quits: alphasierra (~alphasier@2405:201:e:4d:9f02:dbb3:fb6b:643f) (Remote host closed the connection)
[14:26:08] <katnis> sorry for the korean in the context tho
[14:26:09] <dave0> katnis: your prototypes (input_score and print_score) dont match your functions
[14:26:13] *** Joins: alphasierra (~alphasier@2405:201:e:4d:9f02:dbb3:fb6b:643f)
[14:26:31] <katnis> oho my god
[14:26:33] <dave0> katnis: you have   int* (score)[4]   instead of    int (*score)[4];
[14:26:35] <katnis> i thought i fixed it!!!
[14:26:38] <katnis> ..........
[14:27:11] <katnis> what a shame
[14:27:21] <katnis> istg i fixed it andwoah what happend
[14:27:25] <katnis> what is happening to me
[14:27:46] <katnis> no way i just fixed everything
[14:29:19] <katnis> i think this is a glitch from pastebin
[14:29:29] <katnis> sorry about that
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:00] *** Joins: csrf (~csrf@user/csrf)
[14:33:21] <asd> also why not score[i][j] instead of the unreadable mess you have?
[14:33:35] *** Joins: Arthuria (~Arthuria@user/arthuria)
[14:34:35] <asd> also the `int *(score)[]` == `int *score[]` no need for that parenthesis
[14:35:36] *** Quits: Arthuria (~Arthuria@user/arthuria) (Read error: Connection reset by peer)
[14:35:52] *** Joins: Arthuria (~Arthuria@user/arthuria)
[14:35:55] <katnis> twisted to make me confused ig
[14:36:01] <dave0> katnis: did your teacher make you do   int (*score)[4]   ?
[14:36:37] <katnis> which line?
[14:36:38] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[14:36:52] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[14:36:57] <dave0> katnis: pointer-to-array is messy in c, there is easier ways to gently introduce them
[14:37:09] <katnis> really?
[14:37:18] <katnis> can youj gently give me a hint
[14:37:24] *** Quits: alphasierra (~alphasier@2405:201:e:4d:9f02:dbb3:fb6b:643f) (Quit: Leaving)
[14:37:26] <dave0> katnis: the arguments to print_score and input_score
[14:37:51] <dave0> katnis: a pointer-to-int which changes the value is simpler
[14:38:03] <katnis> those are fixed now
[14:38:12] <dave0> katnis:    void set69(int *a) { *a = 69; }
[14:38:22] <katnis> uh
[14:38:28] <katnis> are u sure this is simpler
[14:38:33] <katnis> looks the same for me
[14:39:18] <dave0> i think so? it's not arrays
[14:39:25] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[14:40:58] <katnis> okay
[14:41:05] <dave0> katnis: in your paste, with arrays, you can use a much simpler syntax
[14:41:06] <katnis> do you think i give up fast on that
[14:41:19] <katnis> i cant even touch it
[14:41:30] <dave0> katnis: but if your teacher wrote it this way they might be making a point (!) about pointers
[14:41:55] <katnis> he twisted it like 2 times
[14:42:19] <katnis> at first he wanted to show that it can be used with functions
[14:42:24] <dave0> is the assignment text online?
[14:42:27] <katnis> and after that he had an idea with something
[14:42:32] <katnis> started modifying
[14:42:48] <katnis> this is not an assignment if i understand correctly
[14:42:57] <katnis> he just showed us how it can be twisted
[14:45:25] <katnis> i cant stop thinking of a video that shows raytracing coded in C++
[14:45:54] *** Joins: Klinda (~superleag@user/klinda)
[14:46:25] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Ping timeout: 268 seconds)
[14:46:57] <dave0> one moment..
[14:47:51] <dave0> katnis: http://codepad.org/sY1Sa3FX
[14:47:57] <katnis> one moment
[14:48:06] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[14:48:16] <dave0> :-)
[14:48:54] <dave0> katnis: it keeps the flavour of your original paste
[14:49:42] <dave0> if i had your original, single function program, and the teacher said break it into functions, i would write it like this
[14:49:47] <katnis> yeah...
[14:50:08] <katnis> my vs is broken
[14:51:01] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[14:51:19] *** Joins: arinov (~arinov@213.194.126.155)
[14:51:21] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[14:51:35] <supakeen> is it a sane idea if i'm replacing things with things of different in a buffer to first do a pass to count a delta then allocate and do it again to fill the new buffer or am i overcomplicating and should i just realloc according to same factor each time i go out of bounds directly?
[14:51:44] <dave0> your code is fine... the compiler should have complained about mismatched prototypes
[14:52:28] *** Joins: Crescendo (~Crescendo@user/crescendo)
[14:52:29] <katnis> i think i lost my original ughhhh 
[14:52:44] <dave0> katnis: https://www.irccloud.com/pastebin/raw/6qzeBhRF
[14:53:13] <katnis> ohhh i mean the second one
[14:53:19] <dave0> supakeen: it is usually easier to code if you run over the data to find a size, malloc, and run over the data a second time filling memory
[14:53:26] <fizzie> It's certainly a *rational* idea to do a two-pass thing where the first pass computes the amount of memory and the second pass does the thing.
[14:53:26] <katnis> there is a version that works fine
[14:53:28] <dave0> katnis: https://www.irccloud.com/pastebin/raw/nSqXiNnz
[14:53:39] <supakeen> then i'll take that approach first, also just seems less wasteful :)
[14:54:42] <katnis> https://www.irccloud.com/pastebin/OSWaCsHW/
[14:55:00] <katnis> i wanted to make a test run but vs doesnt work now 
[14:55:16] <dave0> katnis: http://codepad.org/JHhziP7S
[14:55:25] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[14:55:33] <dave0> katnis: this is the 2nd irccloud page with the fixed prototypes... it works fine
[14:55:53] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:55:58] *** Joins: cebor (~cebor@user/cebor)
[14:56:05] <fizzie> I think the main caveat is that you can end up with two subtly different loops that process a thing that must agree with what they do. Sometimes you might want to put the actual processing into something snprintf-like, so that the code using it can just do `size_t required_length = process(NULL, 0, ...); char *out = malloc(required_length); process(out, required_length, ...);` to do the two passes.
[14:56:11] *** Quits: cebor (~cebor@user/cebor) (Remote host closed the connection)
[14:56:33] <dave0> but imho    int score[3][4];   is vastly easier to understand than    int (*score)[4];   and the dereferencing thing all over the place
[14:57:16] *** Joins: cebor (~cebor@user/cebor)
[14:57:39] <supakeen> fizzie: that was exactly my plan yes :)
[14:58:13] <fizzie> I agree with using array indexing for the *access*, but I tend to lean towards declaring the pointer as `int (*)[4]`, because that's what it *is*. Or at least as `int score[][4]`, since the first size specifier is entirely ignored. But sure, there's the "it documents the expectations" argument.
[14:59:24] <dave0> fizzie: you also gotta factor in that katnis is a beginner
[14:59:37] <katnis> im crying
[15:00:06] <fizzie> I just think it's going to lead to the "why isn't ARRAY_SIZE(score) working in my function?" question next. ;)
[15:00:13] <dave0> katnis: why? it's not life threatening :-)
[15:00:27] <katnis> i suck
[15:00:50] <dave0> being a beginner is not a bad thing
[15:01:01] <dave0> everyone was a beginner once
[15:02:01] <katnis> i am nervous about something that i am not good at
[15:02:06] <katnis> gives me pressure
[15:02:12] <katnis> maybe its a personal thing
[15:02:43] <katnis> i know i am def not talented with this one
[15:02:51] <katnis> so i am just grinding myself these days
[15:02:54] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (Quit: WeeChat 2.8)
[15:03:07] <katnis> hopefully waiting for the moment to get better one day
[15:03:26] *** Joins: ferdna (~ferdna@user/ferdna)
[15:06:23] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Ping timeout: 264 seconds)
[15:06:46] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Ping timeout: 268 seconds)
[15:07:22] *** Quits: ferdna (~ferdna@user/ferdna) (Remote host closed the connection)
[15:08:13] *** Joins: ferdna (~ferdna@user/ferdna)
[15:09:34] <dave0> it takes practise
[15:09:39] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[15:09:42] <dave0> like anything i guess
[15:10:06] <dave0> maybe there is coding savants
[15:10:39] <dave0> whatshisname who did qemu and ffmpeg and tcc might be
[15:12:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[15:13:34] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:ed1f:e7c0:e200:1095) (Remote host closed the connection)
[15:14:01] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:ed1f:e7c0:e200:1095)
[15:20:34] <jemius> Has anyone a good link explaining what those magic so called flex-arrarys are about?
[15:20:57] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 268 seconds)
[15:21:22] *** Quits: Nselm (~Nselm@p200300d56f367618668d426b7dcc9fbd.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:22:14] <dave0> google "flexible array members" gives a wikipedia page: https://en.wikipedia.org/wiki/Flexible_array_member
[15:23:00] <dave0> it's sparse on details
[15:25:16] <jemius> That's the point, it is
[15:25:48] *** Joins: karakedi (~eAC53C340@user/karakedi)
[15:27:18] <supakeen> They save you an allocation, is about the gist of it.
[15:27:31] <supakeen> I've also seen them used to overlay other structs.
[15:27:43] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[15:27:44] <supakeen> But then I believe you start running astray of strict aliasing?
[15:27:53] *** Quits: subdelusional (~user@188.249.169.186) (Remote host closed the connection)
[15:30:29] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[15:32:09] *** Joins: Crescendo (~Crescendo@user/crescendo)
[15:33:53] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[15:34:09] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[15:34:20] *** Joins: Crescendo (~Crescendo@user/crescendo)
[15:35:14] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:ed1f:e7c0:e200:1095) (Remote host closed the connection)
[15:35:20] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Remote host closed the connection)
[15:35:35] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:ed1f:e7c0:e200:1095)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:49] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[15:39:33] *** Joins: Klinda (~superleag@user/klinda)
[15:39:39] *** Joins: Crescendo (~Crescendo@user/crescendo)
[15:44:01] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[15:44:13] *** Joins: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net)
[15:49:19] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[15:50:47] <John99> ummm exist some reason for attrivutes to not be inherited when the function is assigned to a pointer? https://compiler-explorer.com/z/endePcrf7
[15:50:48] <candide> Title of John99's link: Compiler Explorer
[15:50:56] <John99> attributes*
[15:54:59] *** Quits: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net) (Ping timeout: 264 seconds)
[15:55:27] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[15:55:39] <dave0> John99: ah you should define foo as    int foo(void) { return 1; }
[15:56:04] <dave0> John99: int foo()    is a special case for backwards compatibility
[15:56:48] <John99> ok, true, bad habits
[15:57:25] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[15:57:45] <dave0> oh the robot doesn't complain
[15:58:14] <John99> ?
[15:58:16] <dave0> ,cc int foo() { return 1; } struct bar { int (*foo)(void); }; int main(void) { struct bar var = { .foo = foo, }; foo(); var.foo(); }
[15:58:18] <candide> dave0: Success (no output).
[15:59:17] <dave0> what compiler are you using, and what's the warning?
[15:59:39] <John99> gcc 11.2 is not a warning, is a curiosity
[16:00:10] <John99> [[nodiscard]] foo() launch a warning normally but int (*foo)(void) no
[16:00:37] *** Joins: wovixo (~wovixo@128.104.205.49)
[16:00:42] <John99> i espected taht function and pointer to function launch a warning
[16:00:43] <dave0> () means unspecified arguments, it is backwards compatibility to before the c89 standard
[16:00:51] <John99> yes, but that not the point
[16:00:56] *** Joins: ullbeking (sid5364@user/ullbeking)
[16:01:26] <John99> [[nodiscard]] int foo(void) {return 1}, foo(); //warning no discard
[16:01:51] <John99> int (*bar)(void) ; bar = foo; bar() // no warning
[16:02:51] <John99> i was trying to imagine why that limitation with the pointers
[16:03:26] <Bou> because they're not the same thing, how should C know that the function pointer in bar is foo() at the place you call it?
[16:03:42] *** Joins: constxd (~brad@192.75.101.178)
[16:04:09] <dave0> John99: are you asking why you don't have to dereference a function pointer to call the function?
[16:04:14] <John99> no
[16:04:16] <Bou> if you say `struct bar {  [[nodiscard]] int (*foo)(void);};` then the compiler can warn when you call var.foo()
[16:04:21] <John99> Bou get the point
[16:05:03] <dave0> oh is [[nodiscard]] some kind of compiler directive? i thought it was some side effect of the paste
[16:05:23] <Bou> it warns when you ignore the return value
[16:05:24] <John99> struct bar {[[nodiscard]]int (*foo)(void);};
[16:05:36] <John99> but this is not valid 
[16:05:50] <John99> 'nodiscard' attribute can only be applied to functions or to structure, union or enumeration types [-Wattributes]
[16:06:39] *** Joins: Psybur (~Psybur@mobile-166-170-30-165.mycingular.net)
[16:06:50] <Bou> ah, my bad, I thought that would work
[16:07:07] <John99> yes, i was surprised too
[16:07:38] <John99> and i was sondering if exist some reasons for that
[16:07:45] *** Joins: bokfink (~user@122x214x111x75.ap122.ftth.ucom.ne.jp)
[16:07:45] <John99> wondering*
[16:08:08] *** Joins: CaCode (~CaCode@user/cacode)
[16:08:08] <John99> wondering/thinking/s
[16:08:29] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:09:05] *** Joins: phao (~phao@2804:d45:8e7a:de00:307f:5c37:711f:6342)
[16:09:29] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:f523:802f:1998:64e5) (Quit: Leaving)
[16:09:38] *** Joins: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net)
[16:11:17] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[16:11:48] *** Quits: dkdns (~dkdns@178.49.152.42) (Ping timeout: 256 seconds)
[16:12:51] *** Joins: constxo (~brad@192.75.101.178)
[16:14:36] *** Quits: constxd (~brad@192.75.101.178) (Ping timeout: 268 seconds)
[16:15:36] *** Quits: phao (~phao@2804:d45:8e7a:de00:307f:5c37:711f:6342) (Quit: Leaving)
[16:19:06] *** Joins: dkdns (~dkdns@178.49.152.42)
[16:19:18] *** Parts: dkdns (~dkdns@178.49.152.42) ()
[16:19:44] *** Quits: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net) (Read error: Connection reset by peer)
[16:19:52] *** Joins: zwr (~zwr@2804:d45:b966:fb00:e598:c47f:66b:6dcf)
[16:20:06] *** Joins: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net)
[16:22:25] *** Joins: cart_man (~rynot@host-78-144-127-199.as13285.net)
[16:23:21] <Bou> hm it does say you can apply it to structs/unions/enumerations, but how, and what does `union [[nodiscard]] { int foo; } bar;` even mean
[16:23:23] * Bou confused
[16:24:25] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[16:26:18] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[16:35:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:35b5:6b52:836c:5a7)
[16:35:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:35b5:6b52:836c:5a7) (Changing host)
[16:35:25] *** Joins: skapata (~Skapata@user/skapata)
[16:35:59] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:37:58] *** Quits: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[16:40:05] *** Joins: seninha (~seninha@user/seninha)
[16:42:24] <John99> probably new attributes for unions will be added
[16:43:14] *** Joins: yorkis (~merp@209-216-65-21.static.tampabayfiber.com)
[16:44:00] <John99> union [[ something with sense? ]] {int foo; } o enum [[ no accept values not defined ]] var {A = 1,B = 3}; va= A | B; //invalid 
[16:45:25] <John99> but `struct bar {  [[nodiscard]] int (*foo)(void);}; this have sense and is not valid XD
[16:48:30] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 268 seconds)
[16:55:42] *** Joins: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net)
[16:56:07] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[16:56:20] <fizzie> Bou: In the proposal, applying the [[nodiscard]] attribute to a type means any function that returns an object of that type gets the [[nodiscard]] semantics.
[16:57:03] <fizzie> N2267: "A nodiscard call is a function call expression that calls a function previously declared `nodiscard`, or whose return type is a structure, union, or enumeration type marked `nodiscard`."
[16:57:23] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr) (Ping timeout: 264 seconds)
[16:57:39] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Quit: Konversation terminated!)
[16:57:48] <fizzie> So I imagine the thinking is, you've got a "status code" union type that's "always meaningful", so you mark that type as nodiscard instead of marking your sixteen bazillion functions that all return a status code as ones.
[16:58:43] <John99> fizzie, but the behaviour of the latest gcc discard the attribute, i suppose that that part of the standart is not implementd yet
[16:58:53] <John99> discard/ignore
[16:58:55] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[17:00:18] <fizzie> It's not in any final version of the standard yet (though it did get incorporated to the C23 drafts, which I guess is a sign), so wouldn't surprise me the implementation is either partial or missing too.
[17:00:34] <John99> okay, i suppose taht i only need wait
[17:04:05] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[17:04:37] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[17:04:46] *** Quits: yorkis (~merp@209-216-65-21.static.tampabayfiber.com) (Changing host)
[17:04:46] *** Joins: yorkis (~merp@user/yorkis)
[17:06:43] *** Joins: engest (~engest@50.39.227.149)
[17:07:18] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[17:08:00] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:08:56] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Remote host closed the connection)
[17:11:49] <John99> one question more, how i can define the value of a macro in the command line? https://compiler-explorer.com/z/4T6TnMx41
[17:11:50] <Bou> or use `[[nodiscard]] int foo() { return __my_internal_foo_pointer(); }`
[17:11:50] <candide> Title of John99's link: Compiler Explorer
[17:11:59] <John99> -D VAR=foo dont work
[17:12:30] <fizzie> That's not a problem with defining the value of a macro, that's a problem with using the ## operator.
[17:12:47] <fizzie> You need to add a layer of indirection if you want the operand of ## to be macro-expanded. (Same with #.)
[17:13:30] <fizzie> ,expand #define foo bar \n #define test(x) test_##x \n test(foo)
[17:13:31] <candide> fizzie:  test_foo
[17:13:33] <fizzie> ,expand #define foo bar \n #define test_(x) test_##x \n #define test(x) test_(x) \n test(foo)
[17:13:33] <candide> fizzie:  test_bar
[17:13:35] <fizzie> Like so.
[17:15:24] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[17:16:18] *** Joins: constxd (~brad@192.75.101.178)
[17:16:56] <John99> okay, recovering the point about [[]nodiscard] twiter said that https://t.co/SmSglsW4D0?amp=1 fro this is not possible
[17:17:48] <fizzie> That's from the C++ standard, which may or may not turn out to be entirely equivalent with the C flavour of it.
[17:18:06] *** Quits: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[17:18:29] <John99> well,the man that told em taht is in the WG14 comitee, i supose they are not very prone to add a diference between c and c++
[17:18:36] <John99> told me that*
[17:19:30] *** Quits: constxo (~brad@192.75.101.178) (Ping timeout: 260 seconds)
[17:19:32] <fizzie> Maybe not, but neither are they the same language, and certainly the treatment of qualifiers like `const` is already quite different.
[17:20:26] *** Joins: The_Jag (~The_Jag@host-62-110-17-18.business.telecomitalia.it)
[17:21:16] <fizzie> (Why are the examples always about launching missiles, anyway?)
[17:21:27] *** Quits: bokfink (~user@122x214x111x75.ap122.ftth.ucom.ne.jp) (Remote host closed the connection)
[17:21:29] *** Quits: The_Jag (~The_Jag@host-62-110-17-18.business.telecomitalia.it) (Client Quit)
[17:21:49] <sham1> Because that's the kind of thing that can't really be aborted and which has a lot of consequences
[17:22:08] *** Quits: gpanders (~gpanders@user/gpanders) (Remote host closed the connection)
[17:22:12] *** Joins: The_Jag (~The_Jag@host-62-110-17-18.business.telecomitalia.it)
[17:22:20] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: nyaa~)
[17:23:19] <John99> XD
[17:23:31] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:23:31] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:23:31] *** Joins: wroathe (~wroathe@user/wroathe)
[17:26:47] *** Quits: The_Jag (~The_Jag@host-62-110-17-18.business.telecomitalia.it) (Client Quit)
[17:27:48] <John99> fizzie: can you look at this? i dont know why is not expanding the macro
[17:27:50] <John99> https://compiler-explorer.com/z/hj3Y1Tzje
[17:28:26] *** Joins: The_Jag (~The_Jag@host-62-110-17-18.business.telecomitalia.it)
[17:28:45] *** Joins: strajder (~strajder@user/strajder)
[17:29:49] *** Joins: cferry (~etuel@8.242.205.35)
[17:29:59] *** Quits: The_Jag (~The_Jag@host-62-110-17-18.business.telecomitalia.it) (Client Quit)
[17:30:00] <cferry> I am block with epoll_wait, each clients has its own fd. Any alternatives to timerfd? https://github.com/beryldb/beryldb/blob/unstable/src/engines/engine_epoll.cpp#L144
[17:30:41] *** Joins: iomari891 (~iomari891@105.112.138.38)
[17:32:54] <John99> cferry that is c++ and this is C
[17:33:04] <John99> #C++general is better for that question
[17:33:42] *** OO7 is now known as akuma
[17:34:15] *** Joins: The_Jag (~The_Jag@host-62-110-17-18.business.telecomitalia.it)
[17:35:31] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[17:35:46] *** Joins: BSaboia (~bsaboia@177.37.198.98)
[17:38:36] *** Joins: fusta (~fusta@178.251.43.26)
[17:38:40] *** Parts: fusta (~fusta@178.251.43.26) ()
[17:39:05] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 268 seconds)
[17:42:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[17:46:11] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:47:04] *** Parts: itsjoints (~itsjoints@2001:470:69fc:105::1:29f4) ()
[17:47:51] *** Joins: superboot (~agentgasm@user/superboot)
[17:48:19] *** mendel_munkis is now known as munkis
[17:48:24] *** Joins: itsjoints (~itsjoints@2001:470:69fc:105::1:29f4)
[17:50:10] *** Quits: begriffs (~begriffs@user/begriffs) (Ping timeout: 268 seconds)
[17:50:13] *** Parts: itsjoints (~itsjoints@2001:470:69fc:105::1:29f4) ()
[17:52:15] *** Joins: quartz (~quartz@user/quartz)
[17:52:25] <fizzie> John99: Works for me: https://0x0.st/-n7g.txt
[17:53:39] <John99> ummmmm, okay, then i am doing something bad in other part (but compiler explorer show test_VAR no test_foo)
[17:53:44] <John99> ty
[17:54:55] *** Joins: pulse (~pulse@user/pulse)
[17:58:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:58:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:58:24] *** Joins: wroathe (~wroathe@user/wroathe)
[17:59:25] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 268 seconds)
[18:03:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:03:49] *** Joins: arinov (~arinov@213.194.126.155)
[18:04:58] *** Quits: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173) (Ping timeout: 268 seconds)
[18:13:29] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:14:21] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[18:14:23] *** topside_ is now known as topside
[18:21:15] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Remote host closed the connection)
[18:25:48] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Quit: brb)
[18:26:16] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[18:27:04] *** Quits: John99 (~johnny@87.200.94.90.dynamic.jazztel.es) (Remote host closed the connection)
[18:32:30] *** Quits: yorkis (~merp@user/yorkis) (Quit: Leaving)
[18:32:48] *** Joins: yorkis (~merp@209-216-65-21.static.tampabayfiber.com)
[18:32:50] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 260 seconds)
[18:33:18] *** Quits: yorkis (~merp@209-216-65-21.static.tampabayfiber.com) (Client Quit)
[18:33:31] *** Joins: yorkis (~merp@209-216-65-21.static.tampabayfiber.com)
[18:33:35] *** Joins: csjp (~csjp@user/csjp)
[18:34:01] *** Quits: yorkis (~merp@209-216-65-21.static.tampabayfiber.com) (Client Quit)
[18:34:14] *** Joins: yorkis (~yorkis@user/yorkis)
[18:36:03] *** Quits: akuma (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[18:36:41] *** Quits: The_Jag (~The_Jag@host-62-110-17-18.business.telecomitalia.it) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:37:31] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[18:37:54] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606) (Ping timeout: 260 seconds)
[18:38:54] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[18:40:49] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Read error: Connection reset by peer)
[18:43:15] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[18:43:25] *** Joins: quartz (~quartz@user/quartz)
[18:43:30] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Ping timeout: 260 seconds)
[18:46:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:46:48] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[18:46:57] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[18:47:29] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com)
[18:47:49] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[18:48:08] <De4nWhit3> Hello everyone! 
[18:48:19] <quartz> Hi
[18:51:27] <De4nWhit3> I have a question about _Alignas . As I understand it, _Alignas is used to automatically place storage boundaries for objects at multiples of the specified byte. If I declare my array without specifying _Alignas the data alignment might not  place storage boundaries in multiples  but may misalign them?
[18:53:54] <sham1> If you don't have _Alignas for your array, the array will take the natrual alignment of the elements
[18:54:23] <sham1> The elements will still be aligned, they just won't be aligned to the boundary you might want them to be at
[18:54:42] *** Quits: yorkis (~yorkis@user/yorkis) (Quit: Leaving)
[18:55:36] <De4nWhit3> So as a best practice we would use _Alignas? sham1
[18:55:41] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:55:51] <edk> not really, you don't ever need _Alignas if you're just writing straight C
[18:55:55] <sham1> If you need to align the data, you need to align the data
[18:56:00] <sham1> But most of the time you don't need to do that
[18:56:08] <omegatron> about 99.99%
[18:56:15] <edk> the implementation is smart enough to align objects so you can use them
[18:56:32] <edk> _Alignas is for when you have requirements that the C implementation can't know
[18:56:42] <sham1> Well it has to. It'd be a very bad compiler if it couldn't align accesses
[18:56:47] <De4nWhit3> I come from a java background where we never really had to align data, so I am struggling to wrap my head around this. The language of the gods. 
[18:56:47] <edk> yeah
[18:57:02] <edk> you can almost certainly ignore this for the time being
[18:57:24] <De4nWhit3> Ok, I think I will do some more research on it. Thank you everyone.
[18:59:35] *** Joins: Nselm (~Nselm@p200300d56f367618668d426b7dcc9fbd.dip0.t-ipconnect.de)
[19:01:19] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[19:03:03] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[19:08:04] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[19:08:13] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[19:11:23] *** Joins: Inline (~Inline@2a02:908:1252:7a80:edec:c289:e267:dbb7)
[19:15:21] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[19:17:08] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Ping timeout: 268 seconds)
[19:18:40] *** Joins: dohtem (uid524096@user/dohtem)
[19:20:15] *** Joins: pucara (~i@181.92.84.206)
[19:20:27] *** Joins: reset (~reset@user/reset)
[19:21:48] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[19:22:25] *** Quits: Nselm (~Nselm@p200300d56f367618668d426b7dcc9fbd.dip0.t-ipconnect.de) (Quit: Client closed)
[19:23:50] *** Joins: mahmutov (~mahmutov@176.30.172.0)
[19:25:20] *** Joins: serbest (~serbest@user/serbest)
[19:26:20] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[19:28:13] *** Quits: khrbt_ (~znc@user/khrbt) (Ping timeout: 268 seconds)
[19:29:59] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[19:33:34] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[19:37:16] *** Joins: khrbt (~znc@user/khrbt)
[19:38:43] *** Quits: random-nick (~random-ni@87.116.177.136) (Ping timeout: 268 seconds)
[19:41:06] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[19:42:33] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[19:46:41] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:49:18] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 260 seconds)
[19:51:22] *** Quits: BSaboia (~bsaboia@177.37.198.98) (Quit: This computer has gone to sleep)
[19:51:45] <|smlckz|> https://zig.news/sobeston/using-zig-and-translate-c-to-understand-weird-c-code-4f8
[19:52:24] <|smlckz|> what does that int*(*)[] represent?
[19:52:50] <sham1> Pointer to array of pointer to int
[19:54:01] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[19:54:16] *** Joins: neutral (~user@user/neutral)
[19:54:53] <sham1> Doesn't look all that impressive in Zig either from what I can tell from one of the comments
[19:56:33] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[19:56:35] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 268 seconds)
[19:57:54] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[20:02:52] *** Joins: khrbt (~znc@user/khrbt)
[20:03:42] *** Joins: mrblarg64 (~mrblarg64@142-165-167-195.sktn.static.sasknet.sk.ca)
[20:03:54] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[20:03:56] <SamuelMarks> hi
[20:03:56] <nitrix> This has to be a satire piece. There's so much more going on in that code compared to simply looking up C's operators precedence.
[20:04:23] <sham1> Yeah
[20:04:24] <asd> wtf is that code even doing?
[20:04:32] <sham1> Although I'm not gonna lie, C's type syntax is bollocks
[20:05:32] <SamuelMarks> To simplify use I generate a single [amalgamated] header from my multi-header project. Now I'm getting linker errors about `duplicate symbol`s. Any ideas? - https://github.com/offscale/version_redis/runs/4095283538
[20:05:33] <candide> Title of SamuelMarks's link: [src/lib/version_redis.h] Replace temp test with `#include "config.h"`; [src/lib/version_redis.c] Add TODO comment; [src/lib/config.h.in] Add (based on libacquire's) · offscale/version_redis@eed4631 · GitHub
[20:05:34] *** Joins: serbest (~serbest@user/serbest)
[20:06:05] *** Quits: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3) (Ping timeout: 264 seconds)
[20:06:14] <asd> the tweet author writes: "“***(int*(*)[])p = 1;” stores “1” in the “int” location the address of which was passed as argument to f."
[20:06:49] *** Quits: mrblarg64 (~mrblarg64@142-165-167-195.sktn.static.sasknet.sk.ca) (Client Quit)
[20:07:18] *** Quits: cferry (~etuel@8.242.205.35) (Quit: Leaving)
[20:07:53] <nitrix> sham1, I think it's the other way around. The language tried to be consistent by having declarations look like expressions; the fact that confuses us and we expect different tells a lot about the design of other languages.
[20:08:21] <SamuelMarks> nitrix - That's the exact comment that I read in 'Deep C secrets'
[20:08:49] <nitrix> sham1, It's simpler and somehow we find that confusing because we want it to be complicated...
[20:09:05] <sham1> Yeah, I do know of the whole "form follows usage" idea, but I'm not so sure whether it's a good type syntax
[20:09:14] <sham1> I mean, parsing it is hard enough
[20:09:29] <sham1> Well, that's exactly the problem actually
[20:10:04] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[20:10:11] *** Quits: kts (~kts@103.73.237.54) (Quit: Konversation terminated!)
[20:10:15] <veltas> It confused me when I learned it, before I'd learned any other languages with type specifications
[20:10:45] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[20:10:46] <veltas> Not that much but it just seemed a little counter-intuitive. I don't have a better alternative other than suffix pointers
[20:11:05] <SamuelMarks> There are better, but not as concise
[20:11:15] <veltas> Are they really better then
[20:11:22] <SamuelMarks> mmmm
[20:11:25] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[20:11:34] <veltas> tasty?
[20:11:37] <sham1> Well that problem can be technically by type inference in languages that do that
[20:12:01] <sham1> I'm personally partial towards the Pascal typing style of `foo: int` versus C's `int foo` if I'm being honest
[20:12:08] <veltas> That's unrelated, even with inference you need to specify types sometimes
[20:12:32] <sham1> Well yeah, but you don't need to do it everywhere which helps with brevity
[20:13:14] <SamuelMarks> sham1: and with that syntax you can put `volatile` and `const` on the other side, which reads rather nicely
[20:13:22] <sham1> Yeah
[20:13:23] <SamuelMarks> `const foo: int`
[20:14:07] <sham1> Although often those type qualifiers are also put onto the "type side", although this necessitates having a keyword for variable declaration, like `let`
[20:14:08] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[20:14:17] *** Joins: serbest (~serbest@user/serbest)
[20:14:29] <asd> from what i can tell it dereferences p 3 times: `p => &a` (address of a), `*p => a` (the pointer a is containing) `**p => *a` (dereferencing a's pointer). what is the third one for? what am i missing?
[20:14:42] <sham1> Assuming something like let isn't just a stand-in for "this variable name is a constant"
[20:15:29] <nitrix> ,tell asd about paren ***(int*(*)[])p = 1;
[20:15:29] <candide> asd: *(*(*((i​nt *(*)[]) p))) = 1
[20:15:47] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[20:16:11] <sham1> The pointer stars peel away the layers of the onion, until you're left with a bare lvalue int
[20:16:17] <sham1> That can then be assigned
[20:17:12] <nitrix> Now you can do the step-by-step expansion and infer what type `p` must have been, but it's only an effective type due to the cast.
[20:17:24] <SamuelMarks> Declarations in C are read boustrophedonically
[20:17:52] <asd> im not much concerned about the cast im confused about *** instead of **
[20:18:11] <sham1> First star is for the "pointer to array" part
[20:18:12] <asd> i read it as: p == &a; *p == a; **p == *a;
[20:18:18] <asd> oh
[20:18:21] <sham1> Second star is for the array of pointer to int part
[20:18:29] <sham1> And the third is for the pointer to int part
[20:18:39] <nitrix> It's a pointer to an array of pointers to int. The first dereference gives you the array of pointers to it, the second gives you a pointer to an int, the third gives you the int.
[20:18:43] <SamuelMarks> See page 71 in 'Deep C secrets', they've got a nice diagram
[20:21:33] <sham1> Maybe it's clearer if it's written in a way that isn't just stupid
[20:22:23] <sham1> int *(*pArr)[] = (int *(*)[])p; int *arr[] = *pArr; int *ptr = *arr; *ptr = 1;
[20:23:00] <SamuelMarks> I'm confused, so I only `#include <acquire.h>` once in my project, and it has an include guard. It has only one `extern bool is_directory(const char *path) {` impl. `target_link_libraries` is only called once for this lib. Why am I getting duplicate symbol linker errors?
[20:23:35] * SamuelMarks is scratching his head
[20:24:18] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[20:24:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:24:40] <nitrix> SamuelMarks, You wouldn't get duplicated symbols from an #include, unless you have definitions in there (not declarations), that they are marked static, and that the file is included by multiple translation units that ends up linked together.
[20:25:24] <nitrix> SamuelMarks, Duplicate symbols is a problem during the linking translation phase when two translation units have colliding definitions.
[20:26:43] <nitrix> SamuelMarks, In a bit more layman, your is_directory implementation is showing up in two .c/.o/.a files and conflicting when they merged into a single executable.
[20:26:43] <SamuelMarks> Yeah that's what I'm trying to figure out, how can there be colliding definitions with only one `target_link_libraries` referencing this library, and only one file using `#include <acquire.h>`?
[20:27:41] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:28:27] <SamuelMarks> (`cli` and `tests` both have a target_link_libraries("${EXEC_NAME}" PRIVATE "redis_version") though, with "redis_version" target depending on libacquire_libraries and the only target with `#include <acquire.h>`
[20:28:31] *** Joins: mahmutov_ (~mahmutov@37.155.85.233)
[20:28:35] *** Quits: puke (~puke@user/puke) (Remote host closed the connection)
[20:28:42] <nitrix> Could be some sort of diamond problem. Two libraries using the same common library, both compiling statically, and the final result produces duplicated symbols.
[20:30:45] *** Joins: puke (~puke@user/puke)
[20:30:48] <nitrix> You can work your way backward. The symbol is_directory belongs to which file. That file is part of which library. What uses that library and do those things end up in the same executable.
[20:31:14] <SamuelMarks> nitrix - Just tried with `-DBUILD_SHARED_LIBS=ON` which worked, so yeah I think your last assumption was right
[20:31:39] <SamuelMarks> nitrix: The symbol is_directory is in acquire.h, which is only included in one file in my whole project
[20:31:44] *** Quits: mahmutov (~mahmutov@176.30.172.0) (Ping timeout: 268 seconds)
[20:32:24] <nitrix> No, acquire.h has a declaration, not a definition.
[20:32:38] <SamuelMarks> No it has both, as I said, it's header-only (and a single amalgamation)
[20:32:47] *** Quits: neutral (~user@user/neutral) (Remote host closed the connection)
[20:32:48] <nitrix> Oh great.
[20:33:12] <SamuelMarks> Yeah I was thinking it would simplify things, I generate the amalgamation from cmake actually, and provide the header file in the releases on my github repo
[20:33:19] <sham1> Do you have some kind of a #ifdef FOO_IMPLEMENTATION #endif kind of dealio
[20:33:22] <SamuelMarks> yes
[20:33:27] <nitrix> Maybe the define that controls the header/implementation part of the .h file is not controlled properly?
[20:33:34] <SamuelMarks> sham1 - I added that yesterday in case that was an issue
[20:33:49] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[20:34:17] <nitrix> Can you verify there's only one file that #include "acquire.h" _with_ FOO_IMPLEMENTATION defined?
[20:34:17] <sham1> Well in that case it doesn't make sense. I'd honestly have a separate compilation target for that, even though it might defeat the point of having an STB-style library
[20:34:47] <SamuelMarks> nitrix - It concatenates all the various headers in my https://github.com/offscale/libacquire together, and
[20:34:48] <candide> Title of SamuelMarks's link: GitHub - offscale/libacquire: The core for your package manager, minus the dependency graph components. Features: download, verify, and extract.
[20:35:03] <SamuelMarks> yes I can verify that there's only one file that has it defined
[20:35:46] <SamuelMarks> sham1 - A libray (`add_library`) target is the only one which depends on acquire.h
[20:36:00] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[20:36:05] <sham1> Yeah, but is it the only one with the #define FOO_IMPLEMENTATION or whatever it is in your case
[20:36:06] *** Joins: kurahaupo (~kurahaupo@125.254.29.229)
[20:36:31] <SamuelMarks> (and links with `LIBACQUIRE_LIBRARIES`, which is probably your system libcurl and openssl)
[20:36:34] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[20:36:40] <nitrix> Another idea if you prefer the "working your way backwards" rather than "looking around until you spot the problem" might be to use `objdump -t` on the .o files and see which translation unit is the culprit.
[20:38:01] <SamuelMarks> sham1 - No other files in my project—or the one I'm depending on—have an implementation of that symbol, except one (acquire.h)
[20:38:13] <nitrix> In theory, you should find that more than one of them has a is_directory symbol from that acquire library.
[20:39:10] <nitrix> If you still can't find it, I'll be able to troubleshoot when I'm home tonight (~4 hours from now) and open a PR to your repo.
[20:40:04] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:40:44] <SamuelMarks> The version_redis.c.o has only one `is_directory`, and it's: 0000000000000d40 g     F __TEXT,__text _is_directory
[20:41:07] <nitrix> Good, that's the TU that includes acquire with the FOO_IMPLEMENTATION, right?
[20:41:41] <SamuelMarks> Thanks nitrix. If my license (Apache-2.0 OR MIT) isn't permissive enough for you, happy to add an OR for zlib. I can't go as far as CC0 because some of the code I use is from BSD licensed code bases
[20:41:59] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[20:42:49] *** Joins: hinata (~hinata@2402:3a80:18de:3475:95d0:faa6:ccc2:4b67)
[20:43:03] <nitrix> SamuelMarks, My contribution would be under UNLICENSE so you do whatever you want with it. I can add the license along or sign a waiver with my PGP key that signed the commit, it wont be a problem.
[20:43:11] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Ping timeout: 246 seconds)
[20:43:24] <asd> https://0x0.st/-nC8.png # what am i doing wrong with this graph?
[20:43:27] <nitrix> Or I can just tell you what to fix lol.
[20:44:07] <nitrix> What about the other .o files, does _is_directory show up in them too?
[20:44:27] <sham1> asd: *p = 1
[20:44:31] <sham1> Err
[20:44:35] <sham1> ***p = 1
[20:45:01] <SamuelMarks> nitrix - Okay on all the .o files: `fd -eo -x sh -c 'objdump -t "$0" | grep -F "is_directory" && echo "$0"' {} \;`
[20:45:07] <asd> sham1: haha, yeah i know that, but when i try to interpret it im doing it wrong. what do i need to change about the graph to make it correct? where are my dereferencing arrows causing problems?
[20:45:16] <SamuelMarks> 3 results, all at 0000000000000d40 g
[20:45:30] *** Quits: hinata (~hinata@2402:3a80:18de:3475:95d0:faa6:ccc2:4b67) (Client Quit)
[20:45:47] <SamuelMarks> version_redis.c.o cli.c.o test.c.o
[20:46:51] <nitrix> Okay. Now you have to figure out which of these TUs end up in the same executable :P
[20:47:18] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[20:48:17] <SamuelMarks> CLI depends on version_redis.h, test depends on version_redis.h, version_redis.h depends on acquire.h
[20:48:17] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Read error: Connection reset by peer)
[20:48:32] <SamuelMarks> (which I thought was sufficient to resolve any diamond problems)
[20:49:15] <nitrix> I see what's going on.
[20:50:52] <nitrix> Is the build linking version_redis with cli, or version_redis with test too? Because that's obviously why you end up with conflicting symbols.
[20:51:21] <nitrix> I would expect version_redis.o to have to symbol and then cli and test don't, but link that guy.
[20:51:23] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[20:52:00] <SamuelMarks> So my lib (version_redis) is depended on my CLI (links with) and is depended on by my test (links with). As some will use my project as library only, others will consume CLI only.
[20:52:01] <nitrix> It looks to me like cli and test both have FOO_IMPLEMENTATION enabled?
[20:52:47] <SamuelMarks> nitrix - CLI and test only call functions defined in "version_redis.h", they don't explicitly call anything from <acquire.h>
[20:53:30] <SamuelMarks> (but in "version_redis.c" the function implementations to call from acquire.h, and "version_redis.h" does have some function prototype with types from acquire.h)
[20:53:46] <nitrix> Gotcha, so I understand the design now. We just have to figure out why cli and test end up having a symbol from aquire in them.
[20:54:21] <SamuelMarks> I think this design is pretty straightforward, I refactored yesterday to have very clear separation of concerns (like I explained)
[20:55:20] <SamuelMarks> I've also tried replace "PUBLIC" with "PRIVATE" in both my `target_link_libraries("${EXEC_NAME}" PUBLIC "redis_version")`
[20:55:30] <nitrix> So, if I got this right. We should want only version_redis.c to include #acquire with IMPLEMENTATION_FOO. After that, then the cli and test can include/link the version_redis library without trouble.
[20:55:42] <SamuelMarks> (both as in, test's one and lib's one)
[20:56:03] <nitrix> (Also, why does it pass on ubuntu/mac and not windows, ha?)
[20:56:24] <SamuelMarks> nitrix - Yes, however the type is required in the function prototypes, so also needs to be in my library header
[20:56:53] <SamuelMarks> nitrix - Oh it shouldn't pass anywhere quite yet, this project is still a WiP :P
[20:57:38] <SamuelMarks> Adding: FreeBSD, OpenBSD, SunOS, Windows, Linux, macOS support
[20:58:26] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 260 seconds)
[20:58:30] <SamuelMarks> Then will use this redis project as a template to build a large number of new independent package managers à la rvm/nvm
[20:59:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:59:36] <nitrix> Oh god.
[20:59:41] <SamuelMarks> ;)
[20:59:42] <sham1> I'd use a container
[20:59:46] <sham1> I'll be honest
[21:00:06] <SamuelMarks> sham1 - I'm not anti-Docker, just think it's overused. I'll have examples showing this in a Dockerfile, in docker-compose, and in Kubernetes
[21:00:38] <SamuelMarks> Also in Vagrant and packer
[21:00:48] <nitrix> https://github.com/offscale/libacquire/blob/3cbd5d8c70f5c2e5747cf0eb592207b16b5f500e/libacquire/acquire_fileutils.h#L30-L42
[21:01:13] <SamuelMarks> nitrix - Yes that's the impl
[21:01:15] <nitrix> What the heck is this. Why do you have implementations in your header that are not static?
[21:01:33] <sham1> And why is it not guarded
[21:01:45] <SamuelMarks> sham1 - It is guarded
[21:02:02] <sham1> Yeah, by an include guard. That's the wrong guard for this
[21:02:13] <SamuelMarks> nitrix - Oh should all my header function implementations be static?
[21:02:18] * SamuelMarks can change that pretty quickly
[21:02:52] <nitrix> The guard prevents you from processing the file twice, so the compiler is happy, but the file can and will appear in different translation units and still conflict during linkage like you're seeing.
[21:03:30] <sham1> That's why STB stuff has "#ifdef FOO_IMPLEMENTATION #endif" stuff alongside include guards
[21:03:41] <SamuelMarks> nitrix - So what's the solution here? - Replace `extern` with `static`?
[21:03:41] <quartz> gdb is soooo nice.
[21:03:45] <sham1> Yes
[21:03:57] <nitrix> They would need to be marked static so that each translation unit get their own local copy of that function, or it could just go in a ...
[21:04:01] <nitrix> Oh god.
[21:04:07] <nitrix> All of those .h files have code in them.
[21:04:21] <SamuelMarks> Yes it's a header-only project, there are no .c files
[21:04:23] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[21:04:40] <nitrix> Where's the check for the ACQUIRE_IMPLEMENTATION?
[21:04:41] <SamuelMarks> (except tests and optional components like building your own OpenBSD `ftp` or FreeBSD `libfetch`)
[21:05:39] <SamuelMarks> nitrx - You mean the "acquire.h" amalgamation? - https://github.com/offscale/libacquire/blob/e354d3a/cmake/libacquire_amalgamation.cmake#L81
[21:05:48] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:05:58] <SamuelMarks> Oh wait that's a bug, I need to change that header guard name
[21:06:02] <sham1> But that's a header guard
[21:06:06] <sham1> That's not what is being asked
[21:06:09] <nitrix> I see header guards to prevent duplicate includes, I don't see how you toggle between getting only declarations or only definitions.
[21:06:20] <sham1> https://github.com/nothings/stb/blob/master/docs/stb_howto.txt#L9-L26
[21:06:29] <nitrix> Normally in C you have .c files with definitions and .h files for declarations.
[21:06:45] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[21:06:48] *** Joins: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173)
[21:07:04] <SamuelMarks> nitrix - Hmm
[21:07:09] <nitrix> If you cram everything into a .h file, that's fine, but you still keep them separate in that file with a macro to toggle between them.
[21:07:14] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 260 seconds)
[21:07:14] <nitrix> That lets you do:
[21:07:26] <nitrix> #define I_WANT_THE_IMPLEMENTATION 1
[21:07:30] <nitrix> #include "mylibrary.h"
[21:07:40] <nitrix> or simply, #include "mylibrary.h" when you don't want the implementation.
[21:07:52] *** Quits: vaio (~gary@user/ghost) (Remote host closed the connection)
[21:08:01] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[21:08:08] <nitrix> And obviously, only one file, in every executable should be setting the I_WANT_THE_IMPLEMENTATION to true.
[21:08:22] <sham1> Or just defining it
[21:08:45] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[21:09:07] *** Joins: casrshc (~qdrwqdth@31.173.87.235)
[21:09:24] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[21:09:52] <nitrix> So that's problem number #1, revisit your understanding of single-file header libraries you aren't doing that correctly.
[21:10:28] *** Joins: magla (~gelignite@55d4ce3b.access.ecotel.net)
[21:10:30] <SamuelMarks> I'm confused, in a header-only project why would people only want the prototypes, and not the implementations also?
[21:10:31] <nitrix> Problem #2, the whole shenanigans with generating exports in CMake and having functions marked with "export", I think you don't know what you're doing there.
[21:10:59] <sham1> SamuelMarks: because you still want to use the functions from other translation units other than the one where you actually put the implementation into
[21:11:15] <SamuelMarks> nitrix - I mark them with export for shared library usage (for my redis version manager, not acquire.h which is header only)
[21:11:49] <nitrix> SamuelMarks, Because you could use the library from multiple files? If I have file One.c and Two.c both using your library, and I try to link them together to build my executable, your library just screwed up my project.
[21:11:56] *** Joins: vin (~vin@user/crash)
[21:12:20] <SamuelMarks> Maybe I'm overreliant on the include guards, I thought they would stop things from being included multiple times
[21:12:20] <nitrix> SamuelMarks, I'll be getting conflicting symbols since both of them have duplicated implementations (definitions).
[21:12:33] <sham1> They don't work over translation units
[21:12:34] <nitrix> SamuelMarks, They do, PER translation unit.
[21:12:49] <nitrix> Translation unit are compiled independently.
[21:12:50] <sham1> Only if two headers include the same thing and they're included in the same translation unit, then the include guard is going to do something
[21:13:06] *** Joins: kts (~kts@103.73.237.54)
[21:13:09] <sham1> Same with #pragma once, for the record
[21:15:09] <SamuelMarks> If I used the export keyword `__attribute__((visibility("default")))`/`__declspec(dllexport)` in my header-only acquire.h would that provide the right guards here, or
[21:15:28] <nitrix> SamuelMarks, Every .c file is processed independently. If they have #includes, those gets merged in, and the final result gets compiled into a .o artifact. That's one translation unit. The header guard prevents having the same headers be processed twice, in the case where you have one header including another, which includes back the first one (accidental cycles).
[21:16:07] <sham1> SamuelMarks: https://github.com/nothings/stb/blob/master/docs/stb_howto.txt#L9-L26
[21:16:21] <nitrix> SamuelMarks, But then when those translation units are linked into a program, all the implementations are merged and you will get conflicts if there's code in the header files and two TUs included them.
[21:16:27] <sham1> That's one of the gold standards of header-only libraries
[21:17:07] <sham1> You basically would guard the implementation of is_directory with #ifdef ACQUIRE_IMPLEMENTATION #endif, within your include guards
[21:17:24] <nitrix> STB's explanation helps only if you understand the declaration/definition and/o the translation phases.
[21:18:17] <nitrix> SamuelMarks, Yes, you should have the declaration bool is_directory(const char *path); then later #ifdef IMPLEMENTATION the definition bool is_directory(const char *path) { ... } #endif
[21:19:00] <sham1> And then in the redis_version you would have a file with #define IMPLEMENTATION \n #include"aquire.h"
[21:19:15] *** Joins: Akuli (~Akuli@213.216.208.43)
[21:19:18] <SamuelMarks> sham1 - Okay I think I get it, so `#ifndef H \n #define H \n extern int f(); #ifndef F \n #define F \n int f() {return 5;} \n #endif   \n   #endif /* H */`
[21:19:21] <SamuelMarks> ?
[21:19:29] <sham1> Yes
[21:19:37] <sham1> Err, no
[21:19:49] <sham1> You don't #ifndef #define #endif the implementation guard
[21:19:55] <sham1> That's a separate thing
[21:20:21] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[21:20:22] <nitrix> SamuelMarks, https://godbolt.org/z/nfM57v7ze
[21:20:27] *** Quits: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173) (Ping timeout: 268 seconds)
[21:20:34] <sham1> #ifndef H \n #define H \n extern int f(); #ifdef F int f() {return 5;} \n #endif /* F */ \n #endif /* H */
[21:20:38] <nitrix> Whoops
[21:20:47] <nitrix> Fixed https://godbolt.org/z/Wqn5fEsYG
[21:20:56] <SamuelMarks> sham1 - But doesn't MYLIB_IMPLEMENTATION need to be defined within?
[21:21:01] <sham1> No
[21:21:04] <sham1> That's the entire point
[21:21:17] <sham1> It has to be implemented outside of the header by the translation unit that wants to host the implementation of the functions
[21:21:27] <nitrix> The user of your library will define MYLIB_IMPLEMENTATION in one file of their project to obtain the implementation.
[21:21:45] <nitrix> They choose where and when they want it, but they will do so only once.
[21:21:46] <SamuelMarks> How does the translation unit know that the impl needs to be implemented?
[21:22:09] <SamuelMarks> nitrix - Oh so you mean one impl guard for the entire header-only library? - Hmm
[21:22:20] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[21:23:06] <nitrix> It's a single controlling macro, but you can of course split your code into different files internally to your library.
[21:23:49] <nitrix> Like you can have acquire.h include acquire_one.h, acquire_two.h, etc.
[21:23:56] <SamuelMarks> Okay I'm starting to understand now. And the `static` keyword should only be applied to functions which can't be separated out like that?
[21:24:07] <nitrix> You actually don't need extern or static.
[21:24:17] <SamuelMarks> extern is implied IIRC
[21:24:35] <nitrix> I was trying to band-aid your code before I understood the bigger design issue.
[21:24:47] <nitrix> Function definitions are extern by default.
[21:25:27] <nitrix> Extern means that the symbol gets exported. So when a translation unit gets compiled, the symbols are automatically exported and visible, so other translation units are able to link to them.
[21:25:57] <nitrix> The default works fine for what you're doing. You wont need static/extern. You should revisit your cmake shenanigans.
[21:27:09] <SamuelMarks> Okay so final question before I do this "refactor"/annotation, in my project which depends on acquire, do I explicitly set "#define LIBACQUIRE_IMPLEMENTATION \n #include <acquire.h> \n #undef LIBACQUIRE_IMPLEMENTATION"?
[21:27:17] *** Joins: supernova (~quassel@2405:9800:ba11:6207:29f5:6871:138:1e85)
[21:27:21] <sham1> No need to undef it, but yes
[21:28:00] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[21:28:09] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[21:29:17] <nitrix> SamuelMarks, Yes. For each executable that uses your library, they should be the result of multiple c files, all files are able to #include the library, but only one of them will have the #define IMPLEMENTATION, because you only want the implementation once in the final executables.
[21:31:18] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:31:18] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:31:18] *** Joins: wroathe (~wroathe@user/wroathe)
[21:31:35] *** Quits: Jong (~Jong@2620:10d:c091:480::1:fe60) (Quit: Textual IRC Client: www.textualapp.com)
[21:31:40] <nitrix> For example, in the 3D game that I'm working on at the moment, I have a vendor.c TU dedicated for all the single-header libraries that I'm using. There's #define ENET_IMPL, #define STB_IMAGE_IMPL, then #includes and that's all that file does.
[21:31:44] *** Quits: kts (~kts@103.73.237.54) (Quit: Konversation terminated!)
[21:32:04] <nitrix> That then gets compiled with the rest of the game normally.
[21:32:06] *** Quits: alicef (~none@gentoo/developer/alicef) (Quit: install gentoo)
[21:32:20] <pragma-> What is the point of BOOL_MAX?
[21:32:38] <floatcomplex> nerd sniping, it seems
[21:32:42] <nitrix> That doesn't exist, does it?
[21:32:48] <pragma-> it does
[21:32:52] *** Joins: alicef (~none@gentoo/developer/alicef)
[21:33:03] *** Joins: henistein (~henistein@2001:8a0:fcbd:d801:43ad:587b:4327:a09a)
[21:33:09] <nitrix> Why? Where?
[21:33:15] <pragma-> http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2731.pdf
[21:33:30] *** Parts: henistein (~henistein@2001:8a0:fcbd:d801:43ad:587b:4327:a09a) ()
[21:33:49] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:34:24] <nitrix> I see why.
[21:35:00] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[21:35:09] <nitrix> Nevermind.
[21:35:15] *** Quits: bereft (~jim@182.253.75.235) (Ping timeout: 268 seconds)
[21:35:21] <pragma-> Why, then?
[21:35:58] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[21:36:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[21:36:32] <nitrix> Well for generics, true and false were given the type _Bool to fix issues, so maybe the BOOL_MAX is to fix similar issues on the macro side of things.
[21:36:46] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[21:36:46] <nitrix> (Like expansions with _MAX suffixes or something)
[21:37:01] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr)
[21:37:58] <Bou> You could have a system that uses ternary digits, then BOOL_MAX will be log2(3)
[21:38:24] *** Joins: seninha (~seninha@user/seninha)
[21:39:01] <ioxzev1z> Curious but why were they not called true_t and false_t to avoid collisions with existing code?
[21:39:17] <ioxzev1z> Or like __tru_g, __naw_dawg
[21:39:59] *** Joins: vicfred (~vicfred@user/vicfred)
[21:40:06] <sham1> Ternary doesn't define a Boolean algebra tho
[21:40:10] <pragma-> Seems wack that _Bool could contain anything other than 0 or 1.
[21:40:53] * SamuelMarks just finished adding those guards, now fixing tests
[21:41:00] <ioxzev1z> pragma-, isn't the point being that you can do _Bool x = 3, _Bool y = 4; if(x == y) being true
[21:41:21] <pragma-> x and y would both contain 1
[21:41:26] <sham1> But those just get coersed to 1
[21:41:44] <ioxzev1z> pragma-, right, but when you write the code, anything non-zero is true, meaning the above is true even if the values do not == each other
[21:42:11] <pragma-> right, but _Bool itself ought to contain only 0 or 1.
[21:42:13] <ioxzev1z> As long as you don't use 0, any true will equal any other true
[21:42:30] <sham1> Yeah, but you're still not assigning 3 or 4 to a _Bool, just their truthiness which for both is 1
[21:42:38] <pragma-> so it seems weird to #define BOOL_MAX 1 insinuating it could be other than 1.
[21:43:12] <sham1> Implementation defined bitflags a la FORTH?
[21:43:43] <pragma-> I'm trying to find a rationale document for BOOL_MAX without much success
[21:44:03] * pragma- considers wgetting http://www.open-std.org/jtc1/sc22/wg14/www/wg14_document_log.htm and using some kind of pdf-grep program.
[21:44:21] <sham1> "Every other integer type has one, so might as well"
[21:44:35] <sham1> That's probably the closest I can think for a rationale
[21:45:17] <ioxzev1z> Maybe it's like char in the sense that sizeof(char) is always 1 regardless of how many bits it has
[21:45:29] <ioxzev1z> So BOOL_MAX being 1 is some sanity value
[21:45:45] <pragma-> ioxzev1z: but there's no #define CHAR_WIDTH 1 macro
[21:45:47] <sham1> Well it would make no sense to have a bool be any bigger than the smallest possible non-bitfield object
[21:45:56] <pragma-> (there's a BOOL_WIDTH macro too, btw)
[21:46:19] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:152d:b032:78f3:27f0)
[21:46:41] <nomagno> pragma- WHAT
[21:46:42] <nomagno> BOOL_WIDTH !?
[21:46:44] <ioxzev1z> pragma-, right, I never said it was an exact mirror of defines
[21:46:48] <pragma-> oh there is a CHAR_WIDTH now
[21:46:49] <fizzie> Yeah, and it doesn't even do that thing where it says "the others are implementation-defined magnitures but these ones are exact".
[21:46:55] <sham1> Well TBF, you don't need a CHAR_WIDTH since it is 1 by definition. A _Bool meanwhile could be 4 or whatever, even though there would be no point
[21:47:09] <pragma-> well, CHAR_WIDTH does exist now
[21:47:14] <ioxzev1z> sham1, assuming you mean bytes, who uses 32-bit bools?
[21:47:31] <fizzie> The *width* of an integer type is measured in bits.
[21:47:35] <sham1> ioxzev1z: that's my point. No one, but it could be that
[21:47:43] <fizzie> So CHAR_WIDTH isn't 1, it's CHAR_BIT.
[21:47:50] *** Joins: damxsa_ (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606)
[21:47:51] <pragma-> it seem's to be an alias for CHAR_BIT
[21:48:06] <pragma-> s/'//
[21:48:16] <sham1> Well in that case yeah, is BOOL_WIDTH CHAR_BIT by any chance?
[21:48:38] <fizzie> No, it's 1.
[21:48:51] <fizzie> Well, it's *listed* as 1, under the same rule that the value is a lower bound.
[21:48:54] <pragma-> fresh working draft btw, hot off the october 18th presses: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2731.pdf
[21:48:58] <sham1> Oh okay yeah, because I Suppose it defines the amount of value bits.
[21:49:06] <pragma-> ,c23
[21:49:06] <candide> C23 Charter: http://open-std.org/JTC1/SC22/WG14/www/docs/n2611.htm -- Draft: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2731.pdf
[21:49:22] *** Joins: Samian (~s@user/samian)
[21:49:53] <nomagno> Does C99 offer any guarantee about the size of types other than 'at least as big as a char'?
[21:50:38] <fizzie> "The number of value bits N is called the /width/ of the unsigned integer type." (For signed types, width is the combined number of value and sign bits; precision is the number of value bits; as a corollary the width of a signed type is one greater than its precision.)
[21:50:41] <sham1> Good to see that the draft's page numbers are still lies
[21:51:17] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:152d:b032:78f3:27f0) (Ping timeout: 268 seconds)
[21:51:40] <pragma-> sham1: what lies?
[21:51:40] *** Quits: damxsa_ (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606) (Client Quit)
[21:51:49] <SamuelMarks> nitrix , sham1 - Okay fixed the libacquire library, now to try and see!
[21:51:54] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606)
[21:51:56] *** Joins: MrFantastik (~f@c-24-6-209-143.hsd1.ca.comcast.net)
[21:52:07] <fizzie> The <stdint.h> section on limits says "exactly X" for those limits that are exact, so *not* doing that for the <limits.h> section on _Bool does make it sound a lot like they might be greater, which is just odd.
[21:52:26] <SamuelMarks> nomagno - Yeah I think a short has to fit within an int, and an int has to fit within a long, and a long has to fit within a long long
[21:52:31] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[21:52:35] <pragma-> noice
[21:52:41] <nomagno> fizzie: Does the standard actually define any minimum absolute widths?
[21:52:43] <sham1> For example, Section 6 is on page 33 according to the table of contents and all, meanwhile my PDF reader shows 49
[21:52:44] <pragma-> c23 removes support for k&r style functions
[21:53:01] <SamuelMarks> pragma- You mean no types on prototype?
[21:53:08] <pragma-> right, identifier lists
[21:53:09] *** Quits: Arthuria (~Arthuria@user/arthuria) (Ping timeout: 268 seconds)
[21:53:20] <sham1> Good riddance
[21:53:37] <pragma-> now i have a real excuse for not supporting them in ,cc
[21:53:43] <SamuelMarks> I want my triglyphs back
[21:54:16] <fizzie> nomagno: What do you mean? All the integer types have a lower bound to what their implementation-defined "absolute" width is: 1, 8, 16, 16, 32 and 64 for bool, char, unsigned short, unsigned int, unsigned long and unsigned long long, respectively.
[21:55:08] <nomagno> fizzie: I'm looking for this on the C99 standard, but I suck at searching through PDFs
[21:55:09] <sham1> I would love to have the iso646 keywords integrated properly into the language, but that will never happen and that makes me sad
[21:55:55] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[21:55:56] <fizzie> nomagno: In pre-C23 versions, the bounds were given for FOO_MIN and FOO_MAX instead, which *implies* a lower bound for the width.
[21:56:10] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[21:57:00] <fizzie> (C11 5.2.4.2.1p1: "Their implementation-defined values shall be equal or greater in magnitude (absolute value) to those shown, with the same sign.")
[21:57:16] <pragma-> sham1: yeah, the first few pages of the pdf are in small roman numerals
[21:57:34] <pragma-> sham1: the numbers in the corners of the pages do line up with the table of contents and the index
[21:57:42] <nomagno> I am looking for something in C99 specifically
[21:57:52] <SamuelMarks> sham1 , nitrix - Heyyyyy sweet! - That solution you recommended worked
[21:57:58] <sham1> Yeah, and I don't know if it's just Adobe reader on Android being screwy, but those Roman numeral page numbers don't work properly on this
[21:58:06] <sham1> SamuelMarks: nice
[21:58:19] <nomagno> sham1: In my experience, it just doesn't work.
[21:58:20] <pragma-> yeah, your pdf reader seems to be starting the first page as page 1 instead of where the real page 1 begins within the pdf
[21:58:22] <fizzie> The _WIDTH constants are new, but (other than that bool thing) don't actually add anything new, because you need so and so many value bits to represent the required range of values.
[21:58:39] <pragma-> you can probably set an offset somewhere in the options/settings
[21:58:50] <SamuelMarks> Oh wait I still had `BUILD_SHARED_LIBS` enabled, let me double check
[21:59:00] <fizzie> My PDF reader shows both the "logical" and "physical" page numbers for the new drafts, so I think they've gotten the metadata done correctly, because I don't think it's recognizing that from the actual printed page numbers.
[21:59:08] <sham1> You'd think that Adobe's reader would just work with that, but nope
[21:59:14] <nomagno> And what is the required range of values? Again, I have NO IDEA how to search trough a PDF
[21:59:22] <nomagno> why can't the make it at least HTML or something more plain-text?
[21:59:30] <fizzie> For example, for the first page of section 6, it shows [32 (47/647)].
[22:00:07] *** Joins: quartz (~quartz@user/quartz)
[22:00:09] <fizzie> nomagno: In C99, it's also in 5.2.4.2.1p1.
[22:00:58] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[22:01:32] <fizzie> Also, in the C99 and C11 drafts, my PDF reader *does* show the wrong page numbers (just the consecutive numbering from 1, not the one that matches the printed ones), so that's something they improved when they switched to the LaTeX-based PDFs.
[22:02:00] <pragma-> hm, i'm not sure what pdf reader firefox is using. it says "open in firefox" for the PDF association. it's showing the right page numbers: https://i.imgur.com/RqFfopn.png
[22:02:23] <nomagno> Is their LaTeX-based 'source code' for the standard available or something?
[22:02:27] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[22:02:28] <sham1> I've noticed similar annoyances with stuff like Zathura, when I've been working on my BSc dissertation, so for that I can purely blame the PDF reader. But you'd think that Adobe would work since it's their bloody document format
[22:02:36] <nomagno> Can we seriously not generate something that sucks less than a PDF?
[22:02:39] <fizzie> No, the LaTeX source is a closely-held secret.
[22:02:58] <SamuelMarks> sham1 , nitrix - Spoke too soon :( - Committed it up https://github.com/offscale/version_redis - same linker error as before
[22:02:59] <fizzie> You can use the unofficial HTML conversions, they're not bad.
[22:02:59] <candide> Title of SamuelMarks's link: GitHub - offscale/version_redis: Redis package manager
[22:03:10] <fizzie> ,c11
[22:03:10] <candide> C1X/C11 draft: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf - C1X Charter: http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1250.pdf - C1X Overview: http://en.wikipedia.org/wiki/C1X - Changes from C99: http://en.wikipedia.org/wiki/C1X#Changes_from_C99 - C Overview: http://en.wikipedia.org/wiki/C_programming - HTML draft: http://port70.net/~nsz/c/c11/n1570.html
[22:03:14] <fizzie> The last link of that and so on.
[22:03:15] *** Joins: alphasierra (~alphasier@2405:201:e:4d:9f02:dbb3:fb6b:643f)
[22:03:32] <SamuelMarks> Need more pdftex? - You can also do some cool stuff with pandoc
[22:03:47] <pragma-> port70.net/~nsz/ only has the n2434.pdf for c2x
[22:03:47] <SamuelMarks> I wrote an RFC compatible generator years ago that takes markdown as input
[22:03:52] <sham1> C standard generated from pandoc markdown when
[22:04:11] <SamuelMarks> just meming about shitty PDF generation
[22:04:18] <fizzie> Next century, maybe? ;)
[22:04:59] *** Quits: alphasierra (~alphasier@2405:201:e:4d:9f02:dbb3:fb6b:643f) (Client Quit)
[22:05:19] <SamuelMarks> So I only use `#include <acquire.h>` once in my project. It's a header-only dependency. I now unguard it with `#define LIBACQUIRE_IMPLEMENTATION`, but it still gives me ld: 23 duplicate symbols for architecture x86_64
[22:05:41] *** Joins: begriffs (~begriffs@user/begriffs)
[22:07:35] <pragma-> ,chist
[22:07:35] <candide> The Development of the C Language, by Dennis M. Ritchie: http://www.bell-labs.com/usr/dmr/www/chist.html
[22:07:55] <pragma-> hm
[22:08:01] <SamuelMarks> ,christ
[22:08:23] <pragma-> ,change chist s/$/ or http://port70.net/~nsz/c/c89/dmr_the_development_of_the_c_language.pdf/
[22:08:23] <candide> Changed: chist is /say The Development of the C Language, by Dennis M. Ritchie: http://www.bell-labs.com/usr/dmr/www/chist.html or http://port70.net/~nsz/c/c89/dmr_the_development_of_the_c_language.pdf
[22:09:01] <nomagno> SamuelMarks: the preprocessor works before compile-time, so you need to have done '#define LIBACQUIRE_IMPLEMENTATION' BEFORE including the header in that file
[22:09:52] <SamuelMarks> nomagno - I do https://github.com/offscale/version_redis/blob/8c548f7/src/lib/version_redis.h#L8
[22:11:21] <nomagno> Huh, weird
[22:11:29] <sham1> SamuelMarks: that's wrong, you should be doing that definition within a C file. You can generate one with cmake if you with, but it needs to be its own translation unit
[22:12:10] <SamuelMarks> ah
[22:12:52] <SamuelMarks> But my header needs a type from the acquire.h header, how do I get that? - Or in the .c do  I undef the include header so I can include the impl?
[22:13:25] *** Joins: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net)
[22:13:26] <sham1> You just include the header file without the #define before it, and you'll get the types just fine
[22:13:41] <SamuelMarks> sham1 - yes but my header has an include guard also
[22:14:08] <SamuelMarks> which means if I include it without LIBACQUIRE_IMPLEMENTATION defined, LIBACQUIRE_IMPLEMENTATION defined later won't work unless I also undef the include header, right?
[22:14:09] <sham1> That still doesn't matter, because an include guard doesn't work across multiple translation units
[22:14:14] <SamuelMarks> Hmm
[22:14:31] *** Joins: alphasierra (~alphasier@2405:201:e:4d:9f02:dbb3:fb6b:643f)
[22:14:51] <SamuelMarks> Oh I can always include <acquire.h> before I include "version_redis.h"
[22:14:56] <sham1> You're confusing yourself too much with the include guards
[22:15:12] <sham1> And yes, you can do that. For *that* the include guards work
[22:15:15] <SamuelMarks> That worked
[22:15:29] <SamuelMarks> Okay cool I think I'm starting to get my head around this
[22:17:17] <sham1> The idea of an include guard is just that if you have two files, a.h and b.h, which both include c.h, cmh's declarations won't get done twice
[22:19:28] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[22:19:33] <nomagno> https://github.com/orangeduck/CPP_COMPLETE
[22:19:53] <nomagno> Does this mean I can write a C interpreter in the C Preprocessor?
[22:20:13] *** Joins: neutral (~user@user/neutral)
[22:20:26] <cvmn> any idea how to implement fast parallel file download?  should i send multiple files over the same tcp connection?  multiple tcp connections?  maybe tcp isn't the right tool?
[22:20:30] *** Joins: Atque (~Atque@user/atque)
[22:21:02] <SamuelMarks> cvmn - aria2c does a good job, also libcurl's multi interface is reasonably nice (and in C)
[22:21:52] <SamuelMarks> cvmn - I've stubbed the function for multi-download in my libacquire, if you feel like contributing :P
[22:22:56] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[22:22:57] *** Joins: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net)
[22:22:58] *** Quits: alphasierra (~alphasier@2405:201:e:4d:9f02:dbb3:fb6b:643f) (Quit: Leaving)
[22:23:37] <cvmn> SamuelMarks: but these are implementing existing protocols like http/ftp.  i'm not constrained by that.  i can make my own.
[22:23:47] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 264 seconds)
[22:23:55] <cvmn> i just cannot make layer 4 protocols.
[22:24:05] <nomagno> Is there any way to have a function be 'inherently' tied to a function pointer?
[22:24:15] <sham1> You could always have n sockets for n files
[22:24:35] <sham1> And then have 1 thread for each file
[22:24:43] <sham1> It's resource intensive, but it works
[22:27:02] *** Quits: gcd (~gcd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Remote host closed the connection)
[22:27:09] <nomagno> cvmn: Making a layer 4 protocol isn't that hard (as long as you offer the same or fewer guarantees than UDP). You just have to accept it'll never be implemented :P
[22:27:15] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[22:27:36] <sham1> Yeah, your packages won't get routed properly, so you'd want to be on-top of TCP or UDP at least
[22:28:10] <nomagno> That's something I don't understand though. Why are routers picky about which IP packets they transmit?
[22:28:13] <nomagno> IP is IP
[22:28:14] <SamuelMarks> cvmn - What guarantees do you want?
[22:29:04] <sham1> nomagno: they might drop your packets if your IP header has an unknown protocol in the proto field
[22:29:31] <nomagno> I am asking why, not if
[22:29:47] <apotheon> It'd be nice if RevZilla ran on top of TCP.
[22:29:48] <fizzie> You can't NAT "just IP", I'm sure that's a consideration in the current shape of the internet.
[22:29:50] <sham1> *shrug* maybe DOS protection, maybe somethng else
[22:29:56] <sham1> Also that
[22:30:44] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:31:11] <SamuelMarks> cvmn: Do you want to guarantee reliable, ordered delivery?
[22:31:15] <cvmn> fizzie: you can nat just ip.  it depends on the nat type.
[22:31:35] *** Joins: V-T60 (~v@91.203.24.166)
[22:31:38] <SamuelMarks> Are you trying to mirror filesystems?
[22:31:50] <nomagno> IP packets are pretty cool though! 128 bits of minimalistic glory
[22:31:53] <cvmn> SamuelMarks: not necessarily.  i just want fast delivery so that each file is in order.  but i don't care about the order of other files.
[22:32:12] <cvmn> SamuelMarks: no, not mirroring.  trying to implement an alternative to http.  i want to wage a war on w3c.
[22:33:06] <nomagno> cvmn: An 'alternative to HTTP' ? You definitely want to look into QUIC or TCP as the transport layer
[22:33:07] <fizzie> I don't think I had any trouble getting protocol 41 (IPv4-in-IPv6) routed over the public Internet back when I had a tunnel for IPv6.
[22:33:07] <sham1> I mean, you could always just use HTTP 0.9, which doesn't have all the faff even HTTP 1.0 had
[22:33:36] <sham1> You only get hypertext
[22:33:54] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::3)
[22:34:13] <nomagno> sham1: Making small-scale protocols just to show the middle finger to big organizations IS an end onto itself though
[22:34:18] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[22:34:22] <sham1> I suppose
[22:34:25] <nomagno> :P
[22:35:03] <fizzie> Isn't Gemini the alternative to HTTP? (Just kidding.)
[22:35:20] <nomagno> It mandates TLS
[22:35:25] <nomagno> So no
[22:35:47] <sham1> Why would you want to replace TCP
[22:36:23] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 264 seconds)
[22:36:24] <sham1> You're on the war path against the W3C and WHATWG, not the IETF
[22:36:27] <nomagno> sham1: No one talked about making a new transport layer though
[22:36:39] <sham1> Oh, I misread
[22:36:41] <sham1> TLS
[22:36:47] <sham1> I misread TLS as TCP
[22:36:55] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 268 seconds)
[22:37:14] <floatcomplex> i thought tcp was not cool anymore for http stuff
[22:37:38] <SamuelMarks> There are a bunch of old protocols that are reasonably fast
[22:37:38] <sham1> That's just Google being Google and trying to force their stuff down people's troats
[22:37:48] <SamuelMarks> But everyone just thinks UDP and TCP are all there is to choose from
[22:37:51] <nomagno> I had to go and pick the biggest bully as the focus of my protocol-making anger: ICANN
[22:38:06] <floatcomplex> but udp IS cool
[22:38:13] <sham1> Well if we're going with this, down with IANA!
[22:38:33] <nomagno> IANA is part of ICANN
[22:38:58] <nomagno> I specifically make everything in as much of a layer3-agnostic way as possible
[22:39:02] <neutral> SamuelMarks: what is more lower lever than tcp and udp
[22:39:10] <nomagno> It's not that I don't like the IEEE, they're just collateral damages
[22:39:19] *** Joins: Crescendo (~Crescendo@user/crescendo)
[22:39:32] <nomagno> The objective here is decentralization, which ICANN is the opposite of!
[22:39:57] <SamuelMarks> neutral OSI layers are nice reference points
[22:40:03] <nomagno> neutral: below TCP and UDP you have the Internet Protocol
[22:40:35] <floatcomplex> tcp is just not a great impedance match to every communication problem
[22:40:37] <SamuelMarks> https://en.wikipedia.org/wiki/OSI_model
[22:40:39] <neutral> ah yes Osi
[22:40:51] <sham1> If we're talking about the OSI model specifically, it's a shame that Layer 5 has fallen out of use, although being used for SOCK is nice
[22:40:56] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[22:41:12] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:41:18] <sham1> SOCKS proxies are fun like that
[22:41:23] <SamuelMarks> You can do a surprising amount at layer 1, but you basically need to be a physicist + electrical engineer + computer engineer
[22:41:32] <leonardus> is there any way in C to space out hex numbers? e.g. if I want to write `0x 1000 0010`
[22:41:40] <sham1> Sadly no
[22:41:46] <LiaoTao> SamuelMarks, No kidding
[22:41:56] <SamuelMarks> I saw a guy use mirrors to route network traffic with a layer 1/2 switch
[22:42:05] <LiaoTao> Layer 2 and 3 are the most fun anyway
[22:42:07] <SamuelMarks> crazy work
[22:42:14] <sham1> C++ has the ability to use single-quotes as "number separators" in number literals, but that ability was never brought to C
[22:42:21] <sham1> Not even C23 is going to have it
[22:42:24] *** Joins: pulse (~pulse@user/pulse)
[22:42:28] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[22:43:15] <SamuelMarks> sham1 - I wonder if C23 is going to specify what order arguments are evaluated in (and other comma operator things)
[22:43:18] <sham1> Well, digit separator, but yeah. The point is that C doesn't have those
[22:43:22] <earnestly> (Ada got this right)
[22:43:27] <sham1> Yes it did
[22:43:31] <SamuelMarks> rly?
[22:43:48] <sham1> Underscores
[22:43:48] *** Joins: constxo (~brad@192.75.101.178)
[22:44:05] <sham1> 1_000_000 is a valid integer literal in ADA, alongside other languages that stole that syntax
[22:44:22] <nomagno> Alright, I was lying. My protocol is high-level for game communication, so it technically only mandates ASCII encoding and a stateless two-way communication link
[22:44:27] <SamuelMarks> Honestly I would be happy if C had proper pattern matching, Scala style. But I know no one else wants that but me :P
[22:44:50] *** Quits: supernova (~quassel@2405:9800:ba11:6207:29f5:6871:138:1e85) (Remote host closed the connection)
[22:44:53] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[22:45:07] *** Quits: Haxxa (~Haxxa@122.199.46.64) (Quit: Haxxa flies away.)
[22:45:17] <sham1> Pattern matching would be weird in C because we don't have stuff like sum types or anything like that. It'd feel out of place
[22:45:19] <SamuelMarks> They should also standardise collections (BSD does… but I wouldn't want to force on one implementation like rb tree), and 
[22:45:38] <floatcomplex> wtf slow down
[22:45:52] <earnestly> Ada also allows binary literals and such, it's quite nice for low level programming
[22:45:56] * SamuelMarks was going to reference CLI argument handling
[22:45:59] <SamuelMarks> nxt
[22:46:14] <sham1> Well at least C is going to get binary literals in C23. Finally
[22:46:20] <SamuelMarks> nice
[22:46:46] <sham1> Decoding UTF-8 will finally not be muddled by having to remember how to do the mask values properly
[22:46:48] *** Quits: constxd (~brad@192.75.101.178) (Ping timeout: 268 seconds)
[22:46:49] <LiaoTao> Is Ada even worth using with the free software toolchain?
[22:46:57] <sham1> I'd say so
[22:47:11] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:47:15] <sham1> Adafruit of course wants you to use their stuff, but the GNAT is good
[22:47:16] <earnestly> What I mean: https://0x0.st/zf8h.txt
[22:47:25] <earnestly> Adafruit isn't related to Ada lol
[22:47:31] <earnestly> Adacore if you mean
[22:47:44] <sham1> Yes
[22:47:51] <sham1> The latter. Didn't remember the company's name
[22:48:01] <earnestly> They keep pottering along, they're on github now
[22:48:09] <sham1> Adafruit does stuff like serial cable stuff
[22:48:14] *** Joins: Haxxa (~Haxxa@122.199.46.64)
[22:48:20] <earnestly> General electronics stuff
[22:48:22] <sham1> Yeah
[22:49:00] <SamuelMarks> There are some languages with batteries included, like Python. Networking, GUI, CLI, all that fun stuff. An official C extensions specification for all of those would be nice. Separate to stdlib of course
[22:49:28] <sham1> Just make POSIX an official part of the C standard /s
[22:49:43] <floatcomplex> does that mean you to have to fill out extra paperwork to ship stuff that uses python
[22:49:46] <SamuelMarks> POSIX is too low level IMHO
[22:49:55] <SamuelMarks> floatcomplex eh?
[22:50:09] <floatcomplex> SamuelMarks: because of the batteries
[22:50:14] <sham1> I think it just involves sending more license files
[22:50:26] <sham1> Most of which would be basically duplicates
[22:50:33] <SamuelMarks> cvmn - Have you considered RDP?
[22:50:49] <SamuelMarks> floatcomplex: you should be charged
[22:50:55] <cvmn> rdp?  remote desktop protocol?
[22:51:59] <SamuelMarks> cvmn - https://en.wikipedia.org/wiki/Reliable_Data_Protocol
[22:52:10] <sham1> Now that's an obscure protocol
[22:52:44] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[22:52:49] <SamuelMarks> :P
[22:52:58] <sham1> Anyway, rsync
[22:53:00] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[22:53:01] <sham1> rsync is nice
[22:53:27] <SamuelMarks> but not cross-platform
[22:53:35] <sham1> True
[22:53:50] <fizzie> Is SCTP still going strong? I remember it had multihoming.
[22:54:03] <SamuelMarks> yeah it's going strong IIRC
[22:54:12] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 268 seconds)
[22:54:29] <floatcomplex> does windows still not ship with rsync? it ships with a fully functional openssh client afaik
[22:54:57] <sham1> Maybe in Windows 12 eventually
[22:55:10] <SamuelMarks> no rsync on windows, the only one avail. is cygwin, msys, or a proprietary
[22:55:42] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[22:56:12] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[22:57:14] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[22:57:16] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[22:57:25] <SamuelMarks> floatcomplex - Windows also ships with curl now
[22:57:43] <floatcomplex> neat
[22:57:45] <sham1> Thankfully curl has a license that allows it
[22:58:00] <floatcomplex> most things ship with curl
[22:58:11] <floatcomplex> couple things shipped to mars with curl aboard
[22:58:12] *** Joins: shivesh (~shivesh@user/shivesh)
[22:58:24] <SamuelMarks> > OpenSSH-based client and server programs have been included in Windows 10 since version 1803
[22:58:46] <SamuelMarks> floatcomplex - Oh maybe that's why I got the Mars Rover thing on my GitHub
[22:59:03] *** Joins: NEYi (~NEYi@109.251.216.38)
[22:59:04] *** Joins: Macuser (~Macuser@216.30.159.201)
[22:59:17] *** Joins: pgib (~textual@99-148-134-85.lightspeed.knvltn.sbcglobal.net)
[22:59:25] <SamuelMarks> I mean, scp isn't bad, rsync is nice though
[22:59:59] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:ed1f:e7c0:e200:1095) (Remote host closed the connection)
[23:00:19] <apotheon> 19:28 < floatcomplex> couple things shipped to mars with curl aboard
[23:00:20] <apotheon> nice
[23:00:47] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:02:06] <quartz> Hi. I'm writing this program that reads data in from a binary database and puts the data into a linked list. I'm using this API: https://bpa.st/ET4Q  The program searches the linked list for user input and returns a match. This is the program I wrote: https://bpa.st/4OMA   When I run valgrind, it reports a memory error at line 33 where I malloc some space for a new structure.
[23:02:46] <quartz> This is the valgrind error: https://bpa.st/6FFQ  I can't figure out why I'm getting this error. I've tried free(entry) at the end of main, but gcc throws an error.
[23:02:50] <sham1> Your earlier link doesn't work
[23:03:06] <quartz> Oh
[23:03:40] <quartz> This is the api: https://bpa.st/3UIA
[23:03:50] <SamuelMarks> quartz: That's a lot of magic numbers, you might want to throw some #defines
[23:04:08] <sham1> Or enums, since those do numeric constants
[23:05:08] <SamuelMarks> Also `char *searchStr = malloc(5);` really? - I overuse the stack but this is ridiculous
[23:05:10] <quartz> SamuelMarks: Yeah true, fread will read in 40 bytes at a time.
[23:05:44] <quartz> Because each entry in the database is 40 bytes. It will contain a name and message
[23:05:47] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Ping timeout: 264 seconds)
[23:05:54] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 268 seconds)
[23:06:03] <quartz> SamuelMarks: So you're saying I need only a char searchStr[4];
[23:06:13] <quartz> char[4] searchStr;
[23:06:18] <SamuelMarks> quartz - Yeah so just replace all magic numbers in your program with vars (either from enums, ints, #defines, or whatever)
[23:06:19] <cvmn> any more compact than udp protocol?  i dislike that udp has checksum field
[23:06:22] <SamuelMarks> quartz: yeah
[23:06:40] <SamuelMarks> cvmn There are some micro UDP protocols
[23:06:44] <floatcomplex> i want to see what happens with someone turns in homework that liberally uses bool and the values assigned to it are either 0 or BOOL_MAX
[23:06:46] <quartz> SamuelMarks: But than what will I pass into strstr()? that function requires a string pointer
[23:06:51] <SamuelMarks> cast it
[23:06:58] <SamuelMarks> or strcpy into it
[23:07:00] <SamuelMarks> or whatever
[23:07:19] <SamuelMarks> or loop it
[23:07:32] <SamuelMarks> but yeah cast it is the most trivial solution
[23:07:37] <sham1> BOOL_MIN, BOOL_MAX
[23:07:52] <floatcomplex> sham1: i was relieved to see that BOOL_MIN is not a thing
[23:07:58] <sham1> Oh
[23:09:01] <quartz> Ok. But I still don't get why it has a problem with line 33
[23:09:22] <quartz> It is suppose to be freed when I call freeAllNodes()
[23:09:39] <quartz> removeAllNodes();
[23:09:40] <sham1> Well clearly it isn't
[23:10:01] <quartz> True :)
[23:10:11] <floatcomplex> quartz: what error is it printing for line 33?
[23:10:15] <floatcomplex> i don't see that in any of your links
[23:10:38] <quartz> https://bpa.st/6FFQ
[23:10:45] <quartz> It says line 34 but really its at 33
[23:10:57] <quartz> struct MdbRec *entry = malloc(sizeof(*entry));
[23:11:02] <sham1> quartz: hint, removeAllNodes calls popFront in a loop. You need to look at the popFront
[23:11:05] <floatcomplex> you're misinterpreting the error message
[23:11:09] <SamuelMarks> cvmn UDP-Lite still has a 16-bit checksum field, but UDP's data checksum is technically optional
[23:11:12] <floatcomplex> quartz: the error does not occur at that line
[23:11:21] <floatcomplex> the error is that memory allocated at that line is never freed later
[23:11:30] <cvmn> SamuelMarks: by filling it with zeros?  
[23:11:38] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[23:11:49] <quartz> floatcomplex: Yes, that's what I meant.
[23:12:08] <quartz> Ohhhh
[23:12:18] <quartz> popFront() never frees the data, just returns it :(
[23:12:27] <sham1> Yah
[23:13:09] <SamuelMarks> cvmn - Keep in mind that you can only disable it on IPv4
[23:13:17] <quartz> So... I need to while loop through the entire linked list and free(popFront())? What good is removeAllNodes lol
[23:13:23] *** justache is now known as justUnited
[23:13:25] <cvmn> SamuelMarks: ipv6?
[23:13:34] <sham1> quartz: you tell me
[23:13:36] <floatcomplex> you shouldn't need a remove all nodes function, correct
[23:13:39] *** Joins: strajder (~strajder@user/strajder)
[23:14:11] <quartz> floatcomplex: But how else can I free the data stored in those nodes?
[23:14:17] <quartz> free(removeAllNodes())
[23:14:20] <SamuelMarks> cvmn: It is mandatory in IPv6
[23:14:30] <SamuelMarks> but yeah, just zero it out if you don't want it in v4
[23:14:36] <sham1> At the bottom of your program you call popFront in a loop, and free its return value
[23:14:38] <floatcomplex> quartz: whenever you pop a node, you do whatever with it, and then free it
[23:14:45] <floatcomplex> before popping another one
[23:15:13] <quartz> sham1: Won't free(removeAllNodes(&list)); just do that?
[23:15:18] <sham1> No
[23:15:25] <sham1> Because that would just return one pointer
[23:15:35] <sham1> You'd need to somehow return all pointers, which is not possible
[23:15:47] <quartz> Uhhh
[23:16:11] <sham1> You need to return all the pointers to your databse rows
[23:16:21] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[23:17:39] <quartz> Uhhhhhhh
[23:17:41] <sham1> So if you really want to have a removeAllNodes function, the inside would be something like `while (notEmpty(*list)) free(popFront(list));` but then again, why would you need a function for just iterating over your entire list, and removing things
[23:18:04] *** Quits: casrshc (~qdrwqdth@31.173.87.235) (Remote host closed the connection)
[23:18:30] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[23:18:53] <quartz> sham1: Yeah I don't get what the point of removeAllNodes() is....
[23:19:02] <sham1> And having such a function where you can't even take in a custom destructor function
[23:19:03] *** Joins: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3)
[23:20:26] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[23:20:43] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[23:21:05] *** Joins: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de)
[23:22:04] <nomagno> sham1: OO destructor-ish?
[23:22:19] <nomagno> Oh you already mentioned that
[23:22:34] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 268 seconds)
[23:22:48] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[23:23:05] <nomagno> Well you can definitely have a function pointer in a struct. That is definitely very function-independent! Only the type signature needs to match
[23:24:03] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[23:25:20] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[23:26:53] *** Joins: Raguile (~Raguile@user/raguile)
[23:29:07] <quartz> sham1: So the removeAllNodes() function is like uselesss here
[23:29:10] *** Joins: mrig (~mrig@amarseille-658-1-164-72.w86-198.abo.wanadoo.fr)
[23:29:18] <sham1> Yes
[23:29:34] <quartz> I'm just having a hard time understanding why
[23:29:51] <quartz> Maybe I DON'T need to malloc entry?
[23:30:03] <quartz> But if I don't, the program breaks....
[23:30:14] <sham1> You do, if you don't want to incorporate the database entry into the list node proper
[23:30:59] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[23:31:22] <nomagno> The only time you really HAVE TO malloc something is when the declaration of a variable is inside a loop, or you are returning a pointer, right?
[23:31:23] <quartz> I do want to do that, so I must malloc...
[23:32:05] *** Quits: mrig (~mrig@amarseille-658-1-164-72.w86-198.abo.wanadoo.fr) (Changing host)
[23:32:05] *** Joins: mrig (~mrig@user/mrig)
[23:33:39] <quartz> nomagno: I'm sorry, that's something I wanted to know myself. When is it necessary to malloc something...
[23:35:11] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::3) (Ping timeout: 264 seconds)
[23:36:00] <cvmn> SamuelMarks: any reason why udp's checksum is mandatory with ipv6?
[23:37:33] <SamuelMarks> cvmn - https://www.ietf.org/archive/id/draft-ietf-6man-udpzero-01.html
[23:37:33] <candide> Title of SamuelMarks's link: IPv6 UDP Checksum Considerations
[23:39:09] * SamuelMarks drops mic
[23:40:05] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:41:22] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Quit: leaving)
[23:41:41] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 268 seconds)
[23:42:06] *** Quits: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net) (Quit: Leaving)
[23:44:21] *** Joins: [SyntaxError] (~user@user/syntaxerror/x-9308191)
[23:46:15] *** Joins: mjbatty (~mjbatty@82.2.17.205)
[23:46:40] *** Joins: kish` (~aqua@user/aqua)
[23:46:50] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[23:47:01] <vin> If I have a list of variable sized files and I know the starting and ehd ending offset, is there a easy way to identify which file does these offests belong to?
[23:47:24] *** Joins: kish` (~aqua@user/aqua)
[23:48:45] *** Parts: davidfetter (~davidfett@xvm-110-146.dc2.ghst.net) ()
[23:49:24] *** Joins: plastico (~plastico@neomutt/plastico)
[23:50:44] *** Quits: kurfen_ (~kurfen@45.152.181.22) (Quit: ZNC 1.8.2 - https://znc.in)
[23:51:13] *** Joins: x11ff (~x11ff@151.250.201.160)
[23:51:38] *** Joins: uniquepointer (~uniquepoi@190.218.240.164)
[23:52:46] *** Joins: kurfen (~kurfen@45.152.181.20)
[23:54:02] *** Joins: Betal (~Betal@user/betal)
[23:54:38] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[23:56:50] *** Quits: [SyntaxError] (~user@user/syntaxerror/x-9308191) (Quit: see you soon)
