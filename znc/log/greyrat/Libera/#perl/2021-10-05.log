[00:00:05] *** Quits: daimbag (daimbag@2607:5300:60:21b::1) (Ping timeout: 252 seconds)
[00:00:25] <phryk> Kobaz: Because everything in Perl is TIMTOWTDI? :F
[00:00:25] <gordonfish> So either \( and \), [(] and [)], or \Q(\E and \Q)\E
[00:00:55] <phryk> huh, with q() only the thing that shouldn't match matches… :F
[00:00:59] *** Joins: daimbag (daimbag@2607:5300:60:21b::1)
[00:01:14] <phryk> lemme look up the specifics of ^ i guess ^^
[00:01:20] <Kobaz> phryk: heh, i had to google that
[00:01:35] <Kobaz> phryk: not q()  we're talking about \Q
[00:01:52] <Kobaz> ( and ) are special regex pattern tokens
[00:02:08] <Kobaz> so if you don't want to use them as 'commands' or 'tokens' then escape them
[00:02:13] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[00:02:22] <phryk> Exactly, that's why I escaped them, but that didn't make any difference.
[00:02:30] <Kobaz> then something else is wrong
[00:02:35] <Kobaz> test your regex using a tool first
[00:02:43] <Kobaz> https://regex101.com/
[00:02:44] <Paperbot_> Link title(s): [ regex101: build, test, and debug regex ]
[00:02:48] <Kobaz> that'll help sanity check
[00:03:00] <Kobaz> that it's not a perl thing you're fighting
[00:03:04] <Kobaz> just pure regex
[00:03:33] <Kobaz> PCRE which is close enough to perl that you should be fine unless you're specifically relying on perl-specific regex
[00:03:39] *** Joins: pucara (~i@181.111.22.195)
[00:04:05] <phryk> Kobaz: Well, how would I even know? I'd rather test with actual perl because then i can be sure it actually works in perl
[00:04:12] <Kobaz> right but
[00:04:14] <phryk> kinda weird that this tool doesn't support perl itself…
[00:04:18] <Kobaz> what's your match, to start with?
[00:04:31] <phryk> yeah no, had too many subtle syntax differences with regexps…
[00:04:33] <phryk> my $re = /^foo()$/;
[00:04:41] <Kobaz> okay well, perl regex is not your problem there
[00:04:55] <phryk> with and without backslash-escaped parens…
[00:05:01] <Kobaz> so we have your pattern match... what's your string you're matching against?
[00:05:16] <phryk> foo, foo() and foo(42)
[00:05:20] <Kobaz> okay
[00:05:32] <Kobaz> yoru first problem is that 'foo' will not match, and nor will foo(42)
[00:05:54] <phryk> yeah, those are for testing, i want to work towards the actual regexp and need some testing output
[00:05:58] *** Joins: _quaddamage (~quaddamag@222.87.206.35.bc.googleusercontent.com)
[00:06:04] <phryk> currently it's only supposed to match the second one, but it matches all three.
[00:06:15] *** Joins: rwp0 (~rwp0@user/rwp0)
[00:06:44] * GumbyPAN CPAN Upload: StreamFinder-1.61 by TURNERJW https://metacpan.org/release/TURNERJW/StreamFinder-1.61
[00:06:56] <Kobaz> well, what i meant was.. if you're propertly escaping () then 'foo' will not match
[00:07:16] <Kobaz> do you know what () does, in regex?
[00:07:39] *** Quits: _quaddamage (~quaddamag@222.87.206.35.bc.googleusercontent.com) (Client Quit)
[00:07:46] <phryk> yes, group extraction. and like i said half a dozen times already i tried escaping and even double escaping…
[00:08:00] <phryk> behavior stays the same.
[00:08:01] *** Joins: anthk_ (~anthk_@92.176.105.30)
[00:08:05] *** Joins: _quaddamage (~quaddamag@222.87.206.35.bc.googleusercontent.com)
[00:08:09] <Kobaz> but you only provided one example
[00:08:32] <Kobaz> ^foo(\(.*\))?$
[00:08:42] <Kobaz> that's going to match 'foo' 'foo()' and 'foo(42)'
[00:08:55] <phryk> my $re = /^foo()$/;
[00:08:57] <phryk> #my $re = /^foo\(\)$/;
[00:08:59] <phryk> #my $re = /^foo\\(\\)$/;
[00:09:01] <phryk> happy now? :F
[00:09:19] <phryk> all three have the same behavior and i need to know why.
[00:09:21] <Kobaz> yeah so your second one will match foo()
[00:09:25] <phryk> no.
[00:09:33] <Kobaz> and your third one will match uhh
[00:09:35] <phryk> it *should*, but it doesn't. that's my whole point.
[00:09:43] <Kobaz> your third one is fucked up
[00:09:43] <Kobaz> but
[00:09:45] <phryk> third should match "foo\(\)"
[00:09:49] <Kobaz> right yeah
[00:09:55] <Kobaz> well
[00:09:59] <Kobaz> no actually sorry said yeah too quickly
[00:10:03] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[00:10:20] <Kobaz> third one will match the string 'foo\\'
[00:10:35] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[00:11:05] <Kobaz> oh
[00:11:11] <Kobaz> you're also using regex wrong
[00:11:30] <phryk> please elaborate.
[00:11:44] <Kobaz> that'll do it... if ($re =~ /^foo()$/)  { print "matched\n" }
[00:11:51] <Kobaz> you have to 'activate' regex matching
[00:11:58] <Kobaz> not assign your variable to a regex pattern
[00:12:03] <Manderson> Good afternoon, all! Question for you: our application is configured to call /usr/bin/application-perl, which is just a symlink to /usr/bin/perl - is there some sort of behind-the-scenes magic happening calling the perl executable with this particular name?
[00:12:11] <phryk> if("foo" =~ $re){
[00:12:16] <phryk> is what I'm doing
[00:12:32] <phryk> and i hope you can substitute the other strings i use for testing in your head :P
[00:12:37] <Kobaz> you don't want that either
[00:13:01] <phryk> why?
[00:13:06] <Kobaz> you would need to store the compiled regex qith qr
[00:13:07] <Kobaz> https://stackoverflow.com/questions/63501617/what-is-the-difference-between-qr-and-m-in-perl
[00:13:07] <Paperbot_> Link title(s): [ regex - What is the difference between qr/ and m/ in Perl? - Stack Overflow ]
[00:13:37] <Kobaz> you should avoid trying to be fancy and just get something generic working
[00:13:48] *** Quits: veesh (~veesh@89.237.104.108) (Remote host closed the connection)
[00:14:19] <phryk> how is what i'm trying *not* being generic? i'm literally starting from the simplest thing… :F
[00:14:25] <Kobaz> that's not the simplest thing
[00:14:32] <Kobaz> you're trying to assign a regex pattern to a variable
[00:14:40] <Kobaz> that's not your base-case
[00:14:41] <phryk> yes, so i can test what it actually matches…
[00:14:47] <Kobaz> no
[00:14:53] <phryk> yes?
[00:14:54] <Kobaz> here, let me write something that will make more sense
[00:14:56] <Kobaz> no!
[00:14:56] <Kobaz> heh
[00:14:59] <Kobaz> you're killing you
[00:15:06] <phryk> you're killing me :P
[00:15:16] <Kobaz> nops
[00:15:17] <Kobaz> hang on
[00:15:41] *** Joins: veesh (~veesh@89.237.104.108)
[00:15:55] <Kobaz> it's like you're asking a freebsd question on how to build a raid array when you're still having trouble actually booting the installer
[00:16:00] <Kobaz> solve the base-case first
[00:16:35] <phryk> the only thing more basic i could thing of would be /foo/
[00:16:42] <phryk> which sounds entirely pointless^^
[00:16:57] <Kobaz> hold on, i'm typing
[00:18:29] <Kobaz> using your examples
[00:18:33] <Kobaz> you should see what you need to fix
[00:18:39] <Kobaz> https://dpaste.com/6QJLAKHFC
[00:18:40] <Paperbot_> Link title(s): [ dpaste: 6QJLAKHFC ]
[00:18:44] <Kobaz> and then, here's the proper matching
[00:19:04] <Kobaz> https://dpaste.com/3L9PQANM9
[00:19:04] <Paperbot_> Link title(s): [ dpaste: 3L9PQANM9 ]
[00:19:06] <Kobaz> thats the output by the way
[00:20:02] <phryk> but this is completely not fitting for developing a regexp… i'd have to copy every change around three times to test it…
[00:20:03] <aquanight> if you're just trying to extract the text out of the attribute parameter: ($name, $value) = $attribute =~ m/^(\w+)\s*\((.*)\)$/; will do the job
[00:20:13] <aquanight> you do not need to validate for q()-ness. Perl has already done this.
[00:20:14] <Kobaz> phryk: what?
[00:20:30] <phryk> no, I'm trying to set up the boilerplate to be able to actually develop a regexp for my very special use-case. :F
[00:20:41] <Kobaz> that is the boiler plate
[00:20:52] <phryk> no, you have the regexp three times in there.
[00:20:56] <Kobaz> okay
[00:21:01] <Kobaz> then store a compiled regex
[00:21:06] <Kobaz> but... this is your base case!
[00:21:14] <Kobaz> fix your regex using this simple-simple stuff here
[00:21:15] <aquanight> you can literally use what I just did one time in a MODIFY_CODE_ATTRIBUTES method to deal with attributes with parameters
[00:21:37] <Kobaz> so if you want to re-use a regex on mutliple strings.. then hang on
[00:21:47] <phryk> yeah, but i don't understand it and it'll be easier to cook my own.
[00:21:53] *** Quits: WantToHelp (~dale@96.77.40.70) (Ping timeout: 268 seconds)
[00:21:58] <Kobaz> you don'
[00:22:06] <Kobaz> you don't understand the code i sent you?
[00:22:12] *** Joins: WantToHelp (~dale@96.77.40.70)
[00:22:13] <phryk> I do understand it.
[00:23:07] <Kobaz> fix your regex using regex101
[00:23:08] <phryk> but it's not useful for regexp development because i'd have to do every single change to the regexp while developing it in three places. or four, if i want to test multiple arguments as well, and even more if i want arguments with parens in them…
[00:23:10] <Kobaz> and THEN write the code
[00:23:15] <phryk> no.
[00:23:39] <phryk> subtle regexp difficulties fucked me over way too often for me to see this as acceptable solution.
[00:23:43] <Kobaz> you're fighting two things here
[00:23:46] <phryk> s/difficulties/differences/
[00:23:47] <Kobaz> one is learning how to use regex in perl
[00:23:52] <Kobaz> and the other is how to use regex
[00:23:56] <Kobaz> don't fight both at the same time
[00:23:59] <Kobaz> you're gonna have a bad time...
[00:24:01] <aquanight> you're still doing this for attribute handling right
[00:24:01] <phryk> i know regexp all i need is to bind a regexp to a var ffs… /o\
[00:24:17] <Kobaz> if you know regex then you can fix your pattern matching problems
[00:24:21] <Kobaz> which obviously you haven't :P
[00:24:42] <Kobaz> if you knew regex you would realize that foo\\(\\) is not going to work for matching foo()
[00:24:43] <aquanight> if you don't want to update 4 different places with the same regex, why not stuff the one regex in a sub like, sub split_attribute_value or something
[00:24:46] * phryk cries
[00:25:00] <phryk> aquanight: yes, that sounds more reasonable.
[00:25:10] <phryk> ty
[00:25:29] <aquanight> but to be fair, you don't usually want a "generic" regex for attributes in the first place.
[00:26:15] <aquanight> you're usually going to do something like: foreach (@attribute) { if (/valid1/) { stuff } elsif (/valid2\(parampattern\)/) { more stuff } else { push @invalid, $_; } } return @invalid;
[00:26:23] <phryk> basically all i want is to extract everything between the parens, split it by commata and run it through eval so things like 1 vs "1" work.
[00:26:38] <Kobaz> that's regex 101
[00:26:41] <aquanight> ooof
[00:26:42] <LeoNerd> Ohgod what level of madness are you doing now?
[00:26:50] <aquanight> dangerous to just shove that through eval blindly like that
[00:26:52] <phryk> aquanight: oof because eval?
[00:27:07] <aquanight> I mean if you want to just have runnable code in your attribute parameter, sure
[00:27:14] <Kobaz> phryk: https://dpaste.com/GF82NQTRH tadaaah
[00:27:15] <Paperbot_> Link title(s): [ dpaste: GF82NQTRH ]
[00:27:26] *** Quits: WantToHelp (~dale@96.77.40.70) (Ping timeout: 268 seconds)
[00:27:27] <aquanight> hell
[00:27:35] <aquanight> phryk: you don't even need to comma split
[00:27:51] <aquanight> @stuff = eval "$parameter"; # done
[00:27:56] <phryk> huh, true, it'll become a list…
[00:28:09] <aquanight> I would very much recommend you check $@ at the very least
[00:28:17] <phryk> but if the input is only taken from a code file, what's the actual danger in there?
[00:28:28] <aquanight> I mean ... that's true.
[00:28:43] <Kobaz> it's just not a good idea in general to eval() random stuff
[00:28:49] <phryk> not planning on putting anything coming from application users to eval
[00:28:50] <Kobaz> read in json or something and then process that
[00:29:07] <Kobaz> phryk: does that paste solve your issue?
[00:29:09] <aquanight> phryk: the main danger is that the scope of the "code" in the attribute parameter won't be what the person writing it will expect
[00:29:31] <phryk> Kobaz: not anymore than aquanights recommendation to just do the matching in a sub.
[00:29:33] <aquanight> Kobaz: .... that'd be a valid point if we were talking about reading STDIN or something
[00:29:34] <LeoNerd> Yah; eval() in general is kinda terrible, but simply calling eval() some text you read out of the very source code file you're running is fine... any would-be attacker is just going to put real code in there *anyway*
[00:29:41] <aquanight> we're talking aobut an attribute which is already in code
[00:29:44] <aquanight> that ship's kinda sailed.
[00:30:04] <aquanight> like I said
[00:30:14] <aquanight> the only real danger is that the scope inside the parameter value will not be what you expect
[00:30:23] <phryk> aquanight: ah, different scoping, so i can't just use $var in there…
[00:30:35] <aquanight> my $x = 42; sub whatever :myAttribute($x) { } # Global symbol '$x' requires explicit package name.
[00:30:56] <aquanight> as the most *basic* example
[00:31:15] <LeoNerd> aquanight: Yaeh that's what inspired my idea for wanting  eval_at_caller(), or more generally, uplevel_eval()
[00:31:34] <phryk> But then again $x won't work with attributes anyhow…
[00:31:46] <aquanight> at the very least I like to do something like put: sub _clean_eval { eval shift; } at the top of the file so that the lexical scope of the attribute routine doesn't escape *into* the attribute parameter
[00:32:02] <phryk> i mean if anyone can give me another good solution to get typed values out of attribute params that doesn't involve writing my own parser, i'm all ears…
[00:32:11] <LeoNerd> There isn't
[00:32:16] <LeoNerd> Attribute handling code requires parsing itself
[00:32:20] <phryk> That's what I thought.
[00:32:21] <LeoNerd> That's why most attributes tend to be /very/ simple
[00:32:22] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[00:32:30] <LeoNerd> See also: a lot of my examples
[00:32:33] <aquanight> the simple answer is this
[00:32:40] <aquanight> do you *need* to be lenient of 1 vs. "1"
[00:33:06] <aquanight> does the idea of saying "1" in the attribute make sense when a number is expected?
[00:33:09] <phryk> well, 1 vs "1" is a bad example, but what about things like { foo => 42 }?
[00:33:27] <LeoNerd> parse it
[00:33:29] <aquanight> if you want to put actual perl values in the attribute then yes eval is your only answer
[00:33:37] <LeoNerd> perl gives you the literal text from within those parens
[00:33:39] <aquanight> because as we all know, only perl can parse perl :P
[00:33:43] <LeoNerd> It is up to you to interpret it however you want
[00:34:14] <LeoNerd> I would suggest: not putting much of complexity in there
[00:34:19] <LeoNerd> AGAIN SEE MOST OF MINE
[00:34:31] <phryk> it doesn't even do that, all it gives me is the attribute name with parens and everything between the parens as one string.
[00:34:40] <LeoNerd> Yes. Indeed it does
[00:34:45] <LeoNerd> As I'm sure we've said 6 times now
[00:35:04] <LeoNerd> attributes are not the place to put *complex* data
[00:35:06] <aquanight> but realistically, one almost never codes attributes for "generic" situations. You have a specific attribute, a specific way to use said attribute, tailor your argument list to that use case
[00:35:10] <ether> https://twitter.com/mmsword/status/1200147947331043328
[00:35:11] <Paperbot_> Ẑ͚͔͍̻̤̟ä̶̼̗̟͔́̿̾̓n̬͙̫̿͑͊̈̚d̡̰̭̞͖̟̖̟ͬ̚ê̺͖̂ͩ̀̉ͣrͪ̓ (@mmsword) 1y311d ago: Telecommunications as a whole, which also encompasses The Internet, is in a constant state of failure and just in time fixes and functionally all modern communication would collapse if about 50 people, most of which are furries, decided to turn their pager off for a day.
[00:35:36] <LeoNerd> E.g. in Object::Pad, any of the attributes are either parameterless (i.e. literally not even any parens), or the thing in parens is a single identifier name
[00:35:50] *** Joins: rindolf (~shlomif@87.68.240.138.adsl.012.net.il)
[00:35:56] <LeoNerd>   has $_slot :reader :writer :Trigger(_after_slot) :weak;
[00:36:01] <LeoNerd> No complex data here
[00:36:11] <aquanight> if you must have complex data
[00:36:14] <aquanight> consider something like
[00:36:23] <Grinnz> ether: i'm not even in public telecom but can confirm
[00:36:25] <aquanight> :myAttribute($data_field)
[00:36:32] <aquanight> and in your eval
[00:36:39] <aquanight> or actually no don't even eval
[00:36:50] <aquanight> you can shove that straight to Symbol::qualify_to_ref I think
[00:37:01] <aquanight> basically the point is make them put the complex data in a global
[00:37:17] <aquanight> you can set it up inside a BEGIN block to have the data available when the attribute is scanned
[00:37:32] <LeoNerd> Terrible idea
[00:37:42] <LeoNerd> If you need complex data out of many keys/values, consider putting them all in separate attrs
[00:37:45] <LeoNerd> AGAIN HOW I DO IT
[00:37:53] <aquanight> sure that way works too
[00:37:55] <LeoNerd> How many more times do I have to say "do it like I do it" before people listen to me?
[00:38:06] <aquanight> but all your attributes do all different things
[00:38:08] <phryk> infinity + 1
[00:38:22] <phryk> as in not applicable to my use-case.
[00:38:43] <aquanight> I was thinking about if you for whatever weird reason needed an attribute that does one thing but need a big honking data structure to do it
[00:38:57] <aquanight> hell if I can come up with a use case because honestly I'm with you: attributes should be kept simple
[00:40:06] <Grinnz> LeoNerd: but i don't want to use Module::Build and bzr repos :D
[00:40:32] <LeoNerd> phryk: OK so explain your usecase more and I will walk you through it
[00:40:38] <LeoNerd> Also Idon't think you've seen /all/ of mine
[00:40:40] <LeoNerd> as you haven't asked me about them
[00:40:53] <phryk> General-purpose decorators through attributes.
[00:40:56] <LeoNerd> if you had I would have pointed you at the ~20 or so different ones implemented in Circle for doing all the interesting metadata stuff there
[00:41:15] <LeoNerd> And I would have remembered getting into long and detailed discussions about Circle
[00:42:03] <phryk> anyhow, all i needed was qr/, gonna go build my regexp now.
[00:42:15] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[00:43:17] <LeoNerd> You evidentally are not *just* doing that. you wouldn't need qr// for that
[00:43:32] <LeoNerd> If _all_ you were doing was making the "is a wrapper decorator" attribute, that would be about 20 lines of code and you'd have done it by now
[00:43:37] <LeoNerd> So clearly you are doing something else
[00:43:46] <LeoNerd> Or, you _are_ doing that just in a very very wrong way
[00:44:35] <phryk> LeoNerd: you are aware that decorators can be parameterized? as in pythons @foo(42)\ndef bar():…
[00:45:02] <LeoNerd> Right. So you're now _not_ just doing what we discussed the other day
[00:46:19] <phryk> Well, unparameterized decorators were the base case, pretty sure i mentioned multiple times that I'll also want parameterized decorators, tho…
[00:47:10] *** Joins: whynot (~whynot@37.73.160.206)
[00:47:26] <LeoNerd> Right. Well that's a whole new ballgame
[00:47:50] <LeoNerd> Again I have solutions to that too
[00:47:52] <LeoNerd> if only you'd have asked
[00:48:32] <LeoNerd> https://metacpan.org/pod/Attribute::Storage  -- here is a thing I wrote
[00:48:33] <Paperbot_> Link title(s): [ Attribute::Storage - declare and retrieve named attributes about CODE references - metacpan.org ]
[00:48:38] <LeoNerd> I use it a fair amount in Circle to do most of this
[00:48:44] <LeoNerd> Please read and familiarise yourself with it
[00:49:34] <phryk> yeah, no. i just wasted an hour on pointless discussion, I'm not gonna read up on something that'll add another huge dependency to my module when all i want is regexp + eval…
[00:50:32] <LeoNerd> You don't need to USE it
[00:50:43] <LeoNerd> I want you to *read* it and understand it because it is code that works to solve the problems you are attempting
[00:50:45] <LeoNerd> You can just steal my ideas
[00:50:51] <LeoNerd> You can read them faster than I can talk them here
[00:50:53] *** Quits: bit4bit_ (~bit4bit@181.49.102.14) (Quit: Leaving)
[00:51:44] <LeoNerd> In particular, see the RAWDATA and MULTI tags I put in there
[00:52:42] *** Quits: pb (~pb@polemon.org) (Quit: leaving)
[00:52:57] <Grinnz> keep in mind a couple things: 1) what you're asking for help with is not a simple ask, and complaining that it's not simple doesn't change that; 2) you're wasting all our time too, if you don't actually want help
[00:55:05] <phryk> what i actually asked for help with in this instance was why parens didn't match in my regexp, the fix was qr/…/ this has been established i don't know how long ago. after that it's just been people telling me to do something entirely different.
[00:55:28] <LeoNerd> That comes from ~15 years experience at trying to solve this problem
[00:55:37] *** Quits: bmeneg (~bmeneg@2001:1284:f013:1328:18e3:1f16:60ab:3a68) (Ping timeout: 252 seconds)
[00:55:40] <LeoNerd> I can give you the beneift of that insight or you can go and rediscover it for yourself
[00:55:41] *** Joins: bmeneg_ (~bmeneg@2001:1284:f013:c2b6:2898:176f:49a6:1b32)
[00:55:44] <LeoNerd> I don't mind either way
[00:56:15] *** Joins: pb (~pb@polemon.org)
[00:58:54] *** Joins: Nitronix (~nitronix@5.29.23.150)
[01:01:49] * GumbyPAN CPAN Upload: PDL-FFTW3-0.18 by ETJ https://metacpan.org/release/ETJ/PDL-FFTW3-0.18
[01:04:41] *** Joins: hurmantrout (~hurmantro@151.246.157.14)
[01:04:49] *** Quits: nuclightq (~quasselxp@broadband-77-37-180-193.ip.moscow.rt.ru) (Ping timeout: 252 seconds)
[01:08:43] *** Joins: seand (~seand@69.54.142.196)
[01:17:47] *** Joins: Croran (~Croran@71.231.214.173)
[01:18:12] *** Quits: Nitronix (~nitronix@5.29.23.150) (Remote host closed the connection)
[01:25:43] *** Joins: aspic (~shifty~~~@ppp121-44-109-241.syd-gls-har-bras38.tpg.internode.on.net)
[01:30:23] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 246 seconds)
[01:31:24] *** Quits: aspic (~shifty~~~@ppp121-44-109-241.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[01:33:52] <phryk> LeoNerd: Yeah, sorry, but I've had this situation way too often and it helped me exactly 0 times in the ~20 years I've been programming. Just wait a couple days and I'll have a general purpose decoration module on the ready with 1 or less CPAN dependencies.
[01:34:10] <LeoNerd> That was never my point
[01:34:27] <LeoNerd> I expect you'll end up basically duplicating the code I wrote, only it took you longer to think of if than if you'd just read my one
[01:34:40] <LeoNerd> I was trying to save you time by showing you the code that I'd already written so you can just copy it
[01:35:54] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 260 seconds)
[01:36:27] <phryk> parameter extraction ended up being a function with 2 lines that took me ~10 minutes to write… might end up being 3 lines with dynamic decorator name for the regexp.
[01:36:44] *** Joins: gast0n (~g4570n@user/gast0n)
[01:37:06] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[01:39:10] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[01:39:17] *** Joins: rwp0 (~rwp0@user/rwp0)
[01:41:35] *** Quits: XV8 (~XV8@2601:5cb:c001:50:78:e67a:19d1:b3c9) (Quit: Textual IRC Client: www.textualapp.com)
[01:42:01] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[01:45:40] *** Joins: symdrome (~fabio@2804:d41:af38:7d00:3d4b:301f:ec7:dbb5)
[01:49:22] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[01:52:15] *** Quits: Croran (~Croran@71.231.214.173) (Quit: leaving)
[01:57:44] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[01:57:54] <v`> https://blog.cloudflare.com/october-2021-facebook-outage/
[01:57:55] <Paperbot_> Link title(s): [ Understanding How Facebook Disappeared from the Internet ]
[01:57:56] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 250 seconds)
[01:59:25] *** Quits: ufotofu (~ufotofu@149.248.16.17) (Quit: WeeChat 1.9.1)
[02:02:56] <Grinnz> Paperbot_: nick Paperbot
[02:02:56] *** Paperbot_ is now known as Paperbot
[02:03:00] *** Quits: whynot (~whynot@37.73.160.206) (Quit: leaving)
[02:03:16] <Grinnz> you would think i'd have gotten around to making it fix that itself by now
[02:09:09] *** Joins: rwp0 (~rwp0@user/rwp0)
[02:09:09] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[02:09:14] *** Parts: jabberwok (~wlindley@75.105.20.104) ()
[02:14:53] *** Quits: sbates (~sbates@198.178.118.18) (Quit: Leaving)
[02:17:05] *** Quits: hurmantrout (~hurmantro@151.246.157.14) (Quit: Client closed)
[02:19:30] *** Joins: Nitronix (~nitronix@5.29.23.150)
[02:25:50] *** Joins: sbates (~sbates@198.178.118.18)
[02:26:27] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 268 seconds)
[02:31:46] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[02:32:49] *** Quits: pizdets (~pizdets@183.182.115.24) (Ping timeout: 252 seconds)
[02:33:44] *** Joins: pizdets (~pizdets@183.182.111.139)
[02:36:34] *** Quits: Pali (~pali@user/pali) (Ping timeout: 245 seconds)
[02:38:33] *** Joins: rwp0 (~rwp0@user/rwp0)
[02:44:58] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 252 seconds)
[02:48:01] *** Quits: waltman (waltman@2601:4a:701:4451:b67d:4cbb:5c00:ae75) (Ping timeout: 245 seconds)
[02:49:01] *** Joins: waltman (waltman@2601:4a:701:4451:f73f:66f:b8db:6fb6)
[02:52:29] *** Quits: sbates (~sbates@198.178.118.18) (Quit: Leaving)
[02:53:21] *** Joins: default__ (~rpath@gateway/tor-sasl/rpath)
[02:53:40] *** Joins: rwp0 (~rwp0@user/rwp0)
[02:53:41] *** Quits: Nitronix (~nitronix@5.29.23.150) (Ping timeout: 246 seconds)
[02:53:49] *** Quits: default__ (~rpath@gateway/tor-sasl/rpath) (Remote host closed the connection)
[02:54:10] *** Joins: default__ (~rpath@gateway/tor-sasl/rpath)
[02:55:27] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Ping timeout: 276 seconds)
[02:55:36] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[02:56:43] *** Quits: default__ (~rpath@gateway/tor-sasl/rpath) (Client Quit)
[02:57:01] * GumbyPAN CPAN Upload: XS-Parse-Keyword-0.19 by PEVANS https://metacpan.org/release/PEVANS/XS-Parse-Keyword-0.19
[02:59:36] *** Joins: Moonlight (~Moonlight@64.253.17.179)
[03:01:37] <LeoNerd> ^-- permits even more ungodly levels of parser hackery, the like of which it is too late in the day to explain
[03:02:17] <leont> Mean! :-p
[03:02:57] <LeoNerd> Well, mostly because all /this/ module adds is a "please run this callback function now" hook into the parser grammar. The real hideousness is what Object::Pad puts in there
[03:03:03] <LeoNerd> but I haven't finished writing that part yet
[03:05:57] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[03:13:34] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[03:15:58] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:16:09] *** Quits: Moonlight (~Moonlight@64.253.17.179) (Ping timeout: 245 seconds)
[03:18:22] *** Joins: Moonlight (~Moonlight@64.253.17.179)
[03:19:42] *** Quits: jetchisel (jetchisel@user/jetchisel) (Client Quit)
[03:25:40] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 252 seconds)
[03:27:41] <leont> I can only imagine what horrible things such a callback would be used for
[03:28:01] <leont> I mean, mostly the module tries to avoid ever needing such a thing
[03:30:13] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[03:31:50] *** Joins: Nitronix (~nitronix@5.29.23.150)
[03:32:24] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 250 seconds)
[03:33:00] *** Quits: e1f (~user@141.117.1.167) (Quit: goodfight...)
[03:34:20] *** Joins: nx_ (~nitronix@88.198.206.243)
[03:35:27] *** Quits: gloin (~gloin@user/gloin) (Remote host closed the connection)
[03:37:05] *** Quits: Nitronix (~nitronix@5.29.23.150) (Ping timeout: 246 seconds)
[03:38:14] *** Joins: rwp0 (~rwp0@user/rwp0)
[03:42:24] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 245 seconds)
[03:46:53] *** Joins: Guest49 (~Guest49@66.231.77.137)
[03:47:38] *** Parts: Guest49 (~Guest49@66.231.77.137) ()
[03:53:46] *** Joins: rwp0 (~rwp0@user/rwp0)
[03:57:47] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[04:00:20] *** Quits: gggpkm (~gggpkm@188.119.64.181) (Remote host closed the connection)
[04:00:37] *** Joins: gggpkm (~gggpkm@188.119.64.181)
[04:05:06] *** crashmat1ix is now known as crashmatrix
[04:11:17] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 268 seconds)
[04:14:52] *** Quits: nx_ (~nitronix@88.198.206.243) (Ping timeout: 250 seconds)
[04:15:33] *** Joins: anthk_ (~anthk_@92.176.105.30)
[04:19:54] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 245 seconds)
[04:23:55] *** Joins: rwp0 (~rwp0@user/rwp0)
[04:28:59] *** Quits: Linux77 (~Linux7_7@186.233.182.243) (Read error: Connection reset by peer)
[04:33:13] *** Joins: Linux77 (~Linux7_7@186.233.182.243)
[04:33:19] *** Quits: gordonfish- (~gordonfis@user/gordonfish) (Ping timeout: 252 seconds)
[04:36:41] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[04:36:43] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:42:42] *** Quits: gryphn (~gryphn@156.146.48.29) (Quit: kthxbye)
[04:43:46] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 252 seconds)
[04:53:43] *** Joins: rwp0 (~rwp0@user/rwp0)
[04:59:54] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 245 seconds)
[05:08:40] *** Joins: rwp0 (~rwp0@user/rwp0)
[05:09:26] *** Quits: symdrome (~fabio@2804:d41:af38:7d00:3d4b:301f:ec7:dbb5) (Quit: WeeChat 3.2)
[05:16:46] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[05:21:43] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 252 seconds)
[05:23:19] *** Quits: Su-Shee (~Susanne@p508943d7.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:23:49] *** Joins: rwp0 (~rwp0@user/rwp0)
[05:25:06] *** Joins: Su-Shee (~Susanne@p5089412e.dip0.t-ipconnect.de)
[05:26:07] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Ping timeout: 252 seconds)
[05:26:59] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 245 seconds)
[05:34:47] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[05:35:09] *** Quits: Moonlight (~Moonlight@64.253.17.179) (Ping timeout: 268 seconds)
[05:40:38] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 246 seconds)
[05:45:20] *** Joins: EvanCarroll (~ecarroll@c-76-30-158-126.hsd1.tx.comcast.net)
[05:45:23] <EvanCarroll> IT IS I, EVAN THE GREAT
[05:55:32] *** Joins: rwp0 (~rwp0@user/rwp0)
[05:57:44] <Grinnz> https://engineering.fb.com/2021/10/04/networking-traffic/outage/
[05:57:44] <Paperbot> Link title(s): [ Update about the October 4th outage - Facebook Engineering ]
[05:58:31] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[06:04:31] *** Joins: aspic (~shifty~~~@ppp121-44-109-241.syd-gls-har-bras38.tpg.internode.on.net)
[06:12:44] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 250 seconds)
[06:25:23] *** Joins: rwp0 (~rwp0@user/rwp0)
[06:27:53] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 246 seconds)
[06:29:29] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 245 seconds)
[06:29:52] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:31:59] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 245 seconds)
[06:38:40] *** Joins: rwp0 (~rwp0@user/rwp0)
[06:41:25] * GumbyPAN CPAN Upload: Apache2-Filter-TagAware-0.03 by APRIME https://metacpan.org/release/APRIME/Apache2-Filter-TagAware-0.03
[06:41:56] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[06:46:15] *** Joins: stanrifkin_ (~stanrifki@p200300dbcf196b00a665819295b4f989.dip0.t-ipconnect.de)
[06:47:31] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 252 seconds)
[06:49:10] *** Quits: stanrifkin (~stanrifki@p200300dbcf0bf1004c80aa2baf5e8499.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:51:37] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[06:53:35] *** Joins: rwp0 (~rwp0@user/rwp0)
[06:58:24] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 268 seconds)
[06:59:14] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[07:01:29] *** Quits: EvanCarroll (~ecarroll@c-76-30-158-126.hsd1.tx.comcast.net) (Ping timeout: 268 seconds)
[07:02:55] *** Joins: EvanCarroll (~ecarroll@172.58.101.104)
[07:04:54] *** Quits: Martchus_ (~martchus@2a01:c23:bc3e:fe00:d250:99ff:fe49:3cce) (Ping timeout: 260 seconds)
[07:05:42] *** Joins: Martchus (~martchus@dynamic-077-009-004-123.77.9.pool.telefonica.de)
[07:08:25] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 252 seconds)
[07:09:12] *** Joins: rwp0 (~rwp0@user/rwp0)
[07:15:19] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 245 seconds)
[07:16:55] *** Joins: R2robot (~R2robot@user/r2robot)
[07:21:47] *** Quits: EvanCarroll (~ecarroll@172.58.101.104) (Ping timeout: 246 seconds)
[07:23:57] *** Joins: EvanCarroll (~ecarroll@c-76-30-158-126.hsd1.tx.comcast.net)
[07:24:33] *** Joins: rwp0 (~rwp0@user/rwp0)
[07:28:20] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[07:28:46] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 252 seconds)
[07:38:37] *** Quits: stanrifkin_ (~stanrifki@p200300dbcf196b00a665819295b4f989.dip0.t-ipconnect.de) (Quit: Leaving)
[07:39:22] *** Joins: rwp0 (~rwp0@user/rwp0)
[07:42:33] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[07:47:50] <rindolf> EvanCarroll: https://en.wikipedia.org/wiki/Ivan_the_Terrible ;)
[07:47:51] <Paperbot> Link title(s): [ Ivan the Terrible - Wikipedia ]
[07:48:04] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 250 seconds)
[07:49:34] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[07:55:59] *** Joins: rwp0 (~rwp0@user/rwp0)
[08:19:29] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 245 seconds)
[08:23:28] *** Joins: rwp0 (~rwp0@user/rwp0)
[08:30:06] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 250 seconds)
[08:39:14] *** Joins: rwp0 (~rwp0@user/rwp0)
[08:39:32] *** Quits: willthechill (~willthech@107-217-160-207.lightspeed.austtx.sbcglobal.net) (Ping timeout: 268 seconds)
[08:49:29] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 245 seconds)
[08:54:27] *** Joins: rwp0 (~rwp0@user/rwp0)
[08:55:17] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[09:00:05] *** Joins: mattil (~mattil@airio.portalify.com)
[09:05:34] *** Joins: WantToHelp (~dale@96.77.40.70)
[09:07:08] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 246 seconds)
[09:10:51] *** Quits: gggpkm (~gggpkm@188.119.64.181) (Remote host closed the connection)
[09:16:27] *** Joins: rwp0 (~rwp0@user/rwp0)
[09:21:28] *** Quits: EvanCarroll (~ecarroll@c-76-30-158-126.hsd1.tx.comcast.net) (Ping timeout: 268 seconds)
[09:32:38] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[09:32:59] *** Joins: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net)
[09:34:30] *** Joins: Pixi (~Pixi@user/pixi)
[09:49:32] *** Quits: starz (starz@ns378512.ip-37-59-36.eu) (Ping timeout: 265 seconds)
[09:50:40] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 252 seconds)
[09:52:20] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[09:53:34] *** Joins: starz (starz@ns378512.ip-37-59-36.eu)
[09:56:52] *** Joins: art1 (~romeyke@p200300ccdf05d80094aa4b850276a732.dip0.t-ipconnect.de)
[10:02:45] *** Quits: rwp0 (~rwp0@user/rwp0) (Read error: Connection reset by peer)
[10:03:04] *** Joins: rwp0 (~rwp0@user/rwp0)
[10:03:15] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[10:03:39] *** Joins: holyghost (~holly@109.136.39.83)
[10:06:10] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[10:07:08] * GumbyPAN CPAN Upload: DuckCurses-0.1.4 by KOBOLDWIZ https://metacpan.org/release/KOBOLDWIZ/DuckCurses-0.1.4
[10:07:34] *** Joins: diskin (~diskin@188.114.20.173)
[10:08:21] *** Joins: Times_ (~Times@180.248.30.254)
[10:08:44] <Times_> https://www.bitchute.com/video/rUr0pnlyWRpD/
[10:08:45] <Paperbot> Link title(s): [ Flipping a Switch Inside the Head 2021 ]
[10:14:50] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[10:17:34] *** Quits: waltman (waltman@2601:4a:701:4451:f73f:66f:b8db:6fb6) (Ping timeout: 250 seconds)
[10:20:27] *** Joins: mattil (~mattil@d1ggrt7qmmmn3jb80wk-4.rev.dnainternet.fi)
[10:21:26] <berndj> what is the precedence of the {n[,m]} quantifier in regexen? if i have /foo*bar{3}/, what does it look for 3 occurrences of?
[10:22:04] *** Quits: mattil (~mattil@d1ggrt7qmmmn3jb80wk-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:22:36] *** Joins: mattil (~mattil@airio.portalify.com)
[10:22:46] <berndj> i've cargo-culted something with (?: ...){3} so that it happens to work, but now i don't know if it works by accident or if i really need more (?: ... ) around the {3}
[10:23:05] <kiwiroy> berndj: r in bar{3}
[10:23:42] <berndj> kiwiroy, ahhh i didn't think of that, and that explains why my earlier trial-and-error attempts were yielding failures
[10:24:07] <kiwiroy> (?:...){3} is 3 of whatever in the parentheses
[10:24:12] <berndj> now i feel stupid lol. thanks!
[10:24:19] <kiwiroy> np
[10:25:01] <berndj> (actually using libpcre but i expect it'll be the same)
[10:26:07] <kiwiroy> which version?
[10:26:55] <berndj> not sure how to parse debian version labels, but possibly 8.31
[10:27:28] *** Parts: Times_ (~Times@180.248.30.254) ()
[10:29:11] *** Quits: randir (~randir@95-25-59-33.broadband.corbina.ru) (Remote host closed the connection)
[10:30:00] *** Joins: ufobat (~martin@dynamic-077-009-125-088.77.9.pool.telefonica.de)
[10:31:35] *** Joins: diskin_ (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[10:31:35] *** diskin is now known as Guest7292
[10:31:35] *** diskin_ is now known as diskin
[10:31:49] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:33:07] <kiwiroy> I think that's pcre2 api
[10:33:08] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[10:34:07] *** Quits: Guest7292 (~diskin@188.114.20.173) (Ping timeout: 252 seconds)
[10:34:35] *** Joins: mattil (~mattil@d1ggrt7qmmmn3jb80wk-4.rev.dnainternet.fi)
[10:34:40] *** Quits: mattil (~mattil@d1ggrt7qmmmn3jb80wk-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[10:35:12] *** Joins: mattil (~mattil@airio.portalify.com)
[10:39:08] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[10:40:13] *** Joins: mattil (~mattil@d1ggrt7qmmmn3jb80wk-4.rev.dnainternet.fi)
[10:40:16] *** Joins: randir (~randir@93.159.239.42)
[10:41:43] *** Quits: mattil (~mattil@d1ggrt7qmmmn3jb80wk-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:42:16] *** Joins: mattil (~mattil@airio.portalify.com)
[10:42:22] *** Joins: Linux77_ (~Linux7_7@186.233.182.243)
[10:43:14] *** Quits: Linux77 (~Linux7_7@186.233.182.243) (Remote host closed the connection)
[10:43:18] *** Quits: noctux (~noctux@user/noctux) (Read error: Connection reset by peer)
[10:43:25] *** Joins: noctux (~noctux@user/noctux)
[10:50:53] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 268 seconds)
[10:52:12] * GumbyPAN CPAN Upload: PICA-Data-1.34 by VOJ https://metacpan.org/release/VOJ/PICA-Data-1.34
[10:52:45] *** Quits: VoidNoir0 (~VoidNoir0@72.80.203.52) (Quit: Ping timeout (120 seconds))
[10:55:12] *** Joins: Pali (~pali@user/pali)
[10:56:19] *** Joins: mattil (~mattil@d1ggrt7qmmmn3jb80wk-4.rev.dnainternet.fi)
[10:56:57] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[10:58:01] *** Quits: holyghost (~holly@109.136.39.83) (Quit: bbl)
[11:01:04] *** Quits: mattil (~mattil@d1ggrt7qmmmn3jb80wk-4.rev.dnainternet.fi) (Ping timeout: 252 seconds)
[11:04:17] *** Quits: pucara (~i@181.111.22.195) (Quit: Lost terminal)
[11:04:43] *** Joins: gggpkm (~gggpkm@188.119.64.181)
[11:09:58] *** Quits: gggpkm (~gggpkm@188.119.64.181) (Remote host closed the connection)
[11:11:17] *** Joins: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net)
[11:11:51] *** Quits: Michelle (~michelle@203.206.128.220) (Ping timeout: 268 seconds)
[11:12:24] *** Quits: Pali (~pali@user/pali) (Ping timeout: 245 seconds)
[11:13:45] *** Quits: fuzzix (~fuzzix@46.7.53.110) (Quit: bbl)
[11:14:04] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Ping timeout: 245 seconds)
[11:18:51] *** Joins: zenfold_ (~zenfold@user/zenfold)
[11:18:56] *** Joins: Michelle (~michelle@203.206.128.220)
[11:19:29] *** Quits: zenfold (~zenfold@user/zenfold) (Ping timeout: 245 seconds)
[11:25:23] <andrzejku> hello
[11:25:38] <andrzejku> is there any alternative for Sphinx in Perl?
[11:26:28] <rindolf> andrzejku: hi
[11:27:02] <rindolf> andrzejku: that python doc framework?
[11:27:13] <andrzejku> yes like doxygen
[11:29:05] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[11:29:22] <rindolf> andrzejku: did you try pod weaver: https://metacpan.org/search?q=pod%3A%3Aweaver ?
[11:29:23] <Paperbot> Link title(s): [ Search for "pod::weaver" - metacpan.org ]
[11:29:32] *** Joins: txtsd (~txtsd@user/txtsd)
[11:29:37] *** Joins: mattil (~mattil@airio.portalify.com)
[11:31:05] <andrzejku> it doesn't look like something for C code
[11:31:43] <Botje> andrzejku: what exactly are you looking for?
[11:31:44] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[11:32:02] <Botje> POD is the standard format for documenting perl libraries and can be converted into pretty much any format.
[11:32:10] <Botje> see perldoc perlpod
[11:32:30] <andrzejku> something like extracting C header documentation to html like (doxygen, sphinx) but written in perl
[11:34:03] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 268 seconds)
[11:34:04] <rindolf> andrzejku: embed python/etc. in perl: https://metacpan.org/search?q=Inline%3A%3A ;0)
[11:34:15] <Botje> parsing C header files is not an easy task.
[11:35:27] <Botje> so let's assume the answer is 'no, but are you looking to write something for it?'
[11:41:02] <andrzejku> Botje, no just asking
[11:41:29] <Botje> then the answer is 'no'
[11:41:41] <Botje> or possibly 'no, I can't be arsed to google it in your place'
[11:41:51] <andrzejku> Botje, thank you
[11:42:36] <andrzejku> Botje, I googled but I couldn't find anything
[11:42:39] *** Quits: bs338 (~pi@host217-44-189-120.range217-44.btcentralplus.com) (*.net *.split)
[11:42:39] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca) (*.net *.split)
[11:42:40] *** Quits: Kassandry (~Kassandry@kassandry.net) (*.net *.split)
[11:42:40] *** Quits: i7c (~i7c@user/i7c) (*.net *.split)
[11:42:40] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (*.net *.split)
[11:42:40] *** Quits: webstrand (~webstrand@user/webstrand) (*.net *.split)
[11:42:40] *** Quits: alh (~alh@hiddenrealms.org) (*.net *.split)
[11:42:40] *** Quits: justache (~justache@user/justache) (*.net *.split)
[11:42:40] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[11:42:40] *** Quits: Nahra`` (~user@static.161.95.99.88.clients.your-server.de) (*.net *.split)
[11:42:40] *** Quits: dotandimet (~dotandime@evomr2.evogene.com) (*.net *.split)
[11:42:40] *** Quits: jercos (jercos@xyl.be) (*.net *.split)
[11:42:40] *** Quits: nowaker_ (~quassel@188.116.38.80) (*.net *.split)
[11:42:40] *** Quits: cation (cation@user/cation) (*.net *.split)
[11:42:40] *** Quits: salparadise (~salparadi@129.146.17.140) (*.net *.split)
[11:42:40] *** Quits: GnuYawk (~GnuYawk@user/gnuyawk) (*.net *.split)
[11:42:40] *** Quits: xenu (~xenu@carychium-tridentatum.xenu.pl) (*.net *.split)
[11:42:40] *** Quits: Kobaz (~libera@its.kobaz.net) (*.net *.split)
[11:42:40] *** Quits: hephaistos (~quassel@gentoo/developer/dilfridge) (*.net *.split)
[11:42:40] *** Quits: mst (~matthewt@vps-6c71e929.vps.ovh.net) (*.net *.split)
[11:42:40] *** Quits: Jonno_FT1 (~come@api.carswap.me) (*.net *.split)
[11:42:40] *** Quits: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[11:42:40] *** Quits: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot) (*.net *.split)
[11:42:40] *** Quits: Skarn (~skarn@user/skarn) (*.net *.split)
[11:42:40] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[11:42:40] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (*.net *.split)
[11:42:40] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (*.net *.split)
[11:42:40] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (*.net *.split)
[11:42:40] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (*.net *.split)
[11:42:40] *** Quits: elcaro (~anonymous@45.32.191.75) (*.net *.split)
[11:42:40] *** Quits: rfi (~rfi@216.70.102.172) (*.net *.split)
[11:44:50] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[11:45:29] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[11:47:31] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[11:47:49] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 252 seconds)
[11:48:10] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[11:49:13] *** Quits: art1 (~romeyke@p200300ccdf05d80094aa4b850276a732.dip0.t-ipconnect.de) (Quit: Leaving.)
[11:49:42] *** Joins: mattil (~mattil@helsinki.portalify.com)
[11:51:04] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[11:51:28] *** Joins: mattil (~mattil@airio.portalify.com)
[11:51:42] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[11:54:24] *** Joins: bs338 (~pi@host217-44-189-120.range217-44.btcentralplus.com)
[11:54:24] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca)
[11:54:24] *** Joins: Kassandry (~Kassandry@kassandry.net)
[11:54:24] *** Joins: i7c (~i7c@user/i7c)
[11:54:24] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[11:54:24] *** Joins: webstrand (~webstrand@user/webstrand)
[11:54:24] *** Joins: alh (~alh@hiddenrealms.org)
[11:54:24] *** Joins: justache (~justache@user/justache)
[11:54:24] *** Joins: Nahra`` (~user@static.161.95.99.88.clients.your-server.de)
[11:54:24] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[11:54:24] *** Joins: dotandimet (~dotandime@evomr2.evogene.com)
[11:54:24] *** Joins: jercos (jercos@xyl.be)
[11:54:24] *** Joins: nowaker_ (~quassel@188.116.38.80)
[11:54:24] *** Joins: cation (cation@user/cation)
[11:54:24] *** Joins: salparadise (~salparadi@129.146.17.140)
[11:54:24] *** Joins: GnuYawk (~GnuYawk@user/gnuyawk)
[11:54:24] *** Joins: xenu (~xenu@carychium-tridentatum.xenu.pl)
[11:54:24] *** Joins: Kobaz (~libera@its.kobaz.net)
[11:54:24] *** Joins: hephaistos (~quassel@gentoo/developer/dilfridge)
[11:54:24] *** Joins: mst (~matthewt@vps-6c71e929.vps.ovh.net)
[11:54:24] *** Joins: Jonno_FT1 (~come@api.carswap.me)
[11:54:24] *** Joins: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net)
[11:54:24] *** Joins: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot)
[11:54:24] *** Joins: Skarn (~skarn@user/skarn)
[11:54:24] *** Joins: Artea (~Lufia@artea.com.pt)
[11:54:24] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[11:54:24] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[11:54:24] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[11:54:24] *** Joins: elcaro (~anonymous@45.32.191.75)
[11:54:24] *** Joins: rfi (~rfi@216.70.102.172)
[11:54:25] *** Quits: voegelas (~voegelas@www.andreasvoegele.com) (Excess Flood)
[11:54:25] *** Quits: Repaster (~Repaster@perlbot/bot/grinnz/repaster) (Excess Flood)
[11:54:37] *** Joins: Repaster (~Repaster@ool-2f148218.dyn.optonline.net)
[11:54:37] *** Quits: Repaster (~Repaster@ool-2f148218.dyn.optonline.net) (Changing host)
[11:54:37] *** Joins: Repaster (~Repaster@perlbot/bot/grinnz/repaster)
[11:55:09] *** Joins: voegelas (~voegelas@www.andreasvoegele.com)
[11:55:20] *** Quits: cation (cation@user/cation) (Max SendQ exceeded)
[11:55:21] *** Quits: justache (~justache@user/justache) (Max SendQ exceeded)
[11:55:21] *** Quits: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot) (Excess Flood)
[11:55:27] *** Joins: Paperbot_ (~Paperbot@ool-2f148218.dyn.optonline.net)
[11:55:56] *** Joins: art1 (~romeyke@p200300ccdf05d8002ba6dee13a85acdb.dip0.t-ipconnect.de)
[11:55:58] *** Joins: cation (cation@user/cation)
[11:56:14] *** Joins: justache (~justache@user/justache)
[11:56:19] * GumbyPAN CPAN Upload: Business-Fixflo-0.45 by LEEJO https://metacpan.org/release/LEEJO/Business-Fixflo-0.45
[11:56:21] *** Quits: Paperbot_ (~Paperbot@ool-2f148218.dyn.optonline.net) (Changing host)
[11:56:21] *** Joins: Paperbot_ (~Paperbot@perlbot/bot/grinnz/paperbot)
[12:17:37] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:24:58] *** Quits: zenfold_ (~zenfold@user/zenfold) (Quit: Leaving)
[12:38:42] *** Joins: nx_ (~nitronix@5.29.23.150)
[12:38:49] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[12:39:21] *** Joins: mattil (~mattil@helsinki.portalify.com)
[12:40:32] *** Joins: choroba (~E.Choroba@88.146.255.106)
[12:44:21] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 268 seconds)
[12:56:21] *** Joins: mattil (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi)
[12:57:35] *** Quits: mattil (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi) (Remote host closed the connection)
[13:05:01] *** Joins: mattil (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi)
[13:05:02] *** Quits: mattil (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[13:05:25] *** Joins: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617)
[13:05:36] *** Joins: mattil (~mattil@airio.portalify.com)
[13:06:06] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[13:08:47] *** Joins: waltman (waltman@2601:4a:701:4451:f2ec:9c30:d6e5:9521)
[13:09:23] *** Joins: mattil_ (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi)
[13:09:26] *** Quits: mattil_ (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi) (Remote host closed the connection)
[13:09:59] *** Joins: mattil_ (~mattil@airio.portalify.com)
[13:10:20] *** Quits: mattil (~mattil@airio.portalify.com) (Read error: Connection reset by peer)
[13:14:19] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Remote host closed the connection)
[13:14:36] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[13:16:04] *** Joins: mattil (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi)
[13:18:41] *** Quits: mattil_ (~mattil@airio.portalify.com) (Ping timeout: 264 seconds)
[13:20:35] *** Quits: mattil (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi) (Remote host closed the connection)
[13:21:08] *** Joins: mattil (~mattil@airio.portalify.com)
[13:21:57] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[13:22:43] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Read error: Connection reset by peer)
[13:22:52] *** Joins: anthk_ (~anthk_@92.176.105.30)
[13:29:29] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 245 seconds)
[13:29:40] *** Joins: mattil (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi)
[13:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:31:01] *** Joins: csrf (~csrf@user/csrf)
[13:31:14] *** Quits: mattil (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi) (Remote host closed the connection)
[13:31:57] *** Joins: mattil (~mattil@airio.portalify.com)
[13:32:27] *** Quits: nx_ (~nitronix@5.29.23.150) (Ping timeout: 268 seconds)
[13:32:55] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:33:25] *** Quits: txtsd (~txtsd@user/txtsd) (Quit: WeeChat 3.3)
[13:33:48] *** Quits: aspic (~shifty~~~@ppp121-44-109-241.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[13:34:33] *** Joins: aspic (~shifty~~~@ppp121-44-108-112.syd-gls-har-bras38.tpg.internode.on.net)
[13:34:39] *** Joins: nx_ (~nitronix@5.29.23.150)
[13:36:10] *** Joins: nxs__ (~nitronix@88.198.206.243)
[13:36:41] *** Joins: mattil_ (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi)
[13:36:46] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Ping timeout: 268 seconds)
[13:38:24] *** Quits: mattil_ (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi) (Remote host closed the connection)
[13:38:31] *** Joins: mattil_ (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi)
[13:39:14] *** Quits: nx_ (~nitronix@5.29.23.150) (Ping timeout: 268 seconds)
[13:40:19] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 245 seconds)
[13:43:01] *** Quits: mattil_ (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi) (Remote host closed the connection)
[13:48:20] *** Joins: mattil (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi)
[13:54:54] *** Quits: mattil (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi) (Remote host closed the connection)
[13:55:30] *** Joins: mattil (~mattil@airio.portalify.com)
[13:58:29] *** Joins: dimitar1 (~dimitar@185.218.121.220)
[14:01:34] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 245 seconds)
[14:05:08] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 268 seconds)
[14:05:43] *** Joins: rwp0 (~rwp0@user/rwp0)
[14:06:02] *** Quits: rwp0 (~rwp0@user/rwp0) (Read error: Connection reset by peer)
[14:06:20] *** Joins: rwp0 (~rwp0@user/rwp0)
[14:10:42] *** Quits: darkstarx (~darkstard@2601:1c2:300:c8a0::f2b6) (Ping timeout: 250 seconds)
[14:11:47] *** Joins: darkstardevx (~darkstard@c-24-21-53-33.hsd1.or.comcast.net)
[14:14:02] *** Joins: ZZzz (~ZZzz@77.137.104.13)
[14:15:46] *** Joins: mattil_ (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi)
[14:16:07] *** Quits: mattil_ (~mattil@d1ggrvxffmjmrk3xhd4-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[14:20:40] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[14:23:30] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[14:23:55] *** Joins: symdrome (~symdrome@2804:d41:af38:7d00:3d4b:301f:ec7:dbb5)
[14:26:28] *** Joins: mattil (~mattil@87-95-37-108.bb.dnainternet.fi)
[14:26:42] *** Joins: gggpkm (~gggpkm@188.119.64.181)
[14:33:00] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[14:36:37] *** Quits: mattil (~mattil@87-95-37-108.bb.dnainternet.fi) (Ping timeout: 252 seconds)
[14:38:43] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:39:15] *** Joins: mattil (~mattil@airio.portalify.com)
[14:52:06] *** Quits: ircuser (~ircuser@89.111.36.243) (Ping timeout: 265 seconds)
[14:52:19] *** Joins: ircuser (~ircuser@89.111.36.243)
[14:53:27] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[14:56:41] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[15:00:48] *** Joins: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com)
[15:02:16] <huf> what's that terrible thing of mst's where you can write html in perl?
[15:02:24] <huf> by summoning a demon on <>
[15:08:33] *** Quits: judabuda (kowbunga@kowbunga.thunderirc.net) (Changing host)
[15:08:33] *** Joins: judabuda (kowbunga@user/judabuda)
[15:11:39] * GumbyPAN CPAN Upload: Net-Silverpeak-Orchestrator-0.003000 by ABRAXXA https://metacpan.org/release/ABRAXXA/Net-Silverpeak-Orchestrator-0.003000
[15:18:41] *** Quits: dimitar1 (~dimitar@185.218.121.220) (Ping timeout: 264 seconds)
[15:28:23] <buZz> https://weworkremotely.com/listings/tucows-perl-software-developer-1
[15:28:23] <Paperbot_> Link title(s): [ Tucows: Perl Software Developer ]
[15:28:24] <buZz> wow
[15:28:29] <buZz> tucows still exists
[15:28:35] <LeoNerd> Is Tucows still... what buZz said
[15:28:43] <buZz> :)
[15:30:48] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[15:31:42] * GumbyPAN CPAN Upload: Dist-Zilla-MintingProfile-AlienBuild-0.05 by PLICEASE https://metacpan.org/release/PLICEASE/Dist-Zilla-MintingProfile-AlienBuild-0.05
[15:32:41] *** Quits: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com) (Quit: Leaving)
[15:40:39] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[15:44:23] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 246 seconds)
[15:44:34] <lopid> bold of it to assume all those things of me
[15:44:49] *** Joins: furrymcgee (~devuan@cgn-213-196-210-25.nc.de)
[15:45:16] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:50:22] *** Joins: proller (~p@2a02:6b8:0:51e:1a1f:4305:ca3b:fce8)
[15:56:46] *** Joins: omegatron (~some@p5099b1fe.dip0.t-ipconnect.de)
[15:58:24] *** Joins: pj (~pj@ghettoforge/pj)
[16:12:02] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 250 seconds)
[16:12:34] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[16:19:24] *** Joins: tejr_ (~tejr@user/tejr)
[16:20:09] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[16:25:10] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[16:26:56] *** Quits: aspic (~shifty~~~@ppp121-44-108-112.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[16:29:18] *** Joins: jplesnik_ (~jplesnik@nat-pool-brq-u.redhat.com)
[16:31:34] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Ping timeout: 245 seconds)
[16:40:25] *** Quits: WantToHelp (~dale@96.77.40.70) (Changing host)
[16:40:25] *** Joins: WantToHelp (~dale@user/wanttohelp)
[16:48:53] *** Joins: YaoNai (~YaoNai@user/yaonai)
[16:51:21] *** Parts: art1 (~romeyke@p200300ccdf05d8002ba6dee13a85acdb.dip0.t-ipconnect.de) ()
[16:57:51] *** Joins: dimitar1 (~dimitar@cpc91714-watf12-2-0-cust24.15-2.cable.virginm.net)
[16:58:46] <Altreus> probably a godaddy company
[16:58:47] *** Joins: anthk_ (~anthk_@92.176.105.30)
[16:58:48] <Altreus> everything else is
[17:00:18] <Altreus> that's a £75k position
[17:00:27] <Altreus> that's actually commensurate with what they're expecting
[17:06:58] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[17:07:20] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 246 seconds)
[17:08:16] *** Joins: rwp0 (~rwp0@user/rwp0)
[17:10:08] *** Quits: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net) (Ping timeout: 268 seconds)
[17:12:14] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:16:39] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[17:21:01] *** Quits: GEttR (~GEttR@user/gettr) (Remote host closed the connection)
[17:21:21] *** Joins: GEttR (~GEttR@user/gettr)
[17:30:37] *** Joins: Guest53 (~Guest53@118-105-255-152.area6b.commufa.jp)
[17:30:41] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[17:34:11] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 268 seconds)
[17:34:59] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Ping timeout: 246 seconds)
[17:35:10] *** Quits: Guest53 (~Guest53@118-105-255-152.area6b.commufa.jp) (Client Quit)
[17:35:49] *** Joins: jplesnik__ (jplesnik@nat-pool-brq-t.redhat.com)
[17:38:07] *** Quits: jplesnik_ (~jplesnik@nat-pool-brq-u.redhat.com) (Ping timeout: 252 seconds)
[17:39:02] <phryk> I think I found a weird heisenbug in core…
[17:39:28] <phryk>     *{"$package::$subname"} = $coderef; <- yesterday this worked
[17:39:57] <LeoNerd> It's good practice to put braces around the package there. I usualyl do that with   *{"${package}::$subname"} = $coderef;
[17:40:09] <phryk> today it doesn't, but     *{"$package:\:$subname"} = $coderef; does – which according to https://www.perl.com/article/untangling-subroutine-attributes/ should only be needed for 5.16-5.18
[17:40:09] <Paperbot_> Link title(s): [ Untangling subroutine attributes ]
[17:40:30] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[17:40:46] <phryk> LeoNerd: alrighty, will try that variation and report back.
[17:40:53] <ilmari> sweval: my $package = "Foo"; my $subname = $bar; "$package::$subname"
[17:40:59] <ilmari> ENOPERLBOT
[17:41:04] <ilmari> Use of uninitialized value $package:: in concatenation (.) or string at reply input line 1.
[17:41:17] <ilmari> phryk: do you not have warnings enabled?
[17:42:06] *** Joins: dimitar2 (~dimitar@185.218.121.220)
[17:42:24] <LeoNerd> eval: my $x = "x"; my $package = 123; $package:: = 456; "$package::$x"
[17:42:24] <LeoNerd> '456x'
[17:42:24] <phryk> ilmari: Oh, apparently I didn't thanks for pointing that out.
[17:42:28] <LeoNerd> ^-- that's what happened
[17:43:02] *** Quits: dimitar1 (~dimitar@cpc91714-watf12-2-0-cust24.15-2.cable.virginm.net) (Ping timeout: 250 seconds)
[17:44:25] <phryk> LeoNerd: btw {"${package}::$subname"} works without the backslash in the middle of ::
[17:44:31] <LeoNerd> Yup
[17:44:39] <LeoNerd> I know. That's why I always do it that way, and I suggested you do it that way
[17:44:42] <phryk> I also assume that ${} manages "::" in package names?
[17:44:58] <LeoNerd> Yes. It works fine. That's why I suggest it :)
[17:45:18] <phryk> Ye, but I'm trying to understand the actual difference. :P
[17:45:20] <ilmari> ${} explicitly delineates where the variable name starts and ends, exactly for ambiguous situations like this
[17:45:55] <ilmari> $foo\::$bar is more idiomatic than $foo:\:$bar, but ${foo}::${bar} is clearer, IMO
[17:45:56] <LeoNerd> You could also do   my $fullname = join "::", $package, $subname;  *{$fullname} = $coderef;
[17:47:06] * ilmari grmbles at huge Foo::Utils modules with a a single t/Foo/Utils.t that takes minutes to run
[17:47:07] <phryk> Alright, I think I got a simple and versatile decoration module with 0 CPAN deps working. Going to test whether parameterized decorators actually work and then refactor my test script into actual tests in t/…
[17:47:21] <phryk> And all that in <100 SLOC
[17:47:25] <phryk> more like 50^^
[17:47:54] <phryk> Doesn't do cohabitation with other attribute modules yet, but I think I'll push that to when I actually need it.
[17:49:13] <phryk> or, wait, still have a couple warnings to fix, and some ref thing for strict…
[17:52:06] *** Joins: jabberwok (~wlindley@75.105.20.104)
[17:57:03] *** Quits: ueberall (ueberall_l@user/ueberall) (Quit: ZNC)
[17:59:02] *** Joins: ueberall (ueberall_l@user/ueberall)
[17:59:56] *** Joins: gast0n (~g4570n@user/gast0n)
[18:02:08] *** jplesnik__ is now known as jplesnik
[18:02:59] *** Quits: jess (~jess@libera/staff/jess) ()
[18:03:31] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[18:06:57] * GumbyPAN CPAN Upload: Geo-WebService-Elevation-USGS-0.119_01 by WYANT https://metacpan.org/release/WYANT/Geo-WebService-Elevation-USGS-0.119_01
[18:07:28] <phryk>     for my $match (@matches){
[18:07:30] <phryk>         print("$match\n");
[18:07:32] <phryk>     }
[18:07:47] <phryk> how is it even possible that perl complains about $match not being initialized in the second line there?
[18:08:26] <alh> @matches = (1, 2, undef);
[18:08:50] <phryk> oooh.
[18:09:24] <phryk> i thought non-matched optional groupings from the regexp would just not *have* a result. thanks alh.
[18:09:44] <Altreus> no you're guaranteed one value per group
[18:09:53] <Altreus> otherwise if it didn't match but wasn't the last one you'd not be able to count
[18:10:29] <phryk> so if I want to check if a group had a match i'd rather do "defined($matches[$groupidx])"?
[18:11:05] <shaldannon> you could just say $match if defined $match;
[18:11:40] <shaldannon> don't have to index it if you just want to for(each)() it
[18:11:58] * GumbyPAN CPAN Upload: Mojo-WebSocket-PubSub-0.03 by EBRUNI https://metacpan.org/release/EBRUNI/Mojo-WebSocket-PubSub-0.03
[18:11:59] <phryk> the loop was just for testing purposes, so i can reason better while adjusting my code.
[18:12:05] <shaldannon> k
[18:12:07] *** Joins: gryphn (~gryphn@156.146.48.29)
[18:12:11] <phryk> but thanks for the hint.
[18:12:28] <shaldannon> np; I'm all about cleanliness where it's possible
[18:13:06] <shaldannon> admittedly I sometimes end up with nastiness like $foo->{bar}->{baz}->[$quux]
[18:13:52] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 252 seconds)
[18:14:21] *** Joins: gast0n (~g4570n@user/gast0n)
[18:14:37] <ircuser> I usually write it as $$foo{bar}{baz}[$quux]
[18:14:39] <phryk> I'm getting "Subroutine … redefined at lib/Attrocators.pm line 67." warnings – which is to be expected as that's exactly what my module is doing, but is it considered good practice to suppress them? And if so, what do I have to pass to "no warnings" to suppress that?
[18:14:46] <ircuser> saves a bit of finger travel there for ->
[18:15:21] <shaldannon> ircuser: I use the ->'s to make it more visually obvious all the different layers
[18:15:38] <shaldannon> otherwise, tends to run together (personal style preference)
[18:16:22] <shaldannon> although if I left out the ->'s, I'd probably get a 5% character count reduction :-}
[18:16:29] <Grinnz> no warnings 'redefine';
[18:16:57] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[18:16:59] * GumbyPAN welcomes MIZDRA - mizdra poyo to CPAN!
[18:16:59] * GumbyPAN welcomes BHGALYEAN - Brian H Galyean to CPAN!
[18:16:59] * GumbyPAN welcomes JBOUR - Ioannis Bourlakos to CPAN!
[18:17:04] * GumbyPAN welcomes MEHDI - Mehdi Orangpour to CPAN!
[18:17:49] <phryk> Grinnz: thanks. i assume anything that's supposed to happen shouldn't trigger a warning?
[18:18:05] <Grinnz> not necessarily
[18:18:25] <Grinnz> warnings are optimized for the usual case, if you're doing weird stuff like this you can expect to cross them
[18:19:13] *** Linux77_ is now known as Linux77
[18:21:14] <phryk> ideally, i'd like to downgrade that warning to debug output, but to the best of my knowledge, that's not a thing that's possible.
[18:21:45] <phryk> also module works with strict and warnings now :3
[18:21:48] <Grinnz> warnings are already perl's "debug output"
[18:22:45] <Grinnz> you could hack something up with $SIG{__WARN__} but that's overly global and doesn't have a way to differentiate categories received
[18:24:33] <phryk> Okay, then I'll just leave the warnings in for now, they only show up once when the application boots up anyhow and give info that might be valuable for error triage.
[18:24:40] <phryk> thanks for the info.
[18:27:34] <phryk> Aand parameterized decoration, works, too.
[18:27:40] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 265 seconds)
[18:28:50] <phryk> https://paste.xinu.at/Y0VB0/ might actually put this on CPAN when I got proper testing and docs.
[18:28:50] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[18:28:51] <Paperbot_> Link title(s): [ Attrocators.pm ]
[18:30:26] <phryk> by the way, are classes/packages coderefs, too?
[18:30:42] *** Quits: proller (~p@2a02:6b8:0:51e:1a1f:4305:ca3b:fce8) (Remote host closed the connection)
[18:30:44] <phryk> because if so, you can also decorate those with it.
[18:31:43] *** Joins: proller (~p@2a02:6b8:0:51e:e774:5fd7:6739:c3f7)
[18:31:48] <Altreus> no
[18:31:54] <Altreus> they're namespaces
[18:31:58] <phryk> aw, too bad.
[18:35:26] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[18:35:26] *** Joins: vyv (~vyv@bras-vprn-nrbaon0452w-lp130-17-76-68-65-112.dsl.bell.ca)
[18:36:18] *** Joins: jplesnik_ (~jplesnik@nat-pool-brq-u.redhat.com)
[18:37:14] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Read error: Connection reset by peer)
[18:38:19] *** Joins: jplesnik__ (jplesnik@nat-pool-brq-t.redhat.com)
[18:40:23] *** Joins: thrig (~thrig@65.113.153.50)
[18:40:47] *** Quits: jplesnik_ (~jplesnik@nat-pool-brq-u.redhat.com) (Ping timeout: 246 seconds)
[18:41:17] <Altreus> perl handles package names strangely because in theory it could be a sub in the package above
[18:41:42] <Altreus> I bet you could really screw up some things
[18:43:11] <phryk> Ye, if they aren't coderefs already, I'm probably not even going to try messing with that. :P
[18:43:35] <phryk> I got nice generalized function decorators now and that's all I need. :3
[18:43:45] <Altreus> no simcop, no pastebin :\
[18:43:48] <Altreus> what happen
[18:44:05] <phryk> what I pasted it only ~15 minutes ago.
[18:44:11] <phryk> simcop?
[18:44:15] <phryk> also https://rnd.phryk.net/phryk/Attrocators
[18:44:17] <Paperbot_> Link title(s): [ phryk/Attrocators: Nicely readable and optionally parameterizable decorators for Perl. -  Attroca... ]
[18:44:26] <phryk> but my gitea semiregularly dies :P
[18:44:27] <Altreus> phryk: I broke perl https://gist.github.com/Altreus/66b06566c10ade954cb42427ea37575a
[18:44:28] <Paperbot_> Link title(s): [ breaking perl · GitHub ]
[18:45:07] <phryk> i am 12 and waht is this?
[18:45:10] <Grinnz> `my @matches = $attribute =~ qr/^(.*?)(\(.*\)){0,1}$/;` should just be m// not qr// - qr// is for returning a regex, you're immediately matching against it which implicitly puts it in m// anyway
[18:45:45] <Altreus> phryk: An::Object->new looks for the package An::Object and calls new on it, unless An::Object is a sub and then it calls that instead
[18:46:02] <Altreus> and calls new on the return value
[18:46:14] <phryk> Grinnz: Oh, I thought with m/ the regexp would be compiled every time the function is called, while with qr// it'd be only compiled once – is that wrong?
[18:46:20] <Grinnz> yes, that's wrong
[18:46:37] <phryk> Ah, okay.
[18:46:39] <Grinnz> even if it was correct, using qr// directly in the expression would do the same thing as using m// there
[18:46:53] <Grinnz> to avoid compiling a qr// multiple times you have to create it outside the repeated scope
[18:47:11] <Grinnz> but that's over optimization in this case - a constant match is precompiled by perl anyway
[18:47:35] <phryk> changed & push
[18:47:39] <phryk> ed
[18:47:42] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Remote host closed the connection)
[18:47:56] <thrig> state $inside = qr!...
[18:48:01] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[18:48:15] <phryk> Grinnz: ye, all the calls to it happen only at compile time anyhow, so optimization isn't much of a worry. :)
[18:48:16] <Grinnz> right, state would be an alternative to creating it outside the scope, since that would make it persistent
[18:48:29] <Grinnz> but yeah, not necessary here
[18:48:58] <phryk> so state is basically a global that's only available from within a certain scope?
[18:49:10] <Grinnz> that's one way to put it
[18:49:14] <phryk> cool.
[18:49:25] <Grinnz> i would call it a lexical whose value is process-global
[18:49:34] <phryk> ye, my terminology definitely isn't up to par. :P
[18:49:52] <thrig> or one of the 6,000 uses of static in C
[18:49:53] <phryk> Anyhow, I'm heading out for a bit, catch some of the last rays of the day.
[18:49:59] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:50:08] <xenu> use experimental 'signatures' is simpler than "use feature 'signatures'; no warnings 'experimental::signatures'"
[18:50:51] <Grinnz> i would also limit your no strict 'refs' to the scopes that actually need it
[18:51:04] <Grinnz> (this is good practice for disabling strict or warnings components in general, and why they're lexical)
[18:51:19] <phryk> Oh, wasn't even aware that's scopable.
[18:51:23] <phryk> Will do so after I come back.
[18:51:32] <xenu> >my @disallowed = (); 
[18:51:49] <xenu> arrays are always defined, there's no need to initialize them
[18:52:21] <phryk> Don't care about that. I'd rather be more explicit for readabilities sake.
[18:52:57] <xenu> i don't see how it's more readable but it's your code
[18:52:58] <Altreus> that is less explicit
[18:53:04] <Grinnz> same with hashes, it's a no-op assignment, but whatever suits you
[18:53:09] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[18:53:22] <Altreus> my @array; # explicitly not set
[18:53:23] *** Joins: semeion (~semeion@user/semeion)
[18:53:28] <Altreus> my @array = (); # Explicitly set to nothing
[18:53:30] <Altreus> :P
[18:54:23] <phryk> Ye, trying to be more consistent in how I use perl so people who read it don't have to know the bajillion subtle oddities of the language.
[18:54:56] <revhippie> Yeah, I had a boss that insisted on that.  Wasn't allowed to use map, or post-fix if/unless/while...
[18:55:34] <thrig> might as well install Go at that point and get down with the clunk
[18:55:34] <phryk> With the exception of map, I'd probably avoid most of those except for the simplest cases in order to not mess with readability, too. :P
[18:55:58] <phryk> If language was 100% my choice, I'd probably just do python :P
[18:56:06] <zgu> ew
[18:56:15] <thrig> long rotting in the compost heap
[18:56:18] <phryk> Also I'd take Haskell before Go, I think.
[18:56:44] <phryk> lol perlheads don't like python, big surprise. :P
[18:56:54] <revhippie> We don't?
[18:57:30] <phryk> Well, it definitely sounds like it. :D
[18:57:35] <gryphn> I like Python. I like Perl more.
[18:58:26] <zgu> i grudgingly try to understand some basics of python because almost everything is written in it these days
[18:58:56] <zgu> but can't stand things like the indentation and lack of explicit lexical scoping
[18:59:31] <gryphn> Better Python than... other languages that should not be named.
[18:59:44] <thrig> ... but if you want to pay me while slow-ass python tries to Ansible, sure, I'll twiddle my thumbs
[19:01:19] <phryk> (burn php to the ground)
[19:01:28] <gryphn> (amen)
[19:01:42] <phryk> my previous job was php (like 7 years ago :P) and NEVER. AGAIN.
[19:02:52] *** Quits: nxs__ (~nitronix@88.198.206.243) (Ping timeout: 252 seconds)
[19:03:26] *** Joins: randir (~randir@95-25-59-33.broadband.corbina.ru)
[19:05:22] <mjgardner> New blog: It's time to retire LAMP. https://phoenixtrap.com/2021/10/05/lamp-is-dead-long-live-perl-web-frameworks/
[19:05:25] <Paperbot_> Link title(s): [ LAMP is dead! Long live (Perl) web frameworks! - The Phoenix Trap ]
[19:06:04] <thrig> I know! you could use web-ware to manage BGP routes
[19:06:06] <Grinnz> i would prefer not writing python either, but as far as what you do, use the tool for the job and that tool isn't always perl
[19:06:22] <Grinnz> it's even sometimes php, but hopefully not :)
[19:06:27] <huf> realistically, use the tool your coworkers are comfortable with :)
[19:06:41] <thrig> I've replaced moinmoin with wordpress
[19:08:12] <genio> we're basically all node now in this side of the company. the other side is all C#
[19:11:08] <Altreus> I commissioned a site and he did it in node stuff
[19:11:22] <Altreus> it took me ages to figure out how to run it because node just decides it's out of memory without, you know, asking the kernel
[19:11:46] *** Joins: NeoCron (~NeoCron@p200300c4cf1c96002e5e9f24316d1b2a.dip0.t-ipconnect.de)
[19:11:46] <Altreus> luckily node has the equivalent of PERL5OPTS
[19:12:04] * GumbyPAN CPAN Upload: Mojo-WebSocket-PubSub-0.04 by EBRUNI https://metacpan.org/release/EBRUNI/Mojo-WebSocket-PubSub-0.04
[19:12:13] <Altreus> OPTS? OPT?
[19:12:17] <Altreus> still
[19:12:43] <thrig> ahh linux, teaching programmers to never check their malloc calls
[19:13:10] <huf> with copy on write, what's the point?
[19:13:23] <huf> touching anything might make it dedupe and eat up your ram
[19:13:50] <huf> and anyway, nothing works if you run out of ram because it's built on stuff that doesnt work if it runs out of ram, all the way down along the turtles
[19:13:58] <huf> you might as well go home an hour early
[19:14:24] <huf> open a ticket for more ram
[19:14:55] <Altreus> thrig: the opposite - node says "you've used too much memory" even though there's 2 gig of swap free
[19:15:02] <Altreus> and just kills the process
[19:15:05] *** Parts: gchristensen (~grahamc@user/gchristensen) (WeeChat 2.9)
[19:15:10] <huf> so basically the discussion around climate change and sustainability painted ram.
[19:15:59] <thrig> eh, node -e 'while (1) { process.stdout.write("a") }'  used to crash node
[19:16:39] <Grinnz> it is a huge pile of hacks masquerading as a production programming language, but aren't we all
[19:16:39] <thrig> on OpenBSD at least, on linux OOM might nuke the databse, or who knows
[19:17:01] <huf> can it kill adjacent servers too?
[19:17:10] <huf> seems like a feature OOM should acquire
[19:17:29] <thrig> "shoot the other node" is sometimes done in active/passive pairs
[19:17:38] <huf> OOF - out of fucks
[19:17:48] <Grinnz> that's called "it gained sentience"
[19:17:50] <huf> and just starts killing other servers until things calm down
[19:18:15] <Grinnz> this is software, things never calm down
[19:18:30] <huf> perhaps it could start talking BGP and say "there's nobody here but us lemmings"
[19:19:12] <huf> i'm sure facebook employees can confirm how very calm this can make things
[19:20:45] <thrig> Amazon also fell apart several times while I was there (in one case everything (except IRC, if you were connected or knew the IP) failed (including the phone system, good luck with that conference call)
[19:21:20] <huf> was it like a tropical holiday outside cell reception range?
[19:21:41] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Ping timeout: 264 seconds)
[19:21:59] <thrig> more like walking to manager and saying "everything is down" and he was like "whelp" and walked to his manager ...
[19:22:12] *** Joins: txtsd (~txtsd@user/txtsd)
[19:22:18] <revhippie> "I'm going to lunch.  Anyone wanna join me for a pitcher or three?"
[19:22:22] <huf> now i'm imagining ceremonial robes and stuff
[19:22:23] <huf> incense
[19:24:02] <thrig> then wandering around the floor telling confused programmers peering up from their computers the same thing
[19:24:09] <huf> :D
[19:24:27] <Harzilein> hmm
[19:25:10] <Harzilein> i had kind of hoped to find something with only pure perl dependencies for now... is this the only implementation currently on cpan? https://metacpan.org/pod/POE::Component::Server::Inet
[19:25:11] <Paperbot_> Link title(s): [ POE::Component::Server::Inet - a super-server daemon implementation in POE - metacpan.org ]
[19:25:27] <huf> this is why you need incense, robes and a man with a trumpet
[19:25:35] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:85a8:16db:365b:ace0)
[19:25:41] <huf> would've made programmers notice
[19:25:48] <thrig> eventually the DNS zone file got fixed
[19:28:08] <Grinnz> Harzilein: possibly, inetd isn't terribly popular
[19:29:34] *** Quits: jplesnik__ (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[19:31:00] <zgu> oh, another thing i don't like about python: the massive clusterfuck that ensued from the 2->3 migration
[19:31:05] <Grinnz> https://metacpan.org/pod/Net::Server appears to be another thing but doesn't give you an event loop to work with
[19:31:05] <Paperbot_> Link title(s): [ Net::Server - metacpan.org ]
[19:31:17] *** Quits: vyv (~vyv@bras-vprn-nrbaon0452w-lp130-17-76-68-65-112.dsl.bell.ca) (Quit: Konversation terminated!)
[19:31:35] <thrig> as opposed to the 5->6 migration
[19:31:46] <huf> everyone's doing so well
[19:32:23] <Harzilein> Grinnz: i don't want an event loop, i don't want the coderef option either. i only want to run an internet superserver
[19:32:51] <Grinnz> do you need it to be in perl at all then?
[19:32:54] <zgu> but perl 5 is still supported and not even intended to be replaced, so it's a non-issue
[19:33:12] *** Joins: anthk_ (~anthk_@92.176.105.30)
[19:33:17] <Grinnz> zgu: not anymore, but it was considered twice
[19:33:42] <Grinnz> and it was amusing that the second time the python situation was used as a success story
[19:33:55] <Harzilein> Grinnz: it's either using a pure perl implementation, or putting up with the launchd replacement, or compiling a new one when all i need is a very basic dummy response on a socket to make some gui programm display one fewer dialog.
[19:34:07] <Harzilein> Grinnz: (mac gui program)
[19:34:20] <huf> historical events need to be interpreted, otherwise we just have chaos
[19:34:21] <zgu> yeah how do you call that a success story with all the code floating around that still depends on the now-EOL python 2?
[19:34:45] <thrig> uh, nc(1) or such could give a response on a socket?
[19:35:16] <Grinnz> Harzilein: yeah i'm not seeing why perl is needed here (but i don't know enough to offer suggestions)
[19:35:42] <Harzilein> thrig: it's not a perfect replacement for inetd, or in some flavours no replacement at all. it'd need to spawn the "inetd based" servers at the very least.
[19:36:30] <Harzilein> Grinnz: it's not _needed_. i just wished i'd have something like "perl power daemontools" ;)
[19:36:34] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[19:36:58] <ether> https://twitter.com/MikeIsaac/status/1445185482913054720
[19:37:16] <ether> (angle grinders!)
[19:38:29] <Altreus> that tweet has apparently been deleted
[19:39:34] <ether> per three sources — the team sent to Facebook’s data centers needed physical access to their servers in order to bring the site back
[19:39:37] <ether> problem was, their cards and access were shut off and they were locked out.
[19:39:40] <ether> so the team took an angle grinder to the server cages to get inside
[19:39:43] <ether> </endquote>
[19:41:06] <revhippie> excellent.
[19:41:37] <gryphn> I imagine a legion of FB lawyers are trying to keep details quiet. I overheard someone talk about a shareholder lawsuit.
[19:42:15] <thrig> power drills could also work
[19:42:19] <ether> someone else at facebook says "it was a f@#king code review bot that auto-merged a BGP rule.. and no one caught it for 2 hours"
[19:42:54] *** Joins: magla (~gelignite@55d44d33.access.ecotel.net)
[19:43:17] <huf> ah yeah, bots automerging and autodeploying
[19:43:19] <huf> what a great idea
[19:43:31] <gryphn> "TTL 2 hours. Not great. Not terrible."
[19:43:52] <ether> https://twitter.com/thingskatedid/status/1445233468674174983
[19:43:52] <Paperbot_> Kate (trace levels of spooky) (@thingskatedid) 12h29m ago: it's five years' time. you angle-grind open another server cage, welding it closed when you're done. you can't help wonder if there's a better way to do regular scheduled maintenance, but today isn't the day to take on fixing technical debt when everything works just fine.
[19:44:25] <huf> :)
[19:44:29] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 246 seconds)
[19:45:33] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[19:48:49] <japh> so at my last interview prior to actually getting the perl job I wanted, I asked one of the main devs which perl version we need to use to keep things backwards compatible etc. I said, "Surely, it's not as bad as 5.8, right?". He answered 'Oh, but I think it is, or perhaps even 5.6. I think. Not sure". Imagine my horror. Well, once at $work, turns out, the version I have to struggle with is... 5.32.
[19:49:07] <thrig> oh the humanity
[19:50:16] <Grinnz> good example of why i think making a 7 at some point is very important regardless of whether it has anything useful
[19:50:30] <Grinnz> people don't understand compound numbers
[19:50:51] <Altreus> See I've been lairy of CI/CD for a long time on the presumption that "What if it shouldn't be deployed yet" and everyone's been doing it anyway
[19:50:55] <Altreus> now it turns out I'm right!
[19:51:08] <Grinnz> CI is fine, CD is the spooky one
[19:51:12] <huf> doesnt work even if you change the number
[19:51:18] <huf> we do it with the year but it's always the same shit again
[19:51:29] <Grinnz> its fine if it's the same shit
[19:51:30] <gryphn> Part of me like the idea of naming versions after years, so it becomes immediately apparent the age. Feels wrong, though.
[19:51:37] <Grinnz> the point is telling people it's not 5.8 anymore
[19:51:52] <thrig> Perl 19121
[19:52:03] <huf> at least!
[19:52:11] <Grinnz> i mean we could split the difference and jump to perl 21
[19:52:18] *** Quits: dimitar2 (~dimitar@185.218.121.220) (Quit: WeeChat 3.3)
[19:52:49] <gryphn> Perl 21.10 (short for Oct 2021)
[19:53:29] <ether> dates are terrible because sometimes you need to make a bugfix release on an earlier version, e.g. 5.32.1 after 5.34.0 has already come out
[19:53:33] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[19:53:53] <gryphn> Perl 21.10.1? But yeah, I agree.
[19:53:58] <ether> I'd be in favour of just dropping the 5 - 32.1, 34.0 etc
[19:54:11] <Grinnz> also because you accidentally release perl 3031 one time and now you have to release perl 9999
[19:54:25] <thrig> DNS has a tricky way to roll the epoch ints around
[19:54:36] <gryphn> Solution = all Perl releases to be done by a FB bot.
[19:54:47] <Altreus> so perl will be released by php?
[19:55:07] <japh> there's people at work that think that 'perl 5' is from the 90s, not realizing it's alive and progressing
[19:55:24] <ether> I hope you smacked them around a bit! :)
[19:55:25] <japh> people at work = perl programmers
[19:55:25] <thrig> (or going down "kicking, gouging, and screaming"
[19:55:33] <Grinnz> well, it is from the 90s, as well as alive and progressing
[19:55:33] <daemon> I just seen the most insanely weird job post 
[19:56:08] <japh> ether, not smacking people around prior to getting at least 1 full year of work experience at the workplace :p
[19:56:18] <daemon> senior perl developer, but the deployment chain is pure aws/azure saas,pass etc... and the role is to support a microsoft teams setup - via perl on CentOS 
[19:56:35] <Grinnz> heh
[19:56:40] <thrig> didn't centos get like deprecated
[19:57:03] <daemon> im tempted to apply just to find out if they miswrote this spec this seems whacky
[19:57:07] * GumbyPAN CPAN Upload: App-RouterColorizer-1.212780 by JMASLAK https://metacpan.org/release/JMASLAK/App-RouterColorizer-1.212780
[19:57:07] <huf> so did monarchies, and yet
[19:57:10] <revhippie> centos was born deprecated
[19:58:10] <daemon> ah ok so what they are doing here is running 'microsoft approved middleware' that welds Microsoft Teams and a SIP provider together, but they do it with perl and CentOS despite the fact everything else is Azure/AWS
[19:58:15] <daemon> how did that even happen
[19:58:42] <Grinnz> devops
[19:58:44] *** Quits: gryphn (~gryphn@156.146.48.29) (Quit: kthxbye)
[19:58:57] <huf> maybe the approved middleware needed diapers
[19:59:00] <thrig> or they acquired someone who did it that way and then
[19:59:39] <daemon> ah right that would make sense maybe back in the day it was perl+asterisk+<some thing else> and their clients moved to ms teams
[20:00:09] <huf> so evolution
[20:01:16] <daemon> possible, I just can't understand why they would not migrate the perl part to c# when they did evolve seems a weird thing to keep it perl
[20:01:51] <thrig> in theory Microsoft has money for that sort of thing?
[20:02:03] <daemon> if anyone is curious about the role drop me a pm, its a uk position with remote working
[20:02:15] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[20:02:19] <daemon> thrig, its not actually for microsoft its these people do the 'approved microsoft middleware'
[20:02:41] <thrig> oh, contractors. Microsoft got in some hot water about not paying such
[20:03:33] <daemon> 'The product is sold on a per user, per month SaaS basis and is sold only through channel partners.  We have over 275 channel partners, including providing a private-labelled service to most of the world’s biggest UCaaS and CCaaS providers.'
[20:03:53] <daemon> they are keeping who the company actually is outside of this job spec
[20:04:26] <thrig> ... code gets wheeled into a huge warehouse, camera pans out, end credits
[20:05:15] <daemon> probably I always keep my linkedin proifle as 'open to job offers' for if anything super special comes along, however sometimes something catches me eye as flat out weird - like this 
[20:08:07] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[20:08:50] <daemon> I am not sure they are ever going to find this person they are looking for, such a weird combination - they effectively want someone with really specific VoIP knowledge, combined with perl, combined with devops tools, combined with network stuff 
[20:08:56] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[20:09:13] <daemon> oh and effectively most of Azure as well
[20:09:36] <thrig> or it's an internal posting they already have someone for
[20:09:53] <daemon> nah for it to reach me they had to shove it out via recruiters
[20:10:18] <daemon> why I said if anyone is interested let me know ill give the recruiters your name
[20:10:52] <thrig> (but I knew someone who wanted a C++ dev, web coder, database foo, science lab management, sysadmin, a few other things, all for academic pay)
[20:11:08] <daemon> haha, how is that going for them 
[20:11:10] <thrig> that posting didn't pan out
[20:11:37] <jabberwok> daemon: Someone who thinks "Cisco" first when they hear "IOS"
[20:12:09] * GumbyPAN CPAN Upload: App-Netdisco-2.049007 by OLIVER https://metacpan.org/release/OLIVER/App-Netdisco-2.049007
[20:12:47] <daemon> :)
[20:12:54] <Altreus> Sisquo?
[20:13:52] <jabberwok> sys/quotactl(7) perhaps
[20:16:14] *** Joins: krismatrix (~krismatri@38.80.149.51)
[20:21:09] *** Quits: gggpkm (~gggpkm@188.119.64.181) (Ping timeout: 245 seconds)
[20:28:25] *** Joins: Pali (~pali@user/pali)
[20:31:07] *** Quits: ZZzz (~ZZzz@77.137.104.13) (Read error: Connection reset by peer)
[20:33:15] *** Joins: ZZzz (~ZZzz@77.137.104.13)
[20:37:58] *** Quits: ZZzz (~ZZzz@77.137.104.13) (Ping timeout: 252 seconds)
[20:43:48] *** Quits: schro (~schroding@etruscan.konundrum.org) (Remote host closed the connection)
[20:50:20] *** Joins: fuzzix (~fuzzix@46.7.53.110)
[20:55:44] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 245 seconds)
[21:01:01] *** Joins: krismatrix (~krismatri@38.80.149.51)
[21:11:35] *** Joins: ZZzz (~ZZzz@77.137.104.13)
[21:11:55] *** Quits: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com) (Ping timeout: 260 seconds)
[21:15:48] *** Joins: tomaw_ (tom@libera/staff/tomaw)
[21:20:10] *** tomaw is now known as Guest9078
[21:20:10] *** tomaw_ is now known as tomaw
[21:20:34] *** Quits: ZZzz (~ZZzz@77.137.104.13) (Ping timeout: 250 seconds)
[21:21:47] *** Quits: rwp0 (~rwp0@user/rwp0) (Read error: Connection reset by peer)
[21:22:07] *** Joins: rwp0 (~rwp0@user/rwp0)
[21:22:10] <gordonfish> Day 4. Still no sign of perlbot or his comrads. Search parties still prowling through the digital jungle, going from server to server and swinging from network to network. Hope must not be lost.
[21:22:47] <japh> what happened to perlbot and where's simcop?
[21:23:03] *** Joins: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com)
[21:23:13] <gordonfish> Vanished without a route trace
[21:23:22] <gordonfish> Or actually he's moving thing.
[21:23:22] <shaldannon> sort of like facebook DNS?
[21:23:39] <japh> as long as he's safe
[21:24:13] *** Quits: Guest9078 (tom@libera/staff/tomaw) (Ping timeout: 630 seconds)
[21:24:19] <thrig> I hear angle grinders are trending on facebook as a fashion accessory
[21:24:30] <Altreus> a fashion necessity
[21:24:35] <Altreus> never leave home without it
[21:25:57] <japh> oh so that's what an angle grinder is. That thing my dad hurt me with when I was 12
[21:27:08] <Altreus> were you messing around like you were told not to?
[21:28:10] <japh> I can't remember
[21:28:16] *** Quits: magla (~gelignite@55d44d33.access.ecotel.net) (Quit: Stay safe!)
[21:28:20] <japh> knowing myself, probably not
[21:34:09] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[21:40:44] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 245 seconds)
[21:41:02] *** Quits: proller (~p@2a02:6b8:0:51e:e774:5fd7:6739:c3f7) (Ping timeout: 246 seconds)
[21:43:25] *** Joins: ztx (~ztx@user/ztx)
[21:46:40] <zgu> the first time i learned what an angle grinder was was when "Angle Grinder Man" was going around cutting parking boots off of people's cars
[21:47:17] <mst> the angle grinder thing appears to be very unconfirmed
[21:47:18] <thrig> sounds like they had an angle to grind about something
[21:47:27] <mst> the door locks failing sounds pretty likely though
[21:48:03] <mst> japh: if I was worried, I know who to have text him to check in
[21:49:06] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[21:49:18] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[21:51:25] <mst> thrig: still hugely amused that the reason it went to shit so hard is they only dropped the BGP prefixes for their DNS, and some automated deployer did that part, so nobody noticed the problem until TTLs started to expire and by that time propagation was already quite significant
[21:51:41] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Ping timeout: 264 seconds)
[21:51:48] * mst much prefers making mistakes that take production down immediately, that sort of slow burn disaster is just horrible
[21:52:48] <thrig> probably time to add more monitoring (well provided it doesn't false alarm too much)
[21:53:44] *** Joins: rwp0 (~rwp0@user/rwp0)
[21:54:10] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[21:57:33] <gordonfish> To quote Mr. Scott: The more they overthink the plumbing, the easier it is the stop up the drain.
[22:03:54] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[22:05:31] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 268 seconds)
[22:05:58] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:05:59] <gordonfish> mst: At least with DNS if you have a resolver that talks directly to the root servers, you can just do `rndc flush` (or equivilent for non-isc-bind daemons) and check the current state of things if needed, rather than waiting on TTLs.
[22:06:22] <mst> gordonfish: that's ... irrelevant to the point
[22:06:27] <gordonfish> (Or dig +trace)
[22:06:37] <mst> the point was that it wasn't until the TTLs expired that stuff started to really break
[22:06:47] <gordonfish> mst: I was referring to the "slow burn" comment
[22:06:48] <mst> this isn't about debugging, this is about everybody else's production systems
[22:07:59] *** Joins: miojo (~mns@191.253.157.1)
[22:08:00] <gordonfish> mst: Ok, but couldn't whoever updated the records have checked more immediately instead of waiting on the TTLs?
[22:08:31] <gordonfish> (To be sure they did things correctly)
[22:09:03] *** Quits: zgu|skar0 (~zgu@2603-7080-b704-0800-16be-797d-71a4-f478.res6.spectrum.com) (Remote host closed the connection)
[22:09:15] <mst> read what I originally said again, please
[22:09:18] *** Joins: zgu|skar0 (~zgu@2603-7080-b704-0800-832f-b7d5-7b90-f547.res6.spectrum.com)
[22:09:22] *** Joins: rwp0 (~rwp0@user/rwp0)
[22:09:35] *** Quits: miojo (~mns@191.253.157.1) (Client Quit)
[22:09:38] <mst> > they only dropped the BGP prefixes for their DNS
[22:09:43] <mst> > some automated deployer did that part
[22:11:06] <gordonfish> Yes, I get that part. It's automated, but I would have thought that someone would be notified, at least when big changes are made, who could check that things are working, without waiting for TTLs to expire.
[22:11:07] <mst> also remember BGP doesn't propagate immediately so even if there *had* been a 'whoever' and they'd checked -immediately- DNS would've still been fine
[22:11:55] <mst> you're imagining a bunch of things that simply aren't true
[22:12:00] <gordonfish> I'm not fully keen on BGP propagation TBH, I know a lot more about DNS though.
[22:12:01] *** Joins: gloin (~gloin@user/gloin)
[22:12:28] <mst> firstly, if anybody was notified it will have looked like a routine change
[22:12:33] <mst> secondly, the internet doesn't work that way
[22:12:39] <gordonfish> I know generally what BGP is, but never dealt with it so my knowledge there is limited.
[22:13:18] <mst> the important thing to remember is that BGP configuration is *announced*, not pushed to peers
[22:13:36] <mst> much like with DNS, people don't see a change until they poll
[22:14:31] <gordonfish> Yeah was about to say that sounds a lot like DNS (master send out notificications to slaves/also-notifiyees, and those systems choose if and when to pull the update)
[22:16:04] <mst> I guess that theoretically you could maybe run a canary AS that you ping to poll and then double check things work, but the internet is sufficiently complicated I'm not sure if that would catch enough problems to be worth the maintenance, though also we're starting to get to the limits of -my- understanding of BGP as well
[22:16:25] <mst> but, yeah, basically, everything looked fine until basically *two* sets of periodic polling had happened, and *then* everything caught on fire
[22:18:07] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[22:18:55] <gordonfish-> From what I understand, BGP boils down to the heavy lifting core routers with massive routing tables that form the main structure of the Internet.
[22:19:29] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 245 seconds)
[22:19:32] <mst> precisely
[22:19:42] *** gordonfish- is now known as gordonfish
[22:19:44] <mst> so once that propagated traffic just didn't get to the nameservers
[22:20:08] <mst> everything was still up, and traffic was getting to the rest of facebook fine
[22:20:28] <mst> but if nobody can talk to your DNS servers, it doesn't matter if your DNS servers are 'up', and it doesn't really matter what the state of the rest of your infra is
[22:20:30] <phryk> Huh, i already stepped on an edge case… my decorator implementation only works for named functions – is it even possible to modify anonymous functions through MODIFY_CODE_ATTRIBUTES?
[22:20:48] <mst> phryk: lol attributes.pm
[22:21:29] <mst> phryk: one of the reasons perl has custom keywords like async/await is my sheer rage after several years of dealing with the limitations of attributes.pm
[22:21:30] <Grinnz> should be? sub :foo {}
[22:21:34] <gordonfish> mst: Makes sense
[22:21:44] <Grinnz> but not an already existing one no
[22:21:44] <mst> Grinnz: yeah, but getting them wrapped in-place is a bitch
[22:21:58] <phryk> Grinnz: yes, that syntax is valid – but how do I actually change the coderef?
[22:22:33] <phryk> Currently that's done by *{"${package}::$subname"} = $coderef; which doesn't work for anonymous functions.
[22:22:42] <mst> phryk: just use a subroutine export and 'my $sub = foo sub (...) { ... }' for anon subs
[22:22:52] <mst> and save 'sub thing :Foo' for named subs
[22:22:54] <Grinnz> well, it does, it's just not stored in any symbol table so you have a new coderef
[22:23:13] <Grinnz> that is, since it's an anonymous coderef, there is no canonical location to update
[22:23:19] <Grinnz> there's just things that have a ref to it
[22:23:41] <Grinnz> you can't change what things have a ref to, but you can give them a new thing
[22:23:48] <mst> attributes and anonymous subroutines are such a complete disaster I don't want to remember what I learned about the limitations - I just remember "this was a terrible idea and exceeded *my* crack tolerance"
[22:24:16] <Grinnz> a lot of it will probably work somehow, but the package-centric nature of it will break your brain 
[22:24:18] <mst> use a subroutine that wraps and returns it instead, your remaining shreds of sanity will thank you later
[22:25:04] <Grinnz> `*{"${package}::$subname"} = $coderef` isn't changing anything either, it's just putting a new wrapper in that spot
[22:25:23] <phryk> Grinnz: So, I can't change what the returned reference from the sub is "in transit"?
[22:25:30] <gordonfish> mst: And thank you
[22:25:41] <phryk> Yeah, I know, it's overwriting the old function reference with a new one.
[22:25:42] <Grinnz> not sure what that sentence is supposed to mean really
[22:25:56] *** Joins: pucara (~i@181.111.22.195)
[22:26:03] <Grinnz> you can change whatever you want when you're passing things around, but you can't change what's referred to by something else
[22:26:58] <phryk> Well, sub{…} returns a function reference. With in transit I mean change the reference that returns from within MODIFY_CODE_ATTRIBUTES. I'm kinda assuming this is not possible, but would like to make sure. :)
[22:27:59] <mst> phryk: I spent months on this, managed to get it half working, realised it was already far too much crack, and switched to figuring out how to modify the perl compiler from a cpan module as well because that seemed *less* awful
[22:28:16] <Grinnz> it doesn't seem like an approach that will work sensibly
[22:28:17] <mst> s/as well/instead/
[22:29:19] <Grinnz> MODIFY_CODE_ATTRIBUTES runs when it's declared so wouldn't impact how it runs - having it change the symbol table already seems kind of hacky but i don't know what the standard way to use attributes is
[22:29:26] <phryk> Okay, then I'll can that feature for now, because I really don't feel like introducing eldritch black magic to this right now.^^
[22:30:08] <mst> *cough* _more_ eldritch black magic *sough*
[22:31:21] <phryk> Currently the glob is the only thing even qualifying as regular black magic in there. And it's basically the same as I was recommended to do for decorators in here, just with the package name added. :P
[22:31:55] <mst> attributes.pm itself is eldritch black magic, the way it works is so freaking bizarre
[22:32:44] <phryk> Still a built-in language feature, so ¯\_(ツ)_/¯
[22:33:01] <mst> that doesn't make it any less horrible
[22:34:30] *** Joins: jess (~jess@libera/staff/jess)
[22:34:50] <phryk> Still, I can assume the syntax/protocol to stay roughly the same and if enough people use it, maybe someone will be motivated enough to make the implementation details less icky.
[22:35:08] <mst> no, we won't
[22:35:40] <mst> I'm not sure which part of what I already explained you missed, but attributes are fundamentally a disaster area and that's why we have custom keywords now instead
[22:36:11] <mst> the way to make it less icky will be "rewrite it to not use attributes" :D
[22:36:23] * GumbyPAN CPAN Upload: Playwright-0.016 by TEODESIAN https://metacpan.org/release/TEODESIAN/Playwright-0.016
[22:36:51] <mst> I'm not trying to be mean here, I'm trying to summarise 10-15 years (I forget exactly) of pain
[22:37:29] <mst> if you want to keep stabbing yourself in the genitals with a rusty fork I can't stop you, but I did feel morally required to have *warned* you
[22:41:14] <phryk> And both modules you recommended for implementing new keywords are marked as experimental/alpha. So until 2035 I'll probably be better off using attributes, because those are less prone to sudden changes.
[22:41:28] *** Joins: nxs__ (~nitronix@5.29.23.150)
[22:42:01] <phryk> The person who's most likely to deal with my code also strongly advised against it.
[22:42:08] <phryk> So that just carries more weight.
[22:43:59] *** Joins: proller (~p@80.240.216.69)
[22:44:23] *** Joins: miojo (~fu@191.253.157.1)
[22:44:33] <mst> I doubt that person has nearly the same level of experience with the two approaches, but anyway, I've warned you of the problems now, do as you will.
[22:46:17] <LeoNerd> Oh, yeah... code attributes don't work properly on anon subs
[22:47:06] <LeoNerd> I plan to look at that someday but that's waaay down the todo list
[22:48:32] *** Joins: ozzzo_work (~ozzzo_wor@h87.s239.verisign.com)
[22:50:24] <phryk> Ye, no worries. Currently only need that in nested decorators, and those are *far* fewer than decorated named functions I want, so it's not much of an issue, even for my use-case. Code for nested decorators would just look a bit neater.
[22:50:33] <ozzzo_work> is perl.bot down or is it just me?
[22:50:54] <LeoNerd> Yeah, it's a shame the internals of attributes are so annoyingly broken. The actual *syntax* of them is very nice
[22:50:55] <phryk> Destination Host Unreachable
[22:50:59] <LeoNerd> Maybe oneday I'll get around to making something nicer
[22:51:50] <LeoNerd> Lexically scoped, extensible, parsed inplace,... applicable to protosubs and anoncvs, ...
[22:51:50] <phryk> LeoNerd: if you extend the return value for MODIFY_CODE_ATTRIBUTES to also return the coderef that ends up being used, it would enable less hacky decorators and probably a lot more fancy metaprogramming stuff, too. :)
[22:51:58] <LeoNerd> Not really
[22:52:04] <LeoNerd> The whole API shape is stupid
[22:52:14] <LeoNerd> It needs *entirely* ripping out and redoing
[22:52:23] <ozzzo_work> what am I doing wrong here? 
[22:52:24] <ozzzo_work> https://paste.centos.org/view/464bd1df
[22:52:25] <Paperbot_> Link title(s): [ Untitled - Pastebin Service ]
[22:52:26] <LeoNerd> E.g. the design shape of the way I've done them in Object::Pad might be a little better
[22:52:41] <phryk> Alright, give me a headsup whenever you get around to it, would be interesting to see how you re-engineer the thing. :)
[22:53:01] <LeoNerd> Unlikely this year. Too many other things up in the air
[22:53:03] <LeoNerd> Next year. Or two
[22:53:14] <LeoNerd> (or quicker if anyone helps)
[22:53:17] <phryk> Ye, can relate. Also always have too many projects for my time. :P
[22:53:19] <ozzzo_work> I could leave out the quotes, but I'm trying to figure out how to make quotes work in a regex
[22:53:44] <phryk> Heh, I haven't gotten around to spend any time on my own main project in like 5 months now^^
[22:54:37] <mst> ozzzo_work: I don't understand what's wrong with that output
[22:55:11] <ozzzo_work> oh crap, it started working now
[22:55:14] <mst> ozzzo_work: except the fact you never actually set $return_status to anything
[22:55:30] <mst> ozzzo_work: also 'sub check_delete' not 'sub Check_Delete' please
[22:55:54] <ozzzo_work> mst: why lc?
[22:56:15] <mst> ozzzo_work: because that's how you're supposed to write perl and doing it wrong makes the code harder to read
[22:56:36] <ilmari> ozzzo_work: the perl convention is StudlyCaps for package names and snake_case for function and variable names 
[22:56:41] <ozzzo_work> is there a document on that?
[22:56:49] <ilmari> and SCREAMING_SNAKE_CASE for constants
[22:57:01] <ilmari> I don't know of any language/style that uses Camel_Snake_Case
[22:57:02] <Grinnz> https://perldoc.perl.org/perlstyle
[22:57:02] <Paperbot_> Link title(s): [ perlstyle - Perl style guide - Perldoc Browser ]
[22:57:11] <ozzzo_work> ok reading, ty!
[22:57:42] <Grinnz> it talks about it mainly in the context of variable names, but the same things apply to sub names
[22:57:45] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[22:57:51] *** Joins: dibz` (~dibz`@66.228.254.16)
[22:57:53] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Read error: Connection reset by peer)
[22:58:03] *** Quits: dibz` (~dibz`@66.228.254.16) (Client Quit)
[22:59:00] <mst> phryk: so, you've now heard from probably the two people who've spent the most time dealing with this. I think you have definitely been warned at this point :P
[22:59:40] <mst> note: I may change my mind on attributes *after* LeoNerd rewrites them from the ground up, but until that happens, I stand by "probably don't, use the keyword API instead, you'll get more reliable and sane code that way"
[23:03:14] *** Quits: nxs__ (~nitronix@5.29.23.150) (Ping timeout: 245 seconds)
[23:04:34] *** Quits: gordonfish- (~gordonfis@user/gordonfish) (Ping timeout: 250 seconds)
[23:05:56] <phryk> mst: Yes, I consider myself aptly warned. Still needed to make this use nice syntax in a way that doesn't make my coworker hate me. If this ends up exploding, I'll forward them your "I told you so". :P
[23:06:31] <phryk> The syntax for this *is* pretty nice tho. ;)
[23:08:21] <mst> oh, yes, attributes -syntax- is quite pretty, bear in mind Catalyst (the predecessor to Mojolicious) used attributes on controller methods for all its routing declarations
[23:08:52] <mst> but having rewritten the code backing that more than once ... the -semantics- are a massive pain in the arse
[23:08:55] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[23:09:49] *** Quits: furrymcgee (~devuan@cgn-213-196-210-25.nc.de) (Quit: leaving)
[23:10:22] *** Quits: miojo (~fu@191.253.157.1) (Ping timeout: 252 seconds)
[23:11:19] *** Joins: miojo (~fu@191.253.159.2)
[23:15:32] *** tejr_ is now known as tejr
[23:17:03] *** Joins: anthk_ (~anthk_@92.176.105.30)
[23:21:55] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 252 seconds)
[23:22:46] *** Parts: ori (~atdt@user/ori) (WeeChat 3.0)
[23:23:29] *** Joins: rwp0 (~rwp0@user/rwp0)
[23:27:22] *** Quits: pucara (~i@181.111.22.195) (Quit: Lost terminal)
[23:27:47] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 246 seconds)
[23:31:44] *** Joins: tg_ (~tg@rockylinux/infra/tg)
[23:32:46] *** Joins: PerlBoy (~PerlBoy@83-87-247-233.cable.dynamic.v4.ziggo.nl)
[23:34:11] *** Parts: PerlBoy (~PerlBoy@83-87-247-233.cable.dynamic.v4.ziggo.nl) ()
[23:34:54] *** Quits: tg (~tg@rockylinux/infra/tg) (Ping timeout: 245 seconds)
[23:38:27] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 265 seconds)
[23:40:19] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 245 seconds)
[23:40:41] *** Joins: WinterStar (~IceLight@user/icelight)
[23:44:58] *** Quits: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com) (Ping timeout: 252 seconds)
[23:45:01] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 252 seconds)
[23:45:04] *** Joins: krismatrix (~krismatri@38.80.149.51)
[23:49:31] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (Remote host closed the connection)
[23:50:55] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[23:53:42] *** Joins: rwp0 (~rwp0@user/rwp0)
[23:53:48] *** Joins: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com)
[23:54:40] *** Joins: schro (~schroding@etruscan.konundrum.org)
[23:55:28] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[23:55:30] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[23:55:50] *** Joins: proller (~p@2a02:6b8:b081:1214::1:2e)
