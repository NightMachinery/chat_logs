[00:22:59] <gilberth> pjb: Perhaps those laser guns have stabilizers of some kind.
[00:25:00] <edgar-rft> do curved laser beams even exist?
[00:28:09] <White_Flame> sure, just point them next to a black hole
[00:28:29] <White_Flame> or through some lens
[00:28:44] <White_Flame> or a fiber optic cable
[00:28:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:07:58] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[01:15:13] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[01:28:04] *** Joins: dra (~dra@2a04:4540:6422:4100:9019:39f0:d135:1e22)
[01:28:06] <dra> Hello!
[01:33:07] *** Joins: Oddity (~Oddity@user/oddity)
[01:36:17] <phoe> heyyy
[01:36:34] <phoe> looks like CLISP will have modern builds with package-local nicknames soon!
[01:36:39] <phoe> thanks to Roswell
[01:38:37] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 240 seconds)
[01:39:10] <dra> Hi phoe!
[01:39:10] <dra> Nice.
[01:39:57] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-43fc-8805-e18a-4a61.res6.spectrum.com)
[01:49:55] <selwyn> hm
[01:51:36] <phoe> hm?
[01:51:52] <selwyn> thinking about curved laser beams
[01:53:30] <selwyn> there is a slogan that 'gravity bends light', yet i always thought of light rays as tracing out the 'straight lines' in curved spacetime
[01:54:20] <sm2n> depends what you mean by straight
[01:54:23] <selwyn> do null geodesics have an intrinsic curvature?
[01:54:28] * selwyn is bad at relativity
[01:55:01] <dra> selwyn: Bad compared to what?
[01:55:18] <sm2n> I would guess so?
[01:55:49] <selwyn> sm2n: well, light traces out the shortest distance between two points with respect to the notion of 'local distance' you get in the description of a spacetime
[01:55:58] <sm2n> like, the whole point of intrinsic geometry is that it should be independent of the embedding
[01:56:17] <selwyn> i meant to say, do they have a non-zero intrinsic curvature
[01:56:54] <sm2n> I want to say yes, but I am rusty
[01:57:00] <selwyn> me too
[02:00:41] *** Quits: dra (~dra@2a04:4540:6422:4100:9019:39f0:d135:1e22) (Quit: Leaving)
[02:03:47] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:14:29] <clothespin_> good morning
[02:20:14] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:31:26] * edgar-rft is relatively bad according to Einstein :-)
[02:36:16] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[02:36:49] <edgar-rft> Whether Einstein and Heisenberg ever went into a bar is relatively uncertain.
[02:37:43] <phoe> okay, Roswell's clisp-head has PLNs that *almost* work
[02:37:47] *** Joins: aeth (~aeth@user/aeth)
[02:42:01] <phoe> good niiiiight
[02:42:07] <selwyn> goodnight phoe
[02:42:33] <hayley> https://twitter.com/__femb0t/status/1487355183042551808
[02:42:34] <Gnuxie> sleep tight birb
[02:42:48] <hayley> "Apparently, the circuit layout of a distortion pedal is being shared by people in Italy as the chip in the covid vaccine."
[02:43:46] <phoe> I saw this in early 2021 I think
[02:43:51] <phoe> good to see it's still making rounds
[02:44:22] <shka> lol
[02:45:05] <shka> why they would even believe that 4 transistors is enough for a covid chip
[02:45:53] <hayley> I got somewhat annoyed when the security board implant which is a plot point in the Kingsman movie just seemed to have a dangly wire and two passive conponents.
[02:48:16] <hayley> Seems like 8 op amps though. Not that you can buy any which can handle the 5G modulation frequency range.
[02:53:50] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:57:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[02:59:23] *** Joins: aeth (~aeth@user/aeth)
[03:10:31] *** Joins: dra (~dra@2a04:4540:6422:4100:719a:ad7c:c124:e0c9)
[03:18:35] <selwyn> perhaps it is the same chip as the fake iraqi bomb detector
[03:18:54] <hayley> https://old.reddit.com/r/programming/comments/sfjgm8/locks_in_js_because_why_not/ lol
[03:18:55] -ixelp- Locks in JS, because why not? : programming
[03:19:31] <hayley> "Whilst it's certainly possible (as I will demonstrate soon) to have situations which do require synchronization, most of the time these issues are (1) prevented entirely by some framework or library that we're using, or (2) just not being so greedy with async optimizations." 1. What does the library do? Magic? 2. My apologies.
[03:20:17] <hayley> But I guess someone worked out that you can't actually maintain any invariants over await points without locking. Oops. 
[03:20:32] *** Joins: notzmv (~zmv@user/notzmv)
[03:21:28] <moon-child> 'exercise for the reader'  joke's on you; I can't read
[03:40:29] *** Quits: dra (~dra@2a04:4540:6422:4100:719a:ad7c:c124:e0c9) (Ping timeout: 268 seconds)
[03:44:21] *** contrapunctus_ is now known as contrapunctus
[03:49:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:54:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[04:02:11] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:28:20] <hayley> "`async` in JS is in my opinion what really brought concurrency to mainstream programming and one of my favourite language features (of any language). It's super simple to use, and really made the async nature of JavaScript 100x more ergonomic."
[04:28:29] <hayley> I thought Dijkstra brought concurrency to mainstream programming. Oh well.
[04:33:07] <moon-child> lovely
[04:33:15] <moon-child> chrome scrolls up the page a few pixels every time I refresh
[04:33:41] <hayley> And the "not my suspention points noooooo" guy is in the comments too.
[04:34:00] * hayley resists the urge to say "lol no multicore"
[04:35:41] <moon-child> what, you don't like web workers? ;)
[04:35:59] <hayley> Not really, no.
[04:36:04] <hayley> https://www.reddit.com/r/rust/comments/sfhffm/the_curious_absence_of_lifetimes_in_our_daily_code/huprpag/ lol again
[04:36:05] -ixelp- The Curious Absence of Lifetimes in our daily code : rust
[04:36:14] <hayley> " Even when you understand that a linked list is not what you should be building, it's easy to accidentally make data structures where it happens. For example, in a game, every item in an inventory is owned by a character. It's tempting to add a reference from the item to the owner so that you can easily do calculations. But then you have really bad lifetime problems. You need to design your code so that you never need to reach through the item
[04:36:14] <hayley> to get to it's owner."
[04:36:31] <hayley> "We can't use the system that makes pointers safe." "No problemo, just roll your own unsafe pointers to get around it."
[04:47:23] <sm2n> fearless design
[04:49:18] <hayley> "Ironically most DBMS use locks to solve multiple writes, so.... Lol" "The fast ones use multi-version concurrency control." "Mostly the ones that give up ACID for the speed."
[04:49:30] <hayley> Err...Postgres uses MVCC?
[04:50:24] <hayley> So does MySQL. Well, sucks they give up ACID now.
[04:51:19] <sm2n> I think they still call it ACID
[04:53:08] <hayley> I'm mostly amused that, according to this guy, MVCC does not allow for ACID semantics. So every "real" database since the 80s doesn't implement ACID? 
[04:53:35] <sm2n> oh
[04:59:39] <hayley> Maybe not every database, but the good ones eschew locking wherever possible.
[05:00:29] <random-nick> sqlite uses locking I think
[05:00:32] <random-nick> but sqlite is sqlite
[05:02:15] <moon-child> yeah, sqlite isn't _supposed_ to scale
[05:03:37] * hayley contemplates making QL:REGISTER-LOCAL-PROJECTS parallel, since it takes forever to scan SICL when it's not in cache.
[05:06:14] <random-nick> actually sqlite has a mode where it uses locks a lot less https://sqlite.org/wal.html
[05:06:16] -ixelp- Write-Ahead Logging
[05:06:21] <sm2n> sqlite uses locks, but it still scales pretty well
[05:06:26] <sm2n> yeah, was going to post that
[05:06:41] * hayley wonders if SBCL can GC code space. If not, it is not going to enjoy compiling 10,000 random REs.
[05:06:46] <sm2n> https://blog.wesleyac.com/posts/consider-sqlite
[05:06:46] -ixelp- Wesley Aptekar-Cassels | Consider SQLite
[05:07:14] <random-nick> also sqlite wants to be safe to be used from different processes which is something server-based dbs don't have to worry about
[05:07:31] <sm2n> sqlite is safe to use from different processes
[05:07:53] <random-nick> yeah, unless you tell it not to be
[05:07:55] <sm2n> they didn't want to make it safe, but everyone complained, so now that is the default
[05:10:03] * hayley makes REGRIND parallel and watches it go.
[05:11:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[05:17:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:18:56] *** Joins: atw (~user@ool-18bf5678.dyn.optonline.net)
[05:36:05] <hayley> https://github.com/telekons/one-more-re-nightmare/blob/master/Tests/tests.lisp Here we are, a shit test suite.
[05:36:05] -ixelp- one-more-re-nightmare/tests.lisp at master · telekons/one-more-re-nightmare · GitHub
[05:57:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[06:15:28] *** Joins: epony (epony@user/epony)
[06:16:31] <hayley> gilberth: Any thoughts on <https://rewis.io/urteile/urteil/lhm-20-01-2022-3-o-1749320/>?
[06:16:32] -ixelp- LG München: 3 O 17493/20 vom 20.01.2022 | 3. Zivilkammer Papierfundstellen: GRUR-RS 2022, 612
[06:17:06] <hayley> Apparently the story is that you cannot use Google Fonts as a hosting service, and users who incidentally connect to Google to download fonts are entitled to 100 euros.
[06:17:25] <moon-child> hayley: you had a reference for v8 using inline caches to decide where to allocate, right?
[06:17:50] <hayley> https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43823.pdf
[06:17:58] <hayley> "How ironic."
[06:18:08] <moon-child> thanks
[06:18:10] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[06:18:33] <hayley> It's plain old pre-tenuring with runtime feedback, though the idea of a "memento" object is new.
[06:19:55] *** Joins: aeth (~aeth@user/aeth)
[06:20:58] * hayley uploaded an image: (251KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/iJsYisucvkfSJeqfVHqlApoz/rust-fandom.png >
[06:26:47] <sm2n> There's a lot of talk about v8 but what about spidermonkey, and whatever webkit's engine is called (I forgot)
[06:28:03] <hayley> I thought WebKit uses V8.
[06:29:12] <sm2n> I don't think so?
[06:29:15] <sm2n> let me check
[06:30:02] <hayley> Oh, it's JavaScriptCore?
[06:30:03] <sm2n> yeah, they use javascriptcore
[06:30:14] <sm2n> https://webkit.org/blog/5852/introducing-the-b3-jit-compiler/
[06:30:16] -ixelp- Introducing the B3 JIT Compiler | WebKit
[06:30:22] <hayley> There ye go then.
[06:32:02] <hayley> Hm, there was some other paper on Java pretenuring by using feedback collected at runtime (compared to feedback from prior executions).
[06:37:05] <hayley> Here it is: https://www.cs.purdue.edu/homes/hosking/ismm2000/papers/harris.pdf
[06:37:06] <sm2n> "any ideas why drop()-ping a 1.5G objects HashMap<String, Vec<String>> (for a memory occupation of about 250GB) takes around 4 hours on a r6i.metal aws instance? am i using the wrong map there? it's a temporary in-memory map for a huge conversion in a data pipeline, the code is not doing anything fancy, just operating on a lot of data"
[06:37:14] <sm2n> it keeps happening
[06:38:35] <hayley> https://www.youtube.com/watch?v=NIzleISU5jw
[06:38:35] -ixelp- Beat the Clock - YouTube
[06:39:09] <hayley> Oh good God, they're going to be paying through the nose for dropping that hash map.
[06:40:11] <sm2n> https://aws.amazon.com/ec2/instance-types/r6i/
[06:40:11] -ixelp- Amazon EC2 R6i Instances – Compute –Amazon Web Services
[06:40:12] <sm2n> hahahaha
[06:40:48] <sm2n> it takes 4 hours... with 128 threads available and probably doing nothing
[06:41:02] <hayley> "On-Demand hourly cost: 8.064"
[06:41:11] <hayley> So that hash map costs $32 to drop?
[06:41:16] <hayley> I guess the GC would be slower though.
[06:44:54] <sm2n> lol
[06:46:01] <hayley> I mean, Amazon sponsors the Rust Foundation, so /me wonders if that conveniently won't get fixed quicker. Wouldn't that be funny.
[06:46:28] <sm2n> I don't think this person is affiliated with amazon
[06:47:00] <hayley> But Amazon is getting money for those servers.
[06:47:14] <hayley> ...or singular server, I'm not used to paying US$8/hour for one.
[06:47:35] <sm2n> right, and if people spend hours not using their threads, all the better for them
[06:48:00] <hayley> Right.
[06:48:24] <hayley> It'd be funny, much like the AWS "how 2 async in Rust" video with its misleading benchmark, but probably too stupid for reality...somehow.
[06:52:26] <hayley> Though, perhaps a very practical sort of supply chain attack of sorts.
[06:54:35] <sm2n> Oh. I conveniently missed the "won't" in your message
[06:54:39] <sm2n> Now that makes sense
[07:01:18] <hayley> It'd also be hard to statically tell if having multiple threads bang on free() would help (and it also depends on the malloc implementation). If only we had a dynamic system which could tell at runtime, and maybe it could manage memory so you only pay for the live objects...
[07:12:17] <sm2n> Bloat!
[07:12:33] <hayley> Indeed. It won't fly on my microcontroller.
[07:14:13] <hayley> https://twitter.com/larsbrinkhoff/status/1487106987628371970 The Project MAC lab's PDP-6 in photos.
[07:15:39] <sm2n> nice
[07:16:20] <sm2n> so I found this today <https://github.com/ambientsprotocol/whitepaper>
[07:16:20] -ixelp- GitHub - ambientsprotocol/whitepaper: 📄 The Ambients protocol white paper
[07:16:27] <sm2n> want to take bets on how bad it is?
[07:16:32] <sm2n> haven't read it yet
[07:16:48] <sm2n> author guy appears to have worked on libp2p
[07:18:13] <hayley> "Correct-by-construction [7] is a design philosophy recently popularized by the CBC Casper [16] proof-of-concept" That?
[07:18:31] <hayley> "Things that are designed to be correct-by-construction use mathematical abstractions to model the thing itself and to prove its correctness" Seems a lot older than a protocol on Ethereum. idk
[07:19:16] <sm2n> apparently it wasn't popular though [citation needed]
[07:20:01] <hayley> I lost interest pretty quickly, admittedly.
[07:20:26] <hayley> It's also inconvenient to have "ambient calculus" but then call a protocol which uses it the "Ambients protocol".
[07:21:39] <sm2n> "On the other hand, restricting the program expressivity this way lets total functional program behavior be verifiable in the first place."
[07:21:58] <sm2n> But there's no upper bound...
[07:22:17] <sm2n> I don't understand why people apparently care about totality in practice, in an adversarial scenario
[07:24:10] <jeosol> It's really maddening working with some error traces in other languages. I have been battling a bad bug in python for last few hours. Not sure, perhaps I suck at python. The error traces in CL+slime+emacs really does take you to where the problem is and you tend to fix it in time.
[07:24:28] <hayley> Right, we're more concerned about step count, rather than "it will end after the heat death of the universe, but it _will_ end!@"
[07:24:46] <jeosol> With other languages, it's even hard to figure what's calling what ... apologies, not trolling, just have to work with this BS language
[07:31:18] <sm2n> Note that you can get a vaugely interactive experience in python with ipython
[07:31:42] *** Quits: kakuhen (~kakuhen@user/kakuhen) (K-Lined)
[07:31:42] *** Quits: hayley (~theemacss@user/hayley) (K-Lined)
[07:31:42] *** Quits: sepanko (~sepanko@user/sepanko) (K-Lined)
[07:31:43] <sm2n> Can even make it break into the debugger on error without unwinding the stack
[07:31:43] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (K-Lined)
[07:31:43] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (K-Lined)
[07:31:43] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (K-Lined)
[07:31:43] *** Quits: sp (~sp@user/susam) (K-Lined)
[07:32:10] <mfiano> hayley was klined
[07:32:15] <mfiano> o.O
[07:32:21] <sm2n> sorry what?
[07:32:32] <mfiano> hayley was banned from Libera
[07:32:45] <sm2n> oh, looks like a bunch of people were
[07:32:47] <sm2n> odd
[07:32:58] <sm2n> my client filtered it out so I had to check logs
[07:33:04] <mfiano> Oh I see. Yeah my client only shows quits for recent speakers.
[07:33:16] <sm2n> I think all those who were were matrix users?
[07:33:31] <sm2n> probably some issue with the bridge
[07:33:45] <mfiano> That is actually kind of funny.
[07:33:54] <mfiano> It seems so though, yes.
[07:41:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:57:08] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:57:09] <kakuhen> so do I try posting there or?
[07:57:09] <kakuhen> allegedly libera just k-lined all matrix users and i want to see if that's true
[07:57:10] <kakuhen> a friend just informed me of this and I tell him I can post just fine in #lispcafe
[07:57:10] <kakuhen> his response: "you are probably seeing the matrix side only"
[07:57:11] <kakuhen> thanks for helping me confirm btw
[07:57:11] <kakuhen> test
[07:57:12] <kakuhen> I just joined that matrix channel
[07:57:12] <kakuhen> hopefully this gets fixed soon
[07:57:13] <kakuhen> I don't mind having to use my IRC client again, but my matrix server effectively acts as a bouncer for me
[07:57:13] <kakuhen> ah, my friend said it was just fixed, apparently
[07:57:13] *** Joins: sp (~sp@user/susam)
[07:57:14] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[07:57:14] <kakuhen> "apparently it was a dumb script"
[07:57:14] <kakuhen> "their banning script apparently does /64 for all ipv6 bans and it took out the entire bridge"
[07:57:28] *** Joins: sepanko (~sepanko@user/sepanko)
[07:57:28] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[08:11:27] *** Joins: semz_ (~semz@user/semz)
[08:13:52] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:17:50] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Client limit exceeded: 20000)
[08:17:51] *** Quits: sp (~sp@user/susam) (Quit: Client limit exceeded: 20000)
[08:22:16] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Client limit exceeded: 20000)
[08:22:38] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Client limit exceeded: 20000)
[08:22:39] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Quit: Client limit exceeded: 20000)
[08:35:44] <neominimum> Kill it with fire, or...? https://pastebin.com/raw/K8FthqnY
[08:36:02] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:38:14] <moon-child> I don't really the see the point
[08:38:26] <moon-child> and that imposes that the content of the comment must be readable, which is an unreasonable implementation
[08:38:36] <moon-child> ({ #.(magic) )
[08:39:06] <moon-child> ({ ellipse . . .)
[08:39:21] <moon-child> ({ this is the first part; this is the second )
[08:39:52] <moon-child> ^ couple of problems that will definitely come up
[08:43:23] <moon-child> (I will also note: if you want a commenting mechanism that does not require irregular syntax, you can already use strings, which have none of these problems and even have precedent: documentation strings)
[08:46:34] <sm2n> yeah, seems like a solution looking for a problem
[08:46:41] <neominimum> yeah putting it in a docstring  works alright, but the indentation looked a little odd with the way newlines in the docstring have no indentation, at least in emacs.
[08:47:30] <neominimum> ran across it when looking at comment style guidelines
[08:47:58] <neominimum> apparently clojure utilises something in this fashion
[08:48:15] <neominimum> not for prose though, I think
[08:49:23] <moon-child> why not break up into multiple strings, then?
[08:49:44] <moon-child> (if c (progn "this is the first line of explanation for" "why we return 3--oops, second line" 3) 4)
[08:50:16] <neominimum> moon-child: about it being read in, that didn't even occur to me tbh, haha. you make some good points
[08:53:51] <sm2n> you could also make a reader macro
[08:53:55] <sm2n> #md""
[08:54:23] <sm2n> then you just have to teach emacs to recognize the syntax
[08:57:06] * moon-child has reader macros, has not taught emacs about them yet; rather annoying
[09:01:26] <neominimum> I've not even attempted understand how reader macros work yet, as I don't mind all the parentheses. I think I'll just stick to commenting things with good ol' trusty semi-colons
[09:03:08] <neominimum> looks almost like reading a page with a ruled margin like we had to do when I was in school
[09:06:30] <neominimum> thinking about it now I can't actually think of a good reason why we were required to rule our own margins down the edge of the page.
[09:06:53] <sm2n> I certainly have not heard of such a practice
[09:11:43] <neominimum> https://randwickb-h.schools.nsw.gov.au/about-our-school/rules-and-policies/bookwork-policy.html not a school I went too, but the whole margin thing is apparently a part of something called 'gonot a school I went too, but the whole margin thing is apparently a part of something called 'good book-work'od book-work'
[09:12:21] <neominimum> wut? I'm not sure what happened with the text there
[09:14:25] <neominimum> one can just buy books with pre-ruled margins though which is what most ended up doing.
[09:35:25] <jeosol> sm2m: thanks for that info. I was frustrating. I was running django in front of SBCL so it was a bit of pain debugging networks calls and the http requests. For small problem, I do use jupyter notebook
[09:36:31] <sm2n> jeosol: Oh, I don't know if it works with django.
[09:38:23] <jeosol> sm2n: not like it works with Django. My application is most in CL (SBCL) I just use django on the front part to handle a lot of the front-end issues - hence the debugging issues
[09:39:47] <sm2n> Ah, how is that working out for you? Would you recommend it?
[09:43:08] <jeosol> sm2n: it's been okay so far. I am a solo developer on a large project and so I was leveraging django since it has a lot of things and it's used. It's not bad. Django is the application server, CL is the worker and nginx is the web server - it sounds a bit like a mess hence my debugging pains
[09:43:59] <jeosol> not bad if you know python somewhat, I assume you do from your earlier comments
[09:44:10] <sm2n> How do you do IPC between Django and CL? CL exposes a REST API?
[09:47:58] <jeosol> Yes, rest back and forth between both
[09:48:51] <jeosol> CL has all the application logic, but for routing handling request and db interactions, i leave it on the django side. they have good tools and not issues and the db can also be on another machine
[09:48:56] <sm2n> jeosol: I see, interesting. What do you use on the CL side to write stuff?
[09:49:13] <jeosol> you mean tools like editor?
[09:49:17] <sm2n> I've only really used hunchentoot
[09:49:20] <sm2n> no, libraries
[09:49:25] <jeosol> I see,
[09:49:36] <jeosol> yeah it's hunchentoot
[09:50:22] <jeosol> so the CL is bare, with not much protection (rate limiting, authentication, authorization, etc). I put that on the nginx and django side
[09:51:12] <sm2n> Cool, nice to know people find this viable
[09:52:31] <jeosol> you mean find hunchentoot viable?
[09:53:12] * moon-child used woo, wrote his own router; seemed straightforward enough
[09:53:18] <moon-child> don't really see the point of big fancy web frameworks
[09:54:08] <moon-child> especially the ones that abstract over many http implementations.  Why do I care how my web framework implements http?
[09:56:14] <sm2n> jeosol: Yeah, and also the split approach
[09:56:46] <sm2n> moon-child: It becomes hairy once you start adding middleware and such
[09:57:06] <moon-child> what sort of middleware
[09:57:09] <moon-child> ?
[09:57:26] <sm2n> I thought that in the past too, and wrote my own router and such even, but I came around to the other side eventually
[09:58:03] <jeosol> sm2n: the split approach works fine, I did have some frameworks for  using docker and allowing for scaling
[09:58:22] <sm2n> Stuff like auth policies, testing, etc are actually kind of annoying to do without a framework
[09:58:43] <sm2n> CRUD applications aren't technically interesting, but the boilerplate does exist for a reason
[09:58:46] <jeosol> moon-child:  fair point, I was looking at decoupling systems for more reliability; and django is already used for large problems
[10:00:20] <moon-child> sm2n: I do not have much experience with implementing large web applications.  I work on one at work, where the web framework does not really do very much
[10:00:26] <jeosol> and like sm2n: alluded, it's much easier to work it. I did have the CL side interacting with the db but since I was looking at decentralized, it's better if the worker and frontend have less coupling (same machine, etc) so I opted for only the django side to interact with db and have the CL side as consumers/workers (using queues, or direct http
[10:00:26] <jeosol> request to CL side)
[10:00:56] <moon-child> there are unit tests, which test units, not requests; and there are end-to-end tests, which test behaviour in a simulated browser; neither benefits from the framework
[10:01:10] <moon-child> authentication is all home-grown
[10:01:24] <jeosol> moon-child: I see, django has been used for large applications
[10:01:36] <jeosol> moon-child: interesting. It's all CL for you guys or what language?
[10:02:05] <moon-child> jeosol: d.  Fwiw I am getting out of that job
[10:02:25] <jeosol> are you stateside?
[10:02:34] <sm2n> moon-child: I see. Fancy frameworks are definitely not necessary, just convenient.
[10:02:43] <jeosol> I didn't get that, is it "d" language?
[10:02:54] <moon-child> jeosol: yes
[10:02:58] <moon-child> sm2n: eh, I still don't see it :P
[10:03:06] <jeosol> interesting ...
[10:03:12] <sm2n> I think it is instructive to look at something like django or rails and understand why each piece is there
[10:03:42] <sm2n> I found that while I still didn't really like the whole thing, I could at least see a reason for each part to be there
[10:04:14] <moon-child> you are probably right.  But--to be completely honest, I am not that interested.  So, rather than looking them up, I will shut up :)
[10:04:37] <sm2n> heh
[10:33:20] <jeosol> moon-child: funny
[10:33:42] <jeosol> sm2n: what are you working on or using CL for? you work with python
[10:33:45] <jeosol> ?
[10:36:21] <sm2n> jeosol: I'm not currently employed. And as a hobbyist I prefer to use CL for everything. I have used python in the past, and still use it for some small tasks (what people generally refer to as scripting). Wouldn't say I'm particularly experienced with it though
[10:58:55] *** semz_ is now known as semz
[11:09:30] <moon-child> jeosol: yeah I use python https://www.cliki.net/python
[11:09:30] -ixelp- CLiki: Python
[11:10:35] <jeosol> moon-child: touche, hahaha , nice one
[11:49:01] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[11:49:54] *** Joins: robin (~robin@user/terpri)
[12:09:26] <epony> it is very important what indiduals choose, I don't use that therefore..
[12:19:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[12:22:06] *** Joins: aeth (~aeth@user/aeth)
[12:47:57] <selwyn> https://www.youtube.com/watch?v=SsteDE8h6jc
[12:47:58] -ixelp- Half-Life: RAY TRACED - Teaser - YouTube
[13:31:45] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[13:31:50] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[13:33:47] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:35:14] *** Joins: shka (~herr@109.231.0.226)
[13:45:40] <ck_> less significant an improvement than I thought
[14:12:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:16:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[14:16:46] <phoe> the low polygon count makes it troublesome
[15:08:41] <gilberth> How do you cope with all your small utility functions you carry around and are so small that a proper system for them would be overkill?
[15:13:06] <shka> gilberth: i am trying to not do that
[15:13:18] <shka> i just use serapeum and alexandria
[15:13:28] <shka> and that's it
[15:17:27] <shka> if i would have something really useful, i would try to open merge request for serapeum
[15:18:22] <gilberth> shka: Well, that doesn't solve my problem. And for merge request: I don't like that everybody spills their personal toolbox into some repository.
[15:21:31] <gilberth> I started to gather my routines that I kept moving around by cut and paste. You find universal things there like PARTITION, somewhat specific things like UNTABIFY, useful non-trivial things like ENSURE-START-END for sequence functions and highly specific functions like VALID-EAN-P.
[15:22:57] <gilberth> Various escaping and unescaping routines. That sort of things.
[15:31:02] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:31:51] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:39:20] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[15:40:23] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[15:41:01] <shka> gilberth:  well, in that case you can make a repository and use it as submodule 
[15:45:57] <gilberth> shka: Sure I could dump all my functions into DE.BAUHH.TOOLBOX, yet in case I would want to release sth I don't want to make it a prerequisite.
[15:55:07] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:55:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[15:57:46] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:01:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[16:04:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:09:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:16:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[16:17:58] <ck_> when was your last release of something
[16:19:05] <gilberth> It was a while. I suffer from releasephobia. A mental blockade of some kind.
[16:19:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[16:19:42] <ck_> if releases are that infrequent, surely a clean-up in the event of it happening is not a big deal then
[16:21:41] *** Joins: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net)
[16:22:23] <gilberth> As it is right now, a clean-up wouldn't be needed as I used cut and paste. But that is evil.
[16:23:58] <gilberth> Meanwhile I am surprised that (ldb (byte 8 0) x) and (logand 255 x) turn to different code in CCL. The former insists on type checking even with (safety 0).
[16:25:27] <gilberth> Anyhow, I would need to work on my blockade, which perhaps has its roots in perfectionism for one part.
[16:28:10] <gilberth> Ironically (ldb (byte 8 3) x) and (logand 255 (ash x -3)) is the same with (safety 0). The consequence is that (ldb (byte 8 0) x) has type checking with unsafe code, while (ldb (byte 8 3) x) hasn't.
[16:41:13] <pjb> gilberth: it's better to define a small system for your personal library, than cutting-and-pasting!
[16:42:32] *** Joins: domovod (~domovod@176.196.122.197)
[16:43:28] <gilberth> pjb: Perhaps. But I would need to pull that out in case I overcome my mental road block.
[16:45:15] <pjb> put (asdf:defsystem "gilbert" (:components (:file "gilbert"))) in gilbert.asd and put your utilities in gilbert.lisp starting with (defpackge "GILBERT" (:use "CL") (:export …)) (in-package "GILBERT") …
[16:45:39] <pjb> As you can see, there's almost no overhead.
[16:46:42] <gilberth> The danger is that I would start to define my personal Lisp then ;-)
[16:51:12] <pjb> gilberth: without typoes: https://termbin.com/ab62j
[16:51:40] <pjb> gilberth:  it's not a danger, it's what is done by each lisper, for each application.
[16:52:32] <gilberth> LEFT-PAD? You're kidding.
[16:52:49] <pjb> that's the kind of utilities you want to gather, isn't it?
[16:53:35] <gilberth> Most of the time, yes.
[16:55:14] <pjb> And yes, there's I bug, I implemented right-pad. Left-pad is: https://termbin.com/eq27
[16:55:32] <gilberth> lol
[16:59:13] <gilberth> pjb: (defun left-pad (string length &optional (filler #\space)) (format nil "~v,,,v<~A~>" length filler string))
[17:09:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[17:19:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:22:16] <pjb> gilberth: nice; I don't master ~< ~> yet…
[17:24:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[17:24:47] <gilberth> Is there anyone who masters FORMAT?
[17:25:13] <pjb> Perhaps implementers?
[17:25:53] <gilberth> I doubt that even they do.
[17:33:55] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[17:36:45] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:54:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:55:00] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:56:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:04:58] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[18:07:25] <selwyn> gilberth: as far as i am concerned you are my local format master
[18:09:13] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[18:11:45] <selwyn> damn my mouse is shitty
[18:12:57] <selwyn> we spend a lot of time talking about keyboards but happy to take mouse recommendations
[18:16:10] <ck_> I had that problem a few months ago, bought a "razer basislisk v2", am not unhappy with it
[18:17:24] <ck_> it has rgb gamer crap, but you can get software to switch the lights off, and the hardware remembers that setting
[18:22:15] <ck_> well, take that as a data point, I'm not recommending anything
[18:27:12] <selwyn> i put it on a different surface and it works fine now :s
[19:16:43] *** Joins: treflip (~user@user/treflip)
[19:21:43] *** Joins: notzmv (~zmv@user/notzmv)
[19:31:53] *** Joins: wacki (~wacki@87.123.132.186)
[19:37:07] <shka> selwyn: sorry, as long as mouse works and is comfortable i am fine
[19:37:25] <selwyn> unlike keyboards then :p
[19:42:39] <shka> yeah
[19:42:57] <shka> i want gucci keyboard, i am not concerned with mouse
[19:43:03] <shka> and i even play games sometimes
[19:44:48] <shka> i just finished playing SC2 actually
[19:45:28] <shka> this game is time consuming
[19:54:13] <ck_> did you construct additional pylons
[19:54:56] <shka> no, i spend like 20 minutes because stubborn terran couldn't accept defeat
[19:57:36] <shka> just watching replay
[19:58:15] <shka> starts by building 5 rax, produces horde of marines, and next wastes it all trying to attack into my two tanks
[20:16:41] <shka> then produces another 5 marines that die to my tanks
[20:16:51] <shka> then double ninja expands
[20:17:34] <shka> after i squash those expansions nukes me 
[20:17:42] <shka> multiple times
[20:17:43] <shka> eh
[20:18:51] <shka> so i come and destroy he's natural
[20:19:08] <shka> and then he wastes my time 
[20:19:35] <selwyn> i really tried to get better but i am still bad at age of empires 2
[20:19:42] <selwyn> how do you get better at these types of games?
[20:19:58] <ck_> no other way than grinding imo
[20:20:51] <ck_> looking at the moves people make, and trying to figure out how to counteract them, or prevent them by getting there earlier, or faking a counter you don't have, and so on
[20:22:01] <ck_> it also depends on what you are personally good at. If you are very agile and can input at kilohertz rates, you can probably get around other shortcomings
[20:22:32] <ck_> I personally am absolute shit at scbw, and my training consists of stoically accepting this
[20:22:57] <selwyn> some play runescape with metronomes
[20:23:07] <selwyn> to time the ticks properly
[20:29:14] <humasect> i want a bamboo, wood, or metal, keyboard / inputs
[20:30:06] <selwyn> when i was little i wanted a mechanical typewriter
[20:30:15] <selwyn> idk how comfortable they are though lol
[20:30:24] <shka> not very 
[20:30:41] <shka> you need to hammer the damn thing really hard
[20:31:27] <shka> one of reasons why ibm selectric with all it's complexity was so popular
[20:31:29] <selwyn> i can imagine
[20:31:53] <shka> damn thing is just much more flexible and easier to use 
[20:32:31] <selwyn> no internet on that fucker though
[20:32:48] <selwyn> no latex either..
[20:33:09] <shka> if you need to cut away from internet, you can do that by other means
[20:34:10] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[20:34:52] <shka> oh, also jamming typewriter is a thing that was pretty common 
[20:35:15] <shka> so in summary, slow, heavy, and only one font option
[20:35:34] <selwyn> slow?
[20:35:46] <shka> yeah
[20:35:46] <ck_> key travel in meters
[20:35:54] <ck_> key and actuator mass measured in kilos
[20:36:04] <selwyn> if you are pro and it doesn't jam that much
[20:36:15] <selwyn> https://www.youtube.com/watch?v=5sTHMXqD9kg
[20:36:15] -ixelp- Typing Test - 1911 Underwood 5 - YouTube
[20:36:17] <shka> selwyn: you can't press keys in quick succession because those bars can clash and jam
[20:36:21] <shka> so yeah, it is slow
[20:39:07] <selwyn> i wonder if anyone is still using them
[20:39:09] <shka> and electric typewriters feel like computer keyboards actually 
[20:39:32] <ck_> tom hanks is using them for leisure
[20:40:34] <ck_> shka: well, they are technically the same thing, no
[20:40:54] <Alfr> Good morning.
[20:41:19] <selwyn> good morning
[20:43:28] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[20:44:40] * semz tries to build SBCL-2.2.1, has his build die on an EAGAIN in CCL::%REALPATH
[20:44:46] <semz> I didn't even know realpath could return EAGAIN
[20:45:00] <semz> always the same file too
[20:45:18] <semz> wtf
[20:48:37] <humasect> ccl ? 
[20:48:50] <semz> am building via CCL yeah
[20:50:49] <semz> I have no idea whether this is the fault of SBCL (2.2.0 was fine), CCL (it's minorly patched but nowhere even close to this) or something completely different
[20:51:42] <semz> but what does EAGAIN on a realpath even *mean*
[20:54:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:56:34] <ck_> maxwell's demon doesn't want you accessing that path at that time
[20:58:21] <ck_> or something else maybe I don't know I'm not good with computer
[21:03:19] <semz> EFUCKYOU - Returned with low probability to make sure that you read the manual. No action is performed.
[21:17:16] <gilberth> Hmm, my realpath(2) could not return EAGAIN. At least not according to the documentation.
[21:17:43] <gilberth> realpath(3) rather
[21:21:25] *** Joins: dra (~dra@2a04:4540:640f:b700:ac3b:5529:89a2:b679)
[21:21:29] <dra> Hello!
[21:23:55] <semz> not according to the source either here
[21:24:42] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 250 seconds)
[21:26:37] <clothespin_> inspiration is a weird thing
[21:28:21] <gilberth> semz: Now what, has realpath(3) returned an EAGAIN for you?
[21:28:50] <semz> according to the stacktrace, yes
[21:29:37] <gilberth> errno made it to your stack trace? Have you cleared errno before calling realpath(3)?
[21:29:37] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 240 seconds)
[21:30:24] <semz> the result is null so that errno should be set
[21:32:30] <gilberth> I would be paranoid. My man page says that errno might be set.
[21:33:07] <semz> CCL checks the returned pointer first so that shouldn't be an issue. What worries me is that %get-errno is an assembly routine
[21:33:26] <semz> but even if this was a libc incompatibility it makes no sense it only happens for SBCL-2.2.1, not 2.2.0
[21:35:22] <gilberth> Still, I grew a habit to clear errno before calling library functions, when I intend to look at it after. I was bitten more than once by the result saying "failed" and errno not be set.
[21:44:25] <ck_> sounds just as joyful as looking at GL_ERROR
[22:11:48] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[22:14:57] <shka> hey look, that's kinda cool https://www.foxnews.com/world/chinese-satellite-grappling-pulling-another-orbit
[22:14:57] -ixelp- Chinese satellite observed grappling and pulling another satellite out of its orbit | Fox News
[22:15:19] <shka> pardon hysterical tone 
[22:15:27] <shka> it is foxnews, and china
[22:16:49] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:27:24] *** Joins: sepanko (~sepanko@user/sepanko)
[22:27:24] *** Joins: sp (~sp@user/susam)
[22:27:24] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[22:27:24] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[22:27:24] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[22:27:39] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[22:40:29] <kakuhen> I'm only on here, #commonlisp, and #clojure 
[22:40:52] <kakuhen> i'm doing it because I'm trying to move away from friends from Slack
[22:40:56] <kakuhen> we all have a huge Slack group that's lasted for years and it's been long overdue to leave Slack...
[22:40:57] <kakuhen> I decided to try taking matters into my own hands and it's..... been a bit tough. But most of my issues are with tiny bugs in the Slack bridge and trying to convince ppl "yes, Element is a good Slack replacement."
[22:40:57] <kakuhen> s/from/some/
[22:40:57] <kakuhen> the actual hard part will be setting up e-mail server in case people forget passwords, setting up registration, and so on... I am still yet to get to that... then finding a way to keep a backup server running and synchronizing with a main synapse server... too many things to do x.x
[22:40:57] <kakuhen> hehe
[22:40:57] <kakuhen> i recall a similarly named openal wrapper lib
[22:41:24] <kakuhen> hayley: is the matrix issue resolved?
[22:41:31] <kakuhen> I assume not because this channel is eerily quiet on my end.
[22:41:56] <kakuhen> annoying...
[22:42:01] <kakuhen> yeah, nice song though
[22:42:25] <kakuhen> well, good opportunity to count all of the ppl i know use matrix I guess
[22:42:30] <kakuhen> I know at least you and Gnuxie... I wonder who else...
[22:42:38] <kakuhen> Hmm, can't say I do. Do they go on this channel too?
[22:42:57] <kakuhen> i used to be in a bunch of channels, but I heard synapse can be buggy when federating with super huge rooms, so i've shyed away from some channels
[22:43:37] <semz> mystery solved: sandboxing is the issue
[22:44:08] <gilberth> semz: Sandboxing? How so?
[22:44:44] <semz> now that's the big question
[22:45:36] <semz> I suspect sandboxed stuff that gets denied returns EAGAIN and SBCL uses an absolute path somewhere it shouldn't
[22:45:48] <semz> but it reliably works with the sandbox disabled and breaks with it on
[22:46:41] <gilberth> Oh so absolute pathes are a no-go with sandboxing? Which sandbox is that?
[22:47:26] <gilberth> And how is TRUENAME supposed to work then?
[22:48:20] <semz> I'm not sure if that's the issue, but I think a point of this sandbox is that software doesn't touch files it shouldn't during compilation
[22:48:30] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Client limit exceeded: 20000)
[22:49:01] <semz> https://wiki.gentoo.org/wiki/Project:Sandbox is the one
[22:49:02] -ixelp- Project:Sandbox - Gentoo Wiki
[22:49:40] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[22:50:17] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Client limit exceeded: 20000)
[22:50:17] *** Quits: sp (~sp@user/susam) (Quit: Client limit exceeded: 20000)
[22:51:27] <gilberth> Ah ok. Still odd. If realpath(3) was touching something it shouldn't this raises two questions: (1) what did it touch and (2) why not EPERM? And (3) who builds as root?
[22:52:32] *** Joins: sp (~sp@user/susam)
[22:52:58] <semz> It doesn't build as root by default
[22:53:20] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[22:53:34] <gilberth> The project page says it's for building things as root.
[22:54:01] <semz> also for QA
[22:55:32] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Quit: Client limit exceeded: 20000)
[22:59:17] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Remote host closed the connection)
[23:01:33] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[23:02:18] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Client limit exceeded: 20000)
[23:07:07] <moon-child> gilberth: re EPERM, software should not know it's in a sandbox
[23:07:15] <moon-child> so probably should be ENOTFOUND
[23:07:17] <moon-child> or some such
[23:07:24] *** Joins: sepanko (~sepanko@user/sepanko)
[23:07:25] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[23:08:11] <semz> keep in mind I'm not even sure if this is the issue
[23:09:22] <moon-child> (where by 'should' I mean 'that's what a good sandbox should do', not 'that's what I expect the sandbox does')
[23:09:25] <moon-child> semz: strace?
[23:10:39] <semz> once I manage to emulate the sandboxed environment, maybe :(
[23:11:14] *** Quits: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[23:33:32] <qhong> any good language for writing Lisp?
[23:33:38] <shka> yes
[23:33:39] <shka> lisp
[23:33:45] <qhong> no i mean
[23:34:02] <qhong> English and alphabetic writing system really sucks, either you have long names eating screen space, or you have defuiadjr
[23:34:24] <shka> oh, i don't mind long names
[23:34:45] <shka> i actually like long, descriptive names
[23:34:58] <moon-child> yes, lisp culturally values verbosity
[23:35:04] <qhong> i like descriptive name too, but long names 1. slow to read 2. less code on one screen
[23:35:16] <qhong> what if we have short and descriptive name
[23:35:25] <qhong> i think we just need a good language and writing system
[23:35:31] <aeth> CL strikes a good balance in naming, most of the time (obviously legacy compatibility gives it some really ugly names in places)
[23:35:33] <qhong> english+latin is like worst possible choice
[23:35:43] <aeth> long names make sense most of the time
[23:35:54] <aeth> short names for things that are expected to be "inline" like ELT, AREF, +, -, etc.
[23:36:27] <qhong> aeth: descriptive name makes sense, and it's only the fault of the language makes name long
[23:36:34] <aeth> you can do (setf (aref a 0) (/ x (+ y z))) on one line, which is good. No need to be verbose there
[23:36:43] <aeth> but for most things, you want long names and no need to do it on one line
[23:36:55] <aeth> you just have to think about how it's going to be used when you name it
[23:37:00] <qhong> aref, elt, car, cdr are examples of short and descriptive name, when they're registered as morphemes (in "lisper's extended English")
[23:37:34] <selwyn> they also have pronunciations
[23:37:48] <qhong> maybe set-car! is a even better example
[23:37:50] <semz> just give your symbols chinese unicode names
[23:37:51] * semz ducks
[23:37:57] <qhong> imagine set-pair-cell-first-element
[23:38:08] <phoe> you mean rplaca?
[23:38:41] <qhong> I think setcar is better than rplaca
[23:38:41] <selwyn> (setf (car cell) ...)
[23:39:20] <qhong> semz: Yes chinese is one candidate
[23:39:33] <qhong> It has some disadvantage though, like all natural language
[23:39:59] <selwyn> i read sth that speculated that lisp is attractive to japanese speakers
[23:40:54] <qhong> I do see lots of japanese lisper
[23:41:05] <semz> I think Japan has a comparatively large Lisp community. No idea if that's because of the language though.
[23:42:56] <qhong> my problem with chinese: 1. lexicon is huge 2. logograms are complex 3. most words are bisyllable and breaking up for acronyms change the meaning
[23:49:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:56:34] <gilberth> Hmm, I actually find "string-copy" easier to write than "strcpy".
