[00:01:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:01:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:01:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:01:40] *** Joins: wroathe (~wroathe@user/wroathe)
[00:01:57] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[00:03:33] *** Joins: jeetelongname (~jeet@88-111-159-26.dynamic.dsl.as9105.com)
[00:07:57] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[00:09:52] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:11:15] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[00:12:32] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[00:15:00] *** Joins: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt)
[00:17:44] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[00:21:12] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (Quit: Client limit exceeded: 20000)
[00:22:09] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:4001:9094:16f1:84ab) (Remote host closed the connection)
[00:22:15] *** Joins: machinedgod (~machinedg@24.105.81.50)
[00:23:36] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:23:54] <intersect> 1+1
[00:24:06] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[00:24:13] <intersect> >1+1
[00:24:16] <intersect> > 1+1
[00:24:18] <lambdabot>  2
[00:24:58] <intersect> > f(x) = x
[00:25:00] <lambdabot>  <hint>:1:6: error: parse error on input ‘=’
[00:25:22] <intersect> > f(x) .=. x
[00:25:24] <lambdabot>  error:
[00:25:24] <lambdabot>      • Variable not in scope: (.=.) :: t0 -> Expr -> t
[00:25:24] <lambdabot>      • Perhaps you meant one of these:
[00:26:06] *** Joins: pavonia (~user@user/siracusa)
[00:26:23] <monochrom> No definition. But you can use "let ... in ..."
[00:26:24] <geekosaur> no assignments at the lambdabot prompt
[00:30:32] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 240 seconds)
[00:31:28] <monochrom> Generally maybe you should pick up a bit of basic Haskell before using lambdabot.
[00:32:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[00:33:53] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 268 seconds)
[00:34:22] <dsal> (at least, in a public channel)
[00:35:00] <EvanR> 1+1 is notation from basic math, f x y z is notation from lisp... I'mean... pick a side
[00:35:21] *** Quits: _ht (~quassel@2a02:a468:b619:1:8a98:8031:2935:e3fc) (Remote host closed the connection)
[00:37:58] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:dc4e:59ab:7b42:4b50)
[00:38:22] <dsal> BASIC math.
[00:38:36] *** Joins: briandaed (~root@185.234.208.208.r.toneticgroup.pl)
[00:40:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:40:34] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[00:41:01] *** Quits: jushur (~human@user/jushur) (Quit:  ¯\_(ツ)_/¯)
[00:44:51] *** Joins: jushur (~human@user/jushur)
[00:46:08] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[00:49:06] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[00:51:37] <Henson> I'm trying to interact with some C++ functions from Haskell that just do some referentially-transparent calculations and memory allocation.  Is it okay to put those kinds of things into an unsafePerformIO?
[00:51:44] *** Quits: briandaed (~root@185.234.208.208.r.toneticgroup.pl) (Quit: Lost terminal)
[00:52:15] <geekosaur> memory allocation is explicitly not safe for that
[00:53:22] <EvanR> is the memory temporary, released before the computation is done, or
[00:53:41] <EvanR> (or released in case of error before computation is done, or)
[00:55:29] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[00:58:56] <Henson> the thing I'm trying to do is interact with some OpenCV functions in C++, which will take in a cv::Mat wrapped in a ForeignPtr, do some image processing on it, then allocate a new cv::Mat and return a pointer to that, which will then be wrapped in a ForeignPtr.  Ideally I'd like to try to make these image processing operations not have to be in IO, and some of the OpenCV libraries I've seen for...
[00:59:13] <Henson> Haskell make it so these IO operations are behind an unsafePerformIO so they can be done in pure code.
[01:00:03] <geekosaur> I'm pretty sure if they are allocating memory under an unsafePerformIO they're playing with fire
[01:00:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[01:00:55] <geekosaur> the basic rule of unsafePerformIO is "if it breaks you get to keep the pieces", so if you insist on doing it it's your problem
[01:01:35] <Henson> haha, ok
[01:01:36] <EvanR> unsafePerformIO only makes sense when the IO action is pure, which it doesn't sound like your thing is
[01:01:48] <EvanR> I went through this yesterday with opengl
[01:02:01] <geekosaur> well, it could be pure right up until it allocates a new one, which isn't
[01:02:27] <geekosaur> if the image processing is deterministic and repeatable, at least
[01:03:18] <EvanR> allocating a new object to hold the answer rather than modifying the original is how normal haskell works though
[01:03:58] <EvanR> the question is if anything I care about can observe that allocation in a bad way
[01:04:21] <EvanR> or interfere with it
[01:04:43] <ephemient> the unsafePerformIO allocation might get inlined and duplicated or cse'd and unduplicated, both of which could be problematic
[01:04:43] <Henson> it looks like they use unsafeCoerce to convert it from an IO action to whatever they're returning
[01:05:16] <EvanR> doubling the allocation or undoubling could lead to a change in performance but not necessarily semantics
[01:06:13] <EvanR> of course... there's... THREAD SAFETY
[01:06:38] <EvanR> two threads try to compute on the same thing at the same time
[01:06:45] <Henson> EvanR: it looks like they allocate a new image to hold the answer, then get OpenCV to put the answer in the thing they've allocated.  But the allocation is still being done at the C++ layer
[01:07:19] <EvanR> yes ForeignPtr is for that, holding a ref to a foreign object, potentially calling a finalizer when haskell loses track of it
[01:07:29] <geekosaur> EvanR, I think that can't happen. unsafePerformIO has a mutex, unsafeDupablePerformIo doens't, iirc
[01:08:04] <EvanR> speaking of just the IO action yeah
[01:08:11] *** Quits: jeetelongname (~jeet@88-111-159-26.dynamic.dsl.as9105.com) (Ping timeout: 250 seconds)
[01:08:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:08:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:08:17] *** Joins: wroathe (~wroathe@user/wroathe)
[01:08:20] <davean> I mean theres the blackhole
[01:08:39] <davean> is it locked on compute or update?
[01:08:47] <Henson> EvanR: but is there any difference from performing the allocation in C++ and creating a ForeignPtr from it, then calling C++ with the Ptr (getting OpenCV to put the answer in the image you've previously allocated) compared to C++ taking in your image and allocating an image for the answer, and then you creating a ForeignPtr for the answer post-facto?
[01:09:01] <EvanR> I am reading into what Henson is doing, that they will have some foreign data that two haskel threads accesses after the fact, but maybe I'm off the deep end now
[01:09:29] <EvanR> Henson, wait, you're now allocating space in one action, and later doing a call to fill in the answer?
[01:09:38] <EvanR> or rewriting an already made object? or
[01:09:43] <ephemient> if it was a single unsafePerformIO wrapping the whole "allocate and fill in" then it seems potentially okay-ish to me? but if it's a unsafePerformIO allocate, some pure Haskell code, then unsafePerformIO fill, that is questionable
[01:09:57] <EvanR> yes that's ... not going to turn out good
[01:10:29] <EvanR> Henson, yeah, big diff
[01:10:58] <EvanR> esp if you're trying to do it all without admitting it's IO
[01:11:08] <Henson> EvanR: I would never have OpenCV perform in-place operations on the image I've passed it.  I would always have it put the results in a new image
[01:11:25] <EvanR> but what's this idea of passing it a pointer to empty space
[01:11:26] <dolio> Are you just asking if it matters who does the allocation?
[01:11:51] <Henson> EvanR: but whether that destination image has been pre-allocated in a previous C++ function call and has already been turned into a ForeignPtr, or it's allocated within the image processing call and then gets turned into a ForeignPtr afterwards is the question.
[01:12:00] <Henson> dolio: yes
[01:12:11] <EvanR> it sounds like C++ does the allocation regardless
[01:12:14] <Henson> in both bases C++ does the allocation
[01:12:28] <dolio> I think if you have C++ do the allocation, you might have to write your own finalizer that calls back into C++.
[01:12:36] <Henson> in the pre-allocation case there's a ForeignPtr for the answer before the image processing function is called.
[01:12:36] <dolio> Which sounds more complicated.
[01:12:41] <EvanR> you can make 2 calls, but you better not make two unsafePerformIOs
[01:12:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[01:12:50] <davean> Henson: what about the deallocate linked to the F Ptr?
[01:12:53] <Henson> dolio: yes.  It's not that complicated, it's just a simple cast and a free.  I've got that written already.
[01:12:55] <davean> Henson: you want that called, right?
[01:12:56] <EvanR> assuming you determine unsafePerformIO is even safe
[01:13:06] <davean> so you don't want to create 2 new images
[01:13:13] <davean> and have one of them not exist to the GC
[01:13:37] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[01:13:57] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[01:14:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[01:14:33] <Henson> davean: correct, I don't want to do that.  I simply want to do a referentially-transparent image operation that will not modify the things I'm sending in, but will return something that will involve memory allocation at the C++ level.  I'm wondering how safe/unsafe doing that is with unsafePerformIO so I can use it in pure code instead of in IO.
[01:14:49] *** Quits: OscarH (~OscarH@2a02:c7f:a0da:ae00:ba27:ebff:fe84:d2f4) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[01:15:00] <dolio> That's basically what unsafePerformIO is for.
[01:15:04] *** Joins: OscarH (~OscarH@2a02:c7f:a0da:ae00:ba27:ebff:fe84:d2f4)
[01:15:09] <ephemient> if some things get lost and never end up finalized/freed by the GC, it can still be considered "safe"
[01:15:41] <EvanR> do that in 1 unsafePerformIO, make sure to use a finalizer, and accept that the whole thing may happen more than once if inlining happens...
[01:15:42] <davean> Henson: unsafePerformIO can be done correctly, but its certainly not dupable
[01:15:44] <ephemient> but you probably do want to have a ForeignPtr+finalizer in there for practical purposes
[01:16:16] <Henson> davean: what do you mean by "dupable"?
[01:16:20] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:16:27] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:16:31] <EvanR> two threads execute your computation at the same time
[01:16:42] <Henson> ephemient: yes, anything allocated in C++ that gets returned as a Ptr will be converted to a ForeignPtr with an appropriate finalizer.
[01:17:06] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 250 seconds)
[01:17:20] <EvanR> which might happen with unsafeDupablePerformIO
[01:17:57] <Henson> EvanR: can you explain a bit more about the call happening more than once with inlining?
[01:18:03] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[01:18:04] <EvanR> well you claim it's pure so
[01:18:18] <EvanR> let x = unsafePerformIO stuff = (x, x)
[01:18:26] <EvanR> let x = unsafePerformIO stuff in (x, x)
[01:18:31] <EvanR> that's the same as
[01:18:40] <EvanR> (unsafePerformIO stuff, unsafePerformIO stuff)
[01:18:58] <EvanR> it got inlined
[01:19:10] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[01:19:46] <Henson> EvanR: in that case would Haskell not evaluate one of them because the function and arguments are the same for both of them?
[01:20:03] <EvanR> you mean common subexpression elimination? undoing the inlinine it just did? xD
[01:20:20] <EvanR> usually no
[01:20:20] <geekosaur> there's more thn that. if it's pure then ghc can decide to lift the operation out of e.g. a loop
[01:20:28] *** Joins: travisb_ (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[01:20:43] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:20:46] <EvanR> yeah it could happen multiple times, or fewer times than you thought
[01:20:48] <geekosaur> this caused major problems for bytestring when they thought it wss okay to cheat like that
[01:20:48] <ephemient> pure expressions have no side effects so Haskell is free to evaluate them any number of times, including fewer or more than you wrote
[01:21:35] <davean> EvanR: you can mark it expensive
[01:21:51] <EvanR> mark it expensive?
[01:21:52] <Henson> EvanR: but in let x = unsafePerformIO stuff in (x, x) Haskell will make two identical thunks in the tuple, right?  Whenever either one of them gets evaluated the other will no longer need to be evaluated, right?
[01:21:57] *** Quits: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (Ping timeout: 240 seconds)
[01:22:47] *** Joins: lechner (~lechner@debian/lechner)
[01:22:49] <EvanR> in literally let x = 1000 in (x,x) there's only 1 1000
[01:22:57] <EvanR> in literally (1000,1000) there's 2 1000
[01:23:17] <EvanR> they can be transformed into each other at compile time
[01:23:24] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[01:23:34] <EvanR> it's fine since 1000 is just a value
[01:23:50] <EvanR> not a command to fire missiles
[01:24:00] <Henson> if Haskell were to evaluate (x,x) twice, then the two x values wouldn't be identical anymore, as they'd be two different ForeignPtrs
[01:24:13] <EvanR> yeah, is that ok
[01:24:15] <Henson> where x is the result of the image processing
[01:24:59] <Henson> EvanR: that's fine with me.  It would result it unneccessary image processing work, but the final results would be the same, just essentially copies of each other in memory.
[01:24:59] <EvanR> if not you can attempt to cheat by putting hints to stop inlining
[01:25:29] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:28:35] <Henson> now here's a question of taking the "naughtiness" to another level.  Say I have a list of ForeignPtrs to images, and I want to call a C++ function that operates on a list of images and returns a list of images.  I need to call withForeignPtr recursively to get at the Ptrs within each of the images in a list, then run the image processing operation, then wrap up the returned Ptrs as ForeignPtrs...
[01:28:37] *** Joins: jeetelongname (~jeet@88-111-159-26.dynamic.dsl.as9105.com)
[01:29:14] <Henson> in the documentations, it says withForeignPtr is need to prevent the ForeignPtrs from being deallocated during the call that is inside of them.  If I was that all in an unsafePerformIO, do those guarantees go out of the window?
[01:30:02] <Henson> also, is there a difference between unsafePerformIO and unsafeCoerce in terms of safety?
[01:30:07] *** Quits: FroskyArr (~froskyarr@203.175.13.219) (Remote host closed the connection)
[01:30:15] <Henson> I mean runtime safety, and not type safety
[01:30:24] <geekosaur> unsafeCoerce is unsafe in part because you can make unsafePerformIO from it
[01:30:25] *** Joins: FroskyArr (~froskyarr@203.175.13.219)
[01:31:14] *** Quits: haskellb1 (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 268 seconds)
[01:31:22] <EvanR> unsafeCoerce is very unsafe
[01:31:23] <Henson> would it be better to do my IO a -> a with unsafePerformIO, or with unsafeCoerce to do my image processing in pure code instead of IO?
[01:31:51] <EvanR> omg don't use unsafeCoerce to do IO xD
[01:31:56] <Henson> haha
[01:32:33] <Henson> ok, so just stick with unsafePerformIO and be as careful as I can
[01:32:47] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[01:33:18] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Remote host closed the connection)
[01:33:29] <Henson> EvanR: what should I look for to prevent Haskell from inlining the function?  I know there's the {-# INLINE foo #-} statement, is there a similar one to prevent inlining?
[01:33:35] <EvanR> earlier you mentioned they use it to convert a pointer? There's a not-as-unsafe-as-unsafeCoerce other operation for that called castPtr
[01:33:37] <geekosaur> NOINLINE
[01:34:04] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Quit: Client limit exceeded: 20000)
[01:34:20] *** Quits: travisb_ (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (Remote host closed the connection)
[01:34:22] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[01:34:34] <EvanR> change the type of a Ptr when "you know better than the type system"
[01:34:49] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[01:35:07] *** Joins: travisb_ (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[01:35:34] <Henson> EvanR: here's the OpenCV source code for the library I was looking at as a comparison: https://hackage.haskell.org/package/opencv-0.0.2.1/docs/src/OpenCV-Core-ArrayOps.html#matScalarAdd this is not the OpenCV functions I'm using, but where I got the idea for unsafeCoerce
[01:37:11] <EvanR> the function unsafeCoerceMat might be a limited version of unsafeCoerce
[01:37:33] <EvanR> to do with the matrix dimensions or something
[01:39:03] <EvanR> unsafeCoerceMat :: Mat shapeIn channelsIn depthIn -> Mat shapeOut channelsOut depthOut
[01:39:15] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[01:39:22] <EvanR> a "trust me" for matrices only
[01:40:02] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[01:40:29] <EvanR> there are other safer operations to change shape, I saw at a glance in the docs elsewhere
[01:40:32] *** Quits: jeetelongname (~jeet@88-111-159-26.dynamic.dsl.as9105.com) (Ping timeout: 240 seconds)
[01:42:22] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[01:42:23] <Henson> EvanR: https://hackage.haskell.org/package/opencv-0.0.2.1/docs/src/OpenCV-Internal-Core-Types-Mat.html#unsafeCoerceMat is just unsafeCoerce.  But there are functions in that module that talk about safer versions of unsafeCoerceMat.
[01:42:46] <Henson> EvanR: and unsafeCoerce is from the Unsafe.Coerce module.
[01:42:58] <EvanR> unsafeCoerceMat with a type signature way more limited than unsafeCoerce simply implemented as unsafeCoerce is way better
[01:44:51] <Henson> EvanR: but the question I have is: they use unsafeCoerceMat = unsafeCoerce to do IO operations in pure code.  Should I emulate what they're doing and use unsafeCoerce (or some more type-safe variant), or should I use unsafePerformIO?
[01:45:02] <EvanR> note they are probably only using it when the object they are coercing actually has the type they coerce to, in spirit
[01:45:42] * EvanR does a double take
[01:46:16] <monochrom> No, unsafeCoerceMat = unsafeCoerce does not do IO operations in pure code.
[01:46:19] *** Joins: haskellb1 (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[01:46:21] <ski> (how're they using `unsafeCoerce' to do `unsafePerformIO' ?)
[01:46:24] *** Quits: michalz (~michalz@185.246.204.37) (Remote host closed the connection)
[01:46:48] <monochrom> There is an explicit "unsafePerformIO" somewhere else in matScalarAdd.
[01:47:07] <haskellb1> is Comonad widely used in Haskell programming? I find it extremely abstract
[01:47:18] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[01:47:32] <EvanR> I used it on the sea cucumber advent of code last month
[01:47:44] <haskellb1> spending time on defining it's class methods seems not at all related to the problem logic itself
[01:48:05] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:48:08] <EvanR> that's why it's support code, just like monad >>=
[01:48:36] <EvanR> or map, filter, fold for list, it's supporting code, not for any particular problem
[01:48:37] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[01:49:35] <Rembane> The Comonad is an abstraction that makes some problems easy to solve.
[01:50:06] <monochrom> I haven't used comonad, but everything you said could be said of monad too.
[01:50:25] <haskellb1> Can commoners come up with abstractions like this?
[01:50:36] <monochrom> I could make the case that for parsing, >>= "does not relate to the parsing logic".
[01:50:38] <geekosaur> not even most haskellers can
[01:50:54] <haskellb1> I guess it takes years of practice to see things like that
[01:50:58] <geekosaur> but once it's been come up with, almost anyone can learn to use it
[01:51:07] <monochrom> Ah but "parsing logic" itself is inexpressible until you can take >>= for granted.
[01:51:22] <EvanR> I found monad >>= and comonad <<= to be equally hard to write
[01:51:33] <EvanR> luckily you don't have to do it too often
[01:51:53] <Henson> monochrom: you're right, they're using unsafePerformIO instead of unsafeCoerce
[01:51:55] <monochrom> So, yes and no. The parser monad's >>= does not express parsing logic, but parsing logic needs >>= to be writable in the first place.
[01:52:18] <Henson> ski: thanks for doing that out, I was wrong about how they were using unsafeCoerce
[01:52:46] <monochrom> Well, or at least <*>
[01:53:29] <Henson> ski: doing that out -> pointing that out
[01:53:30] <haskellb1> Can I understand that Monad represents something that can be collapsed while comonad is the other way around?
[01:53:45] <ski> `(>>=)' and `(<*>)' are "plumbing", yea
[01:53:58] <EvanR> comonads can replicate (duplicate)
[01:54:16] <ski> haskellb1 : in a vague (or perhaps abstract) sense, yea
[01:54:27] <monochrom> Yeah, "whatever that means".
[01:54:34] <ski> (the devil's in the details of what you mean by those words)
[01:54:49] <haskellb1> I'm trying to figure out "when" people are going to use these concepts to model their problems
[01:54:54] <monochrom> The beauty of those oh-so-intuitive wording is they make you comfortable without any predictive power.
[01:54:56] <EvanR> If a monad is a burrito, then a comonad is like a night club
[01:55:27] <geekosaur> oboy…
[01:55:37] *** Quits: xff0x (~xff0x@2001:1a81:53ec:e00:6733:4fa5:6e13:2687) (Ping timeout: 240 seconds)
[01:55:46] <EvanR> sorry
[01:55:54] <haskellb1> Conventional data structures such as Heap and stack or trees are easier to see
[01:56:00] <monochrom> Space Telescope (ST) that wraps and unwraps like a burrito >:)
[01:56:28] <EvanR> I still don't really understand a Heap
[01:56:31] <ski> stuff like monads are usually better to think of as "control structures"
[01:56:35] <geekosaur> http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html
[01:56:37] <haskellb1> of course not always obvious(such as particle collisions can be modeled by priority heaps)
[01:56:43] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[01:56:48] *** Joins: xff0x (~xff0x@2001:1a81:53ec:e00:f919:e263:9a7f:5670)
[01:56:55] <EvanR> ah a heap is like a priority queue?
[01:57:09] <ski> it's one implementation of PQs, yea
[01:57:36] <geekosaur> http://blog.sigfpe.com/2006/06/monads-kleisli-arrows-comonads-and.html
[01:57:40] <haskellb1> anyway i feel like Haskell is abstract in a different way
[01:58:02] <monochrom> Yeah control structures.
[01:58:03] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[01:58:20] <EvanR> stacks, trees, etc are concrete data structures
[01:58:32] <justsomeguy> Refresh my memory: Do regular function definitions have a precedence of 7 or 9 by default?
[01:58:38] <monochrom> Bet few programmers have thought of "a zoo of control structures" and so don't get monads just because of that.
[01:58:38] <EvanR> where as Functors and Monads are abstract interfaces waiting to be implemented
[01:58:46] <ski> justsomeguy : 10, if you mean function application
[01:59:17] <haskellb1> stack and trees are still abstract because they can be applied to many different situations. But they are so common it takes less effort on the mind
[01:59:20] <monochrom> And it doesn't help that Haskell is like even "data Foo a = ..." is often used to express control...
[01:59:43] <EvanR> that's a different sense of abstract but ok
[01:59:55] <monochrom> Plus, "what is control?" is equivalent to "what is effect?" :)
[01:59:59] <EvanR> they certainly can be used for multiple things
[02:00:11] <justsomeguy> ski: I thought that precedence only goes from 0..9? Or maybe that's only the range for fixity declarations, rather than fixity in general.
[02:00:31] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (Quit: Client limit exceeded: 20000)
[02:00:34] <geekosaur> the default fixity of a function is infixl 9
[02:00:48] <EvanR> in each case we're still talking about the same concrete structure. Unlike "how to solve something with a random unknown monad", that's a whole nother story, and not even necessarily what is always done
[02:00:54] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[02:00:56] <geekosaur> function application behaves as if it has fixity 10, record updates behave as if they had fixity 11
[02:01:23] * ski . o O ( "Escaping Hell with Monads" by Philip Nilsson in 2017-05-08 at <https://philipnilsson.github.io/Badness10k/escaping-hell-with-monads/> ; "Flattening Callback Chains with Monad Do-Notation" by Remko Tronçon in 2015-07-02 at <https://el-tramo.be/blog/async-monad/> )
[02:01:24] <justsomeguy> Thank you, that clears things up. I wish the language report made that a little more obvious.
[02:02:03] <ski> justsomeguy : fixity of function application (juxtaposition syntactic operator) is `10'
[02:02:19] <monochrom> Function application and record syntax cannot be formally given predence levels because there is no binary operator to attach the predence levels to.
[02:02:26] <ski> er, s/fixity/precedence/
[02:02:35] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[02:02:44] <ski> ordinary (definable) operators have precedences from zero to nine, sure
[02:02:57] <monochrom> And the Haskell Report is supposed to give formal definitions not intuitive conceptual moral fast-and-loose bedtime stories.
[02:03:27] <Henson> check out https://www.haskell.org/onlinereport/decls.html section 4.4.2 for fixity declarations
[02:03:28] <monochrom> So yeah it has to hide the intuitive interpretation in a formal grammar.
[02:03:57] <Henson> "The integer in a fixity declaration must be in the range 0 to 9"
[02:04:25] <EvanR> nothing wrong with turning it up to 11 every once in a while though
[02:04:34] <monochrom> You can maybe go Dijkstra's way and demand function application to be an explicit binary operator.  He uses ".", for example "sin.0"
[02:04:39] <monochrom> haha
[02:05:05] <monochrom> He was also happy with curry, "f.x.y".
[02:05:14] <monochrom> err, currying!
[02:05:21] <ski> % data Prec = P; instance Show Prec where showsPrec p P = showChar '<' . shows p . showChar '>'
[02:05:22] <yahb> ski: 
[02:05:25] <ski> % P :+ P
[02:05:26] <yahb> ski: <7> :+ <7>
[02:05:28] <ski> % (P,P)
[02:05:29] <yahb> ski: (<0>,<0>)
[02:05:31] <ski> % Just P
[02:05:31] <yahb> ski: Just <11>
[02:05:42] <EvanR> what did you just do
[02:06:16] <ski> (eleven, because function application is `infixl', so you add one to the precedence, when going to the right operand (the function argument expression))
[02:06:17] <EvanR> print out the number passed around with showsPrec
[02:06:35] <monochrom> Sneaky.
[02:06:49] <Henson> "Any operator lacking a fixity declaration is assumed to be infixl 9".  This means that since function application isn't defined in the list it has the strongest fixity of 9, right?
[02:07:13] <Henson> I mean, I guess your function name IS the operator, and it's infixl with a fixity of 9
[02:07:18] <monochrom> No. Function application is not an operator.
[02:07:23] <monochrom> As said.
[02:07:44] <ski> Henson : that only applies to ordinary operators
[02:07:45] <EvanR> % Just P
[02:07:45] <yahb> EvanR: Just <11>
[02:07:59] <EvanR> oops
[02:08:01] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Remote host closed the connection)
[02:08:12] <ski> it does not apply to `@' in patterns, e.g. (another "syntatic operator" (my term))
[02:08:54] <Henson> ski: can you elaborate?
[02:08:59] <monochrom> An "operator" is at least a lexeme as per Chapter 2.  In "f e", there is no lexeme between "f" and "e".
[02:09:47] <EvanR> until we get overloaded whitespace
[02:10:22] <ski> (`~',`!' in patterns are examples of prefix (syntactic) operators. and then there's record construction (and update), which has higher precedence (binds tighter) than function application. `foo Node {rootLabel = r,subForest = ts}' is parsed as `foo (Node {rootLabel = r,subForest = ts})')
[02:11:00] <monochrom> > length"xxxx"  -- my favourite example
[02:11:02] <lambdabot>  4
[02:11:17] <monochrom> > const"abc"123  -- have one more
[02:11:19] <lambdabot>  "abc"
[02:11:32] <monochrom> No operator.
[02:11:32] <EvanR> I retract my joke
[02:11:51] <EvanR> not enough space between the lexemes for this joke
[02:12:10] <ski> Henson : "operator" as in the report is as you say. however, i was talking about some syntactic constructions which turn up as binary nodes in the AST, and which behave as "syntactic operators". other examples are `::' and `<-'
[02:12:12] <monochrom> "space is function application" is one of those white lies like Santa Claus we tell to kids.
[02:12:30] <ski> yes, better to say "juxtaposition"
[02:12:48] <monochrom> When you grow up, there is no longer any tooth fairy.
[02:12:56] <EvanR> f  x  y
[02:12:58] <EvanR> f x y
[02:12:59] <EvanR> fxy
[02:13:09] <geekosaur> consecutive tokens
[02:13:23] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5) (Remote host closed the connection)
[02:13:39] <ski> (obviously, Santa Claus and the Tooth Fairy exists. just like cities, countries, bands, organizations exist ..)
[02:13:45] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5)
[02:14:13] <monochrom> Oh haha I like that.
[02:14:24] <monochrom> Haskell is a social construct. :)
[02:14:39] <EvanR> "they didn't tell you? Santa clause died. 4 years ago" -- home improvement
[02:15:41] <monochrom> Horn Claus takes polynomial time, Santa Claus is NP-hard >:)
[02:15:59] <EvanR> minus e
[02:16:22] <monochrom> Your typo was inspiring. Please don't fix it! :)
[02:16:45] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[02:17:51] <dolio> Just say it was an acknowledgement that Tim Allen was in The Santa Clause.
[02:18:02] <EvanR> lol
[02:18:13] <monochrom> Hee hee good catch.
[02:18:28] <EvanR> where he actually died... that must be where that movie came from
[02:18:33] <EvanR> unfortunately
[02:19:11] <monochrom> > 1
[02:19:13] <lambdabot>  1
[02:20:24] <EvanR> > "monochrom" > "1"
[02:20:25] <lambdabot>  True
[02:20:43] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:21:21] <EvanR> > monochrom > 1
[02:21:22] <lambdabot>  False
[02:23:35] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[02:25:03] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[02:26:06] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[02:26:51] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[02:27:24] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[02:27:46] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[02:29:04] *** Joins: wroathe (~wroathe@user/wroathe)
[02:29:20] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:30:51] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[02:32:30] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 250 seconds)
[02:33:43] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[02:35:46] <EvanR> speaking of lexical issues
[02:36:47] <EvanR> > Just (-1)
[02:36:48] <lambdabot>  Just (-1)
[02:36:49] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:36:51] <EvanR> > Just -1
[02:36:52] <lambdabot>  error:
[02:36:52] <lambdabot>      • No instance for (Typeable a0)
[02:36:52] <lambdabot>          arising from a use of ‘show_M56646709495744885058’
[02:36:58] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[02:37:12] <geekosaur> % :set -XNegativeLiterals
[02:37:12] <yahb> geekosaur: 
[02:37:15] <EvanR> with NegativeLiterals that seems to be accepted... but seems weird because I don't know how it's parsing anymore
[02:37:17] <geekosaur> % Just -1
[02:37:17] <yahb> geekosaur: Just (-1)
[02:37:27] <EvanR> % Just-1
[02:37:27] <yahb> EvanR: ; <interactive>:77:5: error:; * No instance for (Num (a0 -> Maybe a0)) arising from a use of `-'; (maybe you haven't applied a function to enough arguments?); * In the expression: Just - 1; In an equation for `it': it = Just - 1
[02:37:31] <geekosaur> the extension says how it's parsed iirc
[02:37:53] <EvanR> for me, Just-1 parses in ghci for me
[02:39:06] <EvanR> that error is what I get without the extension
[02:39:55] <geekosaur> % :set -XLexicalNegation
[02:39:55] <yahb> geekosaur: 
[02:39:55] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[02:40:01] <geekosaur> % Just-1
[02:40:01] <yahb> geekosaur: ; <interactive>:79:5: error:; * No instance for (Num (a0 -> Maybe a0)) arising from a use of `-'; (maybe you haven't applied a function to enough arguments?); * In the expression: Just - 1; In an equation for `it': it = Just - 1
[02:40:22] <geekosaur> % :set -NoNegativeLiterals
[02:40:22] <yahb> geekosaur: Some flags have not been recognized: -NoNegativeLiterals
[02:40:32] <geekosaur> % :set -XNoNegativeLiterals
[02:40:33] <yahb> geekosaur: 
[02:40:36] <geekosaur> % Just-1
[02:40:36] <yahb> geekosaur: ; <interactive>:82:5: error:; * No instance for (Num (a0 -> Maybe a0)) arising from a use of `-'; (maybe you haven't applied a function to enough arguments?); * In the expression: Just - 1; In an equation for `it': it = Just - 1
[02:40:41] <geekosaur> hm
[02:40:47] <geekosaur> what version you running?
[02:41:04] <geekosaur> 9.x changed behavior wrt spaces betweek tokens
[02:41:09] <geekosaur> *between
[02:41:25] *** Joins: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[02:42:03] <EvanR> 8.10.7
[02:42:20] <EvanR> I see NegativeLiterals didn't get unanimous votes on GHC2021
[02:42:35] <geekosaur> @let {-# LANGUAGE NegativeLiterals #-}
[02:42:36] <lambdabot>  Defined.
[02:42:44] <geekosaur> > Just-1
[02:42:45] <lambdabot>  error:
[02:42:45] <lambdabot>      • No instance for (Typeable a0)
[02:42:45] <lambdabot>          arising from a use of ‘show_M63043554762056576148’
[02:42:57] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5) (Ping timeout: 240 seconds)
[02:43:49] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:44:02] <geekosaur> @let {-# LANGUAGE LexicalNegation #-}
[02:44:03] <lambdabot>  Defined.
[02:44:06] <geekosaur> > Just-1
[02:44:07] <lambdabot>  error:
[02:44:07] <lambdabot>      • No instance for (Typeable a0)
[02:44:07] <lambdabot>          arising from a use of ‘show_M45130066487191305358’
[02:44:12] <geekosaur> weird
[02:44:22] <geekosaur> @undef
[02:44:22] <lambdabot> Undefined.
[02:44:41] <EvanR> it's quite bizarre that this is accepted https://paste.tomsmeding.com/Ppvt93c8 xD
[02:44:55] <EvanR> for 
[02:44:57] <EvanR> for me
[02:46:04] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:46:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:48:12] <dsal> Is there an opinion on `forkIO`?  I see it in this codebase I'm working on, though not a lot.  It's a bit of a smell to me, but it's not one I recognize very well.
[02:48:48] <monochrom> I don't know of any opinion against forkIO.
[02:49:05] * carbolymer likes `async` more
[02:49:09] <EvanR> forkIO is great
[02:49:15] <EvanR> also async
[02:49:25] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[02:49:30] <Axman6> yeah I would probably be looking more at using async so that exceptions are handled more fully
[02:49:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[02:50:12] <Axman6> but if it's a throwaway thread that it returning or handling exceptions isn't too important, then just forIO and forget
[02:50:17] <Axman6> forkIO*
[02:50:45] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[02:50:48] <carbolymer> you might want to setUncaughtExceptionHandler tho
[02:51:43] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[02:52:06] <monochrom> So, there can be a very good opinion on forkIO in a context so large that the whole context is reinventing a substantial portion of async, sure.
[02:52:21] <monochrom> That is still different from an opinion on forkIO period.
[02:52:53] <EvanR> it's great, period xD
[02:53:46] <dsal> I don't see any async, but I see forkIO.  I see some signs of async being used indirectly.
[02:54:10] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[02:54:29] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[02:54:33] *** Quits: ultsllt (~ultsllt@50.231.5.242) (Remote host closed the connection)
[02:54:41] *** Quits: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[02:54:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:54:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:54:44] *** Joins: wroathe (~wroathe@user/wroathe)
[02:54:48] <EvanR> as a library writer it's hard to argue that "this code will always run in a program where there is 1 thread"
[02:55:08] <EvanR> or an application writer who doesn't know everything about the application yet
[02:55:19] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[02:55:35] <EvanR> luckily a lot of stuff still works when there are forkIO threads
[02:56:42] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:56:44] <EvanR> it kind of feels like a default aspect of the haskell environment, like purity and laziness
[02:57:08] <EvanR> which is why opengl can't be pure
[02:57:11] <geekosaur> it kinda derives from those, doesn't it?
[02:57:21] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[02:57:25] <geekosaur> in particular purity means independence from other threads
[02:57:45] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[02:58:43] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[02:59:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[03:00:11] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[03:00:55] *** Quits: Ocelot (~ocelot@50-78-208-189-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[03:01:14] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[03:02:07] *** Quits: haskellb1 (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Remote host closed the connection)
[03:02:09] *** Joins: Ocelot (~ocelot@50-78-208-189-static.hfc.comcastbusiness.net)
[03:02:11] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[03:02:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[03:02:56] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[03:03:22] *** Quits: acidsys (~LSD@2.lsd.systems) (Quit: I love you.)
[03:03:22] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[03:03:37] *** Joins: acidsys (~LSD@2.lsd.systems)
[03:04:58] *** Quits: cosimone (~user@93-44-185-255.ip98.fastwebnet.it) (Ping timeout: 268 seconds)
[03:05:31] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[03:05:49] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[03:06:17] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[03:07:03] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[03:08:30] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5)
[03:14:03] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[03:14:37] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5) (Ping timeout: 240 seconds)
[03:14:53] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[03:20:02] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[03:23:28] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 268 seconds)
[03:23:42] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[03:25:19] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Quit: WeeChat 3.4)
[03:25:49] *** Joins: marquis_andras (~marquis_a@124.170.163.166)
[03:25:59] *** Joins: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922)
[03:26:01] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Remote host closed the connection)
[03:26:09] *** Joins: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922)
[03:26:13] *** Quits: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922) (Remote host closed the connection)
[03:26:28] *** Joins: ix (~ix@2a02:8010:674f:0:cda6:d05:f0d7:4922)
[03:27:41] *** Quits: marquis_andras (~marquis_a@124.170.163.166) (Client Quit)
[03:28:22] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[03:28:23] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[03:29:32] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[03:30:40] *** Joins: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net)
[03:31:45] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (Quit: Client limit exceeded: 20000)
[03:33:13] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[03:34:42] *** Quits: nomeata (~nomeata@2001:470:69fc:105::1:5ed4) (Quit: Client limit exceeded: 20000)
[03:35:56] *** Joins: jkaye (~jkaye@2601:281:8300:7530:cf1a:5f6d:9faa:a84e)
[03:36:00] *** Joins: marquis_andras (~marquis_a@124.170.163.166)
[03:37:08] *** Quits: marquis_andras (~marquis_a@124.170.163.166) (Client Quit)
[03:37:24] *** Joins: marquis_andras (~marquis_a@124.170.163.166)
[03:38:06] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[03:39:55] *** Joins: lbseale_ (~ep1ctetus@user/ep1ctetus)
[03:39:55] *** Quits: lbseale_ (~ep1ctetus@user/ep1ctetus) (Client Quit)
[03:41:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[03:43:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:43:59] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 256 seconds)
[03:46:54] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[03:50:29] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5)
[03:52:51] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[03:53:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[03:57:28] *** Quits: max22- (~maxime@2a01cb0883359800ca42cd4ecfb21dbb.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[04:01:33] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[04:02:19] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[04:04:02] *** Quits: vglfr (~vglfr@88.155.70.5) (Ping timeout: 240 seconds)
[04:10:35] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:dc4e:59ab:7b42:4b50) (Remote host closed the connection)
[04:19:13] *** Joins: jeetelongname (~jeet@88-111-159-26.dynamic.dsl.as9105.com)
[04:23:01] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:26:14] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-65df-a0f5-02cd-1378.res6.spectrum.com) (Remote host closed the connection)
[04:26:29] <Axman6> I'm struggling a bit, what would be the church encoded equivalent of data Fold a b = forall x. Fold (x -> a -> Either x (Fold a b)) x (x -> b)?
[04:26:47] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[04:27:00] <Axman6> I have  newtype Fold' a b = forall x. Fold' (x -> a -> (x -> r) -> (Fold' a b -> r) -> ((x -> b) -> r) -> r)  but I can't tell if that's correct
[04:27:02] *** Joins: nomeata (~nomeata@2001:470:69fc:105::1:5ed4)
[04:27:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[04:28:05] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:28:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:28:06] *** Joins: wroathe (~wroathe@user/wroathe)
[04:28:34] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[04:28:42] *** Joins: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[04:28:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:32:11] <EvanR> are you basically just trying to eliminate an explicit Either 
[04:32:15] <ski>   forall o. (forall x. (x -> a -> Either x o) -> x -> (x -> b) -> o) -> o  -- ?
[04:32:25] <Axman6> yeah
[04:33:03] <EvanR> where as ski eliminated the constructor itself instead
[04:33:06] <ski> i guess replace `Either x (Fold a b)' with `forall o. (x -> o) -> (Fold a b -> o) -> o' ?
[04:34:15] <ski> (perhaps further replacing `Fold a b -> o' with an equivalent data type)
[04:36:02] <ski> (in any case, i can't really follow your `newtype' suggestion)
[04:37:50] *** Quits: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net) (Remote host closed the connection)
[04:37:51] <ski> (`forall r. x -> a -> (x -> r) -> (Fold a b -> r) -> ((x -> b) -> r) -> r' would be equivalent to `x -> a -> Either3 x (Fold a b) (x -> b))', fwiw)
[04:38:02] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[04:40:39] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[04:41:21] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[04:41:44] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:42:31] *** Joins: frosky_ (~froskyarr@203.175.13.219)
[04:42:33] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[04:42:40] *** Quits: frosky_ (~froskyarr@203.175.13.219) (Client Quit)
[04:43:02] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[04:43:16] <Axman6> I can't actually figure out how to use this thing...
[04:43:32] *** Quits: FroskyArr (~froskyarr@203.175.13.219) (Ping timeout: 240 seconds)
[04:44:03] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[04:44:12] *** Joins: FroskyArr (~froskyarr@203.175.13.219)
[04:44:13] <ski> which ?
[04:44:23] <Axman6> given drop :: Int -> Fold a b -> Fold a b, with the data type version, I can just write drop n (Fold step0 x0 done0) = Fold step n done where ... but I have no idea how to "store" the n in the church encoded version
[04:44:29] <ski> hmm
[04:44:36] * ski actually reads the type
[04:46:02] <ski> looks like `x' is the internal state, `x -> b' is applied when you don't want to supply any more items (end-of-input), while `x -> a -> Either x (Fold a b)' is applied when you do supply another item (`a') .. and then you either get a new state `x' .. or a new `Fold a b' (which can change the state type to some other type)
[04:46:15] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[04:46:54] <ski> (not quite sure where exactly the "change state type (and next-item & end-if-input)" ability is wanted)
[04:47:10] *** Joins: cheater (~Username@user/cheater)
[04:47:27] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[04:47:33] *** Quits: FroskyArr (~froskyarr@203.175.13.219) (Client Quit)
[04:47:49] *** Joins: FroskyArr (~froskyarr@203.175.13.219)
[04:47:51] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:08] <Axman6> yep that sounds about right - I was looking at how to avoid the state in foldl not being able to "shrink", like in the drop example, once n reaches zero, I don't care about it, but in the current foldl implementation it sticks around for the life of the fold
[04:49:10] *** travisb_ is now known as travisb
[04:49:33] <ski>   drop n xs fold = xs (\step0 x0 done0 -> let ... in fold step n done)  -- ?
[04:49:43] *** travisb is now known as abemann
[04:49:50] *** abemann is now known as tabemann
[04:50:13] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[04:51:46] *** Joins: nunggu (~q@user/nunggu)
[04:52:17] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[04:55:43] <ski> s/step n/step x/
[04:56:22] <ski>   drop n xs fold = xs (\step0 s0 done0 -> let step (s,n) x = if n <= 0 then (step0 s x,n) else (s,n-1); s = (s0,n); done (s,_) = done0 s in fold step s done)  -- i guess
[04:58:23] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[04:58:58] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[04:59:46] <ski>   drop n xs fold = xs (\step0 s0 done0 -> let step (s,Nothing) x = (step0 s x,Nothing); step (s,Just n) x = (s,if n <= 1 then Nothing else Just (n-1)); s | n <= 0 = (s0,Nothing) | otherwise = (s0,Just n); done (s,_) = done0 s in fold step s done)  -- or, i suppose
[04:59:57] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[05:00:44] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[05:01:24] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[05:02:45] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[05:03:34] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[05:05:29] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[05:06:32] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Remote host closed the connection)
[05:06:49] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[05:10:46] *** Quits: jeetelongname (~jeet@88-111-159-26.dynamic.dsl.as9105.com) (Ping timeout: 268 seconds)
[05:11:49] *** Joins: lionhairdino (~jacoo@121.131.39.82)
[05:14:12] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[05:15:09] *** Joins: vysn (~vysn@user/vysn)
[05:15:50] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[05:18:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[05:21:27] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[05:23:47] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[05:27:57] *** Quits: jkaye (~jkaye@2601:281:8300:7530:cf1a:5f6d:9faa:a84e) (Ping timeout: 240 seconds)
[05:28:08] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5) (Quit: Leaving)
[05:28:37] *** Quits: yauhsien_ (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[05:33:08] *** Joins: notzmv (~zmv@user/notzmv)
[05:33:48] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[05:34:09] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:41:00] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 250 seconds)
[05:42:07] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:42:30] *** Joins: intersec1 (~ivoolivei@a109-50-190-38.cpe.netcabo.pt)
[05:45:20] *** Quits: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt) (Ping timeout: 250 seconds)
[05:45:38] *** Joins: deadmarshal (~deadmarsh@95.38.119.169)
[05:47:42] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[05:47:56] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[05:48:48] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 250 seconds)
[05:49:47] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[05:50:06] *** Quits: deadmarshal (~deadmarsh@95.38.119.169) (Ping timeout: 250 seconds)
[05:50:14] *** Quits: xff0x (~xff0x@2001:1a81:53ec:e00:f919:e263:9a7f:5670) (Ping timeout: 268 seconds)
[05:50:39] *** Joins: joo-_ (~joo-_@87-49-45-141-mobile.dk.customer.tdc.net)
[05:50:39] *** Quits: joo-_ (~joo-_@87-49-45-141-mobile.dk.customer.tdc.net) (Changing host)
[05:50:39] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[05:51:59] *** Joins: xff0x (~xff0x@2001:1a81:523c:5300:707e:bf72:dc84:30f7)
[05:58:20] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[05:58:33] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[05:59:54] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:00:14] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[06:02:17] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[06:03:54] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[06:03:59] <SrPx> is there any short way to get the first command line argument as an Int, without imports? `main = do { n <- getArg 0 :: IO Int; ... } ` ?
[06:04:45] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[06:05:11] <int-e> You need to import System.Environment, which has getArgs :: IO [String]
[06:06:53] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 268 seconds)
[06:06:54] <SrPx> so I need two lines at best, right?
[06:07:24] <SrPx> except if I could fmap to get the first element of the list and read as int, but I guess that would be hideous
[06:09:10] <int-e> n <- read . head <$> getArgs   may be fine for throwaway code
[06:09:43] <ski> (or `n <- readIO . head =<< getArgs')
[06:10:00] <SrPx> `fmap (read.head) getArgs :: IO Int`
[06:10:09] <SrPx> oh I like your version
[06:10:37] *** Quits: bjobjo (~bjobjo@user/bjobjo) (Ping timeout: 240 seconds)
[06:12:19] <geekosaur> and you can avoid imports if you enable -fimplicit-import-qualified and then use System.Environment.getArgs
[06:12:37] <geekosaur> that's kinda dodgy though (it's really intended for ghci)
[06:12:39] *** Joins: bjobjo (~bjobjo@user/bjobjo)
[06:13:22] <jackdk> :t (readMaybe <=< listToMaybe) <$> getArgs
[06:13:22] <lambdabot> error:
[06:13:23] <lambdabot>     Variable not in scope: readMaybe :: b0 -> Maybe c
[06:13:23] <lambdabot> error: Variable not in scope: getArgs :: f [b0]
[06:13:35] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[06:13:41] <jackdk> % :m + System.Environment Text.Read
[06:13:41] <yahb> jackdk: 
[06:13:54] <jackdk> % :t (readMaybe <=< listToMaybe) <$> getArgs
[06:13:54] <yahb> jackdk: Read c => IO (Maybe c)
[06:14:14] <jackdk> SrPx: ^^
[06:14:15] <jackdk> % :m - System.Environment Text.Read
[06:14:15] <yahb> jackdk: 
[06:14:37] <int-e> yuck
[06:14:56] <int-e> getArgs >>= \case   or something to that effect will be much more readable
[06:16:14] *** Joins: andreabedini (~andreabed@8s8kj6nfnfll37n1mb0g.ip6.superloop.com)
[06:16:47] <int-e> (and that'll work reasonably well as long as you only have positional arguments and no switches)
[06:16:58] <jackdk> you could use a headMaybe from some package but I wanted to confine myself to base
[06:19:07] *** Quits: intersec1 (~ivoolivei@a109-50-190-38.cpe.netcabo.pt) (Read error: Connection reset by peer)
[06:21:06] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:21:10] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[06:23:48] *** Joins: califax- (~califax@user/califx)
[06:24:00] *** Joins: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt)
[06:27:43] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Remote host closed the connection)
[06:27:59] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[06:28:06] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[06:28:06] *** califax- is now known as califax
[06:28:58] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5)
[06:29:06] *** Quits: foul_owl (~kerry@174-21-143-101.tukw.qwest.net) (Ping timeout: 250 seconds)
[06:29:45] <segfaultfizzbuzz> very much a haskell noob here. i am interested to try to make some "real world use" of haskell's core language features, so i thought i would try to experiment with streams (and presumably benefit from laziness here?)
[06:30:05] <segfaultfizzbuzz> so i got a basic conduit http stream to print and am now trying to parse the xml it contains
[06:31:07] <Axman6> streams are not really about laziness at all, they generally make no use of it
[06:31:25] <segfaultfizzbuzz> oh really? but laziness is all about codata and infinite data structures...? 
[06:33:59] <sm> laziness can be used for "streaming".. you get some similar benefits, but it's too uncontrolled and can bite you. Streaming libraries do it more robustly.
[06:34:28] <segfaultfizzbuzz> so streaming libraries follow strict eval?
[06:34:37] *** Quits: davros (~davros@host86-184-82-149.range86-184.btcentralplus.com) (Ping timeout: 240 seconds)
[06:34:50] <Axman6> streams are an alternative to lazy-IO (among other things). in the past we might have just used readFile :: FileName -> IO Lazy.ByteString, which would read chunks as they're demanded, but this is difficult to control the behaviour of. streams make this explicit, each chunk from the file is passed explicitly, there's no lazy IO magic to produce each chunk
[06:35:39] <Axman6> streams allow consumers to say "I need some more input now" and have the upstream code do the work to produce that input, like read the next chunk from a file handle
[06:35:45] *** Quits: nunggu (~q@user/nunggu) (Remote host closed the connection)
[06:35:55] <segfaultfizzbuzz> wow ok then i think i should probably split this inquiry in two (1) i still am interested to try to parse an http stream into xml using haskell and (2) i'm curious what a good "real" trial run of laziness might be
[06:36:08] *** Joins: nunggu (~q@user/nunggu)
[06:36:25] <Axman6> with lazy IO, consumers believe they are working with a completely pure lazy bytestring, but in reality, when they try to evaluate the next chunk, there's some unsafeInlinePerformIO shenanigans going on to magically read from the file
[06:36:38] <segfaultfizzbuzz> if i short circuit (1) i'm trying to make this line work:   runConduit $ responseBody response $ cursor $/ element "body" .| printC
[06:36:59] <segfaultfizzbuzz> using conduit and xml-conduit (or libraries you recommend, if those aren't a good choice)
[06:37:11] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[06:37:21] <Axman6> I'm not familliar with dealing iwht xml with conduits sadly (luckily?)
[06:37:26] <segfaultfizzbuzz> ha
[06:37:32] <Axman6> s/ll/l
[06:37:54] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[06:38:21] <Henson> somebody recommended to me some time ago to use Pipes instead of Conduit, not sure if that is still recommended.
[06:38:38] <Henson> it's the same idea, but I think easier to get started with than Conduit
[06:39:16] <Henson> looks like the pipes library isn't as popular as conduit, though
[06:40:08] <Axman6> I have never managed to make a working program using pipes, it's restrictions make it difficult to write useful programs IMO
[06:40:13] <jackdk> I particularly like `streaming`, which gives up bidirectional information flow in favour of a really simple type
[06:40:16] <jackdk> Axman6: ditto
[06:40:20] <Henson> one of the benefits of stream with pipes or conduit is that you can process really large amounts of data in constant memory, whereas if you try doing that lazily in IO you need to read the entire data into memory.
[06:40:32] <Axman6> jackdk and I have spoken at length on this, and gome to the same conclusion
[06:40:55] <segfaultfizzbuzz> so conduit is strictly evaluated...?
[06:41:11] <Henson> Axman6: so you guys would recommend conduit over pipes, then.
[06:41:23] <Axman6> Henson: well, the problem with lazy IO is that you _might_ read the whole file into memory, or you might not, and small changes in other parts of your program can change whether that happens or not
[06:41:26] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[06:41:58] <jackdk> Henson: I prefer streaming. There are things I want to say with conduit that I don't seem to be able to
[06:42:12] <Axman6> I have used conduit quite a bit and managed to do a lot of real work using it. I haven't had much experience with streaming but IIRC is was also quite nice. Most of the work I've done has been around amazonka which exposes things via conduit
[06:42:23] <segfaultfizzbuzz> jackdk: wait so streaming is different from conduit...?
[06:43:03] *** Quits: td_ (~td@94.134.91.245) (Ping timeout: 256 seconds)
[06:43:06] <jackdk> https://hackage.haskell.org/package/streaming , with a nice workshop at https://github.com/ivan-m/LambdaJAM-Streaming-exercises if the haddocks aren't enough for you
[06:43:07] *** Joins: Erutuon (~Erutuon@user/erutuon)
[06:44:15] *** Joins: foul_owl (~kerry@94.140.8.105)
[06:44:37] *** Joins: td_ (~td@muedsl-82-207-238-147.citykom.de)
[06:44:58] <segfaultfizzbuzz> "   in truth "extracting a list or sequence from IO" is mostly just bad practice pure and simple.    " heh
[06:46:18] <jackdk> Henson: it is relatively easy to convert between the types provided by each package. Because Michael Snoyman built a lot of libraries (wai, warp, http-client, etc), a lot of stuff ends up depending on conduit.
[06:46:56] <jackdk> If I was doing "a little" streaming, I would suck it up and use `conduit`. If I was doing "a lot of" streaming, I would probably use `streaming` in my code and convert in/out of `conduit` when I needed to
[06:46:57] *** Joins: davros (~davros@host86-184-82-149.range86-184.btcentralplus.com)
[06:47:18] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:47:25] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[06:48:17] <Henson> jackdk: yeah, I figured conduit might be more popular because it's a dependency of a bunch of Michael's packages.  And just skimming through the docs it looks like it's pretty much the same idea.  The types look simpler to understand, too, just a Conduit with a pipe operator, not Producer, Pipe, and Consumer with a bunch of different ways of fusing/connecting them together.
[06:49:19] <jackdk> Producer/Consumer/Pipe are all instances of a more general type, same as Source/Sink/Conduit. That's not really a point of difference
[06:49:33] <Henson> both Pipe and Conduit (it seems) process data in a conceptually simple way, using "await" to get new data from upstream, and "yield" to send data downstream.  Similar conceptually to Python iterators.
[06:49:43] *** Quits: pavonia (~user@user/siracusa) (Read error: Connection reset by peer)
[06:50:02] <segfaultfizzbuzz> i'm flipping through the slides here now  https://ivan-m.github.io/LambdaJAM-Streaming/#/why-streaming
[06:50:59] <Henson> Axman6: what restrictions does Pipes have that makes it difficult to write useful programs?
[06:51:12] <jackdk> I would also suggest that the best library is the one you can understand and use to build a working program.
[06:52:03] *** Joins: zaquest (~notzaques@5.130.79.72)
[06:54:48] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[06:55:41] <segfaultfizzbuzz> i mean i'm struggling with everything at the moment lol. i switched over to trying to understand some stream documentation. https://hackage.haskell.org/package/HTTP-4000.3.16/docs/Network-HTTP-Stream.html   can this generate a stream from an http request? everything i see here sends a stream in
[06:55:46] <jackdk> the problem I have with the pipes/conduit model is that your composition actually gets a bit harder: connecting the output of one stream into another's input is a separate operation with its own operators/rules/etc to manipulating the stream itself 
[06:56:17] *** Quits: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203) (Quit: Client limit exceeded: 20000)
[06:57:32] *** Quits: int-e (~noone@int-e.eu) (Remote host closed the connection)
[06:57:47] <jackdk> segfaultfizzbuzz: let's back up to your initial problem. You want to make HTTP requests of some server?
[06:58:02] *** Joins: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203)
[06:58:08] <jackdk> and you're possibly expecting large response bodies, so you want to stream the response somewhere?
[06:58:34] *** Joins: int-e (~noone@int-e.eu)
[06:59:55] *** Joins: pavonia (~user@user/siracusa)
[07:00:36] <segfaultfizzbuzz> yeah the response is like 100 gb of zipped xml
[07:01:01] <jackdk> so you want to stream it to disk
[07:01:02] <segfaultfizzbuzz> but i am trying to build up to that by doing streaming calculations on some trivially sized xml delivered over http
[07:01:12] <segfaultfizzbuzz> no i want to do everything in ram. just network and ram
[07:01:42] <Axman6> Henson: I can't remember exqctly what I ran into, but one thing I did want to do was write something that could pipe a bytestring through, and when the bytestring had all been processed, I would return the hash of it - seems simple enough, but IIRC that is impossible to do. In conduit it just had type Conduit ByteString ByteString m (Digent SHA256) or something
[07:02:11] <jackdk> ok segfaultfizzbuzz, you want to do some streaming computation over this without buffering everything everywhere
[07:02:28] *** Quits: retroid_ (~retro@2e40edd9.skybroadband.com) (Ping timeout: 250 seconds)
[07:03:00] <segfaultfizzbuzz> not sure what "everything everywhere" means but yeah the actual calculation i need to do over the file looks like accumulating a few dozen bytes and then writing those few dozen bytes to disk
[07:03:24] <jackdk> fair. Have a look at https://hackage.haskell.org/package/http-conduit-2.3.8/docs/Network-HTTP-Simple.html
[07:03:45] <segfaultfizzbuzz> initially i started doing this in rust but ran into some problems and could never figure out whether there was a bug in the rust xml parser i was using or the file itself had some kind of formatting issue (i think it was invalid utf8)
[07:04:00] <segfaultfizzbuzz> whatever the case, this sounded like the sort of thing that haskellers say haskell is good at so i thought i would just give it a try
[07:05:16] <jackdk> let's see how we go. There's a note at the top of the linked document about turning on OverloadedStrings to construct the request in the first place, then you'll want to use `httpSource` and `getResponseBody` to get a conduit that represents the response body itself.
[07:05:28] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[07:05:43] *** Joins: cheater (~Username@user/cheater)
[07:05:49] <segfaultfizzbuzz> ok i'll try starting from this
[07:06:32] <segfaultfizzbuzz> i mean ok the example works. should i try to feed this into Text.XML ?
[07:06:33] <jackdk> if you get stuck, put something in a pastebin and someone should be able to take a look
[07:08:23] <jackdk> I would look at https://hackage.haskell.org/package/xml-conduit-1.9.1.1/docs/Text-XML-Stream-Parse.html#v:parseBytes which you should be able to connect to the conduit from the response body
[07:11:16] <segfaultfizzbuzz> thanks i'll give that a try
[07:19:22] *** Quits: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt) (Ping timeout: 250 seconds)
[07:24:29] <segfaultfizzbuzz> ok well here is my first attempt:     main = httpBS "http://zombo.com" >>= parseBytes def .| printC
[07:24:34] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:54d9:91e1:8da8:c09f)
[07:30:07] *** Quits: FroskyArr (~froskyarr@203.175.13.219) (Remote host closed the connection)
[07:30:31] *** Joins: FroskyArr (~froskyarr@203.175.13.219)
[07:31:57] <jackdk> well yeah, anything is possible at zombocom
[07:32:22] <segfaultfizzbuzz> hahaha even my bad, wrong haskell code
[07:34:20] <segfaultfizzbuzz> anyway i can't get things to fit. it says can't match ConduitT B8.ByteString c0 m0 () with ConduitM B8.ByteString c0 m0 ()
[07:34:56] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[07:35:06] <segfaultfizzbuzz> i forget, does haskell do implicit type conversion...? no, right?
[07:35:32] <segfaultfizzbuzz> you would use polymorphism to achieve that or something along those lines...?
[07:37:47] <andreabedini> segfaultfizzbuzz: that's correct
[07:38:01] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[07:39:12] <segfaultfizzbuzz> so i see the T there which smells like i need to understand monad transformers to do this stuff perhaps?
[07:39:13] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[07:39:49] <segfaultfizzbuzz> i was reading through Real World Haskell a few days ago and i feel like i finally understood the meaning of the term "monad" once the author used the words "chain" and "inject"
[07:41:39] <Axman6> you might find this useful to solidify that a bit: https://tomstu.art/refactoring-ruby-with-monads
[07:41:44] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Remote host closed the connection)
[07:42:42] <andreabedini> I am not familiar with Conduit but in this case it looks like ConduitM is an alias for ContuitT, kept for backward compatibility
[07:42:45] <andreabedini> https://hackage.haskell.org/package/conduit-1.3.4.2/docs/Data-Conduit.html#t:ConduitM
[07:43:01] <andreabedini> so you might avoid that rabbit hole :)
[07:44:11] *** Joins: leungbk (~user@2603-8000-1201-2dd2-79d4-db3d-bfd4-b037.res6.spectrum.com)
[07:46:38] <segfaultfizzbuzz> is an alias...? if it is an alias then why doesn't haskell treat them as the same...?
[07:49:15] <segfaultfizzbuzz> i mean it says right there in the documentation,    type ConduitM = ConduitT    so ... do i have to give haskell permission to treat the types as equivalent...?
[07:51:46] *** Quits: leungbk (~user@2603-8000-1201-2dd2-79d4-db3d-bfd4-b037.res6.spectrum.com) (Quit: ERC 5.4 (IRC client for GNU Emacs 28.0.91))
[07:51:56] <Axman6> sounds like your problem might be something else
[07:52:26] <segfaultfizzbuzz> i'll do a bigger paste if you like
[07:53:08] <segfaultfizzbuzz> https://paste.rs/FE4.hs
[07:54:10] *** Joins: leungbk (~user@2603-8000-1201-2dd2-79d4-db3d-bfd4-b037.res6.spectrum.com)
[07:54:39] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[07:55:11] *** Joins: mbuf (~Shakthi@223.190.239.151)
[07:57:01] *** Joins: yauhsien (~yauhsien@2402:7500:5e5:b1b6:819e:4473:2cd6:e659)
[07:57:17] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[07:58:28] <andreabedini> segfaultfizzbuzz: you are not reading the error correctly. GHC is saying "I cannot match A, I was expecting B but I got A"
[07:59:08] <andreabedini> it was expecting IO () but it got a ConduitT i0 Event m0
[08:00:54] <andreabedini> in general terms, I think with Conduit you build a pipeline (with types like ConduitT a b c or something) and then you "run" it, turning the pipeline into an IO type (typically, but it doens't have to be IO) 
[08:01:17] <asivitz> is there a good library for serializing a random generator's state? for some reason StdGen doesn't have a Read instance
[08:02:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:02:51] <dsal> You can use a different generator, I guess.
[08:03:22] <dsal> :t randomR
[08:03:23] <lambdabot> (Random a, RandomGen g) => (a, a) -> g -> (a, g)
[08:04:51] <asivitz> yea; I assume there has to be an existing library that implements some serializable RandomGen?
[08:05:53] <andreabedini> asivitz: for context https://github.com/haskell/random/issues/123
[08:07:03] <jackdk> segfaultfizzbuzz: Possibly helpful: https://www.irccloud.com/pastebin/tIkjGAtc/Zombo.hs
[08:08:08] <asivitz> andreabedini: ah ok. well that's definitely what I'm looking for. glad it's being considered. thanks
[08:08:09] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[08:08:10] *** Quits: leungbk (~user@2603-8000-1201-2dd2-79d4-db3d-bfd4-b037.res6.spectrum.com) (Read error: Connection reset by peer)
[08:08:33] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[08:08:46] *** Joins: jmc (~jmc@softbank126150248096.bbtec.net)
[08:08:52] <segfaultfizzbuzz> ah the issue was that i wasn't using .| 
[08:09:55] <andreabedini> segfaultfizzbuzz: glad you sorted it, Conduit has its own operators to combine pieces of a pipeline, I never remember them
[08:10:40] <jackdk> .| connects the output of one conduit to the input of another. `runConduit :: Monad m => ConduitT () Void m r  -> m r` runs a conduit that takes no input from upstream and produces no input downstream (`Void` is an uninhabited type)
[08:10:44] <segfaultfizzbuzz> your zombo example is almost identical to what i was originally doing, except that it is using runResourceT
[08:10:45] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:10:45] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:10:45] *** Joins: wroathe (~wroathe@user/wroathe)
[08:11:13] <jackdk> I needed that because it complained about no MonadResource instance for IO
[08:11:37] <jackdk> It closes any open connections, etc
[08:12:34] <jmc> How do I force-recompile base? I want to get .hie files for it, but Cabal doesn't seem to let me. Compiling from source doesn't work for reasons I hope not to have to get into
[08:13:20] *** Quits: yauhsien (~yauhsien@2402:7500:5e5:b1b6:819e:4473:2cd6:e659) (Remote host closed the connection)
[08:15:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:16:49] *** Joins: deadmarshal (~deadmarsh@95.38.119.169)
[08:23:13] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[08:28:16] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[08:38:31] *** Joins: jao (~jao@68.235.43.173)
[08:40:54] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:45:15] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[08:52:35] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[08:54:44] *** Joins: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt)
[08:59:33] *** Quits: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt) (Ping timeout: 268 seconds)
[09:00:14] *** Quits: jao (~jao@68.235.43.173) (Remote host closed the connection)
[09:01:07] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[09:13:37] <segfaultfizzbuzz> so in rust there's a trick where you can say let _ : () = foo to make the compiler print out the type of something,... is there an equivalent in haskell?
[09:13:37] *** Joins: vglfr (~vglfr@46.96.142.183)
[09:13:46] <segfaultfizzbuzz> substantially all of my debugging is printf
[09:14:06] <segfaultfizzbuzz> equivalent for compiled code that is, i know about :t for ghci
[09:15:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:16:54] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[09:17:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:18:06] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:c06a:eb2:e18d:4418)
[09:19:45] <ski> segfaultfizzbuzz : i guess you could add a type ascription `... :: Bool' or something, and it'll complain that `...' is not of type `Bool' (if it isn't), and say something about the type it has inferred for it (often just giving some of the detail, though, like the top-level type constructor)
[09:19:48] <jackdk> % length (_ ++ [1, 2, 3])
[09:19:54] <yahb> jackdk: [Timed out]
[09:20:16] <jackdk> > length (_ ++ [1, 2, 3])
[09:20:20] <lambdabot>  error:
[09:20:20] <lambdabot>      • Found hole: _ :: [Integer]
[09:20:20] <lambdabot>      • In the first argument of ‘(++)’, namely ‘_’
[09:20:22] <ski> % :t length (?xs ++ [0,1,2])
[09:20:23] <yahb> ski: (?xs::[a], Num a) => Int
[09:20:44] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[09:21:19] <jackdk> segfaultfizzbuzz: there we go. an `_foo` in an expression is a _typed hole_ which will dump (among other things) the type it expects in that space. 99% of my working with haskell is filling in typed holes
[09:22:05] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[09:22:32] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[09:25:51] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:4184:bb26:81f2:501e)
[09:27:55] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Remote host closed the connection)
[09:28:09] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[09:28:25] <jackdk> segfaultfizzbuzz: the reverse, where you're like "what is this thing?" I like to either do what ski says and stick a`:: ()` after the expression I'm unsure of (wrapping it in brackets if necessary), or stick a `_ $` in front of the whole thing, which will solve for a function type. That will tell me both what I have and what GHC wants
[09:31:51] *** Joins: pottsy (~pottsy@129.227.183.244)
[09:37:20] *** Joins: wea (~wea@node-1w7jr9qkwjp07dpr4fj1qaoky.ipv6.telus.net)
[09:38:03] <wea> how to actually see/print Alt type https://paste.tomsmeding.com/cYfmnPLO ?
[09:38:53] <wea> when using `string "asdf"` i get no instance of Show
[09:43:17] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[09:43:59] <segfaultfizzbuzz> jackdk: thanks (and ski, thanks)
[09:44:04] <jackdk> wea: doesn't lok like you get one. I would try to build one using runAlt : the alternative instance for [] is append, so you could build some kind of strings
[09:49:32] <jackdk> and probably not a full show instance, just a function `Alt Primitive a -> String` or something that dumps enough to see what's going on
[09:51:22] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[09:52:17] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5) (Ping timeout: 240 seconds)
[09:52:46] *** Joins: img (~img@user/img)
[09:53:13] <wea> kinda lost, is it somethin glike `runAlt (:) (string "ADF")` ?
[10:00:11] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[10:00:13] <EvanR> :t runAlt
[10:00:14] <lambdabot> error: Variable not in scope: runAlt
[10:01:09] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:4184:bb26:81f2:501e) (Quit: Leaving)
[10:01:25] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:4184:bb26:81f2:501e)
[10:01:35] *** Joins: img (~img@user/img)
[10:01:58] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:03:58] *** Quits: Chewt (~hayden@2601:1c0:8101:7310::144a) (Quit: WeeChat 3.4)
[10:05:12] <EvanR> :t getAlt
[10:05:13] <lambdabot> forall k (f :: k -> *) (a :: k). Alt f a -> f a
[10:05:47] <jackdk> nah, it's this one: https://hackage.haskell.org/package/free-4.12.4/docs/Control-Alternative-Free.html looks like wea 's working through jle` 's free alternative regexp blog post
[10:07:56] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:12:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[10:13:37] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:54d9:91e1:8da8:c09f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:13:51] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[10:14:55] <jackdk> wea: sorry, this is actually way harder than I thought: have a look at the `Ap` constructor for `AltF`: `Ap :: f a -> Alt f (a -> b) -> AltF f b`. So if I have a value of type `AltF f b` built with the `Ap` constructor, all I know is _some_ `a` was chosen when the constructor was applied but I don't know what it is
[10:16:13] <jackdk> what I'd probably do is write functions that print the constructor name `altFName :: AltF f a -> String`but I'm not sure how to dig deeper than that
[10:17:47] *** Quits: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789) (Quit: Client limit exceeded: 20000)
[10:17:52] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (Quit: Client limit exceeded: 20000)
[10:19:13] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:19:50] <wea> i see, ty
[10:20:02] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[10:20:14] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[10:23:17] *** Joins: _ht (~quassel@2a02:a468:b619:1:fb02:7b89:e577:dc30)
[10:23:29] *** Joins: ardell (~ardell@user/ardell)
[10:24:25] *** Quits: wea (~wea@node-1w7jr9qkwjp07dpr4fj1qaoky.ipv6.telus.net) (Remote host closed the connection)
[10:24:35] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:54bc:3778:6db0:347c)
[10:26:56] *** Joins: jao (~jao@68.235.43.173)
[10:32:00] *** Quits: jao (~jao@68.235.43.173) (Ping timeout: 256 seconds)
[10:34:04] *** Joins: rusrushal13 (~rusrushal@2409:4056:e98:f867:6156:ffe6:54be:d062)
[10:38:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[10:39:09] *** Quits: rusrushal13 (~rusrushal@2409:4056:e98:f867:6156:ffe6:54be:d062) (Ping timeout: 256 seconds)
[10:42:57] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:4184:bb26:81f2:501e) (Ping timeout: 240 seconds)
[10:43:02] *** Joins: xsperry (~xs@user/xsperry)
[10:46:12] *** Joins: justGhost3 (~justache@user/justache)
[10:46:17] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[10:46:30] *** Joins: nurupo_ (~nurupo.ga@user/nurupo)
[10:46:34] *** Joins: codolio (~dolio@130.44.130.54)
[10:46:40] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:46:44] *** Quits: nonzen_ (~nonzen@user/nonzen) (Ping timeout: 256 seconds)
[10:46:58] *** Joins: nonzen (~nonzen@user/nonzen)
[10:47:18] *** Quits: dolio (~dolio@130.44.130.54) (Ping timeout: 256 seconds)
[10:47:18] *** Quits: ystael (~ystael@user/ystael) (Ping timeout: 256 seconds)
[10:47:18] *** Quits: justGhost (~justache@user/justache) (Ping timeout: 256 seconds)
[10:47:18] *** Quits: edr (~edr@user/edr) (Ping timeout: 256 seconds)
[10:47:18] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Ping timeout: 256 seconds)
[10:47:18] *** justGhost3 is now known as justGhost
[10:47:32] *** Joins: ystael (~ystael@user/ystael)
[10:47:40] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[10:47:52] *** Quits: tureba (~tureba@tureba.org) (Ping timeout: 256 seconds)
[10:47:52] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[10:48:07] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:50:01] *** nurupo_ is now known as nurupo
[10:50:09] *** Quits: xsperry (~xs@user/xsperry) ()
[10:51:42] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[10:52:28] *** Joins: edr (~edr@enlo.co)
[10:52:28] *** Quits: edr (~edr@enlo.co) (Changing host)
[10:52:28] *** Joins: edr (~edr@user/edr)
[10:53:14] *** Joins: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt)
[10:53:44] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[10:54:53] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[10:55:29] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:9d39:f8e3:aac8:5b1b)
[10:55:34] <Inst> ugh @evanr
[10:55:37] <Inst> you cowards
[10:55:52] <Inst> you don't even teach monads in your ANU course
[10:56:20] <EvanR> why do you think I work at ANU
[10:57:29] *** Quits: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt) (Ping timeout: 256 seconds)
[10:58:36] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[10:58:56] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[10:59:22] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:00:06] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[11:00:10] *** Joins: tureba (~tureba@tureba.org)
[11:00:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:00:45] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[11:01:55] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:02:08] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[11:03:10] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[11:05:24] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[11:07:12] *** Joins: michalz (~michalz@185.246.204.61)
[11:07:29] <Inst> blame axeman6
[11:07:37] <Inst> apparently you were teaching there once upon a time
[11:08:02] <dibblego> no, and you don't know if monads are taught
[11:09:07] *** Joins: fef (~thedawn@user/thedawn)
[11:10:19] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[11:10:56] <Inst> not in the intro course
[11:11:03] <Inst> or maybe he was talking about you, but w/e
[11:11:31] <Inst> the intro course iirc had an open course website
[11:11:31] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:11:40] <dibblego> no, also no
[11:12:14] *** Joins: thevishy (~Nishant@2405:201:f005:c007:4ce:a391:7558:6be8)
[11:13:44] <Inst> https://cs.anu.edu.au/courses/comp1100/lectures/
[11:14:38] <Inst> https://cs.anu.edu.au/courses/comp1100/lectures/
[11:15:00] <Inst> https://cs.anu.edu.au/courses/comp1100/labs/
[11:15:51] <EvanR> can I get some help here, I can't remember how to refer to the correct proxy to select an instance for KnownSymbol within a GADT pattern match
[11:15:59] <EvanR> or even what to search for
[11:16:15] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:16:53] <EvanR> some sort of type signature within the pattern or something
[11:17:57] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[11:18:11] <EvanR> wait I found it
[11:18:43] <jackdk> EvanR: either "type applications" (`Proxy @foo`), a type annotation (`Proxy :: Proxy foo`), plus "scoped type variables" if you need to refer to a type variable from an enclosing type signature
[11:19:02] <EvanR> right, no foo in scope
[11:19:13] <jackdk> scoped type variables may save you
[11:19:20] <EvanR> it's from a hidden variable in the GADT element
[11:19:36] <EvanR> I see an example of how I did it lying around
[11:19:45] <jackdk> can you show me? now I'm curious
[11:21:49] <ski> % data Foo = forall a. Show a => MkF [a]
[11:21:49] <yahb> ski: 
[11:21:57] <ski> % :t \(MkF (xs :: [a])) -> show (reverse (xs :: [a]))
[11:21:57] <yahb> ski: Foo -> String
[11:22:01] <ski> % :t \(MkF @a xs) -> show (reverse (xs :: [a]))
[11:22:01] <yahb> ski: ; <interactive>:1:3: error: Type applications in patterns are not yet supported
[11:22:21] <jackdk> ah right . turn on scoped type variables then name them in an annotation on the pattern. thanks.
[11:22:31] <EvanR> I can show you after it works xD
[11:23:21] <EvanR> ski are you trying to use type applications to introduce a name for the variable?
[11:23:28] <ski> yes
[11:23:36] <EvanR> :thonk:
[11:24:10] <EvanR> or does the name a already exist 
[11:24:54] <EvanR> (I can't actually use the name that was originally used to define the GADT, since it's not in scope)
[11:25:49] <ski> @quote lazy.bottoms
[11:25:49] <lambdabot> newsham says: lazy bottoms thunk empty thoughts
[11:26:22] <ski> (which name ?)
[11:28:00] <EvanR> https://paste.tomsmeding.com/FpFT2efP what eventually works
[11:28:07] *** Joins: alp (~alp@user/alp)
[11:28:19] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:29:13] <EvanR> (ScopedTypeVariables enabled)
[11:29:34] <ski> does that really work ?
[11:29:37] <EvanR> yeah
[11:30:54] <EvanR> trying to pattern match at the same time as do type annotations doesn't
[11:31:36] *** Quits: andreabedini (~andreabed@8s8kj6nfnfll37n1mb0g.ip6.superloop.com) (Quit: WeeChat 3.3)
[11:37:17] *** Joins: kanin (~kanin@2409:8a14:10e7:52d0:4526:1e35:f024:52e7)
[11:37:56] <ski> % let fieldNames :: RecF f ts -> [String]; fieldNames R0 = []; fieldNames ent@(R1 _ _) = case ent of (R1 x xs :: KnownSymbol n => RecF f ('(n,t) : qs)) -> symbolVal (Proxy :: Proxy n) : fieldNames xs
[11:37:57] <yahb> ski: 
[11:38:03] <ski> % let fieldNames :: RecF f ts -> [String]; fieldNames R0 = []; fieldNames ent = case ent of (R1 x xs :: KnownSymbol n => RecF f ('(n,t) : qs)) -> symbolVal (Proxy :: Proxy n) : fieldNames xs
[11:38:03] <yahb> ski: ; <interactive>:26:92: error:; * No instance for (KnownSymbol n) arising from a pattern; * In the pattern: R1 x xs; In the pattern: R1 x xs :: KnownSymbol n => RecF f ('(n, t) : qs); In a case alternative: (R1 x xs :: KnownSymbol n => RecF f ('(n, t) : qs)) -> symbolVal (Proxy :: Proxy n) : fieldNames xs; <interactive>:26:92: error:; * Couldn't match type `ts' with '(n, t) : qs; 
[11:38:07] <ski> curious
[11:38:08] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[11:40:16] <EvanR> in your second try, it may be that 'ent' doesn't properly "open" the gadt
[11:40:34] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[11:40:36] <EvanR> 2nd equation
[11:41:05] <EvanR> i.e. even though we know it's R1 it does not
[11:44:41] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:2912:7d04:4a3c:64d7)
[11:44:57] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf) (Ping timeout: 240 seconds)
[11:45:34] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:46:57] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[11:47:00] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[11:49:13] *** Joins: Guest98 (~Guest98@82.212.88.89)
[11:49:17] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[11:49:21] <EvanR> read about those TREX records from hugs earlier, pretty snazzy
[11:49:31] <EvanR> beats the hell outta this
[11:50:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[11:51:19] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[11:53:34] <Guest98> Hi everyone, Im a functional programming beginner, im working through real world haskell, one exercise  asks me to write a function to check for a palindrome, I didn't want to do the simple way using the length functions or others, I am having an issue with a pattern but I am not sure why : checkPalindrome (xs ++ ys) is invalid, could someone
[11:53:34] <Guest98> explain why ? couldn't figure it out online :(
[11:54:02] *** Joins: cosimone (~user@93-44-184-251.ip98.fastwebnet.it)
[11:54:05] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[11:54:40] <Guest98> heres the function : https://paste.tomsmeding.com/F6xrDzBB
[11:54:41] *** Joins: akegalj (~akegalj@141-136-245-236.dsl.iskon.hr)
[11:55:10] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[11:55:20] <Christoph[m]> Guest98: Pattern matching works with constructors, not with functions.
[11:55:32] <polyphem> you cant use ++ in pattern matching , how does +++ know where to split the strings
[11:55:55] <Guest98> right, so pattern matching is only checking for which type constructor is used for some type ?
[11:56:47] <polyphem> in case of functions accepting lists , you have to match the list constructors [] and (:) , at least
[11:56:48] <EvanR> some languages have ++ pattern matching somehow xD
[11:56:54] <EvanR> not haskell
[11:57:10] <Guest98> Okay
[11:57:18] <EvanR> yes pattern matching checks the constructor
[11:57:24] <dminuoso> I want to construct a text from a bytestring via builder by converting bytes into multiple characters. Should I use foldr or foldl'?
[11:57:25] <Guest98> Thanks everyone, makes sense :)
[11:57:42] <dminuoso> That is, would I foldr or rather foldl' over the octets of the bytestring?
[11:57:51] <ski> (Erlang has it as a special case. Mercury as a general case (comparable to view patterns, albeit directly connected to the usual "forward" mode of the function))
[11:58:14] <EvanR> for a lazy text, I'd imagine foldr
[11:58:22] *** Joins: coot (~coot@213.134.190.95)
[11:59:08] <EvanR> to build a strict text I'd imagine using the library functions not try to do it with foldl'
[11:59:21] <dminuoso> EvanR: What library function are you referring to?
[11:59:34] * EvanR goes to the haddocks
[11:59:35] <dminuoso> Does bytestring have some "rebuild" function?
[12:00:13] <dminuoso> By the way, the bytestring will never exceed 65 bytes if that's relevant.
[12:01:02] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:01:47] <EvanR> really, then I daresay just convert to a list of Word8 and do whatever you want xD
[12:01:47] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[12:02:07] <EvanR> Data.Text.pack the resulting list of Chars
[12:02:19] <dminuoso> Mmm, I think Ill rather go through Data.ByteString.fold 
[12:02:25] <dminuoso> Otherwise Id have to rely on GHC to do deforestation
[12:02:47] <dminuoso> Yeah Data.Text.pack wont work, I cant guarantee this to be UTF8 encoded
[12:03:07] <dminuoso> Which is why Ill roughly turn non-printable characters into text chunks like '\x00'
[12:03:11] <EvanR> ah no I wasn't suggesting dumpping the Word8 directly into Chars
[12:03:38] <dminuoso> Ah I see what you mean.
[12:03:50] <dminuoso> No that wont work either, as this is not a byte-to-char conversion
[12:03:52] <EvanR> I don't see a Data.Text method to take a known length vector of Chars or anything
[12:04:02] <dminuoso> It's actually `Word8 -> Text`, as some bytes get translated into multiple characters
[12:04:12] <EvanR> it has scanl, but you aren't scanning a source Text
[12:04:14] <dminuoso> Or rather `Word8 -> Data.Text.Builder`
[12:04:28] <EvanR> if you have the Builders, then you can just run the final builder
[12:04:44] <dminuoso> So if I build that builder chain, should I be strict in that? :p
[12:04:53] <dminuoso> How can I even know this beforehand
[12:05:00] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:05:14] <EvanR> ok, 65 bytes
[12:05:22] <EvanR> but how much text does it expand to? xD
[12:05:36] <dminuoso> In almost all cases 65 characters of text.
[12:05:47] <EvanR> then I don't see a point in being lazy
[12:05:53] <dminuoso> In the most generate case you'd have 65*4-1 chars of output
[12:06:05] <dminuoso> degenerate
[12:06:17] <EvanR> force it now, get a packed up to 65 char strict Text
[12:06:17] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[12:06:34] <dminuoso> Okay, so Data.ByteString.foldl' it is
[12:06:59] <EvanR> wait, is the folding function composing builders
[12:07:14] <dminuoso> Yeah
[12:07:38] <EvanR> then strictness doesn't matter, but order matters
[12:07:39] <dminuoso> I can alternatively also just mappend them together, but doing this 65 times seems like a waste of allocations
[12:08:01] <EvanR> compose them backwards and it ruins your day for a minute
[12:08:02] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[12:08:29] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[12:09:28] <dminuoso> Mmm, perhaps I could also use Data.ByteString.concatMap, and then just use pack!
[12:09:31] <EvanR> because the output will be jumbled
[12:09:33] <dminuoso> concatMap :: (Word8 -> ByteString) -> ByteString -> ByteString 
[12:10:01] <dminuoso> Ah but no, this will actually force tons of mappends
[12:10:02] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Read error: Connection reset by peer)
[12:10:37] <EvanR> bytestring concat shouldn't do a bunch of intermediate mappends, but I don't see how that gets you to your Text
[12:11:02] <dminuoso> concatMap f = concat . foldr ((:) . f) []
[12:11:14] <EvanR> well, don't do that
[12:11:20] <dminuoso> Yeah :)
[12:11:59] <EvanR> note if you had utf8 that wouldn't really help a dumb coercion to Text, since it doesn't use utf8
[12:14:28] <c_wraith> sufficiently new versions of text do use UTF-8
[12:14:53] <EvanR> orly
[12:17:42] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[12:18:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7175:fef6:491:2dba) (Remote host closed the connection)
[12:19:01] *** Joins: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9)
[12:19:42] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:21:55] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[12:22:06] <c_wraith> https://hackage.haskell.org/package/text-2.0/changelog
[12:24:50] *** Joins: Erutuon (~Erutuon@user/erutuon)
[12:26:37] <EvanR> I can't wait to abuse this
[12:26:52] <Guest98> Is it impossible to use a parametrized type and to check if an instance of that type is equal to another one ??
[12:27:29] <EvanR> if the type in question is an instance of Eq you can do it
[12:27:45] <c_wraith> it's easy to require that two types be the same. It's quite a lot harder to test if two types are the same.
[12:28:10] <EvanR> ah, two different types
[12:28:26] <Guest98> is it possible to require for both to be instances of eq ?
[12:28:32] <Guest98> the same instance of eq even
[12:28:48] <Guest98> last line here is giving me an error : https://paste.tomsmeding.com/RS0X7dZ6
[12:28:48] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:28:53] <ski> by "instance of that type", do you mean a value having that type ?
[12:29:28] <EvanR> myfun :: Eq a => a -> (a,a) -> [a] -> Whatever
[12:29:36] <EvanR> myfun can test all the a's for equality
[12:29:59] <EvanR> note they will all be of the same type
[12:30:06] <ski> Guest98 : yes, add `Eq a => ' just after the `::' for `checkPalindrome'
[12:30:19] <Guest98> Okay thanks
[12:30:41] <Guest98> Eq a => just means like where a is an instance of Eq ?
[12:30:42] <ski> (also, the definition of `getLastElement' has a type error)
[12:30:46] <ski> yes
[12:31:04] <Guest98> ah you are right, since it can return []
[12:31:12] <ski> instead of `tail(xs)' you can just say `tail xs'
[12:31:12] <Guest98> will fix, thanks again
[12:31:34] <ski> but better than that is to replace the `xs' in the pattern with say `(_:xs)', and then `xs' is the tail
[12:31:48] <Guest98> why is that better ?
[12:31:51] <Guest98> readability or ?
[12:32:05] *** Joins: chomwitt (~chomwitt@2a02:587:dc16:6e00:12c3:7bff:fe6d:d374)
[12:32:36] <ski> when it's reasonable to access parts by pattern-matching, it's usually nicer to do so
[12:33:00] <Guest98> sure, so its just the standard, ill try to do that moving forward
[12:33:23] <ski> readability, yes. and the implementation knows that what you're accessing is there, so it doesn't introduce any extra checking (like `tail' possibly would do)
[12:33:48] <ski> (anyway, you can say just `getLastElement xs', rather than `getLastElement(xs)')
[12:34:14] <ski> (oh, and ditto for `init')
[12:34:38] <ski> if you want to, you could replace the pattern `(x:[])' by `[x]'
[12:34:59] <Guest98> sorry, im  just used to parenthesis from my non functional experience lol
[12:35:01] <Guest98> sure
[12:35:56] <ski> the problem with `checkPalindrome :: [a] -> Bool' was that it promised to work for *all* types `a', regardless of whether they're instances of `Eq' or not
[12:36:05] <ski> (not all types are)
[12:36:26] *** Joins: d0ku (~d0ku@178.43.12.98.ipv4.supernova.orange.pl)
[12:36:40] <Guest98> i understand, will fix it and get back to you
[12:36:41] <Guest98> thx
[12:37:17] <dminuoso> EvanR: https://gist.github.com/dminuoso/3ba87266e2df0729ca575df7132d6d10
[12:37:20] <dminuoso> Works like a charm.
[12:37:29] <dminuoso> And you were right, foldl' and foldr' make a difference here with respect to the order
[12:37:51] <EvanR> I don't think the prime does anything
[12:38:14] <EvanR> or doesn't do much
[12:38:36] <EvanR> and foldr' might be actively bad
[12:39:17] <dminuoso> It's really frustrating that after a few years of Haskell, I cant say whether the prime does anything, whether foldr' would be good or bad here..
[12:40:11] <EvanR> you're using lazy text after all?
[12:40:22] <EvanR> recalculating
[12:40:39] <dminuoso> Builder produces lazy text necessarily
[12:41:00] <EvanR> makes sense
[12:41:29] *** Joins: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt)
[12:41:31] <dminuoso> I figured it makes much less sense to turn it strict here, the user can always do this if they want
[12:41:41] <dminuoso> But Im not sure, library decisions.
[12:41:56] <Guest98> ski all is working now, thanks :)
[12:42:02] <EvanR> then you have a choice to stream it or solidify it with toStrict
[12:42:14] <dminuoso> Well if I want to stream it, Id rather give you a Builder
[12:42:23] <dminuoso> So I guess its either Builder or strict text?
[12:43:03] <EvanR> lazy text will let you stream it, builder will let you continue to concattenate it in whatever way
[12:43:45] <EvanR> since it's only like 64 chars I lean toward returning strict
[12:43:45] <dminuoso> Given the length I think Im fine turning it into a strict text
[12:43:47] <dminuoso> Yeah
[12:44:00] <dminuoso> Well, strictly the entirety of the output can be as long as 255
[12:44:14] <dminuoso> But realistically this will be as long as usual presentation forms of domains
[12:44:16] <dminuoso> So 10-20ish
[12:44:44] *** Joins: fendor (~fendor@77.119.174.56.wireless.dyn.drei.com)
[12:44:54] <EvanR> there's always some asshat with a domain 400 characters long xD
[12:45:23] <dminuoso> No, domains cannot be longer than 253/254 characters in the usual presentation
[12:45:31] <EvanR> ok, url
[12:45:52] *** Quits: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt) (Ping timeout: 268 seconds)
[12:46:17] <EvanR> I'm just skeptical on hard bounds for these things
[12:47:02] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:47:06] <Guest98> is init xs o(n) ?
[12:47:29] <Guest98> or even last xs
[12:47:32] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:32] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:35] *** allbery_b is now known as geekosaur
[12:48:19] <ski> yes
[12:49:42] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:50:22] <EvanR> but init xs is much lazier so the cost doesn't hurt as much
[12:50:27] <EvanR> potentially
[12:50:50] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[12:50:50] <Guest98> hm.. that means my check palindrome is o(n^2).. is there an o(n) way to do it ? I assume reverse xs is also o(n^2) since they are basically linked lists and I dont know of a stack to help with reversing
[12:50:50] <EvanR> last xs has sticker shock
[12:51:22] <merijn> Reverse shouldn't be O(n^2)??
[12:51:33] <EvanR> Guest98 is using a custom algorithm
[12:51:34] <merijn> Why would it?
[12:51:45] <Guest98> how do you reverse a linked list in o(n) without stacks and pointers ?
[12:52:07] <Guest98> (in haskell, obviously)
[12:52:20] <EvanR> implement reverse and see xD
[12:52:33] <Guest98> ok.. ill try
[12:52:37] <EvanR> (without stacks and pointers)
[12:53:06] <c_wraith> Notably, do it only with pattern matching and recursion, so you can see the amount of work it's doing
[12:53:22] <Guest98> noted
[12:53:38] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[12:53:44] <ski> (what does "without stacks and pointers" mean ?)
[12:54:35] <Guest98> oh wow
[12:54:45] <Guest98> wait nvm
[12:56:17] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[12:56:18] <Guest98> that was easy i guess
[12:56:31] <EvanR> without stacks means don't use forth. without pointers means don't use C
[12:56:34] <Guest98> myReverse (x:xs) = myReverse(xs) ++ (x:[])
[12:56:54] <int-e> now *that* is quadratic
[12:57:05] <Guest98> why ?
[12:57:21] <EvanR> implement ++ and see xD
[12:57:45] <Guest98> I assumed ++ is o(1) since they are linked lists rofl
[12:57:53] <EvanR> :thonk:
[12:58:10] <EvanR> except we only have a pointer to the wrong end
[12:58:18] <EvanR> and we can't modify either end
[12:58:22] <Guest98> makes sense
[12:58:22] <EvanR> immutability
[12:58:29] <int-e> and even if we had a pointer to the end we can't update the successor
[12:58:44] <Guest98> i keep forgetting the immutability thing lmao
[12:58:46] <Guest98> let me try again
[12:58:55] <int-e> *but* the linked lists we have still work as stacks
[12:59:07] <int-e> (plural; you can have more than one)
[12:59:17] *** Joins: Major_Biscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:00:00] <Maxdamantus> A unique immutable list in a linearly typed system could update the successor, and (++) could be O(1).
[13:00:15] <Maxdamantus> (though that's not the case here)
[13:00:29] <EvanR> since a list is basically a stack, Guest98 you're allowed to use stacks after all lol
[13:00:35] <EvanR> so to speak
[13:01:05] <int-e> I'm mentioning this because I actually think of the linear time list reversal that way
[13:01:20] <EvanR> yeah I think Guest98 also did
[13:01:24] <int-e> so /maybe/ it's a view that helps somebody else as well
[13:01:33] <ski> (s/linearly typed/uniqueness type/)
[13:01:45] <Guest98> i understand, but im not sure how i would implement that in a [a] -> [a] function
[13:01:57] <Guest98> let me try though, 2 mins
[13:01:58] <int-e> you can add a helper
[13:02:03] <Guest98> whats a helper ?
[13:02:10] <Guest98> let me search it
[13:02:16] <int-e> an auxiliary function
[13:02:20] <c_wraith> you only need to have [a] -> [a] as the interface.  You can write a more complex function to use internally
[13:02:30] <ski> another operations, whose raison d'etre is to help with implementing the operation you're trying to define
[13:02:32] <int-e> (one that has a different type than [a] -> [a])
[13:03:06] <Guest98> oh so like a literal other function
[13:03:16] <Guest98> let me think for a second then
[13:05:20] *** Joins: max22- (~maxime@2a01cb08833598003a5001b0ea2a052d.ipv6.abo.wanadoo.fr)
[13:06:10] <EvanR> funny you can't reverse an infinite list... but... if you had two infinite lists as a zipper, then you can trivially reverse that
[13:06:25] <EvanR> two can'ts make a can
[13:07:26] <c_wraith> reversing a list is a global operation - the first observable change is that the first element has been replaced with one that came from far away
[13:07:42] <c_wraith> reversing a zipper is local: you keep the same neighbors.
[13:08:05] <EvanR> like captain kirk changing the rules of the test to win
[13:09:06] *** Quits: pottsy (~pottsy@129.227.183.244) (Ping timeout: 250 seconds)
[13:09:29] <Guest98> this should be it no ? or am i missing something ? https://paste.tomsmeding.com/5iEskgd8
[13:09:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:09:41] <Guest98> wait nevermind
[13:09:44] <Guest98> i forgot to update it
[13:10:13] <EvanR> if the zipper represents a cyclic list, then you get the best of both worlds (local neighbors that are simultaneously far away)
[13:10:49] <Guest98> THIS should be it: https://paste.tomsmeding.com/HK7PPcrT
[13:10:50] <Guest98> yes ????
[13:11:07] *** Joins: o (~niko@libera/staff/niko)
[13:11:13] <c_wraith> that'll work.
[13:11:35] <int-e> yes. except we would normally not pass a tuple in Haskell, just make myReverseHelper :: [a] -> [a] -> [a]  instead
[13:11:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:11:48] <c_wraith> it's usual to just have two parameters instead of a pair, but that probably won't result in any difference in how it's compiled
[13:11:59] <Guest98> why ?
[13:12:07] <EvanR> currying
[13:12:11] <int-e> the compiler is good at passing multiple arguements so it's the same speed or faster that way
[13:12:28] <Guest98> alright
[13:12:38] <c_wraith> also, if the compiler didn't optimize it out, you would be allocating a lot of pairs you don't actually need to
[13:13:07] <Guest98> i dont get that, you are always calling it with two different parameters so why does it matter if the params are in a pair or not
[13:13:30] <int-e> naively the pair is its own heap object
[13:13:42] <EvanR> I would not want a new pair allocating for each loop
[13:13:54] *** Joins: zeenk (~zeenk@2a02:2f04:a208:c500:649e:b5e2:d15c:7960)
[13:13:55] <int-e> which needs to be allocated, with a new pair being created every time you call myReverseHelper
[13:14:04] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[13:14:10] <EvanR> not that that has anything to do with reality after compilation
[13:14:14] <Guest98> I think i understand
[13:14:42] <EvanR> rather it's common to curry everything out of a defensive suspicion you'll be partially applying stuff
[13:14:53] <Guest98> you are saying that (xs, x:ys) is a new pair that would have to be allocated but otherwise id be just suing xs ys directly
[13:15:10] <Guest98> using not suing*
[13:15:14] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[13:15:18] <EvanR> also if you don't use a tuple, less parentheses probably
[13:15:26] <EvanR> definitely less commas
[13:15:34] <Guest98> let me try and see what i get
[13:15:49] <int-e> Guest98: yes. though the reality is more complicated because ghc will likely realize that the pair is immediately deconstructed and thus avoid the allocation
[13:16:06] <Guest98> deconstructed as in pattern matched ?
[13:16:17] <ski> yes
[13:16:27] *** Joins: Topsi (~Tobias@dyndsl-091-249-083-234.ewe-ip-backbone.de)
[13:16:29] <int-e> and then it'll make an auxiliary worker function for myReverseHelper  that takes two arguments
[13:16:41] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[13:16:43] <Guest98> ok i get it
[13:17:34] *** Joins: pottsy (~pottsy@129.227.183.244)
[13:18:00] <Guest98> alright fixed
[13:18:09] <EvanR> if there's a choice between "you can pass 1 arg now or 2 args now" and "you must pass 2 args now", one of these is a superset of the other and I don't even wanna think about it again xD
[13:18:35] <EvanR> hence currying by default
[13:18:40] <int-e> We <3 the S in STG.
[13:18:47] <Guest98> wtf is stg
[13:19:01] <ski> Spineless Tagless G-machine
[13:19:05] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[13:19:10] <Guest98> I somehow doubt that
[13:19:17] <int-e> Guest98: sorry that kind of wasn't for you.
[13:19:26] <Guest98> oh my mistake
[13:19:32] <ski> @quote spineless
[13:19:32] <lambdabot> spopejoy says: That [Spineless Tagless G Machine] will always sound like the villian in an upcoming Ghostbusters sequel to me :)
[13:19:44] <Guest98> thats actually a thing ? XD
[13:20:08] <c_wraith> it's part of (an early version of) GHC's evaluation model
[13:20:18] <int-e> The lack of spine in the argument stack is why passing several arguments at once isn't more expensive than passing a single one in Haskell.
[13:21:18] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:22:02] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[13:22:06] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:c06a:eb2:e18d:4418) (Quit: Leaving)
[13:23:15] <Guest98> I am done with this chapter i think, thanks everyone for the help, ill be back if I am stumped on anything again ;)
[13:23:16] *** Quits: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506) (Read error: Connection reset by peer)
[13:23:30] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Ping timeout: 260 seconds)
[13:23:33] *** Quits: cynomys (~cynomys@user/cynomys) (Remote host closed the connection)
[13:23:49] <Guest98> I have to say its definitely a very different way of thinking than when I am just writing some c++ or java code, its very cool
[13:24:12] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:24:27] <EvanR> so your reverse function basically walks down the list with a stack
[13:24:33] <Guest98> Is there any demand for functional programmers ?
[13:24:35] <Guest98> yes
[13:24:36] <EvanR> putting whatever it sees on the top
[13:24:41] <EvanR> done
[13:24:46] <Guest98> i couldn't think of a different way :(
[13:24:53] <Guest98> that is also o(n)
[13:25:01] <EvanR> well there's this
[13:25:27] <EvanR> > foldl (\stack x -> x : stack) [] [1,2,3,4,5]
[13:25:29] <lambdabot>  [5,4,3,2,1]
[13:25:33] *** Joins: cfricke (~cfricke@user/cfricke)
[13:25:39] <EvanR> but it does the same thing
[13:26:10] <Guest98> sure
[13:26:13] <int-e> pop from one stack, push on another, repeat until first stack is empty...
[13:26:31] <Guest98> yep, thats the reverse function i wrote basically
[13:26:36] <EvanR> the 90s game KLAX
[13:26:45] *** Joins: fef (~thedawn@user/thedawn)
[13:26:52] *** Quits: fef (~thedawn@user/thedawn) (Client Quit)
[13:27:13] <Guest98> I asked if there is any demand for functional programmers and got no response, thats a bad indication :P
[13:28:15] <EvanR> sorry I have enough
[13:28:23] <dminuoso> Im sure there is *some* demand.
[13:28:39] <dminuoso> Quite certain that there's at least one open position on this planet?
[13:29:02] <c_wraith> obviously there's demand. Otherwise there wouldn't be any.  (laziness joke)
[13:29:19] <Guest98> lmao
[13:29:28] <EvanR> oooooo snap
[13:29:28] <Guest98> guess ill see you guys tmw, thanks again, bye.
[13:29:37] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[13:29:40] *** Quits: Guest98 (~Guest98@82.212.88.89) (Quit: Client closed)
[13:30:07] *** Quits: FroskyArr (~froskyarr@203.175.13.219) (Remote host closed the connection)
[13:30:38] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:30:51] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:30:55] *** Joins: FroskyArr (~froskyarr@120.239.9.162)
[13:32:43] <EvanR> that's annoying
[13:32:58] <EvanR> when did new style Read parsers appear
[13:33:06] <dminuoso> What is new-style Read?
[13:33:07] <EvanR> I think I'm too out of date
[13:33:11] <dminuoso> o.o
[13:33:35] *** Joins: ubert1 (~Thunderbi@p200300ecdf0994bb4b7b6c6de4b2c475.dip0.t-ipconnect.de)
[13:33:36] <EvanR> minimal implementation readsPrec or readPrec
[13:33:46] <EvanR> readPrec is a new kind of parser
[13:33:53] *** Joins: fef (~thedawn@user/thedawn)
[13:34:01] <EvanR> https://hackage.haskell.org/package/base-4.16.0.0/docs/Text-Read.html
[13:34:12] *** Joins: dut (~dut@user/dut)
[13:34:30] *** Joins: chele (~chele@user/chele)
[13:34:41] <dminuoso> https://hackage.haskell.org/package/base-4.16.0.0/docs/Text-ParserCombinators-ReadPrec.html#t:ReadPrec
[13:34:52] <dminuoso> -- Copyright   :  (c) The University of Glasgow 2002
[13:34:56] <dminuoso> That sounds.. old?
[13:35:39] <EvanR> just did a double take, 4.16 is latest base
[13:35:54] <EvanR> with haddocks
[13:36:47] *** Joins: __monty__ (~toonn@user/toonn)
[13:36:53] <dminuoso> Just wondering since you called it new, but if that module has existed for 20 years?
[13:36:59] <dminuoso> Merely curious
[13:37:13] *** Joins: cyphase (~cyphase@user/cyphase)
[13:38:01] <merijn> I mean, Text.ParserCombinators.ReadP and Text.ParserCombinators.ReadPrec both already exist in base 3.0, so...
[13:38:29] <EvanR> ‘readPrec’ is not a (visible) method of class ‘Read’
[13:38:48] <dminuoso> I feel like I dont know anything. We can have invisible methods? :(
[13:39:02] <dminuoso> This is too much
[13:39:06] <int-e> dminuoso: it was converted from .lhs to .hs in 2002, before that it said: % $Id: ReadP.lhs % (c) The University of Glasgow, 1994-2000
[13:39:27] <int-e> readPrec != readsPrec
[13:39:31] <EvanR> well
[13:39:36] <int-e> you can have class methods that aren't exported
[13:39:44] <int-e> making them invisible
[13:39:54] <EvanR> apparently I do have readPrec but I can't implement it without importing Text.Read
[13:40:04] <EvanR> unlike Show
[13:40:22] <EvanR> not exactly encouraging
[13:41:00] <int-e> Well showsPrec is in the Haskell report, readPrec isn't?
[13:41:20] <int-e> (but readsPrec and readList are)
[13:41:29] *** Quits: OscarH (~OscarH@2a02:c7f:a0da:ae00:ba27:ebff:fe84:d2f4) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:41:32] <EvanR> oh it's GHC specific
[13:41:44] *** Joins: OscarH (~OscarH@90.201.86.195)
[13:41:49] <EvanR> and highly recommended
[13:42:40] <merijn> I'd say "not having a Read instance" is highly recommended :p
[13:43:20] <EvanR> not a fan?
[13:43:42] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Remote host closed the connection)
[13:43:51] <int-e> > read ('"' : repeat ' ') :: Int
[13:43:54] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[13:43:58] <lambdabot>  mueval-core: Time limit exceeded
[13:44:16] <int-e> > read ('"' : replicate 42 ' ') :: Int
[13:44:18] <lambdabot>  *Exception: Prelude.read: no parse
[13:44:34] <EvanR> I made a working show instance for this crazy ass type and thought it might be cool to restore it from showed state
[13:44:46] <int-e> Read is convenient. I think that's about the only positive thing I can say about it.
[13:44:46] <EvanR> and now it's a rabbit hole
[13:45:13] <int-e> (to use, not to implement when `deriving` doesn't cut it)
[13:45:13] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[13:46:56] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:47:00] <dminuoso> merijn: One major thing I dislike about Read, is this coherence between Show and Read that is often assumed.
[13:47:10] <merijn> EvanR: Read is slow and bad
[13:47:38] <merijn> It's convenient for some ghetto things while developping. But entirely unsuitable for anything serious
[13:47:41] <int-e> And this is basically unfixable because the slow and bad things are in the Haskell report.
[13:47:45] <dminuoso> int-e: I found, if you really want to quickly serialize and deserialize stuff, aesons TH/generics is much better and robust.
[13:47:53] <dminuoso> Than compared to Show/Read
[13:48:18] <dminuoso> And you get free interop with other languages as well. 
[13:49:12] <EvanR> all of Read is bad or just Reads stuff
[13:49:23] <EvanR> the new style parsers are also slow and bad?
[13:49:45] <int-e> Yes
[13:49:49] <EvanR> about seriousness, I mean, Show is basically in the same boat
[13:50:01] <merijn> EvanR: All of it, tbh
[13:50:06] <EvanR> the output is atrocious by default and typing deriving Show everywhere sucks
[13:50:22] <int-e> The cardinal error is that everything in the standard and derived instances goes through a Haskell tokenizer (lex :: ReadP...)
[13:50:36] <merijn> I mean, a custom Read implementation using (mega)parsec might not be bad, but then just use those :p
[13:50:49] <int-e> which is how  read ('"' : replicate 42 ' ') :: Int  diverges instead of just giving up at the "
[13:51:15] <int-e> err not that one, I meant the `repeat ' '` variant.
[13:51:59] <int-e> but the lexer also means that even when it works, parsing an int doesn't use the simple state machine that it should be using... and it has a profound effect on performance
[13:52:53] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[13:52:59] <int-e> `Show` is mostly fine, except that without `Read` it's not good for serialization.
[13:53:36] <int-e> (And of course it's tied to String... which is questionable, but handled surprisingly efficiently in practice)
[13:54:06] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:54:56] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[13:59:54] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[14:00:11] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:00:32] *** Joins: tomjaguarpaw (~tom@li367-225.members.linode.com)
[14:06:33] *** Quits: Athas (~athas@sigkill.dk) (Ping timeout: 256 seconds)
[14:07:05] *** Joins: lambdap2 (~lambdap@static.167.190.119.168.clients.your-server.de)
[14:07:07] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (Ping timeout: 256 seconds)
[14:07:07] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Ping timeout: 256 seconds)
[14:07:07] *** Quits: shanemikel (~shanemike@desk.roadwar.net) (Ping timeout: 256 seconds)
[14:07:14] *** Joins: Athas (athas@sigkill.dk)
[14:07:19] *** Joins: sajith_ (~sajith@user/sajith)
[14:07:41] *** Quits: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[14:07:41] *** Quits: douglaswinship (~douglaswi@78.40.148.180) (Ping timeout: 256 seconds)
[14:07:41] *** Quits: heath (~heath@user/heath) (Ping timeout: 256 seconds)
[14:07:41] *** Quits: bcoppens (~bartcopp@vpn2.bartcoppens.be) (Ping timeout: 256 seconds)
[14:07:41] *** Quits: sajith (~sajith@user/sajith) (Ping timeout: 256 seconds)
[14:07:45] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[14:07:47] *** Joins: bcoppens (~bartcopp@vpn2.bartcoppens.be)
[14:07:49] *** Joins: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net)
[14:07:53] *** Joins: douglaswinship (~douglaswi@78.40.148.180)
[14:07:59] *** Joins: heath (~heath@user/heath)
[14:08:15] *** Quits: jjhoo (~jahakala@user/jjhoo) (Ping timeout: 256 seconds)
[14:08:15] *** Quits: myme (~myme@40.51-175-185.customer.lyse.net) (Ping timeout: 256 seconds)
[14:08:15] *** Quits: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de) (Ping timeout: 256 seconds)
[14:08:15] *** lambdap2 is now known as lambdap
[14:08:26] *** Joins: shanemikel (~shanemike@desk.roadwar.net)
[14:08:37] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[14:08:37] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[14:08:37] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[14:09:51] *** Joins: myme (~myme@40.51-175-185.customer.lyse.net)
[14:09:58] *** Joins: jjhoo (~jahakala@user/jjhoo)
[14:10:23] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[14:10:48] *** Joins: coot (~coot@213.134.190.95)
[14:13:21] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[14:13:21] <dminuoso> Is there a common idiom to express a law like `pretty . parse ~~~ id` where I want to emphasis "ignoring the Left case of parse"?
[14:13:35] *** Quits: phma (phma@2001:5b0:211f:5068:5bee:1f6d:8374:247d) (Read error: Connection reset by peer)
[14:14:47] <dminuoso> I mean I could write: right pretty . parse ~~~ Right
[14:14:52] <dminuoso> But would that get the point across?
[14:15:14] *** Joins: phma (phma@2001:5b0:211c:37e8:e22d:196:60ef:f166)
[14:16:04] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[14:16:58] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[14:17:58] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[14:19:27] *** Quits: tubogram4 (~tubogram@user/tubogram) (Quit: See ya later!)
[14:20:33] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[14:22:39] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:22:46] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[14:25:41] <opqdonut> dminuoso: it's usually simpler to specify `parse . pretty ~~~ id`
[14:25:45] <opqdonut> so you always start with a valid AST
[14:29:08] <dminuoso> opqdonut: Shouldn't that read Right though?
[14:29:38] *** Quits: jmc (~jmc@softbank126150248096.bbtec.net) (Quit: Leaving)
[14:30:40] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[14:30:48] *** Joins: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt)
[14:31:03] <opqdonut> yeah if parse returns Either Err AST then `parse . pretty ~~~ pure`
[14:31:13] <opqdonut> or Right if you want concreteness
[14:34:57] *** Quits: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt) (Ping timeout: 240 seconds)
[14:37:14] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:a9ef:8cb1:3f34:9694)
[14:37:27] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 250 seconds)
[14:38:56] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[14:39:47] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[14:40:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[14:42:28] *** Quits: d0ku (~d0ku@178.43.12.98.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[14:43:14] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[14:45:04] *** Joins: d0ku (~d0ku@178.43.12.98.ipv4.supernova.orange.pl)
[14:47:05] <jackdk> dminuoso: I have seen these called "round-tripping properties"
[14:47:24] <jackdk> dminuoso: https://hackage.haskell.org/package/hedgehog-1.1/docs/Hedgehog-Internal-Tripping.html#v:tripping
[14:48:51] <geekosaur> if we're being formal, I think idempotency?
[14:48:59] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 252 seconds)
[14:49:10] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 250 seconds)
[14:50:14] <polyphem> isnt idempotency : f a == f (f a) ?
[14:50:14] <jackdk> idempotency is P(P(x)) = P(x), no?
[14:50:31] <polyphem> isomorphic , maybe
[14:50:36] <geekosaur> yes, but here it'd a compund action that is idempotent
[14:51:50] <geekosaur> (parse . pretty) is the idempotent function since you should get the same result by doing it twice
[14:51:57] *** Quits: kanin (~kanin@2409:8a14:10e7:52d0:4526:1e35:f024:52e7) (Ping timeout: 240 seconds)
[14:52:07] <geekosaur> admittedly that's a somewhat roundabout way of expressing the property
[14:52:23] <polyphem> geekosaur: yes, in that case it is
[14:52:24] *** Joins: fef (~thedawn@user/thedawn)
[14:52:36] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[14:55:13] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[14:59:15] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 256 seconds)
[14:59:28] <ski> a retract situation `rectraction . section = id' gives rise to an idempotent `section . retraction'
[14:59:37] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[15:00:02] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[15:00:11] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[15:02:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[15:08:49] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:08:58] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[15:13:54] *** Joins: xsperry (~xs@user/xsperry)
[15:17:46] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[15:18:09] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:23:16] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:23:33] <tomjaguarpaw> parse . pretty . parse == parse  and  pretty . parse . pretty == pretty  are stronger conditions than idempotency.  That's what I've used in the past.
[15:23:51] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:25:56] * ski . o O ( <https://en.wikipedia.org/wiki/Pseudo-inverse> )
[15:27:27] * polyphem likes skis think bubble notation
[15:29:08] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[15:29:46] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:32:20] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[15:32:44] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf)
[15:34:32] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:35:16] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Remote host closed the connection)
[15:37:47] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[15:38:00] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[15:38:39] *** Quits: ubert1 (~Thunderbi@p200300ecdf0994bb4b7b6c6de4b2c475.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[15:38:47] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[15:39:02] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Remote host closed the connection)
[15:41:19] <zzz> where can i get a searchable list of compiler warnings?
[15:41:44] <dminuoso> The user manual
[15:41:50] <dminuoso> https://downloads.haskell.org/~ghc/9.0.1/docs/html/users_guide/using-warnings.html
[15:42:21] <zzz> i remeber there being a command (?)
[15:42:26] <geekosaur> there's also a llist of all compiler options which includes all the warning options
[15:43:18] <geekosaur> ghc --show-options ?
[15:43:51] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[15:44:43] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[15:45:53] <zzz> that was it!
[15:46:14] <zzz> so there's no warning for the use of undefined?
[15:46:17] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[15:46:44] <geekosaur> none that I'm aware of
[15:49:22] <zzz> sometimes i fill my code with undefineds and progressively turn them into "defined" code. i was hoping there was a way for the compiler to keep warning me while i still have one or more undefined, in case i forget some
[15:49:34] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[15:50:04] <polyphem> grep -R undefined ?
[15:50:14] <geekosaur> search in an editor (or grep) is generally good for that
[15:50:38] <zzz> polyphem: that's what i'm doing now
[15:50:44] *** Joins: fef (~thedawn@user/thedawn)
[15:50:45] <geekosaur> I also do things like `(...) = undefined` and then search for uses of that
[15:50:52] <geekosaur> it stands out more
[15:51:08] <geekosaur> and to me reads somewhat better than undefined
[15:51:16] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:53:03] *** Joins: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt)
[15:55:33] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[15:57:07] <zzz> somewhat related question: is there something keeping the type system from detecting if something has type `:: forall a. a` and wouldn't this be iseful for some kind of "bottomlessness check (modulo some infinite recursion?)
[15:57:30] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[15:58:12] <zzz> by detecting i mean warning if there is any possibility of your program evaluating some value :: a
[15:58:49] <geekosaur> but that also rules out useful things like
[15:58:52] <geekosaur> :t forever
[15:58:53] <lambdabot> Applicative f => f a -> f b
[15:59:55] <zzz> the f is constrained, that would be fine
[16:01:24] <polyphem> :t id
[16:01:24] <lambdabot> a -> a
[16:02:32] <zzz> i'm talking specifically about `:: forall a. a`
[16:03:01] <zzz> hence the "modulo some infinite recursion"
[16:03:43] <lortabac> zzz: instead of using undefined, you can use _ and get a warning
[16:03:50] <ski> @type \(v :: Void) -> case v of {}
[16:03:51] <lambdabot> Void -> p
[16:04:40] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[16:04:57] *** Joins: tubogram4 (~tubogram@user/tubogram)
[16:05:09] <zzz> > (\(v :: Void) -> case v of {}) Void
[16:05:11] <lambdabot>  error:
[16:05:11] <lambdabot>      • Data constructor not in scope: Void :: Void
[16:05:11] <lambdabot>      • Perhaps you meant one of these:
[16:05:29] *** Quits: tubogram4 (~tubogram@user/tubogram) (Client Quit)
[16:05:33] <zzz> > data Void; (\(v :: Void) -> case v of {}) Void
[16:05:35] <lambdabot>  <hint>:1:1: error: parse error on input ‘data’
[16:05:51] <dminuoso> zzz: Based on my sketchy understanding, I think it'd be very hard to special case that in.
[16:06:18] <zzz> how do i get lambdabot to do this?
[16:06:24] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[16:06:30] <dminuoso> @let data Void
[16:06:31] <lambdabot>  Defined.
[16:06:38] <dminuoso> > (\(v :: Void) -> case v of {}) Void
[16:06:40] <lambdabot>  error:
[16:06:40] <lambdabot>      Ambiguous occurrence ‘Void’
[16:06:40] <lambdabot>      It could refer to
[16:06:50] <dminuoso> @let data MyVoid
[16:06:51] <lambdabot>  Defined.
[16:06:58] <dminuoso> Now what?
[16:07:16] <zzz> > data Void; (\(v :: MyVoid) -> case v of {}) MyVoid
[16:07:18] <lambdabot>  <hint>:1:1: error: parse error on input ‘data’
[16:07:26] <zzz> > (\(v :: MyVoid) -> case v of {}) MyVoid
[16:07:26] *** Joins: tubogram4 (~tubogram@user/tubogram)
[16:07:28] <lambdabot>  error:
[16:07:28] <lambdabot>      • Data constructor not in scope: MyVoid :: MyVoid
[16:07:28] <lambdabot>      • Perhaps you meant variable ‘_Void’ (imported from Control.Lens)
[16:07:37] <zzz> ah
[16:07:41] * zzz facepalms
[16:07:53] <geekosaur> I thought the point of (My)Void was that there were no data constructors forit?
[16:07:56] <geekosaur> therefore no values
[16:08:21] <geekosaur> I think the _ suggestion (unannotated typed hole) was probably best
[16:08:32] <polyphem> :t Proxy :: Void
[16:08:32] <lambdabot> error:
[16:08:33] <lambdabot>     Ambiguous occurrence ‘Void’
[16:08:33] <lambdabot>     It could refer to
[16:08:48] *** Joins: xkuru (~xkuru@user/xkuru)
[16:09:05] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[16:09:12] <dminuoso> zzz: For what its worth, in my experience what creates *far* more bottoms than undefined, is `read`.
[16:09:14] <geekosaur> :t Proxy :: MyVoid -- don't think this works
[16:09:15] <lambdabot> error:
[16:09:15] <lambdabot>     • Couldn't match expected type ‘MyVoid’ with actual type ‘Proxy t0’
[16:09:15] <lambdabot>     • In the expression: Proxy :: MyVoid
[16:09:34] <geekosaur> :t Proxy :: Proxy MyVoid -- this does but isn't what was asked
[16:09:35] <lambdabot> Proxy MyVoid
[16:09:40] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[16:09:50] <polyphem> yep
[16:10:06] <dminuoso> `read` tends to look so innocent, and if thats hidden inside some library, this can cause issues in the entire transitive dependency graph
[16:12:12] <zzz> ok i see
[16:12:21] *** Quits: tubogram4 (~tubogram@user/tubogram) (Quit: See ya later!)
[16:12:54] <dminuoso> Something like `undefined` can easily be addressed by git hooks or perhaps a linter
[16:13:11] <dminuoso> Or maybe your editor has some tooling for that as well
[16:13:21] *** Joins: nunggu (~q@user/nunggu)
[16:13:24] *** Joins: tubogram4 (~tubogram@user/tubogram)
[16:13:41] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[16:14:50] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:17:50] <lortabac> zzz: in alternative you can define your own undefined with a custom warning
[16:17:57] <lortabac> classy-prelude does it
[16:18:57] <lortabac> but I think _ is the best way to declare unfinished pieces of code
[16:24:47] *** Joins: Pickchea (~private@user/pickchea)
[16:27:12] *** Quits: jespada (~jespada@87.74.36.188) (Quit: Textual IRC Client: www.textualapp.com)
[16:29:30] *** Joins: kanin (~kanin@2409:8a14:10e7:52d0:e868:e5f3:fdc5:9fd)
[16:30:31] *** Quits: kanin (~kanin@2409:8a14:10e7:52d0:e868:e5f3:fdc5:9fd) (Max SendQ exceeded)
[16:30:58] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[16:31:00] *** Joins: kanin (~kanin@2409:8a14:10e7:52d0:e868:e5f3:fdc5:9fd)
[16:31:21] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[16:31:39] *** denbrahe[m] is now known as denbrahe
[16:34:35] *** Quits: max22- (~maxime@2a01cb08833598003a5001b0ea2a052d.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[16:34:35] *** Quits: denbrahe (~denbrahem@2001:470:69fc:105::19c0) (Quit: Reconnecting)
[16:39:20] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[16:39:40] *** Joins: kmein (~weechat@user/kmein)
[16:40:55] *** Joins: fendor_ (~fendor@77.119.199.145.wireless.dyn.drei.com)
[16:43:54] *** Quits: fendor (~fendor@77.119.174.56.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[16:46:50] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:47:44] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:50:30] *** Quits: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt) (Ping timeout: 250 seconds)
[16:55:07] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:55:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[16:57:32] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[16:58:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:02:54] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:3c42:1d7a:5c49:19d9) (Remote host closed the connection)
[17:03:18] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:f12b:1b26:c11c:e722)
[17:03:45] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[17:07:44] *** Joins: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt)
[17:08:27] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[17:10:08] *** Joins: andreabedini (~andreabed@8s8kj6nj5000h5zkmpxr.ip6.superloop.com)
[17:15:49] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:f12b:1b26:c11c:e722) (Quit: Leaving)
[17:16:06] *** Joins: ph88 (~ph88@95.90.247.31)
[17:16:57] *** Quits: Megant (megant@user/megant) (Ping timeout: 240 seconds)
[17:18:25] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[17:19:05] *** Joins: Megant (megant@user/megant)
[17:22:35] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[17:24:31] *** Joins: intersec1 (~ivoolivei@a109-50-190-38.cpe.netcabo.pt)
[17:24:35] *** Quits: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt) (Read error: No route to host)
[17:25:13] <unclechu> Hey, does anyone has any idea why names of the property tests are snake_cased?
[17:25:28] <unclechu> https://hackage.haskell.org/package/QuickCheck-2.14.2/docs/Test-QuickCheck.html
[17:25:30] <unclechu> https://hackage.haskell.org/package/hedgehog-1.0.5/docs/Hedgehog.html
[17:25:32] <unclechu> Two examples
[17:25:51] <unclechu> “prop_reverse” for instance
[17:26:01] <maerwald> does that bother you?
[17:26:28] <geekosaur> possibly to help avoid collision with exported functions
[17:26:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Ping timeout: 240 seconds)
[17:26:44] <geekosaur> in any case it's just convention, not a requirement
[17:27:33] <unclechu> geekosaur Okay, but the convention actually is? What’s the point of doing it?
[17:27:48] <unclechu> What the convention actually is*
[17:28:07] <geekosaur> how would I know? I'm not the author of either
[17:28:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:30:50] *** Quits: akegalj (~akegalj@141-136-245-236.dsl.iskon.hr) (Quit: Lost terminal)
[17:31:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:31:40] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[17:33:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:33:18] <merijn> quickcheck can auto detect tests starting with prop_ I think?
[17:33:44] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[17:33:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:34:51] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[17:35:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:36:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:37:16] <tomsmeding> indeed
[17:37:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:37:49] <tomsmeding> using what I now see is, ahem, slightly hacky code
[17:37:56] <tomsmeding> https://hackage.haskell.org/package/QuickCheck-2.14.2/docs/src/Test.QuickCheck.All.html#allProperties
[17:38:18] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[17:38:29] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:39:29] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) (Ping timeout: 252 seconds)
[17:40:03] *** Joins: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net)
[17:40:03] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:41:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:42:36] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:42:41] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[17:43:14] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[17:43:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:43:31] *** Quits: andreabedini (~andreabed@8s8kj6nj5000h5zkmpxr.ip6.superloop.com) (Quit: WeeChat 3.3)
[17:44:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:45:11] *** Joins: max22- (~maxime@2a01cb08833598002ebd2aed9b6751c0.ipv6.abo.wanadoo.fr)
[17:45:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:47:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:48:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:49:37] *** Quits: max22- (~maxime@2a01cb08833598002ebd2aed9b6751c0.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[17:49:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:50:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:51:05] *** Joins: RFV (~Thunderbi@49.red-88-12-220.dynamicip.rima-tde.net)
[17:51:36] *** Joins: fef (~thedawn@user/thedawn)
[17:51:55] *** Quits: RFV (~Thunderbi@49.red-88-12-220.dynamicip.rima-tde.net) (Client Quit)
[17:52:18] *** Quits: Major_Biscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 260 seconds)
[17:52:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:53:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:55:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:56:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:56:34] *** Quits: mncheckm (~mncheck@193.224.205.254) (Quit: Leaving)
[17:57:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:57:51] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[17:58:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:00:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:01:19] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[18:01:25] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:01:52] *** Joins: coot (~coot@213.134.190.95)
[18:02:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:04:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:05:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:06:01] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:06:01] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:06:01] *** Joins: wroathe (~wroathe@user/wroathe)
[18:06:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:08:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:08:49] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[18:09:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:10:26] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[18:10:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:11:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:13:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:14:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:15:50] *** Joins: jkaye (~jkaye@2601:281:8300:7530:ca78:9af1:544b:8917)
[18:16:04] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:16:40] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[18:17:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:17:17] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[18:17:34] <kuribas> hmm, any language which has list comprehension has monad syntax...
[18:17:49] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[18:18:29] <kuribas> So if someone claims monads aren't useful, you can point them to this fact.
[18:18:41] *** Quits: imalsogreg (~imalsogre@c-73-172-114-3.hsd1.md.comcast.net) (Remote host closed the connection)
[18:18:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:19:18] <romesrf> kuribas: how is list comprehension is monad syntax?
[18:19:57] <geekosaur> @undo [ x + 5 | x <- xs ]
[18:19:57] <lambdabot> concatMap (\ x -> [x + 5]) xs
[18:20:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:20:25] <geekosaur> now remember that concatMap is =<< for lists
[18:20:28] <kuribas> romesrf: [(x, y) | x <- [1..3], y <- [4..6]] => do x <- [1..3]; y <- [4..6]; pure (x,  y)
[18:20:31] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[18:20:52] <kuribas> romesrf: in fact, you can turn list comprehensions into monads using a syntax extension.
[18:20:55] <kuribas> in ghc
[18:21:23] <kuribas> well, generalize the syntax more precisely...
[18:21:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:22:17] <dminuoso> kuribas: I believe that one of the primary problems with monads is the imprecise use of the word.
[18:22:30] <dminuoso> Like you just excercised
[18:22:45] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5)
[18:22:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:22:55] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[18:23:06] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[18:23:33] <dminuoso> Monad in Haskell is not just useful not because it happens to match things we do, but because we can write generalize over it.
[18:23:46] <dminuoso> The power of "Monad" only happens precisely when you are able to write something akin to: f :: Monad m => ...
[18:23:52] <dminuoso> That is, something that is polymorphic over *any* such thinig.
[18:24:09] <dminuoso> Monoids are not useful because we can add numbers together, but because they give us a generalized tool.
[18:24:24] <romesrf> geekosaur: that's a great explanation :)
[18:24:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:24:38] <romesrf> or rather a great example
[18:24:53] <romesrf> that showcases it exactly =)
[18:25:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:25:35] <kuribas> dminuoso: sure.  I just mean that people who claim they don't need monads, already use them.
[18:25:47] <dminuoso> "need monads", "use them"
[18:25:54] * geekosaur considers posting the sigfpe link again
[18:25:58] <dminuoso> This I think is terribly confusing.
[18:26:03] <geekosaur> "you could have invented monads"
[18:26:05] <romesrf> geekosaur: what is sigfpe?
[18:26:10] <dminuoso> A monad is not something you "have" or "use"
[18:26:14] <dminuoso> Or rather
[18:26:15] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:26:23] <kuribas> romesrf: floating point exception.
[18:26:31] <geekosaur> http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html
[18:26:42] <romesrf> hahah
[18:26:48] *** Quits: sweater (~sweater@206.81.18.26) (Quit: WeeChat 2.8)
[18:27:04] *** Joins: sweater (~sweater@206.81.18.26)
[18:27:08] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:27:12] *** Quits: sweater (~sweater@206.81.18.26) (Client Quit)
[18:27:21] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[18:27:41] *** Joins: imalsogreg (~imalsogre@2601:147:300:f930::ee17)
[18:28:03] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:28:18] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 276 seconds)
[18:28:42] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[18:29:23] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Read error: Connection reset by peer)
[18:29:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:30:01] <romesrf> i was wondering what IRC client you use
[18:30:14] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:30:22] <romesrf> i have to reconfigure weechat to make all these join/leave messages better
[18:30:33] <geekosaur> I use hexchat
[18:30:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:30:42] <geekosaur> but I choose to track all the joins/parts
[18:30:55] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[18:30:58] <geekosaur> I could turn them off but there are enough times when I need to know, so
[18:31:33] <geekosaur> (among other things, I'm a channel admin)
[18:32:03] <romesrf> oh! got it
[18:32:15] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:33:09] *** Quits: WhateverRabbit (~rabbit@206.81.18.26) (Quit: WeeChat 2.8)
[18:33:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:33:40] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[18:34:01] *** Joins: sweater (~sweater@206.81.18.26)
[18:34:04] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[18:34:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:35:41] *** Joins: coot (~coot@213.134.190.95)
[18:35:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:37:06] *** Quits: polyphem (~rod@2a02:810d:840:8754:ab25:19d5:5fa5:69d5) (Ping timeout: 250 seconds)
[18:37:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:38:12] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[18:38:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:38:30] <dminuoso> I need some guidance. I have a powerdns binding library, and inside I expose a `data RRSet = RRSet { rrset_name :: T.Text, ... }`. Now the DNS standards require limited case-insensitivity (case folding on the ASCII-subset of bytes) on nameserver and recursor implementations do  limited case-insensitivity.
[18:38:42] <dminuoso> Do I implement that same case insensitivity on the Eq instance of RRSet?
[18:38:55] <dminuoso> (Which is essentially just a data structure to read/write DNS records with)
[18:39:51] <merijn> dminuoso: There's a case-insensitivity newtype for text
[18:40:04] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:40:06] <dminuoso> merijn: Which would be incorrect, even.
[18:40:26] <dminuoso> I need a limited case insensitivity which is only insensitive on the code points in the ASCII subset
[18:40:32] <dminuoso> But not insensitive on the rest
[18:40:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:41:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:42:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:43:42] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:44:49] <geekosaur> I'm confused. isn't the only way to get stuff outside the ASCII subset punycode?
[18:44:51] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:45:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:45:30] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[18:45:43] <dminuoso> geekosaur: No, DNS names themselves can be arbitrary bytestrings with just some limitations on their length.
[18:46:14] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:46:49] <imalsogreg> dminuoso: It looks like the case-insensivite package implements the type of case insensitivity you want? https://hackage.haskell.org/package/case-insensitive-1.2.1.0/docs/src/Data.CaseInsensitive.Internal.html#foldCase So you could wrap `rrset_name` in the `CI` constructor if you want RRsets to compare case-insensitively.
[18:47:24] *** Quits: dfg (dfg@user/dfg) (Quit: I hate quit messages.)
[18:47:26] <dminuoso> imalsogreg: Nope, definitely not correct.
[18:47:33] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:47:40] *** Joins: dfg (dfg@dfg.rocks)
[18:47:40] *** Quits: dfg (dfg@dfg.rocks) (Changing host)
[18:47:40] *** Joins: dfg (dfg@user/dfg)
[18:47:42] <dminuoso> imalsogreg: That would at minimum also casefold latin supplement characters
[18:47:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:47:54] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[18:47:55] <dminuoso> Which would be non-conforming to DNS RFCs
[18:48:10] <dminuoso> I mean rolling this myself is not a big deal
[18:48:17] <dminuoso> Im merely wondering whether RRSet *should* receive that treatment
[18:48:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:49:12] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:49:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:49:30] *** Joins: Major_Biscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[18:49:41] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:49:45] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[18:50:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:50:32] <imalsogreg> dminuoso: Will you be writing `foo :: RSSet == bar :: RSSet` a lot - and would  you want equality to "mean" equality according to the DNS spec?
[18:51:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:51:48] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[18:52:46] <dminuoso> geekosaur: The story behind punycode is a bit bizarre, in principle we don't actually need it. My best guess so far is that it exists because plenty software only accepts letter-hyphen-digit-undercore in domain names
[18:52:56] <dminuoso> say mail clients or servers
[18:53:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:54:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:55:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:56:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:57:20] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:57:29] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:57:29] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:57:29] *** Joins: wroathe (~wroathe@user/wroathe)
[18:57:55] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[18:58:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:58:22] *** Joins: polyphem (~rod@2a02:810d:840:8754:2622:b61:ec32:bf43)
[18:59:21] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[18:59:24] *** Quits: imalsogreg (~imalsogre@2601:147:300:f930::ee17) ()
[18:59:25] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:01:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:01:23] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[19:01:48] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[19:01:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[19:02:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:02:39] *** Joins: dsrt^ (~dsrt@50.231.5.242)
[19:03:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:03:51] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[19:04:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:04:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[19:06:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:06:33] *** sajith_ is now known as sajith
[19:07:26] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:09:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:09:05] *** Joins: mncheck (~mncheck@193.224.205.254)
[19:10:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:11:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:11:50] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[19:12:08] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[19:12:23] *** Joins: raym (~raym@user/raym)
[19:12:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:14:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:15:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:15:49] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[19:17:15] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:17:58] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[19:18:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:19:10] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[19:19:27] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[19:20:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:21:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:22:11] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[19:22:24] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[19:22:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:23:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:24:07] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[19:24:19] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[19:25:00] *** Quits: Ocelot (~ocelot@50-78-208-189-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[19:25:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:26:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:26:56] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 250 seconds)
[19:28:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:29:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:29:42] *** Quits: mbuf (~Shakthi@223.190.239.151) (Quit: Leaving)
[19:30:02] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:34:10] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[19:34:46] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:35:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[19:38:23] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[19:40:30] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[19:40:32] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[19:40:33] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[19:41:30] *** Quits: xff0x (~xff0x@2001:1a81:523c:5300:707e:bf72:dc84:30f7) (Ping timeout: 268 seconds)
[19:41:54] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[19:43:14] *** Quits: nek0 (~nek0@nek0.eu) (Quit: The Lounge - https://thelounge.chat)
[19:45:33] *** Joins: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net)
[19:48:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:48:50] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:49:04] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[19:49:24] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[19:49:45] *** Joins: kmein (~weechat@user/kmein)
[19:49:50] *** Quits: yauhsien (~yauhsien@61-231-17-3.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[19:49:57] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[19:51:48] *** Quits: kmein (~weechat@user/kmein) (Client Quit)
[19:52:07] *** Joins: kmein (~weechat@user/kmein)
[19:52:40] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:2912:7d04:4a3c:64d7) (Quit: WeeChat 2.8)
[19:54:19] *** Quits: cosimone (~user@93-44-184-251.ip98.fastwebnet.it) (Remote host closed the connection)
[19:54:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[19:54:51] *** Joins: nek0 (~nek0@nek0.eu)
[19:54:58] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[19:55:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:55:39] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[19:55:41] *** Joins: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt)
[19:56:20] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[19:56:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:56:42] *** Joins: max22- (~maxime@2a01cb0883359800f8f9901a67fcc4eb.ipv6.abo.wanadoo.fr)
[19:57:15] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[19:57:37] *** Quits: ptrcmd (~ptrcmd@user/ptrcmd) (Remote host closed the connection)
[19:58:02] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[19:58:17] *** Quits: intersec1 (~ivoolivei@a109-50-190-38.cpe.netcabo.pt) (Ping timeout: 240 seconds)
[19:59:00] *** Quits: kanin (~kanin@2409:8a14:10e7:52d0:e868:e5f3:fdc5:9fd) (Ping timeout: 250 seconds)
[19:59:35] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[20:00:45] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:4184:bb26:81f2:501e)
[20:03:29] *** Joins: xff0x (~xff0x@2001:1a81:523c:5300:707e:bf72:dc84:30f7)
[20:04:39] <segfaultfizzbuzz> this question is well beyond what i understand of programming (probably)... but is threading fairly equivalent to labeling of type linearity?
[20:05:37] <romesrf> what is 'threading'?
[20:05:42] <segfaultfizzbuzz> meaning, if i had a program with linear types, would the compiler be able to infer how to multithread the application and how to divide work amongst the threads
[20:05:56] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 250 seconds)
[20:06:07] *** Joins: sha296 (~shakil@2409:4060:2e16:5922:8869:e019:69d0:c4b8)
[20:06:21] <segfaultfizzbuzz> this program would not explicitly create or destroy threads, the compiler or runtime would handle all of that
[20:06:46] <romesrf> at the moment, linear types are a construct purely on the type system, there are no automatic compiler optimizations - not meaning there couldn't be
[20:06:58] <segfaultfizzbuzz> my question is theoretical, not practical
[20:08:07] <romesrf> (just linking to what i said above: https://gitlab.haskell.org/ghc/ghc/-/wikis/linear-types)
[20:08:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:08:34] <merijn> segfaultfizzbuzz: Realistically, auto-parallelisation is still a pipe dream
[20:08:44] <merijn> Even in languages where the compiler has the knowledge to do it
[20:09:04] <merijn> Most projects attempting it turn out to perform fairly badly, compared to hand done stuff
[20:09:15] <segfaultfizzbuzz> my question is slightly more practical than that, i think--if i am threading things, what am i doing beyond annotating linearity
[20:09:27] <segfaultfizzbuzz> i suppose there is some kind of task chunking/granularization annotation
[20:09:52] <segfaultfizzbuzz> merijn: sounds like a great research topic, then ;-)
[20:10:09] <romesrf> ^^ahaha
[20:10:10] <segfaultfizzbuzz> unless you think people will defeat computers at go ;-)
[20:10:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:13:09] <romesrf> segfaultfizzbuzz: so i'm giving what you said some thought. first I would put things on different terms:
[20:13:09] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:13:37] <geekosaur> it's been a great research topic for a couple decades now, I think
[20:14:20] <romesrf> is threading "fairly equivalent" to lableing linearity: I would think in terms of can we create threaded programs based on linear types
[20:14:46] <romesrf> because one thing is a type level concept, and the other is a well... "hardware" level concept
[20:14:49] <segfaultfizzbuzz> because it seems like a thread is an annotation of like locality and flow of data read/write ...?
[20:14:51] <romesrf> geekosaur: linear types?
[20:14:58] <geekosaur> autothreading
[20:15:01] <romesrf> i see
[20:15:07] *** Quits: sha296 (~shakil@2409:4060:2e16:5922:8869:e019:69d0:c4b8) (Quit: Leaving)
[20:15:42] <romesrf> i wrote some research on linear types so i thought you meant that :P
[20:15:54] <romesrf> autothreading does sound cool
[20:16:04] *** Joins: kmein_ (~weechat@user/kmein)
[20:16:51] <romesrf> but stuff like the parallell library with the `using` parallel strategy isn't some sort of autothreading? (even though it's (i assume) written specifically in the library?)
[20:17:01] <romesrf> manually*
[20:17:38] <geekosaur> you still need manual annotations with it, plus you need to know which sparks will compute and which will fizzle
[20:17:46] <geekosaur> which generally requires experimentation
[20:19:32] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 240 seconds)
[20:19:32] *** Quits: kmein (~weechat@user/kmein) (Ping timeout: 252 seconds)
[20:20:28] <romesrf> segfaultfizzbuzz: a thread as an annotation of locality and flow of data read/write--could you elaborate?
[20:20:40] <romesrf> i'm trying to create some thoughts on it
[20:20:57] *** Quits: flipchan (~filip@user/flipchan) (Ping timeout: 240 seconds)
[20:21:26] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Read error: Connection reset by peer)
[20:22:05] <geekosaur> seems to me that linearity tells you which parts *can't* thread, but gives you no help in the hard part which is which parts *can* productively be threaded
[20:22:19] <geekosaur> "productively" being the key word
[20:24:43] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[20:25:15] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:25:15] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:25:15] *** Joins: wroathe (~wroathe@user/wroathe)
[20:25:24] *** Joins: kanin (~kanin@2409:8a14:10e7:fa80:94e5:9c21:2378:713)
[20:25:26] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[20:25:26] *** Quits: kanin (~kanin@2409:8a14:10e7:fa80:94e5:9c21:2378:713) (Remote host closed the connection)
[20:25:26] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[20:27:25] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[20:29:38] *** Joins: Erutuon (~Erutuon@user/erutuon)
[20:30:01] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Remote host closed the connection)
[20:32:57] *** Quits: ph88 (~ph88@95.90.247.31) (Ping timeout: 240 seconds)
[20:33:27] *** Joins: CHUD (~CHUD@edu7879.kent.ac.uk)
[20:35:06] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[20:37:31] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:54bc:3778:6db0:347c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:37:48] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:39:06] *** Joins: jao (~jao@static-68-235-44-73.cust.tzulo.com)
[20:39:22] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:39:26] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:42:52] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[20:43:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:45:44] <monochrom> I thought programming since day one was already annotation of locality and sequentiality (sometimes "linear" just means "sequential").
[20:46:19] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:46:52] <segfaultfizzbuzz> romesf: i mean, if we know how information flows through a program then you know where to localize things right?
[20:46:55] <monochrom> Talking about threads (and all parallelism and concurrency constructs) instead acknowledges that reality is more sophisticated than sequential PDP-11.
[20:47:44] <segfaultfizzbuzz> monochrom: that's deep, programming is annotation of locality and sequentiality.
[20:48:08] <monochrom> Alternatively, it's tautological.
[20:48:30] *** Joins: ptrcmd (~ptrcmd@user/ptrcmd)
[20:48:32] *** Quits: d0ku (~d0ku@178.43.12.98.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[20:48:50] *** Quits: Major_Biscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 250 seconds)
[20:49:01] <geekosaur> sometimes the tautologies sound really deep :)
[20:49:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:50:48] <monochrom> I might have to credit my observation to Hoare actually.
[20:51:34] <monochrom> When Hoare worked on parallelism and concurrency, he named his system "communicating sequential processes" (CSP).
[20:52:14] <monochrom> The idea is that maybe thinking about and using unlimited unstructured concurrency is too hard.
[20:52:22] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:52:22] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:52:22] *** Joins: wroathe (~wroathe@user/wroathe)
[20:53:07] <geekosaur> that fails to surprise me
[20:53:40] *** Joins: thomas_ (~thomas@2a02:a03f:666e:c500:92eb:d341:15bc:3f3d)
[20:53:44] <geekosaur> humans have far too little working memory for such tasks
[20:53:52] <monochrom> So how about limiting to this structure: you have many sequential programs. In each program you can still think sequentially, as in the 1960s. You just now acknowledge that there are other sequential programs too, and that once in a while they have to talk or synchronize.
[20:54:09] <geekosaur> (I run into limits on mine regularly — and from observation I think I have a bit more working memory than usual)
[20:54:44] <monochrom> The biggest irony and wisdom is that the name of a concurrent system contains the word "sequential" and no mention of "parallel" or "concurrent" or "side by side" or whatever.
[20:55:09] <geekosaur> "communicating" does imply it though
[20:55:17] <monochrom> Yes, but it's very indirect.
[20:55:25] <geekosaur> although I guess it could mean sequential coprocesses
[20:55:35] <monochrom> You show this name to an English major, they will never guess.
[20:57:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[20:57:48] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[20:58:45] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:58:47] *** Quits: thevishy (~Nishant@2405:201:f005:c007:4ce:a391:7558:6be8) (Quit: Leaving)
[20:59:32] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[20:59:48] <monochrom> It is also very appealing algebraically. You now have two monoids. The old monoid (since day one) of sequential composition. The new monoid of parallel composition.
[21:01:19] *** Quits: max22- (~maxime@2a01cb0883359800f8f9901a67fcc4eb.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[21:02:13] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[21:02:32] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[21:02:49] <segfaultfizzbuzz> why is it "too hard" to have unlimited unstructured concurrency?
[21:03:04] <EvanR> try to interpret quantum mechanics
[21:03:11] <EvanR> just kidding, don't try
[21:03:14] <segfaultfizzbuzz> in other words why not make the minimum assertions about what you need to do and let the computer/compiler figure out how to do everything
[21:03:51] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:04:39] <EvanR> (actually a model of the real world would be more structured and limited than unlimited unstructed concurrency)
[21:04:40] <segfaultfizzbuzz> i can barely do one floating point calculation. in fact, i'm not sure i could do a single floating point calculation without error in less than like an hour
[21:05:12] <segfaultfizzbuzz> we are starting to talk about machines which can do petaflops
[21:05:17] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:9d39:f8e3:aac8:5b1b) (Ping timeout: 240 seconds)
[21:05:18] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 250 seconds)
[21:05:31] <EvanR> yeah they really doubled down on the things they can do fast
[21:05:59] <EvanR> it's unfortunate that's floats xD
[21:06:09] <segfaultfizzbuzz> haha okay, then int64 multiplication if you like
[21:07:32] <EvanR> complexity theory is all about what you could hope to get done doing some simple task over and over as fast as you can
[21:07:51] *** Joins: RFV (~Thunderbi@49.red-88-12-220.dynamicip.rima-tde.net)
[21:08:20] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:211a:2c49:de73:b7e4)
[21:08:25] <segfaultfizzbuzz> anyway sorry to distract: so it is true then that threads are locality and sequentiality annotations (and that's either it, or pretty much it)?
[21:08:30] *** Quits: zeenk (~zeenk@2a02:2f04:a208:c500:649e:b5e2:d15c:7960) (Quit: Konversation terminated!)
[21:08:38] <EvanR> if the idea is to have the computer do some exponentially complex task it doesn't matter how fast you can multiply
[21:08:58] <segfaultfizzbuzz> i mostly don't like complexity theory, it is obsessed with perfectly correct results
[21:09:11] <segfaultfizzbuzz> and doesn't incorporate the realities of distributions and knowledge about distributions
[21:09:33] <segfaultfizzbuzz> sometimes perfectly correct results are necessary but frequently they are not in order to perform some kind of reasoning
[21:09:34] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:211a:2c49:de73:b7e4) (Client Quit)
[21:09:59] <segfaultfizzbuzz> i would say more often than not perfect reasoning is unnecessary. that's probably why our minds reason imperfectly
[21:10:08] <EvanR> targeted controlled incorrectness? xD like interval analysis or something
[21:10:42] <segfaultfizzbuzz> probably the reverse, correctness annotation or something
[21:11:56] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:f12b:1b26:c11c:e722)
[21:14:40] *** Joins: fef (~thedawn@user/thedawn)
[21:16:21] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:17:44] *** Quits: RFV (~Thunderbi@49.red-88-12-220.dynamicip.rima-tde.net) (Quit: RFV)
[21:20:38] *** Joins: Akiva (~Akiva@user/Akiva)
[21:21:49] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[21:23:32] *** Quits: pottsy (~pottsy@129.227.183.244) (Ping timeout: 250 seconds)
[21:24:18] *** Joins: pottsy (~pottsy@129.227.183.244)
[21:24:51] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:28:28] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[21:28:57] *** Quits: thomas_ (~thomas@2a02:a03f:666e:c500:92eb:d341:15bc:3f3d) (Ping timeout: 240 seconds)
[21:30:12] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[21:32:07] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[21:33:06] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:34:40] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[21:35:05] *** Quits: dsrt^ (~dsrt@50.231.5.242) (Remote host closed the connection)
[21:35:22] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:35:22] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:35:22] *** Joins: wroathe (~wroathe@user/wroathe)
[21:36:39] *** Joins: WhateverRabbit (~rabbit@206.81.18.26)
[21:37:03] *** Quits: CHUD (~CHUD@edu7879.kent.ac.uk) (Ping timeout: 256 seconds)
[21:37:23] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[21:38:28] *** Quits: intersect (~ivoolivei@a109-50-190-38.cpe.netcabo.pt) (Quit: Lost terminal)
[21:39:57] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 240 seconds)
[21:40:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[21:42:05] *** Joins: thomas_ (~thomas@2a02:a03f:666e:c500:92eb:d341:15bc:3f3d)
[21:42:06] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[21:42:24] *** Joins: ravella (~ravella@user/ryanavella)
[21:43:26] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[21:43:38] *** Quits: thomas_ (~thomas@2a02:a03f:666e:c500:92eb:d341:15bc:3f3d) (Client Quit)
[21:45:30] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[21:45:40] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[21:45:53] *** Joins: haask (~askham@user/haask)
[21:46:35] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[21:46:54] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 250 seconds)
[21:50:59] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[21:53:29] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[21:58:08] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[21:58:10] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Ping timeout: 250 seconds)
[21:58:48] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:58:52] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e)
[22:02:33] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[22:02:35] *** Joins: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk)
[22:03:04] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[22:04:58] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:09:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:11:43] *** Joins: econo (uid147250@user/econo)
[22:12:40] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:13:06] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:16:05] *** Quits: haask (~askham@user/haask) (Remote host closed the connection)
[22:16:31] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[22:18:52] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[22:21:08] *** Quits: lionhairdino (~jacoo@121.131.39.82) (Ping timeout: 250 seconds)
[22:21:20] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[22:21:42] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[22:22:08] *** Joins: coot (~coot@213.134.190.95)
[22:22:51] *** Joins: neceve (~quassel@2.26.93.228)
[22:22:52] *** Quits: coot (~coot@213.134.190.95) (Read error: Connection reset by peer)
[22:23:06] *** Joins: coot (~coot@213.134.190.95)
[22:25:03] *** Joins: alp (~alp@user/alp)
[22:29:46] *** Joins: Akiva (~Akiva@user/Akiva)
[22:34:00] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[22:34:32] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[22:35:50] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:37:58] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:38:14] *** Quits: alp (~alp@user/alp) (Read error: Connection reset by peer)
[22:38:34] *** Joins: alp (~alp@user/alp)
[22:39:55] *** Quits: jkaye (~jkaye@2601:281:8300:7530:ca78:9af1:544b:8917) (Quit: Leaving)
[22:51:13] *** Joins: dsrt^ (~dsrt@50.231.5.242)
[22:52:47] *** Joins: vicfred (~vicfred@user/vicfred)
[22:56:37] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 240 seconds)
[23:01:55] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[23:08:48] *** Quits: dsrt^ (~dsrt@50.231.5.242) (Ping timeout: 250 seconds)
[23:09:18] *** Joins: dsrt^ (~dsrt@50.231.5.242)
[23:10:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41be:eda7:26bd:771e) (Remote host closed the connection)
[23:10:25] *** Joins: briandaed (~root@185.234.208.208.r.toneticgroup.pl)
[23:13:04] *** Joins: ymirhotfoot (~ymirhotfo@user/ymirhotfoot)
[23:14:35] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[23:14:55] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:17:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:19:10] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[23:19:29] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:19:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:22:37] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[23:24:08] *** Joins: neurocyte0917090 (~neurocyte@IP-195080053136.dynamic.medianet-world.de)
[23:24:08] *** Quits: neurocyte0917090 (~neurocyte@IP-195080053136.dynamic.medianet-world.de) (Changing host)
[23:24:08] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:24:09] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[23:24:54] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:32:19] *** Parts: ymirhotfoot (~ymirhotfo@user/ymirhotfoot) ()
[23:32:35] *** Joins: MoC (~moc@user/moc)
[23:32:40] *** Joins: haskellb1 (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[23:34:45] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:34:57] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:35:51] *** Joins: leibniz (~leibniz@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[23:37:19] *** Joins: juhp (~juhp@128.106.188.82)
[23:39:27] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[23:43:41] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[23:44:10] *** Joins: coot (~coot@213.134.190.95)
[23:46:31] *** Joins: dextaa_ (~dextaa@217.61.225.120)
[23:47:26] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 260 seconds)
[23:48:37] *** Quits: coot (~coot@213.134.190.95) (Ping timeout: 240 seconds)
[23:48:57] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[23:51:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[23:52:20] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[23:58:32] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[23:58:42] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
