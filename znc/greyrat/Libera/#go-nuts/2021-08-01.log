[00:00:35] *** Guest4286 is now known as hentai
[00:00:58] *** Quits: independent56 (~independe@85.255.235.132) (Ping timeout: 240 seconds)
[00:06:57] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[00:06:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[00:07:23] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[00:14:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[00:15:13] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[00:15:15] *** Quits: v0lta (~dkmueller@2a01:c22:729b:b200:d529:fc38:a873:b8c5) (Quit: WeeChat 3.2)
[00:15:54] *** Quits: ckopn (~evg@8.21.110.39) (Ping timeout: 272 seconds)
[00:20:37] *** Quits: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net) (Quit: Client closed)
[00:20:51] *** Joins: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net)
[00:21:36] *** Quits: theoceaniscool (~theoceani@119.12.233.178) (Ping timeout: 265 seconds)
[00:21:48] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[00:23:37] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:5bf:aefb:36bd:9aa7)
[00:24:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[00:25:34] *** Quits: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[00:25:55] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[00:26:10] *** Quits: rgl (~rgl@bl12-47-147.dsl.telepac.pt) (Ping timeout: 240 seconds)
[00:32:21] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[00:36:26] *** Joins: theoceaniscool (~theoceani@119.12.233.178)
[00:40:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[00:41:35] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[00:41:38] *** Quits: theoceaniscool (~theoceani@119.12.233.178) (Ping timeout: 256 seconds)
[00:45:05] <shiroyasha> f8l12: The documentation for `sql.Open` (`database/sql`) says it has its own pool, so presumably the lib/pq driver assumes the connection pool will be managed by stdlib.
[00:45:06] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:45:09] <shiroyasha> I might be wrong tho.
[00:45:45] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[00:46:08] *** Joins: v0lta (~dkmueller@2a01:c22:729b:b200:2d0b:b4f1:af3f:db67)
[00:47:26] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[00:54:28] *** Joins: theoceaniscool (~theoceani@119.12.233.178)
[00:58:13] *** Joins: c10l (~c10l@89.34.167.207)
[00:58:34] *** Joins: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de)
[00:58:39] *** blnux is now known as blinux
[00:58:42] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[01:00:43] <f8l12> shiroyasha, that makes sense. i don't really get how i'm getting too many conn errors with postgres then
[01:03:42] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[01:04:46] *** Joins: c10l (~c10l@89.34.167.207)
[01:05:19] *** Joins: independent56 (~independe@85.255.235.132)
[01:06:23] *** Joins: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net)
[01:10:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[01:11:04] *** Quits: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[01:11:39] *** Quits: c10l (~c10l@89.34.167.207) (Quit: Ping timeout (120 seconds))
[01:11:40] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[01:11:57] *** Joins: c10l (~c10l@89.34.167.207)
[01:13:33] *** Quits: c10l (~c10l@89.34.167.207) (Client Quit)
[01:14:37] *** Joins: c10l (~c10l@89.34.167.207)
[01:14:57] *** Quits: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de) (Quit: rootbox)
[01:15:58] *** Quits: c10l (~c10l@89.34.167.207) (Client Quit)
[01:17:01] *** Joins: c10l (~c10l@89.34.167.207)
[01:18:54] *** Joins: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de)
[01:18:55] *** Quits: c10l (~c10l@89.34.167.207) (Client Quit)
[01:19:58] *** Joins: c10l (~c10l@89.34.167.207)
[01:22:06] *** Quits: c10l (~c10l@89.34.167.207) (Client Quit)
[01:22:37] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:d406:dd5:8f7:c6b2)
[01:23:10] *** Joins: c10l (~c10l@89.34.167.207)
[01:24:15] *** Quits: c10l (~c10l@89.34.167.207) (Client Quit)
[01:25:22] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:d406:dd5:8f7:c6b2) (Ping timeout: 240 seconds)
[01:25:59] *** Joins: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net)
[01:26:38] *** Joins: c10l (~c10l@89.34.167.207)
[01:26:55] *** Quits: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de) (Quit: rootbox)
[01:27:30] *** Quits: c10l (~c10l@89.34.167.207) (Client Quit)
[01:28:35] *** Joins: c10l (~c10l@89.34.167.207)
[01:30:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[01:31:13] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[01:32:25] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[01:34:40] *** Joins: c10l (~c10l@89.34.167.207)
[01:35:09] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[01:37:23] *** Joins: c10l (~c10l@89.34.167.207)
[01:38:28] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[01:38:47] *** Joins: c10l (~c10l@89.34.167.207)
[01:47:50] *** Quits: rgl (~rgl@bl12-47-147.dsl.telepac.pt) (Read error: Connection reset by peer)
[01:51:33] *** Joins: noxim (~noxim@user/noxim)
[01:52:11] *** Quits: independent56 (~independe@85.255.235.132) (Ping timeout: 252 seconds)
[01:53:51] *** Joins: independent56 (~independe@85.255.235.132)
[01:56:13] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 246 seconds)
[01:56:29] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[01:56:53] *** Joins: c10l (~c10l@89.34.167.207)
[01:57:55] *** Joins: zwr (~zwr@2804:d45:b966:fb00:75f5:498c:375f:b09e)
[02:00:18] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[02:02:35] *** Joins: c10l (~c10l@89.34.167.207)
[02:06:28] <b0nn> f8l12: You're going tohave to show some code, there's something amiss
[02:06:44] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[02:06:55] <b0nn> Like, new connections being made, and old ones not being cleaned up (eg. the pool is being bypassed)
[02:07:29] <b0nn> Failing showing code - get postgres to tell you how many active connections it's got when it throws the error
[02:07:51] <b0nn> And, double check that you are the only service accessing postgres
[02:07:59] <b0nn> er, that instance
[02:08:52] *** Joins: c10l (~c10l@89.34.167.207)
[02:13:03] <b0nn> Possibly check that you are using the pool (which should be reusing connections)
[02:14:32] *** Quits: revolve (~u0_a227@82-132-245-165.dab.02.net) (Read error: Connection reset by peer)
[02:15:50] <b0nn> also, pq is deprecated, do you mean pgx, or pq (and if you mean pq, maybe look at pgx)
[02:16:13] *** Joins: revolve (~u0_a227@82-132-244-143.dab.02.net)
[02:16:40] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[02:16:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[02:17:16] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[02:18:50] *** Joins: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de)
[02:18:55] *** Joins: c10l (~c10l@89.34.167.207)
[02:19:11] *** Quits: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net) (Quit: Client closed)
[02:19:25] *** Joins: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net)
[02:20:15] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[02:20:24] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[02:22:56] *** Joins: c10l (~c10l@89.34.167.207)
[02:23:24] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[02:23:55] *** Quits: independent56 (~independe@85.255.235.132) (Remote host closed the connection)
[02:24:13] *** Quits: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[02:24:18] *** Quits: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be) (Ping timeout: 240 seconds)
[02:25:28] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[02:25:37] *** Joins: c10l (~c10l@89.34.167.207)
[02:27:52] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:5bf:aefb:36bd:9aa7) (Quit: My Mac Mini has gone to sleep. ZZZzzzâ€¦)
[02:28:43] *** Quits: hentai (~hentai@user/hentai) (Read error: Connection reset by peer)
[02:28:43] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 265 seconds)
[02:28:48] *** Joins: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net)
[02:29:18] *** Joins: Guest779 (~hentai@2a01:e0a:a5c:a070:71cc:b7d7:6cfd:d400)
[02:29:18] *** Quits: Guest779 (~hentai@2a01:e0a:a5c:a070:71cc:b7d7:6cfd:d400) (Changing host)
[02:29:18] *** Joins: Guest779 (~hentai@user/hentai)
[02:30:28] *** Joins: darkapex (~darkapex@user/darkapex)
[02:30:39] *** Guest779 is now known as hentai
[02:31:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[02:31:57] *** Quits: hentai (~hentai@user/hentai) (Remote host closed the connection)
[02:32:03] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[02:32:14] *** Joins: Guest9670 (~hentai@2a01:e0a:a5c:a070:71cc:b7d7:6cfd:d400)
[02:32:14] *** Quits: Guest9670 (~hentai@2a01:e0a:a5c:a070:71cc:b7d7:6cfd:d400) (Changing host)
[02:32:14] *** Joins: Guest9670 (~hentai@user/hentai)
[02:32:58] *** Quits: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[02:33:17] *** Quits: Guest9670 (~hentai@user/hentai) (Read error: Connection reset by peer)
[02:33:27] *** Joins: Guest9670 (~hentai@2a01:e0a:a5c:a070:71cc:b7d7:6cfd:d400)
[02:33:28] *** Quits: Guest9670 (~hentai@2a01:e0a:a5c:a070:71cc:b7d7:6cfd:d400) (Changing host)
[02:33:28] *** Joins: Guest9670 (~hentai@user/hentai)
[02:34:01] *** Guest9670 is now known as hentai
[02:39:07] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[02:41:11] *** Joins: c10l (~c10l@89.34.167.207)
[02:41:38] *** Quits: zwr (~zwr@2804:d45:b966:fb00:75f5:498c:375f:b09e) (Ping timeout: 272 seconds)
[02:44:41] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[02:46:46] *** Joins: c10l (~c10l@89.34.167.207)
[02:48:03] *** Joins: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net)
[02:48:04] *** Quits: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net) (Write error: Broken pipe)
[02:48:08] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[02:49:28] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:50:28] *** Quits: theoceaniscool (~theoceani@119.12.233.178) (Ping timeout: 265 seconds)
[02:56:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[02:56:39] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:57:10] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[03:02:07] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[03:03:06] *** Quits: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de) (Ping timeout: 240 seconds)
[03:05:23] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[03:06:00] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[03:07:36] *** Joins: c10l (~c10l@89.34.167.207)
[03:07:48] *** Joins: computerquip (sid423484@user/computerquip)
[03:13:00] *** Joins: Compy (compy@2600:3c00::f03c:91ff:fe83:6d49)
[03:14:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[03:15:11] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[03:19:37] *** Joins: Snyp (~rksht@49.207.214.102)
[03:29:58] *** Quits: v0lta (~dkmueller@2a01:c22:729b:b200:2d0b:b4f1:af3f:db67) (Quit: WeeChat 3.2)
[03:31:32] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:56] *** Joins: jsrnop (~mark@user/jsrnop)
[03:32:33] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:5bf:aefb:36bd:9aa7)
[03:33:53] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[03:48:19] *** Quits: src (~src@user/src) (Quit: leaving)
[04:00:54] *** Joins: fentanyl_ (~0xe3b7@bras-vprn-toroon4834w-lp130-08-174-91-44-103.dsl.bell.ca)
[04:03:38] *** Quits: fentanyl (~0xe3b7@ca1-1.azirevpn.net) (Ping timeout: 258 seconds)
[04:06:36] *** Joins: xsteadfastx (~marv@94.31.100.46)
[04:06:50] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[04:11:08] *** Joins: Torr (~Torr@user/torr)
[04:19:57] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:5bf:aefb:36bd:9aa7) (Quit: My Mac Mini has gone to sleep. ZZZzzzâ€¦)
[04:23:16] *** Quits: xsteadfastx (~marv@94.31.100.46) (Ping timeout: 265 seconds)
[04:27:32] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:28:42] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[04:30:02] *** Quits: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f) (Quit: Oops)
[04:31:02] *** Joins: zopsi (~zopsi@irc.dir.ac)
[04:38:10] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 272 seconds)
[04:42:31] *** Quits: Liquid_X (~lx@37.221.104.65) (Ping timeout: 250 seconds)
[04:44:32] *** Joins: Liquid_X (~lx@37.221.104.65)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:49] *** Joins: yoonkn (~user@175.197.208.79)
[04:53:14] *** Quits: rbn (~rbn@sferic.eu) (Read error: Connection reset by peer)
[04:56:33] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[04:59:13] *** Quits: Snyp (~rksht@49.207.214.102) (Ping timeout: 258 seconds)
[05:00:10] *** Joins: rbn (~rbn@sferic.eu)
[05:15:57] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 265 seconds)
[05:24:19] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[05:44:40] *** Quits: dr0n (~minix@94.11.23.235) (Ping timeout: 272 seconds)
[05:45:51] *** Joins: califax- (~califax@user/califx)
[05:47:02] *** Joins: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[05:48:15] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[05:48:16] *** califax- is now known as califax
[05:51:38] *** Quits: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 272 seconds)
[05:56:20] *** Joins: noxim (~noxim@user/noxim)
[06:09:22] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 258 seconds)
[06:12:12] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:13:33] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1005)
[06:17:46] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1005) (Ping timeout: 240 seconds)
[06:18:30] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 252 seconds)
[06:21:29] *** Joins: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[06:40:20] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[06:40:45] *** Joins: c10l (~c10l@89.34.167.207)
[06:44:16] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 246 seconds)
[06:44:16] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[06:46:23] *** Joins: c10l (~c10l@89.34.167.207)
[06:48:22] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[06:52:51] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[06:55:04] *** Joins: c10l (~c10l@89.34.167.207)
[07:01:17] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: leaving)
[07:01:32] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[07:04:18] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Client Quit)
[07:04:32] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[07:07:52] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Client Quit)
[07:08:08] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[07:14:50] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: leaving)
[07:15:04] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[07:16:24] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Client Quit)
[07:16:39] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[07:20:21] *** Quits: f8l12 (~f8l12@d24-36-156-191.home1.cgocable.net) (Quit: Leaving)
[07:21:59] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1005)
[07:26:19] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1005) (Ping timeout: 250 seconds)
[07:27:46] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[07:28:02] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Changing host)
[07:28:02] *** Joins: fikran (~fikran@user/fikran)
[07:28:07] <fikran> I know this probably isn't the place to ask, but its a go project so...
[07:28:15] <fikran> does anyone know if/where Hugo's channel is/
[07:32:13] *** Quits: c10l (~c10l@89.34.167.207) (Quit: Ping timeout (120 seconds))
[07:32:35] *** Joins: c10l (~c10l@89.34.167.207)
[07:32:51] *** Quits: c4rc4s (~c4rc4s@user/c4rc4s) (Remote host closed the connection)
[07:36:17] *** Joins: frickenate (~frickenat@user/frickenate)
[07:45:40] *** Quits: arcatech (~arcatech@user/arcatech) (Remote host closed the connection)
[07:46:18] *** Joins: arcatech (~arcatech@user/arcatech)
[07:52:36] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1) (Ping timeout: 272 seconds)
[07:52:49] *** Joins: oxum (~oxum@106.203.221.241)
[07:56:33] *** Joins: amigan (dramoray@dtvax.dynatron.me)
[08:04:22] *** Quits: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 258 seconds)
[08:08:00] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[08:09:09] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[08:11:13] <seebs> there's a hugo channel on gopher slack?
[08:12:25] *** Joins: jsanford (~jsanford@user/jsanford)
[08:14:47] *** Joins: oxum (~oxum@106.203.221.241)
[08:18:56] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[08:19:08] *** Joins: oxum (~oxum@106.203.221.241)
[08:23:54] *** Joins: mattypants (~quassel@66-90-146-141.dyn.grandenetworks.net)
[08:31:01] *** Joins: arcatech (~arcatech@user/arcatech)
[08:32:08] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[08:37:45] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[08:39:01] *** Joins: oxum (~oxum@106.203.221.241)
[08:45:10] *** Quits: revolve (~u0_a227@82-132-244-143.dab.02.net) (Ping timeout: 272 seconds)
[08:51:22] *** Joins: revolve (~u0_a227@82-132-245-117.dab.02.net)
[08:56:07] *** Joins: smuxki (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b)
[08:57:34] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[08:58:28] *** Joins: oxum (~oxum@106.203.221.241)
[09:02:01] *** Quits: c10l (~c10l@89.34.167.207) (Quit: Ping timeout (120 seconds))
[09:02:24] *** Joins: c10l (~c10l@89.34.167.207)
[09:04:35] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[09:05:47] *** Joins: oxum (~oxum@106.203.221.241)
[09:10:39] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[09:11:08] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[09:13:58] *** Quits: frickenate (~frickenat@user/frickenate) (Quit: frickenate)
[09:18:44] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 272 seconds)
[09:20:17] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[09:23:30] *** Quits: smuxki (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b) (Ping timeout: 240 seconds)
[09:32:58] *** Joins: oxum (~oxum@106.203.221.241)
[09:36:21] *** Joins: Jad_ (~Nashmi@91.186.231.60)
[09:37:22] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 240 seconds)
[09:38:42] *** Quits: Jad (~Nashmi@user/jad) (Ping timeout: 252 seconds)
[09:41:06] *** Quits: normen (~normen@p200300d7173dc9004cb3d82361c54a96.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[09:41:15] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[09:41:21] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[09:43:38] *** Quits: Jigsy` (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy)))
[09:43:44] *** Joins: Jigsy (~Jigsy@user/jigsy)
[09:50:01] <computerquip> Are there any orthodox applications written in Go that I can use to learn modern Go in? So far, I've seen projects use Gradle and Makefiles for a build system which I'm hoping to god isn't normal.
[09:50:35] <b0nn> fikran: according to alis, there's a channel named #hugo
[09:51:11] <b0nn> computerquip: Gradle? That's a Java dependency manager
[09:52:02] <computerquip> Yep, something from Badoo which mixes Java and Go apparently. I'm not actually *certain* it's building Go I guess...
[09:52:55] <b0nn> What do you want to build?
[09:53:07] <icy> Is it possible to have goldmark (https://github.com/yuin/goldmark) convert -- to emdash, and - to endash, without having to write a new parser to do that?
[09:53:26] <b0nn> I mean - as far as Go projects go, there's a wide variety, from the Go language itself, through to Kubernetes, Docker, and etcd
[09:53:52] <computerquip> Well, I have plans for a medium-to-large project and I'm just wanting a decent point of reference since I'm getting mixed signals here.
[09:54:07] <computerquip> ... but Docker isn't a build system, it's just an environment.
[09:54:11] <b0nn> heh, Go has that kind of happening a lot
[09:54:22] <b0nn> Yes, Docker is written in Go though
[09:54:29] <computerquip> Oh, I see what you mean.
[09:54:39] <computerquip> They use a makefile I guess from a glance.
[09:55:12] <b0nn> The current best practice is to use modules, which Docker and Kubernetes predate a bit
[09:55:14] <KirkMcDonald> icy: It would be weird to me, as a matter of grammar, to convert every hyphen to an endash.
[09:55:43] <icy> KirkMcDonald: Ah, probably only hyphens surrounded by spaces.
[09:56:01] <icy> So hyphenated words don't get endashed.
[09:56:54] <icy> The default config uses --- for an emdash and -- for endash, which I don't really like. I've got -- everywhere in my markdown.
[09:56:59] <b0nn> hrm, https://github.com/yuin/goldmark/blob/75d8cce5b78c7e1d5d9c4ca32c1164f0a1e57b53/extension/typographer.go#L171 makes it lok like -- is parsed as emdash
[09:57:25] <b0nn> oh, it's >2
[09:57:45] <icy> Yep. It appears to be hard-coded to use ---.
[09:58:17] <b0nn> Yeah, endash is -- https://github.com/yuin/goldmark/blob/75d8cce5b78c7e1d5d9c4ca32c1164f0a1e57b53/extension/typographer.go#L204
[09:59:01] <KirkMcDonald> I think it's good to be explicit about emdash/endash/hyphen choice. There are multiple valid styles of use.
[09:59:36] <icy> So if I were to change that behaviour, I'd have to implement my own Parse() func then?
[09:59:46] <b0nn> option 3: sed your files such that -- becomes --- :)
[10:00:10] <icy> Not doing that lol. --- looks hideous.
[10:00:54] <b0nn> Yeah, it does look like you need to write your own parse then
[10:01:27] <icy> Ahh. Considering going back to blackfriday...
[10:01:36] <KirkMcDonald> Or just put the actual characters in the source.
[10:02:08] <icy> That doesn't look very nice in plaintext.
[10:03:04] <icy> Ok, I think I'll just use blackfriday. Its default behaviour does what I want.
[10:04:27] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:08:05] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[10:12:34] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 240 seconds)
[10:13:48] *** Joins: tpefreedom (~tsomers@98-125-225-122.dyn.centurytel.net)
[10:15:29] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[10:16:50] *** Joins: BUSY (~BUSY@user/busy)
[10:17:12] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 252 seconds)
[10:18:20] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[10:24:40] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[10:28:06] *** Joins: oxum (~oxum@106.203.221.241)
[10:33:28] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[10:34:52] *** Quits: tpefreedom (~tsomers@98-125-225-122.dyn.centurytel.net) (Quit: Leaving)
[10:40:04] *** Quits: g2anj (~v@221.142.186.101) (Quit: .)
[10:45:13] *** Quits: pepee (~user@user/pepee) (Ping timeout: 250 seconds)
[10:51:14] *** Joins: g2anj (~v@221.142.186.101)
[10:53:03] *** Joins: theoceaniscool (~theoceani@119.12.233.178)
[11:05:39] *** Joins: dr0n (~dr0n@94.11.23.235)
[11:10:44] <foobaz> yesterday i talked about an idea for CSRF protection i had
[11:10:58] <foobaz> i wrote the code, here it is if anyone is interested: https://github.com/foobaz/csrf
[11:15:09] *** Joins: gggp (~gggp@60.10.23.170)
[11:15:21] <gggp> is the bootstrap compiler of golang is gccgo?
[11:15:32] <KirkMcDonald> No.
[11:15:35] <foobaz> no, it's go 1.4, which was written in C
[11:15:54] <gggp> where is the compiler's code in c
[11:15:55] <foobaz> go 1.5 was the first to be written in go
[11:16:05] <foobaz> it's on golang.org
[11:17:19] *** Joins: normen (~normen@p200300d7173dc900606c40d54cdbc386.dip0.t-ipconnect.de)
[11:19:03] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[11:19:26] <KirkMcDonald> Though, looking at the 'install from source' page, it appears that you *can* bootstrap using gccgo.
[11:19:53] <KirkMcDonald> That must've been added at some point; I don't remember seeing that the last time I looked on there.
[11:20:27] <KirkMcDonald> But, yes, the usual thing (other than just getting binaries) is to bootstrap using the Go 1.4 compiler.
[11:21:17] <KirkMcDonald> https://golang.org/doc/install/source
[11:22:14] *** Quits: normen (~normen@p200300d7173dc900606c40d54cdbc386.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[11:26:42] *** Joins: gggp_ (~gggp@114.243.54.6)
[11:27:56] *** Joins: mrig (~mrig@user/mrig)
[11:27:56] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[11:28:45] *** Joins: ckopn (~evg@176.59.49.214)
[11:29:34] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[11:29:50] *** Quits: gggp (~gggp@60.10.23.170) (Ping timeout: 258 seconds)
[11:31:20] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[11:33:27] *** Quits: LiftLeft (~LiftLeft@191.96.227.125) (Ping timeout: 245 seconds)
[11:37:22] *** Quits: ckopn (~evg@176.59.49.214) (Quit: WeeChat 2.8)
[11:43:08] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 272 seconds)
[11:45:45] *** Joins: mrig (~mrig@user/mrig)
[11:50:47] *** Joins: LiftLeft (~LiftLeft@37.19.198.43)
[11:55:48] *** Quits: LiftLeft (~LiftLeft@37.19.198.43) (Ping timeout: 272 seconds)
[11:58:54] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:00:29] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[12:01:38] *** Joins: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66)
[12:02:46] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 272 seconds)
[12:04:40] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[12:05:11] *** Quits: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66) (Client Quit)
[12:06:17] *** Joins: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66)
[12:12:10] *** Quits: cim (~cim@205.185.117.110) (Quit: The Lounge - https://thelounge.chat)
[12:12:38] *** Joins: cim (~cim@205.185.117.110)
[12:18:24] *** Joins: normen (~normen@p200300d7173dc900606c40d54cdbc386.dip0.t-ipconnect.de)
[12:27:42] *** Joins: gggp__ (~gggp@60.10.23.170)
[12:30:00] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 272 seconds)
[12:31:16] *** Quits: gggp_ (~gggp@114.243.54.6) (Ping timeout: 272 seconds)
[12:35:40] *** Joins: ayrus (~ayrus@user/ayrus)
[12:40:04] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:b498:d194:d2f:d143)
[12:58:36] *** Joins: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be)
[13:05:38] *** Joins: mei (~mei@user/mei)
[13:09:34] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:b498:d194:d2f:d143) (Quit: My Mac Mini has gone to sleep. ZZZzzzâ€¦)
[13:11:08] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-679b-f12f-4ff6-2676.ip6.gigabit.dk) (Remote host closed the connection)
[13:13:51] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Quit: Leaving)
[13:16:16] *** Joins: noxim (~noxim@user/noxim)
[13:36:49] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[13:38:47] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[13:39:12] *** Joins: gggp_ (~gggp@111.192.219.25)
[13:42:28] *** Quits: gggp__ (~gggp@60.10.23.170) (Ping timeout: 258 seconds)
[13:52:35] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:b498:d194:d2f:d143)
[13:53:32] *** imm__ is now known as imm_
[13:56:35] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[14:00:04] <mikoto-chan> https://bpa.st/QQ5A
[14:01:12] <mikoto-chan> I want to serve files from the "static" directory but I want the URL for the fileserver to be "https://example.com/.static/", is that possible>
[14:01:18] <mikoto-chan> s/>/?/
[14:11:21] <b0nn> when you tried it what happened
[14:12:56] *** Joins: sizeof_void34 (~Thunderbi@109.252.75.112)
[14:25:34] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[14:26:37] <j416> mikoto-chan: since you give no more context I assume you're using net/http. Remove the asterisk.
[14:27:31] <j416> mikoto-chan: an example https://pkg.go.dev/net/http#example-FileServer-StripPrefix
[14:29:40] *** Joins: hikhvar79607380 (~thelounge@dynamic-046-114-006-127.46.114.pool.telefonica.de)
[14:50:11] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[14:52:19] *** Quits: hikhvar79607380 (~thelounge@dynamic-046-114-006-127.46.114.pool.telefonica.de) (Quit: The Lounge - https://thelounge.chat)
[14:54:24] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[14:55:03] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[14:58:51] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~â™ª)
[15:05:49] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 246 seconds)
[15:07:53] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[15:14:18] *** Quits: revolve (~u0_a227@82-132-245-117.dab.02.net) (Ping timeout: 240 seconds)
[15:16:21] *** Joins: revolve (~u0_a227@82-132-247-59.dab.02.net)
[15:22:41] *** Joins: xsteadfastx (~marv@94.31.100.46)
[15:29:41] *** gggp_ is now known as gggp
[15:30:25] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Remote host closed the connection)
[15:31:31] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[15:37:48] <icy> How do I get scanner.Scan() (from bufio.NewScanner) to include the \n?
[15:40:44] <mrig> Hello :)
[15:41:24] <j416> icy: I don't think you can. Add it?
[15:41:36] <icy> Yeah, that's what I've been doing.
[15:41:42] *** Joins: gggp_ (~gggp@60.10.194.46)
[15:41:46] <icy> Thought there might be a cleaner way.
[15:41:52] <mrig> When coding using an interface, in this case the xml.Token, would you make a type that stores the type of concrete type behind the interface with it, or perform a type assertion with an ok boolean whenever required?
[15:42:35] <j416> mrig: neither; I'd just use it as an interface
[15:42:42] <icy> Do you know of a better way to read line by line, that includes the \n?
[15:43:11] <j416> icy: https://golang.google.cn/pkg/bufio/#Reader.ReadBytes
[15:43:16] <mrig> j416: so that would be the case that you are performing an ok test upon it when running conditionals?
[15:43:23] <j416> https://golang.google.cn/pkg/bufio/#Reader.ReadString
[15:43:24] <mrig> Would it not?
[15:43:45] <j416> mrig: what's is that?
[15:44:00] <icy> Ah, this might work. Thanks!
[15:44:14] <mrig> if _, ok := thing.(IsOfThisType); ok {}
[15:44:28] <j416> that's a type assertion
[15:44:32] <j416> I'd avoid that if possible
[15:44:50] <mrig> so how would you go about checking the type in the interface?
[15:44:59] <j416> I wouldn't
[15:45:04] *** Quits: gggp (~gggp@111.192.219.25) (Ping timeout: 272 seconds)
[15:45:17] <j416> unless there's no better way around it
[15:45:18] <ikke> The goal behind interfaces is that you do not need to know the type
[15:45:20] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Remote host closed the connection)
[15:45:38] <mrig> j416: well this is within a parse tree that could receive any one of several types.
[15:46:10] <j416> the interface defines a set of methods which are used to interface with whatever implementation lies behind it
[15:46:20] *** gggp_ is now known as gggp
[15:46:26] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[15:46:26] <mrig> Yes this is the xml.Token in this instance.
[15:46:53] <j416> right, an empty interface.
[15:46:58] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[15:47:03] <mrig> yes
[15:47:21] <ikke> It's more used as a collection of types than an interface
[15:47:27] <mrig> and there is a short list of possible types
[15:48:03] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[15:48:45] <j416> I'd check the examples in the docs and do something similar to that, but in this case it looks like examples are rare.
[15:49:13] <j416> the interface already stores the concrete type; I see no need to reinvent that.
[15:49:20] <j416> type assert it if needed.
[15:49:24] <mrig> I had been wrapping the xml package and made my own NodeType to store with it, and was checking for those. But am now thinking that I could loose this type entirely and perform a type assertion.
[15:50:08] *** Quits: xsteadfastx (~marv@94.31.100.46) (Ping timeout: 272 seconds)
[15:50:09] <mrig> I am using the interface, it was in a node struct with my Type defining the concrete type once asserted.
[15:50:13] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Remote host closed the connection)
[15:50:26] <mrig> am wondering now if that node struct is necessary or not.
[15:51:20] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[15:51:43] <j416> sounds like just different ways of achieving the same thing
[15:51:44] <mrig> I think the question is whether to type assert once or every time that I need it, either way the code is very similar; The Type code seems to mirror what the type assert code would be anyhow. Which is why I came to think about removing it.
[15:52:08] <ikke> mrig: even if you store the type, you need to check the type anytime anyway
[15:52:14] <mrig> yes I think it is, was wondering if there was any obvious advantage or disadvantage to either?
[15:52:31] <mrig> ikke: Do you mean that it is better to do so
[15:52:33] <mrig> ?
[15:52:46] <j416> mrig: try it and you'll see what he means
[15:52:55] <ikke> Only if type assertions would be very expensive
[15:53:02] <ikke> otherwise, it would just be double bookkeeping
[15:53:16] <j416> mrig: no need for `if typ == "foo" { ... }` if you already have a type assertion
[15:53:50] *** Joins: oxum (~oxum@106.203.221.241)
[15:53:51] *** Quits: gggp (~gggp@60.10.194.46) (Read error: Connection reset by peer)
[15:54:10] <j416> mrig: how will you store the value in your wrapper?
[15:54:41] <mrig> I was using a reference to the actual object.
[15:54:59] <j416> mrig: what variable type?
[15:55:32] <mrig> Creating the object rather on first parse and then when using the parse tree referring to it by reference.
[15:55:47] <ikke> j416: decoder.Token() returns a Token
[15:56:06] <j416> ikke: yes, I'm trying to get him to understand the doubleness :)
[15:56:08] <mrig> some have a Copy method, others that contain only strings do not require it.
[15:56:26] <j416> ikke: looks like I'm having a monologue instead >.>
[15:57:10] <ikke> HEH
[15:57:11] <j416> mrig: I think you have your answer then.
[15:58:33] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 258 seconds)
[15:58:51] *** Joins: gggp (~gggp@60.10.194.46)
[15:59:27] <mrig> j416: I think that you mean that it would be better to use a type switch to check the type each time that it is used.
[16:00:03] <mrig> That is is just mirroring the same, if their is no great cost in making the assertion this way.
[16:00:08] <j416> mrig: not better, but inevitable
[16:00:25] <j416> mrig: how will you do it without type assertion?
[16:00:45] <mrig> The question is whether I type assert once or on every instance.
[16:00:54] <j416> mrig: hence, why I asked what type you have in the struct. is it an xml.Token, or a concrete type?
[16:01:15] <mrig> It is an xml.Token in the struct.
[16:01:30] <j416> mrig: you type assert once, and then what do you do with the concrete value?
[16:01:47] <mrig> I type assert when the node is being iterated over.
[16:02:16] <j416> is that what you mean by "on every instance"?
[16:02:19] <mrig> My parse tree contains nodes with xml.Tokens in them.
[16:02:31] <mrig> Yes, the nodes are many.
[16:02:44] <mrig> could be potential massive.
[16:02:54] <mrig> potentially
[16:03:39] <j416> so I ask again, if you type assert once, what will you do with the concrete value?
[16:04:43] <mrig> What I am doing with the value depends from case to case, this code is just the iterator/cursor pattern.
[16:05:55] <j416> how will you store the value?
[16:06:39] <mrig> as a concrete type within another interface, this was how I was defining my NodeType variable.
[16:06:55] <mrig> but was storing again as an interface.
[16:07:40] <mrig> Would you recommend that I do otherwise?
[16:08:49] <ikke> mrig: go already stores the type
[16:08:57] <ikke> storing it another time would only be a source of error
[16:09:03] <j416> so you'd have struct { Start *StartElement; End *EndElement; ... } and so on for each type that xml.Token can be?
[16:09:38] <j416> mrig: if you store it in another interface, you'd still need to type assert that
[16:10:01] <mrig> No, my struct simply has struct { Elem } at the moment, as I just removed the NodeType
[16:10:10] <j416> mrig: unless of course you find a common method set for them that you can use, and thereby bypass the type assertion entirely
[16:10:32] <j416> mrig: sounds like you only need xml.Token then
[16:10:34] <mrig> j416: right yes, it is the switch on the type that is in question, sorry I expressed that poorly.
[16:10:49] <mrig> Great, far cleaner this way too.
[16:11:13] <j416> mrig: did you try to implement it with the type string and your interface type?
[16:11:24] <mrig> the type was an int
[16:11:30] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:b498:d194:d2f:d143) (Quit: My Mac Mini has gone to sleep. ZZZzzzâ€¦)
[16:11:35] <j416> mrig: did you try to implement it with the type integer and your interface type?
[16:11:38] <mrig> The interface is the xml interface
[16:11:57] <mrig> I did have it inside my package called xml.
[16:12:12] <j416> is that yes?
[16:12:35] <mrig> so the NodeType was being used by packages calling my xml package that was wrapping the encoder/xml package.
[16:12:44] <j416> not what I asked
[16:12:46] <mrig> j416: that is a no
[16:12:58] <j416> if you tried, you'd figure all of the above out I think.
[16:13:00] <mrig>  The interface is the xml interface
[16:13:30] <j416> do you understand why the type integer is not useful?
[16:13:36] <mrig> Yes
[16:13:40] <j416> alright
[16:13:55] <mrig> it is mirroring what the language is doing underneath it would seem.
[16:14:30] <mrig> Thank you for taking the time to explain :)
[16:14:35] <j416> are you 100% sure the type integer is not useful?
[16:14:41] <j416> to rephrase
[16:15:46] <mrig> It can be useful, but not in this instance it would seem.
[16:16:01] <j416> my point is that if you had tried to implement this, you'd understand exactly why it could never be useful
[16:16:11] <mrig> oh right
[16:16:26] <ikke> You have to do the same checks all the time anyway
[16:16:28] <j416> I encourage you to try
[16:17:07] <mrig> j416: Do you mean implement the xml.Token type?
[16:17:09] <j416> (because you'd learn better)
[16:17:18] <j416> mrig: no, implement your node wrapper as you explained first
[16:18:00] <j416> mrig: implemeht and use your type Node struct { Type int; Elem xml.Token }
[16:18:08] <mrig> I did implement it in this way initially, with the Type int.
[16:18:33] <j416> mrig: so you did both a check on the Type integer, and a type switch on Elem?
[16:18:56] <A_Dragon> why would you ever want to store the type to an interface seperately?
[16:19:02] <mrig> Started to realise that it was mirroring the code that would be required if I used the switch on a range thing.(type)
[16:19:08] <j416> right
[16:19:38] <mrig> This practice comes from the use of a Type int variable when unmarshaling.
[16:20:11] <j416> the only reason I can think of is what ikke mentioned above; if there is a performance difference between comparing an int and doing a type switch. But I wouldn't worry about that until later, anyway.
[16:20:38] <j416> mrig: I don't understand what that means
[16:20:38] <mrig> Well that does come into mind when parsing very large trees.
[16:20:52] <A_Dragon> premature optimisation
[16:20:59] <A_Dragon> that way lies madness (and bad performance)
[16:21:01] <mrig> svg gets really slow when there are many nodes.
[16:21:31] <mrig> obviously at this point you are likely better using a raster or reconsidering how you generate the image.
[16:21:48] <j416> mrig: it could be the opposite, comparing ints could be more expensive, or on-par, to a type switch. Write a benchmark to find out if you really need to, but I think you'll want to spend time optimizing other parts of your program first. This doesn't sound like an obvious bottleneck to me, at least to begin with.
[16:22:25] <j416> then again, I speculate. benchmark is the way if you think you need to optimize.
[16:22:42] <mrig> Right yes, the bottle necks in svg are when they are poorly conceived.
[16:22:46] <j416> I'd keep it simple first.
[16:22:59] <j416> optimizations often add more code
[16:23:05] <j416> making things less readable
[16:23:15] <mrig> right yes.
[16:23:32] <mrig> the nice thing about this is that it means that I can strip out some code :)
[16:23:43] *** Joins: gggp__ (~gggp@123.113.184.133)
[16:25:32] <mrig> ... and the use case of this code at the moment does not require optimisation in the slightest, the only time that I consider optimisation is for obvious best practices, adopting good baseline habits.
[16:25:51] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 265 seconds)
[16:26:02] <A_Dragon> the right way to do it is a type switch.
[16:28:40] <mrig> I am just accessing some elements in sibling nodes, where I was using the Type int, felt a little unnerving using _, ok := node.sibling.elem.(Thing)
[16:29:10] <mrig> but seems cleaner now that I have done that, putting the condition on the 'ok'.
[16:36:47] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:37:13] *** Joins: gggp_ (~gggp@123.113.184.133)
[16:38:10] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Ping timeout: 256 seconds)
[16:40:48] *** Quits: gggp__ (~gggp@123.113.184.133) (Ping timeout: 272 seconds)
[16:44:57] *** Joins: keiser0091075852 (~keiser@83.25.199.188.ipv4.supernova.orange.pl)
[16:46:40] *** Quits: gggp_ (~gggp@123.113.184.133) (Read error: Connection reset by peer)
[16:47:06] *** Joins: gggp_ (~gggp@123.113.184.133)
[16:50:00] *** Joins: darkapex (~darkapex@user/darkapex)
[16:56:22] <dostoyevsky2> What kind of packages depend on gccgo?  I heard that gccgo makes deployment of go-binaries harder...
[16:57:49] <bookworm> not gccgo, cgo
[16:58:25] <bookworm> one is an alternative conpiler and cgo the FFI layer to C
[16:58:33] <bookworm> compiler*
[16:59:19] <bookworm> as for which packages, that's a very open ended question... stdlib ? random example? What are you looking for?
[17:09:18] *** Quits: gggp_ (~gggp@123.113.184.133) (Ping timeout: 272 seconds)
[17:09:29] *** Joins: noxim (~noxim@user/noxim)
[17:10:18] <A_Dragon> technically if you use any networking you probably use cgo
[17:12:53] *** Joins: f8l12 (~f8l12@d24-36-156-191.home1.cgocable.net)
[17:14:39] <dostoyevsky2> hmmm... I didn't notice any deployment problems for my rest services with mux, though...
[17:17:26] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1)
[17:21:23] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:b498:d194:d2f:d143)
[17:22:08] *** Quits: ayrus (~ayrus@user/ayrus) (Quit: system has gone to sleep. ZZZzzzâ€¦)
[17:22:26] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:b498:d194:d2f:d143) (Client Quit)
[17:24:07] *** Joins: Atque (~Atque@user/atque)
[17:24:22] *** Quits: lew (~lew@89.234.183.156) (Quit: ZNC - https://znc.in)
[17:24:23] *** Quits: eti (~eti@2a07:abc4::1:26e) (Quit: byeeeee)
[17:24:53] *** Joins: eti (~eti@2a07:abc4::1:26e)
[17:24:56] *** Quits: Jad_ (~Nashmi@91.186.231.60) (Quit: Benefits I derive from freeÂ­dom are largely the result of the uses of freedom by others, and mostly of those uses of freedom that I could never avail myself of.)
[17:25:21] *** Joins: lew (~lew@2a07:abc4::1:26e)
[17:36:49] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[17:40:56] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[17:42:12] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[17:47:16] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[17:56:10] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[17:57:18] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[18:00:10] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[18:03:57] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:04:55] *** Quits: fentanyl_ (~0xe3b7@bras-vprn-toroon4834w-lp130-08-174-91-44-103.dsl.bell.ca) (Read error: Connection reset by peer)
[18:10:51] *** Joins: nyah (~nyah@90.221.186.180)
[18:18:48] *** Joins: pepee (~user@user/pepee)
[18:18:54] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[18:22:43] *** CommunistWolf is now known as CapitalistWolf
[18:32:50] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:38:06] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:b498:d194:d2f:d143)
[18:39:19] *** Quits: ventic (ircbouncer@3v.fi) (Quit: ZNC - http://znc.in)
[18:41:13] *** Joins: ventic (ircbouncer@3v.fi)
[18:42:53] *** Quits: ventic (ircbouncer@3v.fi) (Client Quit)
[18:43:07] *** Quits: dr0n (~dr0n@94.11.23.235) (Ping timeout: 265 seconds)
[18:43:37] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1005)
[18:46:19] *** Joins: ventic (~ventic@3v.fi)
[18:48:43] <f8l12> b0nn, im not sure its my fault because now that i added a pool it doesn't give me that error anymore
[18:49:31] <f8l12> the only thing i can think of is that the maxconns on sql.DB was higher than my max conns setting for pg
[18:50:05] <f8l12> if i set the pool too high then it throws the error, though
[18:50:43] <f8l12> i could show code but it's like 700 lines of queries idk if you care to sift through it
[18:53:25] *** Joins: ventic^ (~ventic@3v.fi)
[18:53:48] *** Quits: ventic (~ventic@3v.fi) (Ping timeout: 272 seconds)
[18:53:48] *** ventic^ is now known as ventic
[18:56:14] *** Parts: no_gravity (~no_gravit@user/no-gravity/x-5639427) ()
[18:58:51] *** Joins: ventic^ (ircbouncer@3v.fi)
[18:58:52] *** Quits: ventic (~ventic@3v.fi) (Ping timeout: 272 seconds)
[18:58:53] *** ventic^ is now known as ventic
[19:04:23] *** CapitalistWolf is now known as CommunistWolf
[19:18:15] *** Quits: dza (~dza@user/dza) (Read error: Connection reset by peer)
[19:22:12] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: leaving)
[19:26:19] *** Joins: yakiza (~yakiza@cpc91196-cmbg18-2-0-cust129.5-4.cable.virginm.net)
[19:31:01] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:b498:d194:d2f:d143) (Quit: My Mac Mini has gone to sleep. ZZZzzzâ€¦)
[19:35:49] *** Joins: shka (~herr@109.231.62.239)
[19:38:55] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[19:39:30] *** Joins: noxim (~noxim@user/noxim)
[19:50:40] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:29ac:7035:9d99:95e9)
[19:54:02] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:d406:dd5:8f7:c6b2) (Ping timeout: 252 seconds)
[19:58:38] *** Quits: normen (~normen@p200300d7173dc900606c40d54cdbc386.dip0.t-ipconnect.de) (Quit: WeeChat 3.1)
[19:59:40] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[20:00:12] *** Joins: src (~src@user/src)
[20:04:39] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[20:05:02] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[20:06:32] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[20:14:26] *** Joins: noteness (noteness@user/noteness)
[20:20:53] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:21:06] *** Joins: oxum (~oxum@106.203.221.241)
[20:23:06] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[20:23:36] *** Joins: foobaz212 (~foobaz212@52.188.159.143.dyn.plus.net)
[20:26:03] *** Joins: arcatech (~arcatech@user/arcatech)
[20:28:34] *** Joins: smuxki (~smuxki@186.222.60.158)
[20:29:20] *** Joins: oxum (~oxum@106.203.221.241)
[20:33:33] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[20:34:38] *** Quits: smuxki (~smuxki@186.222.60.158) (Quit: Leaving)
[20:34:59] *** Joins: smuxki (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b)
[20:35:22] *** Joins: dza (~dza@user/dza)
[20:38:56] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 272 seconds)
[20:47:09] *** Joins: arcatech (~arcatech@user/arcatech)
[20:49:05] <mrig> hum, xml.ProcInst seems to be adding a \n char and clipping off the first char of its content.
[20:49:42] <mrig> I better make a simplified version of this, before drawing any conclusion.
[20:51:35] *** Quits: yakiza (~yakiza@cpc91196-cmbg18-2-0-cust129.5-4.cable.virginm.net) (Remote host closed the connection)
[20:53:11] <mrig> ah no, it is my poor use of references :|
[20:57:55] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[20:58:51] *** Joins: milosz (~milosz@user/milosz)
[20:58:51] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[20:59:31] <dostoyevsky2> It seeems pretty straightfoward to set up a x509 tls REST api with golang :)
[20:59:32] *** Joins: tpefreedom (~tsomers@98-125-225-122.dyn.centurytel.net)
[20:59:44] *** Parts: tpefreedom (~tsomers@98-125-225-122.dyn.centurytel.net) ()
[21:00:39] *** Joins: smuxki_ (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b)
[21:00:49] *** Quits: smuxki (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b) (Quit: Leaving)
[21:00:56] *** smuxki_ is now known as smuxki
[21:05:49] *** Joins: oxum (~oxum@106.203.221.241)
[21:08:42] *** Quits: noteness (noteness@user/noteness) (Ping timeout: 272 seconds)
[21:11:04] *** Quits: rgl (~rgl@bl12-47-147.dsl.telepac.pt) (Remote host closed the connection)
[21:25:12] *** Joins: noteness (noteness@user/noteness)
[21:28:39] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[21:29:15] *** Joins: LSD (~LSD@2.lsd.systems)
[21:33:29] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[21:33:51] *** Joins: c10l (~c10l@89.34.167.207)
[21:34:02] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[21:34:45] *** Joins: oxum (~oxum@106.203.221.241)
[21:35:12] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[21:35:24] *** Joins: oxum (~oxum@106.203.221.241)
[21:41:40] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 246 seconds)
[21:45:26] *** Quits: revolve (~u0_a227@82-132-247-59.dab.02.net) (Ping timeout: 272 seconds)
[21:47:33] *** Joins: revolve (~u0_a227@82-132-245-79.dab.02.net)
[21:48:07] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[21:52:07] *** Joins: ufk (~ufk@2001:4cd0:aa00:54:40e4:e83f:476:9a5d)
[21:55:08] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[21:56:04] *** Quits: theoceaniscool (~theoceani@119.12.233.178) (Ping timeout: 256 seconds)
[22:02:39] *** Joins: oxum (~oxum@106.203.221.241)
[22:03:24] *** Joins: arcatech (~arcatech@user/arcatech)
[22:07:36] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[22:07:58] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[22:13:49] *** Joins: kn1003 (~kn100@wireguard/tunneler/kn100)
[22:14:20] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 265 seconds)
[22:15:06] *** Quits: kn1003 (~kn100@wireguard/tunneler/kn100) (Remote host closed the connection)
[22:15:47] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[22:16:04] *** Joins: CoolerX (~CoolerX@user/coolerx)
[22:18:27] <noonien> hello folks!
[22:18:50] <noonien> does building with race detection not work with -buildmode=c-shared? i'm getting the following error when trying to load the .so with LD_PRELOAD: ==283==ERROR: ThreadSanitizer failed to allocate 0x29c9000 (43814912) bytes at address 21de648640000 (errno: 12)
[22:19:13] <noonien> i have about 10Gb of free memory, which is a lot more than 42MB
[22:21:32] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 272 seconds)
[22:22:11] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[22:24:07] *** Joins: arcatech (~arcatech@user/arcatech)
[22:30:04] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 256 seconds)
[22:32:30] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[22:34:45] *** Joins: arcatech (~arcatech@user/arcatech)
[22:38:48] *** Joins: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de)
[22:43:12] *** Quits: amigan (dramoray@dtvax.dynatron.me) (Quit: WeeChat 3.2)
[22:47:00] *** Joins: amigan (dramoray@dtvax.dynatron.me)
[22:49:22] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[22:55:54] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[22:56:31] *** Joins: fef (~thedawn@user/thedawn)
[23:00:29] *** Quits: noteness (noteness@user/noteness) (Ping timeout: 252 seconds)
[23:01:28] *** Joins: LiftLeft (~LiftLeft@191.96.150.140)
[23:07:28] *** Joins: oxum (~oxum@106.203.221.241)
[23:07:58] *** Joins: v0lta (~dkmueller@2a01:c22:7a07:3100:54ce:2c9:e7b8:c1d0)
[23:08:24] *** Quits: smuxki (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b) (Ping timeout: 272 seconds)
[23:10:37] *** Quits: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de) (Quit: rootbox)
[23:12:50] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[23:23:58] *** Joins: kn1003 (~kn100@wireguard/tunneler/kn100)
[23:26:08] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 272 seconds)
[23:35:30] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[23:40:15] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:45:15] *** Quits: nperez (~nperez@2a02-a45b-17c4-1-a00-27ff-feab-4723.fixed6.kpn.net) (Ping timeout: 276 seconds)
[23:47:02] *** Joins: nperez (~nperez@2a02-a45b-17c4-1-a00-27ff-feab-4723.fixed6.kpn.net)
[23:48:35] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:b498:d194:d2f:d143)
[23:49:46] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:b498:d194:d2f:d143) (Client Quit)
[23:53:22] *** Quits: nperez (~nperez@2a02-a45b-17c4-1-a00-27ff-feab-4723.fixed6.kpn.net) (Ping timeout: 272 seconds)
[23:54:35] *** Joins: kn10038 (~kn100@wireguard/tunneler/kn100)
[23:55:22] *** Quits: kn1003 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 240 seconds)
[23:56:13] *** Joins: kn100385 (~kn100@wireguard/tunneler/kn100)
[23:57:49] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[23:59:42] *** Quits: kn10038 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 272 seconds)
