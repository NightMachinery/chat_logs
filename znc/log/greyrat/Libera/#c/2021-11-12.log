[00:00:07] *** Quits: i336 (~i336@121.217.4.87) (Ping timeout: 268 seconds)
[00:01:05] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[00:01:24] *** Joins: i336 (~i336@101.175.34.111)
[00:01:44] <APic> Hi.
[00:02:02] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[00:03:32] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Ping timeout: 240 seconds)
[00:04:07] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[00:08:23] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[00:09:25] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[00:12:01] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:13:32] *** Quits: jbauer_ (~jbauer@146.71.11.98) (Read error: Connection reset by peer)
[00:13:38] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 260 seconds)
[00:14:02] *** Quits: aliosablack (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[00:15:52] *** Joins: jbauer (~jbauer@146.71.11.98)
[00:18:16] *** Joins: jbauer_ (~jbauer@146.71.11.98)
[00:18:34] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[00:21:07] *** Quits: jbauer (~jbauer@146.71.11.98) (Ping timeout: 256 seconds)
[00:24:04] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[00:25:31] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:26:00] *** Joins: CaCode (~CaCode@user/cacode)
[00:26:22] *** Joins: Klinda (~superleag@user/klinda)
[00:27:10] *** Joins: rgrinberg (~textual@200.5.63.76)
[00:27:16] *** Joins: kuoi (~guoyi@109.175.166.58)
[00:28:16] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[00:31:42] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[00:33:31] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[00:33:53] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:35:37] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 250 seconds)
[00:35:44] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[00:36:02] *** Parts: kadir (~kadir@78.178.105.36) (goodnight)
[00:39:51] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[00:41:19] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[00:41:23] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[00:41:57] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[00:42:20] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[00:42:39] *** Quits: esselfe (~steph@user/esselfe) (Quit: brb)
[00:43:37] *** Joins: derjanni (~Hans@ip-88-153-100-48.hsi04.unitymediagroup.de)
[00:44:08] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[00:45:40] *** Quits: luckyxxl (~luckyxxl@185.213.155.166) (Quit: bye)
[00:48:38] *** Quits: i336 (~i336@101.175.34.111) (Ping timeout: 260 seconds)
[00:50:15] *** Joins: i336 (~i336@101.175.59.161)
[00:50:52] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[00:54:23] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Read error: Connection reset by peer)
[00:54:23] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-9c74-c5a2-aa72-3fdc.inf6.spectrum.com) (Ping timeout: 246 seconds)
[00:55:08] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[00:56:30] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: zzz)
[01:01:34] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:02:42] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[01:05:45] <floatcomplex> baltazar: i wanna say last time i tried to use stdatomic with avr-libc, it correctly issued a call to an atomic increment function that then resulted in a linker error because libgcc doesn't implement it for avr. BUT you can just implement the function it's trying to call, using sei/cli and whatever else you need, and then it will use it when you do x++ on an atomic
[01:06:24] <floatcomplex> could have other benefits, not all stdatomic operations result in function calls, sometimes it just issues a memory barrier that it otherwise wouldn'tve
[01:07:36] *** Joins: aqua (~aqua@user/aqua)
[01:09:03] *** Quits: kuoi (~guoyi@109.175.166.58) (Quit: kuoi)
[01:10:46] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d4e2:b355:67fe:933c)
[01:11:03] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[01:13:30] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:9c57:4715:1ac5:a700) (Ping timeout: 268 seconds)
[01:17:15] *** aqua is now known as kish`
[01:19:51] *** Joins: kuoi (~kuoi@109.175.166.60)
[01:21:21] <Matt|home> im trying to use getopt to grab a filename as an argument to pass to another function.. can someone show me an example of this? 
[01:21:29] <Matt|home> yes i know getopt is posix..
[01:22:17] *** Quits: magla (~gelignite@55d4f4a1.access.ecotel.net) (Quit: Stay safe!)
[01:25:53] *** Joins: vimart (~vimart@85.255.236.236)
[01:26:01] <vimart> Hello World
[01:26:02] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:26:05] <Matt|home> hi
[01:26:12] <vimart> Hi Matt|home 
[01:26:21] <vimart> How are you pal?
[01:26:36] <clamiax> Matt|home: optarg is the filename, just strncpy() somewhere
[01:26:53] <Matt|home> thank you
[01:27:15] <vimart> thank you
[01:31:14] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[01:31:16] <clamiax> What's the longest possible format string for printf?
[01:31:35] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 264 seconds)
[01:32:37] <floatcomplex> lol
[01:33:20] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[01:34:32] *** Joins: fulldecent (~textual@wikipedia/fulldecent)
[01:37:00] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:37:43] <twkm> clamiax: varies.
[01:38:23] *** Joins: chair1 (~bbs@187.109.18.204)
[01:38:49] *** Quits: AmR (~AmREiSa@156.199.86.69) (Quit: Konversation terminated!)
[01:38:55] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:39:29] <clamiax> twkm: I discovered it's infinite.
[01:39:41] <twkm> not always.
[01:39:51] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d4e2:b355:67fe:933c) (Read error: Connection reset by peer)
[01:39:56] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:40:10] <clamiax> Not sure what you mean with "not always" but infinite is the longest possible
[01:40:12] <twkm> Matt|home: int c; while ((c = getopt(argc, argv, ":f:")) != -1) switch (c) { case 'f': f(optarg); break; ... }
[01:41:05] <twkm> beware strncpy.
[01:41:47] <clamiax> nah
[01:41:49] <clamiax> just be careful
[01:42:06] <fizzie> There's a good argument you can't have an infinitely long string in C, because you have to be able to form a pointer to each individual character, and there can only be at most 2 to the power of `sizeof (char *) * CHAR_BIT` unique `char *` values, and `sizeof (char *)` must be <= SIZE_MAX, which is a finite number.
[01:43:04] <floatcomplex> wait why does CHAR_BIT come into it
[01:43:13] *** Quits: eblip (~eb0t@90.209.246.132) (Ping timeout: 250 seconds)
[01:44:55] <fizzie> If you've got an object (like a pointer) that's N bytes in size, there are 2**(N * CHAR_BIT) possible different object representations, and therefore at most that many distinct values.
[01:45:17] <fizzie> You might argue for a tighter upper bound as well.
[01:46:12] <fizzie> Like, if you say strlen(s) must work for any string, then strings of course have a maximum length of SIZE_MAX.
[01:46:12] <floatcomplex> oh. yeah, i would
[01:46:54] <floatcomplex> you're saying not just that the length of strings is bounded, but that the set of strings is finite
[01:47:00] <floatcomplex> which, sure
[01:47:07] *** Quits: Iarfen (~quassel@ec2-3-225-168-229.compute-1.amazonaws.com) (Ping timeout: 250 seconds)
[01:47:21] <fizzie> Well, no, I was arguing the length of strings is bounded *because* the set of pointers is finite.
[01:47:39] <fizzie> (And because you must be able to form a pointer to each character of a string.)
[01:49:41] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[01:49:46] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 260 seconds)
[01:50:34] <clamiax> fizzie: you made a good point but I think I can call it virtually infinite as regards to a printf() format string
[01:50:56] <floatcomplex> 640 characters ought to be enough for anybody
[01:51:55] *** Joins: Enitin (~Enitin@82.102.22.86)
[01:52:02] <chair1> Hello. Would someone know if `static const int a = 5 > 6 ? 13 : 14;` is always evaluated at translation phase?
[01:53:56] <floatcomplex> chair1: it is either evaluated at translation, or it is a compiler error
[01:54:19] *** Quits: fulldecent (~textual@wikipedia/fulldecent) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:54:20] <floatcomplex> because it's static
[01:55:19] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:55:47] <fizzie> It's a constraint that the expression has to be a constant expression, but I don't think it's really specified "when" it's evaluated, since there's no way it could affect the observable behavior even if it happened during the loading of the program image rather than during translation.
[01:55:48] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[01:56:02] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[01:56:48] <floatcomplex> i suppose yeah
[01:57:09] <floatcomplex> in practice, the operands need to be known at compile time
[01:57:29] <twkm> vla enters the chat.
[01:57:36] <floatcomplex> -Wvla
[01:58:35] <fizzie> You could do `static const int a = \n #if 5 > 6 \n 13 \n #else \n 14 \n #endif \n ;` if you wanted to be real sure. ;)
[01:59:13] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:59:20] <chair1> Thanks for the info, I will refrain from telling you my preprocessor sins for now, I think I'll stick with the ? : operator then
[01:59:22] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:59:28] <fizzie> (Preprocessing directives are explicitly executed in translation phase 4.)
[02:00:59] *** Quits: mahmutov_ (~mahmutov@37.155.56.185) (Ping timeout: 264 seconds)
[02:01:00] <fizzie> `5 > 6 ? 13 : 14` is definitely a constant expression, so it'd be kind of weird if it wasn't evaluated during translation. But 6.6p2 just says "a constant expression *can* be evaluated during translation rather than runtime, and accordingly may be used in any place a constant may be", emphasis added.
[02:01:36] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[02:01:50] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:02:26] <floatcomplex> weird lack of commitment there
[02:03:13] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:04:17] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[02:05:32] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[02:05:50] *** Joins: seninha (~seninha@user/seninha)
[02:05:53] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[02:06:07] *** Quits: g2anj_ (~v@58.227.244.56) (Ping timeout: 265 seconds)
[02:07:33] <rcf> I read that as only requiring that constant expressions be usable where constants are required at translation, without requiring they otherwise be evaluated elsewhere. To allow for lazy compilation. 
[02:07:46] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[02:11:10] *** Quits: Phil-Work (~phil@62.3.100.20) (Remote host closed the connection)
[02:12:34] *** Quits: cpuid (~cpuid@ich.mag.co1a.at) (Quit: ZNC 1.8.2 - https://znc.in)
[02:12:56] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:13:03] *** Joins: shivesh (~shivesh@user/shivesh)
[02:13:24] *** Joins: cpuid (~cpuid@co5.at)
[02:14:16] *** Joins: mendel_munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[02:14:27] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Ping timeout: 256 seconds)
[02:15:07] *** Quits: mendel_munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Remote host closed the connection)
[02:16:36] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[02:19:22] *** Joins: twinkiecream (~tux@c-73-164-191-17.hsd1.or.comcast.net)
[02:19:37] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Ping timeout: 250 seconds)
[02:21:41] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[02:23:57] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[02:25:05] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[02:25:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:25:42] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:26:02] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[02:28:17] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[02:28:24] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Remote host closed the connection)
[02:28:45] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[02:28:59] *** Joins: fulldecent (~textual@wikipedia/fulldecent)
[02:31:33] *** Joins: Inline (~Inline@2a02:908:1252:7a80:eac0:c033:fea2:56dd)
[02:31:55] *** Joins: pulse_ (~pulse@user/pulse)
[02:33:16] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[02:33:32] *** Quits: pizdets (~pizdets@183.182.114.210) (Ping timeout: 240 seconds)
[02:33:43] *** Joins: katnis (uid15849@helmsley.irccloud.com)
[02:34:11] *** Joins: pizdets (~pizdets@183.182.110.210)
[02:34:54] *** Joins: Thedarkb (~Thedarkb@92.40.176.106.threembb.co.uk)
[02:35:25] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[02:38:10] *** Quits: phryk (~totallyno@user/phryk) (Quit: ZNC 1.8.2 - https://znc.in)
[02:41:20] *** Joins: Enitin (~Enitin@82.102.22.86)
[02:42:11] *** Quits: mimmy (~mimmy@72.142.88.18) (Quit: WeeChat 3.3)
[02:42:36] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[02:43:14] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[02:45:30] *** Joins: soapsudsxx (~soapsudsx@209.221.40.144)
[02:46:03] *** Joins: phryk (~totallyno@user/phryk)
[02:46:12] *** Joins: ottergauze (~ottergauz@cpc109817-linc13-2-0-cust186.12-1.cable.virginm.net)
[02:46:37] *** Quits: sudden (~cat@user/sudden) (Ping timeout: 268 seconds)
[02:47:21] *** Quits: phryk (~totallyno@user/phryk) (Remote host closed the connection)
[02:48:43] *** Joins: phryk (~totallyno@user/phryk)
[02:48:55] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:53:25] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[02:53:50] *** sudden is now known as Guest6295
[02:54:14] *** pulse_ is now known as pulse
[02:56:26] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[02:59:13] *** Quits: Guest6295 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Ping timeout: 256 seconds)
[02:59:44] *** Quits: ottergauze (~ottergauz@cpc109817-linc13-2-0-cust186.12-1.cable.virginm.net) (Read error: Connection reset by peer)
[03:01:59] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: Lost terminal)
[03:04:54] *** Joins: dohtem (uid524096@user/dohtem)
[03:05:11] *** Quits: AverageJoe (~AverageJo@2603:3024:1535:3f20:afae:4e81:8e96:396) (Ping timeout: 264 seconds)
[03:06:11] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[03:06:27] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:06:36] *** sudden is now known as Guest4609
[03:07:11] *** Quits: Guest4609 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[03:07:11] *** Joins: Guest4609 (~cat@user/sudden)
[03:09:27] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:10:31] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:11:08] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[03:11:20] <tusko> how do you tell gdb to run until it gets to some address?
[03:11:24] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[03:12:09] <dave0> set a breakpoint on the address and type run
[03:12:23] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:12:43] <Learath2> you google for `gdb set breakpoint at address` and google leads you to the relevant part of the gdb manual :P
[03:13:46] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[03:17:06] <tusko> don't you get brazen with me
[03:18:50] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[03:20:42] *** Quits: mort (~mort@188.166.114.29) (Quit: Ping timeout (120 seconds))
[03:20:42] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Quit: Ping timeout (120 seconds))
[03:20:52] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[03:20:56] *** Quits: satanist (~satanist@bureaucracy.bureaucracy.de) (Read error: Connection reset by peer)
[03:21:02] *** Joins: malloy (~jimery@116.30.220.108)
[03:21:13] *** Joins: mort (~mort@188.166.114.29)
[03:21:15] *** Joins: satanist (~satanist@bureaucracy.bureaucracy.de)
[03:21:16] *** Quits: Freman (~Freman@185.83.217.144) (Quit: ZNC - https://znc.in)
[03:21:34] *** Joins: Freman (~Freman@flatus.fremnet.net)
[03:21:39] *** Quits: _slate_ (~slate@2a01:4f8:c0c:f0a9::1) (Quit: quit)
[03:21:39] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[03:21:41] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[03:21:50] *** Joins: _slate_ (~slate@2a01:4f8:c0c:f0a9::1)
[03:22:00] *** Joins: cebor (~cebor@user/cebor)
[03:22:27] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[03:25:35] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[03:25:37] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:25:38] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:25:38] *** Joins: wroathe (~wroathe@user/wroathe)
[03:26:23] <Xgc> Lots of that going around.
[03:27:34] *** Quits: fulldecent (~textual@wikipedia/fulldecent) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:27:56] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[03:28:41] *** Joins: Enitin (~Enitin@82.102.22.85)
[03:29:23] <kuoi> I am just a primary learner for C language, my aim is to write some software calculating the Maximum likelihood or Bayesian inference related for gene. I just completed learning the basics of C, what should I do next step? Could someone gives me some suggestions?
[03:30:03] *** Joins: rgrinberg (~textual@190.113.102.153)
[03:30:07] *** Joins: fulldecent (~textual@wikipedia/fulldecent)
[03:32:12] *** Quits: jbauer_ (~jbauer@146.71.11.98) (Quit: Quitting)
[03:32:43] *** Quits: alch (~alch@151.82.151.132) (Read error: Connection reset by peer)
[03:37:04] *** Joins: buntu (~buntu@c-24-30-27-91.hsd1.ga.comcast.net)
[03:37:27] *** Joins: alch (~alch@151.38.23.178)
[03:37:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[03:38:25] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:40:33] *** Quits: chair1 (~bbs@187.109.18.204) (Quit: bye bye bye)
[03:42:47] <nitrix> Attempt to write the software, see what problems you run into and work on those.
[03:43:24] *** Quits: CaCode (~CaCode@user/cacode) (Read error: Connection reset by peer)
[03:43:38] *** Joins: CaCode (~CaCode@user/cacode)
[03:44:18] <kuoi> I am a little confused, because though I know what is the basis, I cant  convert them into the code which could solve the real problem
[03:44:39] <kuoi> Or I just need to write without referring others' code.
[03:45:16] <kuoi> I am trying to read part of the source code widely used in my subject, it's too difficulty to understand them
[03:47:11] <nitrix> What you learned was probably superficial then. You might've focused on aspects that are irrelevant (like the syntax) and not enough on how to translate your ideas into concepts that C supports (the semantics) and leverage the primitive tools it provides (the standard library).
[03:47:16] *** Quits: soapsudsxx (~soapsudsx@209.221.40.144) (Remote host closed the connection)
[03:49:40] *** Joins: soapsudsxx (~soapsudsx@209.221.40.144)
[03:49:55] <kuoi> Right, because basis is the syntax.
[03:50:37] <nitrix> You can't get anywhere in C with just knowing the grammar.
[03:51:16] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[03:51:17] <kuoi> Right, it's actually the true
[03:51:41] *** Quits: p0g0_ (~p0g0@64.45.183.0) (Ping timeout: 264 seconds)
[03:52:07] <kuoi> http://www.microbesonline.org/fasttree/FastTree-2.1.11.c
[03:52:20] <floatcomplex> i mean, can you write down in english what the algorithm is supposed to do, and then identify which part is hard to imagine expressing in c
[03:52:22] <kuoi> should I understand this kind of code one line by oneline
[03:53:05] <floatcomplex> not really
[03:53:51] <kuoi> Okay, I will try to do something simple first, convert my thinking to mathematical formula
[03:54:14] <kuoi> and then try to convert them into C language
[03:54:29] <kuoi> Thanks, I will do it after I finish my experiments.
[03:55:49] *** Quits: buntu (~buntu@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[03:55:49] *** Quits: rgrinberg (~textual@190.113.102.153) (Ping timeout: 250 seconds)
[03:56:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[03:57:09] *** Joins: esselfe (~steph@user/esselfe)
[03:57:48] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[03:57:59] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:58:43] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:01:27] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[04:01:39] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[04:02:49] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[04:07:36] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 245 seconds)
[04:15:04] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[04:16:45] *** Joins: ferdna (~ferdna@user/ferdna)
[04:17:02] *** Quits: Thedarkb (~Thedarkb@92.40.176.106.threembb.co.uk) (Ping timeout: 240 seconds)
[04:17:32] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 240 seconds)
[04:18:58] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[04:19:25] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Client Quit)
[04:19:41] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:21:04] *** Joins: Wulf (~Wulf@user/wulf)
[04:24:49] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[04:25:12] *** Joins: vysn (~vysn@user/vysn)
[04:26:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:27:22] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Client Quit)
[04:33:42] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:34:45] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:34:46] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:35:49] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[04:36:02] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:38:19] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[04:40:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:eac0:c033:fea2:56dd) (Ping timeout: 250 seconds)
[04:51:29] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[04:52:33] *** Quits: Posterdati (~posterdat@host-80-183-118-167.business.telecomitalia.it) (Ping timeout: 256 seconds)
[04:53:51] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[04:58:24] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Quit: The Lounge - https://thelounge.chat)
[04:59:43] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[05:02:02] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[05:02:54] *** Joins: rgrinberg (~textual@190.113.102.153)
[05:06:39] *** Joins: Posterdati (~posterdat@host-82-63-88-92.business.telecomitalia.it)
[05:10:47] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[05:22:13] *** Parts: fulldecent (~textual@wikipedia/fulldecent) (Textual IRC Client: www.textualapp.com)
[05:24:14] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 246 seconds)
[05:24:30] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:25:46] *** Joins: rgrinberg (~textual@190.113.102.153)
[05:31:56] *** Joins: acaciause (~acaciause@cpc140764-burn9-2-0-cust788.10-1.cable.virginm.net)
[05:32:39] *** Joins: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net)
[05:32:45] *** Joins: CaCode_ (~CaCode@user/cacode)
[05:32:49] *** Quits: kuku (~kuku@user/kuku) (Remote host closed the connection)
[05:35:02] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[05:37:38] *** Joins: mahmutov (~mahmutov@176.30.255.33)
[05:41:42] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[05:43:02] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[05:44:52] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[05:45:10] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[05:45:54] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 260 seconds)
[05:47:57] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[05:48:16] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[05:48:32] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 268 seconds)
[05:51:24] *** Quits: ChromaCat248 (~ChromaCat@user/chromacat248) (Remote host closed the connection)
[05:54:17] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:58:43] *** Joins: earnestly (~earnest@user/earnestly)
[06:03:23] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[06:07:12] *** Joins: quartz (~quartz@user/quartz)
[06:07:49] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[06:08:08] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[06:08:26] *** Quits: reset (~reset@user/reset) (Ping timeout: 245 seconds)
[06:10:49] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[06:11:09] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[06:12:11] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[06:13:20] *** Joins: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca)
[06:13:49] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[06:14:21] *** Joins: malloy (~jimery@116.30.220.108)
[06:16:20] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:16:55] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[06:20:52] *** Joins: reset (~reset@user/reset)
[06:21:47] <tusko> what types of variables can reentrant functions use
[06:23:51] <floatcomplex> any variables as long as you don't fuck up
[06:24:21] *** Quits: i336 (~i336@101.175.59.161) (Ping timeout: 256 seconds)
[06:24:50] <dave0> tusko: locals, function arguments, space you allocate with malloc
[06:25:08] <dave0> tusko: any functions that are themselves reentrant
[06:25:40] <dave0> tusko: normally not static variables, unless they are read-only
[06:26:26] <dave0> recursion is also ok
[06:30:01] *** Quits: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr) (Quit: ZNC 1.8.2 - https://znc.in)
[06:31:04] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:31:07] <SamuelMarks> hi
[06:31:23] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[06:31:36] <SamuelMarks> ,char filename[30]; strncpy(filename, "Redis-x64-3.2.0000-preview.zip", 30); const char *file_name = strdup(filename);
[06:31:37] <candide> char is required to be able to represent (at least) the values inclusively between -127 and 127 (signed char), or 0 and 255 (unsigned char). The representation chosen is implementation-defined, meaning some compilers will treat a char as signed, others unsigned. sizeof (char) is always 1. See also: CHAR_BIT, CHAR_MIN, CHAR_MAX and byte
[06:32:11] <SamuelMarks> Hmm how do I make candide run my program
[06:32:25] <dave0> ,cc printf("code goes here ");
[06:32:28] <candide> dave0: code goes here
[06:32:44] <SamuelMarks> ,cc char filename[30]; strncpy(filename, "Redis-x64-3.2.0000-preview.zip", 30); const char *file_name = strdup(filename);
[06:32:46] <candide> SamuelMarks: [warning: 'strncpy' output truncated before terminating nul copying 30 bytes from a string of the same length [-Wstringop-truncation]] no output: file_name = 0x41de10 "Redis-x64-3.2.0000-preview.zip"; filename = "Redis-x64-3.2.0000-preview.zip"
[06:32:49] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:33:15] <SamuelMarks> Oh it needs a nul byte, even though it's an array, hmm
[06:33:22] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[06:33:23] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:33:24] <dave0> SamuelMarks: it doesn't make much sense to copy a string to an array just to duplicate it... why not simply    char *file_name = strdup("Redis-x64-3.2.0000-preview.zip");
[06:33:32] <SamuelMarks> ,cc char filename[31]; strncpy(filename, "Redis-x64-3.2.0000-preview.zip", 31); const char *file_name = strdup(filename);
[06:33:35] <candide> SamuelMarks: no output: file_name = 0x41de10 "Redis-x64-3.2.0000-preview.zip"; filename = "Redis-x64-3.2.0000-preview.zip"
[06:33:43] *** Joins: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr)
[06:33:45] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:5199:7ff5:9e2e:9f2)
[06:33:47] <SamuelMarks> yeah I was getting an ASans issue on my AppleClang
[06:33:59] *** Quits: Spikeheron (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[06:33:59] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:34:25] <SamuelMarks> dave0 - Oh my actual code is more complicated, actually it's that I've got a non-reentrant function
[06:34:31] *** Joins: aklsh (~aklsh@106.201.150.245)
[06:34:59] <SamuelMarks> Hey actually maybe I'll just make it reentrant. I guess I just save a ptr at the beggining, and at the end I return that ptr? - Or is there a fancier way that doesn't require a separation?
[06:35:14] <dave0> depends on the function
[06:35:17] *** Quits: aklsh (~aklsh@106.201.150.245) (Client Quit)
[06:35:51] *** Joins: i336 (~i336@121.216.194.244)
[06:36:22] <SamuelMarks> Oh I was going to post it on codereview.stackexchange but you might as well critique it instead
[06:36:43] <SamuelMarks> https://github.com/offscale/libacquire/blob/da15002/libacquire/acquire_fileutils.h#L101-L125
[06:37:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[06:37:20] <SamuelMarks> Actually maybe it already is reentrant
[06:37:29] * SamuelMarks already forgot how he implemented code from a week ago
[06:38:22] <dave0> it's got a memory leak, you forgot to free the string your strdup'ed
[06:38:23] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[06:39:32] <dave0> that code looks like it's reentrant .. no global variables, strdup strtok_r strlen strcmp are all reentrant
[06:39:40] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[06:39:47] <dave0> i wouldn't do it that way, but what you've got looks ok
[06:40:22] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:40:50] <dave0> ext0 should be initialized, and j doesn't seem to be doing anything
[06:42:02] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Ping timeout: 240 seconds)
[06:43:44] <rcf> SamuelMarks: a better approach would be to avoid allocation at all. 
[06:43:59] *** Joins: dutch (~DutchIngr@user/dutch)
[06:44:07] <SamuelMarks> dave0 Yeah I often forget to free those, thanks I'll free now
[06:44:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:44:31] <SamuelMarks> rcf - DOesn't `strtok_r` avoid that?
[06:44:50] <SamuelMarks> Or you mean without split = strdup(filename)?
[06:45:01] <rcf> SamuelMarks: no, I mean you can avoid strtok entirely and save yourself the duplication. 
[06:45:27] <dave0> strrchr can find the last dot
[06:45:36] <dave0> but not second-to-last
[06:46:28] *** Joins: frost (~frost@user/frost)
[06:46:39] <rcf> Depending on your view of 'extension' you're best off using either the first dot or the last dot. 
[06:47:33] <SamuelMarks> Hmm maybe I'll change this to a do/while loop
[06:47:52] <SamuelMarks> Trying to figure out where to move the `free` to
[06:48:10] <SamuelMarks> rcf - Nah I'm seeing if my library supports the given extension, so I actually need both
[06:48:47] <SamuelMarks> `if(get_extension("foo.tar.gz") == TAR_GZ) return UNIMPLEMENTED`
[06:49:28] <dave0> SamuelMarks: because ext0 and ext1 point into your strdup'ed string, you can't free until you have finished with ext0 and ext1
[06:50:19] <SamuelMarks> and then I just `free(split)`?
[06:50:24] <dave0> SamuelMarks: you may need to    temp = something-strlen(ext0)-strlen(ext1); free(strdupedstring); return temp;
[06:50:48] <SamuelMarks> ouch, and each strlen is O(n)
[06:51:39] <computerquip> Reminds me of GTA5's loading bug ;)
[06:52:44] <caze> SamuelMarks: How do you know it's O(n)?
[06:54:21] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:54:22] <SamuelMarks> caze Or O(length of input string)
[06:54:38] <SamuelMarks> caze - Isn't that why people don't strlen too much?
[06:54:53] <acaciause> thats is O(n) you were right :)
[06:54:53] <caze> SamuelMarks: You need to measure it.
[06:55:02] <rcf> Assuming that they're checking arbitrary data only knowable at runtime it's not going to optimize to anything better. 
[06:55:31] *** Quits: i336 (~i336@121.216.194.244) (Ping timeout: 256 seconds)
[06:55:53] <caze> Also, does your string have to be infinite?
[06:56:01] <floatcomplex> are they hmm
[06:56:11] <SamuelMarks> rcf - Oh I'm more thinking about keeping a variable tracking how far in the string I seeked to
[06:57:16] *** Joins: i336 (~i336@121.216.7.35)
[06:57:18] <tusko> if I define a struct as a static, outside a function, is that heap and declaring it inside a function is stack?
[06:57:41] <SamuelMarks> tusko: nah that goes in the .data section
[06:58:06] <tusko> so where does declaration of a struct and its variables get assigned on the heap
[06:58:08] <SamuelMarks> Your general rule of thumb is if there's no malloc there's no heap allocation
[06:58:10] <tusko> what even is the heap
[06:58:14] <SamuelMarks> (there are caveats)
[06:58:15] <rcf> tusko: there is no heap in C. 
[06:58:31] <SamuelMarks> tusko: dynamically allocated memory
[06:58:39] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[06:58:46] <caze> The stack might actually be a linked list that's allocated from the heap.
[06:58:56] *** Joins: pucara (~i@181.95.206.147)
[06:59:02] <SamuelMarks> what was it called again, strbrok?
[06:59:42] <dave0> strspn strcspn stpbrk
[07:00:17] <SamuelMarks> *sbrk
[07:00:21] <SamuelMarks> yeah those
[07:00:29] <dave0> oh
[07:00:35] <dave0> i thought you meant string functions
[07:00:47] <SamuelMarks> This one https://en.wikipedia.org/wiki/Sbrk
[07:00:51] <dave0> brk and sbrk are old unix-ism's.. i don't think they are even in posix
[07:01:17] *** Quits: llh (~llh@user/llh) (Ping timeout: 264 seconds)
[07:01:33] <dave0> https://man.netbsd.org/sbrk.2
[07:01:36] <candide> Title of dave0's link: sbrk(2) - NetBSD Manual Pages
[07:02:05] <SamuelMarks> dave0 - I only read K&R like 3 months ago
[07:03:00] *** Joins: Nistar (Nistar@gateway/vpn/protonvpn/nistar)
[07:03:15] <SamuelMarks> cover to cover, that's why I keep bringing up old stuff :P
[07:03:36] <dave0> i dunno.. old stuff is still pretty good
[07:03:48] <SamuelMarks> Just got up to the x86 assembly chapter of Deep C secrets
[07:04:31] <Nistar> What's the convention to use when you are declaring a function that already exists in the standard library (and you're including from the standard library)? For example, I want to define my own `getline` function, but I'm also including stdio.h. Would I do `getline_`?
[07:04:41] <rcf> K&R explicitly points out that in C there is no notion of 'heap'
[07:04:50] <SamuelMarks> Nistar - They took that feature out in C89 I believe
[07:05:13] *** Parts: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca) (Good Bye)
[07:05:16] <SamuelMarks> It used to just take the most recent definition as being in scope, the word is
[07:05:17] <dave0> Nistar: no convention.. sometimes i see code that adds an x or two ..  getlinex()
[07:05:45] <floatcomplex> Nistar: call it worse_getline() :)
[07:05:55] <dave0> or, and dear to my heart, add a trailing zero
[07:05:58] <Nistar> In Python I'm accustomed to doing something like `getline_`
[07:06:43] <SamuelMarks> "interpositioning"
[07:07:03] * SamuelMarks literally scrolled through "Deep C Secrets" looking for that fancy word
[07:07:21] <floatcomplex> you don't have to pay by the character anymore, call it some_descriptive_getline_thing
[07:07:46] <rcf> Nistar: that's fine. Just never prefix with an underscore. 
[07:08:05] <floatcomplex> getwine()
[07:08:06] <dave0> _ isn't even a letter :-(
[07:08:36] <Nistar> Yeah, that was my followup question :-) I see a lot of these _ and __ variables. They have something to do with the compiler?
[07:09:01] <SamuelMarks> interpositioning here are some nice explanations that don't infringe copyright bs https://csit.kutztown.edu/~schwesin/fall20/csc235/lectures/Linking.html
[07:09:06] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:09:19] <SamuelMarks> (or go to page 110 of aforementioned book)
[07:09:57] *** Quits: fluter (~fluter@user/fluter) (Ping timeout: 250 seconds)
[07:12:06] <SamuelMarks> Nistar - That way you can use a C compiler older than 30 years and use interpositioning to replace the C standard library version of getline with your own from that point in time
[07:12:08] *** Quits: bruda (~bruda@172.58.63.98) (Quit: leaving)
[07:12:21] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[07:12:27] *** Joins: bruda (~bruda@172.58.63.98)
[07:12:55] *** Quits: bruda (~bruda@172.58.63.98) (Client Quit)
[07:12:55] <rcf> SamuelMarks: as for file extension issue, just store two pointers into filename and exchange them when necessary. 
[07:13:33] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[07:13:48] <floatcomplex> smh
[07:14:04] <floatcomplex> dynamic linking doesn't work on 30 year time scales
[07:14:05] <rcf> No need to allocate, no need to iterate more than once. 
[07:14:15] <Nistar> Oh okay interesting.
[07:15:18] <rcf> floatcomplex: win32 is now old enough to prove otherwise. 
[07:16:15] <Nistar> I'm working through K&R C 2e right now, so there's a lot of these examples where they have you re-define some function that already exists in the stdlib. It's definitely interesting to see how they, albeit simplistically, implement standard library functions.
[07:16:32] <SamuelMarks> https://ideone.com/bnMCR9
[07:18:43] <SamuelMarks> floatcomplex - There are also "static shared libraries"
[07:19:45] <dave0> ,cc const char *name = "foo.bar.tar.gz";   const char *ext0 = name + strlen(name), *ext1 = ext0; int a; for(a = 0; name[a] != '\0'; a++) { if(name[a] == '.') { ext0 = ext1; ext1 = name + a; } } printf("'%s' , '%s' , '%s' ", name, ext0, ext1);
[07:19:47] <candide> dave0: 'foo.bar.tar.gz' , '.tar.gz' , '.gz'
[07:20:04] <Nistar> So, what's the deal with function prototypes? I notice they're always towards the top of the file? Why do we have these in C?
[07:20:12] <SamuelMarks> I like how you skipped the strdup
[07:20:13] <dave0> the silly name+strlen(name) is just to initialize ext[01] to something
[07:20:26] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:20:31] *** Joins: knn (~kn@47.200.203.62)
[07:21:18] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[07:21:45] <SamuelMarks> dave0 Is that better than `ext0=NULL`?
[07:22:03] <dave0> SamuelMarks: yes, because you can use strcmp directly on it without first checking for NULL
[07:22:18] <dave0> ext0 and ext1 are always valid strings, even if there is no extension
[07:22:32] *** Quits: acaciause (~acaciause@cpc140764-burn9-2-0-cust788.10-1.cable.virginm.net) (Quit: Konversation terminated!)
[07:22:54] <dave0> ,cc const char *name = "plain_name_no_extension";   const char *ext0 = name + strlen(name), *ext1 = ext0; int a; for(a = 0; name[a] != '\0'; a++) { if(name[a] == '.') { ext0 = ext1; ext1 = name + a; } } printf("'%s' , '%s' , '%s' ", name, ext0, ext1);
[07:22:56] <candide> dave0: 'plain_name_no_extension' , '' , ''
[07:23:30] <SamuelMarks> Oh and do I need to null escape it
[07:23:33] *** Quits: earnestly (~earnest@user/earnestly) (Read error: Connection reset by peer)
[07:23:45] <dave0> no because they always point to somewhere in name
[07:23:46] <SamuelMarks> *nul
[07:23:47] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:31c:467:2a18:ca89)
[07:24:08] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[07:24:14] *** Quits: Nistar (Nistar@gateway/vpn/protonvpn/nistar) (Quit: WeeChat 3.3)
[07:24:36] *** Quits: knn (~kn@47.200.203.62) (Client Quit)
[07:25:10] <dave0> SamuelMarks: ext0 and ext1 are initialized to point to the trailing '\0' in name[]
[07:25:27] <dave0> SamuelMarks: so they are empty strings, but their address is always valid (as long as name is valid)
[07:27:05] <SamuelMarks> Ohhhh that actually leaves me with an interesting problem, ext0 points to "tar.gz" and ext1 points to ".gz", which means I still need to resolve "tar.gz" to "tar" and check if that's one of the valid middle extensions
[07:27:21] *** Joins: Nistar (Nistar@gateway/vpn/protonvpn/nistar)
[07:27:27] <Nistar> Sorry about that, disconnected.
[07:27:29] *** Joins: earnestly (~earnest@user/earnestly)
[07:27:29] <SamuelMarks> Then maybe use this list https://en.wikipedia.org/wiki/List_of_archive_formats
[07:28:09] <rcf> Nistar: prototypes are a cheap way to define an API, especially considering the state of computing in the 1970s. 
[07:28:10] <SamuelMarks> Though actually "tar" still seems to be the only valid middle extension https://en.wikipedia.org/wiki/List_of_archive_formats#Archiving_and_compression
[07:28:31] <SamuelMarks> rcf - Even better with optional types in prototype :P
[07:28:38] *** Joins: missogra (~missogra@dynamic-077-006-252-191.77.6.pool.telefonica.de)
[07:28:57] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[07:29:56] <dave0> SamuelMarks: you could use strncmp    if(strncmp(ext0, ".tar", 4) == 0) { ... middle extension is tar ... }
[07:30:16] <SamuelMarks> Oh true
[07:30:37] <SamuelMarks> cc,strncmp(".", ".", 4) == 0
[07:30:39] <rcf> Or just bite the bullet and compare against a simple list of (possibly double) extensions. 
[07:31:02] <rcf> Which is necessary given that things like .tgz are in fairly wide use. 
[07:31:05] <SamuelMarks> rcf - Since I only care about archive formats, and "tar" is the only one that doubles, I think I'm in the clear
[07:32:56] *** Quits: alch (~alch@151.38.23.178) (Read error: Connection reset by peer)
[07:34:25] <rcf> Or just be obnoxious like traditional tar and demand the user specify the compression algorithm 
[07:35:17] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[07:35:49] <SamuelMarks> rcf - I'm being so friendly that I will use the OS provided archive library even if it's shitty and only supports zip (thanks Windows)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:04] <SamuelMarks> or bring your own lib, and it'll support everything (thanks libarchive)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:49] *** Joins: alch (~alch@151.38.34.184)
[07:37:43] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[07:37:47] <rcf> In that particular case I'd probably say scrap the file extension checking entirely and simply attempt to load the archive with the respective library 
[07:38:16] <SamuelMarks> rcf - Only libarchive supports that, the rest need you to specify the compression used
[07:38:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[07:38:21] <SamuelMarks> (or at least the ext)
[07:38:41] <dave0> i lie about the file extension because stupid windows :-)
[07:38:52] *** Quits: fentanyl (~ryan@user/sapi01) (Quit: leaving)
[07:38:58] <rcf> archive_read_support_format_all() and archive_read_support_filter_all() allow you to avoid doing this. 
[07:39:11] <SamuelMarks> pop quiz about file extension based on useless trivial I read yesterday, why is "a.out" a thing
[07:39:33] <rcf> And as for Windows... if it's only ZIP, you only need to try to open ZIP, and yell at the user if it doesn't work. 
[07:39:39] <dave0> i believe dennis ritchie mentions that in his paper on c
[07:39:45] <rcf> a.out is the old UNIX executable format. 
[07:40:30] <dave0> ,chist
[07:40:30] <candide> The Development of the C Language, by Dennis M. Ritchie: http://www.bell-labs.com/usr/dmr/www/chist.html or http://port70.net/~nsz/c/c89/dmr_the_development_of_the_c_language.pdf
[07:40:52] <dave0> i've got a vague notion dennis mentioned it in that ^
[07:41:10] <dave0> maybe
[07:41:15] <dave0> <- bad memory
[07:41:23] *** Joins: pulse (~pulse@user/pulse)
[07:41:50] *** Joins: igloo123 (~igloo123@cpc140764-burn9-2-0-cust788.10-1.cable.virginm.net)
[07:41:52] *** Joins: rcf1 (~rcf@mab.sdf.org)
[07:41:58] <SamuelMarks> Nah it's older
[07:42:24] <Nistar> Damn, nice link candide. Note to self: hang out here more.
[07:42:33] <SamuelMarks> It stands for assembler output
[07:42:34] *** Quits: rcf1 (~rcf@mab.sdf.org) (Client Quit)
[07:42:47] *** Joins: missogra_ (~missogra@dynamic-077-006-033-160.77.6.pool.telefonica.de)
[07:43:02] <SamuelMarks> "On the PDP-7 (even before the B language), there was no linker. Programs were created by assembling the catenation of all the source files, and the resulting assembler output went in a.out"
[07:43:08] <SamuelMarks> rcf dave0 ^
[07:43:15] <dave0> ah ok
[07:43:35] <SamuelMarks> xD, you're welcome for the useless facts
[07:44:11] *** Joins: CaCode- (~CaCode@user/cacode)
[07:45:00] *** Quits: missogra_ (~missogra@dynamic-077-006-033-160.77.6.pool.telefonica.de) (Client Quit)
[07:45:11] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[07:45:27] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[07:46:18] *** Quits: missogra (~missogra@dynamic-077-006-252-191.77.6.pool.telefonica.de) (Ping timeout: 260 seconds)
[07:46:47] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 250 seconds)
[07:51:29] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[07:52:29] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 268 seconds)
[07:52:59] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 246 seconds)
[07:52:59] *** jmiehe1 is now known as jmiehe
[07:54:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:54:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:54:53] *** Joins: wroathe (~wroathe@user/wroathe)
[07:55:45] *** Quits: puke (~puke@user/puke) (Quit: puke)
[07:55:58] * SamuelMarks added a new commit with dave0's function verbatim, dave0 do you want me to ammend the commit @ tagging your GitHub username?
[07:56:43] <dave0> just say dave0 on irc
[07:57:01] <dave0> thanks :-)
[07:57:47] *** Joins: fluter (~fluter@user/fluter)
[07:59:00] <floatcomplex> why isn't there a c compiler in ebpf
[07:59:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[07:59:33] <dave0> do you want me to sign a copyright waiver
[07:59:44] <dave0> cos i wont :-p
[07:59:48] <dave0> it's public domain
[07:59:49] <floatcomplex> you could cat together all of tcc and pipe it through that and get an a.out that could then be used to compile gcc 4.7.4 and then use that to compile whatever
[08:04:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:05:33] <SamuelMarks> dave0 - It wouldn't take much for me to change the license from (Apache-2.0 OR MIT) to CC0… just need to license tiny portions from other codebases that are part of my large project differently
[08:05:49] *** Joins: tbcr- (~tbcr@107.13.189.161)
[08:05:55] <SamuelMarks> Just need an incentive
[08:06:08] <SamuelMarks> Also thanks :)
[08:06:26] *** Joins: llh (~llh@user/llh)
[08:06:39] <dave0> i dunno, licenses just seem to be a pain.. i like public domain
[08:06:59] *** Joins: fcresende_ (~quassel@vps35015.publiccloud.com.br)
[08:07:05] <dave0> there's always a gnu gpl zealot :-p
[08:07:08] <rcf> floatcomplex: the real question is when we get rust for ebpf, or maybe even C++, because lord knows they seem to be cramming just about everything in there 
[08:07:22] *** Quits: igloo123 (~igloo123@cpc140764-burn9-2-0-cust788.10-1.cable.virginm.net) (Quit: Igloo IRC: https://iglooirc.com)
[08:09:25] <dave0> the other day i saw some code copied directly from FreeBSD byte-for-byte and they just slapped a GPLv3+ license on it
[08:09:43] <dave0> no added value
[08:10:27] <oldlaptop> dave0: The trouble with that is that public domain (strictly speaking) turns out to be a significantly worse pain than permissive licensing
[08:10:45] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[08:10:55] <rcf> Only in terrible countries which have surrendered completely to the copyright cartels 
[08:10:58] <dave0> oldlaptop: but how? you can do anything with public domain even claim you wrote it
[08:11:11] <rcf> dave0: the public domain literally does not exist in much of Europe, for example. 
[08:11:27] <rcf> No matter what you say, you cannot abandon copyright. 
[08:11:27] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[08:11:30] <oldlaptop> some jurisdictions treat copyright as inalienable, and even outside them the idea tends to make the legal department itchy
[08:11:48] <oldlaptop> the sqlite authors have to sell "sqlite licenses" even though they categorically disclaim any copyright interest in sqlite
[08:11:55] <floatcomplex> rcf: the only redeeming quality of rust in the kernel is it's the final nail in the coffin for c++ in the kernel
[08:12:11] *** Joins: ra4king1 (~ra4king@roiatalla.com)
[08:12:16] <oldlaptop> (and they also can't take patches in practice because they need paperwork signed disclaiming copyright)
[08:12:25] <caze> There is C++ in the kernel!?!?
[08:12:31] <floatcomplex> no
[08:12:39] <floatcomplex> but there will be rust :/
[08:13:15] <floatcomplex> having rust means there is no way there will be c++, is the only good thing about it
[08:13:26] <oldlaptop> https://www.sqlite.org/copyright.html the last bullet point is presumably the driving one
[08:13:35] * dave0 clicks
[08:13:51] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[08:13:51] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (*.net *.split)
[08:13:51] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (*.net *.split)
[08:13:51] *** Quits: tbcr_ (~tbcr@107.13.189.161) (*.net *.split)
[08:13:51] *** Quits: candide (~pbot3@about/c/bot/candide) (*.net *.split)
[08:13:51] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[08:13:51] *** Quits: kurfen (~kurfen@45.152.181.20) (*.net *.split)
[08:13:51] *** Quits: grange_c (~grange_c@vps-9763379d.vps.ovh.net) (*.net *.split)
[08:13:51] *** Quits: ra4king (~ra4king@roiatalla.com) (*.net *.split)
[08:13:51] *** Quits: twkm (twkm@rfc1459.net) (*.net *.split)
[08:13:51] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[08:13:51] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[08:13:51] *** Quits: fcresende (~quassel@vps35015.publiccloud.com.br) (*.net *.split)
[08:13:51] *** Quits: citrons (~citrons@alt.mondecitronne.com) (*.net *.split)
[08:13:51] *** Quits: begriffs (~begriffs@user/begriffs) (*.net *.split)
[08:13:51] *** Quits: davros (~davros@host86-185-61-22.range86-185.btcentralplus.com) (*.net *.split)
[08:13:51] *** Quits: mark_infinite (~skynet@ppp-94-66-136-166.home.otenet.gr) (*.net *.split)
[08:13:51] *** Quits: clamiax (~clamiax@net-93-149-158-199.cust.vodafonedsl.it) (*.net *.split)
[08:13:51] *** Quits: e36freak (~e36freak@user/e36freak) (*.net *.split)
[08:13:52] *** ra4king1 is now known as ra4king
[08:14:28] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[08:14:53] <dave0> oldlaptop: oh geez you gotta sign your life away
[08:15:02] <rcf> dave0: the end result is that if you claim it is in the public domain, you can then turn around and sue them for copyright infringement regardless, because you are legally prohibited from making that initial public domain claim. 
[08:15:14] <oldlaptop> Huh?
[08:15:51] *** Quits: soapsudsxx (~soapsudsx@209.221.40.144) (Remote host closed the connection)
[08:15:53] <dave0> it says the contributors had to sign an affidavit
[08:16:04] <dave0> why do they have to sign anything at all?
[08:16:07] <oldlaptop> yes, disclaiming copyright in their contributions to sqlite
[08:16:12] <oldlaptop> because public domain is a pain, that's why
[08:16:18] <dave0> oh
[08:16:46] <oldlaptop> there is a reason sqlite is pretty much the only prominent open-source project that has made that particular mistake
[08:16:47] *** Joins: soapsudsxx (~soapsudsx@209.221.40.134)
[08:17:43] <rcf> So, just use a permissive license. There is no reason people need to be allowed to pretend they wrote your code, and that's all public domain actually gives anyone over a standard license. 
[08:17:57] <oldlaptop> some of the permissive licenses let them do that anyway
[08:18:24] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[08:18:24] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[08:18:24] *** Joins: steve_ (~steve@ool-182c2b80.dyn.optonline.net)
[08:18:24] *** Joins: candide (~pbot3@about/c/bot/candide)
[08:18:24] *** Joins: cursey (~cursey@user/cursey)
[08:18:24] *** Joins: kurfen (~kurfen@45.152.181.20)
[08:18:24] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[08:18:24] *** Joins: grange_c (~grange_c@vps-9763379d.vps.ovh.net)
[08:18:24] *** Joins: twkm (twkm@rfc1459.net)
[08:18:24] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[08:18:24] *** Joins: citrons (~citrons@alt.mondecitronne.com)
[08:18:24] *** Joins: begriffs (~begriffs@user/begriffs)
[08:18:24] *** Joins: mark_infinite (~skynet@ppp-94-66-136-166.home.otenet.gr)
[08:18:24] *** Joins: clamiax (~clamiax@net-93-149-158-199.cust.vodafonedsl.it)
[08:18:24] *** Joins: e36freak (~e36freak@user/e36freak)
[08:19:52] <nitrix> rcf, What about the UNLICENSE?
[08:20:01] <SamuelMarks> CC0 also
[08:20:06] <SamuelMarks> Maybe even MIT-9
[08:20:09] <SamuelMarks> Maybe even MIT-0
[08:20:14] <SamuelMarks> (not 9)
[08:20:37] * SamuelMarks is a Stephan Kinsella fan
[08:21:03] *** Joins: davros (~davros@host86-185-61-22.range86-185.btcentralplus.com)
[08:21:16] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[08:21:59] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[08:22:24] <SamuelMarks> Before the morrow begins; I'm off; thanks for the help
[08:22:28] <rcf> nitrix: I share the view of those that find it inferior to CC0
[08:22:29] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Quit: leaving)
[08:22:35] <nitrix> rcf, My understanding was that UNLICENSE intentionally tried to avoid the problems SQLite ran into, despite aiming for the Public Domain.
[08:22:36] <nitrix> rcf, https://ar.to/2010/01/dissecting-the-unlicense
[08:25:58] <floatcomplex> needs a less cutesy name for lawyers to not casually paint a target on it
[08:26:29] *** Joins: dec0d3r_ (~dec0d3r@2001:8004:1d82:1a0f:1d6f:e820:a0ed:ee97)
[08:27:38] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Ping timeout: 268 seconds)
[08:27:55] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Remote host closed the connection)
[08:28:20] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[08:31:48] <rcf> I still find such licenses fundamentally flawed in practice, however. They're fine *now*, but requiring attribution will make things a lot easier if the original author's project goes defunct and people several times removed from the original become convinced they have exclusive rights to what they can claim they developed. 
[08:31:51] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[08:32:25] *** Quits: mahmutov (~mahmutov@176.30.255.33) (Ping timeout: 256 seconds)
[08:33:01] *** Joins: dec0d3r__ (~dec0d3r@101.181.78.107)
[08:33:10] <rcf> So the 'to the detriment of our heirs and successors' bit ends up ringing too true to me, albeit in a different manner than intended. 
[08:35:19] *** Quits: dec0d3r_ (~dec0d3r@2001:8004:1d82:1a0f:1d6f:e820:a0ed:ee97) (Ping timeout: 250 seconds)
[08:38:57] <oldlaptop> :|
[08:39:58] <oldlaptop> Certainly worked out well with BSD to have a 400-pound gorilla with a copyright interest to defend. (As opposed to AT&T/USL being able to successfully claim they owned the permissively-licensed code.)
[08:42:12] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[08:43:14] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[08:44:00] <floatcomplex> what we need is to develop a societal moral repugnancy for the idea that owning the rights to some intangible, possibly infinite resource somehow entitles to passive income
[08:44:10] <floatcomplex> license issues would sort themselves out
[08:47:09] <rcf> But until hell does indeed freeze over and become a world-class skiing resort, one should be pragmatic in attempting to stick it to the man. 
[08:49:27] *** Joins: V-T60 (~v@91.203.24.166)
[08:50:56] <Nistar> A little bit stuck on K&RC: 1-19. Having trouble iterating over and array and assigning a value to it. Some help would be hugely appreciated ( https://bpa.st/PMWA @ line 17) 
[08:54:47] <Nistar> The output of ^ is an absolutely empty string. I'm trying to have it reverse any given char[] it's given.
[08:54:49] <floatcomplex> are you not supposed to use strlen
[08:55:07] <Nistar> The book hasn't introduced you to strlen yet
[08:55:56] <floatcomplex> are you meant to reverse the string in place, or merely print the string in reverse order
[08:56:06] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:56:18] <floatcomplex> trying to work out what the requirement is, from the code in front of me
[08:56:38] <floatcomplex> (on my phone, without k&r)
[08:57:06] <Nistar> I think mutating it in place, because there's a similar function called `copy` in chapter 1.9 of K&R C, that copies two char[]
[08:57:25] <Nistar> I guess I could just have it print the string in reverse order... but I kind of want to do it like this.
[08:57:37] <floatcomplex> ok. so you don't need the reversed[] array at all either way
[08:58:06] <apotheon> floatcomplex: I like your plan for societal moral repugnancy.
[09:00:04] <Nistar> floatcomplex: How do you recommend I do this without that reversed[] array?
[09:00:46] <nitrix> ,kr 1-19
[09:00:46] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-19. Write a function reverse(s) that reverses the character string s. Use it to write a program that reverses its input a line at a time.
[09:01:11] <floatcomplex> just write a swap() macro that works, and iterate over half the array with the guts of it, then delete the macro
[09:01:22] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[09:01:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[09:01:33] <Nistar> Book hasn't gotten to macros yet :-)
[09:01:40] <floatcomplex> don't use a macro then
[09:01:51] <tusko> Let us cultivate our garden.
[09:02:22] <floatcomplex> Nistar: just imagine how you would write one, and put the body of that in a for loop
[09:02:33] <floatcomplex> has the book covered for loops yet
[09:03:30] <Nistar> It has covered for loops by 1-19. Anyway, appreciate your help floatcomplex.
[09:04:15] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[09:06:59] <nitrix> Nistar, Your reverse function is copying '\0' accidently.
[09:07:29] <Nistar> Oh? Isn't my if statement taking care of that?
[09:08:02] <nitrix> Nistar, line_len() does give you the right length, which you store in `i`, but then on line #15, you read the character to copy with line[i], which on the very first iteration, will be exactly on the '\0'.
[09:08:46] <nitrix> Given the string "abc", it has a length of 3, but the index at the location 3 isn't 'c', it's '\0'.
[09:10:18] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[09:11:17] <Nistar> Oh there we go.
[09:11:17] <nitrix> You have a nice little defensive if check for '\0', but the --i and j++ aren't part of the if block.
[09:11:35] <Nistar> I could do something like this: int i = line_len(line)-1;
[09:11:54] <nitrix> That wouldn't work either, that'd strip the last character of the string you're copying.
[09:12:22] <nitrix> Like I said, you're calculating the length correctly, `i` is fine.
[09:13:23] <Nistar> I can iterate j inside of that defensive block and that looks like it solves it
[09:13:33] <nitrix> Indeed, that should fix it.
[09:13:38] <Nistar> Thanks a ton nitrix !
[09:14:07] <Nistar> I had a feeling I was close and it was something stupid.
[09:14:42] <nitrix> Nistar, Congrats. New assignment, make the function reverse the string in place.
[09:15:56] <Nistar> Sounds like a good task.
[09:16:07] <Nistar> I'm going to finish off this whole chapter and attempt it :-)
[09:17:15] <nitrix> By only reading and writing to the `line` array, swapping the position of pairs of characters.
[09:18:44] <nitrix> That'll make `reverse` a bit more useful, because right now the reversed string stays inside of the `reverse` function.
[09:20:40] *** Quits: vimart (~vimart@85.255.236.236) (Ping timeout: 268 seconds)
[09:27:02] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[09:28:11] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 250 seconds)
[09:31:32] <nitrix> Nistar, Here's my answer to compare against: https://godbolt.org/z/9Ye1v4jda
[09:32:50] *** Joins: vimart (~vimart@85.255.233.85)
[09:33:13] <nitrix> It gets more complicated with Unicode.
[09:39:25] *** Joins: karakedi (~eAC53C340@user/karakedi)
[09:42:30] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[09:44:15] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[09:44:27] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[09:45:08] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[09:46:46] *** Joins: vysn (~vysn@user/vysn)
[09:49:39] *** Quits: i336 (~i336@121.216.7.35) (Ping timeout: 268 seconds)
[09:50:03] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[09:50:08] *** Joins: i336 (~i336@121.217.7.224)
[09:55:56] *** Quits: vimart (~vimart@85.255.233.85) (Quit: WeeChat 2.8)
[10:00:19] <rcf> nitrix: nonsense, that's what U+200F is for! 
[10:02:06] <Nistar> Thanks. I'm heading out.
[10:02:17] *** Quits: Nistar (Nistar@gateway/vpn/protonvpn/nistar) (Quit: WeeChat 3.3)
[10:07:33] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[10:12:05] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:13:54] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[10:15:21] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:18:08] *** Quits: Tempesta (Tempesta@user/tempesta) (Quit: See ya!)
[10:18:53] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 250 seconds)
[10:18:57] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[10:19:35] *** Joins: Samian (~s@user/samian)
[10:19:37] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:20:02] *** Quits: derjanni (~Hans@ip-88-153-100-48.hsi04.unitymediagroup.de) (Ping timeout: 240 seconds)
[10:23:40] *** Joins: derjanni (~Hans@p4ff80526.dip0.t-ipconnect.de)
[10:28:28] *** Quits: derjanni (~Hans@p4ff80526.dip0.t-ipconnect.de) (Quit: Textual IRC Client: www.textualapp.com)
[10:29:24] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[10:29:52] *** Joins: pingpongball (~pingpongb@43.228.192.104)
[10:29:57] <pingpongball> Hello guys
[10:30:10] <pingpongball> I'm compiling emacs with gccemacs ,with CFLAGS
[10:30:20] <pingpongball> I dont know much about CFLAGS
[10:33:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:35:54] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[10:36:13] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 250 seconds)
[10:38:18] *** Joins: digilink (~digilink@user/digilink)
[10:38:40] <pnbeast> pingpongball, good for you.  The first step in fixing your CFLAGS problem is admitting that you have a CFLAGS problem.  But don't forget about making amends and calling your compilation sponsor.
[10:38:58] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: AA TOO NEE ZUBARALHADEEEEEEEEEEEED)
[10:39:20] <pingpongball> but CFLAGS='-O3 -fomit-frame-pointer -march=native' these flags to optimize emacs
[10:39:32] <pingpongball> If there more, please tell me pnbeast thank you
[10:39:40] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[10:39:57] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:41:12] *** Joins: retroid_ (~retro@2e41e9c8.skybroadband.com)
[10:41:31] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[10:42:42] *** Quits: dec0d3r__ (~dec0d3r@101.181.78.107) (Quit: Leaving)
[10:43:00] <dave0> no amount of flags will optimize emacs
[10:43:20] <dave0> eight megabytes and continually swapping
[10:44:24] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[10:44:32] *** Quits: retro_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[10:45:06] <apotheon> The way emacs bootstraps its installation is certifiably insane.
[10:45:15] <pingpongball> which is more faster -O3 or -Ofast ?
[10:45:45] <dave0> the first one
[10:45:47] <apotheon> dunno, never use them
[10:45:53] <apotheon> oh, dave0 knows, maybe
[10:46:00] <pingpongball> =L  why ?
[10:46:03] <dave0> nope, i've got no idea
[10:46:08] <dave0> i just said something to shut them up
[10:46:08] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[10:46:10] <apotheon> s/installation/build/
[10:46:40] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: AA TOO NEE ZUBARALHADEEEEEEEEEEEED)
[10:46:40] *** Quits: cation (cation@user/cation) (Remote host closed the connection)
[10:46:45] <apotheon> pingpongball: Were you asking me why?
[10:46:51] <pingpongball> yes
[10:47:19] <pingpongball> I'm compiling a program (emacs) with having CFLAGS.
[10:47:24] <apotheon> I prefer reliable software over software that's just unreliable faster.
[10:47:36] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 245 seconds)
[10:47:46] *** Joins: Tempesta (~Tempesta@user/tempesta)
[10:48:03] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[10:48:56] <pingpongball> I want faster, if it is unreliable, i'll see in future, i just need program faster for now , like that vscode or sublime does.
[10:49:22] <apotheon> Have fun with that.
[10:49:23] <pingpongball> so i'm asking for those CFLAGS for gccs  :)
[10:49:40] <dave0> i think there's a sweet spot where the time it takes to crash and restart is less than the longest time it works reliably
[10:49:40] <apotheon> I still don't know, because I never bothered to find out, because I had no use for it.
[10:49:56] *** Joins: cation (cation@user/cation)
[10:50:09] <apotheon> dave0: That's a deceptively horrific thing to say.
[10:50:11] <dave0> pingpongball: just do    ./configure && make
[10:50:33] <dave0> apotheon: thanks :-)
[10:50:46] <pingpongball> :b  i'm on debian, i'll --prefix .
[10:51:11] <pingpongball> Yes i've done , and hit enter, and compiling :)  thanks for not good answer though :(  .
[10:52:23] *** Quits: i336 (~i336@121.217.7.224) (Ping timeout: 256 seconds)
[10:52:53] <apotheon> "YES!  51% UPTIME!"
[10:54:11] <apotheon> I remember when software written for an older computer ran much faster on a newer computer, such that a video game became unplayably fast.
[10:54:15] *** Joins: i336 (~i336@101.175.9.207)
[10:54:15] <apotheon> back in the '80s
[10:54:31] <apotheon> That was funny, but at the same time it was kinda sad.
[10:54:48] <apotheon> Of course, some computers came with a button you could press to tell it to run slower, at that point.
[10:55:21] <apotheon> I should do some reading and go to bed.
[10:55:35] <dave0> the turbo button!
[10:55:37] <apotheon> I'm tempted to read K&R again, but . . . I think I'll just finish the book I'm already reading.
[10:55:41] <dave0> which actually slowed the computer down :-)
[10:55:52] <apotheon> Yeah!  I didn't want to say "turbo button" in case someone didn't take it seriously.
[10:56:04] <apotheon> It occurs to me that's exactly why I *should* have said it.
[10:56:28] <apotheon> dave0: Well . . . you're turning off the turbo, I guess.
[10:56:29] *** Quits: pingpongball (~pingpongb@43.228.192.104) (Quit: Client closed)
[10:56:54] <apotheon> Do people really use CFLAGS on Debian?
[10:57:06] <apotheon> whatever
[10:57:11] <apotheon> I was going to read and sleep.
[10:57:15] <apotheon> Should I?
[10:59:13] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[11:01:17] <apotheon> g'night
[11:03:06] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (Quit: Client limit exceeded: 20000)
[11:06:02] *** Quits: i336 (~i336@101.175.9.207) (Ping timeout: 260 seconds)
[11:07:33] *** Joins: i336 (~i336@121.217.98.198)
[11:13:31] *** Quits: i336 (~i336@121.217.98.198) (Ping timeout: 268 seconds)
[11:14:42] *** Joins: i336 (~i336@101.174.86.98)
[11:15:03] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 256 seconds)
[11:17:36] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Read error: Connection reset by peer)
[11:17:41] *** Joins: user51 (~user51@176.228.59.81)
[11:18:21] *** Joins: arinov (~arinov@213.194.126.155)
[11:18:57] *** Joins: Guest10 (~Guest10@157.41.191.170)
[11:19:38] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[11:20:31] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[11:22:28] <user51> grammar question: is the '&'/reference operator the inverse of '*'/dereference operator?
[11:22:38] *** Joins: JonBardo (~Jonathan@clients-xsf-98.upc.es)
[11:23:06] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[11:23:30] <smallville7123> yes
[11:23:37] <smallville7123> but it DOES NOT do magic
[11:23:51] <user51> what does magic mean?
[11:24:49] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:25:15] <smallville7123> eg it cannot be used to for example, obtain a "base pointer", eg a pointer which always exists at X location in memory and points to the address of Y address which may also point to an address
[11:25:45] <smallville7123> (depending on the memory layout such as address randomization)
[11:25:59] <user51> huh, i haven't thought that far
[11:27:05] <smallville7123> eg int x; void * addr = &x; void * addr_of_addr = &addr; // points to the address of the variable that is created by the compiler, not the address of the variable that may be pointed to by another address
[11:27:16] <user51> oh yeah, does that mean *(&x) is a no op?
[11:27:18] *** Quits: JonBardo (~Jonathan@clients-xsf-98.upc.es) (Client Quit)
[11:27:19] *** Parts: Guest10 (~Guest10@157.41.191.170) ()
[11:27:42] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 260 seconds)
[11:28:01] *** Quits: esselfe (~steph@user/esselfe) (Ping timeout: 245 seconds)
[11:29:50] <smallville7123> for example if address 0x12314524 and address 0x22a2dc43 both contain the value 0x1234abcd and 0x1234abcd is the address of x (when examining the value of addr), then only ONE of the two possible addresses is the true address which is assigned by the compiler/OS to that variable
[11:31:29] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[11:32:03] *** Quits: rahl (~rahl@102.114.19.10) (Ping timeout: 256 seconds)
[11:32:08] <smallville7123> eg 0x22a2dc43 could HAPPEN to contain the value 0x1234abcd and could infact be valid as managed by the OS or C implementation, eg to monitor memory bugs such as in asan, or it could just be a random value that just happens to match
[11:32:48] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[11:33:38] *** Joins: rahl (~rahl@102.114.43.243)
[11:33:58] *** Quits: alch (~alch@151.38.34.184) (Read error: Connection reset by peer)
[11:34:08] *** Joins: geonicz (~geonicz@86.57.152.167)
[11:34:49] <smallville7123> but ALL values accessed/assigned via & will be ASSIGNED by the compiler, for example you cannot use this to magically obtain the address of a kernel page or similar unless you actually scan the OS memory itself and look to a chain of pointers leading to such memory if possible or some other technique (tho this requires very high knowlege of both the kernel, OS, and memory layout which i dont have)
[11:35:34] *** Joins: AsenMx (~AsenMx@user/asenmx)
[11:36:14] <smallville7123> tho for example obtaining a kernel page or similar is HIGHLY dependant on the OS and Kernel
[11:36:19] <dave0> user51: yes  *(&x) == x
[11:36:36] <dave0> user51: oh there's exceptions... that doesn't work for an array
[11:36:41] <dave0> i think
[11:37:10] *** Joins: alch (~alch@151.38.89.184)
[11:37:57] <dave0> hmm it works on the robot
[11:38:07] <dave0> there's gotta be an exception that i can't think of right now
[11:38:17] *** Quits: i336 (~i336@101.174.86.98) (Ping timeout: 256 seconds)
[11:40:11] *** Joins: i336 (~i336@121.217.2.209)
[11:40:50] <smallville7123> or a more realistic scenario, for example, gaining access to the memory of another process, which due to OS and Kernel memory protection techniques such as virtual memory and memory address space, simply means an application CANNOT simply read beyond its assigned region of memory, eg read below 0x0 or above say 0xffffffff, and all addresses between 0x0 and 0xffffffff will belong to the RUNNING process's memory, 
[11:40:50] <smallville7123> and NOT another processes memory, it instead must find another way to access another process's memory
[11:41:16] *** Quits: richbridger (~richbridg@089144202237.atnat0011.highway.a1.net) (Ping timeout: 268 seconds)
[11:42:07] <dave0> that's unix
[11:42:12] <smallville7123> dave0: what about if x has overloads for those operators & and *
[11:42:17] <dave0> where processes have separate address spaces
[11:42:19] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[11:42:26] <smallville7123> yea
[11:42:32] <dave0> smallville7123: this is c not c++
[11:42:41] <smallville7123> not sure if Windows does the same or similar
[11:42:57] <dave0> separate address spaces is not the only way to organize processes
[11:43:05] <smallville7123> yea
[11:43:44] *** Joins: Enitin (~Enitin@82.102.22.86)
[11:44:09] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:44:29] *** Joins: richbridger (~richbridg@089144202142.atnat0011.highway.a1.net)
[11:46:10] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:46:13] <smallville7123> btw it IS possibly (maybe) to gain access to very low level components of the process such as for example the runtime linker and its data, though very very high level and specific knowlege is required to actually manipulate the runtime linker or another component in any meaningful way, eg what works in one case may fail in another
[11:46:16] *** Joins: Rounin (~david@84.212.130.215)
[11:47:30] <smallville7123> unless the runtime linker itself is capable of isolating itself from the application it is about to run
[11:47:47] *** Quits: pucara (~i@181.95.206.147) (Quit: Lost terminal)
[11:48:02] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 260 seconds)
[11:48:04] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[11:49:39] <smallville7123> eg it could call some kernel specific call to request it to launch the constructed application in a new address space or similar where the linker MAY see the process's memory (eg to be able to load libraries into it at runtime) and the process CANNOT see the linker (eg the linker and the process linker api may communicate using kernel syscalls and message requests/responses)
[11:49:55] *** Joins: squid_game (~squid_gam@h-98-128-168-226.NA.cust.bahnhof.se)
[11:50:15] <smallville7123> tho this is outside the scope of C
[11:53:00] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:56:59] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[11:57:13] <user51> http://sprunge.us/ExWcU1
[11:57:19] <user51> dave0: some attempts ^
[11:59:15] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[11:59:51] *** Quits: i336 (~i336@121.217.2.209) (Ping timeout: 250 seconds)
[12:00:35] *** Joins: pingpongball (~pingpongb@43.228.192.104)
[12:01:14] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:01:35] *** Joins: i336 (~i336@101.174.238.66)
[12:03:14] *** Joins: mrig (~AdiIRC@user/mrig)
[12:04:44] <user51> since when does &&whatever means label?
[12:05:58] <user51> http://sprunge.us/OJazkh
[12:06:58] <user51> oh, computed goto
[12:07:53] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Remote host closed the connection)
[12:08:18] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[12:08:19] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (Ping timeout: 256 seconds)
[12:08:26] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:5199:7ff5:9e2e:9f2) (Ping timeout: 245 seconds)
[12:09:54] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[12:10:05] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[12:10:52] *** Joins: aliosablack (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[12:11:36] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[12:11:43] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:13:43] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Client Quit)
[12:14:26] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[12:14:57] *** Quits: katnis (uid15849@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:16:14] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:17:39] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[12:18:29] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[12:19:03] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 244 seconds)
[12:19:32] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[12:22:04] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[12:23:09] *** Quits: pingpongball (~pingpongb@43.228.192.104) (Quit: Client closed)
[12:23:15] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[12:23:51] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[12:25:08] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[12:26:10] *** Joins: RadimPavlik_ (~RadimPavl@176-74-132-138.netdatacomm.cz)
[12:26:46] *** Quits: aliosablack (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 245 seconds)
[12:26:54] *** Quits: i336 (~i336@101.174.238.66) (Ping timeout: 268 seconds)
[12:28:05] *** Joins: i336 (~i336@121.216.1.95)
[12:29:04] *** Quits: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net) (Quit: WeeChat 2.7.1)
[12:29:59] *** Joins: pingpongball (~pingpongb@43.228.192.104)
[12:30:25] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (Ping timeout: 256 seconds)
[12:31:08] *** Joins: aradesh (~aradesh@user/aradesh)
[12:31:19] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[12:32:15] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[12:32:22] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[12:33:30] *** Joins: Enitin (~Enitin@82.102.22.85)
[12:33:40] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:33:44] *** Quits: iomari891 (~iomari891@105.112.138.38) (Client Quit)
[12:33:49] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[12:35:49] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 250 seconds)
[12:36:02] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[12:38:57] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:40:11] *** Quits: pingpongball (~pingpongb@43.228.192.104) (Quit: Client closed)
[12:40:47] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) ()
[12:41:01] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[12:41:19] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[12:41:36] *** Joins: nik (~nik777@vpn-users-dip-pool165.dip.cf.ac.uk)
[12:42:47] *** Joins: katnis (uid15849@helmsley.irccloud.com)
[12:44:40] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[12:46:35] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 264 seconds)
[12:48:01] *** Joins: vysn (~vysn@user/vysn)
[12:48:41] *** Joins: Famine- (~Famine@user/famine)
[12:49:04] *** Joins: arinov (~arinov@178.240.135.64)
[12:49:15] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[12:52:02] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[12:52:17] *** Quits: Famine_ (~Famine@user/famine) (Ping timeout: 264 seconds)
[12:54:37] <baltazar> floatcomplex: (for earlier), how did you even get stdatomic on avr? is that a custom build? my avr-libc doesn't have it.
[12:56:43] *** Joins: kadir (~kadir@78.178.105.36)
[12:57:27] *** Joins: cation (cation@user/cation)
[13:00:36] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:02:04] *** Quits: iomari891 (~iomari891@105.112.138.38) (Client Quit)
[13:03:33] <dave0> user51: && is a gcc-extension.. not standard
[13:04:55] *** Joins: plastico (~plastico@neomutt/plastico)
[13:05:30] <dave0> user51: main is a special case of a function pointer (not limited to main... any function that you don't (i don't know the word) "call" by adding brackets ()
[13:06:03] <dave0> user51: & and * don't do anything to a function pointer
[13:06:18] <dave0> ,cc ***************main;
[13:06:21] <candide> dave0: Success (no output).
[13:06:42] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[13:06:43] <dave0> ,cc &&&&&&&&&&&&&main; /* i dont expect this to work */
[13:06:44] <candide> dave0: error: expected identifier before '&&' token
[13:07:16] <dave0> anyways, lots of stars don't change function pointers
[13:07:22] *** Quits: i336 (~i336@121.216.1.95) (Ping timeout: 260 seconds)
[13:08:23] *** Joins: de-facto (~de-facto@user/de-facto)
[13:08:32] <dave0> but the rest looks fine
[13:08:51] *** Joins: i336 (~i336@121.216.192.215)
[13:11:21] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[13:11:43] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:12:52] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[13:17:19] *** Joins: skeels (uid493124@uxbridge.irccloud.com)
[13:19:44] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:22:37] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:64c3:5621:24b3:cd71)
[13:24:47] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 246 seconds)
[13:25:13] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[13:26:46] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:31c:467:2a18:ca89) (Ping timeout: 245 seconds)
[13:27:30] *** Joins: derjanni (~Hans@p4ff80526.dip0.t-ipconnect.de)
[13:27:51] *** Quits: derjanni (~Hans@p4ff80526.dip0.t-ipconnect.de) (Client Quit)
[13:29:38] *** Joins: slidercrank (~slidercra@user/slidercrank)
[13:31:04] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[13:32:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[13:32:44] *** Joins: the_lanetly_052 (~the_lanet@85.132.73.6)
[13:35:58] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[13:36:19] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[13:37:47] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:38:21] *** Joins: derjanni (~Hans@p4ff80526.dip0.t-ipconnect.de)
[13:38:39] *** Quits: the_lanetly_052 (~the_lanet@85.132.73.6) (Ping timeout: 250 seconds)
[13:39:12] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[13:40:30] *** Quits: system_error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[13:41:27] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[13:46:21] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:47:28] *** Joins: esselfe (~steph@user/esselfe)
[13:49:31] <roxlu> hi, I want to store text messages in a buffer and and process them in another thread (e.g. save to file, send over network). for my use case I can assume I have enough memory to store the messages. My idea is to have a function like `append_message(MessagesContext* ctx, const char* msg, size_t len)` which then stores the message in a big buffer and creates a "task" with the offset where this message was
[13:49:32] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[13:49:33] <roxlu> stored. the threads then handle the message. 
[13:50:16] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:50:57] <roxlu> I'm only wondering how to deal with storing messages that won't fit into the buffer anymore; I can either just overwrite from the start or write as much bytes into the buffer so every bytes are used and then write the remaining bytes of the message from the start. 
[13:51:43] *** Quits: nik (~nik777@vpn-users-dip-pool165.dip.cf.ac.uk) (Quit: Leaving)
[13:56:58] <LangerJan> roxlu: I am confused. First, you say you can assume to have enough memory, but then, you don't?
[13:58:42] <roxlu> LangerJan:  oh sorry, I preallocate a chunk of memory which can be pretty large .. though I do want to allocate a reasonable sized buffer. I also meant that the buffer will be large enough that overwriting the oldest messages can be done safely
[13:58:52] *** Quits: kuoi (~kuoi@109.175.166.60) (Quit: kuoi)
[13:59:15] *** Joins: pingpongball (~pingpongb@43.228.192.104)
[13:59:21] <roxlu> with safely I mean that I can be sure that the oldest messages have been processed and can be discarded
[14:00:28] *** Joins: Guest74 (~Guest74@45.150.218.165)
[14:01:05] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[14:01:11] *** Quits: arinov (~arinov@178.240.135.64) (Ping timeout: 246 seconds)
[14:01:13] <LangerJan> roxlu: Have you considered using a ring buffer?
[14:01:20] *** Quits: derjanni (~Hans@p4ff80526.dip0.t-ipconnect.de) (Quit: Textual IRC Client: www.textualapp.com)
[14:01:21] *** Parts: Guest74 (~Guest74@45.150.218.165) ()
[14:01:21] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[14:01:56] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:02:18] <roxlu> LangerJan: yes, I thought about creating a "`struct MessageEntry { char* msg; }` and then a ring buffer to hold these messages
[14:02:39] <LangerJan> I mean, if you don't want to go fully object-oriented with queues and custom allocators, this might do the trick for you
[14:02:47] <roxlu> but I would like to only allocate a chunk once then reuse that instead of allocating space for `msg` for each message that I append
[14:03:21] *** Joins: kuoi (~kuoi@109.175.166.58)
[14:03:41] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[14:03:44] *** Parts: pingpongball (~pingpongb@43.228.192.104) ()
[14:04:07] <LangerJan> so you're doing you own memory management here
[14:04:50] <roxlu> yes
[14:05:20] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:05:33] <LangerJan> but if you want to re-use the chunks, how do you want to accomplish that? Assuming that the messages are stored inside of those chunks, they might not fit for the next message
[14:06:31] <roxlu> LangerJan: that was my question... (which I clearly didn't formulate clearly). So at some point the message won't fit and instead of writing the message to the end, I'll have to start at offset 0 of the buffer again.
[14:07:14] <roxlu> I was thinking to create something like a "struct Work { size_t buffer_offset; }` where `buffer_offset` points into the text buffer
[14:07:55] <LangerJan> you can create structs like "struct message { context ctx; size_t message_len; char message[1];}" 
[14:08:27] <roxlu> ah ofc, so they just point towards the buffer? 
[14:08:44] <LangerJan> assuming that you have a big chunk of allocated memory already, cast that struct to somewhere in that buffer
[14:09:28] <roxlu> Ah yeah that might work too indeed, thanks.
[14:10:01] *** Joins: ko (~i.am@user/marlboro)
[14:11:16] <roxlu> is this approach I'm looking into "OK" or might there be a better solution?
[14:12:13] <tk> if you're using C99 you should be using FAMs not just "[1]" and if you're before C99 then this feature is not strictly portable and you're better off using an extension. 
[14:12:43] <supakeen> (flexible array members)
[14:12:51] <supakeen> -s
[14:14:10] *** Quits: squid_game (~squid_gam@h-98-128-168-226.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[14:14:21] <roxlu> thanks
[14:14:54] <dave0> roxlu: i would write the functions pushmessage() and popmessage() which you could at first simply malloc and free everything, and then later convert it to a ring buffer or queue or stack or whatever
[14:15:19] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[14:18:09] <dave0> for some reason you don't want to use malloc and free
[14:19:06] <dave0> maybe putmessage() and getmessage() would be better names... does the order matter?
[14:19:10] *** Parts: kadir (~kadir@78.178.105.36) (WeeChat 3.3)
[14:19:11] <roxlu> dave0: would it make more sense to allocate/free mesages each time pushmesage will be called?
[14:19:28] <roxlu> (free not in with push)
[14:20:06] <dave0> roxlu: allocate then putmessage() and getmessage() then free
[14:21:15] <roxlu> yes I understand what you meant, but would it be better to allocate/free for each message when I potentially handle 1000s of messages per second
[14:21:28] <dave0> depends how you store the message.. you could copy, which is extra work -> slower, but anything to make put/getmessage() simple so you can change the data structure later
[14:21:31] *** Joins: earnestly (~earnest@user/earnestly)
[14:21:39] *** Joins: Guest62 (~Guest62@125.167.84.232)
[14:22:16] *** Joins: kadir (~kadir@78.178.105.36)
[14:22:18] <dave0> roxlu: get it working first, then worry about performance :-)
[14:22:22] <roxlu> ah I see what you mean, thanks 
[14:22:27] <roxlu> yep
[14:22:39] <roxlu> I hear someone telling me about premature ....
[14:22:51] <roxlu> :)
[14:23:05] <dave0> your first attempt might be fast enough, then you can move on to the next problem :-)
[14:23:20] <roxlu> yeah exactly 
[14:24:18] <whupdup> does anyone know how consistent pthread implementations are among modern distros of linux? and how they standardize the types/type sizes if at all
[14:24:50] <whupdup> I've noticed pthread_mutex_t is 40 bytes but people seem to treat it like a small sizeof(uintptr_t) handle
[14:25:25] <dave0> whupdup: it's meant to be opaque... you shouldn't be messing around inside it (unless you're debugging)
[14:26:02] <whupdup> it's not that I'm messing around with its insides, I'm making a wrapper and based on whether or not its a handle or a big data type I can potentially avoid some indirection
[14:26:51] <dave0> i believe it's okay to use a pointer to it
[14:26:59] *** Joins: jinie (~jimmy@188.114.173.37)
[14:27:09] <dave0> oh hang on i'll check the man page
[14:27:32] <whupdup> interestingly enough none of the pthread man pages say much about the data types (unless I missed it)
[14:27:38] <whupdup> it's all about the API functions
[14:28:04] <dave0> yep yep pointer is fine
[14:28:10] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.2)
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:21] <dave0> int mynum = 0; pthread_mutex_t mymutex = PTHREAD_MUTEX_INITIALIZER; int foo(pthread_mutex_t *ptr) { int r; pthread_mutex_lock(ptr); r = mynum; mynum++; pthread_mutex_unlock(ptr); return r; } foo(&mymutex);
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:31:10] <dave0> you could easily put mynum and mymutex in a struct and pass it to foo()
[14:31:22] *** Quits: malloy (~jimery@116.30.220.108) (Quit: WeeChat 3.0)
[14:32:45] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[14:33:03] <dave0> struct state { int num; pthread_mutex_t mutex; } bar; int foo(struct state *ptr) { pthread_mutex_lock(&ptr->mutex); r = ptr->num++; pthread_mutex_unlock(&ptr->mutex); return r; }    pthread_mutex_init(&bar.mutex, NULL); foo(&bar);
[14:33:10] *** Joins: AsenMx (~AsenMx@user/asenmx)
[14:33:42] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:34:42] <dave0> but don't copy it
[14:34:54] <dave0> bad mojo
[14:35:57] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[14:36:05] <whupdup> yeah that's mainly why I was wondering, I've seen some code where people treat pthread_mutex_t like an opaque handle (i.e. a pointer type) and shuffle it around by value 
[14:36:10] <whupdup> so I guess I'm right to avoid it
[14:36:26] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[14:36:41] *** Quits: cpuid (~cpuid@co5.at) (Quit: ZNC 1.8.2 - https://znc.in)
[14:37:17] *** Joins: cpuid (~cpuid@co5.at)
[14:38:03] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[14:42:15] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[14:42:36] <fizzie> https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/functions/V2_chap02.html#tag_15_09_09 "For barriers, condition variables, mutexes, and read-write locks, only the synchronization object at the address used to initialize it can be used for performing synchronization. The effect of referring to a copy of the object when locking, unlocking, or destroying it is undefined."
[14:42:38] <candide> Title of fizzie's link: General Information
[14:43:53] <fizzie> (With a bit of extra subtlety around a different mapping of the same object, I think primarily for sharing a mutex between processes via shared memory. So POSIX does touch on that.)
[14:43:53] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:45:36] *** Quits: useretail (~useretail@185.132.19.151) (Remote host closed the connection)
[14:45:50] *** Joins: useretail (~useretail@185.132.19.151)
[14:46:13] *** Quits: Guest62 (~Guest62@125.167.84.232) (Quit: Client closed)
[14:47:59] *** Joins: cation21 (cation@user/cation)
[14:48:47] *** Quits: cation (cation@user/cation) (Ping timeout: 246 seconds)
[14:50:38] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[14:51:14] *** cation21 is now known as cation
[14:51:16] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[14:54:04] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[14:55:05] <dave0> you could even malloc it, just make sure you initialize properly
[14:56:16] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:58:28] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:03:15] *** Joins: puke (~puke@user/puke)
[15:07:34] *** Joins: AmR (~AmREiSa@156.199.86.69)
[15:07:35] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[15:08:32] *** Joins: jinie (~jimmy@188.114.173.37)
[15:08:50] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[15:08:55] *** Quits: jinie (~jimmy@188.114.173.37) (Client Quit)
[15:10:11] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:13:18] *** Joins: nyah (~nyah@94.6.71.219)
[15:20:04] *** Quits: lkronnus (~kron@179097066201.provale.com.br) (Read error: Connection reset by peer)
[15:21:03] *** Quits: skeels (uid493124@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:31:12] *** Joins: Iarfen (~quassel@181.43.59.114)
[15:32:58] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:32:58] *** Quits: alch (~alch@151.38.89.184) (Read error: Connection reset by peer)
[15:35:38] *** Quits: geonicz (~geonicz@86.57.152.167) (Remote host closed the connection)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:18] *** Joins: random-nick (~random-ni@87.116.176.55)
[15:37:31] *** Joins: alch (~alch@151.38.7.193)
[15:39:41] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:7f6:a56e:37c:231)
[15:39:52] *** Quits: leo[m] (~leoleonar@2001:470:69fc:105::1:1893) (Quit: You have been kicked for being idle)
[15:40:34] *** Quits: Vsg21\[m] (~vtrollmat@2001:470:69fc:105::17a8) (Quit: Bridge terminating on SIGTERM)
[15:40:34] *** Quits: hussam (~hussam@user/hussam) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: aura[m] (~aurabindo@2001:470:69fc:105::4204) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: Charadon[m] (~charadon@2001:470:69fc:105::d56f) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: Akawama[m] (~akawama@user/akawama) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: dalz (~dalz@2001:470:69fc:105::2ea) (Quit: Bridge terminating on SIGTERM)
[15:40:35] *** Quits: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30) (Quit: Bridge terminating on SIGTERM)
[15:40:36] *** Quits: M101donutman[m] (~M101donut@2001:470:69fc:105::d51) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: TuxKruger[m] (~tuxkruger@2001:470:69fc:105::fa18) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: randy408[m] (~randy408m@2001:470:69fc:105::2f5e) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: Deewiant (~deewiant@2001:470:69fc:105::2fd3) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: wfi[m] (~repmovsb@2001:470:69fc:105::1:274e) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: prepro[m] (~prepromat@2001:470:69fc:105::1:68) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: volgar1x (~volgar1xm@2001:470:69fc:105::e61d) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: TheDcoder[m] (~thedcoder@user/thedcoder) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: psyxo[m] (~mercvrivs@user/psyxopompos) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: Helmholtz (~leibnizma@2001:470:69fc:105::3124) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: jesings[m] (~jesingsma@2001:470:69fc:105::1:2bb8) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: pillarxyz[m] (~pillarxyz@2001:470:69fc:105::1:1985) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: novasharper (~novasharp@2001:470:69fc:105::b4a) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: go4godvin (~go4godvin@user/go4godvin) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: Roman[m] (~wrongt@2001:470:69fc:105::341e) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: dpgraham4401[m] (~dpgraham4@2001:470:69fc:105::1:1aa4) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: Daniel[m]1234516 (~danielbau@2001:470:69fc:105::1:1a5d) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: guest[m] (~guestkdeo@2001:470:69fc:105::ffb0) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: atulu[m] (~atulumatr@2001:470:69fc:105::d50c) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: M77hamster7[m] (~M77hamste@2001:470:69fc:105::1:308a) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: kaji (~kajiryoji@2001:470:69fc:105::405b) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (Quit: Bridge terminating on SIGTERM)
[15:40:56] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 245 seconds)
[15:41:22] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[15:42:57] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[15:51:06] *** Joins: skeels (uid493124@uxbridge.irccloud.com)
[15:51:57] *** Joins: sunarch (uid526836@user/sunarch)
[15:54:23] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:7f6:a56e:37c:231) (Ping timeout: 264 seconds)
[15:55:42] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[15:58:12] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[16:00:34] *** Joins: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:54bb:7f59:ff7b:7ae6)
[16:00:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[16:04:53] *** Joins: med_ (uid146495@helmsley.irccloud.com)
[16:04:58] <Aloli_9264> {int a=1;int b[2];int c=2} i can get "c" by "b[-1]" but i cant get "a" by "b[2]",why?
[16:05:02] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[16:05:15] *** Joins: Akawama[m] (~akawama@user/akawama)
[16:05:15] *** Joins: kaji (~kajiryoji@2001:470:69fc:105::405b)
[16:05:29] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[16:05:29] *** Joins: Vsg21\[m] (~vtrollmat@2001:470:69fc:105::17a8)
[16:05:29] *** Joins: Guest9402 (~mercvrivs@2001:470:69fc:105::2ee6)
[16:05:29] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[16:05:29] *** Joins: Deewiant (~deewiant@2001:470:69fc:105::2fd3)
[16:05:34] *** Quits: med_ (uid146495@helmsley.irccloud.com) (Client Quit)
[16:05:43] *** Joins: leo[m]123 (~leoleonar@2001:470:69fc:105::1:1893)
[16:05:43] *** Joins: Helmholtz (~leibnizma@2001:470:69fc:105::3124)
[16:05:43] *** Joins: hussam (~hussam@user/hussam)
[16:05:43] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[16:05:43] *** Joins: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30)
[16:05:55] *** Joins: aura[m] (~aurabindo@2001:470:69fc:105::4204)
[16:05:56] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[16:05:56] *** Joins: psydroid (~psydroid@user/psydroid)
[16:05:56] *** Joins: novasharper (~novasharp@2001:470:69fc:105::b4a)
[16:05:56] *** Joins: volgar1x (~volgar1xm@2001:470:69fc:105::e61d)
[16:05:56] *** Joins: Charadon[m] (~charadon@2001:470:69fc:105::d56f)
[16:06:08] *** Joins: atulu[m] (~atulumatr@2001:470:69fc:105::d50c)
[16:06:09] *** Joins: guest[m] (~guestkdeo@2001:470:69fc:105::ffb0)
[16:06:09] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[16:06:23] *** Joins: randy408[m] (~randy408m@2001:470:69fc:105::2f5e)
[16:06:23] *** Joins: Roman[m] (~wrongt@2001:470:69fc:105::341e)
[16:06:35] *** Joins: M101donutman[m] (~M101donut@2001:470:69fc:105::d51)
[16:06:35] *** Joins: pillarxyz[m] (~pillarxyz@2001:470:69fc:105::1:1985)
[16:06:47] *** Joins: prepro[m] (~prepromat@2001:470:69fc:105::1:68)
[16:06:47] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[16:06:59] *** Joins: jesings[m] (~jesingsma@2001:470:69fc:105::1:2bb8)
[16:06:59] *** Joins: TheDcoder[m] (~thedcoder@user/thedcoder)
[16:06:59] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[16:06:59] *** Joins: jinsun_ (~jinsun@user/jinsun)
[16:06:59] *** Joins: TuxKruger[m] (~tuxkruger@2001:470:69fc:105::fa18)
[16:06:59] *** Joins: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d)
[16:07:11] *** Joins: dpgraham4401[m] (~dpgraham4@2001:470:69fc:105::1:1aa4)
[16:07:13] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[16:07:13] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[16:07:13] *** Joins: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37)
[16:07:13] *** Joins: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e)
[16:07:13] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[16:07:13] *** Joins: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4)
[16:07:13] *** Joins: M77hamster7[m] (~M77hamste@2001:470:69fc:105::1:308a)
[16:07:35] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 264 seconds)
[16:07:46] *** Joins: Klinda (~superleag@user/klinda)
[16:08:27] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa)
[16:11:14] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[16:14:08] <dave0> Aloli_9264: b[-1] is always an error... it is a coincidence that "c" is there
[16:18:27] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:20:00] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Quit: Client limit exceeded: 20000)
[16:20:04] *** Quits: Helmholtz (~leibnizma@2001:470:69fc:105::3124) (Quit: Client limit exceeded: 20000)
[16:20:33] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Client limit exceeded: 20000)
[16:20:44] *** Quits: Vsg21\[m] (~vtrollmat@2001:470:69fc:105::17a8) (Quit: Client limit exceeded: 20000)
[16:20:53] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:f808:6659:f3be:fdeb)
[16:20:54] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Client limit exceeded: 20000)
[16:20:55] *** Quits: hussam (~hussam@user/hussam) (Quit: Client limit exceeded: 20000)
[16:20:58] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[16:21:14] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (Quit: Client limit exceeded: 20000)
[16:21:25] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[16:21:26] *** Joins: Helmholtz (~leibnizma@2001:470:69fc:105::3124)
[16:21:26] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[16:21:26] *** Joins: psydroid (~psydroid@user/psydroid)
[16:21:29] *** Quits: Guest9402 (~mercvrivs@2001:470:69fc:105::2ee6) (Quit: Client limit exceeded: 20000)
[16:21:30] *** Quits: novasharper (~novasharp@2001:470:69fc:105::b4a) (Quit: Client limit exceeded: 20000)
[16:21:37] *** Joins: Vsg21\[m] (~vtrollmat@2001:470:69fc:105::17a8)
[16:21:39] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[16:21:39] *** Joins: hussam (~hussam@user/hussam)
[16:21:49] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Quit: Client limit exceeded: 20000)
[16:22:05] *** Quits: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d) (Quit: Client limit exceeded: 20000)
[16:22:16] *** Quits: Charadon[m] (~charadon@2001:470:69fc:105::d56f) (Quit: Client limit exceeded: 20000)
[16:22:45] *** Quits: Iarfen (~quassel@181.43.59.114) (Ping timeout: 256 seconds)
[16:22:53] *** Joins: Iarfen_ (~quassel@ec2-3-225-168-229.compute-1.amazonaws.com)
[16:23:02] <fizzie> ,cc int a = 1; int b[2]; int c = 2; printf("%d", b[-1]); // as seen here
[16:23:04] <candide> fizzie:  runtime error: index -1 out of bounds for type 'i​nt [2]' 1
[16:23:24] *** Quits: go4godvin (~go4godvin@user/go4godvin) (Quit: Client limit exceeded: 20000)
[16:24:04] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[16:24:04] *** Joins: enick_519 (~mercvrivs@2001:470:69fc:105::2ee6)
[16:24:05] *** Joins: novasharper (~novasharp@2001:470:69fc:105::b4a)
[16:24:18] *** Joins: Charadon[m] (~charadon@2001:470:69fc:105::d56f)
[16:24:30] *** Joins: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d)
[16:24:30] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[16:24:30] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[16:25:02] *** Joins: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net)
[16:26:03] *** Quits: leo[m]123 (~leoleonar@2001:470:69fc:105::1:1893) (Quit: You have been kicked for being idle)
[16:30:41] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 256 seconds)
[16:30:46] *** Quits: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:54bb:7f59:ff7b:7ae6) (Quit: Leaving.)
[16:32:25] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[16:34:34] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:37:15] *** Joins: rsarson (~rsarson@2607:fea8:29e1:b000::9037)
[16:40:26] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 246 seconds)
[16:41:21] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[16:42:23] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[16:44:27] *** Joins: constxd (~brad@192.75.101.164)
[16:46:33] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[16:46:42] *** Quits: RadimPavlik_ (~RadimPavl@176-74-132-138.netdatacomm.cz) (Ping timeout: 260 seconds)
[16:46:49] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[16:47:35] *** Joins: Guest23 (~Guest23@223.99.197.192)
[16:49:35] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[16:57:05] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:57:29] *** Quits: Guest23 (~Guest23@223.99.197.192) (Quit: Client closed)
[16:58:30] *** Joins: acaciause (~acaciause@cpc140764-burn9-2-0-cust788.10-1.cable.virginm.net)
[16:59:31] *** Joins: masterbuilder (~user@user/masterbuilder)
[17:00:42] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:03:30] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[17:04:29] *** Quits: baltazar (~baltazar@178-164-254-231.pool.digikabel.hu) (Ping timeout: 250 seconds)
[17:06:12] *** Joins: baltazar (~baltazar@84-236-12-229.pool.digikabel.hu)
[17:06:42] *** Joins: cart_man (~rynot@host-78-144-127-199.as13285.net)
[17:06:58] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[17:08:38] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[17:09:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[17:09:53] <dave0> can that really not be detected at compile time?
[17:10:45] *** Joins: leo[m] (~leoleonar@2001:470:69fc:105::1:1893)
[17:11:17] *** Joins: jetchisel (jetchisel@user/jetchisel)
[17:12:07] *** Quits: constxd (~brad@192.75.101.164) (Quit: WeeChat 2.8)
[17:21:25] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[17:22:16] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[17:23:13] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[17:23:50] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:26:52] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Client Quit)
[17:27:51] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[17:28:11] *** Joins: pulse (~pulse@user/pulse)
[17:28:24] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:29:09] *** Parts: kadir (~kadir@78.178.105.36) (WeeChat 3.3)
[17:30:45] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Remote host closed the connection)
[17:31:07] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Client Quit)
[17:31:25] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:32:11] *** Joins: dld (~dld@2601:197:600:1210:9992:b3e2:af1a:fbc2)
[17:35:52] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[17:39:00] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:40:00] <fizzie> Clang can.
[17:40:04] <fizzie> ,clang -Werror=array-bounds int a = 1; int b[2]; int c = 2; printf("%d", b[-1]);
[17:40:06] <candide> fizzie:  error: array index -1 is before the beginning of the array [-Werror,-Warray-bounds]  note: array 'b' declared here
[17:40:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:6396:dd82:eabc:bcd7)
[17:40:25] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[17:41:00] <fizzie> I think for GCC the problem is, some of those more advanced code-flow-based warnings need a higher level than candide default.
[17:41:03] <fizzie> ,cc -O0 -Werror=array-bounds int a = 1; int b[2]; int c = 2; printf("%d", b[-1]);
[17:41:05] <candide> fizzie: 1
[17:41:07] <fizzie> ,cc -O2 -Werror=array-bounds int a = 1; int b[2]; int c = 2; printf("%d", b[-1]);
[17:41:09] <candide> fizzie: error: array subscript -1 is below array bounds of 'int[2]' [-Werror=array-bounds]  note: while referencing 'b' cc1: some warnings being treated as errors
[17:41:25] <fizzie> ,cc -O1 -Werror=array-bounds int a = 1; int b[2]; int c = 2; printf("%d", b[-1]); // fun middle ground ;)
[17:41:26] <candide> fizzie: error: expected statement before ')' token
[17:41:32] <fizzie> ...
[17:41:46] *** Quits: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net) (Ping timeout: 260 seconds)
[17:41:54] <fizzie> ,cc -O1 -Werror=array-bounds int a = 1; int b[2]; int c = 2; printf("%d", b[-1]); // fun middle ground -- and no emoji in comments, I guess
[17:41:57] <candide> fizzie: 119
[17:42:59] <fizzie> s/level/optimization &/, forgot a word there.
[17:43:09] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:46:22] *** Quits: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[17:46:32] *** Joins: graywolf (~wolf@user/graywolf)
[17:46:42] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[17:46:56] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[17:47:09] *** Joins: linguist (~autistic@user/linguist)
[17:47:45] *** Quits: soapsudsxx (~soapsudsx@209.221.40.134) (Ping timeout: 256 seconds)
[17:48:03] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:48:23] <linguist> Hello there! I have a struct called macaddr composed by 6 u_int8_t variables named a,b,c,d,e,f
[17:48:28] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:49:09] <linguist> And I get passed a macaddress in the format ff:ff:ff:ff:ff:ff in argv[1]
[17:50:10] <linguist> I run, then, a sscanf(argv[1], "%x:%x:%x:%x:%x:%x", &mac.a, &mac.b, &mac.c, &mac.d, &mac.e, &mac.f);
[17:50:53] <fizzie> %x takes an `unsigned int *`, not an `uint8_t *`.
[17:51:44] <fizzie> <inttypes.h> macro SCNx8 has the correct format specifier for scanning an uint8_t.
[17:52:00] <fizzie> ,expand #include <inttypes.h> SCNx8
[17:52:00] <candide> fizzie:  "hhx"
[17:52:10] <fizzie> (Except of course use the macro rather than hardcoding it.)
[17:52:14] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:52:41] <linguist> Okay, thanks, I'm gonna try
[17:54:20] <fizzie> ,cc uint8_t a, b, c, d, e, f; sscanf("12:34:56:78:9a:bc", "%"SCNx8":%"SCNx8":%"SCNx8":%"SCNx8":%"SCNx8":%"SCNx8, &a, &b, &c, &d, &e, &f);
[17:54:22] <candide> fizzie: no output: d = 120 'x'; e = 154 '\232'; a = 18; b = 52 '4'; f = 188 '\274'; c = 86 'V'
[17:55:26] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[17:58:04] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.3)
[17:58:12] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:58:56] *** Joins: fatalnix (~hodbogi@user/fatalnix)
[17:59:50] *** Joins: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net)
[18:00:32] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[18:02:20] <linguist> One more question... I did replace the format string to use SCNx8, but it's still not working properly... For a test, I ran write(1, (void *) &mac, sizeof(mac));
[18:02:30] <linguist> And then I ran the program with |hexdump
[18:03:10] <linguist> the mac aa:bb:cc:dd:ee:ff ended up dumped as 0000000 bbaa ddcc ffee   
[18:04:15] <slidercrank> %02x
[18:04:30] <linguist> I double-checked the order of the variables, and it's right, both in struct declaration and sscanf parameters
[18:04:32] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[18:04:41] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Ping timeout: 245 seconds)
[18:04:46] <fizzie> That's what `hexdump` does by default.
[18:04:54] <fizzie> It prints little-endian 16-bit pairs.
[18:05:08] <fizzie> `0000000 bbaa ddcc ffee` means the bytes in memory are `aa, bb, cc, dd, ee, ff`.
[18:05:15] *** Joins: soapsudsxx (~soapsudsx@141.193.188.136)
[18:05:21] <fizzie> Do `hexdump -C` for example to see the actual bytes.
[18:05:55] <linguist> Ohhhh, the it was my test that wasn't working properly... Okay, thanks a lot for the help!
[18:05:58] <fizzie> ,sh printf "\xaa\xbb\xcc\xdd\xee\xff" | hexdump
[18:05:59] <candide> fizzie: 0000000 bbaa ddcc ffee                          0000006
[18:06:02] <fizzie> ,sh printf "\xaa\xbb\xcc\xdd\xee\xff" | hexdump -C
[18:06:03] <candide> fizzie: 00000000  aa bb cc dd ee ff                                 |......| 00000006
[18:07:09] <linguist> Now it worked perfectly, thanks!
[18:08:19] <fizzie> (Never understood why that's the default hexdump format. Historical reasons, probably. Going to blame the PDP-11 by default.)
[18:09:40] <fatalnix> How can I use malloc_stats()? From what I understand I can define MALLOC_DEBUG, and then use assert() in places, and then (and I am getting assertion output) I should be able to call malloc_stats() at the end of my program and get malloc info onto STDERR, right?
[18:09:47] <linguist> It seems unnatural, but I should have suspected 
[18:11:31] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[18:12:18] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa) (Read error: Connection reset by peer)
[18:13:35] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa)
[18:13:40] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[18:13:54] <fatalnix> looks like I need to do it before the assert that fails.
[18:16:45] <fizzie> I don't think the statistics printed by malloc_stats() are really related to assert in any particular way. Or really useful for debugging anything, either. (Assuming glibc.)
[18:17:42] <fatalnix> the output of asserts is pretty cryptic though to be fair
[18:17:47] *** Joins: rgrinberg (~textual@200.5.63.76)
[18:19:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:19:17] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:19:17] *** Joins: wroathe (~wroathe@user/wroathe)
[18:20:52] *** Quits: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net) (Ping timeout: 268 seconds)
[18:30:55] *** Joins: Richard_Cavell (uid165693@ilkley.irccloud.com)
[18:31:18] *** Joins: seninha (~seninha@user/seninha)
[18:32:55] *** Quits: acaciause (~acaciause@cpc140764-burn9-2-0-cust788.10-1.cable.virginm.net) (Quit: Konversation terminated!)
[18:40:35] <roxlu> When I have a `uint8_t value = 3` and I want to do e.g. `uint16_t flags = (value << 8)`  will that be correct or do I need to use `flags = (uint16_t) value << 8` ? 
[18:41:41] *** Parts: user51 (~user51@176.228.59.81) ()
[18:43:40] *** nmi is now known as deflected
[18:45:42] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[18:48:01] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 268 seconds)
[18:48:14] *** Joins: Klinda (~superleag@user/klinda)
[18:50:49] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[18:57:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:58:01] *** Joins: jbauer (~jbauer@146.71.11.98)
[18:58:31] *** Joins: jurjen (~jurjen@188-206-102-198.mobile.kpn.net)
[19:01:19] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[19:01:20] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[19:03:00] *** Iarfen_ is now known as Iarfen
[19:03:07] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 256 seconds)
[19:03:07] *** Quits: Iarfen (~quassel@ec2-3-225-168-229.compute-1.amazonaws.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:03:29] *** Joins: Iarfen (~quassel@ec2-3-225-168-229.compute-1.amazonaws.com)
[19:03:39] *** Quits: zwr (~zwr@2804:d45:b966:fb00:faa2:cc72:3a72:e967) (Ping timeout: 250 seconds)
[19:03:42] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[19:03:53] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[19:04:28] *** Joins: zwr (~zwr@2804:d45:b966:fb00:ea42:8fa9:6c11:b414)
[19:07:22] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[19:08:44] *** daex_ is now known as daex
[19:09:55] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[19:12:00] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[19:12:24] *** Quits: jbauer (~jbauer@146.71.11.98) (Quit: Quitting)
[19:12:32] <alch> roxlu: the result of `value << 8` gets promoted to (unsigned) int, but some compilers flags will emit warnings, namely -Wimplicit-int-conversion on clang
[19:13:54] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[19:13:58] <floatcomplex> roxlu: try it in godbolt with casts everywhere to force it to do what you expect, then remove casts and while seeing if the genetated asm changes
[19:14:19] <floatcomplex> s/and//
[19:14:27] <roxlu> alch: thanks, is that a C standard rule, that it's casted to an unsigned int I mean?
[19:14:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:14:35] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:14:35] *** Joins: wroathe (~wroathe@user/wroathe)
[19:14:38] <Richard_Cavell> I think x << 8 will result in a uint8_t
[19:14:44] <roxlu> floatcomplex: yeah I compared and didn't notice a difference in the result. 
[19:15:03] <roxlu> Richard_Cavell: .. that's what I would expect too, but that would mean it would be 0 always, right?
[19:15:16] <Richard_Cavell> Yep.
[19:15:31] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[19:15:36] <floatcomplex> hmm
[19:16:54] <roxlu> in my test they always had a correct value and it didn't matter if I added the cast or not, so it seems that alch described is correct
[19:16:59] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[19:17:08] <floatcomplex> if i wanted to force it to stay unsigned at all intermediate steps, i'd do ((unsigned int)value) << 8
[19:17:27] <floatcomplex> otherwise it gets implicitly promoted to signed int
[19:17:38] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[19:17:47] <floatcomplex> it won't promote to unsigned int on its own
[19:18:18] <floatcomplex> but the distinction sometimes won't matter
[19:18:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:19:27] <int> it seems, I need to change my nickname )))
[19:19:52] *** int is now known as Ox4
[19:20:12] <roxlu> ok thanks, so it's best to cast the variable 
[19:20:27] *** Joins: mimmy (~mimmy@72.142.88.18)
[19:20:32] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[19:21:54] <fizzie> ,cc uint8_t value = 0; ptype(value); ptype(value << 8); // just for illustration
[19:21:57] <candide> fizzie:  value = unsigned char   value << 8 = int
[19:23:31] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[19:24:18] *** Quits: esselfe (~steph@user/esselfe) (Quit: Going home)
[19:26:46] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 245 seconds)
[19:27:52] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:29:16] *** Joins: jrqc (~rofl@2603:3016:1e01:b960:68cb:6460:9f4d:2934)
[19:29:49] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[19:29:52] *** Joins: bruda (~bruda@172.58.63.98)
[19:30:17] <fizzie> Just to nitpick a little though, it's not that the *result* of `value << 8` gets promoted (that would be too late), it's `value` that gets promoted when used as the operand of <<, and the result of << then has the type of the promoted left operand.
[19:31:42] *** Joins: mahmutov (~mahmutov@176.30.255.33)
[19:32:41] *** Quits: alch (~alch@151.38.7.193) (Read error: Connection reset by peer)
[19:34:52] *** Joins: smhbvd^ (~smhbvd@h50.174.139.63.static.ip.windstream.net)
[19:35:40] *** Joins: arinov (~arinov@178.240.135.64)
[19:36:05] *** Joins: mimmy (~mimmy@72.142.88.18)
[19:36:37] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:36:49] *** Joins: alch (~alch@151.36.34.106)
[19:37:59] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[19:41:02] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 268 seconds)
[19:41:18] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[19:42:28] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[19:42:30] *** Joins: brad_mssw|mac (~bhouse@2601:344:4100:b490:bc25:5662:e421:bb76)
[19:44:16] *** Joins: mrig (~mrig@user/mrig)
[19:45:04] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[19:45:26] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 260 seconds)
[19:45:47] *** Quits: smhbvd^ (~smhbvd@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[19:45:58] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:f808:6659:f3be:fdeb) (Ping timeout: 268 seconds)
[19:47:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:6396:dd82:eabc:bcd7) (Ping timeout: 264 seconds)
[19:50:24] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[19:51:21] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[19:51:52] *** Joins: Arw (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr)
[19:52:18] *** Joins: Klinda (~superleag@user/klinda)
[19:52:36] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[19:53:03] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[19:53:03] *** Quits: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[19:57:19] *** Joins: iomari891 (~iomari891@105.112.138.38)
[19:58:22] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:58:46] *** Joins: Nistar (Nistar@gateway/vpn/protonvpn/nistar)
[19:59:47] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 264 seconds)
[20:01:18] *** Quits: Nautilus (~me2@d27-96-220-62.nap.wideopenwest.com) (Read error: Connection reset by peer)
[20:01:41] *** Joins: Nautilus (~me2@d27-96-220-62.nap.wideopenwest.com)
[20:01:44] *** Joins: pulse_ (~pulse@user/pulse)
[20:02:46] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[20:03:02] *** Joins: wladimir (~doforlove@user/doforlove33)
[20:03:06] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[20:03:14] *** wladimir is now known as ethrl
[20:04:53] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[20:05:15] *** Joins: V-T60 (~v@91.203.24.166)
[20:07:22] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 260 seconds)
[20:10:13] *** Joins: nctcf^ (~nctcf@h50.174.139.63.static.ip.windstream.net)
[20:13:57] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[20:14:57] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[20:18:56] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a915:ec4b:44f7:de65)
[20:18:57] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a915:ec4b:44f7:de65) (Changing host)
[20:18:57] *** Joins: skapata (~Skapata@user/skapata)
[20:19:14] *** Joins: meator (~meator@user/meator)
[20:19:30] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[20:21:02] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[20:21:42] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[20:22:43] *** Joins: mimmy (~mimmy@72.142.88.18)
[20:23:36] *** Joins: iomari891 (~iomari891@105.112.138.38)
[20:23:55] *** Joins: jonbryan (~ea@user/jonbryan)
[20:24:57] *** Quits: katnis (uid15849@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:27:29] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[20:28:20] *** Joins: missogra (~missogra@dynamic-077-006-033-160.77.6.pool.telefonica.de)
[20:31:03] *** Quits: skeels (uid493124@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:32:00] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Client Quit)
[20:34:40] *** Joins: Sheilong (uid293653@ilkley.irccloud.com)
[20:34:41] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 245 seconds)
[20:35:07] *** Joins: openbrackets12 (~openbrack@62.216.60.191)
[20:35:21] *** Parts: openbrackets12 (~openbrack@62.216.60.191) ()
[20:35:23] *** Joins: openbrackets12 (~openbrack@62.216.60.191)
[20:35:26] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:36:04] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:36:18] *** Parts: openbrackets12 (~openbrack@62.216.60.191) ()
[20:37:38] *** Quits: leah2 (~leah@vuxu.org) (Remote host closed the connection)
[20:39:11] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:39:34] *** Joins: leah2 (~leah@vuxu.org)
[20:39:59] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[20:41:22] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[20:41:46] <jurjen> ,insult pragma- 
[20:41:47] <candide> pragma-: Yeah, yeah, keep talking, someday you might say something intelligent.
[20:42:15] <jurjen> woo
[20:44:17] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[20:45:23] *** Joins: constxd (~brad@192.75.101.164)
[20:46:40] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[20:46:40] *** Joins: nortoh (~nortoh@user/nortoh)
[20:47:23] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 256 seconds)
[20:47:51] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[20:48:26] *** Quits: V-T60 (~v@91.203.24.166) (Ping timeout: 260 seconds)
[20:48:33] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:48:53] *** Joins: tiotags (~tiotags@user/tiotags)
[20:51:24] *** Joins: acaciause (~acaciause@cpc140764-burn9-2-0-cust788.10-1.cable.virginm.net)
[20:51:32] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[20:51:34] *** Joins: rgrinberg (~textual@200.5.63.76)
[20:52:54] *** Quits: ethrl (~doforlove@user/doforlove33) (Quit: WeeChat 3.3)
[20:53:37] *** Joins: karakedi (~eAC53C340@user/karakedi)
[20:54:00] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[20:55:14] *** Joins: magla (~gelignite@55d446ec.access.ecotel.net)
[20:56:58] <pr-asadi> Hi. Can I know a file is created by which program?
[20:57:03] *** Joins: luckyxxl (~luckyxxl@193.27.14.44)
[20:57:16] <pr-asadi> Sorry, has created*
[20:57:59] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Quit: Konversation terminated!)
[20:58:25] <apotheon> Most OSes only track the user account that "owns" a file.
[20:58:46] <apotheon> "most" in the sense of "the N most used", really
[20:59:00] <pr-asadi> apotheon: I can not know that which program has created?
[20:59:12] <acaciause> well if it has an active lock on a file I think you can find it, otherwise what apotheon said
[20:59:33] *** pulse_ is now known as pulse
[20:59:54] <pr-asadi> acaciause: What is "an active lock" ?
[21:00:06] *** Quits: arinov (~arinov@178.240.135.64) (Ping timeout: 260 seconds)
[21:00:08] <pr-asadi> the "an active lock"*
[21:00:16] <apotheon> It'd have to be an active lock *because of creating it*, too -- not for some other reason later.
[21:00:32] <acaciause> pr-asadi: as in it is writing or reading from the file at the moment you want to check it
[21:00:34] <apotheon> pr-asadi: a file lock
[21:00:39] <acaciause> yes
[21:00:39] <apotheon> what acaciause said
[21:01:17] <apotheon> The OS typically has facilities for "locking" a file to prevent multiple programs from writing to it simultaneously.
[21:01:38] <apotheon> . . . so if a program created a file and hasn't released its lock on the file, you can tell which file has it locked.
[21:01:43] <pr-asadi> Sorry, I did not understand the "File lock". It seems I should read about it.
[21:02:11] *** Quits: luckyxxl (~luckyxxl@193.27.14.44) (Ping timeout: 245 seconds)
[21:02:13] <apotheon> Of course, if that program released the lock and another program opened it for writing, then you might get a program other than the program that created it.
[21:02:23] <pr-asadi> apotheon: With which function? stat(2) ?
[21:02:26] <omegatron> pr-asadi: you can do so, but it won't help you with your original question (most likely)
[21:03:34] <acaciause> pr-asadi: your best bet is to find or make a logger daemon that watches for file locks, a directory watcher.
[21:03:51] <apotheon> So . . . unless you are checking in realtime what files are being created and by which programs, and you're absolutely certain that no other program would have opened it after creation, this is a dead end on most OSes.
[21:04:00] <omegatron> besides, why do you want to know it? in most cases, it's not important to know the program ..  which program would be the creator if you do  "echo yada > some-file" in your shell?  the shell?
[21:04:27] <apotheon> Maybe the intent is some kind of security integrity checking and forensic data collection.
[21:04:31] <pr-asadi> omegatron: I'm just curious.
[21:04:45] <acaciause> dnotify probably has something
[21:05:09] <omegatron> yeah, but in that case, as you two already pointed out, use a filesystem watcher/notifier/logger/whatever to check current/future changes
[21:05:09] <apotheon> omegatron: I think that'd have to be the shell.
[21:05:09] <acaciause> you can record events with it anyway as I recall 
[21:05:28] <apotheon> I guess I don't know for sure how a file gets created via redirect behind the scenes, though.
[21:05:31] <apotheon> hmm
[21:06:03] <pr-asadi> omegatron: Yes, file system logger is better. 
[21:06:21] *** Joins: mimmy (~mimmy@72.142.88.18)
[21:06:31] <pr-asadi> Thanks guys
[21:06:36] <apotheon> collecting historical data on what programs created new files (or at least invoked system calls to create new files)
[21:06:39] <acaciause> no worries :)
[21:06:44] <apotheon> This was kind of a fun exercise.
[21:07:29] *** Quits: mikoto-c1 (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-c1)
[21:07:36] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[21:08:40] <omegatron> besides, that information would have to be stored somewhere .. maybe in xattr key-value pairs .. but then, who says a program on your system doesn't manipulate them in a wrong way?  this key-value pair would then have to be a WORM attribute (write once, read many)
[21:08:57] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[21:09:14] <omegatron> only deletable, when the file is deleted ..
[21:10:15] <omegatron> and any further file data or metadata manipulation would then also need to be recorded to have a fully tracable system
[21:10:27] <omegatron> (not that some OS do that, but most don't)
[21:10:41] <omegatron> s/not/note
[21:11:30] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:64c3:5621:24b3:cd71) (Quit: simon323)
[21:22:00] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[21:22:25] *** Joins: phao (~phao@2804:d45:8e7a:de00:cee:f943:6e8a:bde5)
[21:26:42] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 260 seconds)
[21:26:47] *** Quits: jurjen (~jurjen@188-206-102-198.mobile.kpn.net) (Ping timeout: 264 seconds)
[21:30:51] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[21:31:21] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[21:32:57] <nomagno> Any idea why pressing EOF (CTRL+D) seems to just make fgets() all of a sudden nonblocking?
[21:39:18] <apotheon> nope
[21:40:00] <Neui[m]> Probably because fgets waited for new input. EOF "marks" the end, so when it is encountered no more data can come after this and thus there is no "need" to wait for new input.
[21:41:29] <apotheon> Neui[m]: Have you considered getline() instead?
[21:41:41] <apotheon> Neui[m]: sorry, not you
[21:41:53] <apotheon> nomagno: have *you* considered getline() instead?
[21:42:41] <apotheon> nomagno: Why doesn't it just return, though?
[21:42:47] <apotheon> hmm
[21:43:20] <apotheon> I can't straighten out my replies today.  Neui[m]: Why doesn't fgets() just return after entering EOF, though?
[21:43:28] <apotheon> (according to nomagno)
[21:45:49] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[21:46:49] *** Quits: davros (~davros@host86-185-61-22.range86-185.btcentralplus.com) (Remote host closed the connection)
[21:47:16] *** Quits: Nistar (Nistar@gateway/vpn/protonvpn/nistar) (Remote host closed the connection)
[21:47:31] <Neui[m]> apotheon: From what I understand nomango is asking why fgets returns when inserting EOF (implying when not inserting EOF the program is "stuck"/blocks execution inside fgets)
[21:49:20] <nomagno> ^
[21:49:57] <nomagno> In any case, getline is a GNU extension. Not my cup of tea
[21:51:03] <floatcomplex> no, getline is posix
[21:51:16] *** Joins: cousteau (~cousteau@user/cousteau)
[21:51:21] <floatcomplex> you shouldn't not use it when it's the right tool
[21:52:04] *** Joins: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com)
[21:52:11] <nomagno> Is it?
[21:52:39] <ian|> is the prime use of opaque data structures for libraries?
[21:52:41] <nomagno> It is.
[21:54:01] <ian|> struct xcb_connection_t is opaque in libxcb
[21:54:12] <cousteau> sounds right
[21:54:55] <cousteau> then you only pass it around as a pointer, and let the lib handle it ("create"/allocate it, "destroy"/free it, access members, etc)
[21:55:43] <ian|> opaque struct == incomplete data type?
[21:56:07] <cousteau> basically, the end user doesn't need to see what's inside.  (And in those cases the struct is probably aliased to a typedef, which is a hint that you're not supposed to see it as a struct or anything specific)
[21:56:28] <nomagno> POSIX getline is literally fgets() with reallocation though
[21:56:50] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 246 seconds)
[21:57:02] <ian|> https://docs.microsoft.com/en-us/cpp/c-language/incomplete-types?view=msvc-170 this says that structs, unions, and arrays can be incomplete types
[21:57:17] <ian|> is there any opaque-ness involved for unions and arrays?
[21:57:20] *** Joins: kish` (~aqua@user/aqua)
[21:57:21] <ian|> if that makes sense
[21:57:26] <floatcomplex> nope
[21:57:50] <apotheon> Why would someone ask why it returns on EOF?  That seems natural.
[21:58:09] <floatcomplex> i mean i guess you could have an opaque pointer to a union but it would make more sense to have an opaque pointer to a tagged union, i.e. a struct
[21:58:27] <apotheon> nomagno: We're talking about getline(), not a getline library from GNU.
[21:58:46] <floatcomplex> are you mixing up getline and readline
[21:58:53] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[21:59:10] <apotheon> probably
[21:59:16] <apotheon> meaning nomagno mixing them up
[21:59:31] <apotheon> nomagno: getline() is safer in some respects
[21:59:39] <nomagno> Not sure it is worth preferring over fgets() when the way I am handling the input doesn't break if it is split up
[22:00:57] <floatcomplex> even if getline() is just a trivial wrapper i wouldn't NIH it, it's in my libc and yours too unless you are targeting not-posix
[22:00:59] <nomagno> apotheon: I know
[22:01:04] *** Quits: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com) (Quit: ian|)
[22:01:13] <cousteau> ian|: same opaqueness for unions than for structs
[22:01:40] <nomagno> I did not talk about readline at any point though
[22:02:20] <floatcomplex> nomagno: well you said getline was a gnu-ism, and readline is a similar call that is actually a gnu-ism (although there are API-compatible non-gnu implementations)
[22:02:23] <cousteau> as for arrays, an array of elements of incomplete type is incomplete, and an array of unspecified length is also incomplete.  I think.
[22:02:28] <gproto23> what is char **argv in main?
[22:02:39] <floatcomplex> ,english char ** argv
[22:02:39] <candide> floatcomplex: Declare `argv` as a pointer to pointer to char.
[22:02:45] <floatcomplex> thanks candide
[22:02:59] <candide> Think nothing of it, f​loatcomplex
[22:03:16] <floatcomplex> gproto23: it's a NULL-terminated array of strings containing the command line arguments to the code
[22:03:26] <cousteau> gproto23: a pointer into an array of char*.  (There is an array of char* somewhere, and argv points to the first char* in that array.)
[22:03:29] <nomagno> I am definitely aiming to have as little POSIX as possible in my library. It is meant to have pretty much one entry point that does require information that only C standard supersets like POSIX and Microsoft can provide, though very little
[22:04:10] <floatcomplex> nomagno: pretty sure microsoft c also has getline
[22:04:18] <twkm> you signalled the end of input, thus fgets returns.
[22:04:22] <floatcomplex> probably defined in some horrid c++-specific way though
[22:04:24] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:04:55] <cousteau> floatcomplex: and slightly incompatible with the POSIX version.
[22:05:04] <cousteau> (I guess)
[22:05:08] <nomagno> Why do y'all keep talking about messages I didn't send?
[22:05:18] <nomagno> I said it requires information that only C standard supersets like POSIX and Microsoft can provide, not that I want to use them
[22:05:39] <apotheon> nomagno: Why NIH?
[22:05:46] <floatcomplex> nomagno: you implied you didn't want to use getline because you want to run on microsoft, right?
[22:05:47] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[22:06:02] <apotheon> floatcomplex: not necessarily nomagno's implication
[22:06:12] <floatcomplex> alright then i can't parse what they said
[22:06:12] <nomagno> I did not imply that, no
[22:06:12] <apotheon> 18:35 < nomagno> Why do y'all keep talking about messages I didn't send?
[22:06:15] <apotheon> I don't recall doing that.
[22:06:36] <apotheon> floatcomplex: nomagno just said something that *might* have meant that, but might not
[22:06:54] <cousteau> Well, since nomagno said he wants to use POSIX and Microsoft I think we should help :)
[22:07:16] *** Quits: nctcf^ (~nctcf@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[22:07:22] <gproto23> cousteau floatcomplex thank you guys
[22:07:32] <nomagno> floatcomplex: apotheon: Alright, I suck at being concide. Here it goes: My libary is written in standard C. Woohoo!
[22:07:44] <nomagno> s/cocide/concise/
[22:08:38] *** Joins: esselfe (~steph@user/esselfe)
[22:08:40] <floatcomplex> nomagno: my suggestion is you assume the availability of getline and if you have to shim for it on non-posix platforms, you still don't have to write any documentation
[22:08:48] <nomagno> Everything else was simply me saying "yes, the program needs information I can't get with standard C. No, that does not justify making it nonstandard C, you can just make a thin wrapper per implementation"
[22:08:54] *** Quits: CaCode- (~CaCode@user/cacode) (Remote host closed the connection)
[22:09:56] *** Joins: CaCode- (~CaCode@user/cacode)
[22:10:05] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[22:10:17] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[22:10:23] <De4nWhit3> Hello everyone.
[22:10:23] <tm512> couldn't getline be implemented completely in standard C? could just write an implementation to use regardless of platform
[22:10:45] <floatcomplex> tm512: yes, trivially. but if you do that, make it use the same API as posix getline, rather than your own weird third thing
[22:10:59] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Client Quit)
[22:11:11] <nomagno> Why is this getting so complicated though? It's not like fgets() is unsafe. I already said there is no way I could get a partial line read that isn't valid
[22:11:28] <cousteau> well, fgets() is kind of tricky
[22:11:55] *** Quits: CaCode- (~CaCode@user/cacode) (Remote host closed the connection)
[22:12:12] *** Joins: CaCode- (~CaCode@user/cacode)
[22:12:37] *** CaCode- is now known as CaCode
[22:12:45] <nomagno> I am using fgets() and strtok() with a single token as delimiter. If the string is invalid, the tokenized value defaults to 0. If the string is only partially read, the value is either valid or 0. There is no way you can partially read a string where you end up with a character different from invalid, token, or number
[22:12:58] <tm512> oh, hmm, I looked in this program I wrote years back that compiled on both *nix and windows (though through mingw-w64 for the latter), and I just used fgets
[22:13:06] *** Joins: kish` (~aqua@user/aqua)
[22:13:24] <floatcomplex> mingw-w64 is a pretty cool guy
[22:13:31] *** Quits: Iarfen (~quassel@ec2-3-225-168-229.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[22:14:03] <floatcomplex> unfortunately you can still have code that compiles without error when targetting posix and with mingw-w64 but behaves differently at runtime
[22:14:10] <apotheon> nomagno: If you have only trusted data guaranteed to fit the fgets() use case, have fun.  It's cool.
[22:14:22] <apotheon> Why not use getline(), though?  Is there a performance concern?
[22:14:32] <cousteau> I recall that mingw-w64 did some weird stuff with printf
[22:14:41] <cousteau> like not supporting %lld or something like that
[22:14:42] <tm512> it's nice not having to go anywhere near windows to compile stuff for people whose OS choice is a bit unfortunate
[22:15:01] <nomagno> apotheon: The concern is that it is not standard, and I really don't need anything nonstandard to make this library
[22:15:12] <fizzie> cousteau: You're probably thinking of the __USE_MINGW_ANSI_STDIO thing.
[22:15:12] <floatcomplex> cousteau: tm512: the thing i ran into is select() can't select on both STDIN_FILENO and a tcp socket on windows because they're not the same kind of thing. but you get absolutely no indication of that at compile time
[22:15:30] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:15:33] <cousteau> ouch
[22:15:48] <apotheon> nomagno: Oh, you mean not standard C itself.  Okay.
[22:15:51] <cousteau> yeah I faintly remember that in windows you closed sockets with closesocket() instead of close()
[22:15:58] *** Joins: meator (~meator@user/meator)
[22:16:03] <nomagno> tm512: in my experience, you can definitely get unexpected issues if you don't test on actual Windows. Wine does accept some POSIX-y thingies it maybe shouldn't
[22:16:14] <apotheon> nomagno: Are you deploying to weird OSes?
[22:16:15] <floatcomplex> sic transit my only attempt to run code on windows
[22:16:27] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[22:16:45] <apotheon> sic transit gloria mundi
[22:16:59] <floatcomplex> there was no glory in it
[22:17:17] <cousteau> didn't know transit was sic, hope he gets better
[22:17:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:17:23] <floatcomplex> nothing of value is buried here &c.
[22:17:25] <nomagno> apotheon: I am making a non-frontend library (as in, literally is just input-output trough functions or stdin or whatever you want). There is literally no reason to not make it capable of being deployed to weird OSes.
[22:17:44] <floatcomplex> windows is a weird os tho
[22:17:54] <floatcomplex> in the sense that it is an outlier
[22:17:54] <tm512> nomagno: generally I wasn't using many POSIX-isms, generally this was game development stuff, using glfw as an abstraction for most OS-specific stuff
[22:17:58] <apotheon> floatcomplex: good point
[22:18:18] *** Joins: shivesh (~shivesh@user/shivesh)
[22:18:35] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Remote host closed the connection)
[22:18:48] <nomagno> tm512: sounds good then
[22:19:25] <nomagno> In theory, you only need to thinly wrap graphics, sound, and input to get a very maximally portable GUI program
[22:19:27] *** Joins: msmhbvd^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[22:19:38] <nomagno> and/or game
[22:19:55] <tm512> the one where I used fgets was a chess engine, which I tested in both WINE and had some windows users ensure it worked
[22:20:20] <floatcomplex> note to self: need wine to test nomagno's stuff
[22:20:37] <tm512> had to write some OS-specific code for timers which was annoying, but I think most of the code was standard C99 aside from that
[22:20:49] <nomagno> floatcomplex: you don't need wine though
[22:21:59] <nomagno> Really though, the Windows API is just not a good fit for C
[22:22:24] <nomagno> Microsoft seems to be obsessed with forcing an Object-Oriented API into an operating system that is written in a mostly procedural paradigm
[22:22:58] <apotheon> I don't need wine at all.
[22:23:37] <apotheon> nomagno: Windows came to be in the era of peak OOP adoption rate.
[22:23:46] <floatcomplex> apotheon: two beers will do
[22:23:48] <nomagno> apotheon: Are you developing for Windows without testing?
[22:24:14] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:24:17] <nomagno> That's some next-level confidence in code quality
[22:24:20] <apotheon> If you mean "Do you write code with portability in mind without actually giving a shit if it runs on Windows?" then yes.
[22:24:44] <floatcomplex> microsoft provides free VM images of windows for developers to test their shit because they acknowledge that developers don't actually sit in front of windows
[22:25:04] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[22:25:31] <nomagno> If statistics are to be believed, like a significant chunk of developers ARE sitting in front of Windows. Terrifying thought
[22:25:31] <apotheon> That
[22:25:40] <floatcomplex> https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/
[22:25:43] <apotheon> That's also probably why Microsoft provides VS Code.
[22:26:06] <floatcomplex> hmm this isn't even the same page as i was expecting
[22:26:21] <apotheon> nomagno: I guess that depends on your definition of "developers".
[22:26:33] <apotheon> I'm kidding.  I'm not that much of a snob.
[22:26:37] *** Joins: rgrinberg (~textual@200.5.63.76)
[22:26:57] <oldlaptop> The .NET/mssql ecosystem has a pretty large footprint.
[22:27:24] <apotheon> unfortunately
[22:27:25] <nomagno> VS Code is like... not really provided for any particular reason outside Windows having a poop general development experience without it
[22:27:59] <apotheon> nomagno: I keep finding VS Code users who claim Visual Studio .NET is better, but they use VS Code because they're on Linux.
[22:28:12] <floatcomplex> also they would hate for your lap to get cold because your laptop wasn't doing anything, so they provided a free electron app to each developer for that purpose
[22:28:20] <apotheon> (Having tried both, I think VS Code is better than VS.NET.)
[22:28:35] <apotheon> floatcomplex: indeed
[22:28:52] *** Quits: soapsudsxx (~soapsudsx@141.193.188.136) (Remote host closed the connection)
[22:28:56] <apotheon> "Here -- run Chrome as the development framework and runtime of your editor."
[22:29:11] <floatcomplex> waht do you mean you want to develop during a long flight.
[22:29:13] <nomagno> apotheon: I used VS Code, it's nice. Not really tried .NET at all honestly. Maybe C# as a Godot scripting language
[22:29:17] <oldlaptop> msvc at least gets you a pretty useful debugger with the whole deal
[22:29:26] *** Joins: node1 (~node1@user/node1)
[22:29:47] *** Quits: rgrinberg (~textual@200.5.63.76) (Client Quit)
[22:29:57] <apotheon> I wouldn't know.  I haven't touched MSVC in about twenty years.
[22:30:29] <apotheon> It has probably been close to ten since I had to use Eclipse, thank goodness.
[22:30:48] <apotheon> brain-damaging experience
[22:31:13] <apotheon> That was for C++, though.
[22:31:35] <apotheon> I think the job listing said "C/C++", so . . . take that for what it's worth.
[22:31:43] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[22:32:29] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[22:32:49] <bruda> I 2nd that vscode usage. I like it too. Even the modified 'code' version found in linux repos works good too.
[22:32:55] <nomagno> I unfortunately hit my head against Android Studio + Java. What did I get out of the experience? I just use one of the two or three thin wrappers for accessing the Android stdlib from C. Way more work, but also way more comfortable
[22:33:09] <nomagno> Relevant: https://github.com/cnlohr/rawdrawandroid
[22:33:14] *** Joins: bindu (~bindu@user/bindu)
[22:33:19] <nomagno> This is actually a genius way of doing it
[22:33:25] <sham1> Well to be fair, the Android NDK stuff is painful on purpose
[22:34:00] <nomagno> I find compiling the Android NDK painful, and the Android SDK IM-POSS-I-BLE
[22:34:07] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:35:23] <nomagno> As in, I actually spent way more time than is reasonable trying to compile the Android SDK without accepting Google Terms of Service/Use for any toolchain. Just as an experiment. I failed miserably, since they rely on a fairly long proprietary toolchain and refuse to give instructions on how to build it manually
[22:35:35] <bruda> Every time I approached Java I found myself kinda repulsed. Maybe I just can't come to terms with that flavor or something. C and Go are the languages I seem to acquire a taste for. Maybe JavaScript as a playtoy via userscripts.
[22:37:25] *** Quits: haliucinas (~haliucina@5.20.153.21) (Remote host closed the connection)
[22:38:34] *** Joins: aveng3r (~avenger@179.154.157.53)
[22:39:03] <floatcomplex> go is a valiant attempt to implement the original three-tablet version of c. the third tablet was about coroutines but i think there must have been a rule at the bottom that said thou shalt not use runtime garbage collection. we'll never know
[22:39:13] <nomagno> OOP and procedural programming are different, but in the end they are fairly complementary. However, Java just manages to butcher both
[22:39:54] *** Joins: MrMobius_ (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[22:40:12] <twkm> and so we leave discussing c ...
[22:40:26] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[22:41:02] <nomagno> floatcomplex: What is this about three tablets/fundamental concepts? Not familiar with whatever source material you found that in
[22:41:14] <sham1> Well you can have C on the JVM if you want
[22:41:55] <nomagno> sham1: Just as you can write a JVM in C
[22:42:26] <floatcomplex> nomagno: i was making a joke about how dennis richie isn't around to tell us what he thought anymore, and brian kernighan and the rest of their contemporaries went on to invent go, which is heavily coroutine based but also inextricably relies on runtime gc
[22:42:52] *** Joins: haliucinas (~haliucina@5.20.153.21)
[22:45:39] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[22:46:52] <sham1> Well it does make sense since you wouldn't want to copy the things sent across the channels, and using some kind of a reference counting system would have required some kind of synchronisation and it wouldn't be as fast
[22:47:27] <bruda> s/richie/ritchie/ (just saying)
[22:47:32] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 240 seconds)
[22:47:43] <floatcomplex> sham1: yes, but you can get all the benefits in idiomatic C without needing a gc
[22:47:54] *** Quits: MrMobius_ (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[22:47:55] <floatcomplex> or a reference counter
[22:48:24] <floatcomplex> structured concurrency means there is always a known-at-compile-time place that the last reference to a block of memory can go out of scope
[22:49:09] <floatcomplex> among other surprisingly useful benefits
[22:49:41] *** Joins: jurjen (~jurjen@31-161-184-96.mobile.kpn.net)
[22:49:51] *** Quits: papa (~papa@user/papa) (Quit: connection reset again by peer.)
[22:51:17] *** Joins: Bakunin (~Lindis@user/lindis)
[22:51:18] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:51:26] <Bakunin> foiled again
[22:51:36] *** Quits: glider (~glider@user/glider) (Quit: ZNC 1.9.x-git-111-f2cdc3db - https://znc.in)
[22:53:11] *** Quits: eldritch (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[22:53:49] <nomagno> I don't understand the hate for garbage collection. It is actually 
[22:53:50] <nomagno> Pressed enter too early, I didn't even know if I wanted to send that
[22:54:56] <sham1> It's good and nice space efficiency and allocation speed, yes. People just tend to associate it with slower and... more meh languages
[22:55:06] <floatcomplex> garbage collection is inappropriate in hard realtime systems because at any time it mi
[22:55:16] <koollman> nomagno: people like garbage, so they don't want it to be collected by something else
[22:57:24] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[22:58:09] <roxlu> I was just wondering, why do the functions like `snprintf()` return an `int` that is used to store the number of bytes written and not a ssize_t? they do accept a `size_t` to tell how large the buffer is. is this a general "rule" / convention?
[22:58:51] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 256 seconds)
[22:58:53] <twkm> ssize_t isn't in c.
[22:59:42] <floatcomplex> ght block for however long it feels like
[23:00:03] *** Joins: mimmy (~mimmy@72.142.88.18)
[23:00:48] *** Quits: phao (~phao@2804:d45:8e7a:de00:cee:f943:6e8a:bde5) (Quit: Leaving)
[23:01:17] <roxlu> twkm: ah ok thanks, wouldn't it have made more sense to accept an int for nbytes then maybe? 
[23:01:48] <roxlu> or... I'm sure there is a reason why the types differ; trying to find the convention/rule 
[23:02:03] *** Joins: glider (~glider@user/glider)
[23:05:26] <twkm> there's a need to indicate failure.
[23:08:37] <roxlu> I see, thanks
[23:08:54] *** Quits: CaCode (~CaCode@user/cacode) (Remote host closed the connection)
[23:11:46] <nomagno> I'm sure some implementation out there allows you to fclose() stdout
[23:13:30] <floatcomplex> why would it not
[23:14:03] <twkm> all of them.
[23:14:06] <floatcomplex> i've written code in godbolt where i HAD to fclose() stdout because there is a crazy small limit on open file descriptors and i needed one more
[23:15:53] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[23:18:12] <caze> nomagno: Maybe you should familiarize yourself with the C standard?
[23:18:34] *** Joins: Alhazred (~Alhazred@130.245.70.28)
[23:23:04] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:23:24] *** Quits: blackbeard420_ (~blackbear@45.33.85.133) (Quit: ZNC 1.8.2 - https://znc.in)
[23:23:36] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[23:24:23] *** Quits: jess (~jess@libera/staff/jess) (Quit: I try to be an optimist / but my glass is always bone dry)
[23:26:36] *** Joins: arinov (~arinov@213.194.126.155)
[23:30:19] *** Joins: strajder (~strajder@user/strajder)
[23:33:14] *** Joins: rgrinberg (~textual@200.5.63.76)
[23:33:22] *** Joins: mikess (~sam@user/mikess)
[23:34:15] *** Joins: Nistar (Nistar@gateway/vpn/protonvpn/nistar)
[23:34:16] <fizzie> FWIW, it would've been possible to also reserve a few very unlikely values like `(size_t) -1` for an error indication, rather than using int as the return type. That was the design chosen for some of the newer APIs -- for example, mbrtowc takes a size_t value n, and returns a size_t value that's between 0 to n inclusive for "normal" situations, `(size_t) -1` for one kind of an error, and `(size_t) -2`
[23:34:18] <fizzie> for another.
[23:34:36] <fizzie> (But it wouldn't surprise me if the return type of at least printf predated size_t as well.)
[23:35:47] *** Quits: alch (~alch@151.36.34.106) (Ping timeout: 264 seconds)
[23:35:59] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 268 seconds)
[23:36:17] <twkm> it did.  could have been standardized as other than what was being done, but that was only considered for exceptional issues.
[23:36:39] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Ping timeout: 250 seconds)
[23:37:07] *** Joins: alch (~alch@151.36.37.189)
[23:39:40] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[23:40:01] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[23:40:15] *** Joins: strajder (~strajder@user/strajder)
[23:40:44] *** Quits: zmt01 (~zmt00@user/zmt00) (Quit: Gone.)
[23:42:32] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[23:43:02] <chiselfuse> Sorry if a bit off-topic, I'm a newb and I have a very basic makefile that I would like someone to improve or point out any mistakes etc... https://termbin.com/df6a
[23:44:06] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:55ba:3218:beb2:ccb4)
[23:44:08] <chiselfuse> I just noticed the debug target isn't pointing correctly
[23:44:14] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:45:17] <chiselfuse> For instance, I'm not even sure if I'm supposed to do a debug target or if it's supposed to get debug flags from the `make` command and expand them directly by conventions etc...
[23:45:46] *** Quits: Nistar (Nistar@gateway/vpn/protonvpn/nistar) (Ping timeout: 260 seconds)
[23:46:01] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:46:02] <twkm> you probably want ##workingset.
[23:48:03] *** Joins: Nistar (Nistar@gateway/vpn/protonvpn/nistar)
[23:49:17] *** Quits: missogra (~missogra@dynamic-077-006-033-160.77.6.pool.telefonica.de) (Ping timeout: 256 seconds)
[23:49:56] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[23:52:35] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 264 seconds)
[23:54:01] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[23:57:23] *** Quits: aveng3r (~avenger@179.154.157.53) (Quit: leaving)
[23:59:29] *** Quits: Alhazred (~Alhazred@130.245.70.28) (Ping timeout: 256 seconds)
[23:59:39] *** Joins: Alhazred (~Alhazred@86.106.74.46)
[23:59:58] <nomagno> How can I use, say, gcc or whichever tool is appropiate to get a ,cc style list of the variables' state in memory after running a program?
[23:59:59] <nomagno> ,cc int a = 5;
