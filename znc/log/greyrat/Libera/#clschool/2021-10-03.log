[00:07:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:28:21] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[00:29:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:36:09] *** Quits: macaw (~macaw@176.221.120.196) (Quit: Client closed)
[00:43:19] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[00:45:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:58:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:16:46] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[01:17:17] *** Server sets mode: +nt 
[01:26:13] *** Joins: akoana (~ah@user/akoana)
[01:36:54] *** Joins: dra (~dra@2a04:4540:640b:a300:e522:3040:cdfb:9cf5)
[01:38:54] <copec> If you have something that is a hash table, and you want to signify that something is a hash table, but you want a shorter name, would you name the symbol somethinght, something-h-t, or something-ht?
[01:50:44] <lisp123> copec: I'd personally do -hash-table, but out of the two options, -ht sounds better IMO
[01:54:10] <mfiano> Neither is good style
[01:57:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[01:58:46] <mfiano> The fact that it hashes and possibly that it is a table, is an implementation detail. A variable should be descriptive of what it is for in its level of abstraction, not how it is implemented.
[01:58:58] *** Quits: shka (~herr@109.231.6.176) (Ping timeout: 260 seconds)
[02:01:24] <mfiano> It is also not good style to use abbreviated terms in most cases.
[02:02:31] <mfiano> You should be descriptive in naming your data, and leave no room for ambiguity.
[02:08:52] *** Parts: akoana (~ah@user/akoana) (Leaving)
[02:50:52] *** Quits: dra (~dra@2a04:4540:640b:a300:e522:3040:cdfb:9cf5) (Ping timeout: 250 seconds)
[03:16:55] <pjb> copec: it should not matter that it's a hash-table.  If you have a collection have a functionnal abstraction.  clients  (client-named name clients) (setf (client-named (client-name client) clients) client)   Then client can be a hash-table, it's hidden in (defun client-named (name clients) (gethash name clients)) etc.
[03:20:12] <pjb> copec: if you prefer to store your clients in a a-list, (defstruct clients by-name) (defun client-named (name clients) (cdr (assoc name (clients-by-name clients) :test (function string-equal))))
[03:20:37] <pjb> this way, you don't have to change your program if you need to change your data structure!
[03:21:45] <pjb> copec: you could even have both collections of clients that are hash-tables and that are a-lists, if client-named is a generic function with different methods!
[03:40:11] *** Joins: cyberbanjo (~user@2607:fb90:4251:ffb6:1059:2a08:5fed:6000)
[03:50:51] *** Joins: wtR (~wy@103.134.42.227)
[03:52:27] *** Parts: wtR (~wy@103.134.42.227) ()
[04:08:03] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:10:55] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:13:10] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[05:18:19] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:24:53] *** Joins: Josh_2 (~user@37.25.47.130)
[05:54:59] *** Quits: sts-q (~sts-q@212.53.219.240) (Ping timeout: 252 seconds)
[06:06:49] *** Quits: emacsoma1 (~emacsoman@136.60.128.68) (Quit: WeeChat 3.3)
[06:07:52] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[06:11:49] *** Joins: sts-q (~sts-q@212.53.219.166)
[07:39:54] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[07:45:11] *** Joins: zagura__ (~zagura@user/zagura)
[07:50:55] *** Quits: sts-q (~sts-q@212.53.219.166) (Ping timeout: 252 seconds)
[07:51:40] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[07:52:01] *** Quits: zagura__ (~zagura@user/zagura) (Ping timeout: 252 seconds)
[07:52:57] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:53:00] *** Quits: commandoline (~commandol@ubuntu/member/commandoline) (*.net *.split)
[07:53:00] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[07:53:01] *** Joins: zagura (~zagura@user/zagura)
[07:57:49] *** Joins: White__Flame (~quassel@user/white-flame/x-6930243)
[07:57:54] *** Joins: sts-q (~sts-q@212.53.219.166)
[07:58:28] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Ping timeout: 252 seconds)
[07:59:13] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[07:59:33] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[07:59:46] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 252 seconds)
[08:00:45] *** Joins: greaser|q (greaser@antihype.space)
[08:04:54] *** Joins: aeth_ (~aeth@user/aeth)
[08:04:55] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[08:04:57] *** aeth_ is now known as aeth
[08:06:08] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:06:19] *** White__Flame is now known as White_Flame
[08:09:14] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[08:09:45] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[08:12:51] *** Quits: cyberbanjo (~user@2607:fb90:4251:ffb6:1059:2a08:5fed:6000) (Read error: Connection reset by peer)
[08:22:02] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[08:22:26] *** Joins: cyberbanjo (~user@2607:fb90:4251:ffb6:1059:2a08:5fed:6000)
[08:33:46] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[08:33:58] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[08:54:40] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[08:55:24] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[09:26:55] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[09:27:25] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[09:41:39] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[09:41:54] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[09:42:36] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Remote host closed the connection)
[09:45:03] *** Joins: cyberban` (~user@2607:fb90:4251:ffb6:84e2:63d5:bd90:2404)
[09:49:23] *** Quits: cyberbanjo (~user@2607:fb90:4251:ffb6:1059:2a08:5fed:6000) (Ping timeout: 268 seconds)
[10:45:41] *** Joins: shka (~herr@109.231.6.176)
[11:38:43] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:34:52] *** Quits: cyberban` (~user@2607:fb90:4251:ffb6:84e2:63d5:bd90:2404) (Remote host closed the connection)
[13:04:33] *** Joins: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net)
[13:14:50] *** Joins: q3cpma (~q3cpma@176-136-178-80.abo.bbox.fr)
[13:15:10] <q3cpma> Hello, does anyone know why I can't do (require :pkg) (pkg:somefun somearg) when in a let body?
[13:17:24] <mfiano> Because REQUIRE loads a module, not a package, and REQUIRE shouldn't be used anyway.
[13:17:51] <q3cpma> But that's what's recommend for :sb-prof
[13:18:13] <q3cpma> What should I use?
[13:18:21] <mfiano> Ask in #sbcl
[13:18:45] <q3cpma> No, I mean "usually", not just for :sb-sprof
[13:18:56] <mfiano> Quicklisp
[13:18:58] <White_Flame> by "can't do", it's probably a read error
[13:19:04] <White_Flame> eg, the package SB-SPROF doesn't exist yet
[13:19:05] <q3cpma> I see the "problem", then
[13:19:07] <q3cpma> Thanks
[13:19:38] <White_Flame> so reading the entire LET form, whose body uses SB-SPROF: stuff will die
[13:19:44] <White_Flame> because the REQUIRE hasn't run yet
[13:20:26] <mfiano> Yes, the pkg:foo syntax is parsed before any expressions are evaluated
[13:20:37] <q3cpma> Ah, I understand better
[13:20:50] <mfiano> at parse (read) time, that is an error because (require ...) hasn't been eval'd yet
[13:21:31] <q3cpma> So what's the dynamic way of using a package?
[13:21:35] <q3cpma> in-package?
[13:21:48] <White_Flame> find-symbol
[13:21:54] <White_Flame> erm
[13:21:54] <mfiano> in-package assume the package definition has been previously evaluated
[13:22:12] <White_Flame> yeah, find-symbol
[13:22:26] <q3cpma> I see, thanks
[13:22:26] <White_Flame> you can then (funcall symbol params...)
[13:22:29] <mfiano> That is one way, yes
[13:22:38] <q3cpma> A bit of a pain, but that's how it is
[13:22:56] <White_Flame> either that, or you need to EVAL/COMPILE new source code that uses those symbols
[13:23:07] <White_Flame> (or LOAD)
[13:23:58] <q3cpma> I think I'm going to go with the find-symbol approach, since it's just one call
[13:24:20] <White_Flame> in my experience, libraries that have code which only manifests if a certain package exists are put in their own files to conditionally load
[13:24:48] <White_Flame> or to load after some option flips and the package is pulled in
[13:24:56] *** Joins: random-nick (~random-ni@87.116.183.117)
[13:25:18] <q3cpma> Yes, that's poor design
[13:25:32] <mfiano> What about #.(require :sb-sprof)
[13:25:35] <White_Flame> well, the source code itself depends on that stuff existing
[13:25:57] <White_Flame> are you always going to be pulling it in?
[13:26:11] <White_Flame> then yeah, #. or probably more idiomatically, EVAL-WHEN
[13:26:18] <q3cpma> mfiano: I get "illegal function call"
[13:26:37] <mfiano> Not here
[13:26:44] <White_Flame> the return value from #. gets treated as the source code to run, which is probably the issue
[13:27:14] <White_Flame> it returns ("SB-SPROF") for me, which would be an illegal function call
[13:27:21] <q3cpma> Makes sense, is a prog2 with t the usual way to ignore return values?
[13:27:33] <White_Flame> or eval-when
[13:28:05] <q3cpma> Sadly, I'm a bit too new to CL to know eval-when
[13:28:11] <q3cpma> But I'll look up
[13:28:19] <White_Flame> (eval-when (:compile-toplevel :load-toplevel) (unless (find-package "ALEXANDRIA") (ql:quickload "alexandria")))
[13:28:25] <White_Flame> for a single-file fiddle for me
[13:28:52] <White_Flame> so you can reload it without constantly being re-quickloaded (or re-required in your case)
[13:29:37] <White_Flame> it basically says to actually run the forms during the compile step, or when the code is loaded again
[13:29:39] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[13:29:50] <White_Flame> just make sure it's toplevel
[13:29:59] <q3cpma> That's the problem, I don't want toplevel
[13:30:08] <White_Flame> what is the actual case you're doing?
[13:30:18] <mfiano> Usually something like an SBCL contrib module is for personal testing and what not, and not part of a library. If that is the case, you can add the REQUIRE forms to your rc file, or dump a core image with them already loaded and use that instead of the builtin core.
[13:30:36] <q3cpma> I want to do something like (when (string= mode "profile") (require :sb-sprof) (...))
[13:30:49] <mfiano> You really don't.
[13:31:08] <White_Flame> (when (string= mode "profile") (require :sb-sprof) (load "profiling-support.lisp"))
[13:31:23] <White_Flame> or put require sb-sprof at the top of your profiling-support file
[13:31:30] <mfiano> Writing SBCL-specific code is frowned upon. You at least need reader conditionalization there to make it portable Common Lisp code.
[13:31:39] <White_Flame> yep
[13:31:46] <q3cpma> Yes, but there's only a single form to eval, there.
[13:31:58] <White_Flame> this is all assuming it's just your own private code, but stuff genreally doesn't get released like that without concessions to running on other CLs
[13:32:05] <mfiano> (require :sb-sprof) will fail on CCL
[13:32:35] <q3cpma> mfiano: that was my noob way of making the file usable on other CLs, using if/cond to only enable it when wanted
[13:32:47] <mfiano> It still won't
[13:33:05] <q3cpma> Why?
[13:34:38] <White_Flame> you really should have a separate entry point for the stuff you want to profile.  Start everything you need to initialize, then on the repl do your require & (sb-sprof:with-sampling ...) or whatever
[13:35:10] <White_Flame> or you could wrap that up in a function and #+sbcl it, to run from the REPL
[13:35:25] <White_Flame> I can't think of a good reason to run the profiler from the main guts of your program
[13:35:28] <q3cpma> Now, I agree with this but I'm not a fan of being forced to
[13:36:12] <mfiano> White_Flame: That is actually a common thing to want to do actually. With a flag/special/etc to toggle a complex game/event loop for example
[13:36:24] <q3cpma> I just made a convenient toplevel dispatcher based on argv at then end of my "script" to run, profile or save an image.
[13:36:41] <White_Flame> mfiano: right, but then you enable it and enter the loop from your repl
[13:36:47] <mfiano> You can't just profile the entry point if it just spawns a thread for example
[13:36:53] <White_Flame> right
[13:37:15] <White_Flame> well then, just use #+sbcl liberally
[13:37:17] <mfiano> or if you only want to profile one part, sprof allows for that
[13:37:19] <q3cpma> Anyway, I understand better at least
[13:52:12] <q3cpma> By the way, is it "okay" to unconditionally use :uiop, as if it were always there?
[13:52:37] <q3cpma> (with a toplevel require)
[13:53:44] <White_Flame> if your code is loaded via .asd, I don't see a problem with it
[13:54:02] <White_Flame> it's an implicit requirement then
[13:54:20] <q3cpma> Indeed
[13:54:34] <White_Flame> I do the same
[13:54:51] <mfiano> There is talks about splitting it from asdf, so I would not.
[13:55:10] <q3cpma> Are there "mainstream" CL implementations without it, anyway?
[13:55:14] <White_Flame> if it were split from asdf, would asdf still load it?
[13:57:29] <mfiano> :shrug:
[13:57:43] <White_Flame> I presume it would
[13:58:09] <White_Flame> and by "splitting off" I presume that would just be project maintenance, not really meaningfully changing the code
[13:58:23] <mfiano> There are also projects making way that replace asdf
[13:58:27] <mfiano> Shinmera's being one
[14:28:14] *** Quits: q3cpma (~q3cpma@176-136-178-80.abo.bbox.fr) (Quit: leaving)
[14:49:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[14:59:13] *** Joins: lottaquestions (~nick@104.221.94.126)
[15:18:02] *** Quits: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net) ()
[15:30:46] *** Quits: lottaquestions (~nick@104.221.94.126) (Ping timeout: 252 seconds)
[16:24:31] *** Joins: makomo (~makomo@user/makomo)
[17:35:46] *** Quits: shka (~herr@109.231.6.176) (Quit: Konversation terminated!)
[17:39:51] *** Joins: shka (~herr@109.231.6.176)
[17:56:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:01:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:06:59] *** Joins: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl)
[18:17:13] *** Joins: thrig (~thrig@70.97.65.251)
[18:47:29] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[18:50:55] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[18:54:20] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[18:54:59] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[18:58:07] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[19:07:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[19:19:26] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:42:53] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[19:43:50] *** Server sets mode: +nt 
[19:54:01] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[19:56:27] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:57:59] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[20:03:57] *** Quits: thrig (~thrig@70.97.65.251) (Remote host closed the connection)
[23:56:02] *** Joins: dra (~dra@2a04:4540:640f:6300:e522:3040:cdfb:9cf5)
[23:58:12] *** Quits: dra (~dra@2a04:4540:640f:6300:e522:3040:cdfb:9cf5) (Remote host closed the connection)
