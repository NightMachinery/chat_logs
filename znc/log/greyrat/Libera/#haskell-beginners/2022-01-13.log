[00:17:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[00:56:58] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[01:10:13] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 240 seconds)
[01:11:49] *** Quits: benin (~benin@183.82.30.17) (Ping timeout: 240 seconds)
[01:13:47] *** Joins: benin (~benin@183.82.30.17)
[01:47:53] *** Quits: jacks- (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[01:59:04] *** Quits: benin (~benin@183.82.30.17) (Quit: Ping timeout (120 seconds))
[02:13:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:16:15] *** Joins: mrmr (~mrmr@user/mrmr)
[02:44:45] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[02:44:54] *** Joins: hololeap_ (~hololeap@user/hololeap)
[02:47:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[02:53:50] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[03:13:57] *** Quits: pritambaral (~pritam@user/pritambaral) (Ping timeout: 240 seconds)
[04:44:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:18:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[06:14:57] *** Quits: polyphem_ (~rod@2a02:810d:840:8754:e450:3ca3:b389:687a) (Ping timeout: 240 seconds)
[06:15:32] *** Joins: polyphem_ (~rod@2a02:810d:840:8754:e450:3ca3:b389:687a)
[06:17:26] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[06:25:33] *** Joins: benin (~benin@183.82.30.17)
[07:12:48] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:05] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:15:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:49:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[08:48:49] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[09:26:47] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[09:45:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:20:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[10:26:16] *** Joins: vicfred (~vicfred@user/vicfred)
[11:13:58] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:35:28] *** Joins: vpan (~0@212.117.1.172)
[11:40:40] *** Quits: hololeap_ (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[11:42:00] *** Joins: hololeap_ (~hololeap@user/hololeap)
[12:16:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:33:35] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[12:34:06] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[12:35:49] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[12:37:16] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[12:47:31] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:31] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:34] *** allbery_b is now known as geekosaur
[12:55:56] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[13:16:09] *** Joins: pritambaral (~pritam@user/pritambaral)
[13:42:39] *** Joins: hololeap (~hololeap@user/hololeap)
[13:43:12] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[13:51:57] <vpan> hi, in the Implementation section of https://wiki.haskell.org/State_Monad `return`, `get` and `put` seem to have a mismatch in the number of arguments between the type declaration and definition. For example, the type of `return` has a single argument but there are two in the definition.
[13:51:57] <vpan> The source of `get` and `put` here (https://hackage.haskell.org/package/mtl-2.2.2/docs/src/Control.Monad.State.Class.html#get) do not have this confusion, although, I'm not entirely sure these are the same functions referred to in the wiki. What's the right way to interpret the examples in the wiki?
[13:53:14] <merijn> the wiki seems sloppy
[13:53:25] <merijn> "These are usually wrapped, but shown here unwrapped for simplicity."
[13:53:49] <merijn> Because normally you'd have "return x = State (\s -> (s, x))"
[13:56:35] <vpan> I didn't really understand what that remark meant. :) OK, I'll just ignore the mismatch. Although, assuming the target audience is beginners like myself, I still think it's confusing. I did find the examples up to that section useful, though.
[13:58:28] <merijn> vpan: I don't think the writing is particularly...didatically sound :)
[13:58:52] <merijn> tbh, the best way to get to grips with state is reimplementing it yourself from scratch
[13:59:12] <merijn> https://gist.github.com/merijn/098106abd45c940dab09
[14:09:09] <vpan> I'm following a book that I like so far. But when I struggle to internalize a certain concept, I try some other source to hopefully fill-in the gaps in my understanding. It was that wiki page this time.
[14:09:09] <vpan> I agree reimplementation may be a good approach to understand something, e.g. some data structures. But it's hard for a beginner to estimate what's easy enough to reimplement and what would be a waste of time. The "reimplement it to understand it approach" stops being practical at some point. :)
[14:09:09] <vpan> Although, I probably tend to be a bit pessimistic about how complicated an implementation would be - I've been surprised many times how simple a basic implementation can be, for example, of some data structure.
[14:20:09] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[14:21:05] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[14:37:04] *** pritambaral is now known as prite
[15:04:48] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:06:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:07:51] *** Quits: prite (~pritam@user/pritambaral) (Remote host closed the connection)
[15:08:18] *** Joins: prite (~pritam@user/pritambaral)
[15:11:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:12:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:17:48] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:18:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:43:46] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[15:44:18] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[15:46:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:47:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:52:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:53:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:58:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:59:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:04:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:05:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:41:43] *** Joins: Pickchea (~private@user/pickchea)
[16:48:46] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[17:37:11] <Christoph[m]> Is there really no way to tell Haskell that Set a is a monad? The problem seems to be that (Ord a) requirement for Set to be efficiently implementable. Could one have an inefficient default implementation for un-Ord-ered Sets?
[17:38:24] <merijn> Christoph[m]: It's not that you need Ord for an efficient one
[17:38:32] <merijn> You need Set to implement it *at all*
[17:38:48] <merijn> There is an unordered-containers package that has a HashSet, btw
[17:39:00] <merijn> But that is not a Monad either, because it requires Hashable
[17:39:55] <geekosaur> what you need for this is what is called an indexed monad
[17:40:07] <geekosaur> there are implementations of this on hackage
[17:49:05] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:e083:f91a:e3b1:b08b)
[17:58:14] *** Joins: da39a3ee5e6b4b0_ (~textual@2403:6200:8876:c04a:6410:d0a3:c1e2:34d8)
[18:00:57] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:e083:f91a:e3b1:b08b) (Ping timeout: 240 seconds)
[18:03:16] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[18:11:01] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Ping timeout: 240 seconds)
[18:16:38] *** Joins: stef204 (~stef204@user/stef204)
[19:09:06] *** Quits: da39a3ee5e6b4b0_ (~textual@2403:6200:8876:c04a:6410:d0a3:c1e2:34d8) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:14:17] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::55f8) (Ping timeout: 240 seconds)
[19:27:43] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[19:55:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[20:00:10] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[20:01:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:19:57] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 240 seconds)
[20:21:33] *** Joins: jespada (~jespada@87.74.36.188)
[20:24:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:29:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:54:24] *** Joins: vicfred (~vicfred@user/vicfred)
[21:11:04] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[21:11:43] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[21:34:56] *** Quits: benin (~benin@183.82.30.17) (Quit: The Lounge - https://thelounge.chat)
[22:12:34] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[22:12:59] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:13:21] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Read error: Connection reset by peer)
[22:26:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:34:36] *** Quits: zaquest (~notzaques@5.130.79.72) (Ping timeout: 250 seconds)
[22:36:04] *** Joins: zaquest (~notzaques@5.130.79.72)
[22:55:30] *** Joins: jacks- (~bc8147f2@cerf.good1.com)
[23:04:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[23:18:22] *** Quits: prite (~pritam@user/pritambaral) (Ping timeout: 250 seconds)
[23:22:51] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[23:58:41] *** Joins: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net)
