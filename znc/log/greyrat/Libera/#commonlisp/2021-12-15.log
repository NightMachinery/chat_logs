[00:06:49] <varjag> i wonder if code gen on arm32 is any different from 7.x
[00:07:01] <varjag> only one way to find out!
[00:07:56] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[00:15:23] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (Read error: Connection reset by peer)
[00:15:31] <rotateq> uiiii
[00:16:54] *** Joins: pdietz22 (~pdietz@216-59-66-162.static.firstlight.net)
[00:17:19] *** Parts: pdietz22 (~pdietz@216-59-66-162.static.firstlight.net) ()
[00:22:33] *** Quits: kevingal (~quassel@2001:770:c0:401:2d47:2f9b:c1be:64a0) (Remote host closed the connection)
[00:29:40] *** Joins: gaqwas (~john@dynamic-077-007-123-070.77.7.pool.telefonica.de)
[00:34:11] *** Quits: even4void (even4void@came.here.for-some.fun) (Ping timeout: 252 seconds)
[00:34:29] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:38:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[00:39:55] *** Joins: aeth (~aeth@user/aeth)
[00:41:28] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[00:42:53] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[00:43:33] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:43:58] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5d34:adba:2092:1fba)
[00:45:16] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10ec:1646:7d3a:50e:9c6d:2db)
[00:45:50] <Guest74> Does anybody use dtrace from a gentle introduction.  Any pros/cons
[00:47:50] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[00:49:02] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5d34:adba:2092:1fba) (Ping timeout: 240 seconds)
[00:53:23] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:f0cf:5664:8ee5:8e87) (Ping timeout: 250 seconds)
[00:55:26] *** Quits: pve (~pve@188-67-184-132.bb.dnainternet.fi) (Quit: leaving)
[00:56:49] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[01:09:42] *** Joins: even4void (even4void@came.here.for-some.fun)
[01:11:45] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:13:25] *** Quits: cosimone (~user@93-47-231-203.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:22:21] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:24:31] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[01:29:10] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[01:31:32] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[01:33:37] *** Quits: VincentV` (~user@212.97.0.109) (Remote host closed the connection)
[01:35:35] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 256 seconds)
[01:36:22] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 260 seconds)
[01:43:56] *** selwynning is now known as selwyn
[01:44:35] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 252 seconds)
[01:47:35] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[01:53:33] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[02:05:31] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 250 seconds)
[02:10:52] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:18:18] *** Joins: karlosz (~karlosz@47.151.136.69)
[02:21:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[02:24:53] *** Quits: djuber (~user@65.79.128.64) (Ping timeout: 256 seconds)
[02:32:51] *** Quits: gaqwas (~john@dynamic-077-007-123-070.77.7.pool.telefonica.de) (Ping timeout: 245 seconds)
[02:36:05] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[02:36:05] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10ec:1646:7d3a:50e:9c6d:2db) (Read error: Network is unreachable)
[02:56:05] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[03:03:53] <dbotton> I have a series of functions that are defsetf functions - I want to be able to use funcall to to select which one to use from a string such as - (setf (funcall "color" control) "yellow") this doesn't work is there a syntax that would?
[03:05:10] <Catie> If I'm not mistaken you can (funcall #'(setf thing) new-value place)
[03:06:43] <Catie> Or rather (funcall #'(setf place) new-value thing), I think my original terminology is different from what I'm trying to express
[03:07:22] <Catie> Okay how about (funcall #'(setf car) 3 (list 'a 'b 'c)) works the way I want it to. That's a good and concrete sentence
[03:08:03] <hayley> I would have a table of strings to functions, which would avoid the SETF machinery.
[03:09:31] <dbotton> not an option here
[03:09:49] <White_Flame> or maybe map it to defmethods
[03:10:04] <Nilby> There's also setf methods e.g. (defmethod (setf foo) (...) which can even be used (eql x) specialization.
[03:12:27] <dbotton> these are methods
[03:15:16] <_death> dbotton: (funcall (fdefinition (list 'setf (get-symbol control "color"))) "yellow")
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[03:17:33] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:17:39] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[03:20:29] <dbotton> get-symbol is undefined
[03:20:50] <_death> although if you really mean defsetf, it won't work because defsetf only defines a setf expander
[03:21:36] <dbotton> I used defsetf
[03:21:49] <_death> dbotton: it's up to you to implement get-symbol, say by using cond or a hash-table or find-symbol, depending on where the string comes from and what it may be
[03:23:21] <_death> dbotton: so work with the update functions you pass to it.. the expander is useful at expansion time not runtime (you can of course eval, but...)
[03:26:17] <_death> it's also possible that you don't actually need defsetf and can just defun a setf function.. then the funcall form I gave will work
[03:26:30] *** Joins: s-liao (~s-liao@101.86.96.154)
[03:26:47] <mfiano> I'm fairly new to CFFI (and C for that matter). Could anyone share some best practices for working with multiple shared libraries in the same project/package?
[03:28:37] <mfiano> I read the manual but it doesn't say very much in this regard. Like can I "use-foreign-library" with multiple libraries? Should I always use the :library flag to defcfun, etc...
[03:32:37] <_death> why wouldn't use-foreign-library work? one thing you need to watch for is not to load multiple libraries that export the same names (like, I had some sdl and sdl2 programs and loaded them all to the same image, and oops things started to break.. ended up porting everything to sdl2)
[03:33:17] <mfiano> I'm primarily interested in having libc and ncurses coexist in the same project/package
[03:33:28] <mfiano> I am wrapping APIs from both
[03:34:04] <mfiano> Though there could be more, though probably nothing incompatible (all libraries in a base install of FreeBSD)
[03:34:39] <mfiano> I'm just not sure what best practice is for a multiple library wrapper project is. I haven't seen it done before.
[03:35:43] <_death> nothing special that I can think of
[03:36:37] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:36:55] <Nilby> mfiano: Once libraries are "loaded", it acts like a flat namespace [even if it's not]. You can use as many as you want. I don't use the :library flag, which you'd probably only need in special cases. You don't even have to "use" libc, although you can.
[03:36:57] <mfiano> If two functions of the same name exist, but I disambiguate by specifying the :library argument to defcfun, could there still be dynamic linker errors?
[03:37:08] <mfiano> I'm not sure how the single namespace corresponds to linking in C
[03:37:17] <Guest74> dbotton: if you're strings are the same as your function names, you can probably just call INTERN  on the strings or FIND-SYMBOL just make sure the case is the same.
[03:38:57] <Nilby> mfiano: Most implementations on unix use something like dlopen, dlsym, under the hood, so you can usually assume it works like that.
[03:39:11] <Catie> Nilby beat me to it
[03:40:53] <Nilby> mfiano: macOS is weirder because it has hierarchical libs in strange places, but you can mostly ignore it, and windows you might have to manage your own DLLs.
[03:41:29] <mfiano> Thank you. I am actually writing very OS-specific code (assuming a specific implementation of libc for a specific version of FreeBSD)
[03:43:16] <dbotton> thanks all for the help. For now just using a format and symbol lookup, eventually I'll properly handle it
[03:43:51] <dbotton> thanks Guest74 I used something similar in the end
[03:44:47] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[03:45:17] <Guest74> np, any chance to show my terrible grammar.
[03:46:38] <dbotton> no issue my poor typing and grammar is famous (stroke, many languages I use in a day etc) thankfully I am mostly tolerated
[03:50:03] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[04:02:50] <jmercouris> I don't understand why the Loop macro has ACROSS and IN
[04:02:54] <jmercouris> why can't this just be extracted from us?
[04:03:01] <jmercouris> why should I care whether I am dealing with an array or a list?
[04:03:11] <jmercouris> s/extracted/abstracted
[04:04:14] <Bike> i think the original loop predates the general sequence type
[04:04:25] <Bike> It is unfortunate
[04:05:44] <jmercouris> I see
[04:06:02] <jmercouris> that would make sense in that case
[04:10:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[04:11:10] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:297c:42b:53ca:ec88)
[04:12:47] *** Joins: notzmv (~zmv@user/notzmv)
[04:17:54] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 265 seconds)
[04:21:22] <hayley> LOOP would have to generate 2^n loops to handle n generic sequences, or it could generate iterator objects, which would hinder static analysis.
[04:36:10] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[04:36:45] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[04:39:28] <scymtym> SBCL supports (loop :for x :being :the :elements :of '(1 2 3) :do (print x)) but as Bike said, the standard was probably too early for something like that
[04:39:59] <scymtym> (and that uses sequence iterators like hayley said)
[04:42:48] <hayley> Oh, another option for compilation, assuming that sequences are either only lists or vectors, would be to inline the code to grab the next element into the loop. Or you could inline, and fall back to an iterator protocol.
[04:44:54] <etimmons> mfiano: IIRC, the presence of cffi-features:flat-namespace on features means that loading the same symbol from multiple libraries (and the :library flag to defcfun) won't work
[04:48:32] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:297c:42b:53ca:ec88) (Ping timeout: 240 seconds)
[04:50:18] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[04:50:55] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[05:02:38] *** Joins: Lycurgus (~juan@98.4.112.204)
[05:02:53] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:80ee:faa6:7302:e610)
[05:32:56] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[05:38:30] <mfiano> etimmons: Thanks
[05:55:54] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[05:56:14] *** Joins: Guest64873 (~bot@172-220-180-248.res.spectrum.com)
[05:56:23] *** Parts: Guest64873 (~bot@172-220-180-248.res.spectrum.com) ()
[06:09:17] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[06:24:39] *** Joins: akoana (~ah@user/akoana)
[06:29:35] *** Joins: karlosz (~karlosz@47.151.136.69)
[06:35:02] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 260 seconds)
[06:49:23] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[06:49:55] *** Joins: karlosz (~karlosz@47.151.136.69)
[07:12:19] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[07:13:10] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[07:20:04] *** Joins: Oladon (~olad@98.43.81.226)
[07:28:37] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[07:31:10] <beach> Good morning everyone!
[07:32:55] *** anticomputer_ is now known as anticomputer
[07:33:18] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:42:06] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[07:49:27] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:59:50] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[08:01:22] *** Joins: Bike (~Bike@71.69.170.70)
[08:01:22] *** ChanServ sets mode: +o Bike
[08:03:37] *** Quits: semz (~none@user/semz) (Ping timeout: 265 seconds)
[08:12:13] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[08:15:56] *** Joins: semz (~none@user/semz)
[08:24:11] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[08:31:21] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[08:36:56] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:46:31] *** Quits: Catie (~user@user/catie) (Quit: sQuit)
[08:47:59] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[08:51:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:52:43] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:01:58] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:04:05] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[09:04:41] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[09:28:29] <phantomics> A question: say I have a macro that interns a symbol in a package: (intern-sym |foo|) interns the symbol foo in package :this-package
[09:30:09] <phantomics> I have another macro that builds a lexical variable assignment using the intern-sym macro: `(set (intern-sym |foo|) :something)
[09:30:48] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[09:31:00] <phantomics> Is there any way to make this work? (set) always sets a dynamic variable, but (setq) needs a quoted symbol, and I can't have the (intern-sym) macro quoted to expand it
[09:36:45] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:42:39] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[09:49:15] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.3)
[09:53:49] *** Joins: treflip (~user@95.79.32.99)
[09:57:52] <beach> I don't know what counts as working, but why is the first macro a macro and not a function?
[09:58:57] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[10:20:49] <mfiano> I have the same question. Given your description, I see no reason for the first macro to not be a function, as it doesn't provide any syntactical abstraction nor does it offer any evaluation control.
[10:21:21] <mfiano> Never use a macro when a function will do.
[10:23:49] <mfiano> Well actually that is a bit wrong. Is the first macro a macro simply to avoid quoting its symbol argument? I am curious why you are effectively interning it into two packages by not using a string.
[10:24:15] <mfiano> If the answer is yes, it is a syntactic abstraction, but it feels like a questionable one to me.
[10:25:14] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[10:31:39] *** Joins: gaqwas (~john@dynamic-077-007-102-154.77.7.pool.telefonica.de)
[10:34:05] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[10:34:27] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:36:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:39:35] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[10:50:22] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[11:02:09] <frodef> Good morning all. I'm setting up a web-application, using sbcl, git, emacs, linux. Does somebody have a pointer or two to setups/ideas for deployment? (meaning, having "finished" code on my laptop or wherever, having that code run on the server(S))
[11:05:29] <frodef> ... preferrably keeping the server as a standard lisp image with full development REPL and such.
[11:06:29] <jackdaniel> frodef: make it a cli app with net.didierverna.clon (with options) and start a local swank server (listening only for local connections)
[11:06:43] <jackdaniel> then tunnel via ssh to your host
[11:07:12] <jackdaniel> people usually put (i.e hunchentoot) behind nginx
[11:08:05] <jackdaniel> for remote debugging you probably need to set slime source code path translations, otherwise M-. won't work (I don't remember how to do that though - only that it can be done)
[11:08:58] <frodef> jackdaniel: thanks!
[11:10:41] <jackdaniel> also if you want to restart the application after crash you may write a systemd unit
[11:11:17] <jackdaniel> alternative approach, somewhat easier, is to start emacs in tmux and start the from it, then detach from it
[11:11:29] <frodef> is nginx over hunchentoot for performance/scaling, or are there security concerns?
[11:12:28] <jackdaniel> I think that it is for both; I'm having nginx because I'm hosting other websites behind standard http ports
[11:13:56] <frodef> so public https to nginx and plain httb to hunchentoot behind that?
[11:14:05] <frodef> s/http
[11:14:19] <jackdaniel> yeah
[11:14:46] <jackdaniel> but if I weren't hosting "traditional" things I'd probably go straight to hunchentoot until it breaks :)
[11:15:30] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[11:16:16] <frodef> right.
[11:16:48] <jackdaniel> McCLIM is such a useful thing to help visualising things while working on them: https://i.imgur.com/wmSngTc.png
[11:17:29] <beach> Indeed.
[11:18:13] <jackdaniel> writing throwaway code is easy enough that you don't feel grief about throwing it away :)
[11:20:00] <frodef> jackdaniel: that image reminds me a lot of when I was using Franz' CLIM to visualize lisp objects in the "virtual" movitz image :-)
[11:20:14] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:20:27] <jackdaniel> heh, it is handy to see things
[11:20:27] <frodef> good morning beach
[11:20:38] <jackdaniel> often subtle mistakes are glaring obvious when put in a drawing
[11:22:00] * frodef is learning tmux...
[11:26:57] *** Joins: shka (~herr@109.231.0.226)
[11:35:02] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[11:37:35] *** Quits: Alfr (~Alfr@user/alfr) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[11:37:39] *** Joins: Alfr (~Alfr@user/alfr)
[11:48:57] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[11:50:52] *** Joins: treflip (~user@95.79.32.99)
[11:54:20] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[11:56:51] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[12:04:23] *** Quits: gaqwas (~john@dynamic-077-007-102-154.77.7.pool.telefonica.de) (Ping timeout: 250 seconds)
[12:09:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:14:20] <lisp123> phantomics: `(set ',(intern-sym |foo|) :something-cool)?
[12:14:57] <lisp123> Perhaps share the full macros and it may be easier to help
[12:17:35] <lisp123> mfiano: Instead of syntactical abstraction, I would say "access to lexical scope" (via macro expansion in place of the calling form)
[12:17:51] *** Quits: beach (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[12:17:57] <mfiano> Huh?
[12:18:09] <mfiano> There are only 2 uses for macros, and syntactic abstractions is one.
[12:18:38] <lisp123> Yes, but that's not a very precise term. That's my point
[12:19:09] <lisp123> Functions can be used for syntactical abstraction too - macros allow you to access the lexical scope whereas a function will exit it
[12:19:14] <mfiano> It very much is. "access to lexical scope" is a subset.
[12:20:11] <mfiano> Functions cannot change the syntax of the language. We do that by extending the compiler with macros.
[12:21:00] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[12:21:27] <phantomics> beach, others: I'm back, here's more of a description of what's going on
[12:22:42] <phantomics> (in-pkg foo (setq (inpkg |var|) :something))
[12:23:06] <phantomics> Inside the (in-pkg) macro, all symbols inside (inpkg) macros are interned in the 'foo package
[12:23:18] <phantomics> Because foo is the second argument to the (in-pkg) macro
[12:24:15] <phantomics> This functionality is needed for the compiler I'm building; problem is, (setq) will quote its argument, so '(inpkg |var|) is not expanded
[12:24:38] <mfiano> The reader is interning |var| into the package that form is in before macroexpansion time, so you are interning into two different packages?
[12:24:53] <phantomics> Yes
[12:25:07] <mfiano> Quite odd
[12:25:44] <phantomics> This is for the April compiler, in APL variables are dynamic or lexical depending on the context they're assigned, so it gets complicated assigning them
[12:25:51] <lisp123> phantomics: This is not an answer, but sometimes you can look at the macrofunction a macro calls (in this case setq), and call that directly
[12:26:10] <mfiano> Side note, you shouldn't use SETQ. Use the more generic SETF instead.
[12:26:24] <phantomics> lisp123: that's an option, could a custom setf method work here?
[12:29:12] <mfiano> What does inpkg look like?
[12:30:39] <lisp123> phantomics: And (sorry to ask the second time), this didn't work? `(set ',(intern-sym |foo|) :something-cool)?
[12:31:52] <phantomics> lisp123: That won't work because of when macroexpansion happens
[12:32:10] <lisp123> I guess it will macro expand INTERN-SYM and not evaluate right then (but I'm rusty on macros), so it might be better to write intern-sym as a function as noted earlier
[12:32:16] <phantomics> And (set) only sets dynamic vars correct? This is for lexical vars
[12:33:21] <phantomics> The irritating thing here is that the expansion must happen after the top-level (in-pkg) macro expands, before that the (intern-sym) macro doesn't know the package to intern into
[12:33:31] <lisp123> You could hack something in by using ,(eval ...), but you didn't hear that from me
[12:33:42] <phantomics> Yeah, not my favorite approach
[12:34:31] <lisp123> So I think you need to find the underlying functions of INTERN-SYM and access them directly vs. via a macro
[12:34:33] <phantomics> Oh, and this is inside a (let) form with lexical vars, so doing an (eval) in there won't assign them
[12:34:47] <lisp123> Good point
[12:35:08] * mfiano goes back to work since his help is not needed
[12:35:36] <lisp123> Is there any reason for keeping INTERN-SYM as a macro?
[12:36:00] <phantomics> mfiano: were you asking about inpkg?
[12:37:09] <phantomics> See: https://gist.github.com/Bike/8f5af1439eb4b54823f8c7f93b98268e#file-april-lisp-L30
[12:38:40] <phantomics> The reason for (intern-sym) to be a macro is that I'm producing code that is supposed to be "package-neutral" except for that top-level (in-pkg) macro that specifies what package all the variables are in
[12:39:39] <phantomics> Otherwise the compiler has to know what package everything must be interned in and pass that package value down as it descends into the code it's compiling
[12:40:31] <phantomics> Perhaps that's a simpler way to do things after all, also not interning the symbols until the top-level macro expands makes for more elegant-looking code
[12:41:22] <lisp123> Can you use keywords for that purpose (package-neutral)?
[12:41:30] <lisp123> I guess the colon is pretty annoying
[12:43:15] <phantomics> I could, that's kind of neither here or there though, I need to wrap the variable symbols in a macro that will expand to intern them in the proper package as determined by the top-level macro, so they can be keywords or not, doesn't make much difference
[12:43:48] <lisp123> Can you use a wrapper of in-package?
[12:44:21] <phantomics> Hmm... I can see about that
[12:44:52] <phantomics> I'd have to bookend the compiled code with (in-package :compiled) and then (in-package :main) to go back to the main package right?
[12:45:16] <lisp123> Yes I think so
[12:45:43] <phantomics> Not the hardest thing to do
[12:45:45] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[12:46:04] <phantomics> I can try that, see if there's any hidden pitfalls (there will be)
[12:46:39] *** Joins: notzmv (~zmv@user/notzmv)
[12:46:46] <phantomics> One problem is that in the compiled code, I reference lots of functions that exist in the main :april package
[12:47:15] <lisp123> I am pretty bad at these things, but if there's a way to switch the current package to the one you do at READ time, that would be better
[12:47:23] <phantomics> So you've got stuff like (april:shape (inws a) (inws b)), the shape function belongs to the april package
[12:47:31] <lisp123> You can :USE :APRIL there?
[12:48:03] <lisp123> I think that kinda fits in with CL approach where packages generally :USE :CL
[12:48:33] <phantomics> I could use April in the workspace package, but the problem is what if someone assigns a function called SHAPE? Then the (shape) function in the main package is overloaded and it will be very hard for the user to figure out what went wrong
[12:48:58] <lisp123> Perhaps some form of package lock?
[12:50:05] <phantomics> Yeah, I could forbid them from it somehow, but then the SHAPE variable is not available for assignment and the reason why would be so confusing to an average user
[12:50:44] <phantomics> There is one other way to do this, but it's extremely inefficient: it requires re-consing every piece of April code that gets processed by the (in-pkg) macro
[12:50:57] <lisp123> Have a function streamlines the process for the user to shadow SHAPE
[12:51:56] <phantomics> That just seems like an extremely clumsy solution, there are a bunch of names like TURN, ENCODE and SCAN that would also be forbidden
[12:52:14] <phantomics> I may just have to re-cons the entire compiled code, at least it's happening at compile time and not runtime
[12:53:00] <phantomics> I can re-cons the code and replace instances of (inws ...) with appropriately interned variables, that way there's no fussing with these weird assignment cases
[12:53:29] <lisp123> Back to your original question, what if you tried something like this (let ((symbol (intern-sym |foo|)) `(set ',symbol :something))
[12:53:43] <phantomics> (set) only sets dynamic vars, not lexical ones
[12:54:47] <phantomics> One of the reasons lexical vars have tricky limitations (like you can't check them with (boundp)) is that the compiler can optimize them away, if you took away their limitations then a lot of potential compiler optimizations would be impossible
[12:55:44] <lisp123> Got it, thanks (learnt something new on SET)
[12:57:16] <phantomics> I suppose in the scheme of things, even as big as April code can get re-consing it won't cost that much in time or memory, and it's done at compile time so runtime is unaffected
[12:59:07] *** Quits: treflip (~user@95.79.32.99) (Read error: Connection reset by peer)
[12:59:28] <lisp123> That just seems like an extremely clumsy solution, >> You could store the user defined functions separately from normal functions and check for them first before checking for a normal function
[13:00:38] <lisp123> Sorry I haven't been able to help. Hopefully someone else does. But as a parting comment, I think the package system is very well designed, so IMO don't discount the idea of shadowing symbols too quickly
[13:01:44] <lisp123> Like if a user wanted to overload the SHAPE function, it would be confusing to someone else thinking it was April:Shape and Superuser:Shape
[13:02:15] <lisp123> So forcing that onto the user as an explicit consideration is not that bad of an idea. But I'll shut up now :)
[13:02:18] <phantomics> Oh, here's another issue with (in-package)
[13:02:39] <phantomics> April actually uses two different packages for every workspace, one for dynamic vars and one for lexical vars
[13:02:53] <phantomics> This is to maintain a needed distinction between the two for compilation purposes
[13:04:07] *** Joins: xsperry (~xs@user/xsperry)
[13:04:21] <phantomics> It's weird, I know, but some people have considered APL an uncompilable language because of its quirks. I have it compiling but my old method depended on undefined behavior (destructive modification of a form passed to a macro)
[13:04:23] <lisp123> Makes sense, that will make in-package not very useful to use
[13:04:41] <phoe> why destructive though?
[13:05:01] <phantomics> So remember how I said the brute-force solution is to re-cons the entire form?
[13:05:09] <phoe> were you depending on side effects?
[13:05:23] <phoe> like, you walked the form and mutated it?
[13:05:31] <phantomics> What I used to do was have the top-level (in-png) macro just destructively modify the form with (setf) to assign the interned vars
[13:05:32] <phantomics> Yes
[13:05:42] <phoe> oh
[13:05:43] <phantomics> *(in-pkg)
[13:05:52] <phoe> walk the (copy-tree form) and return this
[13:06:01] <phoe> should be a simple enough mitigation
[13:06:05] <phantomics> That's the brute-force solution, re-cons the entire form
[13:06:20] <phantomics> And April's generated code can get massive
[13:06:42] <phoe> still, there is never a need to mutate the form that was passed into the macro if you can mutate its copy and return this instead
[13:06:59] <phoe> same results, no UB
[13:07:29] *** Quits: mrvdb (~mrvdb@2001:19f0:5000:8582:5400:ff:fe07:3df5) (Quit: WeeChat 3.3)
[13:08:23] <phantomics> Yeah, that's the simple way to avoid UB, I'll see how the overhead looks
[13:08:59] <phoe> or use a pure re-cons function to avoid walking the tree twice
[13:09:34] <phoe> like, instead of COPY-TREE + SETF use a function that walks the tree once and substitutes the proper things
[13:11:16] <phantomics> Yes, that's what I was thinking
[13:11:24] <phantomics> I already walk it so I'll just build as I do
[13:11:49] <phoe> yesss
[13:22:38] *** Joins: treflip (~user@95.79.32.99)
[13:26:15] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[13:29:14] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[13:29:25] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[13:30:04] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[13:32:14] *** Joins: cosimone (~user@93-47-228-203.ip115.fastwebnet.it)
[13:32:22] *** Quits: cosimone (~user@93-47-228-203.ip115.fastwebnet.it) (Remote host closed the connection)
[13:32:43] *** Joins: cosimone (~user@93-47-228-203.ip115.fastwebnet.it)
[13:44:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:45:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[13:47:37] *** Lord_of_Life_ is now known as Lord_of_Life
[13:53:49] *** Joins: beach (~user@2a01:cb19:150:3400:8e6:4e:833f:a4f0)
[13:53:49] *** ChanServ sets mode: +o beach
[13:55:05] *** beach sets mode: -o beach
[14:14:37] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:6c5b:ab76:207a:5858)
[14:27:54] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[14:29:37] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[14:31:00] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[14:37:01] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[14:44:27] *** Joins: random-nick (~random-ni@87.116.167.143)
[14:51:38] <mfiano> Dumb question, but I can't seem to get this to work: How do I define a condition that inherits from error, with no slots, but which can pass an arbitrary format string and arguments like cl:error?
[14:52:41] <mfiano> I've been away from code too long it seems. I keep getting a runtime error when signalling the condition: error: odd-length initializer list
[14:57:50] *** Joins: VincentVega (~user@212.97.0.152)
[14:59:14] <mfiano> Oh phoe is back in town. Save me please :)
[15:00:36] <rotateq> maybe he's busy at work day right now :)
[15:01:34] <mfiano> Very likely, because that's usually the time I am ready to go to bed.
[15:01:49] <jackdaniel> mfiano: the function error is more or less: (defun error (fmt-string &rest args) (signal 'error :format-control fmt-string :format-arguments args))
[15:02:24] <jackdaniel>  +/- universal handlers, fancy datums and all that jazz
[15:02:27] <mfiano> jackdaniel: Similar to how I can do (error "foo ~d ~d" 42 43) I would like to know how, if possible, to be able to do (error 'my-condition-that-inherits-from-error "foo ~d ~d" 42 43) - I'm not quite sure how to define the lambda expression for the report.
[15:03:37] <rotateq> hm mfiano, are you from australia? ^^
[15:03:53] <mfiano> No
[15:06:07] <jackdaniel> mfiano: not really, but you can (error 'my-error :format-control "format string ~s" :format-arguments (list 42)) /if/ your condition subclasses both error and simple-conditino
[15:06:40] <jackdaniel> (define-condition my-error (error simple-condition) ())
[15:06:42] <jackdaniel> (error 'my-error :format-control "format string ~s" :format-arguments (list 42))
[15:06:56] <rotateq> okay for this time i just have in mind that someone from australia is going to sleep
[15:07:41] <jackdaniel> mind that simple-error is the right superclass that has both simple-condition and error as its superclasses
[15:08:47] <mfiano> I see, so there would be no way to just pass a format string and variadic arguments with a regular report function
[15:09:25] <jackdaniel> you may define your own function, i.e my-error, but generally yes- without dipping into implementation-specific behavior you can't tweak error that way
[15:09:51] <mfiano> Fair enough, thank you.
[15:09:57] <jackdaniel> sure
[15:16:15] <phoe> mfiano: inherit from simple-error
[15:16:31] <phoe> it, in turn, inherits from simple-condition which necessarily has slots for format-control and format-arguments
[15:17:21] <phoe> welp, already answered, sorry
[15:27:07] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:6c5b:ab76:207a:5858) (Remote host closed the connection)
[15:28:04] <lisp123> rotateq: now would be the time for most Australians to sleep
[15:31:14] <rotateq> lisp123: and not for us yet
[15:45:24] <jackdaniel> I wonder, can the result of compute-applicable-methods be also memoized by compute-discriminating-function (even when the generic function is not a standard-generic-function and c-a-m-u-c returns nil as a second value)?
[15:46:35] <jackdaniel> the name compute- suggests that it could; the thing is that the mop specification doesn't tell (at all) focusing only on the part that if c-a-m-u-c returns the second value as t then its result can be memoized
[15:48:26] <lisp123> rotateq: the day is young for us:)
[15:48:28] <jackdaniel> this is similar to compute-effective-method - it is not explicitly stated that we can memoize results, but earlier in the amop book compute-effective-method-function (predecessor of c-e-m) is invited precisely to allow that
[15:49:02] <jackdaniel> s/invited/invented/
[15:50:38] <mfiano> Thanks phoe. That is indeed better than inheriting from both
[15:52:13] <scymtym> but keep in mind the dual inheritance variant in case you ever want a warning with similar behavior
[15:52:22] <mfiano> yup
[16:00:34] *** Joins: pjb (~pjb@user/pjb)
[16:09:18] <mfiano> a little Lisp CLI app i've been working on: https://i.lisp.cl/temp/progress.ogv
[16:10:09] <jackdaniel> oh, cool, lispy "htop" for freebsd?
[16:11:10] <mfiano> Yeah sort of. Originally only needed to output a number to stdout for my statusbar to consume, but got carried away with terminal hacks^Wfun
[16:12:30] <mfiano> It uses varying width unicode vertical bars to give a more smooth animation illusion, instead of full-width character "frames"
[16:14:18] <lisp123> mfiano: Nicely done
[16:14:35] <lisp123> I need to get FreeBSD next year, might use it then
[16:14:52] <phoe> scymtym: cl:simple-warning
[16:15:08] <phoe> :D
[16:15:43] <mfiano> I am thinking about overengineering this into a htop-like thing though, with per-core usage and all
[16:15:46] <jackdaniel> I'm sure that he meant simple-style-warning, because that one is missing
[16:15:49] <jackdaniel> alexandria gives that
[16:15:49] <mfiano> Depends how bored I get before then :)
[16:16:10] <phoe> jackdaniel: yes, I see - alexandria also provides some others AFAIR like simple-program-error
[16:16:36] <scymtym> phoe: hm, i somehow thought that didn't exist. maybe it was SIMPLE-STYLE-WARNING
[16:16:52] <jackdaniel> but it is never that simple, is it? errors, warnings, all are a sign that something is not right
[16:16:53] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:16:54] <phoe> yes, see jackdaniel's response
[16:17:41] <phoe> jackdaniel: actually, errors themselves can be and often are simple, it's their reasons that are complex
[16:17:41] <jackdaniel> perhaps I say too many random things so people start to skim over what I write (second time today!)
[16:18:26] <phoe> like, have you ever spent a while imagining how many complexities need to occur in a specific order for your code to finally go (error "it broke :(")
[16:19:26] <scymtym> it gets a bit complicated when you want to signal appropriate conditions, possibly with source location information, for problems detected at compile time, for example from macros or compiler macros
[16:24:47] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[16:30:39] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[16:31:33] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 250 seconds)
[16:34:07] <beach> jackdaniel: You are not allowed to memoize the result of COMPUTE-APPLICABLE-METHODS in general, because the AMOP does not explicitly say you are.  However, there are situations where conforming code can not observe whether you have memoized anyway, so in those cases it is safe.
[16:35:44] <jackdaniel> thanks,
[16:36:19] <jackdaniel> I'm aware of the latter case. Regarding memoizing the result of COMPUTE-APPLICABLE-METHODS in general -- isn't this the same situation as with compute-effective-method ?
[16:36:32] <jackdaniel> amop doesn't explicitly say that you are allowed to memoize it
[16:38:39] <beach> I don't think it is the same.
[16:38:45] <jackdaniel> how so?
[16:39:52] <beach> The effective method can be defined to always call COMPUTE-APPLICABLE-METHODS-USING-CLASSES and COMPUTE-APPLICABLE-METHODS.  Then it will never change.  Or it can cache the result of COMPUTE-APPLICABLE-METHODS-USING-CLASSES but not COMPUTE-APPLICABLE-METHODS.
[16:40:23] <beach> And then it needs to change with COMPUTE-APPLICABLE-METHODS-USING-CLASSES.
[16:40:53] <jackdaniel> do you mean discriminating function by chance?
[16:41:10] <beach> Er, sorry, yes.
[16:41:25] <beach> The discriminating function can be defined to ....
[16:41:38] <beach> I don't see that there is anything that COMPUTE-DISCRIMINATING-FUNCTION could itself memoize that is not one of the other two.
[16:42:46] <jackdaniel> it could also memoize compute-effective-method (given that c-a-m-u-c is memoized) - we've talked about this a few days ago on #sicl
[16:44:34] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[16:45:50] <jackdaniel> (I've suggested that you could add a "remark" to the mop specification on your website, but you've said that it is obvious so there is no need to add it)
[16:47:32] <beach> I do not understand what it means for one function to memoize the result of calling another function.  To me "memoize" means look up, as opposed to compute, a result from a bunch of arguments.  In this case, it would simply incorporate the result of calling COMPUTE-APPLICABLE-METHODS into its discriminating function.  And that is fine as long as the discriminating function is recomputed when required.
[16:48:13] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Quit: Leaving)
[16:49:18] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[16:49:19] <beach> ... and of course, given the same restrictions as before, that no conforming program can observe whether COMPUTE-DISCRIMINATING-FUNCTION is invoked.
[16:50:19] <jackdaniel> can the discriminating function look up, as opposed to compute, the effective method?
[16:50:54] <beach> It should, when it is allowed to.
[16:51:14] <jackdaniel> and when it is allowed to look up the effective method?
[16:52:41] <beach> When the classes of the arguments are such that COMPUTE-APPLICABLE-METHODS-USING-CLASSES are allowed to cache the result, and when no conforming program can observe that it may look up the effective method anyway.
[16:53:30] <beach> s/are allowed/is allowed/
[16:53:58] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[16:56:20] <jackdaniel> compute-effective-method may be overriden, so compute-discriminating-function  may look it up only when the function is exactly standard-generic-function then?
[16:58:03] *** Joins: Bike (~Glossina@71.69.170.70)
[16:58:03] *** ChanServ sets mode: +o Bike
[16:58:05] <beach> I haven't worked out all those details, but that sounds right.
[16:58:07] <phoe> jackdaniel: are eql specializers on C-E-M not going to be a problem? a function can be a direct instance of S-G-F but there can be a method with an eql specializer
[16:58:34] <phoe> like, (eql #'foo) where #'foo is a standard-generic-function
[16:58:45] <jackdaniel> I don't understand
[16:58:46] <beach> phoe: That would not be conforming.
[16:59:05] <phoe> beach: OK, that's a relief
[16:59:11] <beach> phoe: Conforming code is not allowed to add methods that would be applicable to arguments with only specified classes.
[16:59:40] <beach> And in fact, that's an implicit rule for any protocol.
[17:00:15] <beach> jackdaniel: I need to vanish for 30 minutes or so.  I'll read up when I come back.
[17:00:20] <phoe> beach: is that ANSI CL or MOP? is that only for standard classes?
[17:00:25] <phoe> beach: OK
[17:00:54] <beach> phoe: It is for "specified classes" no matter which protocol does the specification.
[17:01:02] <jackdaniel> beach: on the other hand compute-effective-method-function was introduced earlier in the book in closette to allow memoizing the result (and later it was generalized and specified as compute-effective-method) - that's why I was arguing a few days back that compute-effecitve-method is memoizable by compute-discriminating-function
[17:01:17] <jackdaniel> at least that was rationale for exposing this part of the protocol
[17:02:48] <beach> I still don't understand what it means for the result of one function to be memoizable by another function.
[17:02:55] <beach> Anyway, off for real.
[17:03:25] <jackdaniel> well, that seems to be a communication barrier I can't force; I don't have much to add on the subject. thank you for bearing with me
[17:05:54] <phoe> beach: I need to figure this one out; 7.6.6.1.2, fourth paragraph, says that EQL-specializers cause precedence over methods without EQL-specializers, and I read your words that e.g. (defmethod foo ((x number)) nil) (defmethod foo ((x (eql 42))) t) would not be conforming code
[17:06:42] <phoe> even though in my understanding (foo 42) should return T
[17:06:52] <jackdaniel> I think that this is a communication barrier, this is conforming code
[17:07:04] <phoe> oh, OK
[17:07:58] <jackdaniel> you are not allowed to define a method add-method specialized on standard-generic-function
[17:08:26] <phoe> yes, since that is a standard GF with all standard specializers
[17:08:37] <jackdaniel> I think that this is what beach meant, but that's only a guess (I was once called for putting words in his mouth, so I'll leave it to him to explain)
[17:08:54] <phoe> but can I DEFMETHOD ADD-METHOD with the function being (EQL #'FOO) where FOO is something I've made myself?
[17:09:03] <phoe> my understanding is that I can
[17:10:10] <jackdaniel> I think that this wouldn't be conforming, because you define a method on an object of the class for which you can't define methods
[17:10:21] <phoe> hence my question, in case of (DEFMETHOD C-A-M ((GF (EQL #'FOO) ...)) ...)
[17:11:02] <phoe> if FOO is something I have defined myself, *even* if it is not a direct instance of class I have defined myself
[17:11:15] <phoe> how do we treat this case?
[17:13:52] <jackdaniel> the premise of standard-generic-function is that you may bypass usual mechanisms for computing the discriminating function and i.e use internal function (that is not generic) std-compute-discriminating-function
[17:14:11] <jackdaniel> this allows you to avoid some metastability issues
[17:14:32] <jackdaniel> and this function may not even call your c-a-m at all, so this specialization will have no effect
[17:14:40] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[17:14:47] <jackdaniel> it is undefined behavior, you may end up in some kind of a strange place too
[17:15:26] <phoe> my question is less about S-G-F itself and more about CLHS 11.1.2.1.2 point 19
[17:16:09] <phoe> and I guess the wording is that EQL specializers also fall under this
[17:16:33] <phoe> like e.g. (defmethod print-object ((object (eql 42)) stream) ...)
[17:17:16] <phoe> that's obviously UB zone, and also describes what would happen if someone did a (defmethod c-a-m ((function (eql #'foo)) ...) ...)
[17:18:01] <phoe> because 42 is a direct instance of a standardized class, and so is a standard generic function #'FOO
[17:18:13] <phoe> and both print-object and c-a-m are standardized generic functions
[17:18:21] <phoe> OK, understood - thanks for the help
[17:18:47] <flip214> Is there a Hunchentoot-equivalent library for HTTP/3?
[17:19:43] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[17:20:25] <_73> how often does quicklisp pull changes from a projects master branch?
[17:21:27] <flip214> _73: by request, for some monthly.
[17:21:29] <phoe> every dist update, which happens monthly
[17:21:50] <_73> ok thanks
[17:22:13] <phoe> unless there's a request which warrants creating a separate non-monthly dist, e.g. for critical bugs in libraries
[17:22:22] <phoe> (widely used ones, that is)
[17:30:59] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[17:34:18] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:34:39] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:35:14] <beach> So let me say this without using the word "memoize" (or "memoization").  If the specification says that a function F, whenever invoked, must call a function G, then F can avoid calling G only if it has some other way of determining what G would return AND no conforming program can detect that G was not called in this situation.
[17:36:44] <beach> phoe: I think the AMOP states this rule explicitly, but the Common Lisp standard does not.  And the AMOP is not entirely correct about it either as I recall.
[17:37:34] <beach> phoe: And it is a default rule, so the specification can obviously make explicit exceptions.
[17:38:15] <phoe> beach: I think CLHS 11.1.2.1.2 point 19 states this explicitly
[17:38:22] <beach> Good.
[17:38:32] <beach> So what's the problem?
[17:38:39] <phoe> none! I already got my answer
[17:38:46] <beach> Ah, OK.
[17:38:48] <phoe> thanks
[17:40:54] <_73> would G need to be referentially transparent?
[17:41:47] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[17:41:47] <beach> _73: F can use any technique it wants to determine what G would have returned, but referential transparency would be a sufficient (but not necessary) condition.
[17:42:08] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[17:42:24] <_73> I see
[17:42:55] <beach> jackdaniel: Let me (*sigh*) go check the details of the generic-function invocation protocol.
[17:45:22] <beach> jackdaniel: The AMOP states that COMPUTE-DISCRIMINATING-FUNCTION is called whenever a generic function metaobject is initialized, reinitialized, or a method is added or removed.
[17:45:43] <beach> But it can be called for other reasons as well, apparently.
[17:46:58] * beach is still reading.
[17:49:47] <beach> jackdaniel: The specification says that the effective method is called by the discriminating function, and does not give any circumstances where this call can be avoided.
[17:50:00] <rotateq> discriminating sounds not so political correct ^^
[17:50:10] <phoe> rotateq: let's use the original meaning of that word
[17:50:35] <phoe> which is, "to tell things apart"
[17:50:42] <phoe> https://en.wikipedia.org/wiki/Discrimination_(information)
[17:50:50] <Bike> there's no way a serious clos invocation is going to call compute-effective-method on every discriminating function call.
[17:50:55] <Bike> a serious clos implementation*
[17:51:11] <phoe> beach: the effective method is called, but not computed
[17:51:25] <phoe> the question is about computing rather than calling, I think
[17:51:28] <beach> jackdaniel: So, it seems to me that the discriminating function is allowed to avoid calling COMPUTE-EFFECTIVE-METHOD only when the generic function is a STANDARD-GENERIC-FUNCTION.
[17:51:56] <Bike> that would make non standard generic functions very slow.
[17:52:01] <beach> Yes.
[17:52:11] <beach> I am just reading the specification here.
[17:52:49] <Bike> this is why i believe that compute-effective-method can be implicitly understood to be a pure function. if it is, its result can be memoized, similarly to how the result of compute-applicable-methods-using-classes can be memoized.
[17:53:00] <Bike> (the word "memoized" being used as it is in the mop page on compute-discriminating-function)
[17:53:02] <jackdaniel> beach: but in amop, earlier (page 126) a function compute-effective-method-function is introduced under the chapter "improving performance", and quoting "by constraining the context c-e-m-f (...) we make it memoizable"
[17:53:15] *** Joins: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de)
[17:53:15] <jackdaniel> and this function was a stub that was later replaced by compute-effective-method in the final protocol
[17:53:33] <jackdaniel> imo it is a very strong indicator that this function was at least meant to be memoizable
[17:53:37] <beach> jackdaniel: I am reading only the specification.
[17:53:57] *** Quits: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de) (Client Quit)
[17:54:16] <beach> It would seem silly to require the discriminating function to always call COMPUTE-EFFECTIVE-METHOD when the method combination and the applicable methods are known.
[17:54:36] *** Joins: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de)
[17:54:49] <Bike> amop was billed as a work in progress, so i'm pretty willing to treat the specification as having flaws to be fixed
[17:54:53] *** Quits: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de) (Client Quit)
[17:55:07] <jackdaniel> well, I'm also reading the rationale behind introducing operators
[17:55:07] <beach> Absolutely.
[17:55:14] *** Joins: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de)
[17:55:22] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[17:55:26] <beach> jackdaniel: If I were you, I would just state that the ECL implementation is allowed to avoid calling COMPUTE-EFFECTIVE-METHOD.
[17:56:24] <jackdaniel> rather that it is allowed to remember the result
[17:56:29] <beach> jackdaniel: I think I'll do the following (at some point).  I'll re-read the phrase on page 126, and stick that in as a note.
[17:56:32] <beach> How about that?
[17:56:54] <jackdaniel> sounds good, that's what I've tried to suggest the other day (but you've said that it is obvious, apparently it is not)
[17:57:45] <beach> It turns out not to be.  I confused calling compute-applicable-methods-using-classes and compute-effective-method.
[17:57:47] <beach> Sorry about that.
[17:58:07] <jackdaniel> no problem
[17:58:47] <beach> jackdaniel: Yes, in trying to avoid the word "memoize" I shortened "avoid calling G and instead use whatever means it has at its disposal to determine what G would have returned, had it been called", to "avoid calling G".
[18:00:06] <rotateq> phoe: yes, this is much more a good intention :)
[18:00:07] <jackdaniel> I think that the word memoize is perfectly clear and I still don't have an idea why it didn't make sense to you earlier :|
[18:00:14] <Bike> incidentally, if anyone happens to know of any real system that specializes compute-effectiv-emethod, i would be interested in seeing it
[18:00:50] <Bike> custom method combinations can include totally arbitrary code, so it's hard to imagine why one would bother
[18:01:08] <phoe> Bike: closer-mop doesn't count I think
[18:01:36] <beach> jackdaniel: Because "memoize" is used about one single function to replace a computation by a lookup when its arguments have been seen before and the result of the computation is known to be the same as that last time.
[18:01:58] <beach> jackdaniel: So I don't know what it means for a function to "memoize" the result of a call to another function.
[18:01:59] <jackdaniel> yes, that's what I mean when I use this word
[18:02:10] <beach> "cache" OK, but "memoize" no.
[18:02:34] <jackdaniel> well, it means that it avoids calling that another function because it remembered results and may perform a lookup
[18:02:46] <beach> jackdaniel: Oh, but then COMPUTE-EFFECTIVE-METHOD would indeed have to be called and it, itself, would have to return the cached value.
[18:03:28] <jackdaniel> even in amop spec it is used in such context (i.e for compute-discriminating-function)
[18:03:41] <beach> I am sorry to hear that.
[18:03:48] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Read error: Connection reset by peer)
[18:04:04] <beach> Another evidence that the AMOP is not as good as it should have been, perhaps.
[18:04:07] <jackdaniel> but oh well, I'll try to avoid this word when talking to you
[18:04:22] <beach> Thank you.
[18:04:22] *** Quits: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[18:04:33] <phoe> Bike: can't see it on github yet, just implementation sources
[18:04:42] <Bike> eh?
[18:04:48] <Bike> oh, you mean you're searching.
[18:05:51] <beach> jackdaniel: The Wikipedia page on "memoization" seems to agree with my definition.
[18:06:03] <jackdaniel> I find your definition correct
[18:06:20] <phoe> Bike: yes
[18:06:39] <jackdaniel> I think that the problem with understanding is that I find use that "A memoizes the result of B" also clear and in line with this definition (in amop text and in my earlier utterances)
[18:11:35] <phoe> Bike: cannot find anything, other than for the toy AMOP example from https://github.com/robert-strandh/CLOS-MOP-HTML/blob/9c90669b8b0b0e7a87cb749526a3992166d0ac96/make-method-lambda.html#L184
[18:15:57] <jackdaniel> either way what I've said earlier was trying to make a parallel that just as compute-effective-method has the qualities as closette's compute-effecitve-method-function we could draw a similar conclusion about compute-applicable-methods "inheriting" qualities of compute-applicable-methods-using-classes;; that said I'm much less convinced about the latter :)
[18:20:46] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 245 seconds)
[18:27:20] <beach> jackdaniel: Yes, I understand now.
[18:32:55] <beach> jackdaniel: Oh, I have a watertight proof that COMPUTE-EFFECTIVE-METHOD absolutely can not be called from the discriminating function each time.
[18:33:35] <beach> jackdaniel: Because COMPUTE-EFFECTIVE-METHOD is itself a generic function, so it would have to call itself each time it is invoked.
[18:34:07] <beach> It could still work by the usual exception to the rule for standard-generic-function of course.
[18:35:18] <jackdaniel> sure, but I think that we have estabilished that for instances whichc class is EQ to standard-generic-function we may do any number of things until the user doesn't notice
[18:35:37] *** Joins: yewscion_ (~yewscion@2604:ca00:14c:c858::1261:5bdb)
[18:36:04] <jackdaniel> I think that until isn't the right word, perhaps "unless the user can notice it"
[18:36:56] <beach> Right, that's what I meant to say by the "usual exception".
[18:37:11] <jackdaniel> oh, I didn't get that remark
[18:43:32] <beach> mop compute-discriminating-function
[18:43:32] <specbot> http://metamodular.com/CLOS-MOP/compute-discriminating-function.html
[18:43:45] <beach> jackdaniel: How about that?
[18:45:43] <jackdaniel> looks good, thanks!
[18:46:06] <phoe> it's only missing an author/timestamp at the end if we want to follow the format set by the first remark
[18:46:08] <beach> Pleasure.  Sorry again for being so dense.
[18:46:32] <beach> phoe: Good point.  On it...
[18:46:47] <phoe> beach: not really dense, communication is as usual a hard problem
[18:46:51] <jackdaniel> I will also experiment a little with /doing the same thing as done for compute-applicable-methods-using-classes when the second value is t/ for compute-applicable-methods and see if it gets me somewhere
[18:47:56] <beach> phoe: It is, but I know for a fact I take a long time to understand things.  But I know how to deal with it, so no problem.
[18:50:05] <beach> phoe: author/timestamp added.
[18:50:21] <phoe> beach: thanks!
[18:50:54] <beach> phoe: Sure.  Important stuff.
[18:57:04] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[19:00:25] *** Quits: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com) (Ping timeout: 256 seconds)
[19:04:06] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[19:07:45] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 250 seconds)
[19:07:58] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[19:16:55] *** Joins: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com)
[19:19:05] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f)
[19:21:24] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[19:28:55] <rotateq> beach: Accidentally I have been reading your cliki site yesterday again. We talked about the FFT implementation some months ago but I would be curious how to get it really fast, elegant AND still safe, like the FFTW with OCaml.
[19:29:30] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f) (Quit: Leaving)
[19:31:08] <beach> rotateq: I haven't worked on FFT for some time.  But there are two aspects to it.  The algorithmic aspect and the use of appropriate machine instructions.
[19:31:54] <beach> When I was still working on it, only the first aspect was necessary.
[19:31:56] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f)
[19:36:23] <beach> rotateq: Maybe you could use heisig's work on SIMD for the second aspect.
[19:43:37] <rotateq> I finally got something to work finally when I first asked, but must go on and from a simple to a generic-function. and substituted some *aweful* CL solution for it on a well-known code page :)
[19:44:03] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[19:44:21] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[19:44:24] <rotateq> oh right, i told heisig to read more about SIMDs, but don't know how to start in a good way (ok, maybe wikipedia). and petalisp of course still more
[19:45:16] <rotateq> and right, getting correct things is most important. not "it doesn't work right, but it's fasta!"
[19:45:55] <beach> Sure.
[19:46:49] <beach> With some algorithms, you can completely unfold sub-computations of small-ish fixed sizes.  Then you can minimize the number of operations for those.
[19:47:15] <rotateq> like I don't care when telling people I like figuring out things like rubik's cube and the first thing they are just interested in is the "speed". was never about speed for me
[19:48:06] <rotateq> oh nice, have much to learn and there are so many practical uses with such transforms too of course like image compression
[19:49:29] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[19:50:58] <beach> And I had some insight at the time, where a fixed radix is not optimal, but it can be implemented using a preceding shuffle, whereas a radix of √n is optimal, but I never figured out a good way to implement it.
[19:52:24] <rotateq> okay no pressure on it as you do so many other very impressive things
[19:52:34] <beach> Given the cost of memory reads and writes, it would also be interesting to take into account such cost, compared to the cost of arithmetic operations.
[19:52:47] <rotateq> ah yes
[19:53:35] <beach> I actually taught the applied-mathematics people at the time about recursion, and was able to publish the by far fastest shuffle algorithm at the time, together with Anne Elster.
[19:54:57] <beach> It was surprising to me how ignorant the entire community was about recursion.  And for shuffle, with recursion it was possible to avoid exchanging elements with themselves without any additional tests.
[19:55:09] <rotateq> can you point where to read about it?
[19:55:25] <beach> I think there is better stuff now.
[19:55:50] <rotateq> yes about 30min a friend called and we came to it and i had to explain a bit why recursion is such a powerful concept
[19:55:56] <beach> I showed this to Anne, and she handled the community stuff which I was unfamiliar with.  But she then went on to publish even better algorithms.
[19:56:30] <rotateq> Ack beach, but this doesn't make the older things still interesting.
[19:57:12] <beach> I have this feeling that our paper is in one of those Elsevier journals or conferences, so that it is completely inaccessible.
[19:57:16] <beach> Let me check...
[19:57:32] <rotateq> Hm and about a site like scihub?
[19:57:52] <rotateq> but okay, there are still other papers of you i should read
[20:02:54] <beach> Look for the paper "A Super-Efficient Adaptable Bit-Reversal Algorithm for Multithreaded Architectures" by Anne C Elster and Jan C Meyer.
[20:03:36] <beach> The second entry in the bibliography is the paper by Anne and me that I was referring to.  But I don't think ours is available anywhere.
[20:04:12] <beach> It was also presented at a SIAM conference.
[20:04:42] <rotateq> i saw an "Irene" is also co-author of you
[20:04:47] <rotateq> ok thx
[20:05:02] <beach> Sure idurand is my favorite coauthor. :)
[20:05:20] <beach> We worked on several ELS papers together.
[20:05:27] <rotateq> have it, from 2009
[20:05:56] <rotateq> that's cool, more women should go into computer science
[20:06:33] *** Joins: makomo (~makomo@user/makomo)
[20:07:48] <rotateq> Do you have a presentation for next ELS? maybe about SICL
[20:08:23] <beach> Me and idurand are going to submit a paper.  Whether there will be a presentation or not is then up to the referees. :)
[20:09:36] <rotateq> maybe in some years I can too if something interesting comes to my mind
[20:10:52] <beach> http://metamodular.com/SICL/environment-info.pdf is what we have so far.
[20:11:21] <beach> But idurand is going to be added as a coauthor, and I will be marked as "unaffiliated".
[20:11:29] <rotateq> maybe some day doing this GeoGebra clone with McCLIM
[20:11:50] <rotateq> hehe unaffiliated
[20:12:04] <beach> Yes, I retire before the conference takes place.
[20:12:09] <beach> You seem to have lots of projects.  I guess that's good.
[20:12:29] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[20:13:36] <rotateq> you think so? it's often the case to wrap ideas to a final thing, and learning more stuff
[20:14:06] <rotateq> i meant i fail to finalize things and as having many interests often something new comes up
[20:14:27] <beach> That's the downside of having too many projects, sure.
[20:14:45] <rotateq> yes it can be a curse being like me :)
[20:15:22] <rotateq> but I sharp the parentheses swords (the left and right) every day more
[20:15:58] <beach> Good.
[20:16:57] <rotateq> Last week the FORMAT directive "~@r" helped me much solving a 20% Project Euler problem, was happy. but in at least SBCL the limit for it seems to be 3999
[20:17:47] <rotateq> Have to go, talk later.
[20:24:49] <jackdaniel> and how does 4000 looks in roman numerals? :)
[20:25:21] <hobo> MMMM?
[20:26:16] <jackdaniel> almost, MHMM ;)
[20:28:02] <jackdaniel> perhaps with unicode you could do something like IV with a line above
[20:29:09] *** Joins: iquites (sid77830@id-77830.lymington.irccloud.com)
[20:39:28] <Nilby> Ⅳ̅ or I̅V̅ ?
[20:40:07] <jackdaniel> the latter
[20:40:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Read error: Connection reset by peer)
[20:40:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[20:43:46] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:54:18] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[21:02:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[21:22:46] *** Joins: Oladon (~olad@98.43.81.226)
[21:24:34] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:28:29] *** Joins: Colt (~Colt@user/colt)
[21:30:23] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[21:31:41] *** Joins: djuber (~user@65.79.128.64)
[21:46:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:55:13] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[21:55:39] *** Joins: Core8044 (~yewscion@2607:fb90:a124:17a:b25e:5b56:ed76:b2e9)
[21:55:41] *** Quits: yewscion_ (~yewscion@2604:ca00:14c:c858::1261:5bdb) (Ping timeout: 252 seconds)
[22:06:31] *** Quits: treflip (~user@95.79.32.99) (Quit: good night ✨)
[22:07:11] *** Joins: Jing_ (~hedgehog@2604:a840:3::103e)
[22:09:59] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[22:09:59] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Ping timeout: 252 seconds)
[22:11:51] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:11:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Read error: Connection reset by peer)
[22:12:28] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Client Quit)
[22:13:17] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:14:54] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:19:21] *** Joins: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com)
[22:23:27] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:23:43] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[22:25:11] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[22:31:50] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[22:32:10] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 260 seconds)
[22:40:57] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[22:44:27] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 252 seconds)
[22:46:45] *** Joins: yewscion (~yewscion@2604:ca00:139:9d29::661:4eb2)
[22:48:29] *** Quits: Core8044 (~yewscion@2607:fb90:a124:17a:b25e:5b56:ed76:b2e9) (Ping timeout: 252 seconds)
[22:54:02] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[22:55:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:59:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[23:00:40] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[23:16:21] *** Quits: yewscion (~yewscion@2604:ca00:139:9d29::661:4eb2) (Ping timeout: 252 seconds)
[23:18:48] *** Joins: nature (~nature@45.32.235.173)
[23:23:44] *** Joins: theothornhill (~user@2a01:799:15a2:4900:a55c:f60a:7dd3:337a)
[23:34:48] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[23:38:50] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[23:40:32] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[23:44:24] *** Joins: roelj (~user@2001:1c02:b16:3700:3718:3a46:b1ae:ba54)
[23:48:12] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:51:03] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[23:52:16] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[23:53:39] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[23:53:58] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:55:47] *** Quits: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com) (Ping timeout: 265 seconds)
[23:57:43] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:58:36] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[23:59:39] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
