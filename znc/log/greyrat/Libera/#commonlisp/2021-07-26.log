[00:00:22] <aeth> i.e .You don't want to have the user force (near-)universal optimizations just to get efficient math
[00:00:25] <JeromeLon> oh, but I don't want to optimize at all, I just want (debug 3)
[00:00:35] <pjb> you would have to wrap them in a lot of checks. Most of the time, that would defeat the purpose.
[00:00:36] <aeth> oh, debug 3? Absolutely don't force that on users!
[00:00:49] <JeromeLon> I want to force it on myself
[00:00:56] <aeth> yeah, then pjb is right
[00:00:57] <pjb> Indeed, let them put what they want in their rc file.
[00:02:08] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[00:02:08] <JeromeLon> ok, let me reformulate my question: I am writing a system that consists of a lot of files. What do I have to do to have all the debug capabilities at all time while developping?
[00:02:51] <pjb>   (proclaim '(optimize (safety 3) (debug 3) (space 0) (speed 0) (compilation-speed 3)))
[00:02:56] <pjb> or the declaim version.
[00:04:37] <JeromeLon> pjb: just to be clear: I eval this on the repl just before load-system, and all the compiling will use it from that point on?
[00:04:59] <pjb> JeromeLon: that would work, too.
[00:05:01] <pjb> Yes.
[00:05:07] <pjb> optimization levels are global.
[00:05:16] <JeromeLon> perfect, thanks!
[00:08:27] *** Joins: jans1 (~Thunderbi@141.98.255.150)
[00:08:45] <lotuseater> i should never answer stuff anymore :/
[00:10:14] *** Quits: jans (~Thunderbi@119.51-174-216.customer.lyse.net) (Ping timeout: 255 seconds)
[00:10:14] *** jans1 is now known as jans
[00:16:40] <pjb> lotuseater: it's good to have different opinions!
[00:17:06] *** Joins: IPmonger (~IPmonger@172.58.203.197)
[00:17:24] *** Quits: IPmonger (~IPmonger@172.58.203.197) (Remote host closed the connection)
[00:19:16] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[00:21:20] <lotuseater> pjb: i don't see it as opinion but lack or naiveness of my "knowledge"
[00:21:41] <pjb> lotuseater: it's by trying to answer, that you learn more.
[00:21:42] <lotuseater> beach advised me once more there's one thing to improve: practice!
[00:21:53] <lotuseater> and one learns more from failure than else
[00:22:04] <pjb> Of course, you may have to do some research to answer the questions.
[00:22:27] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[00:22:39] <lotuseater> that with the around compile came to my head cause i saw it in some libs
[00:23:19] <pjb> I don't know this option in asdf, but it's possible that it's useful, indeed.
[00:24:22] <pjb> Note however that there's no conforming API to inspect the optimize declaration, and not all implementations provide one.
[00:24:45] <pjb> So it would be hard to do an around-compile function that would save and restore the optimizations.
[00:32:41] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[00:33:28] *** Joins: scymtym (~user@p200300c09f028569b1ea43edacc35d27.dip0.t-ipconnect.de)
[00:34:28] <jcowan> fwiw I think that skinnability has become an important part of UI design.  But that can wait for OClim rather than McCLIM, I suppose.
[00:38:51] <scymtym> _death: sliders have a "drag callback" which is called immediately
[00:39:31] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[00:39:46] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[00:41:11] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[00:48:07] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Ping timeout: 265 seconds)
[00:50:56] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[00:59:36] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:00:44] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:02:42] <lotuseater> jcowan: so Oclim shall be a next version of McCLIM?
[01:03:33] <jcowan> Yes.  Mac/Mc is a prefix to Irish and Scottish surnames originally meaning "son of", whereas "O" means "grandson/descendant of".
[01:03:56] <lotuseater> cool to know
[01:04:04] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[01:04:05] *** Joins: IPmonger (~IPmonger@2607:fb90:379:ba82:fd08:adb4:f2a9:e7d4)
[01:04:23] <lotuseater> one of beaches repos is also about CLIM3 as i remember
[01:04:24] *** Quits: IPmonger (~IPmonger@2607:fb90:379:ba82:fd08:adb4:f2a9:e7d4) (Remote host closed the connection)
[01:04:47] <jcowan> My own surname is a clipped form of Irish "Mac Eoghain", son of "Eoghan", "Owen", or "John", though my father was Thomas and not John.
[01:04:52] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[01:06:10] <jcowan> His father, however, wrote his name "John Cowan" but pronounced it more like "Shawn a-Cawn".
[01:06:48] <lotuseater> ahh
[01:07:07] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[01:07:51] <lotuseater> here in germany the most common surnames are something like "Müller" or "Meier" for also historical reasons
[01:10:17] *** Joins: Oladon (~olad@98.43.81.226)
[01:13:43] <jcowan> Yes.  Germans didn't go in for patronymics for whatever reason, unlike Jews, Scandinavians, the English, and the Welsh.
[01:14:21] <jcowan> (exceptions being on the borders, like Ostfriesland and Holstein)
[01:20:31] <lotuseater> I fond it interesting that some jewish surnames are very german but one can predict they're more used in jewish families
[01:20:57] <waleee> jcowan: we Swedes have a mix, patronymics is lower than 50%
[01:21:24] <lotuseater> nice waleee you're from sweden :) a friend of mine is travelling atm there with a camper
[01:21:26] <jcowan> Mendelssohn is a very good example
[01:21:50] <lotuseater> jcowan: thx i thought about one but nothing came to my mind
[01:22:02] <waleee> the rest of the surnames would sound jewish in German I guess (heavily nature-inspired)
[01:22:33] <jcowan> Invented by Austro-Hungarian bureaucrats, who could be paid to give you better ones.
[01:23:21] <waleee> eg I don't think any in the Swedish soccer-team has a -son name
[01:23:40] <waleee> well one
[01:23:43] <jcowan> "So what name did you get?"  "Schweisshund."  "Whaaat? Didn't you pay him enough?"  "My friend, you have no idea how much I had to pay for that W!"
[01:25:10] <lotuseater> or "Goldberg"
[01:25:24] <lotuseater> hahah
[01:25:32] <lotuseater> to your "Schweisshund"
[01:26:20] <jcowan> Well, wouldn't that be a mountain full of gold ore?
[01:26:31] <lotuseater> something like that yes
[01:26:56] <jcowan> Better a sweaty dog than a shitty one.
[01:29:54] <lotuseater> my surname is that of a german town without the last two chars, has nothing to do with each other, but sometimes useful to say for one to write it down correctly :D and also not so often which is good
[01:31:31] <lotuseater> look up this REALLY funny and weird town names :D
[01:33:44] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[01:33:59] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[01:33:59] <lotuseater> like Fickmühlen, Luschendorf, Afrika, Knoblauch, Amerika, Texas, Poppel, Lederhose, Aua, Hanf, Kothausen, Drogen
[01:34:07] <lotuseater> ok much offtopic :/
[01:34:46] <lotuseater> so coming back ontopic, they should have used a CL tool for figuring out that those names are silly
[01:37:03] *** Quits: Oladon (~olad@98.43.81.226) (Read error: Connection reset by peer)
[01:45:21] *** Joins: Bike (~Bike@71.69.170.70)
[01:45:21] *** ChanServ sets mode: +o Bike
[01:54:40] <edgar-rft> let's all our symbols have surnames
[01:55:22] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 240 seconds)
[01:55:25] <lotuseater> (defvar *symbol-mc-symbol* ...)
[01:56:55] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[01:58:48] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[02:03:50] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:07:19] *** Quits: pve (~pve@188-67-199-248.bb.dnainternet.fi) (Quit: leaving)
[02:07:44] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[02:07:58] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[02:08:27] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:10:58] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:11:06] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[02:13:40] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[02:16:19] <jcowan> Package names are like surnames
[02:19:37] *** Joins: hafat (~hafat@95.70.168.45)
[02:20:56] <lotuseater> are then the double colon not exposed symbols package::symbol the childrens the world shall not know about? ^^
[02:22:25] <Alfr> And what about apparently uninterned symbols?
[02:22:40] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[02:25:22] *** Quits: lad (~lad@user/lad) (Ping timeout: 256 seconds)
[02:26:47] <Bike> foundlings
[02:30:05] *** Quits: frgo (~frgo@p200300deef181d0041b2662f828e694c.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:30:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[02:30:33] *** Joins: frgo (~frgo@p200300deef181d007d15c7aa06e17b64.dip0.t-ipconnect.de)
[02:30:40] <moon-child> jcowan: in j, package names go after explicitly qualified symbols, rather than before
[02:30:57] <jcowan> Eh, so do surnames in Hungary, China, Japan, ...
[02:32:06] <lotuseater> Alfr: good question
[02:32:52] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[02:32:58] <moon-child> jcowan: that's backwards
[02:33:32] <jcowan> Never tell a Hungarian he is backwards.  You can tell a Chinese that, but they will loftily ignore you.
[02:37:58] *** Joins: zacts (~zacts@user/zacts)
[02:41:46] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:44:34] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[02:56:55] <edgar-rft> this is what you could tell to hungarians -> https://www.youtube.com/watch?v=C1Sw0PDgHU4
[03:00:51] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[03:02:42] *** Quits: gaqwas (~john@dynamic-077-007-087-014.77.7.pool.telefonica.de) (Ping timeout: 240 seconds)
[03:03:27] *** Quits: hafat (~hafat@95.70.168.45) (Ping timeout: 265 seconds)
[03:06:12] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[03:17:45] *** Joins: pegaso (~reis-r@131.72.121.35)
[03:19:10] *** Joins: akoana (~ah@user/akoana)
[03:24:18] *** Joins: hafat (~hafat@95.70.168.45)
[03:25:59] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 255 seconds)
[03:26:53] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[03:29:05] *** Quits: frgo (~frgo@p200300deef181d007d15c7aa06e17b64.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:29:33] *** Joins: frgo (~frgo@p200300deef181d007d15c7aa06e17b64.dip0.t-ipconnect.de)
[03:33:18] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[03:35:49] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[03:39:27] *** Joins: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0)
[03:40:23] *** Quits: lotuseater (~user@p200300e7871b3f0020d699d6af37853a.dip0.t-ipconnect.de) (Ping timeout: 255 seconds)
[03:40:49] *** Alfr is now known as Guest4668
[03:40:49] *** Quits: Guest4668 (~Alfr@user/alfr) (Killed (zinc.libera.chat (Nickname regained by services)))
[03:40:53] *** Joins: Alfr (~Alfr@user/alfr)
[03:48:52] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[03:50:10] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[03:52:11] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[04:01:27] *** Quits: ggoes (~gregf@user/ggoes) (Quit: WeeChat 2.3)
[04:02:07] *** Joins: ggoes (~gregf@user/ggoes)
[04:03:35] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[04:26:19] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[04:27:16] *** Quits: lisp123 (~lisp123@45.130.83.200) (Remote host closed the connection)
[04:30:58] *** Joins: lisp123_ (~lisp123@45.130.83.200)
[04:34:31] *** Joins: cjb (~cjb@user/cjb)
[04:35:46] *** Quits: lisp123_ (~lisp123@45.130.83.200) (Ping timeout: 265 seconds)
[04:36:44] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[04:57:14] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:00:25] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[05:01:53] *** Joins: zacts (~zacts@user/zacts)
[05:03:31] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[05:07:32] *** Joins: lisp123 (~lisp123@45.130.83.200)
[05:14:42] *** Quits: scymtym (~user@p200300c09f028569b1ea43edacc35d27.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[05:15:48] *** Quits: pegaso (~reis-r@131.72.121.35) (Quit: Leaving)
[05:21:02] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 256 seconds)
[05:21:55] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[05:47:26] *** Joins: Bike (~Bike@71.69.170.70)
[05:47:26] *** ChanServ sets mode: +o Bike
[05:49:14] *** Joins: lisp123 (~lisp123@45.130.83.200)
[05:50:06] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[05:51:15] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[05:53:37] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 256 seconds)
[05:54:04] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 265 seconds)
[05:57:23] *** Joins: cjb (~cjb@user/cjb)
[06:15:28] *** Quits: luis (~luis@lisp/luis) (Quit: Ping timeout (120 seconds))
[06:18:02] *** Joins: luis (~luis@lisp/luis)
[06:18:02] *** ChanServ sets mode: +o luis
[06:18:16] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[06:21:33] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[06:24:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[06:34:33] *** Joins: srhm (~ascii@user/srhm)
[06:42:30] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[06:46:40] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[06:51:27] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 276 seconds)
[07:11:53] *** Joins: prxq_ (~quassel@x4db60e69.dyn.telefonica.de)
[07:15:56] *** Quits: prxq (~quassel@x4db5f6fb.dyn.telefonica.de) (Ping timeout: 255 seconds)
[07:22:58] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[07:23:13] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[07:31:19] <beach> Good morning everyone!
[07:32:31] *** Joins: zacts (~zacts@user/zacts)
[07:42:07] <pillton> Good morning.
[07:47:45] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[07:47:53] *** Joins: zacts86 (~zacts@user/zacts)
[07:48:04] *** Quits: zacts86 (~zacts@user/zacts) (Client Quit)
[08:07:04] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 256 seconds)
[08:08:20] *** Parts: akoana (~ah@user/akoana) ()
[09:03:00] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[09:07:17] *** Joins: lisp123 (~lisp123@45.130.83.200)
[09:10:47] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:18:31] *** Joins: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi)
[09:40:25] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[09:40:25] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (*.net *.split)
[09:40:26] *** Quits: spacebat1 (spacebat@spot.ubermonkey.net) (*.net *.split)
[09:40:26] *** Quits: kagevf (~jfh@ip68-224-125-162.lv.lv.cox.net) (*.net *.split)
[09:40:26] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[09:40:26] *** Quits: pok (~pok@user/pok) (*.net *.split)
[09:40:26] *** Quits: commandoline (~commandol@ubuntu/member/commandoline) (*.net *.split)
[09:40:26] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[09:40:26] *** Quits: fishfinger (~fishfinge@178.62.22.133) (*.net *.split)
[09:40:28] *** Joins: pok_ (~pok@castor.klingenberg.no)
[09:40:29] *** Joins: commandoline_ (~commandol@ubuntu/member/commandoline)
[09:40:31] *** pok_ is now known as pok
[09:40:31] *** Joins: gabc_ (~gabc@user/gabc)
[09:40:33] *** Joins: kagevf (~jfh@ip68-224-125-162.lv.lv.cox.net)
[09:40:38] *** Joins: fishfinger_ (~fishfinge@178.62.22.133)
[09:40:53] *** Joins: skyl4rk (~tlvb@tlvb.se)
[09:40:59] *** Quits: skyl4rk (~tlvb@tlvb.se) (Signing in (skyl4rk))
[09:40:59] *** Joins: skyl4rk (~tlvb@user/tlvb)
[09:41:00] *** Quits: pok (~pok@castor.klingenberg.no) (Changing host)
[09:41:00] *** Joins: pok (~pok@user/pok)
[09:41:25] *** Joins: spacebat1 (spacebat@spot.ubermonkey.net)
[09:41:26] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[09:41:38] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[09:43:37] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (*.net *.split)
[09:43:37] *** Quits: jmercouris (sid438340@id-438340.stonehaven.irccloud.com) (*.net *.split)
[09:43:37] *** Quits: etiago (~etiago@user/etiago) (*.net *.split)
[09:43:48] *** Joins: jmercouris (sid438340@id-438340.stonehaven.irccloud.com)
[09:43:53] *** Joins: etiago (~etiago@user/etiago)
[09:49:17] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[09:49:44] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:53:19] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[09:59:03] *** Joins: Oddity (Oddity@user/oddity)
[09:59:47] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:02:57] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[10:07:35] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[10:13:05] *** Quits: JeromeLon (~JeromeLon@2a00:23c7:99da:6600:e5f1:e540:5d25:17d8) (Remote host closed the connection)
[10:14:31] *** Joins: gaqwas (~john@dynamic-077-004-084-193.77.4.pool.telefonica.de)
[10:16:42] *** Joins: selwyn (~selwyn@user/selwyn)
[10:19:47] *** Joins: pillton` (~user@140.253.50.30)
[10:22:15] *** Quits: pillton` (~user@140.253.50.30) (Remote host closed the connection)
[10:22:28] *** Joins: pillton` (~user@140.253.50.30)
[10:23:09] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Ping timeout: 246 seconds)
[10:24:20] *** Joins: spiaggia (~user@2a01:cb19:150:3400:ec3a:b064:5390:6c5)
[10:26:43] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:30:14] *** Quits: pillton` (~user@140.253.50.30) (Quit: ERC (IRC client for Emacs 27.2))
[10:30:31] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[10:44:17] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 245 seconds)
[10:46:24] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 252 seconds)
[10:49:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[10:49:27] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[10:51:02] *** Joins: selwyn (~selwyn@user/selwyn)
[10:57:18] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[11:03:49] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[11:09:49] *** Joins: pve (~pve@87-93-194-73.bb.dnainternet.fi)
[11:23:08] *** Quits: silasfox (~sbv@165.56.186.128) (Ping timeout: 252 seconds)
[11:24:09] *** Joins: shka (~herr@109.231.62.239)
[11:24:57] *** Quits: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net) (Quit: Leaving)
[11:31:44] <_death> minion: memo for scymtym: you're right, there is :drag-callback.. it was something different that I can't recall at the moment
[11:31:51] <minion> Remembered. I'll tell scymtym when he/she/it next speaks.
[11:32:15] *** Quits: gaqwas (~john@dynamic-077-004-084-193.77.4.pool.telefonica.de) (Ping timeout: 276 seconds)
[11:41:29] *** Joins: derelict (~derelict@user/derelict)
[11:42:53] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[11:44:36] *** Parts: spiaggia (~user@2a01:cb19:150:3400:ec3a:b064:5390:6c5) (ERC Version 5.3 (IRC client for Emacs))
[11:50:17] *** Quits: hafat (~hafat@95.70.168.45) (Ping timeout: 265 seconds)
[11:50:46] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[11:51:04] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[11:55:37] *** Joins: Qwnavery (~Qwnavery@14-202-152-38.tpgi.com.au)
[11:59:17] <Qwnavery> Hello, if someone has a moment to spare; I'm having some trouble getting quicklisp to recognize foreign libraries
[11:59:57] <beach> Just ask your question.
[12:00:14] <Qwnavery> It can't load libsqlite3 and sqlite3 for clsql library
[12:00:42] *** Joins: Th30n (~Th30n@cpe-188-252-159-23.zg5.cable.xnet.hr)
[12:01:05] <Qwnavery> I've searched and nothing comes up. I'm unsure if it's a fault of musl libc
[12:01:54] <Qwnavery> - Using Voidlinux + musl, sbcl + quicklisp
[12:02:40] <beach> I wasn't aware that Quicklisp could do foriegn code at all.
[12:03:02] <Qwnavery> It may just be the clsql library then
[12:03:52] <Qwnavery> Apologies, it is the library clsql
[12:04:32] <_death> if you have the libsqlite3 shared library somewhere, you can check that the loader/cffi find it, see /etc/ld.so.conf and cffi:*foreign-library-directories* respectively
[12:06:35] <Qwnavery> https://pastebin.com/vZRmLFwg
[12:06:56] <pve> Qwnavery: does (quicklisp:quickload "sqlite") work?
[12:07:36] <_death> oh right, ancient uffi.. well, it has *foreign-library-search-paths* according to that form
[12:07:59] <Qwnavery> pvi it's installing, is there any reference for it or is it apart of the standard lib?
[12:09:51] <Qwnavery> https://common-lisp.net/project/cl-sqlite/ is this the "sqlite" package?
[12:10:19] <pve> Qwnavery: can you do (defparameter *DB* (sqlite:connect "mydatabase.db")), for instance?
[12:10:42] <pve> Qwnavery: yes, that's the one
[12:11:25] <Qwnavery> pve: it appears to be valid
[12:12:24] <pve> Qwnavery: then it's probably clsql that's causing trouble
[12:13:10] <Qwnavery> Yeah, is there any tangible performance benefit for using clsql for sqlite over sqlite?
[12:13:35] <Qwnavery> if not then it's probably not worth trying to get foreign librarys working that's all
[12:14:11] <pve> Qwnavery: both of those rely on foreign libraries
[12:14:56] <Qwnavery> pve herm. ok. well sqlite is working so I'll stick with that I guess.
[12:15:37] <pve> Qwnavery: you can probably forget about clsql for now
[12:16:16] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 258 seconds)
[12:16:31] *** Joins: selwyn (~selwyn@user/selwyn)
[12:16:56] <Qwnavery> you can tell, yeah I'm new. Apologies for being a nuisance. Thanks for your time. Really appreciated.
[12:33:28] *** Quits: Qwnavery (~Qwnavery@14-202-152-38.tpgi.com.au) (Quit: WeeChat 3.2)
[12:35:32] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:11] *** Quits: prxq_ (~quassel@x4db60e69.dyn.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[12:38:10] *** Joins: prxq (~quassel@x4db60e69.dyn.telefonica.de)
[12:38:47] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:41:08] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[12:45:29] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[13:08:51] *** Joins: lotuseater (~user@p200300e7871b3f005c43df6f41f2e98c.dip0.t-ipconnect.de)
[13:10:45] <lotuseater> good morning fellow lispers
[13:11:18] <beach> Hello lotuseater.
[13:12:29] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[13:25:11] *** Joins: Melantha (~pyon@user/pyon)
[13:27:29] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[13:28:08] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[13:28:17] <pl> ASDF can do some foreign code, and what ASDF can, QL can
[13:28:28] <beach> Great!
[13:28:58] <pl> And hello, I haven't been active here long, I feel... (Leenode migration doesn't count)
[13:29:22] <beach> pl: Welcome back!
[13:29:45] <lotuseater> hi there pl :)
[13:32:51] <shka> pl: hi!
[13:33:50] *** Joins: scymtym (~user@p200300c09f028569b1ea43edacc35d27.dip0.t-ipconnect.de)
[13:39:18] <pl> Anything particularly noteworthy in changes to common libs, implementations? I feel a bit behind on news
[13:40:55] <beach> pl: The WSCL effort is well on the way: https://github.com/s-expressionists/wscl/tree/main/wscl-issues/proposed
[13:42:40] <pl> Ooh, nice. Especially the part where it apparently codifies current real world behavior
[13:44:01] <beach> That's the main idea with WSCL, i.e., do not invent anything that the main existing implementations don't already do.
[13:44:30] <beach> So, just transfer reasonable and agreed-upon behavior to the specification.
[13:44:50] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[13:45:40] <beach> Bike created some "issues" that don't quire belong in WSCL, and we don't quite know how and where to present those.  They don't belong because they discuss extensions and/or radical changes.
[13:46:35] *** Joins: admich (~user@ip-155-236.sn-213-198.clouditalia.com)
[13:46:37] <beach> "quire"?  I mean "quite", of course.
[13:50:22] <lotuseater> pl: another very insteresting and well working project to notice is April by phantomics: https://github.com/phantomics/april
[13:51:42] <lotuseater> it seems reasonable it even now outruns Dyalog APL which is 500.000 lines of C++ o_O
[13:52:36] <moon-child> what do you mean by 'outruns'?  Outperforms?  I find that very unlikely
[13:53:04] <moon-child> afaik it doesn't even do reference counting, which is necessary to get good-performing apl
[13:53:29] <lotuseater> yes ok, it can't do anything up to now
[13:53:42] <beach> moon-child: Why would a tracing GC not work?
[13:53:43] <lotuseater> s/anything/eveythingr
[13:53:44] <moon-child> (funny how languages differ that way :P)
[13:53:50] <pl> Is refcounting needed when you have GC?
[13:53:56] <moon-child> beach: it would 'work', but it would not perform well
[13:54:17] <lotuseater> moon-child: can you shortly explain reference counting to me?
[13:54:17] <beach> That sounds very surprising to me, given how reference counting works.
[13:54:37] <pl> moon-child: why so? Runs contrary to all instincts and knowledge I have, so I'm curious
[13:55:09] <beach> Same here.
[13:55:46] <pl> The one time I've seen refcounting and "faster than tracing GC" actually work out was I think in Linear Lisp
[13:56:06] <pl> And there it was essentially part of a trick to reduce trace time
[13:56:14] <lotuseater> phantomics told me it is also planned (when stying with SBCL) to use SIMDs
[13:56:25] <moon-child> First: apl tends towards small numbers of large objects, so the overhead of reference counting is lessened.  Second: in apl, all object have value semantics.  A statement such as 'x←y' is semantically a copy; however it can be implemented by making 'x' point to the same memory as that currently pointed to by 'y'.  A statement like 'x ← x + y', then, can only be an in-place operation on the
[13:56:27] <moon-child> memory pointed to by x if it is known that the reference count of x is 1
[13:56:36] <moon-child> (where x is some very large array that it would be costly to copy)
[13:57:15] <beach> Makes sense.
[13:57:16] <lotuseater> yeah it's intended to handle BIG arrays ^^
[13:57:29] <moon-child> *small numbers of large _and homogenous_ objects--an array of fixnums, say--so you don't need to maintain a reference count fo revery element
[13:57:37] <beach> Avoiding the copy in many cases could dwarf everything else.
[13:58:04] <pl> One-bit GC would work fine then
[13:58:25] <pl> Sorry, one bit "reference counting"
[13:58:37] <moon-child> pl: no
[13:58:58] <moon-child> because you might create many references to some object, then delete all but one, at which point you should be able to perform operations on that object in place
[13:59:11] <lotuseater> getting GC right when implementing a CL is one of the more tricky parts, right? Roger Corman said so in his talk about Corman Lisp.
[14:01:46] <moon-child> lotuseater: gc is very touchy, yes; and design desiderata for GCs are somewhat application-specific
[14:03:08] <pl> moon-child: would there be many references, or rather, big space to scan? Or rather, can the array refer suddenly to somewhere else in the middle, or can one optimize by allocating "no outbound refs" arenas?
[14:03:41] <lotuseater> okay :) I thought about when one starts writing a language kernel in Rust, which does borrow checking and needs no GC, would the CL implementation still need GC? I think yes because of its very dynamic nature.
[14:03:49] *** Joins: treflip (~user@95.79.32.99)
[14:04:20] <ecraven> lotuseater: it's not that Rust doesn't *need* a GC, it just doesn't have one.. many programmers might *like* one for some tasks, it just isn't there
[14:04:26] <pl> lotuseater: Ruat's propaganda doesn't change the fact that it runs a half-baked Linear Lisp GC
[14:04:37] <pl> *Rust's
[14:04:50] <lotuseater> yes it does pl. propaganda :D
[14:04:56] <ecraven> also, you can write CL code that does not cons ("allocate memory") very much, so the GC would only run very infrequently
[14:05:18] <pl> And the end result is that when you get into complex data structures, you have to forsake safety
[14:05:46] *** Quits: scymtym (~user@p200300c09f028569b1ea43edacc35d27.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:05:59] <moon-child> pl: in apl we distinguish homogenous arrays (which contain only fixed-size numbers and characters) from nested arrays (which may contain other arrays).  (And most arrays fall into the former category, so you do not need to scan very much.)  _If_ you were doing tracing gc, it would make sense to allocate the former in a no-outbound-refs arena, but it doesn't make sense to do tracing gc with apl
[14:06:05] <beach> lotuseater: You can use the host GC only if you have your compiled code executed by the host.  But that's not usually how a Common Lisp implementation works.  It generates native code with its own ABI, so it needs its own GC.
[14:06:22] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[14:06:35] <lotuseater> A Rust enthusiast friend of mine told me the last time he was at my place he doesn't see lisp used or be adapted by industry now that Rust is. i showed him from time to time some magic. and then told him CL is in industry for now a long time, or isn't it?
[14:06:36] <beach> lotuseater: Also, it is best to write the Common Lisp implementation in Common Lisp.
[14:06:40] <moon-child> lotuseater: the semantics of lisp require a gc (or to leak memory); this is independent of the language you use to implement it.  Rust's gc is not commensurate with lisp's semantics
[14:06:42] <flip214> QL leaves me with clon-1.0b25; but loading that (via QL) gives me "System "net.didierverna.clon.termio" not found"
[14:06:55] <pl> lotuseater: "GC" is the colloquiall name - the name of the art is "automatic memory management", and as much as I laud them for bringing half of a single GC design from mid-1990s into common usage, that's where my like ends
[14:06:55] <lotuseater> beach: Sure it is!
[14:07:55] <moon-child> pl: if steele brought the c++ programmers halfway towards lisp, rust is bringing them halfway towards ocaml/clean? ¯\_(ツ)_/¯
[14:08:03] <lotuseater> let alone be ACL2 in industry use for proving hardware or this DART system in the gulf war
[14:08:20] <lotuseater> moon-child: haha yeah one of my favorite quotes
[14:08:32] <pl> moon-child: no, Rust let's them do a 180 turn
[14:09:05] <moon-child> well, yes; as hayley points out, java also dragged the lisp programmers halfway back towards c++
[14:09:40] <lotuseater> they also find it funny when i say stuff like C and friends are just special purpose langs. or that IDEs seem to converge to emacs
[14:09:54] <lotuseater> and of course climacs ;)
[14:10:20] <lotuseater> moon-child: and then Rich Hickey came along with Clojure
[14:11:30] <beach> Industry seems determined to use languages with no independent standard, with a few exceptions.
[14:11:44] <lotuseater> yes it does
[14:12:20] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:12:34] <lotuseater> beach: you once said it's not good using things with no or often changing/breaking standard, much more when legacy is needed in the long run
[14:12:37] <beach> And, as I emphasize in my industry talks, a project leader that chooses such a language should be fired.
[14:12:49] <lotuseater> haha yes :D
[14:13:40] <lotuseater> I can also imagine you had some big industry projects in your career.
[14:13:48] <moon-child> beach: I do not think such blanket statements are appropriate
[14:13:59] <pl> beach: to me, its funnier when some languages that get bad rep turn out to have standards XD, it's just not widely known outside of the community
[14:14:37] <pl> (for example Ruby, which has both an (outdated) ISO standard, and informal standard including test suite that allows existence of interoperable implementations)
[14:14:50] <lotuseater> nice
[14:15:07] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[14:15:27] <pl> Which is why JRuby thrives and Jython and IronPython are deader than door nail
[14:16:23] <lotuseater> or this mess with the C++ standard changing all three years, adapting things that are well known for 20+ years and even the experts don't know/understand everything o_O
[14:16:24] <moon-child> counterpoint: pypy, graalpython
[14:16:49] <lotuseater> moon-child: ah with this GraalVM?
[14:17:12] <lotuseater> python packaging is pain out of hell
[14:17:50] <beach> moon-child: It keeps the audience awake.  And then I explain why in greater detail.
[14:18:08] <moon-child> the existance of a standard is invaluable when making a new implementation of a language, but I think its more important role is as a statement of the values of the designers and community of a language
[14:19:40] <lotuseater> or when much is depending on that what you do with it. eg in medicine technology every line must be clearly justified
[14:20:58] <moon-child> *existence
[14:21:53] <beach> moon-child: That would be way to complicated a message for my typical audience.
[14:21:55] <flip214> hmmm, why is :NET.DIDIERVERNA.CLON.TERMIO in *FEATURES*
[14:22:16] <pl> moon-child: PyPy is rife with "this doesn't work, this works" for the last... 15 years or so? I think that's how old the project is
[14:22:22] <moon-child> beach: heh!  Fair enough
[14:22:28] <lotuseater> flip214: maybe something depends on that with #+ or #-
[14:22:41] <pl> moon-child: in comparison, with Ruby, you generally /assume things work/
[14:22:42] * moon-child sometimes feels as though his role in this channel is to play devil's advocate to beach
[14:22:46] <pl> With PyPy I assume the opposite
[14:23:10] <beach> moon-child: Thank you.  I need a few people playing that role.
[14:23:24] <moon-child> :)
[14:23:28] <lotuseater> moon-child: but that what's keeping the discussion awake :)
[14:25:13] <flip214> lotuseater: in the ASD there's a :depends-on with (:feature :net.didierverna.clon.termio net.didierverna.clon.termio)
[14:25:16] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:25:23] <flip214> but why *features* has that I don't know yet
[14:25:35] <pl> moon-child: there's simply a big difference between language with a test suite as target, and language with "you have to work exactly like this big hairy C function"
[14:28:31] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[14:44:32] *** Joins: random-nick (~random-ni@87.116.182.181)
[14:49:59] *** Quits: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi) (Ping timeout: 258 seconds)
[14:53:51] *** Joins: NeoCron (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de)
[15:05:16] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[15:07:59] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 255 seconds)
[15:08:38] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[15:10:19] *** Joins: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi)
[15:24:27] <shka> pl: don't forget about the shedskin :D
[15:24:49] <pl> shedskin?
[15:25:01] <shka> python->C++ compiler
[15:25:05] <shka> dead, obviously
[15:26:14] <shka> there can be only one python implementation
[15:26:29] <shka> all others are getting decapitated
[15:29:09] *** Quits: frgo (~frgo@p200300deef181d007d15c7aa06e17b64.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:29:36] *** Joins: frgo (~frgo@p200300deef181d007d15c7aa06e17b64.dip0.t-ipconnect.de)
[15:44:42] *** Quits: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi) (Ping timeout: 245 seconds)
[15:45:52] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:46:37] <pl> It's not effectively possible to track CPython because the spec is "whatever PyEvalFrameEx is doing"
[15:47:03] <pl> And then you have leaky abstractions, iirc, in Python C extensions
[15:47:44] <pl> The latter is not an insurmountable problem by itself - Ruby IMO shows the way
[15:48:09] <pl> (lots of CFFI style stuff happening)
[15:49:02] <pl> But the CFFI style stuff became important because JRuby was viable
[15:56:46] <etimmons> flip214: https://github.com/quicklisp/quicklisp-controller/issues/20
[15:56:48] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[15:58:44] <etimmons> flip214: you probably just need to add it to local-projects to get it working
[15:58:56] <flip214> etimmons: ah, thanks
[15:59:13] <flip214> so it wasn't the QL update but the QL cleanup of "unused" stuff that broke the setup
[15:59:16] <flip214> thanks!
[15:59:26] *** Joins: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi)
[16:06:53] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[16:07:56] <gin> is the memory allocation different between these two options -- (push (cons a b) alist) vs. (push '(a . b) alist)? I think (cons a b) will allocate on the heap. what about '(a . b). does it not need to be allocated somewhere?
[16:09:01] <gin> assuming a and b are variables passed around by some other part of the code.
[16:10:00] *** Joins: lisp123_ (~lisp123@45.130.83.200)
[16:11:08] *** Quits: admich (~user@ip-155-236.sn-213-198.clouditalia.com) (Quit: bye)
[16:11:43] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 250 seconds)
[16:19:58] <jackdaniel> when you qupte a and b are not evaluated
[16:20:13] <jackdaniel> so instead of variables you have symbols
[16:21:55] <jackdaniel> from the allocation side, quoted expressions may be stored once in the memory, so single modification may impact all future accesses
[16:22:10] <jackdaniel> literal objects should not ve modified in general
[16:22:15] <jackdaniel> be*
[16:29:39] *** Joins: tfb (~tfb@88.98.95.237)
[16:29:56] <gin> jackdaniel: thanks
[16:32:32] <jackdaniel> sure
[16:37:42] <pjb> gin: (setf *print-circle* t) (let ((fresh-conses '()) (literals '())) (loop repeat 3 do  (push (cons 'a 'd) fresh-conses) (push '(a . d) literals) finally (return (values fresh-conses literals)))) --> ((a . d) (a . d) (a . d))  (#1=(a . d) #1# #1#)
[16:38:27] <pjb> gin: as you can see, there are semantic differences. That should be enough to decide which to use.
[16:43:10] <pl> in SBCL, with safety=0, literals modification can be very... interesting
[16:43:17] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[16:43:35] *** Joins: sander (~sander@user/sander)
[16:45:01] <pl> SBCL generally will allocate literals in function header, so while I don't know how it would go with a cons cell, in my experience allocating a short vector resulted in said vector being completely stored in function header
[16:45:24] <pl> this resulted in !fun! when I modifed its contents
[16:46:43] <jackdaniel> ECL stores literals in the FASL header, so it may possible collapse equal literals from different functions
[16:46:48] <jackdaniel> possibly*
[16:52:27] <pl> interesting
[16:53:31] *** Joins: dlowe (~dlowe@user/dlowe)
[16:55:53] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[16:57:59] *** Joins: admich (~user@ip-155-236.sn-213-198.clouditalia.com)
[17:01:15] *** Joins: sm2n (~sm2n@user/sm2n)
[17:02:25] *** Quits: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi) (Ping timeout: 250 seconds)
[17:06:24] *** Joins: IPmonger (~IPmonger@172.58.203.172)
[17:06:27] *** Joins: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi)
[17:06:38] *** Quits: IPmonger (~IPmonger@172.58.203.172) (Remote host closed the connection)
[17:12:41] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[17:16:39] *** gabc_ is now known as gabc
[17:22:21] *** Quits: lotuseater (~user@p200300e7871b3f005c43df6f41f2e98c.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:28:37] *** Quits: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi) (Ping timeout: 265 seconds)
[17:30:32] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 245 seconds)
[17:34:05] *** Joins: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi)
[17:37:33] *** Joins: makomo (~makomo@user/makomo)
[17:42:53] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:43:24] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:46:56] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[17:47:25] *** Joins: derelict (~derelict@user/derelict)
[17:51:34] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[17:54:18] *** Joins: Bike (~Glossina@71.69.170.70)
[17:54:18] *** ChanServ sets mode: +o Bike
[17:54:46] *** Joins: jans1 (~Thunderbi@193.138.218.161)
[17:58:06] *** Quits: jans (~Thunderbi@141.98.255.150) (Ping timeout: 256 seconds)
[17:58:06] *** jans1 is now known as jans
[18:12:35] *** Quits: admich (~user@ip-155-236.sn-213-198.clouditalia.com) (Quit: bye)
[18:16:36] *** Quits: jans (~Thunderbi@193.138.218.161) (Ping timeout: 258 seconds)
[18:23:09] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:33:13] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[18:34:21] *** Joins: lad (~lad@user/lad)
[18:35:28] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:51:18] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[18:57:57] *** Joins: cage (~cage@dynamic-adsl-78-15-35-191.clienti.tiscali.it)
[19:04:01] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[19:04:10] *** Joins: zacts (~zacts@user/zacts)
[19:04:10] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[19:10:07] *** Joins: dlowe (~dlowe@user/dlowe)
[19:10:17] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[19:10:39] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:13:37] *** Quits: Th30n (~Th30n@cpe-188-252-159-23.zg5.cable.xnet.hr) (Quit: WeeChat 3.2)
[19:17:21] *** Quits: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi) (Ping timeout: 252 seconds)
[19:17:42] *** Joins: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi)
[19:17:46] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[19:18:32] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[19:35:52] *** Quits: random-nick (~random-ni@87.116.182.181) (Quit: quit)
[19:37:04] *** Joins: random-nick (~random-ni@87.116.182.181)
[19:37:59] *** Joins: srhm (~ascii@user/srhm)
[19:41:52] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[19:46:05] *** Joins: selwyn (~selwyn@user/selwyn)
[19:48:51] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 276 seconds)
[19:49:04] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:00:18] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[20:00:33] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:20:27] *** Quits: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi) (Ping timeout: 250 seconds)
[20:23:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:38:06] *** Quits: lisp123_ (~lisp123@45.130.83.200) (Remote host closed the connection)
[20:38:41] *** Joins: lisp123 (~lisp123@45.130.83.200)
[20:43:02] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 245 seconds)
[20:44:22] *** Quits: Devon (~user@c-24-2-157-5.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[20:46:10] *** Joins: Devon (~user@c-24-2-157-5.hsd1.ma.comcast.net)
[21:17:21] *** Joins: lisp123 (~lisp123@45.130.83.200)
[21:29:04] *** Joins: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi)
[21:32:25] *** Quits: lisp123 (~lisp123@45.130.83.200) (Read error: Connection reset by peer)
[21:33:35] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[21:34:03] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[21:34:09] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:37:09] *** Quits: Devon (~user@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[21:43:45] *** Quits: NeoCron (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de) (Remote host closed the connection)
[21:48:53] *** Joins: lisp123 (~lisp123@45.130.83.200)
[21:50:30] *** Joins: Josh_2 (~user@37.25.47.130)
[21:50:51] <Josh_2> Hi hi hi
[21:50:59] <Josh_2> whats the best RSS feed parsing library?
[21:52:26] <Xach> etimmons: i don't see how that system file can be loaded. does asdf do something to suppress package-not-found or something?
[21:55:21] *** Joins: dsk (~dsk@user/dsk)
[22:06:38] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[22:06:42] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[22:06:59] *** Joins: minion (~minion@common-lisp.net)
[22:07:40] *** Joins: specbot (~specbot@common-lisp.net)
[22:21:16] *** Joins: tfb (~tfb@88.98.95.237)
[22:22:49] *** Quits: ggoes (~gregf@user/ggoes) (Quit: WeeChat 2.3)
[22:23:29] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[22:23:41] *** Joins: tfb (~tfb@88.98.95.237)
[22:23:46] *** Joins: ggoes (~gregf@user/ggoes)
[22:24:15] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Quit: WeeChat 3.0)
[22:24:44] *** Joins: hafat (~hafat@95.70.168.45)
[22:25:30] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[22:31:05] *** Joins: gaqwas (~john@dynamic-077-004-084-193.77.4.pool.telefonica.de)
[22:46:52] <etimmons> Xach: Huh, you're right (I haven't actually tried using clon in a while, I just remembered Didier mentioning that issue at ELS)
[22:47:28] <etimmons> ASDF does nothing with package-not-found, so sb-grovel must have been already loaded by the people that have gotten it to work
[22:49:54] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[22:50:07] *** Joins: tfb (~tfb@88.98.95.237)
[22:50:38] <tfb> Has anyone done anything with series in recent history?
[22:50:52] <tfb> (before I waste any time trying to revive it)
[22:51:08] <etimmons> xach: Anyways, the proper way of doing what he wants is to use `"sb-grovel:grovel-constants-file"` instead of `sb-grovel:grovel-constants-file`.
[22:51:45] *** Joins: AnimalClatter (~AnimalCla@208.66.176.26)
[22:56:02] <Xach> etimmons: thanks.
[22:56:22] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 272 seconds)
[22:56:34] <Xach> etimmons: i tried finding that info in the manual, but failed - is it in there? if so, can you tell me where?
[23:00:22] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[23:00:22] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[23:01:52] *** Quits: AnimalClatter (~AnimalCla@208.66.176.26) (Quit: WeeChat 3.2)
[23:05:57] *** Joins: specbot (~specbot@common-lisp.net)
[23:06:13] <etimmons> Xach: I can't find it either. And the commit that added that feature (50f2420f) didn't touch the manual
[23:06:31] *** Joins: minion (~minion@common-lisp.net)
[23:07:06] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[23:07:38] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:10:48] *** Joins: tfeb (~tfb@88.98.95.237)
[23:12:12] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[23:12:20] <etimmons> Xach: Did you figure out a path forward with the UIOP version mismatch at compile vs. load times?
[23:12:39] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[23:12:58] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:13:11] <gin> if I want to a push the values of variables a and b into an alist, it is going to be (push `(,a . ,b) alist), am I right? just checking if my coding style is alright.
[23:13:38] <Xach> etimmons: i updated the build asdf i use for now
[23:14:42] <Xach> gin: i don't find it that common to use backquote to construct conses like that, but preferences vary. I'd do (setf alist (acons a b alist)) or (push (cons a b) alist) instead.
[23:15:01] <moon-child> gin: or (push (cons a b) alist)
[23:17:19] <gin> moon-child: The Google CL guide I found online says, "For the Lisp efficiency point, given two options of equivalent complexity, pick the one that performs better. (This is often the same as the one that conses less, i.e. allocates less storage from the heap.)"
[23:17:54] <gin> moon-child: so I was avoiding (push (cons a b) alist) until now and going for (push `(,a . ,b) alist) but like Xach mentioned, I too did not find this coding style used by others.
[23:18:29] <gin> that is why I thought of coming to this channel and checking if I am doing the right thing by following the said style guide.
[23:18:34] <etimmons> Xach: Nice. I worry we're going to have users reporting a whole bunch of similar issues when the latest UIOP is actually released to QL, though.
[23:20:04] <lisp123> gin: my personal opinion (which is not much) is that you should use acons and not mutate the alist - given how powerful computers are, this very minor inefficiency is fine. UNLESS i guess you actually want to mutate it (there are many valid cases for that, but one should consider coding in a way without side effects wherever possible imo)
[23:20:15] <lisp123> at least that is what I've been taught from the various books on lisp
[23:20:56] <etimmons> Xach: This issue was randomly on my mind earlier today, so I opened <https://gitlab.common-lisp.net/asdf/asdf/-/issues/83>. Not sure if anything will come of it, but should be a lively issue thread at the very least.
[23:21:07] <gin> lisp123: my question isn't about acons vs. push. my question is about (cons a b) vs. `(,a . ,b)
[23:21:58] <gin> the Google style guide recommends avoiding cons whenever possible. but I never see the `(,a . ,b) coding style in practice. so that made me think if that style guide is followed in reality.
[23:22:24] <Bike> well for one thing `(,a . ,b) isn't actually any more efficient
[23:22:25] <lisp123> gin: oh I see. (cons a b) is easier for me to read, but others who write a lot of macros may prefer the latter approach
[23:22:27] <Bike> it will cons
[23:22:44] <Bike> on sbcl (macroexpand-1 '`(,a . ,b)) => (list* a b)
[23:23:27] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[23:23:41] <etimmons> Xach: I mentioned it in that issue, but I may open a separate issue about this particular local package nickname thing. There might be support for another quick release to mitigate the issue for packages that don't explicitly ask for package local nickname support.
[23:24:03] <gin> Bike: thanks! that helps a lot.
[23:28:53] <Bike> technically i guess an impl could use the information that modifying it is undefined behavior and do some kind of optimization there, but i doubt any of them do and the gain would be pretty marginal at best
[23:28:54] <gin> lisp123: by the way, why did you make the point about mutating the list? did you see any code example here in the chat that was mutating the list?
[23:32:33] <lisp123> gin: i thought push mtuates the original list
[23:32:45] <lisp123> maybe I'm mistaken
[23:33:06] <White_Flame> push mutates the variable binding that points to the list
[23:33:19] <White_Flame> tacking on a new cons cell to the head of hte list does not mutate the old list's cells
[23:33:23] <_death> gin: I think you misunderstood that style guide..
[23:33:52] <lisp123> white_flame: but it changes the _place_ right?
[23:33:57] *** Joins: Devon (~user@2601:184:4780:ee50::417)
[23:33:57] *** Devon is now known as Devon7
[23:34:01] <White_Flame> yes.  the place is not the list
[23:34:12] *** Devon7 is now known as Devon
[23:34:17] <White_Flame> it's a reference to the first cons cell of the list
[23:34:37] <White_Flame> (from its perspective. there might be multiple other cons cells that use that list as a shared tail to their list)
[23:35:13] <gin> lisp123: PUSH does not mutate the list. it only updates the place.
[23:35:26] <gin> lisp123: what do you get when you run this: (let* ((a (list (cons 'x 10))) (b a)) (push (cons 'y 20) a) (format t "a: ~a, b: ~a~%" a b))
[23:35:56] <White_Flame> so going from (2 3) to (1 2 3) or (1 . (2 3)), that (2 3) sublist is not mutated, and is used as the tail by the new (1 . <cdr>) cell which the place now uses as the first cell of its list
[23:36:21] *** Quits: hafat (~hafat@95.70.168.45) (Ping timeout: 276 seconds)
[23:37:19] <White_Flame> another place might still be pointing at the first cell of (2 3), and is completely unaware and unmutated when that other place now tacks on the (1 . ###)
[23:37:32] <gin> _death: I think so too that I have misunderstood the style guide. would you please explain what the style guide really meant here?
[23:38:00] <White_Flame> (1 . cdr), (2 . cdr), and (3 . nil) are 3 different objects on the heap that point to its respective 'next' list cell
[23:38:45] <_death> gin: assuming you mean https://google.github.io/styleguide/lispguide.xml?showone=Priorities#Priorities the wording there is not as decisive as "avoiding cons whenver possible".. there are ample qualifications, and note that efficiency is last on the priority order.. I don't particular like this style guide, and think the parenthetical remark should've been dropped
[23:39:26] <gin> _death: yes that's the one
[23:39:55] <gin> _death: is there another style guide that you or others here like?
[23:40:33] <_death> there is http://www.norvig.com/luv-slides.pdf which is very good
[23:41:03] <gin> _death: thanks
[23:42:39] <lisp123> gin: I meant in this terms https://pastebin.com/DJqnpZUf
[23:43:07] <lisp123> But I guess your understanding already is quite advanced, so you can disregard
[23:43:15] <_death> gin: from what I heard in a recent talk (probably not recorded?) google's Lisp code is basically "C with parentheses" at this point so I don't think you should take its style guide as exemplary
[23:44:13] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:45:25] <Devon> gin: ITASoftware aka Google has very specialized needs, they can afford to spend extra work to gain performance.
[23:45:50] <_death> gin: this may be due to the constraints of their system.. you can read something written 20 years ago about it here: http://www.paulgraham.com/carl.html
[23:46:20] *** Joins: tfeb (~tfb@88.98.95.237)
[23:46:21] <White_Flame> pretty sure that naughty dog's GOAL was also mostly C-in-Lisp, but it makes sense there for performance gaming
[23:46:36] <White_Flame> but combined it with runtime recompilation
[23:46:54] <lisp123> Interesting, thats a very unique way to use lisp
[23:47:06] *** Parts: tfeb (~tfb@88.98.95.237) ()
[23:47:17] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[23:47:32] <lisp123> Would it be possible to convert 'usual lisp style' into 'c in lisp' style via macros?
[23:47:45] <lisp123> i.e. get more efficient code but not sacrifice expressivity
[23:47:57] *** Joins: tfb_ (~tfb@88.98.95.237)
[23:47:59] <White_Flame> it's a different style, not necessarily a mechanical transformatino
[23:48:27] *** tfb_ is now known as tfeb
[23:48:48] <White_Flame> it's like people asking if you can just compile JS to webasm, if you're in that space
[23:48:55] <White_Flame> to try to make code faster
[23:49:37] <lisp123> but is JS and webasm 1:1?
[23:49:50] <White_Flame> no
[23:50:06] <White_Flame> neither is manual memory management and lower level access style
[23:50:11] <White_Flame> vs higher level lisp
[23:50:34] <lisp123> I guess it would be very difficult :D
[23:50:51] <lisp123> Theoretically might be possible though?
[23:51:05] <pl> lisp123: there's a profile of webassembly that maps 1:1 with JS, which is common compilation target, but that's because Chrome's V8 has (had?) broken webassembly support
[23:51:53] <White_Flame> you mean asm.js?  that was something different
[23:51:54] <pl> White_Flame: GOAL was afaik a stripped down mix of CL and Scheme with liberal access to assembly
[23:52:09] <lisp123> pl: oh i see. Chrome is always a bad actor. The IE6 of 2021
[23:52:31] <pl> White_Flame: no, webassembly. Because for considerable time, Chrome would compile webassembly to JS because it was incapable of JITing it otherwise
[23:52:42] <White_Flame> ah, heh
[23:52:43] <pl> (well, into JS-based IR)
[23:53:12] <pl> the specific issue was that the JS roots of the V8 IR format meant there was no support for any sort of jump
[23:53:24] <pl> only branches and loops
[23:53:31] <pl> but no goto
[23:54:02] <White_Flame> makes sense
[23:55:00] <pl> GOAL btw had "normal" GC, somewhat
[23:55:22] <pl> you had two arenas for allocation, a global one and level-scoped one
[23:55:31] <pl> both had simple bump allocator
[23:55:57] <pl> the level scoped one was dropped whenever you loaded a level
[23:58:51] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[23:58:51] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[23:59:13] <White_Flame> "regions" in lispm speak?
[23:59:38] *** Joins: minion (~minion@common-lisp.net)
