[00:05:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[00:09:40] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 250 seconds)
[00:15:34] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:21:26] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[00:54:12] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 272 seconds)
[00:58:19] *** Quits: uncleyear (~ian@pppoe.178-66-156-85.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[00:59:48] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[01:00:16] *** Joins: uncleyear (~ian@pppoe.178-66-156-85.dynamic.avangarddsl.ru)
[01:07:21] *** Parts: servytor1 (~kseitz@h104.118.128.40.static.ip.windstream.net) ()
[01:12:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:14:26] *** Quits: uncleyear (~ian@pppoe.178-66-156-85.dynamic.avangarddsl.ru) (Ping timeout: 260 seconds)
[01:17:34] *** Quits: jespada (~jespada@185.69.145.16) (Read error: Connection reset by peer)
[01:19:21] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:27:41] *** Joins: jespada (~jespada@185.69.145.16)
[01:46:57] *** Quits: remyrd (~remy@217.30.64.206) (Ping timeout: 240 seconds)
[01:47:55] *** Quits: jespada (~jespada@185.69.145.16) (Read error: Connection reset by peer)
[01:49:22] *** Quits: kipz (~kipz@2a02:8010:6876:0:dde6:1226:fc1c:f09e) (Remote host closed the connection)
[01:52:29] *** Joins: mange (~user@n114-78-12-98.bla3.nsw.optusnet.com.au)
[01:52:29] *** Quits: mange (~user@n114-78-12-98.bla3.nsw.optusnet.com.au) (Changing host)
[01:52:29] *** Joins: mange (~user@user/mange)
[02:18:07] *** Joins: yarmo4 (~yarmo@keyoxide/dev/yarmo)
[02:18:25] *** Joins: kawpuh6 (~kawpuh@66.42.81.80)
[02:18:40] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[02:19:05] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (Ping timeout: 256 seconds)
[02:19:25] *** Joins: sailorCat (~sailorCat@mail2.gajsin.name)
[02:19:26] *** Joins: flynn8 (~mcbloch@user/flynn)
[02:19:28] *** Joins: ltriant_ (~ltriant@118.102.122.246)
[02:19:44] *** Joins: dharrigan_ (~dharrigan@user/dharrigan)
[02:20:13] *** Quits: dharrigan (~dharrigan@user/dharrigan) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: yarmo (~yarmo@keyoxide/dev/yarmo) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: aphyr (~kyle@aphyr.com) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: Para (~Para@95.216.176.167) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: TMA (~tma@twin.jikos.cz) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: lobotomy (~lobotomy@static.213.19.216.95.clients.your-server.de) (Ping timeout: 256 seconds)
[02:20:14] *** yarmo4 is now known as yarmo
[02:20:17] *** dharrigan_ is now known as dharrigan
[02:20:47] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: sailorTheCat (~sailorCat@mail2.gajsin.name) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 256 seconds)
[02:20:47] *** Joins: materialfuture_ (~materialf@149.248.8.187)
[02:20:47] *** Quits: materialfuture (~materialf@149.248.8.187) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: kawpuh (~kawpuh@66.42.81.80) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 256 seconds)
[02:20:51] *** flynn8 is now known as flynn
[02:21:22] *** kawpuh6 is now known as kawpuh
[02:21:38] *** Joins: aphyr (~kyle@aphyr.com)
[02:21:46] *** Joins: TMA (tma@twin.jikos.cz)
[02:21:52] *** Joins: Para (~Para@95.216.176.167)
[02:21:59] *** Joins: lobotomy (~lobotomy@static.213.19.216.95.clients.your-server.de)
[02:22:26] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[02:22:34] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[02:50:25] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[03:09:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[03:09:36] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[03:20:33] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[03:38:02] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[04:10:12] *** Quits: ridcully_ (~ridcully@p508ace91.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:11:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[04:11:32] *** Quits: andreyorst (~andreyors@broadband-90-154-71-13.ip.moscow.rt.ru) (Ping timeout: 240 seconds)
[04:11:57] *** Joins: andreyorst (~andreyors@broadband-90-154-71-13.ip.moscow.rt.ru)
[04:33:37] *** Joins: ridcully_ (~ridcully@pd951f433.dip0.t-ipconnect.de)
[05:10:11] *** Joins: Techcable (~Techcable@168.235.93.147)
[05:10:24] *** Quits: henry40408 (~henry4040@175.182.112.153) (Quit: The Lounge - https://thelounge.chat)
[05:10:56] *** Joins: henry40408 (~henry4040@175.182.112.153)
[05:17:30] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[05:34:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 240 seconds)
[05:55:54] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[06:11:04] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[06:11:53] *** Quits: ltriant_ (~ltriant@118.102.122.246) (Ping timeout: 252 seconds)
[06:12:39] *** Joins: justAstache (~justache@user/justache)
[06:14:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 240 seconds)
[06:28:18] *** Joins: irontom (~user@38.81.106.9)
[06:34:12] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 240 seconds)
[06:42:42] *** Quits: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net) (Remote host closed the connection)
[06:42:54] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[06:46:35] *** Quits: yauhsien (~Yau-Hsien@61-231-37-5.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[06:47:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 240 seconds)
[06:50:00] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[06:50:00] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[06:50:00] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[06:59:57] *** Joins: mbuf (~Shakthi@223.190.219.126)
[07:16:58] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[07:21:57] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[07:23:15] *** Parts: TimMc (~timmc@user/timmc) ()
[07:32:19] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:33:12] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:36:45] *** Joins: ltriant (~ltriant@118.102.122.246)
[07:51:04] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[07:54:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[07:55:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 240 seconds)
[07:58:21] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:15:06] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[08:19:26] *** Quits: irontom (~user@38.81.106.9) (Ping timeout: 272 seconds)
[08:30:28] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[08:30:46] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[08:39:56] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[08:44:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[08:53:43] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[08:54:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[09:00:47] *** Joins: yauhsien (~Yau-Hsien@61-231-37-5.dynamic-ip.hinet.net)
[09:05:09] *** Joins: irontom (~user@38.81.106.9)
[09:16:02] *** Quits: irontom (~user@38.81.106.9) (Ping timeout: 260 seconds)
[09:36:42] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 272 seconds)
[09:58:55] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:59:15] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:06:17] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[10:06:17] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[10:06:28] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[10:06:32] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[10:10:11] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[10:32:47] *** Quits: mange (~user@user/mange) (Remote host closed the connection)
[10:35:20] *** Joins: struchu (~struchu@staticline-31-183-186-132.toya.net.pl)
[10:35:55] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[10:36:12] *** Joins: shiranaihito (~textual@219.85.159.146)
[10:38:28] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:42:46] *** Joins: puchka (~marius@165.73.240.254)
[10:53:27] *** Quits: Tolstoy (~textual@71-36-117-11.ptld.qwest.net) (Quit: My iMac has gone to sleep. ZZZzzz…)
[10:54:07] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[10:57:45] *** Joins: silasfox (~sbv@p200300cec7151c00ec0a6482fa84d04f.dip0.t-ipconnect.de)
[10:58:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[11:13:36] *** Quits: samuelbernardo (~samuelber@nata02.lip.pt) (Ping timeout: 272 seconds)
[11:13:43] *** Quits: Ragnor (~Ragnor@user/ragnor) (Quit: leaving)
[11:13:58] *** Joins: Ragnor (~Ragnor@user/ragnor)
[11:15:55] *** Joins: MajorBiscuit (~MajorBisc@c-001-019-045.client.tudelft.eduvpn.nl)
[11:20:44] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[11:28:52] *** Quits: shiranaihito (~textual@219.85.159.146) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:38:39] *** Quits: puchka (~marius@165.73.240.254) (Ping timeout: 256 seconds)
[11:40:22] *** Joins: puchka (~marius@165.73.240.253)
[11:42:17] *** Joins: shiranaihito (~textual@2001-b011-4011-3c80-191f-b869-8b3f-22db.dynamic-ip6.hinet.net)
[11:43:47] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[11:48:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 240 seconds)
[11:56:03] *** Quits: kristianpaul (~paul@user/kristianpaul) (Ping timeout: 272 seconds)
[12:30:06] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: You have been kicked for being idle)
[12:51:08] *** Joins: jespada (~jespada@185.69.145.16)
[12:54:39] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[13:05:49] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:c43:c097:cf3e:e138)
[13:08:52] *** Quits: Oshawott (~archenoth@S0106889e6827f474.cg.shawcable.net) (Ping timeout: 272 seconds)
[13:11:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 240 seconds)
[13:14:51] *** Joins: kipz (~kipz@2a02:8010:6876:0:6060:ced1:dd03:9982)
[13:16:14] *** Quits: jespada (~jespada@185.69.145.16) (Read error: Connection reset by peer)
[13:16:18] *** Quits: struchu (~struchu@staticline-31-183-186-132.toya.net.pl) (Quit: WeeChat 3.3)
[13:17:42] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[13:18:16] *** Joins: jespada (~jespada@85.255.234.170)
[13:21:38] *** Joins: jespada_ (~jespada@85.255.234.170)
[13:22:36] *** Quits: jespada (~jespada@85.255.234.170) (Ping timeout: 240 seconds)
[13:38:04] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[13:42:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 240 seconds)
[14:21:14] *** Joins: ltriant (~ltriant@203.63.103.126)
[14:25:40] *** Joins: remyrd (~remy@217.30.64.206)
[14:41:37] *** Quits: remyrd (~remy@217.30.64.206) (Ping timeout: 240 seconds)
[14:41:58] *** Joins: struchu (~struchu@staticline-31-183-186-132.toya.net.pl)
[14:47:00] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 240 seconds)
[15:52:16] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 272 seconds)
[15:53:57] *** Joins: ltriant (~ltriant@203.63.103.126)
[15:54:36] *** Quits: puchka (~marius@165.73.240.253) (Ping timeout: 240 seconds)
[15:54:41] *** Joins: v88m (~Xiro@213.87.154.117)
[15:54:41] *** bcmiller_ is now known as bcmiller
[15:56:59] *** Joins: puchka (~marius@165.73.240.253)
[15:59:19] *** Quits: v88m (~Xiro@213.87.154.117) (Ping timeout: 256 seconds)
[15:59:39] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 256 seconds)
[16:01:00] *** Quits: silasfox (~sbv@p200300cec7151c00ec0a6482fa84d04f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:01:17] *** Joins: silasfox (~sbv@p548d1148.dip0.t-ipconnect.de)
[16:09:21] *** Joins: v88m (~Xiro@213.87.129.34)
[16:14:22] *** Joins: yewscion (~yewscion@52.94.133.130)
[16:30:17] *** Quits: v88m (~Xiro@213.87.129.34) (Ping timeout: 240 seconds)
[16:54:03] *** Joins: kristianpaul (~paul@user/kristianpaul)
[17:13:05] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[17:15:20] *** Joins: uncleyear (~ian@pppoe.178-66-156-85.dynamic.avangarddsl.ru)
[17:19:18] *** Joins: ltriant (~ltriant@203.63.103.126)
[17:25:27] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 256 seconds)
[17:31:01] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 240 seconds)
[17:47:24] *** Quits: puchka (~marius@165.73.240.253) (Quit: leaving)
[17:54:14] *** Quits: justAstache (~justache@user/justache) (Remote host closed the connection)
[17:55:48] *** Joins: justAstache (~justache@user/justache)
[18:00:31] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[18:05:14] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 252 seconds)
[18:06:25] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[18:06:44] *** Joins: ltriant (~ltriant@203.63.103.126)
[18:11:17] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 240 seconds)
[18:17:25] <Frozenlock> Continuing my metadata rant. EVERYTHING should be able to have metadata. And everything should support `with-meta`, instead of some particular objects only supporting `alter-meta!`.
[18:19:11] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Remote host closed the connection)
[18:27:16] <andreyorst> even numbers?
[18:34:59] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[18:35:00] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 240 seconds)
[18:36:10] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[18:37:36] <aphyr> I imagine the costs would be 64 bytes of overhead per object--or a metadata wrapper on every object that uses metadata, and a branch for basically every access :/
[18:38:19] *** Joins: ltriant (~ltriant@203.63.103.126)
[18:38:19] <aphyr> *bits, pardon me :D
[18:39:19] <Frozenlock> META ALL THE THINGS
[18:39:31] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 245 seconds)
[18:40:22] <Frozenlock> Keywords, numbers, etc.
[18:40:26] <aphyr> oh god
[18:40:45] <aphyr> I mean look there might be good ergonomic reasons but, like... think about how JVM dispatch works
[18:41:16] <Frozenlock> Consistency is more important than silly things like "speed" and "efficiency"
[18:41:33] <aphyr> You put meta on everything, that means meta on nil and Long--those are closed classes and we can't rewrite their memory layout
[18:41:43] <aphyr> So that puts you into wrapper territory, which means losing invokevirtual
[18:41:50] <aphyr> invokeinterface...
[18:42:05] <Frozenlock> That sounds like an implementation detail. Which means not my problem ;-)
[18:42:09] <aphyr> You could try to have those wrappers implement Literally Every Single Common Interface by proxy, but...
[18:42:48] <Frozenlock> Otherwise how am I going to extend-via-metadata on a number?
[18:43:05] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 256 seconds)
[18:43:56] <andreyorst> I mean, I'd like to have metatables for every type in Lua, because metatables can alter object's behaviour, but what's the benefit of having metadata on a number, only for some additional info?
[18:50:16] <ToxicFrog> Lua squares that circle by making metadata on most types per-type, rather than per-value.
[18:50:28] <ToxicFrog> The metatable on numbers applies to all numbers everywhere.
[18:50:45] <Frozenlock> Ugh
[18:50:56] <aphyr> I wonder if you could get around it by moving metadata to a separate weak hashmap
[18:51:02] <ToxicFrog> (I think this is at least partially a performance optimization, and it's also something you aren't meant to do -- it's tucked away inside the debugging API)
[18:51:12] <aphyr> under the idea that metadata access is rare and slow
[18:51:53] <aphyr> That doesn't let you have two copies of the same object with identical values and diff metadata though
[18:51:55] <ToxicFrog> That does leave you with the result that if you set the metadata on `1`, you have set it on every `1` in the program
[18:52:16] <andreyorst> ToxicFrog: yeah, AFAIK tables are the only type that have distict metatables
[18:52:16] <aphyr> but you could key the hashmap by *reference* rather than value
[18:52:21] <ToxicFrog> andreyorst: tables and userdata.
[18:52:29] <andreyorst> is it?
[18:52:52] <andreyorst> I've thought that userdata has shared metatable between all examples of userdata
[18:52:59] <ToxicFrog> andreyorst: fulluserdata specifically, IIRC lightuserdata has one per-type metatable
[18:53:10] <andreyorst> ah, ok
[18:53:23] <ToxicFrog> But fulluserdata has per-object metatables -- if it didn't, using it for interoperation with C/++ code would be a huge pain
[18:53:48] <ToxicFrog> Since the metatable is how you wire up all the stuff that lets lua code pretend a userdata object is actually a table or whatever.
[18:55:59] <andreyorst> yeah, I rarelu use it so I forgot.
[18:56:16] <andreyorst> well, strings are interned, so it's natural for them to share a single metatable
[18:57:35] <andreyorst> I've only mentioned Lua because thinking of their metatable restructuion helped me justify clojure's metadata restrictions
[19:01:33] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[19:04:23] *** Quits: shiranaihito (~textual@2001-b011-4011-3c80-191f-b869-8b3f-22db.dynamic-ip6.hinet.net) (Ping timeout: 256 seconds)
[19:05:15] *** Joins: v88m (~Xiro@213.87.128.114)
[19:08:14] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[19:09:53] *** Joins: ltriant (~ltriant@203.63.103.126)
[19:12:22] <seebs> i don't think metadata in lua is *exactly* per-type rather than per-value, it's more that convention is to make a metatable that fits a given type, and then assign the *same* metatable to all the things to make them feel like that type.
[19:12:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 240 seconds)
[19:12:44] <seebs> i believe you *can* just do literal tables for each thing, and just happen to have them all be identical, and get the same result.
[19:13:21] <seebs> but i could also just be completely wrong. also i vaguely thought only tables/userdata had metatables, not primitive objects? but i haven't done this in depth in a loooong time.
[19:13:33] <ToxicFrog> seebs: this is incorrect. For every type except tables and fulluserdata, metatables are per-type, and `debug.setmetatable()` on one instance of that type sets it for all instances.
[19:14:06] <seebs> ... ohh. i think maybe i'm just thinking about the case i'm used to, and didn't realize you actually *could* set metatables on the other things.
[19:14:16] <ToxicFrog> For tables and fulluserdata it is as you describe: each object has its own metatable, and it is common to assign the same metatable to every object of a given notional type.
[19:14:32] <andreyorst> yeah, strings for instance share metadata with all common methods like gsub
[19:14:39] <seebs> oh neat. so you can set a metatable on Strings?
[19:14:46] <andreyorst> not directly
[19:14:46] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 260 seconds)
[19:14:58] <ToxicFrog> (and in fact there is C-side library support for doing runtime type checking by checking what metatable a fulluserdata has, on the assumption that "which metatable" and "which type" are equivalent questions)
[19:15:20] <ToxicFrog> seebs: yes, and in fact that's how constructs like `str:gsub(foo, bar)` work (as opposed to having to write `string.gsub(str, foo, bar)`
[19:15:33] <ToxicFrog> There's a type-wide metatable on strings that points `__index` at the `string` library.
[19:15:56] <ToxicFrog> You can examine this in the repl with `getmetatable('')`
[19:16:06] <andreyorst> seebs: you can like this: local string-mt = getmetatable("foo") string-mt.__call=function().... end
[19:16:26] <andreyorst> and now you can call strings as functions
[19:16:27] <ToxicFrog> And even edit that metatable in-place to make, e.g., `__call` on strings an alias for the substring function
[19:18:29] <andreyorst> Fennel (clojure-like syntax for Lua) has :foo as a shorthand for "foo", and I once added a call method for fun to make it work as in Clojure, so it would lookup itself in a passed table :D
[19:24:05] <seebs> wait how does the metatable have anything to do with :
[19:24:27] <seebs> x:fn( is just syntactic sugar for x.fn(x
[19:24:45] <seebs> ... i thought
[19:24:56] <andreyorst> no no, it's fennel specific syntax
[19:25:22] <seebs> oh, i meant in lua, not in fennel.
[19:25:57] <andreyorst> metatable has nothing to do with : in Lua
[19:28:17] *** Quits: v88m (~Xiro@213.87.128.114) (Ping timeout: 240 seconds)
[19:29:06] *** Joins: v88m (~Xiro@213.87.159.21)
[19:34:48] <ToxicFrog> seebs: if you were asking about `str:gsub` et al, it works like this:
[19:34:50] <ToxicFrog> - `str:gsub(...)` expands into `str['gsub'](str, ...)`
[19:34:53] <ToxicFrog> - string types aren't indexable, so it goes to the metatable
[19:34:55] <ToxicFrog> - metatable's __index points to the builtin string library
[19:34:56] <ToxicFrog> - indexing operation there returns the `string.gsub` function
[19:34:59] <ToxicFrog> - `string.gsub(str, ...)` is evaluated
[19:34:59] <seebs> right
[19:35:10] <seebs> > yes, and in fact that's how constructs like `str:gsub(foo, bar)` work (as opposed to having to write `string.gsub(str, foo, bar)`
[19:35:17] <seebs> ohh
[19:35:26] <seebs> i'm not awake and read that as "str.gsub(str"
[19:35:31] <seebs> so i was just seeing the syntactic sugar
[19:36:04] <ToxicFrog> possibly I should have picked a different name for that variable than `str` to avoid this confusion
[19:38:23] *** Quits: v88m (~Xiro@213.87.159.21) (Ping timeout: 256 seconds)
[19:38:43] *** Joins: v88m (~Xiro@213.87.159.21)
[19:41:14] <andreyorst> well you can do ("foo"):gsub(...)
[19:41:29] *** Joins: ltriant (~ltriant@203.63.103.126)
[19:44:13] <ToxicFrog> Yeah, that would probably have been celarer.
[19:44:15] <ToxicFrog> *clearer
[19:46:13] *** Quits: ltriant (~ltriant@203.63.103.126) (Ping timeout: 240 seconds)
[19:47:58] *** Quits: struchu (~struchu@staticline-31-183-186-132.toya.net.pl) (Quit: WeeChat 3.3)
[20:22:33] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[20:22:55] <tatsumaru> hey guys, if I write a chatbot that is talking to multiple people at once, can that be considered concurrency?
[20:23:44] <tatsumaru> when I say multiple people, I mean multiple instances, not one large group
[20:24:32] <technomancy> tatsumaru: "concurrency" is kind of an overloaded term. to some people it means multiple things going on at the same time and to other people it just means multitasking
[20:25:35] <logiz> what's the proper definition? I feel like I knew it once
[20:25:48] <tatsumaru> technomancy: aren't those two things the same?
[20:25:52] <technomancy> haha, the idea that there is a "proper" definition is somewhat problematic
[20:25:58] <logiz> :P
[20:26:19] <technomancy> tatsumaru: no, multitasking can mean that one thing is happening and the other thing is paused, like the cooperative multitasking of mac system 9
[20:28:33] <ToxicFrog> Things that I have all seen declared to be "concurrency" at various times:
[20:28:36] <ToxicFrog> - the program has multiple tasks in various states of completion at once, but is only ever working on one of them at a time and has a single call stack
[20:28:37] <ToxicFrog> - the program is only ever executing on one core at a time, but has multiple call stacks (i.e. coroutines) working on different things or, sometimes, on different aspects of the same thing
[20:28:39] <ToxicFrog> - the program has multiple simultaneous threads of execution which may be working on different tasks or, again, on different parts of a single larger task
[20:28:42] <ToxicFrog> and about the only common feature there is "there's multiple things happening 'at once', where 'at once' can refer to either conceptual organization or machine code execution or both, or sometimes neither"
[20:29:14] *** Joins: Tolstoy (~textual@71-36-117-11.ptld.qwest.net)
[20:29:29] <tatsumaru> which of those cases benefits from immutability?
[20:29:44] <technomancy> ToxicFrog: IMO the broadest definition is not that useful because it's good to have a term for "no actually two things are happening actually at the same time" but I feel like it's a lost cause at this point
[20:29:54] <technomancy> I avoid the term just like I avoid "OOP"
[20:30:35] <technomancy> tatsumaru: all of them, but the third is the one have to be at least a bit mad to do without immutability
[20:31:36] <tatsumaru> I see, thanks
[20:31:47] <Para> "Concurrency is the task of running and managing the multiple computations at the same time. While parallelism is the task of running multiple computations simultaneously."
[20:32:29] <technomancy> Para: that doesn't help! =P
[20:32:29] <ToxicFrog> Para: now you get the arguments about what the distinction, if any, between "the same time" and "simultaneously" is :D
[20:32:37] <technomancy> now you're just arguing about a different term
[20:32:50] <Para> technomancy: you have no idea how hard that sentence is to parse as non-native :D
[20:33:03] <technomancy> haha
[20:33:07] <ToxicFrog> And yeah, I've reluctantly come to the same conclusion as technomancy -- I don't use "concurrency" or "parallelism" anymore except in scopes where a specific definition has already been agreed upon, everywhere else I just fully expand what I mean by it
[20:33:43] *** Joins: remyrd (~remy@217.30.64.206)
[20:33:48] <technomancy> I think "multitasking" is a really good, unambiguous term for what golangers call concurrency; I have no idea why they felt the need to steal another word and redefine it when we already had a perfectly good one, but whatever.
[20:34:23] <technomancy> golangers do a lot of things I don't understand
[20:36:13] <Para> +1 on multitasking
[20:37:19] *** Quits: v88m (~Xiro@213.87.159.21) (Ping timeout: 256 seconds)
[20:39:13] <Para> and conceptually what matters most IMHO if you just want to do things as fast as possible or if there's some fork/join logic involved
[20:42:33] <technomancy> tatsumaru: anyway I don't think there's anything wrong with a chatbot that runs all on one thread, but if you have some responses which take a long time to compute it's probably smart to hand those off to another thread. but it doesn't need to be the default; you can do it on a case-by-case basis.
[20:42:52] <technomancy> it's easier if you have coroutines which unfortunately clojure doesn't
[20:45:00] *** Quits: henry40408 (~henry4040@175.182.112.153) (Ping timeout: 240 seconds)
[20:45:51] <tatsumaru> technomancy: what do co-routines do?
[20:46:11] <technomancy> oh god, uh.
[20:46:18] <technomancy> it's not THAT complicated but it's hard to explain
[20:46:36] *** Joins: seschwar (~seschwar@user/seschwar)
[20:46:40] <technomancy> it's like a function you can pause and resume again later from exactly where you left off, but you control the pausing and resuming
[20:50:12] <sobel> generally i found the explanation of "communicating sequential processes" to explain the existence of co-routines pretty well
[20:51:53] <sobel> (CSP are subject to strong reasoning)
[20:52:04] <technomancy> it's one of those things that's just intuitive if you try it, but if you haven't it just seems like gibberish
[20:52:14] <technomancy> like monads but less so
[20:52:29] <technomancy> but maybe I'm just bad at explaining. definitely not as good as tony hoare =)
[20:52:45] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[20:56:15] *** Quits: remyrd (~remy@217.30.64.206) (Ping timeout: 256 seconds)
[20:57:26] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 245 seconds)
[21:01:18] <sobel> famous coroutine based architectures include nginx
[21:01:35] <sobel> (and are a nutritious part of this balanced breakfast)
[21:02:11] <tatsumaru> is this like continuations?
[21:02:49] <sobel> i mean...they belong in the same big book of concurrent techniques you'll ever see in the wild
[21:03:14] <sobel> but they are not the same as continuations. same neighborhood though.
[21:05:15] *** Joins: yauhsien_ (~Yau-Hsien@61-231-37-5.dynamic-ip.hinet.net)
[21:07:11] <sobel> i try to derive these concurrent understandings from a single-threaded approach, more or less like reasoning out a tricky transaction in serialized mode. a coroutine only needs to run when it has i/o, and then it get priority. and that lets my app use async channels for internal communication.
[21:07:27] <sobel> (that's one example, not every use case)
[21:08:56] *** Quits: yauhsien (~Yau-Hsien@61-231-37-5.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[21:09:59] <tatsumaru> I see
[21:10:01] <tatsumaru> thanks
[21:11:59] *** Quits: sailorCat (~sailorCat@mail2.gajsin.name) (Quit: ZNC 1.8.2 - https://znc.in)
[21:19:39] <technomancy> I think coroutines are one of the many things you can build using continuations
[21:19:54] <technomancy> continuations are much more powerful and harder to use due to their generality
[21:21:33] <ToxicFrog> I was first exposed to coroutines via the description in the Lua Reference Manual, and found that pretty intuitive, but YMMV
[21:22:43] <Para> BTW, with Project Loom eventually coming to JVM "Virtual threads allow thread locals but, by default, disallow thread local inheritance."
[21:22:46] <tatsumaru> technomancy does fennel have continuations?
[21:22:54] <Para> I can't wait all the breakage that will cause.
[21:22:58] <technomancy> tatsumaru: no, just coroutines
[21:23:12] <sobel> ToxicFrog: me too, sorta. OpenRESTy provides for Lua implementation of nginx coroutines and it seemed like a rather natural fit.
[21:24:41] <sobel> i'm told (elsewhere) that Loom is going to solve all my problems and butter my bread for me
[21:26:27] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[21:27:02] <Para> Well, if your problem is below 100% cpu load...
[21:28:11] <Para> It'll be interesting none the less, but I foresee a lot of things which have worked for better part of a decade pooping themselves until patches roll in :)
[21:28:52] <sobel> surely everyone will lean on their full-coverage test suites to build out some TDD ahead of that implementation
[21:28:55] <sobel> SHIRLEY
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:25] <Para> And there's regression suites and spike/sanity test suites as well.
[21:30:41] <Para> Nothing but tests of all variety all around.
[21:30:50] <sobel> i think my take-away from the past month or two is that i need to write a post or series of posts on reactive clojure. i got just far enough into Vert.x that i needed a reactive stream implementation, and started to get real sad i couldn't just conjure a lazy-seq in java.
[21:30:54] *** Joins: ns12 (~ns12@user/ns12)
[21:30:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 240 seconds)
[21:31:36] <sobel> and then the usual set of internal why-didn't-you-use-clojure threads wake up to pummel me
[21:31:54] <Para> SEO, you mean?
[21:32:20] <Para> You of course have to then reconcile by making your own niche language and announce it as a reply.
[21:32:54] <sobel> true story
[21:33:21] <tatsumaru> what is SEO
[21:34:28] <Para> Search Engine Optimization. Not that many calls it that anymore since the term got a bad rep. Then they started calling it growth hacking.
[21:34:39] <Para> Basically doing anything to drive traffic to your website counts as SEO.
[21:34:54] <sobel> after discussion some ins&outs of reactive designs and languages with other Vert.x users i posed this one: let's say you imagine a language, DSL or general-purpose, that is organized around async, lock-free data structures, and reactive-design friendly. what's that look like to you?
[21:35:32] *** Quits: yewscion (~yewscion@52.94.133.130) (Ping timeout: 272 seconds)
[21:35:51] <sobel> Para: SEO is the actual answer, i thought i would hire a POJ dev to support it
[21:36:41] <sobel> it's insidiousy easy to go along with the concept of scaling-by-noobs when you don't proactively replace that plan with a real one
[21:37:01] <sobel> insidiously
[21:37:13] <tatsumaru> Para: I am an SEO guy, I asked because I thought SEO was some CS-specific acronym and got curious
[21:37:54] <Para> I wouldn't dare to claim I know anything about the academic computer science. I do have a BBA in ICT but eh...
[21:38:15] <sobel> I also identify as a blue-collar developer
[21:40:08] <sobel> tatsumaru: when i was barely dabbling at Clojure, this talk inspired me a lot. https://www.youtube.com/watch?v=ShEez0JkOFw
[21:40:31] <sobel> I grew up around a wood shop, so it's especially applicable to me
[21:44:33] <tatsumaru> Lol!
[21:45:47] <sobel> go watch it and then decide if the "hand tools" principles are a lol or a wow ;)
[21:46:18] <tatsumaru> That was a respectful lol FYI
[21:46:29] <Para> That's a very good talk IMO
[21:46:40] <sobel> as i'm sorta...a dunno, stuck somewhere between sr. dev and CTO, i have to strike a TON of 80/20 rules, and the hand tools principles have been a *real* gift toward that effort
[21:47:10] <sobel> tatsumaru: understood. that's one of my best recommendations i can give around here!
[21:48:24] <Para> There's one philosophical/anthropological question I like that this hand tool talk reminds me of; Why are homes and all major features in them square?
[21:48:45] <Para> (I don't remember if this is mentioned in that video, might be)
[21:48:56] <sobel> i don't seem to recall that thread in the hand tools video
[21:49:37] <sobel> i have enjoyed numerous videos on alt. construction, especially aircrete and bamboo. if you find the one on rectangularity i'm curious.
[21:49:46] *** Joins: sailorCat (~sailorCat@mail2.gajsin.name)
[21:49:53] <sobel> oh, er i guess that wasn't a specific video
[21:50:17] <Para> Being anthropology, it might be total bs but the idea is that once we mastered some primitive tools, someone came up with a string with a weight tied to one end of it. Hang it, get a straight line. Measure, cut, take the two cuts, fill in gaps, get a rectangle. Four cuts, square.
[21:50:26] <Para> And then just iterate the everliving hell out of it.
[21:51:44] <Para> Don't quite remember the source for this idea, but it's stuck with me.
[21:51:55] <sobel> i've wondered whether it was due to an effect like that, or if the sheer intuitiveness of right angles could explain it
[21:52:46] <Para> It's a sort of bootstrapping exercise as well.
[21:52:54] <sobel> like, someone had to explain arc strength to me, but it was quick because i was onto the hidden variables of tensile strength early
[21:57:38] <seebs> i think the other reason things tend to be square is that square things always go together well
[21:57:51] <seebs> like, they don't end up with weird gaps
[21:58:35] <Para> Yeah.
[21:58:44] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[21:58:53] <Para> Tiling is definitely important. Especially in three dimensions.
[22:01:01] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[22:03:17] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[22:03:52] *** Joins: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[22:06:07] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[22:07:48] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 240 seconds)
[22:11:53] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[22:17:34] *** Quits: mbuf (~Shakthi@223.190.219.126) (Remote host closed the connection)
[22:22:39] *** Quits: silasfox (~sbv@p548d1148.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[22:32:28] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[22:37:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 240 seconds)
[22:45:16] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[22:49:09] *** Joins: puchka (~marius@165.73.240.150)
[22:50:29] *** Joins: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl)
[22:55:20] *** Quits: piotrts (~piotrts@188.147.99.42.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 272 seconds)
[22:55:35] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Quit: Leaving.)
[23:12:55] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[23:15:27] *** Joins: yewscion (~yewscion@52.94.133.130)
[23:24:57] *** Joins: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e)
[23:27:02] *** Quits: puchka (~marius@165.73.240.150) (Quit: leaving)
[23:40:13] *** Quits: Null_A (~null_a@2601:645:8700:2290:3c1e:11a0:debc:333e) (Ping timeout: 240 seconds)
[23:45:09] *** Quits: MajorBiscuit (~MajorBisc@c-001-019-045.client.tudelft.eduvpn.nl) (Ping timeout: 252 seconds)
[23:54:17] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
