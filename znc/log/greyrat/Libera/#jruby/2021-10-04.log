[01:32:55] <JasonvanZyl[m]> awesome, i've used windows 5 times in my life so not a problem :-)
[01:38:29] <headius> ðŸ˜ƒ
[11:06:54] <kares[m]> <lopex[m]1> "I'm using this too" <- are you? I haven't but when I saw it I thought it was cool (but than my java xml knowledge is outdated)
[14:23:03] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[16:26:58] *** Joins: nilsding (~nilsding@user/nilsding)
[18:14:47] <headius> Good morning!
[18:21:18] <CrisShupp[m]> Does mkristian lurk here?  I opened this issue https://github.com/torquebox/jruby9-maven-plugins/issues/5 on the jruby9-exec-maven-plugin
[18:27:55] <headius> I don't think so unfortunately. I have been planning to take over most of his JRuby-related projects to help take the load off
[18:36:31] <CrisShupp[m]> Should this bug be written up on the JRuby issue tracker?
[18:51:30] <headius> ahh yes this issue
[18:51:48] <headius> I think this might have been filed in another form elsewhere
[19:23:27] <headius> huh
[19:23:37] <headius> ractor code uses ko1's new C expression language in Ruby
[19:23:44] <headius> enebo: ^
[19:24:00] <headius>   def self.current... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/fc235b2f59ebf21e18b9642cbb55af23eb799d00)
[19:28:08] *** Quits: NoraHoward[m] (~baroquebo@2001:470:69fc:105::f6ff) (Ping timeout: 246 seconds)
[19:28:20] *** Joins: NoraHoward[m] (~baroquebo@2001:470:69fc:105::f6ff)
[19:47:28] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 252 seconds)
[19:48:26] *** Quits: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100) (Ping timeout: 246 seconds)
[19:48:49] *** Joins: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100)
[19:50:32] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Ping timeout: 246 seconds)
[19:51:20] *** Quits: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2) (Ping timeout: 250 seconds)
[19:51:27] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[19:51:48] *** Joins: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2)
[19:56:06] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Ping timeout: 268 seconds)
[19:56:58] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[19:57:41] *** Quits: JesseChavezGitte (~gitterjes@2001:470:69fc:105::3122) (Ping timeout: 264 seconds)
[19:59:25] *** Joins: JesseChavezGitte (~gitterjes@2001:470:69fc:105::3122)
[20:04:53] *** Quits: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146) (Ping timeout: 264 seconds)
[20:09:41] *** Joins: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146)
[20:22:00] *** Quits: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba) (Ping timeout: 268 seconds)
[20:27:17] *** Quits: shibz[m]1 (~shibzmatr@2001:470:69fc:105::1:8be) (Ping timeout: 246 seconds)
[20:30:34] *** Joins: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba)
[20:33:22] *** Joins: shibz[m]1 (~shibzmatr@2001:470:69fc:105::1:8be)
[20:37:42] *** Quits: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba) (Ping timeout: 250 seconds)
[20:37:55] *** Joins: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba)
[20:38:39] *** Quits: KarolBucekGitter (~gitterkar@2001:470:69fc:105::3127) (Ping timeout: 268 seconds)
[20:38:51] *** Joins: KarolBucekGitter (~gitterkar@2001:470:69fc:105::3127)
[21:04:53] *** Quits: CharlesOliverNut (~gitterhea@2001:470:69fc:105::311e) (Ping timeout: 264 seconds)
[21:05:05] *** Joins: CharlesOliverNut (~gitterhea@2001:470:69fc:105::311e)
[21:06:05] *** Quits: lopex[m]1 (~lopexm]@2001:470:69fc:105::3158) (Ping timeout: 264 seconds)
[21:06:50] *** Joins: lopex[m]1 (~lopexm]@2001:470:69fc:105::3158)
[21:21:43] <enebo[m]1> hahah
[21:27:32] *** Quits: fzakaria[m] (~fzakariam@2001:470:69fc:105::30f6) (Ping timeout: 250 seconds)
[21:27:44] *** Joins: fzakaria[m] (~fzakariam@2001:470:69fc:105::30f6)
[21:35:23] *** Quits: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140) (Ping timeout: 268 seconds)
[21:35:35] *** Joins: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140)
[21:44:00] <headius> I have started filling in the blanks for Ractor
[21:49:45] <headius> It is pretty much an actor API but the isolation characteristics are still not clear to me. I think the most straightforward way to handle it would be to spin up a second jruby instance and marshall or otherwise transfer values across
[21:50:09] <headius> I'm not exactly sure how that's supposed to work with class definitions and patches and libraries because it sounds like the classes are supposed to be visible across ractors
[21:50:27] <headius> Which to me says they are still a massive hole in this isolation
[21:52:20] <enebo[m]1> headius: my understanding is classes must be loaded similarly in each ractor.  I do not think class sharing exists the last time I saw a talk on it
[21:52:43] <enebo[m]1> I also thought there was severe limitations on what could be shared
[21:52:56] <enebo[m]1> I should probably look at modern docs though
[21:53:12] <headius> Ok that would be far better and trivially implementable with two JRuby instances
[21:53:51] <headius> In that case, if this becomes a popular api, we may look into options for sharing more between runtimes to reduce their size
[21:54:04] <enebo[m]1> https://github.com/ruby/ruby/blob/master/doc/ractor.md
[21:54:20] <enebo[m]1> well it does claim classes/modules are shared but then says data must be immutable
[21:54:23] <headius> Which could include things like IR and statically optimized jitted code that would be the same everywhere
[21:54:31] <headius> Yeah see that is what I read
[21:54:54] <headius> This half-isolation will be much more tricky to implement
[21:55:02] <enebo[m]1> but does that means the classes must be frozen?
[21:55:31] <enebo[m]1> If we know it cannot change then we really need to know what state can change
[21:55:37] <headius> If they're not doesn't that mean one ractor could screw up the methods in a different ractor
[21:55:46] <enebo[m]1> yeah you would think so
[21:55:56] <headius> I think this is always been the big open question for us and it seems like they just punted
[21:56:18] <headius> If the classes were isolated then we essentially have MVM and the implementation side on jruby would be trivial
[21:56:26] <enebo[m]1> oh wow it supports move semantics on unshareable objects
[21:56:35] *** Joins: drbobbeaty_ (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[21:56:46] <enebo[m]1> That will just be marshal at some level
[21:57:01] <enebo[m]1> First pass could literally be marshal
[21:57:17] <headius> Yeah, worst case we would marshall the frozen guts to a new object but possibly could reattach an object to a different runtime
[21:57:53] <headius> Reattaching the object worries me because the old container is not supposed to be able to access it anymore. I have no idea how they enforce that on the heat given that there could be thousands of references to it
[21:58:06] <headius> Heap not heat
[21:58:16] <enebo[m]1> heat
[21:58:23] <headius> It all seems very loosey-goosey in any case
[21:58:34] <enebo[m]1> yeah I feel the same way
[21:58:51] <enebo[m]1> and the I_CLASS stuff is just them sharing a pointer which makes me wonder how well that will work
[21:59:18] <enebo[m]1> I guess my first wonderment is @@ and whether method tables can change
[21:59:33] <enebo[m]1> fwiw I am totally ok without ractor support at release time
[21:59:46] <headius> They do have a lot more off heap data then we do so it may be possible for them to share class and method structures without sharing mutable class data other than that
[22:00:08] <headius> Yeah I wanted to poke at this mostly to see how close we can come just wrapping a second jruby instance
[22:00:20] <headius> Other than open questions about class sharing, I think we can get pretty far
[22:01:29] <enebo[m]1> "Only the main Ractor can access instance variables of shareable objects."
[22:01:52] <enebo[m]1> "Only the main Ractor can access class variables."
[22:02:11] <enebo[m]1> This one is interesting: "Only the main Ractor can read constants which refer to the unshareable object."
[22:02:57] <enebo[m]1> TABLE = Ractor.make_shareable( {a: 'ko1', b: 'ko2', c: 'ko3'} )
[22:03:00] <enebo[m]1> oh my
[22:03:52] <enebo[m]1> It just ends up being a proxied instance but I don't like the notion of combos here...like a class has a constant with a shareable hash
[22:06:09] <headius> So perhaps it is proxying access to shareable objects through some indirection?
[22:06:24] <headius> This is all very complicated and it doesn't seem like it needs to be
[22:11:21] <enebo[m]1> It is seemingly a one person vision of something he had no experience with until he started on it
[22:11:40] <enebo[m]1> Or at least he had not been working with any existing solutions
[22:11:59] <enebo[m]1> He did spend years on it though so I will not write it off at this point
[22:13:06] <enebo[m]1> man this facebook stuff is funny and amazing
[22:24:41] *** Quits: FlorianDoubletGi (~gitterflo@2001:470:69fc:105::310c) (Ping timeout: 264 seconds)
[22:24:53] *** Joins: FlorianDoubletGi (~gitterflo@2001:470:69fc:105::310c)
[23:04:14] <headius> it might be possible to just enforce the immutability or marshaling and do b
[23:04:15] <headius> basically nothing else
[23:04:19] <headius> just let threads run as they do today
