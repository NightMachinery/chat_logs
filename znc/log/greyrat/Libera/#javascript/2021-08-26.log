[00:00:21] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[00:01:10] *** Joins: Axy (~Axy@user/axy)
[00:04:23] *** Joins: huytd (uid121268@id-121268.highgate.irccloud.com)
[00:07:50] *** Quits: qswz (~caub@91-175-196-225.subs.proxad.net) (Quit: leaving)
[00:08:56] *** Quits: dviola (~diego@user/dviola) (Read error: Connection reset by peer)
[00:09:06] *** Quits: Batzy (~Batzy@user/batzy) (Quit: lata)
[00:11:21] *** Quits: linguist (~brunildz@170.84.56.192) (Read error: Connection reset by peer)
[00:11:45] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[00:12:00] *** Joins: Batzy (~Batzy@user/batzy)
[00:12:09] <rustyshackleford> what do you think of grapnel?
[00:12:14] <rustyshackleford> graphql
[00:12:16] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[00:20:21] *** Joins: linguist (~brunildz@170.84.56.192)
[00:20:31] <theskillwithin> !while
[00:21:03] <theskillwithin> !while loop
[00:21:08] <theskillwithin> meh
[00:21:16] <theskillwithin> rustyshackleford I like graphql
[00:22:06] <onosendi> Anyone have any experience with NextAuth, with a custom adapter for a local PosgreSQL database?
[00:23:21] *** Joins: bynx (~bynx@fw.rry.vaskywire.net)
[00:24:55] * linguist ist weg: besch√§ftigt 
[00:26:33] <onosendi> Is serverless the future of web dev?
[00:26:36] *** Quits: Batzy (~Batzy@user/batzy) (Quit: lata)
[00:27:39] <GreenJello> onosendi, part of it, like it's part of the present
[00:27:42] *** Joins: Batzy (~Batzy@user/batzy)
[00:29:05] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[00:29:06] <onosendi> GreenJello: what's your thoughts on it?
[00:29:06] <GreenJello> lots of trade-offs that make it better/worse for various things, and new problems it introduces
[00:29:16] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Ping timeout: 252 seconds)
[00:29:26] <onosendi> GreenJello: yeah, agreed.
[00:29:50] <austincheney> onosendi, serverless is a broad term that can mean many different things
[00:32:32] <GreenJello> I think the immediate future is a mix of serverless and container orchestration, where the latter handles the stuff serverless doesn't, but in a more declarative way than traditional infrastructure, and with more flexibility
[00:34:22] <austincheney> I think current social media is driving a desire away from HTTP content responders, such as traditional websites.  One alternative is webRTC, but the distribution model proposed (TURN) is very expensive
[00:35:30] <rustyshackleford> theskillwithin: graphql seems like a nightmare
[00:35:38] <rustyshackleford> unless your querying from a database
[00:35:47] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[00:36:55] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-45.prtc.net)
[00:37:45] <Alexendoo> austincheney: Social media is creating more centralisation than ever, why would they be inclined to move away from that?
[00:38:03] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Remote host closed the connection)
[00:38:15] <theskillwithin> well usually a database is involved somewhere
[00:38:18] <lmat> I'm using react. My component has a `const [myVal, setMyVal] = useState(0); useEffect(()=> {setSomeState(myVal);... }, [props.whatever]);`. I need to render my component with certain props, interact with the component (to get it to set myVal to something) then RE-render my component with different props so that I can see test whether it does the useEffect properly. Does that make sense?
[00:39:04] <hassoon> lmat: #reactjs
[00:39:10] <austincheney> Alexendoo, to be more clear I mean to say social media is driving people and businesses away from the traditional web model.  People are getting tired of walled gardens and slower services despite rapid increases in bandwidth
[00:39:13] <theskillwithin> rustyshackleford it takes getting used to, its deff very different than rest
[00:39:33] <Stanley> wroathe have any good example of drag/drop with event delegation?
[00:40:18] <rustyshackleford> theskillwithin: so lets say I've got a database and some other resources which are rest endpoints
[00:41:04] <rustyshackleford> lets make it simpler. two rest endpoints
[00:41:30] <rustyshackleford> you could use graphql to abstract those rest endpoints, and then its just one round trip for the client
[00:41:51] <rustyshackleford> is that any better than just calling those rest endpoints directly from client?
[00:42:30] <theskillwithin> it depends
[00:42:47] *** Quits: aniruddha (uid340443@id-340443.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[00:43:08] <rustyshackleford> theskillwithin: good answer
[00:43:22] <theskillwithin> graphql you opt into the exact data you want.  so like imagine facebook where you have a page with like 5 different components, making 5 different api calls
[00:43:32] <rustyshackleford> you're kinda just moving the problem into another layer
[00:43:39] <theskillwithin> a rest api structure you might get back more data than you want
[00:44:05] *** Quits: Batzy (~Batzy@user/batzy) (Quit: lata)
[00:44:07] <ljharb> rustyshackleford: you are precisely doing that
[00:44:15] <ljharb> rustyshackleford: out of the frontend into the backend, where things are much easier
[00:44:22] <rustyshackleford> now you have 3 layers instead of two
[00:44:39] <rustyshackleford> I'm skeptical
[00:44:52] <ljharb> now you have 2 small easy layers and 1 small hard one, instead of 1 small easy one and 1 large hard one
[00:44:55] * rustyshackleford braces for ljharb's explanation of how I'm wrong
[00:45:00] <ljharb> rustyshackleford: "more layers' is not necessarily worse, and in this case it's better
[00:45:09] *** Quits: Haxxa (~Haxxa@122.199.46.17) (Quit: Haxxa flies away.)
[00:45:14] *** Joins: Batzy (~Batzy@user/batzy)
[00:45:51] <rustyshackleford> I think there's something to be said about tried and true methods
[00:46:11] <ljharb> in the same way as "three small functions" is way better than "two large functions"
[00:46:20] <rustyshackleford> graphql is shiney and new. but REST isn't going anywhere
[00:46:21] *** Quits: Batzy (~Batzy@user/batzy) (Client Quit)
[00:46:22] <ljharb> rustyshackleford: sure there is. but that can be outweighed by other things, which in this case, it is.
[00:46:35] <ljharb> rustyshackleford: SOAP didn't go anywhere either, but REST was still better than SOAP.
[00:46:42] <rustyshackleford> sigh...
[00:46:49] <rustyshackleford> we still use some soap at work
[00:46:54] <ljharb> i'm sorry
[00:47:01] <rustyshackleford> the whole xml format is evil
[00:47:04] <ljharb> very true
[00:47:30] *** Joins: Batzy (~Batzy@user/batzy)
[00:48:03] *** Joins: Haxxa (~Haxxa@122.199.46.17)
[00:48:24] <wroathe> Stanley: It's not quite the same mechanism you're trying to use, but this is drag and drop implemented via pointerdown/up and event delegation: https://github.com/JustinChristensen/connector-demo/blob/master/main.js#L358-L359 https://justinchristensen.github.io/connector-demo/
[00:49:24] <wroathe> Stanley: The basic idea behind event delegation is that you bind your event listener to a common ancestor to the elements whose events you want to handle
[00:50:09] <wroathe> Stanley: And then you make use of the event target, the .closest method to find the specific element the user is interacting with
[00:50:31] <Stanley> i'll check it out thanks :)
[00:50:51] <rustyshackleford> we have whole repos of xml
[00:51:02] <rustyshackleford> with the worst formatting and indentation you've ever seen
[00:52:03] <rustyshackleford> and with how nested xml tends to be, bad indentation makes it impossible to read
[00:53:16] <matsaman> at least that's easily fixed
[00:53:24] <matsaman> problem is XML sucks even when well indented =P
[00:54:15] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[00:54:43] *** Quits: Batzy (~Batzy@user/batzy) (Quit: lata)
[00:55:27] <wroathe> Stanley: Here's a barebones example to demonstrate the basic principle: https://jsfiddle.net/qnj8shm2/1/
[00:55:49] *** Joins: Batzy (~Batzy@user/batzy)
[01:01:08] <wroathe> Stanley: And in case it's not immediately obvious, the benefit of this technique is that you don't need to micromanage binding and removing event listeners for those descendent elements you're trying to handle the event for.
[01:02:48] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[01:03:10] *** Quits: ArchNoob (~maotora@user/archnoob) (Ping timeout: 240 seconds)
[01:04:55] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[01:05:16] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[01:05:56] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-45.prtc.net) (Quit: Client closed)
[01:09:29] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 248 seconds)
[01:10:18] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: Lost the game...)
[01:11:40] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[01:13:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[01:13:27] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 240 seconds)
[01:15:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:15:05] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:15:05] *** Joins: wroathe (~wroathe@user/wroathe)
[01:16:03] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[01:16:32] *** Quits: tccki (~tccki@box.webslate.co.nz) (Quit: tccki)
[01:16:35] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[01:16:46] *** Joins: tccki (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795)
[01:20:47] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Ping timeout: 240 seconds)
[01:22:41] *** Joins: electrostatic (~electrost@2601:600:8600:5a1:206a:2cae:5bdf:f980)
[01:23:14] *** Quits: nomic (~nomic@185.217.117.169) (Quit: Leaving)
[01:27:47] *** Quits: linguist (~brunildz@170.84.56.192) (Ping timeout: 240 seconds)
[01:32:09] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[01:37:03] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 250 seconds)
[01:37:05] *** Quits: Akimbas (~Akimb@86.100.13.100) (Read error: Connection reset by peer)
[01:37:24] <austincheney> rustyshackleford, if xml beautification is such a concern use a code beautifier.  XML is easy to format.
[01:38:10] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 240 seconds)
[01:40:12] *** Joins: eck0 (~eck0@047-007-119-133.res.spectrum.com)
[01:40:26] *** Joins: nomic (~nomic@185.217.117.169)
[01:42:15] <eck0> i have a question about useRef in react. if you have an object set in the ref, when you unmount the component, does it still keep that object in memory or does it clean it up on it's own? wasn't sure if i have to null it out in a cleanup function with useEffect or something
[01:43:22] <GreenJello> React stops holding a reference to it
[01:43:51] <GreenJello> so if none of your code is holding onto it, it will be collected
[01:44:43] <eck0> cool, thanks!
[01:44:44] *** Joins: linguist (~brunildz@170.84.56.192)
[01:45:57] *** Joins: matsaman (~matsaman@user/matsaman)
[01:47:06] *** Joins: Snyp (~Snyp@49.207.225.119)
[01:51:35] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[01:51:55] *** Joins: diamondbond (~diamondbo@175.157.84.92)
[01:52:42] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[01:54:14] *** Quits: diamondbond (~diamondbo@175.157.84.92) (Client Quit)
[01:55:07] *** Quits: linguist (~brunildz@170.84.56.192) (Ping timeout: 240 seconds)
[01:55:56] *** Joins: linguist (~brunildz@170.84.56.192)
[02:02:54] *** Joins: mannu (mannu@wodanaz.se)
[02:05:39] *** Joins: silly_ (~silly@user/silly)
[02:05:45] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[02:08:13] <sheetjs> BAHAHA
[02:08:47] *** Quits: silly (~silly@user/silly) (Ping timeout: 240 seconds)
[02:09:11] <mannu> hey, anyone familiar with the node-rsa package? i'm trying to convert some code from crypto to use node-rsa, since i'm using it on a device that needs a pure javascript implementation. the buffer is all wrong when using node-rsa to decrypt it, i've been fiddling with all manners of options, feeling like i'm just fumbling around right now
[02:09:17] <mannu> https://bpa.st/UXFQ
[02:09:20] <sheetjs> ok this is unbelievable, for some godforsaken reason
[02:10:25] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 250 seconds)
[02:10:39] <sheetjs> mannu: use `forge`
[02:11:11] <sheetjs> https://www.npmjs.com/package/node-forge
[02:11:39] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[02:12:00] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[02:12:41] *** Quits: Snyp (~Snyp@49.207.225.119) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[02:12:54] <mannu> sheetjs: that's looking really good
[02:13:04] <mannu> i'll have a look at it, i'm honestly thinking there's something wrong with node-rsa
[02:13:30] <mannu> thanks a lot
[02:13:39] <sheetjs> node-forge was pretty good, and is pure JS
[02:16:42] *** Quits: bynx (~bynx@fw.rry.vaskywire.net) (Quit: leaving)
[02:21:28] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Ping timeout: 252 seconds)
[02:21:34] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 250 seconds)
[02:27:10] <ario_> i'm having trouble doing a sort by property a then by property b
[02:27:35] <ario_> none of these work fo rme: https://stackoverflow.com/questions/9175268/javascript-sort-function-sort-by-first-then-by-second
[02:27:38] <ario_> i'm baffled
[02:30:46] <systemfault> The checked answer should work.
[02:31:22] <systemfault> We need to know more about your code
[02:32:11] <mannu> damn, node-forge is a no go
[02:32:13] <mannu> 1,8mb
[02:33:41] <ario_> systemfault: i'm trying to sort by release_location + number contacts: https://bpa.st/ZH4Q
[02:34:36] <systemfault> What part is not working?
[02:34:57] <ario_> I have literally something like this and it's not working: https://bpa.st/FE7A
[02:35:25] *** Quits: wintersky (uid453465@id-453465.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:35:27] *** Joins: haniaF (~haniaF@83.24.203.227.ipv4.supernova.orange.pl)
[02:36:04] <ario_> hmm
[02:36:31] <systemfault> Maybe it's the case of the letters that is the issue?
[02:37:06] <systemfault> Try to .toLowerCase() release_location before passing it to compare
[02:37:35] *** Joins: sillyslux__ (~silly@user/silly)
[02:38:08] <ario_> oh nvm it looks like it's working
[02:38:10] <ario_> i'm blind
[02:38:21] <ario_> :P
[02:39:29] *** Joins: cantelope (~cantelope@mail.whitehotrobot.com)
[02:39:33] *** Parts: cantelope (~cantelope@mail.whitehotrobot.com) ()
[02:39:37] <hassoon> blind ?
[02:39:40] *** Quits: linguist (~brunildz@170.84.56.192) (Ping timeout: 240 seconds)
[02:40:34] *** Joins: silly (~silly@user/silly)
[02:41:16] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 252 seconds)
[02:42:47] *** Quits: sillyslux__ (~silly@user/silly) (Ping timeout: 240 seconds)
[02:45:16] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[02:45:22] *** Joins: cawboi35 (~cawboi35@185.120.124.24)
[02:50:08] *** Joins: trinity (uid509475@user/trinity)
[02:50:34] <onosendi> Converting to ESM, is this answer what we're still doing to replace '__dirname' ? https://stackoverflow.com/questions/46745014/alternative-for-dirname-in-node-when-using-the-experimental-modules-flag
[02:52:38] *** Quits: nomic (~nomic@185.217.117.169) (Quit: Leaving)
[02:55:30] *** Joins: Snyp (~Snyp@49.207.225.119)
[02:56:28] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[02:59:15] <ljharb> neshpion: a better answer is to not convert to native ESM, it's not really worth it
[02:59:20] <ljharb> onosendi: a better answer is to not convert to native ESM, it's not really worth it
[02:59:29] <ljharb> onosendi: but yes, native ESM doesn't have those convenient variables like CJS does
[03:00:24] <onosendi> ljharb: it sucks not being able to share utils between React and node though.
[03:01:04] <austincheney> onosendi, converting an existing project from CJS to ESM is an uphill battle.  This is a decision better for new projects.  Part of the reason this is so incredibly challenging is that it must be done through the entirety of your project including your dependencies
[03:01:23] <onosendi> austincheney: It's a new project.
[03:02:13] <austincheney> I am choosing ESM for my new projects as I find it cleaner (personal opinion), but it cuts off access to many NPM packages
[03:02:43] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[03:02:58] *** Joins: kill (~killown@user/killown)
[03:03:58] <systemfault> There's no reason to use ESM... at all.
[03:04:13] <systemfault> If you like the syntax... like me, use a babel transform
[03:04:28] <systemfault> (Or TypeScript...)
[03:05:54] <onosendi> systemfault: hmm, interesting.
[03:06:07] <ljharb> onosendi: why wouldn't you be able to
[03:06:10] <ljharb> onosendi: that's what a bundler is for
[03:06:18] <ljharb> onosendi: react is bundled CJS
[03:06:44] <ljharb> native *browser* ESM is even worse than native node ESM; it's slower by design than bundled CJS
[03:09:17] <systemfault> ESM was designed by people who have never used JS in the real world </not-true-but-makes-you-wonder>
[03:11:15] *** Joins: mutandis (~mut@c-73-129-211-144.hsd1.md.comcast.net)
[03:11:20] *** Joins: mikrosis (~mikrosis@dynamic-046-114-172-116.46.114.pool.telefonica.de)
[03:12:27] *** Joins: steltenpower (~steltenpo@a83-162-199-132.adsl.xs4all.nl)
[03:12:57] *** Joins: keypushe- (keypusher@user/keypusher)
[03:14:44] *** Quits: steltenpower (~steltenpo@a83-162-199-132.adsl.xs4all.nl) (Client Quit)
[03:14:49] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 252 seconds)
[03:15:09] *** Joins: steltenpower (~steltenpo@a83-162-199-132.adsl.xs4all.nl)
[03:15:49] *** Joins: thiras (~thiras@user/thiras)
[03:16:10] *** keypushe- is now known as keypusher
[03:16:26] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[03:16:41] *** Quits: onizu (uid373383@id-373383.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[03:17:03] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[03:23:17] <austincheney> systemfault, I do use typescript
[03:23:25] *** Joins: nomic (~nomic@185.217.117.169)
[03:23:55] <systemfault> austincheney: Then you just set your tsconfig to compile to CommonJS, it's the best of both worlds
[03:24:24] <systemfault> (And don't forget the "esModuleInterop" option...
[03:26:39] <sheetjs> its like asm.js
[03:27:48] <sheetjs> you can try to make the human optimize for the tooling or make the tooling optimize for the human
[03:28:44] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[03:29:06] <austincheney> my big personal project of the moment doesn't notice any speed delays due to ESM in either the browser or node.  I can load the page and fully restore state to a huge number of modals in this windows-like gui in about .5 seconds
[03:30:10] <austincheney> the slowest part is loading the massive background image that can take more than 2 seconds
[03:30:10] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[03:33:40] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[03:37:23] *** Joins: linguist (~brunildz@170.84.56.192)
[03:42:18] <steltenpower> Any hints for "cut microphone input into audiofragments (to each do speechrecognition on) when pointerevents happen"?
[03:44:11] <ljharb> austincheney: authoring in ESM is fine, shipping native ESM is not
[03:45:01] <austincheney> what kinds of problems are you guys encountering with shipping esm?
[03:45:34] <ljharb> it's a waterfall-based design. the browser can't know about dep 2 until it finishes parsing dep 1
[03:45:36] <ljharb> and so on
[03:45:49] <ljharb> also, it's new syntax, and new syntax is always slow til it gets optimized
[03:47:08] <austincheney> I am not seeing that slowness in my own application, but then its only sending about 16 js files to the browser
[03:48:50] <onosendi> ljharb: ah, figured out transpiling for node, that's what I wanted. Thanks.
[03:49:48] <ljharb> onosendi: make sure you're using babel, TS is a crappy transpiler :-)
[03:50:04] <ljharb> austincheney: the slowness will magnify significantly for someone with slow internet
[03:50:08] <ljharb> and/or a slow computer
[03:51:45] <cis> austincheney: you can test that in chrome devtools using throttling under the network tab
[03:53:20] <onosendi> ljharb: I think I got it right. https://dpaste.org/SxTk
[03:54:19] <ljharb> cis: somewhat. can't fake a slow computer tho
[03:54:49] <cis> ljharb: yeah, it's not perfect - you can simulate a slow CPU on the performance tab though
[03:55:36] <ljharb> TIL. not bad, haven't looked into it lately
[03:55:48] <cis> you could set up a VM the way you like if you really needed to performance test more accurately I guess
[03:55:58] <austincheney> cis, I have
[03:57:09] <austincheney> cis, the application is a peer-to-peer app so I have 4 ubuntu mint vms to test it on my windows host
[04:04:44] <deltab> ljharb: I thought the point of dedicated syntax was that it's only necessary to tokenize to find the imports
[04:06:44] <systemfault> The syntax was defined in 2015... then another committee spend another 4 years trying to make this shit actually works.
[04:07:24] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[04:08:12] <Stanley> what does "el" stand for? everywhere I see "var el = document.getElementById('whatever')
[04:08:14] <Stanley> is it short for element?
[04:08:17] <systemfault> Yes.
[04:08:21] <Stanley> thanks
[04:08:21] <Stanley> lol
[04:08:24] <systemfault> You win! Flawless victory!
[04:09:00] <Stanley> huzzuhhhhh
[04:09:15] <systemfault> I suggest that you learn that getElementById exists... but then just use querySelector(All) for everything.
[04:09:49] <systemfault> Also, your tutorial may be a little old... few people still use "var" to declare variables
[04:10:13] <Stanley> Yeah I replace with let
[04:10:24] <Stanley> querySelector() works like CSS selectors? any downfall?
[04:10:43] <systemfault> It's slower but you shouldn't select anything in a tight loop...
[04:11:36] <systemfault> But it's so flexible... document.querySelector('.foo.bar > .baz[checked]')
[04:12:01] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 252 seconds)
[04:12:07] <systemfault> document.querySelectorAll to select an "array-like" of nodes
[04:13:11] *** Joins: Northwoods (~Northwood@202.14.122.173)
[04:16:41] *** Quits: Snyp (~Snyp@49.207.225.119) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[04:19:27] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[04:25:28] *** Joins: jess (~jess@libera/staff/jess)
[04:29:12] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[04:30:53] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[04:31:38] *** Joins: Snyp (~Snyp@49.207.225.119)
[04:38:56] *** Quits: steltenpower (~steltenpo@a83-162-199-132.adsl.xs4all.nl) (Quit: Client closed)
[04:39:07] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:5900:2852:c4eb:310b) (Ping timeout: 240 seconds)
[04:39:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[04:41:03] *** Quits: pycurious (~Adium@user/pycurious) (Read error: Connection reset by peer)
[04:41:10] *** Quits: electrostatic (~electrost@2601:600:8600:5a1:206a:2cae:5bdf:f980) (Ping timeout: 240 seconds)
[04:41:18] *** Joins: pycurious (~Adium@user/pycurious)
[04:43:07] <linguist> Hello!
[04:43:22] <linguist> What is the easiest way to make automated tests in JavaScript?
[04:44:10] <linguist> Something really easy for someone who never worked with automated tests
[04:46:13] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[04:48:09] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 250 seconds)
[05:03:49] <cis> linguist: you could try out something like jest pretty easily
[05:12:41] *** Joins: ferdna (~ferdna@user/ferdna)
[05:13:30] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: Leaving)
[05:15:40] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[05:16:34] *** Joins: onosendi (~onosendi@user/onosendi)
[05:17:11] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 250 seconds)
[05:20:35] *** Quits: Snyp (~Snyp@49.207.225.119) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[05:22:49] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 250 seconds)
[05:23:15] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 250 seconds)
[05:28:41] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:259c:2413:d1f1:9fbc)
[05:30:03] *** Quits: strive (~strive@user/strive) (Quit: = "")
[05:38:01] *** Joins: strive (~strive@user/strive)
[05:41:47] *** Quits: welldonehowever (welldoneho@welldonehowever.oddprotocol.org) (Quit: IRCNow and Forever!)
[05:48:07] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[05:48:32] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[05:50:04] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[05:55:34] *** Quits: cawboi35 (~cawboi35@185.120.124.24) (Ping timeout: 246 seconds)
[05:56:08] *** Quits: tccki (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795) (Quit: tccki)
[05:56:33] *** Joins: tccki (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795)
[05:58:21] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 250 seconds)
[05:59:26] *** Joins: thiras (~thiras@user/thiras)
[05:59:39] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[06:00:25] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[06:00:49] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[06:01:33] *** Quits: Vooch (~iovoo@096-038-011-034.biz.spectrum.com) (Read error: Connection reset by peer)
[06:01:57] *** Joins: Vooch (~iovoo@096-038-011-034.biz.spectrum.com)
[06:02:00] *** Quits: tccki (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795) (Quit: tccki)
[06:02:49] *** Joins: tccki (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795)
[06:06:25] *** Joins: gggpkm (~gggpkm@111.63.14.115)
[06:07:33] <linguist> cis, I¬¥ll have a look, thanks!!
[06:10:28] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:10:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:10:28] *** Joins: wroathe (~wroathe@user/wroathe)
[06:14:01] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[06:16:40] *** Joins: rexar89 (~alexi5@208.83.82.233)
[06:16:56] <onosendi> You guys camelcase db names/columns?
[06:18:30] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[06:19:25] <cis> onosendi: snake case, usually
[06:20:32] <onosendi> cis: since I started with JS I've switched to camelcase, but it's a pain in the ass when I'm psql shell, having to quote everything.
[06:22:04] <cis> onosendi: what do you mean about quoting?
[06:23:10] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Ping timeout: 240 seconds)
[06:23:42] <onosendi> cis: https://dpaste.org/n5DU
[06:25:06] <cis> onosendi: oh, I didn't know it lowercased names like that.
[06:25:18] <cis> there's a good reason to use snake_case I guess
[06:32:41] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:38:27] *** Joins: welldonehowever (welldoneho@oddprotocol.org)
[06:38:48] *** Joins: jazzy2 (~jaziz@2600:380:874b:fa95:2c89:c0e7:973c:7ad)
[06:38:56] *** Quits: vqueiroz (uid340368@id-340368.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[06:42:33] *** Quits: jazzy (~jaziz@2600:380:874b:fa95:c80:3993:216c:c86e) (Ping timeout: 250 seconds)
[06:43:04] *** Quits: huytd (uid121268@id-121268.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[06:43:43] *** Joins: vqueiroz (uid340368@id-340368.stonehaven.irccloud.com)
[06:47:08] *** Quits: Drgonz0 (~Drgonz0@107-179-254-222.cpe.teksavvy.com) ()
[06:47:11] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[06:48:36] *** Quits: voltage_ (~voltage@user/voltage) (Quit: Leaving)
[06:52:24] *** Quits: mrdata (~mrdata@user/mrdata) (Read error: Connection reset by peer)
[07:01:00] *** Joins: mrdata (~mrdata@user/mrdata)
[07:05:46] *** Joins: Rockwood (~Rocky@user/rocky)
[07:13:23] <Rockwood> o/
[07:16:39] <wroathe> Yeah, snake_case for me too
[07:17:01] <wroathe> It's just a fact of life that naming conventions get lot in translation between different parts of the stack
[07:17:34] <wroathe> Best case scenario, you create a bidirectional string mapping function to convert between the two conventions when serializing/deserializing
[07:21:44] <ljharb> camelCase is best in JS, but snake_case is fine if you have to interoperate with something snaky
[07:21:50] *** Quits: nomic (~nomic@185.217.117.169) (Quit: Leaving)
[07:22:07] *** Joins: nomic (~nomic@185.217.117.169)
[07:22:10] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[07:22:23] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Read error: Connection reset by peer)
[07:27:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[07:31:07] *** Quits: shailangsa (~shailangs@host86-185-102-120.range86-185.btcentralplus.com) (Ping timeout: 240 seconds)
[07:31:41] <lockdown> like postgres
[07:32:26] *** Joins: electrostatic (~electrost@2601:600:8600:5a1:206a:2cae:5bdf:f980)
[07:32:54] <Rockwood> lockdown, is awesome name i love it :D
[07:34:07] <lockdown> ah nm
[07:34:45] <lockdown> Rockwood: ;)
[07:35:16] <Rockwood> any reason to taken this name?
[07:36:07] <ljharb> because after 1.5 years of it it's not that original?
[07:39:46] *** Joins: montybanksnyc[]x (~montybank@pool-71-127-199-18.nwrknj.fios.verizon.net)
[07:39:59] <Rockwood> which is?
[07:40:58] <onosendi> wroathe: ah, exactly what I was looing for: https://knexjs.org/#Installation-post-process-response - I really didn't want to wrap each query in `someModifierFunction`
[07:41:27] *** Joins: gggpkm_ (~gggpkm@222.128.56.240)
[07:42:47] *** Quits: montybanksnyc (~montybank@pool-71-127-199-18.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[07:42:58] <wroathe> onosendi: Yup. I was using "function" generically above. There are lots of ways to do it. For example, JSON.parse takes a custom "reviver" function that can be used to remap keys while parsing JSON.
[07:43:15] <onosendi> Ah, interesting.
[07:43:36] <wroathe> onosendi: The point generally is that dealing with data from the environment can't always be relied on to be consistently formatted according to the naming conventions of the language you're using
[07:43:46] *** Quits: gggpkm (~gggpkm@111.63.14.115) (Ping timeout: 252 seconds)
[07:43:53] <wroathe> onosendi: So trying to force a database's columns to be camelCase just because you primarily write Javascript is a bit silly
[07:44:00] <onosendi> Agreed.
[07:44:23] <ljharb> Rockwood: which is what
[07:51:50] *** Joins: gggpkm (~gggpkm@111.63.14.115)
[07:52:07] <wroathe> Ahh, that feeling when you do something you think is an interesting idea that the community hasn't seen before and discover a well written article by someone else written relatively recently explaining your idea in great detail
[07:52:10] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 240 seconds)
[07:52:13] *** Joins: ArchNoob (~maotora@user/archnoob)
[07:53:07] *** Quits: gggpkm_ (~gggpkm@222.128.56.240) (Ping timeout: 240 seconds)
[07:54:14] *** Joins: Snyp (~Snyp@49.207.225.119)
[07:55:19] *** Quits: Snyp (~Snyp@49.207.225.119) (Client Quit)
[07:56:19] *** Joins: Snyp (~Snyp@49.207.225.119)
[07:58:51] *** Joins: shailangsa_ (~shailangs@host86-185-102-120.range86-185.btcentralplus.com)
[07:59:57] *** Joins: gggpkm_ (~gggpkm@111.63.14.115)
[08:02:17] *** Quits: gggpkm (~gggpkm@111.63.14.115) (Ping timeout: 250 seconds)
[08:11:46] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[08:19:18] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[08:19:18] *** Quits: nomic (~nomic@185.217.117.169) (Quit: Leaving)
[08:21:27] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[08:22:14] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[08:23:40] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Ping timeout: 240 seconds)
[08:24:32] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:24:44] *** Joins: falafel (~falafel@2601:280:4e00:9970:889a:3513:448f:30e9)
[08:27:45] *** Joins: falafel_ (~falafel@2601:280:4e00:9970:889a:3513:448f:30e9)
[08:28:03] *** Joins: voltage_ (voltage@user/voltage)
[08:28:27] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 240 seconds)
[08:29:58] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[08:30:40] *** Quits: falafel (~falafel@2601:280:4e00:9970:889a:3513:448f:30e9) (Ping timeout: 240 seconds)
[08:31:19] *** Quits: gggpkm_ (~gggpkm@111.63.14.115) (Ping timeout: 250 seconds)
[08:31:19] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[08:39:52] *** Quits: linguist (~brunildz@170.84.56.192) (Ping timeout: 252 seconds)
[08:42:32] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[08:43:21] *** Quits: Jonno_FTW (~come@api.carswap.me) (Ping timeout: 248 seconds)
[08:44:44] *** Joins: binary01 (~binary01@192.110.171.216)
[08:50:23] *** Quits: ArchNoob (~maotora@user/archnoob) (Ping timeout: 250 seconds)
[08:50:54] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[08:52:04] *** Joins: mei (~mei@user/mei)
[08:56:55] *** Quits: mutandis (~mut@c-73-129-211-144.hsd1.md.comcast.net) (Quit: zzzz)
[08:58:27] *** Joins: gggpkm_ (~gggpkm@222.128.56.240)
[08:58:45] *** Joins: Akimb (~Akimb@86.100.13.100)
[08:58:52] *** Quits: Snyp (~Snyp@49.207.225.119) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[08:59:22] *** Quits: VoidNoir0 (~VoidNoir0@72.80.203.52) (Quit: Ping timeout (120 seconds))
[09:00:07] *** Quits: tonelo (~tonelo@host-82-63-114-167.business.telecomitalia.it) (Quit: Ping timeout (120 seconds))
[09:00:20] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[09:01:06] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 250 seconds)
[09:02:30] *** Joins: Snyp (~Snyp@49.207.225.119)
[09:03:35] *** Quits: Snyp (~Snyp@49.207.225.119) (Client Quit)
[09:06:10] *** Quits: electrostatic (~electrost@2601:600:8600:5a1:206a:2cae:5bdf:f980) (Ping timeout: 240 seconds)
[09:09:32] <onosendi> Form error, 400 or 422 response?
[09:10:50] *** Joins: huytd (uid121268@id-121268.highgate.irccloud.com)
[09:11:46] *** Quits: montybanksnyc[]x (~montybank@pool-71-127-199-18.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[09:11:56] <wroathe> onosendi: It depends on what the former error is
[09:12:30] <onosendi> "Field is required" - 422?
[09:13:36] <wroathe> onosendi: I would probably go with 400
[09:14:31] <wroathe> onosendi: https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.1
[09:15:37] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Ping timeout: 252 seconds)
[09:18:46] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[09:19:32] *** Quits: binary01 (~binary01@192.110.171.216) (Quit: Leaving)
[09:20:02] *** Joins: Jonno_FTW (~come@api.carswap.me)
[09:20:45] *** Quits: w0ng (~w0ng@185.218.127.67) (Ping timeout: 256 seconds)
[09:21:01] *** Joins: binary01 (~binary01@192.110.171.216)
[09:22:07] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[09:22:34] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.2)
[09:23:07] *** Quits: gggpkm_ (~gggpkm@222.128.56.240) (Ping timeout: 240 seconds)
[09:25:03] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[09:25:26] *** Joins: gggpkm_ (~gggpkm@60.10.23.160)
[09:25:26] *** Joins: w0ng (~w0ng@185.218.127.67)
[09:26:38] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (*.net *.split)
[09:26:38] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[09:26:38] *** Quits: hendursaga (~weechat@user/hendursaga) (*.net *.split)
[09:26:38] *** Quits: undefined_bob1 (~undefined@user/undefined-bob/x-5411918) (*.net *.split)
[09:26:38] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (*.net *.split)
[09:26:38] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (*.net *.split)
[09:28:16] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 252 seconds)
[09:33:47] *** Joins: onizu (uid373383@id-373383.highgate.irccloud.com)
[09:34:55] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[09:37:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:37:20] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[09:37:29] *** Joins: undefined_bob1 (~undefined@user/undefined-bob/x-5411918)
[09:37:35] *** Joins: hendursaga (~weechat@user/hendursaga)
[09:43:59] *** Quits: w0ng (~w0ng@185.218.127.67) (Ping timeout: 256 seconds)
[09:46:34] *** Joins: w0ng (~w0ng@185.218.127.67)
[09:49:15] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:49:15] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:49:15] *** Joins: wroathe (~wroathe@user/wroathe)
[09:53:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[10:01:21] <Puyo> i'm trying to use a Proxy to save to json whenever `data` gets modified, but it doesn't get ran? https://hastebin.com/wupebekowa.ts
[10:03:01] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[10:04:10] *** Quits: gggpkm_ (~gggpkm@60.10.23.160) (Ping timeout: 240 seconds)
[10:08:23] <Cork> Puyo: proxy is for the object you give it, not nested objects
[10:09:05] <Cork> if you change guildData.rolMenu.message to data.guilds = it works
[10:12:11] <Puyo> data.guilds is an array of objects, i need to .find()
[10:12:21] <Cork> Puyo: your missing the point
[10:12:25] <Puyo> oh wait
[10:12:26] <Puyo> i'm dumb
[10:12:27] <Puyo> nevermind
[10:12:32] <Cork> the proxy hangs on the object not all its children
[10:12:33] <Puyo> i think i get it
[10:12:55] <Cork> so you need a getter and it needs to wrap returned objects/arrays with a new proxy
[10:14:20] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 250 seconds)
[10:17:38] *** Joins: aniruddha (uid340443@id-340443.charlton.irccloud.com)
[10:17:52] *** Quits: codebam (~codebam@user/codebam) (Quit: WeeChat 3.2)
[10:18:10] *** Joins: codebam (~codebam@user/codebam)
[10:18:56] *** Quits: vqueiroz (uid340368@id-340368.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[10:19:35] <Puyo> is MDN down? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect is giving a 404 but i clicked on a link from MDN itself so like i didn't mistype it or anything
[10:20:06] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[10:21:08] *** Joins: Snyp (~Snyp@49.207.225.119)
[10:21:31] <Maxdamantus> What colour was the link?
[10:22:14] *** Quits: Snyp (~Snyp@49.207.225.119) (Client Quit)
[10:22:46] *** Joins: Snyp (~Snyp@49.207.225.119)
[10:23:48] <Cork> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect works for me, so i'm guessing it is a cdn node out of sync
[10:23:51] *** Quits: Snyp (~Snyp@49.207.225.119) (Client Quit)
[10:24:08] *** Quits: codebam (~codebam@user/codebam) (Quit: WeeChat 3.2)
[10:24:26] *** Joins: Snyp (~Snyp@49.207.225.119)
[10:25:31] *** Quits: Snyp (~Snyp@49.207.225.119) (Client Quit)
[10:26:06] *** Joins: Snyp (~Snyp@49.207.225.119)
[10:27:11] *** Quits: Snyp (~Snyp@49.207.225.119) (Client Quit)
[10:27:19] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[10:27:43] *** Joins: Snyp (~Snyp@49.207.225.119)
[10:29:10] *** Quits: Snyp (~Snyp@49.207.225.119) (Client Quit)
[10:29:43] *** Joins: Snyp (~Snyp@49.207.225.119)
[10:30:48] *** Quits: Snyp (~Snyp@49.207.225.119) (Client Quit)
[10:30:56] *** Joins: codebam (~codebam@user/codebam)
[10:31:28] *** Joins: Snyp (~Snyp@49.207.225.119)
[10:32:06] *** Quits: Snyp (~Snyp@49.207.225.119) (Client Quit)
[10:33:23] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[10:41:28] *** Joins: earendel (uid498179@user/earendel)
[10:44:35] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:45:10] *** Quits: falafel_ (~falafel@2601:280:4e00:9970:889a:3513:448f:30e9) (Ping timeout: 240 seconds)
[10:47:23] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[10:56:13] *** Joins: vysn (~vysn@user/vysn)
[10:57:26] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[10:58:36] *** undefined_bob1 is now known as undefined_bob
[10:59:11] <sheetjs> Sorry, the page /en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect could not be found.
[11:00:07] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 252 seconds)
[11:02:52] *** Joins: fef (~thedawn@user/thedawn)
[11:03:34] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Quit: A lol made me boom.)
[11:06:00] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[11:06:49] <gkatsev> same
[11:07:03] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Quit: Leaving)
[11:07:16] *** Quits: binary01 (~binary01@192.110.171.216) (Ping timeout: 252 seconds)
[11:07:19] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[11:10:23] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[11:13:42] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 250 seconds)
[11:22:29] *** Quits: jazzy2 (~jaziz@2600:380:874b:fa95:2c89:c0e7:973c:7ad) (Ping timeout: 250 seconds)
[11:22:41] *** Joins: silasfox11 (~silasfox@xdsl-195-14-217-183.nc.de)
[11:23:22] *** Joins: wroathe (~wroathe@user/wroathe)
[11:23:33] *** Quits: silasfox11 (~silasfox@xdsl-195-14-217-183.nc.de) (Client Quit)
[11:23:54] *** Joins: silasfox9 (~silasfox@xdsl-195-14-217-183.nc.de)
[11:24:26] *** Quits: silasfox9 (~silasfox@xdsl-195-14-217-183.nc.de) (Client Quit)
[11:26:05] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[11:27:12] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[11:27:37] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Ping timeout: 252 seconds)
[11:28:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[11:28:43] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 252 seconds)
[11:30:22] *** Joins: user217_ (~andrii@68.183.215.143)
[11:31:40] *** Quits: Akimb (~Akimb@86.100.13.100) (Read error: Connection reset by peer)
[11:32:19] *** Joins: electrostatic (~electrost@2601:600:8600:5a1:206a:2cae:5bdf:f980)
[11:35:18] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:35:39] *** Quits: user217_ (~andrii@68.183.215.143) (Quit: Konversation terminated!)
[11:37:29] *** Joins: ArchNoob (~maotora@user/archnoob)
[11:40:33] *** Quits: huytd (uid121268@id-121268.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[11:42:50] *** Joins: binary01 (~binary01@192.110.171.216)
[11:42:55] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[11:43:17] *** Quits: mikrosis (~mikrosis@dynamic-046-114-172-116.46.114.pool.telefonica.de) (Ping timeout: 250 seconds)
[11:45:20] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 250 seconds)
[11:48:00] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[11:49:20] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[11:51:38] *** Joins: Akimb (~Akimb@82-135-197-171.static.zebra.lt)
[11:53:24] *** Joins: rcoote (~rcoote@2a02:908:692:81c0:6d80:8d6:c267:287c)
[11:57:07] *** Quits: binary01 (~binary01@192.110.171.216) (Ping timeout: 240 seconds)
[11:59:28] *** Joins: kakashiA1 (~kakashi@ppp-188-174-48-91.dynamic.mnet-online.de)
[12:04:34] *** Quits: kill (~killown@user/killown) (Quit: Leaving)
[12:06:41] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 250 seconds)
[12:12:27] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 240 seconds)
[12:13:07] *** Joins: Axy (~Axy@user/axy)
[12:16:24] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[12:16:42] *** Quits: trinity (uid509475@user/trinity) (Quit: Connection closed for inactivity)
[12:17:50] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 250 seconds)
[12:21:40] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-60.prtc.net)
[12:22:03] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[12:32:49] *** Joins: fef (~thedawn@user/thedawn)
[12:33:19] *** Joins: sri19 (uid477846@id-477846.charlton.irccloud.com)
[12:35:22] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:45] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[12:38:57] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:41:16] *** Joins: wintersky (uid453465@id-453465.helmsley.irccloud.com)
[12:41:50] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[12:45:42] *** Joins: Guest3 (~Guest3@116.68.99.39)
[12:47:23] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[12:47:54] *** Joins: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr)
[12:48:19] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[12:49:05] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:03:46] *** Joins: daoudr (~daoudr@2a02:1205:c681:1650:35d2:366b:fb03:59ee)
[13:06:20] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[13:07:34] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:09:31] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[13:09:45] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[13:09:52] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[13:09:53] *** Joins: CoolerX (~CoolerX@user/coolerx)
[13:10:04] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[13:12:12] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[13:14:14] *** Joins: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:14:14] *** Quits: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Changing host)
[13:14:14] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[13:15:25] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[13:24:27] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[13:27:24] *** Joins: gggpkm_ (~gggpkm@123.113.189.101)
[13:29:43] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 252 seconds)
[13:29:53] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Ping timeout: 250 seconds)
[13:31:40] *** Quits: cisme_ (~cisme_@user/cisme/x-1186982) (Ping timeout: 240 seconds)
[13:41:50] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:45:54] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[13:46:47] *** Joins: fef (~thedawn@user/thedawn)
[13:46:49] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 248 seconds)
[13:47:08] *** Joins: pulse (~pulse@user/pulse)
[13:49:57] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[13:51:31] *** Joins: WishBoy (~WishBoy@user/wishboy)
[13:51:38] *** Quits: WishBoy (~WishBoy@user/wishboy) (Client Quit)
[13:52:02] *** Quits: Guest3 (~Guest3@116.68.99.39) (Quit: Client closed)
[13:52:17] *** Joins: gggp (~textual@60.10.194.43)
[13:52:22] *** Joins: WishBoy (~WishBoy@user/wishboy)
[13:52:53] *** Quits: gggp (~textual@60.10.194.43) (Client Quit)
[13:53:24] *** Joins: CoolerX (~CoolerX@user/coolerx)
[13:57:05] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.2)
[13:59:52] *** Joins: dhrv0x (~dhrv0x@111.93.81.198)
[14:02:10] *** Joins: jazzy (~jaziz@2600:380:842b:9c51:c88b:6426:3ff5:7404)
[14:03:05] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[14:03:30] *** Joins: Karatsuba (~jamer05@user/jamer05)
[14:04:47] *** Quits: gggpkm_ (~gggpkm@123.113.189.101) (Ping timeout: 240 seconds)
[14:10:10] *** Joins: A_Dragon (A_D@doom-tower.awesome-dragon.science)
[14:10:19] *** Parts: A_Dragon (A_D@doom-tower.awesome-dragon.science) (WeeChat 3.2)
[14:12:20] *** Joins: peteyboy1 (~peteyboy1@95.169.235.10)
[14:13:59] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[14:15:14] *** Joins: Swant (~swant@libera/staff/swant)
[14:19:05] *** Joins: dev0 (~dev0@user/deepspace-link)
[14:22:40] *** Quits: electrostatic (~electrost@2601:600:8600:5a1:206a:2cae:5bdf:f980) (Ping timeout: 240 seconds)
[14:24:48] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Ping timeout: 250 seconds)
[14:25:12] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[14:27:58] *** Joins: CiaoSen (~Jura@p200300c9571d3d002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:28:32] *** Joins: silly_ (~silly@user/silly)
[14:29:36] *** Quits: silly (~silly@user/silly) (Read error: Connection reset by peer)
[14:30:02] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:30:02] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:30:02] *** Joins: wroathe (~wroathe@user/wroathe)
[14:30:53] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[14:31:48] *** Joins: electrostatic (~electrost@2601:600:8600:5a1:206a:2cae:5bdf:f980)
[14:33:02] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[14:33:31] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 252 seconds)
[14:34:36] *** Quits: shailangsa_ (~shailangs@host86-185-102-120.range86-185.btcentralplus.com) (Remote host closed the connection)
[14:34:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:36:04] *** Joins: Snyp (~Snyp@49.207.225.119)
[14:37:27] *** Joins: Heraes (~Heraes@119.12.203.77.rev.sfr.net)
[14:37:27] *** Quits: Heraes (~Heraes@119.12.203.77.rev.sfr.net) (Changing host)
[14:37:27] *** Joins: Heraes (~Heraes@user/romarain)
[14:37:29] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 248 seconds)
[14:37:33] *** Quits: Heraes (~Heraes@user/romarain) (Client Quit)
[14:39:01] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[14:42:55] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[14:45:02] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[14:46:47] *** Quits: tkob (tkob@user/thekingofbandit) (Ping timeout: 240 seconds)
[14:48:13] *** Joins: federico_it (~textual@151.95.116.125)
[14:50:18] *** Joins: keypusher (~keypusher@user/keypusher)
[14:50:22] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-60.prtc.net) (Ping timeout: 246 seconds)
[14:50:55] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 250 seconds)
[14:51:31] *** Joins: peteyboy_ (~peteyboy1@95.169.235.10)
[14:54:40] *** Quits: keypusher (~keypusher@user/keypusher) (Ping timeout: 240 seconds)
[14:54:40] *** Quits: peteyboy1 (~peteyboy1@95.169.235.10) (Ping timeout: 240 seconds)
[14:54:41] *** Joins: keypushe- (keypusher@user/keypusher)
[14:54:49] *** Quits: electrostatic (~electrost@2601:600:8600:5a1:206a:2cae:5bdf:f980) (Ping timeout: 250 seconds)
[14:57:10] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Ping timeout: 240 seconds)
[14:57:20] *** Quits: dhrv0x (~dhrv0x@111.93.81.198) (Remote host closed the connection)
[14:57:56] *** keypushe- is now known as keypusher
[15:01:07] <DnzAtWrk> argument to always put } or ] or a new line
[15:01:11] <DnzAtWrk> with comma preceeding it
[15:01:20] <DnzAtWrk> you can easily comment away elements
[15:04:08] *** Joins: shailangsa (~shailangs@host86-185-102-120.range86-185.btcentralplus.com)
[15:04:41] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 248 seconds)
[15:10:10] <Maxdamantus> I don't have a strong opinion on whether to include an optional comma, but I really wish people would apply the same pattern to ( )
[15:10:34] <Maxdamantus> if(
[15:10:37] <Maxdamantus>   foo
[15:10:44] <Maxdamantus> ){ .. }
[15:17:34] *** Quits: Enissay (~Enissay@user/enissay) (Quit: WeeChat 3.0)
[15:18:07] *** Quits: CiaoSen (~Jura@p200300c9571d3d002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:18:31] *** Joins: Enissay (~Enissay@user/enissay)
[15:19:11] *** Joins: CiaoSen (~Jura@p549cbd40.dip0.t-ipconnect.de)
[15:20:00] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[15:26:51] *** Joins: RougeR (~rougex250@user/rouger)
[15:26:58] *** Quits: RougeR (~rougex250@user/rouger) (Client Quit)
[15:27:58] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[15:31:17] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[15:32:57] *** Quits: roadt__ (~roadt@117.64.147.227) (Ping timeout: 250 seconds)
[15:35:27] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[15:36:02] *** Joins: cisme_ (~cisme_@2600:1700:d980:1a40:d61e:b9ba:b4c9:6a22)
[15:36:15] *** Quits: cisme_ (~cisme_@2600:1700:d980:1a40:d61e:b9ba:b4c9:6a22) (Changing host)
[15:36:15] *** Joins: cisme_ (~cisme_@user/cisme/x-1186982)
[15:40:23] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[15:43:22] *** Quits: Karatsuba (~jamer05@user/jamer05) (Ping timeout: 252 seconds)
[15:46:04] *** Joins: roadt__ (~roadt@60.166.84.108)
[15:48:40] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.1 Beta Build (2021/08/25 UTC) 64 Bit)
[15:48:58] *** Joins: Tempesta (~Tempesta@user/tempesta)
[15:55:21] <ashnur> i think you should put spaces in statements and no spaces in expressions
[15:55:39] <ashnur> unless the whole page is a single expression
[15:56:55] *** Joins: Drgonz0 (~Drgonz0@107-179-254-222.cpe.teksavvy.com)
[15:57:42] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[15:58:46] *** Joins: nik (~nik777@vpn-users-dip-pool165.dip.cf.ac.uk)
[15:59:21] *** Joins: gggpkm (~gggpkm@111.63.14.115)
[16:00:22] *** Joins: kakashiAL (~kakashi@ppp-188-174-48-91.dynamic.mnet-online.de)
[16:00:41] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 248 seconds)
[16:02:44] *** Quits: kakashiA1 (~kakashi@ppp-188-174-48-91.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[16:05:33] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[16:10:17] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 248 seconds)
[16:11:36] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[16:13:58] <Cyp_> n> var i = Math.sqrt(5); (92-44*i)*Math.cos(71) - (54-22*i)*Math.cos(142) + (16-8*i)*Math.cos(213) - (3-i)*Math.cos(284) + 25*i
[16:13:59] <jellobot> (okay) 60
[16:16:22] *** Parts: mannu (mannu@wodanaz.se) (WeeChat 3.2)
[16:19:12] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 250 seconds)
[16:19:20] <spynxic> Cyp_: turning something?
[16:19:49] <spynxic> n> var i = Math.sqrt(10); (92-44*i)*Math.cos(71) - (54-22*i)*Math.cos(142) + (16-8*i)*Math.cos(213) - (3-i)*Math.cos(284) + 25*i
[16:19:50] <jellobot> (okay) 73.5555928848014
[16:20:43] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[16:23:06] *** Quits: rcoote (~rcoote@2a02:908:692:81c0:6d80:8d6:c267:287c) (Ping timeout: 250 seconds)
[16:23:20] *** Joins: rcoote (~rcoote@2a02:908:692:81c0:6c37:4335:c613:ea16)
[16:26:40] *** Quits: rexar89 (~alexi5@208.83.82.233) (Ping timeout: 240 seconds)
[16:30:07] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[16:30:11] *** Joins: undefined_bob1 (~undefined@user/undefined-bob/x-5411918)
[16:30:54] *** Quits: undefined_bob (~undefined@user/undefined-bob/x-5411918) (Killed (NickServ (GHOST command used by undefined_bob1)))
[16:31:10] *** undefined_bob1 is now known as undefined_bob
[16:38:26] <Cyp_> It's actually only about 59.999999999999999999993..., not 60.
[16:38:48] *** Joins: cth (~Cthulchu@193.194.107.250)
[16:41:02] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[16:41:47] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 240 seconds)
[16:42:53] *** Joins: gggpkm_ (~gggpkm@60.10.23.160)
[16:44:21] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[16:44:54] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[16:45:19] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 250 seconds)
[16:45:19] *** Quits: gggpkm (~gggpkm@111.63.14.115) (Ping timeout: 250 seconds)
[16:45:53] <Maxdamantus> ashnur: what if the expression has a statement in it?
[16:46:21] *** Quits: CiaoSen (~Jura@p549cbd40.dip0.t-ipconnect.de) (Quit: CiaoSen)
[16:46:25] <Maxdamantus> (also, I assume you meant "newlines", not "spaces")
[16:47:09] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[16:47:13] *** Joins: CiaoSen (~Jura@p549cbd40.dip0.t-ipconnect.de)
[16:47:25] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[16:47:36] <Maxdamantus> The fact that JS actually distinguishes between expressions and statements is somewhat arbitrary anyway.
[16:47:37] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 248 seconds)
[16:49:35] <Maxdamantus> Ignoring some issues around syntactic ambiguity, blocks could have been decided to be an expression construction rather than a statement construction, allowing something like: const foo = { const bar = 4; 5 + bar; };
[16:55:24] <silly_> https://www.sciencealert.com/scientists-used-stem-cells-to-make-mini-brains-they-grew-rudimentary-eyes
[16:55:43] <silly_> consider it an unfinished meme
[16:56:46] *** Joins: cth (~Cthulchu@193.194.107.250)
[16:58:19] *** Quits: drew (~drew@user/drew) (Ping timeout: 250 seconds)
[16:59:13] *** Joins: pulse (~pulse@user/pulse)
[16:59:37] *** Quits: dsrt^ (~dsrt@12.16.129.111) (Ping timeout: 250 seconds)
[16:59:49] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[17:00:06] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[17:01:28] *** Quits: CiaoSen (~Jura@p549cbd40.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[17:03:09] *** Quits: sri19 (uid477846@id-477846.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[17:03:40] *** Joins: gehn (~gehn@user/gehn)
[17:04:10] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 240 seconds)
[17:05:29] *** Joins: diamondbond (~diamondbo@175.157.119.87)
[17:06:22] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[17:10:40] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[17:13:54] *** Joins: kill (~killown@user/killown)
[17:21:33] *** Joins: thiras (~thiras@user/thiras)
[17:22:03] *** Joins: earendel (uid498179@user/earendel)
[17:32:04] *** Quits: Akimb (~Akimb@82-135-197-171.static.zebra.lt) (Read error: Connection reset by peer)
[17:32:24] *** Joins: moldorcoder7 (~moldorcod@77.47.48.24)
[17:33:12] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:34:54] *** Joins: linguist (~brunodOut@170.84.56.192)
[17:36:51] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:37:16] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:38:10] *** Quits: Haxxa (~Haxxa@122.199.46.17) (Ping timeout: 240 seconds)
[17:40:14] *** Joins: user217_ (~andrii@68.183.215.143)
[17:41:58] *** Joins: CoolerX (~CoolerX@user/coolerx)
[17:44:43] *** Joins: binary01 (~binary01@192.110.171.216)
[17:46:55] <CoolerX> Hi
[17:47:03] <CoolerX> Why is this producing an empty string at the end? https://jsfiddle.net/4c2Ln9m1/
[17:47:27] <CoolerX> the split works as expected except the last empty string
[17:47:41] *** Joins: Haxxa (~Haxxa@122.199.45.213)
[17:48:46] <CoolerX> actually even 'abc'.split('c
[17:48:53] <CoolerX> actually even 'abc'.split('c') gives an empty string at the end
[17:50:27] <KevinX> THat's the expected behavior
[17:51:37] <KevinX> you can filter it out with .filter(Boolean) or if you know the length you want, then split takes a second param
[17:54:42] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Remote host closed the connection)
[17:54:58] *** Quits: diamondbond (~diamondbo@175.157.119.87) (Quit: Leaving)
[17:55:01] *** Joins: michaelis (~michaelis@193.183.209.17)
[17:55:26] *** Parts: michaelis (~michaelis@193.183.209.17) ()
[17:56:13] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[17:57:11] *** Joins: paule32_ (~paule32@user/paule32)
[17:58:15] <linguist> cis, thanks for the suggestion yesterday, jest is great, I kinda loved it!
[17:58:34] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[17:59:32] *** Joins: paule32__ (~paule32@user/paule32)
[18:00:29] *** Joins: fweht (uid404746@id-404746.tooting.irccloud.com)
[18:00:41] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 248 seconds)
[18:02:31] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 252 seconds)
[18:03:11] *** Joins: paule32 (~paule32@user/paule32)
[18:03:27] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 240 seconds)
[18:05:49] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 252 seconds)
[18:07:12] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[18:07:32] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 250 seconds)
[18:09:10] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[18:11:40] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[18:21:35] *** Quits: user217_ (~andrii@68.183.215.143) (Quit: Konversation terminated!)
[18:21:35] *** Quits: moldorcoder7 (~moldorcod@77.47.48.24) (Ping timeout: 250 seconds)
[18:22:26] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[18:25:55] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:25:55] *** Quits: nik (~nik777@vpn-users-dip-pool165.dip.cf.ac.uk) (Quit: Leaving)
[18:27:46] <Cyp_> n> var p = (w, x, y) => (x = x || 1) === y? x : p(w, (x + w/x)/2, x); p(6) * p(10) / p(15)
[18:27:47] <jellobot> (okay) 1.9999999999999996
[18:31:25] *** Joins: gggp (~textual@60.10.23.160)
[18:33:10] *** Joins: Akimb (~Akimb@86.100.13.100)
[18:33:40] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[18:36:13] *** Joins: CiaoSen (~Jura@p549cbd40.dip0.t-ipconnect.de)
[18:38:18] *** Quits: OhTheCode (~OhTheCode@143.165.220.203.dial.dynamic.acc01-west-rcm.comindico.com.au) (Ping timeout: 250 seconds)
[18:38:51] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[18:44:53] *** Joins: rexar89 (~alexi5@208.83.82.233)
[18:48:23] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[18:49:56] *** Joins: OhTheCode (~OhTheCode@123-243-228-45.tpgi.com.au)
[18:50:08] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[18:54:55] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[18:56:02] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:56:02] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:56:02] *** Joins: wroathe (~wroathe@user/wroathe)
[18:56:08] <ashnur> Maxdamantus, show me one :D
[18:56:58] *** Quits: undefined_bob (~undefined@user/undefined-bob/x-5411918) (Quit: WeeChat 1.5)
[18:57:50] *** Quits: kill (~killown@user/killown) (Quit: Leaving)
[18:58:12] *** Quits: Akimb (~Akimb@86.100.13.100) (Read error: Connection reset by peer)
[18:59:14] <wintersky> hell?
[19:00:20] <wintersky> are you sure you want see it
[19:00:27] <wintersky> maybe you prefer to be blind
[19:02:10] <ashnur> Maxdamantus, and I just meant the spaces around/between parens and keywords.
[19:02:17] *** Joins: mikrosis (~mikrosis@dynamic-046-114-174-183.46.114.pool.telefonica.de)
[19:03:02] *** Joins: voltage_ (voltage@user/voltage)
[19:04:43] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[19:04:46] <wintersky> we wre polishing our swords
[19:06:05] *** Quits: gggpkm_ (~gggpkm@60.10.23.160) (Remote host closed the connection)
[19:06:25] *** Joins: gggpkm_ (~gggpkm@60.10.23.160)
[19:07:01] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Ping timeout: 250 seconds)
[19:08:04] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[19:09:23] *** Joins: daoudr_ (~daoudr@212.102.37.207)
[19:10:53] *** Joins: pulse (~pulse@user/pulse)
[19:12:06] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:35d2:366b:fb03:59ee) (Ping timeout: 250 seconds)
[19:12:27] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[19:12:44] <CuriousErnestBro> n> 1+1
[19:12:45] <jellobot> (okay) 2
[19:12:54] <CuriousErnestBro> n> 0/0
[19:12:55] <jellobot> (okay) NaN
[19:18:57] *** Joins: brunodOut (~brunodOut@170.84.56.192)
[19:21:13] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Ping timeout: 248 seconds)
[19:22:56] *** Quits: linguist (~brunodOut@170.84.56.192) (Ping timeout: 250 seconds)
[19:24:33] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[19:25:59] *** Joins: fef (~thedawn@user/thedawn)
[19:26:17] *** Quits: binary01 (~binary01@192.110.171.216) (Remote host closed the connection)
[19:26:33] *** Joins: binary01 (~binary01@192.110.171.216)
[19:27:56] *** Joins: wovixo (~wovixo@128.104.205.49)
[19:29:16] *** Joins: drew (~drew@user/drew)
[19:32:23] *** Joins: nomic (~nomic@185.217.117.169)
[19:34:50] *** Joins: zebrag (~chris@user/zebrag)
[19:36:55] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 250 seconds)
[19:38:57] *** Quits: nomic (~nomic@185.217.117.169) (Quit: Leaving)
[19:41:09] *** Joins: tkob (tkob@user/thekingofbandit)
[19:42:19] *** Joins: gggp (~textual@60.10.194.43)
[19:44:54] *** Joins: nomic (~nomic@185.217.117.169)
[19:45:28] *** Quits: binary01 (~binary01@192.110.171.216) (Remote host closed the connection)
[19:45:43] *** Joins: binary01 (~binary01@192.110.171.216)
[19:46:47] *** Quits: daoudr_ (~daoudr@212.102.37.207) (Ping timeout: 240 seconds)
[19:47:03] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:48:07] *** Quits: mikrosis (~mikrosis@dynamic-046-114-174-183.46.114.pool.telefonica.de) (Ping timeout: 252 seconds)
[19:49:13] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[19:50:47] *** Quits: dreamreal (~joeo@about/java/dreamreal) (Ping timeout: 250 seconds)
[19:50:52] *** Quits: gggp (~textual@60.10.194.43) (Ping timeout: 252 seconds)
[19:53:13] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[19:53:38] *** Joins: gehn1 (~gehn@user/gehn)
[19:54:45] *** Joins: qswz (~caub@91-175-196-225.subs.proxad.net)
[19:55:02] <qswz> guys, usually we wrap multiline jsx elements in parenthesis
[19:55:12] <qswz> should we still do it with Fragments?
[19:55:45] <sheetjs> wrap all JSX elements in parens
[19:55:45] <qswz> return (\n  <>\n    <div>...  VS return <>\n  <div>...
[19:56:41] <qswz> sheetjs: ok good, I was confused because npx react-codemod update-react-imports fucked it
[19:56:52] <sheetjs> https://reactjs.org/docs/fragments.html look at the examples
[19:56:55] *** Quits: gehn (~gehn@user/gehn) (Ping timeout: 252 seconds)
[19:56:58] *** Quits: nomic (~nomic@185.217.117.169) (Quit: Leaving)
[19:57:08] <sheetjs> the Short Syntax section is probably most relevant
[19:57:28] <qswz> yep confirmed
[20:03:41] <silly_> return\n should be caught by asi
[20:03:53] *** Quits: brunodOut (~brunodOut@170.84.56.192) (Ping timeout: 248 seconds)
[20:04:01] <sheetjs> JSX = transpiler
[20:04:03] *** Joins: Rockwood (~Rocky@user/rocky)
[20:04:29] <silly_> transpiler has different rules?
[20:04:41] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[20:05:02] <codebam> I just use eslint and it wraps things for me
[20:05:25] <codebam> then complains about parent elements when I need a fragment
[20:05:27] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Read error: Connection reset by peer)
[20:05:45] <silly_> in any case, i'd expect `return\n` to be equal to `return;`
[20:05:55] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[20:06:20] <sheetjs> silly_:  a transpiler can "correct" for the difference return \n<></> transpiles
[20:06:30] <silly_> "can"
[20:07:02] <sheetjs> ASI rules apply to JS specifically, not to any language that transpiles down to JS
[20:07:02] <silly_> ideally, it does not
[20:07:33] <sheetjs> its an interesting question
[20:07:56] <sheetjs> when should a compile-to-js language adjust for common pitfalls
[20:08:17] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[20:08:34] <silly_> that would just add more confusion imo
[20:09:20] <sheetjs> JSX threw xml into javascript
[20:10:08] <silly_> yea and that's confusing enough
[20:11:39] *** Joins: cth (~Cthulchu@193.194.107.250)
[20:13:00] <systemfault> Anyway, its a non-problem, linters can help with that
[20:13:26] <systemfault> JS is just too sloppy of a language to be usable without one.
[20:15:51] *** Joins: grapheti (~grapheti@dynamic42-98-142-74.dobsonteleco.com)
[20:17:27] <silly_> i feel like bash and sh are worse
[20:17:42] <sheetjs> bash/sh and JS have rules that you can learn
[20:17:45] *** Quits: binary01 (~binary01@192.110.171.216) (Ping timeout: 248 seconds)
[20:17:50] *** Joins: Rockwood (~Rocky@user/rocky)
[20:18:16] <sheetjs> difference is that bash/sh don't see yearly updates or new transpiled languages popping up
[20:19:14] <Rockwood> sheetjs, o/
[20:21:19] *** Joins: dreamreal (~joeo@about/java/dreamreal)
[20:21:33] *** Quits: jazzy (~jaziz@2600:380:842b:9c51:c88b:6426:3ff5:7404) (Ping timeout: 250 seconds)
[20:21:46] <silly_> ey sheetjs \o
[20:25:18] *** Joins: huytd (uid121268@id-121268.highgate.irccloud.com)
[20:25:40] *** Quits: gggpkm_ (~gggpkm@60.10.23.160) (Ping timeout: 240 seconds)
[20:26:27] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-5-235.prtc.net)
[20:28:10] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Read error: error:1408F10B:SSL routines:ssl3_get_record:wrong version number)
[20:28:33] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[20:33:11] *** Quits: codebam (~codebam@user/codebam) (Quit: ZNC 1.8.2 - https://znc.in)
[20:34:03] *** Joins: codebam (~codebam@user/codebam)
[20:34:51] <qswz> bash/sh=ba
[20:37:36] <Rockwood> \o/
[20:40:08] *** Quits: fweht (uid404746@id-404746.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[20:41:44] *** Joins: binary01 (~binary01@192.110.171.216)
[20:42:17] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
[20:44:05] <cth> folks, anyone knows anything about teams docs? Microsoft's attempt to compete with G. Do they have JS-based automation there too?
[20:44:46] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 252 seconds)
[20:45:21] *** Joins: Axy (~Axy@user/axy)
[20:46:40] *** Joins: Rockwood_ (~Rocky@user/rocky)
[20:47:10] *** Quits: Rockwood_ (~Rocky@user/rocky) (Remote host closed the connection)
[20:47:30] *** Joins: Rockwood_ (~Rocky@user/rocky)
[20:48:37] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 252 seconds)
[20:48:41] *** Quits: Rockwood_ (~Rocky@user/rocky) (Read error: Connection reset by peer)
[20:49:01] *** Joins: Rockwood (~Rocky@user/rocky)
[20:53:52] *** Quits: Rockwood (~Rocky@user/rocky) (Remote host closed the connection)
[20:55:38] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[20:56:41] <FlorianBad> So in javascript substr doesn't have a replacement parameter? What if I want to just remove the first character but the data is huge, doing `str = str.substr(1)` seems silly
[20:57:32] *** Quits: codebam (~codebam@user/codebam) (Quit: ZNC 1.8.2 - https://znc.in)
[20:57:58] *** Joins: codebam (~codebam@user/codebam)
[20:59:03] <lf94> someone explain to me the benefit of using http verbs at all
[20:59:09] <lf94> why not just write everything as sentences
[20:59:17] <lf94> "delete user 3"
[20:59:31] <lf94> or some json structured thing
[20:59:33] *** Joins: vysn (~vysn@user/vysn)
[21:00:55] *** Joins: codebam_ (~codebam@user/codebam)
[21:01:05] <silly_> !substring @FlorianBad
[21:01:05] <jellobot> FlorianBad, "substr" is nonstandard/deprecated. "substring" can't handle negative indices, and weirdly sorts its arguments. "slice" works exactly as you'd expect, and identically to Array#slice. Always use slice on strings.
[21:01:54] <FlorianBad> jellobot: ah nice, thanks. So slice treats the string as an array of characters and doesn't reconstruct the whole thing?
[21:02:06] <silly_> !about @FlorianBad
[21:02:06] <jellobot> FlorianBad, I'm written entirely in JavaScript using Node.js. Look under the hood on Github: <https://github.com/oftn/oftn-bot>
[21:02:32] <FlorianBad> lol
[21:03:38] <FlorianBad> silly: well, slice doesn't modify the original string...
[21:03:39] <GreenJello> silly_, there's actually a special case in the bot for !source, but didn't know !about exists
[21:03:47] *** Quits: codebam_ (~codebam@user/codebam) (Client Quit)
[21:03:55] <silly_> !about
[21:03:56] <jellobot> silly_, I'm written entirely in JavaScript using Node.js. Look under the hood on Github: <https://github.com/oftn/oftn-bot>
[21:04:09] <silly_> !learn doesn't worx?
[21:04:11] <ljharb> `!about` is referring to the old ecmabot
[21:04:21] <silly_> /msg jellobot !learn about=I'm written entirely in JavaScript using Node.js. Look under the hood on Github: <https://github.com/brigand/jellobot>
[21:04:28] <ljharb> we're still hoping ecmabot comes back
[21:04:40] <silly_> why is that?
[21:04:40] <ljharb> or, that we'll get confirmation it's not
[21:04:42] <FlorianBad> I'm really looking for a super-efficient equivalent of `fst_char = substr(str, 0, 1, "")`  Something I can call thousands of times on large data
[21:04:48] <silly_> jellobot, works well
[21:04:51] *** Joins: codebam_ (~codebam@user/codebam)
[21:05:24] <silly_> well, except !learn it seems
[21:06:12] <silly_> FlorianBad, strings are primitives and as such they are immutable
[21:06:27] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Ping timeout: 240 seconds)
[21:06:53] <FlorianBad> silly_: so you recommend me to handle the position instead and not try to modify the string itself?
[21:07:14] <silly_> you'll have to use the return values anyhow
[21:07:44] <silly_> n> x="abc"; x.toUpperCase(); x
[21:07:45] <jellobot> (okay) 'abc'
[21:07:47] <silly_> n> x="abc"; x.toUpperCase()
[21:07:48] <jellobot> (okay) 'ABC'
[21:09:06] <ljharb> FlorianBad: `.slice()` works fine
[21:09:24] <ljharb> FlorianBad: but also, why are you seemingly trying to blindly port an algorithm from anything, let alone what looks like php?
[21:09:38] <FlorianBad> Basically what I'm doing is to parse a lot of string data that was encoded in a very custom way. So I have to go almost character by character. Should I try to store the position I'm at in a var rather than trying to reduce the string at every step?
[21:09:39] *** Joins: Naan (~naan@user/naan)
[21:09:43] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[21:09:48] <ljharb> in JS, all of slice, substring, and substr create a new string, there's no performance difference between them.
[21:09:58] <ljharb> FlorianBad: yes
[21:10:12] <ljharb> in PHP, substr makes a new string too, so that'd be inefficient there as well
[21:10:55] <FlorianBad> (I don't use php)
[21:11:11] <FlorianBad> I was just trying to represent that in an almost neutral way ;)  lol
[21:11:38] <silly_> now there's also replaceAll
[21:11:53] <qswz> substrate are for chemists
[21:11:58] <qswz> substr
[21:12:15] <qswz> use slice
[21:13:52] <silly_> you can also use .replace with a regex, but you'll always have to somehow use the returnvalue
[21:14:28] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 252 seconds)
[21:15:31] <silly_> and whatever returns a new string, can be chained with string methods. "abc".replace(...).slice(...).toUpperCase(...)
[21:16:31] <FlorianBad> yeah I'm not gonna use regex, this thing needs to be ridiculously fast because that will loop a lot if there's a lot of data
[21:18:38] <GreenJello> FlorianBad, best to not assume things are slow without measuring, if it's performance sensitive
[21:18:53] <GreenJello> regex can be faster than string manipulation
[21:19:13] *** Quits: binary01 (~binary01@192.110.171.216) (Quit: Leaving)
[21:19:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 248 seconds)
[21:20:57] *** Quits: codebam_ (~codebam@user/codebam) (Quit: ZNC 1.8.2 - https://znc.in)
[21:21:34] <FlorianBad> GreenJello: isn't slice more like an array manipulation?
[21:21:56] *** Joins: codebam_ (~codebam@user/codebam)
[21:22:53] *** Joins: Betal (~Betal@user/betal)
[21:23:00] <GreenJello> it's a method on both strings and arrays
[21:23:11] <GreenJello> neither is primary
[21:24:22] *** Quits: codebam_ (~codebam@user/codebam) (Client Quit)
[21:24:50] *** Joins: codebam_ (~codebam@user/codebam)
[21:25:38] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:25:39] *** Quits: codebam_ (~codebam@user/codebam) (Client Quit)
[21:25:55] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:25:55] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:25:55] *** Joins: wroathe (~wroathe@user/wroathe)
[21:26:17] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Read error: Connection reset by peer)
[21:26:20] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[21:27:17] *** Joins: Akimb (~Akimb@86.100.13.100)
[21:27:59] *** Joins: codebam_ (~codebam@user/codebam)
[21:28:20] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[21:28:36] *** Quits: codebam (~codebam@user/codebam) (Quit: WeeChat 3.2)
[21:29:10] *** Quits: codebam_ (~codebam@user/codebam) (Remote host closed the connection)
[21:29:10] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Ping timeout: 240 seconds)
[21:30:04] *** Joins: codebam (~codebam@user/codebam)
[21:30:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:30:45] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[21:32:39] *** Joins: Guest80 (~Guest80@ufr-132-230-194-212.eduroam-nat.uni-freiburg.de)
[21:32:51] *** Joins: codebam (~codebam@user/codebam)
[21:33:56] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[21:34:51] *** Joins: codebam (~codebam@user/codebam)
[21:35:31] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[21:36:00] *** Joins: codebam (~codebam@user/codebam)
[21:37:06] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[21:38:01] *** Joins: codebam (~codebam@user/codebam)
[21:38:41] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[21:38:51] <FlorianBad> Let's say I have a huge object that can have a near infinite number of nested objects and arrays with vars and values inside. Is there a way I can POINT to where I am at the moment in all that so that I can then set the value of it? Kinda like a reference to a sub-level in that object, then I just set something like reference=someValue
[21:39:11] *** Joins: codebam (~codebam@user/codebam)
[21:40:16] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[21:40:46] *** Joins: codebam (~codebam@user/codebam)
[21:40:56] *** Joins: linguist (~brunodOut@170.84.56.192)
[21:41:01] <systemfault> Isn't that just a variable?
[21:41:35] <GreenJello> if you need it to be absolute, you can pass an array around that you concat onto when recursing
[21:41:51] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[21:42:27] *** Quits: rcoote (~rcoote@2a02:908:692:81c0:6c37:4335:c613:ea16) (Ping timeout: 240 seconds)
[21:42:58] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[21:43:07] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-5-235.prtc.net) (Quit: Client closed)
[21:43:11] *** Joins: brunodOut (~brunodOut@170.84.56.192)
[21:43:59] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Read error: error:1408F10B:SSL routines:ssl3_get_record:wrong version number)
[21:45:41] <FlorianBad> well, let's say that I Have   `var hugeObject = [ foo : [ 4,5, [ bar: [ ..., ... ] ]]]`  And I want to set the value of  hugeObject.foo[2].bar[1] for example, but without knowing exactly where I am in all this, so instead I'd have some variable that refers to that (which keeps track of where I am by moving relatively) and I then set this var which
[21:45:41] <FlorianBad> affects the hugeObject
[21:45:55] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[21:46:03] *** Quits: ArchNoob (~maotora@user/archnoob) (Ping timeout: 250 seconds)
[21:46:27] *** Quits: rexar89 (~alexi5@208.83.82.233) (Ping timeout: 240 seconds)
[21:47:28] *** Quits: linguist (~brunodOut@170.84.56.192) (Ping timeout: 252 seconds)
[21:47:40] *** brunodOut is now known as linguist
[21:48:16] *** Joins: rcoote (~rcoote@2a02:908:692:81c0:957e:566c:8b56:36fd)
[21:50:27] *** Joins: codebam (~codebam@user/codebam)
[21:54:35] *** Quits: qswz (~caub@91-175-196-225.subs.proxad.net) (Quit: leaving)
[21:55:52] *** Joins: VoidNoir0 (~VoidNoir0@72.80.203.52)
[21:57:22] *** Quits: Guest80 (~Guest80@ufr-132-230-194-212.eduroam-nat.uni-freiburg.de) (Ping timeout: 246 seconds)
[21:58:51] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:719a:db9:6521:9338) (Quit: Textual IRC Client: www.textualapp.com)
[22:09:32] <silly_> you can send do const x = hugeObject.foo[2].bar; then x[1]="somethingnew" will actually affect hugeObject.foo[2].bar
[22:09:55] <silly_> s/send/set
[22:10:31] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[22:10:39] <FlorianBad> ok
[22:11:11] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[22:15:10] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Ping timeout: 240 seconds)
[22:15:40] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[22:16:42] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[22:17:13] *** Joins: rexar89 (~alexi5@208.83.82.233)
[22:17:59] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:1043:b2e8:9541:4e4b)
[22:23:40] <ljharb> FlorianBad: why would you want to mutate tho
[22:25:45] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e481:cfc:129c:1181)
[22:26:54] <FlorianBad> because there's some recursive infinity because of some parsing I'm doing
[22:27:05] *** Joins: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com)
[22:34:09] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[22:34:34] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[22:35:12] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:35:23] *** Joins: Pixi_ (~Pixi@user/pixi)
[22:38:37] *** Quits: Pixi__ (~Pixi@user/pixi) (Ping timeout: 252 seconds)
[22:38:37] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[22:39:04] *** Joins: wroathe (~wroathe@user/wroathe)
[22:42:35] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi)
[22:42:46] *** Quits: byanka (~byanka@78.137.43.40) (Ping timeout: 268 seconds)
[22:43:30] *** Joins: voltage_ (voltage@user/voltage)
[22:45:46] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 252 seconds)
[22:48:27] *** Quits: rcoote (~rcoote@2a02:908:692:81c0:957e:566c:8b56:36fd) (Ping timeout: 240 seconds)
[22:53:57] *** Joins: arthur_melo (~IRC@user/arthur-melo/x-6822691)
[22:54:56] *** Joins: kill (~killown@user/killown)
[22:54:57] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[22:55:38] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[22:56:40] *** Quits: kakashiAL (~kakashi@ppp-188-174-48-91.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[22:57:36] *** Joins: kakashiAL (~kakashi@ppp-188-174-48-91.dynamic.mnet-online.de)
[22:57:47] <FlorianBad> silly_: https://jsfiddle.net/m74L0ago/  so this is perfectly safe to declare `obj` like that and both `out` and `pointer` refer to the same thing?
[22:59:51] <GreenJello> yes
[23:00:10] *** Quits: peteyboy_ (~peteyboy1@95.169.235.10) (Ping timeout: 240 seconds)
[23:00:15] *** Joins: peteyboy1 (~peteyboy1@95.169.235.10)
[23:00:32] <FlorianBad> ok cool. So if I wanted to truly copy the data I would need to wrap it with {} ?  (and [] ) for copying an array?
[23:01:18] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[23:01:48] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:02:16] *** Quits: kakashiAL (~kakashi@ppp-188-174-48-91.dynamic.mnet-online.de) (Ping timeout: 252 seconds)
[23:02:17] *** Joins: coding (~coding@c-24-91-140-28.hsd1.ma.comcast.net)
[23:02:20] <GreenJello> not sure what you mean by that
[23:03:27] *** Quits: coding (~coding@c-24-91-140-28.hsd1.ma.comcast.net) (Client Quit)
[23:04:06] <FlorianBad> well, in my example the data is in memory only once, out and pointer actually point to the same memory space. If I wanted to separate them so that it's a true deep copy of the data I'd wrap things in {} or [] ?
[23:06:39] <GreenJello> there isn't a general way to deep clone things, and I don't see how wrapping would clone anything
[23:07:05] <GreenJello> you can do shallow clones with spread syntax
[23:07:16] <GreenJello> which is probably what you want here
[23:07:47] <silly_> he said deep copy
[23:08:24] <GreenJello> means the same thing as deep clone in JS
[23:08:33] <silly_> yes
[23:08:49] <silly_> it's like the opposite of shallow
[23:09:12] <GreenJello> you very rarely want to deep clone something
[23:09:23] <silly_> he said that
[23:09:52] <GreenJello> and I disagree that it's relevant here
[23:10:09] <GreenJello> there's nothing to deep clone
[23:10:23] <silly_> hugeObject.foo[2].bar[1]
[23:10:31] <FlorianBad> ok, that's a good thing becuase I only wanted to know how because I don
[23:10:35] <FlorianBad> 't actually want to ;)
[23:10:42] <silly_> if he wants to clone something like this, then yes
[23:11:26] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[23:15:43] <pikapika> Is it safe to assume the "implicit integer" rule?
[23:15:51] <pikapika> ie js tries to keep things actual integers as long as practicable
[23:15:53] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 248 seconds)
[23:15:55] *** Joins: noarb (~noarb@user/noarb)
[23:17:39] <silly_> n> 1.0
[23:17:40] <jellobot> (okay) 1
[23:18:16] <pikapika> n>pow(2,63)
[23:18:17] <jellobot> (fail) ReferenceError: pow is not defined
[23:18:21] <pikapika> n>Math.pow(2,63)
[23:18:22] <jellobot> (okay) 9223372036854776000
[23:18:35] <pikapika> n>9223372036854776000+9223372036854775999
[23:18:35] *** Joins: pavonia (~user@user/siracusa)
[23:18:36] <jellobot> (okay) 18446744073709552000
[23:18:46] <pikapika> wai
[23:18:48] <pikapika> wait
[23:18:53] <pikapika> the pow failed of course
[23:19:23] <GreenJello> pikapika, same rules as 64 bit floats in any language
[23:19:37] <pikapika> n>9223372036854775808+9223372036854775807
[23:19:38] <jellobot> (okay) 18446744073709552000
[23:19:42] <pikapika> strange
[23:19:49] <GreenJello> i.e. can accurately represent integers up to about 2^52
[23:19:52] <pikapika> I remember I had a mod 2^64 sum code in js once
[23:19:57] <pikapika> I don't know how that managed to work
[23:20:40] *** Joins: byanka (~byanka@78.137.43.40)
[23:20:41] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 248 seconds)
[23:21:24] *** Joins: noarb (~noarb@user/noarb)
[23:22:17] <pikapika> I certainly don't remember using two vars as 32 bit integers each to simulate the sum
[23:23:47] <GreenJello> if you used a normal number, then it didn't work exactly, and you just didn't notice
[23:24:31] *** Joins: electrostatic (~electrost@2601:600:8600:5a1:206a:2cae:5bdf:f980)
[23:25:49] <pikapika> It definitely involved some overflowing sums
[23:25:56] <pikapika> so if it was wrong I'd have notied
[23:27:54] *** Joins: onosendi (~onosendi@user/onosendi)
[23:34:29] <sheetjs> pikapika: you may have used strings
[23:34:39] <pikapika> Definitely not
[23:34:50] *** Joins: nomic (~nomic@185.217.117.169)
[23:36:08] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[23:37:00] <sheetjs> array of bits or a low power of 10?
[23:37:41] <sheetjs> https://github.com/SheetJS/printj/blob/master/bits/60_integer.js#L32 ES3-friendly way to interpret a negative number mod 64
[23:37:49] <sheetjs> *in 64 bits
[23:38:45] *** Joins: junktext (~junktext@109.201.152.163)
[23:40:10] *** Quits: electrostatic (~electrost@2601:600:8600:5a1:206a:2cae:5bdf:f980) (Ping timeout: 240 seconds)
[23:43:17] <linguist> Hello there
[23:44:57] <linguist> I am using Jest to performe some tests in a JS class... This class has a method that I would pass to window.requestAnimationFrame in a code: window.requestAnimationFrame(upd => this.updaterFunction.call(this, upd));
[23:47:10] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:1043:b2e8:9541:4e4b) (Ping timeout: 240 seconds)
[23:47:16] *** Quits: px (~px@user/px) (Ping timeout: 250 seconds)
[23:47:21] *** Joins: px_ (~px@ool-18bb89ab.dyn.optonline.net)
[23:48:10] <GreenJello> there's probably a package for mocking it, or you could implement it yourself if not
[23:48:37] *** Joins: brunodOut (~brunodOut@170.84.57.174)
[23:48:52] *** Parts: px_ (~px@ool-18bb89ab.dyn.optonline.net) ()
[23:49:10] *** Quits: linguist (~brunodOut@170.84.56.192) (Ping timeout: 240 seconds)
[23:49:47] *** Joins: linguist (~brunodOut@170.84.57.174)
[23:49:59] *** Quits: Junxter (~Junxter@114.221.66.47) (Ping timeout: 250 seconds)
[23:50:27] <linguist> Ohhh, sorry, power issues
[23:51:04] <linguist> If anyone replied about my question I could not see, and I¬¥m not even sure my messages arrived (could anyone please confirm that?)
[23:52:41] *** Quits: brunodOut (~brunodOut@170.84.57.174) (Read error: Connection reset by peer)
[23:52:43] <GreenJello> > there's probably a package for mocking it, or you could implement it yourself if not
[23:53:06] <GreenJello> only got 2 messages from you before that
[23:53:34] <GreenJello> seemed like you were maybe going to say more
[23:54:06] <linguist> Ohhh, yeah, but in my third message I just finished asking if anyone knows a way to test it on jest
[23:54:38] <linguist> Just so I understand, if I opt to mock it myself, I would write a replacement for window.requestAnimationFrame?
[23:54:47] <GreenJello> yes
[23:55:08] <linguist> And, can I replace objects like window?
[23:56:59] <ljharb> that's the global, so no
[23:57:23] <ljharb> in node you can provide it with jsdom, but if window is present a ton of stuff will assume it's a browser so you don't want to be making your own mock
[23:57:40] *** Quits: peteyboy1 (~peteyboy1@95.169.235.10) (Ping timeout: 250 seconds)
[23:57:57] <GreenJello> linguist, something like this: https://gist.github.com/brigand/1272f2185500475b5a8ee7ac93231169
[23:58:07] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[23:58:18] <GreenJello> ljharb, it's similar to timer mocks
[23:58:24] <GreenJello> but more niche
[23:58:52] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[23:59:07] <ljharb> seems better to use jest.spyOn for something like that
[23:59:51] <GreenJello> you presumably want to invoke the callbacks
