[00:00:00] <SnoopJ> constxd, on what grounds
[00:00:30] *** Joins: kostkon_ (~kostkon@2a02:587:a116:f212:4d86:1980:f91d:1e03)
[00:00:32] *** Quits: kostkon (~kostkon@2a02:587:a116:f212:4d86:1980:f91d:1e03) (Remote host closed the connection)
[00:00:33] <pikajude> "what you just shared isn't an iterator, it's an iterable." can you go into further detail here? the glossary specifies that an iterator is an object you can call __next__ on
[00:00:35] <pikajude> which you can do with a map object
[00:00:49] <lbracher> Hello! Could somebody shed a light in a problem to me? I want to parse json-ld data from sites, but since each site embeds data on its own way, first I need to figure out down on the tree where offers are. I created a recursive function in order to find them and I'm not seeing where it's not working, could somebody help me? https://dpaste.org/K1WM
[00:00:51] <constxd> when you see the subscript in code, it generally signals that you have some kind of collection whose elements are addressable
[00:00:53] <bjs> pikajude: did you see my messages earlier about those two terms?
[00:01:00] <pikajude> maybe
[00:01:03] <pikajude> there have been a lot of messages
[00:01:22] <constxd> imagine an iterator such as one that reads the lines of a file. you wouldn't expect iter[6] to have side effects such as file i/o
[00:01:26] <bjs> pikajude: okay;  an iterable is something you can use a "for" loop with. an iterator is something you can get the next element of.  Something like a list is an iterable but not an iterator.
[00:01:47] <SnoopJ> pikajude, correction: it is both an iterator and an iterable, I mis-spoke. Sorry about that.
[00:01:47] <bjs> pikajude: a map object is an iterator, yes.
[00:02:01] *** Quits: amanjhalmat12 (~amanjhalm@212.237.123.164) (Quit: Client closed)
[00:02:03] <SnoopJ> (all iterators are iterable, iter(iterator) is the identity operation)
[00:02:09] <BrenBarn> an iterable is a thing that can give you an iterator to iterate over it
[00:02:09] <pikajude> doesn't for loop get desugared into creation of an actual iterator object though
[00:02:26] <SnoopJ> it's not sugar per se, no
[00:02:32] <BrenBarn> yes
[00:02:46] <SnoopJ> but it does create an iterator object by basically calling iter(thing)
[00:02:51] <bjs> pikajude: iterators is how Python implements iteration, so in that sense yes.
[00:03:21] <pikajude> so iterators are also iterable.
[00:03:29] <bjs> but take a list, it's a sequence (you can go x[i] for some index i) but it's not an iterator (you can't ask for the "next" element)
[00:03:30] <bjs> pikajude: yeah
[00:03:50] <pikajude> ok.
[00:03:59] <pikajude> so "not an iterator, an iterable" is like saying "not a rectangle, a square"
[00:04:17] <pikajude> no, i have that backwards, lol
[00:04:18] <pikajude> sorry
[00:04:28] <SnoopJ> you have the right set of "telescoping" ideas, though
[00:04:42] <bjs> pikajude: iterators are iterables, squares are rectangles
[00:05:01] <bjs> pikajude: and so to go to the meat of the problem. Imagine I had `it = iter([1,2,3])`  now `it` is an iterator. So I can get the "next" thing
[00:05:21] <bjs> pikajude: the problem is, how can I define nth() in a sensible way.  What should `print(it.nth(0)); print(it.nth(1))` do?
[00:05:46] <pikajude> i'm not sure what a "sensible way" means
[00:05:48] <constxd> nth(0) is a alternate spelling of __next__()
[00:05:56] <pikajude> it seems extremely obvious what the nth() method would do
[00:06:03] <bjs> pikajude: okay
[00:06:07] <pikajude> print(foo.__next__()); foo.__next__(); print(foo.__next__())
[00:06:10] <Wooble> pikajude: the first time you call it, sure.
[00:06:15] <bjs> pikajude: so it prints 1 3 ?
[00:06:19] <pikajude> yes?
[00:06:38] <bjs> I'm -1 on the idea of adding an `nth` that has this semantics.
[00:06:53] <pikajude> i see
[00:07:08] <hexnewbie> There's the third-party more_itertools.peekable() which already does nth semantics, and one can do a consuming version with islice()
[00:07:15] <bjs> It seems confusing, and if you want to call next N times, that's relatively easy to do anyway.
[00:07:22] <constxd> better to have something like drop(n) or skip(n)
[00:07:35] <constxd> it.nth(4) is it.drop(4).next()
[00:07:46] <constxd> makes it more clear that there are side effects
[00:07:52] <Wooble> I'm -1 on having to implement an nth() method on my existing classes with __iter__ and __next__ defined already :)
[00:07:59] <bjs> Yeah the name is confusing, there are other names.
[00:08:02] *** kostkon_ is now known as kostkon
[00:08:11] <bjs> Wooble: yes it's also basically impossible to retroactively add to the language :)
[00:08:42] <constxd> it would be implemented in terms of __next__ so you wouldn't have to implement it on your classes
[00:09:02] *** Quits: thevishy (~Nishant@2405:201:f005:c007:d93e:9746:14f0:2f69) (Read error: Connection reset by peer)
[00:09:03] <pikajude> yeah, all you would need would be a method in itertools
[00:09:13] <bjs> pikajude: well, it's an itertools recipe
[00:09:26] <pikajude> which is a fancy way of saying "not a method in itertools"
[00:09:30] <bjs> yes
[00:09:31] *** Joins: mawk (mawk@wireguard/contributor/mawk)
[00:09:33] <SnoopJ> and one that comes with a great big asterisk: if you feed in an iterator, you will be advancing that iterator
[00:09:33] <constxd> lmao
[00:09:44] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[00:09:46] *** Joins: y04nn (~y04nn@92.223.89.196)
[00:09:50] *** Joins: thevishy (~Nishant@2405:201:f005:c007:49c7:f8b1:7727:93e)
[00:09:55] <SnoopJ> so even with the recipe, you have advanced the state of your map()
[00:09:57] <pikajude> well, it looks like islice copies the iterator
[00:10:07] <pikajude> or does it not
[00:10:08] <bjs> pikajude: what do you mean?
[00:10:22] <SnoopJ> pikajude, it creates a new iterable that gets its values from the input iterable
[00:10:22] <pikajude> oh, i guess it wouldn't
[00:10:28] <constxd> iterators in general are kinda sus imo
[00:10:34] <pikajude> with only __next__, you can't copy the iterator
[00:10:39] <bjs> constxd: exposing them like this is what's suspect
[00:10:41] *** Joins: pkapp (~pkapp@c-75-74-40-214.hsd1.fl.comcast.net)
[00:10:48] <pikajude> you'd have to save all the items into a list internally anyway
[00:10:50] <SnoopJ> pikajude, if you can copy an iterator, you're probably already talking about a Sequence :)
[00:10:51] <bjs> they're a perfectly sensible implementation of iteration (and probably one of the only sensible ways :P)
[00:11:05] <bjs> pikajude: islice doesn't save anything
[00:11:11] <pikajude> yeah i see that now
[00:11:14] <SnoopJ> and iterators in general don't
[00:11:25] <constxd> i just mean that even without nth(), you still have this footgun in many other situations
[00:11:27] <Wooble> itertools.tee() is reasonable in some cases where you don't actually keep all of the state around.
[00:12:12] <mokulus> lbracher: https://dpaste.org/NTqs
[00:12:29] <hexnewbie> __next__() is the whole interpretation of the iterator (__iter__ returning self), so any special functionality needs to go in next() or a wrapper, anyway. So next(it, skip=4) or, or next(islice(it, 4, 5)), or for different behaviour, it = more_itertools.peekable(it); it[4]
[00:13:14] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[00:13:16] <hexnewbie> next(..., skip=...) does not exist, I'm just riffing on the possibility
[00:13:19] <SnoopJ> and philosophically, "use a wrapper" is a bit like what Sequence describes: iterable, plus [more stuff]
[00:13:51] *** Joins: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint)
[00:14:01] *** Quits: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[00:14:16] <constxd> why isn't Iterator a class
[00:14:31] <bjs> constxd: what would the class do?
[00:14:37] <Wooble> constxd: technically it's an abstract base class
[00:14:50] <SnoopJ> specifically this one: https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterator
[00:14:56] <constxd> bjs: have methods like skip()
[00:15:09] <lbracher> mokulus, you just saved my sanity! Thanks! :)
[00:15:22] <constxd> i make my own iterator class, i write __next__, and i get skip for free
[00:15:24] *** Joins: guenhael (~Thunderbi@2a01cb008c3d58006048a9fb4db0b5f5.ipv6.abo.wanadoo.fr)
[00:15:44] <bjs> constxd: well you'd have to inherit this other magic Iterator class but yes,  except of course that skip isn't part of the iterator API
[00:15:54] <Wooble> hexnewbie: ah, I should've remembered more_itertools came with peekable, which even gives the syntax they wanted, and not just nth()
[00:16:05] <constxd> bjs: what do you mean iterator API?
[00:16:06] <SnoopJ> agreed, peekable is even more appropriate
[00:16:16] <constxd> skip is implemented on top of the iterator API
[00:16:18] <pikajude> i just used list(partialMapData)[3] in the end
[00:16:19] <bjs> constxd: I mean, an iterator is a thing with a __next__
[00:16:24] <constxd> yes
[00:16:30] <pikajude> since the iterator is like 25 items long
[00:16:33] <SnoopJ> constxd, "iterator" in Python is a concept, it means "thing that has the API we expect from an iterator"
[00:16:33] <constxd> and everything with a __next__ would automatically have skip
[00:16:36] <pikajude> my cpu won't begrudge me
[00:16:50] <SnoopJ> pikajude, yea, that's fairly typical
[00:16:53] <bjs> constxd: well now you're suggesting a much more drastic mechanism for automatically injecting methods that classes do not have into them
[00:17:05] <bjs> Python doesn't do this anywhere else
[00:17:06] <mokulus> pikajude: where do you get this iterator from?
[00:17:07] <constxd> why, in an object-oriented language, would you make iterators a "concept" and not use your own class system?
[00:17:17] <SnoopJ> constxd, so that people don't get locked into the class system.
[00:17:25] <constxd> bjs: no i'm not
[00:17:27] <hexnewbie> constxd: from itertools import islice; skip = lambda it, skip=1: next(islice(it, max(0, skip - 1), max(1, skip)), None)
[00:17:27] <pikajude> i don't really know, this is a friend's code that i'm trying to debug. i'm not that familiar with python
[00:17:35] <pikajude> it's just map(someFn, someData)
[00:17:36] <constxd> bjs: the methods would live in the Iterator class
[00:17:41] *** Quits: remote (~self@user/hackers) (Ping timeout: 252 seconds)
[00:17:45] <hexnewbie> constxd: Now you have a skip(it, 3) function that does it for you
[00:17:55] *** Quits: delvian (~delvian@41.13.198.95) (Remote host closed the connection)
[00:18:04] <mokulus> pikajude: so why not do someFn(someData[3]) ?
[00:18:05] <pikajude> i'm with constxd here although i don't know if you can put default method definitions in abstract classes
[00:18:12] <pikajude> mokulus, i need the entire iterable for the other branch
[00:18:22] <bjs> pikajude: yes you can, and there are plenty of examples of it (e.g. in collections.abc.*)
[00:18:24] <SnoopJ> pikajude, map() is relatively uncommon, oftentimes you write comprehensions instead, so you might be able to skip straight to: `seq = [someFn(datum) for datum in someData]`
[00:18:27] <mokulus> pikajude: ok, just make it in the other branch only?
[00:18:33] <faLUKE> hey: which is the proper way to remove a trailer newLine from myString, if present ?
[00:18:35] <hexnewbie> pikajude: You can, but then any implementation would either have to inherit from the abc, or provide its own implementation of those.
[00:18:37] *** Joins: delvian (~delvian@41.13.198.95)
[00:18:55] <pikajude> if the abc was in the stdlib, wouldn't it always be available?
[00:19:06] <bjs> constxd: I mean,  it's not a mistake, it's a conscious decision to make only __next__ and __iter__ required for an "iterator" without any other methods
[00:19:08] <pikajude> mokulus, that's probably what they should do, but the lack of subscripting on iterators piqued my curiosity
[00:19:11] <pikajude> which is why i'm here
[00:19:12] <bjs> pikajude: yes, and collections.abc *are* in the stdlib
[00:19:18] <hexnewbie> pikajude: With a very simple interface for something as simple as an iterator, the complication of inheriting from collections.abc.Iterator is thus avoided
[00:19:22] <SnoopJ> pikajude, their point is that you'd break things downstream because you pulled the rug out from under them when you changed the definition of the abstraction by adding something
[00:19:25] <pikajude> "complication" lol
[00:19:41] <bjs> pikajude: it's a massive complication,  basically at this point an immovable complication
[00:19:44] <constxd> bjs: __next__ and __iter__ still fulfill the requirements for being an iterator
[00:19:45] <pikajude> how many lines do you have to add to a class definition to make it inherit from something?
[00:19:46] <bjs> if you want to go back in time and say "noooo make it an abc"
[00:19:52] <constxd> you just get skip() et al. for free
[00:20:01] <bjs> constxd: you're arguing as if it's obvious that you *want* to get skip for free
[00:20:01] <constxd> that's the whole point of inheritance
[00:20:03] <SnoopJ> pikajude, zero, it's part of all class definitions anyway
[00:20:07] <pikajude> ok
[00:20:11] <constxd> bjs: it is
[00:20:14] <bjs> constxd: it's not.
[00:20:19] <constxd> why wouldn't you want it?
[00:20:29] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[00:20:33] <pikajude> i don't think that's the question here, i think the question is, "why would you specifically want it to not be available"
[00:20:44] <SnoopJ> ah, well, that is *not* what we are discussing
[00:20:52] <SnoopJ> iterator/iterable do not restrict what *else* you offer
[00:21:00] <bjs> That's not really how the stdlib works, it's not that you accept everything you can imagine and then need to argue why it *shouldnt* be there
[00:21:03] <faLUKE> sorry for the  supid question (rstrip)
[00:21:05] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Ping timeout: 250 seconds)
[00:21:09] <Wooble> why wouldn't you want every function imaginable just present in __builtins__? that's how you get PHP.
[00:21:22] <SnoopJ> or are you asking about why this isn't something meaningful for all iterators/iterables ?
[00:21:24] *** Joins: audiocat (~audio@user/audio)
[00:21:48] *** Joins: llanhmod (~personnel@user/domhnall/x-2887755)
[00:21:49] <bjs> the iterator API is already confusing enough, and 1/2 of the API is in a constant struggle (the __iter__ part) for its own existence. It's very not clear people want to add *Even more* to the API
[00:22:05] <hexnewbie> Wooble: That's not fair. Every function imaginable is slightly better. PHP would be three versions of every function ever imaginable, with some obscure differences like argument order
[00:22:08] <constxd> i don't understand why this seems so odd to you
[00:22:22] <bjs> constxd: it's not "odd".
[00:22:26] <dav1d> How do you extend the iterator interface/API then? Not really possible and you end up with some methods and free standing functions. Also this is also probably influenced by some old python versions
[00:22:30] <Swayze> before i forget and while we on the subject of builtins i thought this was a nice unique approach at 'teaching/learning' python https://sadh.life/post/builtins/
[00:22:42] <bjs> dav1d: how can you extend the interface *today*?  Basically you cannot.
[00:22:45] <Swayze> thoughts when you have time would be nice
[00:22:58] <constxd> i'm just suggesting that instead of requiring all of these helper functions to be defined outside of the class that they operate on, put them in the class
[00:23:07] <dav1d> That's why there isn't one, because you don't need to. You have free functions
[00:23:16] <reset> Does anyone know a util that can save a page in HTML with the full rendering of all the JS?
[00:23:22] <Wooble> hexnewbie: did you know that in PHP 8, they're finally making people actually remember which order implode()'s arguments go in, instead of just taking them in either order? :)
[00:23:28] <bjs> constxd: well by having a module like itertools you *can* just add new things, that work on all iterators
[00:23:36] <constxd> if you're going to have implementations of things like map, filter, fold, etc., that work on arbitrary iterators, the more types you can add them to for free the better
[00:23:44] <pikajude> i think that's the whole point
[00:23:48] <dav1d> Rust can do that very well and it works, in Java the Iter* interfaces are horror
[00:23:51] <pikajude> if those methods existed on Iterator instead of inside itertools
[00:23:58] <bjs> constxd: map and filter work on any iterator already
[00:24:01] <SnoopJ> pikajude, the basic idea of an iterator is that it is guaranteed to know one thing in particular: how to get to the next() item in whatever it's iterating. If it knew how to go to anywhere, it would have to guarantee a lot more state.
[00:24:03] <bjs> pikajude: what would you gain?
[00:24:05] <hexnewbie> Wooble: Wow, I missed that one! That's decades progress
[00:24:07] <constxd> bjs: yes but they're functions not methods
[00:24:10] <bjs> constxd: so?
[00:24:19] <constxd> so why aren't they methods?
[00:24:19] <pikajude> uhhh, about ten characters per call
[00:24:25] <pikajude> and an import
[00:24:27] <constxd> wouldn't that make more sense from an interface design standpoint?
[00:24:29] <pikajude> or rather, i would lose an import
[00:24:32] <bjs> by making them methods all you do is make the iterator interface much larger and much more complicated
[00:24:34] <SnoopJ> and in Python, that "lot more state" guarantee is...something you get from a higher abstraction: Sequence
[00:24:47] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[00:24:51] <bjs> pikajude: itertools is almost certainly already imported
[00:24:53] <constxd> they are functions that operator specifically on things implementing the iterator interface -- sounds like the literal definition of what a method should be
[00:24:58] <SnoopJ> making it a requirement to be an iterator would basically ruin a lot of what they're good at doing
[00:25:01] <constxd> s/operator/operate/
[00:25:03] <bjs> the `import` just lets you access it
[00:25:07] <SnoopJ> (i.e. *not* storing tons of previous state)
[00:25:18] <constxd> how is it more complicated?
[00:25:24] <SnoopJ> if you add all that state directly to iterator, infinite iteration is gone, period.
[00:25:25] <pikajude> yeah...but if they were methods on Iterator, the import wouldn't be needed
[00:25:30] <bjs> constxd: you can add things to itertools without having to make broad changes to the interface of what it means to be an "iterator".
[00:25:32] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[00:25:36] <constxd> yes
[00:25:37] <bjs> pikajude: what about types that defined the iterator methods but didn't inherit Iterator?
[00:25:39] <SnoopJ> pikajude, yes, and you would have a strictly-less-useful thing.
[00:25:41] <constxd> but why is that preferable?
[00:25:56] <constxd> what do you gain by keeping those functions out of the iterator class?
[00:25:59] <pikajude> those would need to be fixed, then
[00:26:05] <bjs> constxd: a much smaller iterator iterface.
[00:26:09] <pikajude> is it really difficult to make a type extend another type?
[00:26:12] <constxd> how is that a good thing?
[00:26:20] *** Quits: sudorm (~sudorm@abordeaux-654-1-97-61.w92-162.abo.wanadoo.fr) (Quit: Leaving)
[00:26:33] <pikajude> in rust you can just type `extends SomeTrait`
[00:26:50] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:26:50] *** Quits: delvian (~delvian@41.13.198.95) (Ping timeout: 260 seconds)
[00:26:52] <bjs> constxd: because a bigger interface is worse, the smaller the interface the better. Especially in a language like Python that relies so heavily on duck typing
[00:26:54] <SnoopJ> pikajude, we seem to be getting really into the weeds here, I want to re-iterate (heh) that iterator **is not a type**
[00:27:08] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[00:27:10] <pikajude> extend an interface, rather
[00:27:13] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[00:27:15] <pikajude> whatever
[00:27:18] *** Quits: BlueSky (~BlueSky@user/bluesky) (Quit: Leaving)
[00:27:30] <constxd> you realize that semantically there's no difference between having them live in itertools and having them in the class right?
[00:27:37] <constxd> the difference is the syntax you use to call them
[00:27:38] <bjs> constxd: there is a huge difference!
[00:27:47] <bjs> the difference is that you are not *required* to inherit other classes
[00:27:59] <Helion> its not even an interface in the traditional oo sense - its just a protocol - a calling convention
[00:28:02] *** Quits: inomoz (~inomoz@85.26.235.86) (Ping timeout: 240 seconds)
[00:28:04] <cluelessperson> is there a nice pythonic way to do like    a_dict.setdefault("key", 0) += 1 ?
[00:28:06] <bjs> Yeah
[00:28:06] <constxd> exactly
[00:28:06] <Julian> pikajude: this is a fundamental difference in Python's typing and Rust's, in python it's perfectly fine to implement a protocol without explicitly needing to declare you do, and there are multiple implementations of protocols, some which require explicitly declaring you implement them, some that do not
[00:28:08] <cluelessperson> that I'm missing?
[00:28:09] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[00:28:10] <constxd> and it shouldn't be
[00:28:11] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[00:28:12] <bjs> cluelessperson: a defaultdict?
[00:28:17] <bjs> constxd: it shouldn't be what?
[00:28:17] <Julian> pikajude: on the other hand, what rust has going for it is traits being namespaced
[00:28:19] <Festive_Dragon> use a defaultdict
[00:28:27] <Julian> which would be nice in Python, we don't really have that in any implementation of protocols
[00:28:27] <pikajude> the fact that it's not even an interface is slightly disturbing
[00:28:29] <constxd> why have classes if the core language features aren't even going to make use of them?
[00:28:31] <Wooble> cluelessperson: collections.Counter
[00:28:31] <cluelessperson> bjs, I was hoping for more of a built in I suppoe
[00:28:43] <cluelessperson> Wooble, nice try but I'm not counting. :P
[00:28:46] <cluelessperson> in this case
[00:28:47] <SnoopJ> pikajude, well, since the interface is a contract and not code, nothing is required. Sequence extends iterable in exactly this way: you become a Sequence when you satisfy the criteria for iterable, plus [extra stuff]
[00:28:47] <hexnewbie> constxd: Side-effects to every class that provides the iterator protocol, by making it inherit from Iterator, for one. At the very least it limits the methods it can have - any method defined by abc.Iterator can't be used for your own needs
[00:28:48] <constxd> it's clearly just an oversight from the early days of python
[00:28:49] <bjs> cluelessperson: defaultdict is built in?
[00:28:56] <Wooble> cluelessperson: doesn't matter.
[00:29:17] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[00:29:19] <bjs> constxd: it is using them, the whole iterator/iterable definition is defined on *classes*
[00:29:22] <bjs> the whole thing is about classes
[00:29:23] <pikajude> i disagree. if i understand correctly, implementing __next__ is required for any type you want to iterate on
[00:29:25] <constxd> hexnewbie: yes it can... your definitions will shadow those from Iterator
[00:29:33] <Julian> pikajude: no
[00:29:40] <pikajude> oh wow, really?
[00:29:41] <bjs> Julian: oh no do we have to go there
[00:29:44] <bjs> can't we pretend
[00:29:46] <Julian> ha
[00:29:47] <constxd> bjs: yes but why is the 'Iterator' type not encoded within the class hierarchy
[00:29:47] <SnoopJ> pikajude, iterables only have to define __iter__()
[00:29:48] <Julian> fine we can pretend
[00:29:55] <Wooble> cluelessperson: if your real values aren't actually ints, then sure, use a defaultdict instead of a Counter.
[00:29:56] <SnoopJ> pikajude, iterators have to define __iter__() (the identity) and __next__()
[00:29:56] <hexnewbie> constxd: And thus it would no longer be a valid Iterator
[00:30:04] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[00:30:07] <constxd> hexnewbie: wrong
[00:30:09] <pikajude> so what happens when you iterate over an object with no __next__ method?
[00:30:23] <hexnewbie> constxd: There was a point 10 years ago or so when PyQt4.QtCore.Object had issues with multiple inheritance, so doing an Object that's iterator with such proposal could be complicated, too
[00:30:29] <Festive_Dragon> you get an exception, pikajude
[00:30:30] <SnoopJ> exactly what happens when you iterate any object: first you call iter() on it, and then you worry about whether *that* thing has __next__
[00:30:30] <bjs> pikajude: well "iterating" is not what iterators are about.
[00:30:35] <bjs> pikajude: but it depends, on what other methods it has
[00:30:36] <hexnewbie> Like, impossible
[00:30:36] <pikajude> genuine question
[00:31:02] <bjs> pikajude: if a thing has an __iter__ that will be used by the `for` loop
[00:31:16] <bjs> I've phrased that carefully but yet still slightly incorrectly ...
[00:31:16] <pikajude> if it throws an exception, then "nothing is required" is clearly incorrect
[00:31:18] <bjs> ugh it's awkward
[00:31:33] <hexnewbie> pikajude: trying to iterate over things invokes __iter__(), not __next__(). __next__() is called over the result of __iter__()
[00:31:36] <pikajude> unless you're using a definition of "required" that's so vague as to be meaningless
[00:31:44] <bjs> pikajude: who said required?
[00:31:46] <SnoopJ> pikajude, do you understand what I mean when I say that iterator, iterable, and sequence are all things that have absolutely no meaning except inasmuch as we all agreed to respect the definitions? The compiler does not in any way enforce any of this.
[00:31:55] <pikajude> snoopj did
[00:31:59] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 252 seconds)
[00:32:12] <pikajude> yes, i am well aware that the python interpreter doesn't enforce anything
[00:32:15] <Julian> pikajude: there are other ways to get an iterable than just __next__ (which bjs said we're pretending don't exist :)
[00:32:21] <Julian> pikajude: (e.g. defining __getitem__ and __len__)
[00:32:26] <pikajude> oh, ok
[00:32:33] <Festive_Dragon> if none of the options are defined
[00:32:36] <Festive_Dragon> you get a TypeError
[00:32:43] <Wooble> you can even have an object that randomly decides whether to raise AttributeError for obj.__next__ at runtime.
[00:32:46] <Festive_Dragon> (try `for _ in 1`)
[00:32:54] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:32:55] <Festive_Dragon> Wooble: oh that sounds fun
[00:32:55] <pikajude> what order does it try them in?
[00:33:00] <hexnewbie> __len__ and __getitem__ are called if __iter__ does not exist, I think
[00:33:02] <SnoopJ> pikajude, the *interpreter* enforces quite a bit, but the *compiler* does not. Most things happen at runtime, and a lot of those things are on the basis of these "if you can act like a duck, you're a duck" interfaces.
[00:33:06] <Festive_Dragon> you'd have to check the source
[00:33:07] <Julian> right, but it's more complex than some default implementation on a protocol/superclass
[00:33:14] <Julian> pikajude: __iter__/__next__ have priority
[00:33:17] <pikajude> ok
[00:33:20] <hexnewbie> but collections.abc.Iterable wouldn't like classes without __iter__
[00:33:40] <bjs> and what do you have if you have a class with a __next__ but no __iter__ !?
[00:33:44] <SnoopJ> I don't think you have to check the source for anything we're discussing here, but there are so many threads of question that I'm having trouble following it.
[00:33:49] <bjs> that is a genuine question that people argue muchly over (esp. recently...)
[00:33:58] <Festive_Dragon> keep calling __next__ until it raises StopIteration, I guess?
[00:33:59] <pikajude> probably nothing, because why would you call __iter__ on an iterator
[00:34:07] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Ping timeout: 265 seconds)
[00:34:08] *** Joins: Andrynet1 (~Andrynet@186.46.205.112)
[00:34:14] <SnoopJ> pikajude, if you wanted to iterate over it, for one
[00:34:19] <bjs> pikajude: well, for example if you `for` loop over them
[00:34:21] <hexnewbie> pikajude: Because calling __iter__() on the iterable object is part of the protocol.
[00:34:27] <pikajude> i said iterator, not iterable
[00:34:28] <SnoopJ> more literally: because iterators are *required* to define this.
[00:34:28] <Wooble> for item in map(...): does exactly that.
[00:34:31] <bjs> pikajude: yes.
[00:34:36] <hexnewbie> pikajude: iterators needs to be iterable
[00:34:44] <bjs> pikajude: if you wanted to use a `for` loop over the iterator.
[00:34:48] <pikajude> yeha, i guess i should restate it
[00:34:55] <pikajude> __iter__ on an iterator should always be the identity function
[00:35:02] <bjs> pikajude: Yes that is how it's defined to be.
[00:35:03] <pikajude> i'm curious to know if there's situations where that isn't true
[00:35:14] <bjs> pikajude: well, if it's not true then it's not an iterator
[00:35:16] <hexnewbie> pikajude: You can create such a situation, people would hate you for it
[00:35:18] <Festive_Dragon> its python, Im sure someone has some duct taped together lib that it is
[00:35:25] *** Quits: grundrausch3n (~grundraus@p200300e9ef18ac00d5af2064097ce1bb.dip0.t-ipconnect.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:35:27] <Festive_Dragon> that doesnt mean its a good idea or recommended
[00:35:28] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:35:33] <pikajude> yeah there are too many threads of discussion going on
[00:35:38] <pikajude> i think you're right SnoopJ
[00:35:40] <bjs> pikajude: because iterator/iterable are just definitions that basically mean "the class has <these methods> that do <this>"
[00:35:42] <hexnewbie> pikajude: But yeah, that also wouldn't be a proper iterator
[00:35:45] *** Joins: odoood (~odoood@2601:c8:c003:a550::5)
[00:35:45] <Wooble> Festive_Dragon: and that library is likely to be django. :)
[00:35:52] <SnoopJ> pikajude, if any object exists that does not satisfy that criterion, it is not an iterator as the term is defined by the Python language.
[00:35:52] <Festive_Dragon> lol
[00:36:13] <bjs> pikajude: you can make an iterator out of thin air just by making a class that has those methods, and that makes it an iterator and/or iterable without having to say so explicitly
[00:36:25] <bjs> and this is how pretty much *all* the Python interfaces work
[00:36:28] <constxd> which is cringe
[00:36:29] <Festive_Dragon> you could also dynamically attach the methods to a random class at runtime
[00:36:31] <BrenBarn> I do wish that Python provided more mixin classes that you could use to get various useful sets of functionality
[00:36:35] <pikajude> yeah, and i assume that's a historical artifact
[00:36:38] <BrenBarn> like a mixin that just provides a ton of itertools stuff as methods
[00:36:46] <SnoopJ> pikajude, which part?
[00:36:47] <Festive_Dragon> you can use mixin classes :P just inherit from multiples :P
[00:37:00] <bjs> pikajude: historical artifact and current design policy ;)
[00:37:12] <pikajude> the part where you write a class that extends nothing, but has a __next__ method, and that makes it an iterator
[00:37:14] <bjs> Other languages do things differently (and have advantages and disadvantages)
[00:37:23] <Wooble> "what this codebase needs is more MI" is a dangeorus thought.
[00:37:32] <Julian> pikajude: what disadvantage do you see
[00:37:34] <bjs> pikajude: well, does it make it an iterator? iterator is just an English word we use to mean "has both __iter__ and __next__" so that isn't an iterator
[00:37:44] *** Joins: Viewday11 (~Viewday@user/viewday)
[00:37:45] <SnoopJ> pikajude, that is a very deliberate design decision, albeit one that can be very jarring if you're used to contracts enforced ahead-of-time
[00:37:46] <mokulus> in python it's as simple as it could be, __iter__ to get iterator object, __next__ to go to next item. super simple, everyone gets it
[00:37:54] <bjs> mokulus: :P
[00:38:02] <pikajude> if someone wanted to define convenience methods on Iterator that can be written in terms of __next__, those methods wouldn't be available for types that didn't extend Iterator
[00:38:05] <pikajude> which is why Iterator doesn't have them
[00:38:06] <constxd> no i refuse to believe it's a deliberate design decision
[00:38:13] <bjs> pikajude: yes
[00:38:15] <bjs> constxd: Ok.
[00:38:16] <pikajude> instead, they are shoved into another module entirely
[00:38:19] <constxd> it's not
[00:38:20] <BrenBarn> I like the way Python uses magic methods to implement the concepts, but sometimes those basic concepts are pretty barebones and it would be nice to have some scaffolding tools built in
[00:38:21] <mokulus> it's hilarious that people from rust come and complain about duct typing and that the compiler doesn't statistically verify that the iterator is correctly written
[00:38:24] <bjs> constxd: why do you say it's not?
[00:38:29] <SnoopJ> mokulus, please stop.
[00:38:30] <constxd> because there's no justification for it
[00:38:34] <bjs> It's always been and continues to be.
[00:38:34] *** Joins: KevinX_ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[00:38:50] <pikajude> i'm not complaining about a lack of static typing, i'm complaining about the objection to moving itertools methods into the Iterator base class
[00:38:51] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[00:38:56] <BrenBarn> what is it you refuse to believe is a design decision?
[00:38:57] <bancroft> I have an image with tons of exif data which crashes python pillow on 8.4.0. I want to figure out what data makes it crash so is there a way to go through the python dictionary of exifdata programmatically to figure out what done it?
[00:39:00] <Julian> pikajude: this is why functionality like `iter` is a function in Python, precisely because it solves things like your case
[00:39:05] <Festive_Dragon> you do not need the Iterator base class
[00:39:17] <Julian> pikajude: stuff that can be built on top of the iterator protocol can just be a regular function
[00:39:20] <Julian> no need to have it be a method
[00:39:22] <bjs> constxd: sure there is,  you make objects that have the behaviours you want and then they will work anywhere that accepts objects with those behaviours.  That's a big justification.  You don't need to go around "registering" with all the potential protocols that you support them
[00:39:23] <Festive_Dragon> itertools contains tools to work _with_ iterators
[00:39:24] <SnoopJ> pikajude, again, there isn't really a base class. The ABC exists to contain the contract, basically, but you don't have to inherit from it to become an iterator.
[00:39:24] <Wooble> constxd: I don't agree with everything Guido decided 30 years ago but I'm pretty sure he thought about it all.
[00:39:25] <Festive_Dragon> not create them
[00:39:26] <bjs> if you can do it, then you can do it
[00:39:27] <mokulus> SnoopJ: do you want to respond rather that just tone police?
[00:39:30] <pikajude> yes. i know.
[00:39:30] <BrenBarn> but sometimes you WANT it to be a method
[00:39:32] <constxd> why bother having inheritance at all then? if it's better to just have some "agreed upon" set of methods that suffice to imeplement an "interface"
[00:39:40] <pikajude> i understand that the interface is not a required part
[00:39:53] <constxd> if these ad-hoc "APIs" are preferable, get rid of the type system bloat
[00:39:54] <pikajude> sorry. that the class itself is not required
[00:39:58] <SnoopJ> mokulus, I thought that asking nicely might work, but I'm sure a moderator will step in if they need to
[00:40:04] <pikajude> i'm just saying i don't think it's a great way to design an interface
[00:40:07] <Julian> constxd: some of us would love to see inheritance disappear :P
[00:40:15] <SnoopJ> pikajude, that's fair, but it's the way it works in Python.
[00:40:16] <BrenBarn> well, the idea is that having these interfaces allows people to use inheritance for user-space stuff
[00:40:22] <pikajude> yes, it is
[00:40:37] <constxd> there's a reason why every other language uses some kind of class / interface / type trait etc. for Iterator / Iterable
[00:40:46] <pikajude> does ruby? now i'm curious
[00:40:50] <BrenBarn> and avoids problems that can arise when you have to layer your own user-level inheritance needs on top of a class hierarchy that implements stuff like iteration
[00:40:51] <SnoopJ> and advocacy debates are generally a great way to start a fight, especially amongst programmers who believe silly things like One Right Way to Do It :P
[00:40:52] <constxd> yes
[00:41:02] <Julian> ruby has Enumerable I think, and ruby's culture is precisely the opposite of Python's here I think
[00:41:02] <gbristol> yeah, Enumerable
[00:41:06] <pikajude> ok
[00:41:08] <constxd> ruby's Enumerable / Enumerator classes give you all of  those itertools functions as methods
[00:41:08] <mokulus> SnoopJ why would they want to step in? you havent explained your concerns at all. what makes you think your opinion is right?
[00:41:09] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 268 seconds)
[00:41:12] <Julian> ruby programmers love mixing in 8 billion method sthat don't come from the class
[00:41:17] <Julian> even though ruby has ways to avoid that
[00:41:38] <Julian> (for what reason who knows, but presumably because they agree with those of you saying "yeah but I really like method syntax")
[00:41:39] <bjs> constxd: I mean yes, other languages are different. That's not to say Python's way is the best, and those other languages have certainly learned from Python's decisions
[00:41:41] <pikajude> haven't touched ruby in years
[00:41:42] <Julian> Python is the opposite.
[00:41:52] <bjs> but Python's decisions are well.. decisions. not accidents.
[00:42:01] <Julian> In general "we" think there isn't really a reason method syntax is any better than function syntax
[00:42:12] <Wooble> bjs: except for @staticmethod :)
[00:42:14] <constxd> "we don't want to figure out a good way to implement multiple inheritance or any kind of trait system, so if you want to be an iterator dont worry just define __next__ and we'll let you bypass the whole class system"
[00:42:16] *** Joins: inomoz (~inomoz@85.26.235.152)
[00:42:21] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[00:42:22] <Julian> The former is good when there's object-encapsulated functionality, the latter is good when you add extra functionality that composes over a known interface
[00:42:23] <pikajude> method syntax is better because your IDE can autocomplete things from a much, much smaller list
[00:42:23] <BrenBarn> well, one reason is with method syntax you at least have the possibility of chaining without nested parentheses
[00:42:26] <bjs> Wooble: I didn't mean that *all* decisions were the right decisions :P
[00:42:27] <pikajude> that alone is a justification
[00:42:40] <Wooble> bjs: I mean Guido's literally called in an accident.
[00:42:42] <Wooble> it*
[00:42:55] <Julian> I *definitely* am not in favor of doing things based on IDE functionality personally, so I don't find that argument at all convincing.
[00:42:55] <Wooble> oops I was trying to invent classmethods lol
[00:43:01] <bjs> pikajude: okay let me argue that same point, that itertools is better for autocomplete because itertools only autocompletes the iteration ones you want
[00:43:04] <hexnewbie> Moving stuff into the class would also mean making .next() a method *again*, and requiring every implementation to support an argument, e.g. iterator.next(None)
[00:43:07] <bjs> not all the other irrelevant things the class does
[00:43:25] <pikajude> can you list some irrelevant things that Iterator would have that aren't related to iterating?
[00:43:38] <SnoopJ> nth()
[00:43:41] <BrenBarn> hexnewbie but that's not a big deal since they already have to do that, it's just called `__next__` right now
[00:43:42] <mokulus> constxd: how is checking in an object inherits from a class practically different from checking if it implements a specially named method?
[00:43:47] <bjs> pikajude: a particular iterator would have many other methods related to what that class does
[00:43:55] <bjs> right?
[00:44:10] *** rwb is now known as rb
[00:44:11] <constxd> mokulus: yes they're the same so let's get rid of inheritance
[00:44:12] <BrenBarn> mokulus, well, if the protocol requires more than one method, you can check them all at once if they're part of a class
[00:44:14] <dav1d> Methods have lots of problems, look at Java, look at rxjs (which moved away from methods), not to mention that a full iterator system would also have stuff like double ended iterators, size hints etc (compare javas stream). Python doesn't even need that, thanks to yield, list comprehensions and other tools
[00:44:16] <pikajude> but we're talking about methods on an iterator, not an iterable
[00:44:18] <hexnewbie> BrenBarn: Pretty big deal, since it more than doubles the complexity of the next() method
[00:44:25] <pikajude> which is a small subset
[00:44:26] <constxd> clearly it's not useful
[00:44:34] <constxd> just implement the API bro
[00:44:36] <SnoopJ> pikajude, and the methods we're discussing absolutely destroy some of the best use cases of iterators, like infinite streams.
[00:44:36] <hexnewbie> And in critical loops, too
[00:44:39] <pikajude> for example, in Rust, convention is to define an iter() method which returns an object that extends Iterator
[00:44:45] <constxd> the compiler doesn't need to know
[00:44:49] <SnoopJ> like, I don't see how you can have nth() *and* infinite iterators in finite memory
[00:44:50] <bjs> pikajude: okay but say i have a class that's an iterator.  The class may be an iterator but it'll have other things too.
[00:44:53] <pikajude> then that object has a very small set of methods that is probably only those methods defined in Iterator
[00:45:01] <SnoopJ> (unless you decouple them)
[00:45:11] <SnoopJ> but this has kinda turned into a flamewar about duck typing
[00:45:15] <pikajude> i'm still confused. why would nth() not work on an infinite stream?
[00:45:21] <pikajude> you can't pass infinity to nth()
[00:45:24] <SnoopJ> pikajude, because it has to keep track of an infinite amount of data in the past
[00:45:27] <pikajude> why?
[00:45:27] <BrenBarn> how would having nth() preclude infinite iterators?
[00:45:30] <BrenBarn> I guess it depends what you expect nth() to do
[00:45:35] <bjs> pikajude: if I want to do an iteration thing, I can go itertools.<tab> and I autocomplete all the iteration things.  If I just go obj.<tab> my autocomplete is going to give me all the other stuff too.
[00:45:43] <pikajude> maybe design your interface better then? lol
[00:45:46] <bjs> pikajude: so I say that autocomplete is a +1 for having tertools-like modules
[00:46:01] <SnoopJ> `iterator = ...; call_next_a_million_times(); iterator.nth(0)  # oops, MemoryError`
[00:46:02] <pikajude> isn't it a massive red flag to have an object which is both an iterable and an iterator?
[00:46:03] <hexnewbie> Oh, non-consuming Iterator.nth() would mean that all generator functions need to have additional memory storage for peeking into values, and also multiple inheritance like A(list, Iterator) would be broken for good
[00:46:04] *** Quits: sazawal (~sazawal@122.161.88.88) (Quit: Leaving)
[00:46:08] <bjs> pikajude: if that was to me, it's not about interfaces. objects implement interfaces, maybe multiple interfaces
[00:46:12] <BrenBarn> SnoopJ: okay, so you're saying nth() should not be state-dependent?
[00:46:14] <bjs> pikajude: no, infact *all* iterators in python are also iterable
[00:46:20] <SnoopJ> BrenBarn, *they* are
[00:46:32] <BrenBarn> every iterator is an iterable
[00:46:34] <bjs> pikajude: and most of those objects are also other things too (e.g. generators) that have other methods too
[00:46:38] <pikajude> can you quote me on when i said nth() needs to be state dependent?
[00:46:41] <pikajude> thanks
[00:46:42] <SnoopJ> no, I can't
[00:46:51] <SnoopJ> pikajude, do you see the point I was making?
[00:46:51] <mokulus> some people have weird fixation that an interface has to be explicitly implemented through inheritance but are unable to argue why that should be the case
[00:47:08] <pikajude> well, your point is predicated on a misunderstanding of my question, so no, not really
[00:47:10] <BrenBarn> who's they?
[00:47:11] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:47:23] *** Quits: visl (visl@user/visl) (Ping timeout: 252 seconds)
[00:47:23] <BrenBarn> but like, it would be totally possible for someone to make their own class hierarchy for iterators and whatever else and release it as a lib
[00:47:25] <pikajude> bjs: plenty of iterables aren't (and should not be) iterators
[00:47:29] <Wooble> mokulus: to be fair constxd seems to be arguing there should be one obvious way to do it. :)
[00:47:34] <BrenBarn> and then people could write other libs that use that interface
[00:47:36] <bjs> pikajude: yes, but that's not what you said, you said the other way around :)
[00:47:37] <hexnewbie> mokulus: I'm surprised it starts with something obsure-ish like iterators, and not, say, len()
[00:47:41] <constxd> yes
[00:47:43] <BrenBarn> so it's not like the Python duck-typing method really blocks anything
[00:47:48] <constxd> the inconsistency is what bothers me
[00:47:56] <pikajude> i said
[00:47:56] <SnoopJ> pikajude, are you saying that there should be a way to advance an iterator by N steps? Perhaps I misunderstood what nth() is supposed to do.
[00:47:57] <pikajude> "isn't it a massive red flag to have an object which is both an iterable and an iterator?"
[00:48:01] <Julian> BrenBarn: of course you could
[00:48:04] <Julian> it'd be unlikely to catch on though
[00:48:08] <bjs> pikajude: yes, but no it's not, because iterators are also iterable.
[00:48:10] <Julian> given the community generally likes the existing way
[00:48:12] <pikajude> and that's the opposite of "plenty of iterables are not iterators"?
[00:48:14] <SnoopJ> there is literally no iterator that is not iterable
[00:48:22] <Festive_Dragon> SnoopJ: for _ in range(n): next(iterator); return iterator
[00:48:34] <SnoopJ> Festive_Dragon, what?
[00:48:43] <Festive_Dragon> a (silly) nth implenentation
[00:48:47] <BrenBarn> why return the iterator instead of the value
[00:48:49] <Festive_Dragon> or I guess you'd want to return the last one
[00:48:50] <pikajude> i feel like the pedantry is really only serving as a distraction
[00:48:55] <dav1d> This just derailed into nonsense
[00:48:55] <hexnewbie> Festive_Dragon: We gave four earlier :)
[00:49:03] <Wooble> pikajude: welcome to IRC?
[00:49:08] <bjs> pikajude: I'm not sure what you're trying to say, you're trying to make a point about things being both iterators and iterables ?
[00:49:10] <Festive_Dragon> lol
[00:49:35] <pikajude> yeah, what i'm saying is that if you have some class which can produce an iterator that iterates over something, that iterator should be a *separate class*
[00:49:37] <pikajude> in most cases, at least
[00:49:40] <SnoopJ> pikajude, I'm not sure what else is left if we elide pedantry here, what we are discussing are definitions of words.
[00:49:48] <bjs> pikajude: that's not quite what you said, but maybe you are right
[00:49:50] *** Quits: canton7 (canton7@about/csharp/canton7) (Quit: ZNC - http://znc.in)
[00:49:51] <hexnewbie> I've had to use islice() right about 1 times in my life, by the way
[00:49:58] <bjs> pikajude: unless of course, that iterable is an iterator, in which case, that class is itself
[00:50:02] <mokulus> why should it be a separate class?
[00:50:03] <pikajude> the argument "oh but that iterator is still an iterable" doesn't serve any purpose
[00:50:07] <pikajude> because the iterator needs to track state
[00:50:22] <Festive_Dragon> well, it doesnt have to
[00:50:24] <bjs> pikajude: sure it does, because that iterable might have been an iterator, so there's an example that can't return a different class
[00:50:27] <Festive_Dragon> most will, but not all
[00:50:33] <hexnewbie> pikajude: It serves the important purpose of *actually allowing you to iterate over the iterator*
[00:50:35] <SnoopJ> it serves the purpose of pointing out that the question contained a contradiction
[00:50:56] <hexnewbie> pikajude: For example, you can loop over open files
[00:50:59] <pikajude> oh, i think i understand
[00:51:07] <pikajude> the iterator class itself will still have an __iter__ method that returns itself
[00:51:20] <pikajude> so that confuses things a bit
[00:51:22] <Julian> correct
[00:51:23] <bjs> pikajude: and many things out there are iterators (and therefore iterables) that have other methods. e.g. generators (which has a .throw() method and a .send() method for example)
[00:51:36] *** Joins: canton7 (canton7@about/csharp/canton7)
[00:51:37] <bjs> so an iterator doesn't have to have *just* the iterator methods
[00:51:45] <SnoopJ> right, `iter(some_iterator) is some_iterator` -> True for something that satisfies the definition
[00:51:46] *** Joins: sleepingforest (~sleepingf@user/sleepingforest)
[00:51:46] <pikajude> but the "parent" class, which only has __iter__, won't have the other methods from the standard library Iterator abc
[00:51:54] *** Parts: sleepingforest (~sleepingf@user/sleepingforest) (WeeChat 3.0)
[00:52:05] <SnoopJ> iterables are only required to be able to produce iterators (__iter__)
[00:52:08] *** Joins: sleepingforest (~sleepingf@user/sleepingforest)
[00:52:09] <pikajude> the point being that your autocomplete won't be clogged by unrelated parent class methods because it's a separate type
[00:52:29] <Festive_Dragon> you're making assumptions about the autocomplete engine, and so on
[00:52:35] <mdk> pikajude: iterators are iterables because a few things can return an iterator directly (generators, opened files, ...), semantically it means "don't call iter() on it to "restart it", it's not an iterable, it's already an iterator"
[00:52:37] <BrenBarn> I mean, you can do that if you want
[00:52:39] <Festive_Dragon> generally you dont get autocompletes for magic methods anyway
[00:52:48] <bjs> pikajude: well except for the example iterator I gave which does have other methods, and lots of iterators have other methods too
[00:52:48] *** Joins: cellofellow (~user@166.70.30.252)
[00:53:00] <pikajude> well, the proposed additions to Iterator would include non-magic methods anyway
[00:53:01] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[00:53:03] <SnoopJ> and because there's one obvious way to understand an iterator as an iterable: iter() is the identity
[00:53:05] <Helenah> I'm using pyfilesystem MountFS, is there any way to return the absolute path? I'm not talking about the absolute path as it would be on the OS filesystem but the absolute path as it would be in the application.
[00:53:06] <BrenBarn> in practice I think it actually is how a lot of iterables work, because they just have a generator function for `__iter__`
[00:53:10] <sleepingforest> what are the popular apm libraries people use for self hosted apm/tracing (elastic, jaeger, zipkin)?
[00:53:15] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[00:53:16] <bjs> pikajude: and in general iterator is a very tiny interface where this may be true, there are lots of other protocols that get mixed together a lot more
[00:53:26] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:53:50] <constxd> this is how chad programming languages define iter/iterable: http://paste.pr0.tips/vc
[00:54:04] <constxd> guido could learn a thing or two
[00:54:09] <bjs> and by separating things out into itertools, functools etc you actually *improve* autocompletion by reducing the noise to only the functions of interest.
[00:54:16] <bjs> constxd: Guido isn't in charge
[00:54:39] <pikajude> or remove it completely because your autocomplete doesn't autocomplete methods from a totally separate module when you're trying to autocomplete a method on an object
[00:54:47] <bjs> pikajude: what do you mean?
[00:54:47] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 256 seconds)
[00:55:01] <SnoopJ> bjs, I think they mean "I should be able to obj.<TAB>"
[00:55:04] <bjs> pikajude: in any IDE i've ever used, if I go obj.<tab> i get all the methods/attributes of the object.
[00:55:07] <pikajude> if i try to autocomplete `x.` where x is an iterator, there isn't gonna be a whole lot of itertools suggestions
[00:55:11] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:55:15] <pikajude> it might be only __next__ and the other magic methods
[00:55:17] <bjs> pikajude: there would be with your proposal.
[00:55:23] <pikajude> yes
[00:55:25] <pikajude> that's my entire point
[00:55:27] *** Joins: ianliu (~ianliu@177.103.45.247)
[00:55:28] <bjs> and that's bad
[00:55:39] <Festive_Dragon> pikajude: generally, you dont show users magic methods when tab completing, or if you do, you rank them very low
[00:55:43] <pikajude> the way that i prefer to write code is bad...understood
[00:55:45] <pikajude> thanks
[00:55:46] <Festive_Dragon> generally you're not calling magic methods directly
[00:55:49] <pikajude> yeah, i know
[00:55:51] <SnoopJ> Festive_Dragon, there are plenty of editors that show them
[00:56:04] <pikajude> on iterators at least in this case there aren't any other methods so i see all the magic ones
[00:56:07] <SnoopJ> (really, is this conversation too focused, or...?)
[00:56:08] <Festive_Dragon> SnoopJ: ranked above others?
[00:56:11] <bjs> pikajude: I didn't mean that, I'm just saying that it's not obvious that moving everything into the class makes autocompletion better
[00:56:21] <Helenah> Nvm, I think I found a solution.
[00:56:22] <bjs> pikajude: because all you do is mush things together into a bigger autocompletion list.
[00:56:26] <constxd> yes, seeing a list of possible things you can do with the type of object you have... very bad...
[00:56:27] <pikajude> it's not obvious that it's better => it's objectively bad
[00:56:30] <ianliu> I'm trying to run a job with Dask Distributed (using aws fargate), but I think my workers are being killed because of RAM usage. Is it possible to limit running a single job per worker? How can I do this?
[00:56:38] <SnoopJ> Festive_Dragon, let's cut through the various questions you might ask in response to whatever I might say: for a behavior you can envision, assume an editor exists that does it.
[00:56:45] <bjs> pikajude: not necessarily
[00:56:48] <pikajude> i'm mushing "nothing at all" and "helpful completions" into a list that contains "helpful completions"
[00:56:57] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[00:57:00] <SnoopJ> Although as pointed out before, IDEs don't drive programming languages
[00:57:02] <Festive_Dragon> SnoopJ: ah we're being abstract, okay
[00:57:14] <mefistofeles> lets go back to punchcards, they used computers better that way, it seems... problem solved! :P
[00:57:24] <bjs> pikajude: i go into my editor and type itertools.<tab> and I get my autocompetion for any iteration tools I need.  You would prefer to type just obj.<tab> and get everything mushed together.  It's not obvious one is better than the other.
[00:57:38] <SnoopJ> bjs, well, not obvious to you
[00:57:47] <bjs> SnoopJ: :P
[00:57:49] *** Quits: AM (~techman@87-94-110-75.bb.dnainternet.fi) (Ping timeout: 240 seconds)
[00:57:52] <bjs> It's obvious to everyone
[00:57:54] <pikajude> you should also say the word "mushed together" for itertools unless you mean it in a positive way
[00:57:57] *** Quits: Forsaken87 (~quassel@2a02:908:1867:7d40:93ab:b917:6d2c:4af1) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:57:57] <bjs> just which answer is obvious is different
[00:58:20] *** Joins: rya (~ry@user/rya)
[00:58:21] <mokulus> bjs i think you're getting trolled at this point
[00:58:24] <deniska> (you people have autocompletion?)
[00:58:27] <dav1d> There is also the problem of the iterator gaining a new base method in py 3.x that collides with an already implemented method that does something else
[00:58:28] <bjs> mokulus: by you? Yeah I know
[00:58:34] <pikajude> i mean, you could argue that IDEs *do* drive programming languages, because the people who design the languages also use editors a lot
[00:58:34] <bjs> I'd appreciate if you stop
[00:58:36] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[00:58:54] <pikajude> i won't argue that, but someone could
[00:58:56] <SnoopJ> pikajude, we could, but have we not enough argument here
[00:59:00] <mokulus> haha, i don't think i've mentioned you once before
[00:59:25] <bjs> pikajude: well I'm saying things are currently separate and then you want to bring them together.  I say,  that may or may not be better. It's not objectively obvious to everyone which way is better
[00:59:35] <bjs> and Python chose this way, and it has advantages and disavantages
[00:59:44] *** Joins: Forsaken87 (~quassel@2a02:908:1867:7d40:93ab:b917:6d2c:4af1)
[00:59:45] <constxd> consider this
[00:59:47] <bjs> now you've taken me down a path (Defending itertools) I rarely walk :P
[01:00:12] <SnoopJ> I personally like that Python starts with the absolute minimal behavior and works its way up. I wouldn't be opposed to a definition that extends iterator in this direction, but I don't really see any behavior that is "missing" from iterator itself here
[01:00:37] <pikajude> apparently the python developers have, because there's an entire module for convenience methods on iterators
[01:01:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:01:03] <constxd> my_iterable.map(f).filter(g).take(4).cycle() vs.  itertools.cycle(itertools.take(4, itertools.filter(g, itertools.map(f, my_iterable))))
[01:01:04] <SnoopJ> that module exists precisely because those behaviors do *not* belong in the definition of 'iterator'
[01:01:08] <hexnewbie> and one on functions, one on collections, etc.
[01:01:09] <dav1d> Pythons iterator is absolutely minimal and that's why it's great, no double ended, infinite, sized, random access etc iterators
[01:01:14] <SnoopJ> they are things you can *do* with iterators
[01:01:23] <pikajude> wait, you can't make an infinite iterator?
[01:01:30] <bjs> pikajude: sure you can
[01:01:31] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:01:33] <constxd> oh my god
[01:01:33] <pikajude> oh
[01:01:34] <SnoopJ> you can, pretty easily
[01:01:38] <dav1d> You can but it's not a separate class
[01:01:54] <Yhg1s> (iterators aren't a class at all.)
[01:02:00] <pikajude> is there a language that has a separate class for infinite iterators?
[01:02:03] <pikajude> that seems extremely redundant
[01:02:11] <dav1d> Other languages, libraries usually have such concepts as e. G
[01:02:13] <constxd> things you can do with iterators are precisely the things that go into the abstract base class
[01:02:13] <deniska> Aren't iterators fairly minimal in every language which has a concept like that?
[01:02:17] <pikajude> isn't "iterator" infinite and then there's a sized iterator interface
[01:02:18] <dav1d> A double ended iterator
[01:02:18] <deniska> I think they're two methods in java
[01:02:34] <dav1d> Java has streams
[01:02:38] <constxd> you guys are the biggest homers
[01:02:45] <dav1d> Java iterators also do not have all these methods
[01:02:49] <pikajude> yeah, at least in rust, there's one required method and a required associated type
[01:02:55] <pikajude> which is the minimum amount you need to build an iterator
[01:02:57] <constxd> python is flawed sorry kings
[01:03:00] <dav1d> And Java streams are complex and nothing you will ever implement
[01:03:05] <deniska> iterator is "bare minimum to put a thing in a for-loop"
[01:03:06] <bjs> constxd: yes it is
[01:03:18] <dav1d> Rust also has double ended iterators
[01:03:20] <constxd> hard pill to swallow i know
[01:03:25] <bjs> constxd: not really
[01:03:27] <pikajude> and sized iterators
[01:03:27] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[01:03:27] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:03:35] <dav1d> But rust allows you to extend the interface with traits, so it works
[01:03:37] <pikajude> oh, and fused iterators
[01:03:41] *** Quits: aphysically (~aphysical@user/aphysically) (Quit: aphysically)
[01:03:41] <bjs> it's 30 years old, pretty sure 1/2 the people here could spend days listing all the problems with Python.
[01:03:41] <Helion> If there was a perfect language it would write itself
[01:03:42] <pikajude> yeah, the trait system is neat
[01:03:52] <Helion> could
[01:03:53] <dav1d> In python this just makes problems
[01:03:53] <SnoopJ> pikajude, the associated type is definitely something that runs against the grain of Python, here, because iterator is an "is a" property more than it is a type
[01:03:55] <Yhg1s> constxd: I'm not sure why you think people think it's perfect. It's just made certain choices.
[01:04:05] <bjs> constxd: but this particular thing, whether it's how we'd design new languages today or not, was a deliberate decision in the past
[01:04:06] <hexnewbie> Python has a million problems, but the iterator protocol ain't one
[01:04:08] <SnoopJ> but yea I guess trait systems exist to give more formality to the same idea
[01:04:15] <bjs> (hint: it's not)
[01:05:02] <bjs> SnoopJ: trait systems are an obvious place where you can add these methods without problems
[01:05:15] <dav1d> I used languages where I wished they used pythons iterators not some convuluted thing (e.g. D they have a Range concept there)
[01:05:29] <Helion> the iterator protocol is actually pretty well thought out, and minimal.  the old sequence protocol circa python 2.0 ...that...was pretty bad
[01:05:30] <SnoopJ> bjs, right, you'd have a trait for ArbitrarilyAdvanceable or something I guess
[01:05:38] <bjs> Yeah, Python-like "iterators" with a trait system (like Rust) gives a really nice system
[01:05:58] <hexnewbie> Having to write zip(a, b) instead of a.zip(b) is... well, let's say even np.dot(a, b) is preferred over a method
[01:06:28] <SnoopJ> bjs, I do admire Python's ruthless minimalism about iterator, though, because you're *necessarily* building something more abstract if you want anything else
[01:06:31] <Yhg1s> ugh, imagine having to write a.zip(b).
[01:06:33] <dav1d> Also python doesn't really need heavy iterators imo, often iterators are very short for me, compared to other langues thanks to LCs etc
[01:06:35] <SnoopJ> and, well...that's true
[01:06:47] <bjs> Yhg1s: oh no how terrible would that be /s
[01:06:48] <bjs> :P
[01:06:55] <SnoopJ> it appeals to the mathy side of my brain I think
[01:07:00] <Yhg1s> bjs: it's not an operation on a, so yeah, it'd be terrible :)
[01:07:17] <bjs> Yhg1s: just have b.rzip(a)
[01:07:32] <Yhg1s> bjs: that may not be an operation on b either, if 'a' is empty :)
[01:07:36] <dav1d> zip = Iterator.zip :p
[01:08:01] <Yhg1s> Besides, zip() takes any iterable, not just iterators.
[01:08:22] <bjs> as do the itertools things
[01:08:23] <hexnewbie> so does next(it) vs. it.__next___()
[01:08:30] <bjs> lots of them at least
[01:08:32] <pikajude> Iterator::zip(a, b)
[01:08:33] <hexnewbie> well, I mean, the behaviour differs from that of a potential method
[01:08:35] <SnoopJ> yea, you quite rarely care beyond "iterable thing"
[01:08:45] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 250 seconds)
[01:08:47] <Yhg1s> hexnewbie: next() does require an iterator.
[01:08:48] <SnoopJ> except where you explicitly know/care about the state of an iterator
[01:09:21] <Yhg1s> pikajude: we pretty much have that, except we decided to leave out the 'Iterator::' part, since 'zip' is not just about iterators.
[01:09:24] <hexnewbie> Yhg1s: Yeah, I meant that next(), like zip(), also does something different than what a proposed Iterable method woul ddo
[01:09:29] <hexnewbie> s/different/more/
[01:09:46] <Yhg1s> hexnewbie: indeed. And importantly, it can change its behaviour without having to change every iterator.
[01:10:02] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:3c37:87d4:4bc2:73ec)
[01:10:02] <SnoopJ> and the "not just about" part of that is really the crux of it I think: when it's part of your type system, you'd better hope your type system anticipated *everything* and left enough feature surface for everything
[01:10:39] <pikajude> Yhg1s: that's the other way you could write it in Rust, where zip is a method on Iterator
[01:10:44] <pikajude> it's normally called a.zip(b)
[01:10:46] <SnoopJ> when it's just an abstract definition (or traits) that you expand on, you're not locked in forever more
[01:10:46] <dav1d> Yeah that's where Java lacks and why rxjs moved away from methods
[01:10:55] <bjs> SnoopJ: well that's the nice thing about traits, is that you can add things later without having to change client code too much
[01:11:16] <SnoopJ> bjs, yea I feel like traits are the definite answer to "but I don't like duck typing" here
[01:11:22] <Yhg1s> pikajude: I have the same objections to that use in Rust, yes, although because Rust is fundamentally a completely different language, it's somewhat less of an issue there.
[01:11:39] <SnoopJ> bjs, or in Python I suppose we're stuck with Protocols and static analysis
[01:12:01] <SnoopJ> (which is fine by me)
[01:12:04] <pikajude> oh, i just thought it would be preferable because you get to specify them both as arguments to a method
[01:12:07] <pikajude> rather than using dot syntax
[01:12:18] <pikajude> but i'm no math guy so i couldn't tell you
[01:12:49] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[01:12:54] <bjs> pikajude: if there was a base Iterable class that had zip you'd be able to say that in Python too;  Iterable.zip(a,b)  rather than a.zip(b)
[01:13:10] <bjs> (ofc there is no base Iterable, and if there were, it probably wouldn't have zip)
[01:13:25] *** Quits: cosimone (~user@93-47-231-203.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:13:29] <Helenah> Okay so I've got the path to just the directory that the application will use, I've attempted to use lstrip to remove that off the beginning but it returns nothing.
[01:13:30] <Swayze> for the beginners amongst us, TIL: Exception is not the... base ... exception class (BaseException) lol https://docs.python.org/3/library/exceptions.html#exception-hierarchy
[01:13:30] <bjs> well there is the Iterable abc but I don't think i've ever seen anyone actually use it for anything
[01:13:32] <pikajude> rust uses IntoIterator, which is basically the same thing as Iterable
[01:13:39] <Helenah> pyfilesystem MountFS
[01:13:54] <SnoopJ> pikajude, right but that is a trait, not a type
[01:13:55] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-35ba-b7a0-d966-f0ce.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:14:00] <hexnewbie> Swayze: Other languages have Throwable instead of BaseException
[01:14:09] <SnoopJ> and traits are just a formal way to implement the same "is a" idea
[01:14:12] <bjs> Swayze: yeah, BaseException is for "the things that you probably don't intend to actually catch" like asynchronous aborts and SystemExit and things like that
[01:14:13] <Swayze> hexnewbie: nice
[01:14:21] <Swayze> bjs: indeed, how clever :)
[01:14:22] <dav1d> Rusts IntoIter trait is basically __iter__
[01:14:36] <Helenah> Nvm, I think I have a solution.
[01:15:24] <SnoopJ> dav1d, the function-y part, anyway
[01:15:34] <dav1d> Yeah
[01:15:47] <bjs> dav1d: well the trait itself is like iterator type, the .into_iter() is like __iter__
[01:16:00] <bjs> infact they're basically the same protcol
[01:16:14] <dav1d> That's what I tried to say
[01:16:16] <dav1d> Yeah
[01:16:33] *** Joins: zyzzyxdonta (~zyzzyxdon@2a02:3036:7:5279:ff4:1db4:c08b:ca7d)
[01:16:38] *** Joins: luigibu (~luigi@80.30.201.209)
[01:16:47] <bjs> dav1d: but it's only 1/2 the story because the standard rust .iter() does have more methods
[01:16:57] <bjs> it's not quite fair to only point at one half
[01:17:00] *** Quits: zyzzyxdonta (~zyzzyxdon@2a02:3036:7:5279:ff4:1db4:c08b:ca7d) (Client Quit)
[01:17:06] <dav1d> And I still think no matter how awesome rusts iterators are, python doesn't need them
[01:17:30] <dav1d> It doesn't, they both return q
[01:17:42] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[01:17:45] <Swayze> clever bit i mean of course being able to capture events using catch that are not strictly code exceptions
[01:17:51] <dav1d> Something implementing the iterator trait, just iter hs references to the original data
[01:18:02] <dav1d> Sorry typing on my phone is hard...
[01:18:04] <bjs> dav1d: what?
[01:18:25] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl488tdzsunjald63.ipv6.telus.net)
[01:18:30] <dav1d> Into iter consumes self, iter does not
[01:18:37] <bjs> Yes
[01:18:46] <hexnewbie> The only non-builtin itertools non-factory function I use regularly is chain(). Even zip_longest() is rare. And islice() is for some stuff I probably shouldn't be doing
[01:18:53] <bjs> but it's only 1/2 the story because the trait has a bunch of extra methods that Python does not
[01:19:02] <dav1d> You still get the full iterator trait
[01:19:27] <dav1d> Ah I think we're talking about different things
[01:19:28] <bjs> dav1d: yes but like I said it's only 1/2 the story, you have __iter__ and the Iterator has __next__ ofc but rust's iterators also have a bunch of extra stuff for free in the trait
[01:19:33] <bjs> that you get, but don't have to implement
[01:19:40] <dav1d> Sec I'll get my laptop
[01:19:51] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:20:47] <dav1d> bjs, apologies, I misunderstood your message, I thought you were talking about differences between iter() and into_iter() not rust's iter() and python's __iter_-
[01:20:51] <bjs> I'm not as negative as Yhg1s about these things, I think it's fine to have a.zip(b) and lots of other iterable methods.  It doesn't work quite as well in Python (and today, would be impossible to retrofit onto the language)
[01:21:24] <bjs> dav1d: rust has .iter() and .into_iter() but both give you an Iterator<T>, it's just whether the T is a ref or not
[01:21:25] <dav1d> stuff like .zip() should just be called .zipWith() :(
[01:21:33] <dav1d> bjs, yeah that's what I tried to say
[01:21:36] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[01:21:43] <NeilRG> what's the correct format for pip install git+git?
[01:21:46] <dav1d> I just misunderstood you
[01:22:07] <SnoopJ> `a.zip(b)  # oh no, is that the standard zip(), or does whatever the type of `a` currently is redefine it`
[01:22:12] <hexnewbie> I'm sure as far as opinions go, there's someone who prefers a.add(b) to a + b
[01:22:29] <bjs> SnoopJ: well, sure.
[01:22:36] <dav1d> hexnewbie, impossible! :D
[01:22:38] <bjs> I prefer (+ a b) actually
[01:22:41] <grym> hexnewbie: a pox on all infix operators!
[01:22:44] <grym> hahaha yes
[01:22:44] <SnoopJ> bjs, or anybody above `a`
[01:23:14] <SnoopJ> bjs, I think my objection is more that it adds a thing to the type diagram and I have a revulsion about that :P
[01:23:34] <NeilRG> nm got it
[01:23:35] <SnoopJ> because two someones are going to subtype and create a diamond dependency, it's just gonna happen
[01:23:46] <bjs> SnoopJ: it's not a big deal, you can say the same about any method
[01:23:51] <bjs> what about d.keys()
[01:24:10] <SnoopJ> bjs, d.keys() does different things on different types
[01:24:33] <bjs> SnoopJ: sure, and if someone overwrites zip on their iterable type it better have been overwritten to do the right thing :P
[01:24:44] <SnoopJ> the whole point of the builtins being at module level was I thought because they do the *same* thing to iterable types
[01:25:05] <hexnewbie> Hey, I've once made a Sequence that's also a Set, without running into any obvious conflicts
[01:25:08] <bjs> and yes there's an argument that letting people redefine it is good as they can possibly implement their own versions that are faster/better etc
[01:25:13] *** Joins: aphysically (~aphysical@user/aphysically)
[01:25:24] <SnoopJ> well, they aren't restricted from doing that
[01:25:25] *** Quits: upsala (~zcb@185.213.155.232) (Quit: WeeChat 3.3)
[01:25:26] <bjs> hexnewbie: yeah, the two protocols are compatible
[01:25:43] <dav1d> bjs, but that's also a downside, efficient iterators are not simple anymore
[01:25:46] <SnoopJ> although doing it in a way that locks their users into a type diagram isn't feasible as it currently is, but I won't lose any sleep over that :P
[01:25:56] <bjs> dav1d: i didn't say it wasn't a trade-off :P
[01:26:38] <SnoopJ> I think my preference is probably mostly about the operation being more important than the operands
[01:26:56] <SnoopJ> zip(a, b) is an RPN-y spelling :)
[01:27:05] *** Quits: mokulus (~mokulus@user/mokulus) (Ping timeout: 256 seconds)
[01:27:12] <dav1d> Also I am sure, someone came up with a way of patching object.__new__ or something to magically implement itertools.* onto classes with __next__ :p (no idea if that's actually possible)
[01:27:23] <hexnewbie> One advantage of a ‘method’ approach is that product(x, y) can become x * y, theoretically. Though I guess that would be rejected as non-obvious, or due to lack of agreement on whether it should be a @ b
[01:27:30] *** Quits: XV8 (~XV8@2601:5cb:c001:50:3422:70c3:45ca:a8b5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:27:39] <SnoopJ> but OTOH I am not entirely opposed to infix operators, I like Julia's way of defining them for instance. But it relies on dispatch mechanisms that Python doesn't come anywhere near
[01:27:43] *** Joins: onichomp (~onichomp@2806:264:4404:8162:a807:857b:6d3:3c16)
[01:28:17] <SnoopJ> (I know I'm conflating infix operators and instance methods here but oh well)
[01:28:22] *** Joins: arinov (~arinov@213.194.126.155)
[01:28:38] *** Quits: jayray (~jayray@user/jayray) (Ping timeout: 268 seconds)
[01:28:48] *** Joins: XV8 (~XV8@2601:5cb:c001:50:29c4:77b3:3d1a:a58b)
[01:29:41] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[01:30:04] *** Joins: wasutton (~wasutton3@75-46-236-127.lightspeed.tukrga.sbcglobal.net)
[01:30:04] <hexnewbie> No obvious conflicts seem to arise witht he rest, particularly not with files and generators, which are the only major non-standard popular iterators I'm aware of
[01:30:22] *** Joins: TuckerBrandy1997 (~TuckerBra@209.87.29.242)
[01:30:24] *** Joins: jayray (~jayray@user/jayray)
[01:30:32] <wasutton> is the only async telnet library out there asynctelnet?
[01:30:44] <wasutton> https://pypi.org/project/asynctelnet/#description
[01:30:57] <TuckerBrandy1997> How do I fix this if my sorting key have a space: key=itemgetter('Review #') <--- like this
[01:31:39] <wasutton> @TuckerBrandy1997, maybe split the string and sort by an element of the split?
[01:31:53] <TuckerBrandy1997> huh
[01:32:07] <hexnewbie> TuckerBrandy1997: That ought to work, the space is insignificant for the item. In fact, any type and content is allowed
[01:32:31] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[01:32:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:32:36] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[01:33:03] <SnoopJ> hexnewbie, there are a lot of iterators in PyTorch, for instance, and I would sure hate to have to think about that entire type tree to know if zip() is gonna do what I expect zip() to do
[01:33:22] <TuckerBrandy1997> oh weird, it does work
[01:33:33] *** Joins: stonkey (~stonkey@user/stonkey)
[01:33:52] <TuckerBrandy1997> but it sort in such a way that 1, 10, 100 are the first 3 records then 2, 20 are second
[01:33:59] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:943d:5b05:e9f7:79b5)
[01:34:13] <TuckerBrandy1997> are next*
[01:35:20] <ThePhilgrim> Hey, If I have a dict that looks like {"string": instance of Class foo} and this dict gets passed to a function, how would I type hint that with mypy?
[01:35:31] <hexnewbie> TuckerBrandy1997: It sounds like the things are strings. If you're sure all strings are numbers, and you are all right if any other values give you an error: key=lambda v: int(v['Review #'])
[01:35:40] <ThePhilgrim> def func(bar: Dict[str, ???])
[01:35:45] <grym> ThePhilgrim: Dict[str,Foo]
[01:35:46] <SnoopJ> ThePhilgrim, is `Dict[str, foo]` what you want?
[01:35:48] <grym> right?
[01:35:55] <wasutton> @TuckerBrandy1997, sounds like you also need to classify the sort key as an int, rather than a string
[01:35:58] <ThePhilgrim> Aahh, so the class name?
[01:36:10] <grym> it is the name of that of which the instance is an instance
[01:36:17] <grym> ... how more awkwardly can i say that
[01:36:18] <SnoopJ> ThePhilgrim, Dict's slots give the types of its keys/values, yes
[01:36:50] <TuckerBrandy1997> hexnewbie: Thanks I'll try that
[01:36:53] <ThePhilgrim> lol grym xD
[01:36:58] <ThePhilgrim> Thanks guys!
[01:37:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:38:00] *** Joins: beli6148 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[01:38:13] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Ping timeout: 250 seconds)
[01:38:13] *** beli6148 is now known as beli6147
[01:39:20] *** Quits: Sario (uid356235@fosshost/cdo/Sario) (Quit: Connection closed for inactivity)
[01:39:33] *** Quits: lbracher (~lucas@77.109.116.248) (Ping timeout: 256 seconds)
[01:40:00] *** Joins: JordiGH (~jordi@user/jordigh)
[01:40:10] <JordiGH> What's this square bracket notation? First time I see it: pip install celery-progress[websockets,rabbitmq]
[01:40:28] <grym> JordiGH: those are how you list which extras you want
[01:40:38] <JordiGH> extras?
[01:40:53] <SnoopJ> they're pretty much what they sound like: extra stuff that can be installed with a package
[01:40:54] <yitz> Like ketchup on your hotdog
[01:41:06] <aphysically> nedbat: yes Counter was useful again last night :) https://bpa.st/3GRQ -> I reused my window function, but in 3.10 we an also use pairwise (wish we had a general windowing function in stdlib though!)
[01:41:20] <JordiGH> So can I do `pip install celery-progress websockets rabbitmq` instead?
[01:41:23] <SnoopJ> no
[01:41:28] <JordiGH> They aren't extras?
[01:41:36] <grym> they're extras _to celery-progress_
[01:41:40] <SnoopJ> right, that would install 3 packages, two of which are named websockets and rabbitmq
[01:41:43] <JordiGH> What are they? Another package?
[01:41:45] <JordiGH> A subpackage?
[01:41:53] <SnoopJ> they are whatever celery-progress defines them to be
[01:41:59] <SnoopJ> https://setuptools.pypa.io/en/latest/userguide/dependency_management.html#optional-dependencies
[01:42:00] <grym> no, they are ... extras... that you can opt in to
[01:42:07] <JordiGH> Extra what?
[01:42:13] <JordiGH> Extra ketchup?
[01:42:15] <JordiGH> What does that mean?
[01:42:18] <grym> yes, extra ketchup.
[01:42:19] <Helion> They are rules that celery-progress defined for optional dependencies.
[01:42:23] <grym> well, you get more red stuff on your plate
[01:42:24] <SnoopJ> JordiGH, optional dependencies. Read the above link.
[01:42:43] <JordiGH> Oh, optional dependencies, thanks, no need to read the link.
[01:42:48] <grym> (╯°□°）╯︵ ┻━┻
[01:42:49] <SnoopJ> The name inside the [] is *not* required to be related to the packages that will be installed, and it is not one name to one extra package.
[01:42:55] <SnoopJ> A single extra might install many packages.
[01:43:29] <yitz> aphysically: where is window defined? And why was I unaware of pairwise()?
[01:43:35] <grym> i sometimes have a 'dev' extra that installs like 12 things
[01:43:39] <grym> plus those things dependencies
[01:43:54] <aphysically> yitz: I'm using the windowing function from the itertools documentation
[01:43:58] <yitz> Oh. nvm. 3.10. Arch isn't there yet
[01:44:00] <ThePhilgrim> Hmm, I have another problem with mypy (very new to it). I have class "Server", in a method of Server, I instantiate another class with "foo = OtherClass(self, bar)"  (so I'm passing Server as an argument to OtherClass), in the OtherClass' init, I have def __init__(self, server: Server, bar: str) . However, the code errors, saying "Server" is not defined
[01:44:13] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Quit: ZNC - https://znc.in)
[01:44:16] <aphysically> yitz: I did add type annotations though https://bpa.st/SU7Q
[01:44:20] <yitz> Ah. itertools.sliding_window
[01:44:41] <yitz> I just do a    zip(s, s[1:])
[01:45:07] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (Remote host closed the connection)
[01:45:20] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[01:45:24] <yitz> pairwise() is cleaner. But ... 3.9 :(
[01:45:52] <SnoopJ> ThePhilgrim, you can either `from __future__ import annotations` or annotate with the name of the class being forward-referenced (i.e. referred to before it's defined) as a string
[01:46:00] *** Joins: beli6148 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[01:46:22] <SnoopJ> (they're basically the same thing, but the future feature is an upcoming syntax change)
[01:46:22] <aphysically> yeah, I went ahead and just put it in my preamble since it's a bit more generic (does require it to be indexable)
[01:46:26] <ThePhilgrim> Ah right, I've used from __future__ before but never understood what it does
[01:46:28] <aphysically> sliding_window
[01:46:45] <aphysically> doesn't*
[01:47:50] <aphysically> zipping here is fine yeah
[01:48:05] <SnoopJ> ThePhilgrim, __future__ is a way to ask for features from a future version of Python. In this case, the feature is called postponed evaluation of annotations (documented in PEP 563)
[01:48:16] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[01:48:59] *** Quits: emf_ (~emf@2620:10d:c091:480::1:3f40) (Ping timeout: 252 seconds)
[01:49:03] <ThePhilgrim> Ah okay, basically, wait for the whole file before checking annotations?
[01:49:15] <SnoopJ> ThePhilgrim, no, it does basically exactly the same thing as putting the class name in strings.
[01:49:29] <ThePhilgrim> Hmm, oh
[01:49:43] <SnoopJ> "This PEP proposes changing function annotations and variable annotations so that they are no longer evaluated at function definition time. Instead, they are preserved in __annotations__ in string form."
[01:49:52] *** Joins: thekingofbandit (~thekingof@user/thekingofbandit)
[01:49:54] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Ping timeout: 260 seconds)
[01:49:54] *** beli6148 is now known as beli6147
[01:50:02] <ThePhilgrim> ah okay
[01:50:07] <ThePhilgrim> Makes sense!
[01:50:08] <SnoopJ> i.e. with the feature enabled, `def func(x: Foo): ...` is fine even if Foo isn't defined, because it's just gonna be turned into a string.
[01:50:12] <TuckerBrandy1997> The first col in my records is 'Review #': '100', if I want to sort by the integer value of 'Review #', should I convert the value to int or is there an alternative way to do it?
[01:50:24] <SnoopJ> pointing out that "hey, that name doesn't point at anything!" is the type checker's problem :)
[01:50:30] <ThePhilgrim> :D
[01:50:33] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[01:50:42] <grym> TuckerBrandy1997: you can sort strings, but maybe not how you'd like them to be sorted
[01:50:58] *** Joins: MockingMoniker (~MockingMo@ip72-201-253-44.ph.ph.cox.net)
[01:51:06] <grym> TuckerBrandy1997: sorted(["100","10"], key=lambda x: int(x)) will sort like it's an int (but keep it a string)
[01:51:43] <TuckerBrandy1997> i am sorry I should specifiy
[01:51:43] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[01:51:56] <TuckerBrandy1997> myQ = sorted(myQ, key=itemgetter(sortKey), reverse=isSort) <-- myQ is a list of dict
[01:52:05] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:52:18] <TuckerBrandy1997> And I want this   myQ = sorted(myQ, key=itemgetter('Review #'), reverse=isSort) as my default sort
[01:52:39] <grym> then key=lambda d:int(d[sortKey]), perhaps
[01:53:11] <Swayze> At what level would you expect someone to be able to explain/define the significance of LEGB (heirarchy/relationship) with regards to variable scoping in python?
[01:53:14] <grym> i'm sure there's a way to spell that with itemgetter but i generally don't
[01:53:23] <Swayze> wrt an interview question
[01:53:26] *** Quits: c4017w_ (~c4017@209.52.68.8) (Quit: Leaving)
[01:53:35] <Swayze> is that too much for a junior
[01:53:39] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[01:53:42] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[01:53:46] <grym> Swayze: got me, i don't know what like a third of those words mean
[01:53:52] <Swayze> lol
[01:53:57] <RubbishPubTomato> I'm reading "Introducing Python" and am having a problem with one of the examples. https://bpa.st/7YMA It's the first time I've seen Named Tuples. Can someone explain to me what line 2 (Duck = namedtuple('Duck', 'bill tail') is doing in the simplest terms?
[01:53:59] *** Quits: revilaika (~me@109.8.144.151) (Quit: Konversation terminated!)
[01:54:15] <Swayze> variable scoping .. LEGB (local scope >enclosing scope > global scope > builtins)
[01:54:22] <grym> RubbishPubTomato: it's making a tuple, but you can call its 0th element bill and its 1st element tail, if you like
[01:54:25] *** Joins: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0009.res6.spectrum.com)
[01:54:32] <TuckerBrandy1997> @grym thanks it's working
[01:54:33] <grym> RubbishPubTomato: (there are better ways to make structs than this!)
[01:54:38] <Swayze> its the heriarchy wrt how /where classses methods or variables are searched
[01:54:44] <bjs> RubbishPubTomato: it's making a new tuple-like class. Are you familiar with classes?
[01:55:05] <Swayze> https://www.educative.io/edpresso/the-legb-rule-in-python
[01:55:11] <RubbishPubTomato> grym: That's what I thought. It's a little confusing to me. Would the better way be with Dataclasses? Cause that's what's next.
[01:55:29] <OCode> who da hell names a class tuple
[01:55:30] <grym> RubbishPubTomato: yes, that would be often extremely preferable
[01:55:34] <bjs> RubbishPubTomato: probably
[01:55:34] <RubbishPubTomato> bjs: This is just at the end of the chapter on Classes, so familiar = yes, experienced = no.
[01:55:38] <OCode> meeh neevr mind i just defined something as mook
[01:55:41] <aphysically> SnoopJ: have you been following the ML discussion of that PEP?
[01:55:52] <RubbishPubTomato> thanks grym and bjs
[01:56:24] <bjs> Swayze: I'd expect someone to know how Python scoping works roughly pretty quickly.  I've never heard "LEGB" before
[01:56:40] <SnoopJ> aphysically, the last time I read anything about it on the mailing list was roughly when the deferral happened.
[01:56:42] <Swayze> i just camea cross it myself
[01:56:46] <Swayze> turns out its a thing
[01:56:54] <aphysically> which deferral?
[01:56:55] <grym> someone sure thinks so
[01:56:56] <aphysically> :P
[01:56:57] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[01:57:13] <bjs> Swayze: well, just because someone wrote those letters together on a webpage doesn't make it a thing
[01:57:14] <SnoopJ> aphysically, the one that followed https://github.com/samuelcolvin/pydantic/issues/2678
[01:57:15] <Swayze> how about name some builtin constant (all 5 for bonus points) would that be a junior question
[01:57:25] <ThePhilgrim> SnoopJ: I'm getting some mypy errors that I don't understand, would i be ok if I link my code and the mypy errors?
[01:57:25] <Swayze> bjs: theres tons of web pages about it
[01:57:28] <SnoopJ> (I am almost certainly out of date)
[01:57:29] <bjs> Swayze: well I mean the locals -> nonlocals -> globals -> builtins order of lexical lookup is a thing
[01:57:31] <SnoopJ> ThePhilgrim, yes, absolutely
[01:57:36] <ThePhilgrim> Thanks alot!
[01:57:43] <bjs> Swayze: well lots of people can copy others, for what it's worth,  Python doesn't know about the term either https://docs.python.org/3/search.html?q=legb&check_keywords=yes&area=default
[01:57:44] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[01:57:45] <SnoopJ> Swayze, ideally don't have questions that are "trivia" at all
[01:57:54] <Swayze> ok bjs fair enough and good feedback
[01:57:56] <SnoopJ> Ask questions that get the person to show you the skills you want in an applicant.
[01:58:01] <Swayze> ok
[01:58:08] <Swayze> but juniors dont have great skills
[01:58:14] <aphysically> SnoopJ: ah, it has since been deferred again (until post 3.11)
[01:58:15] *** Joins: emf_ (~emf@2620:10d:c091:480::1:9cd9)
[01:58:18] <Swayze> i feel like i could be writing off candidates unfairly
[01:58:30] <SnoopJ> Swayze, if you assume all juniors don't have great skills, you are.
[01:58:33] <Swayze> lets rather take a step back adn ask how to spot good junior candidates
[01:58:38] <gry> so you want them to have good learning skills. check whether they are capable of learning something in 3-4 mins
[01:58:42] <Swayze> i dont, im trying to streamline the process of fidning them
[01:58:43] <SnoopJ> +1
[01:58:46] <Swayze> in africa its hard
[01:58:53] <Swayze> ok gry good one
[01:58:53] *** Quits: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0009.res6.spectrum.com) (Ping timeout: 252 seconds)
[01:58:58] <Swayze> well played and ty
[01:59:08] <gry> what will they do? puppy eyes ask you? read a doc? google it? or know it
[01:59:12] <SnoopJ> aphysically, ah, I'd missed that
[01:59:21] <Swayze> well if we teating their ability to learn it must be something they dont know
[01:59:29] <gry> and once learned, are they ok with applying a new concept to the next task. or do they forget
[01:59:30] <Swayze> but if they junior it shouldnt be hard from a list of 3 things
[01:59:38] <Swayze> if they know all the 3 things already then they med levle :p
[01:59:41] <SnoopJ> Swayze, it's easy to construct a question whose answer *can't* be known because it's about some hypothetical code.
[01:59:42] <gry> yes
[01:59:52] <Swayze> yeah SnoopJ thanks for tips on how to do that
[01:59:54] <SnoopJ> "Let's talk about how you'd start on this problem...."
[02:00:04] <ThePhilgrim> https://dpaste.com/22BETU5HH Here it is SnoopJ :)
[02:00:11] <ThePhilgrim> It's run with --strict
[02:00:16] <Swayze> awesome feedbacks
[02:00:23] <OCode> the question i have is, how can some one not be able to learn something in 3-4 minutes, or the basics atleast, i mean we have google!
[02:00:28] *** Joins: visl (visl@user/visl)
[02:00:32] <Swayze> this insight is not a part of me and will be spreading the knowledge :p
[02:00:36] <Swayze> now****
[02:00:38] <aphysically> the ML thread got pretty derailed; there was a few competing PEPs, and the SC posted essentially saying they couldn't in good conscience choose for 3.11 because, in part, they don't have enough feedback from the typing and affected communities at large and asked for a delegate to assist in the matter
[02:00:42] <aphysically> re SnoopJ
[02:01:18] <Swayze> btw gry as a side note i used the nick gry on irc back in 1994 because graymalkin couldnt fit
[02:01:25] <gry> nice
[02:01:29] <gry> i came to irc in 2009
[02:01:44] <gry> in 1994 i was less than five years old, i didnt write
[02:01:48] <Swayze> whats your gry mean? mine was an abbreviation for graymalkin ... repeating myself :p
[02:01:53] <erry_> yo gry
[02:01:56] <Swayze> yo
[02:01:56] *** erry_ is now known as erry
[02:02:00] <gry> gry is short for gryllida, an insect nick
[02:02:02] <gry> hi erry
[02:02:06] <erry> long time
[02:02:17] <Swayze> ok awesome i also use 'gryster' when im trying to be playful/cute
[02:02:21] <Yhg1s> aphysically: that's not correct, no.
[02:02:22] <gry> :)
[02:02:27] *** Joins: ionface (~ionface@user/ionface)
[02:02:48] <Yhg1s> It's not been deferred until after 3.11. We haven't made a decision yet, but _right now_ our decision would be to defer it until after 3.11. We don't have to make the decision for a little while yet.
[02:03:08] <Swayze> 3.11 am?
[02:03:10] <Swayze> or pm
[02:03:11] <Swayze> :)
[02:03:20] <SnoopJ> Swayze, Python version 3.11
[02:03:22] <Swayze> #dadjokes my bad
[02:03:27] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[02:03:36] <Yhg1s> I think you mean 'for workgroups or not'
[02:03:51] <aphysically> Yhg1s: ah I see, I missed that subtlety in the announcement
[02:04:11] *** Joins: grooverman_ (~grooverma@177.102.117.95)
[02:04:17] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[02:04:22] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 260 seconds)
[02:04:27] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[02:04:33] <Yhg1s> aphysically: the second sentence in the first paragraph is "We haven't made a decision yet" :)
[02:04:41] <SnoopJ> Yhg1s, I'm not sure how many d4s of psychic damage I should roll, but very nice :)
[02:04:48] *** Joins: Haxxa (~Haxxa@202-130-211-204.ip4.superloop.com)
[02:04:56] <aphysically> I think my understanding was this was referring to which direction to take and not which version the decision was about
[02:05:10] <SnoopJ> aphysically, I vaguely recall hearing about a delegate, but I'm relieved to hear it's not been postponed again *yet* because I was thinking I'd missed something fairly big there :P
[02:05:13] <aphysically> but clearly I was wrong
[02:05:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[02:05:45] <Yhg1s> We _are_ looking for someone to step in and figure out the problem space (which you could call a delegate), if anyone is interested :P
[02:06:55] <Swayze> delegate is some top management techniques fr tho
[02:07:01] <Swayze> KPA type stuff
[02:07:08] <Swayze> "key problem area"
[02:07:37] <Yhg1s> We've had PEP delegates for many, many years. They used to be called BDFL delegates.
[02:07:40] *** Joins: fikran (~fikran@user/fikran)
[02:07:53] *** Quits: grooverman (~grooverma@177.102.117.95) (Ping timeout: 256 seconds)
[02:08:04] <Swayze> well PEP certainly would save hours in any meeting over BDFL
[02:08:09] <Swayze> thats like 10x by my calculation
[02:08:18] <ThePhilgrim> Did you get a chance to look at the mypy errors? :)
[02:08:33] <SnoopJ> ThePhilgrim, having a look now
[02:08:34] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 260 seconds)
[02:08:37] <ThePhilgrim> :D
[02:08:39] <aphysically> ThePhilgrim: sorry I must have missed it, do you have a playground link?
[02:08:48] <aphysically> oh wait I found it
[02:08:51] <ThePhilgrim> https://dpaste.com/22BETU5HH
[02:08:52] <ThePhilgrim> :)
[02:08:59] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:09:13] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-35ba-b7a0-d966-f0ce.res6.spectrum.com)
[02:10:31] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 250 seconds)
[02:10:47] <SnoopJ> ThePhilgrim, I think mypy sees `self.nick = None` and infers that this value is always None. You might want `self.nick: Optional[str] = None` there, and similarly for user_name
[02:11:03] <SnoopJ> where Optional is typing.Optional
[02:11:14] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[02:11:17] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 256 seconds)
[02:11:58] <ThePhilgrim> Ahh, since I set it to None in the init
[02:12:04] <ThePhilgrim> Makes sense, I didn't realize
[02:12:06] *** Joins: sudomann (~sudomann@98.219.211.182)
[02:12:07] *** Joins: cap0ne (cap0ne@user/cap0ne)
[02:12:15] *** Quits: guardian (~guardian@planet-d.net) (Ping timeout: 250 seconds)
[02:12:28] <SnoopJ> the errors are all saying "I expected not-None, but I see None!" in various ways, so I went looking for the variables that were None but expected to be not-None there and worked backwards :)
[02:12:29] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[02:12:30] <aphysically> concur
[02:13:25] <ThePhilgrim> Yeah, I'm quite new to programming, so I am still not great at debugging.. or googling for that matter xD
[02:15:57] <SnoopJ> one of the members of the local Python user group says that we're all beginners, some of us have just been beginners for longer
[02:16:11] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[02:16:29] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[02:16:51] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 252 seconds)
[02:16:53] *** Joins: draeath (~draeath@user/draeath)
[02:17:20] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:17:53] *** Joins: sudomann (~sudomann@98.219.211.182)
[02:18:07] *** Quits: draeath (~draeath@user/draeath) (Client Quit)
[02:18:08] <ThePhilgrim> SnoopJ: I likethat a lot. It reflects my life philosophy! Always keeping a "beginner's mind". Japanese zen philosophy https://en.wikipedia.org/wiki/Shoshin
[02:18:12] <ThePhilgrim> Shoshin
[02:18:22] <SnoopJ> aphysically, I don't think I'd seen this new thread of discussion at all, actually. Thanks for bringing it to my attention
[02:18:26] <ThePhilgrim> "Shoshin (初心) is a word from Zen Buddhism meaning "beginner's mind." It refers to having an attitude of openness, eagerness, and lack of preconceptions when studying a subject, even when studying at an advanced level, just as a beginner would."
[02:18:39] <aphysically> np
[02:19:23] <SnoopJ> ThePhilgrim, that mindset is a very useful one in programming, because even if you can master it all (dubious, at best!), there's always new stuff anyway :)
[02:19:55] <ThePhilgrim> That is very true! I have to say, it's very useful for most things
[02:20:17] <ThePhilgrim> They say "In the beginner's mind there are many opportunities, in the expert's mind, there are few."
[02:22:37] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[02:23:40] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:23:49] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:23:52] *** Joins: humbertowoody (~humbertow@187.202.244.149)
[02:24:45] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[02:26:29] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:26:36] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Ping timeout: 245 seconds)
[02:27:09] *** Quits: humberto1 (~humbertow@187.202.244.149) (Ping timeout: 256 seconds)
[02:27:10] *** Joins: ArtfulDodger (~ArtfulDod@81.126.81.79.rev.sfr.net)
[02:27:18] *** Joins: c4017w (~c4017@209.52.68.8)
[02:27:24] *** Quits: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint) (Quit: Leaving)
[02:28:07] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl488tdzsunjald63.ipv6.telus.net) (Quit: Leaving)
[02:28:35] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[02:28:55] <ArtfulDodger> Hey guys, how is mypy different to the latest type annotation features from "typing"? I have the feeling that they are very similar
[02:29:32] <Yhg1s> ArtfulDodger: they are almost entirely different, because mypy is the tool to check type annotations, and the typing module is used in type annotations.
[02:30:35] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:30:40] <ArtfulDodger> aaaaah ok =)
[02:31:04] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:31:41] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[02:32:13] *** Joins: luigibu (~luigi@80.30.201.209)
[02:33:16] *** Quits: monkey_ (~user@181.114.17.106) (Read error: Connection reset by peer)
[02:33:36] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[02:34:20] *** Joins: sudomann (~sudomann@98.219.211.182)
[02:34:55] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Quit: Leaving)
[02:35:33] *** Quits: y04nn (~y04nn@92.223.89.196) (Ping timeout: 252 seconds)
[02:35:42] *** Quits: ub (~Thunderbi@p200300ecdf1abbee153a2c4097e8e97e.dip0.t-ipconnect.de) (Quit: ub)
[02:36:15] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[02:38:53] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 250 seconds)
[02:40:21] *** Joins: paprika (~pepper@user/pepper)
[02:41:47] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 252 seconds)
[02:42:01] <ArtfulDodger> Yhg1s, the mypy doc mentions examples of "mypy with dynamic typing. Is it actually able to check dynamic typing?
[02:42:16] <ArtfulDodger> I ca't find an example where it complains abiyt the dynamic typing
[02:42:31] *** Joins: luva1 (~luva@146.70.62.237)
[02:43:47] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[02:44:16] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[02:44:27] <ThePhilgrim> If anybody has experience with github actions & mypy, is there anything wrong here? For some reason it says there is no module named mypy https://dpaste.com/7PB7NX6RB https://imgur.com/a/fjwLYyG
[02:44:28] *** Joins: sudomann (~sudomann@98.219.211.182)
[02:45:27] *** Quits: luva (~luva@45.141.152.52) (Ping timeout: 252 seconds)
[02:45:37] <Yhg1s> ArtfulDodger: I'm not sure what you mean, sorry
[02:45:42] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:45:49] <Yhg1s> Python is dynamically typed. mypy checks them statically.
[02:46:07] *** Joins: luva13 (~luva@146.70.62.254)
[02:47:03] <ArtfulDodger> Yhg1s, so do we agree that it does not make sense to use mypy if the script is not statically typed? (i.e. it has not type annotations)
[02:47:56] <Yhg1s> ArtfulDodger: that's not what that means. mypy pretty much relies on type annotations, yes. if you want something that can handle untyped code better, there's pytype.
[02:48:01] *** Quits: luva1 (~luva@146.70.62.237) (Ping timeout: 252 seconds)
[02:48:01] *** luva13 is now known as luva1
[02:49:00] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:49:29] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 252 seconds)
[02:49:56] *** Joins: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8)
[02:50:32] <ArtfulDodger> Yhg1s, in that case why do they give examples of "Mypy with dynamic typing" if it needs annotations to work? cf http://mypy-lang.org/examples.html
[02:51:41] <Yhg1s> ArtfulDodger: I don't know why they do that.
[02:53:58] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:54:18] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:5e02:45ca:1780:3df6) (Ping timeout: 260 seconds)
[02:54:50] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[02:55:52] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[02:55:53] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[02:55:59] <ArtfulDodger> Yhg1s, thanks. Also, I have the feeling that Flake8, Pylint, and Pychecker are more or less equivalent in terms of features (they check the syntax + the semantic). Am I right?
[02:56:39] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 250 seconds)
[02:57:24] <Yhg1s> ArtfulDodger: no. mypy (and pytype, and other type checkers) do a lot more checking than things like flake8 and pylint.
[02:57:33] *** Joins: wingsorc__ (~wingsorc@user/wingsorc)
[02:58:07] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Read error: Connection reset by peer)
[02:58:09] *** paprika is now known as pepper
[03:00:15] <ArtfulDodger> Yhg1s, sorry I meant these 3 flake8 pylint and pychecker are equivalent all together (but I have understood that mypy and pytype deal with types, which is not the case of the first 3)
[03:00:27] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[03:00:49] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[03:02:41] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[03:03:02] *** Joins: Terexen (~terexen@user/terexen)
[03:04:50] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:06:09] *** Joins: parv (~quass@user/parv)
[03:06:32] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:07:32] *** Quits: luva1 (~luva@146.70.62.254) (Ping timeout: 240 seconds)
[03:07:43] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[03:08:02] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:08:15] *** Quits: faLUKE (~paolo@host-79-37-180-53.retail.telecomitalia.it) (Quit: Konversation terminated!)
[03:08:15] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[03:11:21] *** Quits: junebug (~junebug@2600:1700:3db0:2540:1742:fab7:61dd:4a6) (Quit: Leaving)
[03:12:43] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: later i.a.)
[03:13:01] *** Joins: luva1 (~luva@146.70.62.253)
[03:13:28] *** Quits: TuckerBrandy1997 (~TuckerBra@209.87.29.242) (Ping timeout: 268 seconds)
[03:14:00] *** Joins: ThC27 (ThC27@gateway/vpn/protonvpn/thc27)
[03:14:15] *** ThC27 is now known as KvL
[03:16:18] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[03:16:24] *** Parts: KvL (ThC27@gateway/vpn/protonvpn/thc27) ()
[03:20:03] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[03:20:53] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:21:34] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:21:35] *** Joins: qlixed (~qlixed@181.44.129.13)
[03:22:11] *** Quits: qlixed (~qlixed@181.44.129.13) (Client Quit)
[03:24:34] *** Joins: KvL (~KvL@130.95.254.70)
[03:26:21] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 250 seconds)
[03:26:56] *** Joins: guardian (~guardian@planet-d.net)
[03:28:21] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 256 seconds)
[03:28:42] *** Quits: cellofellow (~user@166.70.30.252) (Remote host closed the connection)
[03:29:00] *** Joins: AsenMx (~AsenMx@user/asenmx)
[03:30:51] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[03:31:21] *** Joins: KvL_ (KvL@gateway/vpn/protonvpn/kvl)
[03:32:07] *** Quits: gelignite (~gelignite@55d41c14.access.ecotel.net) (Quit: Stay safe!)
[03:32:21] *** Quits: KvL (~KvL@130.95.254.70) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[03:32:21] *** KvL_ is now known as KvL
[03:33:21] *** Joins: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net)
[03:34:30] *** Quits: stonkey (~stonkey@user/stonkey) (Quit: Leaving)
[03:34:31] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[03:34:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:36:34] *** Quits: emf_ (~emf@2620:10d:c091:480::1:9cd9) (Read error: Connection reset by peer)
[03:36:45] *** Joins: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0009.res6.spectrum.com)
[03:37:24] *** Joins: tomba4032 (~tomba4032@2a02:c7f:7c99:8600:ab87:e09:e136:4e34)
[03:39:04] *** Quits: ianliu (~ianliu@177.103.45.247) (Quit: WeeChat 3.3)
[03:39:27] *** Joins: jazzy (~jaziz@user/jaziz)
[03:44:29] *** Quits: inomoz (~inomoz@85.26.235.152) (Ping timeout: 252 seconds)
[03:44:51] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 252 seconds)
[03:46:03] *** Joins: sudomann (~sudomann@98.219.211.182)
[03:46:22] *** Quits: LimeOn (~user@user/limeon) (Quit: .)
[03:46:53] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Quit: KvL)
[03:46:58] *** Quits: davor (~davor@user/davor) (Ping timeout: 265 seconds)
[03:47:10] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[03:47:23] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[03:48:45] *** Joins: Wulf (~Wulf@user/wulf)
[03:50:21] *** Quits: grimvar (~grimvar@i5C75F768.versanet.de) (Ping timeout: 265 seconds)
[03:50:26] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[03:50:43] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 252 seconds)
[03:51:04] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:51:16] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[03:51:49] *** Joins: sudomann (~sudomann@98.219.211.182)
[03:52:03] *** Joins: grimvar (~grimvar@i5C75F64D.versanet.de)
[03:52:08] *** Joins: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint)
[03:52:15] <HolyTaint> Hello
[03:52:19] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Quit: Leaving)
[03:52:27] <tomba4032> hey HolyTaint
[03:52:31] <tomba4032> nice name :P
[03:52:40] <HolyTaint> thank you tomba4032
[03:52:41] *** Joins: cyrus_mc (~cyrus_mc@c-98-232-162-73.hsd1.or.comcast.net)
[03:52:47] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[03:52:59] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[03:53:42] <HolyTaint> I'm trying to change a function's `__code__` attribute by inserting another function's __code__, however there's a co_freevars mismatch
[03:53:50] <HolyTaint> how could I solve?
[03:54:22] *** Joins: xa0s (~xa0s@mab.sdf.org)
[03:54:31] <Yhg1s> HolyTaint: well, by not doing that then. What are you actually trying to achieve? Why are you messing with function objects directly?
[03:56:11] <HolyTaint> Yhg1s, I'm trying to grab a function code from a function-in-function from a lib integrated in cpython implementation
[03:56:26] *** Quits: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0009.res6.spectrum.com) (Quit: emf)
[03:56:41] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[03:57:29] *** Joins: inomoz (~inomoz@85.26.164.235)
[03:57:34] *** Joins: sudomann (~sudomann@98.219.211.182)
[03:57:55] <Yhg1s> HolyTaint: 'grab' a function's code to do what?
[03:58:48] *** Parts: tomba4032 (~tomba4032@2a02:c7f:7c99:8600:ab87:e09:e136:4e34) (Leaving)
[03:59:17] <HolyTaint> Yhg1s, custom JSON encoder; please don't go further in the "what are you trying to do" you know the rules and so do I
[03:59:54] *** Quits: cap0ne (cap0ne@user/cap0ne) (Quit: Konversation terminated!)
[04:00:13] <Yhg1s> HolyTaint: it's not about rules. You asked how you could do a thing. I'm asking _what the thing is you want to do_.
[04:01:09] <Yhg1s> Because 'how do I avoid the error I'm getting' is not a question I can answer. If co_freevars is mismatched, there's not much you can do about that.
[04:01:22] <HolyTaint> Yhg1s, the thing I want to do is this, custom JSON encoder that gives precedence to my custom attribute without rewriting all the lib's code in my code
[04:01:23] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[04:02:06] <Yhg1s> HolyTaint: I have no idea how to go from that vague description to trying to replace a function's __code__, sorry. Perhaps you're looking to monkeypatch functions instead?
[04:02:26] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 260 seconds)
[04:02:32] <HolyTaint> Yhg1s, what does "monkeypatch" mean exactly?
[04:02:45] <Yhg1s> HolyTaint: it means 'thelibrary.somefunction = myfunction'
[04:03:17] <HolyTaint> Yhg1s, yes, that's what I'm trying to do, but afaik it's not possible with function-in-function
[04:03:19] *** Joins: sudomann (~sudomann@98.219.211.182)
[04:04:17] <Yhg1s> HolyTaint: sure, you can't replace a function that doesn't exist until you call another function. Modifying __code__ won't change that, really. You would have to replace the outer function, I guess, or wrap the nested function, depending on what those actually do.
[04:04:34] *** Joins: davor (~davor@user/davor)
[04:05:30] <HolyTaint> Yhg1s, I could wrap the nested functions? really and how?
[04:06:41] <Yhg1s> HolyTaint: it depends on what the functions actually do. If, for example, the original function returns the nested function, you can write a wrapper that calls the original function, then defines a nested function of its own that calls the original function (or not, depending on what it wants to do)
[04:07:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[04:07:57] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 252 seconds)
[04:09:05] *** Joins: sudomann (~sudomann@98.219.211.182)
[04:09:53] *** Joins: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0009.res6.spectrum.com)
[04:11:04] *** Joins: emacs_pprentice_ (~wingsorc@user/wingsorc)
[04:11:12] <HolyTaint> Yhg1s I have to thank you. You highlighted a way of solving my issue I was oblivious at before
[04:13:18] *** Quits: emacs_pprentice_ (~wingsorc@user/wingsorc) (Client Quit)
[04:13:32] <lantech19446> I don't know if this might interest anyone here, I'm thinking about it for me just happened to see it scrolling on facebook
[04:13:32] *** Quits: wingsorc__ (~wingsorc@user/wingsorc) (Ping timeout: 240 seconds)
[04:13:34] <lantech19446> https://shop.pcworld.com/sales/the-premium-python-programming-certification-bundle?utm_medium=Facebook_Ads&utm_source=facebook&utm_content=Broad2&fbclid=IwAR0TtFyrpYY_gjNoQgD4ReaaTD3o34bsvT6MtdamgSUdIIb3Cs9_KVnkjaQ
[04:13:46] *** Joins: emf_ (~emf@2620:10d:c091:480::1:305b)
[04:14:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[04:15:08] *** Quits: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0009.res6.spectrum.com) (Ping timeout: 268 seconds)
[04:16:43] <aphysically> jinsun: okay this behavior is obviously buggy, no? https://bpa.st/44TQ
[04:17:00] *** Joins: fikran (~fikran@user/fikran)
[04:18:12] *** Quits: ArtfulDodger (~ArtfulDod@81.126.81.79.rev.sfr.net) (Quit: Leaving)
[04:18:57] *** Quits: guenhael (~Thunderbi@2a01cb008c3d58006048a9fb4db0b5f5.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[04:19:13] *** Quits: megaTherion (~therion@unix.io) (Quit: ZNC 1.8.2 - https://znc.in)
[04:21:20] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:dc86:49af:dce7:de68)
[04:22:02] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[04:22:10] *** Joins: Naan (~naan@user/naan)
[04:23:16] *** Quits: onichomp (~onichomp@2806:264:4404:8162:a807:857b:6d3:3c16) (Read error: Connection reset by peer)
[04:23:36] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[04:24:11] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[04:24:50] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Ping timeout: 260 seconds)
[04:26:35] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 250 seconds)
[04:28:19] *** Joins: naranja (~orange@user/orangeboxcutter)
[04:28:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:29:39] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[04:29:48] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[04:30:24] *** Joins: Pixi (~Pixi@user/pixi)
[04:30:54] *** Joins: zalt (~zalt@user/zalt)
[04:31:11] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:31:27] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:31:56] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:35:11] *** Quits: cyrus_mc (~cyrus_mc@c-98-232-162-73.hsd1.or.comcast.net) (Quit: Connection closed)
[04:35:37] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:dc86:49af:dce7:de68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:36:30] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[04:41:36] *** Joins: onichomp (~onichomp@2806:264:4404:8162:c80f:cb32:a5a8:f573)
[04:42:54] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[04:43:09] *** Quits: neachdainn (~nate@user/neachdainn) (Ping timeout: 256 seconds)
[04:43:45] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[04:44:23] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:44:24] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[04:47:03] *** Joins: constxd (~brad@142.134.38.68)
[04:52:10] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[04:52:40] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:dc86:49af:dce7:de68)
[04:54:15] *** Quits: adeliktas (~adeliktas@2001:16b8:22fb:2900:ff0b:f7a9:2da3:70c4) (Quit: Client closed)
[04:54:39] *** Joins: adeliktas (~adeliktas@2001:16b8:22fb:2900:ff0b:f7a9:2da3:70c4)
[04:55:34] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:56:02] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[04:57:12] <aphysically> jinsun: https://github.com/microsoft/pyright/issues/2706
[04:58:13] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[04:58:39] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[04:59:09] *** Quits: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint) (Quit: Leaving)
[05:03:56] *** Quits: Abrax (~Abrax@user/abrax) (Quit: Leaving)
[05:05:56] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Quit: Client closed)
[05:06:09] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[05:06:37] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 252 seconds)
[05:08:47] *** Joins: sudomann (~sudomann@98.219.211.182)
[05:08:59] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Quit: IRC Bouncer crashed ...)
[05:09:31] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-35ba-b7a0-d966-f0ce.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[05:09:55] *** Joins: Abrax (~Abrax@user/abrax)
[05:10:39] *** Quits: inomoz (~inomoz@85.26.164.235) (Ping timeout: 252 seconds)
[05:11:53] *** Joins: wlemuel (~user@210.22.124.110)
[05:15:53] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[05:17:37] *** Quits: dangpzanco (~dangpzanc@2804:14d:baa1:a12d:7c5a:931c:6657:1fc0) (Ping timeout: 256 seconds)
[05:18:41] <JordiGH> So can I do websockets with Django or what
[05:19:51] *** Quits: nomic (~nomic@85.203.46.65) (Quit: Leaving)
[05:20:12] *** Joins: nomic (~nomic@85.203.46.65)
[05:21:22] <JordiGH> I can't use gunicorn for websockets?
[05:24:04] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:24:31] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[05:24:39] *** Joins: inomoz (~inomoz@83.149.21.102)
[05:25:11] *** Joins: sudomann (~sudomann@98.219.211.182)
[05:25:42] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Quit: Leaving)
[05:28:28] *** Quits: Forsaken87 (~quassel@2a02:908:1867:7d40:93ab:b917:6d2c:4af1) (Ping timeout: 265 seconds)
[05:29:14] *** Joins: blei (~monster_e@209.201.38.106)
[05:29:32] <blei> i am looking for a (modern) telnet server library
[05:30:10] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 260 seconds)
[05:30:55] *** Joins: sudomann (~sudomann@98.219.211.182)
[05:31:06] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 260 seconds)
[05:31:07] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:31:32] *** Quits: flokuehn (~flokuehn@87.123.247.75) (Ping timeout: 240 seconds)
[05:32:57] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[05:33:03] *** Joins: zalt (~zalt@user/zalt)
[05:33:38] *** Joins: flokuehn (~flokuehn@87.123.247.56)
[05:34:07] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:9563:3661:427a:9acd) (Quit: smeeagle)
[05:35:01] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:35:51] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[05:36:17] <NeilRG> Why does mypy complain here: Argument 1 to "partition_n" has incompatible type "Callable[[str, str, ndarray[Any, dtype[Any]]], int]"; expected "Callable[[str, str, ndarray], int]"?
[05:36:33] <NeilRG> surely ndarray[Any, dtype[Any]] is compatible with ndarray?
[05:36:41] *** Joins: sudomann (~sudomann@98.219.211.182)
[05:37:38] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 260 seconds)
[05:38:24] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[05:39:48] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48a5w5k0dxz5ppu.ipv6.telus.net)
[05:40:24] *** Quits: blei (~monster_e@209.201.38.106) (Quit: Client closed)
[05:41:19] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 250 seconds)
[05:42:00] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (Quit: ZNC - https://znc.in)
[05:42:22] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[05:42:26] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[05:42:27] *** Joins: sudomann (~sudomann@98.219.211.182)
[05:43:35] *** Joins: d00gy (~d00gy@user/d00gy)
[05:44:10] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-243a-73f6-37f2-3aa4.res6.spectrum.com)
[05:44:24] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[05:45:46] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[05:46:36] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48a5w5k0dxz5ppu.ipv6.telus.net) (Quit: Leaving)
[05:48:35] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[05:48:44] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[05:49:29] *** Quits: d00gy (~d00gy@user/d00gy) (Read error: Connection reset by peer)
[05:49:49] <grym> JordiGH: uvicorn[standard]
[05:50:38] <JordiGH> We talking extras again?
[05:50:52] <grym> it's a real hard life, bud
[05:51:06] <JordiGH> It's okay, I lied: I read the link.
[05:51:06] *** Quits: pepper (~pepper@user/pepper) (Remote host closed the connection)
[05:51:09] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[05:51:09] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Quit: The Lounge - https://thelounge.chat)
[05:51:23] <grym> https://www.uvicorn.org/#quickstart
[05:51:25] *** Joins: pepper (~pepper@user/pepper)
[05:51:40] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[05:52:50] *** Joins: Guest64873 (~bot@172-220-180-248.res.spectrum.com)
[05:52:53] *** Parts: Guest64873 (~bot@172-220-180-248.res.spectrum.com) ()
[05:53:07] <JordiGH> Thanks.
[05:53:29] <grym> np
[05:53:31] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[05:54:33] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[05:55:46] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:56:29] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-243a-73f6-37f2-3aa4.res6.spectrum.com) (Remote host closed the connection)
[05:57:39] <JordiGH> So the question is, if I want a progress bar when my web user clicks a button, do I install uvicorn and create an app and rewrite this and change the deploy script and update my gunicorn systemd unit...
[05:58:13] <JordiGH> Or do we just forget the whole thing make the js periodically send plain ol' http requests asking my server how's it coming along with those calculations.
[05:59:02] *** Joins: junebug (~junebug@2600:1700:3db0:2540:96f9:e302:cde6:c8b)
[05:59:30] <grym> /poll/uuid4 | jq -r .percent-done
[06:00:42] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[06:01:25] <JordiGH> Ah, the Solomonian solution. Like putting mirrors in the lobby with the lifts.
[06:01:57] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[06:02:32] <stewie925> hey guys, what does `set(list) - {0} `
[06:02:40] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[06:02:40] <stewie925> what does it do?
[06:03:02] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[06:03:05] *** Quits: Balzy (~Balzy@host-79-17-138-160.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[06:03:13] <JordiGH> If list is the default thing, that should error out.
[06:03:41] <JordiGH> But if you previously did list = [0, 0, 1], you're going to get the set {1}
[06:03:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:04:11] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 252 seconds)
[06:04:47] *** Joins: ubert1 (~Thunderbi@p200300ecdf1abb0650b4610a52e3eab2.dip0.t-ipconnect.de)
[06:05:02] *** Quits: ubert (~Thunderbi@p200300ecdf1abbee60b6487a781d8af1.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:05:02] *** ubert1 is now known as ubert
[06:05:23] *** Joins: nomic2 (~nomic@85.203.46.65)
[06:05:44] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:05:50] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:07:08] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:07:20] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:07:38] *** Joins: Balzy (~Balzy@host-87-14-134-154.retail.telecomitalia.it)
[06:07:51] *** Quits: nomic (~nomic@85.203.46.65) (Ping timeout: 252 seconds)
[06:07:53] *** Joins: zalt (~zalt@user/zalt)
[06:07:59] *** Quits: fflam_ (~mdt@ip72-220-60-77.sd.sd.cox.net) (Ping timeout: 268 seconds)
[06:08:23] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[06:08:50] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:08:51] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:08:52] <SamuelMarks> hi
[06:09:01] <SamuelMarks> Is there some way of rewriting an `ast.AnnAssign` to `ast.Assign` without losing type information? - https://bugs.python.org/issue46078
[06:09:43] *** nomic2 is now known as nomic
[06:10:13] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 240 seconds)
[06:10:17] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[06:10:56] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:11:02] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 240 seconds)
[06:11:15] *** brabrax_ is now known as brabrax
[06:11:58] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[06:12:27] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 265 seconds)
[06:13:51] <cluelessperson> how can I cause for __file__ to be resolved in the location of its calling?
[06:15:43] <SamuelMarks> cluelessperson: os.path.abspath?
[06:16:31] <SamuelMarks> cluelessperson - Or if you want to know about the function location or whatever https://docs.python.org/3/library/inspect.html#inspect.getfile
[06:16:47] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[06:16:54] <grym> cluelessperson: i don't know what that means
[06:17:47] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[06:17:59] <cluelessperson> grym, I want a function that can get a relative test file to the module that calls.   get_example(1)
[06:18:14] <grym> cluelessperson: i don't know what that means, either
[06:18:35] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 250 seconds)
[06:18:53] <cluelessperson> I have a module to help me with utilities.
[06:19:00] <cluelessperson> one of them is.    get_example(
[06:19:16] <cluelessperson> I want to return __file__,  resovled from the file that CALLS it
[06:19:21] *** Quits: luva1 (~luva@146.70.62.253) (Remote host closed the connection)
[06:19:32] <cluelessperson> not from the file that contains the function
[06:19:34] <cluelessperson> utility.get_example()
[06:19:41] <yitz> cluelessperson: os.argv[0]?
[06:19:48] <cluelessperson> no.
[06:20:00] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Read error: Connection reset by peer)
[06:21:31] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[06:23:24] <SamuelMarks> cluelessperson os.path.dirname
[06:23:35] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[06:23:41] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[06:24:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[06:24:13] <cluelessperson> SamuelMarks,  I feel like you're not reading.
[06:24:17] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[06:24:18] <cluelessperson> what do you think  __file__ does?
[06:24:38] <cluelessperson> it resolves to the file that contains it.
[06:25:16] <cluelessperson> so if __file__ is in utilities.py,   and from test.py I call:  utilities.function()  that uses __file__,    it resolves from the location of utilities.py
[06:25:19] <cluelessperson> not test.py
[06:25:32] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[06:26:20] *** Joins: fikran (~fikran@user/fikran)
[06:26:38] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 260 seconds)
[06:26:46] *** scoobydoob is now known as scoobydoo
[06:26:51] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[06:28:32] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 240 seconds)
[06:29:00] *** Joins: ionface (~ionface@user/ionface)
[06:30:22] *** Joins: zalt (~zalt@user/zalt)
[06:30:25] *** Joins: Jong (~Jong@2620:10d:c090:400::5:3f74)
[06:30:46] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[06:30:49] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[06:30:49] *** Joins: RiFo (~RiFo@user/rifo)
[06:31:29] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[06:33:34] *** Joins: ballgame (~ballgame@2600:100a:b0d7:81f1:a885:1952:bc5e:30e5)
[06:34:11] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 250 seconds)
[06:34:29] *** Parts: ballgame (~ballgame@2600:100a:b0d7:81f1:a885:1952:bc5e:30e5) (WeeChat 3.3)
[06:34:53] <grym> well, yes; that's where utilities.py is
[06:34:56] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:36:22] <SamuelMarks> cluelessperson - Either I and grym aren't reading, or you're not writing
[06:36:28] <SamuelMarks> (hint: it's the latter)
[06:37:26] <cluelessperson> grym, yes, I'm seeking for a method to get __file__ in the utility.py function to resolve in the test.py file
[06:37:38] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[06:37:46] <grym> cluelessperson: that sentence is nonsense though
[06:37:57] <grym> "how can i get apples to resolve to oranges"
[06:38:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[06:38:34] *** Joins: sudomann (~sudomann@98.219.211.182)
[06:38:50] *** Joins: luva1 (~luva@146.70.62.253)
[06:39:45] <themill> cluelessperson: an alternative way of asking might help, for example: how do I determine the filename of the caller of a function, not just the filename of the function?
[06:40:02] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:40:10] <cluelessperson> themill, yes, that's another way of asking what I'm asking.
[06:40:28] <themill> no, you're prescribing a solution (make __file__ do something that it doesn't)
[06:40:37] *** Quits: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8) (Quit: Leaving)
[06:40:45] <pystardust> cluelessperson: if it were to resolve where its being used, then all the __file__ will resolve main right?
[06:40:45] <yitz> cluelessperson: you can inspect the call stack
[06:40:53] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Quit: The Lounge - https://thelounge.chat)
[06:41:17] *** maplefinger is now known as Ueberhuber
[06:42:45] *** Ueberhuber is now known as maplefinger
[06:42:45] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Ping timeout: 276 seconds)
[06:43:04] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[06:43:11] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[06:43:35] *** Joins: adeliktas13 (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514)
[06:43:44] *** Joins: luva16 (~luva@45.141.152.45)
[06:43:47] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 252 seconds)
[06:45:22] <SamuelMarks> yitz - I already recommended that module but he didn't seem interested
[06:47:02] *** Quits: luva1 (~luva@146.70.62.253) (Ping timeout: 240 seconds)
[06:47:02] *** luva16 is now known as luva1
[06:47:09] *** Quits: adeliktas (~adeliktas@2001:16b8:22fb:2900:ff0b:f7a9:2da3:70c4) (Ping timeout: 256 seconds)
[06:47:09] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:3c37:87d4:4bc2:73ec) (Ping timeout: 256 seconds)
[06:47:40] <nedbat> cluelessperson: this will be the filename of your caller:   inspect.stack()[1].filename
[06:48:52] *** Quits: luva1 (~luva@45.141.152.45) (Remote host closed the connection)
[06:49:37] *** Joins: luva1 (~luva@45.141.152.45)
[06:49:58] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 260 seconds)
[06:51:14] <nedbat> cluelessperson: or this:   inspect.currentframe().f_back.f_code.co_filename
[06:54:07] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[06:54:28] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a239:503:c530:420:50bf:adf3) (Quit: Textual IRC Client: www.textualapp.com)
[06:55:25] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[06:55:32] *** Joins: jwhisnant_ (~jwhisnant@user/jwhisnant)
[06:56:02] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[06:56:24] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Remote host closed the connection)
[06:57:48] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[07:00:55] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[07:01:55] *** luva1 is now known as luva
[07:02:10] *** vinleod is now known as vdamewood
[07:03:48] *** Joins: bim9262 (~bim9262@user/bim9262)
[07:04:29] *** Quits: vakera_pingveno_ (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[07:05:19] *** Quits: llanhmod (~personnel@user/domhnall/x-2887755) (Quit: leaving)
[07:09:35] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:09:55] *** Quits: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net) (Ping timeout: 256 seconds)
[07:12:17] *** Joins: whatif (~whatif@2400:8902::f03c:92ff:fe60:98d8)
[07:13:37] <whatif> python pandas, after do 'df.style.apply()', now this df cann't be insert, AttributeError 'Styler' object has no attribute 'insert', how to turn that Styler object back to DataFrame again?
[07:14:03] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Remote host closed the connection)
[07:14:48] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 265 seconds)
[07:14:56] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[07:16:43] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 256 seconds)
[07:21:14] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Ping timeout: 260 seconds)
[07:21:57] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[07:23:31] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[07:23:31] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Ping timeout: 256 seconds)
[07:25:13] *** Quits: junktext_ (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 252 seconds)
[07:25:47] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:27:07] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Client Quit)
[07:27:20] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:28:56] *** Quits: tkazi (~tkazi@user/tkazi) (Quit: Disconnected)
[07:30:21] *** Quits: luva (~luva@45.141.152.45) (Ping timeout: 252 seconds)
[07:31:04] *** Joins: luva (~luva@45.141.152.44)
[07:32:55] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[07:33:08] *** Joins: tkazi (~tkazi@user/tkazi)
[07:33:17] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 252 seconds)
[07:33:50] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:35:09] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Client Quit)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:06] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[07:43:11] *** Quits: junebug (~junebug@2600:1700:3db0:2540:96f9:e302:cde6:c8b) (Ping timeout: 252 seconds)
[07:44:55] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[07:45:00] <SamuelMarks> whatif: #pydata I think is the channel
[07:45:12] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:48:54] *** Joins: jimklo (~jimklo@2600:6c52:6f00:ae5f:9d49:4e4d:deda:db3c)
[07:50:16] <jimklo> greetings wondering if anyone has an example on running a command with pipes with Fabric?
[07:52:35] *** Joins: zalt (~zalt@user/zalt)
[07:53:08] *** Joins: luva1 (~luva@37.120.197.45)
[07:54:34] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[07:54:41] *** Quits: luva (~luva@45.141.152.44) (Ping timeout: 256 seconds)
[07:54:41] *** luva1 is now known as luva
[07:56:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[07:57:07] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 252 seconds)
[07:58:54] *** Joins: anchovy (~anchovy@101.191.178.3)
[07:58:57] <anchovy> hey. is there a quoting method that does /not/ treat any characters as special? basically I want to avoid backslashing backslashes.
[07:59:48] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[08:00:29] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[08:01:34] <anchovy> aha. duh. r'' will do :)
[08:01:45] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[08:02:14] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:02:25] *** Quits: darkstarx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[08:02:32] *** Joins: aniketgm (~Aniket@49.36.111.159)
[08:03:53] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 250 seconds)
[08:03:57] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[08:04:52] *** Quits: MercilessDeth (~brad@136.49.59.177) (Quit: Konversation terminated!)
[08:07:17] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Quit: Leaving)
[08:07:21] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[08:07:39] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[08:07:49] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[08:08:27] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 265 seconds)
[08:08:33] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[08:08:51] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 252 seconds)
[08:08:57] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[08:08:58] *** scoobydoob is now known as scoobydoo
[08:10:07] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[08:10:34] <aphysically> jinsun: yeah it was a pyright bug (fixed now)
[08:11:03] *** Joins: MercilessDeth (~brad@136.49.59.177)
[08:13:22] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[08:13:26] *** Joins: kdc (~kdc@196.211.197.159)
[08:13:30] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 260 seconds)
[08:13:59] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[08:15:27] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[08:16:28] <jinsun> aphysically: ah nice
[08:16:50] <jinsun> really specific again
[08:17:39] <jinsun> and looks like you got your golfed code in pyright's test case too :D
[08:18:23] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 252 seconds)
[08:18:26] *** Joins: frost (~frost@user/frost)
[08:21:01] *** Quits: sreve (~quassel@p4ff446c2.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[08:21:27] *** Joins: sreve (~quassel@p4ff44d3f.dip0.t-ipconnect.de)
[08:23:02] *** Quits: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 268 seconds)
[08:23:59] *** Joins: ideopathic (~ideopathi@2600:1702:8b0:a500:e5d2:f04c:bacb:eccb)
[08:25:41] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl489uk24oas8ls1n.ipv6.telus.net)
[08:27:05] *** Quits: ravan (~ravan@user/ravan) (Read error: No route to host)
[08:30:17] *** Joins: teut (~teut@2401:4900:1c30:1de4:f19d:3f97:1aa3:ecb1)
[08:30:40] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:dc86:49af:dce7:de68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:30:51] *** Quits: visl (visl@user/visl) (Ping timeout: 252 seconds)
[08:31:21] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[08:32:27] *** Joins: Atque (~Atque@user/atque)
[08:33:04] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[08:33:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[08:34:30] *** Joins: brookesy66 (~will@14-201-84-74.static.tpgi.com.au)
[08:34:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:35:14] *** Quits: brookesy66 (~will@14-201-84-74.static.tpgi.com.au) (Client Quit)
[08:35:40] *** Joins: fikran (~fikran@user/fikran)
[08:37:50] *** Quits: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl489uk24oas8ls1n.ipv6.telus.net) (Remote host closed the connection)
[08:38:10] *** Quits: moog (~moog@107.126.53.25) (Remote host closed the connection)
[08:39:23] *** Joins: ravan (~ravan@user/ravan)
[08:40:23] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Reconnecting)
[08:40:37] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[08:42:31] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[08:42:35] *** Quits: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com) (Read error: Connection reset by peer)
[08:43:02] *** Quits: hypoon (~hypoon@pool-108-31-49-4.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[08:43:25] *** Joins: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com)
[08:46:35] *** Joins: humberto1 (~humbertow@187.202.244.149)
[08:49:05] *** Quits: humbertowoody (~humbertow@187.202.244.149) (Ping timeout: 256 seconds)
[08:51:57] *** Quits: humberto1 (~humbertow@187.202.244.149) (Quit: WeeChat 3.3)
[08:52:48] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[08:53:27] <mattf> Anyone has or know of an example of how I can draw from a svg image using cairo?
[08:53:36] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[08:53:45] <mattf> (gtk application, i want to display the svg on it)
[08:54:01] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[08:56:00] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:56:13] *** Quits: jimklo (~jimklo@2600:6c52:6f00:ae5f:9d49:4e4d:deda:db3c) (Remote host closed the connection)
[08:56:41] *** Joins: jimklo (~jimklo@2600:6c52:6f00:ae5f:9d49:4e4d:deda:db3c)
[08:59:14] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:00:17] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[09:00:27] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[09:01:04] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[09:01:08] *** Joins: jpodivin (~jpodivin@cgnat44-pool1-236-177.poda.cz)
[09:01:16] *** Quits: jimklo (~jimklo@2600:6c52:6f00:ae5f:9d49:4e4d:deda:db3c) (Remote host closed the connection)
[09:01:25] *** Joins: jimklo (~jimklo@2600:6c52:6f00:ae5f:9d49:4e4d:deda:db3c)
[09:02:10] *** Joins: nomic2 (~nomic@51.52.78.152)
[09:02:53] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[09:03:16] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:03:29] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[09:03:43] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[09:03:49] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 256 seconds)
[09:03:54] *** Quits: nomic (~nomic@85.203.46.65) (Ping timeout: 260 seconds)
[09:03:54] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[09:08:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[09:11:58] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[09:12:51] *** Joins: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[09:12:59] <energizer> why isn't raise an expression?
[09:13:16] <grawity> why would it be
[09:13:22] <energizer> most things are
[09:14:00] <energizer> (`raise e`, to be precise)
[09:15:10] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[09:16:04] <jinsun> you can make one `def raise_expr(e): raise e`
[09:16:32] <energizer> that adds a frame
[09:16:49] *** Quits: ionelmc (uid20175@id-20175.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:17:00] <jinsun> python is annoying that way because of the indentation based syntax, too many things are not expressions, and have to be wrapped up inside functions
[09:17:26] <jinsun> ah yeah will need some extra magic
[09:18:10] <energizer> i dont think raise e needs to be a statement just because of indentation, but maybe i'm missing somethign?
[09:19:16] <jinsun> yeah raise is not one of those that suffers from the indentation problem
[09:19:17] <jinsun> well some things were changed like print and yield, maybe raise can be changed too now
[09:19:31] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[09:20:28] <energizer> await, too, i think
[09:20:55] <jinsun> some things were not expressions to avoid people shooting themselves in the foot, like assignments, because of the == and = confusion
[09:21:16] <energizer> maybe i'm misremembering
[09:21:29] <jinsun> but doens't seem like raise would cause any confusing like that
[09:21:45] *** Joins: matsaman (~matsaman@user/matsaman)
[09:21:57] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Ping timeout: 256 seconds)
[09:22:03] <jinsun> where do you want to use raise where it needs to be an expression? lambda?
[09:22:04] <energizer> yknow that's a problem almost entirely because of everything being booly
[09:22:18] <energizer> p || raise ValueError
[09:23:49] <grawity> are we writing perl now
[09:24:14] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[09:24:37] <energizer> ok, `p or raise ValueError`
[09:25:28] <grawity> that's still perl masquerading as python
[09:25:34] <grawity> just write "if not p:"
[09:25:47] *** Joins: dvx (~dvx@5.181.92.64)
[09:27:00] <jinsun> it would be weird or raise to be expression really, expressions need to evaluate to values, raise expression would have no value
[09:27:31] *** nomic2 is now known as nomi
[09:27:35] *** nomi is now known as nomic
[09:27:35] <energizer> what value does 1/0 evaluate to?
[09:28:37] <grawity> one of the great features of python is that it massively reduces ugly inline checks like perl's "open($foo) or croak "$@" or even worse, bash's "grep foo && do this || do that"
[09:28:48] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[09:28:49] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 250 seconds)
[09:29:00] <jinsun> well if you are type hinting they would have the value of type NoReturn
[09:29:06] *** Quits: TML (~tml@user/tml) (Ping timeout: 260 seconds)
[09:29:30] <energizer> raise e too, no?
[09:30:41] *** Joins: analoq (~yashi@user/dies)
[09:32:01] *** Joins: stranac (~stranac@195.29.239.126)
[09:32:27] <energizer> you prefer m = match("foo", s)
[09:32:27] <energizer> if m is None:
[09:32:27] <energizer>     raise ValueError(s)
[09:32:27] <energizer> return m.group(1)
[09:32:32] <energizer> ?
[09:33:06] <jinsun> yeah raise expression wouldbe notretunr, still weird, and type checkers wont't let you use NoReturn expressions in many places
[09:33:51] <jinsun> I'm for everything being expression really, but raise seems like the least useful one to me
[09:37:32] <jinsun> that example is re being a mess, maybe match should have given an option to throw itself instead of silently giving None
[09:38:19] *** Quits: audiocat (~audio@user/audio) (Ping timeout: 252 seconds)
[09:38:30] <jinsun> it can be shortened a bit with walrus, if and match can be same line
[09:40:17] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[09:40:31] <jinsun> or just one line if you decide to silently return None like re does, `if (m := match("foo", s)) is not None: return m.group(1)`
[09:40:58] *** Joins: djhankb (~djhankb@208.113.164.68)
[09:42:17] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[09:43:25] *** Joins: AlanMD_ (~AlanMD@86.121.179.183)
[09:43:33] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Read error: Connection reset by peer)
[09:44:56] <jinsun> better would be to have rust's Enums and return a Result type that can be Ok or Error, and unwrap that auto raises the error and gives you the Ok part if it was not error
[09:46:33] *** Joins: grundrausch3n (~grundraus@p200300e9ef0a82009c87fcc08caac64f.dip0.t-ipconnect.de)
[09:46:58] <jinsun> there are pacakges that do this but I haven't used them https://github.com/rustedpy/result
[09:47:21] <energizer> i dont think it's worth getting into those corners in python
[09:47:24] <jinsun> of couse in python that will rely on type checkers warning you that you forgot to unwrap or match the result, not enforced by the compiler
[09:48:33] *** Joins: maryo (~Maryo@user/maryo)
[09:49:20] <energizer> i haven't been following, are there wild new features from modern languages that will be added in 3.11+?
[09:50:14] <esaym153> energizer: no
[09:51:10] <jinsun> there is match case that is a wild new feature added in 3.10
[09:51:23] <jinsun> but unfortunately that is also not an expression
[09:52:32] <energizer> you're kidding
[09:53:53] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:55:28] <energizer> oh exception groups, that's a long time coming
[09:55:35] <jinsun> in 3.11 the exception groups thing is the only major new thing for now it seems
[09:55:36] <energizer> good on ya python
[09:55:55] *** Quits: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Ping timeout: 252 seconds)
[09:56:12] <jinsun> and the enhanced error locations thing in tracebacks, but that is not really a new feature but enhancement of existing thing
[09:56:40] *** Quits: ZMarkC (~ZMarkC@185.132.43.61) (Quit: Leaving)
[09:57:28] <jinsun> and postponed evaluation of annotations if it is not defferred again
[09:57:46] <energizer> i assume anybody that needed that was already using future
[09:58:57] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[09:59:10] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:59:24] <jinsun> but seems like it will be deferred again, because pro-typing and pro-runtime use of annotations people are at odds about that
[09:59:55] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[10:00:13] <energizer> runtime people want them to be live?
[10:00:19] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[10:01:11] <energizer> isnt there a function for evaling them? it doesnt seem like it would matter much either way since they can be converted
[10:02:21] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:05:02] *** Quits: Omega037 (~Omega037@047-233-057-109.res.spectrum.com) ()
[10:05:07] <jinsun> yeah but there are some edge cases it still doesn't handle, some of which are solved by PEP 649, but not all, I actually haven't looked at those in detail
[10:05:29] <jinsun> there is a long dicussion in python-dev about the typing vs runtime people https://mail.python.org/archives/list/python-dev@python.org/thread/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/
[10:06:22] <jinsun> though that doesn't go too much into the technical problems of evaling the hints, more about what people feel they need
[10:06:51] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[10:06:52] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:06:58] *** Quits: jimklo (~jimklo@2600:6c52:6f00:ae5f:9d49:4e4d:deda:db3c) (Remote host closed the connection)
[10:07:56] *** Joins: jimklo (~jimklo@2600:6c52:6f00:ae5f:9d49:4e4d:deda:db3c)
[10:08:23] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 252 seconds)
[10:08:52] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:10:03] <jinsun> PEP 649 repo has some of those issues https://github.com/larryhastings/co_annotations/issues
[10:12:02] *** Joins: Yugi (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[10:13:25] *** Quits: jimklo (~jimklo@2600:6c52:6f00:ae5f:9d49:4e4d:deda:db3c) (Ping timeout: 268 seconds)
[10:13:28] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[10:14:34] <aphysically> jinsun: !! it fixed my simplified example but not the full original code
[10:15:18] *** Quits: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 260 seconds)
[10:15:27] <aphysically> ahah
[10:15:30] <aphysically> it works with chain now
[10:15:34] <aphysically> but not my tricky star unpacking
[10:16:34] *** Joins: jimklo (~jimklo@2600:6c52:6f00:ae5f:9d49:4e4d:deda:db3c)
[10:16:57] *** Quits: jfcaron (~jfcaron@192.252.229.166) (Quit: jfcaron)
[10:17:06] <jinsun> oh released already
[10:17:15] <jinsun> pylance not updated yet
[10:17:58] <jinsun> I should get the pyright cli too, but on windows it looks like npm is the way whcih I don't want to install
[10:18:48] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[10:19:29] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[10:19:49] <matsaman> jinsun: isn't it in pypi?
[10:20:07] *** Joins: zaquest (~notzaques@5.130.79.72)
[10:20:54] <jinsun> oh yeah there is one community maintained one on pypi, mentioned in pyright readme too
[10:21:05] <jinsun> let me try
[10:21:38] *** Joins: zalt (~zalt@user/zalt)
[10:21:41] <aphysically> jinsun: https://github.com/microsoft/pyright/issues/2706#issuecomment-994383338
[10:21:43] <aphysically> lol
[10:21:43] *** Quits: moose (~moose@user/moose) (Quit: System has requested shutdown for maintenance.)
[10:22:17] <jinsun> why is it v0.0.13, weird
[10:22:29] <matsaman> better than v6.6.666 ?
[10:22:58] <matsaman> some people are pretty cautious about breaking things
[10:23:03] <jinsun> I mean the actuall pyright version is something much higher
[10:23:13] <matsaman> and some people are just crazy about semver
[10:23:30] <matsaman> well, you don't want to pretend your version is the same as some other package, even if they're related
[10:23:33] <matsaman> that way lies madness
[10:23:35] <jinsun> so this is something that downloads the actual pyright it seems
[10:23:45] *** Joins: upsala (~zcb@185.213.155.232)
[10:24:03] <aphysically> yeah
[10:24:15] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:24:15] <energizer> i heard the elm compiler enforces semver. how cool is that
[10:24:34] <energizer> s/compiler/package manager or something/
[10:24:57] <energizer> you're not allowed to upload breaking apis without bumping major
[10:25:03] <jinsun> and it does the npm thing when you try to use it, so just a way to automate the node and npm installationo
[10:25:18] *** Quits: upsala (~zcb@185.213.155.232) (Client Quit)
[10:25:59] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 252 seconds)
[10:26:26] *** Joins: upsala (~zcb@185.213.155.232)
[10:26:40] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[10:27:05] *** Joins: jmd (~user@de.cellform.com)
[10:27:05] *** Quits: ideopathic (~ideopathi@2600:1702:8b0:a500:e5d2:f04c:bacb:eccb) (Ping timeout: 252 seconds)
[10:27:54] <matsaman> energizer: this? https://elm-lang.org/
[10:28:05] <energizer> matsaman: ya
[10:28:10] <matsaman> jinsun: the pypi thing uses npm?
[10:28:22] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[10:28:44] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[10:28:54] <matsaman> well I like their links to immediately see examples in live fiddles
[10:30:42] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[10:30:54] *** Joins: bdeferme (~bdeferme@i.ctrl86.com)
[10:32:41] *** Quits: teut (~teut@2401:4900:1c30:1de4:f19d:3f97:1aa3:ecb1) (Ping timeout: 256 seconds)
[10:33:43] *** Joins: moose (~moose@user/moose)
[10:33:55] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[10:34:00] <aphysically> jinsun: yeah it automatically updates every time you run it as far as I can tell
[10:34:12] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[10:34:19] <aphysically> anyway, Eric fixed the other bug already :D https://github.com/microsoft/pyright/issues/2706
[10:35:11] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:35:36] <mattf> does anyone know how to set the position of a svg with cairo dsiplaying a Rsvg.Handle on gtk/
[10:36:50] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Remote host closed the connection)
[10:37:12] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:38:13] *** Joins: audio (~audio@user/audio)
[10:39:07] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: restarting..)
[10:39:57] <aphysically> I think I'm 9 for 4 or in pyright bugs vs "as designed"
[10:40:00] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[10:40:01] *** Quits: MockingMoniker (~MockingMo@ip72-201-253-44.ph.ph.cox.net) (Read error: Connection reset by peer)
[10:40:06] <matsaman> aphysically: heh
[10:40:07] <aphysically> but to be fair at least one of those 4 has been fixed as a bug now
[10:40:35] <aphysically> well, I wouldn't say fixed as a bug, more like the agreed behavior shifted to the reason I filed the bug
[10:40:49] *** Joins: whaley (~whaley@2603-6080-a301-33d1-e7f2-dd36-095f-9da6.res6.spectrum.com)
[10:41:16] <matsaman> still, I like calling them 'bugs' rather than 'issues'
[10:41:16] *** Joins: ano (~ano@user/ano)
[10:42:08] <aphysically> what I mean to say is I wasn't trying to imply closing my issue originally was an error, more like the thinking has changed around the topic since that happened
[10:42:30] <aphysically> (Guido took a position on the issue)
[10:42:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[10:42:58] <aphysically> (and managed to convince others)
[10:43:37] <aphysically> 9:4 is a good record I'll take that
[10:43:58] <aphysically> and one of the 3 remaining could be addressed in the future as well
[10:45:00] *** Joins: fikran (~fikran@user/fikran)
[10:45:31] *** Joins: chele (~chele@user/chele)
[10:45:57] *** Quits: Mechanismus (~LabMonkey@206.255.106.67) (Read error: Connection reset by peer)
[10:46:09] *** Joins: user51 (~user51@176.228.151.30)
[10:47:23] *** Joins: Bakunin (~maplefing@user/lindis)
[10:47:35] *** Joins: Mechanismus (~LabMonkey@206.255.106.67)
[10:48:13] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:50:24] *** Quits: maplefinger (~maplefing@user/lindis) (Ping timeout: 276 seconds)
[10:50:39] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:51:31] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[10:52:15] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 250 seconds)
[10:52:43] <jinsun> aphysically: nice, and all the AoC golf ones were bugs I think
[10:52:47] *** Quits: deutor_ (~quassel@82.177.4.226) (Ping timeout: 265 seconds)
[10:52:55] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[10:53:25] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:53:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Client Quit)
[10:54:11] <aphysically> yeah
[10:54:52] <aphysically> today's AoC is not very interesting in my personal bias
[10:55:07] <aphysically> (it's basically: implement a path-finding algorithm)
[10:55:24] *** Joins: deutor (~quassel@82.177.4.226)
[10:55:51] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:55:55] *** Joins: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs)
[10:56:47] *** Joins: CorsairX (~jc157746@124-170-72-91.dyn.iinet.net.au)
[10:57:00] <CorsairX> Hi all, I'm running into a pathing issue where I want python on a Redhat 7 machine to use an upgraded version of Sqlite
[10:57:07] <CorsairX> It's a bit of an interplay with Django, Gunicorn and the underlying system library
[10:57:14] <CorsairX> Is there anyone who might be familiar with the issue?
[10:57:24] <matsaman> upgraded how?
[10:57:30] *** Joins: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[10:58:15] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Ping timeout: 252 seconds)
[10:58:21] <CorsairX> Downloaded and installed Python 3.6 via yum and downloaded the current version of SQLite3 as source and built and installed
[10:58:54] <CorsairX> If I use export LD_LIBRARY_PATH="/usr/local/lib"
[10:58:54] <CorsairX>  the correct SQlite libraries are found
[10:59:19] <CorsairX> If not, python seems to be reverting to the default SQlite that comes with Redhat (3.7.17)
[10:59:40] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[10:59:53] *** Joins: mrwick (~mrwick@user/mrwick)
[10:59:53] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[11:00:16] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[11:00:41] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:00:41] *** Quits: Yugi (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 250 seconds)
[11:00:44] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[11:01:48] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[11:01:59] *** Quits: aniketgm (~Aniket@49.36.111.159) (Read error: No route to host)
[11:02:40] *** Joins: seednode (~seednode@user/seednode)
[11:02:52] <matsaman> CorsairX: so... sorted your problem, or? What's the problem now?
[11:02:56] <aphysically> jinsun: I'd guess that was a bug for a long time not because it was necessarily uncommon to run into it, but in the cases where you run into it it can be fixed with adding annotations and it's going to be buried in nested loops where it's not actually clear it's a type inference bug in the first place (after all it just manifests as 'unknown type')
[11:02:57] *** Quits: Mechanismus (~LabMonkey@206.255.106.67) (Read error: Connection reset by peer)
[11:03:22] *** Joins: Mechanismus (~LabMonkey@206.255.106.67)
[11:04:29] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[11:05:02] *** Quits: audio (~audio@user/audio) (Ping timeout: 240 seconds)
[11:05:09] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[11:05:13] <aphysically> and it was only very obviously a type inference bug when all the code required got compressed in my code golf
[11:05:16] *** Joins: KvL_ (KvL@gateway/vpn/protonvpn/kvl)
[11:05:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:05:57] *** KvL is now known as Guest2184
[11:05:57] *** KvL_ is now known as KvL
[11:05:59] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[11:06:07] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Ping timeout: 256 seconds)
[11:06:13] *** Quits: Guest2184 (KvL@gateway/vpn/protonvpn/kvl) (Ping timeout: 256 seconds)
[11:06:25] <CorsairX> The problem is that invoke Gunicorn as a service, I don't know how to do do the library path override so it's using the default library instead of the new libraries
[11:06:48] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[11:07:21] <CorsairX> In a perfect world, I'd simply replace all libraries with the upgrades because the only thing this server will doing is serving up the Django app
[11:07:37] <matsaman> in a perfect world you wouldn't be stuck on Red Hat =)
[11:07:44] <CorsairX> I've no need to retain the old version but I frankly can't figure out how to replace it
[11:07:50] <CorsairX> Agreed 100% !
[11:07:56] <matsaman> you're not using apache httpd at all?
[11:08:01] <CorsairX> Not my choice unfortunately
[11:08:02] <CorsairX> No
[11:08:13] <CorsairX> Nginx / Gunicorn / Django
[11:10:54] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:11:01] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (Ping timeout: 240 seconds)
[11:11:17] <jinsun> aphysically: yep, that was definitely an uncommon way to write it, specially when you are also type checking, so not unexpected that no one caught that before
[11:11:35] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[11:12:34] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:13:02] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:7861:521f:5818:4d03)
[11:13:17] *** Joins: AM (~techman@213.216.210.195)
[11:13:57] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189)
[11:14:12] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:14:14] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Remote host closed the connection)
[11:14:48] *** Joins: manti7 (~manti7@176.10.104.94)
[11:15:03] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[11:15:13] <matsaman> CorsairX: maybe #nginx
[11:16:38] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Quit: KvL)
[11:16:50] *** Joins: Geronimo5 (~Geronimo@user/geronimo)
[11:16:55] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[11:16:55] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[11:17:03] *** Joins: harleypig1 (thelounge@harleypig.com)
[11:18:09] *** Joins: majors_ (~majors@user/majors)
[11:18:22] *** Joins: aniketgm (~Aniket@49.36.111.159)
[11:18:43] *** Joins: rendar (~rendar@user/rendar)
[11:19:07] *** Quits: Geronimo (~Geronimo@user/geronimo) (Ping timeout: 250 seconds)
[11:19:07] *** Quits: harleypig (thelounge@harleypig.com) (Ping timeout: 250 seconds)
[11:19:07] *** Quits: Melon_Bread (~Rain@li958-238.members.linode.com) (Ping timeout: 250 seconds)
[11:19:07] *** harleypig1 is now known as harleypig
[11:19:07] *** Geronimo5 is now known as Geronimo
[11:19:09] *** Quits: majors (~majors@user/majors) (Ping timeout: 252 seconds)
[11:19:17] <CorsairX> Not an issue for Nginx - it's not even being invoked at this stage
[11:19:31] *** Quits: digicyc (aarona@user/digicyc) (Ping timeout: 252 seconds)
[11:21:06] *** Quits: aniketgm (~Aniket@49.36.111.159) (Client Quit)
[11:21:43] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[11:22:08] *** Joins: luigibu (~luigi@80.30.201.209)
[11:24:03] *** Joins: Enitin (~Enitin@82.102.22.85)
[11:25:13] <CorsairX> Found a work around - invoke a bash script instead of calling gunicorn
[11:25:14] <CorsairX> Ugh
[11:25:25] <CorsairX> Well, it works
[11:28:19] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 252 seconds)
[11:29:09] *** Quits: Enitin (~Enitin@82.102.22.85) (Read error: Connection reset by peer)
[11:29:56] *** Joins: Enitin (~Enitin@82.102.22.85)
[11:30:17] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:711e:cf34:38a2:6d42)
[11:30:31] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:32:58] *** Joins: grooverman (~grooverma@177.95.12.14)
[11:33:20] *** Joins: alzgh (~alzgh@user/alzgh)
[11:33:23] *** Joins: tobybl (~tobybl@213.31.132.151)
[11:33:37] *** Quits: davor (~davor@user/davor) (Ping timeout: 250 seconds)
[11:33:53] *** Joins: delvian (~delvian@41.13.194.9)
[11:33:56] *** Joins: NeoCore (~neocore@195.200.221.86)
[11:34:20] *** Joins: orangeboxcutter (~orange@user/orangeboxcutter)
[11:34:33] *** Quits: grooverman_ (~grooverma@177.102.117.95) (Ping timeout: 256 seconds)
[11:34:52] *** Joins: chele_ (~chele@user/chele)
[11:35:02] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[11:35:07] *** Quits: chele (~chele@user/chele) (Ping timeout: 256 seconds)
[11:35:20] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[11:35:28] *** Quits: naranja (~orange@user/orangeboxcutter) (Remote host closed the connection)
[11:35:54] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 276 seconds)
[11:35:54] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Ping timeout: 276 seconds)
[11:35:59] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[11:36:17] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[11:36:23] *** Joins: Forsaken87 (~quassel@2a02:908:1867:7d40:93ab:b917:6d2c:4af1)
[11:36:30] *** Quits: jmd (~user@de.cellform.com) (Ping timeout: 260 seconds)
[11:37:39] *** Joins: davor (~davor@user/davor)
[11:37:41] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:37:51] *** Joins: spithash (~spithash@user/spithash)
[11:39:19] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[11:39:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[11:39:52] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:40:03] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[11:41:48] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:88f4:e9ca:81d6:31ef)
[11:43:32] *** adeliktas13 is now known as adeliktas
[11:46:19] *** Joins: kosh (~kosh@user/kosh)
[11:46:35] *** chele_ is now known as chele
[11:46:56] *** Joins: arinov (~arinov@213.194.126.155)
[11:47:14] *** Quits: wlemuel (~user@210.22.124.110) (Read error: Connection reset by peer)
[11:47:26] *** Joins: wlemuel (~user@210.22.124.110)
[11:49:46] *** Joins: nps (nps@nps.staff.ircforever.org)
[11:50:21] *** Joins: palasso (~palasso@user/palasso)
[11:50:43] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[11:52:25] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[11:53:19] <braxas> something odd is happening with pypi/pip. https://pypi.org/project/rdflib/6.0.2/ exists - but I can't install it, this fails: pipx run --no-cache --spec rdflib==6.0.2 --python python3.6 rdfpipe --help
[11:53:50] <braxas> https://bpa.st/ZSJQ
[11:54:13] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 250 seconds)
[11:54:45] *** Joins: Enitin (~Enitin@82.102.22.85)
[11:54:55] <Repiphany> 6.x.y isn't compatible with 3.6
[11:55:07] <braxas> ah, yes, forgot :D
[11:55:08] <braxas> thanks
[11:57:10] *** Joins: Klinda (~superleag@user/klinda)
[11:57:41] *** Joins: ejjfunky (~ejjfunky@125.163.60.19)
[11:57:41] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (Read error: Connection reset by peer)
[12:03:02] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (Ping timeout: 240 seconds)
[12:04:02] *** Quits: jimklo (~jimklo@2600:6c52:6f00:ae5f:9d49:4e4d:deda:db3c) (Quit: Leaving...)
[12:05:39] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[12:06:21] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:943d:5b05:e9f7:79b5) (Ping timeout: 250 seconds)
[12:07:05] *** Joins: Deknos (~someone@user/menace)
[12:07:55] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[12:09:50] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[12:10:21] *** Joins: koft (~koft@c-69-255-83-24.hsd1.md.comcast.net)
[12:11:12] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:13:12] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Quit: KvL)
[12:14:54] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[12:15:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:15:35] <petaflot> hello! I'm puzzled... I import some functions at te start of a file, and I need to do it again in __main__ and in Thread targets. It's not needed for the oter variables I import
[12:15:37] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[12:16:11] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[12:16:34] *** Joins: ano (~ano@user/ano)
[12:18:06] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:20:57] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:21:07] *** Quits: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs) (Ping timeout: 252 seconds)
[12:22:03] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[12:23:22] *** Joins: Warped (~Warped@user/warped)
[12:24:49] *** Joins: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs)
[12:28:18] *** Burrr_ is now known as Burrr
[12:29:48] *** Quits: csmiga (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[12:30:14] *** Quits: whatif (~whatif@2400:8902::f03c:92ff:fe60:98d8) (Quit: Client closed)
[12:31:01] *** Quits: inomoz (~inomoz@83.149.21.102) (Ping timeout: 252 seconds)
[12:31:25] *** Joins: csmiga (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net)
[12:31:45] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[12:32:59] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[12:35:30] *** Quits: NeoCore (~neocore@195.200.221.86) (Quit: Leaving)
[12:35:42] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[12:37:04] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[12:37:18] *** Joins: shad (~shad@user/shad)
[12:39:48] *** Quits: shad (~shad@user/shad) (Client Quit)
[12:40:07] *** Joins: shad (~shad@user/shad)
[12:40:13] <odinsbane> petaflot: can you paste an example? Did you cause a name collision somehow?
[12:40:17] *** Quits: mat001 (~mat001@c-73-189-86-20.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:41:32] *** Quits: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[12:41:36] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:42:33] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[12:42:39] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:42:43] *** Joins: cheater (~Username@user/cheater)
[12:43:37] *** Joins: inomoz (~inomoz@85.26.165.145)
[12:43:49] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[12:45:06] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[12:47:46] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[12:49:43] *** Joins: raxor2k (~raxor2k@78.158.254.179)
[12:51:35] *** Quits: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[12:52:25] *** Quits: Bakunin (~maplefing@user/lindis) (Remote host closed the connection)
[12:52:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[12:52:42] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[12:53:04] *** Joins: Jimmy2027 (~hendrik@2001:1620:2018:38:dde3:1b0f:dc57:eb0f)
[12:54:20] *** Joins: fikran (~fikran@user/fikran)
[12:54:48] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[12:58:52] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[13:00:23] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[13:00:47] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[13:02:54] *** Quits: relight (~relight@user/relight) (Quit: Konversation terminated!)
[13:04:07] *** Joins: xsperry (~xs@user/xsperry)
[13:04:23] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 252 seconds)
[13:04:41] *** Joins: Enitin (~Enitin@82.102.22.85)
[13:05:32] *** Joins: stonkey (~stonkey@user/stonkey)
[13:05:38] *** Joins: VaniaPy (~VaniaPy@46.12.245.39.dsl.dyn.forthnet.gr)
[13:06:09] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[13:06:25] <VaniaPy> hello,i'm trying to log an error message on line 53 when the condition is fullfilled,but i don't see any message in the log file https://dpaste.org/DygN
[13:07:32] *** Joins: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net)
[13:07:50] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[13:08:42] *** Joins: thiras (~thiras@user/thiras)
[13:08:51] *** Joins: legola (~legola@46.235.101.65)
[13:11:18] *** Joins: plastico (~plastico@neomutt/plastico)
[13:12:21] <Repiphany> VaniaPy: What is the pH value that you're getting in the response
[13:12:37] *** Joins: Portugol9 (~Portugol9@user/portugol9)
[13:13:00] <VaniaPy> Repiphany 6
[13:13:35] <Repiphany> The first if-statement is True and you're returning out of the function so none of the other ifs get checked
[13:14:05] <VaniaPy> yeah right,thanks
[13:14:13] <VaniaPy> now it logged
[13:14:57] <parv> .ooO( That's lot of typing just to test a value! Aiyyee )
[13:15:32] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 240 seconds)
[13:16:16] *** Joins: aniketgm (~Aniket@49.36.109.129)
[13:16:53] <parv> VaniaPy, Perhaps you should obscure the actual IP address
[13:17:48] *** Joins: ArtfulDodger (~ArtfulDod@81.126.81.79.rev.sfr.net)
[13:17:56] <VaniaPy> parv yeah right:P
[13:19:01] *** Quits: fearnothing (~fearnothi@user/fearnothing) (Remote host closed the connection)
[13:19:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[13:20:20] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:20:51] *** Joins: Sadale (~Sadale@user/sadale)
[13:21:39] *** Quits: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[13:21:58] *** Parts: nps (nps@nps.staff.ircforever.org) ()
[13:22:28] *** Parts: benoliver999 (~benoliver@178.128.43.129) (WeeChat 3.3)
[13:22:41] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:23:06] <ArtfulDodger> Hey! When using a new type MyInt = NewType('MyInt', int) is there anything I can do to force my literals to be constructed as MyInt(5) in v : MyInt = 5 ?
[13:23:30] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[13:23:44] <ArtfulDodger> Or in def f() -> MyInt : return 5
[13:24:35] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 268 seconds)
[13:25:36] <bjs> ArtfulDodger: sounds like you just want a MyInt class?
[13:26:01] <bjs> ArtfulDodger: but NewType should let you do that?
[13:26:29] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 265 seconds)
[13:27:19] <user51> documentation question: https://docs.python.org/3/tutorial/inputoutput.html
[13:27:32] *** Joins: slavfox (~slavfox@93.158.232.111)
[13:27:38] <user51> why does the TOC say 'input and output', but the contents are 'output and input'?
[13:28:13] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[13:28:18] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:e9cf:10dc:1489:60d6)
[13:28:25] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[13:28:45] <jinsun> I see "input and output" both sides
[13:29:01] <bjs> user51: do you mean that the actual doc describes output first?
[13:29:13] <user51> bjs: yep
[13:29:22] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:29:28] <bjs> IO or input/output is a common expression. if the TOC put it the other way around it would read *really* weird to me
[13:29:58] <ArtfulDodger> bjs, my point is that it is long and heavy to call the constructor explicitely e.g. a : MyInt = MyInt(5) ; I would like a : MyInt = 5 to create a MyInt instance for "a", not an int
[13:29:59] <bjs> user51: probably just because the author felt it was more readable to describe output first
[13:30:13] <bjs> ArtfulDodger: oh, you want MyInt to be an alias for int?
[13:30:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:30:27] <bjs> ArtfulDodger: no you want to actually change what the literal 5 meant? No that won't happen
[13:30:31] *** Joins: guenhael (~Thunderbi@193.52.208.98)
[13:30:53] <bjs> The hints are just that hints, they shouldn't change what concrete types things actually are.
[13:31:18] *** Quits: trace987 (~trace@ip5b429834.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[13:32:16] <wyre> will not logging.info() show messages in journal?
[13:33:14] *** Joins: cosimone (~user@93-47-228-203.ip115.fastwebnet.it)
[13:34:27] *** Quits: Jong (~Jong@2620:10d:c090:400::5:3f74) (Ping timeout: 252 seconds)
[13:34:58] <ArtfulDodger> bjs, I want to limit the values of MyInt to -5 to 5 so yes that is just an alias so that the type checker can warn if I'm passing something out of [-5,5] but I wish I didn't have to replace all literals "4" by "MyInt(4)"
[13:35:41] *** Joins: zalt (~zalt@user/zalt)
[13:35:49] *** dcaro_away is now known as dcaro
[13:35:51] <montpol> I'm getting an error when I use curve_fit from scipy: https://bpa.st/SO6A
[13:36:10] <jinsun> oh can you do that with NewType? set some value range for int?
[13:36:13] <montpol> the variables are given in the arguments of curve_fit so why am i getting this error
[13:36:59] <bjs> ArtfulDodger: ah, maybe what you want is something like https://www.python.org/dev/peps/pep-0586/
[13:37:13] <Repiphany> montpol: You shouldn't be calling self.fitFunc() in line 5
[13:37:21] *** Quits: goutly (~gitly@148.252.133.169) (Ping timeout: 250 seconds)
[13:37:26] <Repiphany> `curve_fit(self.fitFunc,`
[13:37:35] <montpol> ah ok thanks
[13:37:40] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[13:38:01] <jinsun> but have to Union each allowed literal, would be nice if some ValueRange was possible like typing.Annotated docs show
[13:38:57] *** Joins: goutly (~gitly@148.252.133.169)
[13:39:03] *** Quits: onichomp (~onichomp@2806:264:4404:8162:c80f:cb32:a5a8:f573) (Ping timeout: 265 seconds)
[13:40:08] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 252 seconds)
[13:40:51] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[13:41:21] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Remote host closed the connection)
[13:41:44] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:41:47] <aniketgm> montpol: it's not a function call. it's a function passed as argument. remove () from self.fitFunc() in curve_fit.
[13:42:07] <aniketgm> oh. someone answered it. I'm slow..
[13:42:22] <aniketgm> and btw. hi everyone
[13:42:31] *** Joins: Sadale (~Sadale@user/sadale)
[13:43:15] *** Quits: goutly (~gitly@148.252.133.169) (Ping timeout: 252 seconds)
[13:43:17] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:711e:cf34:38a2:6d42) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:44:05] <ArtfulDodger> bfs, yes Literal is great, thanks!
[13:44:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:45:01] * bjs looks at keyboard
[13:45:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[13:45:58] *** Joins: goutly (~gitly@85.255.233.150)
[13:46:16] *** Quits: Linux77 (~LinuMage@186.233.183.58) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[13:47:37] *** Lord_of_Life_ is now known as Lord_of_Life
[13:48:45] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[13:48:54] *** Quits: l4yer (~l4yer@195.181.170.210) (Remote host closed the connection)
[13:49:32] *** Joins: Enitin (~Enitin@82.102.22.85)
[13:50:07] *** Joins: l4yer (~l4yer@84.69.191.245)
[13:50:49] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:711e:cf34:38a2:6d42)
[13:51:14] *** Joins: Naan (~Naan@user/naan)
[13:53:57] *** Quits: goutly (~gitly@85.255.233.150) (Ping timeout: 256 seconds)
[13:54:21] *** Joins: goutly (~gitly@85.255.233.150)
[13:54:41] *** Quits: l4yer (~l4yer@84.69.191.245) (Ping timeout: 250 seconds)
[13:55:07] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:711e:cf34:38a2:6d42) (Ping timeout: 250 seconds)
[13:55:59] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 250 seconds)
[13:56:02] *** Joins: bailsman (~Mm1@xls01.freecult.org)
[13:57:12] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:59:01] *** Quits: goutly (~gitly@85.255.233.150) (Ping timeout: 250 seconds)
[13:59:06] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[13:59:32] <bailsman> Another scipy and/or standard library function question. I have a 2D array and a certain structure that represents how elements are connected to their neighbors. For example, only horizontally/vertically, or including diagonal, or including neighbors of distance 2, etc.
[14:00:04] <bailsman> Can I iterate over neighbors in a general way using this structure as input? I'd like to do so to turn it into a graph where the weight of the connection is the value of the neighbor.
[14:00:21] <bailsman> This is fairly simple to code myself but I'd like to know if this already is a standard thing with a name in either the standard library of scipy
[14:00:31] *** Quits: aniketgm (~Aniket@49.36.109.129) (Read error: Connection reset by peer)
[14:00:32] <bailsman> or*
[14:02:03] *** Joins: goutly (~gitly@85.255.237.91)
[14:03:54] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[14:06:18] *** Quits: goutly (~gitly@85.255.237.91) (Ping timeout: 260 seconds)
[14:06:19] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi)
[14:06:56] *** Joins: l4yer (~l4yer@195.181.170.210)
[14:07:33] *** Quits: David_Hans (uid530935@id-530935.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[14:08:23] *** Joins: goutly (~gitly@85.255.233.150)
[14:09:30] *** Joins: Tripple_U (~Tripple_U@dslb-090-186-117-240.090.186.pools.vodafone-ip.de)
[14:10:37] <wyre> how could I add this journald handler https://www.freedesktop.org/software/systemd/python-systemd/journal.html#journalhandler-class into my dict for using in logging.config.dictConfig()?
[14:10:48] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:18f3:9df5:7902:bfc2) (Quit: Textual IRC Client: www.textualapp.com)
[14:10:52] <Tripple_U> Hi there! Is this the right place to ask for help for my specific code?
[14:10:54] <Repiphany> bailsman: Do you mean like https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.ndimage.filters.convolve.html
[14:12:09] <bjs> Tripple_U: sure
[14:12:11] <randall> Tripple_U: If it's python, yes.
[14:12:28] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:2076:bcf:219a:64f7)
[14:13:34] *** Joins: trace987 (~trace@ip5b429834.dynamic.kabel-deutschland.de)
[14:14:06] <Tripple_U> Yes ist is :-)
[14:14:07] <Tripple_U> So:
[14:14:07] <Tripple_U> I have a function in which I can set x = 1 but I cant increase x by one. I get the erroe "UnboundLocalError: local variable 'cards' referenced before assignment"
[14:14:14] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:14:35] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:943d:5b05:e9f7:79b5)
[14:15:05] <Tripple_U> AND to call the function this variable is checked beforehand.
[14:16:10] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[14:16:24] <Repiphany> Tripple_U: You need a `nonlocal x` or `global x` inside your function if you're trying to assign to an outer scope
[14:16:57] <bjs> Tripple_U: `def f(): print(x); x += 1`  this example code will always fail.  The reason is that inside any single function you cannot refer to both a local and a global variable with the same name.  If you want both to refer to the global you need to say `global x` at the beginning of the function.
[14:17:11] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 256 seconds)
[14:20:14] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[14:21:04] <Tripple_U> I think I understand:
[14:21:04] <Tripple_U> with x = 1 in my function i just use  a local x that i can set to 1 easyly.
[14:21:05] <Tripple_U> but with x += 1 python wants to rewrite a x outside the function and that only works with global variables.
[14:21:33] *** Quits: reset (~reset@user/reset) (Quit: reset)
[14:21:50] <bjs> Tripple_U: well not quite, `x = 1` and `x += 1` are both assignments to local variables by default,  unless you tell Python you meant the global one
[14:22:35] <bjs> Tripple_U: `def f(): x += 1` will fail because this is assigning a local "x", but there is no local "x" to increment.
[14:23:40] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[14:24:21] <raxor2k> I have a problem that my "loop.run_in_executor" is not working / doing things in the right order as expected.
[14:24:51] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:25:04] <bjs> raxor2k: okay?
[14:25:21] <Tripple_U> I think so, Yes.
[14:25:21] <Tripple_U> Thanks!
[14:25:29] <raxor2k> i am struggling to explain so, but i will try my best creating a paste
[14:25:40] <bjs> raxor2k: I've got a feeling that probably loop.run_in_executor is doing exactly what it's supposed to and isn't "not working" at all :P
[14:26:57] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[14:28:29] *** Joins: Sadale (~Sadale@user/sadale)
[14:28:53] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:28:55] *** Quits: nomic (~nomic@51.52.78.152) (Ping timeout: 250 seconds)
[14:29:24] *** Joins: weedmic (~weedmic@5.102.235.240)
[14:29:32] <raxor2k> bjs: here is explanation + the functions used: https://bpa.st/HZHQ
[14:29:35] *** Joins: nomic (~nomic@51.52.78.152)
[14:30:10] *** Joins: slav0nic (slav0nic@python.su)
[14:30:34] <bjs> raxor2k: I'm confused, you spawn 2 things to run in an executor then are surprised they don't execute in order?
[14:30:38] <raxor2k> I mean, i believe i could skip using "loop.run_in_executor" and just use async and await and push the data directly to the DB from the file itself, and it would solve the issue, but im still curious of what the issue is
[14:30:56] <raxor2k> bjs: each object does it iself yes
[14:31:04] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:31:50] <bjs> raxor2k: I'm not sure what you're asking
[14:32:19] <raxor2k> bjs: https://bpa.st/CUPQ
[14:32:43] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:ec5d:affc:32ec:33c7)
[14:32:59] <bjs> raxor2k: you still haven't really mastered the art of a minimum example.
[14:33:16] <bjs> raxor2k: you have async and threads here, of course things happen out of order a lot?  I'm not sure what the question is
[14:33:22] *** Quits: ubert (~Thunderbi@p200300ecdf1abb0650b4610a52e3eab2.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[14:34:11] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 256 seconds)
[14:34:23] *** Joins: Sadale_ (~Sadale@user/sadale)
[14:34:24] *** Joins: ubert (~Thunderbi@p200300ecdf1abb061518ea9ba8d342d1.dip0.t-ipconnect.de)
[14:34:46] <bjs> raxor2k: can you make an example in a blank file that imports *only* asyncio? no classes no models etc
[14:35:41] <raxor2k> bjs: im not blaming you for not understanding it, ive been thinking for 2 weeks on how to ask this question
[14:36:15] *** Parts: user51 (~user51@176.228.151.30) ()
[14:36:21] <bjs> raxor2k: well, start by making a new file and importing asyncio and nothing else then writing some functions that run things in executors
[14:36:54] <raxor2k> but i dont need to run things in executors if i use asyncio(inside that class) ?
[14:36:56] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[14:38:14] *** Joins: aniketgm (~Aniket@49.36.109.129)
[14:38:47] *** cyphase_eviltwin is now known as cyphase
[14:38:48] *** Quits: guenhael (~Thunderbi@193.52.208.98) (Remote host closed the connection)
[14:39:10] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[14:40:24] *** Joins: guenhael (~Thunderbi@193.52.208.98)
[14:40:32] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[14:41:30] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[14:42:14] *** Quits: Sadale_ (~Sadale@user/sadale) (Ping timeout: 260 seconds)
[14:42:58] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[14:44:11] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[14:44:18] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 265 seconds)
[14:44:58] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[14:44:59] *** Joins: Sadale (~Sadale@user/sadale)
[14:45:16] *** Joins: AsenMx (~AsenMx@user/asenmx)
[14:45:22] *** Joins: netrunner (~netrunner@user/netrunner)
[14:49:16] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-b1ee-87e3-1ad0-a6a9.res6.spectrum.com) (Quit: jarthur)
[14:49:29] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[14:51:33] *** Joins: y04nn (~y04nn@92.223.89.196)
[14:52:19] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Ping timeout: 256 seconds)
[14:53:37] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[14:54:45] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 252 seconds)
[14:55:44] *** Joins: PixelRobot (~PixelRobo@users2.mapama.es)
[14:58:39] *** Joins: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com)
[15:00:16] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[15:00:54] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[15:01:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[15:01:37] <bjs> raxor2k: I mean run_in_executor is a asyncio function
[15:01:42] <bjs> so I'm not sure what you mean
[15:02:26] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 245 seconds)
[15:03:28] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[15:03:40] *** Joins: fikran (~fikran@user/fikran)
[15:07:16] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[15:08:43] <bailsman> Repiphany: almost. I basically want the iteration part of the convolving but my output has to be a graph instead of the standard convolution
[15:09:08] *** Joins: Proxysna (~Proxysna@62.119.254.142)
[15:10:09] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Ping timeout: 252 seconds)
[15:10:40] *** Joins: jmd (~user@de.cellform.com)
[15:10:58] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[15:11:18] *** Quits: Proxysna (~Proxysna@62.119.254.142) (Remote host closed the connection)
[15:11:51] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[15:13:21] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[15:14:17] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:14:43] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[15:14:51] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[15:16:03] *** Quits: y04nn (~y04nn@92.223.89.196) (Remote host closed the connection)
[15:16:46] <ArtfulDodger> Are you aware of an official tutorial about decorators or is the PEP318 the best to learn the creation of decorators?
[15:17:27] *** Quits: guenhael (~Thunderbi@193.52.208.98) (Ping timeout: 250 seconds)
[15:17:42] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:88f4:e9ca:81d6:31ef) (Ping timeout: 260 seconds)
[15:17:46] *** Joins: jmd (~user@de.cellform.com)
[15:17:56] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[15:18:08] <ArtfulDodger> (I know there are many resources on the web but I'm looking for an official one from the py doc)
[15:20:45] <nedbat> ArtfulDodger: peps are rarely the best resource for learning about a thing
[15:20:58] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 260 seconds)
[15:21:02] <nedbat> ArtfulDodger: there must be dozens of decorator tutorials out there
[15:22:11] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:24:24] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[15:24:48] *** Joins: teut (~teut@2401:4900:1c30:1de4:f19d:3f97:1aa3:ecb1)
[15:25:04] *** Joins: Sario (uid356235@fosshost/cdo/Sario)
[15:25:52] <ArtfulDodger> nedbat, where is "out there"? When I search for argparse on doc.py.org I can find a nice tuto about argparse https://docs.python.org/3/library/argparse.html , but typing "decorator" does not return such kind of user-friendly tutorial
[15:26:26] <nedbat> ArtfulDodger: i meant the wider internet
[15:26:37] <nedbat> ArtfulDodger: for example: https://realpython.com/primer-on-python-decorators/
[15:27:40] <ArtfulDodger> Yes I know this one, I wish there was an official one from the regular doc nedbat
[15:28:08] <nedbat> ArtfulDodger: isn't it good that many people can write tutorials? Do you not trust it? What would be better about "official"?
[15:29:39] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[15:29:52] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[15:30:55] *** Quits: Terexen (~terexen@user/terexen) (Remote host closed the connection)
[15:31:10] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[15:33:03] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[15:33:07] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 265 seconds)
[15:34:16] *** Joins: guenhael (~Thunderbi@2a01cb008c3d5800edab6860692d0c69.ipv6.abo.wanadoo.fr)
[15:34:55] *** Joins: matkor (~matkor@ns0.ant.gliwice.pl)
[15:35:32] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:08] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[15:36:24] *** Joins: learjet60xr (~Chris@115x125x63x225.ap115.ftth.ucom.ne.jp)
[15:36:28] <learjet60xr> hello
[15:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:51] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:37:46] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[15:38:06] *** Quits: parv (~quass@user/parv) (Quit: parv)
[15:38:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:39:55] <learjet60xr> I wrote this py script for a discord bot, https://controlc.com/c246b580 and the problem am facing is that the threads are running endlessly unless a user completes the process, how can I make the threads to exit out properly or close automatically?
[15:40:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:40:50] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[15:41:18] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Read error: Connection reset by peer)
[15:42:18] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[15:42:43] <nedbat> ArtfulDodger: would you be ok with the realpython tutorial if the python docs pointed you to it?
[15:43:22] *** Joins: Jong (~Jong@2620:10d:c090:400::5:3f74)
[15:43:45] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[15:44:44] <Jong> Hello. Is there any naming conventions for simple list comprehensions like this: X = [t.half() for t in X]
[15:44:47] <learjet60xr> yes that would be fine if you have an example to go with it
[15:45:12] <Jong> I don't think underscore is the proper convention there, because underscore means "not used" usually
[15:45:40] <bjs> Jong: it's just a list,  use the same name you'd use if it was a list without the comprehension
[15:45:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:45:55] <Jong> bjs  I don't know what I'd use. "element" ?
[15:45:57] <ArtfulDodger> nedbat, it's fine, this is off-topic. I was just asking if you knew a page from doc.py.org that explains the creation of decorators well.
[15:45:57] <bjs> there is no special convention for naming things that happen to be comprehensions,  just treat it like a any other normal variable
[15:45:59] *** Joins: tmus (~tmus@cust-185-157-203-2.nanoqnet.gl)
[15:46:07] <bjs> Jong: oh you mean the naming convention for `t` ?
[15:46:15] <Jong> X = [item.half() for item in X]
[15:46:22] <bjs> Jong: what is "X"?  `[book.title() for book in library]`
[15:46:24] <Jong> bjs  yes that's my question
[15:46:24] <nedbat> ArtfulDodger: it's not off-topic, i'm interested in how people learn things, and in how they use the python.org docs
[15:46:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:46:40] <Jong> bjs X is a numpy array or a pytorch array
[15:46:43] <nedbat> ArtfulDodger: and I'd like to help you understand decorators
[15:46:58] <bjs> Jong: okay but my little book example is to show that the best name depends on the context
[15:47:11] <bjs> book is a good name for my comprehension, but it might be a bad name for yours.
[15:47:43] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:47:47] <Jong> I was hoping there's a common conventional name that's very general, not tied to variable type or context
[15:47:51] <bjs> Jong: so ideally you'd call it by a name that makes the most sense in that context.  You can use `i` or `index` (if it's an index) or a `elem` or `x` or whatever if it's just an arbitrary element if you want. Just treat it like it was a normal for loop
[15:47:54] <Jong> just as _ is very general
[15:48:02] <bjs> Jong: i mean the convention is that you name things descriptively
[15:48:14] <bjs> _ is special because you don't care what it is
[15:48:53] *** Joins: Achylles (~Achylles_@2804:431:d725:5f74:726:267b:60a8:3cf6)
[15:49:09] <Jong> it looks like you answered my question. There isn't a conventional variable name that's very general in usage
[15:49:31] <bjs> Jong: correct, even the "general" names like `i` and `x` are context-dependent.
[15:49:37] <learjet60xr> so any chance to get some help with the threads issue?
[15:49:45] <learjet60xr> am new to python
[15:50:09] <Jong> I don't like 'i' because i in many languages is the indexing variable, not the value stored at the index
[15:50:23] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:50:24] <Jong> so i is a number
[15:50:29] <Jong> elem it is
[15:50:46] <bjs> Jong: exactly, it's context-dependent. if the elements are indexes of some kind you can call them "i"
[15:50:51] <Jong> actually, maybe "elem" is general name I'm looking for
[15:50:56] <ArtfulDodger> nedbat, ah, well in that case yes I use many tutorials from everywhere every day but I also like to intersect these to the official doc. My mind probably gives more credit to doc.py.org rather than other web resources. I expect doc.py.org to be up-to-date regarding the last recommandations so I would give more credit to it rather than other resources.
[15:51:07] *** Joins: Sadale (~Sadale@user/sadale)
[15:51:33] <Jong> in python world, I'm used to elements being "items"
[15:51:33] <nedbat> ArtfulDodger: cool, so if the docs said, "Here is a good decorator tutorial: [link]", that would be good?
[15:51:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:52:07] <jinsun> ArtfulDodger: the "official" docs have this https://docs.python.org/3/glossary.html#term-decorator, and it links to the function and class definition pages for more details, though none of those are in tutorial format I guess
[15:52:10] <grawity> I usually use something that vaguely relates to the actual item, e.g. [v.lower() for v in values] or [el.href for el in elements] or [p.basename for p in paths]
[15:52:13] *** vinnix_ is now known as vinnix
[15:52:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:52:30] <Jong> grawity  haha I do that too!
[15:52:33] <ArtfulDodger> nedbat, I would expect the tutorial to be hosted there, but that would be a good start yes :)
[15:52:37] <bjs> grawity: yeah, that's good
[15:52:52] <Jong> grawity but is it professional to do that? I thought it was me being unprofessional, lazy, and sloppy
[15:52:53] <bjs> ArtfulDodger: well other people can write tutorials too, not just the official devs
[15:52:58] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:ea7c:d501:4d7f:5be3)
[15:53:07] <bjs> Jong: why is it lazy and/or sloppy?
[15:53:44] <Jong> bjs the lazy/sloppy thing is that the name was picked simply because it's the first letter of the list variable.
[15:54:03] <bjs> Jong: that's not the reason
[15:54:08] <bjs> `for p in list_of_paths` for example
[15:54:38] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (Quit: Leaving)
[15:54:39] <grawity> that's how abbreviations work
[15:54:45] <bjs> Yeah
[15:54:45] <Jong> the issue is when the list variable is a single character, then that doesn't work
[15:54:47] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[15:55:00] <grawity> then maybe the list variable shouldn't be a single character
[15:55:07] <Jong> good point
[15:55:08] <bjs> Jong: again it's not about the list variable name, it's about it being a short descriptive abbreviation
[15:55:18] <grawity> (the point isn't "first letter", but "extremely abbreviated name for a single item")
[15:55:44] <grawity> so like, no matter what the list contained – or whether it even was a list or not – if it contains paths, 'p' means it's one path.
[15:56:02] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[15:57:39] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[15:57:52] <ArtfulDodger> bjs, as soon as the PSF has the control of the thing that hosts some information I think it gives that thing a higher credit even if some content there can be redacted by regular users or can contain mistakes
[15:58:32] <bjs> ArtfulDodger: but the PSF does not "control" a third-party tutorial just because it links to it
[15:59:42] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:00:02] <ArtfulDodger> bjs, no but it controls the link itself. If it decides that this tuto is now trash it can drop the link or add a mention stating that the tuto is outdated.
[16:00:35] *** Joins: Sadale (~Sadale@user/sadale)
[16:00:45] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:e9cf:10dc:1489:60d6) (Quit: smeeagle)
[16:00:53] *** Quits: grundrausch3n (~grundraus@p200300e9ef0a82009c87fcc08caac64f.dip0.t-ipconnect.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:01:20] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:01:26] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:e9cf:10dc:1489:60d6)
[16:03:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[16:03:05] *** Joins: zalt (~zalt@user/zalt)
[16:03:42] <bjs> ArtfulDodger: so you're saying it would be better if docs.python.org/ linked to the realpython tutorial saying "we have read this, it is good stuff"
[16:03:55] <bjs> or well, "better" I mean you would trust it more?
[16:04:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:04:42] *** Quits: nomic (~nomic@51.52.78.152) (Quit: Leaving)
[16:05:06] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[16:05:34] *** Quits: learjet60xr (~Chris@115x125x63x225.ap115.ftth.ucom.ne.jp) (Quit: Client closed)
[16:05:59] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:e9cf:10dc:1489:60d6) (Ping timeout: 265 seconds)
[16:05:59] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 256 seconds)
[16:06:11] *** Quits: thevishy (~Nishant@2405:201:f005:c007:49c7:f8b1:7727:93e) (Ping timeout: 250 seconds)
[16:06:32] *** Joins: gusto (~Augustus@109.255.100.54)
[16:06:36] *** Joins: AsenMx (~AsenMx@user/asenmx)
[16:06:47] *** Quits: Achylles (~Achylles_@2804:431:d725:5f74:726:267b:60a8:3cf6) (Remote host closed the connection)
[16:09:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[16:10:00] <ArtfulDodger> bjs, yes. This is the same mechanism that applies if a friend that you trust recommands you a good restaurant. It is still possible that the cooker puts some poor quality ingredients in your meal but you would trust it more at first sight :)
[16:10:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:11:31] <Yhg1s> ArtfulDodger: plot twist: the PSF doesn't control the documentation at all. It's all down to volunteers, and the PSF does no directing or exert any control at the moment.
[16:12:15] *** Quits: Tripple_U (~Tripple_U@dslb-090-186-117-240.090.186.pools.vodafone-ip.de) (Quit: Client closed)
[16:12:50] *** Joins: cdown (~cdown@163.114.131.1)
[16:15:03] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[16:15:10] <ArtfulDodger> Yhg1s, of course reviewing can give even more credit but I am not talking about reviewing, only control. The PSF owns python.org, it may decide to drop all content for no reason, to introduce reviewing to improve quality or anything else, it controls it.
[16:15:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:15:37] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:15:48] *** Joins: thiras (~thiras@user/thiras)
[16:15:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:15:59] <Yhg1s> ArtfulDodger: no, really, the PSF doesn't actually control the content. All it could do is drop the domain entirely.
[16:16:11] *** Quits: VaniaPy (~VaniaPy@46.12.245.39.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[16:16:58] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:ea7c:d501:4d7f:5be3) (Ping timeout: 260 seconds)
[16:17:28] *** Joins: shad (~shad@user/shad)
[16:18:38] *** Quits: PixelRobot (~PixelRobo@users2.mapama.es) (Quit: PixelRobot)
[16:18:45] <ArtfulDodger> Yhg1s, what if it redirects the domain to another web server? It is just a metter of vocabulary I guess, I make a difference between "having the control" (which includes delegation to volunteers) and "reviewing"
[16:19:28] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:20:08] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[16:21:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:21:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:22:02] *** Quits: guenhael (~Thunderbi@2a01cb008c3d5800edab6860692d0c69.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:24:14] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:24:37] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[16:24:43] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[16:25:48] *** Joins: pyzozord (pyzozord@user/pyzozord)
[16:26:09] <pyzozord> is it a good idea to use id() to keep a set of visited nodes?
[16:26:15] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[16:26:55] <bjs> pyzozord: can't you just put the nodes themselves in the set?
[16:26:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:27:04] *** Joins: zalt_ (~zalt@user/zalt)
[16:27:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:27:34] <bjs> id() is problematic as any guarantees it gives you about identifying objects is not true over time (as objects are born and other objects die)
[16:28:48] <pyzozord> oh I guess I could do that
[16:28:57] <pyzozord> I mean I already have a 2d array of the nodes
[16:29:03] <pyzozord> and heap of these nodes
[16:29:13] <pyzozord> I double checked both data structures reference the same nodes
[16:29:22] <pyzozord> I guess I can also have a set that references the same nodes
[16:29:23] *** Joins: grundrausch3n (~grundraus@p200300e9ef0a82009c87fcc08caac64f.dip0.t-ipconnect.de)
[16:29:30] <bjs> pyzozord: yeah
[16:29:35] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 250 seconds)
[16:29:46] *** zalt_ is now known as zalt
[16:29:58] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:32:13] *** Joins: node1 (~hex@user/node1)
[16:32:15] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[16:33:48] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:33:54] *** Joins: guenhael (~Thunderbi@193.52.208.98)
[16:34:17] <node1> List is nothing but C wrapper of linked list?
[16:34:37] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[16:34:47] <bjs> node1: no it is not
[16:35:13] <bjs> node1: Python types aren't "wrappers" around C types at all; they are their own thing.  Inside a Python list is a C array
[16:35:14] *** Quits: tmus (~tmus@cust-185-157-203-2.nanoqnet.gl) (Quit: Textual IRC Client: www.textualapp.com)
[16:35:35] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (Ping timeout: 252 seconds)
[16:36:33] <node1> C array meant it's object.
[16:36:35] <bjs> but that doesn't mean a Python list *is* a C array, or even a "wrapper" around it
[16:36:40] <bjs> node1: what do you mean?
[16:36:57] *** Quits: guenhael (~Thunderbi@193.52.208.98) (Client Quit)
[16:37:17] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[16:37:37] *** Joins: vsantana (~Thunderbi@fttx-177136149239.usr.predialnet.com.br)
[16:38:11] *** Quits: teut (~teut@2401:4900:1c30:1de4:f19d:3f97:1aa3:ecb1) (Ping timeout: 256 seconds)
[16:38:14] *** Joins: tmus (~tmus@cust-185-157-203-2.nanoqnet.gl)
[16:38:36] <bjs> node1: Python has objects, but C doesn't have objects.  (at least not what Python means by object)
[16:38:36] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[16:38:45] *** Joins: moose` (~moose@user/moose)
[16:39:17] *** Joins: mat001 (~mat001@c-71-202-248-117.hsd1.ca.comcast.net)
[16:39:25] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Remote host closed the connection)
[16:39:34] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:40:25] *** Quits: lethu (~lethu@user/lethu) (Read error: Connection reset by peer)
[16:41:08] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:6da9:d334:4fce:a8fc)
[16:41:13] <node1> bjs, okay.
[16:41:36] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:41:43] <nedbat> node1: in C terms, a Python list is an array of PyObject*, plus some metadata like the length.
[16:41:50] <node1> I'm just trying to understand that how a time complexity is been derived for higer level programming
[16:42:09] <bjs> node1: https://github.com/python/cpython/blob/main/Include/cpython/listobject.h#L5  here is the actual C struct that defines a Python `list` object in the (C)Python interpreter
[16:42:17] <node1> In general we calculate a time complexity in terms of our code with data.
[16:42:17] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:42:36] <bjs> node1: Python lists have O(1) append/pop operations.
[16:42:55] <bjs> well pop-from-end
[16:43:04] <node1> yes agree. that's what the code do with the data.
[16:43:06] <bjs> and O(1) indexing
[16:43:39] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 252 seconds)
[16:45:19] *** Joins: lethu (~lethu@user/lethu)
[16:45:38] <node1> bjs, okay thank you.
[16:45:46] <node1> nedbat, thank you
[16:46:19] <Zweimer> Hey. I would like to learn something about software testing (pytest, pytest-qt, QTest, qtbot, ..) and thought of doing some testing (unit test, integration tests) on a random sample project (with a gui), which isn't super silly to write actuall tests for. Do you guys have an idea what sample project I could program to be able to apply a
[16:46:20] <Zweimer> sence-making testing process on it? (Rather nothing web-based and must include a GUI)
[16:46:43] <nedbat> Zweimer: the classic gui starter is a calculator
[16:46:50] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[16:47:23] <Zweimer> Right. Yeah, that is actually a good idea.
[16:48:00] <Zweimer> I like this one. Thanks :)
[16:48:12] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[16:48:38] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:49:10] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:ec5d:affc:32ec:33c7) (Ping timeout: 260 seconds)
[16:49:20] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[16:50:13] *** Quits: grundrausch3n (~grundraus@p200300e9ef0a82009c87fcc08caac64f.dip0.t-ipconnect.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:50:21] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 245 seconds)
[16:51:34] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[16:52:01] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[16:52:33] *** Joins: iflema (~ian@user/iflema)
[16:53:32] *** Quits: iomari891 (~iomari891@197.210.52.156) (Ping timeout: 240 seconds)
[16:56:30] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[16:57:44] <abelvesa> can I cancel a sys.stdin.read from another thread ?
[16:58:03] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:58:25] *** Joins: Spaceflight (uid423739@id-423739.ilkley.irccloud.com)
[16:58:34] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:58:45] *** Joins: darksun (~darksun@user/darksun)
[16:59:06] <bjs> abelvesa: you can signal.pthread_kill it probably?  but generally it's quite hard to interrupt a Python thread doing some work
[16:59:09] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[16:59:32] <Yhg1s> No, no, no. Never use pthread_kill. It's going to completely screw up the process.
[16:59:44] <abelvesa> bjs: don't want to kill the thread
[16:59:49] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[16:59:50] <Yhg1s> You can't interrupt another thread. You have to use non-blocking I/O instead.
[17:00:11] <bjs> Yhg1s: pthread_kill is the only way to interrupt a running system call in another thread.  (But yes, I agree.)
[17:00:28] <Yhg1s> bjs: yeah, but Python doesn't expect signals to be delivered to anything but the main thread :)
[17:00:44] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[17:00:48] *** Quits: darksun (~darksun@user/darksun) (Client Quit)
[17:01:12] <abelvesa> basically, I have a thread that does: while True: c = sys.stdin.read()
[17:01:39] <abelvesa> actually, there is more
[17:01:52] *** dcaro is now known as dcaro_afk
[17:01:55] *** Joins: georgios (~georgios@user/georgios)
[17:02:23] <bjs> abelvesa: that loop looks a bit broken, read() will read the entire thing at once.
[17:02:27] <bjs> Do you want to read a line at a time?
[17:02:33] <bjs> or something (?)
[17:02:48] <Jong> Suppose we have an if elif statement. Do you make the conditional with the shorter body first, or the conditional with the larger body first?
[17:03:25] <bjs> Jong: it's not about which is longer it's about which makes sense and the other context.
[17:03:40] <abelvesa> something like: while flag is not set, read one char at the time
[17:03:41] <Jong> suppose everything else equal
[17:03:48] <bjs> Jong: if for example the condition is for an error state or an early-exit, then you might just drop the "elif" entirely
[17:04:06] <abelvesa> when the flag gets set from a different thread, I want to stop the sys.stdin.read()
[17:04:18] <abelvesa> and do something else
[17:05:14] *** Joins: moose`` (~moose@user/moose)
[17:05:15] <Jong> if (){...} else {..............................}. verses if (){..............................} else {....}
[17:05:18] <bjs> Jong: you seem to expect there are universal conventions that apply regardless of context but that's not how the conventions work.
[17:05:22] *** Quits: moose` (~moose@user/moose) (Read error: Connection reset by peer)
[17:05:30] <bjs> Jong: if all else is equal, then surely it doesn't matter
[17:06:10] <Yhg1s> abelvesa: really, use non-blocking I/O instead. You can't interrupt the thread. Not even with pthread_kill, except to terminate it (which terminates the process, not the thread). You can't even get sys.stdin.read() to raise InterruptedError, because it will automatically restart the read.
[17:06:48] <Jong> I thought it would boil down to readability, and people would think the largest body last would be easier to view
[17:06:53] <abelvesa> Yhg1s: right
[17:06:56] <bjs> abelvesa: You can read 1 character with read(1) then check the flag
[17:07:11] <Yhg1s> bjs: it will still block, though.
[17:07:31] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 250 seconds)
[17:07:39] <abelvesa> Yhg1s: yep
[17:08:02] *** Joins: Enitin (~Enitin@82.102.22.85)
[17:08:02] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:1b9c:d4d6:c8fb:c24f) (Remote host closed the connection)
[17:10:38] <abelvesa> Yhg1s: what would be the non-blocking alternative for sys.stdin.read() ?
[17:10:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[17:11:48] *** Joins: superboot (~agentgasm@user/superboot)
[17:12:30] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 260 seconds)
[17:12:44] *** Quits: SeeM (~SeeM@153.ip-54-38-53.eu) (Read error: Connection reset by peer)
[17:13:00] *** Joins: fikran (~fikran@user/fikran)
[17:14:11] *** Joins: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[17:14:52] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:15:12] *** Joins: SeeM (~SeeM@153.ip-54-38-53.eu)
[17:15:45] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[17:16:44] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:2076:bcf:219a:64f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:17:02] *** Quits: Portugol9 (~Portugol9@user/portugol9) (Ping timeout: 240 seconds)
[17:17:52] *** Joins: darksun (~darksun@user/darksun)
[17:19:32] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[17:20:39] *** Joins: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8)
[17:21:07] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Quit: KvL)
[17:21:12] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:21:29] *** Quits: darksun (~darksun@user/darksun) (Client Quit)
[17:25:14] *** Joins: zalt (~zalt@user/zalt)
[17:27:06] *** Quits: wlemuel (~user@210.22.124.110) (Read error: Connection reset by peer)
[17:27:25] *** Joins: wlemuel (~user@210.22.124.110)
[17:28:22] *** Joins: zoraj (~zoraj@209.126.81.159)
[17:29:24] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:29:26] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:8811:993d:f93b:cf41)
[17:29:29] *** Quits: node1 (~hex@user/node1) (Quit: Leaving)
[17:29:38] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:30:02] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:30:05] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 265 seconds)
[17:30:25] *** Joins: VaniaPy (~VaniaPy@46.12.245.39.dsl.dyn.forthnet.gr)
[17:30:42] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:30:59] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[17:31:39] *** Joins: junebug (~junebug@2600:1700:3db0:2540:4dbe:37da:83de:ba5b)
[17:32:15] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:1940:9460:cddf:2551)
[17:33:36] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[17:33:53] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[17:34:28] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[17:34:39] <Yhg1s> abelvesa: it's a regular file (or pipe), so you can toggle it with os.set_blocking. However, dealing with a non-blocking file can be annoying, so I would usually recommend switching to something like asyncio or trio or twisted and let them take care of it for you. Also, if you're expecting sys.stdin to be connected to a terminal (which will be in line-buffered mode), you can probably just cheat and use
[17:34:39] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:34:43] <Yhg1s> select.select() and sys.stdin.readline() instead.
[17:35:53] *** Joins: darksun (~darksun@user/darksun)
[17:36:05] *** Quits: junebug (~junebug@2600:1700:3db0:2540:4dbe:37da:83de:ba5b) (Ping timeout: 252 seconds)
[17:37:18] *** Joins: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[17:37:40] *** Joins: tobybl_ (~tobybl@213.31.132.151)
[17:37:55] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 252 seconds)
[17:38:02] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[17:39:18] *** Joins: bloody (~bloody@user/bloody)
[17:40:03] *** Quits: tobybl (~tobybl@213.31.132.151) (Ping timeout: 256 seconds)
[17:41:05] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 250 seconds)
[17:41:50] *** Joins: nomic (~nomic@51.52.78.152)
[17:42:19] *** Quits: jpodivin (~jpodivin@cgnat44-pool1-236-177.poda.cz) (Ping timeout: 256 seconds)
[17:43:18] *** Quits: csmiga (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net) (Quit: csmiga)
[17:43:33] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[17:43:53] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:44:09] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[17:44:35] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:45:50] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:46:31] *** Quits: _moep_ (~moep@user/moep/x-3358975) (Ping timeout: 250 seconds)
[17:46:36] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 245 seconds)
[17:47:27] *** Joins: Payam (~Payam@138.106.57.132)
[17:48:02] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[17:48:16] <Payam> Hi is there a way to tell linux to run the pytest inside the virtual environment instead of the one in the .local?
[17:48:37] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[17:49:03] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:49:14] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[17:49:24] <phy1729> Use    venv/bin/pytest ...   instead of   pytest ...   works iirc
[17:53:39] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[17:54:36] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[17:55:38] <bailsman> I have two arrays, one integer and one boolean. Is there a concise way to get all elemens from A where the corresponding element from B is true?
[17:55:51] <bailsman> again, easy to code manually but wondering if there's a standard library/numpy/scipy function for this
[17:55:59] *** Quits: tobybl_ (~tobybl@213.31.132.151) (Remote host closed the connection)
[17:56:03] *** Joins: zeden (~zeden@user/zeden)
[17:56:15] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:56:45] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[17:57:16] *** Joins: monkey_ (~user@181.114.17.106)
[17:57:22] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189)
[17:57:32] <bjs> bailsman: [a for (a, b) in zip(A, B) if b]   this is the "manual" way,  I'm not sure the libraries can make it much better
[17:57:37] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Read error: Connection reset by peer)
[17:58:04] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:58:08] *** Quits: weedmic (~weedmic@5.102.235.240) (Quit: Konversation terminated!)
[17:58:49] *** Joins: timkofu (~timkofu@user/timkofu)
[17:58:54] <timkofu> Hi
[17:59:11] <pyzozord> can I self reference inside list comprehension?
[17:59:31] <jinsun> bailsman: if they are numpy arrays you can just do int_array[bool_array]
[17:59:39] <pyzozord> meaning can i do fibonacci sequence in list comprehension?
[18:00:01] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[18:00:05] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[18:00:09] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:00:46] <bjs> pyzozord: no
[18:00:49] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 250 seconds)
[18:01:02] <hexa-> x = [1, 2]
[18:01:08] <hexa-> eh
[18:01:13] <hexa-> x = [1, 1]
[18:01:25] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:01:39] <hexa-> [x[n-1] + x[n-2] for k in range (2, 1000)]
[18:01:41] <bailsman> jinsun: perfect! Can't believe it was s oeasy
[18:01:45] <deniska> pyzozord: there's probably some way to abuse :=, but please just write a for-loop instead
[18:01:46] *** Joins: luigibu (~luigi@80.30.201.209)
[18:02:09] <bjs> hexa-: you use n in the index, but k in the loop, but either way x only has 2 things in it
[18:02:32] <hexa-> well
[18:02:34] <hexa-> k = n :)
[18:02:54] <bjs> isn't it just an IndexError at k=3 then?
[18:02:57] <hexa-> it is
[18:03:10] <hexa-> because it is fully evaluated
[18:03:12] <hexa-> then written
[18:03:13] *** Quits: tmus (~tmus@cust-185-157-203-2.nanoqnet.gl) (Quit: Textual IRC Client: www.textualapp.com)
[18:03:25] <hexa-> you could do
[18:03:52] <hexa-> [x.append(x[n-1]+x[n-2]) for x in range(2, 2000)]
[18:04:13] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[18:04:29] <pyzozord> yeah that's not reall a comprehension
[18:04:30] <hexa-> lol, it's just funny to toy around
[18:04:36] <hexa-> yeah, it's not really possible
[18:04:39] <pyzozord> the main result is the side effect
[18:05:01] <pyzozord> ok, "not possible cleanly" is a possible answer
[18:05:04] *** Joins: zeden (~zeden@user/zeden)
[18:05:07] <hexa-> yep
[18:05:31] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[18:05:32] <pyzozord> I have another question, do I need to really need to call heapq.heapify for the entire list each time I update single element's value on that list?
[18:05:39] <bjs> I think pyzozord wanted something like a Haskell'y `let x = 1 : 1 : zipWith (+) x (rdrop 1 x)`
[18:05:45] <pyzozord> that kind of defeats the purpose of the binary heap
[18:06:00] *** Joins: Omega037 (~Omega037@047-233-057-109.res.spectrum.com)
[18:06:00] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[18:06:13] <bjs> pyzozord: well if you do some operation that isn't a heap operation that breaks the heap invariant then yes
[18:06:40] <pyzozord> well not true
[18:06:45] <bjs> pyzozord: what's not true?
[18:06:55] <pyzozord> it could just bubbple up and update all dependinng things
[18:07:03] <pyzozord> it doesn't need to scan the entire array again
[18:07:37] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 252 seconds)
[18:09:56] <bjs> pyzozord: if you know the exact way in which you broke the invariant, then you could perhaps do something more clever to fix it yes
[18:10:30] <bjs> but heapq doesn't, heapq says "here's a function that makes sure the list is a valid heap, and here are some heap operations" if you do other things that break that invariant it's up to you to fix it again (either manually or by calling heapify)
[18:10:32] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[18:10:33] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 252 seconds)
[18:10:49] *** Quits: aniketgm (~Aniket@49.36.109.129) (Read error: Connection reset by peer)
[18:10:54] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:11:34] *** Joins: zalt (~zalt@user/zalt)
[18:13:43] *** JoelJoel is now known as Joel
[18:14:13] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[18:14:16] *** Quits: Naan (~Naan@user/naan) (Read error: Connection reset by peer)
[18:16:09] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:16:24] <phy1729> s = [0, 1]   ((s := s[1:])[0] for _ in range(20) if s.append(sum(s)) or True)
[18:16:30] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[18:16:44] <phy1729> pyzozord: ^
[18:16:51] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 250 seconds)
[18:17:11] *** Joins: sudomann (~sudomann@98.219.211.182)
[18:17:39] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:17:49] <d3x> This works, but please don't ever do that in real code: x, y, z = 0, 1, 1; [(x := y, y := z, z := x + y)[0] for _ in range(10)]
[18:17:56] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[18:18:20] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[18:18:56] *** Joins: magla (~gelignite@55d4970c.access.ecotel.net)
[18:19:43] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[18:20:08] <SnoopJ> oh dear
[18:20:21] *** Joins: c10l7 (~c10l@user/c10l)
[18:21:29] *** Joins: jpodivin (~jpodivin@cgnat44-pool3-70-113.poda.cz)
[18:21:38] *** Quits: raxor2k (~raxor2k@78.158.254.179) (Remote host closed the connection)
[18:23:03] <phy1729> Don't even need walrus, can just s.pop(0)
[18:23:05] <grym> d3x: help help i need an adult
[18:23:34] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[18:23:35] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 256 seconds)
[18:23:35] *** c10l7 is now known as c10l
[18:23:45] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 252 seconds)
[18:24:21] *** Joins: Enitin (~Enitin@82.102.22.85)
[18:25:16] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:26:41] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi)
[18:27:08] *** Joins: earthbre- (~earthbrea@li778-229.members.linode.com)
[18:28:16] *** Quits: kehn (quassel@2600:3c03::f03c:92ff:fe9a:ad08) (Ping timeout: 245 seconds)
[18:28:34] *** Quits: sharksauce (sharksauce@user/sharksauce) (Ping timeout: 260 seconds)
[18:28:36] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (Ping timeout: 268 seconds)
[18:28:36] *** Quits: hays (rootvegeta@fsf/member/hays) (Ping timeout: 268 seconds)
[18:28:45] *** Joins: h_ (~rootveget@fsf/member/hays)
[18:30:19] *** Joins: sharksauce (~sharksauc@user/sharksauce)
[18:30:39] *** Joins: moogs (~moogs@12.146.254.146)
[18:31:18] *** Joins: junebug (~junebug@2600:1700:3db0:2540:cdd6:4599:a811:6adc)
[18:31:32] <moogs> What is the best application to write Python code in on Windows 10?
[18:32:22] <phy1729> That depends a lot on your personal preferences. Personally I like WSL2 and then my normal *nix tools.
[18:32:34] <d3x> phy1729, combining the two: s = [1, 1]; [(s.append(sum(s)), s.pop(0))[1] for _ in range(20)]. Not sure which one I hate the least...
[18:32:37] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Quit: beli6147)
[18:33:01] *** Joins: moog (~moog@107.126.53.121)
[18:33:02] <phy1729> I like getting rid of the or True
[18:33:19] <phy1729> Though for a lazy language that wouldn't work
[18:33:37] <phy1729> Is tuple evaluation guarenteed to be in order?
[18:34:13] <d3x> I would think so, but I can't say for sure
[18:34:14] <grym> moogs: there's no "best", but i'd recommend trying either pycharm or vscode, both of which have perfectly sensible windows experiences
[18:34:25] <bjs> moogs: PyCharm and VSCode are popular editors
[18:34:32] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[18:35:13] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[18:35:24] *** Quits: timkofu (~timkofu@user/timkofu) (Remote host closed the connection)
[18:36:13] *** Joins: xkuru (~xkuru@user/xkuru)
[18:36:38] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[18:37:02] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 240 seconds)
[18:38:06] <phy1729> The combination of append and pop in a generator makes me think of a rail cart with someone laying track at the front and picking it back up and resuing it at the rear for an infinately long track
[18:38:47] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 252 seconds)
[18:40:10] *** Quits: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8) (Quit: Leaving)
[18:40:16] *** Joins: skipper (~whatsupbo@user/scobydoo)
[18:40:37] *** Quits: junebug (~junebug@2600:1700:3db0:2540:cdd6:4599:a811:6adc) (Ping timeout: 252 seconds)
[18:41:23] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:41:44] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[18:41:49] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:41:49] <deniska> phy1729: no, that's collections.deque with append and popleft
[18:42:51] *** Joins: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd)
[18:43:20] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-905f-a794-ab8e-4d9a.res6.spectrum.com)
[18:44:39] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[18:45:24] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[18:48:29] *** Quits: grooverman (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[18:49:48] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[18:49:57] *** Joins: akk (~akk@174-28-122-47.albq.qwest.net)
[18:51:43] *** Joins: grooverman (~grooverma@177.102.117.95)
[18:51:44] *** Quits: vladoski (~foo@2001:b07:add:d406:58ab:be6f:8e3e:5dfd) (Quit: Textual IRC Client: www.textualapp.com)
[18:51:58] *** Quits: irrgit (~irrgit@192.241.175.183) (Remote host closed the connection)
[18:54:39] *** Quits: delvian (~delvian@41.13.194.9) (Quit: Leaving)
[18:55:50] *** Joins: zalt (~zalt@user/zalt)
[18:56:07] <pyzozord> is there a "defaultlist" in python?
[18:56:09] *** Quits: grooverman (~grooverma@177.102.117.95) (Read error: Connection reset by peer)
[18:56:25] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[18:56:27] <grym> pyzozord: no
[18:56:28] <moogs> Are there any cool tools to run reports within AD?
[18:56:46] <Swayze>  how would that even work
[18:56:49] <Swayze> re defaultlist
[18:56:49] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[18:56:54] <grym> pyzozord: just .append() what you need
[18:57:11] <grym> preallocation is common in numpy arrays, but almost nowhere else
[18:57:16] <SnoopJ> or use a mapping
[18:57:22] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:58:00] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[18:58:02] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[18:58:41] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[18:58:48] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[18:58:53] *** Quits: rk4 (~r@user/rk4) (Ping timeout: 250 seconds)
[18:58:55] *** Joins: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26)
[18:59:41] *** Quits: julia (~quassel@user/julia) (Ping timeout: 252 seconds)
[18:59:49] *** Quits: SuperL4g (~akulbe@user/superlag) (Ping timeout: 240 seconds)
[19:00:02] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 240 seconds)
[19:00:13] *** Quits: wlemuel (~user@210.22.124.110) (Remote host closed the connection)
[19:01:20] *** Joins: delvian (~delvian@41.13.194.9)
[19:01:43] *** Joins: SuperLag (~akulbe@user/superlag)
[19:01:48] *** Joins: grooverman (~grooverma@177.102.119.40)
[19:02:01] *** Joins: dez (uid92154@user/dez)
[19:02:13] *** Joins: grundrausch3n (~grundraus@p200300e9ef0a82009c87fcc08caac64f.dip0.t-ipconnect.de)
[19:02:27] *** Joins: julia (~quassel@user/julia)
[19:03:13] *** Quits: phillhoc1ing (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com) (Ping timeout: 250 seconds)
[19:03:41] *** Joins: kiska3 (james@user/kiska)
[19:03:48] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Quit: leaving)
[19:03:55] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[19:04:08] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[19:04:36] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[19:04:49] *** Quits: kiska (james@user/kiska) (Ping timeout: 252 seconds)
[19:05:04] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:05:11] *** Quits: ouemt (~quassel@user/ouemt) (Ping timeout: 265 seconds)
[19:05:40] <sudomann> Getting TypeError: unhashable type: 'list' and I dont know how that's possible, as a list was not passed: https://bpa.st/F7DA
[19:06:41] *** Joins: mikeliuk (~mikeliuk@213.205.198.137)
[19:07:18] *** Quits: julia (~quassel@user/julia) (Ping timeout: 260 seconds)
[19:07:30] *** dcaro_afk is now known as dcaro
[19:07:45] *** Quits: ldlework (~hexeme@user/hexeme) (Ping timeout: 250 seconds)
[19:07:50] *** Joins: daoudr (~daoudr@2a02:1205:c690:ca10:843a:6e21:9631:a11f)
[19:08:00] *** Joins: rsx (~dummy@ppp-188-174-144-140.dynamic.mnet-online.de)
[19:08:29] *** Quits: kiska3 (james@user/kiska) (Ping timeout: 252 seconds)
[19:09:49] <SnoopJ> sudomann, that error looks like `route_specs` is a mapping and `func` is a list, but your paste doesn't show enough of the decorators to really understand how we get from the route you're showing to the code that produced the traceback.
[19:09:55] *** Quits: moog (~moog@107.126.53.121) (Ping timeout: 250 seconds)
[19:10:19] *** Joins: Ilyu (~quassel@78.202.228.230)
[19:11:09] *** Quits: wintrmute (~wintrmute@bit.pappanaka.com) (Ping timeout: 268 seconds)
[19:11:16] *** Joins: julia (~quassel@user/julia)
[19:11:38] <SnoopJ> presumably one of the decorators below exclude() is doing something not-quite-expected. Interleaving @doc and @app strikes me as a little strange and might be related
[19:11:41] <sudomann> hovering over route_specs reveals the following: `(variable) route_specs: defaultdict[Any, RouteSpec]`
[19:12:26] *** Quits: ghostbuster (~admin@user/ghostbuster) (Ping timeout: 265 seconds)
[19:12:32] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 240 seconds)
[19:12:33] *** Joins: zalt (~zalt@user/zalt)
[19:12:37] <sudomann> Thanks for the insights. I'll can ask the devs more specific questions on this
[19:13:39] *** Joins: yac (~user@user/yac)
[19:13:46] *** Quits: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:14:07] <SnoopJ> I would probably try swapping exclude() and route() so that route() is the last decorator applied, but that's just a guess since I don't really know where any of this stuff came from (I'm guessing doc.* is local to this program)
[19:14:26] *** Joins: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26)
[19:16:23] *** Quits: koft (~koft@c-69-255-83-24.hsd1.md.comcast.net) (Remote host closed the connection)
[19:17:06] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 260 seconds)
[19:17:27] *** Joins: ouemt (~quassel@user/ouemt)
[19:18:08] <sudomann> yep it is
[19:18:29] *** Quits: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26) (Client Quit)
[19:19:12] *** Joins: iomari891 (~iomari891@197.210.70.46)
[19:19:46] *** Joins: zalt (~zalt@user/zalt)
[19:20:13] *** Joins: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26)
[19:20:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[19:20:58] *** Joins: _moep_ (~moep@user/moep/x-3358975)
[19:21:15] *** Joins: kiska3 (james@user/kiska)
[19:22:14] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:22:20] *** Joins: fikran (~fikran@user/fikran)
[19:22:21] *** Joins: hexeme (~hexeme@user/hexeme)
[19:22:57] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Read error: Connection reset by peer)
[19:23:02] *** Quits: matkor (~matkor@ns0.ant.gliwice.pl) (Quit: Konversation terminated!)
[19:23:09] <sudomann> huh, after swapping it, the same error occurs, but just with the next route. We have a whole bunch of them with the decorators interleaved in that same manner. Good catch. I wonder why its been working in the past
[19:23:28] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[19:23:32] *** Joins: phillhocking (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com)
[19:23:38] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 260 seconds)
[19:24:05] <SnoopJ> sudomann, it's possible that the return type changed somewhere. Which library does app.route() come from, or is it also part of this application?
[19:24:11] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[19:24:40] <SnoopJ> it sounds like it's currently returning a list, which sounds...weird
[19:24:41] <sudomann> also part of
[19:24:43] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:619c:d1db:5920:bb54)
[19:24:54] <sudomann> I'll take a look at what it does
[19:25:12] *** Joins: rk4 (~r@user/rk4)
[19:25:17] *** Joins: zalt_ (~zalt@user/zalt)
[19:25:26] *** Joins: SuperLag (~akulbe@user/superlag)
[19:25:55] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[19:26:41] <sudomann> I'm sorry i misread its from sanic
[19:26:42] *** Joins: wintrmute (~wintrmute@bit.pappanaka.com)
[19:27:02] <sudomann> smh we have so much useage of "app" throughout this whole module. Sorry
[19:27:10] *** Joins: ghostbuster (~admin@user/ghostbuster)
[19:27:26] *** Quits: zalt_ (~zalt@user/zalt) (Client Quit)
[19:27:50] *** Joins: andyewen (~andyewen@31.124.173.192)
[19:27:50] *** Joins: zalt_ (~zalt@user/zalt)
[19:29:18] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[19:29:39] *** Parts: pyzozord (pyzozord@user/pyzozord) ()
[19:29:54] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Remote host closed the connection)
[19:30:04] *** Joins: minto_ (~mintograd@47.201.5.61)
[19:31:09] *** Quits: whaley (~whaley@2603-6080-a301-33d1-e7f2-dd36-095f-9da6.res6.spectrum.com) (Ping timeout: 250 seconds)
[19:31:25] *** Joins: Naan (~Naan@user/naan)
[19:31:49] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 250 seconds)
[19:31:55] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[19:32:19] *** Quits: zalt_ (~zalt@user/zalt) (Client Quit)
[19:32:38] *** Joins: jfcaron (~jfcaron@192.252.229.166)
[19:32:40] *** Joins: SuperLag (~akulbe@user/superlag)
[19:33:03] *** Quits: minto (~mintograd@47.201.5.61) (Ping timeout: 252 seconds)
[19:33:52] *** Quits: zalt (~zalt@user/zalt) (Quit: WeeChat 3.3)
[19:37:01] <SnoopJ> ahh
[19:38:14] *** Joins: stonkey (~stonkey@user/stonkey)
[19:38:54] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[19:38:59] *** Joins: remote (~self@user/hackers)
[19:39:12] *** Joins: bn_work (uid268505@id-268505.uxbridge.irccloud.com)
[19:40:30] *** Joins: zalt (~zalt@user/zalt)
[19:40:36] <SnoopJ> sudomann, not sure what's going on there, then, sanic's RouteMixin seems to define route() to return a RouteWrapper, which is a callable. It may be one of the other doc wrappers.
[19:41:13] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:41:44] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Client Quit)
[19:41:56] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[19:42:26] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:619c:d1db:5920:bb54) (Ping timeout: 245 seconds)
[19:42:46] *** Quits: lastshell (~lastshell@user/lastshell) (Ping timeout: 260 seconds)
[19:42:49] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[19:43:11] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[19:43:13] *** Joins: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[19:43:19] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[19:43:44] *** Joins: lastshell (~lastshell@user/lastshell)
[19:44:09] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[19:45:28] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[19:46:00] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[19:46:32] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[19:46:55] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 268 seconds)
[19:48:37] *** Quits: zalt (~zalt@user/zalt) (Quit: WeeChat 1.6)
[19:49:06] *** Joins: zalt (~zalt@user/zalt)
[19:49:11] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[19:49:22] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[19:49:37] *** Joins: monkey_ (~user@181.114.17.106)
[19:50:09] *** Joins: execi (~execi@dgs10myjzfmbmmtc2bcct-3.rev.dnainternet.fi)
[19:50:12] *** Quits: zalt (~zalt@user/zalt) (Client Quit)
[19:50:35] *** Joins: zalt (~zalt@user/zalt)
[19:51:13] <execi> hey! my understanding is, if i pass a file object to pillow's save(), it appends the data at the end of the file? i can't find it anywhere in the docs to get the number of bytes written, does that have to be done manually?
[19:52:07] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Quit: This computer has gone to sleep)
[19:52:10] <Helion> i mean, if you have a file object its pretty simple to tell() before and after
[19:52:53] <execi> yeah, i figured as much
[19:52:55] *** Joins: wovixo (~wovixo@128.104.205.49)
[19:54:06] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[19:55:36] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:55:48] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[19:56:28] *** Quits: execi (~execi@dgs10myjzfmbmmtc2bcct-3.rev.dnainternet.fi) (Quit: Client closed)
[19:57:14] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Quit: leaving)
[19:57:41] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (Quit: Leaving)
[19:57:50] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:59:49] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[20:01:23] *** Quits: ArtfulDodger (~ArtfulDod@81.126.81.79.rev.sfr.net) (Quit: Leaving)
[20:01:31] *** Joins: Atque (~Atque@user/atque)
[20:01:53] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[20:02:22] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 260 seconds)
[20:02:24] *** Joins: theprophet (~theprophe@85.114.228.184)
[20:03:15] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[20:03:45] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[20:05:31] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[20:06:26] <mattf> Hi, I am using cairo for the first time, drawing on a gtk window using pygtk, and i am trying to display a svg image properly on a window. I can display it but not set the position. This is the relevant code: http://ix.io/3Ivp. It displays on the top left corder with the svg.render_cairo. cairo_r is my surface. How can i set the x, y position for the Rsvg.Handle object? Thanks.
[20:09:04] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:09:52] *** Joins: aniketgm (~Aniket@49.36.109.129)
[20:12:39] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (Quit: Leaving)
[20:12:56] *** Quits: aniketgm (~Aniket@49.36.109.129) (Client Quit)
[20:13:44] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[20:13:56] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:619c:d1db:5920:bb54)
[20:15:58] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:943d:5b05:e9f7:79b5) (Quit: Leaving)
[20:16:53] *** Quits: grundrausch3n (~grundraus@p200300e9ef0a82009c87fcc08caac64f.dip0.t-ipconnect.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:18:14] *** Quits: VaniaPy (~VaniaPy@46.12.245.39.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[20:18:18] *** Joins: sudomann (~sudomann@98.219.211.182)
[20:18:46] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:619c:d1db:5920:bb54) (Ping timeout: 265 seconds)
[20:20:11] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[20:20:11] *** Quits: daoudr (~daoudr@2a02:1205:c690:ca10:843a:6e21:9631:a11f) (Quit: Leaving)
[20:22:41] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:23:17] *** Quits: apollo13 (apollo13@django/moderator/apollo13) (Quit: ZNC - http://znc.in)
[20:23:18] *** Joins: maryo87 (~Maryo@user/maryo)
[20:24:12] *** Quits: mdw (~root@159.65.86.163) (Ping timeout: 240 seconds)
[20:25:27] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[20:25:30] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[20:26:09] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:619c:d1db:5920:bb54)
[20:26:32] *** Quits: maryo (~Maryo@user/maryo) (Ping timeout: 240 seconds)
[20:27:45] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[20:28:38] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[20:29:00] *** Quits: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:29:36] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[20:29:40] *** Joins: vladoski (~foo@93-47-225-130.ip114.fastwebnet.it)
[20:31:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:31:37] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 250 seconds)
[20:32:19] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 256 seconds)
[20:33:03] *** Quits: nosoul (nosoul@gateway/vpn/protonvpn/nosoul) (Remote host closed the connection)
[20:33:27] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (Ping timeout: 256 seconds)
[20:34:00] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[20:34:19] *** Joins: nosoul (nosoul@gateway/vpn/protonvpn/nosoul)
[20:34:26] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:34:39] *** Joins: kek_ (~kek_@2a02:168:200f:1f10:dcde:2774:1301:baad)
[20:34:40] <kek_> hi
[20:34:57] *** Joins: sudomann (~sudomann@98.219.211.182)
[20:35:25] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[20:35:31] <kek_> if I have foo = 0.0 and bar = 1.0 and a loop that does foo += bar, does memory consumption of foo increase or does it behave like a float in C?
[20:36:40] <rindolf> kek_: i thinkit's a "double"
[20:36:56] *** Joins: monkey_ (~user@181.114.17.106)
[20:37:15] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 250 seconds)
[20:37:19] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:37:40] <kek_> rindolf, I thought single presicion is the default for python. But in the end it doesn't matter for the question :)
[20:37:42] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[20:38:49] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:39:20] *** Quits: Ilyu (~quassel@78.202.228.230) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:39:24] <faceface> hello, I'm probably being stupid, but something is confusing me... I have a string representing 128 characters of hex, which is equivalent to 512 bits. If I write the string as 0xbeef... and assign it to a variable, it's a number (as expected). However, len(hex(n)) is 130, not 128. In contrast, len(bin(x)) is 512 (as expected)
[20:39:29] <faceface> is this me being dumb?
[20:39:32] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 240 seconds)
[20:40:03] *** dcaro is now known as dcaro_away
[20:40:12] <SnoopJ> kek_, `foo += bar` is a synonym for `foo = foo + bar`, so the right-hand side will produce a third float object before assigning it to the name `foo` (removing a reference to the old object)
[20:40:27] <SnoopJ> erm, I think. It might actually be special for floats.
[20:41:21] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 250 seconds)
[20:41:32] <InPhase> kek_: sys.getsizeof(foo)
[20:42:05] <SnoopJ> the size of the actual float shouldn't change in general (but you get few guarantees about this at the language level, it's implementation dependent)
[20:42:11] *** Quits: vladoski (~foo@93-47-225-130.ip114.fastwebnet.it) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:42:36] *** Joins: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26)
[20:42:47] *** Joins: xkuru (~xkuru@user/xkuru)
[20:42:58] *** Quits: kek_ (~kek_@2a02:168:200f:1f10:dcde:2774:1301:baad) (Ping timeout: 260 seconds)
[20:44:34] *** Joins: sudomann (~sudomann@98.219.211.182)
[20:45:07] *** Joins: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-00dc.v6.ethz.ch)
[20:45:09] <kek_> sry dc'd
[20:45:52] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[20:46:43] <faceface> int('0b'+k,2) == int(k,2) # True
[20:46:51] <faceface> len(k) # 510 ????
[20:46:53] *** Joins: velix (~velix@user/velix)
[20:46:55] <faceface> I'm confused
[20:47:03] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 256 seconds)
[20:47:03] *** ayusta is now known as ayustae
[20:47:16] <faceface> k is a binary string if that wasn't obvious
[20:47:49] <velix> I'm not into classes, but I've read that line 28 could also be moved to the "init" stage of a class. That should be more professional. Or is my way also okay? At least: it works. https://bpa.st/3G2Q
[20:47:52] <guardian> hellop
[20:47:54] <faceface> int('0x'+s, 16) == int(s, 16) # True
[20:48:02] <guardian> subprocess.run() has a notion of timeout
[20:48:05] <faceface> len(s) # 128
[20:48:06] <guardian> but can it report the time taken?
[20:48:08] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[20:48:11] <maryo87> Is Python 3.10.0 vulnerable with log4j ?
[20:48:39] <faceface> maryo87: Not as I understand it.. that's a java thing
[20:49:31] <theseb> Does any language have any chance of replacing Python as the most beginner and developer friendly language?  Ruby and Clojure tried and failed.  I can't see any other threats the horizon right?
[20:49:35] <SnoopJ> maryo87, log4j is not part of any Python implementation I'm familiar with (Jython being a possible (very old) exception)
[20:49:51] <faceface> How come a lenght 128 hex string is the same number as a length 512 binary string, but the 0x and 0b seem to be measured differently (as far as I can tell) when using len?
[20:50:04] <InPhase> theseb: Julia is trying to come at Python's data science market share.
[20:50:05] <faceface> theseb: rust ;-)
[20:50:32] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[20:51:10] <faceface> I really don't know what I'm not getting
[20:51:15] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:51:15] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[20:51:19] <InPhase> theseb: Python's place as a beginner language is really only there because it is ALSO broadly useful for the sorts of practical things many beginners might want to do, and thus a reasonable choice for people who will stop at one language.
[20:51:19] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 250 seconds)
[20:51:45] <SnoopJ> faceface, it would really help to see the complete code instead of these snippets that don't tell us what `s` or `k` really are.
[20:51:58] <InPhase> theseb: But from an examination of history it seems inevitable some language will eventually dethrone this.  It just might take a decade or two or three.
[20:51:58] <faceface> SnoopJ: OK
[20:52:26] <SnoopJ> I would probably rate BASIC as more beginner-friendly than Python, but I'm also very biased because it was *my* first language :)
[20:52:36] *** Quits: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:52:49] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:53:02] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[20:53:04] *** Joins: monkey_ (~user@181.114.17.106)
[20:53:17] <InPhase> SnoopJ: BASIC was beginner friendly in the world you and I started in.  :)  Now if you throw BASIC at a beginner they are likely to give up when they see how hard it is to do anything useful or interesting.
[20:53:17] *** Quits: delvian (~delvian@41.13.194.9) (Ping timeout: 256 seconds)
[20:53:20] *** Joins: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26)
[20:53:21] *** Quits: maryo87 (~Maryo@user/maryo) (Ping timeout: 252 seconds)
[20:53:28] <SnoopJ> InPhase, that hasn't been my experience
[20:53:41] *** Quits: rsx (~dummy@ppp-188-174-144-140.dynamic.mnet-online.de) (Quit: rsx)
[20:53:49] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[20:54:18] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:54:50] *** Joins: sudomann (~sudomann@98.219.211.182)
[20:55:00] <SnoopJ> kek_, I double-checked what I said for CPython, and it does call float_add() and create a third intermediate float when performing that addition, just before binding it to the name `foo`
[20:55:33] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 252 seconds)
[20:56:30] *** Quits: lupulo (~lupulo_@128.red-83-35-42.dynamicip.rima-tde.net) (Ping timeout: 260 seconds)
[20:56:58] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[20:58:26] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[20:59:10] <kek_> SnoopJ, I think I dc'd when you said something. In the meantime I managed to figure out what my problem is. Still trying to understand it though :D
[21:00:16] <SnoopJ> kek_, `foo += bar` will make a third float object, it works basically like `foo = foo + bar` does (i.e. it does the addition on the right side first, then stores that under the name `foo`)
[21:00:44] <SnoopJ> in CPython, anyway. It could possibly be different on other implementations, I don't think there's a restriction from defining float.__iadd__() (but CPython doesn't)
[21:00:45] *** Quits: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:00:49] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 265 seconds)
[21:00:58] <kek_> SnoopJ, ah I guess that's just some C thing like with ++i
[21:01:03] *** Quits: stonkey (~stonkey@user/stonkey) (Quit: Leaving)
[21:01:20] <vd> is a == b or c == d the same as (a == b) or (c == d)?
[21:01:28] <kek_> anyway, the problem isn't some addition which I first thought might be. thanks though :)
[21:01:50] <SnoopJ> kek_, names in Python work nothing like variables in C, is the very short answer. More information: https://bit.ly/pynames1
[21:02:18] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[21:03:02] <kek_> So I try to read a HF5 file using h5py. This little bit of code drains my 16gb of memory (the file I read is 8gb but I only read like 6gb of it): https://bpa.st/Y4FQ anyone understand what the issue is?
[21:03:18] <kek_> SnoopJ, yeah I'm still getting used to that. I think I read such tutorials several times, gonna give this one a shot too.
[21:03:32] <faceface> SnoopJ: sorry, I have to go... The fact that it's taking me so long to write shows how confused I am! X-D
[21:03:35] <faceface> bbl
[21:03:36] <kek_> that was kind of my fear, that the addition actually just adds more and more objects to the initial object or something like that.
[21:03:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:04:08] *** Joins: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26)
[21:04:24] <SnoopJ> kek_, well, the object that `foo` used to point at has lost that reference when the assignment is performed, and this likely means it's going to be garbage collected unless somewhere else is holding a reference.
[21:04:24] *** Joins: teut (~teut@2401:4900:1c30:1de4:f19d:3f97:1aa3:ecb1)
[21:05:27] <SnoopJ> kek_, do you get through the entirety of your inner loop before you run out of memory?
[21:05:29] <kek_> SnoopJ, but wouldn't it get garabge collected instantly since ref count is zero?
[21:05:51] <kek_> SnoopJ, yeah - I assumed the memory to be constant after the first iteration of the outer loop but it just keeps going :D
[21:06:18] *** Joins: llanhmod (~personnel@user/domhnall/x-2887755)
[21:06:28] <faceface> SnoopJ: gah... finished it
[21:06:29] <SnoopJ> kek_, probably h5py is creating a new object each time you index into it. I don't know this for a fact, but it would make sense to me.
[21:06:29] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 250 seconds)
[21:06:35] <faceface> https://code.labstack.com/2LQcokX_
[21:06:50] <faceface> Seems hex(n) and bin(n) are somehow different ....
[21:07:10] <kek_> SnoopJ, in my head, h5py is just a wrapper for C and I just think of some pointer that's moved around. haha but that's probably just ignorance.
[21:08:04] <kek_> SnoopJ, thanks for that hint though. I'm currently just reading random documentation hoping I find what I didn't know I was searching. :)
[21:08:38] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[21:08:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:09:06] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Client Quit)
[21:09:36] <SnoopJ> kek_, that's more or less how HDF5 works, it's all offsets into a file, but when you index it, the library can't really know that you want the same object after the first indexing, so you get a new one, is my thinking
[21:09:48] <faceface> bbl
[21:10:46] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:10:57] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Quit: rickybob)
[21:11:29] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[21:11:50] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[21:11:58] *** Quits: grooverman (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[21:12:07] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 250 seconds)
[21:12:39] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[21:13:18] *** Joins: grooverman (~grooverma@177.102.119.40)
[21:13:56] <SnoopJ> kek_, hmm, indexing into a group does seem to produce separate objects, but the underlying data does *not* seem to be duplicated (if I index twice and modify one of the Dataset objects, I see it on the other oen). I'm not sure what to make of that re: memory usage.
[21:14:04] <kek_> SnoopJ, I can't follow you here. What do you mean "the library can't really know that you want the same object after the first indexing"? I mean, I index it which basically translate to an pointer offset, get some data, done?
[21:14:39] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Client Quit)
[21:14:59] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[21:15:02] *** Joins: BSaboia (~bsaboia@177.37.198.227)
[21:15:11] *** Quits: BSaboia (~bsaboia@177.37.198.227) (Read error: Connection reset by peer)
[21:15:23] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 256 seconds)
[21:16:16] *** Quits: trace987 (~trace@ip5b429834.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[21:18:48] <SnoopJ> kek_, if you're getting the data itself, you must copy it to make a Python object (a list of integers, let's say). But I think the library gives you view objects over the same data more often.
[21:20:08] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[21:20:13] <kek_> SnoopJ, In my actual code I turn it into a pytroch tensor and send it to the GPU.
[21:20:38] <SnoopJ> kek_, making a Tensor could well cause a copy.
[21:21:53] *** Quits: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:22:21] <jinsun> faceface: both hex and bin add 2 characters before the string, the hex string is 128 characters long so you get 130 length, the binary one is 510 long so you see 512
[21:22:22] <kek_> SnoopJ, yeah but in the end it doesn't matter because this piece of code I posted reproduces the problem of draining my memory :(. I can use it fine wiht smaller files. Everything works. I just run out of memory.
[21:23:11] <SnoopJ> kek_, if I had the file you're loading (or if your program created the file with dummy data that reproduces the problem) I could possibly say more about it, but I'm not sure what's going on from just what I can see.
[21:23:27] *** Quits: ericlee (~ericlee@2601:647:4681:3420::7) (Remote host closed the connection)
[21:23:57] *** Quits: andyewen (~andyewen@31.124.173.192) (Quit: Leaving)
[21:24:21] *** Quits: rvgate (~rvgate@user/rvgate) (Ping timeout: 256 seconds)
[21:24:24] *** Joins: ericlee (~ericlee@2601:647:4681:3420::7)
[21:24:42] *** Quits: grooverman (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[21:25:03] <kek_> SnoopJ, it's takes me 45min to upload it (8gb). But I can give you code which generates something like it (it's very simple).
[21:25:34] <SnoopJ> it would probably suffice to generate a smaller amount and work out why it's ~doubling
[21:25:50] *** Joins: Betal (~Betal@user/betal)
[21:25:51] *** Joins: grooverman (~grooverma@177.102.117.95)
[21:25:58] *** Joins: MockingMoniker (~MockingMo@ip72-201-253-44.ph.ph.cox.net)
[21:26:45] <MockingMoniker> So, I need to import complicated data that would fit perfectly in JSON format but I'm using Python 2.2 and I cannot import the json module. How can I import structured data like this in Python 2.2?
[21:28:22] *** Quits: DerpGusta (~quassel@user/derpgusta) (Ping timeout: 265 seconds)
[21:28:29] *** Joins: Colt (~Colt@user/colt)
[21:28:32] <SnoopJ> MockingMoniker, at least two possibilities mentioned last time are still available to you: backport the JSON library from 2.6+ or call into equivalent JSON-aware functionality in Java from Jython
[21:28:46] <SnoopJ> assuming you're asking about the same proprietary Jython-based thingy
[21:28:48] *** hexeme is now known as ldlework
[21:28:55] <MockingMoniker> SnoopJ, you're correct, I am.
[21:29:00] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[21:29:11] <MockingMoniker> SnoopJ, I don't think I can do any backport calls.
[21:29:21] *** Joins: Klinda (~superleag@user/klinda)
[21:29:36] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[21:29:40] <grym> MockingMoniker: you should instead say "a proprietary fork of jython 2.x" for maximal clarity, since your troubles are kind of special here because of that fact
[21:29:46] *** Joins: tobybl (~tobybl@213.31.132.151)
[21:29:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[21:29:50] <MockingMoniker> SnoopJ, also, online research shows that others have tried and could not do it.
[21:29:51] <SnoopJ> MockingMoniker, what is a "backport call?"
[21:29:54] <MockingMoniker> grym, that is true.
[21:30:19] <kek_> SnoopJ, code: https://bpa.st/JFUA file: https://polybox.ethz.ch/index.php/s/Pi5AnPWRDRxelBI
[21:30:21] <MockingMoniker> SnoopJ, oh, that's me reading your response too quickly.
[21:30:39] <kek_> SnoopJ, in case you wanna check it out.
[21:30:44] <SnoopJ> MockingMoniker, I doubt that it's impossible to backport, and the amount of time you've spent asking about it seems like it might be comparable with the effort required to make the 2.6 library spellings 2.2-compatible
[21:30:47] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[21:30:49] <SnoopJ> certainly the basic types are all there
[21:31:08] <grym> MockingMoniker: no joy making Java do its job, then?
[21:31:40] *** Joins: fikran (~fikran@user/fikran)
[21:31:52] <MockingMoniker> grym, not really, but I'll try to see if I can get Java to do something in Jython.
[21:32:15] <SnoopJ> Yea that still seems like the best bet
[21:32:19] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[21:35:52] *** Joins: jinsun (~quassel@user/jinsun)
[21:36:20] *** Joins: zebrag (~chris@user/zebrag)
[21:36:30] *** Parts: MockingMoniker (~MockingMo@ip72-201-253-44.ph.ph.cox.net) (Leaving)
[21:37:11] <SnoopJ> kek_, I've run it for about 300 iterations and it seems to be very stable, about 38 MB of RSS, with a virtual memory size of 208 MB from a spike in the beginning.
[21:38:42] *** Joins: delvian (~delvian@41.13.254.191)
[21:39:01] *** Joins: theprophet62 (~theprophe@85.114.228.184)
[21:39:15] *** Quits: theprophet62 (~theprophe@85.114.228.184) (Client Quit)
[21:39:27] *** Joins: theprophet90 (~theprophe@85.114.228.184)
[21:40:18] <kek_> SnoopJ, what version do you run of h5py and python?
[21:40:47] *** Quits: theprophet90 (~theprophe@85.114.228.184) (Client Quit)
[21:40:47] *** Joins: Nocturnalysis (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[21:41:01] <SnoopJ> kek_, this is on Python 3.8.10, h5py 3.1.0, but if you tell me your versions I could try those too.
[21:41:06] *** Quits: nomic (~nomic@51.52.78.152) (Quit: Leaving)
[21:41:07] *** Joins: theprophet36 (~theprophe@85.114.228.184)
[21:41:26] *** Joins: nomic (~nomic@51.52.78.152)
[21:41:42] <kek_> SnoopJ, I have 2.5gb virtual e.g. after 250 iterations. same for res. more or less.
[21:42:05] <SnoopJ> kek_, on what versions?
[21:42:32] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[21:42:50] <aphysically> I wonder if there's a particular reason type checkers support the first narrowing pattern but not the second https://bpa.st/S5DA
[21:42:53] <aphysically> cc jinsun
[21:42:59] <kek_> SnoopJ, I currently enforce 3.7 => Python 3.7.12 (default, Dec  2 2021, 11:47:57) and 3.4.0 fpr h5py
[21:43:03] *** Quits: theprophet (~theprophe@85.114.228.184) (Ping timeout: 256 seconds)
[21:43:36] <kek_> I work in a virtual environment - if that matters?
[21:43:39] <aphysically> probably because within the condition x can be mutated?
[21:43:41] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:43:53] <SnoopJ> kek_, it shouldn't influence this behavior but let me retry with 3.4.0
[21:44:01] <SnoopJ> "it" = running in a venv
[21:44:40] <SnoopJ> kek_, yes, I see steady growth with 3.4.0
[21:44:45] *** Quits: theprophet36 (~theprophe@85.114.228.184) (Client Quit)
[21:44:56] *** Joins: theprophet (~theprophe@85.114.228.184)
[21:45:03] <SnoopJ> and 3.7.10, but it's probably h5py's fault
[21:45:12] <velix> I'm not into classes, but I've read that line 28 could also be moved to the "init" stage of a class. That should be more professional. Or is my way also okay? At least: it works. https://bpa.st/3G2Q
[21:45:35] <SnoopJ> kek_, upgrading h5py to 3.6.0 brings it back to stable, so yea, looks like a bug in h5py.
[21:46:54] *** Joins: a0z1 (~a0z1@185.254.75.32)
[21:47:07] <kek_> SnoopJ, let me try to install the newer version
[21:47:32] <SnoopJ> kek_, it's also stable on 3.5.0, looks like there's a leak when reading data which "particularly affected code making many small reads."
[21:47:48] <SnoopJ> (that's in the 3.5.0 bug fixes: https://docs.h5py.org/en/stable/whatsnew/3.5.html#bug-fixes)
[21:47:55] <nedbat> faceface: did you figure out your bin/hex thing?
[21:48:22] <kek_> omg
[21:48:52] <SnoopJ> kek_, it's also stable in 3.3, looks like it was a regression: https://github.com/h5py/h5py/issues/1975
[21:49:06] <kek_> SnoopJ, thanks. Why do I keep running in these "memory leak" bugs :( haha but omg thanks.
[21:49:55] <SnoopJ> you would think they'd add a test for this!
[21:49:59] <kek_> SnoopJ, thanks a lot. I was sure I just have an error in my understanding of the file driver or something like that and my way of reading the data is bad.
[21:50:45] <SnoopJ> kek_, in your defense, HDF5 is quite complicated, sufficiently-so that even the authors of that library let this bug slip past them ;)
[21:51:07] <SnoopJ> glad it turned out to be a bug and not something more mystical, though
[21:51:19] *** Quits: mikeliuk (~mikeliuk@213.205.198.137) (Quit: Connection closed)
[21:51:29] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[21:51:31] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[21:52:08] *** Quits: kostkon (~kostkon@2a02:587:a116:f212:4d86:1980:f91d:1e03) (Quit: Leaving)
[21:53:59] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 265 seconds)
[21:54:00] <kek_> SnoopJ, I really just did the first thing I imagined and argued with my little systems knowledge that "this should work and shouldn't kill my machine", so chacnes were high I just do something stupid. Anyway, it's always nice for it to be "simple".
[21:54:39] <kek_> SnoopJ, anyway, thansk a lot for testing it! I told myself "it's probably not a memory leak" and I somehow never thought of checking github or just switching versions around.
[21:54:52] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[21:54:59] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[21:55:35] *** Quits: delvian (~delvian@41.13.254.191) (Read error: Connection reset by peer)
[21:55:36] <SnoopJ> sure thing :)
[21:55:50] *** Joins: junebug (~junebug@2600:1700:3db0:2540:209b:d9f6:bee5:95e)
[21:56:13] *** Joins: monkey_ (~user@181.114.17.106)
[21:56:21] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[21:56:29] <kek_> I always liked the C-family but they start to be that part of the family you don't really wanna interact with anymore :P
[21:56:36] *** Joins: reset (~reset@user/reset)
[21:58:46] *** Joins: redgloboli (~redglobol@user/redgloboli)
[21:59:47] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 265 seconds)
[22:01:29] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[22:02:02] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[22:03:24] *** Joins: et_ (~et@user/et)
[22:03:59] *** Joins: grundrausch3n (~grundraus@p200300e9ef0a82009c87fcc08caac64f.dip0.t-ipconnect.de)
[22:04:01] *** Joins: Yugi (~hunterkll@24.112.128.217)
[22:04:07] *** Quits: et (~et@user/et) (Ping timeout: 252 seconds)
[22:04:07] *** et_ is now known as et
[22:04:11] *** Joins: joshisanonymous (~joshisano@155-186-193-040.res.spectrum.com)
[22:05:13] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:05:32] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[22:06:56] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[22:07:26] *** Quits: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 260 seconds)
[22:07:34] *** Joins: hypoon (~hypoon@pool-108-31-49-4.washdc.fios.verizon.net)
[22:08:04] *** Joins: daoudr (~daoudr@2a02:1205:c690:ca10:843a:6e21:9631:a11f)
[22:08:15] *** Joins: Seto_Kaiba (~hunterkll@remote.kisaracorporation.com)
[22:08:45] *** Quits: beencubed (~beencubed@209.131.238.248) (Ping timeout: 268 seconds)
[22:09:33] *** Quits: Yugi (~hunterkll@24.112.128.217) (Ping timeout: 250 seconds)
[22:09:48] *** Joins: NeilG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[22:11:01] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[22:11:30] *** Quits: tobybl (~tobybl@213.31.132.151) (Remote host closed the connection)
[22:11:44] *** Joins: Yugi (~hunterkll@remote.kisaracorporation.com)
[22:12:27] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 268 seconds)
[22:13:03] *** Quits: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Remote host closed the connection)
[22:13:12] *** Joins: pycode (~pycode3@93-40-5-81.ip36.fastwebnet.it)
[22:13:20] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:1940:9460:cddf:2551) (Read error: Connection reset by peer)
[22:13:50] <daoudr> why I get this error when I try to activate anaconda during installation https://imgur.com/ZWorLwy.png
[22:14:35] <mefistofeles> daoudr: can you share the contents of your .bashrc file?
[22:14:41] <mefistofeles> sounds like a syntax error there
[22:14:53] <mefistofeles> oh wait
[22:14:55] <bluss> daoudr: I think it looks like you're trying to source a .bashrc file but your shell is not bash (then it doesn't work)
[22:15:03] <mefistofeles> daoudr: the error says shopt command doesn't exist
[22:15:11] *** Quits: Seto_Kaiba (~hunterkll@remote.kisaracorporation.com) (Ping timeout: 250 seconds)
[22:15:55] <mefistofeles> bluss: right, shopt is built into bash
[22:16:11] <bluss> the % makes it look like tcsh or something
[22:16:15] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:16:27] <daoudr> how to find .bashrc
[22:16:38] <jfcaron> I have a python representation of some hardware settings. When a setting isn't configured yet, currently I set it to None in python.  Should I make a special class NotConfigured somehow, or just make it an alias for None?
[22:16:39] <bluss> daoudr: you'll need instructions for your shell or adapt what you are doing yourself
[22:17:44] <grym> jfcaron: as long as None is not a valid configured state of any setting, it's probably fine
[22:17:50] <mefistofeles> bluss: could be anything, I know some zsh configs also do %
[22:18:54] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:19:31] *** Quits: shad (~shad@user/shad) (Ping timeout: 250 seconds)
[22:19:46] <jfcaron> Thanks grym.  The string "NONE" is a valid configuration, but not the None object.  Might get confusing for users though?
[22:20:27] <SnoopJ> jfcaron, that'd be a question for your end-users, I think, but an alias or `NOTHING = object()` are potential ways out of that bind.
[22:20:49] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:20:50] <grym> jfcaron: depending on how users see this setting configuuration and display, you can always display "UNSET" or anything else you choose instead of None
[22:20:55] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[22:21:10] <jfcaron> Thanks.
[22:21:40] <SnoopJ> Probably an alias for None would address the problem, `yourlib.NOTCONFIGURED` is unambiguous
[22:21:57] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:22:22] *** Joins: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[22:22:49] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[22:23:48] *** Joins: Clackulator (~Clackulat@75.75.210.194)
[22:24:07] *** Quits: c10l (~c10l@user/c10l) (Remote host closed the connection)
[22:24:07] *** Joins: sudomann (~sudomann@98.219.211.182)
[22:24:25] *** Joins: c10l (~c10l@user/c10l)
[22:24:28] *** Quits: c10l (~c10l@user/c10l) (Remote host closed the connection)
[22:25:11] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:26:41] <jfcaron> Yar.  I tried doing class NotConfigured(NoneType) but that doesn't work
[22:26:52] <jfcaron> So just NotConfigured = None will do.
[22:27:13] *** Quits: ericlee (~ericlee@2601:647:4681:3420::7) (Ping timeout: 252 seconds)
[22:27:18] *** Joins: parv (~quass@user/parv)
[22:28:32] <SnoopJ> yea, NoneType can't be subclassed because None has exactly one instance
[22:29:02] <jfcaron> I can't make a None-like singleton that isn't the same as None?
[22:29:06] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[22:29:18] <SnoopJ> you *can*, but it's not an instance of None
[22:29:32] <SnoopJ> of NoneType*
[22:29:34] *** Joins: sazawal (~sazawal@122.161.88.88)
[22:29:53] <jfcaron> Ah, and inheriting from NoneType would mean it is an instance of None.
[22:30:07] *** Joins: sudomann (~sudomann@98.219.211.182)
[22:30:11] *** Quits: llanhmod (~personnel@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[22:30:29] <SnoopJ> right
[22:30:46] <SnoopJ> https://docs.python.org/3/library/constants.html#None
[22:31:08] <jfcaron> How could I make my own None-like type?
[22:31:22] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:31:25] <SnoopJ> jfcaron, do you really need a type, or will an object do?
[22:31:35] <jfcaron> Well now I'm just curious.
[22:31:49] <jfcaron> NotConfigured = None will suit my actual purposes.
[22:32:26] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:32:47] <SnoopJ> `MY_SENTINEL = object()` is perfectly meaningful for creating a special value, but sometimes you do it like attrs does and make an honest-to-gosh class: https://github.com/python-attrs/attrs/blob/main/src/attr/_make.py#L65-L94
[22:34:52] <SnoopJ> kinda depends on what exactly you're doing, and often you just need a sentinel value so object() works fine. CPython does this a few times in its own test suite, for instance.
[22:35:16] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[22:35:17] *** Quits: pycode (~pycode3@93-40-5-81.ip36.fastwebnet.it) (Ping timeout: 256 seconds)
[22:35:33] <jfcaron> Nice
[22:36:31] <jfcaron> I forgot __new__ existed
[22:36:45] <SnoopJ> that's usually for the best :P
[22:38:03] <daoudr> i have zsh not bash
[22:38:04] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Remote host closed the connection)
[22:38:33] <daoudr> how to activate anaconda in zsh
[22:38:48] *** Joins: sudomann (~sudomann@98.219.211.182)
[22:39:09] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[22:39:25] <rustyshackleford> I have a big list of dates, spanning multiple years
[22:39:34] <rustyshackleford> well, date iso strings
[22:39:40] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:40:37] <rustyshackleford> ['2021-12-15', '2020-12-15'] => { '2021': ['2021-12-15'], '2021': ['2020-12-15'] }
[22:40:50] <rustyshackleford> I'd like to group them like this. If it helps, this list is sorted
[22:41:21] *** Joins: buzzard_ (~quassel@185.206.225.246)
[22:41:36] <SnoopJ> daoudr, `source path/to/conda/bin/activate && conda init zsh` according to step 7 of this: https://docs.anaconda.com/anaconda/install/mac-os/
[22:41:44] *** buzzard_ is now known as buzzard
[22:41:53] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[22:42:07] *** Quits: Forsaken87 (~quassel@2a02:908:1867:7d40:93ab:b917:6d2c:4af1) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:42:08] *** Joins: greedom (~greedom@p200300de670a69009f89f40b8fa9f0a3.dip0.t-ipconnect.de)
[22:42:26] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 260 seconds)
[22:42:38] <InPhase> rustyshackleford: Loop and insert with d.get(yr, []).append(datestr)
[22:42:40] <jfcaron> rustyshackleford: You could try to use the time or datetime modules, but you could also just iterate over the strings, use .split("-") on the strings, throw that into int() and use that for the key of the output dict.
[22:43:26] <daoudr> SnoopJ: I am on linux
[22:44:11] *** Joins: ericlee (~ericlee@2601:647:4681:3420::7)
[22:44:15] <SnoopJ> daoudr, it will be the same
[22:44:29] <rustyshackleford> probably easiest to operate on strings
[22:44:51] *** Quits: Nocturnalysis (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 250 seconds)
[22:44:52] <grym> itertools.groupby with a key=datetime.strptime().year or something?
[22:45:07] *** Quits: Haxxa (~Haxxa@202-130-211-204.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:46:54] *** Joins: tmus (~tmus@cust-185-157-203-2.nanoqnet.gl)
[22:47:07] *** Joins: Forsaken87 (~quassel@2a02:908:1867:7d40:93ab:b917:6d2c:4af1)
[22:49:29] *** Joins: Haxxa (~Haxxa@202-130-211-204.ip4.superloop.com)
[22:50:28] <daoudr> SnoopJ: https://pastebin.com/AyFq525Q
[22:50:30] *** Joins: Julian (~tos9@python/site-packages/Julian)
[22:51:00] *** Joins: qpdb (~qpdb@user/qpdb)
[22:51:16] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[22:52:02] <SnoopJ> daoudr, that output looks like you've already gotten the init code into your rc file (/home/daoudr/.zshrc). You'll have to either restart your terminal or run `source ~/.zshrc` to get the changes applied.
[22:53:22] <daoudr> SnoopJ: https://imgur.com/eFa5Ab4.png
[22:53:32] *** Joins: tmm88 (~tmm88@user/tmm88)
[22:54:09] <SnoopJ> yes, like that.
[22:54:30] <daoudr> SnoopJ:  I still do not see the word base prefix
[22:54:33] *** Quits: Andrynet1 (~Andrynet@186.46.205.112) (Ping timeout: 256 seconds)
[22:55:38] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 252 seconds)
[22:55:44] <SnoopJ> daoudr, I don't know really what "the word base prefix" is, but if you mean the shell prefix, conda only does this when you activate a specific conda env, as far as I know.
[22:56:23] *** Joins: Andrynet1 (~Andrynet@190.152.206.29)
[22:57:17] <SnoopJ> https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html#managing-environments
[22:59:11] <daoudr> SnoopJ: https://pastebin.com/iyBVpbd5
[23:00:05] <Payam> Does anyone know how I easy can get the object which has the name = payam https://bpa.st/2RQA
[23:00:47] <grym> Payam: [x for x in projects if x.name=="payam"]
[23:00:58] <daoudr> SnoopJ: this guy had base before installing conda https://imgur.com/jhhS12W.png
[23:02:01] <Payam> grym That gives a list of the object. I only want the object itself
[23:03:13] <grym> Payam: next(x for x in projects if x.name=="payam")
[23:03:54] <grym> Payam: or next((x for x in projects if x.name=="payam"), default=whatever)
[23:04:10] *** Joins: kostkon (~kostkon@2a02:587:a116:f212:4d86:1980:f91d:1e03)
[23:04:18] <Payam> grym I recall that itemgetter in operator could do something similar or am I misstaken?
[23:04:38] <grym> Payam: no idea, i use that extremely rarely
[23:04:51] <grym> but if you want to know how to do that, then ask how to do that instead of a more open ended question
[23:05:22] *** Quits: dvx (~dvx@5.181.92.64) (Quit: dvx)
[23:05:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:06:21] *** Quits: Throgkt (~Throgkt@user/throgkt) (Ping timeout: 256 seconds)
[23:06:25] <bjs> Payam: there's no item getting (x[i]) here, so itemgetter probably won't help.  Maybe what you want to do is make a dict?
[23:06:31] *** Parts: akk (~akk@174-28-122-47.albq.qwest.net) (+++)
[23:06:33] *** Joins: jaggz (~jaggz@user/jaggz)
[23:07:17] <daoudr> SnoopJ: I managed to activate and deactivate the environment without having the word base in the beggining of my prompt
[23:07:21] *** Joins: sudomann (~sudomann@98.219.211.182)
[23:09:23] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:10:11] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[23:10:36] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[23:10:39] *** Joins: sfields (~sfields@2605:a601:adea:7a00:b908:8b7:c380:7652)
[23:10:52] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[23:11:02] *** Joins: Throgkt (~Throgkt@user/throgkt)
[23:11:13] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[23:12:01] <pikajude> is there a library function that will give me a dict without any of the keys in some set
[23:12:46] *** Joins: arinov (~arinov@176.89.29.127)
[23:12:51] <pikajude> is that called the difference
[23:12:55] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[23:13:00] <pikajude> looks like it might be according to the set documentation
[23:13:32] <nedbat> i'm looking at code that uses a requests.Session(), like this: session.get("/user") without specifying a host.  How is that done?
[23:15:37] *** Quits: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Ping timeout: 252 seconds)
[23:15:46] <grym> pikajude: dict keys are a setlike view, and you can do set operations on them
[23:15:54] <jaggz> nedbat, a local path?
[23:16:04] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[23:16:09] <Payam> grym next takes no keyboard arguments
[23:16:09] <jaggz> file:// then?
[23:16:27] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:16:31] <jaggz> (not sure if requests handles it)
[23:16:37] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[23:17:11] <grym> Payam: well, then just pass the default
[23:17:19] <jaggz> or maybe req lets you set a host and port and protocol?
[23:17:20] <grym> instead of as a keyword
[23:17:24] *** Joins: mdw (~root@159.65.86.163)
[23:17:28] <velix> Hmm. Do I need to refactor my question? Sorry, I'm not native :(
[23:17:37] <Payam> ohh yes grym thanks
[23:17:56] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[23:18:09] <pikajude> grym, looks like if i use the difference operator on the keys view, it turns it into a set, and mapping is then no longer available
[23:18:33] <grym> pikajude: yeah, you'll have to do something silly with a comprehension
[23:18:41] <pikajude> ok, so no, there is no library function that does this
[23:18:58] <nedbat> jaggz: it turns out it's flask-dance providing its own request() method that applies a base url...
[23:19:10] <grym> {k:thedict[k] for k in validset.intersection(thedict)} or something
[23:19:11] <daoudr> do I need to have the word (base) at the beginning of my prompt?
[23:19:22] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[23:19:25] <daoudr> to say that anaconda is working properly?
[23:19:31] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Quit: Leaving)
[23:19:35] <grym> 'library function' is somewhat unclear
[23:19:47] <pikajude> oh really?
[23:22:06] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Quit: Client closed)
[23:24:49] *** Quits: tmus (~tmus@cust-185-157-203-2.nanoqnet.gl) (Quit: Textual IRC Client: www.textualapp.com)
[23:25:24] <jaggz> velix, what was the q?
[23:27:24] <velix> jaggz: I discussed it on #python.de now - I don't want to crosspost.
[23:31:10] *** Joins: trace987 (~trace@ip5b429834.dynamic.kabel-deutschland.de)
[23:31:17] <velix> jaggz: Just because you asked ;) I'm not into classes, but I've read that line 28 could also be moved to the "init" stage of a class. That should be more professional. Or is my way also okay? At least: it works. https://bpa.st/3G2Q
[23:31:33] *** Quits: c4017w (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[23:32:19] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[23:32:28] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[23:33:39] <jaggz> velix, I don't see what calls application()
[23:34:08] <velix> jaggz: it's WSGI
[23:34:09] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Quit: No Ping reply in 180 seconds.)
[23:34:09] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 276 seconds)
[23:34:11] <velix> gunicorn calls it
[23:34:22] *** Joins: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26)
[23:35:02] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[23:35:22] *** Quits: nomic (~nomic@51.52.78.152) (Quit: Leaving)
[23:35:25] *** Quits: junebug (~junebug@2600:1700:3db0:2540:209b:d9f6:bee5:95e) (Ping timeout: 252 seconds)
[23:35:27] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[23:35:27] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 276 seconds)
[23:35:42] <jaggz> velix, I don't know anything about it.  just know what the choices and effects are
[23:36:00] <jaggz> if application() is called more than once, then MultiPolygon() is doing its thing each time
[23:36:06] *** Quits: orangeboxcutter (~orange@user/orangeboxcutter) (Ping timeout: 276 seconds)
[23:36:35] <jaggz> so then it means you make a choice between "do it just once, at init, because we are not changing MultiPolygon() again later, so no need to re-do it"
[23:36:40] <evidlo> can I pretty much count on tkinter being available on most systems?
[23:36:45] <ChrisWarrick> evidlo: no
[23:37:04] <ChrisWarrick> evidlo: most linux distros don’t ship with tkinter by default
[23:37:08] <ChrisWarrick> evidlo: tkinter is crap regardless
[23:37:24] <jaggz> and, if it doesn't matter, then you can choose between something like:  "that call takes some time.  it's best to get it out of the way at init, because if we do it later, it's during some other stuff that we don't want to slow down much."
[23:37:34] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[23:37:37] <jaggz> chances are, it doesn't matter either way.
[23:38:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[23:38:42] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[23:38:42] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[23:38:42] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[23:38:53] *** Joins: naranja (~orange@user/orangeboxcutter)
[23:38:54] *** Joins: zaquest (~notzaques@5.130.79.72)
[23:38:58] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[23:39:02] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[23:39:04] *** Joins: kevr (~kevr@user/kevr)
[23:39:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[23:39:23] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[23:40:03] <jaggz> professional might be more like:  1. doing it in the way it should work.  2. knowing when it doesn't matter (so don't bother).  3. Being able to get it done.  4. clean maintainable code.
[23:40:28] <jaggz> not necessarily in that order.. and I'm just making it up, for the topic.. definitions for that obviously vary.
[23:40:37] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[23:41:00] *** Joins: fikran (~fikran@user/fikran)
[23:41:03] <velix> jaggz: Actually it's just called once per werker and stays in memory until a worker gets restarted.
[23:41:08] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[23:41:08] <velix> worker*
[23:41:22] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[23:41:37] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[23:41:38] *** Quits: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514) (Quit: Ping timeout (120 seconds))
[23:41:54] <velix> jaggz: https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface
[23:42:11] *** Joins: ub (~Thunderbi@p200300ecdf1abb06cc2914e8ae945344.dip0.t-ipconnect.de)
[23:43:01] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[23:44:35] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[23:44:35] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[23:44:45] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[23:44:59] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 256 seconds)
[23:45:05] *** Joins: Klinda (~superleag@user/klinda)
[23:45:12] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[23:46:01] <jaggz> velix, back to work you!
[23:46:07] <ChrisWarrick> WSGI is quite low-level, you might prefer to use an established framework (that is WSGI-based, but does some of the heavy lifting for you)
[23:46:07] *** Joins: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514)
[23:46:10] <theseb> I don't know much but it seems to me that Docker and Kubernetes are the fundamental way to do software now....just like HTML/web took over the world it seems Docker + Kubernetes is taking over software...so we must all learn them cold yes?
[23:46:18] <Payam> hi what is the easiest way of comparing these two times? https://bpa.st/ULCQ Both are the same but different time zone. How do I change the timezone ?
[23:46:29] <grym> theseb: i wouldn't go that far at all
[23:46:45] *** Quits: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514) (Client Quit)
[23:46:46] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[23:46:53] <velix> ChrisWarrick: Wait, this is working a bit amok now. mapproxy uses werkzeug or something. But that's not what my question was after. Do I need to re-ask it somehow?
[23:46:59] *** Joins: odoood (~odoood@2601:c8:c003:a550::5)
[23:47:09] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Ping timeout: 276 seconds)
[23:48:01] <ChrisWarrick> velix: what do you want to move to __init__, exactly?
[23:48:08] <ChrisWarrick> theseb: you can live without docker
[23:48:20] <ChrisWarrick> theseb: and especially without kubernetes
[23:48:27] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 276 seconds)
[23:48:27] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Ping timeout: 276 seconds)
[23:48:40] *** Joins: adeliktas67 (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514)
[23:48:47] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 250 seconds)
[23:48:49] <Payam> never undrestood what docker it. Is it a virtuam machine thingy?
[23:48:55] <Payam> Like an operative system?
[23:48:56] <grym> Payam: no, not really
[23:48:57] *** adeliktas67 is now known as adeliktas
[23:49:13] <Payam> The things I read about was too complicated for me.
[23:49:34] *** Quits: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514) (Client Quit)
[23:49:42] <grym> it's like chroot but with more money
[23:49:58] *** Joins: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514)
[23:50:16] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:50:19] *** Joins: grooverman_ (~grooverma@177.102.117.95)
[23:50:30] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 268 seconds)
[23:50:32] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[23:50:42] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[23:50:43] <SnoopJ> Payam, it's virtualization, but it's at the operating-system level. It doesn't virtualize any hardware, which is a big part of its popularity: that's slow.
[23:50:53] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:51:08] <Payam> I don't really know what virtualization means tbh
[23:51:14] <grym> it is extremely convenient for shipping code that has fiddly dependencies
[23:51:17] <Payam> It is an Os on a OS?
[23:51:22] <SnoopJ> Payam, yes, it's exactly that
[23:51:36] <Payam> then why is there python docker images?
[23:51:41] <Payam> python is not a os
[23:51:42] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[23:51:47] *** Quits: grooverman (~grooverma@177.102.117.95) (Ping timeout: 256 seconds)
[23:51:51] <grym> it runs inside one, though!
[23:51:54] <SnoopJ> Those images an operating environment with Python installed.
[23:51:57] <SnoopJ> are an*
[23:52:02] <velix> ChrisWarrick: The part of "shp_geom = MultiPolygon..." since this needs to be loaded once a worker only.
[23:52:04] <Payam> wait
[23:52:11] <velix> ChrisWarrick: I mean, it works perfectly like it is.
[23:52:12] <Payam> so docker container is the OS?
[23:52:25] <ChrisWarrick> velix: but there’s no class here?
[23:52:27] <Payam> no. What is docker? docker container, docker image
[23:52:33] <Payam> ? and ?
[23:52:41] <velix> ChrisWarrick: Hmm. Yes, that was my question ;)
[23:52:48] <velix> ChrisWarrick: Shall I put it in a class or not? :D
[23:52:52] <SnoopJ> Payam, no, it's a little "container" that the Docker service knows how to run as if it *were* an OS. I think you might want to ask these questions in #docker though, it's not really Python specific
[23:52:54] <theseb> Payam: are you comfortable with the idea of a virtual machine?
[23:53:01] <theseb> Payam: like VirtualBox or QEMU?
[23:53:03] <SnoopJ> (or #python-offtopic if you prefer)
[23:53:21] <theseb> Payam: it is basically a space optimized VM
[23:53:31] <ChrisWarrick> velix: I doubt it would help or would lead to cleaner code
[23:53:44] <Payam> theseb I run VM now. Ubuntu on VM
[23:54:02] <velix> ChrisWarrick: Okay.
[23:54:04] <Payam> SnoopJ I will go there.
[23:54:24] *** Joins: Macuser (~Macuser@2600:1003:b443:b5e5:451b:6eac:6d38:7fec)
[23:54:29] *** Quits: buzzard (~quassel@185.206.225.246) (Ping timeout: 252 seconds)
[23:54:41] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Ping timeout (120 seconds))
[23:54:49] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 265 seconds)
[23:54:49] <jmcantrell> What's wrong with this type alias? I've read the suggested link, but I still don't understand https://mypy-play.net/?mypy=latest&python=3.10&gist=1e927c4dae9b6a0e22ac1bbd93fe0199
[23:57:33] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[23:57:33] *** Quits: naranja (~orange@user/orangeboxcutter) (Quit: AFK)
[23:58:23] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[23:58:25] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[23:58:46] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[23:59:09] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[23:59:59] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
