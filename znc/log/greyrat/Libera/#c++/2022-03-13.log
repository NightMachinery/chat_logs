[00:02:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[00:03:48] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[00:06:25] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[00:11:02] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[00:11:22] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[00:18:17] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[00:18:51] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[00:19:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:19:44] *** Joins: Viewday1156 (~Viewday@user/viewday)
[00:20:48] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:21:01] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 240 seconds)
[00:23:32] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[00:23:33] *** Viewday1156 is now known as Viewday115
[00:27:41] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[00:32:23] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Client Quit)
[00:33:04] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:33:05] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[00:34:02] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:36:06] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[00:36:29] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[00:40:51] *** Quits: ville (~ville@user/ville) (Quit: ville)
[00:41:21] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:41:21] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:42:23] *** Joins: murdoc_x01 (~root@98.42.49.72)
[00:45:16] *** Quits: murdoc_x01 (~root@98.42.49.72) (Quit: WeeChat 3.4)
[00:46:32] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[00:48:21] *** Joins: murdoc_x01 (~nitestryk@98.42.49.72)
[00:50:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:51:30] *** Quits: murdoc_x01 (~nitestryk@98.42.49.72) (Quit: WeeChat 3.4)
[00:51:32] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:87b2:598e:5ed5:8ca9) (Quit: No Ping reply in 180 seconds.)
[00:52:53] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[00:53:13] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[00:53:22] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:53:51] *** Joins: murdoc_x01 (~nitestryk@98.42.49.72)
[00:55:47] *** Joins: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de)
[00:58:50] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:00:57] *** Quits: kaichiuchu (~mike@user/kaichiuchu) (Ping timeout: 240 seconds)
[01:01:19] *** Quits: murdoc_x01 (~nitestryk@98.42.49.72) (Quit: WeeChat 3.4)
[01:02:39] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:02:53] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Ping timeout: 256 seconds)
[01:03:19] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:03:31] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[01:11:32] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:db92:dbdf:1da7:6fb9)
[01:11:32] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:db92:dbdf:1da7:6fb9) (Changing host)
[01:11:32] *** Joins: RoKenn (~RoKenn@user/rokenn)
[01:16:36] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[01:17:44] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[01:17:52] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[01:19:47] *** Inline__ is now known as Inline
[01:22:55] *** Quits: andreasbuhr (~quassel@p5dcf991b.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:25:41] *** Quits: AmR (~AmREiSa@156.199.236.198) (Quit: Konversation terminated!)
[01:29:20] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 272 seconds)
[01:34:07] *** Joins: murdoc_x01 (~nitestryk@98.42.49.72)
[01:34:09] *** Quits: Giovanni (~Giovanni@176.55.170.26) (Ping timeout: 252 seconds)
[01:39:36] *** Joins: Markow (~Markow@176.122.215.103)
[01:42:01] *** Joins: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de)
[01:43:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:54] *** ChanServ sets mode: +v npaperbot
[01:54:59] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[01:56:33] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[01:57:32] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:59:35] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:02:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:07:11] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[02:07:50] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc6-git-38f80f4-Pogorze-Karpackie-CUSTOM-KERNEL)
[02:07:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[02:09:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:12:08] *** Joins: CaCode (~CaCode@user/cacode)
[02:16:03] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[02:17:44] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Quit: Konversation terminated!)
[02:22:29] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[02:22:53] *** Joins: Guest7469 (~Guest@host76.190-137-36.telecom.net.ar)
[02:25:13] *** Quits: Leone (~Leo@216.154.12.122) ()
[02:28:15] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5325)))
[02:28:16] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[02:30:12] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[02:33:42] *** Quits: magla (~gelignite@d5366f7c.access.ecotel.net) (Quit: Stay safe!)
[02:33:51] *** Joins: pizdets_ (~pizdets@183.182.110.211)
[02:34:13] *** Quits: pizdets (~pizdets@183.182.114.152) (Ping timeout: 265 seconds)
[02:36:25] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[02:37:04] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[02:39:38] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[02:42:03] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[02:43:38] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:52:10] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:56:04] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[03:00:16] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:02:18] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:03:30] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[03:05:20] *** Joins: bpalmer (~user@user/bpalmer)
[03:10:11] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[03:10:17] *** Joins: Leone (~Leo@216.154.12.122)
[03:15:33] *** rdrg109_ is now known as rdrg109
[03:18:53] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[03:19:35] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[03:19:36] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:24:33] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:24:33] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:27:56] *** Joins: pulse (~pulse@user/pulse)
[03:39:07] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[03:39:31] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:41:48] *** Joins: ferdna (~ferdna@user/ferdna)
[03:48:40] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:50:33] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 252 seconds)
[03:52:37] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[03:52:56] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[03:55:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:00:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:02:52] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[04:04:10] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[04:05:46] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[04:07:28] <Hello71> i don't see what the dynamic loading implementation has to do with implibs
[04:08:08] <Hello71> windows just puts more of the binary loader implementation into the kernel
[04:08:34] <Hello71> which is another bad windows design
[04:09:39] <anyone> the implibs provide the trampolines for lazy symbol resolution
[04:11:05] <Hello71> but the implibs are used at compile time, not at run time
[04:11:46] <Hello71> the linker could simply generate the stubs at link time, like on Unix or exactly how mingw does it
[04:12:13] <anyone> which is what I expressed hours ago
[04:12:39] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[04:20:20] *** Quits: CalamityBlue (~CalamityB@user/CalamityBlue) (Read error: Connection reset by peer)
[04:21:37] *** Parts: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) ()
[04:30:15] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (Read error: Connection reset by peer)
[04:30:33] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[04:31:12] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:32:21] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[04:33:36] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[04:34:04] *** Quits: bdt (~bdt@155.51-174-24.customer.lyse.net) (Ping timeout: 250 seconds)
[04:36:17] *** Joins: bdt (~bdt@2a01:799:39c:7600:e65f:1ff:fe08:8a88)
[04:37:18] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 252 seconds)
[04:40:02] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[04:44:42] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:bc91:87ee:dc4:4024)
[04:44:42] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:bc91:87ee:dc4:4024) (Changing host)
[04:44:42] *** Joins: skapata (~Skapata@user/skapata)
[04:46:36] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[04:52:27] *** Joins: llh (~UPP@user/llh)
[04:53:25] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[04:54:08] *** Joins: Atque (~Atque@user/atque)
[04:54:16] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d9af:8eb3:1109:8cbb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:56:00] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:59:18] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[05:01:36] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:01:47] *** Joins: Cahaan_ (~Cahaan@user/cahaan)
[05:02:14] *** Quits: Cahaan (~Cahaan@user/cahaan) (Ping timeout: 250 seconds)
[05:02:58] *** Quits: Guest7469 (~Guest@host76.190-137-36.telecom.net.ar) (Remote host closed the connection)
[05:03:06] *** Quits: gjvc (~gjvc@user/gjvc) (Quit: leaving)
[05:03:29] *** Joins: gjvc (~gjvc@user/gjvc)
[05:05:18] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[05:05:29] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:13:56] *** Quits: dsrt^ (~dsrt@50.232.121.75) (Ping timeout: 250 seconds)
[05:15:37] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:be73) (Ping timeout: 256 seconds)
[05:15:55] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[05:17:35] *** Joins: namkeleser (~namkelese@101.175.104.107)
[05:20:08] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:22:18] *** Joins: ymwm_ (~yingmanwu@27.153.166.227)
[05:25:15] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:26:14] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[05:42:30] *** Joins: davidlowryduda (~davidlowr@2601:197:600:1210:adfa:97b2:16e:b6e4)
[05:43:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:55] *** ChanServ sets mode: +v npaperbot
[05:44:46] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[05:47:59] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:49:00] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[05:50:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[05:52:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:54:32] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[06:02:15] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:04:56] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[06:05:51] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[06:14:28] *** Joins: Inline__ (~Inline@p200300cd473ac50039f51e8a2d5e1728.dip0.t-ipconnect.de)
[06:17:01] *** Quits: Inline (~Inline@p200300cd472d8600a7f83f236a05ec56.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:21:25] *** Parts: blackout69 (~blackout6@37.183.230.121) ()
[06:25:26] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 250 seconds)
[06:26:44] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:28:54] *** Quits: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie) (Ping timeout: 272 seconds)
[06:30:36] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[06:33:16] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[06:38:12] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:40:30] *** Quits: proller (~p@2a02:6b8:b081:b65a::1:2b) (Ping timeout: 252 seconds)
[06:42:21] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[06:42:34] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::8099)
[06:43:42] <RandomReader> that's an awful lot of misconceptions about Windows DLLs, but this isn't the a channel for it
[06:44:46] <RandomReader> I'll just note that Microsoft does make documentation available
[06:44:50] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[06:46:42] <anyone> let's just pretend MS does not know either. Because if you read some of their docs/specs...
[06:47:54] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:48:02] <RandomReader> some of us have verified it over the years :)
[06:48:34] <anyone> Maybe for DLLs. But MS isn't just about DLLs.
[06:48:40] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::8099) (Quit: Leaving)
[06:48:45] <anyone> Anyway. Concerning https://wandbox.org/permlink/oVwIMyU0WHeLjYzd , are nested classes automatically befriended?
[06:50:26] <RandomReader> they're inside the scope of the outer class
[06:51:00] <RandomReader> in some ways it's similar to friend, but I wouldn't describe it that way since the scope part is important for name lookup rules anyway
[06:52:03] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 252 seconds)
[06:52:10] <RandomReader> (and a friend of P would not have access to that scope, so is not a friend of S)
[06:53:51] <anyone> "Canadian acquaintanceship" might fit to express this then
[07:00:37] *** Joins: zer0x (~zer0x@1.55.210.143)
[07:01:35] *** Quits: zer0x (~zer0x@1.55.210.143) (Remote host closed the connection)
[07:01:50] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[07:02:07] *** Joins: zer0x (~zer0x@1.55.210.143)
[07:02:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:04:26] *** Quits: wootz (~wootz@2806:1000:8000:b6a2:9197:d69a:2ddb:9440) (Ping timeout: 250 seconds)
[07:05:59] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[07:06:10] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[07:11:41] *** Joins: FAT1337 (~IceChat78@user/fat1337)
[07:12:40] *** Quits: kstatz12 (~kstatz12@205.178.87.116) (Ping timeout: 256 seconds)
[07:13:28] *** Joins: kstatz12 (~kstatz12@205.178.87.116)
[07:13:29] *** Quits: emerent (~quassel@p200300cd5743c3f6ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[07:13:45] <FAT1337> Got a small question..
[07:14:13] *** Joins: emerent (~quassel@p200300cd5743c31aba27ebfffed28a59.dip0.t-ipconnect.de)
[07:14:27] <FAT1337> anyone know where is Conio ?
[07:14:46] <FAT1337> :(
[07:14:57] <FAT1337> MISS HIM
[07:15:06] <FAT1337> :(
[07:15:26] <anyone> 18020 Province of Imperia, Italy
[07:16:55] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[07:18:23] *** Quits: namkeleser (~namkelese@101.175.104.107) (Quit: Client closed)
[07:20:04] *** Joins: walterwhip (~www@user/walterwhip)
[07:21:19] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[07:25:57] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[07:26:42] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 252 seconds)
[07:29:17] *** Quits: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de) (Remote host closed the connection)
[07:37:51] *** Quits: sreve_ (~quassel@p4ff443b7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:38:20] *** Joins: sreve (~quassel@p54a71a79.dip0.t-ipconnect.de)
[07:42:19] *** Joins: Cahaan (~Cahaan@user/cahaan)
[07:43:00] *** Quits: pizdets_ (~pizdets@183.182.110.211) (Ping timeout: 272 seconds)
[07:43:01] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:43:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:43:40] *** Joins: highrate (~presonic@user/highrate)
[07:45:32] *** Quits: Cahaan_ (~Cahaan@user/cahaan) (Ping timeout: 272 seconds)
[07:49:48] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 252 seconds)
[07:57:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:01:38] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Ping timeout: 250 seconds)
[08:03:15] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:06:45] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:07:57] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 252 seconds)
[08:08:41] *** Quits: zer0x (~zer0x@1.55.210.143) (Remote host closed the connection)
[08:08:46] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:10:20] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:14:27] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:16:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[08:20:54] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[08:33:41] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 272 seconds)
[08:40:03] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[08:40:51] *** Joins: walterwhip (~walterwhi@user/walterwhip)
[08:41:40] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[08:44:12] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::43)
[08:54:59] *** Quits: AssKoala (~asskoala@user/asskoala) (Remote host closed the connection)
[08:55:40] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[08:57:02] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Remote host closed the connection)
[08:57:26] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[08:57:28] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Remote host closed the connection)
[09:03:30] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:06:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[09:21:52] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[09:22:22] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[09:24:58] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[09:26:47] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[09:27:13] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[09:28:44] *** Joins: nostar (~nostar@68.51.221.108)
[09:33:02] *** Sadale is now known as chartyr
[09:33:06] *** chartyr is now known as Chartyr
[09:33:10] *** Chartyr is now known as Sadale
[09:33:54] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Quit: Leaving)
[09:43:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:54] *** ChanServ sets mode: +v npaperbot
[10:04:15] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:07:51] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[10:15:14] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:16:40] <Gamah> are threads always joinable until joined or detached? or do they stop existing when they reach the end of their exectuio?
[10:16:42] <Gamah> exection*
[10:16:48] <Gamah> execution...*
[10:20:57] <Gamah> it looks like i'm looking for detach.
[10:24:29] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:26:11] *** Joins: tlophd_becky__ (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net)
[10:26:19] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[10:26:20] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:bc91:87ee:dc4:4024)
[10:26:20] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:bc91:87ee:dc4:4024) (Changing host)
[10:26:20] *** Joins: skapata (~Skapata@user/skapata)
[10:26:53] <Alipha> Gamah: the thread itself ceases to exist after its execution is done, but you can still join (which would return immediately) or detach the corresponding std::thread
[10:27:02] *** Quits: thad_the_man_2 (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net) (Ping timeout: 272 seconds)
[10:29:23] *** Parts: FAT1337 (~IceChat78@user/fat1337) ()
[10:30:50] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:35:37] <Gamah> and if i detach immediatly it still runs... and modifies any memory that might have been passed by reference?
[10:35:49] *** Quits: zopsi (~zopsi@104-237-136-227.ip.linodeusercontent.com) (Quit: Oops)
[10:35:56] *** Quits: Xark (~Xark@47.156.11.28) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[10:38:23] *** Joins: Xark (~Xark@47.156.11.28)
[10:44:44] <Alipha> Gamah: yes, and so you have to make sure that the memory it references maintains valid for the duration of the thread's execution
[10:45:16] <Gamah> sweet.... not sure exactly where i'm going wrong yet by trying to read that memory...
[10:45:18] <Gamah> but getting closer
[10:46:57] <Gamah> do i have to make a copy? vectors aren't thread safe? somthing...
[10:47:29] <Gamah> if i never read from the vector of ints, it runs through and exits cleanly... if i try to read over the vector and print stuff out it segfaults
[10:47:48] <Alipha> !give Gamah testcase
[10:47:49] <nolyc> Gamah: A testcase is the _least_ amount of code that replicates your problem. Paste it to: https://godbolt.org/ and make sure it really does replicate your problem. This does not mean that you dump all your code there. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[10:48:08] <Gamah> i gues...
[10:52:04] <Alipha> Gamah: you're passing a reference to a vector and then detach the thread?
[10:53:39] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[10:54:57] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[10:55:30] <Gamah> passing vector[threadNumber] when calling thread()
[10:55:39] <Gamah> and the function thread is calling takes int&
[10:56:05] <Gamah> reading actually seems to work, cause i'm doing while(true) until vector[threadnumber] == totaliterations;
[10:56:24] <Gamah> and that works and exits but if i try to write to cout from vector[threadnumber]
[10:56:27] <Gamah> segfault
[10:57:19] <Gamah> what's the compiler option to get more info onsegfaults? fsanitize=address?
[10:57:26] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:04:53] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:04:55] <Eelis> Gamah: sanitizers catch some things, but not everything. the last resort for a segfault is to get a core dump that you can debug with gdb
[11:05:14] <Gamah> something something heap overflow
[11:05:57] <Eelis> i guess your intent by saying "something something" is that you want us to guess what you really mean. too much work, i'll just ignore it
[11:06:10] <Gamah> no...
[11:06:16] <Eelis> then say what you mean
[11:06:34] <Gamah> not sure, i'll have to put together a test case when i can be bothered.
[11:07:00] <Eelis> alrighty
[11:08:21] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[11:09:15] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 240 seconds)
[11:09:20] <Gamah> if you want to see the code.... https://github.com/Gamah/bjsim-cpp/blob/master/bjsim.cpp#L350-L355
[11:11:29] <Eelis> like most people here i only consider testcases. not gonna debug real programs
[11:11:39] <Eelis> you'll have to learn how to isolate your problems
[11:12:00] <Eelis> fortunately this is a skill that can be learned like any other
[11:12:11] <Eelis> just need to work on it
[11:12:33] <Gamah> it's not going to be hard to isolate, i just don't feel like it... sounds like we've reached an impasse, that is okay
[11:12:51] <Gamah> if anyone else wants to provide insight until i feel like putting that together, it would be appreciated.
[11:12:51] <Eelis> if you don't feel like helping us help you, we won't feel like helping you :)
[11:13:06] <Gamah> i don't think you should speak for others, but i appreciate your view
[11:13:23] <Eelis> there's definitely a contingent that will debug real programs for people. but it's a small minority
[11:13:27] <Eelis> (for understandable reasons)
[11:13:46] <Gamah> totally, agree. we are on the same page
[11:22:50] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[11:23:18] *** Joins: zer0x (~zer0x@1.55.210.143)
[11:24:57] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[11:25:47] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:26:26] *** Joins: spithash (~spithash@user/spithash)
[11:27:55] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[11:31:49] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[11:32:39] *** Joins: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de)
[11:34:48] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 272 seconds)
[11:38:49] *** Quits: zer0x (~zer0x@1.55.210.143) (Remote host closed the connection)
[11:39:42] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:40:19] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[11:41:12] *** Joins: toulene (~toulene@user/toulene)
[11:41:52] <Gamah> d'oh.... for(int& i : thing)..... i is not the index....
[11:42:02] <Gamah> i was passing that to thing[i] which was way out of range
[11:42:05] <Gamah> it works, woohoo!
[11:42:51] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[11:45:34] *** Joins: toulene (~toulene@user/toulene)
[11:47:44] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:8da:9afd:10c2:81a6)
[11:48:18] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[11:55:45] <Gamah> next step... curses... because writing a new line for each thread to cout and calling clear 10 times a second looks dumb.
[11:58:17] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:03:33] *** Joins: namkeleser (~namkelese@101.175.104.107)
[12:05:38] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:07:48] *** Quits: C-Man (~C-Man@78.31.190.82) (Ping timeout: 240 seconds)
[12:07:51] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:08:16] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[12:09:38] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[12:11:16] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:14:28] *** Joins: magla (~gelignite@55d47190.access.ecotel.net)
[12:18:19] *** Joins: zer0x (~zer0x@1.55.210.143)
[12:27:16] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 250 seconds)
[12:31:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:35:56] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[12:40:57] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[12:45:08] *** Joins: blackout69 (~blackout6@37.183.230.121)
[12:46:20] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[12:53:48] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[13:03:56] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[13:06:18] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:07:50] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[13:09:04] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[13:09:17] *** Joins: spithash (~spithash@user/spithash)
[13:10:26] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[13:19:55] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:24:12] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[13:24:13] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[13:25:51] *** Quits: blackout69 (~blackout6@37.183.230.121) (Remote host closed the connection)
[13:26:07] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:27:31] *** Joins: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie)
[13:27:57] *** Joins: rendar (~rendar@user/rendar)
[13:28:37] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:29:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[13:29:11] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:32:03] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:36:05] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[13:39:04] *** Joins: chris64 (~chris@user/chris64)
[13:42:58] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:43:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:56] *** ChanServ sets mode: +v npaperbot
[13:47:32] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[13:49:21] *** Quits: namkeleser (~namkelese@101.175.104.107) (Quit: Client closed)
[13:50:02] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:50:27] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[14:03:13] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:04:58] *** Quits: zer0x (~zer0x@1.55.210.143) (Remote host closed the connection)
[14:06:35] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:07:37] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.228)
[14:09:20] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[14:09:51] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[14:09:59] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:12:31] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[14:15:54] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 252 seconds)
[14:19:28] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[14:20:07] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[14:25:33] *** Inline__ is now known as Inline
[14:25:51] *** Joins: C-Man (~C-Man@78.31.190.82)
[14:28:00] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 252 seconds)
[14:28:38] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[14:33:04] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:33:31] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[14:36:12] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[14:38:27] *** Joins: lxsameer (lxsameer@user/lxsameer)
[14:40:20] *** Joins: namkeleser (~namkelese@101.175.104.107)
[14:43:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:46:04] *** Joins: blackout69 (~blackout6@37.183.198.248)
[14:46:42] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[14:51:11] *** Joins: ivii (~ivan@user/ivii)
[14:56:06] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[14:57:11] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[14:59:49] *** Joins: sobkas (~sobkas@95.175.17.217)
[15:00:27] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[15:01:22] *** Joins: slidercrank (~slidercra@user/slidercrank)
[15:02:39] *** Quits: slidercrank (~slidercra@user/slidercrank) (Client Quit)
[15:02:54] *** Joins: slidercrank (~slidercra@user/slidercrank)
[15:07:14] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:07:35] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[15:08:19] *** Joins: Markow (~Markow@176.122.215.103)
[15:08:25] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:08:49] *** Quits: blackout69 (~blackout6@37.183.198.248) (Quit: Leaving.)
[15:10:38] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[15:10:46] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[15:12:07] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[15:12:38] *** Joins: savolla (~quassel@95.10.203.10)
[15:15:12] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:18:58] *** Quits: savolla (~quassel@95.10.203.10) (Remote host closed the connection)
[15:29:12] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:32:43] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:32:43] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:35:39] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[15:38:35] *** Joins: mrvn (~mrvn@ip-046-005-255-082.um12.pools.vodafone-ip.de)
[15:48:01] *** Quits: TommyC (~TommyC@user/tommyc) (Ping timeout: 256 seconds)
[15:48:45] *** Joins: TommyC (~TommyC@user/tommyc)
[15:51:52] *** Joins: plastico (~plastico@neomutt/plastico)
[15:54:19] *** Joins: proller (~p@80.240.216.69)
[15:57:39] *** Quits: Inline (~Inline@p200300cd473ac50039f51e8a2d5e1728.dip0.t-ipconnect.de) (Quit: Leaving)
[16:00:23] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:06:08] <mrvn> From talks I learned to always use std::pmr::polymorphic_allocator<byte> if I need an alloactor and that items should never be moved if the allocators aren't equal. But I wonder if std::pmr::polymorphic_allocator shouldn't have a move method that works if the resources can move and std::pmr:std::pmr::memory_resource have a move method that can check if the upstream resource can move the object. Moving would
[16:06:14] <mrvn> update the bookkeeping but not copy the data. Does that make sense?
[16:07:19] <anyone> how are two totally independent allocators supposed to know of each other? They can't..
[16:07:31] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:07:37] <mrvn> They don't have to. They ask the resource.
[16:08:01] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[16:08:45] <mrvn> Imagine you have allocators that just count alloc/dealloc for performance statistics. Then they all have the new/delete resource and can move objects.
[16:10:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[16:13:44] *** Joins: promey (~Promeys@gateway/tor-sasl/promey)
[16:19:32] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[16:22:26] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Read error: Connection reset by peer)
[16:22:50] *** Quits: oakyy (~oaky@2-248-81-51-no181.tbcn.telia.com) (Quit: Leaving)
[16:27:59] <CarloWood> If you have a std::vector<std::unique_ptr<Foo>> v; and you created the foo already, ie, auto foo = std::make_unique<Foo>(); then how to best move foo into the vector? Using push_back, or emplace_back?
[16:28:35] <CarloWood> I suppose v.emplacec_back(std::move(foo)); ...
[16:28:35] *** Joins: Inline (~Inline@p200300cd473ac50039f51e8a2d5e1728.dip0.t-ipconnect.de)
[16:28:40] *** Quits: aosync (~aws@mx1.aosync.me) (Remote host closed the connection)
[16:28:41] <mrvn> if you gave it a name you have to std::move
[16:29:20] *** Joins: aosync (~aws@mx1.aosync.me)
[16:30:16] *** Quits: Inline (~Inline@p200300cd473ac50039f51e8a2d5e1728.dip0.t-ipconnect.de) (Client Quit)
[16:30:51] *** Joins: Inline (~Inline@p200300cd473ac50039f51e8a2d5e1728.dip0.t-ipconnect.de)
[16:30:53] *** Quits: walterwhip (~walterwhi@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:31:05] <CarloWood> Oh it makes no difference.
[16:31:15] <CarloWood> { auto foo = make_unique<tracked::B>(); std::vector<unique_ptr<tracked::B>> v; v.push_back(std::move(foo)); }
[16:31:15] <mrvn> I think it doesn't matter as it just gets forwarded anyway.
[16:31:16] <geordi> new(B) B0* B0~ delete(B0)
[16:31:28] <CarloWood> geordi: replace push_back with emplace_back
[16:31:28] <geordi> Same output.
[16:31:40] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 250 seconds)
[16:31:50] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Remote host closed the connection)
[16:35:51] *** Joins: ymwm__ (~yingmanwu@27.153.167.53)
[16:36:52] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[16:37:12] <Raziel> { auto foo = make_unique<tracked::B>(); std::vector<unique_ptr<tracked::B>> v; v.emplace_back(foo); }
[16:37:12] <geordi> error: no matching function for call to 'construct_at(unique_ptr<tracked::B, default_delete<tracked::B> >*&, unique_ptr<tracked::B, default_delete<tracked::B> >&)'
[16:37:17] <Raziel> noice
[16:37:35] <mrvn> Raziel: can't copy a std::uniq_ptr
[16:38:10] <Raziel> mrvn, true, I was wondering if it'd just automagically move instead
[16:38:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:38:21] *** Quits: ymwm_ (~yingmanwu@27.153.166.227) (Ping timeout: 252 seconds)
[16:38:32] <mrvn> It's not allowed to. You gave it a name and you still have access to that.
[16:38:40] <Raziel> { std::vector<unique_ptr<tracked::B>> v; v.emplace_back(make_unique<tracked::B>()); }
[16:38:41] <geordi> new(B) B0* B0~ delete(B0)
[16:39:04] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:39:28] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 250 seconds)
[16:39:35] <Raziel> mrvn, good point
[16:40:33] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[16:40:36] <mrvn> This is how I learned std::move: std::move says "I no longer need this object", which applies to anything you give a name. Temporaries just work by magic on their own.
[16:41:00] <Raziel> what happens if you do try to poke the name after you've done move on it?
[16:41:14] *** Quits: zoraj_ (~zoraj@209.126.81.159) (Quit: ZNC - https://znc.in)
[16:41:37] <mrvn> You can assign a new value or do any other operation declared safe to use on a move-out instance of the object. Everything else is UB.
[16:41:50] <Raziel> welp
[16:42:24] <mrvn> For example std::uniq_ptr has operator bool: checks if there is an associated managed object
[16:42:40] <mrvn> You can check if the pointer got moved out or returned after a function call.
[16:43:24] <Raziel> that is a nice addition, yeah
[16:43:31] *** Quits: artok_ (~azo@mobile-access-bcee54-113.dhcp.inet.fi) (Quit: fa)
[16:43:48] <mrvn> Not sure where you would use that but you can. It's allways well defined.
[16:45:35] <mrvn> hmm, why doesn't std::uniq_ptr have a getter that throws when no pointer is associated with it? Do I have to check for nullptr every time?
[16:50:40] *** Joins: Rynn (~rynn@216.30.158.198)
[16:54:40] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Remote host closed the connection)
[16:56:40] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[16:57:55] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[16:58:12] <cbreak> mrvn: ideally, you should know when it's set to a valid pointer or not
[16:59:29] <cbreak> it's a low level primitive, so it only handles ownership, it doesn't add any error checking on top
[17:01:01] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:01:45] *** Quits: aosync (~aws@mx1.aosync.me) (Remote host closed the connection)
[17:02:13] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:02:26] *** Joins: aosync (~aws@mx1.aosync.me)
[17:03:01] <mrvn> How does the function taking a std::uniq_ptr know this?
[17:04:07] <mrvn> I feel like every function with std::uniq_ptr now has to begin with: if (!ptr) throw InvalidArgument("Pointer must not be nullptr");
[17:04:46] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[17:05:32] *** Quits: zachel_ (~zachel@user/zachel) (Quit: DIsconnected: v7+nano)
[17:07:42] <mrvn> Looks like std::uniq_ptr allows me to reason about the ownership of the pointer but costs me the ability to say not_null. What am I missing?
[17:07:43] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[17:07:46] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:07:50] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:08:04] *** Joins: zachel (~zachel@user/zachel)
[17:10:53] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:10:57] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:11:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:11:25] *** Joins: pulse (~pulse@user/pulse)
[17:12:27] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:12:27] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:18:11] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:19:04] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[17:22:48] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[17:23:31] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:24:58] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[17:26:42] *** Quits: jfsimon1981 (~jfsimon19@116.68.6.84.rev.sfr.net) (Ping timeout: 250 seconds)
[17:26:45] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:29:08] *** Joins: Hawker (~pi@user/hawker)
[17:29:09] *** Quits: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:29:38] <Hawker> hey so what lib handles basic networking?
[17:30:08] <Hawker> I found some slides here that explain socket programming well but I feel liek there's a lib I'm missing
[17:30:32] <Hawker> https://www.csd.uoc.gr/~hy556/material/tutorials/cs556-3rd-tutorial.pdf
[17:30:59] <m_ben> Hawker: #C++-general is a better place for such questions
[17:32:01] <Hawker> ok, would you mind explaining the difference m_ben?
[17:32:13] <m_ben> !general
[17:32:14] <nolyc> #C++-general for algorithms, libraries, practices, projects, tools etc.
[17:32:24] <Hawker> ok what's this place?
[17:33:06] <mrvn> language lawyers?
[17:33:30] <Hawker> mrvn, brutal! XD
[17:33:47] <Hawker> ok guys you have fun!
[17:34:18] <mrvn> I think of #c++-general of "how" and #c++ as "why"
[17:34:57] <m_ben> !topic
[17:34:58] <nolyc> #C++ is strictly for Standard C++, including potential and future standardizations. Stay on topic in #C++. #C++-general is less strict, meant for libraries, projects, compilers, and tools in the wider C++ ecosystem, but still must pertain to C++ in some way.
[17:35:06] <m_ben> Hawker: ^
[17:35:54] <Hawker> ah I see, so here is where people argue about pedantic details or talk about why the language is structured the way it is?
[17:36:15] *** Quits: Perry (~perry@coffee-break.at) (Quit: ZNC - http://znc.in)
[17:36:59] *** Joins: Perry (~perry@coffee-break.at)
[17:37:11] <m_ben> yes, including all the c, rust, and java rants ;-)
[17:37:16] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[17:38:40] <anyone> Otherlanguage rants are off-topic, but it's easy to turn a blind eye if it's well-packaged in a C++ context.
[17:38:48] *** Joins: darkbit (~db@136.158.8.67)
[17:40:06] <Hawker> m_ben, so python isn't a topic around here?
[17:40:27] *** Joins: jfsimon1981 (~jfsimon19@37.66.6.84.rev.sfr.net)
[17:43:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:56] *** ChanServ sets mode: +v npaperbot
[17:46:36] *** Quits: jfsimon1981 (~jfsimon19@37.66.6.84.rev.sfr.net) (Ping timeout: 240 seconds)
[17:47:20] <fluter> why does vector requires the moving ctro to be noexcept to take advantage of it?
[17:47:29] <fluter> what if it's not noexcept?
[17:47:29] *** Joins: jfsimon1981 (~jfsimon19@197.59.6.84.rev.sfr.net)
[17:48:29] *** Parts: Hawker (~pi@user/hawker) (Leaving)
[17:49:49] <anyone> When you moved half the elements and the movector throws, what will you do? Move back? Might throw as well. You're in limbo.
[17:50:30] <fluter> anyone: but that's true for any functions..
[17:50:48] <fluter> what if copy ctor copied half ?
[17:50:58] <mrvn> then you do the same as vector
[17:51:06] <fluter> ?
[17:51:33] <mrvn> you require noexecpt for move and copy for execpt. Or you think of some complicated way to deal with it.
[17:51:55] <fluter> why does move requires noexcept?
[17:52:21] <mrvn> ah, sorry. "copy ctor copied half" In that case you free the broken copy and still have the working original.
[17:52:53] <fluter> so move ctor can do the same, right?
[17:52:54] <mrvn> fluter: vector doesn't want a vector with half the content moved out, ever.
[17:52:54] *** Quits: jfsimon1981 (~jfsimon19@197.59.6.84.rev.sfr.net) (Ping timeout: 272 seconds)
[17:53:20] <mrvn> fluter: yes, that's what I was refering to first. In your own move you can do the same. Move all with noexecpt or copy.
[17:53:21] <anyone> In a copy, throwing is fine. You can just discard the copy.
[17:53:31] *** Joins: jfsimon1981 (~jfsimon19@200.5.132.77.rev.sfr.net)
[17:53:43] <fluter> anyone: same for move
[17:54:04] <anyone> move does not copy
[17:54:08] <mrvn> you can't discard the object you move from. That belongs to someone else.
[17:54:27] <fluter> mrvn: you can restore it into original form
[17:54:31] <fluter> like move back, right?
[17:54:36] <anyone> what if move throws?
[17:54:45] <mrvn> Can you? What if that throws again?
[17:55:20] <cbreak> move shouldn't throw.
[17:55:20] <anyone> struct S { S()=default; S(S &&) { if (time(nullptr) >= 1234) throw 42; } }; std::vector<S> v, w; w = move(v); ...
[17:55:26] <fluter> you only move back what has ben moved, right?
[17:55:35] <fluter> like keep tracking what has been moved
[17:55:42] <mrvn> and the object itself has to do the same, recursively.
[17:56:05] *** Quits: murdoc_x01 (~nitestryk@98.42.49.72) (Ping timeout: 256 seconds)
[17:56:09] <cbreak> std::vector for example only gives strong exception guarantees if move can't throw, or if it copies the data
[17:56:09] <fluter> oh
[17:56:24] <mrvn> AT some point they just said: This gets too complicated and people will always mess it up and get garbage. Lets just not allow it because 99.999% of use cases don't need it.
[17:56:38] *** Quits: zachel (~zachel@user/zachel) (Quit: DIsconnected: v7+nano)
[17:57:00] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.228) (Ping timeout: 252 seconds)
[17:59:05] *** Joins: zachel (~zachel@user/zachel)
[18:08:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:11:54] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[18:12:09] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[18:12:57] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:14:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:20:16] *** Joins: vd (d4a4416b@67.205.143.82)
[18:22:40] *** Parts: vd (d4a4416b@67.205.143.82) (The Lounge - https://thelounge.chat)
[18:24:33] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:27:17] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-585f-140b-6646-4b30.res6.spectrum.com)
[18:30:31] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[18:35:19] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[18:35:58] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:36:20] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:39:08] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[18:39:08] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[18:39:08] *** Joins: AssKoala (~asskoala@user/asskoala)
[18:40:32] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[18:42:26] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[18:44:48] *** Joins: mintograde (~mintograd@47.201.5.61)
[18:45:16] *** Joins: Rayke (rayke@user/rayke)
[18:49:41] *** Joins: Atque (~Atque@user/atque)
[18:54:40] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[18:55:46] <Alipha> mrvn: people generally just don't check if the unique_ptr parameter is not nullptr because in c++ we typically just accept the UB if someone breaks a function's contract. If you want to add checks, perhaps in just debug builds, then go ahead. Though also note that geordi detects null dereference of unique_ptr, so that means there's some flag you can turn on. I'm assuming it's -D_GLIBCXX_DEBUG
[18:57:23] <mrvn> Except there is no contract saing unique_ptr shall not be nullptr. That's just convention. What if nullptr is perfectly fine and the function will allocated it's own object if none was given? std::option<std::unique_ptr<T>>?
[18:57:37] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[18:58:08] *** Joins: toulene8 (~toulene@user/toulene)
[18:58:39] *** Quits: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[19:00:05] <Alipha> mrvn: just document it. I'd assume almost every function which accepts a unique_ptr expects it to be not null. I'd rather just document it than deal with an std::optional
[19:00:15] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[19:00:21] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:ac39:dcc4:f026:98c)
[19:00:21] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:ac39:dcc4:f026:98c) (Changing host)
[19:00:21] *** Joins: skapata (~Skapata@user/skapata)
[19:01:01] <mrvn> compilers don't read comments. Users don't read comments. I don't read comments. Comments have prooven to be mostly useless for contracts. :(
[19:01:15] *** Joins: Guest1057 (~Guest10@2a02:21b0:644c:7e9f:3d6c:4ef2:3791:f782)
[19:01:29] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:02:12] <Alipha> You could use `using` to create nonnull_unique_ptr and nullable_unique_ptr aliases
[19:02:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:03:33] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 252 seconds)
[19:03:51] <mrvn> Maybe overload the move constructor too so moving nullptr into it fails.
[19:04:59] <mrvn> Overall an gsl::owner<T&> sounds like the right thing.
[19:05:32] <mrvn> ignoring I.11 from the guidelines
[19:06:51] <Alipha> " fluter: you only move back what has ben moved, right?" what if moving back throws?
[19:07:13] <cbreak> you can't avoid null unique pointers if you support moving.
[19:07:51] <cbreak> all moved-from unique_ptr have the potential to be null
[19:08:51] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:10:03] <mrvn> cbreak: I know. I just want to avoid having to check every unique_ptr passed into a function.
[19:10:59] <mrvn> A contract saying it's not OK. Not a comment that nobody reads.
[19:11:32] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[19:12:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[19:13:11] <mrvn> At the moment it fells to me like passing std::unique_ptr around only solves half the problem. The ownership and not the not_null.
[19:13:43] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[19:15:59] *** Quits: Guest1057 (~Guest10@2a02:21b0:644c:7e9f:3d6c:4ef2:3791:f782) (Ping timeout: 256 seconds)
[19:16:04] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[19:17:38] *** Joins: zer0x (~zer0x@1.55.210.143)
[19:23:43] *** Quits: toulene8 (~toulene@user/toulene) (Read error: Connection reset by peer)
[19:23:49] <mrvn> https://godbolt.org/z/a8a4j1Kb7   If a reference can be nullptr then how can I check it? And if it can't be then why can I write code like line 9 without warning?
[19:24:00] *** Joins: toulene (~toulene@user/toulene)
[19:24:52] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[19:26:43] *** Joins: ferdna (~ferdna@user/ferdna)
[19:26:48] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc6-git-38f80f4-Pogorze-Karpackie-CUSTOM-KERNEL)
[19:27:05] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:29:40] *** Joins: chir4gm (~chir4gm@user/chir4gm)
[19:30:06] *** Quits: deekej[m] (~deekej@2001:470:69fc:105::a6c) (Quit: You have been kicked for being idle)
[19:31:01] <cbreak> unique_ptr are pointers
[19:31:07] <cbreak> pointers can be null
[19:31:15] <cbreak> do you need to transfer ownership?
[19:31:39] <cbreak> references can not be nullptr.
[19:32:00] <cbreak> you could have a reference to nullptr, but that's ... not very useful
[19:32:04] <mrvn> I want to transfer ownership of a not_null pointer.
[19:32:39] <Alipha> mrvn: *i is UB
[19:32:42] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[19:33:11] <mrvn> cbreak: see the godbold url. references can be nullptr. They are not supposed to but they can. Assume I want to be paranoid and debug a problem and check references for nullptr anyway.
[19:33:39] <cbreak> references can't be nullptr
[19:33:44] <Alipha> mrvn: no, they can't. You invoked UB
[19:33:45] <cbreak> a reference refers to an object
[19:33:49] <mrvn> cbreak: theory meet practice
[19:33:54] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[19:34:07] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:34:15] <cbreak> it's not an object itself
[19:34:17] <mrvn> Alipha: I know that bla() is UB. The point is foo() can not check that.
[19:34:18] <cbreak> nullptr IS an object
[19:34:36] *** Quits: zer0x (~zer0x@1.55.210.143) (Ping timeout: 240 seconds)
[19:35:22] <cbreak> { auto const & npr = nullptr; }
[19:35:23] <geordi>  
[19:35:33] <cbreak> npr is a null-pointer-reference. Not very usefull.
[19:35:39] <cbreak> but it is not nullptr itself
[19:35:46] <mrvn> cbreak: not the point
[19:36:21] <mrvn> cbreak: how do you check that a reference isn't npr?
[19:36:33] <Alipha> mrvn: you can't check that other code has caused UB
[19:36:38] <cbreak> { auto const & npr = nullptr; std::cout << (npr == nullptr); }
[19:36:38] <geordi> true
[19:36:47] <cbreak> again: this is nonsense.
[19:36:54] <cbreak> it's working nonsense, but not useful
[19:37:23] <cbreak> you can consider nullptr a sentinel value
[19:37:27] <mrvn> cbreak: in theory it is nonsense. In practice it is usefull
[19:37:29] <cbreak> it only makes sense for pointers, nothing else
[19:37:53] <cbreak> you can compare any pointer to nullptr, and you will find out if it is equivalent to a null pointer.
[19:38:00] <cbreak> it will NOT tell you whether the pointer is actually valid
[19:38:08] <cbreak> or whether it points to an object that is still alive
[19:38:16] <cbreak> or whether it points to an object of the correct type
[19:38:17] <Alipha> mrvn: if you want a non-null unique_ptr class, then write one
[19:38:24] <mrvn> true. But you can not check if a reference is invalid and points to nullptr
[19:38:29] <cbreak> null pointers are not permitted to be dereferenced
[19:38:40] <mrvn> and I'm talking purely practice here.
[19:38:52] <cbreak> once you dereference a null pointer, your program is in an undefined
[19:39:02] <mrvn> nobody is dereferencing it
[19:39:05] <cbreak> state. It could explode, crash, format your hard disk, or call you names
[19:39:11] <cbreak> mrvn: then see my example
[19:39:27] <cbreak> it shows how you can check if a reference (to a pointer type) is equivalent to nullptr
[19:39:38] <mrvn> In my godbold url ignore bla, just look at foo
[19:39:53] <cbreak> your godbolt makes no sense
[19:40:05] <cbreak> the address of p is not null
[19:40:12] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[19:40:21] <cbreak> p refers to an object
[19:40:32] <cbreak> there are no objects at the nullptr address
[19:40:39] <cbreak> the compiler knows this
[19:41:05] <Alipha> mrvn: your assert is pointless
[19:41:37] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[19:41:55] *** Quits: promey (~Promeys@gateway/tor-sasl/promey) (Ping timeout: 240 seconds)
[19:42:17] <mrvn> cbreak: your test case is a referecne to a pointer. Not a reference that is illegally nullptr.
[19:42:18] *** Joins: AmR (~AmREiSa@156.199.236.198)
[19:42:44] <mrvn> Alipha: but saddly in practice it can happen.
[19:43:04] <cbreak> mrvn: indeed it is. that's by design.
[19:43:24] <cbreak> mrvn: because if it was a reference to a non-existing object, then the program is already in an undefined state
[19:43:26] <Alipha> mrvn: If you had `if(&p != nullptr) throw 1;` then the compiler is free to optimize that if and throw out because the if is always false according to the c++ standard
[19:43:29] <cbreak> and no code would make any sense anymore
[19:43:48] <cbreak> you can not recover from undefined behavior
[19:43:58] <mrvn> Please all forget theory for a moment and focus on real life. A function taking a ref can be called with nullptr. How do you add a debug check against that UB?
[19:44:08] <barometz> wrong channel for that
[19:44:09] <cbreak> mrvn:  not. at. all.
[19:44:21] <cbreak> mrvn: you see the warnings from the compiler?
[19:44:24] <cbreak> those are not empty warnings.
[19:44:47] <barometz> you're getting answers from the perspective of the C++ standard, but are looking (it seems) for answers from the perspective of multiple implementations thereof
[19:45:06] <barometz> this channel is for one of those and not the other, and trying to go against that will only yield frustration
[19:45:20] <mrvn> Yeah, its impossible to ask language laywers about praxis problems. I will ask in c+-general.
[19:45:26] <cbreak> mrvn: https://godbolt.org/z/9M56WqnqG, the compiler KNOWS that the reference will not refer to an object at the null address
[19:45:38] <cbreak> so the compiler returns true, always, from this function
[19:45:43] <cbreak> it will not check
[19:45:44] <mrvn> cbreak: that is the problem.
[19:45:53] <cbreak> this is because the compiler is correct
[19:46:06] <cbreak> it is foolish to try to recover from UB
[19:46:22] <cbreak> you can not make any assumption about the state of a program, after it has invoked undefined behavior
[19:46:25] <mrvn> cbreak: in theory that check makes no sense. I'M looking for a way to tell the compiler to ignore that and check anyway. But ==> c++-general. wrong channel here.
[19:46:54] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 272 seconds)
[19:47:00] <cbreak> what you should do is to try to avoid undefined behavior
[19:47:12] <cbreak> trying to recover from it is too late.
[19:47:25] <cbreak> even detecting it is hard. You'd have to run ubsan or similar
[19:48:12] <mrvn> cbreak: I just want the code to fail at the point where the asser is so I can look at a backtrace to find the UB.
[19:48:32] <PJBoy> it wouldn't be UB if you could check for it <_<
[19:53:20] *** Quits: magla (~gelignite@55d47190.access.ecotel.net) (Quit: Stay safe!)
[20:01:38] *** Joins: pizdets (~pizdets@183.182.114.230)
[20:06:26] *** Quits: pizdets (~pizdets@183.182.114.230) (Ping timeout: 265 seconds)
[20:09:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:13:30] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[20:17:02] *** Joins: pizdets (~pizdets@183.182.115.241)
[20:17:23] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[20:20:05] *** Joins: Markow (~Markow@176.122.215.103)
[20:21:11] *** Quits: pizdets (~pizdets@183.182.115.241) (Ping timeout: 245 seconds)
[20:23:13] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[20:31:47] *** Joins: pizdets_ (~pizdets@183.182.114.15)
[20:36:26] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[20:37:40] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:38:49] *** Quits: pizdets_ (~pizdets@183.182.114.15) (Ping timeout: 265 seconds)
[20:40:27] *** Joins: Guest1082 (~Guest10@2a02:21b0:644c:7e9f:3d6c:4ef2:3791:f782)
[20:44:57] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[20:47:24] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[20:50:03] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:53:02] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[20:54:21] *** Joins: Betal (~Betal@user/betal)
[20:55:37] *** Joins: pizdets (~pizdets@183.182.111.163)
[20:57:41] *** Parts: mrvn (~mrvn@ip-046-005-255-082.um12.pools.vodafone-ip.de) ()
[21:00:35] *** Quits: pizdets (~pizdets@183.182.111.163) (Ping timeout: 265 seconds)
[21:00:46] *** Quits: ymwm__ (~yingmanwu@27.153.167.53) (Ping timeout: 250 seconds)
[21:02:30] *** Quits: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca) (Quit: WeeChat 2.8)
[21:03:50] <chir4gm> What is the "-latomic" flag, and how can I gen it to work?
[21:04:00] <chir4gm> I am trying to work on a verilator project.
[21:05:40] *** Joins: pizdets (~pizdets@183.182.114.244)
[21:06:09] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[21:07:51] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[21:08:24] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[21:10:15] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:11:16] *** Quits: Guest1082 (~Guest10@2a02:21b0:644c:7e9f:3d6c:4ef2:3791:f782) (Quit: Client closed)
[21:11:32] *** Joins: angelacrust (~angelacru@182.64.84.36)
[21:11:41] <PJBoy> links the atomic library
[21:12:37] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[21:13:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[21:13:22] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:13:41] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[21:13:56] <PJBoy> you write it as part of your build flags when using gcc/clang
[21:15:03] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:15:44] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:17:20] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:17:29] *** Quits: pizdets (~pizdets@183.182.114.244) (Ping timeout: 265 seconds)
[21:20:38] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[21:22:43] *** Joins: pizdets (~pizdets@183.182.110.14)
[21:27:17] *** Joins: cheater (~Username@user/cheater)
[21:27:27] *** Quits: pizdets (~pizdets@183.182.110.14) (Ping timeout: 256 seconds)
[21:29:53] *** Joins: pizdets (~pizdets@183.182.110.16)
[21:31:43] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[21:33:00] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:33:00] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:33:12] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:33:13] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[21:38:47] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:38:47] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:42:05] *** Joins: Xardas (~Xardas@149.233.51.127)
[21:43:31] *** Quits: namkeleser (~namkelese@101.175.104.107) (Quit: Client closed)
[21:43:44] <Xardas> int main(int argc, char *argv[]) { /*...*/ } // If we dereference argv this way argv[0] shouldn't we normally get an address ?
[21:43:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:57] <Xardas> since argv is an array of pointers
[21:43:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:57] *** ChanServ sets mode: +v npaperbot
[21:45:24] *** Quits: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7) (Ping timeout: 240 seconds)
[21:46:48] *** Joins: jbalint (~jbalint@071-090-119-177.res.spectrum.com)
[21:48:46] <Alipha> Xardas: yes, argv[0] is a chard
[21:48:51] <Alipha> Eh, char*
[21:49:25] <Xardas> Therefore argv[0] does not yield a string
[21:49:50] <Xardas> if I do $ ./prog hello world
[21:49:54] <Xardas> argc will be 3
[21:49:58] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[21:50:22] <Xardas> argv[0] will have the address of hello
[21:50:25] *** Joins: magla (~gelignite@55d47190.access.ecotel.net)
[21:50:33] <Xardas> argv[1] address of world
[21:51:18] <Xardas> but when I compile this ...somehow it gives me strings instead of 0x3455565 addresses
[21:52:04] <cbreak> Xardas: no
[21:52:13] <cbreak> argv[0] will be a pointer pointing to .
[21:52:24] <cbreak> (representing a C string "./prog")
[21:52:46] <cbreak> Xardas: the type of argv[0] is without doubt char *
[21:53:09] <cbreak> this is commonly interpreted not as pointer to char, but as C String
[21:53:20] <cbreak> sometimes that's a mistake. In this case, it is a C String.
[21:53:37] <cbreak> { std::cout << argv[0]; }
[21:53:37] <geordi> /geordi/run/t
[21:55:06] <Xardas> So everytime a compiler encounters a char* will have it automatically dereferenced ?
[21:55:21] <cbreak> no
[21:55:31] <Xardas> Or only when it ends with a '\0' ?
[21:55:34] <cbreak> no.
[21:55:44] <cbreak> there's no automatic dereferencing going on anywhere
[21:56:34] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:55e3:354c:cb16:8919)
[21:57:07] <Xardas> these c-style string are weird
[21:57:45] <cbreak> yes :(
[21:58:46] <Xardas> :(
[21:59:11] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:01:00] *** Joins: reset (~reset@user/reset)
[22:02:22] <Alipha> Xardas: cout (and various functions) assume char* is a c string and will print each char until it reaches a \0 (or do whatever special behavior)
[22:02:29] *** Joins: zoraj (~zoraj@vmi794994.contaboserver.net)
[22:03:14] <Xardas> Now that makes sense
[22:03:42] <Xardas> I'm learning from c++ primer, I wonder why the hell didn't he mention that
[22:03:50] <Xardas> lots of confusion from books honestly
[22:03:54] <Alipha> This is just function/operator overloading. You pass an int to cout, it calls the function to print an int. You pass a double, it has logic to print a double.
[22:04:17] <cbreak> yes, as I said, it's just a common interpretation
[22:04:36] <Xardas> I think by trying to avoid confusing beginners, they end up confusing us more
[22:04:43] <cbreak> C Strings are legacy
[22:04:52] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[22:04:57] <cbreak> so they are less well thought-out than modern features. At least some :)
[22:05:47] *** Quits: gnomesort (~gnomesort@user/gnomesort) (Quit: ZNC - https://znc.in)
[22:05:50] <Xardas> So people don't use them anymore ?
[22:06:07] <cbreak> they're used a lot
[22:06:39] *** Quits: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net) (Quit: Client closed)
[22:06:43] <Xardas> Thank you guys for explaining
[22:07:18] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:08:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:09:21] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[22:09:24] <Alipha> std::string is preferred, but so much code, libraries, etc use char arrays that you still have to work with char arrays directly a lot
[22:09:29] <Xardas> Not just cout but also print() in C right ?
[22:09:48] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[22:10:00] <Xardas> print("%s", argv[0]);
[22:10:07] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:10:15] <Xardas> this gives string too
[22:10:25] <cbreak> C Strings are used in all C APIs
[22:10:30] <cbreak> printf is C
[22:10:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:12:29] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[22:13:19] *** Joins: csileeeeeeeeeeoe (~csileeeee@50.232.121.75)
[22:14:13] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[22:15:03] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:15:18] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 250 seconds)
[22:15:33] *** Joins: murdoc_x01 (~nitestryk@98.42.49.72)
[22:15:40] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: WeeChat 3.4)
[22:15:51] *** Quits: angelacrust (~angelacru@182.64.84.36) (Quit: Client closed)
[22:16:15] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[22:16:22] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[22:17:38] *** Quits: gnomesort (~gnomesort@user/gnomesort) (Quit: ZNC - https://znc.in)
[22:18:30] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[22:21:00] *** Quits: pizdets (~pizdets@183.182.110.16) (Ping timeout: 252 seconds)
[22:22:17] *** Joins: pizdets (~pizdets@183.182.114.148)
[22:22:25] *** Quits: Figworm (FiggyWitIt@user/figworm) (Quit: Figworm)
[22:22:37] *** gentooclimax is now known as climax
[22:23:58] *** Quits: mgot_ (~mgot@vps-35cddd71.vps.ovh.net) (Quit: Goodbye)
[22:24:36] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[22:24:48] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[22:25:48] *** climax is now known as gentooclimax
[22:25:49] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:25:53] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[22:26:41] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:30:26] <RandomReader> Xardas - C-style strings are just a convention .. "how can we represent a specific-length sequence of characters?" "well, let's just keep a pointer to the first char in the sequence, and we'll mark the end with the char value 0"
[22:31:45] <RandomReader> but that does mean that char* in practice is often assumed (by the functions being called / operators being used) to be a pointer-to-string and treated that way, even though the type itself is just a pointer-to-single-char like every other pointer
[22:34:47] <RandomReader> cout is one of those that makes the assumption (more specifically, the ostream insertion operator << has an overload that treats char* as a string, and cout is an ostream)
[22:36:16] <RandomReader> for printf, it's the %s format specifier that does
[22:36:40] <RandomReader> to print the value of a pointer, you'd use %p
[22:37:44] <CodePoint> When you make an assumtion often enough, it becomes a "standard".
[22:39:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:39:49] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:39:49] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:40:00] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:40:06] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[22:41:42] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[22:42:56] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[22:44:13] *** Joins: yhirose3 (~yhirose@user/yhirose3)
[22:45:39] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:45:39] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:46:08] <RandomReader> (and thus, there is confusion today from something that seemed convenient in the 1970s...)
[22:46:08] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 272 seconds)
[22:46:31] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[22:47:26] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[22:48:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:53:22] *** Quits: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[22:55:16] <Xardas> Thanks for explaining it
[23:01:24] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8da:9afd:10c2:81a6) (Ping timeout: 240 seconds)
[23:02:45] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9d44:ce22:b648:2a17)
[23:03:51] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[23:11:37] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:13:39] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:13:55] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[23:14:18] *** Quits: magla (~gelignite@55d47190.access.ecotel.net) (Read error: Connection reset by peer)
[23:14:49] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 268 seconds)
[23:15:16] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[23:16:09] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[23:17:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:19:56] *** Quits: rvalue (~rvalue@user/rvalue) (Remote host closed the connection)
[23:20:13] *** Quits: yhirose3 (~yhirose@user/yhirose3) (Ping timeout: 256 seconds)
[23:20:38] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[23:20:49] *** Joins: rvalue (~rvalue@user/rvalue)
[23:23:23] *** Joins: magla (~gelignite@55d47190.access.ecotel.net)
[23:25:15] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[23:28:54] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:31:26] *** Quits: Markow (~Markow@176.122.215.103) (Remote host closed the connection)
[23:31:31] *** Parts: v4mp (~v4mp@user/v4mp) ()
[23:31:45] *** Joins: Markow (~Markow@176.122.215.103)
[23:32:07] *** Joins: v4mp (~v4mp@user/v4mp)
[23:32:15] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[23:33:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[23:34:03] *** Joins: teepee (~teepee@openscad/teepee)
[23:34:45] *** Quits: pizdets (~pizdets@183.182.114.148) (Ping timeout: 265 seconds)
[23:35:38] *** Joins: pizdets (~pizdets@183.182.115.101)
[23:36:42] *** Joins: walterwhip (~walterwhi@user/walterwhip)
[23:40:04] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[23:40:32] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[23:41:18] *** Quits: walterwhip (~walterwhi@user/walterwhip) (Ping timeout: 252 seconds)
[23:42:34] *** Joins: lxsameer (lxsameer@user/lxsameer)
[23:42:47] *** Joins: teepee (~teepee@openscad/teepee)
[23:45:23] *** Joins: ferdna (~ferdna@user/ferdna)
[23:48:37] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[23:52:05] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:52:05] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:52:19] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:52:21] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[23:58:50] *** Joins: xuxx (~xuxx@86.228.71.37.rev.sfr.net)
[23:59:19] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:59:19] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
