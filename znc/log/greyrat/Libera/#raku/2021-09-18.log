[00:00:49] *** Quits: randy88 (~randy@c-24-1-7-54.hsd1.il.comcast.net) (Quit: Connection closed)
[00:04:00] *** Joins: randy100 (~randy@c-24-1-7-54.hsd1.il.comcast.net)
[00:04:02] *** Quits: randy100 (~randy@c-24-1-7-54.hsd1.il.comcast.net) (Client Quit)
[00:30:52] *** Quits: sftp (~sftp@79.174.36.182) (Ping timeout: 265 seconds)
[00:40:49] *** Joins: sftp (~sftp@79.174.36.182)
[00:46:05] *** Parts: bgran (~nobody@swift.havoc.fi) ()
[01:46:05] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:47:52] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[02:34:51] *** Quits: jess (~jess@libera/staff/jess) ()
[03:34:52] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:34:52] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[03:34:52] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[03:35:39] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[03:36:15] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[03:37:24] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[04:32:47] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:32:47] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:32:47] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:32:47] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:32:48] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:32:48] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:33:11] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[05:33:24] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[05:33:30] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[05:33:41] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[05:34:03] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[05:34:21] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[05:34:31] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[05:34:37] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[05:35:06] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[05:35:37] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[05:35:40] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[05:35:43] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[05:35:54] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[05:58:48] *** gordonfish- is now known as gordonfish
[06:58:49] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:58:49] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:58:49] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:58:49] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:58:49] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:58:49] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:58:49] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:58:49] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:58:49] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:58:49] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:58:49] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:58:49] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:58:49] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:59:17] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[07:00:09] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[07:00:10] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[07:00:25] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[07:00:29] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[07:00:33] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[07:01:07] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[07:01:27] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[07:01:57] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[07:33:40] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[07:33:56] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[07:34:22] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[07:34:38] *** Joins: frost (~frost@59.71.243.104)
[07:34:45] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[07:59:03] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[08:00:21] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[08:01:05] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[08:29:42] *** Quits: bdju (~bard@user/bdju) (Ping timeout: 260 seconds)
[08:31:44] *** Joins: bdju (~bard@user/bdju)
[08:35:07] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[08:38:04] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[09:38:04] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:38:04] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:38:04] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:04] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[09:38:05] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[09:38:25] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[09:38:26] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[09:38:55] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[09:38:58] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[09:38:58] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[09:39:08] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[09:39:11] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[09:39:16] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[09:39:19] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[09:39:52] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:39:56] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[09:40:59] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[09:41:12] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[10:17:35] *** Quits: codesections (2d10c979@67.205.143.82) (Quit: The Lounge - https://thelounge.chat)
[10:32:27] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:38:36] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[10:38:45] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[10:39:21] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[10:40:54] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[11:32:53] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[11:56:08] *** Quits: frost (~frost@59.71.243.104) (Quit: Connection closed)
[12:01:09] *** Joins: frost (~frost@59.71.243.104)
[12:02:01] *** Quits: sena_kun (~koto@188.163.64.2) (Quit: Leaving)
[12:03:05] *** Joins: sena_kun (~koto@188.163.64.2)
[12:30:49] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Quit: WeeChat 3.2)
[12:34:53] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[12:50:22] *** Quits: sena_kun (~koto@188.163.64.2) (Ping timeout: 265 seconds)
[12:53:44] *** Joins: sena_kun (~koto@188.163.64.2)
[13:53:44] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:53:45] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:53:45] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:53:45] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:53:45] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:53:45] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:53:45] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:53:45] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:53:45] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:53:45] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:53:45] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:53:45] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:53:45] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[13:53:45] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[13:53:45] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[13:53:45] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[13:53:45] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[13:53:45] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[13:54:21] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[13:54:46] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[13:54:53] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[13:55:33] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[13:55:47] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[13:55:47] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[13:55:52] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[13:56:03] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[14:07:17] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:11:39] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:12:20] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[14:44:24] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:46:52] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[14:47:30] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:52:29] <grondilu> wasn't there such a thing as a 'parsed' trait to define terms constrained by a Grammar/regex?
[14:55:14] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[14:55:41] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[14:56:02] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[14:56:55] <lizmat> not in current core
[14:57:16] <lizmat> doesn't ring a bell with me, maybe with moritz_ ?
[15:02:39] <grondilu> found it.  It's discussed in S06
[15:03:03] <grondilu> however : "This trait and the following are likely to be deprecated in favor of slang macros that are aware of the grammar and category in which they are installed, and that therefore already know how to parse like normal grammar rules. "
[15:03:18] <grondilu> so macro it is I guess
[15:04:58] * grondilu is not sure how that would work though
[15:05:54] * lizmat neither
[15:48:30] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[15:54:02] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[15:54:22] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[15:56:13] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[15:56:44] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[15:56:49] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[15:56:52] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[16:09:18] <grondilu> say I hawe a module Foo that uses an other module Bar.  How can I have Foo export all the symbols that Bar exports?
[16:10:10] <grondilu> with heritage maybe?
[16:10:24] <lizmat> by playing EXPORT tricks
[16:10:45] <lizmat> see e.g. P5built-ins that imports / exports all of the other P5xxx modules
[16:11:51] <lizmat> https://github.com/lizmat/P5built-ins/blob/main/lib/P5built-ins.rakumod
[16:20:08] *** Quits: bdju (~bard@user/bdju) (Ping timeout: 265 seconds)
[16:20:44] *** Joins: bdju (~bard@user/bdju)
[16:32:37] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:35:37] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[16:38:37] *** Quits: frost (~frost@59.71.243.104) (Quit: Connection closed)
[16:42:53] <tbrowder> m: my $fh = $*OUT
[16:42:53] <camelia> rakudo-moar 10b327292: ( no output )
[16:43:55] <tbrowder> m: my $s="howdy"; my $fh=$*OUT; $fh.say: $s
[16:43:55] <camelia> rakudo-moar 10b327292: OUTPUT: «howdy␤»
[16:44:53] <tbrowder> just checking to see if i can use a shorthand for writing to stdout
[16:45:56] <tbrowder> m: my $fh = $*OUT; $fh.say("foo"); $fh.close
[16:45:57] <camelia> rakudo-moar 10b327292: OUTPUT: «foo␤»
[16:47:45] <tbrowder> m: my $fh=$*OUT; my $s="bar";$fh.say($s);$fh.close; say $s
[16:47:45] <camelia> rakudo-moar 10b327292: OUTPUT: «bar␤Cannot do 'print' on a closed handle␤  in block <unit> at <tmp> line 1␤␤»
[16:50:24] <tbrowder> so, using the alias in a program, i think the "close open file handles when done with them" rule should generally not be followed for std* handles
[16:51:25] <tbrowder> rakuing down the river...bye
[16:55:00] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[17:10:44] <grondilu> there is no such thing as a parametric module, is there?
[17:12:52] <lizmat> grondilu: ? what do you mean by that?
[17:13:49] <grondilu> 'use Foo(:param(value));'
[17:14:39] <grondilu> I guess I can do 'use Foo; $Foo::param = value;'
[17:14:55] <lizmat> that'd be passing :param(value) to its EXPORT SUB
[17:15:01] <lizmat> grondilu *sub, no?
[17:15:25] <lizmat> you could use that to parameterize, I guess
[17:15:30] <grondilu> wrong syntax then
[17:15:44] <lizmat> but it feels better to just export a parameterizable role
[17:15:50] <lizmat> and parameterize that
[17:16:26] <grondilu> I don't want to compose it though so it's not a role I want.
[17:17:19] <lizmat> you can also have a class with a ^parameterize method ?
[17:18:40] <grondilu> I don't want to instanciate it either.  Nevermind I think I just have to assign a our variable.
[17:19:28] <grondilu> setting it during in the use statement would feel convenient, though.
[17:20:13] <grondilu> syntax would have been rather 'use Foo[param];' or something I guess
[17:20:21] <discord-raku-bot> <Anton Antonov#7232> "but it feels better to just export a parameterizable role" -- we can see modules as classes, hence switching from a module to a role is not that far fetched conceptually.
[17:22:33] <discord-raku-bot> <Anton Antonov#7232> This SO discussion is related to my statement above: https://stackoverflow.com/q/67564394
[17:22:37] <lizmat> m: role Foo { $.a = 42 };  dd Foo.new.a   # and there's role punning
[17:22:37] <camelia> rakudo-moar 10b327292: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable $.a used where no 'self' is available␤at <tmp>:1␤------> 3role Foo { $.a7⏏5 = 42 };  dd Foo.new.a   # and there's r␤    expecting any of:␤        term␤»
[17:22:47] <lizmat> m: role Foo { has $.a = 42 };  dd Foo.new.a   # and there's role punning
[17:22:47] <camelia> rakudo-moar 10b327292: OUTPUT: «42␤»
[17:55:01] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[17:55:01] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[17:57:42] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[18:13:01] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[18:13:17] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[18:18:41] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[18:22:56] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[18:47:19] *** Joins: adm (~adm@106.210.212.223)
[18:49:31] *** Quits: adm (~adm@106.210.212.223) (Client Quit)
[19:49:32] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:50:10] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[19:55:58] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[20:04:32] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[20:06:16] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[20:11:34] *** Joins: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net)
[20:12:26] <Skarsnik> Hello, I am confused by some block syntax/error?
[20:12:36] <Skarsnik> m: try {say "hello"; die "piko"; True} or say "plop"
[20:12:36] <camelia> rakudo-moar 10b327292: OUTPUT: «hello␤plop␤»
[20:12:43] <Skarsnik> try {say "hello"; die "piko"; True} or {say "plop"}
[20:12:44] <evalable6> Skarsnik, rakudo-moar 10b327292: OUTPUT: «hello␤»
[20:13:53] <Skarsnik> I am not sure to understand why the second run does say plop
[20:15:21] <ugexe> m: my $a = {say 42}; say $a
[20:15:21] <camelia> rakudo-moar 10b327292: OUTPUT: «-> ;; $_? is raw = OUTER::<$_> { #`(Block|74802872) ... }␤»
[20:15:49] <ugexe> m: my $a = {say 42}; say $a()
[20:15:49] <camelia> rakudo-moar 10b327292: OUTPUT: «42␤True␤»
[20:16:36] <Skarsnik> *does not
[20:18:01] <ugexe> because you didnt use `do`
[20:21:44] <Skarsnik> Was there a command to run on old rakudo version?
[20:22:22] <Skarsnik> I dit a PR with code like this to fix a bug in Test and it does not work x)
[20:22:38] <Skarsnik> !whateverable
[20:24:23] <Skarsnik> commit: 2020.01 try {say "hello"; die "piko"; True} or {say "plop"
[20:24:24] <committable6> Skarsnik, https://gist.github.com/937d23dfa33d6ad65d23b58b13b4db1d
[20:24:26] <Skarsnik> commit: 2020.01 try {say "hello"; die "piko"; True} or {say "plop"}
[20:24:27] <committable6> Skarsnik, ¦2020.01: «hello␤»
[20:32:46] <ugexe> i suspect your PR did not work the way you think then
[20:35:53] <Skarsnik> not sure why the test did not caught it
[20:41:39] <Skarsnik> Oh, I did not write a test for the input x)
[20:44:40] <Skarsnik> I wonder if there are other case where it could be useful to maybe have a class doing her own test failure output.
[20:44:59] <Skarsnik> # expected: Buf.new(22,25)
[20:44:59] <Skarsnik> #      got: Buf.new(22,255)
[20:45:10] <Skarsnik> having the number in hex is more useful
[20:46:03] <Skarsnik> especially if like the diff is at the 15 bytes, not easy to see if the expected & got string does not make them match
[20:58:10] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[20:58:36] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[20:59:24] <Skarsnik> Can I call a non exported sub from a Module? Like I writing my own is sub in my code x)
[21:02:08] <Skarsnik> Or can I directly make part of a my code being part of the Test module?
[21:09:29] <timo> nice to see you Skarsnik :3
[21:09:54] <timo> the Test module would probably want to get some kind of API for this purpose
[21:10:43] <Skarsnik> Whenever I propose a new API it stay 4 years without answers! (just kidding)
[21:13:20] <Skarsnik> timo, any news on your profiler? :)
[21:16:25] <timo> i just resumed work on it actually
[21:16:54] <timo> i made the mistake of just running "npm update" and hoping it would continue working
[21:16:58] <timo> it did not :D
[21:17:33] <Skarsnik> I will try do run some benchmark when the new release is out. I am curious of the gain on Gumbo benchmark
[21:18:00] <timo> well, new-disp isn't merged yet, and nativecall is also not yet integrated with it in even the most basic form
[21:18:12] <timo> so it's likely not going to be much better immediately
[21:18:47] <Skarsnik> What is new-disp in summary?
[21:20:33] <timo> well, there's an excellent jnthn presentation about it, and i'll likely not do it justice with just a short summary
[21:21:22] <timo> one part of it is about generalising a bunch of systems into just one. for example, the method cache is gone now
[21:21:50] <timo> AFK for a moment
[21:34:28] <timo> ok, so we've now got a mechanism that lets the programmer (probably only core developers mostly, though) write in code how different kinds of "dispatch" work
[21:35:26] <timo> where dispatch encompasses pretty much everything where "a bunch of arguments go in, a decision what to call or return is made, and that is then acted upon"
[21:37:05] <timo> so this is for stringifying things (do we have a built-in C function? do we call .Str on the thing?), deconting things (is it a simple container so we just have to take an attribute? is it a Proxy where we need to invoke a FETCH method?), of course calling raku methods (is there a wrapper? is the proto sub complex? what decides what multi to invoke? are there "where" clauses?) and also this has a way
[21:37:07] <timo> to program "resumption"
[21:37:24] <timo> resumption is for things like nextsame/callsame/samewith/callwith
[21:41:17] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[21:58:45] *** Quits: Tirifto (~Tirifto@47-186-71-19.dlls.tx.frontiernet.net) (Quit: Ĝis revido!)
[21:59:31] *** Joins: Tirifto (~Tirifto@47-186-71-19.dlls.tx.frontiernet.net)
[22:18:07] <timo> Skarsnik: anyway, with moarvm being "in the know" about all these more complex mechanisms, we can have the optimizer understand things better and do inlining and optimization in many more cases than before :)
[22:18:41] <Skarsnik> interesting ^^
[22:18:51] <timo> absolutely give jnthn's talk a shot
[22:32:44] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:33:22] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:42:51] <Skarsnik> Now you need to profile the choice the optimiser made? x)
[22:54:21] *** Joins: immedlate (~immedlate@37.155.248.26)
[22:57:07] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[22:59:31] *** Joins: Sgeo (~Sgeo@user/sgeo)
[23:22:34] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Ping timeout: 265 seconds)
[23:31:26] <timo> well, we'll get to see deoptimization counts, and we'll see the inlining decisions
[23:31:47] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[23:31:58] <timo> apart from that we see the generated guards and such in the spesh log
