[00:20:00] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[01:22:31] *** Joins: _aeris_ (~aeris@user/aeris)
[01:24:00] *** Quits: aeris (~aeris@user/aeris) (Ping timeout: 276 seconds)
[01:24:09] *** _aeris_ is now known as aeris
[01:34:15] *** Joins: quazimodo (~quazimodo@n1-40-235-47.bla1.nsw.optusnet.com.au)
[02:03:26] *** Quits: vit (~vit@chello085216193138.chello.sk) (Ping timeout: 245 seconds)
[02:29:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[02:37:13] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:07:53] *** Joins: factor (~factor@c-66-30-67-217.hsd1.ma.comcast.net)
[04:58:59] *** Joins: edrx (~Eduardo@2804:56c:d2f8:6c00:8c05:c5be:fc20:16c)
[05:04:31] *** Joins: MalkbabY (MalkbabY@user/malkbaby)
[05:46:17] *** Joins: roshanavand (~roshanava@193.27.14.26)
[05:55:27] *** Quits: roshanavand (~roshanava@193.27.14.26) (Remote host closed the connection)
[06:02:37] *** Joins: roshanavand (~roshanava@193.27.14.132)
[06:07:14] *** Quits: roshanavand (~roshanava@193.27.14.132) (Ping timeout: 244 seconds)
[06:56:31] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[06:58:42] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:00:45] *** Joins: Pancakes11 (~Pancakes@2607:fb90:863a:d6e0:2d86:89b7:847f:b734)
[07:01:19] *** Quits: Pancakes11 (~Pancakes@2607:fb90:863a:d6e0:2d86:89b7:847f:b734) (Client Quit)
[08:24:51] *** Quits: MalkbabY (MalkbabY@user/malkbaby) (Quit: Leaving...)
[08:30:25] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (*.net *.split)
[08:30:25] *** Quits: nolesswrong (~nolesswro@45.32.1.17) (*.net *.split)
[08:30:25] *** Quits: nowaker_ (~quassel@188.116.38.80) (*.net *.split)
[08:30:25] *** Quits: wmoxam_ (~wmoxam@li130-207.members.linode.com) (*.net *.split)
[08:30:25] *** Quits: georgemp (~georgemp@aemon.roguemonkeys.com) (*.net *.split)
[08:30:25] *** Quits: leftylink (~leftylink@user/leftylink) (*.net *.split)
[08:30:32] *** Joins: wmoxam (~wmoxam@li130-207.members.linode.com)
[08:30:33] *** Joins: nolesswrong (~nolesswro@45.32.1.17)
[08:30:34] *** Joins: Nowaker (~quassel@188.116.38.80)
[08:30:51] *** Joins: leftylink (~leftylink@user/leftylink)
[08:31:30] *** Joins: georgemp (~georgemp@aemon.roguemonkeys.com)
[08:35:12] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[08:47:10] *** Quits: jpw_ (~jpw@user/jpw) (Remote host closed the connection)
[09:02:31] *** Joins: ur5us (~ur5us@2406:e002:6c33:6d01:90c2:1bd2:83db:98)
[09:30:49] *** Joins: vit (~vit@chello085216193138.chello.sk)
[09:38:11] *** Quits: ur5us (~ur5us@2406:e002:6c33:6d01:90c2:1bd2:83db:98) (Ping timeout: 264 seconds)
[09:46:59] *** Parts: edrx (~Eduardo@2804:56c:d2f8:6c00:8c05:c5be:fc20:16c) (Killed buffer)
[09:49:18] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[09:49:31] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[09:49:37] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Client Quit)
[09:50:07] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[10:02:11] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-0d00-af10-da91-027d.res6.spectrum.com) (Ping timeout: 245 seconds)
[10:04:30] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-0d00-af10-da91-027d.res6.spectrum.com)
[10:55:49] *** Joins: Bounga (~nico@82-65-32-175.subs.proxad.net)
[10:56:54] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[11:00:58] *** Quits: mahlon (~mahlon@martini.nu) (Quit: PotatoTech)
[11:01:18] *** Joins: mahlon (~mahlon@martini.nu)
[11:50:55] *** Quits: yosafbridge` (~yosafbrid@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[12:10:40] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[12:29:24] *** Joins: Intelo (~Intelo@88.246.77.74)
[12:29:26] <Intelo> While doing integration test for api testing. What is a good way to test? a) make api call inside test code and also directly check (fetch/select) entries in database those were supposed to be created by that api cal. b) in response of real api call, always return json of objects created in database (e.g user created, even if its a GET call and 200
[12:29:26] <Intelo> response might have been ok, just to test what was created, I should return what was inserted / updated in database for each api call c) try to check one api with another api (this might not always be possible). e.g test create user api with user profile api. If user was created successfully, then profile api should return correct data. c) any
[12:29:27] <Intelo> other?
[12:43:43] *** Quits: yxhuvud (~quassel@2001:1ba8:1424:ea00:d77a:f865:bb11:d663) (Remote host closed the connection)
[12:44:25] *** Joins: yxhuvud (~quassel@2001:1ba8:1424:ea00:7245:2dbb:c145:f7d9)
[13:15:39] <nakilon> Intelo I go for C
[13:16:33] <nakilon> in my opinion you should do only unit-testing and functional/integration testing, not anything in between
[13:17:16] <nakilon> so you use as high level methods as possible, i.e. just use api calls and don't access db at all
[13:18:33] <nakilon> on my prevprevious job I had to spend half of the time fixing legacy tests that were not made in that in mind, spent time stupidly on throwing out sql requests, wrongly places procedures of connecting to db, etc.
[13:28:36] *** Joins: fandre1986 (~fandre198@178-36-241-155.adsl.inetia.pl)
[13:28:50] <Intelo> nakilon ok so lets say I am testing a user registration api. It has name, email, address. How will I verify that the user actually got registered and the data was saved in the database?
[13:30:29] *** Joins: goepsilongo_ (~goepsilon@2603-7000-ab00-62ed-0000-0000-0000-0806.res6.spectrum.com)
[13:33:04] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-0d00-af10-da91-027d.res6.spectrum.com) (Ping timeout: 252 seconds)
[13:50:43] *** Quits: quazimodo (~quazimodo@n1-40-235-47.bla1.nsw.optusnet.com.au) (Ping timeout: 258 seconds)
[13:55:56] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[14:01:54] *** Joins: roadie (~user@2a02:8108:ec0:1427:4865:1b11:99f4:34a6)
[14:15:29] *** Quits: goepsilongo_ (~goepsilon@2603-7000-ab00-62ed-0000-0000-0000-0806.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:16:00] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-3830-04d0-020e-96bb.res6.spectrum.com)
[14:16:01] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-3830-04d0-020e-96bb.res6.spectrum.com) (Client Quit)
[14:19:15] *** Quits: roadie (~user@2a02:8108:ec0:1427:4865:1b11:99f4:34a6) (Ping timeout: 260 seconds)
[15:27:34] <nakilon> Intelo try to log in?
[16:17:58] *** Joins: BSaboia (~bsaboia@177.37.198.218)
[16:18:10] *** Quits: bhaak (~bhaak@80-219-37-205.dclient.hispeed.ch) (Ping timeout: 252 seconds)
[16:28:02] *** Joins: roshanavand (~roshanava@185.213.155.160)
[16:31:56] *** Joins: jpw (~jpw@user/jpw)
[16:35:02] *** Joins: crankharder (~crankhard@pool-71-121-213-14.bltmmd.fios.verizon.net)
[16:39:37] <sagax> what you think about this? https://termbin.com/sxk2
[16:39:52] <sagax> it's for dot-notation from yaml config file
[17:04:07] <adam12> sagax: It looks OK generally, as long as you're not calling preload in a hotpath. Defining methods dynamically clears some caches in the Ruby VM, and in a hotpath it's absolute performance murder.
[17:05:51] <adam12> sagax: Instead of defining on `self` (as cls), you could always define them inside a module and include that module too. It might help keep them organized.
[17:06:51] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 260 seconds)
[17:07:50] *** Quits: roshanavand (~roshanava@185.213.155.160) (Ping timeout: 260 seconds)
[17:45:26] *** Quits: kaleido (~adam@user/kaleido) (Ping timeout: 260 seconds)
[18:06:20] *** Quits: fandre1986 (~fandre198@178-36-241-155.adsl.inetia.pl) (Quit: Connection closed)
[18:12:17] <sagax> thanks
[18:42:23] <Intelo> nakilon login will not tell the address
[18:58:01] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 245 seconds)
[19:04:39] *** Quits: Bounga (~nico@82-65-32-175.subs.proxad.net) (Remote host closed the connection)
[19:08:35] *** Joins: steerpike (~echelon@gateway/tor-sasl/steerpike)
[19:08:46] <steerpike> hi, can i ask questions about rspec in here?
[19:11:30] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[19:12:30] <steerpike> i get these errors https://paste.ee/r/qIPy5 when running the example here: https://www.tutorialspoint.com/rspec/rspec_introduction.htm
[19:12:36] <steerpike> is it an issue with the version?
[19:12:58] <steerpike> i'm using ruby 2.6.4
[19:17:07] *** Quits: Intelo (~Intelo@88.246.77.74) (Quit: Client closed)
[19:25:27] <steerpike> is there a better place to ask questions?
[19:29:18] *** Joins: mantis_ (~mantis@ool-44c09a21.dyn.optonline.net)
[19:30:51] *** Joins: kaleido (~adam@havokworks.io)
[19:30:51] *** Quits: kaleido (~adam@havokworks.io) (Changing host)
[19:30:51] *** Joins: kaleido (~adam@user/kaleido)
[19:34:38] *** Quits: mantis_ (~mantis@ool-44c09a21.dyn.optonline.net) (Remote host closed the connection)
[19:37:58] <havenwood> steerpike: that looks like a smart quote with `class”` in the error?
[19:38:08] <havenwood> steerpike: show the whole file?
[19:38:35] <steerpike> it's on the tutorialspoint page near the bottom
[19:38:59] <havenwood> >> 'class”'.grapheme_clusters.last.ord
[19:39:18] <havenwood> #=> 8221
[19:39:30] <havenwood> >> 'class”'.grapheme_clusters.last.bytes
[19:39:37] <havenwood> #=> [226, 128, 157]
[19:39:57] <steerpike> i don't know what that means
[19:40:07] <havenwood> >> 8221.chr(Encoding::UTF_8)
[19:40:08] <havenwood> #=> "”"
[19:40:28] <havenwood> steerpike: There's a UTF-8 character for a smart quote, and one is following the word "class" in your code.
[19:41:01] <havenwood> I suspect smart quotes are being used where actual quotes were intended, so `class` is being evaluated as code rather than String content.
[19:41:03] <steerpike> oh.. the context!
[19:41:28] <steerpike> success!
[19:41:29] <steerpike> thank you
[19:41:38] <havenwood> no prob, you're welcome
[19:41:40] <havenwood> happy coding!
[19:41:45] <steerpike> :)
[19:44:43] <adam12> Those dang smart quotes.
[19:51:29] <kaleido> not so smart after all, amirite?
[19:54:01] <adam12> LOL
[19:54:15] <adam12> Smartly affecting copy-pasta for everyone everywhere.
[20:03:41] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[20:34:51] *** Joins: jpw (~jpw@user/jpw)
[20:37:03] <dviola> anyone familiar with roda here?
[20:38:20] <adam12> dviola: yes
[20:44:07] <dviola> adam12: I'm trying to make some GET requests where I'll be passing some "Authorization:Bearer" tokens, I'm unsure how to read those from roda
[20:45:34] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 260 seconds)
[20:45:41] <dviola> e.g. http get http://localhost:3000/foo/bar 'Authorization:Bearer token'
[20:47:21] *** Joins: SuperLag (~akulbe@user/superlag)
[20:50:23] <adam12> dviola: If you have an object `r` inside your routing tree, you could probably do `r.get_header("Authorization")`
[20:52:14] <dviola> adam12: interesting, let me try that
[20:52:21] <adam12> dviola: `r` is just the current request, so anywhere in your routing tree that's in the context of Roda, you could do `request.get_header("Authorization")` as well. But `r` is the common shorthand.
[20:53:37] <dviola> makes sense
[21:00:07] <dviola> I get nil
[21:03:30] <dviola> I get it now with r.get_header("HTTP_AUTHORIZATION") after adding plugin :request_headers
[21:03:43] <adam12> dviola: Ah. Yes, Rack sometimes mutates header names.
[21:04:41] <adam12> dviola: If you use request_headers plugin, the syntax is nicer, since you can use `r.headers`.
[21:10:07] <dviola> env['HTTP_AUTHORIZATION'] also works
[21:10:24] <dviola> nice
[21:10:31] <dviola> adam12: thanks a lot :)
[21:10:39] <adam12> dviola: cheers.
[21:10:48] <adam12> I sometimes look at `env` to see what the header name is
[21:24:35] *** Joins: bhaak (~bhaak@user/bhaak)
[21:25:36] *** Joins: Rounin (~david@84.212.130.215)
[21:32:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:33:19] *** Joins: orbyt (~textual@172.92.4.78)
[21:52:54] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[21:55:32] *** Joins: seabre (~seabre@user/seabre)
[21:56:24] <nakilon> infernix log in and call some "look into my profile" http api endponit that should show the address
[22:08:18] <adam12> Progress on yjit is looking interesting.
[22:10:17] <adam12> Variable width allocation merged too.. interesting.
[22:36:41] *** Joins: motherr (~motherr@user/motherr)
[22:45:26] *** Quits: vit (~vit@chello085216193138.chello.sk) (Quit: Konversation terminated!)
[22:52:39] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 260 seconds)
[22:53:04] *** Joins: jpw (~jpw@user/jpw)
[22:56:39] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Read error: Connection reset by peer)
[23:11:15] *** Quits: crankharder (~crankhard@pool-71-121-213-14.bltmmd.fios.verizon.net) (Ping timeout: 260 seconds)
[23:16:55] *** Joins: jpw_ (~jpw@user/jpw)
[23:17:16] *** Joins: crankharder (~crankhard@pool-71-121-213-14.bltmmd.fios.verizon.net)
[23:18:47] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 260 seconds)
[23:27:06] *** Joins: crankhar1er (~crankhard@pool-71-121-213-14.bltmmd.fios.verizon.net)
[23:28:13] *** Quits: crankhar1er (~crankhard@pool-71-121-213-14.bltmmd.fios.verizon.net) (Client Quit)
[23:28:36] *** Quits: crankharder (~crankhard@pool-71-121-213-14.bltmmd.fios.verizon.net) (Quit: leaving)
[23:28:58] *** Joins: crankharder (~crankhard@pool-71-121-213-14.bltmmd.fios.verizon.net)
[23:31:28] *** Quits: crankharder (~crankhard@pool-71-121-213-14.bltmmd.fios.verizon.net) (Client Quit)
[23:31:44] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[23:31:47] *** Joins: crankharder (~crankhard@pool-71-121-213-14.bltmmd.fios.verizon.net)
[23:34:39] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[23:40:47] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[23:42:19] *** Joins: hololeap (~hololeap@user/hololeap)
[23:44:08] *** Joins: quazimodo (~quazimodo@n1-40-235-47.bla1.nsw.optusnet.com.au)
[23:45:58] *** Joins: ur5us (~ur5us@2406:e002:6c33:6d01:90c2:1bd2:83db:98)
[23:49:49] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
