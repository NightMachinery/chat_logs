[00:03:58] *** Joins: vysn (~vysn@user/vysn)
[00:07:18] *** Joins: CaCode (~CaCode@user/cacode)
[00:08:26] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:09:52] *** Joins: oxfuxxx (~oxfuxxx@103.137.12.252)
[00:14:14] *** Quits: oxfuxxx (~oxfuxxx@103.137.12.252) (Ping timeout: 250 seconds)
[00:15:10] *** Quits: r_n_d (~r_n_d@gateway/tor-sasl/rnd/x-30212483) (Quit: Leaving)
[00:17:18] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:a9ef:8cb1:3f34:9694) (Read error: Connection reset by peer)
[00:21:17] *** Quits: symb0l_ (~symb0l@user/symb0l) (Quit: symb0l_)
[00:23:37] *** Joins: strajder (~strajder@user/strajder)
[00:25:12] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[00:25:41] *** Joins: kish` (~aqua@user/aqua)
[00:26:16] *** Joins: notzmv (~zmv@user/notzmv)
[00:28:56] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:30:14] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:31:35] *** Joins: Charadon (~Charadon@155.138.164.183)
[00:38:24] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[00:39:02] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[00:39:18] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[00:39:18] *** Joins: fwg (~fwg@user/fwg)
[00:39:34] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[00:45:21] <jackk> Filystyn, on what network ?
[00:47:10] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[00:48:03] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[00:48:11] <twkm> irc.gnome.org -- mentioned in the channel's wiki.
[00:49:03] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[00:49:05] <jackk> tnx
[00:50:52] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[00:50:52] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[00:50:52] *** Joins: Teukka (~teukka@user/Teukka)
[00:51:18] <axon> any tips for storing the value of __COUNTER__ within a macro so that the same counter value can be referenced multiple times?
[00:51:41] *** Quits: geeknix (~pi@2001:e68:5432:a8c4:1393:329d:a357:f118) (Ping timeout: 268 seconds)
[00:52:11] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[00:53:31] <fizzie> You can't really "store" it, but you can have it expanded by invoking another macro, and then in that macro use it multiple times.
[00:53:58] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[00:54:15] <axon> yeah, I'm trying to figure that one as per this example (at the bottom): https://gcc.gnu.org/onlinedocs/cpp/Stringizing.html#Stringizing
[00:54:17] *** Quits: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[00:54:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[00:54:47] <fizzie> ,cc #define foo(id) printf("%d, %d, %d, %d; ", id, id, id, id) \n #define bar(id) foo(id) \n #define baz bar(__COUNTER__) \n baz; baz;
[00:54:52] <candide> fizzie: 0, 0, 0, 0; 1, 1, 1, 1;
[00:55:17] *** Quits: terminalpusher (~terminalp@2a01:586:9365:1:140d:351b:132c:7f59) (Remote host closed the connection)
[00:55:20] *** Joins: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch)
[00:55:36] <axon> alright, thanks, I'll give that another shot
[00:56:12] <fizzie> ,cc #define foo(ctr) puts("counter is " #ctr ", I mean, " #ctr "; ") \n #define bar(ctr) foo(ctr) \n #define baz bar(__COUNTER__) \n baz; baz; // same idea but stringized
[00:56:14] <candide> fizzie: counter is 0, I mean, 0;  counter is 1, I mean, 1;
[00:56:58] <fizzie> That middle macro (`#define bar(ctr) foo(ctr)`) is probably the least obvious bit of it.
[00:58:09] <fizzie> (Strictly speaking it's only needed when the __COUNTER__ value is being stringized with # or token-concatenated with ##, but it doesn't hurt to have it there just for consistency.)
[00:59:00] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Ping timeout: 256 seconds)
[00:59:26] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[00:59:47] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[01:02:10] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[01:03:39] *** Joins: monkeyPlus (~monkeyPlu@2001:8a0:6cc5:7e01:98dc:2f18:f0d3:94b0)
[01:04:03] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:04:38] *** Joins: geeknix (~pi@2001:e68:5432:46d8:39f7:e80b:25f7:e9cb)
[01:04:49] <axon> fizzie: not sure the ## pasting operator works as I'd expect it here: https://clbin.com/BTkE7
[01:05:04] <monkeyPlus> hey i have an array like this [1,2,3,4] , and want to use one cycle to cycle [1][1,2,3,4]   [2][1,2,3,4] [3][12,3,4] with just one cycle..is possible?
[01:07:08] *** Quits: Narrat (~omnius@p2e511ab8.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:07:29] <fizzie> axon: Yes, you're missing the one level of extra macro indirection that I was just talking about.
[01:08:30] <axon> fizzie: I'm sorry, I couldn't parse that one-liner by just looking at it, it just occurred to me to paste it in my editor; having a closer look now, thanks
[01:09:14] <fizzie> ,expand #define ex1() ex2(__COUNTER__) \n #define ex2(n) ex3(n) \n #define ex3(n) example##n \n ex1()
[01:09:15] <candide> fizzie:  example0
[01:09:43] <fizzie> ,expand #define ex1() ex2(__COUNTER__) \n #define ex2(n) example##n \n ex1() // vs. this
[01:09:44] <candide> fizzie:  example__COUNTER__
[01:10:37] <fizzie> Yeah, they'd definitely be easier to read on multiple lines.
[01:10:57] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[01:11:50] *** Quits: kuoi (~kuoi@109.175.166.60) (Quit: kuoi)
[01:11:56] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:6598:2294:f787:fa6c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:13:41] <axon> fizzie: yep, I think I get it now: the 2nd macro in that chain captures the actual text that is then pasted to the 3rd one
[01:13:58] <axon> s/pasted/passed
[01:18:06] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[01:18:27] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[01:19:30] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:22:06] *** Quits: h4zel (~hazel@user/h4zel) (Quit: WeeChat 3.0.1)
[01:22:47] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:23:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:23:04] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:23:04] *** Joins: wroathe (~wroathe@user/wroathe)
[01:24:03] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[01:32:10] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:38:28] *** Joins: jhnsn (~jx0@38-13-17-235.starry-inc.net)
[01:40:03] *** Joins: fwg (~fwg@user/fwg)
[01:41:17] *** Quits: jx0 (~jx0@199.229.250.98) (Ping timeout: 240 seconds)
[01:41:59] *** Joins: jx0 (~jx0@199.229.250.130)
[01:42:57] *** Quits: jhnsn (~jx0@38-13-17-235.starry-inc.net) (Ping timeout: 240 seconds)
[01:46:58] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[01:47:03] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:48:40] *** Quits: jackk (~jackiii@93-44-188-69.ip98.fastwebnet.it) (Quit: Leaving)
[01:50:46] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[01:51:28] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[01:53:54] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Ping timeout: 250 seconds)
[01:55:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Client Quit)
[01:55:27] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[01:55:30] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[01:55:53] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[01:56:37] *** Joins: kish` (~aqua@user/aqua)
[01:56:42] *** Quits: chomwitt (~chomwitt@2a02:587:dc16:6e00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[01:56:59] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:58:21] *** Joins: noobie (~noobie@dyx0pyyc9g2k53j5ymrry-3.rev.dnainternet.fi)
[01:58:29] *** Quits: Akuli (~Akuli@213.216.208.241) (Quit: Akuli)
[01:58:58] *** Quits: magla (~gelignite@55d4248d.access.ecotel.net) (Quit: Stay safe!)
[01:59:49] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[02:00:10] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:00:23] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.5)
[02:02:00] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[02:03:16] *** Joins: Alhazred (~Alhazred@86.106.74.42)
[02:05:13] <chiselfuse> how can i see anything meaningful when h_errno gets set if `man h_errno` says everything to process it is obsolete?
[02:05:42] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[02:05:49] <chiselfuse> but apparently the variable itself and behavior of setting it isn't obsolete
[02:07:39] *** Joins: teut (~teut@2401:4900:1c68:97ee:c14d:567d:7988:3ca2)
[02:09:13] <noobie> any suggested way to compile a binary on a higher libc6 to work on a lower, on ubuntu? libc6=2.34 to work with libc6=2.27 specifcally
[02:10:12] <fizzie> Isn't "the behavior of setting it" only associated with `gethostbyname` and `gethostbyaddr`, which are themselves obsolete as well?
[02:11:06] <fizzie> With `getaddrinfo`, you get error codes back through the return value (and regular errno, in case of EAI_SYSTEM) rather than `h_error`.
[02:11:48] <ericonr> noobie: build on the Ubuntu target
[02:12:41] <noobie> its a scuffed hiveos mod of ubuntu 18.04 and doesnt build there
[02:13:00] <noobie> i guess i need to get a vm for 18.04
[02:13:29] *** Quits: noobie (~noobie@dyx0pyyc9g2k53j5ymrry-3.rev.dnainternet.fi) (Quit: Client closed)
[02:13:49] <fizzie> I don't know of any reasonable way to say "use only symbols with versions <= X". All you can do is tell it to use particular versions of *specific* symbols. Which might be pretty frustrating.
[02:14:02] <chiselfuse> fizzie: the manual doesn't say that the function s themselves are obsolete
[02:14:17] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[02:14:25] <fizzie> chiselfuse: Mine does.
[02:14:43] <chiselfuse> fizzie: can you tell me exactly which line?
[02:14:45] *** Quits: fstd_ (~fstd@xdsl-89-1-56-234.nc.de) (Read error: Connection reset by peer)
[02:15:02] <fizzie> "DESCRIPTION: The gethostbyname*(), gethostbyaddr*(), herror(), and hstrerror() functions are obsolete."
[02:15:14] *** Joins: fwg (~fwg@user/fwg)
[02:15:52] *** Joins: fstd (~fstd@xdsl-89-1-56-234.nc.de)
[02:16:08] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[02:16:37] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[02:16:59] <chiselfuse> fizzie: i just want to "get a host by name", none of that 100-in-1 functionality of getaddrinfo
[02:17:08] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[02:17:20] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[02:17:48] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[02:19:44] <chiselfuse> fizzie: i was assigning values to sockaddr_in structs by hand using old ways instead of having it populate with getaddrinfo, i wanted to be consistent, but not obsolete
[02:19:44] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:20:12] <sham1> Using getaddrinfo isn't complicated enough to avoid
[02:20:35] <fizzie> Well. `gethostbyname` and friends were also marked as obsolete in the 2001 revision of POSIX, and completely removed from the 2008 edition. At some point, it's time to give it up.
[02:20:45] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[02:21:02] <chiselfuse> sham1: i'm not trying to avoid it, i wrote the same functionality in it, but i'm writing the same code again without just because
[02:21:30] <Filystyn> next write your own resolver ;-)
[02:22:01] <sham1> Annoyingly that's something *I'd* probably do, knowing my own NIH syndrome
[02:22:16] <twkm> getting a host by name can be complex.
[02:22:22] <chiselfuse> Filystyn: setting up bind9 with open recursive is best i can do :(
[02:22:52] <fizzie> Using c-ares is kind of a valid choice. Well, except for the difficulties in respecting the system configuration.
[02:23:31] <chiselfuse> sham1: what's NIH?
[02:23:41] <sham1> Not Invented Here
[02:23:58] <twkm> getdnsapi if you must.  c-ares is fine too.
[02:24:25] <chiselfuse> sham1: i fail to understand what that name conveys
[02:25:21] <twkm> some people prefer their own code even if alternatives exist.
[02:25:25] <chiselfuse> twkm: what's the actual name of that ares thing, i can't find a manpage
[02:25:39] <twkm> c-ares.  don't drop the c-
[02:26:07] <twkm> getdnsapi is likely easy to search for as well.
[02:26:12] <Filystyn> search ares in rep
[02:26:33] <chiselfuse> twkm: still, how does "not invented here" describe that situation
[02:26:39] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 268 seconds)
[02:27:13] <chiselfuse> wait so this ares thing isn't native?
[02:27:22] <twkm> that sham1 might write hir own resolver knowing sie perfers hir own code over existing alternatives?
[02:27:41] <twkm> nothing is native if you come right down to it.
[02:27:51] *** Joins: liba (~liba@user/liba)
[02:28:01] <twkm> there's no networking or dns in c.
[02:28:11] <fizzie> https://en.wiktionary.org/wiki/not_invented_here
[02:28:24] <twkm> there is networking and dns in supra-c, such as posix or other things.
[02:29:00] <twkm> c-ares and getdnsapi use posix to accomplish dns resolution.
[02:29:29] <chiselfuse> oh i get the NIH thing now lol
[02:29:45] <twkm> <https://c-ares.haxx.se/>, <https://getdnsapi.net/>.
[02:30:21] <chiselfuse> what if i need to stick to posix? no choice eh?
[02:30:25] <twkm> some like adns <http://www.chiark.greenend.org.uk/~ian/adns/ftp/>.
[02:30:46] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[02:31:24] <twkm> they do use posix.  whatever, feel free to try to handle the giant pile of dns rfc's yourself.
[02:31:40] *** Joins: graywolf (~wolf@user/graywolf)
[02:32:20] <chiselfuse> actually dns rfc's are fucked anyway, might re-write that and that's it
[02:32:30] *** Quits: pizdets (~pizdets@183.182.114.221) (Ping timeout: 250 seconds)
[02:33:09] <Filystyn> reading rfc can be fun expirance.
[02:33:46] *** Joins: pizdets (~pizdets@183.182.110.173)
[02:34:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[02:35:28] <graywolf> Hello C programmers, I have two questions regarding coding styles. Most do not explain the rationale, so I wanted to ask. 1. Why some style (e.g. openbsd) do not puth argument names in function prototypes? 2. Why are braces optional (openbsd) or forbidden (kernel) in single expression control constructs (`if (1) {\n\tfoo()\n\t}' is bad they say). Why? Wasn't there some openvpn bug caused by something
[02:35:30] <graywolf> like this?
[02:36:05] <twkm> chiselfuse: see <https://www.statdns.com/rfc/>.
[02:36:51] *** Joins: fwg (~fwg@user/fwg)
[02:38:07] <chiselfuse> twkm: yea, that's what decades of good engineering look like
[02:38:14] <chiselfuse> except not good
[02:38:34] <Filystyn> probably you don't need 90% anyway to do simple resolve
[02:38:55] <clarity> graywolf: Style is too much opinion / bikeshedding to take these questions seriously but 1. effort to maintain and type the names and why bother if they're not needed 2. unnecessary parentheses and braces annoy some people and arguably do not contribute to readability
[02:38:56] <twkm> graywolf: styles seldom make sense taken alone.  some like prototypes to include identifiers, some don't, exactly why usually means digging in documentation or mailing lists.
[02:39:36] <chiselfuse> Filystyn: it'd take some twisted edge case to just break it
[02:39:43] <fizzie> For 2., there was a very famous Apple SSL bug (the "goto fail" bug) that's arguably somewhat related to the case for always using {}s even for single-statement bodies.
[02:39:54] <clarity> Yes, arguably
[02:40:00] <twkm> chiselfuse: otoh, can you tell which ones you need to care about.
[02:40:18] <clarity> The argument is that someone would have noticed it if you had had braces, or that the duplicate line would've been inside them and thus harmless
[02:40:43] <clarity> The counterargument is that maybe nobody looked carefully enough and wouldn't have noticed anyway, and you could have pasted the line outside of the braces anyway
[02:41:46] <fizzie> There's also a (maybe slightly more convincing) argument that if you *start* with the braces already present, and add a second statement in, you're less likely to make a similar mistake.
[02:41:49] <chiselfuse> twkm: no, but i'd search for the most know ones
[02:41:58] <twkm> good luck.
[02:42:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:42:23] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:42:23] *** Joins: wroathe (~wroathe@user/wroathe)
[02:43:03] <graywolf> Well it's true these days there is -Wmisleading-indentation
[02:43:31] <graywolf> Thanks for comments :)
[02:43:43] <pragma-> /* you're welcome */
[02:43:46] <Filystyn> gcc has now shitty warning with falling to next case when not breaking
[02:43:55] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[02:44:28] <Filystyn> just my 3 cetns since I saw switch / case
[02:44:54] <graywolf> Maybe I'm bad at C (well, probably), but that warning definitely saved me from bug or two, so I actually kind of like that shitty warning
[02:45:06] *** Quits: teut (~teut@2401:4900:1c68:97ee:c14d:567d:7988:3ca2) (Quit: Client closed)
[02:45:08] <twkm> plus it's a good thing there aren't any other compilers.
[02:45:17] <Techcable> Don't they give you an exception if you have a `// fallthrough` comment?
[02:45:32] <Techcable> err I mean an exception from the warning
[02:45:48] <graywolf> Yeah, they do. Seems like good enough trade
[02:45:51] <Filystyn> I asked on #gcc and they suggested to use __atribute
[02:46:00] <Filystyn> But i said fuk that since I use clang
[02:46:18] <Filystyn> Ill check the comment later
[02:46:24] <Filystyn> that would be acceptable
[02:46:36] <Filystyn> I fallthrough a lot
[02:46:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:47:14] <graywolf> Filystyn: https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wimplicit-fallthrough here is list of all the possible comments
[02:47:43] <Filystyn> thx
[02:48:02] *** Joins: ferdna (~ferdna@user/ferdna)
[02:48:04] <pragma-> use SIGWINCH to hoist your cases from falling through
[02:48:06] <Techcable> fizzie : Yes. They give an exception you kjust have to use a //fallthrough comment
[02:48:11] <Techcable> Oh shoot wrong ping
[02:48:16] <Techcable> I just tested it
[02:48:33] <Techcable> Well all you gotta do is say //fallthrough
[02:48:37] <Techcable> Which is already best practice IMO
[02:49:57] *** Joins: Viewday11 (~Viewday@user/viewday)
[02:50:02] *** Joins: Torr (~Torr@user/torr)
[02:52:05] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[02:52:42] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[02:54:34] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 250 seconds)
[02:54:38] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:54:56] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[02:57:15] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:58:32] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[03:00:57] *** Quits: alch (~alch@151.46.32.98) (Ping timeout: 240 seconds)
[03:01:20] *** Joins: chenqisu1 (~bhca7d@183.217.200.249)
[03:02:03] *** Quits: chenqisu1 (~bhca7d@183.217.200.249) (Read error: Connection reset by peer)
[03:02:47] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:03:10] *** Joins: alch (~alch@151.44.79.73)
[03:03:27] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[03:11:36] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[03:13:14] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:14:04] *** Quits: diophantoz (~diophanto@user/diophantoz) (Ping timeout: 250 seconds)
[03:15:02] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Ping timeout: 240 seconds)
[03:15:12] *** Quits: Filystyn (~piotr@user/filystyn) (Quit: Lost terminal)
[03:15:39] *** Joins: Haxxa (~Haxxa@125-253-30-218.ip4.superloop.com)
[03:22:14] *** Joins: Betal (~Betal@user/betal)
[03:25:21] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:e172:6885:7e27:8509) (Quit: Quit)
[03:25:24] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::4)
[03:25:45] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::4) (Remote host closed the connection)
[03:26:09] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[03:32:05] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:32:37] *** Quits: davros (~davros@host86-184-82-149.range86-184.btcentralplus.com) (Ping timeout: 240 seconds)
[03:36:01] *** Quits: coruja (~coruja@user/coruja) (Quit: WeeChat 3.4)
[03:36:38] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.4)
[03:36:47] *** Joins: coruja (~coruja@user/coruja)
[03:37:41] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:40:25] *** Joins: fsoc (~shynerd@bison.alphaw0lf.xyz)
[03:42:12] <fsoc> where can i find documentation for POSIX APIs? like, standard syscalls grouped between networking, file-io, and such?
[03:42:37] *** Joins: nitrix (~nitrix@user/nitrix)
[03:42:49] <fsoc> i'm reading this: https://unix.stackexchange.com/questions/19816/where-can-i-find-official-posix-and-unix-documentation but they link to old documentations (and answer's from 2011)
[03:43:10] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[03:44:25] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[03:45:12] *** Quits: nitrix (~nitrix@user/nitrix) (Client Quit)
[03:45:17] *** Quits: inlight (~thomas@user/inlight) (Quit: leaving)
[03:46:00] <BtbN> mostly just in various manpages
[03:46:11] *** Joins: symb0l_ (~symb0l@user/symb0l)
[03:46:45] *** Joins: davros (~davros@host86-184-82-232.range86-184.btcentralplus.com)
[03:49:14] <fizzie> The 2018 edition of POSIX is at https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/ -- it's not particularly "grouped" though.
[03:49:17] <candide> Title of fizzie's link: The Open Group Base Specifications Issue 7, 2018 edition
[03:49:33] <fizzie> But it's as official as it gets.
[03:50:57] *** symb0l_ is now known as symb0l
[03:53:09] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 276 seconds)
[03:53:30] <fsoc> i guess the syscalls, lib functions are located under "headers" section...
[03:53:36] <fsoc> thanks fizzie
[03:53:41] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[03:53:56] *** Joins: nitrix (~nitrix@user/nitrix)
[03:53:59] <fizzie> "System Interfaces" volume, "System Interfaces" section has them all alphabetically.
[03:54:00] <fsoc> do they ever update this stuff? if so, how can i subscribe to the email list?
[03:54:18] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[03:54:21] <fsoc> ah yeah
[03:55:39] *** Joins: missogra (~missogra@dynamic-077-010-147-017.77.10.pool.telefonica.de)
[03:55:56] <fizzie> They do publish new editions (the front page has links to the 2008, 2013, 2016 ones); I don't really know anything else of the development model, but presumably it's described somewhere below https://www.opengroup.org/austin/
[03:55:59] <candide> Title of fizzie's link: The Austin Common Standards Revision Group
[03:56:10] *** Quits: missogra (~missogra@dynamic-077-010-147-017.77.10.pool.telefonica.de) (Client Quit)
[03:58:38] *** Quits: symb0l (~symb0l@user/symb0l) (Ping timeout: 256 seconds)
[03:59:10] *** Joins: symb0l (~symb0l@user/symb0l)
[04:02:19] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:05:00] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[04:05:06] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:13:00] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 250 seconds)
[04:14:47] *** Joins: Sos (~Sos@d107-222.icpnet.pl)
[04:14:48] *** Joins: Wulf (~Wulf@user/wulf)
[04:14:56] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:21:29] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:22:14] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[04:22:58] *** Joins: malina (~malina@user/malina)
[04:24:58] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Quit: leaving)
[04:29:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:35:06] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 250 seconds)
[04:35:39] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[04:38:05] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[04:39:43] *** Quits: symb0l (~symb0l@user/symb0l) (Quit: symb0l)
[04:40:18] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:6598:2294:f787:fa6c)
[04:43:21] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[04:45:26] *** Joins: john99 (~john99@101.246.103.34.bc.googleusercontent.com)
[04:45:40] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[04:46:14] <john99> hi, how its named when i declare a struct in this form? (struct foo) {}
[04:46:15] <john99> i am looking the documentation but i dont remember the name
[04:46:34] *** Joins: frostygoth (~frostygot@li1566-163.members.linode.com)
[04:46:46] <fizzie> Compound literal.
[04:46:48] *** Quits: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 256 seconds)
[04:46:51] <fizzie> (It doesn't need to be a struct.)
[04:47:07] <john99> ty
[04:47:09] <john99> :)
[04:47:30] <fizzie> `( <type-name> ){ <initializer-list> }` constructs a new unnamed object of the named type, with automatic storage duration when inside a block, or static storage duration at file scope.
[04:47:58] *** Joins: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch)
[04:52:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:52:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:52:42] *** Joins: wroathe (~wroathe@user/wroathe)
[04:54:25] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[05:04:48] <john99> yup i was forgot and i was looking wxatly how use that for no surprises
[05:04:58] <john99> exactly*
[05:07:10] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Remote host closed the connection)
[05:07:57] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[05:10:02] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[05:12:18] *** Quits: dsrt^ (~dsrt@50.231.5.242) (Ping timeout: 256 seconds)
[05:15:24] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 250 seconds)
[05:15:42] *** Quits: Haxxa (~Haxxa@125-253-30-218.ip4.superloop.com) (Ping timeout: 256 seconds)
[05:16:39] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:e172:6885:7e27:8509)
[05:21:52] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
[05:22:08] *** Joins: bebyx (~Thunderbi@user/bebyx)
[05:23:15] *** Joins: haniaF_ (~haniaF@79.191.104.181.ipv4.supernova.orange.pl)
[05:24:52] *** Quits: haniaF (~haniaF@83.24.207.85.ipv4.supernova.orange.pl) (Ping timeout: 268 seconds)
[05:26:32] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[05:26:44] <Feuermagier> Is this statement here really always false?: https://i.imgur.com/iWV6mwP.png
[05:27:58] *** Quits: haniaF_ (~haniaF@79.191.104.181.ipv4.supernova.orange.pl) (Ping timeout: 250 seconds)
[05:28:08] <dave0> maybe if the precedence is weird
[05:28:12] *** Joins: haniaF (~haniaF@83.24.206.88.ipv4.supernova.orange.pl)
[05:28:25] <dave0> ,parens getchar() == 'y' && getchar() == '\n'
[05:28:26] <candide> dave0: (getchar() == 'y') && (getchar() == '\n')
[05:28:27] <fizzie> No, it's always false even without any weirdness about precedence.
[05:28:41] <fizzie> Oh, sorry, I didn't notice the function call.
[05:28:41] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[05:29:18] <dave0> Feuermagier: i don't think it's always false, but it is suspicious
[05:29:20] <fizzie> Thought at first glance it read `c == 'y' && c == '\n'`, which would be always false.
[05:29:47] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[05:30:08] <fizzie> ,cc if (getchar() == 'y' && getchar() == '\n') puts("not always false"); -stdin=y\n
[05:30:11] <candide> fizzie: not always false
[05:30:22] <dave0> fizzie++
[05:30:31] <Feuermagier> dave0, well, there is a GOTO statement in the line right below. And that's by far not the most suspicious thing in this program.
[05:30:32] *** Joins: asdafasskadkasda (~asdafassk@151.210.137.134)
[05:31:03] * Feuermagier pets candide 
[05:31:04] *** Quits: asdafasskadkasda (~asdafassk@151.210.137.134) (Client Quit)
[05:31:16] * candide blushes at F﻿euermagier
[05:32:58] *** Joins: alicef_ (~none@gentoo/developer/alicef)
[05:33:37] *** Quits: alicef (~none@gentoo/developer/alicef) (Ping timeout: 240 seconds)
[05:34:58] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[05:36:06] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:e502:a244:bdcc:aece)
[05:36:06] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:e502:a244:bdcc:aece) (Changing host)
[05:36:06] *** Joins: skapata (~Skapata@user/skapata)
[05:36:17] *** Quits: MrFantastik (~f@2607:f598:bbda:2c0:c0f7:afbe:3df1:ebb0) (Quit: Leaving)
[05:37:00] <fizzie> One dubious part of it is that if the input stream consists of "yahoo\n...", it will read off the "ya" part, consider the condition false, and leave in "hoo\n...", which is pretty arbitrary as far as behaviors go.
[05:37:05] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:38:29] *** Quits: alicef_ (~none@gentoo/developer/alicef) (Quit: install gentoo)
[05:39:37] *** Joins: alicef (~none@gentoo/developer/alicef)
[05:40:07] *** Joins: r0bin (~r0bin@gateway/tor-sasl/r0bin)
[05:44:36] *** Quits: r1d1 (~tom@0543dbad.skybroadband.com) (Ping timeout: 256 seconds)
[05:50:34] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[05:55:31] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[05:59:17] *** Quits: constxd (~brad@142.167.170.88) (Ping timeout: 240 seconds)
[06:04:26] *** Joins: Guest10 (~Guest10@93.169.108.91)
[06:06:06] *** Quits: zwr (~zwr@2804:d45:b966:fb00:1974:a2f:e75f:4c0b) (Ping timeout: 250 seconds)
[06:06:47] *** Quits: Guest10 (~Guest10@93.169.108.91) (Quit: Connection closed)
[06:06:58] *** Joins: zwr (~zwr@2804:d45:b966:fb00:1493:7e75:a195:6d65)
[06:08:02] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 268 seconds)
[06:08:43] *** Joins: soapsudsxx (~soapsudsx@209.221.40.147)
[06:09:11] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[06:14:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:15:20] <Feuermagier> When is a program allowed to perform setuid() | seteuid()?
[06:16:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[06:18:16] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[06:18:17] *** Quits: liba (~liba@user/liba) (Ping timeout: 240 seconds)
[06:18:53] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[06:19:17] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[06:21:32] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[06:21:57] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:e172:6885:7e27:8509) (Quit: Quit)
[06:22:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:22:38] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.5) (Remote host closed the connection)
[06:22:41] *** Joins: byte4byte (~byte4byte@c-73-219-127-47.hsd1.ma.comcast.net)
[06:22:59] <byte4byte> how do i append a string to a macro varible?
[06:23:10] *** Quits: r0bin (~r0bin@gateway/tor-sasl/r0bin) (Remote host closed the connection)
[06:23:14] <byte4byte> #my_var##appendstr
[06:23:26] <byte4byte> where my_var is the macro var
[06:23:37] <byte4byte> and appendstr is just text added to the value of my_var
[06:25:41] *** Joins: r0bin (~r0bin@gateway/tor-sasl/r0bin)
[06:26:29] <nitrix> Do you have an example of the transformations that you want to take place? Your explanation is confusing.
[06:27:43] <fizzie> Sounds like you just want to use adjacent string literal concatenation.
[06:27:44] <nitrix> Macros can't have variables, it's a token-based mechanism and too early in the translation phases.
[06:28:01] <fizzie> `... #my_var "appendstr" ...` and such.
[06:28:33] <fizzie> ,cc #define macro(str) puts(#str "+stuff") \n macro(foo);
[06:28:38] <candide> fizzie: foo+stuff
[06:30:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:30:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:30:31] *** Joins: wroathe (~wroathe@user/wroathe)
[06:31:18] *** Quits: r0bin (~r0bin@gateway/tor-sasl/r0bin) (Quit: WeeChat 2.8)
[06:32:02] <fizzie> Adjacent string literal tokens are concatenated into a single one relatively early, in translation phase 6; after macro expansion (4), but before what you might call "actual compilation" (7).
[06:32:22] *** Joins: fe23 (~fe23@2409:8a34:461:9470:e1fc:2952:b771:5095)
[06:33:50] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 250 seconds)
[06:35:01] *** Joins: brdb (~alarm@24.61.226.255)
[06:35:33] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:40:14] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[06:46:56] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[06:49:05] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[06:54:21] *** Joins: hanzo (uid532183@user/hanzo)
[06:54:39] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:58:18] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:58:37] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[07:00:42] *** Quits: alch (~alch@151.44.79.73) (Ping timeout: 250 seconds)
[07:02:31] *** Joins: alch (~alch@151.46.80.87)
[07:03:38] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:06:19] *** Joins: joomla5 (uid527699@id-527699.uxbridge.irccloud.com)
[07:11:52] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[07:13:50] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:13:51] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Remote host closed the connection)
[07:14:42] *** Quits: davros (~davros@host86-184-82-232.range86-184.btcentralplus.com) (Ping timeout: 256 seconds)
[07:17:17] *** Quits: kurahaupo (~kurahaupo@pa49-182-42-180.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[07:18:01] *** Joins: Atque (~Atque@user/atque)
[07:19:22] *** Joins: Haxxa (~Haxxa@125-253-30-155.ip4.superloop.com)
[07:22:29] *** Joins: fwg (~fwg@user/fwg)
[07:25:18] *** Joins: ickk (~ickk@user/ickk)
[07:26:51] *** Joins: davros (~davros@host86-184-190-187.range86-184.btcentralplus.com)
[07:31:18] *** Quits: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e) (Remote host closed the connection)
[07:35:10] *** Joins: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:05] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[07:40:06] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[07:40:21] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[07:43:11] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[07:47:42] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:04:23] *** Joins: Jck_true2 (~jcktrue@user/jck-true/x-0200799)
[08:05:16] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (Ping timeout: 250 seconds)
[08:05:16] *** Jck_true2 is now known as Jck_true
[08:10:08] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:10:28] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 250 seconds)
[08:14:37] *** Joins: on^ (~on@50.231.5.242)
[08:15:17] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 240 seconds)
[08:18:15] *** Joins: liba (~liba@user/liba)
[08:22:29] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:23:37] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 240 seconds)
[08:25:22] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[08:26:15] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:26:28] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[08:28:24] *** Quits: fsoc (~shynerd@bison.alphaw0lf.xyz) (Quit: leaving)
[08:29:27] *** Joins: epony (epony@user/epony)
[08:31:57] *** Quits: davros (~davros@host86-184-190-187.range86-184.btcentralplus.com) (Ping timeout: 240 seconds)
[08:33:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:35:30] *** Joins: vysn (~vysn@user/vysn)
[08:39:42] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[08:42:06] *** Quits: john99 (~john99@101.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[08:42:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:42:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:42:26] *** Joins: wroathe (~wroathe@user/wroathe)
[08:44:18] *** Joins: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com)
[08:46:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:46:49] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[09:01:28] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:02:12] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:08:20] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[09:11:34] *** Quits: monkeyPlus (~monkeyPlu@2001:8a0:6cc5:7e01:98dc:2f18:f0d3:94b0) (Remote host closed the connection)
[09:13:22] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:13:27] *** Quits: soapsudsxx (~soapsudsx@209.221.40.147) (Remote host closed the connection)
[09:15:37] *** Quits: Alhazred (~Alhazred@86.106.74.42) (Ping timeout: 240 seconds)
[09:17:01] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:20:14] *** Quits: liba (~liba@user/liba) (Ping timeout: 250 seconds)
[09:25:41] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[09:27:49] *** Joins: fstd_ (~fstd@xdsl-89-1-56-234.nc.de)
[09:27:51] *** Joins: crm (~crm@70.120.0.94)
[09:27:56] *** Joins: lllh (~llh@198.48.244.21)
[09:27:59] *** Joins: useretail_ (~useretail@185.132.19.151)
[09:28:04] *** Joins: alex_ (~alex11@user/alex11)
[09:28:14] *** Joins: Inline__ (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[09:28:33] *** Joins: rany7 (~rany@user/rany)
[09:28:33] *** Quits: rany (~rany@user/rany) (Killed (lithium.libera.chat (Nickname regained by services)))
[09:28:33] *** rany7 is now known as rany
[09:28:35] *** Quits: Cienisty (Cienisty@user/cienisty) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[09:28:35] *** Joins: X-Scale` (~ARM@218.92.108.93.rev.vodafone.pt)
[09:28:38] *** Joins: Svitkona3 (~Svitkona@157.245.38.135)
[09:28:44] *** Joins: gce108_ (~gce@64-250-5-223.gvec.net)
[09:28:55] *** Joins: Cienisty (Cienisty@user/cienisty)
[09:29:13] *** Joins: nowz (~nowz@194.136.126.35)
[09:29:13] *** Quits: nowz (~nowz@194.136.126.35) (Changing host)
[09:29:13] *** Joins: nowz (~nowz@user/nowz)
[09:29:29] *** Joins: LIERO_ (~no@vmi473477.contaboserver.net)
[09:29:37] *** Joins: luca0N_ (~luca0N@nautilus.luca0n.com)
[09:29:40] *** Joins: Thymo_ (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl)
[09:29:41] *** Joins: Bitflux (~byte@byteflux.net)
[09:29:45] *** Joins: finalriposte (~finalripo@2403-5802-74-2-20c-29ff-fe7c-2548.ip6.aussiebb.net)
[09:30:12] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 250 seconds)
[09:30:25] *** Quits: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740) (Quit: Leaving)
[09:31:17] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[09:31:29] *** Joins: mjh4386_ (~mjh4386@165.22.53.231)
[09:31:56] *** Joins: dupl0x (~duplox@137.220.127.235)
[09:31:58] *** Joins: pippijn_ (~pippijn@isis.xinutec.org)
[09:32:05] *** Joins: chris1 (~chris@ip-103-85-39-45.syd.xi.com.au)
[09:32:12] *** Joins: e36freak_ (~e36freak@user/e36freak)
[09:32:17] *** Joins: ZedHedTe1 (~ZedHedTed@pool-173-76-96-161.bstnma.fios.verizon.net)
[09:32:18] *** Joins: Wulf4 (~Wulf@user/wulf)
[09:32:35] *** Joins: joev1 (~joev@user/joev)
[09:32:38] *** Joins: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[09:32:40] *** Joins: nop (~Murray@89.109-247-180.customer.lyse.net)
[09:32:42] *** Joins: HisShadow_ (~HisShadow@user/hisshadow)
[09:32:51] *** Joins: supakeen_ (~user@python/site-packages/supakeen)
[09:33:04] *** nop is now known as Guest501
[09:33:09] *** Joins: int (~int@0x4.cx)
[09:33:30] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[09:33:53] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 256 seconds)
[09:34:02] *** Joins: caze` (~caze@user/caze)
[09:34:59] *** Joins: smeso_ (~smeso@user/smeso)
[09:34:59] *** Quits: smeso (~smeso@user/smeso) (Killed (NickServ (GHOST command used by smeso_)))
[09:35:00] *** smeso_ is now known as smeso
[09:35:39] *** Joins: nun- (~nun@178.115.236.156.static.drei.at)
[09:35:43] *** Quits: joomla5 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[09:35:56] *** Quits: Sos (~Sos@d107-222.icpnet.pl) (Quit: Leaving)
[09:36:00] *** Joins: synapt (NBishop@o.apocaleaps.com)
[09:36:45] *** Joins: AmR (~AmREiSa@156.199.9.4)
[09:37:08] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[09:37:08] *** Quits: on^ (~on@50.231.5.242) (*.net *.split)
[09:37:08] *** Quits: brdb (~alarm@24.61.226.255) (*.net *.split)
[09:37:08] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[09:37:08] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[09:37:09] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (*.net *.split)
[09:37:09] *** Quits: Viewday11 (~Viewday@user/viewday) (*.net *.split)
[09:37:09] *** Quits: fstd (~fstd@xdsl-89-1-56-234.nc.de) (*.net *.split)
[09:37:09] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (*.net *.split)
[09:37:09] *** Quits: Akiva (~Akiva@user/Akiva) (*.net *.split)
[09:37:09] *** Quits: useretail (~useretail@185.132.19.151) (*.net *.split)
[09:37:09] *** Quits: Zenton (~user@user/zenton) (*.net *.split)
[09:37:09] *** Quits: digilink (~digilink@user/digilink) (*.net *.split)
[09:37:09] *** Quits: karakedi (~eAC53C340@user/karakedi) (*.net *.split)
[09:37:09] *** Quits: blinky42 (~quassel@user/blinky42) (*.net *.split)
[09:37:09] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (*.net *.split)
[09:37:09] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (*.net *.split)
[09:37:09] *** Quits: joev (~joev@user/joev) (*.net *.split)
[09:37:09] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (*.net *.split)
[09:37:09] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[09:37:09] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (*.net *.split)
[09:37:09] *** Quits: nathanael (~nathanael@user/nathanael) (*.net *.split)
[09:37:09] *** Quits: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net) (*.net *.split)
[09:37:09] *** Quits: pippijn (~pippijn@isis.xinutec.org) (*.net *.split)
[09:37:09] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (*.net *.split)
[09:37:09] *** Quits: mormue (~mormue@static.29.186.130.94.clients.your-server.de) (*.net *.split)
[09:37:09] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[09:37:09] *** Quits: alex11 (~alex11@user/alex11) (*.net *.split)
[09:37:09] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[09:37:09] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (*.net *.split)
[09:37:09] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[09:37:09] *** Quits: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net) (*.net *.split)
[09:37:09] *** Quits: eletrotupi (~eletrotup@user/eletrotupi) (*.net *.split)
[09:37:09] *** Quits: Goodbye_Vincent (~Goodbye_V@freakshells.net) (*.net *.split)
[09:37:09] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[09:37:09] *** Quits: llh (~llh@user/llh) (*.net *.split)
[09:37:09] *** Quits: HisShadow (~HisShadow@user/hisshadow) (*.net *.split)
[09:37:09] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[09:37:09] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (*.net *.split)
[09:37:09] *** Quits: EtherNet (~ethernet@user/ethernet) (*.net *.split)
[09:37:09] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[09:37:09] *** Quits: Neutron7 (~stillnoob@96.73.191.185) (*.net *.split)
[09:37:09] *** Quits: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se) (*.net *.split)
[09:37:09] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (*.net *.split)
[09:37:09] *** Quits: nate (~NBishop@o.apocaleaps.com) (*.net *.split)
[09:37:09] *** Quits: gce108 (~gce@user/gce108) (*.net *.split)
[09:37:09] *** Quits: PublicWifi (~PublicWiF@user/publicwifi) (*.net *.split)
[09:37:09] *** Quits: van (~van@46.23.94.214) (*.net *.split)
[09:37:09] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (*.net *.split)
[09:37:09] *** Quits: sebag (~guest@91.245.82.2) (*.net *.split)
[09:37:09] *** Quits: caze (~caze@user/caze) (*.net *.split)
[09:37:09] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:37:09] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[09:37:09] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (*.net *.split)
[09:37:09] *** Quits: andjjj23_ (~irc@107.170.228.47) (*.net *.split)
[09:37:09] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[09:37:09] *** Quits: moose (~moose@user/moose) (*.net *.split)
[09:37:09] *** Quits: orthoplex64 (~crm@70.120.0.94) (*.net *.split)
[09:37:09] *** Quits: ski (~ski@remote11.chalmers.se) (*.net *.split)
[09:37:09] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[09:37:09] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[09:37:09] *** Quits: luca0N (~luca0N@nautilus.luca0n.com) (*.net *.split)
[09:37:09] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (*.net *.split)
[09:37:09] *** Quits: les_ (~whome@user/les) (*.net *.split)
[09:37:09] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[09:37:09] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (*.net *.split)
[09:37:09] *** Quits: duplox (~duplox@137.220.127.235) (*.net *.split)
[09:37:09] *** Quits: selikolg (~selikolg@178.62.2.76) (*.net *.split)
[09:37:09] *** Quits: Ox4 (~int@0x4.cx) (*.net *.split)
[09:37:09] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (*.net *.split)
[09:37:09] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[09:37:09] *** Quits: pi0 (~default@user/pi0) (*.net *.split)
[09:37:09] *** Quits: e36freak (~e36freak@user/e36freak) (*.net *.split)
[09:37:09] *** Quits: noonien (~noonien@user/noonien) (*.net *.split)
[09:37:09] *** Quits: gtlsgamr (~gtlsgamr@user/gtlsgamr) (*.net *.split)
[09:37:09] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[09:37:09] *** Quits: LIERO (~no@vmi473477.contaboserver.net) (*.net *.split)
[09:37:09] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (*.net *.split)
[09:37:09] *** Quits: corelax (~corelax@user/corelax) (*.net *.split)
[09:37:10] *** Quits: jason1236 (~fltk@thunix.net) (*.net *.split)
[09:37:10] *** Quits: m0shbear (~nope@205.185.119.231) (*.net *.split)
[09:37:10] *** Quits: ntdll_ (~ntdll@shion.saiban.me) (*.net *.split)
[09:37:10] *** Quits: aesin_ (~aesin@81.211.127.107) (*.net *.split)
[09:37:10] *** Quits: Tordek (~tordek@triton.blinkenshell.org) (*.net *.split)
[09:37:10] *** Quits: shric (~chris@ip-103-85-39-45.syd.xi.com.au) (*.net *.split)
[09:37:10] *** Quits: nowz_ (~nowz@194.136.126.35) (*.net *.split)
[09:37:10] *** Quits: Phil-Work (~phil@62.3.100.20) (*.net *.split)
[09:37:10] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (*.net *.split)
[09:37:10] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (*.net *.split)
[09:37:10] *** Quits: koollman (~samson_t@user/koollman) (*.net *.split)
[09:37:10] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[09:37:10] *** Quits: rahl (~rahl@otaku.sdf.org) (*.net *.split)
[09:37:10] *** Quits: eeerik8 (~eeerik8@95.179.149.48) (*.net *.split)
[09:37:10] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[09:37:10] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (*.net *.split)
[09:37:10] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:37:10] *** Wulf4 is now known as Wulf
[09:37:10] *** synapt is now known as nate
[09:37:11] *** X-Scale` is now known as X-Scale
[09:37:11] *** Svitkona3 is now known as Svitkona
[09:37:46] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[09:38:15] *** Joins: on^ (~on@50.231.5.242)
[09:38:16] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[09:39:48] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[09:40:29] *** e36freak_ is now known as e36freak
[09:42:19] *** Joins: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se)
[09:42:50] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[09:42:50] *** Joins: mkv (~znc@186.57.159.40)
[09:42:50] *** Joins: ski (~ski@remote11.chalmers.se)
[09:42:50] *** Joins: m0shbear (~nope@205.185.119.231)
[09:42:50] *** Joins: pi0 (~default@23.95.234.10)
[09:42:50] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[09:42:50] *** Joins: Tordek (~tordek@triton.blinkenshell.org)
[09:42:50] *** Joins: [RMS] (~rs@genoce.org)
[09:42:50] *** Joins: brdb (~alarm@24.61.226.255)
[09:42:50] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[09:42:50] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[09:42:50] *** Joins: Viewday11 (~Viewday@user/viewday)
[09:42:50] *** Joins: gtlsgamr (~gtlsgamr@user/gtlsgamr)
[09:42:50] *** Joins: digilink (~digilink@user/digilink)
[09:42:50] *** Joins: blinky42 (~quassel@user/blinky42)
[09:42:50] *** Joins: nathanael (~nathanael@user/nathanael)
[09:42:50] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[09:42:50] *** Joins: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net)
[09:42:50] *** Joins: mormue (~mormue@static.29.186.130.94.clients.your-server.de)
[09:42:50] *** Joins: Spydar007 (~spydar007@user/spydar007)
[09:42:50] *** Joins: gjvc (~gjvc@user/gjvc)
[09:42:50] *** Joins: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net)
[09:42:50] *** Joins: eletrotupi (~eletrotup@user/eletrotupi)
[09:42:50] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[09:42:50] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[09:42:50] *** Joins: EtherNet (~ethernet@user/ethernet)
[09:42:50] *** Joins: n1000 (~n1000@user/n1000)
[09:42:50] *** Joins: Neutron7 (~stillnoob@96.73.191.185)
[09:42:50] *** Joins: van (~van@46.23.94.214)
[09:42:50] *** Joins: sebag (~guest@91.245.82.2)
[09:42:50] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[09:42:50] *** Joins: dstein64 (~dstein64@dannyadam.com)
[09:42:50] *** Joins: andjjj23_ (~irc@107.170.228.47)
[09:42:50] *** Joins: moose (~moose@user/moose)
[09:42:50] *** Joins: les_ (~whome@user/les)
[09:42:50] *** Joins: jason1236 (~fltk@thunix.net)
[09:42:50] *** Joins: noonien (~noonien@user/noonien)
[09:42:50] *** Joins: corelax (~corelax@user/corelax)
[09:42:50] *** Joins: ntdll_ (~ntdll@shion.saiban.me)
[09:42:50] *** Joins: aesin_ (~aesin@81.211.127.107)
[09:42:50] *** Joins: Phil-Work (~phil@62.3.100.20)
[09:42:50] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[09:42:50] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[09:42:50] *** Joins: koollman (~samson_t@user/koollman)
[09:42:50] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[09:42:50] *** Joins: rahl (~rahl@otaku.sdf.org)
[09:42:50] *** Joins: eeerik8 (~eeerik8@95.179.149.48)
[09:42:50] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[09:42:50] *** Joins: flynn (~mcbloch@user/flynn)
[09:42:52] *** Joins: Akiva (~Akiva@user/Akiva)
[09:42:55] *** Joins: Atque (~Atque@user/atque)
[09:43:31] *** Joins: PublicWifi (~PublicWiF@user/publicwifi)
[09:43:38] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[09:43:40] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[09:43:58] *** [RMS] is now known as Guest9702
[09:44:28] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[09:45:17] *** Quits: adip (~adip@deo188.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[09:47:01] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[09:49:10] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[09:52:11] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:54:30] *** Joins: koolazer (~koo@user/koolazer)
[10:03:17] <Feuermagier> What does this do?: if (read(0, buf, sizeof(buf)) < 0){stuff();}
[10:03:18] *** Joins: Jong (~Jong@2620:10d:c090:400::5:6a53)
[10:03:34] <Feuermagier> specifically: sizeof(buf)) < 0
[10:03:53] <Feuermagier> oh, nvmnd
[10:03:59] <Feuermagier> I can't read brackets properly
[10:04:17] <klys> [] are brackets
[10:04:33] <Feuermagier> well, the () thingys
[10:04:37] <klys> parens
[10:04:37] <dave0> square brackets
[10:04:46] <Feuermagier> then what are {} ?
[10:04:50] <klys> braces
[10:04:52] <dave0> curly brackets
[10:17:06] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.111)
[10:18:15] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:22:37] *** Joins: Rounin (~david@84.212.130.215)
[10:25:36] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:32:14] <apotheon> (parentheses) [brackets] {braces}
[10:32:30] <apotheon> singular parenthesis, bracket, brace
[10:32:52] <apotheon> abbrevations parens, paren
[10:32:57] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[10:33:47] <apotheon> some other, less clear shit (brackets) [square brackets] {curly brackets} -- but that's more typing and more ambiguous
[10:34:20] <apotheon> Feuermagier:
[10:34:41] * Feuermagier thanks apotheon 
[10:36:51] <X-Scale> (void brackets)
[10:37:00] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 256 seconds)
[10:38:29] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:38:48] *** Quits: jx0 (~jx0@199.229.250.130) (Quit: poof!)
[10:38:57] *** Joins: digilink (~digilink@user/digilink)
[10:40:24] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Ping timeout: 250 seconds)
[10:41:42] *** Joins: Nutte35 (~Nutte@43.231.30.216)
[10:42:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[10:42:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:42:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:42:44] *** Joins: wroathe (~wroathe@user/wroathe)
[10:43:57] <apotheon> X-Scale: nice
[10:44:02] *** Quits: AmR (~AmREiSa@156.199.9.4) (Ping timeout: 240 seconds)
[10:44:02] <apotheon> well . . . bedtime
[10:44:04] <apotheon> g'night
[10:47:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:48:06] *** Joins: AmR (~AmREiSa@156.207.146.251)
[10:49:08] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[10:53:50] *** Quits: nun- (~nun@178.115.236.156.static.drei.at) (Ping timeout: 250 seconds)
[10:55:41] *** Joins: Hercules (~Hercules@user/hercules)
[10:55:44] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:58:48] *** Quits: Hercules (~Hercules@user/hercules) (Client Quit)
[10:58:48] *** Quits: alch (~alch@151.46.80.87) (Read error: Connection reset by peer)
[11:01:33] *** Joins: zeenk (~zeenk@2a02:2f04:a208:c500:649e:b5e2:d15c:7960)
[11:01:43] *** Quits: Nutte35 (~Nutte@43.231.30.216) (Read error: Connection reset by peer)
[11:01:59] *** Joins: Nutte35 (~Nutte@43.231.30.216)
[11:02:16] *** pony is now known as no-n
[11:02:54] *** Joins: alch (~alch@151.46.68.27)
[11:04:40] <katsuragi> https://termbin.com/cxj7  error: dereferencing pointer to incomplete type 'struct proc_dir_entry'
[11:05:57] *** Quits: Nutte35 (~Nutte@43.231.30.216) (Ping timeout: 240 seconds)
[11:06:22] <katsuragi> proc_create returns a proc_dir_entry, right?
[11:07:50] <trenka> katsuragi: no
[11:08:08] <trenka> (and it's not a C question :)
[11:08:15] <katsuragi> proc_create_data of type proc_dir_entry
[11:08:35] <katsuragi> hmm? not C?
[11:09:17] <trenka> not C, it's about linux kernel
[11:09:26] *** Joins: jellie (~luv_panda@user/jellie)
[11:09:28] <trenka> very linux kernel specific
[11:09:45] <katsuragi> okay
[11:09:54] <dave0> can't seem to find a man page for proc_create
[11:10:21] <trenka> katsuragi: https://github.com/torvalds/linux/blob/master/fs/proc/generic.c#L579
[11:10:56] <trenka> it does not return struct proc_dir_entry
[11:11:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:12:19] <katsuragi> right..
[11:30:50] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[11:31:43] *** Joins: diophantoz (~diophanto@user/diophantoz)
[11:33:46] *** Joins: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9)
[11:40:21] *** Joins: aradesh (~aradesh@user/aradesh)
[11:41:32] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[11:43:19] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:6598:2294:f787:fa6c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:47:13] *** LIERO_ is now known as LIERO
[11:47:20] *** Quits: LIERO (~no@vmi473477.contaboserver.net) (Changing host)
[11:47:20] *** Joins: LIERO (~no@user/liero)
[11:48:27] <the_lanetly_052> is there any irc logs for this channels?
[11:48:44] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[11:49:15] <trenka> hopefully not
[11:51:44] *** Joins: Major_Biscuit (~MajorBisc@c-001-005-022.client.tudelft.eduvpn.nl)
[11:55:14] *** supakeen_ is now known as supakeen
[11:55:39] <sham1> No public logs at least. Some people probably just log stuff with their bouncers
[11:55:41] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[11:55:47] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[12:00:38] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[12:01:01] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[12:05:41] *** Joins: Grell (~john@ool-4579c605.dyn.optonline.net)
[12:05:54] *** Parts: Grell (~john@ool-4579c605.dyn.optonline.net) ()
[12:05:57] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[12:05:57] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[12:06:00] *** Joins: Grell (~john@ool-4579c605.dyn.optonline.net)
[12:06:19] <Grell> what should I use, GCC or Clang?
[12:06:44] <sham1> Both
[12:06:54] *** Joins: raym (~raym@user/raym)
[12:06:55] *** Joins: bit_operator (~bit.opera@2a10:800a:e04e:0:913:7d78:69f1:6ac5)
[12:07:54] *** Quits: bit_operator (~bit.opera@2a10:800a:e04e:0:913:7d78:69f1:6ac5) (Client Quit)
[12:11:50] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:12:28] <ChoHag> Whichever one is linked to from cc.
[12:13:18] <NRK[m]> Clang has better warnings in my experience.
[12:15:02] <markand> clang is better in many aspects
[12:16:12] *** Joins: constxd_ (~brad@142.167.170.88)
[12:16:49] *** Joins: xa0s (~xa0s@mab.sdf.org)
[12:17:41] <ski> (round brackets)
[12:18:07] <no-n> |skis|
[12:19:27] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:20:28] <ChoHag> 'fangs'.
[12:20:51] *** Quits: Thymo_ (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl) (Changing host)
[12:20:51] *** Joins: Thymo_ (~Thymo@NASSP/developer/Thymo)
[12:21:05] *** Thymo_ is now known as Thymo
[12:22:21] <no-n> 🐴 horses 🐴
[12:22:55] <ChoHag> Hay!
[12:24:04] <sham1> <angle brackets>
[12:24:38] <NRK[m]> [block brackets]
[12:26:28] *** Parts: retropikzel (9d1a4f9f46@2604:bf00:561:2000::ce) ()
[12:32:43] <cehteh> 🦄
[12:32:49] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 250 seconds)
[12:41:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:aa5f:93ea:3b88:5ff5) (Ping timeout: 240 seconds)
[12:43:50] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e75a:d7d8:5f2b:42f0)
[12:46:58] *** Joins: karakedi (~eAC53C340@user/karakedi)
[12:47:01] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[12:48:38] *** Joins: liba (~liba@user/liba)
[12:49:43] *** Quits: on^ (~on@50.231.5.242) (Ping timeout: 250 seconds)
[12:51:01] *** Joins: noobie (~noobie@ec2-16-170-240-4.eu-north-1.compute.amazonaws.com)
[12:52:13] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:52:51] <noobie> Hello, I have a sourcecode that im trying to compile, but the compilation are optimized for windows, and the binary result is just bad compiled in linux. Is it possible to crosscompile well from windows VS to ubuntu with libc6=2.27 and CUDA 11.51
[12:57:59] *** Quits: ickk (~ickk@user/ickk) (Remote host closed the connection)
[12:58:18] *** Joins: ickk (~ickk@user/ickk)
[12:59:35] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[12:59:59] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[13:00:51] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[13:01:08] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[13:06:07] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[13:08:10] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e75a:d7d8:5f2b:42f0) (Ping timeout: 250 seconds)
[13:09:31] *** Joins: r1d1 (~tom@0543dbad.skybroadband.com)
[13:10:05] *** Joins: Zenton (~user@user/zenton)
[13:10:08] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:8e08:7908:8918:48c0)
[13:14:12] *** Joins: plastico (~plastico@neomutt/plastico)
[13:14:43] *** Joins: argonautx (~argonautx@i5E8670EE.versanet.de)
[13:16:54] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:9102:5c27:2e48:97c2)
[13:17:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:17:42] *** Quits: fwg (~fwg@user/fwg) (Ping timeout: 250 seconds)
[13:18:11] <constxd_> Kings
[13:18:15] <constxd_> I need help
[13:18:19] *** Joins: fwg_ (~fwg@user/fwg)
[13:18:28] *** Joins: orbifx (~Thunderbi@orbitalfox.eu)
[13:18:30] *** fwg_ is now known as fwg
[13:19:12] <constxd_> Any three-star sigmas awake yet
[13:20:05] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[13:20:42] <NRK[m]> what help you need?
[13:21:08] <megaTherion> Please offer a donation :D
[13:23:09] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:23:46] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 250 seconds)
[13:23:46] *** Quits: vboykox (~user@199-25-134-95.pool.ukrtel.net) (Ping timeout: 250 seconds)
[13:23:50] *** Quits: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se) (Read error: Connection reset by peer)
[13:25:05] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:25:15] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.111) (Ping timeout: 250 seconds)
[13:25:46] *** Joins: vboykox (~user@95.134.57.234)
[13:26:22] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:28:30] *** Joins: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se)
[13:28:37] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[13:30:28] *** Quits: zeenk (~zeenk@2a02:2f04:a208:c500:649e:b5e2:d15c:7960) (Quit: Konversation terminated!)
[13:32:26] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 252 seconds)
[13:34:00] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[13:34:32] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.111)
[13:36:10] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:36:30] <constxd_> nvm kings
[13:36:33] <constxd_> I figured it out
[13:37:00] <constxd_> I have no idea how this bug has existed for so long without me ever realizing
[13:38:32] <NRK[m]> are you gonna reveal what the bug was or leave us hanging?
[13:39:31] <megaTherion> I prefer to hang around, I've enough work at hand anyways :D
[13:39:59] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.111) (Ping timeout: 250 seconds)
[13:41:01] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[13:41:46] *** Joins: cation (cation@user/cation)
[13:41:50] *** Joins: jellie (~luv_panda@user/jellie)
[13:43:58] *** Joins: Klinda (~superleag@user/klinda)
[13:47:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:49:55] *** Joins: kts (~kts@103.73.237.81)
[13:50:57] *** Joins: wangx0x01n (~wangx0x01@39.152.175.63)
[13:51:16] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[13:51:39] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[13:51:46] <wangx0x01n> hallo
[13:52:33] *** Quits: cation (cation@user/cation) (Ping timeout: 250 seconds)
[13:53:32] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[13:53:47] *** Joins: cassepipe (~Thunderbi@amontsouris-654-1-234-47.w90-44.abo.wanadoo.fr)
[13:54:18] *** Quits: cassepipe (~Thunderbi@amontsouris-654-1-234-47.w90-44.abo.wanadoo.fr) (Client Quit)
[13:57:22] *** Joins: cassepipe (~Thunderbi@amontsouris-654-1-234-47.w90-44.abo.wanadoo.fr)
[13:57:23] <constxd_> NRK[m]: so
[13:58:07] <constxd_> i have this set of macros i use for dynamically-sized arrays
[13:58:11] <constxd_> use like this
[13:58:44] <constxd_> vec(char *) names = {0}; vec_push(names, "Foo"); printf("%s\n", names.items[0]);
[13:59:24] <constxd_> there's also vec_push_n which is used like
[13:59:56] <constxd_> vec(char) s = {0}; vec_push_n(s, "abc", 3);
[14:00:07] <caze`> But why.
[14:00:15] <constxd_> why not?
[14:00:38] <constxd_> dynamically-sized arrays are an immensely useful data structure
[14:01:23] <caze`> Why macros.
[14:01:40] <constxd_> because they're type-generic
[14:02:02] *** Joins: cation (cation@user/cation)
[14:03:21] <NRK[m]> sounds like you want c++
[14:03:25] <caze`> But arrays aren't.
[14:03:39] <constxd_> what?
[14:03:49] <caze`> type-generic
[14:04:27] <constxd_> i can make a fixed-size array of any object type
[14:04:48] <constxd_> likewise i'd like to be able to have dynamically-sized arrays of any object type and be able to use the same macros to manipulate them
[14:05:19] *** Quits: kts (~kts@103.73.237.81) (Quit: Konversation terminated!)
[14:07:02] <constxd_> anyway the bug was that when pushing, it's necessary to update the vector's capacity and call realloc. but the capacity is measured in elements and realloc of course deals in bytes. i was doing this
[14:07:32] <megaTherion> I'd just use C++ too, it has vectors soo...
[14:07:40] <constxd_> realloc(v.items, (v.capacity = ((v.capcity + n) * sizeof *v.items)))
[14:07:45] <constxd_> but i should have been doing this
[14:07:50] <caze`> I just mean that people usually do this with functions, not macros.
[14:08:07] <constxd_> realloc(v.items, ((v.capacity = v.capacity + n) * sizeof *v.items))
[14:08:34] <constxd_> yes but the advantage with macros is that i don't need specialized functions for each type of vector
[14:08:35] <caze`> You shouldn't update capacity until you've verified that the realloc was successful.
[14:08:39] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[14:08:45] <nomagno> case`: I guess in some cases you prefer inlining stuff always than risking subroutine call overhead
[14:08:47] <nomagno> ... Or something
[14:09:44] <constxd_> i use a realloc wrapper that just exits if realloc() fails
[14:09:54] <NRK[m]> based
[14:10:00] <constxd_> yes it is based
[14:10:32] <nomagno> You know that sounds useful in general
[14:10:37] <constxd_> in many applications there is no sensible response to OOM
[14:11:04] <NRK[m]> i mean it's pretty common. `(e|x)*alloc();`
[14:11:08] <caze`> Yeah but you can at least cleanup and exit gracefully.
[14:11:18] <constxd_> yes
[14:11:19] <caze`> Close your files and stuff.
[14:11:21] <NRK[m]> let the kernel do it B)
[14:11:29] *** Joins: shm (shm@turing.digitalsun.pl)
[14:11:43] <constxd_> anyway i recommend vector macros they're based as fuck
[14:11:44] *** Parts: shm (shm@turing.digitalsun.pl) ()
[14:12:05] <NRK[m]> haha, no. i'll stick to functions.
[14:12:28] <constxd_> why would you want worse syntax and more bloat
[14:13:02] <nomagno> Macros are nice but in the end you're just moving the boilerplate to the machine code
[14:13:08] <nomagno> Not that elegent.
[14:13:21] <constxd_> yes but the C ends up nicer
[14:13:54] <constxd_> what if you want a vector of 'struct tm'
[14:14:07] <constxd_> are you going to go write a new set of functions for that
[14:14:42] <NRK[m]> sure.
[14:14:56] <constxd_> i can just write: vec(struct tm) tms = {0}; vec_push(tms, ...)
[14:14:56] *** Joins: kts (~kts@103.73.237.81)
[14:15:09] <constxd_> extremely readable, no bloat
[14:15:16] <NRK[m]> could also use a custom preprocessor and generate the functions automatically
[14:15:32] <constxd_> how is that in any way preferable to just using macros
[14:15:40] <constxd_> that's just adding even more bloat
[14:16:55] *** Quits: kts (~kts@103.73.237.81) (Client Quit)
[14:17:02] <constxd_> the only deficiency i've encountered with my macro approach is that this doesn't work
[14:17:13] <constxd_> vec(int) as; vec(int) bs; ... as = bs
[14:17:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:17:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:17:26] *** Joins: wroathe (~wroathe@user/wroathe)
[14:18:10] <constxd_> but can be solved by just using: typedef vec(int) int_vec; int_vec as; int_vec bs; ... as = bs // fine
[14:18:18] <nomagno> constxd_: That's because ~~arrays~~ vectors aren't first-class citizens in C
[14:18:32] <nomagno> Totally reasonable design choice
[14:19:02] <nomagno> Oh, yeas
[14:19:09] <nomagno> Nominal typing
[14:19:15] <nomagno> The 8th wonder
[14:19:40] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:19:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[14:20:00] <constxd_> what
[14:20:45] <nomagno> I misattributed this to arrays
[14:20:53] *** Quits: cassepipe (~Thunderbi@amontsouris-654-1-234-47.w90-44.abo.wanadoo.fr) (Quit: cassepipe)
[14:20:57] *** Lord_of_Life_ is now known as Lord_of_Life
[14:21:06] <NRK[m]> the C preprocessor is LE BAD. it's (on of the) worst part about C. you have a secondary language running on top of you actual language obfuscating everything.
[14:21:13] <nomagno> But I still think it's a shame anonymous structs don't have themselves as type signature
[14:21:14] <NRK[m]> and it's not even that powerful
[14:21:26] <constxd_> nomagno: yeah
[14:21:34] <nomagno> NRK: It's turing complete!
[14:21:40] <constxd_> would be nice but still this is a minor inconvenience for my use case
[14:21:51] <NRK[m]> it's shid
[14:21:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:21:59] <constxd_> NRK[m]: wrong and cringe
[14:22:05] <constxd_> the preprocessor makes C better
[14:22:07] <constxd_> period
[14:22:33] <nomagno> There is a brainfuck interpreter written in strictly compliant C99 preprocessor
[14:22:35] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[14:22:43] <ChoHag> The C preprocessor is a necessary evil.
[14:22:53] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:22:57] <clarity> Arguably C isn't necessary :P
[14:23:11] <constxd_> would it be better if it were replaced by some proper module system + hygienic macros? sure but that isn't our reality, so advising people to just not use the preprocessor is cringe
[14:23:14] <nomagno> I vote we just replace it with m4
[14:23:42] <ChoHag> I don't think anyone's suggesting not using it, just not using it like that.
[14:23:59] <constxd_> what's wrong with using it like this other than "macros bad"?
[14:24:18] <ChoHag> I dunno I haven't been paying attention. I've been working on something far worse.
[14:24:31] <NRK[m]> i mean u can use it, im just saying i wouldn't.
[14:24:38] <constxd_> why?
[14:25:16] <NRK[m]> i don't like obfuscation
[14:25:26] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[14:25:28] <constxd_> how is this obfuscation lmao
[14:25:53] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:26:36] *** Joins: marlboro (~i.am@user/marlboro)
[14:26:40] *** Joins: stefanos82 (~stefanos8@62-42-212.netrun.cytanet.com.cy)
[14:26:40] <NRK[m]> `vec(char *) names = {0};` what does this expand to?
[14:27:12] <nomagno> NRK: Vector of a char pointer is zero-initialized
[14:27:44] <NRK[m]> ,english vec(char *) names = {0};
[14:27:44] <candide> NRK[m]: error: expected expression before 'char' error: expected ';' before 'names'
[14:27:53] <constxd_> struct { char **items; size_t count; size_t capacity; } names = {0};
[14:28:01] <constxd_> of course
[14:28:32] <NRK[m]> "of course"
[14:28:45] *** Joins: lompik (~lompik@user/lompik)
[14:28:58] <dave0> looks good
[14:29:16] *** Quits: ickk (~ickk@user/ickk) (Ping timeout: 260 seconds)
[14:29:32] <nomagno> NRK: Encapsulation isn't really a thing in C. You'd definitely have access to the macro definitions
[14:29:32] <nomagno> But I'd make it all caps, that's for sure
[14:29:50] <constxd_> why all caps
[14:29:50] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:606b:5910:1e37:5939)
[14:30:08] <nomagno> Convention. Macro names all caps
[14:30:13] <constxd_> think how common vec_push is
[14:30:23] <constxd_> do you really want that in all caps all over your code
[14:30:42] <nomagno> Macros don't have type signatures
[14:30:45] <NRK[m]> naming conventions are how you sniff out bad part of a language
[14:31:18] <nomagno> You don't know where to use vec_push
[14:31:35] <nomagno> Is it its own statement? A type? An rvalue?
[14:31:48] <nomagno> all caps help you know you have to check for its definition
[14:32:04] <nomagno> Since it's not type safe
[14:32:09] <dave0> but all my function names are uppercase
[14:32:33] <nomagno> dave0: Uh... why?
[14:32:49] <nomagno> I use LIBNAME_CamelCase
[14:33:00] <constxd_> no because
[14:33:06] <dave0> to distinguish them from macros
[14:33:31] <constxd_> it's something you see and use often. once you know it's a macro and how it works you're just paying the readability price every single time you see it for no reason
[14:33:51] <constxd_> also it behaves more or less like a function anyway
[14:34:02] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[14:34:40] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:34:47] <constxd_> http://paste.pr0.tips/jw
[14:34:49] <constxd_> based
[14:35:00] <Hexmind> constxd_, that's pretty neat. What operations do your macros support?
[14:35:10] <nomagno> Macros can go anywhere in the source file
[14:35:13] <nomagno> Functions, not so much
[14:35:14] *** Quits: wangx0x01n (~wangx0x01@39.152.175.63) (Quit: Leaving)
[14:36:19] <constxd_> Hexmind: check that link
[14:37:10] *** Quits: stefanos82 (~stefanos8@62-42-212.netrun.cytanet.com.cy) (Quit: Leaving)
[14:37:11] <constxd_> some of that is bloat. i don't use vec_get or vec_for_each at all
[14:37:14] <Hexmind> constxd_, nice!
[14:37:16] <constxd_> i just use v.items[i]
[14:37:38] <constxd_> also don't use vec_len
[14:38:18] <Hexmind> now it's just a matter of making sure that there are no bugs.
[14:38:45] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[14:39:47] <Hexmind> vec_reverse()... you sure did put a lot of operations on that set of macros.
[14:40:18] <constxd_> git grep 'vec[(_]' | wc -l
[14:40:23] <constxd_> 747
[14:41:09] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[14:41:17] <constxd_> pretty sure vec_push is bug-free
[14:41:25] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[14:42:16] <Hexmind> up until 30 minutes ago...
[14:42:24] <constxd_> lol
[14:42:29] <Hexmind> :)
[14:42:47] <Hexmind> It's always like that until you find the next bug.
[14:43:24] <constxd_> vec_push_n is only used in a few places
[14:43:25] <Hexmind> Then you wonder how that worked until then without noticing the bug.
[14:43:37] <constxd_> but yeah i'm still surprised
[14:44:03] <NRK[m]> `for (size_t idx = 0; ; ) {}` cringe
[14:44:03] <NRK[m]>  `{size_t idx; for (i = 0; ; ) {}}` BASED
[14:44:17] <Hexmind> The best advice I can give you is to create a set of test cases and test the hell out of those macros.
[14:45:15] <Hexmind> Cause I have to say I'm impressed with those. Like you said, they are type independent.
[14:45:16] <NRK[m]> s/i =/idx =/
[14:45:24] <hsv_> Is there a way to know there will be at least N bytes to read from a FILE stream before actually getting the bytes?
[14:45:59] <Hexmind> hsv_, fseek to the end
[14:46:44] <dave0> that'll work with a file but not the terminal
[14:46:59] <NRK[m]> or pipes
[14:47:23] *** Joins: cassepipe (~Thunderbi@amontsouris-654-1-234-47.w90-44.abo.wanadoo.fr)
[14:47:31] <dave0> hsv_: what do you do if there isn't N bytes ready to be read?
[14:47:41] *** Quits: cassepipe (~Thunderbi@amontsouris-654-1-234-47.w90-44.abo.wanadoo.fr) (Client Quit)
[14:47:42] <constxd_> imagine if u could poll but with a minimum byte count for POLLIN
[14:47:44] <hsv_> so fseek forward N bytes and then fseek back to the original position.
[14:48:02] <constxd_> might be based
[14:48:33] <NRK[m]> hsv_: if it's a regular file, yes.
[14:49:30] <hsv_> thank you.
[14:49:33] *** Joins: cassepipe (~Thunderbi@amontsouris-654-1-234-47.w90-44.abo.wanadoo.fr)
[14:49:37] *** Quits: cassepipe (~Thunderbi@amontsouris-654-1-234-47.w90-44.abo.wanadoo.fr) (Remote host closed the connection)
[14:49:39] <NRK[m]> and on windows i think you need to do "b" with fopen
[14:49:54] <NRK[m]> on posix systems it's a no-op
[14:50:13] *** Joins: Burgundy (~NA@86.121.143.206)
[14:50:32] <dave0> hsv_: c doesn't really support that.. the usual way is try to read the number of bytes you want and if it hits EOF handle the short read
[14:50:43] <dave0> terminals are a bit different
[14:50:44] <hsv_> yep, already have "rb".
[14:51:18] <dave0> if you venture into posix there is non-blocking or even select to see if there is /some/ data to read
[14:51:35] <hsv_> dave0: i agree it's convoluted, so i plan to just read individual bytes... i had to ask though.
[14:53:49] <constxd_> imagine using windows in 2022 lol
[14:54:39] <constxd_> i genuinely feel bad for anywho who has to write software targeting windows
[14:55:10] <dave0> how does writing apps for phones compare?
[14:55:13] *** Joins: cassepipe (~Thunderbi@amontsouris-654-1-234-47.w90-44.abo.wanadoo.fr)
[14:55:13] <APic> Some deserve no better
[14:55:32] <hsv_> Imagine using Exchange mail server when the cyberwar breaks out, but i digress. ;)
[14:55:39] <NRK[m]> dave0: probably worse
[14:55:40] <NRK[m]> i hear google keeps changing api
[14:56:06] <hsv_> Are phone apps writing in C?
[14:56:11] <Hexmind> I don't think writing for windows is that bad. Writing ON windows is another story. I prefer linux.
[14:56:19] <constxd_> well
[14:56:30] <NRK[m]> hsv_: doubt it
[14:56:42] <NRK[m]> most i see is written in java and/or kotlin
[14:56:59] <NRK[m]> google was trying to push dart i think, but i don't see it much /shrug
[14:57:09] <constxd_> actually interfacing with win32 < mobile dev < targeting windows using portable libraries <<<< targeting POSIX
[14:57:37] <hsv_> what does that mean?
[14:57:38] *** Quits: cassepipe (~Thunderbi@amontsouris-654-1-234-47.w90-44.abo.wanadoo.fr) (Client Quit)
[14:58:14] <constxd_> iOS apps are written in Swift / Objective-C
[14:58:36] *** Quits: alch (~alch@151.46.68.27) (Read error: Connection reset by peer)
[14:58:56] <constxd_> Objective-C is a superset of C
[14:59:00] <constxd_> very very based language
[14:59:56] *** Quits: vboykox (~user@95.134.57.234) (Ping timeout: 256 seconds)
[15:00:22] <constxd_> Hexmind: yes i have to write software FOR windows ON windows
[15:00:38] <constxd_> i hate it
[15:01:16] <Hexmind> constxd_, I write software for windows but on linux. I cross compile or just move code and compile
[15:01:48] <Hexmind> Well, I write software that has to run on windows and linux.
[15:02:12] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[15:02:13] <Hexmind> And mac, but I have no way to test for mac version, yet.
[15:02:15] <constxd_> i write some that has to run on both and some that only has to run on windows
[15:02:18] <hsv_> Hexmind: Qt ?
[15:02:19] <constxd_> WPF apps
[15:02:23] <Hexmind> SDL
[15:02:29] <constxd_> so visual studio is basically a necessity
[15:02:39] <Hexmind> Why?
[15:02:42] <constxd_> i tried very hard to make wsl + neovim work but it's just not worth it
[15:02:50] *** Joins: alch (~alch@151.46.7.102)
[15:03:31] <hsv_> Hexmind: what tools/libraries do you use to get cross-platform working code?
[15:03:40] <Hexmind> hsv_, SDL
[15:03:59] <Hexmind> I write games
[15:04:04] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:04:23] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[15:04:35] <constxd_> based
[15:04:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:04:56] <Hexmind> And every now and then I check that my code compiles on windows.
[15:05:23] *** Joins: sr20det (~sr20det@user/sr20det)
[15:05:55] <sr20det> is x^=y^=x^=y UB?
[15:06:48] <X-Scale> ,prec x^=y^=x^=y
[15:06:49] <candide> X-Scale: x ^= (y ^= (x ^= y))
[15:06:51] <dave0> sr20det: i think so, just use a regular swap like everyone else
[15:07:14] <hsv_> Hexmind: would that be a good choice for simple Windows/X programs?
[15:07:43] <Hexmind> hsv_, not really, unless you want to draw all your widgets yourself.
[15:08:05] *** Quits: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[15:08:05] *** Joins: some02 (~cat@user/sudden)
[15:08:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Read error: Connection reset by peer)
[15:08:10] *** some02 is now known as sudden
[15:09:01] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:09:23] <Hexmind> hsv_, I once wrote a traditional app for linux/windows and I used Gtk. It was a pain to port to windows.
[15:09:24] *** Quits: noobie (~noobie@ec2-16-170-240-4.eu-north-1.compute.amazonaws.com) (Quit: Client closed)
[15:09:46] <Hexmind> hsv_, I heard ImGui is pretty good though. You might want to take a look.
[15:10:03] <hsv_> thanks
[15:10:06] <Hexmind> bp
[15:11:15] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (Read error: Connection reset by peer)
[15:11:24] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[15:12:26] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:9102:5c27:2e48:97c2) (Read error: Connection reset by peer)
[15:12:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:13:18] *** Quits: liba (~liba@user/liba) (Ping timeout: 260 seconds)
[15:14:23] *** Joins: cassepipe (~Thunderbi@amontsouris-654-1-234-47.w90-44.abo.wanadoo.fr)
[15:14:53] *** Quits: cassepipe (~Thunderbi@amontsouris-654-1-234-47.w90-44.abo.wanadoo.fr) (Client Quit)
[15:16:29] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[15:16:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:17:18] <HisShadow_> there's a thing https://github.com/Immediate-Mode-UI/Nuklear you tell it instead how to draw, and then do widgets and stuff
[15:17:19] <candide> Title of HisShadow_'s link: GitHub - Immediate-Mode-UI/Nuklear: A single-header ANSI C immediate mode cross-platform GUI library
[15:17:35] *** Joins: arinov (~arinov@85.106.97.174)
[15:19:17] *** Quits: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b) (Quit: WeeChat 3.3)
[15:20:22] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[15:21:40] *** Joins: bnchs (~bnchs@105.157.170.42)
[15:23:30] <fizzie> ,cc unsigned x = 123, y = 456; printf("%u, %u", x, y); x ^= y ^= x ^= y; printf(" -> %u, %u", x, y); // there's even a warning
[15:23:33] <candide> fizzie: [warning: operation on 'x' may be undefined [-Wsequence-point]] 123, 456 -> 456, 123
[15:23:48] <fizzie> Well, a rather carefully worded warning, but a warning nevertheless.
[15:25:03] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:7c68:228:b173:b6f7)
[15:25:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[15:27:18] <hsv_> How would you safely de-serailise a 32-bit float (from 4-element byte array)?  I already have it for uint32_t using << and |.
[15:28:28] <sham1> uint8_t bytes[4]; /* ... */ float x; memcpy(&x, bytes, 4);
[15:28:30] <sham1> Something like that
[15:28:31] <nomagno> hsv_: Float representation is implementation defined
[15:28:43] <nomagno> But yeah ^
[15:28:43] <sham1> But yes, that's an important caveat
[15:28:45] *** Quits: constxd_ (~brad@142.167.170.88) (Ping timeout: 250 seconds)
[15:29:07] <hsv_> the 4-bytes are using IEEE-754.
[15:29:17] <nomagno> You can't "deserialize it" unless you know which floating point standard and platform you're using
[15:29:18] <sham1> Although in practice, I'd say that anything beyond IEE 754 is so rare that it can be dealt with separately
[15:29:43] <nomagno> I just don't use floats when trying to be portable, honestly
[15:29:53] <fizzie> If you already have it for uint32_t, just pack your unsigned char[4] into uint32_t, thereby reducing it to a solved problem. (Insert that joke about mathematicians.)
[15:29:54] <nomagno> At least more portable than normal
[15:30:09] <hsv_> good point, let's assume the platform is also IEEE-754 but cannot guarantee endianess.
[15:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:20] *** Joins: pulse (~pulse@user/pulse)
[15:30:26] <sham1> Fixed-point or just explicitly make the floating point into IEE-754 and then convert to whatever the native is somehow
[15:30:28] <dave0> safest way is use text
[15:30:37] <fizzie> Oh, I think I misinterpreted that to mean you already did uint32_t -> float, not unsigned char[4] -> uint32_t.
[15:31:02] *** Joins: csrf (~csrf@user/csrf)
[15:31:02] <sham1> Well unsigned char[4] -> uint32_t should help with getting the stuff into native endianness
[15:31:21] <hsv_> fizzie: i already have endian-safe read of uint32_t.
[15:31:48] <hsv_> Is it reasonable to case the uint32 into float?
[15:31:52] <hsv_> *cast
[15:32:01] <hsv_> (via a pointer cast)
[15:32:05] <sham1> Well if the bytes actually represent floats, sure
[15:32:07] <dave0> hsv_: use memcpy
[15:32:10] <sham1> But please don't pointer cast, use memcpy
[15:32:14] <sham1> Or a union
[15:32:17] <nomagno> Is it guaranteed a cast between two incompatible types will not result in a crash?
[15:32:42] <dave0> gcc makes a guarantee with unions but ansi c does not
[15:32:51] <sham1> dave0: C1999
[15:33:04] <dave0> oh c99 does? okay fair enough
[15:33:46] <sham1> Yeah, from then onwards using unions for type punning is valid
[15:33:52] <fizzie> It's of course not at all impossible to parse the meaning of the IEEE-754 bits in the bytes, and use functions like scalbnf to construct a float, if you want it to not assume anything about the platform's floating-point representation. But it's not something that fits in an IRC oneliner.
[15:33:56] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[15:34:16] <hsv_> fizzie: thanks :)
[15:35:16] <sham1> Yeah. Using scalbnf and such can also help with parsing things like half-precision floating pointer numbers (float16)
[15:35:41] *** Joins: liba (~liba@user/liba)
[15:35:53] <sham1> That's actually something I wonder. Why do we have float, double and long double instead of float, long float and long long float
[15:35:58] <sham1> (And short float)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:36] *** Quits: arinov (~arinov@85.106.97.174) (Ping timeout: 268 seconds)
[15:36:45] <fizzie> It'd be basically: special-case zeroes/infinities/nans/subnormals; if none of those, read the mantissa bits as an integer; convert that integer into float; read the exponent bits as an integer; adjust appropriately; use scalbnf to "apply" the exponent (and the proper interpretation of the mantissa as well).
[15:36:57] <fizzie> If you want to be *real* fancy, also handle FLT_RADIX != 2.
[15:37:40] *** Quits: bnchs (~bnchs@105.157.170.42) (Ping timeout: 250 seconds)
[15:38:08] *** drin is now known as Geezabiscuit
[15:39:22] <hsv_> Is the Windows/Mac/PC-Linux world pretty much little endian anyway?
[15:39:38] <sham1> Well most processor architectures
[15:39:51] <sham1> Those in use at least
[15:40:08] <dave0> http://www.c-faq.com/misc/binaryfiles.html
[15:40:17] <hsv_> Endianess is easy enough to deal with though.
[15:41:05] <sham1> I'm partial towards this if I need to define a protocol for some interchange: https://cbor.io/
[15:41:06] <candide> Title of sham1's link: CBOR — Concise Binary Object Representation | Overview
[15:41:18] <sham1> It's even an RFC
[15:41:41] *** Quits: LuKaRo (~LuKaRo@p200300dfa72f4b2b00000000000001f9.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[15:42:16] *** Joins: noobie (~noobie@ec2-16-170-240-4.eu-north-1.compute.amazonaws.com)
[15:42:57] <noobie> Im looking at C -code on different forks. Other one has, #pragma unroll    and other #pragma unroll 1  . What is the reason to put 1 ?
[15:43:14] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[15:43:14] <noobie> default is (4) afaik, but dont really understand why the 1
[15:43:15] *** Joins: LuKaRo (~LuKaRo@p4fc3264a.dip0.t-ipconnect.de)
[15:43:56] *** Joins: seninha (~seninha@user/seninha)
[15:44:31] <fizzie> ,cc float from = 123.456f; uint32_t bits; memcpy(&bits, &from, sizeof bits); float to = (bits & 0x7fffff) | 0x800000; int e = (bits >> 23) & 0xff; to = scalbnf(to, e-127-23); printf("%g -> %08"PRIx32" -> %g", from, bits, to); // okay, that part fits on one line
[15:44:33] <candide> fizzie: 123.456 -> 42f6e979 -> 123.456
[15:44:43] <supakeen> noobie: it's the same as 'no unroll'
[15:45:04] <supakeen> e.g. the same as # pragma nounroll
[15:45:20] <noobie> supakeen why do people want nounroll instead of unroll?
[15:45:25] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[15:45:33] <sham1> To stop unrolling
[15:45:46] <hsv_> fizzie: wow, thanks.
[15:45:57] <supakeen> smaller binary size, some other tidbits
[15:46:06] <tag> Does anyone know where I could find a good explainer on shared memory allocation in linux? In particular, I'm trying to better understand exactly how the allocations work and how they are laid out in the TLB.
[15:46:07] <noobie> any optimization benefit?
[15:46:14] <hsv_> In the meantime i got this - https://paste.debian.net/1228708/
[15:46:20] <noobie> I would gather, its less optimized?
[15:46:39] <supakeen> noobie: the speed difference can be minimal and it can make your binaries a bit larger; something that tradeoff is not acceptable
[15:46:40] <dave0> noobie: it's a time vs. space optimization
[15:46:49] *** Joins: notzmv (~zmv@user/notzmv)
[15:46:58] <dave0> oh yeah tradeoff
[15:47:04] <noobie> okay thanks
[15:49:20] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:49:49] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[15:53:02] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:54:35] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:58:38] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:e4b0:adf8:305f:a850)
[16:01:03] *** Joins: bnchs (~bnchs@105.157.170.42)
[16:03:34] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:03:39] *** Joins: slidercrank (~slidercra@user/slidercrank)
[16:08:29] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:15:36] *** Joins: constxd (~brad@142.167.170.88)
[16:15:59] *** Joins: constxd_ (~brad@142.167.170.88)
[16:17:15] *** Quits: bnchs (~bnchs@105.157.170.42) (Read error: Connection reset by peer)
[16:17:18] *** Joins: bnchs__ (~bnchs@105.157.170.42)
[16:17:38] *** Joins: eliasy (~user@2804:14c:4e6:85ba:8e12:ccb6:d537:9fe6)
[16:18:50] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[16:21:46] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[16:21:52] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[16:23:31] *** Joins: malina (~malina@user/malina)
[16:23:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[16:26:15] *** Joins: tolot (~tolot@dynamic-093-131-137-114.93.131.pool.telefonica.de)
[16:27:52] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[16:29:56] <pflanze> I'm looking for a spiced-up macro processor for C (macros that can define macros, and offer multiple cases (match or if/else) and recursion).
[16:31:15] *** Joins: zeenk (~zeenk@2a02:2f04:a208:c500:649e:b5e2:d15c:7960)
[16:31:45] <pflanze> Also, that can take a block as an argument (and put things after it).
[16:31:50] *** Joins: arinov (~arinov@78.162.47.28)
[16:32:30] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[16:32:50] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[16:37:10] *** Joins: Byzantine (~Byzantine@2a02:1388:95:5547:a0fa:73e8:870:c066)
[16:38:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:38:17] <nomagno> pflanze: m4 preprocessor that defines C preprocessor macros?
[16:39:11] <pflanze> Yeah, I was wondering if m4 would be the answer, I hear it's not very well designed, though? Do you have some project online that uses them?
[16:40:40] <pflanze> Also I wonder how integrated into the C code it would be.
[16:40:47] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:41:10] <pflanze> Like, do you have to escape various things in the C code so that it's not understood as m4?
[16:42:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:43:11] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:f505:b26c:eca0:28e4)
[16:43:16] *** Joins: bnchs (~bnchs@196.64.36.76)
[16:44:48] *** Joins: bnchs___ (~bnchs@41.251.61.78)
[16:45:16] *** Quits: bnchs__ (~bnchs@105.157.170.42) (Ping timeout: 250 seconds)
[16:46:49] *** Quits: Byzantine (~Byzantine@2a02:1388:95:5547:a0fa:73e8:870:c066) (Ping timeout: 256 seconds)
[16:47:52] *** Quits: bnchs (~bnchs@196.64.36.76) (Ping timeout: 250 seconds)
[16:52:48] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[16:53:12] <twkm> in general you can't ask a c compiler to invoke m4, you do that yourself prior.
[16:54:56] *** Quits: diophantoz (~diophanto@user/diophantoz) (Ping timeout: 245 seconds)
[16:55:02] *** pippijn_ is now known as pippijn
[16:55:03] <pflanze> Sure. I'm just wondering if the C code has to be uglified to allow m4 to deal with it.
[16:55:46] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:7c68:228:b173:b6f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:55:57] <twkm> of course it must, at least some parts.
[16:56:30] *** Joins: vboykox (~user@95.134.57.234)
[16:56:50] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:57:04] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[16:59:27] *** Joins: arinov_ (~arinov@78.162.46.154)
[16:59:30] *** Quits: arinov (~arinov@78.162.47.28) (Ping timeout: 256 seconds)
[17:01:07] <argonautx> hi everyone, I would like to read from a linux device a certain amount of bytes. with read, how can I achive this?
[17:01:12] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[17:02:15] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:03:48] <twkm> there's not much else, apart from using open to obtain a handle to use with read, permission to open it, and peculiarities with the device.
[17:06:11] *** Quits: BinarySavior_ (~BinarySav@josh.vet) (Remote host closed the connection)
[17:06:27] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[17:06:45] <clarity> I mean.. just read it?
[17:06:52] <clarity> And keep reading until you're done
[17:06:57] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 240 seconds)
[17:07:27] *** Joins: Byzantine (~Byzantine@2a02:1388:95:5547:2585:8e48:a8:9962)
[17:08:24] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:08:41] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:09:38] <argonautx> and save the read bytes until I got the amount of bytes I need?
[17:10:04] <ski> if that's what you want to do
[17:11:13] <argonautx> I have a data type of exact 248 byte. and I have a kernel driver which proveds this data packets via read function to applications
[17:11:30] <argonautx> but not in one instance
[17:11:55] <argonautx> sometimes the application reads 180 bytes, sometimes juat 16 bytes
[17:11:55] <twkm> so debugging time.
[17:12:13] <clarity> So keep reading.  Or change your driver.
[17:12:43] *** Joins: strajder (~strajder@user/strajder)
[17:14:35] *** Quits: Byzantine (~Byzantine@2a02:1388:95:5547:2585:8e48:a8:9962) (Ping timeout: 256 seconds)
[17:19:16] *** Joins: Guest24 (~Guest24@171.113.205.223)
[17:19:49] *** Quits: vboykox (~user@95.134.57.234) (Ping timeout: 240 seconds)
[17:26:13] *** Quits: arinov_ (~arinov@78.162.46.154) (Ping timeout: 240 seconds)
[17:26:28] *** Joins: arinov_ (~arinov@78.162.147.102)
[17:26:54] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[17:27:03] *** Joins: Byzantine (~Byzantine@2a02:1388:95:5547:1102:98db:73a4:7647)
[17:27:37] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[17:27:42] *** Quits: orbifx (~Thunderbi@orbitalfox.eu) (Remote host closed the connection)
[17:29:14] *** Joins: odoood (~odoood@2601:c8:c000:c4e0:f799:b570:9765:917c)
[17:30:12] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[17:31:46] *** Joins: serbest (~ike@user/serbest)
[17:32:01] *** Joins: vboykox (~user@95.134.57.234)
[17:32:42] *** Joins: Satin (uid193953@user/Seten)
[17:35:02] *** Quits: arinov_ (~arinov@78.162.147.102) (Ping timeout: 240 seconds)
[17:35:06] *** Joins: arinov (~arinov@78.162.147.120)
[17:35:38] *** Quits: odoood (~odoood@2601:c8:c000:c4e0:f799:b570:9765:917c) (Ping timeout: 260 seconds)
[17:35:43] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 250 seconds)
[17:36:04] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[17:37:06] <argonautx> ohhhuuu, I got it. I need to go to the shame corner
[17:37:28] *** Joins: jellie (~luv_panda@user/jellie)
[17:41:53] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[17:42:06] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[17:43:56] *** Guest9702 is now known as [R]
[17:44:23] *** Joins: soul-d (~uknown@user/soul-d)
[17:45:49] *** Quits: zeenk (~zeenk@2a02:2f04:a208:c500:649e:b5e2:d15c:7960) (Quit: Konversation terminated!)
[17:47:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[17:47:38] *** Quits: dj_pi (~dj_pi@d4-50-214-166.col.wideopenwest.com) (Quit: Leaving)
[17:47:48] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[17:47:48] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:51:25] *** Quits: Byzantine (~Byzantine@2a02:1388:95:5547:1102:98db:73a4:7647) (Ping timeout: 256 seconds)
[17:52:02] *** Joins: vysn (~vysn@user/vysn)
[17:53:51] *** Joins: symb0l (~symb0l@user/symb0l)
[17:53:57] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:606b:5910:1e37:5939) (Ping timeout: 240 seconds)
[17:57:14] *** Joins: Byzantine (~Byzantine@2a02:1388:95:5547:f526:bee:1582:4056)
[17:57:32] *** Quits: arinov (~arinov@78.162.147.120) (Ping timeout: 240 seconds)
[17:58:01] *** Joins: arinov (~arinov@78.162.47.24)
[17:59:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:59:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:59:56] *** Joins: wroathe (~wroathe@user/wroathe)
[18:01:32] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[18:01:32] *** Quits: Dotz0cat (~Dotz0cat@h59.213.213.151.dynamic.ip.windstream.net) (Ping timeout: 250 seconds)
[18:02:07] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f444:a000:4917:bc56:f54d:812b)
[18:03:35] *** Quits: arinov (~arinov@78.162.47.24) (Ping timeout: 252 seconds)
[18:05:06] *** Joins: wnbeser (~wnbeser@91-154-217-247.elisa-laajakaista.fi)
[18:05:52] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:e4b0:adf8:305f:a850) (Ping timeout: 250 seconds)
[18:06:33] *** Joins: Dotz0cat (~Dotz0cat@h184.231.187.173.dynamic.ip.windstream.net)
[18:08:04] *** Quits: bnchs___ (~bnchs@41.251.61.78) (Ping timeout: 256 seconds)
[18:12:08] *** Quits: wnbeser (~wnbeser@91-154-217-247.elisa-laajakaista.fi) (Quit: Leaving)
[18:18:32] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 240 seconds)
[18:18:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[18:18:49] *** Quits: eliasy (~user@2804:14c:4e6:85ba:8e12:ccb6:d537:9fe6) (Read error: Connection reset by peer)
[18:18:59] *** Parts: nathanael (~nathanael@user/nathanael) ()
[18:19:45] *** Quits: Byzantine (~Byzantine@2a02:1388:95:5547:f526:bee:1582:4056) (Ping timeout: 256 seconds)
[18:21:27] *** Joins: jellie (~luv_panda@user/jellie)
[18:30:58] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:f505:b26c:eca0:28e4) (Quit: This computer has gone to sleep)
[18:31:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:31:45] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:31:55] *** Joins: bnchs (~bnchs@41.251.61.78)
[18:34:43] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[18:34:57] *** Quits: Guest24 (~Guest24@171.113.205.223) (Quit: Client closed)
[18:35:14] *** Joins: Guest24 (~Guest24@103.97.201.163)
[18:35:49] *** Quits: liba (~liba@user/liba) (Ping timeout: 240 seconds)
[18:36:21] *** Joins: FluffyMask (~masque@user/fluffymask)
[18:38:46] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[18:39:51] *** Joins: uskerine (uskerine@186.189.78.188.dynamic.jazztel.es)
[18:40:03] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[18:42:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:43:31] <uskerine> hi, I read here https://stackoverflow.com/questions/56966432/is-there-a-binary-search-method-in-the-c-standard-library that compareint function can be used to call bsearch(). If values would use __uint128_t instead of int, could I use this instead? https://bpa.st/K4VA
[18:43:32] *** Quits: serbest (~ike@user/serbest) (Remote host closed the connection)
[18:44:34] *** Quits: noobie (~noobie@ec2-16-170-240-4.eu-north-1.compute.amazonaws.com) (Quit: Client closed)
[18:50:36] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:51:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:51:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:51:16] *** Joins: wroathe (~wroathe@user/wroathe)
[18:51:24] *** Joins: noobie (~noobie@ec2-16-170-240-4.eu-north-1.compute.amazonaws.com)
[18:51:27] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:52:03] <noobie> I saw some flags in configuration file: -std=c99 and -std=c++11 . Should i change them to -std=c++17 and what would c be?
[18:56:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:58:30] <rkta> noobie: why would you want to change them?
[19:01:11] *** Quits: alch (~alch@151.46.7.102) (Ping timeout: 245 seconds)
[19:03:08] *** Joins: alch (~alch@151.46.62.29)
[19:03:39] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:7ce8:3fb1:9da3:a544)
[19:04:57] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.6) (Ping timeout: 240 seconds)
[19:05:30] *** Quits: noobie (~noobie@ec2-16-170-240-4.eu-north-1.compute.amazonaws.com) (Quit: Client closed)
[19:07:21] *** Joins: Guest96fd (~Guest96fd@206.223.160.26)
[19:07:58] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[19:08:17] <Guest96fd> Anyone know of a good FOSS synthetic load for C?
[19:08:29] <Guest96fd> in C**
[19:09:14] <fizzie> uskerine: Not safely. The result of subtracting two __uint128_t values may be a much larger than what `int` can represent. The conversion may overflow and produce a value with the wrong sign. It's not even safe for two `int` values as in the SO post, and it's very sad nobody has commented on that.
[19:09:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:09:44] *** Quits: zmt00 (~zmt00@user/zmt00) (Remote host closed the connection)
[19:11:13] <fizzie> ,cc -w int compareints(int a, int b) { return a - b; }  int a = INT_MIN, b = INT_MAX; printf("%d cmp %d = %d", a, b, compareints(a, b));
[19:11:15] <candide> fizzie: -2147483648 cmp 2147483647 = 1
[19:11:25] <uskerine> fizzie any suggestion ot implement the bsearch for __uint128_t then?
[19:11:30] <fizzie> In other words, the function is of the opinion that -2147483648 is larger than 2147483647.
[19:12:14] <fizzie> I prefer just the straight-forward if verbose comparison function implementation of `if (a < b) return -1; if (a > b) return 1; return 0;`.
[19:12:34] <uskerine> ok
[19:12:37] <uskerine> thanks a lot
[19:13:28] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[19:13:28] *** Joins: myth (~myth@173.233.125.203)
[19:14:11] <bnchs> does it save more CPU time to compare / with / and then x.x with y.y, instead of comparing /x.x with /y.y if the slash doesn't change
[19:14:31] <bnchs> ,cc
[19:14:32] <candide> bnchs: Usage: cc [-lang=<language>] [-info] [-paste] [-args "command-line arguments"] [compiler/language options] <code> [-stdin <stdin input>]
[19:15:55] <bnchs> ,time
[19:15:55] <bnchs> ,help
[19:15:56] <candide> For general help, see <https://github.com/pragma-/pbot/tree/master/doc>. For help about a specific command or factoid, use `help <keyword> [channel]`.
[19:15:56] <candide> It's Fri Jan 28 15:45:55 UTC 2022.
[19:18:13] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.111)
[19:18:39] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[19:18:51] <bnchs> ,excuse
[19:18:52] <candide> It is a layer 8 problem
[19:19:23] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:21:05] <Learath2> bnchs: If you already know that a / is there, sure, in theory. In reality it depends on so many factors that you really can't know unless you try
[19:21:23] *** Quits: Inline__ (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[19:23:11] <uskerine> fizzie, what if I would like bsearch function to return the next bigger element if element is not present?
[19:23:42] <uskerine> can that be done just by providing a custom comparison function or do I have to code the entire algorithm? -such as in here https://stackoverflow.com/questions/16219998/modify-binary-search-to-find-the-next-bigger-item-than-the-key)
[19:25:07] <sham1> You need to create a new algorithm
[19:25:34] *** Joins: the_lanetly_052_ (~the_lanet@185.30.90.202)
[19:27:26] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.111) (Ping timeout: 245 seconds)
[19:30:14] *** Quits: fe23 (~fe23@2409:8a34:461:9470:e1fc:2952:b771:5095) (Quit: fe23)
[19:33:35] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:34:16] *** Quits: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se) (Read error: Connection reset by peer)
[19:34:39] *** Joins: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se)
[19:35:51] <fizzie> Yeah. It's unfortunate. *Possibly* you could do it by tracking the values (and addresses) seen by the comparison function, but it would definitely require passing state through some external means (static or thread-local variables, say) and probably wouldn't be strictly correct in the sense that I don't think bsearch guarantees specifics of what the comparison function is called on.
[19:36:17] <uskerine> I am wondering if using some temporary variables in the comparison function might do the trick
[19:36:21] <Learath2> (you shouldn't do that)
[19:36:27] <Learath2> ((don't))
[19:36:31] <Learath2> (((please)))
[19:37:36] *** Quits: gce108_ (~gce@64-250-5-223.gvec.net) (Quit: Leaving)
[19:38:04] <pragma-> ,excuse
[19:38:05] <candide> The file system is full of it
[19:38:09] <pragma-> ,fnord
[19:38:09] <candide> Fnord is the founding father of the phrase "founding father".
[19:38:16] <pragma-> ,fnord
[19:38:16] <candide> Fnord is why Burger King uses paper instead of foam.
[19:39:18] *** Joins: gce108 (~gce@user/gce108)
[19:39:28] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[19:43:03] <bnchs> ,excuse
[19:43:04] <candide> SCSI Chain overterminated
[19:43:09] <bnchs> ,excuse
[19:43:09] <candide> Incorrectly configured static routes on the corerouters.
[19:44:06] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[19:45:39] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:606b:5910:1e37:5939)
[19:46:57] <esselfe> ,beer
[19:46:59] * candide pours an earthy tall glass of light beer for e﻿sselfe with extra foam
[19:50:08] <fizzie> Yeah, please please please don't do it. But still:
[19:50:10] <fizzie> ,cc const int *lo, *hi; int cmp(const void *pk, const void *pv) { const int *k = pk, *v = pv; if (*k < *v) { hi = v; return -1; } if (*k > *v) { lo = v; return 1; } return 0; } int main(void) { int nums[] = {1, 5, 11, 19, 22}; bsearch(&(int){10}, nums, 5, sizeof *nums, cmp); printf("10 is between %d and %d", *lo, *hi); }
[19:50:13] <candide> fizzie: 10 is between 5 and 11
[19:50:22] <fizzie> But don't.
[19:51:39] *** Joins: ic3blx_ (~ic3blx___@87.116.182.42)
[19:51:39] *** Quits: ic3blx_ (~ic3blx___@87.116.182.42) (Changing host)
[19:51:39] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[19:56:01] *** Joins: Darkcoal (~user@167.86.148.150)
[19:58:10] *** Joins: pulse (~pulse@user/pulse)
[19:58:17] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:58:39] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:58:54] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[20:01:17] *** Quits: nicode (~nic@2607:f2c0:948c:c300:d115:fc66:1a1:1b6c) (Ping timeout: 240 seconds)
[20:01:18] *** Joins: Akiva (~Akiva@user/Akiva)
[20:02:45] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[20:04:00] *** Quits: Guest24 (~Guest24@103.97.201.163) (Quit: Client closed)
[20:04:40] *** Joins: nicode (~nic@45.72.226.166)
[20:05:43] *** Quits: Guest96fd (~Guest96fd@206.223.160.26) (Ping timeout: 256 seconds)
[20:05:56] *** Quits: ski (~ski@remote11.chalmers.se) (Ping timeout: 256 seconds)
[20:06:15] *** Joins: Guest24 (~Guest24@103.97.201.163)
[20:12:59] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:606b:5910:1e37:5939)
[20:14:51] *** Joins: vicfred (~vicfred@user/vicfred)
[20:16:27] *** Joins: vicfred_ (~vicfred@user/vicfred)
[20:16:34] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:606b:5910:1e37:5939) (Ping timeout: 268 seconds)
[20:17:54] *** Quits: Trashlord (~trash@user/trashlord) (Read error: Connection reset by peer)
[20:17:57] *** Joins: Trashlord__ (~trash@user/trashlord)
[20:18:57] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 240 seconds)
[20:20:59] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:7c68:228:b173:b6f7)
[20:21:03] *** Joins: diophantoz (~diophanto@user/diophantoz)
[20:24:49] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Remote host closed the connection)
[20:26:50] *** Quits: tolot (~tolot@dynamic-093-131-137-114.93.131.pool.telefonica.de) (Quit: Leaving)
[20:30:12] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[20:33:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[20:34:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:34:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:34:12] *** Joins: wroathe (~wroathe@user/wroathe)
[20:35:24] *** Quits: bnchs (~bnchs@41.251.61.78) (Ping timeout: 256 seconds)
[20:36:59] *** Parts: mjacob (~mjacob@adrastea.uberspace.de) ()
[20:38:23] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[20:38:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[20:40:17] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[20:43:02] *** Joins: magla (~gelignite@55d49292.access.ecotel.net)
[20:43:10] *** Joins: mahmutov (~mahmutov@5.176.32.238)
[20:43:35] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[20:45:20] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:b45b:c4a9:477:d786)
[20:45:20] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:b45b:c4a9:477:d786) (Changing host)
[20:45:20] *** Joins: skapata (~Skapata@user/skapata)
[20:47:55] *** Joins: van3ll0pe (~van3ll0pe@37.166.209.253)
[20:49:41] *** Quits: Darkcoal (~user@167.86.148.150) (Ping timeout: 252 seconds)
[20:50:06] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Read error: Connection reset by peer)
[20:53:40] *** Joins: odoood (~odoood@c-71-204-80-147.hsd1.ga.comcast.net)
[20:54:07] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[20:54:26] *** Joins: FIlystyn (~piotr@user/filystyn)
[20:54:35] <FIlystyn> hello, linking question
[20:54:49] <FIlystyn> something that I expect not to link gets linked
[20:55:24] <megaTherion> so dont link it
[20:56:11] <FIlystyn> I want it linked just was suprised it work
[20:56:27] <FIlystyn> just a sec Ill make a exampel of commands
[20:56:28] <megaTherion> maybe provide more information
[21:04:02] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 240 seconds)
[21:09:10] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[21:11:07] *** Joins: haliucinas (~haliucina@5.20.153.21)
[21:11:43] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[21:14:19] *** Joins: zlf (~zlf@171.113.205.223)
[21:14:26] <FIlystyn> https://termbin.com/7pqi
[21:15:52] *** Quits: diiirt (~diiirt@user/diiirt) (Remote host closed the connection)
[21:16:15] *** Joins: diiirt (~diiirt@user/diiirt)
[21:18:20] <FIlystyn> this is happening in make file, not sure that matters
[21:19:54] <megaTherion> hard to tell, not enough information
[21:20:02] <megaTherion> maybe compare your two objects with elfdump / objdump or whatever
[21:20:29] <megaTherion> maybe you dont need anything out of your lib, maybe everything is inline *shrugs*
[21:21:52] *** Quits: odoood (~odoood@c-71-204-80-147.hsd1.ga.comcast.net) (Ping timeout: 256 seconds)
[21:22:12] <FIlystyn> nothing is inline
[21:22:37] <FIlystyn> the lib is needed If I comment the lib object/archive cration it breaks
[21:23:02] <FIlystyn> Anyway I need to go now. Will later maybe provide much more details
[21:23:22] <FIlystyn> thank you for trying to help
[21:23:38] *** Quits: FIlystyn (~piotr@user/filystyn) (Quit: Lost terminal)
[21:25:19] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[21:28:13] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 250 seconds)
[21:32:08] *** Quits: the_lanetly_052_ (~the_lanet@185.30.90.202) (Ping timeout: 250 seconds)
[21:32:09] *** Joins: jetchisel (jetchisel@user/jetchisel)
[21:32:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[21:33:05] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[21:33:26] *** Quits: Major_Biscuit (~MajorBisc@c-001-005-022.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:37:49] *** Quits: Guest24 (~Guest24@103.97.201.163) (Quit: Client closed)
[21:40:24] *** Quits: zlf (~zlf@171.113.205.223) (Quit: WeeChat 3.4)
[21:40:37] *** Quits: Trashlord__ (~trash@user/trashlord) (Ping timeout: 240 seconds)
[21:41:00] *** Joins: Trashlord (~trash@user/trashlord)
[21:42:13] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[21:42:28] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[21:43:46] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[21:46:02] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 240 seconds)
[21:46:48] *** Joins: Trashlord (~trash@user/trashlord)
[21:47:58] *** Joins: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com)
[21:48:34] *** Quits: vboykox (~user@95.134.57.234) (Ping timeout: 260 seconds)
[21:54:40] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:55:06] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 250 seconds)
[21:55:18] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Ping timeout: 256 seconds)
[21:55:19] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:58:06] *** Joins: j-james (~apropos@dhcp-206-87-156-58.ubcsecure.wireless.ubc.ca)
[22:00:40] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::4)
[22:02:40] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 256 seconds)
[22:02:49] *** Quits: j-james (~apropos@dhcp-206-87-156-58.ubcsecure.wireless.ubc.ca) (Client Quit)
[22:03:23] *** Quits: luizfrds (~Luiz@152.250.243.147) (Quit: Leaving)
[22:03:35] *** Joins: vysn (~vysn@user/vysn)
[22:05:55] *** Quits: mahmutov (~mahmutov@5.176.32.238) (Ping timeout: 250 seconds)
[22:07:11] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[22:11:44] *** Joins: joomla5 (uid527699@id-527699.uxbridge.irccloud.com)
[22:19:32] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[22:20:14] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 250 seconds)
[22:20:57] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[22:22:18] *** Joins: cryptone1tor (~nico@24.28.108.183)
[22:22:42] *** Joins: scoobydoo_ (~scooby@user/scoobydoo)
[22:22:42] *** Joins: trav21788 (travankor@user/travankor)
[22:22:50] *** Joins: byte4byte_ (~byte4byte@c-73-219-127-47.hsd1.ma.comcast.net)
[22:23:02] *** Joins: Hexmind_ (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[22:23:15] *** Joins: nahcetan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[22:23:21] *** Joins: immibis_ (~hexchat@62.156.144.218)
[22:23:28] *** Joins: pflanze_ (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch)
[22:24:07] *** Joins: phryk_ (~totallyno@user/phryk)
[22:25:02] *** Joins: Masklin (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[22:25:14] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Remote host closed the connection)
[22:25:14] *** Quits: travankor (travankor@user/travankor) (Read error: Connection reset by peer)
[22:25:14] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection reset by peer)
[22:25:14] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[22:25:14] *** Quits: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch) (Read error: Connection reset by peer)
[22:25:14] *** Quits: phryk (~totallyno@user/phryk) (Read error: Connection reset by peer)
[22:25:14] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.a230.priv.bahnhof.se) (Read error: Connection reset by peer)
[22:25:14] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (Remote host closed the connection)
[22:25:14] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: cryptonector (~nico@24.28.108.183) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: cyphics (~cyphix@user/cyphics) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: thiccdaddy (~o_O@user/thiccdaddy) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: emias (~holger@home.zedat.fu-berlin.de) (Ping timeout: 256 seconds)
[22:25:16] *** scoobydoo_ is now known as scoobydoo
[22:25:19] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[22:25:31] *** Joins: cyphics (~cyphix@user/cyphics)
[22:25:37] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[22:25:40] *** Joins: emias (~holger@home.zedat.fu-berlin.de)
[22:25:41] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: alphabeta (~kilolympu@31.205.200.235) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: koo5_ (~quassel@51.140.155.227) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: beencubed (~beencubed@209.131.238.248) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: sebito91 (~sborza@45.55.74.66) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: byte4byte (~byte4byte@c-73-219-127-47.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: csjp (~csjp@user/csjp) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: APic (apic@apic.name) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: Ekho (~Ekho@user/ekho) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: hsv_ (~unknown@user/hsv) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: dzz007 (~dzz007@user/dzz007) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: disconnect3d (~disconnec@user/disconnect3d) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Ping timeout: 256 seconds)
[22:25:49] *** Joins: csjp (~csjp@user/csjp)
[22:26:00] *** Joins: koo5_ (~quassel@51.140.155.227)
[22:26:05] *** Joins: polyrob (~rob@user/polyrob)
[22:26:05] *** Joins: dzz007 (~dzz007@user/dzz007)
[22:26:07] *** Joins: APic (apic@apic.name)
[22:26:07] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[22:26:15] *** Quits: sunyour (~sunyour@129.226.182.99) (Ping timeout: 256 seconds)
[22:26:25] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[22:26:27] *** Joins: hsv (~unknown@user/hsv)
[22:26:43] *** Joins: sebito91 (~sborza@45.55.74.66)
[22:26:57] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[22:27:11] *** Joins: beencubed (~beencubed@209.131.238.248)
[22:27:28] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[22:27:35] *** Joins: disconnect3d (~disconnec@user/disconnect3d)
[22:27:41] *** Joins: thiccdaddy (~o_O@user/thiccdaddy)
[22:27:58] *** Joins: sunyour (~sunyour@129.226.182.99)
[22:28:02] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[22:29:28] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[22:29:31] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[22:29:45] *** Joins: gonogo_ (~gonogo@167.88.62.87)
[22:29:57] *** Quits: gonogo (~gonogo@167.88.62.87) (Read error: Connection reset by peer)
[22:30:07] *** Joins: Electric_Sheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net)
[22:30:09] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[22:30:47] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Ping timeout: 256 seconds)
[22:30:47] *** Quits: high_ground (~high_grou@user/high-ground/x-5722129) (Ping timeout: 256 seconds)
[22:31:13] *** Joins: Akuli (~Akuli@213.216.210.211)
[22:31:38] *** Joins: Ekho (~Ekho@user/ekho)
[22:31:52] *** Joins: high_ground (~high_grou@user/high-ground/x-5722129)
[22:31:55] *** Quits: avar (avar@vm.nix.is) (Ping timeout: 256 seconds)
[22:31:55] *** Joins: bnchs (~bnchs@41.251.61.78)
[22:32:02] *** Joins: avar (avar@vm.nix.is)
[22:32:29] *** Quits: Elladan (~elladan@user/elladan) (Ping timeout: 256 seconds)
[22:32:29] *** Quits: Luke (~ldm@hacksoc/member) (Ping timeout: 256 seconds)
[22:32:43] *** Joins: Luke (~ldm@hacksoc/member)
[22:33:10] *** Joins: Elladan (~elladan@user/elladan)
[22:33:13] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[22:33:33] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Client Quit)
[22:34:24] *** Quits: argonautx (~argonautx@i5E8670EE.versanet.de) (Quit: Leaving)
[22:34:43] *** Quits: r1d1 (~tom@0543dbad.skybroadband.com) (Remote host closed the connection)
[22:35:00] *** Joins: r1d1 (~tom@0543dbad.skybroadband.com)
[22:35:12] *** Quits: bnchs (~bnchs@41.251.61.78) (Read error: Connection reset by peer)
[22:35:48] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[22:40:39] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:41:12] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[22:41:29] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[22:42:09] <CodeAgain> It's somewhat off-topic, but... What do you think about a code that reads a random-sized /dev/random buffer, does a hash on it, convert it to hex, randomly changes some of the hex alpha digits to upper or lower case and randomly inserts special characters in the middle?
[22:42:55] <CodeAgain> Considering it's intended to generate strong passwords, will the generated passwords be safe ones?
[22:43:39] *** Joins: Betal (~Betal@user/betal)
[22:45:23] <clarity> What's the point of hashing randomness?
[22:46:32] <BtbN> Just... grab a password from /dev/random
[22:46:52] *** Joins: j-james (~apropos@dhcp-206-87-156-58.ubcsecure.wireless.ubc.ca)
[22:49:14] <ChoHag> But hashing it gives you MOAR SECURITY!
[22:49:25] <clarity> Then I'm gonna hash my tail
[22:49:58] <kurahaupo> CodeAgain: converting to hexadecimal restricts the entropy that can be included in a given length of password. Use base-64 encoding if you want alphanumeric, or better still, use the full range of printable Unicode
[22:51:32] *** Quits: lompik (~lompik@user/lompik) (Quit: WeeChat 3.4)
[22:51:41] *** Joins: carlavilla (~carlavill@2a0c:5a84:320d:6900:21f:16ff:fe0f:275a)
[22:52:08] <kurahaupo> CodeAgain: or even better, use a source of randomness to choose 5 words from /usr/share/dict/words
[22:53:52] <kurahaupo> CodeAgain: Google for "correct horse battery staple"
[22:54:29] <CodeAgain> Thanks a lot kurahaupo
[22:54:59] <CodeAgain> I didn't think straight about the reduced range of characters hexadecimal would produce
[22:55:43] <CodeAgain> I'll google it
[22:56:25] <kurahaupo> https://xkcd.com/936/
[22:56:26] <candide> Title of kurahaupo's link: xkcd: Password Strength
[22:57:50] *** Joins: soul-bw (~uknown@2a02-a456-85ad-1-bc35-14cb-5d4d-a24d.fixed6.kpn.net)
[22:58:06] *** Quits: alch (~alch@151.46.62.29) (Read error: Connection reset by peer)
[22:58:12] <CodeAgain> I just loved it, kurahaupo
[22:58:59] <CodeAgain> I'll use a list of syllables instead of words, though
[23:00:06] *** Quits: soul-d (~uknown@user/soul-d) (Ping timeout: 250 seconds)
[23:02:04] *** Joins: jkotra4 (~jkotra@122.169.225.205)
[23:02:32] *** Joins: alch (~alch@151.46.74.127)
[23:03:25] *** Quits: jkotra (~jkotra@223.230.82.56) (Ping timeout: 240 seconds)
[23:03:25] *** jkotra4 is now known as jkotra
[23:03:38] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[23:06:17] <no-n> is /dev/random actually right for this?
[23:06:25] <no-n> or is it /dev/urandom, or something else?
[23:11:46] <ChoHag> If in doubt, /dev/random.
[23:12:13] *** Joins: mahmutov (~mahmutov@37.155.32.244)
[23:12:39] *** Joins: crashrep (~crashrep@user/crashrep)
[23:15:30] *** Quits: marlboro (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[23:19:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:21:10] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[23:22:00] *** Joins: dsrt^ (~dsrt@75-147-197-198-Atlanta.hfc.comcastbusiness.net)
[23:23:04] *** Quits: mahmutov (~mahmutov@37.155.32.244) (Ping timeout: 250 seconds)
[23:24:24] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[23:27:19] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Client Quit)
[23:29:03] *** Joins: mahmutov (~mahmutov@5.176.60.245)
[23:29:57] *** Joins: gareppa (~gareppa@user/gareppa)
[23:30:24] *** Joins: vboykox (~user@234-57-134-95.pool.ukrtel.net)
[23:31:01] *** Quits: ajf_ (~ajf_@user/ajf/x-9593112) (Remote host closed the connection)
[23:31:59] *** Quits: gareppa (~gareppa@user/gareppa) (Client Quit)
[23:33:15] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:7c68:228:b173:b6f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:36:48] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[23:37:35] *** Joins: crashrep (~crashrep@user/crashrep)
[23:37:55] *** Quits: crashrep (~crashrep@user/crashrep) (Client Quit)
[23:40:03] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[23:43:23] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:44:25] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[23:44:28] *** Quits: myth (~myth@173.233.125.203) (Quit: Ill be back!)
[23:45:36] *** Joins: myth (~myth@173.233.125.203)
[23:53:04] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[23:54:37] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[23:54:39] *** lukedashjr is now known as luke-jr
[23:55:23] *** Joins: semeion (~semeion@user/semeion)
[23:56:01] *** trav21788 is now known as travankor
[23:58:38] *** Joins: Charadon (~Charadon@155.138.164.183)
