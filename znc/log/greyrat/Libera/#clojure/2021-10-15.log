[00:02:11] *** Quits: wonko (~wjc@62.115.229.50) (Ping timeout: 245 seconds)
[00:03:44] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[00:32:41] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 265 seconds)
[00:33:11] *** Quits: Afroboy (~afroboy@105.107.81.167) (Quit: Leaving)
[00:51:56] *** Quits: Null_A (~null_a@2601:645:8700:2290:e4f7:cf97:bec9:9d10) (Remote host closed the connection)
[00:57:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:e4f7:cf97:bec9:9d10)
[00:57:52] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:02:04] <sobel> technomancy: several years, i was the new-column-and-a-backfill guy at work
[01:02:43] <technomancy> it's not a bad gig
[01:02:58] <sobel> it was kinda fun. our db was redlined constantly, so batch size had to be kept low enough to avoid locking up the whole user table
[01:03:38] <sobel> every backfill was different enough that i wrote a daemon that generated templated work queries
[01:03:50] <sobel> and made sure it wasn't pounding the server
[01:04:04] <technomancy> I've done backfills before where the amount of delay between batches was determined by an atom and run in a background thread so I could tune it depending on how close it was to getting overloaded
[01:04:17] <sobel> nice!
[01:05:01] <sobel> my backfill program was successful enough that it got cloned into an indexer daemon. once we had upgraded into CREATE INDEX CONCURRENTLY we needed more advanced management
[01:05:25] <sobel> concurrency is great but it is the exact opposite of fire & forget
[01:07:11] *** Quits: Null_A (~null_a@2601:645:8700:2290:e4f7:cf97:bec9:9d10) (Remote host closed the connection)
[01:08:12] *** Quits: mlb- (~kahr@158.51.193.173) (Remote host closed the connection)
[01:10:10] *** Joins: mlb- (~kahr@158.51.193.173)
[01:13:08] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 265 seconds)
[01:30:30] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[01:30:47] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[01:32:27] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[01:37:44] *** Joins: libertyprime (~libertypr@118.149.83.180)
[01:43:04] *** Wanderer_ is now known as Wanderer
[02:08:43] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 252 seconds)
[02:14:34] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[02:22:35] *** Joins: Null_A (~null_a@2601:645:8700:2290:e4f7:cf97:bec9:9d10)
[02:30:10] *** Quits: libertyprime (~libertypr@118.149.83.180) (Ping timeout: 252 seconds)
[02:35:18] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 265 seconds)
[02:46:10] *** Quits: runejuhl (~runejuhl@user/runejuhl) (Ping timeout: 252 seconds)
[03:04:31] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[03:07:19] *** Joins: runejuhl (~runejuhl@user/runejuhl)
[03:17:11] *** Joins: libertyprime (~libertypr@118.149.79.172)
[03:35:03] *** Joins: Munto (~Munto@120.51.3.93.rev.sfr.net)
[04:12:52] *** Quits: libertyprime (~libertypr@118.149.79.172) (Quit: leaving)
[04:20:11] *** Quits: jirido (~jirido@mobile-access-5672df-175.dhcp.inet.fi) (Ping timeout: 265 seconds)
[04:20:26] *** Joins: jirido (jirido@gateway/vpn/protonvpn/jirido)
[04:32:43] *** Quits: jespada (~jespada@host196.190-3-30.dynamic.telmex.net.ar) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:33:12] *** Joins: jespada (~jespada@2803:9800:9842:7a62:c52b:2a1d:b7c2:2b5a)
[04:38:12] *** Quits: jespada (~jespada@2803:9800:9842:7a62:c52b:2a1d:b7c2:2b5a) (Ping timeout: 268 seconds)
[04:49:21] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[04:50:09] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 265 seconds)
[05:15:13] *** Joins: jespada (~jespada@2803:9800:9842:7a62:c52b:2a1d:b7c2:2b5a)
[05:30:56] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::6a2) (Ping timeout: 245 seconds)
[05:50:35] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[06:01:25] *** Quits: jespada (~jespada@2803:9800:9842:7a62:c52b:2a1d:b7c2:2b5a) (Ping timeout: 252 seconds)
[06:19:05] *** Joins: mamapitufo (~mamapituf@185.45.15.106)
[06:47:04] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 252 seconds)
[06:55:14] *** Quits: Null_A (~null_a@2601:645:8700:2290:e4f7:cf97:bec9:9d10) (Remote host closed the connection)
[07:18:48] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[07:19:01] *** Quits: mamapitufo (~mamapituf@185.45.15.106) (Ping timeout: 265 seconds)
[07:20:38] *** Joins: mamapitufo (~mamapituf@188.29.96.7.threembb.co.uk)
[07:29:36] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[07:36:13] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:50:49] *** Quits: mamapitufo (~mamapituf@188.29.96.7.threembb.co.uk) (Ping timeout: 252 seconds)
[08:18:40] <Vaelatern> Is there a clojure idiom for "Run this in a thread and let me check whether it has completed yet"?
[08:19:43] <Vaelatern> Or a clojure idiom for having tasks that run in a different thread or threads, but in limited number, like a thread pipeline (but with threads knowing which number they are)?
[08:20:30] <technomancy> maybe future ?
[08:26:04] <Vaelatern> Oh that's good
[08:27:16] <Vaelatern> That solves most except I think locking to ensure only one future from a mechanism is run at a time (limited resource on disk)
[08:29:29] <Vaelatern> https://clojuredocs.org/clojure.core/locking unless I want to lock in a "pool", think queues to check out of a grocery store
[08:29:58] <Vaelatern> I think this will work for me. Great! Thanks!
[08:35:47] *** Joins: abraham (~abraham@143.244.185.86)
[08:41:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[08:41:18] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:44:06] *** Joins: struchu (~struchu@staticline-31-183-183-227.toya.net.pl)
[09:12:36] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 245 seconds)
[09:18:47] <opqdonut> Vaelatern: for more control, consider the claypoole library
[09:19:02] <opqdonut> you can make a thread pool with 1 runner, and then launch futures in that
[09:19:15] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[09:19:22] <opqdonut> alternatively, some people would use core.async to pull tasks from a queue and run them one by one
[09:26:37] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 265 seconds)
[09:28:21] <rovanion> Vaelatern: What I did once was to copy the source code of future into my own file and make the number of threads used for the threadpool backing my-future configureable by me.
[09:30:45] <rovanion> It's really nice that so much of Clojure is just Clojure, so you can cider-go-to-source (or whatever it's called) and see how a core function is implemented and if you want to modify it slightly, just copy-and-paste.
[09:36:56] <opqdonut> you can also (IIRC) just .execute ja clojure fn in a java Executor
[09:37:09] <opqdonut> since the fns implement Runnable
[09:37:17] <opqdonut> or is it Task
[09:37:18] <opqdonut> anyway
[09:57:39] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[10:02:23] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 265 seconds)
[10:04:00] *** Joins: justHaunt1 (~justache@user/justache)
[10:04:54] *** Quits: ridcully (~ridcully@p57b523cc.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: justHaunt (~justache@user/justache) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (Ping timeout: 245 seconds)
[10:04:56] *** justHaunt1 is now known as justHaunt
[10:05:42] *** Joins: ridcully (~ridcully@p57b523cc.dip0.t-ipconnect.de)
[10:06:08] *** Joins: Techcable (~Techcable@168.235.93.147)
[10:06:33] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[10:18:40] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[10:27:19] *** Joins: cranium (~cranium@user/cranium)
[10:30:20] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[10:34:38] *** Joins: haircode (~haircode@62.196.189.80.dyn.plus.net)
[10:35:05] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 260 seconds)
[11:04:15] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[11:08:55] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 260 seconds)
[11:32:28] *** Quits: struchu (~struchu@staticline-31-183-183-227.toya.net.pl) (Ping timeout: 252 seconds)
[11:34:38] *** Joins: struchu (~struchu@staticline-31-183-183-227.toya.net.pl)
[11:35:16] *** Joins: trillp (~trillp@69.233.98.238)
[11:38:13] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:05:36] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Remote host closed the connection)
[12:06:25] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[12:10:57] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 265 seconds)
[12:28:43] *** Quits: haircode (~haircode@62.196.189.80.dyn.plus.net) (Quit: Konversation terminated!)
[12:37:22] <Ingvix> hmm, so in clojure the closest thing I can get to a block comment within a line is using #_ as a prefix for every form I wish to be ignored?
[12:37:35] <Ingvix> there's nothing like */ /*?
[12:37:41] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[12:38:50] <ridcully> there is only `;`, `#_`, and `(comment ...)` (which reads the whole form)
[12:39:34] <Ingvix> a bit of a bummer
[12:42:13] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[12:45:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[12:46:53] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 264 seconds)
[12:48:53] <raek> Vaelatern: how the clojure api related to futures relate to the undeerlying Java Executor and Future APIs can be a bit confusing, so I wrote a blog post about that some time ago: https://blog.raek.se/2011/01/24/executors-in-clojure/
[12:51:18] <raek> but ExecutorService/newFixedThreadPool lets you create a thread pool of size 1, like opqdonut suggested
[12:53:15] <Ingvix> though, wouldn't adding braces like #_( ... ) pretty much equal to a block comment that can be placed quite arbitrarily
[12:54:27] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[12:54:44] *** Joins: haircode (~haircode@62.196.189.80.dyn.plus.net)
[12:56:56] <ridcully> yes.  #_ is a reader macro, that ignores the next expression
[12:57:52] <ridcully> you can also stack them.  e.g. if you want to get rid of a kv-pair in a map literal.  {:a 1 #_#_ :b 2 :c 3} works too
[12:58:34] <ridcully> i use #_\n( ... ) alot when in "experimentation stage" of code
[12:59:01] <opqdonut> yeah putting #_ on the previous line lets you not botch indentation
[12:59:05] <Ingvix> cool
[12:59:53] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[13:00:08] <ridcully> oh i usually only add the linebreak to trick vim-fireplace to execute my outermost form
[13:05:25] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 252 seconds)
[13:09:20] *** Joins: mamapitufo (~mamapituf@188.29.96.7.threembb.co.uk)
[13:13:32] <yeik-the-spik[m]> <sobel> "yeik-the-spik: are you using..." <- No. Serverside is clj. But because I don't really know anything about client side. I might be doing things completely wrong in my client. I actually stopped using cljs-http and use re-frame events with http-xhrio on client.
[13:13:56] *** Quits: mamapitufo (~mamapituf@188.29.96.7.threembb.co.uk) (Ping timeout: 246 seconds)
[13:35:43] *** Quits: trillp (~trillp@69.233.98.238) (Ping timeout: 252 seconds)
[13:40:34] *** Quits: pvalenta (~petr@mail.open-system.cz) (Quit: ZNC - https://znc.in)
[13:42:23] *** Joins: pvalenta (~petr@mail.open-system.cz)
[13:43:15] *** Quits: pvalenta (~petr@mail.open-system.cz) (Client Quit)
[13:43:57] *** Joins: pvalenta (~petr@mail.open-system.cz)
[15:18:52] *** Joins: mamapitufo (~mamapituf@188.29.96.7.threembb.co.uk)
[15:37:15] *** Joins: to-hu (~Thunderbi@p200300e9af0e9c003051021650b33a9f.dip0.t-ipconnect.de)
[15:45:25] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[16:02:57] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[16:17:46] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[16:18:31] <Vaelatern> raek: thanks, a good read
[16:18:55] *** Joins: jespada (~jespada@2803:9800:9842:7a62:c52b:2a1d:b7c2:2b5a)
[16:28:51] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 245 seconds)
[16:38:52] <Para> Of course, using ForkJoinPool is generally the thing to do these days from what I've understood.
[16:41:46] *** Quits: struchu (~struchu@staticline-31-183-183-227.toya.net.pl) (Ping timeout: 268 seconds)
[16:44:14] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[16:55:50] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[17:04:00] *** Quits: to-hu (~Thunderbi@p200300e9af0e9c003051021650b33a9f.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[17:11:26] *** Joins: seschwar (~seschwar@user/seschwar)
[18:11:28] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:12:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:17:08] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[18:31:22] <manicennui> https://www.youtube.com/watch?v=-XegX_K6w-o
[18:31:35] <manicennui> "Asami: Turn your JSON into a Graph in 2 Lines" by Paula Gearon
[18:31:40] <manicennui> Strange Loop talk
[18:31:54] <manicennui> "Asami is an open source graph database that provides the same functional and time-travel operations as Datomic, but with some additional unique features."
[18:33:16] <ridcully> uuuh a strange loop...
[18:39:55] <goodger> ridcully: ?
[18:46:54] <ridcully> yearly talks about non-mainstream IT stuff.  did not happen at least last year due to the virus.  now i am am happy to yt-dl this years talks
[18:53:01] <andreyorst> sometimes I feel that IT is way too mainstream by itself, sot there's no non-mainstream stuff in it
[18:54:00] <technomancy> I miss going to strange loop =\
[19:00:20] *** Joins: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[19:02:58] <andreyorst> funnily enough I saw your keyboard talk way before I started Clojure and Fennel, and after a while when I realized this I was a bit shocked how small the world is
[19:04:45] <technomancy> the racketcon one?
[19:06:38] <manicennui> Strange Loop and then Racketcon was great.
[19:07:28] <manicennui> The first Strange Loop I went to was proceeded by the Emerging Languages Camp.
[19:07:41] <manicennui> Saw some of the first talks about languages like Elm.
[19:08:14] <wink> strange loop would be interesting if it was in europe
[19:08:30] <andreyorst> technomancy: huh I though it was on SL, might be misremembering
[19:08:32] <ridcully> of course there is no mainstream if you sit on all those things.  but the vibe i get from strange loop is some nerds (and i mean that by the uttermost respect and would hope to count myself into the term) showing off their free time projects
[19:08:35] <goodger> the other continents are so dull
[19:08:45] <wink> guess the reverse would be true for people on other continents
[19:09:19] <wink> I've never had a job where they'd pay for me to go to a thing like Strange Loop across the pond
[19:09:43] <wink> slim chance for a conf that's very focused on daily work, zero chance for this
[19:10:05] <goodger> fortunately, someone invented video, so you can watch the talks without physically going there
[19:10:11] <goodger> thanks, scotland!
[19:10:41] <wink> I'm not a huge fan of watching conference talks at some point in time, remotely
[19:10:45] <wink> but good if it works for you
[19:11:20] *** Joins: Null_A (~null_a@2601:645:8700:2290:3dbf:d4aa:b1ba:f84a)
[19:11:30] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:11:41] <ridcully> well i mirror the playlist and watch what interersts me - i'd rather have that than nothing at all.  but sure: whatever you fancy
[19:13:26] <manicennui> wink: There is a GOTO conference in Europe. There tends to be some overlap between GOTO and Strange Loop.
[19:13:47] <manicennui> https://gotocph.com/
[19:14:04] <manicennui> Alan Kay is speaking this year.
[19:17:18] <manicennui> Looks a bit different from GOTO Chicago, but still seems interesting.
[19:19:28] <manicennui> https://gotoams.nl/
[19:19:34] <manicennui> Alan Kay is speaking at that one too.
[19:22:10] <manicennui> I assume Strange Loop is extra difficult to get to for Europeans due to its locations. Probably aren't a lot of direct flights to St. Louis.
[19:26:19] <technomancy> GOTO tends to have really good talks, yeah
[19:32:24] *** Joins: to-hu (~Thunderbi@p200300e9af0e9c005b3c1f5497eeb3ac.dip0.t-ipconnect.de)
[19:32:52] <Para> argh, hipmunk isn't a thing anymore
[19:33:10] <Para> Got curious and wanted to check how agony free flight to St. Louis would've been but alas, no such luck.
[19:36:06] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 265 seconds)
[19:36:35] *** Quits: jirido (jirido@gateway/vpn/protonvpn/jirido) (Ping timeout: 265 seconds)
[19:37:42] <manicennui> Para: Kayak is still around.
[19:41:58] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[19:42:06] *** faxmodem is now known as foxmulder
[19:44:26] <Para> 15 and half hours ...
[19:44:34] <Para> I went to Taiwan quicker than that :P
[19:46:24] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 265 seconds)
[19:46:53] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[19:52:56] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 246 seconds)
[19:54:32] *** Joins: wonko (~wjc@62.115.229.50)
[20:10:34] *** Quits: haircode (~haircode@62.196.189.80.dyn.plus.net) (Ping timeout: 252 seconds)
[20:20:03] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[20:23:30] <Ingvix> so I got this function that takes 3 3D vectors and returns one such but the second value within the returning vector should still be negated but I'm not sure which would be the best way to implement it http://vpaste.net/K5cyf
[20:23:50] <Ingvix> any other improvements are also welcome
[20:25:25] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 252 seconds)
[20:54:04] *** Quits: Munto (~Munto@120.51.3.93.rev.sfr.net) (Ping timeout: 252 seconds)
[21:05:09] <technomancy> does anybody actually like the thing where map destructuring has you put the map you're destructuring backwards with the local on the left and the key on the right?
[21:06:55] *** Joins: Munto (~Munto@120.51.3.93.rev.sfr.net)
[21:11:13] <jeaye> technomancy: What do you mean?
[21:11:17] <jeaye> Got an example?
[21:12:23] <technomancy> (let [{id :foo-id} (get-foo)] ...)
[21:12:40] <technomancy> most people I've talked to expect it to work like this: (let [{:foo-id id} (get-foo)] ...)
[21:13:34] <jeaye> I have never once used that syntax.
[21:13:49] <jeaye> I would just do (let [{:keys [foo-id]} (get-foo)] ...)
[21:13:54] <technomancy> haha yeah because :keys is the right thing 98% of the time
[21:13:58] <ridcully> unless i have mixed namespaced maps with the same keys i dont use that syntax
[21:13:59] <technomancy> but :keys doesn't let you rename
[21:14:16] <ridcully> maybe the reason for that is, that i can not remember how it works
[21:14:27] <technomancy> lmao exactly!
[21:14:55] <technomancy> I actually know precisely one person who uses this syntax; everyone else avoids it
[21:15:06] <technomancy> just wondered whether that impression was shared by folks here
[21:15:28] *** Joins: OscarZ (~oscarz@95.175.104.139)
[21:16:53] <ridcully> yet i see the point in {id :customer/id} as it mimicks the let.  the point where it usually makes me use something else is when nesting comes into play
[21:17:36] <ridcully> technomancy: maybe you bringing this up now and then adds to my confusion! ;P
[21:20:14] <technomancy> lol
[21:21:37] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[21:22:08] *** Quits: mamapitufo (~mamapituf@188.29.96.7.threembb.co.uk) (Ping timeout: 268 seconds)
[21:25:26] *** Quits: sailorCa` (~user@p200300f6a70c4ab3ba9c684a56441f6e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[21:26:18] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 265 seconds)
[21:26:38] *** Joins: sailorCa` (~user@p200300f6a70c4a07661b6c2fa056dd26.dip0.t-ipconnect.de)
[21:39:41] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 264 seconds)
[22:05:07] *** Quits: to-hu (~Thunderbi@p200300e9af0e9c005b3c1f5497eeb3ac.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:08:54] *** Joins: mamapitufo (~mamapituf@188.29.96.7.threembb.co.uk)
[22:10:56] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[22:18:54] *** Quits: Null_A (~null_a@2601:645:8700:2290:3dbf:d4aa:b1ba:f84a) (Remote host closed the connection)
[22:35:19] *** Joins: haircode (~haircode@62.196.189.80.dyn.plus.net)
[22:40:56] *** Quits: mamapitufo (~mamapituf@188.29.96.7.threembb.co.uk) (Ping timeout: 245 seconds)
[22:48:50] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[22:50:05] *** Joins: Null_A (~null_a@2601:645:8700:2290:3dbf:d4aa:b1ba:f84a)
[22:52:16] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 252 seconds)
[22:53:17] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[22:57:46] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 252 seconds)
[22:58:55] *** Quits: Munto (~Munto@120.51.3.93.rev.sfr.net) (Ping timeout: 252 seconds)
[23:00:44] *** Quits: Null_A (~null_a@2601:645:8700:2290:3dbf:d4aa:b1ba:f84a) (Remote host closed the connection)
[23:08:47] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 264 seconds)
[23:11:11] *** Joins: Munto (~Munto@80.214.25.217)
[23:16:14] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Quit: WeeChat 3.2)
[23:19:13] *** Quits: sailorCa` (~user@p200300f6a70c4a07661b6c2fa056dd26.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[23:24:58] *** Joins: sailorCat (~user@p200300f6a70c4a07661b6c2fa056dd26.dip0.t-ipconnect.de)
[23:36:14] *** foxmulder is now known as faxmodem
[23:39:01] *** Quits: haircode (~haircode@62.196.189.80.dyn.plus.net) (Ping timeout: 252 seconds)
[23:51:33] <raek> technomancy: I agree that {symbol :key} is the less obvious way... {:key symbol} makes the destruction mirror the construction, which is more iintuitive, I think
[23:53:53] <raek> I can see reasons for having it the clojure way too, but local on the right feels like the most "obvious" syntax to me
[23:53:58] <technomancy> raek: I think I understand the logic that destructuring is the inverse of construction but that doesn't mean I like it =)
[23:56:14] <raek> but the clojure order definitely felt backwards to me when I first learned it
[23:58:12] <raek> then I kind of accepted it because, what would the :keys syntax look lke otherwise? and what about binding the value from one key to multiple variables? due to the syntax of the destructuring being a map, the left parts need to be unique
[23:58:25] <raek> is that use case important? no, I don't think so
[23:58:29] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[23:58:47] <raek> technomancy: does fennel have a counterpart to the :keys syntax?
[23:59:49] <technomancy> raek: yeah and it's awesome (I didn't make it)
