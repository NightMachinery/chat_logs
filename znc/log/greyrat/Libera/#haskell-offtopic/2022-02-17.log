[00:17:49] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[00:24:41] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[00:27:23] *** Joins: Lycurgus (~juan@98.4.112.204)
[01:06:03] *** Quits: fendor_ (~fendor@91.141.40.92.wireless.dyn.drei.com) (Remote host closed the connection)
[01:23:05] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e573:86f9:f0cd:7c1f) (Remote host closed the connection)
[01:29:52] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[01:30:15] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[01:30:33] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[01:34:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Ping timeout: 240 seconds)
[01:49:13] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[02:12:21] *** Joins: vicfred (~vicfred@user/vicfred)
[02:24:18] *** Quits: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Read error: Connection reset by peer)
[02:41:54] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Remote host closed the connection)
[02:42:07] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[02:49:02] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[02:59:07] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:e156:8ff4:a2d2:fade)
[03:05:02] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 240 seconds)
[03:05:25] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Ping timeout: 240 seconds)
[03:05:41] *** Quits: carter (sid14827@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[03:05:41] *** Quits: supersven (sid501114@id-501114.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:05:43] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:05:49] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 240 seconds)
[03:05:50] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[03:05:53] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[03:05:53] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[03:05:58] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[03:06:00] *** Quits: sunarch (uid526836@user/sunarch) (Read error: Connection reset by peer)
[03:06:04] *** Joins: carter (sid14827@id-14827.helmsley.irccloud.com)
[03:06:28] *** Joins: sunarch (sid526836@user/sunarch)
[03:06:58] *** Joins: hook54321 (sid149355@user/hook54321)
[03:07:40] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:e156:8ff4:a2d2:fade) (Quit: Leaving)
[03:07:55] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:e156:8ff4:a2d2:fade)
[03:28:28] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[03:40:35] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[03:41:00] *** Joins: hololeap (~hololeap@user/hololeap)
[03:56:43] *** Joins: ph88^ (~ph88@2a02:8109:9e00:71d0:a0c0:cbe9:2589:5782)
[03:57:39] *** Joins: vicfred_ (~vicfred@user/vicfred)
[03:57:53] *** Quits: vicfred (~vicfred@user/vicfred) (Read error: Connection reset by peer)
[04:00:21] *** Quits: ph88 (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[04:02:57] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[04:19:40] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::99e7)
[04:20:04] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[04:26:26] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:e156:8ff4:a2d2:fade) (Quit: Leaving)
[04:27:34] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:74f2:75c0:910a:f39d)
[05:23:39] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Remote host closed the connection)
[06:01:56] *** Joins: hololeap_ (~hololeap@user/hololeap)
[06:03:22] *** Joins: ph88_ (~ph88@2a02:8109:9e00:71d0:885b:9523:dc87:45b3)
[06:06:43] *** Quits: ph88^ (~ph88@2a02:8109:9e00:71d0:a0c0:cbe9:2589:5782) (Ping timeout: 250 seconds)
[06:07:00] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[06:08:15] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[06:17:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[06:41:12] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[07:42:25] *** Joins: little_mac_ (~little_ma@2601:410:4300:3ce0:74f2:75c0:910a:f39d)
[07:42:42] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:74f2:75c0:910a:f39d) (Read error: Connection reset by peer)
[08:30:37] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::99e7) (Ping timeout: 240 seconds)
[10:26:27] *** Joins: coot (~coot@213.134.190.95)
[10:58:17] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 256 seconds)
[10:58:48] *** hololeap_ is now known as hololeap
[11:09:09] *** Joins: fendor (~fendor@91.141.40.92.wireless.dyn.drei.com)
[11:19:50] *** Joins: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:a132:2afd:4a89:be79)
[11:25:17] *** Joins: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[11:29:07] *** Quits: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:a132:2afd:4a89:be79) (Ping timeout: 250 seconds)
[12:08:54] *** Quits: little_mac_ (~little_ma@2601:410:4300:3ce0:74f2:75c0:910a:f39d) (Quit: Leaving)
[12:30:28] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:31:49] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[13:20:36] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[13:25:08] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[13:50:33] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[14:38:43] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[14:40:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Remote host closed the connection)
[14:47:19] *** Joins: fendor_ (~fendor@178.115.59.89.wireless.dyn.drei.com)
[14:49:48] *** Quits: fendor (~fendor@91.141.40.92.wireless.dyn.drei.com) (Ping timeout: 240 seconds)
[14:59:28] <kuribas> it seems one of the guidelines of clojure design is "make everything as generic as possible".
[15:00:07] <kuribas> It does follow this guide rather well in the language, as most functions operate on many kind of types.
[15:00:31] <kuribas> I am just not convinced this is a desirable property for "all" problems.
[15:00:44] <kuribas> Sometimes you want to be generic, but sometimes being specific can be more useful.
[15:06:45] <sshine> many programming language cultures have these small experiments going
[15:07:31] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Ping timeout: 250 seconds)
[15:09:48] <sshine> I interviewed for a Scala job where they used Cats and free monads, and it felt strangely convenient where in Haskell I might've been more conservative and advocated for sticking to ReaderT / mtl.
[15:10:20] <sshine> sometimes people see the opportunity to go into some extreme
[15:10:29] <sshine> without necessarily having justified the total cost :)
[15:12:11] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[15:12:40] <sshine> what I'm doing now (in Rust), I've got a bunch of mathy helper functions that seem to get re-implemented here and there for different primitive types (i64, u64, etc.) -- and it's *really* simple to just place it somewhere and define it in terms of its arithmetic traits (fn foo<T: Mul<Output = T> + ...>(...) { ... }) -- I wouldn't say the generality is worth anything in itself, except, it just 
[15:12:43] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 256 seconds)
[15:12:46] <sshine> seems really silly to have the exact same algorithm in many places for tiny variations of primitive input types, *when* the standard library has a fix for it.
[15:24:40] <kuribas> For me, the idea of "everything is a hashmap" is an oversimplification which ends up costing more in the end.
[15:24:52] <kuribas> Because eventually you still need to put SPEC or some validation in.
[15:24:59] <kuribas> So you really gained nothing there.
[15:25:40] <Athas> sshine: are you sure those variations would behave properly in case of overflow?
[15:31:43] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:40:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[15:45:00] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Ping timeout: 240 seconds)
[15:56:18] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[16:40:49] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[16:42:39] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[16:48:13] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[17:08:38] <sshine> Athas, I'd say it's the responsibility of the caller. they're consequently used in a rather small sub-part of the full domain of the type. so the general algorithm works exactly as the concrete one, since they're otherwise literally copy-pastes with the primitive type changed. :)
[17:09:32] <sshine> Athas, either they're used with inputs that never risk overflowing, or they're used on group elements.
[17:10:52] <sshine> Athas, I did have one function that'd consequently overflow :P "powers of two below N"
[17:11:55] <sshine> but at least it did so for every primitive type T I used when called with N = T::MAX ;)
[17:42:41] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[17:46:15] *** Joins: __monty__ (~toonn@user/toonn)
[17:47:00] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Ping timeout: 240 seconds)
[17:49:32] <merijn> Anyone know any decent python memory profiling tooling? Everything I've found is hot garbage
[17:51:10] <[exa]> define "decent"
[17:55:09] <merijn> [exa]: "I can actually get answers" >.>
[17:57:13] <[exa]> oh sh.
[17:57:43] <[exa]> well there's the heapy (?) heap printer which you can just run in the middle of a script and get some guess of what's taking most space
[17:57:48] <[exa]> other than that all is guesswork
[17:58:02] <merijn> yeah, that doesn't work
[17:58:10] <merijn> I have 30k LOC and no clue what's taking up space
[17:58:33] <[exa]> the snakes
[17:58:34] <merijn> I did some random prints of the heap which shows (at most) 1GB of python data in a process that has 12GB wired
[17:59:12] <merijn> I am trying scalene, which *supposedly* attributes allocations to lines, but it keep segfaulting and the end of my program and writing empty memory profiling data
[17:59:26] <[exa]> I assume you tried cheap tricks like triggering gc manually all time?
[17:59:42] <[exa]> oh my
[18:00:05] <merijn> [exa]: I think you are overestimating my grasp on this code
[18:00:09] <[exa]> ah okay :D
[18:00:15] <merijn> It's all object oriented indirection all the way down
[18:00:43] <[exa]> I'd add 100GB swapfile and complain python is slow
[18:00:46] <merijn> I have 0 intuition about what/where is consuming the memory, so instrumenting it (like all profiling examples expect you to do) or triggering manual GCs is hard
[18:01:07] <merijn> [exa]: I don't run out of memory, but I need to shrink the usage so we can scale up
[18:02:15] <[exa]> btw did you try the "normal" heap inspectors? just to see whether it's really all python or something lowlevel is leaking
[18:02:56] <[exa]> if python reports 1GB and eating 12, then either it should GC more often, or the heap structure is messed up
[18:09:27] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[18:09:46] *** Joins: __monty__ (~toonn@user/toonn)
[18:10:37] *** Quits: __monty__ (~toonn@user/toonn) (Client Quit)
[18:10:54] *** Joins: __monty__ (~toonn@user/toonn)
[18:11:55] <merijn> [exa]: Well, it could just be temporarily ballonning to 12 GB and being GCed down to 1GB by the time I profile the heap...
[18:12:04] <merijn> who knows? That's what I'm trying to find out  xD
[18:14:53] <[exa]> did you try `tracemalloc` ?
[18:14:59] <[exa]> apparently it applies to the python malloc
[18:17:22] <merijn> [exa]: That doesn't have a good way of following whole programs. All the examples are like "here's how you annotate a function!" 'uh...ok?'
[18:17:40] <merijn> I've been playing around with https://pypi.org/project/memory-profiler/ and several other tools
[18:17:56] <merijn> tbh, I wish I could just use GHC's profiling. That's so nice in comparison >.>
[18:18:28] <[exa]> yeah I was afraid your definition of "decent" would derive from that :D
[18:19:07] <merijn> I've been spoiled..
[18:19:26] <merijn> "Investigating haskell memory leaks is so hard..." my ass
[18:21:08] <kuribas> the lazyness FUD
[18:21:26] <kuribas> I don't get why people are so obsessed with performance in haskell.
[18:21:33] <kuribas> And then use Python :)
[18:28:39] <dminuoso> Sometimes the choice of a language is forced upon you for other reasons than performance.
[18:29:11] <dminuoso> We maintain and improve on a DCIM/IPAM tool that is already written in Python
[18:29:41] <dminuoso> Are we happy about it? Not at all. But other than spending 3-4 man years and rebuilding it from scratch, this is the best choice
[18:31:20] <kuribas> Sure, I use wordpress also...
[18:31:36] <kuribas> I even wrote a theme in php...
[18:32:57] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[18:37:08] <kuribas> I am merely criticising people calling FP slow, without context of what they are doing.
[18:40:48] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[18:44:46] <kuribas> And personally I don't mind what language a tool is written if it works well, and I don't have to mess a lot in the code.
[18:45:20] <geekosaur> there is such a thing as "fast enough". usually I rate maintainability over speed
[18:45:36] <geekosaur> how often do you really need those extra few seconds shaved off?
[18:46:52] <geekosaur> I've been doing a decent amount of "incidental" programming in haskell of late, and performance hasn't mattered. heck, I even use runhaskell at first before compiling
[18:47:15] <kuribas> performance for me is optimizing queries.
[18:48:16] <kuribas> which I rather do in haskell than in anything else.
[19:06:12] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 240 seconds)
[19:13:07] <dminuoso> geekosaur: Well lack of foresight, especially in webby applications can be very painful. When working with highly normalized databases, it's very easy to introduce N+1 queries
[19:13:36] <dminuoso> And if this happens 2-3 levels deep, even trivial data can cause severe performance problems
[19:15:02] <ongy[m]> any gdb experts here? Is there a command to disconnect from a gdb server once it's setup? I.e. I want to ssh into the machine, setup gdb-server (stopped and waiting) and then disconnect that session. So I can just call it as independent step, but not have a race condition against the attach
[19:15:43] <merijn> Not sure I parse the problem correctly
[19:17:42] <ongy[m]> I want to have a task chain: build => deploy => start gdb => attach debugger (non-cli). And build + deploy is easy. Attach to existing stopped gdbserver as well. But I'm not sure how I can start gdbserver but then end that task without ending the server. To have control flow back to attach. I could just background the entire gdbserver stuff and sleep 100ms or something, but that feels silly and unreliable
[19:18:36] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[19:20:35] *** Quits: polyphem (~rod@2a02:810d:840:8754:448e:47ff:4575:7cfb) (Ping timeout: 250 seconds)
[19:20:39] *** Joins: polyphem_ (~rod@2a02:810d:840:8754:22de:a5de:2070:f535)
[19:21:03] <kuribas> dminuoso: isn't N+1 an ORM problem?
[19:21:27] <dminuoso> No and that line of thinking is the issue.
[19:21:37] <dminuoso> It's people imagining ORMs will magically figure that all out.
[19:21:51] <dminuoso> To the point where a whole generation of young developers doesn't even know what N+1 is anymore
[19:21:54] <merijn> dminuoso: I think he means ORMs create N+1 problems
[19:21:55] <kuribas> ORM problem, not ORM solution :)
[19:22:01] <dminuoso> Oh.
[19:22:18] <dminuoso> Well, its not necessarily an ORM problem. You can induce ORM with handwritten SQL just as easily
[19:22:27] <dminuoso> Arguably ORMs tend to catch some of the trivial cases and fix them for you
[19:22:40] <dminuoso> *induce N+1
[19:22:55] <kuribas> yeah, ORMs are only easy for simple cases
[19:26:59] <kuribas> At least with manual SQL you know that you fucked up.
[19:36:05] *** Joins: Midjak (~Midjak@91-169-30-149.subs.proxad.net)
[19:44:27] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[19:46:12] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[19:47:38] <ongy[m]> hm, works well enough with the race condition in there I guess. As long as I don't start to do a shitton of setup in the gdbserver it should be fine
[19:48:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Ping timeout: 240 seconds)
[19:56:00] <ongy[m]> oh, it's not even really a race. The code I stole from the internet parses the gdbserver output and only backgrounds the task once it prints the "Listening:" line. Nice
[19:56:42] *** Joins: coot (~coot@213.134.190.95)
[19:59:14] *** Joins: notzmv (~zmv@user/notzmv)
[20:14:40] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[20:15:36] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[20:19:00] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[20:20:05] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:43:11] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (Quit: ZNC 1.8.2 - https://znc.in)
[20:45:46] *** Joins: tomsmeding (~tomsmedin@2a01:4f8:c0c:5e5e::2)
[20:47:29] *** Quits: fendor_ (~fendor@178.115.59.89.wireless.dyn.drei.com) (Remote host closed the connection)
[20:51:59] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[20:57:23] *** Quits: tomsmeding (~tomsmedin@2a01:4f8:c0c:5e5e::2) (Quit: ZNC 1.8.2 - https://znc.in)
[20:58:35] *** Joins: tomsmeding (~tomsmedin@static.21.109.88.23.clients.your-server.de)
[21:05:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[21:11:31] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[21:26:36] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[21:42:08] <julm> https://aphyr.com/posts/342-typing-the-technical-interview 
[21:42:13] <julm> > Few delve into the ancient, unstructured magic nowadays. The very languages in which your spells are written are stabilized with seidr in their syntax, channeling the energies you summon through safe paths—more or less. There are still occasional explosions, of course.
[21:42:14] <lambdabot>  <hint>:1:27: error: parse error on input ‘,’
[21:52:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Remote host closed the connection)
[22:02:30] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[22:02:44] <[exa]> julm: actually the best learning material for multiparameter typeclasses. :D
[22:16:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[22:24:40] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:68e2:4c30:8ca1:db3)
[22:37:45] *** Parts: coot (~coot@213.134.190.95) ()
[22:40:28] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[22:41:14] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[22:41:14] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[22:41:14] *** Joins: turlando (~turlando@user/turlando)
[23:17:48] *** Joins: vicfred (~vicfred@user/vicfred)
[23:22:20] *** Joins: Lycurgus (~juan@98.4.112.204)
[23:53:33] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:54:13] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Remote host closed the connection)
[23:56:32] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
