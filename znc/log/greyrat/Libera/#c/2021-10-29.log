[00:02:10] *** Quits: trog (~trog@user/trog) (Ping timeout: 260 seconds)
[00:02:24] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Ping timeout: 276 seconds)
[00:02:33] *** Quits: hexteetx (~hexteex@gateway/tor-sasl/hexteex) (Client Quit)
[00:02:45] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[00:03:04] *** Quits: Darkcoal_ (~user@167.86.132.92) (Ping timeout: 258 seconds)
[00:03:18] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (Ping timeout: 244 seconds)
[00:08:07] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:08:47] *** Quits: V-T60 (~v@91.203.24.166) (Ping timeout: 264 seconds)
[00:10:25] *** Joins: sonny (~sonny@8.6.144.238)
[00:14:04] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[00:16:30] *** Joins: Nspace (~Nspace@user/nspace)
[00:17:02] *** Quits: sonny (~sonny@8.6.144.238) (Quit: Going offline, see ya! (www.adiirc.com))
[00:18:42] *** Quits: darklands (~darklands@69.43.65.116) (Quit: Leaving)
[00:18:57] *** Joins: darklands (~darklands@69.43.65.116)
[00:18:59] *** Quits: darklands (~darklands@69.43.65.116) (Client Quit)
[00:19:18] *** Joins: darklands (~darklands@69.43.65.116)
[00:19:51] *** Quits: darklands (~darklands@69.43.65.116) (Remote host closed the connection)
[00:20:22] *** Quits: Nspace (~Nspace@user/nspace) (Client Quit)
[00:21:54] *** Joins: quartz (~quartz@user/quartz)
[00:24:31] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:27:36] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:29:14] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[00:29:56] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:31:35] *** Quits: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Ping timeout: 264 seconds)
[00:32:17] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[00:39:12] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:41:10] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[00:43:08] *** Joins: arinov (~arinov@213.194.126.155)
[00:43:24] *** Joins: henistein (~henistein@2001:8a0:fc8f:9501:c3ad:15f:4fd1:4f31)
[00:44:28] *** Quits: cartman (~i.am@191.32.92.1) (Quit: I come down here for a fat woman and that's what I'm havin.)
[00:46:53] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 264 seconds)
[00:52:06] *** Quits: kurfen (~kurfen@45.152.181.20) (Quit: ZNC 1.8.2 - https://znc.in)
[00:54:06] *** Joins: kurfen (~kurfen@45.152.181.20)
[00:54:41] *** Quits: alch (~alch@151.34.59.227) (Read error: Connection reset by peer)
[00:54:49] *** Quits: machinehum (~machinehu@45.131.194.114) (Ping timeout: 258 seconds)
[00:55:15] *** Quits: rsarson (~rsarson@2607:fea8:29e1:b000::b67c) (Ping timeout: 268 seconds)
[00:55:45] *** Joins: machinehum (~machinehu@45.131.194.114)
[00:56:14] *** Joins: rsarson (~rsarson@2607:fea8:29e1:b000::b67c)
[00:57:58] *** Joins: alch (~alch@151.34.11.252)
[00:59:34] *** Joins: seninha (~seninha@user/seninha)
[01:03:13] *** Joins: CaCode_ (~CaCode@user/cacode)
[01:03:53] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[01:05:45] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[01:05:51] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:06:08] *** Quits: CaCode- (~CaCode@user/cacode) (Ping timeout: 268 seconds)
[01:08:39] *** Joins: CaCode- (~CaCode@user/cacode)
[01:08:54] *** Parts: f1refly (~f1refly@p4fc47ea6.dip0.t-ipconnect.de) (WeeChat 3.3)
[01:09:58] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[01:10:10] *** Joins: alefir_ (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[01:10:49] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:11:05] *** Joins: slidercrank (~slidercra@user/slidercrank)
[01:11:11] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 246 seconds)
[01:11:24] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[01:11:39] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 260 seconds)
[01:18:46] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[01:19:32] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:24:43] *** Joins: Xatenev (~xatenev@2a02:8108:9640:74d4:426b:a029:6981:6c54)
[01:24:50] *** Quits: Xatenev (~xatenev@2a02:8108:9640:74d4:426b:a029:6981:6c54) (Changing host)
[01:24:50] *** Joins: Xatenev (~xatenev@user/xatenev)
[01:26:03] *** Quits: coruja (~coruja@user/coruja) (Quit: ZNC 1.8.2 - https://znc.in)
[01:30:54] *** Joins: coruja (~coruja@user/coruja)
[01:31:07] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[01:31:21] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 245 seconds)
[01:31:36] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[01:31:42] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[01:33:35] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[01:35:27] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 260 seconds)
[01:35:55] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[01:36:59] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[01:39:08] *** Quits: Akuli (~Akuli@82-203-161-22.bb.dnainternet.fi) (Quit: Leaving)
[01:44:33] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:45:57] *** Quits: henistein (~henistein@2001:8a0:fc8f:9501:c3ad:15f:4fd1:4f31) (Quit: Client closed)
[01:49:15] *** Joins: Arthuria (~Arthuria@user/arthuria)
[01:50:25] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[01:51:19] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Ping timeout: 260 seconds)
[01:56:06] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[01:57:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:57:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:57:47] *** Joins: wroathe (~wroathe@user/wroathe)
[01:59:20] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[02:02:46] *** Quits: johnjay (~pi@192.142.100.50) (Quit: WeeChat 2.3)
[02:03:27] *** Joins: pulse (~pulse@user/pulse)
[02:04:33] *** Joins: jess (~jess@libera/staff/jess)
[02:05:35] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:06:25] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[02:07:05] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:08:47] *** Joins: johnjay (~pi@192.142.100.50)
[02:10:45] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:19:40] *** Quits: km2m- (~km2m@1.116.81.184) (Read error: Connection reset by peer)
[02:20:11] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 264 seconds)
[02:20:26] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[02:27:16] *** Quits: AmR (~AmREiSa@156.199.244.83) (Ping timeout: 252 seconds)
[02:27:33] *** Joins: Nspace (~Nspace@user/nspace)
[02:30:38] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Remote host closed the connection)
[02:30:54] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:31:00] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[02:32:42] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[02:33:44] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:33:47] *** Joins: pizdets_ (~pizdets@183.182.114.48)
[02:33:51] *** Quits: pizdets (~pizdets@183.182.110.199) (Ping timeout: 245 seconds)
[02:34:06] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[02:34:22] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:34:38] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[02:34:39] *** Quits: Albright (~Albright@149.28.13.173) (Quit: ZNC 1.8.2 - https://znc.in)
[02:35:30] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[02:35:41] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:44:31] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:44:39] *** Joins: Albright (~Albright@2001:19f0:8001:ca4:377d:5cce:6c85:1730)
[02:45:27] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[02:45:51] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:48:25] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[02:49:04] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:49:20] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[02:49:25] *** Joins: quartz (~quartz@user/quartz)
[02:50:06] *** Joins: Wulf (~Wulf@user/wulf)
[02:50:19] *** Joins: serbest (~serbest@user/serbest)
[02:51:34] *** Joins: brettgilio (~brettgili@x-node.gq)
[02:53:10] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:53:55] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:56:03] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[02:56:39] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[02:57:22] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[03:00:48] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:01:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[03:02:12] *** Joins: rgrinberg (~textual@190.113.111.74)
[03:02:28] *** Quits: Arthuria (~Arthuria@user/arthuria) (Ping timeout: 258 seconds)
[03:04:57] <krux02> correct me if I am wrong, but by default variables are uninitialized memory by default.
[03:05:26] <krux02> I am generating C code and I would like to have variables initialized with 0 by default.
[03:05:40] <krux02> should I generate instructions to memset, or is there a better way to do it?
[03:05:45] *** Joins: Crescendo (~Crescendo@user/crescendo)
[03:06:41] <krux02> is there an extension to C that I am not aware about that lets me initialize my variables easily with zero?
[03:06:54] <Thedarkb-Desktop> int x=0
[03:07:05] *** Quits: rgrinberg (~textual@190.113.111.74) (Ping timeout: 260 seconds)
[03:09:00] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[03:09:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:ece1:b35e:c9b0:1b9e) (Ping timeout: 264 seconds)
[03:10:12] *** Joins: kadavul (~vazha@103.165.20.199)
[03:15:07] *** Quits: random-nick (~random-ni@87.116.183.63) (Ping timeout: 258 seconds)
[03:16:46] *** Quits: Xatenev (~xatenev@user/xatenev) (Remote host closed the connection)
[03:17:48] *** Quits: tanewha (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 258 seconds)
[03:17:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:17:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:17:59] *** Joins: wroathe (~wroathe@user/wroathe)
[03:18:57] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 258 seconds)
[03:22:43] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[03:22:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[03:23:05] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[03:26:52] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 244 seconds)
[03:27:40] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[03:28:42] *** Quits: kadavul (~vazha@103.165.20.199) (Read error: Connection reset by peer)
[03:29:24] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[03:30:10] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[03:33:19] *** Joins: sonny (~sonny@8.6.144.238)
[03:34:02] <fizzie> Variables with static (or thread-local) storage duration are implicitly initialized to zero even when there's no initializer.
[03:36:08] <krux02> fizzie: that is an interesting thing. But it doesn't really address my problem.
[03:36:15] <fizzie> Variables with automatic storage duration are uninitialized by default, but can have initializers, and the initializer `{0}` is technically valid zero initializer for any kind of object (though sometimes compilers do complain about it, for example if they want to see less or more braces).
[03:36:36] <fizzie> (And if you're generating code, you might also just generate a "more correct" initializer too.)
[03:37:53] <fizzie> ,cc int a = {0}; int b[10] = {0}; struct { struct { int x, y; } z; int w; } c = {0}; // all valid, all fully initialized to zero
[03:37:56] <candide> fizzie: no output: a = 0; c = {z = {x = 0, y = 0}, w = 0}; b = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
[03:37:56] *** Quits: shan (shan@cyblog/maintainer/shan) (Quit: https://shantaram.xyz)
[03:38:10] *** Joins: shan (shan@cyblog/maintainer/shan)
[03:38:44] *** Quits: prime (~prime@user/prime) (Ping timeout: 244 seconds)
[03:41:05] *** Joins: prime (~prime@user/prime)
[03:45:39] *** Quits: lesihctej (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[03:45:59] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 264 seconds)
[03:46:00] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[03:47:13] *** Joins: arinov (~arinov@213.194.126.155)
[03:48:30] *** Joins: seninha (~seninha@user/seninha)
[03:48:59] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:49:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[03:51:47] *** Lord_of_Life_ is now known as Lord_of_Life
[03:54:03] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Ping timeout: 260 seconds)
[03:56:30] *** MrC is now known as MrSpooky
[03:56:39] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:58:44] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[04:01:46] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[04:03:12] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Updating details, brb)
[04:03:20] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[04:04:19] *** Quits: sonny (~sonny@8.6.144.238) (Ping timeout: 260 seconds)
[04:05:54] *** Joins: rgrinberg (~textual@190.113.111.74)
[04:06:17] *** Joins: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173)
[04:09:22] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[04:09:51] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[04:10:07] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Client Quit)
[04:10:18] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[04:10:24] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Client Quit)
[04:12:23] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[04:14:06] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Quit: Lost terminal)
[04:20:48] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:eba7:95bb:d099:a7d8)
[04:21:45] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 260 seconds)
[04:26:08] *** Quits: joilerv_ (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Ping timeout: 246 seconds)
[04:28:02] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[04:28:38] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[04:28:55] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[04:29:09] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[04:29:14] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[04:31:02] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 246 seconds)
[04:31:50] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:32:43] *** Joins: CaCode_ (~CaCode@user/cacode)
[04:34:56] *** Quits: khoa (~khoa@user/khoa) (Quit: leaving)
[04:35:14] *** Quits: CaCode- (~CaCode@user/cacode) (Ping timeout: 246 seconds)
[04:35:35] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 260 seconds)
[04:37:13] *** Joins: llh (~llh@user/llh)
[04:42:45] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[04:46:32] *** Joins: ferdna (~ferdna@user/ferdna)
[04:48:33] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[04:49:07] *** Quits: alefir_ (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 260 seconds)
[04:54:08] *** Quits: alch (~alch@151.34.11.252) (Read error: Connection reset by peer)
[04:55:56] *** Joins: The_Jag_ (~The_Jag@host-87-14-224-44.retail.telecomitalia.it)
[04:58:05] *** Quits: reset (~reset@user/reset) (Quit: reset)
[04:58:19] *** Joins: alch (~alch@151.34.9.179)
[04:58:30] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 260 seconds)
[04:58:30] *** Quits: The_Jag (~The_Jag@host-95-252-5-94.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[05:05:02] <TheDcoder[m]> Hi, how do I view source code of a compiled program?
[05:05:13] <TheDcoder[m]> program compiled with debug info I mean :D
[05:05:37] <TheDcoder[m]> I can only see one line in GDB, so I was wondering if there was a way to print all of it?
[05:09:37] *** Quits: taru9 (~realTaru9@user/taru9) (Quit: %xD%)
[05:09:56] *** Joins: taru9 (~realTaru9@user/taru9)
[05:12:20] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[05:12:54] *** Joins: AmR (~AmREiSa@156.199.244.83)
[05:17:38] *** Joins: jmpeax (~jmpeax@host-23-251-65-137.VALOLT4.epbfi.com)
[05:18:00] *** Quits: krux02 (~krux02@p200300e817076e008131ec4e024fd61b.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[05:21:29] <pragma-> use the list command
[05:23:40] <katnis> what do i do if i am the first person to ask a question on stackoverflow?
[05:26:57] <rcf> ...isn't that a good reason to ask it? 
[05:27:10] <rcf> i thought they looked down on repeats 
[05:28:35] <katnis> oooo i see
[05:28:35] *** Joins: sonny (~sonny@8.6.144.238)
[05:28:44] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:28:57] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[05:29:47] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 264 seconds)
[05:31:31] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[05:32:03] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Ping timeout: 260 seconds)
[05:33:24] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:34:23] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 260 seconds)
[05:34:24] *** Joins: Crescendo (~Crescendo@user/crescendo)
[05:43:14] *** Quits: mahmutov (~mahmutov@37.155.18.23) (Ping timeout: 268 seconds)
[05:48:05] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[05:49:19] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 260 seconds)
[05:50:41] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[05:51:03] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:51:22] *** Joins: tinyweasel_ (~weasel@vps-947c96bd.vps.ovh.ca)
[05:51:39] *** Quits: tinyweasel_ (~weasel@vps-947c96bd.vps.ovh.ca) (Remote host closed the connection)
[05:52:00] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[05:52:55] *** Quits: rsarson (~rsarson@2607:fea8:29e1:b000::b67c) (Quit: Leaving.)
[05:54:14] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[05:54:30] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Ping timeout: 260 seconds)
[05:54:55] *** Joins: tinyweasel_ (~weasel@vps-947c96bd.vps.ovh.ca)
[05:55:18] *** Quits: tinyweasel_ (~weasel@vps-947c96bd.vps.ovh.ca) (Remote host closed the connection)
[05:55:49] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:55:49] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:55:49] *** Joins: wroathe (~wroathe@user/wroathe)
[05:57:25] *** Joins: kurahaupo (~kurahaupo@pa49-180-139-18.pa.nsw.optusnet.com.au)
[05:58:11] *** Joins: tinyweasel_ (~weasel@vps-947c96bd.vps.ovh.ca)
[06:02:17] *** Joins: rsarson (~rsarson@2607:fea8:29e1:b000::b67c)
[06:02:50] *** Quits: tinyweasel (~weasel@2404:9400:2:0:216:3eff:fee2:347d) (Killed (NickServ (GHOST command used by tinyweasel_!~weasel@vps-947c96bd.vps.ovh.ca)))
[06:02:50] *** tinyweasel_ is now known as tinyweasel
[06:08:02] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:10:59] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[06:13:12] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:20:43] *** Quits: sonny (~sonny@8.6.144.238) (Quit: Going offline, see ya! (www.adiirc.com))
[06:24:41] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 245 seconds)
[06:25:08] *** Joins: pnbeast (~pnbeast@2601:140:4280:3c90::1)
[06:26:47] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[06:29:09] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:30:17] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[06:31:23] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 258 seconds)
[06:39:20] *** Quits: AmR (~AmREiSa@156.199.244.83) (Quit: Konversation terminated!)
[06:40:17] *** Joins: no-n (~ed@smol/hors)
[06:42:23] *** Quits: pony (~ed@smol/hors) (Ping timeout: 264 seconds)
[06:43:38] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[06:45:06] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 245 seconds)
[06:49:15] *** Joins: soapsudsxx (~soapsudsx@209.221.40.155)
[06:49:17] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:56:29] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[06:59:24] <ferdna> do you guys use the boost library?
[07:00:33] <floatcomplex> that's c++ so no
[07:00:51] <ferdna> floatcomplex, doesnt it have c bindings?
[07:01:24] <floatcomplex> idk why it would but stranger things have happened
[07:01:54] <floatcomplex> it would be trivial to write c bindings for whatever you really needed from it
[07:02:16] <floatcomplex> but the consequences of such an action would echo in eternity
[07:02:42] <ferdna> hehehe
[07:02:43] <ferdna> cool
[07:02:59] <floatcomplex> seriously what do you need from it
[07:03:25] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[07:05:35] <ferdna> floatcomplex, no... just wondering...
[07:05:58] <ferdna> ...
[07:06:02] <ferdna> help me decide on a book:
[07:06:03] <ferdna> https://www.amazon.com/dp/0123745403/ or https://www.amazon.com/dp/1789349869/ or https://www.amazon.com/dp/1705309909/
[07:06:36] <floatcomplex> the last one
[07:06:56] <ferdna> floatcomplex, can you elaborate?
[07:07:25] <floatcomplex> it's had a lot of eyeballs on it over the years
[07:07:35] *** Joins: lint_coder (~lint_code@2405:201:f00c:805f:adbe:351d:bc1f:f647)
[07:07:37] <pragma-> lol
[07:07:41] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[07:07:44] <pragma-> beej guide is a free book. 
[07:07:48] <pragma-> https://beej.us/guide/bgnet/html/
[07:07:49] <candide> Title of pragma-'s link: Beej's Guide to Network Programming
[07:07:58] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[07:07:59] <pragma-> a lot of people have ridiculed it over the years, too
[07:08:11] <bparker> lol beej
[07:08:42] <floatcomplex> i would look askance at anything that assumes a priori that all ip traffic should be tcp
[07:08:58] *** Quits: lint_coder (~lint_code@2405:201:f00c:805f:adbe:351d:bc1f:f647) (Client Quit)
[07:09:11] <pragma-> this pretty much sums up beej's guide: https://i.imgur.com/eL0h25y.png
[07:10:35] <ferdna> hmmm
[07:10:51] <ferdna> okay, so from this two?
[07:10:51] <ferdna> https://www.amazon.com/dp/0123745403/ or https://www.amazon.com/dp/1789349869/
[07:11:13] <pragma-> ,unp
[07:11:13] <candide> [##posix] unp1 is Unix Network Programming Vol I: http://www.unpbook.com/
[07:11:15] <floatcomplex> scratch off the tcp specific ine
[07:12:21] <floatcomplex> not all farm animals poop out eggs, apparently, and neither are all communications a stream of bytes
[07:12:25] <ferdna> there is a pdf: https://www.beej.us/guide/bgnet/pdf/bgnet_usl_c_2.pdf
[07:12:27] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:13:19] <pragma-> the unp book is highly recommended
[07:14:15] *** Quits: kurahaupo (~kurahaupo@pa49-180-139-18.pa.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[07:14:59] <ferdna> pragma-, ohhhh... ill get that one as well
[07:15:00] <ferdna> looks good
[07:15:05] <Nautilus> aside from networking stuff, what are the primary uses of C nowadays? Embedded, OS drivers(?), what else? Anything at app level?
[07:16:43] *** Quits: Viewday (~Viewday@user/viewday) (Read error: Connection reset by peer)
[07:18:03] <floatcomplex> yes
[07:18:42] <dave0> just use javascript
[07:18:45] *** Joins: Viewday (~Viewday@user/viewday)
[07:19:43] <floatcomplex> c99 (and by extension objective-c, but NOT c++) is the only language on part with fortran 77 for certain high-performance numeric applications
[07:19:59] <floatcomplex> although i haven't heard of anyone using objc for that
[07:20:17] <floatcomplex> s/on part/on par/
[07:20:49] <Nautilus> been a while since I did any coding, wondering if I should get back to it vs other languages
[07:21:26] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[07:21:37] <floatcomplex> c can do anything. many languages can do a few things better (by some metric or another) than c, but c can do anything
[07:22:01] <Nautilus> nods
[07:22:18] <dave0> i think julia competes with fortran too
[07:23:22] <floatcomplex> dave0: newer fortran competes with f77 too but it still sucks
[07:23:33] <floatcomplex> it borrows too much from matlab
[07:23:41] <pragma-> can c tell you why kids love the taste of cinnamon toast crunch cereal?
[07:24:12] <Nautilus> I think the last C coding I did was for a Microchip device, it can be pretty close to ASM if you understand the hardware and how the compiler addresses it.
[07:24:13] <dave0> pfft what do kids know
[07:24:29] <Nautilus> prag: yes, lots of C's  :)
[07:24:48] <floatcomplex> pragma-: ,cc printf("sugar.\n");
[07:24:50] <candide> pragma-: sugar.
[07:24:59] <floatcomplex> so, yes
[07:28:11] <Nautilus> trying to see if it's worth getting back into coding with C, what client projects might be, etc
[07:28:37] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[07:30:09] <no-n> depends what your goal is
[07:30:26] *** Quits: zwr (~zwr@2804:d45:b966:fb00:9c18:5252:f406:3ebf) (Quit: Lost terminal)
[07:30:51] <Nautilus> honestly, $. C is the language I've done most with over the years
[07:31:52] <ferdna> Nautilus, what is wrong with C? what is it that made you go away from it?
[07:31:58] *** Joins: zwr (~zwr@2804:d45:b966:fb00:9c18:5252:f406:3ebf)
[07:32:09] <Nautilus> didn't go anywhere else, went to html / web dev
[07:34:13] <Nautilus> the later having become complicated over the years, responsive CSS, artwork, etc
[07:34:49] <Nautilus> I like the clarity of C
[07:35:11] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 264 seconds)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:21] <floatcomplex> yes, part of the enduring value of C is how quickly strangers can debug each others' code
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:45] <floatcomplex> many of the touted design decisions of newer languages are directly at odds with that goal
[07:39:10] <Nautilus> I agree, I "get" the idea behind C++ and much more, and see pros and cons.
[07:40:20] *** Joins: trisk (~trisk@2601:196:4700:1f14:8:20ff:fe3e:890e)
[07:41:28] <floatcomplex> i'm really not sure what the goal of c++ is, other than job security for the people who currently write it
[07:41:43] <Nautilus> A fellow I know got into Kotlin development and it seems like a horror
[07:41:50] <floatcomplex> "idiomatic c++" seems to mean make your code look as little like anyone else's code as possible
[07:42:11] <Nautilus> ha
[07:43:20] <Nautilus> I have a copy of Coplien's Advanced C++ Styles and Idioms next to me
[07:43:56] *** Joins: hinata (~hinata@2402:8100:22d5:162:b9bc:3df1:c0e3:e055)
[07:46:46] <Nautilus> looking at Kotlin docs, Unsigned Byte arrays are still in Beta. We've never grok'd why so little UByte support
[07:47:34] <Nautilus> bytes are bytes, basic shit
[07:48:48] *** Joins: [[R]] (~user@user/rbox)
[07:50:21] <Nautilus> so what do you guys (gals) do with C?
[07:51:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[07:52:43] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:1201:a3bd:5ae9:1b03)
[07:53:31] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:53:31] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:53:31] *** Joins: wroathe (~wroathe@user/wroathe)
[08:04:43] <Nautilus> wondering if I can find a niche
[08:08:37] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:a574:f57a:e539:7e22) (Quit: Leaving)
[08:12:35] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[08:14:47] *** Joins: jetchisel (jetchisel@user/jetchisel)
[08:20:43] <no-n> what are some good books on formal/programming language theory?
[08:21:34] *** Joins: bolsonarogay (~bolsonaro@2804:56c:a1c6:9b00:b0bc:2f1b:a1bf:5dab)
[08:21:42] *** Joins: Betal (~Betal@user/betal)
[08:24:21] <HisShadow> no-n: SICP might be one, I'm not sure though
[08:27:13] <rcf> Nautilus: a sane language design will have bytes as inherently unsigned, leaving character types for characters alone. 
[08:27:57] <Nautilus> but what about 8-bit data bytes?
[08:28:14] <rcf> Nautilus: in the case of C, though, we have implementation-defined behavior for default signedness, and no guarantee that bytes are actually 8 bits, only at least 8 bits. 
[08:29:26] <floatcomplex> int8_t solves all of those ambiguities, though, if it exists, which you will know at compile time
[08:29:30] <floatcomplex> uint8_t rather
[08:29:39] <Nautilus> it comes down to interpretation of a byte, yes? 
[08:29:47] <rcf> Except it is not a character type and so breaks aliasing rules when used to access bytes of arbitrary data. 
[08:29:50] <Nautilus> which is usually easy in C
[08:30:15] <floatcomplex> "unsigned char" is always one byte long. whether a byte is 8 bits or not can be determined by looking at CHAR_BIT
[08:30:41] <Nautilus> ah right, I am equating byte with char
[08:30:58] <floatcomplex> byte and char are always the same number of bits. it might be 8 bits or 257 though
[08:30:59] <rcf> Which is perhaps my second biggest pet peeve with C outside the absurd inconsistency of aggregate types 
[08:32:04] <dave0> maybe there should be 21 bit chars and 8 bit bytes
[08:32:21] <dave0> unicode <3
[08:32:23] <floatcomplex> many of the assumptions you can't make when writing truly cross-platform c code can be validated at compile time at any given platform
[08:32:31] <rcf> dave0: that's why wide characters exist 
[08:32:35] *** Joins: mkv (~znc@ubuntu/member/m4v)
[08:32:39] <katnis> where can i ask something off topic?
[08:32:54] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 258 seconds)
[08:32:54] *** mkv is now known as m4v
[08:33:10] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[08:33:41] <rcf> floatcomplex: indeed, and at least #error is always available if one doesn't wish to be particularly portable 
[08:34:41] <floatcomplex> not all things can or should be made truly portable
[08:34:51] *** Parts: [[R]] (~user@user/rbox) (Leaving)
[08:34:53] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[08:35:45] <floatcomplex> when you force both ios and android users to use the same UI for your app, and it's not the native visual language of either platform, you are mildly annoying 100% of your users just for the sake of scratching a developer itch
[08:36:18] <dave0> an unportable program could be a programmers shining jewel
[08:37:07] *** Joins: jetchisel (jetchisel@user/jetchisel)
[08:37:36] *** Joins: gco (~gco@2601:647:5a00:223:ccd1:665:2257:5c8f)
[08:37:40] <floatcomplex> ultimately portable should be taken to mean "able to be ported", not "zero work is required". you need to accept that ios and android version of an app are gonna have some but not all code in common, for your users' sake
[08:38:03] *** Quits: frost (~frost@user/frost) (Quit: Ping timeout (120 seconds))
[08:38:28] <rcf> Or just make a webapp and hastily package it 
[08:39:17] <floatcomplex> people tend to notice when your chat app kills their phone battery in 38 minutes but sure
[08:40:05] <rcf> Seeing the sorts of crap that even popular 'free' applications try to shove down the user's throat in a desperate bid to monetize I'm not sure they care all that much. 
[08:41:47] <dave0> would animated avatars use much battery?
[08:42:10] <rcf> I actually prefer a (preferably self-hosted, but I'll take a well-run service) web application in many cases because any inefficiencies are more than made up for in the lack of obnoxious ads that have a far worse impact on battery life in my experience. 
[08:43:41] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (Quit: WeeChat 3.1)
[08:45:23] <rcf> dave0: down to the implementation. If you did it well, it wouldn't be too bad, particularly on a mobile device where the screen sleeps most of the time and you wouldn't be rendering anything 
[08:46:29] <rcf> If you did it poorly, the application turns into a slideshow even on reasonably-powerful hardware and everybody will hate you for ruining the experience with expensive, useless eye candy. 
[08:46:46] *** Joins: critr (~critr@50-1-165-103.dsl.dynamic.fusionbroadband.com)
[08:47:32] <rcf> (I have seen plenty of such questionable implementations of visual effects in applications I promptly deleted) 
[08:50:15] *** Joins: dmaroo (~dhruv@2409:4070:2d02:f1a6:c52d:c594:e135:41e1)
[08:53:51] *** Quits: alch (~alch@151.34.9.179) (Read error: Connection reset by peer)
[08:54:57] *** Joins: Nautilus_ (~me2@d27-96-220-62.nap.wideopenwest.com)
[08:55:01] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[08:55:24] *** Quits: gce108 (~gce@user/gce108) (Remote host closed the connection)
[08:55:47] *** Quits: p0g0_ (~p0g0@216.211.157.175) (Remote host closed the connection)
[08:55:48] *** Joins: p0g0__ (~p0g0@216.211.157.175)
[08:56:22] *** Joins: gce108 (~gce@user/gce108)
[08:56:47] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 264 seconds)
[08:56:47] *** Quits: schna (sid484866@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[08:57:07] *** Quits: glowcoil (sid3405@tinside.irccloud.com) (Read error: Connection reset by peer)
[08:57:08] *** Joins: schna (sid484866@id-484866.helmsley.irccloud.com)
[08:57:14] *** Joins: glowcoil (sid3405@id-3405.tinside.irccloud.com)
[08:57:15] *** Joins: bjs (sid190364@user/bjs)
[08:57:23] *** Quits: ikiryo (sid109660@user/ikiryo) (Ping timeout: 264 seconds)
[08:57:46] *** Joins: alch (~alch@151.68.84.139)
[08:57:59] *** Quits: Bou (sid274843@user/bou) (Ping timeout: 264 seconds)
[08:58:26] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Ping timeout: 245 seconds)
[08:58:35] *** Quits: Nautilus (~me2@d27-96-220-62.nap.wideopenwest.com) (Ping timeout: 264 seconds)
[08:58:35] *** Quits: lhtseng (sid15322@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[08:58:46] *** Nautilus_ is now known as Nautilus
[08:58:59] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[08:59:07] *** Quits: makersmasher (~makersmas@2600:6c40:5b00:158d::f8b) (Ping timeout: 268 seconds)
[08:59:40] *** Joins: Bou (sid274843@user/bou)
[08:59:42] *** Joins: makersmasher (~makersmas@2600:6c40:5b00:158d::f8b)
[09:00:14] *** Joins: ikiryo (sid109660@user/ikiryo)
[09:00:23] *** Quits: Pent (sid313808@lymington.irccloud.com) (Ping timeout: 264 seconds)
[09:02:32] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:03:14] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:03:25] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[09:03:59] *** Quits: jakesyl_ (sid56879@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[09:04:11] *** Joins: Raguile (~Raguile@user/raguile)
[09:08:40] *** Joins: jakesyl_ (sid56879@id-56879.hampstead.irccloud.com)
[09:09:03] *** Quits: bolsonarogay (~bolsonaro@2804:56c:a1c6:9b00:b0bc:2f1b:a1bf:5dab) (Ping timeout: 260 seconds)
[09:14:39] *** Quits: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 260 seconds)
[09:23:52] *** Quits: Dotz0cat (~Dotz0cat@h194.118.90.75.dynamic.ip.windstream.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:25:42] *** Joins: Dotz0cat (~Dotz0cat@h194.118.90.75.dynamic.ip.windstream.net)
[09:26:40] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[09:27:52] *** Joins: serbest (~serbest@user/serbest)
[09:35:32] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 246 seconds)
[09:36:16] *** Quits: pnbeast (~pnbeast@2601:140:4280:3c90::1) (Quit: WeeChat 2.7.1)
[09:41:16] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[09:42:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[09:44:28] *** Joins: rgrinberg (~textual@190.113.111.74)
[09:44:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:46:30] *** Quits: hinata (~hinata@2402:8100:22d5:162:b9bc:3df1:c0e3:e055) (Ping timeout: 258 seconds)
[09:46:52] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[09:47:55] *** Joins: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi)
[09:48:53] *** Joins: kapil (~kapil@o-k.website)
[09:49:46] *** Joins: Atque (~Atque@user/atque)
[09:52:13] *** Quits: rgrinberg (~textual@190.113.111.74) (Ping timeout: 265 seconds)
[09:54:17] *** Quits: gco (~gco@2601:647:5a00:223:ccd1:665:2257:5c8f) (Quit: ZZZzzz…)
[09:54:56] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[09:57:33] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[09:59:13] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:59:13] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:59:13] *** Joins: wroathe (~wroathe@user/wroathe)
[10:00:36] *** Joins: b1101 (~b1101@pool-100-37-115-53.nycmny.fios.verizon.net)
[10:01:10] *** Joins: kapil (~kapil@o-k.website)
[10:03:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[10:08:15] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:16:02] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[10:21:58] *** Joins: kajiryoji (~kajiryoji@180.160.56.140)
[10:24:24] *** Joins: NEYi (~NEYi@109.251.216.38)
[10:27:31] *** Joins: V-T60 (~v@91.203.24.166)
[10:33:52] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[10:34:31] *** Joins: serbest (~serbest@user/serbest)
[10:35:23] *** Joins: riposte (~finalripo@2403-5802-74-2--16c3.ip6.aussiebb.net)
[10:38:41] *** Joins: mrig (~AdiIRC@user/mrig)
[10:39:06] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:39:20] *** Quits: serbest (~serbest@user/serbest) (Client Quit)
[10:40:09] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[10:40:36] *** Joins: larry87 (~quassel@98.40.245.193)
[10:40:41] *** Quits: krissmaster (~kriss@213.239.83.90) (Remote host closed the connection)
[10:41:28] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[10:42:18] *** Joins: mahmutov (~mahmutov@37.155.18.23)
[10:42:59] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 264 seconds)
[10:43:43] *** Joins: krissmaster (~kriss@213.239.83.90)
[10:43:57] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (Ping timeout: 268 seconds)
[10:45:37] *** Quits: krissmaster (~kriss@213.239.83.90) (Remote host closed the connection)
[10:45:41] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 264 seconds)
[10:47:14] *** Joins: lionkor (~lion@200116b80f21be003f77e013efe91b4f.dip.versatel-1u1.de)
[10:47:35] *** Joins: krissmaster (~kriss@213.239.83.90)
[10:47:51] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[10:48:02] *** Quits: lionkor (~lion@200116b80f21be003f77e013efe91b4f.dip.versatel-1u1.de) (Client Quit)
[10:48:24] *** Joins: lionkor (~lion@200116b80f21be003f77e013efe91b4f.dip.versatel-1u1.de)
[10:48:34] *** Quits: lionkor (~lion@200116b80f21be003f77e013efe91b4f.dip.versatel-1u1.de) (Changing host)
[10:48:34] *** Joins: lionkor (~lion@beammp/staff/lionkor)
[10:48:48] *** Quits: lionkor (~lion@beammp/staff/lionkor) (Client Quit)
[10:49:19] *** Joins: lionkor (~lion@beammp/staff/lionkor)
[10:49:51] *** Joins: Rounin (~david@84.212.130.215)
[10:51:57] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[10:51:59] *** Quits: dmaroo (~dhruv@2409:4070:2d02:f1a6:c52d:c594:e135:41e1) (Ping timeout: 264 seconds)
[10:52:05] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:53:09] *** Joins: brelod (~me@90.244.150.142)
[11:00:22] *** Quits: V-T60 (~v@91.203.24.166) (Remote host closed the connection)
[11:02:05] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[11:02:27] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 260 seconds)
[11:02:56] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[11:03:10] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:05:48] *** Joins: lkor (~lion@beammp/staff/lionkor)
[11:06:10] *** Quits: lionkor (~lion@beammp/staff/lionkor) (Ping timeout: 265 seconds)
[11:06:16] *** lkor is now known as lionkor
[11:09:28] *** Joins: SymbioticFemale (~Symbiotic@gateway/tor-sasl/symbioticfemale)
[11:11:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[11:17:53] *** Joins: dmaroo (~dhruv@2409:4070:2d02:f1a6:c52d:c594:e135:41e1)
[11:18:26] *** Joins: Klinda (~superleag@user/klinda)
[11:26:57] *** Joins: aradesh (~aradesh@user/aradesh)
[11:27:23] *** Joins: earnestly (~earnest@user/earnestly)
[11:27:46] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:31:51] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:34:51] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (Read error: Connection reset by peer)
[11:35:31] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:1201:a3bd:5ae9:1b03) (Ping timeout: 245 seconds)
[11:37:27] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[11:37:55] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[11:38:09] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:45:13] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:50:05] *** Joins: Atque (~Atque@user/atque)
[11:55:15] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[12:01:23] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:c84b:8e8d:56e4:c2a5)
[12:01:27] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[12:03:35] *** Quits: critr (~critr@50-1-165-103.dsl.dynamic.fusionbroadband.com) (Ping timeout: 260 seconds)
[12:07:41] <Learath2> Q: Does anyone know how I can get more information about a random address in gdb?
[12:08:35] *** Joins: plastico (~plastico@neomutt/plastico)
[12:09:00] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[12:10:18] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[12:10:49] <Fleck> Learath2: what do you mean - more info?
[12:12:12] <Learath2> Yeah good question. As in whether it's within the locals of some previous stack frame, or maybe in the arglist
[12:12:50] *** Joins: mrig (~AdiIRC@user/mrig)
[12:13:12] <Learath2> I have an insane pointer appearing out of nowhere and I only have a core to work with. So I searched within the core for the insane value and I see it at a couple addresses. I just want to know what they are being stored for
[12:15:59] <Fleck> depends on environment
[12:17:05] <dave0> does   list *0xsomething   help?
[12:17:22] <Learath2> environment is rather broad, is debian stable x86_64 give you any clue?
[12:17:23] <dave0> star with a raw address
[12:19:04] <Learath2> dave0: nope, doesn't print anything
[12:19:24] <Learath2> The address appears close to the stack, but I don't think it's within any stack frame :/
[12:19:32] <LangerJan> Learath2: so you have no further idea what might be behind the pointer?
[12:20:36] <LangerJan> Learath2: have you tried "> p/s <your pointer>"?
[12:21:22] <Learath2> The pointer itself is to static memory, the value is `&ms_aCharacterPool[1]`. It makes no sense for this value to appear though. So I checked the core for where this address is coming from
[12:22:59] <Learath2> I see a couple addresses where the value appears. I'm trying to figure out what was being stored there so I can hopefully find where the bug is, feels like UB :/
[12:24:59] *** Joins: arinov (~arinov@213.194.126.155)
[12:27:12] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 260 seconds)
[12:30:08] *** Quits: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi) (Remote host closed the connection)
[12:30:38] *** Quits: lionkor (~lion@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[12:35:11] *** Joins: V-T60 (~v@host-86-111-90-227.566f.la.net.ua)
[12:36:44] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:39:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:40:25] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[12:41:59] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[12:44:14] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:46:18] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[12:46:55] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[12:51:29] *** Joins: frost (~frost@user/frost)
[12:52:39] *** Quits: SymbioticFemale (~Symbiotic@gateway/tor-sasl/symbioticfemale) (Ping timeout: 276 seconds)
[12:53:04] *** Quits: alch (~alch@151.68.84.139) (Read error: Connection reset by peer)
[12:53:50] *** Quits: larry87 (~quassel@98.40.245.193) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:55:15] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[12:55:57] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:58:04] *** Joins: alch (~alch@151.68.75.166)
[12:58:31] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Quit: This is the hidden truth, the world between the lines.)
[12:58:45] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[12:58:55] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[13:01:33] *** Joins: rgrinberg (~textual@190.113.111.74)
[13:02:35] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[13:05:04] *** Quits: mahmutov (~mahmutov@37.155.18.23) (Ping timeout: 265 seconds)
[13:06:36] *** Quits: rgrinberg (~textual@190.113.111.74) (Ping timeout: 258 seconds)
[13:06:56] *** Joins: kadavul (~vazha@103.165.20.141)
[13:07:40] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[13:10:28] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[13:10:43] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 268 seconds)
[13:10:49] *** scoobydoob is now known as scoobydoo
[13:12:59] *** Quits: kadavul (~vazha@103.165.20.141) (Ping timeout: 264 seconds)
[13:13:09] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[13:18:23] *** Joins: shivesh (~shivesh@user/shivesh)
[13:24:23] *** Joins: slidercrank (~slidercra@user/slidercrank)
[13:26:36] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:28:11] <LangerJan> you must be in a dark place to be that desparate. I wish you best of luck
[13:28:32] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:30:25] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:31:10] *** Joins: csrf (~csrf@user/csrf)
[13:32:18] *** Joins: kadavul (~vazha@103.165.21.156)
[13:32:56] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:34:24] *** Joins: alsolionkor (~lion@beammp/staff/lionkor)
[13:42:00] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Quit: Leaving)
[13:47:20] *** Joins: Guest3368 (~Guest33@82.15.88.74)
[13:51:23] *** Quits: baltazar (~baltazar@84-236-16-46.pool.digikabel.hu) (Ping timeout: 264 seconds)
[13:52:55] *** Joins: baltazar (~baltazar@193-110-63-186.cable-modem.hdsnet.hu)
[13:55:22] *** Joins: mahmutov (~mahmutov@37.155.18.23)
[13:56:03] *** Joins: cartman (~i.am@191.32.92.1)
[13:57:02] *** Joins: reset (~reset@user/reset)
[13:59:00] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[14:00:57] *** Joins: cadmio (~cadmio@151.25.149.251)
[14:01:01] <cadmio> Hello
[14:01:39] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 260 seconds)
[14:02:07] *** Quits: V-T60 (~v@host-86-111-90-227.566f.la.net.ua) (Ping timeout: 260 seconds)
[14:03:54] <cadmio> I need to transform a char * "This" to "<b>This</b>". what's the best way to do it?
[14:04:23] *** AbleBacon_ is now known as AbleBacon
[14:06:04] *** Joins: krux02 (~krux02@p200300e817076e0049c4423bd7cf064e.dip0.t-ipconnect.de)
[14:06:17] <dave0> use    char *string = "This"; char buf[something] = { 0 }; snprintf(buf, sizeof(buf), "<b>%s</b>", string);
[14:06:44] *** Quits: kts (~kts@103.73.237.7) (Quit: Konversation terminated!)
[14:06:48] <dave0> something should be big enough for whatever your string is
[14:07:06] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:07:13] <deadk> that uses unnecessary extra space!
[14:07:28] <deadk> what if This is a terabyte long
[14:08:49] *** Quits: Guest3368 (~Guest33@82.15.88.74) (Remote host closed the connection)
[14:09:35] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[14:11:18] <dave0> ,asprintf
[14:11:18] <candide> asprintf is char *ASPrintF(const char *format, ...) { va_list ap; va_start(ap, format); i​nt size = vsnprintf(0, 0, format, ap) + 1; va_end(ap); /* count string */ char *string = 0; if(size > 0) string = malloc(size); /* allocate string */ va_start(ap, format); if(string != 0) vsnprintf(string, size, format, ap); va_end(ap); /* print string */ return string; }
[14:11:33] <dave0> that malloc's space
[14:12:06] <sham1> That's not the asprintf though. It doesn't do the stupid thing of having the signature: `int asprintf(char **strp, const char *fmt, ...)`
[14:12:31] <deadk> i don't think that's especially stupid
[14:13:01] <dave0> "it's less dumb" ;-)
[14:13:15] <deadk> let me rephrase
[14:13:33] <deadk> i don't think the asprintf is any stupider than the asprintf there
[14:14:06] <deadk> but also you're still using unnecessary extra space, you're just allocating the extra space with malloc now
[14:14:23] <Red> ...and it's a non-standard extension
[14:14:51] <sham1> But it's part of the memory TR alongside strdup and such
[14:15:28] *** Joins: dcl^ (~dcl@wsip-98-188-242-6.mc.at.cox.net)
[14:16:17] <sham1> http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1388.pdf they use the LSB signature for asprintf, as in, the stupid one
[14:16:45] *** Quits: reset (~reset@user/reset) (Ping timeout: 260 seconds)
[14:16:48] <sham1> That's also the signature used by other projects like the BSDs, but that doesn't make it better
[14:17:13] <deadk> i mean, continue thinking it's stupid if that makes you happy, i guess
[14:17:52] <sham1> It's awkward to use
[14:17:59] <sham1> That's the main problem
[14:18:20] <sham1> Meanwhile the one presented in ,asprintf is more reasonable because it returns the character pointer
[14:18:30] <deadk> that's an occupational hazard when things have only one return value
[14:20:15] *** Joins: reset (~reset@user/reset)
[14:24:03] *** Joins: eeee (~eeee@user/eeee)
[14:26:31] <cadmio> I did something like this https://paste.gnome.org/p1sqnunw3#line-25
[14:27:09] <cadmio> I'm not sure how to cast here:  warning: conversion from ‘size_t’ {aka ‘long unsigned int’} to ‘gint’ {aka ‘int’} strlen(replaceString));
[14:29:04] <sham1> Well it'd be unlikely that your string would be larger than what can be held in an int
[14:29:37] <cadmio> yes but how can I cast from size_t to unsigned long int?
[14:30:24] <fruitypunk> x = (gint) strlen(replaceString);
[14:30:30] <sham1> But if you want to be careful, you could for example have a g_assert before the gtk_text_buffer_insert that does somthing like g_assert(INT_MAX >= strlen(replaceString)); and then you can just do (guint)strlen(replaceString)
[14:30:38] <sham1> Err, casting to gint
[14:30:54] <fruitypunk> this conversion from 'long unsigned' to 'signed' looses bits
[14:31:39] <cadmio> ok thanks
[14:32:19] *** Quits: malloy (~jimery@116.30.221.89) (Quit: WeeChat 3.0)
[14:34:57] *** Quits: eeee (~eeee@user/eeee) (Quit: WeeChat 3.3)
[14:35:13] <markand> asprintf is nice but I prefer open_memstream/fmemopen 
[14:35:21] <markand> and those are C2x btw
[14:35:38] <markand> open_memstream has weird name but it works
[14:36:07] *** Quits: vaio (~gary@user/ghost) (Remote host closed the connection)
[14:36:18] *** Quits: cadmio (~cadmio@151.25.149.251) (Ping timeout: 258 seconds)
[14:36:23] *** Joins: Senicar7 (~Senicar@gateway/tor-sasl/senicar)
[14:36:46] *** Joins: cadmio (~cadmio@151.43.112.25)
[14:36:59] <sham1> Wait, they'll actually add open_memstream to C23?
[14:37:06] <sham1> I know that they're considering strdup and strndup
[14:37:27] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 258 seconds)
[14:37:42] <cadmio> the only problem with that function is that I convert the GtkTextBuffer from "This" to "<b>This</b>This" I don't know if you're familiar with the library
[14:37:48] <sham1> Now to just hope that we could get getline and getdelim
[14:38:08] <NRK[m]> hi, is it standard to have a global pointer to a static variable?
[14:38:11] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[14:38:32] <dave0> NRK[m]: that's fine
[14:38:38] <sham1> cadmio: you'd need to somehow remove the text "This" from the buffer before appending the tagged version
[14:38:44] <NRK[m]> k, thanks
[14:38:45] <sham1> You already know where it is supposed to be
[14:39:37] <sham1> Also RE: snprintf, glib already has g_strdup_printf for doing the formatting and allocating a new string as an alternative to stuff like asprintf
[14:39:50] *** Joins: vaio (~gary@user/ghost)
[14:39:54] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Ping timeout: 276 seconds)
[14:39:54] *** Senicar7 is now known as Senicar
[14:41:12] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[14:41:15] *** Joins: Ionut (ionut@user/ionut)
[14:41:45] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[14:41:52] <cadmio> ok I solved with   gtk_text_buffer_delete (buffer, &start_sel, &end_sel); and it's working well now. I don't know if it's worth to change to g_strdup_printf
[14:45:33] *** Joins: kish` (~aqua@user/aqua)
[14:45:43] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[14:46:24] *** Joins: kish` (~aqua@user/aqua)
[14:48:45] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:48:49] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[14:50:56] *** Joins: rgrinberg (~textual@190.113.111.74)
[14:53:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:55:47] *** Quits: frost (~frost@user/frost) (Quit: Ping timeout (120 seconds))
[14:56:55] *** Quits: rgrinberg (~textual@190.113.111.74) (Ping timeout: 252 seconds)
[14:57:08] *** Joins: frost (~frost@user/frost)
[14:57:10] *** Joins: rlv (~user@2a02:a03f:8bd6:bc00:5ae4:c060:7d3d:bd93)
[14:58:26] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[14:58:27] *** Joins: johnjay (~pi@192.142.100.50)
[14:58:39] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 265 seconds)
[15:02:51] *** Quits: dcl^ (~dcl@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[15:03:32] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Remote host closed the connection)
[15:06:55] *** Quits: rahl (~rahl@102.114.127.248) (Ping timeout: 260 seconds)
[15:07:21] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[15:08:42] *** Joins: rahl (~rahl@102.114.228.59)
[15:09:39] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net)
[15:10:25] <varaindemian> https://www.irccloud.com/pastebin/yapUA2JI/
[15:10:49] <varaindemian> Can I use this to change global variables?
[15:11:07] <varaindemian> Bou:  trying to give a different spin to my previous problem
[15:11:09] <varaindemian> :D
[15:11:32] <Bou> what's a bool? this isn't C++ is it? :^)
[15:12:13] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:12:26] *** Quits: Echoz (~chris@user/echoz) (Ping timeout: 260 seconds)
[15:13:32] <LangerJan> depends. There are a zillion implementations and definitions of booleans, before and after <stdbool.h> has been introduced
[15:14:26] *** Joins: Echoz (~chris@user/echoz)
[15:15:30] <Bou> anyway, that second `char *enc_flag` creates a new local variable shadowing the global, it doesn't change the other enc_flag
[15:18:24] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[15:19:55] *** Quits: rlv (~user@2a02:a03f:8bd6:bc00:5ae4:c060:7d3d:bd93) (Ping timeout: 265 seconds)
[15:21:30] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[15:21:59] *** Joins: Crescendo (~Crescendo@user/crescendo)
[15:23:10] *** Quits: segnior (segnior@user/segnior) (Ping timeout: 260 seconds)
[15:25:52] *** Joins: cn--j (~cn-j@user/cn-j)
[15:26:37] *** Parts: cn--j (~cn-j@user/cn-j) ()
[15:26:49] *** Joins: k4davul (~vazha@103.165.21.156)
[15:29:07] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[15:29:33] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[15:29:36] *** Joins: segnior (segnior@user/segnior)
[15:30:00] *** Joins: kish` (~aqua@user/aqua)
[15:34:33] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:c84b:8e8d:56e4:c2a5) (Quit: Leaving)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:33] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[15:38:41] *** Joins: seninha (~seninha@user/seninha)
[15:44:46] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[15:49:13] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[15:52:54] *** Quits: kadavul (~vazha@103.165.21.156) (Ping timeout: 268 seconds)
[15:53:16] *** Quits: k4davul (~vazha@103.165.21.156) (Ping timeout: 265 seconds)
[15:53:16] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 265 seconds)
[15:53:50] *** Quits: cadmio (~cadmio@151.43.112.25) (Quit: WeeChat 3.0)
[15:53:52] <Klinda> a buffer overflow happens only when you access in a wrong index of a buffer?
[15:54:50] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:55:17] <Klinda> so for example a strlen function with a char array, can't exploit it as a buffer overflow?
[15:56:11] *** Quits: Posterdati (~posterdat@host-95-233-159-95.retail.telecomitalia.it) (Ping timeout: 264 seconds)
[16:00:41] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[16:00:48] *** Joins: kadavul (~vazha@103.165.21.156)
[16:00:49] *** Joins: k4davul (~vazha@103.165.21.156)
[16:05:32] <BtbN> If you point strlen at something that's not properly zero terminate, it'll explode.
[16:05:39] <BtbN> Though not sure what you're asking.
[16:05:47] *** Quits: k4davul (~vazha@103.165.21.156) (Ping timeout: 260 seconds)
[16:06:15] *** Quits: kadavul (~vazha@103.165.21.156) (Ping timeout: 260 seconds)
[16:06:36] *** Joins: kadavul (~vazha@103.165.21.156)
[16:06:37] *** Joins: k4davul (~vazha@103.165.21.156)
[16:07:05] *** Quits: alsolionkor (~lion@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[16:08:14] <dave0> Klinda: that's a buffer overflow but it's a read... someone will find a way to exploit it
[16:09:02] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[16:09:06] *** Joins: Posterdati (~posterdat@host-79-17-4-141.retail.telecomitalia.it)
[16:09:06] <Klinda> a over-read ?
[16:09:09] <dave0> ooh it's a "buffer over-read" as opposed to a "buffer overflow"
[16:09:13] <dave0> yep yep
[16:09:18] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[16:09:18] <dave0> that's what google says
[16:09:49] <Klinda> BtbN: yes I am asking passing an array of char only
[16:10:13] <Klinda> to strlen, so having in input a pointer of char it's really dangerous in C
[16:10:14] *** Joins: wovixo (~wovixo@128.104.205.49)
[16:10:28] <dave0> i think there was an exploit for openssl of a buffer over-read where they were able to read out a key
[16:11:05] <Klinda> all the hackers 10 years ago were happy
[16:11:15] <BtbN> I'm really not sure what you mean. If you somehow accept an untrusted char* from external sources... yes, bad idea? But how would that possibly happen?
[16:11:56] <Klinda> if an attacker can run the function, what would you do?
[16:12:44] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[16:16:36] <BtbN> Wonder why an attacker can run arbitrary functions in my code.
[16:17:31] <dave0> Klinda: file a bug report
[16:17:42] *** Joins: farkaan (~farkaan@2409:4064:e02:41d1:69b4:7091:d10a:4eee)
[16:17:58] <BtbN> If someone got the ability to run code in your application, you have already lost.
[16:18:16] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:19:38] <Klinda> so let's also use the format string in a bad way?
[16:21:30] <Klinda> I don't know I am more happy to code safe C code, than a vulnerability one
[16:22:18] <Klinda> imagine if insert on a form the format string with all the input in the printf
[16:22:57] <Klinda> also I belive these bugs were exploited in the tool used on a shell
[16:22:58] <Bou> that's why you don't ask for a username and then `printf(username)`
[16:23:18] <Klinda> like apche and some other tools
[16:23:26] <Klinda> cause all wrote these bad codes
[16:24:01] *** Quits: mahmutov (~mahmutov@37.155.18.23) (Ping timeout: 258 seconds)
[16:24:10] <farkaan> I'm pretty new but I've recently started writing out some projects and I tend to use a bit of C++ features but with procedural C-like code (almost no OOP). Is this bad practice?
[16:24:14] <farkaan>  I had an interview yesterday and when they checked out my C++ project, they were like "well this kinda looks like C", I told them that I've used C++ features as well but they didn't agree
[16:25:04] <clarity> No, that's what C++ is all about
[16:25:08] <clarity> You choose which features to use
[16:26:50] <Bou> surely there are C-isms you shouldn't use in C++ and vice versa
[16:27:03] <farkaan> clarity: Yeah alright. I suppose I gave the impression that I'm scared to use more of its features or that I don't know OOP (which isn't the case, I've been learning Java for years before this). Regardless, I failed the interview despite passing the technical test
[16:28:17] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[16:28:20] <farkaan> But I get a feeling that C programmers tend to stick to "pure C" and vice versa. For example the GNOME project has invented a whole object-oriented system for C called GObject
[16:29:57] <clarity> C programmers tend to stick to C, but there are many C++ programmers who pick a subset of features they like and it doesn't have to be a large set.  Then there are C++ enthusiasts who insist on using all the ever-changing latest and greatest features & best practices
[16:30:27] <LeoNerd> GObject isn't for "giving OO to C". It's for making introspection and language bindings that are portable to /lots/ of high-level languages
[16:33:00] <farkaan> clarity: Yea I think I should actually learn C first (I jumped straight to C++ after Java, Stroustrup's A Tour of C++ understandably didn't go into C) as most of the "C" I know is from open source code out there.
[16:33:05] <farkaan> I have K&R lying around and it's fairly thin so
[16:35:06] <X-Scale> "C is not a big language, and it is not served well by a big book." -- K&R
[16:37:21] *** Joins: Inline (~Inline@2a02:908:1252:7a80:98b1:ebcb:2d91:63eb)
[16:38:27] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[16:41:02] *** Joins: kn07_ (~kn07_@86.121.23.168)
[16:41:22] <varaindemian> Bou: can I somehow store it in the memory and then manipualte that part of the memory?
[16:41:51] <farkaan> LeoNerd: Ah thanks for the correction. I'm an end user so I only ever delve into GNOME's code when I encounter some breaking bug
[16:43:06] *** Joins: wes20 (~wes@zen-c2-chlt1w3.chlt.zs.ncren.net)
[16:43:13] <Bou> varaindemian: sure, but what's the point, if you can modify the program you can replace your entire thing with `puts("Password correct");`
[16:43:19] *** Parts: wes20 (~wes@zen-c2-chlt1w3.chlt.zs.ncren.net) ()
[16:44:16] <farkaan> Is Harbison and Steele's C reference worth buying?
[16:44:25] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:44:57] <varaindemian> Bou: trying to modify the CTF and create a new one
[16:45:20] <varaindemian> Bou: So I am tryng to think of a better implementation
[16:46:54] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[16:48:57] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[16:51:27] *** Joins: slidercrank (~slidercra@user/slidercrank)
[16:51:59] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 264 seconds)
[16:52:47] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[16:53:14] *** Quits: alch (~alch@151.68.75.166) (Read error: Connection reset by peer)
[16:57:03] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[16:57:05] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 264 seconds)
[16:57:32] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[16:58:19] *** Joins: alch (~alch@151.68.159.46)
[16:59:20] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[17:00:29] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[17:00:44] *** Joins: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de)
[17:00:45] *** Quits: farkaan (~farkaan@2409:4064:e02:41d1:69b4:7091:d10a:4eee) (Quit: Client closed)
[17:01:35] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 264 seconds)
[17:05:09] <varaindemian> Bou: what do you think?
[17:09:37] *** Joins: slidercrank (~slidercra@user/slidercrank)
[17:10:06] *** Quits: krux02 (~krux02@p200300e817076e0049c4423bd7cf064e.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[17:11:02] <Bou> I'm not following you, you want to change the correct password to "varaindemian", or?
[17:14:12] <varaindemian> Bou: I want to play with that string so that the player will be "forced" to do more reverse like work and maybe patch the program 
[17:14:25] *** Quits: k4davul (~vazha@103.165.21.156) (Quit: Leaving)
[17:14:52] <Bou> ah okay, you can't do that by changing the string, because an empty password will always succeed. you will need a better check_password function
[17:14:56] *** Joins: random-nickname (~random-ni@87.116.179.142)
[17:15:28] *** Quits: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[17:18:26] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 245 seconds)
[17:18:59] *** Quits: Inline (~Inline@2a02:908:1252:7a80:98b1:ebcb:2d91:63eb) (Quit: Leaving)
[17:20:48] *** Joins: Inline (~Inline@2a02:908:1252:7a80:98b1:ebcb:2d91:63eb)
[17:21:43] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:21:46] <ARoxdale> Is it possible to dereference a void* without casting it to a T* ?
[17:22:38] <ARoxdale> As in, get your hands on a value without knowing the type.
[17:23:05] <floatcomplex> memcpy
[17:23:26] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[17:23:30] *** Joins: krux02 (~krux02@p200300e817076e0049c4423bd7cf064e.dip0.t-ipconnect.de)
[17:23:38] <ARoxdale> I guess that's probably the only real answer
[17:24:20] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::3)
[17:24:21] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Ping timeout: 276 seconds)
[17:24:34] <Xgc> ARoxdale: Hard to do that, since values have type.
[17:25:39] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:26:37] <Xgc> ARoxdale: Having some number of bytes is almost like having the value, but not quite.  You certainly can't dereference any of that to get the value without the type.
[17:26:50] <ARoxdale> And there isn't a way to dereference without a type, at all. void* ptr=0xabcde;   *ptr;
[17:27:23] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 264 seconds)
[17:28:08] <ARoxdale> I think my question really revolves around what a dereference is actually doing. Is it just a cast of some kind to a known type, from T* to T?
[17:29:39] <Xgc> ARoxdale: Strictly, that would be undefined behavior.  Some implementations allow it, but you wouldn't have "the value having the unknown type".
[17:29:52] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[17:30:26] <Klinda> if I define size_t len; what value is assigned on len?
[17:30:40] <Klinda> 0 ?
[17:31:34] <topside> What is the value of an uninitialized variable?
[17:32:05] <dave0> "unpredictable"
[17:32:07] *** random-nickname is now known as random-nick
[17:32:33] <DPA> It's "world explodes"
[17:33:24] <topside> eh, just cast it to a pointer, dereference it and let the world burn
[17:34:23] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[17:34:30] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:34:35] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:882f:99b3:8330:1ef6)
[17:34:35] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:882f:99b3:8330:1ef6) (Changing host)
[17:34:35] *** Joins: skapata (~Skapata@user/skapata)
[17:36:02] <topside> ARoxdale, think about it - how do you know how many bytes of value to return when dereferencing a void*?
[17:37:26] <ARoxdale> You don't. But the fact that the void* type exists but can't be dereferenced still confuses me.
[17:37:35] <ARoxdale> I can't really explain it.
[17:38:04] <ARoxdale> It's like the type equivilent of a null reference, maybe. 
[17:38:56] <DPA> gcc will treat ((void*)0)+123 as if it was 1 byte big.
[17:38:56] <DPA> ,cc (int)(((void*)0)+123)
[17:39:00] <candide> DPA: [warning: pointer of type 'void *' used in arithmetic [-Wpointer-arith]  warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]] no output: (int)(((void*)0) + 123) = 123
[17:40:39] <topside> ARoxdale, maybe think of void more as an undefined type as opposed to an actual type :)
[17:40:51] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[17:41:09] *** Quits: alch (~alch@151.68.159.46) (Read error: Connection reset by peer)
[17:41:25] <ARoxdale> But it's 'there'
[17:41:47] <topside> yea, its just a generic pointer to an undefined type 
[17:41:51] <omegatron> consider  void *  as just a pointer to some bytes
[17:41:52] <dave0> ARoxdale: yeah it's confusing...  void  by itself means "nothing" but   void *   means "any pointer"
[17:42:13] <dave0> (not function pointers in c, but it's allowed in posix)
[17:42:17] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[17:42:24] <floatcomplex> but don't
[17:43:17] <ARoxdale> If it was voidptr instead of void*, I think it would make more sense. But there's this * on the type, which always makes me want to think about dereferencing it.... but I can't.
[17:43:23] *** Joins: alch (~alch@ca-18-202-59.service.infuturo.it)
[17:43:41] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you later)
[17:43:44] <dave0> you could typedef that
[17:43:45] <topside> unless you cast it, but yes
[17:43:58] <ARoxdale> gcc gives sizeof(void) as 1, which doesn't help matters
[17:44:21] <ARoxdale> dave0: I would but then everyone else would complain.
[17:44:46] <ARoxdale> Or it would genuinely confuse someone else who expect all addresses to be stored in T* types
[17:45:45] <ARoxdale> Do all complilers not allow void instances to be declared?
[17:45:54] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[17:46:59] <omegatron> usually, if some API contains functions with 'void *' as parameter, it indicates the authors were too lazy to provide function(s) which use a specific type ... even if a function accepts simply a pointer to raw bytes in a parameter, it would be better to use "unsigned char *" for example, so the type-checking capability of a compiler can be used
[17:47:11] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::3) (Ping timeout: 264 seconds)
[17:48:22] <omegatron> in laymen terms, a function with 'void *' as a parameter says "yeah, i'm fine with anything you give me" , which is most likely not really the case
[17:48:38] <topside> wanna be <T>
[17:53:30] *** Joins: quartz (~quartz@user/quartz)
[18:00:47] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[18:01:44] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[18:03:08] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[18:03:08] *** Joins: Atque (~Atque@user/atque)
[18:06:23] *** Quits: dmaroo (~dhruv@2409:4070:2d02:f1a6:c52d:c594:e135:41e1) (Ping timeout: 264 seconds)
[18:08:04] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[18:09:47] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[18:09:54] <De4nWhit3> Hello everyone. :)  
[18:12:45] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[18:13:08] *** Joins: pulse (~pulse@user/pulse)
[18:16:27] <floatcomplex> ARoxdale: are you running gcc with no warnings enabled or something
[18:16:30] *** Quits: frost (~frost@user/frost) (Quit: Ping timeout (120 seconds))
[18:16:41] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[18:16:46] *** Joins: rgrinberg (~textual@190.113.111.74)
[18:16:59] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:17:13] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[18:17:42] *** Joins: dmaroo (~dhruv@157.48.138.142)
[18:18:13] *** Joins: frost (~frost@user/frost)
[18:20:06] <De4nWhit3> How long does it take on average to learn C? I used to do front-end dev 3 years ago and haven't coded since. However, I am interested in being full stack and C looks like a language one could easily fall in love with. 
[18:20:32] <LeoNerd> I've been working with it the past 20 years, and I feel I justabout have a good grasp of it now
[18:20:39] <De4nWhit3> Would 6 months be enough time to learn C and make you applicable to apply for a dev job in it? 
[18:20:45] <De4nWhit3> Oh goodness gracious LeoNerd.
[18:22:05] *** Quits: kn07_ (~kn07_@86.121.23.168) (Quit: Leaving)
[18:23:22] *** Joins: CaCode (~CaCode@user/cacode)
[18:24:19] <markand> there are not that much jobs in C those days though
[18:25:27] <floatcomplex> more than you'd think
[18:25:44] <trenka> RH is hiring kernel devs btw :)
[18:26:10] <floatcomplex> De4nWhit3: learning enough c to be useful takes very little time if you are wired for it, forever if you aren't
[18:26:12] <cehteh> after 6 months you may know C but you have a long way to go to know all the dirty bits, common practices, idioms and fallacies. maybe as junior dev in a team with some handholding its feasible.
[18:27:26] <cehteh> C itself as in syntax is reasonably simple, but the ways you can mess up are plenty
[18:28:04] <De4nWhit3> A junior job sounds like a dream. I did dev before, on a junior level. I'll keep learning C and maybe some Java too. I think Java is easier but also used a lot. With the nono virus its been very difficult to find a job because my skills it is not so good.
[18:28:20] <floatcomplex> put another way, if c is well correlated with your mental model of how a computer works, it's very easy to pick up. otherwise very hard
[18:28:33] <nomagno> I see a certain elegance in C I just can't find in many other languages
[18:28:37] *** Joins: rlv (~user@2a02:a03f:8bd6:bc00:5ae4:c060:7d3d:bd93)
[18:28:41] <De4nWhit3> Thank you for all the advices. It is much appreciated. 
[18:28:51] *** Quits: kadavul (~vazha@103.165.21.156) (Ping timeout: 245 seconds)
[18:29:11] <Xgc> nomagno: That's an odd choice of words.
[18:29:36] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:29:47] <cehteh> nowadays the programming languages are somewhat low requirement, knowing the libs, algorithms, safety and how to code tihngs efficiently is much more important. anda lot knowledge about the tools/infrastructure around, I wont want to work with a C Master who messes up with git
[18:29:50] <De4nWhit3> I think I understand what he is saying but it is difficult to understand. 
[18:30:29] <De4nWhit3> cehteh oh thank you that is a very good advice. I should start using git again. It's been so long I don't remember any commands.
[18:31:23] <floatcomplex> please learn to use asan and gdb before git
[18:31:33] <cehteh> git is only an example for the whole tooling, depending on the job you can say the same about any other rcs, make or any other build system and so on
[18:31:35] <nomagno> I think it is mostly how much punch it packs in such a small feature set
[18:32:02] <cehteh> gdb isnt necessary :D just write bug free code haha
[18:32:15] <cehteh> actually i almost never use gdb
[18:32:31] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 252 seconds)
[18:32:47] <De4nWhit3> gdb is the online debugger?
[18:32:49] <floatcomplex> i reach for gdb after asan and before valgrind
[18:32:55] <omegatron> gnu debugger
[18:33:02] <floatcomplex> asan almost always does the job with less effort
[18:33:23] <floatcomplex> don't ever commit any code using git that asan hasn't seen
[18:33:37] <nomagno> I definitely would not use a lower-level language than C, at that point it becomes annoying
[18:33:41] <cehteh> well i am doing rust now :D 
[18:33:59] <De4nWhit3> Ok thank you. 
[18:34:28] <De4nWhit3> I have used very briefly java and c++. But it was so brief I can't really use it at all except to maybe say "hello world". 
[18:35:36] <cehteh> i dont want to be herectic here but i dont think C is the right language unless you aim to be some hardcore embededd or kernel dev
[18:35:45] <cehteh> which needs a lot commitment
[18:36:21] <floatcomplex> cehteh: there are a lot of jobs where you need to understand c even if you are primarily writing some other language
[18:36:23] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[18:36:28] <cehteh> with rust, python, go you certainly have better job opportunities
[18:36:36] <nomagno> C is appropriate for a lot of stuff even nowadays. I just don't think throwing yourself to be a full stack is the most reasonable choice
[18:36:49] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:36:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[18:37:03] <cehteh> yes i ownt want to forget or ditch C and learning it to be at least able to read it is important
[18:37:24] <quartz> cehteh: C is great for learning C++, which is still widely used and great for jobs
[18:37:34] <cehteh> but reading and creating an new application from scrath are worlds apart
[18:37:48] <quartz> C also helps you write very optimized code in terms of memory management and such.
[18:37:51] <floatcomplex> if you are writing rust and haven't taken the time to understand c as anything more than a strawman then you are contributing to the problem
[18:37:59] <cehteh> i gave up on C++ .. its a monster waaay to complex for what it offers
[18:38:31] <quartz> Well, regardless, C++ is still widely used in the industry
[18:38:41] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[18:38:50] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[18:38:55] <nomagno> C++ is... Well that is a good description. It offers way too many high-level features that don't help you make higher-level software
[18:39:04] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[18:39:06] <floatcomplex> and w/r python...simply understanding enough about c to know why the same algorithm is faster in c than in python, will help you write faster python code
[18:39:12] <cehteh> yeah, but i didlike it .. and i started in 1989 with C++ i think thats a good excuse to say i got my dose
[18:39:13] <quartz> nomagno: What features exactly?
[18:39:26] <De4nWhit3> I've had an interest to learn C since I was younger. I just never had the actual courage to do it yet. It is fascinating. It is somewhat different and somewhat familiar. Learning about 'alignment' was definitely new and exciting. 
[18:39:48] <floatcomplex> De4nWhit3: there is zero barrier to entry
[18:40:13] *** Joins: seninha (~seninha@user/seninha)
[18:40:17] <De4nWhit3> Thank you floatcomplex. That is encouraging. 
[18:40:26] <floatcomplex> De4nWhit3: behold https://godbolt.org/z/hs9151z5o
[18:40:37] <floatcomplex> you can simply type on the left and see results on the right, including compiler warnings
[18:41:24] <nomagno> Quartz: quite a few stdlib features (vectors, string handling, namespaces) don't seem to serve a clear purpose other than abstracting things for the sake of it
[18:41:30] <De4nWhit3> Thank you floatcomplex. I was trying visual studio but the lack of color coding in the free version made me a little nuts. I am using IntelliJ now because I have experience there. But not sure what the industry preferred ide would be - if there is one!
[18:41:32] <floatcomplex> De4nWhit3: adding -fsanitize=address,undefined to the arguments on the right side and replacing -Os with -g is probably not a bad idea
[18:41:56] <floatcomplex> De4nWhit3: what you use for an IDE ultimately matters less than whether you are using your c compiler properly
[18:42:00] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::3)
[18:42:07] <floatcomplex> meaning fully utilizing its diagnostic capabilities
[18:42:34] <floatcomplex> nomagno: yeah and that's not just a technical unnecessarity, it's a mindset problem
[18:42:38] <De4nWhit3> I am using gcc at the moment floatcomplex. My programs are incredibly simple still. Thank you very much for the link and the arguments.
[18:42:59] <floatcomplex> De4nWhit3: just make sure you are always using: "gcc -Wall -Wextra -Wshadow -g -fsanitize=address,undefined"
[18:43:02] <floatcomplex> when prototyping new code
[18:43:22] <floatcomplex> don't use gcc with no arguments, it only defaults to all-warnings-off in order to not break some 30-year-old configure scripts
[18:43:43] *** Quits: dmaroo (~dhruv@157.48.138.142) (Ping timeout: 268 seconds)
[18:43:49] *** Joins: slidercrank (~slidercra@user/slidercrank)
[18:43:50] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:44:45] <De4nWhit3> Thank you floatcomplex. I will have to learn more about the compiler as well for sure! This just riles me up and gets me more excited. Thank you very much!
[18:46:28] <floatcomplex> De4nWhit3: when you're ready, here's arrays: https://godbolt.org/z/Y5MvGs6qj
[18:47:09] <floatcomplex> for fun, change "< X" to "<= X" on line 25, and watch it tell you exactly what went wrong on the right side
[18:47:49] *** Joins: cassepipe (~cassepipe@35.54.14.81.rev.sfr.net)
[18:48:48] <De4nWhit3> Buffer overflow. Thank you. I have so far been using the book "Effective C" by Robert C. Seacord to learn. 
[18:51:08] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[18:51:50] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[18:54:04] *** Joins: Atque (~Atque@user/atque)
[18:54:25] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[18:55:54] <floatcomplex> cehteh: lack of rust understanding of c other than as a strawman is currently leading to a rather stunning display of idiocy regarding setenv()
[18:56:47] <cehteh> floatcomplex: huh what?
[18:56:48] *** Joins: Akuli (~Akuli@82-203-166-92.bb.dnainternet.fi)
[18:57:21] <cehteh> did you read my rants about rust's env var handling?
[18:57:39] <floatcomplex> no, but it sounds like we're on the same page
[18:57:58] *** Joins: cadmio (~cadmio@151.57.78.220)
[18:58:02] <cadmio> Hello
[18:58:04] <cehteh> prolly not, rust isnt just pedantic enough there
[18:58:06] <floatcomplex> i was continuing the line of thought about knowing how c works even if you are primarily writing other code
[18:58:17] <cehteh> but i idnt followed up if they come up with a plan to fix it
[18:58:42] <floatcomplex> cehteh: last i saw, they were still refusing to admit there was a problem that needed fixing 
[18:58:49] <floatcomplex> maybe that's changed
[18:58:59] <cehteh> about what?
[18:59:40] <cadmio> I don't know if you're a familiar with glib, but I need a way to pass to applyTags the proper character 'b' or 'i' https://paste.gnome.org/patrvob8x
[19:00:00] <cadmio> if the user has triggered ctrl-b or ctrl-i
[19:00:02] <cehteh> my discovery (or rather other peoples too) is that rust sees env vars as key/value pairs both of type OsString ... but that doesnt account for the fact that a key never must contain a '='
[19:00:07] *** Quits: cassepipe (~cassepipe@35.54.14.81.rev.sfr.net) (Read error: No route to host)
[19:00:15] <floatcomplex> cehteh: yeah we're talking about different things then
[19:00:17] *** Joins: cassepipe (~cassepipe@35.54.14.81.rev.sfr.net)
[19:00:24] <cehteh> which leads to interesting corner cases
[19:00:24] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[19:00:43] <floatcomplex> cehteh: to summarize (aiui) rust people believe setenv can simply be made safe via [insert rust stuff here], whereas c people are trying to convince them that there is no safe use of the CONCEPT of setenv() in a multithreaded program
[19:00:49] <floatcomplex> it's not simply c code that needs to be rewritten
[19:01:22] <cehteh> nah that was discussed as not safe in rust too to my knowlege but rust considers to introduce a mutex for that
[19:01:39] <floatcomplex> cehteh: yes but a mutex doesn't totally fix it, that's the problem
[19:01:41] <cehteh> while 'setenv' is kindof ugly to begin with
[19:01:58] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[19:02:12] <floatcomplex> there's no locking primitive that can fix it
[19:02:22] <cehteh> yeah but i am aware of thaat discussion i just think there is no conclusion yet how to handle it correctly
[19:02:23] *** Joins: AmR (~AmREiSa@156.199.244.83)
[19:02:49] <cehteh> yes but its rather leaky on C as well
[19:02:56] <floatcomplex> the way to handle it is by not handling it
[19:03:08] <floatcomplex> any use of setenv() in MT code is just not allowed
[19:03:17] <floatcomplex> there's no valid use of it
[19:03:19] <floatcomplex> mutexes or not
[19:03:21] <cehteh> iirc another discussion was to allow setenv only as long only a single thread exists .. which would be safe
[19:03:33] <nomagno> Which setenv are we talking about?
[19:03:38] <cehteh> see :)
[19:04:38] <cehteh> anyway i like the way rust eveolves because of such thing .. they never finalize things that are not bulletproof or if such a bug lept in then they take necessary measure to fix it, which may take some time
[19:05:04] <cehteh> i havent followed it past months, i was only involved with a related topic
[19:05:22] <cehteh> my patch on that other thing is still in the queue
[19:06:02] <nomagno> Are we talking about setenv() as in, set environment variables, or something else in the context of threads?
[19:06:15] <cehteh> the first
[19:06:28] <nomagno> How is that use of it unsafe?
[19:06:46] <cehteh> the whole **environ thing is a can of worms
[19:07:11] *** Joins: gabriele (~gabriele@user/gabriele)
[19:07:12] <cehteh> historicylly its just stored in a single block of memory delimited by = and \0
[19:07:38] <nomagno> Wait wait wait, where can I find the definitions of standard library functions?
[19:07:45] <nomagno> Doesn't seem to be in the proper standards
[19:07:47] <cehteh> name1=value1=still_value1\0name2=value2\0\0 
[19:08:20] *** Parts: cadmio (~cadmio@151.57.78.220) (WeeChat 3.0)
[19:08:30] <cehteh> iirc environ is posix and vendor extensions on other OSes not C standard
[19:08:54] <floatcomplex> cehteh: right, but that won't stop rust people for blaming C people when their mutex doesn't fix this :)
[19:08:55] <cehteh> windows handles them differently and permits/uses other character sets
[19:09:00] <nomagno> AAAh, POSIX
[19:09:12] <nomagno> Let me look this up on my trusty copy of the HTML site
[19:09:22] <cehteh> floatcomplex: iirc it was addressed and discussed in rust properly 
[19:09:30] <cehteh> just not fixed yet
[19:10:15] <nomagno> https://pubs.opengroup.org/onlinepubs/9699919799/functions/setenv.html
[19:10:15] <nomagno> This setenv?
[19:10:26] <cehteh> https://internals.rust-lang.org/t/pre-rfc-deprecate-env-set-var/2830
[19:10:27] <candide> Title of cehteh's link: Pre-RFC: deprecate env::set_var - libs - Rust Internals
[19:10:38] <floatcomplex> cehteh: does rust have a compile-time ability to know whether a line of code in a whole program is running in a single-threaded or multithreaded application?
[19:10:45] <cehteh> nomagno: yes
[19:10:59] <cehteh> floatcomplex: yes
[19:11:00] <nomagno> I don't see how this is memory unsafe
[19:11:58] <nomagno> AAAAH, it is not memory unsafe, it is just impossible to ensure you can set an environment variable before the chunk of code that needs it is ran
[19:12:26] *** Quits: cassepipe (~cassepipe@35.54.14.81.rev.sfr.net) (Read error: No route to host)
[19:12:27] <cehteh> its a can of worms in many ways
[19:12:40] *** Joins: cassepipe (~cassepipe@35.54.14.81.rev.sfr.net)
[19:12:55] <cehteh> and posix doesnt make it threadsafe either
[19:13:14] <floatcomplex> cehteh: how can it know that? doesn't that preclude, you know, writing libraries
[19:13:42] <nomagno> Looking at the definition, it doesn't seem to do anything weird
[19:14:04] <nomagno> you can have your own function that sets a value other pieces of code depend on. If you call it asynchronously, it will be just as bad
[19:14:22] <cehteh> floatcomplex: when things are properly typed then it can enforce that something doesnt leave a thread (Send trait)
[19:14:56] <cehteh> so actually it doesnt care about if multiple threads run or not, but you can have only one instance and that instance cant leave the thread
[19:15:22] <cehteh> which basically ensure that no other thread can mess with it
[19:16:09] <nomagno> AAAAH
[19:16:10] <nomagno> https://pubs.opengroup.org/onlinepubs/9699919799/
[19:16:18] <cehteh> problem is ffi/C/legacy things which are usually 'unsafe' and dont comply with the rust semantics
[19:16:26] <nomagno> https://pubs.opengroup.org/onlinepubs/9699919799/functions/environ.html
[19:16:39] <cehteh> bbl
[19:17:03] <nomagno> This *environ[] thing is the bigger issue
[19:17:08] <nomagno> I see
[19:17:28] *** Quits: gabriele (~gabriele@user/gabriele) (Quit: Leaving)
[19:17:35] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[19:17:55] <floatcomplex> yeah it's really not possible to shove it into the rust worldview aiui. a mutex definitely doesn't get you there
[19:18:30] <quartz> Kinda a dumb question, but what jobs in the industry would require C? Only thing I can think of is linux kernel developer
[19:18:52] *** Quits: rgrinberg (~textual@190.113.111.74) (Ping timeout: 268 seconds)
[19:19:24] <topside> all kinds of embedded systems developers
[19:20:01] <topside> optimizing python with compiled C modules, etc
[19:20:57] <floatcomplex> quartz: as discussed last night, c99 and later is the only language i know of that can specifically achieve feature and performance parity with fortran 77 for high performance and/or low power numeric things
[19:21:30] <quartz> What are embedded systems?
[19:21:43] <floatcomplex> quartz: your phone
[19:22:21] <tk> There is still no replacement for C in many areas.
[19:22:28] <topside> typically dedicated computers/microprocessors designed to perform a specific function... cheap mans FPGA/ASIC
[19:22:30] *** Joins: bajaba (~cassepipe@35.54.14.81.rev.sfr.net)
[19:22:54] <floatcomplex> topside: if by cheap you mean responsiblr
[19:22:58] <topside> quartz, think of the flight computer on a drone
[19:23:10] <topside> floatcomplex, indeed :) just kidding
[19:23:24] <topside> quartz, or the mars rover flight computers
[19:23:51] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[19:24:00] <topside> do you have tons of extra power/compute? great use whatever high level language you want
[19:24:06] <floatcomplex> topside: fpga's are great for benchtop prototyping of new chips but they should really just be considered really fast emulators, and assumed to use the amount of battery power that implies
[19:24:25] <topside> do you have extremely limited power/computer/memory constraints? use lower level languages 
[19:24:52] <topside> floatcomplex, interesting to see FPGAs deployed as network cards these days :)
[19:25:34] *** Joins: superboot (~agentgasm@user/superboot)
[19:25:35] *** Quits: cassepipe (~cassepipe@35.54.14.81.rev.sfr.net) (Ping timeout: 264 seconds)
[19:27:19] *** Joins: magla (~gelignite@55d46190.access.ecotel.net)
[19:27:24] <floatcomplex> ugh
[19:27:25] <topside> full routing stacks built into an FPGA on a network card
[19:28:19] *** Joins: dmaroo (~dhruv@157.48.137.170)
[19:28:29] <floatcomplex> i'm currently doing in c+dma foolery on a commodity cortex-m chip that i'm only aware of having been done by fpga before, and my version is using a tiny fraction of the power, and took a lot less time to develop
[19:29:46] <topside> c+dma? assuming the dma is direct memory access
[19:29:50] <floatcomplex> yeah
[19:30:09] *** Quits: securethemews (~securethe@2001:470:69fc:105::9b6d) (Quit: You have been kicked for being idle)
[19:30:18] <floatcomplex> the dma subsystem on some cortex m chips is for all practical purposes turing complete and can implement repeating logic with the cpu being completely off
[19:30:25] <topside> oh, I thought c+dma was something different than just C + DMA lol sorry
[19:30:26] *** Joins: securethemews (~securethe@2001:470:69fc:105::9b6d)
[19:30:31] <floatcomplex> after configuring dma with c
[19:31:19] <quartz> topside: But why do high level languages use more computing power, memory and such.
[19:31:30] <nomagno> floatcomplex: phones are general purpose computers
[19:31:41] <floatcomplex> nomagno: with batteries
[19:31:46] <nomagno> https://en.wikipedia.org/wiki/Embedded_system
[19:31:48] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Read error: Connection reset by peer)
[19:32:00] *** Parts: securethemews (~securethe@2001:470:69fc:105::9b6d) ()
[19:32:02] *** Joins: mahmutov (~mahmutov@37.155.18.23)
[19:32:14] <nomagno> AKA embedded = computer made for very narrow and specific purpose
[19:32:21] <floatcomplex> quartz: primarily because they don't make the developer learn how to do manual memory management
[19:32:31] <nomagno> A landline phone is likely an embedded computer
[19:32:35] <topside> quartz, because they are abstracting more of the underlying complexities and typically require additional resources to "interpret" that high level language into low level architecture-specific instructions
[19:33:05] <floatcomplex> the value proposition of rust is that you can have all the performance of c without the gotchas of manual memory mgmt....at the expense of making most tasks harder in other ways
[19:33:50] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[19:35:01] <topside> nomagno, embedded systems can still be general purpose computing devices
[19:35:02] <nomagno> With compilers, you don't really notice the difference that much. However at some point you start seeing languages that will simply offer a standard library that does a lot of very high-level things, which just doesn't leave room for the translation to machine code to be all that efficient
[19:35:27] <nomagno> topside: They CAN be, but a smartphone is not an example of an embedded system
[19:35:33] <floatcomplex> pretty much any computer not plugged into mains power and with an operator sitting at it running a word processor or web browser, should be considered an embedded system
[19:36:14] <quartz> topside: What do you mean by "interpret"? C code gets "interpreted" or translated into machine code at compilation, right? How is that different than any other high level language like python.
[19:36:52] <nomagno> quartz: They probably mean 'interpreted at runtime', AKA just translate the code to instructions as it runs
[19:37:02] <nomagno> Which is what most python implementations do
[19:37:24] <topside> quartz, python is interpreted at runtime... another "runtime" executable reads and translates the program to machine code in real-time
[19:37:26] <nomagno> (There ARE a few experimental C compilers. They are neat but there just isn't enough demand for it to be useful)
[19:37:48] <nomagno> s/compilers/interpreters
[19:38:05] <topside> quartz, if you google compiled vs interpreted you'll find a few good articles on the differences
[19:38:21] <quartz> topside: But how is interpreting code any better than compiling it?
[19:38:26] <topside> the downside to compiled code is that it's not portable amongst different architectures
[19:38:46] *** Joins: luckyxxl (~luckyxxl@193.27.14.122)
[19:38:47] <quartz> topside: OK I'll look it up
[19:38:52] <nomagno> From a higher-level point of view, there is no difference between compiled and interpreted
[19:39:19] <topside> its slower to interpret, but you gain benefits because your high level language can be machine-independent and therefor run on any architecture that has a "runtime" for that language
[19:40:48] <quartz> topside: Like the Java VM?
[19:41:02] <nomagno> The basic difference is the state C code runs in most of the time (a binary) is not portable, and neither is the compiler. However, with an interpreter like CPython, the runtime already runs natively so the code IS the 'runnable form'
[19:41:05] <topside> Java/C#/.NET stuff is in a middle-tier where those languages are compiled into a machine independent "intermediate language" / bytecode which is then optimized when run on the target platform
[19:41:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:98b1:ebcb:2d91:63eb) (Quit: Leaving)
[19:41:23] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[19:41:57] <nomagno> In the end, compiled, bytecode/IR, and interpreted are just implementation details. But some languages are definitely more historically tied to one or the other
[19:42:01] <quartz> topside: But what do you mean by "machine-independent"? Like 32 bit vs 64 bit processors? 
[19:42:40] <topside> quartz, like x86 vs arm
[19:43:11] <topside> but yes, 32bit vs 64bit is another architecture difference that would result in different machine code
[19:43:36] *** Joins: luckyxxl_ (~luckyxxl@185.213.155.160)
[19:43:53] <nomagno> quartz: When you compile C code for Linux x64, it only runs on systems that understand Linux x64 binaries. Not on Linux ARM, not on Windows, not on bare metal. With an interpreted language, you have the interpreted already 'compiled', so the code YOU write mostly doesn't have to care about the platform, it is translated by the native executable
[19:44:30] <topside> *everything* ultimately has to get translated into CPU instructions, and each different CPU architecture and type support different instructions 
[19:44:31] <quartz> nomagno: Yeah that makes sense now. Thanks
[19:44:48] <nomagno> The practical difference is compiled code is faster, and interpreted code more versatile
[19:45:11] <nomagno> Nothing stops you from making an interpreter faster than GCC -O3, however!
[19:46:13] *** Quits: luckyxxl (~luckyxxl@193.27.14.122) (Ping timeout: 268 seconds)
[19:46:23] <nomagno> (Well yes, the fact you probably need a 1TB pre-calculated table of common optimizations)
[19:46:41] <topside> yea interpreted is always going to give up *something* for the benefits it provides
[19:46:55] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[19:47:01] <topside> there are always tradeoffs
[19:48:37] <quartz> So basically, if you have interpreted code, it can run on any system, so long as you have that code's runtime, such as python.
[19:48:49] <topside> correct
[19:48:51] <quartz> With C, you have to compile it and make sure it works on every system.
[19:48:58] <nomagno> Storage, time, power
[19:49:02] <nomagno> Pick two
[19:49:11] <topside> not only make sure it works on every system, but you have to distribute a different binary to each type of system
[19:49:47] *** Joins: aradesh (~aradesh@user/aradesh)
[19:49:55] <topside> So you'll typically cross-compile for arm, x86, x86-64, etc and distribute different packages for each platform
[19:50:42] <quartz> arm is the processor used for smart phones?
[19:51:00] <topside> typically, yes
[19:51:17] <topside> also used on all new Apple Macs
[19:51:36] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[19:51:38] <topside> but historically, intel has not optimized x86 for low power (<25W) use cases
[19:51:39] *** Quits: aradesh (~aradesh@user/aradesh) (Client Quit)
[19:52:07] <nomagno> The most similar way of distributing 'compiled' software is source code*
[19:52:09] <topside> ARM has focused heavily on that market, so the vast vast majority of low power computing devices are based on ARM
[19:52:23] <nomagno> It's just not as practica
[19:52:54] <nomagno> quartz: Architecture
[19:53:18] *** Parts: rlv (~user@2a02:a03f:8bd6:bc00:5ae4:c060:7d3d:bd93) (ERC (IRC client for Emacs 27.2))
[19:53:39] <nomagno> Will be replaced with RISC-V SoonTM
[19:53:40] <nomagno> (Before I die from old age, hopefully!)
[19:53:40] <quartz> nomagno: So, apple decided to make their own processors for their computers and phones, how is that better from buying chips from intel?
[19:53:49] <topside> quartz, ARM doesn't actually make any processors themselves :P they just license parts of the architecture for others to use and build their own ARM-based CPUs
[19:54:08] <topside> quartz, Intel couldnt deliver the performance per watt that Apple demanded
[19:54:14] <Klinda> what is the safe way to do strlen(pointer) + 1 without getting a "integer" overflow?
[19:54:48] <quartz> topside: Seriously? It's Intel, like how long have they been making processors
[19:54:59] <nomagno> Interesting thing is that, trough force of raw overengineering, ARM is just... better than Intel archs now
[19:55:09] <topside> quartz, when you get complacent you focus more on sales/marketing than engineering
[19:55:17] <DPA> Klinda: That's already safe.
[19:55:51] <nomagno> It has a better power-performance ratio, which means it might be a regression for the server/PC market... but not really that much
[19:56:05] <Klinda> DPA: what if I define there a string with a value that max represent it, and do +1 afterwards?
[19:56:18] <Klinda> *with a len*
[19:56:28] <nomagno> ARM is in the process of being acquired by Nvidia*
[19:56:29] <nomagno> So that's fun
[19:56:29] <Klinda> ahh sorry... wait let me reformualte
[19:56:59] <quartz> nomagno: Makes more sense of Intel aquired ARM
[19:57:09] <DPA> Because strlen returns a size_t, that covers any amount of memory you can allocate. So you just can't store a string that big in memory.
[19:57:28] <DPA> Physically.
[19:58:03] <nomagno> quartz: All processors they have ever made have been oriented at either reasonably bulky laptops, huge-battery laptops, or static servers/desktop
[19:58:44] <nomagno> Not a surprise an intel i9 has a power requirement equivalent to that of the entire country of Norway
[19:59:10] <quartz> lol
[19:59:19] <cehteh> remember pentium 4? :)
[19:59:37] <Klinda> DPA: I mean I see that there are a maxmium and a minium store for an int for example: 2.147.483.647 +1  becomes ?2.147.483.648
[19:59:56] <quartz> I'm assuming AMD is not any better in terms of power usage?
[20:00:21] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[20:00:26] <nomagno> quartz: I mean, if you want Intel to become THE monopoly, you should ask them why they didn't do it, not me :P
[20:01:16] <nomagno> Nvidia just got onto the CPU train, which makes the three participants of the Big Silicon Oligopoly have both GPU and CPU leveraging power
[20:01:31] <nomagno> Intel, AMD and Nvidia
[20:01:34] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[20:02:00] <topside> quartz, no for the most part, all x86 CPUs have poor power/heating specs
[20:02:08] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[20:02:15] *** Quits: luckyxxl_ (~luckyxxl@185.213.155.160) (Ping timeout: 268 seconds)
[20:02:23] <nomagno> quartz: Oh it is, mostly, if you don't compare a thread-ripper to an Intel CPU
[20:02:37] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[20:03:01] <nomagno> ^
[20:03:03] <topside> and honestly, its mostly just historical.... x86 apps and OSs haven't leveraged sleep states as much as ARM apps and OSs have been, and I wonder how much that accounts for ARM's efficiencies 
[20:03:05] <nomagno> It is better, just by negligible amounts
[20:03:32] <quartz> The linux kernel supports ARM? How long until ARM becomes standard in PCs?
[20:03:53] *** Joins: luckyxxl_ (~luckyxxl@185.209.196.177)
[20:04:01] <topside> linux kernel has always supported just about any CPU architecture
[20:04:27] <nomagno> quartz: It will never become standard in PCs. You have perfectly usable desktop devices that run on it. Linux supports it, some Chromebooks run on it, all phones run on it, Raspberry Pi runs on it...
[20:04:47] <nomagno> Windows also has an ARM version now
[20:04:58] <topside> being open source, if someone had a random CPU architecture, they simply wrote their own kernel patch, recompiled and boom, Linux now supports XYZ architecture
[20:05:35] *** Quits: noahmg123 (sid89117@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[20:05:35] <quartz> topside: That sounds really hard to do
[20:05:55] <topside> it's easier than it seems
[20:06:01] <nomagno> Meh, FreeBSD has a better architecture support track record
[20:06:24] <topside> you just create your own standard c library, and translate low level C functions into assembly for that CPU
[20:06:34] <nomagno> (Still fairly hard)
[20:06:38] *** Joins: noahmg123 (sid89117@id-89117.ilkley.irccloud.com)
[20:06:44] *** Joins: Sadale (~Sadale@user/sadale)
[20:06:56] <topside> the kernel itself is written mostly in C, so you just have to build the few C functions that the kernel uses
[20:07:07] <nomagno> Porting something like musl over is not an insane undertaking for a single person part-time
[20:07:07] *** Quits: cornett_ (~ben@149.28.239.26) (Ping timeout: 244 seconds)
[20:07:21] *** Parts: razor[m] (~razormone@2001:470:69fc:105::f048) ()
[20:08:08] *** Joins: cornett_ (~ben@149.28.239.26)
[20:08:09] <nomagno> Some more complex possible components require a bit more interest, however
[20:08:15] <nomagno> Still can be perfectly done by a few interested users
[20:08:15] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: nyaa~)
[20:08:23] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[20:08:43] <nomagno> Then you just gotta start porting software over!
[20:08:52] <topside> yea these days its a bit more cumbersome, but if you have a simple kernel that doesn't use too much of the standard C library, it can be a fun exercise
[20:09:00] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[20:09:21] *** Quits: [R] (~rs@genoce.org) (Quit: No Ping reply in 180 seconds.)
[20:09:27] *** Joins: [R] (~rs@genoce.org)
[20:09:56] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[20:10:32] <topside> now creating a C compiler for a new architecture....
[20:10:50] <topside> i haven't done that so can't say how much more difficult that would be :)
[20:11:16] *** Quits: esselfe (~steph@user/esselfe) (Ping timeout: 244 seconds)
[20:11:16] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 244 seconds)
[20:11:57] *** Quits: cartman (~i.am@191.32.92.1) (Remote host closed the connection)
[20:12:05] *** Joins: johnnyreb (~tth@user/johnnyreb)
[20:12:16] <nomagno> topside: I would guess it is more simple than it sounds
[20:12:20] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[20:12:42] <nomagno> As in, you only need two instructions to be Turing complete. Optimization is the hard part
[20:12:48] <Klinda> if you define a string that has the same len as the maximum "type integer/short etc" representable and you then allocate the +1 (termination string), you have always a bad behaviour, how can you fix that?
[20:13:14] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[20:14:07] *** Quits: stzsch|2 (~stzsch@187.44.81.18) (Read error: Connection reset by peer)
[20:15:10] <nomagno> Klinda: You are talking about overflow. If you really want to avoid overflow because your code runs indefinitely increasing a variable or whatever, you need to check for the integer max size (if you want to be portable, this would be the 16 bit unsigned max representable number, çor 65535)
[20:15:23] <nomagno> For chars, this is 255, I think.
[20:15:55] <nomagno> (Again, mostly. If you need to run your code on a system with 7-bit bytes, you figure that out)
[20:16:15] <Klinda> the strlen function what type of "number" return ?
[20:16:40] <nomagno> https://en.cppreference.com/w/c/types/limits
[20:16:51] <nomagno> This header has constants to help with this ^
[20:17:02] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[20:17:21] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[20:17:32] <nomagno> Klinda: It returns a size_t
[20:17:37] *** Joins: Sadale (~Sadale@user/sadale)
[20:18:06] *** Joins: Inline (~Inline@2a02:908:1252:7a80:98b1:ebcb:2d91:63eb)
[20:18:24] <Klinda> so should I check if the strlen( ) is lesser than 18446744073709551615 ?
[20:18:27] <nomagno> in limits.h, its maximum value is the constant/preprocessor substitution "SIZE_MAX"
[20:19:38] <DPA> But there is no way to make a string that's SIZE_MAX long. Even if you could somehow allocate all memory, where would you put the null byte to make it overflow SIZE_MAX?
[20:20:17] <nomagno> WAIT WAIT WAIT, are you trying to avoid overflow on the strlen() return value, the string length, or the individual character?
[20:20:32] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[20:20:52] <nomagno> You can NOT make a string become a NULL terminator by having it overflow. That is not how they are stored
[20:21:54] <Klinda> https://dpaste.org/WEGt that's the function I am talking about, I am just wondering what happens if someone put a string that long and do +1
[20:22:34] <supakeen> 404.
[20:23:04] *** Quits: luckyxxl_ (~luckyxxl@185.209.196.177) (Ping timeout: 252 seconds)
[20:23:33] <nomagno> If you want to avoid an overflow on the pointer, uh... just be careful. If you want to avoid an overflow on the char, check it doesn't go above CHAR_MAX
[20:23:37] <Klinda> https://dpaste.org/2u7T
[20:24:23] <Klinda> nomagno: well I think in general this function is not safe 
[20:24:38] *** Joins: Sadale (~Sadale@user/sadale)
[20:24:59] <Klinda> what if I pass an array of char for example? (not terminanted) ?
[20:25:26] <Klinda> you can try to fix with a "max size" for the str 
[20:25:41] <Klinda> but what if you put an invalid max_size etc?
[20:25:42] <nomagno> Klinda: I seriously doubt this function actually triggers any UB
[20:25:57] <Klinda> what is ub?
[20:27:18] <nomagno> Undefined Behaviour. You are basically either mallocing a valid amount of memory, or overflowing and mallocing a valid amount of memory. By trying to access the furthest character of that cursed 'VLA', you can only possibly end up with a valid position
[20:28:02] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[20:28:24] <nomagno> The only thing that could trigger a segfault or a weird access is not error checking the malloc
[20:28:38] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:28:46] <nomagno>   if (strlen(src) < 18446744073709551615)
[20:28:51] <nomagno> you are checking if it is LESS
[20:29:07] <Klinda> and it's good or no?
[20:29:11] <Klinda> to avoid interger overflow
[20:29:13] <nomagno> you can not overflow. Assuming the system has the upper limits you expecty, of course
[20:29:43] <Klinda> you said that size t has that limit
[20:29:43] <nomagno> Klinda: Unless I am mistaken, it TECHNICALLY works
[20:29:45] <Klinda> no?
[20:30:08] <nomagno> Klinda: Yes.
[20:30:21] <nomagno> If you want to avoid integer overflow, check against limits.h CONSTANTS
[20:30:48] <nomagno> and try something more... practical than testing if the runtime is feeling permissive today
[20:31:04] <Klinda> but in the end in general this function is not safe
[20:31:09] *** Joins: Sadale (~Sadale@user/sadale)
[20:31:13] <Klinda> cause you can put an array of chars without termination
[20:31:15] *** Joins: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net)
[20:31:17] <Klinda> and you have UB
[20:32:44] <Klinda> you would go in a buffer over-read overflow 
[20:34:01] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[20:34:08] *** Joins: henistein (~henistein@2001:8a0:fd33:b801:17be:ce72:ef03:e767)
[20:34:36] <DPA> Either you have a valid c string, or you don't. If you don't, than wherever that happens is the mistake. Any system will misbehave if the data structures are filled out wrong.
[20:35:23] *** Joins: dohtem_ (uid524096@user/dohtem)
[20:35:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:35:51] *** Joins: agander_m_ (sid407952@id-407952.tinside.irccloud.com)
[20:35:51] *** Joins: haniaF_ (~haniaF@79.191.104.229.ipv4.supernova.orange.pl)
[20:36:07] *** Joins: ethrl_ (uid524335@user/doforlove33)
[20:36:15] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Ping timeout: 258 seconds)
[20:36:54] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:37:21] *** Joins: g2anj_ (~v@58.227.244.56)
[20:37:22] *** Joins: busybusybusy (~BUSY@user/busy)
[20:37:26] *** Joins: gl___ (~x@pwn.lu)
[20:38:06] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[20:38:37] *** Joins: madder_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[20:38:48] *** Joins: motherfs1 (~motherfsc@user/motherfsck)
[20:38:51] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Remote host closed the connection)
[20:39:05] *** Joins: lenni1 (~lenni@user/lenni)
[20:39:59] <Klinda> yes DPA is really hard for that
[20:40:15] <Klinda> or that's what I am learning on studying it
[20:40:59] *** Joins: Ekho- (~Ekho@user/ekho)
[20:41:27] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[20:41:53] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[20:42:54] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[20:43:19] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (*.net *.split)
[20:43:19] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[20:43:19] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[20:43:19] *** Quits: lenni (~lenni@user/lenni) (*.net *.split)
[20:43:19] *** Quits: gl (~x@pwn.lu) (*.net *.split)
[20:43:19] *** Quits: ethrl (uid524335@user/doforlove33) (*.net *.split)
[20:43:19] *** Quits: haniaF (~haniaF@79.191.104.229.ipv4.supernova.orange.pl) (*.net *.split)
[20:43:19] *** Quits: g2anj (~v@58.227.244.56) (*.net *.split)
[20:43:19] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[20:43:20] *** Quits: dohtem (uid524096@user/dohtem) (*.net *.split)
[20:43:20] *** Quits: agander_m (sid407952@tinside.irccloud.com) (*.net *.split)
[20:43:20] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[20:43:20] *** dohtem_ is now known as dohtem
[20:43:20] *** ethrl_ is now known as ethrl
[20:43:20] *** agander_m_ is now known as agander_m
[20:44:31] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[20:44:56] *** Joins: apotheon (~apotheon@copyfree/founder/apotheon)
[20:45:05] *** Joins: ckdCreations (~ckdCreati@147.55.130.38)
[20:47:25] *** Joins: cassepipe (~cassepipe@35.54.14.81.rev.sfr.net)
[20:49:11] *** Joins: mrig (~mrig@user/mrig)
[20:52:17] *** Joins: seninha_ (~seninha@user/seninha)
[20:53:41] *** Ekho- is now known as Ekho
[20:54:30] *** Joins: seninha__ (~seninha@user/seninha)
[20:54:39] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[20:55:04] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[20:55:56] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[20:56:55] *** Quits: seninha_ (~seninha@user/seninha) (Ping timeout: 268 seconds)
[20:57:44] *** Joins: esselfe (~steph@user/esselfe)
[21:00:54] *** Quits: seninha__ (~seninha@user/seninha) (Quit: Leaving)
[21:02:25] *** Joins: aradesh (~aradesh@user/aradesh)
[21:05:46] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Ping timeout: 258 seconds)
[21:06:37] *** Joins: seninha (~seninha@user/seninha)
[21:06:50] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[21:07:19] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:84fb:5024:2605:bd40) (Quit: Leaving)
[21:09:04] *** Joins: V-T60 (~v@91.203.24.166)
[21:10:11] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[21:10:29] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[21:11:46] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:b600:12c3:7bff:fe6d:d374)
[21:11:48] *** Quits: pizdets_ (~pizdets@183.182.114.48) (Ping timeout: 250 seconds)
[21:12:34] *** Joins: pizdets (~pizdets@183.182.111.153)
[21:13:41] *** Quits: Dreg- (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[21:13:46] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:13:51] *** Joins: Dreg (~Dreg@fr33project.org)
[21:15:29] *** Joins: Guest93 (~Guest93@174.138.39.154)
[21:16:25] <Guest93> Hello all.... PLease someone can help me with the book "Extreme c" ...?
[21:23:01] *** Joins: pulse (~pulse@user/pulse)
[21:23:44] *** Joins: Macuser (~Macuser@216.30.159.201)
[21:27:37] *** Quits: Guest93 (~Guest93@174.138.39.154) (Quit: Client closed)
[21:32:46] <omegatron> what exactly would be "extreme c" ?
[21:33:02] *** Quits: thing (~thing@user/thing) (Quit: thing)
[21:33:32] *** Joins: thing (~thing@user/thing)
[21:34:33] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[21:34:50] *** Quits: aradesh (~aradesh@user/aradesh) (Ping timeout: 260 seconds)
[21:37:55] <henistein> it is a book
[21:38:13] <omegatron> that much I know
[21:38:23] <henistein> he is probably looking for a pdf
[21:39:18] *** Quits: henistein (~henistein@2001:8a0:fd33:b801:17be:ce72:ef03:e767) (Quit: Client closed)
[21:41:00] *** Joins: NEYi (~NEYi@109.251.216.38)
[21:41:47] *** Quits: alch (~alch@ca-18-202-59.service.infuturo.it) (Ping timeout: 246 seconds)
[21:42:06] <Bou> implicit declaration of function ‘vmsplice’; did you mean ‘tmpfile’ ... YES, that was it, my fingers totally slipped!
[21:43:36] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[21:43:46] *** Joins: alch (~alch@151.82.144.114)
[21:43:50] *** Parts: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr) ()
[21:45:32] <DPA> The levenshtein distance is only 4. That's only half the characters changed. Seams reasonable.
[21:46:30] *** Joins: linexpert (~linexpert@104.248.118.188)
[21:48:56] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[21:50:06] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Remote host closed the connection)
[21:52:53] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[21:56:53] *** Quits: linexpert (~linexpert@104.248.118.188) (Quit: Client closed)
[21:57:42] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[21:58:03] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4-dev)
[21:58:30] *** Joins: strajder (~strajder@user/strajder)
[21:59:03] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[22:01:19] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[22:02:42] *** Joins: Darkcoal (~user@139.64.42.148)
[22:03:00] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[22:04:50] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[22:05:34] *** Quits: pizdets (~pizdets@183.182.111.153) (Ping timeout: 258 seconds)
[22:06:43] *** Joins: pizdets (~pizdets@183.182.115.153)
[22:08:01] *** Joins: rgrinberg (~textual@190.113.111.74)
[22:09:13] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Remote host closed the connection)
[22:12:10] *** Joins: critr (~critr@50-1-165-103.dsl.dynamic.fusionbroadband.com)
[22:14:29] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::3) (Ping timeout: 264 seconds)
[22:15:59] *** Quits: motherfs1 (~motherfsc@user/motherfsck) (Quit: quit)
[22:16:15] *** Quits: Darkcoal (~user@139.64.42.148) (Ping timeout: 260 seconds)
[22:18:11] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[22:19:50] *** Joins: x__ (~user@86.12.57.153)
[22:25:25] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[22:26:19] *** Joins: V-T60 (~v@91.203.24.166)
[22:26:39] *** Quits: V-T60 (~v@91.203.24.166) (Client Quit)
[22:28:03] *** Joins: Darkcoal (~user@2001:16a2:77f2:b600:d075:8fff:fe1c:bc32)
[22:29:32] *** Quits: slidercrank (~slidercra@user/slidercrank) (Remote host closed the connection)
[22:31:43] *** Joins: vicfred (~vicfred@user/vicfred)
[22:31:54] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[22:34:24] <floatcomplex> get a regular c pdf and soak it in some mountain dew and dorito crumbs
[22:35:43] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:35:55] *** Joins: Famine- (~Famine@user/famine)
[22:36:42] <apotheon> . . . and eat it?
[22:36:49] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[22:37:55] <floatcomplex> no, read it, and you will know extreme c
[22:39:11] *** Quits: Famine_ (~Famine@user/famine) (Ping timeout: 260 seconds)
[22:39:51] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:40:50] *** Joins: Crescendo (~Crescendo@user/crescendo)
[22:41:40] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:46:42] *** Joins: aradesh (~aradesh@user/aradesh)
[22:49:16] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:b5ea:9d67:614d:69e)
[22:51:15] *** Quits: Darkcoal (~user@2001:16a2:77f2:b600:d075:8fff:fe1c:bc32) (Ping timeout: 260 seconds)
[22:52:56] *** Joins: Darkcoal (~user@139.64.42.148)
[22:53:09] <apotheon> If you want it to be extreme, you should probably soak it in Rockstar or Monster instead of Mountain Dew.
[22:53:09] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[22:53:25] *** Joins: Crescendo (~Crescendo@user/crescendo)
[23:00:19] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Read error: Connection reset by peer)
[23:01:14] *** Joins: alextee (~alextee@zrythm/alex)
[23:03:37] <alextee> is it valid to print a pointer using "%p" to a string and then read that back to a pointer?
[23:04:17] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[23:05:14] <deadk> if you use scanf's %p to read it, and it came from the same run of the program as you're reading it into, yes
[23:05:21] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[23:05:26] <alextee> yeah assuming same process
[23:05:29] <alextee> thanks
[23:05:41] *** Joins: uquenar (~uquenar@wireless-acad-11.nat.emory.edu)
[23:05:46] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[23:06:59] *** Joins: Crescendo (~Crescendo@user/crescendo)
[23:07:11] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 246 seconds)
[23:08:12] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[23:08:22] *** uquenar is now known as uqlock
[23:09:15] *** kurahaupo is now known as tanewha
[23:12:00] *** Joins: CaCode_ (~CaCode@user/cacode)
[23:13:16] *** Quits: CaCode_ (~CaCode@user/cacode) (Remote host closed the connection)
[23:13:17] <Klinda> if you do  strlen(src) + 1 > strlen(src) you will know to know overflow the numbers?
[23:13:45] <Klinda> I mean you will not overflow
[23:13:47] <Klinda> the numbers?
[23:14:08] <DPA> strlen(src) + 1 > strlen(src) is always true.
[23:14:11] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 264 seconds)
[23:15:21] <Klinda> what if I retrun to 0 to this strlen(src) + 1 ?
[23:15:30] <Klinda> return*
[23:15:35] <Klinda> cause it will overflow?
[23:15:39] <Klinda> size_T 
[23:15:43] <Klinda> will return to 0
[23:16:31] <fizzie> `strlen(src) + 1` will only be 0 if `strlen(src)` is SIZE_MAX, which can only be the case if there's one more than SIZE_MAX bytes in the string, which is... uncommon, given that SIZE_MAX is kinda-sorta a maximum size for an object.
[23:17:07] <DPA> https://godbolt.org/
[23:17:15] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 258 seconds)
[23:17:21] <DPA> https://godbolt.org/z/YPeT1a3Gq
[23:17:42] <DPA> Note how it's optimized away.
[23:19:10] <Klinda> what do you mean?
[23:19:14] <Klinda> I don't see the main function
[23:19:17] <Klinda> how this is calld?
[23:19:50] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[23:20:15] <fizzie> https://godbolt.org/z/Pfb1Ea9da -- note how it's not ;)
[23:21:35] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[23:21:49] <DPA> Still, it could be optimized like that. clang just doesn't know about that.
[23:21:55] <Klinda> I don't know how to read the machine langauge
[23:22:42] <DPA> "mov eax, 1" "ret" basically means put 1 as the return value and return
[23:23:19] <DPA> So it's basically "int x(){ return 1; }"
[23:23:52] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[23:24:04] <Klinda> mm so there is no boolean value in C?
[23:24:19] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[23:25:04] <DPA> There is _Bool, or bool defined as _Bool in <stdbool.h>. But there was no need to use it here.
[23:25:38] <Klinda> so it stated that the condition is true, what parameter did you pass?
[23:26:26] <fizzie> Nobody called the function, and no parameter was passed. The point is, GCC thinks it's *always* true.
[23:26:33] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[23:26:34] *** Quits: dmaroo (~dhruv@157.48.137.170) (Quit: Konversation terminated!)
[23:27:46] *** Quits: pstef_ (~pstef@staticline16996.toya.net.pl) (Quit: leaving)
[23:27:54] <Klinda> it's not true only when you overflow, so you put a string contain a large number than size_max
[23:28:16] <Klinda> and that's what I want, no?
[23:28:16] <fizzie> On many implementations, you can't *have* a string with more bytes than SIZE_MAX in it.
[23:29:05] <Klinda> it could be a problem only in some case that you do stuffs with buffers
[23:29:06] <Klinda> why not?
[23:29:12] *** Joins: pstef (~pstef@staticline16996.toya.net.pl)
[23:29:23] <sham1> It's literally standard mandated
[23:29:24] <fizzie> Because there's no way you could get an object with more than SIZE_MAX bytes. `malloc` only takes a size_t parameter, and for declared objects, their size must fit in a `size_t` in order for sizeof to be able to return a result.
[23:29:26] <DPA> I don't think you can in any valid implementation. It's pretty much the point of size_t that it can hold the size of any memory region / object.
[23:29:32] <sham1> An object cannot exceed SIZE_MAX
[23:29:43] <fizzie> s/return/yield/, anyway.
[23:29:57] *** Quits: b1101 (~b1101@pool-100-37-115-53.nycmny.fios.verizon.net) (Quit: b1101)
[23:31:16] <Klinda> if ( len1+len2+1 <= sizeof(buf)) { strncpy(buf, s1,len2) strncat(buf, s2, len2) }
[23:31:35] <Klinda> len*1
[23:31:45] <Klinda> len1*
[23:32:00] <Klinda> this could be a problem 
[23:32:19] <Klinda> cause len1+len2+1 can overflow
[23:32:24] <Klinda> you can put anything in the buffer
[23:33:09] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[23:33:13] <fizzie> Sure, but that's quite a different scenario, you don't need to have impossibly long strings for `len1+len2+1` to wrap around.
[23:34:13] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:34:29] <Klinda> so how is possibile to fix it ? my solution doesn't work?
[23:36:23] <DPA> len1 < sizeof(buf) && len2 < sizeof(buf) - len1
[23:36:42] <DPA> Just one possibility
[23:38:22] *** Joins: rgrinberg (~textual@190.113.111.74)
[23:38:26] <DPA> Or check for the overflow. (len1+len2<len1 && len1+len2 < sizeof(buf)-1) (This is only defined for unsigned integer types such as size_t)
[23:39:35] <DPA> Note, adding SIZE_MAX + 123 is basically 123 - 1
[23:40:20] <DPA> (assuming size_t is smaller than int)
[23:40:32] <DPA> *bigger or the same size
[23:40:46] <DPA> btw. not smaller
[23:40:58] <DPA> ,cc SIZE_MAX + 123
[23:40:59] *** Parts: alextee (~alextee@zrythm/alex) (Leaving)
[23:41:00] <fizzie> Curiously enough, GCC seems to have a more strict notion of the maximum length of a string, and assumes strlen(s) is never even half SIZE_MAX. Observe: https://godbolt.org/z/rE4WecGxc
[23:41:02] <candide> DPA: Success (no output).
[23:41:10] <fizzie> I don't think *that* is strictly required by the standard -- certainly there's nothing theoretically impossible about strlen(s) of, say, SIZE_MAX-100. But of course the compiler's assumed to know more things about its target environment.
[23:41:19] <fizzie> s/assumed/allowed/
[23:41:33] <DPA> ,cc printf("%zu\n", SIZE_MAX + 123);
[23:41:36] <candide> DPA: 122
[23:42:14] <sham1> Wasn't there some kind of a limit where you couldn't have one object bigger than 2 GiB or something
[23:46:46] <Klinda> I find myself stupid, maybe you are more experienced than me
[23:46:48] <Klinda> :/
[23:46:59] <sham1> This is how you learn
[23:47:02] <fizzie> There's a lot of limits in practical implementations. Probably not *that* small on any self-respecting 64-bit system though.
[23:47:18] <sham1> Hmm, must have been for 32-bit stuff
[23:47:24] <sham1> If it was a thing at all
[23:47:25] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[23:47:27] <DPA> I think on linux, only 48bits of the address space are actually used.
[23:47:41] <DPA> On intel and arm.
[23:47:57] <sham1> Not just Linux, and only for user-space since you get a gnarly partitioning of the address space since you need to sign extend your addresses
[23:48:04] <fizzie> 48 or 57 is the x86-64 hardware limitation, and the upper half of that tends to be reserved.
[23:48:50] <fizzie> (48 "originally", 57 with the more recent Intel extension.)
[23:49:21] <sham1> And the higher half is often used by kernel code. Especially the last two GiB because then you can encode the accesses to static addresses with immidiates instead of having to do a 64-bit move every time you want to access something in the kernel static data
[23:51:00] <fizzie> The specific value where GCC draws the line is a little odd though: https://godbolt.org/z/WYG7rYx6s
[23:54:47] *** Quits: X-Scale (~ARM@46.50.5.8) (Ping timeout: 260 seconds)
[23:55:52] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[23:56:50] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[23:57:58] *** Joins: Atque (~Atque@user/atque)
[23:58:48] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you tomorrow)
[23:58:59] *** Quits: Darkcoal (~user@139.64.42.148) (Ping timeout: 260 seconds)
