[00:16:47] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[00:41:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:01:05] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[01:01:16] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[01:01:45] *** Quits: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[01:05:46] *** Quits: fendor_ (~fendor@178.115.49.60.wireless.dyn.drei.com) (Remote host closed the connection)
[01:15:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[01:30:40] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[01:30:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:37:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[01:38:09] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[01:41:00] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56)
[02:03:31] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[02:03:59] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[02:04:19] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Read error: Connection reset by peer)
[02:10:19] *** Joins: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com)
[02:12:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:17:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[02:18:20] *** Joins: vicfred (~vicfred@user/vicfred)
[02:22:04] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:27:56] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (Ping timeout: 265 seconds)
[02:57:25] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[02:57:54] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[04:14:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:47:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[04:51:30] *** Quits: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 260 seconds)
[05:05:09] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[06:44:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:09:13] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 258 seconds)
[07:18:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[07:44:43] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[07:59:32] *** Joins: monochrom (trebla@216.138.220.146)
[08:03:29] *** Joins: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl)
[09:10:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:13:02] *** Joins: Cajun (~Cajun@user/cajun)
[09:15:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[09:39:58] *** Joins: fendor (~fendor@91.141.32.154.wireless.dyn.drei.com)
[09:43:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:48:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[10:27:33] *** Inst_ is now known as Inst
[10:28:23] <Inst> @DigitalKiwi: Functional programming is a programming style that roughly means that your code is concerned with what things are, and leaves it to the compiler to determine how to do it given a set of constraints.
[10:28:23] <lambdabot> Unknown command, try @list
[10:29:13] <Inst> In practice, it means that your programs are made out of pure functions that avoid "side effects", or change the computer "state", which often makes coding challenging due to the need to keep track of state.
[10:29:56] <Inst> Programs must, of course, affect state, but functional means that state is usually changed only within a function, and that there are dedicated objects that change state for you.
[10:30:34] *** Joins: ski_ (~ski@remote12.chalmers.se)
[10:30:39] *** Joins: Rembane_ (~Rembane@li346-36.members.linode.com)
[10:39:03] *** Quits: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl) (Read error: Connection reset by peer)
[10:39:50] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: Rembane (~Rembane@li346-36.members.linode.com) (Ping timeout: 260 seconds)
[10:43:26] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[10:44:23] *** Joins: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl)
[11:01:17] <DigitalKiwi> i'm a dysfunctional programmer
[11:07:55] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[11:10:41] <dminuoso> DigitalKiwi: Functional programming is an imprecise and non defined term and means different things for different people.
[11:11:27] <dminuoso> Even worse, its one of those terms that people fling around in discussions, even though there's a large disparity in how each individual in such a discussion understands and interprets the term, but nobody ever goes as far as laying out some definition.
[11:12:33] <dminuoso> I might go as far as saying that its a pretty useless word.
[11:12:39] <dminuoso> Or term, rather.
[11:13:35] <DigitalKiwi> haskell lets me write functional bash (thanks shellcheck)
[11:14:02] <dminuoso> One of the commonalities between various peoples mentioning functional programming, seems to be that in "functional programming languages" functions themselves are first class values.
[11:14:42] <dminuoso> But that begs a lot of questions. In that sense alone, is ancient perl a functional programming language on the basis that you can pass a string around, that can be interpreted back to a function/routine?
[11:14:54] <dminuoso> (via eval)
[11:15:16] <DigitalKiwi> also <3 for entertaining the troll (me)
[11:17:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:27:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[11:47:29] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[11:47:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:08:46] *** Quits: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 260 seconds)
[12:10:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[12:12:25] *** Joins: kuribas (~user@ptr-25vy0i7zawtky0bq46n.18120a2.ip6.access.telenet.be)
[12:13:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:15:51] *** Joins: __monty__ (~toonn@user/toonn)
[12:19:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[12:28:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[12:32:31] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 252 seconds)
[12:46:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:50:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[13:01:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:06:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:30:09] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[14:34:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 264 seconds)
[14:50:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:44:18] <zincy> Has anyone had success with property based tests that do things like query a db or read files? 
[15:44:48] <kuribas> zincy: maybe you want to use hedgehog.
[15:44:49] <zincy> I'm not sure stuff like that is a good idea as I have mostly seen PBTs of the form "list length is involutive"
[15:45:09] <zincy> kuribas: Yeah, does Hedgehog have special support for IO stuff
[15:45:22] <kuribas> yeah, it's more suited to doing IO.
[15:45:25] <kuribas> or state machines.
[15:45:35] <kuribas> Though if possible, separate your logic from the DB handling part.
[15:46:14] <zincy> I guess are better to compose the non IO logic and then PBT that?
[15:46:39] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:46:44] <zincy> Perhaps this is an argument for IO and non-IO code should be separate
[15:46:45] <kuribas> yes
[15:46:53] <zincy> although people have disagreed with that in the past
[15:47:41] <kuribas> it depends on the usecase.
[15:47:55] <kuribas> If you generate queries, then doing IO tests will be easier.
[15:48:16] <hpc> you could maybe have your property tests generate query sets in a pure way
[15:48:19] <hpc> rather than by querying
[15:48:46] <zincy> By generate queries do you mean using an ORM like Beam instead of something like postgres-simple?
[15:48:56] <hpc> the sets
[15:49:09] <kuribas> zincy: yeah, but not Beam :)
[15:49:51] <kuribas> zincy: it was just an example.
[15:52:35] <zincy> Tbh I have to do this in Clojure
[15:52:38] <zincy> hence offtopic
[15:53:04] <zincy> I think I read that clojure spec gives you some leverage for writing PBTs?
[15:54:26] <kuribas> That's the same as generating samples from a haskell datatype.
[15:54:56] <kuribas> It will generate a generic sample, which may or may not fit your usecase.
[15:55:32] <kuribas> heh: "gen/bind" <= seems they use monads after all :)
[15:56:18] <zincy> haha
[15:57:00] <zincy> Dumb question but can you get monads in untyped languages?
[15:57:21] <zincy> Only if you build a quasi runtime type system?
[15:58:12] <riv> you dont need static types
[15:58:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[15:58:22] <kuribas> you can make monads everywhere, if you have some mechanism for generics.
[15:58:33] <riv> for example you can just write it manually bindlist instead of bind
[15:59:04] <kuribas> well, you do need lambda's
[15:59:14] <kuribas> So a monad in C will be difficult.
[15:59:29] <kuribas> riv: static types aren't necessary.
[15:59:48] <zincy> right and then for bindlist to be a monad how would it handle say receiving an integer instead of a list
[15:59:48] <riv> that's what i said :)
[16:05:21] <kuribas> zincy: in a dynamic language you could change monads, or use indexed monads instead.
[16:05:28] <kuribas> So it's more general.
[16:05:40] <kuribas> Which is what dynamic programmers like :)
[16:06:26] <kuribas> Or you could add a runtime check that the second bind uses the same monad.
[16:14:16] <zincy> not learned indexed monads yet
[16:14:19] <zincy> interesting
[16:14:44] <zincy> Can you index and indexed monad?
[16:14:46] <zincy> *an
[16:14:49] <zincy> *can
[16:14:51] <zincy> :D
[16:15:40] <dminuoso> zincy: An indexed monad is one where, over the progression of sequenced effects, the type can vary.
[16:15:59] <dminuoso> Say you go from `State Alpha` into `State Beta`
[16:20:21] <zincy> cool!
[16:21:10] <kuribas> in idris you can redefine (>>=) and "do notation".
[16:21:50] <kuribas> So you could use do notation with indexed monads.
[16:22:03] <kuribas> in haskell you can overload (>>=), but not do notation.
[16:22:29] <dminuoso> Couldn't you do the same with RebindableSyntax in GHC?
[16:23:07] <kuribas> dminuoso: I think so, yes.
[16:23:43] <kuribas> I never used it.
[16:24:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:31:35] <geekosaur> there's also the new thing that lets you overload do
[16:31:52] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[16:34:35] <geekosaur> QualifiedDo
[16:36:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 245 seconds)
[16:38:59] <kuribas> rebindableSyntax looks like a very big hammer.
[16:39:24] <geekosaur> it is a huge hammer
[17:51:41] *** Quits: sclv (sid39734@haskell/developer/sclv) (Ping timeout: 258 seconds)
[17:55:09] *** Joins: sclv (sid39734@haskell/developer/sclv)
[17:56:41] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[18:07:19] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:6134:7ceb:5f94:e843) (Remote host closed the connection)
[18:07:36] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:887d:efb8:1cec:d51f)
[18:13:55] *** Quits: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com) (Ping timeout: 258 seconds)
[18:16:04] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[18:18:08] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[18:59:09] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[19:11:33] *** Quits: emliunix (~emliunix@101.88.126.148) (Remote host closed the connection)
[19:15:03] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[19:16:15] *** Joins: emliunix (~emliunix@101.88.126.148)
[19:35:17] *** Joins: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[19:43:18] <zincy> I have heard that you shouldn't learn coq if you want to learn formal verification as you have to spend a lot of time focused on coq quirks.
[19:43:50] <zincy> With a resource like Software foundations available I can't see any better alternatives
[19:45:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[19:45:40] <__monty__> It depends a lot on what you're looking for. If it's for short-term practical application SMT solver-based and adjacent systems may be the better choice.
[19:46:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:47:45] <zincy> I'm looking to understand how to formalise denotational and operational semantics
[19:48:05] <zincy> For the broader purpose of just learning to think better about software
[19:48:52] <monochrom> I think Wadler has one that's targetted at semantics.
[19:49:49] <riv> it's true that you need to learn very specific quirks of coq
[19:49:55] <__monty__> Software Foundations actually sounds like a good resource for that.
[19:50:05] <riv> but i don't think it would be any different with another proof system
[19:50:22] <monochrom> This: https://plfa.inf.ed.ac.uk/
[19:51:29] <monochrom> I have a feeling that Software Foundation doesn't have as much denotational semantics as Wadler's.
[19:51:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[19:51:45] <monochrom> OTOH I now see Wadler's doesn't have operational semantics haha.
[19:51:53] <monochrom> You're toasted! You will need both.
[19:52:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:52:12] <__monty__> Agda's worth learning for the mixfix syntax alone : )
[19:52:23] <monochrom> Plus, Wadler's makes you learn Agda quirks. There is no way to win.
[19:53:04] <zincy> What about http://cs.brown.edu/courses/cs1951x/static_files/main.pdf
[19:54:50] <monochrom> w00t Lean. Maybe I should read that.
[19:54:57] <zincy> :D
[19:55:27] <zincy> Im trying to decide between this Lean book and software foundations 
[19:55:48] <monochrom> I don't want to learn Coq or Agda. I have higher hopes for Lean.
[19:56:05] <zincy> Yeah feels like a fun adventure tbh
[19:56:08] <monochrom> You know, I still think you will end up needing "all of the above".
[19:56:45] <monochrom> This is not as bad as it sounds. Whichever ones you read later you'll read much faster.
[19:56:51] <zincy> Yeah I'll probably work on the Lean book and fill in gaps from Software Foundations
[19:57:05] <zincy> Not sure if that will work or I will have to learn Coq 
[19:57:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[19:58:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:58:32] <monochrom> The other side is that Wadler is a kind of quality guarantee but I haven't heard of any of the authors of the hitchhiker's guide.
[19:59:13] <monochrom> Oh wait, Brown University? OK that's a quality guarantee too haha.
[20:00:05] <monochrom> Err nevermind, this case is someone at Brown chooses to use this textbook.
[20:02:33] <__monty__> The authors mostly sound Dutch. And afaik Lean is mostly developed in Utrecht? So I'd expect them to be authorities on the subject : )
[20:03:03] <janus> zincy: is that book for lean 3 or 4?
[20:03:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:03:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:04:03] *** Quits: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[20:04:26] <monochrom> Ah that's cool to know.
[20:05:23] <zincy> janus: Appears to be Lean 3.2
[20:05:58] <janus> ok, hopefully it will get updated at some point
[20:06:46] *** Quits: emliunix (~emliunix@101.88.126.148) (Remote host closed the connection)
[20:12:51] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[20:13:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:15:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:20:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:21:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:22:33] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[20:32:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:33:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:39:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:40:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:45:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:46:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:51:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:52:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:58:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:58:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:04:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[21:04:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:10:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:11:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:16:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:17:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:30:51] *** Joins: Cajun (~Cajun@user/cajun)
[21:36:42] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[21:43:46] <geekosaur> must be recruiting time. both google and facebook…
[21:44:03] <geekosaur> sadly my working days are very probably over :(
[21:45:08] <geekosaur> sorry, amazon and facebook
[21:47:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[22:05:16] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[22:06:06] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[22:17:24] *** Quits: kuribas (~user@ptr-25vy0i7zawtky0bq46n.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[22:25:49] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:57:46] *** Joins: iteratee (~kyle@162.218.222.107)
[22:59:12] <iteratee> Are there currently any Haskell or FP Conferences scheduled for in person in the US in the next year?
[23:09:42] <[exa]> let's expand that question to "anywhere", EU folks want their conferences too :D
[23:10:09] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[23:26:22] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[23:41:01] *** Quits: fendor (~fendor@91.141.32.154.wireless.dyn.drei.com) (Remote host closed the connection)
[23:43:47] *** ski_ is now known as ski
[23:57:54] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[23:58:21] *** Joins: hololeap (~hololeap@user/hololeap)
