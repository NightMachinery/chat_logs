[00:00:36] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 240 seconds)
[00:02:27] *** Quits: alx741 (~alx741@host-181-198-243-130.netlife.ec) (Ping timeout: 252 seconds)
[00:03:23] *** Joins: SignalGarden (~ash@user/SignalWalker)
[00:06:40] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[00:08:04] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[00:09:49] *** Joins: xkuru (xkuru@user/xkuru)
[00:10:06] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:11:39] *** Joins: x_kuru (~xkuru@user/xkuru)
[00:13:24] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[00:14:47] *** Joins: acidjnk (~acidjnk@p200300d0c7049f97891f007ae5e331f4.dip0.t-ipconnect.de)
[00:15:24] *** Quits: xkuru (xkuru@user/xkuru) (Ping timeout: 240 seconds)
[00:15:35] *** Joins: alx741 (~alx741@host-181-198-243-130.netlife.ec)
[00:18:22] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:18:38] *** Quits: Pacoco (Pacoco@191.176.33.103) ()
[00:21:05] *** Quits: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[00:21:07] *** Quits: kenran (~kenran@200116b82b1f7700d4eceb26990aed28.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[00:21:57] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:22:19] *** Joins: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1)
[00:22:47] *** Quits: tomsmeding (~tomsmedin@2a01:4f8:c0c:5e5e::2) (Quit: ZNC 1.8.2 - https://znc.in)
[00:23:26] *** Joins: tomsmeding (~tomsmedin@2a01:4f8:c0c:5e5e::2)
[00:25:05] *** Quits: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[00:31:46] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[00:33:04] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[00:33:11] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:33:40] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[00:34:20] *** Joins: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[00:36:09] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[00:37:01] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[00:38:24] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:41:29] *** Quits: unit73e (~ecouto@2001:818:e8dd:7c00:c536:427e:7cd6:2df4) (Ping timeout: 252 seconds)
[00:43:35] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[00:49:47] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[00:50:32] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[00:51:18] <dsal> Does anyone know generics well?  It seems a little steep to get started with.  I basically want to be able to extract named fields from a records.  My long goal is to copy from one record type to another with a few patterns in how fields are named, field types are converted, etc...
[00:52:28] <hololeap> does anyone have ideas how this could happen? Module ‘Build_doctests’ does not export ‘pkgs’ -- does cabal-doctest not always have the same functions available?
[00:55:02] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[00:56:16] *** pooryori1k is now known as pooryorick
[00:56:29] <hololeap> dsal: this does a good job of explaining it: https://markkarpov.com/tutorial/generics.html
[00:57:21] <hololeap> it also helps to look at the Rep of various types in ghci
[00:57:48] <dsal> Oh.  I think the second part is the thing that was most confusing for me.  :)
[00:59:03] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:00:06] <dsal> These aren't pretty to look at, but at least I can look at them now.  Thanks.
[01:00:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:01:03] <hololeap> % import GHC.Generics qualified as G
[01:01:03] <yahb> hololeap: 
[01:01:20] <hololeap> % G.from ((1,2) :: (Int,Int))
[01:01:20] <yahb> hololeap: M1 {unM1 = M1 {unM1 = M1 {unM1 = K1 {unK1 = 1}} :*: M1 {unM1 = K1 {unK1 = 2}}}}
[01:01:24] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[01:01:44] <hololeap> yeah, not pretty but that along with the tutorial should help you build up an intuition
[01:02:14] <hololeap> it's been too long since I last used generics for me to directly answer your question :)
[01:02:16] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[01:03:54] <dsal> That's fine.  I'll get somewhere...
[01:04:21] *** Joins: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[01:04:27] <dsal> The weird thing is that it doesn't seem to structurally match what I'd expect.  It's some kind of tree.
[01:05:06] <hololeap> % data Foo = Foo Int Int
[01:05:06] <yahb> hololeap: 
[01:05:13] <hololeap> % G.from (Foo 1 2)
[01:05:13] <yahb> hololeap: ; <interactive>:91:1: error:; * No instance for (G.Generic Foo) arising from a use of `G.from'; * In the expression: G.from (Foo 1 2); In an equation for `it': it = G.from (Foo 1 2)
[01:05:46] <hololeap> % deriving instance G.Generic Foo
[01:05:46] <yahb> hololeap: 
[01:05:49] <hololeap> % G.from (Foo 1 2)
[01:05:49] <yahb> hololeap: M1 {unM1 = M1 {unM1 = M1 {unM1 = K1 {unK1 = 1}} :*: M1 {unM1 = K1 {unK1 = 2}}}}
[01:06:14] <hololeap> see, the Reps of (1,2) and (Foo 1 2) are structurally the same
[01:06:48] *** Quits: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[01:07:43] *** Joins: xkuru (~xkuru@user/xkuru)
[01:07:57] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[01:08:52] <tomsmeding> dsal: re "some kind of tree": (Int,Int,Int,Int) would be represented as a binary tree with four leafs
[01:09:01] <tomsmeding> leaves?
[01:09:04] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.198)
[01:09:11] <geekosaur> the latter
[01:09:11] *** Joins: x_kuru (~xkuru@user/xkuru)
[01:09:21] <hololeap> levis
[01:09:30] <tomsmeding> blad.
[01:09:35] <geekosaur> (don'task me, I just speak it)
[01:09:50] <monochrom> Every autumn, leaves leave their trees. >:)
[01:11:10] <maerwald> what are binary trees? xD
[01:11:27] <tomsmeding> trees in which all internal nodes have exactly two children
[01:11:38] <tomsmeding> (inb4 what is an internal node)
[01:12:29] <dsal> tomsmeding: it's just a bit unexpected.  I don't make a record thinking of a tree, but generics sees it that way.  Better than inventing something new for another product type.
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:12:41] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[01:12:47] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[01:13:32] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[01:13:40] <tomsmeding> dsal: I agree, I guess it would have been nicer if it was some GADT indexed by a type-level list containing the fields or something
[01:13:49] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.198) (Ping timeout: 256 seconds)
[01:14:36] *** Joins: machinedgod (~machinedg@24.105.81.50)
[01:14:54] <monochrom> dsal: I wonder if my personal study notes help. I've uploaded them at https://www.vex.net/~trebla/tmp/generics-ghc/ . Start with 00-readme.md, then maybe explore what else I've got. I didn't complete it though, after a while I switched to learning something else.
[01:14:58] <tomsmeding> dsal: generics-sop also exists, never worked with it but read about it a little
[01:15:05] *** Joins: xkuru (~xkuru@user/xkuru)
[01:15:29] <dsal> I saw another that was eot
[01:16:09] <dsal> monochrom: thanks.  I've got a ton of boilerplate I'd like to boil off
[01:17:52] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:18:37] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[01:19:42] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:20:37] *** Joins: ski (~ski@remote12.chalmers.se)
[01:20:57] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[01:20:57] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:21:06] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:23:04] <dpratt> a friend of mine is attempting to compile a small bit of Haskell code I gave him on a Raspberry Pi (v3) and is encountering the following error: "selected processor does not support 'movwgt r3,#5' in ARM mode"; does anyone have a clue as to why this error might occur or even better, how to resolve it?
[01:24:01] <dpratt> fyi, the code uses the "numbers" package and that seems to be the ultimate source of the error
[01:24:37] <maerwald> dpratt: it could be that some primops don't work there
[01:24:41] <maerwald> which isn't that uncommon
[01:24:49] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:2015:9361:6306:3ac4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:26:10] <maerwald> but I don't see any
[01:28:06] <sm> dpratt: sounds like a good question for #ghc:libera.chat too
[01:29:31] <dpratt> maerwald: this appears to be the source code for that package https://github.com/jwiegley/numbers and though I don't really know what I'm looking for, I don't see anything "weird" going on -- I guess that's what you meant by "but I don't see any"?
[01:29:36] <dpratt> thanks sm
[01:30:34] <geekosaur> this sounds like either it chose the wrong sub-architecture or the RPi has asymmetric cores for some reason. I'd sooner believe the former
[01:31:11] <tomsmeding> I would be very surprised if a processor in a consumer-facing programmable product has cores with differing supported instruction sets
[01:32:14] <hpc> counter-argument, i am frequently very surprised
[01:32:52] <hpc> nothing says something is possible like it being possible, so maybe just double-check that too
[01:34:26] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:36:02] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[01:38:12] *** Joins: Guest86 (~Guest86@207.248.198.65)
[01:43:47] <geekosaur> 4xCortex-P53 so that's not it. looks like it supports both armv7 and armv8-a (aarch64)
[01:45:17] *** Quits: jao (~jao@45.134.142.225) (Ping timeout: 240 seconds)
[01:45:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[01:45:48] <hololeap> is there any way to view auto-generated modules? I can't figure out why cabal-doctest isn't exporting Build_doctests (pkgs)
[01:46:02] *** Quits: nexus (~nexus@87-97-13-18.pool.digikabel.hu) (Ping timeout: 240 seconds)
[01:47:32] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[01:48:01] *** Joins: nexus (~nexus@fibhost-66-208-135.fibernet.hu)
[01:48:43] *** Quits: michalz (~michalz@185.246.204.55) (Remote host closed the connection)
[01:48:47] <dminuoso> dsal: Did you read the haddock documentation on generics? I found it to be quite well to read
[01:49:06] <dminuoso> It explains the shape of generics and the meaning of all those constructors
[01:49:36] <tomsmeding> geekosaur: are you sure about -P53, not -A53?
[01:49:45] <hololeap> nvm, I found it inside dist-newstyle/
[01:50:07] <geekosaur> no, I'm not, actually. a53 probably right
[01:50:22] *** InstX1 is now known as Inst
[01:50:24] <geekosaur> (I can guess where "p53" came from though)
[01:50:49] <geekosaur> a53 it is from my browser history. sorry
[01:51:25] <dsal> dminuoso: Somewhat.  There's no particularly confusing thing.  It's just a bit too… generic, making the curve a bit steeper than they could be for other things.
[01:51:42] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:51:56] <dsal> Part of what makes it not "easy" is that records are kind of weird.
[01:53:14] <dminuoso> What part of it do you find weird?
[01:53:39] <[exa]> dsal: if you didn't read the SYB paper, I guess it's best to start there to gain some intuition
[01:54:28] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[01:56:27] <dsal> [exa]: I thought that was more about plated stuff.  I haven't looked in a while.
[01:56:48] *** Quits: fockerized (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 3.3)
[01:57:32] <dminuoso> dsal: If you, superficially, view ADTs as just `Int + (Char * String)`, you might recognize that this is representable as an ADT tree. Generics gives you exactly that representation
[01:57:46] <dsal> dminuoso: Mainly that it's a just a rather normal product type and not some kind of magic map of named fields.
[01:58:01] <dsal> Yeah, it's not exactly confusing, it's just not what I expected.
[01:58:59] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) ()
[02:01:42] <monochrom> My xkcd reference helps accepting "to unify all ADTs, let's define a few more ADTs to stand for all of the rest..." :)
[02:02:18] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:02:36] <dminuoso> dsal: I guess its just a natural consequence of representing the entire information at the type level
[02:02:57] <monochrom> But eventually it gets information overload because you also start using type-level strings to carry field names, for example.
[02:02:59] <tomsmeding> monochrom: not sure that's doing generics justice ;)
[02:04:00] *** Quits: SignalGarden (~ash@user/SignalWalker) (Ping timeout: 250 seconds)
[02:04:06] <dminuoso> dsal: By the way, viewing them as just sums and products is really neat in another way. You can then do things like true sums of products on deeply nested data types.
[02:04:15] <dminuoso> In a very simple fashion
[02:04:33] <monochrom> Every field can have: field name, strictness, {-# UNPACK-#}, type. So whatever you do to stand for a field, it's got 4 parameters.
[02:06:18] *** Joins: x_kuru (xkuru@user/xkuru)
[02:06:23] <dminuoso> dsal: Come to think of it... how would a "magic map of named fields" help really? How would that model sum types? Or a sum of products?
[02:07:12] *** Joins: x_kuru_ (xkuru@user/xkuru)
[02:08:25] <geekosaur> doesn't work if you access it "flat", anyway
[02:09:01] <monochrom> Dictionary from field position/name to field value can represent a product. DMap can do it in this context. But GHC.Generics was probably done long before DMap came about.
[02:09:42] *** Quits: Guest86 (~Guest86@207.248.198.65) (Quit: Client closed)
[02:09:54] <tomsmeding> though the dictionary form doesn't preserve order
[02:10:03] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[02:10:19] <dminuoso> At some point you have to encode that tree shape somewhere. :)
[02:10:20] <monochrom> (forall r. (Dictionary -> r) -> r) can do sums. But by this point you have lost your appetite. >:)
[02:10:32] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 240 seconds)
[02:10:42] <geekosaur> right, that's my point. you can still access a "record" as Constructor fld1 fld2 ...
[02:11:05] <tomsmeding> dminuoso: for 'Foo Int Char String Bool' there's no natural way to make that a tree, is I think the point -- it can be right-leaning, left-leaning, balanced
[02:11:07] *** Joins: xkuru (xkuru@user/xkuru)
[02:11:24] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[02:11:31] <dminuoso> tomsmeding: What is 'Foo Int Char String Bool' supposed to denote?
[02:11:32] *** Quits: x_kuru_ (xkuru@user/xkuru) (Ping timeout: 240 seconds)
[02:12:00] <tomsmeding> dminuoso: data Foo = Foo Int Char String Bool
[02:12:04] <tomsmeding> ooh that aligns
[02:12:25] <tomsmeding> is that (((Int, Char), String), Bool), or (Int, (Char, (String, Bool))), or something else?
[02:12:46] <dminuoso> Im not quite sure what it is that you're trying to say
[02:12:57] *** Joins: x_kuru (~xkuru@user/xkuru)
[02:13:23] <geekosaur> % data Foo = Foo Int Char String Bool deriving G.Generic
[02:13:23] <yahb> geekosaur: 
[02:13:33] *** Joins: jao (~jao@45.134.142.212)
[02:13:38] <tomsmeding> apparently, if I'm reading ghci's output right, GHC makes that (S1 Int :*: S1 Char) :*: (S1 String :*: S1 Bool), abbreviating the Rep data types somewhat
[02:13:47] <geekosaur> % G.from (Foo 1 'c' "s" False)
[02:13:47] <yahb> geekosaur: M1 {unM1 = M1 {unM1 = (M1 {unM1 = K1 {unK1 = 1}} :*: M1 {unM1 = K1 {unK1 = 'c'}}) :*: (M1 {unM1 = K1 {unK1 = "s"}} :*: M1 {unM1 = K1 {unK1 = False}})}}
[02:13:53] <dminuoso> Yes, generics will balance that tree if memory serves right
[02:14:03] <dminuoso> More or less.
[02:14:08] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[02:14:10] <tomsmeding> dminuoso: right, but the choice to balance is not at all apparent from the definition of Foo
[02:14:23] <dminuoso> tomsmeding: sure, but thats not really relevant
[02:14:28] <dminuoso> all these are isomorphic to one another
[02:14:37] <monochrom> The docs promise "don't count on the balancing you happen to receive".
[02:14:42] <dminuoso> The choice to balance is just to reduce complexity from linear to logarithmic to get to a particular field
[02:14:55] <dminuoso> But the representation is still completely isomorphic
[02:14:56] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:14:56] <tomsmeding> true, to some extent; I'm just contesting the point that there is a tree structure somewhere -- there is, but the natural tree structure is not necessarily a _binary_ tree
[02:15:04] <tomsmeding> though you can represent it with a binary tree very well of course
[02:15:09] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[02:15:26] <monochrom> Or at least, don't count on what happens to non powers of 2.
[02:15:35] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[02:16:04] <dminuoso> tomsmeding: If I wrote `1 + 2 + 3 + 4 + 5` there is a tree structure in there as well. Im really unsure what your point is
[02:16:27] <dminuoso> But
[02:16:29] *** Quits: xkuru (xkuru@user/xkuru) (Ping timeout: 256 seconds)
[02:16:34] <dminuoso> I guess an alternate way to represent data types would be lists of lists.
[02:16:46] <dminuoso> The outer list for constructors, the inner list for fields
[02:16:52] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:17:00] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[02:17:08] <dminuoso> So yeah, perhaps it is not completely obvious that they would be represented as an algebraic tree
[02:17:12] <tomsmeding> I would find that more natural (disregarding how those lists would be represented -- not sure if more complex GADTs is a good thing here)
[02:17:52] <monochrom> If you shove the following two facts under the rug: 1. the type-level list we have is a very biased kind of tree; 2. accessing elements in that list is currently very cumbersome.
[02:17:52] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[02:17:57] <dminuoso> tomsmeding: should I remind how lists are constructed? 
[02:18:01] *** Quits: jao (~jao@45.134.142.212) (Remote host closed the connection)
[02:18:03] <dminuoso> This would still be a tree in disguise.
[02:18:29] <tomsmeding> dminuoso: re `1 + 2 + 3 + 4 + 5`: in fact in an algebraic simplifier, it's usually better to represent that as a flat sum of 5 values, because that makes it easier to spot that you can simplify something in e.g. `1 + x + 2`
[02:18:59] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[02:19:04] <tomsmeding> dminuoso: a list is a tree that always leans right, i.e. there is no information in the shape of the tree
[02:19:17] <monochrom> In other words, currently, trying to actually use a type-level list exposes its tree-ness.
[02:19:17] <dminuoso> tomsmeding: a list of a list, which can contain lists of lists..
[02:19:21] <tomsmeding> the binary tree representation encodes _new_ information in the shape of the tree
[02:19:23] <dminuoso> tomsmeding: the tree is there.
[02:19:43] <tomsmeding> okay I give up :p
[02:19:45] <dminuoso> heh
[02:20:32] <dminuoso> tomsmeding: But I think I have an idea of what you're sayinig
[02:20:36] *** Joins: jao (~jao@45.134.142.199)
[02:20:43] <tomsmeding> less normal forms is good
[02:20:50] <dminuoso> A tree would indicate some particular stucture, whereas a flat list would not.
[02:20:55] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[02:21:01] <tomsmeding> (I mean, more stuff that has the same canonical form)
[02:21:05] <tomsmeding> yes
[02:21:08] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[02:21:09] <tomsmeding> it invents structure out of thin air
[02:22:01] <tomsmeding> which is not _wrong_, because you can map it back, but it makes the representations non-isomorphic: [a,b,c,d] maps both to (((a,b),c),d) and to (a,(b,(c,d)))
[02:22:13] <tomsmeding> (of course in generics the choice is fixed by the Generic instance)
[02:22:28] <dminuoso> To be absolutely fair, this is documented and explained at the beginning of generics
[02:22:34] <tomsmeding> yes of course
[02:22:52] <tomsmeding> (in a list-based representation, I would consider [a,b,[c,d]] invalid -- it must be [a,b,c,d]
[02:22:55] <tomsmeding> )
[02:23:10] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[02:23:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[02:23:40] <dminuoso> tomsmeding: well in a list-based representation you would still have `[Choice [a,b], Choice [c,d]]`
[02:23:44] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[02:23:55] <dminuoso> If we gloss over the made-up Choice newtype constructor, you're back to lists of lists.
[02:23:55] <monochrom> If there is a type level "map f xs", I would not mind this type-level list.
[02:23:56] <tomsmeding> which is not the same as [[a,b],[c,d]] :p
[02:24:21] <monochrom> At present, "handle Foo:*:Bar and let recursion do the rest" is way more convenient.
[02:24:34] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[02:24:39] <dminuoso> monochrom: Mmm, that would not change in a list based representation
[02:24:48] <dminuoso> You'd just do cons-style pattern matching instead
[02:24:55] *** Joins: hololeap (~hololeap@user/hololeap)
[02:24:59] *** Quits: acidjnk (~acidjnk@p200300d0c7049f97891f007ae5e331f4.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[02:26:05] <dminuoso> Arguably, decomposing lists is our bread and butter even!
[02:26:32] *** Quits: crazazy (~user@130.89.171.62) (Ping timeout: 250 seconds)
[02:27:50] <monochrom> Perhaps they chose binary trees for performance after all.
[02:28:36] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[02:31:52] *** Joins: n8chan (~nate@98.45.167.61)
[02:32:06] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-a0f7-4a6c-9396-dfff.res6.spectrum.com) (Remote host closed the connection)
[02:33:32] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Remote host closed the connection)
[02:33:34] <dons> moin moni
[02:33:42] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:35:19] <maerwald[m]> moinsen
[02:35:22] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[02:39:00] * ski 'd agree with tomsmeding that it'd be nicer to treat `1 + 2 + 3 + 4 + 5' as a "flat" structure (perhaps a quotient over different ways to associate the tree, if you prefer)
[02:39:40] <ski> (although i'm not sure what you mean by "algebraic simplifier")
[02:40:24] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[02:40:53] <ski> (there is such a thing as unification in a theory, e.g. unification modulo associativity)
[02:41:01] <ski> (for `[Choice [a,b],Choice [c,d]]', i guess one could maybe require the elements to be a subtype (refinement type ?) not including `Choice' on top-level, if one wanted to)
[02:46:16] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:47:32] *** Quits: n8chan (~nate@98.45.167.61) (Ping timeout: 240 seconds)
[02:50:24] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Read error: Connection reset by peer)
[02:50:28] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:50:34] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[02:50:47] *** Quits: iteratee (~kyle@162.218.222.107) (Read error: Connection reset by peer)
[02:50:57] *** Joins: iteratee (~kyle@162.218.222.107)
[02:54:27] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:57:05] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:5cb2:5682:6969:c42)
[03:01:22] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[03:03:47] <romesrf> o/
[03:06:32] *** Quits: jao (~jao@45.134.142.199) (Ping timeout: 240 seconds)
[03:08:45] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[03:10:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:10:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:10:51] *** Joins: wroathe (~wroathe@user/wroathe)
[03:12:51] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:17:06] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::45ee)
[03:18:15] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:18:33] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[03:27:02] *** Quits: CiaoSen (~Jura@p200300c957298b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:28:31] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[03:29:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[03:29:21] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[03:29:48] *** Joins: SignalGarden (~ash@user/SignalWalker)
[03:32:00] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:40:02] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[03:40:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[03:43:00] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[03:43:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:44:09] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[03:44:53] *** Quits: SignalGarden (~ash@user/SignalWalker) (Ping timeout: 256 seconds)
[03:46:28] *** Joins: SignalGarden (~ash@user/SignalWalker)
[03:48:29] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:5cb2:5682:6969:c42) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:53:55] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 268 seconds)
[03:55:06] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 252 seconds)
[03:56:41] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[03:57:14] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[04:03:15] *** Quits: nexus (~nexus@fibhost-66-208-135.fibernet.hu) (Ping timeout: 256 seconds)
[04:05:08] *** Joins: nexus (~nexus@77-234-80-245.pool.digikabel.hu)
[04:08:59] *** Quits: xff0x (~xff0x@dslb-094-222-029-254.094.222.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[04:13:08] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 250 seconds)
[04:24:01] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[04:24:45] *** Joins: dgpratt[m] (~dgprattma@2001:470:69fc:105::1:dcdd)
[04:25:11] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[04:25:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[04:25:37] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (Ping timeout: 240 seconds)
[04:27:03] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[04:30:32] *** Quits: SignalGarden (~ash@user/SignalWalker) (Ping timeout: 240 seconds)
[04:33:06] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[04:34:33] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:37:05] *** Joins: Batzy (~quassel@user/batzy)
[04:41:05] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:47:13] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:49:41] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[04:54:44] *** Quits: mmhat (~mmh@55d4baf8.access.ecotel.net) (Quit: WeeChat 3.4.1)
[04:59:27] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[05:08:36] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::45ee) (Ping timeout: 240 seconds)
[05:20:43] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[05:20:52] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[05:21:25] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Remote host closed the connection)
[05:21:48] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[05:26:19] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:26:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:27:04] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[05:31:48] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[05:34:59] *** Joins: SignalGarden (~ash@user/SignalWalker)
[05:39:23] *** Joins: vysn (~vysn@user/vysn)
[05:47:09] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:47:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:47:09] *** Joins: wroathe (~wroathe@user/wroathe)
[05:51:21] *** Joins: finley (~finley@uwyo-wireless-129-72-101-29.uwyo.edu)
[05:52:28] *** Quits: finley (~finley@uwyo-wireless-129-72-101-29.uwyo.edu) (Client Quit)
[05:56:06] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[05:56:30] *** Joins: dsrt^ (~dsrt@65.240.140.18)
[05:58:05] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:58:40] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[06:01:20] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:04:41] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[06:07:09] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[06:07:11] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Remote host closed the connection)
[06:07:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:09:01] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:09:01] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:09:01] *** Joins: wroathe (~wroathe@user/wroathe)
[06:12:31] *** Joins: ub (~Thunderbi@p200300ecdf19b776fd6bfc6fe6a8a410.dip0.t-ipconnect.de)
[06:13:08] *** Quits: ubert (~Thunderbi@p200300ecdf19b79d7171724430720c97.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:13:08] *** ub is now known as ubert
[06:13:42] *** Quits: nexus (~nexus@77-234-80-245.pool.digikabel.hu) (Ping timeout: 252 seconds)
[06:13:47] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[06:14:15] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[06:15:09] *** Joins: nexus (~nexus@80-95-70-249.pool.digikabel.hu)
[06:16:04] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[06:21:38] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[06:23:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:29:38] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 252 seconds)
[06:30:13] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:31:07] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[06:35:42] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[06:44:25] *** Joins: Guest3302 (~arc@2601:586:8100:bc30:f0b5:6a0f:f4ae:e63b)
[06:45:02] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 240 seconds)
[06:47:08] *** Joins: joo-_ (~joo-_@80-62-116-113-mobile.dk.customer.tdc.net)
[06:47:08] *** Quits: joo-_ (~joo-_@80-62-116-113-mobile.dk.customer.tdc.net) (Changing host)
[06:47:08] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[06:48:09] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[06:48:35] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 240 seconds)
[06:52:12] *** Joins: nunggu (~q@user/nunggu)
[06:55:43] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[07:05:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[07:11:49] *** Joins: mbuf (~Shakthi@122.162.78.73)
[07:14:47] *** Quits: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[07:16:13] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 240 seconds)
[07:16:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:20:25] *** Joins: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[07:21:31] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[07:21:45] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:25:19] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:25:19] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:25:19] *** Joins: wroathe (~wroathe@user/wroathe)
[07:28:28] *** Quits: nunggu (~q@user/nunggu) (Quit: nunggu)
[07:29:37] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[07:38:08] *** Joins: srk- (~sorki@user/srk)
[07:39:02] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[07:39:07] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Quit: Leaving)
[07:41:54] *** Quits: srk (~sorki@user/srk) (Ping timeout: 272 seconds)
[07:41:55] *** srk- is now known as srk
[07:47:01] *** Joins: lainon_ (~lainon@2601:7c0:c500:4d20::e723)
[07:55:30] <hololeap> why do internal libraries in .cabal require build-type: Simple
[07:59:48] *** Joins: k8yun (~k8yun@user/k8yun)
[08:06:02] *** Quits: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[08:09:17] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[08:14:32] *** Quits: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net) (Quit: Leaving)
[08:21:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:21:55] <zzz> how can i get ghci errors in vim's quickfix window?
[08:23:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:23:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:23:25] *** Joins: wroathe (~wroathe@user/wroathe)
[08:24:58] *** Joins: coot (~coot@213.134.190.95)
[08:25:15] *** Quits: SignalGarden (~ash@user/SignalWalker) (Ping timeout: 268 seconds)
[08:25:46] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 250 seconds)
[08:26:15] *** Quits: nexus (~nexus@80-95-70-249.pool.digikabel.hu) (Ping timeout: 252 seconds)
[08:28:10] *** Joins: nexus (~nexus@92-249-185-228.pool.digikabel.hu)
[08:28:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[08:30:08] *** Joins: deadmarshal_ (~deadmarsh@95.38.117.233)
[08:31:14] *** Quits: lainon_ (~lainon@2601:7c0:c500:4d20::e723) (Quit: Leaving)
[08:39:57] *** Quits: Guest3302 (~arc@2601:586:8100:bc30:f0b5:6a0f:f4ae:e63b) (Quit: Leaving)
[08:48:51] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[08:57:52] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:57:56] *** Quits: mbuf (~Shakthi@122.162.78.73) (Quit: Leaving)
[09:03:35] *** Quits: martin02 (~silas@141.84.69.76) (Read error: Connection reset by peer)
[09:08:06] *** Joins: razetime (~quassel@117.193.3.115)
[09:15:50] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[09:17:18] *** Joins: Guest|2 (~Guest|2@c-67-188-110-229.hsd1.ca.comcast.net)
[09:17:42] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[09:18:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:19:07] *** Joins: SignalGarden (~ash@user/SignalWalker)
[09:20:09] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 252 seconds)
[09:20:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:20:25] *** Joins: martin02 (~silas@141.84.69.76)
[09:20:35] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[09:21:47] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:26:26] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[09:35:47] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[09:37:57] *** Quits: Guest|2 (~Guest|2@c-67-188-110-229.hsd1.ca.comcast.net) (Quit: Connection closed)
[09:46:05] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[09:47:00] *** Joins: raym (~raym@user/raym)
[09:52:25] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[09:53:09] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 252 seconds)
[10:00:51] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[10:05:47] *** Joins: k8yun (~k8yun@user/k8yun)
[10:07:02] *** Quits: SignalGarden (~ash@user/SignalWalker) (Ping timeout: 240 seconds)
[10:07:23] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:09:10] *** Joins: tadyshev (uid547048@id-547048.hampstead.irccloud.com)
[10:11:06] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[10:12:24] *** Quits: raym (~raym@user/raym) (Ping timeout: 252 seconds)
[10:13:15] *** Joins: raym (~raym@user/raym)
[10:14:02] *** Quits: razetime (~quassel@117.193.3.115) (Ping timeout: 240 seconds)
[10:16:07] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[10:16:24] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[10:19:44] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[10:22:26] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[10:24:05] *** Joins: xkuru (~xkuru@user/xkuru)
[10:29:15] *** Joins: cyphase (~cyphase@user/cyphase)
[10:31:47] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[10:33:27] *** Quits: nexus (~nexus@92-249-185-228.pool.digikabel.hu) (Ping timeout: 256 seconds)
[10:34:35] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[10:34:54] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[10:35:07] *** Joins: nexus (~nexus@178-164-188-40.pool.digikabel.hu)
[10:35:51] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[10:37:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[10:38:55] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:44:18] *** Joins: mbuf (~Shakthi@122.174.182.104)
[10:44:26] *** Quits: timCF (~timCF@m91-129-108-222.cust.tele2.ee) (Ping timeout: 250 seconds)
[10:46:06] *** Joins: mmhat (~mmh@55d4b145.access.ecotel.net)
[10:53:32] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[10:55:46] *** Joins: acidjnk (~acidjnk@p200300d0c7049f8638d8ab684392b403.dip0.t-ipconnect.de)
[10:58:30] <jneira[m]> @zzz with hls: https://haskell-language-server.readthedocs.io/en/latest/configuration.html#vim-or-neovim
[10:58:30] <lambdabot> Unknown command, try @list
[10:59:14] <jneira[m]> or ghcid https://github.com/ndmitchell/ghcid
[11:01:17] *** Joins: arjun (~arjun@user/arjun)
[11:05:43] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[11:07:28] *** Joins: x_kuru (~xkuru@user/xkuru)
[11:08:12] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:09:51] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:10:02] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[11:12:20] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[11:12:53] *** Joins: xkuru (~xkuru@user/xkuru)
[11:13:57] *** Joins: x_kuru (~xkuru@user/xkuru)
[11:15:06] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[11:15:57] *** Quits: foul_owl (~kerry@23.82.193.89) (Ping timeout: 240 seconds)
[11:17:23] *** Joins: machinedgod (~machinedg@24.105.81.50)
[11:17:51] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[11:18:26] *** Joins: xkuru (~xkuru@user/xkuru)
[11:18:57] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[11:19:43] *** Joins: x_kuru (~xkuru@user/xkuru)
[11:20:23] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 268 seconds)
[11:20:55] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[11:22:12] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:23:02] *** Joins: michalz (~michalz@185.246.204.33)
[11:23:26] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[11:24:18] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[11:24:29] *** Joins: xkuru (~xkuru@user/xkuru)
[11:25:36] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[11:29:38] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 268 seconds)
[11:30:15] *** Joins: alp (~alp@user/alp)
[11:31:26] *** Joins: foul_owl (~kerry@23.82.193.89)
[11:38:18] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[11:41:03] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[11:50:33] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[11:58:12] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:00:54] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[12:01:21] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Client Quit)
[12:03:56] *** Joins: vpan (~0@212.117.1.172)
[12:05:44] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:11:13] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:d213:ffce:3318:8451)
[12:17:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[12:17:15] *** Joins: fendor (~fendor@91.141.73.245.wireless.dyn.drei.com)
[12:19:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:20:34] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[12:20:51] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[12:23:36] *** Joins: agumonkey (~user@88.163.231.79)
[12:25:44] *** Joins: chele (~chele@user/chele)
[12:26:19] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:28:31] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:30:12] *** Quits: jaror[m] (~jaror@2001:470:69fc:105::265) (Quit: You have been kicked for being idle)
[12:30:25] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 256 seconds)
[12:30:30] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[12:35:07] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[12:38:53] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[12:39:09] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[12:39:32] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[12:40:02] *** Quits: ubert (~Thunderbi@p200300ecdf19b776fd6bfc6fe6a8a410.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[12:40:21] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 245 seconds)
[12:41:15] *** Joins: ubert (~Thunderbi@p200300ecdf153925fd6bfc6fe6a8a410.dip0.t-ipconnect.de)
[12:42:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:43:01] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[12:45:20] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[12:46:20] *** Joins: rkrishnan (~user@2402:e280:215c:2cd:b1ea:752:e64f:92a)
[12:50:13] *** Quits: ubert (~Thunderbi@p200300ecdf153925fd6bfc6fe6a8a410.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[12:54:10] *** Joins: ubert (~Thunderbi@p200300ecdf15887dfd6bfc6fe6a8a410.dip0.t-ipconnect.de)
[12:55:07] *** Quits: Techcable (~Techcable@168.235.93.147) (Read error: Connection reset by peer)
[12:55:14] *** Joins: Techcable (~Techcable@168.235.93.147)
[12:58:58] *** Joins: unit73e (~ecouto@2001:818:e8dd:7c00:c04e:760a:547d:3f88)
[12:59:53] *** Quits: nexus (~nexus@178-164-188-40.pool.digikabel.hu) (Ping timeout: 256 seconds)
[13:01:25] *** Joins: nexus (~nexus@87-97-13-43.pool.digikabel.hu)
[13:04:55] *** Joins: __monty__ (~toonn@user/toonn)
[13:06:21] *** Joins: krappix (~krappix@nat-eduroam-76-gw-01-lne.lille.inria.fr)
[13:07:25] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[13:08:40] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[13:10:27] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:5cb2:5682:6969:c42)
[13:13:35] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[13:14:48] *** Joins: ccntrq (~Thunderbi@2a01:c22:845a:8600:4d3b:3bca:62a8:2aa9)
[13:15:00] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[13:15:32] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[13:15:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:15:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:15:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:16:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:16:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:16:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:16:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:16:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:17:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:17:19] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:17:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:17:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:17:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:18:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:18:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:18:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:18:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:18:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:18:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:19:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:19:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:19:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:19:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:19:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:19:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:20:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:20:21] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:20:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:20:42] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:20:55] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[13:20:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:21:05] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:21:19] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:21:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:21:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:21:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:22:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:22:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:22:12] *** ChanServ sets mode: +o litharge
[13:22:13] *** Joins: alp (~alp@user/alp)
[13:22:13] *** litharge sets mode: +b *!*@98.38.249.169
[13:22:24] *** litharge sets mode: -o litharge
[13:22:54] *** Quits: agumonkey (~user@88.163.231.79) (Remote host closed the connection)
[13:23:45] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[13:25:53] *** Joins: xkuru (~xkuru@user/xkuru)
[13:27:06] *** Quits: modnar (~modnar@shell.sonic.net) (Quit: No Ping reply in 180 seconds.)
[13:28:17] *** Joins: modnar (~modnar@shell.sonic.net)
[13:29:02] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[13:29:34] *** Joins: brandonh (brandonh@gateway/vpn/protonvpn/brandonh)
[13:37:58] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[13:40:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:43:27] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:43:40] *** Joins: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813)
[13:45:49] *** Quits: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813) (Read error: Connection reset by peer)
[13:46:05] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:47:04] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[13:47:50] *** Quits: ph88 (~ph88@89-220-184-245.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[13:48:56] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:49:44] *** Joins: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813)
[13:51:51] *** Quits: ccntrq (~Thunderbi@2a01:c22:845a:8600:4d3b:3bca:62a8:2aa9) (Ping timeout: 252 seconds)
[13:52:13] *** ChanServ sets mode: +o litharge
[13:52:14] *** litharge sets mode: -bo *!*@98.38.249.169 litharge
[13:54:13] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:57:06] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 260 seconds)
[13:57:35] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:57:48] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Ping timeout: 240 seconds)
[13:57:53] <ManofLetters[m]> type level programming question: why does it fail?... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/2e57cc6a6723ea893220755f9d252baec5c7cb2b)
[13:58:09] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[14:02:47] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:03:22] <merijn> ManofLetters[m]: 'x' is completely free, so the constraint is uncheckable
[14:03:35] *** Joins: ccntrq (~Thunderbi@2a01:c23:9554:dc00:dcb5:fa75:4fdf:3e14)
[14:04:35] *** Joins: coot (~coot@213.134.190.95)
[14:05:06] <ManofLetters[m]> that's fine, this is just a simplified example; the question is why, if I assume that for every `x`, it can't be deduced for just `0`
[14:06:21] <merijn> ManofLetters[m]: You can't "assume that it is for every X"
[14:06:52] <merijn> ManofLetters[m]: The constraint says "F x ~ Int", in the absent of a choice for 'x', GHC treats that as unsolvable (which it is)
[14:07:02] <merijn> s/absent/absence
[14:07:37] <merijn> ManofLetters[m]: Whether "F x" is equivalent to Int, depends on 'x'
[14:07:37] <ManofLetters[m]> oh, I see
[14:08:11] <merijn> You're trying to use it more as an assertion that "F x" is always Int, yeah?
[14:08:22] <ManofLetters[m]> yes
[14:08:24] <merijn> I'm not sure you can actually write that in GHC Haskell
[14:10:22] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-a161-049d-edaf-1b31.res6.spectrum.com)
[14:12:56] <ManofLetters[m]> the following works and may be OK for me: `f :: (F x ~ Int, x ~ 0) => F x -> Int`(in the real code `F x ~ Int` is a part of a much larger constraint that will be present there regardless)
[14:13:26] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[14:14:08] <[exa]> ManofLetters[m]: what's the greater purpose of that btw?
[14:14:51] <ManofLetters[m]> taking over the world
[14:15:18] <ManofLetters[m]> in smaller scale: I have a lot of functions that share the constraints that `F x ~ Int` is a part of
[14:15:32] <ManofLetters[m]> and the functions work on 0, 1, etc., various values of the x
[14:16:09] <ManofLetters[m]> and I'd like to express in the functions' signatures both what Nat they work on and that they share the big constraint
[14:16:15] <ManofLetters[m]> e.g., another function may be
[14:16:40] <ManofLetters[m]> `g :: (F x ~ Int, x ~ 5) => Double -> F x -> Int'
[14:17:07] <ManofLetters[m]> remember that `F x ~ Int` is something bigger and `Int` is much bigger and more variable, too
[14:17:10] <merijn> ManofLetters[m]: I mean, that's just writing "Double -> F 5 -> Int" with extra steps??
[14:17:28] <merijn> ah, no, I guess not
[14:17:36] <merijn> Since that doesn't force F5 ~ Int
[14:17:38] <ManofLetters[m]> `g :: (F x ~ Int, x ~ 5) => Double -> F 5 -> Int' is going to fail, right?
[14:18:00] <merijn> "g :: (F 5 ~ Int) => Double -> F 5 -> Int"
[14:18:19] <ManofLetters[m]> oh, yes, but I can't change the `F x ~ Int` part
[14:18:27] <ManofLetters[m]> it's part of a much larger constraint
[14:18:35] <ManofLetters[m]> hmm, unless I can apply it to 5
[14:18:37] <ManofLetters[m]> let me check...
[14:18:49] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[14:19:47] <[exa]> oh so this example is completely arbitrary, okay
[14:20:40] <ManofLetters[m]> yes, that may be optimal -- parameterize the big `F x ~ Int` constraint with x and do `g :: C 5 => Double -> F 5 -> Int', where `type C n = F n ~ Int`
[14:20:57] <ManofLetters[m]> s/,/`/
[14:21:40] <ManofLetters[m]> or g :: C x, x ~ 5 => Double -> F x -> Int' if x appears in many places and `5` is really a big type-level list
[14:21:56] <ManofLetters[m]>  * or `g :: C x, x ~ 5 => Double -> F x -> Int` if x appears in many places and `5` is really a big type-level list
[14:22:11] <ManofLetters[m]> thank you all
[14:23:08] <ManofLetters[m]> the real example is this, if that's interesting:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/15f0ee6e1cfa7305aff7dd8e462b7582c297c969)
[14:23:55] <ManofLetters[m]> though that doesn't yet incorporate the big constraint, parameterized by `n`; so it's still artificial
[14:24:33] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[14:24:33] <ManofLetters[m]> the new version will have `fromS0 :: IsScalarS '[] r => DualNumber (TensorS sh r) -> DualNumber r`
[14:24:58] <ManofLetters[m]> and... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/abbedf490561f8a2f02186e64a4ada6b32617e7e)
[14:25:12] <ManofLetters[m]> you shouldn't have asked :)
[14:26:39] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:26:52] <[exa]> do you have any way to constrain the `sh` in `Dual (TensorS sh r) ~ OS.Array sh (Dual r)` ?
[14:27:43] *** Joins: Midjak (~Midjak@82.66.147.146)
[14:28:45] <[exa]> (perhaps show it an unique `sh` that could be derivable from `r` and useful in this situation?)
[14:29:31] *** Joins: __monty__ (~toonn@user/toonn)
[14:29:37] <ManofLetters[m]> in this function `sh` is `'[]`, in other's is various other lists
[14:29:48] <ManofLetters[m]> BTW, the last example should have been `fromS0 :: IsScalarS '[] r => DualNumber (TensorS '[] r) -> DualNumber r`
[14:30:20] <ManofLetters[m]> or `fromS0 :: (IsScalarS '[] r, sh ~'[]) => DualNumber (TensorS sh r) -> DualNumber r`, equivalently, I guess
[14:30:31] <ManofLetters[m]> s/'[]/sh/
[14:30:37] <[exa]> ManofLetters[m]: in type signature of `fromS0`, how is it able to deduce that `sh ~ '[]` ?
[14:31:02] <ManofLetters[m]> which one, because I've amended it many times
[14:31:18] <ManofLetters[m]> the original one?
[14:31:29] <[exa]> the "the real example is this, if that's interesting" line
[14:31:34] <ManofLetters[m]> my naive idea was that "if it holds for sh, it also holds for '[]"
[14:31:53] <[exa]> ah yes, but you're saying there "if it holds for all sh"
[14:32:02] <[exa]> and there's no way to check that
[14:32:21] <ManofLetters[m]> sh being implicitly universally quantified, I thought, but merijn explained to me why it doesn't work
[14:32:41] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[14:32:51] *** Joins: ph88 (~ph88@89-220-184-245.cable.dynamic.v4.ziggo.nl)
[14:32:52] <ManofLetters[m]> I naively thought a constraint is an assumption
[14:32:58] <ManofLetters[m]> so you don't check that, you assume it
[14:33:09] <ManofLetters[m]> [exa]: have you seen the simplified example?
[14:33:31] <ManofLetters[m]> `f :: F x ~ Int => F 0 -> Int`
[14:34:06] <ManofLetters[m]> so F applied to anyting is Int, hence F applied to 0 is Int --- that's what I thought, but merijn explained that's not how it works, see that older discussion
[14:34:07] <[exa]> yes, that says the same. "If you manage to prove that (for all x) F x ~ Int, then you can use this function as `:: F 0 -> Int`
[14:34:45] <[exa]> yes :]
[14:35:07] <ManofLetters[m]> hah, what I thought was (forall x. F x ~ Int) => F 0
[14:35:13] <ManofLetters[m]> * F 0 ~ Int
[14:35:15] *** Quits: ccntrq (~Thunderbi@2a01:c23:9554:dc00:dcb5:fa75:4fdf:3e14) (Quit: ccntrq)
[14:35:27] *** Joins: ccntrq (~Thunderbi@dynamic-095-116-124-154.95.116.pool.telefonica.de)
[14:36:17] <ManofLetters[m]> so, `f :: (forall x. F x ~ Int) => F 0 -> Int` is equivalent to `f :: Int -> Int`
[14:36:26] <ManofLetters[m]> or something
[14:36:28] <[exa]> I was asking if you could derive some simple example of `sh` for the typechecker there so the problematic `forall x` could be solved/removed.
[14:37:04] <ManofLetters[m]> I don't follow
[14:37:15] <ManofLetters[m]> in the larger example the only sh I'm interested in is '[]
[14:37:21] *** Quits: krappix (~krappix@nat-eduroam-76-gw-01-lne.lille.inria.fr) (Ping timeout: 256 seconds)
[14:37:34] <ManofLetters[m]> in that particular function, in others it will be some other type-level list
[14:37:43] *** Quits: brandonh (brandonh@gateway/vpn/protonvpn/brandonh) (Quit: brandonh)
[14:38:17] <ManofLetters[m]> but I want to share the same big constraint that states the same thing for all sh, be it '[] or any other type level list
[14:38:36] <[exa]> ManofLetters[m]: the "is equivalent to" there holds mathematically but not in type systems (unless you apply some magic that I don't see there)
[14:38:45] <ManofLetters[m]> I think will work if I parameterize the constraint by sh and apply to '[], but I haven't type-checked yet
[14:39:24] <ManofLetters[m]> [exa]: yes, that's what merijn explained to me and I agreed, see above
[14:39:30] <[exa]> ah okay :]
[14:39:56] <[exa]> my notice with deriving `sh` was one possible workaround then :] 
[14:40:32] <ManofLetters[m]> right; thanks for the tip, I may come back for more if the last idea doesn't work :)
[14:40:52] <[exa]> ok, good luck, this looks pretty dense
[14:41:16] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:42:13] <[exa]> what's the "math" semantics of IsScalarS you have there btw? (when compared to IsScalar)
[14:42:18] <[exa]> (just curious)
[14:42:36] <ManofLetters[m]> yay, it worked, in this form: `type IsScalarS (sh :: [Nat]) r = (IsScalar r, Dual (TensorS sh r) ~ OS.Array sh (ScalarOf r))`
[14:42:45] *** Joins: razetime (~quassel@117.207.19.145)
[14:42:45] *** Joins: fef (~thedawn@user/thedawn)
[14:43:20] <ManofLetters[m]> `IsScalarS` is just an extension of `IsScalar` with an extra equality
[14:43:48] <[exa]> more like, what does the "S" stand for
[14:44:31] <ManofLetters[m]> the equality is that for any tensor shape, primal component of a dual number of a tensor of that shape is the same type as a tensor of that shape of scalars
[14:44:42] <ManofLetters[m]> S is for shaped tensors:
[14:45:06] *** Joins: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[14:45:13] <[exa]> ah cool
[14:45:29] <ManofLetters[m]> https://hackage.haskell.org/package/orthotope-0.1.2.0/docs/Data-Array-Shaped.html#t:Shape
[14:45:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[14:46:08] <[exa]> ah cool
[14:46:21] <[exa]> I guess you could fix it a bit more semantically also by just specifying `Shape sh`
[14:49:32] *** Quits: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[14:49:55] *** Joins: ccntrq1 (~Thunderbi@2a01:c23:9554:dc00:5ba8:8fe0:68a1:75cf)
[14:51:04] *** Joins: ubert1 (~Thunderbi@2a02:8109:9880:303c:8bc2:7df6:5938:d836)
[14:52:02] *** Quits: ccntrq (~Thunderbi@dynamic-095-116-124-154.95.116.pool.telefonica.de) (Ping timeout: 240 seconds)
[14:52:02] *** ccntrq1 is now known as ccntrq
[14:52:27] <ManofLetters[m]> why not; where exactly would I put that?
[14:55:57] *** Quits: phma (phma@2001:5b0:210f:7688:30ad:6c5c:35e4:9da) (Read error: Connection reset by peer)
[15:00:24] *** Quits: raym (~raym@user/raym) (Quit: rebooting...)
[15:01:43] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:01:54] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[15:02:51] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[15:03:22] *** Quits: razetime (~quassel@117.207.19.145) (Ping timeout: 260 seconds)
[15:03:56] *** Joins: razetime (~quassel@117.207.19.145)
[15:09:02] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[15:11:48] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:13:48] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[15:14:14] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[15:20:43] *** Joins: raym (~raym@user/raym)
[15:21:31] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 250 seconds)
[15:21:54] *** Joins: bahamas (~lucian@84.232.140.158)
[15:23:04] *** Quits: nexus (~nexus@87-97-13-43.pool.digikabel.hu) (Ping timeout: 250 seconds)
[15:23:39] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[15:24:40] *** Joins: nexus (~nexus@94-21-108-13.pool.digikabel.hu)
[15:26:27] *** Quits: razetime (~quassel@117.207.19.145) (Ping timeout: 252 seconds)
[15:29:14] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[15:31:08] *** Joins: mud (~mud@user/kadoban)
[15:35:01] *** Quits: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813) (Read error: Connection reset by peer)
[15:35:44] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[15:36:57] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[15:38:59] *** Joins: CiaoSen (~Jura@p200300c957298b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:41:20] *** Quits: agrosant (~agrosant@46.12.50.59.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[15:41:38] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:46:18] *** Quits: tchakka (~tchakkazu@static-47-180-28-65.lsan.ca.frontiernet.net) (Ping timeout: 260 seconds)
[15:46:26] *** Joins: tchakka (~tchakkazu@static-47-180-28-65.lsan.ca.frontiernet.net)
[15:46:46] *** Quits: acidjnk (~acidjnk@p200300d0c7049f8638d8ab684392b403.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[15:47:14] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[15:51:59] *** Joins: karim (~karim@41.34.205.183)
[15:55:08] <karim> Greetings all, I was searching for #haskell-gsoc channel on freenode, but couldn't find it, anyone knows how to find it?
[15:55:32] <[exa]> freenode still exists?
[15:55:58] <geekosaur> summer.haskell.org still says it'son freenode
[15:56:22] <[exa]> ah okay, so maybe it's now here on libera :]
[15:56:27] <geekosaur> the last person who asked, I pointed to the gsoc committeealong with a suggestion they tell the committee to update their contact page
[15:56:41] <karim> I searched for it here also, but it's not here.
[15:56:46] <geekosaur> in any case I think it's as yet too early for the channel to exist
[15:57:03] <[exa]> karim: anyway I'd say it's pretty safe to start asking here
[15:57:34] *** Joins: agrosant (~agrosant@79.103.7.27.dsl.dyn.forthnet.gr)
[15:58:13] <geekosaur> actually I wonder if committee@haskell.org is even a thing any more, or if it's been folded into the HF or something
[15:58:23] <geekosaur> we don't seem to be very organized at present
[15:58:30] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:03:21] *** Joins: winstonsmith_ (~winston@2a02:c98:1003:8000:ef6c:3d0:1746:a2f3)
[16:03:30] *** Quits: agrosant (~agrosant@79.103.7.27.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[16:04:38] *** Quits: bliminse (~bliminse@host86-156-84-211.range86-156.btcentralplus.com) (Quit: leaving)
[16:05:23] *** Quits: mmhat (~mmh@55d4b145.access.ecotel.net) (Quit: WeeChat 3.4.1)
[16:07:10] <maerwald> geekosaur: haskell.org is not folded into HF
[16:07:24] <maerwald> https://www.haskell.org/haskell-org-committee/
[16:08:58] <geekosaur> not the committee itself, but I could imagine summer of code stuff changing hands
[16:09:35] <geekosaur> it's a bit weird for it to be run by the haskell.org committee inthe first place, but that was all we had before
[16:11:15] <maerwald> I think haskell.org is exactly the right body for this. Its only purpose is helping the community and managing certain resources.
[16:11:39] <maerwald> HF is more specific, with its own technical goals
[16:15:02] *** Joins: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[16:18:32] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 250 seconds)
[16:18:53] *** Joins: agrosant (~agrosant@79.103.143.96.dsl.dyn.forthnet.gr)
[16:23:23] *** Quits: agrosant (~agrosant@79.103.143.96.dsl.dyn.forthnet.gr) (Max SendQ exceeded)
[16:31:13] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:33:32] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[16:39:36] *** Joins: razetime (~quassel@117.254.35.217)
[16:42:17] *** Joins: bliminse (~bliminse@host86-156-84-211.range86-156.btcentralplus.com)
[16:42:48] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[16:45:02] *** Quits: karim (~karim@41.34.205.183) (Ping timeout: 240 seconds)
[16:47:02] *** Quits: ccntrq (~Thunderbi@2a01:c23:9554:dc00:5ba8:8fe0:68a1:75cf) (Remote host closed the connection)
[16:47:17] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 252 seconds)
[16:47:20] *** Joins: ccntrq (~Thunderbi@2a01:c23:9554:dc00:5ba8:8fe0:68a1:75cf)
[16:47:28] *** Joins: karim (~karim@41.34.205.183)
[16:48:06] *** Quits: karim (~karim@41.34.205.183) (Remote host closed the connection)
[16:48:28] *** Joins: karim (~karim@41.34.205.183)
[16:52:21] *** Joins: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net)
[16:54:07] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[16:54:27] <Inst> @maerwald
[16:54:27] <lambdabot> Unknown command, try @list
[16:54:28] <Inst> yo
[16:54:33] <Inst> I mentioned in Matrix
[16:55:34] <Inst> that the death of Haskell Platform is a disaster
[16:55:43] <Inst> because we've lost library standards
[16:56:02] <Inst> and the loss of WinGHC means that windows integration is out the wazoo
[16:56:03] <maerwald> Inst: https://github.com/haskellfoundation/stability/issues/7
[16:56:12] <maerwald> wrt library standards
[16:56:14] <Inst> I'm wondering if you're willing to deal with library standards in the future
[16:59:23] *** Quits: karim (~karim@41.34.205.183) (Ping timeout: 252 seconds)
[17:09:16] *** Joins: SignalGarden (~ash@user/SignalWalker)
[17:09:31] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 245 seconds)
[17:09:59] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[17:12:24] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[17:14:30] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[17:28:32] *** Joins: karim (~karim@41.238.145.0)
[17:29:55] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:32:04] <Inst> @maerwald
[17:32:04] <lambdabot> Unknown command, try @list
[17:32:25] <Inst> I think Hecate is pissed at me, in part because my friend (who is a champion influencer) is now a former friend, and we ended up splitting quite acrimoniously
[17:32:32] <Inst> but say, if people put in a program to donate to GHCup
[17:32:36] <Inst> would you accept donations?
[17:32:43] <Inst> I'd gladly toss 20 USD your way
[17:32:55] <maerwald> eh
[17:33:27] <maerwald> There's an open-collective page
[17:33:37] <maerwald> the link is at the bottom of the homepage
[17:33:43] <maerwald> you can donate there
[17:33:57] <maerwald> not sure what's that about influencers though
[17:38:57] <romesrf> o/
[17:40:12] *** Quits: razetime (~quassel@117.254.35.217) (Ping timeout: 240 seconds)
[17:40:32] <yushyin> Inst: if you prefix nicks with @ you trigger the bot. just mention names without @
[17:40:46] *** Joins: razetime (~quassel@117.254.35.21)
[17:40:51] <Inst> It's some personal drama, nothing more, nothing less
[17:42:40] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:48:06] *** Quits: razetime (~quassel@117.254.35.21) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:48:56] *** Joins: tungki (~tungki@subs20-114-142-172-21.three.co.id)
[17:50:33] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[17:53:00] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 250 seconds)
[17:54:03] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Ping timeout: 250 seconds)
[17:57:35] *** Joins: tungki60 (~tungki@subs21-114-142-173-48.three.co.id)
[17:58:06] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:5cb2:5682:6969:c42) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:59:39] *** Quits: tungki (~tungki@subs20-114-142-172-21.three.co.id) (Ping timeout: 256 seconds)
[17:59:50] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:5cb2:5682:6969:c42)
[18:01:02] *** Quits: nexus (~nexus@94-21-108-13.pool.digikabel.hu) (Ping timeout: 240 seconds)
[18:03:06] *** Joins: nexus (~nexus@84-236-40-211.pool.digikabel.hu)
[18:06:58] *** Joins: phma (~phma@host-67-44-208-165.hnremote.net)
[18:08:09] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:09:43] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[18:11:32] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[18:11:36] *** Quits: ystael (~ystael@user/ystael) (Quit: Lost terminal)
[18:14:13] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:14:31] *** Joins: ystael (~ystael@user/ystael)
[18:16:43] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[18:17:25] *** Joins: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[18:17:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:18:48] *** Joins: chomwitt (~chomwitt@2a02:587:dc19:ca00:a7f3:60c8:c144:5351)
[18:20:21] *** Quits: SignalGarden (~ash@user/SignalWalker) (Ping timeout: 245 seconds)
[18:21:45] *** Quits: yauhsien_ (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[18:23:03] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[18:25:12] *** Quits: karim (~karim@41.238.145.0) (Ping timeout: 252 seconds)
[18:26:51] *** Quits: tungki60 (~tungki@subs21-114-142-173-48.three.co.id) (Ping timeout: 256 seconds)
[18:27:15] *** Quits: winstonsmith_ (~winston@2a02:c98:1003:8000:ef6c:3d0:1746:a2f3) (Quit: Leaving)
[18:28:17] *** Joins: razetime (~quassel@117.254.35.21)
[18:30:21] *** Quits: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[18:33:31] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[18:33:45] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:35:30] *** Joins: coot (~coot@213.134.190.95)
[18:42:02] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[18:46:40] *** Quits: quintasan_ (~quassel@quintasan.pl) (Quit: No Ping reply in 180 seconds.)
[18:48:00] *** Joins: quintasan (~quassel@quintasan.pl)
[18:52:55] *** Quits: razetime (~quassel@117.254.35.21) (Ping timeout: 256 seconds)
[18:53:45] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:54:51] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[18:56:03] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[18:57:08] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[18:58:14] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[19:00:23] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:01:36] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[19:05:57] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[19:07:54] *** Joins: razetime (~quassel@117.207.19.145)
[19:09:12] *** Quits: CiaoSen (~Jura@p200300c957298b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[19:10:08] *** Joins: s (~s@187.83.249.216.dyn.smithville.net)
[19:10:32] *** s is now known as Guest1639
[19:10:57] *** Joins: bahamas (~lucian@84.232.140.158)
[19:16:13] *** Joins: zebrag (~chris@user/zebrag)
[19:19:18] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:20:44] <Guest1639> I'm trying to set up a stack project with multiple executables, and I'm having trouble figuring out exactly how to do it. one of the executables is a preprocessor with source in Foo.hs, the second is generated by Bar.hs which needs the preprocessor to run on it to generate valid haskell code. the problem is that stack build will compile Foo.hs, but
[19:20:44] <Guest1639> then try to compile Bar.hs without building the executable for Foo first. is there a way to get stack to build an internal executable before compiling a library? do i need to split this into multiple packages?
[19:21:41] <merijn> Guest1639: I don't think Cabal (and thus stack) has a way to support that without splitting it into multiple packages, no
[19:22:07] *** Joins: mmhat (~mmh@55d4b07c.access.ecotel.net)
[19:22:07] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:23:01] *** Quits: mbuf (~Shakthi@122.174.182.104) (Quit: Leaving)
[19:24:00] <Guest1639> merijn guess i'll just have to split it :(. thank you!
[19:24:01] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[19:24:45] <janus> maerwald: ooh you did the cloning per subdirectory fix, thank you!!!
[19:25:07] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:31:01] *** Joins: aman (~aman@user/aman)
[19:32:51] *** Quits: aman (~aman@user/aman) (Client Quit)
[19:33:35] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[19:38:30] *** Quits: Guest1639 (~s@187.83.249.216.dyn.smithville.net) (Quit: Client closed)
[19:38:47] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[19:39:19] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:40:11] *** Joins: nschoe (~quassel@178.251.84.79)
[19:40:24] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:5cb2:5682:6969:c42) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:40:56] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:5cb2:5682:6969:c42)
[19:41:11] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 245 seconds)
[19:41:56] <maerwald> at least they merged that
[19:45:21] *** Quits: nschoe (~quassel@178.251.84.79) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:46:06] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 250 seconds)
[19:46:59] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:d213:ffce:3318:8451) (Quit: WeeChat 2.8)
[19:48:05] *** Joins: arjun_ (~arjun@user/arjun)
[19:49:02] *** Quits: arjun_ (~arjun@user/arjun) (Client Quit)
[19:49:53] *** Quits: arjun (~arjun@user/arjun) (Ping timeout: 252 seconds)
[19:53:49] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:5cb2:5682:6969:c42) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:57:07] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[19:59:57] *** Quits: dsrt^ (~dsrt@65.240.140.18) (Remote host closed the connection)
[20:06:01] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[20:10:22] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[20:12:34] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[20:14:56] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 245 seconds)
[20:17:10] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[20:20:14] *** Quits: rkrishnan (~user@2402:e280:215c:2cd:b1ea:752:e64f:92a) (Ping timeout: 260 seconds)
[20:21:00] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[20:23:17] *** Quits: nexus (~nexus@84-236-40-211.pool.digikabel.hu) (Ping timeout: 240 seconds)
[20:24:17] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:24:59] *** Joins: fockerized (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[20:25:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[20:25:22] *** Joins: nexus (~nexus@84-236-55-86.pool.digikabel.hu)
[20:25:55] *** Quits: ubert1 (~Thunderbi@2a02:8109:9880:303c:8bc2:7df6:5938:d836) (Remote host closed the connection)
[20:26:34] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[20:27:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:29:43] *** Joins: bahamas (~lucian@84.232.140.158)
[20:30:27] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:30:36] *** Quits: ccntrq (~Thunderbi@2a01:c23:9554:dc00:5ba8:8fe0:68a1:75cf) (Remote host closed the connection)
[20:30:54] *** Joins: ccntrq (~Thunderbi@2a01:c23:9554:dc00:5ba8:8fe0:68a1:75cf)
[20:32:22] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:33:16] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:5cb2:5682:6969:c42)
[20:33:36] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:35:17] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[20:38:38] *** Joins: coot (~coot@213.134.190.95)
[20:43:01] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[20:45:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:46:10] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[20:47:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:49:40] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:49:44] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[20:53:42] *** Quits: razetime (~quassel@117.207.19.145) (Ping timeout: 252 seconds)
[20:54:45] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[21:01:02] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Ping timeout: 240 seconds)
[21:02:46] *** Joins: CiaoSen (~Jura@p200300c957298b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:04:06] *** Joins: econo (uid147250@user/econo)
[21:08:00] *** Quits: ccntrq (~Thunderbi@2a01:c23:9554:dc00:5ba8:8fe0:68a1:75cf) (Remote host closed the connection)
[21:09:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:10:36] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[21:11:18] *** Quits: Flow (~none@gentoo/developer/flow) (Ping timeout: 252 seconds)
[21:11:54] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[21:18:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:19:43] *** Joins: Flow (~none@gentoo/developer/flow)
[21:20:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:22:38] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:5cb2:5682:6969:c42) (Quit: Textual IRC Client: www.textualapp.com)
[21:23:50] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[21:26:01] *** Joins: timCF (~timCF@m91-129-108-222.cust.tele2.ee)
[21:27:25] *** Quits: timCF (~timCF@m91-129-108-222.cust.tele2.ee) (Client Quit)
[21:31:33] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:32:42] *** Joins: asivitz (uid178348@id-178348.tinside.irccloud.com)
[21:34:07] *** Joins: SignalGarden (~ash@user/SignalWalker)
[21:37:39] *** Quits: ph88 (~ph88@89-220-184-245.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[21:46:36] *** Joins: mbuf (~Shakthi@122.174.182.104)
[21:50:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:52:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:54:36] *** Joins: vglfr (~vglfr@88.155.19.152)
[21:54:49] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[21:54:52] *** Joins: trillp (~trillp@137.220.51.190)
[21:56:32] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[22:02:26] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:08:55] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[22:11:50] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:12:06] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:17:18] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[22:18:18] *** Joins: justAstache (~justache@user/justache)
[22:19:09] *** Joins: bahamas (~lucian@84.232.140.158)
[22:23:35] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 250 seconds)
[22:25:14] *** Joins: weekOldRoadkill (~weekOldRo@pool-108-50-225-254.nwrknj.fios.verizon.net)
[22:25:33] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:fbc2:e286:7e32:c756)
[22:26:00] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[22:27:02] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Ping timeout: 240 seconds)
[22:28:37] *** Quits: mbuf (~Shakthi@122.174.182.104) (Quit: Leaving)
[22:30:26] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[22:30:27] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[22:33:00] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[22:33:59] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[22:35:34] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[22:35:37] *** Quits: Flow (~none@gentoo/developer/flow) (Ping timeout: 240 seconds)
[22:36:52] *** Quits: raym (~raym@user/raym) (Ping timeout: 268 seconds)
[22:38:14] *** Joins: raym (~raym@user/raym)
[22:38:44] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[22:43:51] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[22:44:40] *** Joins: Flow (~none@gentoo/developer/flow)
[22:45:01] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[22:47:01] *** Joins: raym (~raym@user/raym)
[22:47:35] *** Quits: SignalGarden (~ash@user/SignalWalker) (Quit: WeeChat 3.4.1)
[22:48:41] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Ping timeout: 245 seconds)
[22:52:37] *** Joins: bahamas (~lucian@84.232.140.158)
[22:53:45] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 256 seconds)
[22:54:10] *** Quits: nexus (~nexus@84-236-55-86.pool.digikabel.hu) (Ping timeout: 250 seconds)
[22:54:59] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[22:55:14] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[22:55:27] *** Joins: joo-_ (~joo-_@87-49-147-204-mobile.dk.customer.tdc.net)
[22:55:27] *** Quits: joo-_ (~joo-_@87-49-147-204-mobile.dk.customer.tdc.net) (Changing host)
[22:55:27] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[22:55:43] *** Joins: nexus (~nexus@178-164-235-215.pool.digikabel.hu)
[22:56:44] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[22:56:57] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[22:59:37] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[23:01:26] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:01:46] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[23:01:58] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:03:26] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[23:04:00] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[23:05:05] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:06:41] *** Joins: SignalGarden (~ash@user/SignalWalker)
[23:06:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:06:53] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Remote host closed the connection)
[23:09:31] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[23:11:21] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[23:13:06] *** Joins: alp (~alp@user/alp)
[23:14:30] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[23:22:39] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 256 seconds)
[23:24:35] *** Joins: joo-_ (~joo-_@80-62-117-94-mobile.dk.customer.tdc.net)
[23:24:35] *** Quits: joo-_ (~joo-_@80-62-117-94-mobile.dk.customer.tdc.net) (Changing host)
[23:24:35] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[23:26:27] *** Quits: mrmonday (~robert@octarineparrot.com) (Quit: .)
[23:29:53] *** Joins: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es)
[23:30:31] *** Joins: bahamas (~lucian@84.232.140.158)
[23:32:43] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:33:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[23:33:47] *** Joins: Everything (~Everythin@37.115.210.35)
[23:33:59] *** Lord_of_Life_ is now known as Lord_of_Life
[23:38:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:42:47] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[23:43:05] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:48:24] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[23:49:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[23:49:36] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[23:51:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:52:34] *** Quits: unit73e (~ecouto@2001:818:e8dd:7c00:c04e:760a:547d:3f88) (Remote host closed the connection)
[23:52:59] *** Joins: unit73e (~ecouto@2001:818:e8dd:7c00:dedc:5c07:1da8:55e8)
[23:54:00] *** Joins: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net)
[23:57:32] *** Quits: unit73e (~ecouto@2001:818:e8dd:7c00:dedc:5c07:1da8:55e8) (Ping timeout: 240 seconds)
[23:58:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:58:55] *** Quits: yauhsien (~yauhsien@61-231-56-96.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
