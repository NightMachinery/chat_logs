[00:04:35] <gordonfish> zgu: Oh that takes me back. Thanks.
[00:05:06] <zgu> hmm, i think saying "Enterprise COBOL" is a little redundant too
[00:05:39] <gordonfish> zgu: Wait a sec, that page says "ADD identifier-1 TO literal-1" but that looks backwards, it should be ADD literal TO identifier, no?
[00:05:55] <gordonfish> As in 'ADD 1 TO COBOL GIVING COBOL'
[00:07:05] <zgu> no it's ADD (identifier-1 or literal-1) TO identifier-2
[00:09:06] <gordonfish> Oh I see. I was looking on my phone and the ascii art they used reads weird unless I enable desktop site mode. Maybe ascii art for programming docs isn't the best idea..
[00:09:44] <zgu> well it was probably state of the art in the 70s
[00:09:47] *** Joins: jaytee80 (~jaytee80@remote-e.cpii.com)
[00:09:55] <zgu> and hasn't been rewritten since
[00:10:21] <gordonfish> zgu: Probably to the bane of people incharge of reloading teletypes
[00:10:27] <mst> browsers should both support emojis and not break ascii art
[00:11:04] <jaytee80>  eval( { Module::Runtime::require_module( $libname ) } );
[00:11:05] <jaytee80> is killing my process when said lib is not available. Should eval() not have caught die and set $@ here? I feel like a crazy pill has presented itself.
[00:11:20] <gordonfish> They could have just written ADD [identifier1|literal1] TO identifier2 ... but I digress
[00:11:22] <mst> jaytee80: what
[00:11:27] * GumbyPAN CPAN Upload: WebService-Mattermost-0.28 by MIKEJONES https://metacpan.org/release/MIKEJONES/WebService-Mattermost-0.28
[00:11:27] <jaytee80> wat
[00:11:30] <mst> jaytee80: please show more data
[00:11:42] <mst> jaytee80: because, yeah, that shouldn't kill the process
[00:11:49] <jaytee80> Ok, lemmie get to paster. One sec.
[00:12:14] <gordonfish> jaytee80: Why, do you need an exorsism?
[00:12:43] <gordonfish> It probably wont help
[00:13:02] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 268 seconds)
[00:13:16] <jaytee80> https://l.perl.bot/p/adpi1z
[00:13:16] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[00:13:20] <gordonfish> Ah fudge, it's spelled pastor
[00:13:37] * gordonfish pulls hard o nthe abort-joke leeeeever
[00:13:57] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:14:23] <jaytee80> Maybe Module::Runtime is old on this system... but I can't see how even that could possibly matter here.
[00:16:16] <jaytee80> 0.014, current is 0.016
[00:16:51] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Remote host closed the connection)
[00:17:16] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[00:20:36] <jaytee80> I upgraded to current 0.016 and still same failure. eval({}) not catching die
[00:20:47] <Grinnz> sweval: eval( { die "foo" } )
[00:20:50] <perlbot> Grinnz: ERROR: foo at (IRC) line 1. 
[00:20:54] <Grinnz> sweval: eval { die "foo" }
[00:20:56] <perlbot> Grinnz: No output.
[00:21:02] <Grinnz> you called eval wrong
[00:21:27] <jaytee80> No short and curlys required?
[00:21:38] <Grinnz> parentheses don't work for the block argument
[00:21:50] <jaytee80> I probably made that mistake in a lot of places if that's it.
[00:21:52] <Grinnz> it assumed you were trying to pass a hashref to eval
[00:22:19] <mst> yeah, 'eval { ... }' is the syntax
[00:22:26] <mst> adding those parens there breaks things
[00:22:34] <mst> that's ... really bad
[00:23:38] <jaytee80> It def caught me off guard. I always thought the parens made no difference on a sub call, but I always put there there because OCD.
[00:24:01] <Grinnz> parens make a difference in various special cases in perl
[00:24:03] <zgu> same with map {} and grep {}
[00:24:07] <mst> jaytee80: that's not how perl works, sorry
[00:24:09] <zgu> i think
[00:24:43] <Grinnz> and eval is not a sub call. it's a builtin
[00:24:43] <mst> jaytee80: for things that take a leading block, the parens -must- not be there
[00:24:46] <zgu> some of the built in operators take a code block as an operator, that's how you have to pass it
[00:24:58] <Grinnz> you can make sub calls emulate that syntax with the & prototype though
[00:25:03] <zgu> s/an operator/an argument/
[00:25:30] <mst> eval: sub foo (&) { } foo { die "argh" }
[00:25:32] <perlbot> mst: ERROR: A signature parameter must start with '$', '@' or '%' at (IRC) line 1, near "(&" syntax error at (IRC) line 1, near "(&" 
[00:25:40] <mst> eval: sub foo :prototype(&) { } foo { die "argh" }
[00:25:43] <perlbot> mst: No output.
[00:25:51] <mst> eval: sub foo :prototype(&) { } foo({ die "argh" })
[00:25:52] <perlbot> mst: ERROR: Type of arg 1 to main::foo must be block or sub {} (not anonymous hash ({})) at (IRC) line 1, near "})" 
[00:26:09] <mst> Grinnz: broken with sub calls as well
[00:26:29] * GumbyPAN CPAN Upload: WWW-Correios-SIGEP-0.05 by GARU https://metacpan.org/release/GARU/WWW-Correios-SIGEP-0.05
[00:26:31] <Grinnz> those possibly even use the same bits of the parser
[00:27:05] <jaytee80> Welp, learn something new everyday. I'd changed all places I had eval("use $libname;") because static analyzer didn't like eval quoted strings. I changed to Module::Runtime checks in blocks, but never got rid of the parens.
[00:27:41] <Grinnz> yeah, string-eval is unnecessary for that
[00:28:05] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[00:29:42] <mst> jaytee80: btw, Module::Runtime is more careful
[00:30:03] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:30:05] <mst> jaytee80: but I often use 'require join('/', split '::', $modname).'.pm';'
[00:30:39] <mst> because Module::Runtime intentionally murders CORE::require overrides which breaks some of my stupid shit and *augh*
[00:31:16] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[00:31:56] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-55.dsl.bell.ca)
[00:34:43] *** Joins: kensanata (~user@user/kensanata)
[00:51:31] * GumbyPAN CPAN Upload: Test2-Harness-UI-0.000097 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-UI-0.000097
[00:51:31] * GumbyPAN CPAN Upload: Tree-RB-XS-0.04 by NERDVANA https://metacpan.org/release/NERDVANA/Tree-RB-XS-0.04
[00:57:09] *** Joins: TieUpYourCamel (~david@99-111-133-221.lightspeed.chrlnc.sbcglobal.net)
[01:00:49] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[01:02:04] *** Joins: alex11 (~alex11@user/alex11)
[01:04:41] *** Joins: gast0n (~g4570n@user/gast0n)
[01:07:48] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[01:11:52] <v`> https://twitter.com/JeshyQt/status/1461498715659595781
[01:11:53] <Paperbot> Jeshy 🧲🦌⚡ (@JeshyQt) 20h45m ago: Alright I'm starting to finally feel the generation divide
[01:18:24] *** Quits: martinus__ (~martin@95.31.201.77.rev.sfr.net) (Ping timeout: 268 seconds)
[01:23:34] *** Joins: martinus__ (~martin@95.31.201.77.rev.sfr.net)
[01:27:51] <tkr> Oh, that's so annoying. Congratulations!
[01:29:14] <tkr> (I was talking about the emojis, not the tweet - I didn't read it.)
[01:31:13] *** Quits: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder) (Ping timeout: 256 seconds)
[01:31:51] <v`> sorry abut that, didnt' realise there were emojis in it
[01:31:57] *** Quits: ether (~ether@perl/cpan-druid/ether) (Ping timeout: 268 seconds)
[01:37:25] *** Joins: ether (~ether@vps-6c71e929.vps.ovh.net)
[01:37:25] *** Quits: ether (~ether@vps-6c71e929.vps.ovh.net) (Changing host)
[01:37:25] *** Joins: ether (~ether@perl/cpan-druid/ether)
[01:41:32] *** Quits: ether (~ether@perl/cpan-druid/ether) (Ping timeout: 240 seconds)
[01:44:03] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[01:46:10] *** Joins: R2robot (~R2robot@user/r2robot)
[01:49:05] *** Joins: ether (~ether@vps-6c71e929.vps.ovh.net)
[01:49:05] *** Quits: ether (~ether@vps-6c71e929.vps.ovh.net) (Changing host)
[01:49:05] *** Joins: ether (~ether@perl/cpan-druid/ether)
[01:55:12] *** Joins: proller (~p@213.87.90.104)
[01:56:32] <zgu> perlbot: utf8 🧲
[01:56:32] <perlbot> zgu: U+1F9F2 (f0 9f a7 b2): MAGNET [🧲] 
[01:56:40] <zgu> perlbot: utf8 🦌
[01:56:41] <perlbot> zgu: U+1F98C (f0 9f a6 8c): DEER [🦌] 
[01:57:04] <zgu> don't have glyphs for those two apparently
[02:02:02] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 260 seconds)
[02:02:47] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 264 seconds)
[02:04:18] *** Quits: bmeneg (~bmeneg@2001:1284:f016:6b8b:c598:4952:2800:7afe) (Remote host closed the connection)
[02:07:35] *** Quits: martinus__ (~martin@95.31.201.77.rev.sfr.net) (Ping timeout: 264 seconds)
[02:14:17] *** Quits: proller (~p@213.87.90.104) (Ping timeout: 256 seconds)
[02:16:40] * GumbyPAN CPAN Upload: Slovo-2021.11.20 by BEROV https://metacpan.org/release/BEROV/Slovo-2021.11.20
[02:21:48] *** Joins: NotAres (uid527990@user/notares)
[02:32:38] *** Quits: pizdets (~pizdets@183.182.110.70) (Ping timeout: 250 seconds)
[02:33:43] *** Joins: pizdets (~pizdets@183.182.111.207)
[02:36:08] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[02:38:10] *** Quits: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[02:40:32] *** Quits: hudo__ (~hudo@62.68.19.39) (Ping timeout: 240 seconds)
[02:49:17] *** Joins: ProperN[out] (~holyShizn@user/propernoun)
[02:49:29] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 250 seconds)
[02:50:28] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[02:56:38] *** Quits: ether (~ether@perl/cpan-druid/ether) (Ping timeout: 260 seconds)
[03:00:20] *** Quits: kensanata (~user@user/kensanata) (Remote host closed the connection)
[03:03:26] <gordonfish> jaytee80: Re: eval( { die "foo" } )
[03:03:28] <gordonfish> sweval: sub foo { [@_] } foo( { warn "foo" } );
[03:03:30] <perlbot> gordonfish: foo at (IRC) line 1. Odd number of elements in anonymous hash at (IRC) line 1. [{1 => undef}]
[03:05:53] <gordonfish> jaytee80: You don't see it with when die() is used, but what was happening is you were passing an anon hashref with die "..." as it's body. The die call is processed and the program dies, since that hashref is an arg passed to eval EXPR, not eval BLOCK.
[03:06:07] <gordonfish> Just like with:
[03:06:08] <gordonfish> sweval: eval die "foo"; say 123;
[03:06:10] <perlbot> gordonfish: ERROR: foo at (IRC) line 1. 
[03:07:10] <ilmari_> perlbot: utf8 steak 🥩
[03:07:10] <gordonfish> (Using just the result of die instead of a hash body, but the idea is the same, die is called, and the result becomes the argument to eval, though since it's die(), the program terminates.
[03:07:10] <perlbot> ilmari_: U+0073 (73): LATIN SMALL LETTER S [s] U+0074 (74): LATIN SMALL LETTER T [t] U+0065 (65): LATIN SMALL LETTER E [e] U+0061 (61): LATIN SMALL LETTER A [a] U+006B (6b): LATIN SMALL LETTER K [k] U+1F969 (f0 9f a5 a9): CUT OF MEAT [🥩] 
[03:07:15] <gordonfish> )
[03:07:36] <gordonfish> cut of meat? Heh, unicode never ceases to amuse me
[03:09:51] <zgu> there's also a "CJK radical meat" at U+2EBC
[03:09:58] <gordonfish> ilmari: On my phone is looks like a steak/cutlet, like the cliche steak thrown to lions in cartoons.
[03:10:09] <gordonfish> zgu: And what may I ask is that
[03:10:39] <zgu> no idea. but it's right after brush two and before mortar
[03:10:41] <zgu> if that helps
[03:10:41] <ilmari_> annoyingly, gboard doesn't show that when you search for meat or steak emoji (it shows 🍖), but after you just type "steak" it does
[03:10:46] <gordonfish> I mean... what makes meat radical?
[03:10:55] <zgu> (he said, knowing full well there was no possible way it could help)
[03:11:05] <ilmari_> perlbot: utf8 🍖
[03:11:05] <perlbot> ilmari_: U+1F356 (f0 9f 8d 96): MEAT ON BONE [🍖] 
[03:11:10] <zgu> the whole block is called supplemental radicals or something
[03:11:31] <gordonfish> Are there terrorist steaks that bomb plant farms?
[03:11:47] *** Quits: magla (~gelignite@55d403ec.access.ecotel.net) (Quit: Stay safe!)
[03:12:29] <zgu> U+3B5A CJK UNIFIED IDEOGRAPH-3B5A Definition in English: a kind of tree, a tray for carrying sacrificial meats and wine
[03:13:14] <zgu> U+3E0B CJK UNIFIED IDEOGRAPH-3E0B Definition in English: (interchangeable 膰) meats used in sacrifice
[03:14:57] * gordonfish wonders if there is a unicode symbol/ideograph for a CJ5, CJ2A, etc. (It's hard to see so much CJ and not think classic jeeps.)
[03:15:16] <gordonfish> (And JK for that matter)
[03:17:52] *** Joins: whynot (~whynot@37.73.15.226)
[03:18:13] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 265 seconds)
[03:18:32] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[03:21:48] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:23:23] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[03:24:47] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[03:25:28] <ology> This seems like clumbsy, caveman logic to toggle an LED with a button: https://github.com/ology/Raspberry-Pi/blob/main/toggle-led.pl - How might I improve things I wonder? :)
[03:25:29] <Paperbot> Link title(s): [ Raspberry-Pi/toggle-led.pl at main · ology/Raspberry-Pi · GitHub ]
[03:26:02] <ology> The fact that it's a rpi doesn't matter as much as the possible naieve while(1){...
[03:26:12] <ology> possibly naive
[03:26:32] *** Quits: kylese (~kylese@p5dd8b8a7.dip0.t-ipconnect.de) (Quit: Leaving)
[03:26:40] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[03:28:41] *** Joins: cation21 (cation@user/cation)
[03:28:45] *** Joins: Darxus (~darxus@panic.chaosreigns.com)
[03:29:35] *** Quits: phenom (~primus@user/phenom) (Quit: See ya! Wouldn't want to blah blah..)
[03:29:35] *** Quits: cation (cation@user/cation) (Quit: Leaving)
[03:29:38] *** Quits: averell (~averell@user/averell) (Quit: .)
[03:29:53] <Darxus> When rendering frames in an animation with blender, it renders them in sequence, 1,2,3,4,5,6,7.  I want to render them in progressive order, so instead of just starting from the beginning, it is gradually increasing the frame rate of the output.  To give me a more useful variety of frames to preview for problems as it's rendering.
[03:29:54] *** Joins: averell (~averell@user/averell)
[03:30:39] <Darxus> So instead of 1,2,3,4,5,6,7, it would be in an order like 4,2,5,1,6,3,7.  Is there a perl library or something that'll calculate that order for me?  Is there a term to search for?
[03:31:01] *** Joins: phenom (~primus@user/phenom)
[03:31:16] <Darxus> Maybe the order 1,5,3,6,2,7,4,8 would be better.
[03:31:57] <Grinnz> um... shuffle? or are you looking for a more specific algorithm?
[03:31:58] *** cation21 is now known as cation
[03:32:00] <Darxus> I'm usually doing 1600 frame animations.
[03:33:03] <Darxus> Yeah, I'm looking for more specific.  Like if the full set of frames will result in 60fps, I'd like it to do all of the frames that would be used for 30fps along the way.  And 15fps before that.
[03:33:26] <zgu> like an interlacing type of thing?
[03:33:30] <Darxus> Yes!
[03:33:46] <zgu> you said progressive though :P
[03:33:58] <Darxus> Possibly the way progressive images load.  I'm not exactly sure of the order.
[03:34:19] <Darxus> I think interlacing is usually used when there are only two sets.
[03:34:58] <Grinnz> like mipmapped texture rendering but for frames
[03:35:04] <Darxus> Like just even, then odd.  But I'd like to do, like, every 800th frame, then every 400th frame, then every 200th frame, etc..
[03:35:13] <jabberwok> "interleave" — as in floppy-disk sectors — is the word that comes to mind
[03:37:08] <Darxus> And yes, a 1 dimensional version of (2 dimensional) mipmapping seems to be a great way to look at it.
[03:39:06] * ology .oO(Maybe I need a sleep 1; to delay between reads for "stability." Let's see...)
[03:39:47] <skyl4rk> easiest may be to have step sizes in powers of two, and halving the step size after each run, and removing redundancies of course
[03:40:05] <skyl4rk> might not necessarily fit with any specific framerate though
[03:40:14] <gordonfish> Darxus: Pardon my denseness, but why would you want frames out of order?
[03:41:16] <Darxus> Yeah, I'm not worried about matching the framerate well.  mpv can read frame numbers and adjust temporal spacing, but it fails if five frames are missing.  I'm... looking into that.  It would also be nice if blender's own player could read its frame numbers.
[03:41:21] <gordonfish> ((Interlacing I can understand, I've done deinterlacing before when capturing video from sources like VCRs.)
[03:42:12] <Darxus> gordonfish: Right now I'm doing a render of 1600 4k frames that is taking about 7 days.  If, one day into it, it has only rendered the first... 228 images, that will give me less ability to search for problems in the render than if those 228 frames were dispersed ~evenly throughout the animation.
[03:42:34] <gordonfish> I haven't used blender and I'm probably thinking too much about video editing (where things like key frames come into play.)
[03:43:12] <Darxus> Yeah, I'm outputting to pngs.  And viewing the results with mpv "mf://*png".
[03:44:00] <Darxus> skyl4rk: I think you're right, thanks.
[03:44:20] <gordonfish> Darxus: Oh. Sor it kind of sounds like you want some sort of frame skip then, to make to can scrub through the video easier?
[03:44:44] <gordonfish> s/\bSo\kr//
[03:44:57] <Darxus> Well, at any point, I w want the frames which have been rendered to be evenly distributed throughout the animation.
[03:45:39] <gordonfish> But not for normal play back right? Because, that would be all scrambled then.
[03:45:47] <Darxus> Right.
[03:45:56] <Darxus> I still want them played in sequential order.
[03:47:35] <gordonfish> Are key frames a thing in blender?
[03:47:55] <Darxus> Not for what I'm doing, in any of what I've mentioned here.
[03:48:13] <Darxus> For the final version I use ffmpeg to convert to webm, which... I assume uses keyframes.
[03:48:37] <Darxus> Blender can ouput to video files, via ffmpeg, which I expect would also involve keyframes.
[03:49:20] <gordonfish> I would imagine if you wanted to make it easier to search through, maybe 1 or 2 frames out of every second for 30 fps, or maybe 4 for 60 fps, would make it might lighter to scrub through.
[03:49:35] <gordonfish> s/might/much/
[03:49:52] <Darxus> I don't think that's something I'm trying to do.
[03:50:16] <gordonfish> Darxus: (Yes I've used ffmpeg quite a bit to edit/trim/convert/etc videos, and often I reference key frames for that)
[03:50:19] <Darxus> mpv "mf://*png" loads the pngs directly, no keyframes, goes backwards easily, which I'm not doing.
[03:50:44] <skyl4rk> perl -E 'my $n=30; my @f=(0)x$n; for my $s (map {2**(10-$_)} 0..10) { for (my $i=0; $i<$n; $i+=$s) { next if $f[$i]; say $i; $f[$i]=1;}}'
[03:50:55] <gordonfish> So you're not really scrubbing (searching through the video) ?
[03:51:10] <skyl4rk> eh, could have golfed it slightly more with some space removal I guess
[03:51:54] <gordonfish> (Again, my mind set it probably too much in regular video editing, as I'm not familiar with blender and such, so I'm trying to understand what it is you're actually doing or trying to do.)
[03:52:48] <skyl4rk> afaik blender is scripted in python, so I don't know how perl enters here really
[03:55:27] *** Joins: ether (~ether@vps-6c71e929.vps.ovh.net)
[03:55:27] *** Quits: ether (~ether@vps-6c71e929.vps.ovh.net) (Changing host)
[03:55:27] *** Joins: ether (~ether@perl/cpan-druid/ether)
[03:57:17] <Darxus> Oh, I'm planning to use the frame sequence as an argument to running a blender render from the command line.  It allows you to specify frame render order.
[03:59:49] <aquanight> ok I don't get it. Why wouldn't you want to render in sequence?
[04:00:07] <aquanight> is it a compression thing?
[04:00:57] *** Joins: JustMe (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[04:01:02] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Ping timeout: 260 seconds)
[04:01:09] <skyl4rk> spot check at various intervals to make sure the shifting scene renders ok throughout if I understand it correctly
[04:01:16] <Darxus> Yeah.
[04:02:09] <Darxus> I'm rendering a car I'm designing.  If a day into the render I can only see if stuff is messed up on the front of the car, that's less useful than if the rendered frames are spread out so I can also see the back of the car.
[04:02:13] <ology> Hmmm debouncing
[04:02:18] <Darxus> Also, more entertaining to look at.
[04:06:25] *** Joins: proller (~p@2a02:6b8:b081:8813::1:20)
[04:14:46] *** Quits: JustMe (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:17:29] *** Quits: sgrs_ (~sgrs@185.112.146.78) (Quit: leaving)
[04:22:51] *** Joins: sgrs (~sgrs@185.112.146.78)
[04:23:22] *** sgrs is now known as atta
[04:25:16] <Darxus> Ugh, I have something that's useable, by dividing the increment by half each time, but I think to actually get the exact results I want, I'm going to need to calculate the average frame number at each end of the gaps.
[04:27:47] <Darxus> 0,4,2,6,1,3,5,7 is what I'm getting.
[04:29:11] <Darxus> Wait, no, I think what I'm getting is perfect.
[04:29:45] <Darxus> 0,8,4,12,2,6,10,14,1,3,5,7,9,11,13,15
[04:29:46] <Darxus> Yeah!
[04:29:50] <Darxus> Thanks for your help.
[04:30:14] <Darxus> Now I just have to wait till Tuesday for my current render to end :P
[04:30:36] <gordonfish> Back; what is giving you that order? What is the pattern?
[04:32:19] <gordonfish> The 1,3,5,7,9,11,13,15 part is just odd numbers, but how was the first part determined?
[04:32:53] <gordonfish> It's even numbers in what looks like shuffled order.
[04:32:54] <Darxus> gordonfish: https://www.chaosreigns.com/code/dl/progressive.pl
[04:33:08] <MikeGeorge[m]> Beginning, halfway, half-of-the-first-half, half-of-the-second-half, etc.
[04:33:19] <Darxus> Yes.
[04:33:58] <Darxus> skyl4rk: Yours may have done the same, but I can't read it....
[04:34:19] * ology ..oO( IO::Async::Timer::Periodic ++ )
[04:49:02] <skyl4rk> Darxus: a less golfed version with better printing https://www.tlvb.se/pub/frames.pl.txt
[04:51:55] * GumbyPAN CPAN Upload: Ithumb-XS-0.5.5 by BRDUCH https://metacpan.org/release/BRDUCH/Ithumb-XS-0.5.5
[04:56:08] <ology> https://github.com/ology/Raspberry-Pi/blob/main/toggle-led.pl fwiw
[04:56:09] <Paperbot> Link title(s): [ Raspberry-Pi/toggle-led.pl at main · ology/Raspberry-Pi · GitHub ]
[04:56:34] <ology> oops. already posted that. anyway. shutting the fuck up now.
[05:13:35] *** Quits: ether (~ether@perl/cpan-druid/ether) (Ping timeout: 264 seconds)
[05:21:58] * GumbyPAN CPAN Upload: App-optex-textconv-0.12 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-optex-textconv-0.12
[05:23:54] *** Joins: deadmarshal (~deadmarsh@95.38.119.181)
[05:26:59] * GumbyPAN CPAN Upload: Mojo-Redis-3.27 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/Mojo-Redis-3.27
[05:28:39] *** Quits: deadmarshal (~deadmarsh@95.38.119.181) (Ping timeout: 256 seconds)
[05:41:07] *** Quits: Pali (~pali@user/pali) (Ping timeout: 256 seconds)
[06:11:18] *** Quits: Su-Shee (~Susanne@p4ffc7586.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:12:52] *** Joins: Su-Shee (~Susanne@p4ff49b91.dip0.t-ipconnect.de)
[06:14:26] *** Joins: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net)
[06:31:15] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[06:35:01] *** Quits: PapaChub (~PapaChub@vzw-54.parabon.com) (Quit: leaving)
[06:44:14] *** Joins: ether (~ether@vps-6c71e929.vps.ovh.net)
[06:44:14] *** Quits: ether (~ether@vps-6c71e929.vps.ovh.net) (Changing host)
[06:44:14] *** Joins: ether (~ether@perl/cpan-druid/ether)
[06:53:05] *** Quits: Su-Shee (~Susanne@p4ff49b91.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:54:46] *** Joins: Su-Shee (~Susanne@p5089460a.dip0.t-ipconnect.de)
[06:56:03] *** Quits: kst (~user@cpe-70-95-182-43.san.res.rr.com) (Remote host closed the connection)
[07:06:01] *** Quits: Kimmono (~Kimmono@195-159-198-100.customer.powertech.no) (Read error: Connection reset by peer)
[07:08:48] *** Joins: Kimmono (~Kimmono@195-159-198-100.customer.powertech.no)
[07:18:13] *** Quits: talexb (~tab@bras-base-toroon0335w-grc-44-184-147-4-36.dsl.bell.ca) (Quit: Leaving)
[07:42:51] *** Quits: whynot (~whynot@37.73.15.226) (Quit: leaving)
[07:46:04] *** Quits: zgu (~zgu@2603-7080-b704-0800-e4e2-df43-fd5d-e657.res6.spectrum.com) (Quit: Leaving)
[07:48:30] *** Joins: zgu (~zgu@2603-7080-b704-0800-e4e2-df43-fd5d-e657.res6.spectrum.com)
[07:50:50] *** Joins: Martchus (~martchus@2a01:c22:6f04:cb00:d250:99ff:fe49:3cce)
[07:52:01] *** Quits: Martchus_ (~martchus@dynamic-095-115-176-122.95.115.pool.telefonica.de) (Ping timeout: 256 seconds)
[08:01:35] *** Quits: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net) (Ping timeout: 264 seconds)
[08:09:29] *** Quits: Paladin (~paladin@S0106c0eae42a785d.vc.shawcable.net) (Remote host closed the connection)
[08:11:31] *** Joins: Paladin (~paladin@S0106c0eae42a785d.vc.shawcable.net)
[08:12:16] * GumbyPAN CPAN Upload: JSON-Validator-5.03 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.03
[08:12:17] * GumbyPAN CPAN Upload: Mojolicious-Plugin-OpenAPI-5.01 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-5.01
[08:18:18] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:18:47] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[08:33:23] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[08:36:26] *** Joins: jetchisel (jetchisel@user/jetchisel)
[08:46:20] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[09:30:59] *** Quits: Adura (~Adura@user/adura) (Quit: Quit)
[09:32:05] *** Quits: pucara (~i@181.93.164.73) (Quit: Lost terminal)
[10:16:16] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[10:16:41] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 250 seconds)
[10:22:59] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:26:29] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:26:49] *** Joins: Pixi (~Pixi@user/pixi)
[10:32:20] *** Joins: rgrinberg (~textual@201.192.183.53)
[10:33:23] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:456d:f5ba:2e88:697c) (Ping timeout: 264 seconds)
[10:36:11] *** Joins: deadmarshal (~deadmarsh@95.38.119.181)
[10:48:23] *** Quits: deadmarshal (~deadmarsh@95.38.119.181) (Ping timeout: 264 seconds)
[10:56:45] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 256 seconds)
[10:58:03] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Ping timeout: 268 seconds)
[11:06:34] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 265 seconds)
[11:15:02] *** Quits: rgrinberg (~textual@201.192.183.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:21:37] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[11:26:55] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[11:43:42] *** Joins: tobybl (~tobybl@213.31.134.235)
[11:44:27] *** Joins: Colt (~Colt@user/colt)
[11:45:27] *** Joins: hudo__ (~hudo@62.68.19.39)
[11:51:46] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[11:56:41] *** Quits: bn_work (uid268505@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:03:23] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 264 seconds)
[12:26:45] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[12:27:13] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[12:27:50] *** Quits: SergeiZhmylev (~zhmylove@178.252.127.211) (Ping timeout: 260 seconds)
[12:27:50] *** Quits: zhmylove (~zhmylove@178.252.127.211) (Ping timeout: 260 seconds)
[12:28:23] *** Joins: zhmylove (~zhmylove@178.252.127.211)
[12:28:23] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[12:31:29] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:34:02] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 240 seconds)
[12:51:50] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[12:52:09] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[12:52:14] *** Joins: tejr (~tejr@user/tejr)
[12:53:42] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:56:46] * GumbyPAN CPAN Upload: Text-Amuse-1.77 by MELMOTHX https://metacpan.org/release/MELMOTHX/Text-Amuse-1.77
[12:59:32] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[13:02:08] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:03:56] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[13:11:48] * GumbyPAN CPAN Upload: Text-Amuse-Preprocessor-0.65 by MELMOTHX https://metacpan.org/release/MELMOTHX/Text-Amuse-Preprocessor-0.65
[13:13:44] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 268 seconds)
[13:19:18] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[13:21:47] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[13:30:59] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 264 seconds)
[13:32:16] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[13:43:29] *** Quits: zhmylove (~zhmylove@178.252.127.211) (Quit: Leaving)
[13:43:56] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[13:47:57] *** Joins: Adura (~Adura@user/adura)
[13:48:08] *** Joins: kylese (~kylese@p5483508b.dip0.t-ipconnect.de)
[14:06:07] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[14:14:37] *** Joins: mjones (sid6844@helmsley.irccloud.com)
[14:21:52] *** Quits: jaytee80 (~jaytee80@remote-e.cpii.com) (Ping timeout: 256 seconds)
[14:24:54] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:25:15] *** Quits: jetchisel (jetchisel@user/jetchisel) (Read error: Connection reset by peer)
[14:26:00] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:02] *** Joins: csrf (~csrf@user/csrf)
[14:31:56] * GumbyPAN CPAN Upload: DBIx-Spreadsheet-0.01 by CORION https://metacpan.org/release/CORION/DBIx-Spreadsheet-0.01
[14:33:43] *** Joins: xenial-user5 (~androirc@20014C4C17E1D200EC9C2DDEAD4C145C.catv.pool.telekom.hu)
[14:34:47] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[14:57:05] *** Joins: Pali (~pali@user/pali)
[15:00:59] *** Quits: hudo__ (~hudo@62.68.19.39) (Ping timeout: 256 seconds)
[15:02:00] * GumbyPAN CPAN Upload: App-Kramerius-To-Images-0.03 by SKIM https://metacpan.org/release/SKIM/App-Kramerius-To-Images-0.03
[15:06:59] *** Joins: tobybl (~tobybl@213.31.134.235)
[15:12:06] *** Quits: Su-Shee (~Susanne@p5089460a.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[15:13:54] *** Joins: Su-Shee (~Susanne@p508943e8.dip0.t-ipconnect.de)
[15:16:30] *** Joins: kensanata (~user@user/kensanata)
[15:18:10] *** Joins: nightw0lf (~nightw0lf@77.125.126.211)
[15:18:41] *** Quits: nightw0lf (~nightw0lf@77.125.126.211) (Remote host closed the connection)
[15:26:44] *** Joins: nightw0lf (~nightw0lf@77.125.126.211)
[15:31:50] *** Parts: nightw0lf (~nightw0lf@77.125.126.211) (leaving)
[15:33:42] *** Joins: EGD (~egd@user/egd)
[15:34:17] *** Quits: EGD (~egd@user/egd) (Client Quit)
[15:36:11] *** Joins: EGD (~egd@user/egd)
[15:37:03] * GumbyPAN CPAN Upload: Data-Kramerius-0.04 by SKIM https://metacpan.org/release/SKIM/Data-Kramerius-0.04
[15:37:13] *** Joins: nightw0lf (~nightw0lf@77.125.126.211)
[15:37:18] *** Quits: nightw0lf (~nightw0lf@77.125.126.211) (Remote host closed the connection)
[15:47:05] * GumbyPAN CPAN Upload: Crypt-OpenSSL-PKCS12-1.9 by JONASBN https://metacpan.org/release/JONASBN/Crypt-OpenSSL-PKCS12-1.9
[15:48:21] *** Quits: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 265 seconds)
[15:57:56] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[15:59:45] *** Joins: martinus__ (~martin@95.31.201.77.rev.sfr.net)
[16:08:13] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[16:21:11] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 268 seconds)
[16:27:35] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[16:33:13] *** Joins: jabberwok (~wlindley@75.105.20.104)
[16:34:22] *** Quits: SergeiZhmylev (~zhmylove@178.252.127.211) (Read error: Connection reset by peer)
[16:34:48] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[16:37:13] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[16:37:30] *** Joins: tejr (~tejr@user/tejr)
[16:44:02] *** Joins: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net)
[16:48:31] *** Joins: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[16:52:12] * GumbyPAN CPAN Upload: Crypt-Perl-0.37_01 by FELIPE https://metacpan.org/release/FELIPE/Crypt-Perl-0.37_01
[16:53:22] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 260 seconds)
[16:55:33] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[17:09:43] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[17:11:28] <simcop2387> oh boy
[17:13:38] <simcop2387> https://www.onelook.com/reverse-dictionary.shtml?s=urge%20to%20love
[17:13:38] <Paperbot> Link title(s): [ OneLook Reverse Dictionary and Thesaurus ]
[17:13:46] <simcop2387> fun site, look up words by their definitions
[17:13:51] <zgu> urge to kill rising
[17:14:10] <simcop2387> yea that's what i started with
[17:19:17] <simcop2387> perlbot: macro reverse dictionary is `eval use ojo; my $q=j `quote d `get https://api.onelook.com/words?ml=`fact _urlencode `arg!!&qe=ml&md=dp&max=6&k=olthes_r4 .*!!; $q->[0]->{word}.": ".join ', ', map {$q->[$_]->{word} // ''} 1..5!
[17:19:18] <perlbot> simcop2387: Stored reverse dictionary is `eval use ojo; my $q=j `quote d `get https://api.onelook.com/words?ml=`fact _urlencode `arg!!&qe=ml&md=dp&max=6&k=olthes_r4 .*!!; $q->[0]->{word}.": ".join ', ', map {$q->[$_]->{word} // ''} 1..5!
[17:19:23] <simcop2387> perlbot: reverse dictionary urge to kill
[17:19:26] <simcop2387> zgu: have fun :)
[17:19:41] <perlbot> simcop2387: urge to kill: homicidal, homicidal urge, murderous, bloodlust, wanna
[17:19:46] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 268 seconds)
[17:21:31] <LeoNerd> Today I'm suffering from Early Adopter's Remose... coupled with dogfooding
[17:21:49] <LeoNerd> I have sooo much code that does `class B extends A ...` and now I'm having to rewrite it all to `class B :isa(A) ...`
[17:21:50] <simcop2387> have to break an api?
[17:21:56] <simcop2387> ha
[17:22:09] <LeoNerd> If only I hadn't used my own early stuff so much... I'd have less work to do now
[17:22:39] <simcop2387> yea but then you might not have ended up getting it far enough to where it was around to rewrite anyway
[17:27:27] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[17:28:46] *** Joins: diskin (~diskin@31.23.126.221)
[17:30:16] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[17:30:43] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[17:43:40] *** Joins: pucara (~i@181.93.164.73)
[18:02:34] <jabberwok> Code, like a model train layout, is never truly finished
[18:02:49] <LeoNerd> Mmmhmm
[18:03:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[18:04:19] *** Joins: gast0n (~g4570n@user/gast0n)
[18:09:23] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[18:12:01] <simcop2387> alright, going to be taking down my server that runs perlbot and everything.  will have it back up later today after i finish some maintenance work
[18:19:13] *** Joins: rgrinberg (~textual@201.192.183.53)
[18:21:22] * GumbyPAN CPAN Upload: Task-Kramerius-0.01 by SKIM https://metacpan.org/release/SKIM/Task-Kramerius-0.01
[18:24:55] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[18:26:16] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[18:26:59] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Ping timeout: 268 seconds)
[18:27:38] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Ping timeout: 260 seconds)
[18:27:49] *** Quits: perldoc (~perldoc@24.88.49.194) (Ping timeout: 256 seconds)
[18:28:13] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 268 seconds)
[18:28:13] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 268 seconds)
[18:28:13] *** Quits: kaitlyn03 (~kaitlyn@user/kaitlyn) (Ping timeout: 268 seconds)
[18:36:15] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 268 seconds)
[18:37:52] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[18:46:24] * GumbyPAN CPAN Upload: Tickit-Widgets-0.34 by PEVANS https://metacpan.org/release/PEVANS/Tickit-Widgets-0.34
[18:51:02] *** Quits: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[18:51:25] * GumbyPAN CPAN Upload: Tickit-Widget-Menu-0.14 by PEVANS https://metacpan.org/release/PEVANS/Tickit-Widget-Menu-0.14
[18:56:25] * GumbyPAN CPAN Upload: Tickit-Widget-Choice-0.06 by PEVANS https://metacpan.org/release/PEVANS/Tickit-Widget-Choice-0.06
[18:59:17] *** Quits: kylese (~kylese@p5483508b.dip0.t-ipconnect.de) (Quit: Leaving)
[19:01:26] * GumbyPAN CPAN Upload: Tickit-Widget-FloatBox-0.10 by PEVANS https://metacpan.org/release/PEVANS/Tickit-Widget-FloatBox-0.10
[19:01:26] * GumbyPAN CPAN Upload: Tickit-Widget-ScrollBox-0.11 by PEVANS https://metacpan.org/release/PEVANS/Tickit-Widget-ScrollBox-0.11
[19:03:11] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 250 seconds)
[19:06:26] * GumbyPAN CPAN Upload: Tickit-Widget-Scroller-0.27 by PEVANS https://metacpan.org/release/PEVANS/Tickit-Widget-Scroller-0.27
[19:06:26] * GumbyPAN CPAN Upload: Tickit-Widget-SegmentDisplay-0.08 by PEVANS https://metacpan.org/release/PEVANS/Tickit-Widget-SegmentDisplay-0.08
[19:06:38] <aquanight> ugh. I think I sometimes very crucially do not understand what is going on with PL_stack_sp and dSP apparently.
[19:07:04] <aquanight> like they're supposed to be connected but then sometimes it seems like the two are just doing very different things
[19:08:07] <aquanight> ... and then there's all the stuff perl friggin hides in its #defines
[19:08:45] <LeoNerd> PL_stack_sp is the "real" value in the real interpreter vars/struct
[19:08:53] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[19:08:56] <LeoNerd> dSP declares a local variable copy because in the 1990s compilers weren't very good
[19:09:10] <LeoNerd> dSP and SPAGAIN copy it from the real struct to the local cached copy
[19:09:13] <LeoNerd> PUTBACK copies it back again
[19:09:35] <LeoNerd> All of the macros that operate on the stack work on the local copy, because 1990s compilers weren't good enough at optimising that
[19:09:46] <LeoNerd> I suspect these days it's a stupid overcomplication we could get rid of
[19:10:19] <aquanight> what confused me was that for a lot of the time it looked like things would mess with dSP
[19:10:25] <aquanight> and then never put it back in PL_stack_sp
[19:10:31] <aquanight> and it turns out that's hidden in the RETURN macro
[19:10:45] <LeoNerd> Oh.. yeah.. that's annoyingly subtle
[19:11:01] <aquanight> so I'm like looking pp_anonlist for example
[19:11:39] <aquanight> and thinking "okay so it copied mark to top into an AV, set the local SP back to the mark, pushed the AV over whatever is there, so what's S_gen_constant_list going to have when it gets control back"
[19:11:53] <aquanight> and I'm liking, is it basically going to be all the value still on the stack but with the first replaced by an AV
[19:12:04] <aquanight> aaaaand nope
[19:12:38] <aquanight> of course
[19:12:52] <aquanight> that's not even to talk about what happens to all the SVs on the stack when SP is moved back down
[19:13:09] <aquanight> do they just... exist there until something some time later cleans them up?
[19:13:20] <aquanight> is that what things like SAVETMPS/FREETMPS is for?
[19:13:35] <LeoNerd> Hm?
[19:13:53] *** Joins: thrig (~thrig@207.108.197.156)
[19:14:00] <aquanight> well taking pp_anonlist again for an example
[19:14:20] <aquanight> the av_make will copy all the stack SVs into the AV (and says you can free the originals after)
[19:14:44] <aquanight> well it doesn't specifically copy from the stack, but anonlist uses the stack to do it
[19:15:21] <aquanight> it then does SP = MARK and the hidden PUTBACK, so what happened to all the svs that are now "above" the top?
[19:15:50] <aquanight> they're presumably considered "invalid" at that point but they're still... there.
[19:16:02] <LeoNerd> The (value) stack isn't an AV, don't forget
[19:16:08] <aquanight> yes
[19:16:11] <LeoNerd> It's a plain C array of plain C pointers, so the rules don't really apply
[19:16:18] <LeoNerd> Specifically things like refcounting and whether it must be valid
[19:16:27] * GumbyPAN CPAN Upload: Test-UnixCmdWrap-0.04 by JMATES https://metacpan.org/release/JMATES/Test-UnixCmdWrap-0.04
[19:16:54] <LeoNerd> pointer values that happen to be in the C array above the SP just don't matter... who cares? You're not supposed to be looking at them
[19:17:03] <aquanight> right
[19:17:26] <aquanight> but in the mean time they do still contain things. Specifically whatever they used to contain when whatever thing was last used them.
[19:17:29] <LeoNerd> SP is always the top of the stack, so if someone moves that SP downwards, they've basically just truncated the stack. All is fine - just don't worry about those extra values there
[19:17:47] <LeoNerd> Sure, stale pointers exist
[19:17:54] <LeoNerd> That's typical of C code :)
[19:18:05] <LeoNerd> Just don't look at them - they're not supposed to be touched
[19:18:32] <aquanight> I get that part. But the nagging question in me is if those things are containing pointers to things that now will never get cleaned up.
[19:18:44] <LeoNerd> What do you mean "cleaned up"?
[19:18:58] <LeoNerd> Would it make you feel happy if someone Zero()'ed them out?
[19:19:23] <thrig> I've never figured out what is "explicit" about bzero
[19:19:25] <aquanight> either that or I'm really missing something about how taking things off the stack works
[19:19:42] <LeoNerd> Why would Zero'ing help?
[19:20:06] <LeoNerd> Don't forget - nobody is supposed to be reading those values yet... the next time those array cells get touched will be because someone has PUSH'ed something there. Which starts off with a write
[19:20:12] <aquanight> no I don't think it's the zeroing it's more
[19:20:20] <LeoNerd> So nobody will be reading anyway. So what difference does it make whether it was zeroed out first?
[19:20:44] <aquanight> ok simpler exmaple
[19:20:47] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 264 seconds)
[19:21:03] <aquanight> I've done something like SV* thing = POPs;
[19:21:15] <aquanight> does this mean I'm now responsible for thing?
[19:21:18] <aquanight> I would assume it does.
[19:21:37] <LeoNerd> Define "responsible"
[19:21:49] <aquanight> for making sure it either gets refcounted or freed or *something*
[19:22:00] <LeoNerd> Not reeeeallly
[19:22:00] <aquanight> and we don't just have a random SV floating around until heat death
[19:22:13] <LeoNerd> 15:46 <LeoNerd> Specifically things like refcounting  <== remember this
[19:22:18] <aquanight> right
[19:22:23] <LeoNerd> SV pointers on the value stack don't count as far as refcounting goes
[19:22:29] <aquanight> yes
[19:22:35] <LeoNerd> So you simply POPs'ing something doesn't alter it
[19:22:52] <aquanight> so 1) what stops an SV in the stack from getting freed / 2) what ensures it *does* get freed when it should?
[19:23:01] <LeoNerd> The convention is that stack values are either temporary mortals, or additional pointers to other things that already have stable storage
[19:23:04] <LeoNerd> That's mortalization
[19:23:21] <LeoNerd> Aka the SVf_TEMP flag bit, and the tmps stack
[19:23:40] <LeoNerd> E.g. go see what  sv_2mortal() does
[19:23:48] <aquanight> ooookay. See I've always seen stuff like sv_2mortal and stuff like that and it's like wtf does that even *mean*.
[19:24:04] <LeoNerd> So now would be a good time to answer that question
[19:24:22] <aquanight> because my immediate thought would go "okay mortal would mean normal refcounting and it goes away at refcount 0, immortal means it's a "permanent" SV like a constant"
[19:24:30] <LeoNerd> Hah.. no
[19:24:36] <xenu> >1) what stops an SV in the stack from getting freed
[19:24:39] <xenu> literally nothing
[19:24:39] <LeoNerd> It's -really- badly named
[19:24:57] <LeoNerd> immortal SVs are ones whose refcount doesn't apply; they are permanent static things that always exist
[19:25:07] <LeoNerd> mortal SVs are ones that will be thrown away "soon", for some defition of soon
[19:25:12] <aquanight> okay so I had that much right
[19:25:14] <LeoNerd> regular SVs are neither immportal nor mortal
[19:25:22] <LeoNerd> They're a sortof third state
[19:25:26] <aquanight> wooo some tristate madness
[19:25:30] <LeoNerd> Yah
[19:25:34] <aquanight> semi-mortal? demigods? I dunno.
[19:25:58] <LeoNerd> "mortal" is a very silly name for it. I'd have called them... I dunno.. transient? neardeath?
[19:26:00] <LeoNerd> spectral? ;)
[19:26:13] <LeoNerd> Anything that doesn't soudn like it's the opposite of immortal, because it really isn't
[19:26:36] <LeoNerd> SVf_LIVING_ON_BORROWED_TIME
[19:26:50] <aquanight> okay so mortal SVs are nuked at FREETMPS or perl statement boundaries
[19:27:00] <aquanight> temporaries
[19:27:12] <LeoNerd> Yes (which is the same thing, because statement boundiares imply a FREETMPS)
[19:27:51] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[19:27:52] <aquanight> rvalues
[19:28:38] <aquanight> except calling them that would get confusing because people would want to shorten to RV
[19:28:50] <aquanight> but temps works
[19:29:03] *** Joins: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net)
[19:30:29] <aquanight> ok, so basically the stack is never the "owning" pointer for an SV since it's either in the temps list or else it's a copy of something in a PAD/GV/AV/HV/another-SV
[19:30:56] <aquanight> pointer to* something I should say
[19:31:09] <aquanight> or it's an immortal SV and I don't have to care at all.
[19:31:46] <thrig> Beethoven was fond of one of those
[19:32:12] <LeoNerd> Yup
[19:32:20] <aquanight> and since av_make gives it an initial refcount of 1, I should be fine to just slap it into a OP_CONST and go
[19:32:49] <LeoNerd> For doing what?
[19:33:23] <aquanight> this is all related to :pure. I ended up deciding I'll need a separate :purelist for subs that want to return lists.
[19:33:32] *** Linux77_ is now known as Linux77
[19:33:43] <aquanight> since I otherwise don't know the context during callcheck
[19:35:38] <aquanight> I've not yet decided if I want to keep the enforced context when the sub call is not being inlined but that's relatively easy to do: wrap the sub in either OP_SCALAR or OP_AASSIGN
[19:35:57] <aquanight> wrap the *OP_ENTERSUB
[19:36:16] <LeoNerd> Er.. why not just set the want flags on it?
[19:36:40] <LeoNerd> op_contextualize(entersubop, G_SCALAR)  or  ..., G_LIST)
[19:36:57] <aquanight> if I put OPf_WANT_LIST on the entersub and it turns out the containing expression is $x = thing() what will happen?
[19:37:19] <aquanight> because if I'm understanding when the callchecker occurs correctly
[19:37:26] <aquanight> I do not yet knwo the "$x =" part even exists yet
[19:37:38] <aquanight> I only get to see 'thing()'
[19:37:44] <LeoNerd> Ah.. hrm yes in that case that'll be a bit fun.. it'll generate a list with a mark and then nothing will popmark it and... much upset
[19:38:10] <aquanight> with purecall, I leave want alone, but it'll be made RV2AV>CONST like any other list constant
[19:38:29] <aquanight> and I believe normal parsing will then apply scalar context to the RV2AV, resulting in "scalar @x" behavior
[19:38:42] <aquanight> to get the same if the sub is *not* purecalled, I would need to wrap it in AASSIGN
[19:43:57] <aquanight> honestly... the idea of using a callchecker to *force* a sub to always run in scalar or in list context could be useful enough on its own I might have to consider that part as separate attributes
[19:44:15] <aquanight> if only perl were not trending in a direction that is increasing the number of of unchecked sub calls
[19:45:05] <thrig> C did add prototypes, for better or worse
[19:47:51] <LeoNerd> Yeah - I keep meaning to write a little module to provide :void :scalar :list attrs
[19:47:57] <LeoNerd> That would be nice to force a context
[19:48:20] <aquanight> admittedly I'm not sure how :void could be done
[19:48:37] <LeoNerd> Hrm?
[19:48:48] <aquanight> I mean I can easily see how to do :scalar and :list
[19:49:12] <LeoNerd> You might be imagining something different to me, then
[19:49:15] <aquanight> :scalar -> embed into OP_SCALAR / :list -> embed into OP_AASSIGN
[19:49:19] <LeoNerd> Er.. no
[19:49:28] <aquanight> ah are we not talking callchecker then?
[19:49:31] <LeoNerd> No
[19:49:35] <aquanight> but attacking it from the CV* side instead?
[19:49:40] <LeoNerd> Yeah
[19:49:55] <LeoNerd> insert a "force my context" op at the head of the optree, which just forces the want value in ctx
[19:50:02] <LeoNerd> So anywhere inside the sub it believes it's in that context
[19:50:20] <LeoNerd> :void => return never returns anything
[19:50:24] <aquanight> I think you wouldn't even need that
[19:50:46] <aquanight> you just need to locate those ops that have schroedinger's context and set their want flags
[19:50:49] <LeoNerd> It then forces the context of a `return EXPR` or the final expr of the block
[19:50:55] <LeoNerd> No, because caller()
[19:51:03] <aquanight> ?
[19:51:05] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:4cbd:61c7:e4a0:2ac4)
[19:51:13] <LeoNerd> One of the results of caller() lets you see the calling context
[19:51:27] <aquanight> ah
[19:51:50] <aquanight> so the sub would not be able to discover that its actual context was differnt?
[19:52:14] <aquanight> and what would happen when said actual context is different?
[19:52:27] <aquanight> forced-nonvoid in void context is obvious enough the value is just binned
[19:53:22] <aquanight> forced-void in nonvoid is probably just undef/() as usual. It's the forced-list in scalar context that I would wonder about.
[19:54:27] <LeoNerd> That one still needs some thought. Either warn and do something weird, or fail...
[19:54:37] <LeoNerd> Where "something weird" is probably count or first/final value
[19:54:57] <aquanight> I think count tends to be the most common result of scalarized lists
[19:55:01] *** Joins: Shells (~michelle@2407:8800:bc20:200a:bce1:cf4b:b4d2:b872)
[19:55:38] <aquanight> e.g. arrays, list constants, list assignment, s///g
[19:56:15] <aquanight> last item is only in list expressions including scalar comma emulated by scalar(@thing[stuff])
[19:56:39] <aquanight> and one can't forget the weirdest of all
[19:56:45] <thrig> in crazy things from C category
[19:57:08] <aquanight> the first time you do it, return if $. equals the first item. Then return true until $. equals the last item.
[19:57:33] <aquanight> emulated flipflop
[19:57:42] *** Quits: Michelle (~michelle@203.206.128.220) (Ping timeout: 260 seconds)
[19:59:10] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[20:00:22] *** Joins: kensanata (~user@user/kensanata)
[20:00:30] <aquanight> wait what the frick
[20:00:39] <aquanight> av_make gives it a refcount of 1
[20:00:47] <LeoNerd> The returned AV, yes
[20:00:48] <aquanight> why is S_gen_constant_list incrementing the refcount again?
[20:01:35] <aquanight> av = (AV *)SvREFCNT_inc_NN(*PL_stack_sp--); <- where it grabs the AV made by pp_anonlist
[20:02:16] <aquanight> does mXPUSHs do something to it?
[20:02:37] <aquanight> ah. it does sv_2mortal to it
[20:02:45] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 265 seconds)
[20:05:58] <aquanight> I'm missing something again
[20:06:49] <aquanight> so anonlist does the av_make, mXPUSHs which apparently does sv_2mortal, that goes into gen_constant_list, which pulls it from the stack, increments refcount, puts it in an OP_CONST
[20:07:07] <aquanight> then it walks the contents of that AV and marks them as PADTMP and READONLY
[20:08:24] <aquanight> so unless I'm missing something the AV *itself* is... refcount of 2, mortal, and pointed to by an OP_CONST
[20:08:54] <LeoNerd> That probably doesn't surprise me. I wouldn't necessarily expect the refcount of every SV referenced by the optree to be exactly minimal
[20:09:03] <LeoNerd> It might be that there's a spare ref there, but since it's stored in the optree... eh. *shrug*
[20:09:19] <aquanight> the "mortal" part is what particularly bugs me
[20:09:22] <LeoNerd> In practice optrees basically never go away
[20:09:35] <LeoNerd> Oh.. right.. don't forget that being mortal isn't... isn't really a state
[20:09:45] <aquanight> because unless I'm missing something that means it's now in the tmplist.
[20:09:46] <LeoNerd> A mortalized SV is just one that has a deferred SvREFCNT_dec coming sometime later
[20:09:53] <LeoNerd> Yes. That's all the tmplist is though
[20:09:56] <aquanight> wait
[20:10:00] <aquanight> so it's just a ref dec
[20:10:06] <LeoNerd> Since its count is currently 2, that just means the deferred dec makes it 1 again later
[20:10:08] <aquanight> it's *not* a forced delete
[20:10:23] <LeoNerd> Indeed
[20:10:44] <aquanight> so then
[20:10:57] <aquanight> that makes sense. It'll be refcount 1 which is correct since it's ref'd in the SVOP
[20:11:43] <aquanight> ok so if in my approach I'm going to bypass the stack I don't need to worry about that weirdness.
[20:13:36] <aquanight> so
[20:13:55] <aquanight> is it a normal pattern to do a increment + set mortal when putting something on the stack?
[20:14:19] <LeoNerd> Sometimes... sometimes you just don't bother
[20:14:29] <LeoNerd> that's kindof the entire point of not doing it... saves on refcount fiddling
[20:14:48] <aquanight> right
[20:14:59] *** Joins: gast0n (~g4570n@user/gast0n)
[20:15:16] <aquanight> ah the difference between PUSHs and mPUSHs
[20:15:57] <aquanight> this explains so much
[20:16:16] <LeoNerd> It's why you'd often see e.g.  mPUSHs(newSViv(123));
[20:16:27] <LeoNerd> which is just what the   mPUSHi(123);  shortcut does
[20:16:50] <aquanight> way back when I was trying to experiment with "forced object deletion" I kept wondering what the fuck was up with the refcount.
[20:17:58] <aquanight> this mortality nonsense was probably part of that
[20:18:09] <LeoNerd> Yeah maybe
[20:18:38] <aquanight> what I find interesting is being mortal only schedules *one* REFCNT_dec
[20:18:55] <aquanight> what happens if you mPUSHs an already-mortal SV?
[20:19:01] <aquanight> presumably "nothing special"
[20:19:45] <aquanight> but I suppose if you're blindly taking SVs and mortalizing them and not knowing what you're doing you're going to set your hair on fire
[20:19:49] <thrig> "When we have shuffled off this mortal coil,"
[20:23:44] <LeoNerd> You'll get that warning about attempted to free unreferenced scalar
[20:24:00] <LeoNerd> just as if you did SV *sv = newSV(0); SvREFCNT_dec(sv); SvREFCNT_dec(sv);
[20:32:20] <aquanight> LeoNerd: the only thing left that bugs me right now is how call checkers aren't really easily chained.
[20:32:44] <LeoNerd> chained?
[20:32:59] <aquanight> new checker calls old checker before/after doing its own thing
[20:33:36] <LeoNerd> Oh.. multiple for the same CV? Yeah... don't do that
[20:33:42] <aquanight> similar to how PL_check and PL_keyword_plugin do
[20:33:46] <aquanight> ... eh?
[20:34:24] <aquanight> it's that bad?
[20:35:08] <LeoNerd> Well as you say there isn't a chaining mechanism
[20:35:48] <aquanight> yes
[20:36:33] <aquanight> so I was thinking assuming i saved both the old checker *and* its check object, why shouldn't I be able to call the previous checker?
[20:37:07] *** Quits: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net) (Ping timeout: 268 seconds)
[20:37:18] <LeoNerd> You could I suppose
[20:37:38] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:37:52] <aquanight> please tell me that at least calling the *default* checker (ck_entersub_args_proto_or_list) is safe (assuming I saved 'protosv')?
[20:38:50] <aquanight> because I sorta would like :prototype(...) to still work if possible
[20:39:26] <LeoNerd> I've no idea
[20:39:45] <aquanight> guess I just have to find out
[20:40:01] <aquanight> also I just realized
[20:40:14] <aquanight> sweval: sub foo :lvalue ; foo = 42;
[20:40:39] <aquanight> bah perlbot out to lunch I guess
[20:40:54] <aquanight> yup
[20:41:07] <aquanight> actually that's not so bad
[20:43:13] <aquanight> it's just a normal error I already handle those.
[20:43:41] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[20:46:36] * GumbyPAN CPAN Upload: Tree-RB-XS-0.05 by NERDVANA https://metacpan.org/release/NERDVANA/Tree-RB-XS-0.05
[20:48:55] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 256 seconds)
[20:52:54] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[20:53:08] *** Quits: X-Scale (~ARM@83.223.248.137) (Ping timeout: 268 seconds)
[20:54:14] *** X-Scale` is now known as X-Scale
[20:59:41] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[21:02:02] *** Quits: xenial-user5 (~androirc@20014C4C17E1D200EC9C2DDEAD4C145C.catv.pool.telekom.hu) (Ping timeout: 260 seconds)
[21:11:38] * GumbyPAN CPAN Upload: CPAN-Mirror-Tiny-0.32 by SKAJI https://metacpan.org/release/SKAJI/CPAN-Mirror-Tiny-0.32
[21:16:34] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 268 seconds)
[21:21:02] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 240 seconds)
[21:25:11] *** Quits: Su-Shee (~Susanne@p508943e8.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[21:26:40] *** Joins: tobybl (~tobybl@213.31.134.235)
[21:27:02] *** Joins: Su-Shee (~Susanne@p4ffc7afe.dip0.t-ipconnect.de)
[21:50:47] *** Quits: rgrinberg (~textual@201.192.183.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:53:54] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[21:54:08] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[22:14:50] *** fling is now known as ciphersalad
[22:15:36] *** ciphersalad is now known as fling
[22:26:46] * GumbyPAN CPAN Upload: Alien-uPB-Core-0.20 by MBARBON https://metacpan.org/release/MBARBON/Alien-uPB-Core-0.20
[22:27:21] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Quit: ZNC 1.8.2 - https://znc.in)
[22:27:48] *** Joins: deadmarshal (~deadmarsh@95.38.119.180)
[22:36:47] * GumbyPAN CPAN Upload: Google-ProtocolBuffers-Dynamic-0.34 by MBARBON https://metacpan.org/release/MBARBON/Google-ProtocolBuffers-Dynamic-0.34
[22:40:02] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[22:42:20] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[22:42:55] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 268 seconds)
[22:55:44] *** Joins: gast0n (~g4570n@user/gast0n)
[22:55:53] *** Quits: deadmarshal (~deadmarsh@95.38.119.180) (Ping timeout: 250 seconds)
[23:10:02] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 268 seconds)
[23:41:02] *** Quits: finsternis (~X@23.226.237.192) (Ping timeout: 240 seconds)
[23:41:47] *** Joins: finsternis (~X@23.226.237.192)
[23:56:05] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[23:56:51] <dacav> Hi #perl :)
[23:56:57] *** Joins: kensanata (~user@user/kensanata)
[23:58:18] *** nicoz- is now known as nicoz
[23:58:24] *** nicoz is now known as nicoz-
