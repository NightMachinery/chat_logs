[00:54:46] <fn> <11ForumUpdaterBot99> New thread by Gadersd: Can't create sequence with newSeq, see https://forum.nim-lang.org/t/8221
[01:19:36] <FromDiscord> <theangryepicbanana> I'm aware that procs and stuff can be overloaded, but can types be overloaded in any way (without macros)?
[01:20:07] <FromDiscord> <theangryepicbanana> like `type Thing[T] = ..., Thing[T, U] = ...`
[01:20:38] <FromDiscord> <ElegantBeef> Well they're two separate generic instantiations, so they should be, make the most specific then the least specific
[01:21:07] <FromDiscord> <theangryepicbanana> In reply to @ElegantBeef "Well they're two separate": wdym by that last part?
[01:21:34] <FromDiscord> <ElegantBeef> Ah nvm i'm wrong ðŸ˜„
[01:21:53] <FromDiscord> <Bung> that's not called overload
[01:22:12] <FromDiscord> <ElegantBeef> You'll basically need to use procedures to do this
[01:22:37] <FromDiscord> <theangryepicbanana> In reply to @Bung "that's not called overload": I'm also hoping that `type Thing[T: A] = ..., Thing[T: B] = ...` would be possible, but it's less likely
[01:23:20] <FromDiscord> <ElegantBeef> Best i can think of
[01:23:25] <FromDiscord> <ElegantBeef> sent a code paste, see https://play.nim-lang.org/#ix=3sHp
[01:23:30] <FromDiscord> <theangryepicbanana> nope, need an actual type
[01:24:05] <FromDiscord> <theangryepicbanana> it's worth noting that even pascal supports multiple arities for types, so I'm not sure why nim can't have it
[01:24:21] <FromDiscord> <Bung> you'd probaly type A[T]  type B[T,P] =  , then you use Type C = B[T,P],    A[C]
[01:24:32] <FromDiscord> <theangryepicbanana> I'd prefer for them to have the same name
[01:24:56] <FromDiscord> <Bung> guess not possible
[01:25:04] <FromDiscord> <theangryepicbanana> dang
[01:25:49] <FromDiscord> <theangryepicbanana> completely unrelated question (that I can provide context for if needed), but is it possible to have an object inherit from multiple types?
[01:26:14] <FromDiscord> <ElegantBeef> There is no MI
[01:26:23] <FromDiscord> <theangryepicbanana> would like to at least have some way of emulating interfaces/protocols/traits/etc seen in some other langs
[01:26:26] <FromDiscord> <ElegantBeef> But if you just want to copy fields it's rather simple
[01:26:40] <FromDiscord> <theangryepicbanana> well I still need the "is-a" type relationships
[01:26:43] <FromDiscord> <ElegantBeef> https://github.com/yglukhov/iface
[01:26:44] <fn> <12R2D299> 4GitHub: 7"<No Description>"
[01:27:05] <FromDiscord> <Bung> ooputils lib
[01:27:14] <FromDiscord> <theangryepicbanana> In reply to @ElegantBeef "https://github.com/yglukhov/iface": no like explicit interfaces, not golang interfaces lol
[01:27:58] <FromDiscord> <Bung> that acutall create all single type not like other language
[01:28:26] <FromDiscord> <theangryepicbanana> In reply to @Bung "ooputils lib": is this in the stdlib or a nimble package?
[01:28:56] <FromDiscord> <Bung> !package ooputils
[01:29:15] <FromDiscord> <Bung> hmm what's the bot command?
[01:30:18] <FromDiscord> <theangryepicbanana> In reply to @Bung "hmm what's the bot": dunno but I found it
[01:30:24] <FromDiscord> <theangryepicbanana> does it support interfaces?
[01:30:39] <FromDiscord> <theangryepicbanana> I'm basically looking for something like a concept but as a runtime thing
[01:30:58] <FromDiscord> <theangryepicbanana> (which is kinda what an interface/protocol is)
[01:31:45] <FromDiscord> <Bung> does not like , use that you'll only care about final object
[01:31:59] <FromDiscord> <theangryepicbanana> ?
[01:32:23] <FromDiscord> <Bung> some like typescript -> js
[01:32:53] <FromDiscord> <Bung> type info are striped out
[01:32:56] <FromDiscord> <theangryepicbanana> basically I want to be able to support something like `type Thing = a, b: Comparable`
[01:33:26] <FromDiscord> <theangryepicbanana> like I'm aware nim isn't exactly oop, but I'm sure it can be emulated somehow
[01:35:02] <FromDiscord> <leorize> there are a few attempts at emulating those
[01:35:19] <FromDiscord> <theangryepicbanana> I'm looking to bootstrap a language I'm working on by compiling to nim (since nim is the only language with features from my language like distinct types, generic multimethods, and an overall awesome type system), however this is like the one thing I'm stuck on
[01:35:19] <FromDiscord> <leorize> an in-language feature was concepts but it's under developed
[01:36:17] <FromDiscord> <theangryepicbanana> yeah I love concepts, but they are typeclasses and as a result, aren't runtime types
[01:36:31] <FromDiscord> <theangryepicbanana> available at runtime
[01:36:50] <FromDiscord> <ElegantBeef> Well the new concepts might help in this regard, but still uncertain what you're after
[01:37:23] <FromDiscord> <theangryepicbanana> c++ is the only other language I could use, however it doesn't have distinct types, (virtual) generic multimethods, or recursive concepts
[01:38:08] <FromDiscord> <ElegantBeef> https://github.com/beef331/constructor/blob/master/tests/timplements.nim this uses new concepts
[01:38:18] <FromDiscord> <ElegantBeef> And gives interface like logic
[01:38:46] <FromDiscord> <theangryepicbanana> ok so like for reference, this is the language this is for <https://github.com/ALANVF/star>
[01:39:05] <FromDiscord> <theangryepicbanana> `star` and `stdlib` have some example code
[01:39:24] <FromDiscord> <theangryepicbanana> you can think of it has a nim + scala hybrid
[01:39:31] <FromDiscord> <theangryepicbanana> (edit) "has" => "as"
[01:40:02] <FromDiscord> <theangryepicbanana> if you've ever seen nim's compiler, you'll know that typechecking is very complicated
[01:40:20] <FromDiscord> <theangryepicbanana> same deal here, which is why I want to use nim's typesystem
[01:41:30] <FromDiscord> <theangryepicbanana> In reply to @ElegantBeef "And gives interface like": yeah but it's still a compile time thing (and they're always generic from what I can tell), so I can't use the type at runtime
[01:41:42] <FromDiscord> <Bung> oh, cool, write in haxe
[01:41:46] <FromDiscord> <theangryepicbanana> (edit) "same deal here, which is why I want to use nim's typesystem ... " 03added "to bootstrap"
[01:42:01] <FromDiscord> <theangryepicbanana> yeah almost chose nim, but haxe allows recursive modules ;)
[01:42:15] <FromDiscord> <theangryepicbanana> (edit) "recursive" => "circular"
[01:43:24] <FromDiscord> <theangryepicbanana> but yea I basically don't want to write any of the typechecker in haxe (because it's not a very good lang otherwise lol), so I can theoretically compile to nim by only typechecking a little bit on my own
[01:43:51] <FromDiscord> <theangryepicbanana> (then ya know, actually rewrite the whole thing in my lang)
[01:44:22] <FromDiscord> <theangryepicbanana> it's a weird idea, but I think it'll work. at least easier than c++ lol
[01:44:35] <FromDiscord> <Bung> hmm, haxe is also awesome language
[01:44:49] <FromDiscord> <theangryepicbanana> yeah but it goes downhill really quickly
[01:44:52] <FromDiscord> <Bung> dont know why you choose one then come to another
[01:45:03] <FromDiscord> <theangryepicbanana> primarily because macros can't call other macros
[01:45:13] <FromDiscord> <theangryepicbanana> oh I'm not writing the lang in nim
[01:45:19] <FromDiscord> <theangryepicbanana> I want the lang to compile to nim initially
[01:47:06] <FromDiscord> <Bung> oh, so you can just generate code to nim
[01:47:45] <FromDiscord> <theangryepicbanana> yeah basically
[01:48:00] <FromDiscord> <Bung> you can striped out interface info
[01:48:11] <FromDiscord> <Bung> like ts compiler
[01:48:15] <FromDiscord> <theangryepicbanana> for some stuff I can
[01:48:25] <FromDiscord> <theangryepicbanana> but I still need to allow runtime checks for interfaces
[01:48:47] <FromDiscord> <theangryepicbanana> (also uh, star supports multiple inheritance, so that's a bit of an issue but eh)
[01:50:02] <FromDiscord> <Bung> you'll map them like dart does I think
[01:50:29] <FromDiscord> <Bung> as code I shown
[01:50:42] <FromDiscord> <theangryepicbanana> I don't recall what dart does. are they stored as instance fields or something?
[01:51:44] <FromDiscord> <Bung> Type A extends B,C,D will be extends b(c,d)
[01:52:21] <FromDiscord> <Bung> create some middle types there
[01:52:58] <FromDiscord> <theangryepicbanana> huh, I'm not entirely sure how that would work given that you can only inherit from a single type
[01:53:43] <FromDiscord> <shadow.> is there a way to make nimlsp lint all the time, not just after saving?
[01:54:06] <FromDiscord> <Rika> In reply to @theangryepicbanana "huh, I'm not entirely": A inherits (B inherits (C inherits D)) ?
[01:54:16] <FromDiscord> <Bung> In reply to @theangryepicbanana "huh, I'm not entirely": copy their implementations
[01:54:27] <FromDiscord> <Rika> but C != C inherits D, B != B i C i D, etc
[01:54:30] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 265 seconds)
[01:55:01] <FromDiscord> <theangryepicbanana> In reply to @Bung "copy their implementations": I'd still like to have the subtype relationships if possible
[01:55:07] <FromDiscord> <Rika> basically "inherits" is an operator on types that returns a new type
[01:55:08] <FromDiscord> <Bung> sure, runtime check lie this will not work in this this way
[01:55:26] <FromDiscord> <theangryepicbanana> hmm
[01:55:51] <FromDiscord> <theangryepicbanana> well I suppose I'll find a workaround for that eventually
[01:55:56] <FromDiscord> <theangryepicbanana> is the type overloading thing is still a no?
[01:56:00] <FromDiscord> <theangryepicbanana> (edit) 04removed "is"
[01:56:12] <FromDiscord> <Rika> nim? no
[01:56:18] <FromDiscord> <theangryepicbanana> dang
[01:56:28] <FromDiscord> <theangryepicbanana> that'll probably make HKTs a pain to implement
[01:57:37] <FromDiscord> <theangryepicbanana> (higher-kinded types, basically stripGenericParams or genericHead)
[01:59:00] <FromDiscord> <Bung> if you can overload `is` or implement your own type check operator ,guess you'll need a BasicType has extro info about its parents.
[01:59:59] <FromDiscord> <theangryepicbanana> I guess
[02:00:41] <FromDiscord> <theangryepicbanana> thanks for the help though
[02:01:58] <FromDiscord> <theangryepicbanana> (still though, types should at least be able to be overloaded by arity)
[02:02:04] <FromDiscord> <theangryepicbanana> (edit) "arity)" => "arity at some pointy)"
[02:02:05] <FromDiscord> <theangryepicbanana> (edit) "pointy)" => "point)"
[02:02:15] <FromDiscord> <Rika> please start working on it then
[02:02:43] <FromDiscord> <theangryepicbanana> well I'm not demanding it, I'm just saying it's something that should be considered (because I haven't seen any RFCs for it)
[02:03:03] <FromDiscord> <Rika> perhaps you should write it because ive never heard anyone else talk about it
[02:03:14] <FromDiscord> <theangryepicbanana> really?
[02:03:19] <FromDiscord> <Rika> yeah not that i recall
[02:03:22] <FromDiscord> <Rika> (edit) "not" => "none"
[02:03:32] <FromDiscord> <theangryepicbanana> huh
[02:04:11] <FromDiscord> <theangryepicbanana> it's a thing in like every lang that supports function overloading
[02:04:34] <FromDiscord> <theangryepicbanana> well anyways yeah I might
[02:06:09] <FromDiscord> <ElegantBeef> What's the line "Features start in the unimplemented state"
[02:07:45] <FromDiscord> <Bung> interface mapping to nim backend
[02:20:21] <FromDiscord> <vishnumad> sent a code paste, see https://paste.rs/hK4
[02:21:21] <FromDiscord> <theangryepicbanana> no, but there's an RFC open for it rn iirc
[02:24:28] <FromDiscord> <theangryepicbanana> relevant pr <https://github.com/nim-lang/Nim/pull/18470>
[02:35:47] <FromDiscord> <ElegantBeef> Well it is
[02:36:13] <FromDiscord> <ElegantBeef> sent a code paste, see https://play.nim-lang.org/#ix=3sHQ
[02:36:37] <FromDiscord> <ElegantBeef> Pure makes it so if there are any overlaps you have to specify the "namespace" IE `FooEnum.A`
[02:36:56] <FromDiscord> <ElegantBeef> That PR just removes the latter need
[02:37:08] <FromDiscord> <ElegantBeef> Since if it can be resolved it removes redundant work
[02:40:30] *** Quits: maxime_ (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Quit: Leaving)
[02:41:06] <FromDiscord> <theangryepicbanana> oh lol
[02:46:50] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 255 seconds)
[02:59:05] <FromDiscord> <codic> can i use a http server like httpbeast and use treeform/ws to upgrade the connection to ws on a certain path?
[03:04:06] *** Quits: pro (~pro@user/pro) (Ping timeout: 265 seconds)
[03:09:23] *** Joins: vsantana (~Thunderbi@2804:388:6081:ebab:7577:54cf:1d27:fb88)
[03:16:03] *** Quits: vsantana (~Thunderbi@2804:388:6081:ebab:7577:54cf:1d27:fb88) (Quit: vsantana)
[03:17:02] *** Joins: vsantana (~Thunderbi@2804:388:6081:ebab:7577:54cf:1d27:fb88)
[03:18:06] <FromDiscord> <Bung> @ElegantBeef any news to nimscripter/
[03:21:07] *** Quits: vsantana (~Thunderbi@2804:388:6081:ebab:7577:54cf:1d27:fb88) (Client Quit)
[03:23:25] *** Joins: vsantana (~Thunderbi@2804:388:6081:ebab:7577:54cf:1d27:fb88)
[03:25:10] *** Quits: vsantana (~Thunderbi@2804:388:6081:ebab:7577:54cf:1d27:fb88) (Client Quit)
[03:29:05] <FromDiscord> <shadow.> In reply to @shadow. "is there a way": bump if anyone knows
[03:30:54] <FromDiscord> <dom96> In reply to @codic "can i use a": yep
[03:31:24] <FromDiscord> <Bung> In reply to @shadow. "bump if anyone knows": why is that if your code doesn't change
[03:31:35] <FromDiscord> <shadow.> well im not autosaving
[03:31:39] <FromDiscord> <shadow.> i just want it to update while im typing
[03:31:52] <FromDiscord> <shadow.> but i have to resave every time to get linting which is annoying
[03:32:29] <FromDiscord> <dom96> In reply to @codic "can i use a": although not sure ws supports this actually, you can definitely do it with https://github.com/niv/websocket.nim
[03:32:30] <fn> <12R2D299> 4GitHub: 7"websockets for nim"
[03:32:36] <FromDiscord> <dom96> (I use it for one of my projects with httpbeast)
[03:32:40] <FromDiscord> <ElegantBeef> @Bung i've started on it
[03:32:42] <FromDiscord> <Bung> when you say "linting" it shows what ?
[03:33:05] <FromDiscord> <shadow.>  https://media.discordapp.net/attachments/371759389889003532/863918342103236628/unknown.png
[03:33:09] <FromDiscord> <shadow.> the blue and red messages dont update until i save
[03:33:13] <FromDiscord> <shadow.> they do update on every other language server ive used
[03:33:17] <FromDiscord> <Bung> @ElegantBeef how is it going /
[03:33:18] <FromDiscord> <shadow.> im guessing it's a setting, i just don't know which one
[03:34:15] <FromDiscord> <Bung> em, I'll need check the code
[03:34:56] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:35:09] <FromDiscord> <shadow.> alrighty
[03:35:28] <FromDiscord> <dom96> @codic part of the code from my project showing how to do it with httpbeast: https://gist.github.com/dom96/26c574ec1491ba98181de6c532fa52fc
[03:35:35] <FromDiscord> <dom96> I should add this as an example in httpbeast's repo really
[03:36:05] <FromDiscord> <Bung> yeah, nimlsp only sync content when it get document changed notification.
[03:38:44] <FromDiscord> <codic> if websocket.nim does it ws should too
[03:38:47] <FromDiscord> <codic> thanks for the example!
[03:40:12] <FromDiscord> <codic> hmm the magical method there seems to be `addPlayer` doing the websocket part
[03:40:13] <FromDiscord> <Bung> if you find "Upgrade" in ws repo guess it will work too.
[03:42:32] <FromDiscord> <codic> and verifyWebsocketRequest
[03:48:21] <FromDiscord> <Bung> @shadow. you need syntax check while you typing ? nimlsp basicly do whole thing , you check your syntax and code error, so while you typing you write uncomplete variable name , it will be report as error.
[03:48:37] <FromDiscord> <Bung> (edit) "you" => ""
[03:48:39] <FromDiscord> <shadow.> yeah id like linting while im typing
[03:48:43] <FromDiscord> <shadow.> im aware of the ramifications
[03:49:31] <FromDiscord> <Bung> I can add support to that.
[03:50:27] <FromDiscord> <Bung> but that kind of anyoing when message pop up while typing
[03:54:37] <FromDiscord> <theangryepicbanana> hmm, apparently "vtable types" were a thing at one point. would've solved my issue from earlier, but they seem to have been removed from the docs since then <https://web.archive.org/web/20171104234508/https://nim-lang.org/docs/manual.html#generics-vtable-types>
[03:59:23] <FromDiscord> <cynahc> Might anyone have a suggestion as to how to properly free a `seq` passed to SDL2 with `addr`?
[03:59:38] <FromDiscord> <cynahc> This is the offending code with the leak\: https://gist.github.com/chancyk/f8fc70ea55ab61ac25db2df2f1a03c86#file-sdl_texture-nim-L12
[04:34:28] <FromDiscord> <ElegantBeef> @Bung i know exactly what i need to do just need to implement it
[04:35:07] <FromDiscord> <ElegantBeef> A few thugs attacked my dogs, so i have to go break their house apart and kill their children which delayed me
[04:35:25] <FromDiscord> <ElegantBeef> talking about killing wasps
[04:38:17] <FromDiscord> <geekrelief> What's a reliable to convert a table's keys to a seq?  I tried `toSeq(t.keys)` and that worked fine till I imported `dik` now I'm getting an error because `proc keys(self: Dictionary): Array` is defined and nim is complaining about a type mismatch.
[04:38:23] <FromDiscord> <ElegantBeef> cynahc you may want to use `GC_Ref` and `GC_Unref` for that
[04:39:17] <FromDiscord> <cynahc> @ElegantBeef\: Thanks! I'll look into it.
[04:39:40] <FromDiscord> <ElegantBeef> Well the `toSeq` method is right you probably want to do `toSeq(table.keys(t))` to get around that
[04:39:52] <FromDiscord> <ElegantBeef> You could also use `sugar.collect`
[04:41:08] <FromDiscord> <geekrelief> hmm `toSeq(table.keys(t))` didn't work
[04:41:30] <FromDiscord> <geekrelief> I'll try `sugar.collect`
[04:41:43] <FromDiscord> <geekrelief> thx
[04:43:31] <FromDiscord> <geekrelief> cool collect worked @ElegantBeef  thanks!
[05:16:02] *** Quits: mjsir911 (~bnc@user/mjsir911) (Quit: Goodbye, World!)
[05:16:17] *** Joins: mjsir911 (~bnc@user/mjsir911)
[06:32:23] <FromDiscord> <cynahc> Hmm still no luck with GC\_ref or reset. Here's the full code if anyone wants to take a crack at fixing the leak\: https://gist.github.com/chancyk/d5d7f36ab3f1386362d15430347a2de2#file-sdl_leak-nim-L59
[06:33:21] <FromDiscord> <cynahc> A pointer to a seq is being stored under a C pointer of SDL2, and it seems to never get properly cleaned up despite my various attempts at properly using dealloc, reset, GC\_ref, destroy (from SDL), etc.
[06:40:57] <FromDiscord> <ElegantBeef> Wait why would you have to dealloc that ptr
[06:50:03] <FromDiscord> <cynahc> The seq that's stored in `image.data` is coming from Pixie, so it's being attached to the Surface for SDL2, but it seems like it's never being freed and results in a pretty large memory leak.
[06:52:47] <FromDiscord> <cynahc> It's kind of bizarre because it's based on an example from Pixie that has a leak because it's lacking a destroy, but once you add it's fine.â†µhttps://github.com/treeform/pixie/blob/master/examples/realtime_sdl.nim
[06:53:20] <FromDiscord> <cynahc> However, in my slightly different version it doesn't seem to clean up properly. ðŸ¤”
[06:59:15] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:29:55] *** Joins: rockcavera (~rc@user/rockcavera)
[07:33:22] <FromDiscord> <Quibono> What would be the best way to instrument Nim to measure how long a program loop takes?
[07:34:11] <FromDiscord> <cynahc> @Quibono\: You can use the times module\: https://nim-lang.org/docs/times.html
[07:34:20] <FromDiscord> <ElegantBeef> monotimes is better for percise timing
[07:34:43] <FromDiscord> <Quibono> Monotimes are in ns?
[07:35:18] <FromDiscord> <ElegantBeef> > The MonoTime type stores the timestamp in nanosecond resolution, but note that the actual supported time resolution differs for different systems.
[07:36:39] <FromDiscord> <treeform> In reply to @cynahc "It's kind of bizarre": Sorry I don't use SDL, I wanted and example for people here because many seem to use it. I made a mistake I'll fix it when I get back. You might not need to create a texture every time, but just copy it. I don't know SDL that well...
[07:37:03] <FromDiscord> <ElegantBeef> The best way to use `monotimes` is to import `times` with it and use it's stringification for durations
[07:38:37] <FromDiscord> <ElegantBeef> https://play.nim-lang.org/#ix=3sIS to see monotimes in action ðŸ˜„
[07:39:03] <FromDiscord> <cynahc> @treeform\: I'm not sure it's related to the lack of a destroy. I'm just learning SDL also, but some kind of interplay between the Nim GC and SDL is behaving strangely. To my anyway. ðŸ˜…
[07:39:23] <FromDiscord> <Quibono> In reply to @ElegantBeef "https://play.nim-lang.org/#ix=3sIS to see monotimes": Ooh that's nice.
[07:39:48] <FromDiscord> <ElegantBeef> You can also of course turn that into a template and then time whatever you want inside a block
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:39] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:39:07] <FromDiscord> <Jasmine and Don't Forget!~> Hi everyone! What's up?
[09:27:24] <FromDiscord> <whyy cant i install choosenim> In reply to @Quibono "Lol so Choosenim doesn't": doesnt support arm anyways
[09:36:12] *** Quits: mikko (~mikko@2a02:7b40:d418:6a61::1) (*.net *.split)
[09:36:12] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[09:36:12] *** Quits: systemdsucks (~systemdsu@user/systemdsucks) (*.net *.split)
[09:36:12] *** Quits: Onionhammer (~onionhamm@207-153-1-151.fttp.usinternet.com) (*.net *.split)
[09:36:29] *** Joins: Onionhammer (~onionhamm@207-153-1-151.fttp.usinternet.com)
[09:36:32] *** Joins: systemds1cks (~systemdsu@user/systemdsucks)
[09:36:35] *** Joins: mikko (~mikko@2a02:7b40:d418:6a61::1)
[09:41:26] *** Quits: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (*.net *.split)
[09:41:26] *** Quits: oprypin (~irc@pryp.in) (*.net *.split)
[09:41:26] *** Quits: lain (~lain@172.16.254.xxx) (*.net *.split)
[09:41:38] *** Joins: oprypin (~irc@pryp.in)
[09:41:43] *** Joins: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[09:42:27] *** Joins: lain (~lain@172.16.254.xxx)
[09:44:58] *** Quits: DrWhax (~DrWhax@37.218.247.209) (*.net *.split)
[09:44:58] *** Quits: euantorano (sid180289@id-180289.brockwell.irccloud.com) (*.net *.split)
[09:44:58] *** Quits: robertmeta (sid514@user/robertmeta) (*.net *.split)
[09:45:09] *** Joins: DrWhax (~DrWhax@37.218.247.209)
[09:45:51] *** Joins: euantorano (sid180289@id-180289.brockwell.irccloud.com)
[09:46:02] *** Joins: robertmeta (sid514@id-514.highgate.irccloud.com)
[09:46:04] *** Quits: robertmeta (sid514@id-514.highgate.irccloud.com) (Changing host)
[09:46:04] *** Joins: robertmeta (sid514@user/robertmeta)
[09:46:07] *** Joins: Ekho (~Ekho@user/ekho)
[10:31:16] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[10:38:26] *** Joins: Vladar (~Vladar@46.162.2.53)
[10:53:34] <fn> <11ForumUpdaterBot99> New thread by Halloleo: How can I tell Nim that a JsObject has some certain attributes?, see https://forum.nim-lang.org/t/8222
[10:55:36] <fn> <11ForumUpdaterBot99> New Nimble package! macroplus - a collection of useful macro functionalities, see https://github.com/hamidb80/macroplus
[10:55:37] <fn> <12R2D299> 4GitHub: 7"<No Description>"
[10:56:20] <FromDiscord> <sealmove> Is there a web dev tutorial or something that doesn't treat readers/watchers as complete beginners in programming?
[10:57:10] <FromDiscord> <Rika> Web dev starting from where?
[10:57:17] <FromDiscord> <Rika> Like rather what are you making
[10:57:24] <FromDiscord> <Rika> The server itself or just a website?
[10:57:58] <FromDiscord> <Rika> If itâ€™s just a website I feel like the docs for whatever web server should suffice?
[10:59:00] <FromDiscord> <sealmove> Ideally I want to build a full stack pet project (as small as possible) to get the big picture.
[10:59:39] <FromDiscord> <Rika> Let me try searching as well
[11:01:01] <FromDiscord> <Rika> Iâ€™m still kinda unsure what you want, do you already have the documents to serve to the user, are you making a single page site (using something like karax)
[11:01:39] <FromDiscord> <Rika> Most tutorials for full stack are specific to a certain stack
[11:01:46] <FromDiscord> <Rika> Stuff like LAMP MEAN etc
[11:01:50] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[11:02:07] <FromDiscord> <sealmove> I am fine with picking one stack, just to get my feet wet
[11:04:04] <FromDiscord> <Rika> Perhaps https://thinkster.io/tutorials/fullstack ? You will need to adapt it to Nim if you plan on using Nim libraries
[11:04:17] <FromDiscord> <Rika> And likely there are components that do not exist yet on Nim
[11:04:27] <FromDiscord> <Rika> So you might need to create some stuff from scratch
[11:08:21] <PMunch> LAMP can quite easily switch out the P(HP) for Nim
[11:08:28] <PMunch> I've done it on my server :)
[11:08:54] <FromDiscord> <enthus1ast> with reverse proxy? or with (fast) cgi?
[11:09:01] <FromDiscord> <enthus1ast> wsgi
[11:09:08] <PMunch> Reverse proxy via Apache
[11:09:55] <FromDiscord> <Rika> Most people opt for nginx nowadays though heh
[11:10:48] <PMunch> Yeah I know, but I was already running Apache
[11:12:29] <FromDiscord> <sealmove> would be cool to use Nim but I need "marketable" skills :< my github account only has Nim xD
[11:13:27] <FromDiscord> <Bung> you can change gitattribute tell github  show as python
[11:13:44] <FromDiscord> <sealmove> cool idea :>
[11:15:00] <FromDiscord> <Bung> think you only need read some framework document and its source code.
[11:15:12] <FromDiscord> <enthus1ast> my one stop shop for professional websites\: php bolt cms; for web application\: python flask or nim; but in my opinion it does not really matter, master css, a web framework like bootstrap is more important for a website
[11:19:19] *** Joins: max22- (~maxime@2a01cb0883359800e6ce86982b278ef6.ipv6.abo.wanadoo.fr)
[11:21:38] <fn> <11ForumUpdaterBot99> New Nimble package! isocodes - ISO codes for Nim that allows to embed its data within the executable (or load it automatically at runtime)., see https://github.com/kraptor/isocodes
[11:21:39] <fn> <12R2D299> 4GitHub: 7"ISO codes for Nim that allows to embed the data within the executable (or load it automatically at runtime)."
[11:25:48] <FromDiscord> <planetis> How about https://m.youtube.com/watch?v=KH_-vhsfxjg&list=PLlRFEj9H3Oj5e-EH0t3kXrcdygrL9-u-Z&index=1â†µ(@sealmove)
[11:25:51] <fn> <12R2D299> 4Youtube: 7"Why Teach Django?"
[11:26:27] <FromDiscord> <sealmove> In reply to @planetis "How about https://m.youtube.com/watch?v=KH_-vhsfxjg": looks good
[11:26:29] <fn> <12R2D299> 4Youtube: 7"Why Teach Django?"
[11:31:10] <FromDiscord> <planetis> The d is silent
[11:42:38] <PMunch> @enthus1ast, hadn't heard of FastCGI before. Interesting concept
[11:44:51] *** Quits: max22- (~maxime@2a01cb0883359800e6ce86982b278ef6.ipv6.abo.wanadoo.fr) (Ping timeout: 276 seconds)
[12:01:42] *** Quits: beshr (~beshr@user/beshr) (Remote host closed the connection)
[12:02:59] *** Joins: max22- (~maxime@2a01cb0883359800959b13d91eb03034.ipv6.abo.wanadoo.fr)
[12:05:06] <FromDiscord> <Bung> https://github.com/mrhdias/fastkiss there one in nim
[12:05:08] <fn> <12R2D299> 4GitHub: 7"FastKISS - Nim's FastCGI Flexible Web Framework"
[12:18:30] <FromDiscord> <Rika> Oh wow nice Iâ€™ll use this
[12:18:56] <FromDiscord> <enthus1ast> Not sure if fastcgi actually gives a win. Also unsure if websocket works with fastcgi
[12:20:02] <FromDiscord> <enthus1ast> And with nginx you also must start your application by yourself (afaik)
[12:21:29] <FromDiscord> <Rika> It works for me because I need to use  http 2
[12:31:34] <FromDiscord> <Bung> you use http2 ? does the backend program handle the stream like http1?
[13:05:55] <fn> <11ForumUpdaterBot99> New thread by Elcritch: Arena memory support?, see https://forum.nim-lang.org/t/8225
[13:12:11] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[13:58:23] *** Quits: max22- (~maxime@2a01cb0883359800959b13d91eb03034.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[13:59:12] *** Joins: max22- (~maxime@2a01cb08833598006164eb2513d7e5b3.ipv6.abo.wanadoo.fr)
[14:23:02] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[14:58:42] <FromDiscord> <dom96> fastcgi is pointless
[14:58:56] <FromDiscord> <dom96> just another protocol when http can be used instead
[14:59:32] <PMunch> I mean it might be nice if you have a language without a HTTP library
[14:59:44] <FromDiscord> <dom96> just implement http then lol
[15:00:06] <PMunch> As I understand it FastCGI is easier to implement
[15:00:48] <PMunch> And if you need to run your HTTP server behind a reverse proxy anyways it's starting to look quite similar architecturally
[15:02:58] <FromDiscord> <dom96> I really doubt FastCGI is easier to implement
[15:03:23] <FromDiscord> <dom96> You still need to implement all the HTTP concepts for your framework anyway
[15:04:59] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/gVs
[15:05:40] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3sJU
[15:05:48] <FromDiscord> <dom96> (there is also simple CGI btw which implies fast cgi isn't simple at all :))
[15:06:02] <FromDiscord> <haxscramper> Also `proc toFlatty(str: var string, cstr: cstring) = toFlatty(str, $cstr)` as default implementation for cstring.
[15:06:14] <FromDiscord> <haxscramper> I can make a PR that adds this to flatty if you are ok with the idea
[15:06:38] <FromDiscord> <haxscramper> and `fromFlatty` implementation as well
[15:07:15] <FromDiscord> <haxscramper> btw, I've decided to use flatty/supersnappy for haxdoc database serialization after your post https://forum.nim-lang.org/t/8214
[15:07:39] <FromDiscord> <haxscramper> so far works great, though (as usual with any serialization) it is having troubles with `.requiresinit.`
[15:09:05] <FromDiscord> <Rika> In reply to @dom96 "just implement http then": Have you implemented http2 yet then?
[15:09:32] <FromDiscord> <dom96> no, because I don't need it
[15:09:50] <FromDiscord> <dom96> nginx/cloudflare can do http2 for me
[15:13:25] <FromDiscord> <Rika> In reply to @dom96 "nginx/cloudflare can do http2": Hm? nginx can do 1.1->2?
[15:14:10] <FromDiscord> <dom96> I think so, cloudflare can so I don't see why nginx can't
[15:42:01] *** Joins: iortega (~inigo@94.73.53.254)
[15:49:56] <FromDiscord> <Aiz> sent a code paste, see https://play.nim-lang.org/#ix=3sK7
[15:50:21] <FromDiscord> <Aiz> (edit) "https://paste.rs/AnG" => "https://play.nim-lang.org/#ix=3sK8"
[15:50:21] <FromDiscord> <Aiz> (edit) "https://play.nim-lang.org/#ix=3sK8" => "https://play.nim-lang.org/#ix=3sK9"
[15:51:12] <FromDiscord> <Rika> you want `ptr AtlasPage` i assume?
[15:52:01] <FromDiscord> <Aiz> sent a code paste, see https://play.nim-lang.org/#ix=3sKb
[15:52:33] <FromDiscord> <Rika> i assume the issue is in the C side? likely because cstring -> char  and not const char 
[15:54:04] <FromDiscord> <haxscramper> @Aiz\:  you can use combination of `.codegendecl: "...".`, `.emit` and `.exportc`
[15:54:16] <FromDiscord> <Aiz> sent a code paste, see https://play.nim-lang.org/#ix=3sKd
[15:54:26] <FromDiscord> <haxscramper> `.constructor.` to avoid implicit `return` initalization
[15:55:41] <FromDiscord> <haxscramper> `.codegendecl.` would allow you to manually overide argument list with required types
[15:55:55] <FromDiscord> <haxscramper> so you could do `const char` explicitly
[15:56:34] <FromDiscord> <Aiz> let me try
[16:11:54] <FromDiscord> <Aiz> it compiled successfully
[16:12:25] <FromDiscord> <whyy cant i install choosenim> :nimble3:
[16:33:22] *** Quits: jfinkhaeuser (~jfinkhaeu@user/jfinkhaeuser) (Ping timeout: 240 seconds)
[16:33:36] *** Joins: jfinkhaeuser (~jfinkhaeu@user/jfinkhaeuser)
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:35] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:00] *** Joins: Vladar (~Vladar@46.162.2.53)
[16:49:17] <FromDiscord> <System64 ~ Flandre Scarlet> Do you know how can I fix theses errors please? https://media.discordapp.net/attachments/371759389889003532/864118718749474856/unknown.png
[16:51:13] <FromDiscord> <Rika> `var time = (â†µsample_nr[].float / 96000.float)`
[16:51:16] <FromDiscord> <Rika> (edit) "(â†µsample_nr[].float" => "(sample_nr[].float"
[16:52:10] <FromDiscord> <System64 ~ Flandre Scarlet> ah thanks and for the buf?
[16:52:40] <FromDiscord> <Rika> dont use a pointer
[16:52:45] <FromDiscord> <Rika> nim pointers are not c pointers
[16:52:55] <PMunch> UncheckedArray is probably what you want
[16:52:58] <FromDiscord> <Rika> well more accurately nim `[]` is not c `[]`
[16:53:22] <PMunch> ptr UncheckedArray[cshort]
[16:53:47] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3sKt
[17:00:06] *** Quits: max22- (~maxime@2a01cb08833598006164eb2513d7e5b3.ipv6.abo.wanadoo.fr) (Ping timeout: 276 seconds)
[17:07:01] <FromDiscord> <arnetheduck> thoughts on projects that want to support both chronos and asyncdispatch? https://github.com/status-im/nim-chronos/issues/207 - using `async_backend` is nice because it opens the door for other backends as well, in the future, but happy to hear opinions
[17:13:29] <FromDiscord> <Aiz> sent a code paste, see https://play.nim-lang.org/#ix=3sKy
[17:13:50] <FromDiscord> <dom96> In reply to @arnetheduck "thoughts on projects that": sounds good to me
[17:14:40] <FromDiscord> <Aiz> (edit) "https://play.nim-lang.org/#ix=3sKy" => "https://play.nim-lang.org/#ix=3sKz"
[17:27:02] *** Quits: TakinOver (~TakinOver@47.150.206.35) (Ping timeout: 268 seconds)
[17:28:57] <arkanoid> where I can read state-of-the-art nim code that covers idioms, patterns, defensive programming and nim program architecture?
[17:33:13] <fn> <11ForumUpdaterBot99> New thread by Rb3: A regex-based linter for Nim in vscode, see https://forum.nim-lang.org/t/8226
[17:33:46] *** Joins: TakinOver (~TakinOver@47.150.206.35)
[17:37:34] *** Joins: arkurious (~arkurious@user/arkurious)
[17:40:06] *** Joins: rockcavera (~rc@192.12.112.199)
[17:40:06] *** Quits: rockcavera (~rc@192.12.112.199) (Changing host)
[17:40:06] *** Joins: rockcavera (~rc@user/rockcavera)
[17:42:09] <arkanoid> well, I bet there's none
[17:42:26] <arkanoid> new question: what about tainted strings? what's the point?
[17:43:10] <arkanoid> by default tainted strings is off and string == TaintedString, but what's the adventage in turining it on?
[17:43:36] <arkanoid> manual says "If the taint mode is turned on (via the --taintMode:on command line option) it is a distinct string type which helps to detect input validation errors"
[17:47:09] <FromDiscord> <arnetheduck> arkanoid, we use nim for a few larger projects and have written some notes down in https://status-im.github.io/nim-style-guide/
[17:47:37] <arkanoid> thanks arnetheduck
[17:49:50] <FromDiscord> <whyy cant i install choosenim> the nlvm dev
[17:49:59] <FromDiscord> <whyy cant i install choosenim> i was like ðŸ¤”
[17:52:34] <FromDiscord> <Rika> arkanoid arq recently considered removing taint (i believe it already is in devel?)
[17:52:40] <FromDiscord> <Rika> but he thinks its not helpful
[17:53:02] <FromDiscord> <Rika> so basically its a feature that hasnt been removed yet
[17:55:58] <arkanoid> Rika: I also don't see the purpose of it, but surely I'm now super sayan 3 like araq is on these topics
[17:56:25] <FromDiscord> <Rika> i do not watch dragon ball so i do not understand the reference
[17:56:49] <FromDiscord> <Rika> i do not see the use for taint as well so i do not pay notice to it
[18:07:03] <FromDiscord> <Aiz> sent a code paste, see https://play.nim-lang.org/#ix=3sKT
[18:08:58] <FromDiscord> <Aiz> (edit) "https://play.nim-lang.org/#ix=3sKT" => "https://play.nim-lang.org/#ix=3sKU"
[18:16:24] <FromDiscord> <@bracketmaster-5a708063d73408ce4> @kaushalmodi\_gitlab - had you considered hooking up verilator and nim?
[18:24:25] <PMunch> Can anyone tell me what the actual type mismatch here is? http://ix.io/3sKX/
[18:25:19] <fn> <11ForumUpdaterBot99> New thread by FabienPRI: Zip error code, see https://forum.nim-lang.org/t/8227
[18:25:34] <FromDiscord> <Rika> pmunch do the two procs match incl. pragmas?
[18:26:07] <FromDiscord> <dom96> In reply to @Rika "arkanoid ar*q recently considered": he's on Discord now, you don't need to censor his name anymore
[18:26:19] <FromDiscord> <Rika> okay
[18:26:25] <FromDiscord> <Rika> nice to know lmao
[18:32:39] <PMunch> Hmm, they should
[18:32:48] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:49:46] *** Joins: max22- (~maxime@2a01cb088335980001655985af87cee9.ipv6.abo.wanadoo.fr)
[18:57:28] <FromDiscord> <konsumlamm> In reply to @arkanoid "new question: what about": tainted strings have been deprecated, the point was to force input validation, but that didn't really work out
[18:58:21] <FromDiscord> <Rika> I believe itâ€™s because nothing really prevented people from just converting from one to the other
[19:02:02] <FromDiscord> <konsumlamm> https://github.com/nim-lang/RFCs/issues/24
[19:08:32] <FromDiscord> <Bung> how to prevent  compiler ouput `template/generic instantiation` message ?
[19:11:36] <nixfreak_nim[m]> Probably a dumb question , related to type , but why do you have to use the actual type name even when you assign a new variable ? 
[19:11:37] <FromDiscord> <kaushalmodi> In reply to @@bracketmaster-5a708063d73408ce4 "@kaushalmodi\_gitlab - had you": I happened to notice this message, but it didn't ping me as I am on Discord.â†µâ†µNo, I haven't used Verilator yet.
[19:12:13] <nixfreak_nim[m]> like type User name: string , var user = User
[19:12:37] <nixfreak_nim[m]> is it because there is not inheritance ? 
[19:12:43] <FromDiscord> <Rika> Initialisation
[19:12:49] <nixfreak_nim[m]>  * is it because there is no inheritance ? 
[19:13:03] <FromDiscord> <Rika> No, inheritance has nothing to do with that
[19:13:21] <nixfreak_nim[m]> oh ok ,  I didn't know just curious
[19:13:47] <nixfreak_nim[m]> so your initializing the type 
[19:14:14] <FromDiscord> <Rika> The variable
[19:16:02] <FromDiscord> <Bung> nim is static type language
[19:16:46] <nixfreak_nim[m]> sorry I meant that thanks 
[19:20:36] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[19:31:46] *** Joins: pro (~pro@user/pro)
[19:32:35] *** Joins: xet7 (~xet7@user/xet7)
[19:49:19] <FromDiscord> <dimspith> sent a code paste, see https://play.nim-lang.org/#ix=3sLL
[20:02:56] <FromDiscord> <hugogranstrom> First one is more readable and easier to reason about so I'd go with it no matter what (unless `i` is some huge stack-allocated type or crazy stuff like that)â†µ(@dimspith)
[20:03:51] <FromDiscord> <pointystick> You've used 'i' for both variables.  If that's intention, I'd suggest trying to avoid changing loop variables as it could get very confusing
[20:04:24] <FromDiscord> <pointystick> sent a code paste, see https://paste.rs/e75
[20:04:43] <FromDiscord> <pointystick> (edit) "https://play.nim-lang.org/#ix=3sLS" => "https://paste.rs/5TL"
[20:05:51] <FromDiscord> <pointystick> Damn, discord mangled that. ðŸ˜¦  There's meant to be an underscore there: https://play.nim-lang.org/#ix=3sLT
[20:08:16] <FromDiscord> <dimspith> In reply to @pointystick "You've used 'i' for": oh whoops, i didn't notice. this was just an example though so that wasn't my intention
[20:09:35] <FromDiscord> <dimspith> In reply to @hugogranstrom "First one is more": Oh ok thanks a lot!
[20:13:28] <fn> <11ForumUpdaterBot99> New post on r/nim by Ver0ty: What can I use Nim for?, see https://reddit.com/r/nim/comments/oitvuh/what_can_i_use_nim_for/
[20:13:58] *** Quits: pro (~pro@user/pro) (Ping timeout: 272 seconds)
[20:29:50] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:48:06] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:55:28] *** Quits: max22- (~maxime@2a01cb088335980001655985af87cee9.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[20:55:46] *** Joins: max22- (~maxime@2a01cb088335980076555acacb01bc03.ipv6.abo.wanadoo.fr)
[21:00:23] <FromDiscord> <dimspith> On another note, is there an equivalent to python's `os.sysconf()` in nim?
[21:01:10] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3sM8
[21:02:19] <FromDiscord> <aleclarson> is there some kind of "opaque type" in nim?
[21:03:54] <FromDiscord> <theangryepicbanana> In reply to @aleclarson "is there some kind": `distinct`?
[21:04:21] <FromDiscord> <dimspith> yeah distinct is the way i think. https://nim-lang.org/docs/manual.html#types-distinct-type
[21:04:46] <FromDiscord> <aleclarson> sweet thx ^^
[21:21:48] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3sMc
[21:43:50] <fn> <11ForumUpdaterBot99> New thread by Protium: Newbie: Mock object for assert when field not exported, see https://forum.nim-lang.org/t/8228
[21:44:02] <FromDiscord> <aleclarson> is `not nil` reversible?
[21:45:04] <FromDiscord> <aleclarson> oh i suppose i can wrap a `not nil` type with a `ref` to make it nilable again
[21:57:29] <FromDiscord> <dom96> that sounds like a bad idea
[21:58:06] <FromDiscord> <Rika> sounds like a double indirection
[21:58:08] <arkanoid> for an x86_64 pure nim application, is there any difference in using C or C++ backend? C is now default one so I'm sticking with it and it's working, but I'm quite curious about this topic. I though that C++ could bring more advanced features for the compiler
[21:59:39] <FromDiscord> <Rika> the C backend is more heavily tested
[21:59:55] <FromDiscord> <Rika> afaik the two backends share a lot with each other but not everything
[22:00:41] <arkanoid> I'd guess that exceptions are thing where C++ shines
[22:01:26] <FromDiscord> <Rika> which goto exceptions beat anyway from what ive heard
[22:02:43] <arkanoid> and what about effect tracking?
[22:02:58] <arkanoid> (I'm just guessing here)
[22:05:16] <FromDiscord> <aleclarson> In reply to @dom96 "that sounds like a": why?
[22:05:42] <FromDiscord> <Rika> nim already has effect tracking built in
[22:05:55] <FromDiscord> <Rika> i dont understand what you mean about "effect tracking"
[22:06:09] <FromDiscord> <dom96> In reply to @aleclarson "why?": because you're working around a limitation in the type system by creating yet another reference
[22:06:44] <FromDiscord> <aleclarson> yeah it's not ideal, i'd prefer to negate the `not nil` part with `or nil` or something
[22:07:20] <FromDiscord> <dom96> is the `not nil` type one you've defined?
[22:08:08] <FromDiscord> <dom96> sent a code paste, see https://play.nim-lang.org/#ix=3sMv
[22:09:10] <FromDiscord> <aleclarson> no it's not \:)
[22:09:25] <FromDiscord> <Rika> why do you want it to be nilable?
[22:10:50] <arkanoid> Rika, I though effect tracking was a runtime feature too, not just compile time (you can print effects at point in code)
[22:11:33] <FromDiscord> <Rika> what does that have in relation to the C vs C++ backend? i fail to see
[22:11:37] <FromDiscord> <konsumlamm> In reply to @aleclarson "is `not nil` reversible?": the point of `not nil` is that it can't be `nil`, it would be dumb if it was "reversible"
[22:12:32] <FromDiscord> <konsumlamm> this sounds more like you want an `Option` tbh, see the `std/options` module
[22:13:43] <FromDiscord> <Rika> do ref objects not nil work with Option? i thought Option relied on refs being nilabel
[22:13:44] <FromDiscord> <Rika> (edit) "nilabel" => "nilable"
[22:14:28] <FromDiscord> <konsumlamm> umm, no
[22:14:46] <FromDiscord> <konsumlamm> oh wait, hmm
[22:14:53] <FromDiscord> <Rika> xd
[22:14:56] <FromDiscord> <konsumlamm> ye, the optimization might break that
[22:15:09] <arkanoid> I though it was leveraging on backend feature to achive effect tracking. If not, nevermind (I was just wild guessing)
[22:15:12] <FromDiscord> <konsumlamm> which is another reason why it's a dumb idea, but muh breaking change
[22:16:21] <FromDiscord> <Rika> arkanoid the nim compiler only uses backend features when theyre available; nim does not restrict features to certain backends if it can help it
[22:16:44] <FromDiscord> <aleclarson> In reply to @konsumlamm "the point of `not": the library i'm using is abusing `not nil` imo. `not nil` shouldn't be used in a `type` declaration. save it for parameter types
[22:17:05] <FromDiscord> <Rika> i think there are valid reasons to use not nil in a type
[22:17:07] <FromDiscord> <konsumlamm> imo every `ref` type should be `not nil` tbh
[22:17:16] <FromDiscord> <aleclarson> who are they to say what my object types must contain?
[22:17:16] <FromDiscord> <konsumlamm> so i wouldn't say there's such a thing as abusing it
[22:17:19] <FromDiscord> <Rika> almost the same opinion as kon here
[22:17:32] <FromDiscord> <Rika> theyre not your types, theyre theirs
[22:18:06] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3sMA
[22:18:14] <FromDiscord> <aleclarson> they shouldn't have influence over whether `MyType.foo` is nil or not
[22:18:22] <FromDiscord> <Rika> why
[22:18:32] <FromDiscord> <aleclarson> it doesn't matter to them in my case
[22:18:40] <FromDiscord> <Rika> it does
[22:18:48] <arkanoid> Rika, sure but considering the fact that nim strikes for the performance and not for the "moltitude of backends", it was easier to assume that if a backend feature could be leveraged for better performance, just go for it
[22:18:54] <FromDiscord> <aleclarson> i ensure `MyType.foo` is not nil when i pass it into the library procs
[22:19:00] <FromDiscord> <Rika> if you use their library and pass that nil'ed not nil type to a proc?
[22:19:04] <FromDiscord> <dom96> I think you do want just an Option.
[22:19:05] <FromDiscord> <Rika> you ensure it
[22:19:08] <FromDiscord> <Rika> but not everyone will
[22:19:14] <FromDiscord> <Rika> if given the opportunity
[22:19:31] <FromDiscord> <aleclarson> they can protect against that by using `not nil` in the proc type signature
[22:20:02] <FromDiscord> <Rika> arkanoid yeah thats what i mean, when the feature is there in the backend (and is the same in behavior) nim would use it i believe
[22:21:03] <FromDiscord> <Rika> In reply to @aleclarson "they can protect against": okay ill think about this
[22:21:37] <FromDiscord> <Rika> then what's the point of having a nil value then?
[22:21:48] <FromDiscord> <aleclarson> optional property
[22:21:53] <FromDiscord> <Rika> THEN USE OPTION
[22:21:59] <FromDiscord> <aleclarson> that works with `ref` types?
[22:22:02] <FromDiscord> <Rika> YES
[22:22:07] <FromDiscord> <Rika> well
[22:22:10] <FromDiscord> <Rika> actually
[22:22:14] <FromDiscord> <Rika> it works with ref types
[22:22:19] <FromDiscord> <aleclarson> lol
[22:22:24] <FromDiscord> <Rika> In reply to @konsumlamm "ye, the optimization might": but as mentioned here
[22:22:38] <FromDiscord> <Rika> ive never checked if the way it's implemented works with ref not nil
[22:23:17] <FromDiscord> <konsumlamm> depends on wether or not the `ref` wildcard type includes `not nil` types
[22:25:07] <FromDiscord> <Rika> it works it seems
[22:25:13] <FromDiscord> <Rika> i just tested it
[22:25:16] <FromDiscord> <Rika> seems to work
[22:25:18] <FromDiscord> <aleclarson> is there a way to get my `object` type to call `new` for `ref` properties automatically?
[22:25:45] <FromDiscord> <Rika> no
[22:25:50] <FromDiscord> <Rika> (i wish)
[22:25:54] <FromDiscord> <Rika> (edit) "wish)" => "wish it was yes)"
[22:26:05] <FromDiscord> <Rika> but not now no
[22:27:00] *** Joins: vicfred (~vicfred@user/vicfred)
[22:27:13] <FromDiscord> <haxscramper> Maybe they decided to save up time and not insert `assert not isNil()` checks everywher
[22:27:31] <FromDiscord> <konsumlamm> ye, the reason it works is actually that `not nil` is broken
[22:27:36] <FromDiscord> <haxscramper> Also if argument is guaranteed to be not nil procedure returning things can also always return not nil instead of failing
[22:27:44] <FromDiscord> <konsumlamm> because `not nil` types are in fact considered to be `ref`
[22:27:55] <FromDiscord> <haxscramper> so `nil` values happen to propagate all over the place or raise things
[22:27:57] <FromDiscord> <Rika> In reply to @konsumlamm "ye, the reason it": it's broken??? huhhhhhhhh https://media.discordapp.net/attachments/371759389889003532/864203941990629387/unknown.png
[22:28:00] <FromDiscord> <konsumlamm> so what's happening under the hood is that we have a `not nil` type that is `nil`
[22:28:23] <arkanoid> what's more idiomatic: "proc initMyFoo(...): MyFoo" or "proc init(T: type MyFoo, ...): T"
[22:28:30] <FromDiscord> <konsumlamm> In reply to @Rika "it's broken??? huhhhhhhhh": last i checked it didn't complain about uninitialized variables
[22:28:32] <FromDiscord> <Rika> i guess i did call "new test"
[22:28:42] <FromDiscord> <Rika> lets see with an uninit var
[22:28:56] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 265 seconds)
[22:29:06] <FromDiscord> <Rika> huh
[22:29:10] <FromDiscord> <Rika> its just an assertion lmao
[22:29:16] <FromDiscord> <Rika> ah wait no
[22:29:20] <FromDiscord> <Rika> yeah it seems broken lmao
[22:30:15] <FromDiscord> <haxscramper> Most commonly used one is `initT`â†µ(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[22:30:43] <FromDiscord> <Rika> but there are a few people using init(T) nowadays i think
[22:30:50] <FromDiscord> <Rika> (i'm about to move to such)
[22:30:51] <FromDiscord> <aleclarson> is `Option` cheaper than a `ref`?
[22:30:54] <FromDiscord> <konsumlamm> sent a code paste, see https://play.nim-lang.org/#ix=3sMF
[22:30:56] <FromDiscord> <Rika> yes
[22:31:08] <FromDiscord> <konsumlamm> it doesn't allocate anything
[22:31:31] <FromDiscord> <konsumlamm> it's just an extra `bool` flag in the normal case
[22:31:39] <FromDiscord> <aleclarson> why are `Option` properties required to be initialized? i'd expect it to default to `none`
[22:31:45] <FromDiscord> <konsumlamm> and if you have some pointer type, it's the exact same layout
[22:31:56] <FromDiscord> <haxscramper> Yes, it works better with genericsâ†µ(@Rika)
[22:31:58] <FromDiscord> <konsumlamm> In reply to @aleclarson "why are `Option` properties": wdym?
[22:32:05] <FromDiscord> <haxscramper> Poor man's default initalization support
[22:32:13] <FromDiscord> <haxscramper> And we also have `default(T)` and `new(T)`
[22:32:26] <FromDiscord> <Rika> overridable inserted default calls when
[22:32:28] <FromDiscord> <haxscramper> very consitent
[22:33:05] <FromDiscord> <haxscramper> 1.5 RFCs about that
[22:33:16] <FromDiscord> <konsumlamm> honestly i feel like most uses of `typedesc` are workarounds for Nim's bad type inference
[22:33:35] <FromDiscord> <Rika> it pretty much is
[22:33:57] <FromDiscord> <Rika> im pretty sure return type inference would solve a lot (but it prolly adds a fucktonne of complexity so...)
[22:34:03] <FromDiscord> <haxscramper> I don't think so, or at least I wound't qualify it as 'bad type inference'
[22:34:06] <FromDiscord> <aleclarson> In reply to @konsumlamm "wdym?": https://play.nim-lang.org/#ix=3sMH
[22:34:20] <FromDiscord> <aleclarson> `Option` with `not nil` type needs to be initialized
[22:34:42] <FromDiscord> <aleclarson> which makes `Option` useless in my case, it seems
[22:34:44] <FromDiscord> <haxscramper> Though local HM inference would simply some use cases
[22:34:47] <FromDiscord> <haxscramper> Just not that global trash
[22:34:53] <FromDiscord> <aleclarson> (edit) "seems" => "seems?"
[22:35:18] <FromDiscord> <konsumlamm> In reply to @aleclarson "https://play.nim-lang.org/#ix=3sMH": calling a constructor without initializing all fields isn't a thing, is it?
[22:35:34] <FromDiscord> <konsumlamm> anyway, what's the problem with setting it to `none()`?
[22:35:44] <FromDiscord> <Rika> In reply to @haxscramper "Just not that global": sorry, idk the diff, what is the diff?
[22:36:05] <FromDiscord> <Rika> In reply to @konsumlamm "calling a constructor without": but shouldnt it already default to none?
[22:36:30] <FromDiscord> <konsumlamm> idk if that's how constructors are supposed to work
[22:36:37] <FromDiscord> <konsumlamm> i always initialize everything anyway
[22:39:25] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[23:04:45] *** Quits: max22- (~maxime@2a01cb088335980076555acacb01bc03.ipv6.abo.wanadoo.fr) (Ping timeout: 276 seconds)
[23:22:49] *** Quits: lain (~lain@172.16.254.xxx) (Quit: kthxbai)
[23:23:30] *** Joins: lain (~lain@172.16.254.xxx)
[23:31:03] *** Joins: xet7 (~xet7@user/xet7)
[23:36:31] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[23:36:55] *** Joins: supakeen (~user@python/site-packages/supakeen)
[23:39:09] <FromDiscord> <System64 ~ Flandre Scarlet> is c2nim a good method for interop?
[23:40:09] *** Joins: max22- (~maxime@2a01cb08833598000eeb166e503f2175.ipv6.abo.wanadoo.fr)
[23:40:33] <FromDiscord> <haxscramper> it is a reasonably good start
[23:42:09] <FromDiscord> <System64 ~ Flandre Scarlet> interestingâ†µ'cause I try to inspect where does the crash come from, I'm wondering if there isn't an interop problem
[23:43:02] <FromDiscord> <System64 ~ Flandre Scarlet> I did the same program in C, no crash
[23:45:25] <FromDiscord> <konsumlamm> maybe your C program silently has UB?
[23:45:40] <FromDiscord> <System64 ~ Flandre Scarlet> what does it mean UB?
[23:46:11] <FromDiscord> <konsumlamm> undefined behaviour
[23:46:55] <FromDiscord> <System64 ~ Flandre Scarlet> and what does it do?
[23:49:50] <FromDiscord> <konsumlamm> being undefined
[23:50:17] <FromDiscord> <haxscramper> welcome to C
[23:50:28] <FromDiscord> <konsumlamm> for example dereferencing an invalid pointer is UB
[23:50:47] <FromDiscord> <konsumlamm> and the fun thing about UB is, the program can technically do anything
[23:50:58] <FromDiscord> <System64 ~ Flandre Scarlet> OOOOF
[23:51:13] <FromDiscord> <System64 ~ Flandre Scarlet> so that means I potentially created a malware??
[23:51:52] <FromDiscord> <konsumlamm> very unlikely
[23:52:18] <FromDiscord> <System64 ~ Flandre Scarlet> yeah I overexagerated a bitâ†µBut my program can corrupt a file for exemple?
[23:52:27] <FromDiscord> <System64 ~ Flandre Scarlet> or crashing another process?
[23:52:43] <FromDiscord> <konsumlamm> if it has UB, in theory, yes, but in practice it probably won't
[23:52:59] <FromDiscord> <System64 ~ Flandre Scarlet> if the OS is secure I think it wont
[23:53:37] <FromDiscord> <System64 ~ Flandre Scarlet> but Nim stops the program instead of letting UBs?
[23:59:12] <FromDiscord> <System64 ~ Flandre Scarlet> and that's why it doesn't crash when I'm in Danger mode?
