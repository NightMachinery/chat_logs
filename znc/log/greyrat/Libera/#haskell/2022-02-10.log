[00:03:53] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c)
[00:04:25] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[00:08:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:08:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:09:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:09:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:09:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:09:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:09:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:09:49] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[00:10:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:10:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:10:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:10:29] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:10:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:10:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:11:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:11:05] *** Joins: yauhsien (~yauhsien@61-231-45-223.dynamic-ip.hinet.net)
[00:11:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:11:24] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:89bd:bcbb:df15:8e9a)
[00:11:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:11:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:11:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:11:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:12:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:12:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:12:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:12:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:12:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:13:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:13:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:13:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:13:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:13:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:13:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:14:05] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:14:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:14:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:14:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:14:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:15:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:15:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:15:22] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[00:15:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:15:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:15:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:15:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:16:06] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[00:16:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:16:15] *** Parts: safinaskar (~quassel@109.252.91.116) ()
[00:16:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:16:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:16:35] <ehammarstrom> Is there more well-typed version of readFile? One that evaluates to a Maybe perhaps
[00:16:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:16:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:17:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:17:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:17:20] <EvanR> what does Nothing represent, failure to open it?
[00:17:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:17:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:17:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:17:46] <EvanR> that and other issues are covered under Control.Exception s
[00:18:21] <Hecate> ehammarstrom: considering the amount of posible POSIX *or* Win32 error modes, I'm pretty sure you either want something that gives you the error
[00:18:40] <Hecate> no the way you get the error has to be ergonomic, and an ADT is not going to be alright :')
[00:18:55] <d34df00d> janus: that was about idris 1. I wouldn't take idris 2's behaviour as set in stone for now given it's still in its pre-release ages.
[00:18:59] <EvanR> an indexed monad might be an overengineered way to express the dance of opening reading and closing a file
[00:19:14] <EvanR> (a single file)
[00:19:15] <Hecate> EvanR: wat :'D
[00:19:40] <dminuoso> Dont underestimate the power of `withFile`?
[00:20:07] <ehammarstrom> And the pragmatic answer?
[00:20:13] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:20:15] <EvanR> use exceptions xD
[00:20:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c) (Remote host closed the connection)
[00:20:22] <EvanR> (and not lazy readFile)
[00:20:35] <dminuoso> Yes, use exceptions.
[00:20:45] <ehammarstrom> Cheers, I've done that once before. Never again
[00:21:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[00:21:08] <dminuoso> ehammarstrom: I say get comfortable with them, they aren't unpleasant to work with.
[00:21:20] <awpr> I feel like file handle lifecycles and door open/close states are to indexed monads as `class Bicycle : Vehicle` and `class Weevil : Animal` are to OOP inheritance
[00:21:28] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[00:21:43] <dminuoso> It's async exceptions that can cause most headaches, but exceptions - especially with the subtyping tricks we can use - are really nice.
[00:22:18] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[00:22:53] <ehammarstrom> dminuoso: I'll go ahead an use exceptions, the subtyping stuff is over my head at the moment :)
[00:23:15] <EvanR> it's true that working with files and catching their specific exceptions isn't really type safe, at least, the compiler doesn't know or tell you what exception types are possible. It's trial and error afaict
[00:24:02] <dminuoso> ehammarstrom: it's super easy. :)
[00:24:36] <monochrom> You can use try to convert exceptions to Either.  http://www.vex.net/~trebla/haskell/exception-tutorial.xhtml
[00:25:09] <dminuoso> And its also widely underused.
[00:25:16] <EvanR> you still need to name the exception type like rumplestiltskin
[00:25:19] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[00:25:30] <monochrom> The attraction of an exception system though is you can choose how large your lexical scope of your "try" is.
[00:26:15] <monochrom> For example my opening example there can't be bothered to have 3 try's for 3 IO operations. 1 is quite enough.
[00:27:32] <monochrom> http://www.vex.net/~trebla/haskell/exception.xhtml is my satire to anti-exception FUD.
[00:27:43] <ehammarstrom> monochrom: Reducing a larger set of exceptions to a set of fewer Errors as a type would be preferrable
[00:29:16] <EvanR> you basically need to learn the exception associated with file ops
[00:29:44] <EvanR> or really the specific ones that you are interested in detecting
[00:33:36] *** Joins: slack1256 (~slack1256@191.126.227.70)
[00:34:29] <EvanR> https://i.imgur.com/IQ6OcWF.png enjoy
[00:35:37] *** Quits: slac52342 (~slack1256@186.11.25.249) (Ping timeout: 240 seconds)
[00:35:59] *** Joins: chessai (sid225296@id-225296.lymington.irccloud.com)
[00:37:37] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[00:38:03] <janus> how do you limit the scope of exceptions with lexical constructs? i thought exceptions do not care about syntactical constructs?
[00:40:06] <dminuoso> janus: We're talking about IO exceptions.
[00:40:20] <EvanR> the catch primitives scope over some lexical scope
[00:40:43] <EvanR> what they catch is up to the type system though
[00:40:45] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[00:40:51] <EvanR> (dynamic types)
[00:41:24] <EvanR> and yeah this is IO onlty
[00:41:42] *** Joins: burnsidesLlama (~burnsides@dhcp168-051.wadham.ox.ac.uk)
[00:42:31] *** Joins: dsrt^ (~dsrt@128-092-160-106.biz.spectrum.com)
[00:45:19] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[00:46:43] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:48:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:51:26] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[00:52:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[00:56:20] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[00:58:26] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Quit: leaving)
[00:58:55] <ehammarstrom> I am using this to catch file read exceptions (it's used in a `catch` expression): https://paste.tomsmeding.com/dlyRWQ52 how do I know that the evaluation is strict, can I verify it somehow?
[01:00:18] *** Joins: wavemode (~wavemode@2601:241:0:fc90:2892:d0:a7ec:bc11)
[01:01:02] <ehammarstrom> I am using the BangPatterns language extension; forgot to include that
[01:01:33] <EvanR> oh, don't use readFile for that
[01:01:51] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4) (Remote host closed the connection)
[01:01:52] <EvanR> there are variants that are just strict already
[01:02:06] <EvanR> e.g. Data.ByteString, Data.Text have readFile
[01:02:26] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[01:02:35] <EvanR> presumably you also would catch an exception too
[01:02:46] <ehammarstrom> How do I "exclude" my current readFile?
[01:03:07] <EvanR> you can speak of the other versions qualified like T.readFile or import Prelude reading hiding if you want
[01:03:21] <EvanR> import Prelude hiding (readFile)
[01:03:51] <EvanR> qualifying the other one is more conventional I think 
[01:04:17] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:07:42] <ehammarstrom> Is it preferrable to work with Text instead of String?
[01:07:56] <EvanR> for large amount of text yes
[01:08:03] <EvanR> (at a time)
[01:08:29] <EvanR> consider if you're trying to work Char by Char or.. .basically any other pattern
[01:08:51] <EvanR> String = [Char]
[01:09:57] <ehammarstrom> Do I have to `pack` every string in my program or is there some way to infer Text from my "current strings"?
[01:10:23] <EvanR> OverloadedStrings extension interprets string literals using a type class
[01:10:33] <EvanR> as long as it's unambiguous it's pretty nice
[01:11:06] *** Joins: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[01:11:45] <EvanR> you could also load your file as Text, then work with the unpacked stream of Char sourced from it
[01:12:33] *** Joins: tzh_ (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[01:12:55] *** Quits: Topsi (~Tobias@dyndsl-091-249-082-173.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[01:12:57] <ober> How do I create a file?
[01:12:59] *** Quits: mmhat (~mmh@55d4f954.access.ecotel.net) (Quit: WeeChat 3.4)
[01:13:16] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Ping timeout: 245 seconds)
[01:15:35] <EvanR> :t writeFile
[01:15:36] <lambdabot> FilePath -> String -> IO ()
[01:17:17] <ober> So I can just pass an empty string to writeFile?
[01:17:25] <EvanR> yeah
[01:18:03] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[01:19:42] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[01:20:44] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c)
[01:21:48] *** Joins: alp (~alp@user/alp)
[01:24:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c) (Ping timeout: 240 seconds)
[01:26:17] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:33:18] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Remote host closed the connection)
[01:34:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:35:17] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[01:36:01] *** Quits: deadmarshal (~deadmarsh@95.38.116.14) (Ping timeout: 256 seconds)
[01:36:47] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[01:37:23] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[01:38:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[01:43:02] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:43:19] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:45:31] <maerwald> do we have a good HTML parser?
[01:47:45] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[01:50:14] *** Joins: ober_ (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[01:50:24] <dminuoso> For potentially malformed tagsoup is your best bet I think.
[01:50:31] <dminuoso> If you expect it to be well formed, no clue
[01:50:34] <maerwald> I tried tagsoup, it has bugs
[01:52:47] *** Quits: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[01:54:53] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:55:12] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:56:17] *** Quits: wavemode (~wavemode@2601:241:0:fc90:2892:d0:a7ec:bc11) (Quit: Client closed)
[01:56:36] *** Quits: alx741 (~alx741@157.100.197.240) (Quit: alx741)
[01:57:19] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[01:58:51] *** Joins: wavemode (~wavemode@2601:241:0:fc90:2892:d0:a7ec:bc11)
[01:59:20] *** Quits: cosimone (~user@93-34-133-254.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:00:06] <maerwald> can only find projects that are half done, don't support the HTML5 parsing algorithm or are just buggy
[02:02:15] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[02:02:23] *** Quits: michalz (~michalz@185.246.204.65) (Remote host closed the connection)
[02:03:37] <EvanR> I wonder what the proper interface for an HTML parser is
[02:03:49] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:05:00] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Quit: ZNC 1.8.2+cygwin2 - https://znc.in)
[02:05:48] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[02:05:48] *** Joins: deadmarshal (~deadmarsh@95.38.117.25)
[02:07:42] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Read error: Connection reset by peer)
[02:08:03] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[02:08:13] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[02:08:41] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:89bd:bcbb:df15:8e9a) (Ping timeout: 245 seconds)
[02:10:21] *** Quits: deadmarshal (~deadmarsh@95.38.117.25) (Ping timeout: 256 seconds)
[02:11:14] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[02:12:57] *** Joins: Pickchea (~private@user/pickchea)
[02:13:03] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[02:13:08] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:16:16] *** Quits: max22- (~maxime@2a01cb088335980012c6117e30bee14c.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:16:27] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[02:21:43] *** Quits: slack1256 (~slack1256@191.126.227.70) (Remote host closed the connection)
[02:25:51] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c)
[02:26:25] *** Joins: foul_owl (~kerry@71.212.148.11)
[02:26:35] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[02:26:39] *** Joins: deadmarshal (~deadmarsh@95.38.117.25)
[02:28:11] *** Quits: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: Leaving)
[02:29:00] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 250 seconds)
[02:29:45] *** Joins: ober__ (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[02:31:14] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 256 seconds)
[02:32:07] *** Quits: ober_ (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[02:34:27] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[02:36:21] *** Quits: foul_owl (~kerry@71.212.148.11) (Ping timeout: 250 seconds)
[02:36:35] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[02:38:57] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[02:43:35] *** Joins: slim (uid300876@id-300876.lymington.irccloud.com)
[02:43:37] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[02:44:46] *** Quits: domcornloan (~mike@user/feetwind) (Quit: WeeChat 3.1)
[02:44:50] *** Quits: deadmarshal (~deadmarsh@95.38.117.25) (Ping timeout: 256 seconds)
[02:45:09] *** Joins: feetwind (~mike@user/feetwind)
[02:52:05] *** Joins: foul_owl (~kerry@94.140.8.52)
[02:53:57] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:4100:dd4:ee5e:72a7) (Ping timeout: 240 seconds)
[02:54:57] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::5483) (Ping timeout: 240 seconds)
[02:55:04] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[02:55:20] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[02:55:24] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::5483)
[03:02:39] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[03:08:43] *** Quits: ober__ (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Quit: Leaving)
[03:10:09] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 250 seconds)
[03:13:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[03:17:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[03:18:21] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 256 seconds)
[03:19:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[03:20:04] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:20:21] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:89bd:bcbb:df15:8e9a)
[03:22:04] *** Joins: Shiranai (~Shiranai@190.237.13.188)
[03:22:40] *** Joins: lechner (~lechner@debian/lechner)
[03:23:22] <Shiranai> hello, any natural ways to make an `m [m a]` into an `[m a]`? Here `m` is a monad but I could strengthen that assumption if needed
[03:23:38] <dminuoso> Shiranai: What would you expect that to do?
[03:23:54] <dminuoso> And no, in general that transformation is impossible
[03:23:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 240 seconds)
[03:24:14] <dminuoso> Well what you can do is
[03:24:19] <dminuoso> % :t sequence
[03:24:20] <yahb> dminuoso: (Traversable t, Monad m) => t (m a) -> m (t a)
[03:24:25] <dminuoso> % :t join
[03:24:26] <yahb> dminuoso: Monad m => m (m a) -> m a
[03:24:36] <dminuoso> % :t join . sequence
[03:24:36] <yahb> dminuoso: (Monad m, Traversable m) => m (m a) -> m a
[03:24:59] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[03:25:07] <dminuoso> % :t join . fmap sequence
[03:25:08] <yahb> dminuoso: (Monad m, Traversable t) => m (t (m a)) -> m (t a)
[03:25:20] <dminuoso> Shiranai: Whether that does what you want it to do, Im not sure.
[03:25:29] <shapr> :t join
[03:25:30] <lambdabot> Monad m => m (m a) -> m a
[03:25:32] <dminuoso> So let me revoke my previous statement abuot "this is impossible"
[03:25:47] <EvanR> I can't wait to hear what Shiranai's operation is supposed to do xD
[03:26:27] <EvanR> so we bifurcate between coming up with a solution and clearing up misconceptions about monads
[03:26:49] <EvanR> or something else
[03:27:08] <Shiranai> sorry for disappointing you guys but I have no idea what that's supposed to do haha, I'm solving some exercises and that signature came up
[03:27:15] <EvanR> oof
[03:27:21] * shapr is sad
[03:27:31] <monochrom> That can be a very XYZABC problem.
[03:28:16] <Shiranai> I was implementing monad for `data ListT m a = ConsT (m a) (ListT m a) | NilT` (I'm aware this is not the standard definition)
[03:29:26] <Shiranai> also thanks, dminuoso, that's probably what I needed
[03:29:56] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 245 seconds)
[03:30:35] <awpr> I don't think that can be a Monad.  that has the whole list structure outside of `m`, and there's no way to figure out ahead of time what that list structure should be for the result of a `>>=`
[03:31:19] <dminuoso> If that's what you really want, I think you should have used a `traverse` before.
[03:34:26] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:39:53] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[03:42:43] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[03:43:02] *** Joins: cheater (~Username@user/cheater)
[03:43:07] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[03:46:05] *** Joins: k8yun (~k8yun@user/k8yun)
[03:46:50] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:46:59] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 250 seconds)
[03:49:02] <lyxia> aka the list non-monad-transformer
[03:52:35] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[03:58:37] <monochrom> Decepticon :)
[03:59:15] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[04:01:45] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[04:03:17] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:04:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:04:23] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:04:23] *** Joins: wroathe (~wroathe@user/wroathe)
[04:09:36] *** Joins: capo_greco (~textual@60-241-161-167.static.tpgi.com.au)
[04:10:20] <capo_greco> hi Haskell community!
[04:10:37] <capo_greco> I have a beginner question
[04:10:39] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:11:34] <geekosaur> ask, please
[04:11:56] <capo_greco> I have GHC installed here on a 2020 M1 MacBook Pro running macOS Monteray
[04:12:16] <capo_greco> however, when trying to run `stack build`
[04:12:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[04:12:39] <capo_greco> stack simply returns `I don't know how to install GHC for (OSX,AArch64), please install manually`
[04:13:03] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[04:13:37] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:adf2:7fd4:5ba2:8512) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:13:43] <capo_greco> I have the `config.yaml` open
[04:14:22] <capo_greco> but I am not sure how to link the system version of ghc (which works)
[04:14:31] <capo_greco> or if that is what I should be trying to do
[04:14:45] <geekosaur> you have to passstack --system-ghc, iirc
[04:15:04] <geekosaur> I don't know ifthere's a way to configure that as default in config.yaml
[04:15:30] <capo_greco> I already tried using this flag - gives the same result unfortunately 
[04:16:39] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[04:16:59] <geekosaur> it shouldn't be trying to install ghc in that case, hm
[04:17:59] <capo_greco> I'm using this syntax: `stack build --system-ghc`
[04:18:10] <geekosaur> looks like config.yaml entry is "system-ghc: true"
[04:18:40] <geekosaur> I'm not a stack user so I can't provide much more help, I'm afraid
[04:19:13] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[04:19:21] <capo_greco> allgood - thank you geekosaur
[04:21:01] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:21:07] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[04:21:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b) (Ping timeout: 240 seconds)
[04:21:59] <capo_greco> ok! so setting `skip-ghc-check: true` in the config.yaml got it to compile something
[04:23:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:23:21] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:25:58] *** Joins: cynomys (~cynomys@user/cynomys)
[04:27:29] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 256 seconds)
[04:29:25] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:511a:5eb2:c96:106b)
[04:33:39] *** Joins: vicfred (~vicfred@user/vicfred)
[04:38:19] <EvanR> is the main thread a bound thread
[04:38:47] <monochrom> Yes.
[04:39:08] <EvanR> funky
[04:39:37] *** Quits: dsrt^ (~dsrt@128-092-160-106.biz.spectrum.com) (Remote host closed the connection)
[04:42:08] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[04:45:22] *** Quits: aplainze1akind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[04:45:32] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[04:46:13] *** Quits: denbrahe (~denbrahe@2001:470:69fc:105::19c0) (Ping timeout: 240 seconds)
[04:46:13] *** Quits: siraben (~siraben@user/siraben) (Ping timeout: 240 seconds)
[04:46:37] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[04:46:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:47:27] *** Joins: denbrahe (~denbrahe@2001:470:69fc:105::19c0)
[04:48:15] *** Joins: siraben (~siraben@user/siraben)
[04:48:54] <Axman6> EvanR: you might even say, kinky
[04:49:25] <EvanR> 🤦
[04:49:28] <Inst[m]> i'm surprised more people don't make jokes based on the fact that Haskell do notation relies on binds
[04:50:59] <jackdk> I am glad they don't
[04:52:21] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Remote host closed the connection)
[04:53:16] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[05:04:33] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[05:05:06] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[05:07:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[05:12:25] <geekosaur> and discipline
[05:13:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[05:13:56] *** Quits: capo_greco (~textual@60-241-161-167.static.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:14:06] *** Quits: EvanR (~EvanR@user/evanr) (Quit: Leaving)
[05:14:39] <sshine> and monads
[05:16:40] <sshine> there's a DNS server called Unbound that is an alternative to BIND.
[05:17:31] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[05:17:44] *** Joins: EvanR (~EvanR@user/evanr)
[05:18:35] *** Joins: capo_greco (~textual@60-241-161-167.static.tpgi.com.au)
[05:19:05] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[05:19:23] <EvanR> that was annoying. After a bunch of refactoring, glfw began to return NULL when creating a window, no other error message. Revert the code, same behavior. Go back to previous commits known to work, same behavior. Reboot the computer, it agrees to create windows again
[05:19:36] <EvanR> cosmic ray hit a linker cache or something
[05:21:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:21:19] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:23:34] <monochrom> https://ro-che.info/ccc/1
[05:24:57] <jackdk> what is the best sha1 lib in common use?
[05:26:33] <Unicorn_Princess> how soon do you figure ghc will switch to https://github.com/Kindelia/HVM and do away with GC pauses forever?
[05:26:40] <sshine> jackdk, cryptohash-sha1?
[05:26:47] <EvanR> ...
[05:26:52] <Unicorn_Princess> or do i overestimate how magical HVM is
[05:26:56] <Axman6> Unicorn_Princess: never? 
[05:27:02] <Unicorn_Princess> ; ;
[05:27:03] <Axman6> yes, very much so, you need to read the author's comments
[05:27:22] *** Joins: vysn (~vysn@user/vysn)
[05:27:23] <jackdk> sshine: that may be best option. wasn't sure if it was well-maintained
[05:27:33] <Unicorn_Princess> Axman6, which comments?
[05:27:36] <Axman6> it can only handle pure code basically, all the primops would need to be implemented and handled correctly - and concurrencvy changes things a lot
[05:27:45] <Axman6> on Reddit, lobste.rs etc.
[05:27:47] *** Quits: sektor|3 (~kvirc@94.155.193.66) (Ping timeout: 256 seconds)
[05:27:50] <sshine> jackdk, Uploaded by phadej at 2021-11-13 -- I'd say it is.
[05:27:54] <Unicorn_Princess> awww
[05:28:03] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[05:28:13] <Inst> @monochrom your comic is bad and you should feel bad
[05:28:13] <lambdabot> Unknown command, try @list
[05:28:29] <jackdk> sshine: tyvm
[05:28:41] <Axman6> jackdk: #haskell-cryptography might have some more advice - the libsodium library that's being written at the moment will include SHA1
[05:29:05] <Axman6> Personally I would use cryptonite, because I'm quite used to it
[05:29:15] <jackdk> Axman6: I need to make a decision today-ish, because a kind soul is PRing AWS SSO support into amazonka
[05:29:32] *** Quits: Shiranai (~Shiranai@190.237.13.188) (Quit: Connection closed)
[05:29:36] <jackdk> cryptonite is inside the event horizon of the foundation/basement black hole
[05:30:08] <Axman6> ah yes, ignore that then
[05:32:25] <Axman6> I've asked in the other channel for you, just in case there is a better suggestion
[05:33:40] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c) (Remote host closed the connection)
[05:35:02] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:38:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:38:42] <jackdk> appreciate it
[05:38:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:38:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:39:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:39:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:39:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:39:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:39:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:39:59] *** Joins: k8yun_ (~k8yun@user/k8yun)
[05:40:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:40:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:40:21] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:40:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:40:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:40:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:41:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:41:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:41:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:41:36] *** Quits: k8yun_ (~k8yun@user/k8yun) (Remote host closed the connection)
[05:41:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:41:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:42:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:42:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:42:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:42:28] <monochrom> I have this wild conjecture that if there is channel traffic, lavaman's connection is stable.
[05:42:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:42:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:42:52] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:42:54] <Inst> conjecture disproven
[05:42:57] *** Joins: califax- (~califax@user/califx)
[05:43:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:43:11] <EvanR> coincidentally the colors for lavaman leaving and joining are orange and yellow
[05:43:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:43:20] <EvanR> for me
[05:43:22] <Inst> ah, a fellow hexchat / xchat user
[05:43:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:43:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:43:39] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 256 seconds)
[05:43:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:43:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:44:06] <EvanR> someone call liquid nitrogen man
[05:44:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:44:16] <monochrom> haha
[05:44:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:44:27] *** Quits: capo_greco (~textual@60-241-161-167.static.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:44:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:44:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:44:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:45:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:45:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:45:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:45:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:45:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:45:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:46:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:46:09] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[05:46:19] <Inst> tbh i wonder if lava's system is on mobile
[05:46:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:46:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:46:41] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[05:46:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:46:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:47:00] <Axman6> all the glirc gang sees is "lavaman+x"
[05:47:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:47:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:47:16] <Axman6> but with more colours
[05:47:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:47:31] <Inst> axman6: you have ops, right?
[05:47:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:47:33] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:47:33] *** califax- is now known as califax
[05:47:35] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[05:47:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:47:48] <Axman6> I had ops once, for unknown reasons
[05:47:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:47:58] <Inst> well, it doesn't matter, the first thing you'd do is to ban me
[05:48:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:48:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:48:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:48:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:48:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:49:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:49:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:49:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:49:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:49:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:50:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:50:04] <Axman6> purpletest
[05:50:06] <Axman6> hmm
[05:50:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:50:15] <Axman6> @where ops
[05:50:15] <lambdabot> byorgey Cale conal copumpkin dcoutts dibblego dolio edwardk geekosaur glguy jmcarthur johnw mniip monochrom quicksilver shachaf shapr ski
[05:50:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:50:26] <Axman6> RE: lavaman
[05:50:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:50:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:50:48] *** ChanServ sets mode: +o monochrom
[05:50:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:51:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:51:08] *** monochrom sets mode: +b *!*@98.38.249.169
[05:51:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:51:45] <Inst> thanks
[05:52:10] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[05:52:43] *** Quits: jiribenes (~jiribenes@rosa.jiribenes.com) (Remote host closed the connection)
[05:54:15] <monochrom> Axman6: It is possible that if you say "/msg chanserv op #haskell" you will be op again.
[05:54:43] *** Joins: ryanbooker (uid4340@id-4340.hampstead.irccloud.com)
[05:54:46] <monochrom> But normally we de-op ourselves when there is nothing.
[05:54:48] <Axman6> "ChanServ: You are not authorized to perform this operation." and probably rightfully so =)
[05:54:53] *** monochrom sets mode: -o monochrom
[05:54:58] <monochrom> Hrm OK
[05:56:02] *** Joins: desklamp[m] (~desklampm@2001:470:69fc:105::77b8)
[05:58:38] *** ChanServ sets mode: +o Axman6
[05:59:44] *** ChanServ sets mode: +o monochrom
[06:01:11] *** monochrom sets mode: -b+b-o *!*@98.38.249.169 *!*@98.38.249.169$##fix-your-connection monochrom
[06:01:20] *** Joins: k8yun (~k8yun@user/k8yun)
[06:02:55] <Inst> can i troll for 5 minutes?
[06:03:30] <Inst> what's the difference between an expression-based and a statement-based language?
[06:03:35] <Inst> and is one more "advanced" than the other?
[06:07:49] <Inst> i'm going over K&R right now and wondering if anyone ever tried to write a "Haskell: The Programming Language" book
[06:08:37] <Axman6> Oh my
[06:09:36] <Axman6> Inst: my very naive understanding is that expressions can freely be substituted, while statements have side effects, so you can't just substitute things willi-nilly
[06:09:55] <Inst> but an IO action can be an expression
[06:10:00] <ephemient> expressions in C have side effects too
[06:10:18] <Inst> and yeah, statement-based languages also have expressions
[06:11:14] <ephemient> honestly I think it's a pretty pointless distinction: a "statement" can be treated as an "expression" with a unitary type
[06:11:39] <Axman6> IO actions are pure and can be freely sumstituted - foo (someIO x) (someIO x) will be the same as let y = someIO x in foo y y
[06:11:41] <ephemient> I mean, not exactly, in C's grammer, but in GCC ({ }) can wrap any statement into an expression, so…
[06:11:56] <sm> to me "statement" implies an evaluation order (sequential), while "expression" doesn't
[06:12:23] <Inst> i guess, i was supposed to have a unit where you had a simple hello world + (with getLine) program in do notation
[06:12:32] <Inst> then unveil it into the underlying binds
[06:12:38] <Inst> one of the questions asked is: why is this necessary?
[06:12:45] <Inst> the provision answer I had was that Haskell is an expression-based language
[06:12:51] *** Joins: anon12176673 (~anon12176@host-92-19-99-147.as13285.net)
[06:13:03] *** Quits: anon12176673 (~anon12176@host-92-19-99-147.as13285.net) (Remote host closed the connection)
[06:13:04] <ephemient> expressions not having side effects is not the case in other (strict) functional programming languages, you do rely on expression side-effects and can sequence expressions
[06:13:24] <Inst> the compiler works by evaluating expressions and transforming them into imperative code, as opposed to executing statements
[06:13:35] <Inst> i hope you're not going to object that this is "not even wrong"
[06:13:50] <sm> (and yes, "expression" carries more of an expectation of few/no side effects)
[06:13:54] *** Joins: anon12176673 (~anon12176@host-92-19-99-147.as13285.net)
[06:14:13] <Inst> expressions have side effects in special cases
[06:14:13] *** Quits: anon12176673 (~anon12176@host-92-19-99-147.as13285.net) (Remote host closed the connection)
[06:14:19] <Inst> statements have side effects as part of their definition
[06:14:22] <Inst> is that a correct guess?
[06:14:37] <ephemient> the SML family is expression-based but uses (a;b;c) to sequence expressions a,b,c
[06:14:44] <sm> you could have side-effect free statements.
[06:14:51] *** Joins: anon12176673 (~anon12176@host-92-19-99-147.as13285.net)
[06:15:11] <Inst> #define in C as an example?
[06:15:21] <EvanR> how many expressions could nest on the head of a pin
[06:15:57] <EvanR> go to the BNF of expression / statement language mobile
[06:16:43] <ephemient> yeah to me the difference is purely up to the particular language's grammar
[06:17:12] <ephemient> C permits any expression to be used as a statement; Java does not
[06:17:26] <EvanR> often you will see the notion of an expression having a value (which may be another expression, possibly in another language), while the value of a statement is usually not a thing. And when it is I think of them also as expressions
[06:17:54] <EvanR> as in ruby
[06:18:27] <EvanR> whose statements have values and are basically messed up expressions
[06:18:32] * awpr has a piece of paper on his desk containing a "term language" for linear logic, wherein there are statements as distinct from expressions
[06:18:51] *** Parts: desklamp[m] (~desklampm@2001:470:69fc:105::77b8) ()
[06:19:58] *** Quits: anon12176673 (~anon12176@host-92-19-99-147.as13285.net) (Remote host closed the connection)
[06:19:59] <sm> to me "statements" means "sequential, likely effectful", and "expressions" means "tree-structured, likely non-effectful"
[06:20:37] *** Joins: anon41255431 (~anon41255@host-92-19-99-147.as13285.net)
[06:20:42] <EvanR> when statements have no value, then naturally... the point is effects xD
[06:20:43] <awpr> https://homepages.inf.ed.ac.uk/wadler/papers/dual/dual.pdf has the same kind of term/statement setup, but for a more traditional computational model
[06:20:49] *** Quits: anon41255431 (~anon41255@host-92-19-99-147.as13285.net) (Remote host closed the connection)
[06:21:10] <EvanR> when expressions have no effects, the point is valuation
[06:21:39] <EvanR> i.e. intended semantics
[06:22:16] *** Joins: anon41255431 (~anon41255@host-92-19-99-147.as13285.net)
[06:22:31] <monochrom> when statements have no effects, the point is identity :)
[06:22:56] *** ChanServ sets mode: +o litharge
[06:22:57] *** litharge sets mode: -bo *!*@98.38.249.169$##fix-your-connection litharge
[06:23:09] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c)
[06:23:14] <EvanR> State monad plays both sides of the field
[06:23:20] <EvanR> evalState, execState
[06:24:09] <EvanR> "values" of type State s a are expressions but also statements
[06:24:21] <awpr> the dual calculus notion of statements has neither a value nor side effects (but of course it's a very different concept from "statements" in imperative language)
[06:24:37] <anon41255431> Does anyone know where I can find recursion problems to practice using Haskell?
[06:25:26] <monochrom> Perhaps "99 haskell problems"
[06:25:33] *** Quits: anon41255431 (~anon41255@host-92-19-99-147.as13285.net) (Remote host closed the connection)
[06:25:40] <Axman6> there's a lot to be learned by implementing as many of the list functions using foldr IMO
[06:25:45] <monochrom> https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems
[06:27:01] <monochrom> Equivalently Haskell doesn't have loops so every problem that exceeds O(1)-time is a recursion problem. :)
[06:27:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:27:19] *** Joins: anon41255431 (~anon41255@host-92-19-99-147.as13285.net)
[06:27:28] *** Quits: anon41255431 (~anon41255@host-92-19-99-147.as13285.net) (Remote host closed the connection)
[06:28:19] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[06:30:27] *** Joins: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com)
[06:32:02] *** Quits: xff0x (~xff0x@2001:1a81:5384:400:77b6:98fb:61ba:7d90) (Ping timeout: 240 seconds)
[06:32:23] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:b92:1a0:165b:5914)
[06:32:59] <EvanR> so expressions and statements are like link vs ganon. They keep appearing together but how they look depends on which sequel / language it is
[06:33:34] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[06:33:54] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[06:34:01] *** Joins: xff0x (~xff0x@2001:1a81:53bc:500:22c0:5bd7:c089:bc66)
[06:36:00] *** Quits: emf_ (~emf@2620:10d:c090:400::5:c6d7) (Ping timeout: 250 seconds)
[06:37:05] <Inst> is this any good?
[06:37:07] <Inst> https://wiki.haskell.org/99_questions/1_to_10
[06:38:44] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[06:42:40] *** Joins: razetime (~quassel@49.207.198.36)
[06:43:26] *** Joins: alMalsam1 (~alMalsamo@gateway/tor-sasl/almalsamo)
[06:43:56] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:89bd:bcbb:df15:8e9a) (Remote host closed the connection)
[06:44:58] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[06:51:16] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:56:43] *** Joins: mbuf (~Shakthi@110.225.224.158)
[06:59:50] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[07:04:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:06:33] *** Joins: capo_greco (~textual@60-241-161-167.static.tpgi.com.au)
[07:07:17] *** Quits: foul_owl (~kerry@94.140.8.52) (Ping timeout: 256 seconds)
[07:09:59] *** Quits: sleblanc (~sleblanc@user/sleblanc) (Quit: Leaving)
[07:10:02] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:10:02] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:10:02] *** Joins: wroathe (~wroathe@user/wroathe)
[07:11:28] *** Joins: nebu (~user@user/wavion)
[07:11:48] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:12:37] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[07:13:02] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:13:16] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[07:14:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:15:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:15:27] *** Quits: td_ (~td@94.134.91.16) (Ping timeout: 256 seconds)
[07:16:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:17:22] *** Joins: td_ (~td@94.134.91.205)
[07:18:51] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[07:22:21] *** Joins: anon12176673 (~anon12176@host-92-19-99-147.as13285.net)
[07:23:01] *** Joins: foul_owl (~kerry@94.140.8.25)
[07:27:40] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[07:29:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:30:15] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[07:30:16] *** Quits: burnsidesLlama (~burnsides@dhcp168-051.wadham.ox.ac.uk) (Remote host closed the connection)
[07:30:16] *** Quits: yauhsien (~yauhsien@61-231-45-223.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:30:45] *** Joins: yauhsien (~yauhsien@61-231-45-223.dynamic-ip.hinet.net)
[07:31:51] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:34:58] *** Quits: anon12176673 (~anon12176@host-92-19-99-147.as13285.net) (Remote host closed the connection)
[07:35:21] *** Joins: dajoer (~david@user/gvx)
[07:35:21] *** Joins: Erutuon (~Erutuon@user/erutuon)
[07:35:43] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[07:40:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:41:36] *** Joins: jinsun (~quassel@user/jinsun)
[07:42:39] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[07:42:58] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:e8ea:b48d:a0c7:7ddc)
[07:43:51] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[07:45:15] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[07:45:38] *** Joins: Erutuon (~Erutuon@user/erutuon)
[07:53:12] *** Joins: seer (~delicacie@2601:6c4:4080:3f80:8d94:ce47:541:9d0d)
[07:53:14] *** seer is now known as Inst
[07:55:18] <Inst> https://pastebin.com/4xnKg7N6
[07:55:24] <Inst> is this worth uploading into hackage?
[07:55:29] <Inst> obv it needs cabal files
[07:55:31] <Inst> and haddock
[07:56:24] <EvanR> and make sure to use the most valuable name you can think of
[07:56:43] <Inst> that everyone will get pissed off that i'm now squatting their name?
[07:57:46] <EvanR> probably fine Ed K has probably uploaded anything worth using to the most valuable names already
[07:57:58] <EvanR> anything else is trash
[07:58:27] <jackdk> many those operator names are already in use
[07:58:51] <Inst> https://hoogle.haskell.org/?hoogle=%3D%40&scope=set%3Astackage
[07:58:57] <Inst> https://hoogle.haskell.org/?hoogle=%3D%40%7C&scope=set%3Astackage
[07:59:10] <Inst> https://hoogle.haskell.org/?hoogle=%7C%3D%40
[07:59:33] <Inst> https://hoogle.haskell.org/?hoogle=%40%3D%40
[07:59:43] <Inst> are those operator names actually in use? :(
[08:00:27] *** Joins: deadmarshal (~deadmarsh@95.38.117.25)
[08:01:40] <EvanR> you might be interested in the !@$# operator
[08:02:06] <EvanR> so your code looks like it's cursing
[08:02:27] <Inst> i'm deadly serious, it seems to be a simple addition that a noob can make to hackage
[08:02:39] <Axman6> lens loves to take a big chunk out of the operator space, make sure you don't conflict with it because I love lens
[08:03:04] <Inst> the way I understand Haskell culture is that most Haskellers hate Haskell and instead of being a troll like sandakarwhatever, they just build a lib or language extension
[08:03:20] <Inst> which is still trolling, because they're contributing to the problem of making Haskell unteachable / unlearnable
[08:03:27] <EvanR> > let (∈) = elem in 'o' ∈ "hello world"
[08:03:28] <lambdabot>  True
[08:03:34] <EvanR> use this
[08:04:02] <EvanR> actually, just use `elem`
[08:04:22] <EvanR> (:∈ might be good to use for advance type level shenanigans)
[08:04:46] <Inst> i'm too lazy to type `elem`
[08:04:59] <EvanR> well, code is read much more often than it is written
[08:05:07] <EvanR> keep that in mind
[08:05:41] <Inst> oh well, i'll clean it up, learn cabal, and see if Hackage will let me upload 0.1 of OrPat.ElemOrPatternsOperators
[08:05:58] *** Joins: cheater (~Username@user/cheater)
[08:06:13] <monochrom> How is elem unteachable or unlearnable. This is BS.
[08:06:35] <Inst> elem isn't
[08:06:50] <EvanR> more useful to me as a pattern-ish thing than elem would be a pattern of the form 
[08:07:13] <EvanR> prev ++ MyNeedle ++ rest
[08:07:14] <Inst> if people like it, maybe it could one day get added to data.foldables
[08:07:22] <EvanR> then you can also manipulate the prev and rest
[08:07:42] <Inst> *foldable
[08:07:44] <EvanR> (if prev is backwards, you have a zipper)
[08:08:06] <dsal> Please don't take inspiration from npm.
[08:08:41] <EvanR> yeah single line definitions of elem aren't the sort of thing people install packages for
[08:08:50] <EvanR> it's easier to just type that line
[08:11:33] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[08:12:52] * ski doesn't really see what the point of the operations in the paste are
[08:13:41] <Inst> hopefully, get someone to stuff it into foldable eventually
[08:13:49] <Inst> so the next time someone asks about or patterns
[08:13:49] <ski> (the last operation is an overlap / non-disjointness check. it might perhaps be useful to give a name. but i'd probably not pick an infix operator for it, just an alphanumeric name)
[08:13:56] <dsal> elem is already in Foldable
[08:14:00] <Inst> i know
[08:14:14] <ski> the paste doesn't seem to have anything to do with disjunctive patterns
[08:14:38] <ski> (btw, that call to `foldr' could be replaced by an `any')
[08:14:41] *** Quits: ryanbooker (uid4340@id-4340.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:14:49] <Inst> but map has <$> attached to it, even if <$> is the exact same length as map
[08:14:59] <ski> you mean `fmap'
[08:15:32] <Axman6> <$> exists mostly for use with Applicative code
[08:15:39] <ski> ^
[08:15:40] <dsal> Just about every Haskell program uses fmap, typically infix.
[08:15:50] * ski often uses `fmap', infix
[08:15:58] <ski>   foo `fmap` bar
[08:16:19] <monochrom> fmap is used much more often than elem, and <$> was chosen because there is a good analogy with existing $
[08:16:26] <Axman6> I have literally never done that... I just pretend that <$> is liftA1 and Functors are really Applicatives
[08:16:53] <ski> i guess it's a habit since before the invention of `Applicative'
[08:17:21] <Inst> i'm sorry for trolling
[08:17:41] <monochrom> And yeah eventually an infix operator was desired because fmap was much nicer being used infix in those contexts.
[08:18:05] <ski> you weren't trolling, that i could see, but merely attempting to get to grips with what's a worthwhile thing to add as a community contribution
[08:18:14] <dsal> The neat thing about `elem` as a section infix is it works both ways.
[08:18:21] <Inst> i actually import Data.Bool most of the time to get access to bool
[08:18:39] <Axman6> catamorph ALL THE THINGS!
[08:18:56] <EvanR> it's catamorphin' time.
[08:21:17] <dsal> Is that the 80s cartoon where the cat people turned into a giant robot?
[08:23:19] <Inst> https://en.wikipedia.org/wiki/Catamorphism
[08:23:53] <Inst> I think that was swat kats or something
[08:24:56] <Inst> my specific use case is that whenever i'm programming in some other language
[08:25:28] <Inst> i get pissed off that i have to type a == x || a == y || ...
[08:26:10] <Inst> i mean, multiple assignments have been here since c, why do i have to do explicit or and retyping?
[08:26:12] <Axman6> Maybe python's for you
[08:26:23] <EvanR> DRY
[08:26:51] <Axman6> so dry
[08:27:02] <EvanR> your code should look like compression output
[08:27:08] <monochrom> APL
[08:27:09] <ski>   a `elem` [x,y,...]  -- what's wrong with this ?
[08:27:21] <c_wraith> what does multiple assignments have to do with multiple equality tests?
[08:27:24] <Inst> it doesn't explicitly indicate the intent
[08:27:37] <ski> (and what does this have to do with "multiple assignments", whatever you mean by that here ?)
[08:27:38] <Axman6> % (=@|) :: (Foldable t, Eq a) => a -> t a -> Bool; (=@|) = elem; 1 =@ (1,2,3)
[08:27:38] <yahb> Axman6: ; <interactive>:13:66: error:; * Variable not in scope: (=@) :: t0 -> (a0, b0, c0) -> DecsQ; * Perhaps you meant one of these: `==' (imported from Prelude), `<@' (imported from Control.Comonad.Store), `=@|' (line 13)
[08:27:48] <Axman6> % (=@|) :: (Foldable t, Eq a) => a -> t a -> Bool; (=@|) = elem; 1 =@| (1,2,3)
[08:27:48] <yahb> Axman6: ; <interactive>:14:66: error:; GHC stage restriction:; `=@|' is used in a top-level splice, quasi-quote, or annotation,; and must be imported, not defined locally
[08:27:52] <EvanR> what's the intent?
[08:27:56] <Axman6> % (=@|) :: (Foldable t, Eq a) => a -> t a -> Bool; (=@|) = elem;
[08:27:57] <yahb> Axman6: 
[08:28:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[08:28:07] <Axman6> %  1 =@| (1,2,3)
[08:28:07] <yahb> Axman6: ; <interactive>:16:3: error:; * No instance for (Foldable ((,,) Integer Integer)) arising from a use of `=@|'; * In the expression: 1 =@| (1, 2, 3); In an equation for `it': it = 1 =@| (1, 2, 3)
[08:28:28] <dsal> % 1 =@| (1,2)
[08:28:28] <yahb> dsal: False
[08:28:31] <Axman6> Do we only have Foldable for (,)???
[08:28:32] <Inst> % (=@|) = elem
[08:28:32] <yahb> Inst: 
[08:28:40] <dsal> @Axman6 Yeah, it's generally confusing.
[08:28:40] <lambdabot> Unknown command, try @list
[08:28:50] <dsal> damnit.  You're showing up as an @ so I noobed.
[08:28:56] <Inst> 2 =@| [2,3,4]
[08:29:02] <Inst> % 2 =@| [2,3,4]
[08:29:02] <yahb> Inst: True
[08:29:03] <EvanR> clearly only (a,a,a) is foldable
[08:29:04] <Axman6> such a noob
[08:29:07] <ski> how does it not explicitly indicate the intent (and if it doesn't, how does `=@|' fare any better, on that front) ?
[08:30:03] <Inst> % 2 =@| [1,3,4]
[08:30:03] <yahb> Inst: False
[08:30:14] <Inst> % :r
[08:30:14] <yahb> Inst: Ok, no modules loaded.
[08:31:11] <Inst> checking that a is an element of list is not obviously equivalent to wanting to do multiple equivalence checks under or conditions
[08:31:55] <Inst> when i asked first whether Haskell had or patterns
[08:32:03] <Inst> it took a bit of time before someone offered the obvious elem solution
[08:32:19] <c_wraith> they do different things
[08:32:23] <dsal> Just about anyone who sees "x `elem` ys" will know what it means.  Nobody who sees "x =@| ys" will have any idea what the code is doing.
[08:32:24] <c_wraith> patterns can bind values
[08:32:26] <EvanR> in this case, the fact that it's easier to read AND write an `elem` makes it a no brainer
[08:32:28] <monochrom> I'm not surprised.
[08:32:43] <EvanR> moving on
[08:32:55] <monochrom> Someone in a math channel asked "how to solve equations".
[08:33:14] <ski> EvanR : i guess the problem with `prev ++ MyNeedle ++ rest' is that it's ambiguous, unless at least one of `prev' and `rest' are already bound
[08:33:17] <dsal> "hello, I just heard of math"
[08:33:30] <monochrom> It took a long time for the audience to find out they just meant linear equations in one variable, like "3x - 5 = 7".
[08:33:33] <EvanR> yeah I didn't think it would literally work
[08:33:38] <ski> (oh, and itym s/MyNeedle/[MyNeedle]/)
[08:33:53] <Inst> so, um, is bool a bad idea?
[08:33:53] <EvanR> that too... 
[08:34:21] <dsal> bool isn't 100% a bad idea, but it rarely makes things clearer.
[08:34:32] <Inst> i mean everyone in this channel knows what bool, the function, not the type, is, right?
[08:34:47] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:34:52] <dsal> Yeah, you mentioned using `bool` earlier.
[08:34:52] <EvanR> I use if then else
[08:34:58] <ski> if there's a reasonable pattern-matching solution, then that's probably better than using a `Bool'ean condition
[08:34:58] <dsal> Though `Bool` is also a bad idea a lot of the time.
[08:35:02] <EvanR> or pattern matching
[08:35:18] <monochrom> bool is a good idea that turns out to not matter.
[08:36:07] <monochrom> Maybe a Scheme person would use bool to write foldr but we have something even better.
[08:36:48] <Inst> just, if there's a simple split, i don't see the point of using case of
[08:37:13] <monochrom> And then even when boolean tests are important, we have guards.
[08:37:30] <Inst> iirc guards can't be freely deployed, right?
[08:37:36] <Inst> only in case expressions and function definitions
[08:37:43] <Inst> they're syntax, not functions
[08:38:32] <dsal> This is an abstract concern.  You should use the thing that's best in the situation.
[08:38:44] <Inst> let x | condition 1 = y; x | condition 2 = z in
[08:38:47] <dsal> `bool` is *sometimes* the best, but pretty rarely so.
[08:38:53] *** Quits: modnar (~modnar@shell.sonic.net) (Quit: No Ping reply in 180 seconds.)
[08:39:59] <Inst> bleh, sorry for trolling you with my shit
[08:40:38] <ski> Inst : guards attach to pattern-matching, yes
[08:40:39] *** Joins: modnar (~modnar@shell.sonic.net)
[08:41:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:42:41] <EvanR> the mystic barrier imprisoning lavaman for minuteslennia is weakening
[08:42:55] <Inst> lavaman, did you fix your connection yet?
[08:43:51] <Inst> basically, on FP discord, someone told me: "never use if then else, use case of"
[08:44:06] <Inst> i responded: if then else is simple in cases where if then else makes sense
[08:44:13] <Inst> is applicable, i mean
[08:44:17] <Inst> then someone told me to use bool instead
[08:44:19] <dolio> That advice doesn't make much sense.
[08:45:22] <monochrom> Not sure whether I should say "this is why I don't read FP discord" or "data shows that people misinterpret statements".
[08:45:57] <c_wraith> I don't like if/then/else except for one-liners.  But that's not the same as "don't use it".
[08:46:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[08:46:32] <dolio> Pretty much all "never use X" advice isn't any good.
[08:47:19] <ski> "never use \"never use X\" advice" ?
[08:47:52] <EvanR> "remember that giant red button I told you to never use?"
[08:48:25] <ephemient> https://gitlab.haskell.org/ghc/ghc/-/issues/19477 says that ifThenElse becomes unusable with {-# LANGUAGE LinearTypes, RebindableSyntax #-}, in which case you can only use case ... of { True -> ...; False -> ... } but I imagine that shouldn't affect *that* many people at the moment
[08:48:29] <monochrom> I never shave people who never shave themselves.
[08:49:54] <ski> "never use ..." can be problematic, if you're not properly told *why* whatever thing that is mentioned is considered to be better left avoided
[08:50:13] <Inst> because case of is more powerful, using pattern matching
[08:50:38] <ski> using a more general version that covers something, isn't always a good idea
[08:50:39] <monochrom> For Bool there is no power to speak of, really.
[08:50:52] <monochrom> For Maybe a, [a], etc., now we're talking.
[08:50:54] <dolio> It's not more powerful to do case analysis on a boolean, though. So in that scenario it's just senseless adherence to dogma.
[08:51:15] <Inst> on the other hand, you can profitable jettison if then else from the language
[08:51:22] <Inst> since it desugars to case of anyways
[08:51:37] <Inst> case boolean of; True -> k; _ -> l
[08:51:55] <EvanR> even lisp has syntactic sugar
[08:52:02] <EvanR> everyone loves syntactic sugar
[08:52:31] <monochrom> I like desugared grape juice more than I like grape juice. :)
[08:52:33] <Inst> i mean, there's like, 5 different ways to do a conditional in the base language
[08:52:39] <dolio> So?
[08:52:42] <Inst> and 8-10 different ways once you consider extensions and libs?
[08:52:46] * ski tends to prefer to err on the side of explaining why something should (generally) be avoided, but then, often, go on to give them the rope with which they could hang themselves with
[08:52:58] <ski> the point is to be able to make an informed decision
[08:53:20] <dolio> Having lots of ways to do something isn't automatically a bad thing.
[08:53:53] <EvanR> esp at the level if then else... who cares
[08:54:06] <EvanR> the stakes are at an all time low
[08:54:20] <Inst> dolio: the challenge is that it makes the language harder to learn
[08:54:28] <Inst> and the variety of styles in Haskell makes it harder to read
[08:54:33] <Inst> like, I still can't read lib code
[08:54:39] <EvanR> even pattern matching () is more interesting thanks to laziness or strictness issues
[08:54:44] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:55:21] <ski> some additional ways to do things (like the paste above), doesn't really add anything meaningful
[08:55:26] <ski> others do
[08:56:12] <Inst> bool compared to if then else at least is a function that can be partially applied
[08:56:13] <ski> i guess it's a matter of discernment to be able to tell which is which
[08:56:34] <Inst> the paste above is more (hey guys, guess what? You get to save 3 keystrokes on elem)
[08:56:35] <dolio> That is essentially the only reason to use bool.
[08:56:47] <ski> yes. but being able to partially apply isn't always something that's useful, in a given context
[08:57:23] <Inst> bool = 4-10 keystrokes, if then else is also 10 keystrokes
[08:57:27] *** Quits: modnar (~modnar@shell.sonic.net) (Quit: No Ping reply in 180 seconds.)
[08:57:38] <Inst> drawback: bool code is hard to read
[08:57:40] <EvanR> the number of saved keystrokes involved, added up over time, likely doesn't rival this discussion
[08:57:43] <ski> "save 3 keystrokes" is about (a very low-level of) efficiency of writing. generally it's more useful to worry about efficiency of reading
[08:57:45] <dolio> I wasn't counting bad reasons.
[08:58:12] <monochrom> https://learnyouahaskell.github.io/
[08:59:01] <monochrom> Some kind of "LYAH is dead. Long live LYAH, this time literally"
[08:59:17] *** Joins: modnar (~modnar@shell.sonic.net)
[08:59:42] <Inst> pretty good
[09:00:03] <Inst> since i hate haskellbook, maybe people can actually fix lyah
[09:03:01] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Ping timeout: 240 seconds)
[09:10:32] <neverwas> Gee, I hope they manage to preserve the style of the prose
[09:10:42] <neverwas> or even just go with annotations or something if it's not too jarring/distracting
[09:10:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:10:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:10:48] *** Joins: wroathe (~wroathe@user/wroathe)
[09:11:03] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 256 seconds)
[09:13:20] *** Joins: lechner (~lechner@debian/lechner)
[09:14:12] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[09:15:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:25:59] *** Joins: k8yun_ (~k8yun@user/k8yun)
[09:29:45] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 256 seconds)
[09:32:00] *** Joins: meer (~delicacie@2601:6c4:4080:3f80:5c6a:e4b3:e4cd:1bc3)
[09:34:17] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[09:34:37] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:8d94:ce47:541:9d0d) (Ping timeout: 240 seconds)
[09:36:34] *** meer is now known as Inst
[09:37:27] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:e8ea:b48d:a0c7:7ddc) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:41:28] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[09:42:54] *** Quits: capo_greco (~textual@60-241-161-167.static.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:43:21] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[09:44:08] *** Joins: cigsende1 (~cigsender@50-240-234-101-static.hfc.comcastbusiness.net)
[09:45:17] *** Joins: haskell_ (~haskell@65-102-32-32.ptld.qwest.net)
[09:45:36] *** Quits: haskell_ (~haskell@65-102-32-32.ptld.qwest.net) (Remote host closed the connection)
[09:46:45] *** Quits: cigsende1 (~cigsender@50-240-234-101-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[09:47:38] *** Quits: cigsender (~cigsender@74.124.58.162) (Read error: Connection reset by peer)
[09:48:10] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:49:07] *** Joins: cigsender (~cigsender@74.124.58.162)
[09:51:27] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[09:54:15] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[09:54:53] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[10:02:18] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[10:03:24] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:03:38] *** Joins: drdo (~drdo@roach0.drdo.eu)
[10:05:01] *** Quits: nebu (~user@user/wavion) (Ping timeout: 240 seconds)
[10:05:36] *** Joins: capo_greco (~textual@60-241-161-167.static.tpgi.com.au)
[10:07:05] *** Joins: ardell (~ardell@user/ardell)
[10:10:33] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[10:15:11] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:17:14] *** Joins: cheater (~Username@user/cheater)
[10:24:32] <EvanR> wait, LYAH was lost and is being reconstructed from scratch?
[10:24:57] <Inst> the site went down for a couple of days
[10:26:27] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[10:27:01] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 240 seconds)
[10:28:17] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:29:37] *** Quits: foul_owl (~kerry@94.140.8.25) (Ping timeout: 240 seconds)
[10:30:56] *** Joins: lechner (~lechner@debian/lechner)
[10:32:44] *** Quits: capo_greco (~textual@60-241-161-167.static.tpgi.com.au) (Quit: Textual IRC Client: www.textualapp.com)
[10:33:32] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[10:33:47] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[10:35:17] *** Joins: wei2912 (~wei2912@138.75.71.147)
[10:38:23] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[10:41:08] *** Joins: thevishy (~Nishant@2405:201:f005:c007:6cf1:7245:a05f:ea21)
[10:44:10] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[10:45:06] *** Joins: foul_owl (~kerry@71.212.148.11)
[10:47:52] *** Joins: jakalx (~jakalx@base.jakalx.net)
[10:56:08] *** Joins: michalz (~michalz@185.246.204.87)
[10:56:27] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[10:58:03] *** Joins: cigsende1 (~cigsender@50-240-234-101-static.hfc.comcastbusiness.net)
[10:58:16] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:f0ed:5941:868e:9ada)
[10:59:22] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:a89e:b347:cccb:c7e5) (Read error: Connection reset by peer)
[10:59:28] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[10:59:39] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3c9b:6dce:e374:3130)
[11:01:17] *** Quits: cigsender (~cigsender@74.124.58.162) (Ping timeout: 240 seconds)
[11:01:17] *** Quits: cigsende1 (~cigsender@50-240-234-101-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[11:03:03] *** Joins: cigsender (~cigsender@74.124.58.162)
[11:05:43] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:08:14] <Inst> this f- bi-
[11:08:44] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[11:08:51] <Inst> she took a business chinese class that's like oriented at B2-C1 learners, or is intended for students with around 1000 hours of instructions under her belt
[11:08:58] <Inst> so now i have to try to bail her out
[11:10:23] <sshine> Inst, 你是中国老师吗？
[11:10:50] <sshine> s/中国/汉语/
[11:11:21] <Inst> 不是，问题就是我们可以算是对象，然后虽然我汉语水平不太高，我的看能不能救他。
[11:13:22] *** Joins: VanceIsM7[m] (~vanceism7@2001:470:69fc:105::3ad)
[11:13:34] <Inst> 按照汉办的方式来算，我的水平基本上是五到六级，课本是五到六级，但是她的水平想二到三级差不多
[11:14:44] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:15:23] *** Joins: max22- (~maxime@2a01cb0883359800593582f16039b0e0.ipv6.abo.wanadoo.fr)
[11:17:19] <sshine> Inst, 也许你可以把她的课换成别的课。
[11:17:53] <Inst[m]> 我已经告诉他了
[11:18:09] <Inst[m]> 她就回答，她太疯了。
[11:18:15] *** Joins: capo_greco (~textual@60-241-161-167.static.tpgi.com.au)
[11:18:17] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[11:19:26] <dminuoso> Inst: So what about this example https://gist.github.com/dminuoso/abdea620d60a501d89347b7586b06646#file-f-hs-L12-L14
[11:19:27] <Inst[m]> 已经太晚了。也许是我的错误，我没有仔细分析那本课本儿，因该早点告诉她退出来。
[11:19:41] <dminuoso> Is this a "poor usage of if-then-else"? Is there some other, more sensible, approach?
[11:19:58] <Inst> i mean if you're talking about intelligibility
[11:20:03] <Inst> i like if then else, tbh
[11:20:10] <Inst> i guess i'm recognizing its advantages
[11:20:24] <dminuoso> No concretely, imagine what you would have to do to make it go away here
[11:20:29] <dminuoso> We can offload this into a helper function, sure.
[11:20:54] <Inst> or you could just use bool
[11:21:00] <Inst> and sacrifice readability
[11:21:10] <Inst> since people generally don't know what the hell bool is, and you'd have to import it
[11:21:24] <Inst> could also just do case of
[11:21:34] <dminuoso> `hashPolicy :: Set IfTag -> HashPolicy` and carve that out. But there comes a point at which you might wonder what the point of that is.
[11:21:34] <Inst> case isBalanceXor of
[11:21:45] <Inst> true -> BalanceXor
[11:21:49] *** Joins: fef (~thedawn@user/thedawn)
[11:21:52] <Inst> _ -> HpLayer34
[11:22:05] <Inst> that's the style the guy on FP discord wanted me to use, or at least personally preferred
[11:22:10] <Inst> would have been comparably readable to ifthenelse
[11:22:15] *** Joins: Akiva (~Akiva@user/Akiva)
[11:22:33] *** Quits: capo_greco (~textual@60-241-161-167.static.tpgi.com.au) (Client Quit)
[11:22:49] <dminuoso> Im not sure I see any real advantage - arguably it creates more noise.
[11:23:16] <dminuoso> The only idiomatic way to make if-then-else go away is by writing the above `hashPolicy` helper function
[11:23:44] <Inst> i mean i was guessing the FP discorders know what they were doing
[11:24:06] <Inst> in my view, very few people actually "know" haskell, but a lot of people know a little bit of it, or even a lot
[11:25:17] <dminuoso> We all have our views on how to write software in a given language. In recent years, when blogging has become ubiquitous, everybody is suddenly an expert, and advice often comes in the form of "never <...>" or "always <...>"
[11:25:30] <Inst> xyz considered harmful
[11:25:44] <dminuoso> That's quite the clickbait I learned to avoid.
[11:25:44] <Inst> with haskell, simply because there's so many ways to express an idea, i'm surprised there's no hard style guides here
[11:26:40] *** Joins: cosimone (~user@93-47-228-191.ip115.fastwebnet.it)
[11:27:15] <EvanR> proof by FP discord
[11:27:18] <EvanR> QED
[11:27:25] <EvanR> #haskell is chopped liver
[11:29:13] <sshine> Inst, Haskell being the hotpot of lazy FP, 'no hard style guides' goes hand in hand with many other expressions of diversity that make practical use difficult.
[11:29:37] <Inst> btw, are there any good guides to writing software design docs?
[11:29:48] <EvanR> we have many hard style guides in case you are serious
[11:29:55] <EvanR> they are so hard I ignore them
[11:30:01] <dminuoso> So I find that guides on "how to do something well" more often than not fall really short.
[11:30:07] <sshine> Inst, I know of ADRs: https://adr.github.io/
[11:30:30] <dminuoso> I think they arise from the false premise that you just have to follow some rigid guidelines, and then your product becomes good.
[11:31:10] <sshine> Inst, I like them because I can confine the fluff into an RFC-like Markdown and commit it to version control; kinda raises the bar for who should be doing architecture decisions.
[11:31:12] <dminuoso> Software style is a way of communicating with not just the compiler but with other developers, so understanding that communication process is the key to knowing "do I express this with XYZ or some other way"
[11:31:24] <dminuoso> And that's ultimately why code formatting tools fall so incredibly short
[11:31:36] <dminuoso> They dont know at all what the author is trying to convey
[11:32:21] <dminuoso> Or linters even
[11:33:07] <EvanR> guides are more valuable if you can just churn them out and charge admission (or get ad revenue)
[11:33:10] <sshine> Inst, but I haven't tried to design software with intelligent colleagues, so I don't know of their practical value. the architect behind what I'm making now is so mathy only one guy gets 80% of it at the moment. no reason to document it yet.
[11:33:13] <ski> hlint commonly gives advice that can be questioned
[11:33:26] <sshine> s/architect/architecture/
[11:33:44] <sshine> ski, hlint advice can be modified, so you could argue it's a defaults thing. :)
[11:33:49] <EvanR> see how prima strategy guides are gone? way too difficult to produce
[11:34:04] <EvanR> now we have a 9000 page ad-filled web page
[11:34:15] <EvanR> (with barely any info)
[11:34:53] <EvanR> also many programming blogs are from companies that require you to write a blog at any cost
[11:35:34] <sshine> Inst, thanks for the Discord link, that's an immensely valuable resource.
[11:36:10] *** Joins: cfricke (~cfricke@user/cfricke)
[11:38:29] <sshine> Inst, case <bool> of ... seems kinda not useful. generally pattern matching makes a lot of sense because it's more extensible. but there isn't going to be a third option to Bool any time soon. :P
[11:38:30] *** Joins: mikoto-chan (~mikoto-ch@84.199.144.235)
[11:39:43] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[11:39:59] <EvanR> it ensures you get all the cases
[11:40:20] <EvanR> i.e. if then else
[11:41:59] *** Joins: Erutuon (~Erutuon@user/erutuon)
[11:44:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:47:43] *** Joins: alp (~alp@user/alp)
[11:49:06] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[11:50:26] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[11:54:21] *** Joins: drdo (~drdo@roach0.drdo.eu)
[11:56:26] *** Quits: cosimone (~user@93-47-228-191.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[11:59:18] *** Joins: chele (~chele@user/chele)
[12:01:00] *** Joins: comerijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:01:18] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[12:03:34] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[12:03:36] *** Joins: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[12:06:27] *** Joins: sektor|2 (~kvirc@87.227.175.182)
[12:08:23] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[12:08:43] *** Joins: hololeap (~hololeap@user/hololeap)
[12:11:05] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[12:12:27] *** Joins: cosimone (~user@93-47-228-191.ip115.fastwebnet.it)
[12:14:05] *** Quits: comerijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[12:19:00] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:19:12] *** Quits: wrengr (~wrengr@99.34.197.35.bc.googleusercontent.com) (Remote host closed the connection)
[12:21:01] *** Joins: cfricke (~cfricke@user/cfricke)
[12:25:50] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Remote host closed the connection)
[12:26:34] *** Quits: xff0x (~xff0x@2001:1a81:53bc:500:22c0:5bd7:c089:bc66) (Ping timeout: 250 seconds)
[12:27:13] *** Joins: ubert (~Thunderbi@p200300ecdf0994184cc217ea87d4c264.dip0.t-ipconnect.de)
[12:27:18] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[12:27:44] *** Joins: xff0x (~xff0x@2001:1a81:53bc:500:bc1a:eecf:3ef6:1dbe)
[12:29:16] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:30:26] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:41:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:41:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:41:25] *** Joins: wroathe (~wroathe@user/wroathe)
[12:42:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:43:15] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c) (Remote host closed the connection)
[12:45:17] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:46:26] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:46:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[12:47:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[12:47:44] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[12:48:56] *** Joins: zaquest (~notzaques@5.130.79.72)
[12:49:28] *** Quits: foul_owl (~kerry@71.212.148.11) (Ping timeout: 256 seconds)
[12:49:28] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:49:36] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:53:15] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[12:54:43] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 250 seconds)
[12:56:15] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[13:00:21] *** Quits: chele (~chele@user/chele) (Ping timeout: 250 seconds)
[13:02:49] *** Joins: xsperry (~xs@user/xsperry)
[13:04:08] *** Joins: dschrempf (~dominik@mobiledyn-62-240-134-109.mrsn.at)
[13:04:21] *** Joins: foul_owl (~kerry@94.140.8.194)
[13:04:33] *** Joins: sektor|3 (~kvirc@94.155.193.66)
[13:04:56] *** Joins: sektor|4 (~kvirc@94.155.193.66)
[13:05:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:06:37] *** Quits: sektor|2 (~kvirc@87.227.175.182) (Ping timeout: 240 seconds)
[13:07:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:08:37] *** Quits: sektor|3 (~kvirc@94.155.193.66) (Ping timeout: 240 seconds)
[13:15:15] *** Joins: AlexisTP (~AlexisTP@92.57.44.63)
[13:17:37] *** Quits: cosimone (~user@93-47-228-191.ip115.fastwebnet.it) (Remote host closed the connection)
[13:18:42] *** Quits: tzh_ (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:19:48] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[13:26:34] *** Joins: ubert1 (~Thunderbi@2a02:8109:9880:303c:3eb6:2526:d971:8214)
[13:27:41] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[13:28:33] *** Joins: ardell (~ardell@user/ardell)
[13:29:29] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:30:29] *** Quits: ardell (~ardell@user/ardell) (Client Quit)
[13:30:33] *** Joins: __monty__ (~toonn@user/toonn)
[13:30:58] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 260 seconds)
[13:31:05] *** Joins: grgz (~grgz@grgz.me)
[13:33:43] *** Joins: mastarija (~mastarija@2a05:4f46:e04:6000:15fe:cab1:6fd:b807)
[13:35:07] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[13:36:13] *** Quits: foul_owl (~kerry@94.140.8.194) (Ping timeout: 240 seconds)
[13:36:49] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[13:43:38] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[13:43:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c)
[13:45:49] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[13:47:36] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[13:47:38] *** Joins: drdo (~drdo@roach0.drdo.eu)
[13:48:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c) (Ping timeout: 245 seconds)
[13:49:13] *** Joins: nschoe (~quassel@178.251.84.79)
[13:49:14] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[13:50:09] *** Joins: foul_owl (~kerry@71.212.133.174)
[13:51:34] *** Joins: cfricke (~cfricke@user/cfricke)
[13:56:25] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[13:57:28] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[14:02:30] *** Joins: Kaipi (~Kaiepi@156.34.47.253)
[14:02:56] *** Joins: xstill-8 (xstill@fimu/xstill)
[14:03:21] *** Joins: lep- (~lep@94.31.89.203)
[14:04:35] *** Joins: dobblego (~dibblego@122-199-1-30.ip4.superloop.com)
[14:04:35] *** Quits: dobblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[14:04:35] *** Joins: dobblego (~dibblego@haskell/developer/dibblego)
[14:04:55] *** Joins: nschoe_ (~quassel@178.251.84.79)
[14:05:04] *** Joins: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it)
[14:05:05] *** Joins: hgolden_ (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[14:05:34] *** Joins: ft_ (~ft@shell.chaostreff-dortmund.de)
[14:05:35] *** Joins: [exa]_ (exa@srv3.blesmrt.net)
[14:05:40] *** Joins: Vq_ (~vq@90-227-195-41-no77.tbcn.telia.com)
[14:06:12] *** Joins: fryguybo1 (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[14:06:13] *** Joins: janus__ (janus@anubis.0x90.dk)
[14:06:20] *** Joins: ayako (~bnq@66-37-19-52.phx.onelemur.com)
[14:06:23] *** Joins: Maxdaman1us (~Maxdamant@user/maxdamantus)
[14:06:24] *** Joins: pooryori1k (~pooryoric@87-119-174-173.tll.elisa.ee)
[14:06:28] *** Joins: xdej_ (~xdej@quatramaran.salle-s.org)
[14:06:41] *** Joins: mikoto-c1 (~mikoto-ch@84.199.144.235)
[14:06:41] *** Joins: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net)
[14:06:44] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[14:06:53] *** Joins: wei2912_ (~wei2912@138.75.71.147)
[14:06:55] *** Joins: dhouthoo_ (~dhouthoo@178-117-36-167.access.telenet.be)
[14:06:57] *** Joins: marquis_1ndras (~marquis_a@124.170.163.166)
[14:07:08] *** sudden is now known as Guest3567
[14:08:16] *** Joins: infinity0_ (~infinity0@occupy.ecodis.net)
[14:08:16] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Killed (tantalum.libera.chat (Nickname regained by services)))
[14:08:16] *** infinity0_ is now known as infinity0
[14:10:40] *** Joins: TheCoffeMaker_ (~TheCoffeM@200.126.129.149)
[14:11:02] *** Quits: nschoe (~quassel@178.251.84.79) (*.net *.split)
[14:11:02] *** Quits: foul_owl (~kerry@71.212.133.174) (*.net *.split)
[14:11:02] *** Quits: drdo (~drdo@roach0.drdo.eu) (*.net *.split)
[14:11:02] *** Quits: mikoto-chan (~mikoto-ch@84.199.144.235) (*.net *.split)
[14:11:02] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (*.net *.split)
[14:11:02] *** Quits: wei2912 (~wei2912@138.75.71.147) (*.net *.split)
[14:11:02] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (*.net *.split)
[14:11:02] *** Quits: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de) (*.net *.split)
[14:11:02] *** Quits: ishutin (~ishutin@193-110-63-21.cable-modem.hdsnet.hu) (*.net *.split)
[14:11:02] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (*.net *.split)
[14:11:02] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (*.net *.split)
[14:11:02] *** Quits: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com) (*.net *.split)
[14:11:02] *** Quits: elkcl (~elkcl@broadband-37-110-156-162.ip.moscow.rt.ru) (*.net *.split)
[14:11:02] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (*.net *.split)
[14:11:02] *** Quits: Vq (~vq@90-227-195-41-no77.tbcn.telia.com) (*.net *.split)
[14:11:02] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (*.net *.split)
[14:11:02] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (*.net *.split)
[14:11:02] *** Quits: thebnq (~bnq@66-37-19-52.phx.onelemur.com) (*.net *.split)
[14:11:02] *** Quits: [exa] (~exa@user/exa/x-3587197) (*.net *.split)
[14:11:02] *** Quits: Philonous (~Philonous@user/philonous) (*.net *.split)
[14:11:02] *** Quits: turlando (~turlando@user/turlando) (*.net *.split)
[14:11:03] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[14:11:03] *** Quits: maerwald (~maerwald@user/maerwald) (*.net *.split)
[14:11:03] *** Quits: Guest6340 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (*.net *.split)
[14:11:03] *** Quits: xdej (~xdej@quatramaran.salle-s.org) (*.net *.split)
[14:11:03] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (*.net *.split)
[14:11:03] *** Quits: Hafydd (~Hafydd@user/hafydd) (*.net *.split)
[14:11:03] *** Quits: aria (sid380617@lymington.irccloud.com) (*.net *.split)
[14:11:03] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[14:11:03] *** Quits: ncopa (~ncopa@alpine/developer/ncopa) (*.net *.split)
[14:11:03] *** Quits: lep (~lep@94.31.89.203) (*.net *.split)
[14:11:03] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[14:11:03] *** Quits: janus (janus@anubis.0x90.dk) (*.net *.split)
[14:11:03] *** Quits: russruss (~russruss@my.russellmcc.com) (*.net *.split)
[14:11:03] *** Quits: tv (~tv@user/tv) (*.net *.split)
[14:11:03] *** Quits: robertm (~robertm@lattice.rojoma.com) (*.net *.split)
[14:11:03] *** Quits: swistak (~swistak@185.21.216.141) (*.net *.split)
[14:11:03] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[14:11:03] *** Quits: marquis_andras (~marquis_a@124.170.163.166) (*.net *.split)
[14:11:03] *** Quits: justGhost (~justache@user/justache) (*.net *.split)
[14:11:03] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[14:11:03] *** Quits: stvc (~stvc@192.241.166.39) (*.net *.split)
[14:11:03] *** Quits: cls (~cls@chalk.lubutu.com) (*.net *.split)
[14:11:03] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[14:11:03] *** Quits: skewerr (spoonm@inaba.spoonm.org) (*.net *.split)
[14:11:03] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[14:11:03] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (*.net *.split)
[14:11:03] *** Quits: haskl (~haskl@user/haskl) (*.net *.split)
[14:11:03] *** Quits: xstill- (xstill@fimu/xstill) (*.net *.split)
[14:11:03] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (*.net *.split)
[14:11:03] *** Quits: abrar (~abrar@static-108-2-152-54.phlapa.fios.verizon.net) (*.net *.split)
[14:11:03] *** Quits: kmein (~weechat@user/kmein) (*.net *.split)
[14:11:03] *** Quits: c_wraith (~c_wraith@adjoint.us) (*.net *.split)
[14:11:03] *** Quits: statusfailed (~statusfai@statusfailed.com) (*.net *.split)
[14:11:03] *** Quits: canta (~canta@user/canta) (*.net *.split)
[14:11:03] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[14:11:03] *** Quits: juri_ (~juri@178.63.35.222) (*.net *.split)
[14:11:03] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (*.net *.split)
[14:11:03] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (*.net *.split)
[14:11:03] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[14:11:03] *** Quits: andjjj23_ (~irc@107.170.228.47) (*.net *.split)
[14:11:03] *** Quits: neverwas (jpneverwas@swissbox.unperson.link) (*.net *.split)
[14:11:03] *** Quits: n3t (n3t@user/n3t) (*.net *.split)
[14:11:03] *** Quits: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg) (*.net *.split)
[14:11:03] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (*.net *.split)
[14:11:03] *** Quits: carter (sid14827@helmsley.irccloud.com) (*.net *.split)
[14:11:03] *** Quits: TMA (~tma@twin.jikos.cz) (*.net *.split)
[14:11:03] *** Quits: hubvu_ (sid495858@tinside.irccloud.com) (*.net *.split)
[14:11:03] *** Quits: jtmar (~james@jtmar.me) (*.net *.split)
[14:11:03] *** Quits: kawpuh (~kawpuh@66.42.81.80) (*.net *.split)
[14:11:06] *** xstill-8 is now known as xstill-
[14:11:09] *** ft_ is now known as ft
[14:11:09] *** dobblego is now known as dibblego
[14:11:26] *** Joins: sektor|2 (~kvirc@87.227.175.182)
[14:11:57] *** Joins: elkcl (~elkcl@broadband-37-110-156-162.ip.moscow.rt.ru)
[14:12:12] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[14:14:13] *** Quits: AlexisTP (~AlexisTP@92.57.44.63) (Ping timeout: 256 seconds)
[14:14:40] *** Maxdaman1us is now known as Maxdamantus
[14:15:31] *** Quits: sektor|4 (~kvirc@94.155.193.66) (Ping timeout: 250 seconds)
[14:16:12] *** Joins: drdo (~drdo@roach0.drdo.eu)
[14:16:12] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[14:16:12] *** Joins: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de)
[14:16:12] *** Joins: ishutin (~ishutin@193-110-63-21.cable-modem.hdsnet.hu)
[14:16:12] *** Joins: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com)
[14:16:12] *** Joins: Philonous (~Philonous@user/philonous)
[14:16:12] *** Joins: shachaf (~shachaf@user/shachaf)
[14:16:12] *** Joins: maerwald (~maerwald@user/maerwald)
[14:16:12] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[14:16:12] *** Joins: aria (sid380617@lymington.irccloud.com)
[14:16:12] *** Joins: ncopa (~ncopa@alpine/developer/ncopa)
[14:16:12] *** Joins: russruss (~russruss@my.russellmcc.com)
[14:16:12] *** Joins: robertm (~robertm@lattice.rojoma.com)
[14:16:12] *** Joins: swistak (~swistak@185.21.216.141)
[14:16:12] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[14:16:12] *** Joins: justGhost (~justache@user/justache)
[14:16:12] *** Joins: stvc (~stvc@192.241.166.39)
[14:16:12] *** Joins: cls (~cls@chalk.lubutu.com)
[14:16:12] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[14:16:12] *** Joins: skewerr (spoonm@inaba.spoonm.org)
[14:16:12] *** Joins: haskl (~haskl@user/haskl)
[14:16:12] *** Joins: kmein (~weechat@user/kmein)
[14:16:12] *** Joins: c_wraith (~c_wraith@adjoint.us)
[14:16:12] *** Joins: statusfailed (~statusfai@statusfailed.com)
[14:16:12] *** Joins: canta (~canta@user/canta)
[14:16:12] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[14:16:12] *** Joins: juri_ (~juri@178.63.35.222)
[14:16:12] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[14:16:12] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[14:16:12] *** Joins: meejah (~meejah@rutas.meejah.ca)
[14:16:12] *** Joins: andjjj23_ (~irc@107.170.228.47)
[14:16:12] *** Joins: neverwas (jpneverwas@swissbox.unperson.link)
[14:16:12] *** Joins: n3t (n3t@user/n3t)
[14:16:12] *** Joins: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg)
[14:16:12] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[14:16:12] *** Joins: carter (sid14827@helmsley.irccloud.com)
[14:16:12] *** Joins: TMA (~tma@twin.jikos.cz)
[14:16:12] *** Joins: hubvu_ (sid495858@tinside.irccloud.com)
[14:16:12] *** Joins: jtmar (~james@jtmar.me)
[14:16:12] *** Joins: kawpuh (~kawpuh@66.42.81.80)
[14:16:13] *** Quits: d34df00d (~d34df00d@2600:1700:8c60:3a10::48) (Excess Flood)
[14:16:39] *** Joins: sektor|3 (~kvirc@94.155.193.66)
[14:17:35] *** lep- is now known as lep
[14:17:37] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[14:18:08] *** Joins: tv (~tv@user/tv)
[14:18:17] *** Joins: Hafydd (~Hafydd@user/hafydd)
[14:18:28] *** Joins: drewr (~drew@user/drewr)
[14:18:54] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[14:19:07] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[14:19:24] *** Joins: foul_owl (~kerry@71.212.133.174)
[14:20:05] *** Quits: sektor|2 (~kvirc@87.227.175.182) (Ping timeout: 252 seconds)
[14:26:10] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[14:28:22] *** Quits: yauhsien (~yauhsien@61-231-45-223.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:28:57] *** Joins: yauhsien (~yauhsien@61-231-45-223.dynamic-ip.hinet.net)
[14:29:01] *** Quits: yauhsien (~yauhsien@61-231-45-223.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:29:59] *** Joins: mmhat (~mmh@55d4d1e3.access.ecotel.net)
[14:30:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:31:38] <Andrew> (
[14:31:45] <Andrew> Er sry, misconfigured client
[14:33:29] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:34:57] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::5483) (Ping timeout: 240 seconds)
[14:36:16] *** pooryori1k is now known as yoric
[14:36:20] *** yoric is now known as pooryorick
[14:40:17] *** Quits: td_ (~td@94.134.91.205) (Ping timeout: 256 seconds)
[14:41:46] *** Joins: td_ (~td@94.134.91.3)
[14:42:57] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[14:44:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:45:12] *** Joins: chele (~chele@user/chele)
[14:46:31] *** Quits: dschrempf (~dominik@mobiledyn-62-240-134-109.mrsn.at) (Ping timeout: 250 seconds)
[14:49:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[14:50:00] *** Quits: mmhat (~mmh@55d4d1e3.access.ecotel.net) (Quit: WeeChat 3.4)
[14:52:36] *** Joins: xkuru (~xkuru@user/xkuru)
[14:55:08] *** Joins: cosimone (~user@93-47-228-191.ip115.fastwebnet.it)
[14:55:34] *** Joins: jalil (~jalil@2a01:e0a:277:4100:4b34:f28b:c1d1:3941)
[14:58:53] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:01:11] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:3c97:bf3a:3e4c:7eb2)
[15:01:42] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:04:42] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[15:06:02] *** Quits: Unhammer (~Unhammer@user/unhammer) (Ping timeout: 250 seconds)
[15:07:29] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[15:08:56] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[15:10:21] *** Joins: Guest|10 (~Guest|10@138-38-206-67.eduroam.bath.ac.uk)
[15:10:47] *** Quits: Guest|10 (~Guest|10@138-38-206-67.eduroam.bath.ac.uk) (Client Quit)
[15:17:49] *** Quits: ubert1 (~Thunderbi@2a02:8109:9880:303c:3eb6:2526:d971:8214) (Ping timeout: 240 seconds)
[15:21:00] *** Joins: Unhammer (~Unhammer@user/unhammer)
[15:21:26] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:24:06] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[15:24:27] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[15:26:12] *** Quits: phma (~phma@2001:5b0:211f:d758:6f18:ab28:6bcc:58fd) (Read error: Connection reset by peer)
[15:26:14] *** Quits: Putonlalla (~sapekiis@it-cyan.it.jyu.fi) (Quit: Leaving.)
[15:27:11] *** Quits: foul_owl (~kerry@71.212.133.174) (Ping timeout: 252 seconds)
[15:27:54] *** Joins: phma (~phma@host-67-44-209-72.hnremote.net)
[15:29:43] <ProfSimm> In Haskell when I define a function for input 0 and then input any int, it'll first match 0. Doesn't this make order of execution significant.
[15:30:42] <sshine> ProfSimm, yes
[15:30:53] <Franciman> only the order of the definitions matters, yes
[15:31:13] *** Joins: Erutuon (~Erutuon@user/erutuon)
[15:31:15] <ProfSimm> Well the order of the definitions defines the order of matching
[15:31:26] <Franciman> yes
[15:31:28] <dminuoso> ProfSimm: No, the order of execution is still not specified.
[15:31:36] *** Parts: lep (~lep@94.31.89.203) ()
[15:31:39] <Franciman> oh
[15:31:46] <ProfSimm> dminuoso: it's kinda specified semantically.
[15:31:47] <dminuoso> ProfSimm: It's rather, it behaves as it if you cant tell the difference
[15:31:58] <ProfSimm> Well that's "specified" in my book :)
[15:32:08] <Franciman> what book is it, ProfSimm ?
[15:32:09] <dminuoso> No, an implementation is still free to say execute other branches in parallel
[15:32:45] <Franciman> dminuoso: how is the output determined?
[15:33:42] <dminuoso> That's for the implementation left to decide. It's a similar reason why `seq` doesn't have an inherent ordering
[15:33:54] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:adf2:7fd4:5ba2:8512)
[15:34:08] <dminuoso> i.e.  (seq x b) does not evaluate x before b, it just ensures x is evaluaetd.
[15:34:21] <dminuoso> (GHC brings pseq which gives you that guarantee)
[15:34:42] <Franciman> so if i define «f :: Int -> Int» as follows «f 1 = 2; f 2 = 4»
[15:34:57] <Franciman> i can't know whether f 2 evaluates to 2 or 4 ?
[15:35:01] *** Quits: xff0x (~xff0x@2001:1a81:53bc:500:bc1a:eecf:3ef6:1dbe) (Ping timeout: 240 seconds)
[15:35:05] <dminuoso> And in fact the fact that seq doenst impose an ordering is subtly detectable
[15:36:06] *** Joins: xff0x (~xff0x@2001:1a81:53bc:500:d58f:5284:91ba:f00d)
[15:36:09] <dminuoso> Franciman: No rather, if you have `f 1 = <cheap-expr>; f x = <expensive-expr>`, you have no semantic guarantee the implementation wont waste exaluating <expensive-expr> speculatively
[15:36:25] <Franciman> ah ok, this is more acceptable
[15:36:25] <dminuoso> As long as `f 1` gives you the result of <cheap-expr> back
[15:39:13] <dminuoso> The point is really to separate between the semantics of the language and the underlying execution model
[15:40:23] <dminuoso> See [3.17.2 Informal Semantics of Pattern Matching](https://www.haskell.org/onlinereport/haskell2010/haskellch3.html)
[15:40:41] <dminuoso> And 3.17.3 Formal Semantics of Pattern Matching
[15:41:01] <dminuoso> The formal semantics are described just as a list of identity laws
[15:41:01] <Profpatsch> conduit question: I have a Conduit x (a, b) m (), and a Conduit b b' m ()  
[15:41:13] <Profpatsch> Can I only map the second conduit over the second part of the tuple somehow?
[15:41:29] <Profpatsch> aka turn it into a Conduit (a, b) (a, b') m () ?
[15:43:09] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:43:11] <dminuoso> Profpatsch: Mmm, Im tempted to say you cant without a Monoid constraint on a
[15:43:58] <dminuoso> Consider what happens if that second conduit awaits some
[15:44:12] <dminuoso> Do you discard some of the fst elements? do you mappend them together?
[15:44:23] <Profpatsch> dminuoso: okay, was expecting something like that
[15:44:40] <Profpatsch> dminuoso: My X to this Y is that I have a stream of Lines, and I want to give each one a line number
[15:44:51] <Profpatsch> but then afterwards I do a bunch of things to these lines
[15:45:05] <Profpatsch> granted, if I stare hard enough maybe it’s just mapping
[15:45:40] <Profpatsch> But yeah, makes intuitive sense that it’s not viable cause every Conduit can produce 0..n elements
[15:45:58] <Profpatsch> I feel like I taught myself that when I wrote that code
[15:46:01] <Profpatsch> but then forgot again
[15:47:26] <dminuoso> Profpatsch: Does the second thing have to be a conduit? Or can it just be a kleisli arrow?
[15:47:49] <dminuoso> Profpatsch: And no, its not about the production of elements, its rather about the consumption of them.
[15:48:01] <dminuoso> or I guess the production is problematic too
[15:48:32] <dminuoso> the conduit could await multiple elements but produce only one, or await one element but produce multiple ones
[15:49:22] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[15:50:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[15:51:34] *** Vq_ is now known as Vq
[15:52:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:53:57] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 256 seconds)
[15:54:10] <ProfSimm> Does Haskell have a way to show people "this function overload will never run because a previous one shadows it"
[15:54:45] *** Joins: fef (~thedawn@user/thedawn)
[15:55:16] <dminuoso> ProfSimm: Enable -Wname-shadowing
[15:55:20] <dminuoso> Or better yet -Wall -Wcompat
[15:55:57] *** Quits: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[15:57:24] *** Joins: mei (~mei@user/mei)
[15:57:32] <ProfSimm> Can I read arguments like a stream of arbitrary size.
[15:58:04] <ski> ProfSimm : it's not overloading
[15:59:28] *** Joins: notzmv (~zmv@user/notzmv)
[15:59:56] <ski> arguments ?
[16:00:50] *** Joins: AlexisTP (~AlexisTP@92.57.44.63)
[16:02:48] <ProfSimm> ski: sorry?
[16:03:11] <ski> i dunno what you mean
[16:03:26] <ski> also, all Haskell functions take exactly one argument
[16:08:26] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[16:10:37] *** Quits: [exa]_ (exa@srv3.blesmrt.net) (Ping timeout: 240 seconds)
[16:10:47] *** Joins: drdo (~drdo@roach0.drdo.eu)
[16:11:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[16:11:12] *** Joins: [exa] (exa@srv3.blesmrt.net)
[16:11:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:13:38] <opqdonut> ProfSimm: there's a warning for unreachable pattern matches
[16:14:14] <opqdonut> enabled by -Woverlapping-patterns
[16:14:17] <opqdonut> perhaps that's what you mean?
[16:14:43] *** Joins: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:a4bb:8490:782e:5c48)
[16:14:57] * Andrew likes having ghc aliased to ghc -Wall
[16:15:40] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[16:16:02] *** Quits: mikoto-c1 (~mikoto-ch@84.199.144.235) (Quit: mikoto-c1)
[16:17:06] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[16:17:18] *** Joins: sektor|2 (~kvirc@87.227.175.182)
[16:18:30] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 260 seconds)
[16:18:37] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 240 seconds)
[16:18:40] <ProfSimm> opqdonut: yes thanks, is there a reason this is an option
[16:18:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[16:20:21] *** Quits: sektor|3 (~kvirc@94.155.193.66) (Ping timeout: 256 seconds)
[16:20:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:20:27] <Profpatsch> dminuoso: yeah, in Conduits pretty much anything can happen
[16:20:30] *** Quits: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com) (Quit: leaving)
[16:20:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 245 seconds)
[16:20:54] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:24:49] *** Joins: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[16:27:34] *** Joins: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com)
[16:27:43] <opqdonut> ProfSimm: I guess it's just programming tradition that many useful warnings are disabled by default. As Andrew said, many people like to run with -Wall, i.e. all warnings turned on
[16:28:22] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:f0ed:5941:868e:9ada) (Quit: WeeChat 2.8)
[16:28:23] <Andrew> Bad traditions, again
[16:28:41] *** Quits: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:a4bb:8490:782e:5c48) (Ping timeout: 245 seconds)
[16:28:45] <Andrew> Haskell is better in this regards for at least enforcing type problems in compile time.
[16:28:54] <opqdonut> I guess Rust has lots of warnings enabled by default? And lots of things like unreachable code are errors instead of warnings?
[16:29:17] <Ariakenom_> -Wall also never means all
[16:29:24] <ProfSimm> Interesting tradition, to have a language detect problems and you ignore that.
[16:29:31] * Andrew suddenly notices No manual entry for ghc
[16:29:42] <Andrew> Yup
[16:29:58] <opqdonut> Ariakenom_: yeah, that too
[16:30:41] <Andrew> -Weverything?
[16:31:24] <opqdonut> ProfSimm: I guess the real answer here is that 1) you can't make overlapping patterns an error, because that would break backwards compatibility. code that used to compile might not compile any more. 2) you can't turn on the warning by default, because some build systems treat warnings as errors, and again, you might fail somebody's build
[16:31:41] *** Quits: alp (~alp@user/alp) (Ping timeout: 256 seconds)
[16:31:46] <opqdonut> those are arguably bad reasons, but I think they're the reasons
[16:32:03] <Andrew> (BadReason "Break backwards compatibility")
[16:32:06] <Andrew> Yeah
[16:32:18] <Andrew> It's like keeping old bugs because they'll break compatibility
[16:32:31] <Andrew> I like how Python just stays with those issues, but not until the next major breaking release
[16:32:40] <ProfSimm> The solution is to compile despite errors :P
[16:32:44] <Andrew> Having breaking releases once in a while sounds helpful
[16:32:45] <ProfSimm> But always show errors
[16:32:53] <Andrew> ProfSimm: Then they're warnings
[16:33:13] <Andrew> Or just roll out new standards, and give compilers a flag for each standard
[16:33:16] <Andrew> * option, whatever
[16:33:17] <ProfSimm> Andrew: "some systems treat warnings as errors"
[16:33:39] <Andrew> I like my compiler output to be clean
[16:39:53] *** Joins: sektor|3 (~kvirc@94.155.193.66)
[16:41:40] *** Joins: slack1256 (~slack1256@191.126.227.64)
[16:41:51] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.4)
[16:42:21] <ProfSimm> Can I pass the same input to N functions simultaneously.
[16:43:42] *** Quits: sektor|2 (~kvirc@87.227.175.182) (Ping timeout: 260 seconds)
[16:44:48] <Ariakenom_> you can just map
[16:45:22] <sshine> ProfSimm, what do you mean by simultaneously?
[16:45:50] *** Quits: wei2912_ (~wei2912@138.75.71.147) (Remote host closed the connection)
[16:46:55] <sshine> ProfSimm, f x `par` g x `par` h x?
[16:48:14] *** Joins: alp (~alp@user/alp)
[16:53:00] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:54:06] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:55:02] <Andrew> Map, but feels reversed
[16:55:16] <Andrew> ProfSimm: I expect that you want to store the output in a list?
[17:00:04] <ProfSimm> Andrew: yeah it's kinda like a reverse map
[17:00:12] *** Joins: Graham31415 (~Graham314@213.237.82.193)
[17:00:29] <Andrew> Yeh, if he's using functions, i expect him to want the output somewhere, probably a list
[17:01:22] <ProfSimm> technically like a normal map if we pass to map a function that applies the same arguments
[17:05:01] *** Joins: yhsiveht (~Nishant@2405:201:f005:c007:51b9:2550:9b70:b031)
[17:05:02] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:05:37] *** Quits: thevishy (~Nishant@2405:201:f005:c007:6cf1:7245:a05f:ea21) (Ping timeout: 240 seconds)
[17:06:42] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:06:55] <Ariakenom_> ProfSimm exactly. "map ($argument)" if you wanna be terse
[17:08:04] <Graham31415> When using RIO's logger functions, is there a simple way to print out strings intermixed with computed values? e.g. `main = runSimpleApp $ let x = 5 in logInfo $ "Hello, " ++ (show x)` doesn't type check. Getting this to output something seems to require two conversions, e.g. `main = runSimpleApp $ let x = 5 in logInfo $ display $ pack $ "Hello, "
[17:08:04] <Graham31415> <> (show x)`. This seems quite tortuous. Am I missing something obvious?
[17:09:05] *** Quits: max22- (~maxime@2a01cb0883359800593582f16039b0e0.ipv6.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[17:10:50] <lyxia> "Hello, " <> display x    with OverloadedStrings
[17:11:27] <dminuoso>  libffi.so.8 => /nix/store/dpikrpi38md4fyw8aakdcbylywwb0nsc-libffi-3.4.2/lib/libffi.so.8 (0x00007fbbe8d72000)
[17:11:36] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[17:11:44] <dminuoso> So I've done a major nixos update, updated cabal and ghc as well. Now this thing appears in my resulting builds
[17:11:53] <Ariakenom_> you can also replace show with something that gives you Text from 5
[17:11:55] <dminuoso> Where could this come from?
[17:12:01] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:12:02] <Graham31415> lyxia, oh, that's much nicer. Thanks!
[17:13:12] <dminuoso> Oh. GHC always links against libffi
[17:13:26] <Ariakenom_> oh that something is display :p
[17:14:42] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Read error: Connection reset by peer)
[17:14:56] <Graham31415> lyxia: follow up Q. How does one identify the specific `<>` being used in this expression? Like, does one hunt down the type of "Hello ", or the type of `display x`? And then hunt through the instances and then look for the `<>` function?
[17:15:43] <geekosaur> % :info <>
[17:15:44] <yahb> geekosaur: type Semigroup :: * -> Constraint; class Semigroup a where; (<>) :: a -> a -> a; ...; -- Defined in `GHC.Base'; infixr 6 <>
[17:16:30] <geekosaur> ghci can do much of that hunting for you,and what it can't hoogle can
[17:17:19] <Graham31415> Ok, thanks. I guess I'm just missing the insight to think in albegraic terms here...
[17:20:04] <EvanR> <> is one of the operators defined by default so it's good to know
[17:20:39] <EvanR> you could say it's in a hypothetical table of "haskell operators" with their relative precedences (which we usually don't see)
[17:20:50] <EvanR> (because haskell lets you define whatever operator)
[17:21:16] <EvanR> (but there's only a handful available without importing anything so such a table could make sense ish)
[17:21:46] <geekosaur> there'seven one in the haskell report
[17:22:01] <geekosaur> (for precedences)
[17:22:03] <Graham31415> And we can see that "something" composes (via <>) with `display x` because of OverloadedStrings? I would have to know that one of the Display instances matches one of the things that OverloadedStrings works with?
[17:22:08] <EvanR> does it have <>? xD
[17:22:20] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[17:22:20] <geekosaur> no, <> is post-2010
[17:22:42] *** Quits: cosimone (~user@93-47-228-191.ip115.fastwebnet.it) (Remote host closed the connection)
[17:24:53] <EvanR> Graham31415, pack makes me think you are dealing with Text
[17:25:05] <EvanR> yes OverloadedStrings means "something" is potentially a Text
[17:25:16] *** Joins: jakalx (~jakalx@base.jakalx.net)
[17:25:30] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[17:25:31] *** Joins: cosimone (~user@93-47-228-191.ip115.fastwebnet.it)
[17:25:47] <EvanR> and <> is the goto way to ++ two Texteses
[17:25:47] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[17:26:07] <lyxia> Graham31415: remember that Utf8Builder, like virtually all text-like types, is a monoid
[17:26:10] <Graham31415> EvanR I do want to read from files using RIO too, for which I guess I'll be using `readFileUtf8`  and getting `Text` in return.
[17:26:10] <akhesacaro> be careful with OverloadedStrings
[17:27:12] <lyxia> so the problem naturally breaks down into 'how to convert "Hello "' and 'how to convert x'
[17:27:26] *** Quits: AlexisTP (~AlexisTP@92.57.44.63) (Remote host closed the connection)
[17:27:54] <geekosaur> akhesacaro, why do you say that? It's no worse than numbers
[17:28:50] <Graham31415> right, i get that they need to be converted to some common thing. I'm just too noob to know what my options are.
[17:29:51] *** Quits: fryguybo1 (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (Quit: leaving)
[17:30:10] <EvanR> Text is not a bad idea if it's already in play and you can't decide
[17:30:27] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[17:30:57] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[17:31:29] <Graham31415> So, is there only one candiate for converting to common types, such that the compiler can't make the wrong assumption? In ambiguous cases, will the compiler just pick one (out of multiple candidates), or will the compiler bail out and ask for some more type info?
[17:31:38] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[17:31:56] <geekosaur> if the compiler can't boil it down to exactly one type, it will report an ambiguous type error
[17:32:06] <Graham31415> cool
[17:32:12] <geekosaur> there's a defaulting mechanism you can use to help it choose in some cases
[17:32:45] <EvanR> cool and also uncool, ambiguous types means valuable programmer attention required xD
[17:32:57] <EvanR> but at least it won't do something random like javascript
[17:33:53] <geekosaur> that's where defaulting can come in handy
[17:34:18] <Graham31415> I'm getting the sense that I'll need to memorise a large part of the ecosystem in order to be even slightly productive. :(
[17:35:07] <dminuoso> You dont.
[17:35:14] <EvanR> in the sense of memorizing language to speak languages
[17:35:22] <cigsender> :q
[17:35:32] *** Quits: cigsender (~cigsender@74.124.58.162) (Quit: leaving)
[17:35:38] <EvanR> more like picking up enough to figure out where the bathroom is xD
[17:36:27] <Andrew> exit
[17:37:08] <geekosaur> Graham31415, generally you'll find that things like use of Text will be specified ahead of time; even if you're picking up a random package poff of hackage you can inspect its dependencies
[17:37:21] <geekosaur> there's only a few packages where you need to care about things like this
[17:39:12] <Graham31415> On a related note: is there a `read` function that operates on Text, or should I accept that the Text needs to be `unpack`ed first?
[17:40:19] <EvanR> or do you want a proper parser
[17:41:12] <EvanR> another topic that likely "comes up pretty fast and soon"
[17:41:38] *** Quits: noctux (~noctux@user/noctux) (Remote host closed the connection)
[17:41:46] <Graham31415> i'm just doing dumb stuff for now. Reading some files under /proc/ and summarising some fields.
[17:42:05] <EvanR> any reason it requires Text? xD
[17:42:15] <EvanR> if it's dumb, might as well be real dumb
[17:42:22] *** Joins: slac25096 (~slack1256@186.11.3.215)
[17:42:43] <EvanR> the String IO functions also work with unicode
[17:42:46] <Graham31415> i'm sure it doesn't, but i don't know what the best practices here are, and RIO claims to be best practices
[17:42:52] <EvanR> RIO?
[17:43:03] *** Quits: razetime (~quassel@49.207.198.36) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:43:10] <Graham31415> https://www.fpcomplete.com/haskell/library/rio/
[17:43:31] *** Joins: Putonlalla (~sapekiis@it-cyan.it.jyu.fi)
[17:43:31] <byorgey> I think RIO is one of the alternative Preludes
[17:43:39] <byorgey> https://hackage.haskell.org/package/rio
[17:44:38] *** Quits: slack1256 (~slack1256@191.126.227.64) (Ping timeout: 250 seconds)
[17:44:39] <byorgey> Graham31415: I don't think there's a version of 'read' that operates on Text, but you can easily define your own readT = read . unpack
[17:44:43] <sshine> Graham31415, https://hackage.haskell.org/package/text-2.0/docs/Data-Text-Read.html
[17:45:19] <sshine> byorgey, -^
[17:46:24] <byorgey> sshine: interesting.  That's more limited than 'read', but it looks nice when you need to read some numbers.  I didn't know that existed.
[17:46:46] <sshine> on the other hand, there isn't a tshow :: Show a => a -> Text besides 'pack . show'
[17:47:41] <EvanR> I'm not sure I'd file any alt prelude under best practices, except maybe when "best practice" is some reality distortion speak from higher up
[17:48:52] *** Joins: noctux (~noctux@user/noctux)
[17:49:06] <sshine> I guess if there were an alternative prelude that was definitely a best practice, it'd substitute Prelude. :)
[17:49:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:49:57] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[17:49:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:49:57] *** Joins: wroathe (~wroathe@user/wroathe)
[17:50:09] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[17:50:48] <sshine> Graham31415, when you make an open-source library, depending on RIO can be pretty heavy because what if they use another alternative prelude? then depending on your tiny library suddenly results in two alternative preludes plus all of their transitive dependencies.
[17:51:38] <sshine> Graham31415, when you make an app, then you can factor out all the stuff you might like to include in other apps into lightweight libraries, and for your app, since you don't expect that it'll become a library in itself, it can depend on something heavy that makes you happy, e.g. better defaults.
[17:51:39] <lyxia> or you can not care and let it be other's people's problem
[17:51:48] <EvanR> it's fine if you're dr strange and used to patching together multiverses while trying to get work done
[17:52:19] <Graham31415> those are some nice points
[17:52:48] <sshine> Graham31415, incidentally, people promoting RIO are app developers.
[17:52:56] <Graham31415> sure
[17:53:33] *** Joins: anon66200164 (~anon66200@host-92-19-99-147.as13285.net)
[17:53:35] *** Quits: jalil (~jalil@2a01:e0a:277:4100:4b34:f28b:c1d1:3941) (Quit: jalil)
[17:53:43] *** Joins: jalil (~jalil@2a01:e0a:277:4100:f726:20ac:8c7a:b279)
[17:53:45] <Graham31415> i'm learning Haskell as an intellectual curiousity, not as a CS researcher nor as an app developer
[17:54:12] <Ariakenom_> haskell is a great curiosity
[17:54:21] <Graham31415> But I'd rather start by learning a consistent subset of the ecosystem.
[17:54:30] <lyxia> it definitely kills cats
[17:54:44] *** Quits: anon66200164 (~anon66200@host-92-19-99-147.as13285.net) (Remote host closed the connection)
[17:54:46] <EvanR> the normal prelude is consistent
[17:55:07] *** Joins: anon66200164 (~anon66200@host-92-19-99-147.as13285.net)
[17:55:17] <Graham31415> Ok, no problem. You've convinced me to use the base Prelude.
[17:55:32] <Graham31415> (at least until I understand the trade offs)
[17:55:51] <EvanR> or not, you can surely parse /proc files however you want
[17:56:20] <Graham31415> Yeah, I could use a shell script and I'd have been done in 90 seconds.
[17:57:44] <EvanR> ah yes, a stringly typed language xD
[18:00:16] <EvanR> see also shelly for haskell shell stuff
[18:00:24] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[18:00:43] *** Joins: Pickchea (~private@user/pickchea)
[18:00:43] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:01:48] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[18:02:20] *** Joins: max22- (~maxime@2a01cb08833598000823846d04004043.ipv6.abo.wanadoo.fr)
[18:05:52] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Ping timeout: 250 seconds)
[18:07:01] *** Quits: nschoe_ (~quassel@178.251.84.79) (Ping timeout: 240 seconds)
[18:08:35] *** Quits: cosimone (~user@93-47-228-191.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[18:08:37] *** Joins: cfricke (~cfricke@user/cfricke)
[18:09:45] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:09:47] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[18:09:52] *** Quits: anon66200164 (~anon66200@host-92-19-99-147.as13285.net) (Remote host closed the connection)
[18:09:52] <geekosaur> /proc is more or less designed for shell script parsing
[18:10:07] <geekosaur> or perl/python/etc.
[18:10:08] *** Joins: anon66200164 (~anon66200@host-92-19-99-147.as13285.net)
[18:10:33] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[18:18:42] *** Joins: nschoe (~quassel@178.251.84.79)
[18:19:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:21:28] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3c9b:6dce:e374:3130) (Read error: Connection reset by peer)
[18:21:39] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[18:21:51] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:21:52] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[18:23:14] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[18:25:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:25:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:25:42] *** Joins: wroathe (~wroathe@user/wroathe)
[18:26:05] *** Joins: slack1256 (~slack1256@191.125.227.88)
[18:27:37] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:28:05] *** Quits: slac25096 (~slack1256@186.11.3.215) (Ping timeout: 256 seconds)
[18:28:25] *** janus__ is now known as janus
[18:29:17] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:30:28] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:30:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:30:43] *** Joins: yauhsien_ (~yauhsien@61-231-45-223.dynamic-ip.hinet.net)
[18:30:46] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:32:23] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[18:33:30] <anon66200164> I need to write a function that gives the sum of cubes of 1, 2,...n but I'm having trouble thinking about how to do this recursively here is what I've got so far https://paste.tomsmeding.com/GskJKzVU any help would be appreciated
[18:34:57] *** Quits: yauhsien_ (~yauhsien@61-231-45-223.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[18:35:21] <ski> can you express `cubed 3' in terms of `cubed 2' ?
[18:36:34] <geekosaur> they basically show you in the "self-similarity" section
[18:36:37] *** cross_ is now known as cross
[18:36:43] <anon66200164> n*n*n + (n-1)^3
[18:37:25] <anon66200164> I wrote the self similiarity part, I was just following what my lecturer was saying, divide and conquer approach 
[18:38:22] <anon66200164> this perhaps cubes n>0 = (n*n*n) + cubes(n-1)
[18:39:37] <ski> that has a syntax error
[18:40:10] <EvanR> otoh the idea seems semi solid
[18:42:52] <janus> anon66200164: do you know how to fix the syntax?
[18:42:58] <anon66200164> so I tried this https://paste.tomsmeding.com/sQXju3NR and got *** Exception: stack overflow
[18:43:10] <anon66200164> janus: nope
[18:43:33] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[18:43:39] <ski> what is the purpose of the `cubes n>0' there ?
[18:44:02] <janus> the guard will be evaluated unconditionally. and the guard recurses...
[18:44:06] <anon66200164> so that when the base case is reached it stays above 1 
[18:44:32] <ski> btw, note that `cubes n>0' is parsed as `(cubes n)>0'
[18:44:47] <anon66200164> oh
[18:44:47] <janus> % :info (>)
[18:44:47] <yahb> janus: type Ord :: * -> Constraint; class Eq a => Ord a where; ...; (>) :: a -> a -> Bool; ...; -- Defined in `GHC.Classes'; infix 4 >
[18:44:55] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[18:45:18] <ski> so, you have a recursive call to `cubes', with the same parameter, `n', and then you're checking if the result of this is positive
[18:46:18] <ski> janus : well, conditionally, namely if the actual parameter doesn't match `1' ..
[18:48:12] <anon66200164> oh wait 
[18:48:54] <anon66200164> | n>0 = n*n*n ... and n>0 is the condition 
[18:49:35] <ski> hm ?
[18:49:50] <janus> i think it seems sensible to remove the recursion from the guard
[18:50:08] *** Joins: vysn (~vysn@user/vysn)
[18:50:46] <anon66200164> https://paste.tomsmeding.com/bOjUcPAj 
[18:51:02] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:51:14] <anon66200164> cubes (n>0) didn't return a Bool right?
[18:51:37] <ski> `cubes n>0' is a `Bool', though
[18:51:49] <ski> `cubes (n>0)' is a type error
[18:52:19] <anon66200164> I don't think I understand the type error 
[18:53:07] <ski> `n' is an `Integer'. `n>0' is a `Bool'. so, `cubes (n>0)' tries to pass a `Bool' as argument to `cubes'. but `cubes' accepts an `Integer' as input, not a `Bool'
[18:53:41] <EvanR> my god it's full of quotes xD
[18:53:44] *** Joins: slac40329 (~slack1256@186.11.3.215)
[18:53:54] <anon66200164> ohhh
[18:53:59] <anon66200164> I see it I think 
[18:54:06] <ski> @remember EvanR my god it's full of quotes xD
[18:54:06] <lambdabot> Done.
[18:54:11] <ski> there, i quoted you :)
[18:54:47] <anon66200164> cubes (n-1) is where the type error occurs?
[18:54:52] <EvanR> when lambdabot is assimilated into the metaverse that'll come back to haunt me
[18:55:03] <ski> anon66200164 : no. that one is fine. no type error there
[18:56:25] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:56:25] <ski> anon66200164 : anyway, your last paste (which i missed at first) doesn't have any type error
[18:56:33] *** Quits: slack1256 (~slack1256@191.125.227.88) (Ping timeout: 268 seconds)
[18:57:08] <anon66200164> I need to find more recursion problems to practice
[18:57:18] <ski> anon66200164 : btw, why test for `n>0', when you have `1' as base case ?
[18:57:38] <ski> (also, one pair of brackets in that code is redundant)
[18:57:56] <anon66200164> n*n*n?
[18:57:58] <ski> (and you could write `n^3', if you wanted to)
[18:57:59] <ski> yes
[18:58:06] <anon66200164> fair point 
[18:58:45] <anon66200164> won't 1 be the lowest if n>0? 
[18:58:58] <anon66200164> so that will meet my base case 
[18:59:32] <ski> `n>0' is only tested if the base case match, i.e. matching the argument against `1', *fails*
[18:59:53] <ski> there's no need for the base case to overlap with the recursive case
[19:02:03] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:02:14] <anon66200164> should the base case be 0?
[19:02:35] <ski> is `cubes 0' sensible ? if it is, what should its value be ?
[19:02:50] <anon66200164> 0
[19:02:55] <anon66200164> cubes 0 = 0 
[19:03:36] <ski> if you have that as base case, will the value of `cubes n' for `n' greater than `0' keep the same as before ?
[19:03:57] <EvanR> just an idea, way back at the beginning of this task, you could have written a short table of what the answers should be for each input 0, 1, 2, 3... just to check against
[19:04:12] <EvanR> a golden table sort of
[19:04:18] <anon66200164> https://paste.tomsmeding.com/LkfYYZZd
[19:04:18] <ski> they already did (except for `0')
[19:04:24] <EvanR> ah, then put zero xD
[19:04:41] <EvanR> join the first millenium
[19:04:52] <EvanR> millennium
[19:05:00] <EvanR> mmillenniumm
[19:05:08] <anon66200164> where the base case is zero, it still works 
[19:05:13] <ski> good
[19:05:27] <anon66200164> I'm a bit slow, sorry 
[19:05:55] *** Joins: jao (~jao@static-68-235-44-24.cust.tzulo.com)
[19:05:57] <anon66200164> A programme that goes through and shows each step of the evaluation would be useful i.e. =>
[19:06:11] <ski> (it is also possible to sensibly extend this to work for negative integers .. but unless you wish to try thinking about that, this is probably a good place to decide you're satisfied with `cubes')
[19:06:23] <ski> well, you can easily do that, by hand
[19:06:40] <ski>      cubes 4
[19:06:57] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[19:06:58] <ski>   =  4*4*4 + cubes (4-1)
[19:07:01] <ski>   =  4*4*4 + cubes 3
[19:07:09] <ski>   =  4*4*4 + 3*3*3 + cubes (3-1)
[19:07:13] <ski>   =  4*4*4 + 3*3*3 + cubes 2
[19:07:13] <anon66200164> a different task but the evaluation I typed by hand https://paste.tomsmeding.com/HfTHWBmi
[19:07:23] <ski>   =  4*4*4 + 3*3*3 + 2*2*2 + cubes (2-1)
[19:07:28] <ski>   =  4*4*4 + 3*3*3 + 2*2*2 + cubes 1
[19:07:36] <ski>   =  4*4*4 + 3*3*3 + 2*2*2 + 1*1*1 + cubes (1-1)
[19:07:39] <ski>   =  4*4*4 + 3*3*3 + 2*2*2 + 1*1*1 + cubes 0
[19:07:41] <ski>   =  4*4*4 + 3*3*3 + 2*2*2 + 1*1*1 + 0
[19:07:51] <ski> .. and then you start performing multiplications and additions ..
[19:08:08] <anon66200164> yup
[19:08:35] <anon66200164> ski: that helps me see it happening if that makes sense
[19:09:03] <ski> yes .. when starting out with recursion, hand-tracing through a couple of examples like this can help
[19:09:23] <ski> (after a while, you start to get a feel for this, and need to see a trace less)
[19:09:58] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[19:10:29] * ski would suggest writing `=' (equals, is equal to), rather than (`=>', presumably reduces/simplifies (to))
[19:11:08] <anon66200164> ok, I only got half the solution
[19:11:24] <ski> (hm, and your evaluation/reduction trace is somewhat confusingly written, in that paste)
[19:11:25] *** Quits: slac40329 (~slack1256@186.11.3.215) (Ping timeout: 240 seconds)
[19:11:26] *** Quits: phma (~phma@host-67-44-209-72.hnremote.net) (Read error: Connection reset by peer)
[19:11:39] <ski> half ?
[19:11:44] <anon66200164> yh it's a bit rough
[19:12:00] <anon66200164> ski: negative integers going towards zero 
[19:12:09] <ski> ah, right, the negatives
[19:12:21] <anon66200164> | otherwise = n^3 + cubes (n+1)
[19:12:52] <ski> what should `cubes (-1)' be ?
[19:13:10] <anon66200164> cubes 0 = 0 
[19:13:28] <anon66200164> oh 
[19:13:29] <anon66200164> umm
[19:13:45] <anon66200164> -1
[19:13:47] *** Quits: jao (~jao@static-68-235-44-24.cust.tzulo.com) (Remote host closed the connection)
[19:13:50] <ski> no
[19:14:01] <anon66200164> f
[19:14:03] <ski> what should `cubes n - cubes (n-1)' be ?
[19:15:03] <anon66200164> for n = ??
[19:15:09] <ski> for any `n'
[19:15:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:15:59] <ski> what is the addition from `cubes 2' to `cubes 3' ?
[19:16:03] <ski> what is the addition from `cubes 1' to `cubes 2' ?
[19:16:07] <ski> what is the addition from `cubes 0' to `cubes 1' ?
[19:16:42] <anon66200164> n=2: = (2)^3 + cubes 1, = 8 + 1 
[19:17:03] <anon66200164> ski: I'm sorry, I don't understand 
[19:17:25] <ski> well, you answered one of those three questions. can you answer the other two ?
[19:17:49] <ski> well .. ok
[19:17:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:17:57] <anon66200164> I'm just typing it out 
[19:18:04] <ski> the answer was actually not right
[19:18:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:18:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:18:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:18:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:18:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:18:57] <anon66200164> n=3: = 3^3 + cubes 2, = 9 + 2^3 + cubes 1, = 27 + 8 + 1, =36
[19:19:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:19:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:19:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 250 seconds)
[19:19:18] <ski> yes, that's the first question
[19:19:20] <anon66200164> n=0, fail
[19:19:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:19:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:19:39] <anon66200164> n=0, = 0
[19:19:39] <ski>   cubes 3 = 3^3 + cubes 2
[19:19:43] <ski> so
[19:19:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:19:53] <ski>   cubes 3 - cubes 2 = 3^3
[19:19:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:20:04] <ski> next question is :
[19:20:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:20:08] *** Quits: Graham31415 (~Graham314@213.237.82.193) (Quit: Client closed)
[19:20:12] <ski>   cubes 2 = 2^3 + cubes 1
[19:20:13] <ski> so
[19:20:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:20:27] <ski>   cubes 2 - cubes 1 = 2^3
[19:20:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:20:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:20:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:20:56] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 252 seconds)
[19:21:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:21:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:21:13] *** ChanServ sets mode: +o geekosaur
[19:21:19] *** ChanServ sets mode: +q lavaman!~lavaman@98.38.249.169$##fix-your-connection
[19:21:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:21:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:21:44] <geekosaur> I think you wanted ban, not quiet
[19:21:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:21:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:22:05] *** xdej_ is now known as xdej
[19:22:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:22:15] *** geekosaur sets mode: +b lavaman!~lavaman@98.38.249.169$##fix-your-connection
[19:22:20] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:22:24] *** ChanServ sets mode: -q lavaman!~lavaman@98.38.249.169$##fix-your-connection
[19:22:45] *** geekosaur sets mode: -o geekosaur
[19:22:46] <ski> mm, better. ty
[19:23:02] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[19:23:23] <ski> anon66200164 : anyway, last of those three questions :
[19:23:32] <ski>   cubes 1 = 1^3 + cubes 0
[19:23:34] <ski> so
[19:23:45] <ski>   cubes 1 - cubes 0 = 1^3
[19:23:58] <ski> anon66200164 : do you follow that ?
[19:24:03] <anon66200164> Yes
[19:24:10] <ski> so, to summarize :
[19:24:10] <anon66200164> one question though 
[19:24:18] <ski> yes ?
[19:24:37] <anon66200164> cubes 0 = 0 but n>0 is false 
[19:24:49] <ski> what about it ?
[19:25:08] <janus> you had two heads
[19:25:10] <anon66200164> what does it evaluate to when it's false if I don't have an otherwise case 
[19:25:21] <anon66200164> janus: I barely have 1 head 
[19:26:19] <ski> anon66200164 : in that case, you'll get a failure to compute an answer. your function will be undefined in that case. a partial function
[19:26:38] <ski> anyway :
[19:26:45] <ski>   cubes 3 - cubes 2 = 3^3
[19:26:46] <ski>   cubes 2 - cubes 1 = 2^3
[19:26:51] <ski>   cubes 1 - cubes 0 = 1^3
[19:27:06] <ski> so .. what is `cubes n - cubes (n-1)' ?
[19:27:47] <janus> in this paste there are two lines that have 'cubes ... = ...'. are those not heads? https://paste.tomsmeding.com/bOjUcPAj or have i messed up the terminology?
[19:28:20] <ski> nothing wrong with having two defining equations like that, janus
[19:28:50] <geekosaur> it's shorthand for having one definition that immediately does a case
[19:28:53] <janus> ski: but the 'cubes ...' part, is that not a 'function head'?
[19:28:54] <anon66200164> ski: I don't know :(
[19:28:55] <geekosaur> likewise with guards
[19:29:03] <anon66200164> fml!!!!!
[19:29:11] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[19:29:19] <janus> what what would you call it? left hand sides?
[19:29:53] <ski> janus : i'd probably call them "definienda" .. but i guess "function head" is also okay. or left-hand side
[19:30:21] <janus> i was just surprised because searching for 'function head' gives me completely misleading results
[19:30:37] <janus> dunno where to find a good reference for this
[19:30:58] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[19:31:04] <ski> ("definienda" being plural of "definiendum", "that which is/was to be defined". "definiens" (plural "definientia", or "body", or right-hand side, being "that which it is defined as / to be")
[19:31:12] <ski> anon66200164 : "fml" ?
[19:32:00] <janus> it means 'somebody have intercourse with my life'. it's bad language
[19:32:18] <anon66200164> https://www.merriam-webster.com/words-at-play/what-does-fml-mean as in, I don't understand and am to stupid to answer the question 
[19:32:19] <ski> oh
[19:32:41] <ski> anon66200164 : can you spot the pattern, in those three equalities, just above ?
[19:32:44] * geekosaur looks at the pattern and gets the answer
[19:32:48] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[19:32:56] <anon66200164> 0^0
[19:32:59] <anon66200164> 0^3
[19:33:28] <janus> > 0^0
[19:33:30] <lambdabot>  1
[19:33:34] <polyphem> anon66200164: for "any" n
[19:33:46] <ski> let's take it one step at a time
[19:33:49] <anon66200164> n^£
[19:33:55] <anon66200164> n^3
[19:34:21] <ski> yes, `cubes n - cubes (n-1) = n^3' does look like a sensible extrapolation from those three cases
[19:34:35] <anon66200164> cubes n - cubes (n-1) =n^3
[19:34:44] <ski> for `n = 3', or `n = 2', or `n = 1', it does specialize to those three equalities
[19:35:20] <ski> now, this equality is only known to hold for positive values of `n' (because `cubes n' is not defined for negative `n', yet)
[19:36:18] <ski> however, when given a choice of how to define `cubes n', for negative `n', it does make sense to let `cubes n - cubes (n-1)' keep being `n^3', just as it was for positive `n', wouldn't you say ?
[19:36:42] <ski> (as opposed to `cubes n - cubes (n-1)' suddenly being something else than `n^3', for non-positive `n')
[19:37:21] <anon66200164> I think I get it
[19:37:21] *** ChanServ sets mode: +o litharge
[19:37:22] *** litharge sets mode: -bo lavaman!~lavaman@98.38.249.169$##fix-your-connection litharge
[19:37:24] <ski> this suggests that the sensible thing to try, is to insist that `cubes n - cubes (n-1) = n^3' is true for all integers `n', not just the positive integers `n'
[19:37:50] <ski> and then, if we accept this, we can use this to our advantage, to figure out what `cubes (-1)' ought to be !
[19:37:51] <EvanR> lavaman gets an assist from rockman
[19:38:06] <ski> (and `cubes (-2)' and `cubes (-3)' and so on ..)
[19:38:31] <ski> anon66200164 : so .. each time, as you go "backwards", you subtract a cube
[19:40:20] <anon66200164> Yeah
[19:40:36] <anon66200164> I think I understand, I just need some time to process it 
[19:40:51] <ski> yea, there's no hurry
[19:41:01] <anon66200164> I'm saving a screen shot of this convo, I hope that's alright 
[19:41:13] <ski> should be fine
[19:41:30] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 260 seconds)
[19:41:32] <ski> (or you could perhaps copy the text to a text file)
[19:42:06] *** Joins: Batzy (~quassel@user/batzy)
[19:42:09] *** Joins: nsilv-phone (~nsilv-pho@37.160.46.122)
[19:42:18] <Batzy> hi everyone i have a quick question
[19:42:18] <janus> anon66200164: look, you're on tv: https://ircbrowse.tomsmeding.com/browse/lchaskell?events_page=4262
[19:42:44] *** Quits: nsilv-phone (~nsilv-pho@37.160.46.122) (Client Quit)
[19:43:01] <janus> Batzy: please ask your quick question
[19:43:02] <Batzy> im wondering if i should choose haskell for a project i am working on. but i want to know if haskell has a library to deal with matrices and also to do things like modular matrix multiplication and inverses etc
[19:44:03] <janus> @package hmatrix
[19:44:03] <lambdabot> https://hackage.haskell.org/package/hmatrix
[19:44:33] <Batzy> janus: not to beat a dead horse, but it can do modular matrix arithmetic you say?
[19:45:25] <janus> Batzy: looks like yes: https://hackage.haskell.org/package/hmatrix-0.20.2/docs/Numeric-LinearAlgebra-Data.html#t:Mod
[19:45:33] <Batzy> thanks guys
[19:45:51] <Batzy> im wondering if haskell can do what i need to do faster than "functional python'
[19:46:07] <janus> Batzy: that Mod can then be used as a Numeric: https://hackage.haskell.org/package/hmatrix-0.20.2/docs/Numeric-LinearAlgebra.html#t:Numeric
[19:46:08] <Batzy> i did what im trying to do in a very OOP way, and it's clearly introducing some slowness
[19:46:13] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[19:46:39] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:46:46] <Batzy> janus: essentially i am recusrively generating matrix products like XXYYXXXY
[19:46:52] <Batzy> recursively*
[19:46:58] <Batzy> i tried doing this in a tree structure in python
[19:47:00] *** Quits: dajoer (~david@user/gvx) (Quit: leaving)
[19:47:10] <janus> but to get the inverse you'd need it to be a Field...
[19:47:17] <Batzy> it works fine, but takesl ike 4 hours when sage takes 8 minutes
[19:48:29] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c)
[19:48:43] <janus> well now you're asking about python ;) i think you need to use these linear algebra libraries to get really good performance
[19:48:57] <Batzy> yes in python i was using numpy and sympy
[19:48:59] <janus> as you can see from the hackage page, hmatrix can link with OpenBLAS
[19:49:11] <Batzy> openblas doesnt do modular arithmetic i am pretty sure
[19:49:41] <janus> i don't know the details of this, so i will stop talking now :O
[19:49:58] <Batzy> yeah my first idea was to use somethign that linked to openblas
[19:50:15] <Batzy> but i couldnt find anything about openblas supporting modular multiplications and stuff
[19:50:39] <Batzy> i think i know someone who would know actually
[19:52:32] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c) (Ping timeout: 240 seconds)
[19:53:07] <Batzy> janus: thanks
[19:53:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:53:24] <anon66200164> would it be possible to solve this using recursion? sumPairs [] = 0  -- e.g. sumPairs [(1,2), (3,4)] =10
[19:54:02] <anon66200164> janus: I am not famous anymore
[19:54:06] <ski> anon66200164 : yes
[19:55:30] *** Quits: xff0x (~xff0x@2001:1a81:53bc:500:d58f:5284:91ba:f00d) (Ping timeout: 250 seconds)
[19:55:36] <jackson99> anon you can also solve it with sum + map
[19:55:50] <anon66200164> I only have basic tools atm 
[19:56:01] <janus> jackson99: prelude sum won't work on pairs
[19:56:02] <anon66200164> sumPair(x:xs) maybe 
[19:56:19] <anon66200164> sumPairs :: [(Integer, Integer)] -> Integer
[19:56:24] <jackson99> janus, which is why you'd use map first
[19:56:45] <ski> anon66200164 : it would follow the basic same pattern as `myLength'
[19:57:44] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c)
[19:57:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[19:58:07] * ski idly wonders whether anon66200164 decided to set `cubes n', for negative `n', aside, atm
[19:58:20] <jackson99> > (sum . map (uncurry (+))) [(1,2), (3,4)]
[19:58:22] <lambdabot>  10
[19:59:32] <anon66200164> sumPairs :: [(Integer] -> Integer sumPairs [] = 0 sumPair (x:y:zs) = (x+y) + sumPairs zs 
[19:59:41] <anon66200164> but I get a parse error 
[20:00:05] <janus> unmatched paren in '[(Integer]'
[20:00:40] <jackson99> x:y:zs would typecheck if you had a list of numbers, but you have a list of tuples that contain numbers
[20:00:46] <c_wraith> also, that type seems wrong.  as it stands, it's "sum of an even-length list", not a sum of pairs
[20:02:14] <ski> s/tuples/pairs/, to be specific
[20:02:39] *** Quits: yhsiveht (~Nishant@2405:201:f005:c007:51b9:2550:9b70:b031) (Quit: Leaving)
[20:03:06] <anon66200164> how would I use tuples here?
[20:03:16] <anon66200164> I haven't come across them yet 
[20:03:19] <ski> > (1,2)  -- this is a pair
[20:03:20] <lambdabot>  (1,2)
[20:03:46] <ski> > let swapPair (x,y) = (y,x)  in  swapPair (1,2)
[20:03:48] <lambdabot>  (2,1)
[20:04:59] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[20:04:59] <janus> a pair is a tuple with two elements. your exercise involves pairs, but because pairs are tuples, it also involves tuples.
[20:05:18] <ski> > (1,2) : [(2,3),(3,4)]  -- this is a list of pairs
[20:05:20] <lambdabot>  [(1,2),(2,3),(3,4)]
[20:05:53] *** Joins: xff0x (~xff0x@2001:1a81:53bc:500:d58f:5284:91ba:f00d)
[20:07:29] <anon66200164> *** Exception: assessment.hs:7:1-15: Non-exhaustive patterns in function sumPairs?
[20:07:41] <ski> <c_wraith> also, that type seems wrong.  as it stands, it's "sum of an even-length list", not a sum of pairs
[20:08:11] <ski> perhaps show your code ?
[20:09:22] <anon66200164> https://paste.tomsmeding.com/Wo7W9hCO
[20:09:47] <ski> yes, c_wraith's comment is relevant here
[20:10:12] <ski> also, you've defined two functions, `sumPair' and `sumPairs' .. did you intend to only define one ?
[20:11:34] <ski> (also, it's possible best here to not ask the implementation for what it thinks the type signature should be, but rather for you yourself to spell out what you think the type signature should be. if you want to, after your definition works, you could remove (or comment out) the type signature, and ask for what the implementation infers it could be)
[20:12:58] <anon66200164> I will be back soon, I need to go to a seminar
[20:13:28] <anon66200164> I'll keep this window open, hopefully it doesn't close 
[20:13:34] * ski glances around nervously
[20:13:48] <janus> anon66200164: save this link: https://ircbrowse.tomsmeding.com/browse/lchaskell?events_page=4263
[20:14:10] <anon66200164> janus: saved
[20:15:25] <jackson99> it is a bit annoying having to temporarily add Show a constraint in entire call chain when using Debug.traceShow, but I suppose there's no way around it?
[20:16:57] *** Quits: nschoe (~quassel@178.251.84.79) (Ping timeout: 240 seconds)
[20:17:49] <monochrom> w00t it's Haskell Weekly News day again!
[20:19:10] * shapr dances cheerfully
[20:19:34] <Hecate> jackson99: I don't think so, no
[20:19:42] <Hecate> maybe with Heap inspection? :p
[20:19:59] <shapr> experience report: haskell-language-server 1.6.1 no longer crashes on the work codebase with its 639126 lines of Haskell (counting non-blank lines only).
[20:20:02] <shapr> I can code much faster!
[20:20:05] * ski misread "Compiler Engineer at Mercury" as "Compiler Engineer for Mercury"
[20:20:31] <janus> couldn't you make a Debug typeclass that would normally contain no methods. but when debugging, you'd make it such that it requires Show
[20:20:49] <janus> then you'd only have to change two places instead of the whole call chain
[20:20:51] *** Quits: anon66200164 (~anon66200@host-92-19-99-147.as13285.net) (Ping timeout: 256 seconds)
[20:21:35] <ski> you'd still need to add `Debug' wherever you might want to debug
[20:21:48] <ski> i guess you could as well use CPP ?
[20:22:25] <janus> right, you'd add Debug everywhere ;) but haskell wouldn't need to actually pass a dictionary if there are no methods, right
[20:23:28] <janus> CPP to hide/add Show constraints on the whole call chain would be more verbose than a permanent Debug constraint
[20:24:15] <ski> i dunno if GHC would optimize away an empty instance dictionary
[20:25:04] <Franciman> one thing i'd like to think about more is comments attached to syntax
[20:25:11] <Franciman> you can use then to add debug messages that don't clutter your code
[20:25:17] <Franciman> so you don't have to clutter code with Debug.trace
[20:25:41] <Franciman> but you can just add and remove special comments, which usually also look visually different thanks to syntax coloring
[20:25:49] <Franciman> and you can disable them all at once if you wish
[20:25:55] <ski> is that like attributes, like they have in some languages ?
[20:26:03] <Franciman> yes, a limited form
[20:27:12] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[20:27:19] <Franciman> one usually looks for the line at which code is written, so you can attach comments to the next line of program. But is this still useful for a functional, declarative language?
[20:27:25] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:28:16] <oak-> I'm trying to use servant-client in frontend with GHCJS. Any suggestions which library I should use? servant-client-ghcjs isn't available in Hackage for some reason, but I'm not sure is that the way to go
[20:28:21] <EvanR> jackson99, at least when the thing being showed is monomorphic you don't need a constraint. Where it gets real ugly is HasCallStack xD
[20:28:36] <EvanR> then there's no way around it
[20:28:41] <Hecate> oak-: you're stuck on an older version of GHC if you go the GHCJS road
[20:28:49] <Hecate> did you try generating Axios bindings first?
[20:28:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:31:09] <oak-> Are you saying using GHCJS altogether for creating web frontend (I planned using Reflex-DOM) would be the "GHCJS road"? Or just using the servant-client-ghcjs? :P
[20:31:53] <oak-> I planned on using Reflex-Dom, but I could of course consider another options as well
[20:32:15] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::f276)
[20:33:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[20:34:04] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:34:13] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[20:34:15] <vaibhavsagar[m]> oak: I don't believe there's a GHCJS 9.0 or 9.2
[20:35:02] <janus> but servant-client works for 8.10
[20:35:57] *** Quits: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com) (Remote host closed the connection)
[20:36:18] <vaibhavsagar[m]> I remember having issues when I tried to use `servant-client-ghcjs`, and back in the day I helped with https://github.com/haskell-servant/servant-jsaddle which was our solution to this problem
[20:36:19] <oak-> I don't have problem using GHCJS 8.10.7, but I'm wondering which package provides the servant-client functionality, should I use servant-client-ghcjs?
[20:36:26] <vaibhavsagar[m]> (we also used reflex-dom)
[20:39:52] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[20:40:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:45:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:46:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:47:31] *** Joins: polyphem_ (~rod@2a02:810d:840:8754:f9b2:95ef:efe9:3c0f)
[20:49:31] *** Quits: polyphem (~rod@2a02:810d:840:8754:e075:74dd:6e37:209d) (Ping timeout: 245 seconds)
[20:50:35] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[20:51:23] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[20:55:32] *** Quits: mbuf (~Shakthi@110.225.224.158) (Quit: Leaving)
[21:01:02] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:3c97:bf3a:3e4c:7eb2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:02:18] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c) (Remote host closed the connection)
[21:02:40] *** Joins: alp (~alp@user/alp)
[21:02:51] *** Joins: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk)
[21:04:03] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:05:06] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:05:06] <Batzy> janus: now for a slightly more annoying question. If im recursively generating matrix products for say 4 matrices and doing operations like A*B*C*D*D*D*D*D, would you expect haskell with hmatrix to be able to do it much faster than python with numpy?
[21:05:34] <Batzy> i need to recursively generate matrix products of a certain length (call it n)
[21:06:05] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c)
[21:06:17] <Batzy> i dont know haskell so i just want to see if it'll even be worth it to learn to do this or if the speed is probably comparable
[21:06:40] *** Joins: Everything (~Everythin@37.115.210.35)
[21:07:09] <EvanR> haskell is cool but it's not exactly a numerics crunching environment. On hmatrix, aiui it's an FFI binding to BLAS
[21:07:47] <Batzy> EvanR: what do you classify as a numerics crunching environment
[21:07:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:08:03] *** Joins: phma (~phma@host-67-44-209-72.hnremote.net)
[21:08:19] <EvanR> fortran, matlab, julia, stuff like that
[21:08:51] <EvanR> if python is number crunching I guess there's hope for us
[21:09:08] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[21:10:24] *** Joins: econo (uid147250@user/econo)
[21:12:10] <Batzy> EvanR: the thing is i want a recursive tree structure too. The issue is i actually made these trees in python and it was sloooooooooooooooooooooooooooooooooooooooooooooow
[21:12:18] <Batzy> i guess julia and so on can do that
[21:12:23] <Batzy> and still be faster
[21:12:41] <Batzy> and i hear it looks pythony
[21:12:43] <EvanR> identify why it was slow
[21:12:53] <Batzy> EvanR: artifacts of the object orientation
[21:13:21] <EvanR> 🤔
[21:13:27] <Batzy> i could strip it down, but then it would be very close to the functional implementation anyways, and still a tad more memory inefficient
[21:13:51] <Batzy> the fact is i dont really *need* like a class attribute, i was just leaning on them as a crutch during my prototyping
[21:13:59] <Batzy> attributes*
[21:14:04] <Batzy> so im sort of convinced i want to do it functionally anyways
[21:15:20] <EvanR> haskell also has packages to do your computations on the GPU. I think accelerate is one
[21:15:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:15:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:16:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:16:07] <Batzy> EvanR: i can't tell if you're trying to sell me on haskell or a number crunching environment
[21:16:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:16:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:16:31] <Batzy> julia seems promising though
[21:16:33] <EvanR> disclaimer, no one is paying me commission on any of this
[21:16:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:16:40] <Batzy> haha
[21:16:45] <Batzy> good, because you suck at it
[21:16:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:16:57] <Batzy> worst haskell salesman ever 
[21:16:59] <EvanR> haskell is good for other reasons
[21:17:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:17:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:17:19] <Batzy> EvanR: ok when would you tell someone "you definitely want to use haskell for this"
[21:17:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:17:27] <EvanR> advent of code xD
[21:17:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:17:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:17:47] <Batzy> what else for normal life
[21:17:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:17:53] <EvanR> my friend used elixir to do the first few then burned out
[21:18:02] *** Joins: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com)
[21:18:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:18:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:18:18] <EvanR> haskell is a general purpose language so, use it for general purpose stuff
[21:18:29] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:18:30] <EvanR> I'm doing opengl graphics right now
[21:18:36] <Batzy> i see
[21:18:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:18:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:18:54] <Batzy> well ive always wanted to learn haskell, it's too neat.
[21:18:55] *** ChanServ sets mode: +o ski
[21:18:58] *** ski sets mode: +b-o lavaman!~lavaman@98.38.249.169$##fix-your-connection ski
[21:18:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:19:02] <Batzy> but i think your julia suggestion is a really good one
[21:19:10] <EvanR> last I used julia it was pretty cool
[21:19:17] <EvanR> not idea about performance though
[21:19:42] <c_wraith> Julia produces very fast code when it understands what you're doing.  So it's great for the sorts of stuff it was designed for.
[21:19:51] *** Quits: machinedgod (~machinedg@24.105.81.50) (Remote host closed the connection)
[21:19:57] <Batzy> c_wraith: did you see what i am trying to do
[21:20:10] <wavemode> the two main things to make sure of when writing number crunching code in haskell tend to be, making sure the numbers stay unboxed and making sure you aren't building up unnecessary thunks
[21:20:27] <Batzy> "numbers stay unboxed"
[21:20:28] <Batzy> ?
[21:20:50] *** Joins: machinedgod (~machinedg@24.105.81.50)
[21:21:24] <EvanR> unboxed arrays of numbers
[21:21:50] <EvanR> normally arrays contain pointer to values which can slow things down
[21:21:56] <wavemode> basically, making sure the compiler is emitting code such that you're just adding numbers, not first having to dereference pointers to the numbers
[21:21:58] <EvanR> you want them unboxed
[21:22:02] *** Joins: Joe[m] (~jsricemat@2001:470:69fc:105::1:b4ce)
[21:22:51] <wavemode> https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/primitives.html
[21:24:05] *** Joins: Akiva (~Akiva@user/Akiva)
[21:24:19] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:24:34] <EvanR> in case of hmatrix though, you hopefully don't write the number crunching code, but outsource it to the big guns
[21:25:00] <oak-> I did few tests, neither of servant-jsaddle or servant-client-ghcjs were usable "out-of-the-box". I was able to patch servant-client-ghcjs so that it builds with other parts of servant being from version 0.19. Now it's time for more tests
[21:25:11] *** Joins: emf (~emf@2620:10d:c090:400::5:21fc)
[21:25:35] <wavemode> granted, many times the compiler can optimize code using boxed types to use unboxed instead... though trying to make SURE that happens can be somewhat tricky
[21:27:11] <Batzy> EvanR: i would really just like to write A*B mod something
[21:27:24] <Batzy> and have the outsourcer do that quickly
[21:28:45] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4)
[21:29:24] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[21:29:46] <EvanR> enjoy https://hackage.haskell.org/package/hmatrix-0.20.2/docs/Numeric-LinearAlgebra.html
[21:30:48] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[21:33:24] *** Joins: abhixec (~abhinav@c-67-169-139-16.hsd1.ca.comcast.net)
[21:33:53] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:34:54] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 260 seconds)
[21:35:20] <sm> how do you preserve newlines in the `footer` (or `footerDoc`) of an optparse-applicative parser ?
[21:35:52] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[21:37:41] *** Joins: unyu (~pyon@user/pyon)
[21:39:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c) (Remote host closed the connection)
[21:41:11] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[21:45:11] *** Joins: vicfred (~vicfred@user/vicfred)
[21:45:16] <Unicorn_Princess> well that was quick. i follow https://cabal.readthedocs.io/en/latest/getting-started.html and started with "cabal init myfirstapp -n", and get an error that 'init' doesn't take any extra arguments. i guess the guide is out of date? i gathered that init now uses the directory it's ran is as the project name
[21:48:56] *** polyphem_ is now known as polyphem
[21:49:59] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[21:50:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:52:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:54:22] *** Joins: nattiestnate (~nate@2001:448a:4063:1cc8:3706:7ea7:62f5:aeaf)
[21:55:37] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 240 seconds)
[21:56:17] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:b92:1a0:165b:5914) (Ping timeout: 240 seconds)
[21:56:28] *** Joins: anon66200164 (~anon66200@host-92-19-99-147.as13285.net)
[21:57:24] <anon66200164> I have an assessment tomorrow, hopefully I can cover tuples this even and do a few questions before it 
[21:57:43] *** Joins: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e)
[21:59:39] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Remote host closed the connection)
[21:59:57] <polyphem> Unicorn_Princess: cabal init -n -o nyfirstapp
[22:00:14] <polyphem> Unicorn_Princess: cabal init -n -p myfirstapp
[22:02:01] <Unicorn_Princess> what does -o/p do?
[22:02:02] *** Quits: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e) (Ping timeout: 250 seconds)
[22:02:21] *** Joins: nebu (~user@user/wavion)
[22:02:24] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:02:45] <Unicorn_Princess> (in any case i just manually made a directory and did cabal init in.. it)
[22:02:46] *** Quits: mei (~mei@user/mei) (Quit: mei)
[22:03:03] <polyphem> Unicorn_Princess: ignore first line, cabal init --help
[22:03:35] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:c170:ec30:68fa:bc68)
[22:04:17] <polyphem> Unicorn_Princess: -p is for your package name , yea you should create and enter a directory
[22:04:27] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[22:06:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:08:08] *** Quits: abhixec (~abhinav@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[22:08:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:08:39] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[22:09:19] <monochrom> https://blog.plover.com/meta/job.html  This gets interesting. The venerable Mark Dominus wants a Haskell job, too!
[22:09:28] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:adf2:7fd4:5ba2:8512) (Quit: Textual IRC Client: www.textualapp.com)
[22:09:46] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[22:12:09] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:95db:50d7:7eec:328d)
[22:14:55] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:15:36] *** ChanServ sets mode: +o litharge
[22:15:37] *** litharge sets mode: -bo lavaman!~lavaman@98.38.249.169$##fix-your-connection litharge
[22:15:50] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[22:17:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:30cc:b923:a3cb:c39c)
[22:18:58] *** Quits: anon66200164 (~anon66200@host-92-19-99-147.as13285.net) (Remote host closed the connection)
[22:19:13] *** Joins: anon66200164 (~anon66200@host-92-19-99-147.as13285.net)
[22:20:10] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[22:21:16] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:22:54] *** Joins: cynomys (~cynomys@user/cynomys)
[22:24:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:24:21] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:24:29] *** Joins: bristermitten (~bristermi@2a00:8b40:8beb:0:de76:3286:3969:f4aa)
[22:24:35] *** Quits: [exa] (exa@srv3.blesmrt.net) (Changing host)
[22:24:35] *** Joins: [exa] (exa@user/exa/x-3587197)
[22:24:35] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:24:37] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:c170:ec30:68fa:bc68) (Ping timeout: 240 seconds)
[22:24:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:24:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:25:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:25:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:25:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:25:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:25:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:26:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:26:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:26:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:26:34] <bristermitten> Hi all, I'm trying to write an indentation-sensitive parser / lexer with Alex / Happy, but I'm encountering some issues. The majority of the resources & examples that I've found seem to be quite outdated, and I'm struggling to adapt them.
[22:26:35] <bristermitten> I've found the most luck with this example: https://github.com/jmoy/alexhappy/blob/master/whitespace/Lexer.x but it still doesn't seem to compile. I get a bunch of errors: https://paste.tomsmeding.com/fTZhuGeT
[22:26:35] <bristermitten> https://paste.tomsmeding.com/yn3JWSrh Here is my currently Lexer.x
[22:26:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:26:36] <bristermitten> Could I get some support please? Thanks!
[22:26:37] *** Joins: slack1256 (~slack1256@186.11.0.215)
[22:26:38] *** ChanServ sets mode: +o litharge
[22:26:38] *** litharge sets mode: +b *!*@98.38.249.169
[22:26:49] *** litharge sets mode: -o litharge
[22:27:16] <slack1256> Is `nubOrd` defined somewhere in the core libraries? It doesn't seem to be on `base`.
[22:27:19] *** ChanServ sets mode: +o litharge
[22:27:20] *** litharge sets mode: -bo *!*@98.38.249.169 litharge
[22:27:28] *** Joins: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net)
[22:27:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:27:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:27:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:28:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:28:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:28:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:28:33] *** ChanServ sets mode: +o litharge
[22:28:34] *** litharge sets mode: +b *!*@98.38.249.169$##fix-your-connection
[22:28:44] *** litharge sets mode: -o litharge
[22:29:07] *** Joins: whound (~dust@2409:4071:4d8d:7b21:2586:8c37:2856:667a)
[22:30:51] <monochrom> It's in containers
[22:31:24] <monochrom> Since it uses Data.Set at the back.
[22:31:57] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:5c6a:e4b3:e4cd:1bc3) (Ping timeout: 240 seconds)
[22:33:14] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 250 seconds)
[22:33:18] *** Quits: michalz (~michalz@185.246.204.87) (Read error: No route to host)
[22:34:58] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[22:35:11] *** Joins: michalz (~michalz@185.246.204.75)
[22:35:17] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[22:35:49] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4) (Remote host closed the connection)
[22:36:11] <slack1256> Oh it is on `Data.Containers.ListUtils`, awesome!
[22:36:15] <slack1256> Thanks monochrom.
[22:37:29] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[22:37:54] *** Joins: alp (~alp@user/alp)
[22:37:54] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 260 seconds)
[22:40:04] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:833f:e9c7:6325:4206)
[22:41:18] *** Joins: vysn (~vysn@user/vysn)
[22:48:34] *** ChanServ sets mode: +o litharge
[22:48:35] *** litharge sets mode: -bo *!*@98.38.249.169$##fix-your-connection litharge
[22:48:38] <reactormonk[m]> Is there a Maybe version of succ somewhere?
[22:50:11] <ski> probably requires `Bounded' and `Eq'
[22:51:32] <anon66200164> could someone else how a tuple works I can't seem to get fst (1,2) to work on ghci?
[22:51:46] <ski> > fst (1,2)
[22:51:47] <geekosaur> what goes wrong?
[22:51:47] <lambdabot>  1
[22:52:06] <polyphem> reactormonk[m]: succMay in the safe package
[22:52:15] <ski> do you have any particular interactor query, or code snippet, you'd like to show ?
[22:52:20] <reactormonk[m]> thx
[22:52:27] <ski> @hoogle succMay
[22:52:27] <lambdabot> Safe succMay :: (Enum a, Eq a, Bounded a) => a -> Maybe a
[22:52:27] <lambdabot> Intro succMay :: (Enum a, Eq a, Bounded a) => a -> Maybe a
[22:52:39] <anon66200164> this error https://paste.tomsmeding.com/JKbIjqxK
[22:53:04] <ski> anon66200164 : you defined your own `fst' ?
[22:53:22] <ski> (or used a `fst' defined for you by your lecturer, or something)
[22:53:36] <anon66200164> define it like this fst :: (a, b) -> a fst (x, _) = x 
[22:53:56] <ski> why not use the standard `fst' ?
[22:54:10] <anon66200164> neither one seems to work in any case 
[22:54:27] <ski> if you really want to use that one, try saying `Main.fst' instead .. or add `import Prelude hiding (fst)' to the top of your source file (under `module' if you have any)
[22:54:30] <anon66200164> https://paste.tomsmeding.com/sngl2RXv
[22:54:43] <anon66200164> Alright
[22:55:09] <ski> but i'd suggest just using the standard `fst', instead of having your own definition of it
[22:55:21] <monochrom> Name clash is a thing.
[22:55:43] <wavemode> the error means exactly what it says, if you define something with the same name as something else in scope the compiler doesn't know which one you're referring to. disambiguate with ModuleName.symbol
[22:55:57] <anon66200164> so it works when I use the terminal but it doesn't work when I use it in the vs code terminal 
[22:56:17] <anon66200164> weird
[22:56:18] <monochrom> In C, I wouldn't name my own function "printf".
[22:56:31] <monochrom> In Unix, I wouldn't name my own shell script "test".
[22:56:48] <monochrom> All classical examples of name clashes.
[22:56:55] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:58:06] <monochrom> You are already blessed that the computer actually lays out "you have a name clash".
[22:58:28] <ski> a/use the terminal/use the interactor/
[22:58:30] <monochrom> Because the alternative would be the computer automatically chooses the one you don't mean.
[22:58:32] *** Joins: lechner (~lechner@debian/lechner)
[22:58:59] * ski grins
[22:59:07] <anon66200164> ski: got it 
[22:59:14] *** Joins: unyu (~pyon@user/pyon)
[22:59:38] *** Quits: max22- (~maxime@2a01cb08833598000823846d04004043.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[22:59:39] *** Joins: cynomys (~cynomys@user/cynomys)
[22:59:55] <ski> anon66200164 : so, did you manage to write `g :: (a,b) -> (b,a)' ?
[23:00:06] <ski> .. using `fst' and `snd'
[23:01:46] <anon66200164> After I restarted vs code, it worked, idk what was wrong the first time 
[23:01:56] <anon66200164> I should be able to solve the sumPair exercise now 
[23:02:37] <anon66200164> i.e. sumPairs [(1,2), (3,4)] =10
[23:03:19] <ski> sounds reasonable
[23:03:30] <ski> were you required to solve that, using `fst' and `snd' ?
[23:04:58] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[23:07:19] <anon66200164> it wasn't required to only use that, but I didn't want to use anything that hasn't been mentioned in lectures
[23:07:24] <anon66200164> so no map 
[23:08:12] <monochrom> You can use pattern matching with a pattern like "(x,y)". You can use fst and snd. You should do both.
[23:08:43] <anon66200164> Yeah, I will try to solve the same problem in multiple ways 
[23:09:10] *** Quits: whound (~dust@2409:4071:4d8d:7b21:2586:8c37:2856:667a) (Quit: Konversation terminated!)
[23:09:11] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 250 seconds)
[23:09:28] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:3031:10e7:f93f:b88c)
[23:09:48] *** Joins: k8yun (~k8yun@user/k8yun)
[23:12:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[23:14:15] *** Quits: bristermitten (~bristermi@2a00:8b40:8beb:0:de76:3286:3969:f4aa) (Quit: Client closed)
[23:14:29] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[23:15:04] <anon66200164> I know I'm working on this now but my assessment2 is being released tomorrow and my lecturer has just it will basically involve building wordle using haskell 
[23:15:27] <anon66200164> has anyone done that here? 
[23:15:59] *** Quits: mastarija (~mastarija@2a05:4f46:e04:6000:15fe:cab1:6fd:b807) (Quit: Leaving)
[23:16:09] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:16:19] <janus> yes, i have seen people doing wordle in haskell, i think e.g. sshine did
[23:16:20] <dsal> anon66200164: There's a video series from a well-known haskeller and a blog post from at least one other.
[23:16:28] <monochrom> I think no but maybe people on the haskell subreddit have.
[23:16:42] <anon66200164> should be fun 
[23:16:52] <anon66200164> I haven't actually played wordle lol 
[23:16:53] <dsal> It's the only way I'd get interested in the game in the first place.  :)
[23:17:13] <monochrom> Back in the days of Suduko everyone here was doing that.
[23:17:16] <dsal> 3Blue1Brown did a pretty neat video describing some information theory around it.
[23:17:24] *** Joins: max22- (~maxime@2a01cb088335980064335dca1fbb49a4.ipv6.abo.wanadoo.fr)
[23:17:38] <monochrom> But that's also when #haskell was the major discussion platform and reddit didn't exist.
[23:17:47] <dsal> I didn't do suduko or wordle.  AoC is my favorite game, but it's seasonal
[23:17:52] <anon66200164> dsal: fair enough, I'm enjoying my functional programming module, it's mostly because the lecturer is really good, but still, it's a pleasant change from java 
[23:18:23] <dsal> I somehow read that as "lava" which sounds terribly painful so it didn't seem off to me.
[23:18:49] <monochrom> Our own https://reasonablypolymorphic.com/blog/wordle/index.html probably covers similar information theory.
[23:18:56] <geekosaur> is there much of a difference?
[23:19:38] <ski> i accidentally invented a scheme to do (possibly left-nested) goal implications, in logic programming, last time i looked at Sudoku
[23:20:38] <dsal> I was working with some xml junk in the 90s and ended up making something like a language that I used to express property tests.  I called it Extensible Markup Lisp
[23:20:52] * ski idly wonders whether there's any Sudoku implementation in Lava
[23:21:02] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[23:21:18] *** Joins: slac67097 (~slack1256@191.126.227.64)
[23:22:02] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:3031:10e7:f93f:b88c) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:22:20] *** Quits: phma (~phma@host-67-44-209-72.hnremote.net) (Read error: Connection reset by peer)
[23:23:03] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 250 seconds)
[23:23:17] *** Quits: slack1256 (~slack1256@186.11.0.215) (Ping timeout: 240 seconds)
[23:23:30] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4)
[23:24:21] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:24:31] *** Parts: jakalx (~jakalx@base.jakalx.net) (Disconnected: Replaced by new connection)
[23:24:31] *** Joins: jakalx (~jakalx@base.jakalx.net)
[23:24:45] *** Joins: phma (phma@2001:5b0:210d:6718:cad1:39ac:d8eb:ddb1)
[23:26:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:26:54] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:27:42] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[23:28:54] *** Joins: califax (~califax@user/califx)
[23:33:18] *** Quits: jalil (~jalil@2a01:e0a:277:4100:f726:20ac:8c7a:b279) (Quit: jalil)
[23:34:25] *** Joins: x_kuru (~xkuru@user/xkuru)
[23:35:13] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:36:49] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:07] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[23:37:17] *** Joins: briandaed (~root@109.95.143.81.r.toneticgroup.pl)
[23:38:37] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[23:44:09] *** Quits: michalz (~michalz@185.246.204.75) (Remote host closed the connection)
[23:45:50] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[23:46:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:48:17] <anon66200164> why do I get a variable not in scope error here? sumPairs :: [(a, b)] -> Integer  sumPairs [(_, _)] = 0
[23:48:35] <anon66200164> shouldn't it always give me 0 
[23:48:46] <dminuoso> anon66200164: take a closer look at the error message.
[23:49:02] <dminuoso> @where paste
[23:49:02] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[23:49:08] <dminuoso> Can you share the entirety of the error message?
[23:49:14] <dminuoso> Perhaps we can help you decipher it yourself
[23:49:46] *** Quits: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 260 seconds)
[23:50:08] <anon66200164> https://paste.tomsmeding.com/SI1Hvfr8
[23:50:26] <anon66200164> I was trying to test out if it works, so it's not solved yet 
[23:50:32] <dminuoso>     Variable not in scope: sumPairs :: [(a0, b0)] -> t
[23:50:40] <anon66200164> what does that mean?
[23:50:45] <dminuoso> That just means you are using `sumPairs`, which is a variable
[23:50:51] <dminuoso> But to GHC, that variable is not in scope
[23:50:55] <dminuoso> That is, it doesn't know what this 
[23:51:12] <dminuoso> i.e. this happens if sumPairs is either not defined or imported
[23:51:21] *** Joins: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[23:51:35] <geekosaur> did you enter this into ghci?
[23:52:01] <ski> did you save your file ?
[23:52:19] <anon66200164> I did save the file 
[23:52:33] <ski> and you're loading the correct file into the interactor ?
[23:52:44] <anon66200164> I https://paste.tomsmeding.com/EvhiXAR7
[23:53:08] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:53:45] <ski> that's just the same error that `sumPairs' isn't in scope (isn't defined/bound)
[23:54:58] <anon66200164> ski: it was a :l issue :/ my bad 
[23:55:06] *** Quits: phma (phma@2001:5b0:210d:6718:cad1:39ac:d8eb:ddb1) (Read error: Connection reset by peer)
[23:55:33] <anon66200164> sumPairs :: [(Integer , Integer )] -> Integer  sumPairs [(_,_)] = 0 always returns 0
[23:55:40] <ski> no worry, happens to the best of us
[23:55:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:56:00] <ski> well, sure. you've defined it that way
[23:56:00] *** Joins: phma (~phma@host-67-44-208-245.hnremote.net)
[23:56:04] <monochrom> Ah but what about [] and [(0,0), (0,0)]
[23:56:15] <ski> (in the cases it computes an answer at all :)
[23:56:49] <anon66200164> I get an exception 
[23:57:16] <anon66200164> how do I make it so it takes multiple tuples in any lengthh list
[23:57:25] <monochrom> Recursion.
[23:58:35] <anon66200164> so for this question, thinking so far https://paste.tomsmeding.com/oBubMuV7
[23:59:23] <monochrom> Yes, like that.
[23:59:32] <monochrom> But it's [] not [()]
[23:59:45] <ski> the base case is defined to take a singleton (with an empty tuple), not an empty list (of pairs)
[23:59:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
