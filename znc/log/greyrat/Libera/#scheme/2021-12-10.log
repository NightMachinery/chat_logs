[00:00:00] *** Joins: phossil (~tophullyt@162.213.177.125)
[00:03:07] *** Quits: phossil (~tophullyt@162.213.177.125) (Client Quit)
[00:11:03] *** Joins: badkins (~badkins@136.56.92.199)
[00:16:55] *** Quits: nazarii[m] (~nazariim]@2001:470:69fc:105::63a) (Ping timeout: 268 seconds)
[00:18:14] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Ping timeout: 250 seconds)
[00:18:27] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 250 seconds)
[00:19:01] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Ping timeout: 240 seconds)
[00:19:32] *** Quits: harlchen[m] (~harlchent@2001:470:69fc:105::1:3b28) (Ping timeout: 250 seconds)
[00:20:02] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Ping timeout: 240 seconds)
[00:20:06] *** Quits: tantanmen[m] (~tantanmen@2001:470:69fc:105::1:2212) (Ping timeout: 260 seconds)
[00:20:06] *** Quits: DeeEff_ (~deeeff@user/deeeff) (Ping timeout: 260 seconds)
[00:20:07] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Ping timeout: 260 seconds)
[00:21:51] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Ping timeout: 268 seconds)
[00:24:48] *** Joins: civodul (~user@guix/contributor/civodul)
[00:25:53] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2) (Quit: Leaving)
[00:26:49] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[00:34:35] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[00:36:42] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[00:38:40] *** Parts: puts (~tcz@91.150.178.124) ()
[00:39:10] *** Joins: TCZ (~tcz@91.150.178.124)
[00:42:12] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:ccb1:cdc:f709:ea36)
[00:42:12] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:ccb1:cdc:f709:ea36) (Changing host)
[00:42:12] *** Joins: skapata (~Skapata@user/skapata)
[00:43:09] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[00:52:37] *** Joins: sonny (~sonny@8.6.144.252)
[00:56:35] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:00:25] *** Joins: tantanmen[m] (~tantanmen@2001:470:69fc:105::1:2212)
[01:07:06] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[01:10:51] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[01:26:37] *** Quits: skeemer__ (~skeemer@h-178-174-193-227.NA.cust.bahnhof.se) (Quit: Leaving)
[01:35:43] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[01:37:09] *** Joins: nebu (~user@user/wavion)
[01:39:34] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[01:40:57] *** Joins: livoreno (~livoreno@user/notzmv)
[01:52:05] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Read error: Connection reset by peer)
[01:52:06] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Write error: Connection reset by peer)
[01:52:07] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Write error: Connection reset by peer)
[01:52:07] *** Quits: nazarii[m] (~nazariim]@2001:470:69fc:105::63a) (Read error: Connection reset by peer)
[01:52:07] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Write error: Connection reset by peer)
[01:52:09] *** Quits: tantanmen[m] (~tantanmen@2001:470:69fc:105::1:2212) (Remote host closed the connection)
[01:52:09] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Write error: Connection reset by peer)
[01:52:09] *** Quits: DeeEff_ (~deeeff@user/deeeff) (Read error: Connection reset by peer)
[01:54:12] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[02:01:18] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:11:26] *** Joins: klovett (~klovett@107.115.32.161)
[02:14:03] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[02:14:03] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[02:14:03] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[02:14:03] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[02:14:03] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[02:14:03] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[02:14:03] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[02:14:03] *** Joins: harlchen[m] (~harlchent@2001:470:69fc:105::1:3b28)
[02:14:15] *** Joins: tantanmen[m] (~tantanmen@2001:470:69fc:105::1:2212)
[02:16:24] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Client limit exceeded: 20000)
[02:16:49] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Quit: Client limit exceeded: 20000)
[02:17:11] *** Quits: DeeEff_ (~deeeff@user/deeeff) (Quit: Client limit exceeded: 20000)
[02:17:15] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Client limit exceeded: 20000)
[02:17:52] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Client limit exceeded: 20000)
[02:17:58] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Quit: Client limit exceeded: 20000)
[02:18:55] *** Joins: seninha (~seninha@user/seninha)
[02:27:45] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Client limit exceeded: 20000)
[02:35:13] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 265 seconds)
[02:35:37] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[02:40:06] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 260 seconds)
[02:41:30] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[02:41:30] *** Quits: nebu (~user@user/wavion) (Ping timeout: 260 seconds)
[02:42:31] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 250 seconds)
[02:47:22] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:f98a:7f63:3752:6b0e) (Ping timeout: 268 seconds)
[02:56:36] *** Joins: TCZ (~tcz@91.150.178.124)
[03:00:51] *** Joins: nebu (~user@user/wavion)
[03:11:33] *** Quits: nebu (~user@user/wavion) (Ping timeout: 250 seconds)
[03:13:00] *** Joins: nebu (~user@user/wavion)
[03:17:07] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[03:18:02] *** Parts: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[03:19:46] *** Quits: nebu (~user@user/wavion) (Ping timeout: 260 seconds)
[03:23:25] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:26:02] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[03:29:04] *** Quits: klovett (~klovett@107.115.32.161) (Quit: ZZZzzz…)
[03:31:51] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:40:31] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[03:40:44] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:43:00] *** Joins: badkins (~badkins@136.56.92.199)
[03:48:30] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:49:39] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[03:59:26] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 260 seconds)
[04:00:01] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:10:56] *** Joins: badkins (~badkins@136.56.92.199)
[04:15:18] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[04:37:46] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[04:42:14] *** Quits: sonny (~sonny@8.6.144.252) (Quit: Going offline, see ya! (www.adiirc.com))
[04:49:40] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[04:50:22] *** Joins: skapata (~Skapata@user/skapata)
[04:51:24] <jcowan> dpk: the issue with thread mailboxes is that there is at most one per thread, whereas gochans are decoupled: a thread can have any number of channels.  This is useful if you want to interleave inputs: read one from channel alpha, one from channel bravo, merge them and output to channel charlie, repeat.  You can in principle do this with thread mailboxes, but only if the senders cooperate to tag their messages alpha and bravo.
[04:51:38] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[04:51:38] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[04:51:38] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[04:51:38] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[04:51:39] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[04:51:39] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[04:51:39] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[04:53:43] <amazigh> There is a big problem my pre-srfi called coop, that is inspired from cml, problems regarding timeouts, there is much effort expected from the user to properly deal with failures, and do clean up.
[04:56:50] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[04:59:51] *** Joins: badkins (~badkins@136.56.92.199)
[05:01:52] *** Joins: seninha (~seninha@user/seninha)
[05:12:49] *** Joins: TCZ (~tcz@91.150.178.124)
[05:17:34] *** Quits: TCZ (~tcz@91.150.178.124) (Client Quit)
[05:31:14] *** Quits: winning-luser (~c@2601:8c1:80:70d0::756) (Remote host closed the connection)
[05:41:13] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:94a:bc83:5877:d7c0)
[05:45:50] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:94a:bc83:5877:d7c0) (Ping timeout: 260 seconds)
[05:51:27] *** Quits: schulze (~schulze@dynamic-077-010-209-058.77.10.pool.telefonica.de) (Ping timeout: 265 seconds)
[05:53:58] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[06:01:14] *** Joins: klovett (~klovett@107.115.32.161)
[06:01:56] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:94a:bc83:5877:d7c0)
[06:06:31] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:94a:bc83:5877:d7c0) (Ping timeout: 252 seconds)
[06:10:28] *** Joins: sonny (~sonny@8.6.144.252)
[06:16:10] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[06:16:22] *** Joins: badkins (~badkins@136.56.92.199)
[06:16:32] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[06:17:08] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[06:17:25] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[06:18:15] *** Joins: badkins (~badkins@136.56.92.199)
[06:22:04] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[06:23:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[06:23:45] *** Quits: sonny (~sonny@8.6.144.252) (Ping timeout: 252 seconds)
[06:27:11] *** Joins: sonny (~sonny@8.6.144.252)
[06:30:21] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[06:40:52] *** Parts: sonny (~sonny@8.6.144.252) (Closing Window)
[06:41:09] *** Joins: robin (~robin@user/terpri)
[06:42:38] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 256 seconds)
[06:43:55] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 252 seconds)
[06:44:20] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 256 seconds)
[06:48:00] *** Quits: lampilelo (~user@user/lampilelo) (Ping timeout: 265 seconds)
[06:50:19] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[06:56:48] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[06:59:41] *** Joins: daviid (~user@177.79.113.177)
[07:02:06] *** Quits: daviid (~user@177.79.113.177) (Remote host closed the connection)
[07:03:18] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 260 seconds)
[07:05:15] *** Joins: daviid (~user@177.79.127.45)
[07:12:58] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:15:10] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:16:29] *** Joins: badkins (~badkins@136.56.92.199)
[07:16:37] *** Quits: zwr (~zwr@2804:d45:b966:fb00:30:a6f4:bd2d:bb15) (Ping timeout: 240 seconds)
[07:17:29] *** Joins: zwr (~zwr@2804:d45:b966:fb00:ee25:c4a9:3503:c5f)
[07:18:58] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[07:21:10] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[07:23:17] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 265 seconds)
[07:29:11] *** Joins: X-Scale` (~ARM@206.46.158.5.rev.vodafone.pt)
[07:29:13] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-154.dsl.bell.ca)
[07:30:13] *** Quits: X-Scale (~ARM@83.223.250.30) (Ping timeout: 240 seconds)
[07:30:13] *** X-Scale` is now known as X-Scale
[07:31:39] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:94a:bc83:5877:d7c0)
[07:36:19] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:94a:bc83:5877:d7c0) (Ping timeout: 250 seconds)
[07:38:43] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[07:48:44] *** Joins: klovett_ (~klovett@107.115.32.161)
[07:52:00] *** Quits: klovett (~klovett@107.115.32.161) (Ping timeout: 268 seconds)
[08:17:48] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-154.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[08:28:14] *** Quits: Lysandros (~Lysandros@user/lysandros) (Ping timeout: 252 seconds)
[08:29:50] *** Joins: Lysandros (~Lysandros@2a02:aa13:8100:7880:21a:a0ff:fea7:35e)
[08:32:43] *** Quits: daviid (~user@177.79.127.45) (Ping timeout: 268 seconds)
[08:42:48] *** Joins: badkins (~badkins@136.56.92.199)
[08:48:07] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[08:52:02] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 260 seconds)
[09:18:09] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[09:26:49] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:31:55] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[09:37:06] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[09:40:13] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 240 seconds)
[09:42:29] *** Quits: klovett_ (~klovett@107.115.32.161) (Quit: ZZZzzz…)
[09:44:10] *** Joins: skapata (~Skapata@user/skapata)
[10:04:51] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[10:05:11] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:94a:bc83:5877:d7c0)
[10:10:08] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:94a:bc83:5877:d7c0) (Ping timeout: 268 seconds)
[10:16:04] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[10:25:27] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:94a:bc83:5877:d7c0)
[11:11:12] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:94a:bc83:5877:d7c0) (Ping timeout: 268 seconds)
[11:12:55] <dpk> jcowan: ah, okay. but go channels (including both of the proposals currently on ColorDockets) have a limited buffer size, unlike Erlang-style mailboxes
[11:13:52] <amazigh> good morning schemers
[11:14:12] <amazigh> ah yes the buffer size is a good idea
[11:14:49] <amazigh> but having a clue of what the default would be is impossible
[11:19:21] <sham1> Making the size configurable would be good
[11:22:25] <amazigh> both proposals have a configureable capacity
[11:23:18] <sham1> Well that's good. I'd argue that being unbounded by default might be the more useful option
[11:24:26] <amazigh> +inf.0 for the win
[11:24:42] <amazigh> more seriously: idk what the implementation does with +inf.0
[11:25:10] <amazigh> sham1: do you have thoughts about 'one-thread-per-core'?
[11:25:52] <sham1> Sounds a bit limiting unless one can also have some sort of a green thread thing on top of that
[11:26:03] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[11:26:03] <amazigh> is it a reasonable approach? does it cover enough grounds?
[11:26:08] <amazigh> ok
[11:26:37] <amazigh> the problem when dealing with Scheme, is that POSIX threads are not portable
[11:26:51] <amazigh> so, one-thread-per-core can not be standard
[11:26:57] <amazigh> it does not make sense
[11:27:00] *** Joins: civodul (~user@guix/contributor/civodul)
[11:27:35] <amazigh> but with most-things or all-the-things serializable, and multiple process.. that is another thing.
[11:27:45] <amazigh> basically what gambit does
[11:28:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:28:54] <sham1> Well pthreads + winapi basically gets you as much coverage as possible outside of embedding
[11:35:01] *** Joins: klovett (~klovett@107.115.32.161)
[11:35:55] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[11:36:48] <amazigh> i do not know much about pthreads in terms of actual xp. My rationale for looking into cml, gochans, and erlang-like actor model is people keep saying pthreads are dangerous... 
[11:37:19] <amazigh> ... coop pre-srfi, that is cml-like or wanna be, also has its downsides.
[11:38:17] *** Joins: schulze (~schulze@dynamic-095-112-089-125.95.112.pool.telefonica.de)
[11:38:39] <amazigh> re gochans, I am still wondering how go runtime decides to allocate a pthread.
[11:40:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:44:57] *** Quits: schulze (~schulze@dynamic-095-112-089-125.95.112.pool.telefonica.de) (Quit: nyaa~)
[11:45:07] *** Joins: schulze (~schulze@dynamic-095-112-089-125.95.112.pool.telefonica.de)
[11:46:35] *** Joins: mononote (~mononote@user/mononote)
[11:57:35] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[11:58:17] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Client Quit)
[12:03:49] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:94a:bc83:5877:d7c0)
[12:05:43] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:06:12] *** Joins: s-liao (~s-liao@101.86.99.70)
[12:08:41] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:94a:bc83:5877:d7c0) (Ping timeout: 250 seconds)
[12:09:00] *** Joins: daviid (~user@179.210.52.91)
[12:09:19] *** Quits: nazarii[m] (~nazariim]@2001:470:69fc:105::63a) (Quit: Client limit exceeded: 20000)
[12:14:28] *** Joins: notzmv (~zmv@user/notzmv)
[12:24:04] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[12:24:15] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:c02b:e063:31af:fa7d:e348)
[12:24:25] *** Joins: madage (~madage@user/madage)
[12:24:40] <amazigh> TIL golang, is named after the primitive keyword `go` that allowsto spawn a "coroutine". Apprantly, with golang, parallelism is implicit.
[12:24:40] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[12:33:51] <sham1> Yes. A "goroutine" can be assigned to some OS thread
[12:34:10] <sham1> So you have m:n threading where m is some number of goroutines and n is OS threads
[12:34:16] <sham1> That kind of model would work
[12:34:48] <sham1> All you'd need to watch out for is to think about where you'd want to possibly yield your thread of control
[12:37:27] <sham1> Of course, a goroutine only yields when doing a syscall of some kind
[12:39:37] *** Joins: lampilelo (~user@user/lampilelo)
[12:42:52] <schulze> Hi, there is some documentation about the design of the Go scheduler. This was a design document https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit and the author also gave an interesting talk about the design of the current scheduler here https://www.youtube.com/watch?v=-K11rY57K7k.
[12:44:07] <schulze> With lots of details about how the m:n scheduling of goroutines to threads is managed.
[12:44:40] <schulze> Also in the context of syscall and blocking threads.
[12:45:00] *** Joins: badkins (~badkins@136.56.92.199)
[12:45:04] *** Quits: lampilelo (~user@user/lampilelo) (Quit: ERC (IRC client for Emacs 27.2))
[12:49:50] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[13:21:45] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:c02b:e063:31af:fa7d:e348) (Ping timeout: 252 seconds)
[13:34:03] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 250 seconds)
[13:34:55] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[13:44:51] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[13:54:22] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[13:56:51] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:02:18] *** Joins: X-Scale` (~ARM@83.223.232.153)
[14:03:59] *** Quits: X-Scale (~ARM@206.46.158.5.rev.vodafone.pt) (Ping timeout: 256 seconds)
[14:03:59] *** X-Scale` is now known as X-Scale
[14:04:35] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:c67e:553c:26ff:fd26)
[14:12:17] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Ping timeout (120 seconds))
[14:12:40] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:25:46] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[14:25:59] *** Joins: madage (~madage@user/madage)
[14:32:32] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:32:41] *** Joins: gproto23_ (~gproto23@user/gproto23)
[14:32:59] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[14:33:08] *** Quits: gproto23_ (~gproto23@user/gproto23) (Remote host closed the connection)
[14:33:22] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:42:12] *** Joins: seninha (~seninha@user/seninha)
[14:43:45] *** Joins: DKordic (~DKordic@178-222-18-232.dynamic.isp.telekom.rs)
[14:47:33] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:49:00] <dpk> a serious omission from SRFI 130 appears to be a predicate telling you in O(1) whether a string cursor is the post-end cursor of a particular string
[14:49:39] <dpk> or maybe i'm missing something
[14:50:32] <dpk> i can compare string-cursor=? with the string-cursor-end of the string, but *getting* the string-cursor-end may require an O(n) operation in itself
[14:52:43] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:59:30] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:c02b:e063:31af:fa7d:e348)
[15:04:46] *** Joins: ASau (~user@lmpc.drb.insel.de)
[15:13:14] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[15:28:37] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[15:40:16] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:c67e:553c:26ff:fd26) (Quit: Client closed)
[15:42:28] *** Quits: Lysandros (~Lysandros@2a02:aa13:8100:7880:21a:a0ff:fea7:35e) (Changing host)
[15:42:28] *** Joins: Lysandros (~Lysandros@user/lysandros)
[15:42:54] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[15:45:23] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[15:49:07] <dpk> hmm, or maybe not. string-cursor-end could be O(1), actually. but SRFI 130 doesn't offer any performance guarantees
[15:56:49] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[16:02:31] *** Joins: s-liao (~s-liao@101.86.99.70)
[16:06:52] *** Joins: badkins (~badkins@136.56.92.199)
[16:09:18] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[16:11:30] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[16:15:24] *** Parts: aoh__ (~aki@haltp.org) ()
[16:15:51] *** Joins: aoh (~aki@haltp.org)
[16:22:15] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[16:22:41] *** Joins: s-liao (~s-liao@101.86.99.70)
[16:24:04] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:26:16] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[16:28:06] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[16:37:44] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[16:59:27] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[17:03:08] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[17:10:42] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:d10e:cf28:805f:4f6f)
[17:13:01] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f1ba:fd5a:67b3:b8c0) (Ping timeout: 240 seconds)
[17:17:39] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:c02b:e063:31af:fa7d:e348) (Ping timeout: 250 seconds)
[17:21:53] *** Joins: badkins (~badkins@136.56.92.199)
[17:30:29] *** rgherdt_ is now known as rgherdt
[17:31:05] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:45:41] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[17:47:51] <jcowan> I wish I could find a way to bridge 130 and (the future) 135+152 hybrid
[17:48:04] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[17:48:59] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:80d4:7220:f6ab:2cb)
[17:49:27] <jcowan> https://htmlpreview.github.io/?https://raw.githubusercontent.com/johnwcowan/r7rs-work/master/srfi-135x.html is my current spec for 135+152
[17:53:27] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:80d4:7220:f6ab:2cb) (Ping timeout: 252 seconds)
[17:55:32] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:80d4:7220:f6ab:2cb)
[18:04:37] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[18:13:22] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[18:13:42] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[18:14:39] <wasamasa> I just realized how broken python is when trying to reimplement a counter closure and had to use the nonlocal keyword
[18:25:24] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[18:36:17] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[18:36:54] *** Joins: badkins (~badkins@136.56.92.199)
[18:41:29] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[18:42:49] *** Joins: xsperry (~xs@user/xsperry)
[18:44:47] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 252 seconds)
[18:48:18] *** Joins: lutxito (~lutxito@customer-46-39-97-220.stosn.net)
[18:50:10] <sham1> Ah yes, the nonlocal
[18:50:23] <sham1> Because you have global and then you have local, but obviously you need a third one
[18:51:16] *** Quits: lutxito (~lutxito@customer-46-39-97-220.stosn.net) (Client Quit)
[18:57:19] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[18:58:56] <wasamasa> it's so stupid
[19:02:20] *** Joins: badkins (~badkins@136.56.92.199)
[19:03:31] <gwatt> I think that's pretty common in langauges that don't distinguish between variable introduction and variable assignment.
[19:03:57] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[19:04:07] *** Joins: badkins (~badkins@136.56.92.199)
[19:04:16] <wasamasa> I've found a website telling me to just use a class, lol
[19:08:30] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 260 seconds)
[19:10:24] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[19:12:11] *** Joins: aeth (~aeth@user/aeth)
[19:21:36] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[19:26:02] *** Joins: m455 (~m455@user/m455)
[19:26:22] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[19:27:34] *** Joins: aeth (~aeth@user/aeth)
[19:28:26] *** Quits: m455 (~m455@user/m455) (Client Quit)
[19:29:48] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[19:47:07] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Read error: Connection reset by peer)
[19:52:34] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[20:00:43] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:04:53] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[20:07:24] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[20:15:43] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[20:15:57] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:80d4:7220:f6ab:2cb) (Ping timeout: 250 seconds)
[20:17:34] *** Joins: aeth (~aeth@user/aeth)
[20:26:53] <amazigh> how can I have a C macro with a dot in its expansion?
[20:27:14] <amazigh> so that FOOBAR becomes FOO.BAR
[20:33:46] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[20:34:02] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[20:34:47] <sham1> #define FOOBAR FOO.BAR
[20:35:39] <sham1> Of course, you'd want to probably ask #C ;)
[20:35:52] <sham1> Since over there there are way better preprocessor people than I
[20:38:01] <dpk> jcowan: with weak tables you can use string cursors to implement SRFI 152 for strings with O(1) string-ref even on Schemes where the native string-ref is O(n), i realized today
[20:38:07] <dpk> https://gitlab.com/dpk/presrfis/-/blob/master/string-notes.md
[20:38:55] <dpk> assuming, that is, no string-set! is ever used
[20:40:36] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[20:40:49] <jcowan> Which breaks SRFI 130 anyhow.  I'm sure foof would say that keeping around all the cursors would cost too much anyway in Chibi, which is all about less space
[20:42:00] *** Joins: tripfandango (~tripfanda@5.29.44.90)
[20:42:27] <sham1> Implementations using UTF-32 internally might just be the easiest if we want a character to mean a codepoint as opposed to a code unit
[20:42:36] <sham1> Which we do want
[20:46:15] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:46:43] *** Quits: tripfandango (~tripfanda@5.29.44.90) (Ping timeout: 250 seconds)
[20:52:34] <amazigh> sham1: Correct. The error I am tracking is somewhere else..
[20:57:47] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[21:06:13] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 240 seconds)
[21:07:07] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[21:07:07] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[21:07:07] *** Joins: turlando (~turlando@user/turlando)
[21:10:43] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[21:13:02] <dpk> i suspect most of the performance problem with UTF-8 strings as in Chibi would be solved by keeping *one* character to byte index mapping around for each string, namely the byte index of the last character accessed by string-ref (updated each time). bonus points if string-index and friends also update the mapping. of course, problems with multithreading
[21:13:24] <dpk> it would be nice to have some data on real string search and access patterns to confirm that hypothesis
[21:14:07] <sham1> Maybe a skip list
[21:14:49] <sham1> Although at that point I don't know if it's all that worth it vs. just storing the codepoints as UTF-32 as opposed to doing trickery to allow for fast access to UTF-8
[21:15:09] <dpk> we have to at least make it possible for implementations to exist which use UTF-8 internally
[21:15:22] <dpk> Chibi is not going to switch; neither is Chicken
[21:15:29] <sham1> Well that would be more of just an internal affair
[21:16:30] <sham1> One shouldn't mandate how implementations implement it, and if the way I said that came out like that then I certainly didn't mean to imply that we have to tell implementations how strings are internally represented
[21:17:13] <dpk> UTF-8, as i remark in string-notes.md, has particular benefits for Schemes (like Chibi) which are designed for programs which interface with C code a lot: you can pass a UTF-8 string to most C libraries, meaning no need to copy the string to a new encoding as part of the FFI
[21:17:24] <sham1> That's true
[21:17:47] <dpk> we won't mandate how implementations implement it, but we have to come up with a solution that makes efficient string processing applications even on implementations with O(n) string-ref for codepoints
[21:19:33] <dpk> simple parsing applications in such implementations are liable to turn quadratic
[21:20:31] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 250 seconds)
[21:25:13] <Zipheir> I suppose the "nonlocal" is the "express"....
[21:25:55] <sham1> Well if it's global then it's not local
[21:26:01] <sham1> But nonlocal is different from global
[21:26:11] <dpk> 🥁
[21:28:09] <dpk> oh, til Chibi already provides a SEXP_USE_STRING_INDEX_TABLE build-time option to give O(1) string-ref by storing a character to byte offset table
[21:28:50] * Zipheir still thinks of "local" as meaning "the slow train".  Habits of growing up with subways.
[21:29:32] <sham1> That's the kind of thing I would think of if I wanted constant indexing to UTF-8
[21:29:43] <sham1> Just constructing it while reading the UTF-8 code units
[21:30:40] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:80d4:7220:f6ab:2cb)
[21:32:03] <dpk> Zipheir: they only just invented those here in Berlin at least, and they aren't timetabled express trains but rather, if the train is running late, they will just announce that it will pass through the next n stations without stopping to make up time, so if you wanted to actually get off at those stations, you should get off now instead and take the next non-delayed one
[21:33:43] <Zipheir> Interesting.
[21:36:21] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:40:27] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 250 seconds)
[21:45:35] *** Joins: badkins (~badkins@136.56.92.199)
[21:48:10] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[22:00:52] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[22:07:55] <jcowan> Chibi does a (non-optimized) check in the FFI to prevent you from passing Scheme strings with NULs to C.
[22:13:29] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:14:38] *** Joins: mzan (~quassel@mail.asterisell.com)
[22:17:41] *** Quits: mzan (~quassel@mail.asterisell.com) (Client Quit)
[22:18:26] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 260 seconds)
[22:19:35] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:25:47] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
[22:26:38] *** Joins: mzan (~quassel@mail.asterisell.com)
[22:27:06] <amazigh> I should benchmark the server cpu, but it is apparantly faster than my laptop
[22:28:41] <jcowan> dpk, Zipheir: https://en.wikipedia.org/wiki/Skip-stop is  that idea as a formalized service pattern.  It works well when most people get on in the skip-stop region but are all going to (close to) the other end of the line
[22:31:35] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[22:32:49] <jcowan> NYC has only one surviving formal skip-stop pair: the J and Z lines, which have a long tail in Queens running over inherently slow over-the-street trackage.  Skip-stop is done during morning rush hours toward Manhattan and during evening rush hours away from Manhattan
[22:33:33] <Zipheir> Very interesting!
[22:42:03] *** Joins: seninha (~seninha@user/seninha)
[23:17:25] *** Joins: badkins (~badkins@136.56.92.199)
[23:25:33] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[23:30:19] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[23:31:21] *** Joins: badkins (~badkins@136.56.92.199)
[23:32:35] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[23:32:45] *** Joins: badkins (~badkins@136.56.92.199)
[23:38:50] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[23:46:37] *** Joins: mononote (~mononote@user/mononote)
[23:47:17] <dpk> okay, i have a working patch for Chibi that caches a string cursor for the most recently accessed index, though it can currently only use it to move forward through the string, not backwards
[23:48:45] <dpk> however, my debug logging shows that the most common case of moving backwards through a string in the Chibi bootstrap process is actually going back to index 0 anyway
[23:50:53] <dpk> anyone have any particularly torturous string benchmark code lying around?
[23:52:42] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 260 seconds)
[23:59:03] <amazigh> something like aho-corasick?
