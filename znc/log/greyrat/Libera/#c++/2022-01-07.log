[00:00:05] *** Joins: donald1 (~donald@37.165.29.113)
[00:00:18] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[00:00:26] <ville> std::byte* has similar exception
[00:00:42] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[00:00:49] <anyone> Something else; in https://en.cppreference.com/w/cpp/utility/launder it says reinterpret_cast<Y *>(&s) ... but since s is an array, I think it ought to say reinterpret_cast<Y *>(s)
[00:01:41] *** Quits: aLeSD__ (~aLeSD@host-95-239-36-1.retail.telecomitalia.it) (Remote host closed the connection)
[00:02:06] *** Joins: aLeSD__ (~aLeSD@host-95-239-36-1.retail.telecomitalia.it)
[00:04:17] *** Quits: donald1 (~donald@37.165.29.113) (Ping timeout: 240 seconds)
[00:04:19] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[00:04:20] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[00:04:20] *** Joins: Teukka (~teukka@user/Teukka)
[00:06:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[00:06:50] <RandomReader> there's no exception to the case Alipha is talking about; char* can alias another object, but another object type cannot alias char*
[00:07:09] <RandomReader> (it's unidirectional, not bidirectional)
[00:07:19] <Alipha> then the example 2 is wrong if std::byte* has the same rules?
[00:07:51] <RandomReader> (otherwise there'd be no aliasing rule at all, since everything would transitively be aliased)
[00:09:25] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[00:09:37] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 240 seconds)
[00:11:55] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[00:12:16] *** Quits: aLeSD__ (~aLeSD@host-95-239-36-1.retail.telecomitalia.it) (Remote host closed the connection)
[00:12:19] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[00:12:35] *** Joins: aLeSD__ (~aLeSD@host-95-239-36-1.retail.telecomitalia.it)
[00:15:00] *** Joins: Leonard (~Administr@114.55.127.80)
[00:17:05] <RandomReader> ...that isn't quite correct usage of std::launder though; placement-new needs to be used first, launder can only obtain a pointer to an existing object
[00:17:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[00:17:47] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:20:27] <RandomReader> as a side note, I wonder how this example is supposed to work: https://eel.is/c++draft/allocator.requirements.general#tab:cpp17.allocator-row-18-column-3-example-1
[00:21:18] <RandomReader> considering the amount of space required is still difficult to predict: https://eel.is/c++draft/expr.new#16.sentence-3
[00:22:36] *** Quits: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr) (Quit: Connection closed)
[00:24:15] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Remote host closed the connection)
[00:24:25] <RandomReader> oh I misread the sentence above it, which fixes that .. double negatives
[00:24:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:24:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:25:33] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[00:26:11] *** Joins: donald1 (~donald@2a01:e0a:95e:7ca0:40c8:8234:c070:6844)
[00:27:48] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:31:10] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:33:24] *** Joins: Viewday11 (~Viewday@user/viewday)
[00:34:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:35:23] *** Joins: Betal (~Betal@user/betal)
[00:37:18] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[00:37:22] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[00:47:25] *** Joins: randm_ (~randm@user/randm)
[00:47:25] *** Quits: randm (~randm@user/randm) (Read error: Connection reset by peer)
[00:47:33] *** Joins: slidercrank (~slidercra@user/slidercrank)
[00:47:50] *** randm_ is now known as randm
[00:48:24] *** Joins: Leonard (~Administr@114.55.127.80)
[00:48:29] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[00:49:04] *** Quits: rgrinberg (~textual@187.223.202.115) (Read error: Connection reset by peer)
[00:49:55] *** Joins: rgrinberg (~textual@2806:101e:7:78bb:604a:d771:1c7e:1e28)
[00:50:13] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[00:50:16] *** Quits: randm (~randm@user/randm) (Client Quit)
[00:51:02] *** Quits: RAMIII (~RAMIII@2601:8c:801:c600::f02a) (Ping timeout: 240 seconds)
[00:51:47] *** Joins: randm (~randm@user/randm)
[00:51:49] *** Quits: randm (~randm@user/randm) (Remote host closed the connection)
[00:52:40] *** Joins: randm (~randm@user/randm)
[00:53:54] *** Quits: randm (~randm@user/randm) (Client Quit)
[00:54:59] *** Joins: randm (~randm@user/randm)
[00:57:31] *** Joins: randm_ (~randm@user/randm)
[00:57:40] *** Quits: randm (~randm@user/randm) (Read error: Connection reset by peer)
[00:57:57] *** randm_ is now known as randm
[00:58:15] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[01:00:10] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[01:02:44] *** Quits: randm (~randm@user/randm) (Ping timeout: 256 seconds)
[01:03:18] *** Quits: magla (~gelignite@55d42ff9.access.ecotel.net) (Quit: Stay safe!)
[01:04:29] *** Joins: Dave_R (~Dave_R@home.amunra.co.uk)
[01:05:10] *** Joins: dudek (~dudek@185.150.236.156)
[01:07:14] *** Joins: randm (~randm@user/randm)
[01:07:15] *** Quits: ketiv (~ketiv@92.40.195.121.threembb.co.uk) (Ping timeout: 256 seconds)
[01:07:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[01:10:39] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[01:15:57] *** Quits: rgrinberg (~textual@2806:101e:7:78bb:604a:d771:1c7e:1e28) (Ping timeout: 240 seconds)
[01:18:00] *** Joins: Leonard (~Administr@114.55.127.80)
[01:18:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[01:19:35] *** Quits: NEYi (~NEYi@109.251.216.38) (Ping timeout: 256 seconds)
[01:20:43] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[01:22:39] *** Joins: rgrinberg (~textual@2806:101e:7:78bb:e159:66aa:7702:44de)
[01:24:19] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[01:24:21] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[01:26:20] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[01:28:34] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Ping timeout: 268 seconds)
[01:29:20] *** Quits: moose (~moose@user/moose) (Quit: Leaving)
[01:30:05] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[01:32:36] *** Joins: Leonard (~Administr@114.55.127.80)
[01:35:01] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[01:35:36] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[01:37:04] *** Joins: RAMIII (~RAMIII@2601:8c:801:c600:5efd:7795:cdf9:ecb2)
[01:38:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[01:40:37] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:44] *** ChanServ sets mode: +v npaperbot
[01:41:01] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[01:41:07] *** Joins: NEYi (~NEYi@109.251.216.38)
[01:41:49] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[01:48:00] <ville> RandomReader: not sure why they are launder+reinterpret_cast the result of placement new
[01:49:00] *** Quits: rgrinberg (~textual@2806:101e:7:78bb:e159:66aa:7702:44de) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:49:51] <ville> Alipha: you mean the: std::launder(reinterpret_cast<Y*>(&s))->z; part?
[01:50:37] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[01:58:42] <AmR> are #warning is standard in language ?
[01:59:39] <ville> np
[01:59:44] <ville> no
[02:00:03] *** Joins: Leonard (~Administr@114.55.127.80)
[02:00:38] *** Quits: donald1 (~donald@2a01:e0a:95e:7ca0:40c8:8234:c070:6844) (Ping timeout: 268 seconds)
[02:01:54] <Alipha> ville: yes
[02:02:02] *** Joins: moose (~moose@user/moose)
[02:02:39] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[02:03:05] <AmR> Alipha: https://en.cppreference.com/w/cpp/preprocessor " A common non-standard extension is the directive #warning which emits a user-defined message during compilation. " ???
[02:03:27] <RandomReader> "non-standard" = not standard
[02:03:49] <ville> Alipha: apart from the &s part, which anyone pointed out, looks good to me. that should be the canonical way of going from your "pointer to storage" to "pointer to object"
[02:04:56] <Alipha> ville: by wrong, I meant, the std::launder is unnecessary
[02:05:27] <RandomReader> I'm also confused by that allocator example .. it talks about creating an array object, but doesn't seem to do that, and launder has a precondition: https://eel.is/c++draft/ptr.launder#2.sentence-2
[02:05:31] <ville> Alipha: no it's still necessary, you're going from char*/unsigned char*/byte* to T*
[02:05:35] <RandomReader> and I don't think that's one of the implicit creation scenarios
[02:05:53] <Alipha> Ah
[02:07:04] <RandomReader> the examples are normative right? I wonder if this is part of a LWG issue somewhere
[02:07:09] <ville> yes
[02:07:24] <ville> err non-normative
[02:08:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[02:08:21] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[02:08:40] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc71:98a8:e8a4:d876) (Remote host closed the connection)
[02:09:01] *** Quits: randm (~randm@user/randm) (Quit: Leaving.)
[02:09:03] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:acd5:fce0:a19c:de74)
[02:09:16] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Ping timeout: 268 seconds)
[02:09:40] *** Joins: randm (~randm@user/randm)
[02:09:44] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:09:51] <RandomReader> ah
[02:10:09] *** Joins: plastico (~plastico@neomutt/plastico)
[02:10:26] <ville> https://share.ansi.org/isodocs/ISO_IEC_Directives_Part2.pdf go to part 6.5 or so
[02:10:49] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[02:10:55] <RandomReader> this suggests someone in LWG is considering these things, although I don't see this specific one anywhere: https://cplusplus.github.io/LWG/lwg-active.html#3471
[02:11:21] <RandomReader> I should probably shortlink that for posterity: [lwg3471]
[02:11:21] <npaperbot> LWG3471: polymorphic_allocator::allocate does not satisfy Cpp17Allocator requirements (Status: New, Submitter: Alisdair Meredith, Last modified: 2021-05-22) <https://wg21.link/lwg3471>
[02:11:46] <RandomReader> that leads to a nicer page anyway
[02:12:19] *** Joins: donald1 (~donald@2a01:e0a:95e:7ca0:40c8:8234:c070:6844)
[02:13:40] <RandomReader> and good to know the normative/informative thing is consistent for all of ISO, that makes things a little easier
[02:16:42] *** Quits: aLeSD__ (~aLeSD@host-95-239-36-1.retail.telecomitalia.it) (Read error: Connection reset by peer)
[02:17:14] <anyone> Topic flag bits. Traditionally, people did these as #define S_IRUSR 0400, sometimes they abuse enum{} even though it's not an enum, and in C++ there's constexpr unsigned int S_IRUSR=0400;
[02:17:40] <anyone> However, it's still an unsigned int which can be accidentally combined with some unrelated integer to produce a nonsensical value. In https://wandbox.org/permlink/xKiEmJrpuAnqilSP , this idea is put into a dedicated class of its own.
[02:17:51] <anyone> Is this the sensibly shortest approach or can this be done smarter?
[02:18:02] <ville> i just stick them in enum struct
[02:18:05] *** Joins: aLeSD__ (~aLeSD@host-95-239-36-1.retail.telecomitalia.it)
[02:19:57] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9c74:da2:a180:c153)
[02:19:57] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9c74:da2:a180:c153) (Changing host)
[02:19:57] *** Joins: skapata (~Skapata@user/skapata)
[02:20:04] <kalven> ditto, but class
[02:22:09] <ville> dunno why the committee keeps passing these core language features that require header to function
[02:22:17] <anyone> you'd still have to define op|, op&, op~ for the enum class/struct. Hence why in the paste I did it as a templated struct
[02:23:11] <ville> once you're past the api boundary just cast to u32. hah
[02:24:55] <anyone> yeah but ahead of the api.
[02:25:39] <anyone> well, can't even declare functions in enum struct.
[02:28:37] <kalven> what functions do you want?
[02:29:51] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[02:29:56] <anyone> Well, https://wandbox.org/permlink/xKiEmJrpuAnqilSP is what I had come up with (considering that enum class does not allow the same functionality)
[02:33:08] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:33:23] *** Quits: pizdets (~pizdets@183.182.115.85) (Ping timeout: 256 seconds)
[02:33:50] *** Joins: walterwhip (~www@user/walterwhip)
[02:34:02] *** Joins: pizdets (~pizdets@183.182.110.89)
[02:35:48] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[02:36:24] *** Joins: walterwhip (~www@user/walterwhip)
[02:37:19] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[02:37:21] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 256 seconds)
[02:37:58] *** Joins: walterwhip (~www@user/walterwhip)
[02:39:56] <RandomReader> the operators can be free functions, if that's the main thing you're getting at
[02:40:24] <RandomReader> initialization from the underlying type is supported with {}, converting back would be a static cast though
[02:40:25] *** Joins: Leonard (~Administr@114.55.127.80)
[02:41:10] <RandomReader> in generalized form .. you could do templates constrained to enums, but that is a bit different in terms of usage considerations
[02:41:43] <ville> as a sidenote you don't have to really define the tag struct. you can just do: using some_bits = bits<struct some>;
[02:42:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[02:47:15] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[02:47:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[02:47:33] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: Textual IRC Client: www.textualapp.com)
[02:51:36] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:52:17] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 240 seconds)
[02:55:09] *** Joins: daswf8525 (~daswf852@user/daswf852)
[02:55:19] *** Quits: daswf852 (~daswf852@user/daswf852) (Read error: Connection reset by peer)
[02:55:19] *** daswf8525 is now known as daswf852
[02:57:09] <kit> -Weverything my beloved
[02:58:18] *** Quits: nitrowheels (~nitrowhee@151.95.83.100) (Quit: Leaving)
[02:58:33] <anyone> RandomReader: oh that's lovely
[02:58:36] *** Joins: ferdna (~ferdna@user/ferdna)
[02:59:46] <irrenhaus3> I've come across a curiosity I never really thought about for a long time, but now that I do, it seems very odd: Why is a non-void-returning function with no return statement undefined behavior instead of a hard compilation error?
[03:00:44] <anyone> int f() { throw std::runtime_error("all the time"); }
[03:01:18] <irrenhaus3> oh.
[03:01:43] <irrenhaus3> ...man, exceptions really are a double-edged sword, aren't they
[03:01:51] <anyone> "no 'return' at all" is just a special case of "at least one branch with no 'return'"
[03:01:51] <ville> no they just suck
[03:01:55] <RandomReader> not just exceptions though, calling std::exit would be the same thing
[03:01:59] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[03:02:20] <RandomReader> in general, it's just impossible to tell if a function will ever return
[03:02:41] <irrenhaus3> RandomReader: true, but the std::exit case at least we have [[noreturn]] for
[03:02:50] <anyone> irrenhaus3: I get the idea though.
[03:02:53] <RandomReader> attributes might provide a way to annotate it now, but earlier I don't think there was really anything that might describe it
[03:03:01] <irrenhaus3> with exceptions that can be thrown at any time though, yeah, tough luck.
[03:03:02] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[03:04:06] <anyone> if exceptions can be thrown any time, that's not necessarily all the time, and that would speak for having a return somewhere.
[03:04:40] <anyone> which is why I picked a pathalogical case of always throwing. I don't see how forcing a return stmt would be bad
[03:04:54] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[03:05:23] <RandomReader> different compilers handle it differently .. msvc will error in some cases, it's a required part of their codegen .. clang tends to stick fault instructions there
[03:05:38] <RandomReader> well, it's not just forcing a return statement though, it's full branch analysis
[03:05:41] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[03:06:06] <RandomReader> e.g.  LargeT foo() { if (x) return make_large_foo; else never_return(); }
[03:06:15] *** Quits: EdFletcher (~PKD@user/edfletcher) (Ping timeout: 256 seconds)
[03:06:34] <RandomReader> it'd be forcing everyone to write unnecessary statements, which could be messy if it requires constructor params from somewhere
[03:07:00] <RandomReader> an alternative would be annotating, maybe along the lines of [[fallthrough]], but I haven't seen anyone flesh that out
[03:08:13] <anyone> LargeT foo() { if (!x) never_return(); return make_large_foo; }  averted having to make a messy constructor call. Problem solved ;-)
[03:12:41] *** Joins: Leonard (~Administr@114.55.127.80)
[03:14:13] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 240 seconds)
[03:15:11] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[03:17:50] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:20:06] *** Quits: dsrt^ (~dsrt@207.5.21.20) (Read error: Connection reset by peer)
[03:22:05] *** Joins: vicfred (~vicfred@user/vicfred)
[03:25:41] *** Quits: Leonard (~Administr@114.55.127.80) (Remote host closed the connection)
[03:26:05] *** Joins: Leonard (~Administr@114.55.127.80)
[03:27:46] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:27:49] *** Joins: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net)
[03:30:44] *** Joins: rgrinberg (~textual@177.246.218.93)
[03:32:22] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[03:32:59] *** Joins: Leonard (~Administr@114.55.127.80)
[03:35:06] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[03:35:33] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:39:46] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[03:39:48] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[03:42:57] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:49:25] *** Joins: chozorho (~chozorho@2601:146:300:c30::be22)
[03:54:25] *** Quits: archbish (~archbish@vps-67389805.vps.ovh.net) (Quit: Lost terminal)
[03:59:56] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[04:00:20] *** Joins: mixfix41 (~homefame@user/mixfix41)
[04:04:43] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[04:05:41] *** Joins: Leonard (~Administr@114.55.127.80)
[04:08:15] *** Quits: Pook (~Pook@2001:8a0:f996:1400:bc49:61a0:9761:5b18) (Quit: Leaving)
[04:08:27] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[04:10:18] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[04:13:17] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[04:13:33] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[04:14:29] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[04:16:02] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:17:18] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[04:18:27] *** Joins: Leonard (~Administr@114.55.127.80)
[04:21:29] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[04:25:35] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:25:57] *** Quits: Burgundy (~yomon@5-12-10-45.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:28:26] *** Joins: foozle (~foozle@2001-b011-c040-16bf-72ab-bd94-41b9-3fd3.dynamic-ip6.hinet.net)
[04:32:09] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[04:34:11] *** Quits: rgrinberg (~textual@177.246.218.93) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:34:47] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[04:34:48] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[04:39:48] *** Quits: foozle (~foozle@2001-b011-c040-16bf-72ab-bd94-41b9-3fd3.dynamic-ip6.hinet.net) (Quit: Leaving)
[04:39:48] *** Quits: dudek (~dudek@185.150.236.156) (Quit: Leaving)
[04:41:18] *** Joins: Leonard (~Administr@114.55.127.80)
[04:43:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[04:44:44] *** Joins: powerLien (~powerLien@2a0d:5600:6:34::4d)
[04:46:59] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[04:49:00] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[04:52:21] *** Joins: dfkfs (~dfkfs@178.49.152.42)
[04:53:00] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[04:53:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[04:54:18] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[04:54:45] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[04:55:11] *** Joins: scoobydoo_ (~scooby@user/scoobydoo)
[04:56:23] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[04:57:11] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[04:57:19] *** Quits: evelyette (~Eleanor@178.79.105.181) (Ping timeout: 256 seconds)
[04:57:21] *** scoobydoo_ is now known as scoobydoo
[04:57:53] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[04:58:53] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:00:43] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[05:00:47] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[05:03:48] *** Quits: irrenhaus3 (~xenon@HSI-KBW-046-005-002-148.hsi8.kabel-badenwuerttemberg.de) (Quit: Lost terminal)
[05:04:08] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[05:04:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[05:05:24] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[05:05:38] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:07:29] *** Quits: Speakz (speakz@rfc1459.evilnet.org) (Ping timeout: 268 seconds)
[05:08:05] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:08:14] *** Joins: Speakz (speakz@rfc1459.evilnet.org)
[05:13:45] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[05:14:10] *** Joins: Leonard (~Administr@114.55.127.80)
[05:14:11] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[05:16:27] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[05:22:24] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[05:25:59] *** Quits: RAMIII (~RAMIII@2601:8c:801:c600:5efd:7795:cdf9:ecb2) (Ping timeout: 268 seconds)
[05:26:21] *** Joins: RAMIII (~RAMIII@2601:8c:801:c600::fe1a)
[05:29:22] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[05:29:29] *** Joins: Xardas (~Xardas@149.233.51.127)
[05:30:57] *** Quits: dfkfs (~dfkfs@178.49.152.42) (Quit: Client closed)
[05:32:27] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[05:36:26] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[05:36:43] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[05:37:02] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[05:38:36] *** Joins: aLeSD_ (~aLeSD@90.167.254.158)
[05:39:08] *** Quits: aLeSD_ (~aLeSD@90.167.254.158) (Read error: Connection reset by peer)
[05:39:34] *** Quits: aLeSD__ (~aLeSD@host-95-239-36-1.retail.telecomitalia.it) (Read error: Connection reset by peer)
[05:40:35] *** Joins: aLeSD_ (~aLeSD@host-95-239-36-1.retail.telecomitalia.it)
[05:40:37] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:45] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:45] *** ChanServ sets mode: +v npaperbot
[05:40:59] *** Joins: u0_a391 (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[05:42:25] *** Joins: Xardas (~Xardas@149.233.51.127)
[05:43:24] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:43:53] *** u0_a391 is now known as Kit__
[05:43:57] *** Kit__ is now known as Kit_ten
[05:44:41] *** Quits: kit (~u0_a391@2600:380:a423:8c4a:f33e:17db:7090:510e) (Ping timeout: 250 seconds)
[05:44:44] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[05:44:47] *** Kit_ten is now known as kit
[05:45:37] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[05:46:47] *** Joins: malloy (~jimery@116.30.220.175)
[05:50:16] *** Joins: rgrinberg (~textual@177.246.216.115)
[05:58:07] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:58:20] *** Quits: Dave_R (~Dave_R@home.amunra.co.uk) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:07:49] *** Joins: Leonard (~Administr@114.55.127.80)
[06:08:45] <Xardas> Is it possible to directly learn from c++ reference instead of tutorials ?
[06:09:01] <kit> absolutely
[06:09:09] <kit> thats how i learnt qb64
[06:09:22] <kit> granted qb74 != c++
[06:10:25] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:10:42] <Xardas> but the C++ is so large, is it possible to read through it ?
[06:11:02] <Xardas> ( I still don't know how large it is, i'm assuming)
[06:11:36] <Xardas> kit I'm sure you're a great qb64 coder then
[06:12:05] <kit> do you know C?
[06:12:26] <Xardas> Only the basic.
[06:12:34] <kit> hmm
[06:12:39] <kit> like
[06:12:40] <Xardas> up to pointers
[06:12:43] <kit> ok
[06:12:51] <kit> so you understand pointers
[06:12:58] <Xardas> Yes, very well.
[06:13:01] *** Joins: EdFletcher (~PKD@user/edfletcher)
[06:13:02] <kit> ok
[06:13:22] <kit> you shouldnt have too much of an issue jumping into c++
[06:13:32] <lru> reading the reference to learn C++ is like taking apart a car piece by piece to understand the whole thing... possible, but the forest can be hard to see amonst all the little trees
[06:13:49] <kit> but idk bc i knew a lot of C before i started C++
[06:14:49] <Xardas> I did C before too, and then I moved to java for like 3 years. Now i'm interested more in cpp.
[06:15:14] *** Joins: furrymcg1e (~devuan@cgn-89-1-210-27.nc.de)
[06:15:41] <Xardas> I find tutorials and videos depressing hhhhh
[06:15:51] <Xardas> Kinda makes me nervous
[06:16:48] <Xardas> Iru did you read the c++ ref ?
[06:17:40] *** Quits: furrymcg1e (~devuan@cgn-89-1-210-27.nc.de) (Client Quit)
[06:17:52] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[06:17:57] <lru> Xardas: I haven't read the whole thing... and by reference, I'm referring to the cppreference.com site, which has a ton of detail, and I find hard to glean practical knowledge from
[06:18:47] *** Quits: furrymcgee (~devuan@cgn-89-1-208-247.nc.de) (Ping timeout: 256 seconds)
[06:19:10] <Xardas> Well, I'll try it out then :D
[06:19:42] <lru> all the best!
[06:21:03] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:21:12] <Xardas> thx UwU
[06:25:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:25:29] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[06:27:16] *** Joins: Leonard (~Administr@114.55.127.80)
[06:29:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:29:33] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:30:16] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[06:30:21] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:4d91:c1e4:f48:338)
[06:30:35] *** Quits: nicko (~iClass@221.236.54.23) (Read error: Connection reset by peer)
[06:32:05] *** Joins: nicko (~iClass@221.236.54.23)
[06:35:01] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[06:36:54] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[06:36:59] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[06:40:27] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:42:17] *** Quits: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[06:43:28] *** Joins: frost (~frost@user/frost)
[06:43:43] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[06:48:39] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[06:56:49] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac) (Remote host closed the connection)
[07:02:20] *** Joins: Leonard (~Administr@114.55.127.80)
[07:03:17] *** Quits: roadt_ (~roadt@36.5.93.21) (Ping timeout: 240 seconds)
[07:03:41] *** Quits: Speakz (speakz@rfc1459.evilnet.org) (Ping timeout: 256 seconds)
[07:04:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[07:04:20] *** Joins: roadt_ (~roadt@36.5.93.21)
[07:05:58] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[07:11:04] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[07:11:08] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[07:15:03] *** Quits: constxo (~brad@142.134.38.68) (Quit: WeeChat 2.8)
[07:16:14] *** Parts: donald1 (~donald@2a01:e0a:95e:7ca0:40c8:8234:c070:6844) ()
[07:30:19] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[07:30:45] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[07:34:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:41:11] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:43:01] *** Joins: Leonard (~Administr@114.55.127.80)
[07:43:28] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:44:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[07:44:37] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[07:45:45] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:49:24] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:49:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:50:21] <Alipha> Xardas: c++ is such a complex language. I would strongly recommend getting a book to learn from. It's not really possible to learn from references.
[07:50:29] <Alipha> !give Xardas books
[07:50:32] <nolyc> Xardas: A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[07:50:43] *** Quits: rgrinberg (~textual@177.246.216.115) (Ping timeout: 256 seconds)
[07:50:56] *** Quits: powerLien (~powerLien@2a0d:5600:6:34::4d) (Quit: Client closed)
[07:52:36] <Xardas> I'm actually skimming through it, it is pretty complex i have to admit
[07:52:42] <Xardas> Alipha which book did you read ?
[07:53:43] <lockywolf> If I have an object of type A, which is auto-inferred, how can I create an object of the same type using its default constructor?
[07:54:23] <lockywolf> Like, I can write auto b = a to create a copy, but I would like to use the default constructor, not a copy constructor.
[07:57:22] <leduyquang753> That's not what `auto` does.
[07:57:38] <leduyquang753> You can write `decltype(a) b;`.
[07:57:51] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[07:58:08] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:58:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:59:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:59:58] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[08:00:01] *** Joins: hinata (~hinata@2409:4042:d1c:87d7:40bc:6e36:751e:ba7b)
[08:03:34] <Alipha> Xardas: I'd recommend one of the first two books (the beginner books) on that list. I learned c++ first back in the 2000's, so I don't have a relevant suggestion from my personal experience
[08:05:11] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[08:07:21] <Xardas> Alipha : Thank you for your kind advice.
[08:07:57] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 240 seconds)
[08:08:33] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[08:09:23] *** Joins: mixfix41 (~homefame@user/mixfix41)
[08:10:57] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[08:12:22] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[08:12:37] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[08:13:59] <spidermonkey54> ```template <typename T> void f(T i){}``` if I do a f(5), what would be T deduced to? int? is it based the `Integer literal` table present in this page? https://en.cppreference.com/w/cpp/language/integer_literal
[08:22:18] *** Joins: Leonard (~Administr@114.55.127.80)
[08:24:43] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[08:24:55] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[08:26:07] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:26:52] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[08:28:37] *** Joins: rgrinberg (~textual@177.246.216.115)
[08:30:04] *** Quits: emerent (~quassel@p200300cd5724fde6ba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[08:32:05] *** Joins: emerent (~quassel@p200300cd5724fde6ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:35:51] *** Joins: HvszrStykp (~X@81.171.62.86)
[08:38:51] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[08:41:19] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community @ https://indiedevs.net/)
[08:42:17] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[08:47:10] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[08:47:30] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:49:12] *** Joins: malloy (~jimery@116.30.220.175)
[08:52:29] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[08:53:21] <leduyquang753> Yes it's `int`.
[08:55:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[08:55:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[08:57:26] *** Joins: Leonard (~Administr@114.55.127.80)
[08:59:43] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[09:03:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[09:03:30] *** Joins: NiD27 (~nid27@49.205.144.26)
[09:06:05] *** Joins: foozle (~foozle@2001-b011-c040-16bf-37f3-5063-e900-f5a9.dynamic-ip6.hinet.net)
[09:06:54] *** Joins: Atque (~Atque@user/atque)
[09:08:44] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[09:08:51] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[09:19:21] *** Joins: Leonard (~Administr@114.55.127.80)
[09:21:01] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:21:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[09:31:52] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[09:34:57] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[09:37:45] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[09:38:09] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[09:40:20] *** Joins: Leonard (~Administr@114.55.127.80)
[09:40:38] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:47] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:47] *** ChanServ sets mode: +v npaperbot
[09:41:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[09:42:08] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[09:42:57] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[09:51:49] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 240 seconds)
[09:58:45] *** Quits: rgrinberg (~textual@177.246.216.115) (Read error: Connection reset by peer)
[10:00:16] *** Joins: rgrinberg (~textual@177.246.218.93)
[10:05:09] *** Joins: the_lanetly_052_ (~the_lanet@194.135.167.186)
[10:06:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[10:09:02] *** Quits: NiD27 (~nid27@49.205.144.26) (Quit: Leaving)
[10:09:59] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[10:15:53] *** Joins: supernova (~quassel@2405:9800:ba11:6207:76f3:c4cc:debc:f604)
[10:19:39] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:20:44] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[10:33:21] *** Quits: rgrinberg (~textual@177.246.218.93) (Read error: Connection reset by peer)
[10:34:19] *** Joins: rgrinberg (~textual@177.246.218.93)
[10:35:45] <lockywolf> leduyquang753, thank you, seems to work
[10:40:20] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[10:41:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:41:59] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[10:43:15] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[10:44:33] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[10:49:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:58:00] *** Joins: HvszrStykp (~X@81.171.62.86)
[10:58:26] *** Quits: rgrinberg (~textual@177.246.218.93) (Read error: Connection reset by peer)
[11:01:17] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[11:02:05] *** Quits: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:03:26] *** Joins: rendar (~rendar@user/rendar)
[11:04:00] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[11:07:41] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:09:41] *** Joins: namo (~nomo@95.87.208.95)
[11:10:35] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[11:11:51] *** Joins: evelyette (~Eleanor@178.79.105.181)
[11:12:01] *** Joins: Xardas (~Xardas@149.233.51.127)
[11:12:09] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[11:12:24] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:13:36] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[11:15:18] <ville> Xardas: there's really no substitute to just programming and banging out code. and probably accepting that it's going to suck for some _years_
[11:16:05] *** Joins: Leonard (~Administr@114.55.127.80)
[11:17:10] <ville> the code that you produce that is. you can of course be having the time of your life
[11:18:33] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[11:18:41] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[11:27:25] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[11:27:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[11:32:58] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[11:35:34] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[11:39:50] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[11:42:14] *** Joins: EdFletcher (~PKD@user/edfletcher)
[11:42:43] *** Joins: Leonard (~Administr@114.55.127.80)
[11:43:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[11:45:01] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[11:46:57] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:55a0:8f60:aba0:28c4)
[11:48:29] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[11:48:33] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[11:52:45] <Xardas> ville : I'm moving from java to c++ its a big leap and I feel i have no skills now hhhhhh
[11:55:31] *** Quits: foozle (~foozle@2001-b011-c040-16bf-37f3-5063-e900-f5a9.dynamic-ip6.hinet.net) (Quit: Leaving)
[12:00:38] *** Joins: aLeSD__ (~aLeSD@90.167.243.107)
[12:02:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[12:02:27] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[12:02:57] *** Quits: aLeSD_ (~aLeSD@host-95-239-36-1.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[12:03:22] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:03:48] <ville> Xardas: that's probably accurate
[12:04:33] <ville> it'd be more worrying if you claimed that because you've done java you're alright with c++
[12:06:13] *** Joins: Dave_R (~Dave_R@home.amunra.co.uk)
[12:07:05] *** Joins: Leonard (~Administr@114.55.127.80)
[12:08:29] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:55a0:8f60:aba0:28c4) (Read error: Connection reset by peer)
[12:08:57] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[12:09:19] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:55a0:8f60:aba0:28c4)
[12:09:56] *** Quits: hinata (~hinata@2409:4042:d1c:87d7:40bc:6e36:751e:ba7b) (Quit: Leaving)
[12:12:34] *** Joins: andreasbuhr (~quassel@p549dbf2a.dip0.t-ipconnect.de)
[12:12:39] *** Quits: andreasbuhr (~quassel@p549dbf2a.dip0.t-ipconnect.de) (Client Quit)
[12:19:04] <Xardas> It's all because of competitive programming
[12:19:12] <Xardas> that I made that change.
[12:19:27] *** Joins: ketiv (~ketiv@92.40.194.80.threembb.co.uk)
[12:21:06] <ville> sounds like a poor motivation or nothing that gets you good at programming in particular language
[12:22:00] <TinoDidriksen> Agreed. Competitive code is usually awful.
[12:25:56] <Xardas> Why is it a poor motivation ? :D
[12:26:20] <ville> Xardas: if the solutions to code competitions are essentially one-offs and throw-away code you don't maintain over time, then there is a chance you will miss out learning about what sort of solutions don't suck in the long run
[12:26:40] <ville> in a real-life project you would probably value solutions that don't suck in the long run more
[12:27:49] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:27:57] *** Joins: hiovoltage71 (~hiovoltag@78.186.68.182)
[12:28:25] <fiesh> I really don't know anything about competitive programming, but if the task is to get whatever solution for a problem as fast as possible, it seems C++ is not a good choice to begin with
[12:28:31] *** Quits: hiovoltage71 (~hiovoltag@78.186.68.182) (Client Quit)
[12:28:45] *** Joins: hiovoltage56 (~hiovoltag@78.186.68.182)
[12:30:47] <Xardas> Performance is also evaluated.
[12:32:14] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[12:32:14] <fiesh> so correctness and performance are evaluated, maintainability isn't?
[12:32:25] <Xardas> No, not really.
[12:33:05] <fiesh> well then C++ is the perfect language, you can make highly performant and correct garbage code :-)
[12:35:27] *** Quits: chozorho (~chozorho@2601:146:300:c30::be22) (Quit: good night)
[12:35:33] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[12:37:49] *** hiovoltage56 is now known as hiovoltage
[12:38:35] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:41:13] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:41:21] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[12:41:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[12:43:57] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[12:44:37] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:cd8d:9b19:2534:65f0) (Ping timeout: 240 seconds)
[12:44:41] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[12:46:22] *** Joins: Leonard (~Administr@114.55.127.80)
[12:48:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[12:49:25] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:55a0:8f60:aba0:28c4) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:51:54] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[12:52:30] <ketiv> CD/j #c
[12:52:35] <ketiv> :-)
[12:52:42] <ketiv> sorry pals
[12:56:30] *** Joins: stonkey (~stonkey@user/stonkey)
[12:57:51] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:58:25] *** Joins: hinata (~hinata@2409:4042:d1c:87d7:40bc:6e36:751e:ba7b)
[13:01:17] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (Ping timeout: 240 seconds)
[13:03:29] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[13:06:55] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[13:09:15] *** Joins: Guest34 (~textual@2601:600:a27f:d92d:f82c:c2d7:e03b:c931)
[13:09:32] *** Quits: ketiv (~ketiv@92.40.194.80.threembb.co.uk) (Quit: WeeChat 3.3)
[13:09:38] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[13:11:34] *** Joins: plastico (~plastico@neomutt/plastico)
[13:16:30] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[13:16:35] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:21:24] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:24:13] *** Quits: AmR (~AmREiSa@156.199.28.131) (Quit: Konversation terminated!)
[13:25:34] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[13:28:26] *** Quits: Guest34 (~textual@2601:600:a27f:d92d:f82c:c2d7:e03b:c931) (Quit: Textual IRC Client: www.textualapp.com)
[13:30:46] *** Joins: anandn (~anandn@2601:600:a27f:d92d:f82c:c2d7:e03b:c931)
[13:35:41] *** Joins: Leonard (~Administr@114.55.127.80)
[13:36:14] *** Quits: malloy (~jimery@116.30.220.175) (Quit: WeeChat 3.0)
[13:38:31] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[13:40:27] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:40:38] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:50] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:50] *** ChanServ sets mode: +v npaperbot
[13:44:12] *** Quits: anandn (~anandn@2601:600:a27f:d92d:f82c:c2d7:e03b:c931) (Quit: Textual IRC Client: www.textualapp.com)
[13:44:15] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:acd5:fce0:a19c:de74) (Ping timeout: 268 seconds)
[13:44:43] *** Joins: zen_coder (~zen_coder@ip5f5bd770.dynamic.kabel-deutschland.de)
[13:44:54] *** Joins: anandn (~anandn@2601:600:a27f:d92d:f82c:c2d7:e03b:c931)
[13:47:14] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:4d91:c1e4:f48:338) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[13:47:41] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[14:02:47] *** Quits: aLeSD__ (~aLeSD@90.167.243.107) (Remote host closed the connection)
[14:05:59] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[14:06:01] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[14:10:05] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[14:12:57] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[14:19:06] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[14:20:37] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[14:22:34] *** Quits: Soliton (~Soliton@wesnoth/developer/soliton) (Quit: Battle for Wesnoth: https://www.wesnoth.org/)
[14:22:50] *** Joins: Soliton (~Soliton@wesnoth/developer/soliton)
[14:23:32] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[14:26:49] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[14:27:42] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[14:29:37] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[14:32:18] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[14:32:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[14:40:02] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:41:45] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[14:42:11] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[14:42:40] *** LordKalma_ is now known as LordKalma
[14:42:57] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 240 seconds)
[14:43:29] *** Joins: Leonard (~Administr@114.55.127.80)
[14:45:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[14:51:57] *** Quits: supernova (~quassel@2405:9800:ba11:6207:76f3:c4cc:debc:f604) (Ping timeout: 240 seconds)
[14:53:53] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:54:58] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[14:56:21] *** Joins: mad_enz (~mad_enz@2605:8d80:681:dda0:ab90:af52:d0b2:1539)
[15:02:38] *** Joins: Major_Biscuit (~MajorBisc@c-001-029-007.client.tudelft.eduvpn.nl)
[15:02:56] *** Quits: hinata (~hinata@2409:4042:d1c:87d7:40bc:6e36:751e:ba7b) (Quit: Leaving)
[15:03:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[15:04:32] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[15:05:37] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 240 seconds)
[15:08:03] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[15:10:57] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[15:13:24] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:17:07] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[15:27:27] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[15:28:08] *** Joins: unknow (~i.am@user/marlboro)
[15:30:38] *** Joins: hinata (~hinata@2409:4042:d1c:87d7:40bc:6e36:751e:ba7b)
[15:33:17] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[15:33:36] *** Joins: adlternative (~adl@117.32.216.13)
[15:34:25] *** Quits: adlternative (~adl@117.32.216.13) (Client Quit)
[15:35:11] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[15:36:15] *** Joins: kit-ten (~u0_a391@2600:380:a420:9b:42e7:36e8:b201:ddbc)
[15:39:37] *** Quits: kit (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 240 seconds)
[15:40:36] *** kit-ten is now known as kit
[15:43:47] *** Joins: rah (rah@verain.settrans.net)
[15:45:27] <rah> (how) can I declare a double pointer that can be assigned a pointer to both a pointer to const and a pointer to non-const?
[15:45:30] <rah> https://wandbox.org/permlink/LRo32obs4TxAjX9g
[15:46:03] <rah> prog.cc:6:8: error: invalid conversion from 'int**' to 'const int**' [-fpermissive]
[15:46:35] <traxex> const int * const * pp;
[15:46:57] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[15:47:43] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[15:48:24] <rah> argh!
[15:48:33] <rah> I swear I tried that and it complained
[15:48:37] <rah> thanks
[15:48:42] *** Joins: Miyu (~hackkitte@94.31.103.136)
[15:49:39] <rah> hmm, that doesn't seem to do what I want
[15:50:48] <traxex> https://stackoverflow.com/a/16390371 explains why the conversion is not valid
[15:51:31] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[15:52:05] <PJBoy> also
[15:52:08] <PJBoy> !const-pointer
[15:52:09] <nolyc> https://isocpp.org/wiki/faq/const-correctness#constptrptr-conversion
[15:52:31] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Ping timeout: 268 seconds)
[15:52:41] <rah> https://wandbox.org/permlink/6Nr6ZETP5hAgTf8m
[15:52:59] <rah> I want to increment the pointer pointed to by the double pointer
[15:54:01] <traxex> even if you assign it to point to 'const int *' ?
[15:54:13] <traxex> no way except const_cast
[15:54:24] <traxex> oh sorry I misrtead
[15:54:48] <PJBoy> you want a const int** then
[15:55:00] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[15:55:25] <rah> PJBoy: then we're back to square one
[15:55:26] <rah> prog.cc:6:8: error: invalid conversion from 'int**' to 'const int**' [-fpermissive]
[15:55:45] <RandomReader> p1 and p2 are two entirely different types, they're not related
[15:55:45] <PJBoy> don't try to do that conversion then
[15:55:51] <RandomReader> so no, you can't do this, you need separate logic
[15:56:01] <RandomReader> if this is in function form, perhaps a template would be useful
[15:56:13] <RandomReader> well, in function form and truly meant to be generic
[15:56:35] <RandomReader> if it's not generic, then there's a probably a design issue before this point
[15:56:42] <PJBoy> if you p2 were a const int*, then your const int** would work and make sense
[15:57:35] <PJBoy> if you have an int*, then you need an int** for pp
[15:58:35] <PJBoy> (or use auto and let the compiler figure it out)
[15:59:31] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[15:59:40] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[16:00:57] *** Miyu is now known as hackkitten
[16:01:57] *** Quits: mad_enz (~mad_enz@2605:8d80:681:dda0:ab90:af52:d0b2:1539) (Ping timeout: 240 seconds)
[16:05:06] <RandomReader> if it helps, with different syntax, you're trying to express ptr<ptr<int>> and ptr<ptr<const int>> which are as different as ptr<string> and ptr<double>
[16:06:05] <RandomReader> const can be added at different layers to promise not to modify one part of that, but anything you do modify must directly match
[16:07:22] *** Joins: Leonard (~Administr@114.55.127.80)
[16:07:56] <leduyquang753> Multi-level pointer conversions have additional restrictions: https://en.cppreference.com/w/cpp/language/implicit_conversion#Qualification_conversions
[16:09:24] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[16:15:22] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[16:15:30] *** Quits: anandn (~anandn@2601:600:a27f:d92d:f82c:c2d7:e03b:c931) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:18:25] *** Joins: neure (~TimoSuora@dzpy-bwkyyyyyyyyyyyyt-3.rev.dnainternet.fi)
[16:19:26] <neure> Can someone help me understand why my type is not MoveInsertable? https://wandbox.org/permlink/36duOvLh1z13a5wc#wandbox-resultwindow-code-body-permlink
[16:20:40] <neure> I have move constructor and move assignment, yet clang complains The specified type does not meet the requirements of Cpp17MoveInsertable
[16:21:21] <ville> neure: strip the testcase down
[16:22:01] <neure> ok i'll try
[16:22:02] <anyone> call to implicitly-deleted copy constructor of 'Key_binding'
[16:22:04] <anyone> read the error?
[16:22:21] <PJBoy> that error only occurs because the class isn't move insertable
[16:22:28] <PJBoy> only ever read the first error
[16:23:16] <anyone> that is the first error - on gcc anyway ;)
[16:23:33] <anyone> (where it's "error: use of deleted function 'Key_binding& Key_binding::operator=(const Key_binding&)'
[16:23:58] <PJBoy> vector likes to copy when it can't move
[16:24:07] <PJBoy> so I guess GCC only cares about the worst case operation
[16:29:19] <neure> stripped down: https://wandbox.org/permlink/HaOm1tuOBW5syiS8
[16:30:10] <neure> I know the copy constructor is deleted; shouldn't it be sufficient that I have move constructor and move assignment?
[16:30:12] <PJBoy> much better
[16:30:26] <RandomReader> neure - in the original, you didn't follow Rule of 5
[16:30:49] <RandomReader> (specifically, you declared a destructor in Key_binding, which suppresses auto-generation of other members)
[16:31:22] <neure> so what was it missing?
[16:31:23] <PJBoy> it's complaining about Foo not being default constructible
[16:31:27] *** Quits: Tempesta (Tempesta@user/tempesta) (Quit: See ya!)
[16:31:40] <neure> okay right that makes sense
[16:31:47] <RandomReader> missing in the original? no move assignment
[16:32:17] <PJBoy> there was move assignment in the OG
[16:32:23] <RandomReader> not in Key_binding
[16:32:43] <PJBoy> does that not get the implicit move ctor? :/
[16:32:44] <traxex> I think you could even remove Unique_int and use plain 'int' for a minimal version
[16:32:55] <RandomReader> user-declared destructor, suppresses implicit
[16:32:58] <RandomReader> like I said, Rule of 5 :)
[16:33:04] <PJBoy> is that user declared? :/
[16:33:24] <RandomReader> ~Key_binding() override;   is very much a declaration
[16:33:39] <PJBoy> blurgh
[16:33:47] <RandomReader> (it's probably not wanted, I can't tell from the cut-down case there)
[16:34:02] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[16:34:02] <PJBoy> I didn't see a body so somehow assumed it was a `= default` type deal
[16:34:17] <PJBoy> that's what happens with big ugly test cases ^^;
[16:35:14] <neure> Annoying that I need to keep defining move when I have a member that is not copyable
[16:35:43] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[16:35:59] <RandomReader> you can =default it for Key_binding, you just can't leave it out entirely
[16:36:18] <neure> but it is not sufficient to do that in the base class?
[16:36:21] *** Joins: Tempesta (~Tempesta@user/tempesta)
[16:36:33] <RandomReader> but that also serves as clear documentation about what's supposed to happen, and sometimes enables early warnings when these things don't match
[16:36:43] <RandomReader> it's not inherited, if that's the question
[16:36:57] <RandomReader> (it can't be, it's an entirely different type)
[16:36:57] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[16:37:33] <neure> Having non-copyable member in base class causes need to have these in all derived classes?
[16:37:44] <RandomReader> no
[16:37:54] <RandomReader> inheritance has nothing to do with this
[16:38:46] <RandomReader> the issue is that you declared a destructor in Key_binding, and nothing else .. meaning there's some kind of special behavior for this type, and so the compiler isn't going to assume it has any reasonable idea what a default move etc should look like
[16:39:17] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[16:39:21] <RandomReader> which is what Rule of 5 is about: if you're going to declare any of the special behavior member functions, declare all of them, so it's clear to both compiler and user what should happen
[16:39:31] <RandomReader> even if that's just =default for some of them
[16:40:03] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[16:40:09] <neure> I only added those destructors because I think compiler complained that I had virtual methods but no virtual destructor
[16:40:19] <neure> let me see if I can take those out
[16:41:02] <RandomReader> the base would need one, the rest don't, the virtual part will be inherited by the compiler-generated ones
[16:41:26] <RandomReader> and if you don't have anything special to do, it can still be a default:   virtual ~Command_binding() = default;
[16:41:26] <neure> ah that was my mistake then
[16:41:50] <RandomReader> it's just the virtual part that needs to be established in the base/root
[16:41:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[16:42:11] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:43:16] <RandomReader> here's the Rule Of thing I keep mentioning, if that's not clear: https://en.cppreference.com/w/cpp/language/rule_of_three
[16:43:42] <RandomReader> and even shows a base with a virtual destructor, when there's really nothing else to customize
[16:46:35] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Quit: Leaving)
[16:46:39] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[16:50:48] *** Joins: NEYi (~NEYi@109.251.216.38)
[16:54:38] *** Joins: magla (~gelignite@55d457f6.access.ecotel.net)
[16:54:49] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:54:50] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[16:55:04] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[16:56:49] *** Joins: llh (~llh@user/llh)
[16:57:00] *** Quits: daswf852 (~daswf852@user/daswf852) (Ping timeout: 256 seconds)
[17:00:26] *** Joins: daswf852 (~daswf852@user/daswf852)
[17:01:20] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:01:34] *** Quits: hinata (~hinata@2409:4042:d1c:87d7:40bc:6e36:751e:ba7b) (Quit: Leaving)
[17:01:43] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[17:05:28] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:05:57] *** Quits: daswf852 (~daswf852@user/daswf852) (Ping timeout: 240 seconds)
[17:06:01] *** Joins: Leonard (~Administr@114.55.127.80)
[17:07:26] <spidermonkey54> Sorry if I'm repeating this question. What is the default type of `integer literals` passed to templates? is it based the table on this page? https://en.cppreference.com/w/cpp/language/integer_literal
[17:08:13] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[17:09:05] <PJBoy> it is, yeah
[17:09:15] <PJBoy> templates have no bearing on this of course
[17:09:35] *** Joins: irrenhaus3 (~xenon@HSI-KBW-046-005-002-128.hsi8.kabel-badenwuerttemberg.de)
[17:10:11] <PJBoy> << TYPE(0x7FFF'FFFF), TYPE(0xFFFF'FFFF), TYPE(0x1'0000'0000)
[17:10:12] <geordi> prvalue int, prvalue unsigned int, prvalue long int
[17:10:26] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[17:10:58] *** Joins: daswf852 (~daswf852@user/daswf852)
[17:11:27] <PJBoy> still weird that decimal literals can't be unsigned
[17:11:38] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[17:12:41] <irrenhaus3> << TYPE(42u)
[17:12:42] <geordi> prvalue unsigned int
[17:12:47] <irrenhaus3> sure they can ;-)
[17:14:33] *** Joins: seninha (~seninha@user/seninha)
[17:17:59] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[17:22:57] *** Joins: lockywolf_ (~lockywolf@46.23.90.177)
[17:23:02] *** Quits: lockywolf (~lockywolf@2a03:6000:6f63:638::177) (Ping timeout: 240 seconds)
[17:23:46] *** Joins: pulse (~pulse@user/pulse)
[17:27:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[17:33:39] *** Quits: phoenix1 (phoenix@user/phoenix) (Ping timeout: 268 seconds)
[17:35:37] *** Quits: traxex (traxex@user/traxex) (Ping timeout: 240 seconds)
[17:36:38] *** Joins: phoenix1 (~phoenix@user/phoenix)
[17:36:40] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[17:39:37] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[17:40:38] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:46] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:46] *** ChanServ sets mode: +v npaperbot
[17:42:49] *** Joins: xkuru (~xkuru@user/xkuru)
[17:47:05] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[17:47:10] *** Quits: Nixx (~quassel@bulbasaur.sjorsgielen.nl) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[17:50:17] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[17:50:34] *** Quits: cation (cation@user/cation) (Ping timeout: 260 seconds)
[17:52:06] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[17:52:21] *** Joins: cation (cation@user/cation)
[17:52:30] *** Joins: Schrostfutz (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[17:52:53] <Schrostfutz> Hi, I want to have the first and last value of an inputstream, I'm not really interested in the rest. Is there a nice way to do this?
[17:54:36] <Oxyd> Sure. Read all the values and keep only the first and last.
[17:59:03] *** Joins: traxex (traxex@user/traxex)
[17:59:18] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:59:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[18:01:59] *** Joins: Leonard (~Administr@114.55.127.80)
[18:04:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[18:08:24] *** Quits: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi) (Ping timeout: 256 seconds)
[18:09:35] *** Joins: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi)
[18:12:19] <pa> is it ok to erase elements of a map or unordered_map within a loop iterating the map itself?
[18:15:33] <irrenhaus3> pa: yes. maps are associative containers, so only the iterators to the erased elements are invalidated; you can keep iterating over the rest just fine
[18:15:43] <Eelis> pa: yeah but if you erase an element, you gotta do i=m.erase(i) instead of i++
[18:15:54] *** Joins: Nixx (~quassel@bulbasaur.sjorsgielen.nl)
[18:16:04] <irrenhaus3> oh yeah, that too
[18:16:36] <pa> Eelis: can't i do for (auto i=map.begin(); i != map.end(); ++i) map.erase(i->first) ?
[18:17:09] <Eelis> pa: no, because then you're incrementing i after removing the element it refers to, which is not allowed
[18:17:15] <Eelis> because removing the element invalidates the iterator
[18:17:16] <pa> ah i see, thanks
[18:22:37] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:23:32] *** Quits: magla (~gelignite@55d457f6.access.ecotel.net) (Quit: Stay safe!)
[18:24:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[18:26:57] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:28:00] <barometz> I just noticed that the noexcept specifications for move assignment are different between deque and vector. Where would I look to find out why that is?
[18:30:59] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[18:33:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:193a:8038:cdb2:3b71)
[18:33:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:193a:8038:cdb2:3b71) (Changing host)
[18:33:13] *** Joins: skapata (~Skapata@user/skapata)
[18:33:23] *** Quits: lockywolf_ (~lockywolf@46.23.90.177) (Quit: ZNC 1.8.2 - https://znc.in)
[18:35:16] *** Joins: constxd (~brad@142.134.38.68)
[18:36:18] <PJBoy> [N4258]
[18:36:18] <npaperbot> N4258: [Library] Cleaning up noexcept in the Library (Rev 3) <https://wg21.link/n4258> (by Nicolai Josuttis) (2014-11-07)
[18:36:54] *** Joins: lockywolf (~lockywolf@46.23.90.177)
[18:37:23] <barometz> awesome, thanks.
[18:39:15] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[18:39:33] *** Joins: Viewday116 (~Viewday@user/viewday)
[18:39:39] <PJBoy> not sure if it will have the answers you're looking for
[18:40:17] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:40:42] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:40:42] *** Viewday116 is now known as Viewday11
[18:41:09] <barometz> Seems like it does, page 4. Having some trouble grokking it but that's probably because I've spent all day staring at my own STL-like container and need some fresh air.
[18:41:26] <PJBoy> cool
[18:43:12] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[18:43:19] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[18:43:32] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[18:43:35] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[18:44:02] *** Joins: Teth (~kvirc@cpe-71-79-34-84.cinci.res.rr.com)
[18:44:03] *** Quits: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net) (Read error: Connection reset by peer)
[18:44:14] *** Joins: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net)
[18:45:22] <jancoow> Mhh; I want to pass my member function to another class; but i'm unable to do so: ISO C++ forbids taking the address of an unqualified or parenthesized non-static member function to form a pointer to member function.  Say '&task::SystemManagerBase::selfTest' [-fpermissive]
[18:45:28] <jancoow> Any other way to accomplish this
[18:47:06] *** Joins: jkaye (~jkaye@2601:281:8300:7530:960c:6e00:5eeb:eb5a)
[18:47:21] *** Quits: Teth|3 (~kvirc@cpe-71-79-34-84.cinci.res.rr.com) (Ping timeout: 256 seconds)
[18:47:51] <Schrostfutz> jancoow: If you want to pass a pointer to the member function you need to use either `std::bind(C::f, this)`, or `[this]() { f(); }`
[18:47:55] *** Quits: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net) (Remote host closed the connection)
[18:48:19] <jancoow> Schrostfutz can you give me an example ?
[18:50:32] <CarloWood> I have the following problem: I want the constructor of a base class to do all initialization, so that I can add members to that class that need the initialization of the member above them to be finished before they themselves are constructed. However, that initialization will depend on virtual functions of the derived class...
[18:50:37] <CarloWood> { B b; } struct A { A() { f(); } virtual void f() { cout << "A::f"; } }; struct B : A { void f() { cout << "B::f"; } };
[18:50:38] <geordi> A::f
[18:51:07] <CarloWood> And at the moment of calling A(), the constructor of the base class, those virtual functions can't be called yet? :/
[18:51:46] *** Quits: lockywolf (~lockywolf@46.23.90.177) (Quit: ZNC 1.8.2 - https://znc.in)
[18:52:40] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[18:52:40] *** Quits: Schrostfutz (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Read error: Connection reset by peer)
[18:53:44] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[18:53:59] <T`alZHeimeR> ofc not
[18:54:05] *** Joins: pulse (~pulse@user/pulse)
[18:54:10] <Schrostfutz_> jancoow: In your case it'd be either `std::bind(&task::SystemManagerBase::selfTest, this)`, or `[this]() { selfTest(); }`. Both won't be a function pointer, but a functor/callable object.
[18:54:42] *** Joins: lockywolf (~lockywolf@2a03:6000:6f63:638::177)
[18:55:59] <jancoow> Schrostfutz_ mhh, "bind is not a member of std"
[18:56:55] <jancoow> oh nvm
[18:56:59] <jancoow> mistyped the import
[18:57:20] *** Parts: rah (rah@verain.settrans.net) ()
[18:57:52] <jancoow> what should the returned type be?
[18:58:45] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c993:298f:5351:f526) (Ping timeout: 268 seconds)
[18:59:18] <jancoow> std::function<bool()> selfTest; I gues?
[19:01:03] *** Joins: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net)
[19:02:16] <elb0w> General question, recently we upgraded from c++ 14 -> 17 seeing a pretty spike in memory accross everything built. I am wondering if this is expected? I was thinking maybe it has to do w/string changes? I am still investigating, but thought I would ask. Thanks!
[19:02:33] *** Quits: lockywolf (~lockywolf@2a03:6000:6f63:638::177) (Remote host closed the connection)
[19:04:13] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[19:05:10] *** Joins: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net)
[19:05:39] *** Joins: lockywolf (~lockywolf@2a03:6000:6f63:638::177)
[19:05:41] *** Quits: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net) (Client Quit)
[19:05:51] *** Joins: Leonard (~Administr@114.55.127.80)
[19:05:58] *** Joins: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net)
[19:07:01] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[19:07:17] *** Quits: zen_coder (~zen_coder@ip5f5bd770.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[19:07:54] <Schrostfutz_> jancoow: yeah, something like that. But you should prefer auto I suppose: `const auto testCallback = std::bind(...);`
[19:08:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[19:09:39] *** Quits: lockywolf (~lockywolf@2a03:6000:6f63:638::177) (Remote host closed the connection)
[19:10:50] *** Quits: sam113101 (~sam@modemcable229.128-202-24.mc.videotron.ca) (Ping timeout: 260 seconds)
[19:11:06] *** Joins: lockywolf (~lockywolf@46.23.90.177)
[19:11:57] *** Quits: lockywolf (~lockywolf@46.23.90.177) (Remote host closed the connection)
[19:15:42] *** Joins: lockywolf (~lockywolf@46.23.90.177)
[19:15:54] <CarloWood> elb0w: I don't understand the phrase "seeing a spike in memory [accross]". Doesn't seem proper English :/
[19:16:10] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[19:16:21] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:17:15] *** Joins: sam113101 (~sam@modemcable229.128-202-24.mc.videotron.ca)
[19:17:18] <CarloWood> I suppose you mean 'memory usage', but then still 'spike' seems weird. Something is using very shortly more memory? Your applications? The compiler?
[19:18:24] *** Quits: neure (~TimoSuora@dzpy-bwkyyyyyyyyyyyyt-3.rev.dnainternet.fi) (Quit: Leaving)
[19:19:39] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[19:21:29] <jancoow> Schrostfutz_ I have to define it as variable so need to know it beforehand :)
[19:21:48] <jancoow> anyway it does compile so :D
[19:21:54] <Schrostfutz_> jancoow: Great :)
[19:22:00] <jancoow> thanks!
[19:25:40] <elb0w> sorry, in general memory usage is consistently higher in all compiled code with the updated version
[19:26:31] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:acd5:fce0:a19c:de74)
[19:26:50] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[19:29:45] *** Joins: netpipe (~netpipe@user/netpipe)
[19:30:47] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:32:23] *** Quits: lockywolf (~lockywolf@46.23.90.177) (Quit: ZNC 1.8.2 - https://znc.in)
[19:33:26] *** Joins: sedeki (~textual@user/sedeki)
[19:33:32] *** Quits: netpipe (~netpipe@user/netpipe) (Client Quit)
[19:35:31] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[19:35:31] *** Joins: lockywolf (~lockywolf@46.23.90.177)
[19:36:41] <PJBoy> larger stdlib maybe
[19:37:35] *** Joins: Leonard (~Administr@114.55.127.80)
[19:37:38] <kit> idea: header only stdlib
[19:37:51] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[19:38:24] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:39:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[19:40:18] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[19:40:18] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[19:41:02] *** Quits: jkaye (~jkaye@2601:281:8300:7530:960c:6e00:5eeb:eb5a) (Ping timeout: 240 seconds)
[19:42:06] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[19:42:14] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:43:32] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:44:43] *** Joins: chozorho (~chozorho@2601:146:300:c30::d5ec)
[19:45:49] <pa> is there a way to tell the index of an element in an unordered_map, like if i would be iterating it ?
[19:46:04] <pa> in other words, the number of elements less than x ?
[19:46:25] <pa> i remember i wrote an extension of a bst, that could do that in O(1)
[19:46:35] <Eelis> not efficiently. for an inefficient way, you can use std::distance(m.begin(), i)
[19:46:36] <pa> but that was a tree, and plus it was not std::
[19:46:57] <pa> Eelis: thanks. How inefficient is that? O(n)?
[19:47:03] <Eelis> yes
[19:47:10] <pa> gotcha, thanks
[19:47:37] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:48:57] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[19:49:09] *** Joins: rah (rah@verain.settrans.net)
[19:49:15] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:49:30] <rah> does override imply that the overriding function is itself virtual?
[19:49:40] <rah> I'm finding conflicting information on the web
[19:50:02] <Eelis> yes
[19:50:42] *** Joins: jkaye (~jkaye@2601:281:8300:7530:89aa:29d4:1f39:3e9)
[19:50:59] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:51:00] <pa> Eelis: at a second thought, i think i'd be fine with a set (or unordered_set). Is there a structure that can do ::distance faster than O(n)?
[19:51:21] <Eelis> pa: containers with random access iterators can do distance in O(1)
[19:51:42] <Eelis> (but set and unordered_set are not containers with random access iterators)
[19:51:47] <pa> i need to also do quick find(), insert and erase ..
[19:52:11] <Eelis> can't always get what you want
[19:52:31] *** Quits: evelyette (~Eleanor@178.79.105.181) (Ping timeout: 256 seconds)
[19:52:31] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Read error: Connection reset by peer)
[19:52:37] <pa> true, but in this case, with a tree structure, it would be possible (to get faster than O(n) for all of these
[19:52:56] *** Joins: evelyette (~Eleanor@178.79.105.181)
[19:53:09] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[19:53:24] <Eelis> you're free to implement your own tree data structure that makes whatever trade-offs you desire
[19:53:27] <CarloWood> Do you have a lot of elements in your container?
[19:53:45] <pa> CarloWood: potentially yea, like on the 10-100k range
[19:54:37] *** Joins: the_lanetly_052 (~the_lanet@185.30.89.77)
[19:55:57] *** Quits: the_lanetly_052_ (~the_lanet@194.135.167.186) (Ping timeout: 240 seconds)
[19:56:00] <CarloWood> Do you need distance more often than erase and insert?
[19:56:07] <kalven> boost has a ranked tree that can do distance in log(n)
[19:57:22] <BurumaSerafuku> :)
[19:57:38] <pa> basically i need to update a list of elements by id (!= index). So my idea is to order the list in the same order the elements would have inside a set. meaning that i would need to call distance for insertion, deletion, and update
[19:57:52] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[19:58:26] <pa> you may suggest to use a map, the problem is that these elements are currently stored into a vector, and can be used *also* without an id
[19:58:41] <pa> so in other words i can't change that structure
[19:59:12] <pa> kalven: will look into that thanks
[19:59:15] <sedeki> the "same order" the elements would have inside a std::set?
[19:59:20] <CarloWood> You need to insert and delete them in the vector too?
[19:59:43] <PJBoy> vector?
[19:59:49] <PJBoy> oh
[20:00:39] <pa> CarloWood: well yes, basically my idea is to mirror the elements into a set, to do efficient search
[20:00:51] <pa> not the elements actually, but just the id
[20:01:07] *** Parts: rah (rah@verain.settrans.net) ()
[20:01:25] <CarloWood> So you will keep the vector? That sounds horrendous inefficient when inserting etc.
[20:02:06] <sedeki> CarloWood why is a vector inefficient for inserting?
[20:02:22] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[20:02:39] <CarloWood> Because on average you'll need to move half the of vector in memory every insert and erase.
[20:02:49] <cbreak> sedeki: a vector is efficient if you insert at the end. Anywhere else, it has to make room by shifting stuff
[20:03:32] <sedeki> right. i thought the vector here were only inserted into at the end
[20:04:01] <sedeki> pa i don't understand why you want to optimize lookup with that set<id> but also optimize lookup in the vector
[20:04:13] <pa> i think i'm ok with penalizing individual inserts over updates
[20:04:42] <pa> can't have everything
[20:05:16] *** Joins: supernova (~quassel@2405:9800:ba11:6207:e5ae:ae10:254d:e7eb)
[20:06:00] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:06:22] <sedeki> pa how are the elements used/looked up without an id? does it have an order too?
[20:06:24] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:06:57] <pa> the order in the vector doesn't especially matter, no, they are points
[20:07:12] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[20:07:37] <pa> so std::lower_bound is log(n) on sets, right?
[20:07:53] <pa> i wonder if i can exploit that somehow..
[20:08:12] <pa> i guess not, without storing the rank of nodes
[20:08:13] <sedeki> sets are not random access right? so no
[20:08:39] <sedeki> std::lower_bound is binary search, so log(n) by itself but you need to account for access time complexity
[20:08:48] <sedeki> an elder may correct me
[20:09:40] *** Quits: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:09:50] <PJBoy> std::lower_bound is a linear search on sets
[20:09:59] <PJBoy> don't use it
[20:10:39] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[20:10:43] <pa> hmm.. that sounds.. broken?
[20:11:13] <PJBoy> sets have their own lower_bound member function
[20:11:32] <sedeki> https://en.cppreference.com/w/cpp/container/set/lower_bound
[20:11:51] <sedeki> ah.
[20:12:06] *** Joins: smach (~savio@177.12.48.44)
[20:12:33] <sedeki> PJBoy why is std::lower_bound (not std::set::lower_bound) linear search on sets?
[20:12:53] <PJBoy> because set iterators aren't random access iterators
[20:13:40] <sedeki> finding a function f such that f(log(n)) = n implies that f is the exponential function
[20:13:57] <sedeki> are you saying that access is exponential in sets?
[20:14:07] <PJBoy> nope
[20:14:19] <PJBoy> see https://en.cppreference.com/w/cpp/algorithm/lower_bound#Complexity
[20:21:41] <pa> the alternative would be to keep a map index, batch removals, and update the index for a batch in O(n)
[20:22:24] <pa> actually not even sure that's possible..
[20:23:55] <pa> this would require a map able to index both ways
[20:24:55] <Eelis> you can make containers with multiple indices with boost.multi_index
[20:25:59] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[20:26:10] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[20:33:17] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Remote host closed the connection)
[20:34:43] <Schrostfutz_> I defined an operator>> for a type to read a list of values via an istream_iterator like so: `std::istream& operator>>(std::istream& is, Coord& c)`. This doesn't compile, because the compiler can't find the correct template, it lists all of the unfitting ones instead. Did I make a mistake in the signature?
[20:36:34] <anyone> { C c; cin >> c; } struct C{}; void operator>>(istream&, C&){}
[20:36:35] <geordi>  
[20:36:37] <anyone> seems to work.
[20:37:27] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[20:38:29] *** Quits: smach (~savio@177.12.48.44) (Quit: Leaving)
[20:38:31] <anyone> pa: yes, it usually means that map has to be wrapped by a custom type to implement (augment) the reverse map
[20:40:13] *** Joins: Leonard (~Administr@114.55.127.80)
[20:40:31] *** Joins: skapate (~Skapata@2804:14c:87b0:a6f9:406a:ebc:a997:9963)
[20:40:31] *** Quits: skapate (~Skapata@2804:14c:87b0:a6f9:406a:ebc:a997:9963) (Changing host)
[20:40:31] *** Joins: skapate (~Skapata@user/skapata)
[20:40:39] <anyone> sedeki: I don't think it goes anywhere near exponential. if a set lookup is O(log n), then even going linearly over it all makes it only as bad as n*log(n)
[20:41:58] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[20:42:02] <Eelis> anyone: no. while lookup in a set is O(log(n)), going linearly over it is O(n), not O(n*log(n))
[20:42:48] <Eelis> (because op++ on set iterators is O(1))
[20:42:57] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[20:45:02] <Schrostfutz_> anyone: Hm, you're right, I also tried producing a minimal sample, that works... I can define operators for arbitrary types, even if they are declared elsewhere, right?
[20:45:17] <anyone> Schrostfutz_: if they don't conflict, I guess yes
[20:46:00] <Eelis> Schrostfutz_: use of the operator<<s will only be convenient if they comply with the ADL requirement that they're declared in a namespace related to one of the parameter types
[20:46:02] <anyone> Eelis: I was probably thinking about some stupid access pattern, like  for (const auto &e : set) { set[e.first]++; }
[20:47:28] <Schrostfutz_> I define the operator in no namespace, directly ahead of the function that attempts to use it
[20:47:59] <anyone> it's even more prominent in other languages like perl foreach (keys %map) { $map[$_]++; } that's quite n*log(n) if I'm not mistaken
[20:49:32] <sedeki> anyone yes you're right. i was a bit too quick
[20:50:33] <Schrostfutz_> Eelis: Oh wow, that was indeed the problem! Is there a downside to defining an operator in a "foreign" namespace, if I keep it in a implementation file?
[20:52:57] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:52:57] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Read error: Connection reset by peer)
[20:53:12] <Eelis> Schrostfutz_: defining things in other people's namespaces is generally risky unless they promised they won't define their own conflicting thing in there in a future release
[20:53:40] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[20:55:53] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[20:57:24] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:58:55] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:59:16] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:00:19] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:00:50] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:00:51] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[21:01:58] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[21:06:40] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[21:08:37] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:09:49] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[21:10:45] *** Quits: Major_Biscuit (~MajorBisc@c-001-029-007.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:10:55] <kit> can you nest namespaces inside of functions inside of a namespace
[21:11:15] <kalven> no
[21:11:19] <kit> ok
[21:11:30] <CarloWood> New Years Puzzle:  construct a program where this works: using namespace N; f(); // Calls N::f().  But this doesn't (at the same place in code): N::f(); // Doesn't compile.
[21:11:54] <kit> use a macro
[21:11:59] <CarloWood> no macros
[21:12:21] <kit> make a function called f
[21:12:29] <kit> and a dummy namespace called n
[21:12:38] <kit> dont put f in the namespace
[21:12:57] <CarloWood> The comment says "Calls N::f()", so that exists.
[21:13:05] <kit> oh
[21:13:07] <kit> uh
[21:13:35] <kit> hmm
[21:14:17] *** Quits: rendar (~rendar@user/rendar) (Quit: rebooting)
[21:14:17] *** Joins: proller (~p@80.240.216.69)
[21:15:51] *** Joins: rendar (~rendar@user/rendar)
[21:17:06] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:18:01] <cbreak> { N::f(); } namespace N { void f() { BARK; } }
[21:18:02] <geordi> N::f()
[21:19:00] <cbreak> { N::f(); } namespace N { } void f() { BARK; }
[21:19:00] <geordi> error: 'f' is not a member of 'N'; did you mean 'f'?
[21:19:05] <cbreak> CarloWood: like this.
[21:19:22] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 256 seconds)
[21:19:55] <CarloWood> geordi: replace N:: with namespace N;
[21:19:55] <geordi> error: expected '=' before ';' token
[21:20:04] <CarloWood> geordi: show
[21:20:04] <geordi> { namespace N;f(); } namespace N { } void f() { BARK; }
[21:20:10] <CarloWood> sorry
[21:20:23] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[21:20:28] <CarloWood> geordi: replace namespace N;f with using namespace N; f
[21:20:29] <geordi> f()
[21:20:35] <CarloWood> geordi: show
[21:20:35] <geordi> { using namespace N; f(); } namespace N { } void f() { BARK; }
[21:20:55] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 256 seconds)
[21:21:04] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Ping timeout: 256 seconds)
[21:21:05] <CarloWood> I am afraid that isn't calling N::f() as required.
[21:21:13] <CarloWood> N::f() doesn't even exist.
[21:22:04] <cbreak> { N::f(); } namespace N { void f(int) { BARK; } } void f() { N::f(2); }
[21:22:04] <geordi> error: too few arguments to function 'void N::f(int)'
[21:22:04] <CarloWood> I'll give the answer?
[21:22:18] <cbreak> { f(); } namespace N { void f(int) { BARK; } } void f() { N::f(2); }
[21:22:19] <geordi> N::f(int)
[21:22:23] <cbreak> works.
[21:22:45] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[21:22:52] <CarloWood> I will suppose you meant:
[21:23:22] *** Quits: m0shbear (~nope@205.185.119.231) (Ping timeout: 260 seconds)
[21:23:23] <CarloWood> { using namespace N; f(); } namespace N { void f() { BARK; } } void f() { N::f(); }
[21:23:23] <geordi> error: call of overloaded 'f()' is ambiguous
[21:23:30] <CarloWood> which doesn't work :P
[21:23:44] <cbreak> no, that's not what I meant
[21:23:52] *** Joins: m0shbear (~nope@205.185.119.231)
[21:23:58] <cbreak> { using namespace N; f(); } namespace N { void f(int) { BARK; } } void f() { N::f(2); }
[21:23:58] <geordi> N::f(int)
[21:23:59] <CarloWood> You can't sneak in an int argument. And you didn't add the 'using namespace N' as required.
[21:24:37] <CarloWood> So no, still no N::f() (no arguments).
[21:24:51] <CarloWood> I'll give the answer:
[21:25:20] <anyone> sneak 0
[21:26:00] <BurumaSerafuku> sneak and peek
[21:26:26] <CarloWood> { N a; } namespace N { void f() { BARK; } } struct N { N() { using namespace N; f(); } };
[21:26:26] <geordi> error: 'struct N' redeclared as different kind of entity
[21:26:27] <BurumaSerafuku> https://baudejogos.net/jogo.php?id=2407 I never saw any game like that
[21:26:32] <CarloWood> wut
[21:27:07] <CarloWood> { M::N a; } namespace N { void f() { BARK; } } namespace M { struct N { N() { using namespace N; f(); } }; }
[21:27:07] <geordi> N::f()
[21:27:30] <CarloWood> geordi: replace using namespace N; f(); with N::f();
[21:27:31] <geordi> error: 'f' is not a member of 'M::N'
[21:27:38] <CarloWood> So there :)
[21:28:50] <CarloWood> The trick is that a 'using namespace N' only looks for namespaces and no for a class N in that scope, while a 'N::f()' thinks N is a class when that exists.
[21:29:03] <CarloWood> s/and no/and not/
[21:30:11] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Quit: nurupo.ga)
[21:30:25] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[21:33:07] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[21:33:56] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[21:34:04] <CarloWood> Ok, I got a question... If I do:  struct A { int a; int b; };  and then:  A a { .a = 42; };  then is a.b uninitialized?
[21:34:28] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[21:34:35] <cbreak> CarloWood: zero initialized / value initialized
[21:34:38] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[21:34:59] <cbreak> A a { 42 }; // b is 0 too
[21:35:42] <CarloWood> hmm k.  This remark in the code got me confused:
[21:35:44] <CarloWood> // Initialization data, for ImGui_ImplVulkan_Init()
[21:35:44] <CarloWood> // [Please zero-clear before use!]
[21:35:44] <CarloWood> struct ImGui_ImplVulkan_InitInfo
[21:35:53] <ville> http://www.eelis.net/c++draft/dcl.init.aggr#5.2
[21:36:06] <CarloWood> Maybe this is C code.
[21:36:16] <ville> copy-initialized technically
[21:36:49] <cbreak> I think this is the same in C
[21:36:55] <cbreak> because it'd be stupid if it wasn't this way :)
[21:37:41] <PJBoy> copy initialized??
[21:37:46] <PJBoy> that's weird
[21:37:51] <cbreak> weird ... indeed...
[21:38:03] <cbreak> did they change what A a {}; does?
[21:38:37] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:acd5:fce0:a19c:de74) (Ping timeout: 240 seconds)
[21:39:01] <cbreak> looks like the wording changed quite a bit since 11
[21:39:06] <ville> https://port70.net/~nsz/c/c11/n1570.html#6.7.9p19
[21:39:10] <PJBoy> { A t{}; } struct T { explicit T() {} }; struct A { T t; };
[21:39:10] <geordi> error: converting to 'T' from initializer list would use explicit constructor 'T::T()'
[21:39:16] <PJBoy> wow, what do you know
[21:40:07] <PJBoy> why would they choose copy init over direct init
[21:40:12] <ville> https://port70.net/~nsz/c/c11/n1570.html#6.7.9p21
[21:40:12] <PJBoy> or value init even
[21:40:39] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:47] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:47] *** ChanServ sets mode: +v npaperbot
[21:41:20] <ville> also apparenlty c zeroes out padding bits. don't think c++ makes a statement about those
[21:41:27] <PJBoy> I think it does
[21:41:53] <cbreak> I don't think it should matter
[21:41:59] <ville> cbreak: memcmp
[21:42:12] <cbreak> just memcmp only members
[21:42:24] <ville> yeah that's fun to write...
[21:42:38] <PJBoy> http://www.eelis.net/c++draft/dcl.init#general-9 + http://www.eelis.net/c++draft/dcl.init#general-6.2
[21:42:49] <cbreak> it's not like primitive types make any guarantees about padding bits in their internal representation
[21:43:02] <cbreak> or, representation in general
[21:43:22] <cbreak> so you can't expect memcmp for floats or doubles, for example, to be useful
[21:44:31] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[21:44:38] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[21:45:07] *** Quits: ville (~ville@user/ville) (Quit: ville)
[21:45:26] *** Joins: ville (~ville@user/ville)
[21:45:35] <ville> oopsie
[21:52:08] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:53:17] *** Joins: AmR (~AmREiSa@156.199.28.131)
[21:53:44] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[21:55:06] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:56:55] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:00:28] <Eelis> (you can get considerably shorter URLs by using eel.is instead of www.eelis.net)
[22:00:37] *** Quits: supernova (~quassel@2405:9800:ba11:6207:e5ae:ae10:254d:e7eb) (Ping timeout: 240 seconds)
[22:01:38] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[22:03:40] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[22:04:33] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[22:07:01] *** Joins: Leonard (~Administr@114.55.127.80)
[22:07:29] <AmR> I want ask about idea I saw in windows app Can I, I want know How That can be done ?
[22:07:59] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:09:27] <CarloWood> AmR: ask in #C++-general
[22:09:39] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[22:09:50] <cbreak> C++ is turing complete
[22:12:36] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:14:29] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:15:32] <anyone> www. is so 1994
[22:18:59] *** Joins: ADHD (~XXX@user/ADHD)
[22:21:55] <CarloWood> You run everything on one server?
[22:23:49] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[22:24:23] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 256 seconds)
[22:24:58] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[22:25:20] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:c9bb:adce:367d:37d8)
[22:25:21] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:c9bb:adce:367d:37d8) (Changing host)
[22:25:21] *** Joins: RoKenn (~RoKenn@user/rokenn)
[22:27:19] <cbreak> p2p ftw
[22:29:21] *** Joins: Pook (~Pook@2001:8a0:f996:1400:ac29:26e7:cb6b:17a1)
[22:29:39] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[22:29:50] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac)
[22:34:59] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[22:37:49] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[22:38:55] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:40:46] *** Quits: baltazar (~baltazar@84-236-61-122.pool.digikabel.hu) (Ping timeout: 268 seconds)
[22:41:23] *** Quits: mitch0 (~mitch@84-236-61-122.pool.digikabel.hu) (Ping timeout: 268 seconds)
[22:42:14] *** Joins: baltazar (~baltazar@193-226-249-203.pool.digikabel.hu)
[22:42:54] *** Joins: mitch0 (~mitch@193-226-249-203.pool.digikabel.hu)
[22:45:40] *** Joins: Yruama_ (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac)
[22:46:43] <anyone> I mean the hostname in URLs, that's 94
[22:46:55] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac) (Ping timeout: 250 seconds)
[22:50:14] *** Joins: dfkfs (~dfkfs@178.49.152.151)
[22:52:13] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[22:52:17] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 240 seconds)
[23:06:17] *** Joins: Leonard (~Administr@114.55.127.80)
[23:08:35] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[23:18:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:19:50] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[23:21:20] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:21:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[23:24:36] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[23:30:32] *** Quits: skapate (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:35:47] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[23:36:28] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:55a0:8f60:aba0:28c4)
[23:36:43] *** Joins: Leonard (~Administr@114.55.127.80)
[23:37:00] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:8d19:f7a3:b91b:6462)
[23:37:00] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:8d19:f7a3:b91b:6462) (Changing host)
[23:37:00] *** Joins: skapata (~Skapata@user/skapata)
[23:40:02] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[23:41:35] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[23:41:57] *** Joins: Leonard (~Administr@114.55.127.80)
[23:42:10] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:52:25] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[23:56:17] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[23:56:27] *** Joins: Leonard (~Administr@114.55.127.80)
[23:57:23] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:58:49] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:59:41] *** Joins: Tokamak (~Tokamak@172.58.188.35)
