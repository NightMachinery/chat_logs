[00:00:12] *** Joins: bd3i (~bd3i@24-155-162-157.dyn.grandenetworks.net)
[00:19:38] *** Joins: john (~j@67.206.101.71)
[00:20:19] <raydiak> fwiw, I think polettix_ has a somewhat valid observation. at the very least, explicitly marking @ and % params as readonly should throw an error:
[00:20:22] <raydiak> m: sub s (@x is readonly) { @x = 1 }; my @a = ^3; s @a; say @a;
[00:20:23] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «[1]␤»
[00:20:28] <raydiak> ^ LTA
[00:20:37] <raydiak> and the error should look similar to:
[00:20:44] <raydiak> m: sub s (@x is rw) { @x = 1 }; my @a = ^3; s @a; say @a;
[00:20:44] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤For parameter '@x', '@' sigil containers don't need 'is rw' to be writable␤Can only use 'is rw' on a scalar ('$' sigil) parameter, not '@x'␤at <tmp>:1␤»
[00:21:26] <raydiak> the only way to actually make sure the passed var won't be modified, is:
[00:21:32] <raydiak> m: sub s (@x is copy) { @x = 1 }; my @a = ^3; s @a; say @a;
[00:21:32] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «[0 1 2]␤»
[00:21:57] <raydiak> this all feels rather inconsistent to me
[00:25:23] *** Quits: john (~j@67.206.101.71) (Ping timeout: 252 seconds)
[00:31:54] *** Quits: kylese (~kylese@p5dd8bbac.dip0.t-ipconnect.de) (Quit: Leaving)
[00:39:45] *** Parts: nibble (~nibble@p5dd8bbac.dip0.t-ipconnect.de) ()
[00:39:45] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Read error: Connection reset by peer)
[00:51:22] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[00:53:55] *** Joins: Sgeo (~Sgeo@user/sgeo)
[01:10:42] *** Joins: john (~j@67.206.101.71)
[01:31:09] <gfldex> raydiak: also, `is copy` does a shallow copy. We do have a few methods in CORE with the suffix `-rw` and the odd `subst-mutate`. So yes, there is inconsistancy. However, @a is a _container_. So it is mutable by definition.
[01:33:14] <gfldex> NativeCall is the reason why there can't be any mutablility-rules that are enforced by the compiler. As soon as you are in C land, all bets are off.
[01:34:21] <gfldex> So play nice or ppl wont use your modules. :)
[01:35:30] *** Joins: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net)
[01:46:34] <Voldenet> There could be mutability rules enforced by the compiler by either marking routines able to even use NativeCall/routines that use NativeCall
[01:47:07] <Voldenet> or mutability rules that apply only to raku code by design
[01:53:33] <tonyo> immutable everything
[01:57:28] <gfldex> Voldenet: That is true. Raku is a programmable programming language. You can build your own type system to turn it into another language. However, that leaves the question why you don't code in Haskell if you want Haskell semantics.
[02:06:20] *** Quits: john (~j@67.206.101.71) (Ping timeout: 272 seconds)
[02:09:31] *** Joins: john (~j@67.206.101.71)
[02:24:19] <xinming> Is there a place to list all modules change sorted by last modification date?
[02:24:34] <xinming> https://modules.raku.org/search/   <--- This just list all modules, doesn't support any sort options
[02:25:03] <gfldex> https://raku.land/recent
[02:25:14] *** Quits: john (~j@67.206.101.71) (Ping timeout: 255 seconds)
[02:26:08] <xinming> thanks
[02:49:01] <Voldenet> Hence `could be`, I'm not sure whether true immutability would even be practical without the language supporting immutable concepts
[03:04:28] *** Quits: dogbert17 (~dogbert@c83-251-249-247.bredband.tele2.se) (Quit: WeeChat 2.8)
[03:13:49] *** Quits: Tirifto (~Tirifto@47-186-111-21.dlls.tx.frontiernet.net) (Ping timeout: 268 seconds)
[03:14:08] *** Joins: Tirifto (~Tirifto@47-186-71-19.dlls.tx.frontiernet.net)
[03:23:53] *** Quits: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Ping timeout: 265 seconds)
[03:23:53] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[03:37:32] <japhb> Voldenet: Raku *does* support immutability, it's just not the default used with shorthands: [] and {} give you mutable containers, so that's what people end up with by default.  But there's nothing that stops you from manually creating Lists and Maps.
[03:46:04] *** Quits: oodani (~oodani@00dani.me) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[03:46:44] *** Joins: oodani (~oodani@00dani.me)
[03:47:30] <moon-child> there's (or, will be) also codesections' (‘codesections's’?) thing
[03:50:47] *** Quits: oodani (~oodani@00dani.me) (Client Quit)
[03:51:24] *** Joins: oodani (~oodani@00dani.me)
[03:55:01] <japhb> moon-child: Yeah, the second spelling with the s's is correct.
[03:58:16] <moon-child> I'm not sure if 'codesections' is plural or not
[04:00:45] <moon-child> ah, chicago talks about 'nouns plural in form, singular in meaning', saying their possessives should be spelt like regular plurals.  So it would be codesections', with no extra s on the end
[04:02:30] <moon-child> (assuming you interpret 'codesections' as referring to multiple sections of code, which I think is reasonable)
[04:04:18] <japhb> Well, for example "Miles" is a common name.  When referring to something they possess, it is "Miles's".
[04:05:22] <japhb> I was assuming that any nick should be treated as singular if it refers to an individual, singular if it refers to a bot or mass noun, and plural if it refers to a group of people that share an attribute ("singers")
[04:08:34] <tonyo> or, for possessive, just Miles'
[04:09:11] <tonyo> codesections' talk is also correct
[04:10:05] <moon-child> japhb: I don't know if 'Miles' the name is 'plural in form', though; I think it's just a singular word that ends in 's'
[04:10:49] <moon-child> whereas codesections is clearely the plural of code section.  Manual uses as an example 'the united states'; you wouldn't refer to a 'united state', but it's still plural
[04:11:24] <moon-child> *clearly
[04:32:48] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[04:34:41] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:46:16] *** Quits: Doc_Holliwood (~holli@dslb-088-073-151-022.088.073.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[05:46:16] *** Quits: greppable6 (~gre-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[05:46:16] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:46:16] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:46:16] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:46:16] *** Quits: coverable6 (~cov-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[05:46:16] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:46:16] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:46:16] *** Quits: quotable6 (~quo-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[05:46:16] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:46:16] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:46:16] *** Quits: committable6 (~com-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[05:46:16] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:46:17] *** Quits: notable6 (~not-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[05:46:17] *** Quits: unicodable6 (~uni-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[05:46:17] *** Quits: tellable6 (~tel-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[05:46:17] *** Quits: nativecallable6 (~nat-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[05:46:17] *** Quits: benchable6 (~ben-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[05:46:17] *** Quits: sourceable6 (~sou-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[05:46:17] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:46:41] *** Joins: releasable6 (~rel-able@ns306169.ip-94-23-219.eu)
[05:46:43] *** Joins: shareable6 (~sha-able@ns306169.ip-94-23-219.eu)
[05:46:46] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[05:46:55] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[05:47:16] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[05:47:17] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[05:47:33] *** Joins: evalable6 (~eva-able@ns306169.ip-94-23-219.eu)
[05:47:40] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[05:47:48] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[05:47:54] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[05:48:08] *** Joins: quotable6 (~quo-able@ns306169.ip-94-23-219.eu)
[05:48:11] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[05:48:23] *** Joins: benchable6 (~ben-able@ns306169.ip-94-23-219.eu)
[05:48:31] *** Joins: committable6 (~com-able@ns306169.ip-94-23-219.eu)
[05:48:57] *** Joins: unicodable6 (~uni-able@ns306169.ip-94-23-219.eu)
[05:49:07] *** Joins: nativecallable6 (~nat-able@ns306169.ip-94-23-219.eu)
[05:49:10] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[05:49:18] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[05:49:29] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[06:49:29] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:49:29] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:49:29] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:49:29] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:49:29] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:49:29] *** Quits: evalable6 (~eva-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[06:49:29] *** Quits: releasable6 (~rel-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[06:49:29] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:49:29] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:49:29] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:49:29] *** Quits: unicodable6 (~uni-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[06:49:29] *** Quits: benchable6 (~ben-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[06:49:30] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:49:30] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:49:30] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:49:30] *** Quits: quotable6 (~quo-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[06:49:30] *** Quits: committable6 (~com-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[06:49:30] *** Quits: nativecallable6 (~nat-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[06:49:30] *** Quits: shareable6 (~sha-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[06:49:50] *** Joins: squashable6 (~squ-able@ns306169.ip-94-23-219.eu)
[06:49:50] *** Joins: benchable6 (~ben-able@ns306169.ip-94-23-219.eu)
[06:49:51] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[06:50:07] *** Joins: statisfiable6 (~sta-able@ns306169.ip-94-23-219.eu)
[06:50:17] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[06:50:22] *** Joins: releasable6 (~rel-able@ns306169.ip-94-23-219.eu)
[06:50:35] *** Joins: greppable6 (~gre-able@ns306169.ip-94-23-219.eu)
[06:50:45] *** Joins: sourceable6 (~sou-able@ns306169.ip-94-23-219.eu)
[06:50:53] *** Joins: nativecallable6 (~nat-able@ns306169.ip-94-23-219.eu)
[06:50:58] *** Joins: committable6 (~com-able@ns306169.ip-94-23-219.eu)
[06:51:05] *** Joins: bisectable6 (~bis-able@ns306169.ip-94-23-219.eu)
[06:51:17] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[06:51:20] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[06:51:34] *** Joins: notable6 (~not-able@ns306169.ip-94-23-219.eu)
[06:52:03] *** Joins: unicodable6 (~uni-able@ns306169.ip-94-23-219.eu)
[06:52:14] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[06:52:18] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[06:52:21] *** Joins: coverable6 (~cov-able@ns306169.ip-94-23-219.eu)
[06:52:26] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[07:06:07] *** Joins: john (~j@67.206.101.71)
[07:31:41] *** Quits: john (~j@67.206.101.71) (Ping timeout: 255 seconds)
[07:36:40] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[07:38:28] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 246 seconds)
[08:38:28] *** Quits: coverable6 (~cov-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[08:38:28] *** Quits: releasable6 (~rel-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[08:38:28] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:38:28] *** Quits: notable6 (~not-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[08:38:28] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[08:38:28] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:38:28] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:38:28] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:38:28] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:38:28] *** Quits: committable6 (~com-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[08:38:28] *** Quits: greppable6 (~gre-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[08:38:28] *** Quits: statisfiable6 (~sta-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[08:38:28] *** Quits: unicodable6 (~uni-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[08:38:29] *** Quits: squashable6 (~squ-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[08:38:29] *** Quits: benchable6 (~ben-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[08:38:29] *** Quits: nativecallable6 (~nat-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[08:38:29] *** Quits: bisectable6 (~bis-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[08:38:29] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[08:38:29] *** Quits: sourceable6 (~sou-able@ns306169.ip-94-23-219.eu) (Write error: Connection reset by peer)
[08:38:51] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[08:39:23] *** Joins: quotable6 (~quo-able@ns306169.ip-94-23-219.eu)
[08:39:25] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[08:39:27] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[08:39:37] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[08:39:42] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[08:39:55] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[08:39:56] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[08:40:07] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[08:40:08] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[08:40:12] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[08:40:22] *** Joins: greppable6 (~gre-able@ns306169.ip-94-23-219.eu)
[08:40:22] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[08:40:35] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[08:40:38] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[08:40:39] *** Joins: coverable6 (~cov-able@ns306169.ip-94-23-219.eu)
[08:40:58] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[08:41:13] *** Joins: bisectable6 (~bis-able@ns306169.ip-94-23-219.eu)
[08:41:26] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[09:21:46] *** Quits: bd3i (~bd3i@24-155-162-157.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[09:23:15] <avuserow> m: sub f(@a) {dd @a}; f([:1a, :2b]); f([{:1a, :2b}]); 
[09:23:16] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «Array element = [:a(1), :b(2)]␤Array element = [:b(2), :a(1)]␤»
[09:23:35] <avuserow> why is my hash getting eaten in the second case? and is there any way to modify `f` so it does not happen?
[09:24:44] <avuserow> I know I can add a trailing comma so it works so I'm guessing it's a form of the single argument rule?
[09:25:04] <avuserow> m: m: sub f(@a) {dd @a}; f([{:1a, :2b},]); # works but easy to forget :(
[09:25:04] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «Array element = [{:a(1), :b(2)},]␤»
[10:14:58] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:26:48] *** Quits: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net) (Quit: Leaving.)
[10:31:39] *** Joins: Doc_Holliwood (~holli@dslb-088-073-151-022.088.073.pools.vodafone-ip.de)
[10:32:43] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:34:06] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[10:55:04] *** Joins: xerxes (~xerxes@117.222.64.149)
[10:58:41] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 255 seconds)
[11:06:36] *** Joins: ufobat (~martin@dynamic-095-115-106-159.95.115.pool.telefonica.de)
[11:38:31] *** Quits: holyghost (~goon@2a02:a03f:64c8:9200:6d38:10eb:c49a:e445) (Quit: bbl)
[11:44:33] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Remote host closed the connection)
[11:50:55] *** Quits: Doc_Holliwood (~holli@dslb-088-073-151-022.088.073.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[11:53:20] <raydiak> yes, single-argument rule. the hash is being flattened into the array
[11:53:29] <raydiak> m: dd [{:1a, :2b}]; dd [{:1a, :2b}.item]
[11:53:29] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «Array element = [:b(2), :a(1)]␤Array element = [{:a(1), :b(2)},]␤»
[11:57:45] *** Joins: rhett (Username@174-126-122-77.cpe.sparklight.net)
[11:57:52] *** Joins: patrickb (~patrickb@55d41309.access.ecotel.net)
[11:57:54] *** Quits: rhett (Username@174-126-122-77.cpe.sparklight.net) (Excess Flood)
[12:27:26] <solitario> m: say ("Hello world!");
[12:27:26] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «Hello world!␤»
[12:53:44] *** Quits: xerxes (~xerxes@117.222.64.149) (Quit: leaving)
[13:47:30] *** Joins: MoC (~moc@user/moc)
[14:42:56] *** Quits: peder (4822@nidur.ifi.uio.no) (Remote host closed the connection)
[14:45:55] *** Joins: peder (4822@nidur.ifi.uio.no)
[14:57:02] *** Quits: patrickb (~patrickb@55d41309.access.ecotel.net) (Remote host closed the connection)
[15:03:26] *** Joins: Doc_Holliwood (~holli@dslb-088-073-151-022.088.073.pools.vodafone-ip.de)
[15:34:27] <Altreus> single-argument rule feels like a gotcha-by-design
[15:40:26] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[16:08:34] *** Joins: patrickb (~patrickb@55d41309.access.ecotel.net)
[16:32:39] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[16:35:23] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[16:38:46] <lizmat> Altreus: you have no idea how much discussion (online and in person) has happened about that in 2015 before the GLR
[16:44:09] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[16:45:34] *** Quits: Manifest0 (~Manifest0@49-nat1-1.centrio.cz) (Ping timeout: 252 seconds)
[16:48:32] <Altreus> I do not indeed! I have to imagine it wouldn't be a thing if it hadn't been considered better than not having it
[16:49:09] <Altreus> I think it's one of those things where you don't realise how often it does DWIM when you're grumbling that it doesn't
[16:54:38] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 255 seconds)
[17:03:07] *** Quits: phogg (~phogg@user/phogg) (Quit: so long, and thanks for all the fish)
[17:52:46] *** Quits: patrickb (~patrickb@55d41309.access.ecotel.net) (Remote host closed the connection)
[17:54:13] *** Joins: patrickb (~quassel@55d41309.access.ecotel.net)
[18:10:55] *** Joins: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net)
[18:12:36] *** Joins: phogg (~phogg@static-108-51-94-2.washdc.fios.verizon.net)
[18:17:59] *** Quits: phogg (~phogg@static-108-51-94-2.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[18:24:22] *** Joins: bd3i (~bd3i@24-155-162-157.dyn.grandenetworks.net)
[18:52:38] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:56:14] <avuserow> yeah, I remember the GLR from following IRC. of course, I didn't see the depth of the conversations.
[18:56:54] <avuserow> it's interesting that hashes can flatten. I guess it makes sense since they are iterable
[19:06:39] <jdv> "gotcha by design"?
[19:17:04] <Altreus> The amount of debate that must have gone into deciding on this single argument feature suggests that it is the preferred option even though it is going to catch people out quite regularly
[19:17:25] <Altreus> There's no way nobody realised the gotcha potential of this, but it went into the design anyway
[19:18:30] <Altreus> liz's comment implies even more debate went into it than I even expected, so there must have been some pretty solid justification given how much of a gotcha it has turned out to be
[19:31:46] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 246 seconds)
[19:56:07] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[20:14:16] *** Quits: bd3i (~bd3i@24-155-162-157.dyn.grandenetworks.net) (Quit: Leaving)
[20:15:35] <lucs> What happens with Inline::Perl5 if I later change my version of Perl, making unavailable the one that was active when I installed the module?
[20:19:52] *** Quits: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[20:28:40] <gfldex> lucs: as long as you upgrade, you should be fine
[20:29:53] <lucs> Not sure what you mean by "upgrade".
[20:30:28] <tonyo> he renames his perl lib from perllib5 to perllib6
[20:31:16] <lucs> ?
[20:31:55] <gfldex> lucs: Your Perl code will behave the same way then if you would run it in Perl. If the change would work in pure Perl it will work with Inline::Perl5.
[20:32:40] <lucs> In other words, Inline::Perl5 uses whatever version of Perl happens to be in the PATH?
[20:32:41] <gfldex> Inline::Perl5 is using the Perl runtime to execute Perl code in Raku.
[20:32:51] <gfldex> it's the libperl
[20:33:11] <lucs> I see, okay, thanks.
[20:33:26] <lucs> gfldex: Also, thanks for those cool blog posts :)
[20:33:41] <gfldex> you are welcome
[20:33:49] <gfldex> Also, you are welcome to blog yourself. :)
[20:34:00] <lucs> Nah, I don't have much to say.
[20:34:28] <gfldex> I found that blogging is a great way to advance as a Raku beginner.
[20:34:48] <gfldex> I'm advancing since 2008. :)
[20:34:49] <lucs> And if anything, there are already way to many blogs, etc., cluttering up google search with beginner answers.
[20:35:00] <lucs> *too many
[20:35:01] <jdv> p6 will never really die;)
[20:35:53] <tonyo> perls strategy to never die was to blog that perl is dead
[20:36:13] <jdv> the 100 year game
[20:36:15] <gfldex> We advanced beginners get very little feedback from new beginners. It's hard to improve learning material if you can't watch the learners.
[20:36:23] <tonyo> https://news.perlfoundation.org/post/wewantyoutosayperlisdead
[20:55:21] <Altreus> I like it
[20:55:41] <Altreus> Shame I'm only learning about it several months later
[21:10:29] <lizmat> .oO( It's never too late to say that Perl is ... )
[21:11:12] <lizmat> Altreus: re single arg rule
[21:11:22] <lizmat> you want:
[21:11:29] <lizmat> for @a { }
[21:11:39] <lizmat> to iterate over @a, right ?
[21:11:52] <lizmat> you don't want to have to do:
[21:11:58] <lizmat> for @a.flat { }
[21:12:22] <lizmat> that, in a nutshell, is why there is a single arg rule
[21:12:23] <Juerd> Nothing says "Perl is dead" quite like signatures having had experimental status for 7 years :)
[21:15:00] <gfldex> m: role mean { method make-fun-of-perl {} }; say „Perl is dead.“ ~~ True but mean;
[21:15:00] <camelia> rakudo-moar 5ecc8308f: ( no output )
[21:15:57] *** Quits: Voldenet (~Voldenet@user/voldenet) (Ping timeout: 258 seconds)
[21:16:43] <jdv> Juerd: or maybe the new "core oo system" not doing types.  oo sans types - yeah, ok.
[21:17:46] <Juerd> jdv: I don't see how that would say it's dead. If awkward design decisions meant programming languages were dead, that'd be true for basically every single one of them
[21:19:52] <Altreus> lizmat: That seems like the sort of nutshell that contains a very complex nut
[21:20:24] <Altreus> But if it were the choice between this gotcha, and for |@a {}, I'd choose the latter
[21:20:36] <lizmat> well, yeah, that was an option...
[21:20:42] <gfldex> The single argument rule doesn't work well for made up example code. In practical code it works rather well.
[21:20:47] *** Joins: Voldenet (~Voldenet@user/voldenet)
[21:21:08] <lizmat> except that prefix | at the time was not slipping yet
[21:21:14] <jdv> Juerd: i guess its not as strong as your example.  to me is hints at it.
[21:21:37] <gfldex> m: sub f($a is raw) {dd $a}; f([:1a, :2b]); f([{:1a, :2b}]);
[21:21:37] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «Array element = [:a(1), :b(2)]␤Array element = [:a(1), :b(2)]␤»
[21:21:39] <Altreus> Well I don't want to open that can of nuts
[21:22:45] <lizmat> for 1..5  { }   # should that also need to become: for |1..5 { }     ?
[21:23:33] <lizmat> all in all I think the single arg rule is at least consistent
[21:23:37] <Altreus> It's a choice of being more specific in one case, or in another case
[21:23:57] <lizmat> and consistency was one of the goals of the GLR, as iteration and flattening before the GLR are were.... interesting
[21:24:06] <lizmat> and definitely much harder to teach
[21:24:26] <Altreus> But adding a comma that is astonishing to people not deep into raku, versus adding a piece of syntax that means expand this list...
[21:24:32] <lizmat> so yeah, the 1-arg rule may be a gotcha, but it is something that is easily teachable
[21:24:43] <Altreus> But it's also easily forgettable, which is why it's a gotcha
[21:24:52] <Altreus> You can know it but still not realise you've been got by it
[21:25:17] <gfldex> So far, I never hit this gotcha in practical code.
[21:25:37] <Altreus> I'm assuming that the original message that prompted the discussion was the result of practical code
[21:25:44] <Altreus> I know that kawaii_ has come across it himself
[21:29:26] <gfldex> I use descructure a lot. So I might just dissolve stuff before the one arg rule applies.
[21:32:13] <kawaii_> I always forget about the 1 arg rule, without fail
[21:36:18] <jdv> i've been tripped up by it multiple times
[21:37:34] <jdv> but i normally figure it out fast - it is an unfortunate design that's hostile to the drive by user i guess
[21:38:15] <Altreus> I guess it's more obvious when your single argument needed manual destructuring than when it was automatically destructured
[21:38:39] <jdv> if i coded in raku normally i likely wouldn't continue to forget
[21:39:05] <Altreus> Potentially true. I'm constantly being put back into the P5 mindset where it's the context that's important
[21:39:19] <Altreus> although I find P5's contexts to be a very elegant concept
[21:44:22] <lizmat> fwiw, I find contexts in Perl the ultimate gotcha
[21:44:37] <lizmat> and there are examples of serious issues in production code because of it
[21:46:05] <tonyo> what is the "ultimate" gotcha on perl's contexts?
[21:53:07] <avuserow> yeah, my example was simplified for IRC, but was real-world use
[21:53:23] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[21:53:28] <avuserow> I'm working on a module for generating SQL from data structures (think a simpler version of perl's SQL::Abstract)
[21:54:01] <avuserow> and I thought I had a nice way of representing where clauses: lists, using pairs for equality, and hashes for custom comparison
[21:54:35] <avuserow> so you would be able to write `[{:op<LIKE>, :$foo}]` and get `WHERE foo LIKE ?` with $foo as your bound param
[21:54:58] <Altreus> Hmm, then the single-argument rule must be equivalent and it just requires experience in either situation
[21:55:41] <Altreus> The only issues I've ever had with context have actually cropped up recently, and frankly you get what you deserve when you expose HTTP status codes to calling code that doesn't need to know
[21:56:07] <Altreus> return ($code, $body) is NOT correct no matter how much you ignore me in code review :P
[21:56:41] <Altreus> (The issue is that people not reading the docs called this in scalar context and accidentally got what they wanted, i.e. $body)
[21:57:02] <Altreus> I guess things working by accident is way worse than things breaking by accident
[21:58:30] *** Joins: Manifest0 (~Manifest0@49-nat1-1.centrio.cz)
[21:59:42] <tonyo> avuserow: db::xoos has a sql generator like that - the module was broken with some changes to the meta model six or so months ago
[21:59:53] <tonyo> but that code exists and still works
[22:06:36] <avuserow> it looks like it uses hashes for representing where clauses. how does it handle the need for duplicate columns? (e.g. to generate `WHERE a > ? AND a < ?`)
[22:07:16] <avuserow> also I'm not fully able to use an ORM in this application, I need to run raw SQL fairly often. but for simple queries, I'd like to generate my own where clauses.
[22:09:17] <Altreus> Sounds like SQL::Abstract, in which you do and => [ a => { '>', $val }, a => { '<', $val } ] or something similar
[22:09:26] <avuserow> to get reasonable performance on some of my queries, I'm having postgres generate json directly: "SELECT json_agg(data) FROM ($sql) AS data"
[22:09:29] <Altreus> i.e. you use an array and override the default behaviour, which is or
[22:10:48] <Altreus> also for that you use between :)
[22:11:11] <avuserow> between is not quite the same, it's <= and >=. which does not matter with integers but matters a lot with timestamps
[22:11:18] <Altreus> ah you're right
[22:11:44] <Altreus> but yeah if it's like SQL::Abstract it's usually quite simple
[22:12:07] <Altreus> I prefer using data structures to represent SQL because SQL is great for humans to write and utter shite for computers
[22:12:47] <avuserow> yeah, I've gotten a lot of mileage out of SQL::Abstract, though some of its stuff is maybe a bit more magic than I want these days
[22:14:00] <avuserow> and after reading this (http://blog.kazuhooku.com/2014/07/the-json-sql-injection-vulnerability.html), which I only _kind of_ agree with, I thought I would try my hand at making a less magic representation
[22:14:33] <avuserow> tldr is if you accept JSON from a user, and put it in SQL::Abstract or friends, the user can change your comparison operators, and such
[22:19:00] <avuserow> oh, also, by using an array for where clause, the signature of `update` does not have two Hashes in a row (for %set and %where), so I don't forget the ordering any longer
[22:26:34] *** Quits: ufobat (~martin@dynamic-095-115-106-159.95.115.pool.telefonica.de) (Ping timeout: 240 seconds)
[22:33:05] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[22:33:51] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[22:35:44] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 252 seconds)
[22:40:28] *** Joins: aolko[m] (~aolko93ma@2001:470:69fc:105::68ec)
[22:40:28] <aolko[m]> hi, i'm a curious php guy, curiously peeking into raku, feels a little weird
[22:40:28] <aolko[m]> let's try starting off with:
[22:40:28] <aolko[m]> 1. is it possible to define your own keywords or redefine already existing ones?
[22:40:28] <aolko[m]>  * hi, i'm a curious php guy, curiously peeking into raku, feels a little weird, have some questions
[22:40:51] <lizmat> depends on what you consider a keyword
[22:41:03] <aolko[m]> for example `my`
[22:41:16] *** Joins: notna (~notna@77.47.31.43)
[22:41:17] <lizmat> that would be tricky
[22:41:24] <aolko[m]> i want it to be either `var` or `$`
[22:41:53] *** Quits: notna (~notna@77.47.31.43) (Client Quit)
[22:42:03] <lizmat> so would this be about changing aspects of Raku, or to create an entirely new language ?
[22:42:12] <aolko[m]> and yes most likely that would require building a separate module for that
[22:42:21] *** Joins: notna (~Thunderbi@2a02:2455:361:9e00:fd8b:19b5:3ac2:284e)
[22:42:26] <aolko[m]> <lizmat "so would this be about changing "> something in-between the two
[22:44:02] <aolko[m]> arrays, i feel like, would require the most tricks, since, you know, in php, there's only just arrays, no dicts, no hashes
[22:48:24] <gfldex> aolko[m]: technically yes, but you would have to define a fairly brittle slang and we don't good a nice interface for slangs yet.
[22:48:54] <aolko[m]> well, yes, but i'd rather go for a "toolkit module"
[22:49:16] <gfldex> You can stick a slang into a module.
[22:49:25] <avuserow> m: no strict; $foo = 1; say $foo # `no strict` exists, if you really want it?
[22:49:25] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «1␤»
[22:49:38] <aolko[m]> unless you can spin a language of raku itself with those fixes as part of stdlib
[22:49:47] <aolko[m]> from*
[22:50:30] <gfldex> You can "subclass" the Raku grammar and change it. This subclass is lexically scoped.
[22:50:41] <avuserow> m: sub postfix:<!>(Int $n) {[*] 1 .. $n}; say 6! # defining a new operator is easy enough, for what it's worth
[22:50:42] <camelia> rakudo-moar 5ecc8308f: OUTPUT: «720␤»
[22:50:58] <aolko[m]> alright, so i can add to and change, what about "removing the fat"?
[22:51:27] <gfldex> If you start removing stuff from the grammar you will have to re-write the compiler.
[22:51:34] <aolko[m]> ouch
[22:51:45] <aolko[m]> won
[22:51:52] <aolko[m]> won't be easy for me
[22:51:58] <gfldex> The compiler makes plenty of assumptions about the grammar.
[22:52:19] <aolko[m]> can it be modified to be "unbiased"?
[22:52:42] <gfldex> here is an example how far you can stretch a slang: https://raku.land/zef:tony-o/Slang::SQL
[22:53:16] <gfldex> But, as I wrote, we don't got nice interfaces for slangs. That may change in the comming years.
[22:53:32] <aolko[m]> it won't really be a slang, rather a mod
[22:54:04] <gfldex> In Raku that is the same thing.
[22:54:35] <aolko[m]> 🤷‍♂️
[22:54:47] <aolko[m]> (if one can modify the compiler)
[22:55:28] <Kaiepi> i tried that once
[22:55:40] <Kaiepi> m: use nqp; BEGIN nqp::getcomp('Raku').^mixin: role { }
[22:55:41] <camelia> rakudo-moar 5ecc8308f: ( no output )
[22:56:29] <gfldex> slangs are hard. You need to know the grammar very well.
[22:56:49] <aolko[m]> it's in java and c 🥲
[22:57:19] <aolko[m]> <gfldex "slangs are hard. You need to kno"> what if instead, uhh, there would be a way to parse my own grammars?
[22:57:34] <Kaiepi> huh, doesn't throw from a precomp context anymore
[22:57:54] <Kaiepi> if memory serves me, at least
[22:58:12] <Kaiepi> bisectable6, use nqp; BEGIN nqp::getcomp('Raku').^mixin: role { }
[22:58:12] <bisectable6> Kaiepi, Will bisect the whole range automagically because no endpoints were provided, hang tight
[22:58:36] <bisectable6> Kaiepi, Output on all releases: https://gist.github.com/48d47af045ea3245462c397ce6a5c2c4
[22:58:38] <bisectable6> Kaiepi, Bisecting by exit code (old=2019.11 new=2020.01). Old exit code: 1
[22:59:06] <bisectable6> Kaiepi, bisect log: https://gist.github.com/3c4c4d19f5742b7d9a8b049c82deb18f
[22:59:06] <bisectable6> Kaiepi, (2020-01-24) https://github.com/rakudo/rakudo/commit/b787095358bcbac4c6326b99e9673e54ef5afd58
[22:59:08] <bisectable6> Kaiepi, Bisecting by output (old=2017.06 new=2017.07) because on both starting points the exit code is 1
[22:59:26] <bisectable6> Kaiepi, bisect log: https://gist.github.com/2ffdecf989df871eab47c41d22eec28b
[22:59:26] <bisectable6> Kaiepi, (2017-07-08) https://github.com/rakudo/rakudo/commit/1a4d94930c581e915a2351049e8ee12246c4c26c
[22:59:28] <bisectable6> Kaiepi, Bisecting by output (old=2017.05 new=2017.06) because on both starting points the exit code is 1
[22:59:32] <Kaiepi> stahp
[23:00:07] <bisectable6> Kaiepi, bisect log: https://gist.github.com/fa3c4ba2ce4de3ba9396c0751c72ad25
[23:00:07] <bisectable6> Kaiepi, (2017-06-01) https://github.com/rakudo/rakudo/commit/c81b7a4b1a1f8a5c0d7c96cdd63a763cb5fd2068
[23:00:09] <bisectable6> Kaiepi, Bisecting by output (old=2016.09 new=2016.10) because on both starting points the exit code is 1
[23:00:27] <bisectable6> Kaiepi, bisect log: https://gist.github.com/dea4ba5922301455329e48c507c7063e
[23:00:27] <bisectable6> Kaiepi, (2016-09-27) https://github.com/rakudo/rakudo/commit/222d16b0b94911fdedb06ee6ad817d0f14b9c05c
[23:00:55] <bisectable6> Kaiepi, ⚠ New output detected, please review the results manually
[23:00:56] <bisectable6> Kaiepi, Output on all releases and bisected commits: https://gist.github.com/bbb128038b4cbe46200e24cc6fd69b2f
[23:01:48] <gfldex> aolko[m]: this might shed some light: https://www.youtube.com/watch?v=lwIXF25KJCo
[23:02:23] <Kaiepi> aolko[m], if you try to modify the compiler, make sure it works when used from another module
[23:03:07] <aolko[m]> i'd go full dog there https://i.kym-cdn.com/entries/icons/original/000/008/342/ihave.jpg
[23:04:34] *** Joins: john (~j@67.206.101.71)
[23:06:31] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[23:08:44] <Voldenet> Same tbh, don't all programmers feel like that?
[23:09:02] *** Quits: john (~j@67.206.101.71) (Ping timeout: 258 seconds)
[23:09:11] <aolko[m]> no, after all you have languages popping left and right
[23:09:19] <aolko[m]> as well as frameworks
[23:09:39] <aolko[m]> so, at some capacity they know what they are doing and i'm not
[23:09:57] <Voldenet> it's easy to make any framework and language, really - you just fork github code and sed-replace the name to your own one
[23:10:07] <Voldenet> please don't actually do that, it's a joke
[23:10:14] <aolko[m]> and i meant from scratch
[23:10:21] <aolko[m]> :P
[23:11:05] <Voldenet> I wouldn't use scratch programming language, but sure why not :>
[23:11:41] <aolko[m]> and i meant "from zero", using just the vanilla source language :P
[23:12:20] <gfldex> At least you will have something to do for the next 10 years. :)
[23:13:03] <aolko[m]> nah, i don't have 10 years, i'm basically looking to replace a crumbling mess that is php7/php8
[23:13:10] <Voldenet> Just read dragon book, it's only 1k pages of specialized jargon
[23:13:17] <aolko[m]> therefore the need is hot
[23:13:29] <aolko[m]> i don't do jargon, i do domain-specific knowledge
[23:14:00] <aolko[m]> i.e. "knowledge-for-the-current-task/set-of-tasks only"
[23:15:05] *** Quits: notna (~Thunderbi@2a02:2455:361:9e00:fd8b:19b5:3ac2:284e) (Read error: Connection reset by peer)
[23:15:46] <Voldenet> aolko[m]: if you want to just declare your own keywords, perl5 has Keyword::Declare module for this
[23:15:59] <aolko[m]> perl5 is dead, Jim
[23:16:13] <Voldenet> no it's not, that's why perl6 renamed into raku
[23:16:37] <aolko[m]> it is dead and will not recieve major updates, and it's not the channel for it
[23:17:07] *** Joins: notna (~Thunderbi@2a02:2455:361:9e00:fd8b:19b5:3ac2:284e)
[23:17:32] <Voldenet> …perl7 was already announced though…
[23:17:49] <aolko[m]> 🤷‍♂️
[23:18:19] <Kaiepi> ohhh wait it was $*W i was trying to mess with, not the compiler
[23:18:30] <Kaiepi> m: BEGIN $*W.^mixin: role { }
[23:18:30] <camelia> rakudo-moar 5ecc8308f: ( no output )
[23:18:46] <Kaiepi> and even then, only seems to happen when precomp is involved
[23:18:54] <Kaiepi> could be other ways to shadow it though
[23:19:12] <aolko[m]> and there seems to be no way of building a binary iirc
[23:24:17] <aolko[m]> that [https://youtu.be/lwIXF25KJCo] was rather clumsy and didn't really clear things up
[23:35:53] *** Joins: john (~j@67.206.101.71)
[23:41:26] *** Quits: john (~j@67.206.101.71) (Ping timeout: 255 seconds)
[23:54:22] *** Joins: john (~j@67.206.101.71)
