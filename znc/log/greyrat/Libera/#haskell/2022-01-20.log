[00:00:33] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:05:15] *** Joins: you (~ShmoSeph@173-167-220-193-ip-static.hfc.comcastbusiness.net)
[00:06:55] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[00:07:25] <tomsmeding> fizzsegfaultbuzz: the limit distribution doesn't change if f lets every point go to every other point with nonzero probability after some number of steps
[00:14:58] <tomsmeding> also this is not a buddhabrot, is ot?
[00:15:00] <tomsmeding> *it
[00:17:00] *** Quits: Guest80 (~Guest80@host-95-245-231-154.retail.telecomitalia.it) (Quit: Client closed)
[00:17:18] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:edf9:3833:cff9:92b3)
[00:18:30] *** Quits: you (~ShmoSeph@173-167-220-193-ip-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[00:20:29] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[00:30:18] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[00:34:03] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd9f:9c7:a4ae:c7f9) (Remote host closed the connection)
[00:34:04] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9841-fdb7-086b-ec04.res6.spectrum.com) (Remote host closed the connection)
[00:34:05] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[00:34:05] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[00:36:12] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[00:39:38] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[00:39:43] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:42:23] *** Joins: vicfred (~vicfred@user/vicfred)
[00:42:57] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[00:44:17] *** Quits: _ht (~quassel@82-168-34-160.fixed.kpn.net) (Remote host closed the connection)
[00:47:49] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[00:49:56] *** Joins: alp (~alp@user/alp)
[00:50:44] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[00:51:09] *** Joins: spaceseller (~spacesell@31.147.205.13)
[00:51:37] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:53:04] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:55:34] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:55:34] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:55:34] *** Joins: wroathe (~wroathe@user/wroathe)
[01:02:20] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[01:03:51] <EvanR_> what's going on here
[01:05:09] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[01:05:53] <EvanR_> morphisms in a category support this operation, f b c -> f a b -> f a c. What about f a (f b c) -> f a b -> f a c. What's that
[01:07:21] <awpr> that looks kinda like a variant on the eval morphism of a cartesian closed category?
[01:07:42] <EvanR_> CCC... of course
[01:08:40] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:09:17] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:10:05] <awpr> in a bit more detail: "closed" means you have an internal "exponential" object representing morphisms between two objects: by putting `f b c` inside `f a _`, you're asserting one of the objects of the category is the morphisms between `b` and `c`
[01:11:28] <EvanR_> seems like mixing levels in a gnarly way
[01:11:52] *** Quits: briandaed (~briandaed@185.234.208.208.r.toneticgroup.pl) (Quit: Lost terminal)
[01:12:12] <awpr> yeah, that presentation is restricting the objects of the category to be Type
[01:12:46] <awpr> because it uses the same `f` for the Hask-level functions and the exponential object
[01:13:22] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[01:13:40] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:d001:2aa2:4908:56e6)
[01:13:41] <awpr> if it's cartesian closed, there's also a cartesian product that can support `forall a. f a (a, a)` and `forall a b c d. f a b -> f c d -> f (a, c) (b, d)`, and an eval morphism `forall a b. f (a, f a b) b`
[01:13:58] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[01:14:42] <awpr> if you plug all those together with the given `f a (f b c)` and `f a b`, you can get to `f a c`
[01:15:12] <EvanR_> I started talking about f a (f b c) -> f a b -> f a c, or the flip of that. Are products necessary for this to make sense, or are they implied, or
[01:15:12] *** Quits: spaceseller (~spacesell@31.147.205.13) (Quit: Leaving)
[01:15:28] <EvanR_> like where did the cartesian come from
[01:15:46] <EvanR_> or is it just a possible thing to add
[01:17:49] <awpr> I had to invoke the product and diagonal morphism `f a (a, a)` to be able to "use the `a` twice" (both in the input of `f a (f b c)` and in the input of `f a b`).  categories in general can't automatically do that, so they need some extra structure.  I'm not sure whether there's a "smaller" way to gain that power instead of CCCs
[01:18:27] <EvanR_> it's funny because a product seems much more mundane than an exponential object, but it's critical
[01:18:43] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:18:59] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:19:24] <awpr> yeah, I was just looking at the definition of a closed category, and it looks like it doesn't even involve an apply morphism, just an internal composition `f (f a b)
[01:19:54] <EvanR_> I think you got cut off
[01:20:20] <awpr> `f (f b c) (f (f a b) (f a c))`  (still abusing `f` as both hom-set and internal-hom)
[01:20:39] <EvanR_> oh that's confusing
[01:21:03] <awpr> [for some reason I made enter be adjacent to backspace on my keyboard layout...)
[01:21:31] <EvanR_> OK placed next to ABORT
[01:21:46] <EvanR_> nice UI/UX principle
[01:23:01] <awpr> try plugging `->` in for `f`: `(->) ((->) b c) ((->) ((->) a b) ((->) a c))`, or in infix form, `(b -> c) -> (a -> b) -> (a -> c)`
[01:23:42] <EvanR_> there are two kinds of f going on right?
[01:23:53] <geekosaur> I noticed the other one you had earlier looked suspiciously like an Arrow
[01:25:12] <awpr> in general, yeah, there would be two different ones.  but in `Set` the hom-set and the internal hom are exactly the same, so if we're specializing to Haskell functions they both collapse onto functions anyway
[01:25:13] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:25:16] <EvanR_> :t app
[01:25:17] <lambdabot> ArrowApply a => a (a b c, b) c
[01:25:54] <EvanR_> awpr, haskell as a specialization of set which itself a confusing specialization is confusing xD
[01:25:58] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[01:26:50] <EvanR_> speaking of which, I guess we assumed we're talking about morphisms which are haskell values of a type implementing Category
[01:27:42] <EvanR_> this automatically brings in Hask somehow?
[01:27:59] <EvanR_> if so, is there a sane way to work with other kinds of categories
[01:28:28] <int-e> Heh, that type is nearly unreadable.
[01:28:44] <awpr> yeah, I think that's a reasonable assumption as long as we're pretending Hask = Set.  ignoring enriched category theory, the morphisms are always a set, and things like functors' actions on morphisms are functions
[01:29:12] <int-e> app :: ArrowApply (~>) => (b ~> c, b) ~> c
[01:29:24] <EvanR_> ah
[01:29:59] <EvanR_> ok yeah, in that type there, b and c are haskell types
[01:30:24] <EvanR_> what if you wanted them to be restricted to some special kind of types
[01:30:27] <awpr> the place we're artificially limiting things is by identifying the objects with Type, by reusing the same `f` in both levels
[01:30:32] <awpr> yeah, that
[01:31:00] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[01:31:10] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:32:01] <EvanR_> *b and c are any arbitrary haskell types (I guess of compatible kind)
[01:33:07] <awpr> because we have `something :: f _ _`, then `f :: k1 -> k1 -> Type`, and because we have `f _ (f _ _)`, `f :: k2 -> k2 -> k2`, which forces everything to be `Type`.  that's where it becomes important to distinguish the hom-set `f _ _` from the internal hom object which we've also been calling `f _ _`
[01:33:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[01:34:57] <awpr> so an extra step towards real CT would be `eval :: f (_Product a (_Exp a b)) b` etc., with some form of type family or fundeps or something to tell you what `_Product` and `_Exp` should be
[01:36:22] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[01:36:45] *** Quits: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b) (Remote host closed the connection)
[01:36:49] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[01:36:58] *** Joins: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b)
[01:39:49] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[01:42:56] <EvanR_> so an _Exp is better than just implementing an apply function?
[01:43:29] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:43:32] *** Quits: Megant_ (megant@user/megant) (Ping timeout: 268 seconds)
[01:44:39] *** Joins: Megant (megant@user/megant)
[01:45:27] <awpr> having the exponential object be distinct from the Haskell-value-level representation of morphisms is what lets you use something other than Type for the objects: since Haskell values' types are of kind Type, making the exponential object the same as the type of morphisms forces the objects to be Types
[01:45:50] <EvanR_> oh
[01:48:00] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:48:41] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:57:29] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:00:47] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:02:19] *** Quits: fendor (~fendor@77.119.169.94.wireless.dyn.drei.com) (Remote host closed the connection)
[02:02:26] *** Quits: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b) (Remote host closed the connection)
[02:02:39] *** Joins: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b)
[02:05:46] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[02:07:01] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[02:08:47] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:09:37] *** Joins: Sgeo (~Sgeo@user/sgeo)
[02:10:02] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[02:11:39] *** Quits: Topsi (~Tobias@dyndsl-095-033-018-085.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[02:12:32] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd9f:9c7:a4ae:c7f9)
[02:12:33] <monochrom> Hahaha, Oleg wrote a Scheme syntax-rule for the CPS transform, and commented "the standard CPS transformation written in Latin rather than in Greek"
[02:12:44] <monochrom> https://okmij.org/ftp/Scheme/callcc-calc-page.html
[02:13:39] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:13:44] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Remote host closed the connection)
[02:14:22] *** Quits: chomwitt (~chomwitt@2a02:587:dc0b:200:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[02:14:26] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:14:43] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[02:16:57] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 240 seconds)
[02:22:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:24:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd9f:9c7:a4ae:c7f9) (Remote host closed the connection)
[02:26:20] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:31:57] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:d001:2aa2:4908:56e6) (Ping timeout: 240 seconds)
[02:35:50] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:d001:2aa2:4908:56e6)
[02:37:09] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[02:39:59] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[02:42:24] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:47:06] *** Joins: namkeleser (~namkelese@124.188.192.57)
[02:49:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:50:05] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[02:50:35] *** Quits: szkl_ (uid110435@id-110435.uxbridge.irccloud.com) ()
[02:51:08] *** Joins: szkl_ (uid110435@id-110435.uxbridge.irccloud.com)
[02:51:25] *** Quits: szkl_ (uid110435@id-110435.uxbridge.irccloud.com) (Client Quit)
[02:51:54] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:54:32] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[02:55:53] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[02:56:45] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[02:58:09] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[02:58:15] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:00:20] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd9f:9c7:a4ae:c7f9)
[03:00:39] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[03:01:28] *** Joins: AlexNoo_ (~AlexNoo@94.233.241.14)
[03:02:42] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:d001:2aa2:4908:56e6) (Remote host closed the connection)
[03:03:32] *** Quits: AlexZenon (~alzenon@178.34.162.42) (Ping timeout: 240 seconds)
[03:03:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[03:04:32] *** Quits: Alex_test (~al_test@178.34.162.42) (Ping timeout: 240 seconds)
[03:04:48] *** Quits: AlexNoo (~AlexNoo@178.34.162.42) (Ping timeout: 250 seconds)
[03:05:46] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[03:06:28] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:09:11] *** Joins: Alex_test (~al_test@94.233.241.14)
[03:09:28] *** Joins: AlexZenon (~alzenon@94.233.241.14)
[03:13:19] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[03:19:59] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:edf9:3833:cff9:92b3) (Quit: Textual IRC Client: www.textualapp.com)
[03:20:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[03:23:48] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[03:25:17] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 268 seconds)
[03:26:55] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[03:27:42] *** Joins: ski (~ski@remote11.chalmers.se)
[03:28:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:28:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:28:58] *** Joins: wroathe (~wroathe@user/wroathe)
[03:29:11] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[03:29:55] *** Quits: max22- (~maxime@2a01cb08833598003263d82d70b82807.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:30:19] *** Quits: vglfr (~vglfr@88.155.46.9) (Ping timeout: 256 seconds)
[03:31:38] *** Quits: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b) (Remote host closed the connection)
[03:31:54] *** Joins: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b)
[03:33:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[03:39:57] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[03:40:08] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[03:40:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:41:57] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Ping timeout: 240 seconds)
[03:42:56] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[03:43:01] *** Joins: lamba (~lamba@c-73-16-71-87.hsd1.ma.comcast.net)
[03:45:08] <janus> i have seen people prefixing their record field names with underscore, i think it is because they want the name to be free to use for the lens
[03:45:34] <janus> but now i saw a suggestion that if you use generic-lens, you don't have to have the underscore
[03:45:49] <janus> but then consumers will be forced to use generic-lens to use the library, no?
[03:45:49] *** Joins: Erutuon (~Erutuon@user/erutuon)
[03:46:24] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[03:48:33] *** _\_ is now known as ding
[03:48:54] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b4b9:8efe:259f:8f94)
[03:50:00] *** Quits: lamba (~lamba@c-73-16-71-87.hsd1.ma.comcast.net) (Remote host closed the connection)
[03:50:32] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[03:50:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[03:51:59] *** ding is now known as _\_
[03:53:38] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[03:53:58] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:b4b9:8efe:259f:8f94) (Quit: Textual IRC Client: www.textualapp.com)
[03:58:15] *** Quits: _\_ (~o@user/ding) (Quit: ___)
[03:58:24] *** Quits: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b) (Remote host closed the connection)
[03:58:27] *** Joins: _\_ (~o@2001:19f0:5:14c2:5400:2ff:fee0:a42c)
[03:58:34] <Axman6> the fields are still available, so you can just use them as records. generic lens lets you say get #someField without needing to generate lenses ahead of time
[03:58:37] *** Joins: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b)
[03:58:44] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:58:49] *** Quits: _\_ (~o@2001:19f0:5:14c2:5400:2ff:fee0:a42c) (Remote host closed the connection)
[03:59:03] *** Joins: _\_ (~o@2001:19f0:5:14c2:5400:2ff:fee0:a42c)
[04:00:56] *** Quits: delYsid (~user@84-115-55-45.cable.dynamic.surfer.at) (Remote host closed the connection)
[04:01:17] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:02:32] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[04:06:54] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:06:57] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[04:07:31] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[04:08:50] <janus> Axman6: ok, but you wouldn't be able to use the lenses without #someField, if i understand correctly. so it requires user to learn generic-lens, but the advantage is that the source becomes more compact.
[04:09:03] <janus> and presumably compilation gets a lot slower since Generic is slow to generate
[04:09:15] *** Quits: widelec-BB (~widelec@cpe-109-207-144-181.docsis.tczew.net.pl) (Quit:  )
[04:09:57] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Client Quit)
[04:10:25] <jackdk> janus: sounds like the tradeoff to me. Since amazonka-2.0 will require a generic optics lib of some form (although it provides explicit lenses if you don't mine a lot of keystrokes), I'll probably refactor my other stuff to use generic lens and drop underscores
[04:10:27] <geekosaur> which is slower, th or generics?
[04:10:48] <jackdk> also note, you can use generic-lens either as `field @"foo"` or as an overloaded label `#foo`
[04:12:03] <janus> jackdk: actually i asked this question because i saw the thread on amazonka suggesting to get rid of the underscores :O why do you say they will require a generic optics lib? master still contains normal lenses.
[04:12:25] <Axman6> Generics have the benefit of only needing to be run once, TH can/may/does need to be recompiled right?
[04:12:44] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:13:07] <janus> geekosaur: i don't know, i just heard that deriving Generic is slow. but it will only be for a few types, so won't matter 
[04:13:21] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:13:24] <Axman6> the new lenses generated in amazonka are... ugly to say the least
[04:13:36] <jackdk> janus: the lenses in the generates service bindings are like `typeName_fieldName` and in a separate module. I will probably remove the underscores on record fields in a future PR
[04:13:40] <Axman6> using a lens library will be a much more pleasant option
[04:13:42] <jackdk> s/generates/generated/
[04:14:07] <jackdk> I think there is a long-term plan to break the lens dep entirely
[04:14:27] <geekosaur> Axman6, both happen during compilation. I think the only thing that helps is what jackdk said about a separate module, which you can't do wiith TH 
[04:14:32] <Axman6> I should know this, but are the smart constructors still being generated in amazonka jackdk?
[04:14:39] <geekosaur> so with luck that module wouldn't need to be recompiled often
[04:14:49] *** Joins: vysn (~vysn@user/vysn)
[04:14:56] <jackdk> (you can provide van Laarhoven lenses using only the types in `base`, but prisms need `profunctors`)
[04:14:59] <Axman6> I mean that having TH in a file can cause it to be recompiled when nothing has changed
[04:15:04] *** Parts: texasmynsted (~texasmyns@99.96.221.112) (WeeChat 3.3)
[04:15:21] <geekosaur> I think only if the TH adds an extra dependency
[04:15:23] <jackdk> Axman6: constructor functions take all the required fields as arguments, yes.
[04:15:31] <janus> jackdk: what is your github username? if i may ask. i am ysangkok
[04:15:32] <geekosaur> addDependentFile or something like that
[04:15:39] <jackdk> Note that the lenses are generated by the amazonka generator
[04:15:52] <albet70> is there login session package for scotty?
[04:15:53] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd9f:9c7:a4ae:c7f9) (Remote host closed the connection)
[04:16:14] <Axman6> jackdk: great, that's one of my favourite amazonka features, and I thought I'd seen those were disappearing
[04:16:32] *** Quits: _\_ (~o@2001:19f0:5:14c2:5400:2ff:fee0:a42c) (Changing host)
[04:16:32] *** Joins: _\_ (~o@user/offon)
[04:16:41] <Axman6> not sure where I got that idea
[04:17:17] <jackdk> Axman6: they do need work - the hashable-1.4 change caused some of them to change argument order. there's a long-term plan to move to Data.Map, I think
[04:17:21] <jackdk> janus: endgame
[04:17:27] <janus> aaah ok it's youuu
[04:17:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:17:51] <jackdk> uh oh
[04:18:01] <Axman6> janus: is the hero of Amazonka's renewed development, and deserves as much beer or beer substitutes as he can cope with
[04:18:06] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[04:18:07] <Axman6> jackdk*
[04:18:37] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:18:47] <jackdk> lol
[04:19:03] <janus> i would happily send a bottle of booze or green tea!
[04:19:37] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[04:20:11] <janus> jackdk: are you planning to remove the underscores before amazonka2 is out?
[04:20:36] <jackdk> janus: yeah probably. It's not a big change, and it's probably the best chance we'll have for breaking changes
[04:21:15] <jackdk> the reason it didn't happen sooner is that there were a lot of constants naming environment variables, which clashed with field names in `Env'`. Once the auth rework goes in, they all go away.
[04:21:38] <janus> oooh ok, that makes sense
[04:22:41] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:22:45] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[04:23:01] <janus> but just so that i can understand amazonkas view of these lens tradeoffs, it sounds like the ideal solution is to have non-underscored record field names, that are exported, and then have the consumer use generic-lens or generic-optics if they like. but they won't be forced to because the record selector will still be there
[04:23:38] <janus> and because the consumer generates their own lenses using the generic instance, amazonka won't need to rely on any optics library
[04:24:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:24:51] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[04:25:08] <jackdk> that's what I understand Brendan's view to be, yeah.
[04:25:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[04:26:02] <monochrom> janus: You can s/or/and/, young people in Hong Kong like to mix green tea with booze!
[04:26:25] *** Quits: jgeerds (~jgeerds@55d4090e.access.ecotel.net) (Ping timeout: 256 seconds)
[04:26:35] *** Quits: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b) (Remote host closed the connection)
[04:26:48] *** Joins: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b)
[04:27:00] *** [_] is now known as [itchyjunk]
[04:27:06] <janus> . o O ( maybe it will go through customs more easily like that )
[04:27:11] <jackdk> the tradeoff is the additional compile time for the Generic instance (which happens regardless, since it's too useful to omit) and some additional instance searching at the lens use site.
[04:27:37] <Axman6> Removing lens as a dep of amazonka would be great (as much as I love lens)
[04:28:20] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[04:28:32] <janus> right, seems like a sensible view! i just don't have any experience with generic-lens so i was surprised that such a high-profile library would go this route. but now that i understand the tradeoffs it seems totally sensible
[04:28:52] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[04:29:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:29:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:29:25] *** Joins: wroathe (~wroathe@user/wroathe)
[04:29:37] <janus> since the record field selectors are still exported, the most conservative can still opt out
[04:29:47] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::55f8)
[04:30:00] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[04:30:10] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce) (Ping timeout: 250 seconds)
[04:30:35] <awpr> where does the compiled and optimized code for generics-derived lenses live under this model?
[04:31:18] <Axman6> I think these days that generic-lens is a very sensible option, the performance of the lenses themselves is the same as what you'd write by hand, but there's probably some compilation time cost. But compiling lens as a dependency is also a massive cost
[04:31:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:31:38] <Axman6> probably at the usesite?
[04:31:41] <awpr> if amazonka has no dependency on a lens library, it can't be part of amazonka's modules.  that means it must be part of the client modules, in the form of instances specialized out of the ones in generic-lens
[04:31:47] <pfurla-matrix> what's the difference between generic vs TH lenses compile time?
[04:32:03] <awpr> which IIUC would mean you have to re-specialize-and-optimize them in every module that uses them
[04:32:07] <Axman6> not sure if they are defined in a type class, so there'd only be one instance of each lens
[04:33:12] <monochrom> Hahaha I'm re-doing <*> for Cont again (newtype Cont r a = Cont((a->r)->r)).  I now have the pointfree expression: Cont pf <*> Cont pa = Cont (pf . (pa .) . (.)).  No idea what it means now haha.
[04:33:13] <jackdk> interestingly, generic-lens doesn't depend on a lens library either - it implements its own definitions
[04:33:39] <awpr> even if they are in a class, it'd have to be a highly polymorphic instance vaguely similar to `(Generic a, HasField "abc" (Rep a)) => IsLabel "abc" (SomeLens a etc)`
[04:33:43] <Axman6> I guess the benefit is that you only pay for the lenses you actually use, instead of paying for the lens generation of every type in every package you use
[04:34:05] <Axman6> awpr: I think that's basically what it is
[04:34:21] <awpr> so either it's disastrously slow, or it still gets copied/specialized into every module that uses it
[04:34:28] <awpr> I'd assume the latter
[04:34:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:6819:b864:4bf9:4b6e)
[04:35:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[04:36:12] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[04:36:58] <jackdk> `field :: forall {field :: GHC.Types.Symbol} {s} {t} {a} {b} {f :: * -> *}. (HasField field s t a b, Functor f) => (a -> f b) -> s -> f t`
[04:38:30] <awpr> so if you hit the cases where Generic is slow, then suddenly every module downstream that uses a lens pays that tax on every compile, unless I'm missing some GHC magic to avoid re-specializing instances
[04:39:39] <awpr> it might be worth measuring some compile times and looking at some Core before assuming it'll be cheaper to have everyone downstream generate their own lenses vs. generating them up-front with TH in one place
[04:40:36] <jackdk> amazonka is a nasty case because it's so big. before the newtype/pattern synonym fix, the EC2 instances were represented by a 400+ member sum type
[04:40:57] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[04:40:59] <Axman6> I feel like that optimisation deserves a blog post on its own
[04:41:01] <jackdk> forcing people to generate every lens in every type in a service binding they use could well be worse
[04:41:17] *** Quits: jkaye (~jkaye@2601:281:200:1958:837d:401b:4a0:3b8f) (Ping timeout: 240 seconds)
[04:41:24] <awpr> so uh, Generic compilation costs tend to be quadratic-ish in the size of the type
[04:41:33] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:42:04] <jackdk> I kinda want to do it to our big enum of currency codes, for similar reasons. (we use an explicit Read instance because the stock one was noticeably slow in profiling)
[04:42:32] <Axman6> the fix Jack mentopned above significantly reduces those instances, by replacing enums with newtyped Text values and pattern synonyms, so the Generic instances become tiny
[04:42:32] <awpr> my personal threshold for assuming Generic will start causing problems in performance and/or compile times is somewhere in the range of 8-16 fields/constructors
[04:42:34] <jackdk> yeah so that giant sum type no longer exists, it's a newtype with a bunch of pattern synonyms. This also makes it robust to the launch of new instance types by aws
[04:43:04] <awpr> ah, yeah, that certainly improves things.  but still beware of very large types with Generic
[04:43:22] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[04:43:50] <jackdk> Were I to spitball a guess, I would say that the mean record size is probably 12, the median a fair bit lower, and probably a few really chonky ones out there
[04:44:15] <awpr> and it's not just in compiling the Generic instance itself, it's potentially in everything that gets specialized/optimized against that Generic instance -- e.g. a generics-based lens
[04:45:07] <jackdk> which will almost always be applied to a request or response type i.e. a record with no type variables derived from a boto service definition
[04:46:49] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 256 seconds)
[04:47:20] <awpr> 8 fields for me is where I've seen Generic methods start refusing to inline, so I'd definitely check Core at the call sites with generic-lens on maybe the 90th percentile records to see if it's actually managed to fuse everything down into something that looks like a hand-written lens
[04:47:40] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:49:01] <awpr> the largest record they test in the inspection test has 6 fields https://github.com/kcsongor/generic-lens/blob/master/generic-lens/test/Spec.hs
[04:49:12] <jackdk> https://dl.acm.org/doi/pdf/10.1145/3236780 Section 8 talks a lot about performance and the use of inspection testing
[04:49:35] <jackdk> unfortunately most of it is a description of how the techniques work as opposed to whether they rowk
[04:49:39] <jackdk> s/rowk/work/
[04:50:58] <jackdk> unfortunately their benchmarks are against other generic traversal libs and not direct field-accessor lenses
[04:51:15] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:51:48] *** Quits: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b) (Remote host closed the connection)
[04:52:02] *** Joins: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b)
[04:52:15] <jackdk> also, I should point out: if the large records are slow to generate and run lens code on, _and_ the use of lenses to fill out/read from your AWS api calls are a performance bottleneck, then it's possible to get the lenses emitted by the amazonka generator and use thos
[04:52:17] <jackdk> e*
[04:54:26] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:59:38] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[05:00:47] <Axman6> Does anyone know of a good pattern for running some code at application start without needing to have the user of a library call something like mySpecialMain in their main definiton? Thinking specifically about libraries which bind to C libraries which need some sort of initialisation before you use them
[05:00:48] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[05:01:04] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:01:42] <EvanR_> spooky action insertion injection
[05:02:13] <geekosaur> either a wrapper which uses bracket, or a monad whose initialization/"run" function does the init
[05:05:17] <Axman6> I'd love a way to inject something into the application initialisation. thought about doing something like initialise :: (); initialise = unsafePerformIO initCLib; myFunc :: Foo -> Bar; myFunc = initialise `seq` \foo -> ..., but that seems error prone
[05:05:38] <Axman6> NOINLINE and all the other nonsense
[05:05:43] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce)
[05:06:00] <EvanR_> override main, preferrably with a configurable hierarchy to maybe correctly order the actions among each other then run real main
[05:06:16] <EvanR_> when that fails, build a more terrible system to manage it
[05:06:26] <EvanR_> wait thats the other language
[05:06:41] <Axman6> C? Java?
[05:06:47] <EvanR_> ruby, php, python
[05:06:48] <geekosaur> sounds like a terrible sbuse of main-is: to me
[05:06:59] <geekosaur> *abuse
[05:07:02] <EvanR_> what, we can do that?
[05:07:06] <geekosaur> yep
[05:07:16] * EvanR_ attempts to hold the can of worms closed with all their might
[05:08:24] * jackdk grabs crowbar. Let's crack this bad boy open
[05:08:50] <EvanR_> even the likes of https://hackage.haskell.org/package/java-bridge-0.20130606.3/docs/Foreign-Java.html requires you to start using java with the runJava function
[05:09:09] <EvanR_> instead of injecting it before main
[05:09:55] <jackdk> Axman6: does the lib you are binding have a deinit()?
[05:09:58] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[05:10:01] *** Joins: faustind (~faustin@M014008067225.v4.enabler.ne.jp)
[05:10:08] <Axman6> I don't believe so
[05:10:19] <geekosaur> https://cabal.readthedocs.io/en/3.4/cabal-package.html#pkg-field-executable-main-is
[05:10:57] <geekosaur> which I believe also uses ghc's -main-is :)
[05:10:57] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce) (Ping timeout: 240 seconds)
[05:11:23] <EvanR_> my main is-
[05:11:31] <EvanR_> my main is-
[05:11:57] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[05:11:58] <jackdk> Axman6: is the init() in the lib idempotent?
[05:12:07] <jackdk> Just call it before each call =)
[05:12:08] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[05:16:48] *** Joins: notzmv (~zmv@user/notzmv)
[05:17:28] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[05:19:01] *** Quits: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b) (Remote host closed the connection)
[05:19:10] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[05:19:14] *** Joins: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b)
[05:21:03] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[05:25:38] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[05:29:15] <Axman6> EvanR_: the real Shim Shady?
[05:29:24] <EvanR_> wow...
[05:29:36] <Axman6> I'm here all week
[05:31:05] *** Joins: johnsonz (~bc8147f2@cerf.good1.com)
[05:32:28] *** Joins: razetime (~quassel@49.207.203.87)
[05:33:42] *** Joins: califax- (~califax@user/califx)
[05:34:32] *** Joins: notzmv (~zmv@user/notzmv)
[05:36:18] *** Quits: n3t (n3t@user/n3t) (Ping timeout: 256 seconds)
[05:36:52] *** Joins: benin (~benin@183.82.179.241)
[05:37:51] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:37:52] *** califax- is now known as califax
[05:40:27] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[05:41:52] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce)
[05:42:49] *** Joins: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f)
[05:43:40] *** Quits: slac74781 (~slack1256@186.11.27.197) (Ping timeout: 256 seconds)
[05:44:03] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[05:44:43] *** Quits: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b) (Remote host closed the connection)
[05:44:56] *** Joins: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b)
[05:45:47] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:d57f:4bb8:924b:5be3)
[05:45:57] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce) (Ping timeout: 240 seconds)
[05:50:51] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[05:53:57] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[05:55:22] <jackdk> @remember Axman6 EvanR_: my main is-, my main is-, Axman6: the real Shim Shady?
[05:55:22] <lambdabot> It is forever etched in my memory.
[05:56:05] <EvanR_> guess I'll fix my nick
[05:56:11] *** EvanR_ is now known as EvanR
[05:56:11] <Axman6> @quote Axman6
[05:56:11] <lambdabot> Axman6 says: let blah f x = f (blah f x) in blah ("blah "++) ""
[05:56:39] <Axman6> who @remembers that...
[05:56:56] <jackdk> blah
[05:57:16] <EvanR> > let blah f x = f (blah f x) in blah ("blah "++) ""
[05:57:18] <lambdabot>  "blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah ...
[05:59:02] *** Quits: xff0x (~xff0x@2001:1a81:525d:1e00:f1de:1cfe:e8a8:d6c0) (Ping timeout: 240 seconds)
[06:00:57] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::55f8) (Ping timeout: 240 seconds)
[06:01:04] *** Joins: xff0x (~xff0x@2001:1a81:5280:6800:37be:8663:af54:fc92)
[06:01:32] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:05:11] *** Quits: jenna8912 (~jenna@c-107-5-104-51.hsd1.mi.comcast.net) (Quit: Reconnecting)
[06:05:23] *** Joins: jenna8912 (~jenna@c-107-5-104-51.hsd1.mi.comcast.net)
[06:07:49] *** Joins: ukari (~ukari@user/ukari)
[06:10:18] *** Quits: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 256 seconds)
[06:11:25] *** Quits: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b) (Remote host closed the connection)
[06:11:39] *** Joins: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b)
[06:13:05] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:19:29] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[06:19:34] <romesrf> hey everyone
[06:21:47] <romesrf> i'm trying to call a function f :: (C x) => x -> ..., in which one of the instances of C is Text, with a string literal, however i get the "ambiguous type variable" error, even though no other IsString instances C
[06:22:39] <romesrf> maybe is there anyway to say that if I have a string literal then it should be Text? i was trying to avoid having to explicitly type the argument always
[06:24:59] <EvanR> extended defaulting rules?
[06:25:10] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[06:25:48] <romesrf> @EvanR could I apply the extended default rules just to this one function?
[06:25:48] <lambdabot> Unknown command, try @list
[06:26:18] *** Quits: Unode (~Unode@194.94.44.220) (Ping timeout: 260 seconds)
[06:26:19] <EvanR> um if it's one function why not put a type signature telling it you want Text
[06:26:52] <romesrf> it's a query class: a lot of things can mean a query, but when its a string literal, i want it to be text
[06:28:02] <romesrf> is it possible to use implications in the constraints? this doesn't work :) : IsString q => q ~ Text
[06:28:28] <EvanR> sounds like a bad interaction between two classes
[06:28:55] <EvanR> a utility function with an actual type signature is all I can think of
[06:30:06] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[06:31:05] <romesrf> right
[06:31:05] *** Quits: namkeleser (~namkelese@124.188.192.57) (Ping timeout: 256 seconds)
[06:31:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:31:32] *** Joins: Unode (~Unode@194.94.44.220)
[06:31:45] *** Joins: brettgilio (~brettgili@x-node.gq)
[06:43:38] *** bgamari_ is now known as bgamari
[06:48:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[06:49:41] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce)
[06:50:25] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:d445:4a94:576b:ee4c)
[06:51:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:52:30] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:52:48] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[06:54:28] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce) (Ping timeout: 250 seconds)
[06:54:59] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[06:55:21] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[06:58:35] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:d57f:4bb8:924b:5be3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:59:54] *** Joins: pavonia (~user@user/siracusa)
[07:02:38] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[07:02:58] *** Quits: raym (~raym@user/raym) (Ping timeout: 268 seconds)
[07:04:02] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[07:04:08] *** Quits: td_ (~td@muedsl-82-207-238-121.citykom.de) (Ping timeout: 256 seconds)
[07:05:57] *** Joins: td_ (~td@muedsl-82-207-238-049.citykom.de)
[07:06:13] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 256 seconds)
[07:07:37] *** Joins: mbuf (~Shakthi@122.174.254.114)
[07:07:41] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[07:08:40] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[07:09:25] *** Joins: raym (~raym@user/raym)
[07:13:57] *** Joins: fef (~thedawn@user/thedawn)
[07:21:18] *** Quits: razetime (~quassel@49.207.203.87) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:21:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:23:13] <d34df00d> Is there any library that considers n-ary tuples of the form (a, a, a) as traversables?
[07:23:42] <jackdk> Control.Lens.Each
[07:23:55] <jackdk> https://hackage.haskell.org/package/lens-5.0.1/docs/Control-Lens-Each.html
[07:24:36] *** Joins: seer (~delicacie@2601:6c4:4080:3f80:3467:b430:2332:6b36)
[07:24:39] *** seer is now known as Inst
[07:24:42] * Inst giggles
[07:24:53] <Inst> @evanr, I have a copy of The Craft of Functional Programming and I can see why you guys use it.
[07:24:53] <lambdabot> Unknown command, try @list
[07:25:16] <Inst> it's very newbie friendly and explains the fundamental concepts exceptionally well
[07:25:39] <Inst> also, in more entertaining news, I'm spying on someone's Python course
[07:25:40] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[07:25:56] <Inst> apparently the instructor complained because everyone decided to solve sieve of erastothenes via lists, objects, etc
[07:26:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[07:27:12] <d34df00d> lens of course.
[07:27:14] <Inst> this is an intro python course, btw
[07:27:15] *** Joins: raym (~raym@user/raym)
[07:27:16] <d34df00d> jackdk: thanks!
[07:27:22] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:27:22] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:27:22] *** finn_elija is now known as FinnElija
[07:27:57] <EvanR> yeah as exciting as some intro python course sounds right now what about haskell
[07:28:40] <Inst> busy, i need to lose weight
[07:28:46] <Inst> friend said she'd be available after her class finishes on the 24th
[07:29:14] <Inst> i'm still confused about algebraic data types, etc
[07:29:24] <Inst> defining FAM as a toolkit on type-constructed values is not incorrect, right?
[07:29:40] <Inst> or rather, values on which a type constructor is applied
[07:30:15] *** Quits: raym (~raym@user/raym) (Read error: Connection reset by peer)
[07:30:17] <EvanR> type ctors don't apply to values, since haskell doesn't have dependent types
[07:30:33] <EvanR> still
[07:30:35] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[07:31:17] <Inst> type-constructed types is still my preferred explanation, but it's wrong because you can have types that are type constructed types
[07:31:26] <EvanR> defining something as toolkit doesn't sound right, it doesn't even sound wrong!
[07:32:37] <monochrom> The flexibility of natural language.
[07:33:30] <Inst> is concrete type on which a type constructor has been applied correct?
[07:33:54] *** Joins: cheater (~Username@user/cheater)
[07:34:42] <Inst> i'm basically trying to make the "containers" metaphor correct, by making it less abstract and strictly concrete
[07:35:14] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[07:35:54] <Inst> the obvious exceptions are treating (->) r as a type, and therefore being allowed to fmap a function over a function
[07:36:13] <EvanR> (->) r can be considered a container
[07:36:14] <Inst> and data Proxy a = Proxy, where the types are retained, but the values are discarded
[07:36:26] <EvanR> container is the gift that keeps on giving
[07:36:44] <Inst> sort of equivalent to context in a certain way
[07:37:02] <Inst> container is just too concrete, whereas context is general enough to be correct, but too general to be understandable
[07:37:05] <EvanR> Proxy a can be considered a container that is always empty
[07:37:36] <EvanR> () is a container that always has a boring value with no information
[07:37:54] <boxscape_> hmm sad that I have to write  `do {foo <- action; let ?foo = foo; ...}` instead of `do {?foo <- action; ...}`
[07:38:37] <glguy> boxscape_: let ?foo is basically a completely separate thing. It's also not recursive, so you can do stuff like:   let ?foo = ?foo + 1 in (and it doesn't loop)
[07:38:46] <boxscape_> I see
[07:40:26] <EvanR> containers of type Void conspicuously don't exist
[07:40:30] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[07:40:37] <EvanR> but are still containers!
[07:41:26] *** Joins: Morrow (~Morrow@ool-1826f675.dyn.optonline.net)
[07:42:07] <Inst> https://bartoszmilewski.com/2014/01/14/functors-are-containers/
[07:42:18] <Inst> it's his preferred metaphor
[07:42:29] *** Quits: ukari (~ukari@user/ukari) (Remote host closed the connection)
[07:42:53] *** Joins: ukari (~ukari@user/ukari)
[07:43:01] <EvanR> yeah, it's a metaphor that can't fail
[07:43:18] <EvanR> sort of like an untyped, unchecked programming language xD
[07:44:22] <EvanR> everyone knows what a container is, so if you describe anything as one, they automatically understand you?
[07:49:37] *** Quits: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b) (Remote host closed the connection)
[07:49:51] *** Joins: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b)
[07:52:45] <Inst> defining FAM as f a / m a might be the easiest way about it
[07:53:25] <Inst> explain that f / m has bad notation, but it should be thought of as any type constructor for which the resulting type can have a legal functor / applicative / monad instance, as applicable
[07:53:37] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[07:57:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:58:36] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 250 seconds)
[07:59:41] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce)
[07:59:57] *** Joins: meer (~delicacie@2601:6c4:4080:3f80:40d5:abfe:845e:ad8f)
[08:00:29] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[08:00:52] *** Joins: deadmarshal (~deadmarsh@95.38.3.145)
[08:00:55] <lechner> Hi, do I have to force some kind of a rebuild in cabal after upgrading ghc? Some of my aeson types now generate Strings rather than Ints (via Generic). Something seems off
[08:01:39] <glguy> lechner: Different versions of aeson might have different APIs, though I don't know of a String vs Int change off the top of my head
[08:01:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[08:01:57] <glguy> you build in cabal using different versions of ghc would be largely unrelated
[08:02:05] <lechner> ok
[08:02:17] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:3467:b430:2332:6b36) (Ping timeout: 240 seconds)
[08:02:38] <glguy> Can you share some particular code that changed, or a type error , or something?
[08:03:20] <lechner> Error: Error in $.groups[0]['input_files'][0].hints[4].pointer['line_position']: parsing Int failed, expected Number, but encountered String
[08:03:51] <lechner> Same type (same file) for both receiver and sender
[08:03:57] <lechner> Maybe Int
[08:04:14] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce) (Ping timeout: 250 seconds)
[08:07:31] *** Quits: laslmtdwbcs^ (~laslmtdwb@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[08:09:17] <glguy> and what's the json value at that path?
[08:10:39] <lechner> "line_position" : "1"
[08:11:46] <lechner> it's interleaved with            "line_position" : 0     and      "line_position" : 15
[08:12:21] <glguy> so it should have been 1 but it was "1"?
[08:13:09] <lechner> yes, but maybe i'm misreading my logs. it's possible they arrive that way
[08:13:32] <c_wraith> that sounds like the sort of thing that would happen with JSON apis
[08:13:38] <lechner> it can't be Haskell!
[08:13:40] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:13:45] <c_wraith> clean data? Not in these parts!
[08:14:58] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[08:15:20] *** Quits: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b) (Remote host closed the connection)
[08:15:42] *** Joins: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b)
[08:15:56] <lechner> "JSON::XS will encode ... scalars that have last been used in a string context before encoding as JSON strings"     "and anything else as number value"
[08:16:01] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[08:17:00] <lechner> Haskell vs Perl:  "You can force the type to be a JSON number by numifying it:"
[08:17:57] <lechner> they suggest    $x += 0    or    $x *= 1
[08:18:03] <lechner> i love haskell
[08:18:22] * EvanR attempts to force "yahoo!" to be a number
[08:18:40] <EvanR> be a number dammit!
[08:20:36] <lechner> my son, age 8, thinks "one google" is a really large number
[08:20:51] <c_wraith> well...  that's not entirely wrong.  Just a matter of spelling.
[08:20:52] <glguy> Perl, the home of "0 but true"
[08:21:00] <c_wraith> "one googol" is a really large number.
[08:21:02] <ephemient> integers above 2^53 can't be easily represented as integers in JS (because that's outside of float64's integral range) so it's at least somewhat common to see guidelines to use strings in JSON instead
[08:21:24] <ephemient> e.g. Twitter's id_str because tweet IDs don't fit in JS integral range
[08:21:36] <glguy> yeah, sometimes I have really long files and I need my line numbers to be strings instead of imprecise floats *nod*
[08:22:19] <EvanR> stupid SQL should start counting by 2, and by 4 etc when they get to 2^53
[08:22:33] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:22:40] <EvanR> so it's webscale
[08:23:22] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[08:23:28] <ephemient> c_wraith: raku "fixes" that, `0 but true` becoming an actual first-class thing 🙃
[08:24:09] <c_wraith> ruby also has 0 as true
[08:24:38] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:25:06] <ephemient> I mean that Raku allows for `$x but $y` to mean "a value that behaves like $x if used in X-ly and behaves like $y if used Y-ly". what could possibly tgo wrong
[08:25:38] <ephemient> anyhow, I don't see a way to enable lenient parsing of JSON in Aeson…
[08:27:29] <ephemient> (iirc gson and jackson both happily deserialize strings to numbers if the target field is a number)
[08:27:42] <glguy> lenient parsing, when you find a string but didn't expect a string, parse it as more json and see if that helps
[08:28:04] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[08:28:11] <c_wraith> recursiver json
[08:28:39] <EvanR> FCC guidelines, your code should tolerate any garbage in it receives. Also your code should never produce garbage.
[08:29:15] <glguy> It'd  be cleaner if languges that didn't have proper number types represented the numbers they found in json as strings
[08:29:18] <c_wraith> It's amazing how much damage has been done because people believe Postel's law is a good idea
[08:29:22] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:29:49] <glguy> rather than languages with proper number types having to encode numbers as strings
[08:30:03] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:30:06] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[08:30:32] <Axman6> Google has some protocol, IIRC for replacing NTP, which has as part of its specification that servers _will_ send garbage occasionally, so that implementations are forced to actually deal with them
[08:31:06] <EvanR> nice, so you're violating the spec unless you send some garbage sometimes
[08:31:09] <EvanR> at least twice a week
[08:31:31] <glguy> panic: no panics
[08:32:08] *** Joins: Sgeo (~Sgeo@user/sgeo)
[08:33:29] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[08:34:24] *** ChanServ sets mode: -o Axman6
[08:34:46] <Axman6> Well that was fun while it lasted
[08:35:42] <ephemient> IIRC that's a thing in TLS 1.3 as well, sending random values in some places to try to prevent all the middleboxes from fixating on specific patterns that prevent further evolution of the protocol (since that's been a huge thorn in updating SSL)
[08:36:22] <ephemient> the real world sucks :(
[08:36:32] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:38:17] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[08:39:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:46:28] *** Joins: raym (~raym@user/raym)
[08:49:39] *** Joins: tommd (~tommd@67-42-147-226.ptld.qwest.net)
[08:54:09] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[08:56:57] <EvanR> and is deeply magical
[09:03:10] *** Quits: deadmarshal (~deadmarsh@95.38.3.145) (Ping timeout: 250 seconds)
[09:03:30] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[09:04:05] *** Quits: Morrow (~Morrow@ool-1826f675.dyn.optonline.net) (Ping timeout: 256 seconds)
[09:04:25] *** Joins: Morrow (~Morrow@ool-1826f675.dyn.optonline.net)
[09:05:47] *** Joins: xkuru (~xkuru@user/xkuru)
[09:07:17] *** Quits: xff0x (~xff0x@2001:1a81:5280:6800:37be:8663:af54:fc92) (Ping timeout: 240 seconds)
[09:08:03] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[09:08:16] *** Joins: xff0x (~xff0x@2001:1a81:5280:6800:a068:90b7:b174:1f03)
[09:09:54] <qrpnxz> Just realized my scanl can become a traversal with a State monad arrow. Don't know if this is for the better, but it's pretty cool.
[09:10:14] *** Joins: deadmarshal (~deadmarsh@95.38.3.145)
[09:12:34] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce)
[09:17:02] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce) (Ping timeout: 250 seconds)
[09:37:01] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[09:38:37] *** Quits: Morrow (~Morrow@ool-1826f675.dyn.optonline.net) (Ping timeout: 240 seconds)
[09:46:10] *** Joins: chomwitt (~chomwitt@2a02:587:dc0b:200:12c3:7bff:fe6d:d374)
[09:50:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:50:43] *** Joins: vglfr (~vglfr@88.155.46.9)
[09:51:57] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[09:57:07] *** Quits: tommd (~tommd@67-42-147-226.ptld.qwest.net) (Remote host closed the connection)
[09:57:16] *** Joins: tommd (~tommd@67-42-147-226.ptld.qwest.net)
[09:57:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:57:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:57:56] *** Joins: wroathe (~wroathe@user/wroathe)
[10:00:13] *** Quits: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de) (Quit: Connection closed)
[10:02:24] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:c8cd:ea83:c8cd:4ca3)
[10:03:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:03:16] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:03:32] <pavonia> Is there a function in base to efficiently test if a list has a length of at least n elements?
[10:05:22] *** Joins: Morrow (~Morrow@ool-1826f675.dyn.optonline.net)
[10:07:02] <ephemient> not . null . drop (n - 1)
[10:10:40] <pavonia> Hhm, interesting
[10:11:16] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[10:18:22] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:18:40] *** Joins: wei2912 (~wei2912@138.75.71.147)
[10:19:00] *** Joins: _ht (~quassel@2a02:a468:b619:1:4334:88f2:ba01:c6e)
[10:19:12] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[10:22:17] *** Quits: vglfr (~vglfr@88.155.46.9) (Ping timeout: 256 seconds)
[10:26:23] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce)
[10:31:08] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce) (Ping timeout: 250 seconds)
[10:31:34] *** Quits: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:9952:728:f039:79c2) (Ping timeout: 250 seconds)
[10:31:53] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[10:33:03] *** Quits: tommd (~tommd@67-42-147-226.ptld.qwest.net) (Ping timeout: 256 seconds)
[10:41:43] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[10:41:59] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[10:42:33] *** Joins: Akiva (~Akiva@user/Akiva)
[10:44:16] *** Joins: Guest8079 (~Guest80@host-79-36-216-236.retail.telecomitalia.it)
[10:44:49] *** Quits: dut (~dut@user/dut) (Read error: Connection reset by peer)
[10:45:42] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[10:54:20] *** Joins: dut (~dut@user/dut)
[10:54:50] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 268 seconds)
[10:55:16] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:59:40] *** Joins: cyphase (~cyphase@user/cyphase)
[10:59:45] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:02:41] *** Quits: wei2912 (~wei2912@138.75.71.147) (Remote host closed the connection)
[11:02:58] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[11:03:12] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[11:06:05] *** Joins: Erutuon (~Erutuon@user/erutuon)
[11:06:57] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[11:07:06] *** Joins: razetime (~quassel@49.207.203.87)
[11:09:01] *** Quits: chomwitt (~chomwitt@2a02:587:dc0b:200:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[11:10:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:11:27] *** Joins: fendor (~fendor@77.119.169.94.wireless.dyn.drei.com)
[11:11:34] *** Joins: you (~ShmoSeph@173-167-220-193-ip-static.hfc.comcastbusiness.net)
[11:11:35] *** Joins: michalz (~michalz@185.246.204.107)
[11:12:18] *** Joins: n3t (n3t@s45.mydevil.net)
[11:12:54] *** Quits: dolio (~dolio@130.44.130.54) (Ping timeout: 256 seconds)
[11:13:06] *** Joins: dolio (~dolio@130.44.130.54)
[11:14:54] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[11:15:29] *** Joins: spaceseller (~spacesell@31.147.205.13)
[11:16:13] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:18:47] *** Quits: johnsonz (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[11:21:21] *** Quits: deadmarshal (~deadmarsh@95.38.3.145) (Ping timeout: 268 seconds)
[11:22:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[11:24:46] *** Joins: simendsjo (~user@84.211.91.241)
[11:25:36] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[11:26:10] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[11:26:25] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:26:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:27:35] *** Quits: obfusk_ (~quassel@a82-161-150-56.adsl.xs4all.nl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:27:58] *** Joins: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl)
[11:28:27] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[11:28:38] *** Joins: jespada (~jespada@87.74.36.188)
[11:28:46] *** Joins: d0ku (~d0ku@178.43.152.233.ipv4.supernova.orange.pl)
[11:30:33] *** Joins: mncheck (~mncheck@193.224.205.254)
[11:30:36] *** Quits: mncheck (~mncheck@193.224.205.254) (Remote host closed the connection)
[11:32:20] *** Joins: zaquest (~notzaques@5.130.79.72)
[11:34:00] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[11:36:36] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[11:37:34] *** Joins: ubert (~Thunderbi@p200300ecdf099440f4ae4d8df8b0fc6d.dip0.t-ipconnect.de)
[11:39:31] *** Joins: alp (~alp@user/alp)
[11:40:36] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[11:44:29] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce)
[11:47:57] *** Quits: shapr (~user@2601:7c0:c37c:46d0:d31:791c:8c24:e54b) (Ping timeout: 240 seconds)
[11:49:08] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[11:51:36] *** Joins: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr)
[11:54:43] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:58:47] *** Joins: monochrom (trebla@216.138.220.146)
[11:59:03] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[11:59:57] *** Quits: Morrow (~Morrow@ool-1826f675.dyn.optonline.net) (Ping timeout: 240 seconds)
[12:00:39] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[12:02:08] *** Joins: cfricke (~cfricke@user/cfricke)
[12:03:48] *** Joins: chele (~chele@user/chele)
[12:08:37] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[12:09:47] *** Quits: neverwas (jpneverwas@swissbox.unperson.link) (Remote host closed the connection)
[12:10:50] <gentauro> anybody know if `long_list_align: multiline` is "disabled" in `stylish-haskell +0.12`?
[12:11:42] <gentauro> it seems to go for `inline` no matter which value I assign to `long_list_align`
[12:17:29] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:6819:b864:4bf9:4b6e) (Remote host closed the connection)
[12:19:49] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:20:49] *** Parts: spaceseller (~spacesell@31.147.205.13) (Leaving)
[12:22:09] <meer> also evanr: why the hell do people not recommend Haskell: The Craft of Functional Programming?
[12:22:12] <meer> It's a GREAT book
[12:22:14] *** meer is now known as Inst
[12:22:30] <Inst> It's a shame it's obsolete
[12:22:40] <Inst> or rather pretty damn old, it's just going through a lot of comp sci concepts
[12:24:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:24:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:24:12] *** Joins: wroathe (~wroathe@user/wroathe)
[12:25:25] <caro> Ho I didn't know this book :D
[12:25:41] *** Joins: max22- (~maxime@2a01cb0883359800fa0f988ba1000107.ipv6.abo.wanadoo.fr)
[12:26:36] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:27:20] *** Joins: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be)
[12:28:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[12:30:31] <Inst> https://www.amazon.com/Haskell-Functional-Programming-International-Computer/dp/0201882957
[12:30:39] <Inst> it's more for my needs, i.e, looking for intro comp sci with Haskell book
[12:30:53] <Inst> also ANU's needs, they use it in their intro comp sci with Haskell book
[12:30:58] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[12:32:26] *** Joins: Erutuon (~Erutuon@user/erutuon)
[12:32:42] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:35:37] *** Joins: kuribas (~user@ptr-25vy0i99jv0pb0h8fdc.18120a2.ip6.access.telenet.be)
[12:36:44] * tomsmeding reads that URL and sees "International Computer", *nods*
[12:42:38] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[12:45:42] *** Joins: briandaed (~briandaed@185.234.208.208.r.toneticgroup.pl)
[12:46:39] <caro> I have found the PDF :D
[12:47:44] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:44] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:47] *** allbery_b is now known as geekosaur
[12:49:37] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 240 seconds)
[12:49:57] *** Quits: you (~ShmoSeph@173-167-220-193-ip-static.hfc.comcastbusiness.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:50:22] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[12:53:01] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[12:53:25] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[12:54:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:54:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:54:59] *** Joins: wroathe (~wroathe@user/wroathe)
[12:57:05] *** Joins: neverwas (jpneverwas@swissbox.unperson.link)
[12:59:15] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[12:59:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[13:01:45] *** AlexNoo_ is now known as AlexNoo
[13:03:40] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[13:04:10] *** Joins: you (~ShmoSeph@173-167-220-193-ip-static.hfc.comcastbusiness.net)
[13:04:34] *** Quits: razetime (~quassel@49.207.203.87) (Read error: Connection reset by peer)
[13:04:45] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[13:04:55] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 256 seconds)
[13:05:21] *** Joins: gdd (~gdd@129.199.146.230)
[13:05:47] *** Joins: razetime (~quassel@49.207.203.87)
[13:09:27] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[13:10:49] <Axman6> We generaqlly don't encourage stealing the creative works of people that have contributed to the Haskell community so substancially caro. If you want to be that sort of person, then keep it to yourself
[13:13:11] *** Quits: phma (phma@2001:5b0:215d:e318:4fbc:412:b7cd:6bd5) (Read error: Connection reset by peer)
[13:13:36] *** Joins: phma (phma@2001:5b0:215d:e318:4fbc:412:b7cd:6bd5)
[13:13:44] <you> huh?
[13:14:05] *** Joins: mmhat (~mmh@55d49b67.access.ecotel.net)
[13:18:12] *** Joins: pera (~pera@user/pera)
[13:18:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a5:7793:d27c:8dec)
[13:18:36] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-113.wlan.tudelft.nl)
[13:21:12] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:8fb:65a6:c5ec:35ce) (Quit: WeeChat 3.4)
[13:21:37] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 240 seconds)
[13:22:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b4a5:7793:d27c:8dec) (Ping timeout: 240 seconds)
[13:22:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[13:25:17] *** Joins: __monty__ (~toonn@user/toonn)
[13:25:47] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:25:47] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:25:47] *** Joins: wroathe (~wroathe@user/wroathe)
[13:25:53] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[13:26:05] *** Quits: you (~ShmoSeph@173-167-220-193-ip-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[13:29:53] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[13:30:03] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[13:30:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[13:34:31] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:36:35] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[13:39:39] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[13:41:45] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:46:22] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:54:24] <maerwald> Axman6: stealing?
[13:56:33] *** Joins: wroathe (~wroathe@user/wroathe)
[14:01:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:03:05] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[14:06:43] <[exa]> you wouldn't steal a haskell
[14:06:46] <nshepperd> piracy on the high seas
[14:08:02] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[14:08:37] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7985:a982:d93:11f)
[14:09:01] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[14:10:01] <maerwald> whether downloading a PDF from the internet, that is under copyright, is really stealing isn't an easy call and depends on country etc.
[14:10:10] *** Quits: razetime (~quassel@49.207.203.87) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:10:18] <maerwald> better to not make assumptions
[14:10:45] <maerwald> the author also might have given explicit permission to certain websites
[14:13:18] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:14:14] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:16:08] *** Lord_of_Life_ is now known as Lord_of_Life
[14:19:30] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::55f8)
[14:22:10] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 256 seconds)
[14:25:17] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:40d5:abfe:845e:ad8f) (Ping timeout: 240 seconds)
[14:25:34] *** Quits: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr) (Ping timeout: 256 seconds)
[14:25:57] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[14:27:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:27:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:27:20] *** Joins: wroathe (~wroathe@user/wroathe)
[14:31:05] *** Joins: alx741 (~alx741@157.100.93.160)
[14:32:11] *** Joins: ardell (~ardell@user/ardell)
[14:32:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:33:53] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[14:34:04] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[14:35:42] *** Joins: raym (~raym@user/raym)
[14:37:11] *** Joins: ksqsf (~user@2001:da8:d800:611:c47:42e1:e1e6:df73)
[14:40:31] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:295b:27c3:87b1:2b8f)
[14:40:37] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::55f8) (Ping timeout: 240 seconds)
[14:49:34] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[14:49:50] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[14:52:42] <ski> (stealing implies removing access)
[14:53:51] *** Quits: phma (phma@2001:5b0:215d:e318:4fbc:412:b7cd:6bd5) (Read error: Connection reset by peer)
[14:54:19] <[exa]> [high profile music brand lawyer voice:] rEmOvInG AcCeSs tO rEvEnUe MoNeYs!!
[14:54:52] *** Joins: fef (~thedawn@user/thedawn)
[14:55:21] *** Joins: vysn (~vysn@user/vysn)
[14:55:59] *** Quits: michalz (~michalz@185.246.204.107) (Ping timeout: 256 seconds)
[14:57:29] *** Joins: rusrushal13 (~rusrushal@2409:4056:193:1b10:a38a:9a8:8f21:e6f1)
[15:02:42] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[15:04:00] *** Joins: michalz (~michalz@185.246.204.37)
[15:04:18] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:04:18] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:04:18] *** Joins: wroathe (~wroathe@user/wroathe)
[15:04:33] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:7937:b295:da60:ef94)
[15:08:12] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[15:09:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:14:26] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[15:15:15] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[15:16:19] <absence> has anyone used nix to build docker images from haskell code? i have this peculiar problem that if my .cabal file contains both an executable and a library (only used by the executable), the resulting docker image contains ghc, gcc, +++ and is enormous, whereas if the .cabal file only contains an executable, the docker image contains only what's necessary and is relatively small
[15:17:44] <absence> i imagine it's something about libraries depending on ghc because they're not particularily useful on their own
[15:19:32] <maerwald> if you link dynamically maybe
[15:19:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e9df:c2d7:9ffb:4631)
[15:20:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[15:23:54] <jackdk> statically link with haskell.nix, but mind lgpl concerns if you distribute images
[15:24:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e9df:c2d7:9ffb:4631) (Ping timeout: 240 seconds)
[15:25:32] *** Quits: ksqsf (~user@2001:da8:d800:611:c47:42e1:e1e6:df73) (Ping timeout: 240 seconds)
[15:25:46] <absence> hm, not sure i understand. the executable and the library are both "my" code, why would there be lgpl concerns? just to make sure we're on the same page, everything works if i only have an executable in the cabal file. the problems only occur if i add a library as well
[15:27:06] <[exa]> absence: you might be packing up and distributing other people's code too, if you have dependencies
[15:27:23] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Remote host closed the connection)
[15:29:42] <absence> [exa]: sure, but that's true in general? anyway, for the sake of argument, let's say i have no dependencies, because this is reproducable when only depending on base
[15:30:53] <[exa]> then I guess you should be okay
[15:31:15] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[15:31:19] <[exa]> the point was to remember checking licenses if you decide to pack a statically linked blob and send it to people
[15:31:22] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:32:50] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[15:33:19] <absence> i don't think i will be doing that, i just want to make a docker image that doesn't include ghc and an entire build environment
[15:33:55] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:34:01] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[15:34:08] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[15:37:39] <yushyin> gmp is lgpl3/gpl2
[15:38:29] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[15:39:55] *** Quits: dut (~dut@user/dut) (Quit: Leaving)
[15:40:02] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Ping timeout: 240 seconds)
[15:43:17] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[15:43:32] *** Joins: johnsonz (~bc8147f2@cerf.good1.com)
[15:44:37] *** Quits: pera (~pera@user/pera) (Ping timeout: 240 seconds)
[15:47:29] *** Joins: ksqsf (~user@2001:da8:d800:604:d415:c6b:884d:7d38)
[15:48:49] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[15:49:31] *** Joins: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr)
[15:50:56] *** Quits: Guest8079 (~Guest80@host-79-36-216-236.retail.telecomitalia.it) (Quit: Client closed)
[15:51:29] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:52:04] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:55:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[15:57:13] *** Joins: Morrow (~Morrow@ool-1826f675.dyn.optonline.net)
[16:12:24] *** Joins: Guest9668 (~Guest96@144-124-99-115.pip.aber.ac.uk)
[16:13:09] <Guest9668> Anyone able to hop in a dm and help me out with some code?
[16:15:01] *** Joins: cfricke (~cfricke@user/cfricke)
[16:15:23] <Guest9668> Hello?
[16:15:50] * ski . o O ( Don't ask to ask )
[16:15:52] <[exa]> what's the problem?
[16:16:17] <hpc> instead ask to ask to ask :D
[16:16:18] <Guest9668> If I send some code in DM could you help me get it working?
[16:16:32] <hpc> you can use the paste site in the topic and post it here
[16:17:13] <ski> i'd think many people would want to know more about the problem, before deciding that they may be able to offer help/advice
[16:17:57] <Guest9668> https://paste.tomsmeding.com/RCVPaXMr
[16:18:16] <[exa]> uuh is that an exam? :]
[16:18:31] <Guest9668> open book
[16:18:55] <ski> `x' is an element of the list. it has type `a'
[16:19:07] <ski> what is the expected return type of the function ?
[16:19:33] <Guest9668> char
[16:20:20] <ski> it doesn't look to me like `get n xs' would have type `Char'
[16:20:59] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 256 seconds)
[16:22:01] <Guest9668> If possible, the function is supposed to return the item at position n in a list
[16:22:33] <ski> yea, that was already obvious
[16:22:48] *** Joins: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl)
[16:22:48] *** Joins: ub (~Thunderbi@p200300ecdf0994402d77270a91cab57e.dip0.t-ipconnect.de)
[16:22:49] <Guest9668> My bad, I just thought it would help
[16:23:11] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[16:23:15] <[exa]> how does the function differentiate between returning "negative" and "positive" answer?
[16:23:46] <[exa]> for negative you have already Nothign there, what would you expect in the positive case? (danger: it needs to have the same type as Nothing)
[16:24:28] * ski 's pretty sure most of us already know how to fix the code .. the problem is rather, how to guide you towards the answer in the most helpful way, without spoiling it, by simply blurting it out
[16:25:07] <Guest9668> I understand, I'm not expecting to be spoon fed answers, rather be guided to a correct solution
[16:25:25] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:25:34] <[exa]> we might translate the compiler message to something a bit more readable tho
[16:25:44] <Guest9668> Yeah thats my main struggle with Haskell
[16:26:12] <[exa]> in short it complains that e.g. `get n [1,2,3,4,5]` can return either `5` or `Nothing` which is not the same type, thus it breaks typechecking
[16:26:35] <Guest9668> In response to what you said about negative and positive answer, what do you mean? negative as no answer and positive as any int?
[16:26:44] <ski> yes
[16:26:51] <Guest9668> thats what I thought, Im just unsure what to do to solve it
[16:27:02] <ski> failure (to find the element) vs. success (element find)
[16:27:03] <Guest9668> make it return 0 intead of nothing?
[16:27:18] <ski> what if there's a `0' as an element in the list ?
[16:27:32] <[exa]> have a look at the type signature above, what is the _type_ it returns? (googling the definition of that type will guide you)
[16:27:42] <ski> what if the list doesn't contain numbers ?
[16:27:47] <Hecate> Guest9668: is Dr. Clare still in charge of the Haskell module at Aberystwyth?
[16:29:29] <Guest9668> ?
[16:29:41] *** Quits: max22- (~maxime@2a01cb0883359800fa0f988ba1000107.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:30:44] *** Quits: Alex_test (~al_test@94.233.241.14) (Quit: ;-)
[16:30:47] *** Quits: AlexZenon (~alzenon@94.233.241.14) (Quit: ;-)
[16:31:03] *** Quits: AlexNoo (~AlexNoo@94.233.241.14) (Quit: Leaving)
[16:31:41] <Guest9668> Can I just return null? https://wiki.haskell.org/Maybe
[16:31:53] <Guest9668> [exa]
[16:32:18] <ski> there is no "null" in Haskell, in the sense of `null' in Java, `NULL' in C, and similar in various other languages
[16:32:51] <ski> the closest in this context would be `Nothing' (but there's important differences)
[16:33:17] <[exa]> Guest9668: the "null" is Nothing, that's right, you're having problems with the non-null case
[16:33:20] <ski> @src Maybe
[16:33:20] <lambdabot> data Maybe a = Nothing | Just a
[16:34:04] *** Joins: jkaye (~jkaye@2601:281:200:1958:dab2:e344:8506:e5dc)
[16:34:21] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[16:34:53] <Guest9668> [exa]: So what line is that issue on? `get :: Int -> [a] -> Maybe a` ?
[16:34:57] <ski> @type [2 :: Int,Nothing,3 :: Int]
[16:34:58] <lambdabot> error:
[16:34:58] <lambdabot>     • Couldn't match expected type ‘Int’ with actual type ‘Maybe a0’
[16:34:58] <lambdabot>     • In the expression: Nothing
[16:35:06] <ski> @type [Just (2 :: Int),Nothing,Just (3 :: Int)]
[16:35:08] <lambdabot> [Maybe Int]
[16:35:37] <ski> Guest9668 : the error message indicates that it's found a problem on a specific line
[16:35:48] <Guest9668> 5
[16:35:59] <Guest9668> '5 | get 0 (x:xs) = x'
[16:36:10] <ski> first task is to understand the problem that it's found
[16:36:35] <ski> next, to determine whether an appropriate change should be applied there, or perhaps somewhere else (maybe multiple places)
[16:36:50] <Guest9668> so the nothing is fine, the error is where there's a value to return?
[16:37:29] <ski> all defining equations ("branches") of a function definition must return values of the same single common return type
[16:38:20] *** Quits: jkaye (~jkaye@2601:281:200:1958:dab2:e344:8506:e5dc) (Remote host closed the connection)
[16:38:34] *** Joins: jkaye (~jkaye@2601:281:200:1958:3ec:48cd:412b:4566)
[16:38:35] *** Joins: fef (~thedawn@user/thedawn)
[16:39:20] <ski> (also, if there's a type signature, then the specified return type there must also agree with the common return type of the defining equations)
[16:40:20] *** Quits: jkaye (~jkaye@2601:281:200:1958:3ec:48cd:412b:4566) (Remote host closed the connection)
[16:40:37] *** Joins: fendor_ (~fendor@178.165.192.6.wireless.dyn.drei.com)
[16:40:57] <Guest9668> That makes sense in a programmatic sense, I just dont understand how to apply that to haskell
[16:41:18] <ski> what is the specified return type, in the type signature ?
[16:41:39] <[exa]> hint: ^this is a good question^
[16:42:00] <Guest9668> int?
[16:42:10] <[exa]> is Nothing an int?
[16:42:13] <ski> (next question would be : what is the actual return type, for each of the three defining equations ?)
[16:42:27] <Guest9668> no it is not. THere is no return type?
[16:42:46] <ski> you know how to read type signatures ?
[16:43:16] *** Quits: fendor (~fendor@77.119.169.94.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[16:44:24] <ski> @type take
[16:44:25] <lambdabot> Int -> [a] -> [a]
[16:44:26] <Guest9668> I think so?
[16:44:45] <Guest9668> idk this shit always makes me doubt what I can actually do...
[16:44:50] <ski> this means that a corresponding type signature for `take' would be
[16:45:03] <[exa]> Guest9668: what's the type signature for your `get`? (It's written up there)
[16:45:17] <ski>   take :: Int -> [a] -> [a]
[16:45:18] <ski>                         ^^^
[16:45:34] <ski> that is the return type, when calling `take n xs'
[16:45:50] <ski> (assuming `n' is an `Int', and `xs' a list of `a's)
[16:45:52] <Guest9668> a list of something but it doesnt specify
[16:45:55] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:46:06] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 256 seconds)
[16:46:20] <Guest9668> Would it work if I changed the Nothing to an _?
[16:46:24] <ski> no
[16:46:37] <Guest9668> Oh ok
[16:47:13] <ski> try answering [exa]'s question ?
[16:47:49] <Guest9668> @type get
[16:47:50] <lambdabot> MonadState s m => m s
[16:47:58] <ski> that's another `get', not your `get'
[16:48:59] <ski> (oh, and functions always have return types)
[16:49:21] <Guest9668> I know, doesnt haskell 'guess' the type if its not specified?
[16:49:39] <ski> yes, it infers it (from the code/implementation)
[16:50:03] <[exa]> it "guesses" it in a very deterministic way
[16:50:16] <[exa]> (which doesn't really involve much guessing)
[16:50:16] <ski> (it infers the return type of each defining equation, and checks that they all agree)
[16:51:08] <Guest9668> yeah I thought so
[16:52:13] <ski> anyway, you still haven't answered what the type signature of your `get' is
[16:52:30] <Guest9668> an int or nothing?
[16:52:53] <ski> `get' is a function, so the answer should look something like `get :: ... -> ...'
[16:53:37] <Guest9668> oh no it takes an int and outputs an item, so get:: int -> Maybe a?
[16:53:46] <ski> (`Nothing' is not a type, so it would be incorrect to attempt to include it in a type signature of a function `get')
[16:53:50] <Guest9668> idk if im being completely stupid rn
[16:53:56] <ski> well ..
[16:53:58] <Guest9668> oh no it takes an int and outputs an item, so get:: int -> string?
[16:54:15] <ski> .. the answer to [exa]'s question is literally spelled out in your paste
[16:54:16] <[exa]> Guest9668: the questions are easier than they look. Actually you can copypaste the answer from your code
[16:54:41] *** Joins: AlexZenon (~alzenon@94.233.241.14)
[16:55:08] <Guest9668> [exa]: I dont understand what you mean by that?
[16:55:15] *** Joins: AlexNoo (~AlexNoo@94.233.241.14)
[16:55:42] <[exa]> that the type signature that you should be looking at is already in your code, you just need to read the proper return type out of it
[16:56:06] <ski> the answer to "what's the type signature for your `get`?" can be copied over from your paste. you just need to understand what is asked for, and understand which part of the paste answers the question
[16:56:25] *** Quits: johnsonz (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[16:57:02] <Guest9668> my code paste?
[16:57:06] <ski> yes
[16:57:18] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[16:57:27] *** Joins: Alex_test (~al_test@94.233.241.14)
[16:57:30] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Excess Flood)
[16:57:52] <ski> (oh, and don't worry if things seem confusing at first. it's to a large degree here a matter of becoming used to the terms, concepts, distinctions)
[16:58:05] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[16:58:19] <Guest9668> yes, im finding it much more difficult than other languages I know
[16:58:34] <Guest9668> `get :: Int -> [a]`
[16:58:56] <ski> that claims that `get', if passed an `Int' as argument, will return a list of (`a's)
[16:59:03] <[exa]> that's not the whole signature
[16:59:15] <Guest9668> `get :: Int -> [a] -> Maybe a`
[16:59:18] <[exa]> oh nice
[16:59:19] <ski> however, your code actually specifies that `get' is to be passed both an `Int', and something else, as input arguments
[16:59:22] <ski> yes
[16:59:27] <ski> cheers ! :)
[16:59:36] <[exa]> now what part of that is the return type? (see ski's spoiler above)
[16:59:43] <ski> ok. next step .. what [exa] just said
[17:00:13] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:00:13] <Guest9668> the last bit is the return type
[17:00:21] <ski> that last bit being ?
[17:00:33] <Guest9668> `-> Maybe a`
[17:00:37] <Guest9668> but maybe isnt a type
[17:00:37] <ski> almost
[17:00:39] <Guest9668> so the a
[17:00:51] <ski> the `->' there is not part of the return type
[17:00:58] <Guest9668> `a`
[17:01:00] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Remote host closed the connection)
[17:01:09] <ski> why do you think `Maybe' is not a type ?
[17:01:24] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:01:32] <Guest9668> Oh I got confused by what you said about Nothing not being a type
[17:01:32] <ski> clearly `Maybe' means *something*, right ?
[17:01:35] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[17:01:37] <Guest9668> yes
[17:02:36] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[17:02:38] <ski> take e.g. the list `[Just (2 :: Int),Nothing,Just (3 :: Int)]' from above. it's a list of elements of type `Maybe Int'. each element is "maybe an `Int'"
[17:02:52] <ski> so, `Maybe Int' is a type here
[17:03:18] <Guest9668> @type Maybe Int
[17:03:19] <lambdabot> error:
[17:03:19] <lambdabot>     • Data constructor not in scope: Maybe :: t0 -> t
[17:03:19] <lambdabot>     • Perhaps you meant variable ‘maybe’ (imported from Data.Maybe)
[17:03:27] <Guest9668> @type Maybe
[17:03:28] <lambdabot> error:
[17:03:28] <lambdabot>     • Data constructor not in scope: Maybe
[17:03:28] <lambdabot>     • Perhaps you meant variable ‘maybe’ (imported from Data.Maybe)
[17:04:07] <ski> well, values have types. types have "kinds"
[17:04:13] <ski> @kind Int
[17:04:14] <lambdabot> *
[17:04:15] <ski> @kind Maybe Int
[17:04:16] <lambdabot> *
[17:04:17] <ski> @kind Maybe
[17:04:18] <lambdabot> * -> *
[17:04:34] <Guest9668> Could you explain that, sorry
[17:04:38] <ski> `Maybe' is a "type function". given the type `Int' as input, it gives the type `Maybe Int'
[17:04:56] <Guest9668> ok
[17:05:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[17:05:42] <ski> anyway .. this stuff (kinds) is slightly more advanced than the basic things you're dealing with, in your problem
[17:05:55] *** Joins: razetime (~quassel@49.207.203.87)
[17:06:16] <Guest9668> Oh so I shouldn't worry about it then?
[17:06:21] <[exa]> Guest9668: anyway, can you make up some values that would have type `Maybe Int`?
[17:06:30] *** Quits: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl) (Ping timeout: 256 seconds)
[17:06:45] <Guest9668> 5?
[17:06:48] <ski> (iow, thinking about kinds probably will not help you much, at this point. i only mentioned it, because you tried `@type Maybe' and `@type Maybe Int')
[17:06:50] <[exa]> @type 5
[17:06:51] <lambdabot> Num p => p
[17:06:54] <[exa]> no.
[17:07:24] <Guest9668> ouch
[17:08:03] <ski> (hint : possible answers to [exa]'s last question follow from stuff which was recently mentioned above)
[17:08:13] <Guest9668> So either its the value at that index in the list or it's Nothing
[17:08:34] <[exa]> yes Nothing is a great example value of Maybe Int
[17:09:03] <Guest9668> so the change I need to make is on line 3?
[17:09:13] <ski> @type Nothing :: Maybe Int  -- checking if `Nothing' can have type `Maybe Int'
[17:09:14] <lambdabot> Maybe Int
[17:09:29] <[exa]> now say you want to return 123, but you need it to be compatible with Nothing, because both need to have type `Maybe Int`
[17:09:55] <Guest9668> so instead of maybe a, I need `Maybe Int`?
[17:10:12] <[exa]> no, we're just demonstrating it on a==Int, for simplicity
[17:10:20] <ski> `Int' is just an example. your function is supposed to be able to deal with lists of values of all sorts of types
[17:10:44] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[17:11:38] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:12:03] <Guest9668> I understand what you're saying, I'm just even more confused now because I can't see what needs to be change
[17:12:04] <Guest9668> d
[17:12:43] <ski> (perhaps it might be nicer to take lists of `String's (to avoid confusion between two different uses of `Int' here, and avoid confusion due to overloaded numeric literals) ..)
[17:12:55] <[exa]> Guest9668: we're trying to produce an explanation of the error first before jumping to conclusions and fixes
[17:12:57] <ski> Guest9668 : first step is to understand the problem
[17:13:34] <Guest9668> I thought the problem was that the types dont match
[17:13:49] <ski> yes .. but why don't they match ?
[17:13:57] <ski> what is the underlying cause ?
[17:14:01] <Guest9668> because they aren't specified?
[17:14:16] <ski> (or, if you prefer, what is the underlying misconception or confusion ?)
[17:14:56] <Guest9668> I'm not sure
[17:15:09] <Guest9668> could you write out a similar example in python or c?
[17:15:35] <ski> the problem is not that you haven't specified your types enough. the problem is that there's an actual (type) mismatch between locations in your code. an inconsistency, they don't agree about how values are to be treated
[17:16:02] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:16:13] <Guest9668> do you mean line 4 returns nothing and 5 and 6 return a?
[17:16:46] <[exa]> hm, in C++, it would be something like:  template<typename a> std::optional<a> get(int n, std::list<a> xs) {....}
[17:17:16] <[exa]> that would return either `std::nullopt` or `std::make_optional(somenumber)`
[17:18:01] <tomsmeding> [exa]: downside to that example: std::optional has a non-explicit constructor taking an 'a', so the std::make_optional can be elided
[17:18:16] <ski> you could use something like `struct {enum {nothing,just} tag; union {void *dummy; double value; } u;} get(int n,double xs[n]);', i suppose ..
[17:18:31] <[exa]> tomsmeding: it was approximate, yeah.
[17:18:34] <Guest9668> ok those are even more confusing lmao
[17:18:53] <[exa]> luckily haskell allows very simple encoding of all these things. :]
[17:19:08] <[exa]> anyway, let's summarize
[17:19:19] <[exa]> we have a datatype `data Maybe a = Nothing | Just a`
[17:19:32] <[exa]> then we have a value Nothing that is of type `Maybe Int`
[17:19:39] <[exa]> then we have `5` that is not of type `Maybe Int`
[17:20:01] <Guest9668> yes
[17:20:03] <[exa]> and we need some small helper to convert 5 to a type `Maybe Int`
[17:20:19] <[exa]> which ski used several times in his examples already
[17:20:46] <[exa]> btw yeah the problem is simple but most of us are giving exams so we're not going to give the answers for free. :D
[17:21:02] <Guest9668> giving exams?
[17:21:12] <[exa]> s/most/many/ <- overestimated here
[17:21:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:405b:7016:7d50:c905)
[17:21:44] <[exa]> not sure "giving exams" is right in english, sorry. Examining? :D
[17:22:23] <[exa]> nevermind, focus on that above ^
[17:22:24] <Guest9668> yeah examining would work.
[17:22:34] <Guest9668> do you mean the take thing they mentioned?
[17:22:48] <ski> you have seen some other example of `data' declarations, i hope
[17:22:51] <Guest9668> `take :: Int -> [a] -> [a]`
[17:22:57] <[exa]> no
[17:23:05] <Guest9668> `Just`?
[17:23:14] <ski> @type [2 :: Int,Nothing,3 :: Int]
[17:23:15] <ski> @type [Just (2 :: Int),Nothing,Just (3 :: Int)]
[17:23:15] <lambdabot> error:
[17:23:15] <lambdabot>     • Couldn't match expected type ‘Int’ with actual type ‘Maybe a0’
[17:23:15] <lambdabot>     • In the expression: Nothing
[17:23:16] <lambdabot> [Maybe Int]
[17:23:18] <[exa]> ok great there we go
[17:23:22] <[exa]> :t Just
[17:23:23] <lambdabot> a -> Maybe a
[17:23:27] <Guest9668> Just (3 :: Int)
[17:23:40] <[exa]> you don't even need the `:: Int` there
[17:23:48] <ski> (yea, i added it for clarity)
[17:23:52] <[exa]> that was just to perfectly show that 3 is Int, yes.
[17:24:12] <Guest9668> so I need to put just on lines 5 and 6?
[17:24:20] <[exa]> now you could see why the compiler is complaining that it's expecting `Maybe a` but gets `a` 
[17:24:23] <[exa]> on the certain line
[17:24:28] <Guest9668> yeah it makes so much sense
[17:24:36] <Guest9668> I had no idea though
[17:25:13] <ski> Guest9668 : one answer would be "try it and see ?". another would be "what exactly are the type mismatches ?" (you'd need to answer "what are the actual return types, for each return declaration ?" first)
[17:25:14] <Guest9668> It compiled
[17:25:27] <ski> (the second one might be more elucidating)
[17:25:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:405b:7016:7d50:c905) (Ping timeout: 240 seconds)
[17:26:09] <ski> (er, s/return declaration/defining equation/)
[17:26:31] <Guest9668> I thought we fixed it?
[17:26:33] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[17:26:45] <ski> anyway, `Just' is used to "convert" from a value of type `a' to a value of type `Maybe a' (in the examples above, `a' was `Int')
[17:27:02] <ski> Guest9668 : did you change both line 5 and 6 ?
[17:27:16] <Guest9668> I only changed 5, I expect I need to change 6 too?
[17:27:24] <ski> why ? / why not ?
[17:28:20] <Guest9668> I don't because otherwise it would return a Maybe(Maybe a)
[17:28:26] <ski> correct
[17:28:36] <Guest9668> `Couldn't match type `a' with `Maybe a'
[17:28:37] <Guest9668>       Expected: Maybe a
[17:28:37] <Guest9668>         Actual: Maybe (Maybe a)`
[17:28:54] <Guest9668> One sec I need to write this up.
[17:30:07] *** Quits: rusrushal13 (~rusrushal@2409:4056:193:1b10:a38a:9a8:8f21:e6f1) (Ping timeout: 256 seconds)
[17:31:02] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[17:32:07] <Guest9668> What would  you call Just?
[17:32:18] <ski> anyway, this is related to why `Nothing' is not quite like `null'. in e.g. Java, you could have a list (or array, if you prefer) of `Integer's, but some of them might be `null' (since `Integer' is an object type). but in Haskell, the type `Int' (and the type `Integer') includes no value like `null'. if you want to be able to use `Nothing', you must "shift" to using type `Maybe Int'
[17:32:52] <Guest9668> what is the advantage to doing it the way haskell does?
[17:33:10] <geekosaur> no unexpected "nulls"
[17:33:27] <geekosaur> which you have to deal with somehow ir quite possibly get the wrong answer
[17:33:30] <ski> and then, you don't have "ordinary `Int'", but rather `Int's wrapped in `Just'. then, if you really want, you could go on and have `Maybe (Maybe Int)' (this is occasionally useful). but something like that is not possible with `null' in Java
[17:33:31] <geekosaur> *or
[17:34:10] <jackson99> Guest9668 if your function starts returning Maybe Integer instead of Integer you will get compile error instead of null exception
[17:34:14] *** Joins: max22- (~maxime@2a01cb088335980028de40de497c2de0.ipv6.abo.wanadoo.fr)
[17:34:44] <Guest9668> jackson99 so its easier to bug test?
[17:34:45] <ski> Guest9668 : if you get an `Int', you know it can't be `Nothing'. if you get a `Maybe Int', you *must* check whether it's `Just' or not, the language won't let you treat a `Maybe Int' as an `Int'. whereas in Java, you'd get a null exception
[17:34:54] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:35:05] <Guest9668> ah makes sense
[17:36:18] *** Joins: pera (~pera@137.221.132.200)
[17:36:31] <ski> also, you avoid useless input cases to functions. in Java, your array of `Integer's might contain `null's, so either you must check for that, or else the caller must make sure there's no `null's (while getting no help from the language to ensure that), possibly getting weird behaviour if there was some `null'
[17:36:42] <jackson99> Guest9668, yes, and it is easier to refactor code. compiler will point out all the call sites that expected Int, but are now getting Maybe Int
[17:36:42] *** pera is now known as Guest1490
[17:37:33] <ski> ^ is a very important thing, in practice
[17:38:41] <Guest9668> It'll take some getting used to but I see why its better
[17:38:45] <jackson99> another advantage, some people like to employ defensive programming to deal with null exceptions, so they check null everywhere, even if current api doesn't return null. you don't have to (and you actually can't) do that, because Int can't be Nothing
[17:39:04] <maerwald> it can be 0 though
[17:39:09] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[17:40:28] <ski> languages like C# have added the concept of "non-nullable types", in order to get some help to ensure there's no `null'. however, there's still a difference in that the type `Maybe (Maybe Int)' contains `Nothing',`Just Nothing',`Just (Just 3)',.. .. while using `null's, the first two cases are conflated .. this is important, e.g. when looking for something that we may fail to find (like your `get' function). 
[17:40:34] <ski> what if the input array contained a `null' ? you can't distinguish that from a `null' indicating failure to find the item
[17:41:13] <ski> (this general problem is called "domain contagion". we want the indicator for "not found" to *not* be a possible "found" value)
[17:41:33] <Guest9668> https://paste.tomsmeding.com/EFhDDe5l
[17:41:46] <Guest9668> Is it supposed to be doing that?
[17:42:53] <geekosaur> you meant .. not ...
[17:42:54] <ski> (the 2006-02-03 "Option types, optional parameters" entry at Riastradh's blag, at <https://mumble.net/~campbell/blag.txt>,(RSS) <http://vrici.lojban.org/~cowan/blag.xml>, talks about domain contagion
[17:42:58] <ski> )
[17:43:16] <Guest9668> oh mb
[17:43:43] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[17:49:09] *** Joins: johnjaye (~pi@173.209.65.233)
[17:52:42] *** Quits: Morrow (~Morrow@ool-1826f675.dyn.optonline.net) (Ping timeout: 250 seconds)
[17:52:49] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:52:49] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:52:49] *** Joins: wroathe (~wroathe@user/wroathe)
[17:58:16] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:59:06] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[18:00:03] *** Joins: slack1256 (~slack1256@191.125.99.215)
[18:00:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:00:43] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:7937:b295:da60:ef94) (Ping timeout: 256 seconds)
[18:02:13] <Guest9668> ski: You still around? https://paste.tomsmeding.com/tl4fhMkH
[18:04:12] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:7937:b295:da60:ef94)
[18:04:16] <ski> indentation looks wrong
[18:04:18] <geekosaur> you can't indent like that; it treats it as a continuation of the type signature
[18:04:34] *** Joins: Morrow (~Morrow@ool-1826f675.dyn.optonline.net)
[18:04:37] *** Joins: phma (phma@2001:5b0:212a:d158:6462:9429:37ae:1dd1)
[18:04:37] <geekosaur> also you'll need to indent the if-then-else
[18:05:02] <ski> (and then you'll notice a type error)
[18:05:13] <Guest9668> https://paste.tomsmeding.com/3f5253An
[18:05:17] <Guest9668> thats how I was given the code
[18:05:29] <ski> yes, that's properly indented
[18:06:02] *** Quits: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506) (Read error: Connection reset by peer)
[18:06:30] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:06:37] <Guest9668> thats the next error https://paste.tomsmeding.com/DxhC1QQi
[18:06:51] <ski> yes, that's the type error i mentioned
[18:06:58] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[18:07:01] *** Parts: yassernasc (~yassernas@2804:29b8:505a:f33d:7937:b295:da60:ef94) ()
[18:07:26] <ski> it complains that `n' (in `n ++ select f ns') does not have type `[Int]'
[18:07:26] <Guest9668> so it cant compare a list of int to int?
[18:07:36] <ski> a list is not an integer
[18:07:43] <ski> an integer is not a list
[18:08:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:08:56] <Guest9668> so what needs to be fixed? n needs to be converted to '[Int]'
[18:09:06] <Guest9668> ?^
[18:09:06] <lambdabot> Maybe you meant: v @ ? .
[18:09:16] <ski> try it ?
[18:10:11] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:10:23] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:10:51] <Guest9668> do i do that with take?
[18:11:02] <geekosaur> you could do that, but there's a better way. remember how you construct a list
[18:11:19] <ski> @type take
[18:11:19] <lambdabot> Int -> [a] -> [a]
[18:11:47] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[18:11:55] <ski> doesn't look like `take' will allow you to go from an element (of some type) to a list of elements (of that type)
[18:12:23] <Guest9668> geekosaur: How does that apply here?
[18:12:34] <ski> (the `Int' argument to `take' is not an element of the lists it handles, but rather an index)
[18:12:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[18:13:10] <Guest9668> So what do I do next?
[18:13:14] <geekosaur> Guest9668, you are constructing a list from an element and another list
[18:13:18] <ski> "remember how you construct a list"
[18:13:22] <geekosaur> does this sound familiar?
[18:13:45] <Guest9668> `let a = [1, 5, 7, 12, 56]`
[18:13:56] <ski> how about a list with a single element ?
[18:14:10] <Guest9668> `let a = 99:[]`
[18:14:11] <geekosaur> you already used the thing you need as a pattern in your code
[18:14:18] <ski> that works, yea
[18:14:32] <ski> > 98:[]
[18:14:34] <lambdabot>  [98]
[18:15:32] *** Quits: caubert_ (~caubert@136.244.111.235) (Quit: WeeChat 3.3)
[18:15:35] *** Quits: Guest1490 (~pera@137.221.132.200) (Quit: leaving)
[18:15:43] <Guest9668> Yeaah that compiles: )
[18:15:46] *** Joins: caubert (~caubert@136.244.111.235)
[18:15:50] <ski> what was the fix ?
[18:16:14] <Guest9668> `then n:[] ++ select f ns`
[18:16:38] <Guest9668> Haskell is much easier when you actually understand the errors
[18:16:49] <Guest9668> they normally just make me contemplate my entire existence
[18:16:54] <Guest9668> this isnt so bad
[18:16:57] <ski> well .. i presume you meant `(n:[]) ++ select f ns' .. but it'll amount to the same result, here
[18:17:23] <ski> (`n:[] ++ select f ns' is parsed as `n:([] ++ select f ns)')
[18:17:33] <Guest9668> I didnt realise I needed the parenthesis, should I add them for better practice?
[18:17:44] <ski> you should understand the difference
[18:17:56] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[18:17:57] <Guest9668> the same as the mathematical sense I presume?
[18:18:00] <ski> (a difference that makes no difference (in the end), in this case)
[18:18:02] <Guest9668> if thats the case, then yes
[18:19:13] <ski> this is similar to how `2 + 3 - 4' (meaning `(2 + 3) - 4') amounts to the same as `2 + (3 - 4)'
[18:19:58] <Guest9668> yeah
[18:20:24] <ski> anyway, just like you can write `[n - 1,n,n + 1]', you can write `[n]' (instead of `n : []') .. this could look more idiomatic/simple
[18:22:22] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8850:c936:967:dec3)
[18:22:34] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:22:46] <Guest9668> One sec, just writing this up
[18:23:13] <ski> (but `2 - 3 + 4' (meaning `(2 - 3) + 4') is not the same as `2 - (3 + 4)' .. similarly, in other cases in your Haskell, you'll really need to spell out those grouping brackets -- hence why i said you should understand the difference)
[18:24:37] <ski> Guest9668 : so .. now the fix becomes ?
[18:25:46] <Guest9668> `then (n:[]) ++ select f ns` is what I have it as currently
[18:26:23] <ski> did you understand my "idiomatic" comment ?
[18:26:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8850:c936:967:dec3) (Ping timeout: 240 seconds)
[18:27:00] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[18:27:56] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:28:28] *** Quits: Morrow (~Morrow@ool-1826f675.dyn.optonline.net) (Read error: Connection reset by peer)
[18:28:32] <Guest9668> I understood it as removing the parenthesis in this case wouldn't change the result but it makes it easier to read, hence idiomatic
[18:28:34] *** Joins: Morrow_ (~Morrow@ool-1826f675.dyn.optonline.net)
[18:28:53] <ski> well, that comment was not about removing (or inserting) brackets
[18:29:14] <Guest9668> oh wait you meant `then (n) ++ select f ns`
[18:29:26] <ski> (or, at least, not about grouping brackets ..)
[18:29:32] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:29:35] <ski> almost
[18:29:47] <Guest9668> `then (n ++ select f ns)`
[18:29:56] <ski> no, that's a type error
[18:30:00] <ski> (what you had initially)
[18:30:10] <Guest9668> `then (n:[] ++ select f ns)`
[18:30:15] <ski> round brackets are not square brackets
[18:31:21] <Guest9668> `then [n] ++ select f ns`
[18:31:26] <ski> yes
[18:31:52] <geekosaur> there's another simplification you can do there which is even more idiomatic, though
[18:31:53] <ski> `[n]' would, usually, be considered a more direct way to write a list with just one element (a singleton list), than `n : []'
[18:32:00] <ski> also note that `[n] ++ ...' is the same as `n : ...' .. that way, it looks more consistent with the argument pattern `n:ns' .. but it's a matter of taste
[18:32:41] <Guest9668> so I should change `then (n:[]) ++ select f ns` to `then [n] ++ select f ns`
[18:32:59] <ski> i think most people would prefer to read the latter over the former, yes
[18:33:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:33:16] <Guest9668> ok, willdo
[18:33:21] *** Joins: texasmynsted (~texasmyns@99.96.221.112)
[18:33:24] <ski> (but then also see mine and geekosaur's last comments)
[18:33:24] <Guest9668> it reads easier tbf
[18:34:02] *** Quits: faustind (~faustin@M014008067225.v4.enabler.ne.jp) (Quit: Leaving.)
[18:35:12] <texasmynsted> Anybody have link/doc recommendations for running Haskell on AWS, especially EC2? I found a 6 year old reddit article, the net being install NixOS in EC2.
[18:36:01] <maerwald> texasmynsted: better not
[18:36:09] <texasmynsted> Most things talk about AWS Lambda, which sounds like running Haskell from npm or something... Which seems o_O
[18:36:31] <texasmynsted> maerwald: So the answer is don't do it?
[18:37:06] <texasmynsted> So haskell is not a good choice for the cloud?
[18:37:12] <maerwald> I'm not sure I even understand the question... build a static binary or use docker containers
[18:37:50] <maerwald> you can also run arbitrary executables in aws lambda (also statically link them)
[18:39:49] *** Quits: Morrow_ (~Morrow@ool-1826f675.dyn.optonline.net) (Ping timeout: 256 seconds)
[18:40:08] <texasmynsted> The question is really: Is anybody running Haskell in the cloud? Has this proven to be a good fit? What worked well, or should I stick with other languages on the cloud.
[18:40:33] <merijn> Define "cloud" define "run", etc
[18:40:48] <merijn> I mean "the cloud" is just "some machines somewhere in someone's data center"
[18:41:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:41:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:41:03] *** Joins: wroathe (~wroathe@user/wroathe)
[18:41:03] <merijn> I've run Haskell on those, sure.
[18:41:24] <merijn> I mean, EC2 are just some virtual machines you can run whatever you want on
[18:41:38] <merijn> I don't really understand how you define "a good fit" in that context
[18:41:59] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:42:02] <c_wraith> Yeah, EC2 is just "computers".  You can run haskell on computers.  No additional support required.
[18:42:41] <maerwald> texasmynsted: yes it works well
[18:42:56] <texasmynsted> okay. 
[18:44:11] <merijn> If you know how to run Haskell on, OS Y locally, then running it in the cloud is "basically the same, except you gotta SSH into those machines" (or use some generic VM management solution if you run many machines...)
[18:44:33] <texasmynsted> I often run into things where I think, hmm locally this would be a good fit for tiny haskell project. I wonder what kind of uphill battle it would be to host this on aws, or whatever.
[18:44:46] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Remote host closed the connection)
[18:45:02] *** Joins: Guest|24 (~Guest|24@111.114.191.0)
[18:45:18] <texasmynsted> Terraform is nice.
[18:45:40] <tomsmeding> ghcup works also on aws :p
[18:45:52] <c_wraith> The worst problem you'll run into is that you probably won't want to build on your production application servers.
[18:45:57] *** Joins: alp (~alp@user/alp)
[18:45:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:46:08] <texasmynsted> Hmm. yes
[18:46:18] <merijn> texasmynsted: I mean, if you run, I dunno, centos on EC2, then running your haskell program on it is just "how hard is it to run a program on centos?"
[18:46:48] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[18:47:25] <maerwald> texasmynsted: Terraform + a simple ansible playbook to ensure docker is installed and then everything else shipped via containers
[18:47:28] <maerwald> rather easy
[18:47:30] <texasmynsted> It seems the difficultly is rarely in the running, but rather in the management of the "deployment" the thing that is run. The build, and deploy, part of the build, deploy, run cycle. 
[18:47:49] *** Quits: polyphem (~rod@2a02:810d:840:8754:e450:3ca3:b389:687a) (Ping timeout: 240 seconds)
[18:47:59] <texasmynsted> :-)
[18:48:07] <texasmynsted> Okay. I have not used ansible yet.
[18:48:10] *** Quits: ksqsf (~user@2001:da8:d800:604:d415:c6b:884d:7d38) (Ping timeout: 250 seconds)
[18:48:41] *** Quits: Guest|24 (~Guest|24@111.114.191.0) (Client Quit)
[18:48:41] <maerwald> amazon also has distro images that may have docker pre-installed
[18:48:57] <maerwald> but if you need a devops, hire one
[18:49:35] <texasmynsted> (yes. have done that)
[18:50:50] <texasmynsted> I just see people using interpreted languages like javascript, python, etc in the cloud. I did not know if there was some reason.
[18:51:04] <maerwald> popularity
[18:51:09] <texasmynsted> :(
[18:51:14] <maerwald> no... I'm not being cynical
[18:51:18] <maerwald> that IS a good reason
[18:51:36] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[18:51:52] <maerwald> business decisions aren't about "what's the coolest tech?"... at least usually
[18:52:08] *** Quits: max22- (~maxime@2a01cb088335980028de40de497c2de0.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[18:52:49] <texasmynsted> I remember ages ago writing code for mainframes.  For most things I was asked not to write C binaries. Other languages were preferred. 
[18:57:53] *** Joins: polyphem (~rod@2a02:810d:840:8754:e450:3ca3:b389:687a)
[19:00:35] <geekosaur> mostly it's about maintainability. these days when employers want to be able to swap out employees like replaceable cogs, it's about the tech they're most able to find cogs for, hence popular things like javascript
[19:01:23] <geekosaur> in the mainframe world it's a little different, they're most able to find people *who can write mainframe software* (a rather different world), so they stick to languages popular on mainframes
[19:03:16] <texasmynsted> Well to be fair a lot more time is spent maintaining software than writing it.
[19:07:27] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[19:07:46] <Guest9668> how would you comment this? `select :: (Int -> Bool) -> [Int] -> [Int] --Takes an Int input, takes an int input, checks if its true and then converts one list to another?` < thats almost certainly wrong but I'm struggling to describe it
[19:08:00] <Guest9668> how would you comment this? `select :: (Int -> Bool) -> [Int] -> [Int] --Takes an Int input, checks if its true and then converts one list to another?` < thats almost certainly wrong but I'm struggling to describe it**
[19:08:19] <ski> what do you mean by "then converts one list to another" ?
[19:08:28] <Guest9668> adds one item from a list to another
[19:08:36] <ski> adds it, when ?
[19:08:49] <Guest9668> if the input is the same as what is found in the list?
[19:09:18] <ski> hm, i don't understand
[19:09:49] <ski> perhaps an example could help elucidate .. what should `select even [2,8,5,7,1,4]' evaluate to ?
[19:10:02] <Guest9668> its the same function as we fixed before, I just procrastinated a bit. https://paste.tomsmeding.com/tRvFCeQj
[19:10:14] <Guest9668> [2,8,4]
[19:10:17] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[19:10:33] <ski> oh, okay (sorry, i'd already forgotten the function name from your earlier paste)
[19:10:55] <geekosaur> I recognized both the name and the signature :)
[19:11:08] * ski smiles
[19:11:18] <texasmynsted> So a filter?
[19:11:24] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[19:11:27] <ski> oh. so is your question about how you'd comment / document this function ?
[19:11:33] <Guest9668> yeah I guess
[19:12:05] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[19:12:09] <ski> well .. i guess it selects some items out of the given list, giving them back in another list
[19:12:25] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:12:37] *** Joins: kenran (~kenran@2001:16b8:2bbb:8500:9219:f13c:5dd0:d93e)
[19:12:40] <texasmynsted> Like you apply your function f to each element of the input list, generating a new list where f is true for each element of the input list?
[19:12:50] <Guest9668> texasmynsted: yes
[19:12:52] <Guest9668> ty
[19:13:04] <ski> `select f xs' is the list of all ... such that ...
[19:13:17] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[19:13:25] <ski> (many ways to skin the cat, fwiw)
[19:13:30] *** Joins: vglfr (~vglfr@88.155.104.216)
[19:13:36] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:13:49] <texasmynsted> How about math, that might be fun.
[19:14:00] *** Joins: ksqsf (~user@2001:da8:d800:611:b843:c73f:4031:6341)
[19:14:06] * ski idly considers set theory
[19:14:20] <texasmynsted> yes, please consider that
[19:14:25] <unyu> Are there examples of type constructors that (a) have more than one type argument, and (b) don't impose any constraints on them in typical usage, (c) serve a concrete use case, rather than being general purpose like Either, (,) or (->)?
[19:14:45] <unyu> s/\(c\)/ and \(c\)/
[19:15:52] <unyu> Data.Map.Map would be a nonexample, because typical usage imposes an Ord constraint on the first type argument.
[19:16:22] <tomsmeding> unyu: well-typed AST: https://github.com/AccelerateHS/accelerate/blob/master/src/Data/Array/Accelerate/AST.hs#L524
[19:16:41] <unyu> Thanks.
[19:17:07] <tomsmeding> if you want more type parameters: https://github.com/tomsmeding/accelerate/blob/no-explode/src/Data/Array/Accelerate/Trafo/AD/Exp.hs#L46
[19:17:37] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:18:38] <unyu> Wow, and there are really no constraints on all of those type parameters? Does it really make sense to plug any type (of the appropriate kind, of course) there?
[19:18:45] <ski> unyu : well, i guess you could have trees with both internal node and leaf elements. or labelling branches, if you prefer
[19:19:31] <tomsmeding> unyu: mostly! this is the most important top-level function on that Exp data type: https://github.com/tomsmeding/accelerate/blob/no-explode/src/Data/Array/Accelerate/Trafo/AD/ADExp.hs#L237
[19:19:40] <tomsmeding> the Show is just for debugging and can be removed without much effort
[19:20:00] <unyu> Wow, cool.
[19:20:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:20:12] <tomsmeding> the () occurrences take on different types throughout the computation
[19:20:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:20:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[19:20:54] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[19:21:31] <tomsmeding> though 'lab' and 'alab' are normally only two different things, namely Int and (), but if I wanted to give expression nodes string names, then it'd be String
[19:21:45] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 256 seconds)
[19:21:57] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:22:26] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[19:22:53] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 256 seconds)
[19:23:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5cb9:ef3e:81e2:469f)
[19:23:02] *** Quits: ksqsf (~user@2001:da8:d800:611:b843:c73f:4031:6341) (Ping timeout: 240 seconds)
[19:23:10] <tomsmeding> unyu: more compact example: https://github.com/tomsmeding/accelerate/blob/no-explode/src/Data/Array/Accelerate/Trafo/AD/Common.hs#L186-L189
[19:23:21] *** Joins: gdd (~gdd@129.199.146.230)
[19:23:33] <tomsmeding> maybe that was more what you're looking for
[19:24:27] <unyu> Wow. Thanks!
[19:24:51] <ski> @where IndirectComposite
[19:24:52] <lambdabot> <http://web.archive.org/web/20051126141834/http://haskell.org/hawiki/IndirectComposite>
[19:24:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[19:25:38] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:26:41] <unyu> ski: I see, but manually tying fixed points isn't such a compelling use case by itself.
[19:27:02] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[19:27:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5cb9:ef3e:81e2:469f) (Ping timeout: 240 seconds)
[19:29:16] <ski> mm
[19:30:00] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:36:08] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[19:36:27] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:37:22] <Guest9668> https://paste.tomsmeding.com/8d0debTf
[19:37:28] <Guest9668> this gives me an error because of multiple definitions of Float, why is that an issue if its just a type? theres also probably indentation errors
[19:37:46] <ski> in `data Radius = Float', `Float' is not the type, but a data constructor
[19:37:53] <geekosaur> you need a constructor name, not just a tyope
[19:38:22] <Guest9668> `data Radius = Float r`?
[19:38:26] <ski> you presumably either meant `dara Radius = MkRadius Float', or else `type Radius = Float' (type synonym, `Radius' is the same type as `Float')
[19:38:57] <Guest9668> Radius should be the same type as float
[19:39:02] <ski> (in this case, the former could also be `newtype Radius = MkRadius Float' .. but this is a less important (and more subtle) distinction)
[19:39:09] <ski> then you want the latter
[19:39:33] <ski>   type Radius = Float  -- this
[19:40:20] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[19:40:21] <geekosaur> this is, by the way, often frowned upon: it serves as documentation, but also gives a false illusion of type safety
[19:40:26] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[19:40:30] <ski> the general pattern of `data' is `data MyType parameters ... = DataConstructor Types ... | ...'
[19:40:38] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:c8cd:ea83:c8cd:4ca3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:40:48] <Guest9668> I am right in saying thats what I need, I want to be able to define a shape with dimensions and then work out the area of these shapes
[19:40:57] <Guest9668> ?
[19:41:13] <ski> using `type', your pasted code would work
[19:41:25] <Guest9668> in the same way though, yes?
[19:41:28] <geekosaur> there's an additional question of whether you actually want Float; its range is rather small. perhaps you want Double instead
[19:41:33] <ski> Guest9668 : huh ?
[19:43:06] <ski> > s ^ 2
[19:43:07] <lambdabot>  s * s
[19:43:13] <Guest9668> https://paste.tomsmeding.com/5Fcu7RBR
[19:43:37] <ski> indentation ?
[19:43:59] <Guest9668> https://paste.tomsmeding.com/c0vV5gDY
[19:44:22] <ski> yout defining equations shouldn't be indented more than the type signature
[19:45:38] *** Joins: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl)
[19:45:38] *** Quits: feliix42 (~felix@gibbs.uberspace.de) (Read error: Connection reset by peer)
[19:46:01] <Guest9668> ski: https://paste.tomsmeding.com/97t0WpPU
[19:46:23] <ski> what's that question mark ?
[19:46:29] <Guest9668> `*`
[19:46:36] <ski> maybe you have some strange unicode symbol in your file ?
[19:46:53] <ski> you should use the usual ASCII asterisk thing
[19:46:57] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[19:47:12] <Guest9668> yeah vscode is saying that too actually
[19:47:35] <Guest9668> That was it
[19:47:35] *** Quits: AWizzArd (~code@user/awizzard) (Read error: Connection reset by peer)
[19:47:51] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[19:48:39] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[19:48:43] *** Joins: feliix42 (~felix@gibbs.uberspace.de)
[19:49:59] *** Joins: whatif (~user@123.123.223.41)
[19:50:17] <whatif> can string list can be sorted by alphabet?
[19:51:03] <whatif> ["decent", "absurd", "evil"] to ["absurd", "decent", "evil"]
[19:51:14] <geekosaur> have you tried it?
[19:51:16] <ski> > sort (words "The quick brown fox jumps over the lazy dog")
[19:51:17] <lambdabot>  ["The","brown","dog","fox","jumps","lazy","over","quick","the"]
[19:52:11] <whatif> aha, I thought it would be a String function, it should be in List
[19:52:32] <ski> `String's are lists of `Char'acters. lists can be compared (namely in lexicographic order), if the elements can be compared
[19:52:35] <geekosaur> @src String
[19:52:35] <lambdabot> type String = [Char]
[19:52:56] *** Joins: AWizzArd (~code@gehrels.uberspace.de)
[19:52:57] <geekosaur> there are other kinds of strings in haskell, whiuch come with their own sort functions
[19:52:57] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 240 seconds)
[19:53:23] <ski> yea, and they're also comparable
[19:53:28] *** Joins: fef (~thedawn@user/thedawn)
[19:54:03] <ski> (tuples are also compared, in lexicographic order)
[19:55:08] <ski> > sortBy (comparing length <> compare) (words "The quick brown fox jumps over the lazy dog")  -- sort, not by plain lexicographic order, but rather, primarily by length, secondarily lexicographically
[19:55:09] <lambdabot>  ["The","dog","fox","the","lazy","over","brown","jumps","quick"]
[19:55:55] <ski> (yea, i like bringing up that example, now and then :)
[19:57:45] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[19:58:01] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 256 seconds)
[20:00:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[20:01:42] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[20:02:55] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[20:04:37] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:06:03] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:819d:3b6a:9a6f:c60e)
[20:06:50] <Guest9668> ski: Sorry, another basic problem for you:/  https://paste.tomsmeding.com/FNTxzwv4
[20:07:24] <Guest9668> So the error is that its returning `(Float -> Float, Float -> Float)` instead of the expected `Float`
[20:07:30] <Guest9668> and thats about as far as I've gotten
[20:07:45] <ski> (you know, you could address your questions to the whole channel :)
[20:08:00] <Guest9668> @thewholechannel
[20:08:00] <lambdabot> Unknown command, try @list
[20:08:36] <ski> here, you're confusing curried style with tupled style
[20:09:22] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:09:24] <EvanR> @wowallthenetworks
[20:09:25] <lambdabot> Unknown command, try @list
[20:09:42] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:09:48] <ski> (you may now ask for clarification, if you so desire)
[20:10:05] <ski> @palomer
[20:10:05] <lambdabot> woof
[20:10:56] <Guest9668> could you clarify please
[20:11:08] <ski> (also, this type error is funny .. and confusing)
[20:11:50] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:11:52] <ski> well, to begin with, all Haskell functions take exactly one input argument. there's no such thing as multiple-parameter functions, in Haskell
[20:11:57] *** Joins: cosimone (~user@93-47-229-195.ip115.fastwebnet.it)
[20:12:08] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:12:47] <ski> now, there's two common *styles* of *encoding* multiple-parameter functions, in such a situation. these are known as tupled style, and curried style
[20:12:59] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:13:18] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:13:32] <Guest9668> ok
[20:13:41] <ski> in the tupled style, you pack the "multiple parameters" into a single parameter (usually a tuple, but could be a list or some other structure). then, the function will extract the "multiple parameters" from this single parameter
[20:13:54] <Guest9668> Yeah I've used that before
[20:14:05] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[20:14:25] <ski> in the curried style, you instead make a function that takes one parameter, and returns another function that takes the rest (say, one at a time, just with the first one), before giving back the final answer
[20:15:00] <ski> your problem is that your type signature is trying to use curried style, while your defining equation tries to use tupled style
[20:15:08] <ski> pick one, or the other, and be consistent
[20:15:14] <Guest9668> ok, makes sense
[20:16:01] <ski> (Haskell syntax is designed (syntactic sugar, associativity) to encourage curried style, as a default. but one should be aware that they're just styles of encoding)
[20:16:17] <Guest9668> I fixed it with this: `hypotenuse :: (Float,Float) -> Float`
[20:16:27] <ski> yes, that'd be using tupled style
[20:17:18] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[20:18:33] <Guest9668> ty
[20:18:35] <EvanR> when using tupled input arguments, does that necessarily mean a tuple is always constructed when the function is used, or are there optimizations that sometimes skip that step
[20:18:36] <ski> np
[20:18:51] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[20:19:20] <ski> i'd imagine strictness analysis could possibly elide the boxing
[20:22:00] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[20:25:38] *** Joins: Morrow (~Morrow@ool-1826f675.dyn.optonline.net)
[20:26:17] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 240 seconds)
[20:26:18] *** Quits: otulp (~otulp@ti0187q162-3172.bb.online.no) (Remote host closed the connection)
[20:26:28] *** Joins: vicfred (~vicfred@user/vicfred)
[20:27:29] *** Quits: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:28:01] *** Quits: whatif (~user@123.123.223.41) (Quit: ERC (IRC client for Emacs 26.3))
[20:29:22] *** Quits: d0ku (~d0ku@178.43.152.233.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[20:32:16] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881)
[20:32:36] *** Quits: kenran (~kenran@2001:16b8:2bbb:8500:9219:f13c:5dd0:d93e) (Quit: WeeChat info:version)
[20:35:23] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[20:35:58] *** Joins: max22- (~maxime@2a01cb08833598008b56a1095c0012ed.ipv6.abo.wanadoo.fr)
[20:36:25] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:36:44] *** Quits: Morrow (~Morrow@ool-1826f675.dyn.optonline.net) (Ping timeout: 256 seconds)
[20:37:07] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[20:40:12] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:25fa:6d44:7c2a:d37c)
[20:40:25] <zzz> i keep seeing this (a ~ SomeType) syntax. what's the context for it and which extension(s) give access to it?
[20:41:01] *** Quits: Guest9668 (~Guest96@144-124-99-115.pip.aber.ac.uk) (Quit: Client closed)
[20:41:11] <EvanR> it's a constraint that says a and SomeType are the same type. It's enabled by GADTs I think
[20:41:27] <geekosaur> it's enabled by several extensions but doesn't have one of its own
[20:41:54] <ski> it's a (type) equality constraint
[20:41:59] <geekosaur> (iirc TypeFamilies also enables it?)
[20:42:06] <ski> iirc, yea
[20:43:14] *** Quits: benin (~benin@183.82.179.241) (Quit: The Lounge - https://thelounge.chat)
[20:44:08] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:44:44] *** Quits: razetime (~quassel@49.207.203.87) (Ping timeout: 250 seconds)
[20:44:51] *** Joins: Morrow (~Morrow@ool-1826f675.dyn.optonline.net)
[20:45:02] <zzz> ski: thanks i can search for the term now
[20:46:25] <zzz> iiuc i can use it everywhere i use class constraints?
[20:47:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[20:47:38] <ski> you can't instance it
[20:48:14] <EvanR> > let x :: Int ~ Int => String; x = "foo" in x
[20:48:15] <lambdabot>  "foo"
[20:48:20] <EvanR> > let x :: Bool ~ Int => String; x = "foo" in x
[20:48:21] <lambdabot>  error:
[20:48:21] <lambdabot>      Couldn't match type ‘Bool’ with ‘Int’ arising from a use of ‘x’
[20:48:35] <ski> @let instance Bool ~ Int
[20:48:35] <lambdabot>  Parse failed: Illegal instance declaration
[20:48:45] *** Joins: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl)
[20:49:27] <zzz> @let instance (a ~ b) => Show (a,b)
[20:49:28] <lambdabot>  /sandbox/tmp/.L.hs:175:10: error:
[20:49:28] <lambdabot>      Duplicate instance declarations:
[20:49:28] <lambdabot>        instance [safe] (a ~ b) => Show (a, b)
[20:49:38] <ski> that'd work, yea
[20:50:10] <zzz> so wdym by "you can't instance it"?
[20:50:25] <ski> exactly the example i gave above
[20:50:34] <zzz> oh
[20:50:44] <EvanR> you didn't instance it zzz you used as a precondition for another instance
[20:50:45] <zzz> can you instance class constraints?
[20:50:46] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/equality_constraints.html
[20:50:50] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:819d:3b6a:9a6f:c60e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:51:04] <ski> `(~)' could be seen as having kind `forall k. k -> k -> Constraint'. but it's not like other classes, you can't instance it
[20:51:12] <Clint> when did instance become a verb
[20:51:19] *** Joins: Guest92 (~Guest92@144-124-136-14.pip.aber.ac.uk)
[20:51:21] *** Quits: Guest92 (~Guest92@144-124-136-14.pip.aber.ac.uk) (Client Quit)
[20:51:24] *** Joins: Guest9647 (~Guest96@144-124-99-115.pip.aber.ac.uk)
[20:51:25] <EvanR> when they were added to WoW
[20:51:26] <ski> for instance, a few minutes ago
[20:51:30] <Clint> i see, i see
[20:51:36] *** Joins: Guest24 (~Guest24@144-124-136-14.pip.aber.ac.uk)
[20:51:37] <geekosaur> we're speaking English, pretty much everything is a verb these days :þ
[20:51:45] <Guest24> hi
[20:51:56] <EvanR> we're englishing and everything is verbing
[20:52:02] <byorgey> hi Guest24 
[20:52:05] <ski> re, Guest24
[20:52:20] <Guest24> would you be able to help me please I can't figure out why I keep getting an indentation erro
[20:52:34] <monochrom> "happy haskelling"
[20:52:35] <ski> @where paste
[20:52:35] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[20:52:36] *** Joins: cyphase (~cyphase@user/cyphase)
[20:52:48] <Guest24> https://paste.tomsmeding.com/UfU71afc
[20:52:58] *** Quits: fendor_ (~fendor@178.165.192.6.wireless.dyn.drei.com) (Ping timeout: 250 seconds)
[20:53:10] <monochrom> add 2 spaces to all of lines 2-20
[20:53:23] <monochrom> Err hrm, actually I may be wrong.
[20:53:24] <ski> you have `if' after `where', this is illegal syntax
[20:53:45] <ski> you should have defining equations (and type signatures) after a `where'
[20:53:46] <monochrom> Ugh += is not a thing.
[20:53:47] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:53:53] <ski> well, it could be :)
[20:54:02] <Guest24> oh
[20:54:03] <EvanR> probably in the OpenGL library
[20:54:05] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:54:22] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:54:33] <Clint> alternately, x is not a thing
[20:54:41] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:54:43] <Guest24> what should i use instead of where
[20:54:58] <ski> depends on what you intend to express
[20:55:22] <monochrom> Yeah, x is not a thing in this code.
[20:55:42] <Guest24> i need to add up the price of all the ice creams sold
[20:55:50] <Guest24> based on on a few conditions
[20:55:55] <ski> Guest24 : you *could* define `x' to be something, in your `where'
[20:55:57] <monochrom> And you are supposed to use recursion.
[20:56:16] <ski> (and that definition could contain an (or a bunch of) `if'-`then'-`else'(s))
[20:56:19] <Guest24> i tried to use recursion
[20:56:23] <monochrom> Ah OK I see.
[20:57:10] <monochrom> OK, write a recursive function to sum up a list of numbers. A simpler question that shows the same idea.
[20:57:13] <ski> hm, right. you probably want to use pattern-matching, at least for the `Special' thing
[20:57:19] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:25fa:6d44:7c2a:d37c) (Remote host closed the connection)
[20:58:09] <ski> (doing monochrom's exercise would probably help with `totalScoops')
[20:59:27] <Guest24> ok thank you
[21:00:13] <ski> Guest24 : oh .. i see. it looks like you intended `x' to be the result of the recursive call `price xs' (? or maybe you intended to first accumulate onto `x', then pass that into the recursive call) .. in that case, you could define `x0' to be that recursive call result, then define `x1' in terms of `x0', updating with the info from the current icecream
[21:00:22] <ski> (or, the other way around, if you want to do it in the other order)
[21:00:28] <maerwald> `Q Sqlite DataDB QBaseScope (QRes QBaseScope)`
[21:00:32] <maerwald> I think I don't like beam.
[21:01:13] <EvanR> bowl of Qs for breakfast
[21:01:34] <maerwald> why Haskellers always have to over-engineer things
[21:01:52] <maerwald> SQL isn't that hard
[21:01:53] <monochrom> Oh, I thought you were complaining about naming.
[21:02:02] <maerwald> well, that too
[21:02:54] <monochrom> Is that a type? Is that a term?
[21:02:54] <EvanR> DataDB...
[21:02:58] <maerwald> a type
[21:03:01] <EvanR> i.e. a DataDataBase
[21:03:02] <maerwald> haha
[21:03:15] <monochrom> Well yeah Haskellers over-type things.
[21:03:24] <Sqaure> "-Phew, that type ended up pretty unreadable, but atleast it compiles."
[21:03:27] <monochrom> Not sure whether it's over-engineering or over-mathing.
[21:03:45] <kuribas> maerwald: because if you have fancy types, you need to use them!
[21:03:47] <ski> @kind Data.Data.Data
[21:03:48] <lambdabot> * -> Constraint
[21:03:54] <geekosaur> types are good, therefore more types must be better
[21:03:55] <maerwald> and when you `>>= \case` it, you have an Either
[21:04:06] <EvanR> MonadBase BaseDataDataBaseData AllYourBase a
[21:04:11] <geekosaur> *more betterer
[21:04:28] <kuribas> maerwald: btw, overengineering is present in any language.  underengineering as well :)
[21:04:33] <maerwald> maybe it makes more sense after I read the tutorial... although I like libraries that "just make sense"
[21:04:45] <EvanR> I've never heard anyone complain about underengineering, unless that refers to web code
[21:04:59] <EvanR> which nevermind that last bit
[21:05:00] * ski . o O ( reading the tutorial is admitting defeat )
[21:05:37] <maerwald> learn a DSL that's harder than SQL... so you can write SQL
[21:05:43] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[21:05:49] <monochrom> EvanR: Automatic ATM Teller Machine  >:)
[21:05:50] <Guest24> ski I intended it to be the result of the recursive call, I want x to be the float
[21:05:59] * ski . o O ( Datalog )
[21:06:26] <ski> Guest24 : well, nothing's stopping you from going `... where x0 = price xs; x1 = ..x0..', if that's what you wish to try
[21:07:40] <ski> (over here, "CD disk" (not in english), was pretty common to hear)
[21:07:47] <EvanR> maerwald, you can't be trusted to pass text arguments to the query properly, sorry
[21:08:07] <Guest24> ski https://paste.tomsmeding.com/ZE21eja6
[21:08:12] <EvanR> you will have to pass a learn this DSL test first
[21:08:17] <Guest24> do you mean like that?
[21:08:29] <maerwald> Also... the people who wrote this code are long gone. They successfully escaped maintaining their own work
[21:08:42] <ski> (bonus points for indenting the module body ;)
[21:08:52] *** Joins: ph88 (~ph88@tmo-085-109.customers.d1-online.com)
[21:08:57] <ski> Guest24 : well, it's a start
[21:09:14] <ski> now move the `if' stuff inside the definition of `x1' (and don't call recursively, twice)
[21:09:50] <ski> (oh, and you need to indent `x0 = ...' more. and you can replace that semicolon by a newline, if you indent)
[21:09:59] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-113.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:10:28] *** Quits: mbuf (~Shakthi@122.174.254.114) (Quit: Leaving)
[21:11:57] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[21:12:02] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:12:16] *** Joins: Akiva (~Akiva@user/Akiva)
[21:14:57] *** Quits: Morrow (~Morrow@ool-1826f675.dyn.optonline.net) (Ping timeout: 240 seconds)
[21:15:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:15:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:15:21] *** Joins: wroathe (~wroathe@user/wroathe)
[21:18:32] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 250 seconds)
[21:18:45] <Guest24> i jsut realised i just want to work out the price of one icecream
[21:19:12] <Guest24> so all i need to do is check through the conditions and return the value
[21:19:18] <ski> oh .. right
[21:19:24] <ski> so, no recursion
[21:19:32] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[21:19:37] <Guest24> nope
[21:20:27] <Guest24> https://paste.tomsmeding.com/sjOWvorr
[21:21:13] <ski> now you still need to get rid of the `+=' stuff
[21:22:10] <Guest24> what would i use instead
[21:22:22] <EvanR> the main issue is x was never introduced so it doesn't refer to anything
[21:22:36] <EvanR> secondary issue is you can't mutate variables
[21:22:39] <ski> instead of thinking like `x = a; if ... then x += b0 else x += b1; ...', think like `x = a + (if ... then b0 else b1) + ...'
[21:23:25] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[21:23:32] <ski> (or, if you must, `x = if ... then a + b0 + ... else a + b1 + ...' -- but often, the former, "factored", version is nicer (shorter, more surveyable/understandable, &c.))
[21:23:58] <EvanR> and now it kind of makes sense why math students hate math... x often comes out of nowhere, wtf is x
[21:24:29] <ski> well, Guest24 left out the initialization
[21:24:46] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:25:05] <ski> (although, to be fair, in the original version, the initialization (although not spelled out) was intended to come from the recursive call)
[21:25:42] <Guest24> how do initialise the variable outside the function or within it
[21:26:18] <ski>   x = a + (if ... then b0 else b1) + ...  -- this is the initialization (also "finalization", final value. since it never changes)
[21:26:54] <ski> (but when i said "initialization" above, i was referring to the `x = a' part (the part you left out) in my schema for your code)
[21:27:37] <ski> in any case, `x = ...' would happen in a `where' (or `let'-`in'), in your defining equation for `price'
[21:28:23] <ski> (perhaps, in your case, `a' would be zero. i'm nor sure. in that case, `a + ....' would be the same as just `....')
[21:28:34] <Guest24> https://paste.tomsmeding.com/UttMpsQT
[21:29:09] <ski> please no `x = x + ...'. that's no better than `x += ...'
[21:29:28] <Guest24> the what do i do instead :((((
[21:29:39] <ski> (what does `x = x + 1' mean ? it means that `x' is one greater than itself. no finite number can be like that)
[21:30:15] <ski> Guest24 : if you really want to use "multiple `x's", then introduce versions. like `x0 = a', then `x1 = x0 + ...', &c.
[21:30:35] <Guest24> i want to add to the value of x
[21:30:42] <Guest24> x is the final price
[21:30:47] <ski> but, commonly (not always), it's nicer to just incorporate all relevant parts in one go : `x = a + ...'
[21:31:19] <ski> rather than thinking "add to `x'", think "i define `x' as the sum of ..."
[21:32:05] *** Quits: Guest24 (~Guest24@144-124-136-14.pip.aber.ac.uk) (Quit: Client closed)
[21:32:15] *** Joins: Guest24 (~Guest24@144-124-136-14.pip.aber.ac.uk)
[21:32:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:32:25] <ski> (anyway, i should also saw that in your latest paste, `price x = (f,s,h)' is a regression from before. you want to match the input icecream against `(f,s,h)'. you don't want to return an icecream, while calling the input `x')
[21:34:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:25fa:6d44:7c2a:d37c)
[21:34:21] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[21:35:07] <Guest24> https://paste.tomsmeding.com/P1gyZ9Cv
[21:35:16] *** Joins: simendsjo (~user@84.211.91.241)
[21:35:40] <ski> ok, let's take an example of what i mean
[21:35:46] <ski>   if h == True
[21:35:52] <ski>     then x = x + 0.50
[21:36:01] <ski>       else x = x + (1.00 * s)
[21:36:16] <ski> instead of this, do something like
[21:36:33] <ski>   x2 = if h == True
[21:36:44] <ski>          then x1 + 0.50
[21:36:56] <ski>          else x1 + (1.00 * s)
[21:36:57] *** Quits: polyphem (~rod@2a02:810d:840:8754:e450:3ca3:b389:687a) (Ping timeout: 240 seconds)
[21:37:07] <ski> or (better), using guards
[21:37:31] <ski>   x2 | h == True = x1 + 0.50
[21:37:41] <ski>      | otherwise = x1 + (1.00 * s)
[21:38:07] *** Joins: polyphem (~rod@2a02:810d:840:8754:b6f3:5141:3b3:83de)
[21:38:14] <ski> this way, you define the next version, `x2', in terms of the previous version `x1' (which you need to define as well, of course)
[21:38:42] <ski> (oh, and it's better to just write `h', rather than `h == True'. but that's a separate issue)
[21:39:14] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7985:a982:d93:11f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:40:22] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:40:22] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:40:22] *** Joins: wroathe (~wroathe@user/wroathe)
[21:40:33] <ski> oh, yet another way (a more factored one), would be
[21:40:35] <monochrom> Uh so many Wordle articles in the Haskell Weekly News today haha
[21:40:49] <ski>   x2 = x1 + (if h == True then 0.50 else 1.00 * s)
[21:41:07] <Guest24> https://paste.tomsmeding.com/RbRBMuv6
[21:41:46] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7985:a982:d93:11f)
[21:42:03] <ski> Guest24 : well. now, in the "special" case, you're not getting the part where you check `h'
[21:42:25] <EvanR> Haskell Weekly News Today
[21:42:44] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881) (Remote host closed the connection)
[21:42:52] <Guest24> so how do i get it
[21:42:58] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881)
[21:43:33] <ski> if you wanna do versions (which would be closest to your original `+=' stuff), then define `x0', then `x1', then `x2', and so on
[21:44:22] <ski> (this can be a little bit verbose, but perhaps would be the simplest way for you to get to a working piece of code that you can understand. then you can worry about reformulations, which may be more idiomatic and nicer in practice)
[21:44:44] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:45:22] <ski> (an alternative to versions (each defined in terms of the previous one, except the first one) would be to separately define the contributing terms, then sum those up)
[21:46:02] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[21:46:33] *** Quits: Guest52 (~Guest52@80-100-97-100.ip.xs4all.nl) (Quit: Connection closed)
[21:46:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:25fa:6d44:7c2a:d37c) (Remote host closed the connection)
[21:46:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:25fa:6d44:7c2a:d37c)
[21:47:38] <ski> (usually, if you have a definition like e.g. `f ... = if ... then ... else ...', then using guards would look more pleasant. but there's nothing wrong with using `if'-`then'-`else', especially if they're nested somewhere inside the body (after `='), rather than comprising the whole body)
[21:49:20] *** Joins: SolidusRiver (~fuag1@174.127.249.180)
[21:49:47] <SolidusRiver> I need to set conditional flags and conditional extra-deps depending on the host os in a stack.yaml, is this possible?
[21:49:49] *** Joins: econo (uid147250@user/econo)
[21:50:34] <ski> hm, i notice that the formula in <https://paste.tomsmeding.com/sjOWvorr> looks different from the one in <https://paste.tomsmeding.com/UttMpsQT> (you've moved an "else" around, or something) .. you should make sure you're computing the right thing (i dunno what it is)
[21:52:26] <ski> (hm, i guess they're gone)
[21:52:41] <ski> er .. no. wring guest
[21:56:55] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:25fa:6d44:7c2a:d37c) (Remote host closed the connection)
[21:57:07] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:58:36] <EvanR> don't wring the guest!
[21:59:15] * ski brings the quest
[22:04:00] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[22:04:19] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:05:46] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 250 seconds)
[22:05:47] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7985:a982:d93:11f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:05:59] *** Joins: mud (~mud@user/kadoban)
[22:07:25] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[22:08:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:08:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:08:17] *** Joins: wroathe (~wroathe@user/wroathe)
[22:08:26] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881) (Remote host closed the connection)
[22:08:40] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881)
[22:10:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:10:37] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (Ping timeout: 240 seconds)
[22:13:04] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:14:03] *** Joins: asivitz (uid178348@id-178348.tinside.irccloud.com)
[22:14:08] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[22:14:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[22:15:16] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[22:17:07] *** Quits: mud (~mud@user/kadoban) (Remote host closed the connection)
[22:18:18] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:18:35] *** Quits: statusbot5 (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com) (Remote host closed the connection)
[22:18:38] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[22:18:49] *** Joins: statusbot (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com)
[22:20:31] *** Joins: mud (~mud@user/kadoban)
[22:21:59] <maerwald> so... https://hackage.haskell.org/package/beam-core-0.9.0.0/docs/Database-Beam-Query.html#v:references_
[22:22:01] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[22:22:16] <maerwald> this says it allows me to compare foreign key to a given table... but the type forces a primary key 
[22:22:50] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[22:23:16] <EvanR> jeez
[22:26:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[22:29:35] *** Joins: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[22:30:21] *** Quits: kuribas (~user@ptr-25vy0i99jv0pb0h8fdc.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[22:34:39] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881) (Remote host closed the connection)
[22:35:00] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:35:03] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881)
[22:35:51] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[22:35:55] <romesrf> hello!
[22:36:03] <ski> ehĺo
[22:36:42] *** Joins: johnjaye (~pi@173.209.65.233)
[22:37:39] <romesrf> could someone help me with some type level magic make this ambiguity error go away? (minimal working problem: https://paste.tomsmeding.com/4ETh7aha)
[22:38:24] <sshine> romesrf, query "hi" @Text  and add {-# LANGUAGE TypeApplications #-} -- does that work?
[22:38:30] <romesrf> basically, when calling this function with a string literal, the literal type is text (something like IsString a => a ~ Text)
[22:38:52] <sshine> romesrf, it doesn't know what kinda string "hi" is. OverloadedStrings makes "hi" polymorphic.
[22:39:01] <sshine> romesrf, so "hi" :: IsString s => s  :D
[22:39:21] <monochrom> There is no defaulting for the Query class.
[22:39:24] <sshine> romesrf, you can tell it that it's a Text by doing e.g. ("hi" :: Text)
[22:39:31] <romesrf> hahah yes indeed, what I would like is to enforce in the `query` function that if IsString s then s ~ Text
[22:40:00] <sshine> romesrf, oh, sorry. I didn't see that "hi" is supposed to have type Query q => q.
[22:40:10] <romesrf> sshine: thank you, however i was trying to use `magic` to be able to omit :: Text
[22:40:12] <monochrom> There is no defaulting for the IsString class either.
[22:40:18] <awpr> how about: turn off OverloadedStrings, change the instance to String, have it use `pack` immediately on its argument, and make sure it gets inlined
[22:40:27] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[22:40:55] <romesrf> awpr: however i'm expecting people that interact with the api to have overloaded strings on
[22:41:26] <monochrom> Perhaps eliminate the Query class.
[22:41:37] <romesrf> ahahahah yes, that would solve the problem as well
[22:41:49] <sshine> romesrf, you still need to eventually commit to a concrete type, or keep working within functions that have type-class constraining assumptions.
[22:41:52] <romesrf> yes, first off, my problem is that i wanna have the cake and eat it too
[22:42:38] <romesrf> right sshine 
[22:43:23] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:43:40] <romesrf> it's interesting that despite Text being the only IsString instance that instances Query, it cannot be inferred that that literal must be Text for it to work
[22:43:58] <monochrom> You do not know that Text is the only instance.
[22:44:16] <sshine> romesrf, not constructive reasoning
[22:44:17] <ski> % let f :: (Typeable a,Show a => a ~ Rational) => a -> TypeRep; f = typeOf in f 2
[22:44:17] <yahb> ski: Ratio Integer
[22:44:20] <ski> % let f :: (Typeable a,Show a => a ~ Rational) => a -> TypeRep; f = typeOf in f chr
[22:44:20] <yahb> ski: ; <interactive>:15:77: error:; * Couldn't match type `Int -> Char' with `Rational' arising from a use of `f'; * In the expression: f chr; In the expression:; let; f :: (Typeable a, Show a => a ~ Rational) => a -> TypeRep; f = typeOf; in f chr; In an equation for `it':; it; = let; f :: (Typeable a, Show a => a ~ Ratio
[22:44:26] <monochrom> The type class system is an open-world system. It does not enjoy a closed world assumption.
[22:45:20] <monochrom> There is no way to express instance selection by absence of other instances.
[22:45:31] <romesrf> monochrom: interesting! that's good insight
[22:46:11] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[22:46:32] <romesrf> right, I do see how that's not constructive reasoning
[22:46:33] * ski . o O ( upwards class mobility )
[22:46:52] <awpr> if there are exactly the two instances, or at least a predetermined set of instances, you might be able to abuse closed type families to make GHC conclude anything that's not SQuery must be Text: `type family QueryType a where QueryType SQuery = SQuery; QueryType a = Text`    `class Query_ a b where toQuery :: a -> SQuery`    `type Query a = Query_ (QueryType a) a`    `instance a ~ Text => Query_ Text a where ...`    `instance a ~ 
[22:46:52] <awpr> SQuery => Query_ SQuery a`
[22:46:57] <monochrom> I believe in downwards class mobility.
[22:47:57] * ski idly ponders interior and closure operations on the lower classes
[22:48:30] <awpr> wait, what about replacing the whole thing with `instance IsString SQuery`
[22:48:54] <romesrf> awpr: AHAH i'll see
[22:49:28] <ski> romesrf : you don't know that `Text' is the only simultaneous instance of `IsString' and `Query'. you only know that it's the only *known* (to your current program) instance
[22:49:31] <romesrf> i do like your first answer btw, i ws trying to understand it
[22:49:41] <awpr> (also only good if the goal is to allow specifically string literals and not other types to be passed transparently as `SQuery`s)
[22:50:24] <romesrf> ski: understood, thank you
[22:50:43] *** Joins: neurocyte0917090 (~neurocyte@IP-045128181031.dynamic.medianet-world.de)
[22:50:43] *** Quits: neurocyte0917090 (~neurocyte@IP-045128181031.dynamic.medianet-world.de) (Changing host)
[22:50:43] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[22:51:06] <monochrom> Yeah perhaps IsString already does everything Query wants to do.
[22:51:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[22:52:53] <romesrf> monochrom: yes i'm trying it out, it is a nice out of the box idea haha
[22:54:18] *** Quits: polyphem (~rod@2a02:810d:840:8754:b6f3:5141:3b3:83de) (Ping timeout: 250 seconds)
[22:55:54] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:56:02] *** Joins: polyphem (~rod@2a02:810d:840:8754:b6f3:5141:3b3:83de)
[22:57:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f)
[22:59:55] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:01:31] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881) (Remote host closed the connection)
[23:01:44] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881)
[23:01:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f) (Ping timeout: 240 seconds)
[23:03:05] *** Joins: gensyst (gensyst@user/gensyst)
[23:03:16] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:04:17] <gensyst> Is it possible to have *really* global variables? Something references globally by an ID, for example. Use case: Create a global variable within a library, without the library users having to create the variable in their main and passing it to all functions.
[23:05:39] <monochrom> x :: IORef Int; x = unsafePerformIO (newIORef 0); {-# NOINLINE x #-}
[23:05:51] <romesrf> hahaha
[23:06:08] <monochrom> That said, read the literature about concurrency and re-entrancy to see why this is bad, even in C.
[23:06:35] <monochrom> If a man page says that a C library function is "MT unsafe" it is because of that. And only that.
[23:06:35] <romesrf> gensyst: perhaps you can have the users create the variable just once at the beginning, and then implicitly pass it around all functions with a Reader monad
[23:07:01] <monochrom> And learn that all MT-safe solutions require the user to create the variable and pass it to all functions.
[23:07:07] <geekosaur> ^ is how we typically handle this
[23:07:15] <monochrom> The C people are learning our lessons.  Why do you want to repeat history?
[23:07:58] <gensyst> Okay, so there's no way around that. You just have to live with the fact that the user has the run-time responsibility to create something only once, and not do it twice e.g.
[23:08:01] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[23:08:12] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[23:08:14] <gensyst> All I wanted to do what reduce mental burdens for user.
[23:08:18] <monochrom> Even now "errno" is not a global variable "extern int errno;".  It's a macro that refers to a thread-local variable.
[23:08:19] <gensyst> s/what/was
[23:08:39] <monochrom> Then the user should not write programs.
[23:08:41] <romesrf> there are ways around that, but you probably don't want them
[23:09:01] <monochrom> In this the 21st century of our lord, the bar is raised, yes.
[23:09:25] <monochrom> Programming requires the mental burden of concurrency awareness and reentrancy awareness.
[23:09:46] <monochrom> If you don't want it, either quit, or go back to 1960s when it was simpler.
[23:09:53] <romesrf> gensyst: maybe you can hide that creation from the user, somewhat the way IO monad hides the RealWorld from you
[23:09:58] <gensyst> monochrom, well in some ways the bar is lowered by Haskell. Haskell makes writing programs possible even for morons, whereas Java is too painful unless you are a genius.
[23:10:13] <gensyst> I for instance can't code anymore in non-Haskell (except very specific small programs).
[23:10:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f)
[23:10:36] <monochrom> BTW OOP also advocates the same anti-singleton message.
[23:10:50] <monochrom> And no one dares to say OOP increases mental burden.
[23:10:57] <EvanR> gensyst, place the global variable in a server somewhere, make sure it's got 100% uptime. Then access that server from your program(s) using the ID
[23:11:09] <EvanR> truely global variable
[23:11:10] <SolidusRiver> monochrom, See: Django
[23:11:28] <gensyst> EvanR lol
[23:11:43] <EvanR> romesrf, yes, the Text instance is the only instance now, but down the line someone could make a new instance, breaking all binaries compiled with that assumption
[23:12:10] <romesrf> yep EvanR you all made me understand why I was reasoning badly about that and expecting Text to be inferred
[23:12:35] <gensyst> EvanR although to your point, just writing a file to disk could work lol - but probably very much frowned upon
[23:12:59] <romesrf> gensyst: runReader (yourUniqueIdThatTheUserCreatesOnceAndJustUsesItOnceHere) (yourLogicWithReaderMonad)
[23:13:11] <EvanR> instances at runtime as basically dictionaries passed in at those places you see whatever =>. The tricky bit is what instance is chosen, and we want that to be a sane decision process. (But you can be insane with some extensions turned on)
[23:13:33] <romesrf> EvanR: :-)
[23:14:00] <EvanR> s/as/are/
[23:14:09] <gensyst> Okay so here is my actual use case: Create a queue up front. All certain foreign functions must in the future run on only this queue.
[23:14:21] *** Quits: johnjaye (~pi@173.209.65.233) (Read error: Connection reset by peer)
[23:14:35] <gensyst> So I should just tell my users to first create the queue (using a func from the library), and then pass this queue into other library funcs?
[23:14:36] <dsal> Yeah, that's exactly why you'd have a `runQueue` type thing.
[23:14:40] <EvanR> gensyst, yes don't wanna clog up the client's / user's disk, better to use a server
[23:14:50] <geekosaur> typically you'd do this with a monad, and wrap your FFI functions t run in that monad
[23:15:32] <EvanR> runMyForeignStuff $ do -- magically initializes a queue and uses that behind the scenes
[23:15:33] <dsal> As a bonus, you could have more than one instance of this monad in a process, e.g., during tests, where each test has a well-defined environment.
[23:16:28] <gensyst> That's the thing with this C library (lmdb). certain funcs must only run on the same thread -- program-wide.
[23:16:38] <gensyst> so I'm not sure the monad approach would work..
[23:16:53] <EvanR> don't run runMyForeignStuff from the wrong thread?
[23:16:59] <romesrf> haha
[23:17:33] *** Joins: zebrag (~chris@user/zebrag)
[23:18:01] <romesrf> gensyst: the monad we're talking about simply "hides" from the user that the queue is created and passed to every function
[23:18:19] <EvanR> if you want to stop people from using more than one runMyForeignStuff, I wonder if you can use linear types xD
[23:18:40] <romesrf> #lineartypesareawesome
[23:19:05] <gensyst> ok i'm starting to get what you mean. runMyForeignStuff should only be called ONCE by the user. got it.
[23:19:19] <EvanR> yes as an entry point
[23:19:22] *** Joins: alp (~alp@user/alp)
[23:19:26] <dsal> You can call it more than once if you want.  Each time, it creates a clean environment and starts from the top.
[23:19:32] <dsal> Your tests will likely call it more than once.
[23:19:37] <gensyst> The only "drawback" I can think of: Since this will be done in main by the user (most likely), plain IO functions in the program will be have to run with liftIO.
[23:20:14] <dsal> If you allow such a thing, sure.
[23:20:16] <romesrf> well yes,
[23:20:36] <dsal> Last time I did something like this, I didn't provide a liftIO because I didn't want random IO from within my monad.
[23:20:51] <EvanR> an FFI wrapper that can't do IO would be somewhat comical
[23:21:23] <dsal> In this case, it could do exactly the IO that it was meant to do.
[23:21:28] <monochrom> I have showed right at the beginning how to create a global mutable variable before I said why not.
[23:22:05] <monochrom> You can still do it when there is just cause, for example the fringe case when FFI-binding to a 1960s MT-unsafe library.
[23:22:27] <monochrom> The broken C library is the one that should have been fixed, but oh well.
[23:22:33] <romesrf> ahah
[23:22:49] <gensyst> this lib's author will become truly pissed if you try asking him imo
[23:22:55] <gensyst> so no point bothering
[23:23:16] <gensyst> sad state of affairs lol
[23:23:22] <gensyst> so we're just coping
[23:23:24] <monochrom> ikr this is why we can't have nice things
[23:23:31] <EvanR> there was a GLFW bindings tutorial where their game placed globally accessible TVars to mediate the input callbacks with the rest of the program, it was bold
[23:24:58] <EvanR> so it is possible even in cases where there may not be just cause xD
[23:27:02] *** Joins: fendor (~fendor@178.165.192.6.wireless.dyn.drei.com)
[23:27:39] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[23:27:56] <dsal> If you're into posix:  https://linux.die.net/man/3/hsearch
[23:28:42] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881) (Remote host closed the connection)
[23:28:55] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881)
[23:29:00] <ski> @wiki Top level mutable state
[23:29:00] <lambdabot> https://wiki.haskell.org/Top_level_mutable_state
[23:29:50] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[23:30:14] <dsal> Proposal 1: Don't do that
[23:30:36] <zebrag> [CS vocabulary question] How do you call that sort of construction which is not allowed in every programming languages: `(funcall (intern "my-func-name"))`? (https://stackoverflow.com/questions/29213111/call-a-function-from-a-string-name-in-emacs-lisp)
[23:31:14] <monochrom> "eval"
[23:31:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:31:31] <ski> parameterized modules, possibly instantiated at run-time, might be a nice way around some of the awkwardness (?)
[23:31:39] <dsal> > do eval
[23:31:41] <lambdabot>  "no"
[23:31:46] <dsal> lambdabot do no eval
[23:31:54] <monochrom> Hahaha
[23:32:23] <ski> @eval ()
[23:32:40] <zebrag> monochrom: but `eval` does not work on a string? (like the language compiling itself)
[23:32:42] <monochrom> @list eval
[23:32:42] <lambdabot> eval provides: run let define undefine
[23:33:01] <monochrom> eval takes strings for input.
[23:33:11] <monochrom> Find it in Lisp Scheme and Javascript.
[23:33:21] <ski> zebrag : are you referring to the "run-time code (generation and) execution" aspect, or the aspect about looking up the identifier at run-time ?
[23:33:30] <ski> @help eval
[23:33:30] <lambdabot> eval. Do nothing (perversely)
[23:33:38] <geekosaur> typically not found in compiled languages (C, C++, Java, Haskell, etc.)
[23:33:54] <monochrom> The worst idea ever, but oh well, some people really like ready-made universal turing machines.
[23:34:13] <zebrag> ski, monochrom: but that wouldn't work in haskell, right?
[23:34:14] <ski> MetaOCaml has `eval'
[23:34:15] <zebrag> okay
[23:34:23] <monochrom> Not in Haskell.
[23:34:25] <zebrag> ;)
[23:34:41] <monochrom> OK, only the 2nd worst idea ever.
[23:34:45] <ski> well .. there's quasiquotations in TH
[23:34:50] <monochrom> The worst idea ever is self-modifying code.
[23:35:02] <geekosaur> there are actually ways to do it in Haskell — but you do not get access to the memory of the program that is doing the eval, it runs in its own separate "VM"
[23:35:14] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:35:18] * ski idly recalls once writing assembler code which modified machine code which modified machine code
[23:35:37] <ski> (perhaps there was one more level, i forgot)
[23:35:41] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[23:36:02] <monochrom> Racket's eval also requires whoever calling eval to customize its namespace (or else the default is very limiting) so it's a bit more tolerable.
[23:36:19] <zebrag> monochrom: "worst idea ever is self-modifying code", laughing.
[23:36:25] *** Quits: fendor (~fendor@178.165.192.6.wireless.dyn.drei.com) (Remote host closed the connection)
[23:36:47] *** Joins: juhp (~juhp@128.106.188.82)
[23:36:52] *** Quits: briandaed (~briandaed@185.234.208.208.r.toneticgroup.pl) (Quit: Lost terminal)
[23:37:03] <ski> yea. in MetaML/MetaOCaml, it just uses the lexical environment (hygienically)
[23:37:31] <zebrag> okay so that answers the vocabulary question: the name is "worst idea ever".
[23:37:57] <monochrom> or universal turing machine
[23:38:10] <ski> writing meta-programs can be useful
[23:38:28] <zebrag> yeah, lots of people like universal Turing machine
[23:38:43] <zebrag> ski: it does
[23:39:05] <monochrom> Maybe it's called reflection. Java calls it reflection.
[23:39:09] * ski . o O ( "A Taxonomy of meta-programming systems" by Tim Sheard at <https://web.cecs.pdx.edu/~sheard/staged.html> )
[23:40:20] <zebrag> there is a (unrelated thing) "reflection" in category theory?
[23:40:25] <gensyst> monochrom, https://wiki.haskell.org/Top_level_mutable_state so what could go wrong with your original unsafePerformIO? if all i do is put queue into the IORef first, then subsequence funcs just use this same queue.
[23:41:01] *** Quits: ystael (~ystael@user/ystael) (Read error: Connection reset by peer)
[23:41:05] <zebrag> thanks a lot for the help
[23:41:05] <monochrom> Do you have multiple threads?
[23:41:17] <monochrom> No, that's the wrong question.
[23:41:17] <ski> zebrag : hm, there's something called "reflective subcategory", i think, but i dunno what it is
[23:41:34] <monochrom> Do you know for sure that there won't be multiple threads?
[23:42:24] *** Quits: ukari (~ukari@user/ukari) (Remote host closed the connection)
[23:42:41] *** Joins: ukari (~ukari@user/ukari)
[23:42:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[23:43:43] <gensyst> monochrom, on the contrary i know for sure multiple threads will grab that queue. most work will be done on those separate threads, however occasionally certain C functions will have to be executed on the same OS thread (which is the purpose of that queue to begin with)
[23:43:57] <monochrom> Then atomModifyIORef can help.
[23:44:00] <gensyst> s/same OS thread/same program-wide OS thread
[23:44:13] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7985:a982:d93:11f)
[23:44:51] <monochrom> Normal read-then-writeIORef invites race condition. atomicModifyIORef solves that.
[23:45:15] <gensyst> that's really cool :) so this solves my problem. so what's all the fuss about? seems like a breeze
[23:45:25] <monochrom> Until you have two IORefs to coordinate. Then even atomicModifyIORef doesn't save you, it doesn't know that you have two to coordinate.
[23:45:39] <gensyst> alright, i'll try to keep only one :D
[23:45:43] <geekosaur> so, sounds to me like you want that monad, which holds a TChan. requestors write to the TChan. you then make a bound thread to take from the TChan and make calls.
[23:46:01] <monochrom> You asked a general question so I get to enumerate all problems in the general case?
[23:46:03] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Read error: Connection reset by peer)
[23:46:09] <geekosaur> if they need to communicate back it becomes harder though, but your global var solution won't help there either
[23:46:13] <gensyst> monochrom, you are right of course :)
[23:47:10] <geekosaur> (TVar may work in place of TChan depending on what you're doing)
[23:47:36] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[23:47:56] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[23:48:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[23:48:19] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[23:48:28] <dsal> Reaching for a global variable to make easier is like reaching for a grenade to stop a mugger.  It'll kind of work, but you'll spend more on the unintended side effects than the original problem.
[23:48:30] *** Quits: Guest9647 (~Guest96@144-124-99-115.pip.aber.ac.uk) (Quit: Client closed)
[23:49:13] *** Joins: cfricke (~cfricke@user/cfricke)
[23:49:18] <gensyst> monochrom, do you have any ideas on how to create that queue? I found the package immortal-queue that looks interesting. However this doesn't have bound (OS) threads atm, so I might have to modify it.
[23:51:37] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[23:51:56] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[23:52:03] <c_wraith> gensyst: did you know hot-reloading of code is possible in GHC? Do you know how that works with global refs?
[23:53:32] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:16af:8d6b:42b4:6731) (Ping timeout: 240 seconds)
[23:53:52] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[23:54:08] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[23:55:32] <gensyst> c_wraith, no i don't know how that works
[23:55:54] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[23:56:27] <c_wraith> It's worth consideration before using a global ref.
