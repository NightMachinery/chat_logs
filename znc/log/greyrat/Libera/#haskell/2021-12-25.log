[00:02:57] <EvanR> containers... not exactly a very technically specific concept
[00:03:22] <EvanR> even though other languages like to make container interfaces, they have no laws
[00:04:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[00:04:18] <EvanR> for number-like structures see abstract algebra
[00:05:48] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[00:06:29] <IgnatInsarov[m]> Speaking of containers, there is some theory attached to that name. See work by Michael Abbott, Thorsten Altenkirch and Neil Ghani. <https://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.120.9567&rep=rep1&type=pdf>
[00:07:28] <energizer> what i'm aiming at is the way that b < b' => a[b] <: a[b'] differs from a < a' => a[b] a'[b]
[00:08:04] <energizer> (where a[b] means parametrizing a by b)
[00:08:04] *** Joins: zmt00 (~zmt00@user/zmt00)
[00:08:19] <EvanR> the subtype contravariance thing comes up in languages with mutable containers
[00:08:32] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[00:08:49] <energizer> this isnt' that 
[00:09:03] <oats> with lens, is it possible to create a Fold over the "neighboring elements" of an index?
[00:09:13] <oats> such as with a 2d array structure
[00:09:27] <EvanR> comonads to the rescue?
[00:09:31] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:09:54] <oats> what's a comonad
[00:10:09] <oats> can I turn the monad on my bookshelf inside-out?
[00:10:10] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:10:34] <geekosaur> energizer, I'd imagine that in that case we would talk about being "covariant/contravariant in …"
[00:10:44] <geekosaur> since there's more than one possibility
[00:10:58] <energizer> ah, that's easy. cheers
[00:11:36] *** Joins: deadmarshal (~deadmarsh@95.38.117.158)
[00:12:09] <geekosaur> because what do you do when you suddenly have three possibilities, invent yet another term?
[00:12:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Ping timeout: 240 seconds)
[00:13:16] <energizer> well it's not just more possiblities like a[b,c,d], it's leveled a[b[c[d]]]
[00:15:02] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:16:45] <dsal> oats: sounds like https://hackage.haskell.org/package/lens-3.2/docs/Control-Lens-Zipper.html
[00:18:07] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 268 seconds)
[00:20:54] <energizer> is there a name for the outer type of a parametrized type?
[00:21:46] <energizer> ie "List" in "List int"
[00:22:03] <oats> dsal, is that removed in newer versions of `lens`?
[00:22:24] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:23:39] <oats> oh, moved to a different package in lens 4.0
[00:23:39] <dsal> Hmm...  it was moved
[00:24:23] <dsal> Would be cool if they mentioned what that package was.
[00:24:28] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[00:24:29] <dsal> But the concept in general is zipper.
[00:24:50] <oats> still in progress trying to understand it :P
[00:25:05] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[00:25:07] <geekosaur> energizer, terms vary but I'd say List int is a type and List is a parameterized type
[00:25:49] <geekosaur> that said, "parameterized" is a bit fraught; it starts to make more sense to talk in terms of kinds
[00:25:53] <geekosaur> :k StateT
[00:25:54] <lambdabot> * -> (* -> *) -> * -> *
[00:26:04] <geekosaur> how do you describe this in words?
[00:26:38] <geekosaur> whereas lists are simple:
[00:26:39] <oats> star arrow star arrow star arrow....
[00:26:40] <geekosaur> :k []
[00:26:41] <lambdabot> * -> *
[00:28:09] <energizer> can't say :k List tho
[00:28:33] <geekosaur> if you define your own List type, you can
[00:29:04] <geekosaur> Haskell calls it [] so that's how you must name it. SML would be different, where it's "int list" or similar
[00:30:18] <geekosaur> (there being a bunch of SML variants)
[00:31:28] <hpc> SML is short for "so many languages"
[00:32:04] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:44:12] <geekosaur> (you also can't say :k int in Haskell since type names always start with an uppercase letter, so I'm not really sure what the point of :k List was)
[00:45:23] *** Joins: falafel (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com)
[00:48:08] *** Quits: goepsilongo (~goepsilon@2806:263:c404:8000:1841:9986:6b2b:10e6) (Quit: Textual IRC Client: www.textualapp.com)
[00:49:38] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 260 seconds)
[00:51:25] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[00:52:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:52:27] <[itchyjunk]> Just to mentally think this through we have map :: (a->b) -> [a] -> [b] right?
[00:52:56] <[itchyjunk]> so what would it look like it i had something that can take a higher order function and return [b] say 
[00:53:11] <[itchyjunk]> It should be possible i think but brain can't think it through
[00:54:10] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:54:10] <Rembane> :t map 
[00:54:11] <lambdabot> (a -> b) -> [a] -> [b]
[00:54:19] <Rembane> :t map id []
[00:54:20] <lambdabot> [b]
[00:54:24] <Rembane> Like that? 
[00:55:30] <geekosaur> note that you can think of map as: (a -> b) -> ([a] -> [b])
[00:55:33] <[itchyjunk]> aren't you just using map with id as its parameter?
[00:55:49] *** rumpled_pigeon is now known as otherwise
[00:56:09] <[itchyjunk]> hmm
[00:56:45] <Rembane> [itchyjunk]: Sure, lets say you have a function that does what I just did instead. 
[00:56:49] <[itchyjunk]> i can think of map as a function that takes a function (a->b) as a parameter and returns a function ([a]->[b]) ?
[00:56:59] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:57:06] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[00:57:12] <Rembane> [itchyjunk]: Yes!
[00:57:19] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[00:57:36] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 268 seconds)
[00:57:59] <[itchyjunk]> So i would want a function that takes a function that takes a function and return it a function for a higher order function that takes a higher order function as a parameter
[00:58:15] <otherwise> > 1+1
[00:58:17] <lambdabot>  2
[00:58:40] <otherwise> phwew
[00:59:50] <geekosaur> :t map (+2)
[00:59:51] <lambdabot> Num b => [b] -> [b]
[01:01:08] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:01:08] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:01:27] <[itchyjunk]> (+2) is a partial function. so `map (+2)` should produce another partial function that takes a list and spits out a list ah..
[01:01:33] <[itchyjunk]> that's what the [b] -> [b] is
[01:02:00] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:02:01] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:02:35] <geekosaur> :t (+2)
[01:02:36] <lambdabot> Num a => a -> a
[01:02:42] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[01:03:35] <geekosaur> that it's partial doesn't matter; I could just as well define it as a non-partial lambda and it would still work
[01:03:51] <[itchyjunk]> If i think of + as Int -> (Int -> Int), +2 would be the remaining (Int->Int) part
[01:03:58] <geekosaur> but partially applied functions are quite convenient in Haskell
[01:04:33] <geekosaur> (also note "partial" conventially has a different meaning in Haskell. (+2) is partially applied. head is partial, because it's not defined for all inputs)
[01:04:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:04:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:04:52] *** Joins: wroathe (~wroathe@user/wroathe)
[01:05:01] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:05:01] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:05:08] <[itchyjunk]> oh, not familiar with that second meaning
[01:05:25] <hpc> it comes from total/partial being opposites
[01:05:27] <[itchyjunk]> shouldn't you get a compilation error if everything in to domain isn't mapped to something?
[01:05:43] <hpc> a total function is defined for all inputs
[01:06:02] <geekosaur> not in Haskell. it'll quite happily let you write "head []", it'll just throw an error at runtime
[01:06:35] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:06:36] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:06:51] <[itchyjunk]> ah
[01:06:59] <geekosaur> also proving that something is total is difficult in general, so while there are languages which require totality, they either require you to prove it or don't let you write very much in general because you're restricted to a total subset
[01:07:03] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:07:04] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:07:42] <EvanR> and if what you're restricted to is exactly what you're trying to accomplish, gravy :)
[01:07:43] <[itchyjunk]> Ah, this is linked to proof assistance not being turning complete because of restrictions like this?
[01:07:46] <hpc> in turing-complete languages, proving totality is undecidable
[01:07:48] <hpc> yep
[01:08:10] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[01:08:18] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[01:08:34] <hpc> partiality includes not just errors like (head []), but infinite loops like (let x = x in x)
[01:09:06] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:09:09] <[itchyjunk]> oh interesting recursion
[01:09:27] <EvanR> "something in the domain isn't mapped to something" 
[01:09:34] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:09:35] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:09:41] <geekosaur> also note that this restriction may mean you can't write e.g. web servers, because you can't prove that a connecting client won't send an infinite stream of data
[01:09:59] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:10:00] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:10:00] <hpc> geekosaur: well, there it gets complicated
[01:10:39] <EvanR> if it's a websocket, that's ok. If it's supposed to cut you off at some policy amount, that's ok
[01:10:41] <hpc> there's a notion of non-turing-complete languages in which you can write programs that run forever, but only by having some finite computation on every step of input
[01:10:52] <hpc> if there's infinite input, there's infinite output
[01:10:58] <hpc> but the program remains productive through the whole thing
[01:11:37] <EvanR> the gritty details come in for driver loops
[01:14:10] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:14:40] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[01:17:08] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:17:09] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:18:57] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[01:23:01] *** Joins: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net)
[01:23:28] *** Quits: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net) (Client Quit)
[01:24:41] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[01:25:33] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:25:34] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:25:52] <monochrom> For an interactive system like web servers and web apps, the theory (model) of total functions is not appropriate. Much more appropriate is temporal logic and liveness.
[01:29:35] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:29:35] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:29:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[01:31:16] *** Joins: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net)
[01:32:12] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:32:12] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:32:20] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Remote host closed the connection)
[01:33:04] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[01:33:16] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[01:33:56] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:33:57] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:34:27] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[01:34:47] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:35:44] *** Quits: otherwise (~otherwise@c-73-221-44-172.hsd1.wa.comcast.net) (Remote host closed the connection)
[01:43:33] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[01:44:17] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:44:55] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:45:18] *** Joins: rlj (~rlj@62.119.244.114)
[01:48:00] *** Joins: notzmv (~zmv@user/notzmv)
[01:50:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[01:50:55] *** Quits: rlj (~rlj@62.119.244.114) (Ping timeout: 256 seconds)
[01:51:29] *** Joins: otherwise (~otherwise@2601:602:880:90f0:2164:480c:998d:fc7c)
[01:54:32] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[01:58:41] *** Quits: jeetelongname (~jeet@88.111.159.26) (Ping timeout: 250 seconds)
[02:01:21] <sm> working with emacs and emacs config really makes you appreciate the disciplined control of state in haskell software. For all our problems, that is a huge asset that I take for granted 
[02:01:46] <sm> it's a shock when you go back to older systems
[02:01:58] <sm> older/less disciplined
[02:02:13] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[02:03:49] *** Joins: Techcable (~Techcable@168.235.93.147)
[02:06:21] *** Joins: acidjnk (~acidjnk@p200300d0c7271e974de60a217c79c2cb.dip0.t-ipconnect.de)
[02:10:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[02:11:24] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:12:23] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Remote host closed the connection)
[02:12:57] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[02:14:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Ping timeout: 240 seconds)
[02:15:17] *** Quits: deech`` (~user@024-217-244-075.res.spectrum.com) (Ping timeout: 240 seconds)
[02:15:28] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:16:27] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[02:18:07] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[02:25:47] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 268 seconds)
[02:28:44] *** Joins: acode (~acode@151.65.31.181)
[02:29:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:30:49] *** Joins: max22- (~maxime@2a01cb0883359800d70950f17875b6a2.ipv6.abo.wanadoo.fr)
[02:33:03] <acode> Hey everyone, beginner's question here: I'm reading learn you a haskell and I reached the section about the functor typeclass. Following the author's example I have a type Tree around from earlier that I want to make an instance of Functor. Now fmap over the empty tree does nothing and that's alright, while I'm trying to copy the book's code "fmap
[02:33:03] <acode> f (Node x left right) = Node (f x) (fmap f left) (fmap f right) " to map over nontrivial trees, which results in an error by ghci because of an ambiguous occurence of fmap which I'm having issues sorting out
[02:36:23] <geekosaur> you will have to name your Functor typeclass and fmap function something else
[02:36:37] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[02:36:39] <geekosaur> oh, wait, you're using the standard one
[02:36:52] <hpc> might be missing "instance Functor Tree where"
[02:36:56] <geekosaur> you need to do it in an instance declaration, and do it all on one line because ghci is stupid
[02:37:05] <hpc> or :{ to start a multiline block
[02:37:07] <hpc> and :} to end it
[02:37:09] <geekosaur> instance Functor Tree where fmap = ...
[02:37:16] <hpc> (or pop it in a file and ghci file.hs
[02:37:18] <hpc> )
[02:37:44] <hpc> i usually prefer files, because at the end of your experimenting you have a file full of useful code
[02:37:52] *** Joins: benin (~benin@183.82.27.57)
[02:38:00] <acode> I have the instance declaration in a .hs file called alberelli.hs, the error I get is "Ambiguous occurrence `fmap'
[02:38:00] <acode>     It could refer to
[02:38:01] <acode>        either `Prelude.fmap',
[02:38:01] <acode>               imported from `Prelude' at alberelli.hs:1:1
[02:38:02] <acode>               (and originally defined in `GHC.Base')
[02:38:02] <acode>            or `Main.fmap', defined at alberelli.hs:21:1"
[02:38:07] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[02:38:17] <acode> instance Functor Tree where
[02:38:17] <acode> fmap f EmptyTree = EmptyTree
[02:38:18] <acode> fmap f (Node x left right) = Node (f x) (Main.fmap f left) (Main.fmap f right)
[02:38:22] <acode> While this is my instance declaration
[02:38:33] <geekosaur> you need to indent the fmpa lines
[02:38:35] <geekosaur> *fmap
[02:38:50] <geekosaur> otherwise you're defining a new function outside of the instance declaration
[02:39:00] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:39:13] <acode> Oh
[02:39:34] <acode> That was easy, I completely missed that indentation is needed there, feelsdumb
[02:39:36] <acode> Thanks!
[02:46:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:46:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:46:04] *** Joins: wroathe (~wroathe@user/wroathe)
[02:48:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 268 seconds)
[02:50:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:50:37] *** Quits: acode (~acode@151.65.31.181) (Quit: Client closed)
[02:53:04] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[02:54:31] *** Quits: deadmarshal (~deadmarsh@95.38.117.158) (Ping timeout: 256 seconds)
[02:57:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[02:57:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:58:05] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54f844-160.dhcp.inet.fi)
[02:59:50] *** Joins: KvL (~KvL@195.216.219.76)
[03:00:18] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:2421:137f:dee3:7f7d) (Ping timeout: 260 seconds)
[03:00:18] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[03:01:49] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[03:02:05] *** Joins: deadmarshal (~deadmarsh@95.38.229.175)
[03:02:35] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[03:03:48] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[03:04:51] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54f844-160.dhcp.inet.fi)
[03:08:17] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54f844-160.dhcp.inet.fi) (Ping timeout: 240 seconds)
[03:09:03] <otherwise> > replicate 3 "wee "
[03:09:04] <lambdabot>  ["wee ","wee ","wee "]
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[03:17:53] *** Joins: Jing (~hedgehog@2604:a840:3::1061)
[03:20:51] <EvanR> > replicate 3 "Ho "
[03:20:53] <lambdabot>  ["Ho ","Ho ","Ho "]
[03:21:39] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[03:21:39] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[03:21:39] *** finn_elija is now known as FinnElija
[03:22:10] <geekosaur> > replicate 3 "Mu "
[03:22:12] <lambdabot>  ["Mu ","Mu ","Mu "]
[03:31:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[03:31:59] *** Joins: Alex_test_ (~al_test@178.34.160.99)
[03:32:00] *** Joins: AlexZenon_2 (~alzenon@178.34.160.99)
[03:32:36] *** Quits: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Ping timeout: 240 seconds)
[03:33:32] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (Ping timeout: 240 seconds)
[03:33:37] *** Quits: AlexZenon (~alzenon@178.34.160.99) (Ping timeout: 256 seconds)
[03:33:37] *** Quits: Alex_test (~al_test@178.34.160.99) (Ping timeout: 256 seconds)
[03:34:02] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Ping timeout: 240 seconds)
[03:34:06] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[03:34:27] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[03:34:31] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[03:35:03] *** Joins: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[03:36:43] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[03:38:04] *** Quits: max22- (~maxime@2a01cb0883359800d70950f17875b6a2.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[03:40:08] *** Joins: rlj (~rlj@62.119.244.114)
[03:42:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:42:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:42:39] *** Joins: wroathe (~wroathe@user/wroathe)
[03:48:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 268 seconds)
[03:49:38] *** Quits: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Ping timeout: 268 seconds)
[03:52:27] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54f844-160.dhcp.inet.fi) (Read error: Connection reset by peer)
[03:56:18] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[03:56:25] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 268 seconds)
[04:01:35] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[04:02:59] *** Quits: KvL (~KvL@195.216.219.76) (Quit: KvL)
[04:03:19] *** Joins: KvL (~KvL@195.216.219.76)
[04:03:56] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[04:04:13] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[04:08:35] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[04:09:37] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:12:52] <[itchyjunk]> What are the pre-req to understand this thing called "y-combinator" ?
[04:13:08] <[itchyjunk]> something something anynomous function, recursion, higher order function but i don't get it.
[04:13:48] <geekosaur> the usual formulation of the Y combinator requires an understanding of the untyped lambda calculus
[04:14:56] <geekosaur> "\x -> x x" takes a function (we know it's a function because it's applied in the body) and applies it to itself
[04:15:00] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[04:15:59] <[itchyjunk]> woha, applies it to itself, what a crazy concept..
[04:16:20] <[itchyjunk]> I need to look into this lambda calculus stuff, its been getting in the way a lot more these days.
[04:16:44] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:17:33] <geekosaur> quite a bit of Haskell will make more sense with an understanding of lambda calculus, because in many ways Haskell is about as close as you can get to programming directly with lambda calculus
[04:18:14] <geekosaur> mostly because of Haskell's laziness, which means it's evaluated by reduction of terms the same way lambda calculi are
[04:18:21] <[itchyjunk]> What are the prereq for learning lambda calc?
[04:19:34] <geekosaur> not much, actually. the untyped lambda calculus in particular is fairly simple, you jsut need to learn the rules for expanding and reducing terms. and of course the syntax, which may be the hardest part to get used to
[04:19:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[04:20:20] <geekosaur> but expanding and reducing terms is actually fairly mechanical
[04:20:20] *** Quits: rlj (~rlj@62.119.244.114) (Quit: Client closed)
[04:20:37] <[itchyjunk]> ah i see
[04:21:13] <geekosaur> other types of lambda calculus add more to that, but they're relatively small steps upward after you have the untyped lambda calculus
[04:22:12] <[itchyjunk]> I've heard of this concept. i was reading a little bit of godel, escher, bach and they talk about formal systems and axioms and how you build theorems out of it
[04:22:36] <geekosaur> it's when you start applyingt those rules to \x -> x x that you start to realize what all the yelling is about :)
[04:22:52] *** Joins: lechner (~lechner@debian/lechner)
[04:23:36] <geekosaur> yeh, I was just trying to remember if GEB presented much of lambda calculus at all. I don't think it did though
[04:24:09] <geekosaur> not directly relevant to demonstrating Gödel's theorem
[04:24:17] <[itchyjunk]> ahh
[04:24:24] <geekosaur> it'd just be another thing to demonstrate encoding of
[04:26:58] <geekosaur> well, no. you could I think demonstrate the Incompleteness Theorem with lambda calculus, but the original was demonstrated on number theory as described by _Principia Mathematica_ so (a subset of) that was what Hofstadter stuck to
[04:27:20] <geekosaur> LC and number theory are fairly different things though
[04:29:08] <geekosaur> (although I am vaguely recalling that there is an approach to set theory based on lambda calculus, which would lead to number theory eventually)
[04:31:32] *** Quits: acidjnk (~acidjnk@p200300d0c7271e974de60a217c79c2cb.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:33:37] *** Quits: n3rdy1 (~n3rdy1@2601:281:c780:a510:c82b:6078:8c93:1082) (Ping timeout: 240 seconds)
[04:36:31] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-52.elisa-laajakaista.fi) (Quit: Leaving.)
[04:36:51] *** Joins: kaph_ (~kaph@net-2-45-51-147.cust.vodafonedsl.it)
[04:39:17] *** Quits: kaph (~kaph@net-2-45-51-147.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[04:41:25] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 240 seconds)
[04:44:26] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[04:47:28] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[04:47:44] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:47:45] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:49:12] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[04:49:45] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:49:46] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:51:30] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:51:30] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:54:10] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 260 seconds)
[04:54:17] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:54:18] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:54:43] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:54:44] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:58:41] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[04:58:59] *** Joins: Alleria (~textual@user/alleria)
[04:59:30] *** Quits: KvL (~KvL@195.216.219.76) (Quit: KvL)
[05:00:35] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:00:36] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:01:19] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:01:19] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:01:58] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:01:59] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:02:49] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:02:50] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:04:27] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Remote host closed the connection)
[05:04:50] *** Joins: Techcable (~Techcable@168.235.93.147)
[05:05:53] *** Joins: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[05:06:16] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[05:08:03] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:08:03] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:08:33] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:08:34] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:10:03] <otherwise> > head [3,2,1]:head (tail [3,2,1]):[head (tail (tail [3,2,1]) )]
[05:10:04] <lambdabot>  [3,2,1]
[05:10:20] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:10:21] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:11:05] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:11:06] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:11:32] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:11:32] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:12:14] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:12:15] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:12:37] *** Joins: BrokenClutch (~pioneer@2804:d41:c2a7:d800:e627:b00b:2c62:134)
[05:13:48] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:13:48] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:13:51] <BrokenClutch> First, merry Christmas. Second, Is common to feel unable to understand reactive-banana? Am I too dumb?
[05:14:14] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:14:15] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:16:59] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:17:00] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:17:26] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:17:27] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:17:52] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[05:18:59] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:19:00] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:19:29] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:19:30] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:19:44] <dsal> BrokenClutch: I've had no issues understanding reactive banana.
[05:19:46] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:19:46] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:19:49] * dsal doesn't know what reactive banana is
[05:21:07] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:21:18] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:21:54] <BrokenClutch> dsal: How?
[05:22:15] <dsal> ?
[05:22:25] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[05:22:28] <BrokenClutch> dsal: I'm like, crying rn (not really). How to understand it?
[05:22:35] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:22:35] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:22:54] <dsal> I've never seen it.  What is it?  Why is it important to you?
[05:23:09] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:23:10] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:23:22] <BrokenClutch> dsal: FRP
[05:23:46] <BrokenClutch> dsal: Looks cool, I can do text adventures, lots of things
[05:24:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[05:24:28] <dsal> Oh.  What kind of problem are you having?
[05:25:45] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:25:46] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:26:03] <BrokenClutch> dsal: I don't get it. Is it possible to define monad/applicative operations that register something as a callback?
[05:26:17] <BrokenClutch> Like, as a side-effect
[05:26:19] <[itchyjunk]> Never heard of "reactive programming" before
[05:26:39] <BrokenClutch> [itchyjunk]: it's cool
[05:27:56] <dsal> BrokenClutch: Well, sure.  That's basically what things like modify do.
[05:27:57] <dsal> :t modify
[05:27:58] <lambdabot> MonadState s m => (s -> s) -> m ()
[05:28:22] <EvanR> reactive banana probably has it's own way to do such things
[05:28:50] <BrokenClutch> Is it viable to do FRP without those libs?
[05:28:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:29:33] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 268 seconds)
[05:29:52] <EvanR> maybe there is a reactive banana tutorial or guide laying around?
[05:30:01] <EvanR> crash course
[05:30:52] <BrokenClutch> There is, but I found the lib to be very "not intuitive"
[05:30:56] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:30:57] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:31:14] <dsal> That's often a good thing.
[05:31:29] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:31:30] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:31:44] <dsal> Have you got a good intuition for the stuff it's built on yet?
[05:31:46] <BrokenClutch> dsal: At least this makes it a good challenge
[05:31:47] <EvanR> on the bright side, your experience is the first step to being one of those people with any experience at all with FRP
[05:32:25] <EvanR> so one day you can provide some insight on the lib xD
[05:32:38] <dsal> "not intuitive" often means you're having to learn things.  If everything fit into what you already know, you'd be limited to only doing things you already know.
[05:32:39] <BrokenClutch> EvanR: Isn't FRP popular?
[05:33:00] <BrokenClutch> dsal: That's why I'm studying haskell, I agree with you
[05:33:03] <dsal> "popular" is a weird metric .  Popular with whom, for what?
[05:33:24] <EvanR> it was blogosphere buzzwordy for a few years
[05:33:26] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:33:27] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:33:50] <EvanR> conal's formulation from earlier never really caught on
[05:33:53] <BrokenClutch> dsal: Don't know
[05:34:02] <BrokenClutch> EvanR: I can see why
[05:34:27] <BrokenClutch> Those stuff that i want to do are more easily done with imperative languages, but they ain't fun
[05:34:32] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:34:33] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:34:53] <EvanR> there are some beautiful ideas behind FRP out there, maybe it's the thought that counts xD
[05:34:53] <dsal> You being able to do them more easily with imperative languages doesn't mean they're more easily done with imperative languages.
[05:35:49] <EvanR> BrokenClutch, what exactly are you trying to achieve
[05:35:57] <BrokenClutch> EvanR: fun
[05:36:09] <EvanR> "exactly"
[05:36:28] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:36:28] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:36:29] <dsal> I do something similar with my mqtt broker.  The reference implementations were too buggy, so I threw one together real quick.  It just… works.  Handling concurrent data structure access with lots of weird mutation paths is trivial in Haskell.  Reference implementation continues to be incomplete and buggy.  Mine continues to just be a boring project that works.
[05:36:35] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[05:36:37] <BrokenClutch> I want to make some cute stuff, like some little gaming things
[05:36:59] <EvanR> you're in good company
[05:37:07] <EvanR> check out #haskell-game if you get a chance
[05:37:23] <BrokenClutch> EvanR: I will
[05:38:03] <BrokenClutch> dsal: Didn't understood a word, but i got the spirit
[05:38:20] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[05:38:28] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:38:30] <dsal> Managing state in haskell is so much easier than managing state in any other language, IME.
[05:38:43] <dsal> parallelism is ~0 effort.  Concurrency is composable.
[05:38:55] <EvanR> I'll add YMMV to that xD
[05:39:44] <EvanR> if someone just asks you to manage some state and absolutely nothing else, I can see how it would be easy
[05:40:27] <dsal> Well, sure.  I've done pretty high volume concurrency code in java, C++, C, go, and a few other languages.  Haskell is the one that's been the easiest.
[05:40:33] <BrokenClutch> I just started to use haskell because lambdas are fun, managing states with haskell isn't easy to me, but it's more readable.
[05:40:39] <dsal> (not counting stuff like javascript and python, but I've done a few of those as well)
[05:41:20] <BrokenClutch> dsal: Did you tried with rust or erlang?
[05:42:24] <dsal> Oh yeah, I've built a company around an erlang core as well.
[05:42:28] <dsal> erlang is also pretty good at this.
[05:42:58] <dsal> I've not used rust.  It's not much a fit for most things I do.  But I hear there are some pretty sharp edges.
[05:43:08] <EvanR> after enough haskellisms, you might begin to think differently about "managing state" or even what "state" is
[05:43:35] <dsal> If you don't use StateT, your code is stateless. 
[05:43:52] <EvanR> sometimes you can accomplish something and not realize what happened to the state you thought you needed
[05:44:00] <BrokenClutch> EvanR: I like it because I can think linearly, without being afraid that something will get crazy
[05:44:15] <dsal> Like which?
[05:44:22] <EvanR> you mean like modifying a bunch of variables with a line by line imperative program?
[05:44:32] <EvanR> that sounds crazy to me, if it gets beyond a single-page algorithm
[05:44:34] <dsal> That's horrifying.
[05:45:02] <dsal> I like looking at a type signature and having some idea what might happen… though a lot of people argue you should do everything in IO for some reason.
[05:45:14] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:45:16] <BrokenClutch> When i write Scheme i really avoid "set!", most people do this to avoid those crazy stuff
[05:45:41] <EvanR> so you could be construing "state" with mutable variables
[05:45:54] <dsal> When I write a function in Haskell, I know it doesn't do any weird stuff that affects the rest of my program.  :)
[05:46:12] <dsal> But I still have State, ST, STM, and whatever else I need.
[05:46:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Remote host closed the connection)
[05:46:47] <dsal> STM basically doesn't outside of Haskell, at least not with sanity.  Various libraries "do" STM in different languages as long as you're really super careful.
[05:47:20] <dsal> STM in haskell doesn't require all that much care.  Most dumb things won't compile.  You can still write bugs, but the language allows you to build a library that is hard to use incorrectly.
[05:48:04] <EvanR> this library is so hard to use! incorrectly!
[05:48:21] <BrokenClutch> dsal: This helps me a lot. I'm not a smart cookie, haskell helps me to be sure that I'm not doing something strange
[05:48:33] <BrokenClutch> EvanR: using incorrectly is half of the fun
[05:48:33] <dsal> Yes, I use Haskell because I'm dumb.
[05:49:15] <dsal> The major fancy language features that are fancy and unique to go are easy to write as a library in Haskell, but unlike in go, you can also compose them.
[05:49:16] <EvanR> I need haskell because I'm dumb, I can use haskell because I'm smart? xD
[05:49:50] <dsal> go channels have a really narrow composition mechanism.  In practice, you do not make channels part of your API, even though doing so *might* make it possible to do some basic composition.
[05:50:02] <BrokenClutch> the source code of reactive-banana isn't too big, should i read it? I'm pretty new with haskell, but I think i can get it.
[05:50:29] <dsal> In STM, you *should* expose STM operations in your API (where it makes sense at least), but they compose easily in all kinds of fancy ways.
[05:50:35] <EvanR> sure read the source
[05:51:30] <dsal> BrokenClutch: If you're not to Haskell, you're not doing yourself any favors by dropping yourself naked in the middle of a small village where you don't speak the language and try to work out how to write a book from what you think people are yelling at you.
[05:51:50] <dsal> er, s/not to/new to/
[05:52:58] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:53:02] <dsal> It's far easier to learn by knowing the fundamentals and then learning new abstractions as your needs grow in their direction.  Starting from weird high level abstractions built on top of layers and layers of foundational bits will always be disorienting.
[05:53:55] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:53:56] <BrokenClutch> dsal: Why naked?
[05:53:56] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:54:15] <EvanR> this metaphor is NSFW
[05:54:36] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:54:36] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:57:14] <BrokenClutch> The books can be too boring. I actually like to read those kind of books, but for haskell they are too slow. I would like a book like the math ones I read, more dense and direct
[05:57:43] <BrokenClutch> If i was naked I would write one
[05:57:50] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:57:55] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[05:58:21] <EvanR> just don't fall into the monad tutorial fallacy
[05:58:44] <dsal> I've never seen a monad tutorial that helped me understand anything.
[05:59:35] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:59:36] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:59:38] <dsal> The reason monads are hard to explain to people is because they have no context whatsoever to talk about things.  If you try to explain what they need to know to understand things, they complain about it being too complicated.  If you walk them there without that being the actual goal, it's pretty easy to arrive.
[05:59:40] <BrokenClutch> I've just used LSP on emacs to see what was going on
[06:00:46] <BrokenClutch> I see like a sequence of computations inside a context
[06:02:20] <EvanR> ghci has a debugger that can show you the state of a computation
[06:02:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:02:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[06:02:47] <BrokenClutch> EvanR: LSP is more intuitive for me.
[06:02:53] <EvanR> LSP is a haskell thing?
[06:03:04] <BrokenClutch> Language Server Protocol
[06:03:07] <EvanR> cool
[06:03:08] <BrokenClutch> I use on emacs
[06:03:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[06:03:29] <BrokenClutch> because I'm very h4ck3r :) :) :)
[06:04:01] <EvanR> I know what that says because I speak leet
[06:04:14] *** Joins: retro_ (~retro@05412d78.skybroadband.com)
[06:05:05] <BrokenClutch> EvanR: h4ck3r br0
[06:05:46] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[06:06:10] <BrokenClutch> going to play xcom (openxcom), merry christmas
[06:06:17] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[06:07:39] <EvanR> cheers
[06:07:46] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[06:07:46] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[06:17:17] *** Quits: falafel (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com) (Ping timeout: 240 seconds)
[06:18:42] <sm> Merry Christmas 🎄 Holidays 🌴 Friday, all
[06:19:11] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[06:21:24] *** Quits: xff0x (~xff0x@2001:1a81:5311:2b00:3f8f:ed06:c623:ab7c) (Ping timeout: 240 seconds)
[06:22:30] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[06:23:24] *** Joins: xff0x (~xff0x@2001:1a81:534f:cd00:7f66:dac0:537e:5302)
[06:26:53] *** Quits: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net) (Quit: ZNC - http://znc.in)
[06:30:07] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[06:32:36] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:32:36] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:32:36] *** finn_elija is now known as FinnElija
[06:35:31] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 268 seconds)
[06:36:13] *** Joins: vicfred (~vicfred@user/vicfred)
[06:37:45] <otherwise> > (head (tail (tail (tail (tail (tail (tail "!sknahT"))))))):(head (tail (tail (tail (tail (tail "!sknahT")))))):(head (tail (tail (tail (tail "!sknahT"))))):(head (tail (tail (tail "!sknahT")))):(head (tail (tail "!sknahT"))):(head (tail "!sknahT")):[(head "!sknahT")] 
[06:37:47] <lambdabot>  "Thanks!"
[06:41:04] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[06:44:45] <dsal> There's an easier way to write that.  :)
[06:45:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:157f:fad:702e:d7a) (Ping timeout: 240 seconds)
[06:45:57] *** Quits: td_ (~td@muedsl-82-207-238-144.citykom.de) (Ping timeout: 240 seconds)
[06:46:20] <dsal> First,
[06:46:22] <dsal> > let cdddddr = head . tail . tail . tail . tail . tail . tail  in cdddddr "!sknahT"
[06:46:24] <lambdabot>  'T'
[06:47:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[06:48:07] *** Joins: td_ (~td@muedsl-82-207-238-172.citykom.de)
[06:51:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Ping timeout: 240 seconds)
[06:55:40] *** Joins: mbuf (~Shakthi@122.162.66.42)
[06:56:00] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:56:32] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[06:56:33] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[07:00:37] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[07:00:38] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:00:38] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:00:38] *** finn_elija is now known as FinnElija
[07:03:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[07:05:05] <otherwise> Prelude> head . tail . tail . (tail "12345") : head . tail . (tail "12345"): head . {tail "12345"): (head "12345":[])
[07:05:18] <otherwise> thats as close as I could get...
[07:05:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[07:07:37] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[07:07:48] <otherwise> > restructure <Expr> reverse [3,2,1]
[07:07:50] <lambdabot>  error:
[07:07:50] <lambdabot>      Precedence parsing error
[07:07:50] <lambdabot>          cannot mix ‘<’ [infix 4] and ‘>’ [infix 4] in the same infix expression
[07:09:16] *** Parts: BrokenClutch (~pioneer@2804:d41:c2a7:d800:e627:b00b:2c62:134) ()
[07:11:18] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 268 seconds)
[07:20:57] <dsal> @src reverse
[07:20:58] <lambdabot> reverse = foldl (flip (:)) []
[07:24:17] *** Joins: Brandon_IX (~brandon@178-79-138-117.ip.linodeusercontent.com)
[07:30:40] *** Joins: vicfred (~vicfred@user/vicfred)
[07:33:49] <otherwise> I'm working through recursion chapter in "learn you a haskell..." and am trying to get used to evaluating the recursive process by hand to get a better intuitive understanding. reverse is what I was trying to explicitly evaluate. :)
[07:34:46] <otherwise> wait... what is @src? that is not the same as :t
[07:35:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:36:56] <otherwise> How can I do a comparable command to @src in ghci? It is not :doc  and it is not :def
[07:38:10] *** Quits: dsrt^ (~dsrt@207.5.54.6) (Remote host closed the connection)
[07:38:12] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[07:40:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[07:42:46] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[07:43:06] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 260 seconds)
[07:49:17] <int-e> otherwise: no, @src is specific to lambdabot, cf. https://github.com/lambdabot/lambdabot/blob/master/lambdabot/State/source for all the things it knows. (So since it's just a text file, you should take its definitions with a grain of salt. Some of them are what the report says, not what base implements; some are older versions of what base uses. Some may even be completely made up.)
[07:49:24] <int-e> :t Mu
[07:49:25] <lambdabot> error:
[07:49:25] <lambdabot>     • Data constructor not in scope: Mu
[07:49:25] <lambdabot>     • Perhaps you meant one of these:
[07:49:27] <int-e> @src Mu
[07:49:27] <lambdabot> newtype Mu f = In { out :: f (Mu f) }
[07:50:02] <int-e> This one, for example, is a type that lambdabot defined locally for some time. Nobody seems to miss it much :P
[07:51:00] <monochrom> If you don't mind a bit of strong opinion... No, evaluating recursion by hand is not insightful. Your computer has been doing it for its life, has it got smarter?  Induction proof is a better way to understand recursion and think up recursive code that works.  See my http://www.cs.utoronto.ca/~trebla/CSCC24-2021-Summer/01-haskell-basic.html#synev
[07:51:53] <int-e> otherwise: as for finding source code... :i in ghci tells you which module defines a function, and that maps to a file name; ghc-pkg can tell you which package that resides in; cabal unpack can unpack the source code for most of the packages
[07:51:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:51:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:51:59] *** Joins: wroathe (~wroathe@user/wroathe)
[07:52:07] *** Parts: nitrix (~nitrix@user/nitrix) (Leaving)
[07:55:41] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 268 seconds)
[07:59:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:59:37] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:01:52] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2cf4:5f96:7154:f400)
[08:04:01] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[08:04:03] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[08:05:02] *** Joins: vicfred (~vicfred@user/vicfred)
[08:08:37] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[08:10:54] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[08:11:54] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[08:11:58] <otherwise> momochrom: thanks for the link! :) 
[08:12:01] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[08:12:29] <otherwise> int-e I see how to run :i
[08:12:52] <otherwise> but I don't see how to run ghc-pkg
[08:13:23] <otherwise> I'm typing it into prelude> in many variations, but to no avail...
[08:13:36] <int-e> otherwise: it's a shell command
[08:14:13] <int-e> try `ghc-pkg find-module Data.Maybe`
[08:15:27] <otherwise> oh I see :)
[08:15:38] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:15:57] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[08:16:19] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[08:16:36] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[08:16:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[08:17:59] <otherwise> ls
[08:18:14] <otherwise> wrong browser
[08:21:44] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[08:22:45] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[08:31:44] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:32:20] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[08:33:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[08:35:12] *** Joins: img (~img@user/img)
[08:37:58] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[08:37:59] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[08:38:29] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[08:38:35] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[08:39:26] *** Joins: alfonsox (~quassel@103.92.42.192)
[08:44:39] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[08:49:50] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 260 seconds)
[08:51:09] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[09:08:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[09:09:19] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:13:49] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[09:20:26] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[09:21:21] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[09:22:40] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:23:48] *** Joins: img (~img@user/img)
[09:23:49] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[09:24:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[09:25:22] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:25:22] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:25:22] *** Joins: wroathe (~wroathe@user/wroathe)
[09:28:17] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[09:28:34] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Remote host closed the connection)
[09:30:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:48:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[09:51:56] *** Joins: kadir (~kadir@88.251.54.120)
[09:53:05] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 252 seconds)
[09:58:22] *** Joins: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net)
[10:05:11] <int-e> > unwords $ map (\x -> printf "%.2f" (191 - x/50)) [9386,9386,9232,9098,9000,8916,8870,8856,8819,8680] -- 7th is bogus (only 48 stars)
[10:05:12] <lambdabot>  "3.28 3.28 6.36 9.04 11.00 12.68 13.60 13.88 14.62 17.40"
[10:06:51] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[10:08:08] *** Joins: vicfred (~vicfred@user/vicfred)
[10:08:31] *** Joins: falafel (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com)
[10:10:37] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[10:13:21] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[10:18:39] *** Joins: fef (~thedawn@user/thedawn)
[10:22:35] *** Joins: ym (~ym@pool-96-253-29-94.prvdri.fios.verizon.net)
[10:22:51] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[10:27:12] *** Joins: jonathanx (~jonathan@217-210-129-139-no2450.tbcn.telia.com)
[10:28:18] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 260 seconds)
[10:28:58] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[10:30:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:33:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Ping timeout: 240 seconds)
[10:42:59] *** Joins: coolnickname (uid531864@user/coolnickname)
[10:48:34] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[10:48:46] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:49:09] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Read error: Connection reset by peer)
[10:50:03] <otherwise> trying to take a range of adjacent elements from a list, not sure how to select a specific range...
[10:51:31] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[10:51:46] <otherwise> I know tail, head, last, `elem` , take, (!!) but none of those will grab, say, the 4th through the 7th indexed elements from a list of length 20.
[10:53:06] <int-e> > take 4 . drop 3 $ [1..20]
[10:53:07] <lambdabot>  [4,5,6,7]
[10:54:35] <int-e> > map ([1..20] !!) [3..6] -- make complexity theorists weep
[10:54:37] <lambdabot>  [4,5,6,7]
[10:55:21] <otherwise> oooooh, I get that . replaces ( ), but what is $ doing?
[10:55:44] *** Quits: ym (~ym@pool-96-253-29-94.prvdri.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:55:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[10:55:50] <otherwise> > take 4 (drop 3 [1..20])
[10:55:51] <lambdabot>  [4,5,6,7]
[10:55:54] <int-e> it's function application (f $ x = f x) but with a low precedence
[10:56:22] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[10:56:36] <dsal> > (take 4 . drop) [1..20]
[10:56:38] <lambdabot>  error:
[10:56:38] <lambdabot>      • Couldn't match type ‘[a0] -> [a0]’ with ‘[a]’
[10:56:38] <lambdabot>        Expected type: Int -> [a]
[10:56:46] <dsal> > (take 4 . drop 3) [1..20]
[10:56:47] <lambdabot>  [4,5,6,7]
[10:56:59] <int-e> yeah I was typing that :)
[10:57:02] <dsal> saves you from writing ()s sometimes.  Don't mistake it for parens, though. :)
[11:00:12] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[11:00:44] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 252 seconds)
[11:01:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:03:14] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[11:04:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[11:05:33] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[11:05:34] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[11:06:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[11:06:56] *** Joins: img (~img@user/img)
[11:07:07] <otherwise> hmmm... !!! It is snowing!
[11:11:58] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[11:14:54] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[11:15:19] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[11:15:29] *** Quits: retro_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[11:15:31] *** Joins: rlj (~rlj@62.119.244.114)
[11:24:43] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[11:27:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2cf4:5f96:7154:f400) (Ping timeout: 240 seconds)
[11:32:19] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[11:32:43] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:37:22] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 260 seconds)
[11:37:31] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[11:39:17] *** Quits: img (~img@user/img) (Ping timeout: 240 seconds)
[11:47:10] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[11:57:28] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:05:50] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 260 seconds)
[12:13:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Remote host closed the connection)
[12:16:39] *** Quits: jonathanx (~jonathan@217-210-129-139-no2450.tbcn.telia.com) (Ping timeout: 256 seconds)
[12:17:01] *** Joins: max22- (~maxime@2a01cb0883359800368bc5f3b1060b26.ipv6.abo.wanadoo.fr)
[12:19:32] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[12:27:05] *** Joins: acidjnk (~acidjnk@p200300d0c7271e974de60a217c79c2cb.dip0.t-ipconnect.de)
[12:30:08] *** Quits: thedward[m] (~thedwardm@2001:470:69fc:105::f79) (Quit: You have been kicked for being idle)
[12:37:45] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Remote host closed the connection)
[12:45:22] *** Joins: dsrt^ (~dsrt@207.5.54.6)
[12:47:42] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:45] *** allbery_b is now known as geekosaur
[12:51:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:05:06] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[13:05:20] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-236.elisa-laajakaista.fi)
[13:05:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[13:08:01] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[13:08:02] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[13:08:33] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[13:08:43] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[13:08:55] *** Parts: jakalx (~jakalx@base.jakalx.net) (Disconnected: Replaced by new connection)
[13:08:56] *** Joins: jakalx (~jakalx@base.jakalx.net)
[13:23:14] *** Joins: vysn (~vysn@user/vysn)
[13:31:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[13:36:04] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:38:08] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[13:40:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:41:31] *** Quits: rlj (~rlj@62.119.244.114) (Ping timeout: 256 seconds)
[13:42:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Ping timeout: 240 seconds)
[13:45:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[13:46:34] *** Joins: jonathanx (~jonathan@217-210-129-139-no2450.tbcn.telia.com)
[13:48:58] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[13:53:33] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:53:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:54:58] *** Lord_of_Life_ is now known as Lord_of_Life
[13:56:34] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:02:42] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[14:02:43] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[14:03:13] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[14:03:23] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[14:06:01] *** Quits: sim590 (~simon@modemcable157.243-56-74.mc.videotron.ca) (Ping timeout: 256 seconds)
[14:12:15] *** Quits: foul_owl (~kerry@94.140.8.107) (Ping timeout: 256 seconds)
[14:13:23] *** Quits: kaph_ (~kaph@net-2-45-51-147.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[14:14:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:17:21] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:27:28] *** Joins: foul_owl (~kerry@212.102.47.57)
[14:30:52] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[14:45:57] *** Quits: jonathanx (~jonathan@217-210-129-139-no2450.tbcn.telia.com) (Ping timeout: 240 seconds)
[14:46:20] *** Joins: jonathanx (~jonathan@217-210-129-139-no2450.tbcn.telia.com)
[14:48:32] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[14:48:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:50:20] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[14:50:56] *** Joins: rito_ (~rito_gh@45.112.243.69)
[15:02:42] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[15:02:43] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[15:03:12] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[15:03:20] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[15:04:46] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[15:08:39] *** Quits: otherwise (~otherwise@2601:602:880:90f0:2164:480c:998d:fc7c) (Remote host closed the connection)
[15:17:50] *** Quits: jonathanx (~jonathan@217-210-129-139-no2450.tbcn.telia.com) (Ping timeout: 268 seconds)
[15:22:38] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[15:31:17] *** Joins: zer0bitz (~zer0bitz@196.244.192.54)
[15:37:57] *** Quits: falafel (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com) (Ping timeout: 240 seconds)
[15:38:43] *** Joins: machinedgod (~machinedg@24.105.81.50)
[15:40:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[15:41:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[15:41:47] *** Quits: acidjnk (~acidjnk@p200300d0c7271e974de60a217c79c2cb.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[15:44:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Ping timeout: 240 seconds)
[15:47:20] *** Joins: otherwise (~otherwise@2601:602:880:90f0:99a0:b26e:2b10:8f04)
[15:47:44] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[15:49:20] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:51:37] *** Quits: otherwise (~otherwise@2601:602:880:90f0:99a0:b26e:2b10:8f04) (Ping timeout: 240 seconds)
[15:55:10] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:55:46] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[15:55:51] *** Joins: Hanicef (~hanicef@78-71-43-30-no260.tbcn.telia.com)
[15:57:02] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 240 seconds)
[15:58:17] *** Joins: __monty__ (~toonn@user/toonn)
[15:59:46] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[16:00:36] *** Quits: Alex_test_ (~al_test@178.34.160.99) (Quit: ;-)
[16:00:49] *** Joins: Alex_test (~al_test@178.34.160.99)
[16:01:01] *** Quits: AlexZenon_2 (~alzenon@178.34.160.99) (Quit: ;-)
[16:01:16] *** Joins: AlexZenon (~alzenon@178.34.160.99)
[16:05:53] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[16:17:22] *** Joins: Jing (~hedgehog@2604:a840:3::1061)
[16:21:22] *** Joins: neceve (~quassel@2.26.93.228)
[16:24:02] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[16:24:26] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[16:28:18] *** Joins: otherwise (~otherwise@2601:602:880:90f0:e950:bc2c:6464:aa5b)
[16:32:17] *** Quits: otherwise (~otherwise@2601:602:880:90f0:e950:bc2c:6464:aa5b) (Ping timeout: 240 seconds)
[16:45:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:51:25] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[16:53:00] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[16:58:04] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:58:50] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[16:59:19] *** Joins: jonathanx (~jonathan@217-210-129-139-no2450.tbcn.telia.com)
[17:00:42] *** Joins: syrkis (~syrkis@82.192.167.70)
[17:04:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:04:40] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[17:08:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[17:12:49] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[17:16:59] *** Quits: Hanicef (~hanicef@78-71-43-30-no260.tbcn.telia.com) (Quit: leaving)
[17:18:54] *** Joins: neurocyte0132889 (~neurocyte@94.16.90.231)
[17:18:54] *** Quits: neurocyte0132889 (~neurocyte@94.16.90.231) (Changing host)
[17:18:54] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:19:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[17:19:43] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[17:22:37] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[17:22:48] <alfonsox> snowing is lot better than implementing bubble sort in haskell. :)
[17:29:11] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Excess Flood)
[17:35:34] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[17:35:35] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:35:36] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[17:35:52] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:45:13] *** Quits: rito_ (~rito_gh@45.112.243.69) (Quit: Leaving)
[17:49:19] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:49:55] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[17:53:32] *** Joins: notzmv (~zmv@user/notzmv)
[17:54:37] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[17:55:55] *** Quits: max22- (~maxime@2a01cb0883359800368bc5f3b1060b26.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[17:56:58] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:59:04] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[18:07:08] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:5d5c:8c41:79c4:9b80)
[18:07:48] *** Joins: max22- (~maxime@2a01cb0883359800ac192c9334b98292.ipv6.abo.wanadoo.fr)
[18:08:19] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[18:23:36] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[18:23:36] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[18:23:36] *** finn_elija is now known as FinnElija
[18:32:19] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:34:34] *** Quits: jonathanx (~jonathan@217-210-129-139-no2450.tbcn.telia.com) (Ping timeout: 260 seconds)
[18:36:48] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[18:37:29] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[18:38:52] *** Quits: syrkis (~syrkis@82.192.167.70) (Quit: Client closed)
[18:39:11] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[18:40:34] <ProfSimm> Is it possible to have something be both a function and a number, until it's used in some context
[18:41:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:41:40] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:41:40] *** Joins: wroathe (~wroathe@user/wroathe)
[18:42:27] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[18:46:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Ping timeout: 240 seconds)
[18:52:40] <pavonia> `Num a => a` can also be a function
[18:52:44] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[18:53:05] <pavonia> ProfSimm: Could you explain a bit more what you are trying to do?
[19:00:36] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[19:02:20] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[19:04:10] *** Quits: timCF (~timCF@m91-129-100-224.cust.tele2.ee) (Ping timeout: 268 seconds)
[19:05:16] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:05:33] *** Quits: rembo10 (~rembo10@2a01:4f9:c010:b5b9::1) (Quit: ZNC 1.8.2 - https://znc.in)
[19:06:43] *** Joins: rembo10 (~rembo10@remulis.com)
[19:11:27] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[19:16:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:19:51] *** Joins: ym (~ym@pool-96-253-29-94.prvdri.fios.verizon.net)
[19:24:52] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[19:30:37] *** Quits: xff0x (~xff0x@2001:1a81:534f:cd00:7f66:dac0:537e:5302) (Ping timeout: 240 seconds)
[19:31:37] *** Joins: xff0x (~xff0x@port-92-195-117-208.dynamic.as20676.net)
[19:31:55] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:33:45] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[19:34:04] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:38:31] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[19:41:41] *** Joins: jonathanx (~jonathan@c-5eea3423-74736162.cust.telenor.se)
[19:45:19] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:50:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[20:01:53] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[20:02:54] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:03:22] *** Joins: amk (~amk@109.255.169.126)
[20:06:49] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:07:08] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:09:18] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[20:10:02] *** Quits: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Ping timeout: 240 seconds)
[20:10:26] *** Joins: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[20:11:23] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[20:13:52] *** Joins: acode (~acode@151.65.31.181)
[20:16:32] *** Quits: alfonsox (~quassel@103.92.42.192) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:16:59] *** Joins: BrokenClutch (~pioneer@2804:d41:c2a7:d800:e627:b00b:2c62:134)
[20:27:14] *** Joins: coolnickname (uid531864@user/coolnickname)
[20:27:59] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[20:29:31] *** Quits: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Ping timeout: 245 seconds)
[20:31:27] *** Joins: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[20:33:16] *** Quits: mbuf (~Shakthi@122.162.66.42) (Quit: Leaving)
[20:35:21] *** Joins: jonathanx_ (~jonathan@94.234.52.93)
[20:37:52] *** Joins: jonathanx__ (~jonathan@94.234.54.197)
[20:38:17] *** Quits: jonathanx (~jonathan@c-5eea3423-74736162.cust.telenor.se) (Ping timeout: 240 seconds)
[20:39:25] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[20:39:29] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[20:39:57] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:40:02] *** Quits: jonathanx_ (~jonathan@94.234.52.93) (Ping timeout: 240 seconds)
[20:44:04] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[20:48:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Ping timeout: 240 seconds)
[20:50:01] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[20:51:06] *** Joins: zaquest (~notzaques@5.130.79.72)
[20:51:27] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[20:52:11] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[20:54:37] *** Joins: jonathanx (~jonathan@c-5eea36c5-74736162.cust.telenor.se)
[20:55:17] *** Quits: jonathanx__ (~jonathan@94.234.54.197) (Ping timeout: 240 seconds)
[20:56:54] *** Quits: d34df00d (~d34df00d@2600:1700:8c60:3a10::48) (Remote host closed the connection)
[20:59:41] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:02:12] *** Joins: econo (uid147250@user/econo)
[21:04:19] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[21:05:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:07:28] *** Joins: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca)
[21:08:07] *** Quits: xff0x (~xff0x@port-92-195-117-208.dynamic.as20676.net) (Ping timeout: 268 seconds)
[21:09:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[21:14:10] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[21:14:53] *** Joins: otherwise (~otherwise@2601:602:880:90f0:1e0:4b16:58ed:4062)
[21:15:57] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:18:57] *** Quits: otherwise (~otherwise@2601:602:880:90f0:1e0:4b16:58ed:4062) (Ping timeout: 240 seconds)
[21:19:51] *** Joins: falafel (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com)
[21:21:47] *** Quits: jonathanx (~jonathan@c-5eea36c5-74736162.cust.telenor.se) (Ping timeout: 256 seconds)
[21:27:52] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[21:29:41] *** Joins: y04nn (~y04nn@92.223.89.196)
[21:30:44] *** Joins: otherwise (~otherwise@2601:602:880:90f0:7d7a:d907:94bf:c6c8)
[21:34:00] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[21:37:05] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 256 seconds)
[21:39:34] *** Joins: xff0x (~xff0x@2001:1a81:534f:cd00:913d:8a40:152a:49ac)
[21:41:41] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:45:04] *** Quits: acode (~acode@151.65.31.181) (Quit: Client closed)
[21:46:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:49:53] <BrokenClutch> after days of not sleeping well, i think i got reactive-banana
[21:50:09] <dsal> Hopefully it's treatable.
[21:50:19] <BrokenClutch> \o/. I think it's too much for what i want to do. It's not
[21:50:50] <BrokenClutch> I got the idea of reactive-banana. Sorry, don't know how to form phrases
[22:03:37] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 268 seconds)
[22:05:16] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:05:18] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[22:05:46] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[22:05:57] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[22:06:14] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:06:14] *** Quits: ridcully (~ridcully@pd951fb88.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:06:26] *** Joins: ridcully (~ridcully@pd951fb88.dip0.t-ipconnect.de)
[22:06:32] <BrokenClutch> is it wrong to store callbacks inside a state monad?
[22:08:01] <Noinia> Question: I'm building some web application with haskell frontend and backend. When in "development mode" I essentially want the server to send some piece of JS that tells the client to use JSAddle rather than the "real" js implementation. Does anyone know how to achieve that? I'm sure I'm not the first one who would want s.t. like this.
[22:12:22] <BrokenClutch> Noinia: Let me see if I understood, You want to listen to the server and wait a signal?
[22:15:16] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:15:17] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[22:15:44] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[22:15:45] <Noinia> I want something like this: in my browser I go to myServerAddress.com, which would normally serve some piece of js code containing the full client. Rather than the "full client" I want to locally run a jsaddle process (of the client), so that whatever js interactions I do with my page are actually handled by that local jsaddle process.
[22:15:51] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[22:16:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:16:33] <Noinia> so presumably instead of the "full js" the server would need to send some piece of js that says something along the lines of "start communicating with this local process" 
[22:18:08] <BrokenClutch> Oh. Now I understood. But I don't know how to do it. :(
[22:18:18] <Noinia> I tried copying the jsaddle.js that jsaddle normally serves, but even if I approprately adapt the port it opens some websocket to it seems that does not yet work (because of security reasons it seems). 
[22:18:39] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:21:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[22:21:25] *** Quits: y04nn (~y04nn@92.223.89.196) (Remote host closed the connection)
[22:22:18] *** Quits: shapr (~user@pool-108-28-144-11.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[22:23:37] *** Quits: falafel (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com) (Ping timeout: 240 seconds)
[22:33:57] *** Quits: otherwise (~otherwise@2601:602:880:90f0:7d7a:d907:94bf:c6c8) (Ping timeout: 240 seconds)
[22:41:01] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:41:32] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:42:34] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:44:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[22:45:49] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[22:46:02] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 240 seconds)
[22:50:23] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363) (Ping timeout: 250 seconds)
[22:51:33] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:53:37] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[22:56:07] *** Joins: Pickchea (~private@user/pickchea)
[22:56:36] *** Joins: vicfred (~vicfred@user/vicfred)
[22:58:41] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:59:41] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[23:00:01] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:00:23] *** Quits: benin (~benin@183.82.27.57) (Ping timeout: 256 seconds)
[23:00:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:01:15] *** justSleigh is now known as justIrresolute
[23:02:40] *** Parts: BrokenClutch (~pioneer@2804:d41:c2a7:d800:e627:b00b:2c62:134) ()
[23:02:53] *** Joins: benin (~benin@183.82.27.57)
[23:04:13] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[23:10:21] *** Joins: shapr (~user@pool-108-28-144-11.washdc.fios.verizon.net)
[23:20:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8415:925f:506a:a363)
[23:27:17] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:27:59] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:34:57] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:37:33] *** Joins: juhp (~juhp@128.106.188.82)
[23:47:28] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[23:52:40] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[23:53:33] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[23:53:33] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[23:53:33] *** finn_elija is now known as FinnElija
[23:54:36] *** Quits: shapr (~user@pool-108-28-144-11.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[23:57:26] *** Joins: Everything (~Everythin@37.115.210.35)
[23:57:43] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[23:58:13] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
