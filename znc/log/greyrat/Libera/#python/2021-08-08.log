[00:00:00] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 276 seconds)
[00:01:47] <voldial> What's the right way to lookup the path of os.environ['EDITOR'] in the case where it does not throw KeyError it's not an absolute path? py equiv of `whereis`?
[00:02:31] <dimbag> voldial, try to use path lib
[00:03:18] <voldial> dimbag: I use pathlib everywhere.... didnt know it had knowledge of $PATH?
[00:03:28] <energizer> voldial: shutil.which
[00:03:37] <voldial> energizer: ty!
[00:05:15] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:05:48] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[00:06:34] <dimbag> voldial, i am sorry, i just re-read you question, i thought you want to check that path from env
[00:07:39] <voldial> dimbag: np thx though!
[00:08:04] *** Quits: asa22 (~asa22@84.125.126.129.dyn.user.ono.com) (Ping timeout: 246 seconds)
[00:08:30] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:08:31] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[00:11:39] <altendky> thoughts on avoiding an ignored `BrokenPipeError` exception message?  https://bpa.st/ORSA  `contextlib.suppress` doesn't seem to work.  some reading suggests it is happening at `.__del__` time or something.  looks like i can `sys.stderr.close()` but that seems kinda coarse.
[00:11:46] *** Joins: Betal (~Betal@user/betal)
[00:13:03] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[00:13:55] *** Quits: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy) (Quit: Leaving)
[00:14:30] *** Joins: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy)
[00:17:41] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 258 seconds)
[00:18:24] *** Joins: reset (~reset@user/reset)
[00:22:06] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[00:23:55] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[00:24:26] <energizer> altendky: perhaps https://github.com/pallets/click/pull/1106/files
[00:24:57] *** Joins: asa22 (~asa22@84.125.126.129.dyn.user.ono.com)
[00:25:26] *** Quits: mattil (~mattilinn@87-92-57-75.bb.dnainternet.fi) (Quit: Leaving)
[00:25:43] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 258 seconds)
[00:28:32] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[00:30:26] <altendky> energizer: yuck.  but now i need to figure out why our use of click isn't already handling it.
[00:31:11] *** Quits: netsan (~netsan@user/netsan) (Ping timeout: 244 seconds)
[00:31:13] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:31:22] <nesoi> if I want to have a set of sets, I am seeing that the inner sets need to be frozensets, which is fine, but not finding the right syntax for it. I want to have sets like set('setname') where 'setname' selects one of the sets
[00:32:20] *** Joins: netsan (~netsan@user/netsan)
[00:34:26] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[00:34:54] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[00:34:58] *** Quits: netsan (~netsan@user/netsan) (Remote host closed the connection)
[00:35:06] *** Quits: iiz (~iiz@c-67-172-73-103.hsd1.fl.comcast.net) (Ping timeout: 272 seconds)
[00:37:37] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973) (Quit: Leaving)
[00:37:43] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[00:38:08] <altendky> nesoi: choosing something based on a string key sounds more like a dict than a set
[00:39:00] *** Joins: Hackerpcs (~user@user/hackerpcs)
[00:41:10] <nesoi> altendky:  looking for more memory efficiency, etc.
[00:41:40] <nesoi> I think that nested sets can work, no?
[00:42:02] *** Joins: iiz (~iiz@c-67-172-73-103.hsd1.fl.comcast.net)
[00:42:30] <nedbat> nesoi: how would "setname" work with nested sets?
[00:42:41] <nesoi> dunno, does it?
[00:42:59] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[00:43:07] <nedbat> nesoi: you said "selects one of the sets".  That sounds like a dict with sets as values.
[00:43:10] <altendky> nesoi: if you need to map a string to a set, a set doesn't do that.  a dict does.  but perhaps we do not yet understand what you need.
[00:43:34] <nesoi> can you have sets as values in a dict?
[00:43:41] <nedbat> nesoi: yes
[00:43:55] <nedbat> nesoi: any python object can be a value in a dict
[00:43:55] <nesoi> ah ok, is that more efficient? or if I make them frozen?
[00:44:49] <nedbat> nesoi: frozensets aren't more efficient.
[00:45:22] <nesoi> ok I haven't found syntax for dicts of sets
[00:45:32] <nesoi> how do you say that? :)
[00:45:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[00:46:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:47:40] <Repiphany> d['setname'] = your_set
[00:48:10] <altendky> nesoi: you just put the set as the value in the dict.  any of the ways that you create or modify a dict.  `{'a name': {'some', 'set'}}` for example.  or ^
[00:49:09] <nesoi> how do you declare it though?
[00:49:20] *** Joins: roro (~roro@user/roro)
[00:49:22] <altendky> nesoi: declare what?  are you asking about type hints?
[00:49:25] <nesoi> I'm building them one by one
[00:49:35] <nesoi> so first make the set then assign it to the dict?
[00:49:38] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[00:49:42] <altendky> nesoi: that is one optoin
[00:50:05] <nesoi> what's another?
[00:50:06] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: Textual IRC Client: www.textualapp.com)
[00:50:08] <altendky> nesoi: dicts do not care what their values are.  there's nothing specific to a set about making it a dict value
[00:50:23] <altendky> nesoi: the thing i wrote above also creates a dict with a set as a value
[00:50:25] <Repiphany> d['setname'] = set(); d['setname'].add([1,2,3,4,5])
[00:50:32] <nesoi> so I have 12 files each 12MB but the program is 1.5GB
[00:50:41] <nesoi> which makes me feel like some storage is inefficient
[00:50:42] *** Quits: y1n (~y1n@84-115-65-129.wifi.dynamic.surfer.at) (Ping timeout: 276 seconds)
[00:51:02] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[00:51:14] <altendky> nesoi: we have no idea what you are doing.
[00:51:30] <Repiphany> Oof, TypeError
[00:51:42] <nesoi> reading files that contain 1 string of no more than 12 char per line into a dict (or set?)
[00:51:51] <Repiphany> s/add/update/
[00:51:54] <nesoi> total size of all files is like 150MB
[00:51:58] <altendky> nesoi: you may want to start at the beginning
[00:52:01] <nesoi> the python program goes up to 1.5GB
[00:52:05] <nesoi> in usage
[00:52:25] *** Joins: Celeo (~Celeo@user/celeo)
[00:52:28] <altendky> energizer: i think maybe that only handles it if there is already an error prior to exit.  otherwise it doesn't even install it.
[00:52:34] <altendky> but it works if i manually use that myself.
[00:53:35] <nedbat> nesoi: python has overhead
[00:54:00] <nedbat> nesoi: only optimize if you are running out of memory, or the program is too slow.
[00:54:01] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:54:24] <nesoi> this has to stay resident in a server and I don't want to allocate an extra 1.5 GB per process
[00:55:23] <Repiphany> Maybe you should post some of your actual code to see what you're doing and if it can be improved
[00:55:46] <nesoi> ok thanks. I have to come back for that :)
[00:56:06] <jochum> nedbat: 10 times overhead?
[00:56:26] <nedbat> jochum: there are lots of factors. that might be too much.
[00:56:31] <nesoi> hashes should be very efficient I'd think
[00:56:40] <nedbat> nesoi: let's not guess.  Can you link us to the code?
[00:57:16] <nesoi> yes, but I have to leave for a few hours unfortunately. Thanks for being willing to help I'll be back!
[00:57:17] <nedbat> nesoi: sets and dicts are over-allocated for speed.  Strings have overhead.
[00:57:36] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[00:57:39] <nedbat> jochum: sys.getsizeof("a") --> 50
[00:57:42] <nesoi> strings shouldn't have overhead in hashed data structures
[00:57:49] <nesoi> because they're not really there?
[00:57:56] <nedbat> nesoi: strings have overhead, hashed data structures are irrelevant
[00:58:05] <nesoi> you don't have to store the string
[00:58:09] <nedbat> nesoi: yes you do.
[00:58:20] <nesoi> you could just hash it and search for the hash value no?
[00:58:25] <nedbat> nesoi: these are not collision-proof hashes
[00:58:39] <nesoi> ah
[00:58:46] <nesoi> use SHA256 :)
[00:58:47] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Quit: WeeChat 2.8)
[00:58:50] <nesoi> (that will be slow)
[00:58:54] <nedbat> nesoi: that will be larger than your string.
[00:58:59] <nesoi> I was kidding
[00:59:05] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 244 seconds)
[00:59:10] <nesoi> ok thanks again bbl
[00:59:55] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[00:59:59] <jochum> nesoi: try binary
[01:00:18] *** Quits: entuland (~entuland@user/entuland) (Read error: Connection reset by peer)
[01:00:21] <nedbat> jochum: what does that mean?
[01:00:40] <jochum> nesoi: store binary representations of the file
[01:00:43] <jochum> string
[01:00:47] *** Joins: Preston (~liminalcr@c-24-125-222-206.hsd1.ga.comcast.net)
[01:00:51] <Preston> o/
[01:01:03] <jochum> nedbat: i meant
[01:01:45] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 276 seconds)
[01:01:50] <Preston> sorry to bother everyone, in a Django project there's an option for STATIC_ROOT that's used in deployment
[01:01:56] *** Joins: entuland (~entuland@user/entuland)
[01:02:11] <Preston> if I'm not deploying anytime soon, should I still use that at all?
[01:02:24] <jochum> Preston: STATIC_ROOT is no good for deployments
[01:02:24] <Preston> does it matter?
[01:02:31] <Preston> really?
[01:02:38] <jochum> Preston: use nginx for example for static file serving
[01:02:43] *** Quits: rany_ (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[01:02:53] *** Joins: y1n (~y1n@84-115-65-129.wifi.dynamic.surfer.at)
[01:03:03] *** Quits: Bardon (~Bardon@user/Bardon) (Quit: ZNC - https://znc.in)
[01:03:05] <jochum> Preston: after all for me it doesn't work when i switch to production because its disabled.
[01:03:17] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[01:03:48] <Preston> I thought all static_root did was collect all the static files and just shove them into a directory
[01:03:49] <jochum> Preston: maybe I'm mixing up, do you mean the var or do you mean static serving in urls.py?
[01:04:03] <Preston> oh no, no this is a settings.py thing
[01:04:15] *** Joins: Bardon (~Bardon@user/Bardon)
[01:04:20] <jochum> Preston: yes, but you want to serve files through django?
[01:04:25] <Preston> https://docs.djangoproject.com/en/3.2/howto/static-files/
[01:04:54] <jochum> Preston: yes
[01:05:01] *** Joins: rany (~rany@user/rany)
[01:05:16] <jochum> Preston: I'm talking about that: https://docs.djangoproject.com/en/3.2/howto/static-files/
[01:05:25] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[01:05:27] <jochum> arg, no perma lin khttps://docs.djangoproject.com/en/3.2/howto/static-files/#serving-static-files-during-development
[01:05:31] <jochum> https://docs.djangoproject.com/en/3.2/howto/static-files/#serving-static-files-during-development
[01:05:59] <Preston> Oh I see what you're asking
[01:06:05] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[01:06:05] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[01:06:08] <Preston> I was like "what does the router have to do with replacing Nginx"
[01:06:26] <jochum> Maybe was mixing up :)
[01:06:27] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[01:06:43] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[01:06:44] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 258 seconds)
[01:06:51] <Preston> Yeah, nah I'm not going to do that
[01:07:08] <jochum> ok, my fault.
[01:08:22] <az> hi, if I've function called show_value and I create a variable called show_value.price, what is that called? I was using "global" and "return" but I've just learned that I can assign a function a "sub" variable that could be used in other functions, where I can read more about this?
[01:08:33] <Preston> I'm just trying to figure out if I should go ahead and set up the STATIC_ROOT directory and run collectstatic or if I should wait for deployment
[01:08:41] <Preston> or if that might hurt me in the long run.
[01:08:43] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[01:09:58] <jochum> Preston: does django render your things without collectstatic?
[01:10:21] <jochum> I mean do you have the correct output in django-admin for example?
[01:11:17] <Preston> Technically it wouldn't because the static files it's collecting are VueJS -- but I'm using STATICFILE_DIRS for those
[01:12:09] *** Joins: hafat (~hafat@95.70.167.173)
[01:12:40] <jochum> Preston: may ask again in #django (can do that if you'd like)
[01:13:43] <Preston> oh I didn't realize that existed
[01:13:44] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 272 seconds)
[01:13:45] <Preston> thanks
[01:14:09] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[01:14:35] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[01:15:33] *** Joins: jkl (~jkl@user/jkl)
[01:16:39] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[01:16:58] <jinsun> az: it is called setting attribute https://docs.python.org/3/reference/datamodel.html#object.__setattr__
[01:17:01] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[01:17:06] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 258 seconds)
[01:17:55] <jinsun> az: but setting attributes on functions like that is unusual, usually you would make a class
[01:18:07] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[01:19:39] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[01:20:42] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:20:55] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 258 seconds)
[01:20:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[01:21:19] *** Joins: jkl1337 (~jkl@user/jkl)
[01:21:59] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[01:22:36] <coc0nut> Hey! I did a "snap install pycharm-community --classic" on debian sid.. when running a file.py theres no interpreter to choose.. and seeing tutorials it should be good to go
[01:23:26] *** Quits: jkl (~jkl@user/jkl) (Ping timeout: 256 seconds)
[01:23:42] <az> jinsun, I was feeling that there is something wrong with it. when I want to call them I've to run the function again and again to be able to read it's attribute so I'm thinking of storing things in a dictionary instead
[01:24:13] <bjs> az: you can store attributes on (almost) any object, and functions are just objects.  It's not a good idea to store attributes on functions unless you know what you're doing.
[01:24:26] <bjs> az: maybe what you really want is a class?  if you want the attribute to persist between calls.
[01:24:26] <az> I'm trying to avoid classes for now as I'm still learning and it's a bit complicated to me
[01:25:43] *** Joins: CoolerX (~CoolerX@user/coolerx)
[01:25:45] <bjs> az: maybe you should just use globals then
[01:26:48] *** Quits: MaximB (~MaximB@87.68.164.32) (Quit: Client closed)
[01:27:05] <az> I was using them but I've started looking for laternative as they were discourged by some people
[01:27:25] *** Joins: nemosaltat (~nemosalta@2607:fb90:4ba9:5df7:317a:e057:95dc:7407)
[01:27:32] <bjs> az: the alternative is classes
[01:27:52] *** Joins: ice9 (~ice9@user/ice9)
[01:27:54] *** Joins: Teekin (~Teekin@45.133.192.68)
[01:28:14] <az> any issue with using Global mutables (dict, list, and set) like suggested here https://betterprogramming.pub/alternatives-to-using-globals-in-python-a3b2a7d5411b
[01:28:39] <bjs> az: putting attributes on a function is just globals by a different name.  When people discourage "globals" they don't mean specifically a specific syntax or kind of variable they almost always have a deeper more general point about "global state".
[01:29:03] <bjs> and an attribute on a function is just global state, the same as a global variable. So if you care about those objections they would apply there too
[01:29:22] <az> interesting
[01:29:40] <az> sounds rational, thanks for the advice
[01:30:11] <bjs> az: that article doesn't seem very good, it doesn't even mention the fact you can pass arguments to functions;  which is the main way you remove globals.
[01:30:32] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[01:30:49] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[01:31:28] <az> hmm, seems I should learn classes sooner :)
[01:31:30] <buhman> classes (structures with function attributes) are overhyped, and are mostly only useful if you need compatibility with an existing api that expects them--behavior that is only implementable by creating a double underscore method for example.
[01:31:58] <buhman> structures with non-function attributes though are great (dataclass, namedtuple, etc..)
[01:32:06] *** Joins: bam32_ (~bambams@user/bambams)
[01:32:14] <bjs> well namedtuples aren't great,  and dataclasses can have methods too
[01:32:31] <buhman> yeah, an unfortunate language wart
[01:32:37] <bjs> Not really
[01:32:47] <bjs> this is Python
[01:33:13] <buhman> right, my mistake, so all choices were made by the Lord God himself and are beyond critque.
[01:33:30] <bjs> buhman: no, it's just that different languages work differently
[01:33:40] <buhman> you're saying the same thing
[01:33:54] <bjs> huh?
[01:34:08] <Teekin> I was trying to agree with either one of you but now I'm just confused.
[01:34:14] *** Quits: kittonian (~kittonian@cpe-70-114-148-180.austin.res.rr.com) (Quit: Leaving)
[01:34:14] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:a614:74b3:aa4d:6481:89d9) (Read error: Connection reset by peer)
[01:34:35] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[01:34:49] *** Joins: p-i- (~Ohmu@2403:6200:8870:a614:967:4ae4:2135:9a07)
[01:36:26] <az> before I stop using function's arguments, is there a performance issue with having to call a function first to be able to get its' arguments? I replaced "returns" with arguments but now I'm stuck with having to call all functions all the way up to the first one
[01:36:32] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[01:36:51] *** Quits: y1n (~y1n@84-115-65-129.wifi.dynamic.surfer.at) (Ping timeout: 276 seconds)
[01:37:06] <bjs> I'm just saying in Python everything is an object, and methods are the typical way to interact with objects. Either directly (.append(), .get(), .union(), .encode(), etc) or indirectly (through operators * - + or built-ins len(), etc);  they're certainly not a universal language wart
[01:37:13] <bjs> at least that position has not been justified at all
[01:37:22] <Repiphany> It's not clear what you're doing if you need to "call a function to get its arguments"
[01:37:31] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[01:38:03] <Repiphany> Arguments are parameters you pass to a function, not what gets returned
[01:38:04] <bjs> az: i think your description is a little imprecise.  I'm not really sure what you mean because the way you run a functions code is to call it,  so why would having arguments add a performance issue?
[01:38:10] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[01:38:15] <Repiphany> Unless you mean using the returned values as arguments for the next functions
[01:38:56] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 258 seconds)
[01:38:58] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[01:39:25] *** Quits: roro (~roro@user/roro) (Read error: Connection reset by peer)
[01:39:43] <az> let us say I've the function def function1(): function1.a = 1, def function2(): b = function1.a + 4
[01:40:12] <az> something like this but there are function3 and function4 that they all depends on the top ones
[01:40:17] <grym> why are you putting attributes on functions
[01:40:26] <Repiphany> Those aren't arguments
[01:40:28] <grym> (or writing like you intend to)
[01:40:28] <Teekin> @az: That seems like an extremely un-Pythonic way to do things. It's not clear why you wouldn't just have return statements.
[01:40:45] <grawity> seems like a JS convention?
[01:40:53] <az> returning didn't have an order
[01:41:05] <az> it seemed more precise
[01:41:11] <grym> ( •᷄ὤ•᷅)？
[01:41:25] <az> didn't learn JS yet XD
[01:41:29] <Teekin> Order? What kind of order?
[01:41:41] <az> like when you return value1, value2
[01:41:48] <grym> az: that's ordered
[01:41:55] <Teekin> Those are ordered. So, example:
[01:41:56] <Repiphany> az: https://bpa.st/5HJQ
[01:41:57] *** Quits: devcpu (~rusty@ec2-35-183-244-153.ca-central-1.compute.amazonaws.com) (Quit: leaving)
[01:41:58] <grym> (it's a tuple)
[01:42:30] <Teekin> def doodoo():   one = 1; two = 2; return one, two
[01:42:40] <Teekin> letsseeone, letsseetwo = doodoo()
[01:42:47] <Repiphany> Calling function_3() once after all of the functions are defined calls function_2 and then function_1 without you having to call all of them separately
[01:42:48] <Teekin> letsseeone will be 1, and letsseetwo will be 2.
[01:43:05] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[01:43:12] <Teekin> Or am I misunderstanding
[01:43:13] <Teekin> ?
[01:43:20] *** bam32_ is now known as bam32
[01:43:24] <az> Repiphany, waw that did work
[01:43:54] *** Joins: jdmark2 (~jdmark@172.58.172.26)
[01:43:56] <bjs> az: I really suggest just *not* using function attributes at all. Just pass arguments and return values.
[01:44:04] <bjs> (and/or use globals)
[01:44:31] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[01:44:36] *** Joins: devcpu (~rusty@ec2-35-183-244-153.ca-central-1.compute.amazonaws.com)
[01:44:47] <az> Teekin, I've to remember the order later when assigning values. this is the issue with that
[01:44:49] *** Joins: rany (~rany@user/rany)
[01:45:03] <Teekin> Why is that a problem?
[01:45:11] <az> code growing?
[01:45:25] <bjs> az: and you've discovered why classes exist
[01:45:25] *** Quits: nemosaltat (~nemosalta@2607:fb90:4ba9:5df7:317a:e057:95dc:7407) (Remote host closed the connection)
[01:45:26] <Teekin> You could also have it return a dict or a list, if it's something that will keep growing a lot.
[01:45:35] *** Joins: nemosaltat (~nemosalta@2607:fb90:4ba9:5df7:317a:e057:95dc:7407)
[01:45:38] <Teekin> Or yes indeed, an object (class).
[01:45:44] <bjs> az: so you can return an object with attributes (names!) for the different parts
[01:46:21] <az> bjs, I guess classes is the way. maybe I'll keep using global for time till I grab the classes thing
[01:46:23] <Teekin> Oh yeah, I see. You're essentially using functions like classes! - Right, I think you just need to check out classes, bud. :)  They probably do what you're trying to do.
[01:46:47] *** Quits: jdmark2 (~jdmark@172.58.172.26) (Read error: Connection reset by peer)
[01:46:59] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 258 seconds)
[01:47:00] <bjs> az: every language has a way to group up data into a kind of structure with names for each bit.  structs/classes/datatypes whatever
[01:47:41] *** Joins: jdmark (~jdmark@172.58.172.26)
[01:47:46] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 240 seconds)
[01:48:04] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[01:48:10] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[01:48:21] <az> I liked how python is easily readable and easy to understand, till I see "self.something" and "_init_" haha, not very hard to understand but it gets complicated quickly
[01:48:22] <grym> az: return a class, a dataclass, or a dict or something else, if you don't like order-dependent magic index tuples
[01:48:37] *** Quits: jdmark (~jdmark@172.58.172.26) (Read error: Connection reset by peer)
[01:48:42] <Teekin> @az: It's not a good idea to program away the need to learn a part of the language. Classes are used a lot in Python (whether people like it or not), and you should know them if you're doing Python.
[01:48:45] <grym> az: globals are extremely gross :)
[01:49:12] *** Quits: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[01:49:12] *** Joins: jdmark (~jdmark@67.8.137.130)
[01:49:17] <az> Teekin, I agree.
[01:49:23] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 250 seconds)
[01:49:28] <Teekin> @az: Everything in programming seems complicated until you learn it. :)  They're not complicated. They just feel intimidating when you don't know them yet.
[01:49:35] *** Quits: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:b8ec:2a45:cd1c:4a97) (Ping timeout: 268 seconds)
[01:50:06] <Teekin> Globals are, yes, gross. There *do exist* circumstances where they make sense, but even then, yeah, they're still gross.
[01:50:56] <az> grym, will definitely look into those
[01:51:30] <Teekin> But you should much rather use globals than function attributes, though, in my opinion. Function attributes are just not designed for that.
[01:51:52] *** Quits: nemosaltat (~nemosalta@2607:fb90:4ba9:5df7:317a:e057:95dc:7407) (Remote host closed the connection)
[01:52:09] <az> bjs, do you think using dict or dataclass would do it for my issue?
[01:52:35] *** Joins: nemosaltat (~nemosalta@2607:fb90:4ba9:5df7:317a:e057:95dc:7407)
[01:52:47] <Teekin> @az: You could use dicts, yes.
[01:53:45] <Teekin> They are not ordered, though, unless you use OrderedDict. So if you need to iterate through the variables inside the dict with a consistent order, then you need OrderedDict.
[01:54:13] <Repiphany> Dicts remember insertion order as of 3.6
[01:54:23] *** Joins: MD500_Pilot (~MD500_Pil@gatekeeper.rstechnical.com)
[01:54:27] <Teekin> Wow, really? That totally went past me.
[01:54:52] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973)
[01:54:59] <grym> az: https://bpa.st/WP4Q
[01:55:10] <jinsun> az: since you used the wrong term before, don't confuse between arguments and attributes, arguments are the things you pass in parenthesis f(x), and attributes are the f.x thing you were trying
[01:55:34] <jinsun> az: function arguments are good, function attrubutes not so much
[01:55:35] <Repiphany> OrderedDicts still have specific functionality over ordinary dicts so they're not entirely superfluous
[01:55:44] <Teekin> So it was an implementation detail for CPython in 3.6, but became a language feature in 3.7. Damn, I did not know that.
[01:55:57] *** Joins: Jigsy (~Jigsy@user/jigsy)
[01:56:10] <Teekin> "They are insertion ordered[1]. As of Python 3.6, for the CPython implementation of Python, dictionaries remember the order of items inserted. This is considered an implementation detail in Python 3.6; you need to use OrderedDict if you want insertion ordering that's guaranteed across other implementations of Python (and other ordered behavior[1]).
[01:56:11] <Teekin> As of Python 3.7, this is no longer an implementation detail and instead becomes a language feature"
[01:56:52] <Teekin> @az: So, assuming you're using Python 3.7 or newer, you can just use a regular dict. :)
[01:56:54] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:57:15] <az> grym, thanks it's useful
[01:57:18] <MD500_Pilot> I need to run a python script on Machine A `drive_manager.py -rp` from Machine B and I am (currently) using subprocess via ssh which works, but I also get all of the logging info coming back over from the function. I would like to just get a return (True/False) when it completes. Is there an easy way to do this sans nuking all of my logging
[01:58:04] *** Quits: nemosaltat (~nemosalta@2607:fb90:4ba9:5df7:317a:e057:95dc:7407) (Ping timeout: 272 seconds)
[01:58:33] <grawity> make all of the logging info go to sys.stderr rather than stdout
[01:58:51] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[01:59:26] <bjs> az: sometimes it's better to just use the simpler thing `return 1, 2, 3` is fine for you probably
[01:59:36] *** Joins: nemosaltat (~nemosalta@2607:fb90:4ba9:5df7:317a:e057:95dc:7407)
[01:59:42] *** Joins: thinkofher (~thinkofhe@user/thinkofher)
[01:59:54] <Teekin> Is this a Python script trying on Machine B trying to run the script on Machine A?
[02:00:04] <bjs> az: yeah it might not be the best style for a big program with serious software engineering going on,  but you seem to be learning so it's not a big deal
[02:00:16] <grym> ^ yep, i'd agree to this
[02:00:19] <grym> (as well)
[02:00:32] <grym> beware the returned 15-tuple, of course :)
[02:00:46] <MD500_Pilot> Teekin: Yes, in my python script on Machine B, I use subprocess to call ssh and run the python script on Machine A
[02:01:44] *** Joins: samstevenm (~nemosalta@2607:fb90:fc26:5650:5c23:93b3:b9c2:dbc9)
[02:01:54] <az> much appreciated guys thank you all
[02:02:03] <Teekin> @az: Good luck! :)
[02:02:59] *** Quits: Teekin (~Teekin@45.133.192.68) (Quit: Client closed)
[02:03:04] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[02:03:51] *** Quits: nemosaltat (~nemosalta@2607:fb90:4ba9:5df7:317a:e057:95dc:7407) (Ping timeout: 258 seconds)
[02:05:28] *** Joins: stats4647 (~stats4647@104-8-67-55.lightspeed.irvnca.sbcglobal.net)
[02:05:35] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:05:56] *** Quits: stats4647 (~stats4647@104-8-67-55.lightspeed.irvnca.sbcglobal.net) (Client Quit)
[02:06:43] *** Quits: samstevenm (~nemosalta@2607:fb90:fc26:5650:5c23:93b3:b9c2:dbc9) (Remote host closed the connection)
[02:09:05] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[02:09:20] *** Quits: Bardon (~Bardon@user/Bardon) (Quit: ZNC - https://znc.in)
[02:09:35] *** Joins: tonberry (~d00gy@user/d00gy)
[02:09:50] *** Joins: Bardon (~Bardon@user/Bardon)
[02:10:50] *** Quits: Bardon (~Bardon@user/Bardon) (Remote host closed the connection)
[02:10:51] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[02:11:25] *** Joins: Bardon (~Bardon@user/Bardon)
[02:11:36] *** Joins: seds (sid492514@user/seds)
[02:12:31] *** Joins: cheater (~Username@user/cheater)
[02:12:50] *** Joins: xkuru (~xkuru@user/xkuru)
[02:13:40] *** Joins: rany (~rany@user/rany)
[02:15:39] <MD500_Pilot> ?
[02:16:31] *** Joins: nemosaltat (~nemosalta@2607:fb90:fc27:c42:dcc9:cbb6:a0c3:b7f5)
[02:16:42] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 256 seconds)
[02:17:06] *** Quits: nemosaltat (~nemosalta@2607:fb90:fc27:c42:dcc9:cbb6:a0c3:b7f5) (Read error: Connection reset by peer)
[02:17:09] *** Quits: xkuru (~xkuru@user/xkuru) (Client Quit)
[02:17:33] *** Joins: xkuru (~xkuru@user/xkuru)
[02:17:37] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[02:18:48] *** Joins: thiras (~thiras@user/thiras)
[02:19:12] *** Joins: xkuru (~xkuru@user/xkuru)
[02:21:16] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[02:23:18] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Remote host closed the connection)
[02:23:38] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[02:24:26] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[02:24:40] <MD500_Pilot> Teekin: Yes, in my python script on Machine B, I use subprocess to call ssh and run the python script on Machine A
[02:24:48] <MD500_Pilot> Not sure if you saw this...
[02:24:48] <jinsun> MD500_Pilot: what did you want to do exactly? you are running something with subprocess and you want to see if it succeded?
[02:25:19] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 258 seconds)
[02:25:37] <MD500_Pilot> Yeah, basically I have a process on Machine A that I need Machine B to run without getting all of my logging back (that I need on Machine A). But I need Machine B to see that it either succeeded or failed.
[02:26:02] <MD500_Pilot> I am using subprocess and ssh now, just wanting to know if there is a `better` way to do it.
[02:26:25] <MD500_Pilot> or a more `python` way to communicate between python scripts on different systems
[02:26:47] <MD500_Pilot> I could gut all the logging and only turn it on when I need it I guess
[02:27:05] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[02:27:07] *** Joins: rany_ (~rany@user/rany)
[02:27:08] <jinsun> the usual way to check that is to see the returncode
[02:27:27] <MD500_Pilot> I do send a return code but again it dumps all the logging as well
[02:27:37] *** Quits: rany (~rany@user/rany) (Ping timeout: 258 seconds)
[02:27:56] *** Joins: martums (~martums@user/martums)
[02:28:12] <jinsun> https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess.returncode
[02:28:18] <MD500_Pilot> is there a way to just grab the return (ie True or False) without sending all the logging (which I need on machine A)?
[02:28:28] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 244 seconds)
[02:28:57] <jinsun> the p.returncode will be an int, it won't have the loggin output
[02:29:05] *** Quits: Akuli (~Akuli@87-94-110-103.bb.dnainternet.fi) (Quit: Leaving)
[02:30:05] <MD500_Pilot> so shut off the output and just grab the return code basically, correct?
[02:30:22] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 272 seconds)
[02:33:13] <jinsun> yup forget about the stdoutstderr and just see the returncode
[02:33:56] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Remote host closed the connection)
[02:35:45] *** Quits: magla (~gelignite@55d4004f.access.ecotel.net) (Quit: Stay safe!)
[02:37:18] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[02:37:23] <AhmedAmerican> I'm using `2captcha.com` API to Bypass `HCAPTCHA`, I've done all steps but not sure why it's not solved yet. https://bpa.st/W74A
[02:39:56] <MD500_Pilot> cool, I will give that a try
[02:41:13] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[02:43:31] *** Joins: Caesar-EW (~Caesar-EW@84.213.107.109)
[02:44:26] *** Joins: jdmark2 (~jdmark@67.8.137.130)
[02:46:07] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:46:12] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 272 seconds)
[02:48:00] *** Joins: jdmark (~jdmark@67.8.137.130)
[02:48:09] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:48:42] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[02:49:42] *** Quits: jdmark2 (~jdmark@67.8.137.130) (Ping timeout: 245 seconds)
[02:50:53] *** Joins: jdmark2 (~jdmark@67.8.137.130)
[02:51:19] *** Quits: jdmark2 (~jdmark@67.8.137.130) (Remote host closed the connection)
[02:54:06] *** Quits: rany_ (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[02:54:17] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 245 seconds)
[02:54:42] <MD500_Pilot> Well, I am doing something wrong, no matter what I put, it kicks out all of the logging and the traceback when I raise an exception
[02:54:55] *** Joins: rany (~rany@user/rany)
[02:56:20] <MD500_Pilot> `subprocess.run(['ssh', nas_server_test, f'{script_path.joinpath("drive_manager.py -rp")}'], stdout=None, stderr=None, check=True)`
[02:56:20] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 272 seconds)
[02:56:25] <MD500_Pilot> that does not work
[02:56:36] <MD500_Pilot> `subprocess.run(['ssh', nas_server_test, f'{script_path.joinpath("drive_manager.py -rp")}'], check=True)`
[02:56:50] *** Quits: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy) (Quit: Client closed)
[02:56:54] <MD500_Pilot> that also does not work. And according to the docs, neither of those should grab the output
[02:57:12] <MD500_Pilot> from the docs: `subprocess.run(["ls", "-l"])  # doesn't capture output`
[02:57:53] <MD500_Pilot> I also tried: `subprocess.run(['ssh', nas_server_test, f'{script_path.joinpath("drive_manager.py -rp")}'])` still dumps the output to the remote system
[02:59:15] *** Quits: akk (~akk@75.161.157.26) (Quit: +++)
[03:01:47] *** Joins: driib7 (~driib@185.195.233.162)
[03:05:10] *** Quits: kenwoodfox_ (~quassel@user/kenwoodfox) (Quit: Peace homie)
[03:05:34] *** Quits: driib (~driib@185.195.233.163) (Ping timeout: 258 seconds)
[03:05:34] *** driib7 is now known as driib
[03:05:49] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[03:07:29] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:a614:74b3:aa4d:6481:89d9)
[03:07:46] <grawity> you want stdout=subprocess.DEVNULL, don't you
[03:08:10] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[03:09:23] *** Joins: Elzington__ (~Elzington@68.235.43.22)
[03:09:25] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 258 seconds)
[03:09:35] *** Quits: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[03:10:07] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[03:11:17] *** Quits: p-i- (~Ohmu@2403:6200:8870:a614:967:4ae4:2135:9a07) (Ping timeout: 250 seconds)
[03:11:49] <Yhg1s> MD500_Pilot: yes, they *don't* grab the output, so the output goes to where it would otherwise go, which is your terminal.
[03:11:54] *** Quits: Elzington_ (~Elzington@68.235.43.14) (Ping timeout: 240 seconds)
[03:13:25] <MD500_Pilot> ah, got it, so the stdout=subprocess.DEVNULL will deal with that since my script is sending the output to the terminal....is that the correct way to think about it?
[03:13:39] *** Quits: dalan6 (~dalan@27-32-30-220.tpgi.com.au) (Quit: dalan6)
[03:14:02] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[03:14:12] *** Joins: dalan6 (~dalan@27-32-30-220.tpgi.com.au)
[03:14:50] *** Joins: rany (~rany@user/rany)
[03:16:15] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[03:16:55] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Client Quit)
[03:17:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:17:19] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[03:17:50] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Client Quit)
[03:18:48] *** Joins: nyah_ (~nyah@90.221.186.180)
[03:19:06] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:788e:bf46:ba6a:9e8a) (Ping timeout: 240 seconds)
[03:19:26] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:19:30] <mawk> fr'' or rf'' ?
[03:19:36] *** Joins: kenwoodfox (~quassel@user/kenwoodfox)
[03:19:41] *** Quits: rany (~rany@user/rany) (Client Quit)
[03:19:47] <mawk> which makes more sense
[03:19:49] *** Lando-SpacePimp is now known as PatrickSwayze
[03:19:59] <mawk> let's go with fr as jupyter properly hilites it
[03:20:02] <grym> no preferenxe
[03:20:12] <Yhg1s> MD500_Pilot: sure.
[03:20:37] *** Quits: nyah (~nyah@90.221.186.180) (Killed (calcium.libera.chat (Nickname regained by services)))
[03:20:37] *** nyah_ is now known as nyah
[03:21:17] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 258 seconds)
[03:22:00] *** Quits: Abrax (~Abrax@user/abrax) (Quit: Leaving)
[03:22:01] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[03:22:15] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[03:22:33] *** Joins: nemosaltat (~nemosalta@2607:fb90:cc88:21:fdd9:d139:b65f:c0e5)
[03:22:39] *** lukedashjr is now known as luke-jr
[03:23:13] *** Joins: korg815 (~korg815@user/korg815)
[03:23:16] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[03:23:18] *** Joins: Abrax (~Abrax@user/abrax)
[03:23:35] <mawk> MD500_Pilot: don't forget stderr
[03:23:51] <MD500_Pilot> mawk: Thanks!
[03:24:02] *** Quits: nemosaltat (~nemosalta@2607:fb90:cc88:21:fdd9:d139:b65f:c0e5) (Remote host closed the connection)
[03:24:42] *** Joins: rany (~rany@user/rany)
[03:25:16] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[03:26:44] *** Joins: georgios (~georgios@user/georgios)
[03:27:43] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[03:29:00] *** Joins: Elzington (~Elzington@68.235.43.20)
[03:30:52] *** Quits: Elzington__ (~Elzington@68.235.43.22) (Ping timeout: 258 seconds)
[03:31:35] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:f8f2:84a2:79d0:4f6f)
[03:32:01] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 258 seconds)
[03:39:10] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: Leaving)
[03:39:52] *** Joins: Elzington_ (~Elzington@68.235.43.37)
[03:40:50] *** Quits: Elzington (~Elzington@68.235.43.20) (Ping timeout: 258 seconds)
[03:40:58] <MD500_Pilot> humm, closer but still not working. How can I grab the return code? I am returning `False` and I have `check=True` on my subprocess but I never get anything back other than a 0
[03:41:13] <MD500_Pilot> if I raise an exception I get the entire traceback along with the 1 exitcode
[03:41:25] <MD500_Pilot> even with stderr to devnull
[03:41:49] *** Joins: mickey8 (~user@user/mickey)
[03:42:04] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973) (Quit: Leaving)
[03:42:18] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 276 seconds)
[03:42:23] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[03:42:23] *** mickey8 is now known as mickey
[03:43:21] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 250 seconds)
[03:43:41] *** Joins: Praise (~Fat@user/praise)
[03:43:57] *** Joins: euouae (~euouae@user/euouae)
[03:47:00] *** Quits: bam32 (~bambams@user/bambams) (Ping timeout: 272 seconds)
[03:47:01] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[03:48:22] *** Joins: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[03:50:06] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[03:50:48] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 258 seconds)
[03:51:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[03:52:46] *** Quits: wereii (~wereii@37.205.14.89) (Quit: ZNC - https://znc.in)
[03:53:00] <Yhg1s> MD500_Pilot: False is 0, which for a process exit code means success.
[03:53:17] <Yhg1s> MD500_Pilot: I'm not sure what you're trying to do.
[03:53:40] <MD500_Pilot> I figured it out, when it fails I raise an exception and then check for the exception. This worked:
[03:53:53] <Yhg1s> MD500_Pilot: that's what 'check=True' does, yes.
[03:54:11] <Yhg1s> (if you don't actually want the exception, omit the check=True and consult the object subprocess.run returns, instead.)
[03:54:16] <MD500_Pilot> actually that did not work
[03:54:18] *** Joins: Samian (~Sami@2620:10d:c091:480::1:1def)
[03:54:25] <MD500_Pilot> it returned the entire exception which caused my script to fail
[03:54:41] <MD500_Pilot> yep, that is what I found out :-)
[03:54:51] <MD500_Pilot> Yhg1s
[03:54:51] *** Joins: wereii (~wereii@2a03:3b40:fe:4f::1)
[03:55:09] <MD500_Pilot> ```
[03:55:12] <MD500_Pilot> ```result = (subprocess.run(['ssh', nas_server_test, f'{script_path.joinpath("drive_manager.py -rp")}'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL))
[03:55:12] <MD500_Pilot>     if result.returncode ==1:
[03:55:13] <MD500_Pilot>         print ('WARNING')```
[03:55:18] <Yhg1s> MD500_Pilot: don't paste here.
[03:55:20] <Yhg1s> use a pastebin.
[03:55:26] <MD500_Pilot> oops, sory
[03:55:28] <MD500_Pilot> sory
[03:58:08] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[03:59:17] *** Quits: gambl0re (~gambl0re@24.140.237.124) (Ping timeout: 245 seconds)
[04:00:00] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 258 seconds)
[04:01:00] <sazawal> Hi all. How do I join a thread started with a pyqt button. Here is a sample code, https://bpa.st/MZWA . Uncommenting line 25 freezes the gui.
[04:01:13] *** Parts: euouae (~euouae@user/euouae) ()
[04:03:30] *** Quits: truth (~truth@user/truth) (Ping timeout: 240 seconds)
[04:05:16] *** Joins: Wulf4 (~Wulf@user/wulf)
[04:08:54] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:08:54] *** Wulf4 is now known as Wulf
[04:09:35] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 258 seconds)
[04:11:05] <jochum> MD500_Pilot: have a look at https://github.com/paramiko/paramiko
[04:11:54] <MD500_Pilot> I actually use paramike to move about json config file updates between all my servers but seems overkill to reach out and run am simple command
[04:14:15] <jochum> MD500_Pilot: if result.returncode != 0:
[04:15:35] <jochum> MD500_Pilot: a side question, why don't you use ansible?
[04:15:36] <MD500_Pilot> so anthing other than 0
[04:15:51] <jochum> 0 = no error, 1+ = error
[04:16:04] <MD500_Pilot> got it, and I have no idea what ansible is :-)
[04:16:27] <jochum> MD500_Pilot: it allows you to manage machines with one command
[04:16:46] <jochum> MD500_Pilot: learning curve is ok for someone knowing python and yaml.
[04:17:34] <MD500_Pilot> humm, I will have to take a look at it, not sure where it would fit into my program, I am not really managing machines but rather managing moving files around (plus a lot more).
[04:17:55] <jochum> ok
[04:18:28] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:19:36] *** Quits: SpeakerToMeat__ (~Speaker@user/speakertomeat) (Quit: WeeChat 3.2)
[04:20:05] *** Joins: jcarl43 (~jcarl@d205-250-163-38.bchsia.telus.net)
[04:22:08] *** Joins: truth (~truth@user/truth)
[04:23:35] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[04:25:20] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[04:26:05] *** Quits: jcarl43 (~jcarl@d205-250-163-38.bchsia.telus.net) (Quit: WeeChat 3.2)
[04:26:42] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 252 seconds)
[04:28:13] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[04:28:33] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[04:29:57] *** Quits: sazawal (~sazawal@122.161.170.192) (Quit: Leaving)
[04:30:40] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:30:41] *** Quits: truth (~truth@user/truth) (Ping timeout: 258 seconds)
[04:32:09] *** Joins: nemosaltat (~nemosalta@2607:fb90:cc88:21:fdd9:d139:b65f:c0e5)
[04:32:09] *** Quits: nemosaltat (~nemosalta@2607:fb90:cc88:21:fdd9:d139:b65f:c0e5) (Client Quit)
[04:32:18] *** Joins: samstevenm (~nemosalta@2607:fb90:cc88:21:fdd9:d139:b65f:c0e5)
[04:32:57] *** Joins: truth (~truth@user/truth)
[04:35:16] *** Quits: samstevenm (~nemosalta@2607:fb90:cc88:21:fdd9:d139:b65f:c0e5) (Remote host closed the connection)
[04:35:57] *** Joins: jcarl43 (~jcarl@d205-250-163-38.bchsia.telus.net)
[04:36:03] *** Quits: waxfire238 (~waxfire@65.119.2.240) (Quit: The Lounge - https://thelounge.chat)
[04:36:14] *** Joins: waxfire238 (~waxfire@65.119.2.240)
[04:37:09] *** Joins: jazzy (~jaziz@2600:380:8562:6b2:9c1f:23c2:2ca2:238b)
[04:38:03] *** Quits: jcarl43 (~jcarl@d205-250-163-38.bchsia.telus.net) (Client Quit)
[04:39:10] *** Joins: jcarl43 (~jcarl@d205-250-163-38.bchsia.telus.net)
[04:41:53] *** Quits: knipster (~knipster@user/knipster) (Remote host closed the connection)
[04:42:03] *** Joins: dre (~dre@2001:8003:c932:c301:1048:7720:d398:8580)
[04:43:10] *** Quits: jcarl43 (~jcarl@d205-250-163-38.bchsia.telus.net) (Client Quit)
[04:45:07] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[04:46:52] *** Quits: MercilessDeth (~brad@136.49.61.2) (Ping timeout: 256 seconds)
[04:49:11] *** Joins: akoana (~ah@user/akoana)
[04:52:48] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-f514-c7d8-9e18-a2d5.res6.spectrum.com)
[04:57:09] *** Joins: catwaii (~catwaii@190-36-126-153.dyn.dsl.cantv.net)
[04:57:10] *** Joins: emika (~emika@83.136.182.252)
[04:58:40] <catwaii> hi
[04:58:51] <catwaii> got some issues while upgrading pip packages
[04:59:18] <catwaii> this is the log of pip install --upgrade pip
[04:59:19] <catwaii> https://bpa.st/SK2A
[04:59:21] <catwaii> keeps on going
[05:00:28] <catwaii> Discarding [requested package] has different version in metadata: '21.2.3'
[05:02:26] <vlt> catwaii: Maybe this doesn’t help at all but I’d always use a venv.
[05:03:29] <catwaii> ??
[05:04:07] <grym> i don't even _have_ a system pip
[05:04:21] <vlt> grym: Me neither :D
[05:04:23] <grym> `export PIP_REQUIRE_VIRTUALENV=1` ftw
[05:04:34] <grym> just in case one sneaks in
[05:05:14] <vlt> catwaii: Create a venv: `/your/favourite/python -m venv /some/place/for/it/`
[05:05:16] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[05:05:46] <vlt> catwaii: Then activate it: `. /some/place/for/it/bin/activate`
[05:06:10] <vlt> catwaii: Then, *in* the venv, just pip away
[05:07:32] <catwaii> so
[05:07:39] <dre> grym, good tip, thanks, that's really nice.
[05:08:29] <catwaii> when you say "in the venv" do you mean "cd /some/place/for/it"?
[05:08:32] *** Quits: mantiX (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[05:09:04] <grym> catwaii: it won't depend on your current working directory
[05:09:18] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[05:09:18] <catwaii> ohh
[05:09:20] <catwaii> i see
[05:09:22] <vlt> catwaii: No. `cd` takes you to the directory (usually the project)
[05:09:24] <grym> catwaii: you can, activation or not, always `/some/place/for/it/bin/python -m pip ... `
[05:10:17] <catwaii> alright
[05:10:21] <vlt> catwaii: activating the venv changes the environment a little bit to give you one specific Python version with only the packages you explicitely installed.
[05:10:34] <catwaii> it worked
[05:10:36] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[05:10:52] <catwaii> thanks for the workaround, but i want to have system wide packages available
[05:10:56] <catwaii> not a virtualenv
[05:10:57] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.0.1)
[05:11:30] <vlt> catwaii: (You should thonk about *why* you want that) ;)
[05:11:34] <vlt> *think
[05:11:52] <grym> catwaii: https://pypa.github.io/pipx/
[05:12:09] <grym> catwaii: that'll give you what you want, but doing it our way :)
[05:12:51] <catwaii> looks neat
[05:12:54] <catwaii> thanks
[05:13:01] *** Parts: catwaii (~catwaii@190-36-126-153.dyn.dsl.cantv.net) (WeeChat 3.2)
[05:13:13] <grym> (i use it for ipython, youtube-dl, litecli, aws cli, etc.)
[05:15:53] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[05:16:42] *** Quits: yte3 (~0@151.15.180.83) (Ping timeout: 240 seconds)
[05:17:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[05:17:48] *** Joins: baroobob (~jwbwater@98.215.243.94)
[05:20:37] *** Joins: jdmark (~jdmark@67.8.137.130)
[05:22:56] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[05:24:29] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:25:00] *** Quits: Caesar-EW (~Caesar-EW@84.213.107.109) (Ping timeout: 252 seconds)
[05:26:38] *** Joins: KombuchaKip (~kip@192.252.230.5)
[05:27:49] *** Joins: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net)
[05:28:46] *** Joins: tims (~tims@61.69.131.46)
[05:29:02] *** Joins: tone0 (~tone@071-011-252-111.res.spectrum.com)
[05:30:08] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[05:32:02] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:34:44] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:36:12] *** Joins: vlm (~vlm@user/vlm)
[05:36:36] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Quit: Leaving)
[05:37:16] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[05:38:54] <Xavierdarkness>  
[05:39:06] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 240 seconds)
[05:40:06] *** Joins: brabrax (~brabrax@user/brabrax)
[05:40:06] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:212c:28e7:b600:7846)
[05:43:24] *** Joins: gambl0re (~gambl0re@24.140.237.124)
[05:44:44] *** Joins: c4017 (~c4017@2604:3d08:747f:7c90:d869:df28:2173:ba54)
[05:45:32] *** Quits: elastic_dog (~elastic_d@ary207.neoplus.adsl.tpnet.pl) (Ping timeout: 245 seconds)
[05:45:59] *** Quits: PatrickSwayze (~Lando@user/lando-spacepimp) (Ping timeout: 250 seconds)
[05:47:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:51:07] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[05:53:56] *** Joins: rany (~rany@user/rany)
[05:55:10] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[05:56:57] *** Quits: jtck (~jtck@222.164.13.173) (Remote host closed the connection)
[05:58:54] *** Quits: tone0 (~tone@071-011-252-111.res.spectrum.com) (Remote host closed the connection)
[05:59:38] *** Joins: OPK (~OPK@user/opk)
[06:00:12] *** Joins: knipster (~knipster@user/knipster)
[06:00:29] *** Joins: c10l (~c10l@89.34.167.207)
[06:02:17] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 258 seconds)
[06:03:24] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[06:03:34] *** Joins: elastic_dog (~elastic_d@ary207.neoplus.adsl.tpnet.pl)
[06:05:06] *** Quits: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net) (Quit: padraigd)
[06:07:00] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-f9c9-12c1-1bdd-7dd0.res6.spectrum.com)
[06:07:19] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[06:07:25] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[06:09:43] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:a614:74b3:aa4d:6481:89d9) (Remote host closed the connection)
[06:10:06] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-dd8f-ae40-8c90-f67d.res6.spectrum.com) (Ping timeout: 252 seconds)
[06:10:25] *** Joins: p-i- (~Ohmu@2403:6200:8870:a614:74b3:aa4d:6481:89d9)
[06:11:44] *** Joins: matsaman (~matsaman@user/matsaman)
[06:12:05] *** Joins: Slimgin (~Thunderbi@2603:9001:207:a100:8918:d4a6:c81d:5551)
[06:12:32] *** Quits: pyfisch (~pyfisch@user/pyfisch) (Quit: Ping timeout (120 seconds))
[06:12:48] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[06:14:36] *** Joins: emika3 (~emika@185.207.249.238)
[06:15:01] *** Quits: p-i- (~Ohmu@2403:6200:8870:a614:74b3:aa4d:6481:89d9) (Ping timeout: 250 seconds)
[06:15:06] *** Quits: emika (~emika@83.136.182.252) (Ping timeout: 240 seconds)
[06:15:06] *** emika3 is now known as emika
[06:16:28] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-f514-c7d8-9e18-a2d5.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[06:16:47] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 245 seconds)
[06:19:36] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-5802-f7e6-bf16-a321.res6.spectrum.com) (Read error: Connection reset by peer)
[06:19:40] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[06:20:07] *** Quits: asa22 (~asa22@84.125.126.129.dyn.user.ono.com) (Ping timeout: 246 seconds)
[06:22:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[06:24:36] *** Joins: tone0 (~tone0@071-011-252-111.res.spectrum.com)
[06:25:15] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[06:27:12] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 258 seconds)
[06:28:04] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[06:29:22] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[06:29:25] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[06:30:09] <AhmedAmerican> is it necessary to learn git/github ?
[06:30:32] <grym> AhmedAmerican: a version control system is more or less required for your sanity, yes
[06:31:01] <grym> there are other ones than git, but git is so common that you will want to have some level of working proficiency with it
[06:31:02] <AhmedAmerican> grym: Thank you ,do you recommend any tutorial to start with ?
[06:31:24] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-f9c9-12c1-1bdd-7dd0.res6.spectrum.com) (Quit: jarthur_)
[06:31:28] <grym> AhmedAmerican: there used to be an online playground.
[06:32:00] <AhmedAmerican> something like https://learngitbranching.js.org/ ?
[06:32:10] <grym> yeah that looks like a clone of it
[06:32:19] <grym> "the book" is git-scm.com/book
[06:32:51] <grym> https://www.youtube.com/watch?v=ZDR433b0HJY  is old now but still pretty good imo
[06:32:54] <grym> dude talks quick :)
[06:33:15] <mefistofeles> AhmedAmerican: I like that one
[06:33:22] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[06:33:49] <AhmedAmerican> cool. thank you :P
[06:33:51] <Slimgin> Git.com offers a quick-start guide here - https://docs.github.com/en/get-started/quickstart/set-up-git
[06:33:59] <grym> AhmedAmerican: if i have any advice it's that i recommend using the cli tool directly until you're familiar with it, and only then deciding that some editor/IDE integrated tools are something you might like
[06:34:20] <grym> knowing what git wants to do is a lot easier when you don't have some weirdo middlemen involved
[06:34:41] *** Joins: jtck (~jtck@222.164.13.173)
[06:34:43] *** Quits: jtck (~jtck@222.164.13.173) (Remote host closed the connection)
[06:34:53] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[06:34:59] <AhmedAmerican> you meant to discard vscode integrated git until i reach good stage with git ?
[06:35:19] <Slimgin> Really, at least for me, I have to reference git stuff each time I update repo's, so simply finding the commands and their use is great as well.
[06:35:20] <grym> that's what i'd recommend, yes
[06:35:29] <Slimgin> Yeah, thats a good idea.
[06:35:41] <grym> vscode's integration, in particular, has regularly confused me
[06:35:45] <grym> and i know what i'm doing!
[06:36:29] <AhmedAmerican> VScode is very confusing at some points yes. not just git :D
[06:36:33] <Slimgin> Yeah its definitely best to understand whats going on behind the scenes before you start using automated push mechanisms.
[06:36:38] <grym> there are a few good so-called porcelains for git, but imo that isn't really one of them.  you may come to disagree with me, which is fine, but even though i use a porcelain now, i still regularly do git operations from the cli
[06:36:57] <grym> so knowing the real tool quite well is still very important
[06:37:20] *** Quits: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com) (Remote host closed the connection)
[06:38:54] <grym> (about the only thing i've discovered that cli git cannot do at all that some porcelains can is easily adding chunks across all changed files in parallel, which is a fairly advanced thing to want to do
[06:39:14] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[06:42:28] *** Quits: dre (~dre@2001:8003:c932:c301:1048:7720:d398:8580) (Ping timeout: 256 seconds)
[06:42:47] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[06:43:18] *** Quits: emerent (~quassel@p200300cd57058cd1ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[06:43:31] *** Joins: emerent (~quassel@p200300cd57058c26ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:44:56] *** Joins: rsrx (~rsrx@103.225.150.81)
[06:48:50] *** Quits: entuland (~entuland@user/entuland) (Read error: Connection reset by peer)
[06:52:52] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:55:35] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:56:10] *** Quits: Melantha (~pyon@user/pyon) (Quit: WeeChat 3.2)
[06:56:31] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[06:57:52] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[06:58:10] *** Joins: rany (~rany@user/rany)
[06:58:25] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[07:00:08] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:00:08] *** FinnElija is now known as Guest19
[07:00:08] *** Quits: Guest19 (~finn_elij@user/finn-elija/x-0085643) (Killed (silver.libera.chat (Nickname regained by services)))
[07:00:08] *** finn_elija is now known as FinnElija
[07:05:09] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 258 seconds)
[07:18:10] *** Quits: hafat (~hafat@95.70.167.173) (Ping timeout: 256 seconds)
[07:18:45] *** Joins: jtck (~jtck@222.164.13.173)
[07:20:03] *** Joins: stpz (~stpz@240e:341:2298:ea00:ec54:1f1b:d37e:b4)
[07:21:46] *** Joins: yogoyo_x (~dead@user/yogoyo)
[07:21:54] *** Quits: stpz (~stpz@240e:341:2298:ea00:ec54:1f1b:d37e:b4) (Client Quit)
[07:22:24] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[07:24:23] *** Joins: p-i- (~Ohmu@2403:6200:8870:a614:74b3:aa4d:6481:89d9)
[07:28:57] *** Quits: Slimgin (~Thunderbi@2603:9001:207:a100:8918:d4a6:c81d:5551) (Quit: Slimgin)
[07:30:21] *** Joins: damxsa (~damx@2001:16a2:cfd8:e500:40e7:6a69:a396:39e9)
[07:31:59] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 258 seconds)
[07:37:39] *** Joins: Mija (~Mija@user/mija)
[07:39:30] *** Joins: matsaman (~matsaman@user/matsaman)
[07:39:51] *** Joins: jdmark2 (~jdmark@67.8.137.130)
[07:40:07] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 245 seconds)
[07:41:16] *** Quits: damxsa (~damx@2001:16a2:cfd8:e500:40e7:6a69:a396:39e9) (Quit: Leaving)
[07:41:40] *** Joins: damxsa (~damx@2001:16a2:cfd8:e500:40e7:6a69:a396:39e9)
[07:41:58] *** Quits: damxsa (~damx@2001:16a2:cfd8:e500:40e7:6a69:a396:39e9) (Remote host closed the connection)
[07:42:49] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[07:43:06] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[07:43:52] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 272 seconds)
[07:44:03] *** Joins: jdmark3 (~jdmark@67.8.137.130)
[07:45:08] *** Quits: EGH (~EGH@185.25.195.104) (Ping timeout: 272 seconds)
[07:48:00] *** Quits: jdmark2 (~jdmark@67.8.137.130) (Ping timeout: 252 seconds)
[07:48:08] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[07:49:11] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[07:49:28] *** Quits: jdmark3 (~jdmark@67.8.137.130) (Quit: Leaving)
[07:50:04] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[07:55:16] *** Quits: jtck (~jtck@222.164.13.173) (Remote host closed the connection)
[07:55:50] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[07:59:55] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[08:00:13] *** Joins: rany (~rany@user/rany)
[08:04:37] *** Quits: tonberry (~d00gy@user/d00gy) (Quit: WeeChat 2.3)
[08:05:37] *** Quits: Liblx (~Alex@2a02:810c:280:59c:9922:e4c:6008:be3d) (Quit: WeeChat 3.2)
[08:07:45] *** Joins: Skyfire (~pyon@user/pyon)
[08:09:44] *** Quits: kmh (~kmh@p200300df5f34a300a53c887b84ee4a87.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[08:09:49] *** Parts: akoana (~ah@user/akoana) (Leaving)
[08:10:50] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[08:12:01] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[08:12:59] *** Joins: kmh__ (~kmh@p2e511f3b.dip0.t-ipconnect.de)
[08:16:06] *** Joins: ice9 (~ice9@user/ice9)
[08:18:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:19:02] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[08:19:50] *** Joins: rany (~rany@user/rany)
[08:27:59] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[08:30:12] *** Joins: rany_ (~rany@user/rany)
[08:30:38] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 258 seconds)
[08:31:15] *** Abrax is now known as Kratos
[08:31:22] *** Kratos is now known as Abrax
[08:31:24] *** Quits: rany (~rany@user/rany) (Ping timeout: 258 seconds)
[08:34:59] *** jkl1337 is now known as jkl
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:40:05] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[08:41:15] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:47:03] *** Joins: AlanMD (~AlanMD@109.166.128.52)
[08:49:43] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[08:50:18] *** Quits: kmh__ (~kmh@p2e511f3b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[08:51:14] *** Quits: imp (~imp@186.205.11.214) (Quit: imp)
[08:51:25] *** Joins: AlanMD_ (~AlanMD@193.105.140.131)
[08:51:43] *** Quits: AlanMD (~AlanMD@109.166.128.52) (Ping timeout: 258 seconds)
[08:52:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[09:05:29] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[09:05:45] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[09:12:43] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[09:13:31] *** Quits: ackatz (~ackatz@69-230-153-205.lightspeed.irvnca.sbcglobal.net) (Quit: Connection closed)
[09:16:36] *** Quits: DaNeenjah (~jake@21.sub-72-106-110.myvzw.com) (Ping timeout: 256 seconds)
[09:25:53] *** Joins: y1n (~y1n@84-115-64-213.wifi.dynamic.surfer.at)
[09:27:06] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:27:15] *** Joins: MercilessDeth (~brad@136.49.61.2)
[09:33:43] *** Joins: kmh (~kmh@p200300df5f48d100dc3f22e5691fdfcd.dip0.t-ipconnect.de)
[09:34:39] *** Quits: y1n (~y1n@84-115-64-213.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[09:37:44] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[09:48:52] *** Joins: y1n (~y1n@84-115-64-213.wifi.dynamic.surfer.at)
[09:51:39] *** Orimendix is now known as Zeturic
[09:53:41] *** Quits: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net) (Quit: Leaving)
[10:02:00] *** Joins: xernaron (~xernaron@box.xernaron.ch)
[10:03:09] *** Joins: regedit (~regedit@ool-457874e2.dyn.optonline.net)
[10:03:21] <regedit> hello am trying to read mbox https://docs.python.org/3/library/mailbox.html#examples my subjects are coming out as quoted-printable ex. =?UTF-8?B?dGVzdCAxMjM=?=
[10:04:19] *** Joins: upsala (~zcb@185.213.155.160)
[10:05:41] *** Quits: yogoyo_x (~dead@user/yogoyo) (Quit: WeeChat 2.3)
[10:06:36] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[10:07:56] <jim> is there an mbox reading module for python?
[10:08:46] <regedit> the above standard library seems to take things some/most of the way there
[10:09:27] <regedit> but does not automatically decode or automatically handle multipart etc. there's some code to write in order to get fully functional "read an email for a human"
[10:09:32] *** Quits: AlanMD_ (~AlanMD@193.105.140.131) (Ping timeout: 258 seconds)
[10:11:00] *** Quits: y1n (~y1n@84-115-64-213.wifi.dynamic.surfer.at) (Ping timeout: 256 seconds)
[10:15:13] <jim> maybe there's also a MIME module floating around
[10:19:30] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Ping timeout: 258 seconds)
[10:19:36] *** Quits: cul8r (~cul8r@c-73-26-110-61.hsd1.nm.comcast.net) (Remote host closed the connection)
[10:20:04] *** Quits: rsrx (~rsrx@103.225.150.81) (Ping timeout: 256 seconds)
[10:21:38] <regedit> meanwhile i've been shown to use `email.header.decode_header`
[10:21:42] *** Joins: bread (uid502657@id-502657.brockwell.irccloud.com)
[10:22:24] <regedit> i guess it's just slightly inconvenient to have to go fetch this functionality from elsewhere... would be very helpful if it was part of the mailbox module functionality
[10:23:12] *** Joins: y1n (~y1n@84-115-65-213.wifi.dynamic.surfer.at)
[10:24:22] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:26:04] *** Joins: cheater (~Username@user/cheater)
[10:27:54] *** Quits: jabberwock (~jessy@user/jabberwock) (Ping timeout: 276 seconds)
[10:30:18] <jim> maybe you could make that happen
[10:31:28] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (Quit: because)
[10:32:32] *** Joins: jabberwock (~jessy@user/jabberwock)
[10:32:32] *** Quits: y1n (~y1n@84-115-65-213.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[10:34:20] <regedit> you think too highly of me 🤩😝
[10:34:52] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 272 seconds)
[10:35:36] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 258 seconds)
[10:40:54] *** Joins: emika2 (~emika@83.136.182.85)
[10:41:05] *** Joins: jdmark (~jdmark@67.8.137.130)
[10:42:02] *** Joins: Vonter (~Vonter@user/vonter)
[10:42:58] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:44:02] *** Quits: emika (~emika@185.207.249.238) (Ping timeout: 258 seconds)
[10:44:03] *** emika2 is now known as emika
[10:44:51] <jim> how do you know that?
[10:45:54] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:26] *** Joins: seednode (~seednode@user/seednode)
[10:48:58] *** Quits: jabberwock (~jessy@user/jabberwock) (Ping timeout: 256 seconds)
[10:49:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:52:02] *** Joins: y1n (~y1n@84-115-65-192.wifi.dynamic.surfer.at)
[10:54:46] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 258 seconds)
[10:55:35] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:57:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:57:51] *** Lord_of_Life_ is now known as Lord_of_Life
[10:58:03] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973)
[11:00:45] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[11:01:40] *** Joins: kosh (~kosh@user/kosh)
[11:04:18] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 276 seconds)
[11:05:35] *** Joins: manti7 (~manti7@176.10.104.94)
[11:06:16] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[11:07:08] *** Joins: yogoyo (~paddy@user/yogoyo)
[11:08:19] <regedit> you skept my assessment of your assessment of me
[11:08:34] *** Quits: y1n (~y1n@84-115-65-192.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[11:09:18] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 252 seconds)
[11:12:16] *** Joins: rendar (~rendar@user/rendar)
[11:13:47] *** Quits: Forkk (forkk@2600:3c00::f03c:91ff:fe84:de4d) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[11:15:24] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: leaving)
[11:15:33] *** Joins: Forkk (forkk@2600:3c00::f03c:91ff:fe84:de4d)
[11:15:43] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[11:17:18] *** Quits: gambl0re (~gambl0re@24.140.237.124) (Ping timeout: 256 seconds)
[11:18:28] *** Quits: poorboy (~poorboy@104.131.46.87) (Remote host closed the connection)
[11:19:45] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 252 seconds)
[11:20:09] *** Joins: astrocat (~astrocat@112.134.8.239)
[11:21:06] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:21:56] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[11:23:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[11:26:51] *** Joins: Hax0r (~Hax0r@93.168.133.215)
[11:26:55] *** Quits: Hax0r (~Hax0r@93.168.133.215) (Max SendQ exceeded)
[11:27:16] *** Joins: Hax0r (~Hax0r@2001:16a2:c054:571b:540d:f930:6f33:2)
[11:27:30] *** Quits: Hax0r (~Hax0r@2001:16a2:c054:571b:540d:f930:6f33:2) (Remote host closed the connection)
[11:27:33] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[11:27:41] *** Joins: Hax0r (~Hax0r@2001:16a2:c054:571b:540d:f930:6f33:2)
[11:28:29] *** Joins: y1n (~y1n@84-115-64-79.wifi.dynamic.surfer.at)
[11:30:32] *** Quits: LiftLeft (~LiftLeft@191.96.150.118) (Ping timeout: 245 seconds)
[11:32:36] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[11:33:05] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[11:36:07] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 250 seconds)
[11:38:51] *** Quits: y1n (~y1n@84-115-64-79.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[11:42:46] *** Joins: jabberwock (~jessy@user/jabberwock)
[11:43:31] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[11:43:53] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[11:44:10] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[11:46:04] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[11:46:54] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:47:12] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 245 seconds)
[11:47:46] *** Joins: cheater (~Username@user/cheater)
[11:50:27] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 276 seconds)
[11:50:29] *** Joins: gambl0re (~gambl0re@24.140.237.124)
[11:53:40] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[11:58:15] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 276 seconds)
[12:01:06] *** Joins: CoolerX (~CoolerX@user/coolerx)
[12:02:34] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[12:04:41] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[12:05:04] *** Joins: bastie-fastgrass (~brian@2a02:8071:b6d8:e500:2120:4a40:1260:b66f)
[12:05:08] <bastie-fastgrass> hi
[12:05:30] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 240 seconds)
[12:08:14] <bastie-fastgrass> is there any way to annotate a type as a dictionary representation of an object?
[12:08:18] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 256 seconds)
[12:08:29] *** Joins: xa0s (~xa0s@mab.sdf.org)
[12:09:08] *** Quits: kmh (~kmh@p200300df5f48d100dc3f22e5691fdfcd.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[12:09:42] *** Joins: kmh_ (~kmh@p5dcc60d3.dip0.t-ipconnect.de)
[12:10:25] <bastie-fastgrass> im serializing some data as JSON and sending it through redis. i'd like to specify the shape of the data on the other side without having to define TypedDicts
[12:11:30] *** Quits: gambl0re (~gambl0re@24.140.237.124) (Ping timeout: 240 seconds)
[12:17:25] *** Joins: igghibu (~igghibu@37.120.201.121)
[12:20:58] *** Joins: mattil (~mattilinn@87-92-149-13.rev.dnainternet.fi)
[12:21:05] *** yogoyo is now known as yogoyo_
[12:21:24] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[12:21:38] *** Joins: yogoyo (~yogoyo@user/yogoyo)
[12:23:11] *** Quits: yogoyo_ (~paddy@user/yogoyo) (Quit: WeeChat 3.2)
[12:25:12] *** Joins: debayer (~debayer@2603-8000-cf00-0010-4dc2-efc1-b952-84db.res6.spectrum.com)
[12:35:21] *** Joins: pwnd_sfw5 (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[12:35:59] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[12:36:18] *** Quits: nesoi (~Adium@172-3-140-156.lightspeed.sntcca.sbcglobal.net) (Quit: Leaving.)
[12:36:26] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[12:36:27] *** pwnd_sfw5 is now known as pwnd_sfw
[12:37:53] *** Quits: drew (~drew@user/drew) (Ping timeout: 258 seconds)
[12:38:08] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:19] *** Quits: igghibu (~igghibu@37.120.201.121) (Quit: Textual IRC Client: www.textualapp.com)
[12:39:28] *** Quits: astrocat (~astrocat@112.134.8.239) (Ping timeout: 256 seconds)
[12:39:44] *** Joins: georgios (~georgios@user/georgios)
[12:40:02] *** Quits: elastic_dog (~elastic_d@ary207.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[12:40:03] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[12:40:43] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:42:57] *** Joins: palasso (~palasso@user/palasso)
[12:43:25] *** Joins: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:5aaf:6a00:793e:5e7a)
[12:46:39] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:47:40] *** Quits: pyfisch (~pyfisch@user/pyfisch) (Quit: Ping timeout (120 seconds))
[12:48:01] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[12:51:11] *** Joins: Cyp_ (~cyp@192038129116.mbb.telenor.dk)
[12:51:33] *** Quits: Cyp (~cyp@192038129116.mbb.telenor.dk) (Quit: Konversation terminated!)
[12:52:12] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 276 seconds)
[12:52:38] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[12:59:59] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[13:01:32] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[13:02:25] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 258 seconds)
[13:03:38] *** Joins: ge0rgios (~georgios@user/georgios)
[13:04:13] *** Joins: sazawal (~sazawal@122.161.170.192)
[13:04:20] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 258 seconds)
[13:04:59] *** Joins: astrocat (~astrocat@112.134.8.239)
[13:06:06] *** Quits: Hax0r (~Hax0r@2001:16a2:c054:571b:540d:f930:6f33:2) (Ping timeout: 256 seconds)
[13:08:18] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[13:08:52] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973) (Quit: Leaving)
[13:10:15] *** Joins: MetalSutton (~MetalSutt@101.100.153.131)
[13:12:41] <MetalSutton> does anyone in here have any experience with avrdude?
[13:13:45] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[13:14:15] <matsaman> no, why?
[13:16:39] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 250 seconds)
[13:19:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:20:50] *** Quits: Preston (~liminalcr@c-24-125-222-206.hsd1.ga.comcast.net) (Quit: WeeChat 3.2)
[13:21:08] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[13:24:44] *** Joins: darksun (~darksun@user/darksun)
[13:25:00] *** Quits: p-i- (~Ohmu@2403:6200:8870:a614:74b3:aa4d:6481:89d9) (Remote host closed the connection)
[13:25:34] *** Joins: p-i- (~Ohmu@mx-ll-171.6.227-32.dynamic.3bb.co.th)
[13:25:51] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:26:00] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 276 seconds)
[13:28:58] *** Quits: audiocat (~audio@2603-8081-1800-00ad-9156-ebc1-6da9-7c72.res6.spectrum.com) (Ping timeout: 272 seconds)
[13:30:05] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[13:30:19] *** Joins: km (~km@static.55.93.181.135.clients.your-server.de)
[13:30:56] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973)
[13:34:14] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 258 seconds)
[13:36:29] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:40:23] *** Quits: Mija (~Mija@user/mija) (Quit: Mija)
[13:40:45] *** Joins: magla (~gelignite@55d45882.access.ecotel.net)
[13:41:31] *** Joins: dre (~dre@2001:8003:c932:c301:201a:59c7:e77c:7ce)
[13:42:51] *** Joins: Deknos (~someone@user/menace)
[13:44:58] *** Joins: EGH (~EGH@185.25.195.104)
[13:46:34] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[13:46:52] *** Joins: frost (~frost@59.71.241.179)
[13:51:22] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: Lost terminal)
[13:51:33] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[13:53:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[13:56:00] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[13:57:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:57:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[13:57:16] *** Joins: entuland (~entuland@user/entuland)
[13:57:24] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:58:10] *** Quits: astrocat (~astrocat@112.134.8.239) (Ping timeout: 272 seconds)
[14:00:31] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[14:00:52] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[14:01:00] <no_gravity> Good Morning
[14:01:13] <sazawal> Hi people. What is a QueueFeederThread? When my python application has finished processing all the threads, I queried a list of still running threads and I got a couple of QueueFeederThread as thread names. Not sure what are these threads which are still running, and raising an exception when I end my code.
[14:01:22] <sazawal> no_gravity, GM
[14:01:44] <no_gravity> Is there a formula for how a virus spreads in a grid? The first virus could infect its 4 neighbors. So in step 2, there are 5. Those 5 have 8 neighbors. So in step 3 there are 13 ...
[14:05:09] <sazawal> no_gravity, Start with a 2D list (a list of lists) and in every iteration of the loop keep marking the infected nodes.
[14:05:27] *** Joins: Hax0r (~Hax0r@2001:16a2:c054:571b:540d:f930:6f33:2)
[14:05:33] <no_gravity> sazawal: I am looking for a formula, not an algorithm. f(step_nr) so to say.
[14:06:15] *** Quits: yogoyo (~yogoyo@user/yogoyo) (Quit: bye)
[14:06:17] *** Joins: Akera4 (~Guest38@149.255.222.33)
[14:06:17] <sazawal> no_gravity, Formula for number of infected nodes?
[14:06:23] <Akera4> Anyway anyone want to partner on a python project, making some side income. I have an idea it's promising and have already made the prototype.
[14:06:34] <Akera4> Anyway / Hello*
[14:06:40] <no_gravity> sazawal: Yup
[14:06:55] <no_gravity> Akera4: I have a dozen of those projects too :)
[14:07:16] <Akera4> Do you want to partner
[14:07:35] <sazawal> no_gravity, Well you can figure it out by counting, is it that hard?
[14:07:41] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[14:07:52] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Ping timeout: 256 seconds)
[14:07:58] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Ping timeout: 258 seconds)
[14:08:03] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[14:08:33] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[14:09:16] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[14:09:36] *** Quits: entuland (~entuland@user/entuland) (Read error: Connection reset by peer)
[14:14:00] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 272 seconds)
[14:14:18] *** Quits: astiak (~astiak@ownage.biz) (Ping timeout: 245 seconds)
[14:14:18] *** Joins: aha (~aha@user/hmmm)
[14:14:43] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Read error: Connection reset by peer)
[14:15:14] <no_gravity> Somone in #math suggests this formula: nr_alive = step^2 + (step-1)^2
[14:15:32] *** Quits: waxfire238 (~waxfire@65.119.2.240) (Ping timeout: 245 seconds)
[14:15:32] *** Quits: dharrigan (~dharrigan@user/dharrigan) (Ping timeout: 245 seconds)
[14:15:33] *** Quits: dynos01 (~dynos01@li820-149.members.linode.com) (Ping timeout: 245 seconds)
[14:15:39] *** Quits: aha (~aha@user/hmmm) (Client Quit)
[14:15:51] *** Joins: marduk6 (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[14:15:57] *** Quits: mattil (~mattilinn@87-92-149-13.rev.dnainternet.fi) (Read error: Connection reset by peer)
[14:15:57] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 245 seconds)
[14:15:57] *** Quits: Auctus (~auctus@user/auctus) (Ping timeout: 245 seconds)
[14:15:57] *** Quits: RoyK (~roy@user/royk) (Ping timeout: 245 seconds)
[14:16:00] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[14:16:09] *** Joins: djhankb5 (~djhankb@208.113.164.68)
[14:16:12] *** Joins: RoyK (~roy@user/royk)
[14:16:13] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[14:16:21] *** Joins: dharrigan (~dharrigan@user/dharrigan)
[14:16:22] *** Quits: rpittau (sid346891@tinside.irccloud.com) (Ping timeout: 256 seconds)
[14:16:22] *** Quits: graingert (sid128301@tinside.irccloud.com) (Ping timeout: 256 seconds)
[14:16:22] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 245 seconds)
[14:16:22] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (Ping timeout: 245 seconds)
[14:16:22] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 245 seconds)
[14:16:22] *** Quits: dhch (~dhch@185.213.154.168) (Ping timeout: 245 seconds)
[14:16:27] *** Quits: stigz (sid371747@tinside.irccloud.com) (Ping timeout: 250 seconds)
[14:16:28] *** Quits: circuitbone (sid355934@user/circuitbone) (Ping timeout: 272 seconds)
[14:16:33] *** Joins: dhch (~dhch@185.213.154.168)
[14:16:35] *** Joins: jinsun (~quassel@user/jinsun)
[14:16:47] *** Quits: MD500_Pilot (~MD500_Pil@gatekeeper.rstechnical.com) (Ping timeout: 245 seconds)
[14:16:47] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Ping timeout: 245 seconds)
[14:16:47] *** Quits: fluter (~fluter@user/fluter) (Ping timeout: 245 seconds)
[14:16:47] *** Quits: Joel (~jjshoe@user/joel) (Ping timeout: 245 seconds)
[14:16:50] *** Quits: zegalch (~zegalch@178.128.75.133) (Read error: Connection reset by peer)
[14:16:51] *** Quits: cre (~x@p5b0fbc70.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[14:16:53] *** Quits: Pent (sid313808@id-313808.tooting.irccloud.com) (Ping timeout: 250 seconds)
[14:16:53] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 250 seconds)
[14:16:56] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 256 seconds)
[14:16:56] *** Quits: seds (sid492514@user/seds) (Ping timeout: 256 seconds)
[14:17:12] *** Quits: byanka (~byanka@91.244.10.3) (Ping timeout: 245 seconds)
[14:17:12] *** Joins: fluter (~fluter@user/fluter)
[14:17:13] *** Quits: mpmc (~mpmc@user/mpmc) (Ping timeout: 245 seconds)
[14:17:13] *** Quits: mawk (mawk@wireguard/contributor/mawk) (Ping timeout: 245 seconds)
[14:17:17] *** Quits: mustache_ride_ (sid451683@user/mustache-ride/x-6533344) (Ping timeout: 252 seconds)
[14:17:17] *** Quits: mweckbecker (~matthias@weckbecker.name) (Ping timeout: 252 seconds)
[14:17:19] *** Joins: derelict (~derelict@user/derelict)
[14:17:25] *** Joins: cre (~x@p5b0fbc70.dip0.t-ipconnect.de)
[14:17:29] *** Joins: syllin7 (~syllin@user/syllin)
[14:17:30] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 256 seconds)
[14:17:30] *** Quits: kiska (~kiska@user/kiska) (Ping timeout: 256 seconds)
[14:17:30] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[14:17:30] *** Quits: dlam (~dlam@dlam.me) (Ping timeout: 256 seconds)
[14:17:37] *** Quits: mcglk (~mcglk@131.191.49.120) (Ping timeout: 245 seconds)
[14:17:37] *** Quits: djhankb (~djhankb@208.113.164.68) (Ping timeout: 245 seconds)
[14:17:37] *** Joins: rpittau (sid346891@id-346891.tinside.irccloud.com)
[14:17:38] *** djhankb5 is now known as djhankb
[14:17:41] *** Joins: jazzy2 (~jaziz@2600:380:8562:6b2:9c1f:23c2:2ca2:238b)
[14:17:45] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 250 seconds)
[14:17:45] *** marduk6 is now known as marduk
[14:17:52] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[14:17:54] *** Joins: kiska (~kiska@user/kiska)
[14:17:57] *** Joins: dynos01 (~dynos01@2600:3c01:e000:36a::8400)
[14:18:03] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[14:18:04] *** Quits: bastie-fastgrass (~brian@2a02:8071:b6d8:e500:2120:4a40:1260:b66f) (Ping timeout: 256 seconds)
[14:18:04] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 256 seconds)
[14:18:04] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[14:18:04] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Ping timeout: 256 seconds)
[14:18:13] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[14:18:22] *** Quits: MrNaz (sid133418@id-133418.highgate.irccloud.com) (Ping timeout: 272 seconds)
[14:18:22] *** Quits: Lvl4Sword (sid483043@user/lvl4sword) (Ping timeout: 272 seconds)
[14:18:22] *** Joins: Pent (sid313808@id-313808.tooting.irccloud.com)
[14:18:23] *** Quits: richrd (~wavi@thelounge/maintainer/wavi) (Ping timeout: 252 seconds)
[14:18:23] *** Quits: monchi (sid347418@id-347418.charlton.irccloud.com) (Ping timeout: 252 seconds)
[14:18:23] *** Quits: Repiphany (~Repiphany@user/repiphany) (Ping timeout: 252 seconds)
[14:18:27] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 245 seconds)
[14:18:27] *** Quits: simone (~nya@user/sx) (Ping timeout: 245 seconds)
[14:18:37] *** Quits: fury (uid193779@id-193779.brockwell.irccloud.com) (Ping timeout: 250 seconds)
[14:18:38] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 256 seconds)
[14:18:39] *** Joins: simone (~nya@user/sx)
[14:18:41] *** Joins: Repiphany_ (~Repiphany@user/repiphany)
[14:18:52] *** Quits: ThomasJ (~ThomasJ@user/thomasj) (Ping timeout: 245 seconds)
[14:18:56] *** Quits: cmagina (sid286142@user/cmagina) (Ping timeout: 252 seconds)
[14:19:00] *** Quits: josh_h (sid301834@id-301834.brockwell.irccloud.com) (Ping timeout: 272 seconds)
[14:19:00] *** Joins: r0bby (r0bby@user/r0bby)
[14:19:10] *** Joins: stigz (sid371747@id-371747.tinside.irccloud.com)
[14:19:12] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 256 seconds)
[14:19:17] <no_gravity> I manually verified it up to step 3 now. I am a believer :)
[14:19:17] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::f245) (Ping timeout: 245 seconds)
[14:19:27] *** Joins: monchi (sid347418@id-347418.charlton.irccloud.com)
[14:19:29] *** Quits: ihristov (~ihristov@85.187.46.226) (Ping timeout: 250 seconds)
[14:19:29] *** Quits: dskull (~dskull@user/dskull) (Ping timeout: 250 seconds)
[14:19:29] *** Joins: dskullz (~dskull@user/dskull)
[14:19:29] *** Quits: energizer (~energizer@user/energizer) (Ping timeout: 252 seconds)
[14:19:42] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Ping timeout: 245 seconds)
[14:19:46] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 256 seconds)
[14:19:46] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Ping timeout: 256 seconds)
[14:19:47] *** Joins: fury (uid193779@id-193779.brockwell.irccloud.com)
[14:19:50] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[14:19:52] *** Joins: marienz__ (~marienz@libera/staff/marienz)
[14:19:55] *** Quits: braxas (sid508886@id-508886.tooting.irccloud.com) (Ping timeout: 250 seconds)
[14:19:57] *** Joins: mpmc (~mpmc@user/mpmc)
[14:20:02] *** Quits: nwe (~nwe@sigwait.se) (Ping timeout: 252 seconds)
[14:20:07] *** Quits: daddy (~ryan@hashbang/bdfl) (Ping timeout: 245 seconds)
[14:20:16] *** Quits: syllin (~syllin@user/syllin) (Ping timeout: 272 seconds)
[14:20:16] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (Ping timeout: 272 seconds)
[14:20:16] *** Quits: hvtuananh (~hvtuananh@user/hvtuananh) (Ping timeout: 272 seconds)
[14:20:16] *** syllin7 is now known as syllin
[14:20:20] *** Quits: urth (~urth@geertswei.nl) (Ping timeout: 256 seconds)
[14:20:20] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 256 seconds)
[14:20:21] *** Quits: ormiret (sid314108@id-314108.tooting.irccloud.com) (Ping timeout: 250 seconds)
[14:20:32] *** Joins: defn (~n0b0dy@user/defn)
[14:20:32] *** Quits: Jefren (~Jefren@208.104.190.55) (Ping timeout: 245 seconds)
[14:20:43] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[14:20:44] *** Joins: cmagina (sid286142@user/cmagina)
[14:20:44] *** Joins: OPK (~OPK@user/opk)
[14:20:54] *** Quits: enteral_ (~enteral@discovery.whatbox.ca) (Ping timeout: 272 seconds)
[14:20:54] *** Quits: jazzy (~jaziz@2600:380:8562:6b2:9c1f:23c2:2ca2:238b) (Ping timeout: 256 seconds)
[14:20:57] *** Joins: digilink (~digilink@user/digilink)
[14:20:57] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 245 seconds)
[14:20:58] *** Quits: kenoba (~kenoba@user/kenoba) (Ping timeout: 245 seconds)
[14:21:03] *** dskullz is now known as dskull
[14:21:05] *** Joins: ormiret (sid314108@id-314108.tooting.irccloud.com)
[14:21:07] *** Joins: bjs (sid190364@user/bjs)
[14:21:08] *** Quits: rubin55_ (sid175221@id-175221.stonehaven.irccloud.com) (Ping timeout: 252 seconds)
[14:21:13] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 250 seconds)
[14:21:14] *** Joins: MrNaz (sid133418@id-133418.highgate.irccloud.com)
[14:21:22] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (Ping timeout: 245 seconds)
[14:21:28] *** Quits: dulanic (~dulanic@47.187.144.163) (Ping timeout: 256 seconds)
[14:21:28] *** Quits: AhmedAmerican (sid470527@id-470527.charlton.irccloud.com) (Ping timeout: 256 seconds)
[14:21:32] *** Quits: michele (~eraser@user/michele) (Ping timeout: 272 seconds)
[14:21:32] *** Quits: Knyght (sid365271@id-365271.brockwell.irccloud.com) (Ping timeout: 272 seconds)
[14:21:39] *** Quits: syntaxman (~wade@li227-215.members.linode.com) (Ping timeout: 250 seconds)
[14:21:41] *** Quits: Bardon (~Bardon@user/Bardon) (Ping timeout: 252 seconds)
[14:22:02] *** Quits: nickodd (~nickodd@user/nickodd) (Ping timeout: 256 seconds)
[14:22:02] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 256 seconds)
[14:22:05] *** Quits: PotatoGim (sid99505@id-99505.tooting.irccloud.com) (Ping timeout: 250 seconds)
[14:22:14] *** Quits: ruru4143 (~quassel@vmi444754.contaboserver.net) (Ping timeout: 252 seconds)
[14:22:21] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::f245)
[14:22:23] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[14:22:36] *** Quits: zware (~zach@python/psf/zware) (Ping timeout: 256 seconds)
[14:22:36] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Ping timeout: 256 seconds)
[14:22:37] *** Quits: wedwards (~wedwards@rtr0.17.31.bogert.cyberfusion.cloud) (Ping timeout: 245 seconds)
[14:22:38] *** Quits: thm (~thomas@fedora/thm) (Ping timeout: 245 seconds)
[14:22:47] *** Quits: d3x (michal@bielaw.ski) (Ping timeout: 252 seconds)
[14:22:48] *** Quits: jposer (sid132110@id-132110.highgate.irccloud.com) (Ping timeout: 272 seconds)
[14:23:02] *** Joins: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net)
[14:23:10] *** Quits: pyfisch (~pyfisch@user/pyfisch) (Ping timeout: 256 seconds)
[14:23:10] *** Quits: d3sync (~d3sync@194.219.251.225) (Ping timeout: 256 seconds)
[14:23:27] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 245 seconds)
[14:23:44] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (Read error: Connection reset by peer)
[14:23:44] *** Joins: mcglk (~mcglk@131.191.49.120)
[14:23:51] *** Quits: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 276 seconds)
[14:24:17] *** Quits: enrico (~enrico@debian/enrico) (Ping timeout: 245 seconds)
[14:24:18] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 256 seconds)
[14:24:33] *** Parts: Akera4 (~Guest38@149.255.222.33) ()
[14:24:42] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Ping timeout: 245 seconds)
[14:24:52] *** Quits: esaym153 (~esaym153@net153.net) (Ping timeout: 256 seconds)
[14:24:59] *** Quits: evilroot (~evilroot@user/evilroot) (Ping timeout: 252 seconds)
[14:25:10] *** Quits: p-i- (~Ohmu@mx-ll-171.6.227-32.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[14:25:32] *** Quits: tkazi (~tkazi@user/tkazi) (Ping timeout: 252 seconds)
[14:25:52] *** sharperguy__ is now known as sharperguy
[14:25:53] *** Joins: p-i- (~Ohmu@2403:6200:8870:a614:c006:e298:6d9a:cbd6)
[14:25:58] *** Quits: MrC (Ben@mrbenc.net) (Ping timeout: 272 seconds)
[14:26:00] *** Quits: rapha (~jrs@user/rapha) (Ping timeout: 256 seconds)
[14:26:21] *** Quits: regedit (~regedit@ool-457874e2.dyn.optonline.net) (Quit: Client closed)
[14:26:45] <rendar> `class A: def __init__(self, parent:A=None): ...` this gives me an error, because i can't use `A` as an annotation of itself
[14:26:49] <rendar> how to fix?
[14:27:08] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Ping timeout: 256 seconds)
[14:27:08] *** Quits: etienneme (~etienne@user/etienneme) (Ping timeout: 256 seconds)
[14:27:11] *** Quits: Gozrad (~Gozrad@46.232.210.50) (Ping timeout: 252 seconds)
[14:27:21] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[14:27:42] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::f245) (Ping timeout: 256 seconds)
[14:28:17] *** Quits: SeeM (~SeeM@153.ip-54-38-53.eu) (Ping timeout: 252 seconds)
[14:28:50] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 256 seconds)
[14:29:26] <rendar> ok, from __future__ import annotations
[14:30:09] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[14:30:24] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[14:30:24] *** Quits: foo (~foo@user/foo/x-8763512) (Ping timeout: 272 seconds)
[14:30:27] <u4t> what was giving you the error?
[14:30:29] *** Quits: akspecs (~akspecs@165.227.127.54) (Ping timeout: 252 seconds)
[14:30:32] *** Quits: agrest (~user@almyra.daemonized.org) (Ping timeout: 256 seconds)
[14:30:32] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Ping timeout: 245 seconds)
[14:30:33] *** Quits: m1dnight (~christoph@188.ip-51-91-158.eu) (Ping timeout: 245 seconds)
[14:31:00] *** Joins: m1dnight (~christoph@188.ip-51-91-158.eu)
[14:31:03] *** Joins: agrest (~user@almyra.daemonized.org)
[14:31:07] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[14:31:11] *** Joins: Knyght (sid365271@id-365271.brockwell.irccloud.com)
[14:31:17] *** Joins: sharperguy_ (~sharpergu@2001:16b8:5c7a:e00:f2b3:e786:178:e84e)
[14:31:21] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[14:31:24] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[14:31:24] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Client Quit)
[14:31:29] *** Joins: enteral (~enteral@discovery.whatbox.ca)
[14:31:35] *** Quits: luna-is-here (~quassel@ip-95-223-58-220.hsi16.unitymediagroup.de) (Ping timeout: 252 seconds)
[14:31:35] *** Quits: tazle (tazle@kapsi.fi) (Ping timeout: 252 seconds)
[14:31:41] *** Joins: jposer (sid132110@id-132110.highgate.irccloud.com)
[14:31:47] *** Joins: zware (~zach@python/psf/zware)
[14:31:47] *** Quits: rgp (~rgp@user/rgp) (Ping timeout: 245 seconds)
[14:31:52] *** Joins: tkazi (~tkazi@user/tkazi)
[14:31:52] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[14:31:53] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[14:32:13] *** Quits: lastmikoi (~lastmikoi@vm-01.lastmikoi.net) (Ping timeout: 245 seconds)
[14:32:16] *** Joins: circuitbone (sid355934@user/circuitbone)
[14:32:30] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 258 seconds)
[14:32:32] *** Joins: AhmedAmerican (sid470527@id-470527.charlton.irccloud.com)
[14:32:37] *** Quits: tofran (~tofran@37.189.158.134) (Ping timeout: 245 seconds)
[14:33:01] *** Joins: Jefren (~Jefren@208.104.190.55)
[14:33:27] *** Quits: Hackerpcs (~user@user/hackerpcs) (Ping timeout: 245 seconds)
[14:33:38] *** Joins: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy)
[14:33:39] *** Quits: sharperguy (~sharpergu@2001:1438:4010:3101:10a::3133) (Ping timeout: 258 seconds)
[14:33:42] *** Joins: Joel (~jjshoe@user/joel)
[14:33:52] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Ping timeout: 245 seconds)
[14:33:53] *** Joins: seds (sid492514@user/seds)
[14:33:53] *** Joins: MrC (Ben@mrbenc.net)
[14:33:53] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[14:33:59] *** Joins: tofran (~tofran@37.189.158.134)
[14:34:17] *** Quits: Koffa (jkohvakk@user/koffa) (Ping timeout: 245 seconds)
[14:34:19] *** Joins: daddy (~ryan@hashbang/bdfl)
[14:34:22] *** Joins: michele (~eraser@user/michele)
[14:34:26] *** Joins: SeeM (~SeeM@153.ip-54-38-53.eu)
[14:34:27] *** Joins: braxas (sid508886@id-508886.tooting.irccloud.com)
[14:34:42] *** Quits: cation (cation@user/cation) (Ping timeout: 245 seconds)
[14:34:42] *** Quits: kujo2 (~kujo@188.166.12.52) (Ping timeout: 245 seconds)
[14:34:42] *** Quits: falx (~falx@user/falx) (Ping timeout: 245 seconds)
[14:34:53] *** Quits: MrC (Ben@mrbenc.net) (Excess Flood)
[14:34:59] *** Joins: zegalch (~zegalch@178.128.75.133)
[14:35:04] *** Quits: obiwahn (~heini@obiwahn.org) (Ping timeout: 256 seconds)
[14:35:06] *** Joins: kenoba (~kenoba@user/kenoba)
[14:35:07] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[14:35:09] *** Joins: MrC (Ben@mrbenc.net)
[14:35:10] *** Joins: rgp (~rgp@user/rgp)
[14:35:12] *** Joins: Praise (~Fat@user/praise)
[14:35:21] *** Quits: Hax0r (~Hax0r@2001:16a2:c054:571b:540d:f930:6f33:2) (Remote host closed the connection)
[14:35:33] *** Quits: evilissimo (~vfeenstr@redhat/evilissimo) (Ping timeout: 245 seconds)
[14:35:34] *** Joins: cation (cation@user/cation)
[14:35:40] *** Joins: Koffa (jkohvakk@user/koffa)
[14:35:46] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[14:35:47] *** Joins: etienneme (~etienne@user/etienneme)
[14:35:56] *** Joins: dlam (~dlam@dlam.me)
[14:35:59] *** Joins: esaym153 (~esaym153@net153.net)
[14:36:08] *** Joins: josh_h (sid301834@id-301834.brockwell.irccloud.com)
[14:36:46] *** Joins: Bardon (~Bardon@user/Bardon)
[14:36:59] *** Joins: tazle (~tazle@kapsi.fi)
[14:37:12] *** Quits: deepy (deepy@user/deepy) (Ping timeout: 245 seconds)
[14:37:21] *** Joins: Lvl4Sword (sid483043@user/lvl4sword)
[14:37:40] *** Joins: Hackerpcs (~user@user/hackerpcs)
[14:37:42] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[14:37:52] *** Joins: falx (~falx@user/falx)
[14:38:02] *** Quits: jposer (sid132110@id-132110.highgate.irccloud.com) (Ping timeout: 245 seconds)
[14:38:11] *** Joins: kujo2 (~kujo@188.166.12.52)
[14:38:27] *** Joins: Vonter (~Vonter@user/vonter)
[14:38:28] *** Quits: hsv (~unknown@user/hsv) (Ping timeout: 256 seconds)
[14:38:30] *** Joins: jposer (sid132110@id-132110.highgate.irccloud.com)
[14:38:40] *** Joins: deepy (deepy@user/deepy)
[14:38:43] *** Quits: agrest (~user@almyra.daemonized.org) (Quit: agrest)
[14:38:45] *** Joins: forgx (~agucova@vps-43c36ef5.vps.ovh.ca)
[14:38:51] *** Joins: m4v (~znc@ubuntu/member/m4v)
[14:38:53] *** Quits: AM (~techman@87-94-111-135.bb.dnainternet.fi) (Ping timeout: 245 seconds)
[14:39:00] *** Joins: foo (~foo@user/foo/x-8763512)
[14:39:36] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 256 seconds)
[14:39:54] <sazawal> Hi people. What is a QueueFeederThread? When my python application has finished processing all the threads, I queried a list of still running threads and I got a couple of QueueFeederThread as thread names. Not sure what are these threads which are still running, and raising an exception when I end my code.
[14:39:57] *** Joins: waxfire238 (~waxfire@65.119.2.240)
[14:39:58] *** Joins: Praise (~Fat@user/praise)
[14:40:06] *** Joins: obiwahn (~heini@obiwahn.org)
[14:40:10] *** Quits: SeeM (~SeeM@153.ip-54-38-53.eu) (Ping timeout: 256 seconds)
[14:40:21] *** Joins: d3sync (~d3sync@194.219.251.225)
[14:40:23] *** Quits: dlam (~dlam@dlam.me) (Ping timeout: 252 seconds)
[14:40:32] *** Quits: j00n (~mario@user/j00n) (Ping timeout: 245 seconds)
[14:40:43] *** Quits: d3sync (~d3sync@194.219.251.225) (Read error: Connection reset by peer)
[14:40:45] *** Joins: dlam (~dlam@dlam.me)
[14:41:06] *** Joins: richrd (~wavi@thelounge/maintainer/wavi)
[14:41:21] *** Joins: AM (~techman@87-94-111-135.bb.dnainternet.fi)
[14:41:26] *** Joins: d3sync (~d3sync@194.219.251.225)
[14:41:52] *** Quits: moto (~moto@user/moto) (Ping timeout: 256 seconds)
[14:42:02] *** Joins: moto (~moto@user/moto)
[14:42:19] *** Joins: agrest (~user@almyra.daemonized.org)
[14:42:37] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Ping timeout: 245 seconds)
[14:42:37] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 245 seconds)
[14:42:37] *** Quits: Alexer (~alexer@alexer.net) (Ping timeout: 245 seconds)
[14:42:50] *** Joins: Alexer (~alexer@alexer.net)
[14:42:53] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[14:43:01] *** Quits: shabius (~shabius@2a0e:1c80:2:1022::1008) (Remote host closed the connection)
[14:43:02] *** Quits: josh_h (sid301834@id-301834.brockwell.irccloud.com) (Ping timeout: 245 seconds)
[14:43:09] *** Joins: DaNeenjah (~jake@21.sub-72-106-110.myvzw.com)
[14:43:47] *** Joins: hsv (~unknown@user/hsv)
[14:43:51] *** Joins: shabius (~shabius@2a0e:1c80:2:1022::1008)
[14:44:01] *** Joins: Hax0r (~Hax0r@2001:16a2:c054:571b:540d:f930:6f33:2)
[14:44:06] *** Joins: lastmikoi (~lastmikoi@vm-01.lastmikoi.net)
[14:44:20] *** Joins: polyrob (~rob@user/polyrob)
[14:44:28] *** Joins: akspecs (~akspecs@165.227.127.54)
[14:44:48] *** Quits: shabius (~shabius@2a0e:1c80:2:1022::1008) (Max SendQ exceeded)
[14:45:01] *** Joins: ThomasJ (~ThomasJ@user/thomasj)
[14:45:02] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[14:45:03] *** Joins: urth (~urth@geertswei.nl)
[14:45:11] *** Joins: josh_h (sid301834@id-301834.brockwell.irccloud.com)
[14:45:43] *** Joins: shabius (~shabius@2a0e:1c80:2:1022::1008)
[14:46:26] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 252 seconds)
[14:46:33] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[14:46:47] *** Quits: janemba (~janemba@94.204.254.193) (Ping timeout: 245 seconds)
[14:47:13] *** Joins: no_maam (~chat@gauss.datenzone.de)
[14:48:14] *** Joins: Adoi (~Adoi@user/adoi)
[14:48:15] *** Joins: janemba (~janemba@94.204.254.193)
[14:48:23] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[14:48:25] *** Joins: sharperguy__ (~sharpergu@2001:1438:4010:3101:10a::3133)
[14:48:37] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[14:49:09] *** Joins: energizer (~energizer@user/energizer)
[14:49:33] *** Joins: enrico (~enrico@debian/enrico)
[14:50:32] *** Quits: esaym153 (~esaym153@net153.net) (Ping timeout: 245 seconds)
[14:50:39] *** Quits: Deknos (~someone@user/menace) (Read error: Connection reset by peer)
[14:50:57] *** Quits: shabius (~shabius@2a0e:1c80:2:1022::1008) (Ping timeout: 245 seconds)
[14:50:57] *** Quits: sharperguy_ (~sharpergu@2001:16b8:5c7a:e00:f2b3:e786:178:e84e) (Ping timeout: 245 seconds)
[14:51:22] *** Quits: Knyght (sid365271@id-365271.brockwell.irccloud.com) (Ping timeout: 245 seconds)
[14:51:25] *** Joins: fearnothing (~fearnothi@82-68-82-102.dsl.in-addr.zen.co.uk)
[14:51:27] *** Joins: esaym153 (~esaym153@net153.net)
[14:52:06] *** Joins: Knyght (sid365271@id-365271.brockwell.irccloud.com)
[14:53:01] *** Joins: thm (~thomas@fedora/thm)
[14:53:02] *** Quits: SallyAhaj (sallyahaj@user/sallyahaj) (Ping timeout: 245 seconds)
[14:53:26] *** Joins: SallyAhaj (sallyahaj@user/sallyahaj)
[14:53:36] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[14:53:41] *** Joins: d3x (michal@bielaw.ski)
[14:54:52] *** Joins: mweckbecker (~matthias@weckbecker.name)
[14:54:52] *** Joins: mei (~mei@user/mei)
[14:55:02] *** Joins: syntaxman (~wade@li227-215.members.linode.com)
[14:56:12] *** Joins: iflema (~ian@user/iflema)
[14:57:17] *** Joins: j00n (~mario@user/j00n)
[14:58:06] *** Joins: SeeM (~SeeM@153.ip-54-38-53.eu)
[14:58:30] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:58:32] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[14:58:55] *** Joins: plastico (~plastico@neomutt/plastico)
[15:03:46] <bjs> sazawal: it's probably the thread inside the multiprocessing.Queue
[15:05:01] <sazawal> bjs, Are there threads inside Queue? I did start a process, but that finished along with all the threads in that process.
[15:05:14] <bjs> sazawal: yes, there is a thread
[15:05:20] <bjs> I'm guessing that's the thread because well, it says Queue in the name
[15:06:06] *** Quits: emika (~emika@83.136.182.85) (Ping timeout: 276 seconds)
[15:06:51] *** Joins: emika (~emika@83.136.182.91)
[15:06:56] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:08:35] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[15:12:28] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[15:12:30] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[15:14:11] *** Joins: mickey8 (~user@user/mickey)
[15:15:18] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[15:15:33] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[15:15:34] *** Joins: Snyp (~rksht@49.207.202.63)
[15:22:24] *** Quits: wereii (~wereii@2a03:3b40:fe:4f::1) (Quit: ZNC - https://znc.in)
[15:22:25] *** Joins: Auron (~Auron956@user/auron)
[15:23:01] *** Joins: wereii (~wereii@37.205.14.89)
[15:23:27] *** Joins: mattil (~mattilinn@87-92-149-13.rev.dnainternet.fi)
[15:25:33] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:26:23] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:27:39] *** Joins: aha (~aha@user/hmmm)
[15:28:51] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[15:30:02] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[15:31:13] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Ping timeout: 244 seconds)
[15:32:01] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:32:16] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[15:32:37] *** Joins: mickey8 (~user@user/mickey)
[15:34:12] <sazawal> bjs, How do I fix it? I think these threads are stopping my python app to end. Can I show you the exception when I press Ctrl-C?
[15:36:53] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:36:55] <bjs> sazawal: well if you join and close everything then it should all be... joined and closed
[15:37:24] *** Quits: hendry (~hendry@210.23.22.2) (Quit: brb)
[15:37:56] *** Joins: asa22 (~asa22@84.125.126.210.dyn.user.ono.com)
[15:39:05] <sazawal> bjs, Another question I had is how do I join the threads and process started from pyqt, I don't want to freeze the app. But then as the current development goes, all the threads and process I started are ended, checked with is_alive. At the end only MainThread and 3 QueueFeederThread remains
[15:39:42] *** Joins: hendry (~hendry@210.23.22.2)
[15:39:52] <bjs> sazawal: well I mean, joining means freezing the current thread
[15:40:00] <bjs> so I'm not sure what you're asking
[15:40:55] <sazawal> bjs, For example see this simple pyqt app, https://bpa.st/MZWA .I started a thread with a push button. Where am I supposed to put the join statement now?
[15:41:21] <bjs> sazawal: well, when you want to clean up and wait for the threads to finish
[15:41:54] <sazawal> bjs, That must be when I close the gui
[15:42:01] *** Joins: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de)
[15:42:13] <sazawal> I guess then if I reimplement closeEvent, I can put the join statements there
[15:42:15] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 250 seconds)
[15:43:57] <bjs> sazawal: sounds like you answered your own question then
[15:44:57] <sazawal> bjs, Hmm didn't think of that before. I hope it works. I will come back to you
[15:45:12] *** Quits: ge0rgios (~georgios@user/georgios) (Ping timeout: 272 seconds)
[15:45:55] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973) (Quit: Leaving)
[15:46:13] <rendar> try: ... except SyntaxError as err: raise MyErrorClass(...) .. <- and now i want to raise SyntaxError() also, there was a keyword to do this, but i can't remember, any help?
[15:46:28] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[15:46:47] <bjs> rendar: what do you mean "also" ?
[15:46:53] <nedbat> rendar: catching SyntaxError is really unusual. what's causing the syntax error?
[15:47:19] <rendar> nedbat: I am! I'm writing a simple lexer
[15:47:41] <nedbat> rendar: i would create a new exception to rais
[15:47:41] <bjs> rendar: I would advise against re-using Python's own SyntaxError error to mean a SyntaxError in your lexer
[15:47:50] <bjs> (also maybe you meant parser)
[15:47:55] <rendar> bjs: uhm, well, there was a way to raise an exception but also saying: look, this exception was raised due another exception has been generated before
[15:48:07] <bjs> rendar: you already did that
[15:48:10] <bjs> by raising inside the except
[15:48:11] <hexnewbie> rendar: It happens by default in my code
[15:48:25] <rendar> ok, ok
[15:48:27] <nedbat> rendar: `except SyntaxError as ex:  raise MyException from ex`
[15:48:37] <rendar> from ex!!!
[15:48:38] <rendar> that's it
[15:48:52] <rendar> this was the keyword i couldn't remember
[15:48:56] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[15:49:16] *** Quits: MetalSutton (~MetalSutt@101.100.153.131) (Quit: Leaving)
[15:49:22] *** Joins: Vonter (~Vonter@user/vonter)
[15:49:34] <rendar> ok, btw SyntaxError should be used only for python code?
[15:50:13] <bjs> rendar: "should" is a strong word, but it's confusing to re-use it in that way I think
[15:50:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:50:47] <rendar> ok
[15:51:36] <gloomy> Hi, is there a way to get a random item from a very large dict without  resorting to dict.values() (or dict.keys())?
[15:51:51] <bjs> gloomy: why "resorting" to dict.values ?
[15:52:04] <u4t> random.choice(dict.items())
[15:52:06] *** Joins: ge0rgios (~georgios@user/georgios)
[15:52:07] <rendar> what about this? https://bpa.st/TFQA
[15:52:18] <caveman> how to improve this for loop?  https://github.com/Al-Caveman/nsapass/blob/master/nsa#L327
[15:52:20] <gloomy> because it takes too much time/memory...
[15:52:29] <bjs> gloomy: dict.values() doesn't take any time or memory
[15:53:11] <bjs> that said, dict.values() isn't random-access so it's perhaps not the most useful thing to use
[15:53:54] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[15:54:01] <gloomy> bjs: dict.values is an iterator, so
[15:54:12] <gloomy> *so I need to convert it to a list to be able to get a random element
[15:54:21] <hexnewbie> values() can get you an arbitrary item in O(1) time and memory, a random one will be O(n) time at best, but O(1) memory is quite achievable (random.shuffle() will obviously use O(n) memory and more than O(n) CPU)
[15:54:39] <bjs> hexnewbie: dict.values() does not have random-access in it
[15:55:00] <hexnewbie> Which is why it will be O(n) time
[15:55:19] <bjs> hexnewbie: you said "arbitrary"
[15:55:30] <bjs> maybe I misinterpreted what you were trying to say
[15:55:43] <u4t> d[random.choice(d)]
[15:55:46] <hexnewbie> If you just need an arbitrary (not random) one, the first item in the dict will do
[15:55:59] <bjs> u4t: that won't work, random.choice expects a sequence
[15:56:11] <u4t> worked for me
[15:56:13] <bjs> hexnewbie: the first isn't very arbitrary
[15:56:15] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:56:19] <bjs> u4t: ... did you use 0,1,2,3 etc as the keys ;)
[15:56:27] <u4t> maybe <_<
[15:56:49] <hexnewbie> which = randrange(len(d)); for i, val in enumerate(d.values()): if i == which: return value
[15:58:17] <nedbat> gloomy: can you tell us more  about the dict (what does it represent?) and why you need a random item? Maybe there's another way to solve it.
[15:58:40] <bjs> gloomy: this operation isn't really a common one for a dict,  there might be a more appropriate data structure (e.g. a set?)
[15:59:07] <hexnewbie> Albeit in real world scenarios, random.choice(list(d.values())) will probably be faster (don't trust without running timeit!)  and the extra memory will be negligible, compared to the dict's hash table and item storage
[15:59:31] <bjs> hexnewbie: I mean you'll basically get a second copy of the table if you do that
[15:59:43] <bjs> which for small things is ok, but for large ones probably isn't
[15:59:48] <lxer> gloomy,  list(mydict)[randint(0, len(mydict))]
[16:00:48] *** Quits: asa22 (~asa22@84.125.126.210.dyn.user.ono.com) (Quit: Client closed)
[16:00:52] <u4t> or maybe OrderedDict, so you don't have to generate a list :P
[16:01:25] <lxer> isnt orderdDict outdated?
[16:01:52] <u4t> i wouldn't have thought so
[16:01:53] <lxer> dicts are ordered now.
[16:02:01] <u4t> *for now
[16:02:08] <deniska> when compared to another ordered dict, it also checks the order
[16:02:14] <hexnewbie> lxer: They preserve order, but have different semantics
[16:02:20] <u4t> OrderedDict is explicitly a sequence
[16:02:26] <bjs> u4t: no it's not?
[16:02:35] <u4t> ssh
[16:02:37] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 245 seconds)
[16:02:39] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Ping timeout: 276 seconds)
[16:02:41] <bjs> well it's not a Sequence, e.g. it does not have random access
[16:03:03] <bjs> now I still don't know why,  the key/value/items views for odicts have no reason to not support random access I suppose they just dont
[16:03:05] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[16:03:20] <gloomy> nedbat: It's a vocabulary mapping IDs to word embeddings and I need to get random words out of the vocabulary. Was just curious if there was a straightforward way to get  that from the vocuabulary dict, but indeed I'll need to change datastructure first ;-)
[16:03:49] *** Joins: y1n (~y1n@84-115-64-82.wifi.dynamic.surfer.at)
[16:04:33] *** Joins: DesCaFeinado (~CaFeINA@2001:8a0:ddef:9e00:4127:b042:79f6:deb6)
[16:04:40] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[16:06:17] <u4t> x = randrange(len(d)) ; rndval = [v for i, v enumarate(d.values()) if i == x][0]
[16:06:26] <hexnewbie> bjs: Why the whole table? I'd expect something in the ballpark of 2 * len(dict) * ptr_size, where the hash table would be somewhat larger, maybe.
[16:06:43] <hexnewbie> Copying .values() to a list seems faster and not that big: https://bpa.st/PUNA
[16:06:53] <bjs> hexnewbie: I mean what you describe is roughly the size of the hashtable in the first place
[16:07:57] <u4t> that one won't chew up memory
[16:08:04] <u4t> because generators
[16:09:47] <gloomy> u4t: that is probably what hexnewbie had in mind with his O(1) memory - I would really rather have O(1) time though, I need this operation a lot ;-)
[16:10:53] <hexnewbie> gloomy: O(1) time is impossible for a dict (unless you have a list of keys maintained independently, which may be more expensive in the long run), as you need to iterate over the dict to get nth element. If the element needs to be really random, that is
[16:11:40] <u4t> ^
[16:11:58] <hexnewbie> If you don't delete keys often, keeping a list of keys will help - but the extra O(n) memory will be constantly taken, not just for the operation
[16:12:18] <gloomy> Yup, I know. I will store it in a different format. Thanks all for the replies :-)
[16:12:21] <u4t> use set() instead of list() though
[16:12:40] <hexnewbie> u4t: set() will still be unhelpful in getting a random element in O(1) time
[16:13:42] <u4t> so will list() (:
[16:14:06] <bjs> list has random-access which is good for getting a random element in O(1) time
[16:14:14] <bjs> sets do have pop() though which is often good enough
[16:14:26] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[16:14:52] <u4t> oh right, cpython implementation
[16:14:57] <bjs> u4t: huh?
[16:15:04] <bjs> which part is implementation detail?
[16:15:23] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:15:23] <u4t> the lists are arrays part
[16:15:37] *** Joins: Naan (~naan@user/naan)
[16:15:38] <bjs> u4t: that is certainly not an implementation detail; all implementations will have O(1) random-access on lists
[16:15:50] *** Joins: nickodd (~nickodd@user/nickodd)
[16:16:47] *** Joins: jaggz (~jaggz@user/jaggz)
[16:17:19] *** Quits: Snyp (~rksht@49.207.202.63) (Quit: WeeChat 3.2)
[16:17:28] <jaggz> anyone know why sounddevice is giving me "ALSA lib pcm.c:8424:(snd_pcm_recover) underrun occurred" when I play a 16000 long (1s) sample with sounddevice.play(numpy_array, 16000) ?
[16:17:51] <jaggz> hmm..  it's shape (16000, 1)
[16:19:26] <jaggz> it repeats the error from 1 to 10 times each time I play, sort of randomly even for the same sample
[16:19:48] *** Quits: magla (~gelignite@55d45882.access.ecotel.net) (Quit: Stay safe!)
[16:19:54] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[16:20:12] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 276 seconds)
[16:24:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[16:28:44] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:32:36] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:33:45] *** Joins: dez (uid92154@user/dez)
[16:35:53] *** Joins: entuland (~entuland@user/entuland)
[16:35:58] <jaggz> I get it with pyaudio also (except pyaudio plays an awfully noisy thing.. not sure why yet)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:12] <jaggz> stream=poo.open(format=poo.get_format_from_width(2), channels=1, rate=SAMPLING_RATE, output=True)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:35] <jaggz> # where poo = pyaudio.PyAudio()
[16:37:11] <jaggz> and stream.write(samp) also gives me that same underrun error.
[16:37:33] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[16:37:46] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[16:38:25] *** Joins: Adoi (~Adoi@user/adoi)
[16:39:21] *** Joins: metal_egg (~metal0egg@pool-72-94-145-43.phlapa.fios.verizon.net)
[16:39:40] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Ping timeout: 272 seconds)
[16:39:50] *** Joins: CoolerX (~CoolerX@user/coolerx)
[16:40:40] *** Quits: CoolerX (~CoolerX@user/coolerx) (Client Quit)
[16:40:42] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[16:42:21] <jaggz> stream.write(samp.astype(np.float16).tostring())  # also noisy.. gaw
[16:42:37] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 245 seconds)
[16:42:39] <jaggz> anyway, sounddevice isn't noisy and it gets overruns
[16:42:43] <jaggz> too
[16:44:58] <jaggz> (my original files are 16bit 1-channel 16000
[16:47:36] *** Joins: cheater (~Username@user/cheater)
[16:48:24] *** Quits: pyfisch (~pyfisch@user/pyfisch) (Quit: Ping timeout (120 seconds))
[16:48:44] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[16:49:33] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[16:49:50] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:49:51] *** Quits: y1n (~y1n@84-115-64-82.wifi.dynamic.surfer.at) (Ping timeout: 250 seconds)
[16:49:52] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:49:55] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Client Quit)
[16:50:13] *** Joins: Deknos (~someone@user/menace)
[16:50:14] *** Joins: hafat (~hafat@95.70.167.173)
[16:54:17] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 245 seconds)
[17:00:30] *** Joins: netsan (~netsan@user/netsan)
[17:01:19] *** Joins: greedom (~greedom@2001:16b8:3242:3b00:a8ca:7197:5556:5289)
[17:02:32] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:02:44] *** Joins: y1n (~y1n@84-115-64-82.wifi.dynamic.surfer.at)
[17:04:19] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[17:08:36] *** Quits: Hax0r (~Hax0r@2001:16a2:c054:571b:540d:f930:6f33:2) (Quit: Leaving)
[17:13:10] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[17:13:53] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[17:17:52] *** Joins: Vonter (~Vonter@user/vonter)
[17:18:25] *** Quits: hafat (~hafat@95.70.167.173) (Quit: Leaving)
[17:18:29] *** Joins: CoolerX (~CoolerX@user/coolerx)
[17:18:53] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 250 seconds)
[17:21:22] *** Quits: ge0rgios (~georgios@user/georgios) (Ping timeout: 245 seconds)
[17:23:29] <sazawal> bjs, I added the join statements in closeEvent but didn't work. I mean the pyqt app closes but the python code doesn't end. I guess all the threads and processes already ended otherwise the ui must freeze before closing. I checked the currently running threads after the join statements and I still get MainThread and 3 QueueFeederThread
[17:27:00] *** Joins: cdown (~cdown@89.32.122.5)
[17:29:58] *** jazzy2 is now known as jazzy
[17:30:18] *** Quits: nrg (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[17:30:38] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Read error: Connection reset by peer)
[17:31:13] *** Joins: diamondbond (~diamondbo@175.157.62.11)
[17:33:29] *** Joins: Roey (~Roey@user/Roey)
[17:34:34] *** Quits: darksun (~darksun@user/darksun) (Read error: Connection reset by peer)
[17:35:15] *** Joins: darksun (~darksun@user/darksun)
[17:35:29] *** Joins: nrg (~NRG@user/nrg)
[17:39:04] *** Joins: capitanocrunch (~capitanoc@user/capitanocrunch)
[17:39:06] *** Joins: pystardust (~pystardus@117.96.229.96)
[17:39:39] <bjs> sazawal: ok
[17:39:47] <bjs> Given you didn't show any code I'm not sure what you are asking
[17:40:19] *** Joins: Lukeyface (~Luke@2.218.182.67)
[17:40:31] *** Quits: pystardust (~pystardus@117.96.229.96) (Quit: leaving)
[17:43:35] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[17:43:52] *** Joins: resmo (~resmo@2a00:d420:9:8a00:85ee:5c6b:901e:b396)
[17:46:37] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Remote host closed the connection)
[17:47:51] *** Joins: Atque (~Atque@user/atque)
[17:49:02] *** Joins: pystardust (~pystardus@117.96.229.96)
[17:49:07] *** Parts: pystardust (~pystardus@117.96.229.96) (python)
[17:49:08] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[17:50:36] *** Quits: y1n (~y1n@84-115-64-82.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[17:53:16] *** Parts: Lukeyface (~Luke@2.218.182.67) ()
[17:54:12] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:56:44] <Yhg1s> use a pastebin.
[17:56:46] <Yhg1s> eh,
[17:57:50] *** Quits: greedom (~greedom@2001:16b8:3242:3b00:a8ca:7197:5556:5289) (Remote host closed the connection)
[17:58:00] *** Quits: debayer (~debayer@2603-8000-cf00-0010-4dc2-efc1-b952-84db.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[17:58:42] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[17:58:59] *** Joins: greedom (~greedom@2001:16b8:3242:3b00:a8ca:7197:5556:5289)
[17:59:14] *** Joins: rsx (~dummy@ppp-188-174-157-141.dynamic.mnet-online.de)
[17:59:37] *** Joins: heco (~redrum@user/redrum88)
[18:00:22] *** Quits: mossman93 (~quassel@user/mossman93) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:00:25] *** Quits: heco (~redrum@user/redrum88) (Client Quit)
[18:00:53] *** Joins: heco (~redrum@user/redrum88)
[18:01:24] *** Joins: mossman93 (~quassel@user/mossman93)
[18:02:37] *** Quits: greedom (~greedom@2001:16b8:3242:3b00:a8ca:7197:5556:5289) (Remote host closed the connection)
[18:03:02] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 245 seconds)
[18:03:04] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:03:11] *** Joins: y1n (~y1n@84-115-64-26.wifi.dynamic.surfer.at)
[18:03:44] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:06:26] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 256 seconds)
[18:06:39] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:10:05] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[18:10:38] *** Joins: ge0rgios (~georgios@user/georgios)
[18:10:40] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[18:11:04] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Client Quit)
[18:12:47] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[18:15:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:16:40] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:17:57] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:20:10] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:24:19] *** Quits: capitanocrunch (~capitanoc@user/capitanocrunch) (Quit: leaving)
[18:25:07] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 245 seconds)
[18:25:22] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[18:25:57] *** Quits: jbe (~hellother@lysator/root/jbe) (Quit: Reconnecting)
[18:26:03] *** Joins: jbe (~hellother@lysator/root/jbe)
[18:26:04] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[18:27:38] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-c16b-4385-b975-2303.res6.spectrum.com)
[18:28:13] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 250 seconds)
[18:28:30] *** Quits: ge0rgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[18:28:57] *** Quits: netsan (~netsan@user/netsan) (Ping timeout: 244 seconds)
[18:29:40] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 256 seconds)
[18:30:08] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:36:28] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[18:42:41] *** Quits: metal_egg (~metal0egg@pool-72-94-145-43.phlapa.fios.verizon.net) (Remote host closed the connection)
[18:44:21] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:45:09] *** Quits: oz4ga (~tim@93.90.4.233) (Ping timeout: 276 seconds)
[18:45:54] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973)
[18:46:08] *** Joins: goldfish (~goldfish@user/goldfish)
[18:49:26] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:49:58] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:50:18] *** Quits: y1n (~y1n@84-115-64-26.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[18:51:02] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[18:51:19] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[18:52:07] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[18:53:06] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 240 seconds)
[18:54:00] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[18:54:42] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:212c:28e7:b600:7846) (Ping timeout: 240 seconds)
[18:56:02] *** Joins: y1n (~y1n@84-115-64-26.wifi.dynamic.surfer.at)
[18:56:52] *** Quits: jbe (~hellother@lysator/root/jbe) (Ping timeout: 256 seconds)
[18:57:42] <rendar> let's say my python program must save into disk credentials (e.g. user/pass or a token), and it must load them at runtime and pass them into https APIs, what is the safest way to accomplish this?
[18:57:45] *** Joins: jbe (~hellother@lysator/root/jbe)
[18:57:59] *** Joins: poorboy (~poorboy@104.131.46.87)
[18:59:27] *** Joins: netsan (~netsan@user/netsan)
[18:59:30] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:91f3:6fb6:a0f8:5d7)
[19:00:54] <dodo> rendar: kind of depends on how paranoid you want to be
[19:01:09] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (Ping timeout: 258 seconds)
[19:01:22] <rendar> well those are very important credentials that gives access to algorithmic trading portfolios with a lot of money
[19:01:34] <grym> huh, TIL operator.countOf
[19:01:45] <dodo> rendar: are they your own credentials, or for other people?
[19:01:53] <rendar> dodo: my own
[19:01:54] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[19:02:27] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 250 seconds)
[19:02:28] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[19:02:31] <dodo> rendar: which threat are you trying to protect against? theft of computer? intruder on the live system?
[19:02:57] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[19:03:06] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:03:11] <rendar> dodo: yes, exactly, someone that has remote/physical access to my workstation and can login with my credentials to manipulate things
[19:03:38] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[19:03:52] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:91f3:6fb6:a0f8:5d7) (Ping timeout: 245 seconds)
[19:03:57] <dodo> rendar: you could input the credentials when you start the program
[19:04:13] <rendar> i don't want to input very long tokens
[19:04:23] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:04:48] <dodo> rendar: how about passphrases?
[19:04:51] *** Joins: yogoyo (~paddy@user/yogoyo)
[19:05:10] <rendar> dodo: they are tokens from websites, not passphrases, i don't choose this
[19:05:13] <pyfisch> rendar: to protect against physical access: use full disk encryption and always lock the computer when you leave the workstation. Switch it off when you don't use it.
[19:05:42] <dodo> rendar: that's not relevant. it was about encrypting the tokens on disk
[19:05:42] <rendar> full disk?! a little crypted partition with critical files is enough, imho
[19:05:56] <dodo> ah well, if you already have you answer, great
[19:06:16] <rendar> dodo: i don't have answers, hence i have asked here
[19:06:20] <deniska> encryption just pushes the problem around, where do you store the key?
[19:06:25] <rendar> but since i have a brain, i can also have an opinion on those answers
[19:06:31] <rendar> instead of executing them like a bot
[19:06:45] *** Joins: audiocat (~audio@2603-8081-1800-00ad-c97d-d801-aa27-1842.res6.spectrum.com)
[19:07:33] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[19:07:52] *** Quits: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6) (Ping timeout: 272 seconds)
[19:08:14] <pyfisch> rendar: full disk encryption (if properly executed) can ensure that you boot to a trusted operating system and environment
[19:08:40] <rendar> i could use a crypted files with a json or something with all the user/pass and tokens, and then i type a passphrase to encrypt that crypted files at the program start
[19:08:44] <rendar> i guess that would be wise
[19:09:10] <dodo> full disk encryption would protect against somebody installing malware on your machine while you're away
[19:09:14] <rendar> decrypt*
[19:09:18] <deniska> rendar: there're various solutions for secret management
[19:09:29] *** Joins: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6)
[19:09:33] <rendar> deniska: give me a couple
[19:09:44] <pyfisch> rendar: if you just have an encrypted file (or small partition) a determined attacker will install a malware to the device when they have physical access. This malware then waits until you decrypt the protected file and send the attacker the username+password
[19:10:20] <deniska> rendar: vault is one I heard of, but never used myself
[19:10:38] *** Joins: CoolerX (~CoolerX@user/coolerx)
[19:10:44] <TJ-> rendar: external hardware key or USB connected SoC like USb Armory
[19:10:49] <rendar> pyfisch: well, let's say that phyisical access is _very_ not probable
[19:11:34] <rendar> TJ-: what about the usb key is stolen?
[19:11:35] <pyfisch> rendar: great. then you should focus on remote attackers
[19:12:00] <rendar> pyfisch: i guess that for remote attackers, an encrypted file will do the job
[19:12:18] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[19:12:25] <TJ-> rendar: its encrypted of course. At some point you've got to unlock. If you're not going to be beaten up, then a passphrase in your memory is all that is needed
[19:12:48] <rendar> lol
[19:12:54] <pyfisch> rendar: I agree with TJ-
[19:13:01] <rendar> ok
[19:13:28] <TJ-> the key thing is to not cache the unencrypted credential in memory; require unlock key for each access
[19:13:47] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:13:58] <rendar> TJ-: so, basically a full encrypted filesystem in a usb key would be a start, for your solution, right?
[19:14:17] <pyfisch> against remote attackers you should follow good security practices: don't install software from untrusted sources, install updates fast.
[19:14:56] <pyfisch> for extra security you might want to separate private and work computers or have separate accounts or a virtual machine
[19:15:00] <rendar> i agree on install updates fast, but what about you can't reboot often?
[19:15:11] <TJ-> rendar: it'd be overkill and irrelevant since FDE only protects data at rest (powered off). Once unlocked it's available to any process that can gain access or snoop on access
[19:15:52] <rendar> yeah indeed
[19:15:55] <TJ-> rendar: I use USB Armory, which is a Linux on a SoC connected on the Ethernet port and presents as a network interface so you can ssh into it, it can provide network services, and so on
[19:16:10] *** Quits: tims (~tims@61.69.131.46) (Ping timeout: 258 seconds)
[19:16:23] <TJ-> plugs into a USB port to get its power and presents a CDC Ethernet interface
[19:16:38] <rendar> interesting
[19:16:53] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[19:17:02] <rendar> so you can ssh into it, and download files from it?
[19:17:50] *** Joins: Quaking (~Quaking@c-98-223-238-153.hsd1.in.comcast.net)
[19:18:10] <TJ-> yes, https://www.f-secure.com/en/consulting/foundry/usb-armory
[19:18:19] <rendar> interesting, thanks
[19:18:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[19:18:43] <TJ-> It was created by Inverse Path, recently bought out by F-Secure
[19:18:58] <rendar> why the solution of an encrypted file that gets loaded at program startup inputting a password, would be weak?
[19:18:58] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[19:19:14] <TJ-> I've got the version 1, without radio (wifi/Bluetooth)
[19:19:24] *** Quits: hsv (~unknown@user/hsv) (Remote host closed the connection)
[19:19:50] <TJ-> https://inversepath.com/usbarmory_mark-one.html
[19:20:01] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[19:21:07] <TJ-> nice thing is it has a stand-alone mode where you just provide it with power and it becomes a USB-host, https://github.com/f-secure-foundry/usbarmory/wiki/Host-adapter
[19:22:07] <rendar> interesting thanks
[19:22:18] *** Quits: BernieMont (~BernieMon@2001:558:6005:3:f8c7:b5aa:4b69:d5ab) (Quit: Leaving)
[19:22:36] *** Joins: BernieMont (~BernieMon@2001:558:6005:3:f8c7:b5aa:4b69:d5ab)
[19:26:46] <Celelibi> What's the best way to set some default value to a dict entry?
[19:27:08] <Celelibi> Currently I have params["foo"] = params.get("foo", "")
[19:27:10] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973) (Quit: Leaving)
[19:28:02] <deniska> Celelibi: .setdefault method might be what you're looking for?
[19:28:26] <Celelibi> Oh, yes, not bad.
[19:30:17] *** Quits: diamondbond (~diamondbo@175.157.62.11) (Quit: Leaving)
[19:31:08] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[19:31:14] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[19:31:27] *** Joins: goldfish (~goldfish@user/goldfish)
[19:31:58] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[19:32:20] *** Joins: LiftLeft (~LiftLeft@191.96.227.30)
[19:32:26] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Remote host closed the connection)
[19:32:37] *** Quits: emika (~emika@83.136.182.91) (Ping timeout: 245 seconds)
[19:32:44] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[19:32:59] *** Joins: emika (~emika@185.207.249.155)
[19:33:52] *** Joins: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619)
[19:34:23] *** Quits: xernaron (~xernaron@box.xernaron.ch) (Quit: ZNC 1.8.2 - https://znc.in)
[19:35:19] *** Joins: xernaron (~xernaron@box.xernaron.ch)
[19:36:22] *** Quits: audiocat (~audio@2603-8081-1800-00ad-c97d-d801-aa27-1842.res6.spectrum.com) (Ping timeout: 245 seconds)
[19:38:42] *** Joins: gambl0re (~gambl0re@24.140.237.124)
[19:41:43] <Celelibi> Damn mutable arguments, they bit me again! :(
[19:41:49] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[19:43:23] *** Joins: DocMors (~DocMors@web.crypticity.net)
[19:43:58] <grym> or collections.defaultdict, possibly
[19:44:06] <grym> especially when you want the default value to be an empty list, e.g.
[19:44:20] <Celelibi> Not defaultdict, it's just for one single entry.
[19:44:25] <grym> ah, ok
[19:44:45] *** Quits: hyper_dave (~hyper_dav@197.156.107.121) (Read error: Connection reset by peer)
[19:46:48] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[19:49:13] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[19:50:32] *** Quits: y1n (~y1n@84-115-64-26.wifi.dynamic.surfer.at) (Ping timeout: 245 seconds)
[19:51:25] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[19:52:43] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:52:48] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:53:27] *** Quits: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:5aaf:6a00:793e:5e7a) (Ping timeout: 245 seconds)
[19:53:47] *** Joins: MmeQuignon (~MmeQuigno@static-198-54-129-84.cust.tzulo.com)
[19:54:23] *** Joins: besnn (~besnn@user/besnn)
[19:57:12] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 245 seconds)
[19:57:44] *** Quits: fearnothing (~fearnothi@82-68-82-102.dsl.in-addr.zen.co.uk) (Changing host)
[19:57:44] *** Joins: fearnothing (~fearnothi@user/fearnothing)
[19:57:55] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Ping timeout: 250 seconds)
[20:03:37] *** Joins: y1n (~y1n@84-115-64-26.wifi.dynamic.surfer.at)
[20:04:44] *** Quits: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619) (Remote host closed the connection)
[20:05:03] *** Joins: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619)
[20:05:34] *** Joins: ioe (~is0ke3@user/is0ke3)
[20:05:50] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:a614:4839:e43e:98b9:299d)
[20:07:32] *** Joins: greedom (~greedom@2001:16b8:3242:3b00:a8ca:7197:5556:5289)
[20:09:17] *** Quits: p-i- (~Ohmu@2403:6200:8870:a614:c006:e298:6d9a:cbd6) (Ping timeout: 245 seconds)
[20:09:50] <az> hi, are tuples limited to the function they are created in?
[20:10:09] <grym> az: no, but say more
[20:10:46] <az> I'm trying to call a tuple from another function but it's saying name "*" is not defined
[20:10:57] <grym> that's not a valid name
[20:10:59] <grym> show code
[20:11:23] <grym> at bpa.st/+python
[20:11:43] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[20:12:14] *** Quits: yogoyo (~paddy@user/yogoyo) (Quit: WeeChat 3.2)
[20:13:49] <az> https://bpa.st/27BA
[20:14:23] *** Joins: phonemic (~phonemic@104-60-219-66.lightspeed.nsvltn.sbcglobal.net)
[20:14:27] <grym> az: i don't see a *, or a return
[20:14:48] <grym> (or where you get price_source from)
[20:15:04] <grym> or a few other variables that look like locals but i bet they're not
[20:15:21] <az> I got the price, no issue with that. the issue with token_price is not getting saved in a tuple that I can call from outside
[20:15:32] <grym> az: yes, you don't return it
[20:15:39] <grym> so when the function exits, local scope goes poof
[20:15:40] <nedbat> az: can you link us to the full program? Where is the "outside"?
[20:16:41] *** Quits: phonemic (~phonemic@104-60-219-66.lightspeed.nsvltn.sbcglobal.net) (Client Quit)
[20:16:43] *** Quits: Vonter (~Vonter@user/vonter) (Quit: WeeChat 3.2)
[20:17:37] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 245 seconds)
[20:17:50] <az> full file which is a version that I'm trying to make it easier to write tests and I'm experincing with named tuples for now https://bpa.st/JJCQ
[20:18:03] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[20:18:10] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[20:18:43] <az> full code is here: https://gitlab.com/uak/slp-sell-bot/
[20:20:05] <az> the one I pasted earlier is not yet on repo. just testing and experimenting with stuff
[20:20:18] <grym> az: if get_token_price returns that named tuple, and you assign the return value to some name on line 219, you'll be able to access the namedtuple instance you return there
[20:20:21] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:20:56] <grym> so if L219 is `the_token_price = get_token_price()`, say
[20:21:16] <grym> then the_token_price will be whatever you return (or None, because you have a clause where you handle an error in an odd way)
[20:21:35] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[20:21:52] <az> I thought that tuple should be independently stored, no?
[20:22:16] <grym> no
[20:22:58] <grym> things are stored when you assign them a name, and that's relative to the scope of that name
[20:23:42] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[20:24:42] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[20:25:05] <az> hmm, I'll better keep using global for now then. any suggestion that you have seen the code other than using classes :)
[20:25:49] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:25:56] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[20:27:17] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[20:27:33] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:28:25] <grym> az: https://bpa.st/HMWQ
[20:28:48] <grym> az: i gave you several yesterday, a dict being probably the most suitable here
[20:29:09] <grym> namedtuples have some issues that you either know that you want, or you will stub your toe on eventually
[20:29:34] <grym> (they really are tuples, they're not structy-bags-of-data)
[20:29:44] <grym> globals, like i said yesterday, are pretty gross
[20:29:58] *** Parts: shrysr (~shrysr@user/shrysr) (WeeChat 3.2-dev)
[20:30:31] <grym> all python functions return a value; you will be happier when yours return something meaningful, and accept arguments that are also meaningful
[20:31:18] *** Quits: mkoskar (~mkoskar@user/mkoskar) (Ping timeout: 268 seconds)
[20:31:30] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 240 seconds)
[20:32:51] *** Joins: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[20:33:00] <az> I'm thinking of returning a dictionary like in this: https://bpa.st/UUPQ
[20:33:41] *** Joins: shrysr (~shrysr@user/shrysr)
[20:36:00] <grym> sure, that'd work
[20:36:47] <grym> you could replace the namedtuple in get_token_price with one easily enough, and then return it
[20:37:21] *** Quits: jess (~jess@libera/staff/jess) ()
[20:40:00] *** Quits: ioe (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[20:41:22] *** Joins: mkoskar (~mkoskar@user/mkoskar)
[20:41:49] *** Joins: Fiji (~Fiji@user/fiji)
[20:41:57] *** Joins: ioe (~is0ke3@user/is0ke3)
[20:45:53] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973)
[20:46:10] *** Quits: besnn (~besnn@user/besnn) (Quit: Leaving)
[20:46:29] *** Joins: besnn (~besnn@user/besnn)
[20:46:40] *** Quits: hyper_dave (~hyper_dav@197.156.107.121) (Ping timeout: 272 seconds)
[20:46:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:47:24] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:a614:4839:e43e:98b9:299d) (Remote host closed the connection)
[20:47:38] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:47:59] *** Joins: p-i- (~Ohmu@mx-ll-171.6.227-32.dynamic.3bb.co.th)
[20:48:03] *** Joins: hyper_dave (~hyper_dav@197.156.107.78)
[20:49:52] <az> thanks
[20:50:07] *** Quits: y1n (~y1n@84-115-64-26.wifi.dynamic.surfer.at) (Ping timeout: 245 seconds)
[20:52:48] <grym> if you find yourself wanting the dot-notation instead of square brackets for access, consider dataclasses.dataclass as well
[20:52:53] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[20:53:34] *** Joins: pkapp (~pkapp@c-75-74-40-214.hsd1.fl.comcast.net)
[20:53:41] *** Joins: yogoyo (~paddy@user/yogoyo)
[20:53:44] <grym> dicts really shine when: you want your keys to be things that aren't acceptable variable names, when you want to add/remove keys and their associated values during the lifetime of the object
[20:53:51] <grym> either/or of those
[20:54:21] *** Joins: me-sudoer-dentne (~Kundargi@45.112.144.181)
[20:54:37] *** Joins: node1 (~node1@user/node1)
[20:59:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:59:36] *** Quits: Roey (~Roey@user/Roey) (Remote host closed the connection)
[21:01:58] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 258 seconds)
[21:04:09] *** Joins: zeden (~zeden@user/zeden)
[21:08:06] *** Quits: jazzy (~jaziz@2600:380:8562:6b2:9c1f:23c2:2ca2:238b) (Ping timeout: 258 seconds)
[21:09:28] *** Quits: me-sudoer-dentne (~Kundargi@45.112.144.181) (Quit: Leaving)
[21:10:06] *** Quits: cre (~x@p5b0fbc70.dip0.t-ipconnect.de) (Ping timeout: 276 seconds)
[21:10:25] *** Joins: me-sudoer-dentne (~dentine@45.112.144.181)
[21:14:21] *** Joins: TonyStone (TonyStone@gateway/vpn/airvpn/tonystone)
[21:15:11] *** Joins: Orimendix (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net)
[21:16:00] <az> I've created this but it seems an ugly way to call functions just to make sure the dictionary is filled. any other better way https://bpa.st/YS7Q
[21:16:47] <az> had to put set_weight() and set_tier_count() in the middle of the code to make the last function work
[21:17:28] <grym> az: make those functions accept arguments, too
[21:17:31] <grym> as well as returning values
[21:17:40] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:18:24] <az> aren't they returning the dictionary now?
[21:19:41] <grym> az: https://bpa.st/PMZA
[21:19:49] <grym> that's how i'd write that
[21:20:35] <grym> az: incidentally, wanting weight_on_tire really does make a case for a class, here
[21:21:44] *** Joins: Vonter (~Vonter@user/vonter)
[21:21:47] <az> apparently everything point in that direction :)
[21:21:57] <az> thanks
[21:22:03] *** Joins: ice9 (~ice9@user/ice9)
[21:23:31] <greyltc> how do I avoid `python -m unittest` getting confused by importing/testing a system installed package vs one in my git project folder?
[21:24:28] <grym> az: https://bpa.st/7G2Q
[21:24:29] <grym> e.g.
[21:24:46] <grym> az: there's nothing wrong with lots of functions, though
[21:25:04] *** Quits: ice9 (~ice9@user/ice9) (Read error: Connection reset by peer)
[21:25:35] *** Joins: MaximB (~MaximB@87.68.164.32)
[21:25:42] <az> that example looks neat
[21:25:52] <grym> az: oh, and you can update stuff and recompute: https://bpa.st/FNXA
[21:26:01] <grym> (equivalent to changing the value of a dict key)
[21:26:42] <nedbat> greyltc: which package is it finding, and where is that package installed?
[21:27:05] <grym> az: or start with different values https://bpa.st/7OIQ
[21:27:09] *** Quits: _SKiTZO (~dark@147.89-10-133.nextgentel.com) (Quit: Leaving)
[21:28:48] <az> those examples are really encouraging to use classes, most of the ones I saw on stackoverflow scared me of it :)
[21:28:52] *** Quits: me-sudoer-dentne (~dentine@45.112.144.181) (Quit: Leaving)
[21:29:08] <grym> classes are bags of data, with optional computations attached
[21:29:47] <grym> good tool to know about. not the be-all and end-all of data structures
[21:29:55] *** Joins: audiocat (~audio@2603-8081-1800-00ad-3ab8-1376-7265-848f.res6.spectrum.com)
[21:29:57] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[21:30:02] <grym> especially in python where we *can* have bare functions (and pass them around)
[21:30:18] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[21:30:24] <greyltc> nedbat: This was kind of a philosophical question, not for a specific problem I have. I've read the unittest docs and I can't really figure out if it tries to play any import tricks to let the user choose exactly what they want to be testing.
[21:32:16] *** Joins: KombuchaKip (~kip@192.252.230.5)
[21:32:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:33:14] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:33:24] <greyltc> nedbat: pytest has an `--import-mode` to let you have some better control over how it imports things while it's testing. I was wondering if there's anything like that in unittest
[21:34:24] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[21:34:48] <greyltc> does unittest do any sort of sys.path manipulation?
[21:36:42] *** Quits: TonyStone (TonyStone@gateway/vpn/airvpn/tonystone) (Ping timeout: 240 seconds)
[21:36:51] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 258 seconds)
[21:37:04] *** lukedashjr is now known as luke-jr
[21:37:43] *** Quits: rendar (~rendar@user/rendar) ()
[21:37:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[21:40:42] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[21:42:11] <nedbat> greyltc: i think "python -m unittest discover" will do the right thing.
[21:44:38] *** Quits: netsan (~netsan@user/netsan) (Remote host closed the connection)
[21:46:27] <greyltc> seems like it only does the right thing when the code is immediately importable
[21:46:54] <greyltc> doesn't seem to like when your package is hidden in a src/ dir
[21:47:29] <greyltc> ( project layout described here: https://blog.ionelmc.ro/2014/05/25/python-packaging/#the-structure )
[21:49:41] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[21:50:25] *** Joins: dba (uid502594@id-502594.stonehaven.irccloud.com)
[21:50:32] <greyltc> I've tried various combos of `--start-directory` and `--top-level-directory` but unittest seems to not work with that structure (when run from the project root dir)
[21:51:40] <greyltc> I can get it to run if I cd into src/ and call it with `--start-directory ..`
[21:52:00] <greyltc> But that's just because when i'm in src/ my package is immediately importable
[21:52:47] <dba> is this https://bpa.st/5NPQ going to start 3 threads and after first completed thread 3 more threads are going to be started ?
[21:53:01] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[21:53:07] <grym> greyltc: i would expect unittest to play well with installed packages instead of uninstalled ones, which might be what's happening here
[21:53:09] *** Joins: magla (~gelignite@55d4cb3d.access.ecotel.net)
[21:53:23] <grym> (it's usually the case)
[21:53:26] *** Quits: ioe (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[21:54:15] <greyltc> grym: yeah. it seems that way. maybe i should not be trying to run the tests on an uninstalled package
[21:54:26] *** Quits: audiocat (~audio@2603-8081-1800-00ad-3ab8-1376-7265-848f.res6.spectrum.com) (Ping timeout: 272 seconds)
[21:55:38] <greyltc> although I think being able to do that could be helpful in some cases. that's why I was looking for some built in control over the imports (rather than messing with sys.path myself)
[21:55:52] <grym> greyltc: probably not, no.  `pip install -e .` is my default move for all development for this reason
[21:58:38] <sybariten> OK i know this is all a bit vague information before i show code and errors, but just a quick question. I can do this : getSortedEmissionList(2005, 8)  which works with a fucntion i have,   and i have a variable theYear that looks like this , print(theYear) --> ['2005', '8']    and i can do this    print(", ".join(theYear))   --->  2005, 8    which, to me, looks very much like what i was manually
[21:58:40] <sybariten> feeding into that function before. Yet i can't do   getSortedEmissionList(", ".join(theYear))    cause then i run into some secondary errors related to , im sure, data typing...
[21:58:51] <sybariten> any obvious pitfalls here that i'm missing?
[21:59:28] <grym> sybariten: well, in one case you're passing a list of strings and the other you aren't
[21:59:35] <grym> do you understand the difference?
[21:59:49] <sybariten> ....not quite.....
[22:00:39] <sybariten> the join operation, what data type is it producing?   print(", ".join(theYear))   --->  2005, 8
[22:00:42] <grym> in one case you have ["2005","8"], which is a list of two items, each of which are strings.  In the other you have the string "2005,8",which is one string that has 6 characters in it
[22:00:51] <grym> join produces a string
[22:01:01] <grym> (since it's a method on strings)
[22:01:22] *** Quits: hyper_dave (~hyper_dav@197.156.107.78) (Ping timeout: 240 seconds)
[22:01:27] *** Quits: stdout (~stdout@50.115.255.72) (Quit: Leaving)
[22:01:48] <grym> er, "2005, 8", length 7
[22:02:16] <sybariten> aha, so... if i have this function, getSortedEmissionList() ... it takes two arguments. It doesn't see the "2005,8" or 2005,8 as two arguments?
[22:02:25] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[22:02:32] *** Joins: ice9 (~ice9@user/ice9)
[22:02:41] <grym> "2005, 8" is one argument
[22:03:18] <sybariten> but, what about when i'm manually calling the function like this : getSortedEmissionList(2005, 8)  ... surely i am giving two arguments there?
[22:03:36] <grym> you are
[22:04:56] <sybariten> yeah, somewhere here i am getting lost apparently. Hm
[22:05:06] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[22:05:07] <sybariten> Let's see if maybe i can present some code and ask a question about it
[22:05:33] *** Joins: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr)
[22:05:34] <sybariten> The whole thing is a bit of a mess so its no fun to paste it all but ill see if i can take some functions out of their context
[22:05:44] <jinsun> just beacause print("2005, 8") looks like 2005, 8 doesn
[22:06:13] <jinsun> doesn't change the fact that it is actually "2005, 8"
[22:06:44] *** Quits: fstd (~fstd@xdsl-78-35-72-109.nc.de) (Remote host closed the connection)
[22:07:17] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[22:07:20] <jinsun> `getSortedEmissionList(", ".join(theYear))` is same as `getSortedEmissionList("2005, 8")`, not getSortedEmissionList(2005, 8)
[22:08:07] <sybariten> jinsun: no... i'm starting to realize that, hehe
[22:08:47] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 250 seconds)
[22:08:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:09:26] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 258 seconds)
[22:09:42] <sybariten> so should i perhaps do something beyond the join?  Cause before the join i have just a list, but surely a function that expects two arguments couldn't consume a list straight away?
[22:10:19] <jinsun> you have a list of 2 strings, the function wants 2 integers
[22:11:21] <jinsun> so first you will have to convert those strings to integers, then you can pass those2 integers from a single iterable using *
[22:11:33] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[22:11:47] *** Joins: stdout (~stdout@50.115.255.72)
[22:12:32] <jinsun> sybariten: so something like `getSortedEmissionList(*[int(x) for x in theYear])`
[22:12:57] *** Quits: ice9 (~ice9@user/ice9) (Read error: Connection reset by peer)
[22:13:27] <jinsun> doing the join is the wrong direction to go, because that converts 2 things to one, and your function wants two things
[22:16:21] <sybariten> hmm i see, thanks
[22:17:59] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 268 seconds)
[22:18:18] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 240 seconds)
[22:19:20] <sybariten> unrelated question: if i want to comment things like this, to remember why i had a * in there for instance ... do i write the comment above or below that line? A single-line comment
[22:20:19] <jinsun> above, or on the same line if it is short enough
[22:20:26] <sybariten> Gotcha
[22:20:27] *** Joins: georgios (~georgios@user/georgios)
[22:20:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[22:22:34] *** Joins: Trieste_ (T@user/pilgrim)
[22:22:52] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 272 seconds)
[22:23:34] *** Quits: m_tadeu (~quassel@bl23-211-151.dsl.telepac.pt) (Read error: No route to host)
[22:24:50] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 256 seconds)
[22:24:50] *** Quits: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Ping timeout: 272 seconds)
[22:25:02] *** Joins: uhu (~uhu@2a01:4f9:c010:1087::2)
[22:27:50] *** Quits: devcpu (~rusty@ec2-35-183-244-153.ca-central-1.compute.amazonaws.com) (Remote host closed the connection)
[22:28:32] <sybariten> * is related to unpacking, if i remember correctly?
[22:29:36] <sybariten> I still feel like i'm probably doing a detour here, as i'm actually getting these two values from the user.... (albeit on the same row ofcourse)   hmm
[22:29:39] *** Joins: jetchisel (jetchisel@user/jetchisel)
[22:30:14] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[22:31:09] <jinsun> yes, * is unpacking iterables, the docs decribe it a bit here https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists
[22:32:40] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[22:32:53] *** Joins: xcombelle (~Xavier_Co@abayonne-651-1-41-161.w92-156.abo.wanadoo.fr)
[22:33:27] *** Joins: akk (~akk@75.161.157.26)
[22:35:42] *** Joins: Akuli (~Akuli@87-94-110-245.bb.dnainternet.fi)
[22:39:07] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 250 seconds)
[22:40:03] <sybariten> so, this seems to work now. Thanks jinsun . I still don't know if i'm really doing this in an effective way or not though....   https://bpa.st/Y3HQ
[22:41:18] <sybariten> user enters one out of three set years. I'm not really doing any number treatment though so i guess they could just as well have typed a, b or c. This chooses which data set to print a sorted output from. Optionally you can give a limit of lines/records, after the year
[22:45:05] *** Quits: {HD} (~{HD}@37.19.197.231) (Ping timeout: 258 seconds)
[22:46:16] *** Joins: Sky_Net (~Sky_Net@176.14.210.40)
[22:46:23] *** Joins: mawk (mawk@wireguard/contributor/mawk)
[22:46:29] <mawk> aaaa
[22:46:30] <mawk> test test
[22:46:33] <mawk> ah better
[22:47:00] <mawk> why is nobody talking
[22:47:54] *** Joins: audiocat (~audio@2603-8081-1800-00ad-4244-d5da-54a7-0c8c.res6.spectrum.com)
[22:48:40] <akk> mawk: Because it's sunday and they're all at the beach or hiking or something?
[22:48:54] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 272 seconds)
[22:48:55] <mawk> :(
[22:49:02] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:49:26] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:50:02] <grym> and it's august and our european contingent is off on vaca
[22:51:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:51:25] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Ping timeout: 244 seconds)
[22:52:44] *** Joins: {HD} (~{HD}@191.96.185.81)
[22:52:49] *** Quits: BUSY (~BUSY@user/busy) (Read error: Connection reset by peer)
[22:53:03] *** Quits: Sky_Net (~Sky_Net@176.14.210.40) (Quit: Leaving)
[22:53:17] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-9941-75ec-8110-27d1.fixed6.kpn.net) (Remote host closed the connection)
[22:53:28] *** Joins: CoolerX (~CoolerX@user/coolerx)
[22:54:32] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-d591-18df-e586-cd75.fixed6.kpn.net)
[22:54:43] *** Joins: fanis30_ (~fanis30@adsl-11.37.6.3.tellas.gr)
[22:55:23] <xcombelle> hi mawk
[22:56:04] <mawk> hi xcombelle
[22:56:18] <mawk> how is my favorite #python frenchman doing
[22:56:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[22:56:48] *** Quits: rsx (~dummy@ppp-188-174-157-141.dynamic.mnet-online.de) (Quit: rsx)
[22:57:16] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[22:57:16] <xcombelle> mawk: having hard time with my mental health
[22:57:27] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Ping timeout: 268 seconds)
[23:00:34] *** Joins: VaniaPy (~VaniaPy@79.103.24.224.dsl.dyn.forthnet.gr)
[23:00:40] *** Parts: VaniaPy (~VaniaPy@79.103.24.224.dsl.dyn.forthnet.gr) ()
[23:00:42] <sybariten> Whereabout in france are you, if you dont mind me asking?
[23:01:23] *** Quits: martums (~martums@user/martums) (Read error: Connection reset by peer)
[23:02:59] *** Joins: Pickchea (~private@user/pickchea)
[23:03:05] *** Joins: martums (~martums@user/martums)
[23:08:07] *** Joins: netsan (~netsan@user/netsan)
[23:09:26] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[23:09:50] *** Joins: supakeen (~user@python/site-packages/supakeen)
[23:10:07] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[23:12:14] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973) (Quit: Leaving)
[23:12:32] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3e:d956:df20:973)
[23:13:39] *** Quits: LiftLeft (~LiftLeft@191.96.227.30) (Ping timeout: 252 seconds)
[23:13:47] *** Joins: vicfred (~vicfred@user/vicfred)
[23:15:58] *** Quits: fanis30_ (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[23:16:13] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[23:16:42] *** Quits: altendky (sid135382@id-135382.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[23:16:58] *** Quits: dba (uid502594@id-502594.stonehaven.irccloud.com) (Ping timeout: 256 seconds)
[23:17:06] *** Quits: llinguini (sid257922@id-257922.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[23:17:11] <xcombelle> sybariten: millau, south of france
[23:17:29] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Read error: Connection reset by peer)
[23:17:30] *** Quits: flagrama (sid145621@id-145621.stonehaven.irccloud.com) (Write error: Connection reset by peer)
[23:17:30] *** Quits: jesse-s (sid98646@id-98646.stonehaven.irccloud.com) (Ping timeout: 276 seconds)
[23:17:30] *** Quits: Pr0phet (sid505706@id-505706.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[23:17:37] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Ping timeout: 245 seconds)
[23:17:54] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 240 seconds)
[23:17:54] *** Quits: crazysim (sid86009@id-86009.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[23:17:54] *** Quits: pjlsergeant (sid143467@id-143467.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[23:18:18] *** Quits: Tiago_Paolini (sid172748@id-172748.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[23:18:40] *** Joins: BUSY (~BUSY@user/busy)
[23:18:49] *** Quits: umamisoup (uid511883@id-511883.stonehaven.irccloud.com) (Ping timeout: 258 seconds)
[23:19:02] *** Quits: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com) (Ping timeout: 268 seconds)
[23:19:22] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (Ping timeout: 240 seconds)
[23:20:37] *** Joins: Betal (~Betal@user/betal)
[23:21:10] *** Joins: dba (uid502594@id-502594.stonehaven.irccloud.com)
[23:21:22] *** Joins: Pr0phet (sid505706@id-505706.stonehaven.irccloud.com)
[23:21:29] *** Joins: crazysim (sid86009@id-86009.stonehaven.irccloud.com)
[23:21:32] *** Joins: llinguini (sid257922@id-257922.stonehaven.irccloud.com)
[23:21:41] *** Joins: umamisoup (uid511883@stonehaven.irccloud.com)
[23:21:50] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[23:21:54] *** Joins: flagrama (sid145621@id-145621.stonehaven.irccloud.com)
[23:21:59] *** Joins: raydeeam (uid325131@dgplug/raydeeam)
[23:22:01] *** Joins: cheater (~Username@user/cheater)
[23:22:01] *** Joins: Tiago_Paolini (sid172748@stonehaven.irccloud.com)
[23:22:03] *** Quits: WhyNotHugo (sid269118@id-269118.stonehaven.irccloud.com) (Ping timeout: 276 seconds)
[23:22:12] *** Joins: morgabra (sid500580@user/morgabra)
[23:22:19] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[23:22:30] *** Joins: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com)
[23:22:30] *** Joins: altendky (sid135382@id-135382.stonehaven.irccloud.com)
[23:22:42] *** Joins: pjlsergeant (sid143467@id-143467.stonehaven.irccloud.com)
[23:22:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:23:19] *** Joins: WhyNotHugo (sid269118@id-269118.stonehaven.irccloud.com)
[23:27:02] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[23:28:21] <sybariten> xcombelle: sympa sympa ... closest i've been is prolly Montpellier
[23:29:12] *** Joins: CoolerY (~CoolerX@user/coolerx)
[23:29:44] <sybariten> given a data structure (dictionary) like this, how would i loop over it to drill down into the middle population for each country?  (i.e. 3086810 for albania)   https://bpa.st/OCYQ
[23:30:04] <sybariten> given that its a multi dimensional structure, or whatever the term is
[23:30:04] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[23:30:34] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[23:31:06] *** lukedashjr is now known as luke-jr
[23:32:00] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[23:32:43] <grym> country_data['Albania']['population'] will give you that value
[23:32:54] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[23:33:05] *** Joins: ice9 (~ice9@user/ice9)
[23:33:41] *** Quits: ice9 (~ice9@user/ice9) (Read error: Connection reset by peer)
[23:34:06] <grym> but if you `for country, data in country_data.items()`, you'll get the inner dicts one at a time, for each country in turn
[23:34:35] <sybariten> hmmm ok thanks grym
[23:38:39] <madprops> is there an async "call" or should I use subprocess?
[23:39:08] <madprops> oh call is from subprocess
[23:39:17] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[23:39:19] *** Joins: goldfish_ (~goldfish@user/goldfish)
[23:39:49] <sybariten> this was a small test function where i hoped to at least get something back ( i know that details contain more than just this population value), but apparently i made some error  https://bpa.st/4ELA
[23:40:13] <sybariten> is it wrong to loop over name, details like this, when in fact i am not using name later?
[23:41:58] <bjs> sybariten: "wrong" how?  I mean it's not incorrect, it's not like your code will do the wrong thing
[23:42:10] <bjs> sybariten: but perhaps you just want to say `for details in countryDict.values(): ...`
[23:42:15] <bjs> rather than looping over .items()
[23:42:37] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 245 seconds)
[23:43:03] <sybariten> wait wait it actually worked if i changed details[2] to details["population"] ... but i get the whole triple ofcourse.
[23:44:02] <sybariten> if details["population"] gives a triple like (256227, 324848, 381749) , perhaps i could do details["population"[1]] for the middle one?
[23:44:14] <bjs> sybariten: uh you mean details["population"][1]
[23:44:20] <sybariten> yes ofcourse
[23:44:29] <bjs> if details["population"] is the triple, then details["population"][1] is the second in the triple
[23:44:38] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 272 seconds)
[23:45:35] <sybariten> yep, great, it works now... gracias
[23:45:36] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[23:46:32] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 252 seconds)
[23:46:32] *** lukedashjr is now known as luke-jr
[23:46:33] <madprops> what's the easiest way to run a command without blocking?
[23:47:15] <grym> Popen
[23:47:48] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 272 seconds)
[23:48:19] <bjs> madprops: you mentioned `async` earlier, if you're using asyncio there's https://docs.python.org/3/library/asyncio-subprocess.html
[23:49:30] <madprops> that example is complicated though
[23:51:01] <madprops> Popen works
[23:51:16] *** Quits: kofuyu (~kofuyu@user/kofuyu) (Quit: Ping timeout (120 seconds))
[23:51:28] *** Quits: bread (uid502657@id-502657.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[23:51:32] *** Joins: kofuyu (~kofuyu@user/kofuyu)
[23:52:44] *** Joins: monkey_ (~user@190.104.116.134)
[23:54:44] *** Joins: devcpu (~rusty@ec2-35-183-244-153.ca-central-1.compute.amazonaws.com)
[23:56:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[23:59:02] *** Joins: emika2 (~emika@212.102.45.121)
[23:59:49] *** Joins: georgios (~georgios@user/georgios)
