[00:12:03] *** Quits: Guest26 (~Guest26@213-67-21-71-no84.tbcn.telia.com) (Quit: Client closed)
[00:28:53] <Skarsnik> hm, how could I express Raku identifier token (look super complex in STD), I mean accepting Foo-Bar?
[00:35:50] <Skarsnik> m: grammar Foo {token TOP {<more-ident>+<ident>*}; token more-ident {<ident>+"-"?}}; say Foo.parse("foo-bar"); say Foo.parse("foo-");
[00:35:50] <camelia> rakudo-moar a90369e10: OUTPUT: «｢foo-bar｣␤ more-ident => ｢foo-｣␤  ident => ｢foo｣␤ more-ident => ｢bar｣␤  ident => ｢bar｣␤｢foo-｣␤ more-ident => ｢foo-｣␤  ident => ｢foo｣␤»
[00:36:00] <Skarsnik> sadly this match foo- x)
[00:42:28] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[00:43:32] *** Joins: seednode99 (~seednode@user/seednode)
[00:46:43] *** Joins: Guest1244 (~Guest12@109.144.24.47)
[00:49:42] <tonyo> What're you trying to accomplish skarsnik?
[00:51:02] <Skarsnik> I am doing a weird slang and I want to accept foo-bar as symbols name for sub
[00:51:43] <ugexe> <more-ident> matches 'foo-', and <ident>* matches something 0 or more times, so yeah
[00:52:27] <tonyo> Why not just ident ** 1 % '-'
[00:52:46] <tonyo> And be more explicit than ident as ugexe points out
[00:56:37] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[00:57:23] *** Joins: seednode99 (~seednode@user/seednode)
[00:59:46] <ugexe> i would probably just hard code sensible values
[00:59:53] <ugexe> x-1 isnt a value ident afterall
[01:00:15] <ugexe> valid^
[01:00:33] <tonyo> grammar Foo { token TOP { ^ <id> $ }; token id { (<[a..z0..9]>+) ** 1..2 % "-" }; }; say Foo.parse("id")??"yes"!!"no"; say Foo.parse("id1-id2")??"yes"!!"no"; say Foo.parse("id1-")??"yes"!!"no";
[01:00:34] <evalable6> tonyo, rakudo-moar a90369e10: OUTPUT: «yes␤yes␤no␤»
[01:00:41] <Skarsnik> 1 does not match ident thou
[01:00:54] <tonyo> no but "hello-world" is a valid ident
[01:01:34] <ugexe> ah it doesn't, i thought it would
[01:01:52] <Skarsnik> ident is alpha + _ I think?
[01:02:06] <Skarsnik> wait, maybe digit are also included
[01:02:10] *** Quits: qorg11 (~lain@2605:6400:c022:fa04:1312:1337:0:beef) (Ping timeout: 260 seconds)
[01:02:20] <tonyo> oh, then:
[01:02:22] <tonyo> m: grammar Foo { token TOP { ^ <id> $ }; token id { <ident> ** 1..2 % "-" }; }; say Foo.parse("id")??"yes"!!"no"; say Foo.parse("id1-id2")??"yes"!!"no"; say Foo.parse("id1-")??"yes"!!"no";
[01:02:23] <camelia> rakudo-moar a90369e10: OUTPUT: «yes␤yes␤no␤»
[01:02:49] <tonyo> that will work then ^
[01:03:39] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[01:03:41] <Skarsnik> <ident>	Basic identifier (no support for C<'> or C<->). Same as C« <.alpha> \w* »
[01:03:50] *** Joins: qorg11 (~lain@2605:6400:c022:fa04:1312:1337:0:beef)
[01:04:22] *** Joins: seednode99 (~seednode@user/seednode)
[01:04:49] *** Quits: seednode99 (~seednode@user/seednode) (Client Quit)
[01:04:57] <Skarsnik> ** Range % is neat ^^
[01:05:22] <Skarsnik> Thanks anyways ^^
[01:05:40] *** Joins: seednode99 (~seednode@user/seednode)
[01:09:08] <Skarsnik> Could be nice if we could tell comma "This class is an action for this grammar, plz complete me method name" x)
[01:28:28] *** Quits: Guest1244 (~Guest12@109.144.24.47) (Quit: Connection closed)
[01:39:58] <Skarsnik> debugging grammar is really not fun :(
[01:46:06] *** Quits: lichtkind (~lichtkind@p200300d0a7095010558a734e3aa06275.dip0.t-ipconnect.de) (Quit: Leaving)
[01:46:28] *** Joins: lichtkind (~lichtkind@p200300d0a7095010558a734e3aa06275.dip0.t-ipconnect.de)
[01:59:28] <Skarsnik> I think I am in grey teritory, chain grammar by inheriting them xD
[02:03:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[02:17:22] <Skarsnik> Ok, having <ws> mean 2 things in the 2 grammars is not great xD
[02:26:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:30:26] <tonyo> Skarsnik: with grammars it's really hard to depend on something further up
[02:30:38] <tonyo> if you're writing a slang it's better to be explicit
[02:32:47] <ugexe> https://github.com/ugexe/Perl6-Grammar--HTTP/blob/210371b64dafcca7b4eecf450489d9a992388f27/lib/Grammar/HTTP.pm6#L14-L36
[02:35:40] <Skarsnik> I have a grammar that parse snes asm instruction (and a class that 'assemble' them), Now I am doing a slang to generate Raku subs that returns me bytecode. So I reuse the Asm grammar in the slang. But I defined ws as \h* in the ASM grammar (more easier to work by explicit line)
[02:48:46] *** Joins: tbrowder_ (sid168924@id-168924.lymington.irccloud.com)
[02:54:08] <guifa> Actually, doing roles for adding tokens is pretty standard practice AFAIK
[02:57:13] *** Quits: stevied (~stevied@216.193.141.189) (Ping timeout: 256 seconds)
[03:05:42] <Skarsnik> I think what is mainly missing in Grammar is a good way to express error. Not sure what could be done, maybe having access to more context? like I am an identifier token and it fails to parse for a certain parent I could error? or even knowing what fail in your token could help x)
[03:05:51] *** Quits: lichtkind (~lichtkind@p200300d0a7095010558a734e3aa06275.dip0.t-ipconnect.de) (Quit: Leaving)
[03:08:01] <Skarsnik> like token affection { <identifier> '=' <value> ERROR<!value> { die "Missing value for affection" }} (well you could add it in the action class I guess for this)
[03:37:02] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:39:21] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[03:40:13] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:cb46:c04b:665a:c687) (Ping timeout: 240 seconds)
[03:40:41] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[03:42:22] <guifa> Skarsnik: if you look in the Raku grammar, the normal way to do it is
[03:42:45] <guifa> token foo { <bar> || <.error> }
[03:46:32] <guifa> m: grammar Foo { token TOP { [<alpha> || <.error: 'need letter'>]+ }; method error ($msg) { die $msg }; }; say Foo.parse('ab3');
[03:46:32] <camelia> rakudo-moar a90369e10: OUTPUT: «need letter␤  in method error at <tmp> line 1␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[03:46:39] <guifa> m: grammar Foo { token TOP { [<alpha> || <.error: 'need letter'>]+ }; method error ($msg) { die $msg }; }; say Foo.parse('abc');
[03:46:39] <camelia> rakudo-moar a90369e10: OUTPUT: «need letter␤  in method error at <tmp> line 1␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[03:46:42] <guifa> err
[03:50:15] <guifa> yeah, duh, it's bombing at end of string
[03:50:20] <guifa> but anyways, that's the idea
[04:26:10] *** Joins: frost (~frost@user/frost)
[04:41:38] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:87d8:fa0a:4d3d:df57)
[04:49:00] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[05:14:38] *** Quits: seednode99 (~seednode@user/seednode) (Read error: Connection reset by peer)
[05:16:58] *** Joins: seednode99 (~seednode@user/seednode)
[05:24:05] <SmokeMachine> I like doing error like this: https://github.com/FCO/bernalang/blob/572cf9e26f4162c54f807cf800584c16934e9d23/lib/Berna/Grammar.pm6#L186
[05:29:23] *** Joins: frost (~frost@user/frost)
[05:35:25] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[05:48:28] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:87d8:fa0a:4d3d:df57) (Ping timeout: 268 seconds)
[05:54:58] *** Joins: frost (~frost@user/frost)
[06:00:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[06:13:57] *** Joins: frost (~frost@user/frost)
[06:42:22] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[06:42:51] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[06:46:43] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:51:13] *** Joins: frost (~frost@user/frost)
[06:56:14] <Voldenet> >A friend twitted his terrible idea of writing a programming language entirely without special characters.
[06:56:17] <Voldenet> it exists, it's called pascal
[07:10:22] *** Quits: gabiruh (~gabiruh@vps19177.publiccloud.com.br) (Ping timeout: 260 seconds)
[07:10:37] *** Joins: gabiruh (~gabiruh@vps19177.publiccloud.com.br)
[07:11:25] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[07:13:58] *** Joins: monkey_ (~user@190.104.116.153)
[07:21:56] *** Joins: frost (~frost@user/frost)
[07:26:57] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[07:27:28] <tonyo> what does special characters mean in this instance?
[08:01:44] <Voldenet> anything not being alnum or whitespace
[08:09:25] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[08:17:36] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[08:39:38] *** Joins: mexen (uid495612@user/mexen)
[09:37:57] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:49:34] *** Joins: frost (~frost@user/frost)
[10:00:09] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[10:00:36] *** Joins: tejr (~tejr@user/tejr)
[10:40:24] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:49:30] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[10:49:42] *** Joins: tejr (~tejr@user/tejr)
[11:06:47] *** Joins: holyghost (~holyghost@109.136.39.83)
[11:08:31] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:16:22] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[11:17:15] *** Joins: seednode99 (~seednode@user/seednode)
[11:17:33] *** Joins: frost (~frost@user/frost)
[11:23:49] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:31:10] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:32:12] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:38:16] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Remote host closed the connection)
[11:40:02] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:45:55] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 256 seconds)
[11:46:17] *** Joins: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at)
[12:22:15] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[12:40:58] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:43:48] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:05:11] <discord-raku-bot> <Nemokosch#9980> Why Pascal? It has square brackets, semicolons and normal operators
[13:11:54] * lizmat clickbaits https://rakudoweekly.blog/2022/01/10/2022-01-02-perching/
[13:15:32] <discord-raku-bot> <Nemokosch#9980> anyway, it reminds me of the weird habit of obsessing over banal syntax decisions in programming languages
[13:15:32] <discord-raku-bot> <Nemokosch#9980> the law of triviality
[13:15:32] <discord-raku-bot> <Nemokosch#9980> and "it looks like a real language, it has brackets after all" as a phenomenon
[13:36:40] <El_Che> damn, Pascal was probably the first language I learnt (and forgot)
[13:36:45] <El_Che> who's calling me old??
[13:42:05] <moritz_> I learned qbasic before flirting with Pascal
[13:42:24] <discord-raku-bot> <Nemokosch#9980> It was my first language as well so surely not me
[13:42:24] <discord-raku-bot> <Nemokosch#9980> 😄
[13:43:18] <El_Che> moritz_: I didn't have a pc, but look at the source of those gorilla games :)
[13:43:48] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:43:48] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:44:54] <discord-raku-bot> <Nemokosch#9980> a part of the story is that I learned Pascal as a first language in 2011 as a first encounter with programming 😛
[13:45:04] <El_Che> 2011, wow
[13:45:22] <El_Che> let me guess. you also have vinyl LPs :)
[13:45:48] <moritz_> El_Che: I implemented extra features and levels for "nibbles" (the snake-like game in qbasic)
[13:46:12] *** Joins: stanrifkin (~stanrifki@p200300dbcf19da00ec4e6ccd02219357.dip0.t-ipconnect.de)
[13:46:15] <El_Che> oh, I remember it
[13:46:17] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[13:47:00] <stanrifkin> Anyone also get an git protocol error with 'rakubrew available'?
[13:48:36] <discord-raku-bot> <Nemokosch#9980> I bought one LP but you know, where do I put the player and the speakers? Nowadays, buying CD's is just retro enough
[13:48:49] <El_Che> true, very true
[13:48:55] <discord-raku-bot> <Nemokosch#9980> and don't write Free Pascal off 😼
[13:49:56] <El_Che> I remember all the excitement in the Linux world about Lazarus (and the meh reaction when it finally arrived) https://en.wikipedia.org/wiki/Lazarus_(software)
[13:50:36] <stanrifkin> why the "meh" reaction?
[13:50:54] <El_Che> because it was very --very-- hyped
[13:50:55] <discord-raku-bot> <Nemokosch#9980> my question exactly
[13:51:05] <stanrifkin> Lazarus is used in our school system here
[13:51:06] <El_Che> and it was rather buggy
[13:51:15] <stanrifkin> ah ok
[13:51:21] <El_Che> it may be ok now
[13:51:41] <El_Che> I am talking about 20 y agi
[13:52:30] <stanrifkin> i heard this "tourist" guy uses free pascal occasionally in competitive programming.
[13:52:44] <discord-raku-bot> <Nemokosch#9980> I don't know, I haven't used Lazarus for some time
[13:52:44] <discord-raku-bot> <Nemokosch#9980> But I support the development of Castle Engine
[13:52:45] <discord-raku-bot> <Nemokosch#9980> I think we have to be thankful for the existence of one actively developed, multiplatform game engine for Object Pascal
[13:53:01] <discord-raku-bot> <Nemokosch#9980> lately with Delphi support as well, so I heard 🙂
[13:54:02] <El_Che> Delphi was very popular
[13:54:25] <stanrifkin> "The unauthenticated git protocol on port 9418 is no longer supported." with rakubrew available
[13:54:47] <stanrifkin> i am not much into git stuff. Should I set GIT_PROTOCOL environment variable?
[13:54:48] <discord-raku-bot> <Nemokosch#9980> Also, I tend to pick Lazarus software out there
[13:54:49] <discord-raku-bot> <Nemokosch#9980> like PyScripter or Cudatext
[13:55:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:4f29:e68c:50c9:fe2)
[13:56:52] <discord-raku-bot> <Nemokosch#9980> I wonder what you are doing
[13:57:49] *** Joins: frost (~frost@user/frost)
[14:02:29] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[14:12:32] *** Joins: frost (~frost@user/frost)
[14:23:01] <stanrifkin> GIT_PROTOCOL=https solved my problem. I looked into the rakubrew source code. It defaulted to "git". 
[14:25:43] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[14:31:29] <Skarsnik> this is weird
[14:32:06] *** Joins: frost (~frost@user/frost)
[14:56:53] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:05:12] <El_Che> I would expect to default to https, idd
[15:05:15] <El_Che> raise an issue?
[15:10:52] <stanrifkin> i don't know how :)
[15:11:23] <stanrifkin> i think rakubrew crew are reading this and it gets corrected soon
[15:12:13] <El_Che> https://github.com/tadzik/rakudobrew/issues
[15:12:28] <El_Che> https://github.com/tadzik/rakudobrew/issues/69
[15:12:31] <El_Che> there is one
[15:13:27] <stanrifkin> El_Che: ah yeah. already addressed
[15:14:18] <stanrifkin> El_Che: in 2015? :)
[15:16:23] <El_Che> I haven't used rakudobrew in a while, I don't know how active it is
[15:17:08] <stanrifkin> El_Che: what do you use? I am used to perlbrew. So natural I use rakubrew.
[15:17:17] *** Joins: frost (~frost@user/frost)
[15:17:24] <El_Che> I build Linux packages
[15:21:21] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[15:21:58] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:25:46] <discord-raku-bot> <Nemokosch#9980> I thought rakubrew was the way to go
[15:26:15] <discord-raku-bot> <Nemokosch#9980> https://github.com/Raku/App-Rakubrew
[15:27:50] <discord-raku-bot> <Nemokosch#9980> rakudobrew is an older version
[15:27:50] <discord-raku-bot> <Nemokosch#9980> the github page actually says that
[15:37:56] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:44:27] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[16:23:52] <Geth> ¦ App-Rakubrew: a1e15f493c | (Patrick Böker)++ | 2 files
[16:23:52] <Geth> ¦ App-Rakubrew: Switch Git protocol to https
[16:23:52] <Geth> ¦ App-Rakubrew: 
[16:23:52] <Geth> ¦ App-Rakubrew: This follows fact that GitHub disabled the `git` protocol.
[16:23:52] <Geth> ¦ App-Rakubrew: review: https://github.com/Raku/App-Rakubrew/commit/a1e15f493c
[16:23:53] <Geth> ¦ App-Rakubrew: fb7d4c5297 | (Patrick Böker)++ | .circleci/config.yml
[16:23:53] <Geth> ¦ App-Rakubrew: Update CircleCI MacOS base image
[16:23:54] <Geth> ¦ App-Rakubrew: 
[16:23:56] <Geth> ¦ App-Rakubrew: The previous one is to be removed.
[16:23:58] <Geth> ¦ App-Rakubrew: review: https://github.com/Raku/App-Rakubrew/commit/fb7d4c5297
[16:24:00] <Geth> ¦ App-Rakubrew: ccfd316ee1 | (Patrick Böker)++ | 4 files
[16:24:02] <Geth> ¦ App-Rakubrew: Version 26
[16:24:04] <Geth> ¦ App-Rakubrew: review: https://github.com/Raku/App-Rakubrew/commit/ccfd316ee1
[16:37:52] *** Joins: frost (~frost@user/frost)
[16:59:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:09:47] *** Joins: lgtaube (~lgt@213-67-21-71-no84.tbcn.telia.com)
[17:11:53] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:40:02] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[18:18:46] *** Quits: MasterDuke (~MasterDuk@94.0.188.131) (Ping timeout: 256 seconds)
[18:22:02] *** Quits: qorg11 (~lain@2605:6400:c022:fa04:1312:1337:0:beef) (Ping timeout: 268 seconds)
[18:23:42] *** Joins: qorg11 (~lain@2605:6400:c022:fa04:1312:1337:0:beef)
[18:36:37] *** Joins: MasterDuke (~MasterDuk@94.0.188.131)
[18:38:13] *** Quits: stanrifkin (~stanrifki@p200300dbcf19da00ec4e6ccd02219357.dip0.t-ipconnect.de) (Quit: Leaving)
[18:40:34] *** Joins: jgaz (~jgaz@2600:8805:d980:7620::9e0)
[18:41:24] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:51:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[19:01:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:17:49] *** Quits: cono (~cono@betacoda.cono.org.ua) (Quit: Lost terminal)
[19:24:30] *** Joins: razetime (~quassel@49.207.203.87)
[19:42:13] *** Quits: holyghost (~holyghost@109.136.39.83) (Quit: This computer has gone to sleep)
[20:01:11] *** Quits: kjp (~kevin@n175-36-89-183.mrk2.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[20:03:40] *** Quits: jgaz (~jgaz@2600:8805:d980:7620::9e0) (Quit: Leaving)
[20:04:33] *** Joins: kjp (~kevin@n175-36-89-183.mrk2.qld.optusnet.com.au)
[20:08:15] <thowe> I've been looking for a while for a good academic example or discussion about how one should go about building a CLI...  Like a shell or really any command interpreter.  Also think Juniper or Cisco switch CLI.  Is there a "pattern" for that that I would be naive for not using?
[20:09:03] <thowe> I want all the fancy things like command auto completion etc...
[20:10:05] <thowe> Do I just build a loop and a data structure that has the commands in it and somehow knows how to dispatch to the right mehtod for them?  That sounds like the naive solution but I dunno.
[20:34:32] <jercos> that certainly sounds like a working start to me. I don't know of an absolute standard for interpreters or repls, and well... some existing shells would make pretty poor examples to copy the structure of :p
[20:38:49] <jercos> for most shells I know of, the first word being auto-completed is from a list of valid commands, while completion for a command's arguments are either generic (into the local filesystem) or entirely determined by the specific command.
[20:40:05] <jercos> using a naive initial structure doesn't rule out building on more complex functionality
[20:44:13] <thowe> I guess.  I just don't want to put something out there that's going to be frowned upon.
[20:45:51] <MasterDuke> you could look at some existing ones. e.g., zef, mi6
[20:46:42] <thowe> zef has a cli?
[20:49:16] <tonyo> zef has a cli.
[20:50:37] <thowe> how do you start it?  it just seems to take commands and exit.
[20:51:27] <MasterDuke> ah, you want an interactive cli, like the repl
[20:51:58] <thowe> yeah...  Otherwise I might look for something like Perl's App::Cmd
[20:52:18] <thowe> wish there was an App::Cmd for interactive shell framework.
[20:53:26] <thowe> psql CLI is a good example of what I want I guess, but not so many features needed.
[20:57:22] *** Quits: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at) (Remote host closed the connection)
[20:57:30] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[20:58:34] *** Quits: razetime (~quassel@49.207.203.87) (Ping timeout: 256 seconds)
[21:02:26] <thowe> looks like Arne Sommer might have written one for some kind of transportation planning thing...  I might look at that.
[21:04:57] <guifa> for Raku, the nice thing is that you can run on a loop and have a grammar parse stuff, which can make dispatching much cleaner/straightforward
[21:07:28] <thowe> guifa, OK, yeah...  That sounds like something I want to do.  I also feel like I need to capture every character entered, though.  So I can do tab completion.  and if not a special character, just somehow do nothing and let it sit on the command line.  I'm a little fuzzy on how that would work.
[21:08:13] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 240 seconds)
[21:08:19] <solitario> n/20
[21:08:43] <guifa> yeah, that's something I'm not as sure how to do.  It's super easy if you're okay waiting for the enter key ha
[21:10:13] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[21:11:53] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[21:13:06] <thowe> Sommer's networkplanner command uses "Linenoise", which may do some of these things for you(?)
[21:16:36] <thowe> I really need to get it through my head what a "callback" is.
[21:17:51] <guifa> Yeah, trick with linenoise is it's a binary dependency, rather than pure Raku. But given the complexities of doing anything other than "type command, hit enter, process command", it's understandable it's not exactly a built in in most languages
[21:18:27] <guifa> the niche for a nice CLI library would be one that provides for a fallback if linenoise isn't available for some reason
[21:18:45] *** Joins: lucasb (uid333435@id-333435.hampstead.irccloud.com)
[21:27:53] <[Coke]> wasn't someone already working on that?
[21:28:01] <[Coke]> japhb, maybe?
[21:31:25] <thowe> I'm happy to test maybe.  Hitting tab key in networkplanner crashes it.
[21:33:40] <thowe> what's japhb's cpan name?
[21:34:29] *** Joins: cognominal (~cognomina@aaubervilliers-652-1-164-250.w82-121.abo.wanadoo.fr)
[21:36:23] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:38:21] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:40:14] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[21:53:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[21:54:54] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[21:58:32] <thowe> ah, this?  https://raku.land/zef:japhb/Terminal::LineEditor
[22:05:03] <thowe> OK, japhb has some neat stuff.  they can have all my stars.
[22:12:45] <guifa> haha there are osme really nifty modules out there
[22:16:39] *** Quits: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 250 seconds)
[22:20:05] *** Joins: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net)
[22:35:49] <tonyo> there's also a readline module
[22:36:11] <tonyo> either is worth using so you don't need to handle `up` key or emulate history
[22:37:22] *** Joins: [Coke]_ (~coke@172.58.224.117)
[22:37:26] <thowe> a pure raku solution would be nifty, but I'm asking japhb about command completion and disambiguation of short forms...  I don't see a way to do it from his README.
[22:40:00] *** Quits: [Coke] (~coke@172.58.238.201) (Ping timeout: 256 seconds)
[22:43:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:49:16] <tonyo> it's one of those simple seeming problems that gets out of control with features quickly
[22:57:20] *** Joins: mexen (uid495612@user/mexen)
[22:59:27] <thowe> yeah, that's why I'm looking for a bottled solution :)
[23:25:25] <discord-raku-bot> <stevied#8273> someone should nudge whoever is in charge of homebrew package to get it updated: https://formulae.brew.sh/formula/rakudo-star
[23:25:38] <discord-raku-bot> <stevied#8273> the version I was using was badly broken when trying to load modules
[23:27:29] <discord-raku-bot> <stevied#8273> I'm on monterey
[23:28:12] <El_Che> use rakudo instead instead
[23:28:24] <El_Che> (that's what I use when in macos)
[23:29:33] <discord-raku-bot> <stevied#8273> I'm using the binary
[23:30:13] <guifa> I really need to figure out a way to do a DMG or .pkg install for Rakudo.  Gatekeeper is annoying AF with command-line only stuff
[23:30:53] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[23:31:36] *** Joins: seednode99 (~seednode@user/seednode)
[23:33:41] <discord-raku-bot> <stevied#8273> that would be nice.
[23:35:58] <discord-raku-bot> <stevied#8273> what's gatekeeper?
[23:47:01] <perryprog> macOS thingie that does security stuff with installing stuff
[23:47:26] <perryprog> it's actually quite good but can be a huge pain when installing DMGs/.pkgs from unknown sources (which is common for devs)
[23:47:33] <perryprog> (which I think is quite ironic
[23:48:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[23:51:22] <guifa> perryprog it's not terrible as long as the whole package is signed.  the problem is, a CLI thing isn't an application package
[23:51:33] <perryprog> Right
[23:51:59] <guifa> so from what I was reading, you basically create a dumy application of sorts, and it can sign its command line stuff
[23:52:18] <guifa> anyways, I'm sure once I figure it out it'll be easy to make releases just.... I need to stop adding new projects to my plate
[23:52:39] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 250 seconds)
[23:54:53] <perryprog> guifa, I believe Julia actually does exactly what you're looking to do
[23:56:00] <perryprog> I have a Julia.app that basically just starts julia in Terminal.app—I personally have never used it, but I'm going guess they're doing what you're describing there
[23:56:25] <discord-raku-bot> <stevied#8273> oh, right, you have to do that security thing
[23:56:26] <discord-raku-bot> <stevied#8273> I have an apple developer account
[23:56:26] <discord-raku-bot> <stevied#8273> maybe that would help
[23:57:14] <guifa> I'd imagine to do "julia foo" on command line they'd need to adjust the  path var.  Not sure if the app itself can do that, or if it that would be handled by the installer.
[23:59:40] <perryprog> guifa if you look at brew cat --cask julia you can see what exactly is being done
