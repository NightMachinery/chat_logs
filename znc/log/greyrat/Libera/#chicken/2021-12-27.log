[00:12:14] <vandusen> [eggs] Error fetching CHICKEN 5 .release-info file for the following eggs: srfi-197, srfi-179, srfi-160, srfi-144, srfi-143, srfi-105, r7rs-tools, icu, espeak, chicken-update, chalk
[00:51:17] *** Quits: nikola2 (~nikola2@93-87-191-240.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[01:12:17] <vandusen> [eggs] Error fetching CHICKEN 5 .release-info file for the following eggs: srfi-197, srfi-179, srfi-160, srfi-144, srfi-143, srfi-105, r7rs-tools, icu, espeak, chicken-update, chalk
[01:35:39] *** Quits: klovett (~klovett@107.127.24.145) (Quit: ZZZzzz…)
[01:48:05] *** Joins: ublx (~ublx@user/ublx)
[01:49:17] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:30fe:eea7:a0bb:e650) (Ping timeout: 240 seconds)
[01:58:36] *** Joins: klovett (~klovett@107.115.32.130)
[02:00:32] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[02:12:27] <vandusen> [eggs] Error fetching CHICKEN 5 .release-info file for the following eggs: srfi-197, srfi-179, srfi-160, srfi-144, srfi-143, srfi-105, r7rs-tools, icu, espeak, chicken-update, chalk
[02:18:47] *** Joins: m455 (~m455@user/m455)
[03:12:36] <vandusen> [eggs] Error fetching CHICKEN 5 .release-info file for the following eggs: graph-dfs
[03:27:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:38:02] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[03:57:52] *** Joins: Soni (~quassel@autistic.space)
[04:45:49] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[05:02:25] *** Joins: m455 (~m455@user/m455)
[06:13:37] <vandusen> [eggs] Error fetching CHICKEN 4 .release-info file for the following eggs: 9ML-toolkit
[06:16:27] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 250 seconds)
[06:28:34] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[08:05:21] <s-liao> Zipheir how can I test the read-bytestring-or-vector function?
[08:06:03] <s-liao> Like (open-input-string "#u8\"lorem\"")
[08:06:54] <s-liao> (read-bytestring-or-vector (open-input-string "#u8\"lorem\"" )）
[08:07:48] <Zipheir> s-liao: Yes, that should work as a test.
[08:11:46] <vandusen> [eggs] Error fetching CHICKEN 4 .release-info file for the following eggs: unitconv
[08:15:23] <s-liao> But there is not any output.
[08:16:20] <Zipheir> It should return the bytestring read or raise an error.  It doesn't print anything.
[08:19:17] <s-liao> I did not (import srfi-207) totally. But load error.scm, read-syntax.scm and parse.scm.
[08:19:31] <Zipheir> That's enough.
[08:19:59] <Zipheir> (I think.  I haven't tried it.)
[08:20:35] <s-liao> Okay.Thanks
[08:21:22] <Zipheir> Bytestrings with hex escapes are definitely still broken in the egg.  We have to figure out how to read from the unescaped string.
[08:22:07] <s-liao> yeah. Could you have a try when you have time?
[08:22:44] <s-liao> The function is there. we have to test and verify.
[08:23:56] <s-liao> What I thought is that have the input port. Then parse it.
[08:26:35] <Zipheir> I do want to fix it soon.
[08:28:38] <Zipheir> I wasn't accurate there.  We are reading directly from the port with read-char.  There's no call to read-string in parse.scm other than that to read the #u8 prefix.
[08:29:53] <Zipheir> So what's expanding the hex sequences?  That's what I want to figure out.
[08:30:10] <Zipheir> But not tonight.  It's late here.
[08:33:13] <s-liao> you mean it has to import read-string as well
[08:35:56] <Zipheir> Well, yes.  I mean that it's not parsing with read-string; it reads the bytestring char-by-char.
[08:37:28] <s-liao> Yes, But I was wondering there is not warning message as I load parse.scm file
[08:37:46] <s-liao> Let me try it again.
[08:38:27] <Zipheir> If you're loading it in csi, read-string is probably already imported.
[08:39:20] *** Joins: elflng (~elflng@5.28.137.182)
[08:47:41] <s-liao> Yes, I am loading one by one.
[08:56:15] <Zipheir> It's probably easiest to just test read-textual-bytestring.  read-bytestring-or-vector is just a wrapper around that.
[08:57:05] <s-liao> okay
[08:58:01] <Zipheir> You'll find a lot of tests for read-textual-bytestring in tests/srfi-207-test.scm
[08:58:10] <Zipheir> (They all pass.)
[09:03:49] <s-liao> yes, it is about the way I called the read-textual-bytestring, it should be like (read-textual-bytestring #t (open-input-string "#u8\"lorem\"" ))
[09:06:37] <Zipheir> OK, this is weird.  Now this works: #u8"\x29;" => #u8(#x29)
[09:06:43] <Zipheir> I didn't change anything...
[09:08:17] <s-liao> What happened?
[09:08:36] <Zipheir> I must have been loading something after srfi-207 that messed up the read hook.
[09:08:43] <Zipheir> Let me see if it works in compiled code.
[09:09:19] <s-liao> Yes, we have to load one by one.
[09:10:24] <Zipheir> Yes, it works.
[09:10:28] <Zipheir> Nice!
[09:10:37] <Zipheir> Read hooks are very tricky.
[09:11:43] <s-liao> What about #u8"\x29 jjj"?
[09:11:43] <vandusen> [eggs] Error fetching CHICKEN 4 .release-info file for the following eggs: posix-shm
[09:11:56] <Zipheir> s-liao: Could you compile this http://ix.io/3JDj with csc -X srfi-207 and see if it prints #u8(41 40 48) ?
[09:12:23] <s-liao> Okay.
[09:13:56] * Zipheir remembers to upgrade to CHICKEN 5.3.0.
[09:14:06] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[09:14:53] <s-liao> #u8(41 40 48)
[09:15:11] <s-liao> That is the output
[09:15:23] <Zipheir> Perfect.
[09:15:38] <Zipheir> Thanks.  As for your example, you need a ; after \x29
[09:16:00] <s-liao> Yes. sure. did you change any code?
[09:16:11] <Zipheir> No.
[09:16:26] <s-liao> Okay
[09:16:42] <Zipheir> As I said, I must have been loading things in the wrong order when the hex sequences were breaking.  I'm still worried that it's a bit fragile.
[09:17:19] <s-liao> What did you load?
[09:17:38] <s-liao> In REPL?
[09:17:54] <Zipheir> Yes.  I forget what I did. 8-/
[09:18:03] <Zipheir> I should have written down steps to reproduce.
[09:18:19] <Zipheir> Thanks for testing.
[09:21:22] <Zipheir> s-liao: Also, if there is anything in the wiki page (https://wiki.call-cc.org/eggref/5/srfi-207) that you think could be improved, please let me know.  Most of it is still just the SRFI.
[09:21:31] <Zipheir> (Not to disparage jcowan's prose!)
[09:22:32] <s-liao> Sure.
[09:48:47] <s-liao> Zipheir just load one by one. like
[09:48:51] <s-liao> (import (only srfi-34 raise))
[09:49:04] <s-liao> (load "/root/.cache/chicken-install/srfi-207/srfi/207/error.scm")
[09:49:21] <s-liao> (import (only srfi-145 assume))
[09:50:29] <s-liao> (import (only (scheme base) write-u8 read-string call-with-port open-output-bytevector get-output-bytevector))
[09:50:59] <s-liao> Then
[09:51:00] <s-liao> (read-textual-bytestring #t (open-input-string "#u8\"\x29;\x28;\x30;\""))
[09:51:08] <s-liao> It got broken
[09:51:17] <s-liao> #u8(41 59 40 59 48 59)
[09:51:25] <s-liao> That is the output
[09:56:38] <Zipheir> Aha.
[09:58:14] <Zipheir> It must be the (scheme base) import that overrides the read hook.
[09:59:13] <Zipheir> Argh.  I think people will have to be careful to load srfi-207 after anything else with read-syntax.
[09:59:29] <s-liao> Yes. let me try it again.
[10:00:20] <s-liao> you mean that read-syntax is reimported?
[10:01:09] <s-liao> in loading  srfi-207
[10:03:07] <s-liao> Or can we add the warning message, like that read-syntax is re-imported, such like that?
[10:03:40] <Zipheir> I don't know how.  The egg can't tell if another library overrides ##sys#user-read-hook, AFAIK.
[10:04:58] <Zipheir> I'll have to ask Bunny351 or some other CHICKEN sage what can be done.
[10:05:51] <Zipheir> Read syntax isn't exported or imported, unfortunately.  It just gets picked up by the reader.
[10:09:02] <s-liao> Okay. You mean that in read-syntax, there is not exported or imported concept. it is always in the hand.
[10:10:55] <s-liao> In like add the extra to read-syntax, then from one point, get back the original read-syntax.
[10:12:10] <vandusen> [eggs] Error fetching CHICKEN 4 .release-info file for the following eggs: correios, chunk-vector, call-with-query
[10:13:48] <vandusen> [eggs] Error fetching CHICKEN 5 .release-info file for the following eggs: scheme2c-compatibility, posix-shm
[10:13:50] <s-liao> My suggest is that add new one read-from-string, separately the original reader   Not add the extra to original reader.
[10:18:28] <Zipheir> Can you give an example?
[10:21:51] <Zipheir> If you look at read-syntax.scm, you can see how it's done now.
[10:22:17] <s-liao> Really?
[10:23:51] <Zipheir> ?
[10:26:20] <s-liao> That is just user-read-hook, like you did in the srfi-207
[10:26:45] <Zipheir> Yes.  Do you have a different idea?
[10:28:13] <s-liao> Like in Elisp, (read-from-string "(#x29 #x28)")
[10:29:13] <Zipheir> I don't get it.  You'd use (read-textual-bytestring #t (open-input-string ...)) for that?
[10:29:52] <s-liao> Let me think
[10:31:15] <Zipheir> Hopefully someday SRFI 207 bytestring notation gets added to core CHICKEN and we can stop messing around with read hooks.
[10:33:30] <s-liao> I guest, it would be same thing, the read have not identified the case ,which is the bytestring notation .
[10:36:16] <s-liao> probly, we should identify the bytestring notation, then parse it.
[10:40:14] <s-liao> Now seem we are at the phrase, in which is that accept  (read-textual-bytestring #t (open-input-string ...)) in certain case.
[10:41:42] <Zipheir> Thanks.  I'll think about it.  Time for sleep here.
[10:42:00] <s-liao> Sure.
[11:09:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[11:12:14] <vandusen> [eggs] Error fetching CHICKEN 4 .release-info file for the following eggs: sublevel, jsmin, amazon-s3
[11:57:59] *** Joins: rgherdt (~rgherdt@ip5f5af447.dynamic.kabel-deutschland.de)
[12:17:22] <vandusen> SPAM! SPAM! SPAM! by freee
[12:32:05] *** Joins: klovett_ (~klovett@107.115.32.130)
[12:34:37] *** Quits: klovett (~klovett@107.115.32.130) (Ping timeout: 240 seconds)
[13:48:04] *** Joins: nikola2 (~nikola2@93-87-191-240.dynamic.isp.telekom.rs)
[14:00:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:09:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[14:10:14] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:11:33] <vandusen> [eggs] Error fetching CHICKEN 4 .release-info file for the following eggs: cmark
[14:27:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:05:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:12:42] <vandusen> [eggs] Error fetching CHICKEN 5 .release-info file for the following eggs: graph-cycles
[15:23:00] <Bunny351> Zipheir: read-syntax is not directly dependent on import. changing the read-hook is done in a module's implementation part. if srfi-207 is loaded after srfi-4, then everything should work
[15:23:51] <Bunny351> if this turns out to be too much of a hassle, we might consider supporting #u8"..." in core (or srfi-4) to avoid multiple read-hooks getting into each other's way.
[15:24:17] <Bunny351> I guess #u8"..." notation is general and useful enough to support it directly.
[15:28:18] <s-liao> Bunny351 The issue we found out is that hex of read-syntax  case in the srfi-207
[15:29:25] *** Joins: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at)
[15:30:03] <Bunny351> ok
[15:30:14] <s-liao> Like (read-textual-bytestring #t (open-input-string #u8\"\x29;\x28;\x30;\""))
[15:30:29] <s-liao> It can not work.
[15:30:44] <s-liao> But in this http://ix.io/3JDj, it works
[15:37:54] <s-liao> (read-textual-bytestring #t (open-input-string "#u8\"\x29;\x28;\x30;\""))
[15:45:56] <Bunny351> sorry, I don't understand
[15:50:29] <s-liao> We tested the read-textual-bytestring function , in some case, it can not work.
[15:51:05] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Quit: WeeChat 3.3)
[15:51:46] <s-liao> we were worry about the user read syntax will get broken.
[15:51:59] <s-liao> after import srfi-207
[15:52:08] *** Joins: xaltsc_ (~xaltsc@user/xaltsc)
[15:53:04] *** Quits: xaltsc_ (~xaltsc@user/xaltsc) (Client Quit)
[15:53:40] <s-liao> We were worry about user-read-hook will get broken in the next module after import  srfi-207
[15:55:23] <s-liao> One more thing is that if in chicken support read-from-string like Elisp has.
[15:56:36] *** Joins: xaltsc_ (~xaltsc@user/xaltsc)
[16:03:21] <s-liao> The test case I made is that the string port, for srfi-207. it can not be handled.
[16:04:27] <s-liao> He also had a fail case, but he did not record the steps as he was playing with srfi-207.
[16:06:17] <s-liao> Basically, it is about the broken reader as we have user-read-hook.How can be it handled?
[16:12:03] <vandusen> [eggs] Error fetching CHICKEN 4 .release-info file for the following eggs: tween, seulex, matlab
[16:13:59] *** xaltsc_ is now known as xaltsc
[16:17:03] <vandusen> [eggs] Error fetching CHICKEN 5 .release-info file for the following eggs: cjson
[16:19:25] <Bunny351> s-liao: the "\" before the "x"es need to be escaped, too
[16:20:16] <Bunny351> "#u8\"\\x29;\\x28;\\x30;\"")
[16:20:24] <Bunny351> leaning toothpick syndrome
[16:20:29] <s-liao> like this (read-textual-bytestring #t (open-input-string "#u8\"\\x29;\\x28;\\x30;\""))
[16:20:41] <Bunny351> just use "read"
[16:20:44] <Bunny351> yes
[16:21:07] <s-liao> Okay. I am going to try it.
[16:22:38] <s-liao> #u8"\x29;\x28;\x30;"
[16:22:50] <s-liao> That is the output.
[16:23:50] <s-liao> As he expected, it is #u8(41 40 48)
[16:24:07] <Bunny351> is this what you want?
[16:26:23] <s-liao> (define mys #u8"\x29;\x28;\x30;")
[16:26:24] <s-liao> (display mys)
[16:26:36] <s-liao> The output is #u8(41 40 48)
[16:26:53] <s-liao> That is why I said that is what he wanted.
[16:33:26] <s-liao> Maybe we should talk about together.
[16:34:00] <s-liao> Not sure I missed some point.
[16:42:15] <Bunny351> the output looks ok - were you assuming it should be hex notation again?
[16:46:47] <s-liao> yes.
[16:47:19] <Bunny351> that syntax is only for reading, the result is a normal u8vctor
[16:47:48] <s-liao> (read-textual-bytestring #t (open-input-string "#u8\"\\x29;\\x28;\\x30;\"")) works
[16:47:50] <Bunny351> the srfi-207 document says:
[16:48:37] <Bunny351> A Scheme implementation which supports string-notated bytevectors may not by default use this notation when any of the write family of procedures is called upon a bytevector or upon another datum containing a bytevector.
[16:52:11] <Bunny351> so the reading works, the external representation shown on the repl is the equivalent bytevector, just in the default notation
[16:53:43] <s-liao> yes. it like print or display
[16:54:08] <s-liao> I am trying 'print'
[17:13:34] <vandusen> [eggs] Error fetching CHICKEN 4 .release-info file for the following eggs: salmonella-diff
[17:15:51] <s-liao> (read (open-input-string "(list 1 2 3)")
[17:15:55] <s-liao> can not work
[17:28:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:d4c4:3787:7442:bb18)
[17:28:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:d4c4:3787:7442:bb18) (Changing host)
[17:28:13] *** Joins: skapata (~Skapata@user/skapata)
[17:30:00] <s-liao> Without srfi-207, (define mys "#u8\"\\x29;\\x28;\\x30;\"")  (display mys)
[17:30:39] <s-liao> The output is also #u8"\x29;\x28;\x30;"
[17:44:57] <s-liao> Anyway, at least (read-textual-bytestring #t (open-input-string "#u8\"\\x29;\\x28;\\x30;\""))  works after loading srfi-207
[17:50:12] <vandusen> SPAM! SPAM! SPAM! by freee
[17:53:33] <s-liao> yes. we still need to work on that read case.
[17:58:56] <s-liao> My suggestion is that if we have the notation string, it is better to have read-from-string.
[18:00:12] <s-liao> Now in current situation, in srfi-207 egg, it works.
[18:00:32] <s-liao> like (read-textual-bytestring #t (open-input-string "#u8\"\\x29;\\x28;\\x30;\""))
[18:01:42] <s-liao> But for the user-read-hook, it looks without srfi-207,(define mys "#u8\"\\x29;\\x28;\\x30;\"")  (display mys)
[18:02:14] <s-liao> (read (open-input-string "(list 1 2 3)") can not work. that is the other question.
[18:02:46] <s-liao> But for the user-read-hook, it looks like without srfi-207,(define mys "#u8\"\\x29;\\x28;\\x30;\"")  (display mys)
[18:03:13] <s-liao> But for the user-read-hook, it looks like the output is same to without srfi-207,(define mys "#u8\"\\x29;\\x28;\\x30;\"")  (display mys)
[18:03:34] <s-liao> Have to get sleep.
[18:03:43] <s-liao> see your guys later.
[18:03:47] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:10:41] *** Joins: klm (root@2a01:7e01::f03c:91ff:fe3f:a1d6)
[18:12:16] <vandusen> [eggs] Error fetching CHICKEN 4 .release-info file for the following eggs: pyffi, posix-shm, aima
[18:13:23] <vandusen> [eggs] Error fetching CHICKEN 5 .release-info file for the following eggs: graph-bfs
[19:11:56] <vandusen> [eggs] Error fetching CHICKEN 4 .release-info file for the following eggs: matlab, landauer
[19:17:57] <Bunny351> dammit. I just can't figure out what the problem is...
[20:47:31] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:30fe:eea7:a0bb:e650)
[20:47:39] *** Quits: rgherdt (~rgherdt@ip5f5af447.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[21:07:32] *** Joins: tooDumbToFleng (~alexshend@pd9f03d60.dip0.t-ipconnect.de)
[21:07:53] *** tooDumbToFleng is now known as alexshendi
[21:17:36] <Zipheir> Bunny351: Thanks for taking a look.  I gave it another shot, and I don't think anything's actually broken.
[21:19:54] <Zipheir> Surprisingly, there's no problem with importing srfi-4 after srfi-207 in compiled code.  s-liao's supposedly broken example was only broken because they forgot some backslashes.
[21:21:59] <Zipheir> (display #u8"\x29;") prints #u8(41), as expected, regardless of import order.  So that's nice.
[21:27:43] <Bunny351> yes, that's how it looks to me.
[21:28:51] <Bunny351> I guess this is just a misunderstanding
[21:31:46] <Zipheir> Sorry for the noise.
[21:32:53] <Zipheir> All that being said, I don't know if I think bytestring notation is really generally useful enough to be core syntax.
[21:33:27] <Zipheir> I don't work with bytevector literals enough to have an opinion.
[21:46:20] <alexshendi> Good eveninf!
[21:48:51] <mario-goulart> CHICKEN is good even in C, not in F.
[22:27:53] *** Quits: klovett_ (~klovett@107.115.32.130) (Ping timeout: 256 seconds)
[22:30:09] *** Joins: klovett (~klovett@107.115.32.130)
