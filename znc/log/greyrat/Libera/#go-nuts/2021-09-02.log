[00:00:38] *** Joins: flynn (~mcbloch@user/flynn)
[00:01:40] *** Joins: elf_fortrez (~elf_fortr@adsl-64-237-239-250.prtc.net)
[00:03:35] *** Quits: elf_fortrez (~elf_fortr@adsl-64-237-239-250.prtc.net) (Client Quit)
[00:15:10] *** Joins: oxum (~oxum@106.203.195.217)
[00:15:25] <ikke> Interesting that generics work here, but using a list of interface types does not: https://go2goplay.golang.org/p/bDMIo4KERTS
[00:15:51] *** Quits: wim (~wim@42.be) (Ping timeout: 276 seconds)
[00:17:15] <fizzie> It kind of has to. It wouldn't be type-safe at all if you could pass a []Foo to a function that takes a []fmt.Stringer just because Foo implements fmt.Stringer.
[00:17:51] *** Quits: aead (~aead@user/aead) (Ping timeout: 244 seconds)
[00:18:21] <ikke> In what sense?
[00:18:26] *** Joins: mnx|aw (~mnxaw@94.11.23.235)
[00:18:37] *** Parts: sweb (~sweb@static.187.181.76.144.clients.your-server.de) ()
[00:18:45] <fizzie> Because the function should be able to store any other fmt.Stringer in the []fmt.Stringer it receives.
[00:18:54] *** Joins: fanis30 (~anon@adsl-180.37.6.1.tellas.gr)
[00:18:57] <fizzie> But it's "really" a []Foo, so you can't put an arbitrary fmt.Stringer in it.
[00:18:59] *** Parts: mnx|aw (~mnxaw@94.11.23.235) ()
[00:19:05] <ikke> Ah, because the list is not immutable
[00:19:21] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[00:19:28] *** Joins: dr0n (~mnxaw@94.11.23.235)
[00:19:49] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[00:20:05] <fizzie> Yes. Well, also from the perspective of what a slice *is*. A []fmt.Stringer needs to be essentially a pointer to an array of fmt.Stringer objects, plus two sizes (cap and len).
[00:21:33] <ikke> It does work indeed if I make it a []fmt.Stringer
[00:21:56] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[00:22:27] *** Joins: mertyildiran (~mertyildi@88.248.149.182)
[00:22:52] <mertyildiran> Hi, I have an `io.ReadFull(r, buf)` that leaking memory when `err != nil`. How can I fix this?
[00:23:17] <mertyildiran> I tried `io.Copy(ioutil.Discard, r)` and `buf = nil` but I still see a growth in `pprof`.
[00:24:15] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1006) (Quit: ZNC 1.8.2 - https://znc.in)
[00:25:05] <bookworm> what's the reader?
[00:25:09] <bookworm> you might need to close it
[00:26:30] <mertyildiran> bookworm: it's `io.Reader` so I need to call `.Close()`?
[00:27:01] <bookworm> the interface is a io.reader, sure. But that doesn't mean that the actual type doesn't have and require a Close method
[00:27:34] <bookworm> hence the question what your reader actually is, not in the interface view but the actual concrete type
[00:28:21] <mertyildiran> bookworm: concrete type is a `struct` with only `R io.Reader` field.
[00:28:46] <ikke> Where does R come from?
[00:29:02] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[00:29:32] <bookworm> (check the instantiation of the object, that sounds like an embedded thing when you create it)
[00:29:34] <mertyildiran> ikke: it's a `*bufio.Reader`.
[00:30:19] <bookworm> that's yet another wrapper type
[00:30:20] <Tv_> ikke: also, converting []T to []I is an expensive operation, Go doesn't want to hide those
[00:30:38] <Tv_> ikke: https://golang.org/doc/faq#convert_slice_of_interface
[00:30:59] <ikke> nod
[00:32:03] <mertyildiran> bookworm: the leaking method is this https://bpa.st/FUMA Do you have any idea?
[00:32:32] <Tv_> mertyildiran: how did you determine it to be "leaking memory"
[00:32:43] <mertyildiran> bookworm: I tried `bf.Body = nil` and `io.Copy(ioutil.Discard, r.R)` to discard.
[00:32:45] <Tv_> sounds more like "generating garbage", and the gc will free it later
[00:33:34] <mertyildiran> Tv_: I determine through `pprof`. It falls into line 8 but `pprof` reports a grow in this method.
[00:34:21] <mertyildiran> Tv_: it's a method that's called rapidly. I'm not sure how GC works but I need to forcefully free the memory.
[00:34:37] <Tv_> mertyildiran: i'll give you a choice of inaccurate profiler, inaccurate reporting, or using tool wrong ;)
[00:34:48] <Tv_> mertyildiran: yes it allocates a lot, and is wasteful. that's not the same as leak.
[00:34:50] <mertyildiran> To give more context this is the source https://github.com/streadway/amqp/blob/master/read.go#L431-L442
[00:35:23] <Tv_> mertyildiran: you probably want an API that is not based allocating a []byte for every frame
[00:35:25] <mertyildiran> Tv_: but I'm sure that it's not freed until I close the program.
[00:35:32] <Tv_> sure, how
[00:36:04] <Tv_> also, https://go.dev/blog/pprof
[00:36:11] <mertyildiran> Tv_: I'm tracking the memory usage from my system monitor. It's spiking visibly and not freeing.
[00:36:23] <bookworm> also do note that io.Copy will do exactly nothing if the reader is already depleted or throws an error
[00:36:27] <Tv_> mertyildiran: that's once again not the same as "leaking memory"
[00:36:32] *** Joins: gggp (~textual@114.245.106.147)
[00:36:49] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[00:36:55] <bookworm> go will not be giving back the memory it receives from the OS until it has too or really doesn't need the memory for a while
[00:37:01] <bookworm> s/too/to
[00:37:07] <Tv_> the go runtime is very lazy about returning memory to the kernel, on purpose; it would hurt performance
[00:37:12] <bookworm> ^
[00:37:13] <sweater> mertyildiran: are you sure it's not just allocated. I.e. can you actually OOM by operating on constant-sized data at all times?
[00:37:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[00:37:39] * sweater is slow
[00:37:39] <Tv_> even if you could OOM a box with a very rapid allocating loop, that's *still* not a "leak"
[00:38:10] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[00:38:17] <Tv_> it's really hard to "leak" memory in Go, and most people ending up with that conclusion have simply misdiagnosed the problem
[00:38:26] <Tv_> the problem here seems to be "it's wasteful"
[00:38:32] <Tv_> allocating a []byte for every frame is wasteful
[00:38:40] <Tv_> maybe consider an API that does not do that
[00:38:41] <bookworm> actually it's easy, use a slice on a huge array, done
[00:38:52] <bookworm> that'll leak GBs of unused memory :P
[00:39:04] <Tv_> bookworm: the key bit is holding on to it
[00:39:15] <bookworm> which is trivial if you actually need some of the data
[00:39:23] <Tv_> bookworm: there could be another part of this program that gathers those `frame` values in an ever-growing list
[00:39:29] <Tv_> that would be a "leak"
[00:39:30] <mertyildiran> My situation is a little bit complicated, I need to call this method with an incorrect size and reader. When it falls into `return nil, err` line I need to be able to free, what's happened by `io.ReadFull`.
[00:39:49] <Tv_> but it would be a "leak" regardless of the size of the []byte, etc
[00:39:58] <Tv_> a large []byte is merely an amplifier
[00:40:18] <Tv_> mertyildiran: why?
[00:41:01] <mertyildiran> Tv_: I'm working on a Wireshark-like software that sniffs traffic.
[00:41:13] *** Quits: gggp (~textual@114.245.106.147) (Ping timeout: 252 seconds)
[00:41:26] <Tv_> mertyildiran: let me guess, you're attempting to parse the tail end of an incomplete message, or such?
[00:41:32] <Tv_> mertyildiran: you'll want a better api
[00:41:34] <mertyildiran> I guess your conclusion is that, the returned `frame` is leaking inside the caller.
[00:41:40] <bookworm> then make an API that accepts a buffer, rather than allocating it in the function / method
[00:41:45] <Tv_> mertyildiran: there is likely no leak, just wasteful code
[00:42:27] <bookworm> there's a reason the io.Writer / io.Reader take a slice rather than allocating it themselves
[00:42:51] <Tv_> mertyildiran: Wireshark -> network packets, not io.Readers -> your packet is already a []byte, you probably want a parser that can work with that directly
[00:43:15] <mertyildiran> I have kind of a better API that wraps this client library.
[00:43:17] <Tv_> mertyildiran: (unless you meant a mitm proxy, not like wireshark)
[00:43:35] <Tv_> mertyildiran: consider that this library might be wholly unsuitable for your use. welcome to the world of IDS.
[00:44:25] <mertyildiran> Tv_: I actually forked that library and modified heavily.
[00:44:52] <Tv_> mertyildiran: so, i've worked in network security industry a bunch. tell me what you're doing, i'll try to guide you to a better solution.
[00:45:24] *** Joins: aram (~aram@9front.army)
[00:45:24] *** ChanServ sets mode: +v aram
[00:45:58] <mertyildiran> Tv_: OK then let me show you what I'm working on https://github.com/up9inc/mizu/pull/224
[00:47:38] <mertyildiran> Tv_: and here is the same method https://github.com/up9inc/mizu/blob/feat/extension-api/tap/extensions/amqp/read.go#L435-L446 living a different life :)
[00:48:26] <Tv_> okay so pcap->tcp reassembler->stream of data you want to parse as amqp
[00:48:54] <Tv_> ooh i have bad news for you: https://github.com/up9inc/mizu/blob/d44481110e849b14f1d12ddc6c2208346fc853f5/tap/api/api.go#L5
[00:49:00] <Tv_> the plugin thing just ain't a great idea
[00:49:19] <mertyildiran> Tv_: yes, I'm parsing three protocols simultaneously there: HTTP, AMQP and Kafka. All dissectors try to parse all protocols.
[00:49:37] <mertyildiran> Tv_: are you sure? Because it's working fine.
[00:49:41] <Tv_> just build it in one pile, instead of trying to make modules work. you can listen to that advice now, or in 3 months.
[00:50:10] <Tv_> it works if and only if you build the plugins exactly how you built the main process, at which point what's the point of plugins
[00:50:13] <Tv_> Go has no stable ABI
[00:50:30] <mertyildiran> Tv_: I'm aware of the drawbacks of Go plugins. For example shared packages cannot have different versions.
[00:50:39] <mertyildiran> Tv_: it's for isolation.
[00:50:42] <Tv_> i challenge you to load a plugin compiled by someone else
[00:50:46] <Tv_> plugins offer no isolation
[00:51:18] <mertyildiran> Tv_: the plugins are only compiled by the maintainer. It goes into a Docker image and deployed into a Kubernetes cluster.
[00:51:28] <Tv_> anyway, that's not the main point here.. just, pleas reevaluate, you'll be ripping them out later regardless ;)
[00:51:38] <Tv_> then what's the point of plugins, if you can't plug them in
[00:51:42] <mertyildiran> Tv_: we don't expect people to build the plugins.
[00:51:47] <Tv_> extra complexity for no gain
[00:51:54] <mertyildiran> Tv_: isolating the code.
[00:52:00] <Tv_> there is no isolation there
[00:52:07] <mertyildiran> Tv_: clean code loading them dynamically.
[00:52:18] <Tv_> i have no idea what you mean by that
[00:52:26] <Tv_> packages provide a "clean code" boundary just fine
[00:53:12] <Tv_> unf github search is useless
[00:53:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[00:54:31] <mertyildiran> Tv_: anyway that AMQP leak really bad right now.
[00:54:49] <Tv_> still not a leak
[00:55:22] <mertyildiran> Tv_: yeah by design it became leak-like thing I mean.
[00:55:44] *** Joins: fikran (~fikran@user/fikran)
[00:55:44] <Tv_> just a wasteful allocator, still not a leak
[00:55:52] <Tv_> so if i'm reading this right, https://github.com/up9inc/mizu/blob/d44481110e849b14f1d12ddc6c2208346fc853f5/tap/tcp_reader.go#L92
[00:56:17] <Tv_> that thing is not in any way remembering already read data
[00:56:31] <Tv_> which means you *can't* just call the function in a loop, it'll discard data every time
[00:56:43] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[00:56:55] <mertyildiran> This is a code related to TCP stream. So it's generic accross all application layer protocols.
[00:57:26] <mertyildiran> *TCP reassebmly
[00:57:29] <Tv_> so is there a part that buffers the data and feeds it individually to every analyzer? i don't see that in the code, at least without cloning the repo for better tooling
[00:57:30] *** Quits: fanis30 (~anon@adsl-180.37.6.1.tellas.gr) (Quit: WeeChat 3.2)
[00:57:45] *** Joins: flynn (~mcbloch@user/flynn)
[00:58:12] <mertyildiran> Tv_: yes, see https://github.com/up9inc/mizu/blob/d44481110e849b14f1d12ddc6c2208346fc853f5/tap/tcp_stream_factory.go#L51-L94 I'm spawning two Goroutines per protocol.
[00:59:10] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[01:00:12] <Tv_> mertyildiran: okay so it seems like your goroutine will block in the .Read when there's no new data, and all read errors are fatal to the analyzer (instead of my earlier assumption that you're parsing partial data). so we go in a circle: why are you seeing a *lot* of ReadFrame calls with errors?
[01:00:36] <Tv_> because you're parsing http input with the amqp parser?
[01:00:57] <mertyildiran> Tv_: yes AMQP parser tries to parse both HTTP and Kafka too.
[01:01:24] <mertyildiran> AMQP, Kafka has no prefix and another easy way to distinguish.
[01:01:30] <Tv_> unf. that's not going to be fun. and gibberish input will make you allocate a lot of those buffers.
[01:01:32] <mertyildiran> However HTTP has a prefix.
[01:02:03] <Tv_> parsing garbage as any length-prefixed protocol is gonna hurt, if you do it naively
[01:02:06] <mertyildiran> Tv_: yeah, therefore I'm trying to implements way to fail-fast by detecting huge size values etc.
[01:02:17] <Tv_> you're gonna have to rework the AMQP code to be less naive
[01:02:37] <mertyildiran> Tv_: yes, I'm aware of that. That's what I'm trying to achieve.
[01:02:58] <mertyildiran> Do you have a suggestion other than trying to parse all protocols?
[01:03:09] <Tv_> probaly what fizzie said earlier, pass in a buffer to use
[01:03:31] <Tv_> but fundamentally the combo of "parse garbage" and "use off the shelf client libraries" will hurt
[01:03:33] <mertyildiran> No I mean it should be also detected in real-time.
[01:03:43] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[01:03:47] <mertyildiran> hmm OK thank you so much!
[01:05:21] <toretto> How can I print all values of a struct in go? I'm trying to print all the elemetns of http.Request.URL, but no methods suggested in https://stackoverflow.com/questions/24512112/how-to-print-struct-variables-in-console works.
[01:05:42] <toretto> Is there a way I can specifically print http.Response.URL struct's methods?
[01:05:46] <toretto> s/methods/members/
[01:05:53] <Tv_> toretto: https://pkg.go.dev/fmt#hdr-Printing
[01:06:07] <Tv_> members? really? not fields?
[01:06:16] <toretto> sorry, fields.
[01:06:36] <Tv_> the answers seem fine
[01:06:39] <toretto> NO
[01:06:43] <toretto> not this.
[01:06:46] <Tv_> it's not recursive, if that's what you mean
[01:06:52] <toretto> Like, a single statement to print 'em all.
[01:07:11] <ikke> fmt.Printf("%#v
[01:07:14] <Tv_> from the SO: To print the name of the fields in a struct: fmt.Printf("%+v\n", yourProject)
[01:07:17] <ikke> fmt.Printf("%#v\n, struct)
[01:07:28] <toretto> ikke: lemme try that.
[01:07:47] <Tv_> it's still not really recursive the way some people might like, on purpose
[01:08:19] <Tv_> because type T struct { haha *T }; x := &T{}; x.haha = x
[01:08:40] <toretto> yeah, that kinds works. although the output seems incorrect.
[01:08:54] <Tv_> let's entertain the notion that it is not incorrect
[01:09:58] *** Joins: livingsilver94_ (~livingsil@user/livingsilver94)
[01:10:07] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 245 seconds)
[01:10:57] <livingsilver94_> Hi! Got a problem with reflect.Value.CanSet() when the value is taken from a slice. Willing to give me help? https://play.golang.org/p/Wy-QaJ9b0NI
[01:12:35] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[01:12:40] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[01:12:41] <livingsilver94_> .... oops. It's not settable even outside the slice. Guess I have a double problem then.
[01:15:10] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[01:15:41] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:15:44] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[01:16:07] *** Joins: independent_ (~independe@95.144.68.39)
[01:19:48] *** Quits: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247) (Ping timeout: 256 seconds)
[01:20:02] *** Joins: nick__ (~compufrea@cpe-174-103-101-19.columbus.res.rr.com)
[01:20:09] *** Quits: compufreak (~compufrea@cpe-174-103-101-19.columbus.res.rr.com) (Ping timeout: 248 seconds)
[01:20:19] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[01:21:29] <Tv_> livingsilver94_: you probably want .Elem() of a pointer, to get an addressable value
[01:23:18] <livingsilver94_> oh, right you are. Another demonstration that I shouldn't code late in the night. Thanks Tv_
[01:23:41] <Tv_> https://go.dev/blog/laws-of-reflection third law
[01:24:32] <Tv_> and for those playing along at home: https://play.golang.org/p/Pw_MKh_mj2B
[01:25:00] <sweater> Done with golang tour and exersises, started reading efficient go, but would rather read the 1.18 spec. Tv_ sorry if I asked already, but can you please tell me where to find the spec you have quoted?
[01:25:10] *** Joins: k0ta (~k0ta@103.108.94.37)
[01:25:14] <Tv_> sweater: golang.org/ref/spec
[01:25:19] <Tv_> sweater: browser all of golang.org/doc
[01:25:22] <Tv_> -r
[01:25:26] <sweater> Amazing!
[01:28:35] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[01:29:40] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 252 seconds)
[01:30:52] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 245 seconds)
[01:32:15] *** Joins: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247)
[01:32:47] *** Joins: wim (~wim@42.be)
[01:34:19] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[01:34:26] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[01:34:37] *** Joins: independent_ (~independe@95.144.68.39)
[01:35:52] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[01:36:49] *** Quits: normen (~normen@p200300d7173dc90099abd49fa6fe766e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[01:37:48] *** Quits: mertyildiran (~mertyildi@88.248.149.182) (Quit: WeeChat 2.8)
[01:39:17] <sweater> While referring to golang in texts, what is the preferred way? "Go"? "Golang"? "Go programming language"?
[01:39:30] <Tv_> Go
[01:39:36] <sweater> I'm leaning towards "golang" because I assume that it's what people search for
[01:39:44] <sweater> Tv_: understood, thank you
[01:40:19] <Tv_> go.org was a domainsquatting thing, the rest is a historical accident
[01:41:00] <sweater> What about discoverability? Let's say I arrogantly ( ;) ) think that my blog post might be of mild interest to people who are interested in generics in Go
[01:41:15] <sweater> ( ;) for self-irony, btw )
[01:41:30] <Tv_> google seems to do just fine searching for Go, if their user model knows you have programming interests
[01:41:35] <Tv_> if not, "go programming" will fix that
[01:41:55] <sweater> Understood, thank you.
[01:42:01] <sweater> I have reasonable meta tags, yes.
[01:42:11] <sweater> Thank you everyone for tolerating me today! <3
[01:42:13] <Tv_> i mean on the search side
[01:42:23] <Tv_> page-provided meta tags are summarily ignored in the modern world of spammers
[01:42:49] <Tv_> google indexing pretty much runs a headless chrome and only looks at visible text
[01:42:59] <sweater> Visible or reachable?
[01:43:06] <Tv_> spammers will abuse white-on-white
[01:43:31] <Tv_> i'm fully prepared to believe they compute the contrast of the text
[01:43:43] <sweater> We had a quarrel with our SEO people at work who were forbidding us to use cards with a button which you click to reveal the text. :)
[01:43:56] <Tv_> oh the headless chromes will click around too
[01:44:11] <Tv_> and run javascript, etc
[01:45:04] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[01:46:08] <sweater> Thank you!
[01:48:55] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 252 seconds)
[01:54:27] *** Joins: djo_ (~djo@public-nat.it.pasteur.fr)
[01:57:03] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 244 seconds)
[01:57:34] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 244 seconds)
[02:01:48] *** Joins: LiftLeft (~LiftLeft@172.83.47.138)
[02:07:04] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 252 seconds)
[02:08:51] *** Joins: normen (~normen@p200300d7173dc900b8929ae8bdda1e2d.dip0.t-ipconnect.de)
[02:10:38] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[02:14:02] *** Quits: djo_ (~djo@public-nat.it.pasteur.fr) (Read error: Connection reset by peer)
[02:14:32] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[02:17:48] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[02:18:07] *** Joins: independent_ (~independe@95.144.68.39)
[02:19:10] *** Quits: normen (~normen@p200300d7173dc900b8929ae8bdda1e2d.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[02:20:20] *** Joins: djo_ (~djo@public-nat.it.pasteur.fr)
[02:20:43] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[02:21:12] *** Joins: independent_ (~independe@95.144.68.39)
[02:23:02] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 245 seconds)
[02:23:13] *** Quits: djo_ (~djo@public-nat.it.pasteur.fr) (Read error: Connection reset by peer)
[02:25:25] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[02:25:42] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[02:33:36] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[02:34:27] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[02:38:56] *** Joins: vptr (~vptr@user/vptr)
[02:38:58] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 252 seconds)
[02:43:36] *** Joins: arktnld_ (~arktnld@179.186.101.144.dynamic.adsl.gvt.net.br)
[02:44:20] *** arktnld_ is now known as arktnld
[02:44:59] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:45:23] *** Quits: arktnld (~arktnld@179.186.101.144.dynamic.adsl.gvt.net.br) (Client Quit)
[02:45:36] *** Joins: Atque (~Atque@user/atque)
[02:45:55] *** Joins: arktnld (~arktnld@179.186.101.144.dynamic.adsl.gvt.net.br)
[02:50:18] *** Joins: arcatech (~arcatech@user/arcatech)
[02:50:40] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 240 seconds)
[02:51:47] *** Joins: c10l (~c10l@89.34.167.207)
[02:53:53] *** Joins: normen (~normen@p200300d7173dc900b8929ae8bdda1e2d.dip0.t-ipconnect.de)
[03:03:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:05:06] *** Joins: fikran (~fikran@user/fikran)
[03:10:37] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[03:10:55] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[03:12:18] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[03:12:37] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[03:12:37] *** Joins: independent_ (~independe@95.144.68.39)
[03:13:48] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[03:14:07] *** Joins: independent_ (~independe@95.144.68.39)
[03:18:30] *** Joins: arcatech (~arcatech@user/arcatech)
[03:23:10] *** Quits: normen (~normen@p200300d7173dc900b8929ae8bdda1e2d.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:26:15] <toretto> Go 'net' package is just awesome. just saying.
[03:27:14] *** Joins: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it)
[03:33:00] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:33:28] *** Joins: jsrnop (~mark@user/jsrnop)
[03:33:58] *** Quits: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it) (Ping timeout: 252 seconds)
[03:37:04] <Tv_> toretto: i'm such a fanboy for the simplicity and power of https://pkg.go.dev/github.com/golang/groupcache
[03:37:09] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Quit: WeeChat 3.2)
[03:37:13] <Tv_> toretto: it's crazy how easy that sort of stuff is to do, with just the stdlib
[03:38:58] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::100c)
[03:40:00] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:42:58] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 244 seconds)
[03:43:11] *** Joins: burningserenity_ (~burningse@143.244.34.217)
[03:43:19] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::100c) (Ping timeout: 252 seconds)
[03:46:48] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[03:47:07] *** Joins: independent_ (~independe@95.144.68.39)
[03:50:10] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[03:50:32] *** Joins: c10l (~c10l@89.34.167.207)
[03:54:18] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[03:54:27] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[03:54:37] *** Joins: independent_ (~independe@95.144.68.39)
[03:58:20] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[03:58:59] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 244 seconds)
[04:05:42] *** Quits: livingsilver94_ (~livingsil@user/livingsilver94) (Ping timeout: 244 seconds)
[04:05:59] *** Joins: livingsilver94 (~livingsil@user/livingsilver94)
[04:06:06] *** Joins: arcatech (~arcatech@user/arcatech)
[04:09:37] *** Quits: Asgaroth (~Asgaroth@93.107.191.92) (Ping timeout: 245 seconds)
[04:11:04] *** Joins: Torr (~Torr@user/torr)
[04:15:41] *** Joins: Asgaroth (~Asgaroth@93.107.191.92)
[04:15:45] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:16:46] *** Joins: flynn (~mcbloch@user/flynn)
[04:21:39] *** Joins: independent__ (~independe@95.144.68.39)
[04:21:51] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[04:22:07] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 245 seconds)
[04:25:18] *** Quits: independent__ (~independe@95.144.68.39) (Remote host closed the connection)
[04:25:37] *** Joins: independent__ (~independe@95.144.68.39)
[04:27:21] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[04:27:22] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[04:29:38] *** Joins: arcatech (~arcatech@user/arcatech)
[04:31:53] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[04:33:14] *** Joins: arcatech (~arcatech@user/arcatech)
[04:37:31] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[04:37:49] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[04:38:00] *** Joins: gggp (~textual@60.10.23.169)
[04:39:09] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[04:39:42] *** Quits: daegalus (~yulian@user/daegalus) (Quit: WeeChat 3.1)
[04:42:43] *** Quits: gggp (~textual@60.10.23.169) (Ping timeout: 252 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:44] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:50:57] *** Quits: nostalgia (~treebeard@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[04:51:52] *** Joins: nostalgia (~treebeard@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[04:52:32] *** Quits: nostalgia (~treebeard@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[04:55:06] *** Joins: witchuer (uid515958@id-515958.charlton.irccloud.com)
[04:55:22] *** Quits: independent__ (~independe@95.144.68.39) (Ping timeout: 252 seconds)
[04:55:55] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[05:02:13] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[05:06:50] *** Joins: arcatech (~arcatech@user/arcatech)
[05:10:23] *** Joins: independent__ (~independe@95.144.68.39)
[05:11:19] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:11:38] *** Quits: CommunistWolf (~gulag@user/communistwolf) (Ping timeout: 250 seconds)
[05:12:09] *** Quits: cation (cation@user/cation) (Ping timeout: 248 seconds)
[05:12:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[05:14:28] *** Joins: fikran (~fikran@user/fikran)
[05:15:17] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[05:16:11] *** Joins: cation (cation@user/cation)
[05:19:35] *** Joins: CommunistWolf (~gulag@user/communistwolf)
[05:23:58] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[05:28:09] *** Joins: arcatech (~arcatech@user/arcatech)
[05:28:24] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[05:32:42] *** Joins: arcatech (~arcatech@user/arcatech)
[05:36:10] *** Quits: kulak (~kulak@user/kulak) (Ping timeout: 240 seconds)
[05:37:32] <seebs> Wow, Tv, that eye-blink detection idea is brilliant.
[05:42:43] *** Joins: dalan623 (~dalan@14-201-241-42.tpgi.com.au)
[05:46:07] *** Joins: neurocyte5 (~neurocyte@46.243.81.86)
[05:46:07] *** Quits: neurocyte5 (~neurocyte@46.243.81.86) (Changing host)
[05:46:07] *** Joins: neurocyte5 (~neurocyte@user/neurocyte)
[05:46:55] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:48:10] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:48:10] *** neurocyte5 is now known as neurocyte
[05:50:07] *** Quits: arktnld (~arktnld@179.186.101.144.dynamic.adsl.gvt.net.br) (Quit: arktnld)
[06:00:16] *** Quits: src (~src@user/src) (Ping timeout: 252 seconds)
[06:01:40] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[06:01:55] *** Quits: mei (~mei@user/mei) (Ping timeout: 252 seconds)
[06:05:34] *** Quits: independent__ (~independe@95.144.68.39) (Ping timeout: 244 seconds)
[06:07:32] *** Quits: burningserenity_ (~burningse@143.244.34.217) (Ping timeout: 245 seconds)
[06:12:03] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:14:04] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::100c)
[06:20:22] *** Joins: gggp (~textual@60.10.194.45)
[06:20:37] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[06:23:34] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[06:27:03] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[06:31:40] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 240 seconds)
[06:31:49] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:3861:b031:6b93:c510)
[06:34:52] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:3861:b031:6b93:c510) (Ping timeout: 256 seconds)
[06:37:32] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::100c) (Ping timeout: 245 seconds)
[06:37:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[06:37:56] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[06:39:06] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:39:38] *** Joins: arcatech (~arcatech@user/arcatech)
[06:40:42] *** Quits: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net) (Ping timeout: 244 seconds)
[06:43:12] *** Quits: vptr (~vptr@user/vptr) (Remote host closed the connection)
[06:53:30] *** Joins: frost (~frost@59.71.240.119)
[06:59:31] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[07:04:37] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[07:08:35] *** Joins: hexfive (~eric@50.35.83.177)
[07:08:49] *** Joins: kulak (~kulak@user/kulak)
[07:09:01] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[07:17:59] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[07:18:56] *** Quits: kulak (~kulak@user/kulak) (Ping timeout: 244 seconds)
[07:19:00] *** Joins: arcatech (~arcatech@user/arcatech)
[07:20:13] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[07:20:47] *** Quits: hexfive (~eric@50.35.83.177) (Quit: WeeChat 3.0.1)
[07:21:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[07:23:50] *** Joins: fikran (~fikran@user/fikran)
[07:27:18] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[07:27:18] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[07:27:18] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[07:35:57] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 245 seconds)
[07:36:11] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[07:38:07] *** Joins: arcatech (~arcatech@user/arcatech)
[07:53:03] *** Joins: iateadonut (~dan@121.177.17.154)
[07:53:09] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[07:53:13] *** Parts: iateadonut (~dan@121.177.17.154) ()
[07:53:18] *** Joins: iateadonut (~dan@121.177.17.154)
[07:53:21] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[07:59:49] <iateadonut> seebs, were you the one saying there's no reason *you* would want to have a web framework?
[07:59:49] <iateadonut> anyway, `buffalo dev` auto-restarts your binary every time you make a change, so you don't have to ctrl-c and then restart to see your app in a browser or test with postman, etc.
[08:00:06] <iateadonut> how do you handle that?
[08:03:34] <seebs> i did in fact say i have never seen anything that made me want a web framework. i guess... i don't know, i've not usually actually *wanted* that. like, if i'm changing data files on disk, i shouldn't *need* to restart a binary, and i want to control when i am restarting binaries?
[08:04:01] *** Quits: dr0n (~mnxaw@94.11.23.235) (Ping timeout: 252 seconds)
[08:04:19] *** Joins: mnx|aw (~mnxaw@94.11.23.235)
[08:04:37] <b0nn> seebs: are you working with web dev stuff much?
[08:04:46] <seebs> not when i can avoid it!
[08:05:07] <seebs> so maybe it's more useful if you're doing a ton of web dev stuff, but the web devs i've known using Go also seemed not to find "frameworks" very appealing.
[08:05:47] <seebs> like, they make *sense* in something like C, or even something like Ruby, where there's a lot of lower-level bits and pieces and it's up to you to figure out all the stuff like getting paths out of URIs and such.
[08:05:59] <seebs> but net/http basically does the right stuff in the first place.
[08:06:28] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[08:06:51] <b0nn> I've personally found the net/http to be too 'raw'; I end up having to write a lot of boilerplate that comes with "frameworks"
[08:07:06] <b0nn> actually, bare's the better description
[08:07:47] <b0nn> Think NetBSD vs OpenBSD vs FreeBSD
[08:08:17] <b0nn> NetBSD works *fine* if you want to get in and handle all the wheels and toggle manually
[08:10:13] <seebs> it's definitely my favorite of them, overall
[08:10:19] <seebs> but yeah, that makes sense
[08:10:39] <seebs> i think it depends a bit on things like how close you are to having what you want and what it provides align
[08:11:03] <b0nn> Absolutely, the answer is always "It depends"
[08:11:06] <seebs> some people really like gorilla/mux, i'm not totally sure either way but it's not awful
[08:11:23] <seebs> but like, i would not want something like Rails in a Go environment, I don't think, it just feels like it would be a bad fit.
[08:11:50] <seebs> but also, most of my http interactions are more for API stuff than for web pages, which may influence that.
[08:12:39] <b0nn> I personally find gorilla to be a bit too far along the scale for my usecases - so I look for something in the middle, something that means I can focus on what I feel is important
[08:13:37] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:13:37] <b0nn> Chi, httprouter, I forget what the other one I like is, but they fall somewhere between the stdlib and gorilla as far as out of the boxness
[08:13:47] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[08:13:50] <b0nn> goes
[08:13:51] <seebs> yeah. i think a lot of people coming to Go are assuming that, if you don't have "a framework", you're gonna be manually handling sockets and maintaining worker pools and stuff like that.
[08:14:03] <seebs> because that's how it was in something else they used.
[08:14:10] <b0nn> def
[08:14:17] <seebs> and actually stdlib's http is plenty to Get Stuff Running At All
[08:22:20] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:3861:b031:6b93:c510)
[08:25:22] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:3861:b031:6b93:c510) (Ping timeout: 256 seconds)
[08:32:22] *** Quits: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[08:37:36] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[08:37:46] *** Joins: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se)
[08:38:04] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[08:42:45] *** Joins: kulak (~kulak@user/kulak)
[08:50:00] *** Joins: jpw (~jpw@user/jpw)
[08:59:38] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[08:59:45] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Client Quit)
[09:00:01] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[09:05:04] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[09:16:28] *** Joins: hikhvar796073809 (~thelounge@x4db5a501.dyn.telefonica.de)
[09:17:43] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 252 seconds)
[09:31:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[09:33:12] *** Joins: fikran (~fikran@user/fikran)
[09:35:58] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[09:35:58] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[09:36:12] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[09:43:01] *** Joins: mei (~mei@user/mei)
[09:43:30] *** Quits: mei (~mei@user/mei) (Client Quit)
[09:50:14] *** Joins: mei (~mei@user/mei)
[09:55:16] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[09:56:16] *** Joins: flynn (~mcbloch@user/flynn)
[10:06:49] *** Joins: lazy1 (~tebeka@2a10:800c:eab3:0:6044:2012:fa98:1913)
[10:08:45] *** Joins: andlabs (~andlabs@70.107.171.168)
[10:10:15] *** Quits: lazy1 (~tebeka@2a10:800c:eab3:0:6044:2012:fa98:1913) (Client Quit)
[10:14:32] *** Quits: Thedarkb-Work (~Thedarkb@62.232.253.82) (Remote host closed the connection)
[10:14:51] *** Joins: Thedarkb-Work (~Thedarkb@62.232.253.82)
[10:15:37] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[10:17:13] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 248 seconds)
[10:19:47] *** Joins: oxum (~oxum@106.203.195.217)
[10:20:43] *** Quits: khyr0n (~khyr0n@2806:2f0:9260:e17b:8c10:d579:6fb:d3b4) (Remote host closed the connection)
[10:24:49] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[10:25:00] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:25:23] *** Joins: khyr0n (~khyr0n@fixed-189-203-96-16.totalplay.net)
[10:26:48] *** Quits: khyr0n (~khyr0n@fixed-189-203-96-16.totalplay.net) (Client Quit)
[10:29:02] *** Joins: shka (~herr@109.231.62.239)
[10:33:03] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[10:33:29] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:37:39] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[10:38:10] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[10:43:15] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[10:43:25] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[10:50:22] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[10:51:41] *** Joins: jpw (~jpw@user/jpw)
[10:52:37] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[11:01:17] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[11:05:57] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 245 seconds)
[11:17:38] *** Joins: mrig (~mrig@user/mrig)
[11:22:08] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[11:26:37] *** Joins: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it)
[11:28:54] *** Quits: gggp (~textual@60.10.194.45) (Remote host closed the connection)
[11:29:32] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:40:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[11:42:34] *** Joins: fikran (~fikran@user/fikran)
[11:42:55] *** Joins: gggp (~textual@60.10.194.45)
[11:58:58] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 244 seconds)
[12:02:35] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[12:08:45] *** imm__ is now known as imm_
[12:13:44] *** Joins: oxum (~oxum@106.203.195.217)
[12:18:40] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[12:30:26] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[12:31:54] *** Quits: V (~v@anomalous.eu) (Ping timeout: 250 seconds)
[12:33:00] *** Joins: dhruvasagar (~dhruvasag@49.207.59.235)
[12:37:45] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[12:38:16] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[12:43:04] *** Joins: andlabs (~andlabs@70.107.171.168)
[12:46:41] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::f1b6)
[13:01:01] *** Quits: mnx|aw (~mnxaw@94.11.23.235) (Ping timeout: 252 seconds)
[13:02:33] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[13:06:28] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[13:08:31] *** Quits: Spydar007 (~spydar007@user/spydar007) (Remote host closed the connection)
[13:08:53] *** Joins: Spydar007 (~spydar007@user/spydar007)
[13:09:52] *** Joins: independent__ (~independe@95.144.68.39)
[13:16:28] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 244 seconds)
[13:43:26] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[13:49:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[13:50:33] *** Joins: kraymer (~kraymer@200116b8605d34007118801e21a8c953.dip.versatel-1u1.de)
[13:51:40] *** Joins: fanis30 (~anon@adsl-180.37.6.1.tellas.gr)
[13:51:56] *** Joins: fikran (~fikran@user/fikran)
[13:54:54] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[13:56:39] *** Quits: kraymer (~kraymer@200116b8605d34007118801e21a8c953.dip.versatel-1u1.de) (Remote host closed the connection)
[13:58:08] *** Joins: kraymer (~kraymer@200116b8605d34007118801e21a8c953.dip.versatel-1u1.de)
[13:59:53] *** Quits: kraymer (~kraymer@200116b8605d34007118801e21a8c953.dip.versatel-1u1.de) (Changing host)
[13:59:53] *** Joins: kraymer (~kraymer@user/kraymer)
[14:00:57] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::f1b6) (Ping timeout: 245 seconds)
[14:05:59] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::f1b6)
[14:10:28] *** Quits: gggp (~textual@60.10.194.45) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:13:05] *** Joins: gggp (~textual@60.10.194.45)
[14:18:47] *** Joins: normen (~normen@p200300d7173dc900b8929ae8bdda1e2d.dip0.t-ipconnect.de)
[14:30:02] *** Joins: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net)
[14:33:45] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::f1b6) (Quit: Leaving)
[14:35:09] *** Joins: jcajka (~jcajka@ip-86-49-242-38.net.upcbroadband.cz)
[14:35:32] *** Quits: gggp (~textual@60.10.194.45) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:44:29] *** Joins: svip (~svip@user/svip)
[14:48:18] *** Joins: oxum (~oxum@106.203.195.217)
[14:48:40] *** Lysergsaeure is now known as acidsys
[14:51:32] *** Joins: rdg (~rdg@user/rdg)
[14:53:13] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[14:54:10] *** Joins: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com)
[15:02:31] *** Joins: djo (~djo@157.99.174.101)
[15:02:41] *** Quits: kraymer (~kraymer@user/kraymer) (Remote host closed the connection)
[15:03:36] *** Parts: rdg (~rdg@user/rdg) ()
[15:13:12] *** Joins: juvenalmuniz (~Juvenal@189-72-236-180.user3p.brasiltelecom.net.br)
[15:16:51] *** Quits: juvenalmuniz (~Juvenal@189-72-236-180.user3p.brasiltelecom.net.br) (Quit: leaving)
[15:27:52] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 252 seconds)
[15:34:03] *** Quits: independent__ (~independe@95.144.68.39) (Remote host closed the connection)
[15:34:21] *** Joins: independent__ (~independe@95.144.68.39)
[15:36:29] *** Quits: djo (~djo@157.99.174.101) (Ping timeout: 244 seconds)
[15:37:33] *** Quits: independent__ (~independe@95.144.68.39) (Remote host closed the connection)
[15:37:52] *** Joins: independent__ (~independe@95.144.68.39)
[15:38:23] *** Joins: goldfish (~goldfish@user/goldfish)
[15:46:50] *** Joins: userj (~userjjjj@2405:3800:89f:a308:e17a:b025:798a:38ae)
[15:50:22] *** Quits: jespada (~jespada@90.254.245.194) (Ping timeout: 252 seconds)
[15:51:09] *** Quits: keeganza (~keeganza@2001:470:69fc:105::c842) (Quit: You have been kicked for being idle)
[15:51:13] *** Quits: worr (~worr@2001:470:69fc:105::78c) (Quit: You have been kicked for being idle)
[15:51:20] *** Joins: jespada (~jespada@90.254.245.194)
[15:52:39] *** Joins: gggp (~textual@60.10.194.45)
[15:59:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[16:01:01] *** Joins: oxum (~oxum@106.203.195.217)
[16:01:17] *** Joins: fikran (~fikran@user/fikran)
[16:02:51] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[16:06:06] *** Quits: userj (~userjjjj@2405:3800:89f:a308:e17a:b025:798a:38ae) (Changing host)
[16:06:06] *** Joins: userj (~userjjjj@user/userj)
[16:06:23] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[16:06:27] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 244 seconds)
[16:07:23] *** Joins: flynn (~mcbloch@user/flynn)
[16:07:28] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[16:07:48] *** Quits: aram (~aram@9front.army) (Quit: leaving)
[16:09:26] *** Joins: aram (~aram@9front.army)
[16:09:26] *** ChanServ sets mode: +v aram
[16:13:44] *** Joins: darkapex (~darkapex@user/darkapex)
[16:14:26] <shibumi> how do I write very complex prepared sql statements like this one with gorm? INSERT INTO id_tags (id, owner, tenant_id) VALUES (value1, value2, value3), (value4, value5, value6), ....  ON CONFLICT(id) DO UPDATE SET owner = EXCLUDED.owner, tenant_id = EXCLUDED.tenant_id;
[16:15:11] <sztanpet> you dont, orms are not useful for writing database-specific queries
[16:15:20] <sztanpet> just write sql
[16:15:24] <shibumi> sztanpet: I am fine with a raw prepared statement too
[16:16:00] <shibumi> right now my current solution is using fmt.sprintf() and is not sql injection safe, because using sql.Raw() inserts the '' wrong..
[16:16:02] <shibumi> all the time
[16:16:53] <shibumi> my problem is.. if I use a prepared statement.. gorm or even golang SQL will do this:  INSERT INTO id_tags (id, owner, tenant_id) VALUES '(value1, value2, value3), (value4, value5, value6)' ....
[16:16:53] <sztanpet> https://gorm.io/docs/sql_builder.html
[16:16:55] <shibumi> and that's wrong
[16:17:18] *** Quits: independent__ (~independe@95.144.68.39) (Ping timeout: 244 seconds)
[16:17:54] <sztanpet> so you prepare your sql with fmt.Sprintf but you dont include the data and use placeholders
[16:18:41] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:19:10] <shibumi> sztanpet: fmt.Sprintf is not sql injection safe
[16:19:17] <shibumi> I could check for invalid characters via regex
[16:19:20] <sztanpet> you misunderstand
[16:19:45] <sztanpet> its the sql itself you prepare, you dont include user-specified data there
[16:20:16] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[16:20:16] <sztanpet> you separate the data and use prepared statements, arguments in gorm parlance
[16:20:22] *** Joins: independent__ (~independe@95.144.68.39)
[16:21:01] <shibumi> you mean I prepare INSERT INTO id_tags (id, owner, tenant_id) VALUES ('?', '?', '?') .... first
[16:21:11] <shibumi> and then I would insert the raw strings into the ? via sql builder
[16:21:13] <shibumi> this could work
[16:21:15] <shibumi> yes
[16:21:17] <shibumi> thanks
[16:23:19] <sztanpet> no, you dont quote the placeholders
[16:23:27] <sztanpet> but otherwise yes
[16:24:55] *** Joins: djo (~djo@157.99.10.106)
[16:25:15] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[16:27:56] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:37:37] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[16:37:56] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[16:39:33] *** Joins: yoonkn (~user@175.197.208.79)
[16:40:13] *** Quits: qaisjp (sid26374@user/qaisjp) ()
[16:40:29] *** Joins: qaisjp (sid26374@user/qaisjp)
[16:40:33] *** Quits: gggp (~textual@60.10.194.45) (Ping timeout: 244 seconds)
[16:41:10] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[16:41:17] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[16:42:55] *** Quits: fanis30 (~anon@adsl-180.37.6.1.tellas.gr) (Quit: WeeChat 3.2)
[16:44:10] *** Joins: gggp (~textual@60.10.194.45)
[16:46:00] *** Joins: darkapex_ (~darkapex@user/darkapex)
[16:48:47] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 245 seconds)
[16:54:27] *** Joins: ppang (~ppang@user/ppang)
[16:54:40] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:01:13] *** Quits: djo (~djo@157.99.10.106) (Ping timeout: 244 seconds)
[17:05:50] <A_Dragon>  /g 26
[17:05:51] <A_Dragon> whoops
[17:09:01] *** Quits: endigma (~endigma@134.41.133.214) (Ping timeout: 252 seconds)
[17:10:17] *** Joins: Torr (~Torr@user/torr)
[17:10:57] *** Joins: src (~src@user/src)
[17:12:56] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[17:22:30] *** Quits: st3fan (sid43079@tooting.irccloud.com) ()
[17:22:45] *** Joins: st3fan (sid43079@id-43079.lymington.irccloud.com)
[17:25:59] *** Quits: gggp (~textual@60.10.194.45) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:27:42] *** Joins: gggp (~textual@60.10.194.45)
[17:43:34] *** Quits: gjnoonan_ (sid95422@id-95422.tooting.irccloud.com) ()
[17:43:56] *** Joins: gjnoonan_ (sid95422@id-95422.lymington.irccloud.com)
[17:44:07] *** Joins: nikos[work] (~ntsipinak@tsipinakis.cern.ch)
[17:45:28] *** Joins: yellowflash (~I512663@49.36.46.238)
[17:46:10] <nikos[work]> What's the correct way to 'go get' from one private gitlab repository to another? Adding a repository-specific access token to ~/.netrc with a random username doesn't look like it works
[17:46:42] <nikos[work]> read: From one repositorys CI job I want to go get another repository
[17:48:44] <nikos[work]> Note: git clone works, go get doesn't
[17:54:34] *** Quits: independent__ (~independe@95.144.68.39) (Remote host closed the connection)
[17:54:52] *** Joins: independent__ (~independe@95.144.68.39)
[17:55:52] <yellowflash> Quoting from the go spec (https://golang.org/ref/spec#Size_and_alignment_guarantees) -
[17:55:54] <yellowflash> > For a variable x of struct type: unsafe.Alignof(x) is the largest of all the
[17:55:56] <yellowflash> > values unsafe.Alignof(x.f) for each field f of x, but at least 1.
[17:55:58] <yellowflash> >
[17:56:00] <yellowflash> What is the advantage of having such an alignment over simply aligning at word boundaries ?
[17:58:04] *** Quits: independent__ (~independe@95.144.68.39) (Remote host closed the connection)
[17:58:22] *** Joins: independent__ (~independe@95.144.68.39)
[18:06:39] <nikos[work]> Ok, ignore my previous messages. The issue is unrelated. It has to do with gitlab subgroups. So I try to include gitlab.domain.com/group/sub/project but go tries to fetch gitlab.domain.com/group/sub.git
[18:07:27] <nikos[work]> Adding .git to the end to force go to fetch the full path results in "module declares its path as: <path without .git> but was required as: <path with .git>"
[18:07:31] <nikos[work]> Any ideas?
[18:08:08] *** Joins: oxum (~oxum@106.203.195.217)
[18:08:15] *** Joins: TUSF (~TUSF@71-147-0-117.lightspeed.hstntx.sbcglobal.net)
[18:08:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[18:09:18] <fizzie> I don't see the link between the quotation and the question. By which I mean, the "advantage" of having unsafe.Alignof(x) for a struct type to be the maximum of the alignments of each of its fields is, you *have* to do that, otherwise some fields wouldn't necessarily be correctly aligned.
[18:09:30] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[18:10:08] *** Quits: hsiktas (sid224847@tooting.irccloud.com) ()
[18:10:23] *** Joins: hsiktas (sid224847@id-224847.lymington.irccloud.com)
[18:10:30] *** Joins: flynn (~mcbloch@user/flynn)
[18:10:39] *** Joins: fikran (~fikran@user/fikran)
[18:12:25] <twaapo> nikos[work]: i dont know what is the correct way, i had the same dance with repo.git problem, currently my go get uses ssh to pull, and it seems to work better
[18:12:26] <fizzie> The spec doesn't say anything concrete about the alignment requirements, so on a platform where there's no advantage to having a larger than one-word alignment, unsafe.Alignof(x) might never be more than one word. But presumably there's *some* reason why C ABIs (for example) tend to have 8-byte aligned float64s.
[18:12:52] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[18:13:12] <twaapo> nikos[work]: there is a redirect in my .gitconfig, and i think thats how its working now
[18:14:47] *** Quits: purpleidea (~james@user/purpleidea) (Ping timeout: 240 seconds)
[18:26:37] *** Quits: independent__ (~independe@95.144.68.39) (Ping timeout: 252 seconds)
[18:29:15] *** Joins: vlv (~vlv@mob-5-90-141-114.net.vodafone.it)
[18:29:48] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:29:51] <nikos[work]> Solved: For the next one down the line: You need a token with not only read_repository permissions but api access as well
[18:30:46] *** Quits: ppang (~ppang@user/ppang) (Quit: Leaving)
[18:31:04] *** Joins: khyr0n (~khyr0n@2806:2f0:9260:e17b:8c10:d579:6fb:d3b4)
[18:32:04] *** Quits: freswa (~freswa@static.3.158.69.159.clients.your-server.de) (Quit: Bye!)
[18:32:45] *** Joins: freswa (~freswa@2a01:4f8:1c0c:804b::2)
[18:34:32] *** Joins: djo (~djo@157.99.10.106)
[18:37:14] <yellowflash> fizzie: "otherwise some fields wouldn't necessarily be correctly aligned." -- if all the fields have a natural alignment, wouldn't that suffice ? for e.g. on a 32-bit machine, a struct containing 8 byte and 2 byte field should add a padding of 2 bytes (making the size to be 12 bytes), as opposed to making the struct a multiple of 8 (16 bytes)
[18:37:36] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[18:37:47] *** Joins: nostalgia (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net)
[18:38:04] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[18:40:04] <fizzie> yellowflash: The bit you quoted says the alignment of the struct is the largest *alignment* of any of the fields, not the largest *size*. If unsafe.Alignof of (the type of) your 8-byte field is 4, then that will also be the alignment for the struct.
[18:40:34] <someuser> hello
[18:40:58] <someuser> i am trying to understand this statement, how do i read it exactly in https://golangbyexample.com/go-check-if-type-implements-interface/ or in https://golang.org/doc/effective_go#blank_implements
[18:41:09] <someuser> var _ shape = (*square)(nil)
[18:41:10] <someuser>  in the first URL ^
[18:41:16] <yellowflash> fizzie: thanks a lot for the clarification, I was confusing alignment with size :)
[18:41:30] <someuser> what does that mean ?
[18:41:51] <fizzie> someuser: You read it exactly like `var foo shape = (*square)(nil)` except without the variable having a name.
[18:42:00] *** Joins: ajfriesen0 (~ajfriesen@cable-89-1-117-98.nc.de)
[18:42:05] *** Quits: ajfriesen (~ajfriesen@cable-89-1-117-98.nc.de) (Read error: Connection reset by peer)
[18:42:05] *** ajfriesen0 is now known as ajfriesen
[18:42:10] <fizzie> So: convert `nil` to a `*square`, and assign it to a variable of type `shape`.
[18:42:27] <fizzie> Which is only a legal operation if the type `*square` implements the interface `shape`.
[18:43:33] *** Quits: yellowflash (~I512663@49.36.46.238) (Quit: WeeChat 3.2)
[18:44:47] <someuser> thanks fizzie, but is using this syntax not right "var _ shape = &square{}
[18:44:48] <someuser> "
[18:45:02] <fizzie> It's pretty much the same thing, like the page says.
[18:45:07] <someuser> i see it in the first URL since wrapping my head about (*square)(nil) is still confusing lol
[18:45:34] <someuser> so we converting a nil to a pointer to type square, and nil is just any value in memory that is free?
[18:45:54] <fizzie> No, it's a nil pointer. Pointer values can be either to valid objects, or nil.
[18:46:27] <someuser> okay and is the usage of the parenthesis here explained somewhere?
[18:46:48] <fizzie> https://golang.org/ref/spec#Conversions
[18:46:49] <someuser> i didn't come across that syntax much so it's new to me
[18:47:01] *** Joins: yellowflash (~I512663@49.36.46.238)
[18:47:08] <someuser> oh thank you, never seen that one
[18:47:10] <someuser> checking it atm
[18:47:16] <fizzie> Specifically, the "If the type starts with the operator * or <-, or if the type starts with the keyword func and has no result list, it must be parenthesized when necessary to avoid ambiguity: --" part.
[18:47:27] <fizzie> Assuming you're asking about the first pair of parentheses rather than the second.
[18:48:03] *** Quits: yellowflash (~I512663@49.36.46.238) (Client Quit)
[18:48:17] *** Joins: yellowflash (~I512663@49.36.46.238)
[18:48:37] <fizzie> It's an instance of the same thing as `int(0)`, an explicit conversion. It just has the type name surrounded by ()s to disambiguate.
[18:48:39] *** Quits: yellowflash (~I512663@49.36.46.238) (Client Quit)
[18:50:36] <fizzie> The difference between `(*square)(nil)` and `&square{}` is the difference between a nil pointer and a non-nil pointer at an actual square (initialized as its zero value), but it doesn't make a difference for the "does *square implement shape" check, because all that cares about is the type of the expression.
[18:51:16] *** Quits: TUSF (~TUSF@71-147-0-117.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 244 seconds)
[18:51:57] <fizzie> `var nilPointer *square; var _ shape = nilPointer` would also be a valid way of writing that check, except that you probably don't want to introduce a useless variable called "nilPointer".
[18:53:56] *** Joins: CoolerX (~CoolerX@user/coolerx)
[18:54:30] *** Quits: mteo (francis@user/francis) (Remote host closed the connection)
[18:54:47] <someuser> thank you, reading and its making better sense to me right now
[18:55:10] <toretto> I'm reading document on TCPAddrss (https://pkg.go.dev/net#TCPAddr), what is the different between a "tcp addres" and a "normal IP address"?
[18:56:38] *** Quits: mastardet_ (~mastardet@user/mastardet) (Quit: g0t m1lk?)
[18:58:04] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Quit: Leaving)
[18:58:31] <fizzie> Among other things, a TCP address also involves a port.
[19:00:00] <toretto> So, a tcp addrss is basically "ip:port" combination? Like ":" concated with port?
[19:00:37] <toretto> right?
[19:01:41] <toretto> wait, i guess it's like this "tcp://ip_v4:port" and "tcp6://ip_v6:port"?
[19:02:21] *** Joins: src_ (~src@user/src)
[19:04:34] *** Quits: src (~src@user/src) (Ping timeout: 252 seconds)
[19:05:26] <A_Dragon> that is a URI. scheme://host:port
[19:05:40] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 240 seconds)
[19:05:44] <A_Dragon> but yeah for that its also just a URI IIRC
[19:06:46] *** Quits: src_ (~src@user/src) (Ping timeout: 252 seconds)
[19:06:46] *** Quits: vlv (~vlv@mob-5-90-141-114.net.vodafone.it) (Ping timeout: 252 seconds)
[19:09:56] <fizzie> Go network addresses have their own (network, string) format, which for a TCP address has a network of "tcp" and a string representation of "ip:port".
[19:11:09] <fizzie> (I don't think it uses "tcp6" for anything, the network is still "tcp" even if the IP address is a v6 one.)
[19:14:29] *** A_Dragon is now known as A_D
[19:14:32] *** A_D is now known as A_Dragon
[19:18:39] *** Quits: djo (~djo@157.99.10.106) (Ping timeout: 244 seconds)
[19:21:31] *** Joins: mteo (francis@user/francis)
[19:22:57] *** Quits: lithammer (~lithammer@46.19.36.119) (Quit: ZNC - http://znc.in)
[19:24:59] *** Joins: lithammer (~lithammer@arch-vps.cloud.tilaa.com)
[19:28:07] *** Quits: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247) (Quit: WeeChat 3.2)
[19:31:10] *** Quits: Pent (sid313808@tooting.irccloud.com) ()
[19:31:30] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[19:32:54] <Tv_> toretto: if you read the definition of TCPAddr, you'd see it includes IP, Port, Zone (where IP and Zone normally combine into IPAddr.. historical, can't change it now)
[19:33:23] *** Joins: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247)
[19:33:34] <Tv_> and IP and IPAddr are different also because of long history of confusion about multihomed hosts. ipv6 is finally putting the behavior into spec!
[19:34:47] <Tv_> fun fact: historically, and even today if you misconfigure, if you have a host with public ip 1.2.3.4 and private ip 10.0.0.42, you can sometimes reach the private ip via the public NIC simply by adding it to 10.0.0.42 with the mac address of 1.2.3.4
[19:35:06] <Tv_> s/adding it/sending it/
[19:35:33] <toretto> I see.
[19:35:46] <toretto> Is there a way I can pass command line arguments in https://play.golang.org/?
[19:35:53] *** Joins: djo (~djo@157.99.10.106)
[19:36:01] <toretto> Not sure how I can do so, I wanna share a code.
[19:36:03] <Tv_> toretto: you could assign to os.Args in the beginning of main
[19:36:07] <toretto> ah
[19:36:10] <Tv_> toretto: or just pretend your []string is the args
[19:37:20] *** Quits: gggp (~textual@60.10.194.45) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:37:59] <toretto> Looks like play.golang.org doesn't make out-of-band network calls.
[19:38:13] <Tv_> yeah it's a sandbox
[19:38:20] <siXy> if you think a bit about it, it might be obvious why that's not allowed ;)
[19:39:45] <toretto> Ok, this is my code: https://paste.debian.net/plain/1210096 I'm not sure why when I try to print www.fcebook.com it shows HTTP 400 and strange part is itshows "Server: nginx", i'm quite sure Facebook doesn't use Nginx.
[19:40:21] *** Quits: djo (~djo@157.99.10.106) (Ping timeout: 244 seconds)
[19:40:34] <Tv_> HTTP/1, eh?
[19:40:40] <Tv_> toretto: how about using net/http
[19:41:47] <Tv_> also, check your errors.. neither should be triggering, but the behavior would be confusing if they did
[19:43:11] *** Quits: nikos[work] (~ntsipinak@tsipinakis.cern.ch) (Quit: WeeChat 3.2)
[19:49:43] <siXy> toretto: a) you probably want HTTP/1.1 not HTTP/1 b) you are wrong - facebook does use nginx.
[19:50:04] <siXy> Also: why on earth aren't you using net/http?
[19:52:07] *** Joins: djo (~djo@public-nat.it.pasteur.fr)
[19:57:47] <toretto> ah, damn. typo yeah
[19:58:29] *** Joins: teasea7 (~teasea@user/teasea)
[19:58:40] *** Quits: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247) (Ping timeout: 240 seconds)
[19:59:03] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[19:59:28] *** Quits: teasea (~teasea@user/teasea) (Ping timeout: 244 seconds)
[19:59:28] *** teasea7 is now known as teasea
[20:00:15] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1005)
[20:04:02] *** Quits: ajfriesen (~ajfriesen@cable-89-1-117-98.nc.de) (Ping timeout: 252 seconds)
[20:04:25] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[20:05:06] *** Joins: ajfriesen (~ajfriesen@cable-89-1-117-98.nc.de)
[20:08:11] *** Quits: pupskuchen (~pupskuche@user/pupskuchen) (Quit: ZNC 1.7.5 - https://znc.in)
[20:09:27] *** Joins: pupskuchen (~pupskuche@user/pupskuchen)
[20:11:20] *** Joins: ajfriesen9 (~ajfriesen@cable-89-1-117-98.nc.de)
[20:11:31] *** Joins: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247)
[20:11:53] *** Quits: g2anj (~v@58.227.244.56) (Ping timeout: 248 seconds)
[20:12:45] *** Joins: g2anj (~v@58.227.244.56)
[20:13:25] *** Quits: ajfriesen (~ajfriesen@cable-89-1-117-98.nc.de) (Ping timeout: 244 seconds)
[20:13:25] *** ajfriesen9 is now known as ajfriesen
[20:18:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[20:20:01] *** Joins: fikran (~fikran@user/fikran)
[20:20:59] *** Joins: mastardet (~mastardet@user/mastardet)
[20:27:07] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[20:30:28] *** Joins: aead (~aead@user/aead)
[20:30:40] *** Joins: independent__ (~independe@95.144.68.39)
[20:35:58] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1005) (Quit: ZNC 1.8.2 - https://znc.in)
[20:37:13] *** Joins: endigma (~endigma@134.41.124.82)
[20:37:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[20:38:14] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[20:38:30] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[20:39:30] *** Joins: flynn (~mcbloch@user/flynn)
[20:40:23] *** Quits: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it) (Quit: Leaving.)
[20:41:09] *** Joins: nullp0inter (~nullp0int@64.67.40.244.res-cmts.sell.ptd.net)
[20:42:02] *** Quits: djo (~djo@public-nat.it.pasteur.fr) (Read error: Connection reset by peer)
[20:44:05] <nullp0inter> I have a main.go under package main, with a "controllers" directory that contains a package 'controllers'. To import in the main I call it in the import as bitbucket.com/myworkspace/myproject/controllers and in the go.mod file I have a replace on the domain based name to a filepath i.e. replace bitbucket.org/myworkspace/myproject/controllers => ../controllers This seems to work fine locally, but when I run this through CI/CD
[20:44:05] <nullp0inter> it's telling me "replacement directory ../controllers does not exist" Is there a better way to do this or should I just make this local package it's own repo?
[20:44:52] <A_Dragon> try use an absolute path
[20:47:15] <Tv_> nullp0inter: you probably don't want controllers to be a separate module
[20:52:05] *** Joins: menace (~someone@ppp-93-104-165-2.dynamic.mnet-online.de)
[20:52:34] *** Quits: menace (~someone@ppp-93-104-165-2.dynamic.mnet-online.de) (Changing host)
[20:52:34] *** Joins: menace (~someone@user/menace)
[20:56:12] *** Quits: Balooga (sid407689@tooting.irccloud.com) ()
[20:56:27] *** Joins: Balooga (sid407689@id-407689.lymington.irccloud.com)
[21:01:54] *** Joins: s4ku (~S@user/s4ku)
[21:02:26] *** Parts: s4ku (~S@user/s4ku) ()
[21:06:35] *** Quits: computerquip (sid423484@user/computerquip) ()
[21:06:36] *** Quits: iateadonut (~dan@121.177.17.154) (Quit: Leaving.)
[21:06:53] *** Joins: computerquip (sid423484@user/computerquip)
[21:13:13] *** Quits: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Ping timeout: 252 seconds)
[21:32:02] *** Joins: goldfish (~goldfish@user/goldfish)
[21:38:03] *** Quits: goldfish (~goldfish@user/goldfish) (Quit: Leaving)
[21:40:50] *** Quits: ninjin (~ninjin@user/ninjin) (Remote host closed the connection)
[21:41:09] *** Joins: ninjin (~ninjin@user/ninjin)
[21:41:19] *** Joins: jpw (~jpw@user/jpw)
[21:42:48] <nullp0inter> Ah my internet was fudged. A_Dragon I don't think that's would be a good idea since the absolute path locally would be different than that on the CI runner
[21:43:50] <A_Dragon> nullp0inter: also what Tv_ said.
[21:44:14] *** Joins: lauraaah (uid156848@id-156848.charlton.irccloud.com)
[21:44:39] <nullp0inter> So then what is the appropriate way to import the controller package if not a module
[21:46:03] <Tv_> nullp0inter: just packages
[21:46:34] <Tv_> one go.mod at the root of your repo
[21:48:13] <nullp0inter> Tv_, that is what I want as well, one go.mod. I tried doing import "./controllers" but it doesn't like that main.go:7:2: local import "./controllers" in non-local package
[21:56:39] <nullp0inter> Tv_, if I set it with the URL it works locally but then bitbucket thinks its a repo and tries to download the package. Kinda confused on how to actually import controllers
[21:58:54] <Tv_> Match the go.mod and your import paths
[22:00:10] *** Quits: ninjin (~ninjin@user/ninjin) (Remote host closed the connection)
[22:00:25] *** Joins: ninjin- (~ninjin@user/ninjin)
[22:01:43] *** Joins: TUSF (~TUSF@71-147-0-117.lightspeed.hstntx.sbcglobal.net)
[22:03:29] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-12.prtc.net)
[22:03:40] <nullp0inter> heyo
[22:03:49] <nullp0inter> Tv_, worked, my replace was the "broken" thing
[22:06:23] *** Quits: l2dy (~l2dy@user/l2dy) ()
[22:06:40] *** Joins: l2dy (~l2dy@user/l2dy)
[22:07:33] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:09:32] *** Joins: Guest9 (~Guest9@91.211.53.1)
[22:10:04] *** Quits: Guest9 (~Guest9@91.211.53.1) (Client Quit)
[22:10:36] *** Joins: internut (~internut@2601:280:4e00:7b70:f0f1:f0b:115b:3a39)
[22:13:52] *** Joins: oxum (~oxum@106.203.195.217)
[22:17:10] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Ping timeout: 240 seconds)
[22:18:01] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[22:19:27] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-12.prtc.net) (Ping timeout: 256 seconds)
[22:19:42] *** Joins: oxum (~oxum@106.203.195.217)
[22:19:49] *** Quits: ajfriesen (~ajfriesen@cable-89-1-117-98.nc.de) (Ping timeout: 252 seconds)
[22:24:22] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[22:26:02] *** Quits: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net) (Remote host closed the connection)
[22:27:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:27:40] *** Joins: koolazer (~koo@user/koolazer)
[22:29:23] *** Joins: fikran (~fikran@user/fikran)
[22:30:48] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[22:31:50] *** Joins: flynn (~mcbloch@user/flynn)
[22:37:36] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[22:37:51] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[22:40:00] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[22:46:22] *** Joins: oxum (~oxum@106.203.195.217)
[22:47:54] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 244 seconds)
[22:51:14] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[22:57:07] *** Joins: rob (~rob@user/bobwal)
[22:57:39] *** rob is now known as bobwal
[22:57:46] *** Quits: TUSF (~TUSF@71-147-0-117.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 252 seconds)
[23:00:12] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[23:00:13] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Read error: Connection reset by peer)
[23:01:06] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[23:04:29] *** Joins: komish (~quassel@47-184-200-125.dlls.tx.frontiernet.net)
[23:05:43] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[23:16:24] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[23:21:28] *** Joins: mnx|aw (~mnxaw@94.11.23.235)
[23:27:28] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 252 seconds)
[23:43:07] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.2 - https://znc.in)
[23:43:22] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[23:43:22] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[23:43:22] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[23:46:47] <nullp0inter> So I have a local package within a folder. main.go controllers/*(package controllers) This works fine locally for running the code, but when trying to build a Docker image through a bitbucket pipeline I am seeing 'no matching versions for query "latest"' because it's trying to pull from the remote url as if it were its own module. Not sure where to take it from here.
