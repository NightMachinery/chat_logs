[00:52:47] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:52:47] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:54:03] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[00:58:56] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 265 seconds)
[01:04:17] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c922:9c5f:802e:695a) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[01:12:38] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[01:36:46] *** Joins: holyghost (~holyghost@109.136.39.83)
[02:06:23] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[02:07:56] *** Quits: holyghost (~holyghost@109.136.39.83) (Quit:  bbl)
[02:19:39] *** Quits: slu (uid501941@id-501941.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:39:58] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[02:54:34] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[02:58:19] *** Quits: guifa (~guifa@static-host-66-18-52-169.epbinternet.com) (Quit: guifa)
[03:32:41] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:34:56] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:34:56] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:34:56] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:37:18] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[04:59:19] *** Joins: frost (~frost@59.71.244.36)
[05:59:20] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:20] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:59:20] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:59:20] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:20] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:20] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:59:20] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:59:20] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:59:20] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:59:20] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:59:20] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:59:20] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:20] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:59:20] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:59:20] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:59:20] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:59:20] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:59:20] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:00:11] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[06:00:14] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[06:01:04] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[06:01:32] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[06:01:51] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[06:02:30] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[06:02:45] *** Joins: Eddward (~Eddward@207.138.204.132)
[06:59:41] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[07:00:06] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[07:00:57] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[07:01:13] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[07:01:23] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[07:01:58] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[07:26:05] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 265 seconds)
[07:30:37] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:30:50] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[07:45:21] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:48:27] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[07:59:47] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[08:00:03] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[08:37:12] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[08:59:55] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[09:00:13] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[09:18:34] *** Quits: broquaint (~dbrook@static.140.30.69.159.clients.your-server.de) (*.net *.split)
[09:18:34] *** Quits: renormalist (~ss5@renormalist.net) (*.net *.split)
[09:18:34] *** Quits: tonyo (~tonyo@ec2-54-190-144-97.us-west-2.compute.amazonaws.com) (*.net *.split)
[09:18:34] *** Quits: esh (~quassel@minnesota.heebs.ch) (*.net *.split)
[09:18:34] *** Quits: moritz_ (~moritz@tina.perlgeek.de) (*.net *.split)
[09:18:42] *** Joins: moritz (~moritz@tina.perlgeek.de)
[09:18:42] *** Joins: renormalist (~ss5@renormalist.net)
[09:18:42] *** Joins: esh (~quassel@minnesota.heebs.ch)
[09:18:42] *** Joins: broquaint (~dbrook@static.140.30.69.159.clients.your-server.de)
[09:19:05] *** Joins: tonyo (~tonyo@ec2-54-190-144-97.us-west-2.compute.amazonaws.com)
[09:24:42] *** Quits: mtj (~mtj@2400:8902::f03c:91ff:fe93:b7f1) (*.net *.split)
[09:24:42] *** Quits: patterner_ (sid212303@id-212303.ilkley.irccloud.com) (*.net *.split)
[09:24:42] *** Quits: nebuchadnezzar (~dad@82-65-17-178.subs.proxad.net) (*.net *.split)
[09:24:42] *** Quits: juanfra__ (~juanfra@user/juanfra) (*.net *.split)
[09:24:42] *** Quits: phogg (~phogg@static-108-51-94-2.washdc.fios.verizon.net) (*.net *.split)
[09:24:43] *** Quits: polettix (~polettixx@linode.polettix.it) (*.net *.split)
[09:24:43] *** Quits: wanko (~wanko@51.15.4.226) (*.net *.split)
[09:24:43] *** Quits: ingy (~ingy@104.236.228.44) (*.net *.split)
[09:24:43] *** Quits: Juerd (juerd@computervrede.nl) (*.net *.split)
[09:24:43] *** Quits: gugod (gugod@li7-202.members.linode.com) (*.net *.split)
[09:24:50] *** Joins: wanko (~wanko@51.15.4.226)
[09:24:50] *** Joins: nebuchadnezzar (~dad@82-65-17-178.subs.proxad.net)
[09:24:52] *** Joins: patterner_ (sid212303@id-212303.ilkley.irccloud.com)
[09:24:55] *** Joins: polettix (~polettixx@linode.polettix.it)
[09:25:27] *** Joins: mtj (quasselcor@2400:8902::f03c:91ff:fe93:b7f1)
[09:25:31] *** Joins: Juerd (juerd@computervrede.nl)
[09:26:06] *** Joins: gugod (gugod@li7-202.members.linode.com)
[09:26:07] *** Joins: phogg (~phogg@static-108-51-94-2.washdc.fios.verizon.net)
[09:27:08] *** Joins: ingy (~ingy@104.236.228.44)
[09:30:20] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:32:39] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[09:32:47] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:32:53] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[09:44:02] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[09:52:41] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 252 seconds)
[09:53:17] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[09:54:03] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c922:9c5f:802e:695a)
[09:59:45] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[10:52:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c922:9c5f:802e:695a) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[11:41:40] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:18:16] *** Joins: patrickb (~patrickb@85-22-61-234.ip.dokom21.de)
[12:20:17] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[12:56:10] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:00:59] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[13:29:16] *** Joins: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[13:33:11] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 252 seconds)
[13:38:40] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[13:38:55] *** Quits: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:39:09] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[13:47:03] <Xliff> Good mornign, #perl6
[13:47:09] <Xliff> s/#perl6/#raku/
[13:47:15] <Xliff> One of these days...
[13:49:47] <discord-raku-bot> <Nemokosch#9980> do these s// notations actually do something on the IRC?
[13:49:57] <discord-raku-bot> <Nemokosch#9980> or is it just a kind of inside joke
[13:50:09] <Xliff> Inside joke
[13:50:46] <Xliff> Although if you preceed anything with "m:", what follows is taken as evalable code by camelia and she'll try and run it.
[13:50:52] <discord-raku-bot> <Nemokosch#9980> It started being suspicious that there is some kind of bot there as well üòÑ
[13:51:13] <discord-raku-bot> <Nemokosch#9980> oh okay, that I can see
[13:51:24] <Xliff> m: say "Hi there!" ~~ m:g/[er]/
[13:51:24] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´(ÔΩ¢erÔΩ£)‚ê§¬ª
[13:58:15] *** Joins: immediate (~immediate@5.177.198.11)
[14:01:57] <immediate> hi, out of curiosity :d Is there any way to detect if a passed array is actually an attribute of an instance object?
[14:02:12] <immediate> *passed to a function
[14:04:06] <moritz> no, the array knows nothing about where it's referenced
[14:04:29] <lizmat> well, actually, you can with introspection:
[14:04:32] <lizmat> m: class A { has @.a }; sub b(\a) { dd a.VAR.name }; b A.new(a => (1,2,3)).a
[14:04:32] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´"\@!a"‚ê§¬ª
[14:05:15] <moritz> my experience with introspecting container names is that's not as reliable as you'd want it to be
[14:05:25] <lizmat> true
[14:05:45] <lizmat> in any case, that property is being used by "dd"
[14:06:06] <lizmat> m: class A { has @.a }; dd A.new(a => (1,2,3)).a
[14:06:06] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´Array @!a = [1, 2, 3]‚ê§¬ª
[14:06:18] <Xliff> lizmat: Have you played with RakuAST long enough to know which nodes are used in the creation of something like this: "sub a ( &b (Int, Str --> Num) ) { }"
[14:06:55] <lizmat> Xliff: it's been many months since I've done anything with rakuAST, so I wouldn't know offhand
[14:07:23] <lizmat> I suggest checking the tests, they all have the intended Raku equivalent source code in comments and/or tests
[14:09:21] <lizmat> immediate: you're probably better of mixing in a role into whatever values you want to be able to detect
[14:13:19] <lizmat> m: class A { has @.a = 1,2,3; method TWEAK() { @!a does role { method foo() { } } } }; sub b(\a) { say "{a} is a foo" if a.can("foo") }; b (1,2,3); b A.new.a
[14:13:19] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´1 2 3 is a foo‚ê§¬ª
[14:13:38] <lizmat> m: class A { has @.a = 1,2,3; method TWEAK() { @!a does role { method foo() { } } } }; sub b(\a) { say "{a} is a foo" if a.can("foo") }; b (4,5,6); b A.new.a  # clearer
[14:13:39] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´1 2 3 is a foo‚ê§¬ª
[14:15:47] <immediate> lizmat: thank you very much!
[14:17:35] <Xliff> lizmat: Looked. Doesn't seem to be there
[14:17:48] <Xliff> I'll try and catch jnthn.
[14:23:19] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[14:29:50] *** Quits: frost (~frost@59.71.244.36) (Quit: Ping timeout (120 seconds))
[14:32:56] *** Quits: patrickb (~patrickb@85-22-61-234.ip.dokom21.de) (Ping timeout: 256 seconds)
[14:44:37] *** Quits: immediate (~immediate@5.177.198.11) (Quit: Connection closed)
[14:48:07] *** Joins: frost (~frost@59.71.244.36)
[15:02:03] <discord-raku-bot> <Anton Antonov#7232> What would be the most elegant way to rename the keys in a hash? For example, I have a hash `h0` and a hash `kk` with key-to-new-key mapping. I found the Perl5 module `Hash::Rename` something like that and it was not that hard to re-program it in Raku, (https://metacpan.org/pod/Hash::Rename). But I would rather use Raku "direct" code.
[15:03:51] <lizmat> %newhash = %hash.map: { %mapper{.key} => .value }
[15:04:55] <lizmat> you could even .race that if the hash is very big
[15:05:08] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:05:27] <discord-raku-bot> <Anton Antonov#7232> @lizmat Great, thanks!
[15:08:01] <lizmat> this of course assumes no clashes and no keys added while mapping
[15:08:07] <discord-raku-bot> <Anton Antonov#7232> @lizmat During the weekend I read the code of your packages `Hash::int`  and `Hash::Agnostic`. Is it a good idea to have a package `Hash::str`? And if yes, should `Hash::str`  it based on `Hash::int` or `Hash::Agnostic`?
[15:11:20] <lizmat> probably neither
[15:17:03] <discord-raku-bot> <Anton Antonov#7232> @lizmat Haha, ok!
[15:17:52] <lizmat> just give me a mo, it's basically just a cat license of Hash::int
[15:18:23] <discord-raku-bot> <Anton Antonov#7232> Sounds great!
[15:20:27] <lizmat> well... the speedup for the native str Hash would only be a few %
[15:21:34] <discord-raku-bot> <Anton Antonov#7232> @liszmat Any speed-up is welcome!
[15:22:23] <lizmat> nah, just benchmarking it a bit now, it is within noise
[15:22:28] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[15:23:25] <discord-raku-bot> <Anton Antonov#7232> Do you think that is across all platforms / OS?
[15:23:58] <discord-raku-bot> <Anton Antonov#7232> I think it might instructive to see the code anyway...
[15:25:24] <discord-raku-bot> <Anton Antonov#7232> @lizmat FYI, my motivation for asking for `Hash::str` is to speed-up building of tries-with-frequencies. (Which is a favorite Machine Learning method/approach of mine.) My initial Raku implementation was 100 slower than my Java implementation and 5 times slower than my Mathematica implementation. I was able to reduces those factors by half (40 and 2.2 respectively) but that is still slow.
[15:32:34] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:34:38] <lizmat> Anton Antonov: Hash::str should be available now after a "zef update"
[15:35:33] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:35:46] <discord-raku-bot> <Anton Antonov#7232> Great! Thank you!
[15:38:00] <discord-raku-bot> <Anton Antonov#7232> @lizmat And, yes, I found the code here: https://github.com/lizmat/Hash-str .
[15:44:47] <discord-raku-bot> <Anton Antonov#7232> @lizmat And, yes, I found the code here: https://github.com/lizmat/Hash-str .
[15:57:46] <Geth> ¬¶ raku-mode: 4ee9045eeb | Altai-man++ (committed using GitHub Web editor) | raku-mode.el
[15:57:47] <Geth> ¬¶ raku-mode: Bump version to have an update without pkg-info
[15:57:47] <Geth> ¬¶ raku-mode: 
[15:57:47] <Geth> ¬¶ raku-mode: @phikal++ for the suggestion.
[15:57:47] <Geth> ¬¶ raku-mode: review: https://github.com/Raku/raku-mode/commit/4ee9045eeb
[16:00:38] <Altreus> Having discarded the traditional regex grammar, I don't suppose Raku went a step further and discarded the traditional datetime formatting codes as well?
[16:01:02] <Altreus> I marvel at the use of many of these, and the logic behind many others
[16:03:04] <Altreus> %t - a tab character ... as if we can't put a tab character in a string already
[16:03:34] <lizmat> printf compatibility was rated high
[16:04:07] <Altreus> strftime not printf
[16:04:14] <lizmat> meanwhile, I think the rakuAST approach of printf shows how we can easily make something better and be performant (because it will generate code, rather than interpret stuff each time)
[16:04:15] <Altreus> printf generally has useful codes
[16:04:32] <lizmat> I don't think we have strftime support in Raku ?
[16:04:38] <Altreus> oh, then I approve
[16:04:42] <Altreus> :D
[16:05:11] <Altreus> ah it has a formatter object
[16:06:17] <Altreus> I do wish someone would formally name Y-m-dTH:M:S¬±z so we can create meaningful method names
[16:08:43] <lizmat> m: sub Y-m-dTH:M:S¬±z { }
[16:08:43] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub Y-m-dTH:M:S7‚èè5¬±z { }‚ê§    expecting any of:‚ê§        new name to be defined‚ê§¬ª
[16:08:52] <lizmat> m: sub Y-m-dTH:M:S { }
[16:08:52] <camelia> rakudo-moar ba15173fd: ( no output )
[16:09:01] <lizmat> too bad about the ¬±   :-)
[16:09:31] <Altreus> hey wait, you can put a colon in identifiers?
[16:09:48] <Altreus> Wouldn't it be seen as an adjective?
[16:10:19] <lizmat> m: sub Y-m-dTH:M:S { dd }; Y-m-dTH:M:S
[16:10:20] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´sub Y-m-dTH:M:S()‚ê§¬ª
[16:10:48] <Altreus> m: class Y-m-dTH:M:S {}
[16:10:48] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot use adverb S on a type name (only 'ver', 'auth' and 'api' are understood)‚ê§at <tmp>:1‚ê§------> 3class Y-m-dTH:M:S7‚èè5 {}‚ê§    expecting any of:‚ê§        generic role‚ê§¬ª
[16:10:49] <lizmat> I don't recall the exact semantics of that, but yes, you can
[16:10:51] <Altreus> ah
[16:10:56] <Altreus> that's where it's an adverb
[16:11:15] <Altreus> class identifiers have different rules :)
[16:11:34] <lizmat> yup
[16:11:54] <Altai-man> m: class YouCan't {}; say YouCan't.new;
[16:11:55] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´YouCan't.new‚ê§¬ª
[16:11:56] <lizmat> I think they're considered adverby on other identifiers as well
[16:13:27] <lizmat> https://raku.land/zef:lizmat/Acme::Don't   :-)
[16:14:04] <Altreus> oh good, Raku was feeling boring without acme
[16:14:32] <lizmat> https://raku.land/?q=Acme
[16:15:56] <Altreus> +1 for don't x unless y
[16:16:03] <Altreus> that's English!
[16:17:18] *** Joins: Eddward (~Eddward@207.138.204.132)
[16:29:53] <Altreus> I have been informed the datetime format I want is in rfc3339
[16:29:55] <discord-raku-bot> <Anton Antonov#7232> @lizmat Your example here https://github.com/lizmat/Hash-int uses `Hash::str`  (not `Hash::int`.)
[16:30:59] <lizmat> Antonov: yeah a snafu, I guess I should make an update
[16:32:04] <Altreus> a thinko
[16:32:28] <discord-raku-bot> <Anton Antonov#7232> @lizmat Your example here https://github.com/lizmat/Hash-int uses `Hash::str`  (not `Hash::int`.)
[16:33:03] <Altreus> discord bot may be duplicating messags
[16:33:54] <lizmat> Antonov: should be fixed now
[16:37:53] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 264 seconds)
[16:43:29] <discord-raku-bot> <Anton Antonov#7232> @lizmat Ok, thanks!
[16:45:19] *** Quits: frost (~frost@59.71.244.36) (Quit: Connection closed)
[16:50:06] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Remote host closed the connection)
[16:51:11] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[16:51:47] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[16:56:35] *** Joins: immediate (~immediate@5.177.198.11)
[16:58:33] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Remote host closed the connection)
[17:00:13] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[17:23:26] <discord-raku-bot> <Anton Antonov#7232> @lizmat I programmed a benchmark for `Hash::str` and `Hash::int` -- both are 40-50% faster on my MacBookPro.
[17:24:42] <discord-raku-bot> <Anton Antonov#7232> @lizmat It looks like though I cannot use `push` on those structures. Is it something that has to be implemented? I.e. should I open issues on the corresponding GitHub repositories?
[17:31:05] <codesections> I found this surprising.  Any thoughts on whether it's a bug: 
[17:31:08] <codesections> m: class C {...}; say C.foo; say C.bar; my class C { my $n = 42; method foo { $n }; method bar { 42 }} 
[17:31:09] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´(Any)‚ê§42‚ê§¬ª
[17:32:34] <codesections> Specifically, the "this" I'm referring to is that local variables in a class are declared but not assigned in the time between a forward declaration of the class and the actual declaration 
[17:47:04] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:55:44] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:02:17] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 265 seconds)
[18:11:03] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:44:19] <lizmat> Antonov: please open issues  :-)
[18:45:31] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[19:06:42] <raydiak> codesections: I don't have time to check docs for an explanation, but I for one do find that surprising
[19:07:06] <raydiak> autopunned roles don't seem to suffer from it, interestingly:
[19:07:08] <raydiak> m: role C { ... }; C.m; role C { my $foo = 42; method m { say $foo } }
[19:07:09] <camelia> rakudo-moar ba15173fd: OUTPUT: ¬´42‚ê§¬ª
[19:17:24] <codesections> raydiak, thanks.  If no one chimes up with a reason it's _not_ a bug, I'll open an issue later today
[19:24:32] <raydiak> if you wanted to check the docs yourself, I'd be searching for something about class composition time and compile vs run time, I strongly suspect it's something to do with those things
[19:25:01] <raydiak> codesections++ good at shaking out the bugs
[19:25:17] <raydiak> afk &
[19:42:23] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[19:56:16] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[19:56:34] *** Joins: tejr (~tejr@user/tejr)
[20:05:03] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 265 seconds)
[20:22:37] <[Coke]> https://www.reddit.com/r/rakulang/comments/pwh3i3/reflections_on_a_decade_of_moarvm_a_runtime_for/ looks nifty. Wonder if there's enough other stuff to make the online attendance package worth it.
[21:05:03] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:05:04] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:07:10] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[21:23:18] <codesections> That does look really interesting.  It looks like at least many of the talk recordings from the 2020 conference were posted online (https://2020.splashcon.org/).  I hope the same is true this year
[21:27:19] <[Coke]> (y)
[21:33:04] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:35:55] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[21:48:25] *** Quits: peder (4822@nidur.ifi.uio.no) (Ping timeout: 260 seconds)
[22:14:00] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/09/27/2021-39-programming-haku/
[22:14:42] *** Joins: peder (4822@nidur.ifi.uio.no)
[23:14:42] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[23:27:56] *** Quits: vasko (~vasko@137.220.91.123) (Quit: The Lounge - https://thelounge.chat)
[23:34:40] *** Joins: vasko (~vasko@137.220.91.123)
