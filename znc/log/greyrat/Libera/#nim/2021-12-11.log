[00:00:40] <FromDiscord> <geekrelief> ahh.. I should handle tuples too
[00:05:32] <FromDiscord> <hmmm> and suddenly it became a library üòÜ
[00:06:15] <FromDiscord> <hmmm> should be named the helping relief ü§î
[00:06:44] <FromDiscord> <geekrelief> haha yeah
[00:06:48] <FromDiscord> <geekrelief> it handles tuples now
[00:08:23] <FromDiscord> <hmmm> damn macros look hard to write
[00:08:56] *** Quits: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:09:00] <FromDiscord> <geekrelief> In reply to @hmmm "damn macros look hard": at first, it seems hard, but once you understand the tools to do it, it's addicting
[00:09:21] <nrds> <06Prestige99> They're pretty unreadable though
[00:09:24] <FromDiscord> <geekrelief> basically use `dumpAstGen` and `astGenRepr` to figure out the structure of what you want to create
[00:09:29] <PMunch> Yeah macros look tricky, but they're not that hard to write
[00:09:33] <FromDiscord> <geekrelief> In reply to @nrds "<Prestige> They're pretty unreadable": nah
[00:09:40] <PMunch> @geekrelief, glad to see that my tools are actually getting used :)
[00:09:45] <FromDiscord> <geekrelief> anyone comfortable writing macros can read them
[00:09:54] <PMunch> Ehhm
[00:10:06] <FromDiscord> <hmmm> what's the absolute novice macro primer on shooting your foot with macros?
[00:10:06] <PMunch> I can barely even read my own macros :P
[00:10:21] <FromDiscord> <geekrelief> I've jumped into some crazy looking macros in godot-nim
[00:10:34] <FromDiscord> <geekrelief> "readable" to me is debuggable
[00:10:49] <PMunch> @hmmm, I wrote this https://peterme.net/metaprogramming-and-read-and-maintainability-in-nim.html
[00:11:05] <FromDiscord> <geekrelief> for the most part if I don't understand something I can drop in an `echo node.astGenRepr` and go from there
[00:11:08] <PMunch> Takes you from a small program, to a small program with macros
[00:11:21] <PMunch> Oh yeah, that's true
[00:12:19] <PMunch> But I mean, look at this and tell me it's readable :P https://github.com/PMunch/protobuf-nim/blob/master/src/protobuf.nim#L555
[00:13:14] <FromDiscord> <geekrelief> For anyone scared of macros, don't be.  Just take it slow.  The NimNodes are a tree, each with a `kind` field.  From there you just need to know that each kind of node has a certain number of children that expect to be certain kinds of nodes.
[00:13:29] <FromDiscord> <geekrelief> The docs cover it well.
[00:13:39] <FromDiscord> <geekrelief> The rest is experimentaton
[00:13:58] <PMunch> I tried to write macroutils to make macros a bit more readable
[00:14:11] *** Joins: lumo_e (~enrico@2001:b07:5d38:4002:9274:b2ec:abbf:2272)
[00:14:26] <PMunch> Unfortunately haven't had much of a possibility to use it yet..
[00:15:06] <FromDiscord> <geekrelief> yeah things could definitely be easier, but I seem to be doing fine without additional utilities. I just use `astGenRepr` everywhere. üôÇ
[00:17:06] <PMunch> To be fair astGenRepr didn't exist when I started out writing macros :P
[00:17:12] <PMunch> Which is why I wrote it :)
[00:17:17] <nrds> <06Prestige99> I hardly ever run into cases where I'd want to use a macro
[00:17:41] <PMunch> Prestige, you're just not hooked yet
[00:17:52] <PMunch> Just wait until you get your first macro high, there's no going back
[00:18:01] <FromDiscord> <Solitude> In reply to @geekrelief "yeah things could definitely": i believe in treeRepr supremacy üôè
[00:18:28] <FromDiscord> <geekrelief> without macros, some code is just way more painful to write
[00:19:09] <PMunch> Not to mention read
[00:20:57] <nrds> <06Prestige99> PMunch I think I'm just not creative enough maybe
[00:24:41] <nrds> <06Prestige99> I think i've only ever used a macro once
[00:24:55] <nrds> <06Prestige99> and it probably could have been a template lol
[00:25:06] <FromDiscord> <geekrelief> I've been experimenting with this macro lately: https://github.com/geekrelief/genit
[00:26:45] <FromDiscord> <hmmm> oh that's quite nice geeky bro, I like robot code, that's how I write anyway lol
[00:27:10] <PMunch> @geekrelief, oh wow, that looks really neat
[00:27:25] <FromDiscord> <hmmm> give me nice repetitive ordered blocky code and I feel at home
[00:27:41] <PMunch> So many times I've thought "there has to be a better way" for this code of problem. But there are just too many different names
[00:27:45] <FromDiscord> <geekrelief> thanks, guys. I wanted something like a templating language for nim. I feels like something between a template and macro
[00:27:55] <PMunch> But with `something it` you can do it really easily!
[00:28:09] <FromDiscord> <geekrelief> the implementation is a bit of a mess since I was just experimenting
[00:28:19] <FromDiscord> <geekrelief> but I'm planning on rewriting it at some point.
[00:29:45] <FromDiscord> <geekrelief> I want to improve the performance and expand on it more.  I'm pretty much using it all over my TM binding.
[00:47:25] *** Quits: terminalpusher (~terminalp@2a01:586:2220:1:fec:bf3d:488b:50f7) (Remote host closed the connection)
[00:48:17] <PMunch> Stream is live for day 10 of AoC: https://www.twitch.tv/pmunche
[00:51:17] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[00:53:17] *** Joins: xet7 (~xet7@user/xet7)
[01:01:31] *** Joins: vicfred (~vicfred@user/vicfred)
[01:28:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:29:32] <FromDiscord> <Sabena Sema> In reply to @hmmm "yea yea now I": so its not horrible to do this (and nims module system removes some of the codegen spam that can result) using generics everywhere will defer compile errors util the point where you use (instantiate) the generic. this can result in poor diagnostics. Also you cant form a pointer to a generic proc, only a specific instance
[01:31:19] <FromDiscord> <Elegantbeef> You say that like one should be able to have a pointer to a generic proc üòÄ
[01:31:25] *** Joins: jjido (~Denis@90.213.58.125)
[01:35:18] <FromDiscord> <Sabena Sema> well there are ways to implement generics that allow stuff lime that in some cases
[01:36:54] <FromDiscord> <Sabena Sema> (edit) "lime" => "like"
[01:37:42] <FromDiscord> <TryAngle> In reply to @hmmm "woa I was fighting": did u make tinysqlite work?‚ÜµI don't understand how to filter select
[01:38:32] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[01:39:48] *** Joins: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de)
[01:59:33] <FromDiscord> <Sabena Sema> OK so the docs are actually right on the basics of when symbols are open
[02:00:09] <FromDiscord> <Sabena Sema> sent a code paste, see https://play.nim-lang.org/#ix=3HDJ
[02:00:11] <FromDiscord> <Sabena Sema> the first prints "4" the second prints "5"
[02:00:23] <FromDiscord> <Sabena Sema> surprising, but a nice simple rule
[02:00:49] <FromDiscord> <Sabena Sema> although....
[02:01:02] <FromDiscord> <Sabena Sema> I wonder if that happens if `bark(x:float):float` comes from another module
[02:01:16] <FromDiscord> <Sabena Sema> that does seem a bit questionable to me, but also has some nice effects
[02:04:00] <FromDiscord> <Elegantbeef> It should bind properly, assuming it's an open symbol(it should be in a generic)
[02:05:16] <FromDiscord> <Sabena Sema> the point here is that adding the float overload of bark turns bark from a closed to an open symbol in the generic
[02:06:39] <FromDiscord> <Elegantbeef> Yea i'd argue proc calls that depend on something derived from the generic should be always open
[02:06:55] <FromDiscord> <Sabena Sema> sent a code paste, see https://play.nim-lang.org/#ix=3HDM
[02:07:03] <FromDiscord> <Sabena Sema> yeah, that was my first instinct
[02:07:10] <FromDiscord> <Sabena Sema> but that's not actually true in c++ oddly
[02:07:22] <FromDiscord> <Sabena Sema> a dependent function call _that is fully qualified_ is open
[02:07:31] <FromDiscord> <Sabena Sema> but function calls subject to adl need at lease one overload
[02:07:55] <FromDiscord> <Elegantbeef> But luckily we can just do `mixin bark`
[02:08:17] <FromDiscord> <Sabena Sema> yes
[02:10:38] <FromDiscord> <Sabena Sema> yeah the multi-module one does NOT force the symbol open (which is good, otherwise the openness would depend on import order)
[02:10:41] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3HDO
[02:10:55] <FromDiscord> <Sabena Sema> oh, neat
[02:11:07] <FromDiscord> <Elegantbeef> That makes sense as the symbol openess is based off the declaration site not instantiation
[02:11:18] <FromDiscord> <Elegantbeef> If it was based off instantiation site it'd always be open in most cases
[02:14:14] <FromDiscord> <Elegantbeef> Hmm i feel like having closed symbols if there is only a single overload in the generic scope just wrong
[02:14:26] <FromDiscord> <Elegantbeef> Wonder what breaks if i were to make them all open
[02:15:25] <FromDiscord> <Sabena Sema> anyway https://github.com/nim-lang/Nim/issues/19240 submitted on the "Delegating bind statement" section being nonsense
[02:16:12] <FromDiscord> <Sabena Sema> I think there are advantages to doing it that way (having it closed with only a single overload)
[02:16:42] <FromDiscord> <Elegantbeef> I mean the benefit is you dont export the procedure that it closely bound to
[02:17:08] <FromDiscord> <Sabena Sema> no, the benefit is that random other stuff can't break your code
[02:17:09] <FromDiscord> <Elegantbeef> But in the case it's open and you dont add an override the proc you call should still be that one assuming the override matches
[02:17:29] <FromDiscord> <Elegantbeef> I mean that's what i was eluding to
[02:17:43] <FromDiscord> <Elegantbeef> It binds tightly to that proc so nothing can break üòÄ
[02:17:52] <FromDiscord> <Elegantbeef> overload matches\
[02:18:04] <FromDiscord> <Sabena Sema> also, when the binding is closed the compiler can emit diagnostics immediately
[02:18:14] <FromDiscord> <Sabena Sema> so it makes it easier to write correct generic code
[02:18:31] <FromDiscord> <Elegantbeef> In the case that it's infact supposed to be a closed symbol
[02:19:10] <FromDiscord> <Elegantbeef> Really i'd argue all closed symbols in generics should emit a hint "closedSymbol X bound to Y"
[02:19:54] <FromDiscord> <Elegantbeef> Cause to me a closed symbol is very much the opposite of what you want in most generic code unless it's constrained to a specific type
[02:20:10] <FromDiscord> <Sabena Sema> sent a code paste, see https://play.nim-lang.org/#ix=3HDT
[02:20:16] <FromDiscord> <Sabena Sema> whereas if you uncomment the float overload the compiler can't emit that error
[02:20:49] <FromDiscord> <Elegantbeef> I personally dont care about early diagnostics for generics
[02:21:11] <FromDiscord> <Elegantbeef> Concepts should be used to constrain generics if they're supposed to match a signature
[02:21:50] <FromDiscord> <Sabena Sema> if you open all symbols than concepts still can't provide diagnostics at the point of definition
[02:21:59] <FromDiscord> <Elegantbeef> Like i said i dont care
[02:22:07] <FromDiscord> <Sabena Sema> because concepts are not exhaustive (it's not like rust, it's like C++)
[02:22:22] *** Quits: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:22:24] <FromDiscord> <Sabena Sema> I actually kinda like this rule a lot
[02:22:43] <FromDiscord> <Sabena Sema> because it avoids having to deal with what's a "dependent expression" or whatever
[02:22:55] *** Joins: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de)
[02:23:10] <FromDiscord> <Sabena Sema> sent a code paste, see https://play.nim-lang.org/#ix=3HDU
[02:23:13] <FromDiscord> <Sabena Sema> has the same behavior as before
[02:23:41] <NimEventer> New thread by Cnerd: Httpbeast failed to compile on Android arm device, see https://forum.nim-lang.org/t/8699
[02:25:31] <FromDiscord> <Elegantbeef> I think most people dont want closed symbols in generics so this causes more issues than it solves
[02:25:55] <FromDiscord> <Elegantbeef> I could be wrong, but i just dont see the benefits being that great
[02:27:17] <FromDiscord> <Elegantbeef> If all generics are forced open by default then closed symbols are explicit `bind` behaviour, which means it's very opaque where you want closed symbols is my view atleast
[02:28:35] <FromDiscord> <Sabena Sema> making all symbols open is a huge nightmare for maintaining anything
[02:29:03] <FromDiscord> <Sabena Sema> (edit) "maintaining anything" => "long term maintenance"
[02:29:25] <FromDiscord> <Elegantbeef> I dont know that i agree simply cause it's generally desired for non constrained types
[02:32:23] <FromDiscord> <Sabena Sema> only for dependent expressions
[02:33:14] <FromDiscord> <Elegantbeef> Thta's what i'm talking about
[02:34:01] <FromDiscord> <Sabena Sema> sent a code paste, see https://play.nim-lang.org/#ix=3HE1
[02:34:24] <FromDiscord> <Sabena Sema> (btw I think zig _does_ make literally everything open, and it's one reason why I'm skeptical of doing big projects in zig)
[02:34:31] <FromDiscord> <Sabena Sema> I have to test it out though
[02:34:42] <FromDiscord> <Elegantbeef> I mean i didnt mean literally every symbol
[02:34:53] <FromDiscord> <Elegantbeef> I meant any symbol that depends on the generic type
[02:35:04] <FromDiscord> <Sabena Sema> sent a code paste, see https://play.nim-lang.org/#ix=3HE2
[02:35:07] <FromDiscord> <Sabena Sema> but
[02:35:30] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3HE3
[02:35:52] <FromDiscord> <Elegantbeef> Without `bind bark` and without the float overload it'd shoulbe be an open symbol imo
[02:36:39] <FromDiscord> <Sabena Sema> well, `bark(i)` is not dependent on any generic parameters
[02:36:55] <FromDiscord> <Sabena Sema> so you get this kinda brittle dynamic scoping of functions that leads to lots of breakage over time
[02:37:48] <FromDiscord> <Elegantbeef> I copied the wrong code üòÄ
[02:37:49] <FromDiscord> <Sabena Sema> it also means that it's far more likely different instantiations of a generic will result in like, actually different code
[02:37:51] <FromDiscord> <Sabena Sema> which is bad
[02:40:11] <FromDiscord> <Elegantbeef> Like i said `bark(i)` wouldnt be dependant on open/closed symbols it'd be bound to `bark(int or var int)`
[02:40:34] <FromDiscord> <Elegantbeef> I'm not an idiot i just copied the wrong code
[02:40:34] <FromDiscord> <Sabena Sema> so it's closed
[02:40:48] <FromDiscord> <Sabena Sema> sent a code paste, see https://play.nim-lang.org/#ix=3HE4
[02:40:56] <FromDiscord> <Sabena Sema> oh no
[02:41:02] <FromDiscord> <Sabena Sema> you're saying it should be open
[02:41:07] <FromDiscord> <Elegantbeef> It's not dependant on the generic parameters
[02:41:13] <FromDiscord> <Elegantbeef> i'm certainly not
[02:41:22] <FromDiscord> <Sabena Sema> but again, if it binds to int or var int that's what open means
[02:41:32] <FromDiscord> <Elegantbeef> I mean that depends on overloads
[02:41:39] <FromDiscord> <Elegantbeef> Whatever is declared above this generic instantiation it matches
[02:41:44] <FromDiscord> <Sabena Sema> if it's closed it can't bind to the var int one because that function is not declared when the generic is parsed
[02:41:47] <FromDiscord> <Elegantbeef> In this case it'd bind to `bark int`
[02:41:51] <FromDiscord> <Sabena Sema> OK so closed
[02:42:10] <FromDiscord> <Elegantbeef> Well not technically closed but yes
[02:42:16] <FromDiscord> <Elegantbeef> It'd just be a bound symbol in this casee
[02:42:44] <FromDiscord> <Sabena Sema> I mean that's what closed means
[02:43:00] <FromDiscord> <Elegantbeef> No there is actually a difference between closed/sym in the compiler
[02:43:17] <FromDiscord> <Elegantbeef> In this case it'd not be labelled a closed sym but semantically the same thing
[02:43:44] <FromDiscord> <Elegantbeef> Anyway only procedures that derive from generic parameters is what i'm saying should be forced open unless using bind
[02:44:00] <FromDiscord> <Elegantbeef> It makes the most sense i think as closed sym seems to very much be a thing of "I know i want this bound tightly"
[02:44:17] <FromDiscord> <Sabena Sema> bind forces an identifier closed
[02:44:33] <FromDiscord> <Sabena Sema> no, closed symbols should be the default when possible
[02:44:36] <FromDiscord> <Elegantbeef> Can you stop explaining things to me like i dont know what it does thanks
[02:44:46] <FromDiscord> <Sabena Sema> sorry
[02:45:20] <FromDiscord> <Sabena Sema> yeah I think we agree
[02:45:26] <FromDiscord> <Elegantbeef> I'm very much the opposite boat cause i really think in the general case you rarely want closed symbols
[02:45:29] <FromDiscord> <Sabena Sema> dependent calls open, non-dependent closed
[02:45:47] <FromDiscord> <Elegantbeef> Well non dependant cannot be open that makes 0 sense üòõ
[02:45:51] <FromDiscord> <Sabena Sema> no
[02:45:52] <FromDiscord> <Sabena Sema> they can
[02:46:08] *** Quits: advesperacit (~advespera@37.120.131.254) (Quit: advesperacit)
[02:46:14] <FromDiscord> <Elegantbeef> shouldnt\
[02:47:36] <FromDiscord> <Sabena Sema> yeah, it is sometimes useful to make them open, though
[02:47:53] <FromDiscord> <Sabena Sema> but yeah, I think we basically agree
[02:48:21] <FromDiscord> <Sabena Sema> but, the rules nim uses are much simpler than having to figure out what qualifies as a type dependent (or value dependent) expression
[02:50:40] <FromDiscord> <Elegantbeef> I dont imagine it's that complicated to resolve though, just check everycall if any type has `tyGenericParam` inside it's body and if so make it an openSym if not
[02:50:40] <FromDiscord> <Elegantbeef> if not `bind`ed\
[02:50:40] <FromDiscord> <Elegantbeef> I mean the mechanism is clearly already there, so just slight switch of logic for more sensible generics
[02:50:54] <FromDiscord> <Elegantbeef> Though since it'd be a breaking change i reason it wont be accept it
[02:53:54] <FromDiscord> <Sabena Sema> I really doubt that's why, this is more subtle than that
[02:55:53] <FromDiscord> <evil> is there a library for dealing with jsonc files? the comments really mess up the std json parser
[03:00:00] <FromDiscord> <Elegantbeef> There is a json5 implementation not the same as jsonc but allows comments
[03:03:00] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[03:16:25] *** Quits: src (~src@user/src) (Quit: Leaving)
[03:25:13] *** Joins: src (~src@user/src)
[03:32:13] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 240 seconds)
[03:37:34] *** Joins: [R] (~rs@genoce.org)
[03:50:49] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[04:16:51] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3HEs
[04:17:12] <FromDiscord> <Rika> so a LRU cache?
[04:17:13] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3HEs" => "https://play.nim-lang.org/#ix=3HEt"
[04:17:22] <FromDiscord> <TryAngle> ah yes exactly thaat, forgot tit's name
[04:17:25] <FromDiscord> <TryAngle> (edit) "tit's" => "it's"
[04:17:29] <FromDiscord> <TryAngle> (edit) "thaat," => "that,"
[04:17:35] <FromDiscord> <Rika> prolly 3rd party
[04:27:45] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[04:28:11] <FromDiscord> <valerga> how does nim have so many backends/targets, c, cpp, objc, js, seems like a lot of work?
[04:31:17] <FromDiscord> <Elegantbeef> it has a code gen phase that is somewhat hookable
[04:31:38] <FromDiscord> <Elegantbeef> So you need to take the Nim code then emit semantically correct backend and send it to where it needs to go
[04:36:26] *** Quits: lumo_e (~enrico@2001:b07:5d38:4002:9274:b2ec:abbf:2272) (Ping timeout: 268 seconds)
[04:48:54] *** Quits: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:55:35] <FromDiscord> <Sabena Sema> In reply to @valerga "how does nim have": well, C, cpp, and objc are very similar in terms of what the code looks liike
[04:55:38] <FromDiscord> <Sabena Sema> (edit) "liike" => "like"
[04:56:09] <FromDiscord> <Sabena Sema> nim isn't emitting the kind of code that a human would write in those languages
[04:56:10] <FromDiscord> <Rika> They share a lot of their code base yes
[04:56:15] <FromDiscord> <Sabena Sema> (edit) "nim isn't emitting the kind of code that a human would write in those languages ... " 03added "either"
[04:56:48] <FromDiscord> <Sabena Sema> so it needs to generate just a subset of all the "normal" patterns you'd see in code
[04:57:29] <FromDiscord> <leorize> the C++ backend is really just the C backend but with exceptions \:p
[04:58:43] <FromDiscord> <Sabena Sema> are nim's C exceptions typcially just sjlj style
[04:59:23] <FromDiscord> <leorize> if you use arc then it's kinda like an if statement
[04:59:45] <FromDiscord> <leorize> "goto exceptions", as we call it
[04:59:57] <FromDiscord> <Sabena Sema> (I'm convinced that C++ table based exception handling could be implemented much, much better (in particular in the matching phase of exception catching) if you can exploit {.final.} / final exceptions
[05:00:07] <FromDiscord> <Sabena Sema> (edit) "exceptions" => "exceptions)"
[05:00:20] <FromDiscord> <leorize> sjlj is the default for non-arc gc, though
[05:00:45] <FromDiscord> <Sabena Sema> none of the c++ implementations around can exploit that though, since they can't really break exceptions ABI and their implementations were designed before final was a "thing"
[05:01:24] <FromDiscord> <leorize> c++ people are looking into a redesign of exceptions and it looks pretty good
[05:02:00] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Quit: noeontheend)
[05:02:43] <FromDiscord> <Sabena Sema> herbceptions is unlikely to happen in the next decade
[05:03:03] <FromDiscord> <Sabena Sema> it's a good idea, but has zero actual traction in wg21
[05:03:16] <FromDiscord> <Sabena Sema> (edit) "it's a good idea, but has zero actual traction in wg21 ... " 03added "in terms of people actually doing the work to get it through"
[05:03:31] <FromDiscord> <leorize> thankfully nim is not c++ so we can steal it and beat them to the punch \:p
[05:03:58] <FromDiscord> <leorize> in fact we have a similar proposal made by Araq
[05:04:08] <FromDiscord> <Sabena Sema> like it's a whole new error handling facility, many people are not convinced that adding another separate error handling facility to the core lang is needed (the usual outcome here is that we get some insane library metaprogramming approach)
[05:04:12] <FromDiscord> <leorize> it suffers from the same fate, though
[05:04:21] <FromDiscord> <Sabena Sema> Quirky exceptions?
[05:05:05] <FromDiscord> <leorize> https://github.com/nim-lang/Nim/issues/8363
[05:05:54] <FromDiscord> <Sabena Sema> hmm, even nim's exception semantics shouldn't require an allocation
[05:05:57] <FromDiscord> <Sabena Sema> I don't think C++'s do
[05:06:02] <FromDiscord> <Sabena Sema> (edit) "I don't think ... C++'s" 03added "even"
[05:06:20] <FromDiscord> <leorize> c++ do for most practical use of it, unfortunately
[05:06:37] <FromDiscord> <Sabena Sema> only on itanium abi
[05:08:43] <FromDiscord> <Sabena Sema> you can pre-allocate even on itanium-abi, so you can still handle out of memory by exception (although most systems that follow itanium-abi for c++ overcommit anyway, so that point is moot)
[05:08:43] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:09:34] <FromDiscord> <leorize> nim pretty much do the same thing, the allocation is still awful, though
[05:10:04] <FromDiscord> <leorize> maybe it will be dealt with by the time nim 3.0 comes, if ever \:p
[05:11:05] <FromDiscord> <Sabena Sema> personally I would like a way to hook into exceptions and write the implementation in library code
[05:11:21] <FromDiscord> <Sabena Sema> but ... composition is a total nightmare
[05:11:45] <FromDiscord> <leorize> yea, customizability is a double-edged sword
[05:12:16] <FromDiscord> <Sabena Sema> the problem is when exceptiosn can flow through like, random other stack frames
[05:12:41] <FromDiscord> <Sabena Sema> sjlj and c++ style tables allow this by construction
[05:14:24] <FromDiscord> <Sabena Sema> the return value or hidden pointer methods don't necessarily allow this without using like, a tls global, which can have bad consiquences
[05:14:29] <FromDiscord> <Sabena Sema> (edit) "consiquences" => "consequences"
[05:14:37] <FromDiscord> <Sabena Sema> I think Ada takes the more control flow oriented approach
[05:14:49] <FromDiscord> <Sabena Sema> or at least gnat does
[05:16:41] <FromDiscord> <Sabena Sema> glib/gobject is the hidden pointer approach
[05:16:51] <FromDiscord> <Sabena Sema> and seems to work fairly well in practice
[05:18:08] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Remote host closed the connection)
[05:20:25] <FromDiscord> <Sabena Sema> I like this PR and the discussion so far
[05:20:35] <FromDiscord> <Sabena Sema> well this issue rahter
[05:22:27] <FromDiscord> <leorize> nim has a hidden pointer in tls for this as well
[05:22:39] <FromDiscord> <leorize> it works well enough, i suppose
[05:23:08] <FromDiscord> <Sabena Sema> gobject does the pointer just at the end of the argument list for functions that can raise
[05:23:10] <FromDiscord> <Sabena Sema> no tls
[05:24:15] <FromDiscord> <Sabena Sema> using tls is only really a problem because of limited tls slots and because it can cause optimizers to do bad things, because they see the global write and have to assume they don't have a complete picture of the world
[05:25:53] <FromDiscord> <leorize> the nice thing about nim is that you know for sure most code won't be threaded
[05:26:20] <FromDiscord> <leorize> well, not nice thing, rather
[05:27:49] <FromDiscord> <Sabena Sema> do you though?
[05:28:07] <FromDiscord> <Sabena Sema> and, just not being threaded doesn't eliminate the problems with optimizers
[05:29:15] <FromDiscord> <Sabena Sema> notably errno and Get/SetLastError have like, actual special runtime support from the OS
[05:29:24] <FromDiscord> <leorize> yes you do, because threading is just too hard in nim the moment you need to throw memory around \:p
[05:29:25] <FromDiscord> <Sabena Sema> at least Get/SetLastError is not stored using normal tls
[05:29:56] <FromDiscord> <Sabena Sema> eagh, I've done it before
[05:29:58] <FromDiscord> <Sabena Sema> it's not that bad
[05:30:30] <FromDiscord> <Sabena Sema> I've even done it with two other gcs running in process (both a python interpreter and the C# CLR runtime)
[05:30:43] <FromDiscord> <Sabena Sema> it was a party
[05:30:50] <FromDiscord> <leorize> you give up anything that have the word `ref` in it, though
[05:30:56] <FromDiscord> <Sabena Sema> no
[05:31:03] <FromDiscord> <leorize> isolate was meant to solve this, but it didn't
[05:31:18] <FromDiscord> <Sabena Sema> when you need to share refs you just pin them and take a pointer
[05:32:18] <FromDiscord> <leorize> with a lot of work, you can get threading done, but it's a lot of work
[05:32:37] <FromDiscord> <Sabena Sema> if you are doing multithreaded programming and don't understand your memory ownership model things are bound to fail anyway
[05:33:26] <FromDiscord> <Sabena Sema> and, fwiw, the fact memory management is thread local really does make things faster in general
[05:34:53] <FromDiscord> <leorize> the effect on speed so far has been minimal, unfortunately
[05:35:38] <FromDiscord> <leorize> there are several piece of work being done on moving memory across thread in nim but most of them are not going well
[05:35:40] <FromDiscord> <Sabena Sema> really? I thought nim's alloc and delete beat most malloc implementations by quite a bit
[05:36:50] <FromDiscord> <leorize> tslf is O(1), but it also means that you give up some special work that other allocators can do for small sizes since the time has to be constant
[05:37:13] <FromDiscord> <leorize> and in threading mode Nim's allocator is protected by a single mutex
[05:37:23] <FromDiscord> <Sabena Sema> also: once a ref is pinned on the allocating thread you can inc and dec the refcount without atomic operations (on amd64)
[05:37:50] <FromDiscord> <Sabena Sema> it's very common to have a single allocator lock
[05:38:27] *** Quits: src (~src@user/src) (Quit: Leaving)
[05:40:12] <FromDiscord> <Sabena Sema> it definitely does start to get into "juggling razorblades" territory, but I guess in my case I already had three gcs running (one of which was _moving_ and was sharing memory between all three, so the razorblades were very much already in the air
[05:41:12] <FromDiscord> <Sabena Sema> all different kinds of automatic memory management (refcounting, deffered refcounting, thread local rc, basic mark/sweeb bdwgc style gc, and compacting gc) have uses for different kinds of programs
[05:41:27] <FromDiscord> <Sabena Sema> and ofc the fastest gc of "never free anything"
[05:45:07] <FromDiscord> <leorize> the lock is fine until you have to juggle 10k threads \:p
[05:45:32] <FromDiscord> <Sabena Sema> yesp
[05:45:34] <FromDiscord> <Sabena Sema> (edit) "yesp" => "yep"
[05:45:37] <FromDiscord> <Sabena Sema> depends what they are doing too
[05:45:41] <FromDiscord> <leorize> one of the thing we are researching is moving computation and data between threads, and nim refs are horrible for that at the moment
[05:46:00] <FromDiscord> <Sabena Sema> but if you are like, a usual java program 10k threads with a global lock will end up with everyone piled on that lock quite a bit
[05:46:27] <FromDiscord> <Sabena Sema> that's true
[05:47:29] <FromDiscord> <leorize> not only that isolate doesn't work at runtime, orc cycle collection makes it impossible to move refs safely as it peeks into the refcount for trial deletion
[05:47:39] <FromDiscord> <leorize> which is not atomic...
[05:48:00] <FromDiscord> <Sabena Sema> it just reads though right?
[05:48:55] <FromDiscord> <leorize> yes but if the count is not correctly synchronized, an object might be prematurely freed
[05:49:05] <FromDiscord> <leorize> which it usually is not when you juggle them around threads
[05:49:28] <FromDiscord> <Sabena Sema> how can that happen if the actual writes to the count are correctly synchronized?
[05:50:01] <FromDiscord> <leorize> the writes are not synchronized, they are not atomics
[05:50:08] <FromDiscord> <Sabena Sema> oh
[05:50:09] <FromDiscord> <Sabena Sema> yeah
[05:50:36] <FromDiscord> <Sabena Sema> then your pretty screwed (although things might "just work" on x86 lol)
[05:50:54] <FromDiscord> <leorize> afaik in loony (mpmc ref object queue) they currently use a full fence to "hopefully" force the count to synchronize
[05:51:13] <FromDiscord> <Sabena Sema> two concurrent refs racing and resulting in only one increment then those two unrefs later not racing and resulting in two derefs
[05:55:12] <FromDiscord> <leorize> the folks working on loony do their work with \>10k objects so their "luck" to get desynchronized counts are a bit too high for comfort \:p
[05:55:43] <FromDiscord> <leorize> so right now they are looking at making refcount atomics and try to figure out ways to make atomics not have to happen
[05:55:57] <FromDiscord> <Sabena Sema> just copying the objects into a shared heap using like SmartPtr or whatever seems easier
[05:56:28] <FromDiscord> <Sabena Sema> the idea is that the queue transfers ownership at both ends or no?
[06:03:16] <FromDiscord> <leorize> pretty much, though I could be wrong, the goal is to move continuations between threads
[06:42:29] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:46:26] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[07:28:34] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[07:34:00] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Quit: WeeChat 3.3)
[07:34:17] *** Joins: jmd (~jmdaemon@142.207.63.60)
[07:34:48] *** Quits: jmd (~jmdaemon@142.207.63.60) (Client Quit)
[07:35:02] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:28] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Client Quit)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:42] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[07:38:17] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Client Quit)
[07:38:34] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[07:52:45] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Ping timeout: 252 seconds)
[08:11:56] *** Joins: jmdaemon (~jmdaemon@142.207.77.89)
[08:49:47] <nrds> <06Prestige99> Is https://github.com/moigagoo/nimage the current nimage package? I see an older one with less stars that's linked on nimble.directory
[08:50:14] <nrds> <06Prestige99> ohoh I looked at the wrong repo
[08:53:10] <nrds> <06Prestige99> actually wanted https://github.com/haldean/nimage
[09:10:13] <FromDiscord> <baalajimaestro> Does nim have something like a file that would let people nimble install deps much easily?‚Üµ‚ÜµSomething like python requirements.txt or Rust's Cargo.toml
[09:11:43] <nrds> <06Prestige99> Packages would have a .nimble file with dependencies listed, then you can install with `nimble install -d`
[09:11:56] <nrds> <06Prestige99> e.g. https://github.com/treeform/pixie/blob/master/pixie.nimble
[09:13:53] <FromDiscord> <baalajimaestro> on the case of pixie, I do a `nimble install -d` from the root of the clone, right?
[09:16:48] <FromDiscord> <Rika> yes
[09:26:53] <nrds> <06Prestige99> Is there a simple way to init a 2d seq with zeroed entries? like if I wanted a 3x3 grid of booleans for instance
[09:27:38] <nrds> <06Prestige99> or x by y in general, doesn't have to be a square
[09:31:23] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 252 seconds)
[09:41:33] <FromDiscord> <Rika> in general a rectangular 2d seq can be distilled into a 1d seq with NxM entries
[09:41:53] <FromDiscord> <Rika> it is also better at performance and holding the rectangular invariant
[09:42:32] <FromDiscord> <Rika> you can make wrapper procs `[](seq, tuple[int, int])` and `[]=`
[09:42:46] <nrds> <06Prestige99> good point. I thought there may be a lib for it but I can just write a simple one
[09:49:56] <nrds> <06Prestige99> hm I wish I could do proc `[][]`(this: Foo, x, y: int) 
[09:50:01] <nrds> <06Prestige99> and call it like myArr[0][1]
[09:52:33] <nrds> <06Prestige99> https://play.nim-lang.org/#ix=3HFr What's wrong here? Something weird with generics 
[09:55:23] *** Quits: jmdaemon (~jmdaemon@142.207.77.89) (Ping timeout: 250 seconds)
[09:55:48] <nrds> <06Prestige99> oh, I have to do `get[bool](s, 1, 2)
[09:55:54] <nrds> <06Prestige99> that's.. odd?
[09:56:42] <FromDiscord> <Elegantbeef> Why wouldnt you have to
[09:56:58] <nrds> <06Prestige99> Couldn't the type be inferred from s?
[09:57:25] <FromDiscord> <Elegantbeef> Ah sorry read the wrong proc
[09:58:05] <FromDiscord> <reilly> sent a code paste, see https://play.nim-lang.org/#ix=3HFs
[09:58:14] <FromDiscord> <Elegantbeef> Yep
[09:58:16] <nrds> <06Prestige99> Yeah fixed that
[09:58:23] <FromDiscord> <Elegantbeef> There's the error üòõ
[09:59:37] <nrds> <06Prestige99> oh so this compiles but nimlsp is still showing errors, that's all
[10:01:57] <nrds> <06Prestige99> https://play.nim-lang.org/#ix=3HFt Elegantbeef do you know any magic I could pull to use something nicer than get/set function names?
[10:02:10] <nrds> <06Prestige99> Like I was speaking about above, s[0][1] = true or whatever
[10:03:03] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3HFu
[10:03:18] <nrds> <06Prestige99> oh neat
[10:03:25] <FromDiscord> <Sabena Sema> In reply to @nrds "<Prestige> hm I wish": you can do this with a little temporary object, but just using foo[x,y] is just ... better
[10:04:07] <FromDiscord> <Sabena Sema> a 1D array of NxM is better in every single way then the insane ragged N pointers to N elements thing you see in C
[10:04:26] <nrds> <06Prestige99> Yeah for sure
[10:05:00] <FromDiscord> <Sabena Sema> and, unlike in C++ you can actually use the subscript operator for it
[10:05:26] *** Joins: rockcavera (~rc@192.12.112.111)
[10:05:26] *** Quits: rockcavera (~rc@192.12.112.111) (Changing host)
[10:05:26] *** Joins: rockcavera (~rc@user/rockcavera)
[10:09:44] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[10:48:32] <nrds> <06Prestige99> Does std/monotimes getMonoTime actually use nanoseconds? I'm running a bit of code that seems to take about 14 seconds, but it's reporting back 14452299 nanoseconds (which is about 14 milliseconds)
[10:48:56] <nrds> <06Prestige99> Would make sense if it were actually microseconds
[10:53:06] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/Tz9
[10:56:20] <nrds> <06Prestige99> Weird. If my code is running so fast I wonder why it's taking 14 seconds to echo that it's finished and exit
[10:56:40] <nrds> <06Prestige99> https://github.com/avahe-kellenberger/maze_bench_nim for reference
[10:57:15] <nrds> <06Prestige99> Compiling for danger and speed
[10:59:14] <FromDiscord> <Elegantbeef> 14 seconds you say? üòÄ
[10:59:46] <FromDiscord> <Elegantbeef> It's taking much longer than 14 seconds here
[11:00:06] <nrds> <06Prestige99> Yep
[11:00:30] <FromDiscord> <Elegantbeef> I dont kno wwhat to say it seems to work fine
[11:00:53] <nrds> <06Prestige99> But the measured time is way off?
[11:01:11] <FromDiscord> <Elegantbeef> Did the above example work?
[11:01:51] <nrds> <06Prestige99> Yeah. What times printed for you in this maze benrhmark?
[11:02:07] <FromDiscord> <Elegantbeef> Was taking too long
[11:02:09] <FromDiscord> <Elegantbeef> Stopped it
[11:03:26] <nrds> <06Prestige99> Mind running it till it exits?
[11:11:44] <FromDiscord> <Elegantbeef> If it takes hours i hate you
[11:12:57] <nrds> <06Prestige99> Lol well it takes me 14 seconds so hopefully not very long for you
[11:13:16] <FromDiscord> <Elegantbeef> Still running
[11:13:33] <nrds> <06Prestige99> I wonder if it's just hanging after finishing for some odd reason
[11:13:56] <FromDiscord> <Elegantbeef> 0 seconds
[11:14:17] <FromDiscord> <Elegantbeef> Your warmup takes a bunch of time i reason
[11:14:57] <nrds> <06Prestige99> Hmm yeah
[11:24:39] <FromDiscord> <valerga> anything nicer than
[11:24:42] <FromDiscord> <valerga> ?
[11:24:46] <FromDiscord> <valerga> sent a code paste, see https://play.nim-lang.org/#ix=3HFQ
[11:24:58] <FromDiscord> <valerga> if I don't know the number of iterations
[11:39:40] <FromDiscord> <Michal58> Make an infinite natural numbers iterator
[11:42:06] <FromDiscord> <Michal58> sent a code paste, see https://paste.rs/69Q
[11:44:05] <FromDiscord> <valerga> that works, thanks
[12:58:57] *** Joins: jjido (~Denis@90.213.58.125)
[13:06:19] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[15:10:50] *** Joins: src (~src@user/src)
[15:10:51] <ozzz> Hi! Which editor/ide with nim support is the best functions and performance vise? I mean not the VScode, it eats alot of ram and cpu
[15:13:32] <FromDiscord> <tbrekalo> is there something as .clang-format for nim?
[15:20:13] <FromDiscord> <Rika> No
[15:20:19] <FromDiscord> <Rika> Best is nimpretty
[15:20:25] <FromDiscord> <Rika> Rather closest
[15:23:04] <FromDiscord> <victorNine> Hi! I am trying to run a binary compiled in Nim on OpenWRT witch uses WolfSSL. Is there any way to compile for that?
[15:23:24] <FromDiscord> <victorNine> (Testing out Nim so pretty new to it)
[15:25:12] <FromDiscord> <Rika> I know there is a way but I do not know what it is
[15:29:44] <FromDiscord> <hmmm> In reply to @ozzz "Hi! Which editor/ide with": micro, you "install" it, auto recognizes nim synthax, applies nimsuggest each save. Zero config, no extensions, justworks.jpg
[15:30:50] <FromDiscord> <hmmm> good defaults, and you can use a mouse like sane people do üòã
[15:31:23] <FromDiscord> <hmmm> you can also F7 to compile and run but you have to set it
[15:31:25] <FromDiscord> <Rika> Honestly the best editors allow for both mouse+kb and kb only usage
[15:32:57] <FromDiscord> <hmmm> honestly we should stop funnelling people into VSCode just because we happen to have a clunky extension that kind of works on it but not really. VSCode is a terrible editor
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:39:22] <FromDiscord> <pmunch> Mouse? What is this heresy you speak of?
[15:43:44] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[15:44:32] *** Joins: terminalpusher (~terminalp@2a01:586:9dbf:1:a42a:cfb1:af0d:223e)
[15:47:38] <FromDiscord> <pmunch> I use Vim with NimLSP. Works fairly well, although the LSP implementation could use some love‚Üµ(<@709044657232936960_ozzz=5b=49=52=43=5d>)
[15:55:37] <FromDiscord> <pmunch> [victorNine](https://matrix.to/#/@victor9:feneas.org)\:  OpenWRT is a kind of Linux system isn't it, just very stripped down?
[16:02:05] <FromDiscord> <Rika> yes
[16:02:35] <FromDiscord> <Rika> In reply to @hmmm "honestly we should stop": i honestly dont see the difference between your beloved editor and vsc
[16:08:22] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Quit: WeeChat 3.3)
[16:12:30] <FromDiscord> <victorNine> Yes it is
[16:18:46] <FromDiscord> <Abi> sent a code paste, see https://play.nim-lang.org/#ix=3HH7
[16:19:11] <FromDiscord> <Abi> (edit) 
[16:19:59] <FromDiscord> <Abi> (edit) "https://play.nim-lang.org/#ix=3HH7" => "https://play.nim-lang.org/#ix=3HH8"
[16:20:06] <FromDiscord> <Rika> are you using async or closure iterators
[16:20:28] <FromDiscord> <Abi> No, and what?
[16:20:57] <FromDiscord> <Rika> `iterator ...(...): ... {.closure.} =` i think
[16:21:04] <FromDiscord> <Michal58> In reply to @hmmm "honestly we should stop": Hmm, I was just thinking about trying VScode... I have never used it (for anything) but now I'm not sure it's worth it?
[16:21:21] <FromDiscord> <Rika> or `proc ...(...): iterator(): ... = return ...`
[16:22:38] <FromDiscord> <Abi> sent a code paste, see https://play.nim-lang.org/#ix=3HH9
[16:23:15] <FromDiscord> <Rika> `adjacent in getAdjacentPoints(point):` do you mean `for ...`?
[16:23:23] <FromDiscord> <Abi> (edit) "https://play.nim-lang.org/#ix=3HH9" => "https://play.nim-lang.org/#ix=3HHa"
[16:23:27] <FromDiscord> <Abi> yeah, i mangled that when editing it in discord
[16:23:30] <FromDiscord> <Rika> okay
[16:23:35] <FromDiscord> <Rika> i see the issue then
[16:23:39] <FromDiscord> <Rika> wait not really
[16:23:42] <FromDiscord> <Abi> (edit) "https://play.nim-lang.org/#ix=3HHa" => "https://play.nim-lang.org/#ix=3HHb"
[16:23:53] <FromDiscord> <Rika> it shouldnt be an issue but since the 2nd proc is a closure proc
[16:23:57] <FromDiscord> <Rika> aka captures cave
[16:24:09] <FromDiscord> <Rika> so capturing cave whilst cave is variable...
[16:24:21] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[16:25:15] <FromDiscord> <Rika> im still thinking why again this is not good, because i have forgotten
[16:25:21] <FromDiscord> <Abi> `iterate` modifies `cave` later on hence the `var`
[16:26:07] <FromDiscord> <Rika> handle nine should probably not be a proc within iterate
[16:26:47] <FromDiscord> <Rika> also, does iterate need to "pass cave out modified without returning it" or just needs it to be mutable?
[16:27:07] <FromDiscord> <Rika> In reply to @Rika "also, does iterate need": if this is true, make the parameter just "Cave" and do the workaround
[16:27:14] <FromDiscord> <Rika> var parameters have a different meaning
[16:27:33] <FromDiscord> <Abi> In reply to @Rika "handle nine should probably": `handleNine` modifies some other variables that are defined in `iterate`, hence that weirdness
[16:28:25] <FromDiscord> <Abi> In reply to @Rika "also, does iterate need": `iterate` needs to modify `cave` and have those changes accessible by the caller
[16:28:38] <FromDiscord> <Abi> if that makes sense, words are failing me atm lol
[16:29:38] <FromDiscord> <Rika> okay, this is the simpler question, are you returning `cave` in that tuple or some other var typed Cave?
[16:29:52] <FromDiscord> <Abi> `cave`
[16:30:14] <FromDiscord> <Rika> then make `cave` a `Cave` instead of var Cave and keep on using that workaround
[16:30:30] <FromDiscord> <Abi> gotcha
[16:30:38] <FromDiscord> <Rika> `var Cave` means that any changes you make to `cave` will "automatically" be done as well to the outer scope and not need to be returned as well
[16:30:58] <FromDiscord> <Abi> oooooooo
[16:31:03] <FromDiscord> <Abi> that's actually what i was aiming for
[16:31:16] <FromDiscord> <Rika> yes but then you cant use the nested proc xd
[16:31:27] <FromDiscord> <Abi> damnit lol
[16:31:40] <FromDiscord> <Rika> i dont exactly know why
[16:31:51] <FromDiscord> <Rika> its really better to explicitly pass everything you need
[16:31:54] <FromDiscord> <Rika> imo
[16:32:25] <FromDiscord> <Abi> probably
[16:32:32] <FromDiscord> <Abi> Either way - thanks for your help!
[16:39:10] <FromDiscord> <victorNine> Seems like SSL is not "pluggable" https://github.com/nim-lang/Nim/issues/14719
[17:03:56] <FromDiscord> <pmunch> I believe you can use https://nim-lang.org/docs/nimscript.html#patchFile%2Cstring%2Cstring%2Cstring in your config or nimble file in order to swap out the parts of the standard library to use your own SSL implementation
[17:04:13] <FromDiscord> <pmunch> Definitely not perfect, but it should at least be possible
[17:08:07] <FromDiscord> <victorNine> Thanks I'll give it a try
[17:20:42] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[17:25:17] *** Joins: neurocyte0132889 (~neurocyte@45.14.190.29)
[17:25:17] *** Quits: neurocyte0132889 (~neurocyte@45.14.190.29) (Changing host)
[17:25:17] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:29:40] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Quit: noeontheend)
[17:30:13] *** Joins: arkurious (~arkurious@user/arkurious)
[17:32:39] <FromDiscord> <Cloudperry> does anyone know how to use nim.nvim with nvim-cmp?
[17:33:27] <FromDiscord> <Cloudperry> or alternatively how to make nimlsp not behave completely wrong with nvim-cmp?
[17:34:31] <FromDiscord> <Cloudperry> I have nimlsp working with nvim-cmp and nim.nvim working with asyncomplete but I don't want to use asyncomplete
[17:35:40] <FromDiscord> <Cloudperry> also nvim-cmp autocomplete pops up after every new line with nimlsp
[17:36:09] <FromDiscord> <Cloudperry> if I could get that fixed nimlsp would be just fine
[17:37:30] <FromDiscord> <Cloudperry> but I don't know how to even begin debugging that
[17:37:37] <FromDiscord> <Cloudperry> because I have 10 other language servers for nvim-cmp and they all work just fine and don't pop up autocomplete after newline
[17:38:00] *** Joins: Colt (~Colt@user/colt)
[17:38:17] <FromDiscord> <Rika> dunno, i personally still use compe
[17:38:27] <FromDiscord> <Rika> i dont know how to call vimscript fns from lua
[17:38:37] <FromDiscord> <Rika> In reply to @Rika "i dont know how": you will prolly need this for cmp
[17:38:56] <FromDiscord> <Cloudperry> yeah if I wanted to use nim.nvim sure
[17:39:08] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3HHB
[17:39:21] <FromDiscord> <Rika> can prolly adapt for lua somehow but i cant help for that
[17:39:29] <FromDiscord> <Rika> In reply to @Cloudperry "or alternatively how to": wrt this whats the issue?
[17:39:55] <FromDiscord> <Rika> actually i dont know how to use nimlsp so maybe pmunch
[17:39:58] <FromDiscord> <Cloudperry> its the one with autocomplete popping up after every enter/newline
[17:40:29] <FromDiscord> <Cloudperry> so its just popping up autocomplete on empty lines constantly üòÑ
[17:56:59] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[17:57:32] *** Joins: Colt (~Colt@user/colt)
[18:00:39] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:01:01] *** Joins: Colt (~Colt@user/colt)
[18:02:32] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:04:12] *** Joins: Colt (~Colt@user/colt)
[18:04:29] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:04:56] *** Joins: Colt (~Colt@user/colt)
[18:05:10] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:09:39] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[18:12:49] *** Joins: noeontheend_ (~noeonthee@207.237.194.194)
[19:23:45] <FromDiscord> <pmunch> I dont see how NimLSP could be doing that. LSP is a client/server architecture, so NimLSP is only answering requests sent from your client..
[19:28:21] <FromDiscord> <Fish-Face> I expect this is an arraymancer or local issue but I'm wondering if anyone can help. Trying to install arraymancer with nimble in docker - it works on my machine but not on someone else's. The relevant bit of build log is here: https://pastebin.com/BSvmfW23
[19:29:46] *** Joins: PMunch (~PMunch@user/pmunch)
[19:32:33] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Remote host closed the connection)
[19:32:33] *** Quits: noeontheend_ (~noeonthee@207.237.194.194) (Remote host closed the connection)
[19:35:22] <PMunch> Don't have a lot of time today, so we'll have to solve today extra fast! Advent of Code day 11 - https://www.twitch.tv/pmunche
[19:36:39] <FromDiscord> <Fish-Face> In reply to @Fish-Face "I expect this is": never mind, a docker prune fixed it
[19:36:53] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[19:38:02] *** Parts: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Konversation terminated!)
[19:40:47] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Client Quit)
[19:41:20] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[19:41:31] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Client Quit)
[20:00:10] *** Quits: terminalpusher (~terminalp@2a01:586:9dbf:1:a42a:cfb1:af0d:223e) (Remote host closed the connection)
[20:16:15] *** Quits: PMunch (~PMunch@user/pmunch) (Remote host closed the connection)
[20:31:26] <FromDiscord> <Cloudperry> I guess it could be because nimlsp has " " in its trigger characters
[20:32:08] <FromDiscord> <Cloudperry> In reply to @pmunch "I dont see how": I guess it could be because nimlsp has space as a trigger character
[20:32:48] <FromDiscord> <Cloudperry> but I don't know the details of trigger characters in lsp
[20:34:54] <FromDiscord> <Cloudperry> I get unwanted autocomplete popups only after typing spaces and when entering newline in indented blocks
[20:47:09] <FromDiscord> <Cloudperry> oh wow
[20:47:16] <FromDiscord> <Cloudperry> that was actually the cause
[20:47:52] <FromDiscord> <Cloudperry> just removed space from triggerCharacters and now its not popping up all the time
[20:48:54] <FromDiscord> <Cloudperry> hmm I hope this doesn't break anything
[20:49:26] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[21:19:12] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Quit: noeontheend)
[21:23:43] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[21:31:57] *** Joins: noeontheend_ (~noeonthee@207.237.194.194)
[21:55:21] *** Joins: vicfred (~vicfred@user/vicfred)
[22:05:46] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[22:06:24] <FromDiscord> <Hamid_Bluri> Hey, I don;t understand the point of `byCopy` and `byRef`  pragmas.‚Üµ‚Üµisn't `ref object` or `object` enough ?
[22:06:36] <FromDiscord> <Hamid_Bluri> https://nim-lang.org/docs/manual.html#foreign-function-interface-bycopy-pragma
[22:08:57] *** Joins: neurocyte0132889 (~neurocyte@45.14.190.29)
[22:08:58] *** Quits: neurocyte0132889 (~neurocyte@45.14.190.29) (Changing host)
[22:08:58] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:14:13] *** Joins: jjido (~Denis@90.213.58.125)
[22:22:53] <FromDiscord> <Hamid_Bluri> In reply to @0xAb1 "Either way - thanks": https://nim-lang.org/docs/sugar.html#capture.m,varargs[typed],untyped
[22:23:10] <FromDiscord> <Hamid_Bluri> it might help you
[22:30:10] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:34:43] <FromDiscord> <leorize> it's to control an optimization feature of nim‚Üµ(@Hamid_Bluri)
[22:35:09] <FromDiscord> <leorize> in Nim parameter passing is not as rigid as C/C++
[22:35:51] <FromDiscord> <leorize> we define these by semantics, where C/C++ have a strict definition on how parameters are always copied
[22:36:41] <FromDiscord> <leorize> this allow us to do pass large objects via reference (read\: pointers) if it is faster that way
[22:37:02] <FromDiscord> <leorize> you can imagine, though, that it would make interop with C/C++ harder than it should be
[22:37:45] <FromDiscord> <leorize> so the `{.bycopy.}`, `{.byref.}` specifiers are there to let you force it one way or another (usually you force `{.bycopy.}` because that's how C works)
[23:08:20] <NimEventer> New thread by Jorjun_arch: Happy Christmas, see https://forum.nim-lang.org/t/8700
[23:19:19] *** Joins: krux02_ (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de)
[23:23:52] <FromDiscord> <Cloudperry> ok wtf is going on with my advent of code day 5 solution üòÑ
[23:24:10] <FromDiscord> <Cloudperry> it takes 1 minute 2 seconds on -d:debug or whatever the default is
[23:24:25] <FromDiscord> <Cloudperry> and 2 damn seconds on -d:release
[23:24:43] <FromDiscord> <Cloudperry> my solution is quite badly optimized I think
[23:25:04] <FromDiscord> <Cloudperry> but I have no idea how is it possible to get this big speedup with -d:release
[23:26:04] <FromDiscord> <Cloudperry> whoops
[23:26:14] <FromDiscord> <Cloudperry> just saw theres an advent of code channel too
[23:41:54] <arkanoid> that is the suggested nim way to handle classical client/server architecture with client->rpc ... slow internet ... prc->server->db and back? I need to move quite large tables between
[23:42:39] <arkanoid> I'm considering using norm for the server -> db but not yet sure, it depends on which solutions I have to move large tables
[23:58:53] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 250 seconds)
