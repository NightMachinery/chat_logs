[00:00:43] <pl> Someone running hunchentoot on CCL did, long ago, uncover a bug in Mach that effectively forced regular preventive reboots 
[00:02:18] <pl> Some low level api was apparently leaking resources, turned out to be a bug from early CMU years 
[00:02:53] <Jacobis9000> are EQ and EQUAL equivalent functions?
[00:03:01] <pl> Jacobis9000: nope
[00:03:12] <pl> Read clhs on them, it will list differences 
[00:03:19] <gilberth> pl: Heh, and it takes Lisp to uncover that bug?
[00:04:14] <pl> gilberth: turned out most other software didn't exercise that code path much 
[00:04:34] <pl> A long running lisp server on CCL did 
[00:05:08] <gilberth> Hmm. Yes, CCL uses some of Mach directly.
[00:05:29] <Jacobis9000> Ah I see the differences now
[00:06:47] <gilberth> Jacobis9000: Also be sure to read up about the difference between EQ and EQL. Or: When in doubt use EQL instead of EQ.
[00:14:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:28:06] <pjb> Never use EQ.
[00:31:40] <gilberth> Never say never.
[00:45:43] <moon-child> yes, eq will sometimes give surprising results.  For instance, (values (eq #'eq #'equal) (eql #'eq #'equal)) #| --> t nil |#
[00:45:45] <moon-child> :^)
[00:47:09] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[00:49:16] <Alfr> moon-child, what?
[00:50:07] <moon-child> Alfr: EQ WILL SOMETIMES GIVE SURPRISING RESULTS.  FOR INSTANCE, (VALUES (EQ #'EQ #'EQUAL) (EQL #'EQ #'EQUAL)) #| --> T NIL |#
[00:50:09] <moon-child> :^)
[00:50:32] <Alfr> moon-child, I'm not deaf. But your implementation has a bug.
[00:50:43] <gilberth> #'eq can never be EQ to #'equal. Never.
[00:51:00] <moon-child> it was a joke...
[00:51:26] <Alfr> gilberth, it's worse, because (eq a b) implies (eql a b).
[00:51:30] <Alfr> moon-child, okay.
[00:51:42] <gilberth> Alfr: Indeed.
[00:54:21] <kakuhen> im glad the clhs exists so that i know which equality function to use
[00:54:31] <kakuhen> this is actually one thing i like a lot about common lisp
[00:55:10] <kakuhen> in mathematics, especially algebra, we often treat isomorphic structures as "equal" ones since it is convenient to do so
[00:55:14] <kakuhen> and sometimes this is useful to do in code i write
[00:59:11] <Jacobis9000> Lisp is really good
[01:00:25] <kakuhen> im taking an algorithms class offered by the math dept and i decided to very shamelessly ask if we could use lisp for the programming assignments
[01:00:33] <kakuhen> the alternatives are C, Java, and Python; yuck
[01:00:49] <kakuhen> thankfully the syllabus says you dont need to know any programming (or do programming problems) to do the homeworks
[01:00:54] <kakuhen> so worse case scenario i just do the math and nothing else
[01:01:39] <kakuhen> thanks to taking quite the detour with combinatorics & graph theory, i managed to come across a lot of the algos the prof is using in class for examples
[01:01:58] <kakuhen> and analysis taught me more than enough for the asymptotic stuff they're doing all quarter; i havent been to a single lecture, im just doing the quizzes as they come along
[01:02:16] <Jacobis9000> my maths is GCSE level
[01:02:23] <Jacobis9000> I am improving it through Khan Academy
[01:02:43] <Jacobis9000> I never needed to use maths my whole life to this point
[01:04:07] <gilberth> What's GCSE?
[01:04:49] <Jacobis9000> General Certificate of Secondary Education, what is more, I sat the Intermediate Paper, so I didn't even have the higher level stuff 16 year olds do
[01:07:11] <Jacobis9000> So I am basically below the level of an American high school leaver
[01:07:23] <Jacobis9000> Quite far below because they leave at 18 right?
[01:07:57] <Jacobis9000> But my degree has a maths module in the first year, so I'm hoping that + KA brings me up 
[01:08:56] <Jacobis9000> Off to bed now, g'night folks!
[01:09:01] <Jacobis9000> I <3 Lisp!
[01:14:18] <kakuhen> good night
[01:14:46] <kakuhen> gilberth: GCSE is some education level in commonwealth countries iirc
[01:14:56] <kakuhen> it's basically one step below A Levels if you're familiar with that
[01:21:43] <selwyn> yes it is
[01:27:21] <gilberth> kakuhen: No, I am not.
[01:28:31] <gilberth> I am tired of bugs. I want my early 90's setup back! Only faster and less tight.
[01:30:13] <selwyn> maths education in the uk is quite different from that of europe, no calculus in gcse iirc
[01:31:08] <Gnuxie> yep
[01:31:15] <gilberth> selwyn: What year would GCSE correspond to?
[01:31:37] <selwyn> age 16
[01:31:47] <selwyn> is when you usually take the exams
[01:31:57] <selwyn> they are two year courses
[01:32:12] <gilberth> ok. That I can relate to.
[01:33:14] <Gnuxie> I did A Level maths it was really hard 
[01:33:28] <selwyn> iiuc in central europe, maths and computer science are often taken together, which is the correct approach
[01:33:32] <Gnuxie> but it was probably just noob stuff 
[01:34:03] <gilberth> CS at school? Would be news to me.
[01:34:08] *** Quits: Jacobis9000 (~jonaholuf@host86-144-136-140.range86-144.btcentralplus.com) (Ping timeout: 246 seconds)
[01:34:14] <selwyn> well, i mean poland and hungary
[01:34:56] <kakuhen> my school didnt have CS classes either
[01:35:13] <Gnuxie> my school did, they were brand new 
[01:35:14] <selwyn> downside of the british system is that they don´t give you the impression at school that you really need maths for hard sciences
[01:35:15] <kakuhen> and now sometimes when i drive, i see signs of elementary schools claiming to teach your kids computer science
[01:35:22] <kakuhen> poor children
[01:35:56] <semz> basic CS in school is a thing in Germany, but probably not all schools
[01:35:57] <selwyn> so people sometimes arrive at university without good enough skills and find out the hard way
[01:36:10] <semz> and the quality is questionable imo
[01:36:20] <selwyn> a level maths is hard
[01:36:34] <gilberth> Well, I had some CS at school, but that was completely outside the curriculum. It just happened to me, that one of the teachers at school taught me Lisp and a bits and pieces of CS.
[01:37:19] <selwyn> lucky gilberth
[01:37:55] <gilberth> My experience in the first year at the university was that half the students thought CS would be about programming and figured that CS is too hard and left real early.
[01:38:01] <selwyn> it has possibly changed now, but our exposure at school was limited to ´computing´ classes that lasted a whole day twice a term
[01:38:08] <selwyn> where they just teach you how to use ms office
[01:38:15] <selwyn> stupid education system
[01:38:51] <kakuhen> oh right, we had computer literacy classes
[01:38:58] <kakuhen> they taught you how to type and use ms office and that's aboutit
[01:38:59] <selwyn> older people make the point that in the 80s britain was one of the better countries at teaching computing, with the bbc micro and emphasis on diy
[01:39:10] <kakuhen> doesn't seem to have worked considering most people my age don't seem to understand how files and folders work :DDD 
[01:39:10] <selwyn> and then the country went corpo and pissed away its advantage
[01:39:27] <gilberth> selwyn: Yes, this is what I hear about computing classes here, too.
[01:39:49] <selwyn> i don´t understand how the uk has a tech sector sometimes
[01:39:54] <gilberth> The MS Office part, that is.
[01:39:59] <kakuhen> it's frightening to me that someone can be 20 years old and, despite constant exposure and usage of technology, somehow not understand files and folders
[01:40:08] <selwyn> kakuhen: so i hear
[01:40:09] <kakuhen> but whatever, most drivers in california seem to not know what a turn signal is
[01:40:14] <kakuhen> so maybe its not too insane of a phenomenom
[01:40:27] <selwyn> gnuxie: a folder is like a bag that contains different files in it
[01:40:32] * selwyn educates the zoomers
[01:40:48] <Gnuxie> lel
[01:40:52] <kakuhen> ive seen cars on the 405 sweep all 5 lanes and they turn on their signal literally just as they merge onto the final lane
[01:40:53] <Alfr> selwyn, diy won't convey cs to many, only those inclined and able to tinker and learn by themselves.
[01:40:56] <gilberth> kakuhen: They know the value of the turn signal and thus don't use it because it could wear off.
[01:41:07] <selwyn> alfr: at least the exposure is there
[01:41:21] <kakuhen> my favorite is when ppl tell me "oh, i dont use my signal on left/right-only lanes because it's obvious where I'm going"
[01:41:25] <kakuhen> this frustrates me so much
[01:41:35] <kakuhen> when i see a driver like that, i assume they are retarded and will attempt driving straight
[01:41:51] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[01:42:02] <kakuhen> assuming someone knows what their doing while driving a 3,000 lb hunk of metal at deadly velocities, tends to give me worse payoffs than assuming otherwise
[01:42:06] <kakuhen> what they're doing*
[01:42:15] <Alfr> selwyn, what fraction of kids actually had one?
[01:43:36] <selwyn> had one what?
[01:43:43] <selwyn> i suppose the format of our classes was fairly unique
[01:43:47] <gilberth> I believe the problem rather is that our society does not value science at all.
[01:43:54] <selwyn> hm
[01:44:17] <gilberth> I mean, people are proud to say "I always was bad at math."
[01:44:41] <selwyn> oh
[01:44:42] <selwyn> yes
[01:44:48] <selwyn> i don´t mind that too much
[01:44:54] <selwyn> not everyone has to be good at maths, or science
[01:44:56] <gilberth> So people outright refuse to even listen, because being bad at math is cool.
[01:45:14] <selwyn> they are technical skills that contribute to the economy/scientific knowledge
[01:45:20] <selwyn> i don´t think you need them for a good life
[01:45:39] <selwyn> i think there is a shortage of people who are really really good at them though
[01:46:18] <selwyn> would be nice if politicians/decision makers had a quantitative insight that science can provide, too
[01:46:44] <selwyn> gilberth: but germany is surely a country with many science phd holders at top political positions
[01:46:45] <gilberth> selwyn: Ever witnessed people at the hardware store looking for paint to paint their room and having no clue what so ever what "Good for 20 square meters" means on the bucket of paint means. And panic as they cannot figure out how much paint they need?
[01:46:51] <selwyn> uh
[01:46:54] <selwyn> i have not seen that lol
[01:47:06] <selwyn> but ok
[01:47:21] <gilberth> I am not talking about calculus here. Multiplication and addition. And an idea what an area is.
[01:47:33] <selwyn> it seems that people here panicked at petrol stations and bought the wrong type of fuel for their car a lot of the time
[01:48:02] <gilberth> lol. That doesn't even involve math.
[01:48:15] <selwyn> it involves discrete maths
[01:48:27] <selwyn> 0=diesel 1=petrol
[01:48:42] <selwyn> problem is to choose the correct binary assignment
[01:48:50] <gilberth> I would need 98 octan minimum.
[01:49:05] <gilberth> If that is a term.
[01:49:19] <selwyn> 1-sat on 1 bit
[01:49:50] <gilberth> Besides, Diesel and petrol come in different sized hoses. At least here.
[01:50:46] <selwyn> what does diesel mean in german?
[01:51:17] <gilberth> Diesel is diesel. The dirty fuel.
[01:51:39] <gilberth> To other is "Benzin".
[01:51:42] <selwyn> its named after someone ok
[01:52:06] <gilberth> Yes, after the guy who invented the engine.
[01:52:16] <copec> Diesel is the name of the German for the inventor of the combustion cycle
[01:52:26] <gilberth> Both types of fuel that is.
[01:52:52] <gilberth> Benz invented the engine running off petrol (not diesel fuel).
[01:52:56] <copec> The fuel with high combustability, that is, low octane and high cetane all became to be called diesel fuel, as in fuel for a diesel
[01:52:56] <selwyn> what
[01:54:24] <selwyn> ok
[01:54:44] <gilberth> Benz' daughter was named Mercedes. So it became Mercedes-Benz for the company.
[01:57:48] <gilberth> Anyhow, I still believe that science being for nerds is a problem.
[01:58:45] <gilberth> And you have a hard time as a kid being good at it and thus outside the "norm".
[01:59:01] <selwyn> hm
[01:59:10] <selwyn> nerd culture has two avatars in any case
[01:59:34] <selwyn> there are nerds who are really into science, and there are nerds who are really into batman, or reddit or something
[01:59:51] <gilberth> Heh.
[02:02:50] <gilberth> As I entered the university I was very surprised that all of a sudden it was actually valued to be good at things. I needed some time to adapt.
[02:03:20] <gilberth> Because in school I developed strategies to not appear too bright.
[02:03:52] <gilberth> But I never was really good at that kind of camouflage.
[02:05:10] <selwyn> nerd culture is a sham anyway there´s nothing good about it
[02:05:16] <selwyn> there should be unity between nerds and jocks
[02:07:14] <gilberth> Define "nerd".
[02:08:36] <selwyn> well, i kind of did ^
[02:09:00] <selwyn> the union of science and batman
[02:12:56] <gilberth> So and why does everyone assume I would care for batman?
[02:13:18] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 250 seconds)
[02:13:59] <selwyn> um
[02:14:05] <selwyn> thats what the division was at my school lol
[02:14:29] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[02:15:02] <copec> I wasn't a jock at *all*, but ironically I was really cool socially with them, but not at all with most of the other "nerds" in my secondary education
[02:15:25] <copec> I think because most of them were just nerds at being a jock at that point
[02:19:44] <gilberth> Me can't follow.
[02:20:41] <selwyn> anyway, goodnight everyone
[02:20:50] <gilberth> Take care!
[02:21:56] <gilberth> I have no idea if the CADR is actually supposed to pick up the current time from the Chaos network or not. I see some packets going back and forth, but it still asks me to read the clock.
[02:22:31] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:26:25] <gilberth> I call it a night. I am not patient enough to debug this.
[02:27:06] <hayley>  https://www.youtube.com/watch?v=Wb27Sd0aqyY
[02:27:06] -ixelp- The Damned - Curtain Call - Live - YouTube
[02:27:09] <gilberth> Begins with that I have no clue about the Chaos network.
[02:27:29] <copec> goodnight gilberth 
[02:28:00] <gilberth> Thanks, but I'll stick around for a while. I just quit hacking for tonight.
[02:29:10] * hayley was rather trying to post https://www.youtube.com/watch?v=6euxlcdmB34
[02:29:51] <gilberth> Can someone please fix ixelp?
[02:30:30] <gilberth> Bug, everywhere you look!
[02:30:34] <gilberth> s
[02:32:02] <copec> My brother-in-law is in Germany for a month as a translator for the FBI, and he stopped texting and went to bed like 3 hours ago
[02:32:51] <gilberth> Yes, a proper German is supposed to sleep by 22:00.
[02:34:00] * hayley tries to edit her review of #lispcafe's favourite Lisp implementation book so she won't be called a whiny little bitch again.
[02:34:18] <hayley> Here is the new intro: "As someone who has worked on various Lisp implementations over time, as well as programmed in Lisp, C, C++, Java, and several other programming languages, I feel vaguely knowledgeable enough to give a pretty harsh review of this book. First off: God help you if you are going to write your first interpreter in C of all things. No one I know thinks it’s a good idea to start inventing a programming language, which perhaps
[02:34:18] <hayley> is one of the more ill-defined and bug-prone things you can do, with an implementation in C. So the premise is already a bad idea."
[02:34:31] <gilberth> 21:00 is usually the time at which I have the most energy.
[02:35:33] * White_Flame applauds hayley's intro
[02:35:38] <gilberth> C isn't the problem here.
[02:35:56] <White_Flame> but it is a problem
[02:36:04] <hayley> If you don't know C, and you also don't know Lisp, then writing a Lisp system in C is a pretty damn big problem.
[02:36:29] <gilberth> White_Flame: Not so much, when you know what you are doing(TM)
[02:36:39] <White_Flame> and that's the problem
[02:36:51] <hayley> ...which is sort of the opposite of the target audience of a book for newbies.
[02:36:54] <White_Flame> all the other side-band distractions you have to bother yourself with in order to write decent C
[02:37:19] <hayley> I'd mention the rest, but probably better to read https://gist.github.com/no-defun-allowed/7e3e238c959e27d4919bb4272487d7ad
[02:37:20] -ixelp- Don't Build Your Own Lisp · GitHub
[02:37:23] <White_Flame> which is all tangential to the actual core of the book
[02:37:24] <gilberth> hayley: The trouble here is that this book is written by a clueless newbie to begin with.
[02:39:34] <gilberth> As I said: This book is dangerous. It addresses newbies to either C or Lisp or both, and thus the audience might not recognize that it is utter BS.
[02:40:59] <gilberth> And why is that weird and broken language even called "Lisp"? Is anything with parens a Lisp?
[02:41:13] <hayley> Apparently yes.
[02:41:49] <copec> SICP builds up to write lisp in lisp
[02:42:02] <copec> That approach probably does make more sense
[02:42:19] <gilberth> Then, I have a stragy for you, hayley. Write a book about a fucked up language with a fucked up implementation enitled "How to build your own Rust"
[02:43:14] <copec> Are you talking about buildyourownlisp.com hayley?
[02:43:19] <hayley> Interesting!
[02:43:21] <hayley> copec: Yes.
[02:43:27] <gilberth> copec: Well, a book on a reasonable implementation of a personable Lisp with a reasonable collector in C could be of value.
[02:43:49] <gilberth> * reasonable
[02:43:59] * Alfr wonders why the collector has to be in C?
[02:44:10] <gilberth> How did this personable get in? I blame spelling corrctin.
[02:44:15] <hayley> gilberth wants do to the whole implementation in C.
[02:44:40] <White_Flame> yeah, GC in C sucks.  Limited ability to change, extend, and/or tune it from lisp
[02:44:52] <hayley> Which IMO could be a reasonable exercise after designing a prototype in Lisp, and then some more.
[02:45:06] <copec> Have you made yourself familiar with the SBCL bootstrap hayley?
[02:45:21] <copec> (not talking from a perspective that I know what I'm talking about here)
[02:45:23] <hayley> Go from CL (use the CL reader, printer, data structures, GC) to ML (write your own reader, printer, data structures, keep the GC) to C (write all them yourself).
[02:45:28] <hayley> copec: Not really.
[02:46:10] <gilberth> You can't write the GC in Lisp itself. Well you can, but only with subprimitives. That would be outside the scope of a nice book.
[02:47:10] <copec> Start from a lisp to output C
[02:47:53] <moon-child> also, if it is an interpreter, doing the gc in lisp would be slow
[02:47:54] <gilberth> That is far from trivial.
[02:48:07] <copec> YOU'RE FAR FROM TRIVIAL
[02:48:20] <moon-child> ur mum is far from trivial
[02:48:21] <gilberth> A Lisp interpreter in C is trivial.
[02:48:38] <copec> Have you followed the ECL bootstrap?
[02:48:54] <moon-child> gilberth: a lisp interpreter in lisp is trivial
[02:49:13] <moon-child> I did a toy compacting gc in j once.  7 loc
[02:49:38] <kakuhen> one day i will make one of these interpreter thingies
[02:49:42] <gilberth> moon-child: Even a bc compiler is. See <http://clim.rocks/gilbert/tiny-bc/>
[02:49:43] -ixelp- /gilbert/tiny-bc/
[02:51:19] <moon-child> gilberth: hm, didn't you used to have throw/catch in there too?
[02:51:20] <gilberth> But that's the trouble. You quickly enter the realm of compilers and you soon want to emit assembler.
[02:51:35] <moon-child> and why let and progn are special forms?
[02:52:18] <gilberth> Let me see. This was an exercise on the BC interpreter itself.
[02:52:45] <gilberth> Ah, I say so. Right.
[02:53:45] <gilberth> The alt-bc-2 implementation has a catch/throw.
[02:55:44] <gilberth> I wanted to see how fast an BC interpreter in CL itself could go.
[02:56:16] <gilberth> The version for PostScript was nice, as GS is pretty fast.
[02:57:56] <hayley> https://www.youtube.com/watch?v=hRH82QH8XLU
[02:57:57] -ixelp- Roger Waters and Syd Barrett argue over Gerald not having a house - YouTube
[02:58:12] <copec> moon-child, special perhaps because they are implemented directly, but not as a macro over more core forms
[02:58:51] <moon-child> copec: sure, but the question is why?
[03:00:04] <copec> What is your logic for what you chose gilberth 
[03:00:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:01:20] <gilberth> copec: My canonical set is QUOTE, LAMBDA, SETQ, IF, CATCH/THROW
[03:02:00] <gilberth> Perhaps I wanted to keep the compiler dumb here. It was a BC benchmark. And it beats Python already.
[03:02:20] <gilberth> <http://clim.rocks/gilbert/tiny-bc/benchmark.html>
[03:02:21] -ixelp- Timing Results
[03:03:10] <copec> Is your let/let* equivalent to lambda(s) in your microcode?
[03:04:22] <moon-child> 'beats python'  that's no mastery!
[03:05:10] <gilberth> copec: No, because it lacks the trivial handling for ((lambda ..) ..)
[03:05:45] <gilberth> moon-child: Well, the BC interpreter is written in CL, too.
[03:06:00] * hayley can't do it, but requires bounds checking everywhere.
[03:06:18] <moon-child> gilberth: somebody did a python interpreter in cl.  How much do you want to bet that it's faster than cpython? :)
[03:06:57] <gilberth> An interpreter? Why isn't Python compiled to CL?
[03:07:46] <moon-child> oh, I was misremembering--it was a compiler
[03:08:52] <gilberth> Having a compiler at your runtime is the one feature of CL that really rocks.
[03:09:31] <moon-child> indeed
[03:09:51] <moon-child> and in particular being able to feed that compiler something with structure--not just dumb strings
[03:10:10] * moon-child hates strings.  And parsers.  And just text in general
[03:10:12] <gilberth> Or see my TeX adventure. Although I chose to implement that with macros.
[03:10:41] * hayley stares at the SBCL compiler taking 150ms to compile a little DFA
[03:10:57] * gilberth shrugs.
[03:11:59] <gilberth> hayley: Use a giant VOP. /me hides.
[03:11:59] <hayley> Trying to wrangle stuff into a format for LLVM is also no fun, though it is a compiler backend I suppose.
[03:13:02] <hayley> gilberth: Been thinking about it, but idk how register allocation would work. 
[03:13:36] <gilberth> You don't know how register allocation works?
[03:13:36] <moon-child> register allocation is annoying.  Compile for a hardware stack machine
[03:13:42] * moon-child silently plugs greenarrays
[03:14:25] <gilberth> moon-child: That is no register allocation at all. That sure will be fast.
[03:16:42] <copec> prepare for graph theory dive
[03:17:03] <hayley> Graphs? Pfft. Estimated distance to use or go home.
[03:17:47] <gilberth> Roll dice and be set.
[03:20:09] <copec> play a game of Catan for the registers
[03:20:25] <hayley> But I wouldn't know how SBCL does it exactly (on low speed, it uses a greedy allocator, high speed it uses graph colouring?) and how that interacts with VOPs. Can I declare one temporary per variable? Perhaps not, because temporaries are always in registers and thus there's no spilling.
[03:21:11] <gilberth> copec: Nah, I always lose with that. Bad idea.
[03:21:46] *** Quits: random-nick (~random-ni@87.116.178.45) (Ping timeout: 245 seconds)
[03:23:53] <hayley> https://www.youtube.com/watch?v=EAFu1wj2f44
[03:23:54] -ixelp- Telekon - YouTube
[03:29:23] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[03:34:15] <hayley> https://twitter.com/David3141593/status/1442883432925773829 I think I got out-algorithmed with my stupid GPU miner for this centralised toy^W^Wcryptocurrency.
[04:18:03] <gilberth> "Your weapon jammed" "You're dead" Thanks!
[04:19:20] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 246 seconds)
[04:21:26] <hayley> "Just do <blah> to fix the server." "Are you going to complain or do it?" "Are you really expecting me to not lose $17k for you patching this?" 
[04:22:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:34:23] <hayley> "Stop complaining then." "Fine, I'll do it. But asking some rando who just entered the room 10 minutes ago is a bad idea." "Here is the patch: [4 insertions, 1 deletion]"
[04:34:53] <hayley> For all the complaining about me complaining (which I saw as explaining, I guess if you have nothing good to explain then it is complaining...), they could have easily fixed it.
[04:40:33] * hayley uploaded an image: (25KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/MaEAyroFnjwBgYXbwuEVkouU/Screenshot%20from%202021-09-29%2011-10-24.png >
[04:41:18] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:51:13] <hayley> Now some want to nominate me to win a bounty cause I did M-; C-n error("Mining xxhash is disabled"); 
[05:17:38] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:20:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[05:20:31] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[05:28:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2.1)
[05:29:03] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[05:29:27] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[06:02:31] *** Joins: phantomics (~phantomic@71-33-148-118.hlrn.qwest.net)
[06:02:57] *** Joins: gko (~user@user/gko)
[07:08:09] <hayley> https://www.youtube.com/watch?v=LP5fL18fR9Q
[07:08:09] -ixelp- Roger Waters sends Syd Barrett to space - YouTube
[07:11:46] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:25:07] *** Joins: semz (~none@user/semz)
[07:38:10] *** Joins: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte)
[07:40:59] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 252 seconds)
[08:15:13] *** Quits: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[08:19:40] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[08:20:12] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[08:34:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 246 seconds)
[08:48:18] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[08:48:50] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[08:51:47] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:52:12] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[08:52:31] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:54:00] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[08:54:16] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[08:54:32] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[09:00:48] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:36:57] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[09:39:38] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[09:39:45] *** Joins: shka (~herr@109.231.6.176)
[10:30:13] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[10:46:10] *** Joins: notzmv (~zmv@user/notzmv)
[10:53:25] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[11:11:03] <hayley> How the hell do I do a right shift with no shift unit?
[11:11:56] <moon-child> div?
[11:13:09] <hayley> No division either.
[11:14:03] * hayley is using a fork of lcc to compile a LC-3 VM to LC-3 so that she can have a metacircular VM.
[11:14:45] <hayley> The compiler knows division, but then I get messages like "warning: shifting an `unsigned int' by 8 bits is undefined" even though an unsigned int is a 16 bit unit (the machine is word addressed, so sizeof(unsigned int) = 1 still).
[11:17:33] <moon-child> implement it yourself with repeated subs
[11:17:54] <moon-child> shouldn't take too long if maxint is just 64k
[11:17:58] <hayley> Perhaps so.
[11:18:02] <dave0> that looks like c
[11:18:09] <dave0> i thought we hated c?
[11:19:06] <hayley> Yes, but I don't have a CL compiler targeting LC-3.
[11:19:35] <hayley> "527851: constant outside of allowed range"
[11:19:44] <dave0> right shift in c is     unsigned int rshift(unsigned int a) { unsigned int r=0; if(a & 0x8000) r |= 0x4000; if(a & 0x4000) r |= 0x2000; ... if(a & 4) r |= 2; if(a & 2) r |= 1; return r; }
[11:20:25] <moon-child> cute
[11:20:29] <hayley> Yeah, I do have AND, so that'd work.
[11:22:12] <hayley> It seems someone has done something by repeatedly generating ADD R3, R3, #15
[11:22:41] <hayley> ...4,464 times?
[11:22:52] <moon-child> min 4 bit imm?
[11:23:05] <moon-child> err, max
[11:23:27] <moon-child> tom7 had a neat method of generating all constants with _no_ imms, just basic arithmetic ops
[11:23:44] <hayley> One from the publisher: http://highered.mheducation.com/sites/0072467509/student_view0/c_to_lc-3_compiler.html
[11:23:44] -ixelp- Introduction to Computing Systems | C to LC-3 Compiler
[11:24:27] <hayley> And it looks the exact damn same as the one I have already. So they can't even write a compiler.
[11:25:04] <dave0> moon-child: oh i see what you're saying
[11:25:12] <dave0> (a >> 4) >> 4
[11:25:22] <moon-child> huh?
[11:25:49] <dave0> max 4 bit imm .. i took that to mean only shift by up to 4 bits at once
[11:27:06] <moon-child> I was referring to the 'ADD R3, R3, #15'.  (Assuming that means you can't have immediates greater than 4 bits, so you have to repeatedly use the 4-bit imms you do have)
[11:27:23] <dave0> oh ok
[11:28:20] <hayley> Well, the .asm file generated by the compiler is 519496 characters long. So much for that.
[11:28:26] <hayley> s/characters/lines/
[11:28:48] <dave0> jeez
[11:30:49] <hayley> Maybe I have to write this in assembler...somehow. At least there isn't really any recursion.
[11:35:55] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:11] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[11:36:49] <hayley> OTOH I cannot be bugged to write in assembler. So maybe I add to the layers of indirection and write a p-code.
[11:37:26] <hayley> Since I want to nest an address space inside itself, I need paging and thus some primitives for getting the page index and offset.
[11:37:31] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[11:37:33] *** Joins: selwyn (~selwyn@user/selwyn)
[11:37:54] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[11:38:54] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:52:27] *** Quits: hayley (~theemacss@user/hayley) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Bridge terminating on SIGTERM)
[11:57:34] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[11:57:34] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[12:00:15] <pjb> hayley: https://termbin.com/tfv3
[12:00:27] *** Joins: hayley (~theemacss@user/hayley)
[12:01:43] <hayley> The main problem is that, with no LDB, the LC-3 is not very suitable for self-interpretation.
[12:02:17] <hayley> pjb: Interesting, thanks. Suppose I can unroll this stuff too.
[12:03:02] <pjb> instead of logbitp, you can also use the (plusp (logand (* 2 bit) n))
[12:03:12] <pjb> (logbitp is a ldb)
[12:03:29] <hayley> logtest?
[12:03:46] <pjb> Yes.
[12:03:50] <shka> ldb-test
[12:04:25] <hayley> I like the idea of doing a p-code more, like I'd have LDB in "microcode". It'd be slower than assembly, but I simply cannot bring myself to write it in assembly.
[12:04:47] <pjb> Bit banging can be done either with mask or with bit indexes. Processors often only have masks.
[12:07:54] <hayley> OTOH an interpreter for a good p-code also requires LDB, and we're back at square one. So I guess I better get comfy with macro-assembler.
[12:16:45] <hayley> https://www.reddit.com/r/lisp/comments/pxmq81/any_lisp_with_native_reference_counting/ pfft
[12:25:19] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[12:26:31] <ck_> "leverage" :/
[12:31:19] <hayley> It helps to consider that any generational GC using a card bitmap has a one-bit reference count for pages in oldspace pointing to newspace.
[12:32:47] * pl would write an answer but doesn't want to create a reddit account
[12:33:21] <hayley> Don't worry, I've already hidden a link to "YOU JUST GOT METROGNOMED" somewhere.
[12:34:53] <hayley> pl: They'll see the light of continuously concurrently compacting collection one day.
[12:35:10] <pl> experience shows otherwise
[12:36:23] * hayley uploaded an image: (400KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/hgWjQlZJzOJjJExDylvcToCp/gun-baker.png >
[12:36:27] <dave0> CCCCOD
[12:36:39] <hayley> dave0: C4
[12:36:58] <dave0> nice
[12:37:09] <hayley> Honestly, I don't know how any customers haven't asked "so, you want to collect our garbage using explosives"?
[12:38:55] <moon-child> hayley: https://devblogs.microsoft.com/oldnewthing/20180228-00/?p=98125
[12:39:50] <hayley> Yes, larger applications need the nuclear warhead GC rather than just C4.
[12:46:06] <hayley> Though beach hasn't yet seen the light (but AFAIK if you want concurrent thread-local collection, you find yourself needing concurrent compaction). One day I'll get there.
[12:48:32] <moon-child> very agressive benchmarking works
[12:49:53] * hayley sort of did the maths already. Adding bogus reads is free because the CPU lets you have approximately too many reads in flight, and the MMU trap can be engineered to be rare enough that you don't care.
[12:50:16] <moon-child> I mean benchmarks showing that without concurrent compaction you're too slow
[12:50:27] <hayley> Right.
[13:13:23] <hayley> So, apprarently LispWorks has a real-time GC but you need a consulting arrangement to get it.
[13:23:58] <Gnuxie> or they're bullshitting 
[13:24:15] <Gnuxie> / want you to pay them to make one 
[13:24:22] <hayley> Always possible.
[13:24:29] <ck_> "ha ha, business"
[13:25:07] <moon-child> 'it seems to have collected itself'
[13:26:05] <pl> or maybe it has its pecularities and they don't want to put it as part of standard support offering due to extra work involved
[13:27:03] <pl> the newest two servers in SDF.org were sold on special agreement that there's no support due to similar issues
[13:29:00] <Gnuxie> lel
[13:35:15] <pl> The vendor doesn't even mention the existence of the hw anywhere unless you know the history already 
[13:36:01] <pl> I strongly suspect LW simply grades it according to "ok, how much do we need to make the ROI good?" 
[13:37:18] <pl> The public real-time GCs involved scientific funding and commercialization by companies who had considerable free cash to invest into it 
[13:40:22] <hayley> mfw no real-time declarative programming in CL
[13:43:40] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[13:57:21] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[13:58:23] <pl> hayley: there's real-time and real-time
[13:58:39] <pl> I have realtime project where the only reason it's not in CL is due to me being stupid
[13:59:16] <hayley> pl: I'm aware, IIRC you have explained it. "Real-time declarative programming now!" is the slogan you read on the intro to Erlang: the Movie
[13:59:30] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[14:07:00] <pl> heh
[14:07:11] <pl> btw, Erlang is one of the options I have also considered since then
[14:07:20] <pl> need to sit down and re-learn it
[14:07:27] <pl> or rather, learn OTP on top
[14:07:34] * hayley uploaded an image: (558KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/agWWyfmubJMFKuARyWFJVRMA/Screenshot_2021-09-29_20-40-59.png >
[14:13:02] <pl> hayley: btw, regarding RT... did I mention the difference between "realtime" toolset (PLC) we had for a job and its worst theoretical time, vs the worst theoretical time for shitty Python code I wrote on a Raspi?
[14:13:14] <hayley> pl: I believe so.
[14:13:49] <hayley> Though it wouldn't hurt to remind #lispcafe.
[14:13:54] <pl> heh
[14:14:28] <hayley> Yeah, I don't remember it that well, sorry.
[14:15:32] <pl> well, target performance required that the "robot cycle", i.e. from "item in position for pickup" to "item placed and robot returned home" is below, iirc, 1 minute, worst case stretched to 2 minute
[14:15:50] <pl> PLC "poscalc" regularly blew that time
[14:16:43] <pl> one day I estimated the worst possible case and we got a number so outrageous that in report to client we wrote less than half of it - 30 minutes
[14:16:56] <hayley> Sheesh.
[14:17:46] <pl> the shitty python code that uses nested lists as 3d bitmap matrix (essentially a point cloud) running on a raspberry pi (I think it was RPi3) never went above 1s
[14:17:55] <hayley> Wow!
[14:18:39] <pl> CL would have been much nicer
[14:18:43] *** Joins: random-nick (~random-ni@87.116.183.117)
[14:19:06] <pl> and honestly, I think I'm going to sit down and program a CL version of some of it, because python libs we used were really, really annoying to handle errors in
[14:19:53] <hayley> I got lucky and got to use numpy for n-dimensional arrays, though if you make a specialized array, it tends to give you an object which _isn't_ an int, but looks awfully like one. Blew up when I wanted to hash them.
[14:20:26] <hayley> (Rather, a[x] gives you a non-int value, rather a np.uint8 instance or whatever.)
[14:23:39] <pl> well, yeah, numpy doesn't use python types, but fortran arrays wrapped in C wrapped in Python dictclass (rhymes with dickbutt)
[14:24:29] <pl> I considered using numpy, but I tried to optimize too much I think, it definitely didn't mesh with how I was trying to work, so the simpler version went in
[14:25:12] <pl> major source of problems to this day is the communications library, multithreading and occassionally tuning the positioning algorithm (haven't done that in half a year now, I think)
[14:28:20] <pl> anyway, at this point I think I'd get better ROI of writing a CFFI wrapper around open62541 or Snap7 instead of figuring the right way to subclass python lib's classes to get proper error handlind
[14:28:37] <hayley> I sorta expect the FFI to return Python ints though.
[14:29:17] *** Joins: selwyn (~selwyn@user/selwyn)
[14:29:29] <pl> hayley: IIRC you need to cast them some way?
[14:29:47] <hayley> Yes, int(blah[boop]) fixed it.
[14:29:49] <pl> because otherwise numpy tries to optimize for cases where you're going to use them with another numpy call again
[14:30:04] <hayley> That sort of explains things.
[14:30:33] <pl> remember, unlike SBCL (for example), Python Ints take a lot more than shift right/left and an overflow check in FFI
[14:31:20] <pl> I believe that despite having to pass back a special object, their wrapping allows a quick path for reuse
[14:32:51] <selwyn> is numpy in common lisp a good idea?
[14:34:02] <hayley> IMO numpy-esque array processing is limited by eager evaluation. Hence Petalisp or gtfo (totally kidding).
[14:34:55] <hayley> https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.115.1306&rep=rep1&type=pdf <- Baker's Lisp-based 6502 macro assembler. Might do something like that.
[14:46:40] <pl> btw, one would think IBM mainframes are all humourless suits
[14:47:04] <pl> ... then you find an official IBM tool/product called "CICS Time Machine"
[14:47:30] <hayley> I'm only really aware of the EIEIO instruction on PowerPC.
[14:48:14] <selwyn> what a name
[14:48:29] <hayley> https://www.ibm.com/docs/en/aix/7.1?topic=set-eieio-enforce-in-order-execution-io-instruction
[14:49:59] <dave0> http://www.catb.org/jargon/html/S/SEX.html
[14:50:33] <ck_> there are many MacDonalds on the ibm.com domain
[15:05:03] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[15:29:21] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[15:32:36] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[15:43:09] <dave0> macdonalds used to be good value but not now
[15:43:33] <shka> is there date for that super heavy orbital test?
[15:44:02] <selwyn> what will a super heavy orbital do
[15:44:25] <shka> nothing interesting, just a booster test
[15:44:29] <shka> but that booster
[15:44:32] <shka> is immense
[15:45:20] <selwyn> hm
[15:46:03] <shka> https://www.teslarati.com/spacex-starship-super-heavy-static-fire-tests/
[15:46:04] -ixelp- SpaceX prepares Starship, Super Heavy for milestone Raptor static fire tests
[15:46:05] <selwyn> i can´t judge how big the thing is 
[15:46:09] <shka> look at it
[15:46:34] <selwyn> > most powerful rocket ever tested
[15:46:35] <selwyn> ok
[15:46:48] <shka> selwyn: whole rocket stacked is more or less the size of Saturn V
[15:47:11] <selwyn> oh
[15:47:15] <selwyn> 29 raptor engines
[15:47:19] <shka> yes
[15:47:50] <selwyn> damn
[15:48:40] <shka> i tell you what, once the full throttle is hit on all of those bad boys
[15:48:53] <shka> the very sky will tremble 
[15:49:04] <selwyn> yeah don´t want to miss the launch
[15:49:29] <selwyn> ´crack the sky, shake the earth´
[15:49:48] <shka> hopefully won't explode on the way up 
[15:58:51] <selwyn> they must be confident
[16:00:49] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:21:12] <gilberth> Good morning #lispcafe!
[16:21:47] <selwyn> hi gilberth
[16:21:59] <dave0> maw gilberth 
[16:22:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 246 seconds)
[16:24:18] <hayley> Good morning gilberth!
[16:24:48] *** Joins: aeth (~aeth@user/aeth)
[16:25:12] <hayley> Well, after more diddling, lcc still refuses to cooperate. Methinks that lcc assumes a byte oriented machine, but LC-3 is 16-bit word oriented, and so all constant folding and optimisations fail.
[16:26:23] <hayley> So I will do as Baker did, write a Lisp program to generate assembly, and build up loops and functions and LDB somehow. I can write macros which generate the exact instructions to LDB.
[16:33:11] <gilberth> There are some pretty low hanging fruits in the CADR emulator for speed. The CPU would poll its I/O on each cycle. Due to modularity this involves calling half a dozen routines defined in other files. When I do that only every 256 cycles, I am now at a cycle time of ~23ns on the slow machine from like 60ns initially.
[16:34:11] <gilberth> On the fast machine I am at about 12ns cycle time now.
[16:35:01] <gilberth> But the main culprit was the synchronous nature of the frame buffer, which it what made the emulator appear slow.
[16:35:06] <hayley> Well, my PR to disable a very bad exploit was ignored. Someone said "it's just for fun, it doesn't matter that our crypto is broken".
[16:35:49] <dave0> things that are fun have a nasty habit of ending in production :-)
[16:36:19] <hayley> Now....maybe I don't get it, but it doesn't seem fun to do anything where there's a O(1) solver publicly available. And, of course, there is monetary value attached, and it'd suck if that was lost because someone decided to remain immature about it.
[16:36:25] <gilberth> Yes like so called scripting languages.
[16:38:15] <hayley> https://github.com/revoxhere/duino-coin-pools/pull/3
[16:38:16] -ixelp- Disable xxhash mining by no-defun-allowed · Pull Request #3 · revoxhere/duino-coin-pools · GitHub
[16:38:38] <gilberth> Why is it, I always read "sxhash"?
[16:39:01] <hayley> And, while I think this a dumb thing to trade, peope did that and I don't feel like they should all lose $17k.
[16:39:12] <hayley> A few typos there.
[16:39:53] <gilberth> People trade in all kind of stuff. They want to get rich fast(TM).
[16:41:18] <hayley> I had my fun porting XXHASH to the GPU and running 2GH/s with a 100 watt heater, too.
[16:41:45] <Duuqnd> I can understand ignoring problems when doing a project for fun, but I think as soon as it has just one user besides the author it needs to be taken somewhat seriously.
[16:43:20] <hayley> The author is 17 and it's a project with his pals. I can respect that, IIRC I started writing Netfarm when I was 17. Despite the fun in it, I had been very careful with regards to good engineering.
[16:45:31] <Duuqnd> My library (barely a library) Mailmurder is pretty terrible but if anyone started using it I'd make sure to get it into a sort of acceptable state.
[16:46:48] <hayley> (IIRC I sort of discovered conflict-free commutative replicated data types independently, as I knew I had no ordering constraints and had to do something commutative.)
[16:47:52] <hayley> But anyways, there is now money involved and they have to be damn careful.
[16:50:43] <Duuqnd> The first time(s) I worked on code that was used in production (on a satellite no less) it made me really damn paranoid and so I made sure to never take the lazy way out, so maybe fear of messing things up is a good way to prevent sloppy engineering (maybe not, but it worked for me).
[16:51:32] <hayley> Sheesh, you started with a satellite. That's pretty hardcore.
[16:54:59] *** Quits: Posterdati (~posterdat@host-95-235-15-123.retail.telecomitalia.it) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[16:56:06] <hayley> I started on a bot for a game. It went okay-ish. Learnt concurrent programming. Learnt to change the password even after I had removed my code from the internet months prior.
[16:57:57] <hayley> Anyway, they're really being dumb by not fixing this.
[16:58:40] <Duuqnd> It's a bit of a long story how I ended up there. Basically, in Swedish schools we have something that's best translated to "work experience" where students take an internship at a company for a few weeks. My mom knew someone at the company and I got to do my two work experience internships there. I wrote some simple programs that never ended up being used, but it was enough for them to see that I could indeed write programs. A few years later I
[16:58:40] <Duuqnd> had another of these internships (this time in the Swedish equivalent of late high school) and that's when I was allowed to work on production code.
[16:59:09] <Duuqnd> Then I got a summer job there (just this summer actually) and I ended up adding a few things and refactoring some.
[17:00:04] <Duuqnd> So yeah, I wasn't doing the really hardcore stuff for the satellite, mostly work some surrounding systems.
[17:00:19] <Duuqnd> s/work some/work on some/
[17:00:46] <hayley> I had work experience at a guitar shop. It was boring. On the first day I cleaned the dust off the guitars. On the other days there was no dust, so I did nothing.
[17:01:30] <Duuqnd> Most of my classmates worked at grocery stores or similar
[17:02:20] <hayley> Then life was shit for a year and a half with university. Then beach hired me for a few months. Now life is shit again (mostly due to things other than being jobless and not having fun compiler hacking actually).
[17:02:50] <hayley> Oh, wrong year. I still had a year of high school after work experience.
[17:03:53] <hayley> But writing the SICL register allocator was the real work experience. My teacher asked "What programming experience do you have?" "I work on a compiler." "Oh, you got an internship already." Not really an internship, but sure.
[17:05:23] <Duuqnd> Working on a compiler is certainly more interesting than anything I've done
[17:06:06] <hayley> I wouldn't recommend it unless you like reading ISA manuals.
[17:06:23] <Duuqnd> Sounds kinda painful
[17:07:19] <Duuqnd> Most of the time I spent working on the satellite code was just me contemplating why it had to be C++ of all languages
[17:10:41] <Duuqnd> The biggest thing I ended up actually doing was rewriting the persistent storage system so that new entries could be added at runtime. Before my rewrite there was just a list in an XML file of so-called parameters that were to be saved. This list would be used when auto-generating code so it was essentially hard-coded.
[17:15:46] <hayley> Tomorrow I intend to go to hell by implementing a macro preprocessor for assembler in Lisp, and then adding procedures and loops. So there's that for pain.
[17:16:21] <hayley> lcc generates garbage code seemingly, so it is sadly necessary to reinvent the wheel.
[17:16:37] <Duuqnd> I look forward to seeing how that turns out
[17:19:07] * hayley uploaded an image: (241KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/wjGFqSJnpJkmBrERBrFECLvT/faa-committee.jpeg >
[17:21:27] <Duuqnd> Speaking of unsafe, when I was learning the satellite codebase I was kind of surprised that error handling was so minimal. The most I usually saw was functions returning an error code. Quite a few functions actually ignored the error codes.
[17:22:46] <hayley> Dear Henry Baker, you complain about unsafe code but made a 6502 assembler, curious.
[17:23:04] <hayley> -- Hayley Patton, Turning Point #lispcafe
[17:23:17] <Duuqnd> The strategy for memory management was also quite interesting: no dynamic allocation, it's all either static or allocated at bootup and never freed.
[17:23:47] <Duuqnd> Well, stack allocation was used sometimes, but it was mostly just static
[17:44:27] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[17:45:30] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[17:47:20] *** Joins: hendursa1 (~weechat@user/hendursaga)
[17:57:29] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:00:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:00:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[18:01:15] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:21:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[18:32:23] <selwyn> army set to deliver fuel confirmed lol
[18:37:21] <selwyn> i found some goddamn larva in my garlic
[18:37:32] <selwyn> lets hope it hatches into something but looks kind of dead
[18:38:14] <gilberth> Oh, when it's dead the garlic cannot be any good.
[18:46:28] <pjb> selwyn: do you realize all the hard work this garlic did to evolve producing some stringent chemicals to deter animals to eat it, and there's there's some kind of insect that drops its larvae into it!!!
[18:46:51] <pjb> Ah, if it's dead, then success…
[18:47:17] <pjb> This will make the insect evolves stronger garlic protection, or to choose another plant to lay eggs in.
[18:49:33] <pjb> Poor tomatoes and pimentoes.  They tried so hard to evolve their chemical defenses, and we come and like the hot burning sensations. Carolina Reaper, 2.2 million scoville Yay! Take that!
[18:56:03] <dave0> nite all
[18:56:50] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:04:32] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:04:58] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:10:12] <Alfr> pjb, I'd argue, being tasty and thus being cultivated seems to be valid evolutionary choice right now.
[19:44:05] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[19:44:30] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:45:57] <shka> Alfr: pro chicken strat
[19:48:03] <selwyn> better to be cute
[19:48:13] <selwyn> more chances to escape and go feral, like the cat
[20:03:37] <pjb> Alfr: :-)
[20:04:30] <pjb> That's why we go fat: to become appetizing to aliens who raise us to snatch us and eat us! :-)
[20:11:58] <gilberth> Good. I don't go fat so I am safe I guess.
[20:15:03] <ck_> better to never have come into existence at all
[20:16:12] <gilberth> Hmm, I don't mind my brief visit at our crazy world.
[20:20:47] <pjb> gilberth: perhaps not: they may choose to prune your race instead of making you reproduce >:-}~
[20:28:55] <selwyn> perhaps this is why americans are the ones who see all the ufos
[20:30:49] <ck_> lol
[20:31:12] <ck_> (someone whistles the x-files theme in the distance)
[20:32:20] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 246 seconds)
[20:34:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[20:36:05] *** Joins: aeth (~aeth@user/aeth)
[20:39:00] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:51:38] <pjb> or because the US goverment sold their people for alien technology, they're made fat for picking.
[20:57:58] <ck_> okay, that's it, I've had enough
[20:58:25] * ck_ configures his implants to inedibility-mode
[21:01:04] *** Joins: notzmv (~zmv@user/notzmv)
[21:02:48] <ck_> (that's what the flu shots are about, no?)
[21:27:34] <gilberth> Compiling old C code is fun: "231 warnings and 16 errors generated." in one single file. *sigh*
[21:29:26] <ck_> what code was it
[21:30:25] <gilberth> The Chaos net code that came with the CADR emulator. It looks like really old SYSV code.
[21:31:40] <gilberth> It's K&R style function definitions and declarations for the most part.
[21:32:06] <ck_> yeah, that's what I pictured
[21:32:45] <gilberth> Which breaks easily with 64-bits.
[21:33:49] <gilberth> I also spot reading a directory with just read(2) as directories once were just files.
[21:36:04] <gilberth> BTW I once attempted to compile pcc and gave up. The original source are that old C that gcc cannot even grok it. I gave up.
[21:37:59] <gilberth> You really would need a that-old-C to C compiler, which I may actually write, when bored.
[21:43:13] <gilberth> Very strange: #if defined(BSD42) || defined(linux)
[21:50:44] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[21:50:58] *** Joins: X-Scale` (~ARM@46.50.4.194)
[21:52:20] *** X-Scale` is now known as X-Scale
[21:53:35] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:56:46] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[22:35:59] *** Joins: christophergray (~christoph@190.148.52.166)
[22:36:44] <shka> white keycaps really do get dirty quick
[22:53:23] *** Quits: semz (~none@user/semz) (Ping timeout: 246 seconds)
[22:56:04] <ck_> I guess so do other colors, but you notice it more on light backgrounds
[22:56:36] <ck_> on the topic of cleaning, I've just picked up a canister of alcohol to get rid of coffee residue in the switches of one of my keyboards, it worked very well and I can recommend it
[22:56:48] <ck_> (soaking the board for a while)
[23:02:07] <shka> https://www.youtube.com/watch?v=XKWrbpehhhc
[23:02:07] -ixelp- A Conversation With a Quake 3 Bot - YouTube
[23:04:14] <ck_> you know, in the latest q3 demo the mg spins when you fire it! amazing
[23:12:32] *** Quits: christophergray (~christoph@190.148.52.166) (Quit: WeeChat 3.3)
[23:17:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:32:04] <pjb> gilberth: depends. Sometimes you compile old C code, and it's super clean, no warning, no error.
[23:32:51] <shka> not a frequent occurance 
[23:33:10] <pjb> But a very pleasurable one.
[23:33:11] <shka> but for instance doom has a very nice c code base
[23:51:08] *** Quits: shka (~herr@109.231.6.176) (Ping timeout: 250 seconds)
[23:51:59] <gilberth> "if (tm->tm_year > 99) tm->tm_year = 99;" Ah, got it.
[23:53:21] <gilberth> "Best before: end of century; Shake before use. Don't use after shaken."
[23:54:53] <gilberth> pjb: Old code that compiles without warnings is the most dangerous.
