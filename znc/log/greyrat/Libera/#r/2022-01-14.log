[00:33:15] <Bayes> eliocamp thanks that's neat!
[00:33:28] <Bayes> sorting code lines is not that crazy
[00:33:54] <Bayes> sometimes I like having library and source calls in lexicographical order order
[00:39:38] *** Quits: debianero (~debianero@60.132.134.77.rev.sfr.net) (Quit: Leaving)
[01:14:17] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0::7e04)
[01:15:43] <twrk> let's write a discord(bot) package for R
[01:16:43] <twrk> and there seems to be this.. https://rdrr.io/github/mone27/discordr/man/DiscordrBot.html
[01:21:40] *** Joins: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net)
[01:34:49] *** Quits: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net) (Read error: Connection reset by peer)
[01:38:33] *** Joins: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net)
[01:39:21] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[01:55:43] *** Quits: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net) (Ping timeout: 256 seconds)
[01:57:08] *** Joins: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net)
[02:07:05] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0::7e04) (Quit: Leaving)
[02:15:50] *** Quits: Vojtaeus (~vojta@user/vojtaeus) (Quit: Odcházím...)
[02:25:57] *** Quits: eliocamp (~eliocamp@user/eliocamp) (Ping timeout: 240 seconds)
[02:31:38] *** Quits: confuzius (~h_m@186-149-117-154.bitcointernet.co.za) (Ping timeout: 250 seconds)
[02:59:49] *** Quits: kmh (~kmh@2a00:6020:5004:6800:a7fd:cfa9:a0b2:2b1a) (Quit: Leaving)
[03:01:58] *** Quits: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net) (Ping timeout: 250 seconds)
[03:28:50] *** Quits: usr725635_ (~User@cpe-45-47-86-32.twcny.res.rr.com) (Ping timeout: 250 seconds)
[04:02:35] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[04:16:15] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[04:56:13] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:38:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:39:56] *** Joins: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net)
[05:56:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:00:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:09:45] *** Quits: flip214 (~marek@user/flip214) (Ping timeout: 256 seconds)
[06:09:52] *** Joins: flip214 (~marek@user/flip214)
[06:59:52] *** Quits: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net) (Ping timeout: 250 seconds)
[07:00:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:26:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:48:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[09:07:19] *** Joins: rickyrick (~rickyrick@S01069050ca454523.vf.shawcable.net)
[10:01:21] *** Joins: Guest8 (~Guest8@139.47.36.37)
[10:01:34] *** Guest8 is now known as __that__
[10:01:53] <__that__> morning
[10:02:26] <__that__> why when I do a ekev <- read_excel("ekev.xls", skip = 1) all columns in that excel sheet appears as declared variables in the scope I am working in please?
[10:05:13] <twrk> like, in the local environment? that's weird... I've not known that to ever happen
[10:09:49] <__that__> twrk, right that is correct.  I am actually passing the loaded data as a parameter to plot such plot(Pb ~ Distance, data = ekev). What confuses me in R is that Pb and Distance is that such variables can be called by their variable names on that function. I would have expected that to have to be quoted. But I guess like most languages the
[10:09:50] <__that__> evaluation is done from right to left and R is taking that to the extreme
[10:11:18] <__that__> What is the most used or more canonical way of applying a third order function to an array in R?
[10:11:40] <__that__> likey log to [x, y]
[10:13:54] <twrk> I guess an apply like function like lapply(list, function, arguments), although I've seen a more familiar map function, just not sure where since it's been a while
[10:14:28] <__that__> twrk, yeah map is the way I used in Python or a list comprehension
[10:14:36] <twrk> maybe sapply... but I've never learned the differences when I could just unlist(lapply(...
[10:14:46] <__that__> I don't want to have to call log function on each column of an spreadsheet
[10:15:14] <twrk> sapply/vapply
[10:18:00] <twrk> there's just a bit of semantics with you call something an "array" an R, vs a vector or a list
[10:18:41] <twrk> which are more familiar structures to work with in their usage in functions and such
[10:19:33] <__that__> thanks
[10:19:59] <__that__> and another thing is there such thing in R like in Python where you can unpack a list of elements / array of elements into variables
[10:20:08] <rickyrick> I think the formula is evaluated in the environment of data
[10:20:09] <__that__> something like x, y <= c(1,2)
[10:20:27] <rickyrick> That doesn't exist yet in base, but there's a package that does something like that
[10:23:14] <rickyrick> https://cran.r-project.org/web/packages/zeallot/index.html
[10:24:11] <__that__> In the case I talked about earlier on involving this line: plot(Pb ~ Distance, data = ekev). I don't think it is what I said of right to left, which is true for all languages. I believe the ~ operator is somewhat telling R "don't evaluate it yet", hence you can call the variable names right away
[10:25:20] <__that__> so getting back to modPb <- lm(log10(Pb) ~ log10(Distance), ekev)
[10:25:35] <rickyrick> In R functions you can pull the given expression to an argument
[10:25:36] <rickyrick> Not just the value
[10:26:06] <__that__> rickyrick, what do you mean by pulling the given expression pleas?
[10:26:25] <__that__> you mean you pass an expression?
[10:26:39] <__that__> * that you can pass an expression instead of values only?
[10:28:42] <__that__> so getting back to modPb <- lm(log10(Pb) ~ log10(Distance), ekev), how would you do the same without having to explicitly call log on the two  elements of the expression?
[10:29:09] <rickyrick> As in you can do: f = function(x) {deparse(substitute(x))}
[10:29:10] <rickyrick> f(1+1)
[10:30:30] <rickyrick> I don't think you can do an easy log for both sides of the expression
[10:30:36] <rickyrick> Short of logging the entire data frame ekev
[10:32:31] <__that__> in python you could do lm ([log(x) for x in ekev if x in ['Pb', 'Distance']). Perhaps that is what I am after and can't find in R right away.
[10:33:14] <rickyrick> ekev[, c("Pb", "Distance")] = log(ekev[, c("Pb", "Distance")])
[10:33:41] <__that__> but then you are modifying the original ekev data structure
[10:34:38] <rickyrick> I mean
[10:34:41] <rickyrick> You can assign to a different thing
[10:37:11] <__that__> oh I see
[10:38:15] <rickyrick> I guess if you're looking for a more general thing it'd be lapply(x[c("Pb", "Distance")], log)
[10:38:32] <rickyrick> The first one only works for dataframes/matrices
[10:44:29] <__that__> sorry for keeping bagging on the door. When I do modPb <- lm(log10(Pb) ~ log10(Distance), ekev) how can I see the data structure of modPb
[10:44:30] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (Ping timeout: 260 seconds)
[10:44:43] <rickyrick> str(modPb)
[10:46:28] <__that__> cool, that helps! I wonder how summary can deal with all different models generated by anova, lm, etc... there must be a common underlying data structure. Is there any place on the doc where these object structures are explained?
[10:46:40] <rickyrick> summary dispatches to the corresponding function
[10:46:50] <rickyrick> e.g. calling summary on an lm class object dispatches to summary.lm
[10:47:07] <__that__> yeah, that makes sense
[10:47:10] <rickyrick> Same reason you can plot() on a time series ts object
[10:47:19] <rickyrick> Really convenient if you're a non-programmer
[10:47:34] <__that__> here you are when you called it lm class object. Is that somewhere I can look at in the doc?
[10:48:22] <__that__> yeah, I realised that R is very high level so that biologists, statistician, etc... can produce right away... For me however I feel like I am on a car without stirring wheel
[10:48:43] <rickyrick> ?lm
[10:48:54] <rickyrick> Pretty much every function help file will have an output section
[10:49:03] <rickyrick> The well written ones will tell you what kind of object the function returns
[10:49:21] <rickyrick> oops a "Value" section
[10:49:26] <rickyrick> >lm returns an object of class "lm" or for multiple responses of class c("mlm", "lm").
[10:49:35] <__that__> Yeah I knew ? however I did not realised that the object class was defined there
[10:49:41] <rickyrick> Usually it is
[10:49:51] <rickyrick> Might be less reliable in other people's packages
[10:50:10] <__that__> cool, naturally
[10:51:43] <rickyrick> CRAN does a decent job of keeping packages in line though
[11:06:23] <__that__> rickyrick, any tutorial/doc that walk me through R's data structure without having to explain me what a vector is? Just a, b, c and how to sue them? Something like for devs from other languages
[11:19:48] *** Quits: __that__ (~Guest8@139.47.36.37) (Quit: Client closed)
[11:28:13] *** Joins: palasso (~palasso@user/palasso)
[11:30:05] <rickyrick> wat
[11:30:44] <rickyrick> Pretty much everything is a special case of a list
[11:30:46] <rickyrick> ( ͡° ͜ʖ ͡°)
[11:36:25] *** Joins: computerfarmer (~thomas@p200300ca073550827bfdd47d9ad11895.dip0.t-ipconnect.de)
[11:42:25] *** Joins: Vojtaeus (~vojta@user/vojtaeus)
[11:46:15] *** Quits: Vojtaeus (~vojta@user/vojtaeus) (Client Quit)
[11:49:53] *** Joins: h_m (~h_m@186-149-117-154.bitcointernet.co.za)
[11:49:53] *** Quits: h_m (~h_m@186-149-117-154.bitcointernet.co.za) (Client Quit)
[11:51:07] *** Joins: Vojtaeus (~vojta@user/vojtaeus)
[11:52:25] *** Joins: confuzius (~h_m@186-149-117-154.bitcointernet.co.za)
[11:57:37] *** Joins: sebatron (~sebatron@f250189.upc-f.chello.nl)
[12:42:17] *** Quits: rickyrick (~rickyrick@S01069050ca454523.vf.shawcable.net) (Ping timeout: 256 seconds)
[12:43:32] *** Joins: rickyrick (~rickyrick@S01069050ca454523.vf.shawcable.net)
[12:43:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:57:50] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d8-5.dhcp.inet.fi)
[13:05:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[13:10:17] *** Quits: rickyrick (~rickyrick@S01069050ca454523.vf.shawcable.net) (Ping timeout: 240 seconds)
[13:16:42] *** Joins: debianero (~debianero@60.132.134.77.rev.sfr.net)
[13:30:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:48:17] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d8-5.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:49:42] *** Joins: DnzAtWrk (~DnzAtWrk@1408.pc.puv.fi)
[13:57:49] *** Quits: DnzAtWrk (~DnzAtWrk@1408.pc.puv.fi) (Ping timeout: 256 seconds)
[13:58:57] *** Quits: confuzius (~h_m@186-149-117-154.bitcointernet.co.za) (Ping timeout: 256 seconds)
[14:02:25] <twrk> https://adv-r.hadley.nz/vectors-chap.html =) ; but yeh, gotta learn/relearn
[14:04:41] *** Joins: usr725635_ (~User@cpe-45-47-86-32.twcny.res.rr.com)
[14:20:50] *** Quits: computerfarmer (~thomas@p200300ca073550827bfdd47d9ad11895.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[14:21:13] *** Joins: computerfarmer (~thomas@p200300ca073550827bfdd47d9ad11895.dip0.t-ipconnect.de)
[14:34:27] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[15:07:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:29:11] *** Joins: DrNostril (~DrNostril@212.102.54.109)
[15:31:03] *** Quits: palasso (~palasso@user/palasso) (Read error: Connection reset by peer)
[15:32:54] *** Joins: palasso (~palasso@user/palasso)
[15:33:55] *** Quits: computerfarmer (~thomas@p200300ca073550827bfdd47d9ad11895.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[15:34:18] *** Joins: computerfarmer (~thomas@p200300ca073550827bfdd47d9ad11895.dip0.t-ipconnect.de)
[15:35:07] *** Quits: sebatron (~sebatron@f250189.upc-f.chello.nl) (Ping timeout: 256 seconds)
[16:10:47] <DrNostril> hiii all
[16:20:16] *** Joins: sebatron (~sebatron@f250189.upc-f.chello.nl)
[16:43:10] *** Joins: eliocamp (~eliocamp@user/eliocamp)
[16:54:06] <fendur> hi-o!
[16:56:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:00:28] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[17:09:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:19:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:33:33] *** Quits: DrNostril (~DrNostril@212.102.54.109) (Ping timeout: 256 seconds)
[17:35:10] *** Quits: eliocamp (~eliocamp@user/eliocamp) (Quit: The Lounge - https://thelounge.chat)
[17:36:12] *** Joins: eliocamp (~eliocamp@user/eliocamp)
[17:40:40] *** Quits: eliocamp (~eliocamp@user/eliocamp) (Client Quit)
[17:42:56] *** Joins: eliocamp (~eliocamp@user/eliocamp)
[17:59:16] *** Parts: mefistofeles (~mefistofe@user/mefistofeles) ()
[18:00:24] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:35:30] *** Quits: sebatron (~sebatron@f250189.upc-f.chello.nl) (Quit: Leaving)
[18:54:22] *** Joins: h_m (~h_m@186-149-117-154.bitcointernet.co.za)
[19:18:16] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Ping timeout: 250 seconds)
[19:18:36] *** Quits: computerfarmer (~thomas@p200300ca073550827bfdd47d9ad11895.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[19:18:50] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[19:24:13] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Ping timeout: 256 seconds)
[19:25:14] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[20:13:03] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0::7e04)
[20:24:54] *** Quits: Vojtaeus (~vojta@user/vojtaeus) (Quit: Odcházím...)
[21:01:06] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[21:57:13] *** Joins: rickyrick (~rickyrick@S01069050ca454523.vf.shawcable.net)
[22:06:51] *** Quits: twrk (~user@user/twrk) (Ping timeout: 256 seconds)
[23:03:36] *** Quits: h_m (~h_m@186-149-117-154.bitcointernet.co.za) (Ping timeout: 250 seconds)
[23:15:34] *** Joins: h_m (~h_m@186-149-117-154.bitcointernet.co.za)
