[00:01:16] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[00:01:35] *** Quits: magla (~gelignite@55d411d7.access.ecotel.net) (Quit: Stay safe!)
[00:04:02] *** Quits: trev (~trev@user/trev) (Quit: trev)
[00:05:56] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d4ed:85b6:d4b0:a14d)
[00:05:56] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d4ed:85b6:d4b0:a14d) (Changing host)
[00:05:56] *** Joins: skapata (~Skapata@user/skapata)
[00:10:52] *** Joins: unlink2 (~unlink@p200300ebcf023c003405202aedecaeca.dip0.t-ipconnect.de)
[00:11:19] *** Quits: entbsagtc^ (~entbsagtc@c-24-99-107-170.hsd1.ga.comcast.net) (Ping timeout: 260 seconds)
[00:15:02] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[00:16:17] *** Joins: vetinari (~steve@c-71-58-128-139.hsd1.pa.comcast.net)
[00:17:27] *** Quits: vetinari (~steve@c-71-58-128-139.hsd1.pa.comcast.net) (Quit: Konversation terminated!)
[00:18:14] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:24:44] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[00:25:05] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:28:37] *** Joins: vicfred (~vicfred@user/vicfred)
[00:29:00] *** Joins: vetinari (~steve@c-71-58-128-139.hsd1.pa.comcast.net)
[00:29:35] *** Quits: vetinari (~steve@c-71-58-128-139.hsd1.pa.comcast.net) (Client Quit)
[00:29:47] *** Quits: alch (~alch@151.82.123.99) (Read error: Connection reset by peer)
[00:30:20] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[00:30:36] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[00:31:55] *** Quits: MerrinX (~merrinx@ti0028a400-2319.bb.online.no) (Quit: WeeChat 3.4.1)
[00:32:04] *** Joins: bnchs (~bnchs@105.154.69.149)
[00:32:53] <bnchs> ,cc struct test_t { char buffer[UINT64_MAX]; int test22; } printf("%d", sizeof(struct test_t));
[00:32:54] <candide> bnchs: error: size of array 'buffer' is too large
[00:33:10] *** Joins: alch (~alch@151.82.236.159)
[00:33:14] <bnchs> thats what she said
[00:34:42] <bnchs> ,cc struct test_t { char buffer[UINT_MAX]; char buffer2[UINT_MAX]; int test22; } printf("%d", sizeof(struct test_t));
[00:34:44] <candide> bnchs: error: expected declaration specifiers or '...' before string constant
[00:34:46] <Bou> when it wraps you need two lines, one from the original robot r1 to the wrapped robot r2, and one from the original r2 to the wrapped r1
[00:34:57] <Bou> oops wrong window, ignore that xD
[00:35:05] <bnchs> no i won't
[00:35:21] *** Joins: magla (~gelignite@55d411d7.access.ecotel.net)
[00:36:03] *** Quits: tech_exorcist (13203@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[00:36:31] *** Joins: vetinari (~steve@c-71-58-128-139.hsd1.pa.comcast.net)
[00:36:39] *** Quits: vetinari (~steve@c-71-58-128-139.hsd1.pa.comcast.net) (Client Quit)
[00:37:37] *** Joins: vetinari (~steve@c-71-58-128-139.hsd1.pa.comcast.net)
[00:37:45] *** Quits: vetinari (~steve@c-71-58-128-139.hsd1.pa.comcast.net) (Client Quit)
[00:38:54] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Quit: Leaving)
[00:39:03] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[00:41:22] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:43:08] *** Joins: vetinari (~steve@c-71-58-128-139.hsd1.pa.comcast.net)
[00:43:58] <twkm> %zu for sizeof, not %d.
[00:44:25] *** Quits: vetinari (~steve@c-71-58-128-139.hsd1.pa.comcast.net) (Client Quit)
[00:45:05] *** Quits: Haxxa (~Haxxa@202-65-73-230.ip4.superloop.com) (Quit: Haxxa flies away.)
[00:45:51] *** Quits: kts (~kts@103.73.237.166) (Quit: Konversation terminated!)
[00:46:32] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:46:47] *** Joins: rgrinberg (~textual@177.248.158.166)
[00:47:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[00:48:31] *** Joins: Haxxa (~Haxxa@202-65-73-230.ip4.superloop.com)
[00:49:19] *** Lord_of_Life_ is now known as Lord_of_Life
[00:49:26] *** Joins: bebyx (~Thunderbi@user/bebyx)
[00:51:55] <fria> thanks guys bye for now
[00:51:59] *** Quits: fria (~siesta@112.207.33.219) (Quit: leaving)
[00:53:10] <bnchs> ,cc struct test_t { char buffer[UINT_MAX]; char buffer2[UINT_MAX]; int test22; }; printf("%zu", sizeof(struct test_t));
[00:53:12] <candide> bnchs: 8589934596
[00:53:28] <bnchs> god damn it 8 GB
[00:53:32] <bnchs> it needs to be more
[00:57:19] *** Joins: kaph (~kaph@151.35.76.11)
[00:58:04] *** Joins: dudek (~dudek@185.150.236.127)
[00:58:05] *** Joins: nshirelaptop (~nshire@user/nshire)
[00:58:29] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-35d1-5cea-e5cb-89b0.inf6.spectrum.com)
[01:00:13] *** Joins: reedrichards (~f@2607:f598:bbda:2e0:a95e:ffb1:e13a:8117)
[01:01:11] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-a49d-ba0a-a00c-69aa.inf6.spectrum.com) (Ping timeout: 245 seconds)
[01:01:34] *** Quits: f__ (~f@2607:f598:bbda:2e0:a648:17db:4595:6064) (Remote host closed the connection)
[01:02:56] <twkm> i suggest the int first followed by a fam, which you can then malloc to silly size.
[01:05:47] <bnchs> no
[01:06:00] <bnchs> it's more like attempting to integer overflow the sizeof result
[01:06:11] <bnchs> not trying to take up space in RAM
[01:11:28] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Quit: WeeChat 3.4.1)
[01:12:11] *** Joins: bnchs__ (~bnchs@105.154.86.183)
[01:12:31] *** Quits: LuKaRo (~LuKaRo@p4fc32a2c.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[01:13:33] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[01:13:43] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[01:13:52] <bnchs__> how do you define a macro in candide
[01:14:00] <bnchs__> i mean defining a macro single-line
[01:14:02] <candide> bnchs__: I don't know.
[01:15:12] *** Quits: bnchs (~bnchs@105.154.69.149) (Ping timeout: 260 seconds)
[01:15:51] <pragma-> bnchs__: #define ...\n
[01:15:57] <bnchs__> thanks
[01:17:05] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[01:19:50] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:21:16] <twkm> ahh, exploit crap.
[01:21:43] <bnchs__> it's not exploiting
[01:21:50] <bnchs__> it's called playing with the sandbox
[01:22:16] *** Joins: cx (~cx@user/cx)
[01:22:57] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:24:26] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 246 seconds)
[01:26:50] *** Quits: cx (~cx@user/cx) (Client Quit)
[01:27:21] *** Joins: broccoli_lover (~u0_a440@user/broccolli)
[01:32:16] *** Joins: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[01:34:05] *** Joins: bnchs (~bnchs@41.141.57.169)
[01:36:19] *** Quits: bnchs__ (~bnchs@105.154.86.183) (Ping timeout: 256 seconds)
[01:37:18] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[01:37:38] *** Joins: cebor (~cebor@user/cebor)
[01:40:13] *** Joins: bnchs__ (~bnchs@160.176.33.117)
[01:42:33] *** Quits: bnchs (~bnchs@41.141.57.169) (Ping timeout: 256 seconds)
[01:43:15] *** Joins: badsektor (~badsektor@user/badsektor)
[01:45:41] *** Joins: bnchs (~bnchs@41.251.96.195)
[01:46:06] *** Joins: eva_rn (~eva_rn@user/eva-rn/x-8602530)
[01:46:08] <eva_rn> Hello
[01:46:38] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[01:47:53] *** Quits: bnchs__ (~bnchs@160.176.33.117) (Ping timeout: 260 seconds)
[01:48:22] *** Joins: badsektor (~badsektor@user/badsektor)
[01:49:00] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:49:50] *** Joins: bnchs__ (~bnchs@196.74.32.151)
[01:52:20] *** Quits: bnchs (~bnchs@41.251.96.195) (Ping timeout: 252 seconds)
[01:53:00] *** Quits: geeknix (~pi@2001:e68:5432:716a:e867:9342:8ac3:7cf7) (Ping timeout: 240 seconds)
[01:53:29] *** Joins: bnchs (~bnchs@41.141.55.54)
[01:54:00] *** Joins: LuKaRo (~LuKaRo@p4fc32a2c.dip0.t-ipconnect.de)
[01:54:21] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[01:54:59] *** Joins: cebor (~cebor@user/cebor)
[01:55:05] *** Quits: bnchs__ (~bnchs@196.74.32.151) (Ping timeout: 252 seconds)
[01:55:41] *** Joins: e36freak (~e36freak@user/e36freak)
[01:57:04] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[01:57:25] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[01:59:48] <bnchs> hello
[01:59:48] <bnchs> ,cc #include </dev/urandom>
[01:59:55] <candide> bnchs: gcc: fatal error: Killed signal terminated program cc1
[02:00:02] <bnchs> well i knew
[02:03:59] <eva_rn> I am a bit in an existential crisis currently, and was wondering what I could do to overcome it, thank you
[02:04:41] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[02:04:48] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[02:05:15] *** Joins: dstein64- (~dstein64@dannyadam.com)
[02:06:24] *** Joins: bnchs__ (~bnchs@105.154.233.125)
[02:07:17] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 240 seconds)
[02:07:17] *** dstein64- is now known as dstein64
[02:07:28] <fossforus> ,cc #include <stdlib.h>\n int main(void) { char *c = malloc(1); *c = 'B'; putchar(*c); free(c); return 0; }
[02:07:32] <candide> fossforus: invalid character encountered while parsing JSON string, at character offset 25 (before "\x{1f}\\\"\\n"...") at /usr/local/bin/guest-gdb line 156, <GEN1> line 89.   [Exit 25]
[02:07:46] <fossforus> lol I forgot stdio anyways
[02:07:50] <fossforus> it probably includes it by default
[02:08:15] <Bou> eva_rn: you sure chose an interesting place to ask such a question
[02:08:43] <eva_rn> which place would that be then Bou ?
[02:08:45] *** Quits: jess (~jess@libera/staff/cat/jess) ()
[02:08:50] *** Quits: bnchs (~bnchs@41.141.55.54) (Ping timeout: 252 seconds)
[02:09:03] <bnchs__> something other than C
[02:09:15] <bnchs__> maybe emacs doctor
[02:09:28] *** Joins: geeknix (~pi@2001:e68:5432:518e:7d14:5ca5:9ed8:f278)
[02:09:38] <fossforus> emacs is written in elisp though
[02:09:49] <fossforus> we have to recommend C-certified medical professionals
[02:10:09] <eva_rn> well if anyone has any ideas and recommandations I would be grateful, thank you
[02:10:31] <Bou> ,cc #include "/dev/stdin"
[02:10:33] <candide> Bou: Success (no output).
[02:11:17] <fossforus> eva_rn: you didn't care what you felt like before you were born, so you'll probably feel like that after you die; conciousness is just a quantum illusion of awareness
[02:11:40] <fossforus> but it has C so it's pretty neat I think
[02:11:43] *** Quits: nshirelaptop (~nshire@user/nshire) (Ping timeout: 260 seconds)
[02:12:25] <eva_rn> the issue is that I can't control how I feel, I can't rationalize myself out of this, and I am quite lost on what to do, I have tried (a couple of days ago) some guided meditations, and to keep my mind of things, but what my beliefs are about the world make me feel quite bad...
[02:12:40] *** Joins: bnchs___ (~bnchs@160.177.197.44)
[02:13:03] <eva_rn> I don't quite understand what you mean by quantum illusion of awareness either..
[02:13:04] <fossforus> do your beliefs have to do with the superiority of weakly typed prodedural languages
[02:13:06] <twkm> i'm not sure discussing programming in c will help.
[02:13:31] <eva_rn> no, my beliefs are related to the absurdity of the world, and the futility of it mainly
[02:13:49] <fossforus> I mean I feel for you, but why in #c lol
[02:13:57] <eva_rn> IDK where else to ask...
[02:14:37] <eva_rn> many years ago, on freenode I asked about this in C and received some help, so I was thinking to try it agian, pigeon superstition ?
[02:14:37] <fossforus> the /list command might help you out with that :)
[02:14:52] <eva_rn> and what should I search for? I am not even sure...
[02:15:13] <eva_rn> even if it's a book recommandation or a video or something like that, I would really appreciate it...
[02:15:22] *** Quits: bnchs__ (~bnchs@105.154.233.125) (Ping timeout: 272 seconds)
[02:15:41] *** Joins: bnchs__ (~bnchs@196.64.48.166)
[02:15:44] <fossforus> k&r the c programming language second edition
[02:16:03] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[02:16:25] *** Joins: Viewday115 (~Viewday@user/viewday)
[02:16:29] <eva_rn> I don't mean related to C...
[02:17:59] <fossforus> Kernighan's beautiful words and code will pull you out of your existential spirals into the simple but powerful world of C
[02:18:15] *** Quits: bnchs___ (~bnchs@160.177.197.44) (Ping timeout: 260 seconds)
[02:19:06] *** Joins: bnchs___ (~bnchs@160.177.26.37)
[02:19:25] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving...)
[02:19:42] *** Quits: kenantu (~kenanmara@user/kenanmarasli) (Read error: Connection reset by peer)
[02:20:51] *** Joins: kenantu (~kenanmara@user/kenanmarasli)
[02:21:06] <fossforus> eva_rn: schedule  an appointment with a psychiatrist
[02:21:07] <Bou> but it is futile, on a large scale
[02:21:31] *** Quits: bnchs__ (~bnchs@196.64.48.166) (Ping timeout: 260 seconds)
[02:22:06] <eva_rn> if a phychiatrist knew how the world works they wouldn't be a psychiatrist
[02:22:13] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[02:22:14] *** Joins: bnchs (~bnchs@105.154.73.17)
[02:23:18] *** Joins: kaph (~kaph@151.35.76.11)
[02:24:04] <omegatron> find something that makes you laugh (book, movie, tv, game, programming, whatever) and stay with it until it's boring ; then choose another thing ; rinse and repeat .    (should work for the usual 70-90 years of lifespan)
[02:24:21] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:24:30] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[02:24:50] *** Joins: bnchs__ (~bnchs@196.74.42.252)
[02:24:52] *** Quits: bnchs___ (~bnchs@160.177.26.37) (Ping timeout: 272 seconds)
[02:25:07] <fossforus> eva_rn: well, you'd have someone to relate to then I suppose
[02:25:19] *** Quits: bnchs__ (~bnchs@196.74.42.252) (Remote host closed the connection)
[02:25:47] *** Joins: kaph (~kaph@151.35.76.11)
[02:26:26] <Bou> and don't think too big, you won't fix the world's problems but maybe you can make someone's day a bit better
[02:27:35] *** Quits: bnchs (~bnchs@105.154.73.17) (Ping timeout: 260 seconds)
[02:28:21] *** Joins: bnchs (~bnchs@160.177.9.55)
[02:29:59] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[02:31:17] *** Quits: noonien (~noonien@user/noonien) (Ping timeout: 256 seconds)
[02:31:50] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[02:33:07] *** Joins: ssh073 (~serg073@gateway/tor-sasl/serg073)
[02:33:12] <eva_rn> by paying them that is it? I don't see it
[02:33:18] *** Joins: bnchs__ (~bnchs@41.251.57.180)
[02:34:12] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[02:34:50] *** Joins: xa0s (~xa0s@mab.sdf.org)
[02:35:00] *** Quits: bnchs (~bnchs@160.177.9.55) (Ping timeout: 272 seconds)
[02:35:22] *** Quits: bnchs__ (~bnchs@41.251.57.180) (Remote host closed the connection)
[02:36:07] *** Joins: bnchs__ (~bnchs@41.251.57.180)
[02:38:08] *** Quits: kenantu (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:40:42] *** Quits: bnchs__ (~bnchs@41.251.57.180) (Ping timeout: 272 seconds)
[02:40:57] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 260 seconds)
[02:41:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:42:41] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[02:43:44] *** Quits: magla (~gelignite@55d411d7.access.ecotel.net) (Quit: Stay safe!)
[02:43:46] *** Joins: Satin (uid193953@user/Seten)
[02:44:51] *** Joins: kaph (~kaph@151.35.76.11)
[02:44:56] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 246 seconds)
[02:46:36] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-35d1-5cea-e5cb-89b0.inf6.spectrum.com) (Ping timeout: 240 seconds)
[02:48:59] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[02:50:53] *** Quits: mahmutov (~mahmutov@5.176.62.169) (Ping timeout: 260 seconds)
[02:51:45] *** Joins: freakazoid333 (~matt@2603-9000-cf03-86c3-701e-df04-66e4-7123.inf6.spectrum.com)
[02:51:46] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[02:52:41] *** Quits: eva_rn (~eva_rn@user/eva-rn/x-8602530) (Quit: leaving)
[02:54:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:00:15] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 260 seconds)
[03:03:48] *** Quits: Akuli (~Akuli@87-94-109-69.bb.dnainternet.fi) (Quit: Akuli)
[03:04:17] *** Quits: joev (~joev@user/joev) (Ping timeout: 260 seconds)
[03:05:07] *** Joins: joev (~joev@user/joev)
[03:06:02] *** Quits: bkhl (~bkhl@user/bkhl) (Ping timeout: 272 seconds)
[03:09:19] *** Joins: freakazoid343 (~matt@35.136.233.205)
[03:11:23] *** Quits: freakazoid333 (~matt@2603-9000-cf03-86c3-701e-df04-66e4-7123.inf6.spectrum.com) (Ping timeout: 250 seconds)
[03:12:37] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:13:32] *** Quits: dudek (~dudek@185.150.236.127) (Quit: Leaving)
[03:14:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[03:14:41] *** Joins: broccoli1 (~u0_a440@user/broccolli)
[03:14:49] *** Quits: broccoli_lover (~u0_a440@user/broccolli) (Read error: Connection reset by peer)
[03:16:00] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[03:17:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[03:19:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:19:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:19:43] *** Joins: wroathe (~wroathe@user/wroathe)
[03:21:51] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[03:22:16] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Remote host closed the connection)
[03:23:43] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[03:24:24] *** Quits: Enitin (~Enitin@82.180.145.230) (Remote host closed the connection)
[03:24:40] *** Joins: Enitin (~Enitin@82.180.145.230)
[03:25:13] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:25:48] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:25:51] *** Quits: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se) (Ping timeout: 252 seconds)
[03:26:33] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e)
[03:26:42] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e) (Remote host closed the connection)
[03:27:08] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:27:15] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Ping timeout: 240 seconds)
[03:27:56] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[03:28:13] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 260 seconds)
[03:29:23] *** Quits: xy0__ (~xy0@user/xy0) (Ping timeout: 260 seconds)
[03:31:15] *** Joins: f__ (~f@2607:f598:bbda:2e0:255d:54b9:90fd:de8c)
[03:31:43] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 260 seconds)
[03:32:17] *** Quits: adip (~adip@deu228.neoplus.adsl.tpnet.pl) (Ping timeout: 260 seconds)
[03:32:29] *** Quits: reedrichards (~f@2607:f598:bbda:2e0:a95e:ffb1:e13a:8117) (Remote host closed the connection)
[03:33:27] *** Quits: pizdets (~pizdets@183.182.115.164) (Ping timeout: 260 seconds)
[03:33:43] *** Joins: pizdets_ (~pizdets@183.182.115.90)
[03:38:43] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 260 seconds)
[03:41:13] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[03:45:56] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 272 seconds)
[03:47:36] *** Joins: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se)
[03:53:32] *** Quits: Tangent-Man (~Tang3nt-M@mutantalien.plus.com) (Ping timeout: 246 seconds)
[03:53:32] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 272 seconds)
[03:56:27] *** Quits: broccoli1 (~u0_a440@user/broccolli) (Quit: WeeChat 3.0.1)
[03:57:12] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[03:57:18] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 250 seconds)
[03:57:43] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Max SendQ exceeded)
[03:58:23] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[03:58:50] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Max SendQ exceeded)
[03:59:18] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[03:59:44] *** Joins: steve_ (~steve@ool-182c2b80.dyn.optonline.net)
[04:00:35] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-701e-df04-66e4-7123.inf6.spectrum.com)
[04:02:02] *** Joins: broccoli_lover (~u0_a440@user/broccolli)
[04:03:40] *** Quits: freakazoid343 (~matt@35.136.233.205) (Ping timeout: 272 seconds)
[04:06:20] <nomagno> https://termbin.com/dmzv
[04:06:31] <nomagno> Preemptiveness in C99, by terminating statements with $ instead of ;
[04:06:48] <nomagno> Do I get some prize for the most cursed code now? :D
[04:12:47] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e)
[04:13:17] *** Joins: broccoli1 (~u0_a440@user/broccolli)
[04:13:29] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-701e-df04-66e4-7123.inf6.spectrum.com) (Read error: Connection reset by peer)
[04:13:52] *** Joins: zacts (~zacts@user/zacts)
[04:14:09] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-701e-df04-66e4-7123.inf6.spectrum.com)
[04:14:21] *** Quits: broccoli_lover (~u0_a440@user/broccolli) (Read error: Connection reset by peer)
[04:18:59] *** Joins: parrott (~parrott@158-59-127-107.net.arlingtonva.us)
[04:19:15] *** Joins: nvrhome (~nvrhome@user/nvrhome)
[04:23:38] *** Quits: parrott (~parrott@158-59-127-107.net.arlingtonva.us) (Ping timeout: 260 seconds)
[04:24:49] *** Joins: parrott (~parrott@172.58.176.156)
[04:28:36] *** Quits: broccoli1 (~u0_a440@user/broccolli) (Ping timeout: 240 seconds)
[04:29:35] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 246 seconds)
[04:29:52] *** Quits: alch (~alch@151.82.236.159) (Read error: Connection reset by peer)
[04:31:32] *** Joins: Wulf (~Wulf@user/wulf)
[04:32:23] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[04:34:13] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[04:34:33] *** Joins: alch (~alch@151.68.233.52)
[04:36:07] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[04:36:31] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[04:38:07] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[04:38:20] *** Quits: joev (~joev@user/joev) (Ping timeout: 246 seconds)
[04:39:08] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[04:39:26] *** Joins: joev (~joev@user/joev)
[04:39:54] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:41:59] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[04:44:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:44:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:44:17] *** Joins: wroathe (~wroathe@user/wroathe)
[04:45:20] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 246 seconds)
[04:46:58] *** Joins: zer0x (~zer0x@58.186.50.203)
[04:47:42] *** Joins: nostar (~nostar@68.51.221.108)
[05:02:16] *** Joins: broccoli_lover (~u0_a440@user/broccolli)
[05:05:05] *** Quits: kektagen (~kektagen@kektagen.org) (Quit: Heading off - Have a good day)
[05:06:51] *** Quits: broccoli_lover (~u0_a440@user/broccolli) (Client Quit)
[05:07:06] *** Joins: broccoli_lover (~u0_a440@user/broccolli)
[05:07:52] *** Joins: zacts (~zacts@user/zacts)
[05:09:35] *** Quits: oriba (~oriba@dynamic-077-013-246-244.77.13.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:11:21] *** Joins: kektagen (~kektagen@kektagen.org)
[05:13:59] *** Quits: nvrhome (~nvrhome@user/nvrhome) (Quit: Leaving)
[05:17:56] *** Joins: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[05:21:12] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[05:23:44] *** Joins: reedrichards (~f@2607:f598:bbda:2e0:84ee:3130:effa:f115)
[05:23:55] *** Quits: f__ (~f@2607:f598:bbda:2e0:255d:54b9:90fd:de8c) (Remote host closed the connection)
[05:25:22] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 272 seconds)
[05:26:35] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e) (Remote host closed the connection)
[05:26:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e)
[05:32:56] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 246 seconds)
[05:39:19] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Remote host closed the connection)
[05:40:00] *** Joins: vicfred (~vicfred@user/vicfred)
[05:47:48] *** Quits: rgrinberg (~textual@177.248.158.166) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:49:11] *** Joins: bkhl (~bkhl@user/bkhl)
[05:49:23] *** Joins: vysn (~vysn@user/vysn)
[05:50:55] *** Joins: Matt|home (~matt@adsl-74-233-58-147.mia.bellsouth.net)
[05:53:25] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[05:58:47] *** Quits: Matt|home (~matt@adsl-74-233-58-147.mia.bellsouth.net) (Read error: Connection reset by peer)
[05:59:13] *** Joins: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:59:15] *** Joins: f__ (~f@2607:f598:bbda:2e0:657:d720:34a6:3539)
[06:01:03] *** Quits: reedrichards (~f@2607:f598:bbda:2e0:84ee:3130:effa:f115) (Remote host closed the connection)
[06:03:08] <mad[m]> does #c say to typedef structs or not? are there reasons not to that aren't obvious?
[06:04:17] <smallville7123_> can a union contain duplicate types?
[06:04:39] <smallville7123_> for example, union A { int a; int b; }
[06:05:09] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[06:06:57] <parrott> I don't see why not
[06:08:26] <smallville7123_> or are they allowed but simply redundant in a union?
[06:08:51] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[06:08:58] <smallville7123_> eg A will still be the size of an `int` regardless of how many `int` variables are inside it
[06:09:34] <smallville7123_> eg `A.a` and `A.b` would simply be alias for eachother in the context of the union ?
[06:10:06] <parrott> Is that something you want to do?
[06:10:19] <smallville7123_> parrott: what do you meaan?
[06:11:16] <smallville7123_> in godbolt i get this
[06:11:18] <smallville7123_>  mov    DWORD PTR [rbp-0x4],0x1
[06:11:20] <smallville7123_>  mov    DWORD PTR [rbp-0x4],0x2
[06:11:26] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 246 seconds)
[06:11:27] <parrott> Maybe b might change to another integer type later
[06:11:33] <smallville7123_> for a.a = 1; a.b = 1;
[06:11:53] <smallville7123_> parrott: if the user redefines the union?
[06:12:12] <parrott> Programmer
[06:12:13] <smallville7123_> as a union CANNOT be changed at runtime right?
[06:12:41] <parrott> Right. That wouldn't make sense to me
[06:13:28] *** Quits: broccoli_lover (~u0_a440@user/broccolli) (Read error: Connection reset by peer)
[06:13:32] <smallville7123_> so i guess C only allows duplicate types in the context of each duplicate is an ALIAS of the original type
[06:13:38] <smallville7123_> in a union
[06:14:12] <parrott> Mixing up words there, to me, but ok alias
[06:14:22] <smallville7123_> and for example, does NOT increase the size of the union if the union as 500 int members and no other members
[06:14:23] *** Joins: broccoli_lover (~u0_a440@user/broccolli)
[06:14:59] <smallville7123_> (eg the union would be sizeof(int) * 1 but a struct would be sizeof(int) * 500
[06:15:02] <parrott> Makes sense to me, but what is 0x1 and 0x2
[06:15:16] <smallville7123_> assembly output
[06:15:31] <parrott> I'm not sure you can say that about the size
[06:15:32] <smallville7123_> https://godbolt.org/z/cedTxrxjY
[06:16:10] <smallville7123_> parrott: it depends if the compiler pads the struct or does other things
[06:16:19] <parrott> Sure
[06:16:37] <smallville7123_> but assuming the struct is packed as a contingous serializable memory
[06:16:50] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[06:17:14] <parrott> I don't think C has packed, but I could be wrong
[06:17:37] <parrott> I think it's an extension
[06:17:38] *** Joins: Inline__ (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de)
[06:17:42] <smallville7123_> eg such as struct LONG { int hi; int lo; }; then a long cast to struct LONG would correctly fill in the hi and lo members of each int type assuming long is 64 and int is 32
[06:17:51] *** Joins: korg815 (~korg815@user/korg815)
[06:18:10] <smallville7123_> eg LONG.hi would consume first 32 bits and LONG.lo would consume next 32 bits
[06:18:17] *** Joins: Torr (~Torr@user/torr)
[06:18:21] <fossforus> you can use unsigned char for packed data
[06:18:54] <parrott> 🚬
[06:18:57] <smallville7123_> anyway, "the union would be sizeof(int) * 1 but a struct would be sizeof(int) * 500" right?
[06:19:28] <smallville7123_> with both a union and a struct containing 500 integer variables each
[06:20:27] *** Quits: Inline (~Inline@p200300cd473cee00b1553510cacfa527.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:20:52] <smallville7123_> eg
[06:20:53] <smallville7123_> union _500_ints { int _1; /* ... */ int _500; } // sizeof(_500_ints) == sizeof(int);
[06:21:11] <smallville7123_> struct _500_ints { int _1; /* ... */ int _500; } // sizeof(_500_ints) == (sizeof(int) * 500) ;
[06:26:30] <parrott> I don't think you can say that about the size
[06:26:43] *** Quits: constxd (~brad@142.134.78.128) (Ping timeout: 260 seconds)
[06:26:48] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Ping timeout: 272 seconds)
[06:29:01] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:31:48] <smallville7123_> how so?
[06:32:24] <smallville7123_> how does a union of bool and char behave ?
[06:33:01] *** Joins: morph (~morph@31.134.240.145)
[06:33:13] <smallville7123_> for example  union B { bool b; char c; }; B u; u.c = 'g'; // what is the value of u.b ?
[06:33:18] <parrott> Probably padded.  Also, what is a bool, actually?
[06:33:46] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 272 seconds)
[06:33:47] <parrott> Interesting question
[06:33:47] *** Joins: kaph (~kaph@pa-18-166-251.service.infuturo.it)
[06:34:19] *** Parts: mad[m] (~madhaloge@2001:470:69fc:105::1:ec20) ()
[06:34:27] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 260 seconds)
[06:35:28] *** Quits: JanC (~janc@user/janc) (Ping timeout: 260 seconds)
[06:38:02] *** Quits: kaph (~kaph@pa-18-166-251.service.infuturo.it) (Ping timeout: 246 seconds)
[06:38:45] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[06:38:58] *** Joins: kaph (~kaph@pa-18-166-251.service.infuturo.it)
[06:52:10] *** Joins: Soni (~quassel@autistic.space)
[06:52:43] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:33] *** Quits: morph (~morph@31.134.240.145) (Ping timeout: 260 seconds)
[06:55:18] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 272 seconds)
[06:55:19] *** Joins: morph (~morph@31.134.240.145)
[06:57:17] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.5)
[06:58:10] *** Quits: coaxing (~coaxing@user/coaxing) (Quit: WeeChat 3.4.1)
[06:59:32] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[07:00:29] *** Joins: joomla9 (uid543104@id-543104.lymington.irccloud.com)
[07:07:10] *** Joins: moog_ (~moog@107.126.53.66)
[07:09:34] *** Quits: moog__ (~moog@98.97.85.156) (Ping timeout: 260 seconds)
[07:11:26] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[07:12:34] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[07:13:12] *** Joins: teepee (~teepee@openscad/teepee)
[07:13:26] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:13:39] *** Quits: moog_ (~moog@107.126.53.66) (Ping timeout: 260 seconds)
[07:13:40] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[07:14:05] *** Joins: moog (~moog@98.97.85.156)
[07:15:08] <smallville7123_> is it UB to have a union where the size of each type differs?
[07:15:26] <smallville7123_> eg union A { int8_t a; int64_t b; } A;
[07:16:08] <smallville7123_> for example, would setting A.a cause A.b to contain 56 bits of undefined data and 8 bits of valid data?
[07:21:11] <smallville7123_> hmm
[07:21:13] <smallville7123_> "If the member used to access the contents of a union is not the same as the member last used to store a value, the object representation of the value that was stored is reinterpreted as an object representation of the new type (this is known as type punning). If the size of the new type is larger than the size of the last-written type, the contents of the excess bytes are unspecified (and may be a trap representation)"
[07:21:34] <smallville7123_> (      forgot docs exist at cppreference :)     )
[07:26:13] *** Quits: kaph (~kaph@pa-18-166-251.service.infuturo.it) (Ping timeout: 260 seconds)
[07:30:40] <parrott> Makes sense
[07:30:57] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[07:33:07] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[07:34:38] <smallville7123_> welp a union can be padded :/
[07:36:03] <smallville7123_> and https://en.cppreference.com/w/c/language/union doesnt seem to define what happens when such a padded union is defined
[07:36:04] <candide> Title of smallville7123_'s link: Union declaration - cppreference.com
[07:36:21] <smallville7123_> specifically how the memory contents are stored and accessed
[07:37:59] * smallville7123_ consults the 2018 C spec
[07:38:40] <parrott> I think it's just up to the compiler
[07:39:06] <parrott> Wouldn't make sense to define how to pad, to me
[07:39:24] *** Quits: morph (~morph@31.134.240.145) (Quit: leaving)
[07:49:11] <jmdaemon> When building a project both as a shared library and as an executable, what's the best way to go about doing this?
[07:50:29] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[07:51:58] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[07:53:28] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:54:20] *** Joins: gnoo_ (~gnoo@user/gnoo)
[07:57:13] *** Joins: teepee (~teepee@openscad/teepee)
[07:58:00] *** Quits: broccoli_lover (~u0_a440@user/broccolli) (Ping timeout: 260 seconds)
[07:59:44] *** Joins: broccoli_lover (~u0_a440@user/broccolli)
[07:59:51] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) ()
[07:59:58] <parrott> That's more about the build
[08:01:07] *** Joins: kaph (~kaph@pa-18-166-251.service.infuturo.it)
[08:01:44] *** Joins: reedrichards (~f@2607:f598:bbda:2e0:b38e:601:465d:ad78)
[08:01:49] *** Quits: f__ (~f@2607:f598:bbda:2e0:657:d720:34a6:3539) (Remote host closed the connection)
[08:04:45] *** Joins: f__ (~f@2607:f598:bbda:2e0:60be:a94a:837d:621e)
[08:05:12] *** Joins: yosef` (~user@223.73.113.250)
[08:05:25] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[08:06:25] <jmdaemon> I know but I don't know where else to ask this, I've been using a makefile and I wondered if there was a better way to build both targets
[08:06:28] *** Quits: reedrichards (~f@2607:f598:bbda:2e0:b38e:601:465d:ad78) (Remote host closed the connection)
[08:07:06] <parrott> Make one target build the other two
[08:08:13] *** Quits: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net) (Ping timeout: 260 seconds)
[08:11:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:11:46] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:11:46] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:11:46] *** Joins: wroathe (~wroathe@user/wroathe)
[08:16:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[08:22:44] *** Joins: reedrichards (~f@2607:f598:bbda:2e0:988c:bb92:1c27:16e9)
[08:22:45] *** Quits: f__ (~f@2607:f598:bbda:2e0:60be:a94a:837d:621e) (Remote host closed the connection)
[08:22:59] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:23:01] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[08:23:03] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com)
[08:24:38] *** Quits: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[08:25:08] *** Quits: soapsudsxx (~soapsudsx@209.221.40.154) (Ping timeout: 260 seconds)
[08:25:45] *** Joins: f__ (~f@2607:f598:bbda:2e0:304a:6918:b479:8ccd)
[08:26:55] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-701e-df04-66e4-7123.inf6.spectrum.com) (Ping timeout: 256 seconds)
[08:27:25] *** Quits: reedrichards (~f@2607:f598:bbda:2e0:988c:bb92:1c27:16e9) (Remote host closed the connection)
[08:29:44] *** Joins: reedrichards (~f@2607:f598:bbda:2e0:cc8d:144e:5ff3:765e)
[08:29:45] *** Quits: f__ (~f@2607:f598:bbda:2e0:304a:6918:b479:8ccd) (Remote host closed the connection)
[08:29:45] *** Quits: alch (~alch@151.68.233.52) (Read error: Connection reset by peer)
[08:32:02] *** Quits: parrott (~parrott@172.58.176.156) (Read error: Connection reset by peer)
[08:32:06] *** Quits: reedrichards (~f@2607:f598:bbda:2e0:cc8d:144e:5ff3:765e) (Remote host closed the connection)
[08:32:14] *** Joins: reedrichards (~f@2607:f598:bbda:2e0:bab7:add5:e173:8bba)
[08:32:19] *** Joins: parrott (~parrott@158-59-127-107.net.arlingtonva.us)
[08:33:57] *** Joins: alch (~alch@151.34.244.54)
[08:35:18] *** Quits: unlink2 (~unlink@p200300ebcf023c003405202aedecaeca.dip0.t-ipconnect.de) (Remote host closed the connection)
[08:37:51] *** Quits: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:37:51] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:37:57] <caze> "padded union"
[08:37:58] *** Quits: yosef` (~user@223.73.113.250) (Quit: ERC (IRC client for Emacs 28.0.50))
[08:39:46] *** Joins: yosef` (~user@223.73.113.250)
[08:40:16] *** Joins: ekathva (~ekathva@2001:999:250:8f1f:9d72:5a3d:d0:fe01)
[08:41:42] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 272 seconds)
[08:42:02] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[08:42:19] *** Joins: fe23 (~fe23@2409:8a34:465:ec80:5822:254e:7c4b:3f7)
[08:42:51] *** Joins: karakedi (~eAC53C340@user/karakedi)
[08:45:39] *** Joins: zacts (~zacts@user/zacts)
[08:46:08] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[08:48:05] *** Joins: ironman (~ironman@2405:201:1010:b051:aebb:ac9b:cf88:4008)
[08:48:43] <parrott> Trudat
[08:50:33] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[08:50:55] *** Joins: tejr (~tejr@user/tejr)
[08:52:09] *** Joins: hanzo (uid532183@user/hanzo)
[08:52:42] *** Quits: jgart (16dd2205e4@irc.cheogram.com) (Ping timeout: 260 seconds)
[08:52:50] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 250 seconds)
[08:53:08] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 246 seconds)
[08:53:20] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[08:53:39] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[08:54:41] *** Joins: seifeslimene_ (~seifeslim@197.2.10.72)
[08:55:38] *** Quits: seifeslimene (~seifeslim@102.156.121.226) (Ping timeout: 272 seconds)
[09:06:12] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-226-252.pa.qld.optusnet.com.au)
[09:06:15] *** Joins: f__ (~f@2607:f598:bbda:2e0:f23c:3b27:486b:31db)
[09:06:55] *** Quits: reedrichards (~f@2607:f598:bbda:2e0:bab7:add5:e173:8bba) (Remote host closed the connection)
[09:07:43] *** Quits: kurahaupo (~kurahaupo@pa49-182-76-6.pa.qld.optusnet.com.au) (Ping timeout: 260 seconds)
[09:09:31] *** Joins: zacts (~zacts@user/zacts)
[09:10:50] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-226-252.pa.qld.optusnet.com.au) (Ping timeout: 272 seconds)
[09:11:09] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[09:12:11] *** Quits: kaph (~kaph@pa-18-166-251.service.infuturo.it) (Read error: Connection reset by peer)
[09:12:27] *** Joins: kaph (~kaph@151.82.171.171)
[09:15:00] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[09:15:53] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 246 seconds)
[09:16:18] *** Quits: Ox000 (~jy@74.215.12.46) (Remote host closed the connection)
[09:16:38] *** lukedashjr is now known as luke-jr
[09:19:39] *** Quits: Inline__ (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:20:17] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:22:53] *** Joins: malina (~malina@user/malina)
[09:24:51] *** Quits: broccoli_lover (~u0_a440@user/broccolli) (Remote host closed the connection)
[09:31:42] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[09:31:58] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[09:35:43] *** Joins: the_lanetly_052 (~the_lanet@194.135.152.167)
[09:40:23] *** Quits: parrott (~parrott@158-59-127-107.net.arlingtonva.us) (Ping timeout: 246 seconds)
[09:41:26] *** Joins: parrott (~parrott@158-59-127-107.net.arlingtonva.us)
[09:46:56] *** Quits: gnoo_ (~gnoo@user/gnoo) (Quit: gnoo_)
[09:53:13] *** Quits: parrott (~parrott@158-59-127-107.net.arlingtonva.us) (Read error: Connection reset by peer)
[09:53:30] *** Quits: f__ (~f@2607:f598:bbda:2e0:f23c:3b27:486b:31db) (Remote host closed the connection)
[09:53:43] *** Joins: f__ (~f@2607:f598:bbda:2e0:3018:ada7:3d87:fdca)
[09:53:51] *** Joins: parrott (~parrott@158-59-127-107.net.arlingtonva.us)
[09:56:20] * smallville7123 wonders how a union deals with array indexing when reading/writing a smaller type from/to a larger type, given accessing past the allocated length can result in SIGV
[09:56:20] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[10:00:28] *** Joins: georgereynolds (~georgerey@203.229.204.205)
[10:01:37] <georgereynolds> Hello, I am trying to receive 20~30MB file from a socket and process it in memory. To achieve that, I am thinking of using large byte arrays (~50MB). Can I do this? Is this a bad practice? What are the alternative? Thanks.
[10:02:52] <smallville7123> if your allocating in heap, eg   char[<500_MB>] then use malloc instead
[10:03:06] <smallville7123> <50_MB> *
[10:03:33] <smallville7123> the heap is very limitted, usually 1 MB for theads and 8 MB for programs (may be smaller depending on OS)
[10:03:54] <smallville7123> other than that it is perfectly fine
[10:03:59] <georgereynolds> Of course. Thanks!
[10:05:02] <georgereynolds> Also, for a unix domain socket, what is the best size per send()?
[10:05:07] <nitrix> Allocated storage (malloc) is what normally people refer to as "the heap".
[10:05:17] <nitrix> I think you got your terminology mixed up smallville7123.
[10:06:03] <nitrix> Stack size is indeed limited, albeit in C we would call that automatic storage.
[10:07:14] *** Joins: reedrichards (~f@2607:f598:bbda:2e0:1652:8ba1:80a9:6583)
[10:07:26] *** Quits: f__ (~f@2607:f598:bbda:2e0:3018:ada7:3d87:fdca) (Remote host closed the connection)
[10:08:05] <nitrix> georgereynolds, It doesn't matter. A size too small or too large will get buffered or chunked as necessary. See Nagle's algorithm.
[10:09:00] <smallville7123> yea
[10:09:02] <smallville7123> :)
[10:09:40] <georgereynolds> nitrix: So in the client, I just sendfile() the data and in the server I can read(socket, 50mb buffer, 50mb in size) and forget about it?
[10:10:36] <nitrix> Yep. The functions tell you how much they were able to successful read/write. If they haven't sent/received the entire thing, you can call it again and resume with what's left over.
[10:11:13] <georgereynolds> Ah, right. Thanks.
[10:12:12] <nitrix> An absurdly small size like 1 will still work, it'll just bounce back-and-forth between kernel-space and user-space more often with syscalls/interrupts.
[10:14:09] <nitrix> On the other hand, a large size means that your application might spend a lot more time inside that call so if handling concurrent things on a single thread, you might have latency spikes because of it.
[10:15:24] <nitrix> For a multi-threaded application it's not a problem. The kernel properly schedules time slices for the threads accordingly.
[10:19:02] *** Joins: trev (~trev@user/trev)
[10:20:37] <georgereynolds> Should I do 4096 or 8192 or the size left? it is not a multithreaded application.
[10:20:58] <nitrix> Depends.
[10:21:37] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com) (Read error: Connection reset by peer)
[10:21:50] <nitrix> Is it important that your application treats every requests fairly and sends chunks of 4096 to each connection one at a time, or it can afford spending a couple milliseconds on one connection to send the whole file?
[10:22:14] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com)
[10:23:25] <georgereynolds> It will be a 1:1 communication. No need to consider load balancing.
[10:23:53] <georgereynolds> Come to think of it, I think it will be a multithreaded application.
[10:24:25] <nitrix> Then I'd just pass whatever size remains to be sent. Let the kernel send what it wants/can, repeatedly ask again with what's left.
[10:25:00] *** Joins: Jong (~Jong@2620:10d:c090:400::5:6efd)
[10:25:06] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:25:13] <georgereynolds> The application will receive raw RGB values (frames) from the socket, receives it, create an AVFrame and pass it to the encoder. If the encoding process blocks, I would like to receive the next frame with another thread.
[10:25:34] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 272 seconds)
[10:25:57] <nitrix> Mhh. Probably pthread and mutexes for that.
[10:26:19] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[10:26:32] <georgereynolds> In this scenario, would it be okay to pass whatever size remains to be sent?
[10:27:17] <nitrix> Yeah with a thread you'd always send the maximum size left, as you don't really care whether the call taking time blocks the thread.
[10:27:19] *** Quits: zer0x (~zer0x@58.186.50.203) (Ping timeout: 260 seconds)
[10:28:47] *** Quits: __slate__ (~slate@2a01:4f8:c0c:f0a9::1) (Quit: quit)
[10:28:52] <georgereynolds> Right, thanks.
[10:30:03] *** Joins: cuhela (~cuhela@188.119.45.227)
[10:31:51] <nitrix> georgereynolds, Basically, I'm asking myself what's the worst case scenario? (A) a large 100GB file + (B) a slow 1kb/s connection. Would this bog down the other connections?
[10:32:55] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:81cd:91a0:b28e:654e) (Quit: Quit)
[10:32:55] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 260 seconds)
[10:33:31] *** Joins: Enitin (~Enitin@82.180.145.225)
[10:33:39] <georgereynolds> Are you saying that I should consider other programs bandwidth needs?
[10:36:43] <nitrix> To be clear, it's not the size of what you send that matters, it's how you iterate/loop.
[10:37:34] <georgereynolds> Okay.... I am very new to C programming so you might want to give me some context.
[10:37:41] <nitrix> A slow connection eventually fills the buffer for that socket on the network card, meaning writes to it eventually return 0 and don't make progress. So it's important that you iterate through all the connections to try to send them data and continue with a different connection after, rather than stick on the same connection to send the complete file.
[10:38:43] *** Quits: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net) (Ping timeout: 260 seconds)
[10:38:58] <georgereynolds> Ah, got it. Although it's a local connection with a unix socket but I'll keep that in mind.
[10:39:57] <nitrix> The "looping through all connections" can be achieved by having one thread per connection, so something like select/poll/epoll mechanism.
[10:40:04] <nitrix> *or
[10:40:13] *** Joins: yetimach (~yetimach@181.64.255.202)
[10:42:13] * nitrix afk
[10:42:48] *** Quits: Enitin (~Enitin@82.180.145.225) (Ping timeout: 260 seconds)
[10:43:12] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[10:44:58] *** Joins: adip (~adip@deu228.neoplus.adsl.tpnet.pl)
[10:45:25] *** Quits: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu) (Ping timeout: 256 seconds)
[10:46:07] *** Quits: yetimach (~yetimach@181.64.255.202) (Quit: WeeChat 3.5)
[10:46:27] *** Joins: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu)
[10:48:15] *** Joins: f__ (~f@2607:f598:bbda:2e0:4f3e:c180:1e1f:b114)
[10:49:13] *** Quits: reedrichards (~f@2607:f598:bbda:2e0:1652:8ba1:80a9:6583) (Remote host closed the connection)
[10:50:57] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com) (Read error: Connection reset by peer)
[10:51:01] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[10:51:37] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com)
[10:51:50] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[10:53:54] <smallville7123> welp
[10:54:35] <smallville7123> if (littleEndian) for (int i = 0; i < s; i++) array[i] = tmp[i];
[10:54:36] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 250 seconds)
[10:54:37] <smallville7123> else for (int i = s-1; i >= 0; i--) array[i] = tmp[i];
[10:54:53] <smallville7123> is this correct for little endian and big endian?
[10:57:39] <Amun-Ra> depends, is data in tmp in LE or BE?
[10:59:29] <smallville7123> it is the same as the host
[11:00:24] *** Quits: kaph (~kaph@151.82.171.171) (Ping timeout: 272 seconds)
[11:01:00] <smallville7123> specifically i obtain the data via `*(int16_t*)array`
[11:01:47] <smallville7123> and i store it as the above if else with byte * tmp = (byte*)&value;    and s = 2
[11:02:07] <smallville7123> but the code may run on a LE or BE host
[11:02:58] <Amun-Ra> does tmp contain multiple values of int16_t?
[11:03:00] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[11:03:09] <smallville7123> value is int16_t
[11:03:12] <caze> smallville7123: Why are you doing that?
[11:03:14] <Amun-Ra> only one?
[11:03:17] <smallville7123> yes
[11:03:29] <smallville7123> tho it can also be a int16_t[]
[11:03:43] <smallville7123> (which i am not ready to figure out how to set/get yet)
[11:05:46] <caze> smallville7123: There's probably a better way. What is the type of the value you're casting from?
[11:06:04] <smallville7123> from int16_t to byte[] and vice versa
[11:06:11] <caze> What is byte[]
[11:06:20] <smallville7123> equivilant to int8_t
[11:06:28] <smallville7123> equivilant to int8_t[]
[11:06:29] <Amun-Ra> that condition isn't correct, tmp can have be/le order, just checking for le won't work; I'd just use array[i] = val & 0xff; array[i+1] = val >> 16; for LE and vice versa
[11:06:37] <caze> Just use << 8
[11:07:33] <smallville7123> basically im trying to emulate a union
[11:07:57] <caze> Why?
[11:08:14] <caze> Why is a union insufficient?
[11:08:39] <caze> Did you figure out your earlier questions about unions?
[11:08:42] <smallville7123> for fun :)
[11:09:27] *** Quits: fbiagent (~fbiagent@user/fbiagent) (*.net *.split)
[11:09:27] *** Quits: johnnyreb (~tth@user/johnnyreb) (*.net *.split)
[11:09:27] *** Quits: segnior (segnior@user/segnior) (*.net *.split)
[11:09:27] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[11:09:27] *** Quits: Crocodillian (~Crocodill@comply.posixsh.org) (*.net *.split)
[11:09:27] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (*.net *.split)
[11:09:27] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[11:09:27] *** Quits: beencubed_ (~beencubed@209.131.238.248) (*.net *.split)
[11:09:27] *** Quits: cnsunyour (~sunyour@129.226.182.99) (*.net *.split)
[11:09:27] *** Quits: triv_ (wx37d3v3nl@morgulis.trivcraft.com) (*.net *.split)
[11:09:27] *** Quits: gce108 (~gce@user/gce108) (*.net *.split)
[11:09:27] *** Quits: dasrael (~rabbit@user/dasrael) (*.net *.split)
[11:09:27] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (*.net *.split)
[11:09:27] *** Quits: cren (cren@tilde.team) (*.net *.split)
[11:09:27] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (*.net *.split)
[11:09:27] *** Quits: sandman13 (sandman13@sandman13.jujube.ircnow.org) (*.net *.split)
[11:09:27] *** Quits: mcf (~mforney@netbsd/developer/mcf) (*.net *.split)
[11:09:27] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[11:09:27] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[11:09:27] *** Quits: koisoke (xef4@epilogue.org) (*.net *.split)
[11:09:27] *** Quits: con3 (~con3@2604:a880:4:1d0::be:d000) (*.net *.split)
[11:09:27] *** Quits: alvarezp (quassel@2600:3c01::f03c:91ff:fee5:6d8d) (*.net *.split)
[11:09:27] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[11:09:27] *** Quits: trn (jhj@sourcehut/user/trn) (*.net *.split)
[11:09:27] *** Quits: aosync (~aws@mx1.aosync.me) (*.net *.split)
[11:09:27] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[11:09:27] *** Quits: Nitrousoxide_ (~msdos@user/nitrousoxide) (*.net *.split)
[11:09:27] *** Quits: ndorf (~nd@ob.noxio.us) (*.net *.split)
[11:09:27] *** Quits: esselfe (~steph@user/esselfe) (*.net *.split)
[11:09:27] *** Quits: omnihil_ (hermes@camel.ethereal.net) (*.net *.split)
[11:09:27] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[11:09:27] *** Quits: nisstyre (wes@user/nisstyre) (*.net *.split)
[11:09:27] *** Quits: travankor (travankor@user/travankor) (*.net *.split)
[11:09:27] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (*.net *.split)
[11:09:27] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (*.net *.split)
[11:09:27] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[11:09:27] *** Quits: kman (sid74249@id-74249.hampstead.irccloud.com) (*.net *.split)
[11:09:27] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[11:09:27] *** Quits: kfv (~kfv@mail.kfv.io) (*.net *.split)
[11:09:27] *** Quits: zx2c4 (sid204921@gentoo/developer/zx2c4) (*.net *.split)
[11:09:27] *** Quits: TallonRain (sid214799@user/tallonrain) (*.net *.split)
[11:09:28] *** Quits: elichai2 (sid212594@2a03:5180:f:4::3:3e72) (*.net *.split)
[11:09:28] *** Quits: nukedclx (nukedclx@shell.k4be.pl) (*.net *.split)
[11:09:28] *** Quits: noahmg123 (sid89117@id-89117.ilkley.irccloud.com) (*.net *.split)
[11:09:28] *** Quits: Albright (~Albright@149.28.13.173) (*.net *.split)
[11:09:28] *** Quits: sdk_ (~x@shell.codevoid.de) (*.net *.split)
[11:09:28] *** Quits: LIERO (~no@user/liero) (*.net *.split)
[11:09:28] *** Quits: nowz (~nowz@user/nowz) (*.net *.split)
[11:09:28] *** Quits: timmot (~timmot@207.148.85.201) (*.net *.split)
[11:09:28] *** Quits: DLange (~DLange@about/linux/staff/DLange) (*.net *.split)
[11:09:28] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (*.net *.split)
[11:09:34] *** Joins: koisoke (xef4@epilogue.org)
[11:09:36] *** Joins: g0z (gauze@entropy.tmok.com)
[11:09:37] *** Joins: alvarezp (quassel@2600:3c01::f03c:91ff:fee5:6d8d)
[11:09:37] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[11:09:37] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[11:09:37] *** Joins: triv (jhjx4k3y13@morgulis.trivcraft.com)
[11:09:38] *** Joins: segnior (segnior@user/segnior)
[11:09:44] *** Joins: LIERO (~no@vmi473477.contaboserver.net)
[11:09:46] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 250 seconds)
[11:09:50] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[11:09:53] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[11:09:55] *** Joins: aosync (~aws@mx1.aosync.me)
[11:09:56] *** Joins: ndorf (~nd@ob.noxio.us)
[11:09:56] <smallville7123> also cus C# doesnt have a real 1:1 equivilant of a C union
[11:10:00] *** Joins: DLange (~DLange@about/linux/staff/DLange)
[11:10:00] *** Joins: nisstyre (wes@2600:3c00::f03c:91ff:fe69:7f3d)
[11:10:02] *** Joins: kman (sid74249@id-74249.hampstead.irccloud.com)
[11:10:04] *** Joins: sdk_ (sdk@shell.codevoid.de)
[11:10:04] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[11:10:05] *** Joins: cnsunyour (~sunyour@129.226.182.99)
[11:10:05] *** Joins: Crocodillian (~Crocodill@comply.posixsh.org)
[11:10:09] *** Joins: omnihil (~hermes@72.52.96.202)
[11:10:09] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[11:10:10] *** Joins: TallonRain (sid214799@2a03:5180:f:2::3:470f)
[11:10:10] *** Joins: nowz (~nowz@194.136.126.35)
[11:10:17] *** Joins: noahmg123 (sid89117@2a03:5180:f:3::1:5c1d)
[11:10:19] *** Joins: johnnyreb (~tth@dsl-208-102-127-254.fuse.net)
[11:10:25] *** Joins: trn (jhj@2600:3c00::f03c:92ff:feb2:b9ef)
[11:10:26] *** Quits: TallonRain (sid214799@2a03:5180:f:2::3:470f) (Changing host)
[11:10:26] *** Joins: TallonRain (sid214799@user/tallonrain)
[11:10:32] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[11:10:36] *** Joins: joji (~jojo@86.4.72.180)
[11:10:39] *** Joins: gce108 (~gce@user/gce108)
[11:10:41] <caze> > is it UB to have a union where the size of each type differs?
[11:10:43] <smallville7123> and i want to try to implement a C union in C# that conforms to the C spec of union
[11:10:47] *** Quits: nowz (~nowz@194.136.126.35) (Changing host)
[11:10:47] *** Joins: nowz (~nowz@user/nowz)
[11:10:49] *** Joins: elichai2 (sid212594@id-212594.hampstead.irccloud.com)
[11:10:50] *** Quits: trn (jhj@2600:3c00::f03c:92ff:feb2:b9ef) (Changing host)
[11:10:50] *** Joins: trn (jhj@sourcehut/user/trn)
[11:10:51] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[11:10:55] *** Joins: zx2c4 (sid204921@gentoo/developer/zx2c4)
[11:10:58] *** Joins: kfv (~kfv@mail.kfv.io)
[11:11:00] *** Joins: DCTWD (~dc@uz.utmappro.com)
[11:11:01] *** Joins: packet_lozenge (~packet_lo@cpe-107-15-195-50.nc.res.rr.com)
[11:11:01] <caze> No. That would greatly cut back on the utility of unions.
[11:11:02] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[11:11:04] *** Quits: packet_lozenge (~packet_lo@cpe-107-15-195-50.nc.res.rr.com) (Changing host)
[11:11:04] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[11:11:06] *** Joins: con3 (~con3@2604:a880:4:1d0::be:d000)
[11:11:11] <smallville7123> caze: "If the size of the new type is larger than the size of the last-written type, the contents of the excess bytes are unspecified"
[11:11:12] *** Joins: Karyon (~Karyon@user/karyon)
[11:11:14] *** Joins: Albright (~Albright@2001:19f0:8001:ca4:8c97:5c4b:e881:150b)
[11:11:15] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[11:11:17] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[11:11:18] <caze> Did you read the C spec?
[11:11:24] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[11:11:27] *** Joins: sandman13 (sandman13@jujube.ircnow.org)
[11:11:32] <smallville7123> caze: how so?
[11:11:35] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[11:11:54] *** Joins: ai (nukedclx@shell.k4be.pl)
[11:12:05] <caze> smallville7123: You lose the flexibility of having a union of differently sized types.
[11:12:12] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[11:12:17] <smallville7123> how?
[11:12:21] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[11:12:48] <caze> You couldn't do: union { char c; double b; };
[11:12:56] <smallville7123> im implementing it as a runtime allocated byte[] array
[11:13:06] *** Joins: miqztee (~username@user/miqztee)
[11:13:11] *** Quits: wrongt (~wrongt@user/wrongt) (*.net *.split)
[11:13:11] *** Quits: ghenry (~ghenry@ghenry.plus.com) (*.net *.split)
[11:13:11] *** Quits: Biolunar (~bio@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (*.net *.split)
[11:13:11] *** Quits: MrC (Ben@mrbenc.net) (*.net *.split)
[11:13:11] *** Quits: divine (~divine@2001:470:8247:1::31) (*.net *.split)
[11:13:11] *** Quits: summonner (~summonner@188.24.18.149) (*.net *.split)
[11:13:11] *** Quits: bionade24 (~bionade24@2a03:4000:33:45b::1) (*.net *.split)
[11:13:11] *** Quits: krzych (krzych@nroot.pl) (*.net *.split)
[11:13:11] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[11:13:11] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[11:13:12] *** Quits: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b) (*.net *.split)
[11:13:12] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[11:13:12] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[11:13:12] *** Quits: Bou (sid274843@user/bou) (*.net *.split)
[11:13:12] *** Quits: Celelibi (celelibi@user/celelibi) (*.net *.split)
[11:13:12] *** Quits: illustris (sid211748@id-211748.ilkley.irccloud.com) (*.net *.split)
[11:13:12] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[11:13:12] *** Quits: eqw (~eqw@31.134.178.99) (*.net *.split)
[11:13:12] *** Quits: mcinglis (~mcinglis@user/mcinglis) (*.net *.split)
[11:13:12] *** Quits: greeb (~greeb@blahblahblah.anime.horse) (*.net *.split)
[11:13:12] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[11:13:12] *** Quits: Emil (emil@emil.fi) (*.net *.split)
[11:13:12] *** Quits: Seng (~nick@hurtig.ninja) (*.net *.split)
[11:13:16] <caze> I'm not talking about C#.
[11:13:19] *** Joins: Seng (~nick@hurtig.ninja)
[11:13:20] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[11:13:22] *** Joins: MrC (Ben@mrbenc.net)
[11:13:24] *** Joins: divine (~divine@2001:470:8247:1::31)
[11:13:24] *** Joins: eqw (~eqw@31.134.178.99)
[11:13:24] *** Joins: bionade24 (~bionade24@2a03:4000:33:45b::1)
[11:13:26] *** Joins: wrongt (~wrongt@is.here.for-some.fun)
[11:13:29] *** Joins: Bou (sid274843@user/bou)
[11:13:29] *** Joins: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b)
[11:13:32] <caze> Basically, assume that I will ignore anything you say about C#.
[11:13:32] *** Joins: illustris (sid211748@id-211748.ilkley.irccloud.com)
[11:13:37] <smallville7123> ok
[11:13:39] *** Joins: summonner (~summonner@188.24.18.149)
[11:13:41] <smallville7123> [16:42] <caze> You couldn't do: union { char c; double b; };
[11:13:42] <smallville7123> why
[11:13:44] *** Joins: celphi (sid97751@user/celphi)
[11:13:45] *** Joins: greeb (~greeb@blahblahblah.anime.horse)
[11:13:48] *** Joins: Emil (~emil@emil.fi)
[11:13:51] *** Joins: remexre (~remexre@user/remexre)
[11:13:58] <smallville7123> C DOES allow such
[11:13:59] *** Joins: Exa (exa@irc.moe)
[11:14:04] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[11:14:05] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[11:14:07] *** Quits: wrongt (~wrongt@is.here.for-some.fun) (Changing host)
[11:14:07] *** Joins: wrongt (~wrongt@user/wrongt)
[11:14:08] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[11:14:10] <smallville7123> in both gcc and clang
[11:14:13] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[11:14:20] <caze> smallville7123: You asked: > is it UB to have a union where the size of each type differs?
[11:14:21] <smallville7123> and in the specs
[11:14:32] *** Joins: mcinglis (~mcinglis@user/mcinglis)
[11:14:34] <caze> smallville7123: My response is: <caze> No. That would greatly cut back on the utility of unions.
[11:14:34] <smallville7123> caze: yes, and
[11:14:39] <smallville7123> [16:41] <smallville7123> caze: "If the size of the new type is larger than the size of the last-written type, the contents of the excess bytes are unspecified"
[11:14:45] *** Joins: timmot (~timmot@207.148.85.201)
[11:14:46] *** Joins: koolazer (~koo@user/koolazer)
[11:15:12] *** Joins: zer0x (~zer0x@58.186.50.203)
[11:15:12] <caze> smallville7123: I think you forgot what your question was, and are therefore misinterpreting my answer to your question.
[11:15:34] <smallville7123> ok
[11:15:57] <caze> smallville7123: You asked if it is _UB_. My response is, no, it is not UB.
[11:16:03] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[11:16:05] <smallville7123> ok
[11:16:07] *** Joins: eddybilley (~freddieti@217.119.232.174)
[11:16:08] *** Quits: nisstyre (wes@2600:3c00::f03c:91ff:fe69:7f3d) (Quit: WeeChat 3.4)
[11:16:17] *** Joins: nisstyre (wes@user/nisstyre)
[11:16:27] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[11:16:55] <caze> > as a union CANNOT be changed at runtime right?
[11:17:02] <smallville7123> right
[11:17:02] <caze> Statically typed language.
[11:17:28] *** Quits: cuhela (~cuhela@188.119.45.227) (Remote host closed the connection)
[11:18:01] *** Quits: LIERO (~no@vmi473477.contaboserver.net) (Changing host)
[11:18:01] *** Joins: LIERO (~no@user/liero)
[11:18:18] *** Joins: Celelibi (celelibi@user/celelibi)
[11:18:18] *** Joins: krzych (krzych@nroot.pl)
[11:18:42] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[11:19:28] <caze> <smallville7123_> welp a union can be padded :/
[11:19:34] <caze> That is what makes arrays of unions possible.
[11:20:21] <caze> * smallville7123 wonders how a union deals with array indexing when reading/writing a smaller type from/to a larger type, given accessing past the allocated length can result in SIGV
[11:20:50] <caze> Padding is how a union deals with array indexing when reading/writing a smaller type from/to a larger type.
[11:24:55] <smallville7123> https://godbolt.org/z/4sfzWET6W will this work the same regardless of the host endianess ?
[11:26:20] <caze> smallville7123: No.
[11:27:38] <nitrix> What the heck is that. `(int8_t*)&data`. The variable `data` already has the type `int_t**`. Now with the `&` you get a `int8_t**` which you cast to an `int8_t`.
[11:28:20] <nitrix> How many times do we tell people not to cast. You've no idea how to walk, don't play with guns.
[11:29:03] <nitrix> Small type, first type should read `int8_t*`.
[11:29:14] <nitrix> Err, typo.
[11:29:48] <dave0> a priest, a bishop, and a rabbit walk into a bar and the rabbit says "i think i'm a typo"
[11:30:01] <nitrix> God, so much wrong with my sentence, I'm rushing too much.
[11:30:47] <nitrix> The expression `(int8_t*)&data`, the variable `data` already has type `int8_t*`, which with the `&` becomes an `int8_t**`, then converted back to `int8_t*` in a UB manner.
[11:31:45] <nitrix> My good deed is done, now I can go to bed.
[11:32:01] <dave0> nite nitrix
[11:32:12] <nitrix> o/
[11:32:15] <caze> nitrix: int16_t data = 8716;
[11:32:47] <nitrix> Oh, I was looking at UNION.data.
[11:33:02] <nitrix> Unnecessary cast then.
[11:33:10] <caze> Yup.
[11:33:57] <nitrix> Well it's from 16 to 8, I guess. My god. Okay, sorry, I'm leaving, it's 3am.
[11:35:35] <smallville7123> https://stackoverflow.com/questions/2100331/macro-definition-to-determine-big-endian-or-little-endian-machine
[11:35:46] <smallville7123> why are there so many ways to detect endianess ;-;
[11:36:23] <caze> smallville7123: You don't need to care about endianess.
[11:36:37] <smallville7123> [16:54] <smallville7123> https://godbolt.org/z/4sfzWET6W will this work the same regardless of the host endianess ?
[11:36:38] <smallville7123> [16:56] <caze> smallville7123: No.
[11:36:59] <dave0> smallville7123: sometimes it's handy but it's not portable
[11:37:01] <caze> smallville7123: Yes, because you broke it.
[11:37:17] <smallville7123> how?
[11:37:37] <smallville7123> [16:57] <nitrix> What the heck is that. `(int8_t*)&data`. The variable `data` already has the type `int_t**`. Now with the `&` you get a `int8_t**` which you cast to an `int8_t`
[11:37:51] <smallville7123> reinterprets int16_t* as int8_t*
[11:37:59] *** Quits: Ryozuki (~Ryozuki@user/ryozuki) (Quit: bye)
[11:38:02] <caze> smallville7123: By assuming a particular endianess.
[11:38:31] *** Joins: Ryozuki (~Ryozuki@edgarluque.com)
[11:38:32] *** Quits: Ryozuki (~Ryozuki@edgarluque.com) (Changing host)
[11:38:32] *** Joins: Ryozuki (~Ryozuki@user/ryozuki)
[11:38:53] <smallville7123> is there a simpler way to detect host endianess other than this?
[11:38:55] <smallville7123> return (union { uint16_t u16; unsigned char c; }){ .u16 = 1 }.c == 0;
[11:39:17] *** Joins: aradesh (~aradesh@user/aradesh)
[11:39:29] <smallville7123> preferably at runtime
[11:39:51] <smallville7123> and not relying on endian.h or others
[11:40:04] <nitrix> You only need to worry about endianness when you serialize or de-serialize structed data or integers into a series of bytes, typically for networking or file persistence.
[11:40:33] <caze> smallville7123: You don't need to care about endianess. https://godbolt.org/z/YvdKc33Ec
[11:41:05] <caze> smallville7123: You broke it because youre set and get functions don't retrieve the bytes in a symmetric way.
[11:41:13] <nitrix> In that case, a couple bitwise operations are usually enough to do the job. You don't need to detect the endianness, nor type punning and the union is most likely useless as well.
[11:41:28] <caze> smallville7123: Make them work the same way, and the endianess will "cancel" out.
[11:43:33] <dave0> ,cc static const union { int x; char little; } endian = { 1 }; puts(endian.little ? "little" : "big");
[11:43:35] <candide> dave0: little
[11:43:48] <dave0> what's what i use when i'm optimizing for amd64
[11:43:56] <dave0> far from portable
[11:44:20] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[11:44:51] <caze> smallville7123: Do you see the change that I made? https://godbolt.org/z/YvdKc33Ec
[11:45:39] *** Joins: Alhazred (~Alhazred@45.129.56.151)
[11:46:23] <caze> smallville7123: Your set function writes the first octet, and then it writes teh second octet. Your get function should work the same way. It should read the first octet, and then it reads the second octet. But you're attempting to just do return *(int16_t*) src; and that's where endianess gets in the mix.
[11:46:59] <caze> (also, memcpy is a thing)
[11:48:04] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[11:49:02] <smallville7123> how do i fix this?
[11:49:03] <smallville7123> initialization of 'int16_t' {aka 'short int'} from 'int16_t *' {aka 'short int *'} makes integer from pointer without a cast
[11:50:02] <caze> smallville7123: It depends on what caused it.
[11:50:17] <smallville7123> #define get(T) (T*) UNION.data
[11:50:41] <smallville7123> int16_t value = get(int16_t);
[11:50:54] <caze> Okay, just ignore everything I just wrote, and the code fix I gave you.
[11:51:13] <caze> And the explanation for how you broke endianess.
[11:51:56] *** Quits: dacav (~dacav@h94-245-9-203.cust.a3fiber.se) (Remote host closed the connection)
[11:53:03] *** Joins: Rounin (~david@84.212.130.215)
[11:53:16] <caze> And instead, attempt to make your broken version into a macro.
[11:53:38] *** Joins: iomari891 (~iomari891@197.210.77.153)
[11:54:29] <smallville7123> https://godbolt.org/z/M4c5G4zTq this is my current code
[11:54:59] <caze> https://godbolt.org/z/YvdKc33Ec this is my current code
[11:57:36] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:01:38] <smallville7123> https://godbolt.org/z/oravn5bMM your code breaks with int32 and so does mine
[12:01:48] <smallville7123> and i cant figure out how to get it to work
[12:02:09] <smallville7123> https://godbolt.org/z/4bEWxqbzo
[12:02:18] <caze> smallville7123: That is because you only copy two bytes.
[12:03:05] <smallville7123> https://godbolt.org/z/vdv7Wdh1d *
[12:05:36] <caze> smallville7123: Did you seriously not read anything I wrote earlier?
[12:05:45] *** Quits: drbeco (~beco@user/beco) (Remote host closed the connection)
[12:06:21] *** Joins: drbeco (~beco@user/beco)
[12:07:51] <caze> smallville7123: https://godbolt.org/z/x8Edda7a7
[12:08:13] <smallville7123> https://godbolt.org/z/h7o4xTGoE      correctly prints the byte array now :)
[12:09:25] <smallville7123> nvm i forgot to dereference the pointer
[12:09:29] <smallville7123> #define get(T) *(T*) UNION.data
[12:09:55] <smallville7123> data = 2147483647
[12:09:56] <smallville7123> copying 4 bytes  printing 4 bytes  UNION.data = {127, -1, -1, -1}
[12:09:58] <smallville7123> value = 2147483647
[12:10:38] <smallville7123> [17:35] <caze> smallville7123: Did you seriously not read anything I wrote earlier?
[12:10:40] <smallville7123> i did
[12:10:47] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[12:10:53] <caze> So I'm curious why you ignored it.
[12:11:04] <caze> And spent a bunch of time doing something else.
[12:11:42] <markand> use size_t rather than int for everything size related (especially sizeof())
[12:11:59] <caze> Yeah, that's sort of the least of his concerns.
[12:12:38] *** Quits: the_lanetly_052 (~the_lanet@194.135.152.167) (Ping timeout: 246 seconds)
[12:13:02] <trenka> fg
[12:13:07] <trenka> oops
[12:13:09] <markand> :-)
[12:13:10] <smallville7123> why is doing this wrong?    *(T*) UNION.data
[12:13:19] <caze> smallville7123: I already told you.
[12:13:36] <caze> <caze> smallville7123: You broke it because youre set and get functions don't retrieve the bytes in a symmetric way.
[12:13:49] <caze> <caze> smallville7123: Your set function writes the first octet, and then it writes teh second octet. Your get function should work the same way. It should read the first octet, and then it reads the second octet. But you're attempting to just do return *(int16_t*) src; and that's where endianess gets in the mix.
[12:14:02] *** Quits: ironman (~ironman@2405:201:1010:b051:aebb:ac9b:cf88:4008) (Quit: Leaving)
[12:14:13] <smallville7123> alright
[12:15:21] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9087:2ff:7cb5:38c5)
[12:16:19] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[12:16:57] *** Joins: fwg (~fwg@user/fwg)
[12:17:00] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[12:17:32] <caze> <smallville7123> https://godbolt.org/z/oravn5bMM your code breaks with int32 and so does mine
[12:17:35] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[12:17:41] <caze> Did you try to understand how my code works?
[12:18:30] <caze> Or you thought it was sufficient to change the type of new from int16_t to int32_t, and everything else would just work?
[12:18:32] * smallville7123 cannot find a way to implement a template function with a return value using #define
[12:19:10] <caze> You're seriously the most ADHD coder I've ever met.
[12:19:45] * smallville7123 uses a second paramater as an out value instead
[12:21:00] <markand> it reminds me someone on a forum who talks alone and never read
[12:23:13] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[12:27:37] <smallville7123> caze: so this? https://godbolt.org/z/PGs1zbGsj
[12:28:31] *** Joins: Nixkernal (~Nixkernal@2a02:1210:2e52:8b00:6426:70fb:fe7b:46b6)
[12:28:56] *** Joins: the_lanetly_052 (~the_lanet@194.135.152.167)
[12:29:15] <caze> <caze> smallville7123: You don't need to care about endianess.
[12:29:16] *** Quits: alch (~alch@151.34.244.54) (Read error: Connection reset by peer)
[12:29:38] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[12:30:07] <smallville7123> why?
[12:30:49] <caze> <caze> smallville7123: Your set function writes the first octet, and then it writes teh second octet. Your get function should work the same way. It should read the first octet, and then it reads the second octet.
[12:31:07] <Bou> but... then the original code (https://godbolt.org/z/4sfzWET6W) wasn't even broken, was it?
[12:31:16] <caze> smallville7123: Read everything I wrote 50 minutes ago.
[12:31:35] <caze> Bou: return *(int16_t*) src; this is broken
[12:31:37] *** Joins: freddietilley (~freddieti@217.119.232.174)
[12:32:13] <Bou> that reads "src" in whatever the host's endianness is, and the dest[i]=src[i] thing copies it in the host's endianness
[12:32:35] *** Joins: MerrinX (~merrinx@ti0028a400-2319.bb.online.no)
[12:32:53] <caze> dest[i]=src[i] does not copy in host endianess.
[12:33:55] <Bou> it casts the &data to int_8* and then reads the bytes exactly as they are in memory
[12:34:17] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 250 seconds)
[12:34:23] *** Joins: alch (~alch@151.34.235.252)
[12:35:17] *** Quits: the_lanetly_052 (~the_lanet@194.135.152.167) (Ping timeout: 268 seconds)
[12:35:21] *** Quits: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu) (Ping timeout: 256 seconds)
[12:36:02] *** Quits: alex11 (~alex11@user/alex11) (Quit: Leaving)
[12:36:13] *** Joins: Klinda (~superleag@user/klinda)
[12:37:21] <caze> Bou: Actually, I think you're right, because the set function is essentially memcpy.
[12:37:24] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:37:40] <smallville7123> https://godbolt.org/z/GT6bsncb6  can set be simplified by casting both data and src to int16_t* and then simply copying the value ?
[12:38:10] <caze> smallville7123: Why don't you just use memcpy?
[12:38:12] <smallville7123> as with get as well?
[12:38:28] *** Joins: Batzy (~quassel@user/batzy)
[12:38:47] <smallville7123> caze: cus C# does not have memcpy (as far as i know)
[12:39:16] <smallville7123> so i cant rely on mempy
[12:39:19] <caze> smallville7123: So write one?
[12:39:43] <caze> smallville7123: You don't actually need get. You only need set.
[12:39:46] *** Joins: oxfuxxx (~oxfuxxx@104.200.132.174)
[12:40:13] *** Joins: ironman (~ironman@2405:201:1010:b051:aebb:ac9b:cf88:4008)
[12:40:39] <dave0> wtf which language is this
[12:40:59] <caze> smallville7123: If you haven't hardcoded UNION.data into the macro for set.
[12:41:05] <dave0> i've seen how cranky people get when someone asks c++ questions
[12:41:35] <caze> dave0: afaic it is C, with some limitations.
[12:42:25] <smallville7123> eg this?     https://godbolt.org/z/vodx3MTh5
[12:42:43] *** Joins: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu)
[12:45:03] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:45:21] <caze> smallville7123: You still have UNION.data hardcoded in the macro definition.
[12:45:26] <smallville7123> in which get can be simplified to #define get(T, OUT) OUT = *(T*)UNION.data;      right?
[12:45:41] <smallville7123> caze: yes, due to C not supporting classes as C++ and C# does
[12:45:55] *** Quits: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net) (Ping timeout: 260 seconds)
[12:46:13] <smallville7123> also union itself os C and not C++
[12:46:15] <smallville7123> is*
[12:46:15] <caze> smallville7123: Yet somehow C still manages to provide a way for you to copy between source and destination without having the destination hardcoded.
[12:46:24] <smallville7123> yea
[12:47:14] *** Joins: reedrichards (~f@2607:f598:bbda:2e0:b630:6fb7:17a9:3820)
[12:47:37] *** Quits: f__ (~f@2607:f598:bbda:2e0:4f3e:c180:1e1f:b114) (Remote host closed the connection)
[12:48:00] <smallville7123> i think equivilant to this if the syntax is correct
[12:48:02] <smallville7123> / Union.set<T>(T value);
[12:48:07] <smallville7123> / Union.print<T>();
[12:48:24] <caze> Why don'y you just implement your own memcpy?
[12:49:16] <smallville7123> / UNION.get<T>(T OUT);       (with C++/C# version of reference or pointer for the OUT arg )
[12:49:17] *** Joins: Viewday1157 (~Viewday@user/viewday)
[12:50:42] <smallville7123> or rather // T UNION.get<T>();     which doesnt require a ref/pointer as OUT can be assigned directly to the return value of get
[12:51:01] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[12:51:01] *** Viewday1157 is now known as Viewday115
[12:51:19] <smallville7123> caze: cus casting is faster and safer?
[12:51:45] <smallville7123> (provided correct size of both types of cast src and cast dst)
[12:51:49] <caze> How is it safer?
[12:52:02] <smallville7123> no buffer overflow possibilities
[12:52:40] *** Quits: summonner (~summonner@188.24.18.149) (Quit: Leaving)
[12:53:04] <caze> That is not true. If you had not allocated enough space, then the cast would cause a buffer overflow.
[12:53:23] <smallville7123> hmmm is it possible for a cast to a larger type to result in a SEGV upon access if it overlaps an unavailable memory region ?
[12:54:00] *** Joins: MajorBiscuit (~MajorBisc@c-001-003-047.client.tudelft.eduvpn.nl)
[12:54:16] <caze> smallville7123: Yes, it's undefined to read past the end of an object.
[12:54:29] <smallville7123> eg int8_t may reside on the last readable byte of a valid readable memory location, in which the next location is unreadable
[12:54:35] <rcf> Strictly-speaking the cast need not work at all. You're still risking undefined behavior if you need to keep track yourself of whether the types are compatible.
[12:55:10] <smallville7123> if this is cast to any larger type then atempting to read/write such would SEGV due to the unreadable memory location, right?
[12:55:21] <caze> smallville7123: It's irrelevant where the int8_t is. Reading past it is UB. You could have your UNION object placed right after it, and end up overwriting it.
[12:56:03] <caze> smallville7123: In fact, casting is considered to be particularly unsafe, and tends to be avoided.
[12:56:19] <smallville7123> which does not happen in union itself, right?
[12:57:12] <smallville7123> eg it is impossible for union to end up ovewriting itself simply by casting and setting its values to whatever type the user is requesting provided the union is large enough to hold such type
[12:57:15] <caze> smallville7123: In the case of a union, you would be reading the padding as if it were data. The bit pattern contained in the padding may construe a trap representation, which may also trigger UB.
[12:57:26] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com) (Read error: Connection reset by peer)
[12:58:06] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com)
[12:58:23] *** Quits: miqztee (~username@user/miqztee) (Quit: Leaving)
[12:58:29] <smallville7123> so the padding itself is left undefined ?
[12:58:45] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:58:59] <smallville7123> eg the padding is simply whatever was there before the union object is constructed ?
[12:59:06] <caze> It's indeterminate.
[13:00:04] <Bou> same as `int x` really
[13:00:36] *** Quits: zwr (~zwr@2804:d45:b966:fb00:855e:197b:3580:2fd7) (Ping timeout: 240 seconds)
[13:01:01] <smallville7123> how does a union set a int8_t if it also contain a int64_t
[13:01:16] <smallville7123> as casting the given int8_t to int64_t is UB, right?
[13:01:21] <caze> smallville7123: It doesn' "also" contain anything. It's one or the other. Never both.
[13:01:21] <rcf> The only real downside of memcpy would be the restrict-qualified arguments, but then casting may also violate strict aliasing rules if you aren't careful. You can't really win in terms of safety.
[13:01:27] *** Joins: zwr (~zwr@2804:d45:b966:fb00:85c1:b367:ef69:3db5)
[13:01:30] <smallville7123> yea
[13:02:21] <smallville7123> if i have union a { int8_t A; int64_t B; } U_A;   U_A.A = 4;
[13:02:31] <smallville7123> how does the union assign B
[13:02:49] <caze> It doesn't. It assigns A.
[13:03:03] <caze> U_A.A
[13:03:26] <smallville7123> so what ever was in B previously is left alone?
[13:03:32] <rcf> It's not that assigns B, it's just that they'll overlap.
[13:03:37] <smallville7123> eg it only sets the firrs/last 8 bits of itself?
[13:03:41] <smallville7123> first*
[13:03:47] <Posterdati> smallville7123: A and B share same memory, in this case the first 8 bit of the union
[13:04:15] <caze> smallville7123: It's not required to be left alone, but it's possible.
[13:04:36] <caze> It's also not required to be zeroed out.
[13:04:38] <Posterdati> smallville7123: the union has got the size of the bigger element of it
[13:04:50] <Posterdati> biggest
[13:05:19] <smallville7123> lets assume a U_A.B is 0x1234;  if we set U_A.A to 0x00; would U_A.B become 0x0034 or 0x3400
[13:05:57] <Posterdati> it depends from the endianess of the architecture
[13:06:18] <dave0> smallville7123: technically after writing U_A.B you may not access U_A.B
[13:06:25] <dave0> er
[13:06:26] <smallville7123> assuming it DOES NOT interpret the assigned 0x00 as a 16 bit type and copy it to U_A.B
[13:06:27] <dave0> smallville7123: technically after writing U_A.B you may not access U_A.A
[13:06:47] <dave0> it is a gcc extension that allows it specifically for unions
[13:07:04] <smallville7123> dave0: technically you can, its contents will just be UB
[13:07:34] <dave0> no technically it is an invalid program
[13:08:20] <caze> smallville7123: It really doesn't make sense to have a union containing only one member. Or a struct, for that matter.
[13:08:48] <Posterdati> you can have union { uint16_t a; struct { uint8_t b; uint8_t c } __attribute__ ((packed)); };
[13:09:03] <Posterdati> this has got more sense
[13:09:04] *** Joins: eroux (~eroux@102-65-72-61.ftth.web.africa)
[13:09:18] *** Joins: plastico (~plastico@neomutt/plastico)
[13:09:54] <caze> smallville7123: https://godbolt.org/z/Y44qToP8j
[13:15:37] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[13:15:38] *** Joins: moog_ (~moog@98.97.86.172)
[13:16:06] <greeter> hmm, you know, it's hard to use the rand() function when you try to declare stdlib.h as an integer oddly enough...
[13:16:37] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[13:16:43] <caze> smallville7123: ,c11 6.2.6.1p6
[13:16:44] <candide> smallville7123: http://www.iso-9899.info/n1570.html#6.2.6.1p6 [General] When a value is stored in an object of structure or union type, including in a member object, the bytes of the object representation that correspond to any padding bytes take unspecified values.51) The value of a structure or union object is never a trap representation, even though the value of a member of the structure or union objec... <truncated; https://0x0.st/ob8b.txt>
[13:16:56] <caze> smallville7123: ,c11 6.2.6.1p7
[13:16:57] <candide> smallville7123: http://www.iso-9899.info/n1570.html#6.2.6.1p7 [General] When a value is stored in a member of an object of union type, the bytes of the object representation that do not correspond to that member but do correspond to other members take unspecified values.
[13:17:50] *** Quits: malina (~malina@user/malina) (Ping timeout: 272 seconds)
[13:18:16] <Bou> yes, unspecified, but dave0 says it's "invalid", that would mean a compiler can refuse to compile `myunion.a=4; printf("%d", myunion.b)` entirely? that's new to me
[13:18:33] *** Quits: moog (~moog@98.97.85.156) (Ping timeout: 260 seconds)
[13:19:32] <dave0> in general yes, gcc has a special case for it
[13:19:39] <dave0> but gcc*
[13:19:41] *** Joins: fwg (~fwg@user/fwg)
[13:20:03] *** Joins: malina (~malina@user/malina)
[13:21:30] <dave0> i've never really done any union shenanigans.. i've only used XEvents and sdl events.. they are union types
[13:22:05] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[13:22:14] *** Joins: shivesh (~shivesh@user/shivesh)
[13:22:21] <Bou> hm, so a union { int a; int b; } could even be implemented as a struct { int a; int b; } ?
[13:23:08] <caze> Bou: ,c11 3.19.3p1
[13:23:08] <candide> Bou: http://www.iso-9899.info/n1570.html#3.19.3p1 [Terms, definitions, and symbols] unspecified value valid value of the relevant type where this International Standard imposes no requirements on which value is chosen in any instance
[13:25:26] <dave0> smallville7123: did you fix your code?
[13:26:13] <Bou> (my last line was a brain fart, but unfortunately IRC has no undo button)
[13:26:43] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 260 seconds)
[13:26:52] *** Joins: mattil (~mattil@helsinki.portalify.com)
[13:27:22] <caze> Bou: I don't see why not.
[13:27:30] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[13:27:31] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[13:27:39] *** Joins: moog__ (~moog@98.97.83.116)
[13:28:17] *** Quits: sokan (~sokan@2a02:587:9e11:bc00:227:eff:fe16:865d) (Quit: Reality.is.a.lie)
[13:28:18] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:30:47] *** Quits: moog_ (~moog@98.97.86.172) (Ping timeout: 268 seconds)
[13:32:21] *** Quits: iomari891 (~iomari891@197.210.77.153) (Ping timeout: 256 seconds)
[13:34:17] * smallville7123 was having dinner
[13:34:21] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[13:34:34] <Dean> hello
[13:34:45] <caze> Hello Dean
[13:34:53] *** Quits: moog__ (~moog@98.97.83.116) (Ping timeout: 260 seconds)
[13:35:18] <Dean> caze ! i am learning about input/output today. we were moving and there is so much cleaning. i couldn't code for like a week. i am sad.
[13:35:43] <dave0> Dean: that was a haiku!
[13:36:54] <Dean> a poem dave0 ? i learned something new already.
[13:37:13] *** Quits: saribro (~swinnenb@user/swinnenb) (Ping timeout: 260 seconds)
[13:37:30] <smallville7123> also here:
[13:37:33] <smallville7123> "If the member used to access the contents of a union is not the same as the member last used to store a value, the object representation of the value that was stored is reinterpreted as an object representation of the new type (this is known as type punning). If the size of the new type is larger than the size of the last-written type, the contents of the excess bytes are unspecified (and may be a trap representation). Before
[13:37:34] <smallville7123> C99 TC3 (DR 283) this behaviour was undefined, but commonly implemented this way. "
[13:37:39] <smallville7123> from https://en.cppreference.com/w/c/language/union
[13:37:39] <candide> Title of smallville7123's link: Union declaration - cppreference.com
[13:38:52] <fizzie> ,c11 footnote.95
[13:38:52] <candide> http://www.iso-9899.info/n1570.html#FOOTNOTE.95 If the member used to read the contents of a union object is not the same as the member last used to store a value in the object, the appropriate part of the object representation of the value is reinterpreted as an object representation in the new type as described in 6.2.6 (a process sometimes called ``type punning''). This might be a trap representation.
[13:39:16] <fizzie> (Same thing, except from the standard.)
[13:39:47] *** Quits: Masklin (~joel@pool20.nat.lunet.lu.se) (Ping timeout: 246 seconds)
[13:40:31] <dave0> ,cc union { int a; _Bool b; } x; x.a = 2; printf("%d ", x.b);
[13:40:33] <candide> dave0:  runtime error: load of value 2, which is not a valid value for type '_Bool'  0
[13:40:38] <caze> smallville7123: Maybe you should have studied this before attempting to implement unions?
[13:40:47] <dave0> a trap!
[13:41:39] <smallville7123> dave0: is such a trap representation cpu specific
[13:41:48] <dave0> no idea
[13:41:50] <fizzie> There's also the common initial sequence rule: in `union { struct { int a, b; } x; struct { int a, b; double c; } y; }`, you *are* allowed to write .x.b and then read .y.b, and get the same value out. But that's specific to structs, and only in a context where the completed type of the union is visible.
[13:42:54] <fizzie> ,c11 6.5.2.3p6
[13:42:56] <candide> http://www.iso-9899.info/n1570.html#6.5.2.3p6 [Structure and union members] One special guarantee is made in order to simplify the use of unions: if a union contains several structures that share a common initial sequence (see below), and if the union object currently contains one of these structures, it is permitted to inspect the common initial part of any of them anywhere that a declaration of the comp... <truncated; https://0x0.st/ob8j.txt>
[13:43:08] <caze> smallville7123: Did you see my example of only having set, without get? https://www.youtube.com/watch?v=rQmqVVmMB3k
[13:43:09] <candide> Title of caze's link: The $100 Billion Dollar Ingredient making your Food Toxic - YouTube
[13:43:13] <caze> Oops.
[13:43:17] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[13:43:29] <caze> smallville7123: https://godbolt.org/z/Y44qToP8j
[13:46:11] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[13:46:38] <smallville7123> yes
[13:47:36] *** Quits: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu) (Ping timeout: 272 seconds)
[13:47:43] *** Joins: thundersmuggler (~thundersm@mlsrj200152103p148.static.mls.com.br)
[13:48:24] <smallville7123> [18:52] <Bou> hm, so a union { int a; int b; } could even be implemented as a struct { int a; int b; } ?
[13:48:25] <smallville7123> no
[13:48:38] <caze> smallville7123: Why do you say that?
[13:49:07] <dave0> common initial sequence
[13:49:08] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:49:21] *** Joins: Viewday1151 (~Viewday@user/viewday)
[13:50:03] <smallville7123> the union's size will not be equal to the struct's size
[13:50:15] <smallville7123> also the memory layout of both will be different
[13:50:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9087:2ff:7cb5:38c5) (Quit: Quit)
[13:50:32] <caze> smallville7123: What size should they be?
[13:50:33] <smallville7123> eg in the struct, setting 'a' DOES NOT automatically set 'b'
[13:50:52] *** Quits: thundersmuggler (~thundersm@mlsrj200152103p148.static.mls.com.br) (Client Quit)
[13:50:57] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 248 seconds)
[13:51:03] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:51:03] *** Viewday1151 is now known as Viewday115
[13:51:06] <smallville7123> the struct would AT LEAST be sizeof(int)*2
[13:51:59] <smallville7123> or, assuming int8_t instead of int, the size of the strict == sizeof(int16_t) at least
[13:52:02] <caze> smallville7123: And what would the size of the union be?
[13:52:16] <smallville7123> where as the size of the union == sizeof(int8_t) at least
[13:52:17] <Bou> smallville7123: nothing says that changing 'a' /must/ change 'b' in some way
[13:52:29] <smallville7123> Bou: the memory layout does
[13:52:32] <caze> smallville7123: So the union could be the same size as the struct.
[13:52:53] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[13:53:09] <caze> smallville7123: The specification says this:
[13:53:24] <smallville7123> yes but ONLY if the struct has a single member or is composed of members of smaller types that add up to the largest size of the union
[13:53:25] <caze> smallville7123: ,c11 6.2.6.1p6
[13:53:26] <candide> smallville7123: http://www.iso-9899.info/n1570.html#6.2.6.1p6 [General] When a value is stored in an object of structure or union type, including in a member object, the bytes of the object representation that correspond to any padding bytes take unspecified values.51) The value of a structure or union object is never a trap representation, even though the value of a member of the structure or union objec... <truncated; https://0x0.st/ob8b.txt>
[13:53:39] <caze> smallville7123: ,c11 6.2.6.1p7
[13:53:39] <candide> smallville7123: http://www.iso-9899.info/n1570.html#6.2.6.1p7 [General] When a value is stored in a member of an object of union type, the bytes of the object representation that do not correspond to that member but do correspond to other members take unspecified values.
[13:53:59] <caze> smallville7123: You are just making that up.
[13:54:23] <smallville7123> how so?
[13:54:30] <caze> smallville7123: Prior, you said "at least".
[13:54:42] <caze> <smallville7123> where as the size of the union == sizeof(int8_t) at least
[13:54:48] <caze> Meaning it could be bigger?
[13:55:56] <caze> smallville7123: In fact, both union and struct could have arbitrarily large size because an arbitrary amount of padding may be added to both to reach the same size.
[13:56:06] <smallville7123> yea
[13:56:22] *** Joins: zsoltiv_ (~zsoltiv@45-134-238-138.naracom.hu)
[13:57:23] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:57:45] <smallville7123> eg a union with int8_t a[3] should AT LEAST be equal to sizeof(int8_t)*3 but may be padded to align to sizeof(int8_t)*4 right?
[13:57:56] <caze> Yes.
[13:58:03] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[13:58:51] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:59:18] <smallville7123> then as i said before, [19:23] <smallville7123> yes but ONLY if the struct has a single member or is composed of members of smaller types that add up to the largest size of the union
[13:59:29] <smallville7123> tho with account for padding as well
[14:00:17] <caze> Padding is taken into account for the size of a struct and the size of a union.
[14:02:23] <smallville7123> is a union still the same size if it has multiple arrays of the same size and type?
[14:02:37] <smallville7123> eg union { int a[2]; int b [2]; }
[14:02:55] <caze> Same size as what?
[14:03:06] <smallville7123> eg would both a and b refer to the same memory location ?
[14:03:17] <smallville7123> with the same length
[14:03:37] <caze> Yes.
[14:03:54] <Bou> me: "probably", standard: "dunno"
[14:04:10] <smallville7123> would the same be true for union { int8_t[2] a; int16_t b; } ?
[14:04:18] <caze> That's a good point. There cannot be padding at the beginning, so the addresses for the union members would have to be the same, whereas the addresses for the struct members would have to be different.
[14:06:19] <caze> ,c11 6.7.2.1p15
[14:06:20] <candide> http://www.iso-9899.info/n1570.html#6.7.2.1p15 [Structure and union specifiers] Within a structure object, the non-bit-field members and the units in which bit-fields reside have addresses that increase in the order in which they are declared. A pointer to a structure object, suitably converted, points to its initial member (or if that member is a bit-field, then to the unit in which it resides), and vice... <truncated; https://0x0.st/ob8_.txt>
[14:06:33] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 268 seconds)
[14:06:42] <caze> ,c11 6.7.2.1p16
[14:06:42] <candide> http://www.iso-9899.info/n1570.html#6.7.2.1p16 [Structure and union specifiers] The size of a union is sufficient to contain the largest of its members. The value of at most one of the members can be stored in a union object at any time. A pointer to a union object, suitably converted, points to each of its members (or if a member is a bit- field, then to the unit in which it resides), and vice versa.
[14:06:54] <caze> ,c11 6.7.2.1p17
[14:06:55] <candide> http://www.iso-9899.info/n1570.html#6.7.2.1p17 [Structure and union specifiers] There may be unnamed padding at the end of a structure or union.
[14:07:14] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (WeeChat 3.4)
[14:07:35] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[14:08:05] *** Quits: Nex8192_ (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[14:08:45] <caze> So the members of the union have to have the same address, whereas the members of the struct have to have different addresses.
[14:10:10] *** Quits: oxfuxxx (~oxfuxxx@104.200.132.174) (Quit: [H]EAT ROX FUCK R0X SHIT BRIX.)
[14:10:36] <smallville7123> in https://godbolt.org/z/xrTrG9oYq and assuming a C++ template class, would `data` ALWAYS need to be case to the type* of the type being assigned and the type intending to be obtained?
[14:10:48] *** Joins: magla (~gelignite@d5365b83.access.ecotel.net)
[14:10:59] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[14:11:21] <caze> Actually, it says there may not be padding at the beginning of a struct, but it doesn't say that the same is true for a union.
[14:11:59] <Bou> but what if you had some crazy architecture where `short` needs to be aligned on an odd address and `int` on an even address?
[14:12:29] <Bou> then you'd need padding at the start, no?
[14:12:43] <caze> Bou: How would the address bus for that even work?
[14:12:48] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 260 seconds)
[14:12:52] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[14:12:57] *** Quits: krissmaster (~kriss@213.239.83.90) (Remote host closed the connection)
[14:13:41] <caze> Bou: But anyway, why wouldn't padding at the end work?
[14:14:14] <smallville7123> for example, in   union { int8_t a; int64_t b; } DATA;     int8_t tmp = 5;   DATA.a = tmp;
[14:14:19] <caze> Bou: Are you talking about a struct or a union?
[14:14:21] <Bou> union { short s; int i; } // because then the address of s can't be the same as i
[14:14:36] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[14:15:10] *** Joins: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com)
[14:15:16] <smallville7123> this would be equivilant to doing     *((int8_t*) & DATA.b) = tmp;       right?
[14:15:40] <smallville7123> Bou: yes it can
[14:16:02] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[14:16:30] *** Joins: krissmaster (~kriss@213.239.83.90)
[14:16:32] <smallville7123> union { short s; int i; }    // equivilant of short[2]  assuming short == int16_t and int == int32_t
[14:16:50] <caze> Bou: ,c11 6.2.8p4
[14:16:50] <candide> Bou: http://www.iso-9899.info/n1570.html#6.2.8p4 [Alignment of objects] Alignments are represented as values of the type size_t. Valid alignments include only those values returned by an _Alignof expression for fundamental types, plus an additional implementation-defined set of values, which may be empty. Every valid alignment value shall be a nonnegative integral power of two.
[14:16:53] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Ping timeout: 260 seconds)
[14:18:34] <Bou> boo, that indeed makes odd-address-short impossible :(
[14:19:13] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Ping timeout: 260 seconds)
[14:19:23] <caze> I can't find anything prohibiting padding at the beginning of a union.
[14:20:27] *** Joins: fwg (~fwg@user/fwg)
[14:21:16] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[14:22:31] <Bou> ok let me compile the Linux kernel with `gcc -Dunion=struct` and see what happens
[14:22:45] <smallville7123> would be setting the union { short s; int i} ;         be equivilant to    *((int*) & MEMBER ) = *((int*) & VALUE);       ?
[14:23:00] <smallville7123> Bou: DO NOT DO THAT
[14:23:07] <caze> There is this sentence, "A pointer to a union object, suitably converted, points to each of its members..."
[14:23:49] *** Quits: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[14:24:58] <smallville7123> Bou: the key difference between a union and a struct is "The value of at most one of the members can be stored in a union at any one time. "
[14:25:34] <smallville7123> (among other differences but that is the probs most noticable)
[14:25:52] <caze> That's not really a constraint though. It's more of a description.
[14:26:15] <smallville7123> eg any changes to ANY members in the union are REFLECTED in ALL members of the union since all members overlap the SAME ADDRESS
[14:26:34] <caze> smallville7123: I'm not sure that's actually true.
[14:26:51] <smallville7123> caze: depends on padding and member size
[14:27:06] <smallville7123> but its at least true for the smallest member size
[14:27:08] <Bou> the "pointer to a union points to each of its members" does suggest it
[14:27:09] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:27:29] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[14:27:32] <caze> Bou: You left out the "suitably converted" part.
[14:28:18] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:28:24] <caze> smallville7123: I'm not sure that union members technically have to overlap at all.
[14:28:27] <smallville7123> Bou: basically this is (one of) the fundamental difference in terms of storing and reading values
[14:28:30] <smallville7123>     s.u16[0] = 0x0011;  // s.u16 is now the active member
[14:28:31] <smallville7123>     // reading from s.u32 or from s.u8 reinterprets the object representation
[14:28:33] <smallville7123> //  printf("s.u8 is now %x\n", s.u8); // unspecified, typically 11 or 00
[14:28:34] <smallville7123> //  printf("s.u32 is now %x\n", s.u32); // unspecified, typically 12340011 or 00115678
[14:29:07] <smallville7123> where as in a struct, writing u16 would NOT affect u8 and u32 in any way
[14:29:08] <caze> smallville7123: See those comments that say "unspecified"?
[14:29:14] <smallville7123> yes
[14:29:23] <smallville7123> as there contents may be unspecified
[14:29:59] <caze> smallville7123: So the value might actually be the same as before the write to the other member.
[14:30:26] <smallville7123> as per " If the size of the new type is larger than the size of the last-written type, the contents of the excess bytes are unspecified"
[14:31:13] <smallville7123> caze: only if the member being accessed is the same size as the member that was written
[14:32:02] <smallville7123> or unless such a value is written that happens to be the same as a smaller type and the smaller type happens to be this value
[14:32:36] <caze> smallville7123: No, you misread what I wrote.
[14:32:39] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:32:55] <smallville7123> for example, setting u16 to 0 and then setting u32 to 0, the value of u16 will still be zero as the lower/higher half of the u32 is unchanged
[14:33:15] <caze> smallville7123: Where does the spec say that?
[14:34:23] <smallville7123> technically u16 is still set to 0 but its value is unchanged, basically equivilant of setting u16 to itself
[14:35:21] <smallville7123> the value will be written but it will be basically very difficult to detect if it has actually changed since its contents are still the same as they where when last observed
[14:37:08] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[14:38:38] <caze> The closest thing to what you're claiming is footnote 95, but footnotes are non-normative, and the footnote itself says "... the appropriate part of the object representation of the value is reinterpreted as an object representation in the new type as described in 6.2.6..." but when I look in 6.2.6, I don't see anything that says that _has_ to happen.
[14:39:45] <caze> There are only two relevant paragraphs in 6.2.6:
[14:39:54] <caze> ,c11 6.2.6p6
[14:39:54] <candide> No such paragraph 6 in section 6.2.6 of n1570.
[14:40:06] <caze> ,c11 6.2.6.1p6
[14:40:07] <candide> http://www.iso-9899.info/n1570.html#6.2.6.1p6 [General] When a value is stored in an object of structure or union type, including in a member object, the bytes of the object representation that correspond to any padding bytes take unspecified values.51) The value of a structure or union object is never a trap representation, even though the value of a member of the structure or union object may be a trap ... <truncated; https://0x0.st/ob8O.txt>
[14:40:12] <caze> ,c11 6.2.6.1p7
[14:40:12] <candide> http://www.iso-9899.info/n1570.html#6.2.6.1p7 [General] When a value is stored in a member of an object of union type, the bytes of the object representation that do not correspond to that member but do correspond to other members take unspecified values.
[14:40:44] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[14:40:52] <smallville7123> for example https://godbolt.org/z/Pr3bWK735
[14:40:59] <Dean> I have some javascript. i want to communicate with a c file. how do i communicate between c and javascript?
[14:41:21] <smallville7123> here a[0] is unchanged even though b has changed from 8716 to 1804
[14:41:42] <smallville7123> and a[1] has changed from 34 to 7
[14:42:45] <caze> smallville7123: I understand what you're trying to demonstrate, but your examples to not demonstrate that this is *required* to happen.
[14:43:24] <caze> smallville7123: In other words, flipping a coin 100 times and demonstrating that it lands on heads 100 times does not demonstrate that landing on head is *required*.
[14:43:38] *** Quits: aghast (~aghast@2607:fb91:bd0b:1329:a0d6:4979:f73c:e2ec) (Ping timeout: 260 seconds)
[14:44:04] <caze> smallville7123: You need something from the specification.
[14:44:33] <Dean> Do i need to use node.js in order to call c functions?
[14:44:40] <Dean> in javascript
[14:44:40] <Bou> smallville7123: that's only because the lower byte of 1804 happens to be 12 as well. a[0] did get changed, but changed to the same value
[14:44:55] <trenka> Dean: ask on javascript channel
[14:44:55] *** Quits: csrf (~csrf@user/csrf) (Ping timeout: 260 seconds)
[14:45:01] *** Joins: csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net)
[14:45:35] <smallville7123> so setting a[0] does NOT require b to also be "set" ?
[14:45:47] <smallville7123> eg b could still be 0 ?
[14:46:02] <smallville7123> as it is not REQUIRED to be changed ?
[14:46:11] <Dean> ok ty trenka
[14:47:53] *** Joins: fwg (~fwg@user/fwg)
[14:47:58] <smallville7123> (thereby making it equivilant of a struct ?)
[14:48:11] <smallville7123> (if the compiler wishes to do so?)
[14:48:35] *** Joins: zacts (~zacts@user/zacts)
[14:48:49] <smallville7123> Bou: i know
[14:49:31] *** Joins: iomari891 (~iomari891@105.112.138.38)
[14:49:41] <Bou> that depends on whether there can be left-padding in a union, but "A pointer to a union object, suitably converted, points to each of its members..." looks like all members indeed need to start at the same address
[14:49:43] *** Joins: cursey (~cursey@user/cursey)
[14:49:54] <caze> smallville7123: The common wisdom is that when you write to a member of a union, the other members become "garbage". There is no rule that says the "garbage" value cannot be the same as the value that was there before the write to the other member.
[14:50:13] <smallville7123> caze: eg setting `a[0]` is NOT REQUIRED to also set the lower half of `b` ?
[14:50:14] *** Quits: magla (~gelignite@d5365b83.access.ecotel.net) (Read error: Connection reset by peer)
[14:50:33] *** Joins: magla (~gelignite@d5365b83.access.ecotel.net)
[14:50:36] <caze> smallville7123: I mean, it could be the upper half.
[14:50:49] <smallville7123> still
[14:51:08] <smallville7123> it is NOT REQUIRED to change anything of `b` right?
[14:51:36] <caze> smallville7123: I don't think so.
[14:52:10] <caze> Bou: "suitably converted" is a weasel word.
[14:53:29] <smallville7123> though it it is NOT REQUIRED and the compiler does not implement that at all, then a union is balically the equivilant of a variant wuth UB on any member access apart from the last WRITTEN member ?
[14:53:37] *** magla is now known as jellyknight
[14:53:38] <smallville7123> basically*
[14:53:47] <smallville7123> with*
[14:54:30] <caze> smallville7123: Yes, because it could trap, causing UB, and UB can manifest itself as behaving as if the last value written to that other object were still there.
[14:54:59] <smallville7123> eg the compiler could make it intentionally crash on U.a = 5; U.b = 0.5f; func(U.a); // crash when accessing U.a
[14:55:09] <caze> smallville7123: But I think this is a little out of the purvue of the specification.
[14:55:23] *** Quits: raym (~raym@user/raym) (Ping timeout: 246 seconds)
[14:55:30] <caze> smallville7123: As another example, if you look at the spec for malloc:
[14:55:46] <smallville7123> even if U.a happens to be the same type as U.b ?
[14:55:48] <caze> ,c11 7.22.3.4p2
[14:55:49] <candide> http://www.iso-9899.info/n1570.html#7.22.3.4p2 [The malloc function] allocates space for an object whose size is specified by size and whose value is indeterminate.
[14:55:52] <caze> ,c11 7.22.3.4p4
[14:55:52] <candide> No such paragraph 4 in section 7.22.3.4 of n1570.
[14:55:58] <caze> ,c11 7.22.3.4p3
[14:55:58] <candide> http://www.iso-9899.info/n1570.html#7.22.3.4p3 [The malloc function] returns either a null pointer or a pointer to the allocated space.
[14:56:00] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 272 seconds)
[14:56:25] *** Joins: unknow (~i.am@user/marlboro)
[14:56:26] *** Quits: ZenWalker (~r00t@cafe/developer/ZenWalker) (Quit: reboot)
[14:56:35] <caze> smallville7123: According to the spec, this is a compliant implementation of malloc: void *malloc(size_t n) { return NULL; }
[14:57:00] <smallville7123> yew :)
[14:57:05] <smallville7123> yea :)        *
[14:58:55] <smallville7123> tho is there any compiler that actually does this?
[14:59:01] <Bou> ,cc union { int a; char b; int c; } un;     un.a=5;     printf("%d\n", *(int*)&un);     // for this to be valid (which it is) a union can't be implemented as a struct
[14:59:03] <candide> Bou: 5
[14:59:35] <smallville7123> Bou: which is what i have been telling you lol
[14:59:43] <Bou> because it can't "suitably convert" without knowing if you want a or c
[14:59:49] <smallville7123> union IS DIFFERENT from a struct
[15:00:18] <caze> smallville7123: Look more closely at his example.
[15:00:38] <caze> smallville7123: He write &un, with no `.`.
[15:00:43] <smallville7123> also that only works cus you are setting 'a' and then accessing 'a/c' which both are int
[15:01:01] <smallville7123> accessing 'c' would probably print UB
[15:01:37] <smallville7123> anyway
[15:01:42] <smallville7123> tho is there any compiler that actually does this?
[15:01:45] <smallville7123> "the compiler could make it intentionally crash on U.a = 5; U.b = 0.5f; func(U.a); // crash when accessing U.a"
[15:02:00] <caze> smallville7123: Why would accessing c be UB?
[15:02:03] <smallville7123> or any compiler setting which does this?
[15:02:10] <caze> smallville7123: Which member do you think he's accessing?
[15:02:33] <smallville7123> caze: cus 'c' should be considered to have garbage values after setting any member that is not 'c'
[15:02:58] <smallville7123> (even though it might not)
[15:03:11] <caze> smallville7123: Which member is being printed here? printf("%d\n", *(int*)&un);
[15:03:21] <smallville7123> a or c
[15:03:30] <smallville7123> wait no
[15:03:38] <smallville7123> accessing 'b' would be UB
[15:03:43] *** Joins: cruncher (~cruncher@user/cruncher)
[15:03:56] <smallville7123> got confused with c and char as c is usually short for char
[15:04:03] <smallville7123> as i is short for int
[15:04:06] <caze> Well no, for a whole other can of worms.
[15:04:18] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[15:04:50] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Ping timeout: 246 seconds)
[15:05:05] *** Quits: freddietilley (~freddieti@217.119.232.174) (Ping timeout: 248 seconds)
[15:05:12] <smallville7123> but "cus 'c' should be considered to have garbage values after setting any member that is not 'c'" is still correct even if 'b' was set and even if 'a' and 'c' have different types
[15:06:24] <smallville7123> (not sure if 'a' and 'c' even though thay have the same exact type, would generate a trap when accessing 'a' after setting 'c' and vice versa
[15:06:28] <caze> smallville7123: The only path to triggering UB is through reading a trap representation. Is there a trap representation there for int?
[15:07:00] <smallville7123> as techinally thay are still different members, right?
[15:07:14] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:816b:2899:d068:2f42)
[15:07:26] <caze> smallville7123: A trap is generated by reading a trap representation.
[15:07:32] <smallville7123> yea
[15:07:50] <caze> smallville7123: The representation that is there is the representation for `5`, which is not a trap representation.
[15:08:01] <smallville7123> that may hapen when reading a or c after setting c or a respectively, right?
[15:08:35] *** Joins: freddietilley (~freddieti@217.119.232.174)
[15:09:23] *** flooded is now known as _flood
[15:10:35] *** Joins: freddietilley1 (~freddieti@217.119.232.174)
[15:11:25] <smallville7123> since "If the size of the new type is larger than the size of the last-written type, the contents of the excess bytes are unspecified (and may be a trap representation)" and "The common wisdom is that when you write to a member of a union, the other members become "garbage""
[15:12:23] *** Quits: freddietilley1 (~freddieti@217.119.232.174) (Read error: Connection reset by peer)
[15:12:30] <smallville7123> and thus this "garbage" may, when read, generate a trap exception if the compiler intentionally enforces this, right?
[15:13:28] *** Joins: raym (~raym@user/raym)
[15:13:44] *** Quits: freddietilley (~freddieti@217.119.232.174) (Ping timeout: 272 seconds)
[15:14:33] <smallville7123> either implicitly (by encoding trap representation in the excess bytes) or explicitly (by ensuring that the excess bytes if accessed will cause a trap to be generated)
[15:15:12] <smallville7123> eg it may manually check each bit and generate if an "out of bounds bit" is accessed, so to speak
[15:15:38] *** Joins: slidercrank (~slidercra@user/slidercrank)
[15:16:35] <smallville7123> caze: all this is entirely valid for a compiler to do as it is not explicitly REQUIRED NOT TO DO SO, right?
[15:18:08] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[15:19:36] *** Joins: andai (~andai@2a05:4f44:c1b:9200:4988:c8e0:45b9:ab5c)
[15:19:55] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[15:22:28] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[15:29:52] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[15:30:17] *** Quits: csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:31:00] *** Joins: csrf (~csrf@user/csrf)
[15:32:34] *** Joins: freddietilley1 (~freddieti@217.119.232.174)
[15:33:22] *** Joins: cart_ (~cart@host-78-144-123-112.as13285.net)
[15:34:23] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[15:34:52] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[15:36:10] *** Joins: soul-aw (~uknown@2a02-a456-85ad-1-3072-162d-a082-7ddc.fixed6.kpn.net)
[15:37:05] *** Joins: chenqisu12 (~chenqisu1@183.217.202.44)
[15:37:21] *** Quits: joji (~jojo@86.4.72.180) (Quit: Leaving)
[15:38:42] *** Quits: soul-bw (~uknown@2a02-a456-85ad-1-9d9b-5209-8ee2-fd1b.fixed6.kpn.net) (Ping timeout: 260 seconds)
[15:39:51] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Ping timeout: 256 seconds)
[15:41:10] *** Quits: fwg (~fwg@user/fwg) (Quit: so long and thanks for all the fish.)
[15:42:47] *** Quits: geeknix (~pi@2001:e68:5432:518e:7d14:5ca5:9ed8:f278) (Ping timeout: 260 seconds)
[15:44:35] *** Joins: coaxing (~coaxing@user/coaxing)
[15:45:06] *** Joins: moog (~moog@98.97.85.106)
[15:46:59] *** Joins: v4mp (~v4mp@user/v4mp)
[15:48:51] *** Quits: omegatron (~some@p54bd5280.dip0.t-ipconnect.de) (Quit: Power is a curious thing.It can be contained, hidden, locked away,and yet it always breaks free.)
[15:48:56] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 246 seconds)
[15:53:50] <rcf> smallville7123: a compiler could try to do this (perhaps as a debugging aid) but in general the intention isn't to allow for such an overzealous implementation, but to allow for assignment to be as dumb as possible given that trap representations are usually a property of the underlying hardware platform and it may be annoying and slow to check for them.
[15:54:53] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 246 seconds)
[15:56:32] *** Joins: gtlsgamr (~gtlsgamr@user/gtlsgamr)
[15:58:49] *** Quits: andai (~andai@2a05:4f44:c1b:9200:4988:c8e0:45b9:ab5c) (Quit: Client closed)
[15:59:27] <smallville7123>  ok :)
[15:59:57] <gtlsgamr> http://0x0.st/ob8U.c
[16:00:00] *** Joins: geeknix (~pi@2001:e68:5432:af1f:781b:3d59:e4b7:2808)
[16:00:02] <gtlsgamr> Hi all. I am experimenting with BCHS stack and want to write a C program that will take information from an HTML form, parse it, and then write it to a file. Currently I just want to display it on the webpage. I have written this code but it seems to fail for some reason. Anyone have any experience with it? --> http://0x0.st/ob8U.c
[16:00:22] <gtlsgamr> I think the URL encoding may be messing with the program.. any way to avoid it?
[16:03:06] *** Joins: fwg (~fwg@user/fwg)
[16:03:46] *** Quits: yggdrasil (~yggdrasil@67-0-66-167.albq.qwest.net) (Ping timeout: 272 seconds)
[16:04:20] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 268 seconds)
[16:04:26] <rcf> The obvious solution would be to decode the URL.
[16:04:57] *** Joins: noonien (~noonien@user/noonien)
[16:05:11] *** Joins: yggdrasil (~yggdrasil@67-0-13-193.albq.qwest.net)
[16:05:12] *** Joins: iomari891 (~iomari891@105.112.138.38)
[16:06:31] <Bou> That site forces me to download a .c file so I can't view it
[16:07:57] *** Joins: esselfe (~steph@user/esselfe)
[16:11:47] *** Quits: freddietilley1 (~freddieti@217.119.232.174) (Ping timeout: 260 seconds)
[16:12:03] <gtlsgamr> Bou: you can just curl that url
[16:12:25] <gtlsgamr> What browser are you using?
[16:12:49] <Bou> Android, and there's no curl on my phone xD
[16:13:24] *** Quits: cruncher (~cruncher@user/cruncher) (Quit: Leaving)
[16:13:31] <gtlsgamr> aH! makes sense
[16:13:38] <gtlsgamr> let me find another way
[16:13:49] <gtlsgamr> Here use this http://0x0.st/ob8U.c
[16:14:11] <gtlsgamr> I meant this http://0x0.st/ob8k.txt
[16:14:13] *** Joins: freddietilley1 (~freddieti@217.119.232.174)
[16:15:02] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[16:15:12] *** Joins: vk3fajo (~vk3fajo@2001:8003:4347:7500:8981:bcc3:e6e8:6efa)
[16:15:22] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[16:15:47] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:16:08] *** Quits: freddietilley1 (~freddieti@217.119.232.174) (Client Quit)
[16:16:20] *** Joins: freddietilley (~freddieti@217.119.232.174)
[16:16:36] *** Quits: freddietilley (~freddieti@217.119.232.174) (Client Quit)
[16:18:16] *** Joins: eddybilley (~freddieti@217.119.232.174)
[16:18:46] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com)
[16:21:13] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com) (Ping timeout: 256 seconds)
[16:21:36] *** Quits: v4mp (~v4mp@user/v4mp) (Ping timeout: 268 seconds)
[16:22:06] *** Quits: yosef` (~user@223.73.113.250) (Remote host closed the connection)
[16:26:26] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[16:26:46] *** Quits: zer0x (~zer0x@58.186.50.203) (Ping timeout: 260 seconds)
[16:28:19] *** Joins: trumae (~trumae@2804:18:86e:cd79:1:0:4570:9f01)
[16:28:41] <fizzie> gtlsgamr: scanf %s isn't magic, it's just "match any number of non-whitespace characters". So a format of "alias=%s&url=%s&time=%s&body=%s" can't be right: the & that follows the %s would never match, because if there was a & there, it would have been consumed by the %s.
[16:28:44] *** Joins: f__ (~f@2607:f598:bbda:2e0:61af:21ff:806f:c19f)
[16:29:33] <fizzie> If you want to make sscanf do that, you'll need %[^&] in place of a %s. And it'd be a good idea to put maximum length limits in the format. Or use something else than sscanf altogether.
[16:29:49] *** Quits: Alhazred (~Alhazred@45.129.56.151) (Ping timeout: 250 seconds)
[16:30:14] *** Joins: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net)
[16:30:29] *** Quits: reedrichards (~f@2607:f598:bbda:2e0:b630:6fb7:17a9:3820) (Remote host closed the connection)
[16:30:43] *** Joins: fria (~siesta@112.207.33.219)
[16:31:06] <fizzie> ,cc char foo[32] = "", bar[32] = ""; int matched = sscanf("foo=123&bar=456", "foo=%s&bar=%s", foo, bar); printf("matched %d, foo = [%s], bar = [%s]", matched, foo, bar); // just to illustrate
[16:31:08] <candide> fizzie: matched 1, foo = [123&bar=456], bar = []
[16:32:12] *** Quits: alch (~alch@151.34.235.252) (Ping timeout: 260 seconds)
[16:32:24] <fizzie> ,cc char foo[32] = "", bar[32] = ""; int matched = sscanf("foo=123&bar=456", "foo=%[^&]&bar=%[^&]", foo, bar); printf("matched %d, foo = [%s], bar = [%s]", matched, foo, bar); // this will "work", but expecting a query string to have a specific order is pretty brittle
[16:32:26] <candide> fizzie: matched 2, foo = [123], bar = [456]
[16:32:53] <fizzie> (And of course there's the URL encoding as well, sure.)
[16:32:58] <fria> ,cc puts((char*[]){"eat","sleep","code"}[rand()%3]);
[16:33:00] <candide> fria: sleep
[16:33:22] <fria> it is always sleep
[16:33:30] <fria> ,cc puts((char*[]){"eat","sleep","code"}[rand()%3]);
[16:33:32] <candide> fria: sleep
[16:33:48] *** Joins: alch (~alch@151.68.227.74)
[16:34:08] <fria> ,cc srand(time(NULL));puts((char*[]){"eat","sleep","code"}[rand()%3]);
[16:34:09] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 248 seconds)
[16:34:10] <candide> fria: eat
[16:34:17] <fria> oww
[16:34:21] <fizzie> Yeah, that's because (C11 7.22.2.1p2): "If `rand` is called before any calls to `srand` have been made, the same sequence shall be generated as when `srand` is first called with a seed value of 1."
[16:34:45] <fizzie> Whoops, that's off by one, it's 7.22.2.2p2.
[16:34:50] *** Joins: v4mp (~v4mp@user/v4mp)
[16:34:51] <fizzie> So many 2s.
[16:34:59] *** Joins: omegatron (~some@p54bd5280.dip0.t-ipconnect.de)
[16:35:19] *** Joins: constxd (~brad@142.134.78.128)
[16:35:29] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:35:44] <fria> candide: what is c11 7.22.2.2p2?
[16:35:54] <candide> f﻿ria, I don't know.
[16:35:58] <fria> hahaha
[16:37:20] <fizzie> (There's extra fluff at the start of the paragraph before it gets to that part, that's why I didn't have the bot quote it. Clearly it needs a syntax for specifying starting offset as number of sentences inside a paragraph.)
[16:40:27] <fria> thanks for the reference number fizzie
[16:40:37] <fria> i found it
[16:41:06] <dave0> ,cc puts((char*[]){"eat","sleep","code"}[srand(11),rand()%3]);
[16:41:08] <candide> dave0: code
[16:42:14] <fria> i missed freenode
[16:42:52] <dave0> leenode
[16:43:38] *** Quits: parrott (~parrott@158-59-127-107.net.arlingtonva.us) (Read error: Connection reset by peer)
[16:45:08] *** Joins: parrott (~parrott@2607:fb90:1776:3402:0:53:4f3:b501)
[16:47:50] <fizzie> ,cc #define rand (srand(11),rand) \n puts((char*[]){"eat","sleep","code"}[rand()%3]); // it's a crooked game
[16:47:52] <candide> fizzie: code
[16:49:04] <fria> why srand(11)?
[16:49:08] <fria> hahaha
[16:49:36] <fria> is it srand(time(NULL))?
[16:49:55] <dave0> it was the smallest number that made `2` which is `code` which is what everyone should be doing!
[16:50:27] <dave0> eating and sleeping is for the weak
[16:51:00] *** Joins: Atque (~Atque@user/atque)
[16:51:45] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 248 seconds)
[16:51:51] <fria> hahaha
[16:53:50] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[16:54:24] <Bou> fria: did you get your wrapping code working yet?
[16:54:29] *** Joins: zsoltiv__ (~zsoltiv@45-134-238-132.naracom.hu)
[16:54:33] <fria> yes bou
[16:54:38] <fria> thanks
[16:54:45] <Bou> I had a working version but you already left xD
[16:54:55] <smallville7123> if a union simply has no duplicate types, then is it equivilant to a varient?
[16:55:06] <Bou> The start/end angle logic was wrong too
[16:55:29] *** Quits: zsoltiv_ (~zsoltiv@45-134-238-138.naracom.hu) (Ping timeout: 248 seconds)
[16:55:30] <fria> can i see the code?
[16:56:24] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[16:57:01] <Bou> I'm not home atm. Anyway if you flip sa and ea it's going to use the other range (so a 90 deg angle becomes the opposite 270 deg), it was something like that
[16:57:56] <fria> ok
[16:58:16] <smallville7123> or rather, a variant that DOES type punning
[16:58:24] <smallville7123> do type punning *
[16:59:42] *** Quits: zsoltiv__ (~zsoltiv@45-134-238-132.naracom.hu) (Quit: Left)
[16:59:52] <fria> hope i can see your version bou
[17:00:17] <fria> i just patch it with some formula for insector
[17:00:51] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[17:01:36] *** Joins: zsoltiv_ (~zsoltiv@45-134-238-132.naracom.hu)
[17:02:02] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 252 seconds)
[17:04:03] *** Quits: Cyp (~cyp@213.237.84.236) (Excess Flood)
[17:04:33] *** Joins: Cyp (~cyp@213.237.84.236)
[17:05:33] *** Joins: Alhazred (~Alhazred@86.106.74.37)
[17:06:05] *** Quits: soul-aw (~uknown@2a02-a456-85ad-1-3072-162d-a082-7ddc.fixed6.kpn.net) (Read error: Connection reset by peer)
[17:06:14] *** MrMobius_ is now known as MrMobius
[17:08:18] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[17:08:54] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:09:11] *** Quits: krissmaster (~kriss@213.239.83.90) (Remote host closed the connection)
[17:09:51] *** Quits: zsoltiv_ (~zsoltiv@45-134-238-132.naracom.hu) (Quit: Left)
[17:10:37] *** Joins: zsoltiv_ (~zsoltiv@45-134-238-132.naracom.hu)
[17:11:04] <smallville7123> eg each type name is simply an identifier for the type itself, and makes no difference if multiple identifiers of the same type appear ? but C simply has no such "template/generic" way of specifying such type ?
[17:11:48] <smallville7123> for example            Union p = new Union(typeof(int), typeof(float)); p.set<short>(5); float f = p.get<float>();
[17:12:04] *** Joins: tech_exorcist (13203@user/tech-exorcist/x-0447479)
[17:12:10] <smallville7123> in C this would be equvilant to a union with named and typed members, right?
[17:12:14] *** Quits: vk3fajo (~vk3fajo@2001:8003:4347:7500:8981:bcc3:e6e8:6efa) (Quit: Leaving)
[17:12:16] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[17:13:06] <smallville7123> eg union { short a; float b; } p;       p.a = 5; float f = p.f;
[17:14:54] *** Quits: zsoltiv_ (~zsoltiv@45-134-238-132.naracom.hu) (Client Quit)
[17:15:09] *** Joins: zsoltiv_ (~zsoltiv@45-134-238-132.naracom.hu)
[17:15:11] <smallville7123> caze: right?
[17:16:38] *** Joins: soul-d (~uknown@user/soul-d)
[17:17:06] *** Quits: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it) (Ping timeout: 268 seconds)
[17:19:04] *** Quits: ironman (~ironman@2405:201:1010:b051:aebb:ac9b:cf88:4008) (Quit: Leaving)
[17:21:09] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[17:22:07] *** Quits: zsoltiv_ (~zsoltiv@45-134-238-132.naracom.hu) (Quit: Left)
[17:22:09] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:816b:2899:d068:2f42) (Ping timeout: 248 seconds)
[17:23:19] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[17:23:22] <constxd> smallville7123: that is UB
[17:24:44] *** Parts: fria (~siesta@112.207.33.219) ()
[17:26:37] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:714b:ca29:70b7:e937)
[17:29:08] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[17:29:54] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[17:30:32] *** Joins: Atque (~Atque@user/atque)
[17:32:53] *** Quits: chenqisu12 (~chenqisu1@183.217.202.44) (Ping timeout: 246 seconds)
[17:33:11] *** Joins: jesopo (~jess@libera/staff/cat/jess)
[17:33:20] *** jesopo is now known as jess
[17:35:55] <smallville7123> it would still be equivilant, even if it is UB, right?
[17:36:17] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:38:36] *** Quits: dld (~davidlowr@2601:197:600:1210:295d:ca2a:3a31:19f2) (Ping timeout: 240 seconds)
[17:39:53] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[17:42:31] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:42:48] <dave0> smallville7123: think of undefined behaviour as something that divides by 0 ... dividing by 0 is invalid, and your algorithm that divides by 0 makes no sense... that's what U.B. is for a program written in c
[17:42:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:43:23] <sham1> constxd: no it isn't
[17:43:29] <sham1> At least after C1999
[17:43:41] <smallville7123> dave0: i know
[17:43:42] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[17:43:59] <rcf> It's not undefined behavior, even though careless type punning with floats is where you will almost certainly encounter trap representations on modern hardware.
[17:44:08] <smallville7123> but provided the types are correct (and valid for such type punning), it would be correct right?
[17:44:15] <sham1> It'll certainly be a weird behaviour to go from a short to a float, but it's not UB
[17:44:22] <smallville7123> eg float to int32
[17:44:26] <smallville7123> and vice versa
[17:44:37] <constxd> i was quite sure that was ub
[17:44:38] <dave0> stick in a   assert(sizeof(int) == sizeof(float));
[17:44:39] <sham1> Well of course assuming a lot of things, but pretty much
[17:44:49] <sham1> _Static_assert is probably better
[17:44:58] <sham1> If you have it
[17:45:01] <constxd> if you want to reinterpret a short as float you'd need to use memcpy to do it safely iirc
[17:45:15] <sham1> You can do it with a union as well
[17:46:17] *** Joins: steve_ (~steve@ool-182c2b80.dyn.optonline.net)
[17:47:13] <smallville7123> this then?
[17:47:15] <smallville7123> GENERICS + TYPE PUNNING: Union p = new Union(typeof(int32_t), typeof(float)); p.set<int32_t>(5); float f = p.get<float>();
[17:47:27] <smallville7123> C: union { int32_t a; float b; } p;       p.a = 5; float f = p.f;
[17:47:28] <sham1> Umm
[17:47:32] <sham1> Yeah
[17:47:57] <smallville7123> both would be equivilant provided "Union" is correctly implemented, right?
[17:48:34] <sham1> Well only one of them is valid C, but I suppose so
[17:48:36] <smallville7123> even if union has multiple int32_t members (which basically aliases)
[17:48:39] <dave0> smallville7123: what are you going to use this for?
[17:48:50] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Remote host closed the connection)
[17:48:58] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[17:49:07] <smallville7123> correctly porting C math functions to C#
[17:49:27] <smallville7123> that make use of a C union for float/double conversions to and from integer
[17:49:36] <dave0> hmm ok
[17:49:37] <sham1> What mathematical function
[17:49:50] <smallville7123> eg      union {double f; uint64_t i;} ux = {x}, uy = {y}, ut;
[17:50:07] <sham1> Well you'd want to manipulate it as an unsigned integer probably
[17:50:13] <sham1> Since it's a bit representation
[17:50:52] *** Joins: siesta (~siesta@srv24711.blue.kundencontroller.de)
[17:50:57] <smallville7123> https://elixir.bootlin.com/musl/v1.1.9/source/src/math/hypot.c and https://elixir.bootlin.com/musl/v1.1.9/source/src/math/hypotf.c
[17:50:58] <fizzie> I kind of like the memcpy approach, since it completely sidesteps all those tiresome discussions about union-based type punning. And is more explicit about what's happening, arguably.
[17:51:09] <sham1> True
[17:51:11] <smallville7123> and https://elixir.bootlin.com/musl/v1.1.9/source/src/math/cbrt.c
[17:51:28] <dave0> fizzie: works in c90 too :-)
[17:51:35] <rcf> constxd: in this context memcpy would not be safer, in the sense that you would still hit trap representations without care and invoke UB.
[17:51:41] <smallville7123> and https://elixir.bootlin.com/musl/v1.1.9/source/src/internal/libm.h#L24 for hypotl.c
[17:52:08] <rcf> The only safe approach is to access it as a char array, rather than a single int.
[17:52:13] <dave0> you're not gonna trap a uint64_t so if you only go float->int you might be safe
[17:52:18] *** Joins: argonautx (~argonautx@i5E8672F6.versanet.de)
[17:52:33] <rcf> dave0: except that's exactly what is being done here.
[17:52:35] <sham1> But you might trap on the way from uint64_t to double
[17:52:45] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[17:53:08] <fizzie> ,cc float mul2(float x) { uint32_t bits; memcpy(&bits, &x, sizeof x); bits += 0x00800000; memcpy(&x, &bits, sizeof x); return x; } printf("%.2f", mul2(123.45)); // and so on
[17:53:10] <candide> fizzie: 246.90
[17:53:36] <sham1> Although with IEE 754, which is what these evil bithacks rely on, at worst it'd give you a NaN or an INF
[17:54:06] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:54:22] <smallville7123> which i am dealing eith IEE754
[17:54:25] <smallville7123> with*
[17:54:54] <sham1> Also, doesn't C# already have hypot and such in its Math library?
[17:55:04] <smallville7123> no
[17:55:27] <sham1> Really
[17:55:28] <smallville7123> probs on C/C++ side of .net but not on C# side
[17:55:30] <sham1> That's odd
[17:55:51] <sham1> Even Java has it, so one would think that Microsoft would have also included it
[17:56:10] <smallville7123> well it does in Java.Lang of Mono.Android.dll
[17:56:13] <smallville7123> https://docs.microsoft.com/en-us/dotnet/api/java.lang.math.hypot?view=xamarin-android-sdk-12
[17:56:14] <candide> Title of smallville7123's link: Math.Hypot(Double, Double) Method (Java.Lang) | Microsoft Docs
[17:56:58] <smallville7123> https://docs.microsoft.com/en-us/search/?terms=Hypot&category=Reference
[17:56:59] <candide> Title of smallville7123's link: Search | Microsoft Docs
[17:57:25] <smallville7123> https://docs.microsoft.com/en-us/search/?terms=cbrt&category=Reference
[17:58:35] <smallville7123> also it has cbrt in .net 2.1 but not in 2.0
[17:58:50] <smallville7123> but no hypot anywhere except java/android
[17:59:28] <smallville7123> and copysign is not present in .net standard at all
[18:00:04] <sham1> And I assume that you can't afford to get the overflows or underflows from doing `Math.Sqrt(x*x + y*y)`. I see
[18:01:37] <smallville7123> and why doesnt musl do that for its cbrt.c
[18:01:59] *** Quits: siesta (~siesta@srv24711.blue.kundencontroller.de) (Quit: leaving)
[18:02:14] <smallville7123> even in the lasest version it doesnt do that https://elixir.bootlin.com/musl/v1.2.2/source/src/math/cbrt.c
[18:02:18] <smallville7123> latest*
[18:04:45] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:04:45] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:04:45] *** Joins: wroathe (~wroathe@user/wroathe)
[18:05:31] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[18:09:10] *** Quits: Alhazred (~Alhazred@86.106.74.37) (Ping timeout: 272 seconds)
[18:10:17] *** Joins: Alhazred (~Alhazred@130.245.70.41)
[18:14:16] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:17:29] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:18:23] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 246 seconds)
[18:20:31] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[18:20:50] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:816b:2899:d068:2f42)
[18:20:53] <avar> Given a constant compile-time string & int variable (say an enum with 1-100 elements I'd like to return another constant compile-time string. Basically a gettext() replacement.
[18:21:37] <avar> I haven't implemented this yet, but are modern compilers like gcc/clang smart enough to e.g. see that a huge (generated code) chain of if/else if/else if strcmp()'s are something they can optimize to e.g. the equivalent in a "byte at a time" nested case statement?
[18:22:04] <avar> So not a C question I suppose, but a modern compiler optimization question...
[18:22:23] <nitrix> If it's numeric and the integers are close enough, it'll turn into an array lookup / jump table.
[18:22:46] *** Quits: constxd (~brad@142.134.78.128) (Remote host closed the connection)
[18:23:42] <nitrix> A switch case does the job. I haven't heard of it working the other way though, knowing to build hash tables for cascades of string comparisons.
[18:24:18] <smallville7123> avar: so basically a compile-time lookup table?
[18:24:24] *** Joins: zacts (~zacts@user/zacts)
[18:25:48] <nitrix> "byte at a time" nested case still has some poor O(n*m) ish time complexity, depending on the number of strings compared and their lengths.
[18:26:30] <nitrix> I'd personally put my own hashmap in front for O(1).
[18:27:04] *** Quits: coaxing (~coaxing@user/coaxing) (Quit: WeeChat 3.4.1)
[18:28:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 248 seconds)
[18:28:42] *** Joins: tejr (tejr@user/tejr)
[18:29:08] <avar> smallville7123: Yeah, basically: https://godbolt.org/z/rrnYWW7nj
[18:29:22] <avar> nitrix: Yes obviously a hash table! But I'd like to be lazy while pretending to be clever! :)
[18:30:11] <nitrix> For simple integer enums, you usually can be, that's why the optimizations are there.
[18:30:24] <nitrix> Once you involve strings, you're the one managing those data structures.
[18:30:36] *** Quits: fe23 (~fe23@2409:8a34:465:ec80:5822:254e:7c4b:3f7) (Ping timeout: 240 seconds)
[18:31:30] *** Joins: fe23 (~fe23@2409:8a34:465:ec80:5822:254e:7c4b:3f7)
[18:33:03] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[18:33:19] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[18:33:22] *** Joins: dld (~davidlowr@107.126.253.180)
[18:33:31] <NRK> is this cool `struct s = { .y = get_x(&s.x) };` ?
[18:33:47] <NRK> or is there some undefined stuff going on here?
[18:34:31] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 260 seconds)
[18:35:55] <fizzie> I feel like that should be okay as long as you don't have an initializer for the `x` subobject, but I wouldn't want to bet my life on it.
[18:35:58] <avar> nitrix: I was basically hoping for this but with the strcmp: https://godbolt.org/z/7hsPo59TM
[18:36:26] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[18:37:25] <fizzie> It's very much not equivalent with your original code though, because the function would now return "ze foo" even for "frob", not just for "foo".
[18:38:41] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 246 seconds)
[18:39:07] *** Quits: dld (~davidlowr@107.126.253.180) (Ping timeout: 268 seconds)
[18:39:14] <NRK> i was previously doing this `int tmp = 0; struct s = { .y = get_x(&tmp), .x = tmp };` which left s.x 0, so i assume there's no sequence point there.
[18:39:44] <fizzie> Yeah, that part is clear.
[18:39:49] <fizzie> ,c11 6.7.9p23
[18:39:49] <candide> http://www.iso-9899.info/n1570.html#6.7.9p23 [Initialization] The evaluations of the initialization list expressions are indeterminately sequenced with respect to one another and thus the order in which any side effects occur is unspecified.152) FOOTNOTE.152 In particular, the evaluation order need not be the same as the order of subobject initialization.
[18:40:00] *** Joins: JanC (~janc@user/janc)
[18:40:22] *** Joins: SaltHilStroller_ (~SaltHillS@199.249.111.186)
[18:40:26] <fizzie> The "order of subobject initialization", on the other hand, is in declaration order.
[18:40:37] *** Joins: dld (~davidlowr@107.126.253.180)
[18:40:50] <fizzie> ,c11 6.7.9p19
[18:40:51] <candide> http://www.iso-9899.info/n1570.html#6.7.9p19 [Initialization] The initialization shall occur in initializer list order, each initializer provided for a particular subobject overriding any previously listed initializer for the same subobject;151) all subobjects that are not initialized explicitly shall be initialized implicitly the same as objects that have static storage duration. FOOTNOTE.151 Any initial... <truncated; https://0x0.st/obK4.txt>
[18:41:44] <fizzie> I think the subtlety in your question is when exactly the implicit initialization of `x` (to zero) happens, and whether that can run into trouble with get_x writing through the pointer it's given.
[18:41:55] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[18:43:13] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[18:44:18] <NRK> yeh.. it seems to be working
[18:44:20] <NRK> but then again ,tias
[18:45:58] *** Joins: Cyp_ (~cyp@213.237.84.236)
[18:46:08] *** Joins: tech_exorcist_ (13203@user/tech-exorcist/x-0447479)
[18:46:18] <NRK> i guess i could do this `struct s = { .y = get_x(&tmp), .x = (get_x(&tmp), tmp) };`
[18:46:23] *** Quits: Cyp (~cyp@213.237.84.236) (Ping timeout: 260 seconds)
[18:46:32] *** Quits: SaltHilStroller_ (~SaltHillS@199.249.111.186) (Ping timeout: 272 seconds)
[18:47:10] <avar> fizzie: Yes, anyway memcmp() seems to have bee what I needed: https://godbolt.org/z/zWK46rGK5
[18:47:57] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[18:48:26] <NRK> > all subobjects that are not initialized explicitly shall be initialized implicitly the same as objects that have static storage duration.
[18:49:04] <NRK> ahh wait, "same as static storage". then it should be fine. cus static storage objects are initialized ""before program startup" iirc
[18:49:28] <NRK> ,c11 5.1.2
[18:49:29] <candide> http://www.iso-9899.info/n1570.html#5.1.2 [Execution environments] 1 Two execution environments are defined: freestanding and hosted . In both cases, program startup occurs when a designated C function is called by the execution environment. All objects with static storage duration shall be initialized (set to their initial values) before program startup. The manner and timing of such initialization are o... <truncated; https://0x0.st/obKx.txt>
[18:52:44] *** Joins: siesta (~siesta@srv24711.blue.kundencontroller.de)
[18:52:49] *** Joins: kts (~kts@103.73.237.148)
[18:56:32] <fizzie> Eh, I don't think it means anything more than to the same *values* as static storage, not in the same manner.
[19:03:02] *** Quits: Cyp_ (~cyp@213.237.84.236) (Quit: Konversation terminated!)
[19:03:26] *** Joins: strajder (~strajder@user/strajder)
[19:04:03] *** Joins: Cyp_ (~cyp@213.237.84.236)
[19:04:22] *** Joins: brad_mssw|mac (~bhouse@99-101-56-67.lightspeed.jcvlfl.sbcglobal.net)
[19:04:58] *** Joins: Akiva (~Akiva@user/Akiva)
[19:05:49] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:714b:ca29:70b7:e937) (Ping timeout: 240 seconds)
[19:05:59] *** Quits: f__ (~f@2607:f598:bbda:2e0:61af:21ff:806f:c19f) (Remote host closed the connection)
[19:06:13] *** Joins: f__ (~f@2607:f598:bbda:2e0:ce97:37ce:e39c:1b9e)
[19:06:20] *** Quits: dld (~davidlowr@107.126.253.180) (Ping timeout: 246 seconds)
[19:08:33] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[19:09:11] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 256 seconds)
[19:11:08] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[19:11:38] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[19:13:24] *** Joins: unlink2 (~unlink@p200300ebcf023c003405202aedecaeca.dip0.t-ipconnect.de)
[19:13:45] *** Quits: Cyp_ (~cyp@213.237.84.236) (Excess Flood)
[19:13:47] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Quit: Leaving)
[19:14:17] *** Joins: Cyp_ (~cyp@213.237.84.236)
[19:15:27] *** Quits: jellyknight (~gelignite@d5365b83.access.ecotel.net) (Quit: Stay safe!)
[19:16:47] *** Joins: v9fk (~quassel@user/v9fk1yn3nu)
[19:17:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[19:18:06] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:19:03] *** Quits: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net) (Ping timeout: 260 seconds)
[19:19:10] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[19:20:45] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[19:21:55] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[19:22:00] *** Joins: Inline (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de)
[19:23:37] *** Quits: fossforus (~stan@69-218-221-16.lightspeed.rlghnc.sbcglobal.net) (Quit: Leaving.)
[19:23:50] *** Quits: siesta (~siesta@srv24711.blue.kundencontroller.de) (Quit: leaving)
[19:24:05] *** Joins: fossforus (~stan@69-218-221-16.lightspeed.rlghnc.sbcglobal.net)
[19:24:22] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:24:56] *** Joins: coaxing (~coaxing@user/coaxing)
[19:25:09] *** Joins: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net)
[19:26:44] *** Joins: reedrichards (~f@2607:f598:bbda:2e0:93b:3756:f1e:6182)
[19:26:55] *** Quits: f__ (~f@2607:f598:bbda:2e0:ce97:37ce:e39c:1b9e) (Remote host closed the connection)
[19:28:34] *** Joins: dld (~davidlowr@2620:6e:6000:2900:38c1:e5a4:b065:9eb3)
[19:35:00] *** Quits: chomwitt (~chomwitt@2a02:587:dc1b:d600:c3a8:b4dc:b642:1f2) (Ping timeout: 240 seconds)
[19:35:23] *** Joins: fspax (~fspax@46.148.141.211)
[19:35:30] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Remote host closed the connection)
[19:39:52] *** Quits: v9fk (~quassel@user/v9fk1yn3nu) (Quit: Goodbye!)
[19:41:27] *** Joins: aghast (~aghast@2607:fb91:bd0b:1329:a0d6:4979:f73c:e2ec)
[19:41:29] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[19:42:12] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[19:42:38] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 268 seconds)
[19:43:10] *** Joins: mahmutov (~mahmutov@5.176.62.169)
[19:44:06] *** Quits: tech_exorcist (13203@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[19:44:06] *** Quits: tech_exorcist_ (13203@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[19:44:19] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[19:44:20] *** Joins: tech_exorcist (13203@user/tech-exorcist/x-0447479)
[19:47:34] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[19:49:30] *** Joins: sabry (~sabry@197.37.228.236)
[19:50:33] *** Quits: fspax (~fspax@46.148.141.211) (Ping timeout: 260 seconds)
[19:51:53] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 268 seconds)
[19:56:50] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[19:57:26] *** Quits: Alhazred (~Alhazred@130.245.70.41) (Ping timeout: 268 seconds)
[19:59:00] *** Joins: horribleprogram (~user@user/horribleprogram)
[19:59:03] <horribleprogram> yo guys
[19:59:17] <horribleprogram> u guys are usually the low-level gurus
[19:59:59] <horribleprogram> "If you are developing on 64-bit Linux, then you will get a response such as 'x86_64-unknown-linux-gnu'."
[20:00:01] <Bou> Nah those are over here -> ##asm
[20:00:22] <horribleprogram> gcc -dumpmachine outputs x86_64-linux-gnu
[20:00:36] <horribleprogram> why don't I have an "unknown"... is my gcc able to cross-compile?
[20:00:45] *** Quits: argonautx (~argonautx@i5E8672F6.versanet.de) (Quit: Leaving)
[20:01:00] <horribleprogram> Bou: yeah but they think they are better than everyone
[20:04:07] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[20:04:15] *** Joins: Alhazred (~Alhazred@172.58.227.71)
[20:06:50] <horribleprogram> they just laughed at me
[20:07:01] <horribleprogram> <horribleprogram> how do I build a cross-compiler		        [11:35]
[20:07:01] <horribleprogram> * boru chuckles.
[20:07:11] <horribleprogram> Bou: this is why I hate asking question there
[20:07:16] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:07:35] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 246 seconds)
[20:08:59] <horribleprogram> they just straight up mocking me now
[20:09:11] <horribleprogram> only one there that is nice is GeDaMo
[20:09:32] <horribleprogram> <horribleprogram> boru: what is JFC
[20:09:32] <horribleprogram> <horribleprogram> kk ty
[20:09:32] <horribleprogram> <moon-child> jequest for comments
[20:09:50] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[20:12:09] *** Quits: krzych (krzych@nroot.pl) (Remote host closed the connection)
[20:13:31] *** Joins: krzych (krzych@nroot.pl)
[20:13:36] <parrott> Hi
[20:14:27] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[20:14:59] <horribleprogram> parrott: don't just say Hi
[20:15:07] <horribleprogram> parrott: ask ur question ffs
[20:15:12] *** Quits: Alhazred (~Alhazred@172.58.227.71) (Ping timeout: 272 seconds)
[20:15:14] <parrott> Ok
[20:15:31] <Bou> And don't say hello or NRK gets all cranky :P
[20:15:32] <horribleprogram> it's implementation-defined behavior
[20:15:38] <horribleprogram> is the answer
[20:15:41] <parrott> Why would you ask how to compile in ##asm?
[20:15:51] <horribleprogram> cuz Bou sent me there
[20:16:08] <horribleprogram> they are losers
[20:16:30] <Bou> Only because you asked for low-level gurus, not for gcc help
[20:16:34] *** Joins: Alhazred (~Alhazred@86.106.74.39)
[20:16:40] <horribleprogram> so what channel should I join
[20:17:02] <horribleprogram> basically I just want to create a cross-compiler
[20:17:07] <horribleprogram> this isn't "how to compile"
[20:17:12] <parrott> The channel of your mind
[20:17:31] <horribleprogram> it obviously requires an understanding of the lower-level variables that a compiler needs... OS, CPU, executable format
[20:17:41] <parrott> Bruh
[20:18:11] <parrott> 🚬
[20:18:37] <horribleprogram> I don't see aynthing
[20:19:22] <parrott> Get a cane
[20:19:38] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 272 seconds)
[20:20:00] <nitrix> I think the knowledge necessary to write a compiler, yet alone a cross-compiler is something you either know you have, or progressively work towards as your goal.
[20:20:19] <nitrix> You wont find a StackOverflow or IRC answer that instantly transfer all of that knowledge for you.
[20:20:56] <horribleprogram> I'm not asking for that
[20:21:04] <horribleprogram> I'm literally asking for a way to determine 3 fkn things
[20:21:14] <horribleprogram> well 6
[20:21:21] <nitrix> You _literally_ wrote "<horribleprogram> basically I just want to create a cross-compiler".
[20:21:29] <horribleprogram> "create"
[20:21:33] <horribleprogram> i meant build
[20:21:36] <Bou> From scratch, or add a new target to gcc?
[20:21:45] <nitrix> Then write what you mean if you want to be understood.
[20:21:49] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Remote host closed the connection)
[20:21:49] <nitrix> We're not inside your brain.
[20:22:25] <horribleprogram> yeah you couldn't handle it
[20:22:26] <NRK> i think that's something you should ask in #gcc , no?
[20:22:34] <horribleprogram> that channel exists?
[20:22:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:22:48] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[20:22:50] <horribleprogram> I think they are not on libera
[20:22:54] <nitrix> horribleprogram, Keep swearing and insulting people. See how much that helps you towards solving your problem.
[20:22:56] <horribleprogram> mad_enz: i'm also from Toronto
[20:22:57] <NRK> yes. on libera.chat
[20:23:12] <horribleprogram> nitrix: i never insulted them, they laughed at me
[20:23:26] *** Quits: Church (~aleph@68.161.207.188) (Ping timeout: 272 seconds)
[20:23:28] <horribleprogram> kk ty
[20:23:39] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[20:24:17] <nitrix> I find "<horribleprogram> yeah you couldn't handle it" very petty and not the most inviting way for me to help you.
[20:24:42] <nitrix> Even though I'm perfectly familiar with GCC and Clang cross-compilation triples, how to set them up and how to use them.
[20:25:07] *** Joins: kee (~wizzwizz4@user/wizzwizz4)
[20:25:08] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[20:25:11] *** Parts: kee (~wizzwizz4@user/wizzwizz4) (⭘)
[20:25:13] *** Joins: kee (~wizzwizz4@user/wizzwizz4)
[20:25:50] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[20:25:51] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[20:26:32] *** Joins: magla (~gelignite@d5365b83.access.ecotel.net)
[20:26:52] <horribleprogram> nitrix: i meant cuz my name horribleprogram is a play on for my brain being coded improperly
[20:27:24] <horribleprogram> it means u couldn't handle how chaotic it is... choatic not in an intellectual way either... just... horrible
[20:27:30] <horribleprogram> :)
[20:27:34] *** Joins: iomari891 (~iomari891@105.112.138.38)
[20:27:38] <horribleprogram> ik but i'm in #gcc now
[20:28:00] <nitrix> There's also #workingset, which is usually where I see those type of questions and answer them.
[20:28:05] *** Quits: sabry (~sabry@197.37.228.236) (Quit: Client closed)
[20:28:08] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[20:28:13] <nitrix> Sorry, ##workingset.
[20:28:35] * nitrix brb after lunch.
[20:29:14] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:29:38] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[20:30:14] *** Quits: alch (~alch@151.68.227.74) (Read error: Connection reset by peer)
[20:31:37] <horribleprogram> https://wiki.osdev.org/Target_Triplet
[20:31:39] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[20:31:48] <horribleprogram> that's the link I was looking for, it perfectly answers my questions
[20:31:58] <horribleprogram> only #gcc sent it, and it was almost immediate
[20:32:10] <horribleprogram> ##asm laughed, #c turned into #therapy
[20:32:20] *** Joins: ckdCreations (~ckdCreati@147.55.133.135)
[20:32:32] <nitrix> We owe you nothing.
[20:33:44] <horribleprogram> true
[20:33:53] <horribleprogram> u don't even remember me
[20:34:00] <horribleprogram> u suggested a book years ago
[20:34:01] *** Joins: alch (~alch@151.36.228.198)
[20:34:07] <horribleprogram> King's C book
[20:34:22] <horribleprogram> C programming a modern approach
[20:34:41] <horribleprogram> it was a good intro
[20:34:45] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[20:34:48] <nitrix> I now recommend Effective C, which I believe to be better.
[20:34:49] <horribleprogram> so I do respect u
[20:34:55] <horribleprogram> :O
[20:35:26] <horribleprogram> Seacord is a beast
[20:35:39] <horribleprogram> he did the CERT C++ Secure Coding book i think as well
[20:35:57] <nitrix> Less good of an introduction and requires discipline, but covers C from start to finish and is incredibly accurate.
[20:36:16] <nitrix> Probably helps that it's written by a member of the Standard committee.
[20:36:31] <horribleprogram> mhm
[20:36:44] <Ali_A> speaking of that book, does it include linking and compilation stages with explanations?
[20:37:02] <horribleprogram> no
[20:37:11] <Ali_A> I am trying to find a book that covers those aspect from  the C perspective, sadly can not find anything online
[20:37:18] <horribleprogram> are u talking about King's book or Seacord's?
[20:37:21] <Ali_A> both
[20:37:22] <nitrix> No, it explains thems in terms of C: translation phases and symbol visibility.
[20:37:36] <horribleprogram> Ali_A: been looking for that for years
[20:37:45] <horribleprogram> closest is like
[20:37:50] <horribleprogram> Advanced C and C++ compiling
[20:38:06] <Ali_A> might be worth checking
[20:38:10] <horribleprogram> but there's not 1 book for that subject... u need like 5-6 intro books and a few manuals
[20:38:32] <gtlsgamr> So I am the guy that is trying to get cgi input and write it to a file. Now I get the user input from html from, but I cant write it to a file. It segfaults for a reason. Could someone enlighten me on why this happens and what is wrong with the code? --> http://0x0.st/obPv.txt
[20:38:35] *** Quits: reedrichards (~f@2607:f598:bbda:2e0:93b:3756:f1e:6182) (Remote host closed the connection)
[20:38:55] <horribleprogram> sure
[20:39:44] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com)
[20:39:57] <nitrix> Ali_A, Searching the standard for every instance of "linkage" (83) and "translation phase" (22), filtering out where they're only mentioned vs. where they're explained, you'd probably find out everything there is to know.
[20:40:08] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[20:40:36] <Ali_A> nitrix that is actually a nice way
[20:41:44] <nitrix> Gut feeling with doing that sort of exercise, it probably comes down to like 3 important paragraphs and 5 other little gotchas.
[20:42:28] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com) (Ping timeout: 260 seconds)
[20:42:29] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Remote host closed the connection)
[20:42:36] <nitrix> Everything else will how it's integrated with the rest of the language. Like how static/extern changes the linkage, etc.
[20:42:53] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[20:43:28] *** Joins: Matt|home (~matt@adsl-74-233-58-147.mia.bellsouth.net)
[20:44:30] <horribleprogram> wait wtf
[20:44:39] <horribleprogram> u can allocate 5500 bytes on the stack?
[20:44:50] <nitrix> We call that automatic storage, but yes.
[20:44:54] <horribleprogram> char Buffer[5500] = {0};
[20:44:55] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 268 seconds)
[20:45:06] <horribleprogram> jesus
[20:45:21] <nitrix> 5k bytes is very little. Most modern operating systems give you at least 8MB stack.
[20:45:32] <horribleprogram> stack frame u mean?
[20:45:41] <nitrix> There aren't frames.
[20:45:58] <horribleprogram> main() is one "part" of the stack
[20:46:10] <horribleprogram> the "part" I'm talking about
[20:46:26] <horribleprogram> why is he getting a segfault then
[20:46:28] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[20:46:31] <Bou> gtlsgamr: `if (pstr[1] && pstr[2])` looks 2 characters ahead of a '%', what do you think happens when a string ends with a %?
[20:46:49] <nitrix> Function calls don't have to create frames, that usually only happens for debugging purposes.
[20:46:58] <gtlsgamr> Guys
[20:47:00] <horribleprogram> nitrix: all
[20:47:00] <gtlsgamr> I fixed it.
[20:47:06] <nitrix> With GCC/Clang, you have to purposefully turn it off if you want to keep them (-fno-omit-frame-pointers)
[20:47:09] <Ali_A> nitrix I am not sure about the 8MB but I know most programs provide at least around 1MB (u can just pass a command line argument to increase the size tho)
[20:47:15] <gtlsgamr> It was because the file was not writable.
[20:47:18] <horribleprogram> gtlsgamr: how didf u fix it
[20:47:23] <gtlsgamr> the directory was read only
[20:47:28] <gtlsgamr> changed the permissions and now it works!
[20:48:14] <Bou> But doe it work when the string ends in %?
[20:48:32] <gtlsgamr> Let me check
[20:48:41] <Bou> (hint, it doesn't)
[20:48:57] <fizzie> (A valid URL-escaped string will never end in a % though.)
[20:49:08] <gtlsgamr> Bou: it does
[20:49:11] <fizzie> If you're actually planning to use this for something, I'd also recommend checking that sscanf returns 4, and not appending anything if not.
[20:49:12] <Bou> Can you be sure the input is valid though?
[20:49:12] <gtlsgamr> the strings are url-encoded
[20:49:39] <gtlsgamr> so even if it ends with %, you won't get % in the input string
[20:49:53] <gtlsgamr> 21:49      fizzie │  If you're actually planning to use this for something, I'd also recommend checking that sscanf returns 4, an )) --> I will be sure to add that!
[20:49:54] <horribleprogram> it's short circuited
[20:50:03] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 260 seconds)
[20:50:03] <fizzie> (Also put those field widths in the sscanf format.)
[20:50:10] *** Joins: malina (~malina@user/malina)
[20:50:35] <gtlsgamr> okay.
[20:50:36] <Bou> If you can be sure of that, and end-users have absolutely can't bypass that, no problem then
[20:50:55] <Bou> -have
[20:51:31] <horribleprogram> so the only way this code doesn't read out of bounds is assuming that % always has at least 2 characters of storage allocated after it?
[20:51:36] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (Quit: ZNC - https://znc.in)
[20:52:04] <horribleprogram> or the str passed to udcd here will always be formatted this way?
[20:52:28] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[20:53:23] <gtlsgamr> will alawys be formatted that way
[20:53:46] <gtlsgamr> https://www.tutorialspoint.com/html/html_url_encoding.htm
[20:53:57] <Bou> Even if some jerk sends a malformed request?
[20:54:05] <horribleprogram> those are all "1 byte"
[20:54:07] <gtlsgamr> and i will make sure of NOT NULL input by "required" field in the html code.
[20:54:12] <horribleprogram> % is followed by 1 byte
[20:54:21] <horribleprogram> 1f doesn't come as '1' 'f'
[20:54:44] <gtlsgamr> 21:53         Bou │  Even if some jerk sends a malformed reques )) --> You are right. I will have to think of that. There is no way someone can send a bad request via the form
[20:54:58] *** Joins: sabry (~sabry@197.37.228.236)
[20:55:27] *** Joins: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9)
[20:55:45] <horribleprogram> Bou: no that's an issue that's not even important here.. obviously this isn't production code... but the % encoding comes as bytes
[20:55:58] <fizzie> It does come as "%1f" in an URL-encoded string, not as "%\x1f". The whole point of the encoding is to not have the offensive bytes present in the string.
[20:56:04] <horribleprogram> OH
[20:56:06] <horribleprogram> nvm then
[20:56:16] <horribleprogram> yeah that's the entire reason for it
[20:56:17] <horribleprogram> lol
[20:57:16] <horribleprogram> just goes to show u that even I am capable of making errors, so don't beat yourself up when u make silly mistakes
[20:57:22] <gtlsgamr> fizzie: someone can still send a bad request manually though right?
[20:58:03] <Bou> Depends on who's doing that encoding, anything coming from the client can't be trusted
[20:59:27] <horribleprogram> gtlsgamr: u have to look at this as what byte ranges are being capable of getting to ur program
[21:00:24] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[21:00:30] <horribleprogram> I'm guessing the HTTP Request line thingy
[21:00:47] <horribleprogram> GET HTTP/1.1 OK has it's own format
[21:01:04] *** Joins: martinthewildpig (~martinthe@2a02:a03f:d8ee:9d00:d156:7928:3fcf:230d)
[21:01:06] <fizzie> Yeah, client-side validation is definitely something your server-side code shouldn't just blindly trust.
[21:01:17] <fizzie> I used to have a DSL modem/router appliance thing that was full of shell injection issues because of things like "we're using this string directly in a shell command, but it's safe because it comes from a drop-down list on the HTML form".
[21:01:57] <horribleprogram> lol
[21:02:18] <horribleprogram> yeah I think u can just be like document.getElementById('foo').text = '\00' prob
[21:03:15] <gtlsgamr> hmm...
[21:03:50] <kee> Bypass the browser entirely; just send HTTP requests directly.
[21:04:09] <horribleprogram> LOL
[21:04:14] <kee> (IE11 doesn't support null in the DOM, by the way.)
[21:04:14] <horribleprogram> oh speaking of that
[21:04:44] <horribleprogram> what is the Request header associated with the %-encoded document
[21:04:49] <Bou> You can `echo "GET /hello HTTP/1.0\r\nContent-type: kittens..." | nc google.com 80` quite easily
[21:05:16] <horribleprogram> dang
[21:05:21] <horribleprogram> y'all creep me out
[21:05:34] <horribleprogram> OH
[21:05:36] <kee> Protocols are just convention.
[21:05:40] <horribleprogram> the document is in the Request Header Line
[21:05:50] <horribleprogram> so the %-url encoded thing will be the 2nd field there?
[21:06:21] <horribleprogram> echo "GET /hello/%\x00 HTTP/1.0\r\n...." | hisserver ?
[21:06:24] <horribleprogram> would break his code?
[21:07:03] <gtlsgamr> It is a POST request.
[21:07:19] <Bou> It will have to be in the body of the POST yeah
[21:07:26] <horribleprogram> i see
[21:07:38] <gtlsgamr> curl can send POST requests
[21:07:50] <horribleprogram> fuck curl, just code it urself
[21:08:23] <gtlsgamr> I think there is a way to disable cross site POST requests
[21:08:32] <gtlsgamr> if I can do that then the problem is solved
[21:08:32] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[21:08:57] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[21:09:05] *** Parts: kee (~wizzwizz4@user/wizzwizz4) (⭘)
[21:09:17] *** Quits: vitimiti (~Celtor@2a02:c7e:b41:3500:6e96:16d7:589e:e993) (Remote host closed the connection)
[21:09:18] *** Quits: carlavilla (~carlavill@2a0c:5a84:3808:de00:21f:16ff:fe0f:275a) (Ping timeout: 260 seconds)
[21:09:40] <horribleprogram> no
[21:09:57] <horribleprogram> u solve it by calling this function that handles malformed %-encoded strings
[21:10:30] <horribleprogram> add a validate_percent_encoded_str(str); call
[21:10:48] <horribleprogram> if that returns -1, u throw out the post
[21:10:54] <horribleprogram> or w/e
[21:11:08] *** Joins: vitimiti (~Celtor@2a02:c7e:b41:3500:6e96:16d7:589e:e993)
[21:11:43] <horribleprogram> nitrix: oh he just came out with a new one btw
[21:12:01] <gtlsgamr> horribleprogram: alright. but for that I will have to see how malformed strings can be formed right?
[21:12:36] <horribleprogram> ask fizzie
[21:12:47] <horribleprogram> but i think that's basically ur best way
[21:13:18] <horribleprogram> ur basically looking at the syntax of URL-encoded strings... and rejecting anything that doesn't fit that
[21:13:38] <horribleprogram> so u iterate over each byte of a string... checking that each byte is a _printable character
[21:13:56] <horribleprogram> it may be more complicated then that tho but u get the point
[21:13:56] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[21:14:36] <horribleprogram> also cuz ur checking (buf[1] && buf[2]) ur looking aheah 2 bytes of a '%' character
[21:14:59] <horribleprogram> so u are imposing a sort of expectation there as well, so ur validate will have to make sure that it met
[21:15:14] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[21:15:42] *** Quits: sabry (~sabry@197.37.228.236) (Quit: Client closed)
[21:16:00] <horribleprogram> I'd read his Effective C book but I'm scared it's going to affect how I code in C++
[21:16:13] *** Joins: nostar (~nostar@68.51.221.108)
[21:16:37] <horribleprogram> i don't even know if "foo" is a const char[4] in C... in C++ it is
[21:16:48] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[21:16:48] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[21:16:48] *** Joins: nortoh (~nortoh@user/nortoh)
[21:17:24] <horribleprogram> meh fuck it ill check it out
[21:17:27] *** Parts: jess (~jess@libera/staff/cat/jess) ()
[21:17:29] <horribleprogram> take care bois have a good day
[21:17:32] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[21:17:58] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[21:18:38] *** Joins: quartz (~quartz@user/quartz)
[21:19:29] *** Quits: MajorBiscuit (~MajorBisc@c-001-003-047.client.tudelft.eduvpn.nl) (Ping timeout: 248 seconds)
[21:21:05] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 248 seconds)
[21:21:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:816b:2899:d068:2f42) (Ping timeout: 248 seconds)
[21:21:44] <quartz> Hello. I'm suppose to write a simple C program that is suppose to verify how a 2d int array is arranged in memory. I'm just a bit confused on how to do this. Is it asking me to loop through the array and access each element? Here is the question: https://i.ibb.co/LtqmM84/image.png
[21:22:47] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:23:03] *** Joins: meator (~meator@user/meator)
[21:24:32] <supakeen> It's quite literally the part at `b)`.
[21:24:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:26:06] <quartz> supakeen: But I'd still need to loop through the array?
[21:26:53] <NRK> that's undefined behavior.
[21:27:02] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:27:10] <supakeen> No, they want you to write a program that accesses a certain value of a '2d array' then look at its assembly to verify that it's actually doing what they say it does.
[21:28:07] *** Quits: SR-71 (~user@user/SR-71) (Ping timeout: 260 seconds)
[21:28:17] *** Joins: SR-71 (~user@user/SR-71)
[21:28:22] <nitrix> A debugger seems like a better fit to verify what's in memory. This is UB with C.
[21:28:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:29:03] <supakeen> It's a terrible question and as the others have said it is undefined, but you can write it and you can look at the output to see how it accesses things in a '2d array'.
[21:29:19] <quartz> supakeen: So I literally just need to create some 2d array and access ANY element in it?
[21:29:36] <supakeen> quartz: and then look at the assembly if it does what they say it does
[21:29:36] <quartz> I was just trying to do this: https://godbolt.org/z/hfcrGhdv3
[21:30:02] <supakeen> I feel like testing 1 value is the same as testing all the values but hey, if you want to do some more work 🙂
[21:30:32] <NRK> ,c11 apparently accessible
[21:30:34] <candide> http://www.iso-9899.info/n1570.html#J.2p1 [Undefined behavior] The behavior is undefined in the following circumstances: -- A ``shall'' or ``shall not'' requirement that appears outside of a constraint is violated (clause 4). -- A nonempty source file does not end in a new-line character which is not immediately preceded by a backslash character or ends in a partial preprocessing token or comment (5.1.1.2... <truncated; https://0x0.st/obZH.txt>
[21:31:03] <nitrix> I also don't know where that + sizeof (int) comes from. It should probably be a multiplication.
[21:31:19] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[21:31:32] *** Joins: JanC (~janc@user/janc)
[21:31:33] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[21:32:13] <nitrix> Whatever you'll learn from this exercise seems like it'll set you back more than help you progress.
[21:33:40] <quartz> nitrix: Why?
[21:33:43] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[21:35:09] <quartz> supakeen: Sorry, but the compiler is giving me some error: https://godbolt.org/z/7q633YeqP
[21:35:14] <quartz> Would you mind taking a look
[21:36:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[21:37:16] *** Joins: Oddity (~Oddity@user/oddity)
[21:37:47] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[21:38:37] *** Quits: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net) (Ping timeout: 240 seconds)
[21:40:03] <fizzie> What I'd write (to be "simple and contain and access such an array") would be something along the lines of https://godbolt.org/z/a3Ko56baj -- which (with some effort) I imagine you should be able to use to explain how the address of an element is calculated.
[21:41:29] <fizzie> I guess you can argue about whether it "contains" such an array, or even whether it's a (complete) "program", but still.
[21:41:44] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:42:03] *** Joins: constxd (~brad@142.134.78.128)
[21:42:11] <constxd> kings
[21:42:21] *** Joins: nvmd (~weechat@user/nvmd)
[21:42:36] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 272 seconds)
[21:42:53] <quartz> fizzie: I don't understand how this works because you never call get
[21:43:09] *** Joins: Dean (~Dean@165-73-119-228.ip.afrihost.capetown)
[21:43:58] *** Joins: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net)
[21:44:34] <fizzie> I'm asking the compiler to make me a function with external linkage. It can't know whether I'm going to be calling it at some point or not before I actually link it into an executable.
[21:46:36] <fizzie> The point is, the code for the function `get` inherently must show how you'd access element a[i][j] for any values of i, j. So it's the general case, not any particular special case.
[21:46:40] *** Joins: chomwitt (~chomwitt@2a02:587:dc19:3600:aabd:edaf:cb83:4282)
[21:48:01] *** Quits: cuanim (~cuanim@user/cuanim) (Quit: Leaving)
[21:48:10] <quartz> Uhhh
[21:48:40] <quartz> fizzie: How do you know your solution is correct? I'm looking at the assembly output.
[21:49:29] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[21:49:34] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 272 seconds)
[21:49:59] <quartz> It should show something similiar to a + (3 * i * j) * sizeof(int)
[21:50:11] <fizzie> No, it shouldn't.
[21:50:27] <fizzie> It (spoilers) should show a + ((i*3)+j)*4, which it does.
[21:50:50] <fizzie> Or equivalently a + i*3*4 + j*4.
[21:51:55] <quartz> fizzie: So you're saying my answer for part b is wrong? :(
[21:52:15] <fizzie> Well, I didn't want to just come out and say it, because of the learning aspect, but you made me do it.
[21:52:28] *** Quits: mahmutov (~mahmutov@5.176.62.169) (Ping timeout: 260 seconds)
[21:53:43] <fizzie> But you should probably check what your expression in part (b) evaluates to for the six possible values, and specifically that it gives an ascending sequence of numbers for the order you've listed in part (a).
[21:54:06] *** Quits: aghast (~aghast@2607:fb91:bd0b:1329:a0d6:4979:f73c:e2ec) (Remote host closed the connection)
[21:54:35] <pragma-> fizzie: behold
[21:54:44] <pragma-> ,c11 7.22.2.2p2 -text If.srand.*
[21:54:44] <candide> http://www.iso-9899.info/n1570.html#7.22.2.2p2 [The srand function] ... If srand is then called with the same seed value, the sequence of pseudo-random numbers shall be repeated. If rand is called before any calls to srand have been made, the same sequence shall be generated as when srand is first called with a seed value of 1.
[21:55:14] <fizzie> That's the fanciest thing I've seen. Too bad about the example.
[21:55:28] <pragma-> ,c11 7.22.2.2p2 -text If.srand.*repeated.
[21:55:28] <candide> http://www.iso-9899.info/n1570.html#7.22.2.2p2 [The srand function] ... If srand is then called with the same seed value, the sequence of pseudo-random numbers shall be repeated. ...
[21:55:49] * pragma- pats ellipsis.
[21:56:26] <fizzie> I really wanted the last sentence, TBH. But yeah. Very nice. I think there's approximately zero chance I'll remember that exists the next time I want to quote a part.
[21:56:33] *** Quits: LuKaRo (~LuKaRo@p4fc32a2c.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[21:57:15] <fizzie> Do you want to also edit your text version of the standard to include the markdown-inspired `foo` for monospaced text and /foo/ for italics that I always manually apply? That'd save me so much time.
[21:57:42] *** Joins: jellie (~luv_panda@user/jellie)
[21:59:14] <pragma-> hmm, there are leading spaces to indent paragraphs, so the -text match can't just use `.` for spaces. It needs `\s+`. Bit painful.
[21:59:26] <pragma-> ,c11 7.22.2.2p2 -text If\s+rand\s+is+\s+called.*
[21:59:26] <candide> http://www.iso-9899.info/n1570.html#7.22.2.2p2 [The srand function] ... If rand is called before any calls to srand have been made, the same sequence shall be generated as when srand is first called with a seed value of 1.
[21:59:32] <pragma-> That's kind of horrible.
[22:00:09] <pragma-> Perhaps I can do some preprocessing for the -text bit.
[22:00:15] * pragma- fiddles with it for a bit.
[22:01:09] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::beb)
[22:01:48] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::beb) (Client Quit)
[22:02:45] <quartz> fizzie: OK thanks for your help
[22:04:57] <pragma-> Okay. `.` is fine now.
[22:05:11] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:06:33] <quartz> fizzie: One other question, why do you use -O2 flag instead of -S?
[22:08:10] <fizzie> -S is implied on godbolt.org, because the whole point of the site is to see the assembly. And I added -O2 because it tends to result in less verbose output than the default (-O0).
[22:08:57] <fizzie> (Your question suggested `-O -S`, which is also fair enough; that's the same as `-O1 -S`.)
[22:10:04] *** Joins: alex11 (~alex11@user/alex11)
[22:11:09] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:12:17] *** Quits: cart_ (~cart@host-78-144-123-112.as13285.net) (Quit: Konversation terminated!)
[22:12:51] *** Joins: LuKaRo (~LuKaRo@p200300dfa72b1d372a0e3d5e954163f2.dip0.t-ipconnect.de)
[22:17:40] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:23:02] *** Joins: Oddity (~Oddity@user/oddity)
[22:23:27] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[22:24:27] *** Quits: Dean (~Dean@165-73-119-228.ip.afrihost.capetown) (Quit: Lost terminal)
[22:26:16] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[22:26:50] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Read error: Connection reset by peer)
[22:27:00] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[22:27:35] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[22:29:00] *** Joins: teepee_ (~teepee@openscad/teepee)
[22:29:00] <quartz> fizzie: Thanks so much
[22:29:27] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[22:29:27] *** teepee_ is now known as teepee
[22:30:58] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[22:31:19] *** Quits: trev (~trev@user/trev) (Quit: trev)
[22:32:23] *** Joins: jw4_ (~jw4@user/jw4)
[22:33:55] *** Joins: karakedi (~eAC53C340@user/karakedi)
[22:34:01] *** Joins: Tangent-Man (~Tang3nt-M@mutantalien.plus.com)
[22:35:47] *** Quits: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net) (Ping timeout: 256 seconds)
[22:35:48] *** Quits: Tangent-Man (~Tang3nt-M@mutantalien.plus.com) (Remote host closed the connection)
[22:36:13] *** Joins: Tangent-Man (~Tang3nt-M@mutantalien.plus.com)
[22:42:49] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[22:47:18] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:47:23] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:48:28] *** Joins: kkd (uid425746@id-425746.lymington.irccloud.com)
[22:53:57] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[22:55:50] *** Quits: kts (~kts@103.73.237.148) (Quit: Konversation terminated!)
[22:56:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:56:49] *** Quits: fe23 (~fe23@2409:8a34:465:ec80:5822:254e:7c4b:3f7) (Quit: fe23)
[22:57:40] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[22:59:13] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Ping timeout: 248 seconds)
[22:59:16] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:00:08] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 246 seconds)
[23:00:08] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 246 seconds)
[23:00:12] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:00:31] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[23:01:24] *** Joins: Akuli (~Akuli@87-94-108-212.bb.dnainternet.fi)
[23:02:03] *** Joins: rgrinberg (~textual@177.248.158.166)
[23:02:39] *** Quits: seifeslimene_ (~seifeslim@197.2.10.72) (Quit: Konversation terminated!)
[23:02:52] *** Joins: seifeslimene_ (~seifeslim@197.2.10.72)
[23:02:55] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[23:03:16] *** Joins: mahmutov (~mahmutov@5.176.62.169)
[23:04:19] *** Joins: seninha (~seninha@user/seninha)
[23:05:36] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:05:44] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 246 seconds)
[23:06:15] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[23:10:04] *** Joins: Thedarkb-Desktop (~Thedarkb@78.141.240.26)
[23:10:27] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[23:12:23] *** Quits: Thedarkb1-Deskto (~Thedarkb@92.40.196.0.threembb.co.uk) (Ping timeout: 246 seconds)
[23:13:26] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 250 seconds)
[23:14:10] *** Quits: HardWall (~NeckLek@89.137.113.39) (Quit: Leaving)
[23:14:47] *** Quits: martinthewildpig (~martinthe@2a02:a03f:d8ee:9d00:d156:7928:3fcf:230d) (Quit: Client closed)
[23:16:00] *** Quits: Alhazred (~Alhazred@86.106.74.39) (Ping timeout: 268 seconds)
[23:23:39] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Quit: ZNC 1.8.2 - https://znc.in)
[23:24:53] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[23:29:55] *** Quits: jw4_ (~jw4@user/jw4) (Quit: leaving)
[23:31:03] *** Quits: fwg (~fwg@user/fwg) (Ping timeout: 260 seconds)
[23:31:33] *** Joins: ko (~i.am@user/marlboro)
[23:31:46] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Remote host closed the connection)
[23:31:59] *** Quits: unknow (~i.am@user/marlboro) (Ping timeout: 246 seconds)
[23:32:15] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[23:32:52] *** Joins: fwg (~fwg@user/fwg)
[23:33:11] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[23:34:22] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Remote host closed the connection)
[23:35:08] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[23:35:14] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Remote host closed the connection)
[23:35:56] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[23:36:58] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[23:37:03] *** Joins: reset (~reset@user/reset)
[23:40:02] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Remote host closed the connection)
[23:43:55] *** Quits: rgrinberg (~textual@177.248.158.166) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:43:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[23:44:14] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[23:45:44] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:46:13] *** Joins: kuber (~kuber@75-172-6-223.tukw.qwest.net)
[23:46:41] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 248 seconds)
[23:46:50] *** Quits: geeknix (~pi@2001:e68:5432:af1f:781b:3d59:e4b7:2808) (Ping timeout: 268 seconds)
[23:49:54] *** Quits: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it) (Ping timeout: 272 seconds)
[23:50:13] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[23:55:25] *** kenanmarasli_ is now known as kenanmarasli
[23:58:36] *** Joins: zacts (~zacts@user/zacts)
