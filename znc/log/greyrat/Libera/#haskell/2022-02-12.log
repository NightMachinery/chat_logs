[00:00:48] *** Joins: trccc (~trccc@2-104-60-169-cable.dk.customer.tdc.net)
[00:01:56] <trccc> Is there a way to get the path to where cabal put its compiled executable? e.g. I know it is here: ./dist-newstyle/build/x86_64-linux/ghc-8.10.7/hs-hello-sleep-0.1.0.0/x/hs-hello-sleep/build/hs-hello-sleep/hs-hello-sleep but can I issue some cabal command to print the path so I can get it in my scripts?
[00:02:32] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[00:04:24] <monochrom> cabal list-bin can help. Something along the line of cabal list-bin hs-hello-sleep
[00:04:59] <trccc> perfect thanks!
[00:05:19] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[00:06:08] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[00:07:03] <sm> hololeap: sounds like a good  move
[00:10:41] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 252 seconds)
[00:11:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:11:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:11:12] *** Joins: wroathe (~wroathe@user/wroathe)
[00:12:29] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[00:12:31] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:13:47] *** Joins: gentauro (~gentauro@user/gentauro)
[00:14:45] *** Joins: akegalj (~akegalj@93-138-76-199.adsl.net.t-com.hr)
[00:14:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:18:29] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 250 seconds)
[00:18:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:19:07] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[00:20:44] <janus> hololeap: that package also takes forever to build for me
[00:21:07] <janus> hololeap: i did 'cabal repl -b lsp-types -w ghc-9.0.2' and i have waited a while now
[00:21:48] <janus> and then i get "warning: no exposed modules"
[00:22:29] <hololeap> hm, I don't know about that. This panic happens almost immediately for me. I tried it in another environment and it at least begins to compile, so it seems like cleaning up that env is the best idea 
[00:22:53] <janus> well it does compile
[00:22:57] <janus> and it did finish just now
[00:26:10] *** Joins: econo (uid147250@user/econo)
[00:28:09] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 256 seconds)
[00:29:01] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[00:33:02] *** Joins: tfeb (~tfb@88.98.95.237)
[00:35:35] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[00:38:41] *** Quits: trccc (~trccc@2-104-60-169-cable.dk.customer.tdc.net) (Quit: Client closed)
[00:39:51] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:39:55] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Remote host closed the connection)
[00:40:30] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[00:40:44] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[00:42:10] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Ping timeout: 260 seconds)
[00:42:38] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[00:44:01] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[00:50:21] *** Joins: slowtype- (~slowtyper@2a02:214c:863d:a00:1d20:d7d8:59c2:b643)
[00:51:00] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 250 seconds)
[00:51:01] *** Quits: cosimone (~user@93-47-230-95.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[00:51:40] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:51:55] *** Joins: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk)
[00:56:24] *** Quits: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[00:57:03] *** Quits: slowtype- (~slowtyper@2a02:214c:863d:a00:1d20:d7d8:59c2:b643) (Ping timeout: 250 seconds)
[00:57:43] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[00:58:06] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:00:31] *** Joins: vicfred_ (~vicfred@user/vicfred)
[01:03:09] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[01:03:10] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 260 seconds)
[01:03:17] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[01:04:57] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Quit: leaving)
[01:06:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:09:38] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[01:11:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[01:17:22] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:19:07] *** Joins: Guest80 (~Guest80@177.70.94.186)
[01:19:23] *** Quits: Guest80 (~Guest80@177.70.94.186) (Client Quit)
[01:19:57] *** Quits: ravella (~ravella@user/ryanavella) (Ping timeout: 240 seconds)
[01:20:50] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[01:21:31] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8) (Ping timeout: 250 seconds)
[01:22:37] *** Joins: alp (~alp@user/alp)
[01:23:01] *** Joins: Pickchea (~private@user/pickchea)
[01:24:20] *** Quits: michalz (~michalz@185.246.204.65) (Remote host closed the connection)
[01:29:13] *** Quits: akegalj (~akegalj@93-138-76-199.adsl.net.t-com.hr) (Quit: leaving)
[01:29:49] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8)
[01:30:39] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[01:39:27] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:40:37] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[01:42:45] *** Joins: slowtype- (~slowtyper@2a02:214c:8615:200:883a:9d96:1ea3:a070)
[01:42:57] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 256 seconds)
[01:46:34] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ad86:5044:3d0e:26e7) (Remote host closed the connection)
[01:46:50] *** Quits: haskl (~haskl@user/haskl) (Ping timeout: 256 seconds)
[01:47:15] *** Joins: haskl (~haskl@user/haskl)
[01:50:27] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:53:32] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 252 seconds)
[01:56:18] *** Joins: alx741 (~alx741@157.100.197.240)
[02:00:08] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:01:53] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 256 seconds)
[02:02:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[02:04:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:05:35] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[02:05:37] *** Quits: slowtype- (~slowtyper@2a02:214c:8615:200:883a:9d96:1ea3:a070) (Ping timeout: 256 seconds)
[02:05:38] *** Joins: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk)
[02:09:00] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[02:09:30] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 256 seconds)
[02:10:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:12:02] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:16:34] *** Joins: alx741 (~alx741@157.100.197.240)
[02:19:05] *** Joins: slowtype- (~slowtyper@46.12.42.68.dsl.dyn.forthnet.gr)
[02:19:08] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 256 seconds)
[02:19:15] *** Quits: rtsn (~nstr@user/rtsn) (Quit: Lost terminal)
[02:20:39] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:21:09] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:21:31] *** Quits: max22- (~maxime@2a01cb08833598003ad46ecd074981ca.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:27:15] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[02:27:36] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:28:51] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8) (Ping timeout: 256 seconds)
[02:29:06] *** Joins: Guest|11 (~Guest|11@96.63.212.186)
[02:31:24] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[02:31:32] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:34:11] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[02:37:04] *** Quits: Guest|11 (~Guest|11@96.63.212.186) (Quit: Connection closed)
[02:37:23] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:38:31] *** Joins: vysn (~vysn@user/vysn)
[02:39:19] *** Joins: alx741 (~alx741@157.100.197.240)
[02:43:03] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[02:43:23] <hololeap> I'm still not great at reasoning about lazy/strict evaluation and how it influences space/time metrics
[02:43:36] <hololeap> but it seems like comonads are especially difficult to reason about
[02:44:39] <hololeap> if you set up a cellular automata simulation that's modeled with the store comonad, the naive implementation seems to have something like O(2^n) time for each step of the simulation
[02:45:33] <hololeap> but if you set it up with a Representable array backend you don't have this problem. I'm still confused as to why
[02:47:40] <hololeap> [1] https://hackage.haskell.org/package/adjunctions-4.4/docs/Control-Comonad-Representable-Store.html
[02:47:46] <hololeap> [2] https://hackage.haskell.org/package/vector-sized-1.5.0/docs/Data-Vector-Generic-Sized.html#t:Representable
[02:50:15] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[02:51:35] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[02:51:50] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:52:08] <monochrom> If it's as bad as 2^n time, it may be unrelated to laziness or eagerness. More like redundant recursion.
[02:52:56] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:53:19] <monochrom> For example changing "f(n) = let y = f(n-1) in y+y" to "f(n) = f(n-1) + f(n-1)" is a simple way to turn n-time into 2^n-time. This holds for both lazy and eager evaluation.
[02:54:02] <Rembane> Is Representable perhaps doing memoization for you? I'm just guessing here.
[02:54:54] <monochrom> Yeah "array backend" begins to sound like automatic dynamic-programming-ization, but I haven't learned comonad or store.
[02:55:41] <monochrom> But it corroborates with 2^n -> n like my example.
[02:56:41] <hololeap> yeah it's storing each step to the vector with [1]. I think this does have something to do with strictness, though, since if it wasn't *actually* storing to the vector but just building up thunks saying to do so later, wouldn't I run into the same 2^n-time problem as before?
[02:56:57] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 240 seconds)
[02:57:03] <dolio> I don't think it has anything to do with strictness.
[02:57:06] <geekosaur> not necessarily, it'd just do the O(n) late
[02:57:11] <dolio> It has to do with functions being a bad implementation of arrays.
[02:57:22] <hololeap> ok
[02:57:35] <hololeap> so this is somewhat specific to the store comonad
[02:57:54] <hololeap> since Store s a = (s -> a, s)
[02:58:39] <hololeap> if it memoizes between each mutation you get the same semantics but much better time
[02:58:50] <dolio> Yes, all the work done by the function is not shared across separate invocations of the function with the same input.
[02:59:30] <dolio> And every time you split, you introduce a new dimension for work to avoid being shared.
[03:00:11] <hololeap> oh... this sounds like it could be related to linear types
[03:00:52] <hololeap> like you could have some automatic memoization thing using linear types... I'm also not very familiar with linear types :p
[03:02:29] *** Quits: slowtype- (~slowtyper@46.12.42.68.dsl.dyn.forthnet.gr) (Ping timeout: 250 seconds)
[03:02:33] <hololeap> I guess my other question is if you run `extend` on this Store implementation from adjunctions, would there be some intermediate moment where you would have effectively squared the memory requirements of your vector?
[03:03:05] <hololeap> since it just uses the default definition of `extend f = fmap f . duplicate`
[03:03:06] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[03:03:27] <hololeap> and duplicate on a 100x100 vector would be 10,000 100x100 vectors
[03:03:35] <hololeap> unless laziness somehow saves the day here
[03:04:29] <hololeap> I wouldn't even know how to investigate this if I wanted to
[03:04:30] <geekosaur> or purity (shared?)
[03:06:28] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[03:07:30] <dolio> It doesn't seem like the problem is strictness/laziness. It is thinking about references.
[03:07:57] <hololeap> specifically because I'm talking about vector though...
[03:08:25] <hololeap> right?
[03:08:45] <hololeap> if it was a different Representable, it would have to do with strictness/laziness
[03:09:02] <hololeap> *and then my brain melts*
[03:09:33] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:95db:50d7:7eec:328d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:10:40] <monochrom> The Vector you used is likely lazy in elements, only eager in spine.
[03:10:45] <dolio> If I create an array of length N of arrays of length N of integers, and every element of the outer array is the same array, how much memory does it use?
[03:10:57] *** Joins: alx741 (~alx741@157.100.197.240)
[03:11:06] <hololeap> I have no idea, dolio :)
[03:11:06] *** Joins: slowtype- (~slowtyper@2a02:214c:8494:a100:8f:b3ce:d37b:a68d)
[03:11:43] <monochrom> Furthermore, I bet per-element laziness is necessary for self-referencing dynamic programming to not become bottom.
[03:11:57] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 240 seconds)
[03:12:04] <dminuoso> What are revisions on hackage? Im dabbling around with a nix overrideCabal to swap out a package, but the builder keeps trying to fetch from URIs like http://hackage.haskell.org/package/config-value-0.8.2/revision/1.cabal
[03:12:19] <dminuoso> Im trying to figure out what they are and why nix is doing this
[03:12:37] <hololeap> dminuoso: they are what the sound like. revisions to a cabal file that don't warrant a version bump
[03:13:01] <monochrom> Revisions are post-mortem changes to the *.cabal files so that you don't have to release a new version number just because you change "base < 5" to "base < 6".
[03:13:37] <monochrom> Therefore, if possible, you should prefer the latest revision.
[03:13:40] <dminuoso> Is there any example of a package that has revisions on hackage?
[03:13:49] <hololeap> they also use dos line endings for some reason :D
[03:13:57] <sclv> when cabal unpacks a package it overrides the cabal file with that of the latest revision
[03:14:40] <hololeap> dminuoso: there are tons and tons
[03:15:14] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:15:19] <dminuoso> Ahh I see.
[03:15:21] <dminuoso> https://hackage.haskell.org/package/config-value-0.8.1
[03:15:38] <dminuoso> Using overrideCabal to just swap out the version is not enough, I gotta remove the revision information
[03:15:54] <dminuoso> monochrom: thanks, that helped. :)
[03:15:58] <janus> sclv: can i work on "Rewrite Browse and Search pages for Hackage, implement new ranking" ?
[03:16:14] <sclv> janus: for gsoc, or just in general? either is welcome!
[03:16:25] <hololeap> dminuoso: https://github.com/haskell-infra/hackage-trustees/blob/master/revisions-information.md
[03:16:39] *** Quits: jespada (~jespada@87.74.36.188) (Quit: Textual IRC Client: www.textualapp.com)
[03:16:42] <hololeap> here is an example: https://hackage.haskell.org/package/aeson-1.5.6.0/revisions/
[03:16:44] <janus> i don't need funding so i don't think it makes sense to apply for gsoc? i want to work on it this weekend and next week
[03:16:57] <janus> and after that if i don't get done in time, of course
[03:17:02] <sclv> janus: sounds great!
[03:17:26] <hololeap> (thanks everyone for the discussion on comonads and strict/lazy. I've got some food for thought)
[03:17:28] <dminuoso> hololeap: Cheers, thats some helpful insights
[03:17:33] <sclv> if you want to chat about what the general design is let me know, but I think the tickets hopefully explain the issues well enough.
[03:18:30] <janus> sclv: well i think the most important thing is to just get it loading quickly while retaining the features, that's what i was imagining
[03:18:40] <sclv> Basically we just need to make displaying browse faster (by letting it start rendering the first page of the table before All Packages are loaded) and make it more useful by letting people add custom filters, both sticky and otherwise. Generally we probably should just use a more modern tabular data js widget, although ideally not one that relies on dragging in a whole mess of npm
[03:19:05] <sclv> yeah, just fast loading on its own would be a huge win.
[03:19:10] <janus> right, i was wondering about the frontend, would it make sense to rewrite it for that page, or is that not permitted?
[03:19:22] <janus> i was working with PureScript for Exfreight and i liked that
[03:19:24] <sclv> lots of people have told me they like browse but find its load times make it less useful.
[03:19:35] <sclv> janus: what do you mean "rewrite it for that page"?
[03:20:04] <sclv> we only use the tabular data widget in the browse/search interface. everything else is plain tables. i'd be happy to swap in anything that doesn't cause the build to become difficult and fragile.
[03:20:06] <janus> for example, if it was a purescript frontend that implemented filtering dialogs, paging and such, that is a bit of logic
[03:20:11] *** Quits: asivitz (uid178348@id-178348.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:20:44] <sclv> yeah, i mean i'd rather whatever it is be "a chunk of js code the page includes." dragging a pursecript dep into the hackage build chain seems painful.
[03:21:25] <janus> ok, so preferrably just plain javascript, i understand
[03:21:28] <sclv> if there's a not painful way to do it, i'm open, but i would hate to create a situation where people needed to do more than just "run cabal" to build the hackage server
[03:21:43] <sclv> (and by people, i mean, primarily me. i'm people :-P)
[03:22:02] <janus> right right, i understand completely
[03:22:18] <janus> i think i'll start with the backend anyway
[03:22:22] <janus> ok i'll dig in
[03:22:30] <sclv> so yeah, just faster is a huge win. i think being able to filter out deprecated stuff would be nice, etc, but its somewhat lower priority.
[03:22:48] <sclv> also as you dig in you'll probably get your own sense of what features you think would be easy and pleasant too
[03:23:11] <sclv> (oh i'll also note that the browse/search page is the least mobile friendly of all our pages -- the rest all work pretty nicely)
[03:23:40] <janus> right
[03:23:41] <sclv> (but also, presenting large amounts of tabular data on a mobile screen has innate limitations)
[03:23:54] <hololeap> dminuoso: I don't know if this will help you at all, but this is how I've been dealing with hackage packages with revisions using gentoo: https://github.com/hololeap/gentoo-haskell/blob/master/dev-lang/dhall/dhall-1.40.2.ebuild
[03:25:09] <hololeap> the key things to take from that are that the .tar.gz from hackage and the .cabal revision need to be downloaded seperately, and I use dos2unix on the revised cabal file just to make patches more consistent
[03:25:15] *** Quits: _________ (~nobody@user/noodly) (Ping timeout: 250 seconds)
[03:25:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:26:19] <hololeap> (because sometimes I like to patch the revised .cabal file for various reasons)
[03:26:28] *** Joins: _________ (~nobody@user/noodly)
[03:27:11] <dminuoso> hololeap: Its all good. My problem was just that I was overriding an existing nix package whose original version had a revision. So I essentially took a knife and replaced the version, so the builder tried to fetch that same revision but on the new versino
[03:27:25] <dminuoso> Which failed when trying to fetch that corresponding cabal file from hackage
[03:27:49] <dminuoso> So I had to not only change the version to 0.8.2, but also reset the revision to null
[03:28:11] <hololeap> why do they give the .cabal revisions DOS line endings?
[03:28:49] <geekosaur> probably html line endings that don't get translated?
[03:28:59] <dminuoso> Fun fact, "unix line endings" used to be CRLF as well.
[03:29:24] <janus> the LF used to just roll the paper right? and then the CR would return the carraige
[03:29:37] <janus> so back then, could you even use LFCR and it'd work?
[03:29:43] <geekosaur> oh, even better. cr cr lf to give the ksr33 time to catch up
[03:29:46] <dminuoso> janus: Yes.
[03:29:57] *** Quits: marquis_1ndras (~marquis_a@124.170.163.166) (Ping timeout: 240 seconds)
[03:30:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[03:30:07] <dminuoso> And you can observe the fact that this went into unix by looking at stty
[03:30:08] <geekosaur> telnet kept doing that for years
[03:30:10] <sclv> i don't recall that part of the codebase, but i suspect that its just an artifact of portability. i.e. CRLF might be a pita, but its pretty universally accepted. it could just be an accident, that works well enough nobody bothered to change it too.
[03:30:19] <dminuoso> By default it expects crlf line endings to represent a newline
[03:30:30] <dminuoso> You have to manually give it a flag to interpret LF as CRLF
[03:30:33] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[03:30:58] *** Joins: marquis_andras (~marquis_a@124.170.163.166)
[03:31:10] <dminuoso> If you dont do that, you just get the line feed and you have stair cases
[03:31:41] <geekosaur> aka the old "stty raw" problem
[03:32:02] <hololeap> if the unrevised .cabal files in the tarballs were CRLF, it wouldn't be so annoying, but most people package them as "unix" line endings
[03:32:03] <dminuoso> Even ASCII adopted to change the name of \n to newline, originally it was named line feed, because at that time quite a few systems adopted this new convention to interpret LF as both CRLF
[03:32:08] *** Joins: alx741 (~alx741@157.100.197.240)
[03:32:33] <hololeap> so I'll get a "different line endings" error from patch after a revision bump
[03:32:36] <dminuoso> (So this was done to reduce confusiun)
[03:33:32] <janus> hololeap: this is why i asked about windows textareas. because revisions are made using a textarea
[03:33:41] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 250 seconds)
[03:33:58] <sclv> hololeap: are _all_ the endings in the revised cabal files crlf, or only some?
[03:34:04] <sclv> and also all revised cabal files, or only some?
[03:34:13] <hololeap> all of them
[03:34:30] <hololeap> however, _most_ but not _all_ of the original cabal files are "unix"
[03:35:04] <hololeap> I think that just reflects whatever system the maintainer packaged it on
[03:35:26] <hololeap> and/or wrote it on
[03:36:21] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:36:29] <sclv> If you look at the code, there's nothing that enforces CRLF. it just checks the revised file is an allowed revision (i.e. an allowed change of allowed fields) and then takes whatever it is given: https://github.com/haskell/hackage-server/blob/c40bc16ff221505c6a9cd1099460cf72af56228f/Distribution/Server/Features/EditCabalFiles.hs#L90
[03:36:30] <hololeap>  > These revisions can be thought of as "updating" the cabal file of a package with new or more current information. However, they do not actually update the file. Tarballs retrieved from Hackage are always as the authors uploaded them. Revision information is tracked explicitly in the Hackage index
[03:37:20] <sclv> so i imagine it just follows the text conventions of the users' system rather than being as uniform as you imagine
[03:37:53] <hololeap> hm, why would both cabal and wget consistently convert it to CLRF on my linux system then?
[03:38:05] <sclv> ah here we go: https://stackoverflow.com/questions/14217101/what-character-represents-a-new-line-in-a-text-area
[03:38:08] <geekosaur> it seemed pretty reliably crlf to me. I still think it's just using html line endings
[03:38:27] <sclv> By HTML specifications, browsers are required to canonicalize line breaks in user input to CR LF (\r\n),
[03:39:11] <sclv> so yeah if someone revises using the web form rather than the api, then we just get the canonicalized line breaks and don't bother to do anything to them
[03:40:09] <janus> oh interesting, so that would probably mean most revisions have mixed line breaks since there are so many linux users in the haskell space
[03:40:18] <sclv> i.e. geekosaur is correct and gets the "protocol weirdness" challenge coin
[03:40:29] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[03:40:52] <sclv> well i don't think they have mixed breaks, because the browser form will canonicalize everything. so its more the first cabal will have one convention, and all revisions have the other
[03:41:21] <janus> oh, i interpreted "user input" as only being the actual newlines the user made in the form
[03:41:43] <janus> i.e. not changing the existing
[03:42:23] <geekosaur> Ieven remember why they did it. cases like someone entering text into netscape (remember that?) and then someone else viewed it on windows
[03:43:12] <geekosaur> which was netscape ignoring the spec; for historical reasons all the text-y protocols (html, smtp, ftp, etc.) used crlf
[03:43:33] <geekosaur> (the historical reason being that tcp/ip was first developed on tenex, not unix)
[03:43:46] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:43:46] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:43:46] *** Joins: wroathe (~wroathe@user/wroathe)
[03:46:29] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:47:38] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[03:50:56] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 256 seconds)
[03:51:01] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[03:54:38] *** Joins: alx741 (~alx741@157.100.197.240)
[03:55:01] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:95db:50d7:7eec:328d)
[03:57:05] <hololeap> huh, maybe it's not as consistant as I thought... strange: https://dpaste.com/C5HMREFMV
[03:57:49] <hololeap> those were all downloaded with wget from urls like https://hackage.haskell.org/package/aeson-1.5.6.0/revision/5.cabal
[03:58:23] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:59:25] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[03:59:41] <janus> hololeap: from a glance, the revisions look like they all have CRLF. so it is consistent with sclv's claim. (though people aren't necessarily only using the web frontend!)
[04:00:25] <hololeap> do you get CLRF from that aeson revision I just posted? I don't
[04:00:37] <hololeap> CRLF
[04:01:18] <janus> did you make it with the web form?
[04:01:58] <hololeap> I didn't make it
[04:02:06] <janus> oh you didn't you make the revision, you were referring to your paste :P
[04:02:20] <hololeap> yeah I'm just a revision consumer :)
[04:04:12] <janus> hololeap: aeson-1.5.6.0-r1 doesn't contain any carriage return
[04:05:20] <janus> oh but you meant r5
[04:05:48] <janus> same goes for that one
[04:06:35] <janus> i just use 'xxd 5.cabal | cut -d" " -f2-' though that feels pretty hacky
[04:08:44] <monochrom> Do you like tr -d '\r' ?
[04:09:22] <hololeap> dos2unix works great
[04:09:23] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 252 seconds)
[04:09:25] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[04:09:46] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:95db:50d7:7eec:328d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:10:45] <janus> monochrom: not sure who's getting asked but i just wanted to get the hex dump without the offsets
[04:11:13] <monochrom> Oh, nevermind.
[04:11:26] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[04:11:53] <janus> fwiw, i just confirmed that chrome does follow the standard , e.g. it sends \r\n even though the html contains only \r. at least with multipart encoding
[04:13:15] <hololeap> janus: so it has to do with which browser is used to fill out the revision form?
[04:13:17] *** Joins: zebrag (~chris@user/zebrag)
[04:13:39] <hololeap> I'm just curious at this point :p
[04:14:14] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 250 seconds)
[04:14:30] <janus> nooo, because presumably they all follow the standard. so all browser posted cabal files will have consistent CRLF usage, that's why you see so many. but you can also do revisions with the API as sclv mentions. and if you do it like that, it's just gonna stay as the user's text editor wrote them
[04:15:53] <janus> if i understand sclv correctly, it all depends on the client since the server isn't caring about it
[04:16:05] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:16:15] *** Joins: alx741 (~alx741@157.100.197.240)
[04:16:35] <hololeap> ok, it all makes sense now
[04:16:44] <janus> yup
[04:17:09] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[04:19:28] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::f276)
[04:23:07] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:23:25] <Sqaure> Im using optics library (that seems to have nearly the same api as Lens). There are (Affine)Traversal's for Map keys (at <key>) and List indices (ix <index>). I wonder, is there such for List that uses a predicate instead of of an index? 
[04:24:41] *** Quits: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it) (Ping timeout: 256 seconds)
[04:25:18] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[04:25:18] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[04:25:18] *** Joins: turlando (~turlando@user/turlando)
[04:27:28] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:29:13] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[04:30:59] <hololeap> like an optics version of find?
[04:31:08] *** Quits: mmhat (~mmh@55d4c207.access.ecotel.net) (Quit: WeeChat 3.4)
[04:31:56] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:32:24] *** Quits: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: Leaving)
[04:32:29] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[04:33:15] *** Joins: califax (~califax@user/califx)
[04:34:12] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[04:34:28] <Sqaure> hololeap, yes
[04:34:37] <hololeap> I wonder if this is it (I'm not very optics-savvy): https://hackage.haskell.org/package/optics-core-0.4/docs/Optics-AffineFold.html#v:filtered
[04:35:41] <Sqaure> hololeap, yeah i went that rout, but it seems Fold's arent good as setters?
[04:37:36] <Sqaure> to be able to do : over (<traversal>) mutatateFkn object
[04:38:06] <dminuoso> Sqaure: Fold are not good as setters because that's precisely their weakness.
[04:38:14] <dminuoso> A fold can only fold, not retain structure
[04:38:32] <dminuoso> What you're asking for is not lawful, a kind of Wither
[04:39:28] *** Joins: alx741 (~alx741@157.100.197.240)
[04:40:56] <EvanR> the general fold for a type can do anything xD
[04:40:58] <Sqaure> Oh, to bad. It felt like a predicate would be pretty similar to an index. 
[04:42:12] <hololeap> \s p -> over s (filter p) :: Setter' s [a] -> (a -> Bool) -> s -> s
[04:42:15] <hololeap> what about that?
[04:42:40] <hololeap> just modify the list itself instead of trying to get inside of it
[04:43:28] <Sqaure> Hmm, that could be something
[04:45:54] *** Quits: emf (~emf@2620:10d:c090:400::5:322c) (Quit: emf)
[04:48:33] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:54:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:00:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:01:11] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:01:23] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[05:07:01] *** Joins: alx741 (~alx741@157.100.197.240)
[05:07:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:10:08] *** Joins: Techcable (~Techcable@168.235.93.147)
[05:10:52] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:12:28] *** Joins: wroathe (~wroathe@user/wroathe)
[05:13:33] <jackdk> Sqaure: the version of `filtered` in lens can be used as a traversal but relies on you to not invalidate the predicate when you set back through it
[05:14:45] <hololeap> :o
[05:14:45] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:22:09] <EvanR> see if this sounds wrong or not: storable vector uses a foreign ptr to bytes so haskell usage of storable vector has to go through the FFI, but is easily accessible by foreign code, same as ByteString. Meanwhile unboxed array and unboxed vector use array primitives and are more easily accessible to haskell code, but obviously inaccessible to foreign code since gc moves them around
[05:22:17] <hololeap> at :: e -> Lens' (e -> a) (Maybe a)
[05:22:34] <hololeap> jackdk: I was thinking they might be able to put something together with this ^
[05:23:00] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Ping timeout: 276 seconds)
[05:23:18] <hololeap> hm, maybe not... I'm not actually sure how that works :p
[05:24:42] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[05:25:17] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[05:26:37] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[05:28:46] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 250 seconds)
[05:29:51] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[05:30:20] <hololeap> ix :: e -> Lens' (e -> Maybe a) (Maybe a)
[05:30:22] * hololeap shrugs
[05:30:35] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[05:31:07] *** Joins: alx741 (~alx741@157.100.197.240)
[05:33:45] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:34:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[05:36:34] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Ping timeout: 250 seconds)
[05:36:50] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:36:54] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[05:38:55] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:40:48] *** Joins: califax- (~califax@user/califx)
[05:40:54] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 250 seconds)
[05:42:39] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[05:43:19] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:44:15] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:44:27] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:44:27] *** califax- is now known as califax
[05:44:28] *** Quits: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk) (Remote host closed the connection)
[05:50:14] *** Joins: alx741 (~alx741@157.100.197.240)
[05:51:52] <hololeap> at that point it might just make sense to turn your [a] into a (Map Bool [a]) and then use `at` on it
[05:52:36] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[05:54:58] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:55:45] <EvanR> Map Bool [a] = Bool -> [a] = ([a], [a]) xD
[05:56:20] <EvanR> (ok, technically no)
[05:57:33] *** Joins: gentauro (~gentauro@user/gentauro)
[05:58:06] <hololeap> :t partition -- right, forgot about that
[05:58:07] <lambdabot> (a -> Bool) -> [a] -> ([a], [a])
[05:59:29] <EvanR> the map could be missing one or both
[06:00:56] <hololeap> :t \k -> maybe [] id . Map.lookup k
[06:00:57] <lambdabot> error:
[06:00:57] <lambdabot>     Not in scope: ‘Map.lookup’
[06:00:57] <lambdabot>     Perhaps you meant one of these:
[06:03:39] *** Joins: jao (~jao@static-68-235-44-40.cust.tzulo.com)
[06:03:50] <EvanR> :t Data.Map.lookup
[06:03:51] <lambdabot> Ord k => k -> M.Map k a -> Maybe a
[06:04:04] <EvanR> oh, M dot
[06:10:54] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[06:11:23] *** Joins: alx741 (~alx741@157.100.197.240)
[06:14:39] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:18:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[06:27:26] *** Quits: xff0x (~xff0x@2001:1a81:5217:8700:5c4c:6e43:a062:eba7) (Ping timeout: 252 seconds)
[06:28:17] *** Joins: xff0x (~xff0x@2001:1a81:524f:ad00:7c68:ef8b:b4b7:1f26)
[06:28:51] *** Joins: k8yun (~k8yun@user/k8yun)
[06:29:52] *** Quits: modnar (~modnar@shell.sonic.net) (Remote host closed the connection)
[06:32:47] *** Joins: alx741 (~alx741@157.100.197.240)
[06:33:47] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:35:13] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:41:24] *** Joins: yauhsien_ (~yauhsien@61-231-32-103.dynamic-ip.hinet.net)
[06:41:35] *** Quits: slim (uid300876@id-300876.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[06:45:47] *** Quits: yauhsien_ (~yauhsien@61-231-32-103.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[06:51:54] *** Joins: alx741 (~alx741@157.100.197.240)
[06:53:38] *** Quits: xff0x (~xff0x@2001:1a81:524f:ad00:7c68:ef8b:b4b7:1f26) (Ping timeout: 260 seconds)
[06:53:43] *** Quits: jao (~jao@static-68-235-44-40.cust.tzulo.com) (Ping timeout: 256 seconds)
[06:54:30] *** Joins: xff0x (~xff0x@2001:1a81:524f:ad00:4eb7:4d9:8878:178f)
[06:55:28] *** Joins: jao (~jao@static-68-235-44-72.cust.tzulo.com)
[06:56:35] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:03:57] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[07:04:05] *** Quits: td_ (~td@94.134.91.17) (Ping timeout: 250 seconds)
[07:04:37] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[07:05:02] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Read error: Connection reset by peer)
[07:05:08] *** Joins: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com)
[07:05:44] *** Joins: td_ (~td@94.134.91.27)
[07:05:49] *** Quits: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com) (Client Quit)
[07:08:11] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:08:11] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:08:11] *** finn_elija is now known as FinnElija
[07:10:43] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[07:12:25] *** Quits: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 256 seconds)
[07:14:04] *** Joins: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[07:14:39] *** Joins: alx741 (~alx741@157.100.197.240)
[07:14:49] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:16:03] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:19:21] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:23:57] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[07:24:38] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:27:06] *** Joins: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com)
[07:27:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:28:36] *** Quits: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com) (Client Quit)
[07:28:50] *** Joins: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com)
[07:31:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:31:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[07:31:50] <ProfSimm> In Haskell when I perform side-effects, is there some abstraction to guarantee a "Transaction" on the effects, make them atomic. And if so, how would that work with things like sending something over a TCP socket.
[07:31:52] <ProfSimm> Can't unsend.
[07:32:21] <c_wraith> you're correct. there's no such thing as making arbitrary effects atomic
[07:33:28] <Maxdamantus> So `State RealWorld#` is a lie!?
[07:34:10] <ProfSimm> c_wraith: well not like I was hoping for magic (well, a little), my question is more about is there a way to reason about those in a sane way without atomicity
[07:36:25] <ski> how do you make exception effects atomic or transactional ? nondeterminism effects ?
[07:37:22] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[07:37:42] <ProfSimm> ski: "finally"?
[07:37:58] <ProfSimm> ski: undo sagas, as a more general concept
[07:38:02] <Maxdamantus> In general, it's not possible to include something externnal to your transaction within your transaction.
[07:38:37] <ski> "finally" doesn't undo an exception being thrown
[07:38:51] <Maxdamantus> Theoretically you could creatu a framuwork where the TCP sending is part of a transaction, but receiving a response from an entity that exists outside can't be part of it.
[07:41:06] <ProfSimm> ski: my problem isn't the existence of the exception typically, but rather the partial operations and unfreed resources it leaves behind, hence finally. Or did you mean in some other way. Transaction means it can fail, it just failed atomically. Transaction doesn't mean it has to succeed
[07:41:44] *** Joins: alx741 (~alx741@157.100.197.240)
[07:41:57] <ski> > do z <- [1 ..]; y <- [1 .. z]; x <- [1 .. y]; guard (x^2 + y^2 == z^2); return (x,y,z)  -- how do you perform nondeterminism effects like these transactionally, atomically ? what does that even mean, to begin with ?
[07:42:00] <lambdabot>  [(3,4,5),(6,8,10),(5,12,13),(9,12,15),(8,15,17),(12,16,20),(15,20,25),(7,24,...
[07:42:44] <ski> if you're interacting with the outside world, it does seem hard to make that atomic or transactional, at least without cooperation from the other side
[07:42:46] <ProfSimm> ski: well I'm just pondering how to deal with non-happy path in a way that doesn't explode into a fractal of special cases.
[07:43:53] <ski> "my problem isn't the existence of the exception typically" -- well, transactions are about isolating effects, so that either all are performed, or none, do you agree ?
[07:43:55] <ProfSimm> ski: yes, well hence the "undo saga" note. Sometimes you can code compensatory action that's not literally undo, but you can consider the action semantically undone for your purpose. Such as bill a credit card, then refund it. There's still a fee, but the action is sufficiently "undone"
[07:44:40] <ski> to "fail" exceptions raising, you'd need some way to undo raising the exceptions
[07:45:17] <ProfSimm> I don't see exceptions as a side-effect, despite they may not fit into a math model of purity
[07:45:24] <ski> (raising an exception here is not considered "failure". rather raising exceptions would be the effects that a failure of the transaction would have to undo)
[07:45:27] <ProfSimm> I see them as syntax sugar on a branch
[07:45:42] <ski> yea, i've not been talking about any side-effects here
[07:45:56] <ProfSimm> Well I don't know why we want to undo an exception being risen. 
[07:45:58] <ski> (i've been talking about effects)
[07:46:10] <ProfSimm> OK I don't see exceptions as an "effect" then
[07:46:16] <ski> well, you started talking about having transactions of effects
[07:46:41] <ProfSimm> ski: well I'll be damned.
[07:46:49] <ProfSimm> ski: I mean side-effects
[07:46:49] <ski> there are many kinds of effects. I/O, state, exception, (angelic) nondeterminism, environment, summarizing/logging/output, continuation, &c.
[07:47:01] <ProfSimm> Well I mean external effects basically
[07:47:05] <ski> there are no side-effects in Haskell, so you must be talking about some other language, then
[07:47:11] <ProfSimm> Man.
[07:47:14] <ProfSimm> You know what I mean
[07:47:44] <ski> ok, external, i guess that means I/O, then
[07:47:54] <ProfSimm> In a nutshell, files, sockets, pipes. Yes. I/O
[07:48:01] <ProfSimm> Interaction with the "world"
[07:48:02] <ski> (sorry, i do not know what you mean)
[07:48:04] <ski> yes
[07:48:10] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[07:49:29] <ski> (i don't know why people often keep saying "you know what i mean". my experience has been that almost always, when people say that, i do not know what they mean. maybe it's a kind of appeal, "you know what i mean, right ?", only not expressed as a question)
[07:49:56] <hololeap> they assume you're being pedantic on purpose
[07:50:37] <ski> well, if i am (i'm not sure), then i do not know how not to be that
[07:51:16] <ProfSimm> hololeap: I don't assume that. But I beg for compassion ;-)
[07:51:23] <ProfSimm> When using terms incorrectly
[07:51:38] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:51:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:51:38] *** Joins: wroathe (~wroathe@user/wroathe)
[07:52:22] <ProfSimm> ski: but you did know what I mean (interaction with other systems outside the language internal state) ;-)
[07:52:59] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:53:50] <ski> well, i offered that as one possible thing which you might be aiming at. i didn't know that that was what you were asking about
[07:54:08] <ProfSimm> ski: cool :)
[07:54:29] <ski> (you started asking about side-effects. since there are no side-effects in Haskell, i got thinking about effects. next question was *which* effects you wanted to talk about. the most common ones ? only some particular specific ones ?)
[07:54:35] <ProfSimm> ski: so is there a strategy here, or we deal with things on a one-by-one basis (effects)
[07:55:01] <ski> i'm not aware of any general framework for isolating effects transactionally
[07:55:26] <ski> if we're talking about internal state, then there's `STM' (Software-Transactional Memory), for that
[07:56:03] <ski> (which composes well with multiple executing threads)
[07:56:48] <ski> if you're doing I/O, say communicating between some servers on different machines, doing some kind of distributed computation, then you might be able to do transaction management, if you control all those nodes
[07:56:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:57:38] <ski> (i think there might be sortof-general patterns for that sort of thing, in the Erlang community)
[07:58:57] <ski> (btw, the reason i said i'm not sure before is that i think i mostly don't understand myself. this includes not knowing all my motivations)
[07:59:20] <hololeap> I assume something like postgres knows how to do this
[07:59:31] <ProfSimm> Sure, SQL servers are the easy part
[08:00:14] <hololeap> as far as making it a monad of some sort, unfortunately abstractions like "monad" either fit or they don't, and generally they don't
[08:00:35] <ProfSimm> ski: I was thinking more about how to organize my code in Haskell around that idiom of there being code that does something, and code that undoes it, and let the right "bits of code" run depending on which code failed or not etc.
[08:02:02] <ProfSimm> ski: let's say I'm programming an online store. I bill a card, then i check product for availability - error, no availability (I know, shoulda checked beforehand), so I raise an exception, this automatically enums all actions I did so far, and runs their 'undo code' automatically, which refunds the payment in this case
[08:03:02] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[08:03:08] <ski> yea, monads "merely" express "(dynamic) sequencing" ("sequencing" in a more abstract, conceptual way, not necessarily in a low-level operational sense. one possible meaning of "sequencing" is "short-circuiting". another is "loop nesting". another is "callback nesting". &c.)
[08:05:12] *** Quits: jao (~jao@static-68-235-44-72.cust.tzulo.com) (Ping timeout: 250 seconds)
[08:05:57] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Quit: Leaving)
[08:06:50] <hololeap> ProfSimm: you could build this yourself pretty easily I would think
[08:07:38] *** Joins: deadmarshal (~deadmarsh@95.38.112.73)
[08:08:25] <hololeap> :t \l1 l2 -> zip l1 (drop 1 l2)
[08:08:26] <lambdabot> [a] -> [b] -> [(a, b)]
[08:09:08] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[08:09:52] * ProfSimm nods at hololeap
[08:09:57] *** Joins: alx741 (~alx741@157.100.197.240)
[08:10:03] <ski> hm, i remember i once did a play/replay system (to be used with a CGI page with forms). from the point of the program using the library, doing a form, getting the answer back, just looked like executing an action. but under the covers, it'd record enough of the state of the system, and then generate a page with a form on it, so that, if/when the form was submitted, the program would restart, and hit the 
[08:10:09] <ski> "replay" phase, fast-forwarding past all the previously done parts (only simulating performing `IO' actions, by reading a logged result), until it got to the point where it stopped last time, and then it hit the "play" phase, starting to execute normally
[08:10:32] <hololeap> :t \l -> zip l (drop 1 l) -- if l is a stream of events from IO, this will give you a stream (modeled as a list) of (lastEvent, currentEvent)
[08:10:33] <lambdabot> [b] -> [(b, b)]
[08:12:00] <ski> this is not quite the sort of thing you were thinking of. but i think one could possibly try to do something similar, with "undo" actions stored, rather than "replay"
[08:15:30] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:30:55] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[08:33:37] *** Joins: alx741 (~alx741@157.100.197.240)
[08:37:11] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:41:10] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[08:53:38] *** Joins: alx741 (~alx741@157.100.197.240)
[08:57:49] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[09:05:51] <Andrew> If you are using GHC 6.10.x, just cabal install lambdabot. 6.12.x support is forthcoming; see /Building for details on that. (It is possible that Hackage lambdabot will just work with 6.12.x.) / I think I'm on 8.10.4 now, seems a bit outdated
[09:08:16] *** Quits: phma_ (phma@2001:5b0:210d:70f8:60e0:e2f9:8ba1:2fd7) (Read error: Connection reset by peer)
[09:08:26] <Andrew> Seems that cabal isn't complaining installing lambdabot yet
[09:08:40] *** Joins: phma_ (~phma@host-67-44-208-185.hnremote.net)
[09:09:04] *** Quits: gawen_ (~gawen@user/gawen) (Quit: cya)
[09:10:02] *** phma_ is now known as phma
[09:10:22] *** Joins: gawen (~gawen@user/gawen)
[09:14:40] *** Quits: ldlework (~hexeme@user/hexeme) (Remote host closed the connection)
[09:14:48] *** Joins: alx741 (~alx741@157.100.197.240)
[09:16:01] *** Joins: hexeme (~hexeme@user/hexeme)
[09:19:51] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[09:20:36] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:23:56] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:24:47] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::f276) (Ping timeout: 256 seconds)
[09:32:44] *** Quits: raym (~raym@user/raym) (Quit: kernel update, rebooting...)
[09:33:22] *** Quits: foul_owl (~kerry@174-21-76-71.tukw.qwest.net) (Quit: WeeChat 2.3)
[09:36:53] *** Joins: alx741 (~alx741@157.100.197.240)
[09:40:21] *** Joins: foul_owl (~kerry@174-21-76-71.tukw.qwest.net)
[09:42:11] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:45:18] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[09:49:49] *** Joins: raym (~raym@user/raym)
[09:52:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:52:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:52:25] *** Joins: wroathe (~wroathe@user/wroathe)
[09:55:29] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[09:57:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:03:31] *** Joins: alx741 (~alx741@157.100.197.240)
[10:09:16] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:09:28] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[10:23:49] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[10:24:56] *** Joins: zaquest (~notzaques@5.130.79.72)
[10:25:51] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:9142:26a8:3892:1b3a) (Remote host closed the connection)
[10:26:57] *** Joins: alx741 (~alx741@157.100.197.240)
[10:30:39] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:36:25] *** hexeme is now known as ldlework
[10:38:15] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[10:39:55] *** Joins: fef (~thedawn@user/thedawn)
[10:40:33] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[10:41:37] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 250 seconds)
[10:48:34] *** Joins: alx741 (~alx741@157.100.197.240)
[10:53:12] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:02:10] *** Quits: deadmarshal (~deadmarsh@95.38.112.73) (Ping timeout: 256 seconds)
[11:10:42] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[11:10:49] *** Joins: deadmarshal (~deadmarsh@95.38.230.187)
[11:11:05] *** Joins: alx741 (~alx741@157.100.197.240)
[11:11:57] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[11:12:57] *** Quits: phma (~phma@host-67-44-208-185.hnremote.net) (Read error: Connection reset by peer)
[11:13:50] *** Joins: alp (~alp@user/alp)
[11:14:04] *** Quits: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com) (Ping timeout: 256 seconds)
[11:14:11] *** Joins: phma (~phma@host-67-44-208-247.hnremote.net)
[11:15:20] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:25:18] *** Joins: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com)
[11:29:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:30:15] *** Quits: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com) (Ping timeout: 256 seconds)
[11:31:21] *** Joins: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com)
[11:32:02] *** Joins: alx741 (~alx741@157.100.197.240)
[11:33:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[11:35:44] *** Joins: Graham31415 (~Graham314@213.237.92.153)
[11:36:38] *** Joins: whound (~dust@2409:4071:4d8d:7b21:2586:8c37:2856:667a)
[11:38:11] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:46:06] *** Quits: zincy (~tom@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[11:46:23] *** Joins: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[11:50:38] *** Joins: yauhsien_ (~yauhsien@61-231-32-103.dynamic-ip.hinet.net)
[11:51:13] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 256 seconds)
[11:51:20] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[11:51:59] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[11:52:47] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:55:45] *** Quits: yauhsien_ (~yauhsien@61-231-32-103.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:56:36] *** Joins: alx741 (~alx741@157.100.197.240)
[11:57:53] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[12:00:16] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[12:00:39] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:00:39] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:02:48] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Remote host closed the connection)
[12:04:20] *** Quits: sqrt2 (~ben@80-108-18-7.cable.dynamic.surfer.at) (Quit: ZNC - http://znc.in)
[12:06:57] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[12:09:28] *** Joins: vysn (~vysn@user/vysn)
[12:11:12] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ad86:5044:3d0e:26e7)
[12:15:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ad86:5044:3d0e:26e7) (Ping timeout: 240 seconds)
[12:18:45] *** Quits: alp (~alp@user/alp) (Ping timeout: 256 seconds)
[12:19:08] *** Joins: alx741 (~alx741@157.100.197.240)
[12:19:40] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:b88b:16c0:25d0:773a)
[12:22:23] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[12:30:42] *** Joins: cosimone (~user@93-44-184-23.ip98.fastwebnet.it)
[12:30:42] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:34:51] *** Quits: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com) (Ping timeout: 256 seconds)
[12:43:46] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:45:22] *** Joins: ardell (~ardell@user/ardell)
[12:47:30] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[12:48:43] *** Joins: alx741 (~alx741@157.100.197.240)
[12:48:59] *** Joins: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com)
[12:53:01] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:53:25] *** Joins: tfeb (~tfb@88.98.95.237)
[12:54:21] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[12:55:53] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:58:31] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[13:02:40] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:02:45] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[13:03:57] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[13:05:01] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[13:08:50] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Remote host closed the connection)
[13:09:01] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:09:01] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:09:01] *** Joins: wroathe (~wroathe@user/wroathe)
[13:09:16] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[13:11:29] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:b88b:16c0:25d0:773a) (Quit: Leaving)
[13:11:36] *** Joins: alx741 (~alx741@157.100.197.240)
[13:12:04] *** Joins: alp (~alp@user/alp)
[13:13:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[13:14:48] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:17:53] *** Joins: xsperry (~xs@user/xsperry)
[13:19:23] *** whound is now known as dust__
[13:19:26] *** dust__ is now known as dust_
[13:31:57] *** Joins: alx741 (~alx741@157.100.197.240)
[13:35:09] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:37:46] *** Quits: Graham31415 (~Graham314@213.237.92.153) (Quit: Client closed)
[13:44:48] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[13:45:20] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:51:40] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[13:53:34] *** Joins: alx741 (~alx741@157.100.197.240)
[13:53:38] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[13:54:26] *** Quits: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com) (Ping timeout: 256 seconds)
[13:57:27] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:58:03] *** Joins: alx741 (~alx741@157.100.197.240)
[14:04:43] *** Joins: mastarija (~mastarija@2a05:4f46:e04:6000:2c:c10d:58d8:d23b)
[14:07:45] *** Joins: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com)
[14:10:23] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:16:43] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:78c8:bb9f:f5b1:85aa) (Quit: Konversation terminated!)
[14:19:00] *** Quits: noiobeforebed (~noiobefor@2001:470:69fc:105::1:3c2d) (Quit: Reconnecting)
[14:19:27] *** Quits: dust_ (~dust@2409:4071:4d8d:7b21:2586:8c37:2856:667a) (Quit: Konversation terminated!)
[14:19:56] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[14:21:20] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[14:27:29] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[14:27:56] *** Joins: coot (~coot@213.134.190.95)
[14:28:36] *** Joins: alx741 (~alx741@157.100.197.240)
[14:32:43] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:32:43] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:32:54] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[14:34:04] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:34:13] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[14:37:02] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[14:39:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ad86:5044:3d0e:26e7)
[14:39:38] *** Quits: cosimone (~user@93-44-184-23.ip98.fastwebnet.it) (Remote host closed the connection)
[14:39:53] *** Joins: Graham31415 (~Graham314@213.237.92.153)
[14:40:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:40:45] *** Quits: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com) ()
[14:43:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ad86:5044:3d0e:26e7) (Ping timeout: 245 seconds)
[14:46:17] *** Quits: mastarija (~mastarija@2a05:4f46:e04:6000:2c:c10d:58d8:d23b) (Quit: Leaving)
[14:47:23] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[14:48:26] <Andrew> Anyone has an idea on installing and using lambdabot properly?  I cabel'ed it, and I'm confused what to do
[14:48:36] <Andrew> It seems to take me to a REPL where I don't have an idea what to put into
[14:48:50] <absentia> @help
[14:48:50] <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
[14:48:55] <absentia> @pl (\x -> x)
[14:48:55] <lambdabot> id
[14:49:49] <Andrew> Well, I mean I'm trying to host lambdabot, and my inability to understand how to run it after cabeling is the problem
[14:51:08] *** Joins: alx741 (~alx741@157.100.197.240)
[14:51:10] <absentia> blech
[14:51:19] <absentia> no stack for lambdabot?
[14:51:21] <absentia> :(
[14:52:03] <absentia> isn't there a cabal run
[14:52:11] <absentia> good luck sorting out your dependencies
[14:52:13] <sshine> I've heard cabal is really easy. :P
[14:52:23] <absentia> sshine: it's easy until it isn't
[14:52:32] <absentia> Andrew: what happens if you `cabal run`
[14:53:09] <sshine> apparently there are no installation instructions for lambdabot. that seems like a useful addition.
[14:53:19] <absentia> https://wiki.haskell.org/Lambdabot#Installing
[14:53:32] <Andrew> #installing, but no #running or anything like that
[14:53:33] <sshine> ah, okay. I was looking at github.
[14:53:35] <absentia> there are marginal instructions
[14:53:37] <Andrew> I don't see configuration options
[14:53:46] <Andrew> Error:
[14:53:48] <Andrew> [ERROR] Plugin.djinn: Djinn command failed: djinn: readCreateProcess: runInteractiveProcess: exec: does not exist (No such file or directory)
[14:53:59] * Andrew looks for a ebuild of "djinn"
[14:54:10] <absentia> choo choo
[14:54:17] <absentia> all stations stop to next build error
[14:54:19] <Andrew> Doesn't pull that as a dep, weird
[14:54:35] <Andrew> k, emerging that now
[14:54:44] * absentia gives the nod of approval
[14:54:48] <absentia> i too used to funroll my loops
[14:55:16] <sshine> absentia, those installation instructions make assumptions about GHC that are two major versions behind what I've got...
[14:55:16] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:55:17] *** Quits: OscarZ (~oscarz@95.175.104.142) (Quit: Leaving)
[14:55:27] <Andrew> still having djinn problems, fun
[14:55:28] <absentia> sshine: hence my questioning of a stack build
[14:55:42] <Andrew> wait, wth I didn't add ~/.cabal/bin to my PATH
[14:55:45] <sshine> cabal: Unknown target '.'. There is no component '.'. The project has no package directory '.'.
[14:55:45] <absentia> they still offer lts package trees for older versions of GHC
[14:55:52] <sshine> I don't think this software was meant to be run by many people.
[14:55:56] <absentia> probably not
[14:56:01] <absentia> which is fine
[14:56:05] <absentia> it works here
[14:57:23] <sshine> Andrew, there's an attempt at documentation of running it here: https://github.com/lambdabot/lambdabot/blob/master/doc/startup.md -- but it doesn't really start from the point of successfully having installed it.
[14:57:48] <Andrew> thanks, ill check it our
[14:57:50] <Andrew> *out
[14:59:50] <sshine> I think I gave up on installing lambdabot one time.
[15:00:37] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:00:39] *** Quits: haskl (~haskl@user/haskl) (Read error: Connection reset by peer)
[15:02:48] <Andrew> Maybe I'll Just do Nothing with it
[15:03:03] *** Joins: haskl (~haskl@user/haskl)
[15:07:50] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[15:09:25] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[15:11:01] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Remote host closed the connection)
[15:11:17] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[15:12:18] *** Joins: alx741 (~alx741@157.100.197.240)
[15:12:23] *** Quits: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com) (Ping timeout: 256 seconds)
[15:13:45] *** Joins: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:91:c891:6ad5:7a10)
[15:15:03] *** Joins: michalz (~michalz@185.246.204.65)
[15:15:52] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:16:12] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:17:12] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:18:10] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[15:23:39] *** Joins: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[15:23:48] *** Joins: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com)
[15:25:39] *** Joins: fef (~thedawn@user/thedawn)
[15:27:26] *** Quits: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:91:c891:6ad5:7a10) (Ping timeout: 245 seconds)
[15:28:15] *** Quits: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com) (Ping timeout: 256 seconds)
[15:30:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:33:55] *** Joins: alx741 (~alx741@157.100.197.240)
[15:34:34] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[15:35:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[15:37:30] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:39:58] *** Quits: Axman6 (~Axman6@user/axman6) (*.net *.split)
[15:39:58] *** Quits: tubogram4 (~tubogram@user/tubogram) (*.net *.split)
[15:40:04] *** Joins: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com)
[15:41:48] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:95db:50d7:7eec:328d)
[15:43:55] *** Joins: mmhat (~mmh@55d4ce4d.access.ecotel.net)
[15:44:22] *** Quits: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com) (Ping timeout: 256 seconds)
[15:53:31] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[15:53:56] *** Joins: alx741 (~alx741@181.199.42.143)
[15:58:39] *** Joins: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com)
[16:05:16] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[16:05:55] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:06:30] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[16:08:17] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:10:48] *** Joins: notzmv (~zmv@user/notzmv)
[16:14:15] *** Joins: alp (~alp@user/alp)
[16:17:01] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:95db:50d7:7eec:328d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:19:59] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:21:00] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:1823:ee83:7026:65a9)
[16:22:23] *** Joins: alx741 (~alx741@157.100.197.240)
[16:25:48] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:28:26] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[16:28:42] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[16:28:43] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[16:29:22] *** Joins: fef (~thedawn@user/thedawn)
[16:29:38] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[16:29:49] *** Joins: hololeap (~hololeap@user/hololeap)
[16:30:12] *** Quits: fef (~thedawn@user/thedawn) (Client Quit)
[16:32:10] *** Joins: xkuru (~xkuru@user/xkuru)
[16:34:42] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:1823:ee83:7026:65a9)
[16:37:50] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:1823:ee83:7026:65a9) (Ping timeout: 250 seconds)
[16:38:45] *** Joins: thevishy (~Nishant@2405:201:f005:c007:68d4:2777:c323:aa1b)
[16:42:26] *** Joins: alx741 (~alx741@157.100.197.240)
[16:43:26] *** Quits: thevishy (~Nishant@2405:201:f005:c007:68d4:2777:c323:aa1b) (Client Quit)
[16:44:28] *** zer0bitz_ is now known as zer0bitz
[16:45:59] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[16:47:01] *** Quits: deadmarshal (~deadmarsh@95.38.230.187) (Ping timeout: 256 seconds)
[16:49:50] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[16:49:58] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:50:09] *** Joins: coot (~coot@213.134.190.95)
[16:50:59] *** Joins: jao (~jao@68.235.43.85)
[16:56:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:01:11] *** Quits: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com) (Ping timeout: 256 seconds)
[17:01:12] *** Quits: ubert (~Thunderbi@p548c8cd6.dip0.t-ipconnect.de) (Quit: ubert)
[17:01:17] *** Joins: tubogram4 (~tubogram@user/tubogram)
[17:01:17] *** Joins: Axman6 (~Axman6@user/axman6)
[17:01:17] *** erbium.libera.chat sets mode: +o Axman6
[17:01:39] *** Joins: ubert (~Thunderbi@p200300ecdf09947e2c357846a3b3453e.dip0.t-ipconnect.de)
[17:02:57] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[17:04:52] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[17:05:09] *** Quits: jao (~jao@68.235.43.85) (Ping timeout: 256 seconds)
[17:05:10] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[17:05:37] *** Joins: Koen (~Koen@252.248.88.92.rev.sfr.net)
[17:05:41] <Koen> hi
[17:06:21] <Hecate> hi
[17:06:23] <Koen> I have a question about groupBy
[17:06:40] <Koen> the documentation says it compares adjacent elements: https://hackage.haskell.org/package/groupBy-0.1.0.0/docs/Data-List-GroupBy.html
[17:06:45] *** Joins: alx741 (~alx741@157.100.197.240)
[17:06:52] <Hecate> indeed it does
[17:06:56] <Koen> I tried their example groupBy (<=) [1,2,2,3,1,2,0,4,5,2]
[17:07:08] <Koen> and I get a different result than the documentation
[17:07:20] <Hecate> which version of the package are you importing?
[17:07:39] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[17:07:41] *** Joins: deadmarshal (~deadmarsh@95.38.230.187)
[17:08:03] <Koen> I have ghci 9.0.2; not sure about the version of the import
[17:08:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:08:22] <Hecate> Koen: what you're linking to is a package on Hackage, the community repository
[17:08:34] <Koen> okay
[17:08:35] <Hecate> so, you have to get that package as a dependency
[17:08:58] <Koen> ooooooh
[17:09:10] <Hecate> > This module provides an alternative definition for groupBy which does not require a transitive equivalence predicate.
[17:09:10] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:09:11] <lambdabot>  <hint>:1:6: error: parse error on input ‘module’
[17:09:17] <Koen> yes
[17:09:18] <Hecate> looks like you've been using the original groupBy 
[17:09:25] <Hecate> instead of the package you're looking at
[17:09:29] <Koen> fair enough
[17:10:42] *** Joins: coot (~coot@213.134.190.95)
[17:14:29] *** Joins: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com)
[17:14:39] <Arsen> what could cause a package (https://github.com/kowainik/tomland/) not to appear in stackage nightly anymore
[17:15:01] <geekosaur> usually it stopped building and they can't contact the maintainer to get it fixed
[17:16:27] <Arsen> oh it may be a revdep
[17:16:31] <Arsen> megaparsec is also gone
[17:17:14] <Arsen> wait, nvm, it's there
[17:17:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:19:53] *** Quits: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[17:20:05] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:20:08] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[17:20:59] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:78e9:2c9a:5431:d092)
[17:23:37] *** Quits: absentia (~absentia@user/absentia) (Quit: WeeChat 3.4)
[17:24:37] *** Quits: Megant (megant@user/megant) (Ping timeout: 240 seconds)
[17:25:02] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:1823:ee83:7026:65a9) (Ping timeout: 260 seconds)
[17:25:41] *** Joins: absentia (~absentia@user/absentia)
[17:26:07] *** Quits: deadmarshal (~deadmarsh@95.38.230.187) (Ping timeout: 256 seconds)
[17:26:39] *** Joins: Megant (megant@user/megant)
[17:27:01] *** Joins: Ariakenom_ (~Ariakenom@2001:9b1:efe:9d00:8937:70ea:8741:6137)
[17:27:28] *** Joins: alx741 (~alx741@157.100.197.240)
[17:28:09] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 256 seconds)
[17:28:45] *** Joins: wolfshappen (~waff@irc.furworks.de)
[17:31:40] *** Joins: shailangsa (~shailangs@host109-159-108-227.range109-159.btcentralplus.com)
[17:31:40] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:31:53] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Remote host closed the connection)
[17:31:55] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[17:31:58] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:32:18] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:32:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:32:48] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[17:33:14] *** Joins: hololeap (~hololeap@user/hololeap)
[17:34:34] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:35:06] *** Joins: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[17:35:27] *** Joins: fef (~thedawn@user/thedawn)
[17:35:33] *** Quits: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Client Quit)
[17:35:54] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[17:36:08] *** Quits: ubert (~Thunderbi@p200300ecdf09947e2c357846a3b3453e.dip0.t-ipconnect.de) (Quit: ubert)
[17:36:31] *** Joins: ubert (~Thunderbi@p200300ecdf09947e2c357846a3b3453e.dip0.t-ipconnect.de)
[17:37:09] *** Joins: Ariakenom__ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[17:38:42] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[17:39:39] *** Quits: ubert (~Thunderbi@p200300ecdf09947e2c357846a3b3453e.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:39:58] *** Joins: ubert (~Thunderbi@p200300ecdf09947e2c357846a3b3453e.dip0.t-ipconnect.de)
[17:41:22] *** Quits: Ariakenom_ (~Ariakenom@2001:9b1:efe:9d00:8937:70ea:8741:6137) (Ping timeout: 260 seconds)
[17:44:13] *** Quits: ubert (~Thunderbi@p200300ecdf09947e2c357846a3b3453e.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:48:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ad86:5044:3d0e:26e7)
[17:48:28] *** Joins: ubert (~Thunderbi@p548c8cd6.dip0.t-ipconnect.de)
[17:50:00] *** Joins: alx741 (~alx741@157.100.197.240)
[17:52:13] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ad86:5044:3d0e:26e7) (Ping timeout: 240 seconds)
[17:52:45] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[17:53:40] *** Quits: xff0x (~xff0x@2001:1a81:524f:ad00:4eb7:4d9:8878:178f) (Ping timeout: 250 seconds)
[17:53:41] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:54:45] *** Joins: xff0x (~xff0x@2001:1a81:524f:ad00:f091:6df4:fb78:756f)
[17:56:19] <janus> Arsen: aeson-2 just got merged into nightly so anything that isn't aeson-2 compatible is gone
[17:56:35] *** Quits: Kaipi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[17:56:57] <janus> there is usually a comment in build-constraints.yaml that shows why the package was disabled
[17:57:06] *** Joins: Kaipi (~Kaiepi@156.34.47.253)
[18:01:26] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[18:01:56] *** Joins: wroathe (~wroathe@user/wroathe)
[18:02:54] *** Joins: deadmarshal (~deadmarsh@95.38.230.187)
[18:05:47] *** Quits: Graham31415 (~Graham314@213.237.92.153) (Ping timeout: 256 seconds)
[18:10:15] *** Joins: alx741 (~alx741@157.100.197.240)
[18:10:53] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[18:11:33] *** Joins: max22- (~maxime@2a01cb08833598002f7f8e76f08da118.ipv6.abo.wanadoo.fr)
[18:12:21] *** Joins: __monty__ (~toonn@user/toonn)
[18:13:32] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:17:56] *** Quits: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com) (Ping timeout: 256 seconds)
[18:21:37] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:23:33] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Remote host closed the connection)
[18:23:57] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[18:30:16] *** Joins: alx741 (~alx741@157.100.197.240)
[18:30:18] *** Joins: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com)
[18:30:24] *** Quits: deadmarshal (~deadmarsh@95.38.230.187) (Ping timeout: 256 seconds)
[18:33:50] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:41:10] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[18:42:51] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[18:47:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:49:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[18:50:18] *** Joins: alx741 (~alx741@157.100.197.240)
[18:52:11] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:52:30] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[18:53:02] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:53:57] *** Quits: skewerr (spoonm@inaba.spoonm.org) (Read error: Connection reset by peer)
[18:54:10] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:54:10] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:54:10] *** Joins: wroathe (~wroathe@user/wroathe)
[18:57:20] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:58:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:59:24] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[19:00:14] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 260 seconds)
[19:11:00] *** Joins: alx741 (~alx741@157.100.197.240)
[19:12:39] *** Joins: cosimone (~user@93-44-184-23.ip98.fastwebnet.it)
[19:12:55] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[19:13:27] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[19:15:02] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[19:16:48] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[19:17:17] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:21:31] *** Joins: ix (~ix@213.205.241.13)
[19:26:30] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:28:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:35:34] *** Joins: alx741 (~alx741@181.199.42.143)
[19:35:46] *** Quits: xff0x (~xff0x@2001:1a81:524f:ad00:f091:6df4:fb78:756f) (Ping timeout: 245 seconds)
[19:36:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:37:21] *** Joins: off^ (~off@50.235.176.163)
[19:37:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:39:23] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[19:41:27] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[19:41:34] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[19:42:03] *** Joins: alx741 (~alx741@157.100.197.240)
[19:44:28] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:46:28] *** Joins: xff0x (~xff0x@2001:1a81:524f:ad00:23cf:423a:2190:173f)
[19:50:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:50:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ad86:5044:3d0e:26e7)
[19:51:11] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[19:51:44] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:54:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ad86:5044:3d0e:26e7) (Ping timeout: 240 seconds)
[19:57:40] *** Quits: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com) (Ping timeout: 256 seconds)
[19:59:30] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[20:00:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:01:04] *** Joins: alx741 (~alx741@157.100.197.240)
[20:02:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:03:50] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[20:05:48] *** Quits: Koen (~Koen@252.248.88.92.rev.sfr.net) (Quit: WeeChat 3.4)
[20:07:35] *** Joins: Guest|46 (~Guest|46@116.182.218.87.dynamic.jazztel.es)
[20:07:42] *** Quits: Guest|46 (~Guest|46@116.182.218.87.dynamic.jazztel.es) (Client Quit)
[20:09:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:11:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:16:56] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[20:17:17] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[20:18:15] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[20:20:33] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ad86:5044:3d0e:26e7)
[20:20:34] *** Joins: alp (~alp@user/alp)
[20:21:33] *** Joins: alx741 (~alx741@157.100.197.240)
[20:22:01] *** Joins: coot (~coot@213.134.190.95)
[20:23:34] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[20:23:59] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[20:25:14] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[20:28:04] *** Joins: maxime_ (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[20:30:31] *** Quits: max22- (~maxime@2a01cb08833598002f7f8e76f08da118.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[20:30:33] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:42:14] *** Joins: alx741 (~alx741@157.100.197.240)
[20:46:58] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[20:51:59] *** Joins: modnar (~modnar@shell.sonic.net)
[20:53:51] *** Quits: mmhat (~mmh@55d4ce4d.access.ecotel.net) (Quit: WeeChat 3.4)
[20:54:30] *** Joins: deadmarshal (~deadmarsh@95.38.230.187)
[20:54:37] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:54:37] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:54:37] *** Joins: wroathe (~wroathe@user/wroathe)
[20:56:08] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:95db:50d7:7eec:328d)
[20:58:52] *** Quits: deadmarshal (~deadmarsh@95.38.230.187) (Ping timeout: 256 seconds)
[20:59:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[21:01:26] *** Joins: mmhat (~mmh@55d4ce4d.access.ecotel.net)
[21:03:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:05:00] *** Joins: alx741 (~alx741@157.100.197.240)
[21:05:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:08:11] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:11:54] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Ping timeout: 256 seconds)
[21:16:16] *** Joins: cheater (~Username@user/cheater)
[21:20:15] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[21:21:58] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[21:24:19] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[21:25:02] *** Joins: alx741 (~alx741@157.100.197.240)
[21:25:34] *** Joins: econo (uid147250@user/econo)
[21:26:33] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[21:28:29] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:29:05] *** Joins: maxime__ (~maxime@2a01cb0883359800facf81d49c6f1298.ipv6.abo.wanadoo.fr)
[21:31:49] *** Quits: maxime_ (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[21:32:18] *** Joins: olle (~olle@i5E866D81.versanet.de)
[21:32:42] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:f502:3f20:a1e5:5bdc)
[21:32:56] <olle> Provided you have a functional core that's kind of small and an imperative shell that's a bit too big, what are the available strategies to move code into the functional core?
[21:32:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:33:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:33:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:33:08] *** Joins: wroathe (~wroathe@user/wroathe)
[21:33:21] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[21:35:30] <dminuoso> That question is a bit too general
[21:35:37] <dminuoso> But in princinple there's nothing wrong about imperative code
[21:36:06] <dminuoso> GHC largely consists of very imperative code for example
[21:37:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 272 seconds)
[21:38:17] <olle> dminuoso: Problem with imperative code is it's hard to unit test and often requires a lot of mocking.
[21:38:20] <olle> Or scaffolding.
[21:38:47] <olle> Found one quote: "To get the most out of functional core we will tend to load everything beforehand and save everything afterwards, limiting the round-trips to the DB while risking loading data that is not used"
[21:38:51] <olle> http://martinsson-johan.blogspot.com/2021/01/hexagonal-architecture-vs-functional.html
[21:39:23] <dminuoso> olle: Functional code will not, necessarily, make things easier to test.
[21:39:52] <dminuoso> It's mostly a question of general code design. 
[21:39:54] <olle> dminuoso: I think it will. :) 
[21:40:10] <dminuoso> Based on what data?
[21:40:25] <olle> To be clear, I work professionally in PHP, so there's often a lot of mixing between side-effects and business logic.
[21:40:40] <dminuoso> First, the word "functional" is really not well defined, so its not even clear to me what you mean by "functional" as opposed to imperative
[21:40:42] <olle> dminuoso: Based on my experience in our legacy PHP code base.
[21:40:43] <dminuoso> They are orthogonal dimensions
[21:41:13] <olle> Yes, "funcaional" as loosely pure or referential transparent. Or even "possible to test without mocks".
[21:41:36] <dminuoso> Well, if you define functional as "possible to test without mocks", then clearly functional is possible to test without mocks.
[21:41:42] <olle> :)
[21:41:50] <dminuoso> But that's really just a tautology
[21:42:18] <dminuoso> olle: I still think they are orthogonal dimensions.
[21:42:56] <olle> dminuoso: My point of view is really pragmatic.
[21:43:07] <olle> In my experience, pure functions are easier to test.
[21:43:11] <dminuoso> There's a good reason why there's several dozen different styles of testing, and that's not because certain programming approaches limit your testing abilities.
[21:43:20] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[21:43:28] <dminuoso> It's simply because different problem domains or software solutions require different appraoches
[21:44:02] <dminuoso> Insisting you be able to have some percentage of unit testing coverage is just blindly asserting this is a useful thing to do
[21:44:15] <olle> Sure
[21:44:34] <olle> Or yes, I make the assumption that 50% test coverage is better than 0 :)
[21:44:45] <dminuoso> Unit testing is something that pertains to code design, and is somewhat unrelated to matters like functional or purity
[21:44:54] <dminuoso> If you can ship code as modular fragments, then unit testing becomes viable
[21:45:03] *** Joins: alx741 (~alx741@181.199.42.143)
[21:45:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:45:21] <janus> let's say you have a bunch of data, and a bunch of mutations. after the 6th mutation, there is an invariant that now is valid for the rest of the program. data structures usually come with invariants, so this is an opporunity to invent a name for this data structure
[21:45:27] <dminuoso> The requirement to mock has less to do with functional, but usually by intricate dependencies on stateful behavior you cant control
[21:45:53] <janus> but that doesn't seem specific to functional programming, that is just about inventing abstractions
[21:46:26] <dminuoso> I feel pure functional code enables reasoning on the programmer level, and it certainly can in *some* situations enable things like quickcheck.
[21:46:38] <olle> janus: Sure, each domain entity comes with validation and rules.
[21:47:09] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:47:38] <janus> functional programming just means that the intermediate states are created by functions that return the new state instead of mutating it in-place, right?
[21:47:45] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[21:47:45] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[21:47:58] <dminuoso> functional programming, again, has little to do with testing.
[21:47:59] <janus> so one could argue that something can be both functional and imperative, like GHC that was mentioned previously
[21:48:06] <olle> janus: Mutation is one side-effect, but there are others, like IO to file or db
[21:48:32] <dminuoso> Lets assume one definition of functional programming, namely that our software programming principle revolves around HOFs for the most part
[21:48:53] <dminuoso> HOFs dont make testing any less or more testable than say a class-based approach from Java.
[21:49:05] <dminuoso> In Java you instantiate things, and test these objects. In Haskell you test functinos.
[21:49:11] <olle> dminuoso: That's not a useful def for me, sorry. In "functional core, imperative shell", it's assume to seprate purity from IO-dense code.
[21:49:16] <dminuoso> They are not any different if you blur the details
[21:49:30] <dminuoso> olle: See, now that again has little to do with functional either.
[21:49:39] <dminuoso> It's really about modular software design.
[21:49:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:49:56] <olle> dminuoso: "Modular" can mean a lot of things.
[21:50:08] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[21:50:28] <Franciman> is there any blog post or reference speaking about laziness advantages?
[21:50:31] <Franciman> over strict evaluation
[21:51:02] <olle> Franciman: OCaml vs Haskell ;D
[21:51:17] <dminuoso> olle: Well, so unit testing is usually a matter of testing individual functions.
[21:51:20] <Franciman> where can i find it, olle ?
[21:51:32] <dminuoso> So if you write them modularly, you can usually test them without mocking anything.
[21:51:33] <Franciman> https://markkarpov.com/post/haskell-vs-ocaml.html ?
[21:51:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:51:39] <olle> Franciman: Google? I'm mostly joking, but I assume someone wrote about it...
[21:51:39] <dminuoso> And you dont have to test everything either
[21:51:47] <dminuoso> Say mocking a database is usually a silly thing to do
[21:52:09] <dminuoso> But if you insist on dragging 10,000 lines of transitive code around on a database dependency, then that's simply non-modular code.
[21:52:25] <dminuoso> It's some big ball of spaghetti where you didnt manage to split the business logic from the database interaction
[21:52:54] <monochrom> "Why Functional Programming Matters" by John Hughes is actually "why laziness matters". There is a paper version and a video version.
[21:53:00] <dminuoso> So to enable unit testing, you can instead have a bunch of particular business logic functions you test in unit tests
[21:53:02] <Franciman> oh nice, thanks monochrom 
[21:53:40] <dminuoso> olle: Part of the problem may be that you're too focused on having complete coverage. But for unit tests its better to accept that you cant have that.
[21:53:50] <olle> dminuoso: That's given, but my question was about strategies to achieve such a divide.
[21:53:51] <dminuoso> So imagine what the core business logic is you want to test/assert.
[21:54:02] <dminuoso> That has nothing to do with purity
[21:54:15] *** Quits: phma (~phma@host-67-44-208-247.hnremote.net) (Read error: Connection reset by peer)
[21:54:54] <dminuoso> If I have some `processAndDumpFile :: String -> IO ()`, I can simply run that in a test, and check the resulting file - turning it into `process :: String -> Dat` is certainly a bit more convenient for testing, but it's not fundamentally different
[21:55:01] *** Joins: deadmarshal (~deadmarsh@95.38.230.187)
[21:55:10] *** Joins: phma (~phma@host-67-44-208-185.hnremote.net)
[21:55:18] <dminuoso> it doesn't really have a meaningful difference to the way you test
[21:55:27] <olle> dminuoso: Full picture: A test suite based on mostly integrity tests is slooow.
[21:55:46] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[21:56:18] <dminuoso> olle: integration tests are not the same thing, they're orthogonal to unit tests. in integration tests you're usually more concerns whether interfaces interact with each other correctly, where in unit tests you can test individual parts for their internal correctness.
[21:56:23] <dminuoso> why not have both?
[21:56:50] <olle> dminuoso: Of course you'll have both. But unit tests can be part in the dev feedback loop. Integrity tests can't (easily).
[21:57:33] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:58:15] <dminuoso> Integration tests can be too, my point is just trading one for another is not a wise thing.
[21:58:52] *** Quits: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[21:59:12] <olle> dminuoso: It really can't be, tho. Integrity tests in our product takes ~10 min to run, and it will increase.
[21:59:15] <dminuoso> You dont do unit tests because "integration tests are less useful", you do unit tests to assert correctness of individual components. You do integration tests to assert correctness of interfaces and coupling between components. The latter helps finding a different class of bugs
[21:59:50] <dminuoso> So its not a "should I do 1) or 2)". It's rather a question of "how many unit tests, integration tests and system tests do we want"
[22:00:00] <dminuoso> And for what reason do you want any of these
[22:00:22] <olle> dminuoso: To restate my original question, it's like "which strategies can we use to increase the ratio of fast unit tests?"
[22:00:43] *** Joins: vysn (~vysn@user/vysn)
[22:01:14] <dminuoso> olle: Keep a modular software design in mind *while* you write a component, with the explicit intent of unit testing it.
[22:01:32] <dminuoso> If you just do a lot of adhoc writing, yes testing becomes ahrd.
[22:02:59] <dminuoso> Our SDN compiler for example is constructed of a driver, multiple stages each consisting of phases. Its the drivers responsibility to execute stages, do a bit of housekeeping, and then feed artifacts into the next stage
[22:03:04] <dminuoso> each stage has zero knowledge of the next
[22:04:02] <dminuoso> that enables us to test stages in isolation as a kind of integration testing between the phases. then the phases have clear data boundaries, we have `N1 -> Comp N2`, `N2 -> Comp N3`, `N3 -> Comp N4`
[22:04:08] <olle> dminuoso: Duh, a compiler is a pipeline arch, easy to make pure :)
[22:04:24] *** Joins: alx741 (~alx741@157.100.197.240)
[22:04:25] <dminuoso> Sure so?
[22:04:39] <olle> Other domains are not so lucky :d 
[22:04:46] <dminuoso> Take inspiration from that in code design.
[22:04:48] <olle> But in fact, a web request could be a pipeline too
[22:04:55] <dminuoso> Yes, that's the point Im trying to make!
[22:05:10] <dminuoso> You could think of a web request of having these stages:
[22:05:46] <dminuoso> Decode/route request > request data from database > process data > write data back to database > turn result into response > render response
[22:06:00] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[22:06:06] <dminuoso> It might not work as a law, but depending on your problem domain, you might be able to fit 90% of that into that form
[22:06:18] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:06:40] <olle> dminuoso: Yes, the problem is when side-effects depends on each other. "Check if file exists, if no, write one, if writing failed, return error"
[22:07:10] <olle> dminuoso: One strategy to move all side-effects in one place is to use events.
[22:07:19] <olle> Or a queue.
[22:07:40] <olle> I think Free monad and/or tagless-final are other such in Haskell community...?
[22:09:40] <olle> You want the functional core to "eat" the imperative shell during refactor, kind of :) Like an amoeba :D
[22:12:17] *** Joins: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se)
[22:18:22] *** Joins: MatthiasG2 (~matthias@i6DFA0382.versanet.de)
[22:21:36] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[22:22:36] *** Joins: alx741 (~alx741@181.199.42.143)
[22:25:07] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[22:26:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:26:56] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[22:28:36] <olle> I wonder if free monad can be replaced with a builder pattern in an OOP lang, like new IO.if(fn => DB.getUser).then(fn => save new username);
[22:29:17] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 256 seconds)
[22:31:05] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[22:31:49] *** Quits: maxime__ (~maxime@2a01cb0883359800facf81d49c6f1298.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[22:32:34] <EvanR> let me introduce you to jquery
[22:33:30] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:78e9:2c9a:5431:d092) (Ping timeout: 260 seconds)
[22:36:16] <olle> :D
[22:36:30] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:37:17] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[22:38:33] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[22:38:48] <EvanR> the previous discussion on atomic transactional I/O and "sending" into the internet: if you limit yourself to datagrams or raw IP, you can hypothetically arrange for a set of grams to be "all dispatched" or "cancel all that". But since the internet is technically unreliable, I'm not sure how nice that would be
[22:39:16] <EvanR> ignoring local unreliability with the OS
[22:39:33] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:78e9:2c9a:5431:d092)
[22:39:42] <geekosaur> or not so technically, if you have my router :þ
[22:39:44] <olle> EvanR: Hm, is that related to our discussion? Or something else?
[22:39:55] <olle> No no, nevermind
[22:40:03] <EvanR> cloud haskell's "guarantee" that "if tcp is reliable, so is cloud haskell" or such
[22:41:57] *** Joins: alx741 (~alx741@157.100.197.240)
[22:44:18] <EvanR> olle, functional vs imperative is kind of missing a point, in haskell context you can have "pure code" (?) that looks imperative and so is just as easy to test
[22:45:14] <EvanR> IO is harder to test, because of IO, and to some extent because of I/O
[22:46:03] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:46:36] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Remote host closed the connection)
[22:46:59] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[22:47:12] <EvanR> IO became the main sewerage line of stuff they couldn't figure out how to do functionally so you can't even define it xD
[22:47:39] *** Joins: coot (~coot@213.134.190.95)
[22:47:56] <EvanR> if nice haskell are mineral crystals IO is chernobylite
[22:49:22] *** Quits: deadmarshal (~deadmarsh@95.38.230.187) (Ping timeout: 256 seconds)
[22:54:54] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 272 seconds)
[22:55:21] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Ping timeout: 276 seconds)
[22:58:11] <sm> chernobylite eh.. I guess that's a no-good, very bad type of mineral
[23:01:33] *** Joins: Sadeq (~Sadeq@151.235.4.11)
[23:02:00] *** Quits: Sadeq (~Sadeq@151.235.4.11) (Client Quit)
[23:02:13] *** Joins: akegalj (~akegalj@93-139-129-4.adsl.net.t-com.hr)
[23:02:23] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[23:02:59] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[23:03:33] *** Joins: maxime__ (~maxime@2a01cb08833598009e7cfeb2ba15b673.ipv6.abo.wanadoo.fr)
[23:04:42] *** Joins: alx741 (~alx741@181.199.42.143)
[23:05:22] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[23:06:11] <olle> EvanR: "Imperative shell" is better named "effectful shell" or such
[23:06:58] <olle> I think that's the idea behind the pattern, at least.
[23:07:12] *** Joins: jao (~jao@static-68-235-44-10.cust.tzulo.com)
[23:07:57] <olle> Not if the code contains for-loops :)
[23:09:02] <olle> It's complete shit that constructors in OOP always use the "new" keyword instead of FP convention of capital first letter. :d
[23:09:14] <olle> How are you supposed to do a DSL with that?
[23:09:15] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:09:25] <olle> new Add(new Int, new Int)
[23:09:46] <olle> I wonder if any OOP lang got rid of that...
[23:11:07] *** Joins: koolazer (~koo@user/koolazer)
[23:12:02] *** Quits: jao (~jao@static-68-235-44-10.cust.tzulo.com) (Ping timeout: 256 seconds)
[23:12:21] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[23:13:09] *** Joins: coot (~coot@213.134.190.95)
[23:13:10] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:13:12] *** Joins: jao (~jao@68.235.43.172)
[23:14:50] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:15:19] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:23:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:25:05] <monochrom> OO constructors and ADT constructors are different. Even opposite.
[23:25:44] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:26:40] <olle> Opposite? Pah!
[23:27:53] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[23:29:03] *** Joins: alx741 (~alx741@157.100.197.240)
[23:30:43] <EvanR> data dual to codata
[23:30:44] *** Joins: cynomys (~cynomys@user/cynomys)
[23:32:18] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:32:18] <olle> They are used for similar use-cases. 
[23:32:30] <olle> Mostly because FP don't have objects, and OOP don't have ADT
[23:32:47] <geekosaur> similar in some senses, different in others
[23:33:55] <monochrom> Two solutions to the same problem are always used in similar (even same) use cases. That doesn't mean they are the same solution.
[23:34:16] <monochrom> When I have the problem of boredom, I have two candidate solutions: AOE4, category theory.
[23:34:32] <monochrom> So suddenly AOE4 and category theory are similar. "similar".
[23:35:01] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[23:35:02] <monochrom> Right? They are used for similar uses cases. When I want some fun.
[23:35:03] <maerwald> they're both a waste of time?
[23:35:08] <maerwald> ah
[23:35:08] <monochrom> haha
[23:35:16] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:35:26] <monochrom> I don't object to "waste of time" really haha.
[23:36:47] <olle> I don't really care
[23:36:49] <olle> Do you?
[23:36:53] <monochrom> I do.
[23:36:56] <olle> :)
[23:37:17] <monochrom> People keep thinking that Haskell classes and Java interfaces are "similar". It's the same deal.
[23:37:30] <monochrom> They are opposite approaches to the same problem.
[23:37:50] <monochrom> They both solve the problem beautifully. That still doesn't mean they are similar.
[23:38:01] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:07] <monochrom> This is important in understand either notions properly.
[23:38:27] <monochrom> But then again you can object to proper understanding in the first place.
[23:40:27] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[23:41:18] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[23:42:12] *** Joins: machinedgod (~machinedg@24.105.81.50)
[23:45:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:47:06] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:49:02] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[23:49:19] *** Joins: coot (~coot@213.134.190.95)
[23:49:21] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:50:34] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[23:50:40] *** Joins: alx741 (~alx741@157.100.197.240)
[23:54:18] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[23:54:28] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:54:44] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Client Quit)
[23:55:02] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[23:55:27] <romesrf> o/
[23:55:43] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
