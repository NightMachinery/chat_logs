[00:03:17] <FromDiscord> <Elegantbeef> I dont really touch C, so that's why i'm so odd here, the most i've touched C is the slow manual wrapping of the pico-sdk
[00:03:58] <FromDiscord> <Elegantbeef> I'm just an idiot that doesnt have interest in the tool wrappings since i'll have to idiomatically do it anyway before i'll be happy, but it means a majority of the sdk isnt wrapped since either i havent or someone hasnt asked for it
[00:08:15] <FromDiscord> <Michal Maršálek> Hi, why does this not work: https://play.nim-lang.org/#ix=3LH1?
[00:08:27] <FromDiscord> <Michal Maršálek> (edit) "https://play.nim-lang.org/#ix=3LH1?" => "https://play.nim-lang.org/#ix=3LH1 ?"
[00:09:13] <PMunch> @Elegantbeef, the thing is that with Futhark you can focus on only creating your high level stuff. It's so draining to have a nice idea just to spend an entire evening trying to get c2nim or nimterop to just read your god damn C header file
[00:09:52] <PMunch> @Michal_Maršálek, why do you use that `id` thing?
[00:12:24] <FromDiscord> <Michal Maršálek> I want to have a template/macro that creates a complex generic type, here I created a simple example in which the template is an identity.
[00:14:21] <FromDiscord> <leorize> type expression that uses generics won't work on return type declaration unless you use some tricks
[00:15:18] <FromDiscord> <Michal Maršálek> In reply to @leorize "type expression that uses": wdym by on return type? this doesn't work either: https://play.nim-lang.org/#ix=3LH5
[00:15:22] <FromDiscord> <Michal Maršálek> What are the tricks
[00:17:24] <FromDiscord> <leorize> looks like your problem is different from mine
[00:18:14] <FromDiscord> <leorize> the trick is to create a typesection in the return value expression itself that aliases the generic type
[00:18:47] <FromDiscord> <leorize> that way any expressions using that will be deterred until the generic is instantiated
[00:19:07] <FromDiscord> <leorize> your problem seems to be in the template itself, though
[00:19:25] <FromDiscord> <Michal Maršálek> I don't really understand what you are saying
[00:19:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:26:02] <FromDiscord> <leorize> your problem right now is that the id template wants to be instantiated before T is available
[00:27:21] <FromDiscord> <Michal Maršálek> but `id` is not a generic?
[00:27:30] <FromDiscord> <leorize> it is a generic
[00:27:43] <FromDiscord> <leorize> typedesc is not a value type, it's a generic typeclass
[00:27:45] <FromDiscord> <Michal Maršálek> I thought it is just a regular compile time function
[00:27:55] <FromDiscord> <Michal Maršálek> which operates on types
[00:28:28] <FromDiscord> <leorize> that's not the case unfortunately
[00:28:40] <FromDiscord> <Michal Maršálek> i see
[00:30:05] <FromDiscord> <Michal Maršálek> than an untyped macro should work?
[00:30:26] <FromDiscord> <leorize> sent a code paste, see https://play.nim-lang.org/#ix=3LHa
[00:30:42] <FromDiscord> <leorize> pretty terrible, but playing with typedesc is never pleasant in Nim
[00:31:36] <FromDiscord> <Michal Maršálek> Yeah I'm trying to understand the types, macros, and compile time stuff in general and I'm discovering some tricky things
[00:32:26] <FromDiscord> <Michal Maršálek> Why doesn't this macro work than? https://play.nim-lang.org/#ix=3LHf
[00:32:33] <FromDiscord> <Michal Maršálek> (edit) "than?" => "then?"
[00:33:34] <FromDiscord> <leorize> here's another fun fact about Nim... uninstantiated generics are not valid if not produced by sem
[00:34:00] <FromDiscord> <Michal Maršálek> what is sem,
[00:34:03] <FromDiscord> <Michal Maršálek> ?
[00:35:34] <FromDiscord> <leorize> sem is short for semantic analysis pass in the compiler
[00:36:16] <FromDiscord> <Michal Maršálek> In reply to @leorize "here's another fun fact": is this realted to why the macro doesn't work?
[00:39:33] <FromDiscord> <Michal Maršálek> ok, I can live without being able to call templates in the function signatures
[00:39:38] <FromDiscord> <Michal Maršálek> another question
[00:41:45] <FromDiscord> <leorize> yes, the T generated by your macro is considered to not exist
[00:43:26] <FromDiscord> <leorize> you can get template calling to work if you use that lousy workaround I outlined above
[00:43:52] <FromDiscord> <leorize> that's how my union macro deals with this stuff\: https://github.com/alaviss/union/blob/main/union.nim#L369
[00:44:37] <FromDiscord> <leorize> https://github.com/alaviss/union/blob/main/union.nim#L338
[00:45:55] <FromDiscord> <Michal Maršálek> In reply to @leorize "you can get template": ah thanks
[00:45:58] <FromDiscord> <Michal Maršálek> it works
[00:46:23] <FromDiscord> <Michal Maršálek> Ok another question: why is Nim complaining here? https://play.nim-lang.org/#ix=3LHm
[00:46:58] <FromDiscord> <leorize> welcome to the amazing world of typedesc
[00:47:27] <FromDiscord> <leorize> so... that T is a typedesc, meaning that it will become a `typedesc[T]`
[00:47:57] <FromDiscord> <leorize> you passed `int` to it, creating `typedesc[int]` as the type for your data field
[00:48:50] <FromDiscord> <0ffh> I've got some code I really need to speed up.↵It's a backtracking combinatorial solver, at it seems to spend >80% of it's time in genericDeepCopy of deepcopy.nim, which kind of makes sense.↵So what could I do to speed up the copying of my solver state object?
[00:49:27] <FromDiscord> <leorize> don't use deep copy
[00:49:58] <FromDiscord> <Michal Maršálek> @leorize  that sounds complicated
[00:50:08] <FromDiscord> <leorize> assuming that you're storing your graph as a linked list-like object, you have to move it to an another representation
[00:50:28] <FromDiscord> <0ffh> K. The problem is, the state object has fields with tables and sequences.↵There's no linked lists.
[00:50:51] <FromDiscord> <leorize> does it have refs?
[00:50:54] <FromDiscord> <0ffh> I need those seqs and tables copied too.
[00:50:57] <FromDiscord> <0ffh> No refs.
[00:50:59] <FromDiscord> <leorize> it is↵(@Michal Maršálek)
[00:51:08] <FromDiscord> <leorize> @0ffh\: then just use normal copy
[00:51:26] <FromDiscord> <leorize> seqs and tables in Nim are value types
[00:51:36] <FromDiscord> <0ffh> In reply to @leorize "<@812269866366140427>\: then just use": Okay, that should be an easy experiment to do.
[00:52:43] <FromDiscord> <Michal Maršálek> In reply to @leorize "you passed `int` to": how do I write it correctly
[00:52:46] <FromDiscord> <Michal Maršálek> ?
[00:55:28] <FromDiscord> <leorize> that's the neat part, you don't
[00:55:40] <FromDiscord> <leorize> technically this is how it should be done\: https://play.nim-lang.org/#ix=3LHA
[00:55:58] <FromDiscord> <leorize> but it doesn't work, as usual for this kind of generics
[00:56:22] <FromDiscord> <Michal Maršálek> yeah
[00:56:30] <FromDiscord> <Michal Maršálek> that is what I had at first actually
[00:56:32] <FromDiscord> <leorize> small fix\: https://play.nim-lang.org/#ix=3LHB
[00:56:36] <FromDiscord> <leorize> still doesn't work
[00:57:13] <FromDiscord> <Michal Maršálek> I tried with the semicolon first ye
[00:59:03] <FromDiscord> <retkid> does anyone have a good up to date demo of arraymancer
[00:59:12] <FromDiscord> <retkid> currently it all looks like a pita
[00:59:31] <FromDiscord> <leorize> https://play.nim-lang.org/#ix=3LHF \<- "progress"
[01:00:05] <FromDiscord> <retkid> what are you doing an why
[01:00:06] <FromDiscord> <retkid> (edit) "an" => "and"
[01:00:36] <FromDiscord> <retkid> why
[01:00:40] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3LHG
[01:01:29] <FromDiscord> <retkid> the fact that you specify a..data nullifies any benefit from having the typecheck, and also its a typed function so why would you do that
[01:01:38] <FromDiscord> <retkid> (edit) "a..data" => "a.data"
[01:01:44] <FromDiscord> <leorize> playing gymnastics with the compiler to get @Michal Maršálek stuff to work lol
[01:02:04] <FromDiscord> <Michal Maršálek> I want to create a type which is generic in 1. a type T and 2. a value x:T
[01:02:09] <FromDiscord> <retkid> is Michal doing ``-gc:off`` nonsense
[01:02:17] <FromDiscord> <retkid> not literally that but in that vein
[01:02:33] <FromDiscord> <Elegantbeef> This is the type system it doesnt matter what memory management is doing
[01:02:45] <FromDiscord> <retkid> In reply to @retkid "not literally that but": wonder what that could mean
[01:03:33] <FromDiscord> <leorize> it's just generics crumbling on it's own weight
[01:03:38] <FromDiscord> <leorize> and typedesc doesn't help
[01:03:56] <FromDiscord> <retkid> its time to switch to an ML lang for this stuff
[01:04:07] <FromDiscord> <retkid> actually idk if that would help
[01:05:24] <FromDiscord> <Elegantbeef> What exactly are we after anyway?
[01:05:54] <FromDiscord> <leorize> somehow instantiate that type
[01:06:39] <FromDiscord> <Elegantbeef> It might not be possible simply cause i dont think Nim knows how to walk `[T; x: static T]`
[01:07:04] <FromDiscord> <Elegantbeef> Atleast in type def
[01:07:09] <FromDiscord> <leorize> yea I think so too
[01:07:27] <FromDiscord> <Elegantbeef> I could look at the culprit and see if it's simple
[01:07:37] <FromDiscord> <Elegantbeef> Though I doubt it's simple 😀
[01:09:02] <FromDiscord> <retkid> see i wanna use arraymancer but i have no money to buy a training server and i have no gpu and an i5-4790
[01:09:05] <FromDiscord> <retkid> (edit) "i5-4790" => "i5-4790S"
[01:09:16] <FromDiscord> <retkid> and im concerned that i will never actually train anything
[01:09:35] <FromDiscord> <leorize> your best bet for arraymancer guides is in the science channel
[01:10:43] <FromDiscord> <Isofruit> leorize, Elegantbeef, on the off chance, does one of you two have an idea on how to figure out within a nim program which package a given Exception-type comes from?
[01:10:57] <FromDiscord> <retkid> In reply to @leorize "your best bet for": its sad because I tried a bunch of different algorithms but i cant figure out any patterns in the data
[01:10:58] <FromDiscord> <Isofruit> (edit) "from?" => "from (at runtime)?"
[01:10:59] <FromDiscord> <0ffh> @leorize Haha, okay that dropped the time from 3:30 to 0:15! 🥳 😅
[01:11:11] <FromDiscord> <Elegantbeef> you can use a macro
[01:11:13] <FromDiscord> <Elegantbeef> But it's runtime information so it doesnt overly help
[01:11:21] <FromDiscord> <0ffh> Thanks!
[01:11:43] <FromDiscord> <leorize> nice!
[01:11:59] <FromDiscord> <Elegantbeef> Is that hours or minutes? 😀
[01:12:02] <FromDiscord> <Isofruit> Yeh, macro to get that info at compile time we (xflywind and I) contemplated but got kinda stuck there.
[01:12:07] <FromDiscord> <0ffh> 3min30sec to 15sec
[01:12:16] <FromDiscord> <leorize> @Isofruit\: you can if you reimplement RTTI in macros
[01:12:17] <FromDiscord> <Elegantbeef> What is your goal iso
[01:12:58] <FromDiscord> <leorize> nim doesn't have any idea about packages, mind you, you should be able to get module data but no more than that
[01:13:33] <FromDiscord> <Isofruit> API endpoints can throw all kinds of errors at runtime that I do not know ahead of time. When one occurs, I want to know a) which error type it is (that's easy enough, just log e.name) and b) what module needs to be imported to get access to that exception for a try-except statement
[01:13:38] <FromDiscord> <leorize> @0ffh\: deepCopy is pretty evil \:p
[01:14:07] <FromDiscord> <Elegantbeef> Well Nim knows what exceptions can be raised, so we can get the module name of them
[01:14:15] <FromDiscord> <Elegantbeef> This can be done all at CT for a block of code
[01:14:30] <FromDiscord> <retkid> In reply to @leorize "your best bet for": maybe best because im looking at this code and melting
[01:14:48] <FromDiscord> <retkid> who the fuck writes code like this ↵``  x.fc1.relu.fc2``
[01:14:49] <FromDiscord> <leorize> `{.raises: [].}` and Nim will let you know what raises what
[01:15:14] <FromDiscord> <Isofruit> Yeh, ideally I'd be able to log that at runtime since the error itself may not occur at compile time / I may not be aware it occurs
[01:15:29] <FromDiscord> <retkid> In reply to @retkid "who the fuck writes": isn't one of the first things you learn in writing clean code is using descriptive variables.
[01:16:22] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[01:16:28] <FromDiscord> <leorize> everyone knows that you need short variable names so your program can access it faster, duh
[01:16:48] <FromDiscord> <retkid> oh ok its an optimization, not bad code
[01:16:53] <FromDiscord> <retkid> >:)
[01:16:54] <FromDiscord> <Elegantbeef> Leorize this isnt python or lua \:d
[01:17:23] <FromDiscord> <leorize> obligatory /s
[01:17:58] <FromDiscord> <Elegantbeef> Why do you need the /s here
[01:18:10] <FromDiscord> <Elegantbeef> It's compiled code if someone actually thinks that they have more issues than messy code 😀
[01:18:35] <FromDiscord> <retkid> wat
[01:19:07] <FromDiscord> <retkid> the code has issues that i cant see because i cant understand it because the variables are named FOO AND VAR
[01:19:31] <FromDiscord> <Isofruit> Now back to seeing how constructor can make my life easier
[01:20:18] <FromDiscord> <Elegantbeef> Bet it wont↵(@Isofruit)
[01:20:36] <FromDiscord> <Isofruit> Have you already abandoned it?
[01:20:40] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:20:40] <FromDiscord> <leorize> that's the whole point of `{.raises: [].}`, to prevent any exception from being raised statically↵(@Isofruit)
[01:20:44] <FromDiscord> <Elegantbeef> Nah i recently made it better
[01:21:25] <FromDiscord> <SirOlaf> I am a back for more punishment related to that bug and think the compiler is wrong about comparing flags for generic types
[01:21:29] <FromDiscord> <Elegantbeef> Removed the dumb macros and now only going for `defaults` and `constr`
[01:22:20] <FromDiscord> <Isofruit> In reply to @leorize "that's the whole point": Isn't "raises" more a annotation (that is also verified) to show "hey, these exceptions cna be thrown by this function"?
[01:22:23] <FromDiscord> <retkid> i just learned if you hold alt you scroll faster in vscode
[01:23:21] <FromDiscord> <Isofruit> In reply to @Elegantbeef "Nah i recently made": Now I'm curious, why the assumption it won't make my life easier?
[01:23:22] <FromDiscord> <leorize> it's a constraint↵(@Isofruit)
[01:23:26] <FromDiscord> <0ffh> In reply to @leorize "<@812269866366140427>\: deepCopy is pretty": I'm surprised it makes such a great difference, I thought it only costs extra when there are actual references that need to be hunted down. 😆 ↵Anyways, that really dotted the is and crossed the ts on an already reasonable successful day for me.↵Also, you dropped this: :nim1:
[01:23:39] <FromDiscord> <Elegantbeef> and if you have a blank raises it means you cannot raise anything so have to handle it↵(@Isofruit)
[01:24:32] <FromDiscord> <Isofruit> Ohh you can force yourself to have to deal with all the exceptions at compile time and thus force the compiler to tell you of all the exceptions that are possible to occur? That... That is really neat
[01:24:38] <FromDiscord> <Isofruit> Does wonders for correctness
[01:27:01] <arkanoid> can you help me understand why vscode is not considering the .nim files in ~/.cache/nim/myproject_d/ ? I'm using futhark and it drops the generated nim files there. The code compiles but is hard and slow without the help of nimsuggest
[01:31:12] <FromDiscord> <Michal Maršálek> In reply to @Elegantbeef "It might not be": Would it somehow work without the requirement that x has type T?
[01:32:19] <FromDiscord> <Elegantbeef> Yea if you do `T; X: static int` i'd work
[01:32:34] *** rp3 is now known as rlp10
[01:32:34] <FromDiscord> <Michal Maršálek> I mean with a generic X: static
[01:33:06] <FromDiscord> <Michal Maršálek> ah thats nonsense
[01:33:25] <FromDiscord> <Michal Maršálek> nvm
[01:34:07] <FromDiscord> <leorize> it won't
[01:34:08] <FromDiscord> <Elegantbeef> `static` isnt a typeclass so indeed it'll not
[01:34:08] <FromDiscord> <leorize> but this is nim
[01:34:09] <FromDiscord> <leorize> I mean, it is a generic so technically it should be a typeclass
[01:34:58] <FromDiscord> <Michal Maršálek> I guess my only option is to make `X` a field and then use runtime asserts on it's value?
[01:35:16] <arkanoid> what's the most idiomatic way to translate a while with var assignment from C to nim? "while( (hFeature = OGR_L_GetNextFeature(hLayer)) != NULL ) { ... }"
[01:35:56] <FromDiscord> <Elegantbeef> `while (let hFeature = yourCall(hLayer); hFeature) != nil`
[01:36:18] <arkanoid> thanks!
[01:36:28] <FromDiscord> <leorize> the better way is to not do it because it's kind of a code smell \:p
[01:36:49] <FromDiscord> <Elegantbeef> Indeed
[01:36:51] <FromDiscord> <Michal Maršálek> (edit) "use runtime asserts" => "check it" | "it's value?" => "runtime?"
[01:37:42] <FromDiscord> <Michal Maršálek> well I'm trying to push myself as well as Nim and see what's possible
[01:37:43] <FromDiscord> <Isofruit> Ohhh defaults creates a `new<TypeName>` proc and a `<Type>.init()` proc
[01:37:59] <FromDiscord> <Elegantbeef> Does it do both?
[01:38:03] <FromDiscord> <Elegantbeef> Did i fuck something up?
[01:38:20] <FromDiscord> <Michal Maršálek> In reply to @leorize "the better way is": Not to do what?
[01:38:26] <FromDiscord> <Elegantbeef> If it does create both i fucked up
[01:38:35] <FromDiscord> <Elegantbeef> The while loop stuff michal
[01:38:48] <FromDiscord> <Isofruit> It appears to, I used to have `newCharacter` defined myself, I just commented it out
[01:39:10] <FromDiscord> <Elegantbeef> Well that's right, though i should add another parameter for it
[01:39:20] <FromDiscord> <Elegantbeef> One that allows the generic supporting `Character.new`
[01:39:40] <FromDiscord> <leorize> pretty much, though I'd prefer to avoid any kind of asserts↵(@Michal Maršálek)
[01:39:45] <FromDiscord> <Elegantbeef> For ref types it emits a `newT` for non-refs it emits `initT`
[01:39:50] <FromDiscord> <leorize> yea I was talking about the while loop thing↵(@Michal Maršálek)
[01:40:16] <FromDiscord> <Isofruit> works nicely with norm models and its tablename pragma
[01:40:49] <FromDiscord> <Elegantbeef> I will be making `implDefaults(Thingy, TypeDescConstr)` a thing when i get around to it
[01:40:58] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3LHT
[01:41:29] <FromDiscord> <Michal Maršálek> In reply to @leorize "pretty much, though I'd": That makes me very sad actually, but thank you all. 🙂
[01:41:44] <FromDiscord> <Isofruit> (edit) "https://play.nim-lang.org/#ix=3LHT" => "https://play.nim-lang.org/#ix=3LHV"
[01:41:46] <FromDiscord> <Elegantbeef> Yea that `Character.init` shouldnt work
[01:41:52] <FromDiscord> <Elegantbeef> So i guess bug found
[01:42:08] <FromDiscord> <Isofruit> Shall I open an issue so you don't have to?
[01:42:25] <FromDiscord> <Elegantbeef> Would be appreciated
[01:43:09] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[01:43:14] <FromDiscord> <Isofruit> Let me just first confirm that this is also an issue in inim, maybe the compiler just allows something illegal to happen that'll cause a runtime error
[01:43:36] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[01:43:39] <FromDiscord> <Elegantbeef> I have a feeling it's the inheritance causing the issue
[01:49:02] <FromDiscord> <Isofruit> does nim by default provide a <Type>.new() proc?
[01:49:48] <arkanoid> leorize, sure, I first translate C -> nim 1:1, then I drop some more idiom in it
[01:49:49] <FromDiscord> <Isofruit> Huh, yeah it does
[01:49:58] <FromDiscord> <Isofruit> (edit) "does" => "does, if the Type is an object"
[01:50:00] <FromDiscord> <Recruit_main707> calling `new Type` will create a `ref Type`
[01:50:09] <FromDiscord> <Isofruit> Ahhh that explains it
[01:50:17] <NimEventer> New thread by Cantanima: What's the proper idiom?, see https://forum.nim-lang.org/t/8789
[01:50:25] <FromDiscord> <Elegantbeef> It allocates a `ref Type` unless it's a ref type then it allocates just `Type`
[01:50:27] <FromDiscord> <Recruit_main707> its not exacty a <Type>.new() proc but it does the same
[01:50:55] <FromDiscord> <Isofruit> With the exception that it explodes in your face if you try to access any of its fields that store objects
[01:51:09] <FromDiscord> <Isofruit> or options
[01:51:20] <FromDiscord> <Isofruit> At least inim drowns me in a sea of red when I do that
[01:51:58] <FromDiscord> <Elegantbeef> `new T` will allocated only the root object so if you have other `ref T` it'll error↵(@Isofruit)
[01:54:35] <FromDiscord> <ajusa> I'm working on my html forms library and wanted to support multiselect, which means a sequence of strings. Right now a validator is defined as `  Validator = proc(value, label: string): string {.closure.}`. What's a good way to have a validator that'll operate on a sequence of strings? I've considered case objects but I feel like that may become too complicated. My honest reaction is to just treat sequences as a single deliminated string, 
[01:55:21] <FromDiscord> <Isofruit> In reply to @Elegantbeef "`new T` will allocated": There is no bug, it merely compiled because I didn't call that function anywhere
[01:55:35] <FromDiscord> <Isofruit> (edit) "In reply to @Elegantbeef "`new T` will allocated": There is no bug, it merely compiled because I didn't call that function anywhere ... " 03added "and didn't realize"
[01:55:49] <FromDiscord> <Elegantbeef> but `init(Character)` isnt right
[01:56:51] <FromDiscord> <Isofruit> Kinda, it's more that the issue isn't noticed by the compiler if it is inside of dead code. `newModel(Character)`, which is the proc within which Character.init() is called, itself is never called anywhere ever
[01:57:12] <FromDiscord> <Isofruit> The second I do call it, the compiler implodes as it should
[02:01:20] <FromDiscord> <Isofruit> So false alarm, I apologize!
[02:02:35] <FromDiscord> <Elegantbeef> Oh cause it's a generic it's just an instantiation error
[02:08:52] <FromDiscord> <Elegantbeef> I found where the issue with the static is, no clue if it'll be a fun fix
[02:13:25] <FromDiscord> <deech> Is there a way to explicitly call the property of an object, eg. I'd like `obj.f` to always mean the `f` field of `obj` and error if it doesn't exist even if  `proc f(obj:o ...)` exists.
[02:14:30] <FromDiscord> <deech> Even some kind of long hand is fine, like, `fieldOf(obj, f)` or something like that.
[02:15:49] <FromDiscord> <Elegantbeef> I could see term rewriting macros working here
[02:15:50] <FromDiscord> <Elegantbeef> Aside from that i dont know of a way
[02:16:50] <FromDiscord> <deech> I think it would be good to have some kind of builtin way of disambiguating. I try to stay away from term rewriting macros if possible. 🙂
[02:17:26] <FromDiscord> <deech> Maybe something like `obj[f]`?
[02:17:58] <FromDiscord> <Elegantbeef> You could make that
[02:18:43] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LI6
[02:18:47] <FromDiscord> <Elegantbeef> Doesnt prevent function calls though
[02:18:57] <FromDiscord> <Elegantbeef> Wrapping it could though
[02:20:11] <FromDiscord> <deech> Right, that's what I meant, I could write a macro that iterates over the field pairs and errors of `field` doesn't exist but in this case I think it would be good to have built in ways to disambiguate all uses of `.`. I run into issues all the time with module qualification as well.
[02:20:37] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LI7
[02:20:37] <FromDiscord> <Elegantbeef> It's not too hard for this case
[02:21:10] <FromDiscord> <Elegantbeef> I've never had an issue with properties vs procedures so i'll keep hush
[02:21:24] <FromDiscord> <Elegantbeef> I mean fields vs procedures
[02:22:37] <FromDiscord> <Elegantbeef> So it was like 5 loc to fix the static issue!
[02:22:51] <FromDiscord> <Elegantbeef> Only took me an hour to two write
[02:23:06] <FromDiscord> <Elegantbeef> hour or two to write\
[02:23:33] <FromDiscord> <evoalg> it's cos you got up too early beefy
[02:25:40] <FromDiscord> <Elegantbeef> Well i got too happy only fixed instantiation
[02:25:59] <FromDiscord> <Elegantbeef> dispatch is still borked
[02:26:46] <FromDiscord> <Elegantbeef> Wait nevermind, it works
[02:31:24] <FromDiscord> <treeform> In reply to @zetashift "<@107140179025735680>\: heyho, treeform, I'm": i have fixed the nimdocs now has right docs, some how it got stuck.
[02:31:59] <FromDiscord> <treeform> https://nimdocs.com/treeform/pixie/pixie.html
[02:35:13] <FromDiscord> <Isofruit> Managing to half the number of lines in my characterModel.nim thanks to constructor feels good
[02:35:38] <FromDiscord> <Isofruit> (edit) "half" => "halve"
[02:37:39] <FromDiscord> <Elegantbeef> Good to hear
[02:38:27] <FromDiscord> <Elegantbeef> Also worth noting you do not need the explicit types unless you really want to
[02:39:12] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LIc
[02:39:36] <FromDiscord> <deech> Oh wow, when did we get `{.defaults.}`?
[02:39:42] <FromDiscord> <Isofruit> Ah, you mean I can save myself the entire `name: string = ""` and just do name = ""
[02:39:43] <FromDiscord> <Elegantbeef> We didnt
[02:39:47] <FromDiscord> <Elegantbeef> My macro adds it
[02:39:58] <FromDiscord> <deech> Ah, cool!
[02:39:59] <FromDiscord> <Elegantbeef> https://github.com/beef331/constructor#defaults for context
[02:40:00] <FromDiscord> <Isofruit> That's fair, I just like to explicitly type my models
[02:42:06] <FromDiscord> <Elegantbeef> @SirOlaf\: any progress on your bug?
[02:42:50] <FromDiscord> <SirOlaf> Not really, I'm just confused that it's possible for the flags to be different after generateInstance
[02:42:54] <FromDiscord> <Isofruit> ... is there a lazy way to get nimble to update my projects nimble file for me? With all the packages I use and their versions etc?
[02:43:16] <FromDiscord> <Elegantbeef> It is not
[02:44:31] <FromDiscord> <SirOlaf> My phrasing was off, it's strange that the "template" in semBorrow can have different return type flags than the result of it
[02:44:40] <FromDiscord> <SirOlaf> And those flags must come from somewhere, and it should be generateInstance
[02:45:31] <FromDiscord> <Patitotective> In reply to @Elegantbeef "https://dev.to/beef331/demystification-of-macros-in": This was really helpful, Thanks 🙃
[02:46:59] <FromDiscord> <SirOlaf> In reply to @SirOlaf "And those flags must": So either the flags are wrong or the comparison is too strict
[02:50:22] <FromDiscord> <tsoj> Is it possible to pass templates as function parameters?
[02:51:35] <FromDiscord> <Elegantbeef> No you can pass it to template/macros though
[02:52:38] <FromDiscord> <Elegantbeef> What're you trying to do?
[02:54:58] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:56:29] <FromDiscord> <tsoj> creating a function that converts instances of different types that have the same structure but different atomics at the lowest level (e.g. float instead of int), while also applying an operator when converting the atomics
[02:57:13] <FromDiscord> <Elegantbeef> Got an small example of the manual written code?
[02:57:41] <FromDiscord> <Elegantbeef> I think i understand but want to be certain before i suggest diving
[02:59:10] <FromDiscord> <tsoj> This works except for the custom operator: https://play.nim-lang.org/#ix=3LIh
[02:59:35] *** Quits: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (Ping timeout: 268 seconds)
[03:03:28] <FromDiscord> <retkid> what does
[03:03:33] <FromDiscord> <retkid> ``..<`` do
[03:03:45] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3LIi
[03:03:52] <FromDiscord> <Elegantbeef> depends on context
[03:04:03] <FromDiscord> <Elegantbeef> It's an iterator and also range construction
[03:04:24] <FromDiscord> <Elegantbeef> Tsoj that might work, you now can defined your own `converTo` procs for each field type which will be called on `a.convertTo`
[03:04:26] <FromDiscord> <retkid> its just a fancy way of doing x-1
[03:04:42] <FromDiscord> <Elegantbeef> It's more readable yes
[03:04:51] <FromDiscord> <retkid> no its not
[03:04:58] <FromDiscord> <Elegantbeef> It is indeed
[03:05:39] <FromDiscord> <retkid> ``for a in 0 ..< 65`` is less readable then ``for a in 0 .. 65-1``
[03:05:45] <FromDiscord> <retkid> (edit) "65-1``" => "65-1:``"
[03:05:51] <FromDiscord> <Elegantbeef> It's more readable
[03:05:58] <FromDiscord> <Elegantbeef> You know what's even more readable
[03:06:03] <FromDiscord> <Elegantbeef> `for a in 0..64`
[03:06:17] <FromDiscord> <retkid> well thats what the compiler sees
[03:06:31] <FromDiscord> <retkid> unfortunately humans are not compilers
[03:06:47] <FromDiscord> <Elegantbeef> But the point is `less than` is easy to comprehend to me atleast than `x -1`
[03:07:03] <FromDiscord> <Elegantbeef> Same semantics but the range operator is easier to understand
[03:07:21] <FromDiscord> <Elegantbeef> It reads left to right without any operations
[03:07:39] <FromDiscord> <retkid> i guess but then i gotta convert it into words in my brain so it takes more time
[03:08:05] <FromDiscord> <Elegantbeef> You dont convert it to words?
[03:08:07] <FromDiscord> <retkid> so its like↵"for all digits between x and y while x is less than why"
[03:08:10] <FromDiscord> <retkid> (edit) "why"" => "y""
[03:08:32] <FromDiscord> <Elegantbeef> No it's more like `for x in range of  0 to less than y`
[03:08:36] <FromDiscord> <Elegantbeef> Atleast to me
[03:09:02] <FromDiscord> <Elegantbeef> Versus the mental overhead of reasoning the -1 and interpreting it
[03:09:05] <FromDiscord> <retkid> but i dont need to processes a loop when written like ``for a in x .. y``
[03:09:06] <FromDiscord> <Elegantbeef> It's all subjective anywho
[03:09:10] <FromDiscord> <retkid> -1
[03:09:18] <FromDiscord> <Elegantbeef> What ever you say
[03:09:30] <FromDiscord> <retkid> see, our brains work differently, and its pretty interesting
[03:30:14] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:39] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:30:56] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LIn
[03:31:24] <FromDiscord> <Patitotective> Not sure if there's a better way to use `result`
[03:31:30] <FromDiscord> <Elegantbeef> I'd not use return and not do the if expression on a single line
[03:32:10] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LIo
[03:32:18] *** Joins: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[03:32:27] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/JSG
[03:32:39] <FromDiscord> <Elegantbeef> Using return in macros is annoying since you cannot easily debug
[03:33:00] <FromDiscord> <Patitotective> sweet
[03:33:06] <FromDiscord> <Patitotective> thanks, really 🙃
[03:40:26] <FromDiscord> <DMI-1407> if i write a discord bot with nim... do i have to compile it for node.js or is it using a c++ discord api ?↵(also, where can i host it?... or do i have to host it myself)
[03:41:32] <FromDiscord> <Rosen> You would use nim bindings for the discord api, like `dimscord`, and compile it with the nim compiler
[03:42:03] <FromDiscord> <Rosen> And you would find some service to host it or run it on your own machine, hosting is not related to development
[03:42:41] <FromDiscord> <Rosen> (edit) "`dimscord`," => "the `dimscord` library,"
[03:44:08] *** Joins: victor_boludo (~victor_bo@177.79.83.6)
[03:44:17] <FromDiscord> <DMI-1407> but will i have to compile it to js or c ?
[03:44:40] <FromDiscord> <DMI-1407> because discords native api is written in js
[03:44:46] <FromDiscord> <DMI-1407> thats what confuses me
[03:45:40] <FromDiscord> <Rosen> Oh I got you
[03:45:53] <FromDiscord> <Rosen> Well if you use dimscord that should be fine for either, up to you
[03:46:08] <FromDiscord> <Rosen> At least as far as I know
[03:46:24] <FromDiscord> <Rosen> When I used it for a bot I compiled it with the C backend
[03:46:33] <FromDiscord> <Rosen> And just ran it on a VPS
[03:47:38] <FromDiscord> <DMI-1407> hm ok, how is the js support for some os handlers ? is it already supported ?
[03:47:53] <FromDiscord> <DMI-1407> (i just read the book about nim, but its a little bit outdated)
[03:48:25] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3LIv
[03:48:36] <FromDiscord> <Rika> Catch is a keyword
[03:48:38] <FromDiscord> <that_dude> Is it
[03:48:41] <FromDiscord> <Rika> I believe so
[03:49:04] <FromDiscord> <that_dude> I couldn't find any documentation on it/nimsuggest doesn't imply that
[03:49:26] <FromDiscord> <that_dude> or whatever nim extension I'm using in vs code
[03:49:38] <FromDiscord> <Rika> Huh it doesn’t say it is so it isn’t
[03:50:43] <FromDiscord> <that_dude> So uh, what is it then, a hidden keyword and intentional, or a bug
[03:50:54] <victor_boludo> Could someone tell me why this code hangs forever on `socket.recv`?
[03:50:55] <victor_boludo> ```
[03:50:55] <victor_boludo> import net
[03:50:56] <victor_boludo> let socket: Socket = newSocket()
[03:50:56] <victor_boludo> newContext().wrapSocket(socket = socket)
[03:50:57] <victor_boludo> socket.connect(
[03:50:57] <victor_boludo>     address = "www.americanas.com.br",
[03:50:58] <victor_boludo>     port = Port(443),
[03:50:58] <victor_boludo>     timeout = 3000
[03:50:59] <victor_boludo> )
[03:50:59] <victor_boludo> socket.send(data = "GET / HTTP/1.1\r\nHost: www.americanas.com.br\r\n\r\n")
[03:51:00] <victor_boludo> discard socket.recv(size = 300, timeout = 3000)
[03:51:00] <victor_boludo> ```
[03:51:34] <FromDiscord> <Rika> In reply to @that_dude "So uh, what is": Dunno
[03:52:25] <FromDiscord> <that_dude> Well what should I do about this, make a forum post?
[03:55:01] <FromDiscord> <DMI-1407> In reply to @victor_boludo "Could someone tell me": send and recv do not garantee that all datas will be send
[03:55:15] <FromDiscord> <DMI-1407> and they may block your thread
[03:56:12] <FromDiscord> <DMI-1407> (edit) "garantee" => "guarantee"
[03:56:58] <FromDiscord> <congusbongus> wouldn't it be easier using a http library instead of sockets?
[04:02:48] <victor_boludo> well, it hangs with std/httpclient too
[04:02:58] <victor_boludo> even setting the timeout to a lower value didn't help
[04:03:07] <victor_boludo> it just hangs
[04:06:52] *** Quits: victor_boludo (~victor_bo@177.79.83.6) (Quit: Client closed)
[04:08:37] *** Joins: victor_boludo (~victor_bo@177.79.83.6)
[04:10:11] *** Quits: victor_boludo (~victor_bo@177.79.83.6) (Client Quit)
[04:14:58] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LIx
[04:16:19] <FromDiscord> <Rika> First is invalid, second prolly is preferred, if you like third then okay
[04:19:06] <FromDiscord> <Rosen> In reply to @victor_boludo "port = Port(443),": Are you sure you should be connecting to the https socket? I would assume that it's expecting to see a handshake cert
[04:19:18] <FromDiscord> <Rosen> Try port 80 instead, unless this is intended
[04:19:37] <FromDiscord> <sealmove> Does someone know a human readable serialization format that supports sets?
[04:20:49] <FromDiscord> <Rika> What else do you expect out of the format? Free form or schema?
[04:21:25] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[04:21:36] <FromDiscord> <sealmove> hmm wdym?
[04:22:06] <FromDiscord> <Rika> I don’t exactly have an answer for you anyway actually
[04:22:38] <FromDiscord> <Rika> Basically do you want something like JSON which is free form or Protobuf which needs a schema (disregarding that they’re more different than that)
[04:23:17] <FromDiscord> <sealmove> yeah I am using JSON currently
[04:23:25] <FromDiscord> <sealmove> but schema is ok
[04:23:29] <FromDiscord> <sealmove> maybe even better
[04:24:47] <FromDiscord> <Elegantbeef> To support sets in a human readable format you're probably almost certainly going to have to do a parse hook on a string
[04:26:25] <FromDiscord> <sealmove> I don't know what this is 😅
[04:26:43] <FromDiscord> <Elegantbeef> You have a string `"{10, 20, 30}"` in your format
[04:26:52] <FromDiscord> <Elegantbeef> Then parsing you remove `{}` and iterate over it
[04:28:46] <FromDiscord> <evoalg> In reply to @retkid "see, our brains work": I've been using `for a in 0 .. sq.high`
[04:29:53] <FromDiscord> <evoalg> better than `for a in 0 .. len(seq) - 1` ... but yea `for a in 0 ..< len(sq)` is ok too
[04:30:39] <FromDiscord> <Elegantbeef> `for a in 0.. seq.high` is indeed the best
[04:33:00] <FromDiscord> <Rosen> victor_boludo in case it didn't ping you when I replied, see above
[04:34:40] <FromDiscord> <sealmove> In reply to @Elegantbeef "Then parsing you remove": so _parse hook_ means parsing with more than 1 iteration?
[04:35:04] <FromDiscord> <Elegantbeef> Parsehook is a user defined hook for a specific type in `jsony` and the stdlib `std/jsonutils`
[04:35:18] <FromDiscord> <sealmove> oh
[04:35:27] <FromDiscord> <Elegantbeef> Basically you give the data to procedure to then apply to data
[04:35:46] <FromDiscord> <sealmove> i see thanks
[04:39:20] <FromDiscord> <evoalg> I've seen lots of comments about people taking exception to nim being called "transpiled" ... so I know nim isn't transpiled, but I don' t know what it means (and I don't know why people take exception to it)?
[04:39:41] <FromDiscord> <Elegantbeef> It depends on your definition
[04:39:47] <FromDiscord> <Elegantbeef> Some say "source to source" is transpilation
[04:40:16] <FromDiscord> <Elegantbeef> Others say "higher level to lower level of abstraction is compilation, so Nim -\> C is compilation"
[04:41:05] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LIF
[04:41:12] <FromDiscord> <evoalg> Ahhh so some people belittle nim saying it's just a transpiler, but it's actually a compiler
[04:41:28] <FromDiscord> <Elegantbeef> I mean i'm indifferent i feel like that difference is negligable
[04:41:44] <FromDiscord> <Elegantbeef> Rust for instance uses LLVM as an IR, Nim uses C as an IR
[04:41:53] <FromDiscord> <Elegantbeef> The IR hardly matters
[04:42:03] <FromDiscord> <evoalg> IR?
[04:42:25] <FromDiscord> <Elegantbeef> Intermediate Representation
[04:42:33] <FromDiscord> <Elegantbeef> Basically what does it compile down to before ASM
[04:42:39] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3LIG
[04:42:42] <FromDiscord> <Elegantbeef> It's a float32
[04:42:46] <FromDiscord> <retkid> AH
[04:43:14] <FromDiscord> <Elegantbeef> `'f32` is just a literal annotation
[04:43:17] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#lexical-analysis-numeric-literals
[04:43:39] <FromDiscord> <retkid> but why does it return↵``0.009999999776482582``
[04:44:07] <FromDiscord> <Elegantbeef> Floating point 32
[04:44:14] <FromDiscord> <Elegantbeef> Floats have limited range of values
[04:44:22] <FromDiscord> <ynfle> In reply to @Patitotective "Is this the proper": It depends on the constructor, If you are looking for a `@` with and array then yes. If not, not. Meaning, macros that are untyped, don't have `@[1, 2, 3]` as a sequence. It's just a bunch of identifiers and brackets
[04:44:49] <FromDiscord> <Elegantbeef> Thanks ynfle was about to write to that
[04:44:51] <FromDiscord> <retkid> In reply to @Elegantbeef "Floats have limited range": i think im missing something lowlevel
[04:44:59] <FromDiscord> <Elegantbeef> Too many things to address at one, plus trying to fix the compiler
[04:45:03] <FromDiscord> <retkid> (edit) "lowlevel" => "low level"
[04:45:13] <FromDiscord> <Elegantbeef> a float32 is only 32bits but represents -inf .. inf
[04:45:17] <FromDiscord> <Patitotective> In reply to @ynfle "It depends on the": Thanks 🙃
[04:45:32] <FromDiscord> <Elegantbeef> Becuase of that range and limited size you cannot get exact values
[04:45:40] <FromDiscord> <retkid> In reply to @Elegantbeef "a float32 is only": ok i think whats confusing me more is why the hell its being fed into an optimizer
[04:45:51] <FromDiscord> <Elegantbeef> It's not being optimized?
[04:46:04] <FromDiscord> <retkid> but why that
[04:46:13] <FromDiscord> <Elegantbeef> Cause that's how floats work
[04:46:17] <FromDiscord> <ynfle> In reply to @retkid "i think im missing": You can think of it as having a limited amount of decimal points. 64 bits has more decimal points
[04:46:24] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3LIH
[04:46:25] <FromDiscord> <Elegantbeef> `0.01` cannot be represented accurately in 32bit float
[04:46:46] <FromDiscord> <Rika> In binary it cannot
[04:46:54] <FromDiscord> <Rika> In decimal sure
[04:46:56] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3LIH" => "https://play.nim-lang.org/#ix=3LII"
[04:47:00] <FromDiscord> <Rika> But floats are binary
[04:47:04] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LIJ
[04:47:27] <FromDiscord> <Elegantbeef> How the hell am i supposed to know why they pass 0.01, read the code
[04:47:28] <FromDiscord> <retkid> i think its just the uncommented magic number
[04:47:59] <FromDiscord> <retkid> In reply to @Elegantbeef "How the hell am": THE CODE ISN'T HELPFUL
[04:48:06] <FromDiscord> <Rika> I don’t know what you want help for anymore
[04:48:19] <FromDiscord> <Elegantbeef> Go to the source of `optimizerAdam`
[04:48:29] <FromDiscord> <Elegantbeef> Nim ships source code libraries
[04:49:53] <FromDiscord> <evoalg> isn't it to do with https://en.wikipedia.org/wiki/Floating-point_arithmetic#Accuracy_problems ?
[04:50:04] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3LIK
[04:50:17] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3LIK" => "https://play.nim-lang.org/#ix=3LIL"
[04:50:21] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3LIL" => "https://play.nim-lang.org/#ix=3LIM"
[04:50:22] <FromDiscord> <Elegantbeef> You can post the code here all day, read what it's doing
[04:50:24] <FromDiscord> <Elegantbeef> It is indeed vo
[04:50:24] <FromDiscord> <ynfle> It is the learning rate
[04:51:18] <FromDiscord> <Elegantbeef> There was a good website that explained floating point inaccuracies, but dont recall it
[04:51:42] <FromDiscord> <evoalg> there is this: https://www.exploringbinary.com/why-0-point-1-does-not-exist-in-floating-point/ ... but I dunno if it's good
[04:52:10] <FromDiscord> <Rika> In reply to @Elegantbeef "There was a good": Me too
[04:52:40] <FromDiscord> <Rika> https://0.30000000000000004.com/
[04:52:47] <FromDiscord> <Rika> https://floating-point-gui.de/
[04:52:48] <FromDiscord> <retkid> I think im just gonna have to accept it because↵``learning_rate: T = T(0.001)``↵is kinda strange when you give it a float32 because ``(0.01'f32)(0.0001)`` isn't valid code
[04:52:49] <FromDiscord> <Elegantbeef> There you go
[04:52:57] <FromDiscord> <Elegantbeef> The first one is it
[04:53:05] <FromDiscord> <Rika> T can be a static value
[04:53:06] <FromDiscord> <Rika> ?
[04:53:30] <FromDiscord> <Elegantbeef> T is the type
[04:53:44] <FromDiscord> <Rika> I mean yes I know but I ask ret
[04:54:13] <FromDiscord> <retkid> alright i give up on understanding whatever this is
[04:54:37] <FromDiscord> <Elegantbeef> Congrats
[05:01:30] <FromDiscord> <retkid> ok i think i understand  but this function has no comments that pertain to the code or why it exists
[05:01:51] <FromDiscord> <retkid> so i still have no clue why they put that in
[05:02:55] <FromDiscord> <retkid> if you use the default value nothing changes
[05:03:24] <FromDiscord> <congusbongus> uncommented code???↵I remember inheriting code from some solo dev of a video codec and trying to understand his comments with stuff like `// I LIKE CHEESE`
[05:04:00] <FromDiscord> <retkid> those are worse than no comments
[05:04:09] <FromDiscord> <retkid> because those comments make a lot of sense to the dev
[05:04:17] <FromDiscord> <retkid> it probably makes them immediately remember what it does
[05:04:28] <FromDiscord> <retkid> but you don't have those memories so its kinda taunting you
[05:05:13] <FromDiscord> <ynfle> In reply to @retkid "ok i think i": are you wondering what the learning rate is and how it affects the model?
[05:05:39] <FromDiscord> <retkid> why they put 0.00'f32 in
[05:05:53] <FromDiscord> <retkid> out of all the numbers, why that
[05:05:59] <FromDiscord> <congusbongus> git blame; email author
[05:06:15] <FromDiscord> <ynfle> You mean 0.001? or the 'f32?
[05:06:17] <FromDiscord> <retkid> I could dm him here, but i dont wanna waste his time
[05:06:36] <FromDiscord> <retkid> why both of those two things together
[05:07:30] <FromDiscord> <retkid> i assume its because the model was setup to use f32
[05:07:35] <FromDiscord> <Elegantbeef> Cause they want the proc to be specialized for a float32 and want it to have the learning rate of 0.001
[05:07:48] <FromDiscord> <Elegantbeef> It's an unconstrained generic proc, why would you make that assumption
[05:08:03] <FromDiscord> <retkid> the models are not
[05:08:12] <FromDiscord> <retkid> the tenors are assigned to types
[05:08:44] <FromDiscord> <retkid> maybe its stupid to assume that interacting the model would require the type explicitly specified ¯\_(ツ)_/¯
[05:14:09] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:15:53] <FromDiscord> <ynfle> It doesn't need it specified, but the larger the float, the more the memory
[05:16:26] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:36:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[05:44:36] <FromDiscord> <evoalg> so float8 and float16 may end up using less mem, but are they faster too? ... with float32 and float64 I've been told that in a 64 bit cpu they are both processed at the same speed, so for smaller ones (if bit-packing isn't used) they wouldn't be faster but only saves mem - is that right?? ... or does the cpu do some sort of batch-processing-number-crunching?
[05:45:09] <FromDiscord> <Elegantbeef> Performance can be got from using smaller floats for a multitude of reasons
[05:45:18] <FromDiscord> <evoalg> ahhhh ok!
[05:46:34] <FromDiscord> <Elegantbeef> They're smaller so you get more cache efficiency is one benefit, I dont know if they're more or less efficient in operations though
[05:48:42] <FromDiscord> <Elegantbeef> I think on some CPUs it might be slower but cant say for certain
[05:48:56] <FromDiscord> <Elegantbeef> talking about modern CPUs of course
[05:51:25] <FromDiscord> <congusbongus> they can be slower if you operate on individual floats - the CPU has to load them out, perform the operation, then store it back in, because it operates at the word size (64 bit)↵so unless you know what the assembly code is, use the native int/float sizes↵except for using less memory if you used packed data structures↵also alignment matters a lot
[05:53:30] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:e50f:aeef:3171:b583)
[05:58:37] <FromDiscord> <evoalg> ok easy, thanks!
[05:59:06] *** Joins: neurocyte09172 (~neurocyte@user/neurocyte)
[06:00:37] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:00:37] *** neurocyte09172 is now known as neurocyte0917
[06:10:49] <FromDiscord> <Rika> thats an if youre working on indiv floats though
[06:12:27] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[06:15:02] <FromDiscord> <evoalg> ahh ok
[06:19:36] <NimEventer> New Nimble package! nim-snappy - Nim implementation of Snappy compression algorithm, see https://github.com/status-im/nim-snappy
[06:21:03] <FromDiscord> <Rika> dont we already have this as supersnappy
[06:23:19] <FromDiscord> <Elegantbeef> I thought so
[06:24:00] <FromDiscord> <Rika> probably a matter of status needing to do whatever they need exactly then
[06:24:27] <FromDiscord> <Elegantbeef> They do have crc32 in their repo
[06:26:34] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[06:27:11] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:28:01] *** Joins: rockcavera (~rc@192.12.112.107)
[06:28:01] *** Quits: rockcavera (~rc@192.12.112.107) (Changing host)
[06:28:01] *** Joins: rockcavera (~rc@user/rockcavera)
[06:28:06] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:09:49] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[07:34:24] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:02:13] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[08:19:35] <FromDiscord> <Rika> what is the status of destructors again?
[08:19:43] <FromDiscord> <Rika> works with refc? i dont remember
[08:19:56] <FromDiscord> <Elegantbeef> I think they work just not predictably
[08:20:10] <FromDiscord> <Elegantbeef> In other words you have to wait for a GC collect
[08:20:12] <FromDiscord> <Elegantbeef> Or force one
[08:20:44] <FromDiscord> <Rika> yikes
[08:28:04] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3LJs
[08:28:31] <FromDiscord> <Elegantbeef> Yes `varargs` is converted it a contiguous array
[08:28:46] <FromDiscord> <Elegantbeef> into a contiguous\
[08:28:55] <FromDiscord> <that_dude> What does that mean?
[08:29:12] <FromDiscord> <Elegantbeef> I meant homogenous
[08:29:22] <FromDiscord> <Elegantbeef> So `[1, "abc"]`
[08:29:53] <FromDiscord> <Elegantbeef> Which is invalid
[08:30:06] <FromDiscord> <that_dude> That's what I thought, I just wanted to be sure I wasn't wasting my time lol
[08:33:03] <FromDiscord> <Rika> ~~better to waste someone elses time than your own~~ it is a joke
[08:33:28] <FromDiscord> <that_dude> >:)
[08:35:40] <FromDiscord> <Elegantbeef> Here's a solution around it https://play.nim-lang.org/#ix=3LJw
[08:44:26] <FromDiscord> <sharpcdf> sent a code paste, see https://play.nim-lang.org/#ix=3LJy
[08:44:30] <FromDiscord> <sharpcdf> trying to test out the js backend :/
[08:45:07] <FromDiscord> <Elegantbeef> What's the mismatch
[08:45:20] <FromDiscord> <Elegantbeef> Oh i see the issue
[08:45:23] <FromDiscord> <Elegantbeef> `document.write`
[08:45:26] <FromDiscord> <Elegantbeef> `Document` is a type
[08:45:43] <FromDiscord> <sharpcdf> oh bruh
[08:45:46] <FromDiscord> <sharpcdf> mb
[08:45:48] <FromDiscord> <sharpcdf> thanks lmao
[08:46:11] <FromDiscord> <sharpcdf> shit youre right
[08:47:09] <FromDiscord> <sharpcdf> ok wait how do i open js files
[08:47:23] <FromDiscord> <sharpcdf> run them
[08:47:43] <FromDiscord> <Rika> compile in nim, you should see an output file?
[08:49:30] <FromDiscord> <Elegantbeef> `nim js yourFile.nim` is how
[08:49:38] *** Quits: lumo_e (~enrico@151.29.77.175) (Quit: Quit)
[08:49:45] <FromDiscord> <Elegantbeef> You'll probably want `-d:danger` or `-d:release` to reduce the debug information, but that's between you and your god
[09:01:33] <FromDiscord> <that_dude> In reply to @Elegantbeef "Here's a solution around": That's actually interesting, I'll look into that later
[09:01:51] <FromDiscord> <haoyu> the nim-lang nightly build is stuck in 2021, will it come with us into the new year?
[09:02:25] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:02:52] *** Joins: sagax (~sagax_nb@user/sagax)
[09:06:02] <FromDiscord> <haoyu> I found it
[09:06:29] <FromDiscord> <haoyu>  https://media.discordapp.net/attachments/371759389889003532/929971939588587602/unknown.png
[09:19:12] <arkanoid> I'm currently using "patchelf --set-rpath '$ORIGIN/lib' myexecutable" after build pass as I'm failing to do the same with passC/passL, do you know how? 
[09:26:30] <arkanoid> this page does that just with --passL:"-rpath ..." https://pewpewthespells.com/blog/using-sanitizers-with-nim.html but I'm getting "gcc: error: unrecognized command line option ‘-rpath’" instead
[09:28:41] <FromDiscord> <Elegantbeef> You probably should use clang as the compiler if you're not
[09:36:11] <FromDiscord> <leorize> arkanoid\: `--passL:-Wl,-rpath,path_goes_here` is what you need
[09:49:42] <FromDiscord> <sharpcdf> how would i redirect to another page with the js backend?
[09:50:00] <FromDiscord> <sharpcdf> im trying `window.location` but i dont know how to convert a string to a location object
[09:52:20] <FromDiscord> <Elegantbeef> Ah `LocationObj` isnt exported so it's less than ideal but you'd just use the object constructor and set the coresponding fields here i think https://github.com/nim-lang/Nim/blob/version-1-6/lib/js/dom.nim#L1239-L1249
[09:52:47] <FromDiscord> <Elegantbeef> There is also `replace` which might do what you want?
[09:53:49] <FromDiscord> <Elegantbeef> yea replace seems to be "right"
[09:54:14] <FromDiscord> <Elegantbeef> You could import `assign` or similar
[09:55:49] <FromDiscord> <sharpcdf> In reply to @Elegantbeef "There is also `replace`": ill look into it
[09:55:58] <FromDiscord> <sharpcdf> i also found window.open() which should be fine for now
[09:56:00] <FromDiscord> <sharpcdf> thanks
[09:56:10] <FromDiscord> <Elegantbeef> `proc assign(location: Location, dir: cstring) {.importjs.}` if you want assign
[09:56:20] <FromDiscord> <Elegantbeef> JS super easy to interop with ime
[10:01:55] <FromDiscord> <sharpcdf> the problem is that theres no location variable
[10:02:01] <FromDiscord> <sharpcdf> just the type
[10:02:11] <FromDiscord> <sharpcdf> and i think it has to be preset
[10:04:16] <FromDiscord> <Elegantbeef> `document.location`
[10:04:16] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/version-1-6/lib/js/dom.nim#L208 for reference to what `document` has
[10:04:32] <FromDiscord> <Elegantbeef> What?
[10:04:51] <FromDiscord> <sharpcdf> oh
[10:04:53] <FromDiscord> <Elegantbeef> Ah sorry it's `window.location` i'm tired
[10:04:55] <FromDiscord> <sharpcdf> i didnt see that lmao
[10:05:06] <FromDiscord> <sharpcdf> either way thanks lmao
[10:05:08] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/version-1-6/lib/js/dom.nim#L133
[10:05:10] <FromDiscord> <Elegantbeef> Sadly this stuff isnt visible
[10:08:44] <FromDiscord> <sharpcdf> thanks
[10:08:52] <FromDiscord> <sharpcdf> one last question before i pass out
[10:10:12] <FromDiscord> <sharpcdf> sent a code paste, see https://play.nim-lang.org/#ix=3LJJ
[10:10:16] <FromDiscord> <sharpcdf> specifically the `else` part
[10:10:26] <FromDiscord> <sharpcdf> it doesnt create the h1
[10:11:01] <FromDiscord> <Elegantbeef> It creates it but doesnt add it
[10:11:05] <FromDiscord> <Elegantbeef> Or atleast it should
[10:11:36] <FromDiscord> <sharpcdf> so then what might the problem be
[10:11:46] <FromDiscord> <Elegantbeef> not doing `addElement` or w/e it is
[10:11:58] <FromDiscord> <Elegantbeef> I dont raw JS much
[10:13:29] <FromDiscord> <Elegantbeef> Correction i dont raw js ever
[10:15:10] <FromDiscord> <sharpcdf> lmao same
[10:17:46] <FromDiscord> <sharpcdf> found it
[10:17:56] <FromDiscord> <sharpcdf> sent a code paste, see https://play.nim-lang.org/#ix=3LJL
[10:18:03] <FromDiscord> <sharpcdf> thanks
[10:28:12] <FromDiscord> <Larky> hi everyone, can someone tell me what this code does? (I need to write its analog on windows, but I cannot do it until I understand what this code does. posix library)
[10:28:38] <FromDiscord> <evoalg> In reply to @Elegantbeef "Here's a solution around": it doesn't run for me on playground?
[10:28:59] <FromDiscord> <Elegantbeef> Read the error
[10:29:19] <FromDiscord> <Elegantbeef> The design parameters was only accept `int/string`
[10:29:20] <FromDiscord> <evoalg> ohhh! I understand!
[10:29:22] <FromDiscord> <Larky> (edit) "hi everyone, can someone tell me what this" => "sent a" | "does? (I need to write its analog on windows, but I cannot do it until I understand what this code does. posix library)" => "paste, see https://play.nim-lang.org/#ix=3LJN"
[10:29:56] <FromDiscord> <evoalg> (not the code, but I understand that it should error :D)
[10:31:37] <FromDiscord> <Elegantbeef> That seems to just see if a file exists and if it's a socket
[10:31:43] <FromDiscord> <Elegantbeef> I could be wrong
[10:31:56] <FromDiscord> <Elegantbeef> Just looked at the `stat(2)` manpage
[10:32:07] <FromDiscord> <Elegantbeef> Yea evo it was purposely written to show "hey this does indeed error"
[10:34:47] <FromDiscord> <evoalg> I thought it was purposely written to show anything can be done with macros 😉
[10:35:17] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[10:36:15] <FromDiscord> <Elegantbeef> If you have a keyboard and the willpower to write it, pretty much
[10:36:20] <FromDiscord> <Elegantbeef> Though there are some things restrained
[10:41:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:47:42] <FromDiscord> <evoalg> I think I just realized that a generic proc is just shorthand for overloading several proc's
[10:48:04] <FromDiscord> <Elegantbeef> Indeed
[10:48:21] <FromDiscord> <evoalg> I dunno what that took me so long!
[10:48:26] <FromDiscord> <Elegantbeef> It's really just a ergonomic template that's constrained to a list of types
[10:50:35] <FromDiscord> <Elegantbeef> C++'s generics are actually just templates
[10:54:09] <FromDiscord> <evoalg> is it possible to limit args passed to templates in nim ? ... eg to be only int or float?
[10:54:31] <FromDiscord> <Elegantbeef> Yea they work just like procs
[10:54:45] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/xrD
[10:55:09] <FromDiscord> <Elegantbeef> Templates parameters are dispatched upon just like procs
[10:58:00] <FromDiscord> <evoalg> so I can do `template doThing(a: int or float) = discard` ?
[10:58:14] <FromDiscord> <Elegantbeef> Yess
[10:58:45] <FromDiscord> <evoalg> does the generic `[T]` work with templates also?
[10:59:03] <FromDiscord> <Elegantbeef> Yep
[10:59:04] <FromDiscord> <Rika> Kinda?
[10:59:12] <FromDiscord> <Rika> I’ve heard some issues though
[10:59:31] <FromDiscord> <Elegantbeef> There are some caveats depending what you're doing but it does indeed work
[10:59:59] *** Joins: PMunch (~PMunch@user/pmunch)
[11:00:02] <FromDiscord> <evoalg> Thank you both
[11:00:02] <FromDiscord> <Elegantbeef> I cannot recall them at the moment
[11:14:17] <adigitoleo> I notice that nim source uses Testament but doesn't seem to use std/unittest much. When using testament, is it better to use files as "test suites" rather than `suite` from std/unittest?
[11:14:38] <adigitoleo> Or rather, can they be used together?
[11:15:22] <FromDiscord> <Rika> Don’t use them together
[11:15:36] <FromDiscord> <Rika> They’re not made for combined use I believe
[11:16:41] <adigitoleo> OK, I wonder if there are any other packages using Testament yet? Seems like most people are using unittest, but the docs sort of recommends Testament...
[11:18:01] <FromDiscord> <Rika> Rare. Use unit test
[11:18:33] <FromDiscord> <Rika> Testament is very difficult to learn due to the anemic documentation right now
[11:19:18] <adigitoleo> Yep, unittest seems more intuitive to me so I'll stick to that for now then.
[11:19:23] <adigitoleo> Cheers.
[11:29:43] *** Joins: beshr (~beshr@c-5a80e355.09-52-616c6b1.bbcust.telenor.se)
[11:39:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (*.net *.split)
[11:39:31] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (*.net *.split)
[11:39:31] *** Quits: kayabaNerve_ (~kayabaNer@user/kayabanerve) (*.net *.split)
[11:39:31] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[11:39:32] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (*.net *.split)
[11:39:32] *** Quits: ozzz (~oz@46.49.41.80) (*.net *.split)
[11:39:32] *** Quits: ehmry (~quassel@2a03:3b40:fe:ab::1) (*.net *.split)
[11:39:32] *** Quits: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com) (*.net *.split)
[11:39:32] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (*.net *.split)
[11:39:32] *** Quits: anadahz (~user@gateway/tor-sasl/anadahz) (*.net *.split)
[11:39:33] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (*.net *.split)
[11:39:33] *** Quits: mahlon (~mahlon@martini.nu) (*.net *.split)
[11:39:33] *** Quits: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (*.net *.split)
[11:39:33] *** Quits: GnuYawk (~GnuYawk@user/gnuyawk) (*.net *.split)
[11:39:34] *** Quits: ecs (~ecs@user/ecs) (*.net *.split)
[11:39:34] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[11:39:34] *** Quits: xiamx (~xiamx@2001:470:69fc:105::1:5692) (*.net *.split)
[11:39:35] *** Quits: robertmeta (sid514@user/robertmeta) (*.net *.split)
[11:39:35] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (*.net *.split)
[11:39:35] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[11:39:36] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[11:39:37] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[11:39:37] *** Quits: Zevv (~Zevvvvv@185.238.131.12) (*.net *.split)
[11:39:38] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (*.net *.split)
[11:39:38] *** Quits: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b) (*.net *.split)
[11:39:38] *** Quits: averell (~averell@user/averell) (*.net *.split)
[11:39:39] *** Quits: meowray (MaskRay@user/meowray) (*.net *.split)
[11:39:40] *** Quits: toothlessgear (2c15493d69@user/toothlessgear) (*.net *.split)
[11:39:40] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (*.net *.split)
[11:39:41] *** Quits: zacts (~zacts@user/zacts) (*.net *.split)
[11:39:41] *** Quits: zgasma[m] (~mckaymatr@2001:470:69fc:105::1:627c) (*.net *.split)
[11:39:42] *** Quits: xet7 (~xet7@user/xet7) (*.net *.split)
[11:39:42] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (*.net *.split)
[11:39:42] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca) (*.net *.split)
[11:39:42] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[11:39:42] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (*.net *.split)
[11:39:42] *** Quits: dom96 (~dom@mail.nim-lang.org) (*.net *.split)
[11:39:42] *** Quits: adium (adium@user/adium) (*.net *.split)
[11:39:43] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (*.net *.split)
[11:39:43] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[11:39:43] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[11:39:44] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[11:39:44] *** Quits: ormiret (sid314108@id-314108.lymington.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: Yardanico (~quassel@user/yardanico) (*.net *.split)
[11:39:44] *** Quits: NimEventer (~NimBot@78.47.140.224) (*.net *.split)
[11:39:44] *** Quits: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1) (*.net *.split)
[11:39:44] *** Quits: cheer[m] (~cheertchn@2001:470:69fc:105::39de) (*.net *.split)
[11:39:44] *** Quits: notchris (sid181145@id-181145.hampstead.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (*.net *.split)
[11:39:45] *** Quits: gshumway (~gshumway@user/gshumway) (*.net *.split)
[11:39:45] *** Quits: madprops (hj8oijo@user/madprops) (*.net *.split)
[11:39:45] *** Quits: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca) (*.net *.split)
[11:51:44] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[11:51:44] *** Joins: sagax (~sagax_nb@user/sagax)
[11:51:44] *** Joins: neurocyte0917 (~neurocyte@user/neurocyte)
[11:51:44] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[11:51:44] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[11:51:44] *** Joins: anadahz (~user@gateway/tor-sasl/anadahz)
[11:51:44] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[11:51:44] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[11:51:44] *** Joins: zgasma[m] (~mckaymatr@2001:470:69fc:105::1:627c)
[11:51:44] *** Joins: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1)
[11:51:44] *** Joins: xiamx (~xiamx@2001:470:69fc:105::1:5692)
[11:51:44] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[11:51:44] *** Joins: cheer[m] (~cheertchn@2001:470:69fc:105::39de)
[11:51:44] *** Joins: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b)
[11:51:44] *** Joins: Zevv (~Zevvvvv@185.238.131.12)
[11:51:44] *** Joins: jkl1337 (~jkl@user/jkl)
[11:51:44] *** Joins: rb (~augh@theguntretort.com)
[11:51:44] *** Joins: [R] (~rs@genoce.org)
[11:51:44] *** Joins: ecs (~ecs@user/ecs)
[11:51:44] *** Joins: GnuYawk (~GnuYawk@user/gnuyawk)
[11:51:44] *** Joins: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[11:51:44] *** Joins: mahlon (~mahlon@martini.nu)
[11:51:44] *** Joins: Goodbye_Vincent (cyvahl@freakshells.net)
[11:51:44] *** Joins: robertmeta (sid514@user/robertmeta)
[11:51:44] *** Joins: meowray (MaskRay@user/meowray)
[11:51:44] *** Joins: averell (~averell@user/averell)
[11:51:44] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[11:51:44] *** Joins: toothlessgear (2c15493d69@user/toothlessgear)
[11:51:44] *** Joins: zacts (~zacts@user/zacts)
[11:51:44] *** Joins: NimEventer (~NimBot@78.47.140.224)
[11:51:44] *** Joins: Yardanico (~quassel@user/yardanico)
[11:51:44] *** Joins: ormiret (sid314108@id-314108.lymington.irccloud.com)
[11:51:44] *** Joins: mjsir911 (~bnc@user/mjsir911)
[11:51:44] *** Joins: anddam (~anddam@user/anddam)
[11:51:44] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[11:51:44] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[11:51:44] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[11:51:44] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[11:51:44] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca)
[11:51:44] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[11:51:44] *** Joins: xet7 (~xet7@user/xet7)
[11:51:44] *** Joins: adium (adium@user/adium)
[11:51:44] *** Joins: dom96 (~dom@mail.nim-lang.org)
[11:51:44] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[11:51:44] *** Joins: madprops (hj8oijo@user/madprops)
[11:51:44] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[11:51:44] *** Joins: notchris (sid181145@id-181145.hampstead.irccloud.com)
[11:51:44] *** Joins: gshumway (~gshumway@user/gshumway)
[11:51:44] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[11:51:44] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[11:51:44] *** Joins: ehmry (~quassel@2a03:3b40:fe:ab::1)
[11:51:44] *** Joins: ozzz (~oz@46.49.41.80)
[12:03:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[12:12:17] *** Joins: pro (~pro@user/pro)
[12:58:24] <FromDiscord> <ynfle> In reply to @Michal58 "I thought of a": For some reason `[T; X: static[T]]` works for the func https://play.nim-lang.org/#ix=3LKm
[13:00:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[13:04:16] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:06:25] <FromDiscord> <Michal Maršálek> In reply to @ynfle "For some reason `[T;": Lol wth
[13:06:43] <FromDiscord> <ynfle> Perhaps a little cleaner https://play.nim-lang.org/#ix=3LKn
[13:07:21] <FromDiscord> <ynfle> My guess is because this just creates an instance of the type so, T, and static T are concrete
[13:07:39] <FromDiscord> <ynfle> Not sure why it didn't work/isn't needed before
[13:08:23] <FromDiscord> <ynfle> In reply to @adigitoleo "I notice that nim": https://github.com/disruptek has a couple of testing libraries
[13:25:30] <adigitoleo> ynfle: Thanks, some interesting stuff there.
[13:28:11] <FromDiscord> <Bung> In reply to @Elegantbeef "<@714152700920594493>\: i know it's": I search messaged mentioned me found this, that's great thing, so I can continue my static site generator. Thank you !👍
[13:33:57] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[13:50:12] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:10:46] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[14:36:12] *** Joins: szahid (~szahid@user/szahid)
[14:36:16] <szahid> Hello.
[14:38:40] <szahid> is a way to declare array without size? 
[14:39:26] <nrds> <06Prestige99> You may want a sequence
[14:39:42] <nrds> <06Prestige99> https://nim-lang.org/docs/tut1.html#advanced-types-sequences
[14:42:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:44:08] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.4)
[15:23:50] <szahid> nrds: and is a way to add more items to openarray?
[15:34:16] <nrds> <06Prestige99> I don't believe so
[15:50:24] *** Joins: fvs (freevryhei@2600:3c00::f03c:92ff:fe55:ff21)
[15:51:12] <fvs> tip - to check the asm generated by nim (and others) you can use: https://godbolt.org/
[16:02:21] <NimEventer> New Nimble package! zxcvbnim - A zxcvbn clone for Nim. Written in Nim, see https://github.com/jiiihpeeh/zxcvbnim
[16:02:21] <NimEventer> New Nimble package! tome - A natural language library., see https://github.com/dizzyliam/tome
[16:02:21] <NimEventer> New Nimble package! utf8tests - UTF-8 test cases and supporting code., see https://github.com/flenniken/utf8tests/
[16:08:48] <FromDiscord> <Rika> damn thats a lot
[16:12:30] *** Quits: beshr (~beshr@c-5a80e355.09-52-616c6b1.bbcust.telenor.se) (Ping timeout: 256 seconds)
[16:25:29] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[16:29:39] *** Joins: rockcavera (~rc@192.12.112.107)
[16:29:39] *** Quits: rockcavera (~rc@192.12.112.107) (Changing host)
[16:29:39] *** Joins: rockcavera (~rc@user/rockcavera)
[16:31:59] *** Quits: kayabaNerve_ (~kayabaNer@user/kayabanerve) (Read error: Connection reset by peer)
[16:32:08] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[16:38:24] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3LLk
[16:38:30] <FromDiscord> <Rika> from moduleX import a,b,c
[16:38:32] <FromDiscord> <hmmm> oh
[16:38:33] <FromDiscord> <Rika> does that not work
[16:38:37] <FromDiscord> <hmmm> ty 🥳
[16:40:44] <FromDiscord> <xx_ns> hi
[16:40:49] <FromDiscord> <xx_ns> how do i stop this from happening https://media.discordapp.net/attachments/371759389889003532/930086279209697330/unknown.png
[16:41:29] <FromDiscord> <xx_ns> namely, the first evaluates to 255.0 but is converted to 254 when cast to uint8, probably because of floating point math rounding errors
[16:42:25] <FromDiscord> <el__maco> add 0.5 before truncating to uint8?
[16:43:33] <FromDiscord> <xx_ns> that's.. really obvious
[16:43:34] <FromDiscord> <xx_ns> thanks
[16:43:50] <FromDiscord> <Rika> or round
[16:44:01] <FromDiscord> <TryAngle> or div?
[16:44:04] <FromDiscord> <xx_ns> rounding is too expensive for what i'm doing
[16:44:23] <FromDiscord> <el__maco> I mean the first one would not work with div at all
[16:45:22] <FromDiscord> <xx_ns> yeah, `(255 div 7919)` would be `(0)`
[16:46:22] <FromDiscord> <el__maco> adding 0.5 might not work with negative numbers, I keep forgetting what is a good way to deal with that
[16:47:17] <FromDiscord> <xx_ns> negative numbers are not an issue for me, i'm only working with positive values anyways
[16:49:03] <FromDiscord> <hmmm> recursive module deps are a pain 😡
[16:49:57] <FromDiscord> <Rika> just dont do it man wtf
[16:53:31] <FromDiscord> <hmmm> pfttt the pain about this thing is that it hits when you wrote already a lot of lines and modules and suddenly some major restructuring is needed
[16:54:44] <FromDiscord> <Rika> just restructure in ur head bro its what i do smhhhhh
[16:54:59] <FromDiscord> <hmmm> lol
[16:57:07] <FromDiscord> <hmmm> I guess I'll just make a new file, import the common stuff and pass values around but it's ugly as hell. Hope my boi Araq fixes this after we get IC
[17:25:38] *** Joins: Vladar (~Vladar@46.162.2.53)
[17:39:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:59:31] <FromDiscord> <blans> In reply to @nrds "<Wabby/freenode> Is there a": is this true?
[18:00:08] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[18:01:46] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/d5L
[18:03:18] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LLH
[18:07:10] <FromDiscord> <Patitotective> huh? I'm confused on how to create an emtpy sequence
[18:09:40] <FromDiscord> <Patitotective> Lol it was `newSeq[int]()`
[18:14:43] *** Joins: arkurious (~arkurious@user/arkurious)
[18:19:34] <FromDiscord> <Patitotective> nvm
[18:19:56] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LLL
[18:56:05] <FromDiscord> <eyecon> In reply to @KatrinaKitten "The biggest thing I": I couldn't find it in the honeycomb documentation: can we parse in the middle of a string (optionally many times), like ignoring some cruft at the beginning and at the end?
[18:58:30] *** Quits: oprypin (~irc@pryp.in) (Ping timeout: 268 seconds)
[18:59:12] *** Joins: oprypin (~irc@pryp.in)
[19:10:34] <FromDiscord> <Patitotective> order
[19:25:05] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3LMb
[19:25:21] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3LMc
[19:26:59] <FromDiscord> <eyecon> (If I move the `.asSeq` to the first group the result is the same, which surprises me: why does this make the second group be reported as a `seq`?)
[19:56:28] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[19:56:57] <FromDiscord> <Michal Maršálek> Hi, why is `nnkHiddenStdConv` inserted in the macro call? https://play.nim-lang.org/#ix=3LMr
[19:58:45] <FromDiscord> <gerwy> there is no --secret in 1.6.0 nim?
[19:58:46] <FromDiscord> <gerwy> D:
[20:03:31] <FromDiscord> <Rosen> do you mean the repl that comes up with `nim secret`?
[20:07:23] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Read error: Connection reset by peer)
[20:07:53] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[20:08:57] <FromDiscord> <KatrinaKitten> In reply to @eyecon "I couldn't find it": It's possible to make a parser which matches anything, such as the built in `anyChar`, and then skip its value with `>>`. That said, Honeycomb parses greedily, which makes it unwieldy to do so.
[20:13:15] <FromDiscord> <KatrinaKitten> sent a code paste, see https://play.nim-lang.org/#ix=3LMB
[20:13:57] <FromDiscord> <KatrinaKitten> (edit) "https://play.nim-lang.org/#ix=3LMB" => "https://play.nim-lang.org/#ix=3LMC"
[20:14:04] *** Joins: Figworm (~inoor@user/figworm)
[20:16:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:17:40] <FromDiscord> <KatrinaKitten> In other words, `(bit  3)` gives a `seq[T]` parser, and `(bit  3).asSeq` gives a `seq[seq[T]]` parser, so the latter causes `&` to wrap the other parsers to match the most deeply nested level.
[20:17:51] <FromDiscord> <KatrinaKitten> (edit) "and" => "but"
[20:27:12] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[20:29:07] <arkanoid> what does it mean when a proc has stropped name and ends with `=` like in "proc `qobjectVal=`*(variant: QVariant, value: QObject)" ?
[20:32:17] <nrds> <06Prestige99> it allows you to do variant.qobjectVal = someValue
[20:32:49] <arkanoid> ok, thanks
[20:39:58] *** Joins: pro (~pro@user/pro)
[20:42:06] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.3)
[20:59:32] <FromDiscord> <eyecon> In reply to @KatrinaKitten "Honeycomb attempts to merge": Understood, thank you. Is there a proper combination method that would do what I want, namely have the first group of three, second group of three, and the rest in separate `seq`s? I am asking for a "proper" solution because I think you meant that the way I do it is an unintended side-effect.
[20:59:49] <FromDiscord> <eyecon> Or should I just wrap all groups in `asSeq`s?
[21:01:51] <FromDiscord> <whisperdev> What is the best way to do a lot of http get requests?
[21:03:00] <FromDiscord> <KatrinaKitten> In reply to @eyecon "Understood, thank you. Is": It's not so much an unintended side effect as an intended but slightly unintuitive one. The second parser in your example is actually equivalent to using `asSeq` on all groups, since `&` actually does so internally to match the nesting levels, but if it helps you more clearly understand your code, I recommend being explicit about it 🙂
[21:03:35] <FromDiscord> <eyecon> In reply to @KatrinaKitten "It's not so much": Thanks, that was really helpful
[21:04:11] <FromDiscord> <KatrinaKitten> Happy to help 💜
[21:07:25] <arkanoid> if "MyType = distinct pointer" is "*p" and "MyArray = UncheckedArray[MyType]" is "**p", is "ptr MyArray" "***p" ?
[21:18:25] <Amun-Ra> mhm
[21:21:31] <FromDiscord> <Clonkk> Usually, you never use UncheckedArray as is, it's always `ptr  UncheckedArray`↵(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[21:23:52] <arkanoid> that's what confuses me, what's the difference from UncheckedArray[X] and prt UncheckedArray[X]? is the first a stack allocated array anyway?
[21:28:05] <arkanoid> is this correct to cast a seq to pass it to C? "cast[ptr UncheckedArray[MyType]](a[0].unsafeAddr)" ?
[21:28:16] <arkanoid> where a is seq[MyType]
[21:30:55] <FromDiscord> <Clonkk> A Nim object containing a pointer to MyType↵(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[21:31:12] <FromDiscord> <Clonkk> (in short, it has other thing in it)
[21:32:17] <arkanoid> I'm not sure I'm following you
[21:32:58] <arkanoid> are you sayind that UncheckedArray is just a stack wrapper object with a "prt MyType" field in it?
[21:33:46] <arkanoid> UncheckedArray[MyType] = distinct ptr MyType ?
[21:38:45] <Amun-Ra> UncheckedArray[foo] is just like foo[] in C
[21:41:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[21:42:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Client Quit)
[21:45:45] <FromDiscord> <Jiezron> I wonder if it would be possible to add a repository for Nim for this Github organisation page : https://github.com/TheAlgorithms↵The list of algorithms for Python is pretty impressive, and I am sure much of them translates well into Nim. Maybe it could help to advertise Nim (and to have implementation reference for classical algorithms) ?
[21:50:45] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:06:54] <FromDiscord> <eyecon> It would be very nice, no doubt
[22:07:04] <FromDiscord> <eyecon> I hadn't heard of the site but looks nice
[22:07:29] <FromDiscord> <eyecon> Although some lesser used language implementations look a bit... rough
[22:12:13] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[22:22:41] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3LNr
[22:25:04] <FromDiscord> <eyecon> Forgot `import honeycomb, sugar` but hopefully that was obvious
[22:27:02] <FromDiscord> <KatrinaKitten> Try using `.join` instead of mapping to join. If that doesn't work, show the echoed result please 😄
[22:27:13] *** Joins: vicfred (~vicfred@user/vicfred)
[22:28:09] <FromDiscord> <eyecon> Ah, that does work, thanks again
[22:30:01] <FromDiscord> <eyecon> So the map is supposed to be used only for the final result, and not to be combined with other parser parts, is that right?
[22:42:58] <FromDiscord> <KatrinaKitten> In reply to @eyecon "So the map is": Not exactly, it can be used mid-parser, but it changes the result type which may mess with things. I'm not sure why what you posted didn't work, aside from maybe some issue with not providing a separator to the stdlib `join` (or maybe it not being imported?), but I do know that mapping to join is unnecessary since that's basically what the `join` template in Honeycomb already implements for you
[22:44:58] <FromDiscord> <KatrinaKitten> (edit) "In reply to @eyecon "So the map is": Not exactly, it can be used mid-parser, but it changes the result type which may mess with things. I'm not sure why what you posted didn't work, aside from maybe some issue with not providing" => "sent" | "separator to the stdlib `join` (or maybe it not being imported?), but I do know that mapping to join is unnecessary since that's basically what the `join` template in Honeycomb alrea
[22:46:22] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.4)
[23:16:41] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[23:35:01] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[23:39:07] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[23:47:26] <NimEventer> New thread by Mratsim: Introducing taskpools, a small lightweight ARC/ORC threadpool, see https://forum.nim-lang.org/t/8791
[23:48:51] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:53:22] *** Quits: Figworm (~inoor@user/figworm) (Quit: Figworm)
[23:57:45] *** Joins: noeontheend (~noeonthee@207.237.194.194)
