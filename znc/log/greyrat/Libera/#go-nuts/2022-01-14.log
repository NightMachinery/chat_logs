[00:00:27] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[00:00:38] <pyzozord> can I summarize it like this: pointer or not I can define only one method with that signature for a receiver
[00:01:17] <pyzozord> and when calling method on a value it will be automatically upgraded to value or a pointer depending on how the method was declared
[00:02:17] <pyzozord> ?
[00:02:27] <fizzie> Well, almost. There is that distinction on what the types' method sets are like that I've been trying to bring up. In one direction it is just changing the call, but in the other it's not.
[00:03:29] <b0nn> The method set understanding is correct
[00:03:55] <b0nn> That is, one signature no matter what the type of receiver
[00:04:26] <pyzozord> i am confusied about method sets, don't know what they are, I don't think they were mentined so far here https://go.dev/tour/methods/19
[00:04:40] <fizzie> `func (t T) Foo()` makes `Foo()` a method in the method sets of `T` and `*T`, so both types implement `interface { Foo() }`. Conversely, `func (t *T) Foo()` makes `Foo()` a method only in the method set of `*T`, so only the pointer type implements that interface. But a _call_ like `var t T; t.Foo()` is still legal, and acts like the call `(&t).Foo()`.
[00:05:05] <b0nn> The ability to call a method defeined on a pointer receiver depends on the type of the caller, and you can magic your way in
[00:05:22] <fizzie> Yeah, maybe the tour writers thought it's a little overly abstract. But that's how the language specification defines it.
[00:05:47] *** Quits: fling (~fling@user/fling) (Ping timeout: 256 seconds)
[00:05:56] <fizzie> https://go.dev/ref/spec#Method_sets: "A type has a (possibly empty) method set associated with it. The method set of an interface type is its interface. The method set of any other type T consists of all methods declared with receiver type T. The method set of the corresponding pointer type *T is the set of all methods declared with receiver *T or T (that is, it also contains the method set of
[00:05:58] <fizzie> T)."
[00:06:23] <b0nn> A pointer type can call all of the methods, but the ones defined with value receivers will behave as though they are dealing with a value type
[00:06:46] <mrig> There really is only one case for which you want a method on a pointer and not on a receiver, and all this is just a formalisation that fits that bill.
[00:09:25] <mrig> not on a value rather, when you want to mutate it without returning by value.
[00:10:31] *** Joins: fling (~fling@user/fling)
[00:11:57] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[00:12:35] <pyzozord> it's write access control, isn't it
[00:16:57] <pyzozord> it does whatever it has to let you use pointerornot.Method() for func (pon pointerornot) Method() {} and make sure that you Method can modify it's receiver only if receiver was declared as pointer
[00:18:10] <b0nn> It might be helpful to remember that the receivers is syntactical sugar
[00:18:48] <b0nn> really the call is (from memory) func Foo (RECEIVER, ...)
[00:19:07] <pyzozord> what is the point of `func (t T) Foo()` making `Foo()` a method in the method sets of `T` and `*T`. Why add method to *T method set? Why not just convert all t *T; t.Method() to (*t).Method()
[00:19:24] <mrig> This also relates indirectly to whether the heap or stack is used, you can avoid needing the heap oftentimes, by simply returning by value.
[00:19:47] *** Quits: jimeh (~jimeh@matrix.bah.io) (Quit: Bridge terminating on SIGTERM)
[00:20:06] <b0nn> Because *T is a T and a T isn't a *T
[00:20:18] *** Quits: llorllale1 (~llorllale@2607:9880:3a18:69:bd04:28fb:9b4c:879) (Quit: WeeChat 3.4)
[00:20:56] <pyzozord> &T is *T
[00:21:14] <pyzozord> well we are confusing things
[00:21:44] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:f80c:6cea:37f1:9b76)
[00:21:59] <pyzozord> *Tp is Tv, Tv is not *Tv / Tp
[00:22:21] <pyzozord> but &Tv is Tp
[00:22:38] <pyzozord> strictly speaking *T cannot be T
[00:23:17] <b0nn> The &Tv is a bit of a smoke and mirrors thing, you still only have a value, so the value rules apply, just it gives you access to somethings that the pointer can do
[00:23:22] <mrig> if you have a value, you can make a pointer to it, if you have a pointer you can only point at its memory over yonder.
[00:24:27] <pyzozord> if I have a pointer I can make a value by doing *pointer
[00:24:48] <pyzozord> they are equivalent in power
[00:25:10] <mrig> yes you can, but the address of that value will not be the same as that which the pointer was pointing at.
[00:25:35] <pyzozord> so p != *&p
[00:25:54] *** Joins: jimeh (~jimeh@matrix.bah.io)
[00:26:11] *** Joins: walterwhip (~www@user/walterwhip)
[00:26:24] <mrig> it would be a copy of it.
[00:26:28] <pyzozord> oh nevermind, I am so confused I confuse everything else
[00:26:58] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:27:39] <mrig> just takes a little time to get the hang of, it is the same really as pointer in C, if you remove the syntactic sugar, as b0nn mentioned can be simpler when thinking about it.
[00:32:23] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71)
[00:32:36] *** Joins: bluedust (~bluedust@103.161.144.94)
[00:34:59] *** Joins: tomasfarias7 (~tomasfari@user/tomasfarias)
[00:35:18] *** Joins: absc (~absc@81.31.144.28)
[00:36:58] <fizzie> Alternative perspective: you can always dereference a pointer with the * operator to get a value, but you can't always use & to take the address of a value, because not everything has an address.
[00:37:14] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71) (Ping timeout: 252 seconds)
[00:37:14] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 250 seconds)
[00:37:22] *** Quits: tomasfarias (~tomasfari@user/tomasfarias) (Ping timeout: 260 seconds)
[00:37:22] *** tomasfarias7 is now known as tomasfarias
[00:37:30] <fizzie> ("The operand must be /addressable/, that is, either a variable, pointer indirection, or slice indexing operation; or a field selector of an addressable struct operand; or an array indexing operation of an addressable array.")
[00:38:17] <pyzozord> not everything is addressable? But everything is in memory
[00:38:35] <fizzie> Numeric literals aren't addressable; you can't say `&1`. Return values of function calls aren't addressable; you can't say `&(foo())`. Results of expressions aren't addressable: you can't say `&(x + 1)`.
[00:40:01] <pyzozord> ugh knowing c and how memory is actually used might be more distracting than helping me
[00:40:15] <pyzozord> I know think that &1 should return address in .data section mapped to memory
[00:40:22] *** Joins: cyclops (~cyclops@2001:4d48:ad5c:dd01::1000)
[00:40:22] <fizzie> It's not really any different in C. You can't say `&1` in C either.
[00:40:43] <pyzozord> I know
[00:40:51] *** Joins: arcatech (~arcatech@user/arcatech)
[00:41:02] <pyzozord> well I guess a real 1 might really not be in memory, it might be part of machine opcode indeed
[00:41:15] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[00:41:18] *** Joins: leonarth (~leonarth@user/leonarth)
[00:41:19] <fizzie> `x + 1` is probably most likely to "be" in a register, not in memory.
[00:41:22] *** Parts: cyclops (~cyclops@2001:4d48:ad5c:dd01::1000) ()
[00:41:26] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[00:42:16] *** Joins: _cyclops_ (~cyclops@2001:4d48:ad5c:dd01::1000)
[00:42:31] <b0nn> Go has rules on things that are addressable that you might ordinarily think otherwise on - for example, constants
[00:42:59] <b0nn> A constant isn't allowed to be addressable, because then you could change it, which would mean it's no longer a constant :)
[00:43:05] <pyzozord> why is this returning empty string? https://go.dev/play/
[00:43:10] <pyzozord> https://go.dev/play/p/nhR07aNsoNO
[00:44:52] <fizzie> Probably because there's an infinite loop in it.
[00:45:05] <pyzozord> the program does exist
[00:45:07] <pyzozord> *exit
[00:45:39] <fizzie> Well, maybe it's crashing and Playground's not surfacing that? In any case, the problem is passing `t` as the operand of %v to fmt.Sprintf.
[00:45:46] *** Joins: mnx|aw (~nabromov@176.26.119.61)
[00:45:53] *** Parts: mnx|aw (~nabromov@176.26.119.61) ()
[00:45:57] <pyzozord> ah ok yes, I tested locally it gets stuck
[00:46:27] <fizzie> Might also be a timeout of some sort. A bit of a shame that it doesn't print any sort of error though.
[00:46:59] <pyzozord> it does after a while
[00:47:01] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[00:47:08] <pyzozord> nice long stack trace
[00:47:21] <pyzozord> only locally though
[00:47:26] *** Joins: walterwhip (~www@user/walterwhip)
[00:47:49] <fizzie> Yeah, I meant the playground. "Program exited" is a little misleading.
[00:47:53] *** Quits: dr0n (~nabromov@92.40.255.113.threembb.co.uk) (Ping timeout: 256 seconds)
[00:48:01] <pyzozord> that's because Sprintf sees that t doesn't implement String but does Erorr so it tries to call Error and ends up in a infinite loop, right?
[00:48:28] <fizzie> Yeah. %v uses the same "default formatting" logic as fmt.Println.
[00:50:18] <tar_xvf> fprintf returns an error, you can try checking for that to see if somethings wrong
[00:50:20] <fizzie> Well, except that `error` interface is checked *before* `fmt.Stringer`.
[00:51:07] <fizzie> (And `fmt.Formatter` even before `error`.)
[00:51:41] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[00:52:17] <tar_xvf> instead of t t you need to type t.When and t.What
[00:52:32] *** Parts: Nigthknight (~Nigthknig@user/nigthknight) ()
[00:53:35] <tar_xvf> https://go.dev/play/p/rqpr6A4qtcz
[00:53:48] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[00:54:44] <pyzozord> fizzie: does this demonstrate what you were saying about method sets before? https://go.dev/play/p/LWXXmZtZMjd
[00:55:38] <pyzozord> actually his is a bit better https://go.dev/play/p/Y80i5PDuYdL
[00:56:48] <fizzie> I guess. And it also demonstrates T{"test2"} is not addressable. Compare https://go.dev/play/p/ivy-Gqro-Bn
[00:57:33] <fizzie> I'm finding it really hard to resist trotting up the most ridiculous consequence of the rules about addressability again.
[00:57:50] *** Joins: dr0n (~nabromov@176.26.119.61)
[00:59:19] <pyzozord> be my guest I am being dumb as a horse anyway
[00:59:29] <pyzozord> like
[00:59:47] <foobaz> i never understood that "not addressable" nonsense
[01:00:02] <foobaz> why is the compiler not capable of creating a temporary variable for me?
[01:00:15] <pyzozord> I don't understand this eithre. I can still do &structtype{initializer}
[01:00:21] <foobaz> its entire purpose is to automate work, and the syntax is unambiguous
[01:00:31] <foobaz> good point
[01:01:14] <pyzozord> I don't see any difference between (T{"test2"}).Test2() and t.Test2()
[01:01:50] <fizzie> The composite literal case is allowed as a special exception.
[01:02:05] <fizzie> And if you think *that's* weird, here's the thing, I couldn't resist: https://go.dev/play/p/6NTjZnDdcnd
[01:03:19] <pyzozord> I feel like this is more complex than C's pointers
[01:04:42] <pyzozord> I don't really follow in your example how does &(&anonstruct) work it's an address of an address?
[01:04:57] <fizzie> You're missing the `.i` part at the end.
[01:05:19] <pyzozord> ah so & has lower precendence than .i
[01:06:57] <fizzie> Yeah. `(&struct...)` is a pointer to a struct; `(&struct...).i` is an int (using the fact that field selection implicitly dereferences the pointer); and `&(&struct...).i` is an *int.
[01:07:56] <fizzie> I used to write it as `&(*&struct{ i int }{123}).i` earlier, which is nice, because you'd kind of think that should be exactly the same as `&(struct{ i int }{123}).i` but it isn't.
[01:08:06] <pyzozord> ah the implicit dereference threw me off for a moment
[01:08:33] <pyzozord> also interesting that &struct{ i int }{123}.i is illegal but p := struct{ i int }{123}.i; &p is legal
[01:08:57] <pyzozord> this is really hairy stuff
[01:09:02] <pyzozord> almost as hairy as C's UB
[01:10:01] <fizzie> Honestly though that sort of thing only comes up in theoretical discussions.
[01:10:35] *** Joins: jtheo (~jtheo@cpc118052-lewi21-2-0-cust300.2-4.cable.virginm.net)
[01:10:36] <fizzie> Someone just wanted a one-liner for getting a `*int` that points to some value (say 123) without having to declare a variable, which would be the reasonable way to do it.
[01:11:58] <fizzie> C allows `&(int){123}` because C's compound literals can be of scalar type (though the anonymous object's lifetime might not be sufficient), but Go's composite literals only allow struct/slice/map/array types, so you can't just write `&int{123}` or something.
[01:14:33] <fizzie> There's a proposal out there to add a syntax for that, though last I looked at it, they were talking about extending `new` to allow initializing the value. So you'd write (I think) `new(int, 123)` to get that.
[01:15:41] <pyzozord> the more we talk the more this language seems really not fully baked
[01:16:25] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:16:28] <b0nn> Is any language?
[01:16:48] <pyzozord> a bit like they had some cool ideas but then after doing those they gave up on the rest of the language
[01:16:53] <mrig> literals can be a lot bigger than ints though right? and you only need to put brackets around the second one if you want its value; Which is normal else you are asking it to be two things at once : https://go.dev/play/p/_TntA26_VPl
[01:17:25] <fizzie> mrig: The whole point of it was to get a pointer, not a value.
[01:17:26] *** Parts: jtheo (~jtheo@cpc118052-lewi21-2-0-cust300.2-4.cable.virginm.net) (WeeChat 2.8)
[01:17:44] <fizzie> Which `(&struct{ i int }{123}).i` doesn't accomplish.
[01:18:34] <mrig> just add another &
[01:18:36] <mrig> https://go.dev/play/p/RDRiEgCAdL0
[01:18:51] <b0nn> Personally I don't think the language is "half-baked" - there is room for improvement, sure, but it's more than satisfying my needs as things stand right now
[01:18:57] <fizzie> mrig: Well, yes, that's the same as the third one.
[01:19:17] <fizzie> mrig: But the point is, you have to have the inner &: `&(struct{ i int }{123}).i` is *not* legal.
[01:19:30] <mrig> I've no idea what you would want to do with it though :)
[01:19:33] <b0nn> And, I cannot think of any language that cannot be improved in one way or another - what version C are we up to now?
[01:19:47] <b0nn> What version of Java?
[01:20:11] <pyzozord> I'm really comparing go with python and with c, but maybe it's not fair, both had much more time
[01:20:13] <fizzie> And the *reason* why `&(&struct{ i int }{123}).` is legal is arguably pretty bonkers: it's because it's the same as `&(*&struct{ i int }{123}).i` and dereferencing a pointer makes the struct object addressable.
[01:20:35] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[01:21:26] <pyzozord> but I came in with expectation of almost perfect language that has only one problem: has gc which I don't like
[01:21:28] <fizzie> As for what you would want to do with it: the sorta-natural example is someone's added an `*int` field in a struct to make an "optional int", and you want to initialize one.
[01:22:23] <foobaz> at least go has an unusually good GC, it's lower latency than any other comparable language
[01:22:23] <fizzie> Anyway, I just like exploring the edge cases. Any set of rules is going to lead into some absurdity somewhere.
[01:22:30] <mrig> makes sense to me though, the first one is on the stack if it can be and the &struct is a value that might end up on the heap, it is not actually that yet.
[01:22:39] <pyzozord> I do feel we are bending this language in ways that it doesn't wanna be bent
[01:22:46] <b0nn> The one time I met Rob Pike he was hawking another language written by Google, Sawzall (he gave a guest lecture at my university) and he was bagging the HANG out of Ruby
[01:23:11] <foobaz> and the GC fits well with go's emphasis on concurrency - reference counting has some weird issues when multiple threads work with the same object
[01:23:16] <b0nn> That was 2010 I think
[01:24:05] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:24:27] <mrig> pyzozord: well the language ethos is rather more that it is better to make it clear and write it on several lies than to do obscure pythonesqe snake charming magic tricks.
[01:24:37] *** Joins: krux02_ (~krux02@p4fe57502.dip0.t-ipconnect.de)
[01:24:37] <ikke> pyzozord: if the developers would have focused on fleshing out every single detail of the language, they probably would still be busy today
[01:24:48] <pyzozord> frankly go is still much better than php for backend. Python is beautiful but also too slow and too interpreted
[01:24:56] <b0nn> ikke:  they ARE still busy at it today :)
[01:25:07] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[01:25:09] <ikke> Yes, but in the mean time we have something to work with
[01:25:19] <pyzozord> go is the closes thing to C I will get as web backend developer
[01:25:54] <b0nn> I dunno, there's a bit of C++ in the web backend of Spotify
[01:26:03] <b0nn> I guess it depends how you define "close"
[01:26:05] <pyzozord> ikke: I kind of expected the best of the best from Rob Pike and Ken Thompson
[01:26:13] <tar_xvf> i love developing web applicationg with go
[01:26:17] *** Joins: hanzo (uid532183@user/hanzo)
[01:26:25] *** Quits: krux02 (~krux02@p508228fb.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[01:26:39] <ikke> They went very pragmatig with the language
[01:26:48] <ikke> rather than applying all language theory
[01:26:52] <pyzozord> ikke: especially after decades of experience they had watching C growing out to be a world indisputed most popular programming language
[01:30:17] <b0nn> But they were missing DMR, who really kept Fen grounded (AIUI)
[01:30:26] <b0nn> Ken*
[01:30:45] <ikke> Who is DMR?
[01:30:51] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[01:30:54] <pyzozord> mrig: it seems like in golang city there is nicely lit downtown, and outside a lot of dark alleys where light doesn't reach, and the cityguide just advice to keep away from the dark places
[01:31:11] <mrig> Go, to my mind, is all about distributed systems and managing the high complexity within those systems, the potential is amazing.
[01:31:17] <bookworm> or maybe you are just over interpreting non issues
[01:31:45] *** Joins: walterwhip (~www@user/walterwhip)
[01:31:49] <b0nn> ikke: a demi-god https://en.wikipedia.org/wiki/Dennis_Ritchie
[01:31:57] <ikke> Ah
[01:32:08] <mrig> pyzozord: I don't see those dark alleys, I see a language with which you could build the most powerful computer on the planet.
[01:32:34] <b0nn> His email was DMR I think, or his username
[01:32:37] <pyzozord> all I see is developers running in all possible directions like kids
[01:33:00] <b0nn> Ah, the wikipage says username
[01:33:03] <mrig> pyzozord: yes likely that you are forgetting how low level the language is, easily done.
[01:33:44] <mrig> I find it kind of cool the way that go does that.
[01:33:53] <tar_xvf> idk if go would be suitable for programming an operating system, because of the overhead of the runtime
[01:34:07] <pyzozord> it's even stranger to me because this was made by google for google
[01:34:21] <pyzozord> so it was supposed to be simple and easy
[01:34:32] <b0nn>  think that the main complaint about Go as an OS language is the GC - but there was an OS written in Go I think
[01:34:43] <pyzozord> but I can't call this nither simple nor easy if I am honest
[01:34:43] <mrig> tar_xvf: a distributed OS
[01:35:01] <mrig> distributed system rather.
[01:35:40] <ikke> People at $work with not that much programing experience pick up go pretty quick
[01:36:14] *** jimeh is now known as jimeh[m]
[01:36:30] <mrig> pyzozord: but you can use it without knowing all of that and without it being dangerous, and the main point is that it is easy to refactor.
[01:36:39] <b0nn> Yeah - there might be an element of "Knowledge of other systems is getting in the way of learning a new system"
[01:36:50] <mrig> so as you learn you can improve your code.
[01:37:06] <pyzozord> mrig: fair point refactoring indeed does seem easily done with such loosely copuling language
[01:37:19] <mrig> It is one of the main points of the language.
[01:39:00] <pyzozord> I don't consider myself a novice programmer but I am having trouble picking up this language
[01:39:38] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[01:39:42] <ikke> pyzozord: maybe because you are overthinking things?
[01:40:22] <pyzozord> I don't... I don't believe there is such thing as overthing in such strict and formal disciplines like computer programming
[01:40:29] <_cyclops_> Hi all - i'm fairly new to go, and i'm more an OO programmer. I'm working on a set of small tools that basically act as little micro services. The thing is that  i have a main function and some logic in there (like command line parameters and so on). That main function is /mostly/ the same for the a number of the programs and i would like to understand how i can avoid copy/pasting the code into each program
[01:41:07] <ikke> _cyclops_: maybe create a single tool with subcommands?
[01:41:13] <pyzozord> ikke: but you might very well be correct
[01:41:37] *** Joins: fikran (~fikran@user/fikran)
[01:41:52] <b0nn> _cyclops_:DI might be helpful if you want to reuse your main.go - but, usually, microservices have a bit of repitition between services, because they are independent
[01:41:52] <_cyclops_> ikke, i was thinking the same, but the whole point of creating small programs is to keep them simple and not have one program have many dependencies
[01:42:08] <ikke> pyzozord: I have it in other areas, which can be quite 'paralyzing'
[01:42:19] <pyzozord> yes, quite
[01:42:21] <_cyclops_> b0nn, sorry - what is DI?
[01:42:27] <ikke> dependency injection
[01:42:29] <b0nn> Dependency Injection
[01:42:35] <_cyclops_> ah
[01:42:42] <b0nn> The caps are important DAMMIT! :)
[01:42:46] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71)
[01:42:48] <ikke> :D
[01:42:48] <_cyclops_> haha :)
[01:42:51] *** blinux2 is now known as blinux
[01:42:58] <_cyclops_> thanks. i'll see how that works in go :)
[01:43:02] <ikke> apparently it takes 3 seconds longer to type :P
[01:43:47] *** Joins: rcernin_ (~rcernin@101.189.141.138)
[01:44:55] *** Joins: jimeh (jimeh@matrix.bah.io)
[01:45:02] <b0nn> I'm thinking, though, that DI isn't going to help you - you're better off getting used to repeating code in different services
[01:46:35] <_cyclops_> b0nn, reading up on it now. I guess you're right (still reading though)
[01:47:26] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:8d88:35ff:c6c5:7c71) (Ping timeout: 250 seconds)
[01:48:06] <ikke> DI means instead of something pulling a concrete dependency it, it just relies on a dependency being given (injected)
[01:48:21] <ikke> And rather than dependending on concrete things, your depend on an interface
[01:48:30] <ikke> s/your/you
[01:48:39] *** Joins: jim (~jim@about/linux/staff/jim)
[01:50:21] <jim> looking to build something written in go (it's gitea) from its source. running debian 11, how to find out what to install for that, in the way of build-depends?
[01:51:06] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[01:51:18] <_cyclops_> ikke, i roughtly know what DI is from the OO days, but reading how it works in Go is interesting.
[01:51:39] <bookworm> for gitea? go and whatever they use as the frontend framework (node + whatever)
[01:51:43] <ikke> jim: looking at a readmea / install file
[01:52:03] <b0nn> jim: https://docs.gitea.io/en-us/install-from-source/
[01:52:21] <b0nn> If you look at their go.mod you will see what go deps the project has
[01:52:29] <jim> I will look at those
[01:52:48] <ikke> _cyclops_: pure DI is not that different between OO languages
[01:57:08] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:6557:5a9f:c7d1:d317)
[01:57:20] <yagamilito> Hello
[01:57:20] <yagamilito> I am trying to create a deployment in eks cluster using this example
[01:57:21] <yagamilito> https://github.com/weibeld/lambda-eks-example/blob/master/handler.go#L82
[01:57:21] <yagamilito> but i can getting below error
[01:57:22] <yagamilito> var deploymentSpec *appsV1.Deployment
[01:57:22] <yagamilito> too few arguments in call to appsV1Client.Deployments("default").CreatecompilerWrongArgCount
[01:57:23] <yagamilito> cannot use deploymentSpec (variable of type *"k8s.io/api/apps/v1".Deployment) as context.Context value in argument to appsV1Client.Deployments("default").Create: missing method Deadline
[01:57:23] <yagamilito> any suggestions on how this can be fixed
[01:57:24] <yagamilito> Thanks
[01:59:12] <jim> do the linux folks among you tend to prefer the gccgo compiler?
[01:59:22] <sztanpet> no
[02:00:39] <pyzozord> the language is quite simple if you don't ask questions, I'll give it that
[02:01:21] <jim> it becomes complex the moment you form a question in your mind?!
[02:02:59] <jim> asking a question is like poking an angry, hungry bear?!!
[02:03:08] *** Joins: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net)
[02:03:17] *** Quits: walterwhip (~www@user/walterwhip) (Ping timeout: 240 seconds)
[02:04:32] <seebs> i'm having trouble thinking of any kind of "dark alleys" in go. the spec is pretty thorough and clear, but it explicitly doesn't cover things, but those aren't "dark alleys", or anything, they're just... Not Part Of The Language. and that's fine.
[02:04:50] <seebs> it's like trying to ask what happens in Python if you forget to free a pointer. there's no pointers and no freeing, the question doesn't apply.
[02:05:13] <fizzie> yagamilito: Without even looking, sounds like a context parameter has been added to an interface. And indeed the latest version of https://pkg.go.dev/k8s.io/client-go/kubernetes/typed/apps/v1#DeploymentInterface has a method `Create(ctx context.Context, deployment *v1.Deployment, opts metav1.CreateOptions)` but your call on the line you link to doesn't have thta many parameters.
[02:05:28] <jim> maybe not dark alleys, just dark :)
[02:05:38] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:06:11] <fizzie> While an earlier version had that as just `Create(*v1.Deployment)`, matching the call.
[02:06:41] <fizzie> (And the versions of that module are `v0.X` so they promise no stable interfaces.)
[02:06:59] <mrig> well there are the goper holes but those are nice and cosy! :P
[02:10:28] *** Quits: jimeh[m] (~jimeh@matrix.bah.io) (Quit: issued !quit command)
[02:10:31] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:12:31] <pyzozord> still bothers me I don't know what is happening in memory, am I copying these arguments and receivers, how is memory aligned... https://go.dev/play/p/xq6yNoqqsLl
[02:13:25] <pyzozord> did r got copied on each .Read() call? Did b?
[02:13:47] <pyzozord> I suppose b copied only the slice metadata, underlaying array was not copied
[02:14:32] <pyzozord> but r is not a pointer, does that mean it was literally copied for each call?
[02:14:41] <sztanpet> sure
[02:14:45] <sztanpet> as the spec says
[02:14:47] *** Joins: Alina-ma- (~Alina-mal@37.252.83.224)
[02:14:59] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 256 seconds)
[02:14:59] <sztanpet> a slice is just https://pkg.go.dev/reflect#SliceHeader behind the scenes, that is what gets copied
[02:15:14] <fizzie> That's the semantics, yes. Of course as an empty struct, there isn't exactly anything to copy.
[02:16:47] <b0nn> hrm it's *not* a slice header
[02:16:56] <pyzozord> isn't that like grossly inefficient?
[02:17:29] <b0nn> *This* is what a slice is https://github.com/golang/go/blob/master/src/runtime/slice.go#L15
[02:17:52] <b0nn> pyzozord: It's the same in Java, Rust, C#, and a few other languages
[02:17:53] <pyzozord> yes, it's two ints and pointer to array
[02:18:21] <pyzozord> well I don't really know any of the languages you listed so I can't say
[02:18:39] <pyzozord> but in javascript actually things get copied only shallowly
[02:18:41] <fizzie> Isn't what grossly inefficient?
[02:18:54] <b0nn> variable length arrays, as you may know from C - just cannot happen in memory - because otherwise an infinite amount of memory needs to be reserved to allow a slice to grow
[02:18:55] <pyzozord> copying the entire struct by value each time calling the method
[02:18:57] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:19:12] <b0nn> The growth is O(1)
[02:19:31] <fizzie> Depends on what the "entire struct" contains.
[02:19:38] <fizzie> In this case, it's a `struct {}`, so no.
[02:19:51] <fizzie> If you think it's big, you can of course always use a pointer receiver.
[02:20:19] <pyzozord> right
[02:20:38] <sztanpet> but first, its best to measure, because the indirection introduced by the pointer might be more than the overhead of copying it would be
[02:20:49] <b0nn> gah, I cannot find the math link I had - wikipedia will have to do https://en.wikipedia.org/wiki/Dynamic_array#Growth_factor
[02:21:52] *** Quits: Alina-ma- (~Alina-mal@37.252.83.224) (Quit: !be back soon)
[02:22:45] <b0nn> I guess that the alternative implementation is for the end of the backing array to have a pointer to the next backing array such that you chain backing arrays
[02:22:54] <b0nn> But I cannot see that as a performance improvement
[02:23:16] <b0nn> A double linked list of backing arrays :)
[02:24:17] <pyzozord> sztanpet: good point
[02:24:56] <pyzozord> trying to do this for n, err := r2.r.Read(b) {, what do I do wrong?
[02:25:43] <sztanpet> are you sure you have done tour.golang.org
[02:26:00] <pyzozord> that's what I am doing right now https://go.dev/tour/methods/23
[02:26:08] <pyzozord> I am trying to do a while loop
[02:26:44] <fizzie> There's no real concise way to say "call this multiple-return-value function until some condition is true".
[02:26:59] *** Joins: leonarth (~leonarth@user/leonarth)
[02:27:08] <fizzie> Just do `for { n, err := Read(); if /* whatever logic */ { break } /* ... */ }` or something equivalent like that.
[02:27:16] <pyzozord> oh I see
[02:28:00] <fizzie> Strictly speaking, `for n, err := Read(); /* some condition */; n, err = Read() { ... }` is also an option, but repeating the call is just ugly.
[02:30:28] <pyzozord> yep
[02:31:05] <fizzie> I confess I sometimes wish there'd be a `for` statement variant that has a single semicolon, and made `for InitStmt; Condition { ... }` equivalent to `for { InitStmt; if !Condition { break }; ... }`. It'd almost be consistent with `if` and `switch` and the other control structures that can take an initial short declaration.
[02:31:09] <pyzozord> lesson learned: "make better friends with for {}"
[02:31:42] <b0nn> hmm, can you not for Init; Cond; {}
[02:33:36] *** Joins: purplestuff (~bcullen22@cm-72-240-209-144.buckeyecom.net)
[02:34:10] <fizzie> Then it won't run `Init` on every loop.
[02:34:50] *** Quits: jimeh (jimeh@matrix.bah.io) (Remote host closed the connection)
[02:34:53] <pyzozord> can I range of integer in go?
[02:35:04] <pyzozord> for i := range 5 ?
[02:35:20] <fizzie> I guess it'd admittedly be a little confusing if `for X; Y { ... }` did run X every time around, but `for X; Y; { ... }` didn't.
[02:35:50] <fizzie> No, `range` only works over strings, slices, maps, channels and arrays.
[02:36:07] <sztanpet> but thats what your standard 3 argument for loops are for
[02:36:38] <fizzie> I'm kind of happy about it, because with `range 5` you never know whether you're getting 0..4, 0..5, 1..5 or what. :)
[02:37:04] <fizzie> There's `for i := range [5]byte{} { ... }` though. ;)
[02:37:21] <fizzie> Or `for i := range make([]byte, 5) { ... }` for that matter.
[02:37:49] <sztanpet> sadly that allocates
[02:37:50] *** Quits: purplestuff (~bcullen22@cm-72-240-209-144.buckeyecom.net) (Quit: Leaving)
[02:37:55] <fizzie> Aw. I was wondering.
[02:38:04] <fizzie> There was _something_ along those lines that didn't.
[02:38:41] <fizzie> I think maybe I'm thinking of `append(s, make([]T, N))` which would just extend `s` and zero-fill, not make a useless temporary slice.
[02:39:22] <sztanpet> not much to gain by overthinking this though, good ol trusty for loop is nice and clear with its intention
[02:39:40] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[02:40:54] *** Joins: jimeh (jimeh@matrix.bah.io)
[02:41:36] *** Quits: beholders_eye (~weechat@2804:1b3:70c3:b7ed:30e8:be9d:7823:beb6) (Ping timeout: 250 seconds)
[02:41:47] *** Quits: adip (~adip@aedr186.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[02:41:53] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:42:27] <fizzie> Hmm. https://gcc.godbolt.org/z/jadhPv89n would appear to create identical code for F1, F2 and F3, and allocate in none of them.
[02:43:01] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:43:20] *** Joins: evocatus (~evocatus@62.182.77.224)
[02:43:23] <fizzie> I mean, I'd still write the first one for sure. Was just curious.
[02:44:00] <sztanpet> maybe theres an optimization for it, dunno
[02:44:41] <fizzie> Once the size is no longer a constant, it does call `runtime.makeslice` though.
[02:45:04] *** Joins: yangby (~secret@115.199.105.217)
[02:46:59] <evocatus> Ñ€Ñˆ
[02:47:02] <evocatus> hi
[02:47:32] <evocatus> how can I iterate over heap items in sorted order without destructing it with pop?
[02:47:43] <evocatus> maybe I need to create a custom container myself?
[02:49:11] <pyzozord> You need to copy the data somehow
[02:49:26] <pyzozord> Otherwise you will end up with very slow algorithm
[02:50:12] <evocatus> I start to believe writing a balancing binary search tree myself would be the best option
[02:50:17] <pyzozord> Sorting usually depends on divide and conquer which mutates the data
[02:50:36] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[02:50:37] <pyzozord> Unless you do something crazy like sleep sort or whatever
[02:51:09] <evocatus> no I just need to add data to this structure ONCE and then iterate over it multiple times
[02:51:17] <pyzozord> Just clone the data and sort the clone, done
[02:51:29] <evocatus> actually I didn't tell the whole story
[02:51:39] <evocatus> I tried to use heap to store children of trie nodes
[02:52:10] <evocatus> maybe I should just store children in simple slices and sort them all after adding data
[02:53:34] *** Joins: adip (~adip@aedr186.neoplus.adsl.tpnet.pl)
[03:01:08] *** Quits: lilgopher (~textual@2601:241:8000:38f0:e042:e545:8e69:b5be) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:01:56] *** Joins: lilgopher (~textual@2601:241:8000:38f0:b1fd:70be:900f:e214)
[03:02:45] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 256 seconds)
[03:03:48] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[03:08:47] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[03:10:54] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:20:44] *** Quits: yangby (~secret@115.199.105.217) (Quit: Go out for a walk and buy a drink.)
[03:25:04] <b0nn> evocatus: Whose heap implementation are you using?
[03:25:26] <b0nn> Go doesn't have one, it merely defines an interface that people implement
[03:25:43] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[03:26:05] <b0nn> So, a traversal may have been added that doesn't consume things
[03:27:21] <fizzie> "container/heap" does implement the relevant algorithms for maintaining a heap. It just leaves the details of how to store and compare the data open to the caller.
[03:27:41] <evocatus> @b0nn, thanks, I looked at the sources and you're absolutely right
[03:27:48] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:27:59] *** Quits: evocatus (~evocatus@62.182.77.224) (Quit: Leaving)
[03:32:42] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:6557:5a9f:c7d1:d317) (Quit: Client closed)
[03:33:14] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:35:27] *** Joins: krux02 (~krux02@p5082251b.dip0.t-ipconnect.de)
[03:37:17] *** Quits: krux02_ (~krux02@p4fe57502.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:41:15] *** Quits: isflavior (~isflavior@2001:8a0:5dd8:4100:d52:f084:8ba4:5b68) (Quit: isflavior)
[03:41:38] *** Joins: krux02_ (~krux02@p4fe57947.dip0.t-ipconnect.de)
[03:43:33] *** Quits: krux02 (~krux02@p5082251b.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[03:45:01] *** Quits: fjb (~fjb@2804:378:9191:6c00:59a1:962b:4bb8:7507) (Quit: fjb)
[03:48:39] *** Quits: souvik (~souvik@103.59.73.33) (Ping timeout: 256 seconds)
[03:48:56] <b0nn> nice, it should be n log n for the in-order traversal
[03:49:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[03:49:28] <b0nn> or m log n where m is the number of items you are traversing which could be n if you are looking at them all :-D
[03:50:58] *** Joins: fikran (~fikran@user/fikran)
[03:51:21] *** Quits: phylaz (~phylaz@80.203.89.4) (Remote host closed the connection)
[04:02:42] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 260 seconds)
[04:05:04] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[04:05:44] *** Joins: amk (~amk@109.255.169.126)
[04:24:48] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[04:34:26] *** Joins: bluedust (~bluedust@103.161.144.94)
[04:36:43] *** Quits: achilleas (~ach@user/achilleas) (Quit: :wq)
[04:38:55] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 256 seconds)
[04:38:57] *** Joins: achilleas (~ach@user/achilleas)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:49:10] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[04:49:26] *** Quits: lilgopher (~textual@2601:241:8000:38f0:b1fd:70be:900f:e214) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:11:56] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:19:16] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[05:23:58] *** Joins: smrtz (~smrtz@user/smrtz)
[05:29:57] *** Parts: jimeh (jimeh@matrix.bah.io) ()
[05:30:00] *** Quits: sztanpet (sztanpet@user/sztanpet) (Quit: asd)
[05:30:25] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[05:30:33] *** Joins: jimeh (jimeh@matrix.bah.io)
[05:30:47] *** Joins: shtirlic_ (~shtirlic@pppoe.178-66-71-116.dynamic.avangarddsl.ru)
[05:32:25] *** Joins: tg (~tg@rockylinux/infra/tg)
[05:33:30] *** Joins: sztanpet (sztanpet@user/sztanpet)
[05:33:41] *** Quits: shtirlic (~shtirlic@178.70.131.230) (Ping timeout: 252 seconds)
[05:40:41] *** Joins: califax- (~califax@user/califx)
[05:43:54] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:43:55] *** califax- is now known as califax
[05:45:30] *** Joins: souvik (~souvik@103.59.73.33)
[05:50:19] *** Quits: souvik (~souvik@103.59.73.33) (Ping timeout: 256 seconds)
[05:51:28] *** Quits: rewt (~default@user/rewt) (Remote host closed the connection)
[05:53:50] *** Joins: rewt (~default@user/rewt)
[05:54:12] *** Quits: rewt (~default@user/rewt) (Remote host closed the connection)
[05:56:15] *** Joins: neurocyte091709 (~neurocyte@IP-212232084012.dynamic.medianet-world.de)
[05:56:15] *** Quits: neurocyte091709 (~neurocyte@IP-212232084012.dynamic.medianet-world.de) (Changing host)
[05:56:16] *** Joins: neurocyte091709 (~neurocyte@user/neurocyte)
[05:56:21] *** Joins: rewt (~default@user/rewt)
[05:56:36] *** Quits: rewt (~default@user/rewt) (Remote host closed the connection)
[05:57:54] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:57:54] *** neurocyte091709 is now known as neurocyte09170
[05:58:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:00:19] *** Joins: fikran (~fikran@user/fikran)
[06:03:15] *** Joins: rewt (~default@user/rewt)
[06:08:19] *** Joins: tomasfarias3 (~tomasfari@user/tomasfarias)
[06:08:50] *** Quits: smrtz (~smrtz@user/smrtz) (Quit: Client closed)
[06:10:19] *** Quits: tomasfarias (~tomasfari@user/tomasfarias) (Ping timeout: 256 seconds)
[06:10:19] *** tomasfarias3 is now known as tomasfarias
[06:19:34] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: The Lounge - https://thelounge.chat)
[06:21:32] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[06:26:11] *** Joins: loosh6 (~jason@vultr.bastion.pnj1.us.zj.is)
[06:26:25] *** Quits: mdel (~mdel@user/mdel) (Read error: Connection reset by peer)
[06:26:26] *** Joins: mdel0 (~mdel@user/mdel)
[06:26:29] *** Quits: loosh (~jason@vultr.bastion.pnj1.us.zj.is) (Read error: Connection reset by peer)
[06:26:29] *** loosh6 is now known as loosh
[06:26:42] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[06:36:36] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:37:30] *** Joins: lilgopher (~textual@2601:241:8000:38f0:5d45:e308:af09:d1d6)
[06:40:45] *** Joins: cskr (~cskr@49.207.221.250)
[06:41:23] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Remote host closed the connection)
[06:42:33] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[06:44:42] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[06:48:22] *** Joins: jespada (~jespada@87.74.36.188)
[06:50:13] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: Textual IRC Client: www.textualapp.com)
[06:52:49] *** hendry1 is now known as hendry
[06:52:51] *** Joins: Atque (~Atque@user/atque)
[06:53:27] *** Joins: darkapex_ (~darkapex@user/darkapex)
[06:53:48] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 250 seconds)
[06:58:29] *** Joins: st4ck (~st4ck@2601:410:200:3610:84fe:e3d:8e2a:fe34)
[06:59:06] *** Quits: st4ck (~st4ck@2601:410:200:3610:84fe:e3d:8e2a:fe34) (Quit: Leaving)
[07:09:25] *** Quits: ryu_ (~ryusaku@c6A334BC1.dhcp.as2116.net) (Ping timeout: 240 seconds)
[07:10:28] *** Joins: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net)
[07:11:34] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[07:32:33] *** Quits: moog (~moog@107.126.53.167) (Remote host closed the connection)
[07:42:10] *** Quits: cskr (~cskr@49.207.221.250) (Quit: Leaving)
[07:46:21] *** Joins: souvik (~souvik@103.59.73.33)
[07:48:46] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:49:00] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[07:51:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[07:51:11] *** Quits: souvik (~souvik@103.59.73.33) (Ping timeout: 256 seconds)
[07:53:48] *** Joins: rvalue (~rvalue@user/rvalue)
[08:08:13] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[08:08:22] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[08:08:45] *** Quits: transacid (~transacid@transacid.de) (Ping timeout: 256 seconds)
[08:09:03] *** Joins: transacid (~transacid@transacid.de)
[08:11:09] *** Joins: KDDLB6 (~Kevin@user/kddlb)
[08:12:02] *** Quits: KDDLB (kevin@user/kddlb) (Read error: Connection reset by peer)
[08:12:02] *** KDDLB6 is now known as KDDLB
[08:25:33] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[08:28:36] *** Joins: bluedust (~bluedust@103.161.144.94)
[08:31:19] *** Joins: Leon_ (~Leon@249.sub-174-198-197.myvzw.com)
[08:31:43] *** Leon_ is now known as Guest6768
[08:34:20] *** Quits: leonthemisfit (~Leon@user/leonthemisfit) (Ping timeout: 250 seconds)
[08:34:47] *** Joins: souvik (~souvik@103.59.72.92)
[08:35:55] *** Joins: mickey82 (~user@user/mickey)
[08:36:37] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 240 seconds)
[08:36:43] *** Quits: cim (~cim@205.185.117.110) (Quit: Ping timeout (120 seconds))
[08:37:04] *** Joins: cim (~cim@205.185.117.110)
[08:37:27] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[08:37:28] *** mickey82 is now known as mickey8
[08:38:29] *** Quits: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[08:39:45] *** Quits: souvik (~souvik@103.59.72.92) (Ping timeout: 256 seconds)
[08:39:54] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[08:39:58] *** Joins: bluedust_ (~bluedust@185.248.85.40)
[08:41:27] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 256 seconds)
[08:41:57] *** Joins: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:b441:7875:2785:6006)
[08:42:50] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[08:43:12] *** Joins: bindu (~bindu@user/bindu)
[08:43:18] *** Joins: crashrep (~tar@ip-115-87.wireless.oberlin.edu)
[08:43:53] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 256 seconds)
[08:45:01] *** Quits: crashrep (~tar@ip-115-87.wireless.oberlin.edu) (Client Quit)
[08:45:16] *** Joins: crashrep (~tar@ip-115-87.wireless.oberlin.edu)
[08:45:20] *** Quits: crashrep (~tar@ip-115-87.wireless.oberlin.edu) (Client Quit)
[08:45:50] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:444d:404c:c947:f9bc) (Ping timeout: 268 seconds)
[08:45:53] *** Joins: crashrep (~tar@ip-115-87.wireless.oberlin.edu)
[08:51:30] *** Quits: crashrep (~tar@ip-115-87.wireless.oberlin.edu) (Quit: WeeChat 3.4)
[08:51:45] *** Joins: crashrep (~tar@ip-115-87.wireless.oberlin.edu)
[08:52:42] *** Joins: rvalue (~rvalue@user/rvalue)
[08:55:42] *** Quits: Fossil (~Fossil@95.85.23.165) (Ping timeout: 268 seconds)
[08:59:01] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 256 seconds)
[08:59:16] *** Quits: crashrep (~tar@ip-115-87.wireless.oberlin.edu) (Changing host)
[08:59:16] *** Joins: crashrep (~tar@user/crashrep)
[09:00:07] *** Joins: rvalue (~rvalue@user/rvalue)
[09:03:30] *** Quits: crashrep (~tar@user/crashrep) (Quit: WeeChat 3.4)
[09:03:45] *** Joins: crashrep (~crashrep@user/crashrep)
[09:19:35] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[09:19:50] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Ping timeout: 250 seconds)
[09:19:57] *** Joins: crashrep (~crashrep@user/crashrep)
[09:21:55] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[09:27:05] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[09:46:18] *** Joins: fef (~thedawn@user/thedawn)
[09:54:35] *** Quits: dalan (~dalan@203-219-209-191.static.tpgi.com.au) (Read error: Connection reset by peer)
[09:54:58] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[09:55:09] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[09:56:46] *** Joins: dalan (~dalan@203-219-209-191.static.tpgi.com.au)
[09:57:50] *** Quits: pots9038 (~pots@20.51.220.66) (Read error: Connection reset by peer)
[09:59:05] *** Quits: nitrix (~nitrix@user/nitrix) (Read error: Connection reset by peer)
[10:00:00] *** Joins: pots9038 (~pots@20.51.220.66)
[10:02:30] *** Joins: nitrix (~nitrix@user/nitrix)
[10:13:50] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[10:13:51] <_mikey> is anyone using generics yet?
[10:15:40] <_mikey> nvm, got it.
[10:26:00] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[10:39:19] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[10:40:26] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[10:41:29] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[10:44:20] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 250 seconds)
[10:44:57] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Ping timeout: 240 seconds)
[10:46:20] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:48:48] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[10:56:44] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:58:15] *** Joins: mrig (~mrig@user/mrig)
[11:00:16] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:03:54] *** Joins: bancharo (~bancharo@user/bancharo)
[11:06:09] *** Joins: alwyn (~alwyn@user/alwyn)
[11:07:44] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 250 seconds)
[11:08:59] *** Joins: bluedust (~bluedust@103.161.144.94)
[11:09:46] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[11:12:30] *** Quits: bluedust_ (~bluedust@185.248.85.40) (Ping timeout: 250 seconds)
[11:18:41] *** Quits: alwyn (~alwyn@user/alwyn) (Quit: WeeChat 3.4)
[11:20:00] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[11:21:25] *** Quits: rcernin_ (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[11:27:16] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:29:13] *** Joins: absc (~absc@81.31.144.28)
[11:32:26] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:33:18] *** Joins: dansan_ (~daniel@75.81.148.51)
[11:33:30] *** Quits: dansan (~daniel@75.81.148.51) (Ping timeout: 260 seconds)
[11:35:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[11:41:33] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[11:41:49] *** Quits: Batzy (~quassel@user/batzy) (Ping timeout: 256 seconds)
[11:43:40] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[11:49:16] *** Quits: gildarts (16abab341f@user/gildarts) (Read error: Connection reset by peer)
[11:49:23] *** Joins: gildarts (16abab341f@user/gildarts)
[11:49:28] *** Quits: gbmor (gbmor@gbmor.org) (Quit: WeeChat 3.4)
[11:49:37] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 240 seconds)
[11:52:04] *** Joins: jackneilll (~jackneill@5401B83F.dsl.pool.telekom.hu)
[11:54:13] *** Quits: jackneill (~jackneill@20014C4E181DC8008732AFADA4BAB47A.dsl.pool.telekom.hu) (Ping timeout: 240 seconds)
[11:59:14] *** Joins: Xjs (~jannis@user/xjs)
[12:00:14] *** Joins: alwyn (~alwyn@user/alwyn)
[12:00:40] *** Joins: jannis (~jannis@user/xjs)
[12:04:04] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 250 seconds)
[12:08:50] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[12:09:15] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[12:09:41] *** Joins: absc (~absc@81.31.144.28)
[12:13:36] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 250 seconds)
[12:15:39] *** Joins: souvik (~souvik@103.59.72.92)
[12:16:31] *** Joins: rendar (~rendar@user/rendar)
[12:20:32] *** Quits: souvik (~souvik@103.59.72.92) (Ping timeout: 250 seconds)
[12:21:30] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[12:22:09] *** Joins: crashrep (~crashrep@user/crashrep)
[12:23:19] *** Quits: crashrep (~crashrep@user/crashrep) (Client Quit)
[12:28:10] *** Joins: crashrep (~crashrep@user/crashrep)
[12:42:01] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[12:47:09] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[12:47:39] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:48:07] *** Joins: fling (~fling@user/fling)
[12:52:45] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[12:53:01] *** Joins: crashrep (~crashrep@user/crashrep)
[12:55:21] *** Quits: hgl (hgl@user/hgl) (Quit: Bye)
[12:55:32] *** Joins: hgl (hgl@67.230.181.248)
[12:55:32] *** Quits: hgl (hgl@67.230.181.248) (Changing host)
[12:55:32] *** Joins: hgl (hgl@user/hgl)
[12:57:18] *** Quits: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[12:58:48] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[12:58:53] *** Quits: bancharo (~bancharo@user/bancharo) (Quit: low on battery!)
[13:00:51] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[13:01:04] *** Joins: mickey8 (~user@user/mickey)
[13:02:43] *** Joins: shka (~herr@109.231.0.226)
[13:06:05] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[13:06:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[13:07:42] *** Joins: mikoto-chan (~mikoto-ch@213-139-178-171.co.dnainternet.fi)
[13:11:15] *** Joins: Leon_ (~Leon@249.sub-174-198-197.myvzw.com)
[13:11:39] *** Leon_ is now known as Guest6533
[13:11:49] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:8153:e826:3459:f646)
[13:13:02] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:13:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[13:14:16] *** Quits: Guest6768 (~Leon@249.sub-174-198-197.myvzw.com) (Ping timeout: 250 seconds)
[13:22:17] *** Quits: shtirlic_ (~shtirlic@pppoe.178-66-71-116.dynamic.avangarddsl.ru) (Ping timeout: 252 seconds)
[13:22:59] *** Joins: AndrewYu (andrew@user/andrewyu)
[13:29:44] *** Joins: crashrep (~crashrep@user/crashrep)
[13:31:01] *** Quits: mikoto-chan (~mikoto-ch@213-139-178-171.co.dnainternet.fi) (Ping timeout: 256 seconds)
[13:33:16] *** Joins: bluedust_ (~bluedust@185.248.85.41)
[13:34:01] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[13:36:22] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 250 seconds)
[13:36:57] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:37:14] *** Joins: girafe2 (~girafe@176-147-142-235.abo.bbox.fr)
[13:38:37] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 240 seconds)
[13:39:41] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 256 seconds)
[13:53:10] <dostoyevsky2> > println!("Hello, {person}!"); // Rust just got now string variable interpolation... I guess Go will never get something like that
[13:53:12] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[13:53:36] <ikke> I suspect not
[13:53:45] <b0nn> I hope not
[13:55:44] <shadowchaser> It would be really useful
[13:58:28] *** Joins: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831)
[13:58:36] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net)
[14:02:59] <evilop> {} format is imo much nicer
[14:07:42] <evilop> "{pkgname}/{pkgver}-{pkgrel}\n    Date: {pkgdate}" vs "%s/%s-%s\n    Date: %s"  since go doesn't have a syntax for named replacement
[14:13:42] <shadowchaser> Indeed
[14:14:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[14:16:37] *** Joins: souvik (~souvik@103.59.72.92)
[14:16:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[14:18:19] <evilop> python has a syntax for naming things with % formating, but its somewhat horrible
[14:18:22] <fizzie> fmt.Sprint(name, "/", version, "-", release, "\n    Date: ", date) is an option.
[14:18:52] <evilop> fizzie: but not when you want to define the template one place and then (re)use it in another
[14:19:05] <fizzie> As is "text/template", with all its overhead, but once it gets to multi-line things I don't think it's unwarranted.
[14:19:35] <fizzie> I don't think string interpolation usually works "when you want to define the template one place and then (re)use it in another".
[14:20:30] <evilop> in the case of rust 1.58 its not like f"" strings, it just got the ability to capture the local scope
[14:20:54] <evilop> can still reuse with passing in explicitly
[14:21:26] *** Quits: souvik (~souvik@103.59.72.92) (Ping timeout: 250 seconds)
[14:23:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[14:24:08] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:25:35] <fizzie> So more like Python '{foo}.{bar}'.format(foo=123, bar=456) then? Well, not like you couldn't make a function for that. Like a lightweight edition of "text/template".
[14:29:01] *** Joins: fef (~thedawn@user/thedawn)
[14:31:07] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[14:41:38] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:8153:e826:3459:f646) (Read error: Connection reset by peer)
[14:43:02] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:8153:e826:3459:f646)
[14:53:15] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[14:58:23] *** Joins: cskr (~cskr@49.207.221.250)
[15:02:11] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:02:44] *** Quits: Byteflux (~byte@byteflux.net) (Read error: Connection reset by peer)
[15:03:01] *** Joins: Byteflux (~byte@byteflux.net)
[15:03:39] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[15:06:40] *** Joins: jla (~jordi@64.225.79.195)
[15:08:14] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 250 seconds)
[15:13:13] *** Quits: crashrep (~crashrep@user/crashrep) (Remote host closed the connection)
[15:13:52] *** Joins: crashrep (~crashrep@user/crashrep)
[15:19:16] *** Quits: zwr (~zwr@2804:d45:b966:fb00:ed56:14ca:4cf:c0ab) (Ping timeout: 268 seconds)
[15:19:44] *** Joins: zwr (~zwr@2804:d45:b966:fb00:1d:7713:457:353)
[15:23:24] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 250 seconds)
[15:23:32] *** Joins: fef (~thedawn@user/thedawn)
[15:25:33] *** Joins: jla (~jordi@64.225.79.195)
[15:35:55] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:36:12] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[15:36:37] *** Joins: unknown__ (~thedawn@user/thedawn)
[15:36:53] *** Quits: cskr (~cskr@49.207.221.250) (Quit: Leaving)
[15:37:00] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[15:37:48] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[15:42:13] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 240 seconds)
[15:46:29] *** Joins: souvik (~souvik@103.59.72.92)
[15:51:08] *** Quits: souvik (~souvik@103.59.72.92) (Ping timeout: 250 seconds)
[15:56:16] *** Joins: Techcable (~Techcable@168.235.93.147)
[15:56:58] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:57:15] *** Joins: mickey8 (~user@user/mickey)
[15:57:59] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[15:58:31] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Ping timeout: 256 seconds)
[16:00:38] *** Joins: Atque (~Atque@user/atque)
[16:02:27] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[16:06:39] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[16:09:50] *** Joins: noarb (~noarb@user/noarb)
[16:19:09] *** Joins: leonarth (~leonarth@user/leonarth)
[16:22:02] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[16:29:28] *** Joins: shtirlic (~shtirlic@193.160.158.5)
[16:30:31] <aram> hey, did anyone happen to write a tool to extract //go:embed data from Go binaries?
[16:30:36] <aram> so I don't have to do it myself.
[16:30:57] *** Quits: bluedust_ (~bluedust@185.248.85.41) (Remote host closed the connection)
[16:31:21] <aram> oh, and the binaries are stripped.
[16:35:38] *** Joins: goldfish (~goldfish@user/goldfish)
[16:42:25] *** Joins: rbn (~rbn@user/rbn)
[16:43:37] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[16:46:19] *** Joins: bluedust (~bluedust@103.161.144.94)
[16:58:15] *** Joins: menace (~someone@ppp-93-104-175-249.dynamic.mnet-online.de)
[16:58:15] *** Quits: menace (~someone@ppp-93-104-175-249.dynamic.mnet-online.de) (Changing host)
[16:58:15] *** Joins: menace (~someone@user/menace)
[16:58:23] *** menace is now known as Deknos
[17:09:24] *** Parts: jla (~jordi@64.225.79.195) ()
[17:10:10] <twaapo> can I convert map key to something else in place?
[17:10:25] <twaapo> i have something like type myuint64 uint64
[17:11:27] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[17:20:41] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[17:22:24] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[17:27:06] *** Joins: bluedust_ (~bluedust@86.106.136.217)
[17:29:14] *** Joins: isflavior (~isflavior@2001:8a0:5dd8:4100:906b:8a80:654c:513)
[17:30:48] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 250 seconds)
[17:35:34] *** Quits: Tach (~Tach@user/tach) (Ping timeout: 250 seconds)
[17:37:46] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:38:23] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:42:26] *** Joins: theo (~theo@user/theo)
[17:43:05] *** Joins: fikran (~fikran@user/fikran)
[17:47:19] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[17:47:54] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 250 seconds)
[17:48:13] <fizzie> Not sure how that'd work, since the type of the key is part of the type of the map. If you have a `map[uint64]T`, its keys must be `uint64`s, and if you have a `map[myuint64]T` its keys must be `myuint64`s, so converting them to anything else "in place" wouldn't really make sense. And if it's a `map[interface{}]T`, then uint64(0) and myuint64(0) would just be different keys.
[17:51:44] *** Joins: cstls (~ruiner@2603-7081-0800-4824-e4ee-a31f-e63d-fd97.res6.spectrum.com)
[17:56:18] <twaapo> i was thinking how to separate human representation of the map from internal processing
[17:56:45] <twaapo> currently i assign all the elems separately, maybe its not a problem i guess ill find out
[17:59:01] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[18:00:55] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[18:03:11] *** Quits: isflavior (~isflavior@2001:8a0:5dd8:4100:906b:8a80:654c:513) (Quit: isflavior)
[18:03:44] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 250 seconds)
[18:07:32] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[18:09:49] *** Joins: Tach (~Tach@user/tach)
[18:10:14] *** Joins: mickey84 (~user@user/mickey)
[18:12:42] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[18:12:43] *** mickey84 is now known as mickey8
[18:19:37] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[18:23:29] *** Quits: bader (~Bader_Lej@freeshell.de) (Quit: WeeChat 2.8)
[18:27:33] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[18:29:43] *** Joins: moog (~moog@107.126.53.231)
[18:30:24] *** Joins: souvik (~souvik@103.59.72.92)
[18:32:57] *** Quits: shtirlic (~shtirlic@193.160.158.5) (Ping timeout: 250 seconds)
[18:34:56] *** Quits: souvik (~souvik@103.59.72.92) (Ping timeout: 250 seconds)
[18:35:28] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[18:40:01] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[18:41:09] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[18:43:32] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[18:44:54] *** Joins: gbmor (gbmor@gbmor.org)
[18:54:33] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[18:55:42] *** Joins: mnx|aw (~nabromov@92.40.255.112.threembb.co.uk)
[18:57:03] *** Quits: kinduff (~kinduff@user/kinduff) (Quit: The Lounge - https://thelounge.chat)
[18:57:09] *** Parts: mnx|aw (~nabromov@92.40.255.112.threembb.co.uk) ()
[18:57:25] *** Quits: dr0n (~nabromov@176.26.119.61) (Ping timeout: 256 seconds)
[19:00:02] *** Joins: dr0n (~nabromov@92.40.255.112.threembb.co.uk)
[19:00:14] *** Joins: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001)
[19:00:57] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[19:01:06] *** Joins: Techcable (~Techcable@168.235.93.147)
[19:04:04] *** Joins: sabry (~sabry@197.37.4.159)
[19:14:00] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[19:18:13] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 240 seconds)
[19:26:33] *** Quits: leonarth (~leonarth@user/leonarth) (Remote host closed the connection)
[19:26:50] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[19:27:16] *** Joins: noonien (~noonien@user/noonien)
[19:27:44] *** Joins: leonarth (~leonarth@user/leonarth)
[19:33:24] *** Joins: Batzy (~quassel@user/batzy)
[19:36:34] *** unknown__ is now known as fef
[19:40:50] *** Quits: cstls (~ruiner@2603-7081-0800-4824-e4ee-a31f-e63d-fd97.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[19:41:15] *** Joins: cstls (~ruiner@2603-7081-0800-4824-e4ee-a31f-e63d-fd97.res6.spectrum.com)
[19:41:39] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: Textual IRC Client: www.textualapp.com)
[19:42:40] *** Joins: beholders_eye (~weechat@2804:1b3:70c3:b7ed:30e8:be9d:7823:beb6)
[19:48:25] *** Quits: Ergo^ (~ergo@91.238.59.144) (Ping timeout: 256 seconds)
[19:49:48] *** Joins: leonarth (~leonarth@user/leonarth)
[19:49:57] *** Joins: mrig (~mrig@user/mrig)
[19:50:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:51:40] *** Quits: cstls (~ruiner@2603-7081-0800-4824-e4ee-a31f-e63d-fd97.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[19:52:26] *** Joins: fikran (~fikran@user/fikran)
[19:55:28] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:55:28] *** Joins: mickey87 (~user@user/mickey)
[20:02:20] *** Joins: cstls (~ruiner@2603-7081-0800-4824-e4ee-a31f-e63d-fd97.res6.spectrum.com)
[20:03:53] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[20:08:04] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:09:37] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[20:15:33] *** Joins: arkurious (~arkurious@user/arkurious)
[20:15:51] *** Joins: jw4 (~Thunderbi@user/jw4)
[20:21:04] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[20:22:04] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[20:22:20] *** Joins: moto (~moto@user/moto)
[20:25:10] *** Quits: cstls (~ruiner@2603-7081-0800-4824-e4ee-a31f-e63d-fd97.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[20:30:59] *** Joins: souvik (~souvik@103.59.72.92)
[20:31:41] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:32:25] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[20:34:56] *** Joins: leonarth_ (~leonarth@user/leonarth)
[20:35:17] *** Quits: souvik (~souvik@103.59.72.92) (Ping timeout: 240 seconds)
[20:37:43] *** Quits: leonarth (~leonarth@user/leonarth) (Ping timeout: 256 seconds)
[20:40:09] *** Quits: leonarth_ (~leonarth@user/leonarth) (Ping timeout: 256 seconds)
[20:40:16] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[20:43:23] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[20:45:37] *** Joins: mrig (~mrig@user/mrig)
[20:48:23] *** Quits: amigan (dramoray@dtvax.dynatron.me) (Quit: WeeChat 3.4)
[20:53:47] *** Quits: sabry (~sabry@197.37.4.159) (Quit: Client closed)
[20:55:42] *** Joins: cstls (~ruiner@2600:381:4324:5554:b92d:82fe:3a8a:f7a8)
[20:58:24] *** Joins: goldfish (~goldfish@user/goldfish)
[21:02:16] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[21:03:02] *** Quits: cstls (~ruiner@2600:381:4324:5554:b92d:82fe:3a8a:f7a8) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[21:07:02] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 250 seconds)
[21:10:41] *** Quits: dr0n (~nabromov@92.40.255.112.threembb.co.uk) (Remote host closed the connection)
[21:10:56] *** Joins: cstls (~ruiner@107.115.20.65)
[21:14:11] *** Quits: alwyn (~alwyn@user/alwyn) (Quit: WeeChat 3.4)
[21:15:31] *** Joins: leonarth (~leonarth@user/leonarth)
[21:17:00] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[21:17:07] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[21:17:30] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[21:17:37] *** Joins: pepee (~pepee@user/pepee)
[21:28:43] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[21:30:39] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[21:31:09] *** Joins: henry40408 (~henry4040@175.181.155.165)
[21:33:48] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[21:33:52] *** Joins: hanzo (uid532183@user/hanzo)
[21:35:31] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[21:36:39] *** Quits: Deknos (~someone@user/menace) (Ping timeout: 256 seconds)
[21:42:09] *** Joins: bluedust (~bluedust@117.207.236.117)
[21:42:29] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[21:45:53] *** Quits: bluedust_ (~bluedust@86.106.136.217) (Ping timeout: 256 seconds)
[21:48:22] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:49:24] *** Joins: bsund (~bsund@user/bsund)
[21:49:54] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:57:41] *** Quits: mickey87 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:57:54] *** Joins: mickey8 (~user@user/mickey)
[21:58:26] *** Quits: bluedust (~bluedust@117.207.236.117) (Remote host closed the connection)
[22:00:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[22:01:08] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:01:47] *** Joins: fikran (~fikran@user/fikran)
[22:07:27] *** Quits: moog (~moog@107.126.53.231) (Remote host closed the connection)
[22:08:11] *** justIrresolute is now known as justJustache
[22:10:58] *** Joins: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net)
[22:16:22] *** Joins: krux02 (~krux02@p50822195.dip0.t-ipconnect.de)
[22:17:20] *** Quits: cstls (~ruiner@107.115.20.65) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[22:18:45] *** Quits: krux02_ (~krux02@p4fe57947.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[22:24:58] *** Quits: jw4 (~Thunderbi@user/jw4) (Quit: jw4)
[22:25:17] *** Joins: jw4 (~Thunderbi@user/jw4)
[22:25:28] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 250 seconds)
[22:27:54] *** Joins: carlavilla (~carlavill@2a0c:5a84:3105:5e00:221:6bff:fe3b:cee4)
[22:29:05] *** Joins: PKDWrites (sid341703@id-341703.ilkley.irccloud.com)
[22:29:39] *** Joins: jla (~jordi@64.225.79.195)
[22:32:50] *** Parts: jla (~jordi@64.225.79.195) ()
[22:35:27] *** Joins: Dus10 (~dus10matr@2001:470:69fc:105::a7d)
[22:41:08] *** Joins: cstls (~ruiner@2603-7081-0800-4824-4d06-eb58-70e1-7556.res6.spectrum.com)
[22:44:45] <borring> Dus10: You'll need to do it in 2 separate steps.. First create a slice of strings, then `append()` to it.
[22:46:36] <borring> I don't think it's possible to do everything in a single "line" like you're going for.. Unless you make some kind of transformation function to turn those keys into a slice
[22:46:44] *** Quits: cstls (~ruiner@2603-7081-0800-4824-4d06-eb58-70e1-7556.res6.spectrum.com) (Quit: out)
[22:50:32] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d)
[22:50:57] *** Joins: bluedust (~bluedust@117.207.236.117)
[22:55:01] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9fc:b9e:fb4d:b25d) (Ping timeout: 240 seconds)
[22:59:45] *** Joins: bluedust_ (~bluedust@37.120.198.153)
[23:03:21] *** Quits: bluedust (~bluedust@117.207.236.117) (Ping timeout: 256 seconds)
[23:03:30] *** Joins: jcajka_ (~jcajka@2a02:8308:a106:d100::4ac5)
[23:03:36] *** Quits: jcajka_ (~jcajka@2a02:8308:a106:d100::4ac5) (Client Quit)
[23:04:58] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (Quit: rebooter)
[23:08:44] *** Quits: lilgopher (~textual@2601:241:8000:38f0:5d45:e308:af09:d1d6) (Quit: Textual IRC Client: www.textualapp.com)
[23:12:45] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[23:12:45] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[23:12:45] *** Joins: tane (~tane@user/tane)
[23:13:19] *** Joins: lilgopher (~textual@2601:241:8000:38f0:6136:22f1:e13c:95aa)
[23:16:38] <LiENUS> anyone here use govim on mac?  the hover details arent working for me
[23:17:11] <LiENUS>  /join #vim
[23:17:14] <LiENUS> err
[23:24:28] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[23:33:11] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[23:36:11] *** Joins: arinov (~arinov@213.194.126.155)
[23:36:48] *** Joins: shtirlic (~shtirlic@pppoe.178-66-71-116.dynamic.avangarddsl.ru)
[23:40:04] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[23:40:18] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:43:45] *** Quits: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net) (Ping timeout: 256 seconds)
[23:44:15] *** Joins: dr0n (~nabromov@176.26.119.61)
[23:47:19] *** Joins: ruel (~ruel@150.136.4.160)
[23:47:25] <b0nn> twaapo: can I ask why you are wanting a more human friendly key?
[23:48:04] <b0nn> I'm thinking that you transform input/output from the human readable format to the internal representation during your read/write functions
[23:48:04] *** Quits: dr0n (~nabromov@176.26.119.61) (Read error: Connection reset by peer)
[23:48:51] <LiENUS> figured out the issue, mac vim just is missing the feature it uses
[23:48:52] <b0nn> "Clippy has detected that you have asked for key int(5) and will now give you the value for map[uint(5)]"
[23:51:59] *** Joins: dr0n (~nabromov@176.26.119.61)
[23:53:20] *** Quits: dr0n (~nabromov@176.26.119.61) (Client Quit)
[23:53:43] *** Joins: krux02_ (~krux02@p50822dd2.dip0.t-ipconnect.de)
[23:54:40] *** Joins: dr0n (~nabromov@176.26.119.61)
[23:55:27] <twaapo> b0nn: i dont know actually how magical json.Marshal is, does it marshal keys with custom marshalers for example
[23:55:36] *** Quits: krux02 (~krux02@p50822195.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[23:55:44] <twaapo> but i wanted to have custom marshalers
[23:57:11] *** Quits: PedroG1 (~android@45.77.216.181) (Ping timeout: 256 seconds)
[23:57:24] <b0nn> You can write your own custom marshal/unmarshal
[23:57:51] <foobaz> twaapo: of course it works with custom marshalers, otherwise there would be no point in having a custom marshaler
[23:57:54] *** Joins: PedroG1 (~android@45.77.216.181)
[23:57:56] <b0nn> http://choly.ca/post/go-json-marshalling/
[23:58:02] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
