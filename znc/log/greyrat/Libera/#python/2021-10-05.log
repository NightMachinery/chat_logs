[00:00:07] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[00:00:33] *** Joins: iomari891 (~iomari891@105.112.138.38)
[00:00:48] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[00:03:36] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Quit: Leaving)
[00:04:23] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Read error: Connection reset by peer)
[00:04:41] *** Quits: ThomasJ (~ThomasJ@user/thomasj) (Quit: Meeeelting)
[00:05:00] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[00:07:15] <bob_x2> how function context is organized? when i define new function and use inside its scope new variable which already defined in the upper context i just overlap access to a global variable ?
[00:07:48] *** Joins: raxor2k (~raxor2k@78.158.232.147)
[00:07:48] *** Joins: ThomasJ (~ThomasJ@user/thomasj)
[00:08:33] <raxor2k> self.start_date = start_date.strftime("%Y-%m-%d")   gives me 2021-10-04. now how can i for instance only print "month" from self.start_date?
[00:09:08] <KirkMcDonald> bob_x2: It depends. Do you have a specific example you would like explained?
[00:09:22] <SnoopJ> bob_x2, by default, the variable is local, but you can use the `nonlocal` or `global` keywords to tell the interpreter that something is *not* a local variable.
[00:09:41] <SnoopJ> (doing this is rarely the best thing to do, though)
[00:09:57] <bob_x2> KirkMcDonald: yes maybe i will do some research here on my own first. need to write an example
[00:10:10] <KirkMcDonald> Note that the question merely said "use inside its scope," which doesn't necessarily imply assignment, which is the important bit.
[00:10:26] <SnoopJ> yea, assignment is where the distinction really matters
[00:10:35] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[00:10:43] <raxor2k> print(self.start_date.month) aint working
[00:11:11] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[00:11:26] <KirkMcDonald> raxor2k: strftime() returns a string.
[00:11:38] *** Quits: BSaboia (~bsaboia@177.37.198.74) (Quit: This computer has gone to sleep)
[00:11:45] <KirkMcDonald> raxor2k: And a string does not have a .month attribute.
[00:12:31] <bob_x2> yeh so i mean assignmeent. while saying 'use inside its scope'
[00:13:25] <bob_x2> what happens here:
[00:13:31] <bob_x2> x = 0
[00:13:33] <bob_x2> def foo():
[00:13:35] <bob_x2>   x = 1
[00:13:37] <bob_x2>   print(x)
[00:13:47] <KirkMcDonald> That will define a local variable inside the function.
[00:13:52] <bob_x2> do i just use global context x with assigning it to a new value
[00:14:00] <KirkMcDonald> The global will not be affected.
[00:14:16] *** Quits: ubert (~Thunderbi@178.115.39.222.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[00:14:19] <sbrown> raxor2k: you could try something like `self.start_month = start_date.strftime("%m")`
[00:14:20] <bob_x2> well ok. i would test it by myself for sure
[00:14:21] <SnoopJ> when the compiler sees foo(), it says "okay, I'll keep track of a local variable named 'x' for this function"
[00:14:47] <NoImNotNineVolt> Seirdy: that's what i used to do, and still do in many places. but it's nicer to not have to deactivate; . venv/bin/activate; all the time
[00:15:16] <SnoopJ> NoImNotNineVolt, this is why I like direnv so much, because I mostly want to activate when I cd into a project, and deactivate when I cd away
[00:15:33] *** Joins: Leonarbro__ (~Leonet@user/leonarbro)
[00:15:34] <bob_x2> ok and how can i change global x inside of the function code ? or it's impossible
[00:15:52] <NoImNotNineVolt> Seirdy: i found that after spending 120 seconds reading the pyenv documentation, the time i saved by pyenv helped me recoup that time investment in under a week.
[00:16:38] *** Joins: ubert (~Thunderbi@178.115.39.222.wireless.dyn.drei.com)
[00:16:43] <KirkMcDonald> bob_x2: You put `global x` at the top of the function.
[00:17:02] <SnoopJ> Which tells the compiler "don't make this local, I'm talking about a global named `x`"
[00:17:10] <NoImNotNineVolt> is direnv distinct from pyenv? maybe i should've spent more than 120 seconds on the docs :P
[00:17:13] <bob_x2> ah so i need to explicitly tell the compiler when i need a global x
[00:17:22] <SnoopJ> NoImNotNineVolt, yes, the former has support for the latter
[00:17:22] <KirkMcDonald> bob_x2: When you want to assign to one. Yes.
[00:17:38] <bob_x2> but maybe read too ?
[00:17:40] <SnoopJ> bob_x2, only when you want to assign, which is almost always a bad idea.
[00:17:58] <NoImNotNineVolt> SnoopJ: i must've followed some guide that had my install both. either way, i'm a happy customer :P
[00:17:58] <KirkMcDonald> bob_x2: If you never assign to the name, then it'll resolve it to an outer scope.
[00:18:06] <bob_x2> SnoopJ: yes changing context is not a function anymore
[00:18:09] <SnoopJ> Names are resolved by looking in the current scope, and then moving outwards until something is found, or the interpreter runs out of scopes.
[00:18:17] <KirkMcDonald> bob_x2: This is, for example, what happens whenever you call another function.
[00:18:30] <KirkMcDonald> bob_x2: Since functions are just variables that have been assigned to functions.
[00:18:47] <bob_x2> KirkMcDonald: ah so if function do not have any assignment of a specific symbol then it is intended as a global ok
[00:18:48] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[00:19:03] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[00:19:10] <SnoopJ> NoImNotNineVolt, direnv is basically "here's some stuff I want you to do when I cd to this dir", and it's aware of venvs as part of that
[00:19:18] <SnoopJ> (and other stuff when you cd away)
[00:19:58] <KirkMcDonald> bob_x2: A global or a nonlocal.
[00:20:31] <bob_x2> nonlocal meant just outer context?
[00:20:38] <bob_x2> but not global one )
[00:20:41] <SnoopJ> Yes, some outer context that is *not* global
[00:20:56] <KirkMcDonald> bob_x2: Yes, meaning from a function which the current function is nested within.
[00:20:58] <bob_x2> and where is the global begins ?
[00:21:06] <KirkMcDonald> "Global" just means "module-level."
[00:21:16] *** Quits: ubert (~Thunderbi@178.115.39.222.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[00:21:28] <SnoopJ> the "top" scope in a file
[00:21:36] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[00:21:57] <KirkMcDonald> It's a little misleading to say "global", since each module has its own global scope. It's not really that "global."
[00:22:06] <SnoopJ> yea, not a great name :/
[00:22:29] <KirkMcDonald> But it is global in, like, the functional sense.
[00:22:54] *** Joins: seednode1 (~seednode@user/seednode)
[00:23:07] *** Quits: Leonarbro__ (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[00:23:09] <bob_x2> well good. now i know that the global is not so global but locally global
[00:23:26] <bob_x2> easy
[00:23:41] <SnoopJ> bob_x2, these are pretty subtle details, they aren't usually things worth worrying about on the first couple of days of learning Python
[00:24:07] <bob_x2> SnoopJ: im just letting my curiosity to flow freely these time
[00:24:18] <bob_x2> and have time
[00:24:24] *** Quits: raxor2k (~raxor2k@78.158.232.147) ()
[00:24:25] <SnoopJ> as long as you know that you're getting pretty far into the weeds :)
[00:24:33] *** Joins: noircode (~Izem@137.220.53.172)
[00:24:35] <SnoopJ> (they *are* fun weeds, though)
[00:24:39] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[00:24:54] *** Joins: arseru (uid515527@user/arseru)
[00:24:54] *** Quits: arinov (~arinov@31.142.12.211) (Ping timeout: 245 seconds)
[00:25:07] *** Joins: BSaboia (~bsaboia@177.37.198.74)
[00:25:07] *** Quits: BSaboia (~bsaboia@177.37.198.74) (Client Quit)
[00:25:30] <bob_x2> anyway i should work for organizing this stuff from the language and this is intended to be known on the level i want to know python
[00:26:12] <bob_x2> and these questions are only from the python tutorials which im currently reading
[00:26:44] <SnoopJ> if you make sure you're writing/reading Python programs regularly as you go, it's hard to go wrong
[00:27:34] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[00:28:21] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[00:29:36] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed) (Quit: Leaving)
[00:29:47] *** Joins: Betal (~Betal@user/betal)
[00:29:55] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed)
[00:33:49] *** Quits: Konsgn (~Konsgnx3@66-109-34-138.static.firstlight.net) (Quit: Leaving)
[00:36:48] *** Joins: trampel (~trampel@2601:602:9c00:921:a181:b245:c044:7e2e)
[00:37:40] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[00:40:06] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:40:31] *** Joins: thiras (~thiras@user/thiras)
[00:40:41] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[00:41:00] *** Joins: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com)
[00:42:15] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[00:42:52] *** Joins: redrum88 (~redrum88@user/redrum88)
[00:44:00] *** Joins: doforlove99 (~doforlove@45.87.215.58)
[00:45:59] *** Joins: rannnn8888 (~rannnn888@bzq-109-65-168-133.red.bezeqint.net)
[00:47:01] *** Parts: noircode (~Izem@137.220.53.172) ()
[00:47:53] *** Quits: chamgry (~chamgry@user/chamgry) (Quit: WeeChat 2.8)
[00:48:14] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:48:36] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:48:36] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[00:49:14] *** Quits: Akuli (~Akuli@82-203-160-142.bb.dnainternet.fi) (Quit: Leaving)
[00:49:40] *** Joins: schumaml (~schumaml@dslb-092-074-000-199.092.074.pools.vodafone-ip.de)
[00:50:28] *** Joins: fikran (~fikran@user/fikran)
[00:50:54] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[00:51:32] * nedbat installs 3.10.0
[00:51:34] *** Quits: doforlove99 (~doforlove@45.87.215.58) (Quit: Leaving)
[00:51:47] <vdamewood> ooohh... is .10 released?
[00:51:52] <SnoopJ> yep
[00:51:58] *** Joins: doforlove33 (~doforlove@45.87.215.58)
[00:52:14] <vdamewood> Yay!
[00:52:43] *** Quits: doforlove33 (~doforlove@45.87.215.58) (Remote host closed the connection)
[00:52:49] <vdamewood> Aww... nuts. Not in homebrew yet.
[00:53:01] * vdamewood considers downloading PSF distribution.
[00:53:18] *** Quits: emf_ (~emf@2601:602:9400:84d:83e:973e:4aa8:d9e5) (Read error: Connection reset by peer)
[00:53:22] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d) (Remote host closed the connection)
[00:53:27] *** Joins: emf (~emf@2601:602:9400:84d:83e:973e:4aa8:d9e5)
[00:53:36] *** Joins: doforlove33 (~doforlove@45.87.215.58)
[00:54:14] *** Quits: doforlove33 (~doforlove@45.87.215.58) (Remote host closed the connection)
[00:54:25] *** Joins: doforlove33 (~doforlove@45.87.215.58)
[00:54:36] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[00:54:44] <jamwil> vdamewood: I just tried pyenv instead of homebrew yesterday and I don't think I'll go back.
[00:56:00] *** Quits: emf (~emf@2601:602:9400:84d:83e:973e:4aa8:d9e5) (Remote host closed the connection)
[00:56:03] <jinsun> ya, pyenv had it 30-40 minutes before the actual release on python.org
[00:56:09] *** Joins: alphasierra (~alphasier@2405:201:e:4d:f936:2947:7527:2361)
[00:57:17] <madduck> How would I write a pytest that actually runs once for a number of fixtures? mark.parametrize does not work because it passes the function into the test, not the result, and I cannot/should not call fixtures directly
[00:57:45] *** Quits: grooverman_ (~grooverma@177.95.12.14) (Remote host closed the connection)
[00:57:50] <SnoopJ> madduck, you're trying to parametrize a fixture?
[00:57:58] *** Quits: lalilulelo (~lalilulel@2804:14d:7680:8ed4:a957:abdc:92cd:38cb) (Quit: Leaving)
[00:58:23] <vdamewood> Hmm... brew install pyenv
[00:58:37] <foobaz212> is there a channel where fb engineers talk
[00:58:56] <nedbat> foobaz212: unlikely, but why?
[00:59:04] <SnoopJ> the outage, presumably
[00:59:08] <foobaz212> yep
[00:59:24] <nedbat> foobaz212: there is no way they would be discussing that on IRC, for a number of reasons
[00:59:31] <madduck> SnoopJ: not sure. I am dealing with "records" of which there are different kinds, and there are two tests, and one test applies to one half of the types of records, and another for the other half. I have fixtures to generate each type of record. Now I want to say testA for fix0,fix1,fix2 and testB for fix3,fix4,fix5…
[00:59:37] <Evolver> Instead of the type annotation `str | None`, can they allow `str?` ?
[00:59:41] <kosh> they probably can't even legally discuss it on something like irc
[00:59:45] <SnoopJ> madduck, it sounds like you want: https://docs.pytest.org/en/6.2.x/fixture.html#fixture-parametrize
[00:59:54] <foobaz212> https://www.linkedin.com/posts/gergelyorosz_facebook-outage-irc-activity-6850874793844056064-I9xY
[00:59:57] <kosh> but I am having a lot of fun laughing about it
[01:00:02] <foobaz212> nedbat seems like they are^
[01:00:03] <Evolver> Instead of the type annotation `str | None`, can they allow `str?` or `?str` ?
[01:00:08] <SnoopJ> madduck, which is pretty clunky, but it does give you a unique invocation of tests that use the fixture per value in `params`
[01:00:15] <vdamewood> Oh hey, pyenv basically works the same way Apple handled Java versions.
[01:00:35] <SnoopJ> vdamewood, it's pretty much 'just' building the source distribution you'd get from python.org, but with some automation
[01:00:48] <nedbat> foobaz212: i guess I meant "on public IRC"
[01:00:59] *** Joins: emf (~emf@2620:10d:c090:400::5:103e)
[01:01:00] <jinsun> Evolver: not allowed for now, there is a not-yet-accepted PEP for that if I remember right
[01:01:48] <Evolver> jinsun: ok. it would complicate something like `str | int | None` with no clear way to specify it
[01:02:28] <SnoopJ> if I understand you right, what you mean would clobber PEP 505 (which is deferred, granted)
[01:02:55] <madduck> SnoopJ: yeah, I see how this can be used. It wasn't my original approach, but it makes sense. Thanks.
[01:03:14] *** Quits: trampel (~trampel@2601:602:9c00:921:a181:b245:c044:7e2e) (Quit: Leaving)
[01:03:51] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[01:04:22] <SnoopJ> madduck, it's kinda clunky, but I find that it's a helpful reminder to think about if I *really* want to parametrize the fixture, or consider if I can capture the parametrize mark to a name that is shared between tests
[01:04:25] *** Quits: dub_a (~dub_a@2601:1c2:4e00:3b3::cb2) (Quit: WeeChat 3.3)
[01:05:03] <SnoopJ> i.e. `PARAMS = pytest.mark.parametrize(...); @PARAMS def test_foo(a, b): ...;; @PARAMS def test_bar(a, b): ...;;`
[01:05:13] <jinsun> Evolver: this PEP https://www.python.org/dev/peps/pep-0645/
[01:05:15] <vdamewood> Hmm... pyenv says 3.10.0 isn't available and suggests 3.10.0rc2.
[01:05:34] <vdamewood> Also, I'm guessing the versions that are just bare version numbers are cpython.
[01:05:35] <SnoopJ> vdamewood, did you make sure it's updated? The PR was merged two hours ago: https://github.com/pyenv/pyenv/pull/2093
[01:05:50] <vdamewood> SnoopJ: I'm going to facepalm at myself now.
[01:06:04] <jinsun> install from git instead of homebrew I guess
[01:06:15] <SnoopJ> ah, yea, that might be the problem
[01:06:22] <vdamewood> jinsun: Yep.
[01:07:14] *** Joins: vimart (~vimart@85.255.232.42)
[01:07:42] *** Quits: doforlove33 (~doforlove@45.87.215.58) (Quit: Leaving)
[01:09:15] *** Quits: mat001 (~mat001@213.143.69.121) (Remote host closed the connection)
[01:09:35] <madduck> SnoopJ: thanks, it works now!
[01:10:02] <vimart> / c/j ##python
[01:10:04] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:10:31] * vimart shamessly walkng in.
[01:10:51] * vimart says: hello o/
[01:11:05] <CrtxReavr> ##python is a thing. . . two knew?
[01:11:56] *** Quits: Narrat (~omnius@p200300df5f0b351c06ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:12:27] <aphysically> aaand python 3.10.0 just landed in my dist :)
[01:13:38] <vimart> CrtxReavr: ducks, now. Not a kene but I'm stuck in a second gear ;-)
[01:13:45] <vdamewood> I think my distro has already frozen packages for the next release, so my Linux system won't get Python 3.10 until the next release after that.
[01:14:51] <vdamewood> Oh hey, I just noticed the wallop.
[01:15:03] <vdamewood> Cool, OpenSSL 3.0.0!
[01:17:08] <CrtxReavr> What does 3.10 even add?
[01:17:39] <CrtxReavr> 3.8 had a cool feature, but it was totally over-shadowed by that stupid walrus operator debacle.
[01:17:55] <jinsun> pattern matching and bitwise or for types are the main ones I think
[01:17:56] <madduck> when a test fails, it prints the fixture data to help me figure out what iteration of parametrisation failed. Can I somehow change what is printed there?
[01:18:19] <jinsun> also the really nice error messages
[01:18:38] <madduck> my records, which are the parameters, are lists, but the first couple of elements are all the same, i.e. the magic happens later in the list. But pytest chops the list off after 5 or 6 items.
[01:19:12] <nedbat> CrtxReavr: 3.10 adds match/case
[01:20:11] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:20:12] <vdamewood> Yay, pyenv: Downloading Python-3.10.0.tar.xz...
[01:20:58] <vdamewood> okay, this is cool. Now it's saying stuff like 'using foo from homebrew' and 'using bar from xcode sdk' rather than downloading them.
[01:21:15] <vdamewood> oops. s/foo/spam/ and s/bar/eggs/
[01:21:26] *** Quits: ponyofdeath (~vladi@cpe-24-94-16-66.san.res.rr.com) (Quit: WeeChat 3.1)
[01:22:11] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[01:22:50] *** Joins: stevea (~stevea@user/stevea)
[01:23:00] <jamwil> vdamewood: It's spiffy, hey!?
[01:23:23] <vdamewood> Much very spiffy
[01:23:50] *** Quits: howdoi (uid224@id-224.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:24:56] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[01:25:17] *** Joins: emptyleg (~emptyleg@104.28.116.138)
[01:26:09] *** Quits: asdfasdf (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[01:26:27] <madduck> SnoopJ: a fixture like this https://scratch.madduck.net/2021-10-05-105553-paste really would benefit from just letting me call yield 4 times in the body ;)
[01:26:28] *** Joins: pulsar12 (~pulsar12@2001:8a0:ed4b:3d01:a0f4:feaf:42e6:5ec3)
[01:28:01] *** Joins: transhumanist (~hiken@2601:196:8800:35f0:fc76:7281:9ad5:1b15)
[01:28:48] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[01:29:16] *** Quits: flyback (~flyback@2601:540:8201:1e60:25f0:86e0:2201:1375) (Ping timeout: 245 seconds)
[01:29:18] *** Quits: emptyleg (~emptyleg@104.28.116.138) (Quit: Client closed)
[01:29:29] *** Joins: doforlove33 (~doforlove@141.98.252.169)
[01:30:01] <transhumanist> hi I am generating this plot from ranges and at steps, how do I put a label on each step interval with values from x/y axis? https://pastebin.ubuntu.com/p/5J6q2xKP68/ If this is not the right place to ask, then let me know and thanks in advance!
[01:30:56] <vdamewood> Yay, it's up and running now.
[01:31:09] *** Quits: sbrown (~sbrown@66.44.16.44) (Quit: Leaving…)
[01:31:18] *** Joins: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053)
[01:31:28] *** Quits: philipp64|work (~philipp64@174.27.28.163) (Quit: philipp64|work)
[01:32:30] <NoImNotNineVolt> okay, i'm hoping i've gone down the rabbithole so far that this has become an xyproblem.
[01:32:48] <NoImNotNineVolt> maybe someone here can offer an alternate perspective.
[01:32:52] *** Joins: dulanic (~dulanic@47.187.144.163)
[01:33:55] <NoImNotNineVolt> i have some tooling i built in python that makes configuration changes somewhere. configuration is text, and sometimes has long, barely-readable lines. configuration changes can be subtle, and include a few small changes to a single very-long line.
[01:34:04] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 245 seconds)
[01:34:45] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[01:34:47] <NoImNotNineVolt> now, i'm trying to offer the user (often me) a few things. one, to visualize what changes are about to be made, clearly. at first i was using difflib.
[01:34:52] *** Joins: jonascj (~jonascj@5.186.121.200.cgn.fibianet.dk)
[01:35:10] <NoImNotNineVolt> but unified diffs are of limited value when a 300 char line has 5 chars added here and 2 chars removed there, etc.
[01:35:46] *** Joins: comet23 (~comet23@user/comet23)
[01:35:49] <NoImNotNineVolt> so this was helping me with config lines removed, or new lines added, it was of limited utility in seeing what was actually changed when it comes to those long lines...
[01:35:54] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 260 seconds)
[01:35:55] <NoImNotNineVolt> enter git's "word diff"
[01:35:57] <comet23> can someone explain what an attribute is in plan english
[01:36:02] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[01:36:29] <NoImNotNineVolt> so, i figured out how to make gitpython give me git word diffs, and these are way more readable in most cases...
[01:36:40] <NoImNotNineVolt> and i thought i was making progress...
[01:36:59] *** Quits: me_ (~me@90.244.150.142) (Quit: Lost terminal)
[01:37:12] *** Joins: Naan (~naan@user/naan)
[01:37:36] *** Joins: nergar (~quassel@177.225.147.106)
[01:37:44] <NoImNotNineVolt> but now i need to be able to "apply" these diffs. given the original configuration, and the diffs that my tooling outputs, to reconsititute the "new" configuration. but it turns out git's word diffs are somewhat ambiguous, and they can't reliably be applied to an input to reconstitute an output.
[01:37:57] <NoImNotNineVolt> any ideas?
[01:38:02] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[01:38:07] <NoImNotNineVolt> i'm thinking of doing something like https://github.com/git/git/tree/master/contrib/diff-highlight with my unified diffs
[01:38:18] <jonascj> Is `except Exception as e: print(e)` the way to catch unforeseen exceptions and get the exception message (for logging purposes)?
[01:38:22] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 252 seconds)
[01:38:23] <vdamewood> comet23: Do you mean you want the plan-english meaning of an 'attribute' or the Python meaning of an attribute with a plain-English definition?
[01:38:36] <NoImNotNineVolt> jonascj: that's what i do. or traceback.print_exc(ex)
[01:38:56] <comet23> vdamewood i mean i am having a really difficult time understanding what is meant by attribute
[01:39:16] <comet23> is there a much simpler word to describe it
[01:39:18] <NoImNotNineVolt> comet23: jonascj: it's a variable that's class static.
[01:39:38] <madduck> "g[3] = a if a or g[3]" → is there a better way to write this? "
[01:39:39] *** Quits: palasso (~palasso@user/palasso) (Read error: Connection reset by peer)
[01:39:45] <NoImNotNineVolt> google says "A class attribute is a Python variable that belongs to a class rather than a particular object."
[01:39:53] <madduck> "if a: g[3] = a" is slightly better I thought, but strill…
[01:39:54] <comet23> so it's a variable that is in a class and is always available with every instatiation NoImNotNineVolt?
[01:40:03] *** Joins: mat001 (~mat001@213.143.69.121)
[01:40:04] <NoImNotNineVolt> comet23: yea, and shared between them.
[01:40:25] <NoImNotNineVolt> well, that's a class attribute.
[01:40:27] <vdamewood> NoImNotNineVolt: Not quite. a 'class attribute' is class static. Instances can have attributes too.
[01:40:33] <NoImNotNineVolt> vdamewood: touche.
[01:40:48] <vdamewood> comet23: An attribute is a value that is 'part of' another value, in a sense.
[01:40:51] <comet23> but what about in the context of a list that has different types like lists, strings, and functions?
[01:41:15] <NoImNotNineVolt> those are all things of different classes.
[01:41:22] *** Joins: flyback (~flyback@2601:540:8201:1e60:880c:ecc2:34d8:d3)
[01:41:31] <vdamewood> attribute doesn't mean anything specific in the context of a list.
[01:41:32] <jonascj> NoImNotNineVolt: Alright,cheers
[01:41:35] *** Quits: XV8 (~XV8@2601:5cb:c001:50:78:e67a:19d1:b3c9) (Quit: Textual IRC Client: www.textualapp.com)
[01:41:40] <NoImNotNineVolt> so each of those classes may have their own class attributes. and each object of those classes may have its own instance attributes as well.
[01:41:59] *** Quits: seednode1 (~seednode@user/seednode) (Ping timeout: 245 seconds)
[01:42:03] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[01:42:16] <comet23> vdamewood a value that is part of what other value?
[01:42:18] <comet23> i'm confused
[01:42:23] *** Quits: Cache_Money (~Cache_Mon@c-67-160-112-6.hsd1.wa.comcast.net) (Quit: Client closed)
[01:42:36] <vdamewood> comet23: So, have you ever seen something like this: spam.eggs?
[01:42:43] <comet23> yes
[01:42:51] <vdamewood> spam is a value. eggs is an attribute of spam.
[01:43:09] <NoImNotNineVolt> spam is a name that refers to an object, probably.
[01:43:14] <vdamewood> spam can be a class, an instance of a class (an object), or (in python) mostly anything.
[01:43:18] <NoImNotNineVolt> objects can have attributes.
[01:43:50] <NoImNotNineVolt> eggs is probably an instance attribute of the spam object.
[01:44:18] <NoImNotNineVolt> if spam is a class and not an object, it's badly named :P
[01:44:33] <vdamewood> Not really.
[01:44:49] <NoImNotNineVolt> https://www.python.org/dev/peps/pep-0008/
[01:44:58] *** Quits: mat001 (~mat001@213.143.69.121) (Ping timeout: 252 seconds)
[01:45:05] <vdamewood> :P
[01:45:17] <NoImNotNineVolt> https://www.python.org/dev/peps/pep-0008/#class-names specifically.
[01:45:24] *** Joins: seednode1 (~seednode@user/seednode)
[01:45:26] <vdamewood> Don't confuse the newbie with extraneous details.
[01:45:34] <comet23> what about this context? https://bpa.st/NWFA
[01:45:54] *** Quits: darksun (~darksun@user/darksun) (Quit: Lost terminal)
[01:46:12] <nedbat> comet23: it's unusual for a list to have different types like that.
[01:46:15] <vdamewood> comet23: That doesn't really have anything to do with Python specifically.
[01:46:25] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:46:39] <NoImNotNineVolt> lists and strs have a count attribute. dicts and ints do not.
[01:47:09] <comet23> i'm more confused now than i was 10 minutes ago 😭
[01:47:40] <vdamewood> comet23: Well, it doesn't help that the value 'attributes' is confusingly named in there.
[01:47:47] <vdamewood> It should be called something like items.
[01:47:51] <NoImNotNineVolt> i agree.
[01:48:03] <SnoopJ> madduck, yea, I've used that intuitive-but-wrong spelling pretty much every time I want to do this. You could probably write a decorator that returns `pytest.fixture(params=list(wrapped()))` applied to a function that trivially returns `request.param`
[01:48:17] <nedbat> comet23: what is the root question here?
[01:48:29] <comet23> nedbat i'm trying to understand the word attribute
[01:48:43] <comet23> english isn't my first language
[01:48:47] <vdamewood> nedbat: It's a case of a new programming not understanding terminology.
[01:48:48] <NoImNotNineVolt> and isn't list.count a method? are methods just "function attributes" in python?
[01:48:56] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[01:48:58] <vdamewood> NoImNotNineVolt:Yes, they are.
[01:49:04] *** Quits: pulsar12 (~pulsar12@2001:8a0:ed4b:3d01:a0f4:feaf:42e6:5ec3) (Quit: Leaving)
[01:49:11] <SnoopJ> NoImNotNineVolt, they are "just" attributes, yea.
[01:49:16] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[01:49:20] <vdamewood> NoImNotNineVolt:Or rather, functions are fist-class objects, and therefore just normal attributes.
[01:49:47] <vdamewood> comet23: So, you see line 4 where it calls 'hasattr'?
[01:49:53] <NoImNotNineVolt> SnoopJ: then it's really weird to see them described as "methods", e.g. type(list.count)
[01:50:08] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 250 seconds)
[01:50:08] *** Joins: dre (~dre@2001:8003:c932:c301:bf2a:6b91:a200:3687)
[01:50:14] <SnoopJ> NoImNotNineVolt, there is *some* special treatment regarding the binding to the instance (i.e. passing `self`)
[01:50:24] *** Quits: manti7 (~manti7@185.107.94.249) (Quit: WeeChat 3.1)
[01:50:31] <NoImNotNineVolt> yea, but that's more a question of calling semantics, i think.
[01:50:35] *** Joins: Maikel (~Maikel@130.61.63.136)
[01:50:43] <comet23> yes vdamewood
[01:50:48] <NoImNotNineVolt> either way, my objection is more about nomenclature consistency :P
[01:50:58] <SnoopJ> NoImNotNineVolt, it's a separate bytecode instruction in CPython, a little more nuanced than what I think you mean by "calling semantics"
[01:51:05] <KirkMcDonald> An attribute is anything you access with the `.`.
[01:51:11] <NoImNotNineVolt> SnoopJ: perhaps.
[01:51:12] *** Quits: Dotz0cat (~Dotz0cat@h235.187.39.162.dynamic.ip.windstream.net) (Read error: Connection reset by peer)
[01:51:13] <SnoopJ> The load is separate, I mean. `foo.bar()` emits LOAD_METHOD
[01:51:22] <vdamewood> comet23: That function takes its first argument, and test whether that argument has an attribute called whatever is in the second argument.
[01:51:23] <SnoopJ> but `foo.bar` emits LOAD_ATTR
[01:51:43] *** Quits: bronsen (~bronsen@2a04:d480:0:1::3) (Ping timeout: 252 seconds)
[01:51:49] * NoImNotNineVolt has never looked under the hood
[01:51:51] <SnoopJ> (and I think LOAD_METHOD behaves like LOAD_ATTR if it's not actually a bound method, just some callable?)
[01:51:52] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[01:51:53] <comet23> is an attribute a value? if it is why not just call it value instead?
[01:52:02] <vdamewood> comet23: So if you try hasattr(3, "__str__"), it checks if 3 has an attribute called __str__.
[01:52:08] <KirkMcDonald> The bytecode instructions don't really map directly to what the syntax is called.
[01:52:09] <NoImNotNineVolt> comet23: an attribute is a value that "belongs to" something.
[01:52:10] <SnoopJ> comet23, because it is associated with an object, and not all values are.
[01:52:26] <comet23> OH
[01:52:34] <comet23> thank you very much everyone
[01:52:35] <SnoopJ> KirkMcDonald, no, I hope that isn't how I came across. More like motivating why we care about them as a distinct class of things at all
[01:52:46] <NoImNotNineVolt> in `foo.bar`, bar is an attribute of foo. `bar` by itself isn't an attribute of anything.
[01:52:48] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[01:53:04] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[01:53:36] <KirkMcDonald> SnoopJ: I mean, we don't care about it because the bytecode instructions are thus; the bytecode instructions are thus because it's an operation we care about.
[01:53:42] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[01:54:05] <SnoopJ> KirkMcDonald, yes, this is the perspective I was trying to bring to the discussion ("this here instruction exists because this distinction *is* meaningful")
[01:55:12] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:55:14] <KirkMcDonald> And we care about methods because that's one of the basic elements of how object-oriented programming works. Or at least how it works in Python.
[01:55:37] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e058-2cd1-f59d-84bf.res6.spectrum.com) (Read error: Connection reset by peer)
[01:55:59] *** Joins: Dotz0cat (~Dotz0cat@h63.70.29.71.dynamic.ip.windstream.net)
[01:56:32] <SnoopJ> madduck, ah, what I thought of does in fact work: https://bpa.st/4ZDQ
[01:57:44] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[01:57:51] <SnoopJ> madduck, but note that you are giving up a pretty big part of fixtures in doing this, because you can't really do setup/teardown around the test call like this. There's potentially a more sophisticated way to do it that involves digging into the meat of pytest, but this works if you don't care about that.
[01:59:25] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:9f10:64cd:ab5c:5b68) (Ping timeout: 252 seconds)
[01:59:58] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[02:00:14] *** Quits: ElPresidente (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net) (Quit: Leaving)
[02:00:31] *** Joins: ElPresidente (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net)
[02:02:31] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:03:08] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[02:03:37] *** Joins: djapo (~archangel@user/djapo)
[02:05:48] *** Joins: cjb (~cjb@user/cjb)
[02:06:22] *** Joins: Atque (~Atque@user/atque)
[02:06:34] *** Quits: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca) (Ping timeout: 252 seconds)
[02:08:55] <nyuszika7h> does anyone know if there's a Python 3.10 syntax highlighting plugin for (neo)vim yet?
[02:09:05] *** Quits: stevea (~stevea@user/stevea) (Quit: Either I or my computer has gone to sleep. ZZZzzz…)
[02:09:22] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:11:58] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 252 seconds)
[02:12:43] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[02:13:04] <BtbN> Is there that much new stuff that the normal Python one does not work?
[02:15:03] *** Quits: jonascj (~jonascj@5.186.121.200.cgn.fibianet.dk) (Quit: Connection closed)
[02:15:27] <SnoopJ> probably an older highlighter will work on things that aren't using structured pattern matching
[02:15:29] *** Joins: bukata (~lev@user/bukata)
[02:15:49] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[02:16:02] <SnoopJ> the other thing I can think of that might be a point of divergence is parentheses around multiple context managers
[02:16:19] *** Quits: seednode1 (~seednode@user/seednode) (Quit: Ping timeout (120 seconds))
[02:17:28] <nyuszika7h> yeah talking about `match` mainly
[02:17:34] <nyuszika7h> though it doesn't break horribly, just a little ugly
[02:17:40] <nyuszika7h> to not have it highlighted
[02:17:49] <grym> tree-sitter has yet to update
[02:17:58] <nyuszika7h> eh actually I can probably hack it together myself to highlight `match` and `case`
[02:18:08] *** Joins: mat001 (~mat001@213.143.69.121)
[02:18:14] <nedbat> nyuszika7h: it's kind of hard to get completely right
[02:18:17] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[02:18:31] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[02:19:23] *** Quits: BlessJah (~BlessJah@user/blessjah) (Ping timeout: 246 seconds)
[02:19:35] *** Quits: Samian (~Sami@user/samian) (Quit: Textual IRC Client: www.textualapp.com)
[02:19:37] <nyuszika7h> https://bpa.st/4S6Q eh, good enough for now
[02:19:41] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[02:19:58] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:6d81:11e:6bd1:61da)
[02:19:59] <nedbat> nyuszika7h: what happens to `re.match`?
[02:20:08] <nyuszika7h> good point
[02:20:14] <nyuszika7h> that gets highlighted by this too
[02:20:18] *** Joins: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[02:21:09] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 245 seconds)
[02:21:29] *** Joins: BlessJah (~BlessJah@user/blessjah)
[02:22:10] * SnoopJ isn't sure how much weight is meant to be borne by this bodge
[02:22:25] *** Quits: mat001 (~mat001@213.143.69.121) (Ping timeout: 252 seconds)
[02:23:48] *** Joins: Samian (~s@user/samian)
[02:23:57] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:24:05] <jayvee> energizer, Yhg1s, deniska, hexnewbie, etc.: thanks for your help yesterday. I ended up getting my project working. I still have a lot of room to grow in async stuff but you helped me grasp it a bit better!
[02:24:44] *** Quits: vimart (~vimart@85.255.232.42) (Quit: WeeChat 2.8)
[02:25:49] <nyuszika7h> this is looking better:  syn match pythonConditional '\(^\|\s*\)\(match\|case\)\(\s*[=.]\)\@!'
[02:26:49] <energizer> jayvee: great. i'm curious what you ended up with if you feel like sharing
[02:27:17] <nyuszika7h> the fact that match(x) can be either a function call or the beginning of match(x): complicates things though
[02:27:26] <jayvee> energizer: sure, I'll pastebin it when I power on my personal computer later today. I'm almost embarrassed at its simplicity, though.
[02:27:37] <jayvee> like I said, it's effectively a hello-world http server
[02:28:10] <energizer> jayvee: yknow, the Zen of Python says "Simple is better than complex"
[02:28:21] <nyuszika7h> version 3:  syn match pythonConditional '\(^\|\s*\)\(match\|case\)\(.*:$\)\@=
[02:28:25] *** Quits: gitly (~gitly@148.252.128.127) (Ping timeout: 252 seconds)
[02:28:25] <SnoopJ> nyuszika7h, yea, getting it totally right is a trick, and probably involves doing a good deal of the work a parser would.
[02:28:29] <energizer> can't say asyncio particularly conforms to that, but hey
[02:28:34] <jayvee> lol yeha
[02:28:40] <jayvee> yeah, even
[02:28:49] <nyuszika7h> this will break if there's a comment after I suppose
[02:29:52] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:f5f6:654c:dc92:c571) (Quit: Konversation terminated!)
[02:29:57] <grym> yeah, regex-based syntax highlighting does hit a wall after a certain point.  There's a relative dearth of tools that do it better and are also more or less editor-agnostic
[02:30:07] <grym> (the one i know of does not yet support 3.10 syntax)
[02:30:23] <grym> pylance might, but i haven't checked
[02:30:26] <nyuszika7h> well, now this handles trailing comments:  syn match pythonConditional     '\(^\|\s*\)\(match\|case\)\(.*:\s*\(#.*\)\?$\)\@='
[02:30:27] *** Joins: gitly (~gitly@148.252.128.64)
[02:31:07] <nyuszika7h> vim regex syntax is a bit painful since it's based on POSIX basic regex where \ *enables* special behavior for some symbols
[02:31:18] *** Quits: nullheroes (~nullheroe@168.235.66.22) (Quit: WeeChat 2.3)
[02:31:43] <SnoopJ> well, there's a toggle for that, but that's more topical in #vim I think :)
[02:31:48] *** Quits: Ivii (~Ivyy@2001:a61:13f1:cb01:e349:8e32:6c5c:425) (Remote host closed the connection)
[02:32:08] <nyuszika7h> true, was just too lazy to figure out how lookahead works with verymagic, but let's not go too off topic here
[02:32:22] <SnoopJ> I'd say kludge as far as you need to in order to support whatever you're looking at until the plugin you like updates
[02:32:49] <nyuszika7h> yeah it's just for personal use mainly so I'll just adjust it if I notice more breakage
[02:33:05] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:34:29] *** Quits: bukata (~lev@user/bukata) (Ping timeout: 245 seconds)
[02:34:44] *** Quits: extropiator (~extropiat@user/extropiator) (Ping timeout: 256 seconds)
[02:35:40] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[02:38:28] *** Quits: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) (Client Quit)
[02:38:52] <doc> anyone got advice on how to estimate a project for a python 2 -> python 3 upgrade?
[02:38:58] <doc> I haven't done one before
[02:41:41] <aphysically> I wonder if a "match for" would be interesting
[02:42:03] <aphysically> could reduce unneeded indention in a lot of cases, but maybe not something people would like
[02:42:20] <Pilate> number of places you touch binary data * amount of time it takes to fix and test those paths = estimate
[02:42:39] <Pilate> most stuff is easy if youre not trying to switch to async
[02:42:46] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[02:42:54] <doc> yeah, I think that's out of scope
[02:43:19] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed) (Quit: Leaving)
[02:43:32] <Pilate> 2to3 will get you a good idea of the non-encoding changes
[02:43:57] <nyuszika7h> just don't run 2to3 -w multiple times without -p :D
[02:44:04] <nyuszika7h> or you'll end up with print((((('Hello World')))))
[02:44:09] <Pilate> lol
[02:44:15] *** Joins: Wulf (~Wulf@user/wulf)
[02:45:04] <SnoopJ> doc, run it through `modernize` to get a rough sense (it's wrapped around lib2to3 with some quality of life stuff)
[02:45:32] <doc> thanks for that everyone, will give those a spin
[02:45:42] *** Quits: Samian (~s@user/samian) (K-Lined)
[02:46:01] <doc> another part of it is getting from 85% unit tests to 100%. That's a scary bit. There's a reason they stopped short of those last 15% :)
[02:46:06] *** Joins: Barones (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14)
[02:46:09] <doc> *coverage
[02:46:40] *** Joins: athar_ (~alphasier@49.36.98.115)
[02:46:41] *** Quits: Madda (~Madda@227.249.9.51.dyn.plus.net) (Ping timeout: 246 seconds)
[02:46:46] <SnoopJ> the Pareto principle applies to test coverage too :)
[02:47:11] * SnoopJ doesn't usually have 100% for units, but tries to at least get close with end-to-end testing
[02:47:27] <doc> hah
[02:47:49] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 245 seconds)
[02:47:55] <doc> the best argument I've seen against <100% coverage is "which parts of your codebase are you ok with not working?"
[02:49:52] <SnoopJ> "Program testing can be used to show the presence of bugs, but never to show their absence!" - Edsger Dijkstra
[02:50:11] *** Quits: alphasierra (~alphasier@2405:201:e:4d:f936:2947:7527:2361) (Ping timeout: 246 seconds)
[02:50:14] <doc> 100% true, but it also makes you think about them more!
[02:50:23] <doc> and write code better to avoid them
[02:50:26] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[02:50:37] <doc> s/write/rewrite
[02:50:55] <SnoopJ> Yep, helpful way to think "off the happy path"
[02:51:00] <doc> yep
[02:51:24] <aphysically> zI don't *think* "match for" would break anything but that kind of thing might be contentious I'd guess
[02:52:38] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed)
[02:52:41] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:52:48] <SnoopJ> aphysically, what would it offer over a `match` clause inside a `for` clause?
[02:52:58] <aphysically> the indention
[02:53:00] <aphysically> :D
[02:54:31] <aphysically> is that silly to be thinking about in your view? I was just looking at my toy class for possible use cases https://bpa.st/TRYQ
[02:55:01] <SnoopJ> my editor lets me have another layer of indentation for free, YMMV :)
[02:55:58] <SnoopJ> less flippantly, I would prefer to know about two features that can be combined, than to know about 2 which might be combined *and* a dedicated spelling of the combination, unless there were some compelling advantage to motivate the special spelling.
[02:56:26] <jinsun> how do you free indentation with your editor?
[02:56:40] *** Leonarbro_ is now known as Leonarbro
[02:56:44] <SnoopJ> aphysically, I could always write `for item in (mymatch(obj) for obj in iterable):` for instance to save the level of indentation (effectively stashing it behind that named function)
[02:57:14] <SnoopJ> or perhaps it'd be `for item in filter(mymatch, iterable):`
[02:57:33] *** Joins: emf_ (~emf@2620:10d:c090:400::5:9346)
[02:57:44] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[02:58:48] *** Joins: c10l (~c10l@user/c10l)
[02:59:48] *** Joins: fikran (~fikran@user/fikran)
[03:00:50] *** Quits: emf (~emf@2620:10d:c090:400::5:103e) (Ping timeout: 260 seconds)
[03:01:05] *** Joins: athar97 (~alphasier@2405:201:e:4d:1c4:3d72:30e8:2837)
[03:01:09] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:01:09] *** Quits: junktext (~junktext@109.201.152.163) (Ping timeout: 245 seconds)
[03:01:55] <jinsun> ah stupid question, I was thinking fancy stuff somehow :D
[03:02:06] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[03:02:37] *** Joins: philipp64|work (~philipp64@174.27.28.163)
[03:04:00] *** Joins: y1n-v1 (~y1n@178.115.42.243.wireless.dyn.drei.com)
[03:04:28] *** Quits: arseru (uid515527@user/arseru) (Quit: Connection closed for inactivity)
[03:04:48] *** Quits: emf_ (~emf@2620:10d:c090:400::5:9346) (Quit: emf_)
[03:04:54] *** Quits: athar_ (~alphasier@49.36.98.115) (Ping timeout: 245 seconds)
[03:04:54] *** Quits: philipp64|work (~philipp64@174.27.28.163) (Remote host closed the connection)
[03:05:32] *** Joins: philipp64|work (~philipp64@174.27.28.163)
[03:05:56] <jinsun> I also hadsimilar thoughts about match extensions, like try match
[03:05:58] *** Quits: transhumanist (~hiken@2601:196:8800:35f0:fc76:7281:9ad5:1b15) (Ping timeout: 250 seconds)
[03:05:58] *** Quits: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net) (Ping timeout: 250 seconds)
[03:07:31] *** Quits: nergar (~quassel@177.225.147.106) (Ping timeout: 252 seconds)
[03:07:32] <jinsun> then exception would be one of the cases
[03:07:35] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed) (Quit: Leaving)
[03:07:51] <jinsun> similar to try with in F# https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/exception-handling/the-try-with-expression
[03:07:55] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[03:08:00] *** Joins: elkclone (~elkclone@user/elkclone)
[03:10:15] <jinsun> although python's match is limited by very few things possible in a single expression
[03:11:09] <jinsun> but we can always wrap up statements inside functions and call the function in the match
[03:12:04] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[03:12:42] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:12:59] *** Joins: VlanX (~sysadmin@151.46.69.74)
[03:13:34] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[03:13:34] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[03:13:43] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:14:48] *** Joins: arinov (~arinov@213.194.126.155)
[03:14:52] *** Joins: rapier (~marcos@170.233.159.1)
[03:15:56] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:16:02] <VlanX> hello, I am very newb. Could somebody help me figuring out why is that if i call function a() it only prints the variable one time and then I get "name not defined" as error?
[03:16:03] *** Joins: HaMsTeRs (~mx@121.203.226.186)
[03:16:07] <VlanX> The code is this one: https://bpa.st/I6AQ
[03:16:27] *** Parts: tusko (~yeurt@copyfree/advocate/tusko) (Byeee)
[03:17:17] <HaMsTeRs> whatsup with the world.  facebook, whatsapp, and hotmail owa are all down
[03:18:01] <Yhg1s> VlanX: because 'var1' only exists in the 'a' function, not in the 'b' function. The 'b' function can't use var1.
[03:18:10] <hacksword> VlanX: variable scope os biting you here
[03:18:16] <hacksword> is*
[03:18:44] <VlanX> SO in this case i should define it as global variable?
[03:18:51] <VlanX> if that makes any sense
[03:18:58] <stewie925> FB down today after it was featured last night at 60 Minutes LOL
[03:19:08] <Yhg1s> you could, but you probably shouldn't. You should either not use a separate function, or pass arguments to the separate function.
[03:19:11] <stewie925> *on 60 Minutes
[03:19:11] <HaMsTeRs> also hotmail
[03:19:23] <jinsun> VlanX: or make b take var1 as a parameter
[03:19:32] <Yhg1s> stewie925, HaMsTeRs: this isn't really the place.
[03:19:42] *** Quits: jetchisel (jetchisel@user/jetchisel) (Client Quit)
[03:19:52] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:20:03] <stewie925> sorry
[03:20:24] <VlanX> Yhg1s, jinsun ok thanks guys!
[03:21:08] <HaMsTeRs> https://portal.office.com/servicestatus  i need to work
[03:21:23] *** Joins: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net)
[03:21:40] *** Joins: extropiator (~extropiat@user/extropiator)
[03:24:36] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[03:26:05] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[03:27:49] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 245 seconds)
[03:29:46] *** Joins: Nspace (~Nspace@2a02:169:4dee:0:91e9:c3fc:e6b4:a0f5)
[03:31:10] *** Quits: HaMsTeRs (~mx@121.203.226.186) (Ping timeout: 252 seconds)
[03:31:16] *** Joins: ItsLandon (~quassel@2601:1c0:6d03:1cb0:b5ce:612d:d932:999)
[03:32:59] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[03:33:15] <ItsLandon> Hi :) are there any problems with me importing at the end of my python file? I've got a function I want to run if I'm unable to import a module. However, the function cannot be found because it's not loaded yet if I put the import at the top
[03:33:36] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[03:33:36] <ItsLandon> I'm doing a try: import foo; except: function()
[03:34:42] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[03:34:54] *** Quits: jgrout (~jgrout@pool-71-174-224-95.bstnma.fios.verizon.net) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[03:35:09] <energizer> ItsLandon: that's fine but use `except ImportError` not just except
[03:35:46] <energizer> ItsLandon: also you might want to do `foo = None` for some reason that i can't explain
[03:36:46] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[03:37:01] <ItsLandon> Right, I was being terse for the sake of brevity. I'm catching "ModuleNotFoundError" since that's what's being thrown
[03:37:23] *** Quits: sagax (~sagax_nb@user/sagax) (Remote host closed the connection)
[03:37:40] <ItsLandon> energizer: would `import foo = None` prevent the script from returning early if foo is not importable?
[03:38:02] <dman777> response = table.get_item(**args) If I do not have access to the get_item() function, is it possible to print(**args) to see what the args are before that line?
[03:38:12] <jinsun> ItsLandon: are you going to use foo that you import anywhere in the module?
[03:38:24] <grym> dman777: print(args) will work fine
[03:38:55] <dman777> ok, thanks
[03:39:27] <ItsLandon> jinsun: yes. I'm pip-installing the unfound module if it's not present. If pip is not present, I will be bootstrapping pip and then installing the module.
[03:39:59] <grym> ItsLandon: is there a reason you're not specifying dependencies in one of the normal ways
[03:40:10] <ItsLandon> What are the normal ways?
[03:40:23] *** Joins: sbrown (~sbrown@66.44.16.44)
[03:40:34] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[03:40:51] *** Quits: Nspace (~Nspace@2a02:169:4dee:0:91e9:c3fc:e6b4:a0f5) (Changing host)
[03:40:51] *** Joins: Nspace (~Nspace@user/nspace)
[03:41:08] <ItsLandon> This is for a LibreOffice document that's running a python script rather than VBA. I'm doing these things in this way because I want to share it with people who might not know anything about python and still let them use the script
[03:41:30] *** Joins: KombuchaKip (~kip@192.252.230.5)
[03:41:53] <energizer> ItsLandon: it would be `try: import foo; except ImportError: foo = None`. I'm not sure there are any actual benefits to do that but for some reason I feel like I'm supposed to
[03:42:09] <ItsLandon> The Windows LibreOffice distribution doesn't seem to distribute pip,  so I'm bootstrapping it if they don't have it.
[03:42:13] *** Joins: athar_ (~alphasier@2405:201:e:4d:1c4:3d72:30e8:2837)
[03:42:18] <grym> ItsLandon: a zipapp, maybe
[03:42:23] <energizer> libreoffice supports python?!?
[03:42:27] <ItsLandon> Yep
[03:42:38] <grym> ItsLandon: or something like shiv, which is zipapp+deps
[03:42:45] <ItsLandon> grym: I'm not entirely sure what this is.
[03:43:03] <grym> ItsLandon: it's a file that is a script plus all its dependencies
[03:43:15] <ItsLandon> energizer: it's kind of a pain in the ass but it seems to work pretty well
[03:43:27] <energizer> shiv includes all the deps except python
[03:43:30] <ItsLandon> grym: is that what the pip bootstrap scipt uses?
[03:43:37] <grym> ItsLandon: no idea
[03:43:43] <grym> you mean ensurepip? no
[03:44:03] <ItsLandon> This: https://bootstrap.pypa.io/get-pip.py
[03:44:04] <grym> ItsLandon: i am suggesting you distribute your libreoffice plugin as a shiv'd file
[03:44:13] <ItsLandon> This isn't a plugin though.
[03:44:15] <grym> and then you dont' have to check
[03:45:12] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:45:23] *** Quits: athar97 (~alphasier@2405:201:e:4d:1c4:3d72:30e8:2837) (Ping timeout: 268 seconds)
[03:46:00] <ItsLandon> I'll just leave it be for now I think
[03:46:11] <ItsLandon> If it gets to be necessary to do this, then I'll do it
[03:46:16] *** Quits: dman777 (~dman777@76-253-74-225.lightspeed.austtx.sbcglobal.net) (Remote host closed the connection)
[03:47:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[03:48:07] *** wereii_ is now known as wereii
[03:48:18] *** Quits: ItsLandon (~quassel@2601:1c0:6d03:1cb0:b5ce:612d:d932:999) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:49:16] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 252 seconds)
[03:49:38] *** Joins: ItsLandon (~quassel@2601:1c0:6d03:1cb0:b5ce:612d:d932:999)
[03:50:26] *** Quits: Karsteski (~Karsteski@209.202.222.36) (Quit: Leaving)
[03:51:24] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d)
[03:52:07] *** Quits: ItsLandon (~quassel@2601:1c0:6d03:1cb0:b5ce:612d:d932:999) (Client Quit)
[03:54:24] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[03:54:52] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[03:55:27] <byte4byte> jim is python better than php?
[03:57:13] <nedbat> byte4byte: do you mind a PM?
[03:57:45] <byte4byte> yes
[03:58:52] <nedbat> byte4byte: ok, then we can talk here.  please stay on-topic, and don't harass people.
[03:59:03] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed)
[03:59:31] <byte4byte> jim was teaching me python
[03:59:35] <byte4byte> but it was so hard
[04:00:19] <nedbat> byte4byte: jim doesn't want to talk, you should leave him alone. and yesterday you said you were getting threatening messages from jim
[04:00:55] <byte4byte> i thought it was jim but it was someone with a 1 instead of i
[04:01:48] <nedbat> byte4byte: in any case, please stop pinging him.  he doesn't want to talk.
[04:03:38] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed) (Client Quit)
[04:06:38] <rannnn8888> Someone know where i wrong its not group by ? https://bpa.st/A6OA
[04:06:43] <rannnn8888> by 5 minutes
[04:08:56] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[04:09:31] *** Joins: emf (~emf@2620:10d:c090:400::5:addd)
[04:09:32] *** Joins: srhm (~srhm@user/srhm)
[04:09:58] *** Joins: chenqisu1 (~xirndc@183.217.201.186)
[04:10:23] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d) (Remote host closed the connection)
[04:10:58] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:11:16] *** Quits: flokuehn (~flokuehn@i5e86b393.versanet.de) (Ping timeout: 252 seconds)
[04:12:51] *** Joins: flokuehn (~flokuehn@i5E86B39C.versanet.de)
[04:14:14] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed)
[04:15:16] *** Joins: yaalon (~yaalon@75-35-90-51.lightspeed.snantx.sbcglobal.net)
[04:20:10] *** Quits: emf (~emf@2620:10d:c090:400::5:addd) (Ping timeout: 260 seconds)
[04:21:53] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[04:22:49] *** Joins: gbear605_ (~gbear605@user/gbear605)
[04:22:53] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[04:24:02] *** Joins: drew (~drew@user/drew)
[04:25:13] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[04:25:46] *** Quits: gbear605 (~gbear605@user/gbear605) (Ping timeout: 260 seconds)
[04:28:17] *** Joins: gggp (~textual@111.63.14.119)
[04:30:26] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:31:49] *** Quits: MrC (Ben@mrbenc.net) (Remote host closed the connection)
[04:33:12] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:33:13] *** Joins: MrC (Ben@mrbenc.net)
[04:33:47] *** Joins: Linux77 (~Linux7_7@186.233.182.243)
[04:33:47] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Quit: They told me they fixed it. I trusted them to fix it. It's not my fault!)
[04:33:48] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:34:35] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[04:34:54] *** Joins: vlm (~vlm@user/vlm)
[04:36:34] *** Quits: RougeR (~rougex250@user/rouger) (Ping timeout: 252 seconds)
[04:36:34] *** Quits: gggp (~textual@111.63.14.119) (Ping timeout: 245 seconds)
[04:36:43] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:37:50] *** Joins: gggp (~textual@60.10.194.45)
[04:38:20] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 246 seconds)
[04:38:52] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[04:38:55] *** Quits: nrg (~NRG@user/nrg) (Ping timeout: 252 seconds)
[04:39:34] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[04:39:59] *** Quits: yaalon (~yaalon@75-35-90-51.lightspeed.snantx.sbcglobal.net) (Remote host closed the connection)
[04:40:36] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d)
[04:41:29] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[04:41:43] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d) (Remote host closed the connection)
[04:41:58] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d)
[04:41:59] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:95dd:8480:cf57:ad4d) (Remote host closed the connection)
[04:42:37] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[04:45:25] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[04:45:54] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[04:46:42] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[04:47:24] *** Quits: gitly (~gitly@148.252.128.64) (Ping timeout: 245 seconds)
[04:49:06] *** Joins: grandrew (~grandrew@c-73-71-100-231.hsd1.ca.comcast.net)
[04:49:30] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:49:31] *** Joins: gitly (~gitly@148.252.132.201)
[04:49:49] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 252 seconds)
[04:50:04] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:50:39] *** Joins: brabrax (~brabrax@user/brabrax)
[04:50:57] <SnoopJ> anybody know if the talks from the 2021 language summit were recorded? Specifically Matthias Klose's talk
[04:51:48] *** Joins: Madda (~Madda@216.51.198.146.dyn.plus.net)
[04:52:53] <SnoopJ> the notes on the PSF blog are good, but it would be interesting to hear the details it's glossing over (especially w/r/t the licensing problems)
[04:54:31] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:54:35] <grandrew> why is python evolving into more type-hinting and not more duck-typing?
[04:54:48] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[04:55:16] <SnoopJ> grandrew, the two aren't mutually exclusive
[04:55:21] <InPhase> grandrew: Because you cannot effectively scale to larger programs without being able to impose type restrictions.
[04:55:50] <SnoopJ> InPhase, does that mean nobody wrote "effective" large Python programs before mypy? :)
[04:55:52] <InPhase> grandrew: The freedom and looseness that makes Python so appealingly convenient at the small scales is a huge disaster at larger scales.
[04:55:52] <grandrew> InPhase, I guess dependent types theory thinks different?
[04:56:10] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:56:49] <InPhase> SnoopJ: Carefully chosen "effectively scale" means that it takes disproportional amounts of effort to validate correctness and track down inevitable bugs once something gets large without being able to enforce constraints.
[04:56:51] <grandrew> I believe the general idea behind dependent types is like "the more code you have the more constraints are naturally there"
[04:57:06] <SnoopJ> InPhase, does that mean yes or no
[04:57:08] <grandrew> that's why C++ can have the 'auto' type no problem?
[04:57:22] <InPhase> SnoopJ: It means no, that this is not what I said.
[04:57:36] *** Joins: aknot (~aknot@2603:900a:1503:17bb:d129:1826:3135:4603)
[04:57:39] <SnoopJ> InPhase, how can this be, if it is not possible without the restrictions?
[04:57:47] <InPhase> SnoopJ: Because that's not what I said.  :)
[04:58:12] <SnoopJ> InPhase, help me fill in the gap here, because "you cannot effective scale" reads to me this way
[04:58:35] <InPhase> -->  SnoopJ: Carefully chosen "effectively scale" means that it takes disproportional amounts of effort to validate correctness and track down inevitable bugs once something gets large without being able to enforce constraints.
[04:59:01] <SnoopJ> InPhase, in other words, effectiveness is determined by the proportion?
[05:00:06] <InPhase> SnoopJ: No, that the work involved becomes too large, meaning that Python is not an effective choice for large programs without being able to apply strict constraints.
[05:00:16] <grandrew> I believe InPhase meant that as Python is being increasingly used for more critical code the priority is to focus on detecting bugs early rather than developing more easily?
[05:00:28] <SnoopJ> InPhase, but this doesn't imply that nobody was effective before this tool existed because...?
[05:00:41] <InPhase> SnoopJ: You can write a huge program in machine language, or BASIC, or anything really.  Just many of these choices are bad choices that become very hard to work with, meaning it's not an effective choice.
[05:00:46] <SnoopJ> grandrew, their point is a valid one, I just think they're overstating it :)
[05:01:02] <SnoopJ> which may come down to what we think "effective" means
[05:01:16] <mefistofeles> yeha, semantics :)
[05:01:30] *** Quits: extropiator (~extropiat@user/extropiator) (Ping timeout: 256 seconds)
[05:01:49] <grandrew> are we discussing a PEP here? (: I don't see any lawyers!
[05:01:58] <InPhase> SnoopJ: Think more "cost-effective", or "time-effective", or "effort-effective".
[05:02:15] <SnoopJ> InPhase, if I understand you right, nobody achieved any one of those before type annotations took off?
[05:02:50] <SnoopJ> To be sure, things are better with them than without, but...
[05:03:19] *** Quits: drew (~drew@user/drew) (Quit: Quit)
[05:04:11] <grandrew> well I propose that more duck-typing and some machine-learning will get to all of those "effective"
[05:04:15] <SnoopJ> grandrew, it's hard to make direct comparisons to languages with static type systems because annotations are so "a la carte." They aren't even necessarily about formal verification, some libraries use them for other purposes.
[05:04:30] <grandrew> and more strict-typing will get to more of going back to 1970s
[05:04:47] <SnoopJ> although the best of those do it in a way that doesn't rule out static analysis
[05:04:59] <mefistofeles> Python typing is still the same before and after type annotations, not sure what you mean there, grandrew
[05:05:16] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[05:05:56] <grandrew> I mean, introducing typing into Python _feels_ like going backwards from the fun Python originally was
[05:06:16] <InPhase> grandrew: Strict typing is not regressive.  Many very modern languages impose even stricter typing than languages of the 1970s.
[05:06:28] <mefistofeles> grandrew: Python is and has alwas been strongly typed
[05:06:34] <SnoopJ> on top of type annotations being _annotations_
[05:06:42] <SnoopJ> (they do not in any way change the type system, as mefistofeles pointed otu)
[05:06:43] <InPhase> grandrew: It's more that languages have split a bit into two purposes, where typing is loose and where it is strict.
[05:06:50] <grandrew> and for the "Python 4.0" I would rather like to see features that would introduce even more ambiguity in the code and smart resolving mechanisms
[05:06:55] *** Quits: ElPresidente (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net) (Quit: Leaving)
[05:06:58] <InPhase> mefistofeles: That is a claim about Python that is never said outside of Python communities.  :)
[05:07:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[05:07:08] *** Joins: ElPresidente (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net)
[05:07:19] <SnoopJ> This does not mean the claim is wrong, it may mean there's a communication problem.
[05:07:22] *** Joins: drew (~drew@user/drew)
[05:07:47] <SnoopJ> oh, you mean the "strong" claim. I guess it's a problem either way, heh
[05:08:16] <mefistofeles> duck-typing != dynamic typing, I think that's where the communication issue arises
[05:08:31] <Roey> Congratulations on the 3.10 release!!!!!!!!!!
[05:08:41] <InPhase> The definition of "strongly typed" that most of the field uses does not really apply to Python.  Python communities sometimes use it to mean "everything has a type".  And sure, it has a type, and there's absolutely no enforcement of this.
[05:08:56] <aphysically> I feel like sometimes strong vs weak and static vs dynamic typing are conflated intentionally in some contexts or out of principle, or because I'm not invested enough in the discussion to read between the lines of what people are complaining about sometimes
[05:09:00] <InPhase> Unless you go and manually do it, or use one of the newfangled type annotation things.
[05:09:03] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[05:09:08] *** Joins: fikran (~fikran@user/fikran)
[05:09:30] <mefistofeles> aphysically: yes
[05:09:34] <grym> InPhase: `5 + "foo"` sure does fail though
[05:09:51] <KirkMcDonald> In practice, Python's "strong typing" means you can't just add a string to a number, yeah.
[05:10:08] <KirkMcDonald> That's usually what it refers to, to make a contrast with JavaScript or PHP.
[05:10:10] <grandrew> grym, and it well should
[05:10:24] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[05:10:31] <grym> unlike, say, javascrtip
[05:10:41] <InPhase> grym: Weak typing also doesn't mean all operations are defined.
[05:10:47] <grym> where "10" + 1 and "10" - 1 do _very_ silly things, imo
[05:11:03] <grandrew> haha right 5 + "string" doesn't seem to affect the popularity of some languages
[05:11:12] *** Quits: vsantana (~vsantana@177.136.149.171) (Ping timeout: 250 seconds)
[05:11:23] <mefistofeles> Pytohn is strongly typed, it just isn't static, I don't see issues with that claim
[05:11:31] <SnoopJ> InPhase, it means whatever the person wielding it means. In my experience, it is wielded in malice far more often than it isn't.
[05:11:32] <mefistofeles> *Python
[05:11:45] <SnoopJ> grandrew, did we address your question?
[05:11:49] <mefistofeles> lol
[05:11:51] <grandrew> alright. my question was why isn't there a move to even more dynamic and duck-y stuff?
[05:12:14] <nedbat> grandrew: what would more duck typing look like?
[05:12:21] <grandrew> it's like everyone forgot why non-core-python-developers love python in the first place
[05:12:22] <KirkMcDonald> In the general programming language ecosystem, you mean?
[05:12:23] <SnoopJ> grandrew, it seems as though you think type annotations represent a change in Python's typing. They absolutely don't. I don't know how you can get more dynamic/duck-y than present, though.
[05:12:27] <mefistofeles> grandrew: that would be changing the typing system in Python, which virtually would make it a whole different language
[05:12:42] <mefistofeles> imho
[05:13:00] <KirkMcDonald> Or is the question, why has Python seemed to pivot to static type annotations, rather than just continuing to embrace dynamicism?
[05:13:15] * aphysically opens up browser console and does console.log("lol"+10)
[05:13:30] <grandrew> as I said, I propose stuff like `obj_a.b.add(1)` to implicitly and automatically mean b is a set without explicit class definition
[05:13:35] <aphysically> I don't know what I expected
[05:13:39] <mefistofeles> aphysically: haha
[05:13:56] <nedbat> grandrew: how would it know to make b a set, rather than some other type that has an add method?
[05:13:57] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[05:14:07] *** Joins: xiongxin (~quassel@113.116.33.66)
[05:14:12] <grandrew> and stuff like a stray `a > b` to mean `assert a > b`
[05:14:27] <SnoopJ> KirkMcDonald, to judge by `typing`, I would say the annotations themselves are quite dynamic :P
[05:14:48] <nedbat> grandrew: implicit asserts seem strange. asserts aren't used much outside of tests
[05:15:03] <grandrew> nedbat, just resolve the type. If none of the code uses any other calls and they are all compatible with set why the hell it's not a set?
[05:15:04] <KirkMcDonald> grandrew: Refuse the temptation to guess.
[05:15:22] <aphysically> I take the -O option in python removing asserts to mean they shouldn't be used outside of tests (at least not for any real runtime behavior)
[05:15:26] <SnoopJ> grandrew, does this mean I'm not allowed to put attributes named `b` on my objects because of this behavior?
[05:15:29] <aphysically> re nedbat
[05:15:30] <nedbat> grandrew: are you talking about the run-time execution? or the static type checking?
[05:15:59] <nedbat> aphysically: they could be used to check the code by putting asserts in your product code, but I don't see people doing that.
[05:16:25] <grym> aphysically: the one i like is to compare "11" + 1 to "11" - 1
[05:16:30] <grandrew> I'm thinking about run-time symbolic execution, yes
[05:16:56] <nedbat> grandrew: it seems like the whole program would have to be analyzed first, to figure out what "b" might be.
[05:17:18] <byte4byte> is there a way in python to allocate 47 bytes while concurrently freeing it so it does occupy address space?
[05:17:19] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[05:17:20] <grandrew> nedbat, please :) analyze. I got the cores :-P
[05:17:33] <SnoopJ> grandrew, all the computing power in the world will fall short for some valid Python programs
[05:17:41] <nedbat> grandrew: so it is a pre-execution analyzer.  that's static analysis
[05:18:06] <nedbat> byte4byte: that question makes no sense: allocate it while also freeing it?
[05:18:27] <byte4byte> i want to use memory without allocating like compression
[05:18:28] <grandrew> if you limit the scope of analysis to some reasonable execution window it would be a semi-dynamic :-\ analysis?
[05:18:31] <byte4byte> to save bytes
[05:18:34] <byte4byte> i dont want bloat damnit
[05:18:45] <nedbat> grandrew: this is an interesting idea, but i think it needs more thought and fleshing out.
[05:19:02] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[05:19:59] <SnoopJ> byte4byte, Python doesn't really have memory as a concept. You can do things like what you're talking about, but they amount to writing C-in-Python (using ctypes or Cython or...)
[05:20:23] <byte4byte> not according to jim
[05:20:30] <byte4byte> he was telling me he figured out a way to do it
[05:20:39] <nedbat> byte4byte: stop this, or get banned.
[05:20:44] <mefistofeles> grandrew: interesting, you were concerned about going back to the 70s, but what you say sounds very familiar to compiling code and macros :)
[05:21:40] <grandrew> mefistofeles, which leads to the second thing I don't understand - the good stuff from 70s not being used while the bad is "ya, why not?"
[05:21:41] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 264 seconds)
[05:21:44] <SnoopJ> that remark reminded me of a talk Raymond Hettinger gave about the rework dictionaries got in 3.6 that made them coincidentally ordered. The talk was basically "in our brilliance, we reinvented row databases"
[05:22:01] <nedbat> grandrew: what is the good stuff from the 70's?
[05:22:22] <mefistofeles> music
[05:22:25] <mefistofeles> oh wait, sorry
[05:22:51] <grandrew> nedbat, type systems, automatic proof, logic programming for the goodness sake
[05:23:17] <SnoopJ> grandrew, type annotations in some way address all three of those
[05:23:30] <SnoopJ> (when used to aid a static analysis tool)
[05:23:34] <grandrew> automatic planning, constraint-goal programming
[05:23:45] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:24:58] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[05:25:09] <grandrew> SnoopJ and mefistofeles - of course, ask the developer to write more redundant code and you address everything
[05:25:19] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[05:25:19] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Remote host closed the connection)
[05:25:22] <nedbat> grandrew: i suspect you can get libraries to do some of that. python can't be every language rolled into one.
[05:25:30] <mefistofeles> grandrew: well, there's no such thing as a free lunch, I guess
[05:25:34] <grandrew> ask them to write on a punchcard the equivalent code to verify. fun!
[05:25:57] <mefistofeles> grandrew: I understand what you mean, though
[05:26:01] <SnoopJ> grandrew, I don't think my points are helping, I'll stop sharing them.
[05:26:07] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Ping timeout: 252 seconds)
[05:26:12] <grandrew> I believe there is - see what MS is doing with copilot
[05:26:44] <mefistofeles> it does seem that we do very similar things than what people in the 70s were doing. Specially, the part of writing static code in text editors
[05:26:52] <grandrew> I think of something like copilot but built into language and actually helping developer have more fun from coding and not writing more type annotations to live a less miserable life
[05:26:54] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[05:27:35] <mefistofeles> Bret Victor has a really nice talk about this, called "The Future of Programming", you should look it up. It is just hard to beat the current status, but there are ceirtainly many ideas around there, since the 60s and 70s, actually
[05:27:35] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:28:08] <grandrew> I know that talk
[05:28:12] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[05:28:13] <grandrew> fun one :)
[05:28:19] <mefistofeles> grandrew: oh ok!
[05:29:24] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 250 seconds)
[05:29:31] <grandrew> anyways, as a disclaimer I'm actively experimenting with that kind of stuff in light-production environments
[05:29:56] <mefistofeles> for example, I'm very fond of the idea of not having APIs, or at least having APIs that adapt and eventually talk to each other (GANs models?!). But still, I don't really know how we can actually accomplish that other than what we are already trying
[05:31:01] <mefistofeles> it just takes time, not a hard task and in the meantime we better try to continue producing knowledge and stuff with what we already know it somewhat works
[05:31:05] <grandrew> mefistofeles, my take that API autodiscovery is actually open-sourcing the code of the peers' systems
[05:31:07] <mefistofeles> s/hard/easy
[05:31:36] <grandrew> like the system would share the source of the code running on both ends and will create an understanding of what either party does
[05:31:49] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:31:55] * SnoopJ has lost track of which part of this is relevant to Python and type annotations
[05:32:07] <mefistofeles> yeah, we diverged
[05:32:08] <mefistofeles> :P
[05:32:35] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:c0d5:7aa3:c04a:b9ef) (Ping timeout: 246 seconds)
[05:32:48] <SnoopJ> mefistofeles, if copilot is representative of the state of the art (which I think is fair), then I hope I can opt out
[05:33:14] <mefistofeles> SnoopJ: I guess, I prefer the OpenAI one, fwiw
[05:33:16] <mefistofeles> codex
[05:33:17] <SnoopJ> https://www.wired.com/story/ai-write-code-like-humans-bugs/
[05:33:18] <grandrew> back on track, I'm not that concerned about types rather than about no evolution in ease of programming. And I love Python and don't want to lose it to some Go
[05:33:40] <mefistofeles> SnoopJ: oh, Copilot actually uses codex, nvm xD
[05:33:55] *** Joins: mat001 (~mat001@213.143.69.121)
[05:34:17] <SnoopJ> grandrew, it's generally a mistake to assume programming languages are locked in a zero-sum world, where one language succeeding means another must decline.
[05:34:24] *** Quits: doforlove33 (~doforlove@141.98.252.169) (Quit: Leaving)
[05:34:47] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[05:34:53] <mefistofeles> grandrew: programming languages are just tools, the more tools you have, the better... in general. But of course, you cannot carry ALL tools ever for a job, so try picking good ones. Python does seem like a good one, so is Go :)
[05:35:10] <grandrew> ok, that should be my third curiosity, why the good stuff must decline only to be reinvented after 40 years?
[05:35:14] <SnoopJ> And there is nonzero overlap between the two.
[05:35:35] <SnoopJ> Although I don't think there's very much interest in writing extension modules in golang
[05:35:57] *** Quits: gggp (~textual@60.10.194.45) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:36:13] <SnoopJ> grandrew, I don't understand the question, can you ask a more specific one? Preferably on the subject of Python?
[05:36:31] <grandrew> now here is my statement, if Python community is unwilling to take action, we need a hard fork
[05:36:40] <stewie925> hi guys, Ive been testing out different "efficient" solutions out there for a four sum problem  - first one is two pointer https://leetcode.com/submissions/detail/565803092/. and second one is hash map https://leetcode.com/submissions/detail/565947022/.  Looks like the two pointer is more efficient based on "memory distribution"?
[05:36:56] <grandrew> I can't take it anymore. That's it. (:
[05:37:11] * SnoopJ has no clue what "it" is
[05:37:15] <mefistofeles> grandrew: feel free to fork it, fwiw
[05:37:39] <SnoopJ> yea, forks are good for everybody :)
[05:37:41] * grandrew almost kidding
[05:37:46] <mefistofeles> stewie925: both of those links require a leetcode account, apparently
[05:37:56] <stewie925> oh crap
[05:37:58] <SnoopJ> although I think there are fewer forks of the language itself
[05:37:58] <stewie925> sorry
[05:38:03] <stewie925> let me send a png
[05:38:07] <stewie925> png link
[05:38:11] <stewie925> brb
[05:38:26] <mefistofeles> stewie925: if you aim to share code, try plain text over a bitmap :)
[05:38:46] *** Quits: mat001 (~mat001@213.143.69.121) (Ping timeout: 252 seconds)
[05:39:17] <stewie925> well, there are graphs and stuff
[05:39:21] <grandrew> pypy is a good idea. Pity they're trying to cat-and-mouse vanilla Python
[05:39:25] <stewie925> and my code is at the bottom
[05:39:45] <stewie925> let me try something.. brb
[05:40:54] *** Quits: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2) (Ping timeout: 260 seconds)
[05:42:58] *** Quits: sbrown (~sbrown@66.44.16.44) (Quit: Leaving…)
[05:43:36] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[05:43:58] *** Joins: HaMcHi (~mx@182.153.18.143)
[05:43:58] <SnoopJ> is "cat-and-mouse" code for JIT compilation?
[05:44:11] *** Joins: sh4rk (~lemonade@user/sh4rk)
[05:44:37] *** Joins: drew` (~drew@user/drew)
[05:44:41] <nedbat> grandrew: you seem to see large evil forces at play in programming language evolution...
[05:44:49] *** Quits: drew (~drew@user/drew) (Ping timeout: 252 seconds)
[05:44:57] *** drew` is now known as drew
[05:46:41] <mefistofeles> it's all Intel's fault!
[05:46:51] * mefistofeles accomodates his tinfoil hat
[05:47:24] *** Joins: gggp (~textual@60.10.23.162)
[05:47:53] *** Joins: JibStyle (~user@c-71-198-134-61.hsd1.ca.comcast.net)
[05:48:09] *** Quits: HaMcHi (~mx@182.153.18.143) (Client Quit)
[05:48:27] *** Joins: HaMcHi (~mx@182.153.18.143)
[05:48:33] <stewie925> here is my two pointer results from leetcode - https://imgur.com/svQpjjv
[05:48:53] *** Joins: extropiator (~extropiat@user/extropiator)
[05:49:00] <grandrew> nedbat, elaborate please :) maybe it's easier to join the dark side?
[05:49:02] *** Joins: HaMsTeRs (~Thunderbi@182.153.18.143)
[05:49:22] <stewie925> and here is my hash map results from leetcode - https://imgur.com/96YBaLG
[05:50:22] *** Quits: HaMcHi (~mx@182.153.18.143) (Client Quit)
[05:50:26] <jim> SnoopJ, the thing I told byte4byte was that as compared to C, you don't have to worry about memory, especially where it concerns the allocation and deallocation of python objects, as that happens without having to pay attention to it or taking any specific action
[05:50:27] <SnoopJ> stewie925, when dictionaries are "close" to full, they double in size, so their memory consumption can grow in surprising ways.
[05:50:41] <stewie925> disclosure - I copied the hash map from GitHub and tweaked it to skip duplicates to cut down on execution time
[05:50:42] <SnoopJ> jim, right, it's not part of the language
[05:50:44] *** Quits: ckdCreations (~ckdCreati@147.55.133.134) (Quit: Leaving)
[05:51:10] <stewie925> thank you SnoopJ for your input
[05:51:57] <stewie925> so is runtime a better gauge of efficiency?
[05:52:20] <SnoopJ> it depends on what "efficiency" means
[05:52:40] <comet23> do we use functions like issubclass(), typeof(), etc... in production or are they just things that help us debug code?
[05:52:48] <SnoopJ> i.e. the reason leetcode looks at multiple measures is because there are multiple things to measure :)
[05:53:21] <stewie925> SnoopJ:  ahhhh
[05:53:52] <SnoopJ> comet23, issubclass() and isinstance() are useful in production code. typeof() isn't a builtin, maybe you mean type()? That is much less common unless you're doing some metaprogramming and really need to know what the *exact* type is.
[05:54:16] <comet23> why would they be useful?
[05:54:39] <SnoopJ> comet23, to check if something is an instance of a class, or a subclass.
[05:54:57] *** Quits: HaMsTeRs (~Thunderbi@182.153.18.143) (Quit: HaMsTeRs)
[05:55:05] <cluelessperson> comet23, to check if an object is a type you expect it to be.
[05:55:28] * grandrew thinks none of the intuitively core language features are not for prod, including assert
[05:55:32] <comet23> why would you need to if you know what the type is going to be
[05:55:37] *** Joins: HaMsTeRs (~Thunderbi@182.153.18.143)
[05:55:56] <cluelessperson> comet23, because you don't always know, or you may allow multiple options.
[05:55:58] <jamwil> comet23: e.g., you accept a path as a function arg which could be a string or a Path object. You may want to incorporate logic that converts a string to a Path using isinstance(obj, str)
[05:55:58] <SnoopJ> comet23, a common case is where you are writing a function that might accept a single input, or a list (or other kind of sequence) of them.
[05:56:30] <comet23> oh i see thanks a lot
[05:56:48] <jamwil> `result = Path(input) if isinstance(input, str) else input`
[05:57:34] <SnoopJ> jamwil, I usually just do `Path(pth)` since Path(Path(foo)) is the same as Path(foo)
[05:57:35] <grandrew> comet23, metaprogramming is also a common case when writing at high-level of understanding of what you're doing
[05:57:58] *** Quits: JibStyle (~user@c-71-198-134-61.hsd1.ca.comcast.net) (Remote host closed the connection)
[05:58:04] <jamwil> SnoopJ: For sure; result is same. Maybe a bad example, but the pattern is common enough.
[05:58:31] <SnoopJ> comet23, another somewhat common case is where you expect users to write a subclass of some base class. You can use issubclass() to check that what they give you actually is a subclass, and raise an error if they didn't
[06:00:30] *** Quits: chenqisu1 (~xirndc@183.217.201.186) (Quit: Leaving)
[06:00:47] *** Joins: dld (~davidlowr@73.61.9.73)
[06:04:11] <madduck> Can I use argparse to support something like "-d one -d two" so I get a list ['one','two'] ? I don't want "-d one two" because I don't know how many there will be.
[06:05:21] <KirkMcDonald> madduck: action="append"
[06:05:33] <madduck> aha!
[06:07:01] <madduck> hm, that gives [['one'],['two']]
[06:07:06] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 250 seconds)
[06:07:38] <SnoopJ> are you giving argparse a type?
[06:07:58] <madduck> yes
[06:08:04] <madduck> parser.add_argument('--draw', '-d', type=str, metavar='DRAW_CODE', default=None, nargs=1, action="append", help='Only enter given draw, or draws if given more than once')
[06:08:11] <SnoopJ> oh, it's the nargs=1 part
[06:08:17] *** Joins: nrg (~NRG@user/nrg)
[06:08:18] <SnoopJ> (I think)
[06:08:38] <madduck> yeah, if I remove that it works. I guess I misunderstood nargs!
[06:08:46] *** Quits: gggp (~textual@60.10.23.162) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:09:02] <KirkMcDonald> type=str is the default.
[06:09:09] <SnoopJ> For nargs=<integer>, "N arguments from the command line will be gathered together into a list." and "If the nargs keyword argument is not provided, the number of arguments consumed is determined by the action."
[06:09:25] <KirkMcDonald> "Note that nargs=1 produces a list of one item."
[06:11:02] <SnoopJ> worth pointing out that `nargs='*'` or '+' does let you consume an arbitrary number of them
[06:11:03] <KirkMcDonald> Also, default=None is the default default.
[06:12:30] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[06:14:36] *** Quits: extropiator (~extropiat@user/extropiator) (Ping timeout: 256 seconds)
[06:15:44] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:6d81:11e:6bd1:61da) (Ping timeout: 256 seconds)
[06:16:11] *** Quits: HaMsTeRs (~Thunderbi@182.153.18.143) (Quit: HaMsTeRs)
[06:16:35] *** Joins: relight (~relight@user/relight)
[06:17:48] *** Joins: HaMsTeRs (~Thunderbi@182.153.18.143)
[06:18:53] *** Joins: ItsLandon (~quassel@2601:1c0:6d03:1cb0:b5ce:612d:d932:999)
[06:20:44] *** Quits: VlanX (~sysadmin@151.46.69.74) (Ping timeout: 245 seconds)
[06:24:25] *** Joins: Fiji (~Fiji@user/fiji)
[06:27:09] *** Joins: HaMsTeRs1 (~Thunderbi@182.153.31.138)
[06:27:34] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 268 seconds)
[06:27:53] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 246 seconds)
[06:28:14] *** Quits: HaMsTeRs (~Thunderbi@182.153.18.143) (Ping timeout: 246 seconds)
[06:28:14] *** HaMsTeRs1 is now known as HaMsTeRs
[06:29:52] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:31:53] *** Quits: markcerv (~markcerv3@52-119-125-204.PUBLIC.monkeybrains.net) (Ping timeout: 264 seconds)
[06:32:23] *** Joins: JibStyle (~user@c-71-198-134-61.hsd1.ca.comcast.net)
[06:32:30] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 268 seconds)
[06:33:39] <twainwek> Can someone help me understand what x[None] does when x is of type pytorch.Tensor? it looks like it adds a dimension?
[06:33:46] *** Quits: drew (~drew@user/drew) (Ping timeout: 252 seconds)
[06:36:03] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[06:37:20] *** Joins: nicode (~nic@45.72.213.174)
[06:37:34] <SnoopJ> twainwek, yes, None adds a new dimension. It's useful to spell this as np.newaxis (which is just an alias for None) to keep track of what it does.
[06:38:02] <SnoopJ> (the behavior is the same as it is in NumPy)
[06:39:04] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 245 seconds)
[06:39:45] <twainwek> TIL np.newaxis
[06:41:18] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[06:44:52] *** Quits: thnee1 (~thnee@h-85-24-144-199.A328.priv.bahnhof.se) (Ping timeout: 252 seconds)
[06:44:55] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[06:45:53] <SnoopJ> it adds the new axis wherever it's used, if you use it in an indexing tuple, i.e. `arr[:, np.newaxis, :]` adds a new axis between the first and second axes
[06:45:57] *** Quits: athar_ (~alphasier@2405:201:e:4d:1c4:3d72:30e8:2837) (Read error: Connection reset by peer)
[06:46:44] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[06:48:02] *** Joins: drew (~drew@user/drew)
[06:49:08] *** Quits: dld (~davidlowr@73.61.9.73) (Ping timeout: 250 seconds)
[06:49:08] *** Joins: SteveR (~SteveR@103.215.168.1)
[06:49:28] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[06:50:00] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 250 seconds)
[06:50:55] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 252 seconds)
[06:50:56] *** jmiehe1 is now known as jmiehe
[06:51:09] *** Joins: dld (~davidlowr@2601:197:600:1210:f114:5b21:6fb7:1fc1)
[06:51:30] *** Quits: SteveR (~SteveR@103.215.168.1) (Client Quit)
[06:51:59] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[06:52:35] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:57:52] *** Quits: pankid_ (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:58:45] *** Joins: pankid (~quassel@pankid.club)
[07:00:08] *** Quits: pankid (~quassel@pankid.club) (Client Quit)
[07:00:27] *** Joins: pankid (~quassel@pankid.club)
[07:00:50] *** Joins: fdan (~fdan@103.215.168.1)
[07:03:32] *** Joins: quakeusr (~quakeusr@user/quakeusr)
[07:04:55] *** Quits: quakeusr (~quakeusr@user/quakeusr) (Quit: leaving)
[07:06:46] *** Quits: aknot (~aknot@2603:900a:1503:17bb:d129:1826:3135:4603) (Ping timeout: 252 seconds)
[07:09:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[07:09:36] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[07:09:36] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[07:09:53] *** Quits: SallyAhaj_ (~SallyAhaj@user/sallyahaj) (Ping timeout: 246 seconds)
[07:10:35] *** Joins: quakeusr (~quakeusr@user/quakeusr)
[07:11:02] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[07:12:05] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:14:40] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[07:15:45] <ItsLandon> gyrm mentioned shiv earlier. Does that produce a regular .py
[07:16:00] *** Quits: Barones (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14) (Ping timeout: 250 seconds)
[07:16:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[07:16:21] *** Joins: millido (~millido@84.210.150.128)
[07:18:02] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:18:28] *** Joins: fikran (~fikran@user/fikran)
[07:18:47] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:19:40] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:20:15] *** Quits: quakeusr (~quakeusr@user/quakeusr) (Remote host closed the connection)
[07:20:53] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:22:41] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:23:25] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:24:10] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[07:27:37] *** Joins: thnee1 (~thnee@h-85-24-144-199.A328.priv.bahnhof.se)
[07:28:10] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[07:28:20] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[07:28:22] *** Quits: drew (~drew@user/drew) (Quit: Quit)
[07:32:32] *** Joins: drew (~drew@user/drew)
[07:33:37] <SnoopJ> ItsLandon, it produces a 'zipapp,' which is a ZIP that the Python interpreter can execute. The ones that shiv produces pack the dependencies along for the ride and know how to unpack them and set them up to be used.
[07:34:15] <ItsLandon> Does Python natively know how to use a script packaged in this way?
[07:34:24] <SnoopJ> Yes
[07:35:14] <SnoopJ> https://docs.python.org/3/library/zipapp.html and PEP 441 have the details
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:15] <SnoopJ> no extension is required, but .pyz is somewhat conventional
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:41:56] *** Joins: mat001 (~mat001@213.143.69.121)
[07:42:33] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[07:46:22] *** Quits: mat001 (~mat001@213.143.69.121) (Ping timeout: 252 seconds)
[07:49:41] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[07:54:37] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed) (Quit: Leaving)
[07:55:45] <comet23> is having a portfolio enough or do i need a degree to land a python job?
[07:57:33] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[08:01:09] *** Quits: drew (~drew@user/drew) (Ping timeout: 245 seconds)
[08:01:30] <jeho> a degree helps a lot
[08:02:12] <Tashtari> Some employers won't look at you twice if you don't have one, but these are not necessarily the ones you want to work for.
[08:03:47] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:dd4c:a9e2:f994:2bc8) (Read error: Connection reset by peer)
[08:05:28] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[08:06:58] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed)
[08:10:37] *** Quits: devcpu (~rusty@d50-92-229-34.bchsia.telus.net) (Quit: leaving)
[08:12:15] *** Joins: devcpu (~rusty@d50-92-229-34.bchsia.telus.net)
[08:15:00] <aphysically> well I found a 3.10 bug in tooling already :D
[08:15:16] <aphysically> github actions version matrices interpret 3.10 as 3.1
[08:15:30] *** Joins: cjb54763 (~cjb@user/cjb)
[08:15:30] *** Quits: cjb54763 (~cjb@user/cjb) (Client Quit)
[08:15:33] *** Joins: saroy (~Sandipan@43.252.250.113)
[08:15:36] <aphysically> "3.10-dev" was fine funny enough, so their parser must be funny
[08:17:06] <aphysically> looks like it's because they follow semver so we need to use '3.10', and probably should have been using quotes the whole time (maybe a good thing to update in docs)
[08:17:52] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[08:19:11] *** Quits: nicode (~nic@45.72.213.174) (Ping timeout: 268 seconds)
[08:20:01] *** Quits: xiongxin (~quassel@113.116.33.66) (Quit: No Ping reply in 180 seconds.)
[08:20:30] <grawity> the actions stuff is yaml, right?
[08:20:41] <grawity> 3.10-dev is a string, 3.10 is a float
[08:21:17] *** Quits: HaMsTeRs (~Thunderbi@182.153.31.138) (Ping timeout: 246 seconds)
[08:21:18] *** Joins: xiongxin (~quassel@113.116.33.66)
[08:21:43] <aphysically> I never even thought about it, I just copied the syntax from their docs
[08:24:26] *** Joins: ravan (~ravan@user/ravan)
[08:24:43] <themill> Is there irony in dynamic typing of yaml coming to bite python CI in the arse?
[08:25:52] *** Joins: QuaternionsRock (~Guest95@2601:197:a7f:79d6:b039:c4ce:5416:91e3)
[08:27:21] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[08:27:25] <QuaternionsRock> Why does Python require that any non-default arguments precede all non-default arguments? It just seems like a strange restriction in something that is otherwise so flexibl?
[08:27:48] <QuaternionsRock> Why does Python require that any non-default arguments precede all default arguments?*
[08:28:04] <QuaternionsRock> flexible*
[08:28:08] <QuaternionsRock> yeesh bad first message
[08:28:32] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[08:28:50] <Repiphany> QuaternionsRock: https://bpa.st/3BGQ
[08:28:55] *** Joins: stranac (~stranac@195.29.239.126)
[08:29:18] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[08:30:00] <aphysically> themill: possibly
[08:30:10] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[08:30:23] *** Joins: dvx (~dvx@185.63.97.64)
[08:30:35] *** Joins: c10l (~c10l@user/c10l)
[08:30:45] <QuaternionsRock> Repiphany perhaps I am missing something?
[08:31:57] <QuaternionsRock> I don't see what that snippet is trying to point out
[08:32:01] *** Joins: jackblasted (~AdminUser@193.19.109.27)
[08:32:11] *** Quits: QuaternionsRock (~Guest95@2601:197:a7f:79d6:b039:c4ce:5416:91e3) (Quit: Client closed)
[08:32:28] *** Joins: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:b039:c4ce:5416:91e3)
[08:32:40] <aphysically> QuaternionsRock: the snippet uses the default argument preceding the non-default argument
[08:32:41] <phy1729> def foo(arg1, arg2, *, kwd1='foo', kwd2):  works fine
[08:33:15] <phy1729> The trick is to make them keyword only arguments
[08:33:24] *** Joins: chenqisu1 (~xirndc@183.217.201.186)
[08:34:00] <QuaternionsRock> aphysically Sorry I meant in the function definition like what phy1729 is referring to
[08:35:15] *** Joins: upsala (~zcb@185.213.155.160)
[08:35:26] *** Quits: swensson (~swensson@host-90-235-17-94.mobileonline.telia.com) (Quit: Client closed)
[08:35:30] <QuaternionsRock> And phy1729, I can't say I enjoy that solution. I have no idea to go about it yet, but I'm starting to consider submitting a proposal for it
[08:36:14] <phy1729> Well the issue is it makes no sense for positional parameters. If arg2 is required, then so is arg1, so it'd be pointless for it to have a default
[08:38:24] <QuaternionsRock> The simplest real-world example is the range built-in. I have yet to discover a good reason why that signature is not feasible in Python without typing.overload
[08:39:02] <QuaternionsRock> Just kidding, that makes no sense
[08:39:07] *** Quits: rapier (~marcos@170.233.159.1) (Read error: Connection reset by peer)
[08:39:28] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[08:39:57] <aphysically> I've had days like this :D
[08:42:35] <QuaternionsRock> However, as for phy1729's point, that isn't always true
[08:43:20] *** Joins: Payam (~Payam@138.106.57.132)
[08:43:30] <QuaternionsRock> def foo(a=0, *, b) works, but b must be specified as a keyword argument
[08:43:59] <phy1729> right, so it doesn't count for the argument
[08:44:21] *** Quits: jackblasted (~AdminUser@193.19.109.27) (Remote host closed the connection)
[08:45:19] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[08:45:46] *** Quits: LiftLeft (~LiftLeft@172.98.80.18) (Ping timeout: 252 seconds)
[08:45:55] *** Joins: jackblasted (~quassel@193.19.109.27)
[08:46:27] <QuaternionsRock> def foo(a=None, b) seems to be a perfectly reasonable signature to me, however
[08:47:07] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[08:47:12] <phy1729> How does foo(1) parse? invalid?
[08:47:25] <QuaternionsRock> Yes, invalid
[08:47:49] <llua> that sounds weird
[08:47:54] <QuaternionsRock> This gives the user the opportunity to choose between foo(None, 'bar') and foo(b='bar') as they please
[08:47:58] <phy1729> I suppose for positional/keyword parameters it could work
[08:49:54] *** Joins: ravan (~ravan@user/ravan)
[08:49:54] *** Quits: JibStyle (~user@c-71-198-134-61.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[08:50:44] *** Quits: jackblasted (~quassel@193.19.109.27) (Ping timeout: 245 seconds)
[08:51:05] *** Joins: jackblasted (~quassel@193.19.109.27)
[08:51:13] <QuaternionsRock> Although,
[08:51:16] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 252 seconds)
[08:51:30] <QuaternionsRock> Perhaps foo(1) should be valid
[08:51:54] <QuaternionsRock> Under certain conditions
[08:53:00] <QuaternionsRock> The signature for the range operator could then be implemented in a single signature
[08:53:27] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[08:53:39] *** Quits: y1n-v1 (~y1n@178.115.42.243.wireless.dyn.drei.com) (Ping timeout: 245 seconds)
[08:54:03] <QuaternionsRock> def range(start=0, stop, step=1) would completely replicate the behavior of the range constructor
[08:54:28] <QuaternionsRock> actually, technically range(start=0, stop, step=1, /)
[08:54:31] <aphysically> speaking of the range operator, I wonder if I would implement that was structural sequence matching realistically
[08:54:34] <deniska> We can always throw some more special characters in a parameter list syntax
[08:54:47] <aphysically> range(*args: int)
[08:54:51] <aphysically> match args:
[08:54:56] <aphysically> and then the various cases
[08:55:27] <aphysically> might be more readable than the alternatives?
[08:55:35] <aphysically> I don't like the signature documentation though
[08:55:38] <QuaternionsRock> wholly agree with the concept, but one significant consideration IMO is how language servers perform with the given signature
[08:56:06] <QuaternionsRock> and range(*args: int) is not sufficient in that regard
[08:56:16] <QuaternionsRock> typing.overload is currently the only solution
[08:56:20] *** Joins: quakeusr (~quakeusr@user/quakeusr)
[08:56:28] <QuaternionsRock> d
[08:56:29] *** Joins: JibStyle (~user@c-71-198-134-61.hsd1.ca.comcast.net)
[08:56:32] *** comet23 is now known as IMTHEGOAT
[08:56:32] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[08:56:56] *** Quits: IMTHEGOAT (~comet23@user/comet23) (Quit: Client closed)
[08:56:59] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[08:57:24] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[08:57:27] <aphysically> yeah I'm not entirely convinced for using this on arguments, but I might try writing it out when it comes up and see what I think sometimes
[08:59:06] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[08:59:18] *** Joins: Hypothesis (~Hypothesi@216.163.31.107)
[08:59:37] *** Joins: mexen (uid495612@user/mexen)
[09:01:51] *** Joins: astronaut (~annada@103.160.128.31)
[09:02:05] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[09:02:11] <astronaut> hi.
[09:02:53] <astronaut> I was wondering why pip successfully pulls a module but I cannot import it, in the same env.
[09:03:16] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[09:04:13] <Repiphany> Import name isn't necessarily the same as the pip package name
[09:04:40] <astronaut> subprocess.call([sys.executable, '-m', 'pip', 'install', '--user', 'pyntcloud']); runs successfully and returns zero and in the same shell, import pyntcloud gives ImportError.
[09:05:14] *** Joins: Bugz000 (~Bugz000@user/bugz000)
[09:06:47] <xcombelle> astronaut: if your script is names pyntcloud rename it
[09:06:57] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[09:07:14] <Bugz000> hey i've two timestamps i'm trying to compare, one is "current time" and one is a set date, i'm trying to run a check so it knows not only how many H MS left until the set time/date, but also if it has passed, i have got it "counting down" but the moment it passes the time, the seconds value goes to 83743 or something similar - i'd expect this to simply start counting up again in minus... 3 2 1 0 -1 -2 -3 ... how would i get this behaviour?
[09:07:24] <astronaut> I don't have no script, I am running in a interactive shell.
[09:08:27] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[09:09:20] <Repiphany> What's the full ImportError
[09:09:37] *** Joins: stranac (~stranac@195.29.239.126)
[09:10:39] <astronaut> https://litter.catbox.moe/3afrol.png
[09:10:41] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[09:10:47] <astronaut> please see this screenshot
[09:12:10] *** Quits: jackblasted (~quassel@193.19.109.27) (Ping timeout: 252 seconds)
[09:13:38] *** Joins: dub_a (~dub_a@static-198-54-131-92.cust.tzulo.com)
[09:15:22] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[09:15:44] *** Quits: Keira (~k@lulzsec.co.uk) (Ping timeout: 245 seconds)
[09:16:21] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 276 seconds)
[09:17:00] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:18:07] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed) (Quit: Leaving)
[09:18:38] *** Quits: dub_a (~dub_a@static-198-54-131-92.cust.tzulo.com) (Ping timeout: 250 seconds)
[09:19:04] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[09:19:53] *** Joins: dub_a (~dub_a@2601:1c2:4e00:3b3::cb2)
[09:23:10] *** Quits: xiongxin (~quassel@113.116.33.66) (Ping timeout: 252 seconds)
[09:23:39] *** Quits: beterraba (~beterraba@86.107.21.205) (Ping timeout: 245 seconds)
[09:25:44] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[09:25:49] *** Joins: beterraba (~beterraba@86.107.21.205)
[09:26:10] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[09:26:20] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[09:26:34] *** Quits: kostkon (~kostkon@2a02:587:a104:3da6:4d6c:40e6:f58:8e46) (Remote host closed the connection)
[09:26:55] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[09:27:48] *** Joins: fikran (~fikran@user/fikran)
[09:29:10] *** Quits: _xor (~xor@74.215.232.67) (Ping timeout: 252 seconds)
[09:30:31] *** Quits: TMan459 (~TMan459@068-187-099-141.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[09:30:40] *** Joins: ubert (~Thunderbi@178.115.39.222.wireless.dyn.drei.com)
[09:32:16] *** Joins: promey (~Promeys@gateway/tor-sasl/promey)
[09:34:30] *** Joins: Pixi (~Pixi@user/pixi)
[09:35:38] *** Quits: lifefir3 (~lifefir3@152.37.120.101) (Quit: The Lounge - https://thelounge.chat)
[09:36:15] *** Joins: swensson (~swensson@213.88.131.10)
[09:36:37] *** Joins: lifefir3 (~lifefir3@152.37.120.101)
[09:37:02] <ItsLandon> How would I go about finding out the site-packages directory that pip is putting things in? I have a fairly non-standard python setup, and I'm getting an error related to the site-packages directory being unwritable
[09:37:51] <astronaut> ItsLandon, I would either use the `--user` flag or sudo.
[09:37:57] *** Quits: quakeusr (~quakeusr@user/quakeusr) (Quit: leaving)
[09:38:22] <Repiphany> Except don't install things using `sudo pip`
[09:38:35] <ItsLandon> astronaut: thanks. I'll try --user
[09:38:45] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:d454:d1a1:e648:cce8)
[09:38:54] <ItsLandon> I'm trying to run the bootstrap to install pip in the LibreOffice python install
[09:39:06] <ItsLandon> Unfortunatley it's not working in Windows
[09:39:10] *** Quits: ATAD (~ATAD@user/atad) (Remote host closed the connection)
[09:39:41] <ItsLandon> strangely, pip3 seems to ship with LibreOffice for macOS bit not for Windows. I don't get it
[09:40:11] <astronaut> Repiphany, did you see that screenshot. Isn't it very odd?
[09:41:28] <Repiphany> I don't know what python blender uses
[09:41:56] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[09:42:01] *** Joins: ExeciN (~ExeciN@user/nicexe)
[09:42:17] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[09:42:58] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[09:43:14] <ItsLandon> How can I check where the user site-packages is located?
[09:44:25] *** Joins: quakeusr (~quakeusr@user/quakeusr)
[09:44:27] *** Joins: carl- (~carl-@185.103.188.131)
[09:44:46] <astronaut> Repiphany, it's not Blender. I run it in a shell and I get the same error.
[09:45:23] <mattf> where is this coming from: ERROR: Could not build wheels for multidict, yarl which use PEP 517 and cannot be installed directly
[09:45:32] *** Quits: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:b039:c4ce:5416:91e3) (Quit: Client closed)
[09:45:49] <mattf> pip install sopel inflect pytest-mock mock pytest
[09:45:58] <mattf> Failed to build multidict yarl
[09:46:34] <mattf> this command works fine on arch linux but doesn't work on docker's alpin-3
[09:47:22] *** Joins: seednode1 (~seednode@user/seednode)
[09:48:34] <astronaut> ItsLandon, run python -c 'import sys; print(sys.path)'
[09:48:59] <hacksword> mattf: did you upgrade pip before installing?
[09:48:59] *** Joins: carl-- (~carl-@185.103.188.130)
[09:49:32] *** Quits: starz (starz@ns378512.ip-37-59-36.eu) (Ping timeout: 265 seconds)
[09:49:40] <hacksword> I tend to get goofy build errors if I forget to upgrade pip/setuptools
[09:50:13] *** Joins: rendar (~rendar@user/rendar)
[09:50:27] <ItsLandon> astronaut: is there a way to confirm it's going to the site-packages in sys.path?
[09:51:23] *** Joins: gusto (~Augustus@109.255.100.54)
[09:51:46] *** Quits: carl- (~carl-@185.103.188.131) (Ping timeout: 252 seconds)
[09:52:26] <astronaut> list the contents of that directory and see if such a directory exists
[09:53:07] <astronaut> ls $(python -m site --user-site) | grep <your module>
[09:53:39] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[09:53:41] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 246 seconds)
[09:53:44] *** Quits: EgonX_ (~EgonX@2601:2c6:47f:9c18:d0f6:5d12:b374:4314) (Ping timeout: 250 seconds)
[09:54:08] <mattf> hacksword: it is this dockerfile not my system: https://github.com/irc-poker/hellmuth/blob/master/etc/Dockerfile
[09:54:31] *** Quits: dub_a (~dub_a@2601:1c2:4e00:3b3::cb2) (Ping timeout: 252 seconds)
[09:54:44] *** Joins: Dystopia (~Dystopia@159.65.223.12)
[09:54:47] <mattf> should i add run whatever to upgrade pip there
[09:55:09] <hacksword> mattf: where you're running your pip install
[09:55:15] <mattf> that dockerfile
[09:56:05] *** Joins: dub_a (~dub_a@static-198-54-131-92.cust.tzulo.com)
[09:56:45] <hacksword> mattf: give it a try
[09:57:09] <mattf> I added `RUN pip install --upgrade pip`
[09:57:16] *** Quits: jazzy (~jaziz@2600:380:8571:702f:1cbc:304:51f8:c200) (Ping timeout: 252 seconds)
[09:57:24] *** Joins: manti7 (~manti7@185.107.94.249)
[09:57:47] <mattf> didn't work
[09:58:20] *** Quits: grawity (~grawity@star.nullroute.lt) (Remote host closed the connection)
[09:58:26] <mattf> here is more of the error: http://ix.io/3ASz
[09:58:27] <mattf>  
[09:58:31] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[09:58:44] <mattf> that command works fine on my host machine, idk why doesn't work on a docker
[09:58:48] <mattf> oh
[09:58:51] <mattf> i think i see why
[09:58:54] <ItsLandon> I might just give up and say that my Calc document doesn't support Windows...
[10:00:19] <hacksword> mattf: that gcc error is the first thing that stands out to me
[10:00:23] <mattf> yeah
[10:00:38] <mattf> why people use that alpine thing for python if it doesn't even come with gcc
[10:01:06] <hacksword> that size meta :D
[10:01:18] *** Joins: xiongxin (~quassel@113.116.35.70)
[10:01:34] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:d0f6:5d12:b374:4314)
[10:01:35] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[10:02:21] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[10:02:57] <The-Compiler> obligatory https://pythonspeed.com/articles/alpine-docker-python/
[10:03:46] *** Joins: spithash (~spithash@user/spithash)
[10:04:24] *** Quits: pacbard (~pacbard@user/pacbard) (Quit: ZNC 1.8.2 - https://znc.in)
[10:06:09] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 245 seconds)
[10:06:49] *** Joins: palasso (~palasso@user/palasso)
[10:06:54] *** Joins: pacbard (~pacbard@user/pacbard)
[10:07:11] <hacksword> mattf: I tend to roll with the official python slim images myself but at the end of the day your dependencies are going to drive the complexity of your build
[10:07:35] <mattf> yeah im figuring out what is needed now
[10:07:47] <mattf> seems it will build
[10:07:49] <The-Compiler> I suppose https://www.python.org/dev/peps/pep-0656/ will help a bit
[10:08:26] <Dystopia> mattf how do you use that ix.io site? I like how simple it is
[10:09:06] <astronaut> ItsLandon, working on Windows is like a pain in the ass.
[10:09:07] <mattf> Dystopia: i have a keyboard shortcut that calls a script that basically pipes xclip -o into it
[10:09:54] <Dystopia> is it the same as in the documentatioin?
[10:10:25] <Dystopia> Sorry not a dev, just joined here to resume my pyEdu
[10:10:36] <mattf> Dystopia: http://ix.io/3ASC
[10:11:09] *** Quits: dub_a (~dub_a@static-198-54-131-92.cust.tzulo.com) (Ping timeout: 245 seconds)
[10:11:14] *** Quits: tone0 (~tone@071-011-252-111.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[10:11:30] <mattf> i like to display some notifications to see a bit of what i have paste
[10:12:11] <energizer> astronaut: did you figure out your thing
[10:12:34] *** Joins: zweimer (~zweimer@2a02:908:d20:26e0:8dd6:5f04:f7ac:760a)
[10:12:57] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:13:18] *** Joins: dub_a (~dub_a@2601:1c2:4e00:3b3::cb2)
[10:13:45] <Dystopia> Neat! thanks for that
[10:14:50] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[10:14:58] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[10:16:03] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:16:41] <astronaut> energizer, no. can you help?
[10:16:50] <energizer> astronaut: let's find out
[10:17:00] <astronaut> thank you
[10:17:44] <Hypothesis> temp = input("Input the  temperature you like to convert? (e.g., 45F, 102C etc.) : ")
[10:17:44] <Hypothesis> degree = int(temp[:-1])
[10:17:44] <Hypothesis> i_convention = temp[-1]
[10:17:48] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Quit: ZNC - https://znc.in)
[10:18:04] <Hypothesis> What does temp[-1] do?
[10:18:26] <The-Compiler> Hypothesis: get the last element in the list
[10:18:30] <hacksword> returns the last element
[10:18:35] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[10:18:37] <energizer> astronaut: first of all can you show a paste (https://bpa.st) of /path/to/python -m venv venv && venv/bin/pip install pyntcloud && venv/bin/python -c 'import pyntcloud'
[10:18:38] <Hypothesis> Ah okay. Thanks.
[10:19:01] <The-Compiler> Hypothesis: https://realpython.com/lessons/indexing-and-slicing/
[10:20:55] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[10:21:30] *** Joins: srhm (~srhm@user/srhm)
[10:21:48] *** Quits: Bugz000 (~Bugz000@user/bugz000) (Read error: Connection reset by peer)
[10:21:58] <astronaut> energizer, https://bpa.st/KQUQ
[10:22:06] *** Joins: gggp (~textual@60.10.194.45)
[10:22:32] <energizer> astronaut: there is no import error there
[10:22:52] *** Joins: Bugz000 (~Bugz000@user/bugz000)
[10:22:54] *** Joins: pycode (~pycode@2001:b07:5d28:551:7aa1:11e1:894f:3ec4)
[10:23:02] <energizer> astronaut: you see an import error in some other context?
[10:23:14] *** Quits: gggp (~textual@60.10.194.45) (Client Quit)
[10:23:15] <astronaut> I see import error in Blender
[10:23:40] <energizer> astronaut: but you also said " it's not Blender. I run it in a shell and I get the same error."
[10:24:24] <astronaut> but we created a new environment right?
[10:24:29] <energizer> yes
[10:24:31] *** Joins: gggp (~textual@60.10.194.45)
[10:24:55] <energizer> so there must be something about the environment you used in the shell that caused an error
[10:25:10] <energizer> can you reproduce that error in a shell and post it
[10:25:23] <astronaut> that is the default environment I guess, the one that uses the /usr/bin/python
[10:25:25] *** Quits: gggp (~textual@60.10.194.45) (Client Quit)
[10:26:09] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[10:27:22] <astronaut>  /usr/bin/python -c 'import pyntcloud' doesn't give no error now. And blender uses /usr/bin/python so, what could be the problem,  I wonder
[10:27:30] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[10:28:02] *** Joins: Keira (~k@lulzsec.co.uk)
[10:28:17] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[10:28:48] <energizer> astronaut: in blender, show sys.executable, sys.path
[10:29:45] <energizer> there used to be a regular in here called astronavt. same person?
[10:30:07] <astronaut> no, I am not him.
[10:30:26] <energizer> ok
[10:30:43] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[10:31:48] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[10:31:58] <astronaut> print(sys.executable) gives /usr/bin/python
[10:32:09] <astronaut> file (which python)
[10:32:18] <astronaut>  /usr/bin/python: symbolic link to python3.9
[10:33:24] <astronaut> print(sys.path) gives https://bpa.st/NC5A
[10:33:43] *** Joins: HaMsTeRs (~Thunderbi@182.153.11.99)
[10:35:15] <energizer> see pyntcloud is installed into ~/.local/lib/ but blender isnt looking there
[10:36:08] <energizer> so either install it into a place where blender is looking or add to the places where blender is looking
[10:36:28] <energizer> i dont use blender so idk what's normal in that world
[10:36:30] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[10:36:34] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[10:37:37] <energizer> more clearly i should say - either change where pyntcloud is or change where blender looks for it
[10:37:49] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[10:38:03] <astronaut> ok, how do I tell pip to install module at a given place?
[10:38:09] *** Quits: zweimer (~zweimer@2a02:908:d20:26e0:8dd6:5f04:f7ac:760a) (Quit: Client closed)
[10:38:21] <energizer> where do you want to install it
[10:39:16] <BrenBarn> it seems weird that blender would be using `/usr/bin/python` but not using the lib search path of `/usr/bin/python`
[10:39:52] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[10:39:57] <energizer> it is looking in the global path for /usr/bin/python, not the user ~/.local path
[10:40:20] <energizer> if blender has a config setting where you can just tell it to look in a venv, i'd do that
[10:41:01] <energizer> you don't want to install stuff with pip into /
[10:41:05] <BrenBarn> I wonder if blender uses some setting like `--no-user-packages` or whatever it is
[10:41:44] *** Joins: dhellmann_ (~dhellmann@097-081-099-073.res.spectrum.com)
[10:42:08] <energizer> pip has a --target option but it's pretty unusual to use that and i dont know where i'd be pointing it in this case
[10:42:17] *** Joins: kosh (~kosh@user/kosh)
[10:42:23] <energizer> i'd rather change where blender looks
[10:42:47] <energizer> if there's a blender config option i'd use that; otherwise there's always sys.path.append
[10:42:57] *** Joins: quasineutral8 (~quaisneut@user/quasineutral)
[10:43:14] <astronaut> yeah that seems weird now
[10:43:14] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (Read error: Connection reset by peer)
[10:43:14] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (Read error: Connection reset by peer)
[10:43:14] <astronaut> this >it is looking in the global path for /usr/bin/python, not the user ~/.local path
[10:43:14] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Quit: Ping timeout (120 seconds))
[10:43:14] *** Quits: Linux77 (~Linux7_7@186.233.182.243) (Remote host closed the connection)
[10:43:14] *** Quits: seednode1 (~seednode@user/seednode) (Quit: Ping timeout (120 seconds))
[10:43:15] *** quasineutral8 is now known as quasineutral
[10:43:45] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (Quit: Gone)
[10:43:48] *** Joins: seednode1 (~seednode@user/seednode)
[10:44:01] <energizer> what does sys.argv say?
[10:44:03] *** Joins: roguelazer (~jbrown@sietchtabr.roguelazer.net)
[10:44:11] <hexnewbie> I wonder what's good substitute for groupby(sorted(values, key=key), key) in Python 3 with the forbidden < across types now.
[10:44:18] <energizer> and $PYTHONPATH while we're at it
[10:44:19] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Remote host closed the connection)
[10:44:28] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Ping timeout (120 seconds))
[10:44:35] <astronaut> just one line: ['blender']
[10:44:36] *** Joins: Auron (~Auron956@user/auron)
[10:44:55] <energizer> os.environ['PYTHONPATH']
[10:45:15] <KirkMcDonald> hexnewbie: Have the key return something consistently comparable.
[10:45:45] <hexnewbie> Yeah, that I'm doing on a case-by-case bases, but that will be hundred individual cases to fix now
[10:45:52] <astronaut> KeyError: 'PYTHONPATH'
[10:45:54] <energizer> ok
[10:46:15] <KirkMcDonald> hexnewbie: You can generalize it, if necessary.
[10:46:36] <KirkMcDonald> hexnewbie: Define a class that contains a value and defines the comparison operators.
[10:47:08] <KirkMcDonald> hexnewbie: If necessary, reimplement the Python 2 behavior. Or, preferably, something better.
[10:47:12] *** Joins: HaMsTeRs1 (~Thunderbi@182.153.24.55)
[10:47:12] <energizer> eh to figure out why it's doing that we could dive deeper but i'd have to break out some docs and i dont think we need to figure out why it's doing that in order to get you up and running
[10:47:19] <hexnewbie> Hmm, that's a good idea. Thanks. Though I will also need to make sure some of those exceptions don't point to a bug
[10:47:21] *** Joins: chele (~chele@user/chele)
[10:47:24] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[10:48:01] <KirkMcDonald> hexnewbie: Another possibility, which I've used in the past, is to just return a tuple in which each value is of some distinct, known type.
[10:48:26] <KirkMcDonald> hexnewbie: Like, if you're comparing numbers and strings, you have the key function return a tuple of (number, string).
[10:48:51] <KirkMcDonald> hexnewbie: For numbers, it returns (x, ""), and for strings, it returns (0, s). Or whatever.
[10:49:02] *** Quits: HaMsTeRs (~Thunderbi@182.153.11.99) (Ping timeout: 268 seconds)
[10:49:02] *** HaMsTeRs1 is now known as HaMsTeRs
[10:49:04] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:49:11] <KirkMcDonald> hexnewbie: This making all of the key values comparable.
[10:49:25] <KirkMcDonald> s/This/Thus/
[10:49:34] <astronaut> energizer, https://developer.blender.org/rBS79a58eef059ffc3f12d11bd68938cfb1b4cd2462
[10:49:42] <hexnewbie> OK, I grepped the code, and good news, the groupby cases are a lot, but the groupby + sorted cases are quite a few, so I can sort them one by one (I'm surprised what I'm doing with groupby *without* sorted, but that's another matter)
[10:49:51] <astronaut> apparently they did it intentionally
[10:50:06] <astronaut> don't look in ~/.local/lib
[10:50:28] <energizer> ok
[10:50:35] <KirkMcDonald> hexnewbie: I will say that the Python 2 cross-type comparison behavior is basically a mistake, and there's a reason Python 3 dropped it.
[10:50:49] <hexnewbie> Funnily enough, that's a distributed network, and I'm grouping delivery queues on the ID of each connection, I'm using None to signify connection to self. So that's the major one I'll have to fix cleverly :)
[10:50:53] *** Quits: Techcable_ (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[10:51:10] *** Quits: apteryx (~maxim@dsl-153-117.b2b2c.ca) (Ping timeout: 252 seconds)
[10:51:50] <aphysically> re: sentinel values, I saw in the 3.10 release stream there's a new PEP for that and there's general discussion around putting something in stdlib
[10:52:00] <energizer> astronaut: i would look in the blender docs for how to specify a python package directory
[10:52:04] <KirkMcDonald> hexnewbie: Just having the key function return a tuple means you can order things however you want.
[10:52:43] <aphysically> None seems to serve my purpose most of the time (I haven't net needed object()), but that should be an interesting language change
[10:52:48] <aphysically> s/net/yet/
[10:53:18] *** Joins: Techcable (~Techcable@168.235.93.147)
[10:53:38] <astronaut> energizer, they are suggesting I use --python-use-system-env flag
[10:53:59] <astronaut> and now everything works
[10:54:02] <aphysically> if I get a job might I have to work with python 2 code too? D:
[10:54:07] <hexnewbie> KirkMcDonald: Yeah. Also, I am probably glad for the change of behaviour as I did catch two groupby() bugs in code yesterday because of it (not major, the order of a table in a web page was wrong, and I've been using it like that for years). Still, something annoying as Debian 10 is the first to ship a version of Twisted that has all the bits necessary for me to be able to switch to Python 3
[10:54:15] <energizer> astronaut: nice
[10:54:22] <hexnewbie> Yet Debian 11 drops Python 2, so that's a very short porting window
[10:54:42] <energizer> aphysically: might, might not
[10:55:07] * aphysically shudders
[10:55:09] <astronaut> but doesn't make sense, it is breaking addons that use pythons scripts.
[10:55:56] *** Joins: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net)
[10:57:35] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[10:57:39] <hexnewbie> If the sentinel talk is about the sorted behaviour, so far, fixing case by case, half of the cases of groupby() failing seem to be because of None being a sentinel, and the other half seem to be either I'm using the wrong key or calling sorted() on the wrong thing
[10:57:46] <energizer> astronaut: if you want to add your own environment you can use sys.path.insert(0, env)
[10:58:32] <aphysically> yeah it was responding to you, but it wasn't a criticism or particular suggestion (re: sentinel), just current events I thought were interestin
[10:58:33] *** Joins: vladoski (~vladoski@2001:b07:add:d406:2313:4d27:5266:a860)
[10:58:40] <hexnewbie> So, the change is definitely a welcome one. It just... comes unexpected
[10:58:58] *** Quits: JibStyle (~user@c-71-198-134-61.hsd1.ca.comcast.net) (Quit: update)
[10:59:31] <aphysically> I'm headed in for the night, happy 3.10 release day all :)
[11:01:14] <jamwil> Happy day
[11:02:19] <astronaut> thank you, energizer for holding my hand through the entire process. looks like addon users would always need that flag :(
[11:02:33] *** Joins: _xor (~xor@72.49.199.147)
[11:03:18] *** Joins: Samian (~s@user/samian)
[11:03:23] <energizer> np
[11:03:53] *** Joins: apteryx (~maxim@dsl-10-146-244.b2b2c.ca)
[11:03:59] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[11:05:14] *** Quits: seednode1 (~seednode@user/seednode) (Quit: Nihil supernum.)
[11:05:25] *** Joins: Ivii (~Ivyy@2001:a61:13f1:cb01:39fc:d9e3:84ea:cca7)
[11:05:38] *** Joins: seednode1 (~seednode@user/seednode)
[11:05:45] *** dcaro_away is now known as dcaro
[11:06:22] *** Joins: JibStyle (~user@c-71-198-134-61.hsd1.ca.comcast.net)
[11:06:22] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[11:06:47] *** Joins: veek (~veek@117.192.21.20)
[11:07:32] *** Joins: ub (~Thunderbi@178.115.35.209.wireless.dyn.drei.com)
[11:07:51] *** Quits: JibStyle (~user@c-71-198-134-61.hsd1.ca.comcast.net) (Remote host closed the connection)
[11:08:37] <bob_x2> how was it possible to live w/o switch statement in a general purpose programming language ?
[11:08:39] *** Quits: ubert (~Thunderbi@178.115.39.222.wireless.dyn.drei.com) (Ping timeout: 245 seconds)
[11:08:40] *** ub is now known as ubert
[11:08:57] <supakeen> there's plenty of alternatives to a switch.
[11:09:11] <bob_x2> im just joking
[11:09:36] <bob_x2> but i do use switch nd find it readable
[11:09:38] *** Joins: j0k2r (~j0k2r@37.157.230.74)
[11:09:49] *** Quits: hacksword (~dan@107.182.228.102) (Quit: WeeChat 2.3)
[11:11:07] *** Joins: kosh (~kosh@user/kosh)
[11:11:17] *** Joins: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net)
[11:11:28] *** Joins: JibStyle (~user@c-71-198-134-61.hsd1.ca.comcast.net)
[11:11:48] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[11:13:14] *** Quits: gitly (~gitly@148.252.132.201) (Ping timeout: 245 seconds)
[11:13:43] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[11:13:54] *** Quits: Stx (stx@libera/staff/stx) (Ping timeout: 612 seconds)
[11:14:04] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Ping timeout: 245 seconds)
[11:15:31] *** Joins: gitly (~gitly@85.255.236.114)
[11:16:05] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[11:16:37] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[11:17:36] *** Joins: brelod (~me@90.244.150.142)
[11:17:46] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[11:19:25] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[11:23:45] *** Quits: promey (~Promeys@gateway/tor-sasl/promey) (Ping timeout: 276 seconds)
[11:27:47] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:29:32] *** Joins: txtsd (~txtsd@user/txtsd)
[11:29:40] *** Quits: Hypothesis (~Hypothesi@216.163.31.107) (Ping timeout: 252 seconds)
[11:30:11] *** Quits: chenqisu1 (~xirndc@183.217.201.186) (Remote host closed the connection)
[11:31:03] *** Joins: legola (~legola@46.235.101.220)
[11:32:49] *** Joins: arseru (uid515527@user/arseru)
[11:33:05] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 264 seconds)
[11:33:49] *** Joins: Nspace (~Nspace@user/nspace)
[11:33:58] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-bcee31-154.dhcp.inet.fi)
[11:35:13] <arseru> Hi! Is there a library to parse/analyse setup.cfg files? I want to know whether the key 'install_requires'  contains a specific library to trigger some pipelines from that
[11:35:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[11:35:32] *** Quits: legola (~legola@46.235.101.220) (Ping timeout: 246 seconds)
[11:36:01] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:25] *** Joins: legola (~legola@46.235.101.220)
[11:36:31] *** Joins: xensie (~xensie@88-115-238-181.elisa-laajakaista.fi)
[11:37:08] *** Joins: fikran (~fikran@user/fikran)
[11:37:14] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[11:38:15] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[11:38:44] *** Joins: sagax (~sagax_nb@user/sagax)
[11:39:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:43] *** Joins: mrwick (~mrwick@user/mrwick)
[11:42:39] *** Quits: tkazi (~tkazi@user/tkazi) (*.net *.split)
[11:42:39] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[11:42:39] *** Quits: dambuster (~dambuster@185.193.170.225) (*.net *.split)
[11:42:39] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (*.net *.split)
[11:42:39] *** Quits: Duckle (~Duckle@user/duckle) (*.net *.split)
[11:42:39] *** Quits: chowmeined (~chowmeine@user/chowmeined) (*.net *.split)
[11:42:39] *** Quits: jinsun (~quassel@user/jinsun) (*.net *.split)
[11:42:39] *** Quits: cdown (~cdown@163.114.131.1) (*.net *.split)
[11:42:39] *** Quits: Helle (~helle@80-100-16-232.ip.xs4all.nl) (*.net *.split)
[11:42:39] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (*.net *.split)
[11:42:39] *** Quits: jackrabbitslim (~jrs@user/jackrabbitslim) (*.net *.split)
[11:42:39] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (*.net *.split)
[11:42:39] *** Quits: kinabalu (~kinabalu@about/java/kinabalu) (*.net *.split)
[11:42:39] *** Quits: Trieste (T@user/pilgrim) (*.net *.split)
[11:42:39] *** Quits: hendry (~hendry@210.23.22.2) (*.net *.split)
[11:42:39] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[11:42:39] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[11:42:40] *** Quits: greatgatsby__ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (*.net *.split)
[11:42:40] *** Quits: lack (~lack@user/lack) (*.net *.split)
[11:42:40] *** Quits: KSaunderson (~user@142.93.152.208) (*.net *.split)
[11:42:40] *** Quits: zoid (~zoid@user/taxationistheft) (*.net *.split)
[11:42:40] *** Quits: sabet (~sabet@user/sabet) (*.net *.split)
[11:42:40] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (*.net *.split)
[11:42:40] *** Quits: ikwyl6 (~ikwyl6@2.58.44.226) (*.net *.split)
[11:42:40] *** Quits: erica (~erica@user/erica) (*.net *.split)
[11:42:40] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[11:42:40] *** Quits: jmft2 (~JMFT@82.3.54.26) (*.net *.split)
[11:42:40] *** Quits: Allegretto (~allegrett@84-236-85-140.pool.digikabel.hu) (*.net *.split)
[11:42:40] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (*.net *.split)
[11:42:40] *** Quits: CrypticS_ (~CrypticS_@user/crypticsquared) (*.net *.split)
[11:42:40] *** Quits: Phase (~phase@user/phase) (*.net *.split)
[11:42:40] *** Quits: justache (~justache@user/justache) (*.net *.split)
[11:42:40] *** Quits: spenat (~spenat@c-1125235c.012-6-62726f1.bbcust.telenor.se) (*.net *.split)
[11:42:40] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[11:42:40] *** Quits: Cyp (~cyp@213.237.87.7) (*.net *.split)
[11:42:40] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (*.net *.split)
[11:42:40] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[11:42:40] *** Quits: themill (~stuart@debian/stuart) (*.net *.split)
[11:42:40] *** Quits: cation (cation@user/cation) (*.net *.split)
[11:42:40] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (*.net *.split)
[11:42:40] *** Quits: dxrt (~dxrt@user/dxrt) (*.net *.split)
[11:42:40] *** Quits: rud01f (rud0lf@user/rud0lf) (*.net *.split)
[11:42:40] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[11:42:40] *** Quits: mdw (~root@159.65.86.163) (*.net *.split)
[11:42:40] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[11:42:40] *** Quits: streety_ (~streety@li761-24.members.linode.com) (*.net *.split)
[11:42:40] *** Quits: Pilate (~pilate@pilate.io) (*.net *.split)
[11:42:40] *** Quits: operational (~operation@imgonnaf.art) (*.net *.split)
[11:42:40] *** Quits: wils (~wilz@modemcable036.177-131-66.mc.videotron.ca) (*.net *.split)
[11:42:40] *** Quits: randall (~randall@user/randall) (*.net *.split)
[11:42:40] *** Quits: dthpulse_ (~quassel@podciarou.sk) (*.net *.split)
[11:42:40] *** Quits: botfather (~botfather@shell2.dds.nl) (*.net *.split)
[11:42:40] *** Quits: Koffa (jkohvakk@user/koffa) (*.net *.split)
[11:42:40] *** Quits: _0az3 (~az0@user/az0) (*.net *.split)
[11:42:40] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[11:42:40] *** Quits: sunyibo_ (~dorsch@5.2.75.229) (*.net *.split)
[11:42:40] *** Quits: majors_ (~majors@user/majors) (*.net *.split)
[11:42:40] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (*.net *.split)
[11:42:40] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (*.net *.split)
[11:42:40] *** Quits: PocketKiller (PacKetIV@user/packetiv) (*.net *.split)
[11:42:40] *** Quits: davor (~davor@user/davor) (*.net *.split)
[11:42:40] *** Quits: d1b (~db@user/d1b) (*.net *.split)
[11:42:40] *** Quits: jug (~jug@user/jug) (*.net *.split)
[11:42:40] *** Quits: nvz (~user@nvz.farted.online) (*.net *.split)
[11:42:40] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[11:42:40] *** Quits: grnman_ (~grnman@159.89.27.73) (*.net *.split)
[11:42:40] *** Quits: dgw (dgw@sopel/admin/dgw) (*.net *.split)
[11:42:40] *** Quits: Powerhouse6666 (~Powerhous@security.orcacomputers.com) (*.net *.split)
[11:42:40] *** Quits: brachamh (~brachamh@user/brachamh) (*.net *.split)
[11:42:40] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (*.net *.split)
[11:42:40] *** Quits: jamwil (~jamwil@user/jamwil) (*.net *.split)
[11:42:40] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[11:42:40] *** Quits: phy1729 (~phy1729@zsh/wizard/phy1729) (*.net *.split)
[11:42:40] *** Quits: AM (~techman@82-203-161-159.bb.dnainternet.fi) (*.net *.split)
[11:42:40] *** Quits: mabi (~m42e@pb42.de) (*.net *.split)
[11:42:40] *** Quits: d3x (michal@bielaw.ski) (*.net *.split)
[11:42:40] *** Quits: easter_egg (~jeffry@user/easter-egg/x-4406379) (*.net *.split)
[11:43:43] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[11:43:55] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Ping timeout: 268 seconds)
[11:44:02] *** Joins: ravan (~ravan@user/ravan)
[11:44:32] *** Quits: HaMsTeRs (~Thunderbi@182.153.24.55) (Ping timeout: 268 seconds)
[11:45:52] *** Joins: Duckle (~Duckle@user/duckle)
[11:46:26] *** Joins: subho (~subho@2405:201:9001:a805:ac97:bbc:f2c1:c62b)
[11:46:27] <nyuszika7h> I like how you can get `X | Y` in 3.7+ with `from __future__ import annotations`
[11:46:51] <nyuszika7h> 3.6 will be EOL in two months so most people can start using it
[11:49:40] <astronaut> 2.7 hasn't reached it's end of life.
[11:50:08] <astronaut> in my heart!
[11:50:19] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:50:48] *** Joins: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr)
[11:51:27] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[11:52:07] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[11:53:00] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:53:16] *** Quits: subho (~subho@2405:201:9001:a805:ac97:bbc:f2c1:c62b) (Quit: subho)
[11:53:59] *** Quits: iflema (~ian@user/iflema) (Remote host closed the connection)
[11:54:02] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[11:54:24] *** Joins: ulif (~nick@user/ulif)
[11:54:24] *** Joins: tkazi (~tkazi@user/tkazi)
[11:54:24] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[11:54:24] *** Joins: jmft2 (~JMFT@82.3.54.26)
[11:54:24] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[11:54:24] *** Joins: dambuster (~dambuster@185.193.170.225)
[11:54:24] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[11:54:24] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[11:54:24] *** Joins: jinsun (~quassel@user/jinsun)
[11:54:24] *** Joins: cdown (~cdown@163.114.131.1)
[11:54:24] *** Joins: Pilate (~pilate@pilate.io)
[11:54:24] *** Joins: Helle (~helle@80-100-16-232.ip.xs4all.nl)
[11:54:24] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[11:54:24] *** Joins: jackrabbitslim (~jrs@user/jackrabbitslim)
[11:54:24] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[11:54:24] *** Joins: streety_ (~streety@li761-24.members.linode.com)
[11:54:24] *** Joins: kinabalu (~kinabalu@about/java/kinabalu)
[11:54:24] *** Joins: Trieste (T@user/pilgrim)
[11:54:24] *** Joins: hendry (~hendry@210.23.22.2)
[11:54:24] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[11:54:24] *** Joins: vancz (~vancz@user/vancz)
[11:54:24] *** Joins: greatgatsby__ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[11:54:24] *** Joins: zoid (~zoid@user/taxationistheft)
[11:54:24] *** Joins: lack (~lack@user/lack)
[11:54:24] *** Joins: KSaunderson (~user@142.93.152.208)
[11:54:24] *** Joins: sabet (~sabet@user/sabet)
[11:54:24] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[11:54:24] *** Joins: ikwyl6 (~ikwyl6@2.58.44.226)
[11:54:24] *** Joins: erica (~erica@user/erica)
[11:54:24] *** Joins: jancoow (~jancoow@user/jancoow)
[11:54:24] *** Joins: spenat (~spenat@c-1125235c.012-6-62726f1.bbcust.telenor.se)
[11:54:24] *** Joins: Allegretto (~allegrett@84-236-85-140.pool.digikabel.hu)
[11:54:24] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[11:54:24] *** Joins: CrypticS_ (~CrypticS_@user/crypticsquared)
[11:54:24] *** Joins: justache (~justache@user/justache)
[11:54:24] *** Joins: Phase (~phase@user/phase)
[11:54:24] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[11:54:24] *** Joins: Cyp (~cyp@213.237.87.7)
[11:54:24] *** Joins: Trashlord (~trash@user/trashlord)
[11:54:24] *** Joins: themill (~stuart@debian/stuart)
[11:54:24] *** Joins: cation (cation@user/cation)
[11:54:24] *** Joins: comrumino (~comrumino@li87-103.members.linode.com)
[11:54:24] *** Joins: dxrt (~dxrt@user/dxrt)
[11:54:24] *** Joins: rud01f (rud0lf@user/rud0lf)
[11:54:24] *** Joins: fluter (~fluter@user/fluter)
[11:54:24] *** Joins: mdw (~root@159.65.86.163)
[11:54:24] *** Joins: shodan45 (~quassel@107.161.22.155)
[11:54:24] *** Joins: operational (~operation@imgonnaf.art)
[11:54:24] *** Joins: wils (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[11:54:24] *** Joins: randall (~randall@user/randall)
[11:54:24] *** Joins: dthpulse_ (~quassel@podciarou.sk)
[11:54:24] *** Joins: Koffa (jkohvakk@user/koffa)
[11:54:24] *** Joins: botfather (~botfather@shell2.dds.nl)
[11:54:24] *** Joins: _0az3 (~az0@user/az0)
[11:54:24] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[11:54:24] *** Joins: sunyibo_ (~dorsch@5.2.75.229)
[11:54:24] *** Joins: majors_ (~majors@user/majors)
[11:54:24] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[11:54:24] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[11:54:24] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[11:54:24] *** Joins: davor (~davor@user/davor)
[11:54:24] *** Joins: d1b (~db@user/d1b)
[11:54:24] *** Joins: jug (~jug@user/jug)
[11:54:24] *** Joins: nvz (~user@nvz.farted.online)
[11:54:24] *** Joins: rb (~augh@theguntretort.com)
[11:54:24] *** Joins: grnman_ (~grnman@159.89.27.73)
[11:54:24] *** Joins: dgw (dgw@sopel/admin/dgw)
[11:54:24] *** Joins: Powerhouse6666 (~Powerhous@security.orcacomputers.com)
[11:54:24] *** Joins: brachamh (~brachamh@user/brachamh)
[11:54:24] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[11:54:24] *** Joins: jamwil (~jamwil@user/jamwil)
[11:54:24] *** Joins: shan (shan@cyblog/maintainer/shan)
[11:54:24] *** Joins: phy1729 (~phy1729@zsh/wizard/phy1729)
[11:54:24] *** Joins: AM (~techman@82-203-161-159.bb.dnainternet.fi)
[11:54:24] *** Joins: mabi (~m42e@pb42.de)
[11:54:24] *** Joins: d3x (michal@bielaw.ski)
[11:54:24] *** Joins: easter_egg (~jeffry@user/easter-egg/x-4406379)
[11:54:51] *** Quits: dre (~dre@2001:8003:c932:c301:bf2a:6b91:a200:3687) (Quit: Leaving)
[11:55:20] *** Quits: cation (cation@user/cation) (Max SendQ exceeded)
[11:55:20] *** Quits: Trieste (T@user/pilgrim) (Max SendQ exceeded)
[11:55:21] *** Quits: justache (~justache@user/justache) (Max SendQ exceeded)
[11:55:30] *** Quits: erica (~erica@user/erica) (Max SendQ exceeded)
[11:55:52] *** Quits: JibStyle (~user@c-71-198-134-61.hsd1.ca.comcast.net) (Quit: ERC (IRC client for Emacs 27.2))
[11:55:58] *** Joins: cation (cation@user/cation)
[11:56:06] *** Joins: erica (~erica@user/erica)
[11:56:41] *** Joins: justache (~justache@user/justache)
[11:57:49] *** Quits: kurfen (~kurfen@37.120.204.67) (Ping timeout: 252 seconds)
[11:57:54] <graingert[m]> <astronaut> "in my heart!" <- it's pretty dead
[11:57:55] <graingert[m]> <arseru> "Hi! Is there a library to parse..." <- you use build
[11:58:19] *** Joins: iflema (~ian@user/iflema)
[11:58:52] <graingert[m]> <arseru> "Hi! Is there a library to parse..." <- https://pypa-build.readthedocs.io/en/latest/api.html#build.util.project_wheel_metadata
[11:58:56] <arseru> graingert[m]: this one? https://pypa-build.readthedocs.io
[11:59:08] <arseru> thanks graingert[m] !
[11:59:45] *** Joins: kurfen (~kurfen@lfbn-ann-1-215-215.w86-200.abo.wanadoo.fr)
[12:00:17] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:00:23] *** Joins: Trieste (T@user/pilgrim)
[12:00:32] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[12:00:49] <arseru> also, another question in the air: I want to build a docker image to use as base image for Python projects, where I have an activated virtualenv by default. Where can I look for best practices for that?
[12:01:45] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[12:02:24] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[12:02:44] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[12:03:48] <graingert[m]> arseru: This also works for any build able project - you should use pep 621 metadata if you can so it's much faster
[12:04:16] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 268 seconds)
[12:05:07] <graingert[m]> arseru: You just set the PATH to include the virtual environment bin directory
[12:05:16] *** Joins: ravan_ (~ravan@user/ravan)
[12:05:30] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:05:30] <arseru> graingert[m]: at the beginning of the PATH, or end?
[12:05:33] *** Joins: Nspace (~Nspace@user/nspace)
[12:05:44] *** Quits: botfather (~botfather@shell2.dds.nl) (Remote host closed the connection)
[12:06:23] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[12:06:26] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:06:47] <arseru> the pep 621 vs. some of the docs get me confused... for example I've been following this guide https://packaging.python.org/tutorials/packaging-projects/ but it says to only use pyproject.toml to specify build tools
[12:06:58] <lesshaste> what's a good library for graphs (nodes and vertices)? I used to use networkx but it seems it is not so popular these days
[12:08:01] <jinsun> setuptools doesn't support pep 621 yet I think, the guide will be updated when that happens probably
[12:08:38] <energizer> lesshaste: networkx is still popular
[12:08:45] <lesshaste> energizer, ok thanks
[12:09:10] <energizer> lesshaste: there is also igraph
[12:09:19] <lesshaste> energizer, thanks!
[12:09:29] *** Quits: Keira (~k@lulzsec.co.uk) (Ping timeout: 245 seconds)
[12:10:42] *** Quits: legola (~legola@46.235.101.220) (Remote host closed the connection)
[12:11:24] <arseru> if someone could provide me with a good pyproject.toml to learn how to get rid of setup.{cfg,py}, that would be awesome
[12:12:34] *** Quits: Samian (~s@user/samian) (Ping timeout: 252 seconds)
[12:12:39] <energizer> arseru: just use poetry
[12:15:02] *** Joins: botfather (~botfather@shell2.dds.nl)
[12:20:41] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[12:21:20] *** Joins: shad (~shad@user/shad)
[12:21:39] <jamwil> +1 -- I held out for a long time but poetry is pretty effortless
[12:21:46] *** Joins: Keira (~k@lulzsec.co.uk)
[12:21:56] *** Quits: xiongxin (~quassel@113.116.35.70) (Ping timeout: 250 seconds)
[12:23:15] *** Joins: arinov (~arinov@213.194.126.155)
[12:24:42] <graingert[m]> <arseru> "graingert: at the beginning of..." <- Uhh whatever activate does
[12:25:02] <graingert[m]> <arseru> "if someone could provide me with..." <- flit automates a lot for you
[12:25:23] *** lericson_ is now known as lericson
[12:25:23] *** Joins: thiras (~thiras@user/thiras)
[12:26:12] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[12:26:26] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[12:27:06] <Affliction> Ahh, good job pickle: _pickle.PicklingError: Can't pickle <class 'c_remindme.Reminder'>: it's not the same object as c_remindme.Reminder
[12:27:12] <Affliction> The fun artifacts of hot-reloading modules
[12:28:38] *** Joins: legola (~legola@46.235.101.220)
[12:29:27] <Affliction> Confused me for a moment, since the pickle format pretty much just stores the name, I suppose on the serialisation path it compares the object's class with what it resolves to, which will be different after a reload.
[12:29:48] *** Joins: eem (~eem@user/eem)
[12:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[12:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[12:33:46] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[12:36:00] <graingert[m]> I didn't know it bothered checking
[12:36:14] <graingert[m]> Don't use pickle I guess
[12:36:27] <nyuszika7h> arseru: should be the beginning, otherwise it will just use system Python from the image
[12:36:39] <nyuszika7h> +1 for poetry though, it's nice
[12:36:40] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 250 seconds)
[12:36:46] <graingert[m]> And don't use importlib.reload probably the one thing worse than pickle
[12:37:36] <arseru> actually I tried moving all my projects to poetry but it didn't cover all my use cases (and I don't like that you have to modify the version in 2 different places), maybe I'll try flit this time :)
[12:41:10] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 252 seconds)
[12:45:18] <kosh> pickle should be used very rarely
[12:45:32] *** Joins: inomoz (~inomoz@176.59.100.163)
[12:45:41] <kosh> it is used for multiprocessing, it works well for checkpoints
[12:46:15] * supakeen pickles kosh
[12:46:35] <hexnewbie> importlib.reload(pickle)
[12:47:18] <kosh> most of the parallel processing libraries for python I have seen end up using pickle in some way
[12:48:06] <kosh> although I wish I knew of a lower overhead way to hand the data I need to another process
[12:48:45] <kosh> actually I just wish I could do real parallel threading in python without the GIL
[12:49:18] *** Quits: moto_ (~moto@user/moto) (Read error: Connection reset by peer)
[12:49:31] <hexnewbie> Not reloading modules lead me to some bad practices, including putting a whole lot of Python code in my web page templates as my web templates were reloaded, and that was easier than restarting my daemon for each change. After some years of horribleness, I did introduce a socket API to reload some modules, but to this day it can still reload two modules
[12:49:38] *** Joins: moto (~moto@user/moto)
[12:50:04] <hexnewbie> and those two modules are marked that they can only contain functions, no classes (classes break reloading), and can only be imported in whole, never with from module import x, y, z
[12:51:02] <hexnewbie> I guess classes whose instances are ephemeral are also OK
[12:51:28] <kosh> yes it can be done if you are very careful
[12:51:32] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[12:55:06] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Ping timeout: 245 seconds)
[12:55:27] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-bcee31-154.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:55:45] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[12:56:06] *** Joins: Thanatos (~Thanatos@105.112.53.94)
[12:57:22] <hexnewbie> Hmm, in my case from module import x, y, z is OK, because said modules are only used from web templates, and I did rig the program to reload all web templates whenever a module was reloaded.
[12:57:24] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Ping timeout: 245 seconds)
[12:58:11] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.37)
[12:58:20] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:00:14] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[13:00:55] *** Joins: mat001 (~mat001@213.143.69.121)
[13:03:10] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.37) (Ping timeout: 252 seconds)
[13:05:08] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[13:05:44] *** Joins: promeys (~Promeys@gateway/tor-sasl/promey)
[13:06:49] *** Joins: mcope (~matt@user/mcope)
[13:09:32] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[13:09:42] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Ping timeout: 276 seconds)
[13:10:06] <kosh> I don't like from foo import x,y,z and try to remove it when I see it
[13:10:36] <kosh> it makes it hard to figure out where a function comes from
[13:11:06] <kosh> and it makes learning a new code base take longer
[13:11:14] <bjs> PEP Idea: `from * import func`
[13:12:21] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:5816:471c:dab0:e3c6) (Quit: Textual IRC Client: www.textualapp.com)
[13:12:32] <bjs> then you dont have to worry where the function was defined :D
[13:12:45] *** Joins: robz (~robz@109.78.229.54)
[13:13:49] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[13:14:08] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[13:14:30] * kosh sets bjs on fire
[13:14:33] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:14:34] * kosh hands out marshmallows
[13:16:37] <jinsun_> from foo import x is better than import foo as f, then f.x, my colleagues like to invent horrible short names for modules they use
[13:17:38] <kosh> import numpy as np  is fairly standard but I normally just do import numpy
[13:17:54] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[13:17:58] <duoi> how about this for a pep
[13:18:04] <duoi> the smiley face operator :>
[13:18:30] <duoi> say you want to get something from a dict and the value is none, instead of doing foo.get('bar') or baz
[13:18:44] <duoi> you can do foo.get('bar' :> 'baz')
[13:19:49] *** Joins: plastico (~plastico@neomutt/plastico)
[13:19:57] <kosh> foo.get('bar', baz)
[13:20:14] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[13:20:24] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[13:20:35] <duoi> kosh if 'baz' exists in the dictionary it will always return that value, baz would be a default if the key doesnt exist only
[13:20:37] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-bcee31-154.dhcp.inet.fi)
[13:20:58] <jinsun_> just allow defining custom operators, anything with colon, angle brackets or pipes
[13:21:06] <UnnamedBeer> No, baz will only be returned if bar is not in dict
[13:21:13] <kosh> correct
[13:23:35] <bjs> duoi: aren't you just describing what .get(key, default) already does?
[13:23:40] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[13:23:51] <duoi> bjs nop
[13:23:55] <duoi> this is exatly why we need the pep
[13:24:00] <duoi> the current implementation is too confusing
[13:24:01] <bjs> duoi: then I misunderstood what you're suggesting
[13:24:07] <bjs> duoi: it's confusing?  why is it confusing?
[13:24:41] <duoi> the smiley operator :> is a default for a falsey value, regardless of whether or not the key exists
[13:25:05] <bjs> duoi: hmm
[13:25:07] <duoi> many people think that .get('foo', bar) sets bar to be the default if the value is falsey
[13:25:10] <duoi> we need this pep
[13:25:12] <kosh> I don't get what is confusing   dict.get(key, value_if_key_does_not_exist)
[13:25:19] <duoi> who wants to cosign it
[13:25:39] <kosh> nope
[13:25:44] <bjs> duoi: if you want that then `d.get("key") or value_if_falsey` works fine
[13:25:50] <hexnewbie> duoi: OK, but if you wanted an alternative on a falsey value, doesn't “d.get(key) or value” already do that? The operator you want is ‘or’
[13:25:53] <kosh> I have not even seen someone use that code pattern before
[13:26:01] <bjs> duoi: also your :> suggestion is a bit weird because it's operating on the key not the value
[13:26:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: Textual IRC Client: www.textualapp.com)
[13:27:03] <hexnewbie> It would also make more sense to use :< since that's what you'll use when you're *unhappy* with your initial result
[13:27:07] <bjs> which seems confusing if your whole point is that the key isn't what's important,  only the truthiness of the value.
[13:27:30] <duoi> i feel attacked
[13:27:43] <duoi> this is how Guido van Rossum must have felt with PEP 572
[13:28:02] <bjs> also :> and <: are operators that are commonly used elsewhere with other meaning, so probably you'd have to come up with something else
[13:28:06] <duoi> or, more fittingly, how Jesus felt when Judas sold him down the river
[13:28:14] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 245 seconds)
[13:28:30] <bjs> duoi: I'm supposed to get paid for this? :P
[13:28:56] <bjs> Look at me, doing it for free when I could be making 30 pieces of silver each time
[13:29:18] <duoi> bjs best i can do is Reddit Silver
[13:29:43] <duoi> or, alternatively, i can vouch you on dead HN comments
[13:31:53] *** Joins: CoolerX (~CoolerX@user/coolerx)
[13:31:58] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:32:01] <arseru> graingert[m]: flit looks nice, thanks for the tip :)
[13:33:22] <Awoobis> Im trying to fix up some cursed logging code that wants to log the qualname of its caller. Is there a way for me to access the function object (if any) of my caller? it seems I can get a code object which might have what I want but that seems rather brittle
[13:33:25] *** Quits: txtsd (~txtsd@user/txtsd) (Quit: WeeChat 3.3)
[13:33:39] <Awoobis> the code currently just scans the locals of the upper frame for cls and self, and works based on those
[13:34:19] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[13:37:51] *** Joins: ravan__ (~ravan@user/ravan)
[13:40:04] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[13:40:22] *** Quits: ravan_ (~ravan@user/ravan) (Ping timeout: 250 seconds)
[13:41:29] *** Quits: swensson (~swensson@213.88.131.10) (Quit: Client closed)
[13:41:38] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Quit: Client closed)
[13:41:43] *** Quits: rannnn8888 (~rannnn888@bzq-109-65-168-133.red.bezeqint.net) (Quit: Client closed)
[13:41:49] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[13:41:55] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (Quit: WeeChat 3.0.1)
[13:44:29] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[13:45:06] *** Joins: swensson (~swensson@213.88.131.10)
[13:46:28] *** Joins: fikran (~fikran@user/fikran)
[13:49:10] *** Quits: meti_ (~meti@user/meti) (Ping timeout: 260 seconds)
[13:49:59] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:51:12] <graingert[m]> <Awoobis> "Im trying to fix up some..." <- warnings does this with `warnings.warn(..., stacklevel=2)` so it's not toally absurd
[13:51:13] <graingert[m]> s/toally/totally/
[13:51:13] <graingert[m]> s/totally/torally/
[13:51:17] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[13:51:34] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 245 seconds)
[13:51:36] <Awoobis> the idea isnt, the code that is used is terrifying
[13:51:49] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:52:22] *** Joins: alzgh (~alzgh@user/alzgh)
[13:53:03] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[13:54:07] <Awoobis> but I shall look though warnings and see how it works
[13:54:10] <Awoobis> thanks for the tip :D
[13:54:11] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[13:54:24] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[13:55:09] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:56:08] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[13:58:55] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[13:59:19] *** Quits: veek (~veek@117.192.21.20) (Quit: Leaving)
[13:59:33] *** Quits: promeys (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[13:59:49] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[14:00:38] *** Joins: ThanatosJ (~Thanatos@105.112.53.94)
[14:02:55] *** Quits: Payam (~Payam@138.106.57.132) (Quit: Client closed)
[14:03:29] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[14:03:35] *** Quits: Thanatos (~Thanatos@105.112.53.94) (Ping timeout: 246 seconds)
[14:03:43] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[14:03:58] *** Quits: ravan__ (~ravan@user/ravan) (Remote host closed the connection)
[14:05:07] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:05:20] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Quit: WeeChat 2.8)
[14:05:20] *** dcaro is now known as dcaro_lunch
[14:05:36] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[14:06:04] *** Joins: Payam (~Payam@138.106.57.132)
[14:06:09] *** Joins: incal (~user@c-178e225c.021-67-7570702.bbcust.telenor.se)
[14:08:09] <incal> o/ can I have static variables in functions (methods) in Python, i.e. that are only evaluated once? local constants if you will? TIA
[14:08:58] <nedbat> incal: Python doesn't have anything like C's "static locals"
[14:09:35] <Yhg1s> incal: there are module-global constants, though, which can serve the same purpose.
[14:10:05] *** Joins: paul424 (~tom@ip-5-172-236-134.multi.internet.cyfrowypolsat.pl)
[14:10:10] <incal> nedbat, OK, what do you do then if you have a method with stuff that only needs to be eval'd once?
[14:10:38] <nedbat> incal: a global (which is actually only global to the module (file) it is in)
[14:10:40] <Yhg1s> it depends on the situation. Only call it once, usually. Perhaps using a global variable as a cache.
[14:10:42] *** Quits: darkstarx (~darkstard@2601:1c2:300:c8a0::f2b6) (Ping timeout: 250 seconds)
[14:10:43] <paul424> constexpr to the rescue .... wait that's not c++
[14:11:03] *** Quits: Payam (~Payam@138.106.57.132) (Quit: Client closed)
[14:11:14] *** Joins: Payam (~Payam@138.106.57.132)
[14:11:38] <incal> Yhg1s, it is not called once, hence the problem. move the vars from the method to ... where?
[14:11:47] *** Joins: darkstardevx (~darkstard@c-24-21-53-33.hsd1.or.comcast.net)
[14:11:49] <incal> or "problem", style issue perhaps :)
[14:13:53] *** Joins: millido (~millido@84.210.150.128)
[14:14:01] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[14:14:07] *** Joins: Thanatos (~Thanatos@105.112.53.94)
[14:14:10] *** Quits: ThanatosJ (~Thanatos@105.112.53.94) (Read error: Connection reset by peer)
[14:14:23] <incal> if I move them from the method to the class, should I then set it in __init__ with a self.? or just in the class? or outside of the class in the same file?
[14:14:27] <Yhg1s> incal: unfortunately Python is different enough from C that it's difficult to give general advice on this. There are some examples in the stdlib of different use-cases that you might solve with static locals in C, like tempfile.gettempdir() (although that particular one is thread-safe, which isn't the case for C static locals)
[14:14:45] <Yhg1s> incal: it depends on what you're moving. (It would be a lot easier if you could show some code)
[14:15:33] <incal> Yhg1s, sure, https://dataswamp.org/~incal/bot/sth.py lines 341-400
[14:16:30] *** Quits: j0k2r (~j0k2r@37.157.230.74) (Quit: Client closed)
[14:17:44] <Yhg1s> I would probably make that use string templating of some kind, to interpolate self.nick at the right time, and then put it all in a global variable, or a separate configuration file.
[14:18:29] <Yhg1s> Or, instead of having a list of lists of commands, make each command a method on the class, or a dict on the class.
[14:19:19] *** Joins: jgrout (~jgrout@pool-71-174-224-95.bstnma.fios.verizon.net)
[14:19:25] *** Parts: feliks (~feliks@user/feliks) (WeeChat 2.8)
[14:19:36] <incal> global variable, i.e. outside the class? but isn't that un-modular since only the class uses it? or one shouldn't care about that?
[14:19:51] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-bcee31-154.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:20:04] <Yhg1s> incal: it's just as 'modular' as a static local in C would be.
[14:20:32] <incal> well, if we stick to Python then ...
[14:21:11] <incal> but OK, a global variable it is ... thanks :)
[14:21:11] <Yhg1s> You can also make it a class attribute, by putting it in the class body outside of a method. That's still just as global, you can just more easily change it in subclasses. It's not clear if that would be a benefit in your case.
[14:21:12] <bjs> incal: global variables are just fine :)
[14:21:19] <incal> OK!
[14:21:32] <incal> :)
[14:22:54] <rendar> how can i check if the message of an exception is None?
[14:24:30] <bjs> rendar: exceptions don't typically store a "message",  what kind of exception are you referring to?
[14:24:41] <bjs> rendar: they do have .args which is (usually) just the args passed to the __init__
[14:24:45] <rendar> bjs, ValueError("Hi")
[14:24:59] <bjs> rendar: that will have .args=("Hi",)
[14:25:16] <rendar> bjs, and ValueError() will have .args=None i guess?
[14:25:32] <bjs> rendar: no, it will have .args=()
[14:25:50] <bjs> rendar: where are you seeing None ?
[14:26:05] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-bcee31-154.dhcp.inet.fi)
[14:26:13] <rendar> ok ok, i see
[14:26:46] <rendar> on `except asyncio.Cancel: ... ` block, should i call 'raise' usually? so also parent awaits will cancel?
[14:27:07] <bjs> rendar: yes, if you don't re-raise you will swallow/cancel the cancellation
[14:27:29] <bjs> unless of course, that's exactly what you wanted to do :)
[14:27:34] <rendar> bjs, right, and .. there are some cases where swallow the cancellation is a good thing?
[14:28:09] <bjs> rendar: sure
[14:28:17] <rendar> for instance?
[14:28:34] <bjs> infact asyncio gives you ways to shield from cancellation entirely https://docs.python.org/3/library/asyncio-task.html#shielding-from-cancellation
[14:29:20] <rendar> i see
[14:29:24] *** Joins: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl)
[14:29:40] <rendar> but i don't know if cancellation shielding is a good thing
[14:29:52] <bjs> rendar: either because you want to not cancel right now,  or if you want to postpone cancellation until a later point
[14:30:02] <rendar> if that blocks, and is shielded, you get an unstoppable task, basically
[14:30:04] <bjs> remember you don't get to decide *where* the cancel will appear
[14:30:11] <bjs> maybe you want to keep going for a bit before actually stopping
[14:30:20] <bjs> rendar: blocks?
[14:30:45] <rendar> well, consider an application that wanna exit, it cancels everything but if there is something that "shields"...
[14:30:54] <rendar> and continue execution...
[14:30:56] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[14:30:58] <bjs> yes
[14:31:17] <bjs> obviously you don't want to shield huge parts of your program
[14:31:24] <bjs> but small critical moments might be a good idea to shield
[14:31:26] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:32:49] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 252 seconds)
[14:32:49] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[14:32:50] <rendar> ok, i see
[14:34:09] <bjs> i mean i guess it's a bit abstract but you can surely imagine situations where you may be doing multiple things and it's safer to let them finish and then cancel rather than just killing it outright immediately
[14:34:19] <rendar> also, there is this asyncio.Lock, what is its purpose? i mean, here we are in single-thread world, why the need for a lock?
[14:34:24] <bjs> e.g. if you're in the middle of doing some juggling of a file or whatever
[14:34:34] *** Quits: paul424 (~tom@ip-5-172-236-134.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[14:34:38] <bjs> rendar: for the same reason you have a threading Lock,  except for when tasks need mutual exclusion over some resource
[14:35:00] <rendar> ok, that's just an asyncio.Semaphore with value=1 then
[14:35:22] <bjs> rendar: I mean the same as a threading Lock is basically a threading Semaphore with value=1
[14:35:31] <rendar> yep
[14:35:33] <rendar> indeed
[14:35:42] <bjs> rendar: it's for the same purpose,  it's just that async means you need them a lot less
[14:35:44] <rendar> well, not always, you may have a spinlock
[14:35:52] <bjs> rendar: I said basically :)
[14:35:56] <rendar> :)
[14:36:05] <bjs> the async one can be a spinlock too
[14:36:08] <bjs> sorta
[14:36:12] <rendar> what?
[14:36:22] <bjs> rendar: `while locked: await asyncio.sleep(0)`
[14:36:32] <bjs> is a spinlock...
[14:36:36] <rendar> i see, but that isn't a spinlock, it doesn't spin!
[14:37:10] <bjs> rendar: I mean sure it is, it's spinning and the scheduler can switch away every now and again
[14:37:19] <rendar> the await will release the execution, so you don't have something spinning, literally speaking
[14:37:32] <bjs> rendar: I mean almost every real spinlock has a yield of some kind in it
[14:37:45] <rendar> you just have a coroutine that will be scheduler and rescheduled again and again, so you may call it a reschelock
[14:38:11] <incal> unbelievable, I got away with every single # TODO in the code all but instantly using global variables :)
[14:38:13] <bjs> rendar: sure but threaded spinlocks are the same, if it actually just span and never released execution you'd just have a brick that gets warm
[14:38:19] <rendar> well, the most basic spinlocks are just loops over atomic integers
[14:38:23] <mrtnt_> Is such function a good practice to read in configuration from an INI file: https://paste.debian.net/hidden/51b36037/ ? For example, it uses global variables which is usually considered a bad practice.
[14:38:23] <bjs> all spinlocks need to release execution
[14:38:43] <bjs> at some point, either voluntarily or the scheduler forcing it to
[14:38:49] <incal> I said devel in Python is super-fast even to a noob like me but with this restriction lifted it should be even faster
[14:39:01] <rendar> bjs, ok
[14:39:09] <wib_jonas> is it released_
[14:39:30] <bjs> rendar: I mean the point is, that you don't need to use a Semaphore to implement either;  but you can imagine a Lock as a kind of Semaphore with initial value=1
[14:40:00] <rendar> yes
[14:40:02] <bjs> rendar: and you'd use the asyncio.Lock in the same way you'd use the threading.Lock
[14:40:11] <wib_jonas> https://www.python.org/downloads/ claims that python 3.10 is released; but https://docs.python.org/3/ seems to think it's not released yet
[14:40:13] <rendar> even a spinlock, abtractly speaking is a semaphore with value=1
[14:40:54] <bjs> rendar: imagine `x = await r.get(); x += 1; await r.put(x)`  for some resource r (idk, a file? or something)  you have the same problem as you do with threading
[14:41:09] <bjs> and a Lock can help make sure another task doesn't get "between" the two awaits there
[14:41:24] <rendar> yes, right
[14:42:06] <bjs> rendar: just because of the way asyncio works, that it only switches at an `await`,  you don't need these primitive synchronization mechanisms anywhere near as often
[14:42:25] <rendar> indeed
[14:42:44] <bjs> rendar: but the fundamental concurrency problems that semaphores and locks exist to solve don't go away :(
[14:42:55] <bjs> wib_jonas: is what released
[14:43:29] <wib_jonas> bjs: python 3.10
[14:43:35] <bjs> wib_jonas: yes
[14:43:45] <wib_jonas> ok, then https://docs.python.org/3/ is the one that's lying
[14:44:04] <bjs> wib_jonas: no, it's just the docs haven't been updated yet
[14:44:15] <bjs> nedbat: ^
[14:44:29] <nedbat> bjs: huh?
[14:44:43] <rendar> a little script of mine, https://bpa.st/YDAA
[14:44:48] <nedbat> hmm, i have nothing to do with that :)
[14:44:59] <bjs> nedbat: no but you might know who does :P
[14:45:46] *** Joins: thiras_ (~thiras@user/thiras)
[14:46:34] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:47:50] <Dantalion> Congrats on 3.10, the match statement looks very powerfull I can't wait to use it
[14:48:07] <Dantalion> It is going to remove a substantial amount of isinstance, hasattr clutter
[14:48:08] *** Joins: mcope_ (~matt@user/mcope)
[14:48:42] *** Parts: incal (~user@c-178e225c.021-67-7570702.bbcust.telenor.se) (ERC (IRC client for Emacs 29.0.50))
[14:48:46] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[14:49:16] *** Quits: mcope (~matt@user/mcope) (Ping timeout: 250 seconds)
[14:49:19] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[14:51:54] <rendar> i agree
[14:52:06] <rendar> but i also think that the match thing should have been into py since 3.0
[14:53:41] *** mcope_ is now known as mcope
[14:55:44] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[14:55:45] <timothy> hi, I think I found a bug in connect: https://paste.centos.org/view/93d6532a
[14:55:56] <timothy> is it a bug or some documnented stuff?
[14:56:41] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[14:59:14] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[15:01:22] *** Joins: AutomatedTester (uid395371@selenium/developer/AutomatedTester)
[15:02:52] *** Joins: p-i- (~root@155.138.135.122)
[15:03:48] <p-i-> This is wierd. My prompt shows (.venv) i.e. it shows it is using a .venv. However 'which python' reports /usr/bin/python
[15:04:07] *** Joins: xiaguan (~parsley@2604:180:f1::173)
[15:04:15] <nedbat> p-i-: `echo $PATH`
[15:04:18] <p-i-> And even if I explicitly `. .venv/bin/activate` it doesn't change a thing.
[15:04:55] <p-i-> What's confusing me is why today is different.
[15:05:05] <p-i-> I've been using my .venv for weeks automatically
[15:05:29] <p-i-> bash just finds it
[15:05:35] <p-i-> but not today it seems
[15:05:45] <nedbat> p-i-: the colder weather shrinks the contacts on the .bashrc, which makes it just a little more fragile.
[15:05:55] <p-i-> :]
[15:06:33] *** Joins: xiongxin (~quassel@113.116.35.70)
[15:06:45] <p-i-> How does my system know that today is the one day this month I have a deadline?
[15:06:51] *** Quits: Payam (~Payam@138.106.57.132) (Quit: Client closed)
[15:08:13] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Quit: Client closed)
[15:10:12] <p-i-> How can . .venv/bin/activate be failing?
[15:10:26] <p-i-> How does it work when it _does_ work?
[15:10:35] *** Joins: dg_dg (~dg_dg@191.101.31.17)
[15:10:47] *** Joins: pro_z (~pro_z@37.214.40.135)
[15:10:52] <bjs> p-i-: . is shell syntax to source a shell file.  the main thing activate does is set PATH
[15:11:08] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 246 seconds)
[15:11:34] <p-i-> ok now I understand what nedbad was saying earlier
[15:11:50] <p-i-> And I see the first entry in my path is that of my .venv
[15:12:13] <bjs> p-i-: you see .venv/bin/  on your PATH?
[15:12:35] <bjs> p-i-: as a sanity check, what do you see if you `ls .venv/bin/`
[15:12:36] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[15:12:37] <p-i-> Ah now I see it. The folder is wrong.
[15:12:50] <p-i-> I must have moved the containing folder
[15:12:52] <bjs> p-i-: did you try move or change the venv?
[15:12:54] <bjs> ah
[15:12:56] <bjs> that might do it :P
[15:13:10] <p-i-> So my .venv is b0rked and I need to create from scratch?
[15:13:43] <p-i-> Oddly VSCode linter seems to still be working with it
[15:13:54] <azidhaka> Hi everyone, i've got a function find_agent() which finds which member of a list of strings appears first in another big string. https://bpa.st/PKLQ Somehow i am not happy with that function, any suggestions?
[15:14:46] <Repiphany> regex
[15:15:28] <bjs> p-i-: yes, the activate script hard-codes the paths.  If you move the directories around those paths will be wrong and it won't work anymore.  But venvs are totally isolated and independent, you can just `rm` them and re-make them and all will be fine.
[15:15:31] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[15:16:10] <Wulf> azidhaka: what's the desired result?
[15:16:18] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[15:16:23] <azidhaka> Repiphany: can you please give me a simple example
[15:16:29] *** Quits: thiras_ (~thiras@user/thiras) (Remote host closed the connection)
[15:17:27] *** Joins: goepsilongo (~chacho@2603-7000-ab00-62ed-e8e0-40c9-c788-8ef8.res6.spectrum.com)
[15:17:32] <Wulf> azidhaka: provide example some_long_text and desired output
[15:17:59] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[15:18:15] <azidhaka> Wulf: the result is: for a number of big texts, i have to find which string from the dict appears first and count +1 on that key
[15:18:23] *** Joins: thiras_ (~thiras@user/thiras)
[15:19:00] *** Quits: carl-- (~carl-@185.103.188.130) (Remote host closed the connection)
[15:19:11] *** Joins: y1n-v1 (~y1n@178.165.200.225.wireless.dyn.drei.com)
[15:19:43] <azidhaka> Wulf: it is really simple, the texts are plain text email messages and the signatures (Regards, John Doe) underneath them are the things that are counted
[15:19:56] <p-i-> bjs: But the .venv itself shouldn't keep a stored record of its absolute location, right?
[15:20:02] <Repiphany> azidhaka: https://bpa.st/G7BQ
[15:20:12] <bjs> p-i-: yes it does, because the PATH has absolute locations and its job is to set the PATH
[15:20:31] <p-i-> That's `activate`'s job, no?
[15:20:34] <azidhaka> Wulf: i am indexing their locations, because there can be a couple of signatures on replied emails
[15:20:40] <bjs> p-i-: yes, and activate contains hardcoded paths to do that
[15:20:49] <p-i-> oh ok
[15:21:09] <bjs> p-i-: cat .venv/bin/activate and see what it does
[15:21:15] <bjs> I recommend just deleting the venv and re-making it
[15:21:24] <p-i-> yeah doing it now
[15:21:58] <azidhaka> Repiphany: thanks a lot, much clear that way
[15:21:59] <Wulf> azidhaka: pattern = re.compile("(" + "|".join(re.escape(name) for name in agents.keys()) + ")")
[15:22:50] *** Quits: Proxysna (~Proxysna@62.119.254.142) (Remote host closed the connection)
[15:23:51] <azidhaka> Wulf: beautiful, thanks
[15:24:03] *** Quits: p-i- (~root@155.138.135.122) (Quit: Lost terminal)
[15:24:32] <Wulf> azidhaka: pattern.search("Dear agent Jane Doe. Please terminate agent James Doakes. Yours truly, John Doe")
[15:24:41] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:26:02] *** Joins: Proxysna (~Proxysna@185.251.89.199)
[15:27:08] *** Joins: Payam (~Payam@138.106.57.132)
[15:28:26] *** Quits: Strom (strom@fedora/strom) ()
[15:29:45] *** Joins: computeiro (~Wender@189.37.66.30)
[15:30:03] *** Joins: Strom (strom@fedora/strom)
[15:30:14] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 268 seconds)
[15:30:40] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:31:00] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[15:31:32] <graingert[m]> <p-i-> "bjs: But the .venv itself..." <- you can make a relocatable virtualenv but it's mostly broken
[15:31:32] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:32:14] <graingert[m]> https://virtualenv.pypa.io/en/legacy/userguide.html#making-environments-relocatable
[15:32:21] <graingert[m]> but like don't do it
[15:33:19] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[15:34:25] <bjs> graingert[m]: why mention it :P
[15:35:01] <graingert[m]> oh woops p-i- that feature is *TOP* secret
[15:35:17] <bjs> graingert[m]: I mean it's not a secret feature, it's a dead feature that only existed in virtualenv
[15:35:24] <bjs> I don't think modern virtualenvs even have it anymore
[15:35:28] <graingert[m]> it's mostly dead
[15:35:54] <graingert[m]> oh indeed it's properly dead
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:02] <graingert[m]> didn't realize it was the legacy docs
[15:36:17] <graingert[m]> p-i-: yeah straight up you can't do it
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:27] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[15:38:41] <Masklin_Gurder> So... I have a problem. I have one set of coordinates, and a second set of coordinate intervals. About 100k elements in each set. I need to go through all coordinates and for every coordinate I go through, I need to check in what intervals it is. Can I do this without 100k squared iterations?
[15:39:28] <Wulf> Masklin_Gurder: got examples for "coordinate" and "coordinate interval"?
[15:39:37] <wib_jonas> Maskling_Gurder: the short answer is yes, but unless these coordinates are on-dimensional, it's not a trivial thing
[15:39:38] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:d07:31cd:7def:7aea)
[15:39:41] *** Joins: Mrcrypto (~Utkarsh@180.151.244.234)
[15:40:00] <Masklin_Gurder> Wulf: Coordinate example: 2315512, Coordinate interval example: (1e4,1e5)
[15:40:18] <wib_jonas> Masklin_Gurder: wait, are they one-dimensional? then it's much easier
[15:40:28] <Masklin_Gurder> Yes, 1DF
[15:40:28] <Wulf> Masklin_Gurder: and this coordinate is way outside that interval?
[15:40:39] <Masklin_Gurder> * tr -d 'F'
[15:40:44] <Masklin_Gurder> Wulf: Yes
[15:41:31] <Masklin_Gurder> The intervals aren't sorted, there's no order to any of it, so I struggle to see how a dictionary could be used
[15:41:33] <Wulf> Masklin_Gurder: sort your set of coordinates. Then iterate through the intervals and use bisect.
[15:41:59] <Masklin_Gurder> Bisect?
[15:42:03] <wib_jonas> Masklin_Gurder: then there is a reasonably easy way to do this. you want to sort all the coordinates as well as the starts and ends of the intervals together into one long list, tracking where each came from, then iterate over it (in that sorted order). track a set of intervals that you are in, add the interval when you see the starting point and
[15:42:03] <wib_jonas> remove when you see the ending point. whenever you see a coordinate, you know it's in all those intervals
[15:42:06] <Wulf> Masklin_Gurder: https://docs.python.org/3/library/bisect.html
[15:42:20] *** Joins: zeden (~zeden@user/zeden)
[15:42:52] <wib_jonas> Wulf: no need for that in this easy case where both the intervals and points are given in advance, you don't need interactive queries or anything like that
[15:43:00] <Masklin_Gurder> Aha, hmm, yes, that makes sense.
[15:43:31] <Masklin_Gurder> Thanks Wulf wib_jonas !
[15:43:38] <wib_jonas> there are methods for all the hard cases too, with multiple dimensions, and incrementally input points and regions, but they get harder
[15:43:40] <Wulf> wib_jonas: yep, that should work too.
[15:44:13] <wib_jonas> and by harder I mean really hairy and I'm only partly convinced that I understand the two-dimensional case
[15:44:31] <wib_jonas> but for this one, let's stick to the simplest that works
[15:44:49] *** Quits: Mrcrypto (~Utkarsh@180.151.244.234) (Quit: Leaving)
[15:44:56] *** Joins: pycurious (~Adium@user/pycurious)
[15:45:02] <pycurious> In Python - I've an over-constrained system of linear equations Ax = b. What is a the best way to find x?
[15:45:10] <Wulf> But I'd not put two different things into the same list. Create two sorted lists and iterate over them in parallel.
[15:45:16] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:45:49] *** Joins: Henryx (~ebianchi@2a01:4f8:1c0c:76ad::1)
[15:47:05] *** Joins: RougeR (~rougex250@user/rouger)
[15:47:06] <wib_jonas> pycurious: a least-square solution, that is, one where the norm of (Ax-b) is the smallest. you can use one of those numerical libraries to compute one with one of the matrix decompositions like SVD.
[15:47:39] <wib_jonas> they probably have a function for this, but I haven't used numpy enough to know it off-hand. I know eigen and octave has functions for this.
[15:48:07] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 268 seconds)
[15:48:50] <pycurious> wib_jonas: I tried lstsq -> FutureWarning: `rcond` parameter will change to the default of machine precision times ``max(M, N)`` where M and N are the input matrix dimensions.
[15:49:35] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:d07:31cd:7def:7aea) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:49:44] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:50:18] <wib_jonas> pycurious: great, then I think you already have the right function
[15:50:33] <wib_jonas> https://numpy.org/doc/stable/reference/generated/numpy.linalg.lstsq.html
[15:50:55] <wib_jonas> read there about the warning
[15:51:13] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[15:52:12] *** dcaro_lunch is now known as dcaro
[15:52:47] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Ping timeout: 246 seconds)
[15:52:54] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:2894:b109:bf05:283b)
[15:53:28] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[15:53:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[15:53:41] *** Joins: henistein (~henistein@2001:8a0:fc8f:9501:2a3e:c446:5454:fe21)
[15:53:42] *** Joins: Barones (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14)
[15:53:42] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:53:56] *** Joins: valr (~valr@user/valr)
[15:54:32] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[15:54:48] *** Quits: elkclone (~elkclone@user/elkclone) (Quit: Leaving)
[15:55:48] *** Joins: fikran (~fikran@user/fikran)
[15:56:53] *** Joins: omegatron (~some@p5099b1fe.dip0.t-ipconnect.de)
[15:57:07] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[15:57:27] *** Joins: alzgh (~alzgh@user/alzgh)
[15:59:13] *** Joins: Proxysna_ (~Proxysna@62.119.254.142)
[15:59:41] *** Parts: valr (~valr@user/valr) (return 0;)
[15:59:45] <Masklin_Gurder> float('1e5') works, but int('1e5') fails.
[15:59:53] <Masklin_Gurder> Does that means I have to do int(float(   ?
[16:00:14] <Masklin_Gurder> * s/means/mean
[16:01:08] *** Quits: legola (~legola@46.235.101.220) (Remote host closed the connection)
[16:01:11] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:01:32] *** Joins: anshulxyz (~admin@103.208.69.147)
[16:01:59] <nedbat> Masklin_Gurder: if you want to handle that number format, yes.
[16:02:04] *** Quits: xiongxin (~quassel@113.116.35.70) (Ping timeout: 250 seconds)
[16:02:18] *** Quits: Proxysna (~Proxysna@185.251.89.199) (Ping timeout: 268 seconds)
[16:03:10] *** Quits: anshulxyz (~admin@103.208.69.147) (Client Quit)
[16:03:17] <Masklin_Gurder> I've never wanted to handle anything more than I want to handle this number format
[16:03:20] <apollo13> might going via decimal make more sense to get the correct value back?
[16:04:10] *** Joins: drogas (~drogas@jump2.jet.uk)
[16:04:19] <Repiphany> Floats are exact for integers as long as thery're not too big
[16:04:29] <apollo13> exactly my point ;)
[16:04:32] *** Joins: xiongxin (~quassel@113.116.35.70)
[16:04:45] <CrtxReavr> 1e5 is not "big."
[16:05:02] *** Joins: anshulxyz (~admin@103.208.69.147)
[16:05:28] <CrtxReavr> Masklin_Gurder, try int(1e5)
[16:05:37] <CrtxReavr> You're trying to get the int of a string.
[16:05:40] <apollo13> well I guess it was just an example, maybe the got other numbers
[16:05:52] <apollo13> CrtxReavr: they most likely get it from a file or user input
[16:06:37] <apollo13> but we will see :)
[16:07:23] <Masklin_Gurder> They got it from a file
[16:07:35] <CrtxReavr> int(eval('1e5'))
[16:07:37] <CrtxReavr> That works.
[16:07:40] <apollo13> ew
[16:08:09] <CrtxReavr> Whole point of eval() is to interpret a string as python.
[16:08:17] <jinsun> that is same as int(float('1e5')) I think
[16:08:34] <apollo13> CrtxReavr: but it is completly unsafe when a safer solution like nedbat pointed out exists
[16:08:36] <InPhase> CrtxReavr: And it's super flexible for file input since the user can put anything?  :)
[16:08:40] <apollo13> eval is a perfect way to shoot yourself
[16:09:01] <nedbat> CrtxReavr: int() is documented to convert strings to ints.
[16:09:09] *** Joins: daoudr (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92)
[16:09:26] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 250 seconds)
[16:09:47] *** Joins: szymon (~ugh@staticline-31-183-189-254.toya.net.pl)
[16:09:48] *** Joins: legola (~legola@46.235.101.220)
[16:10:32] *** Joins: doforlove33 (~doforlove@185.200.118.189)
[16:10:59] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-bcee31-154.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:11:09] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 245 seconds)
[16:12:02] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 250 seconds)
[16:12:34] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[16:12:54] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[16:15:35] <arseru> jus testing something: `hello`
[16:15:40] <arseru> *just
[16:16:19] <InPhase> arseru: SyntaxError: use 'hello'
[16:17:17] <Masklin_Gurder> Is there a more compact way of creating a list of n zeroes than [0 for _ in range(n)] ?
[16:17:33] <apollo13> [0] * n
[16:17:58] <Masklin_Gurder> Ooh spicy
[16:18:46] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:19:11] *** Joins: softwarewolf (~software@user/softwarewolf)
[16:20:14] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[16:20:29] *** Joins: rannnn8888 (~rannnn888@bzq-109-65-168-133.red.bezeqint.net)
[16:20:40] <Masklin_Gurder> I have a list of say 5 lists. I want to sort the 5 lists within the list. Is there a pythonic way of doing this or must I loop over the outer list's index?
[16:20:45] *** Parts: CygniX (~CygniX@2605:6400:30:fdc6:68:f4:4e:78) (Konversation terminated!)
[16:20:49] <rannnn8888> hey after i use this conn.row_factory = lambda cursor, row: row[0] how i can cancele this ?
[16:21:06] <bjs> Masklin_Gurder: `for sublist in list_of_lists: sublist.sort()`  ?
[16:21:45] <rannnn8888> c.row_factory = None this k ?
[16:21:55] <Masklin_Gurder> bjs: But does that actually sort the sublist?
[16:22:01] <bjs> Masklin_Gurder: yes
[16:22:10] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[16:22:10] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-bcee31-154.dhcp.inet.fi)
[16:22:16] <Masklin_Gurder> bjs: So that the list itself is effectively a different object afterwards?
[16:22:36] <bjs> Masklin_Gurder: not sure what you mean, it's the same object it's just sort ... sorts it
[16:23:31] <Masklin_Gurder> bjs: I mean I'm unsure whether sublist.sort() actually changes the sublist within the list, or if it just changes the loop variable 'sublist'
[16:23:41] <Repiphany> .sort() is in-place
[16:23:46] <bjs> Masklin_Gurder: it mutates the list.
[16:23:52] <Masklin_Gurder> Amazing
[16:24:12] *** Joins: CygniX (~CygniX@2605:6400:30:fdc6:68:f4:4e:78)
[16:24:33] <jmft2> bjs: Is there a not-in-place version of list.sort?
[16:24:39] <bjs> jmft2: sorted()
[16:24:51] <bjs> which leaves the original unaffected and returns a new list
[16:26:07] *** dcaro is now known as dcaro_afk
[16:26:07] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[16:26:26] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[16:26:46] <anshulxyz> is it possible to use coverage.py run and report together?
[16:27:24] <CrtxReavr> I say this a lot it seems, but when I see a list of lists, I assume someone used list.append() when they should have used list.extend()
[16:27:46] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[16:28:09] <jmft2> bjs: New list, but not a deep copy, right?
[16:28:32] <bjs> jmft2: no copying at all, just a new list and and insert() calls
[16:30:12] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[16:30:50] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[16:31:04] <jmft2> bjs: Yup, so mutable objects in the list are shared between the two lists?
[16:31:10] <bjs> jmft2: yes
[16:31:20] *** Quits: shad (~shad@user/shad) (Read error: Connection reset by peer)
[16:31:31] *** Joins: shad (~shad@user/shad)
[16:32:51] *** Joins: ivan_ (~Ivyy@2001:a61:13f1:cb01:39fc:d9e3:84ea:cca7)
[16:33:09] *** Quits: ubert (~Thunderbi@178.115.35.209.wireless.dyn.drei.com) (Quit: ubert)
[16:34:08] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[16:35:55] *** Joins: CodePoint (~BitShift@94.198.42.165)
[16:35:57] *** Quits: jackrabbitslim (~jrs@user/jackrabbitslim) (Quit: Leaving)
[16:36:00] *** Joins: faceface (~faceface@user/faceface)
[16:36:19] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[16:36:33] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[16:37:04] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[16:37:50] *** Quits: Ivii (~Ivyy@2001:a61:13f1:cb01:39fc:d9e3:84ea:cca7) (Remote host closed the connection)
[16:37:57] *** Quits: ivan_ (~Ivyy@2001:a61:13f1:cb01:39fc:d9e3:84ea:cca7) (Remote host closed the connection)
[16:38:45] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed)
[16:38:52] *** Quits: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca) (Read error: Connection reset by peer)
[16:40:02] <nedbat> jmft2: all objects are shared between the two lists, but only the mutable ones are a problem.
[16:40:19] <nedbat> anshulxyz: there isn't a single command that does run and report together.
[16:40:38] *** Joins: WantToHelp (~dale@user/wanttohelp)
[16:41:23] *** Joins: CoolerY (~CoolerX@user/coolerx)
[16:42:10] *** Joins: zeden (~zeden@user/zeden)
[16:42:22] *** Joins: amoe (~amoe@visarend.solasistim.net)
[16:43:10] *** Joins: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[16:44:10] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[16:45:06] <amoe> In pandas, imagine this line: df.loc[df['answer1'] != 'true', 'answer1'] = 0.  I want to do something the same as this, but for multiple columns, not just 'answer1'.  How would I do that?
[16:46:59] *** Quits: CodePoint (~BitShift@94.198.42.165) (Ping timeout: 245 seconds)
[16:48:14] *** Quits: thiras_ (~thiras@user/thiras) (Quit: Leaving)
[16:48:20] <amoe> given that I have the column names in a list of str, answer_fields = ['answer1', 'answer2']
[16:48:26] *** Quits: CoolerY (~CoolerX@user/coolerx) (Quit: Leaving)
[16:48:38] *** Quits: Thanatos (~Thanatos@105.112.53.94) (Read error: Connection reset by peer)
[16:52:39] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:53:02] *** Joins: pycode1 (~pycode@93-40-5-81.ip36.fastwebnet.it)
[16:53:12] <SnoopJ> amoe, I would probably build a row index first by combining each predicate, then index with that: `idx = (df["answer1"] == desired_answer1) & (df["answer2"] == desired_answer2); df.loc[idx, ["answer1", "answer2"]] = 0`
[16:53:12] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 250 seconds)
[16:53:13] *** Quits: rannnn8888 (~rannnn888@bzq-109-65-168-133.red.bezeqint.net) (Ping timeout: 256 seconds)
[16:53:26] *** Joins: ATAD (~ATAD@user/atad)
[16:53:59] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:54:08] *** Joins: SteveR (~SteveR@192.146.154.3)
[16:54:15] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[16:54:40] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:55:01] *** Joins: mrwick (~mrwick@user/mrwick)
[16:55:14] <SnoopJ> note that the parentheses there are load-bearing because the & operator binds quite strongly, they aren't just for legibility's sake
[16:55:16] *** Quits: pycode (~pycode@2001:b07:5d28:551:7aa1:11e1:894f:3ec4) (Ping timeout: 252 seconds)
[16:55:54] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[16:57:13] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Remote host closed the connection)
[16:57:28] <amoe> Thanks SnoopJ
[16:58:25] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:58:55] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[17:01:03] *** Joins: Thanatos (~Thanatos@105.112.53.94)
[17:01:17] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[17:02:11] *** Quits: anshulxyz (~admin@103.208.69.147) (Quit: WeeChat 3.3)
[17:03:20] <rendar> is this a common thing? `try: await task; except: asyncio.CancelledError: task.cancel(); raise`
[17:04:24] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:05:50] *** Joins: zettabyte (~zettabyte@user/zettabyte)
[17:06:00] <rakoon> Is this code threadsafe? https://paste.ee/p/DL2Yr
[17:06:13] *** Quits: SteveR (~SteveR@192.146.154.3) (Quit: Client closed)
[17:06:58] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[17:10:08] *** Quits: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net) (Ping timeout: 268 seconds)
[17:10:33] <bjs> rakoon: the comment about "loop" is bound to raise questions, but yes queue.Queue is thread-safe
[17:10:46] <bjs> in that you can get and put on different threads concurrently and it will be fine.
[17:11:38] <bjs> rendar: no, why would you do that
[17:12:17] *** Joins: Roey (~Roey@user/Roey)
[17:12:24] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:12:38] *** Quits: Payam (~Payam@138.106.57.132) (Quit: Client closed)
[17:12:57] <rendar> bjs, consider a coroutines which starts a new task A, on another coroutines which in turn starts a new task B.. if i call A.cancel() who gets CancelledError? the B task, right?
[17:13:22] <bjs> rendar: what do you mean "starts a new task" ?
[17:13:39] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 245 seconds)
[17:13:45] <rendar> it calls create_task
[17:14:10] <bjs> rendar: create_task doesn't "link" the task to the coro that created it or anything, it just puts it out there into the ether
[17:14:22] <bjs> only when you `await` it does anything actually matter
[17:14:52] <bjs> rendar: if you are awaiting a future that gets cancelled, then you get cancelled.  If you get cancelled while awaiting a future, the future gets cancelled.  So your code looks a bit weird
[17:15:55] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[17:16:50] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[17:17:29] <rendar> so, A.cancel() will cancel first B, then it gets cancelled itself, but B must re-raise the exception
[17:17:32] *** Quits: morrigan (~m0rr1gan@user/m0rr1gan) (Quit: morrigan)
[17:19:04] <bjs> rendar: if task A is awaiting task B when Task A got cancelled then yes, Task B will be cancelled
[17:19:34] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[17:19:56] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[17:20:51] <bjs> rendar: https://docs.python.org/3/library/asyncio-task.html#asyncio.Task  "To cancel a running Task use the cancel() method. Calling it will cause the Task to throw a CancelledError exception into the wrapped coroutine. If a coroutine is awaiting on a Future object during cancellation, the Future object will be cancelled."
[17:21:07] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[17:21:20] <rendar> ok
[17:22:33] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 276 seconds)
[17:23:12] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:23:45] *** Joins: poorboy_ (~poorboy@159.89.189.144)
[17:23:46] *** Joins: strungout (znc@mutant.penguin.fyi)
[17:23:47] *** Quits: suffer (znc@mutant.penguin.fyi) (Quit: ZNC - https://znc.in seek the truth or pay the price)
[17:23:53] *** Quits: Fieldy (~no@user/fieldy) (Remote host closed the connection)
[17:24:25] *** Quits: poorboy (~poorboy@159.89.189.144) (Ping timeout: 260 seconds)
[17:25:06] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:26:42] *** Joins: dez (uid92154@user/dez)
[17:27:07] *** Quits: martums (~martums@user/martums) (Ping timeout: 250 seconds)
[17:27:07] *** Quits: asd (~noname@user/asd) (Ping timeout: 250 seconds)
[17:28:22] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:28:32] *** Joins: akk (~akk@75.161.146.115)
[17:28:39] *** Quits: xensie (~xensie@88-115-238-181.elisa-laajakaista.fi) (Quit: Textual IRC Client: www.textualapp.com)
[17:28:49] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 252 seconds)
[17:30:19] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 245 seconds)
[17:30:57] *** Joins: djhankb (~djhankb@208.113.164.68)
[17:31:24] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:31:43] *** Joins: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[17:32:45] *** Joins: morrigan (~m0rr1gan@user/m0rr1gan)
[17:33:39] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 245 seconds)
[17:33:40] *** Joins: grooverman (~grooverma@177.95.12.14)
[17:33:46] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[17:34:12] *** Joins: CodePoint (~BitShift@94.198.42.117)
[17:35:24] *** dcaro_afk is now known as dcaro
[17:35:31] *** Joins: kujo4 (~kujo@188.166.12.52)
[17:35:38] *** Quits: kujo3 (~kujo@188.166.12.52) (Ping timeout: 268 seconds)
[17:36:04] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[17:39:10] <rakoon> bjs: thanks for checking it out
[17:40:17] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e058-2cd1-f59d-84bf.res6.spectrum.com)
[17:41:18] <fuzzypixelz> Hello. I'm writing an algorithm for 1bit image exploration. I use a priority queue for collecting the pixels to check and mark them if they aren't. The algorithm is similar to a Z-order curve but it's an "inversed N"
[17:41:20] <fuzzypixelz> https://bpa.st/FTQQ
[17:42:22] <fuzzypixelz> What I don't understand is that around an image size of 250, the maximum size of my queue almost doubles, while it follows a near-linear pattern before
[17:42:25] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[17:43:02] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 246 seconds)
[17:44:10] <petaflot> join #github
[17:44:26] <fuzzypixelz> here's the graph of my the maximum size the queue takes against the image size
[17:44:27] <fuzzypixelz> https://imgur.com/hETu7bm
[17:45:09] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[17:45:23] *** Joins: LiftLeft (~LiftLeft@172.83.47.157)
[17:45:48] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[17:48:34] *** Quits: drogas (~drogas@jump2.jet.uk) (Ping timeout: 252 seconds)
[17:49:11] *** Joins: rsx (~dummy@ppp-188-174-131-125.dynamic.mnet-online.de)
[17:49:24] *** Quits: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[17:49:43] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[17:50:24] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[17:52:01] <petaflot> hello! somewhat ashamed to ask here also, but does anyone know how I can rebase a github fork on its "master" ?
[17:53:50] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 265 seconds)
[17:54:58] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:55:46] *** Quits: CodePoint (~BitShift@94.198.42.117) (Ping timeout: 268 seconds)
[17:56:32] <vladoski> what do you use for automated ui browser testing?
[17:56:37] *** Quits: axisys_ (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com) (Quit: leaving)
[17:56:41] <vladoski> is theere any alternative to selenium?
[17:56:42] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[17:56:55] *** Joins: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com)
[17:57:19] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[17:57:26] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:281e:e60b:8e46:4aed) (Quit: Leaving)
[17:57:38] <Awoobis> petaflot: what do you mean by master, you mean upstream? (ie, the original project you forked from)
[17:58:53] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 264 seconds)
[17:58:55] *** Joins: asd (~noname@user/asd)
[18:00:09] *** Joins: ub (~Thunderbi@178.115.35.209.wireless.dyn.drei.com)
[18:00:10] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[18:01:19] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[18:02:29] *** PublicWiFi is now known as PUBLICWIFI
[18:02:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[18:02:59] *** Quits: jess (~jess@libera/staff/jess) ()
[18:04:33] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[18:05:08] *** Joins: fikran (~fikran@user/fikran)
[18:06:29] *** Joins: qlixed (~qlixed@181.44.129.13)
[18:07:48] *** Quits: qlixed (~qlixed@181.44.129.13) (Client Quit)
[18:08:09] *** Joins: qlixed (~qlixed@181.44.129.13)
[18:08:39] *** Quits: ub (~Thunderbi@178.115.35.209.wireless.dyn.drei.com) (Ping timeout: 245 seconds)
[18:09:55] <petaflot> Awoobis: yes, upstream
[18:10:46] <Awoobis> petaflot: have you worked on whatever the branch on upstream is that you want to rebase?
[18:10:48] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[18:11:01] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[18:11:07] *** Quits: Helle (~helle@80-100-16-232.ip.xs4all.nl) (Ping timeout: 252 seconds)
[18:12:01] <petaflot> Awoobis: if I uderstand your question well, yes. I just did "fork", then pull, then modify the code, then push to my forked github. now I want to add more features.
[18:12:16] <Awoobis> petaflot: on your fork, did you create a new branch?
[18:12:28] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[18:12:41] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Ping timeout: 264 seconds)
[18:13:46] <petaflot> Awoobis: yes I did (it was 2019-05)
[18:13:53] *** Joins: slee (~slee@user/slee)
[18:14:10] <Awoobis> then you can add the upstream repo as a remote, pull the branch you want to rebase, and do it that way
[18:14:27] <Awoobis> otherwise you can rebase using the ref but Im a bit too half asleep to explain that well
[18:14:53] <slee> hi, using the asyncio.queues for the first time...what is the proper way to clear it? using queues.clear() gives me: AttributeError: module 'asyncio.queues' has no attribute 'clear'
[18:15:10] <petaflot> Awoobis: thanks I will try
[18:15:36] *** Joins: LucaTM (~LucaTM@user/lucatm)
[18:15:50] <deniska> slee: you… aren't really supposed to clear it
[18:15:57] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[18:15:58] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-bcee31-154.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:17:03] <slee> how do i get rid of the existing data in the queue i nolonger need?
[18:17:08] *** Joins: jdmark (~jdmark@097-102-095-007.res.spectrum.com)
[18:17:27] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[18:18:01] *** Quits: saroy (~Sandipan@43.252.250.113) (Quit: Leaving)
[18:18:14] *** Quits: Thanatos (~Thanatos@105.112.53.94) (Ping timeout: 245 seconds)
[18:18:27] <SnoopJ> slee, your error message looks like you're trying to call clear() on the module, which is definitely strange. I think you probably want to get_nowait() in a loop until the Queue is empty (and possibly lock while you do this)
[18:18:35] <bjs> slee: `while q: q.get_nowait()`
[18:18:38] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[18:19:19] *** Joins: Linux77 (~Linux7_7@186.233.182.243)
[18:20:50] *** Joins: CodePoint (~BitShift@94.198.42.117)
[18:21:14] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[18:22:12] *** PUBLICWIFI is now known as PublicWiFi
[18:22:12] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:22:28] *** Quits: arseru (uid515527@user/arseru) (Quit: Connection closed for inactivity)
[18:22:50] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[18:23:10] *** Quits: mcope (~matt@user/mcope) (Remote host closed the connection)
[18:23:32] *** Joins: mcope (~matt@user/mcope)
[18:24:14] *** Quits: dhellmann_ (~dhellmann@097-081-099-073.res.spectrum.com) (Read error: Connection reset by peer)
[18:24:41] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[18:24:45] <Masklin_Gurder> I'm writing a sorting function
[18:24:53] <Masklin_Gurder> How do I implement secondary keys?
[18:25:01] <Masklin_Gurder> Return a tuple?
[18:25:31] <SnoopJ> Masklin_Gurder, tuples compare lexicographically, so it's typical to have multiple keys in a tuple, yep (this is how you do it with sorted(), for instance)
[18:25:32] *** Joins: Samian (~s@user/samian)
[18:25:54] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[18:25:55] <bjs> Masklin_Gurder: python's sorted() takes a `key` function and there you can make it return a tuple to do that
[18:25:56] <slee> while queues: queues.get_nowait() gives the error: AttributeError: module 'asyncio.queues' has no attribute 'get_nowait'
[18:26:02] *** Quits: henistein (~henistein@2001:8a0:fc8f:9501:2a3e:c446:5454:fe21) (Quit: Client closed)
[18:26:06] <bjs> slee: what is "queues" ?
[18:26:34] <bjs> oh you've imported asyncio.queues?  I'm confused
[18:26:40] <SnoopJ> slee, you still appear to be confusing the *module* for an instance of a Queue
[18:26:43] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[18:27:01] <bjs> why are you importing that module at all
[18:27:35] <Masklin_Gurder> SnoopJ: bjs: So e.g.    foo=sorted(bar,key=mysortfunc), and mysortfunc returns a tuple like primarykey,secondarykey          ?
[18:27:48] <bjs> Masklin_Gurder: yes that's how people would do it
[18:27:56] <Masklin_Gurder> Good I am people too
[18:28:08] <aphysically> is there a magic method checked before the comparisons?
[18:28:25] <bjs> aphysically: is that a reference to sorting? or?
[18:28:42] <SnoopJ> Masklin_Gurder, yep
[18:28:54] *** Joins: niv (~niv@limbo.cypherpunks.io)
[18:28:54] *** Joins: jpic (~jpic@82.142.19.206)
[18:28:57] *** Joins: grawity (grawity@star.nullroute.lt)
[18:29:03] <aphysically> yeah, does sorting always use __lt__ or the like (i.e. can I separately define my own key function in the item class?)
[18:29:21] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[18:29:22] <aphysically> I guess this is a bit silly
[18:29:24] <bjs> aphysically: sorted takes a `key` argument
[18:29:36] <bjs> aphysically: like sorted(items, key=keyfunc)
[18:29:40] <aphysically> yeah
[18:29:42] *** Joins: ub (~Thunderbi@178.115.35.209.wireless.dyn.drei.com)
[18:29:52] <Awoobis> if you provide a key it uses __lt__ on the result of the key function
[18:29:53] <bjs> aphysically: then you get [a,b,c] such that key(a) <= key(b) <= key(c)
[18:30:06] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:30:19] <Yhg1s> aphysically: if you want to make your class orderable, __lt__ and __eq__ is what you need (and potentially functools.total_ordering)
[18:30:26] *** Quits: CodePoint (~BitShift@94.198.42.117) (Quit: Never gonna give you up, never gonna let you down...)
[18:30:36] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[18:30:40] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[18:31:01] *** Joins: Thanatos (~Thanatos@197.210.45.2)
[18:31:56] <aphysically> it's hard being stupid in the morning sometimes
[18:32:10] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[18:32:11] <InPhase> aphysically: I find it pretty easy to do.
[18:32:42] * aphysically goes to get coffee
[18:33:04] <InPhase> Yeah, I should do that too.
[18:33:05] *** Joins: loki_val (~crabbedha@user/crabbedhaloablut)
[18:33:09] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-bcee31-154.dhcp.inet.fi)
[18:33:24] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[18:33:54] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[18:34:01] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[18:34:06] *** Joins: alzgh (~alzgh@user/alzgh)
[18:34:47] *** Joins: thiras (~thiras@user/thiras)
[18:35:36] <theseb> how start interpreter and automatically load a certain module?
[18:35:38] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[18:35:55] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[18:35:58] <petaflot> Awoobis: it worked :-)
[18:35:59] <theseb> I want to drop into an interactive session with some initial stuff done automatically
[18:36:09] <Awoobis> petaflot: \o/
[18:36:56] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:37:00] <bjs> theseb: python3 -i -c "import math"
[18:37:07] *** Joins: evilissimo (vfeenstr@redhat/evilissimo)
[18:37:09] <bjs> theseb: or indeed just python3 -i some_file.py
[18:37:20] <bjs> will run some_file and then drop into the interactive prompt at the end
[18:37:23] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:38:37] <theseb> bjs: nice! thanks!
[18:39:10] <theseb> bjs: do you how to do same for django's shell? (./manage shell) ?
[18:39:20] <bjs> theseb: no idea
[18:39:42] <theseb> k
[18:40:52] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
[18:41:09] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 245 seconds)
[18:42:36] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[18:43:16] *** Quits: xiongxin (~quassel@113.116.35.70) (Ping timeout: 250 seconds)
[18:43:42] *** Joins: xiongxin (~quassel@113.116.33.66)
[18:43:47] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:44:41] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 250 seconds)
[18:45:33] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[18:45:48] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[18:46:22] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Client Quit)
[18:46:35] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[18:47:05] *** Quits: dub_a (~dub_a@2601:1c2:4e00:3b3::cb2) (Quit: WeeChat 3.3)
[18:47:25] <Masklin_Gurder> Suppose foo is a list of lists, then *foo means supplying every sublist as an argument, oui?
[18:47:35] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[18:47:43] <Masklin_Gurder> As input to a function, I guess.
[18:48:01] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[18:48:18] <InPhase> Masklin_Gurder: Correct.
[18:50:25] *** Gustavo6046_ is now known as Gustavo6046
[18:50:35] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-bcee31-154.dhcp.inet.fi) (Ping timeout: 246 seconds)
[18:50:35] *** Joins: jazzy (~jaziz@2600:380:8571:702f:f1ff:6af3:416:3043)
[18:51:11] <Masklin_Gurder> Excellent
[18:51:18] *** alexyov5 is now known as alexyov
[18:51:27] *** Joins: cloud (~cloud@user/ansible)
[18:51:39] <InPhase> Masklin_Gurder: If you aren't aware, ** does the same for dictionaries as named arguments.
[18:51:39] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[18:51:59] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 245 seconds)
[18:52:37] *** Joins: node1 (~node1@user/node1)
[18:52:51] <Masklin_Gurder> Thanks I've used both * and ** before but so rarely I forget what's what :-]
[18:53:03] *** Joins: DPA- (~DPA@2a05:41c0:4:604::a3c:10d)
[18:53:23] *** Joins: semeion (~semeion@user/semeion)
[18:53:44] *** Quits: ub (~Thunderbi@178.115.35.209.wireless.dyn.drei.com) (Ping timeout: 246 seconds)
[18:55:52] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[18:56:39] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[18:58:28] *** Quits: vladoski (~vladoski@2001:b07:add:d406:2313:4d27:5266:a860) (Ping timeout: 252 seconds)
[18:59:46] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[18:59:56] <Masklin_Gurder> Suppose I have a dictionary object, and want to create a list containing three independent copies of it.
[19:00:28] <grym> Masklin_Gurder: mylist = [{k:v for k,v in thedict.items()} for _ in range(3)]
[19:00:49] <Masklin_Gurder> Ah yes, nice. Thanks
[19:00:59] <grym> usual caveats about deepcopies maybe biting you apply
[19:01:12] <wib_jonas> grym: or you could try this instead: mylist = [dict(thedict) for _ in range(3)]
[19:01:18] <grym> (which is to say, doing that sort of thing always worries me)
[19:01:23] <grym> wib_jonas: i think that'll work too
[19:02:11] <jamwil> Is streamlit the best package for whipping up a quick self-hosted data dashboard?
[19:02:37] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[19:03:08] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[19:03:15] <node1> I'm just trying to understand here when we create a function in python and call  function, then what would be the status of local scope variable in stack? are they still on the stack?
[19:03:32] <Masklin_Gurder> grym: What are those caveats? Will the list's dicts change if I change the 'source' dict?
[19:03:39] <node1> In case of recursion?
[19:04:00] <grym> Masklin_Gurder: they won't, it just makes me fret :)
[19:04:43] <Masklin_Gurder> :P
[19:05:30] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[19:06:06] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[19:06:15] *** Quits: legola (~legola@46.235.101.220) (Remote host closed the connection)
[19:06:22] *** Joins: bananahead (~bananahea@host-92-24-207-208.as13285.net)
[19:07:03] *** Quits: DPA- (~DPA@2a05:41c0:4:604::a3c:10d) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[19:07:09] *** Quits: Barones (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14) (Remote host closed the connection)
[19:07:10] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Quit: leaving)
[19:07:20] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[19:07:44] *** Joins: Helle (~helle@80-100-16-232.ip.xs4all.nl)
[19:07:45] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Quit: Leaving)
[19:08:31] *** Joins: DPA (~DPA@2a05:41c0:4:604::a3c:10d)
[19:09:38] <bjs> node1: when you say "creating a function" you mean the `def` statement?  It produces a new function object
[19:09:55] <bjs> node1: then when you call an object, a new stack frame is created (and pushed onto the stack) and removed once the call returns.
[19:10:19] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 245 seconds)
[19:10:28] <bjs> in the case of recursion, you just have many calls and so many stack frames, and it's those stack frames that store the local variables.
[19:10:42] <node1> OKay it means recursion is expensive. At least in terms of space complexity
[19:10:59] <bjs> node1: well it's just as expensive as a normal function call
[19:11:05] <bjs> which is to say, a little bit for each call
[19:12:24] <node1> So i'm just trying to understand here asymptotic analysis for `divide and conquer` where recursion is used, specially in `quick sort`
[19:12:33] *** Joins: starz (starz@ns378512.ip-37-59-36.eu)
[19:12:36] *** Quits: doforlove33 (~doforlove@185.200.118.189) (Quit: Leaving)
[19:12:46] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Remote host closed the connection)
[19:12:48] <bjs> node1: I see, usually when doing asymptotic analysis you kind of just ignore the call stack
[19:12:53] *** Joins: ThanatosJ (~Thanatos@197.210.45.2)
[19:13:04] *** Quits: slee (~slee@user/slee) (Quit: Leaving)
[19:13:10] <bjs> well, I mean you ignore the "overhead" in doing it, and you only worry about the actual variables that actually get used
[19:14:19] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:15:46] *** Quits: Thanatos (~Thanatos@197.210.45.2) (Ping timeout: 250 seconds)
[19:16:09] <bjs> node1: take merge sort (which is slightly simpler to explain than quicksort), then a call with a list of size n would take S(n) "steps".  Let's say for n=1 and 0 S(n)=0 (no steps needed). For n=2 it needs to "merge" the two lists, so S(2)=1.  Now in general merge sort does 3 things, it sorts the left half (which takes S(n/2) steps), and then the right half (another S(n/2) steps) and then merges (which takes roughly n steps).
[19:16:36] *** Joins: junktext (~junktext@77.247.181.217)
[19:16:51] <bjs> node1: so you could say S(n) = 2*S(n/2) + n   describes how many "steps" for merge sort t
[19:16:53] *** Quits: DPA (~DPA@2a05:41c0:4:604::a3c:10d) (Ping timeout: 264 seconds)
[19:17:31] *** Joins: oelewapperke (~cde@ns509915.ip-198-245-49.net)
[19:17:42] * aphysically adds 3.10 badge to project
[19:17:58] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[19:18:07] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[19:18:13] <bjs> node1: From there, it's just "apply math" to unwind the self-referential equation but the analysis of the actual code is done.  You'd do the same with quicksort.  Counting "steps" it takes based on the input.
[19:18:35] <aphysically> so I get the idea of running tests in all the versions of python you support, but I wonder if I should run my local development venv on the oldest supported version to try to avoid anything accidentally slipping in
[19:18:42] <node1> Okay, bjs it looks merge sort is logarithmic with base2 ? here?
[19:18:57] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[19:20:05] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[19:20:21] <bjs> node1: that statement is pretty ill-formed. The number of steps that merge sort takes for a list of length n is S(n). and S(n) can be written as either S(n)=2*S(n/2)+n  or as S(n)=n*log2(n)
[19:20:23] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:3cd6:5eb7:c776:e1a5)
[19:20:28] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[19:20:36] <node1> Anyway my concern was wih quicksort here that i'm getting more then one time complexity while calculating it, and it's entierly depends upon how much pivot you choose.
[19:20:40] <bjs> you "apply math" (e.g. the scary-sounding "master theorem") to go from one to the other.
[19:20:50] <node1> I don't know if i visalize it correctly.
[19:20:59] <bjs> node1: that is not a concern, and is indeed a 'feature' of that algorithm
[19:21:40] <bjs> in that it's efficiency depends heavily on the choice of pivot.
[19:21:49] <node1> s/ how much pivot you choose/ Which index you consider as pivot"
[19:21:57] <bjs> node1: try work out the complexities for the "worst" choice of pivot at each step, and for the "best" choice of pivot.
[19:22:07] *** Joins: aknot (~aknot@2603:900a:1503:17bb:136c:d18b:d594:ac07)
[19:22:12] *** Joins: txtsd (~txtsd@user/txtsd)
[19:22:13] <bjs> (the real analysis for the "average" pivot and things like that, get quite hairy to do for real...)
[19:22:50] <node1> best === average here, plus in worst case i'm getting n^2( when choose the first index)
[19:23:10] <bjs> node1: that is correct
[19:23:17] <bjs> quicksort worst case is O(n^2)
[19:23:53] <node1> So overall what i see is that merge sort and quick sort efficiency is similar, unless how you choose the pivot here for quicksort.
[19:24:23] <node1> It's just iteration. Nothing more then that
[19:24:32] <aphysically> I found it kind of unintuitive the complexity of keeping a list sorted as you construct it isn't really better than just running an efficient sort after construction
[19:25:18] <node1> `loop and loop = n^2`
[19:25:39] <bjs> node1: yes, infact all sorting algorithms (or well, all sorting algorithms that can only compare less-than or greater-than) can't get better than O(n log n)
[19:25:50] <bjs> and if you get much worse than that, then it's not really worth studying.
[19:25:57] *** Quits: Aminda (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[19:26:00] <node1> :p
[19:26:36] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[19:26:36] <node1> I'm wondering i should must apply this algorithms in our devops automation process.
[19:26:48] <aphysically> non-comparison sorts are cool :D
[19:26:57] <aphysically> but usually a memory tradeoff I think
[19:27:17] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[19:27:18] <bjs> node1: so all of the common algorithms (heapsort, quicksort, mergesort, etc) are O(nlogn) or O(n^2),  the differences lie in how much extra space they use, what kinds of inputs they work best on, how they perform on average, whether they're "stable" etc
[19:27:34] <node1> bjs, indeed.
[19:27:46] <aphysically> speaking of non-comparison sorts is radix somewhere in stdlib?
[19:27:47] <bjs> node1: e.g. if you have an almost entirely sorted sequence already, then maybe mergesort isn't the best
[19:28:05] <node1>  yes.
[19:28:08] <bjs> even though it's right at the "optimum" O(n log n) steps
[19:28:10] *** Joins: Macuser (~Macuser@216.30.159.201)
[19:28:13] <node1> bjs, thank you very much.
[19:28:13] <Zweimer> I just started using pyqt5 and I am having a question about the layouts. https://bpa.st/ROLQ  << This code should display a small form inside a QTabWidget (1 LineEdit, 1 ComboBox and 1 Button) but for some reason only the BomboBox is displayed - in the top left corner. I assume something when wrong with the QVBoxLayout QGridLayout but I don't
[19:28:13] <Zweimer> understand what exactly.
[19:28:55] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[19:29:29] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[19:29:38] *** Quits: xiongxin (~quassel@113.116.33.66) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:30:12] *** Joins: Sky_Net (~Sky_Net@176.14.213.149)
[19:30:22] <Zweimer> I find working with pyqt5 particularly hard, since there is nothing to debug really.
[19:30:56] *** Joins: djhankb (~djhankb@208.113.164.68)
[19:31:23] <node1> ok
[19:32:06] *** Joins: minip (~minip@user/minip)
[19:34:05] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[19:34:33] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[19:35:14] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[19:35:16] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[19:36:12] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[19:36:24] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[19:36:34] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[19:38:13] <BrenBarn> Zweimer, why are you using GridLayout and VBoxLayout in that way?
[19:38:18] *** Quits: zepolen_ (~zepolen@2a02:587:8608:c7cb:e583:aa7f:f9c7:8eb0) (Ping timeout: 250 seconds)
[19:38:20] *** Joins: hacksword (~hacksword@209.95.32.122)
[19:38:44] <BrenBarn> it looks like you add VBox to the Grid but you never addLayout the Grid to anything (like the widget)
[19:39:38] *** Quits: jmft2 (~JMFT@82.3.54.26) (Read error: Connection reset by peer)
[19:39:44] <Zweimer> BrenBarn, its being added to _tab in Line 4
[19:39:44] *** Joins: node1 (~node1@user/node1)
[19:40:01] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[19:41:46] *** Quits: LiftLeft (~LiftLeft@172.83.47.157) (Ping timeout: 250 seconds)
[19:42:44] *** Joins: Karou (~Guest4@resair128.resair.yorku.ca)
[19:42:47] <Karou> yo
[19:42:49] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 245 seconds)
[19:42:54] *** Joins: magla (~gelignite@55d44d33.access.ecotel.net)
[19:43:07] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:43:13] <Karou> Is anyone familiar with pySimpleGui?
[19:43:17] *** Joins: SuperLag (~akulbe@user/superlag)
[19:43:33] *** Quits: lethu (~lethu@user/lethu) (Read error: Connection reset by peer)
[19:43:39] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 245 seconds)
[19:43:41] <SnoopJ> Karou, let's assume the answer to that question is "yes," ask the next question.
[19:43:44] <Zweimer> BrenBarn, otherwise, what is wrong with the way I added VBox and the Grid?
[19:44:29] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 246 seconds)
[19:44:54] *** Quits: pycode1 (~pycode@93-40-5-81.ip36.fastwebnet.it) (Ping timeout: 245 seconds)
[19:44:58] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[19:45:12] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[19:45:23] <Karou> SnoopJ I'm trying to make an app that functions as a calculator, it is going to have two frames side by side that i want to be able to clear and remake with a button click but it doesnt seem to be happy with me
[19:45:33] <BrenBarn> well, I don't get why you're using a GridLayout if you're only putting one thing in it (namely the VBoxLayout)
[19:45:33] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[19:46:07] *** Quits: amoe (~amoe@visarend.solasistim.net) (Quit: leaving)
[19:46:33] <SnoopJ> Karou, can you explain "it doesn't seem to be happy" in a little more detail? What have you tried, and what errors/behaviors are you seeing?
[19:46:44] *** Joins: zepolen_ (~zepolen@2a02:587:860a:4682:ae1d:1a27:33d2:bf1e)
[19:46:51] *** Quits: ItsLandon (~quassel@2601:1c0:6d03:1cb0:b5ce:612d:d932:999) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:46:58] *** Quits: introom (introom@2600:3c01::f03c:92ff:fea3:2cf) (Ping timeout: 252 seconds)
[19:47:20] *** Joins: SteveR (~SteveR@192.146.154.3)
[19:47:32] <Zweimer> BrenBarn, valid point. I am not finished with the ui and just wanted to try a wip-version.
[19:47:49] <Karou> SnoopJ https://puu.sh/IgdfH/23095d0aa5.png
[19:47:54] *** Joins: jay-m126 (~jay-m@154.72.160.147)
[19:48:05] <Karou> that should have those boxes in a 4x4 grid
[19:48:20] <BrenBarn> ah
[19:48:50] *** Joins: lethu (~lethu@user/lethu)
[19:49:04] <Zweimer> I will simplify the UI if it helps.
[19:49:32] <BrenBarn> Can you create a self-contained example instead of this isolated function?
[19:49:36] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:49:59] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[19:50:11] <SnoopJ> Karou, don't have much to say about that except that I guess the code you ran to produce that image doesn't do that.
[19:50:57] <Karou> that would be correct yes
[19:51:25] <Zweimer> It is unfortunately too much glued to other parts of the software. I don't think I can keep it whole-contained and rather short. But if you already don't see any further mistakes, I guess there is something other wrong than these few lines.
[19:52:16] <Karou> okay so my biggest issue now is clearing a frame to reset it
[19:52:23] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[19:52:40] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[19:53:08] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[19:53:33] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[19:54:29] *** Quits: jay-m126 (~jay-m@154.72.160.147) (Ping timeout: 245 seconds)
[19:55:49] *** Joins: LiftLeft (~LiftLeft@102.165.16.219)
[19:56:46] *** Joins: jay-m126 (~jay-m@129.0.77.209)
[19:56:50] *** Quits: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca) (Remote host closed the connection)
[19:57:45] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[19:58:29] *** Joins: paul424 (~tom@ip-5-172-232-65.multi.internet.cyfrowypolsat.pl)
[19:58:52] <BrenBarn> I don't offhand, but I could be missing something
[20:00:37] *** Quits: beterraba (~beterraba@86.107.21.205) (Ping timeout: 252 seconds)
[20:02:12] *** Joins: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[20:02:25] *** sale_ is now known as sale
[20:02:37] *** Joins: beterraba (~beterraba@86.107.21.205)
[20:03:24] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:5591:a4eb:b0e9:475d)
[20:03:37] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[20:03:48] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[20:04:04] *** Joins: jdmark2 (~jdmark@172.58.175.75)
[20:05:06] *** Quits: jdmark2 (~jdmark@172.58.175.75) (Client Quit)
[20:05:19] *** Quits: jmiehe1 (~Thunderbi@user/jmiehe) (Client Quit)
[20:07:24] *** Quits: ThanatosJ (~Thanatos@197.210.45.2) (Ping timeout: 245 seconds)
[20:08:07] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[20:08:21] *** Quits: jdmark (~jdmark@097-102-095-007.res.spectrum.com) (Ping timeout: 268 seconds)
[20:08:39] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 245 seconds)
[20:09:08] *** Joins: ItsLandon (~quassel@2601:1c0:6d03:1cb0:b5ce:612d:d932:999)
[20:09:51] <ItsLandon> So it looks like LibreOffice doesn't know what to do with a zipapp :/ Is there a way to get shiv to produce something that's like.. base64 encoded?
[20:10:15] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:11:40] <ItsLandon> Alternatively, is there a pip3 distribution that I could put in LibreOffice's site-packages directory to get pip to work?
[20:12:00] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[20:12:06] <SnoopJ> ItsLandon, no, shiv's one responsibility is to produce a zipapp.
[20:12:24] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[20:12:26] <SnoopJ> If that isn't compatible with whatever it is you're trying to do, then shiv probably isn't the way to do it
[20:12:29] *** Parts: softwarewolf (~software@user/softwarewolf) ()
[20:12:37] <ItsLandon> Alright. I think I'm actually just gonna make Windows users manually install Requests.
[20:13:17] <ItsLandon> I could just drop https://github.com/psf/requests/tree/main/requests into site-packages and import it? Or am I misunderstanding the purpose?
[20:13:27] *** Quits: cloud (~cloud@user/ansible) (Quit: Client closed)
[20:14:28] *** Joins: fikran (~fikran@user/fikran)
[20:15:22] <SnoopJ> ItsLandon, if you want to install a module from a repository, pip has a way to do that. see example (5) here: https://pip.pypa.io/en/stable/cli/pip_install/#examples
[20:15:42] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[20:15:45] <SnoopJ> dropping things into site-packages yourself is close to the worst way to install something
[20:16:02] *** Joins: sbrown (~sbrown@66.44.16.44)
[20:16:28] *** Joins: arseru (uid515527@user/arseru)
[20:16:59] *** dcaro is now known as dcaro_away
[20:17:00] *** Joins: martums (~martums@user/martums)
[20:17:22] *** Joins: ExeciN (~ExeciN@user/nicexe)
[20:19:21] <ItsLandon> SnoopJ: So here's the trouble. pip3 does not ship, for some reason, with the python3 that ships with LibreOffice for Windows. IDFK why lol. I've tried getting the pip bootstrap to work, but apparently the site-packages directory for LibreOffice is not writable by the Python that ships with LibreOffice for Windows. Even if I manually change the permissions, it's still not writable. If I specify --user for the pip installation, it *
[20:19:21] <ItsLandon> still* doesn't work. I've been driving myself nuts with this for like two days. All I want is requests to be available for my python script that will drive my spreadsheet. It works on macOS and Linux, but I'd like this to be relatively portable and Windows has been a complete thorn in my side.
[20:19:56] <ItsLandon> My last resort is to just make Windows users drop something into site-packages manually. So will putting requests there manually work?
[20:20:06] <ItsLandon> Believe me, if it wasn't the last option I can think of, I wouldn't do it
[20:23:20] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[20:23:39] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[20:24:27] *** Quits: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[20:24:52] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Read error: Connection reset by peer)
[20:25:09] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[20:25:46] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:26:18] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[20:27:39] *** Quits: rsx (~dummy@ppp-188-174-131-125.dynamic.mnet-online.de) (Quit: rsx)
[20:30:05] *** Quits: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[20:30:53] *** Joins: introom (~introom@li699-62.members.linode.com)
[20:31:17] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[20:31:48] *** Joins: djhankb (~djhankb@208.113.164.68)
[20:33:17] *** Joins: emf (~emf@162.218.217.186)
[20:33:37] *** Quits: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net) (Ping timeout: 252 seconds)
[20:34:39] *** Joins: legola (~legola@46.235.101.220)
[20:34:45] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[20:35:16] *** Joins: hendursa1 (~weechat@user/hendursaga)
[20:36:22] *** Quits: y1n-v1 (~y1n@178.165.200.225.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[20:36:46] <Masklin_Gurder> Can I specify how powerful a 'break' statement should be?
[20:36:56] <Masklin_Gurder> In this case I want to break out of two loops not just one
[20:37:30] *** Joins: emf_ (~emf@2620:10d:c090:400::5:5481)
[20:37:49] *** Quits: emf (~emf@162.218.217.186) (Ping timeout: 245 seconds)
[20:38:40] <bjs> Masklin_Gurder: no
[20:38:54] <bjs> Masklin_Gurder: but you can write a function and then `return` will break out of all the loops in the function at once
[20:38:58] <Swayze> you need to set a bool or some other condition which you check in your outside loop
[20:39:20] <Swayze> or do what bjs said xd
[20:40:52] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[20:40:58] <Masklin_Gurder> Shame :(
[20:41:07] <Masklin_Gurder> In Fortran it would be ez
[20:41:28] <Masklin_Gurder> I'll go with the bool approach, seems simpler
[20:41:38] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[20:42:02] <ItsLandon> Could the loop be simplified somehow? Or recursive?
[20:42:22] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[20:42:49] *** Quits: legola (~legola@46.235.101.220) ()
[20:43:01] *** Quits: swensson (~swensson@213.88.131.10) (Quit: Client closed)
[20:43:25] <hexnewbie> Somewhat odd, not rarely I come needing break 2 in Python which does not have it. In PHP which does have it, I never needed it.
[20:44:36] <Swayze> Masklin_Gurder: do it in fortran then
[20:44:37] *** Quits: akmod (~akmod@c-73-228-115-212.hsd1.ut.comcast.net) (Remote host closed the connection)
[20:44:39] <Swayze> dont be sad
[20:45:34] *** Quits: SteveR (~SteveR@192.146.154.3) (Ping timeout: 256 seconds)
[20:46:13] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[20:46:14] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[20:46:16] *** Quits: relight (~relight@user/relight) (Ping timeout: 252 seconds)
[20:46:32] *** Joins: relight (~relight@user/relight)
[20:48:48] *** Joins: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr)
[20:49:02] *** Joins: stdout (~stdout@216.163.21.11)
[20:49:31] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
[20:50:45] <Karou> SnoopJ heres my code
[20:50:46] <Karou> https://paste.debian.net/1214407/
[20:50:55] *** Joins: legola (~legola@46.235.101.220)
[20:51:04] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[20:51:08] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[20:51:15] <Karou> I figured out why it was layering on because i was using extend
[20:51:17] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[20:51:35] <ItsLandon> For reasons I'm not gonna repeat, I cannot use pip to install packages. Will manually dropping a package into site-packages be sufficient?
[20:51:36] <Karou> but how do i make the definitions above work, it hates them to no end
[20:51:42] *** Quits: legola (~legola@46.235.101.220) (Remote host closed the connection)
[20:52:48] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[20:53:13] *** Joins: legola (~legola@46.235.101.220)
[20:53:16] <aphysically> jinsun: I went with specifying the type of f and getting rid of one walrus https://github.com/GBeauregard/pyffstream/commit/5eadf5ce7a90046c280e50d839f9d31bb68c82e6
[20:54:36] *** Joins: nomic (~nomic@185.192.69.144)
[20:54:44] <SnoopJ> Karou, sorry, I don't understand your question.
[20:55:24] <Karou> do you see class static at the top?
[20:55:38] <Karou> see how i have definitions for frame_41 etc
[20:56:02] * SnoopJ nods
[20:56:19] <Karou> the issue is this
[20:56:31] <Karou> https://puu.sh/Ige5k/e9dbb4eece.png
[20:56:54] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[20:56:56] <Karou> it absolutely refuses to let me reuse anything
[20:57:31] <SnoopJ> It does seem like Layout is meant to be called just once, yes.
[20:57:36] *** Joins: Akuli (~Akuli@213.216.210.22)
[20:57:39] *** Joins: Narrat (~omnius@p200300df5f0b35e406ea56fffe2e7cdc.dip0.t-ipconnect.de)
[20:57:42] <SnoopJ> (the error message seems to confirm this)
[20:57:43] <Karou> oh no thats not the problem
[20:57:49] *** Quits: legola (~legola@46.235.101.220) (Ping timeout: 252 seconds)
[20:57:55] <Karou> like, the definition above it
[20:57:56] <Karou> is
[20:58:00] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[20:58:10] <Karou> is complaining about a single item in the layout being reused
[20:59:01] *** Quits: relight (~relight@user/relight) (Read error: Connection reset by peer)
[20:59:03] <SnoopJ> I can only see the error message you just shared with us, which is referring to where you call Layout on line 55 (which I believe is Line 54 in your paste)
[20:59:07] *** Joins: dulanic (~dulanic@47.187.144.163)
[20:59:26] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 265 seconds)
[20:59:31] <Karou> ah nevermind i found a article about it
[20:59:32] <Karou> https://github.com/PySimpleGUI/PySimpleGUI/issues/3685
[20:59:32] <SnoopJ> or are you saying that this works fine, as long as frame_41 has not been used elsewhere?
[20:59:38] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:1c3a:3794:22dd:13f6)
[20:59:41] <Karou> yeah exactly
[20:59:47] <Karou> if you see i have window a and b
[20:59:53] <SnoopJ> Then I guess you can't do what you're trying to do.
[20:59:58] <Karou> yeah i guess so haha
[21:00:16] *** Joins: relight (~relight@user/relight)
[21:00:20] <Karou> well was worth a shot
[21:00:21] <Karou> thanks!
[21:00:30] *** Quits: Karou (~Guest4@resair128.resair.yorku.ca) (Quit: Client closed)
[21:02:05] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[21:02:26] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:04:09] *** Joins: grooverman_ (~grooverma@177.95.12.14)
[21:05:44] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 245 seconds)
[21:06:07] *** Joins: doforlove33 (~doforlove@45.87.215.54)
[21:07:30] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[21:07:52] *** Joins: ano (~ano@user/ano)
[21:08:11] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Read error: Connection reset by peer)
[21:08:12] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.28.mobile.tre.se)
[21:08:51] *** Joins: rn2208 (~rn2208@5.165.3.235)
[21:09:31] *** Joins: Payam (~Payam@138.106.57.132)
[21:11:18] <paul424> one question : the __dict__ of the module __main__ denotes global or local symbol table ?
[21:13:03] *** Joins: WesTomer (~WesTomer@165.225.38.69)
[21:14:19] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[21:14:43] <bjs> paul424: there is no "symbol table" for Python. Every object has a set of attributes, usually stored as a dictionary on the object itself (as __dict__)
[21:14:52] <WesTomer> Anyone familiar with fast.ai? I am just getting started. I am viewing the material in Jupyter notebooks. I tried the very first exercise, and got the error "ModuleNotFoundError: No module named ‘torch’ - Windows 10"
[21:14:53] *** Joins: Shpury (~michal@nat-koc-n1.naszasiec.net)
[21:15:12] <bjs> paul424: global variables are just attributes on the module object,  so the module's __dict__ is essentially the global variables dict
[21:15:15] <bjs> for that module
[21:15:29] *** Quits: Payam (~Payam@138.106.57.132) (Quit: Client closed)
[21:15:40] <paul424> https://www.boost.org/doc/libs/1_77_0/libs/python/doc/html/reference/embedding.html this example fools me : it both uses global and global
[21:16:49] <paul424> especially why is there object result when it's not used anywhere hmmnm
[21:17:08] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[21:17:18] *** Joins: dulanic (~dulanic@47.187.144.163)
[21:17:39] <paul424> but anyway boost::python is a super-clean way compared to dynamically binding the interpreter library *.so
[21:17:43] *** Joins: Payam (~Payam@138.106.57.132)
[21:17:51] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[21:18:10] <bjs> paul424: global and global?
[21:18:32] <paul424>   object result = exec(    "def greet():                   \n"    "   return 'Hello from Python!' \n",    global, global);
[21:19:07] <bjs> paul424: what about it?
[21:19:18] <bjs> those look like the standard arguments to Python's exec() function
[21:19:39] <paul424> exec expects global and local dictionaries ... :P
[21:19:45] <paul424> but I can understand using one
[21:19:47] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:20:07] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:35d4:3243:748c:b069)
[21:20:34] <bjs> paul424: https://docs.python.org/3/library/functions.html#exec  infact globals=locals is a common pattern and is the default for exec
[21:21:15] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[21:21:32] <paul424> bjs, ohh exec , eval , are all python functions >_<
[21:22:41] <WesTomer> anyone use fast.ai? I'm having trouble with "ModuleNotFoundError: No module named ‘torch’ - Windows 10" but I have Anaconda installed, which has torch built in - so can't I use Anaconda somehow? Will Jupyter notebooks use whatever Anaconda has, if I launch the notebook from within Anaconda? Sorry - I'm new to this and just learning it all.
[21:23:06] <byte4byte> is there a php interpreter written in python?
[21:23:24] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:3cd6:5eb7:c776:e1a5) (Quit: Client closed)
[21:23:45] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:25:29] <deniska> byte4byte: sorta: https://github.com/hippyvm/hippyvm
[21:25:46] *** Quits: doforlove33 (~doforlove@45.87.215.54) (Quit: Leaving)
[21:25:50] <deniska> byte4byte: if you just want to execute some php from python, subprocess might be a more straightforward route
[21:25:58] *** Joins: doforlove33 (~doforlove@45.87.215.54)
[21:26:41] *** Quits: jay-m126 (~jay-m@129.0.77.209) (Ping timeout: 246 seconds)
[21:27:52] *** Joins: jay-m126 (~jay-m@129.0.77.220)
[21:27:57] *** Quits: ItsLandon (~quassel@2601:1c0:6d03:1cb0:b5ce:612d:d932:999) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:28:16] *** Quits: magla (~gelignite@55d44d33.access.ecotel.net) (Quit: Stay safe!)
[21:29:15] <energizer> WesTomer: that's a reasonable thing to try
[21:29:30] *** Joins: grooverman (~grooverma@177.102.119.40)
[21:29:38] <bjs> paul424: yes
[21:29:42] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.28.mobile.tre.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:26] <jinsun> aphysically: good, I also thiink that was the cleanest choice
[21:31:00] *** Quits: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[21:32:04] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.28)
[21:32:12] *** Joins: dub_a (~dub_a@2601:1c2:4e00:3b3::cb2)
[21:32:44] <aphysically> I should go back to trying out pyright
[21:32:49] *** Quits: grooverman_ (~grooverma@177.95.12.14) (Ping timeout: 245 seconds)
[21:34:09] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[21:34:51] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[21:35:29] <WesTomer> energizer, thanks - so one thing I'm having trouble with (maybe it should be easier) is navigating within Jupyter to the folder where I've saved the fast.ai notebook. I can't find it. But if I open my windows explorer, I can find the folder and launch jupyter using a simple bat file from that directory (however, that's when I get the "no module
[21:35:29] <WesTomer> named torch" error).
[21:35:30] *** Joins: MikZyth (~MikZyth@188.65.243.47)
[21:36:04] <WesTomer> Maybe there's a way to cut and paste the folder path into Jupyter after launching Jupyter from Anaconda nav?
[21:36:49] <energizer> WesTomer: do you have a way to get the path into your clipboard?
[21:37:08] *** Quits: mrhands_ (~mrhands@user/mrhands) (Quit: leaving)
[21:38:45] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[21:38:58] *** Quits: Shpury (~michal@nat-koc-n1.naszasiec.net) (Quit: Konversation terminated!)
[21:40:48] *** Joins: y1n-v1 (~y1n@178.165.200.225.wireless.dyn.drei.com)
[21:41:22] *** Quits: dthpulse_ (~quassel@podciarou.sk) (Quit: No Ping reply in 180 seconds.)
[21:42:20] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:42:29] <WesTomer> energizer yes I do
[21:42:41] *** Joins: dthpulse (~quassel@podciarou.sk)
[21:42:47] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:43:35] <jinsun> anaconda doesn't have torch by default, you will have to install it there too
[21:43:46] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[21:43:59] <energizer> WesTomer: jupyter has a button to set the current directory i think
[21:44:01] <hendursaga> Congrats on the 3.10 release! The snake logo looks cool! 🐍🐍🐍
[21:44:05] <jinsun> but easier to install from conda than pip I guess (specially because this is windows)
[21:44:22] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[21:45:05] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Client Quit)
[21:45:15] <WesTomer> jinsun thanks - I will try that
[21:45:18] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[21:46:59] *** Joins: mei (~mei@user/mei)
[21:48:17] <WesTomer> energizer, I just found something interesting - at the top of Anaconda Navigator I saw "Applications on" with a drop down menu that allowed me to select "fastai". I clicked on that and saw a list of apps, including a Jupyter notebook. Below the notebook is an "install" button. I wonder if that would help, or just install a redundant notebook?
[21:48:40] *** Joins: Nact (~l@2a02:a03f:c0b0:f600:7ad2:b341:815d:a32e)
[21:49:16] *** Quits: fr_sleepy (~fr_sleepy@209.94.138.128) (Quit: WeeChat 3.2.1)
[21:51:17] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[21:53:28] <jinsun> WesTomer: how are you running your notebook now?
[21:54:16] <WesTomer> jinsun yes
[21:54:22] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[21:55:24] <WesTomer> jinsun sorry, missed the "how" haha. I navigate to the folder on my PC and then click "start jupyter.bat" which opens the Jupyter notebook - separately from Anaconda
[21:55:43] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[21:55:57] *** Joins: sartan (~sartan@user/sartan)
[21:56:39] *** Quits: Nact (~l@2a02:a03f:c0b0:f600:7ad2:b341:815d:a32e) (Quit: Konversation terminated!)
[21:56:40] *** Quits: y1n-v1 (~y1n@178.165.200.225.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[21:57:26] <jinsun> WesTomer: okay and what is in that "start jupyter.bat"? can you paste https://bpa.st/
[21:58:03] *** Quits: zepolen_ (~zepolen@2a02:587:860a:4682:ae1d:1a27:33d2:bf1e) (Remote host closed the connection)
[21:58:28] *** Joins: zepolen_ (~zepolen@2a02:587:860a:4682:fc5e:88a1:95d8:5c0c)
[21:58:59] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:59:00] *** Joins: arinov (~arinov@31.142.12.211)
[21:59:17] *** Joins: Stx (stx@libera/staff/stx)
[21:59:31] *** Quits: Payam (~Payam@138.106.57.132) (Quit: Client closed)
[21:59:41] <WesTomer> jinsun yeah I created it, it just says "jupyter lab" inside. And since it is within the local directory of the fast.ai notebook I can automatically see everything in that notebook. Getting to that same folder when I launch Jupyter from Anaconda is more difficult. I can't find the folder.
[22:00:06] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Quit: Client closed)
[22:01:36] <dude-x> anything like pexpect for command line automation?
[22:01:52] <grym> dude-x: yes, pexpect
[22:02:47] <jinsun> WesTomer: okay, so you can do 2 things, you can probably install pytorch in the environment where your "default" jupyter is, or you can make the bat file activate your conda environment where you have pytorch installed
[22:02:58] <dude-x> grym is pexpect the best?
[22:03:26] <dude-x> im coming from a position of not having used pexpect
[22:03:34] <grym> dude-x: it's the only one i know of.  it works pretty well, if your cli output is easily mapped by regex or literal string matching to a little state machine
[22:03:42] <grym> if it's unpredictable, then things get sadder
[22:04:06] <dude-x> it should be predictable.
[22:04:19] <jinsun> WesTomer: conda is easier (I guess) so maybe you should try that, but first check if you have pytorch in your conda environent, I don't think it is there by default in anaconda
[22:04:48] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[22:05:01] <WesTomer> jinsun thanks! yeah the second option sounds better. Do you know how to do that?  - and yes I checked and my conda has torch, pytorch & torchvision all installed
[22:06:10] <jinsun> okay, how did you check? you installed those yourself from the navigator?
[22:06:58] *** Quits: lacrymol1gy (~lacrymolo@static-228-78-25-46.ipcom.comunitel.net) (Ping timeout: 268 seconds)
[22:07:04] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[22:07:05] *** Joins: zaquest (~notzaques@5.128.210.178)
[22:07:07] <WesTomer> I think I did a while ago. I went to Environments, typed "torch" in the search bar, and it gave me 3 results with "installed" as the drop-down selection
[22:08:18] *** Joins: srhm (~srhm@user/srhm)
[22:08:21] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (Ping timeout: 250 seconds)
[22:08:34] *** Joins: lacrymology (~lacrymolo@static-164-4-25-46.ipcom.comunitel.net)
[22:09:05] <jinsun> WesTomer: ok, and do you know the conda environment name?
[22:10:06] <WesTomer> jinsun, I'm not sure how to get that. I launched Anaconda Navigator from my PC start menu...
[22:10:28] <jinsun> okay then probably it is the base environment
[22:10:46] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[22:11:38] <jinsun> WesTomer: in the bat file you can activate your conda env by putting `call conda activate base` before the line with `jupyter lab`, also change the `jupyter lab` line to `python -m jupyter lab` to avoid accidentally using your "default" one
[22:11:59] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[22:12:01] <WesTomer> jinsun thanks! I'll try that now
[22:12:12] *** Joins: KombuchaKip (~kip@192.252.230.5)
[22:14:44] *** Joins: srhm (~srhm@user/srhm)
[22:17:48] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[22:18:17] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:1c3a:3794:22dd:13f6) (Remote host closed the connection)
[22:18:35] *** Quits: szymon (~ugh@staticline-31-183-189-254.toya.net.pl) (Quit: szymon)
[22:18:48] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:1c3a:3794:22dd:13f6)
[22:20:43] <WesTomer> jinsun, It pulled up the notebook, but it still says "ModuleNotFoundError: No module named 'torch'"
[22:21:36] *** Quits: aphysically (~aphysical@user/aphysically) (Ping timeout: 265 seconds)
[22:21:51] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[22:21:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:23:10] <jinsun> okay so maybe it was not base environment, or maybe activate failed somehow, you didn't see any errors in the cmd window after the `call conda activate base` did you?
[22:23:48] *** Joins: fikran (~fikran@user/fikran)
[22:24:04] *** Joins: Payam (~Payam@138.106.57.132)
[22:25:12] *** Joins: mrhands (~mrhands@user/mrhands)
[22:25:54] *** Joins: aphysically (~aphysical@user/aphysically)
[22:27:44] *** Joins: thiras_ (~thiras@user/thiras)
[22:27:54] <jinsun> WesTomer: you can create a blank notebook and run `import sys; print(sys.executable)` see if the python.exe is the one from anaconda or somewhere else
[22:28:50] <WesTomer> jinsun I did not see any errors. That gave me `C:\Users\92175\Anaconda3\envs\fastai\python.exe`
[22:29:44] <jinsun> WesTomer: oh, so you activated fastai env instead of base?
[22:29:57] *** Quits: rn2208 (~rn2208@5.165.3.235) (Quit: Leaving)
[22:30:12] *** Quits: stdout (~stdout@216.163.21.11) (Quit: Leaving)
[22:30:17] <jinsun> or did you do base but still got that?
[22:30:23] <WesTomer> jinsun, yeah, I tried `call conda activate fastai` since base didn't work, and I realized the torch packages are in the `fastai` env
[22:30:33] <jinsun> okay good
[22:30:56] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[22:30:57] <WesTomer> jinsun, but the odd thing is that the notebook still gives the error about the torch module not being found
[22:31:28] *** Joins: djhankb (~djhankb@208.113.164.68)
[22:31:38] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[22:32:01] <jinsun> can you open cmd and run "conda list -n fastai" and paste on bpaste
[22:32:26] <jinsun> just to confirm if you have the packages in that env
[22:33:31] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.28) (Ping timeout: 252 seconds)
[22:34:30] *** Joins: jess (~jess@libera/staff/jess)
[22:34:37] *** Joins: Thanatos (~Thanatos@197.210.47.129)
[22:35:23] <aphysically> it would be nice if dataclasses recognized Final as ClassVar given its description as implying such in the docs
[22:36:04] *** Joins: waynew (~wayne@user/waynew)
[22:36:23] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[22:36:38] <WesTomer> jinsun I get "'conda' is not recognized as an internal or external command,
[22:36:39] <WesTomer> operable program or batch file."
[22:37:24] *** Quits: jay-m126 (~jay-m@129.0.77.220) (Ping timeout: 245 seconds)
[22:37:30] <jinsun> oh, weird that it worked from the bat file then
[22:38:20] <aphysically> pyright maintainer very responsive, already accepted my bug
[22:38:21] <WesTomer> yeah I know, maybe it ignored the bit about conda
[22:38:43] *** Joins: iphone (~iphone@user/iphone)
[22:38:59] <iphone> I just got my first ball python, so excited
[22:39:23] *** Joins: jay-m126 (~jay-m@154.72.160.147)
[22:39:34] <WesTomer> jinsun, `https://stackoverflow.com/questions/44515769/conda-is-not-recognized-as-internal-or-external-command` maybe I need to set up a path for conda in the environment variables?
[22:41:43] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[22:41:56] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[22:42:04] <jinsun> yeah the folder containing conda.bat should be in your PATH
[22:45:03] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:46:24] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[22:46:56] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[22:47:12] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:47:46] *** Joins: daoudr_ (~daoudr@91.90.122.3)
[22:48:50] *** Joins: quasineutral7 (~quaisneut@user/quasineutral)
[22:49:02] <WesTomer> jinsun - I don't have admin credentials, but I'm getting someone to help with adding this in my PATH...
[22:50:32] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92) (Ping timeout: 268 seconds)
[22:50:42] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Ping timeout: 250 seconds)
[22:50:42] *** Quits: Jefren (~Jefren@70.35.66.187) (Ping timeout: 250 seconds)
[22:50:43] *** quasineutral7 is now known as quasineutral
[22:50:53] *** Joins: howdoi (uid224@id-224.lymington.irccloud.com)
[22:52:46] *** Joins: Jefren (~Jefren@208.104.190.8)
[22:52:51] <jinsun> WesTomer: you don't need to have admin rights, you can add to user PATH instead of system PATH, or just change the PATH in the bat file, something like `set PATH=%PATH%;C:/path/to/conda`
[22:53:04] *** Quits: mcglk (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[22:53:33] *** Joins: goldfish (~goldfish@user/goldfish)
[22:54:50] *** Joins: mcglk (~mcglk@131.191.49.120)
[22:55:08] <jinsun> aphysically: Final can be instance variable too, if you don't assign to it during class definition but inside the init
[22:56:05] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (Ping timeout: 268 seconds)
[22:56:08] <aphysically> I mean during the class definition, this is useful because the docs say you shouldn't annotate both ClassVar and Final, but you need to annotate ClassVar with dataclass
[22:56:20] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Ping timeout: 250 seconds)
[22:56:27] *** Quits: greenbagels (~gb@user/greenbagels) (Ping timeout: 250 seconds)
[22:56:28] <aphysically> (the docs say you should just use "Final" instead)
[22:56:32] <aphysically> but you can't!
[22:56:38] *** Joins: quasineutral (~quaisneut@user/quasineutral)
[22:56:43] *** Joins: roguelazer (~jbrown@sietchtabr.roguelazer.net)
[22:58:20] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[22:58:33] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[22:58:35] *** Joins: greenbagels (~gb@user/greenbagels)
[22:58:44] *** Joins: jstein_ (~jstein@gentoo/developer/jstein)
[22:59:07] <aphysically> came up while I was reporting this false positive in pyright: https://github.com/microsoft/pyright/issues/2377
[22:59:14] *** Joins: zeden (~zeden@user/zeden)
[22:59:31] <jinsun> oh ya you can't do both, there has to be something like Intersection types for that that we don't have https://github.com/python/typing/issues/213
[22:59:51] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[23:00:37] *** Quits: thiras_ (~thiras@user/thiras) (Quit: Leaving)
[23:00:39] <jinsun> aphysically: where is this discussed in the docs though? can find it on the typing page
[23:00:59] <aphysically> I will find it
[23:01:03] <aphysically> give me a moment
[23:01:30] <ferros> We can't give you a moment, aphysically, time is homogeneous
[23:01:38] *** Quits: Jefren (~Jefren@208.104.190.8) (Ping timeout: 268 seconds)
[23:01:47] <aphysically> jinsun: it was in the PEP for Final https://www.python.org/dev/peps/pep-0591/
[23:01:59] <aphysically> (ctl-f ClassVar in the PEP)
[23:02:15] <jinsun> ah ok
[23:02:31] <aphysically> hence I think it make sense for dataclasses to accept Final
[23:02:49] <jinsun> ya if it is assigned in the class definition, it is a classvar at that point
[23:03:01] *** Quits: jstein_ (~jstein@gentoo/developer/jstein) (Read error: Connection reset by peer)
[23:03:07] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Read error: Connection reset by peer)
[23:03:14] <jinsun> although python doesn't ensure that at runtime
[23:03:49] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[23:03:51] <aphysically> but the behavior wnated here is the runtime behavior for ClassVar that's special to dataclasses
[23:03:55] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[23:04:01] <aphysically> while still being able to correctly type it for your type checkers
[23:04:45] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[23:05:07] <aphysically> also would you believe the one time I forgot to annotate a dict with final so mypy would check it I accidentally mutated it somewhere
[23:05:18] <aphysically> I did it *everywhere* else
[23:05:47] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Read error: Connection reset by peer)
[23:05:48] <WesTomer> jinsun I did both (set it as an environment variable, and added to the .bat file) and I'm still getting "ModuleNotFoundError: No module named 'torch'" seems odd
[23:06:31] <jinsun> WesTomer: well try `conda list -n fastai` now, and paste the output somewhere
[23:06:42] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[23:08:24] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:08:54] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 250 seconds)
[23:09:04] *** Quits: arinov (~arinov@31.142.12.211) (Ping timeout: 245 seconds)
[23:09:47] <WesTomer> jinsun I got this: `https://hastebin.com/ukubinored.yaml`
[23:09:48] <infobob> https://bpaste.net/37GA (repasted for WesTomer)
[23:10:12] *** Quits: pro_z (~pro_z@37.214.40.135) (Ping timeout: 250 seconds)
[23:10:44] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[23:11:25] *** Joins: emf (~emf@2620:10d:c090:400::5:5481)
[23:11:40] <jinsun> WesTomer: hmm, so you have pytorch there
[23:12:04] <WesTomer> jinsun, yeah and isn't that the same as `torch`?
[23:12:42] <jinsun> yes you import torch to use pytorch
[23:13:39] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (Ping timeout: 245 seconds)
[23:13:49] *** Joins: redrum88 (~redrum88@user/redrum88)
[23:14:31] *** Joins: Jefren (~Jefren@206.253.157.211)
[23:14:38] *** Quits: emf_ (~emf@2620:10d:c090:400::5:5481) (Ping timeout: 260 seconds)
[23:14:40] <jinsun> somehow the package is broken I guess
[23:14:55] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[23:15:12] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Ping timeout: 268 seconds)
[23:15:50] *** Joins: mei (~mei@user/mei)
[23:16:15] <jinsun> WesTomer: you can try reinstalling, `conda install -n fastai pytorch -c pytorch --force-reinstall`
[23:17:01] <jinsun> aphysically: you can probablly raise this on bugs.python.org cannot find anything matching dataclasses and Final there
[23:17:07] *** Joins: quasineutral (~quaisneut@user/quasineutral)
[23:17:48] *** Joins: roguelazer (~jbrown@sietchtabr.roguelazer.net)
[23:18:46] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[23:20:00] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[23:20:34] *** Joins: Balzy (~Balzy@host-82-48-132-164.retail.telecomitalia.it)
[23:20:49] *** Joins: StickyIcky (~StickyIck@189.162.229.97)
[23:21:36] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[23:22:44] *** Joins: pgib (~textual@173.38.117.88)
[23:24:07] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[23:25:42] *** Joins: ThanatosJ (~Thanatos@197.210.65.35)
[23:26:00] <jinsun> aphysically: a solution using dataclasses.field maybe? https://mypy-play.net/?mypy=latest&python=3.10&gist=77ff764ac1b6533638b5cd82e9063b7b
[23:26:17] <aphysically> I'm working on writing a bug for the feature proposal
[23:26:38] *** Quits: Thanatos (~Thanatos@197.210.47.129) (Read error: Connection reset by peer)
[23:27:32] <aphysically> this is part of a Library Ig uess?
[23:27:58] <jinsun> what is?
[23:28:24] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 250 seconds)
[23:30:06] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[23:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[23:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[23:31:30] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[23:31:31] <aphysically> oh, talking about the stuff for filing the bug, I'll link you it when I do
[23:32:06] *** Joins: tg_ (~tg@rockylinux/infra/tg)
[23:32:40] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[23:32:49] *** Joins: roguelazer_ (~jbrown@sietchtabr.roguelazer.net)
[23:32:50] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (Ping timeout: 245 seconds)
[23:32:54] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Read error: Connection reset by peer)
[23:32:57] *** Joins: quasineutral7 (~quaisneut@user/quasineutral)
[23:34:54] *** Quits: tg (~tg@rockylinux/infra/tg) (Ping timeout: 245 seconds)
[23:35:00] <jinsun> aphysically: why did you have to annotate ClassVar? now with the field workaround I'm thinking it may be considered not a bug also
[23:35:37] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[23:35:44] <aphysically> oh, sorry I got distracted and it slipped my mind you suggested a workaround
[23:35:52] <aphysically> let me look at it!
[23:37:49] <jinsun> might not be a workaround depending on why you needed to annotate ClassVar
[23:37:52] <aphysically> jinsun: this isn't bad, but it doesn't have the same meaning to dataclass as ClassVar (the latter don't get added as fields and such)
[23:38:25] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[23:38:35] <aphysically> so I think it still makes sense to propose allowing Final in general?
[23:38:44] <jinsun> yes, so you really wanted ClassVar behavior and not Final behavior?
[23:38:58] *** Quits: mei (~mei@user/mei) (Ping timeout: 252 seconds)
[23:39:36] <aphysically> I don't think this matters very much to my case in particular, except for it's convenient for type checkers
[23:40:48] <aphysically> it seemed more logical in my case for them to be classvars since they're not really fields of the dataclasss as I'm using it, just related data I"m storing with it
[23:41:21] *** Joins: Thanatos (~Thanatos@197.210.65.35)
[23:42:08] <aphysically> jinsun: I don't know, do you think it's not worthy of an enhancement req bug?
[23:43:39] *** Quits: ThanatosJ (~Thanatos@197.210.65.35) (Ping timeout: 245 seconds)
[23:43:53] *** Quits: aknot (~aknot@2603:900a:1503:17bb:136c:d18b:d594:ac07) (Ping timeout: 246 seconds)
[23:45:13] <WesTomer> jinsun thank you for all of your help today! I think it is working... I see a progress bar now :)
[23:45:36] <jinsun> aphysically: I'm just thinking, the other case also may be considered a bug, annotating Final will make remove it from the fields list when you expect only ClassVar to do that
[23:46:02] <jinsun> WesTomer: great!
[23:46:07] *** Joins: ThanatosJ (~Thanatos@197.210.65.35)
[23:46:30] <aphysically> jinsun: the other case meaning the proposed behavior?
[23:46:37] <jinsun> yeah
[23:46:38] <aphysically> yes I see what you mean
[23:46:48] <aphysically> the PEP for Final did not anticipate this situation
[23:47:33] <aphysically> in the spirit of that PEP though it might make sense to reject Final on fields
[23:47:49] *** Quits: Thanatos (~Thanatos@197.210.65.35) (Ping timeout: 245 seconds)
[23:47:58] <aphysically> but people might want to use that behavior
[23:48:10] *** Joins: Thanattt (~Thanatos@197.210.65.35)
[23:48:25] <jinsun> but I guess that can also be fixed sort of by checking if the value is a dataclasses.Field and make it not a ClassVar based on that
[23:49:02] <aphysically> yeah
[23:49:31] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (Remote host closed the connection)
[23:50:09] <jinsun> either way will be a behavior change
[23:50:24] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[23:50:37] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[23:51:35] *** Quits: ThanatosJ (~Thanatos@197.210.65.35) (Ping timeout: 268 seconds)
[23:52:38] <jinsun> aphysically: maybe just raise it as an issue just to discuss, or discuss on #python-dev here
[23:53:39] *** Quits: jay-m126 (~jay-m@154.72.160.147) (Ping timeout: 245 seconds)
[23:53:43] *** jazzy is now known as jazz-o-lantern
[23:54:39] <aphysically> jinsun: the old behavior for something annotated Final is arguably buggy given the PEP
[23:54:42] *** Joins: jay-m126 (~jay-m@154.72.160.147)
[23:55:03] <aphysically> but yeah, I'll mention it there instead of writing something on bugs.python.org (in the channel?) I guess
[23:55:13] *** Quits: nomic (~nomic@185.192.69.144) (Quit: Leaving)
[23:55:18] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[23:56:23] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[23:56:36] *** Joins: nomic (~nomic@185.192.69.144)
[23:57:58] *** Quits: fabulaztika (~oghoaglag@128.65.233.146) (Quit: Leaving)
[23:58:17] *** Joins: qlixed (~qlixed@152.170.36.244)
[23:58:18] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[23:58:21] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[23:58:35] *** Quits: roguelazer_ (~jbrown@sietchtabr.roguelazer.net) (Ping timeout: 246 seconds)
[23:58:58] <aphysically> I left a message jinsun (I hope that's okay)
[23:59:13] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[23:59:40] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
