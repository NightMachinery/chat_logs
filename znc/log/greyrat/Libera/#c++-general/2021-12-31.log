[00:08:39] <LordKalma> !fact
[00:08:40] <nolyc> LordKalma: Member functions of a class in namespace scope have the linkage of that class.
[00:09:34] <LordKalma> python has pickle :p
[00:09:40] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3d4a:739b:93a2:f67)
[00:09:55] <rpav> ðŸ¤”
[00:10:12] <LordKalma> for general (de)serialization into binary
[00:10:15] <LordKalma> use it all the time
[00:11:26] <PJBoy> use pickle for logging
[00:11:36] <LordKalma> this isn't Java
[00:11:39] <PJBoy> :D
[00:11:43] <rpav> ternary make ++/-- conditional right
[00:11:45] <LordKalma> my loggers don't run arbitrary code :p
[00:12:09] <rpav> suddenly weird case i don't think i've considered before
[00:12:48] <PJBoy> { int x{}, y{}; false ? (++x)++ : (++y)++; SHOW(x), SHOW(y); }
[00:12:48] <geordi> x = 0, y = 2
[00:13:55] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 268 seconds)
[00:14:20] <rpav> yeah i mean it seems to work
[00:15:49] *** Quits: AmR (~AmREiSa@156.199.202.96) (Quit: Konversation terminated!)
[00:16:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Quit: varioust)
[00:17:31] * Plazma slaps geordi around a bit with a large salvelinus malma
[00:20:32] *** Quits: jbalint (~jbalint@097-090-242-068.res.spectrum.com) (Read error: Connection reset by peer)
[00:20:42] *** Joins: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7)
[00:23:08] *** Quits: sixpiece (~brainz3sl@4.182.132.164.lunanode-rdns.com) (Quit: Leaving)
[00:25:59] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[00:34:06] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 245 seconds)
[00:37:23] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[00:40:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 240 seconds)
[00:40:49] *** kenanmarasli_ is now known as kenanmarasli
[00:47:12] *** Joins: AmR (~AmREiSa@156.199.202.96)
[00:49:35] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[00:51:04] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[00:57:10] *** Quits: magla (~gelignite@55d48631.access.ecotel.net) (Quit: Stay safe!)
[01:04:15] <xkoncek> !rq
[01:04:15] <nolyc> xkoncek: <cbreak> rmd: welcome back to c++. Here you can log with confidence to not download DLLs from a random third party and execute it.
[01:04:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[01:08:54] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[01:13:55] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[01:18:56] *** Joins: pulse (~pulse@user/pulse)
[01:24:11] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:25:45] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:33:12] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[01:34:42] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 268 seconds)
[01:37:57] *** Quits: apchar (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[01:40:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:24] *** ChanServ sets mode: +v npaperbot
[01:47:01] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[01:48:31] <RandomReader> fentanyl - in general, this is "serialization", there are a few libraries for that sort of thing .. Cereal, boost serialization, CBOR, Cap'N Proto, ...
[01:49:01] <RandomReader> C++ doesn't define anything like that itself
[01:49:20] <LordKalma> objects might be next to impossible to serialize
[01:49:31] <LordKalma> like if an object has a pointer to something, how do you serialize that?
[01:49:35] <LordKalma> that's part of the challenge
[01:49:39] <LordKalma> it's not trivial
[01:50:04] <RandomReader> with some guidelines: https://uscilab.github.io/cereal/pointers.html
[01:50:51] <LordKalma> I wouldn't try to serialize anything other than simple structs with only data members
[01:51:12] <RandomReader> all of these libraries require you to define the serialization in code, it doesn't really matter how complex it is
[01:51:12] <LordKalma> aka, data
[01:51:18] <LordKalma> true
[01:51:21] <RandomReader> (since there's no reflection)
[01:51:29] <LordKalma> but if you can avoid the complicated crap, the better :)
[01:51:57] <RandomReader> but everything in C++ is an object
[01:51:59] <LordKalma> pickle.dump(massive_dict_object, open("dump.bin", "wb") # Can't beat this easy :D
[01:58:50] <johnny> serialization sure is fun..
[02:00:30] <johnny> i'd imagine (but don't know) that more people are serializing stuff nowadays to for transmission or usage by other programs or systems
[02:01:02] <johnny> certainly can't send a pickle and expect it to work on any random system with python
[02:01:33] <johnny> although, i bet there's a library in C/C++ somewhere to read python pickled files..
[02:03:43] *** Joins: seninha (~seninha@user/seninha)
[02:09:56] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 252 seconds)
[02:20:21] <bobb_> aren't all the log4j-related issues due to JRNI?
[02:20:39] <bobb_> *JNDI
[02:21:45] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[02:21:52] <RandomReader> accepting format templates in *all* user input seems like the more basic fault
[02:22:29] <RandomReader> from that standpoint, JNDI is just a particular attack vector
[02:23:21] <ville> format templates could be fine if the things the templates contained weren't so nuts
[02:23:35] <RandomReader> for user input? it's never fine
[02:23:40] <ville> oh sure it would be
[02:23:48] <ville> or could be
[02:23:51] <RandomReader> at *best* it only allows users to sabotage humans reading the logs
[02:23:55] <RandomReader> there's no excuse for it, at all
[02:24:34] <bobb_> RandomReader ok i see
[02:25:01] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[02:25:53] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 268 seconds)
[02:26:48] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[02:33:24] <rpav> LordKalma: easy but not necessarily good
[02:33:42] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[02:33:57] <rpav> i mean you can design around it, and it would definitely work for simple structures, but .. more than simple structures are going to kinda suck
[02:35:35] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:40:15] *** Joins: ferdna (~ferdna@user/ferdna)
[03:04:30] *** Joins: ethrl (~ethereal@user/doforlove33)
[03:08:51] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:12:11] *** Quits: ethrl (~ethereal@user/doforlove33) (Remote host closed the connection)
[03:13:17] *** Quits: jsbach (~jsbach@2a01:c23:64ce:1100:46f5:c826:22db:de85) (Ping timeout: 240 seconds)
[03:14:00] *** Quits: jsbach_ (~jsbach@2a01:c23:64ce:1100:46f5:c826:22db:de85) (Ping timeout: 268 seconds)
[03:17:17] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[03:17:40] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[03:27:24] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[03:29:04] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[03:31:01] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Client Quit)
[03:31:59] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[03:37:31] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[04:04:21] *** Quits: bobb_ (~bobb_@dslb-088-066-156-033.088.066.pools.vodafone-ip.de) (Quit: Client closed)
[04:05:31] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[04:05:54] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[04:08:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[04:09:29] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:12:34] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b165:3b1b:f1f6:f4de) (Ping timeout: 268 seconds)
[04:17:30] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 268 seconds)
[04:17:35] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[04:20:03] *** Joins: seninha (~seninha@user/seninha)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:26:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[04:27:09] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[04:30:03] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[04:30:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[04:32:37] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[04:33:00] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3d4a:739b:93a2:f67) (Quit: Quit)
[04:42:27] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[04:42:31] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[04:43:53] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[04:47:02] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 240 seconds)
[05:01:45] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:85b6:2c43:f2cd:529c) (Quit: Textual IRC Client: www.textualapp.com)
[05:02:11] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:06:57] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[05:17:22] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 260 seconds)
[05:18:56] *** Joins: slavfox (~slavfox@93.158.232.111)
[05:20:07] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[05:33:19] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[05:40:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:27] *** ChanServ sets mode: +v npaperbot
[05:43:01] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[05:43:41] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[05:44:46] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[05:45:50] *** Joins: malloy (~jimery@116.30.221.255)
[05:50:38] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[05:52:40] *** Joins: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca)
[06:02:41] <Alipha> RandomReader: i agree. if i log something, unless i explicitly say so, i should log exactly what i write
[06:04:58] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 260 seconds)
[06:13:31] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:16:28] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[06:16:57] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:18:06] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[06:21:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 252 seconds)
[06:33:24] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[06:38:43] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 268 seconds)
[06:39:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:51:27] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[06:54:11] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[06:55:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[06:55:59] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:57:08] *** Quits: jehelset (~jeh@130.51-175-95.customer.lyse.net) (Remote host closed the connection)
[07:06:31] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[07:06:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:13:32] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:16:13] *** Joins: adeliktas8 (~adeliktas@i59F522E2.versanet.de)
[07:17:57] *** Quits: adeliktas (~adeliktas@i59F4D5BD.versanet.de) (Ping timeout: 240 seconds)
[07:17:57] *** adeliktas8 is now known as adeliktas
[07:26:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[07:27:04] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:28:04] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[07:35:12] *** Joins: supernova (~quassel@2405:9800:ba11:6207:404c:9ea0:8dbd:c271)
[07:35:19] *** Quits: supernova (~quassel@2405:9800:ba11:6207:404c:9ea0:8dbd:c271) (Client Quit)
[07:35:29] *** Joins: supernova (~quassel@2405:9800:ba11:6207:404c:9ea0:8dbd:c271)
[07:36:39] *** Quits: p-i- (~Ohmu@mx-ll-180.183.72-213.dynamic.3bb.co.th) (Remote host closed the connection)
[07:39:13] <supernova> if I have Header, Cpp and file with main function, i suggested to initialize array with variables in main file.
[07:39:13] <supernova> Is there a way to initialize it in cpp file and access from cpp file as in file @ https://wandbox.org/permlink/EBVE8lc8rouvmNkM
[07:43:17] *** Quits: supernova (~quassel@2405:9800:ba11:6207:404c:9ea0:8dbd:c271) (Ping timeout: 240 seconds)
[07:43:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:43:57] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[07:48:18] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:48:44] *** Joins: supernova (~quassel@2405:9800:ba11:6207:a151:a304:d0d1:18c6)
[07:54:53] <traxex> supernova: the array is not static, so every Date object gets its own copy
[07:55:00] <traxex> there is no single shared array to initialize
[07:59:08] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[08:01:16] <traxex> supernova: https://wandbox.org/permlink/VNRVWwnPED9aliDJ
[08:02:08] *** Quits: chozorho (~chozorho@2601:146:300:c30::8360) (Quit: WeeChat 3.0)
[08:03:37] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[08:06:16] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3d4a:739b:93a2:f67)
[08:21:16] *** Quits: supernova (~quassel@2405:9800:ba11:6207:a151:a304:d0d1:18c6) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:23:12] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:23:37] *** Joins: andreasbuhr (~quassel@p549dbf2d.dip0.t-ipconnect.de)
[08:29:35] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:45:14] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[08:47:10] *** Joins: malloy (~jimery@116.30.221.255)
[08:52:02] *** Joins: supernova (~quassel@2405:9800:ba11:6207:a151:a304:d0d1:18c6)
[08:52:25] *** Quits: supernova (~quassel@2405:9800:ba11:6207:a151:a304:d0d1:18c6) (Client Quit)
[08:54:44] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:54:53] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:02:46] <hnOsmium0001[m]> constructor and destructor are commonly abbreviated as ctor and dtor respectively, is there a common abbreviation for assignment operators?
[09:03:18] *** Joins: chozorho (~chozorho@2601:146:300:c30::5741)
[09:05:48] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[09:10:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[09:22:26] <Alipha> hnOsmium0001[m]: I use op=
[09:22:44] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[09:26:22] *** Joins: callq (~callq@157.41.89.228)
[09:27:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[09:30:12] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[09:35:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 252 seconds)
[09:40:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:25] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:25] *** ChanServ sets mode: +v npaperbot
[09:47:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[09:51:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[09:54:48] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[09:54:56] *** Joins: p-i- (~Ohmu@mx-ll-180.183.72-213.dynamic.3bb.co.th)
[09:55:36] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:09:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 260 seconds)
[10:15:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[10:31:24] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[10:33:32] *** Joins: malloy (~jimery@116.30.221.255)
[10:35:07] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:35:17] *** Quits: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca) (Ping timeout: 240 seconds)
[10:36:34] *** Quits: chozorho (~chozorho@2601:146:300:c30::5741) (Quit: WeeChat 3.0)
[10:37:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[10:41:11] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3d4a:739b:93a2:f67) (Quit: Quit)
[10:49:47] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[10:51:28] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[11:01:07] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3d4a:739b:93a2:f67)
[11:08:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[11:10:54] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:11:22] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[11:35:43] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Read error: Connection reset by peer)
[11:38:46] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3d4a:739b:93a2:f67) (Quit: Quit)
[11:44:39] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[11:46:16] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:55:54] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[11:57:52] *** Joins: malloy (~jimery@116.30.221.255)
[12:01:18] *** Joins: magla (~gelignite@55d465a4.access.ecotel.net)
[12:24:27] *** Quits: troller (~p@2a02:6b8:b081:9::1:1b) (Remote host closed the connection)
[12:24:29] *** Joins: robod34 (Username@79.113.195.239)
[12:25:01] *** Joins: supernova (~quassel@2405:9800:ba11:6207:dc70:abb8:ab41:aa33)
[12:25:38] *** Joins: proller (~p@80.240.216.69)
[12:33:37] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[12:40:31] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[12:42:36] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[12:47:11] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[12:47:50] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[12:56:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[12:58:25] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[12:59:32] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[13:00:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 260 seconds)
[13:07:26] *** Joins: jsbach (~jsbach@2a01:c23:5cca:6000:4f07:ad77:c11c:4695)
[13:09:43] *** Joins: seninha (~seninha@user/seninha)
[13:11:44] *** Quits: callq (~callq@157.41.89.228) (Quit: callq)
[13:13:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5)
[13:17:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b024:d59b:b695:bed5) (Ping timeout: 240 seconds)
[13:24:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:27:20] *** Quits: malloy (~jimery@116.30.221.255) (Quit: WeeChat 3.0)
[13:40:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:26] *** ChanServ sets mode: +v npaperbot
[13:44:41] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[14:04:07] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[14:13:05] *** Joins: callq (~callq@2409:4062:2d92:448:e48d:d3de:c520:9560)
[14:32:57] *** Quits: AmR (~AmREiSa@156.199.202.96) (Ping timeout: 240 seconds)
[14:58:14] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:59:27] *** Joins: arca0 (~tesuji@91.193.4.186)
[15:07:36] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Remote host closed the connection)
[15:11:47] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 268 seconds)
[15:12:10] *** Joins: proller (~p@2a02:6b8:b081:8803::1:14)
[15:16:37] *** Quits: supernova (~quassel@2405:9800:ba11:6207:dc70:abb8:ab41:aa33) (Ping timeout: 240 seconds)
[15:20:05] *** Quits: arca0 (~tesuji@91.193.4.186) (Quit: WeeChat 3.4)
[15:26:42] *** Joins: arca0 (~tesuji@91.193.4.186)
[15:27:38] *** Joins: supernova (~quassel@2405:9800:ba11:6207:d839:c844:ddcf:c0f2)
[15:36:36] *** Quits: magla (~gelignite@55d465a4.access.ecotel.net) (Quit: Stay safe!)
[15:38:21] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[15:40:53] *** Joins: plastico (~plastico@neomutt/plastico)
[15:41:31] *** Quits: arca0 (~tesuji@91.193.4.186) (Quit: WeeChat 3.4)
[15:44:01] *** Quits: letto (~letto@188.26.158.104) (Ping timeout: 256 seconds)
[15:56:19] *** Quits: andreasbuhr (~quassel@p549dbf2d.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:58:32] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:02:43] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:05:25] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:08:05] *** Joins: PJBoy (~PJBoy@user/pjboy)
[16:11:27] *** Joins: xkuru (~xkuru@user/xkuru)
[16:12:04] *** Joins: Leone (~Leo@157.52.18.77)
[16:12:13] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[16:13:57] *** Quits: callq (~callq@2409:4062:2d92:448:e48d:d3de:c520:9560) (Ping timeout: 240 seconds)
[16:14:08] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[16:14:34] *** Joins: Burgundy (~yomon@79.115.213.171)
[16:15:55] *** Joins: pulse (~pulse@user/pulse)
[16:16:36] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[16:19:25] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[16:23:54] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[16:33:37] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[16:38:50] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:497b:a765:e336:cc9b)
[16:53:32] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:d8e5:b45f:7ffd:50ed)
[16:53:32] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:d8e5:b45f:7ffd:50ed) (Changing host)
[16:53:32] *** Joins: skapata (~Skapata@user/skapata)
[17:07:05] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:09:55] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[17:11:55] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Client Quit)
[17:12:27] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[17:16:33] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[17:18:18] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (Remote host closed the connection)
[17:18:28] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[17:22:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 252 seconds)
[17:32:21] *** Joins: cart_man (~rynot@host-78-144-125-216.as13285.net)
[17:34:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[17:38:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 250 seconds)
[17:40:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:25] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:25] *** ChanServ sets mode: +v npaperbot
[17:42:55] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:46:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 250 seconds)
[17:50:06] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[17:54:35] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[17:56:03] <very_sneaky> I'm so confused. I'm compiling my program with gcc 10.3.0 on github actions, and i get a `potential null pointer dereference` error for code that is basically identical to this: https://godbolt.org/z/1b8zPvvc6. When I compile the program locally with the same compiler version, I don't get the same error - I'm confused, what else influences errors like this?
[17:57:57] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[17:58:05] <very_sneaky> (the part that's flagged is `return mActive;`)
[17:58:48] <ville> very_sneaky: have you reproduced the problem with that code exactly?
[17:59:13] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:59:17] <very_sneaky> I haven't been able to reproduce it outside of github actions - running _exactly_ the same code locally with the same compiler doesn't yield an error/warning
[17:59:25] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[17:59:49] <very_sneaky> the line in compiler explorer is identical though
[17:59:50] <ville> very_sneaky: run that code exactly in githun actions?
[17:59:58] <ville> github
[18:00:11] <ville> problem with the "it's basically this, but i left some stuff out"-approach is when you don't know the problem you can't know that what you left out wasn't critical to reproducing the problem
[18:01:45] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[18:03:05] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[18:04:22] <very_sneaky> yeah I agree. That's not a bad idea, i guess that would rule out it being a problem with a particular snippet
[18:05:02] <very_sneaky> ville: do you know of any other factors that might influence this kind of behaviour aside from compiler version though?
[18:05:12] <ville> cosmic rays
[18:05:21] <very_sneaky> it's happened 3 or 4 times in a row
[18:05:38] <ville> gremlins
[18:06:13] <ville> in all seriousness nothing in that snippet jumps out, but who knows what sort of shenanigans the github people are upto
[18:06:51] <ville> can you even know if they are running a vanilla gcc or clang, or do they patch them and so on
[18:07:42] <very_sneaky> i had to install it manually
[18:07:54] <very_sneaky> they have shite support for c++ compilation variation
[18:08:11] <ville> i am not familiar with their infrastructure enough to know whether that means "yes" or "no"
[18:08:37] <very_sneaky> one of the things i like about the conan index team actually - they provide a bunch of docker images with different compiler versions and a specific glibc version to build in different environments for testing and package release compatability
[18:11:30] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:12:01] *** Joins: letto (~letto@188.26.158.104)
[18:12:01] <very_sneaky> i mean, i had the command `apt install -y gcc-10 g++-10`, so i'm assuming it was just what was available in the ubuntu repo's
[18:12:13] <very_sneaky> i don't think it would have been touched by gh
[18:12:37] <ville> never underestimate the web people
[18:12:49] <very_sneaky> but that is a good point, maybe ubuntu has different config than arch
[18:15:23] * PJBoy vomits at nodiscard
[18:15:46] <very_sneaky> T.T why PJBoy why
[18:15:59] <PJBoy> nodiscard implies your function is named incorrectly
[18:16:04] <PJBoy> but your function is named correctly
[18:16:31] <ville> PJBoy: huh
[18:16:43] <PJBoy> if you have to deal with people that write `int main() { Test t; t.isActive(); }`
[18:16:45] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[18:16:45] <ville> very_sneaky: it's very noisy when applied per-function
[18:16:46] <very_sneaky> well, maybe. it avoids making assumptions about how people _will_ interpret what a function does
[18:16:49] <PJBoy> then like
[18:16:56] <PJBoy> you seriously can't help such people
[18:17:08] <very_sneaky> you can, with a [[nodiscard]] ;)
[18:17:12] <PJBoy> nah
[18:17:16] <ville> PJBoy: yes i do agree you can't idiot proof code, but your claims don't follow
[18:17:24] <PJBoy> that's like trying to plug a leak in a boat with your hand
[18:17:53] <very_sneaky> i agree with the noisiness
[18:17:55] <PJBoy> it solves a minor symptom of stupidity
[18:18:00] <very_sneaky> maybe i'll just add [[nodiscard]] and remove the message
[18:18:36] <PJBoy> if you need to add nodiscard to your function, then it's not clear enough that it returns a crucial result
[18:18:38] <ville> very_sneaky: or don't have such function at all... if it's really just returning a bool member's value
[18:18:46] *** Joins: aniketgm (~Aniket@49.36.109.109)
[18:18:48] <PJBoy> but any function leading `is` clearly returns a bool
[18:19:02] <very_sneaky> ville: it's on a polymorphic interface
[18:19:31] <ville> very_sneaky: aha... you wouldn't happen to call that during construction or destruction?
[18:19:37] <very_sneaky> and i don't love having data members on polymorphic interfaces
[18:19:56] <very_sneaky> nah haha. i use it to check if a model has finished it's execution for a time step in a simulation
[18:20:14] <very_sneaky> so it updates mActive when a function begins and ends
[18:21:32] <PJBoy> I'm using this experience as yet another argument against -Werror
[18:22:26] <very_sneaky> as in, the rate of false positives is too high for you to bother with it?
[18:23:05] <PJBoy> you get warnings you can't anticipate or reproduce that kill your build
[18:23:10] <PJBoy> for absolutely no benefit
[18:23:26] <very_sneaky> the benefit to me is building in environments that i don't have locally
[18:23:36] <very_sneaky> and failing if it throws anything spurious
[18:23:56] <PJBoy> building remotely is its own benefit, Werror doesn't help with that
[18:24:09] <very_sneaky> but yeah, idk. if i don't have a way of silencing the specific instances that i want to ignore then maybe it is useless
[18:24:25] <PJBoy> but Werror does get in the way of the testing part of the remote build
[18:24:26] <very_sneaky> Werror fails the build job which alerts me to it
[18:24:41] <PJBoy> or the execution part if you're not doing tests
[18:25:12] <very_sneaky> there is certainly an efficiency question
[18:25:37] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[18:25:43] <PJBoy> if you're unable to process warnings, then Werror makes sense
[18:26:19] <PJBoy> I'm not sure if the github action stuff reports warnings
[18:26:51] <very_sneaky> yeah I haven't tried
[18:30:32] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:30:35] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 252 seconds)
[18:34:04] *** Joins: callq (~callq@2409:4062:2d92:448:d73:1a02:e27c:1e4a)
[18:36:23] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:d0c4:7879:19ea:8ccb)
[18:36:23] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:d0c4:7879:19ea:8ccb) (Changing host)
[18:36:23] *** Joins: RoKenn (~RoKenn@user/rokenn)
[18:38:22] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[18:43:55] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:44:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[18:48:52] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[18:50:15] <Alipha> very_sneaky: you're compiling the code with the same command line flags as on github actions?
[18:50:38] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[19:13:31] <rpav> part of qt's problem is that unlike gtk's _unified_ model of signal handling, it's a mishmash of overrides and signals and random bullshit
[19:24:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[19:25:32] *** Quits: proller (~p@2a02:6b8:b081:8803::1:14) (Ping timeout: 240 seconds)
[19:32:21] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:34:43] *** Quits: aniketgm (~Aniket@49.36.109.109) (Read error: No route to host)
[19:35:18] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:38:30] *** Joins: proller (~p@80.240.216.69)
[19:39:57] *** Joins: aniketgm (~Aniket@49.36.109.109)
[19:42:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[19:44:00] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[19:49:16] <CarloWood> I'd like to benchmark a function that reads a file into a std::string. I don't want to measure the time needed to read from disk though :/.
[19:49:57] *** Quits: aniketgm (~Aniket@49.36.109.109) (Read error: Connection reset by peer)
[19:50:09] <traxex> what exactly would you want to benchmark then?
[19:50:45] <kalven> so read from some /dev thing
[19:53:21] <Alipha> CarloWood: subtract out the time it takes to do a single, simple fread?
[19:55:19] *** Joins: Leo_V (~Leo@157.52.18.77)
[19:57:19] *** Quits: Leone (~Leo@157.52.18.77) (Ping timeout: 256 seconds)
[19:58:34] *** Joins: aniketgm (~Aniket@49.36.109.109)
[20:00:47] *** Joins: h4k1m0u (~h4k1m0u@2001:861:3146:5890:b1a9:7ba0:a1ae:7f4d)
[20:02:01] <h4k1m0u> Hi everyone, I'm coding a paint-like software with ImGui and I have a technical question pertaining to the pencil tool. Let's suppose I want to draw with the pencil tool (i.e. mouse cursor) in the main loop (opengl/imgui), what kind of data is usually saved so that the drawing is persistent? is it the coordinates of each point? or is there another
[20:02:02] <h4k1m0u> way to implement it?
[20:06:14] *** Joins: magla (~gelignite@55d465a4.access.ecotel.net)
[20:09:02] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 252 seconds)
[20:09:17] *** Quits: Leo_V (~Leo@157.52.18.77) (Ping timeout: 240 seconds)
[20:13:13] *** Joins: Leone (~Leo@157.52.18.77)
[20:13:21] <rpav> err, your "brush" should modify the image/texture data if this is a raster image editor
[20:13:30] <rpav> if you're saving undo state, there are numerous ways
[20:13:54] *** Quits: Leone (~Leo@157.52.18.77) (Read error: Connection reset by peer)
[20:15:30] *** Joins: Leone (~Leo@157.52.18.77)
[20:19:02] <ville> h4k1m0u: you can store all the actions the user has done so far and then a final "rendered" state which is being displayed. that'll get you to a point where you can do undo-redo system. albeit possibly at poor performance. undo-redo is just "playing back" the user actions to certain point in the timeline
[20:25:31] <ville> h4k1m0u: of course it varies between each action what is stored exactly. for a "draw line" you'd store start and end xy, brush, color...
[20:26:07] *** Joins: chozorho (~chozorho@2601:146:300:c30::b5c2)
[20:26:31] <h4k1m0u> I think modifying directly the image as suggested by rpav will do for now, I'll try later to refactor the code it so that operations are replayed in every frame with undo/redo functionalities (as suggested by ville). Thanks guys
[20:27:04] <ville> h4k1m0u: oh you wouldn't replay them every frame. that's why you've the final "rendered" state as well
[20:27:32] <rpav> undo-redo is usually playing back an operation that will _undo_ the user's action
[20:27:45] <ville> but let's say you did 1 undo, then in a crap system you'd play back from all the way from the first action
[20:27:52] <rpav> i.e. if i type "X" the "undo" operation would be "delete the character at <pos>"
[20:28:16] <h4k1m0u> ville: the final rendered state is what rpav suggested right? (i.e. modifying the image directly)
[20:28:20] <rpav> then redo is basically that in another stack, where the opposite of "delete character at <pos>" is "insert <C> at <pos>"
[20:28:26] <ville> in better system you'd store the "stuff needed to undo" as rpav says
[20:28:32] <rpav> h4k1m0u: not necessarily but in the trivial case
[20:29:01] <ville> h4k1m0u: well to do an action you could/would modify the previous "final" state
[20:29:03] <rpav> in an even slightly nontrivial case you want to draw onto a second texture, then use that to compute undo etc
[20:29:29] <h4k1m0u> rpav: that sounds smart compared to what I had in mind
[20:29:34] <ville> h4k1m0u: it all depends on the specifics of the actions in questions
[20:29:43] <h4k1m0u> makes sense
[20:29:47] <rpav> a "simple" undo system like ville is talking about could simply be storing like 8 textures and drawing onto each one for each operation, and then for old ones actually committing them
[20:30:20] <rpav> the problem with that of course is if you're compositing tons of like 8k textures or something and/or on old/limited hardware
[20:30:40] <rpav> but i mean it would suffice on most modern systems unless you want to crank undo stack up to a zillion
[20:31:09] <rpav> _but_ there's no reason not to keep around a "composited view" and then keep around individual layers either .. i mean there are just tons of possibilities here
[20:31:29] <rpav> even things that use graphy dynamic/nondestructive composition cache things
[20:31:50] <rpav> perhaps especially those things ðŸ¤”
[20:31:51] <h4k1m0u> correct me if I'm wrong (just to be sure), if I want to give the user the possibility of doing an undo 8 times, I'll need to save 8 textures/images, right?
[20:32:03] <ville> i'd just go for the simple/crap system that comes to mind at first. if it's a new problem for you, you won't design anything better anyways with out exploring the domain
[20:32:10] <rpav> h4k1m0u: in the worst case, or the simple case
[20:32:13] <rpav> yeah
[20:32:21] <ville> h4k1m0u: no you don't _have to have to_.
[20:32:30] <rpav> i mean don't worry about even that, just click and modify a texture to start
[20:32:37] <h4k1m0u> otherwise your solution makes sense too, ville
[20:32:50] <ville> h4k1m0u: if you have N undos, then you store base image, N actions, and possibly a final "rendered" image
[20:33:02] <rpav> what ville said is right on, just like make something simple work and then worry about features
[20:33:03] <ville> h4k1m0u: err that is one possible way of doin git
[20:33:50] <h4k1m0u> alright, I'll try to think of a way to modify the image first, then worry about the rest later ^^
[20:34:47] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[20:40:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[20:43:32] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[20:44:41] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[20:45:51] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[20:51:01] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[20:52:09] *** Quits: h4k1m0u (~h4k1m0u@2001:861:3146:5890:b1a9:7ba0:a1ae:7f4d) (Ping timeout: 256 seconds)
[20:52:39] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[21:00:15] *** Quits: aniketgm (~Aniket@49.36.109.109) (Quit: leaving)
[21:03:37] *** Quits: supernova (~quassel@2405:9800:ba11:6207:d839:c844:ddcf:c0f2) (Ping timeout: 240 seconds)
[21:03:56] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:09:12] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[21:12:04] *** Joins: ferdna (~ferdna@user/ferdna)
[21:17:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 250 seconds)
[21:18:05] *** Quits: baltazar (~baltazar@85-238-65-123.pool.digikabel.hu) (Ping timeout: 268 seconds)
[21:18:21] *** Quits: mitch0 (~mitch@85-238-65-123.pool.digikabel.hu) (Ping timeout: 256 seconds)
[21:19:19] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 268 seconds)
[21:19:20] *** Joins: baltazar (~baltazar@84-236-61-122.pool.digikabel.hu)
[21:19:58] *** Joins: mitch0 (~mitch@84-236-61-122.pool.digikabel.hu)
[21:21:31] *** Joins: Burgundy (~yomon@79.115.213.171)
[21:22:18] <c4017w> So I just realized that I have a lot of static non-local variables depending on other static non-local variables in other translation units. Other than getting rid of static initialization, wrapping each variable in a function like shown here, what are my options? https://www.modernescpp.com/index.php/c-20-static-initialization-order-fiasco
[21:22:44] *** Joins: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca)
[21:23:31] <c4017w> Like is there a way to define the initialization order? Doesn't have to be pure C++, I'm on GCC
[21:27:18] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[21:30:39] *** Quits: cart_man (~rynot@host-78-144-125-216.as13285.net) (Quit: Konversation terminated!)
[21:38:27] <Alipha> c4017w: don't put them in different TUs?
[21:38:54] <Alipha> That's not a recommendation, but an additional option
[21:40:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:27] *** ChanServ sets mode: +v npaperbot
[21:50:36] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[21:51:26] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[21:54:47] <amosbird> Hello! Since which version does c++ support 1_GiB literal?
[21:54:57] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[21:55:51] *** Joins: AmR (~AmREiSa@156.199.20.227)
[21:55:54] <kalven> user defined literals have been there since 11
[21:56:01] <amosbird> Cool
[21:56:02] *** Joins: Burgundy (~yomon@79.115.213.171)
[22:03:09] <c4017w> No, I don't want to combine TUs. It will make the code messy. I don't understand why the linker can't automatically figure out the correct initialization order? If somewhere I have `static a = b`, why can't it figure out to initialize `b` first?
[22:03:15] *** Joins: yomon (~yomon@79.115.213.171)
[22:03:57] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[22:04:35] <c4017w> fwiw, my code somehow works fine, despite having dozens of these dependencies on static variables. So maybe the linker is actually doing it already
[22:13:11] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:14:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:14:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:16:07] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:21:04] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:23:20] <Alipha> c4017w: that page you linked also had the constinit suggestion, if it is actually applicable
[22:25:57] <Alipha> c4017w: and no, your code isn't fine. You're just "lucky" and it's prone to break in the future with a changes to your code or a different compiler, or even different compilation flags or order
[22:30:20] <c4017w> Would constinit work when there are multiple dependancy levels, like `constinit static auto a = 1`, `constinit static auto b = a`, `constinit static auto c = b`?
[22:31:31] <Alipha> Unless you're dependent solely upon variables which have compile-time initial values. For instance, `int x = 3;` and in a different TU, `int y = x + 2;` I'm not sure what the standard has to say about that, but you can be confident that x's initial value is embedded into the executable and no initialization of x is performed--x just has the value.
[22:32:05] <ville> c4017w: you need to remember the age of these things. c++ follow's c's build model. c is from the 60s/70s. that's when they made the decissions. those decissions may not make much sense on today's hardware
[22:32:35] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[22:32:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[22:33:38] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[22:36:47] <c4017w> Yeah, my scenarios are not as trivial as the example. I doubt it would work right. It's a shame. Static init seems like such a clean way of implementing global-lifetime things
[22:39:23] <traxex> sometimes it helps to make a "get_instance()" type function which contains a local static variable and returns a reference to it
[22:39:38] <traxex> but I haven't read the whole discussion, maybe this was already mentioned
[22:41:38] <ville> c4017w: well... there's the whole argument against globals. mutable globals anyways. i find it easier to read functions if you pass in a context object over especially if it's mutable
[22:43:15] <c4017w> traxex, that's the one workaround I know of, but it's ugly
[22:44:33] <traxex> I think it's a small ugliness to pay for clear semantics
[22:46:03] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[22:46:04] <xkoncek> who is on IRC on this beautiful day?
[22:46:22] *** Joins: cursey (~cursey@user/cursey)
[22:46:49] <rpav> it's a fairly crappy day
[22:46:59] <Alipha> xkoncek: it's 14F (-10C) and snowing here, so...
[22:47:22] <rpav> it's gonna be that here tomorrow
[22:47:57] <Alipha> i mean, i'd be on irc anyway, since it's on my phone and i'm never without my phone
[22:49:20] *** Joins: pulse (~pulse@user/pulse)
[22:51:49] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 268 seconds)
[22:55:41] *** Joins: ethrl (~ethereal@user/doforlove33)
[22:57:19] <CarloWood> It's unbelievable but I just can't figure out what is the most efficient way to read from a file into a string :/.
[22:58:34] <CarloWood> I want it to allocate the needed memory just once, and write as much as possible per call (whatever that is internally). Not byte by byte, or double allocation and copying the data afterwards, nor growing the allocation slowly and possibly having to move it.
[22:58:50] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[22:59:45] <traxex> well you can read the file size first to know how much space you need
[23:00:02] <xkoncek> string::reserve
[23:00:10] <xkoncek> istream::seekg
[23:00:29] <Alipha> CarloWood: seekg/tellg/resize/read, as shown here? https://stackoverflow.com/a/2602258
[23:01:16] <xkoncek> there are also istrembuf iterators but i assume they are suboptimal
[23:02:30] <CarloWood> Alipha: I studied that SO question and answer hours ago.
[23:02:32] <Alipha> well, the resize solution probably isn't optimal either, as i'm not sure if the compiler would optimize away the pointless filling of the data with ' ' (or i would go with '\0')
[23:02:59] <Alipha> the reserve/assign/istreambuf_iterator solution might actually be faster because of that
[23:03:25] <CarloWood> I must be tired or something, cause I don't even see what is wrong with this anymore...
[23:03:27] <CarloWood>  { stringstream ss; ss << "My pseudo file"; string str; ss >> str; cout << "Read: " << str.size() << " bytes: \"" << str "\""; }
[23:03:27] <geordi> error: expected ';' before string constant (fix known)
[23:03:34] <CarloWood> Oh now I see
[23:03:40] <CarloWood>  { stringstream ss; ss << "My pseudo file"; string str; ss >> str; cout << "Read: " << str.size() << " bytes: \"" << str << "\""; }
[23:03:41] <geordi> Read: 2 bytes: "My"
[23:03:42] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Read error: Connection reset by peer)
[23:04:10] <traxex> operator>> stops at whitespace
[23:04:11] <CarloWood> Right - I want a pseudo file - but it has to be binary
[23:04:22] <Alipha> i wouldn't use the stringstream solution
[23:04:25] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[23:04:35] <Plazma> RIP Betty White :(
[23:04:45] <traxex> I don't know what purpose stringstream is serving
[23:05:20] <traxex> if it's a way to avoid reading from a file when benchmarking reading from a file, I think somewhere we went wrong
[23:05:38] <Alipha> by "stringstream solution", i mean, std::ifstream t("file.txt"); std::stringstream buffer; buffer << t.rdbuf();
[23:06:25] <Alipha> CarloWood: what's wrong with the seekg/tellg/resize/read solution?
[23:06:30] <traxex> but the original question was about reading from a file to a std::string with minimum copies
[23:06:49] *** Quits: callq (~callq@2409:4062:2d92:448:d73:1a02:e27c:1e4a) (Quit: callq)
[23:06:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:497b:a765:e336:cc9b) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:07:27] <CarloWood> Alipha: using that buffer << t.rdbuf() is pretty optimal it seems. Why don't you like it?
[23:07:46] <CarloWood> Nothing wrong with seekg/tellg/resize to get the file size. But then?
[23:08:19] <CarloWood> How can I get geordi to read a file?!
[23:08:29] <CarloWood> Otherwise I can't show stuff here.
[23:09:05] <Alipha> CarloWood: the stringstream solution is going to end up incrementally growing stringstream's internal std::string, i assume
[23:09:35] <CarloWood> I am trying this:
[23:09:39] <CarloWood>   std::ifstream ifs(filename, std::ios::binary | std::ios::in);
[23:09:46] <CarloWood>   std::string buf;
[23:09:46] <CarloWood>   buf.reserve(73719);
[23:09:46] <CarloWood>   std::ostringstream sink(std::move(buf));
[23:09:46] <CarloWood>   ifs >> sink.rdbuf();
[23:09:53] <CarloWood> but that read nothing. 0 bytes
[23:09:56] <CarloWood> no idea why
[23:10:23] <Alipha> CarloWood: how do you know it read 0 bytes?
[23:10:31] <CarloWood>   std::cout << "Read: " << sink.str().size() << " bytes." << std::endl;
[23:10:47] <traxex> why are you using any stringstreams?
[23:10:59] <Alipha> CarloWood: the solution i would use is: std::ifstream t("file.txt", std::ios::binary); t.seekg(0, std::ios::end); size_t size = t.tellg(); std::string buffer(size, '\0'); t.seekg(0); t.read(&buffer[0], size);
[23:11:55] <CarloWood> That has the "problem" that it fills the memory with 0's first.  Probably good enough, but weird/annoying you can't do it without that.
[23:12:44] <Alipha> CarloWood: i'd take that over doing log2(n) reallocations.
[23:12:52] <traxex> you can do malloc and fread or such
[23:13:02] <CarloWood> Also, is 'read' guaranteed to not return something less than size? Interrupts, or a small buffer somewhere so you get partial reads?
[23:13:30] <traxex> not guaranteed
[23:13:38] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[23:13:45] <traxex> you need to check the return value
[23:13:49] <traxex> and have a loop
[23:14:27] <Alipha> CarloWood: works fine: https://wandbox.org/permlink/hblm6PzVtxAL0zza
[23:14:28] <CarloWood> I don't know - ordinary files are always blocking. Might as well read the whole thing.
[23:15:37] <CarloWood> Alipha: ...
[23:16:01] <Alipha> CarloWood: oh. i just realized the geniusness of moving the reserved std::string into the stringstream. i was initially confused and wtf, that's pointless
[23:17:06] <Alipha> i still don't like all the virtual functions in streambufs, but it's probably fine
[23:17:39] <xkoncek> if you don't like them then you would have to go with plain C functions
[23:17:43] <Alipha> so yeah, i would probably go with your reserve/move/stringstream/rdbuf solution
[23:17:50] <CarloWood> Ok... I need to replace the std::ifstream::rdbuf() -> std::filebuf* with my own 'myfilebuf' (just for testing).
[23:17:52] <traxex> huh
[23:18:02] *** Quits: ethrl (~ethereal@user/doforlove33) (Remote host closed the connection)
[23:18:11] <CarloWood> And haven't been able to do that :/. It seems not possible to replace the filebuf.
[23:18:37] <CarloWood> There is a set_rdbuf() somewhere, but it is protected :/
[23:18:43] <traxex> can someone elaborate what is the geniusness?
[23:18:46] <Alipha> CarloWood: i'm assuming you actually need a std::string? otherwise, i'd suggest std::unique_ptr<char[]>, perhaps with a std::string_view pointing to it
[23:18:52] <CarloWood> traxex: I am
[23:20:06] <CarloWood> I don't REALLY need a std::string... after all, it's binary data.  But I was being stubborn.  I could write a wrapper around std::vector<char> and call it ADay - or BinaryData.
[23:20:38] <Alipha> CarloWood: std::vector would still pointlessly zero-initialize
[23:20:39] <CarloWood> And since the binary data in a lot of cases is actually text - it seemed to make it easier to print :P.
[23:20:41] <traxex> yes, for large buffers std::string and std::vector<char> are very similar
[23:20:57] <traxex> string has an optimization for small lengths which is often useful
[23:21:10] <CarloWood> What? std::vector<char> can't be grown in size without initializing it?!
[23:21:28] <traxex> of course it can
[23:21:32] <Alipha> { std::stringstream ss; std::cout << std::move(ss).str().capacity() << std::endl; } // traxex
[23:21:32] <geordi> 15
[23:21:35] <Alipha> { std::string buf; buf.reserve(20000); std::stringstream ss(std::move(buf)); std::cout << std::move(ss).str().capacity() << std::endl; } // traxex
[23:21:36] <geordi> 20000
[23:22:06] <traxex> I'm just saying that short strings will typically be stored inside std::string without a heap buffer
[23:22:16] <traxex> but this does not happen with std::vector<char>
[23:22:20] <traxex> for big buffers, not relevant
[23:22:35] <Alipha> traxex: the std::stringstream takes ownership of the buf std::string, so the std::stringstream will have an initial capacity of whatever you reserve buf to have
[23:22:53] <CarloWood> Trust me, I am not reading whole files that fit in a std::string and worry about speed in the way I am now (see above)
[23:23:51] <traxex> ok, I'm missing some context
[23:25:27] <CarloWood> { std::vector<char> v(100); for (char c : v) int cnt = 0; if (c != 0) ++cnt; cout << cnt; }
[23:25:27] <geordi> error: 'c' was not declared in this scope
[23:25:44] <CarloWood> { std::vector<char> v(100); int cnt = 0; for (char c : v) if (c != 0) ++cnt; cout << cnt; }
[23:25:45] <geordi> 0
[23:25:54] <CarloWood> rrrreeeally?
[23:25:57] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:492a:4f1b:6342:37fe)
[23:26:15] <traxex> yes, vector initializes the values to zero
[23:26:19] <CarloWood> Next you're going to tell me that  new char[1000]  also initializes it with zeroes
[23:27:06] <traxex> you're welcome to use malloc if that's an issue
[23:28:15] <CarloWood> I am all alone on New Years eve and decided I'd possibly start to feel self pity at 23:00. So I bought some nice snacks and try to still have them when it becomes 23:00... Now my whole evening is filled with frustration that I have some nice snacks in the fridge that I am not allowed to eat.</offtopic>
[23:28:42] <CarloWood> I am more frustrated though about the file-reading ;).
[23:28:56] <CarloWood> It's 21:00 here now. How about you guys?
[23:29:32] <kalven> noon
[23:29:57] <Alipha> CarloWood: `new char[1000]{}` initializes to zeros. `new char[1000]` does not
[23:30:09] <CarloWood> Good
[23:30:20] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 252 seconds)
[23:30:21] <Alipha> CarloWood: and yes, std::vector initializes to zeros
[23:30:41] <Alipha> they really need a `std::vector<char> v(1000, std::uninitialized);` or something
[23:31:26] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[23:31:34] <Alipha> (have it only be enabled for std::is_trivially_constructible types?)
[23:32:52] <xkoncek> does it make more sense for streams to operate on char as opposed to unsigned char?
[23:33:02] <Alipha> traxex: https://wandbox.org/permlink/sUybeqsRh85kPEWK
[23:33:19] <xkoncek> the whole byte situation is confusing in c++ anyway
[23:33:45] <xkoncek> i have been working with libs like vorbis / png and each does it differently
[23:34:04] *** Quits: magla (~gelignite@55d465a4.access.ecotel.net) (Quit: Stay safe!)
[23:34:47] <Alipha> xkoncek: but they added std::byte to solve all these problems!
[23:34:49] <Alipha> ... https://xkcd.com/927/
[23:35:06] *** Joins: Terminus (~null@user/terminus)
[23:37:23] <traxex> is using operator>> a requirement for this exercise?
[23:39:17] <xkoncek> operator>> does formatting, read only reads bytes
[23:40:19] <CarloWood> My idea wrt using operator>> was that it is internally "optimal". I am not really convinced about that now however.
[23:40:35] <CarloWood> That is, optimal when writing to a streambuf.
[23:40:41] <traxex> you can use istream.read() to read directly to an std::string
[23:41:56] <traxex> or to a malloc'd buffer, if zero-initialization was undesirable overhead
[23:46:03] <cbreak> traxex: no point using malloc for that
[23:46:25] <cbreak> use std::string instead, and std::getline, much safer and easier to use
[23:46:49] <traxex> ok
[23:48:47] <CarloWood> cbreak: the idea of malloc() was to get memory without having to initialize it. std::string fills the allocated memory with something first.
[23:49:20] <CarloWood> (assuming you insist on reserving the memory too first, to avoid multiple allocations)
[23:49:33] <cbreak> CarloWood: why would you initialize the string?
[23:50:16] <CarloWood> You mean, just std::string::reserve ?
[23:50:22] <cbreak> std::string str; std::getline(cin, str, '\n');
[23:50:34] <CarloWood> That would do multiple allocations thus.
[23:50:50] <cbreak> no
[23:50:56] <cbreak> why would it?
[23:51:11] <CarloWood> Some evil person has hooked your libc to a bomb. You can call malloc once, the second call your PC explodes...
[23:51:30] <traxex> how does getline work internally?
[23:51:41] <CarloWood> why would it? If you read 10 kB then I am sure it will.
[23:51:53] <CarloWood> That isn't even binary.
[23:52:22] <cbreak> it for sure is not analog
[23:57:27] <rpav> if binary is efficient, and that's base-2, just think how efficient base-0.00000001 would be!@#
[23:57:29] <CarloWood> https://wandbox.org/permlink/uL6vaEtXdiIGjnC5
[23:58:04] <CarloWood> That might be the best solution - but all I can see (using strace) is that it calls
[23:58:06] <CarloWood> read(3, "#include \"sys.h\"\n#include \"Comma"..., 8191) = 8191
[23:58:06] <CarloWood> read(3, "  queue_requests[qri_h].max_numb"..., 8191) = 8191
[23:58:17] <CarloWood> a few times. Reading 8191 bytes at a time.
[23:58:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:492a:4f1b:6342:37fe) (Quit: Quit)
[23:58:24] <CarloWood> I'd like to see a LOT more :/
[23:59:03] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[23:59:05] <CarloWood> Ie, all memory allocations ;) .. but certainly also, all memory copies (if any).
