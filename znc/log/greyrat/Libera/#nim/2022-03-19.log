[00:01:41] <FromDiscord> <Generic> In reply to @Eshoe "I'm so confused. Trying": the issue is `arr: array[`len`, int])`
[00:01:52] <FromDiscord> <Generic> (edit) "In reply to @Eshoe "I'm so confused. Trying": the issue is `arr: array[`len`, int])`" => "sent a code paste, see https://play.nim-lang.org/#ix=3SMP"
[00:02:03] <FromDiscord> <Generic> if you just want to zero initialise the array, leave it away entirely
[00:02:45] <FromDiscord> <Generic> otherwise use an array initialiser, i.e. [as, many, values, as, the, array, is, long]
[00:03:46] <FromDiscord> <Generic> In reply to @Bubblie "Since pointers are technically": yes, though they can be wrapped in objects with destructors so they can be used like smart pointers in C++
[00:05:14] <FromDiscord> <Generic> In reply to @Eshoe "I'm so confused. Trying": also unless you plan on doing some other things in that macro, using a macro for that is a bit of an overkill
[00:08:54] <FromDiscord> <auxym> In reply to @Bubblie "Since pointers are technically": this might be relevant: https://forum.nim-lang.org/t/9006
[00:15:40] <FromDiscord> <Eshoe> sent a code paste, see https://play.nim-lang.org/#ix=3SMU
[00:26:17] <FromDiscord> <Bubblie> In reply to @auxym "this might be relevant:": thanks!
[00:26:42] <FromDiscord> <Bubblie> I am dealing with something that requires pointers so using nim pointers would help
[00:27:15] <FromDiscord> <Bubblie> or in this case
[00:27:38] <FromDiscord> <Bubblie> wrapped in objects
[00:28:42] <FromDiscord> <Bubblie> can nim be used with rust?
[00:28:59] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Read error: Connection reset by peer)
[00:29:10] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[00:33:07] *** Joins: pch (~pch@66.49.131.33)
[00:37:42] <FromDiscord> <Bubblie> https://github.com/yglukhov/jnim
[00:37:49] <FromDiscord> <Bubblie> this is awesome
[00:37:56] <FromDiscord> <Bubblie> java and nim üëÄ
[00:40:16] *** Joins: kenran (~kenran@200116b82baf00008565b4314491a38d.dip.versatel-1u1.de)
[00:45:46] <FromDiscord> <Daan Breur> Java üëÄ
[00:46:40] <FromDiscord> <Generic> Java üò±
[00:52:44] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (Quit: -)
[00:52:56] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[01:01:57] <FromDiscord> <Bubblie> Java is the main language I use so
[01:02:04] <FromDiscord> <Bubblie> this offers some possibilities üòà
[01:12:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:12:18] <FromDiscord> <treeform> In reply to @Bubblie "Java is the main": My condolences
[01:14:35] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:16:17] <FromDiscord> <m4ul3r> Does nim's base64 module only support utf8?
[01:17:00] <FromDiscord> <Bubblie> In reply to @treeform "My condolences": LMAO
[01:18:49] <FromDiscord> <Bubblie> is nim and rust a thing?
[01:18:54] <FromDiscord> <Bubblie> Can I use rust and nim together somehow
[01:20:58] <FromDiscord> <TennisBowling> sent a code paste, see https://play.nim-lang.org/#ix=3SNc
[01:22:40] <FromDiscord> <Elegantbeef> @TennisBowling\: you're using `await` in a non async proc
[01:22:50] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3SNd should work
[01:23:09] <FromDiscord> <TennisBowling> i-‚Üµ‚Üµthank you
[01:24:08] <FromDiscord> <Elegantbeef> Really someone needs to PR to the async macro to ensure it's in a procedure that can await
[01:25:16] <FromDiscord> <Elegantbeef> That error occurs so much
[01:26:47] <FromDiscord> <TennisBowling> it should give a clearer message - although a stupid error on my part
[01:27:01] <FromDiscord> <Elegantbeef> Yes like i said
[01:28:03] <FromDiscord> <TennisBowling> sent a code paste, see https://paste.rs/Pru
[01:28:16] <FromDiscord> <TennisBowling> oh
[01:28:19] <FromDiscord> <TennisBowling> is r.body none then
[01:32:29] <FromDiscord> <Elegantbeef> Guess today is my "attempt to add a good error message to the `await` macro day"
[01:46:01] <FromDiscord> <DeltaPHC> In reply to @Bubblie "Can I use rust": Maybe if you go through the C ABI, which is generally how most languages interoperate these days
[01:46:23] <FromDiscord> <Bubblie> C ABI üò≠
[01:46:39] <FromDiscord> <Elegantbeef> Why would you even use both
[01:46:57] <FromDiscord> <Bubblie> idk it would be cool to interop both though
[01:47:07] <FromDiscord> <DeltaPHC> Alternatively: poke around with wasm
[01:47:09] <FromDiscord> <Elegantbeef> There is a project for it though
[01:47:33] <FromDiscord> <Bubblie> Sometimes coding doesn't need to have a purpose, it can just be cursed
[01:47:44] <FromDiscord> <Elegantbeef> https://github.com/arnetheduck/nbindgen
[01:47:45] <FromDiscord> <Bubblie> In reply to @DeltaPHC "Alternatively: poke around with": üëÄ
[01:47:55] <FromDiscord> <Bubblie> In reply to @Elegantbeef "https://github.com/arnetheduck/nbindgen": üëÅÔ∏èüëÅÔ∏è
[01:48:02] <FromDiscord> <Bubblie> I will take a look at this
[01:48:08] <FromDiscord> <Bubblie> 62 stars
[01:48:09] <FromDiscord> <Bubblie> woah
[01:48:15] <FromDiscord> <Bubblie> oh wait
[01:48:19] <FromDiscord> <Bubblie> 61 contributers
[01:48:33] <FromDiscord> <Bubblie> now 63 stars
[01:49:13] <FromDiscord> <DeltaPHC> Still goes through the C ABI. It just automates some of it for you
[01:50:16] <FromDiscord> <Bubblie> thats still great
[01:52:58] <FromDiscord> <Bubblie> also why do anti viruses hate nim exactly
[01:53:52] <FromDiscord> <Elegantbeef> Viruses are written in Nim is what some people think
[01:53:58] <FromDiscord> <Elegantbeef> So they found a pattern and it's the nim code üòú
[01:56:16] <FromDiscord> <Bubblie> damn
[01:56:28] <FromDiscord> <Bubblie> I mean, arent viruses commonly made in C and C++ to though
[01:56:33] <FromDiscord> <Bubblie> (edit) "to" => "too"
[01:56:59] <FromDiscord> <Bubblie> people really using the nim lang for evil ig
[01:57:24] <FromDiscord> <Elegantbeef> Well Nim is a high level language that's nice to write and creates small self contained binaries
[01:57:54] <FromDiscord> <Bubblie> yeah makes total sense
[01:57:56] <FromDiscord> <Bubblie> but damn
[02:09:59] <FromDiscord> <Phil> Ah, we on the topic of how Antiviruses are somewhat bs sometimes?
[02:11:41] <FromDiscord> <Phil> sent a long message, see http://ix.io/3SNr
[02:12:33] *** Quits: kenran (~kenran@200116b82baf00008565b4314491a38d.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[02:13:03] <FromDiscord> <Phil> I'm semi certain that the details are a bit more complicated than I laid them out here but afaik the gist is correct
[02:13:59] <FromDiscord> <Phil> In reply to @Bubblie "Java is the main": Oh hey, a fellow java drinker
[02:15:27] <FromDiscord> <Bubblie> In reply to @Isofruit "Think of it more": yeah
[02:15:35] <FromDiscord> <Bubblie> but it is definitely saddening to have nim's name tarnished like this
[02:15:46] <FromDiscord> <Bubblie> I was talking about nim in a server today
[02:15:55] <FromDiscord> <Bubblie> and one of the first things brought up about it is the anti viruses made for it
[02:16:06] <FromDiscord> <Bubblie> (edit) 04removed "anti" | "for it" => "with ti"
[02:16:09] <FromDiscord> <Bubblie> (edit) "ti" => "it"
[02:16:21] <FromDiscord> <Bubblie> In reply to @Isofruit "Oh hey, a fellow": YOOO you develop in java as well? Lets go
[02:17:05] <FromDiscord> <Phil> Webdev, Spring, Elasticsearch, Mysql, mongo etc.
[02:18:02] <FromDiscord> <Bubblie> I use java for backend dev, and for minecraft mods
[02:18:10] <FromDiscord> <Bubblie> Also for like
[02:18:22] <FromDiscord> <Bubblie> software dev too but
[02:18:33] <FromDiscord> <Bubblie> for game dev I kind of felt as if I shouldn't use it as much
[02:18:36] <FromDiscord> <Bubblie> especially with graphics
[02:18:48] <FromDiscord> <Bubblie> lwjgl can be a real pain
[02:18:54] <FromDiscord> <Phil> I think the java GC makes consistent framerates near impossible
[02:18:58] <FromDiscord> <Bubblie> fr
[02:19:00] <FromDiscord> <Bubblie> it does
[02:19:16] <FromDiscord> <Bubblie> don't get me wrong java has never failed me with software development and servers and such
[02:19:17] <FromDiscord> <Bubblie> but
[02:19:22] <FromDiscord> <Bubblie> graphics? uh
[02:19:26] <FromDiscord> <Bubblie> not the BEST per say
[02:19:28] <FromDiscord> <Bubblie> its doable
[02:19:29] <FromDiscord> <Bubblie> but
[02:19:36] <FromDiscord> <Phil> Not great, yeah
[02:19:39] <FromDiscord> <Phil> I dabbled in swing once
[02:19:39] <FromDiscord> <Bubblie> yeah
[02:19:41] <FromDiscord> <Phil> I ran screaming
[02:19:43] <FromDiscord> <Bubblie> oh no swing
[02:19:45] <FromDiscord> <Bubblie> Im so sorry
[02:20:32] <FromDiscord> <Phil> Since then I've learned the joys of just using browser-tech for GUIs and the backend just as a REST API
[02:21:27] <FromDiscord> <Phil> As apparently  the gnome desktop also uses JS for a lot of stuff I'm starting to feel tempted to find a gnome-project though
[02:21:35] <FromDiscord> <creikey> sent a code paste, see https://play.nim-lang.org/#ix=3SNt
[02:21:53] <FromDiscord> <creikey> sent a code paste, see https://play.nim-lang.org/#ix=3SNu
[02:21:58] <FromDiscord> <Bubblie> In reply to @Isofruit "As apparently  the": I didnt know gnome used js a lot
[02:22:07] <FromDiscord> <Elegantbeef> dont convert to GVec2
[02:22:35] <FromDiscord> <Phil> In reply to @Bubblie "I didnt know gnome": Me neither, I was very surprised to find JS and CSS files in gnome extension folders. You can google GJS, it's essentially a node-like thingy with a lot of bindings to gnome libs
[02:22:50] <FromDiscord> <creikey> In reply to @Elegantbeef "dont convert to GVec2": without it there's still an error
[02:23:13] <FromDiscord> <creikey> sent a code paste, see https://play.nim-lang.org/#ix=3SNv
[02:23:22] <FromDiscord> <Elegantbeef> vec2 is float32
[02:23:26] <FromDiscord> <creikey> ahhhh
[02:23:39] <FromDiscord> <Elegantbeef> do `rotate(120.0f...`
[02:23:50] <FromDiscord> <creikey> float64 to float32 converter?
[02:24:01] <FromDiscord> <creikey> the worst idea of all time
[02:24:11] <FromDiscord> <Elegantbeef> That wouldnt solve it
[02:24:18] <FromDiscord> <Elegantbeef> The issue is the `mat3` is a float64
[02:24:27] <FromDiscord> <creikey> In reply to @Elegantbeef "The issue is the": mat3 float 64 to mat3 float 32 converter
[02:24:35] <FromDiscord> <Elegantbeef> There you go üòõ
[02:24:43] <FromDiscord> <Elegantbeef> Or you know just write `d` instead of `.0`
[02:24:46] <FromDiscord> <Elegantbeef> or `f`
[02:25:45] *** Joins: lumo_e (~enrico@151.29.53.201)
[02:28:44] <FromDiscord> <TennisBowling> In reply to @TennisBowling "wait this throws this": bump
[02:29:11] <FromDiscord> <Elegantbeef> I dont use async so cannot say much
[02:30:09] <FromDiscord> <huantian> In reply to @Elegantbeef "Guess today is my": oh yeah I remember trying this and then forgetting about it!‚Üµthat was fun
[02:30:24] <FromDiscord> <Elegantbeef> Doesnt seem to hard so why didnt you finish it?!
[02:30:33] <FromDiscord> <huantian> uhhh I forgot about it
[02:30:44] <FromDiscord> <Elegantbeef> Well get at it
[02:31:58] *** Quits: pro (~pro@user/pro) (Quit: pro)
[02:37:09] <FromDiscord> <huantian> oh yeah I do remember something about mulitsync errors but I guess that's an issue with mulitsync and not await
[02:40:50] *** Quits: Lord_Nightmare (znc@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[02:43:34] *** Joins: Lord_Nightmare (znc@user/lord-nightmare/x-3657113)
[02:50:13] <FromDiscord> <Equinox> Hey does anyone know what the naming conventions in nim are?
[02:50:42] <FromDiscord> <Elegantbeef> lower camel case procedures, pascal cased types
[02:52:36] <FromDiscord> <Equinox> In reply to @Elegantbeef "lower camel case procedures,": Thank you
[02:52:54] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/nep1.html for all your conventional needs
[02:53:16] <FromDiscord> <Elegantbeef> Nim has style insensitivity so aslong as you start procedures with lower case and types with uppercase you'll be fine in my books
[02:55:35] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:55:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[02:56:46] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[02:57:06] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:04:43] <FromDiscord> <luteva> The nim tutorial says that "Usually types with inheritance are also marked as ref types even though this isn't strictly enforced."‚ÜµSo why is it usual to use a ref type? Why shouldn't you use a value type in inheritance? What is the disadvantage of using a value type in inheritamce?
[03:05:24] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[03:07:44] <FromDiscord> <Elegantbeef> A value type loses information on conversion
[03:07:59] <FromDiscord> <Elegantbeef> So unless you're ok with that it's highly suggested to use `ref`
[03:09:58] <FromDiscord> <luteva> do you have any example?‚Üµwhich information is lost on conversion? You mean the runtime type information?
[03:10:12] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/z1x
[03:10:35] <FromDiscord> <Elegantbeef> In the above case since `A` is a value type, `c` is lost on conversion to `A`
[03:10:54] <FromDiscord> <Elegantbeef> And you cannot convert from `A` to `B` since value type conversion chops fields off
[03:11:20] <FromDiscord> <luteva> ahhh ok! thanks!
[03:11:24] <FromDiscord> <Elegantbeef> This all comes from the fact non refs are stack variables and as such you cannot fit `C` in place of `A`
[03:12:17] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:20:37] <FromDiscord> <Elegantbeef> @huantian\: what was your solution?
[03:20:50] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3SND mine is this mess
[03:40:10] <FromDiscord> <huantian> Mine was much simpler lol, just checked that the owner of the symbol was an iterator of the correct return type
[03:40:48] <FromDiscord> <Elegantbeef> That doesnt work inside blocks or similar
[03:41:19] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/WGq
[03:42:30] <FromDiscord> <huantian> Ah true, so you have to travel up the owners to find a proc or iterator
[03:42:38] <FromDiscord> <Elegantbeef> Yep
[03:50:05] <FromDiscord> <huantian> too bad compiles doesn't work with yield
[03:50:22] <FromDiscord> <Elegantbeef> I mean it doesnt help anyway
[03:50:36] <FromDiscord> <Elegantbeef> `"Invalid usuage of await"` or w/e you'd give isnt helpful
[03:51:28] <FromDiscord> <huantian> I mean all the error messages boil down to "can only use await in async proc"
[03:51:41] <FromDiscord> <Elegantbeef> Sure but you can be more helpful
[03:52:12] <FromDiscord> <Elegantbeef> I dont know, my view is that when you can provide a more accurate error you should
[03:52:48] <FromDiscord> <Elegantbeef> Like yes technically "You can only use await in an async proc" is accurate, but we can always just point to the exact issue
[03:52:51] <FromDiscord> <Elegantbeef> I dont know i might be an idiot
[03:56:04] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3SNS though it's not too hard to change it
[04:02:57] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[04:06:44] <FromDiscord> <huantian> Maybe combine both messages? idk
[04:06:52] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[04:07:21] <FromDiscord> <Elegantbeef> What?
[04:07:40] <FromDiscord> <huantian> like uh "Await can only be used in async, not macro/top-level"
[04:08:06] *** Quits: ltriant_ (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[04:10:02] <FromDiscord> <TennisBowling> sent a code paste, see https://play.nim-lang.org/#ix=3SNW
[04:10:13] <FromDiscord> <Elegantbeef> `if r.code == HttpCode200`
[04:10:22] <FromDiscord> <TennisBowling> oh
[04:10:24] <FromDiscord> <TennisBowling> thank you!
[04:10:32] <FromDiscord> <Elegantbeef> `if r.code in HttpCode200..HttpCode299`
[04:11:02] <FromDiscord> <huantian> In reply to @Elegantbeef "https://play.nim-lang.org/#ix=3SNS though it's not": shouldn't it loop until it sees a nskMacro or nskIterator as well?
[04:11:19] <FromDiscord> <Elegantbeef> Cant async inside a macro
[04:11:40] <FromDiscord> <huantian> yeah so if it gets to a macro before an iterator, then it should error right
[04:12:09] <FromDiscord> <Elegantbeef> \TIL macros can be declared not at toplevel
[04:12:21] <FromDiscord> <TennisBowling> wait but then
[04:12:42] <FromDiscord> <TennisBowling> sent a code paste, see https://play.nim-lang.org/#ix=3SNY
[04:13:00] <FromDiscord> <huantian> is self a `var` type?
[04:13:09] <FromDiscord> <TennisBowling> no it's an object
[04:13:14] <FromDiscord> <Elegantbeef> `let r`
[04:13:14] <FromDiscord> <Elegantbeef> Also why would you change the status
[04:13:24] <FromDiscord> <TennisBowling> sent a code paste, see https://play.nim-lang.org/#ix=3SNZ
[04:13:31] <FromDiscord> <Elegantbeef> Should be `var r`
[04:13:32] <FromDiscord> <TennisBowling> In reply to @Elegantbeef "Also why would you": it to store if the node is alive or not
[04:13:49] <FromDiscord> <huantian> In reply to @Elegantbeef "Should be `var r`": nono self is a separate object from r
[04:13:54] <FromDiscord> <TennisBowling> yeah
[04:14:14] <FromDiscord> <Elegantbeef> Either way it's a mutabillity issue
[04:14:14] <FromDiscord> <Elegantbeef> pass in `self` as `var NodeInstance`
[04:14:34] <FromDiscord> <Elegantbeef> I'm probably in the minority, but i destest `self`
[04:14:47] <FromDiscord> <TennisBowling> cool that worked
[04:14:52] <FromDiscord> <TennisBowling> then what do you use?
[04:14:53] <FromDiscord> <TennisBowling> this?
[04:15:01] <FromDiscord> <Elegantbeef> `nodeInstance`
[04:15:04] <FromDiscord> <Elegantbeef> `node`
[04:15:12] <FromDiscord> <Elegantbeef> Anything that's not pretending Nim is OOP üòõ
[04:15:56] <FromDiscord> <TennisBowling> I come from oop languages so just a habit
[04:17:57] <FromDiscord> <Elegantbeef> Yea you can use whatever you want, i'm just an odd person
[04:26:20] <pch> https://media.discordapp.net/attachments/362945838366064651/954543462483623946/fuckoffcompiler.png nim 1.6 packaged in debian (haha stable btw)
[04:27:16] <FromDiscord> <Elegantbeef> What's the code?
[04:27:37] <pch> scattered across 4 files thanks
[04:28:24] <pch> it's hitting error trying to match MultiElementBuffer[0] (an array type) to MultiElementBuffer (the same array type but without its size specified)
[04:29:19] <pch> https://media.discordapp.net/attachments/362945838366064651/954544539367006228/fuckoffcompiler2.png
[04:29:46] <FromDiscord> <TennisBowling> how do I do a return type of something that could be two things
[04:29:52] <FromDiscord> <TennisBowling> thing1 | thing2
[04:29:54] <FromDiscord> <TennisBowling> ?
[04:30:07] <FromDiscord> <Elegantbeef> Is it two seperate things at runtime or compile time?
[04:30:16] <FromDiscord> <Elegantbeef> If it's at runtime you need to use an object variant
[04:31:17] <FromDiscord> <Elegantbeef> is `intris` the same type as the `attemlems` specialized type?
[04:32:53] <pch> yes, they're element types for storing reference to array positions
[04:33:25] <pch> it's not two separate things, the code does detect the length of the given MultiElementBuffer though
[04:33:37] <FromDiscord> <Elegantbeef> That might be the issue
[04:34:16] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SO5
[04:34:35] <FromDiscord> <Elegantbeef> put `distinct MultiElementBuffer`
[04:34:46] <FromDiscord> <huantian> https://play.nim-lang.org/#ix=3SO6‚Üµdoes something like this work? just shuffled it around a bit
[04:36:18] <pch> there's no derivative type based on the multielementbuffer
[04:36:25] <FromDiscord> <Elegantbeef> Do not know, dont really like the solution since though
[04:36:33] <FromDiscord> <Elegantbeef> What do you mean PCH?
[04:36:49] <pch> im just using multielementbuffer directly
[04:36:55] <pch> lemme screenshot the erroring code next
[04:36:58] <FromDiscord> <Elegantbeef> You said the specialized type of the attemlems is not the same as the first
[04:37:07] <pch> no they're the exact same type
[04:38:15] <pch> ive defined "testNorms" with the line `var testNorms: MultiElementBuffer[0]` specifically so that the code skips the normal interpolation
[04:38:39] <pch> I put it into the function I've taken a screenshot of, and receive the error I entered with
[04:38:55] <pch> in the postion of "normelem"
[04:39:31] <FromDiscord> <Elegantbeef> If all of the `MultiElementBuffer`s are the same type the issue i thought it was wasnt it
[04:40:42] <FromDiscord> <Elegantbeef> you may need to do `[T: static int]` ... `MultiElementBuffer[T]`
[04:41:00] <pch> MultiElementBuffer is defined as
[04:41:26] <pch> `MultiElementBuffer*[size: static int] = array[size, TrianglePointer]
[04:41:29] <pch> er
[04:41:32] <pch> `MultiElementBuffer*[size: static int] = array[size, TrianglePointer]`
[04:41:43] <FromDiscord> <Elegantbeef> Yes i dont care about that
[04:41:47] <FromDiscord> <Elegantbeef> The issue is the call site
[04:41:54] <FromDiscord> <Elegantbeef> What's the call site look liike
[04:43:23] <pch> `drawReadyElements(testTriElem, testTriTrans, depthbuf, defaultPSveccol, interiorcolbuf, os, testNorms, trestTriBuf, @[testTriElem], testTriCol)`
[04:43:42] <pch> lots of reuse because of mandatory fields I haven't worked on making non-mandatory yet
[04:43:59] <pch> just have detections to see if the field is representing an empty variable
[04:44:10] <FromDiscord> <Elegantbeef> what's `testTriElem` declared as?
[04:44:18] <pch> MultiElementBuffer
[04:44:36] <FromDiscord> <Elegantbeef> The entire type
[04:45:12] <pch> `var testTriElem: MultiElementBuffer[1] = [vec3(0.uint32,1,2)]`
[04:45:24] <FromDiscord> <Elegantbeef> There is your fucking issue!
[04:45:25] <FromDiscord> <Elegantbeef> Like i said
[04:45:43] <FromDiscord> <Elegantbeef> Put distinct before anything that isnt supposed to match the first `MultiElementBuffer`
[04:45:45] <FromDiscord> <huantian> In reply to @huantian "https://play.nim-lang.org/#ix=3SO6 does something l": wups it has to be "Future" not "FutureBase"
[04:45:51] <FromDiscord> <huantian> (edit) "In reply to @huantian "https://play.nim-lang.org/#ix=3SO6 does something l": wups it has to be ... "Future"" 03added ""FutureBase" not" | 04removed "not "FutureBase""
[04:46:01] <FromDiscord> <Elegantbeef> Nim's composite type classes bind to the first type they're provided
[04:46:08] <FromDiscord> <Elegantbeef> You need to put distinct before it to resolve that mismatch
[04:46:15] <pch> well that's an issue
[04:46:45] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SO9
[04:47:17] <FromDiscord> <huantian> huh I didn't even know you could have plain `seq` as a param type
[04:47:24] <FromDiscord> <Elegantbeef> Composite typeclass
[04:47:27] <FromDiscord> <Elegantbeef> It applies to all generics
[04:49:27] <pch> https://cdn.discordapp.com/attachments/362945838366064651/954549605318672515/AAAA.png
[04:50:04] <FromDiscord> <Elegantbeef> Past the procedure definition please
[04:50:11] <FromDiscord> <Elegantbeef> So i can edit it to what it needs to be
[04:50:57] <NimEventer> New question by Big Man: Nim stack overflow in recursive loop, see https://stackoverflow.com/questions/71534666/nim-stack-overflow-in-recursive-loop
[04:51:19] <pch> `proc drawReadyElements* (intris: MultiElementBuffer, tribuf: V3Buffer, dbuf: var ScalarBuffer2D, shad: PShadingCallback, outbound: var ColourInnerBufferINTE, outsize: BufRESprefloat, normelem: distinct MultiElementBuffer, normatt: distinct V3Buffer, attelems: seq[MultiElementBuffer], attachments: varargs[array])`
[04:54:25] <FromDiscord> <Elegantbeef> So many typeclasses this is a fun bug
[04:55:12] <FromDiscord> <Elegantbeef> `proc drawReadyElements[T,Y: static int](intris: MultiElementBuffer[T], tribuf: V3Buffer, dbuf: var ScalarBuffer2D, shad: PShadingCallback, outbound: var ColourInnerBufferINTE, outsize: BufRESprefloat, normelem: MultiElementBuffer[Y], normatt: distinct V3Buffer, attelems: seq[MultiElementBuffer[T]], attachments: varargs[array])`‚Üµmight work
[04:55:53] <pch> they both house the same type though?
[04:56:01] <FromDiscord> <Elegantbeef> Yes it's a workaround, but it's a very very large generic param list so hard to reason though
[04:56:05] <FromDiscord> <Elegantbeef> What do you mean?
[04:56:43] <pch> intris, normelem, and attelems' members all house the exact same type
[04:56:55] <FromDiscord> <Elegantbeef> Not at your call site
[04:57:12] <FromDiscord> <Elegantbeef> `var testTriElem: MultiElementBuffer[1] = [vec3(0.uint32,1,2)]` is the first arg
[04:57:41] <pch> yes, the type held within a MultiElementBuffer never changes
[04:57:54] <pch> it's always a TrianglePointer, which is always a Vec3[uint32]
[04:58:11] <FromDiscord> <Elegantbeef> Your passing a `MutliElementBuffer[0]`  to `normelem`
[04:58:19] <FromDiscord> <Elegantbeef> If they're supposed to be the same type, pass the same type
[04:58:30] <FromDiscord> <Elegantbeef> Is there anyway i can see the entire code?
[04:58:36] <pch> they're the same type though but of different sizes?
[04:58:45] <FromDiscord> <Elegantbeef> Yes
[04:58:48] <pch> I haven't put it up on VCS yet
[04:58:58] <pch> trying to make sure it renders out first before I do
[04:59:15] <FromDiscord> <Elegantbeef> Nim's static types are distinct
[04:59:19] <FromDiscord> <Elegantbeef> `array[0, uint32] is not array[1, uint32]`
[04:59:24] <pch> ah
[04:59:31] <pch> immediately see the issue then
[04:59:32] <FromDiscord> <Elegantbeef> rather `array[0, uint32] isnot array[1, uint32]`
[04:59:48] <FromDiscord> <Elegantbeef> This is where the `distinct` goes
[05:00:25] <pch> alright, I'll use a slight variation of your fix then
[05:00:28] <pch> thanks
[05:00:48] <FromDiscord> <huantian> do macros have default return values?
[05:01:05] <FromDiscord> <Elegantbeef> `nnkNilLit` or `nnkEmpty` dont recall
[05:01:43] <FromDiscord> <huantian> kk
[05:02:18] <FromDiscord> <Elegantbeef> Are you still working on the async stuff?
[05:02:42] <FromDiscord> <huantian> yeah
[05:03:07] <FromDiscord> <huantian> was going to see if there could be a better error message for improper multisync
[05:03:57] <FromDiscord> <huantian> and perhaps more testing would be good
[05:04:22] <FromDiscord> <huantian> /adding test case
[05:17:57] <FromDiscord> <huantian> this is what I have rn <https://play.nim-lang.org/#ix=3SOd>
[05:18:59] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[05:19:02] <FromDiscord> <Elegantbeef> Seems good
[05:44:21] *** Quits: lumo_e (~enrico@151.29.53.201) (Ping timeout: 252 seconds)
[05:49:24] <FromDiscord> <huantian> sent a code paste, see https://paste.rs/SHj
[05:50:26] <FromDiscord> <Elegantbeef> I'd add tests anywhere there might be an issue
[05:50:40] <FromDiscord> <Elegantbeef> It's better to test for behaviour that might fail than assume you have coverage
[05:52:20] <FromDiscord> <huantian> is there a way to get testament check for multiple errors in the same file?
[05:53:49] <FromDiscord> <huantian> or should I just split it into multiple files
[05:53:50] <FromDiscord> <Elegantbeef> `nim check`
[05:55:15] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/devel/tests/generics/tstatic_constrained.nim an example
[05:56:05] <FromDiscord> <huantian> hm ok
[06:14:07] <FromDiscord> <TennisBowling> sent a code paste, see https://play.nim-lang.org/#ix=3SOs
[06:14:58] <FromDiscord> <huantian> you probably want std/option
[06:15:06] <FromDiscord> <TennisBowling> what do you mean?
[06:15:11] <FromDiscord> <huantian> void is special and can't be used like that
[06:15:23] <FromDiscord> <Elegantbeef> Nim's typeclasses  are for generics instantiation not runtime unions
[06:16:25] <FromDiscord> <Elegantbeef> `void | NodeInstance` means "This procedure can be instantiated in such a way it can return `void`, but also can be instantitated so it can return `NodeInstance`"
[06:16:43] <FromDiscord> <Elegantbeef> It does not mean "It can return `void` or `NodeInstance` dynamically at runtime
[06:17:51] <FromDiscord> <Elegantbeef> For instance
[06:17:54] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SOt
[06:18:57] <FromDiscord> <Elegantbeef> Though Araq generally says "Typeclasses are only for parameters, not for return values, use `auto`"
[06:19:54] <FromDiscord> <Elegantbeef> Hopefully that makes sense
[06:22:51] <FromDiscord> <Elegantbeef> The way to do dynamic values is https://nim-lang.org/docs/manual.html#types-object-variants or with libraries like https://github.com/alaviss/union
[06:30:22] <pch> hmm, can't seem to access sdl Surface.pixels property
[06:30:42] <pch> trying to cast it to an uncheckedarray (which is what it is) results in a compile-time error about non-concrete types
[06:31:12] <pch> trying to use it directly doesn't work since it's just defined as a `pointer` type
[06:31:17] <FromDiscord> <Bubblie> I got the nim plugin for Clion
[06:31:18] <FromDiscord> <Bubblie> however
[06:31:25] <FromDiscord> <Bubblie> its having issues with the nim.exe?
[06:31:48] <FromDiscord> <Bubblie> its asking for the nim.exe
[06:31:57] <FromDiscord> <Bubblie> but thats already in bin
[06:33:22] <FromDiscord> <Elegantbeef> pch `cast[ptr UncheckedArray[YourType]](surface.pixels)`
[06:33:34] <pch> i
[06:33:35] <pch> thanks
[06:34:16] <FromDiscord> <Elegantbeef> Dont know what to say bubblie, jetbrains addon isnt the greatest since they're writing from the ground up, but then again Nim tooling isnt that great üòõ
[06:34:26] <FromDiscord> <Bubblie> oh
[06:34:47] <FromDiscord> <Bubblie> what do you use for nim development?
[06:34:50] <FromDiscord> <Bubblie> vscode?
[06:34:58] <FromDiscord> <Elegantbeef> I've been using Kate recently, but I generally use vscode
[06:35:06] <FromDiscord> <Bubblie> üëÄ never heard of kate
[06:36:20] <FromDiscord> <Elegantbeef> Eh it's just an OSS text editor that now has LSP support
[06:36:40] <FromDiscord> <Elegantbeef> Slight issue presently in that it doesnt show errors, which i need to investigate
[06:37:13] <FromDiscord> <Bubblie> now it is saying there is no nim binary?
[06:37:14] <FromDiscord> <Bubblie> weird
[06:37:35] <FromDiscord> <Elegantbeef> Is your path getting throttled by something?
[06:37:46] <FromDiscord> <Bubblie> not sure
[06:37:57] <FromDiscord> <Bubblie> the nim path should be in the path of User Variables right
[06:38:01] <FromDiscord> <Bubblie> or should it be in environmental as well
[06:38:18] <nrds> <06Prestige99> Elegantbeef have you had issues with false errors being reported? I've brought it up before but, haven't heard anyone else talking about it
[06:38:23] <FromDiscord> <Elegantbeef> Not a windows user it should be in your `PATH` variable
[06:38:25] <FromDiscord> <Elegantbeef> Whatever the equivlent is for windows
[06:38:38] <FromDiscord> <Elegantbeef> I've seen it a few times, but havent had it in a while
[06:38:40] <termer> path is in win
[06:38:53] <FromDiscord> <Bubblie> there is path in user and in environmental
[06:38:59] <FromDiscord> <Elegantbeef> Generally it seems like it's the project causing the bug
[06:38:59] <termer> there's a local path and global path if I remember correctly but it's the same concept as in linux
[06:39:01] <FromDiscord> <Bubblie> nim auto added it to user
[06:39:02] <FromDiscord> <Elegantbeef> Oh hey termer
[06:39:04] <termer> hey dude
[06:39:06] *** Quits: om3ga (~oz@46.49.41.80) (Ping timeout: 250 seconds)
[06:39:17] <FromDiscord> <Elegantbeef> Time to destroy your project üòõ
[06:39:20] <termer> uh oph
[06:39:25] <termer> what did you find
[06:39:31] *** Joins: ozzz (~oz@46.49.41.80)
[06:39:39] <FromDiscord> <Elegantbeef> A few things to clean it up
[06:40:21] <nrds> <06Prestige99> Elegantbeef https://github.com/nim-lang/Nim/issues/19371 zero replies so uh, maybe I put the error in the wrong repo
[06:40:35] <nrds> <06Prestige99> It's quite annoying maybe I should make a forum post
[06:40:40] <FromDiscord> <Elegantbeef> I'll look at it a minute
[06:41:53] <FromDiscord> <Bubblie> ok yeah
[06:42:00] <FromDiscord> <Elegantbeef> https://github.com/termermc/argon2-highlevel/blob/master/argon2_highlevel/async.nim#L99-L100 `except Exception as e: job.fail(e, e.msg)`
[06:42:08] <FromDiscord> <Bubblie> nim is being added to the user variable
[06:42:13] <FromDiscord> <Bubblie> but why isn't vscode recognizing it
[06:42:24] <FromDiscord> <Bubblie> thats so weird
[06:43:07] <FromDiscord> <Elegantbeef> Have you restarted since installing?
[06:43:14] <FromDiscord> <Elegantbeef> Window's environmental variables suck
[06:43:17] <FromDiscord> <Bubblie> that may be it
[06:43:21] <FromDiscord> <Bubblie> In reply to @Elegantbeef "Window's environmental variables suck": oh yeah
[06:43:29] <termer> Elegantbeef what's this issue on this line
[06:43:31] <FromDiscord> <Bubblie> 100% I hate windows, I want to move to fedora linux but uh
[06:43:39] <FromDiscord> <Bubblie> I cant dual boot atm
[06:43:48] <FromDiscord> <Bubblie> so I might just run fedora in QEMU or something
[06:44:01] <FromDiscord> <Elegantbeef> you're using `getCurrentException` and `getCurrentExceptionMsg` it's code smell
[06:44:04] <termer> virtualizing is more pain than it is useful
[06:44:08] <FromDiscord> <Elegantbeef> Just use what i suggested
[06:44:12] <FromDiscord> <Elegantbeef> It's cleaner
[06:44:20] <FromDiscord> <Bubblie> In reply to @termer "virtualizing is more pain": Probably
[06:44:24] <termer> Elegantbeef I didn't see your suggestion
[06:44:26] <FromDiscord> <Bubblie> I might have enough on my d drive for fedora
[06:44:27] <FromDiscord> <Bubblie> Or
[06:44:35] <FromDiscord> <Bubblie> i might use an external hard drive
[06:44:38] <FromDiscord> <Bubblie> Just to use fedora
[06:44:39] <termer> was it to just except CatchableError as err or something?
[06:44:39] <FromDiscord> <Elegantbeef> It's after the link
[06:44:49] <FromDiscord> <Elegantbeef> https://irclogs.nim-lang.org/19-03-2022.html#03:12:00
[06:44:56] <termer> oh sorry
[06:44:56] <FromDiscord> <Elegantbeef> Yes it was
[06:45:02] <termer> I'm a bit tired
[06:45:08] <termer> I'll update it right now
[06:45:12] <termer> is there anything else you noticed
[06:45:32] <FromDiscord> <Elegantbeef> line 156 you're using a  for loop iterating indicies instead of just `for thread in hasher.threads.mitems`
[06:46:15] <termer> more beautiful 2am code
[06:46:18] <FromDiscord> <Elegantbeef> There was another issue that was bigger i swear
[06:46:20] <termer> thanks lol
[06:46:29] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:48:02] <FromDiscord> <huantian> In reply to @Elegantbeef "Well get at it": I have the get at it-ed
[06:48:05] <FromDiscord> <Elegantbeef> Oh yes `https://github.com/termermc/argon2-highlevel/blob/master/argon2_highlevel/private/utils.nim#L19-L24` this!
[06:48:45] <termer> wuh oh
[06:48:55] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SOA
[06:49:21] <termer> that's my first time seeing the {.global.} pragma
[06:49:34] <termer> does that create a var in global scope the first time it's run?
[06:49:34] <FromDiscord> <Elegantbeef> I say bigger issue, but i'm just weird
[06:49:39] <pch> as it turns out the canoncial way to write to a pixel array in sdl is with memset
[06:49:45] <pch> and i cant get any other way to work
[06:49:49] <FromDiscord> <Elegantbeef> It does what you did, just Nim scopes it to `genId`
[06:50:05] <FromDiscord> <Elegantbeef> What's the type of the `pixels`?
[06:50:10] <termer> in a way this seems weirder other than being inside of the proc
[06:50:29] <termer> by the way I noticed you removed the inline pragma, I'm guessing I didn't really need it, right
[06:50:33] <pch> Elegantbeef internally-formatted byte array
[06:51:25] <FromDiscord> <Elegantbeef> I mean you can inline it if you want, if calling a procedure that increments is a slowdown to your programi think you're in a great state
[06:51:32] <FromDiscord> <Elegantbeef> Plus the compiler may already attempt to inline it
[06:51:42] <FromDiscord> <Elegantbeef> Ok so you have a pointer and you know the data it holds?
[06:52:02] <pch> the "proper" way to write to a surface in SDL is to import it as an image then blit it to the new surface with an SDL command
[06:52:16] <termer> I have one more question, you removed the "return" keyword and just referenced the variable at the end. Is this an implicit return then
[06:52:25] <termer> it looks very weird to me coming from basically everything besides nim
[06:52:25] <FromDiscord> <Elegantbeef> Yes
[06:52:31] <termer> is that standard
[06:52:36] <FromDiscord> <Elegantbeef> All statements can be expressions so `return` is almost never needed
[06:52:49] <FromDiscord> <Elegantbeef> It's pretty idiomatic to disregard `return`
[06:52:55] <termer> ok noted
[06:53:06] <termer> although it seems a bit ambiguous compared to typing return
[06:53:22] <FromDiscord> <Elegantbeef> Perhaps if you're new, i heavily use expressions
[06:53:32] <termer> just in genera;
[06:53:34] <termer> *general
[06:54:01] <FromDiscord> <Elegantbeef> It's an expression it's not ambigous to me
[06:54:14] <FromDiscord> <Elegantbeef> The procedure has a return type and the last statement is a variable
[06:54:23] <termer> hmm fair enough I suppose
[06:55:02] <termer> wait a minute
[06:55:12] <termer> you mentioned doing for thread in hasher.threads.mitems
[06:55:16] <termer> I've never used mitems
[06:55:27] <FromDiscord> <Elegantbeef> It's 'mutable items'
[06:55:28] <pch> return can be useful for quick exit
[06:55:30] <termer> the reason I was using an index was because I wanted to assign to the thread arr at that idx
[06:55:37] <termer> pch well of course
[06:55:51] <pch> so you're passing return instead of break, which should behave more predictably
[06:56:17] <termer> yeah I do use return to exit out of a proc early often
[06:56:22] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3SOC this might help you pch
[06:56:32] <FromDiscord> <Elegantbeef> I generally never use return unless I need to
[06:56:40] <FromDiscord> <Elegantbeef> For performance or logic reasons
[06:56:55] <termer> is there actually a performance hit with using return
[06:56:59] <termer> I've never heard of that
[06:57:09] <FromDiscord> <Elegantbeef> termer `mitems` iterates over the collection yielding a pointer to the element since you dont use `i` there is no difference
[06:57:20] <FromDiscord> <Elegantbeef> No i meant performance in the other way
[06:57:28] <termer> oh
[06:57:41] <FromDiscord> <Elegantbeef> iterating over a collection to find an element for instance you can either do `result = true;break` or `return true`
[06:58:07] <FromDiscord> <Elegantbeef> It yields a `var T` which is a mutable reference or a 'pointer' üòÄ
[06:58:13] <termer> could you show me how you'd write that bit with the threads array
[06:58:56] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3SOD
[06:59:18] <termer> oh I'm retarded
[06:59:23] <termer> that makes perfect sense LOL
[06:59:52] <termer> I'd like to blame all my bad code on lack of sleep but seeing as I only have time to write nim when it's late I really can't keep using that excuse
[07:02:22] <FromDiscord> <Elegantbeef> You also can use `https://nim-lang.org/docs/system.html#createShared%2Ctypedesc` instead of `allocShared0`
[07:02:52] <termer> what's the benefit of that over allocShared0
[07:03:03] <FromDiscord> <Elegantbeef> no needing to type `sizeof` üòõ
[07:04:46] <FromDiscord> <Elegantbeef> I'd also do `type ThreadMessage = (ref AsyncArgon2, ptr Channel[Job], ptr Channel[JobRes])` or declare an object to save on typing
[07:06:24] <FromDiscord> <Elegantbeef> For createshared you dont need to cast it to a ptr on top of it
[07:06:33] <termer> that figures
[07:06:59] <termer> ok I'll do that stuff tomorrow
[07:07:03] <termer> I appreciate your advice
[07:07:04] <FromDiscord> <Elegantbeef> so you get a much more readable `hasher.jobChan = createShared(Channel[Job])`
[07:08:34] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 250 seconds)
[07:09:29] *** Quits: ozzz (~oz@46.49.41.80) (Ping timeout: 256 seconds)
[07:12:58] <FromDiscord> <TennisBowling> In reply to @Elegantbeef "Though Araq generally says": but with auto I have problems for when I set a variable to that function
[07:13:10] <termer> pushed changes
[07:13:16] <FromDiscord> <Elegantbeef> What?
[07:13:27] <FromDiscord> <Elegantbeef> Auto means the compiler will resolve the type
[07:13:52] *** Joins: ozzz (~oz@46.49.41.80)
[07:14:22] <FromDiscord> <Elegantbeef> Tennis what's the code
[07:15:44] <FromDiscord> <TennisBowling> if I set the return instance to auto, then functions that call it like‚Üµlet x = theFunc()‚Üµsay that the type is ambiguous‚Üµwhich makes sense but what do I do
[07:16:00] <FromDiscord> <Elegantbeef> what's `theFunc`?
[07:16:10] <FromDiscord> <Elegantbeef> the return type being `auto` doesnt mean it's ambiguousu
[07:16:29] <FromDiscord> <TennisBowling> sent a code paste, see https://paste.rs/yQL
[07:16:34] <FromDiscord> <Elegantbeef> Nim's statically typed, there is no way you can write `theFunc` to be ambigous
[07:16:47] <FromDiscord> <Elegantbeef> There is no ambiguity
[07:16:48] <FromDiscord> <TennisBowling> (edit) "https://paste.rs/ROC" => "https://paste.rs/ZAE"
[07:17:00] <FromDiscord> <Elegantbeef> `outOfAlivenodes` is a `Node`  as is `node`
[07:17:14] <FromDiscord> <TennisBowling> `Error: type mismatch: got 'NodeInstance' for 'node' but expected 'typedesc[outOfAliveNodes]'`
[07:17:31] <FromDiscord> <Elegantbeef> what is `outOfAliveNodes`?
[07:17:46] <FromDiscord> <TennisBowling> `type outOfAliveNodes = void‚Üµ`
[07:17:49] <FromDiscord> <Elegantbeef> Like i said Nim doesnt have dynamic typing
[07:18:05] <FromDiscord> <Elegantbeef> the procedure should return `void` then
[07:18:23] <FromDiscord> <TennisBowling> right but it can return NodeInstance
[07:18:38] <FromDiscord> <Elegantbeef> node is not `void`
[07:18:43] <FromDiscord> <Elegantbeef> Like was said you want to use options
[07:19:07] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SOO
[07:19:35] <FromDiscord> <Elegantbeef> You cannot return two types from a single instance of a procedure
[07:19:40] <FromDiscord> <TennisBowling> ah I see
[07:19:40] <FromDiscord> <huantian> I think you have an extra `result = ` beef
[07:19:41] <FromDiscord> <Elegantbeef> It either returns one or the other
[07:19:51] <FromDiscord> <Elegantbeef> yes
[07:20:52] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/1cO
[07:21:36] <FromDiscord> <huantian> üòà
[07:23:02] <FromDiscord> <TennisBowling> hmm
[07:23:21] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/options.html#basic-usage
[07:23:29] <FromDiscord> <TennisBowling> with that I get ‚Üµ`Error: expression 'none(NodeInstance)' is of type 'Option[consensusbackup.NodeInstance]' and has to be used (or discarded)`
[07:23:36] <FromDiscord> <TennisBowling> on the if thing
[07:23:39] <FromDiscord> <TennisBowling> (first if)
[07:24:11] <FromDiscord> <Elegantbeef> Both expressions have an implicit result so make sure you indented properly
[07:24:22] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[07:24:33] <FromDiscord> <Elegantbeef> also `typeof(node) is NodeInstance`?
[07:24:40] <FromDiscord> <TennisBowling> yes
[07:24:58] <FromDiscord> <Elegantbeef> What's your entire code now?
[07:25:03] <FromDiscord> <TennisBowling> sent a code paste, see https://paste.rs/Bq8
[07:25:19] <FromDiscord> <TennisBowling> sent a code paste, see https://paste.rs/BHA
[07:25:53] <FromDiscord> <Elegantbeef> i guess do `result = none(NodeInstance)` and same for the `result = some(node)`
[07:26:10] <FromDiscord> <Elegantbeef> I dont see where the exprression is falling through
[07:26:13] <FromDiscord> <huantian> you could also use the default result value too and be more implicit
[07:27:11] <FromDiscord> <TennisBowling> sent a code paste, see https://play.nim-lang.org/#ix=3SOQ
[07:27:30] <FromDiscord> <Elegantbeef> You're doing `getAlive == outOfAlive`
[07:27:36] <FromDiscord> <Elegantbeef> it's `getAliveNode.isSome`
[07:27:44] <FromDiscord> <Elegantbeef> or `getAlive Node.isNone`
[07:27:49] <FromDiscord> <TennisBowling> ahhhh
[07:28:18] <FromDiscord> <Bubblie> can I add breakpoints in nim
[07:28:26] <FromDiscord> <Bubblie> when debugging
[07:28:33] <FromDiscord> <Elegantbeef> Yes with GDB setup properly
[07:28:41] <FromDiscord> <Bubblie> how do I set up gdb?
[07:28:44] <FromDiscord> <TennisBowling> cool that worked
[07:28:46] <FromDiscord> <TennisBowling> thanks!
[07:28:47] <FromDiscord> <Elegantbeef> Fuck if i know
[07:28:49] <FromDiscord> <Bubblie> LMAO
[07:28:52] <FromDiscord> <Elegantbeef> I dont debug using debuggers
[07:29:02] <FromDiscord> <Bubblie> oh I see
[07:29:04] <FromDiscord> <huantian> cool kids use treeform print
[07:29:12] <FromDiscord> <Bubblie> or just, systout
[07:29:17] <FromDiscord> <Bubblie> (edit) "systout" => "sysout"
[07:29:22] <FromDiscord> <Elegantbeef> You can follow https://github.com/saem/vscode-nim#debugging
[07:29:38] <FromDiscord> <Elegantbeef> I know the author of GDB frontend got ok results using that
[07:29:50] <FromDiscord> <Elegantbeef> Gdb frontend that is
[07:29:56] <FromDiscord> <Elegantbeef> https://github.com/rohanrhu/gdb-frontend this thingy
[07:30:28] <FromDiscord> <Bubblie> üëÄ
[07:30:31] <FromDiscord> <Bubblie> cool ill look into it
[07:30:59] <FromDiscord> <Bubblie> oh wait
[07:31:02] <FromDiscord> <Elegantbeef> This old doc exists but i wouldnt suggest nimprof https://nim-lang.org/blog/2017/10/02/documenting-profiling-and-debugging-nim-code.html
[07:31:03] <FromDiscord> <Bubblie> CLion works now LETS GOOOOO
[07:31:11] <FromDiscord> <Bubblie> I can debug with CLion right off the bat
[07:31:21] <FromDiscord> <Bubblie> god this is awesome
[07:31:40] <FromDiscord> <huantian> is the variable viewer thingy good? on clion?
[07:31:46] <FromDiscord> <Bubblie> not sure
[07:31:52] <FromDiscord> <huantian> I don't  know what that's called tbh
[07:31:52] <FromDiscord> <Bubblie> what do you mean by variable viewer thingy
[07:31:55] <FromDiscord> <Bubblie> like
[07:31:58] <FromDiscord> <Bubblie> the breakpoint information?
[07:32:01] <FromDiscord> <huantian> uh
[07:32:01] <FromDiscord> <huantian> ig
[07:32:10] <FromDiscord> <Elegantbeef> Doubt any will be good they lack all the information of types, so a `set[char]` will be like debugging an array of ints‚Üµ(@huantian)
[07:32:40] <FromDiscord> <Bubblie> I mean im testing it right now hold on
[07:32:44] <FromDiscord> <Elegantbeef> Same with a `set[enum]`
[07:32:56] <FromDiscord> <Bubblie> does nim have Algebraic data types?
[07:33:05] <FromDiscord> <Bubblie> like sum types and stuff
[07:33:06] <FromDiscord> <Elegantbeef> I answered this yesterday
[07:33:13] <FromDiscord> <Elegantbeef> It has object variants
[07:33:18] <FromDiscord> <Elegantbeef> Which are just tagged unions
[07:33:29] <FromDiscord> <Elegantbeef> Though https://github.com/alaviss/union exists
[07:33:34] <FromDiscord> <Bubblie> oh I didn't see that
[07:33:37] <FromDiscord> <Elegantbeef> Considerr reading https://nim-lang.org/docs/manual.html
[07:33:54] <FromDiscord> <Bubblie> also the debugging is actually pretty good
[07:33:56] <FromDiscord> <Bubblie> in CLion
[07:34:09] <FromDiscord> <Bubblie> its telling me info, not sure about types though
[07:34:25] <FromDiscord> <Bubblie> alright
[07:34:25] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SOV
[07:34:30] <FromDiscord> <Bubblie> where do you want the breakpoints
[07:34:35] <FromDiscord> <Bubblie> on the type Color right?
[07:34:39] <FromDiscord> <Elegantbeef> 3 and 4 the only running code
[07:35:09] <FromDiscord> <Elegantbeef> i'm 99% certain it'll show `a` as `3` and then `7`
[07:35:52] <FromDiscord> <Elegantbeef> I dont imagine it'll show `{red, green}` then `{red, green, blue}`
[07:37:03] <FromDiscord> <Bubblie> you may be right
[07:37:38] <FromDiscord> <Bubblie> might set up vim in vscode then
[07:37:51] <FromDiscord> <Elegantbeef> Well no debugger shows the actual enum values
[07:38:02] <FromDiscord> <Elegantbeef> Either it's not possible or someone needs to fix the nim-gdb script
[07:38:16] <FromDiscord> <Bubblie> maybe
[07:38:30] <FromDiscord> <Bubblie> I might just, debug without breakpoints maybe
[07:38:35] <FromDiscord> <Bubblie> but im so use to breakpoint debugging
[07:38:36] <FromDiscord> <Bubblie> LMAO
[07:38:41] <FromDiscord> <Elegantbeef> `echo a` does print `{red, green, blue`
[07:38:55] <FromDiscord> <Bubblie> yes
[07:38:58] <FromDiscord> <Bubblie> echo will print it
[07:39:06] <FromDiscord> <Bubblie> but with a normal break point it doesn't show red,green,blue
[07:39:11] <FromDiscord> <Elegantbeef> Echo prints 'all' üòõ
[07:39:14] <FromDiscord> <Bubblie> which as you said is to be expected
[07:39:23] <FromDiscord> <huantian> this is what vscode shows https://media.discordapp.net/attachments/371759389889003532/954592394819539014/unknown.png
[07:39:32] <FromDiscord> <Bubblie> thats what I go too
[07:39:33] <FromDiscord> <Elegantbeef> Well if you want to make debugging better go hammer your head into `nim-gdb.py`
[07:39:36] <FromDiscord> <Bubblie> (edit) "go" => "got"
[07:39:50] <FromDiscord> <Bubblie> also, clion was able to show me the disassembly file
[07:39:52] <FromDiscord> <Bubblie> which was like
[07:39:55] <FromDiscord> <Bubblie> LMAO
[07:39:57] <FromDiscord> <Bubblie> not sure why
[07:40:10] <FromDiscord> <huantian> nah it's the same elsewhere
[07:40:12] <FromDiscord> <Elegantbeef> did you compile with `--debugger:native` huan?
[07:40:24] <FromDiscord> <huantian> yep
[07:40:38] <FromDiscord> <Bubblie> does clion support assembly?
[07:40:39] <FromDiscord> <Bubblie> I wonder
[07:40:50] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/devel/tools/nim-gdb.py is where that python file exists if anyone wants to take a shot üòõ
[07:41:05] <FromDiscord> <Bubblie> oh holy fuck
[07:41:08] <FromDiscord> <Bubblie> clion supports NASM?
[07:41:10] <FromDiscord> <Bubblie> YOOOO
[07:41:18] <FromDiscord> <Bubblie> how good is it though
[07:41:30] <FromDiscord> <huantian> In reply to @Elegantbeef "https://github.com/nim-lang/Nim/blob/devel/tools/ni": why does my python not have type hints
[07:41:45] <FromDiscord> <huantian> also I think I was using lldb on vscode because lazy
[07:41:54] <FromDiscord> <Elegantbeef> Python fucking sucks that's why
[07:42:03] <FromDiscord> <Bubblie> never heard a truer statement
[07:42:13] <FromDiscord> <Bubblie> I use to use python a lot
[07:42:18] <FromDiscord> <Bubblie> I still use it sometimes
[07:42:19] <FromDiscord> <Bubblie> but jesus
[07:42:22] <FromDiscord> <huantian> well python can't enforce type hints
[07:42:33] <FromDiscord> <Elegantbeef> Not with that attitude
[07:42:37] <FromDiscord> <huantian> true!
[07:42:41] <FromDiscord> <Bubblie> LOL
[07:43:01] <FromDiscord> <Bubblie> im glad CLion supports NASM
[07:43:07] <FromDiscord> <Elegantbeef> python 4 start enforcing static typing in code not written inside a `fuckingIdioticBlock`
[07:43:19] <FromDiscord> <Elegantbeef> Then eventually you're golden and all your code will be static typed
[07:43:26] <FromDiscord> <Elegantbeef> 10/10 trust me i'm a genius
[07:44:12] <FromDiscord> <huantian> also maybe they should add less leaky scoping
[07:44:24] <FromDiscord> <Elegantbeef> Maybe we shouldnt use it
[07:44:43] <FromDiscord> <Elegantbeef> "And other things a perpetually unemployed programmer can say"
[07:45:12] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[07:45:21] <FromDiscord> <Bubblie> maybe python shouldn't be shit
[07:46:46] <FromDiscord> <huantian> ok but can your language do `a, b = a[:] = [[]], []`
[07:46:57] <FromDiscord> <Bubblie> LMAO
[07:47:14] <FromDiscord> <Bubblie> nim actually made me like indentation langs
[07:47:26] <FromDiscord> <Bubblie> nim is like the first language ive seen that does indentation right
[07:47:27] <FromDiscord> <Elegantbeef> Well it's whitespace isnt silly
[07:47:34] <FromDiscord> <Bubblie> fr
[07:47:39] <FromDiscord> <Bubblie> holy shit its like a breathe of fresh air
[07:47:47] <FromDiscord> <Bubblie> ruby and python are just
[07:47:48] <FromDiscord> <Bubblie> oh my god
[07:47:51] <FromDiscord> <Elegantbeef> You can do that you need `\`
[07:47:52] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SP1
[07:48:15] <FromDiscord> <huantian> sent a code paste, see https://play.nim-lang.org/#ix=3SP2
[07:48:17] <FromDiscord> <Elegantbeef> Lol
[07:48:22] <FromDiscord> <Elegantbeef> That's ambiguous though
[07:48:29] <FromDiscord> <Elegantbeef> Is it unary is it binary who knows!
[07:48:44] <FromDiscord> <Bubblie> can you make nim compile to things other than an exe
[07:48:46] <FromDiscord> <Elegantbeef> Also that's horizontally aligned code, so it's fucking tedious
[07:48:52] <FromDiscord> <Elegantbeef> You can write libraries yes
[07:48:57] <FromDiscord> <Elegantbeef> `--app:lib` goes brr
[07:49:07] <FromDiscord> <Bubblie> so like, how would I make an executeable for mac
[07:49:17] <FromDiscord> <Elegantbeef> You'd cross compile for mac
[07:49:26] <FromDiscord> <Elegantbeef> Which is tedious and damn near impossible if you arent on mac
[07:49:30] <FromDiscord> <Elegantbeef> Atleast afaik
[07:49:31] <FromDiscord> <Bubblie> I have a mac
[07:49:32] <FromDiscord> <Bubblie> so
[07:49:35] <FromDiscord> <huantian> sent a code paste, see https://play.nim-lang.org/#ix=3SP4
[07:49:38] <FromDiscord> <Bubblie> it shouldn't be that bad
[07:49:40] <FromDiscord> <Bubblie> but
[07:49:44] <FromDiscord> <Bubblie> I say that but mac development is hell
[07:49:44] <FromDiscord> <huantian> In reply to @Elegantbeef "Which is tedious and": because apple is dum dum
[07:49:47] <FromDiscord> <Elegantbeef> Just compile locally on the mac then
[07:49:49] <FromDiscord> <Bubblie> does nim work on m1?
[07:49:53] <FromDiscord> <Elegantbeef> Yes
[07:49:56] <FromDiscord> <Bubblie> perfect
[07:49:59] <FromDiscord> <Bubblie> my mac is an m1
[07:50:02] <FromDiscord> <Elegantbeef> I think Araq uses a M1
[07:50:14] <FromDiscord> <Bubblie> as soon as I get fedora linux I will be the master of all elements
[07:50:21] <FromDiscord> <huantian> araq uses macos? time to stop using nim
[07:50:34] <FromDiscord> <Elegantbeef> Agreed
[07:50:49] <FromDiscord> <Bubblie> I keep putting semi colons in nim like its java üíÄ
[07:50:53] <FromDiscord> <Elegantbeef> I'm going to fork it and just make it so it doesnt compile for mac
[07:50:57] <FromDiscord> <Bubblie> this is what java does to a person
[07:51:10] <FromDiscord> <Elegantbeef> When i write shaders i do the same
[07:51:17] <FromDiscord> <Elegantbeef> Start religiously putting semicolons and crying
[07:51:23] <FromDiscord> <Elegantbeef> "They're redundant" i scream
[07:51:25] <FromDiscord> <huantian> whenever I write semicolon langs I always write the code and then when it doesn't compile I put all my semicolons in
[07:51:47] <FromDiscord> <Elegantbeef> I've got so many "expected ;" errors working inbetween shader and game codee
[07:52:02] <FromDiscord> <Elegantbeef> Shady needs UBO/SSBO support before i can use it
[07:52:19] <FromDiscord> <huantian> ~~also why does unity not have init only properties grumble grumble~~
[07:52:34] <FromDiscord> <Elegantbeef> The fuck is a Unity üòõ
[07:52:40] <FromDiscord> <huantian> it's that uh
[07:52:43] <FromDiscord> <huantian> one desktop environment
[07:52:47] <FromDiscord> <huantian> and that one song by the fat rat
[07:52:57] <FromDiscord> <Elegantbeef> And that game engine
[07:53:24] <FromDiscord> <Bubblie> also I love how nim uses var and not val
[07:53:25] <FromDiscord> <Elegantbeef> Let's see if i can get any game dev done or if my brain will run off into "oh look a squirrel mode"
[07:53:31] <FromDiscord> <Bubblie> idk I like var better
[07:53:35] <FromDiscord> <Bubblie> also I dislike let
[07:53:46] <FromDiscord> <Elegantbeef> But nim uses `let`
[07:53:55] <FromDiscord> <Bubblie> but nim uses var?
[07:54:05] <FromDiscord> <Elegantbeef> Nim uses `var` `let` and `const`
[07:54:06] <FromDiscord> <Bubblie> does it have both?
[07:54:07] <FromDiscord> <Bubblie> OH SHIT
[07:54:12] <FromDiscord> <Elegantbeef> `let` is immutable
[07:54:12] <FromDiscord> <Bubblie> okay thats fine
[07:54:22] <FromDiscord> <Bubblie> ah okay
[07:54:25] <FromDiscord> <Bubblie> makes sense
[07:54:25] <FromDiscord> <Elegantbeef> `var` is mutable and i'll let you guess what `const` is
[07:54:30] <FromDiscord> <huantian> I was writing some c# and I was like "dang I wish c# had macros"
[07:54:33] <FromDiscord> <Bubblie> const is self explanatory
[07:54:46] <FromDiscord> <Elegantbeef> Rosyln source code generators is the best they can do
[07:55:45] <FromDiscord> <huantian> why can't I just put my entire game in `static:` and have it run at build time unity smh
[07:56:07] <FromDiscord> <Elegantbeef> Huan you're also a gamedev?
[07:56:30] <FromDiscord> <Bubblie> so just to refresh my memory, let can be assigned once just like const, except const cannot be assigned to something like input
[07:56:31] <FromDiscord> <Bubblie> let can
[07:56:41] <FromDiscord> <Elegantbeef> `const` is compiletime constant
[07:56:46] <FromDiscord> <Bubblie> its still assigned once but it isn't enforced in compile time
[07:56:49] <FromDiscord> <Elegantbeef> `let` is runtime 'constant'
[07:56:50] <FromDiscord> <Bubblie> In reply to @Elegantbeef "`const` is compiletime constant": yeah
[07:56:54] <FromDiscord> <Elegantbeef> Var is 100% mutable
[07:57:13] <FromDiscord> <huantian> In reply to @Elegantbeef "Huan you're also a": I do some coding for Rhythm Doctor ye
[07:57:18] <FromDiscord> <Bubblie> üëÄ
[07:57:24] <FromDiscord> <Bubblie> wait
[07:57:25] <FromDiscord> <Bubblie> like
[07:57:28] <FromDiscord> <Bubblie> rhythm doctor mods
[07:57:30] <FromDiscord> <Elegantbeef> Nim has compile time evaluation so you can do something like `const myShader = staticRead"myDir/shader"`
[07:57:30] <FromDiscord> <Bubblie> or the actual game
[07:57:38] <FromDiscord> <huantian> actual game
[07:57:41] <FromDiscord> <Bubblie> üëÄ
[07:57:44] <FromDiscord> <Bubblie> holy shit
[07:57:53] <FromDiscord> <huantian> ~~yall should play it it's a good game unbiased opinion~~
[07:57:56] <FromDiscord> <Bubblie> I love rhythm doctor
[07:58:09] <FromDiscord> <Bubblie> I didn't think I would meet an actual rhythm doctor dev
[07:58:12] <FromDiscord> <Elegantbeef> literally unplayable
[07:58:13] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/954597133619699752/image.png
[07:58:34] <FromDiscord> <Bubblie> In reply to @Elegantbeef "Nim has compile time": ah okay
[07:58:46] <FromDiscord> <Bubblie> so a good time to use const is when I never assign anything at run time
[07:58:49] <FromDiscord> <Bubblie> only at compile time
[07:59:05] <FromDiscord> <huantian> nim's `var` `let` `const` is so much better than js's lmao
[07:59:08] <FromDiscord> <Elegantbeef> Const is as the name implies for constants
[07:59:35] <FromDiscord> <Elegantbeef> If something is constant and unchanging use `const` if something loads from runtime values but is otherwise constant use `let`, finally use \`var
[07:59:42] <FromDiscord> <Bubblie> yes
[07:59:44] <FromDiscord> <Bubblie> alright good
[07:59:45] <FromDiscord> <Elegantbeef> That's the order i take when making variables
[07:59:47] <FromDiscord> <Bubblie> my brain is functional
[07:59:59] <FromDiscord> <Bubblie> In reply to @huantian "nim's `var` `let` `const`": they are
[08:00:00] <FromDiscord> <Elegantbeef> The most immutable program is the best program imo
[08:00:14] <FromDiscord> <Bubblie> I mean, I would assume it depends on the program right
[08:00:18] <FromDiscord> <Bubblie> depending on what tools would be used
[08:00:21] <FromDiscord> <huantian> In reply to @Bubblie "I didn't think I": I only joined end of last year lol, suprised you're not in the Rhythm docto discord server
[08:00:27] <FromDiscord> <huantian> (edit) "Rhythm docto" => "rhythm doctor"
[08:00:29] <FromDiscord> <Elegantbeef> No the smallest mutable state is the best
[08:00:46] <FromDiscord> <Bubblie> In reply to @huantian "I only joined end": I never joined, I should
[08:00:47] <FromDiscord> <Elegantbeef> i'm not going to sound off like a FP programmer saying everything has to be pure, but when it can be it should be
[08:00:54] <FromDiscord> <Bubblie> Its just im at the max discord server limit
[08:01:02] <FromDiscord> <Bubblie> don't ask why im in 100 programming servers
[08:01:09] <FromDiscord> <Bubblie> and inactive in 90 of them
[08:01:14] <FromDiscord> <Elegantbeef> Well you have nim now so leave 99 of them
[08:01:21] <FromDiscord> <Bubblie> LMAO
[08:01:36] <FromDiscord> <huantian> yeah I have to leave a server each time I join a new one
[08:01:47] <FromDiscord> <Bubblie> im in a bunch of minecraft mod dev servers
[08:01:51] <FromDiscord> <Bubblie> so I think that adds to it
[08:02:07] <FromDiscord> <huantian> In reply to @Elegantbeef "i'm not going to": yeah I think recently I've been too functional and immutable...
[08:02:14] <FromDiscord> <huantian> maybe I should go code some js or something
[08:02:53] <FromDiscord> <Bubblie> code js...?
[08:02:58] <FromDiscord> <Bubblie> why would you do that to yourself
[08:03:41] <FromDiscord> <Bubblie> I envy people who can actually enjoy JS
[08:03:43] <FromDiscord> <Bubblie> I cant
[08:04:16] <FromDiscord> <huantian> In reply to @Elegantbeef "image.png": soon‚Ñ¢Ô∏è
[08:04:34] <FromDiscord> <huantian> I do wish c# had object variants tho
[08:05:08] <FromDiscord> <Elegantbeef> Dont lie you wish it was Nim
[08:05:24] <FromDiscord> <Bubblie> C# feels like java, so for me it is easy to use
[08:06:00] <FromDiscord> <Bubblie> I wonder how good I can make an entity component system in nim
[08:06:12] <FromDiscord> <huantian> and this doesn't work
[08:06:13] <FromDiscord> <huantian> sent a code paste, see https://play.nim-lang.org/#ix=3SP9
[08:06:15] <nrds> <06Prestige99> There are a few out there
[08:06:20] <FromDiscord> <huantian> and I'm just like fuming
[08:06:50] <FromDiscord> <huantian> (edit) "https://play.nim-lang.org/#ix=3SP9" => "https://paste.rs/88r"
[08:06:50] <FromDiscord> <huantian> (edit) "https://play.nim-lang.org/#ix=3SPa" => "https://paste.rs/8rw"
[08:07:01] <FromDiscord> <Elegantbeef> Oh right i was going to look at that errror
[08:07:24] <FromDiscord> <Elegantbeef> Prestige can you repost the link?
[08:07:48] <nrds> <06Prestige99> Elegantbeef https://github.com/nim-lang/Nim/issues/19371 this?
[08:07:55] <FromDiscord> <Elegantbeef> danke
[08:08:10] <nrds> <06Prestige99> Thanks for looking into it
[08:10:08] <nrds> <06Prestige99> Hmm can you write a case statement for a union type?
[08:10:36] <FromDiscord> <Elegantbeef> What?
[08:10:40] <FromDiscord> <huantian> union type?
[08:11:03] <FromDiscord> <Elegantbeef> No error reported here with nvim
[08:11:31] <FromDiscord> <Elegantbeef> You're using the LSP right?
[08:15:16] <FromDiscord> <Elegantbeef> Yea it's related to nimlsp afaict
[08:19:07] <FromDiscord> <Elegantbeef> Yep saem's extension using nimsuggest doesnt error but bung's extension using lsp does
[08:19:16] <FromDiscord> <Elegantbeef> So it's something the lsp is doing to get that error
[08:19:46] <FromDiscord> <Elegantbeef> prestige that was all for you so you best respond
[08:24:08] <pch> aha i got it working
[08:24:27] <FromDiscord> <Elegantbeef> Congrats
[08:24:27] <pch> next up for the api: attempt to implement frame pacing
[08:27:47] <nrds> <06Prestige99> Elegantbeef hmm let me check something
[08:28:45] <nrds> <06Prestige99> Yeah Elegantbeef if you just put that code into a file and directly run nimsuggest on it, it will show that error I reported
[08:29:29] <nrds> <06Prestige99> nimsuggest foo.nim then chk 1
[08:30:42] <FromDiscord> <Elegantbeef> Ah you're right
[08:30:55] <FromDiscord> <Elegantbeef> nvim/vscode worked fine
[08:31:04] <nrds> <06Prestige99> I wonder why 
[08:32:22] <FromDiscord> <Elegantbeef> Only way to learn is to debug it üòõ
[08:38:21] <nrds> <06Prestige99> I'm getting those errors from within nvim actually so yeah
[08:44:07] <FromDiscord> <Elegantbeef> Well we're using different error services so yea
[08:44:13] <FromDiscord> <Elegantbeef> I was just saying with my setup of nvim it didnt error
[08:50:56] <nrds> <06Prestige99> Yours doesn't use nimsuggest then I take it
[08:51:43] <FromDiscord> <Elegantbeef> Yes it does
[08:51:45] <nrds> <06Prestige99> It seems like nobody really cares that nimsuggest is essentially broken
[08:52:28] <FromDiscord> <Elegantbeef> Actually you're right it might use nimcheck
[08:52:56] <FromDiscord> <Elegantbeef> Well i mean you seem to care, but arent trying to fix it so checkmate
[08:53:41] <nrds> <06Prestige99> I mean if I wanted to write and work on a new language I'd be doing that instead lol
[08:54:55] <FromDiscord> <Elegantbeef> I'll take a look at it, knowing the compiler it's just missing a flag üòõ
[08:58:45] <FromDiscord> <Elegantbeef> Also how dare you not actually make a min repro
[08:59:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SPo
[09:00:43] <nrds> <06Prestige99> Lol
[09:00:45] <nrds> <06Prestige99> Thanks for looking
[09:03:23] <FromDiscord> <Elegantbeef> `semIdeForTemplateOrGenericCheck` hmm this stuff might be related
[09:03:52] *** Quits: rawrrr (uid540880@id-540880.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:06:47] <FromDiscord> <Elegantbeef> Holy shit the issue is that the type and proc are exported
[09:07:45] <FromDiscord> <Elegantbeef> Remove the export from the proc and it works
[09:08:15] <FromDiscord> <Elegantbeef> It's just that the proc is exported, so that limits the scope down a bit
[09:12:04] <nrds> <06Prestige99> hmm
[09:12:29] <nrds> <06Prestige99> well if I _want_ it exported, that shouldn't cause this issue I'd think
[09:12:45] <FromDiscord> <Elegantbeef> What?
[09:12:57] <nrds> <06Prestige99> like, this error being reported is still false
[09:13:09] <FromDiscord> <Elegantbeef> The issue is a exported generic causes this bug, it limits the scope of the issue down quite a bit
[09:13:34] <FromDiscord> <Elegantbeef> We went from "Why the fuck does this happen" to "Ok it's just an exported generic procedure"
[09:13:41] <FromDiscord> <Elegantbeef> Which makes me wonder if a constrained generic also does
[09:15:06] <FromDiscord> <Elegantbeef> It's even more percise now
[09:15:31] <FromDiscord> <Elegantbeef> an exported inferred generic procedure is the culprit
[09:16:09] <FromDiscord> <Elegantbeef> if you instead do `doThing[string](BinaryTree[string]())` it goes away
[09:16:41] <nrds> <06Prestige99> Interesting...
[09:17:02] <nrds> <06Prestige99> So it's unable to intepret the correct function based on the param type?
[09:17:19] <FromDiscord> <Elegantbeef> There is a nimsuggest generic optimization which is causing this i believe
[09:17:56] <FromDiscord> <Elegantbeef> I dont know where it is yet, but i'm thinking either in `qualifiedLookup`,`seminst`, `semtypeinst` though those dont have special casing for nimsuggest
[09:18:33] <nrds> <06Prestige99> It started after 1.4.8 if that helps at all
[09:21:23] <FromDiscord> <Elegantbeef> Going to add my findings to that issue anyway
[09:27:22] <nrds> <06Prestige99> ty 
[09:31:09] <FromDiscord> <Elegantbeef> Now if i can reason why and how to fix it is another thing
[10:37:31] <FromDiscord> <creikey> sent a code paste, see https://play.nim-lang.org/#ix=3SPJ
[10:38:02] <FromDiscord> <Elegantbeef> `--cc:tcc`
[10:38:21] <FromDiscord> <creikey> I think it's mostly because of nimble
[10:38:36] <FromDiscord> <Elegantbeef> Until `IC` we're stuck with compile times
[10:38:42] <FromDiscord> <Rika> Then maybe don‚Äôt use nimble since aside from improving the code‚Ä¶
[10:38:52] <FromDiscord> <creikey> In reply to @Rika "Then maybe don‚Äôt use": yeah just `nim r` seems a lot faster
[10:38:58] <FromDiscord> <creikey> don't know why I didn't try that in the first place
[10:39:14] <FromDiscord> <Elegantbeef> Then yea just use `nimble` for ensuring it's a reproducible build
[10:39:15] <FromDiscord> <Rika> Nimble probably does some sort of checks from the network
[10:39:23] <FromDiscord> <Rika> Cuz packages
[10:39:39] <FromDiscord> <Elegantbeef> Doesnt `nimble run` make a release build?
[10:39:51] <FromDiscord> <Elegantbeef> `nimble run -d:debug` might be fasteer
[10:40:05] <FromDiscord> <Rika> Run does not pass switches
[10:40:25] <FromDiscord> <Rika> which is a bug
[10:40:51] <FromDiscord> <creikey> just had to explain to my rooommate what irc was
[10:41:55] <FromDiscord> <creikey> In reply to @Elegantbeef "`nimble run -d:debug` might": same amount of time proving it's just scanning the deps
[10:42:02] <FromDiscord> <Elegantbeef> Odd
[10:42:11] <FromDiscord> <Elegantbeef> Make a new task then i guess
[10:42:15] <FromDiscord> <creikey> yeah
[10:42:17] <FromDiscord> <creikey> oh wait
[10:42:18] <FromDiscord> <creikey> nimble task
[10:42:38] <FromDiscord> <creikey> In reply to @Elegantbeef "Odd": I'm using windy which depends on everything treeform so it's all his code but spread across like 20 dependencies
[10:42:59] <FromDiscord> <creikey>  https://media.discordapp.net/attachments/371759389889003532/954638601176641556/unknown.png
[10:43:25] <FromDiscord> <Elegantbeef> Ah
[10:43:43] <pch> https://github.com/kinkinkijkin/nimsgp on public VCS now
[10:45:08] <FromDiscord> <Elegantbeef> Oh yet another canuck
[10:45:18] <FromDiscord> <Rika> When will people stop naming Nim projects with ‚ÄúNim‚Äù in it
[10:45:39] <FromDiscord> <Elegantbeef> Never
[10:45:55] <pch> I put nim in it because I need to describe that it's specifically for usage with the nim language
[10:46:10] <pch> you know, like 90% of libraries that aren't just C do
[10:46:30] <nrds> <06Prestige99> I've definitely never done that üòÖ
[10:47:00] <FromDiscord> <Rika> Well at least give it a catchier name than ‚ÄúSGP‚Äù
[10:47:37] <FromDiscord> <huantian> How about tenderchart
[10:48:08] <pch> names mean very little and I'm currently dealing with extremely much more important things in my life than whether my free software is marketable
[10:48:13] <FromDiscord> <Rika> Okay
[10:48:27] <FromDiscord> <Elegantbeef> Your comments rant make me laugh a bit
[10:49:12] <pch> I even removed arbitrary attachements at some point after I wrote that
[10:49:20] <pch> like, they're not there any more at all
[10:49:22] <pch> I gave up
[10:51:23] <FromDiscord> <Elegantbeef> 10/10 on the proper spelling of colour
[10:59:25] <FromDiscord> <Elegantbeef> Well prestige no luck in fixing it so far
[10:59:44] <FromDiscord> <Elegantbeef> An hour of scrolling code and testing is enough for the night üòÄ
[11:00:01] <nrds> <06Prestige99> thanks for the effort, I appreciate ya
[11:02:43] <FromDiscord> <Elegantbeef> It's pretty clear it's in the semoverloadedCall branch, just dont know exactly where
[11:25:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[11:30:30] <pch> maintainer of sdl2 bindings for nim: the bindings hard-search for libSDL2.so
[11:30:50] <pch> on haiku the so is named "libSDL2-2.0.so.0"
[11:31:33] <nrds> <06Prestige99> I see both on my system (linux) so that's interesting
[11:31:55] <FromDiscord> <Rika> Probably best to raise an issue
[11:34:04] <pch> issue raised
[11:38:20] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[11:39:50] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[11:40:04] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[11:40:24] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[11:40:26] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[11:41:05] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[11:42:12] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[11:43:08] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[11:43:28] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[11:52:18] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[12:05:37] <pch> tested renderer with a fix to the sdl2 bindings for haiku, confirmed working
[12:42:47] <FromDiscord> <Goel> How to create an array starting with Index 1 instead of 0?
[12:43:37] <FromDiscord> <Elegantbeef> `array[1..EndIndex, YourType]`
[13:03:04] <FromDiscord> <Shinyzenith> Hi what's the difference between `<ptr mytype>` and `ptr mytype`? https://media.discordapp.net/attachments/371759389889003532/954673852082946048/unknown.png
[13:14:43] *** Joins: lumo_e (~enrico@151.29.53.201)
[13:14:51] <FromDiscord> <Rika> Nothing, full error is needed
[13:16:06] <FromDiscord> <Shinyzenith>  https://media.discordapp.net/attachments/371759389889003532/954677136030052352/unknown.png
[13:16:35] <FromDiscord> <Shinyzenith> sent a code paste, see https://play.nim-lang.org/#ix=3SQa
[13:18:07] <FromDiscord> <Shinyzenith> futhark is being really wonky
[13:25:34] <FromDiscord> <Shinyzenith> In reply to @Shinyzenith "": very odd error code
[13:25:36] <FromDiscord> <Shinyzenith> :/
[13:37:17] *** ozzz is now known as om3ga
[14:06:08] <FromDiscord> <nariod> Hello !‚ÜµIs it possible to call native Win32 API using winim ? I already use this lib for high level API such VirtualAllocEx, but API such as NtCreateSection does not seem to be implemented.
[14:18:53] <FromDiscord> <demotomohiro> @nariod I think you can manually import Win32 APIs with header pragma: https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-header-pragma
[14:19:49] <FromDiscord> <demotomohiro> Or dynlib pragma: https://nim-lang.org/docs/manual.html#foreign-function-interface-dynlib-pragma-for-import
[14:21:22] <FromDiscord> <demotomohiro> winlean module is a good example to use these pragmas: https://github.com/nim-lang/Nim/blob/devel/lib/windows/winlean.nim
[14:22:39] <FromDiscord> <nariod> In reply to @demotomohiro "<@410127425956085770> I think you": Nice, thanks!
[14:39:35] <FromDiscord> <hmmm> broski is there in existance somewhere a counter that start from 0 and builds up using all alphanumeric? Something like uuid4 but not 36 char from the start, it should build up from zero
[14:44:09] <FromDiscord> <Rika> a counter
[14:44:20] <FromDiscord> <Rika> thats called "a counter"
[14:44:42] <FromDiscord> <Rika> theres a veeeeeery good reason UUID is not sequential
[14:47:35] <FromDiscord> <hmmm> yea but a counter that works like 8,9,a .. , z, 10, 11 ... zz, 100
[14:48:50] <FromDiscord> <hmmm> I need to store a bunch of them and want the counter as compact as possible
[14:49:20] <FromDiscord> <Rika> just use a number then convert it into "base36"
[14:49:31] <FromDiscord> <hmmm> hmmm
[14:49:55] <FromDiscord> <hmmm> semms like an reasonable way to go around it
[14:50:40] <FromDiscord> <Rika> a reasonable
[14:51:36] <FromDiscord> <demotomohiro> Storing counters as binary or msgpack form would be more compact.
[14:51:53] <FromDiscord> <hmmm> oh yes?
[14:51:59] <FromDiscord> <hmmm> what libraries do we have for that
[14:52:21] <FromDiscord> <hmmm> no wait I need the counter to work for id too
[14:52:32] <FromDiscord> <Rika> please do not use a sequential counter for IDs
[14:52:52] <FromDiscord> <hmmm> but I was using uuid4 and I get monstrous sizes
[14:52:57] <FromDiscord> <hmmm> I need something more compact
[14:54:07] <FromDiscord> <hmmm> I'll try the base36 rika method(TM)
[14:54:22] <FromDiscord> <demotomohiro> https://github.com/jangko/msgpack4nim
[14:54:32] <FromDiscord> <Rika> https://github.com/ai/nanoid
[14:54:42] <FromDiscord> <Rika> https://github.com/icyphox/nanoid.nim
[14:55:43] <FromDiscord> <hmmm> hmm 21 vs 36 is already much better
[14:56:29] <FromDiscord> <Rika> https://github.com/ai/nanoid#custom-alphabet-or-size
[14:56:57] <FromDiscord> <Rika> you can configure size to whatever you want, given that the collision chance is acceptable for you
[14:57:27] <FromDiscord> <hmmm> hmm why do I need to have a collision chance when I can just use a progessive counter that ensures that?
[14:58:22] <FromDiscord> <Rika> progressive counter means it is easy to guess what the next counter is
[14:58:38] <FromDiscord> <hmmm> oh that's entirely not a problem lol
[14:58:50] <FromDiscord> <Rika> if it is not then go ahead with the counter, whats this for anyway
[14:59:13] <FromDiscord> <hmmm> storing some kind of weird tree I made
[14:59:29] <FromDiscord> <Rika> why does the string representation matter here
[15:00:00] <FromDiscord> <hmmm> hmm elements of the trees have an id lol
[15:00:28] <FromDiscord> <Rika> yes, and theyre just numbers
[15:00:34] <FromDiscord> <Rika> why does the string representation matter
[15:00:41] <FromDiscord> <Rika> are you saving it to a file?
[15:00:44] <FromDiscord> <hmmm> yes
[15:00:47] <FromDiscord> <Rika> just binary pack the whole type then
[15:00:54] <FromDiscord> <hmmm> wot
[15:00:56] <FromDiscord> <hmmm> I'm using json
[15:00:59] <FromDiscord> <Rika> why
[15:01:09] <FromDiscord> <hmmm> idk it seemed the easiest thing
[15:01:20] <FromDiscord> <Rika> and the most inefficient choice?
[15:01:23] <FromDiscord> <hmmm> hmm
[15:01:29] <FromDiscord> <hmmm> msgpack?
[15:02:49] <FromDiscord> <demotomohiro> https://en.m.wikipedia.org/wiki/MessagePack
[15:03:17] <FromDiscord> <Rika> https://github.com/disruptek/frosty could work too if you dont care about language interoperability
[15:04:02] <FromDiscord> <hmmm> what about https://github.com/treeform/flatty
[15:06:49] <FromDiscord> <Rika> whichever
[15:07:11] <FromDiscord> <Valdar> I use this one, https://github.com/jangko/msgpack4nim, but flatty should be good. I haven't gotten around to trying it.
[15:11:39] <FromDiscord> <enthus1ast> We need a wrapper for this https://github.com/magiblot/tvision
[15:13:58] <FromDiscord> <hmmm> thats so cool
[15:28:20] <FromDiscord> <Phil> Out of curiosity, anyone have an idea what exactly nimibook does that is so insanely expensive in terms of calculations?
[15:32:02] <FromDiscord> <Forest> Anyone know how i could define an API that could be used in plain C?
[15:32:56] <FromDiscord> <Forest> So i wanna define some functions in Nim, then have someone just include the library if they wanna use it with `#include "library.h`
[15:33:00] <FromDiscord> <Forest> (edit) ""library.h`" => ""library.h"`"
[15:33:05] <FromDiscord> <Rika> exportc maytbe?
[15:33:38] <FromDiscord> <Forest> Oki, but how would i get the header file then?
[15:33:48] <FromDiscord> <Forest> Since didn't Nim drop support for that?
[15:46:54] <FromDiscord> <hmmm> what's our version of isinstance(thingy, int)
[15:48:17] <FromDiscord> <Rika> `thing is int`? `typeof thing == int`?
[15:48:20] <FromDiscord> <Rika> idk which is right
[15:48:50] <FromDiscord> <hmmm> yea I think it's that
[15:49:05] <FromDiscord> <hmmm> can I restrict it to naturals and it will work too?
[15:53:32] <FromDiscord> <Phil> typeof will be the death of me
[15:53:42] <FromDiscord> <Phil> I can never keep straight which language has that and which doesn't
[15:55:00] <FromDiscord> <hmmm> what is this daemon speak I hear about, there is only a language and it's nim üßê
[15:55:49] <FromDiscord> <Phil> Please, if there was only nim people could neither flame about rust, nor stare at me horrified when I once more reveal the well known fact I code in java at work
[15:57:14] <FromDiscord> <hmmm> hehe
[15:58:12] <FromDiscord> <hmmm> java must be a comfy boomer lang if you can stomach the boilerplate
[15:58:32] <FromDiscord> <hmmm> and whatever brings the dinner on the table I guess üòä
[15:58:48] <FromDiscord> <Phil> Ehhh it's... I'd give it a C. What is most painful about it is that for the most trivial thing I immediately throws 50 layers of abstractions on it
[15:58:57] <FromDiscord> <Phil> (edit) "I" => "it"
[15:59:25] <FromDiscord> <hmmm> as someone writing java a lot you must feel plenty good writing nim
[15:59:44] <FromDiscord> <Phil> For the boilerplate there's code generators in the IDE and otherwise java has a lot of nice finished packages
[16:01:19] <FromDiscord> <Phil> depends. The language is clearly superior. I'm really liking the concepts I have access to in nim.‚ÜµWhat's obviously missing is the sheer variety of packages. Java has its own package for integrating elasticsearch for pete's sake, and another for fetching docker containers for absolutely trivial integration-testing when you have an elasticsearch backend, making "implementing" it and integration testing trivial
[16:02:09] <FromDiscord> <Phil> That's all stuff I'd have to wire up myself in nim. There's a reason I'm contributing left and right the tooling that I insist on having for my application.
[16:02:56] <FromDiscord> <hmmm> yea we just need 10% of rust community and we are set
[16:03:10] <FromDiscord> <hmmm> more eyeballs more libraries better libraries
[16:05:50] <FromDiscord> <coal <3> In reply to @hmmm "more eyeballs more libraries": better libraries more eyeballs, etc etc
[16:06:49] <FromDiscord> <coal <3> (edit) "In reply to @hmmm "more eyeballs more libraries": better libraries ... more" 03added "->"
[16:07:01] <FromDiscord> <hmmm> it's a snake eating it's tail, we must cut the snake in half with the flaming sword of Araq, it is placed on a dungeon 50 floors into the ground, only 1 hero can do it
[16:25:52] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[16:26:26] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[16:26:29] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[16:27:07] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[16:29:13] <FromDiscord> <Forest> What's the simplest websocket library in Nim? I wanna just have like, two procs
[16:29:35] <FromDiscord> <Forest> One that recieves and processes data, and the other that sends data
[16:38:10] <FromDiscord> <auxym> In reply to @Forest "Oki, but how would": https://github.com/treeform/genny
[16:46:31] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:02:14] *** Quits: lumo_e (~enrico@151.29.53.201) (Ping timeout: 250 seconds)
[17:15:14] <FromDiscord> <Forest> Neat, thanks!
[17:25:03] <FromDiscord> <Jakraes> Hey guys, quick question, how do I use a character as a proc name? I've seen it somewhere but I forgot where and I have no idea how to implement it
[17:25:29] <FromDiscord> <Jakraes> Like this
[17:26:32] <FromDiscord> <Jakraes> proc ^(number1, number2) = number1  number2
[17:26:39] <FromDiscord> <Jakraes> And then it'd be used as something like this
[17:26:44] <FromDiscord> <Jakraes> number1^number2
[17:30:14] <FromDiscord> <Phil> Backticks when you define the char
[17:30:25] <FromDiscord> <Phil> https://play.nim-lang.org/#ix=3SR7
[17:30:34] <FromDiscord> <Phil> @Jakraes
[17:30:55] <FromDiscord> <Jakraes> Great, thank you so much!
[17:31:04] <FromDiscord> <Jakraes> It works, nice
[17:31:31] <FromDiscord> <Phil> Sidenote to myself: I really need to keep in mind to import std/sugar more often when I want JS style anonymous procs
[17:32:09] <FromDiscord> <Phil> Just had to troubleshoot for 3 minute only to figure out that my "=>" proc didn't work because sugar wasn't imported
[17:43:50] *** Joins: arkurious (~arkurious@user/arkurious)
[17:48:40] *** Joins: lumo_e (~enrico@151.29.53.201)
[17:53:50] <FromDiscord> <Shinyzenith> can someone tell  me what this cryptic error code means ? https://media.discordapp.net/attachments/371759389889003532/954747027240140830/unknown.png
[17:59:34] *** Quits: lumo_e (~enrico@151.29.53.201) (Quit: Quit)
[18:08:16] <FromDiscord> <auxym> well it's a type mismatch... the cryptic type names are probably auto generated, by futhark perhaps? In any case I'd assume it's a bug in the "herb" package
[18:08:45] <FromDiscord> <Daniel> https://gankra.github.io/blah/c-isnt-a-language/
[18:09:32] <FromDiscord> <Shinyzenith> In reply to @auxym "well it's a type": it is futhark
[18:09:37] <FromDiscord> <Shinyzenith> herb is the package I'm writing
[18:09:42] <FromDiscord> <Shinyzenith> (edit) "package" => "binary"
[18:09:52] <FromDiscord> <auxym> oh
[18:09:54] <FromDiscord> <Shinyzenith> this just doesn't make sense
[18:09:55] <FromDiscord> <Shinyzenith> sent a code paste, see https://play.nim-lang.org/#ix=3SRg
[18:09:58] <FromDiscord> <Shinyzenith> the type names are the same
[18:10:05] <FromDiscord> <Shinyzenith> one is wrapped in `<>` and one is not
[18:10:07] <FromDiscord> <Shinyzenith> like wtf
[18:10:16] <FromDiscord> <auxym> yeah didn't notice that tbh :/
[18:10:20] <FromDiscord> <auxym> weird
[18:10:24] <FromDiscord> <Shinyzenith> very very weird
[18:10:26] <FromDiscord> <Shinyzenith> üòî
[18:10:44] <FromDiscord> <auxym> maybe @pmunch could help if he's around
[18:10:58] <FromDiscord> <Shinyzenith> Oh I didn't know they had a discord acc
[18:11:13] <FromDiscord> <Shinyzenith> I opened a gh issue regarding some other stuff, no reply yet so I assume they're busy
[18:12:01] <FromDiscord> <Shinyzenith> but when i echo .type on my variable, none of the <> bs shows up https://media.discordapp.net/attachments/371759389889003532/954751603288711229/unknown.png
[18:12:02] <FromDiscord> <Shinyzenith> ü•≤
[18:12:47] <FromDiscord> <Shinyzenith> so I have no idea why it's conflicting
[18:21:23] <FromDiscord> <Rika> show the code you used with futhark
[18:21:28] <FromDiscord> <Rika> overrides and whatnot
[18:22:40] <FromDiscord> <Shinyzenith> sent a code paste, see https://paste.rs/vQV
[18:23:03] <FromDiscord> <Rika> you dont need to do ` Re-defining a few type names because the ones from futhark are terrible.`1
[18:23:14] <FromDiscord> <Shinyzenith> sent a code paste, see https://paste.rs/1X5
[18:24:36] <FromDiscord> <Shinyzenith> In reply to @Rika "you dont need to": so I should use the odd numbered ones?
[18:25:06] <FromDiscord> <Shinyzenith> (edit) "https://play.nim-lang.org/#ix=3SRl" => "https://paste.rs/7Kw"
[18:25:49] <FromDiscord> <Rika> no, you dont need to use the numbered ones...
[18:25:56] <FromDiscord> <Rika> why did you think you needed to?
[18:26:26] <FromDiscord> <Shinyzenith> cuz when I searched up the type names, they showed up ü•≤
[18:27:40] <FromDiscord> <Rika> well if you read the relatively messy generated code you'd see that further down theres another define
[18:28:02] <FromDiscord> <Shinyzenith> Oh
[18:28:07] <FromDiscord> <Shinyzenith> I'll read it
[18:28:21] <FromDiscord> <Shinyzenith> so i can just remove the funky numbers?
[18:28:47] <FromDiscord> <Shinyzenith> yep removing them fixed it
[18:28:54] <FromDiscord> <Shinyzenith> ' https://media.discordapp.net/attachments/371759389889003532/954755849920872448/unknown.png
[18:28:59] <FromDiscord> <Shinyzenith> thank you so much rika!
[18:45:29] <termer> I know this was pretty far back in message history, but I recommend MessagePack
[18:45:38] <termer> it works well
[18:46:35] <termer> you can also use ProtocolBuffers. There's an interesting protobuf library in nim but I couldn't use it because the writer generator didn't support async sockets. Could've modified it but was too lazy
[19:11:13] <FromDiscord> <System64 ~ Flandre Scarlet> Is there a fixed point type?
[19:15:45] <FromDiscord> <TennisBowling> sent a code paste, see https://play.nim-lang.org/#ix=3SRU
[19:25:08] <FromDiscord> <Rika> `node.get.httpClient`...
[19:25:18] <FromDiscord> <Rika> nim does not have flow typing
[19:33:16] <FromDiscord> <TennisBowling> ah I see
[19:44:06] <FromDiscord> <TennisBowling> sent a code paste, see https://paste.rs/zWU
[19:44:29] <FromDiscord> <TennisBowling> sent a code paste, see https://play.nim-lang.org/#ix=3SS3
[19:45:48] <FromDiscord> <Rika> how do you use doRequest
[19:47:02] <FromDiscord> <TennisBowling> ohhhh
[19:47:06] <FromDiscord> <TennisBowling> there it's set as a table
[19:47:14] <FromDiscord> <TennisBowling> in the function that calls it
[19:47:30] *** Joins: toulene (~toulene@user/toulene)
[19:48:20] <FromDiscord> <TennisBowling> sent a code paste, see https://play.nim-lang.org/#ix=3SS9
[19:48:25] <FromDiscord> <TennisBowling> however it still throws that error
[19:59:52] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3SSd
[20:00:54] <FromDiscord> <Phil> (edit) "https://play.nim-lang.org/#ix=3SSd" => "https://play.nim-lang.org/#ix=3SSe"
[20:01:02] <FromDiscord> <Phil> (edit) "https://play.nim-lang.org/#ix=3SSe" => "https://play.nim-lang.org/#ix=3SSf"
[20:07:17] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3SSi
[20:07:47] <FromDiscord> <Rika> In reply to @Isofruit "Do callback-procs in a": single line if =>, multiline is possible otherwise
[20:08:08] <FromDiscord> <Phil> In reply to @Rika "single line if =>,": So I just need to use `proc` instead?
[20:08:14] <FromDiscord> <Phil> Let me try that
[20:08:22] <FromDiscord> <Rika> sent a code paste, see https://paste.rs/0lW
[20:08:41] <FromDiscord> <Rika> In reply to @Isofruit "So I just need": im honestly not sure if => is single line only even
[20:08:45] <FromDiscord> <Rika> i know proc() works thoug
[20:08:50] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @Rika "use `result` variable in": what does it do?
[20:08:55] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3SSm
[20:09:04] <FromDiscord> <Phil> Whatever is in result will be returned as the output
[20:09:08] <FromDiscord> <Phil> return X is actually a hidden result = x
[20:09:17] <FromDiscord> <Rika> In reply to @System64 "what does it do?": you dont need `var operator: operator` anymore
[20:09:22] <FromDiscord> <Rika> also capitalise your type names
[20:09:31] <FromDiscord> <System64 ~ Flandre Scarlet> like OPERATOR?
[20:09:35] <FromDiscord> <Rika> `Operator`
[20:09:40] <FromDiscord> <System64 ~ Flandre Scarlet> ah alright like Java
[20:09:54] <FromDiscord> <Rika> like pretty much all modern programming languages
[20:09:56] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3SSo
[20:10:00] <FromDiscord> <System64 ~ Flandre Scarlet> yeah, sorry
[20:10:13] <FromDiscord> <System64 ~ Flandre Scarlet> and any exemple for result?
[20:10:26] <FromDiscord> <Phil> The proc above for example uses result
[20:10:43] <FromDiscord> <Phil> The only reason the inner proc uses return is because I dunno about result in anonymous functions
[20:11:13] <FromDiscord> <System64 ~ Flandre Scarlet> ah alright‚Üµ‚Üµand it returns an empty object?
[20:11:44] <FromDiscord> <Phil> Remember how, when you define a variable, there's strangely something in that variable that you can access?
[20:11:59] <FromDiscord> <Phil> like, when you do var x: int, you can do echo x and it'll show a value
[20:12:23] <FromDiscord> <System64 ~ Flandre Scarlet> Operator is going wrong https://media.discordapp.net/attachments/371759389889003532/954781893327454278/unknown.png
[20:12:34] <FromDiscord> <Rika> you messed up the indentation
[20:12:41] <FromDiscord> <Phil> nim initializes types to a certain degree for you (I say to a certain degree because the DateTime type for example will straight up error out if you try to access a DateTime field without the object being properly instantiated)
[20:12:42] <FromDiscord> <Rika> `adsr: Adsr`
[20:12:47] <FromDiscord> <Rika> `interpolation: Interpolation`
[20:12:55] <FromDiscord> <Phil> (edit) "nim initializes types to a certain degree for you ... (I" 03added "just when you set up the variable"
[20:13:23] <FromDiscord> <System64 ~ Flandre Scarlet> Still exploding https://media.discordapp.net/attachments/371759389889003532/954782142473338910/unknown.png
[20:13:23] <FromDiscord> <Phil> So basically you can treat result as if it were a variable that had already been declared with the type that is the return type of your proc
[20:13:31] <FromDiscord> <Rika> indentation
[20:13:33] <FromDiscord> <Rika> i said it above
[20:13:37] <FromDiscord> <Rika> you fucked the indentation
[20:13:44] <pch> question for nimble maintainers
[20:14:00] <FromDiscord> <System64 ~ Flandre Scarlet> ah now it's better
[20:14:00] <FromDiscord> <Phil> @System64 ~ Flandre Scarlet See how Interpolation is indented compared to "Operator"
[20:14:10] <pch> can you please not error-enforce a very specific folder structure and just have a "source folder" variable
[20:14:12] <FromDiscord> <Phil> And see on which indentation level your "type" keyword is
[20:14:14] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @Rika "you messed up the": ah didn't saw this message, sorry
[20:15:20] <pch> ex I want to make a git repo with a macrolibrary split into multiple sublibraries and this is just the first step to being able to do so with nimble
[20:15:48] <pch> and nimble is complaining that I don't have a perfectly flat folder structure and saying it will error out in the future
[20:24:57] <FromDiscord> <Shinyzenith> sent a long message, see http://ix.io/3SSr
[20:25:41] <FromDiscord> <Shinyzenith> (edit) "http://ix.io/3SSr" => "http://ix.io/3SSs"
[20:26:48] <FromDiscord> <Rika> what does "parent object" refer to
[20:27:11] <FromDiscord> <Phil> I am now sad, turns out I can't properly use strformat to insert stuff into a json string
[20:27:31] <FromDiscord> <Shinyzenith> In reply to @Rika "what does "parent object"":  https://media.discordapp.net/attachments/371759389889003532/954785703433236530/unknown.png
[20:27:37] <FromDiscord> <Shinyzenith> that's the zig one
[20:27:41] <FromDiscord> <Shinyzenith> do you want the nim definition?
[20:27:58] <FromDiscord> <System64 ~ Flandre Scarlet> Why does it do that? https://media.discordapp.net/attachments/371759389889003532/954785817493143602/unknown.png
[20:29:02] <FromDiscord> <Rika> i is not an index
[20:29:07] <FromDiscord> <Phil> Generally showing the exact compilation error does help. That loop also seems wrong
[20:29:09] <FromDiscord> <Rika> its an object
[20:29:22] <FromDiscord> <Rika> In reply to @Shinyzenith "": i dont know what im looking at
[20:29:26] <FromDiscord> <Phil> Are you familiar with "for in" loops as opposed to regular forloops @System64 ~ Flandre Scarlet  ?
[20:29:54] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @Isofruit "Are you familiar with": a bit, used ths in JS, but yeah I'm dumb lol
[20:31:05] <FromDiscord> <Phil> In reply to @System64 "a bit, used ths": basically for <some var name> in <some seq> gives you, in order, the entries in the seq into the var name, no indexing required. ‚ÜµIf you want to go the full java functional way, sequtils have `map`, `filter` etc. procs to work with
[20:31:43] <FromDiscord> <Shinyzenith> In reply to @Rika "i dont know what": Uhh Ok I'll rewrite it in nim and try to explain properly, i'll brb
[20:32:00] <FromDiscord> <Phil> and with std/sugar that can look almost exactly like JS, for example‚Üµ`let myNewOperators = operators.map(operator => newOperator())`
[20:32:08] <FromDiscord> <Rika> im still unsure what a "parent object" is
[20:32:32] <FromDiscord> <Rika> OH
[20:32:36] <FromDiscord> <Rika> YOU WANT TO DEREFERENCE THE POINTER
[20:32:39] <FromDiscord> <Rika> is that what?
[20:32:39] <FromDiscord> <Phil> (edit) "myNewOperators" => "myNewOperators: seq[Operator]"
[20:33:11] <FromDiscord> <Rika> `var wlr_output: wlr output = cast[ptr wlr_output](data)[]`
[20:33:13] <FromDiscord> <Rika> i think?
[20:33:19] <FromDiscord> <Rika> whoops i used space by mistak
[20:33:29] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @Isofruit "and with std/sugar that": Oh beautiful
[20:34:26] <FromDiscord> <Phil> In reply to @System64 "Oh beautiful": The key difference that the above has to your code is that the "map" operator creates a new array, while you were using an existing array and putting an operator in it... I think
[20:34:35] <FromDiscord> <Phil> (edit) "array," => "seq,"
[20:34:39] <FromDiscord> <Rika> sent a code paste, see https://paste.rs/Fao
[20:34:45] <FromDiscord> <Rika> @Shinyzenith come baaaaaack i think i get what you mean
[20:35:16] <FromDiscord> <Phil> (edit) "think" => "think‚ÜµAlso for that to work you'll need to import `std/[sequtils, sugar]`"
[20:35:34] <FromDiscord> <Shinyzenith> In reply to @Rika "if you really want": uhhh this might be what I'm looking for
[20:35:39] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3SSA
[20:35:43] <FromDiscord> <Shinyzenith> I'll test and let you know
[20:35:51] <FromDiscord> <System64 ~ Flandre Scarlet> (edit) "https://play.nim-lang.org/#ix=3SSA" => "https://paste.rs/LCc"
[20:35:53] <FromDiscord> <Shinyzenith> it's not exactly dereferencing the pointer
[20:35:54] <FromDiscord> <Rika> yeah i think i understood what you wanted
[20:35:54] <FromDiscord> <Shinyzenith> but its' close
[20:36:15] <FromDiscord> <Rika> idk then
[20:36:21] <FromDiscord> <huantian> sent a code paste, see https://play.nim-lang.org/#ix=3SSD
[20:36:23] <FromDiscord> <Rika> im not sure what a "parent objcet" is still
[20:37:27] <FromDiscord> <Shinyzenith> In reply to @Rika "im not sure what": https://ziglang.org/documentation/master/#fieldParentPtr maybe this can help
[20:38:00] <FromDiscord> <Rika> i will read one moment
[20:38:06] <FromDiscord> <Shinyzenith> thank you
[20:38:07] <FromDiscord> <Shinyzenith> !
[20:38:41] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3SSK
[20:39:01] <FromDiscord> <Phil> 1..4 is a range from 1 to 4, including 1 and 4, so 1,2,3,4
[20:39:05] <FromDiscord> <huantian> sent a code paste, see https://paste.rs/jH7
[20:39:05] <FromDiscord> <System64 ~ Flandre Scarlet> not 0..4?
[20:39:11] <FromDiscord> <System64 ~ Flandre Scarlet> arrays starts at 0
[20:39:16] <FromDiscord> <System64 ~ Flandre Scarlet> (edit) "0..4?" => "0..3?"
[20:39:16] <FromDiscord> <huantian> I should not try to write code on mobile agh
[20:39:50] <FromDiscord> <Phil> In reply to @System64 "not 0..3?": Oh right, you use an array not a seq, if you want to use the number as an index then yeah, you can go 0..3
[20:40:02] <FromDiscord> <System64 ~ Flandre Scarlet> wait, seq starts at 1?
[20:40:02] <FromDiscord> <Rika> i honestly still have no idea
[20:40:14] <FromDiscord> <Phil> In reply to @System64 "wait, seq starts at": No, in a seq I'd just have done x.add("bla")
[20:40:15] <FromDiscord> <Rika> no
[20:40:20] <FromDiscord> <System64 ~ Flandre Scarlet> ah alright
[20:40:20] <FromDiscord> <Rika> seqs start at 0 always
[20:40:23] <FromDiscord> <Phil> Which means the index wuoldn't have mattered
[20:40:35] <FromDiscord> <Phil> (edit) "wuoldn't" => "wouldn't"
[20:40:54] <FromDiscord> <huantian> With a seq you would just do newSeqWith
[20:40:54] <FromDiscord> <Phil> I very, very rarely ever use arrays tbh
[20:41:31] <FromDiscord> <Shinyzenith> In reply to @Rika "i honestly still have": :PepeKek: Ok i'll try again
[20:42:19] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[20:42:31] <FromDiscord> <Shinyzenith> such as field 3
[20:42:32] <FromDiscord> <Shinyzenith> sent a long message, see http://ix.io/3SSO
[20:43:01] <FromDiscord> <Rika> oh man okay that sounds cursed
[20:43:19] <FromDiscord> <Shinyzenith> 
[20:43:26] <FromDiscord> <Rika> i can think of something upo
[20:43:27] <FromDiscord> <Shinyzenith> it's really useful in wayland callback design
[20:43:39] <FromDiscord> <Shinyzenith> In reply to @Rika "i can think of": So no stdlib implementations? QwQ
[20:43:43] <FromDiscord> <Rika> no
[20:43:46] <FromDiscord> <Shinyzenith> üòî
[20:43:51] <FromDiscord> <Shinyzenith> that's a really useful macro tho!!
[20:44:01] <FromDiscord> <Shinyzenith> I'll make a github issue with feature request I guess
[20:44:02] <FromDiscord> <Shinyzenith> üëÅÔ∏è
[20:44:03] <FromDiscord> <Rika> i dont know anyone who has used it
[20:44:17] <FromDiscord> <Shinyzenith> ü•≤
[20:45:11] <FromDiscord> <Rika> i get what it does now though
[20:45:25] <FromDiscord> <Shinyzenith> üôè Glad I could explain it
[20:47:36] <FromDiscord> <demotomohiro> @Shinyzenith Why dont you pass a pointer to `MyObject` instead of the field? Then you can easily access any fields of `MyObject` without using `fieldParentPtr`.
[20:48:03] <FromDiscord> <Shinyzenith> thing is, any sane person would do that
[20:48:26] <FromDiscord> <Shinyzenith> but the wl_listener notify field only accepts a wlr_listener(t) type
[20:48:29] <FromDiscord> <Shinyzenith> (edit) "wlr_listener(t)" => "wlr_listener(T)"
[20:48:44] <FromDiscord> <Shinyzenith> (edit) "wlr_listener(T)" => "wl_signal(T)"
[20:49:12] <FromDiscord> <Shinyzenith> libwayland created wl_container_of to counter this but it's a function style macro which futhark doesn't support yet
[20:49:55] *** Joins: pch (~pch@66.49.131.33)
[20:50:53] <FromDiscord> <Rika> @Shinyzenith WAIT
[20:50:56] <FromDiscord> <Rika> I FOUND SOMETHING
[20:51:07] <FromDiscord> <Rika> its prolly not that long of a function
[20:52:58] <FromDiscord> <Rika> probably????
[20:53:01] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3SSR
[20:55:21] <FromDiscord> <Rika> ah
[20:55:22] <FromDiscord> <Rika> cast
[20:55:24] <FromDiscord> <Rika> not convert
[20:55:44] <FromDiscord> <Rika> `cast[ptr T](cast[int](data) - offsetOf(T, field))[]`
[20:55:47] <FromDiscord> <Rika> its 2 am
[20:55:50] <FromDiscord> <Shinyzenith> Hmmm I don't understand it too well since I'm still not that good at nim‚Üµbut I guess the only way to find out is to stick it in the file lol‚Üµi'll try when on pc <a:aPES_Fedora:493676570255294464>
[20:55:51] <FromDiscord> <Rika> im dead in the brain
[20:56:02] <FromDiscord> <Rika> you too tomohiro you should sleep XD
[20:56:28] <FromDiscord> <Shinyzenith> sent a code paste, see https://play.nim-lang.org/#ix=3SSS
[20:56:33] <FromDiscord> <Rika> yeah i think that should work...?
[20:56:59] <FromDiscord> <Rika> `fieldParentPtr[SomeType](fieldnameNoQuotes, data)`
[20:57:02] <FromDiscord> <Rika> smth like that for usage
[20:57:30] <FromDiscord> <Shinyzenith> Ok i'll test it
[20:57:34] <FromDiscord> <demotomohiro> I think `cast[ptr T](cast[uint](data) - offsetOf(T, field).uint)[]`.
[20:57:58] <FromDiscord> <Rika> i guess that works "safer"
[20:58:17] <FromDiscord> <Shinyzenith> In reply to @Rika "`fieldParentPtr[SomeType](fieldnameNoQuotes, data)`": so the name of the field i'm passing as the data?
[20:58:26] <FromDiscord> <Rika> yes
[20:58:47] <FromDiscord> <Shinyzenith> Ok I'm gonna edit the server struct rq and get back to you
[21:04:20] <FromDiscord> <TennisBowling> has anyone used nim-presto?
[21:05:31] <FromDiscord> <Jakraes> Is there some sort of terminal event listener in nim?
[21:05:44] <FromDiscord> <Jakraes> Like, listening to key presses in terminal
[21:07:45] <FromDiscord> <Rika> set terminal to raw mode and you will get key presses as they are done
[21:07:59] <FromDiscord> <Rika> dont ask me how to do that, i did it a long time ago and it was legitimately painful
[21:15:04] <FromDiscord> <Phil> And here I thought I could save myself the "serialization" step in the data-line db-data --> nim object --> serialization --> json‚ÜµTurns out even if I have jsony, I still want to have special logic here and there and fields in a different name than the object fields are, so I still need a "serialization" step, I just create objects that jsony then serializes >_>
[21:15:55] <FromDiscord> <huantian> I do wish there was a way to create custom field hooks for specific object fields
[21:16:37] <FromDiscord> <Phil> Nim to define a whole lot of types for final serialization and conversion procs of my model-types into those serialization types
[21:16:41] <FromDiscord> <Phil> (edit) "Nim" => "Time"
[21:22:17] <FromDiscord> <Phil> Oh lord I have several levels of nested types
[21:22:22] <FromDiscord> <Phil> Gods this will be painful
[21:37:28] <FromDiscord> <Shinyzenith> @Rika https://media.discordapp.net/attachments/371759389889003532/954803307178774658/unknown.png
[21:37:51] <FromDiscord> <Shinyzenith>  https://media.discordapp.net/attachments/371759389889003532/954803402947321876/unknown.png
[21:44:10] *** Joins: krux02 (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de)
[21:45:01] <FromDiscord> <Rika> usage?
[21:45:13] <FromDiscord> <Shinyzenith>  https://media.discordapp.net/attachments/371759389889003532/954805259904110782/unknown.png
[21:45:31] <FromDiscord> <Shinyzenith> sent a code paste, see https://play.nim-lang.org/#ix=3ST1
[21:46:03] <FromDiscord> <Shinyzenith> (edit) "https://play.nim-lang.org/#ix=3ST1" => "https://play.nim-lang.org/#ix=3ST2"
[21:46:38] <FromDiscord> <demotomohiro> You need to pass type for `[T]` like `fieldParentPtr[FooType](...)`
[21:47:16] <FromDiscord> <Shinyzenith> passing the type returns this] https://media.discordapp.net/attachments/371759389889003532/954805775249862677/unknown.png
[21:47:38] <FromDiscord> <Rika> AH im dumb üôÇ
[21:47:40] <FromDiscord> <Elegantbeef> Nice a compiler error
[21:47:53] <FromDiscord> <Rika> no no im dumb, i passed an untyped to something expecting a sym
[21:48:07] <FromDiscord> <Rika> beef fix it its too late for me rn
[21:48:33] <FromDiscord> <Rika> prolly needs a macro at this point because i dont know how to get the symbol from a field name
[21:48:53] <FromDiscord> <Rika> the casts are unavoidable in this case as well btw
[21:48:55] <FromDiscord> <Elegantbeef> The hell are we doing?
[21:49:06] <FromDiscord> <Shinyzenith> Oh get some sleep! I'm sorry for the ping!
[21:49:21] <FromDiscord> <Rika> getting the address of a main object given a pointer to one of its fields
[21:49:27] <FromDiscord> <Rika> and the type of the main object
[21:50:08] <FromDiscord> <Shinyzenith> sent a code paste, see https://play.nim-lang.org/#ix=3ST3
[21:50:13] <FromDiscord> <Rika> field shouldnt be untyped
[21:50:18] <FromDiscord> <Rika> offsetOf takes a sym
[21:50:22] <FromDiscord> <Elegantbeef> That wont change anything
[21:50:25] <FromDiscord> <Rika> ah wait no
[21:50:42] <FromDiscord> <Rika> it takes an untyped i think i mistook offsetof for the one in macros
[21:50:45] <FromDiscord> <Elegantbeef> the issue is you're passing `a.field` into `offsetOf`
[21:50:47] <FromDiscord> <Rika> yeah this should work
[21:50:57] <FromDiscord> <Elegantbeef> Doesnt matter if it takes or untyped
[21:51:03] <FromDiscord> <Rika> this offsetOf is the system one not macros
[21:51:23] <FromDiscord> <Elegantbeef> Nim sems code after the template expands so doesnt matter what the code takes
[21:51:29] <FromDiscord> <Rika> `var herb_server = fieldParentPtr(new_output, listener);` is his usage, aside from the missing [] its right isnt it?
[21:51:41] <FromDiscord> <Elegantbeef> The issue here is that you need to supply just the field name to `offsetOf`
[21:51:49] <FromDiscord> <Elegantbeef> Since it uses the `offsetOf` magic
[21:52:00] <FromDiscord> <Rika> he does...
[21:52:04] <FromDiscord> <Shinyzenith> O_O I'll read up about all this, cuz rn it's going all over my head
[21:52:09] <FromDiscord> <Rika> what are you on about
[21:52:17] <FromDiscord> <Elegantbeef> I misread the usage
[21:52:18] <FromDiscord> <Rika> this is exactly whats happening
[21:52:19] <FromDiscord> <Rika> xd
[21:52:43] <FromDiscord> <Solitude> matrix bridge scrambles parameters in codeblocks
[21:52:47] <FromDiscord> <Rika> okay
[21:52:51] <FromDiscord> <Rika> unfortunate
[21:53:12] <FromDiscord> <Elegantbeef> It doesnt of course it's just what we're going with
[21:53:23] <FromDiscord> <Shinyzenith> sent a long message, see http://ix.io/3ST7
[21:53:28] <FromDiscord> <Shinyzenith> that's what I was trying to achieve
[21:57:07] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3STb
[21:57:08] <FromDiscord> <Elegantbeef> Issue is that generic parameters are fucky in templates
[21:58:05] <FromDiscord> <Elegantbeef> `echo fieldParentPtr(b, obj.b.addr, MyObject)`
[21:58:10] <FromDiscord> <Rika> unfortunate
[21:58:15] <FromDiscord> <Elegantbeef> No redundant call
[21:58:41] <FromDiscord> <Rika> if you want to make it like the one in zig the order of params would be `T: typedesc, field: untyped, data: pointer`
[22:06:12] <FromDiscord> <Shinyzenith> sent a code paste, see https://play.nim-lang.org/#ix=3STj
[22:06:25] <FromDiscord> <Shinyzenith> In reply to @Rika "if you want to": well if it works, it works üòÜ
[22:08:08] <FromDiscord> <Shinyzenith> Thank you beef and Rika !! It works flawlessly!
[22:08:11] <FromDiscord> <Shinyzenith> just like the one in zig
[22:08:20] <FromDiscord> <Shinyzenith> I'll read up about templates to understand this :D
[23:11:37] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3STF
[23:15:23] <FromDiscord> <Phil> I'm actually not sure jsony can do JSON --> Table,
[23:15:31] <FromDiscord> <Phil> Or even JSON --> JsonNode
[23:15:44] <FromDiscord> <ajusa> JSON --> JsonNode should work, it has that in its readme I think
[23:16:02] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3STH
[23:16:07] <FromDiscord> <Phil> In the jsony examples it has Table --> JSON, the other way around I haven't seen
[23:16:47] <FromDiscord> <ajusa> Hm, maybe. Also @Phil, did you try doing something like `import chronicles except toJson` for https://github.com/treeform/jsony/issues/47?
[23:16:55] <FromDiscord> <ajusa> (edit) "https://github.com/treeform/jsony/issues/47?" => "https://github.com/treeform/jsony/issues/47 ?"
[23:17:43] <FromDiscord> <ajusa> also the readme seems to have a table parsing example, not sure how I'm screwing this up in my code
[23:23:32] <FromDiscord> <Phil> In reply to @ajusa "Hm, maybe. Also <@!180601887916163073>,": That works as well, doesn't fix the underlying issue though that it shouldn't be the case that code within jsony explodes in such a scenario
[23:24:50] <FromDiscord> <Phil> In this scenario I don't need the "toJson" proc from another package, in other scenarios I might and then I'll still have to adjust jsony's code because the template within can't ensure it calls primarily the procs from the same module as the template
[23:25:46] <FromDiscord> <ajusa> fair point. You are probably right in that jsony should prefix internal calls with jsony.whatever, but it's also just a strange issue
[23:26:19] <FromDiscord> <Phil> I mean, for the most part it's because nim doesn't have a lot of large-ish application which would want to do a ton of logging
[23:27:36] <FromDiscord> <Phil> Given how funkily logging behaves for me (I e.g. get no longer the error outputs of prologue/norm when an error occurs for some utterly obscure reason) I'm not a terribly large fan of what we have for logging currently either way
[23:28:26] <FromDiscord> <ajusa> yeah, logging could be better in Nim land, I agree. too many solutions as well imo
[23:32:23] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3STI
[23:43:27] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 252 seconds)
[23:49:21] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[23:56:52] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
