[00:00:08] *** Joins: revolve (~u0_a227@82-132-238-168.dab.02.net)
[00:03:16] *** Quits: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru) (Read error: Connection reset by peer)
[00:03:30] *** Joins: sizeof_void34 (~Thunderbi@109.252.75.112)
[00:04:33] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:09:25] *** Joins: joshcom (~joshcom@2600:8800:a706:2b00:5be3:4224:17a3:9012)
[00:09:38] *** Quits: olavfosse (~olavfosse@2001:464c:73bf:0:10ef:a636:70a4:bde4) (Quit: Client closed)
[00:09:46] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:13:12] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[00:19:13] *** Joins: normen (~normen@p200300d7173dc9007874998c750167eb.dip0.t-ipconnect.de)
[00:20:26] *** Quits: sizeof_void34 (~Thunderbi@109.252.75.112) (Quit: sizeof_void34)
[00:29:56] *** Quits: danderson (~dave@tailscale/danderson) (Quit: WeeChat 3.1)
[00:30:53] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Quit: clarjon1)
[00:34:47] *** Quits: f8l12 (~f8l12@154.3.42.29) (Ping timeout: 268 seconds)
[00:37:16] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[00:45:28] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[00:48:03] *** Quits: joshcom (~joshcom@2600:8800:a706:2b00:5be3:4224:17a3:9012) (Quit: Leaving)
[00:53:46] *** Quits: dcompoze (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net) (Quit: WeeChat 3.2)
[01:00:20] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[01:01:57] *** Joins: jinie (~jimmy@188.114.173.37)
[01:08:54] *** Joins: independent56 (~independe@185.50.0.80)
[01:11:23] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[01:11:44] <enkeyz> come here from #go :D
[01:12:01] <enkeyz> they says Go is a silly language
[01:12:18] <enkeyz> "Go, the game (not the silly language: that's in #go-nuts )"
[01:13:25] *** Quits: cooper (~mitchell@user/cooper) (Quit: leaving)
[01:15:00] *** Joins: cooper (~mitchell@user/cooper)
[01:20:12] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 272 seconds)
[01:22:08] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[01:28:14] *** Quits: gruuf (~gruuf@94.31.99.29) (Quit: WeeChat 3.1)
[01:32:54] *** Quits: n1000 (~n1000@user/n1000) (Quit: WeeChat 3.1)
[01:32:54] *** Joins: dansan (~daniel@75.81.148.51)
[01:48:59] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[01:53:13] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Ping timeout: 248 seconds)
[01:54:47] *** Quits: independent56 (~independe@185.50.0.80) (Ping timeout: 258 seconds)
[01:59:47] *** Joins: oxum (~oxum@122.172.205.112)
[02:04:25] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 248 seconds)
[02:06:02] *** Quits: Guest36 (~Guest36@p200300c8cf2276009739e07be2ed963e.dip0.t-ipconnect.de) (Quit: Client closed)
[02:13:12] *** Joins: n1000 (~n1000@user/n1000)
[02:17:50] *** Quits: normen (~normen@p200300d7173dc9007874998c750167eb.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[02:24:06] *** Quits: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748) (Ping timeout: 272 seconds)
[02:24:12] *** Joins: Torr (~Torr@user/torr)
[02:24:30] *** Quits: revolve (~u0_a227@82-132-238-168.dab.02.net) (Read error: Connection reset by peer)
[02:25:12] *** Joins: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748)
[02:27:50] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:30:13] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[02:31:06] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[02:31:36] *** Joins: revolve (~u0_a227@82-132-238-168.dab.02.net)
[02:34:13] <oliv3> sorry i'm afk, so just asking, is it possible to nest select statements ?
[02:34:49] <oliv3> i wouldn't see a reason why not but
[02:35:20] <bpalmer> yes, it's possible.
[02:35:29] <oliv3> k, thx
[02:38:27] <b0nn> I've seen that in the wild, sometimes it's a bit confusing to read, but it's certainly doable
[02:40:49] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:42:21] <oliv3> i use nested "receive" statements in erlang
[02:43:40] <oliv3> for conditional control-flow between processes
[02:44:06] <oliv3> like some FSM
[02:46:43] <bpalmer> I do wonder if we're talking about the same thing
[02:46:46] <b0nn> oh, hrm, I just noted that you're talking about select, not switch
[02:47:07] *** Joins: normen (~normen@p200300d7173dc9007874998c750167eb.dip0.t-ipconnect.de)
[02:47:19] <oliv3> yeah select
[02:49:49] <oliv3> what i don't see in select is to exit after a timeout
[02:51:21] <bpalmer> select  { case <-ch1: ... case <-ch2: ... case <-time.After(10*time.Second): ... }
[02:51:35] <oliv3> oh, ok, thanks
[02:51:57] <oliv3> cool
[02:52:28] <b0nn> https://play.golang.org/p/-CRvONvFHAS
[02:53:23] <oliv3> can't test now, will take a look later
[02:57:33] <b0nn> FTR my example is from https://www.oreilly.com/library/view/concurrency-in-go/9781491941294/
[03:00:24] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Quit: I'm out!)
[03:00:24] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[03:01:41] *** Joins: tebruno99 (~tebruno99@user/tebruno99)
[03:01:47] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Client Quit)
[03:01:50] *** Joins: fikran (~fikran@user/fikran)
[03:02:19] *** Joins: tebruno99 (~tebruno99@user/tebruno99)
[03:02:30] *** Joins: jinie (~jimmy@188.114.173.37)
[03:15:22] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:17:13] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[03:18:38] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[03:21:48] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 258 seconds)
[03:29:14] *** Quits: normen (~normen@p200300d7173dc9007874998c750167eb.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:29:42] <dostoyevsky2> Is there an easy way to embed a golang string in a binary file like: just passing &mystring to a Write() function?
[03:30:58] <albertito> dostoyevsky2: you mean doing something like Write([]byte("hello\n")) ?
[03:32:00] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:32:29] *** Joins: jsrnop1 (~mark@user/jsrnop)
[03:34:22] <fizzie> If you are specifically writing to a file rather than just generally to an io.Writer, then *os.File also does implement the io.StringWriter interface (meaning, provides a WriteString method), which could arguably look a little neater.
[03:37:00] <dostoyevsky2> I guess I started thinking from C, so the first step would be to just write the char* ... but then I realized that go has already serialization builtin... might just use json instead of rolling my own binary format
[03:38:33] <dostoyevsky2> I am writing a self-extracting archive in go... so I create a go binary and append data to be extracted at the end... first try is to just append a json
[03:38:38] <lazyreader> gob, json, xml, all three are built-in serializers
[03:39:03] <lazyreader> /go:embed?
[03:39:31] <lazyreader> unless I misunderstand your purpose here
[03:40:49] <dostoyevsky2> with /go:embed I need to compile a new go binary for each archive, right?  I want to: cat gobinary data > archive
[03:42:54] <dostoyevsky2> the problem is to know where the data starts, so I patch the gobinary after compilation and write the size into a placeholder variable
[03:46:51] <lazyreader> ah
[03:48:23] <A_Dragon> wait what?
[03:48:42] <A_Dragon> dostoyevsky2: you want to embed a file that can change?
[03:48:46] <A_Dragon> oh you want to patch it
[03:49:07] <A_Dragon> thats... generally painful
[03:52:18] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:52:25] <A_Dragon> you could maybe ask the linker how big the final binary is and store that size in a uint64 somewhere?
[03:52:33] <A_Dragon> then just append to the binary?
[03:54:26] <dostoyevsky2> I just do `s := "0000REPLACEME00000"' and do a search and replace in the binary after compilation.  So the program knows where the payload starts...  and it works for any kind of payload, as long as it's in the correct serializer format
[03:55:23] <A_Dragon> yeah uh. rather just use the linker to set the string, maybe.
[03:55:43] <A_Dragon> why dont you want to recompile per archive?
[03:57:26] *** Quits: bobwal (~rob@user/bobwal) (Ping timeout: 256 seconds)
[03:58:34] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[03:58:58] <dostoyevsky2> so I can do: `curl <url> | exec -`  the webserver could just append whatever blob is necessary for the requester
[03:59:56] <dostoyevsky2> I guess I am writing a botnet :)
[04:00:34] <A_Dragon> I... actually am not sure if curl | exec - would work
[04:00:47] <A_Dragon> because pipeline buffering
[04:00:50] <dostoyevsky2> No, it's a bit more complicated that that
[04:01:09] <A_Dragon> now.... exec <(curl ...
[04:01:11] <A_Dragon> )
[04:01:13] <A_Dragon> that might work
[04:01:24] <A_Dragon> depends on how fast exec copies and how small the binary is
[04:02:38] <KirkMcDonald> <( is still a pipe.
[04:02:53] <A_Dragon> yes but with different semantics
[04:03:05] <A_Dragon> it replaces the arg with a path to a named pipe which might add enough delay
[04:03:09] <A_Dragon> (or so I think)
[04:03:40] *** Quits: toretto (~ryan@ca1-1.azirevpn.net) (Changing host)
[04:03:40] *** Joins: toretto (~ryan@user/toretto)
[04:03:47] <KirkMcDonald> As I recall, it isn't really a named pipe, it's a path to the pseudo-file in /dev for the specific numbered fd
[04:03:54] <A_Dragon> yeah
[04:04:15] <A_Dragon> ╙─╴% echo <(echo "a")
[04:04:18] <A_Dragon> oops
[04:04:28] <A_Dragon> /proc/self/fd/11
[04:04:33] <dostoyevsky2> I don't think you can exec without a file having an executable flag, so one needs to write it to a file first and +x
[04:04:42] <KirkMcDonald> In /proc, sure.
[04:05:23] <A_Dragon> mmm links are reasonably magic
[04:05:24] <A_Dragon> lets try
[04:05:58] <A_Dragon> that ...worked
[04:06:05] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:06:30] <A_Dragon> well the exec ran, at the very least
[04:06:53] <A_Dragon> oh no it did fail
[04:06:55] <A_Dragon> good
[04:07:03] <A_Dragon> execve("/proc/self/fd/11", ["/proc/self/fd/11"], 0x7ffc31e7bfb0 /* 112 vars */) = -1 EACCES (Permission denied)
[04:07:05] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[04:07:06] <A_Dragon> as said
[04:07:55] <Tv_> sure you can, tell ld.so to run it...
[04:08:10] <A_Dragon> ...this is a point
[04:08:38] <Tv_> http://i.imgur.com/YGc8x0Z.jpg
[04:08:48] <fizzie> ld.so won't load from a pipe.
[04:08:50] <fizzie> "/dev/fd/0: error while loading shared libraries: /dev/fd/0: failed to map segment from shared object"
[04:09:01] <fizzie> It wants to mmap things.
[04:09:09] <Tv_> fizzie: you can't exec a pipe!
[04:09:20] <A_Dragon> that was the start of all of this Tv_ :P
[04:09:33] <Tv_> ah. executables are by their very nature mmapped
[04:09:47] <Tv_> i mean, the file becomes visible in memory and all...
[04:09:56] <Tv_> the cpu ain't gonna read(2) the next instruction ;)
[04:10:07] <Tv_> you might be able to exec a memfd?
[04:10:25] <pinky> can you send the output of a function to a channel only if the output is not nil?
[04:10:33] <pinky> in a slect
[04:10:38] <pinky> select
[04:10:41] <A_Dragon> yes, check if the data is nil and if it is break out of the select
[04:10:42] <Tv_> pinky: that's not select's job
[04:10:43] <fizzie> It's not like ld.so *couldn't* just build a set of anonymous mappings and copy the data in there. But it's not exactly a feature people need.
[04:10:46] <A_Dragon> but also ^
[04:10:57] <A_Dragon> fizzie: well, we need it!
[04:10:59] <Tv_> fizzie: "anonymous mapping" backed by what?
[04:11:02] <A_Dragon> brb reimplementing ld in go
[04:11:07] <A_Dragon> oh yeah thats the other issue
[04:11:14] <Tv_> memfd might work
[04:11:15] <A_Dragon> pipes arent memory
[04:11:18] <A_Dragon> they're magic
[04:11:24] * A_Dragon man memfd
[04:11:28] <Tv_> memfd_create
[04:11:36] <fizzie> You don't need code to be backed by a file. You can use mmap to create MAP_ANON mappings that are executable.
[04:11:40] <pinky> just seems ugly since i want the send to be non blocking and i already have one nice select statement that i need to return to my function if the context is done and break out of a scanner loop
[04:11:43] <fizzie> JIT compilers don't put the code they create into files.
[04:11:49] <pinky> so i guess two select statements
[04:11:53] <A_Dragon> fizzie: you cannot MMAP a *pipe*
[04:12:00] <A_Dragon> because theres nothing there to map
[04:12:07] <A_Dragon> memfd.... however
[04:12:07] <fizzie> A_Dragon: Yes, and I'm saying, you don't *need* to mmap a pipe.
[04:12:07] <pinky> a simple way to send to a channel non blocking would be nice, go used to have one right and it was depricated?
[04:12:09] <A_Dragon> thats interesting
[04:12:21] <Tv_> fizzie: hrmm. that might work too, passed to ld.so via /dev/fd
[04:12:23] <dostoyevsky2> fizzie: jit compilers don't call exec on their jitted code, no?
[04:12:30] <Tv_> /proc/self/fd i mean
[04:12:36] <A_Dragon> pinky: select{ case theChan <-:; default: }
[04:12:37] <Tv_> /dev/fd is a bashism
[04:12:46] <pinky> was it just: ch, _ <- fn()
[04:12:49] <fizzie> dostoyevsky2: No, but that's not what I was claiming.
[04:12:51] <pinky> where _ would be if it sent or not?
[04:12:59] <A_Dragon> pinky: no, there is no magic for that
[04:13:02] <pinky> ah ok
[04:13:04] <pinky> thx :(
[04:13:05] <Tv_> dostoyevsky2: ld.so doesn't call exec on what it has loaded
[04:13:35] <A_Dragon> I guess I should have made a makeplay command
[04:14:03] <A_Dragon> dostoyevsky2: jits (depending on what kind) dont need to do what exec does
[04:14:11] <A_Dragon> they just need to hotswap code
[04:14:21] <A_Dragon> (which does mean rwx heap or stack or something but meh lets not)
[04:15:21] <A_Dragon> oh Tv_
[04:15:26] <A_Dragon> someone did it: https://gist.github.com/0xef967c36/4b7f68ec09cd461f0dfba7c909e089b2
[04:16:01] <dostoyevsky2> %cat /bin/ls |  /lib/ld-2.33.so - # -: error while loading shared libraries: -: cannot open shared object file
[04:16:52] <fizzie> That's just trying to open `-`. But we're not claiming the standard dynamic loader can do it, just that a hypothetical one *could*.
[04:17:18] <fizzie> The memfd "solution" sounds a lot more practical though.
[04:17:26] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:18:06] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Quit: Client closed)
[04:18:12] <A_Dragon> yeah
[04:18:26] <A_Dragon> also ld tried, got an illegal seek, apparently
[04:18:30] *** _-- is now known as lll
[04:18:38] <A_Dragon> pread64(3, 0x7fffe3680290, 64, 824)     = -1 ESPIPE (Illegal seek)
[04:18:44] <A_Dragon> strace /lib64/ld-2.33.so <(cat /bin/bash)
[04:20:47] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[04:20:55] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[04:20:55] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[04:21:01] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[04:24:00] *** lll is now known as _|_
[04:25:20] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1008)
[04:27:25] <Tv_> dostoyevsky2: there's no magic that makes - be a pipe; ld.so is saying no such file exists
[04:27:59] <Tv_> or did it actually open the file? that'd be a bit weird
[04:28:05] <Tv_> ld.so supporting the - convention
[04:28:17] <Tv_> i guess `ld.so - </path/to/executable`?
[04:28:35] <Tv_> anyway, memfds are neat and can replace almost all uses of tempfiles
[04:28:52] <A_Dragon> does go have a frontend for them?
[04:29:17] <Tv_> https://pkg.go.dev/golang.org/x/sys/unix#MemfdCreate
[04:29:44] <A_Dragon> ah in /x/sys, neat
[04:30:08] <oliv3> [unrelated] debian/bullseye finally released
[04:31:03] <Vigdis> does it ship a recent go?
[04:31:26] <oliv3> that's debian/stable ;)
[04:31:46] <oliv3> so short answer is "probably not"
[04:31:58] <A_Dragon> it ships reasonably recent python
[04:32:00] <A_Dragon> so
[04:32:09] *** Quits: lauraaah (uid156848@id-156848.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[04:33:54] *** Quits: _|_ (~ding@2001:19f0:5:14c2:5400:2ff:fee0:a42c) (Quit: oopsy)
[04:34:02] <oliv3> 1.15
[04:34:08] *** Joins: _\_ (~flick@2001:19f0:5:14c2:5400:2ff:fee0:a42c)
[04:34:24] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1008) (Quit: ZNC 1.8.2 - https://znc.in)
[04:35:38] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1008.inf6.spectrum.com)
[04:38:28] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Ping timeout: 258 seconds)
[04:39:37] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[04:40:09] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 248 seconds)
[04:44:33] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:14] <pinky> is there a copy involved in calling a function with a slice where you give a portion of the values like: x := fn(z[1:])
[04:46:58] <pinky> copy or anything else less desirable for performance
[04:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:46] <A_Dragon> slices reference the original data
[04:48:31] <A_Dragon> but passing slices in general to functions copies about ... what? 8 bytes?
[04:48:31] <pinky> ah ok thats what i was thinking
[04:48:35] <pinky> thx :)
[04:49:12] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1008.inf6.spectrum.com) (Ping timeout: 258 seconds)
[04:49:18] <Tv_> A_Dragon: ptr,len,cap = 8+8+8
[04:50:34] *** Joins: burningserenity (~burningse@143.244.34.145)
[04:51:48] <b0nn> dostoyevsky2: https://github.com/itchyny/bed might have some hints for your hex editor
[04:51:49] <pinky> is it inefficent to us len() in a for loop conditional? or would it get optimized somehow?
[04:51:57] <pinky> should i assign it to a var first if it isn't going to change
[04:52:07] <b0nn> pinky it's just a lookup
[04:52:15] <pinky> if it is a slice i guess it doesn't know if it is going to change length?
[04:52:29] <b0nn> as for change - if you are changing the len inside the for loop, ew
[04:52:30] <pinky> but should it need to lookup each time?
[04:52:34] <pinky> i'm not
[04:53:02] <b0nn> the only other way for that len to change then is for another goroutine to be mutating it at the same time as your for loop
[04:53:46] <foobaz> it's not inefficient to call len(), it's fine to do it in a for loop
[04:54:16] <pinky> but less efficent than just assigning to a var before you declare the for loop?
[04:54:37] <foobaz> i'm not sure but i don't think so
[04:54:37] <A_Dragon> not really
[04:54:39] <pinky> the 'condition' is the right word
[04:54:47] <pinky> using len as the condition in a for loop
[04:54:52] <pinky> vs just calling len first and assigning it to avar
[04:54:55] <A_Dragon> len asks the slice struct how big it is
[04:54:56] <foobaz> i don't think it's even a function call
[04:54:57] <pinky> then using the var in the conditional
[04:55:06] <b0nn> pinky: this is what a len is https://github.com/golang/go/blob/master/src/runtime/slice.go#L24
[04:55:25] <pinky> ah ok but its still overhead to call a function?
[04:55:37] <b0nn> it's... not a function
[04:55:39] <pinky> but its also overhead to assign something to an int
[04:55:55] <pinky> hmm ok
[04:56:10] <b0nn> it's an int on the slice structure
[04:56:31] <b0nn> oh, I've linked to line 24 when I meant 17
[04:56:35] <pinky> but it is accessed via a function right?
[04:56:41] <b0nn> no
[04:56:47] <foobaz> more like a macro
[04:56:47] <Tv_> pinky: len() is not a function, it's a compiler built-in
[04:56:49] <pinky> what kind of construct is len() ?
[04:56:51] <pinky> ah ok
[04:57:02] <b0nn> when you ask a struct for the value of a field, you are not executing a function per se
[04:57:02] <A_Dragon>         MOVQ    "".i+16(SP), AX
[04:57:02] <A_Dragon>         MOVQ    AX, "".~r1+32(SP)
[04:57:08] <A_Dragon> which appears to compile to that.
[04:57:14] <A_Dragon> where i is a []string
[04:57:26] <foobaz> that's definitely not a function call
[04:57:29] <Tv_> it's a struct field access
[04:57:30] <pinky> interesting
[04:57:32] <pinky> nice
[04:57:37] <pinky> so actually more efficent it seems
[04:57:43] <Tv_> reflect.SliceHeader
[04:57:45] <pinky> because otherwise i allocate memory that didn't need it
[04:57:49] <Tv_> that's what's going on inside
[04:58:02] <b0nn> pinky: yes
[04:58:07] <pinky> thx :)
[04:58:12] <pinky> plus its cleaner
[04:58:38] <b0nn> assigning the value to another var is just doublingg the amount of memory that that value is uusing (assuming the compiler doesn't inline it somehow)
[04:58:49] <pinky> :nod:
[05:00:25] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[05:02:04] *** Joins: jinie (~jimmy@188.114.173.37)
[05:04:36] *** Joins: yoonkn (~user@175.197.208.79)
[05:09:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[05:11:08] *** Joins: fikran (~fikran@user/fikran)
[05:11:25] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[05:17:49] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:19:40] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 268 seconds)
[05:21:00] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[05:21:29] <pinky> I wonder about the efficency of:
[05:21:30] <pinky> func parseUint8(s string) (uint8, error) {
[05:21:30] <pinky> 	v, err := strconv.ParseUint(s, 10, 8)
[05:21:30] <pinky> 	return uint8(v), err
[05:21:30] <pinky> }
[05:21:56] <pinky> verses just dealing with extra memory of snding Uint64 through my channel
[05:22:03] <b0nn> note the conversion
[05:22:11] <pinky> yeah more cpu less memory?
[05:22:17] <pinky> but it would use memory for a second anyway
[05:23:18] *** Joins: gggp_ (~gggp@114.243.61.163)
[05:23:23] <b0nn> I mean, uint8 restricts you to 256 unique values
[05:24:02] <pinky> yeah but thats wayyyyyyyy more than i need
[05:24:14] <pinky> i need like 5
[05:24:32] <b0nn> Personally, it wouldn't be the point of focus for me
[05:25:07] <b0nn> If you're concerned about performance, then the right way to proceed is to run a profiler, and deduce from that what needs to be optimised
[05:25:15] <A_Dragon> uint8(uint64) will likely compile straight to uint64 << 56
[05:25:17] <pinky> makes snse
[05:25:28] <pinky> hmm
[05:25:47] <pinky> ok i'll get rid of it and just us strconf.ParseUint() instead of this wrapper
[05:25:55] <pinky> and change my struct to uint64
[05:26:10] <A_Dragon> if you want to use an extra few bytes :P
[05:26:22] <pinky> what about float32 i wonder
[05:26:24] <pinky> same thing
[05:26:31] <A_Dragon> nononono
[05:26:36] <A_Dragon> floats cannot be bit shifted
[05:26:46] <b0nn> heh, if you're at that point, then you're also making sure that the fields are ordered such that they align properly
[05:26:56] <A_Dragon> ^ theres a linter for that
[05:26:59] <b0nn> yes
[05:27:01] <pinky> ooh really?
[05:27:17] <pinky> i've heard about that in bill kennedy videos but i don't recall the details
[05:27:22] <pinky> not the linter thoug
[05:27:25] <pinky> thats interesting
[05:27:39] <A_Dragon> simple, structs need to be page aligned
[05:27:43] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[05:27:50] <pinky> so when you say floats can't be bit shifted
[05:27:51] <A_Dragon> so if you misalign your struct you leave empty spaces
[05:28:03] <A_Dragon> floats in memory are not the same as normal numbers
[05:28:07] <pinky> does that matter for my use case i'm parsing floats like 12.345
[05:28:13] <foobaz> pinky: the command for that is golangci-lint run --enable maligned
[05:28:16] <pinky> so i assumed i should use float32
[05:28:23] <A_Dragon> they're stored in memory basically like scientific notation
[05:28:27] <pinky> foobaz: nice thx
[05:28:29] <A_Dragon> if you need a float, use a float
[05:28:41] <pinky> but float64 or an extra conversion to make it float32?
[05:28:43] <A_Dragon> just understand that someFloat << x wont work :P I thought it was related to my other comment
[05:28:52] <A_Dragon> depends on if you care about memory
[05:28:59] <pinky> becaus strconv only parses to float64
[05:29:11] <pinky> so its memory at the expense of cpu i guess
[05:29:20] <pinky> or does the cpu get optimizsed away?
[05:29:23] <pinky> thats what i'm wondering
[05:29:37] <A_Dragon> definitely not for a float conversion
[05:29:39] <A_Dragon> well, *
[05:29:49] <A_Dragon> but it will always need to convert
[05:29:53] <A_Dragon> but its fine converting is fast
[05:29:55] <foobaz> it is somewhat inefficient to parse to float64 and then convert to float32
[05:30:12] <pinky> foobaz: and theres no way to pars right to float32?
[05:30:17] <pinky> not with strconv anyway
[05:30:21] <pinky> i guess i can look at its code and do it myself
[05:30:23] <foobaz> right, not with strconv
[05:30:51] <A_Dragon> are you going to be making 10k of these structs a second?
[05:31:17] <A_Dragon> if no, all of this is premature optimization and should be ignored
[05:31:34] <pinky> wow theres a lot to parsing a float
[05:31:38] <foobaz> yea, if you optimize this aggressively you won't make progress very quickly
[05:31:49] <A_Dragon> start, with code that works
[05:31:50] <pinky> no probably making 2 every 200ms
[05:31:51] <A_Dragon> optimize second
[05:31:57] <pinky> nod
[05:31:57] <A_Dragon> yeah no dont worry about it
[05:32:07] <A_Dragon> dont worry about memory usage or struct alignment eiter
[05:32:19] <foobaz> development is so time consuming it's smart to optimize for programmer time
[05:32:27] <b0nn> um.. am I missing something, only ParseFloat returns a float https://pkg.go.dev/strconv
[05:32:33] <pinky> yeah, part of this is just learning purposes
[05:32:54] <A_Dragon> b0nn: yes, 64bit float
[05:32:56] <A_Dragon> they wanted a 32
[05:33:12] <A_Dragon> pinky: yeah dont try and make code as fast as possible
[05:33:13] <b0nn> But only when parsing a float
[05:33:15] <A_Dragon> that way lies madness
[05:33:20] <pinky> yeah
[05:33:26] <foobaz> https://wiki.c2.com/?RulesOfOptimization
[05:33:27] *** Quits: gebn (~george@user/gebn) (Ping timeout: 245 seconds)
[05:33:29] <A_Dragon> b0nn: huh?
[05:33:47] <b0nn> A_Dragon: which other parse options return floats?
[05:33:54] <A_Dragon> nnnnone?
[05:33:59] <pinky> none thats what sucks
[05:33:59] <b0nn> exxxaccctttlllyyy
[05:34:34] <A_Dragon> Im not getting your point b0nn
[05:34:40] <b0nn> No, you're not
[05:34:41] <A_Dragon> pinky: dont worry about it
[05:35:25] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:35:31] *** Joins: gebn (~george@user/gebn)
[05:35:40] <A_Dragon> b0nn: could you clarify for me?
[05:35:48] <b0nn> Sure.
[05:35:54] <A_Dragon> or is your point "Moot argument, within the stdlib you dont have a choice" ?
[05:36:21] <b0nn> Actually, no. You're not in a position to understand.
[05:36:53] <A_Dragon> ...Try me.
[05:37:08] <b0nn> I did, you failed, and now I've had enough
[05:38:23] <A_Dragon> Alright.
[05:38:36] <pinky> i guess i might as well still say bitsize=8 when i call it
[05:38:42] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[05:38:49] <pinky> rather than bitsize=64
[05:38:55] <pinky> it must ask for some reason? :)
[05:39:03] <pinky> but too lazy to go back to the source .. although it would be interesting
[05:39:14] <A_Dragon> I would assume it limits the work done to store it into larger than you want
[05:39:24] <b0nn> do you know in advance that the value in the string is going to fit into a float smaller than float64
[05:39:29] <A_Dragon> conversion still needs to happen but you dont spend extra time
[05:39:33] <pinky> i guess gives you an error if you parse something bigger than what you say
[05:39:47] <A_Dragon> it may not
[05:45:11] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[05:45:40] *** Joins: c10l (~c10l@89.34.167.207)
[05:46:23] *** Joins: normen (~normen@p200300d7173dc9007874998c750167eb.dip0.t-ipconnect.de)
[05:49:23] <pinky> ParseFloat converts the string s to a floating-point number with the precision specified by bitSize: 32 for float32, or 64 for float64. When bitSize=32, the result still has type float64, but it will be convertible to float32 without changing its value.
[05:50:09] *** Quits: burningserenity (~burningse@143.244.34.145) (Ping timeout: 258 seconds)
[05:50:30] <b0nn> That means that when it converted the value from a string, it ignored the last 32 bits of data
[05:50:41] *** Quits: V (~v@anomalous.eu) (Remote host closed the connection)
[05:54:27] <pinky> i guess it means it'd be faster to conver it
[05:54:40] <b0nn> Not really
[05:54:44] <pinky> hm
[05:55:11] *** Joins: chovy_ (~chovy@64.27.14.223)
[05:55:57] *** Quits: chovy_ (~chovy@64.27.14.223) (Client Quit)
[05:56:21] *** Joins: chovy_ (~chovy@64.27.14.223)
[06:02:29] <b0nn> You might find this interesting https://github.com/golang/go/issues/15672
[06:03:54] *** Joins: V (~v@anomalous.eu)
[06:04:42] <pinky> ah thanks
[06:06:00] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[06:06:16] <pinky> i wonder when its better to use arrays rather than slices, encoding/hex only can handle slices
[06:06:25] <pinky> but i guess i am in the weeds :(
[06:06:29] *** Joins: darkapex (~darkapex@user/darkapex)
[06:06:38] * pinky changes from [8]byte to []byte :(
[06:06:46] <pinky> i guess i'll allocate it with make
[06:06:59] <fizzie> If you have an array, you can always make a slice out of it.
[06:07:27] <pinky> i have a slice and i'd want to make an array
[06:07:35] <pinky> but i guess that doesn't make sense to do
[06:07:50] <pinky> or else i implement my own parsing from hex text to array
[06:07:53] <fizzie> It sounded the other way around.
[06:07:55] <b0nn> The difference between a slice and an array is when you extend the array/slice, you only need to update the slice's metadata, arrays require everyone holding a reference to the original array to be updated
[06:07:57] <pinky> oh wel eventually i'll probably us msgpack
[06:08:12] <pinky> ah hmm
[06:08:13] <fizzie> If you *have* an array and need a slice for "encoding/hex" purposes, just slice the array.
[06:08:21] <b0nn> I use the term reference their loosely
[06:08:22] <pinky> other way around
[06:08:32] <b0nn> there*
[06:11:34] <b0nn> hmm, there's still more complexity to the extension of a slice hidden away (sub slices aren't updated, which means their metadata isn't adjusted when one instance is changed
[06:12:55] <fizzie> pinky: Just saying, your comment "encoding/hex only can handle slices" is kind of weird, because it "handles" arrays just fine if you slice them, as in https://play.golang.org/p/2iyOj3DrRy8
[06:18:42] <pinky> oh really? but would that make a copy or be otherwise inefficent?
[06:19:30] <fizzie> No.
[06:19:35] <fizzie> There's no copies involved.
[06:20:13] <fizzie> arr[:] just makes up a slice -- that is, a (pointer, len, cap) triple -- that has the pointer pointing at the array, and len and cap equal to the array length.
[06:20:48] <pinky> oh, nice
[06:21:02] *** Quits: normen (~normen@p200300d7173dc9007874998c750167eb.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[06:21:52] *** Quits: gggp_ (~gggp@114.243.61.163) (Remote host closed the connection)
[06:22:05] *** Quits: gebn (~george@user/gebn) (Quit: gebn)
[06:22:17] *** Joins: gggp_ (~gggp@114.243.61.163)
[06:27:30] *** Quits: revolve (~u0_a227@82-132-238-168.dab.02.net) (Ping timeout: 268 seconds)
[06:30:21] *** Joins: revolve (~u0_a227@82-132-225-233.dab.02.net)
[06:30:47] <Torr> Anybody here using gopls?
[06:31:17] <b0nn> just ask your question Torr
[06:32:48] <Torr> Is there a way to force renaming of functions even if it breaks interfaces?
[06:34:49] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:36:11] <b0nn> um, I've never had any trouble renaming functions
[06:36:31] <b0nn> I presume, though, you mean with a rename function (which I have never used)
[06:36:55] *** Quits: Kaivo (~Kaivo@user/kaivo) (Ping timeout: 258 seconds)
[06:44:16] <fizzie> Huh, I didn't know that's a feature it has.
[06:45:27] <b0nn> I recall there being a :Gorename, which I think gopls handles now, but I never used it, and heard some complaints about it in the past
[06:45:36] <b0nn> or was it :GoRename
[06:45:49] <fizzie> Can confirm that in VS Code (I've been giving it a try), trying to do "Rename symbol" on a method produces an "renaming this method "X" to "Y" would make ... no longer assignable to interface ... (rename ... if you inted to change both types)" error message.
[06:46:02] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[06:46:28] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1008)
[06:47:09] <Torr> fizzie: Exactly that error.
[06:47:54] <b0nn> Seems like a warning rather than an error, unless the type is being used as an instance of that ionterface somewhere
[06:50:07] <Torr> b0nn: It's an error.
[06:50:56] <b0nn> hrm, there's no tools in vim that prevent me from shooting at my feet like that
[06:51:21] <b0nn> well, none that I cannot disable :)
[06:51:49] <Torr> I'm on Neovim, so it shouldn't be much different.
[06:52:07] <Torr> This is from gopls anyways.
[06:53:14] <Torr> b0nn: I know that feeling.
[07:00:34] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[07:00:36] <Torr> Leaving here, bye all.
[07:01:01] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[07:02:09] *** Joins: jinie (~jimmy@188.114.173.37)
[07:11:48] *** Quits: mei (~mei@user/mei) (Ping timeout: 258 seconds)
[07:13:51] *** Quits: chovy_ (~chovy@64.27.14.223) (Quit: leaving)
[07:18:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[07:20:27] *** Joins: fikran (~fikran@user/fikran)
[07:24:57] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 248 seconds)
[07:25:59] *** Quits: thimslugga (~thimslugg@70.18.231.28) (Ping timeout: 258 seconds)
[07:36:34] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Ping timeout: 268 seconds)
[07:40:43] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[07:42:39] *** Joins: Kaivo (~Kaivo@user/kaivo)
[07:48:18] *** Quits: gggp_ (~gggp@114.243.61.163) (Ping timeout: 268 seconds)
[07:50:59] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1008) (Quit: ZNC 1.8.2 - https://znc.in)
[07:57:45] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[07:59:40] *** Joins: darkapex (~darkapex@user/darkapex)
[08:09:17] *** Quits: buffet (~buffet@buffet.sh) (Ping timeout: 252 seconds)
[08:14:05] *** Joins: oxum (~oxum@122.172.205.112)
[08:15:12] *** mva_ is now known as mva[covid19]
[08:18:47] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[08:19:35] *** Quits: zwr (~zwr@2804:d45:b966:fb00:b0b3:7f72:5851:b2a8) (Remote host closed the connection)
[08:20:25] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 248 seconds)
[08:21:03] *** Joins: oxum (~oxum@122.172.205.112)
[08:23:31] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[08:25:12] *** Joins: buffet (~buffet@buffet.sh)
[08:33:25] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[08:38:46] *** Joins: oxum (~oxum@122.172.205.112)
[08:40:14] *** Joins: frost (~frost@59.71.240.119)
[08:44:26] *** Joins: codebam (~codebam@user/codebam)
[08:49:10] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 272 seconds)
[08:49:56] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 258 seconds)
[08:50:42] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[08:53:53] *** Joins: oxum (~oxum@122.172.205.112)
[08:59:13] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[09:00:27] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[09:02:12] *** Joins: jinie (~jimmy@188.114.173.37)
[09:03:37] *** Quits: jespada (~jespada@90.254.247.46) (Ping timeout: 248 seconds)
[09:06:17] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (Ping timeout: 248 seconds)
[09:06:18] *** Joins: jespada (~jespada@90.254.247.46)
[09:06:36] *** Quits: nevivurn (~nevivurn@user/nevivurn) (Quit: Goodbye~)
[09:27:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[09:29:46] *** Joins: fikran (~fikran@user/fikran)
[09:37:45] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:47:53] *** Quits: LiftLeft (~LiftLeft@212.102.58.180) (Ping timeout: 248 seconds)
[09:48:48] *** Joins: adlternative (~adl@117.32.216.71)
[09:52:53] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[09:53:09] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[09:53:46] *** Joins: khrbt (~znc@2601:646:8600:2f6:3fa:485d:475e:2130)
[09:53:46] *** Quits: khrbt (~znc@2601:646:8600:2f6:3fa:485d:475e:2130) (Changing host)
[09:53:46] *** Joins: khrbt (~znc@user/khrbt)
[09:57:19] *** Joins: oxum (~oxum@122.172.205.112)
[09:59:03] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[10:06:45] *** Joins: khrbt (~znc@user/khrbt)
[10:06:57] *** Joins: f8l12 (~f8l12@154.3.42.77)
[10:12:06] *** Joins: nevivurn (~nevivurn@user/nevivurn)
[10:15:47] *** Joins: dcompoze (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net)
[10:16:40] *** Quits: adlternative (~adl@117.32.216.71) (Quit: Konversation terminated!)
[10:16:58] *** Joins: mei (~mei@user/mei)
[10:21:36] *** Quits: darkapex (~darkapex@user/darkapex) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[10:21:56] *** Joins: darkapex (~darkapex@user/darkapex)
[10:23:04] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[10:27:35] *** Joins: lompik (~lompik@user/lompik)
[10:28:57] *** Joins: independent56 (~independe@185.50.0.80)
[10:36:48] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Quit: The Lounge - https://thelounge.chat)
[10:48:03] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[10:50:50] *** Quits: _qilx (~quassel@62.201.21.8) (Ping timeout: 268 seconds)
[10:52:40] *** Parts: raktajino (~raktajino@callisto.raktajino.club) (WeeChat 3.2)
[11:00:27] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[11:02:16] *** Joins: jinie (~jimmy@188.114.173.37)
[11:08:21] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[11:09:06] *** Joins: darkapex (~darkapex@user/darkapex)
[11:12:21] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:14:12] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[11:15:08] *** Quits: independent56 (~independe@185.50.0.80) (Remote host closed the connection)
[11:15:31] *** Joins: independent56 (~independe@185.50.0.80)
[11:19:12] *** Joins: qilx (~quassel@dynamic-109-81-210-6.ipv4.broadband.iol.cz)
[11:20:58] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[11:22:57] *** Quits: lompik (~lompik@user/lompik) (Quit: WeeChat 3.2)
[11:25:40] *** Joins: mrig (~mrig@user/mrig)
[11:27:22] *** Joins: lompik (~lompik@user/lompik)
[11:28:47] *** Joins: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[11:37:00] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[11:37:31] *** Quits: dcompoze (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net) (Quit: WeeChat 3.2)
[11:38:06] *** Joins: gggp (~gggp@114.245.109.49)
[11:39:04] *** Joins: fikran (~fikran@user/fikran)
[11:41:04] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[11:47:55] *** Joins: dcompoze (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net)
[11:48:10] *** Quits: independent56 (~independe@185.50.0.80) (Ping timeout: 268 seconds)
[11:48:20] *** Quits: dcompoze (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net) (Client Quit)
[11:50:48] *** Joins: dcompoze (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net)
[11:54:06] *** Joins: independent56 (~independe@185.50.0.80)
[11:54:54] *** Joins: oxum (~oxum@122.172.205.112)
[11:55:22] *** Quits: dcompoze (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net) (Client Quit)
[11:55:35] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[11:55:56] *** Joins: usr123 (~usr123@124.253.5.172)
[11:56:00] <usr123> Hello.  I've been reading Go programming blueprints. I'm on Chapter 5 "Building Distributed systems..". Here the author mentions "and given the design of our solution, we are going to need to access the net.Conn object in order to close it from outside of the goroutine in which requests occur. We can achieve this by providing our own dial method to an http.Transport object that we will create." Although I couldn't find any reasoning as to why are we
[11:56:00] <usr123> trying to extract the connection. Also if it was just about closing the connection from outside, couldn't we just pass the connection to another goroutine and call conn.Close() from there? I don't see why we need to provide our own dial method.
[11:56:02] <usr123> 12:55
[11:56:04] <usr123> Also are there any usecases that someone can think of where I'd want to use this approach? Having my own dial method and creating my own transport?
[11:56:21] *** Joins: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f)
[11:56:44] *** Joins: dcompoze (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net)
[11:57:10] *** Joins: oxum (~oxum@122.172.205.112)
[12:02:20] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 272 seconds)
[12:08:40] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:10:46] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[12:14:29] *** Joins: oxum (~oxum@122.172.205.112)
[12:19:35] *** Quits: cim (~cim@205.185.117.110) (Quit: The Lounge - https://thelounge.chat)
[12:19:37] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 268 seconds)
[12:20:04] *** Quits: independent56 (~independe@185.50.0.80) (Ping timeout: 272 seconds)
[12:20:05] *** Joins: cim (~cim@205.185.117.110)
[12:31:22] *** Quits: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f) (Ping timeout: 245 seconds)
[12:31:48] *** Joins: oxum (~oxum@122.172.205.112)
[12:40:45] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[12:41:16] *** Joins: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f)
[12:42:37] *** Joins: chddr (~Thunderbi@91.226.34.131)
[12:44:27] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:46:04] <chddr> Hi, I have a quick question about json in go. As I understand, when I Unmarshal it into a struct (e.g. User { age float64}) , if there's no corresponding value in a json, it'll just assign age a default value, right?
[12:47:39] <chddr> Or it seems to work that way for me anyway. Is there a way to fail unmarshaling if there's no value?
[12:49:08] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 258 seconds)
[12:49:50] <KirkMcDonald> In fact, if the JSON value doesn't have a corresponding value, it doesn't assign *anything* to the other fields: https://play.golang.org/p/kq8ljiW1nqX
[12:50:17] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:51:57] <KirkMcDonald> And no, there's no way to mark a field as mandatory; you'd need to check for that yourself.
[12:52:07] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[12:52:35] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 258 seconds)
[12:53:20] *** Joins: ugjka (~ugjka@ugjka.net)
[12:53:21] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[12:53:58] <chddr> Huh, interesting. Thx!
[12:58:22] *** Quits: revolve (~u0_a227@82-132-225-233.dab.02.net) (Read error: Connection reset by peer)
[13:00:12] *** Joins: revolve (~u0_a227@82.132.185.229)
[13:00:35] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[13:02:20] *** Joins: jinie (~jimmy@188.114.173.37)
[13:04:13] *** Quits: darkapex (~darkapex@user/darkapex) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:04:35] *** Joins: darkapex (~darkapex@user/darkapex)
[13:08:06] *** Joins: normen (~normen@p200300d7173dc9007874998c750167eb.dip0.t-ipconnect.de)
[13:10:07] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 245 seconds)
[13:10:13] <usr123> Well I was just able to import the main package like so: 	main "gdhameeja/counting-votes/cmd/counting-votes" . I have a main.go file inside of cmd/counting-votes with "package main". I thought importing main packages wasn't possible in go. Is this a good practice?
[13:10:29] <j416> usr123: no
[13:11:27] <usr123> j416: Thought so, I have a function in my main package that I need to use in my app package, Maybe the right way to do this would be to factor out the function either into app package or a separate package.
[13:11:42] <usr123> And it would probably cause problems when I import app package in my main file too right?
[13:11:52] <usr123> cyclic dependency error.
[13:12:25] *** Joins: kodah (~kodah@user/kodah)
[13:15:03] <KirkMcDonald> Importing a main package is by definition a cyclic dependency.
[13:15:34] <b0nn> He has something that he calls from his main that is now in the file called by main
[13:15:50] <b0nn> er s/file/package
[13:16:19] <gggp> json-rpc and grpc is the same thing?
[13:17:34] <ikke> no
[13:20:05] *** Quits: keiser0091075852 (~keiser@188.47.15.53.ipv4.supernova.orange.pl) (Quit: The Lounge - https://thelounge.chat)
[13:20:37] *** Quits: usr123 (~usr123@124.253.5.172) (Read error: Connection reset by peer)
[13:21:01] *** Joins: usr123 (~usr123@49.156.67.25)
[13:21:16] *** Joins: keiser0091075852 (~keiser@188.47.15.53.ipv4.supernova.orange.pl)
[13:22:29] *** Quits: pepee (~user@user/pepee) (Ping timeout: 258 seconds)
[13:22:32] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 268 seconds)
[13:23:43] *** Joins: codebam (~codebam@user/codebam)
[13:27:35] *** Joins: independent56 (~independe@185.50.0.80)
[13:29:30] <usr123> I have a db object, I'm dialing to the db in main.go. But I'm going to need it in my app package as well. Do I just pass it around as a parameter? What other options do I have when I need the db in multiple packages?
[13:29:47] <usr123> Isn't having db as a param in every function obscure? Is there a better way?
[13:31:11] <b0nn> You pass it to the package, the package holds a reference  to the db object somewhere - this is the basics of Dependency Injection
[13:32:10] <ikke> Usually you have a struct that contains all relevant data that you need
[13:32:20] *** Quits: Liquid_X (~lx@37.221.104.65) (Ping timeout: 272 seconds)
[13:32:24] <usr123> b0nn: Pass it to the package? How? Do I have a global in the package and have a function which takes the db object from main and set it to global db object in that package?
[13:32:57] <usr123> ikke: Well, right now I don't. I just have a function that was earlier in the main package that needs access to the db.
[13:33:01] <b0nn> The easiest way is what ikke pointed to
[13:33:44] <usr123> b0nn: So have a global struct in the package and the main sets the dialed connection to db onto that struct?
[13:34:01] <b0nn> effectively, yes
[13:34:03] <ikke> Not global
[13:34:10] <b0nn> it's package global
[13:34:19] <usr123> Yes, by global I meant package global
[13:34:22] <usr123> or local
[13:34:23] <usr123> my bad
[13:35:12] <ikke> Try to avoid globals / public package locals as much as possible
[13:35:15] <usr123> package main   db.Dial(); app.StuffINeed{Db: db}            package app   type StuffINeed struct { DB mgo.Session }
[13:35:19] <usr123> something like this?
[13:35:32] <ikke> Yes
[13:35:41] <b0nn> Yes, but don't export StuffINeed
[13:35:48] <gggp> how can i call rust from go
[13:36:27] <ikke> usr123: usually you have a function where you pass the parameters and you return (a reference to) the object
[13:36:41] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 248 seconds)
[13:36:42] <ikke> And you have methods on the struct to do operations
[13:36:44] <usr123> ikke: Yes, I've heard I should avoid globals as much as possible. And it makes sense, encapsulation and all, but I never understood it deeply. Tried reading a few stackoverflow answers on it, but still don't understand why they are discouraged. So I'm hoping to set a few globals and screw up so I really understand why they're bad
[13:37:28] <ikke> usr123: Do you understand what spagheti code is?
[13:37:52] <b0nn> long story short; encapsulation means that outside users cannot screw with your stuff without your express permission
[13:37:59] <usr123> ikke: Maybe not technically, but maybe I can look at some code and maybe differentiate if it's spaghetti code or not.
[13:38:12] <b0nn> and that means you can control if synchronisation is called or not
[13:38:19] <ikke> When everything can access everything, it's hard to follow what is happening when
[13:39:40] <usr123> b0nn: Well yes, but maybe I never worked in an environment where packages were shared among projects or something. All devs worked on the same project, so anyone could actually go and change the code in my package and screw it up anyways. So far I've just seen that encapsulation is really good for thinking about code, like that if something in my application is wrong with twitter api, I look at the twitter package.
[13:40:58] <b0nn> Sure, when you evade encapsulation, then everyone that mutates the state of the data has to know if anyone else is, or (best practice) uses the synchronisation tools to lock access
[13:41:20] <b0nn> hrm evade encapsulation isn't the right term
[13:42:01] <b0nn> encapsulation changes "Hope all my users behave" to, "My users have no choice *but* to behave
[13:42:18] <usr123> b0nn: Yes, I see how having a map shared between two goroutines where both of them write to the same map is complicated, they might overwrite values and stuff, but again, maybe I never really wrote that sort of applications.
[13:42:26] <mrig> usr123: It is also a lot harder to write tests when you are not passing in your dependencies, else your test  would have to use your actual database; Dependency injection, or inversion of control, enable your tests having different dependencies than your actual code.
[13:43:22] <b0nn> usr123: even single threaded applications can have data races
[13:43:35] <b0nn> hrm, actually, can they (me rethinks that statement)
[13:43:55] <usr123> mrig: True. It's easier to have interfaces and just pass mock implementation of the same to my functions.
[13:43:58] <b0nn> yeah scratch that
[13:44:03] *** Joins: siddhant (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f)
[13:44:22] <ikke> Not data races, but you can still have issues with multiple components trying to use the same state
[13:44:28] *** Quits: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f) (Read error: Connection reset by peer)
[13:44:35] <usr123> b0nn: Right. Makes sense.
[13:44:46] <usr123> ikke: ^
[13:45:02] *** Joins: kodah (~kodah@user/kodah)
[13:45:03] <mrig> usr123: an no need for mocks often if you get it right, you can use the proxy design pattern and just send blanks that do what you want.
[13:45:18] <b0nn> A guy at work made a big deal out of me not compiling with -race, and I missed a data race (fair), he has been arguing with me for a week because his arch has a MASSIVE race condition
[13:45:26] <usr123> mrig: I'll check that out.
[13:45:58] *** Quits: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 268 seconds)
[13:46:07] <b0nn> People forget that multiple processes suffer the same problems multi threading suffers from, and it's harder to communicate between them
[13:46:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[13:46:40] <usr123> It's just a lot of these things, I'm yet to see the benefit to. Dependency injection (uber/fx) and not using global. Maybe I'll appreciate this stuff once I run into issues. Even mockito/testify etc.
[13:46:43] <ikke> CAP theorem is unavoidable
[13:47:13] <b0nn> heh, absolutely
[13:47:48] <ikke> usr123: Usually in small systems, it's not a big issue, but once systems grow, you start feeling more and more pain
[13:48:12] <j416> usr123: no need for test frameworks; start with stdlib
[13:48:18] <usr123> ikke: CAP. I once had data corruption stuff in an application with about 90 million users. We would send the data through kafka but it would somehow not get received at the other end. The component that was supposed to receive the data wouldn't get it. So I came across CAP. And I showed it to my employer. I still don't know if that was it.
[13:48:23] *** Joins: fikran (~fikran@user/fikran)
[13:48:28] <j416> usr123: once you start testing, you will see the benefit
[13:48:33] <ikke> usr123: The idea is: the larger the system is, the more you want to compartimentalize things so that you can reason about components in isolation
[13:48:36] <j416> usr123: (of using interfaces)
[13:49:01] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[13:49:50] <usr123> Right. I would appreciate these things more if the projects we start at work would start out as bare bones stdlib stuff and as a monolith and then as we encounter problems we would start using stuff to address that. Maybe then it would be easier to see the use of things like uber/fx etc.
[13:50:11] <usr123> As opposed to when we start a project, first setup zap logger and uber fx and testify and mockito.
[13:50:29] <b0nn> I've never used a DI framework, Go doesn't need them
[13:50:37] <ikke> usr123: it's like a company. When the company is small, you can get away with little structure. But once you get more and more employees, the more chaotic things can become and hard to follow who is doing what why
[13:50:54] <ikke> So you have departments with their responsibilties and workflows between departments
[13:51:28] <f8l12> is zap logger good? i'm confused by the Sync method
[13:51:58] <usr123> ikke: Right, and most projects atleast I have gotten into have been ones which were already setup. So there were already these frameworks in place.
[13:52:50] <usr123> And it gets really funny when you setup your application right from the start to have microservices architecture and zap logger and di framework and testing framework, and then the client shuts the project down after 6 months.
[13:52:59] <j416> usr123: try to build a smaller project with none of that, perhaps. to get a grasp.
[13:53:09] <f8l12> do you have to create a new logger every time you want to log something with zap logger?
[13:53:24] <f8l12> i was looking into it but didn't get it
[13:53:27] <usr123> j416: Yeah, exactly. I'm reading a book and building out projects of my own to do exactly that.
[13:53:39] <j416> usr123: even at work, why not try
[13:54:11] <usr123> j416: PRs don't get accepted unless there's fair bit of jargon frameworks in the code.
[13:54:52] <j416> usr123: PRs? no, make a new service
[13:55:15] <b0nn> usr123: yeah, it's not easy to make change when you're not in charge
[13:55:29] <usr123> ?? I meant pull requests. Code doesn't get accepted unless I've used some jargon.
[13:55:34] <usr123> b0nn: Yeah
[13:56:04] <b0nn> You'll have to do it in your own time, until you get strong enough to make a convincing case to those in charge
[13:56:16] <b0nn> if you do it well enough, they'll claim it as their idea
[13:56:58] <ikke> usr123: aha, cargo-cult driven design
[13:57:13] <j416> usr123: we often work in mobs, together, but just recently one of my colleagues decided to go solo for a while to build a new service from scratch, mostly to learn at a pace suited for them. It seems it's a good way for this person to learn. We get questions all the time and we end up in discussions, and there have been a couple of new ideas that we've decided to start applying to other things as well.
[13:57:55] <j416> b0nn: you should get a new place to work
[13:58:32] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[13:58:44] <usr123> j416: I've often seen that advice (mostly on reddit) and almost every place I end up at working is more or less the same.
[13:59:04] <usr123> j416: Although the way you describe your team culture it sounds good.
[13:59:20] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Quit: Client closed)
[13:59:36] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[13:59:45] <j416> thanks
[14:00:48] <j416> usr123: I'd also recommend pairing or mobbing; great way to learn and skips boring code review
[14:01:19] <ikke> I love pairing, but it requires motivated people to do
[14:01:30] <b0nn> pairing's boring
[14:01:53] <b0nn> you're either 200 miles ahead and waiting for the partner to catch up, or the other way round
[14:02:34] <ikke> pairing is not about going fast
[14:02:53] <b0nn> I don't recall saying it was
[14:04:38] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[14:04:45] <j416> over time, juniors need to grow, otherwise there'll be no seniors left
[14:07:24] <j416> in my experience, from pairing or mobbing almost fulltime for close to 5 years, I find it often causes much less friction and is often faster (faster delivery) compared to if everyone is working on their own, sending PRs to each other for review.
[14:10:47] *** Joins: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[14:11:28] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Quit: Client closed)
[14:11:29] *** Joins: enkeyz1 (~enkeyz@user/enkeyz)
[14:11:49] *** Joins: shka (~herr@109.231.62.239)
[14:13:15] <usr123> Btw, coming from the python ecosystem, I feel that go documentation is more of a reference than a tutorial. Mostly godocs provide what something does, but not when to use it. Are there other websites/books where I kind of get to learn how to use the stdlib/when to use something?
[14:13:42] <usr123> Or the context around a function or a type. So far books and building projects in them have been helping me understand that.
[14:13:50] <enkeyz1> https://gobyexample.com/
[14:13:58] <usr123> enkeyz1: Thanks.
[14:15:33] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 268 seconds)
[14:17:11] <enkeyz1> btw compared to Python docs, Go documentation are far better: it isn't as obfuscated or dry
[14:17:18] <enkeyz1> it was written for humans
[14:18:48] *** Quits: ganehag_ (~mikael@h-85-24-252-203.A192.priv.bahnhof.se) (Remote host closed the connection)
[14:21:53] *** siddhant is now known as me-sudoer-dentin
[14:21:58] *** me-sudoer-dentin is now known as me-sudoer-dentne
[14:22:02] *** enkeyz1 is now known as enkeyz
[14:24:49] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:24:55] *** Joins: popey5 (~popey@ubuntu/member/popey)
[14:27:18] *** Quits: popey (~popey@ubuntu/member/popey) (Ping timeout: 276 seconds)
[14:27:18] *** popey5 is now known as popey
[14:48:32] *** Joins: gggp_ (~gggp@125.33.82.254)
[14:51:20] *** Quits: gggp (~gggp@114.245.109.49) (Ping timeout: 268 seconds)
[15:00:33] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[15:02:23] *** Joins: jinie (~jimmy@188.114.173.37)
[15:03:20] *** Quits: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 252 seconds)
[15:06:39] *** Joins: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[15:10:35] *** Joins: hikhvar796073809 (~thelounge@dynamic-046-114-002-133.46.114.pool.telefonica.de)
[15:11:03] *** Quits: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 268 seconds)
[15:13:09] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[15:13:30] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[15:20:40] *** Quits: usr123 (~usr123@49.156.67.25) (Read error: Connection reset by peer)
[15:21:03] *** Joins: usr123 (~usr123@49.156.67.193)
[15:25:52] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[15:30:15] *** Joins: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[15:38:01] <j416> full disclosure @ PM, fwiw. https://x0.at/X6J9.txt
[15:38:06] <j416> fak wrong channel
[15:38:10] <j416> apologies
[15:38:17] *** Quits: hikhvar796073809 (~thelounge@dynamic-046-114-002-133.46.114.pool.telefonica.de) (Ping timeout: 248 seconds)
[15:38:55] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[15:41:22] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[15:45:57] <kubblai> If you spend too much time thinking about a thing, you'll never get it done. Bruce Lee
[15:46:41] <ikke> kubblai: Sounds all to familiar
[15:53:18] <j416> I heard that it's the thought that counts, though.
[15:53:53] <ikke> Sadly computers do no run on thoughts
[15:55:21] *** Quits: chddr (~Thunderbi@91.226.34.131) (Ping timeout: 248 seconds)
[15:55:22] <j416> didn't think about that
[15:55:32] <j416> (so it doesn't count)
[15:55:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 248 seconds)
[15:57:04] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[15:57:42] *** Joins: fikran (~fikran@user/fikran)
[15:58:16] *** Joins: jinie (~jimmy@188.114.173.37)
[16:01:23] *** Joins: gggp__ (~gggp@114.243.61.163)
[16:01:54] *** Joins: thimslugga (~thimslugg@70.18.231.28)
[16:04:42] *** Quits: gggp_ (~gggp@125.33.82.254) (Ping timeout: 268 seconds)
[16:09:28] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:11:32] *** Quits: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f) (Ping timeout: 258 seconds)
[16:13:49] *** Joins: joshcom (~joshcom@2600:8800:a706:2b00:3ee6:2580:650b:c8c2)
[16:26:00] *** Quits: frost (~frost@59.71.240.119) (Quit: Ping timeout (120 seconds))
[16:39:48] *** Quits: independent56 (~independe@185.50.0.80) (Ping timeout: 272 seconds)
[16:43:00] *** Quits: sshow (~sshow@neo.hackeriet.no) (Quit: reboot)
[16:45:11] *** Joins: independent56 (~independe@185.50.0.80)
[16:46:33] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 248 seconds)
[16:48:11] *** Joins: mrig (~mrig@user/mrig)
[16:56:47] *** Joins: oxum (~oxum@122.172.205.112)
[16:59:29] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[17:00:25] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[17:00:31] *** Joins: oxum (~oxum@122.172.205.112)
[17:01:45] *** Quits: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 258 seconds)
[17:01:53] *** Quits: independent56 (~independe@185.50.0.80) (Remote host closed the connection)
[17:02:15] *** Joins: independent56 (~independe@185.50.0.80)
[17:02:20] *** Joins: jinie (~jimmy@188.114.173.37)
[17:02:36] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[17:04:28] *** Quits: joshcom (~joshcom@2600:8800:a706:2b00:3ee6:2580:650b:c8c2) (Quit: Leaving)
[17:04:54] *** Joins: oxum (~oxum@122.172.205.112)
[17:07:51] <mrig> Does anyone have any pointers on how to formulate go generate code, i've some code that I think would be well suited to this but am not really sure how to approach it.
[17:09:00] <ikke> mrig: Anything specific you are strugling with?
[17:09:32] <ikke> go generate is basically just commands that get executed
[17:09:40] *** Quits: _\_ (~flick@2001:19f0:5:14c2:5400:2ff:fee0:a42c) (Quit: ___)
[17:09:54] <mrig> I am using a bitvector to store information on the availability of specific attributes, I would like to put this information into a literal map, but to fill my bitvector type with its info I need to generate it, it seems that there is no point in doing this every time and that I could save the byte slice once and then use that.
[17:10:37] <mrig> I've and idea as to how go generate works but have not used it to generate code before.
[17:11:07] <mrig> should I be thinking about using the AST package for this, perhaps text templates?
[17:11:11] <ikke> There is nothing specific to generating code, you could use text/templates or something else
[17:11:54] <mrig> right yes, text templates and then simply fill up the byte data by generating that, this way it is only done once.
[17:12:13] <mrig> cool, that is far simpler than I was thinking.
[17:12:33] *** Joins: _\_ (~o@2001:19f0:5:14c2:5400:2ff:fee0:a42c)
[17:18:34] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[17:18:44] *** Quits: usr123 (~usr123@49.156.67.193) (Remote host closed the connection)
[17:20:24] *** Joins: oxum (~oxum@122.172.205.112)
[17:20:47] *** Quits: _\_ (~o@2001:19f0:5:14c2:5400:2ff:fee0:a42c) (Changing host)
[17:20:47] *** Joins: _\_ (~o@user/ding)
[17:21:23] *** Joins: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[17:21:51] *** Joins: neurocyte (~neurocyte@212.232.92.190)
[17:21:51] *** Quits: neurocyte (~neurocyte@212.232.92.190) (Changing host)
[17:21:51] *** Joins: neurocyte (~neurocyte@user/neurocyte)
[17:24:12] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[17:24:34] *** Joins: oxum (~oxum@122.172.205.112)
[17:26:44] *** Joins: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be)
[17:28:05] <j416> or even plain string concatenation
[17:29:34] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[17:30:05] *** Joins: oxum (~oxum@122.172.205.112)
[17:34:36] *** Joins: adlternative (~adl@117.32.216.79)
[17:34:44] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[17:35:13] *** Joins: oxum (~oxum@122.172.205.112)
[17:43:58] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[17:44:17] *** Quits: bluebird (~bluebird@user/bluebird) (Remote host closed the connection)
[17:45:02] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[17:45:21] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[17:47:22] *** Joins: c10l (~c10l@89.34.167.207)
[17:51:33] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[17:57:08] *** Quits: adlternative (~adl@117.32.216.79) (Quit: Konversation terminated!)
[17:59:52] *** Quits: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be) (Quit: mikoto-chan)
[18:01:31] *** Joins: oxum (~oxum@122.172.205.112)
[18:03:45] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:03:58] <enkeyz> any idea why this line "rand.Seed(time.Now().UnixNano())" casing panic sometimes?
[18:04:07] <enkeyz> causing*
[18:05:00] *** Quits: independent56 (~independe@185.50.0.80) (Ping timeout: 258 seconds)
[18:05:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 272 seconds)
[18:05:34] <enkeyz> "panic: invalid argument to Intn" but after I removed the seed, it goes away
[18:06:15] <enkeyz> https://gist.github.com/enkeyz/ef915b2b98dd32b33f641734a9f784f8
[18:06:32] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 258 seconds)
[18:07:01] *** Joins: fikran (~fikran@user/fikran)
[18:07:49] *** Joins: independent56 (~independe@185.50.0.80)
[18:16:09] *** Quits: kochchef (~quassel@80.146.255.46) (Ping timeout: 248 seconds)
[18:16:43] *** Joins: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be)
[18:17:21] <j416> enkeyz: are you sure the panic is not on line 8?
[18:18:54] <j416> enkeyz: I bet max-min is negative.
[18:22:52] <enkeyz> yeah, figured it out, max-min can be zero
[18:23:01] *** Joins: oxum (~oxum@122.172.205.112)
[18:23:05] <enkeyz> it panics if n <= zero
[18:24:13] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[18:25:45] *** Joins: oxum (~oxum@122.172.205.112)
[18:35:40] *** Quits: yelnah (~felix@2001:44b8:309b:14b:6f0:21ff:fe3c:d4d7) (Ping timeout: 258 seconds)
[18:37:36] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[18:37:49] *** Joins: oxum (~oxum@122.172.205.112)
[18:39:54] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[18:44:50] *** Quits: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 256 seconds)
[18:46:51] *** Joins: yelnah (~felix@193-119-70-242.tpgi.com.au)
[18:48:16] *** Joins: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[18:53:04] *** Quits: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 268 seconds)
[18:53:40] *** Quits: gggp__ (~gggp@114.243.61.163) (Ping timeout: 268 seconds)
[18:53:47] *** Quits: thimslugga (~thimslugg@70.18.231.28) (Quit: thimslugga)
[18:54:01] *** Quits: independent56 (~independe@185.50.0.80) (Ping timeout: 248 seconds)
[18:54:07] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:54:37] *** Joins: kochchef (~quassel@80.146.255.46)
[18:55:06] *** Joins: jpw (~jpw@user/jpw)
[18:56:44] *** Joins: oxum (~oxum@122.172.205.112)
[18:57:02] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[19:00:47] *** Quits: jinie (~jimmy@188.114.173.37) (Remote host closed the connection)
[19:01:44] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 258 seconds)
[19:09:41] *** Joins: mambang (~mambang@user/mambang)
[19:10:58] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1)
[19:12:31] *** Joins: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[19:17:12] *** Joins: gueorgui- (gueorgui@user/gueorgui)
[19:17:24] *** Quits: gueorgui- (gueorgui@user/gueorgui) (Remote host closed the connection)
[19:18:19] *** Quits: carlavilla (~carlavill@188.26.219.14) (Remote host closed the connection)
[19:19:13] *** Joins: gueorgui (gueorgui@user/gueorgui)
[19:20:26] *** Joins: carlavilla (~carlavill@188.26.219.14)
[19:21:37] *** Quits: gueorgui (gueorgui@user/gueorgui) (Remote host closed the connection)
[19:22:13] *** Joins: gueorgui (gueorgui@user/gueorgui)
[19:24:04] *** Quits: mambang (~mambang@user/mambang) (Quit: Leaving)
[19:29:13] *** Quits: revolve (~u0_a227@82.132.185.229) (Ping timeout: 248 seconds)
[19:30:53] *** Joins: revolve (~u0_a227@82.132.185.44)
[19:42:11] *** Quits: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be) (Quit: mikoto-chan)
[19:43:20] *** Joins: LiftLeft (~LiftLeft@154.21.28.123)
[19:49:13] *** Joins: oxum (~oxum@122.172.205.112)
[19:51:42] *** Joins: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be)
[19:53:45] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 248 seconds)
[19:56:09] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[20:02:23] *** Quits: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be) (Quit: mikoto-chan)
[20:10:52] <j416> nice
[20:11:22] <j416> enkeyz: exercise: write a test for it
[20:12:52] *** Joins: independent56 (~independe@185.50.0.80)
[20:13:08] *** Joins: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru)
[20:13:15] <enkeyz> docs says the Intn(n) panics if n <= 0
[20:14:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[20:14:57] <j416> yep
[20:16:20] *** Joins: fikran (~fikran@user/fikran)
[20:19:43] *** Joins: codebam (~codebam@user/codebam)
[20:30:41] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[20:34:49] *** Quits: Thinkofname (~thinkthin@2a01:430:17:1::ffff:1980) (Quit: Bridge terminating on SIGTERM)
[20:40:50] *** Joins: oxum (~oxum@122.172.205.112)
[20:42:34] *** Joins: Thinkofname (~thinkthin@37.205.12.211)
[20:44:22] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[20:44:42] *** Quits: gueorgui (gueorgui@user/gueorgui) (Remote host closed the connection)
[20:44:54] *** Joins: oxum (~oxum@122.172.205.112)
[20:57:51] *** Quits: L1Cafe (~L1Cafe@user/l1cafe) (Quit: The Lounge - https://thelounge.chat)
[20:58:49] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 248 seconds)
[21:00:41] *** Quits: diff (~diff@tilde.town) (Quit: WeeChat 2.8)
[21:00:52] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:00:54] *** Joins: diff (~diff@tilde.town)
[21:03:22] *** Joins: menace (~someone@2001:a61:3403:7901:6541:b122:10d3:484f)
[21:03:40] *** Quits: menace (~someone@2001:a61:3403:7901:6541:b122:10d3:484f) (Changing host)
[21:03:40] *** Joins: menace (~someone@user/menace)
[21:08:47] *** Joins: milosz (~milosz@user/milosz)
[21:15:04] *** Joins: khrbt_ (~znc@user/khrbt)
[21:15:54] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 258 seconds)
[21:21:27] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[21:30:37] *** Joins: L1Cafe (~L1Cafe@user/l1cafe)
[21:32:12] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[21:32:12] *** Quits: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 245 seconds)
[21:32:26] *** Joins: oxum (~oxum@122.172.205.112)
[21:33:24] *** Quits: jespada (~jespada@90.254.247.46) (Ping timeout: 268 seconds)
[21:34:11] *** Joins: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[21:34:26] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[21:34:44] *** Joins: kodah (~kodah@user/kodah)
[21:35:03] *** Joins: oxum (~oxum@122.172.205.112)
[21:36:00] *** Joins: jespada (~jespada@90.254.247.46)
[21:38:17] *** Quits: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 248 seconds)
[21:39:21] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 248 seconds)
[21:39:56] *** Joins: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[21:44:29] *** Quits: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 268 seconds)
[21:48:25] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 248 seconds)
[21:50:04] *** Joins: codebam (~codebam@user/codebam)
[21:58:50] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 258 seconds)
[21:59:48] *** Joins: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[22:00:16] *** Joins: codebam (~codebam@user/codebam)
[22:07:55] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 268 seconds)
[22:08:25] *** Quits: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru) (Quit: sizeof_void34)
[22:09:20] *** Joins: codebam (~codebam@user/codebam)
[22:13:00] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[22:13:18] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[22:19:36] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:21:45] *** Joins: hikhvar796073809 (~thelounge@dynamic-046-114-002-133.46.114.pool.telefonica.de)
[22:21:47] *** Quits: independent56 (~independe@185.50.0.80) (Ping timeout: 245 seconds)
[22:22:37] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[22:23:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 248 seconds)
[22:24:37] *** Quits: dcompoze (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net) (Quit: Weechat 3.2)
[22:25:39] *** Joins: fikran (~fikran@user/fikran)
[22:28:46] *** Joins: kodah (~kodah@user/kodah)
[22:29:00] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[22:35:41] *** Quits: hikhvar796073809 (~thelounge@dynamic-046-114-002-133.46.114.pool.telefonica.de) (Ping timeout: 268 seconds)
[22:44:48] *** Joins: independent56 (~independe@185.50.0.80)
[22:49:00] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[22:55:05] *** Quits: independent56 (~independe@185.50.0.80) (Ping timeout: 248 seconds)
[22:55:30] *** Quits: sagax (~sagax@213.138.71.146) (Ping timeout: 240 seconds)
[22:56:02] *** Joins: tnez_ (~el@179.50.90.141)
[22:57:27] *** Quits: tnez_ (~el@179.50.90.141) (Client Quit)
[22:58:49] *** Joins: tnez_ (~el@179.50.90.141)
[23:01:17] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:192a:1eb2:f711:9efa) (Ping timeout: 252 seconds)
[23:05:32] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[23:06:57] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1008)
[23:07:27] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1008) (Client Quit)
[23:09:29] *** Joins: independent56 (~independe@185.50.0.80)
[23:09:42] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[23:10:20] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1008)
[23:10:54] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[23:17:24] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:20:57] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[23:21:45] *** Quits: lompik (~lompik@user/lompik) (Quit: WeeChat 3.2)
[23:21:52] *** Joins: zwr (~zwr@2804:d45:b966:fb00:26a:9b67:c1dc:9ceb)
[23:33:06] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:192a:1eb2:f711:9efa)
[23:36:14] *** Joins: hikhvar796073809 (~thelounge@dynamic-046-114-002-133.46.114.pool.telefonica.de)
[23:37:44] *** Quits: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 272 seconds)
[23:39:53] *** Quits: mei (~mei@user/mei) (Ping timeout: 248 seconds)
[23:40:47] *** Joins: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[23:45:22] *** Quits: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 268 seconds)
[23:46:52] *** Quits: hikhvar796073809 (~thelounge@dynamic-046-114-002-133.46.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[23:48:02] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 245 seconds)
[23:52:12] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1008) (Quit: ZNC 1.8.2 - https://znc.in)
[23:55:31] *** Joins: hikhvar796073809 (~thelounge@dynamic-046-114-002-133.46.114.pool.telefonica.de)
