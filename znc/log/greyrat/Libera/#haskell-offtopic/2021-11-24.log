[00:07:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[00:33:24] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[00:38:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:39:27] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:980f:fceb:aad:f12) (Ping timeout: 264 seconds)
[00:52:09] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[01:00:13] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[01:02:18] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:07:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[01:12:27] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Ping timeout: 264 seconds)
[01:12:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:14:37] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4518:ab7b:975d:2f47)
[01:19:46] <DigitalKiwi> juri_: are you hiring any artists lol
[01:21:27] <DigitalKiwi> semi related i just made myself some new business cards https://www.dropbox.com/s/fd5tpc8c1yjof83/2021-11-23%2015.14.49.jpg?dl=0
[01:23:18] <DigitalKiwi> oh i 3d printed this a while ago but i posted it today https://www.patreon.com/posts/3d-printed-i-and-59041792
[01:24:36] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:980f:fceb:aad:f12)
[01:26:09] <DigitalKiwi> https://www.dropbox.com/s/7g0g2h7a1zgada9/2021-11-23%2015.54.57.jpg?dl=0 old ones. has the wrong address and the corners are crap lol
[01:41:49] <juri_> sadly no. :)
[01:44:44] <DigitalKiwi> are you sure you don't need one of these https://twitter.com/grhmc/status/1269294198836076546
[01:44:55] <DigitalKiwi> or one of those but thompson wheeler
[01:45:16] <arahael> I've been thinking why I found nix so irritating last night:  The language isn't actually the issue, if anything it's too general-purpose.  The problem is that the interfaces (Eg, stack wants a function that has 'ghc' as one argument, but magically works fine without having a shell.nix that isn't a function), and those boundaries are generally poorly specified, and there is too much (nix)
[01:45:19] <arahael> code in setting up all the special-purpose derivations.
[01:45:44] <DigitalKiwi> or one of these https://twitter.com/ArchKiwi/status/1269321790016364544
[01:45:48] <arahael> Really, when dealing with a project, I just want simple key-value stuff.
[01:46:29] <arahael> DigitalKiwi: Heh.
[01:46:33] <DigitalKiwi> https://tinyurl.com/ey73wbhw or one of these
[01:46:42] <DigitalKiwi> in fact you can buy that one! lolol
[01:46:50] <DigitalKiwi> plz don't
[01:47:29] <arahael> Also, the other problem with nix is that there's not much *general purpose* docs in terms of guidelines. Eg, I want to make a personal project build using nix - how do I do that? Add default.nix? Add shell.nix? Integrate it into a clone of nixpkgs? Or is my only option is to provide a PR, etc.
[01:47:31] <DigitalKiwi> i mean i could use the money but no lol
[01:48:00] <arahael> DigitalKiwi: Looks good - there's no nix in there ;)
[01:49:48] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4518:ab7b:975d:2f47) (Remote host closed the connection)
[01:50:13] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4518:ab7b:975d:2f47)
[01:50:29] <DigitalKiwi> [13:40:45] <qu1j0t3> i assume you're doing nft stuff ironically
[01:50:30] <DigitalKiwi> [13:46:32] <DigitalKiwi> i haven't actually done NFT stuff but if i do, yes
[01:50:32] <DigitalKiwi> [13:49:33] <qu1j0t3> :)
[01:50:34] <DigitalKiwi> [13:49:36] <qu1j0t3> had me fooled
[01:50:36] <DigitalKiwi> [13:51:34] <DigitalKiwi> i don't know where all of these fools are with so much money but i wish they'd buy my art lol ;(
[01:50:38] <DigitalKiwi> [13:52:01] <DigitalKiwi> or urls to pictures of my art
[01:51:39] <DigitalKiwi> https://opensea.io/assets/matic/0x2953399124f0cbb46d2cbacd8a89cf0599974963/532587089991957304137178158295059401262599406261656815189702136722691719169
[01:51:45] <DigitalKiwi> some may have seen that before here
[01:52:28] <hpc> "i don't know where all of these fools are with so much money" - probably crime
[01:53:00] <hpc> take your ill-gotten gains, put them in an exchange, buy your own nft, and now you have real money
[01:53:53] <DigitalKiwi> spoiler: the unlockable content is a link to picture of my futures commissions at time of image
[01:54:03] <DigitalKiwi> https://mostlyabsurd.com/files/2021-10-05-094518_564x90_scrot.png
[01:54:39] <DigitalKiwi> Current price
[01:54:40] <DigitalKiwi> 1.5226
[01:54:42] <DigitalKiwi> ($6,640.79)
[01:54:49] <DigitalKiwi> it WAS the same
[01:56:21] <DigitalKiwi> the network fee is like a few hundred dollars to post an auction listing :|
[01:56:35] <DigitalKiwi> color me not impressed
[01:57:21] <DigitalKiwi> https://www.dropbox.com/s/7oe5fvw2jf45egk/1637694931640.jpg?dl=0
[01:58:41] <__monty__> arahael: I think what you're running into is things that look like they should be the same, shell.nix for example, actually don't have to be. People are free to implement them pretty much however they want. It's a very un(i)typed language PoV.
[01:59:29] <arahael> __monty__: Yeah, I'm OK with that, I think it's the lack of guidance that's the problem.
[02:02:43] <DigitalKiwi> https://www.dropbox.com/s/oa9f1nro36xikfo/2021-11-23%2010.43.53.jpg?dl=0 this looks cooler in person
[02:08:24] <DigitalKiwi> __monty__: here's a jr role https://wire.softgarden.io/job/13259422/Jr.-Business-Development-Representative-m-f-d-?jobDbPVId=34893667&l=en
[02:09:04] <DigitalKiwi> also they say just "rust developer" not senior or junior
[02:09:47] <DigitalKiwi> have they decided rust is too new to have senior developers
[02:10:35] <geekosaur> that'd be a new one
[02:10:46] <geekosaur> usually they demand 5-10 years experience
[02:11:03] <monochrom> Maybe the company itself makes some other distinction than that. Maybe it's "dev" vs "project/team lead/manager".
[02:15:12] <DigitalKiwi> https://wire.softgarden.io/job/13049652/Director-of-Customer-Success-m-f-d-?jobDbPVId=34393687&l=en i think i can do this! Success takes the happy path
[02:15:46] <DigitalKiwi> director of customer Failure has the hard job
[02:15:57] <arahael> __monty__: I'm thinking of merely creating "normal" derivations - ie, the raw "derivation" or maybe using pkgs.stdenv.mkDerivation, to set up a consistent environment, which I'll then jump to non-nix stuff such as just using cabal.
[02:16:52] <DigitalKiwi> https://eed3si9n.com/learning-scalaz/Validation.html :P
[02:18:17] <__monty__> arahael: That's fair. Though I do recommend trying out haskell.nix. It integrates so much better with both cabal and stack.
[02:18:37] <DigitalKiwi> do you need help with a shell.nix for haskell?
[02:18:52] <DigitalKiwi> i have a few
[02:19:21] <DigitalKiwi> https://gist.github.com/Kiwi/e055dc459d8c967851f1f76c7ac8a790
[02:19:37] <arahael> __monty__: I'm also not sure how to structure my nix builds.  Do I put a default.nix into every single project, which means eg, checking out whatever it is I'm building from github, and making my own changes.  Or create a separate "nix-scripts" repo and have fetchGit calls in there, or...  And I'd also want to keep each actual nix build separate.
[02:20:16] <DigitalKiwi> have you read about overlays
[02:20:37] <arahael> DigitalKiwi: No I haven't, actually.  I've been trying to ignore the "complex" stuff, seeing as I barely cope with the simple stuff.
[02:20:40] <DigitalKiwi> i think that is the answer to one of your earlier questions
[02:21:39] <__monty__> Those are really personal preference questions. Like whether you use MTL or transformer stacks : )
[02:22:18] <arahael> __monty__: So nix users have decision paralysis by default, then.
[02:22:36] <__monty__> The simplest way though, is having a default.nix and shell.nix per project. That's also easier to share with others who want an environment to hack on your project.
[02:22:48] <DigitalKiwi> https://mostlyabsurd.com/files/rbw.nix
[02:23:01] <DigitalKiwi> https://mostlyabsurd.com/files/hledger-overlay.nix
[02:23:21] <__monty__> I'll be back for more Nix talk in the morning : )
[02:23:22] <arahael> __monty__: That helps!
[02:23:30] <arahael> __monty__: Ah, for me it's morning! :D
[02:23:35] <arahael> __monty__: Sleep well!
[02:23:48] <__monty__> nn, peoples
[02:23:52] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:24:00] <DigitalKiwi> https://mostlyabsurd.com/files/qtbitcointrader.nix
[02:24:42] <DigitalKiwi> those files being in .config/nixpkgs/overlays
[02:24:46] <arahael> DigitalKiwi: Yeah, I get confused with those. I mean, you suddenly have functions with two arguments.
[02:24:57] <arahael> DigitalKiwi: Why does 'rbw' require two argumetns?
[02:25:40] <arahael> DigitalKiwi: And what does 'self: super:' refer to? (I mean, what's self supposed to represent? What's super supposed to represent?)
[02:27:08] <DigitalKiwi> i think they could be named before and after or this and that
[02:27:49] <arahael> DigitalKiwi: That doesn't clarify anything.  How could 'super' be 'after' - it's an input.
[02:29:32] <DigitalKiwi> it gets fun when you have to do stuff like in https://mostlyabsurd.com/files/haskellPackages.nix heh
[02:30:19] <DigitalKiwi> i probably don't know nix well enough to be terribly helpful on this one beyond examples lol
[02:30:28] <DigitalKiwi> i just bang everything with a hammer until it works
[02:30:53] <arahael> Yeah, That's what I find I do with nix as well, and frankly, that's why I get frustrated.  I feel I shouldn't have to keep banging.
[02:31:40] <DigitalKiwi> https://github.com/tazjin/nix-1p#overrides--overlays
[02:32:20] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4518:ab7b:975d:2f47) (Remote host closed the connection)
[02:33:13] <arahael> Well, I gotta get to work - will check these out later.
[02:33:17] <arahael> Thanks again.
[02:33:19] <DigitalKiwi> The overlay function receives two arguments, self and super. self is the fixed point of the overlay's evaluation, i.e. the package set including the new packages and super is the "original" package set.
[02:33:46] <arahael> I forget what fix point means in nix.
[02:34:15] <DigitalKiwi> https://github.com/NixOS/nixpkgs/blob/master/lib/fixed-points.nix
[02:35:06] <arahael> Yeah, I guess I'll have to study that later.
[02:40:25] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[02:47:26] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 245 seconds)
[03:04:45] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[03:05:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[03:09:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:43:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[04:22:10] *** Joins: ph88^ (~ph88@2a02:8109:9e00:71d0:ccfc:bf5f:d318:f468)
[04:26:45] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:980f:fceb:aad:f12) (Ping timeout: 268 seconds)
[04:44:25] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[05:14:02] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[05:17:16] *** Joins: ph88_ (~ph88@2a02:8109:9e00:71d0:fc62:cdb:5eac:d781)
[05:21:11] *** Quits: ph88^ (~ph88@2a02:8109:9e00:71d0:ccfc:bf5f:d318:f468) (Ping timeout: 245 seconds)
[05:28:39] *** Quits: ph88_ (~ph88@2a02:8109:9e00:71d0:fc62:cdb:5eac:d781) (Ping timeout: 264 seconds)
[05:39:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:43:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[05:44:41] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[05:44:54] *** Joins: nf (~n@monade.li)
[05:51:27] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 264 seconds)
[06:09:13] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[06:17:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[06:24:07] *** Joins: ph88_ (~ph88@2a02:8109:9e00:71d0:fc62:cdb:5eac:d781)
[08:14:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:28:29] *** Quits: ph88_ (~ph88@2a02:8109:9e00:71d0:fc62:cdb:5eac:d781) (Ping timeout: 268 seconds)
[08:48:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[09:04:47] *** Joins: reumeth (~reumeth@user/reumeth)
[09:11:11] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 245 seconds)
[09:41:03] *** Joins: ph88_ (~ph88@2a02:8109:9e00:71d0:e191:f0f5:a80a:e4b9)
[10:44:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:19:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[11:32:05] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:30f2:c6f2:bddd:bf44)
[11:36:23] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Ping timeout: 264 seconds)
[11:40:17] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[11:45:12] *** Quits: ph88_ (~ph88@2a02:8109:9e00:71d0:e191:f0f5:a80a:e4b9) (Ping timeout: 268 seconds)
[11:52:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[11:57:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:12:39] *** Joins: ph88_ (~ph88@2a02:8109:9e00:71d0:e191:f0f5:a80a:e4b9)
[12:23:51] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 264 seconds)
[12:46:55] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[12:47:28] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:52:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[12:58:39] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8) (Ping timeout: 264 seconds)
[13:02:04] <kuribas> I'd like to experiment in idris with pattern matching on types, to see how it compares to haskell type-classes.
[13:03:32] <lortabac> kuribas: is it possible though? I would guess that since Type is open pattern-matching is disallowed
[13:03:49] <kuribas> lortabac: no, it's allowed.
[13:04:15] <kuribas> lortabac: it does mean you need to account for all possible types though.
[13:04:27] <lortabac> so you always need a wildcard pattern?
[13:04:34] <kuribas> yes
[13:04:40] <lortabac> (or a variable)
[13:04:45] <lortabac> nice
[13:04:53] <kuribas> otherwise it isn't total.
[13:05:24] <lortabac> I remembered had tried this in Idris1, and it gave me an error
[13:05:38] <kuribas> right
[13:06:31] <kuribas> it works in idris2
[13:06:46] <kuribas> only if the type isn't erased.
[13:07:04] <kuribas> you can erase the type if you want parametricity.
[13:09:06] <lortabac> ok I see
[13:09:09] <lortabac> sounds very interesting
[13:14:43] <kuribas> I suppose in most cases you want constraints, so you need type classes anyway.
[13:15:06] <kuribas> It could work for some generic traversal, where you only traverse some types.
[13:22:25] <lortabac> in fact the main use case for pattern-matching on types is structural polymorphism AFAIK
[13:25:23] <lortabac> kuribas: do you know if pattern-matching happens at runtime or is resolved statically like type-classes?
[13:31:09] <kuribas> lortabac: the type constructor is just a regular constructor in idris.
[13:31:39] <kuribas> So pattern matching on a type is exactly the same as pattern matching on a value constructor.
[13:32:26] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[13:33:23] <kuribas> idris2 just passes the type to the function as a constructor.
[13:33:38] <kuribas> At runtime.
[13:34:07] <kuribas> lortabac: note that it isn't that different from a type class.  The compiler resolves the type class instance, and passes the dictionary at runtime.
[13:35:10] <lortabac> in the case of type classes, what is passed is the methods, not the type itself
[13:35:31] <kuribas> are you talking haskell or idris?
[13:35:37] <lortabac> the dictionary is selected statically
[13:35:40] <lortabac> in Haskell
[13:35:50] <lortabac> (I'm not really familiar with Idris)
[13:35:57] <kuribas> in haskell types are erased, so they cannot be passed.
[13:37:47] <lortabac> so **hypothetically** when you pattern-match on a type, the compiler might be able to determine the right branch statically
[13:37:55] <lortabac> that was my question
[13:38:12] <kuribas> what's "the right branch"?
[13:38:48] <kuribas> you can inline and do case by case elimination.
[13:38:59] <kuribas> Just as you can on value level.
[13:39:23] <lortabac> no, I'm not talking about inlining
[13:39:34] <lortabac> maybe I am talking nonsense because I don't know Idris
[13:40:44] <lortabac> if you have foo Int = "int"; foo _ = "other", is the value of foo determined statically?
[13:41:09] <lortabac> in theory you may be able to know the type of the argument at compile time
[13:41:27] <kuribas> what if you have "bar x = foo x"?
[13:41:33] <kuribas> What's the type of the argument?
[13:41:53] <lortabac> well in that case you would have an equality constraint between the two x's
[13:42:07] <lortabac> I mean, this is certainly doable for some type-systems
[13:42:27] <kuribas> There is no contraint.
[13:42:31] <lortabac> maybe not for a dependently-typed language
[13:42:39] <kuribas> foo : Type -> String, bar : Type -> String
[13:43:12] <kuribas> lortabac: in general you cannot, because types aren't know statically.
[13:43:37] <kuribas> The type could be the result of a calculation.
[13:44:17] <lortabac> ok
[13:50:59] <kuribas> lortabac: interestingly, idris2 explicitly passes the dictionary of a type class (interface) to the function.
[13:51:33] <kuribas> You could take the dictionary and return it.
[13:51:52] <lortabac> interesting
[13:51:58] <kuribas> so "getDict : a => a " is a valid type.
[13:56:45] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:01:25] <kuribas> you also don't need type applications, because pass type explicitly.
[14:22:21] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:30f2:c6f2:bddd:bf44) (Quit: WeeChat 2.8)
[15:30:03] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[15:31:04] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:32:41] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:3095:3db8:3339:3962)
[15:36:19] *** Joins: __monty__ (~toonn@user/toonn)
[15:45:21] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[15:45:47] *** Joins: notzmv (~zmv@user/notzmv)
[15:47:06] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:50:50] *** Joins: ph88^ (~ph88@2a02:8109:9e00:71d0:6dfb:d68d:ebe:207)
[15:54:45] *** Quits: ph88_ (~ph88@2a02:8109:9e00:71d0:e191:f0f5:a80a:e4b9) (Ping timeout: 250 seconds)
[16:35:44] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[17:17:48] *** Parts: agander_m (sid407952@tinside.irccloud.com) ()
[17:36:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[17:39:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:44:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[17:59:10] *** Joins: reumeth (~reumeth@user/reumeth)
[18:13:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:18:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[18:57:55] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[19:02:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:02:51] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8) (Ping timeout: 264 seconds)
[19:32:26] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:3095:3db8:3339:3962) (Ping timeout: 245 seconds)
[19:34:58] *** Joins: lortabac (~lortabac@37.171.24.180)
[19:36:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[19:47:35] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[19:58:26] *** Quits: lortabac (~lortabac@37.171.24.180) (Quit: WeeChat 2.8)
[20:18:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:23:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[20:41:35] *** Joins: carter_ (sid14827@id-14827.helmsley.irccloud.com)
[20:42:07] *** Joins: kritzefitz_ (~kritzefit@debian/kritzefitz)
[20:46:43] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8) (*.net *.split)
[20:46:43] *** Quits: ph88^ (~ph88@2a02:8109:9e00:71d0:6dfb:d68d:ebe:207) (*.net *.split)
[20:46:44] *** Quits: echoreply (~echoreply@45.32.163.16) (*.net *.split)
[20:46:44] *** Quits: saolsen (sid26430@id-26430.lymington.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[20:46:44] *** Quits: kuribas (~user@ptr-25vy0iagc74l4rb6r6j.18120a2.ip6.access.telenet.be) (*.net *.split)
[20:46:44] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (*.net *.split)
[20:46:44] *** Quits: sclv (sid39734@haskell/developer/sclv) (*.net *.split)
[20:46:44] *** Quits: acertain (sid470584@id-470584.hampstead.irccloud.com) (*.net *.split)
[20:46:45] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (*.net *.split)
[20:46:45] *** Quits: carter (sid14827@helmsley.irccloud.com) (*.net *.split)
[20:46:45] *** carter_ is now known as carter
[20:47:02] *** kritzefitz_ is now known as kritzefitz
[20:52:55] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[20:52:55] *** Joins: ph88^ (~ph88@2a02:8109:9e00:71d0:6dfb:d68d:ebe:207)
[20:52:55] *** Joins: saolsen (sid26430@id-26430.lymington.irccloud.com)
[20:52:55] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[20:52:55] *** Joins: bjs (sid190364@user/bjs)
[20:52:55] *** Joins: kuribas (~user@ptr-25vy0iagc74l4rb6r6j.18120a2.ip6.access.telenet.be)
[20:52:55] *** Joins: sclv (sid39734@haskell/developer/sclv)
[20:52:55] *** Joins: acertain (sid470584@id-470584.hampstead.irccloud.com)
[20:52:55] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[20:52:57] *** Joins: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[20:53:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:58:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[21:55:45] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[22:07:17] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[22:09:03] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[22:09:31] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[22:12:44] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[22:13:59] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[22:14:29] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[22:16:32] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[22:16:55] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[22:22:41] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[22:33:08] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8) (Remote host closed the connection)
[22:40:51] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[22:44:38] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[22:45:21] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Ping timeout: 245 seconds)
[22:48:42] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[22:54:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:59:16] *** Quits: kuribas (~user@ptr-25vy0iagc74l4rb6r6j.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[23:02:39] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[23:02:52] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[23:20:00] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[23:28:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[23:31:59] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[23:52:31] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
