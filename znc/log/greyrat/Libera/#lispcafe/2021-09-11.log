[00:11:48] <shka> ladies and gentleman 
[00:11:50] <shka> this is it
[00:12:00] <shka> the most shitpost research ever done 
[00:12:02] <shka> https://linkinghub.elsevier.com/retrieve/pii/S2666634021001537
[00:12:03] -ixelp- Redirecting
[00:20:02] *** Joins: humasect (~humasect@d24-235-145-145.home1.cgocable.net)
[00:23:36] <humasect> https://coalton-lang.github.io/20211010-introducing-coalton/
[00:23:36] -ixelp- Introducing Coalton: How to Have Our (Typed) Cake and (Safely) Eat It Too, in Common Lisp | The Coalton Language
[00:27:44] *** Quits: humasect (~humasect@d24-235-145-145.home1.cgocable.net) (Remote host closed the connection)
[00:29:15] <shka> well, it is honestly not a bad idea
[00:29:32] <shka> since it is not a separate language
[00:39:39] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[00:41:33] <humasect> where is aeth
[00:41:39] <humasect> you ok bro
[00:48:49] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[01:02:01] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Quit: Leaving...)
[01:14:18] *** Joins: christophergray (~christoph@190.148.53.200)
[01:35:46] *** Quits: copec (~copec@schrodbox.unaen.org) (Ping timeout: 260 seconds)
[01:41:30] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 265 seconds)
[01:46:31] <moon-child> 'introducing coalton' hm?  Hasn't it been around for quite a while now?
[01:49:20] <hayley> This is so sad can we have pluggable types
[01:52:06] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:54:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:57:05] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[01:59:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[02:12:43] *** Quits: christophergray (~christoph@190.148.53.200) (Quit: WeeChat 3.2)
[02:17:52] <hayley> moon-child: The typeclasses are new though.
[02:20:14] <moon-child> https://mail.haskell.org/pipermail/haskell/2007-March/019181.html  oleg on typeclasses
[02:20:15] -ixelp- [Haskell] Haskell with only one typeclass
[02:23:51] *** Joins: selwyn (~selwyn@user/selwyn)
[02:52:12] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[03:12:29] * hayley uploaded an image: (102KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/CWwbzzjogqXCstngunXvAWKv/stack-allocation.jpeg >
[03:13:46] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[03:20:36] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[03:22:25] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Read error: Connection reset by peer)
[03:22:48] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[03:49:14] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 260 seconds)
[04:00:11] *** Joins: Alfr (~Alfr@user/alfr)
[04:00:27] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
[04:01:01] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[04:02:11] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
[04:05:52] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[04:06:33] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
[04:07:09] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[04:12:13] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Ping timeout: 252 seconds)
[05:08:06] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 260 seconds)
[05:08:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:18:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[05:24:16] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 252 seconds)
[05:27:22] *** Quits: Zianic (~12602@user/zianic) (Ping timeout: 250 seconds)
[05:28:11] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[05:28:30] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[06:03:11] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[06:05:55] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[06:11:12] <hayley> Is there a way to unify infinite recursive types in finite time? You'd have to do something careful with EQ but it seems possible to me.
[06:18:23] <hayley> i.e. what's the worst that can go wrong if I do unification without an occurs check?
[06:28:46] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[06:31:25] <gilberth> hayley: You could try that with another nightmare.
[06:31:44] <hayley> gilberth: Really now?
[06:31:55] <hayley> https://i.redd.it/032n2e424qm71.png
[06:32:49] <gilberth> hayley: What exactly is unification of types?
[06:33:15] <hayley> More or less Prolog unification.
[06:33:45] <gilberth> Yep, then another nightmare could do. Have fun!
[06:34:26] <hayley> Another nightmare? The unification o-m-r-n does is much more limited and definitely doesn't handle infinite structures.
[06:35:41] <gilberth> I mean. A type is a set of objects, right? A languge is a set of strings. You could map a types to a language. And there you go.
[06:37:14] <hayley> Hm. The problem is that ML types are functions of sets, e.g. forall a. [a]
[06:37:32] <gilberth> Speaking of which, I once experimented with doing sth similar to implement SUBTYPEP. That's not unification though, but Boolean operations.
[06:38:01] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[06:38:02] <hayley> And then I want to add recursive types, so we might even have forall a. #1=((a -> #1#) -> a)
[06:38:36] <gilberth> Yep. That's a grammar, isn't it?
[06:38:45] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[06:39:01] <kakuhen> I am trying to get CAPI to work but I can't :<
[06:39:10] <kakuhen> The example compiles and loads, but then the function just returns #<CAPI:COLOR-SCREEN 0 Cocoa> and no visible window
[06:39:51] <kakuhen> to be fair, I did not do a proper installation of LispWorks, but nothing in the installer scripts seem to do anything that CAPI relies on
[06:40:01] <hayley> I guess, but it is no longer regular. So some properties might not hold, but of course I don't know which matter.
[06:40:20] <gilberth> kakuhen: Just wait a decade for when I am finished with Free-CLIM. :)
[06:40:23] <kakuhen> heh
[06:41:01] <kakuhen> anyway, useful tip if you dont want to run those damned pkg installers: always pkg-util --extract-full /path/to/the.pkg /some/directory
[06:41:05] <gilberth> hayley: Yep. I don't know if that's LL even. Was just a thought.
[06:41:08] <kakuhen> and you get to inspect everything the installer will do pre-install and so on
[06:41:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[06:41:21] <kakuhen> I noticed LispWorks will do really ugly things to your Dock so I decided to not formally install it
[06:41:57] <gilberth> kakuhen: Have you bought a LispWorks license, or is CAPI included in the trial version?
[06:42:03] <kakuhen> included in the trial version
[06:42:11] <kakuhen> allegedly it should be fully functional and you can try out the examples yourself
[06:42:15] <gilberth> kakuhen: LispWorks also claims to be the app for .lisp files.
[06:42:26] <kakuhen> oh CCL does the same anyway
[06:42:35] <kakuhen> when you (require 'cocoa) and it compiles the "IDE" that is
[06:45:42] <gilberth> Hugh? What happens to the dock? I'd be interested as me too, tries to figure out how to correctly turn a process into a GUI process. Preferable without a bundle. For file types: I may not have noticed, as I never use the Finder.
[06:46:30] <kakuhen> lispworks post install script will force the app on the dock whether you like it or not
[06:46:33] <kakuhen> that's the gist I got from reading it
[06:46:46] <hayley> https://www.youtube.com/watch?v=MYaf94V3aRU "Woop!"
[06:46:47] -ixelp- Fracture (Live at the Concertbebouw, Amsterdam, Nov. 23, 1973) - YouTube
[06:46:51] <kakuhen> it even goes as far as to kill your dock during post-install
[06:48:25] <kakuhen> OH looks like I got the windows now
[06:48:37] <kakuhen> Turns out the applications were always opened, but they were tucked away in the LispWorks menu >.<
[06:48:48] <gilberth> Ok. So the dock behaves, but LispWorks forcing itself during install to stick there? As in "keep in dock". Right?
[06:49:27] <kakuhen> Yeah
[06:49:42] <gilberth> So that's just impolite.
[06:50:48] <kakuhen> yep, it adds itself to the dock as a persistent app then force restarts it
[06:51:14] <kakuhen> imo this is an abuse of Installer
[06:51:39] <kakuhen> normally you'd use Installer for offering optional packages and having to do things that require you to run as root; so on, so forth.
[06:52:03] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[06:52:13] <kakuhen> but as far as LispWorks goes, if they don't want to mess with your Dock, then they can seemingly just distribute a disk image file, slap on a Software License Agreement to it, and call it a day
[06:52:37] <gilberth> Anyhow, I still lack having a logo of sorts. Currently I use <http://clim.rocks/gilbert/nocturnal.png> but that should rather be for something else.
[06:52:40] <kakuhen> anyway at least I got CAPI working now; turns out the examples start the application with no windows
[06:54:16] <gilberth> For some strange reason any window my CLIM creates is burried below all other and the position always is top-left. Haven't figured out why.
[06:54:58] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[06:56:01] <gilberth> But then, the process starts as a regular process and then transforms itself into a GUI process without a bundle. And the latter still activates the nasty timeout behavior of macOS.
[06:57:00] <kakuhen> sounds like a mac os issue to me more so than a CLIM issue
[06:57:12] <kakuhen> that's exactly the behavior I'd get if I used the wrong keyword for creating an NSWindow and bringing it front
[06:57:42] <kakuhen> e.g. if you hold a weak reference to an NSWindow then initialize it and bring it front inside a method that goes out of scope
[06:57:53] <kakuhen> that will have the behavior you're describing
[06:58:06] <kakuhen> it will be inactive and behind other windows yet it still works somehow
[06:58:16] <gilberth> It definitely is a macOS issue. Remember, that I wrote an ObjC app to verify? Any timeout for any wait-for-sth syscall is affected.
[06:58:22] <kakuhen> oh yeah
[06:59:05] <gilberth> The Mach syscalls are affected in the same way as the BSD syscalls.
[06:59:28] <kakuhen> that is something worth filing a radar about
[06:59:44] <kakuhen> the BSD syscalls are thin wrappers over the Mach syscalls
[06:59:50] <gilberth> So I guess this is implemented deep down in the kernel.
[06:59:52] <kakuhen> so this is probably an issue with the implementation of the Mach stuff
[07:00:38] <kakuhen> that's why OS X has these weird starting points for syscalls, like 0x80000002 being write() or whatever
[07:00:42] <gilberth> kakuhen: Still I tried the Mach syscalls, too. I somewhat hoped that the BSD wrappers would implemented that behavior. Nah, it's rooted deeper than that.
[07:01:05] <kakuhen> I may be getting it in reverse, but basically, POSIX says nothing about negative values for syscalls, so OS X on 32-bit would use negative values for the Mach syscalls and the BSD syscalls took positive values and were just wrappers over the Mach ones
[07:01:15] <kakuhen> and on 64-bit systems they now just use some super large number
[07:01:53] <gilberth> Isn't C fun?
[07:02:16] <kakuhen> Yeah, and Objective-C is twice the fun :3 
[07:02:39] <kakuhen> to be fair, as much as I diss on XNU being an old, buggy kernel unmaintained and stuck in 2004 technology-wise
[07:02:46] <kakuhen> it's still miles ahead of what you had with System 8 and 9
[07:02:57] <kakuhen> but that is a pretty low bar to surpass...
[07:03:20] <kakuhen> 68k emulation was so fast on PowerPC that Apple never bothered rewriting their really old "classic" Mac OS code
[07:03:21] <gilberth> Indeed. It's like saying that Windows NT is miles ahead of DOS.
[07:03:53] <kakuhen> so despite 68k support being dropped, plenty of System 9 internals were still 68k code that was simply being emulated
[07:04:22] <gilberth> Why didn't they just recompile?
[07:04:39] <kakuhen> lots of specific 68k-optimizations done in assembly I guess?
[07:04:47] <gilberth> Oops.
[07:05:15] <kakuhen> and the first PowerPC chips they used emulated 68k faster than their fastest 68k macintoshes
[07:05:25] <kakuhen> so they just never felt the need to work on rewriting that stuff
[07:05:43] <gilberth> Was it emulated or JITed?
[07:06:08] <kakuhen> not a JIT, an actual software emulator iirc
[07:06:49] <kakuhen> and as you could predict, yes, software recompiled for PowerPC ran wayyyyyy faster
[07:07:41] <gilberth> My poor Xeon emulates a Z80 running at 9.2GHz. That is still impressive of sorts.
[07:08:13] <kakuhen> that reminds me there's this guy who made an emulator for a single instruction cpu
[07:08:18] <kakuhen> and developed an OS on top of it
[07:08:26] <kakuhen> and you can boot into this on bare metal
[07:08:41] <kakuhen> well, "boot." It would run a subleq emulator that would then load the OS
[07:08:50] <gilberth> Nice.
[07:08:58] <kakuhen> https://github.com/mintsuki-org/subleq-emu
[07:10:31] <hayley> So Stallman already did my idea of giving up control of thread local regions to the global GC, but with stack allocation instead.
[07:12:25] <gilberth> Somewhat related. This is my ISA for the TTL cpu I design: <http://clim.rocks/gilbert/b32p/isa.html> Not OISC, but still pretty primitive. At the end of the day I will probably run some Lisp on it, it'll be painful though with no index registers at all.
[07:12:31] <kakuhen> also i am sad that geocities shut down
[07:12:49] <kakuhen> it wasnt too far long ago I would find many interesting websites -- many dead, many alive -- on geocities with valuable information
[07:13:09] <kakuhen> this one japanese blogger maintained some Go client for System 9 but now it's gone forever and I can't find it elsewhere on the net ;_;
[07:13:21] <kakuhen> what's especially impressive is that this client could connect to the KGS server and play games on there
[07:14:53] <gilberth> You can't reach the author?
[07:15:03] <kakuhen> no, because I only had a bookmark of the website
[07:15:19] <kakuhen> I don't know his e-mail and he seems to have no social media either.
[07:15:23] <kakuhen> seemed*
[07:15:43] <kakuhen> There's many people like this on Naver, too, and I think Naver is eventually going to stop hosting personal blogs, too.
[07:16:47] <gilberth> Oh dear. How about a proxy which saves everything one find in the internet. Me is missing things he once found. I should keep more copies.
[07:17:05] <kakuhen> yeah i am considering hoarding data, eventually
[07:17:19] <kakuhen> especially since hard drive prices are steadily decreasing
[07:17:29] <kakuhen> but unfortunately it's becoming trickier to determine which drives use SMR
[07:17:43] <kakuhen> in short, you don't want to use SMR drives for backups because your speeds for duplicating the disks will be painfully slow
[07:18:48] <kakuhen> otherwise they're fine drives that have made storage even cheaper
[07:19:58] <gilberth> You say, that SMR drives offer less bandwidth?
[07:20:22] <kakuhen> no; it's a really weird thing
[07:20:41] <kakuhen> so while SMR drives allow more dense storage, because of how they store data, if you want to make a bitwise identical copy of the drive, the speed will be very slow
[07:21:37] <gilberth> Why?
[07:23:03] <kakuhen> essentially, data is eventually written on top of each other, so the more you write to the disk, the slower it gets for write speeds
[07:23:31] <kakuhen> and say you want to duplicate one SMR drive to another one
[07:23:42] <kakuhen> then you'll be getting progressively slower writers
[07:23:44] <kakuhen> wrties*
[07:23:48] <kakuhen> writes* wow i cant spell tonight.
[07:24:32] <kakuhen> as long as the disk isn't filled to the point where it must start rewriting data, you're fine, but otherwise it's pretty slow
[07:24:46] <kakuhen> and this can be a disaster on some setups (e.g. mirror vdevs on a zpool)
[07:25:04] <kakuhen> but if you plan to keep the data on one drive and essentially never change anything substantially, then it's good enough
[07:30:24] <gilberth> Oh. Good to know. So data gets denser only when the disk fills.
[07:31:42] <kakuhen> yeah, I think that's correct
[07:32:10] <gilberth> I wonder if they also get less reliable.
[07:38:08] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[07:40:53] *** Joins: robin (~robin@user/terpri)
[07:43:08] <kakuhen> ok this is hilarious
[07:43:25] <kakuhen> I found some really old Mac software that uses Project Builder, and Xcode can no longer open it, claiming it is from "a future version of Xcode."
[07:45:03] <Alfr> gilberth, as for speed, those aren't bad for linear writes, but for random writes those drives need to read-modify-write quite a large block.
[07:49:54] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[07:50:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:53:04] *** Joins: robin (~robin@user/terpri)
[07:54:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[07:56:06] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[08:06:13] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[08:09:26] *** Joins: robin (~robin@user/terpri)
[08:10:42] <kakuhen> https://a.uguu.se/ZxQefPHP.tiff
[08:10:52] <kakuhen> dubious code 
[08:11:54] <kakuhen> I never knew running PPC Tiger in QEMU would prove to be useful for building frameworks and slowly upgrading the Xcode project files so that the modern versions can hopefully parse them
[08:17:13] *** Joins: robin_ (~robin@user/terpri)
[08:18:02] *** Quits: robin (~robin@user/terpri) (Ping timeout: 260 seconds)
[08:33:26] *** Quits: robin_ (~robin@user/terpri) (Ping timeout: 260 seconds)
[08:34:18] *** Joins: robin (~robin@user/terpri)
[08:34:38] <kakuhen> https://a.uguu.se/yPiFThZ.png
[08:34:48] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[08:35:00] <kakuhen> surprisingly very painless -- looks like xcode forgot to include the frameworks into the binary so it kept getting a trap signal
[08:35:04] <kakuhen> but now it seems to be functional
[08:38:02] <kakuhen> I wonder how tedious it'd be to make a universal binary for ppc7400, ppc970, i386, x86_64, and arm64
[08:38:19] <kakuhen> it'd be a super large binary, but it'd be download once and run "almost everywhere" for OS X users
[08:39:31] <humasect> yes
[08:39:38] *** Joins: molson__ (~molson@2001-48F8-704A-CA1-0-0-75F-101C-static.midco.net)
[08:39:46] <humasect> or use js/html =)
[08:40:11] <humasect> wassembley
[08:40:12] <kakuhen> I know most people with Power Macs in 2021 will likely run Tiger, if OS X at all. People with a beefy G5 would certainly use Leopard
[08:40:33] <kakuhen> It might be fun to see if I can target 10.3 or earlier versions, but that may involve rewriting too much code
[08:40:49] <humasect> target gnustep =P 
[08:40:58] <kakuhen> but the only reason to target versions earlier than Tiger is if you want to include the iMac G3 and similar models
[08:41:08] <kakuhen> But most people nowadays prefer running System 9 than OS X on those machines
[08:41:21] <kakuhen> OS X really puts those old G3s at their limit
[08:42:12] <kakuhen> humasect: that sounds fun, but there is already a Go software for GNUstep I believe
[08:42:47] <kakuhen> oh also I am too lazy to touch my laptop that runs Linux at the moment
[08:42:49] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1015-static.midco.net) (Ping timeout: 252 seconds)
[08:42:58] <kakuhen> GNOME is too comfortable and I don't want to learn how to get GNUstep + windowmaker working on Linux
[08:43:01] <kakuhen> It was enough of a hassle on FreeBSD
[08:43:52] <kakuhen> my Tiger VM starts up at the click of a button and even then I rarely use it -- only using it right now to slowly upgrade a Project Budiler project to a late enough version of Xcode so that the latest Xcode can open this
[08:47:12] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
[08:51:50] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[08:52:13] <humasect> kakuhen: people nowadays, they run System 9 still?
[08:52:31] <kakuhen> no, but people with an iMac G3 tend to run System 9 rather than OS X
[08:52:46] <humasect> wmaker + gnustep is very easy setup =)
[08:52:59] <humasect> oh, yeah.
[08:53:13] <kakuhen> i tried compilig clisp on fedora just to remember how awful most linux distros are at handling libraries and dependencies
[08:53:21] <kakuhen> >gnu configure script: you're missing libsigsegv
[08:53:26] <kakuhen> >dnf install libsigsegv
[08:53:29] <kakuhen> >gnu configure script: you're missing libsigsegv
[08:54:20] <kakuhen> replacing gnome with gnustep+wmaker sounds like an even bigger pain
[08:55:25] <kakuhen> I only tried compiling clisp because someone on #emacs was experiencing CLISP crashing on startup when he tried using it with SLY
[08:55:39] <kakuhen> For some reason he's on a distro with insane policies, so he's stuck with a 2010 release of CLISP
[08:55:55] <kakuhen> and we found out eventually slynk doesn't really play nicely with that CLISP, or maybe it does? who knows.
[08:56:15] <kakuhen> I wanted to test it on my machine but I gave up after seeing how non-sensical fedora was for installing libraries
[08:56:29] <kakuhen> anyway, slynk works on the 2018 release of clisp, 2.49.something
[08:56:33] <humasect> fedora... what about sbcl
[08:56:43] <kakuhen> The person did not want to use SBCL, not an option
[08:56:49] <humasect> ahh
[08:56:51] <kakuhen> He was learning Common Lisp with a book that uses CLISP-specific extensions
[08:56:58] <kakuhen> So he really wanted to stay with CLISP
[08:57:15] <kakuhen> to be honest, I'm surprised he even found a resource that doesn't blindly assume you're on SBCL
[08:57:31] <kakuhen> in my anecdotal experience 99% of common lisp resources do that
[08:59:54] <kakuhen> not that it's a bad thing, at least SBCL has a saner release schedule than CLISP
[08:59:54] <kakuhen> so these hipster linux distros like Void will not ship broken packages.... >.>
[08:59:54] <kakuhen> slynk claims it runs on CLISP 2.38 and later, but again, I had no way to tell if the segfault was just him or it was Slynk documentation being out-of-date.
[09:02:37] <humasect> ancient wisdom
[09:04:14] <kakuhen> lol the temporarily file site i use doesn't allow zip archives with powerpc binaries in them it seems
[09:04:26] <kakuhen> i should have cleared the build folder before zipping, oh well.
[09:09:35] <kakuhen> OK I just learned the hard way Xcode 2.0 projects do not open in Xcode 12. Time to spin up my Snow Leopard VM >.>
[09:09:48] <kakuhen> Maybe a project from Xcode 3.2.6 will work?  Who knows.
[09:12:08] <humasect> .me remembers making haskell plugin xcode 1.2 ish
[09:12:30] <humasect> ok 2.x 
[09:12:31] <humasect> https://github.com/humasect/HaskellPlugin
[09:13:20] <kakuhen> sounds fun!
[09:13:36] <kakuhen> I don't think Xcode plugins exist anymore, sadly. Or at least I haven't found a plugin that brings back Subversion support.
[09:14:12] <humasect> back in the day =) 
[09:14:25] <humasect> now all the IDEs use javascript plugs
[09:14:51] <kakuhen> well, it gets the job done, at least
[09:18:06] <humasect> trueth
[09:38:37] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[09:38:47] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[09:43:05] *** Joins: robin (~robin@user/terpri)
[09:50:04] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[09:51:22] *** Quits: robin (~robin@user/terpri) (Ping timeout: 260 seconds)
[09:51:42] *** Joins: robin (~robin@user/terpri)
[09:53:11] * hayley runs pacman -Sc and it clears like 35GB of packages cached.
[10:15:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:17:18] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[10:25:41] <contrapunctus> hayley: no new posts in r/schemememe in a while? 🤔
[10:26:01] <hayley> That's aeth's job.
[10:27:30] <contrapunctus> Oh :\
[10:27:31] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[10:30:09] *** Joins: robin (~robin@user/terpri)
[10:39:56] <kakuhen> https://a.uguu.se/iqSEmSaJ.png
[10:40:07] <kakuhen> after enough confusion and messiness everywhere, i finally got this thing running
[10:40:22] <kakuhen> xcode was mysteriously pulling in one framework as powerpc and another as intel, and DYLD does not like that apparently
[10:40:41] <kakuhen> and GDB would give me vague messages like "data formatter is unavailable"
[10:42:18] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:47:26] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[10:50:11] *** Joins: robin (~robin@user/terpri)
[10:59:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:03:47] <humasect> whoa
[11:03:56] <humasect> why tho
[11:04:44] <dave0> maw
[11:18:17] <kakuhen> ok i can finally open the project under xcode 12.4
[11:18:28] <kakuhen> it only took a tiger vm and a snow leopard vm
[11:19:36] <humasect> hmm
[11:23:15] <kakuhen> its amazing how discoverable the interface in older Xcodes were
[11:23:28] <kakuhen> xcode 12 is a giant mess
[11:26:08] <kakuhen> and the objective-c runtime changed quite a bit since 2010! apparently 'class_nextMethodList' is unavailable
[11:36:04] *** Joins: shka (~herr@109.231.62.239)
[11:39:11] <kakuhen> ah looks like the method was deprecated in Leopard and no longer is available in Objective-C 2.0; too much to patch in one night, so I'm just going to find a way to revert to the good Objective-C (i.e. not 2.0)
[11:42:06] *** Joins: selwyn (~selwyn@user/selwyn)
[11:53:31] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[11:55:46] *** Joins: robin (~robin@user/terpri)
[11:56:07] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[11:57:56] *** Joins: robin (~robin@user/terpri)
[12:25:35] <moon-child> https://www.bedroomlan.org/hardware/fungus/
[12:25:35] -ixelp- Fungus: the Befunge CPU | BedroomLAN
[12:26:53] <selwyn> big fungus
[12:35:46] <edgar-rft> is that the first computer made from foot fungus?
[12:36:20] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:51] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:48:36] <hayley> "If you think this is extreme, remember they were thinking about Java machines at one point." Yeah, Java machines would have been cool. Except that you usually trap and emulate instructions in software.
[12:50:41] <selwyn> > Following the example of the (in)famous Lisp machines
[12:51:08] * hayley uploaded an image: (73KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/EYWdLdSEnwInZTPyZiPlPxDv/randall-smith.jpeg >
[12:52:18] <selwyn> > Funge machines (like Lisp machines before them) can be utilised in the exploration of hack value, and as a means of punishing cocky undergraduates who think programming is an activity best done using a mouse.
[12:52:51] <selwyn> irritating that the author assumes that others share his meme goals
[12:53:15] <hayley> GILBERTH GET THE CAMERA I'M GOING TO MAKE FUN OF THE HISTORICAL INACCURACY OF AN ONLINE ARTICLE
[12:53:16] <selwyn> symbolics was simply a practical joke taken too far
[12:53:19] <hayley> "Haha Dynamic Windows goes brrrr"
[12:55:04] * gilberth takes pictures. *click* *tss-click* *click*
[12:55:38] <gilberth> selwyn: Could you join hayley for a nice shot?
[12:55:46] <hayley> https://www.youtube.com/watch?v=ud0HhzAK30w ← using a Lispm without a mouse
[12:55:46] -ixelp- SYMBOLICS CONCORDIA ONLINE DOCUMENTATION HYPER TEXT MARKUP 1985 - YouTube
[12:56:32] <hayley> https://www.youtube.com/watch?v=mLRbZJS5A_E
[12:56:33] -ixelp- Mom get the camera!! (Original) - YouTube
[12:56:51] * selwyn poses
[12:57:20] <selwyn> ✌️ 
[12:57:23] * gilberth *click* *tss-click* *zzzzzz* *flash*
[12:58:16] <hayley> I mean, the point of the damn lispms was to have a personal, not-timeshared, windowed machine rather than a timeshared machine, no? So you can't get more wrong than that.
[12:58:50] <gilberth> The point was to use less RAM.
[12:59:25] * hayley groans
[13:01:11] <hayley> .oO( I spy a rainbow-Apple-logo printer? )
[13:02:03] <gilberth> Meanwhile /me find more bugs in more CL implementations. For starters: Try ((lambda (&key ((:a x)) ((:a y))) (list x y)) :a 10)
[13:02:44] <selwyn> i don't understand the reference to programming using a mouse
[13:03:01] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[13:03:59] *** Joins: selwyn (~selwyn@user/selwyn)
[13:04:25] <hayley> "Compile-time error: The keyword :A occurs more than once in the lambda list."
[13:04:48] <gilberth> hayley: How could the Lisp Machine have been multi-user prior to X11? And you could login more than once into a Lisp machine.
[13:04:50] <selwyn> is that meant to be a reference to smalltalk?
[13:04:55] <edgar-rft> selwyn: you train the mouse with cheese to run in various ways over the keyboard and type the code for you
[13:04:58] <hayley> Clozure is wrong, ECL gets confused...
[13:05:18] <gilberth> hayley: Exactly. You should get (10 10).
[13:05:28] <hayley> gilberth: I said the opposite, that they were notably _not_ multi-user?
[13:05:31] <gilberth> CLISP, ACL, ABCL are fine.
[13:06:09] <hayley> I am an egoist bastard, so I will assume whatever SICL does is normative.
[13:06:35] <gilberth> hayley: How could they have been? They would have needed a network graphics protocol or multiple graphics boards and a kind of switch for the video signal.
[13:07:03] <gilberth> hayley: Is that why you are in love with Self?
[13:07:10] <hayley> gilberth: Right. But a selling point (AIUI) _was_ graphics and mice, so...
[13:07:47] <hayley> gilberth: That I am an egoist? Yes.
[13:07:52] * hayley uploaded an image: (66KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/pTMpcnoUWzygesgVvhxKPIct/self-flag.jpeg >
[13:10:26] * gilberth considers the ANSI standard normative.
[13:11:52] <hayley> SICL allows for it, though I still have the whole compiler enabled and so I just got a whole graph of assembler in my face.
[13:14:14] <hayley> I never got along well with the keyword argument parsing loop anyway.
[13:14:49] <hayley> "Don't we have to trace these arguments?" "Not in the argument parsing loop." "But &REST conses?" "Well, okay."
[13:17:11] <hayley> .oO( Surely with all the damn having-cake analogies, someone has said "You will be baked, and then there will be cake." )
[13:28:53] <selwyn> shka: metal angels https://www.youtube.com/watch?v=40KcrrfbJ6o
[13:28:53] -ixelp- Why Bible Accurate Angels Are So Creepy - YouTube
[13:29:17] <shka> selwyn: yeah, i know
[13:29:21] <selwyn> get statues of them put up in poland
[13:29:51] <selwyn> a lovely gyroscope made of eyes next to a catholic church
[13:29:52] <shka> i mean, that's the point of the religion
[13:30:10] <shka> religious experience is supposed to shake you up 
[13:30:29] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
[13:31:06] <selwyn> perhaps unsustainable that secular culture doesn't have a similar outlet
[13:31:35] <shka> well, we do have metal music
[13:31:51] <shka> which also goes for the shock value :P
[13:32:21] <hayley> You just read the Bible anyway for shock value.
[13:32:23] <shka> besides Christianity lost it's shock value in the west 
[13:32:52] <shka> consuming the flesh of the human sacrifice is just not what it used to be
[13:32:56] <hayley> https://twitter.com/speakjava/status/1423315985533214720/photo/1
[13:33:17] <dave0> i read the bible because i thought it would tell me about god.. i was wrong
[13:33:59] <shka> https://www.youtube.com/watch?v=eEORxpfQMTA&list=PL6ogdCG3tAWj78lwIVHjSU9pqYwa1KM9b
[13:33:59] -ixelp- Up the Beach - YouTube
[13:34:13] *** Joins: ln43 (~ln43@user/ln43)
[13:39:35] <hayley> If I have some independent tests with a p chance of succeeding, and I do m trials, how can I figure the probability that I have a run of n successes?
[13:39:56] <ln43> hi hayley
[13:40:08] <ln43> i have troubles with logic problems
[13:40:08] <hayley> Hi ln43
[13:40:22] <shka> hayley: exactly N?
[13:40:34] <hayley> OK, N or more.
[13:40:39] <selwyn> um
[13:41:58] <shka> ok, exact N is easy, you simply need to figure out what is the chance for having 1-n/m failures
[13:43:00] <shka> uh, wait a second, this ain't right
[13:43:04] <selwyn> a run of successes
[13:43:06] <hayley> https://www.askamathematician.com/2010/07/q-whats-the-chance-of-getting-a-run-of-k-successes-in-n-bernoulli-trials-why-use-approximations-when-the-exact-answer-is-known/
[13:43:08] -ixelp- Q: What’s the chance of getting a run of K or more successes (heads) in a row in N Bernoulli trials (coin flips)? Why us [...]
[13:43:39] <shka> it's been a while since i had to solve somehing like this
[13:44:03] <shka> ok so let's go step by step
[13:44:14] <shka> the first test has p
[13:44:42] <shka> if p succeeds then you are left with N-1 test, if not, still N 
[13:45:49] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[13:46:03] <shka> uh, i don't want to think about it :(
[13:46:05] <shka> sorry
[13:46:56] <hayley> Apparently the probability is close enough to getting the same number of successes out of a run.
[13:47:25] <selwyn> way to do this kind of thing is to use the law of total probability conditional on some clever event, which is what the answer does
[13:48:44] * hayley load(distrib)$ in Macsyma
[13:49:09] <shka> wait a second
[13:49:18] <shka> hayley: yeah, good thinking
[13:49:31] <shka> that's the way
[13:50:23] <selwyn> but there is an exact solution lol
[13:51:15] <selwyn> i like these questions
[13:51:23] <hayley> https://twitter.com/royvanrijn/status/1435166277128052738
[13:51:45] <shka> selwyn: yes, but you can approach this by calculating first the probability of exactly N
[13:51:52] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[13:52:03] <shka> then you can simply calculate chance of getting exactly 0 in the M-N
[13:52:08] <hayley> So, if the probability of getting 8 8s in a hash in a row is about the same as getting 8 8s in a hash wherever, then it's like a 2.7% chance you find one randomly?
[13:52:21] <shka> and then 1-the result
[13:52:38] <shka> and then sum with the result of getting exactly N
[13:53:07] <shka> and voila, you have the answer, right?
[13:53:08] <hayley> Even 12 is in the mere 10^-4s, and 16 is in the 10^-6s.
[13:54:21] <hayley> Sadly I think the person got lucky once with one idiot buyer.
[13:56:09] <hayley> I guess I could also simulate to get an approximate answer, too.
[13:56:29] <selwyn> can we read one of these poems? or is the idea that you have to pay $1000 to be able to
[13:57:00] <hayley> selwyn: idk, just pick your favourite poem, write a CL program to flip character cases, make $1000?
[13:58:40] <selwyn> that's a lot of effort
[13:58:46] <selwyn> would rather spend $1000 instead
[13:59:58] <hayley> My maths seems wrong actually. It seems a run of 5 8s in a row (of a 64 hex character, i.e. 256 bit hash) has a probability of 5e-5 or so.
[14:01:03] <hayley> BUT indeed the probability is divided by about 16 or so for each additional character.
[14:02:06] <hayley> So, my estimate is like 1.22e-8 for 8 8s in a row. Which is relatively tiny.
[14:04:55] <selwyn> i don't understand where this estimate comes from
[14:06:03] <hayley> 5e-5 for a run of 5 or more, then divide by 16 for each additional character. Rather unmathematical still.
[14:06:41] <selwyn> the article argues convincingly that nqp^k is the probability when n >> k
[14:06:49] <selwyn> but n and k are close in value here
[14:07:49] <hayley> K=8 successes or more, N=64 hex characters. I guess a factor of 8 is kinda close?
[14:09:13] *** Quits: ln43 (~ln43@user/ln43) (Quit: ln43)
[14:09:44] <hayley> That formula is surprisingly close to what I simulated for K=5 though, giving 5.72e-5 (and 1.4e-8 for K=8).
[14:14:07] <hayley> Amusingly we have SHA256 acceleration instructions on x86-64, so it shouldn't take that long <https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=sha256>
[14:14:08] -ixelp- Intel® Intrinsics Guide
[14:25:04] <shka> hopefully it was not disabled by a microcode update :P
[14:27:59] *** Joins: pjb (~pjb@user/pjb)
[14:40:20] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[14:49:58] <hayley> Don't think it has been fortunately.
[15:00:21] *** Joins: selwyn (~selwyn@user/selwyn)
[15:22:24] <gilberth> I got a copy of a message send on ebay by email and it says "Kirchenstra&amp;amp;szlig;e". How incredible hard must it be to get your damn encoding correct? I ought to quit using anything beyond US-ASCII.
[15:23:48] <gilberth> Notice the double "amp".
[15:24:14] <gilberth> Anyhow more bugs. I should count them.
[15:26:28] <gilberth> Or write a "Your Daily Bug Blog".
[15:27:29] <dave0> gilberth: 2 amps but is it really three levels of encoding?    &amp;amp;szlig;  ->   &amp;szlig;   ->   &szlig;   -> something
[15:28:11] <ck_> I love Kirchenstra&ße .. very nice place
[15:28:40] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:29:02] <selwyn> if( kirchenstra && e){...}
[15:39:23] <gilberth> I'll use "ss" the next time. Good bye 8-bit.
[15:39:32] <edgar-rft> let's write a Common Lisp implementation where the number of bugs is bigger than the available memory
[15:41:53] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[15:42:25] <hayley> So, they only had to do minor juggling to the Smalltalk-80 class hierarchy to get a good type system for Strongtalk working. The CL class hierarchy barely has inheritance, only in the condition system.
[15:42:27] <gilberth> ck_: Try moving to some "St Paul's St", you will have fun with SQL.
[15:42:32] <hayley> http://bracha.org/nwst.html
[15:43:54] <hayley> Interesting that they have protocols separate from classes.
[15:55:44] <gilberth> If everything would have been encoded as S-expressions, we won't see such issues. Will there ever be enlightment? I wonder what the total annual costs are for not doing.
[16:02:56] <hayley> https://www.youtube.com/watch?v=53N99Nim6WE
[16:02:57] -ixelp- Echoes - YouTube
[16:39:39] <shka> how can launch emacsclient and instantly switch to slime repl?
[16:41:06] <shka> only initial-buffer-choice
[16:41:08] <shka> LAME
[16:43:02] <hayley> https://www.reddit.com/r/BossFights/comments/lfhyuy/varus_honcho_the_immune/
[16:43:03] -ixelp- Varus Honcho the Immune : BossFights
[16:47:57] <hayley> https://www.youtube.com/watch?v=GAj89NEqX-M
[16:47:58] -ixelp- Bombers - YouTube
[17:11:19] <hayley> Would you bother to have a global "nursery" with thread local nurseries too?
[17:11:38] <hayley> If our phantom thread local nursery fails, I guess some generational collection would help.
[17:27:25] <shka> i should give a shot at this coalton language
[17:28:40] <shka> my problems with the static typing and complex type systems can be ignored if the whole thing interops with CL without a problem
[17:42:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:42:53] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:09:27] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:31:30] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:43:29] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[18:44:33] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:52:18] <pl> Isn't coalton an old SML implementation? 
[18:55:01] <shka> pl: you refer to name or the new lisp project?
[18:56:04] <shka> https://github.com/coalton-lang/coalton
[18:56:08] <shka> look how cool it si
[18:56:17] <shka> and it is embedded within lisp
[18:56:25] <shka> and you can interop no problem
[18:56:47] * shka thinks that this is pretty impressive
[19:35:00] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 265 seconds)
[19:53:50] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[20:15:59] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Read error: Connection reset by peer)
[20:17:56] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[20:17:56] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
[20:44:22] *** Joins: Alfr (~Alfr@user/alfr)
[21:04:46] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[21:07:00] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:09:26] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Ping timeout: 260 seconds)
[21:10:49] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:59:52] *** Joins: ln43 (~ln43@user/ln43)
[22:03:22] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[22:51:17] *** Joins: vats (~vats@103.70.83.191)
[23:28:10] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
