[00:01:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[00:01:34] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Quit: Leaving)
[00:04:50] <edgar-rft> jcowan: The CLHS code examples were added by Kent Pitman, they are not part of the ANSI specification.
[00:09:31] <jcowan> This is not a code example, it's an example in a definition.
[00:09:37] <jcowan> from 1.4.2
[00:09:43] <jcowan> An error should be signaled
[00:09:43] <jcowan> This means that an error is signaled in safe code, and an error might be signaled in unsafe code. Conforming code may rely on the fact that the error is signaled in safe code. Every implementation is required to detect the error at least in safe code. When the error is not signaled, the ``consequences are undefined'' (see below). For example, ``+ should signal an error of type type-error if any argument is not of type number.''
[00:12:45] <edgar-rft> okay, thank you, will read the logs again :-)
[00:18:07] *** Quits: kpoeck (~kpoeck@87.140.193.0) (Ping timeout: 246 seconds)
[00:20:25] *** Joins: Oladon (~olad@98.43.81.226)
[00:20:29] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[00:29:31] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[00:35:21] *** Joins: karlosz (~karlosz@router.cloyne.org)
[00:48:17] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 265 seconds)
[00:54:32] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[01:03:23] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.2)
[01:03:35] *** Joins: mariari (~mariari@user/mariari)
[01:11:43] *** Joins: pegaso (~pegaso@131.72.121.184)
[01:15:38] *** Quits: pegaso (~pegaso@131.72.121.184) (Quit: Leaving)
[01:16:37] *** Joins: pegaso (~pegaso@131.72.121.184)
[01:18:54] *** Joins: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca)
[01:24:13] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[01:30:30] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[01:33:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[01:34:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[01:35:47] *** Quits: reb (~brown@2603-7000-d93b-e900-9955-145f-7a53-2b25.res6.spectrum.com) (Remote host closed the connection)
[01:37:49] *** Quits: pegaso (~pegaso@131.72.121.184) (Quit: Leaving)
[01:58:44] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:06:18] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 272 seconds)
[02:09:34] *** Quits: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca) (Ping timeout: 258 seconds)
[02:26:42] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[02:41:22] *** Joins: luis (~luis@lisp/luis)
[02:41:22] *** ChanServ sets mode: +o luis
[02:43:05] *** Quits: frgo (~frgo@p200300deef181d00ac44e00ba785ec23.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:43:32] *** Joins: frgo (~frgo@p200300deef181d00ac44e00ba785ec23.dip0.t-ipconnect.de)
[02:44:26] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[02:44:47] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:45:34] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 272 seconds)
[02:46:44] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[02:47:29] *** Joins: akoana (~ah@user/akoana)
[02:48:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:53:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[02:59:57] *** Quits: pve (~pve@188-67-212-101.bb.dnainternet.fi) (Quit: leaving)
[03:00:31] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[03:20:07] *** Quits: rgherdt (~rgherdt@ip5f5af43c.dynamic.kabel-deutschland.de) (Ping timeout: 246 seconds)
[03:25:28] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 258 seconds)
[03:42:14] *** Joins: cjb (~cjb@user/cjb)
[03:45:05] *** Joins: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca)
[03:47:35] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[03:57:45] *** Joins: igemnace (~ian@user/igemnace)
[04:03:28] *** Quits: random-nick (~random-ni@87.116.179.201) (Ping timeout: 272 seconds)
[04:07:48] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[04:11:47] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:14:18] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 240 seconds)
[04:14:35] *** Quits: lotuseater (~user@p200300e787091b00dd87cc9c4ffe1d4b.dip0.t-ipconnect.de) (Ping timeout: 255 seconds)
[04:15:04] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:20:18] *** Joins: Devon (~user@c-24-2-157-5.hsd1.ma.comcast.net)
[04:20:32] *** Devon is now known as Devon7
[04:20:40] *** Devon7 is now known as Devon
[04:21:32] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[04:21:41] *** Joins: zacts (~zacts@user/zacts)
[04:24:19] *** Quits: zacts (~zacts@user/zacts) (Client Quit)
[04:30:27] *** Joins: notzmv (~zmv@user/notzmv)
[04:31:43] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:37:10] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:40:00] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:40:08] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:42:10] *** Joins: zacts (~zacts@user/zacts)
[04:43:58] <recordgroovy> I've read how to add a library to Quicklisp, and it seems pretty straightforward. Any common mistakes newbies make that isn't usually covered in FAQ?
[04:44:00] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[04:46:32] <Xach> recordgroovy: making a new unit test library
[04:46:43] <Xach> i think that case is mentioned though
[04:46:48] <recordgroovy> haha, I assure you it's not a unit test library, lol
[04:47:01] <recordgroovy> nor is it a new base64 library
[04:50:19] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[04:57:12] <Xach> recordgroovy: what is it?
[05:01:37] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[05:04:36] <recordgroovy> I plan to fork sha1 if my PR gets denied so that I can use it with projects that depend on cl-base64
[05:04:49] <recordgroovy> Xach: https://github.com/massung/sha1/pull/5
[05:05:12] <recordgroovy> Found out this morning someone made the exact same PR about 18 months ago, so I'm expecting this one to close too.
[05:06:08] <recordgroovy> (This is part of a two-stage process to remove ironclad entirely from clack and websocket-driver, because fukamachi depends on the entire crypto toolkit just for SHA1 hashes)
[05:06:10] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 272 seconds)
[05:28:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 255 seconds)
[05:46:43] *** Joins: Oladon (~olad@98.43.81.226)
[05:55:49] *** Joins: stylewarning (sid241636@id-241636.brockwell.irccloud.com)
[06:10:41] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 258 seconds)
[06:21:08] *** Quits: mason (~mason@redhat/mason) (Quit: leaving)
[06:22:57] *** Joins: mason (~mason@redhat/mason)
[06:26:36] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 272 seconds)
[06:26:40] *** Joins: karlosz (~karlosz@router.cloyne.org)
[06:28:53] *** Quits: karlosz (~karlosz@router.cloyne.org) (Client Quit)
[06:34:32] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 255 seconds)
[06:36:13] *** Quits: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca) (Remote host closed the connection)
[06:50:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:50:30] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[06:54:49] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[06:54:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[07:32:02] <beach> Good morning everyone!
[07:43:19] *** Joins: cmack (~charlie@99-97-140-18.lightspeed.nsvltn.sbcglobal.net)
[07:45:11] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:54:09] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 268 seconds)
[08:14:00] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:15:17] *** Joins: notzmv (~zmv@user/notzmv)
[08:16:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:31:22] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[08:34:10] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[08:53:40] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:07:41] *** Joins: whoschen (~user@153.99.142.230)
[09:17:30] <contrapunctus> beach: hey :) Have you seen this? Reminded me of CLOSOS - http://mumble.net/~jar/pubs/secureos/secureos.html
[09:18:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[09:20:05] *** Quits: whoschen (~user@153.99.142.230) (Remote host closed the connection)
[09:24:06] <beach> contrapunctus: I don't think I have seen it.  Reading now...
[09:26:05] <beach> Looks very similar.
[09:30:24] <beach> I'll read it more carefully later.  Today is Monday and Monday mornings are chaotic around here.  From a brief look, it looks more theoretical and less pragmatic than CLOSOS.  I am especially looking for the cost of invoking an external function.
[09:31:21] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (*.net *.split)
[09:31:21] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[09:31:21] *** Quits: stylewarning (sid241636@id-241636.brockwell.irccloud.com) (*.net *.split)
[09:31:26] *** Joins: phoe_ (~phoe@2001:19f0:5:689f:5400:2ff:fe77:b1de)
[09:31:37] *** Joins: stylewarning (sid241636@id-241636.brockwell.irccloud.com)
[09:31:49] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[09:36:12] *** Quits: |3b| (bbb@user/3b/x-2324788) (*.net *.split)
[09:36:12] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[09:36:12] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (*.net *.split)
[09:36:12] *** Quits: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) (*.net *.split)
[09:36:12] *** Quits: jealousmonk (~jealousmo@brettgilio.com) (*.net *.split)
[09:36:12] *** Quits: spec (~mrSpec@user/spec) (*.net *.split)
[09:36:21] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[09:36:31] *** Joins: |3b| (bbb@user/3b/x-2324788)
[09:36:43] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[09:37:02] *** Joins: danieli (~danieli@user/danieli)
[09:37:59] *** Joins: jealousmonk (~jealousmo@brettgilio.com)
[09:41:25] *** Quits: jsatk (sid304796@id-304796.brockwell.irccloud.com) (*.net *.split)
[09:41:25] *** Quits: pl (sid98063@id-98063.brockwell.irccloud.com) (*.net *.split)
[09:41:26] *** Quits: totoro (~totoro@173.82.187.126) (*.net *.split)
[09:41:26] *** Quits: mister_m (~user@c-73-209-97-9.hsd1.il.comcast.net) (*.net *.split)
[09:41:26] *** Quits: travv0 (sid293381@user/travv0) (*.net *.split)
[09:41:34] *** Joins: mister_m (~user@c-73-209-97-9.hsd1.il.comcast.net)
[09:41:52] *** Joins: pl (sid98063@id-98063.brockwell.irccloud.com)
[09:41:58] *** Joins: travv0 (sid293381@user/travv0)
[09:41:58] *** Joins: jsatk (sid304796@2001:67c:2f08:5::4:a69c)
[09:42:07] *** Joins: totoro (~totoro@173.82.187.126)
[09:42:13] *** Quits: totoro (~totoro@173.82.187.126) (Changing host)
[09:42:13] *** Joins: totoro (~totoro@user/totoro)
[09:42:20] *** ChanServ sets mode: +o pl
[09:44:23] <beach> I would have liked to see a discussion of the efficiency of the mechanisms being used.
[09:44:58] *** Quits: rdrg109 (~rdrg109@51.195.232.80) (*.net *.split)
[09:44:58] *** Quits: les (znc@user/les) (*.net *.split)
[09:44:58] *** Quits: dbotton (sid492350@id-492350.tooting.irccloud.com) (*.net *.split)
[09:44:58] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[09:44:58] *** Quits: dale (dale@user/dale) (*.net *.split)
[09:44:58] *** Quits: gko (~user@user/gko) (*.net *.split)
[09:44:58] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[09:44:58] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[09:44:58] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[09:44:58] *** Quits: victor (sid208353@user/victor) (*.net *.split)
[09:44:58] *** Quits: drmeister (sid45147@id-45147.charlton.irccloud.com) (*.net *.split)
[09:44:58] *** Quits: polygon-op (~jack@user/jackdaniel) (*.net *.split)
[09:44:58] *** Quits: cpape (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[09:45:04] *** Joins: cpape` (~user@2a01:4f9:c010:632d::1)
[09:45:04] *** Joins: polygon-1p (~jack@turtleware.eu)
[09:45:07] *** Joins: lonjil (~quassel@user/lonjil)
[09:45:09] *** Joins: drmeister (sid45147@id-45147.charlton.irccloud.com)
[09:45:13] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[09:45:17] *** Joins: gko (~user@user/gko)
[09:45:26] *** Joins: les (znc@user/les)
[09:45:26] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[09:45:45] *** Joins: dbotton (sid492350@id-492350.tooting.irccloud.com)
[09:46:02] *** Joins: dale (dale@2600:3c02::f03c:92ff:feb4:61d1)
[09:46:04] *** Quits: dale (dale@2600:3c02::f03c:92ff:feb4:61d1) (Changing host)
[09:46:04] *** Joins: dale (dale@user/dale)
[09:46:05] *** Joins: victor (sid208353@id-208353.tinside.irccloud.com)
[09:46:21] *** Joins: hexology (~hexology@user/hexology)
[09:46:22] *** Joins: dcx (~dcx@user/dac)
[09:49:01] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:49:08] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[10:11:09] *** Joins: spiaggia (~user@2a01:cb19:150:3400:3de5:a95d:ae55:729)
[10:15:59] *** Joins: shka (~herr@109.231.62.239)
[10:18:37] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 265 seconds)
[10:30:47] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:34:29] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[10:36:02] *** Quits: amb007 (~a_bakic@187.251.23.93.rev.sfr.net) (Ping timeout: 252 seconds)
[10:43:18] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[10:45:50] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:49:03] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[10:54:34] *** Quits: lottaquestions (~nick@2607:fa49:5040:5c00:148d:6139:6608:cb92) (Ping timeout: 240 seconds)
[11:08:08] *** Quits: robin__ (~robin@user/terpri) (Ping timeout: 255 seconds)
[11:08:28] *** Joins: lottaquestions (~nick@2607:fa49:5040:5c00:d1b4:62f9:5f70:6a47)
[11:10:49] *** Joins: rt (~robin@user/terpri)
[11:11:09] *** rt is now known as robin
[11:12:45] *** Quits: lottaquestions (~nick@2607:fa49:5040:5c00:d1b4:62f9:5f70:6a47) (Client Quit)
[11:13:03] *** Joins: lottaquestions (~nick@2607:fa49:5040:5c00:d1b4:62f9:5f70:6a47)
[11:13:51] *** Joins: prxq (~quassel@x4dbe0c39.dyn.telefonica.de)
[11:15:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:19:06] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:206a:6dd4:1079:8839)
[11:20:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[11:28:29] *** Quits: prxq (~quassel@x4dbe0c39.dyn.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[11:36:54] *** Parts: spiaggia (~user@2a01:cb19:150:3400:3de5:a95d:ae55:729) (ERC Version 5.3 (IRC client for Emacs))
[11:37:04] *** Joins: pjb (~pjb@user/pjb)
[11:41:17] <beach> I would like to take this opportunity to thank everyone who gave me remarks (by private message) on this proposal: https://github.com/s-expressionists/wscl/blob/main/wscl-issues/proposed/aref-accessor-type-error I would still like more remarks and results from more implementation on the test cases.
[11:44:47] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:46:21] <pjb> I'd also add as exceptional situation, invalid indices.  And specify signaling a INDEX-OUT-OF-BOUND-ERROR condition.
[11:46:36] *** Joins: rgherdt_ (~rgherdt@ip5f5af43c.dynamic.kabel-deutschland.de)
[11:47:08] <beach> That's planned additional issue.  Right now I am soliciting feedback on this one.
[11:47:13] <pjb> On the other hand: (aref #0A 42 ) #| --> 42 |#    (aref 42 ) #| ERROR: The value 42 is not of the expected type array. |#
[11:47:20] <pjb> couldn't we make an extension?
[11:48:06] <pjb> That said, perhaps no, because: (aref #0A "foo") #| --> "foo" |#   (aref "foo") #| ERROR: "foo" cannot be accessed with 0 subscripts. |#
[11:48:20] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[11:50:42] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:206a:6dd4:1079:8839) (Ping timeout: 255 seconds)
[11:51:30] *** Parts: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (WeeChat 3.0.1)
[11:53:04] *** Quits: lottaquestions (~nick@2607:fa49:5040:5c00:d1b4:62f9:5f70:6a47) (Remote host closed the connection)
[11:53:29] *** Joins: lottaquestions (~nick@2607:fa49:5040:5c00:600d:8cfc:ec77:20ca)
[12:00:26] *** Joins: treflip (~user@95.79.32.99)
[12:02:44] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[12:02:58] *** Joins: dsk (~dsk@user/dsk)
[12:03:10] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:11:49] *** Joins: pve (~pve@176-93-63-239.bb.dnainternet.fi)
[12:18:50] <pillton> pjb: +1 for the invalid indices error as well.
[12:19:47] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: Sorry. Have to go. I'll check the logs tomorrow.)
[12:20:31] <beach> What error type should be signaled in that case?
[12:23:06] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[12:23:43] <beach> I guess an index out of bounds is a type error but what about the wrong number of indices?
[12:24:49] <pjb> beach: we need to define a consistent set of conditions to be signaled from CL.  Conditions are underspecified currently.
[12:25:37] <pjb> Probably all the error conditions should also be "simple-conditions" ie, have also a format-control-string and a format-arguments…
[12:25:38] <beach> That's outside the scope of WSCL though.  All I can do is give the standard condition type.
[12:25:50] <pjb> Oh. Ok.
[12:26:52] <beach> But it's a very good idea, and I am following this idea in SICL.
[12:27:42] <pjb> beach: https://termbin.com/r1q7
[12:27:59] <beach> WSCL won't include any extensions to the standard.  It will only specify behavior that is unspecified or undefined in the standard, and that nearly all implementations agree upon.
[12:28:41] <pjb> I don't like type-error on index out of bound.  Everything can be a type-error then!
[12:29:03] <pjb> program-error? Wrong your code was of the wrong type! (the type valid-program).
[12:29:27] <pjb> end-of-file? wrong, your stream was of the wrong type (the type stream-of-sufficient-length).
[12:29:30] <pjb> Types are idiotic.
[12:29:55] <pjb> I like types less and less with time…
[12:30:02] <beach> I see.
[12:30:43] <beach> I think type error is fine, but as a superclass of the real condition type to be signaled.
[12:31:01] <beach> But then, I can't specify that without extensions.
[12:34:17] <pjb> or program-error if it's determined at compilation-time.
[12:35:17] <beach> Sure.
[12:36:35] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:38:58] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:45:33] *** Joins: dsk (~dsk@user/dsk)
[12:52:49] <contrapunctus> pjb: what do you prefer, instead of types? 🤔
[12:55:02] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:56:13] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[12:56:15] *** Lord_of_Life_ is now known as Lord_of_Life
[12:57:32] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:20:18] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:23:39] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 276 seconds)
[13:44:46] <pjb> contrapunctus: not to replace them, but to stress them less.
[13:46:11] <beach> There are no standardized types that are subclasses of TYPE-ERROR are there?
[13:46:25] *** polygon-1p is now known as jackdaniel
[13:47:05] *** Quits: jackdaniel (~jack@turtleware.eu) (Changing host)
[13:47:05] *** Joins: jackdaniel (~jack@user/jackdaniel)
[13:47:05] *** ChanServ sets mode: +o jackdaniel
[13:47:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:48:12] <beach> I think this discussion suggests another project:  Create a set of subclasses of standard condition classes for common error situations.  Provide excellent English-language condition reporters for them.
[13:48:52] <beach> And provide initargs and accessors as usual, and create documentation for those.
[13:51:45] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[13:53:37] <pjb> two things are needed: good English, and enough data in the slots to make them usable automatically in handlers and restarts…
[13:54:34] <pjb> And for the specification, where they're signaled from.  Allowing conditions to be signaled deep from the bowels of the implementation can be a problem for automatic handling.
[13:55:25] <beach> Well, the creator of such a library can not dictate how the conditions are going to be used by Common Lisp implementations.
[13:55:39] <beach> They can suggest, of course.
[13:57:22] *** Quits: cmack (~charlie@99-97-140-18.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[14:14:40] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[14:22:28] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Quit: Colleen)
[14:23:22] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[14:31:30] *** Joins: kpoeck (~kpoeck@80.149.96.222)
[14:42:05] *** Quits: frgo (~frgo@p200300deef181d00ac44e00ba785ec23.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:42:33] *** Joins: frgo (~frgo@p200300deef181d0088ee4d6446ecc8ee.dip0.t-ipconnect.de)
[14:51:40] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[14:56:33] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[15:17:05] *** Joins: random-nick (~random-ni@87.116.177.50)
[15:35:14] *** Joins: VincentVega (~user@212.241.16.202)
[15:42:02] *** Joins: silasfox (~sbv@2001-4dd6-b9c3-0-8b12-f9dd-91e5-ed9c.ipv6dyn.netcologne.de)
[15:50:34] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[15:52:18] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:55:52] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 246 seconds)
[16:01:33] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[16:03:24] *** Quits: kpoeck (~kpoeck@80.149.96.222) (Quit: Client closed)
[16:14:08] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[16:14:51] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 255 seconds)
[16:20:35] *** Joins: yitzi (~yitzi@97-64-230-163.client.mchsi.com)
[16:23:03] *** Quits: raeda (~raeda@72.49.219.33) (Ping timeout: 265 seconds)
[16:24:45] <shka> beach: https://github.com/scymtym/more-conditions
[16:24:57] <shka> but you probably know this already
[16:25:47] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:26:13] *** Joins: amb007 (~a_bakic@26.196.23.93.rev.sfr.net)
[16:27:09] <shka> huh, scymtym made this
[16:27:18] <shka> i didn't even knew this
[16:28:48] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[16:30:20] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[16:32:30] *** Quits: easye (~user@oxi.slack.net) (Read error: Connection reset by peer)
[16:32:38] *** Quits: minion (~minion@common-lisp.net) (Killed (NickServ (GHOST command used by minion1)))
[16:32:46] *** Joins: minion (~minion@common-lisp.net)
[16:33:32] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[16:34:03] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[16:34:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[16:34:11] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (Ping timeout: 252 seconds)
[16:34:30] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Ping timeout: 256 seconds)
[16:34:45] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[16:35:05] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[16:35:07] *** Joins: specbot (~specbot@common-lisp.net)
[16:35:15] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:35:25] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:36:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[16:40:56] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 272 seconds)
[16:41:34] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 272 seconds)
[16:41:53] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[16:45:11] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[16:46:29] *** Joins: raeda (~raeda@72.49.219.33)
[17:04:29] *** Joins: lotuseater (~user@p200300e787091b00dd87cc9c4ffe1d4b.dip0.t-ipconnect.de)
[17:06:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:10:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[17:12:16] *** phoe_ is now known as phoe
[17:12:31] *** Quits: phoe (~phoe@2001:19f0:5:689f:5400:2ff:fe77:b1de) (Changing host)
[17:12:31] *** Joins: phoe (~phoe@user/phoe)
[17:15:52] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[17:17:00] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:17:36] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Client Quit)
[17:26:23] <beach> shka: I didn't know about it either, or I forgot about it.  But yes, that seems like the kind of project I was talking about.
[17:37:24] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 256 seconds)
[17:37:33] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[17:43:37] *** Joins: notzmv (~zmv@user/notzmv)
[17:43:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-156.dsl.bell.ca)
[17:47:51] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[17:53:21] *** Joins: Bike (~Glossina@71.69.170.70)
[17:53:21] *** ChanServ sets mode: +o Bike
[17:53:27] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-156.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:54:38] *** Quits: amb007 (~a_bakic@26.196.23.93.rev.sfr.net) (Ping timeout: 272 seconds)
[17:55:16] *** Quits: yitzi (~yitzi@97-64-230-163.client.mchsi.com) (Ping timeout: 272 seconds)
[17:55:42] *** Joins: amb007 (~a_bakic@26.196.23.93.rev.sfr.net)
[18:00:20] *** Quits: amb007 (~a_bakic@26.196.23.93.rev.sfr.net) (Ping timeout: 272 seconds)
[18:00:48] *** Joins: amb007 (~a_bakic@26.196.23.93.rev.sfr.net)
[18:05:24] *** Quits: amb007 (~a_bakic@26.196.23.93.rev.sfr.net) (Ping timeout: 272 seconds)
[18:06:05] *** Joins: IAmRasputin (~ryan.gann@c-71-192-113-162.hsd1.ma.comcast.net)
[18:07:58] *** Joins: amb007 (~a_bakic@244.251.23.93.rev.sfr.net)
[18:13:02] *** Joins: dsk (~dsk@user/dsk)
[18:13:38] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[18:13:45] <beach> I amended this issue: https://github.com/s-expressionists/wscl/blob/main/wscl-issues/proposed/aref-accessor-type-error after having read the guidelines for the proposal format.  Remarks are welcome.
[18:15:01] *** Joins: pegaso (~reis-r@131.72.121.184)
[18:15:56] <beach> Oops, forgot to update the edit history.  Done now.
[18:27:12] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 276 seconds)
[18:30:51] <shka> beach: honestly, i would also propose that the rank of the array must match the number of incidences passed, but this is arguably stretching it
[18:31:41] <beach> *sigh*
[18:31:59] <beach> As I have said at least twice, that is a separate planned issue.
[18:32:12] <beach> Coming up in fact.  Working on it right now.
[18:32:22] *** Quits: amb007 (~a_bakic@244.251.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[18:32:35] <shka> oh, ok, sorry
[18:32:50] <beach> I wonder why people give me remarks precisely on what I didn't ask for and never give any remarks on what I explicitly asked for.
[18:33:20] <beach> What I was explicitly asking people to do was to run the examples in implementations at their disposal and tell me the result.
[18:34:07] <Bike> " There are no standardized types that are subclasses of TYPE-ERROR are there?" there's simple-type-error, and i think that's it, based on class-direct-subclasses
[18:34:27] <beach> I think you are right.
[18:36:13] <Bike> the one and two calls result in type errors in clasp head and ccl 1.12
[18:36:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[18:36:38] *** Joins: amb007 (~a_bakic@143.106.23.93.rev.sfr.net)
[18:36:57] <Bike> unsurprisingly
[18:38:10] <Bike> my main thought on this is that there are probably a lot of things like this in the standard, and so writing out this whole issue format for each one will get tedious
[18:38:17] *** Quits: pegaso (~reis-r@131.72.121.184) (Quit: Leaving)
[18:38:29] <beach> New proposed issue: https://github.com/s-expressionists/wscl/blob/main/wscl-issues/proposed/aref-accessor-rank-error
[18:38:57] <beach> Bike: We will find out whether we get too tired of it.
[18:39:18] <shka> same behavior on the ECL
[18:39:54] <beach> shka: Can you give me an exact error?
[18:40:08] <shka> sure, let me run this again
[18:40:19] <pjb> beach: I validate the proposed issue.
[18:40:37] <beach> pjb: Thank you!
[18:40:38] <pjb> Is there a voting process or something?
[18:40:49] <beach> Not sure.  I'll check with scymtym.
[18:41:27] <beach> I can add your name and your opinion to the "Discussion" section.
[18:42:14] <shka> beach: ecl https://gist.github.com/sirherrbatka/ffb732a452a88faa84ed21fce61f8eba
[18:42:21] <shka> simple-type-error
[18:42:42] <shka> one is significantly better then then two
[18:43:33] <shka> i only have ccl, sbcl, and ecl isntalled
[18:43:37] <shka> *installed
[18:43:47] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[18:43:49] <beach> Thank you!
[18:44:27] <shka> ECL is kinda funny in respect of the error messages
[18:45:09] <shka> but i like this style
[18:47:41] <pjb> beach: Definitely.
[18:48:01] <shka> beach: maybe i can setup some cross-checking script with roswell so this would be automated process?
[18:48:03] <pjb> shka: you may add abcl easily enough.
[18:48:18] <beach> shka: Yes, one is better than two.
[18:48:20] <pjb> shka: you may use clall if you wish
[18:48:25] <beach> shka: That would be creat.
[18:48:28] <beach> great
[18:48:32] <shka> what is clall?
[18:49:27] <pjb> https://github.com/informatimago/bin/blob/master/clall
[18:49:41] <pjb> a script that runs cl expressions on all the installed implementations.
[18:49:58] <shka> that is kinda nice
[18:50:30] *** Quits: amb007 (~a_bakic@143.106.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[18:50:37] <pjb> I doesn't support out-of-the-box several versions of the same implementation however.
[18:50:40] *** Joins: amb007 (~a_bakic@149.251.23.93.rev.sfr.net)
[18:50:58] <pjb> That would be nice to compare versions.
[18:51:41] <shka> ros can do that
[18:54:24] <beach> pjb: I added the date to your approval so that you won't automatically approve all future versions.
[18:54:56] *** Joins: VincentV` (~user@212.241.16.202)
[18:55:59] <etimmons> beach: sbcl, abcl, ccl, ecl, clisp, cmucl, and clasp at https://plaster.tymoon.eu/view/2551
[18:56:14] <beach> etimmons: Thank you!
[18:56:29] <etimmons> Along with a script to replicate using Docker (in case you have that installed, but don't want to install the impls natively)
[18:57:13] <beach> Bike: I agree it is tedious, but as jcowan pointed out, this is pretty serious stuff as it has to do with proposed changes to a language that is quite well designed already.  I definitely want to avoid accidentally suggesting precise behavior if (for instance) it may not be practical in some implementations and/or on some backends.
[18:57:32] *** Joins: makomo (~makomo@user/makomo)
[18:57:32] <Bike> sure, i'm just wondering if you couldn't consolidate some changes
[18:57:46] <beach> etimmons: I was totally counting on help with these things, myself concentrating on the proposed issues.
[18:57:48] <Bike> let's see, what could be specified to signal type errors but isn't. compile, compiler-macro-function, macro-function, proclaim. special-operator-p actually does already have the language for some reason
[18:58:39] *** Quits: VincentVega (~user@212.241.16.202) (Ping timeout: 255 seconds)
[19:10:16] <Bike> gonna make a slightly more complete list...
[19:10:51] <beach> Great!
[19:11:58] <Bike> a lot of these definitely make the "simple omission" theory pretty convincing
[19:12:13] <Bike> e.g. error should signal a type-error if it's not given a condition designation, but signal doesn't have to
[19:12:55] <beach> Oh?  Really?
[19:13:15] <Bike> signal has "Exceptional conditions: None"
[19:13:30] <beach> Oh, I see what you mean.
[19:13:30] <Bike> error has, uh, "None", and then "Signals an error of type type-error if datum and arguments are not designators for a condition. " under it
[19:14:23] <beach> Let see, "signals an error" what does that mean?
[19:14:35] <beach> I guess no matter the safety level.
[19:14:51] *** Quits: VincentV` (~user@212.241.16.202) (Ping timeout: 255 seconds)
[19:15:11] <Bike> i think that would be the reading, yeah, although the terminology section says it should read "An error is signaled" i guess
[19:15:42] <beach> Yeah, and as jcowan pointed out, that terminology needs cleaning up too.
[19:18:10] <Bike> oh, jcowan already mentioned coalescing things too
[19:18:57] <beach> I told scymtym I would try to write an issue per day for a while.  I think I have a large source of inspiration now.  Thanks to everyone.  And feel free to write up some issues yourself.  It takes only a few minutes.
[19:20:17] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:30:44] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 256 seconds)
[19:31:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:32:17] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:38:20] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Remote host closed the connection)
[19:38:36] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[19:43:12] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 256 seconds)
[19:57:42] *** Joins: peterhil (~peterhil@mobile-access-bceeac-89.dhcp.inet.fi)
[20:03:52] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:10:46] <jmercouris> What’s the reason for wscl?
[20:11:06] <jmercouris> If all implementations are today conforming, why write it?
[20:12:14] <jackdaniel> take (aref <x> 1 2) ; standard (by ommision) doesn't say what happens when <x> is not an array
[20:12:37] <jackdaniel> in other words (aref 42 1 2) is an undefined behavior; undefined behavior means - may segfault and it is conforming
[20:12:40] <jmercouris> So we are trying to eliminate UB?
[20:12:44] <lotuseater> maybe i miss that out above, but what does WS in WSCL stand for?
[20:12:51] <Bike> "well specified"
[20:12:57] <Bike> jmercouris: at least in safe code
[20:13:02] <lotuseater> ahh, i see ^^ thx
[20:13:02] <jmercouris> I see
[20:13:06] <jackdaniel> not having undefined behaviors in safe code is a good quality
[20:13:11] <Bike> and some things are still undefined
[20:13:19] <jmercouris> I’ve heard not crashing is good
[20:13:31] <jackdaniel> on the other hand for foolhardy code with safety 0 it should be fine to segfault
[20:14:36] <beach> jmercouris: Crashing is way better than silently giving the wrong answer, which is a possibility for undefined behavior.
[20:17:00] <beach> jmercouris: Look at the mess that C is in.  Basically all compilers take advantage of undefined behavior in the standard to do the worst possible thing in the name of performance.  I would like to see a standard for Common Lisp where I can honestly say that the *language* is safe.  Currently I can't.
[20:18:53] <shka> more specifically, it is likely that all CL implementations signal type-error in such situation already
[20:19:37] <shka> so this behavior is already practical, yet unwritten, standard
[20:22:52] <beach> jmercouris: The fact that all major implementations that we have today are conforming is not good enough.  First, "all major" does not mean "all" because we are probably not even aware of all the Common Lisp implementations out there.  Second, some implementation may have missed some cases, and they might want to fix those problems.
[20:22:53] <beach> Third, existing implementation may accidentally reintroduce undefined behavior in future releases.  Fourth, I am hoping that one day implementations will be able to say that they do not conform to just the Common Lisp standard, but also to the stricter WSCL standard.
[20:23:58] <jmercouris> Hm, well you’ve convinced me
[20:24:05] <beach> Great!
[20:24:28] <jmercouris> Too bad I have no reasonable value to offer
[20:24:42] <jmercouris> I’ll just keep making CL more popular via my applications
[20:24:44] <beach> Sure you do if you want o.
[20:24:45] <beach> to
[20:25:01] <jmercouris> I can think of many more people who are more technically competent
[20:25:51] <beach> jmercouris: So you are saying you are not competent, and you have no ambition to become competent?
[20:26:01] <beach> jmercouris: It is really very simple...
[20:26:21] <jmercouris> I’m constantly in the process of becoming competent:-)
[20:26:23] <beach> jmercouris: You read the dictionary items in the Common Lisp HyperSpec, which you need to read anyway if you are an application programmer.
[20:26:34] <beach> jmercouris: Then you think hard about what might go wrong.
[20:26:42] *** Joins: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it)
[20:26:51] <jmercouris> Hm, seems straightforward enough
[20:27:01] <beach> jmercouris: And if the entry doesn't say what happens when something is wrong, then you have an issue.
[20:27:13] <jmercouris> I’ll keep my eyes peeled then
[20:27:19] <beach> Excellent.
[20:27:58] <beach> jmercouris: Like this thing that it is undefined behavior if the entry mentions that an argument must be a certain type, and then no further information is given.
[20:28:34] <Bike> oh, and also i want to mention that for some slightly obscure cases, i expect implementations might not conform. for example, there are many condition accessor functions, e.g. stream-error-stream, that aren't specified to signal a type error. if an implementation just uses define-condition/defclass, the error for the wrong type will be method not found instead of type error.
[20:29:09] <jmercouris> I see
[20:29:35] <beach> Bike: Good point.
[20:31:46] <beach> jmercouris: Let me just show you one simple example...
[20:31:55] <beach> clhs digit-char-p
[20:31:55] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_digi_1.htm
[20:32:00] <beach> Have a look at that page.
[20:32:10] <beach> jmercouris: What happens if char is not a character?
[20:33:11] <beach> clhs 1.4.4.3
[20:33:11] <specbot> The ``Arguments and Values'' Section of a Dictionary Entry: http://www.lispworks.com/reference/HyperSpec/Body/01_ddc.htm
[20:33:17] <beach> jmercouris: ^
[20:33:41] <lotuseater> is this a similar situation when not giving an integer to EVENP/ODDP ?
[20:33:44] <beach> jmercouris: "Except as explicitly specified otherwise, the consequences are undefined if these type restrictions are violated."
[20:34:14] <beach> lotuseater: No.
[20:34:20] <beach> clhs evenp
[20:34:20] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_evenpc.htm
[20:34:49] <beach> lotuseater: " Should signal an error of type type-error if integer is not an integer."
[20:34:56] <lotuseater> yes ok
[20:36:19] <beach> lotuseater: And that terminology is defined here:
[20:36:24] <beach> clhs 1.4.2
[20:36:24] <specbot> Error Terminology: http://www.lispworks.com/reference/HyperSpec/Body/01_db.htm
[20:37:33] <beach> jmercouris: So you see, I didn't do anything particular there.  I just checked a few random dictionary entries, and on the third one, I found digit-char-p.
[20:37:46] <beach> jmercouris: I am pretty sure you could have done the exact same thing.
[20:37:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:38:48] <lotuseater> much to learn I still have ^^
[20:41:15] <Bike> https://gist.github.com/Bike/43cf08b0d4788904b169180d013ead6b here's my quick list of operators the "should signal a type-error" thing could apply to. i probably should have made a list of the complement instead
[20:41:43] <beach> jmercouris: You may of course not have any desire to do something like that, but I don't think you can use incompetence as an excuse.
[20:42:17] <jmercouris> Fair enough :-D
[20:42:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[20:42:43] <beach> Bike: But some of those already do, right?
[20:44:31] <jmercouris> beach: reading through the entry, I can't imagine what it does if char is indeed not a character
[20:44:42] <jmercouris> my first instinct is it returns nil
[20:45:01] <jmercouris> the reason why I say that is it says "test whether char is a digit in the specified radix"
[20:45:13] <jmercouris> I imagine that a potato is not in fact a digit in the specified radix
[20:45:16] <beach> jmercouris: Exactly, and so the general phrase in 1.4.4.3 applies.
[20:45:17] <jmercouris> and thefore it should return nil
[20:45:45] <beach> jmercouris: Nope, that's not what 1.4.4.3 says.
[20:46:01] <beach> This dictionary entry says that char is a character.
[20:46:14] <jmercouris> OK I see that
[20:46:19] <jmercouris> that complements how this is supposed to read
[20:46:29] <jmercouris> in that case indeed, undefined...
[20:46:34] <beach> Yep.
[20:47:01] <jmercouris> You could probably just make a test suite rather than writing a spec
[20:47:21] <jmercouris> or maybe not, I don't know, I'm just thinking, if it /should/ signal a type error
[20:47:24] <jmercouris> you can check that it does
[20:47:25] <beach> A test suite will be a very nice complement.
[20:48:04] <beach> But I also want a document meant for the application programmer so that it is known what behavior is expected from a conforming implementation.
[20:49:19] <beach> The test suite would be valuable to implementors, just like the ANSI test suite is for the Common Lisp standard.
[20:53:05] <Bike> beach: some of them specify a type error should be signaled on some type problems but not others, if that's what you mean
[20:54:34] <shka> sneaky beach has other reason fo WSCL
[20:54:45] <shka> namely: what if you are making a new implementation?
[20:56:13] <shka> and currently WIP implementations include SICL and Clasp
[20:58:36] <beach> Bike: Yes, that's what I mean.
[20:59:23] <beach> shka: And BOCL.
[20:59:31] <shka> lol, yes
[20:59:37] <shka> i forgot about this one
[21:00:12] <beach> That's an important one, because it is not meant to be used for application programming, so it could exploit all the undefined behavior.
[21:00:13] <shka> CL, "dead" language has 3 new implementations being developed at this very moment
[21:01:22] <shka> AND multiple maintained implementations
[21:01:30] <shka> heh
[21:18:01] *** Joins: copec (~copec@206.214.226.37)
[21:18:58] *** Quits: frgo (~frgo@p200300deef181d0088ee4d6446ecc8ee.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[21:24:38] *** Quits: peterhil (~peterhil@mobile-access-bceeac-89.dhcp.inet.fi) (Ping timeout: 256 seconds)
[21:26:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[21:30:18] *** Quits: amb007 (~a_bakic@149.251.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[21:30:42] *** Joins: amb007 (~a_bakic@43.107.23.93.rev.sfr.net)
[21:33:56] <jackdaniel> and swapping
[21:41:36] *** Joins: dsk (~dsk@user/dsk)
[21:44:26] *** Joins: Josh_2 (~user@37.25.47.130)
[21:44:43] <Josh_2> Hello
[21:44:58] <Josh_2> How do I clear all current sessions in hunchentoot?
[21:45:36] *** Joins: derelict (~derelict@user/derelict)
[21:47:31] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[21:47:33] <Josh_2> Oh wait dw, I remembered, just gotta set tbnl::*session-db* to nil
[21:48:39] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[21:48:47] *** Parts: treflip (~user@95.79.32.99) (ERC (IRC client for Emacs 27.2))
[21:51:14] <lotuseater> can anyone tell me the difference calling a symbol from a package with one and two colons?
[21:54:38] <jackdaniel> lotuseater: if the symbol is accessible with one colon, then that means that this symbol is exported from said package
[21:55:06] <jackdaniel> when you use two colons then the reader doesn't care whether the symbol is exported or not
[21:58:23] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[21:59:51] <aeth> Generally, you don't want to use ::s outside of tests. Generally. Some things just aren't exported when they should be, though. E.g. nobody seems to export their types. I guess nobody uses CHECK-TYPE or DECLARE etc. anywhere.
[22:00:32] <aeth> I blame Python. Duck typing. :-p
[22:04:18] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 256 seconds)
[22:06:15] <aeth> Meanwhile, I'll gladly lose some performance to fail early if it means I don't have to hunt down a random NIL that happened 30 functions ago in my program.
[22:21:53] <jcowan> Ah yes, the old NIL pointer problem!
[22:24:55] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[22:25:32] <pjb> lotuseater: (read-from-string "CL-USER:FOO") #| ERROR: Reader error: No external symbol named "FOO" in package #<Package "COMMON-LISP-USER"> . |#   (read-from-string "CL-USER::FOO") #| --> foo ; 12 |#
[22:26:11] <pjb> lotuseater: (export 'cl-user::foo 'cl-user) #| --> t |#  (list (read-from-string "CL-USER:FOO") (read-from-string "CL-USER::FOO")) #| --> (foo foo) |#
[22:26:57] <pjb> aeth: I do export my types!
[22:29:41] <aeth> to be fair, NIL in particular can just be handled with WHEN/UNLESS/NOT/etc.
[22:31:46] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Ping timeout: 240 seconds)
[22:34:25] *** Xach changes topic to 'All Lisp dialects! | #commonlisp #scheme #racket #clojure #emacs, etc. | https://irclog.tymoon.eu/libera/%23commonlisp'
[22:34:43] <Xach> oh shit
[22:34:53] <Xach> What was the previous topic? I screwed it up.
[22:34:56] <lotuseater> ah okay thx :)
[22:35:00] * Xach scrolls back
[22:35:06] <shka> Xach: programmable programming language bit
[22:35:20] <jackdaniel> Xach: something about python and enlightment
[22:35:39] <shka> we have a saboteur
[22:36:29] <jackdaniel> https://i.imgur.com/pvkP0bC.png <- triangulated polygon fed to xrender :)
[22:37:37] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[22:38:12] <Xach> My client does not have a log of the previous topic. Sorry about that. If anyone can tell me the proper topic I will fix it.
[22:38:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:38:43] *** Xach changes topic to 'Common Lisp | https://irclog.tymoon.eu/libera/#commonlisp'
[22:38:50] <Xach> shit shit. i can't do this properly.
[22:39:06] *** Xach changes topic to 'Common Lisp | https://irclog.tymoon.eu/libera/%23commonlisp'
[22:39:09] <jackdaniel> make it "Corman Lips" and get over with it ;)
[22:39:13] <eta> lol
[22:39:32] <shka> well, since nobody remembers what it was, it was not important
[22:41:53] *** Xach changes topic to 'Common Lisp, the #1=(programmable . #1#) programming language | Wiki: <https://www.cliki.net> | IRC Logs: <https://irclog.tymoon.eu/libera/%23commonlisp> | Cookbook: <https://lispcookbook.github.io/cl-cookbook>'
[22:41:58] <Xach> Thanks mfiano
[22:42:02] <mfiano> np
[22:42:09] * Xach steps away from the topic for 20 years again
[22:42:24] *** Xach sets mode: -o Xach
[22:43:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 276 seconds)
[23:06:53] *** Joins: makomo (~makomo@user/makomo)
[23:23:04] *** Quits: silasfox (~sbv@2001-4dd6-b9c3-0-8b12-f9dd-91e5-ed9c.ipv6dyn.netcologne.de) (Ping timeout: 256 seconds)
[23:23:20] *** Joins: silasfox (~sbv@xdsl-89-0-200-177.nc.de)
[23:33:54] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[23:39:54] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 255 seconds)
[23:43:06] *** Quits: amb007 (~a_bakic@43.107.23.93.rev.sfr.net) (Ping timeout: 276 seconds)
[23:45:26] *** Joins: mjanssen (mpcjanssen@2a01:7e00::f03c:92ff:fef6:5666)
[23:51:11] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[23:51:35] *** Joins: amb007 (~a_bakic@52.197.23.93.rev.sfr.net)
[23:52:23] *** Joins: silasfox_ (~sbv@2001-4dd1-74a9-0-a1bb-2302-a57-664a.ipv6dyn.netcologne.de)
[23:53:06] *** Quits: silasfox (~sbv@xdsl-89-0-200-177.nc.de) (Ping timeout: 272 seconds)
[23:54:08] *** Joins: frgo (~frgo@dynamic-046-114-144-227.46.114.pool.telefonica.de)
[23:54:18] *** Quits: amb007 (~a_bakic@52.197.23.93.rev.sfr.net) (Read error: Connection reset by peer)
