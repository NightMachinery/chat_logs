[00:01:15] *** Joins: simendsjo (~user@84.211.91.241)
[00:02:11] *** Joins: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0)
[00:02:11] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[00:02:12] *** Joins: litharn[m] (~litharnma@2001:470:69fc:105::1:8336)
[00:02:14] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[00:02:16] *** Joins: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f)
[00:02:16] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[00:02:17] *** Joins: marijan (~marijanma@2001:470:69fc:105::1:6cce)
[00:02:30] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[00:02:36] *** Joins: Nate[m] (~m52957mat@2001:470:69fc:105::1:591a)
[00:02:37] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[00:02:38] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[00:02:40] *** Joins: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4)
[00:02:40] *** Joins: Inst[m] (~instrmatr@2001:470:69fc:105::1:903e)
[00:03:13] *** Joins: james[m]12 (~jamesnina@2001:470:69fc:105::1:4203)
[00:03:30] *** Joins: jaror[m] (~jaror@2001:470:69fc:105::265)
[00:03:30] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[00:03:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:04:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[00:08:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[00:09:03] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[00:09:04] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[00:09:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 245 seconds)
[00:09:17] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[00:09:23] *** Joins: alex[m]12 (~alexchete@2001:470:69fc:105::1:1001)
[00:11:58] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:12:52] *** Joins: cosimone (~user@93-47-231-87.ip115.fastwebnet.it)
[00:13:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:13:29] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[00:13:29] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[00:13:48] *** Joins: jinsun_ (~jinsun@user/jinsun)
[00:14:22] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[00:14:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[00:15:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:15:49] *** Joins: noiobeforebed (~noiobefor@2001:470:69fc:105::1:3c2d)
[00:16:06] *** Joins: briandaed (~root@109.95.143.81.r.toneticgroup.pl)
[00:16:14] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[00:17:29] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[00:18:05] *** Joins: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7)
[00:18:07] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[00:18:10] *** Joins: bontaq` (~user@ool-45779fe5.dyn.optonline.net)
[00:18:38] *** Joins: AlexisTP (~AlexisTP3@92.57.44.63)
[00:18:41] *** pooryori1k is now known as pooryorick
[00:20:10] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[00:20:14] *** Quits: cosimone (~user@93-47-231-87.ip115.fastwebnet.it) (Remote host closed the connection)
[00:21:07] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:21:45] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[00:21:59] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 256 seconds)
[00:24:14] *** Joins: taylorswift2018 (~taylorswi@115-188-158-33-fibre.sparkbb.co.nz)
[00:26:14] *** Quits: xff0x (~xff0x@2001:1a81:530c:c100:3392:9410:3e85:84e1) (Ping timeout: 260 seconds)
[00:28:05] *** Joins: xff0x (~xff0x@2001:1a81:532d:cf00:6935:8bd3:eb0:937d)
[00:28:16] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 245 seconds)
[00:30:07] *** Quits: Null_A (~null_a@2601:645:8700:2290:6473:b18:2fbd:1123) (Remote host closed the connection)
[00:31:32] <maerwald> how do people run benchmarks locally these days with all the cpu throttling 
[00:32:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:32:35] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[00:32:38] *** Joins: dffo^ (~dffo@128-092-182-020.biz.spectrum.com)
[00:33:11] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[00:33:33] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Ping timeout: 250 seconds)
[00:33:58] *** Parts: eron (~eron@2804:431:c7c2:934:9877:36f8:e8ed:91e) ()
[00:34:09] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[00:34:10] <[exa]> maerwald: throttling is a valid effect for benchmarking
[00:34:11] *** Joins: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539)
[00:34:38] <[exa]> not trying to defend the sad state of the home CPUs tho. :D
[00:34:59] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4)
[00:36:29] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[00:37:25] <maerwald> I'm basically testing my throttling then, not the code
[00:37:58] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[00:38:22] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[00:38:44] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[00:39:07] <EvanR> the abstract performance of code
[00:39:09] <EvanR> hmm
[00:39:25] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4) (Ping timeout: 250 seconds)
[00:39:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:40:09] <EvanR> I wonder if you even need a real CPU for that
[00:40:34] <EvanR> also benchmarks were made to be gamed right
[00:40:39] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[00:42:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:42:58] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[00:43:16] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[00:45:09] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[00:45:48] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[00:46:26] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[00:47:05] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[00:47:27] *** Joins: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f)
[00:47:48] *** Quits: immae1 (~immae@2a01:4f8:141:53e7::) (Quit: WeeChat 2.9)
[00:48:12] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[00:48:18] *** Joins: immae (~immae@2a01:4f8:141:53e7::)
[00:48:41] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:48:59] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[00:49:15] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[00:49:18] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:49:22] *** Joins: cjb (~cjb@user/cjb)
[00:49:25] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[00:50:26] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[00:50:31] <dminuoso> ski: Im not convinced of backpack. It lacks maintenance/ownership and documentation.
[00:50:44] *** Joins: gaff (~gaff@49.207.227.188)
[00:50:55] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[00:51:34] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:1dc4:f5c4:a458:81) (Remote host closed the connection)
[00:51:34] *** Quits: gaff (~gaff@49.207.227.188) (Client Quit)
[00:51:54] *** Quits: cuz```` (~user@38.140.58.234) (Read error: Connection reset by peer)
[00:52:38] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[00:52:40] *** Joins: safinaskar (~safinaska@109.252.91.116)
[00:53:47] *** Joins: ubert (~Thunderbi@p200300ecdf099459bd0f645b3a8c5166.dip0.t-ipconnect.de)
[00:54:09] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[00:54:18] *** Joins: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6)
[00:54:19] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[00:54:25] <safinaskar> is it possible to do pattern matching on type-level value? here is what i am trying to do: https://godbolt.org/z/4xacfPM5n . unfortunately both variants of "read" don't compile. what to do?
[00:54:30] *** Joins: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df)
[00:55:15] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4)
[00:55:23] <dminuoso> safinaskar: To answer the question in itself, yes. TyFams and typeclasses implement pattern matching on type constructors.
[00:55:34] <dminuoso> Or well, typeclass instances rather.
[00:56:17] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 240 seconds)
[00:56:34] <dminuoso> Alternatively you can do this with singletons at the value level
[00:56:38] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[00:57:06] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[00:57:18] <dminuoso> All three with varying quality of life.
[00:57:23] *** Joins: siraben (~siraben@user/siraben)
[00:57:46] <geekosaur> you really want idris imo
[00:57:48] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[00:57:53] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[00:58:39] <dminuoso> The closest and simplest way is to have some surrogate typeclass Foo, write `instance Foo T` for each T that you care about, and add some method that essentially acts as a case-of branch
[00:58:46] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[00:58:53] <boxscape_> this particular case seems a pretty good fit for type classes if I'm understanding correctly, I don't think Idris is really necessary here
[00:59:18] <dminuoso> If you add a Proxy to that method, it becomes very simple to use
[00:59:22] <safinaskar> i want pattern matching on data constructors, not on type constructors!
[00:59:24] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[00:59:27] *** Quits: briandaed (~root@109.95.143.81.r.toneticgroup.pl) (Remote host closed the connection)
[00:59:37] <safinaskar> i want to pattern match on type-level values of type "Typ"
[00:59:39] <dminuoso> Sorry, Im not sure I understand given your godbolt code.
[00:59:42] <dminuoso> Yes.
[00:59:56] <safinaskar> this type (Typ) has two *data* constructors: CString and Record
[01:00:01] <dminuoso> safinaskar: The three techniques I described allow you to do that. A helper typeclass is the best fitting way.
[01:00:04] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:1dc4:f5c4:a458:81)
[01:00:18] <safinaskar> and i want to pattern match on them, i. e. "case x of CString -> .....; Record ... -> ......"
[01:00:19] <dminuoso> Ah hold on
[01:00:20] *** Joins: psydroid (~psydroid@user/psydroid)
[01:00:35] <geekosaur> but once you promote it it's not a data constructor any more
[01:00:42] <dminuoso> safinaskar: They are not data constructors, they are promoted type constructors.
[01:00:49] <dminuoso> Let's do this in yahb quickly
[01:01:01] <dminuoso> % class Descr a where descr :: Proxy a -> String
[01:01:01] <yahb> dminuoso: 
[01:01:05] <dminuoso> % :set -XDataKinds
[01:01:06] <yahb> dminuoso: 
[01:01:10] <dminuoso> % data Color = Red | Blue
[01:01:10] <yahb> dminuoso: 
[01:01:19] <dminuoso> % instance Descr Red where descr _ = "its red"
[01:01:19] <yahb> dminuoso: 
[01:01:24] <dminuoso> % instance Descr Blue where descr _ = "its blue"
[01:01:24] <yahb> dminuoso: 
[01:01:29] <geekosaur> once promoted your data constructor becomes a kind constructor and your data constructors become type constructors
[01:01:44] <dminuoso> % :set -XScopedTypeVariables
[01:01:45] <yahb> dminuoso: 
[01:02:26] <safinaskar> okey, but how to check exhaustiveness? is there something similar but with exhaustiveness checking?
[01:02:32] <dminuoso> % foo :: forall a. Descr a -> String; foo = "The description: " <> descr (Proxy :: Proxy a)
[01:02:32] <yahb> dminuoso: ; <interactive>:77:18: error:; * Expected a type, but `Descr a' has kind `Constraint'; * In the type signature: foo :: forall a. Descr a -> String
[01:02:39] <dminuoso> safinaskar: Not possible with typeclasses due to open world assumption
[01:02:41] <EvanR> injective type family?
[01:02:48] <EvanR> closed type family
[01:03:00] <tomsmeding> ghc doesn't check exhaustiveness of a closed type family
[01:03:04] <dminuoso> Bringing us back to technique 1 I mentioned earlier
[01:03:05] <EvanR> blast
[01:03:21] <EvanR> nice one ghc
[01:03:23] <dminuoso> tyfams have the problem that you likely need to start with singletons very quickly for what I conceive your problem domain is
[01:03:27] *** Quits: AlexisTP (~AlexisTP3@92.57.44.63) (Ping timeout: 250 seconds)
[01:04:03] <tomsmeding> % foo :: forall a. Descr a => Proxy a -> String ; foo _ = "The description: " <> descr (Proxy :: Proxy a)
[01:04:03] <yahb> tomsmeding: 
[01:04:08] <tomsmeding> % foo (Proxy @Red)
[01:04:08] <yahb> tomsmeding: "The description: its red"
[01:04:44] <dminuoso> At that point, you might as well go all-in with singletons, and then rely on GHCs pattern match exhaustiveness checker again
[01:04:48] <dminuoso> And skip tyfams
[01:04:53] <tomsmeding> and if you think that you could have a typeclass method that retrieves back the Red/Blue value-level data constructor: congrats, that's one half of 'singletons'
[01:05:08] * tomsmeding high-fives dminuoso
[01:05:22] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (Read error: Connection reset by peer)
[01:05:22] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Write error: Connection reset by peer)
[01:05:22] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Read error: Connection reset by peer)
[01:05:22] *** Quits: psydroid (~psydroid@user/psydroid) (Write error: Connection reset by peer)
[01:05:22] *** Quits: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df) (Read error: Connection reset by peer)
[01:05:22] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (Read error: Connection reset by peer)
[01:05:22] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Read error: Connection reset by peer)
[01:05:22] *** Quits: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6) (Write error: Connection reset by peer)
[01:05:22] *** Quits: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e) (Read error: Connection reset by peer)
[01:05:22] *** Quits: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f) (Write error: Connection reset by peer)
[01:05:23] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (Write error: Connection reset by peer)
[01:05:23] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Read error: Connection reset by peer)
[01:05:23] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (Read error: Connection reset by peer)
[01:05:23] *** Quits: siraben (~siraben@user/siraben) (Write error: Connection reset by peer)
[01:05:23] *** Quits: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789) (Read error: Connection reset by peer)
[01:05:23] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Write error: Connection reset by peer)
[01:05:23] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (Read error: Connection reset by peer)
[01:05:23] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (Read error: Connection reset by peer)
[01:05:23] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Write error: Connection reset by peer)
[01:05:23] *** Quits: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7) (Write error: Connection reset by peer)
[01:05:23] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Read error: Connection reset by peer)
[01:05:23] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Write error: Connection reset by peer)
[01:05:23] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (Write error: Connection reset by peer)
[01:05:23] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Read error: Connection reset by peer)
[01:05:23] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (Read error: Connection reset by peer)
[01:05:23] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Write error: Connection reset by peer)
[01:05:23] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Write error: Connection reset by peer)
[01:05:23] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Write error: Connection reset by peer)
[01:05:23] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Read error: Connection reset by peer)
[01:05:23] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Read error: Connection reset by peer)
[01:05:23] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Read error: Connection reset by peer)
[01:05:23] *** Quits: litharn[m] (~litharnma@2001:470:69fc:105::1:8336) (Read error: Connection reset by peer)
[01:05:24] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (Read error: Connection reset by peer)
[01:05:24] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Read error: Connection reset by peer)
[01:05:24] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Read error: Connection reset by peer)
[01:05:24] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (Read error: Connection reset by peer)
[01:05:24] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Read error: Connection reset by peer)
[01:05:24] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Write error: Connection reset by peer)
[01:05:24] *** Quits: Nate[m] (~m52957mat@2001:470:69fc:105::1:591a) (Write error: Connection reset by peer)
[01:05:24] *** Quits: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8) (Write error: Connection reset by peer)
[01:05:24] *** Quits: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93) (Write error: Connection reset by peer)
[01:05:24] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Read error: Connection reset by peer)
[01:05:24] *** Quits: Inst[m] (~instrmatr@2001:470:69fc:105::1:903e) (Read error: Connection reset by peer)
[01:05:24] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Read error: Connection reset by peer)
[01:05:24] *** Quits: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f) (Read error: Connection reset by peer)
[01:05:24] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (Read error: Connection reset by peer)
[01:05:24] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Write error: Connection reset by peer)
[01:05:24] *** Quits: jaror[m] (~jaror@2001:470:69fc:105::265) (Write error: Connection reset by peer)
[01:05:24] *** Quits: noiobeforebed (~noiobefor@2001:470:69fc:105::1:3c2d) (Write error: Connection reset by peer)
[01:05:24] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Read error: Connection reset by peer)
[01:05:24] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Write error: Connection reset by peer)
[01:05:24] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (Write error: Connection reset by peer)
[01:05:24] *** Quits: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340) (Write error: Connection reset by peer)
[01:05:24] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Read error: Connection reset by peer)
[01:05:24] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Read error: Connection reset by peer)
[01:05:24] *** Quits: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2) (Read error: Connection reset by peer)
[01:05:24] *** Quits: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4) (Read error: Connection reset by peer)
[01:05:24] *** Quits: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4) (Read error: Connection reset by peer)
[01:05:24] *** Quits: james[m]12 (~jamesnina@2001:470:69fc:105::1:4203) (Read error: Connection reset by peer)
[01:05:24] *** Quits: jinsun_ (~jinsun@user/jinsun) (Read error: Connection reset by peer)
[01:05:24] *** Quits: benjamin[m]123 (~benjaminm@2001:470:69fc:105::1:3f2f) (Read error: Connection reset by peer)
[01:05:24] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Read error: Connection reset by peer)
[01:05:24] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Write error: Connection reset by peer)
[01:05:24] *** Quits: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07) (Write error: Connection reset by peer)
[01:05:24] *** Quits: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f) (Write error: Connection reset by peer)
[01:05:25] *** Quits: marijan (~marijanma@2001:470:69fc:105::1:6cce) (Read error: Connection reset by peer)
[01:05:25] *** Quits: EkaiZend[m] (~ekai-zend@2001:470:69fc:105::1:7756) (Write error: Connection reset by peer)
[01:05:25] *** Quits: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0) (Read error: Connection reset by peer)
[01:05:25] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (Read error: Connection reset by peer)
[01:05:25] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Read error: Connection reset by peer)
[01:05:25] *** Quits: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539) (Read error: Connection reset by peer)
[01:05:25] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (Write error: Connection reset by peer)
[01:05:25] *** Quits: alex[m]12 (~alexchete@2001:470:69fc:105::1:1001) (Write error: Connection reset by peer)
[01:05:25] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (Write error: Connection reset by peer)
[01:05:25] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (Write error: Connection reset by peer)
[01:05:25] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (Write error: Connection reset by peer)
[01:05:25] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Write error: Connection reset by peer)
[01:05:36] <dminuoso> safinaskar: Should you chose to go with singletons, please leave your sanity in the jar by the door on your way out.
[01:05:53] <dminuoso> The road to hell is paved with singletons.
[01:06:05] <Rembane> dminuoso: Are singletons the incredibly painful way to do dependently typed programming in Haskell?
[01:06:11] <dminuoso> Rembane: Yes.
[01:06:26] <dminuoso> Some limited form of it at any way
[01:06:56] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[01:09:12] *** Quits: emf_ (~emf@2620:10d:c090:400::5:9645) (Quit: emf_)
[01:10:03] *** Joins: cynomys (~cynomys@user/cynomys)
[01:10:17] *** Quits: ubert (~Thunderbi@p200300ecdf099459bd0f645b3a8c5166.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:10:21] *** Joins: ub (~Thunderbi@p548c8cd6.dip0.t-ipconnect.de)
[01:11:24] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:bc81:ba25:7a70:67f2) (Read error: Connection reset by peer)
[01:11:56] <Rembane> dminuoso: Got it! Thanks! 
[01:12:26] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[01:12:35] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[01:12:38] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[01:12:39] *** ub is now known as ubert
[01:12:45] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[01:13:03] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[01:13:41] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[01:13:41] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[01:13:42] *** Joins: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539)
[01:14:03] <EvanR> I'm still waiting to identify what exactly out of all the type level shit I know is "singletons"
[01:14:04] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[01:14:09] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[01:14:34] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[01:14:39] <EvanR> and why they stole C++'s awesome design pattern's name
[01:14:51] *** Joins: kadoban (~kadoban@user/kadoban)
[01:14:51] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[01:14:51] *** Joins: moats (~oats@user/oats)
[01:14:51] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[01:14:51] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[01:15:06] <tomsmeding> safinaskar: with some hand-rolled singletons: https://paste.tomsmeding.com/BgzgyArQ
[01:15:20] *** Joins: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f)
[01:15:27] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[01:15:28] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[01:15:28] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[01:15:42] *** Joins: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0)
[01:15:42] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[01:15:42] *** Joins: denbrahe (~denbrahe@2001:470:69fc:105::19c0)
[01:15:42] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[01:15:49] <tomsmeding> EvanR: I'm not completely sure (never actually used the singletons package lol), but I believe singletons is basically what I just posted, plus the corresponding Known* type classes
[01:15:54] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[01:15:54] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[01:15:55] <tomsmeding> but then auto-generated
[01:15:55] *** Joins: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f)
[01:16:08] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[01:16:08] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[01:16:08] *** Joins: sm (~sm@plaintextaccounting/sm)
[01:16:09] *** Joins: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93)
[01:16:20] *** sshine is now known as sshine`
[01:16:21] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[01:16:21] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[01:16:22] *** Joins: Deide (~deide@user/deide)
[01:16:35] *** Joins: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0)
[01:16:35] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[01:16:35] *** Joins: psydroid (~psydroid@user/psydroid)
[01:16:35] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[01:16:40] <tomsmeding> modulo minor differences in encoding the arguments precisely; I made different choices for Symbol and Typ there in the record cons case, not sure how 'singletons' would handle that thing
[01:16:48] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[01:16:48] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[01:16:48] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[01:16:48] *** Joins: siraben (~siraben@user/siraben)
[01:16:48] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[01:16:48] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[01:16:48] *** Joins: alex[m]123 (~alexchete@2001:470:69fc:105::1:1001)
[01:16:48] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[01:16:48] *** Joins: Tisoxin (~ikosit@user/ikosit)
[01:17:02] *** Joins: noiobeforebed (~noiobefor@2001:470:69fc:105::1:3c2d)
[01:17:02] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[01:17:02] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[01:17:03] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[01:17:03] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[01:17:03] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[01:17:03] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[01:17:03] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[01:17:15] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[01:17:15] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[01:17:15] *** Joins: jinsun_ (~jinsun@user/jinsun)
[01:17:30] *** Joins: benjamin[m]123 (~benjaminm@2001:470:69fc:105::1:3f2f)
[01:17:30] *** Joins: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2)
[01:17:30] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[01:17:30] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[01:17:43] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[01:17:43] *** Joins: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f)
[01:17:55] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[01:17:55] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[01:17:55] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[01:17:55] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[01:17:55] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[01:17:55] *** Joins: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac)
[01:17:55] *** Joins: EkaiZend[m] (~ekai-zend@2001:470:69fc:105::1:7756)
[01:17:55] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[01:17:55] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[01:17:55] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[01:17:55] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[01:17:55] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[01:17:55] *** Joins: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4)
[01:17:56] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[01:17:56] *** Joins: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340)
[01:17:56] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[01:18:07] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[01:18:07] *** Joins: Nate[m] (~m52957mat@2001:470:69fc:105::1:591a)
[01:18:07] *** Joins: Inst[m] (~instrmatr@2001:470:69fc:105::1:903e)
[01:18:07] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[01:18:07] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[01:18:07] *** Joins: marijan (~marijanma@2001:470:69fc:105::1:6cce)
[01:18:07] *** Joins: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4)
[01:18:07] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[01:18:07] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[01:18:08] *** Joins: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6)
[01:18:08] *** Joins: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df)
[01:18:08] *** Joins: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7)
[01:18:08] *** Joins: litharn[m] (~litharnma@2001:470:69fc:105::1:8336)
[01:18:09] *** Joins: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203)
[01:18:10] *** Joins: simmsb (~simmsb@2001:470:69fc:105::1:55c3)
[01:18:10] *** Joins: jaror[m] (~jaror@2001:470:69fc:105::265)
[01:19:02] <EvanR> you have Typ and TypSing, so now there's the Typ type, Type datakind, and both type / kind for TypSing
[01:19:16] *** Joins: emf (~emf@2620:10d:c090:400::5:9645)
[01:19:18] <tomsmeding> confused yet?
[01:19:22] <EvanR> yes
[01:19:40] <EvanR> what is singletonic about TypSing
[01:20:05] <EvanR> other than the name
[01:20:10] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[01:20:17] <dminuoso> Mmm, is there some primitive in base that would yield both minimum and maximum at the same time?
[01:20:21] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:20:29] *** Quits: emf (~emf@2620:10d:c090:400::5:9645) (Client Quit)
[01:20:31] <dminuoso> Or do I have to roll my own if I want this in a single pass?
[01:20:31] <EvanR> sort?
[01:20:33] <tomsmeding> EvanR: the point is that the type "TypSing typ" for any type "typ" of kind "Typ" has exactly one value, namely the one mirroring the original Typ value
[01:20:46] <dminuoso> EvanR: That wont give me O(n)
[01:20:52] <Rembane> dminuoso: Semigroups and foldMap and Arrow! \o/ 
[01:21:04] <EvanR> I thought you mean min max my bad
[01:21:05] * tomsmeding is quite sure you don't need Arrow
[01:21:24] <Rembane> tomsmeding: You always need Arrow, you just don't know it yet.
[01:21:28] <dminuoso> EvanR: Mmm?
[01:21:34] * tomsmeding gently steps back a little
[01:21:51] <EvanR> the Arrow paradox
[01:21:53] <safinaskar> tomsmeding: thanks a lot
[01:22:10] <safinaskar> these singleteons are ugly. i am searching for better way
[01:22:12] <geekosaur> arrowdox
[01:22:24] <geekosaur> safinaskar, there is no better way in haskell
[01:23:19] <safinaskar> in fact, my task (probably you guessed) is to write implementation of binary format "Apache Avro" in haskell using cool haskell techniques such as GADTs
[01:23:41] <dminuoso> geekosaur: Mmm, I disagree.
[01:23:44] <tomsmeding> dminuoso: https://paste.tomsmeding.com/9SqnrGBH
[01:23:58] <dminuoso> Rethinking a type-level problem back into value level often does wonders.
[01:24:22] <safinaskar> "read" is supposed to be low-level parsing function. the binary format itself doesn't contain type info, so "read" must accept type as its argument. and now i am trying to pattern match on this type argument
[01:24:42] <Rembane> dminuoso: Does this solve your problem? https://paste.tomsmeding.com/IkJoiZlh
[01:24:43] <tomsmeding> (that <> definition can probably use some Applicative to compress that into a single case)
[01:24:56] <dminuoso> Rembane: Wow. That is truly cunning.
[01:25:01] <Rembane> dminuoso: Cool, eh? :D
[01:25:02] <tomsmeding> Rembane++
[01:25:04] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:25:20] <Rembane> dminuoso: If you don't like &&& you can use functions and stuff instead.
[01:25:34] <safinaskar> there is similar lib for dealing with protobuf in haskell. now i will try to read its code for inspiration
[01:25:35] <tomsmeding> % :m +Control.Arrow Data.Monoid
[01:25:36] <yahb> tomsmeding: 
[01:25:43] <tomsmeding> % foldMap (Min &&& Max) [1..5 :: Int]
[01:25:44] <yahb> tomsmeding: ; <interactive>:81:10: error:; * Data constructor not in scope: Min :: Int -> c; * Perhaps you meant one of these: variable `min' (imported from Prelude), variable `sin' (imported from Prelude); <interactive>:81:18: error:; * Data constructor not in scope: Max :: Int -> c'; * Perhaps you meant variable `max' (imported from Prelude)
[01:25:50] <tomsmeding> % import Data.Semigroup
[01:25:50] <yahb> tomsmeding: 
[01:25:51] <tomsmeding> % foldMap (Min &&& Max) [1..5 :: Int]
[01:25:51] <yahb> tomsmeding: (Min {getMin = 1},Max {getMax = 5})
[01:26:15] <monochrom> w00t that's a nice use of the "if X is a monoid then Y->X is a monoid too" instance.
[01:26:24] *** Joins: safinaskar_ (~quassel@109-252-91-116.nat.spd-mgts.ru)
[01:26:37] *** safinaskar is now known as safinaskarw
[01:26:43] *** safinaskar_ is now known as safinaskar
[01:26:57] <dminuoso> % minMax :: (Ord a, Bounded a, Foldable f) => f a -> (a, a); minMax = coerce . foldMap (Min &&& Max)
[01:26:57] <yahb> dminuoso: 
[01:27:11] <dminuoso> % minMax [1,3,3,5,10,2]
[01:27:12] <yahb> dminuoso: ; <interactive>:88:1: error:; * Ambiguous type variable `a0' arising from a use of `print'; prevents the constraint `(Show a0)' from being solved.; Probable fix: use a type annotation to specify what `a0' should be.; These potential instances exist:; instance Show a => Show (ZipList a) -- Defined in `Control.Applicative'; instance Show NestedAtomically -- Defined in 
[01:27:36] <dminuoso> % minMax [1,3,3,5,10,2] @Int
[01:27:36] <yahb> dminuoso: ; <interactive>:89:1: error:; * Cannot apply expression of type `(a0, a0)'; to a visible type argument `Int'; * In the expression: minMax [1, 3, 3, 5, ....] @Int; In an equation for `it': it = minMax [1, 3, 3, ....] @Int
[01:27:41] <dminuoso> Err what
[01:27:47] <dminuoso> Ohh
[01:27:51] <EvanR> are you trying to `read' a value of "unknown type" 
[01:27:52] <tomsmeding> % minMax @Int [1,3,3,5,10,2]
[01:27:52] <yahb> tomsmeding: (1,10)
[01:27:53] <monochrom> Should it be minMax @Int ?
[01:27:57] <monochrom> Yeah, that :)
[01:28:06] <EvanR> because I like the way juicy pixels does it, returning a sum type
[01:28:10] *** Parts: safinaskarw (~safinaska@109.252.91.116) ()
[01:28:12] <EvanR> of well typed results
[01:28:16] <tomsmeding> o/
[01:28:28] <dminuoso> So that's curious, somehow I had always expected GHC not to be picky about where you put TypeApplications
[01:29:04] <tomsmeding> before ghc 9, the location of a forall could float, so 'Int -> forall a. a -> [a]' was the same as 'forall a. Int -> a -> [a]'
[01:29:09] <monochrom> All lambda calculi are very picky about orders :)
[01:29:11] <tomsmeding> @a should be in the location of the forall
[01:29:11] <lambdabot> Maybe you meant: activity activity-full admin all-dicts arr ask auto-reply auto-reply? v @ ? .
[01:29:29] <monochrom> It's why other people invented "keyword arguments".
[01:29:32] *** Quits: michalz (~michalz@185.246.204.94) (Remote host closed the connection)
[01:29:38] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[01:29:42] <dminuoso> monochrom: Well Im just thinking that grammatically it seems not a big deal
[01:29:43] <EvanR> it's why they invented set theory *hide*
[01:29:45] <tomsmeding> here you have minMax :: forall a. f a -> (a, a), ignoring type classes, and you can't move the forall to after the first argumen
[01:29:54] <tomsmeding> hence must be minMax @Int :)
[01:30:09] * tomsmeding makes the disclaimer that this sounds very sensible to me but I don't actually know for sure this is why
[01:30:21] *** Quits: phma (phma@2001:5b0:211c:1a98:48d4:386a:82f8:d37) (Read error: Connection reset by peer)
[01:30:44] <monochrom> I think it's why, and there is nothing deeper about it.
[01:30:46] <tomsmeding> hm, doesn't seem to work for me with a function of type 'Int -> a -> [a]'
[01:31:07] <monochrom> Ah but have you tried Int -> forall a. a -> [a] ?
[01:31:32] <tomsmeding> % foo :: forall a. Int -> a -> [a] ; foo _ _ = []
[01:31:32] <yahb> tomsmeding: 
[01:31:33] <geekosaur> er, doesnm't that forall floay out?
[01:31:39] <tomsmeding> % bar :: Int -> forall a. a -> [a] ; bar _ _ = []
[01:31:39] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[01:31:39] <yahb> tomsmeding: 
[01:31:40] *** Joins: phma (phma@2001:5b0:215a:adf8:f4aa:f392:c0b4:ceef)
[01:31:44] <geekosaur> *float
[01:31:46] <tomsmeding> % foo 3 @Int 3
[01:31:46] <yahb> tomsmeding: ; <interactive>:93:1: error:; * Cannot apply expression of type `a0 -> [a0]'; to a visible type argument `Int'; * In the expression: foo 3 @Int 3; In an equation for `it': it = foo 3 @Int 3
[01:31:49] <tomsmeding> % bar 3 @Int 3
[01:31:49] <yahb> tomsmeding: []
[01:31:53] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[01:31:56] <tomsmeding> ✨
[01:32:03] <geekosaur> actually I butchered that one badly enough I should just toss it :/
[01:32:31] <tomsmeding> apparently I was right except that the forall doesn't actually float?
[01:32:38] <geekosaur> odd
[01:32:56] <monochrom> Quicklook needs to make a difference between "forall a. X -> ..." and "X -> forall a. ..." to get the rest of impredicativity to work.
[01:33:09] <tomsmeding> I get the same result in my local ghc 8.10.7
[01:33:17] <tomsmeding> which is the interesting part
[01:33:30] <geekosaur> my head hurts
[01:34:06] <tomsmeding> % (foo 3 :: forall a. a -> [a]) @Int 3
[01:34:07] <yahb> tomsmeding: []
[01:34:12] <tomsmeding> this _does_ work
[01:34:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[01:35:09] <monochrom> yahb is at 9.0 which, although doesn't have Quicklook, does have that distinction to pave way.
[01:35:30] <tomsmeding> my local 8.10.7 doesn't have quick look and behaves the same for these tests
[01:35:36] <monochrom> Ah.
[01:35:50] <monochrom> Well, all lamba calcali are picky about orders. :)
[01:36:33] *** Joins: califax- (~califax@user/califx)
[01:37:01] <monochrom> Personally I work at the level of "by default, order matters pedantically, unless the language is so nice as to relax it a little bit".
[01:37:05] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[01:37:38] *** califax- is now known as califax
[01:37:46] <tomsmeding> I just put the type applications at the beginning always, hasn't failed yet :)
[01:38:25] <tomsmeding> which I guess means that I've never met a 'bar' yet in the wild
[01:38:51] <tomsmeding> up to the reader to decide which meaning of 'bar' I intend her
[01:38:53] <tomsmeding> e
[01:39:02] <Rembane> Good exercise.
[01:39:03] <Rembane> I've always thought that the type application applies to everything to the right of it. 
[01:40:07] <tomsmeding> in a certain way I found the proposal for the 'forall a ->' syntax enlightening here
[01:40:16] <monochrom> Dependent typing will be where it makes sense to have a "forall" or generally "product over ..." in the middle and so the use site will also have @ in the middle.
[01:40:32] <tomsmeding> that makes a type argument _explicit_: 'forall a ->' is to 'forall a.' as 'a' is to '{a}' in Agda
[01:40:46] <monochrom> Yeah, that.
[01:40:52] <tomsmeding> so then the type becomes just another argument, in that place in the list of arguments
[01:41:15] <tomsmeding> bar :: Int -> forall a -> a -> [a]
[01:41:22] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 260 seconds)
[01:41:23] <tomsmeding> bar 3 Int 4
[01:42:37] <tomsmeding> thanks for the mind exercises all, I'm going to bed :)
[01:43:16] <EvanR> haskell: a ~~soviet~~ scottish mind game
[01:43:36] *** Joins: alo (~alo@user/alo)
[01:48:45] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:49:43] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:51:30] <EvanR> Update: As of version 3.37.0 (2021-11-27), SQLite provides STRICT tables that do rigid type enforcement, for developers who prefer that kind of thing. 
[01:51:34] <EvanR> It's about time
[01:51:42] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:52:50] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[01:53:36] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[01:54:22] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Quit: ZNC 1.8.2 - https://znc.in)
[01:54:37] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:56:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[01:57:41] <hpc> "for developers who prefer that kind of thing" you say, as if you're not in #haskell :D
[01:57:56] <maerwald> lol
[01:58:01] <Clint> we're very contrarian
[01:58:31] <maerwald> "for weirdos who prefer that jazz"
[01:58:53] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[01:59:01] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:59:05] <EvanR> their words not mine
[01:59:14] <hpc> ah
[02:00:27] *** Joins: Erutuon (~Erutuon@user/erutuon)
[02:03:18] *** Joins: sheb_ (~sheb@31.223.228.71)
[02:05:27] *** Quits: sheb (~sheb@31.223.228.71) (Ping timeout: 256 seconds)
[02:07:28] <Franciman> hi all, i'll try to be less edgy and more conforming, sorry
[02:07:29] <safinaskar> EvanR: thanks a lot for this info on STRICT tables!
[02:07:37] <Franciman> i've thought about my behaviour, and i apologise, again
[02:07:54] <safinaskar> EvanR: can i forbid NULLs in sqlite?
[02:07:57] <Franciman> i have a question. I thought i could find haskell's formal syntax in the language report, but i can't seem to find it
[02:08:01] <Franciman> where can i locate it?
[02:08:06] <Franciman> ehm
[02:08:09] <Franciman> formal semantics*
[02:08:17] <EvanR> sqlite-simple supports opening a database file, opening a (blank) in-memory database, but not copying a database from disk and opening that for purposes
[02:08:18] <Franciman> formal specification of haskell program semantics
[02:09:04] <EvanR> e.g. if you make a copy of a database to memory and use it read only, it can be trivially wrapped as pure (?)
[02:09:58] <EvanR> you could copy all the data to your own data structure, but then you don't get SQL for what its worth
[02:09:58] <safinaskar> Franciman: haskell report doesn't define formal semantics. but you can see something like formal semantics for haskell as implemented in GHC. the semantics defined in particular .pdf file located in GHC source tree
[02:10:25] <Franciman> ah
[02:10:33] <Franciman> so the standard doesn't define a formal semantics of the language
[02:10:42] <safinaskar> Franciman: yes :)
[02:10:57] <safinaskar> Franciman: this is usual situation for programming languages
[02:11:15] <safinaskar> Franciman: you can look at SML. it is language with formal semantics defined in the standard :)
[02:11:19] <Franciman> safinaskar: do you remember the name?
[02:11:21] <dminuoso> We have these denotational semantics instead that just.. somehow.. nobody has ever specified..
[02:11:22] <Franciman> of the pdf file
[02:11:40] <Franciman> yes, sml is gold
[02:11:42] <Franciman> xd
[02:11:49] <Franciman> i thought haskell had a formal semantics too in the standard
[02:11:59] <EvanR> haskell semantics is like jazz. If you gotta ask, you'll never know
[02:12:06] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Quit: WeeChat 3.4)
[02:12:11] <Franciman> lol
[02:12:12] <EvanR> wait that's lisp
[02:12:25] <Franciman> dminuoso: sorry i couldn't parse. Is there a written document about it?
[02:12:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:12:46] <dminuoso> Franciman: By the amount of denotational semantics stuff on our wiki you'd think there was.
[02:12:47] <[exa]> Franciman: the semantics of whole haskell is probably too big to be practical, but it's nice to have a look of the sub-layers though, especially at STG and Cmm
[02:13:53] <Franciman> [exa]: do i find their semantics somewhere?
[02:14:15] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4) (Remote host closed the connection)
[02:14:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[02:15:03] <EvanR> semantics for f x = (semantics for f) (semantics for x) where thing on the right is function application xD
[02:15:14] <[exa]> STG has a paper that gives a pretty clean picture of it, scholar.google should help
[02:15:30] <Franciman> does Core have a formal semantics at least?
[02:15:38] <Franciman> thanks [exa] 
[02:15:45] <Franciman> well i still need to look in ghc's docs
[02:16:15] <Franciman> https://gitlab.haskell.org/ghc/ghc/-/tree/master/docs/core-spec here it is!
[02:16:16] <Franciman> i think
[02:16:43] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:16:46] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[02:16:48] *** Joins: vicfred (~vicfred@user/vicfred)
[02:16:56] <EvanR> semantics for \x -> body = \x -> semantics for body where thing on the right is a lambda
[02:18:11] <safinaskar> Franciman: https://github.com/ghc/ghc/blob/master/docs/core-spec/core-spec.pdf
[02:18:32] <Franciman> ty
[02:19:26] <[exa]> "Implementing lazy functional languages on stock hardware" by SPJ has a whole section on operational semantics of STG
[02:19:31] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:21:00] <Franciman> thanks
[02:21:29] *** Quits: MatthiasG2 (~matthias@i6DFA026C.versanet.de) (Quit: Lost terminal)
[02:25:27] *** Joins: oberblastmeister (~oberblast@2001:470:69fc:105::3a60)
[02:25:38] *** Quits: max22- (~maxime@2a01cb08833598007cddd107fb6e9829.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:27:07] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:30:23] *** Joins: brian___ (~brian@c-73-68-74-41.hsd1.ma.comcast.net)
[02:30:27] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[02:31:27] *** Parts: brian___ (~brian@c-73-68-74-41.hsd1.ma.comcast.net) ()
[02:31:30] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[02:31:31] *** Joins: brian___ (~brian@c-73-68-74-41.hsd1.ma.comcast.net)
[02:31:59] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[02:32:21] *** Quits: brian___ (~brian@c-73-68-74-41.hsd1.ma.comcast.net) (Client Quit)
[02:34:03] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[02:35:32] <lbseale> is it best practice to use `catches` to handle exceptions thrown from pure code?
[02:36:37] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[02:36:46] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[02:37:33] <monochrom> Depends on what "handle" means. See my http://www.vex.net/~trebla/haskell/exception-tutorial.xhtml#catch
[02:37:39] <wavemode> at the top level of an application to provide some graceful cleanup, sure
[02:38:03] <lbseale> wavemode, that is what I have in mind
[02:38:18] <lbseale> monochrom, ty I'll read this
[02:38:23] <monochrom> In other languages they don't distinguish "clean up" and "plan B", both are called "handle". In Haskell, we do better.
[02:38:24] <wavemode> but exceptions in pure code usually indicate a bug that really needs to be fixed
[02:39:01] <monochrom> Oh, pure code. Laziness will confound you anyway.
[02:39:06] <ski> @wiki Error vs. Exception
[02:39:06] <lambdabot> https://wiki.haskell.org/Error_vs._Exception
[02:40:04] <monochrom> And yeah we also do better than lumping together "there is an error because I try to open a file, which is not my fault" and "there is an error because I try to divide by zero, which is my fault".
[02:41:12] <monochrom> This is why imperative programming is easier to learn. Or "easier" to learn. There are "fewer" concepts to learn.
[02:41:34] *** Joins: ober (~oberblast@c-73-68-74-41.hsd1.ma.comcast.net)
[02:41:35] <dminuoso> Rembane: Gah, its a shame this doesnt work for non-Bounded like Integer
[02:41:58] <dminuoso> But I guess we can just do
[02:42:12] <dminuoso> % foldMap1_ = foldr1 ((<>) . f)
[02:42:12] <yahb> dminuoso: 
[02:42:26] <dminuoso> % minMax :: (Ord a, Foldable f) => f a -> (a, a); minMax = coerce . foldMap1_ (Min &&& Max)
[02:42:26] <yahb> dminuoso: ; <interactive>:97:67: error:; * Couldn't match expected type: f a -> b1; with actual type: (Min b0, Max b0); * Possible cause: `foldMap1_' is applied to too many arguments; In the second argument of `(.)', namely `foldMap1_ (Min &&& Max)'; In the expression: coerce . foldMap1_ (Min &&& Max); In an equation for `minMax': minMax = coerce . foldMap1_ (Min &&& Max
[02:42:30] <dminuoso> Or some such
[02:43:14] *** ober is now known as Ober
[02:43:16] <dminuoso> Oh
[02:43:19] *** Ober is now known as ober
[02:43:28] *** ober is now known as Oberblast
[02:43:31] *** Oberblast is now known as ober
[02:43:43] * ski . o O ( `catchBind :: Exception e => IO a -> (e -> IO b) -> (a -> IO b) -> IO b' )
[02:45:00] <lbseale> ski, "In this article we use the term exception for expected but irregular situations at runtime" -- this is exactly what I mean by exception
[02:45:51] *** Joins: k8yun_ (~k8yun@24.244.29.102)
[02:46:15] <monochrom> I don't trust word mincing like those.
[02:46:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[02:46:46] <monochrom> I think "is this under my control or not?" is a better question.
[02:47:05] <ski> it can also be useful to distinguish faults, which are inadequacies of the implementation, such as out of memory, out of some other resource, integer overflow (depending)
[02:47:29] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:47:38] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[02:47:51] *** Quits: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[02:49:17] <dminuoso> Mmm, actually we cant trivially do this with foldr1 shame
[02:49:25] *** Quits: k8yun (~k8yun@24.244.29.102) (Ping timeout: 240 seconds)
[02:49:38] <ski> (btw, i don't really have any in principle qualms about using exceptions (not necessarily in the `Exception' sense) for "ordinary but uncommon" situations, like end of file, end of list, parse failure, &c.)
[02:50:30] <lbseale> I think this is a nice example from the wiki page: "First, consider a compiler like GHC. If you feed it a program that contains invalid syntax or inconsistent types, it emits a description of the problem. Such occurrences are considered to be exceptions."
[02:50:40] <wavemode> the usual qualm is performance
[02:50:57] <ski> (i know some people, in some other places, say "exceptions are for exceptional situations", but i don't really understand what that means (it sounds like a tautology). it appears they don't like using it for "end of sequence", e.g., but in my mind that doesn't follow)
[02:51:35] <dibblego> that saying came from java and it is hocus-pocus
[02:51:42] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:52:16] <ski> anyway, i agree that correctly indicating the source of the problem, (which tend to determine to a large degree how you handle it, what you can do about it, if anything) is a good idea
[02:52:21] *** Quits: ober (~oberblast@c-73-68-74-41.hsd1.ma.comcast.net) (Quit: Leaving)
[02:53:46] *** Joins: ober (~oberblast@c-73-68-74-41.hsd1.ma.comcast.net)
[02:53:52] <ski> lbseale : the "expected .. at runtime" vs. "mistakes in the running program" distinction there seem to me to be the most relevant part of that paragraph
[02:53:53] <Rembane> dminuoso: Yeah. I have too bad imagination to realize how it could work for Integer.
[02:54:04] <jackdk> dibblego: I am familiar with its origin but not its hocus-pocusness, and to date have found it a reasonable rule to follow. Can you elaborate?
[02:54:22] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[02:54:31] <dibblego> jackdk: it starts with: what is an "exceptional situation"?
[02:54:35] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[02:54:49] *** Quits: ober (~oberblast@c-73-68-74-41.hsd1.ma.comcast.net) (Client Quit)
[02:55:14] <EvanR> exceptions are so old that's probably entirely relative
[02:55:22] <dibblego> here are some candidate answers 1. the user needs to type A, B, or C; but they typed D 2. The file was not there 3. The network disappeared. 
[02:55:38] <ski> "An exceptional situation is any situation in which you decide to signal the situation by using an exception." -- how about this definition ?
[02:55:45] *** Joins: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[02:55:49] <dibblego> ski: that's the standard conclusion
[02:55:58] <ski> yea. which makes it tautological
[02:56:13] <dminuoso> ski: Its a conflation of etymology, personal interpretation of a word and the word as a particular feature/set of semantics
[02:57:05] <int-e> . o O ( so loss of power (crashing the computer) is not an exceptional situation )
[02:57:10] <dibblego> "The file was not there" is a good answer, yes use exceptions, but the reason why is not: exceptional situation — rather, how I/O works on the machine. A hypothetical machine that didn't use IO for readFile (i.e. where readFile is inside the closed world), we wouldn't use exceptions
[02:57:26] <EvanR> it's funny that we use Either String as a sort of exception, which isn't using any special mechanism... it's totally ordinary code
[02:57:26] <monochrom> An exceptional situation is a situation that shouldn't have survived but it does because it shouldn't have been fit but it's fit.  How about that?  >:)
[02:57:41] *** Quits: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Client Quit)
[02:58:21] *** Joins: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[02:58:53] <monochrom> This is why I ask the question "is it under my control or not?"
[02:59:07] <EvanR> parse error, not under your control
[02:59:12] <EvanR> throw an exception?
[02:59:15] * ski . o O ( stoically-oriented-programming )
[02:59:23] <wavemode> java developers should have lobbied for sum types before espousing this "exceptional situations" dogma...
[02:59:36] <dibblego> I did, in 2005
[02:59:42] <dminuoso> Maybe we should avoid "exceptional" on the basis that its suggestive. Phrases like "irrecoverable situation" or "unexpected condition" seem more precise
[02:59:43] <dibblego> are we there yet?
[03:00:04] <dminuoso> Once you avoid that silly word "exception" in there, you stop making any associative or anti-associative combination with "exception-the-language-feature"
[03:00:23] <dibblego> not precise enough — there is a reason we use exceptions for "the file is not there" versus, "call head on empty list [ignoring actual head["
[03:00:23] * ski . o O ( "The modern Stoic's decision making algorithm" <https://i.imgur.com/67pMoOk.jpg">67pMoOk.jpg> )
[03:00:33] <dminuoso> And you begin thinking of "exception-the-language-feature" more as non-local goto/control transfer
[03:00:36] <lbseale> lol ski 
[03:00:53] <dolio> It means there are tradeoffs when implementing continuations, and some ways are unsuitable for being used as typical control flow for your program if you care about your program working well.
[03:00:59] <dibblego> anyway, didn't mean to start a rant — I have code to write
[03:02:01] <dolio> So you should only use them in uncommon cases where your program is blowing up, and you don't really care about being really efficient.
[03:02:16] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:02:30] <monochrom> Parse errors are why Alternative is an exception system.
[03:02:32] *** ober is now known as bri
[03:02:41] <ski> there's this "try vs. check" aspect of I/O operations. (race conditions)
[03:03:27] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Quit: Leaving)
[03:03:34] <int-e> https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use ?
[03:04:18] <ski> yes
[03:04:42] * ski . o O ( "Parse, don't validate" in 2019-11-05 at <https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/> )
[03:04:52] *** Quits: bri (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Quit: Leaving)
[03:05:44] *** Joins: mvr_ (uid36976@id-36976.tinside.irccloud.com)
[03:05:49] *** Joins: Erutuon (~Erutuon@user/erutuon)
[03:05:54] *** Joins: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[03:06:39] *** Parts: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net) ()
[03:06:49] *** Joins: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[03:06:53] *** Quits: foul_owl (~kerry@23.82.194.143) (Ping timeout: 256 seconds)
[03:08:10] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[03:08:18] <Axman6> we should have that in @where
[03:09:02] <int-e> @help where+
[03:09:02] <lambdabot> where+ <key> <elem>. Define an association
[03:10:39] *** Joins: yauhsien_ (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[03:10:47] <Axman6> @where+ pdv "Parse, don't validate" - https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/ 
[03:10:47] <lambdabot> It is forever etched in my memory.
[03:10:51] <Axman6> @where pdv
[03:10:51] <lambdabot> "Parse, don't validate" - https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/
[03:13:01] *** Quits: bontaq` (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 250 seconds)
[03:14:33] *** Quits: rtsn (~nstr@user/rtsn) (Ping timeout: 250 seconds)
[03:14:53] <monochrom> dibblego: I wonder if we are in agreement and there is at most an apparent disagreement.  head has two sides, the implementer side vs the user side.  The implementer of head cannot force the user to never say "head []", this is not under the implementer's control, so throwing is in order, what else could one do?  The user of head, though, simply shouldn't let themselves use "head []", even if the behaviour is well-understood.
[03:15:33] <monochrom> (Now enter dependent typing. It can rule out "head []" statically. Nothing to worry about!)
[03:15:37] <dibblego> monochrom: I agree
[03:16:29] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[03:16:31] *** Joins: rtsn (~nstr@h-155-4-221-229.NA.cust.bahnhof.se)
[03:17:17] <dibblego> \case [] -> throw "no!"; (h:_) -> h -- we tend to agree not to do this because it is "not exceptional", where "not exceptional" has an actual meaning that diverges considerably from "not exceptional"
[03:17:29] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:17:41] <dibblego> the hocus-pocus from java never gets to an actual meaning
[03:19:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:22:42] *** Joins: foul_owl (~kerry@192.145.116.254)
[03:24:26] <ski> (s/\(h:_\)/h:_/)
[03:24:51] <safinaskar> does somebody want to win $20 000 for proving particular hypotesis on SKI calculus from Stephen Wolfram? https://writings.stephenwolfram.com/2021/06/1920-2020-and-a-20000-prize-announcing-the-s-combinator-challenge/
[03:25:07] <safinaskar> ski: i think you will be especially interested (looking at your nick)
[03:25:52] <ski> hm, announcing a reward tends to make me disinterested
[03:29:11] <Axman6> it'd be enough to show you can define K and I in terms of S right?
[03:29:14] <EvanR> this looks like son of "a new kind of science"
[03:29:19] <Axman6> or to show that you can't
[03:29:32] <dolio> It's pretty obvious that you can't define K.
[03:30:06] <dminuoso> ski: Out of curiosity, why is that?
[03:30:30] <dminuoso> Because it could be an indicator of non-triviality, or because you detest the monetary offering?
[03:30:33] <dolio> That's why it has to change the entire idea of how the 'computation' works.
[03:30:37] <dminuoso> Or both?
[03:31:03] <ski> i'm not too sure. it's an observation. i think it might have to do with intrinsic vs. extrinsic motivation
[03:31:11] <EvanR> sad that wolfram has to pay to find out this question about S combinators, while fermilab gets billions to build a neutrino cannon to shoot under america to answer questions about neutrinos
[03:31:18] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[03:31:35] *** Joins: img (~img@user/img)
[03:32:21] <EvanR> fickle market
[03:34:03] <monochrom> Would you prefer an S cannon that shoots a lot of S's? >:)
[03:34:21] *** Joins: n3rdy1 (~n3rdy1@69-222-188-145.lightspeed.sntcca.sbcglobal.net)
[03:36:13] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[03:36:28] <EvanR> monochrom, the implementor of head can also define the type as (a, [a]) xD
[03:37:15] <EvanR> or do we have 3 parties, the implementor, the user, and some mission control who gave the implementor their task and can't be argued with
[03:37:49] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 256 seconds)
[03:37:51] <EvanR> (re: needing dependent types)
[03:37:51] <wavemode> the implementor, the user, and society
[03:38:44] <EvanR> if only the implementor were captain kirk who hangs up on mission control and does it his own way!
[03:39:28] <dminuoso> ski: Mmm, that's still curious. Even if you dislike extrinsic motivation, you can do it from your own accord without a care of the reward.
[03:39:52] *** Joins: tchakka (~tchakkazu@static-47-180-28-65.lsan.ca.frontiernet.net)
[03:41:29] <EvanR> The best case as far as I am concerned is specific Wolfram Language code that implements the solution. 
[03:41:34] <EvanR> -- Wolfram
[03:41:47] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Read error: Connection reset by peer)
[03:41:56] <EvanR> you don't say?
[03:44:55] *** Quits: taylorswift2018 (~taylorswi@115-188-158-33-fibre.sparkbb.co.nz) (Quit: Leaving)
[03:53:33] *** Quits: mmhat (~mmh@55d4d31f.access.ecotel.net) (Quit: WeeChat 3.4)
[03:54:09] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[03:54:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:54:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:54:48] *** Joins: wroathe (~wroathe@user/wroathe)
[03:56:12] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[03:58:34] *** Quits: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[04:00:06] <monochrom> EvanR: Ideally, group :: [a] -> [NonEmpty a], then I don't have to use "map head (group xs)".
[04:00:39] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[04:01:27] <EvanR> amen
[04:02:11] <monochrom> Another one: "fmap read (some digit)" could be better with refinement types or dependent types.
[04:03:12] <monochrom> Err forgot an "Eq a" constraint!
[04:05:29] <EvanR> it's ok say this is set theory
[04:06:13] <monochrom> Ah but Eq is a bit more than equality. It's decidable equality. Usually...
[04:06:22] <EvanR> yeah
[04:08:03] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[04:08:07] <EvanR> > pi == (4 * atan 1 :: CReal) -- B)
[04:08:09] <lambdabot>  True
[04:09:18] *** Quits: k8yun_ (~k8yun@24.244.29.102) (Ping timeout: 260 seconds)
[04:09:26] <monochrom> Someone ought to troll us with an epic continued-fraction approximation of pi so epic that CReal's == can't tell the difference :)
[04:09:56] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[04:10:42] <EvanR> it would also say True due to how Eq works
[04:11:02] <dolio> > pi == (pi - 1e-50 :: CReal)
[04:11:04] <lambdabot>  True
[04:11:08] <EvanR> with the classic advice "just use deltas"
[04:12:06] *** Quits: yauhsien_ (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[04:12:32] <EvanR> when they really are equal it returns True, good enough for government work
[04:14:17] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:15:09] <ephemient> https://xkcd.com/217/
[04:15:16] <monochrom> "Truth doesn't lie." :)
[04:16:24] *** Joins: vysn (~vysn@user/vysn)
[04:19:20] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[04:21:26] *** Joins: cjb (~cjb@user/cjb)
[04:24:56] *** Joins: haskell_ (~haskell@65-102-32-32.ptld.qwest.net)
[04:25:57] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Remote host closed the connection)
[04:26:40] *** Quits: haskell_ (~haskell@65-102-32-32.ptld.qwest.net) (Remote host closed the connection)
[04:27:10] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[04:27:13] *** Joins: mikail (~mikail@2a02:c7f:bc1f:4a00:1f95:fc24:559b:d565)
[04:27:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:33:34] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[04:33:50] <safinaskar> monochrom: cool phrase :)
[04:34:23] <safinaskar> monochrom: here is another one: "true means agrees with a model"
[04:35:28] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[04:36:25] <dibblego> monochrom: https://hackage.haskell.org/package/digit-0.11/docs/Data-Digit-Decimal.html#v:parseDecimal
[04:39:01] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[04:40:57] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[04:41:30] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[04:42:37] <safinaskar> monochrom: catMaybes $ map Data.Maybe.listToMaybe $ group xs
[04:43:05] <safinaskar> % catMaybes $ map Data.Maybe.listToMaybe $ group [2, 2, 3, 3, 3]
[04:43:06] <yahb> safinaskar: ; <interactive>:120:13: error:; Ambiguous occurrence `map'; It could refer to; either `Data.List.NonEmpty.map', imported from `Data.List.NonEmpty'; or `Prelude.map', imported from `Prelude' (and originally defined in `GHC.Base'); <interactive>:120:42: error:; Ambiguous occurrence `group'; It could refer to; either `Data.List.NonEmpty.group', imported from `Data.Lis
[04:43:13] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:43:29] <safinaskar> % catMaybes $ Prelude.map Data.Maybe.listToMaybe $ group [2, 2, 3, 3, 3]
[04:43:29] <yahb> safinaskar: ; <interactive>:121:50: error:; Ambiguous occurrence `group'; It could refer to; either `Data.List.NonEmpty.group', imported from `Data.List.NonEmpty'; or `Data.List.group', imported from `Data.List' (and originally defined in `base-4.15.0.0:Data.OldList')
[04:43:33] *** Quits: mikail (~mikail@2a02:c7f:bc1f:4a00:1f95:fc24:559b:d565) (Quit: Leaving)
[04:43:49] <geekosaur> oy
[04:43:51] <safinaskar> % catMaybes $ Prelude.map Data.Maybe.listToMaybe $ Data.List.group [2, 2, 3, 3, 3]
[04:43:51] <yahb> safinaskar: [2,3]
[04:44:16] <geekosaur> now, does that actually dpo what you want?
[04:44:26] <geekosaur> % catMaybes $ Prelude.map Data.Maybe.listToMaybe $ Data.List.group [2, 2, 3, 3, 3, 2]
[04:44:26] <yahb> geekosaur: [2,3,2]
[04:46:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[04:47:06] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[04:50:20] *** Quits: alo (~alo@user/alo) (Ping timeout: 250 seconds)
[04:53:08] *** Parts: safinaskar (~quassel@109-252-91-116.nat.spd-mgts.ru) ()
[04:53:59] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 256 seconds)
[04:54:43] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[04:56:35] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[04:57:27] <Inst[m]> can i ask about tuples in haskell?
[04:58:58] <Inst> are there standard toolsets to manipulate tuples? they look like really interesting data structures, but they seem boring in Haskell
[04:59:48] <EvanR> XY problem sense tingling
[05:00:21] <EvanR> tuples are pretty boring
[05:00:32] <Axman6> They';re just the canonical product type, like Either is the canonical sum type. )nothing particularly interesting about them
[05:00:58] <EvanR> > swap ('a',1)
[05:00:59] <lambdabot>  (1,'a')
[05:01:26] <dibblego> > over _1 (+1) (1, 'a')
[05:01:28] <lambdabot>  (2,'a')
[05:02:04] <Inst> ah okay, so there's ways to deal with tuples beyond fst snd defined in libs
[05:02:14] <Axman6> % (1, Left 7) & _2 . _Left %~ show
[05:02:15] <yahb> Axman6: (1,Left "7")
[05:02:26] <Inst> thanks for the insight that they're just the canonical product type
[05:02:32] <Axman6> it's one of the usual examples of why lens is useful
[05:02:43] <Axman6> % :t _1
[05:02:44] <yahb> Axman6: (Field1 s t a b, Functor f) => (a -> f b) -> s -> f t
[05:03:01] <Axman6> % :info Field1
[05:03:02] <yahb> Axman6: type Field1 :: * -> * -> * -> * -> Constraint; class Field1 s t a b | s -> a, t -> b, s b -> t, t a -> s where; _1 :: Lens s t a b; default _1 :: (GHC.Generics.Generic s, GHC.Generics.Generic t, Control.Lens.Tuple.GIxed Control.Lens.Tuple.N0 (GHC.Generics.Rep s) (GHC.Generics.Rep t) a b) => Lens s t a b; -- Defined in `Control.Lens.Tuple'; instance [safe] Field1 (Identity a) (Identity b) a b -- 
[05:04:06] <Axman6> https://hackage.haskell.org/package/lens-5.1/docs/Control-Lens-Tuple.html
[05:05:12] <EvanR> lens or define a function (a -> b) -> (a,c) -> (b,c)
[05:05:14] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[05:05:40] *** Joins: pavonia (~user@user/siracusa)
[05:06:20] <Axman6> trying to decide if an instance for Field1 for NonEmpty is a dumb idea or not
[05:06:43] <EvanR> makes sense to me xD
[05:08:35] <Inst> also, haskell report preface is hilarious
[05:08:46] <Inst> "2. It should be completely described via the publication of a formal syntax and semantics"
[05:09:05] <Inst> "Haskell 2010 is the first revision to be created in this way, and new revisions are expected once per year"
[05:09:44] <EvanR> good old haskell O' ten
[05:10:20] *** Joins: Null_A (~null_a@2601:645:8700:2290:6473:b18:2fbd:1123)
[05:12:14] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[05:14:21] <jackdk> On the plus side, if a new report dropped tomorrow, there's still a good chance we could call it "Haskell 2020"...
[05:14:29] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[05:14:43] <jackdk> Axman6: do it for `Identity` too
[05:15:03] <Axman6> the :info above says that's aready there
[05:15:31] <jackdk> Axman6: even better
[05:15:59] <Axman6> the instance should just be coerce
[05:16:42] <Axman6> Looking at the lans changelog, it kinda blows my mind that it so recently "Drop[ed] support for GHC 7.10 and older."
[05:17:13] <Axman6> pretty sure I was using 7.6 when I started learning Haskell, and 7.10 wasn't too long after that
[05:19:49] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[05:22:32] *** Joins: asivitz (uid178348@id-178348.tinside.irccloud.com)
[05:23:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:25:34] *** Joins: deadmarshal (~deadmarsh@95.38.117.237)
[05:25:49] *** Quits: n3rdy1 (~n3rdy1@69-222-188-145.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[05:29:37] *** Joins: cjb (~cjb@user/cjb)
[05:29:45] *** Quits: deadmarshal (~deadmarsh@95.38.117.237) (Ping timeout: 250 seconds)
[05:30:38] *** Quits: Null_A (~null_a@2601:645:8700:2290:6473:b18:2fbd:1123) (Remote host closed the connection)
[05:30:55] <monochrom> @quote monochrom flies.*macro
[05:30:55] <lambdabot> monochrom says: Time flies like an arrow.  Fruit flies like a banana.  Syntax rules like a macro.
[05:32:31] *** Quits: caasih (sid13241@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[05:32:33] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[05:32:39] *** Quits: gmc (sid58314@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:32:40] *** Joins: caasih (sid13241@id-13241.ilkley.irccloud.com)
[05:32:48] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[05:32:48] *** Joins: gmc (sid58314@id-58314.ilkley.irccloud.com)
[05:36:41] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::80f1) (Ping timeout: 250 seconds)
[05:37:01] *** Quits: xff0x (~xff0x@2001:1a81:532d:cf00:6935:8bd3:eb0:937d) (Ping timeout: 240 seconds)
[05:37:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:37:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:37:35] *** Joins: wroathe (~wroathe@user/wroathe)
[05:37:47] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[05:39:15] *** Joins: xff0x (~xff0x@2001:1a81:533f:ea00:5f96:9e03:4e30:341d)
[05:39:26] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 252 seconds)
[05:42:09] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:42:23] *** Joins: Erutuon (~Erutuon@user/erutuon)
[05:44:57] *** Joins: califax- (~califax@user/califx)
[05:45:43] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Quit: Lost terminal)
[05:45:57] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[05:49:14] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[05:49:21] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:49:21] *** califax- is now known as califax
[05:49:47] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:52:44] *** Joins: dajoer (~david@user/gvx)
[05:53:29] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 256 seconds)
[05:55:45] *** Joins: lemonsni- (~lemonsnic@86.4.248.115)
[05:55:51] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[05:55:51] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 276 seconds)
[05:56:00] *** Joins: razetime (~quassel@49.207.209.26)
[05:56:19] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 256 seconds)
[05:56:19] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[05:56:38] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Ping timeout: 268 seconds)
[05:57:06] *** Joins: nunggu (~q@user/nunggu)
[05:58:04] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[05:59:29] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[06:00:18] *** Joins: justAGuest (~justAGues@136.206.5.117)
[06:01:18] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Changing host)
[06:01:18] *** Joins: zfnmxt (~zfnmxtzfn@user/zfnmxt)
[06:01:59] *** Joins: Null_A (~null_a@2601:645:8700:2290:6473:b18:2fbd:1123)
[06:04:38] *** Quits: justAGuest (~justAGues@136.206.5.117) (Client Quit)
[06:19:15] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[06:21:14] *** Joins: nunggu (~q@user/nunggu)
[06:25:58] *** Joins: mbuf (~Shakthi@122.178.191.223)
[06:27:48] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[06:29:26] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Remote host closed the connection)
[06:29:45] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[06:30:38] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[06:32:15] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[06:32:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:6473:b18:2fbd:1123) (Remote host closed the connection)
[06:39:32] *** sshine` is now known as sshine
[06:45:41] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[06:45:58] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[06:52:14] *** Quits: dolio (~dolio@130.44.130.54) (Read error: Connection reset by peer)
[06:52:30] *** Joins: dolio (~dolio@130.44.130.54)
[06:53:06] *** Quits: foul_owl (~kerry@192.145.116.254) (Ping timeout: 260 seconds)
[06:57:10] *** Quits: dolio (~dolio@130.44.130.54) (Client Quit)
[06:58:09] *** Quits: mvr_ (uid36976@id-36976.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:58:10] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[07:03:30] *** Joins: dolio (~dolio@130.44.130.54)
[07:08:17] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[07:09:02] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[07:10:40] *** Joins: foul_owl (~kerry@94.140.8.224)
[07:12:15] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:29] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:13:32] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[07:14:47] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:14:47] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:14:47] *** finn_elija is now known as FinnElija
[07:18:09] *** Quits: td_ (~td@muedsl-82-207-238-072.citykom.de) (Ping timeout: 256 seconds)
[07:20:01] *** Joins: td_ (~td@muedsl-82-207-238-149.citykom.de)
[07:20:38] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:21:54] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[07:25:05] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[07:30:23] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 256 seconds)
[07:34:08] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:34:20] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:36:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:41:06] *** Joins: yauhsien_ (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[07:45:58] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[07:47:44] *** Joins: unyu (~pyon@user/pyon)
[07:50:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:51:14] *** Quits: yauhsien_ (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:51:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:51:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:51:51] *** Joins: wroathe (~wroathe@user/wroathe)
[07:52:03] *** Joins: yauhsien_ (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[07:55:09] *** Quits: yauhsien_ (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:55:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[07:55:54] *** Joins: yauhsien_ (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[08:00:37] *** Quits: yauhsien_ (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[08:12:02] *** Joins: yuvi (~uv125@192.54.96.185)
[08:13:20] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::80f1)
[08:15:40] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:18:49] <yuvi> hi! im new here
[08:19:17] <Axman6> Hello!
[08:19:50] *** Quits: Chai-T-Rex (~ChaiTRex@user/chaitrex) (Quit: Chai-T-Rex)
[08:20:24] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[08:22:35] <Axman6> yuvi: was there anything we can help you with or you just here to hang with the cool kids 
[08:25:02] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 260 seconds)
[08:25:19] *** Joins: tommd (~tommd@67-42-147-226.ptld.qwest.net)
[08:25:24] <yuvi> Axman6: haha both. im stuck on my programming assignment and was curious what irc is like. ill tell it to you
[08:26:41] <yuvi> so i need to implement my own version of isPrefixOf from Data.List. but the catch is i can only use foldr and map, and recursion is banned
[08:27:08] <yuvi> the type is startsWith :: String -> String -> Bool
[08:27:10] <Axman6> go ahead, thought bare in mind that while we're happyu to help you find the solution, we're not going to give it to you (and there is a pretty high chance that your lecturer is in this channel)
[08:27:23] <yuvi> dont worry i understand :-)
[08:27:23] <Axman6> That's a fun one!
[08:27:53] <Axman6> So what have you tried?
[08:28:10] <Axman6> and what's your understanding of what foldr does?
[08:28:30] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:c1b4:4e62:c0e4:304a)
[08:29:02] <yuvi> ive been given a hint that in order to do this without recursion, foldr must itself return a function, which is hard for me to conceptualize
[08:29:21] *** Quits: phma (phma@2001:5b0:215a:adf8:f4aa:f392:c0b4:ceef) (Read error: Connection reset by peer)
[08:29:27] <yuvi> my guess for the structure of the function is startsWith s1 s2 = (foldr (???) ??? s1) s2
[08:29:43] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:30:05] <yuvi> my understanding of foldr is that it is a way to reduce a list to a single value using an accumulator. im not sure how a fold can return a function
[08:30:47] *** Joins: phma (phma@2001:5b0:211f:7e68:f18f:96de:b488:61b7)
[08:31:05] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[08:33:09] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[08:33:16] <dibblego> functions are values
[08:34:47] *** Joins: nunggu (~q@user/nunggu)
[08:35:04] <monochrom> No, the "redcuse by accumulator" model is utterly useless for this.
[08:35:13] *** Joins: haskell_ (~haskell@172.56.42.14)
[08:35:25] <monochrom> That simple model is OK for simple examples like "1+(2+(3+...", sure.
[08:35:27] <dibblego> also that, but "single value" is fine, and since functions are values, "single function" is also fine
[08:35:30] <monochrom> But not this advanced question.
[08:35:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:37:20] *** Quits: haskell_ (~haskell@172.56.42.14) (Remote host closed the connection)
[08:38:24] <Inst> yuvi: just do it with recursion anyways
[08:38:34] <Inst> then try to think of how you can change it to a foldr
[08:38:45] <Inst> since foldr is basically just automated recursion
[08:40:14] <monochrom> Yes I write my own recursion then see how the code fits foldr's recursion.
[08:41:16] <ski> hm .. can you use pattern-matching (on empty list and non-empty list) ?
[08:41:25] <yuvi> ok. i did have to do it with recursion for a previous problem already. for that i compared the two heads of s1 and s2 and "anded" them with startsWith on the tails
[08:41:36] <yuvi> yes pattern matching is permitted
[08:41:43] <ski> that makes it a lot easier
[08:41:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:41:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:41:52] *** Joins: wroathe (~wroathe@user/wroathe)
[08:42:51] <yuvi> one problem im thinking of when converting from recursion to foldr is how do i save the boolean value and iterate over the list at the same time. i cant figure out what the type of the accumulator should be
[08:42:58] <ski> (if you could only traverse the lists via `foldr' and `map', then i wouldn't class this as a beginner problem)
[08:43:27] <dibblego> another intermediate step: write this with foldr :: [a] -> Maybe (a, [a])
[08:43:28] <yuvi> i see. this is my first course in haskell and its week 2 LMAO
[08:43:46] <dibblego> we do a similar exercise on day 1 of fp-course
[08:44:07] <dibblego> with some hand-holding and a proper explanation of foldr
[08:45:25] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 256 seconds)
[08:45:42] <Axman6> > foldr f z [1,2,3] :: Expr
[08:45:44] <lambdabot>  f 1 (f 2 (f 3 z))
[08:46:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:47:30] <Axman6> yuvi: just as a heads up, this problem is not exactly trivial, and I would probably get it wrong on my first try, so don't get lulled into a sense of simplicity
[08:48:07] <Axman6> one of the first difficulties is deciding which od the lists you want to recurse over, the needle or the haystack
[08:48:09] <monochrom> https://ertes.eu/tutorial/foldr.html#foldr shows a useful method.
[08:48:44] <Inst> wait, is isPrefixOf defined via foldr?
[08:48:53] <dibblego> dunno is it?
[08:48:55] <yuvi> Inst: it is defined using recursion
[08:49:15] <monochrom> In your case, you should think in terms of "isPrefixOf [] = \??? -> ???", "isPrefixOf (x:xs) = \y -> case y of ...???"
[08:49:18] <Axman6> but is can be defined using foldr
[08:49:20] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[08:49:57] <Axman6> monochrom++
[08:50:39] <monochrom> To be sure, this is an advanced question (on ground that it requires more abstract thinking, less intuition).  I didn't know it could be done until "Hint: return a function".
[08:50:56] <Inst> btw yuvi: not sure if this is a tip or if i've just being dense
[08:51:00] <Inst> are you familiar with lambdas?
[08:51:12] <yuvi> Inst: yes
[08:51:18] <monochrom> But I have done an even more unbelievable one such as "foldl is a foldr too" so meh.
[08:52:45] <Inst> also, is it a bad idea to post a GHC feature request asking for =@ to get added to Data.Foldables as a synonym for elem?
[08:53:44] <ski> why not ⌜(∈)⌝, then ?
[08:54:49] <monochrom> It's a bad idea because it doesn't belong to GHC feature request. It's a library feature request.
[08:54:52] <Inst> i see
[08:55:00] <Inst> is it reasonable to look for a library feature request and post it?
[08:55:16] <monochrom> GHC feature request would be "may I have predicate subtypes" for example.
[08:55:40] <monochrom> Or "may I have COBOL syntax"
[08:57:11] <Inst> also, just curious, i like yuvi's question
[08:57:17] <Inst> i don't want to solve it for her/him
[08:57:33] <Inst> if lambdas are allowed, it's possible to do something really degenerate
[08:57:57] *** Quits: tommd (~tommd@67-42-147-226.ptld.qwest.net) (Ping timeout: 250 seconds)
[08:58:14] <monochrom> Ugh allowing lambdas is not degenerate.
[08:58:28] <monochrom> It is disallowing lambda that's degenerate. Look at COBOL for example.
[08:58:50] <monochrom> 1st-order-only or even 0th-order-only.
[08:59:25] <monochrom> In the same sense that, for example, 0-dimension vector space is a degenerate vector space.
[09:00:33] *** Joins: akegalj (~akegalj@141-136-168-212.dsl.iskon.hr)
[09:00:45] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:01:10] *** Joins: k8yun_ (~k8yun@24.244.29.99)
[09:04:24] <Inst> it should be possible to use the accumulator to store information, and use a lambda that takes \x y to analyze the information on the accumulator
[09:04:40] * ski never really understood why some people want to exclude such degeneracy cases from falling under the definition
[09:04:42] <Inst> it's just really ugly though
[09:05:10] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[09:05:53] <EvanR> that's why they're called turing tarpits and not turing um taj mahals
[09:05:59] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 250 seconds)
[09:07:22] *** Joins: haskell_ (~haskell@172.56.42.64)
[09:07:47] *** Quits: haskell_ (~haskell@172.56.42.64) (Remote host closed the connection)
[09:08:54] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[09:10:19] *** Joins: nunggu (~q@user/nunggu)
[09:13:27] <Inst> can also consider nested lambdas
[09:21:23] *** Quits: nunggu (~q@user/nunggu) (Remote host closed the connection)
[09:21:41] <dsal> Inst: Are you wanting a paramorphism?
[09:21:44] *** Joins: nunggu (~q@user/nunggu)
[09:22:10] <dsal> It's unclear exactly what you're trying to do, but if you've not read the barbed wire paper, that might help.
[09:23:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:24:04] <ski> Inst isn't the one wanting to do it, really
[09:24:44] *** Joins: haskell_ (~haskell@172.56.42.179)
[09:25:15] *** Quits: haskell_ (~haskell@172.56.42.179) (Remote host closed the connection)
[09:27:25] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[09:27:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:29:17] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:740e:1010:1471:f716) (Ping timeout: 240 seconds)
[09:31:54] *** Joins: deadmarshal (~deadmarsh@95.38.117.237)
[09:32:12] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[09:34:28] *** Joins: rusrushal13 (~rusrushal@2401:4900:30b1:b349:313f:fa70:9419:b887)
[09:35:32] <yuvi> ill be back tomorrow if i still cant figure it out. thanks all
[09:35:42] *** Quits: yuvi (~uv125@192.54.96.185) (Quit: WeeChat 2.8)
[09:37:58] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[09:40:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:41:54] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:44:41] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[09:49:07] *** Quits: myme (~myme@2a01:799:d5a:cd00:fb5a:85b7:3647:e056) (Ping timeout: 268 seconds)
[09:49:59] *** Joins: myme (~myme@2a01:799:d5a:cd00:4746:bc4e:ee58:44d9)
[09:53:42] *** Quits: xff0x (~xff0x@2001:1a81:533f:ea00:5f96:9e03:4e30:341d) (Ping timeout: 260 seconds)
[09:54:27] *** Joins: xff0x (~xff0x@2001:1a81:533f:ea00:7b8c:668:4058:35b)
[09:56:35] *** Quits: rusrushal13 (~rusrushal@2401:4900:30b1:b349:313f:fa70:9419:b887) (Ping timeout: 256 seconds)
[09:57:57] *** Joins: cosimone (~user@93-47-228-151.ip115.fastwebnet.it)
[09:58:30] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[10:03:07] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:2d5c:e7c5:18a:2cdc)
[10:07:50] <hololeap> does anyone know of a framework to deploy threepenny-gui other than electron? I remember seeing an alternative but I can't remember the name
[10:09:59] *** Joins: FroskyArr (~froskyarr@120.239.9.146)
[10:11:05] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::80f1) (Ping timeout: 256 seconds)
[10:13:47] *** Quits: foul_owl (~kerry@94.140.8.224) (Ping timeout: 250 seconds)
[10:16:48] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[10:22:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:28:21] *** Joins: foul_owl (~kerry@94.140.8.51)
[10:32:29] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[10:34:34] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[10:37:04] *** Joins: jakalx (~jakalx@base.jakalx.net)
[10:37:43] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[10:41:13] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[10:43:36] *** Quits: k8yun_ (~k8yun@24.244.29.99) (Read error: Connection reset by peer)
[10:44:57] *** Quits: xff0x (~xff0x@2001:1a81:533f:ea00:7b8c:668:4058:35b) (Ping timeout: 240 seconds)
[10:46:13] *** Joins: xff0x (~xff0x@2001:1a81:533f:ea00:4e49:abcb:9c05:c4b8)
[10:52:13] *** Joins: yauhsien_ (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[10:55:46] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 260 seconds)
[10:55:53] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:1001:bfbe:d16:fcbe)
[10:57:03] *** Joins: frosky_ (~froskyarr@120.239.9.146)
[10:58:25] *** Quits: yauhsien_ (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[11:00:26] *** Quits: FroskyArr (~froskyarr@120.239.9.146) (Ping timeout: 260 seconds)
[11:06:52] *** Joins: ardell (~ardell@user/ardell)
[11:07:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[11:09:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:09:41] *** Quits: frosky_ (~froskyarr@120.239.9.146) (Ping timeout: 256 seconds)
[11:10:42] *** Quits: cosimone (~user@93-47-228-151.ip115.fastwebnet.it) (Remote host closed the connection)
[11:10:59] *** Joins: michalz (~michalz@185.246.204.75)
[11:13:48] *** Joins: cosimone (~user@93-47-228-151.ip115.fastwebnet.it)
[11:14:22] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[11:17:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:17:47] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[11:19:54] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[11:20:38] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Max SendQ exceeded)
[11:21:05] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[11:25:58] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:26:35] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:26:40] *** Joins: kuribas (~user@ptr-25vy0i8mlszjpxncneu.18120a2.ip6.access.telenet.be)
[11:27:53] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:29:08] *** Joins: cfricke (~cfricke@user/cfricke)
[11:33:21] *** Joins: alp (~alp@user/alp)
[11:37:39] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:2d5c:e7c5:18a:2cdc) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:45:33] *** Quits: ubert (~Thunderbi@p548c8cd6.dip0.t-ipconnect.de) (Quit: ubert)
[11:45:42] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 260 seconds)
[11:49:16] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:51:37] *** Quits: wavemode (~wavemode@2601:241:0:fc90:7b48:d1cc:a5e5:a126) (Ping timeout: 256 seconds)
[11:52:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:53:26] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[11:53:51] *** Joins: alp (~alp@user/alp)
[11:55:06] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[11:56:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[11:58:47] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[12:01:07] *** Joins: MajorBiscuit (~MajorBisc@c-001-001-054.client.tudelft.eduvpn.nl)
[12:01:34] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:03:39] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[12:06:31] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[12:06:39] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:07:05] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[12:11:15] *** Joins: AlexisTP (~AlexisTP3@92.57.44.63)
[12:13:49] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[12:13:57] *** Quits: akegalj (~akegalj@141-136-168-212.dsl.iskon.hr) (Ping timeout: 256 seconds)
[12:15:49] *** Joins: AlexisTP2 (~AlexisTP3@92.57.44.63)
[12:18:15] *** Quits: AlexisTP (~AlexisTP3@92.57.44.63) (Ping timeout: 256 seconds)
[12:18:54] *** Quits: AlexisTP2 (~AlexisTP3@92.57.44.63) (Client Quit)
[12:18:55] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:19:08] *** Joins: AlexisTP2 (~AlexisTP3@92.57.44.63)
[12:19:28] *** Quits: rando25892 (~homefame@user/rando25892) (Quit: enemy at the gate)
[12:21:37] *** AlexisTP2 is now known as AlexisTP
[12:22:04] *** Joins: chele (~chele@user/chele)
[12:22:30] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:1dc4:f5c4:a458:81) (Remote host closed the connection)
[12:22:52] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[12:29:13] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[12:32:07] *** Quits: AlexisTP (~AlexisTP3@92.57.44.63) (Quit: Leaving)
[12:32:39] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Ping timeout: 256 seconds)
[12:32:51] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[12:32:56] <dminuoso> Mmm, is there a tool/way to vendor the entire transitive dependency graph of a cabal package?
[12:33:06] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:33:12] *** Joins: FragByte (~christian@user/fragbyte)
[12:33:27] <dminuoso> Background is, Im toying with the idea of checking the dependency graph in as a way to be able to audit changes when I update that dependency graph
[12:33:38] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[12:34:17] <dminuoso> And while initially I played around the idea of equipping cabal with the tools, it might be much much easier to do it this way because it would amount to some kind of `cabal update && cabal vendor-dependency-graph && git diff`
[12:35:08] *** Joins: AlexisTP (~AlexisTP3@92.57.44.63)
[12:37:57] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:c1b4:4e62:c0e4:304a) (Ping timeout: 240 seconds)
[12:41:16] <ephemient> you want something more than `cabal freeze`?
[12:42:24] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:42:28] <dminuoso> Yes, it's not as much the locking part Im concerned about, but being able to vet *source* differences across updates in my dependency graph
[12:44:43] <dminuoso> Incidentally it also decouples your build process from hackage improving offline builds, and it avoids issues like having some kind of global cabal store on a builder that can be updated causing friction
[12:47:33] <ephemient> I suppose you could download and unpack all dependencies and tie them together with a `cabal.project`
[12:47:47] <ephemient> I don't know if there's any tooling that will do that for you though
[12:47:50] <dminuoso> Yup, that's the idea. :)
[12:57:53] *** Joins: __monty__ (~toonn@user/toonn)
[13:00:53] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[13:04:35] *** Joins: mncheck (~mncheck@193.224.205.254)
[13:08:46] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[13:09:04] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[13:11:38] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:12:18] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[13:14:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[13:15:21] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 245 seconds)
[13:20:20] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[13:21:08] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Remote host closed the connection)
[13:21:27] *** Joins: max22- (~maxime@2a01cb08833598001ee79bb16bcae2a5.ipv6.abo.wanadoo.fr)
[13:23:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:58f7:de82:9fa8:330)
[13:23:05] *** Joins: notzmv (~zmv@user/notzmv)
[13:27:26] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:58f7:de82:9fa8:330) (Ping timeout: 260 seconds)
[13:29:09] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:216f:fa56:c9b1:3e43)
[13:33:06] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:34:04] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[13:38:59] *** Joins: thevishy (~Nishant@2405:201:f005:c007:e0f1:5635:e895:47c6)
[13:39:01] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:41:02] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[13:41:05] *** Quits: dffo^ (~dffo@128-092-182-020.biz.spectrum.com) (Remote host closed the connection)
[13:43:43] *** Joins: zaquest (~notzaques@5.130.79.72)
[13:45:25] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[13:46:29] *** Joins: fendor (~fendor@91.141.68.59.wireless.dyn.drei.com)
[13:56:56] *** Joins: jollygood2 (~bc8147f2@cerf.good1.com)
[14:01:42] *** Joins: dsrt^ (~dsrt@128-092-182-020.biz.spectrum.com)
[14:03:19] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:4989:132:1295:a68)
[14:05:39] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:09:50] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:4989:132:1295:a68) (Ping timeout: 252 seconds)
[14:12:36] *** Joins: sektor|2 (~kvirc@87.227.175.182)
[14:19:34] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[14:20:52] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[14:25:48] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[14:26:19] *** Quits: ardell (~ardell@user/ardell) (Ping timeout: 256 seconds)
[14:26:21] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[14:27:43] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[14:28:42] <jackdk> nix, perhaps?
[14:28:48] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[14:29:04] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[14:29:35] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:30:27] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:385f:7529:31a:7cc)
[14:31:26] <DigitalKiwi> i was thinking that but everyone gets mad here when we suggest it
[14:33:55] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[14:34:55] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[14:35:27] <geekosaur> nix has its place. it's just not *my* place
[14:37:25] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:385f:7529:31a:7cc) (Ping timeout: 256 seconds)
[14:46:35] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[14:47:14] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 260 seconds)
[14:49:24] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:49ca:6d07:64a:8665)
[14:56:02] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:49ca:6d07:64a:8665) (Ping timeout: 252 seconds)
[14:58:20] *** Quits: rtsn (~nstr@h-155-4-221-229.NA.cust.bahnhof.se) (Changing host)
[14:58:20] *** Joins: rtsn (~nstr@user/rtsn)
[14:59:21] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:68b8:ca9:8601:35d3)
[14:59:42] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:02:37] *** Joins: Guest91 (~Guest91@103.231.89.231)
[15:02:49] *** Joins: unyu (~pyon@user/pyon)
[15:02:54] *** Joins: rusrushal13 (~rusrushal@2409:4056:108:9c3b:d7fd:94d2:1ba2:efdd)
[15:03:50] *** Quits: Guest91 (~Guest91@103.231.89.231) (Client Quit)
[15:04:56] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 245 seconds)
[15:06:08] *** Quits: unyu (~pyon@user/pyon) (Client Quit)
[15:08:40] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:09:22] *** Quits: sheb_ (~sheb@31.223.228.71) (Quit: Leaving)
[15:10:37] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:68b8:ca9:8601:35d3) (Ping timeout: 240 seconds)
[15:17:47] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7c1f:c247:2b7b:d046)
[15:18:46] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[15:19:17] *** Joins: ober (~brian@c-73-68-74-41.hsd1.ma.comcast.net)
[15:19:54] *** Quits: ober (~brian@c-73-68-74-41.hsd1.ma.comcast.net) (Client Quit)
[15:20:24] <maerwald> haha
[15:20:57] *** Quits: quintasan (~quassel@quintasan.pl) (Ping timeout: 256 seconds)
[15:23:33] *** Quits: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[15:25:40] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[15:26:23] *** Quits: rusrushal13 (~rusrushal@2409:4056:108:9c3b:d7fd:94d2:1ba2:efdd) (Ping timeout: 256 seconds)
[15:26:41] *** Joins: quintasan (~quassel@quintasan.pl)
[15:26:53] *** Joins: akegalj (~akegalj@141-136-168-212.dsl.iskon.hr)
[15:29:37] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[15:32:18] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[15:33:16] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:33:53] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:216f:fa56:c9b1:3e43) (Remote host closed the connection)
[15:34:05] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:947b:22d6:c94:9589)
[15:37:41] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:42:16] *** Joins: rusrushal13 (~rusrushal@2401:4900:447d:f2bb:d612:874b:92ea:4923)
[15:42:22] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:43:00] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[15:43:09] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:43:35] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[15:44:00] <romesrf> o/
[15:44:55] *** Quits: mncheckm (~mncheck@193.224.205.254) (Quit: Leaving)
[15:54:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:55:59] *** Joins: thyriaen (~thyriaen@simnet-nat-pool-185-130-54-208.stargrpns.pp.ua)
[15:56:43] <thyriaen> howdy friends, is there a haskell prelude documentation on linux where I can look up specific functions like on a man page ?
[15:56:48] *** Joins: xkuru (~xkuru@user/xkuru)
[15:56:59] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:57:22] <thyriaen> I mean something like hoogle or hackage but as a linux terminal utility
[15:57:49] <merijn> thyriaen: Hoogle has a commandline client :)
[15:57:58] <lep> ghci provides a built-in :doc command, and hoogle cli should do it aswell
[15:58:16] <geekosaur> also https://github.com/lazamar/haskell-docs-cli
[15:58:29] <merijn> Getting it running the first time is a bit of a hassle, but it does exist. In fact, you can make it index stuff Hoogle doesn't index too :p
[15:59:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[15:59:11] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[15:59:25] <thyriaen> ah perfect, thanks lep it was what i was looking for
[15:59:37] <thyriaen> i will give hoogle a shot if that won't be enough for me
[16:00:03] <lep> yeah it's very nice. before ghci had :doc i had a hoogle alias in my .ghci-file
[16:00:57] <boxscape_> are haddock comments stored in the interface files?
[16:01:11] <geekosaur> not currently
[16:01:20] <boxscape_> where does ghci get them from?
[16:01:51] <geekosaur> there's an extended interface file spec in development which includes them; I don't *think* it's in play yet though
[16:02:01] <boxscape_> okay
[16:02:14] <geekosaur> although maybe it is and ghci is using it
[16:02:34] <geekosaur> I kinda lost trackof the current state of .hie files
[16:03:12] <thyriaen> can i list all prelude functions within ghci with doc somehow ?
[16:06:14] <boxscape_> I think if that were possible it would be part of the :browse command, but the browse command doesn't seem to allow you to display docs
[16:10:00] <polyphem> thyriaen: hdc :mi Base.Prelude
[16:10:54] <thyriaen> i ment browse, it is perfect thanks
[16:12:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:14:31] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6197:e762:8e5b:d7b9)
[16:17:57] *** Joins: unyu (~pyon@user/pyon)
[16:25:31] *** Joins: yauhsien (~yauhsien@61-231-29-69.dynamic-ip.hinet.net)
[16:27:00] <jollygood2> is hoogle included with ghc
[16:27:23] <jollygood2> cli hoogle
[16:29:07] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[16:29:30] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[16:30:53] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Remote host closed the connection)
[16:31:38] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[16:33:35] *** Quits: thyriaen (~thyriaen@simnet-nat-pool-185-130-54-208.stargrpns.pp.ua) (Remote host closed the connection)
[16:36:37] *** Quits: quintasan (~quassel@quintasan.pl) (Ping timeout: 240 seconds)
[16:37:10] <merijn> jollygood2: No, Hoogle is a standalone program
[16:37:30] <merijn> @hackage hoogle
[16:37:30] <lambdabot> https://hackage.haskell.org/package/hoogle
[16:37:49] <merijn> jollygood2: The cabal package for the webservice also includes the CLI executable
[16:45:29] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[16:46:07] *** Joins: bontaq` (~user@ool-45779fe5.dyn.optonline.net)
[16:50:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:53:22] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[16:54:01] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[16:55:48] *** Joins: jumper149 (~jumper149@base.felixspringer.xyz)
[16:57:40] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[16:57:55] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[16:58:16] *** Joins: whatif (~user@123.123.222.32)
[16:58:22] *** Quits: max22- (~maxime@2a01cb08833598001ee79bb16bcae2a5.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[16:59:16] *** Quits: whatif (~user@123.123.222.32) (Client Quit)
[17:02:26] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[17:02:43] *** Quits: rusrushal13 (~rusrushal@2401:4900:447d:f2bb:d612:874b:92ea:4923) (Ping timeout: 256 seconds)
[17:03:28] *** bontaq` is now known as bontaq
[17:14:03] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[17:15:35] *** Joins: ober (~ober@mail3.belmont.k12.ma.us)
[17:17:02] <Axman6> Given an Integer, how I figure out how many bits it contains? or the index of the highest bit set? I feel like I know this...
[17:17:02] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 260 seconds)
[17:17:03] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[17:17:11] <Axman6> it's the integer log base 2
[17:17:26] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[17:17:36] <dminuoso> how many "bits"?
[17:17:54] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[17:18:06] <Axman6> yes, how many bits does the number take to represent
[17:18:28] <dminuoso> Do you mean in terms of allocated bytes?
[17:18:34] <Axman6> like, 64 would be 6
[17:18:49] <Axman6> I guess I want the index of the highest bit set
[17:18:54] <dminuoso> bitSizeMaybe?
[17:19:04] <Axman6> doesn't work for Integers
[17:19:12] <dminuoso> Why not?
[17:19:17] <dminuoso> % import Data.Bits
[17:19:17] <yahb> dminuoso: 
[17:19:19] <dminuoso> % :t bitSizeMaybe
[17:19:19] <yahb> dminuoso: Bits a => a -> Maybe Int
[17:19:24] <dminuoso> % bitSizeMaybe (1 :: Integer)
[17:19:24] <yahb> dminuoso: Nothing
[17:19:28] <Axman6> =)
[17:19:31] <dminuoso> Mmm
[17:19:46] <dminuoso> Returns Nothing for types that do not have a fixed bitsize, like Integer.
[17:20:33] <merijn> bitSize is the highest possible bit
[17:20:41] <merijn> I think Axman wants the "highest non-zero" bit?
[17:20:48] *** s4msung is now known as s5smong
[17:20:52] <Axman6> yes
[17:21:01] <Axman6> bitSize for Integer throws *** Exception: Data.Bits.bitSize(Integer)
[17:21:23] <dminuoso> So some integerLog2
[17:21:48] <Axman6> @goofle log2
[17:21:50] <lambdabot> No Result Found.
[17:21:56] <dminuoso> https://hackage.haskell.org/package/base-4.16.0.0/docs/GHC-Integer-Logarithms.html#v:integerLog2-35-
[17:22:07] <dminuoso> There, pretty wrap that with I# back into an Int
[17:22:11] <Axman6> ah, that'll help
[17:22:13] <merijn> Axman6: bitSize operates on a *type*, i.e. the bitsize of the type, not of the value
[17:23:01] <dminuoso> Axman6: Remember to correctly rule out negative Integer
[17:23:08] <dminuoso> Or even 0.
[17:23:32] <Axman6> yeah these integers are all positive
[17:25:19] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[17:25:26] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[17:25:45] <ski> % map (\n -> if n == 0 then 0 else GHC.Int.I# (GHC.Integer.Logarithms.integerLog2# n) + 1) [0 ..]
[17:25:51] <yahb> ski: [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
[17:25:56] *** Joins: mvr_ (uid36976@id-36976.tinside.irccloud.com)
[17:32:59] *** Joins: bjourne (~bjourne@2001:6b0:1:1140:42bf:ff4:f8fa:50e5)
[17:34:28] *** Quits: oats (~thomas@user/oats) (Quit: until later, my friends)
[17:34:55] *** Joins: oats (~thomas@user/oats)
[17:35:09] <jumper149> Do the `MonadFix` instances for `Maybe` and `Either e` really make sense? They seem very partial to me.
[17:35:22] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Remote host closed the connection)
[17:35:38] <ski> > mfix (\_ -> Nothing)
[17:35:39] <lambdabot>  Nothing
[17:35:47] <ski> > mfix (\xs -> Just (1:xs))
[17:35:49] <lambdabot>  Just [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,...
[17:36:05] <ski> > mfix (\_ -> [])
[17:36:06] <lambdabot>  []
[17:36:25] <ski> > map (take 4) (mfix (\xs -> [1:xs,2:xs]))
[17:36:26] <lambdabot>  [[1,1,1,1],[2,2,2,2]]
[17:36:45] <ski> jumper149 : they do. they can't really be more total
[17:36:45] *** Joins: x_kuru (~xkuru@user/xkuru)
[17:37:18] <bjourne> ghc refuses to start due to missing package db, how do i rebuild it?
[17:37:42] <ski> (`Either e' basically behaves the same as `Maybe' above, so i didn't show it)
[17:39:01] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 268 seconds)
[17:42:13] *** Joins: vicfred (~vicfred@user/vicfred)
[17:44:52] <jumper149> ski: That last example breaks my brain x)
[17:44:54] *** Joins: slack1256 (~slack1256@181.42.40.211)
[17:45:16] <ski> jumper149 : it just makes a single nondeterministic (binary) choice
[17:45:58] <ski> in the first choice, you effectively have `fix (\xs -> 1:xs)'; in the second, `fix (\xs -> 2:xs)'
[17:45:58] <jumper149> > take 5 $ mfix $ \ x -> [x]
[17:46:00] <lambdabot>  [*Exception: <<loop>>
[17:46:09] <jumper149> What is wrong here?
[17:46:28] <ski> that's equal to `take 5 [fix (\x -> x)]'
[17:46:40] <jumper149> ah :(
[17:47:06] <jumper149> so that is equivalent to bottom I guess
[17:47:12] <ski> no
[17:47:30] <ski> > seq (mfix (\ x -> [x])) ()
[17:47:32] <lambdabot>  ()
[17:47:41] <ski> > case mfix (\ x -> [x]) of [_] -> ()
[17:47:42] <lambdabot>  ()
[17:47:49] <ski> > case mfix (\ x -> [x]) of [!_] -> ()
[17:47:51] <lambdabot>  *Exception: <<loop>>
[17:49:14] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:49:14] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:49:14] *** Joins: wroathe (~wroathe@user/wroathe)
[17:52:24] <jumper149> > fix id
[17:52:26] <lambdabot>  *Exception: <<loop>>
[17:52:29] <maerwald> why does Identity not have MonadFail?
[17:52:31] <jumper149> That is bottom tough, right?
[17:52:47] <maerwald> sure
[17:52:49] <jumper149> maerwald: How do you want it to fail? `error`?
[17:52:53] <maerwald> yeah
[17:53:29] <maerwald> I think you can expect non-strict errors from a non-strict monad
[17:53:44] <jumper149> Well then you can say "Why doesnt every monad have `MonadFail`", right?
[17:53:58] <maerwald> not sure about that
[17:55:14] <jumper149> Hmm, why don't you just use `error` directly?
[17:55:25] <bjourne> im very annoyed that stack is using ~/.stack rather than ~/.config/stack and ~/.cache/stack like any well-behaved application should
[17:55:51] <jumper149> like `do { let x = error "fail here" ; pure x }
[17:56:07] <jumper149> Then you can unwrap `Identity`, without forcing x
[17:56:42] <ski> isn't `Identity' strict ?
[17:56:58] <jumper149> ski: Ok maybe it is, idk! :o
[17:57:02] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[17:57:13] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[17:57:16] <ski> `newtype' data constructors are a little bit weird, in that way
[17:57:33] <ski> semantically, they're strict, but operationally, they don't force (since they're no-ops)
[17:57:43] <jumper149> Ah because of newtype, ... maybe
[17:58:18] <ski> (and ditto for matching on them not forcing)
[17:58:27] <ski> > case undefined of Identity _ -> ()
[17:58:28] <lambdabot>  ()
[17:58:55] <jumper149> that is horrible x)
[17:59:29] <ski> what else to expect ?
[17:59:30] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[17:59:37] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[18:00:15] <tomsmeding> could you formulate it as: for a newtype A = A T, the bottoms "_|_" and "A _|_" are identified, and both behave as "A _|_". This contrary to what would be more intuitive (at least for me), which is that they would both behave as "_|_"
[18:00:46] <merijn> bjourne: Considering it's on life-support maintenance, I doubt that will ever change
[18:00:50] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[18:00:53] <ski> well, sure, they're identified
[18:01:06] <ski> (not sure you really have to add that "both behave as .." part)
[18:01:12] *** Joins: quintasan (~quassel@quintasan.pl)
[18:01:14] <jumper149> ski: It does make sense, but its not intuitive :p
[18:01:29] <ski> it's a gotcha / caveat emptor
[18:01:37] <geekosaur> I somewhat distrust "intuitive". Intuitive to whom?
[18:01:49] <ski> to the one who's not used to it
[18:02:06] <tomsmeding> geekosaur: to me :p
[18:03:33] <tomsmeding> ski: point is, I think that if any occurrence of a bottom of type A would be automatically, immediately converted to a bottom wrapped in an "A" constructur (imagining a VM where newtypes aren't represented as no-ops), you'd get the same behaviour as Haskell currently does
[18:03:46] <ski> (that is, i'm not sure what "both behave as \"A _|_\"" vs. "both behave as \"_|_\"" would even mean)
[18:03:59] <jumper149> > data A a = A a
[18:04:00] <lambdabot>  <hint>:1:1: error: parse error on input ‘data’
[18:04:10] <jumper149> > case undefined of A _ -> ()
[18:04:11] <lambdabot>  error: Not in scope: data constructor ‘A’
[18:04:15] <tomsmeding> whereas converting any bottom in an A constructor automatically to a bottom of type A would have different behaviour: indeed, then 'case undefined of A _ -> ()' should crash
[18:04:18] <ski> @let data A a = MkA a deriving Show
[18:04:19] <lambdabot>  Defined.
[18:04:39] <jumper149> > case undefined of A _ -> ()
[18:04:41] <lambdabot>  error: Not in scope: data constructor ‘A’
[18:04:46] <jumper149> > case undefined of MkA _ -> ()
[18:04:47] <lambdabot>  *Exception: Prelude.undefined
[18:04:50] <tomsmeding> ski: my intuition works for 'data', and I'm trying to formulate a modification to my 'data' intuition to arrive at 'newtype' semantics
[18:04:55] <jumper149> sry for spam :D 
[18:05:26] <bjourne> marijan: stack is on life-support?! just as i was getting comfortable with cabal
[18:05:41] <ski> tomsmeding : seems reasonable, i suppose
[18:06:07] <ski> s/marijan/merijn/
[18:06:07] <geekosaur> bjourne, it's gone to "community maintained", but thecommunity doesn't seem to be doing much if any maintenance
[18:06:33] <jumper149> geekosaur: You could say Haskellers are 'lazy' :D
[18:06:40] <ski> (interesting nickname mutation, btw)
[18:06:54] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[18:07:11] * tomsmeding suspects mistype of merij to marij, then auto-complete
[18:07:18] <bjourne> geekosaur: are we stuck with cabal or is there a new thing coming?
[18:07:26] <boxscape_> what's wrong with cabal?
[18:07:29] <merijn> bjourne: Define "stuck"?
[18:07:32] <ski> oh .. didn't notice there was someone else, with that nick
[18:07:42] <tomsmeding> lol bjourne got the dogs out
[18:07:43] <maerwald> boxscape_: --help for starters
[18:07:44] <merijn> I always liked cabal better than stack anyway, so *shrug*
[18:07:51] * tomsmeding likes cabal
[18:07:55] <maerwald> the cli interface of cabal is a mess
[18:07:55] <boxscape_> I admit I've never tried running cabal --help
[18:08:04] <geekosaur> I think you'll find much of this channel prefers cabal anyway
[18:08:22] <maerwald> cabal process handling is confusing (and sometimes buggy)
[18:08:22] <jumper149> Never used stack. Nix is cool though. Cabal is fine.
[18:08:28] <geekosaur> which is not to say cabal doesn't have its problems, but it's still under active development
[18:08:36] <maerwald> but those all seem fixable things, not so much design decisions
[18:08:40] <merijn> maerwald: Everyone's processing handling is confusing and frequently buggy :p
[18:08:47] <merijn> s/processing/process
[18:08:55] <geekosaur> stack's process hand;ling used to be fairly buggy too
[18:09:02] <maerwald> merijn: well, `stack exec` works better than `cabal exec`
[18:09:09] <maerwald> (hint: cabal doesn't actually exec)
[18:09:26] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[18:09:36] <merijn> tbh, I never used cabal exec, so dunno
[18:09:43] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[18:09:53] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[18:09:58] <geekosaur> mixing signals and subprocesses is bad enough, trying todo so under a windows/unix compatibility layer ius much much worse
[18:10:09] <maerwald> there was a "rewrite" of cabal, but with a different philosophy... I forgot the name
[18:10:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[18:10:19] <maerwald> it couldn't build some projects
[18:10:25] <maerwald> I think it didn't support custom Setup.hs
[18:10:33] <maerwald> (which is not so sad)
[18:10:47] <dminuoso> 15:39:09    maerwald | (hint: cabal doesn't actually exec)
[18:10:51] <dminuoso> Does it run through a shell?
[18:11:06] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[18:11:06] <maerwald> it just spawns a subprocess 
[18:11:16] <geekosaur> that's more portably
[18:11:23] <geekosaur> windows doesn't do exec
[18:11:26] <dminuoso> Mmm, so whether thats wrong or not is debatable
[18:11:30] <maerwald> geekosaur: lol
[18:11:38] <dminuoso> I dont consider it surprising, I never thougth that `exec` might have implied the syscall
[18:11:38] <maerwald> geekosaur: stack obviously doesn't exec on windows
[18:11:46] <maerwald> that's not a portability problem
[18:12:09] <maerwald> that's proper platform-specific code
[18:12:28] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[18:12:31] <bjourne> marijan: i thought everyone hated cabal, i might have been mistaken
[18:12:36] <maerwald> portability doesn't mean to do the wrong thing on all platforms to be consistent
[18:12:49] * ski pities marijan
[18:13:37] <boxscape_> bjourne cabal has changed a few things since stack was developed, which makes stack much less necessary
[18:13:56] <maerwald> yeah and it might support stackage directly at some point
[18:14:43] <jumper149> At that point I hope they rename it to "cabbage" 
[18:15:00] <bjourne> +1
[18:15:09] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[18:15:14] <dminuoso> Im quite satisfied with cabal
[18:15:34] <merijn> boxscape_: Correction: Those changes in cabal started before stack development :p
[18:15:40] <boxscape_> ah, fair enough
[18:15:46] <dminuoso> While there's certainly some rough edges here and there, like making it hard to just start a repl with some libraries in scope, overall its fine
[18:16:06] <ski> bjourne : note there's different things referred to as "cabal", by people. <https://gist.github.com/merijn/8152d561fb8b011f9313c48d876ceb07>
[18:16:27] <boxscape_> dminuoso not that hard, "cabal repl --build-depends=distributive,lens"
[18:16:46] <dminuoso> Oh
[18:16:54] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[18:17:27] <maerwald> or `cabal install --lib  --package-env=.` and then just ghci
[18:17:31] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:17:33] <merijn> bjourne: tbh, I don't think stack got more than 50-60% mindshare even at it's most popular
[18:17:40] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[18:17:53] <merijn> bjourne: I will say that the 50-60% it did attract were probably...the most aggressively vocal people
[18:18:01] <maerwald> merijn: in industry, I'd say, it's more popular... although that may be shrinking as well
[18:18:17] <merijn> to the point that their opinion seems to drown out everything else on social media
[18:18:18] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[18:19:13] <merijn> bjourne: Even "cabal sandbox" was already pretty nice, but kinda annoying and a hassle to work with. But v2-build basically eliminates all of the nasty corners/edges from the sandbox thing
[18:19:58] <maerwald> merijn: I actually prefer sandboxes over nix-style stores
[18:20:32] <maerwald> easier to clean up without wreaking havoc
[18:20:36] <maerwald> debugging easier
[18:21:05] <bjourne> so the reason i asked is because the profs at my uni thinks (and teaches) that stack is *the* cabal replacement
[18:21:08] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:21:21] <maerwald> bjourne: well, tell them to look at the official download page maybe
[18:21:31] <merijn> bjourne: https://www.snoyman.com/blog/babies-oss-maintenance/
[18:21:40] <merijn> bjourne: Maybe point him in that direction
[18:21:41] <maerwald> https://www.haskell.org/downloads/
[18:22:06] <maerwald> Haskell toolchain is defined as: GHC, cabal-install, stack, HLS
[18:22:53] <maerwald> merijn: well, he was vocal about needing maintainers, but didn't attend to most of my PRs... so I'm not sure what I conclude from that
[18:23:16] <merijn> maerwald: The conclusion is that it's mostly unmaintained :p
[18:23:47] *** Quits: dsrt^ (~dsrt@128-092-182-020.biz.spectrum.com) (Remote host closed the connection)
[18:24:11] <dminuoso> bjourne: For one, most people live in a really small bubble.
[18:24:47] <dminuoso> If you happen to work at FP complete, you might be led to believe that nobody uses cabal-install.
[18:25:03] <bjourne> maerwald: i could, but they don't have time to update their lecture material anyway
[18:25:08] <dminuoso> It's hard to gain a good indicator of what the wide community uses outside haskell surveys.
[18:25:15] <maerwald> bjourne: ah... there's the real reason :p
[18:25:23] <dminuoso> And even they give a biases result since its tough to get an accurate representative picture
[18:26:05] <maerwald> https://taylor.fausak.me/2021/11/16/haskell-survey-results/#s2q1
[18:27:13] <jumper149> In 2017 stack was twice as popular as cabal. Nowadays it's roughly equal according to the Haskell surcey
[18:27:35] <merijn> jumper149: Some of the earliest Haskell surveys were *incredibly* biased in population that responded
[18:27:41] <dminuoso> maerwald: Online surveys are still incredibly poor.
[18:28:15] <dminuoso> They suffer from (non)response bias and coverage bias
[18:28:21] <merijn> jumper149: Since they were largely advertised/popularised on FPComplete related sides, which (for obvious reason) had audiences skewing to stack hard
[18:28:37] <merijn> jumper149: The more recent surveys are more broadly circulated and probably more representative
[18:28:40] <maerwald> sure... my guess is that the survey is mostly targeting opensource community
[18:28:55] <maerwald> don't think managers tell their 5 haskell employees to complete the survey
[18:29:04] <bjourne> maerwald: indeed, it's no one's fault, but software churn wastes a lot of time. no one has time to keep up with it
[18:29:05] <dminuoso> No, that's not what Im suggesting.
[18:29:35] <maerwald> my guess is if you'd do that survey in industry, stack would be at 70%
[18:30:47] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:31:16] *** Joins: comerijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[18:31:32] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[18:31:42] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Read error: Connection reset by peer)
[18:33:22] *** Joins: messier102 (~messier10@user/messier102)
[18:33:27] *** Joins: fef (~thedawn@user/thedawn)
[18:33:34] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[18:33:45] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[18:34:43] *** Joins: messier102_ (~messier10@user/messier102)
[18:35:03] *** Joins: califax (~califax@user/califx)
[18:36:16] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Ping timeout: 250 seconds)
[18:36:33] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 256 seconds)
[18:38:32] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[18:40:46] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:41:33] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[18:42:27] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[18:43:13] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[18:43:38] *** Joins: haskell_ (~haskell@65-102-32-32.ptld.qwest.net)
[18:44:02] *** Quits: haskell_ (~haskell@65-102-32-32.ptld.qwest.net) (Remote host closed the connection)
[18:45:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[18:47:13] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[18:47:14] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[18:47:18] *** Quits: nek0 (~nek0@nek0.eu) (Quit: The Lounge - https://thelounge.chat)
[18:47:54] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[18:49:26] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[18:49:27] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[18:50:00] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[18:52:23] *** Quits: ober (~ober@mail3.belmont.k12.ma.us) (Remote host closed the connection)
[18:52:40] *** Joins: ober (~ober@mail3.belmont.k12.ma.us)
[18:52:49] *** Quits: mbuf (~Shakthi@122.178.191.223) (Quit: Leaving)
[18:54:27] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[18:54:34] *** comerijn is now known as merijn
[18:54:38] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:55:03] *** Quits: ober (~ober@mail3.belmont.k12.ma.us) (Read error: Connection reset by peer)
[18:55:22] *** Joins: ober (~ober@mail3.belmont.k12.ma.us)
[18:56:48] *** Joins: haskell_ (~haskell@65-102-32-32.ptld.qwest.net)
[18:56:48] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[18:57:20] *** Quits: haskell_ (~haskell@65-102-32-32.ptld.qwest.net) (Remote host closed the connection)
[18:57:50] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[18:58:11] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:58:25] *** Joins: ober_ (~ober@mail3.belmont.k12.ma.us)
[18:58:26] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[18:58:34] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[18:59:20] *** Quits: ober (~ober@mail3.belmont.k12.ma.us) (Read error: Connection reset by peer)
[19:00:48] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[19:01:42] *** Joins: rembo10 (~rembo10@remulis.com)
[19:07:20] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:18a9:c2e9:8c77:2fcf)
[19:07:41] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[19:07:48] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[19:09:08] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[19:09:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:10:15] *** Joins: ober (~ober@mail3.belmont.k12.ma.us)
[19:11:48] *** Quits: ober_ (~ober@mail3.belmont.k12.ma.us) (Read error: Connection reset by peer)
[19:13:33] *** Quits: thevishy (~Nishant@2405:201:f005:c007:e0f1:5635:e895:47c6) (Quit: Leaving)
[19:13:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[19:13:57] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:18a9:c2e9:8c77:2fcf) (Ping timeout: 240 seconds)
[19:15:05] *** Quits: akegalj (~akegalj@141-136-168-212.dsl.iskon.hr) (Ping timeout: 256 seconds)
[19:15:10] *** Quits: ober (~ober@mail3.belmont.k12.ma.us) (Quit: Leaving)
[19:16:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:17:33] *** Joins: safinaskar (~quassel@109.252.91.116)
[19:17:43] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[19:18:01] *** Parts: safinaskar (~quassel@109.252.91.116) ()
[19:19:38] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:1001:bfbe:d16:fcbe) (Quit: WeeChat 2.8)
[19:20:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[19:20:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:20:50] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[19:20:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:21:02] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[19:25:39] *** Quits: messier102_ (~messier10@user/messier102) (Ping timeout: 250 seconds)
[19:25:39] *** Quits: messier102 (~messier10@user/messier102) (Ping timeout: 250 seconds)
[19:27:51] *** Joins: Guest72 (~Guest72@27.56.151.17)
[19:28:10] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[19:29:05] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[19:29:16] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:a48f:8f89:30fa:5637)
[19:30:27] *** Joins: olle (~olle@p5784fa92.dip0.t-ipconnect.de)
[19:30:40] <olle> You guys have a way to put a side-effects in a queue to be executed at a later point?
[19:30:44] <olle> -s*
[19:31:00] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[19:31:31] <ski> huh ?
[19:31:51] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[19:31:59] <ski> you can put actions in a queue, if you want, and perhaps later execute them, sure
[19:32:09] <olle> ski: Define "action"
[19:32:28] <ski> any value of type `f a', where `f' is an instance of `Applicative'
[19:32:52] <olle> ski: Alright :)
[19:33:17] <ski> (btw, sometimes people would express that as `Applicative f => f a' .. but that's wrong)
[19:33:19] <olle> Sooo, say I have print "foo" and wrap it inside a lambda instead. Can I remove the IO monad from that function then?
[19:33:31] <merijn> olle: You can simply have a threat with a channel and then execute those one at a time
[19:33:33] <olle> Or maybe the queue must be mutable
[19:33:45] <ski> what do you mean by "wrap it inside a lambda instead" ?
[19:33:47] <merijn> olle: You can just put IO actions into things directly
[19:34:00] <merijn> :t map putStrlN ["foo", "bar"]
[19:34:01] <lambdabot> error:
[19:34:01] <lambdabot>     • Variable not in scope: putStrlN :: [Char] -> b
[19:34:01] <lambdabot>     • Perhaps you meant one of these:
[19:34:07] <merijn> :t map putStrLn ["foo", "bar"]
[19:34:08] <lambdabot> [IO ()]
[19:34:31] <merijn> olle: IO actions are just values like anything else and you can put them in data structures, pass them around, whatever
[19:34:47] <ski> could be mutable queue, could be immutable
[19:34:51] <ski> whichever you want
[19:34:56] <olle> I'm looking for ways to extend the "functional core" in different ways, that's my motivation
[19:35:05] <olle> Without tagless final or free monad
[19:35:36] <olle> ski: Well, if the queue is immutable, I'd have to include it in the function signature somehow, or pass it around. Well, maybe that's OK...
[19:36:22] <ski> seeing as we have almost no idea of what you're wanting to do, we can't really give much specific advice on such things
[19:36:25] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[19:36:43] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[19:37:17] <olle> Right
[19:37:31] <ski> olle : i'm still having trouble understanding "Sooo, say I have print \"foo\" and wrap it inside a lambda instead. Can I remove the IO monad from that function then?"
[19:37:50] <olle> ski: The difference between do print "bla" vs \x -> do print "bla"
[19:38:06] <ski> one is a function, the other isn't
[19:38:16] <ski> or, if you prefer, one is parameterized, the other isn't
[19:39:02] <ski> you can't go from `X -> IO Y' to `X -> Y', anyway, if that's what you're asking
[19:39:27] <olle> ski: Why not?
[19:39:57] <ski> because all functions of type `IO Y -> Y' are constant
[19:40:41] <olle> Not sure what that means, sorry
[19:40:42] <ski> you can't compute an `Y' from a recipe for how to interact with the OS to obtain an `Y'
[19:40:56] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[19:41:08] <ski> you need to actually, you know, perform the I/O interaction, to arrive at the `Y'
[19:41:09] <olle> You don't have void or nil or unit in Haskell?
[19:41:18] <ski> sure, we have `()'
[19:41:26] <ski> @type putStrLn
[19:41:27] <lambdabot> String -> IO ()
[19:41:56] <olle> Hm hm hm
[19:42:06] <ski> the only way to perform the I/O action is to define `main' to be that action (or to make it a part of `main') .. or, in the interactor, to enter the action there for it to execute
[19:42:33] <ski> execution can't be triggered from evaluation (but the opposite happens all the time)
[19:42:47] <olle> Sure, main will have IO, but a subfunction might go from X -> IO Y to X -> Y if that specific IO interaction is put in that queue instead, was my idea.
[19:43:35] <ski> (more specifically, I/O execution. execution of many other types of actions can be triggered from evaluation. e.g. `Maybe',`[]',`State s',`Either e',..)
[19:43:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:44:04] <ski> olle : well, you can for sure do `X -> Queue (IO Y)' or somesuch
[19:44:38] <polyphem> X -> STM Y
[19:44:44] <olle> STM?
[19:44:50] <olle> Statement?
[19:44:55] <ski> (or, *if* `Y' is recursive, incorporates a `Queue (IO Y)' in one case, then, sure, you can do `X -> Y')
[19:45:00] <polyphem> SoftwareTransactionalMemory
[19:45:04] <ski> Software-Transactional Memory
[19:46:08] <olle> Checking...
[19:46:19] <ski> `STM' is if you'd like to use concurrent mutable data structures, with multiple threads, with transaction that can rollback or commit
[19:46:30] <olle> Ah
[19:46:47] <ski> (`IO' can also do that, except for the transaction part)
[19:47:05] <polyphem> they give you Transactional Queues for yoir "internal IO Actions"
[19:47:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:47:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:47:07] *** Joins: wroathe (~wroathe@user/wroathe)
[19:47:16] <polyphem> *your*
[19:47:43] *** Joins: yuvi (~uv125@192.54.96.185)
[19:47:43] <ski> heh, "internal IO Actions" does sound a bit confusing :)
[19:47:48] <ski> re yuvi
[19:48:24] <yuvi> what up haskell irc
[19:48:27] <ski> any progress with `startsWith' ?
[19:48:34] *** Joins: shapr` (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[19:48:35] <yuvi> yes!
[19:48:46] <yuvi> i can share my solution
[19:48:51] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[19:48:52] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[19:49:23] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[19:49:24] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[19:50:03] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705)
[19:51:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[19:51:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:52:29] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[19:52:29] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[19:52:51] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[19:53:02] <yuvi> hmm how do i share a multiline function here
[19:53:07] <ski> @where paste
[19:53:07] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[19:53:46] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[19:54:23] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[19:54:53] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 250 seconds)
[19:55:01] <polyphem> ski: s/internal/unexecuted|prepared/ IO Actions
[19:55:28] *** Quits: razetime (~quassel@49.207.209.26) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:55:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[19:55:59] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[19:56:25] <yuvi> https://paste.tomsmeding.com/IgquexPc
[19:58:12] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:59:01] *** Joins: akegalj (~akegalj@141-136-168-212.dsl.iskon.hr)
[20:02:15] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[20:02:52] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[20:03:22] <c_wraith> yuvi: you have a bunch of unnecessary parens in there. (const True) is the only thing that actually needs them
[20:04:16] <boxscape_> and (x : xs)
[20:05:01] <Inst> did yuvi solve the foldr isPrefix problem yet?
[20:05:12] <yuvi> Inst: yes!
[20:05:18] <Inst> how did you do it?
[20:05:30] <yuvi> i linked my solution above, can u see it?
[20:05:39] *** Quits: mvr_ (uid36976@id-36976.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[20:06:02] <yuvi> i fold over the prefix, and use the const Tru function to "Accumulate" bools
[20:07:27] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[20:07:35] <Inst> you're using recursion
[20:07:49] <c_wraith> one convention thing: the name "go" is usually used for a recursive helper, but "go" isn't recursive
[20:07:52] <Inst>         go c acc (x : xs)
[20:07:52] <Inst>           | c == x    = acc xs
[20:08:16] <c_wraith> Inst: that's not recursive. It's more like calling a continuation
[20:08:18] <yuvi> what's the recursion
[20:08:23] <Inst> i see
[20:09:04] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[20:10:01] <Inst> anyways my solution wouldn't have worked
[20:10:09] <Inst> type system would have stopped me
[20:10:27] <boxscape_> would the solution have been correct if you had inserted unsafeCoerce?
[20:10:39] *** Joins: k8yun_ (~k8yun@24.244.29.114)
[20:10:53] <yuvi> i do appreciate the help
[20:12:35] * monochrom suggests "goter" meaning "the go-to helper" meaning "this is the generic name you go to for helper functions when you can't think of a specific name"
[20:13:33] <yuvi> gotcha
[20:13:47] <yuvi> c u guys later
[20:13:49] *** Quits: yuvi (~uv125@192.54.96.185) (Quit: WeeChat 2.8)
[20:14:15] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[20:16:36] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:17:43] *** Quits: dajoer (~david@user/gvx) (Quit: leaving)
[20:19:12] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:20:55] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:21:23] *** Quits: alp (~alp@user/alp) (Ping timeout: 256 seconds)
[20:22:10] *** Quits: k8yun_ (~k8yun@24.244.29.114) (Changing host)
[20:22:10] *** Joins: k8yun_ (~k8yun@user/k8yun)
[20:22:49] *** Quits: jumper149 (~jumper149@base.felixspringer.xyz) (Quit: WeeChat 3.3)
[20:23:56] *** Quits: Guest72 (~Guest72@27.56.151.17) (Quit: Client closed)
[20:26:24] *** Joins: Akiva (~Akiva@user/Akiva)
[20:26:37] *** Joins: slack5035 (~slack1256@191.126.99.83)
[20:28:39] *** Quits: slack1256 (~slack1256@181.42.40.211) (Ping timeout: 256 seconds)
[20:30:00] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[20:30:23] *** shapr` is now known as shapr
[20:33:49] *** Quits: akegalj (~akegalj@141-136-168-212.dsl.iskon.hr) (Ping timeout: 240 seconds)
[20:35:00] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[20:35:12] *** Joins: emf (~emf@2601:602:9400:8f0:435:b386:5ad4:6eb2)
[20:37:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705) (Remote host closed the connection)
[20:38:25] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:947b:22d6:c94:9589) (Remote host closed the connection)
[20:42:02] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:42:02] *** Quits: Merfont (~Kaiepi@156.34.47.253) (Quit: Leaving)
[20:42:18] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[20:44:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:45:57] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[20:46:43] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[20:48:12] *** Joins: unyu (~pyon@user/pyon)
[20:49:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:49:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:49:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:49:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:49:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:50:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:50:06] *** Joins: akegalj (~akegalj@141-136-168-212.dsl.iskon.hr)
[20:50:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:50:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:50:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:50:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:50:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:51:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:51:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:51:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:51:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:51:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:51:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:52:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:52:21] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:52:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:52:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:52:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:53:05] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:53:12] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705)
[20:53:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:53:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:53:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:53:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:54:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:54:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:54:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:54:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:54:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:54:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:55:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:55:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:55:23] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:55:25] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:55:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:55:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:55:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:56:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:56:16] *** Joins: mncheckm (~mncheck@193.224.205.254)
[20:56:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:56:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:56:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:56:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:57:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:57:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:57:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:57:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:57:46] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:57:51] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[20:57:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:58:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:58:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:58:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:58:37] *** Quits: mncheck (~mncheck@193.224.205.254) (Ping timeout: 240 seconds)
[20:58:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[20:58:40] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[20:58:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:00:59] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[21:01:13] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[21:01:21] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[21:01:51] *** Joins: wavemode (~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2)
[21:04:46] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705) (Remote host closed the connection)
[21:07:03] *** Joins: marinelli (~marinelli@gateway/tor-sasl/marinelli)
[21:07:03] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[21:07:22] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[21:07:40] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[21:07:52] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[21:07:58] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[21:09:21] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[21:12:58] *** Joins: vysn (~vysn@user/vysn)
[21:15:01] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7c1f:c247:2b7b:d046) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:17:08] *** Quits: akegalj (~akegalj@141-136-168-212.dsl.iskon.hr) (Quit: leaving)
[21:20:40] *** Quits: fendor (~fendor@91.141.68.59.wireless.dyn.drei.com) (Remote host closed the connection)
[21:21:59] *** Joins: MatthiasG2 (~matthias@i6DFA026C.versanet.de)
[21:22:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:24:21] *** Joins: alp (~alp@user/alp)
[21:26:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:27:32] *** Quits: jollygood2 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[21:29:03] *** Quits: olle (~olle@p5784fa92.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[21:30:21] *** Joins: emf_ (~emf@2620:10d:c090:400::5:57ea)
[21:33:57] *** Quits: emf (~emf@2601:602:9400:8f0:435:b386:5ad4:6eb2) (Ping timeout: 240 seconds)
[21:34:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:36:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:37:58] <boxscape_> Would it be possible to extend Haskell's type system so you could write `fix :: (a -> a) -> a; fix = \f -> (\x -> f (unsafeCoerce x x)) (\x -> f (unsafeCoerce x x))` without the unsafeCoerce?
[21:38:15] <boxscape_> In the spirit of broadening the overlap between correct programs and programs that typecheck
[21:39:19] <boxscape_> (Alternatively, is there some weird way to do it with the existing type system?)
[21:40:33] <ski> boxscape_ : you can use `newtype Santa a = MkSanta (Santa a -> a)'
[21:40:44] <boxscape_> ah, right, newtypes, that makes sense
[21:40:53] <boxscape_> is there a reason it's called Santa?
[21:41:31] <monochrom> A system that allows infinite types will accept it.  Essentially you need a type S such that S = S->a, which is Santa above.
[21:41:39] <boxscape_> okay
[21:41:54] <monochrom> TaPL has a chapter and a toy language that allows infinite types (it says "equirecursive types").
[21:42:08] <boxscape_> Ah, I've been meaning to continue reading that
[21:42:14] <monochrom> whereas using a newtype wrapper is "isorecursive types" in TaPL.
[21:42:22] <ski> boxscape_ : "Löb’s Theorem: Santa Claus and Provability" by XOR's Hammer in 2008-08-13 at <https://xorshammer.com/2008/08/13/loebs-theorem/>
[21:42:30] <boxscape_> thanks
[21:43:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:43:43] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[21:43:53] <boxscape_> I suppose fix's type does look similar to Löb’s theorem
[21:44:28] <ski> boxscape_ : you can also do it, without extra fluff, in `ocaml -rectypes' (which enables unrestricted equi-recursive types)
[21:44:38] <boxscape_> interesting
[21:45:11] <ski> (without `-rectypes', the cycles have to go through at least one object type. this is used in the OO system, to express "binary methods" and "clone methods")
[21:45:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:45:35] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:46:31] <boxscape_> part of what I was wondering is if you can do this without making your language inconsistent or something - looks like the main problem is harder type checking/inference
[21:46:46] <ski> "inconsistent", in which sense ?
[21:46:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:47:05] <ski> equi-recursive types isn't really that much harder to check/inder
[21:47:34] <ski> the issue is the number of false positives. instead of getting a type error for when you write nonsense, you'll often instead get crazy cyclic types inferred
[21:47:52] <boxscape_> hm, okay. I was taking that from https://en.wikipedia.org/wiki/Recursive_data_type#Equirecursive_types which says "Algorithmic problems such as type checking and type inference are more difficult for equirecursive types as well"
[21:47:52] <boxscape_> But yeah weird type errors make sense
[21:48:01] <monochrom> Yeah consider the typo in "if b then x else [x,x]"
[21:48:12] <boxscape_> I was thinking "inconsistent" in the sense of "let's say we add this to agda, could you prove false"
[21:48:39] <boxscape_> or weird types rather
[21:48:46] <dolio> fix lets you prove false.
[21:48:46] <ski> `fix' allows you to prove falsum, sure
[21:48:56] <boxscape_> ah, hm, right
[21:49:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:50:05] <monochrom> S=S->a makes S a non-well-founded recursive type. Agda allows well-founded recursive types only, equi or iso.
[21:50:18] <boxscape_>  I see
[21:50:43] * ski fixes it to `S = (S -> a) -> a'
[21:52:09] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:c1b4:4e62:c0e4:304a)
[21:52:10] <dolio> Agda doesn't allow that, either.
[21:52:39] <ski> yea, i know ;)
[21:52:50] <monochrom> "fixes" :)
[21:53:25] <ski> heh, that was even not a conscious reference
[21:53:57] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[21:54:19] *** Quits: MajorBiscuit (~MajorBisc@c-001-001-054.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[21:55:21] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[21:57:15] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:58:06] <dolio> You can show some types satisfy that with extra assumptions, though.
[21:58:18] *** Joins: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e)
[21:58:56] <dolio> Well, some without extra assumptions, but they're pretty boring.
[22:00:13] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[22:01:51] *** Quits: emf_ (~emf@2620:10d:c090:400::5:57ea) (Quit: emf_)
[22:02:23] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:02:29] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6197:e762:8e5b:d7b9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:02:34] *** Joins: emf (~emf@2620:10d:c090:400::5:57ea)
[22:03:30] *** Joins: safinaskar (~quassel@109.252.91.116)
[22:03:47] <safinaskar> why "cabal v2-install" doesn't work as before anymore?
[22:04:14] <safinaskar> in past i typed "cabal v2-install --lib some-library-name"
[22:04:16] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:30a6:9d4e:5fe4:7e50)
[22:04:18] <safinaskar> (for example, Earley)
[22:04:39] <safinaskar> and then i imported such lib in .hs file and compiled the file using "ghc File.hs"
[22:04:44] <safinaskar> now this doesn't work
[22:04:46] <safinaskar> why?
[22:04:54] <monochrom> works for me.
[22:05:10] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705)
[22:05:34] <[exa]> safinaskar: what's the error you get there?
[22:05:36] <geekosaur> define "doesn't work"
[22:06:13] <geekosaur> also, using --lib is overriding cabal-install's safeies and you can end up with e.g. incompatible versions of packages in the same environment file,which can cause build conflicts or even failures
[22:06:15] <[exa]> safinaskar: anyway you might need to select the available packages manually, e.g. `ghc -package Earley File.hs`
[22:06:19] <geekosaur> *safeties
[22:06:36] <safinaskar> [exa]: geekosaur: "Could not find module ‘Text.Earley’"
[22:07:00] <monochrom> No I don't think --lib overrides safety.
[22:08:44] <monochrom> Oh haha agda has a --type-in-type flag?
[22:08:55] <dolio> Yeah.
[22:09:03] <safinaskar> [exa]: this doesn't work, too
[22:09:03] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:09:21] <safinaskar> [exa]: now i see "<command line>: cannot satisfy -package Earley"
[22:09:28] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705) (Ping timeout: 250 seconds)
[22:09:52] <safinaskar> ghc 9.2.1
[22:09:59] <dolio> It has flags for not checking positivity, too.
[22:10:15] <safinaskar> cabal 3.6.2.0
[22:10:33] <safinaskar> i can send exact dockerfile i used to build this environment if this helps
[22:12:43] <dolio> Just installing a lib doesn't mark it available for use with raw GHC.
[22:12:55] *** Joins: ehammarstrom (~ehammarst@62-20-203-39-no182.tbcn.telia.com)
[22:13:12] <dolio> Possibly in the past it might have generated a hidden file that did so, but I recall people complaining a lot about that.
[22:13:40] <geekosaur> --lib does in fact create a package-env file still
[22:14:10] <safinaskar> monochrom: moreover, idris 2 has some stupid unsoundness issue, which is always present.  I don't remember exactly this issue. Either there is always type-in-type, either they don't have termination checker. It seems the first
[22:15:06] *** Quits: cosimone (~user@93-47-228-151.ip115.fastwebnet.it) (Remote host closed the connection)
[22:15:10] *** Quits: ehammarstrom (~ehammarst@62-20-203-39-no182.tbcn.telia.com) (Remote host closed the connection)
[22:15:43] <safinaskar> but "-package" supposed to work, right?!
[22:16:14] *** Quits: bjourne (~bjourne@2001:6b0:1:1140:42bf:ff4:f8fa:50e5) (Quit: Konversation terminated!)
[22:17:17] <EvanR> idris historically appeared to have type in type unless you knew how to read between the lines of the repl
[22:17:40] <geekosaur> -package can only work if ghc has access to the package database. neither stack nor cabal gives raw ghc/ghci that access
[22:17:50] <geekosaur> package environment files can be used with cabal to simulate it
[22:17:57] <EvanR> I would have thought integer division by zero causing a hard crash was a more important unsoundness issue
[22:18:00] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:18:19] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[22:22:00] *** Joins: mmhat (~mmh@55d4a370.access.ecotel.net)
[22:24:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:24:41] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[22:25:29] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[22:25:49] *** Joins: Pickchea (~private@user/pickchea)
[22:26:50] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[22:28:28] <safinaskar> i think rust is absolutely always than haskell, even for writting provers. i can say why i think so, if you want
[22:28:38] <kuribas> I think the Type in Type issue is being addressed now...
[22:28:41] <kuribas> in idris.
[22:29:31] <kuribas> safinaskar: you missed an adjective.
[22:30:59] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[22:31:44] <kuribas> 3 `div` 0 =>
[22:31:44] <kuribas> let False = True in prim__div_Integer x y
[22:31:50] <kuribas> interesting :)
[22:32:26] <safinaskar> kuribas: oops
[22:32:36] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[22:32:38] <safinaskar> kuribas: *absolutely always better than haskell :)
[22:32:53] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[22:32:56] <kuribas> "better" is a bad qualifier...
[22:33:22] <boxscape_> safinaskar why are you using haskell?
[22:33:48] <safinaskar> boxscape_: :) good question
[22:34:07] <maerwald> rust is way more verbose... if you have chronic pain from RSI, you better not use it xD
[22:34:08] <kuribas> safinaskar: "safer"?  "faster"?  "easier to read"? "easier concurrency"?  ...
[22:34:38] <dsal> I've still not managed to find something where rust makes my life better.  I do keep meaning to try it again someday.
[22:35:07] <maerwald> dsal: migrate one of your C projects... that makes it very apparent
[22:35:17] <maerwald> I did and it was a bliss
[22:35:35] <dsal> I should do that, yeah.  I surely have something lying around in C that I still care about.  :)
[22:35:41] <Franciman> high five maerwald (but cautiously, so we don't get hurt)
[22:36:39] <monochrom> safinaskar: https://github.com/haskell/cabal/issues/7819
[22:36:46] <kuribas> EvanR: I'd think with fancy dependent types, you could prove the denominator nonzero...
[22:37:04] <maerwald> Franciman: I thought you left for that HVM :p
[22:37:23] <safinaskar> boxscape_: "why are you using haskell?" - currently i'm writting rust library for working with binary format apache avro. i'm missing haskell's GADTs, so now i am writting gadt-style avro implementation in haskell as an experiment. But I already got first problem: i have to use ugly singletons (i talked about my task yesterday here). So, this even further proves that rust is better than haskell. Yes, rust doesn't have GADTs, but in haskell GADTs are 
[22:37:23] <safinaskar> not so useful either, because any suffentiently hard task will depend on singletons
[22:37:23] <kuribas> I am a bit done with haskell, in that it doesn't have much secrets left for me...
[22:37:26] <EvanR> kuribas, you could
[22:37:56] <EvanR> or you could ask the bot to divide by zero without doing that and it crashes xD
[22:38:24] <kuribas> err  :total div => Prelude.Num.div is total
[22:38:24] <EvanR> I guess if you have the phD to program with dependent types, you wouldn't do something so dumb
[22:38:26] <DigitalKiwi> ugh and i thought haskell was supposed to be safe!
[22:38:37] <Franciman> maerwald: i don't code anymore these days
[22:38:39] <EvanR> kuribas, yeah it was listed as total so things could compile
[22:38:44] <maerwald> Franciman: smart choice
[22:38:45] <DigitalKiwi> letting you divide by zero is gross
[22:38:51] <Franciman> so i have more time left for saying bullshit
[22:38:56] <maerwald> xD
[22:38:57] <kuribas> EvanR: I don't think idris is meant as a proof system.
[22:39:01] <Franciman> and laughing at the lack of a formal semantics of haskell in the standard
[22:39:06] <Franciman> standard ML is centuries ahead
[22:39:22] <kuribas> EvanR: I mean, writing programs as proof, rather than the other way.
[22:39:22] *** Quits: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e) (Read error: Connection reset by peer)
[22:39:25] <maerwald> There's also CakeML
[22:39:29] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:39:31] <Franciman> fancy
[22:39:39] <EvanR> kuribas, well, regardless any time someone proves false, it was listed as a bug and presumably needed to be fixed (except for this)
[22:39:43] <boxscape_> safinaskar If I'm understanding your argument correctly it's "rust doesn't have a feature I like, Haskell does have that feature but it's limited, therefore rust is better"?
[22:40:07] <maerwald> yeah, Haskell was never a choice for projects like everest or seL4 linux I think
[22:40:32] <maerwald> but I usually don't code crypto libraries or kernels, so...
[22:41:12] <maerwald> it's like cutting an apple with a samurai sword
[22:41:17] <kuribas> safinaskar: rust doesn't have singletons, does it?
[22:41:34] <safinaskar> boxscape_: yes. and this argument should be combined with other rust arguments, such as "faster", "bigger community" etc
[22:41:54] <safinaskar> kuribas: doesn't. and this is good, because singletons are ugly
[22:42:07] <maerwald> rust has the advantage that it was kickstarted by a large company
[22:42:10] <kuribas> safinaskar: I agree about that.  Not about "I have to use singletons".
[22:42:31] <EvanR> was it really, which company?
[22:42:35] <safinaskar> maerwald: what is RSI?
[22:42:46] <ski> Repetetive Stress Injury
[22:42:59] <monochrom> maerwald: I think sword makers cut toilet paper with swords to show off. :)
[22:43:03] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705)
[22:43:06] <maerwald> EvanR: Mozilla research?
[22:43:11] <kuribas> "any suffentiently hard task will depend on singletons" <= Apparently I never did a hard task in haskell :)
[22:43:23] <maerwald> EvanR: and not in order to waste money, but to use it
[22:43:32] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[22:43:54] <kuribas> safinaskar: it looks like you are falling in the fancy type level haskell trap.
[22:44:15] <safinaskar> kuribas: "safer", "faster", "easier to read" and more productive. rust is simply better suited for any task, even for provers
[22:44:23] <EvanR> :thonk:
[22:44:49] <monochrom> To reduce RSI, please stop using IRC. :)
[22:44:53] *** ChanServ sets mode: +o geekosaur
[22:44:56] <kuribas> safinaskar: I hardly know any rust, I only looked at some parser library, and it looked much less neat than in haskell.
[22:45:33] <kuribas> safinaskar: I also wonder how it could be "safer"?
[22:45:45] <monochrom> kuribas: The hardware is a singleton. I would think every program has to depend on that singleton. :)
[22:45:52] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[22:46:05] <EvanR> we need to put together yet another giant addictive profitable MMORPG. Use haskell or rust??
[22:46:10] <kuribas> monochrom: I think he refers to the "singleton" library, or not?
[22:46:44] <EvanR> the universe is a singleton, unless you use many worlds
[22:47:04] <geekosaur> evenif you use many worlds, unless you're using some popular misconception of it
[22:47:05] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[22:47:34] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[22:47:45] <monochrom> I can actually mean it to be serious. A week ago we had a discussion on how much we need global variables. Well, we still need them for coordinating multiple threads that try to access the same piece of hardware, for example we have only one GPU (usually) and its API exposes a scarce resource...
[22:48:23] <EvanR> well you need a shared variable for locking access
[22:48:53] *** Joins: cynomys (~cynomys@user/cynomys)
[22:49:13] <EvanR> or multiple if the clients form a hierarchy
[22:49:41] <monochrom> w00t we need a plural of singetons!
[22:49:52] <EvanR> a multiton
[22:50:07] <boxscape_> "singletons" is already in plural form
[22:50:14] <DigitalKiwi> ty boxscape_
[22:50:15] <monochrom> "it's singletons all the way down"
[22:51:59] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[22:53:41] *** Quits: wavemode (~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2) (Quit: Client closed)
[22:53:53] *** Joins: wavemode (~wavemode@2601:241:0:fc90:1186:8dd8:ad8a:69e2)
[22:55:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:55:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:57:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:58:26] *** Joins: cosimone (~user@93-47-228-151.ip115.fastwebnet.it)
[22:59:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[23:02:01] *** Quits: raym (~raym@user/raym) (Quit: kernel update, rebooting...)
[23:03:19] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[23:03:54] <safinaskar> (i am writting big rant why rust is better than haskell. i will show it when it is done. want nearly 5 mins)
[23:04:34] <geekosaur> you can send it somewhere other than #haskell
[23:04:55] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[23:05:00] <geekosaur> this is what blogs arefor
[23:07:11] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Remote host closed the connection)
[23:07:43] <Inst> thanks @yuvi
[23:07:45] <Inst> ugh, he's gone
[23:07:52] <EvanR> clearly the only way forward is to design mortal kombat representations of rust and haskell and have a tournament
[23:07:54] <Inst> and yeah, that's extremely pretty
[23:08:07] <Inst> has to be coded in C, though
[23:08:20] <Inst> erm, not C, prolog
[23:09:00] <EvanR> "why are we fighting" "no idea, ask safinaskar khan"
[23:09:59] <Inst> jeez, i'm such an imbecile
[23:10:00] <DigitalKiwi> does geekosaur have a problem with space key
[23:10:04] <Inst> i've never seen code like yuvi's before
[23:10:06] <geekosaur> yes
[23:10:27] <geekosaur> and randomly other keys that get duplicated
[23:10:38] <DigitalKiwi> :(
[23:10:52] <safinaskar> geekosaur: i don't have a blog. and don't want to create one
[23:11:02] <dolio> Well, this isn't your blog.
[23:11:06] <safinaskar> geekosaur: okey, i will send to #rust, too :)
[23:11:09] <geekosaur> so you feel entirely entitled to make noise here
[23:11:18] <safinaskar> i will send the rant using pastebin, don't worry
[23:11:27] <Inst> have you tried trolling the pythonistas instead?
[23:11:29] *** Joins: raym (~raym@user/raym)
[23:12:05] <Inst> and safinaskar: Haskell actually does suck
[23:12:14] *** Joins: econo (uid147250@user/econo)
[23:12:22] <geekosaur> but so does everything else
[23:12:37] <Inst> Haskell just has a very specific use-case, Haskellers like using Haskell for Haskell use-cases, etc
[23:12:44] <dsal> This channel has a weird attraction to people who think they understand things.
[23:12:52] <Inst> sorry
[23:12:53] <Inst> ;_;
[23:13:06] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[23:13:13] <monochrom> dsal: My decades of experience in physics and math channels, too.
[23:13:19] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[23:13:25] <EvanR> haskell is a general purpose programming language
[23:13:30] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[23:13:46] <EvanR> the opposite of "specific use-cases"
[23:13:47] <monochrom> People come in to say how they think they have trumped professional physicists or mathematicians.
[23:13:48] <geekosaur> every generalpurpose programming language has its Turing tarpits
[23:13:51] <dsal> I'm working at a company that uses Haskell as a general programming language for doing general stuff.  There's nothing particularly haskell-specific of just about anything we do.
[23:14:11] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:14:55] <monochrom> Fortunately mostly "my physics/math is better than yours" rather than "my religion is better than physics/math".
[23:15:14] <Inst> haskell is primarily a highly pure functional programming language which is a popular haunt of academics to dump their new language extensions in
[23:15:18] <dsal> I bet those idiots don't even know how to divide by zero.
[23:15:21] <Inst> as GP, so, why is it so hard to do GUI?
[23:15:39] <dsal> If C is a general programming language, why is it so hard to do anything at all?
[23:16:11] <EvanR> it's "easy" to do GUI the same terrible way everyone else does
[23:16:13] <monochrom> Hey I know how to divide by zero in C! >:)
[23:16:25] <EvanR> which non-coincidentally, sucks
[23:16:44] <EvanR> though immediate mode gui might be easier even in haskell
[23:17:10] <geekosaur> we've had gtk2hs for a decade. I think it still works. and gi-gtk is still well maintained. it's just not Haskelly
[23:17:14] <Inst> okay, fine, i'm butchering the english language again, specific use-case includes stuff like availability of coders, performance constraints and specifications
[23:17:25] <Inst> i mean rust def beats haskell on performance for idiomatic code, no?
[23:17:31] <dsal> We hire people who've never programmed in Haskell and have them work on Haskell.
[23:17:38] <EvanR> depends on who runs the benchmarks
[23:17:48] <monochrom> Why argue?
[23:17:52] <Inst> dsal: what's your training time?
[23:17:54] <monochrom> Show data.
[23:18:17] <dsal> Most of what slows down our production code is dumb database access patterns.  It doesn't matter what language you write a dumb database access pattern in.
[23:18:21] <davean> Inst: I'd say thats varied. Their idiom is messier. The type of code matters a LOT
[23:19:02] *** geekosaur sets mode: -o geekosaur
[23:19:03] <dsal> I had similar complaints when I worked in erlang.  "C is so much faster!"  Turns out, that actually wasn't even true given CPU loads, but the disk doesn't care about the accent of the request sender.
[23:19:26] <polyphem> monochrom: • No instance for (Show (data)) arising from a use of ‘Show Data’
[23:19:38] <monochrom> Heh
[23:19:56] <Inst> did safinaskar run away?
[23:20:01] <dsal> Inst: I spent significantly longer learning how to use google frameworks in languages I "knew" at Google than we spend getting people productive in Haskell at this organization, as far as I can tell.
[23:20:07] <davean> dsal: well, disks sorta care. They like deep queues if they're modern NVMe for example. How well async IO works matters a ton. Or if they're HDDs the opposite.
[23:20:24] <geekosaur> went off to troll #rust, I think
[23:21:28] <dsal> davean: This was a while back.  We were waiting for seeks on spinning disks.  The benchmark people claimed to care about was a single-core cheap developer laptop.  The C alternative they tried *was* faster there, but by the time you got to two cores, the overall performance was better in erlang.  It just used more CPU.
[23:22:12] <davean> dsal: right. I will say languages vary a TON by how well they interact with async IO though
[23:22:14] <dsal> Right now, most of our code is waiting on database transactions or external API calls.  If the code runs faster, it's not going to matter.  There are a few bits that are computationally expensive theoretically, but we can FFI those.
[23:22:22] <davean> thats only true of people doing ACTUAL high performance stuff
[23:22:26] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[23:22:28] <monochrom> Yay EvanR was right, "depends on who runs the benchmarks" :)
[23:22:30] <davean> and ... if you have to think about it, you aren't one of them
[23:22:40] <dsal> Right.  It wasn't even a question.
[23:23:01] <davean> VERY few people are actually intimate with the HW enough to do real optimizations here
[23:24:16] <Inst> does it just prove i'm a noob
[23:24:34] <dsal> I don't think we were seeking proof.
[23:24:38] <davean> Inst: 99+% of profesionals in any given field are noobs, don't feel bad
[23:24:38] <Inst> if i still find this code incredibly beautiful / fascinating? https://paste.tomsmeding.com/IgquexPc
[23:25:03] <davean> Inst: you walk into a room of 1000 people well regarded in their field and you MIGHT find someone who knows WTF they're talking about
[23:25:15] <EvanR> dunno if this is still at thing but spec cpu benchmarks were this thing that cpu designers could target and win against other cpus. Whether or not this is stuff consumers would use cpus for. 
[23:25:23] <EvanR> They shouldn't have put some functional problems in there xD
[23:25:24] <Inst> sturgeon's law, but i'm a blowhard, sort of like safinaskar except i post more often
[23:25:26] <EvanR> should've
[23:25:57] <davean> Noobs can do good work, they just have to have more goes at it
[23:25:59] <Inst> i guess it just means i really don't understand foldr ;_;
[23:26:15] <EvanR> foldr is the easy one if you're lazy
[23:26:21] <EvanR> foldl is easy if you're eager
[23:26:22] <Inst> f x (f x2... (f xz [])
[23:26:26] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:27:51] <EvanR> > foldr (\x _ -> x) 'z' (cycle "hello world ")
[23:27:53] <lambdabot>  'h'
[23:28:23] <Inst> that's this code, right?
[23:28:24] <Inst> https://en.wikipedia.org/wiki/Continuation-passing_style
[23:28:30] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[23:28:39] <Inst> i mean, re yuvi's code
[23:28:53] <EvanR> what
[23:30:30] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[23:30:48] <dsal> What is the type of `startsWith'`?
[23:31:24] <safinaskar> so, i finally wrote the rant. Rust is better than haskell for everything, even for provers. https://zerobin.net/?4ae40c2bc3cd95df#xogo0KqhD5e8oXCCSGvF0CeyijPjWWN3L824v4LzGFQ=
[23:31:42] <Inst> (Foldable t, Eq a) => t a -> [a] -> Bool
[23:31:42] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[23:31:48] <Inst> safinaskar: one liner: Haskell got me laid.
[23:32:55] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[23:33:12] <Inst> i guess he has nothing else to say
[23:33:14] * Inst shrugs
[23:34:19] <ski> <yuvi> the type is startsWith :: String -> String -> Bool
[23:35:15] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 250 seconds)
[23:35:39] <kuribas> dsal: I think haskell is great for abstracting over the database.
[23:35:40] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:35:50] <kuribas> dsal: hence haskell is the fastest language :)
[23:36:50] <kuribas> dsal: for example, I wrote a (applicative) batching effect, which can easily collect results.
[23:36:57] <kuribas> dsal: it worked from the first time.
[23:37:20] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:25] <kuribas> good luck doing it in a "fast" language like C++.
[23:37:36] <EvanR> the first time at least
[23:38:16] <EvanR> would not be surprised if C++ already has Applicative xD
[23:39:21] <kuribas> everytime I look at java API's I cringe about the complexity.
[23:39:23] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[23:39:25] <kuribas> Like the cron library.
[23:39:36] <kuribas> And C++ must be even worse...
[23:39:42] *** Quits: xff0x (~xff0x@2001:1a81:533f:ea00:4e49:abcb:9c05:c4b8) (Ping timeout: 260 seconds)
[23:40:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:41:33] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[23:41:58] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:30a6:9d4e:5fe4:7e50) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:42:30] *** Quits: marinelli (~marinelli@gateway/tor-sasl/marinelli) (Quit: marinelli)
[23:44:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[23:44:56] <kuribas> EvanR: Why do you think you need a PHD to write idris?  I believe that writing type level haskell is harder than DT idris.
[23:45:14] <EvanR> Inst, in case of infinite list your expansion is more like f x1 (f x2 (f x3 (... forcing you harder to understand laziness
[23:45:41] <EvanR> kuribas, semi joking
[23:45:42] <Inst> oh, i think yuvi's code is actually broken
[23:45:52] <Inst> well, no, it's not
[23:45:56] <EvanR> it's just everyone in the idris channel has phDs so
[23:46:19] <Inst> was briefly thinking about inf list situation, but that's not needed because the prefix is carrying the code
[23:46:21] <dolio> I don't have a PhD.
[23:46:30] *** Joins: neurocyte0917090 (~neurocyte@ip-094046064199.dynamic.medianet-world.de)
[23:46:30] *** Quits: neurocyte0917090 (~neurocyte@ip-094046064199.dynamic.medianet-world.de) (Changing host)
[23:46:30] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:46:36] <EvanR> really? surprised xD
[23:47:30] <monochrom> I have a PhD and I would rather study more type theories than write more type level Haskell. PhDs actually have good tastes for how to spend their time!
[23:47:59] <[exa]> my phd is literally about finding drugs and drawing pictures, does that still count?
[23:49:09] <EvanR> Inst, just in general for "understanding foldr"
[23:49:17] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[23:51:09] <kuribas> EvanR: I am in the channel too :)
[23:51:22] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:51:59] <monochrom> ooohhhh the true statement is "everyone in #idris thinks everyone else has a PhD"
[23:52:56] <EvanR> doctor. doctor. doctor. doctor doct....
[23:54:00] <EvanR> (n^2 / 2 handshakes)
[23:54:01] <safinaskar> monochrom: https://github.com/haskell/cabal/issues/7819 - thanks
[23:55:02] *** Quits: nahcetan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[23:55:49] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[23:56:14] <int-e> EvanR: so half of the people are shaking hands with themselves?
[23:56:45] <[exa]> (n^2 / 2) even leaves us with a dangerous half-handshake
[23:56:58] <EvanR> 🤔
[23:57:05] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dd3b:3d16:5046:6705) (Remote host closed the connection)
[23:57:21] <janus> if a half-handshake is a fist bump, it could be safer
[23:57:40] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:57:47] <geekosaur> or elbow bump (covid y'know)
[23:57:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:58:31] <monochrom> Let's make an app for virtual AR handshakes over Zoom or something...
[23:58:42] * ski . o O ( half-duplex )
[23:58:54] *** Quits: kuribas (~user@ptr-25vy0i8mlszjpxncneu.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[23:59:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:59:13] <monochrom> Introduce a thing analogous to avatars, but this time for hands. You can customize what your hand looks like.
[23:59:24] <monochrom> And make some of them NFTs bwhahahaha
[23:59:33] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[23:59:33] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[23:59:33] *** finn_elija is now known as FinnElija
