[00:00:01] <FromDiscord> <Rika> im pretty sure they have some sort of mechanism for os-specific deps
[00:00:20] <FromDiscord> <haxscramper> Or ones that have before/after install takes that would fail
[00:00:24] <FromDiscord> <dom96> if it's really a big problem we can come up with some syntax like: requires_win or something. I'm sure other package managers do it in a similar way
[00:00:49] <FromDiscord> <Rika> okay i think npm uses optional so if it fails it still continues
[00:00:54] <FromDiscord> <dom96> but here is another problem: allowing tasks to change deps screws us
[00:01:09] <FromDiscord> <dom96> before install: requires.add("lol")
[00:01:25] <FromDiscord> <haxscramper> Then disallow this
[00:01:45] <FromDiscord> <dom96> yeah, I think we'd need to
[00:01:48] <FromDiscord> <haxscramper> Make all congratulation declarative
[00:01:57] <FromDiscord> <haxscramper> task: static list of requires
[00:02:08] <FromDiscord> <haxscramper> Top-level: also static list of requires
[00:03:07] <FromDiscord> <dom96> I think this needs its own RFC 🙂
[00:03:28] <FromDiscord> <dom96> and the RFC needs to contain answers to all these problems
[00:04:06] <FromDiscord> <dom96> As a general point that's off-topic to our discussion, I think we need to be stricter about our RFCs. Often times they are severely too light on details (which leads to far too much discussions about silly things)
[00:08:36] <FromDiscord> <haxscramper> Or I might need to disable compilation of a binary for a hybrid package
[00:10:41] <FromDiscord> <Bung> I think disable is fine, when user want , use do `nimble build pkgname` or some like
[00:12:11] <FromDiscord> <Bung> or like `nimble install pkgname -b`
[00:14:08] <FromDiscord> <aleclarson> can i not assign a proc to a variable?
[00:14:21] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[00:14:31] <FromDiscord> <Rika> you can, mind clarifying
[00:17:06] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3rp4
[00:17:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:19:58] <FromDiscord> <aleclarson> no worries, i can work around it
[00:22:00] *** Quits: bkay (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Quit: Leaving)
[00:22:16] *** Joins: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[00:22:22] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 272 seconds)
[00:23:11] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:24:53] *** Quits: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Changing host)
[00:24:53] *** Joins: beshr (~beshr@user/beshr)
[00:26:02] <FromDiscord> <arnetheduck> In reply to @dom96 "In what way? I": I'd ask the same question 😉
[00:26:03] <FromDiscord> <Rika> what is toQuery?
[00:26:09] <FromDiscord> <Rika> ah
[00:26:13] <FromDiscord> <Rika> you're using a global
[00:28:10] <FromDiscord> <arnetheduck> declarative vs not is really something more of a first principle, it's not something you write an RFC about
[00:30:47] <FromDiscord> <aleclarson> In reply to @Rika "what is toQuery?": it's the proc that contains the variable i'm trying to assign a proc to. in some cases, `toQuery` is assigned to that variable, so it prevents `toQuery` from being gc-safe like the other procs i'm assigning to the variable.
[00:31:00] <FromDiscord> <aleclarson> anyway, i figured out a workaround \:)
[00:51:28] <FromDiscord> <Bung> @timotheecour what's the state of rtl .cdecl and .closure compatibility? I've seen you create a issue about when use nimrtl
[00:52:55] <FromDiscord> <timotheecour> do you have a link?
[00:56:56] <FromDiscord> <Bung> https://github.com/nim-lang/Nim/issues/8303
[00:57:46] <FromDiscord> <ElegantBeef> Someone just reminded me that i was meaning to see about making the pragma error message more to the point, where if the only mismatch is pragmas you just print `proc mismatch due to pragmas, got gcsafe, expected [gcsafe, noSideEffect] ` 😄
[01:13:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[01:22:29] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:22:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[01:22:59] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:28:53] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[01:29:36] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:36:43] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[01:47:23] <FromDiscord> <timotheecour> @ElegantBeef PR welcome, it's a known annoyance
[01:48:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:48:19] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[01:50:57] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:55:27] <FromDiscord> <timotheecour> @Bung IMO the proper fix (with no runtime cost) is `alias`, possibly with `alias Callable[R, T]` to optionally restrict to an alias with a specific input/output types, refs https://github.com/nim-lang/Nim/pull/11992  and https://github.com/nim-lang/Nim/pull/18241; it relates intimately with https://github.com/nim-lang/Nim/issues/18220
[02:00:20] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[02:01:53] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:07:13] <FromDiscord> <Bung> @timotheecour is cant be simply pass compiler check ?
[02:15:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[02:15:55] <FromDiscord> <dom96> In reply to @arnetheduck "declarative vs not is": well, there are questions to be answered. An RFC should provide that answer
[02:15:58] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:18:48] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Excess Flood)
[02:19:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:22:39] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[02:22:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[02:25:15] *** Gustavo6046_ is now known as Gustavo6046
[02:31:43] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 258 seconds)
[02:34:13] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:38:51] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[02:54:59] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[02:55:48] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:05:18] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[03:06:08] <FromDiscord> <ElegantBeef> A lovely start 😄 https://media.discordapp.net/attachments/371759389889003532/859200519603748894/unknown.png
[03:06:09] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:06:51] <FromDiscord> <checkersai> Is there a significant difference between using the `SharedPtr` from fusion and using `ref`s with `--gc:arc`?
[03:09:28] <FromDiscord> <Recruit_main707> it probably will be more painful
[03:12:41] <FromDiscord> <checkersai> why?
[03:14:16] <FromDiscord> <Recruit_main707> well, i guess its harder to use
[03:24:19] *** Quits: max22- (~maxime@2a01cb0883359800ce2a08768cca3746.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:27:15] <FromDiscord> <timotheecour> In reply to @Bung "<@!427948629249228800> is cant be": looking at this again, maybe, for this specific pragma; it looks like cdecl affects name mangling of the declaration, which IIUC shouldn't matter for proc arguments, so sigmatch could ignore it; I may be missing something though
[03:31:06] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[03:34:02] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 272 seconds)
[03:34:13] *** Gustavo6046_ is now known as Gustavo6046
[03:36:16] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:38:17] <FromDiscord> <Bung> I thought if the program know where the call routine is ,closure or not does not have much differences.
[03:51:31] <FromDiscord> <timotheecour> > closure or not does not have much differences.↵that i don't understand; if you pass a closure or a non-closure as argument to a proc, how could generated machine code handle both
[03:52:01] <FromDiscord> <ElegantBeef> Remember that closures are twice the size of a nimcall and point to an environment, so they're not nearly close to the same thing 😄
[03:52:27] <FromDiscord> <ElegantBeef> Trying to make some tests for my error messages and oh boy is testament not liking it
[03:54:22] <FromDiscord> <timotheecour> @ElegantBeef yes for closure; but my earlier question was whether sigmatch could ignore cdecl (IIUC it's for mangling, which shouldn't matter for an argument to a proc)
[03:55:09] <FromDiscord> <timotheecour> > Trying to make some tests for my error messages and oh boy is testament not liking it↵maybe best to show the WIP first before fixing a bunch of tests so we all agree on the error messages it should give first?
[03:55:18] <FromDiscord> <timotheecour> (edit) "> Trying to make some tests for my error messages and oh boy is testament not liking it↵maybe best to show the WIP ... first" 03added "PR"
[03:55:40] <FromDiscord> <ElegantBeef> Not really fixing tests, was going to implement tests, but sure PR i guess 😄
[03:58:05] <FromDiscord> <Bung> so the main point is make compiler pass , ignore the pragmas make the program work I think.
[03:58:21] <FromDiscord> <ElegantBeef> Yea with the other calling conventions is a little less sensible that there is an type mismatch
[03:59:16] <FromDiscord> <Bung> In reply to @ElegantBeef "Remember that closures are": am not from c , could you provide some link I can read more ?
[04:00:34] <FromDiscord> <Bung> In reply to @ElegantBeef "Yea with the other": that will make things simpler ,  will not have so much mismatch errors.
[04:02:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[04:02:31] <FromDiscord> <exelotl> In reply to @checkersai "Is there a significant": see this comment: https://github.com/nim-lang/Nim/pull/17333#issuecomment-868922491
[04:02:55] <FromDiscord> <ElegantBeef> https://nim-lang.org/docs/intern.html#code-generation-for-closures
[04:03:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:07:36] <FromDiscord> <ElegantBeef> Personally i dont find the type mismatch an issue as much as the diagnosabillity due to long error messages which hid the important details at the end 😄
[04:13:39] <FromDiscord> <Bung> `proc add(x: int): proc (y: int): proc (z: int): int {.closure.} {.closure.} =` oh , the first time I see a proc like this.
[04:14:46] <FromDiscord> <timotheecour> no, the type mismatch is a serious issue for composability; pragmas that don't affect codegen shouldn't be considered by sigmatch; but for the other ones, diagnosability in error messages is an important issue, so your PR is indeed welcome 🙂
[04:16:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[04:16:55] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:22:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[05:23:08] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[05:32:12] *** Joins: Guest49 (~Guest49@2600:1700:e680:25d0:99ab:f5c5:3917:6feb)
[05:33:33] <Guest49> Is the https://github.com/nim-lang/Nim/blob/devel/lib/pure/mersenne.nim module going to be improved in 2.0?
[05:35:14] *** Quits: Guest49 (~Guest49@2600:1700:e680:25d0:99ab:f5c5:3917:6feb) (Client Quit)
[05:35:31] *** Joins: Guest69 (~Guest69@2600:1700:e680:25d0:99ab:f5c5:3917:6feb)
[05:35:46] *** Quits: Guest69 (~Guest69@2600:1700:e680:25d0:99ab:f5c5:3917:6feb) (Client Quit)
[05:36:26] <FromDiscord> <ElegantBeef> Well what does it need, and are you capable of adding to it? 😄
[05:37:33] <FromDiscord> <pyautogui> Maybe. I was wondering if there was a plan in place.
[05:37:40] *** Joins: rockcavera (~rc@192.12.113.196)
[05:37:40] *** Quits: rockcavera (~rc@192.12.113.196) (Changing host)
[05:37:40] *** Joins: rockcavera (~rc@user/rockcavera)
[05:37:48] <FromDiscord> <timotheecour> "just make a PR" is the usual answer
[05:37:53] <FromDiscord> <pyautogui> Got it.
[05:38:54] <FromDiscord> <ElegantBeef> Nim is very community driven so many PR's to improve the stdlib are accepted, though Nim 2.0 seems like it'll make it a better process for doing such
[05:39:57] <FromDiscord> <timotheecour> what would nim 2.0 have that makes it easier to write PRs?
[05:40:32] <FromDiscord> <ElegantBeef> Well the suggestion araq has is to make the stdlib a distribution so destructive but beneficial changes would be more acceptable afaik
[05:42:49] <FromDiscord> <Rika> Are there any issues preventing that or is it a total go for 2.0?
[05:43:13] <FromDiscord> <ElegantBeef> Well 2.0 is still just and idea and not a thing yet 😄
[05:43:18] <FromDiscord> <ElegantBeef> (edit) "and" => "an"
[05:43:31] <FromDiscord> <Rika> I don’t see how that is relevant to what I asked
[05:43:47] <FromDiscord> <ElegantBeef> Well not having a bundler is a big issue 😄
[05:43:52] <FromDiscord> <timotheecour> ... but nothing prevents one from contributing PRs until this grand vision comes to life (honestly, that's still vague from my point of view)
[05:44:37] <FromDiscord> <ElegantBeef> So probable nimble is also a blocking issue for the bundler
[05:45:08] <FromDiscord> <ElegantBeef> Yea ofc people should still make PRs, as they mentioned 2.0 i just explained what the implications of that forum post say
[05:46:45] <FromDiscord> <timotheecour> I think https://github.com/nim-lang/RFCs/issues/291 is a key ingredient for nimble
[05:58:11] <FromDiscord> <ElegantBeef> i barely can find the keyway so i have no idea what's key 😄
[06:03:00] <FromDiscord> <exelotl> We can improve the mersenne module by deleting it
[06:03:10] <FromDiscord> <exelotl> Mersenne Twister is trash :P
[06:06:24] <FromDiscord> <Rika> Lol
[06:13:49] <FromDiscord> <ElegantBeef> Exelotl tell us how you really feal 😛
[06:14:51] <FromDiscord> <Rika> Exquisite spelling ability as usual beef
[06:17:37] <FromDiscord> <exelotl> I probably said this before but I feel like people only remember it because it has a catchy name
[06:18:19] <FromDiscord> <ElegantBeef> Lol i wanted to get water more than type properly 😄
[06:18:40] <FromDiscord> <ElegantBeef> +36c here right now, so i'll place all blame on that
[06:20:10] <FromDiscord> <exelotl> It's so slow and has such hefty memory requirements compared to every other PRNG, yet it's not even cryptographically secure! What's even the point lol
[06:20:31] <FromDiscord> <exelotl> Ok mersenne rant over
[06:20:40] <FromDiscord> <ElegantBeef> How goes goodboy galaxy?
[06:21:10] <FromDiscord> <exelotl> Pretty good, boy :)
[06:22:08] <FromDiscord> <exelotl> Well we're still inching towards the kickstarter but we're so very close now
[06:22:46] <FromDiscord> <exelotl> We made a company which is pretty exciting too!
[06:23:05] <FromDiscord> <exelotl> (Well we had to as a prerequisite for the kickstarter)
[06:25:07] <FromDiscord> <exelotl> Our publisher had some test carts made and confirmed that saving works on real GBA carts using SRAM or FRAM
[06:25:59] <FromDiscord> <ElegantBeef> Will physical carts also get a digital key?
[06:26:16] <FromDiscord> <exelotl> Yeah, for sure
[06:29:13] <FromDiscord> <Rika> In reply to @exelotl "It's so slow and": Well it’s old
[06:31:19] <FromDiscord> <exelotl> Yeah I guess it was good compared to the other algorithms around 2001 or whenever it was released
[06:32:08] <FromDiscord> <exelotl> Oh 1997
[06:32:10] <FromDiscord> <Rika> 19k7
[06:32:13] <FromDiscord> <Rika> Dammit
[06:32:19] <FromDiscord> <Rika> Pressed k instead of 9
[06:32:38] <FromDiscord> <exelotl> I'm only 2 years older than it :P
[06:32:59] <FromDiscord> <ElegantBeef> Jeez what a dinosaur
[06:35:12] *** Parts: Epsilon (~Epsilon@user/epsilon) (ERR: OUT_OF_MEM)
[06:35:59] <FromDiscord> <exelotl> I wish I could've done something for NimConf but too much happening at the moment and I couldn't get a new version of my library out in time, let alone write a talk about it
[06:36:07] <FromDiscord> <exelotl> Maybe next year
[06:44:52] <arkanoid> I'm confused my the difference of func/{.noSideEffect.} and {.raises[].}
[06:45:00] <arkanoid> s/my/by
[06:45:36] <FromDiscord> <ElegantBeef> What confuses you?
[06:46:16] <arkanoid> that seems overlapping
[06:46:22] <FromDiscord> <ElegantBeef> Func is a "pure"(Like functional programming function) procedure, `raises[]` tells you the procedure cannot have any errors so if anything inside of it has an error it'll report it
[06:47:18] <FromDiscord> <ElegantBeef> They do vastly different things, noSideEffect does not let you mutate any state not passed in as mutable, raises does not let the procedure have any uncaught exceptions
[06:49:31] <arkanoid> the "raises" and "tags" pragma are the main componens of the effect system (https://nim-lang.org/docs/manual.html#effect-system). They are meant to declare the effects of the preocedure and enforce the presence or absence of them. "noSideEffect" does the same, in a black/white fashion
[06:52:17] <FromDiscord> <ElegantBeef> !eval func a = raise newException(ValueError, "This is an error")
[06:52:21] <NimBot> <no output>
[06:52:53] <FromDiscord> <ElegantBeef> I dont quite follow where the overlap is
[06:54:05] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[06:55:25] <arkanoid> So what you're saying is that the "noSideEffect" thing is unrelated to the "effect system"
[06:55:50] <arkanoid> is this unlucky naming of things?
[06:55:52] <FromDiscord> <ElegantBeef> Afaik yes, it's a pragma to annotate whether the function is pure
[06:56:20] <FromDiscord> <ElegantBeef> `noSideEffect` is talking about pure functions, like those in functional languages, where they do not mutate global state
[06:56:57] <FromDiscord> <Hi02Hi> In reply to @arkanoid "is this unlucky naming": you mean noSideEffect is the unlucky naming
[06:57:00] <FromDiscord> <Hi02Hi> (edit) "naming" => "naming?"
[06:58:16] <arkanoid> I know "effect tracking" and "no side effects" concepts in theory, and in other languages. They surely overlap there, as changing global state is an "effect" too
[06:59:00] <FromDiscord> <ElegantBeef> Exception handling may be considered in strictfuncs as impure, but i dont know
[06:59:05] <arkanoid> I'm just confused how nim has those in different chapters of the manual, with overlapping names but apparently no overlapping features
[07:00:52] <FromDiscord> <Rika> Effects and exceptions are separate
[07:02:03] <FromDiscord> <Rika> Ah I misread
[07:03:31] <FromDiscord> <@bracketmaster-5a708063d73408ce4> sent a long message, see http://ix.io/3rqE
[07:03:38] <FromDiscord> <@bracketmaster-5a708063d73408ce4> emulator currently does 21,000 instructions per second
[07:03:41] <FromDiscord> <@bracketmaster-5a708063d73408ce4> not great
[07:04:16] <FromDiscord> <ElegantBeef> I thought it was nimdiotic 😄
[07:04:19] <FromDiscord> <@bracketmaster-5a708063d73408ce4> If it seems readable, I think I'll add some more instructions, enough to get lInux running
[07:04:34] <FromDiscord> <@bracketmaster-5a708063d73408ce4> oh
[07:04:36] <FromDiscord> <ElegantBeef> You did bench it on release right?
[07:04:41] <FromDiscord> <@bracketmaster-5a708063d73408ce4> almost sounds like "idiotic"
[07:04:44] <FromDiscord> <@bracketmaster-5a708063d73408ce4> no?
[07:04:46] <FromDiscord> <ElegantBeef> That was the joke
[07:04:47] <FromDiscord> <@bracketmaster-5a708063d73408ce4> How do I do that?
[07:04:52] <FromDiscord> <@bracketmaster-5a708063d73408ce4> haha
[07:04:57] <FromDiscord> <@bracketmaster-5a708063d73408ce4> good one
[07:04:59] <FromDiscord> <ElegantBeef> `nim c -d:release ...`
[07:05:24] <FromDiscord> <ElegantBeef> Probably also want `-d:lto` if on linux/windows or `--passC:-flto` and `--passL:-flto` on mac
[07:05:49] <FromDiscord> <@bracketmaster-5a708063d73408ce4> does release not catch exceptions?
[07:05:53] <FromDiscord> <ElegantBeef> It still does
[07:05:54] <FromDiscord> <Rika> It does
[07:06:11] <FromDiscord> <Rika> Just lacks stack traces I believe
[07:06:28] <FromDiscord> <@bracketmaster-5a708063d73408ce4> https://github.com/BracketMaster/nimulatorPPC/blob/main/src/nimulatorPPC.nim#L41
[07:06:39] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I catch instructions emulated as an exception
[07:06:45] <FromDiscord> <Rika> That will work
[07:06:49] <FromDiscord> <@bracketmaster-5a708063d73408ce4> as -\> after
[07:07:00] <FromDiscord> <@bracketmaster-5a708063d73408ce4> doesn't seem to print with release
[07:07:17] <FromDiscord> <ElegantBeef> If exception handling didnt work with release that'd be a nightmare
[07:07:20] <FromDiscord> <Rika> You probably didn’t flush the standard output
[07:07:36] <FromDiscord> <ElegantBeef> Yea `stdout.flush` should ensure it works properly
[07:07:45] <FromDiscord> <Rika> Flush file
[07:07:51] <FromDiscord> <Rika> Flush is for streams
[07:08:03] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I know what happened - lol
[07:08:04] <FromDiscord> <@bracketmaster-5a708063d73408ce4> one sec
[07:08:05] <FromDiscord> <ElegantBeef> Ah, cause why not have a different name for no reason
[07:08:21] <FromDiscord> <Rika> Because it’s a file duh
[07:08:33] <FromDiscord> <Rika> Funny beef saying nonsense
[07:08:43] <FromDiscord> <@bracketmaster-5a708063d73408ce4> what's the way to set a ctrl-c hook?
[07:09:11] <FromDiscord> <Rika> https://nim-lang.org/docs/system.html#setControlCHook%2Cproc%29
[07:09:46] <FromDiscord> <ElegantBeef> Well rika you know very well `flushFile(f: File)` is redundant
[07:10:04] <FromDiscord> <Rika> I’m joking just so you know
[07:10:13] <FromDiscord> <Rika> I can’t tell if you know
[07:10:21] <FromDiscord> <ElegantBeef> Nah you're a meanie and insult me daily!
[07:10:35] <FromDiscord> <Rika> I mean you’re so easy to bully
[07:10:46] <FromDiscord> <Rika> It’s difficult to resist
[07:12:35] <FromDiscord> <@bracketmaster-5a708063d73408ce4> roughly the same speed
[07:12:37] <FromDiscord> <ElegantBeef> True, i'm a big self deprecating target of indifference
[07:12:48] <arkanoid> lol
[07:13:12] <FromDiscord> <ElegantBeef> Well how can i benchmark this?
[07:13:27] <FromDiscord> <ElegantBeef> Time to whip out treeform's hottie and put it to work
[07:14:00] <FromDiscord> <@bracketmaster-5a708063d73408ce4> @\_discord\_145405730571288577\:t2bot.io , are you asking how to benchmark nimulator?
[07:14:17] <FromDiscord> <ElegantBeef> I believe so
[07:14:37] <FromDiscord> <@bracketmaster-5a708063d73408ce4> `nim c -d:release r src/nimulatorPPC` then type something for maybe a couple seconds, and finally press ctrl+c
[07:14:43] <FromDiscord> <@bracketmaster-5a708063d73408ce4> it should tell you cycles/second
[07:14:46] <FromDiscord> <@bracketmaster-5a708063d73408ce4> as an output
[07:14:48] <FromDiscord> <ElegantBeef> ok
[07:14:57] <FromDiscord> <@bracketmaster-5a708063d73408ce4> or more accurately, instructions/second
[07:15:38] <FromDiscord> <@bracketmaster-5a708063d73408ce4> modern CPUs execute on the order of 100M+ instructions per second
[07:16:00] <FromDiscord> <@bracketmaster-5a708063d73408ce4> around 22k/second is alright for a purely software emulator
[07:16:22] <FromDiscord> <@bracketmaster-5a708063d73408ce4> with ASM jitting, you can hit up to 10M+ instructions per second
[07:16:55] <FromDiscord> <@bracketmaster-5a708063d73408ce4> and with a verilator optimized hardware model, you hit around 250k instructions per second, for some context
[07:17:55] <FromDiscord> <@bracketmaster-5a708063d73408ce4> @\_discord\_145405730571288577\:t2bot.io , you might need the PPC gnu assembler to build a binary
[07:19:32] <FromDiscord> <ElegantBeef> Excuse me i've just learned my package manger is borked
[07:19:41] <FromDiscord> <ElegantBeef> I need to go kick my pc a for a few minutes
[07:19:48] <FromDiscord> <@bracketmaster-5a708063d73408ce4> lol
[07:19:54] <FromDiscord> <@bracketmaster-5a708063d73408ce4> apt?
[07:20:52] <FromDiscord> <ElegantBeef> Ah nvm i'm just a dummy
[07:21:21] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I can drop a firmware.bin.tar.gz link if needbe
[07:21:37] <FromDiscord> <@bracketmaster-5a708063d73408ce4> installing cross compilers can be a pain
[07:22:57] <FromDiscord> <ElegantBeef> I've got it
[07:23:12] <arkanoid> I've simplified my cross-compiling dev experience using nix
[07:23:46] <FromDiscord> <ElegantBeef> Ah LTO is really what's needed
[07:24:50] <FromDiscord> <ElegantBeef> from 130k/s to 450k/s
[07:25:07] <FromDiscord> <@bracketmaster-5a708063d73408ce4> LOT?
[07:25:18] <FromDiscord> <@bracketmaster-5a708063d73408ce4> \\LTO
[07:25:49] <FromDiscord> <ElegantBeef> Link time optimization, on linux you should be able to do `-d:lto` if using gcc, with clang you'll need to do `--passC:-flto` and `--passL:-flto`
[07:26:12] <FromDiscord> <ElegantBeef> Due to how nim C code is generated it gives proper performance
[07:27:00] <FromDiscord> <ElegantBeef> Then `-d:danger` gets us to 470k/s on my machine
[07:27:51] <FromDiscord> <@bracketmaster-5a708063d73408ce4> oooh... 400k cycles per second!!
[07:27:57] <FromDiscord> <@bracketmaster-5a708063d73408ce4> that is really fast!
[07:28:09] <FromDiscord> <@bracketmaster-5a708063d73408ce4> lemme try danger
[07:28:10] <FromDiscord> <ElegantBeef> Let's do it better and faster  😄
[07:28:30] <arkanoid> what do you think of https://koka-lang.github.io ?
[07:28:39] <FromDiscord> <@bracketmaster-5a708063d73408ce4> danger breaks things - lol
[07:28:48] <FromDiscord> <@bracketmaster-5a708063d73408ce4> but I got 725k
[07:29:21] <FromDiscord> <@bracketmaster-5a708063d73408ce4> first glance?
[07:29:25] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I sorta like it
[07:30:17] <FromDiscord> <ElegantBeef> Havent looked at the code yet, main thing was to get you to learn how to actually run Nim code 😛
[07:31:46] <FromDiscord> <@bracketmaster-5a708063d73408ce4> anyways, 400k cycles per second is defnitely enough to run linux
[07:33:09] <FromDiscord> <@bracketmaster-5a708063d73408ce4> in emulation
[07:35:22] <FromDiscord> <ElegantBeef> Ok so bitpat pairings is a table for literally 0 reason afaic
[07:35:28] <FromDiscord> <ElegantBeef> make it an array
[07:35:32] <FromDiscord> <ElegantBeef> free speed
[07:35:55] <FromDiscord> <@bracketmaster-5a708063d73408ce4> hmm - alright
[07:36:17] <FromDiscord> <ElegantBeef> Well it's remove `{}.toTable` and replace with `[]` and the api is 100% identical
[07:36:31] <FromDiscord> <ElegantBeef> So you get the exact same logic/connection without any hashing
[07:37:05] <FromDiscord> <ElegantBeef> Atleast assuming all the values from `mnemonic_enums` are used
[07:37:08] <FromDiscord> <Rika> In reply to @ElegantBeef "Ok so bitpat pairings": Bit what?
[07:37:32] <FromDiscord> <ElegantBeef> That's the filename `bitpat_pairings`
[07:37:49] <FromDiscord> <@bracketmaster-5a708063d73408ce4> @\_discord\_259277943275126785\:t2bot.io  - that's how I do my decoder
[07:38:02] <FromDiscord> <@bracketmaster-5a708063d73408ce4> https://github.com/BracketMaster/nimulatorPPC/blob/main/src/isa/bitpat_pairings.nim
[07:38:16] <FromDiscord> <@bracketmaster-5a708063d73408ce4> also, shoudln't `nim c --profiler:on --stacktrace:on -r src/nimulatorPPC.nim` give me a stack trace?
[07:38:49] <FromDiscord> <@bracketmaster-5a708063d73408ce4> and profiler results?
[07:38:49] <FromDiscord> <Rika> What do you get?
[07:38:59] <FromDiscord> <@bracketmaster-5a708063d73408ce4> nothing...
[07:39:06] <FromDiscord> <Rika> Oh you need to import the profiler as well
[07:39:19] <FromDiscord> <Rika> Odd quirk but eh
[07:39:21] <FromDiscord> <ElegantBeef> Yea just use a C profiler or checkout `treeform/hottie`
[07:40:40] <FromDiscord> <ElegantBeef> Though hottie did not work for me
[07:40:43] <FromDiscord> <Rika> Why not call it spottie though
[07:40:48] <FromDiscord> <Rika> Would be cooler IMO
[07:40:51] <FromDiscord> <ElegantBeef> It's for hot path finding
[07:41:06] <FromDiscord> <Rika> Big brain call it hot spot finding
[07:41:12] <FromDiscord> <Rika> Ez
[07:41:30] <FromDiscord> <ElegantBeef> Though for whatever reason it doesnt work on this project, so either something is wrong with the linux impl or something is wrong with how this program is ran 😄
[07:42:15] <FromDiscord> <reilly> Does anyone have any resources I can read for using Nim on the GPU?
[07:42:18] <FromDiscord> <@bracketmaster-5a708063d73408ce4> yeah, importing nimprof seems to break stdout
[07:42:26] <FromDiscord> <ElegantBeef> nimsl
[07:42:32] <FromDiscord> <ElegantBeef> That'll be it all for nim on gpu
[07:42:39] <FromDiscord> <ElegantBeef> Think there are some other transpilers
[07:46:22] <FromDiscord> <ElegantBeef> Ah i was being dumb
[07:46:24] <FromDiscord> <ElegantBeef> Works fine
[07:46:43] <FromDiscord> <ElegantBeef> I'm more often dumb than smart, why does anyone listen to a word i have to say
[07:46:52] <FromDiscord> <@bracketmaster-5a708063d73408ce4> You're right, nimprof shows the hash is probably taking up 29% of the simulation
[07:47:03] <FromDiscord> <ElegantBeef> Well it's needless
[07:47:19] <FromDiscord> <ElegantBeef> You have an enum -> value, that's a free index lookup in nim
[07:49:07] <FromDiscord> <ElegantBeef> Yea without lto or danger went from 130k to 190k with just changing the `{ }.toTable` to an `[]`
[07:49:41] <FromDiscord> <ElegantBeef> nice 2.3million now
[07:49:50] <FromDiscord> <ElegantBeef> (edit) "2.3million" => "2.23million"
[07:50:03] <FromDiscord> <Rika> Damn
[07:50:25] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Is it Nim, or is it bracket master?
[07:50:36] <FromDiscord> <@bracketmaster-5a708063d73408ce4> lol - jk
[07:50:58] <FromDiscord> <@bracketmaster-5a708063d73408ce4> @\_discord\_145405730571288577\:t2bot.io , diff me your changes?
[07:51:27] <FromDiscord> <ElegantBeef> It's literally open `bitpat_pairings` and replace `{}.toTable` with `[]`
[07:51:49] <FromDiscord> <ElegantBeef> Like there is no elaborate code changes, Nim's arrays can be enum indexed
[07:52:04] <FromDiscord> <ElegantBeef> so since you dont pass this around and just access it, it's free
[07:52:31] <FromDiscord> <Rika> Thinking about it a bit
[07:52:47] <FromDiscord> <Rika> Why would the hash function of an enumeration be different from its integer value
[07:52:58] <FromDiscord> <Rika> The result of the hash function I mean
[07:52:59] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I also got 2.5M
[07:53:02] <FromDiscord> <@bracketmaster-5a708063d73408ce4> without danger
[07:53:19] <FromDiscord> <@bracketmaster-5a708063d73408ce4> 3M with
[07:53:23] <FromDiscord> <Rika> Now slap LTO on it and get billions (I kid)
[07:53:28] <FromDiscord> <ElegantBeef> Think that's with lto
[07:54:24] <FromDiscord> <ElegantBeef> Time to run a profiler to see where the slowdown is now
[07:56:41] <FromDiscord> <ElegantBeef> Ah yes 43% is spent in blank https://media.discordapp.net/attachments/371759389889003532/859273642088726528/unknown.png
[07:57:37] <FromDiscord> <Rika> This code doesn’t exist
[07:57:56] <FromDiscord> <Rika> The program spends its time on contemplating whether it dies after running or not
[07:58:23] <FromDiscord> <@bracketmaster-5a708063d73408ce4> blank?
[07:58:43] <FromDiscord> <ElegantBeef> Hottie didnt find a stacktrace in the objdump for what that is
[07:58:46] <FromDiscord> <Rika> Can you see the image
[07:58:47] <FromDiscord> <@bracketmaster-5a708063d73408ce4> how do I fix that?
[07:58:54] <FromDiscord> <ElegantBeef> That's an issue for hottie
[07:59:04] <FromDiscord> <Rika> “Remove all the white space only lines in your code”
[07:59:08] <FromDiscord> <Rika> I’m kidding
[07:59:48] <FromDiscord> <@bracketmaster-5a708063d73408ce4> ah
[08:00:26] <FromDiscord> <ElegantBeef> I'd argue though the `from X import Y` isnt very idiomatic Nim, but that's probably just cause i'm a lazy tosser
[08:00:43] <FromDiscord> <@bracketmaster-5a708063d73408ce4> ha, you're probably right
[08:00:55] <FromDiscord> <ElegantBeef> also all the snake case 😛
[08:01:12] <FromDiscord> <@bracketmaster-5a708063d73408ce4> When this is done, nimulator codebase will have roughly 4000 functions
[08:01:24] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I wanted to keep my sanity when importing functions
[08:01:38] <FromDiscord> <@bracketmaster-5a708063d73408ce4> POWER has 900 instructions, so roughly 5 functions per instruction
[08:01:49] <FromDiscord> <ElegantBeef> Well yea i cannot force you to write code the way i want, if i wanted to do that i'd have written this library
[08:02:53] <FromDiscord> <ElegantBeef> https://github.com/BracketMaster/nimulatorPPC/blob/main/src/utils/rawTerm.nim#L7↵Probably should just do `stdin.getFileHandle.cint` instead of the cast
[08:03:30] <FromDiscord> <@bracketmaster-5a708063d73408ce4> that would make sense
[08:04:56] <FromDiscord> <ElegantBeef> https://github.com/BracketMaster/nimulatorPPC/blob/main/src/cpu/decoder.nim#L20-L24↵Also what's this?↵shouldnt this just be `Pairings[instruction] == insnInfo`
[08:05:18] <FromDiscord> <ElegantBeef> Also why are you putting an assertion in a try block
[08:06:51] <FromDiscord> <ElegantBeef> Defects are not meant to be caught they're meant to be avoided properly, they're sanity checks not to be used as exceptions
[08:06:51] <FromDiscord> <Rika> Assertions are defects, you might not be able to catch them
[08:07:19] <FromDiscord> <ElegantBeef> Yea some flag disables them which might be why your danger build is borked
[08:08:16] <FromDiscord> <Rika> Maybe there should be a warning when something that only raises a defect is the sole raiser in a try block
[08:08:39] <FromDiscord> <ElegantBeef> Probably, but i just dont get the point here
[08:08:50] <FromDiscord> <ElegantBeef> Raise the assertion to catch the assertion
[08:09:32] <FromDiscord> <ElegantBeef> sent a code paste, see https://play.nim-lang.org/#ix=3rqT
[08:10:02] <FromDiscord> <Rika> Pretty much
[08:11:00] <FromDiscord> <ElegantBeef> The iterating over all the instructions seems like another place for a slowdown
[08:11:23] <FromDiscord> <ElegantBeef> And hottie said iterators was 3% of your programs runtime so wouldnt doubt it
[08:13:33] <FromDiscord> <ElegantBeef> Wonder if you can just do an `array[0..instructions, OpCode]` then just check if instruction is in that range
[08:21:49] <FromDiscord> <@bracketmaster-5a708063d73408ce4> `if not opCodeFound: raise newException(NimulatorError, "Op code not found")` does seem like a better patter
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:36] *** Joins: supakeen (~user@python/site-packages/supakeen)
[09:33:59] <fn> <11ForumUpdaterBot99> New Nimble package! websock -  Websocket server and client implementation, see https://github.com/status-im/nim-websock
[09:34:00] <fn> <12R2D299> 4GitHub: 7"Websocket for Nim"
[09:53:38] <FromDiscord> <Bung> hmm we got 3 or 4 websocket lib
[10:30:14] *** Joins: SebastianM (~seba@user/sebastianm)
[10:36:17] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[10:37:40] <FromDiscord> <Richard> Hey, does anyone know if Nim has a machine learning for beginners type of tutorial?
[10:47:22] <FromDiscord> <Bung> I think they just beginning https://github.com/SciNim/getting-started/issues/19
[10:49:52] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[10:51:39] <FromDiscord> <treeform> In reply to @ElegantBeef "Ah yes 43% is": blank usually means OS code, like waiting for file read or some thing.
[10:51:51] <FromDiscord> <treeform> or a sleep() call
[11:02:07] <FromDiscord> <ElegantBeef> @treeform do i have a bug for you 😛 single line puppy stack smashing
[11:32:04] <FromDiscord> <Avatarfighter> In reply to @Bung "hmm we got 3": This one is using chronos
[11:33:00] <FromDiscord> <Avatarfighter> kind of dope
[11:35:39] <FromDiscord> <Bung> use chronos then it's fine , as chronos use its own async pragma
[11:36:06] <FromDiscord> <Bung> requires "nimcrypto"↵requires "bearssl"↵requires "https://github.com/status-im/nim-zlib" I dont know why these in dependencies
[11:37:20] <FromDiscord> <Avatarfighter> I assume that maybe status is using/going to use this in nimbus and they are probably just using the same dependencies everywhere
[11:40:41] <FromDiscord> <Bung> oh, I checked these are really in used.
[12:17:30] *** Joins: max22- (~maxime@2a01cb088335980042c1465b0d8df57f.ipv6.abo.wanadoo.fr)
[12:39:16] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8) (Quit: Bridge terminating on SIGTERM)
[12:39:17] *** Quits: Zoom[m] (~zoommatri@2001:470:69fc:105::15c4) (Quit: Bridge terminating on SIGTERM)
[12:39:30] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Quit: Bridge terminating on SIGTERM)
[12:49:44] *** Joins: Vladar (~Vladar@46.162.2.53)
[12:56:52] <FromDiscord> <KnorrFG> do we have a min function, were we can explicitely pass the comparison operator instead of implicitely using `<` ?
[12:59:43] <FromDiscord> <KnorrFG> nvm. found algorithm.sort
[13:27:26] <PMunch> Finally have time to watch all the Nim talks from NimConf :)
[13:30:39] <FromDiscord> <Rika> good for you 😦
[13:38:15] <FromDiscord> <gogolxdong (liuxiaodong)> Anyone familiar with blake3?
[13:43:36] <PMunch> @Rika, haven't had time to watch them yet?
[13:51:15] <FromDiscord> <stu002> Can someone give me more insight into the error message `Error: no tuple type for constructor`? I'm preparing a Gist that shows the error in context, i.e. passing 2-tuples of floats to a function.
[14:30:14] <FromDiscord> <haxscramper> @stu002 what is the function signature?
[14:30:29] <FromDiscord> <haxscramper> `func a(a, b: float)` and you are passing `(float, float)` to it?
[15:01:10] *** Joins: deshordash (~textual@li2214-92.members.linode.com)
[15:02:00] *** Quits: deshordash (~textual@li2214-92.members.linode.com) (Remote host closed the connection)
[15:02:30] <fn> <11ForumUpdaterBot99> New Nimble package! sync - Useful synchronization primitives, see https://github.com/planetis-m/sync
[15:02:31] <fn> <12R2D299> 4GitHub: 7"Useful synchronization primitives."
[15:04:11] <FromDiscord> <planetis> How do I check this\: https://gist.github.com/planetis-m/42b675403212e018b5b9c9cc2378dffc does or doesn't make an huge copy
[15:05:33] <FromDiscord> <richard stallmen(crazy GNU guy)> sent a code paste, see https://play.nim-lang.org/#ix=3rsL
[15:08:14] <PMunch> @planetis, I guess you could use getOccupiedMem in strategic places
[15:09:54] <FromDiscord> <planetis> i mean how to make sure it doesn't create a X in the stack and then copyMem to the allocated space
[15:09:59] <FromDiscord> <richard stallmen(crazy GNU guy)> i did define it
[15:10:43] <FromDiscord> <richard stallmen(crazy GNU guy)> var↵         Farenheit: float32
[15:13:05] <FromDiscord> <planetis> wait my stack size is 8MB. so if it did, it should crash
[15:18:12] <FromDiscord> <planetis> yep slightly changing it to use a temp causes segmentation fault
[15:18:22] <FromDiscord> <planetis> so nim has inplace
[15:20:36] <FromDiscord> <planetis> myth busted
[15:21:21] *** Quits: max22- (~maxime@2a01cb088335980042c1465b0d8df57f.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[15:37:35] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[15:37:37] <FromDiscord> <stu002> In reply to @haxscramper "`func a(a, b: float)`": The context of the error is at https://gitlab.com/-/snippets/2142177
[15:38:06] <FromDiscord> <stu002> (edit) "In reply to @haxscramper "`func a(a, b: float)`": The context of the error is at https://gitlab.com/-/snippets/2142177 ... " 03added "Please excuse probably non-idiomatic Nim"
[15:39:26] *** Joins: jkl (~jkl@user/jkl)
[15:49:52] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[15:50:43] *** Joins: jkl (~jkl@user/jkl)
[15:51:19] <FromDiscord> <planetis> old style concepts are afaik going to be removed
[15:56:34] <FromDiscord> <haxscramper> In reply to @stu002 "The context of the": Which line at least gives the error?
[15:56:50] <FromDiscord> <haxscramper> Reproducible example would be better
[15:58:13] <FromDiscord> <haxscramper> This gives the same error https://play.nim-lang.org/#ix=3rsV
[15:59:33] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rsW
[16:05:52] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[16:07:54] *** Quits: MightyJoe (~joe@201.159.96.13) (Ping timeout: 268 seconds)
[16:09:30] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[17:12:07] <PMunch> Ah bummer, NiGui doesn't have mouse move events?
[17:12:43] *** Joins: SebastianM (~seba@user/sebastianm)
[17:14:30] <PMunch> What do the cool kids use in Nim nowadays for UIs?
[17:17:21] *** Joins: max22- (~maxime@2a01cb08833598000315bd9d36977a1f.ipv6.abo.wanadoo.fr)
[17:25:25] <PMunch> Hmm, the integer/float remainder system that @impox is using in his talk is interesting indeed
[17:25:33] <PMunch> Definitely should have its own writeup
[17:25:54] <ozzz_> I try to use NiGui. I'm old to be young lol, maybe that's why I not found that limitation :)
[17:26:24] <PMunch> Well I'm trying to do something a bit out of the ordinary
[17:26:35] <PMunch> Definitely seems a lot more useable than last time I looked at it
[17:26:54] <ozzz_> It works definitely
[17:27:13] <PMunch> But I want to create a small graph with moveable nodes as part of my program, and I need some mouse move event to move the nodes around in the graph
[17:27:31] <ozzz_> Sounds interesting
[17:27:54] <ozzz_> I'm doing image generation too
[17:28:10] <ozzz_> XY graph, non inetractive
[17:29:43] *** Quits: max22- (~maxime@2a01cb08833598000315bd9d36977a1f.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[17:30:15] <PMunch> Oh cool, what're you using it for?
[17:31:25] <ozzz_> I not finished it yet, but in plans to integrate libjpeg or libpng
[17:32:00] <ozzz_> It should be small triode calculator, with frequency response graphs
[17:32:08] <PMunch> There is an example in NiGui on how to save PNG images from an internal image
[17:32:28] <PMunch> Oh cool
[17:32:52] <ozzz_> yeah, I tested that. Not very fan of tmp folders
[17:33:27] <ozzz_> Unfortunately nigui don't has methods to work with ram
[17:35:10] *** Joins: rockcavera (~rc@192.12.112.205)
[17:35:10] *** Quits: rockcavera (~rc@192.12.112.205) (Changing host)
[17:35:10] *** Joins: rockcavera (~rc@user/rockcavera)
[17:41:22] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[17:50:04] <FromDiscord> <juan_carlos> I dont know who created it, but thanks for creating `importutils.privateAccess` is very useful.  :)
[17:56:48] <FromDiscord> <konsumlamm> it was timothee
[17:57:49] *** Joins: Vladar (~Vladar@46.162.2.53)
[18:25:32] <FromDiscord> <dom96> In reply to @juan_carlos "I dont know who": what is it? 😮
[18:26:05] <FromDiscord> <pietroppeter> how do you use the strdefine in nimscript? an option like --d:myVar=myval how does it translate with the switch syntax?
[18:27:11] <FromDiscord> <pietroppeter> (for the record switch("d:myVar", "myVal") does not work
[18:27:30] <FromDiscord> <pietroppeter> and I cannot find clues in docs: https://nim-lang.org/docs/nims.html
[18:29:52] <FromDiscord> <dom96> https://github.com/nim-lang/Nim/blob/devel/lib/std/importutils.nim#L23
[18:29:53] <FromDiscord> <dom96> cool
[18:30:48] <FromDiscord> <dom96> @timotheecour your contributions are appreciated 🙂
[18:30:59] <FromDiscord> <haxscramper> In reply to @pietroppeter "and I cannot find": Have you tried `switch("d", "myVar=myVal")`
[18:31:02] <FromDiscord> <haxscramper> (edit) ""myVar=myVal")`" => ""myVar=myVal")`?"
[18:33:06] *** Joins: max22- (~maxime@2a01cb0883359800ca7da887f4a4b6cc.ipv6.abo.wanadoo.fr)
[18:35:44] <FromDiscord> <pietroppeter> tried now, it does not throw error but it does not work
[18:36:44] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:36:55] <FromDiscord> <pietroppeter> wait on a smaller test it works
[18:37:03] <FromDiscord> <pietroppeter> I will try again
[18:37:56] <FromDiscord> <pietroppeter> yeah, it works, thanks!
[18:56:52] <FromDiscord> <aleclarson> is there a built-in proc for type assertion? ideally one that narrows the type of the variable it receives to avoid compiler warnings after the assertion
[18:58:06] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3rtD
[18:59:03] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3rtE
[18:59:36] <FromDiscord> <aleclarson> i'm doing dynamic dispatch, so overloads are not an option
[19:02:30] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[19:03:39] *** Joins: xet7 (~xet7@user/xet7)
[19:05:48] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[19:07:13] *** Joins: xet7 (~xet7@user/xet7)
[19:16:44] <fn> <10bung99> why not use generic type?
[19:17:03] <fn> <10bung99> proc foo[T](arg:T)
[19:17:45] <FromDiscord> <aleclarson> the idea is to raise an error if an invalid type is passed
[19:18:37] <FromDiscord> <aleclarson> even if i used a generic type, wouldn't any procs i pass the generic variable to still need to have overloads for each possible type?
[19:21:18] <fn> <10bung99> maybe try template with typed arg I think
[19:22:00] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rtH
[19:22:16] <FromDiscord> <haxscramper> `import std/[macros]` is required for `{.error` IIRC
[19:24:46] <FromDiscord> <aleclarson> i'm looking for a runtime typecheck that also changes the type of the variable in lines following the typecheck. i think the `is` operator is what i want, but not sure
[19:25:04] <FromDiscord> <aleclarson> (edit) "i'm looking for a runtime typecheck that also changes the type of the variable in lines following the typecheck. i think the `is` operator ... is" 03added "combined with `if` statement"
[19:30:47] <FromDiscord> <haxscramper> nim is statically typed language, you would need to box all types
[19:31:14] <FromDiscord> <aleclarson> i am \:)
[19:31:16] <FromDiscord> <haxscramper> `is` runs at compile-time regardless of whether you use `when` or `if`
[19:31:29] <FromDiscord> <aleclarson> oh interesting
[19:31:33] <FromDiscord> <haxscramper> `argOfBoxedType is int` wont' work
[19:31:50] <FromDiscord> <aleclarson> but using ref objects, it will?
[19:31:51] <FromDiscord> <haxscramper> And you can't overload `is` - https://nim-lang.org/docs/manual.html#procedures-nonoverloadable-builtins
[19:32:02] <FromDiscord> <haxscramper> In reply to @aleclarson "but using ref objects,": no, is runs at compile-time
[19:32:08] <FromDiscord> <haxscramper> for ref objects you can use `of`
[19:32:20] <FromDiscord> <aleclarson> ah ok, thanks a lot
[19:32:27] <FromDiscord> <haxscramper> for boxed variants (recommended solution) you can use `.kind in {expectedKinds}`
[19:33:31] <FromDiscord> <aleclarson> hmm it says `"of" takes object types` when i try using a `ref object` type with it
[19:33:59] <FromDiscord> <haxscramper> can you show error&code?
[19:34:12] <FromDiscord> <haxscramper> `value of Type`
[19:34:40] <FromDiscord> <haxscramper> What is your use case btw?
[19:35:08] <FromDiscord> <aleclarson> https://play.nim-lang.org/#ix=3rtV
[19:36:41] <FromDiscord> <aleclarson> In reply to @haxscramper "What is your use": i have a `Table[string, proc (arg: Box): Box]` where each proc may require different arguments, so they need to do runtime type-checking
[19:37:00] <FromDiscord> <haxscramper> `proc Foo = ref object of RootObj`?
[19:37:51] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rtY
[19:38:11] <FromDiscord> <aleclarson> oops, my bad. lemme see if i can repro it correctly
[19:38:16] <FromDiscord> <haxscramper> In reply to @aleclarson "i have a `Table[string,": I would suggest you use variant for boxing
[19:38:39] <FromDiscord> <haxscramper> like this https://nim-lang.org/docs/macros.html#the-ast-in-nim
[19:38:45] <FromDiscord> <aleclarson> i don't like object variants for this use case, because variants can't share the same property name
[19:39:04] <FromDiscord> <aleclarson> how's it better?
[19:39:17] <FromDiscord> <haxscramper> aside from property names?
[19:39:43] <FromDiscord> <haxscramper> I hope we get #368 implemented this year
[19:41:40] *** Joins: vicfred (~vicfred@user/vicfred)
[19:42:11] <FromDiscord> <aleclarson> i mean, why do u suggest object variants instead of inheritance
[19:42:59] <FromDiscord> <haxscramper> it is faster, easier to reason about (no need to have dozens of separate types for couple shared fields)
[19:43:33] <FromDiscord> <haxscramper> The argument of shared fields only useful when you have inheritance graph of depth 3 or more, otherwise putting shared fields on top would give you the same object size
[19:44:01] <FromDiscord> <haxscramper> You can check for sets of object variants, while for inheritance you require `of ... or of ...` checks
[19:44:17] <FromDiscord> <haxscramper> While inheritance does work with pattern matching it is an ugly solution
[19:44:58] <FromDiscord> <haxscramper> inheritance almost always requires `ref`, while variant types can be by-value (store on stack, no need for heap alocations etc).
[19:45:25] <FromDiscord> <haxscramper> `case` statically checks that all variants are handled, where with `of` check you are left on your own
[19:46:54] <FromDiscord> <haxscramper> I'm sure there is more, but that's main points that are usually important for me for choosing variants vs inheritance
[19:47:14] <FromDiscord> <haxscramper> I've rarely seen inheritance used, and I don't think I've ever seen it used for boxing
[19:47:46] <FromDiscord> <haxscramper> RTTI works only on refc gc, but not on arc/orc. Though I'm not really sure about that part, maybe I'm wrong here
[19:49:02] <FromDiscord> <haxscramper> In reply to @haxscramper "You can check for": Also using variants allows you to have an `array[BoxKind, T]` that is extremly conventient for any sort of mappings, while with inheritance you would need to rely on
[19:49:25] <FromDiscord> <haxscramper> idk what, but I doubt it is as concise and cheap as `array` mappings
[19:49:38] <FromDiscord> <haxscramper> which are as cheap as you can possibly get to begin with
[19:49:58] <FromDiscord> <konsumlamm> note that Nim doesn't support variance annotations (eventhough the experimental docs mention it afaik)
[19:50:04] <FromDiscord> <konsumlamm> (edit) 
[19:54:53] <FromDiscord> <aleclarson> interesting points, thx
[19:57:24] <FromDiscord> <aleclarson> any idea why this template fails? https://play.nim-lang.org/#ix=3ru0
[19:58:32] <FromDiscord> <haxscramper> `proc (arg {.inject.}: string): void =` https://nim-lang.org/docs/manual.html#templates-hygiene-in-templates
[19:58:53] <FromDiscord> <aleclarson> ahh very nice ^^
[20:01:53] <FromDiscord> <aleclarson> `of` doesn't seem to actually change the variable type within the `if` statement. how come?↵https://play.nim-lang.org/#ix=3ru2
[20:02:51] <FromDiscord> <aleclarson> oh i forgot to export the property, but it's still not working
[20:06:07] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[20:06:45] <FromDiscord> <haxscramper> In reply to @aleclarson "`of` doesn't seem to": Why should it?
[20:07:07] <FromDiscord> <haxscramper> `if` checks for object runtime type, that's all
[20:07:10] <FromDiscord> <haxscramper> (edit) "`if`" => "`of`"
[20:07:47] *** Joins: xet7 (~xet7@user/xet7)
[20:08:04] <FromDiscord> <aleclarson> i don't see the point of `of` if it doesn't let me access a subtype's property \:S
[20:08:59] <FromDiscord> <aleclarson> so the only workaround is casting inside the if block?
[20:09:30] <FromDiscord> <haxscramper> it is not "workaround". The point of `of` is to check object runtime type
[20:09:53] <FromDiscord> <haxscramper> No additional flow analysis is performed to implicitly convert types
[20:10:41] <FromDiscord> <haxscramper> If you need to tread supertype as a subtype, you can do `Subtype(ident).myField` to access subtype fields
[20:21:46] <FromDiscord> <Zoom> To clarify, currently I use `spawn`, but I'd like the thread to get reaped for me without passing any messages. Will it work?
[20:22:03] *** Joins: arkurious (~arkurious@user/arkurious)
[20:34:27] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3rug
[20:35:10] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3ruh
[20:35:13] <FromDiscord> <aleclarson> (edit) 
[20:36:23] <FromDiscord> <haxscramper> I don't really understand how it is supposed to work, but looks like this would not be possible
[20:40:09] <FromDiscord> <aleclarson> is it possible to have a forward declaration for an `object` type?
[20:41:33] <FromDiscord> <timotheecour> https://nim-lang.github.io/Nim/manual_experimental.html#package-level-objects but it's probably gonna be replaced by something better
[20:43:30] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3ruk
[20:44:38] <FromDiscord> <aleclarson> In reply to @timotheecour "https://nim-lang.github.io/Nim/manual_experimental.": what if they're in the same package
[20:44:58] <FromDiscord> <aleclarson> (edit) "package" => "file"
[20:45:47] <FromDiscord> <timotheecour> In reply to @aleclarson "can i "spread" the": no, use a macro for that (which is a more flexible design than hard-coding some spread syntax)
[20:46:23] <FromDiscord> <timotheecour> In reply to @aleclarson "what if they're in": try it and let us know ; i'd (lightly) expect it to wok
[20:46:25] <FromDiscord> <timotheecour> (edit) "wok" => "work"
[20:50:17] <FromDiscord> <aleclarson> the docs aren't clear on whether an {.experimental.} pragma is required for package-level objects
[20:51:38] <FromDiscord> <timotheecour> PR's welcome to improve docs; IIRC it's not needed, but IMO should be
[20:51:51] <FromDiscord> <Zoom> K, thanks, seems I need to add message consuming to a thread just to kill it \:/
[20:54:12] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3ruo
[20:54:15] *** Joins: leehbi (~leehbi@host109-154-57-112.range109-154.btcentralplus.com)
[20:57:20] <FromDiscord> <timotheecour> you're using it wrong though
[20:58:07] <FromDiscord> <aleclarson> tried with `type Pack.A = object` but got "unknown package name"
[20:58:21] <FromDiscord> <aleclarson> where Pack.nim is the filename
[21:00:07] <FromDiscord> <aleclarson> i'm not using devel branch, so that may be the problem
[21:00:40] <FromDiscord> <timotheecour> see tests/package_level_objects/
[21:01:09] <FromDiscord> <timotheecour> it doesn't need devel, it's been there for a while.
[21:02:26] <FromDiscord> <aleclarson> does the `.nimble` file need to be in the same directory, or will it be found in parent directory?
[21:02:48] <FromDiscord> <timotheecour> parent should be ok; again, PR's very welcome to improve docs
[21:13:19] <FromDiscord> <timotheecour> sent a code paste, see https://play.nim-lang.org/#ix=3rus
[21:13:28] <FromDiscord> <timotheecour> (edit) "https://play.nim-lang.org/#ix=3rus" => "https://play.nim-lang.org/#ix=3rut"
[21:13:52] <FromDiscord> <timotheecour> (edit) "https://play.nim-lang.org/#ix=3rut" => "https://play.nim-lang.org/#ix=3ruu"
[21:15:42] <FromDiscord> <haxscramper> https://botwars.io/Language/Details/nim was linked in the tg chat, maybe someone would find it interesting
[21:15:47] <FromDiscord> <haxscramper> It has nim support
[21:18:29] <fn> <06Prestige99> huh interesting
[21:28:56] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3ruA
[21:29:07] <FromDiscord> <aleclarson> (edit) "https://play.nim-lang.org/#ix=3ruA" => "https://play.nim-lang.org/#ix=3ruB"
[21:29:13] <FromDiscord> <haxscramper> common approach is to put multiple objects in single type section
[21:29:38] <FromDiscord> <aleclarson> ya i'm not a fan \:)
[21:29:44] <FromDiscord> <haxscramper> Why?
[21:29:58] <FromDiscord> <aleclarson> no logical reason, lol
[21:30:54] <FromDiscord> <haxscramper> Well, whatever, but you are trying to use experimental and probably-going-to-be-deprecated feature over recommended approach
[21:31:45] <FromDiscord> <aleclarson> you're referring to package-level objects? are you saying types within the same "type section" can reference each no problem?
[21:31:54] <FromDiscord> <aleclarson> (edit) "you're referring to package-level objects? are you saying types within the same "type section" can reference each ... no" 03added "other,"
[21:32:05] <FromDiscord> <haxscramper> https://nim-lang.org/docs/manual.html#type-sections
[21:32:15] <FromDiscord> <haxscramper> > Type definitions can be recursive or even mutually recursive. Mutually recursive types are only possible within a single type section.
[21:33:06] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3ruD
[21:33:08] <FromDiscord> <aleclarson> kinda strange it doesn't work between type sections, but thanks for blowing my mind
[21:33:58] <FromDiscord> <haxscramper> For it to work between type sections, we would have to either implement C-like forward declarations (that's that `{.package.}` does mostly)
[21:34:21] <FromDiscord> <haxscramper> But in overwhelming majority of use cases you can save yourself trouble and just put things in `type` section
[21:34:39] <FromDiscord> <aleclarson> I'm a fan of the typescript approach, where order of types does not matter \:P
[21:34:49] <FromDiscord> <haxscramper> MAJOR pain to wrap forward-declared C types though, but that's another story
[21:35:21] <FromDiscord> <aleclarson> (edit) "does not matter" => "never matters"
[21:37:40] <fn> <11ForumUpdaterBot99> New post on r/nim by RattleyCooper: Why does nim hate underscores?, see https://reddit.com/r/nim/comments/oacjbs/why_does_nim_hate_underscores/
[21:46:37] <FromDiscord> <timotheecour> sent a long message, see http://ix.io/3ruJ
[21:47:13] <FromDiscord> <timotheecour> (edit) "http://ix.io/3ruJ" => "http://ix.io/3ruK"
[21:49:17] *** Quits: leehbi (~leehbi@host109-154-57-112.range109-154.btcentralplus.com) (Remote host closed the connection)
[21:49:46] *** Joins: leehbi (~leehbi@host109-154-57-112.range109-154.btcentralplus.com)
[21:51:37] <FromDiscord> <aleclarson> yeah that was before i knew that type sections allowed that \:)
[21:54:47] *** Quits: leehbi (~leehbi@host109-154-57-112.range109-154.btcentralplus.com) (Ping timeout: 268 seconds)
[23:48:06] <fn> <11ForumUpdaterBot99> New thread by Niminem: How to get Name and Value from Variable for macro/template, see https://forum.nim-lang.org/t/8172
