[00:29:49] <hayley> https://www.youtube.com/watch?v=ZzOj9TSlOb8
[00:29:50] -ixelp- When Do I Get to Sing "My Way" (2019 - Remaster) - YouTube
[00:40:24] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[00:40:38] *** Quits: X-Scale (~ARM@83.223.249.106) (Ping timeout: 260 seconds)
[00:41:50] *** X-Scale` is now known as X-Scale
[00:42:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c1d7:63de:66b3:4892) (Quit: Leaving)
[00:44:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ff5a:fb87:fc33:be7c)
[01:00:25] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 256 seconds)
[01:07:32] <hayley> Has anyone computed entropy for finding digits and punctuation in text? You can read about entropy per letter, but that wouldn't suffice.
[01:16:27] <selwyn> in english language text?
[01:16:32] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 240 seconds)
[01:16:46] *** Joins: X-Scale` (~ARM@31.22.202.54)
[01:17:22] <hayley> Ideally I'd cover all of Unicode with some half-useful estimate.
[01:17:31] <selwyn> https://github.com/Chobbes/org-chef org-mode really does have it all
[01:17:32] -ixelp- GitHub - Chobbes/org-chef: A package for making a cookbook and managing recipes with org-mode.
[01:18:46] *** X-Scale` is now known as X-Scale
[01:19:09] <hayley> It'd be more daft to gather probabilities from actual data, but it could go terribly wrong, since there are a lot of characters to consider.
[01:19:19] <selwyn> hm, well i don't know if entropy across all languages is a useful measure
[01:19:50] <selwyn> how else would you go about it without inferring probabilities from data?
[01:20:41] <selwyn> theres probably some clever bayesian way of inferring the 'best' probabilities over a very large (unicode-sized) set
[01:21:01] <hayley> Yeah, it wouldn't make sense to compute them all.
[01:21:28] <selwyn> i wonder how the dotless i would fare not to mention more exotic characters
[01:22:10] <selwyn> what you consider as punctuation is probably culturally dependent too
[01:22:24] <selwyn> actually, it definitely is
[01:22:39] <selwyn> uzbek language uses an apostrophe to indicate rounding of the letter o iirc
[01:23:00] <selwyn> which means you can't distinguish punctuation from non-punctuation algorithmically
[01:23:20] <hayley> I guess I would need the client to provide some model. But I don't want to be, say, optimizing to search for a digit in a log which has a terrible hit rate for such a guess.
[01:23:39] <selwyn> oh i see
[01:23:48] *** Joins: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394)
[01:23:52] <selwyn> i should have guessed regex was the application :)
[01:24:23] <hayley> e.g. a line might look like [2021-11-22T11:22:33] Doing blablabla on 127.0.0.1/24
[01:25:07] <hayley> and I want to search for subnets. If you guess that a digit is a good prefix, you are wrong, because every line has a whole bunch of digits too.
[01:25:16] <selwyn> https://en.wikipedia.org/wiki/Uzbek_alphabet#Distinct_characters the culprit
[01:25:25] <selwyn> seems they might reform it out of existence
[01:25:39] <selwyn> hayley: i see
[01:26:17] <hayley> In a real log, subnets only make up about 5% of the digits, so it's a terrible heuristic.
[01:26:44] <hayley> And then my stupid DFA simulator goes about twice as fast as Hyperscan there.
[01:27:48] <selwyn> would be amusing to use benfords law
[01:28:02] <shka> hayley: so you want to extrapolate this from data?
[01:28:02] <selwyn> don't think its a good idea though
[01:29:06] <shka> This was published by Shannon in his landmark article.
[01:29:12] <hayley> shka: Maybe. I tried another RE with a better prefix (looking for resolutions in quotes from Xorg.log, e.g. "1024x768" with quotes) and I still came out a bit faster.
[01:29:20] <selwyn> uh
[01:29:23] *** Joins: pjb (~pjb@user/pjb)
[01:29:36] <shka> hayley: https://people.math.harvard.edu/~ctm/home/text/others/shannon/entropy/entropy.pdf
[01:29:38] <hayley> So it's also possible that I just have a better DFA simulator, who knows.
[01:29:41] <shka> 1948 vintage
[01:29:49] <selwyn> shannon is one of my heroes
[01:30:11] <shka> THE SERIES OF APPROXIMATIONS TO ENGLISH
[01:30:18] <shka> 7 page
[01:30:36] <shka> selwyn: yeah, Shannon essentially invented information theory
[01:30:51] <selwyn> my first specialty was in quantum shannon theory
[01:31:21] <selwyn> i like shannon not only for his intellectual achievements but he seemed to have a very good life
[01:31:51] <selwyn> always inventing things and having fun
[01:32:36] <selwyn> his work has such a 'why didn't i think of that' factor
[01:33:10] <selwyn> how do you think of this stuff when you are in the 1930s fixing vacuum tubes or sth
[01:33:21] <selwyn> well, ok, 1940s
[01:33:39] <shka> heh, not so many tubes in the 30s
[01:33:49] <selwyn> right
[01:34:09] <selwyn> have you read 'ubik'?
[01:34:23] <shka> obviously
[01:34:35] <shka> i think that I read everything from P.K. Dick
[01:34:43] <shka> some of it multiple times
[01:35:10] <selwyn> tfw my radio regresses to 1939 and i can't fix it anymore
[01:35:32] <shka> heh, where is that spray when you need one 
[01:44:45] <selwyn> ridiculous that my plan to organise recipes in org-mode needs literally no additional work on my part
[01:48:12] <selwyn> did you read any of his compiled correspondence
[01:48:14] <selwyn> ?
[01:48:18] <selwyn> vadis or sth like that
[01:49:07] * hayley still thinks all the fast regex engines are fast when the input is just a constant string or an alternation between constant strings.
[01:49:13] <shka> how many execution ports on ryzen?
[01:49:54] <hayley> https://en.wikichip.org/wiki/amd/microarchitectures/zen#Execution_Engine
[01:49:54] <sham1> Well of course. Checking constants is wuick
[01:50:07] <hayley> Those sure are execution units I guess 
[01:52:01] *** Quits: dra (~dra@2a04:4540:6413:d500:cc20:68a7:2f44:5329) (Quit: Leaving)
[01:52:54] <shka> i've just spent like 5 hours breaking dependency chains in statistical-learnings
[01:53:48] <hayley> sham1: I guess, but then it's a fast strstr/SEARCH with a slow DFA/NFA interpreter tacked on.
[01:53:53] <shka> so now i have this kind of crap in the source code https://github.com/sirherrbatka/statistical-learning/blob/f5723d0e1c03d2fddcad520f2040233c3a7211fb/source/tree-protocol/methods.lisp#L389
[01:53:54] -ixelp- statistical-learning/methods.lisp at f5723d0e1c03d2fddcad520f2040233c3a7211fb ¬∑ sirherrbatka/statistical-learning ¬∑ GitH [...]
[01:54:06] <shka> and sure it is faster
[01:54:22] <shka> but by not as much as you would think
[01:55:11] <shka> i've just ran smaller benchmark with simply sum of elements in the array
[01:55:42] <shka> and it seems to be consistent with what i am getting out of statistical learning
[01:57:12] <shka> which is to say, runtime reduction to about of 80%
[01:57:40] <shka> nothing to scuff about, but i expected more
[02:01:11] <moon-child> 'Distributed systems require more complexity, because in addition to having to be synchronized, an object must also be localized, and any references to this object which come from places far away from its location will be quite expensive.  Although schemes have been described which enable mutable objects to be replicated in many places, these schemes are complicated and expensive; therefore, we
[02:01:12] <moon-child> will consider only models in which each mutable object has but one location.'
[02:01:18] <moon-child> tbf, that was written only one year after paxos
[02:10:42] <shka> hayley: yeah, so the thing is, double-floats fill up that pipeline real quick
[02:11:43] <hayley> üÖøÔ∏èaxos
[02:12:01] <hayley> üÖ±Ô∏èaft
[02:16:19] <shka> ok kids, just assume that zen can do two double float operations at a time 
[02:17:09] <shka> it seems to be more or less true
[02:17:11] <moon-child> zen2 ftw
[02:18:50] <shka> i may consider swapping types in statistical learning to single-float actually 
[02:19:20] <hayley> sb-simd goes brrr
[02:19:36] <shka> eh, i don't want to maintain that
[02:19:51] <shka> if there would be some kind of trivial-simd
[02:21:32] <selwyn> isn't there sth like that already
[02:24:10] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 260 seconds)
[02:26:33] <hayley> There was cl-simd but that bit rotted.
[02:27:19] <hayley> It's not like any other compilers know SIMD at the moment. And I had separated the SIMD from other logic in the SICL linear probing hash table, which was carried into 42nd-at-threadmill.
[02:33:45] *** Joins: pjb (~pjb@user/pjb)
[02:38:45] * hayley has been Gilad Bracha approved
[02:43:57] <Gnuxie> ‚úîÔ∏è
[03:01:19] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 250 seconds)
[03:16:04] *** Joins: pjb (~pjb@user/pjb)
[03:36:22] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[03:55:08] <gilberth> Who needs GC? Fenichel/Yochelson says: "With the coming of virtual-memory systems, the problem of limited addressable space is hardly present. In MULTICS, for example, a LISP system might be made to operate with a potential free-storage list of billions of LISP cells. Such a system may run almost endlessly with no need for garbage-collection."
[03:55:27] <gilberth> However they add: "As operation proceeds, however, performance degrades. This is because the active-list-storage becomes spread over a larger and larger region of virtual storage, and it becomes increasingly likely t h a t¬† a given reference to this virtual memory will require a reference to secondary storage."
[03:55:43] <gilberth> [A LISP Garbage-Collector for Virtual-Memory Computer Systems; Fenichel/Yochelson; 1969]
[03:56:09] <gilberth> So the concern was with non-locality, not with limited space. Explains why the CADR has its GC off by default.
[03:57:26] <gilberth> I find this curious, because the whole CADR design was about optimizing use of space, not of cycles.
[03:58:15] <hayley> Okay, I found a regular expression Hyperscan is good at. Hint: there is no Kleene star involved, so no state machine.
[03:59:04] <gilberth> hayley: A glorified string matcher?
[03:59:16] <hayley> Yes.
[03:59:49] <gilberth> That's poor.
[04:00:03] <hayley> It's 6√ó faster at searching for \((WW)|(EE)\) in my /var/log/Xorg.0.log, and it uses 1/30 the number of branches.
[04:00:06] * hayley suspects AVX
[04:03:13] <gilberth> I wonder if people then really perceived the virtual memory as practically infinite?
[04:03:29] * hayley loads sb-simd and gets another assembler error.
[04:03:32] <hayley> Time to upgrade...again.
[04:04:44] <hayley> VMOVMSKPS, my mortal enemy.
[04:10:22] <moon-child> gilberth: 't h a t' love the old-style attempts at justification
[04:10:33] <selwyn> a e s t h e t i c
[04:10:45] <hayley> (format nil "~A" "aesthetic")
[04:11:53] * hayley spots that SBCL is trying to determine XMM-SIZE of RDX finally.
[04:13:18] <gilberth> moon-child: That is an OCR glitch. The printed version has that "that" looking like any other.
[04:13:46] <hayley> I think the code generator is trying to figure out the L bit in the VEX prefix based on the destination, when it's only the target that is a XMM/YMM register.
[04:14:30] <moon-child> hayley: do you know of anything I can read aside from hennessy&patterson that talks about modern cache coherence protocols?
[04:17:21] <hayley> Have you read Drepper's "What every programmer should know about memory"?
[04:19:03] <hayley> Hm, I think I fixed it, but I'd have to check disassembly after SB-SIMD builds.
[04:20:21] <moon-child> ah!  I put that in my 'to read' directory a while ago and promptly forgot about it.  Thanks!
[04:20:44] <hayley> "The value #<SB-X86-64-ASM::EA  base=#<SB-C:TN t1[RDX(d)] :NORMAL> index=#<SB-C:TN t2[RDI(a)] :NORMAL> scale=2 disp=1> is not of type SB-X86-64-ASM::REG"
[04:28:06] * hayley merges patches to src/compiler/x86-64/avx2-insts.lisp by hand, cause she can't be bugged to upgrade to SBCL 2.1.10
[04:29:33] <hayley> Nope, I broke the assembly for F32.8-MOVEMASK. Time to upgrade.
[04:30:09] <selwyn> https://www.lse.ac.uk/News/Latest-news-from-LSE/2021/k-November-21/Octopuses-crabs-and-lobsters-welfare-protection
[04:30:10] -ixelp- Octopuses, crabs and lobsters to be recognised as sentient beings under UK law following LSE report findings
[04:30:14] <selwyn> crab bullying to be banned
[04:31:03] <hayley> Play https://www.youtube.com/watch?v=8TEAMHgrxi0 before it's illegal
[04:31:03] -ixelp- JJ Burnel - Crabs - YouTube
[04:53:26] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[04:57:20] <gilberth> Why should it be illegal? Did you spot a swastika?
[05:05:32] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 240 seconds)
[05:15:53] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[05:30:32] *** Parts: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394) (Leaving)
[05:37:53] <hayley> https://www.youtube.com/watch?v=en5YRCvppIA
[05:37:53] -ixelp- King Crimson - Discipline - YouTube
[05:53:02] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[06:18:16] <mfiano> I need regex help. this is going to be tough
[06:19:34] <mfiano> Not even sure if regex is enough to handle this, or which unix utilit[y|ies] I can pipe to this output....
[06:22:16] <mfiano> hayley: How familiar with regex/grep/sed are you?
[06:22:29] <mfiano> Need some advice at least here.
[06:23:21] <hayley> mfiano: Well, I hope I learnt how to write some regex by now.
[06:24:19] <mfiano> hayley: This is the output of a command. I highlighted examples of lines I want to scrub out: 1) the packages with no messages, and 2) the packages with to "no maintainer" NOTICEs: https://gist.github.com/mfiano/604e6bc94f645469c4c61f4214d986b9#file-gistfile1-txt-L1-L64
[06:24:20] -ixelp- gist:604e6bc94f645469c4c61f4214d986b9 ¬∑ GitHub
[06:24:38] <mfiano> Any idea how to approach this. I've been trying for an hour, but my regex foo sucks
[06:24:48] <mfiano> regex-fu*
[06:24:58] * hayley uploaded an image: (73KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/JQoqCTJQRAXxHaweYLsdBBER/randall-smith.jpeg >
[06:25:35] <hayley> So you just want the actually interesting messages?
[06:25:39] <mfiano> Right
[06:25:56] <mfiano> These are post-install messages, and I want to clean it up to scan easily for things I might have overlooked from time to time
[06:26:53] <hayley> I'm not too sure. And the messages could have a line like "foobar-1.2.3.4:" which would be deleted, but it probably wouldn't happen.
[06:27:20] <mfiano> seems i need lookback and lookahead
[06:27:30] <mfiano> a complicated parser
[06:29:47] <moon-child> mfiano: any solution will have to be heuristic
[06:29:54] <moon-child> because the content of the message itself can be arbitrary
[06:30:17] <mfiano> Not really, it'd just be complicated
[06:30:36] <moon-child> hmm, one good heuristic: the packages seem to be organized alphabetically
[06:30:53] <moon-child> mfiano: how do you know that 'enchant2-2.2.15:' isn't actually just the message for package 'embree-3.13.2'?
[06:31:26] <mfiano> I'd like to search for lines with "current does not have a maintainer" and delete that line up to "Always:" and down to but not including "some-pkg-1.8.0_1:"
[06:31:47] <hayley> moon-child: Then how do you pick which to ditch in, say, A B C D F E G
[06:33:02] <mfiano> moon-child: messages always begin and end with an empty line
[06:33:32] <mfiano> err, only end :/
[06:33:51] <moon-child> mfiano: I presume that the message itself conventionally ends with a newline, and then pkg adds another one.  But the message could leave off the newline if it wanted to
[06:34:10] <moon-child> hayley: I mean, you'd have to guess.  And probably you'd be right, but no guarantees
[06:35:34] <mfiano> moon-child: This is the output of "pkg info -Da". I suppose I could just scan packages that are installed one by one, and compile the list myself.
[06:35:41] <mfiano> filtering as i go
[06:35:46] <moon-child> (And this is why I don't like in-band communication... :)
[06:37:16] <hayley> moon-child: keep going and you'll get Gilad Bracha approved
[06:39:06] <hayley> https://www.youtube.com/watch?v=uEK9oK02D1M
[06:39:06] -ixelp- The Clash - Rudie Can't Fail (Official Audio) - YouTube
[06:39:08] <moon-child> hmm, where to go from here?  Premature composition as the root of all evil?
[06:39:32] <moon-child> text as the ultimate berkleyan adequacy?
[06:41:06] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:42:35] <hayley> gilberth: I've convinced myself that arbitrary lookahead/behind can basically "fork bomb" its way out of being DFA-able; what happens if you fork off A* behind in the loop of another A* on AAAAAA.... then you would have O(n) matchers for a string of length n.
[06:43:18] <hayley> You'd have to prove that each matcher will eventually do the work of another with time in order to eliminate any.
[06:43:38] <dave0> maw
[06:44:20] <hayley> maw
[06:44:28] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[06:46:39] <hayley> https://www.youtube.com/watch?v=hFtfMtFSD8A
[06:46:39] -ixelp- 104 LED filament lamp - just because.... - YouTube
[06:49:23] *** Joins: ln43 (~ln43@user/ln43)
[06:49:49] <ln43> Good morning !
[06:50:07] <hayley> Good morning beach!
[06:51:01] <ln43> Hi all !
[06:51:27] <dave0> maw maw ln43 hayley 
[06:51:51] <ln43> good morning dave0 & hayley
[06:51:55] <hayley> Admittedly I don't see the use for arbitrary lookahead/behind. Just having one prefix RE and one suffix RE should suffice.
[06:56:26] <ln43> sorry but youtube videos are available here (http://www.extentofthejam.com/pseudo/) or not?
[07:05:55] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 256 seconds)
[07:19:03] <mfiano> moon-child: solved
[07:19:11] <mfiano> in the hackiest way possible
[07:22:46] *** Joins: humasect (~humasect@2001:1970:57e0:4100::f46f)
[07:22:56] *** Quits: humasect (~humasect@2001:1970:57e0:4100::f46f) (Remote host closed the connection)
[07:34:25] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:35:34] *** Joins: mzan (~quassel@mail.asterisell.com)
[08:03:54] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[08:12:46] *** Joins: lexi_sparks_ (~lexi_spar@user/lexi-sparks/x-9241394)
[08:12:58] *** Parts: lexi_sparks_ (~lexi_spar@user/lexi-sparks/x-9241394) ()
[08:20:44] <mfiano> Here ya go, not ideal, but works, and that's all that matters! https://gist.github.com/mfiano/7a4c1170ad85e0a0fa218b38c2dc887e
[08:20:44] -ixelp- 2.sh ¬∑ GitHub
[08:38:36] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Quit: MichaelRaskin)
[08:48:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ff5a:fb87:fc33:be7c) (Quit: Leaving)
[08:50:26] *** Joins: ln43 (~ln43@user/ln43)
[09:07:54] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 260 seconds)
[09:24:59] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[09:24:59] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[09:24:59] *** Quits: commandoline (~commandol@ubuntu/member/commandoline) (*.net *.split)
[09:25:00] *** Quits: gko (~user@user/gko) (*.net *.split)
[09:25:00] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[09:25:00] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[09:25:00] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[09:25:25] *** Joins: gko (~user@user/gko)
[09:25:29] *** Joins: commandoline (~commandol@ubuntu/member/commandoline)
[09:25:40] *** Joins: remexre (~remexre@user/remexre)
[09:26:30] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[09:26:52] *** Joins: selwyn (~selwyn@user/selwyn)
[09:28:04] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[09:30:17] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[11:05:19] <hayley> There's a song by The Stranglers with a keyboard "solo" which plays the Morse code for "SOS. This is planet Earth. We are fucked. Please advise", but I never would have noticed until one of the writers mentioned it.
[11:05:42] <hayley> Couldn't hide Morse in my writings, because I don't overuse hyphens. Apparently I overuse semicolons though.
[11:11:00] <mfiano> moon-child: Have you goten SBCL to work on FreeBSD?
[11:19:47] <hayley> https://www.youtube.com/watch?v=ViMIiqc8FRs
[11:19:47] -ixelp- Enough Time - YouTube
[11:20:55] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:28:18] <mfiano> Hmm ignore that. It does something different with the core file, causing me to do extra work for my custom core file than on Linux, but I finally got it to work.
[11:32:43] <hayley> https://twitter.com/halflife_txt/status/1441070646604271617
[11:39:12] <moon-child> mfiano: coredumpctl is the bane of my existence
[11:40:12] <mfiano> I've never heard of that
[11:40:41] <moon-child> oh, perhaps you mean something different by core file than I thought
[11:40:49] <mfiano> I mean "sbcl.core"
[11:40:59] <moon-child> coredumpctl is a systemd-associated service (I think?) that manages core dumps on linux
[11:41:02] <mfiano> as in save-lisp-and-die without :executable t
[11:41:11] * hayley is now trying to install Windows 8 in a VM so that she can find out if a friend really just ran a Discord key stealer.
[11:41:35] <mfiano> Oh huh. I'm not sure how you associated SBCL on FreeBSD with Linux :)
[11:42:05] <mfiano> systemd is the primary reason I moved to FreeBSD
[11:42:46] <mfiano> and I don't mean that the software sucks, as much as I mean its effect propagating to everything, even non-systemd distributions/software
[11:43:07] <mfiano> monolithic piece of junk ruining the unix philosophy in the interest of corporate agendas
[11:43:16] <moon-child> yes, redhattage is not great
[11:43:57] <mfiano> But other things too, like the millions of patchs google adds to the linux kernel, and just how bloated the kernel is in general
[11:44:02] <moon-child> I haven't had particularly negative experiences with systemd (though no particularly positive ones either), but pulseaudio is terrible and I don't understand how people can say 'audio on linux is good now'
[11:44:09] <moon-child> mfiano: hey, io_uring was pretty neat
[11:44:29] <moon-child> taking us closer to the shitty version of the birth and death of yavascript; but still, pretty neat
[11:44:40] <mfiano> Heh
[11:45:15] <mfiano> moon-child: Have you tried pipewire? It works on linux and bsd as a drop-in replacement for pulseaudio, and supports video too.
[11:45:25] <hayley> Audio on Linux works, though I usually go to JACK for low-latency.
[11:46:56] <moon-child> mfiano: no.  I have a half-finished rewrite of arcan's sound bits in the works, so any effort I expend sound-wise will go thattaways
[11:46:59] <mfiano> But the tight integration with ZFS into BSD and how easy it is to do things that just aren't even possible in Linux that i've always wanted sold me.
[11:48:16] <moon-child> mfiano: yeah, freebsd is a way better unix than linux
[11:48:28] * mfiano wrote a 3000-line POSIX shell script to manage snapshots, and now it's grown to the point where I will rewrite it in CL
[11:49:40] <mfiano> Well not true POSIX, as BSD /bin/sh is not POSIX compliant
[11:49:50] <moon-child> it's not?
[11:50:03] <mfiano> It is POSIX + extensions. Like, it has "local", which is a Berkeley extension.
[11:50:14] <mfiano> Read the top of `man sh`
[11:50:46] <moon-child> ah, I see
[11:51:07] <moon-child> seems like a bit of a stretch to call it noncompliant for extensions.  Like I guess reserved words and all, but still
[11:51:46] <mfiano> But since i'm only targetting FreeBSD that doesn't matter. What really sucks is the lack of arrays. You have to do ugly hacks to accumulate lists
[11:52:45] <moon-child> yeah
[11:52:56] <moon-child> (though there is always ksh/zsh/bash
[11:52:57] <moon-child> )
[11:53:13] <mfiano> Yeah, though I think csh is only in base
[11:53:20] <mfiano> I'm not familiar with its features
[11:53:51] <moon-child> I don't want to insult csh _too_ badly, in case somebody mistakenly things I hate it more than gobject
[11:53:53] <moon-child> _but_
[11:53:58] <moon-child> there is no reason to use or touch csh in 2021
[11:54:00] <moon-child> :)
[11:54:17] <mfiano> I would agree. Everytime I've hadd to use it was a wtf moment
[11:54:21] <hayley> FWIW my opinion on "sound working" or not is biased by Windows, wherein you have to install ASIO shit for low-latency audio, and it likes to periodically crap out (with a period shorter than PulseAudio).
[11:54:24] <mfiano> Never bothered to learn it though
[11:54:56] <moon-child> whenever I have had to use windows, sound has been the least of my many problems
[11:55:22] <hayley> Oh, yes, the last university I went to used csh, and disabled ^D to log out among other things.
[11:55:31] <hayley> My .cshrc(?) had one line: "exec bash"
[11:55:33] <mfiano> My original goal was to write a script that worked on base FreeBSD (no deps). That has since changed, but not because of how badly POSIX sh sucks, but by the sheer growth of this project...so SBCL it is
[11:56:03] <moon-child> 'FreeBSD (no deps)' lua!
[11:56:11] <mfiano> I think it's at the point to call it an application rather than a script, heh.
[11:56:48] <mfiano> lua is the bane of _my_ existence
[11:56:54] <mfiano> I really dislike that language
[11:57:57] <mfiano> Neovim plugin authors use it almost exclusively now, so considering going back to Vim.
[11:58:50] * hayley runs IE in Windows 8 in KVM and it is slow.
[11:59:07] <mfiano> It's strange. The Neovim community began writing plugins in vimscript, then Python, then node, then lua...who knows what the next trend will be. It seems that the neovim ecosystem just keeps reinventing the same libraries because of the latest language fad
[11:59:32] * mfiano does not understand it. It is a very nice editor though
[12:00:16] <shka> common lisp :-)
[12:00:30] <hayley> Prefix Lua?
[12:00:44] <mfiano> That would be Fennel
[12:01:16] <hayley> IIRC someone said it would be better than elisp.
[12:01:30] <mfiano> https://github.com/Olical/aniseed
[12:01:31] -ixelp- GitHub - Olical/aniseed: Neovim configuration and plugins in Fennel (Lisp compiled to Lua)
[12:02:15] * mfiano just uses vimscript, for portability reasons. My vimrc is huge and I might eventually stop using neovim
[12:02:59] <hayley> Do they use the "official" Lua interpreter or luajit?
[12:03:08] <mfiano> For what?
[12:03:48] <hayley> For scripting Neovim with Lua.
[12:04:40] <mfiano> 5.1, 5.2, 5.3 or Luajit
[12:05:41] <mfiano> :version
[12:05:43] <mfiano> NVIM v0.5.1
[12:05:45] <mfiano> Build type: Release
[12:05:47] <mfiano> LuaJIT 2.0.5
[12:05:52] <mfiano> thats what my :version command says anyway
[12:06:07] * hayley finally gets .NET installed or something in order to run the strace clone.
[12:07:16] <hayley> Indeed that is not a video game. Time to read the trace.
[12:07:24] <mfiano> moon-child: I only have one complaint about FreeBSD, and it's not their fault.
[12:08:27] <hayley> Seems that it installs some part of node.js, then runs tasklist...
[12:08:59] <moon-child> mfiano: I don't love lua or anything; but I have a vaguely positive impression from it.  Granted I haven't used it for anything serious
[12:09:21] <mfiano> renderdoc, which is needed for my work, only supports Windows and Linux. The developer has no interest in supporting other platforms. I use it to attach to my SBCL process to graphically debug OpenGL API calls with its GUI. Given the Linux syscalls it uses and what it actually does, I highly doubt Linux emulation will be of use here.
[12:09:32] <moon-child> hayley: what is this?  A virtual machine offering syscall instrumentations implemented atop a javascript engine implemented atop a c# engine?
[12:10:22] <moon-child> mfiano: I would guess it's just doing ioctls on card devices, and freebsd basically wholesale imports linux graphics stuff
[12:10:25] <hayley> moon-child: A friend is stupid and ran a "game" which instead stole his Discord credentials or something. So I have run it in a program called "SpyStudio" which straces the game.
[12:10:39] <moon-child> oh I see
[12:10:41] <hayley> SpyStudio is probably written in C#, and traces the program which seems to use Node.
[12:10:48] <moon-child> eesh.  fun
[12:10:50] <mfiano> moon-child: I haven't tried it yet, just guessing
[12:11:46] <mfiano> I hope to have my whole network migrated over to BSD by the end of the year, but if that doesn't work out, I'll have to leave one out.
[12:12:20] <hayley> BINGO, I saw it try to query a betterdiscord file.
[12:13:02] * hayley uploaded an image: (27KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/VKWvgNDDtYfsPJwzasUQCvCC/Screenshot_2021-11-22_19-50-40.png >
[12:19:51] <hayley> moon-child: It gets better, the stack trace I got for one operation involves WASM code.
[12:20:25] <moon-child> haha, wow
[12:20:31] <moon-child> spystudio can instrument that
[12:20:32] <moon-child> ?
[12:20:57] <hayley> Yes, it logged the stack trace for every event too.
[12:22:08] <hayley> "So, what's your solution?" "I dunno, I just went to find the problem."
[12:22:45] * hayley uploaded an image: (88KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/dDoxzFiIxmLVBWSkhLhZVBEr/Screenshot_2021-11-22_20-00-31.png >
[12:29:48] <hayley> Hey, and the JS source is stored unencrypted in the binary.
[12:30:16] <hayley> ...and there are two names left unobfuscated, which are "Infect" and "pwnBetterDiscord".
[12:30:32] * hayley wishes she still worked on her JS deobfuscation tool.
[12:32:14] * hayley uploaded an image: (34KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/deOHAgghXayfZEzVJdJOvPtN/Screenshot_2021-11-22_20-09-52.png >
[12:51:54] *** Joins: pjb (~pjb@user/pjb)
[12:58:54] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[12:59:11] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:59:16] * hayley uploaded an image: (91KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/qwyGmcpbCEmaABAlETIhELDc/Screenshot_2021-11-22_20-36-49.png >
[13:01:38] *** Joins: JSharp (sid4580@lymington.irccloud.com)
[13:01:50] *** Joins: pl (sid98063@helmsley.irccloud.com)
[13:20:46] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 245 seconds)
[14:01:24] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[14:03:37] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Remote host closed the connection)
[14:03:55] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[14:06:29] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[14:33:00] *** Quits: hayley (~theemacss@user/hayley) (Killed (platinum.libera.chat (Nickname regained by services)))
[14:39:38] *** Joins: hayley (~theemacss@user/hayley)
[14:41:35] *** Joins: random-nick (~random-ni@87.116.180.220)
[14:47:11] *** Joins: rogersm (~rogersm@90.166.177.48)
[14:50:49] <hayley> They also use Discord webhooks to collect data, so I'm now sending them some 12/10 quality yiff as a token of gratitude.
[14:59:32] <sham1> That's evil
[15:04:48] <hayley> Hey, so is stealing authentication tokens.
[15:05:33] <sham1> Yes
[15:06:37] *** Joins: X-Scale` (~ARM@31.22.202.54)
[15:08:16] *** Quits: X-Scale (~ARM@31.22.202.54) (Ping timeout: 268 seconds)
[15:08:21] *** X-Scale` is now known as X-Scale
[15:10:18] <hayley> I need to reboot my JS deobfuscator project. A fair bit is alpha-reduction (picking better variable names), beta-reduction (inlining annoying functions) and then some constant folding. But we start to want interpretation when algorithms with side effects arise.
[15:13:57] <selwyn> frankly baffled at the behaviour of my cider
[15:14:25] <selwyn> either water is somehow condensing into the airlock, or there is negative pressure in the fermentation vessel
[15:16:55] <shka> negative pressure?
[15:16:59] <shka> should be positive 
[15:17:24] <shka> so it must be the condensation 
[15:21:19] <selwyn> but what is condensing
[15:22:01] <Gnuxie> if it is negative pressure doesn't that mean the airlock is shit? 
[15:22:22] <shka> Gnuxie: fermentation is supposed to produce CO2
[15:22:23] <selwyn> the airlock is a simple bubble airlock that is clearly still functional
[15:22:29] <selwyn> oh wait
[15:22:33] <shka> which should add to the pressure 
[15:22:54] <Gnuxie> yeah but doesn't that need yeast to do an aneorobic thingo  
[15:23:31] <shka> yes, but literally there is nothing which could produce and maintain that negative pressure 
[15:23:42] <Gnuxie> oki
[15:23:46] <selwyn> its been brewing for weeks now and then suddenly appears to have stopped
[15:24:10] <selwyn> the only real failure mode of the airlock is if it gets jammed, which it hasn't
[15:24:50] <shka> ok
[15:24:56] <shka> selwyn: yeast is dead
[15:25:04] <shka> that's the thing
[15:25:24] <selwyn> :/ i don't get it
[15:25:30] <selwyn> it was faster than ever 2 days ago
[15:25:40] <selwyn> it might have had a temperature shock
[15:26:01] <shka> alcohol concentration will eventually kill the yeast
[15:26:04] <shka> that's how it works
[15:26:05] <selwyn> it's been so cold here recently
[15:26:33] <selwyn> of course but by my calculations the reaction should have lasted a lot longer
[15:26:43] <shka> oh, ok
[15:27:03] <selwyn> can move it to a warmer room
[15:27:19] <selwyn> cider is meant to prefer lower temperatures anyway
[15:27:20] <shka> yeah, perhaps not a bad idea
[15:27:28] <selwyn> though it did drop below 10 degrees recently which is bad
[15:28:01] <shka> well, yeasts are likely still alive there, just with lower metabolic rate
[15:29:39] <selwyn> yeah
[15:30:07] <selwyn> oh
[15:30:52] <selwyn> temperature change of the cider can cause it to contract much more than the vessel apparently
[15:31:20] <selwyn> causing an observed backward flow in the airlock
[15:31:45] <shka> well, as long as the airlock is tight, should not be bad
[15:33:09] <selwyn> i do have a hydrometer actually
[16:10:25] *** Joins: pjb (~pjb@user/pjb)
[16:21:19] <hayley> Would it help to inform Discord of the trojan program and of the webhook URL being used?
[16:22:30] <shka> hayley: dunno, if they use some kind of discord key, it can be deleted
[16:22:40] <shka> so i would say it is worth of try
[16:23:49] <hayley> The URL has the "guild" (server) ID and I know the rough shape of the messages being sent.
[16:25:10] <hayley> IIRC the title, "username" and something else are all "1295Scraper" and all the data is sent in a code block. Hence you could also watch for that pattern.
[16:30:17] <shka> is it possible to write branchless min in portable common lisp?
[16:32:35] <hayley> IIRC Baker's article on the quadratic equation mentioned min and max, but I forgot what it uses.
[16:35:13] <hayley> Something like https://stackoverflow.com/questions/8098146/sorting-3-numbers-without-branching/8098652 - I assume for branchfree this is all fixnums or floats?
[16:39:31] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[16:41:50] <selwyn> the ferementation already took off like a rocket
[16:41:58] <selwyn> after moving it 
[16:43:07] <selwyn> issue is that this room is probably too warm sigh
[16:43:21] <selwyn> it can negatively affect the flavour
[16:46:50] <dave0> if you have a branchless swap-if-greater or swap-if-less you can use a sorting network to sort all your numbers branch-free
[16:59:54] <selwyn> hayley: perhaps you could earn a reward from discord
[17:00:21] <selwyn> i don't think that discord is very well engineered at times
[17:01:57] <selwyn> bug bounty or sth similar
[17:06:36] <shka> hayley: ideally both, i could do that in C by multiplying with result from a<b 
[17:06:52] <shka> but i don't know if it is possible at all in CL
[17:10:38] <dave0> i only know c.. https://termbin.com/cl5y
[17:10:54] <dave0> that snippet is branch-free on godbolt
[17:13:18] <shka> yeah, something like that
[17:13:42] <shka> difficult to do in lisp because < operator returns a symbol
[17:14:17] <selwyn> use bitwise operators?
[17:14:45] <shka> won't work with floats
[17:14:49] <selwyn> oh
[17:15:11] *** Joins: ln43 (~ln43@user/ln43)
[17:18:01] <dave0> you said portable :-/ but if you can use SSE there is maxps and minps
[17:21:15] <ln43> i was reading what someone have done to have a smooth racing game on a C64
[17:22:06] <shka> sb-simd won't even load here 
[17:22:49] <shka> well whatever
[17:25:34] <ln43> is it anyone here that likes car racing games?
[17:27:43] <ln43> anyhow here is one of the first example in chronological order (more older) that i was able to find on github using js: https://github.com/onaluf/RacerJS
[17:27:43] -ixelp- GitHub - onaluf/RacerJS: A simple racing game inspired by the classic Lotus series on Amiga. This has been made for the  [...]
[17:28:10] <ln43> small, clean and i should say... a good example
[17:28:30] <ln43> 11 years old... : /
[17:28:44] <ln43> found only today ...
[17:29:52] <shka> uh, maybe i could define-vop in sbcl
[17:32:17] <shka> anybody defined his own vops in sbcl? feels daunting
[17:34:23] <ln43> is it a long task?
[17:34:37] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[17:36:02] *** Joins: minion (~minion@common-lisp.net)
[17:36:48] <shka> nah, it is probably easy if you know what you are doing
[17:37:39] <ln43> so they allow to reset camera setting from inside the game...
[17:37:54] <ln43> https://youtu.be/9tsa5UvK_qE?t=18
[17:37:55] -ixelp- F1 2020 Gameplay: NEW Cockpit Rear-View Mirror & HUD Options! iRacing Vibes! - YouTube
[17:38:46] <ln43> to be honest i found that video while i was searching for another task: add a rear view mirror 
[17:38:58] <ln43> maybe i should add another camera... i presume
[17:40:52] <ln43> shka: i don't fully know 100% what i'm doing ...
[17:41:04] <ln43> is that a problem ?
[17:49:56] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 245 seconds)
[18:17:34] <dave0> nite all
[18:17:52] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:19:42] *** Joins: Inline (~Inline@2a02:908:1252:7a80:1d47:7f49:468:ba96)
[18:46:22] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:06:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:11:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[20:13:58] *** Joins: ln43 (~ln43@user/ln43)
[20:15:16] <ln43> i was really impressed looking how this video game (vGP World - 1984) reproduced the landscapes at the border of the racing car in the old 1984... https://youtu.be/y9M_pR7rMXs?t=78
[20:15:17] -ixelp- GP World (1984 Sega) - YouTube
[20:15:24] <ln43> it's impressive for that time
[20:17:32] <shka> it would be cool if sbcl would be able to break dependency chains on its own
[20:19:00] <ln43> really i was looking before at the evolution of F1 games from 1979 to 2021 (https://www.youtube.com/watch?v=qOUP_0eMDqw)
[20:19:01] -ixelp- Evolution of F1 Games 1979-2021 - YouTube
[20:20:05] <ln43> but ok, there are wonderful games pf the past ages without all the super/computing powers of the current epoch
[20:20:13] <ln43> pf/of
[20:21:15] <ln43> and again, those landscape were so realistic and a lot before the '90...
[20:21:28] <selwyn> shka: https://pvk.ca/Blog/2014/08/16/how-to-define-new-intrinsics-in-sbcl/
[20:21:28] -ixelp- How to define new intrinsics in SBCL - Paul Khuong: some Lisp
[20:21:58] <shka> selwyn: yeah, i found this article as well, but i am giving up on this
[20:22:10] <shka> it wont make that much of a difference anyway
[20:22:29] <shka> i will take 20% I got and call it quits
[20:22:52] <selwyn> what do you mean by breaking dependency chains on its own
[20:29:10] <shka> selwyn: gcc can do that
[20:29:15] *** Joins: Catie (~user@user/catie)
[20:29:25] <shka> and if you want detailed explanation i may write example for you
[20:30:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:32:56] <shka> selwyn: https://gist.github.com/sirherrbatka/95615c50703723d03bdf49d8d36fb5d2
[20:32:57] -ixelp- gist:95615c50703723d03bdf49d8d36fb5d2 ¬∑ GitHub
[20:32:58] <shka> enjoy
[20:34:21] <shka> as you can see, sum-vector-fast is almost twice as fast as sum-vector-slow
[20:34:39] <shka> and transformation was rather simple 
[20:34:54] <selwyn> but i don't see where the dependency chains are
[20:35:12] <shka> between input and result
[20:35:59] <shka> CPU can't run summing on both FPUs at the same time, because the result of summing depends on the previous operation
[20:36:11] <shka> in slow
[20:37:01] <shka> but if you have two accumulators, sums are independent and therefore can be calculated using both FPUs
[20:37:11] <shka> which allows for quicker execution 
[20:37:53] <shka> and apparently apple m1 has 4 FPUs
[20:38:57] <shka> selwyn: i mean, you can't argue with the results, right?
[20:39:27] <selwyn> no
[20:40:48] <shka> well, anyway, we used to write code like sum-vector-fast in C as well
[20:41:09] <shka> but currently gcc/clang are both able to unroll loops on their own
[20:41:13] <shka> which is swell
[20:41:42] <selwyn> gcc can unroll a sum of consecutive integers to 1/2n (n+1)
[20:42:21] <sham1> (2n)^-1 (n+1)
[20:43:11] <sham1> or not
[20:43:26] <sham1> Damn it, ambiguous syntax. I didn't expect multiplication by juxaposition
[20:43:29] <shka> selwyn: i may simply write my own version of dotimes macro 
[20:43:41] <shka> i guess it is the simplest answer 
[20:43:47] <selwyn> yeah sorry
[20:43:55] <selwyn> fast-dotimes?
[20:45:14] <shka> well, same idea, multiple accumulators 
[20:46:49] *** Joins: vats (~vats@106.67.68.168)
[20:53:12] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 265 seconds)
[20:59:09] <shka> nah, enough for today
[21:11:01] <shka> selwyn: regardless, my small benchmark in statistical-learning went down from around 10-11 seconds to be almost always under 8 seconds
[21:11:14] <shka> as the result of micro-optimizations 
[21:11:16] <selwyn> great
[21:11:32] <shka> well, i wish sbcl would be able to do that on it's own...
[21:12:22] <shka> but at least lisp is sufficiently low level to do that on you own
[21:24:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[21:26:44] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[21:28:46] <clothespin> its morning at least for 1.5 minutes
[21:29:12] <clothespin> i''l grit my teeth and call it good
[21:44:05] *** Quits: vats (~vats@106.67.68.168) (Read error: Connection reset by peer)
[21:49:05] <gilberth> clothespin: How about you just make it good?
[21:52:27] <clothespin> it's afternoon now, i don't have to
[21:52:54] <clothespin> nuetral afternoon everyone!
[21:58:31] <gilberth> Afternoon is the perfect morning. --The Nocturnal One
[22:04:50] <edgar-rft> I could be a morning person if morning happened around noon.
[22:11:14] <gilberth> Even then I won't be a morning person. I am way more productive in the second half of my waking phase.
[22:11:25] <clothespin> there's just this period of about 2 hours after i wake up where i cannot accomplish anything
[22:12:05] <gilberth> Same here. Don't attempt to talk to me during my first two hours. Never.
[22:15:16] <edgar-rft> I'm still waiting for my productivity phase to come :-)
[22:15:38] <gilberth> For today or in life?
[22:17:02] <edgar-rft> maybe in the next century
[22:17:53] <edgar-rft> ....or in the afterlife, who knows?
[22:18:14] <gilberth> May both be the same.
[22:18:50] <edgar-rft> maybe I get reborn as a bug?
[22:19:21] <gilberth> To haunt me? Is that your destiny?
[22:25:57] <edgar-rft> only the god of bugs knows.
[22:34:07] <shka> gilberth: hi 
[22:34:23] <shka> gilberth: have you ever defined your own vops in the sbcl?
[22:37:11] <gilberth> shka: Nope. Also not with CMUCL. And besides I am not an SBCL user.
[22:37:22] <shka> ok
[22:38:16] <gilberth> I did with CCL though.
[22:38:41] <shka> right, common ancestry
[22:39:10] <gilberth> CCL and SBCL share no ancestry.
[22:39:39] <shka> really?
[22:39:52] <gilberth> I did to have a non-consing (FIND-SYMBOL (SUBSEQ string start end)).
[22:40:07] <shka> i thought that they are both descends of python
[22:40:08] <gilberth> shka: Yes, for real.
[22:40:31] <gilberth> You must mix that up with CMUCL. SBCL is a CMUCL fork.
[22:42:28] <gilberth> CCL has its roots in Machintosh Common Lisp, MCL.
[22:43:04] <gilberth> Its compiler is less sophisticated than Python.
[22:43:15] <shka> yeah, i know about that, but i thought that MCL came from the same PDP code base as CMUCL
[22:43:18] <shka> i was wrong
[22:44:32] <gilberth> You mean Spice Lisp?
[22:44:48] <shka> i don't think so
[22:45:16] <gilberth> Spice Lisp is the ancestor of CMUCL and thus of SBCL.
[22:45:34] <gilberth> And CMUCL is the ancestor of LispWorks also.
[22:45:48] <shka> i guess i mixed up LW and CCL
[22:46:22] <gilberth> However the [useless] IDE of CCL borrowed Hemlock from my portable Hemlock, I borrowed from CMUCL.
[22:46:51] <gilberth> shka: Yes, this is why I mentioned Hemlock. Both LW and CCL have it.
[22:48:10] <gilberth> I actually use Hemlock for a while with CMUCL. Way faster than Emacs.
[23:19:44] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:22:22] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[23:22:59] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:27:08] <hayley> How do I go about reporting some channel being used for malware to Discord, when their email no longer works, and the web form says I need to get a message ID somehow?
[23:35:05] <hayley> I just put in a bogus message ID.
[23:36:06] <gilberth> You have hope that they care?
[23:39:23] <hayley> It's their subscription money at risk, not mine.
[23:40:21] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[23:43:06] <hayley> https://github.com/rust-lang/team/pull/671 lol
[23:43:52] <Catie> Good lord
[23:45:10] <White_Flame> oh brother
[23:45:31] <White_Flame> I don't know the details, but this is what you get when you have way too much political infrastructure in your tech projects
[23:45:41] <gilberth> Blah blah "code of conduct [...]" /me quits reading
[23:45:46] <White_Flame> yep
[23:45:52] <White_Flame> it's just ammo for nuking the project
[23:47:32] <hayley> Would it make you feel better if they just said that the "core team" were being assholes and getting away with it?
[23:48:09] <White_Flame> that's generally what these boil down to, so yeah that would be simpler, more honest, and more straightfowards
[23:48:37] <White_Flame> people don't get along, and use all the political infrastructure of the project in order to attack each other
[23:49:32] <White_Flame> of course, since it appears to be hush-hush, not sure if that's because they're embarrassed because it does just boil down to people not liking each other, or if something Actually Bad‚Ñ¢ happened
[23:49:45] <White_Flame> but, it doesn't matter
[23:51:04] <selwyn> hayley: lmao
[23:51:43] <selwyn> what is a 'mod team' for a programming language anyway?
[23:52:29] <White_Flame> this is a very good comment: https://old.reddit.com/r/rust/comments/qzme1z/moderation_team_resignation/hlnn54d/
[23:52:29] -ixelp- bbatha comments on Moderation Team Resignation
[23:52:39] <White_Flame> as everybody is talking "for the community"
[23:52:46] <selwyn> unfortunately, i am unable to access reddit now, but will read at some point
[23:53:08] <White_Flame> "As rust is a "community" project, I as a member of the community find this very frustrating. Fundamentally community projects can only govern with the consent and trust of the governed."
[23:53:31] <White_Flame> and how trust is lost by the hush-hushness, as a member of that community
[23:54:42] <White_Flame> these people and all their massive project teams & rules never have any idea what they're doing in terms of social effectiveness
[23:54:55] <White_Flame> "Yeah. Without knowing the issues, how the hell will we know when they're fixed?"
[23:55:06] <White_Flame> Trust us, underlings, we the self-appointed have your Best Interests in min
[23:55:14] <White_Flame> +d
[23:56:32] <selwyn> would be interesting to compare this to 'attitude era' linux under torvalds
[23:57:57] <White_Flame> depends on if this is a technical issue or a personal issue
[23:58:08] <hayley> .oO(I got in a fight with this guy as I used the word "silly" rather than "absurd" once.)
[23:59:13] <White_Flame> well, that's a silly reason for a right
[23:59:14] <White_Flame> *fight
[23:59:19] <hayley> FWIW sending yiff might have convinced the authors to go into hiding, as itch.io didn't respond to my email, but the hosting page was removed.
[23:59:24] <hayley> The people that watch over the other teams?
[23:59:26] <selwyn> lol
