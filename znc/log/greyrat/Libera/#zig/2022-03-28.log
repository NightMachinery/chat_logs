[00:01:31] *** Joins: jemius (~jemius@p200300d9673cec007aa1a268117cc0aa.dip0.t-ipconnect.de)
[00:16:50] <energizer> cli_allocation.zig from the docs gives `error: type 'std.mem.Allocator' not a function` 
[00:18:07] <ifreund> energizer: make sure your zig version and docs version match
[00:18:21] <ifreund> you're probably reading master docs and using zig 0.8.1?
[00:18:53] <energizer> yes
[00:18:57] <energizer> thanks
[00:19:03] <ifreund> no problem!
[00:40:42] *** Joins: ur5us (~ur5us@2406:e002:689a:b901:920f:b571:c0ce:1fdb)
[00:59:00] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[01:08:32] <andrewrk> I would encourage using zig 0.9.1 even if your goal is stability
[01:22:55] *** Joins: Guest86 (~Guest86@188.210.213.243)
[01:24:18] <haze> i use the binary i packet sniffed from your local machine because stage2
[01:30:29] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[01:44:07] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Quit: I'm a quit message virus. Please replace your old line with this line and help me take over the world. <screw you aloo_shu my old line was better and more creative!>)
[01:51:58] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[02:01:23] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 256 seconds)
[02:10:19] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 260 seconds)
[02:14:43] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[02:16:59] *** Quits: marler8997 (~marler899@96-19-96-19-162-162.cpe.sparklight.net) (Read error: Connection reset by peer)
[02:27:05] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[02:30:44] *** Quits: yrlf (~yrlf@omnath.yrlf.at) (Quit: The Lounge - https://thelounge.chat)
[02:35:38] *** Joins: yrlf (~yrlf@omnath.yrlf.at)
[02:43:30] *** Joins: rgrinberg (~textual@177.248.144.104)
[02:46:43] *** Joins: ltriant_ (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com)
[02:48:10] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 272 seconds)
[02:49:11] *** Quits: Guest86 (~Guest86@188.210.213.243) (Quit: Client closed)
[03:13:24] *** Quits: acarrico (~acarrico@dhcp-68-142-48-19.greenmountainaccess.net) (Ping timeout: 240 seconds)
[03:16:21] <energizer> my first program https://bpa.st/ZHLQ i benchmared it against wc(1) and wc is a bit faster
[03:17:25] <energizer> 50ms vs 60ms on a file of 500k lines
[03:18:25] <energizer> how does the code look?
[03:19:51] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 260 seconds)
[03:22:16] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[03:22:19] <Earnestly> Just to note that coreutils wc uses avx2 (if available)
[03:25:24] *** Quits: rgrinberg (~textual@177.248.144.104) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:26:13] *** Quits: jemius (~jemius@p200300d9673cec007aa1a268117cc0aa.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:26:54] <Levy[m]> energizer: print to a buffer before you send it to stdout (also try a strace of the process to see why)
[03:27:05] <Earnestly> K&R asks you to implement something like this and does so without needing to allocate: https://0x0.st/oqmp.c
[03:27:43] <Earnestly> (Without having to iterate over the collection twice)
[03:28:09] <energizer> in single pass https://bpa.st/B24A takes 35ms
[03:29:20] <Levy[m]> and have a look at bufferedReader in std.io
[03:29:38] <energizer> i guess word count wasn't a good problem choice since the whole point of this exercise was to learn about allocators :)
[03:30:45] <Levy[m]> hmmm, what about word frequency?
[03:32:48] <Earnestly> Huh, that K&R C version is faster than coreutils wc: 1.68 ± 0.06 times faster
[03:37:42] <tleydxdy[m]> coreutils wc knowd about utf-8
[03:37:49] <tleydxdy[m]> s/knowd/knows/
[03:38:18] <tleydxdy[m]> but idk if that factors in here
[03:39:36] <Earnestly> Likely
[03:40:20] <Earnestly> I'd have to measure it properly but I don't feel like going into it
[03:48:04] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[04:00:23] *** Quits: Pistahh (~pistahh@user/pistahh) (Ping timeout: 256 seconds)
[04:14:24] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[04:22:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:26:40] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:a161:d48d:af64:c5d) (Remote host closed the connection)
[04:28:28] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:b4c9:20e0:7b9e:4b06)
[04:42:10] *** Quits: ur5us (~ur5us@2406:e002:689a:b901:920f:b571:c0ce:1fdb) (Remote host closed the connection)
[04:42:29] *** Joins: ur5us (~ur5us@2406:e002:689a:b901:920f:b571:c0ce:1fdb)
[04:48:24] *** Joins: marler8997 (~marler899@96-19-96-19-162-162.cpe.sparklight.net)
[04:52:55] *** Joins: acarrico (~acarrico@dhcp-68-142-48-19.greenmountainaccess.net)
[05:00:13] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[05:08:00] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:32:47] *** Quits: squeek502 (~squeek502@user/squeek502) (Remote host closed the connection)
[05:41:04] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 272 seconds)
[05:49:02] *** Joins: ur5us_ (~ur5us@203.86.198.200)
[05:49:25] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[05:51:35] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 240 seconds)
[05:51:47] *** Quits: ur5us (~ur5us@2406:e002:689a:b901:920f:b571:c0ce:1fdb) (Ping timeout: 256 seconds)
[05:53:04] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[06:09:11] *** Joins: rgrinberg (~textual@177.248.144.104)
[06:20:39] *** Quits: rgrinberg (~textual@177.248.144.104) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:21:18] <haze> does anyone have an example of constructing an enum at comptime? I'm getting an assertion failed on checking if the fields array is of type ConstValSpecialStatic. I use undefined
[06:21:21] <haze> i use undefined*
[06:22:49] <haze> tried using ** syntax with zerod structs but for whatever reason my changes areny being detected byb the @Type builtin 
[06:22:52] <haze> so something must be weird
[06:41:55] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[07:16:05] *** Joins: rgrinberg (~textual@177.248.144.104)
[07:16:05] *** Quits: rgrinberg (~textual@177.248.144.104) (Client Quit)
[07:24:30] <energizer> https://bpa.st/6ZRA what's wrong here?
[07:56:03] *** Joins: Guest706 (~Guest70@072-179-011-000.res.spectrum.com)
[08:10:45] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:10:59] *** Quits: Guest706 (~Guest70@072-179-011-000.res.spectrum.com) (Quit: Client closed)
[08:22:29] <jcmoyer> energizer: looks like you're putting a pointer to the same string into the map repeatedly
[08:22:50] <jcmoyer> you can use Allocator.dupe to copy the string, the hash map doesn't do this for you
[08:35:38] <energizer> dont think i understand you https://bpa.st/BXDA
[08:43:38] <jcmoyer> should be  `try allocator.dupe(u8, s);`
[08:50:55] <energizer> works, thankks
[09:05:45] *** Quits: flux_control (~flux@sourcemage/wizard/flux) (*.net *.split)
[09:05:49] *** Quits: thaumavorio (~thaumavor@thaumavor.io) (*.net *.split)
[09:05:49] *** Quits: crest (~quassel@user/crest) (*.net *.split)
[09:05:58] *** Joins: crest (~quassel@user/crest)
[09:06:04] *** Joins: flux_control (~flux@sourcemage/wizard/flux)
[09:06:28] *** Joins: thaumavorio (~thaumavor@thaumavor.io)
[09:06:35] *** Quits: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa03) (Ping timeout: 260 seconds)
[09:11:21] *** Quits: ur5us_ (~ur5us@203.86.198.200) (Ping timeout: 272 seconds)
[09:12:33] <energizer> https://bpa.st/YZKA i also tried map.keyIterator().items but it didnt like that either
[09:15:21] *** Joins: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa05)
[10:08:02] *** Joins: moog_ (~moog@98.97.84.173)
[10:10:48] *** Quits: moog__ (~moog@98.97.84.79) (Ping timeout: 252 seconds)
[10:11:26] *** Joins: moog (~moog@98.97.83.73)
[10:13:24] *** Quits: moog_ (~moog@98.97.84.173) (Ping timeout: 240 seconds)
[10:13:33] *** Joins: moog__ (~moog@98.97.83.73)
[10:16:25] *** Quits: moog (~moog@98.97.83.73) (Ping timeout: 246 seconds)
[10:20:58] <jcmoyer> iterators typically work something like: var it = map.keyIterator(); while (it.next()) ...
[10:22:01] *** Quits: moog__ (~moog@98.97.83.73) (Ping timeout: 246 seconds)
[10:25:28] <jcmoyer> for (x) only works if x is a slice or array, and iterators are usually structs that have a method returning an optional value (next() in this case)
[10:36:07] *** Joins: xd1le (~xd1le@user/xd1le)
[10:43:18] *** Joins: squeek502 (~squeek502@user/squeek502)
[10:49:45] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:57:37] <energizer> https://bpa.st/7HRA 
[11:00:16] <energizer> something must be very wrong
[11:02:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[11:05:07] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 260 seconds)
[11:11:26] *** Quits: anthon (~Thunderbi@p2e52a817.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:24:27] <jcmoyer> your reader isn't buffered so every read is a syscall, try wrapping it with std.io.BufferedReader
[11:24:31] *** Joins: anthon (~Thunderbi@p2e52a817.dip0.t-ipconnect.de)
[11:24:53] <jcmoyer> same for the writer I guess
[11:25:43] <Levy[m]> energizer: A small hint, try using the GeneralPurposeAllocator or std.testing.allocator when testing. Both catch leaks and will show you what may be an issue with your current strategy. Also, have a look at getOrPut where you can avoid allocating the string each time as you'll know if it's present or not.
[11:41:04] *** Quits: bgiannan (~bgiannan@2a01:4f8:141:1272::2) (Read error: Connection reset by peer)
[11:49:46] *** Quits: siraben (~siraben@user/siraben) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: motiejus (~motiejus@2001:470:69fc:105::38fb) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: devast8a (~devast8a@2001:470:69fc:105::3f46) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: bfredl (~bfredl@2001:470:69fc:105::183) (Quit: Bridge terminating on SIGTERM)
[11:49:46] *** Quits: moats (~oats@user/oats) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: plumeus (~plumeus@user/plumeus) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: gpanders (~gpanders@user/gpanders) (Quit: Bridge terminating on SIGTERM)
[11:49:47] *** Quits: TianruiWei[m] (~tianruiwe@2001:470:69fc:105::1:601a) (Quit: Bridge terminating on SIGTERM)
[11:49:48] *** Quits: tleydxdy[m] (~tleydxdy@2001:470:69fc:105::16a3) (Quit: Bridge terminating on SIGTERM)
[11:49:49] *** Quits: Levy[m] (~tauoverpi@2001:470:69fc:105::1:71a5) (Quit: Bridge terminating on SIGTERM)
[11:49:49] *** Quits: LorisCro[m] (~kristoff-@2001:470:69fc:105::1:2521) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: mikolajw (~mikolajtc@2001:470:69fc:105::3b02) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: nermur[m] (~nermurmat@2001:470:69fc:105::1:ccc9) (Quit: Bridge terminating on SIGTERM)
[11:49:50] *** Quits: sheeldotme[m]1 (~sheeldotm@2001:470:69fc:105::1:d886) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: midi[m] (~justmidim@2001:470:69fc:105::c739) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: barath (~barath@2001:470:69fc:105::21a) (Quit: Bridge terminating on SIGTERM)
[11:49:51] *** Quits: Nekron[m] (~nekronnoo@2001:470:69fc:105::face) (Quit: Bridge terminating on SIGTERM)
[11:49:52] *** Quits: acd8 (~acd84c8cc@2001:470:69fc:105::916) (Quit: Bridge terminating on SIGTERM)
[11:49:52] *** Quits: polykernel[m] (~polykerne@user/polykernel) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: Snektron[m] (~snektron@2001:470:69fc:105::f0a3) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: testuser[m] (~testuserm@2001:470:69fc:105::1:167f) (Quit: Bridge terminating on SIGTERM)
[11:49:53] *** Quits: iceman[m] (~iceman@2001:470:69fc:105::1:e686) (Quit: Bridge terminating on SIGTERM)
[11:49:54] *** Quits: alethkit1 (~alethkitm@2001:470:69fc:105::1:6fa4) (Quit: Bridge terminating on SIGTERM)
[11:49:59] *** Quits: coolshaurya (~coolshaur@2001:470:69fc:105::fac0) (Quit: Bridge terminating on SIGTERM)
[11:53:20] *** Joins: devast8a (~devast8a@2001:470:69fc:105::3f46)
[11:56:13] *** Joins: bfredl (~bfredl@2001:470:69fc:105::183)
[11:56:13] *** Joins: moats (~oats@user/oats)
[11:56:13] *** Joins: sheeldotme[m] (~sheeldotm@2001:470:69fc:105::1:d886)
[11:56:13] *** Joins: mikolajw (~mikolajtc@2001:470:69fc:105::3b02)
[11:56:13] *** Joins: motiejus (~motiejus@2001:470:69fc:105::38fb)
[11:56:13] *** Joins: tleydxdy[m] (~tleydxdy@2001:470:69fc:105::16a3)
[11:56:13] *** Joins: alethkit1 (~alethkitm@2001:470:69fc:105::1:6fa4)
[11:56:13] *** Joins: polykernel[m] (~polykerne@user/polykernel)
[11:56:13] *** Joins: nermur[m] (~nermurmat@2001:470:69fc:105::1:ccc9)
[11:56:13] *** Joins: siraben (~siraben@user/siraben)
[11:56:24] *** Joins: midi[m] (~justmidim@2001:470:69fc:105::c739)
[11:56:25] *** Joins: Nekron[m] (~nekronnoo@2001:470:69fc:105::face)
[11:56:25] *** Joins: LorisCro[m] (~kristoff-@2001:470:69fc:105::1:2521)
[11:56:26] *** Joins: Snektron[m] (~snektron@2001:470:69fc:105::f0a3)
[11:56:26] *** Joins: barath (~barath@2001:470:69fc:105::21a)
[11:56:26] *** Joins: testuser[m] (~testuserm@2001:470:69fc:105::1:167f)
[11:56:27] *** Joins: TianruiWei[m] (~tianruiwe@2001:470:69fc:105::1:601a)
[11:56:27] *** Joins: plumeus (~plumeus@user/plumeus)
[11:56:27] *** Joins: Levy[m] (~tauoverpi@2001:470:69fc:105::1:71a5)
[11:56:27] *** Joins: acd8 (~acd84c8cc@2001:470:69fc:105::916)
[11:56:27] *** Joins: coolshaurya (~coolshaur@2001:470:69fc:105::fac0)
[11:56:27] *** Joins: gpanders (~gpanders@user/gpanders)
[11:56:27] *** Joins: iceman[m] (~iceman@2001:470:69fc:105::1:e686)
[12:01:11] *** Joins: jemius (~jemius@p200300d967081d005877a778c03d69dc.dip0.t-ipconnect.de)
[12:12:41] *** Joins: bgiannan (4529@2a01:4f8:141:1272::2)
[12:22:06] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:23:03] *** Joins: bt-01 (~bt-01@49.207.185.155)
[12:37:00] <energizer> taking one thing at a time. `test` confirms there's a leak. i tried using getOrPut as you suggested. https://bpa.st/6ZCQ i'm not sure how to fix the leak tho
[12:44:32] <Levy[m]> when are the strings you dupe freed?
[12:45:27] *** Quits: BratishkaErik (~bratishka@37.99.44.86) (Ping timeout: 260 seconds)
[12:46:39] <Levy[m]> note, the hashmap doesn't own the keys so they won't be freed along with the hashmap when you call .deinit()
[12:56:51] *** Quits: jemius (~jemius@p200300d967081d005877a778c03d69dc.dip0.t-ipconnect.de) (Quit: Leaving)
[13:03:52] *** Joins: Pistahh (~pistahh@user/pistahh)
[13:15:22] *** Joins: MajorBiscuit (~MajorBisc@86.88.79.148)
[13:15:46] *** Quits: yelnah (~felix@203.158.51.211) (Quit: ZNC 1.8.2 - https://znc.in)
[13:15:51] *** Joins: jemius (~jemius@p200300d967081d005877a778c03d69dc.dip0.t-ipconnect.de)
[13:16:01] *** Joins: yelnah (~felix@203.158.51.211)
[13:20:21] *** Joins: CrystalGamma[m] (~crystalga@2001:470:69fc:105::1011)
[13:21:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[13:31:19] *** Quits: jemius (~jemius@p200300d967081d005877a778c03d69dc.dip0.t-ipconnect.de) (Quit: Leaving)
[13:35:17] <motiejus> normally you would accept an allocator as the first argument to the function, and then pass different ones depending on context (`testing.allocator` in a test case, `gpa` otherwise)
[13:36:07] <motiejus> if only what you care about is printing the map, then use the `arena.allocator().dupe(...)`; since the arena is freeing it's resources at the end of the test
[13:37:09] <motiejus> thus then in test: `wordFreq(testing.allocator, in.reader(), out.writer())`; and then in the function create the arena from the passed allocator, and deinit the arena like you are doing.
[13:57:55] <energizer> https://bpa.st/SRJQ fast now
[14:00:17] <Earnestly> Why are you allocating at all?
[14:00:31] <Earnestly> I suppose it's a learning exercise
[14:00:50] <Levy[m]> word frequency with an unknown set of words
[14:01:00] <energizer> well if i dont need to be allocating i might as well learn that...how can i avoid it?
[14:02:05] <energizer> yeah unknown set of words, not sure it's gonna be avoidable
[14:03:57] <energizer> this readUntilDelimiterOrEof gives a `?!` which is annoying to deal with. why is it like that?
[14:04:47] <Levy[m]> there should be a doc comment on why iirc
[14:05:17] <energizer> https://github.com/ziglang/zig/blob/4b9fd57aa86a480f2afd6ba117fcc7ef6eace572/lib/std/io/reader.zig#L186-L193
[14:06:42] <energizer> i mean why is it good for it to be that way
[14:06:56] <Earnestly> Ah misread, thought this was still counting words
[14:06:59] *** Joins: BratishkaErik (~bratishka@37.99.45.2)
[14:07:13] <Levy[m]> it can fail
[14:07:50] <Levy[m]> it can also reach the end of input which is not an error condition so justifies the `?`
[14:07:54] <ifreund> energizer: maybe you'd rather use it like this? https://zigbin.io/73ee75
[14:09:23] <Earnestly> Hopefully zigbin will display text without javascript eventually
[14:10:12] <ifreund> Earnestly: for you https://0x0.st/oqB2.c
[14:10:38] <ifreund> it annoys me that 0x0.st detects zig code as C so I tend to use zigbin for that
[14:10:47] <ifreund> mabye I should shop around though
[14:12:14] <Earnestly> A few of the older ones like ix.io and sprunge used pygmentize to provide syntax colouring for whatever that python library supported
[14:13:54] <energizer> couldnt it return immediately instead of returning null when called after finished?
[14:14:57] <ifreund> what do you mean by "return immediately"?
[14:15:09] <ifreund> how would the caller know that the end of the stream has been reached?
[14:15:33] <energizer> ah yes that didnt make sense
[14:17:35] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[14:18:52] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:2804:2ce1:5f6e:d6e7)
[14:19:47] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Client Quit)
[14:21:02] *** Joins: jemius (~jemius@p200300d967081d005877a778c03d69dc.dip0.t-ipconnect.de)
[14:21:43] <energizer> how does that zigbin code work? it doesnt look like it's handling the ! or ? cases at all
[14:23:07] <energizer> oh it's the `try`
[14:23:10] <ifreund> energizer: the try keyword is sugar for `catch |err| return err`
[14:23:29] <ifreund> and the while loop runs until null is returned
[14:23:41] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:2804:2ce1:5f6e:d6e7) (Client Quit)
[14:25:34] <Earnestly> Could add it to https://rosettacode.org/wiki/Word_frequency
[14:27:07] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:2804:2ce1:5f6e:d6e7)
[14:27:14] <ifreund> probably better to wait until zig is stable and the code will keep compiling forever
[14:29:10] <jemius> Will Zig 1.0's idiomatic formatter make statements about tab width? Currently, that's not defined as I see it, as tabs are not supported
[14:29:12] <Earnestly> In that case, add it to your local rosetta.txt full of old zig programs until 1.0 ;p
[14:29:56] <Earnestly> I vaguely remember testing the size increase of linux when all tabs were converted to 8 spaces but I can't remember the result
[14:30:34] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[14:30:47] <ifreund> jemius: currently `zig fmt` enforces 4 spaces for indentation
[14:30:57] *** Quits: ltriant_ (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[14:31:07] <ifreund> how exactly tabs/spaces will shake out for 1.0 is not yet decided
[14:31:35] <Earnestly> About 90MB larger
[14:32:13] <Earnestly> Oh, someone has actually done this with other alignments too: https://teddit.net/r/C_Programming/comments/auv5mg/file_size_impact_of_tabs_vs_spaces_in_c_code/
[14:32:41] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:32:56] <jemius> ifreund, quite strict, that formatter
[14:33:17] <Earnestly> That is the point
[14:33:39] <ifreund> I'd say rigid not strict, it allows you a fair bit of freedom in how you wrap lines
[14:33:43] <Earnestly> It's quite intentional to have no options
[14:33:50] <ifreund> but is intentionally non configurable
[14:34:15] <jemius> I guessed so. I'm very torn about this, positions A and B are understandable.
[14:34:42] <Earnestly> It eliminates this entire discussion
[14:35:05] <Earnestly> And the hundreds of documents written about how each project 'formats their code'
[14:35:43] <Earnestly> (I do like pretty thing though, so if I had to write Ada how Adacore wants it written, I'd not use it)
[14:35:55] <jemius> yes, that's position A. Position B is for example that tab=8 forces people to use more functions instead of broad lines and it increases readability. See the linux-kernel
[14:36:57] <Earnestly> Not sure more functions is readable, just shifts the burdern around, worse when they start leaking off into random files
[14:37:21] <Earnestly> functions also need to obscure logic to handle more abstract uses
[14:37:30] <jemius> well, there we are :)
[14:37:50] <Earnestly> Something I found striking reading bsd code is how much stuff goes into main()
[14:38:20] <Earnestly> When I was used to seeing more-or-less main() { runprogram(); } (plus or minus some init, argv checking, etc.)
[14:42:14] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[14:42:31] *** Joins: bindu (~bindu@user/bindu)
[14:43:20] <jemius> Earnestly, would you be happy with any formatting rules as long as they are enforced strictly?
[14:45:48] <ifreund> I'll abide by any existing formatting rules when contributing to a project
[14:46:21] <ifreund> when designing new ones, I'll definitely be opinionated about what makes code the most readable
[14:50:09] *** Joins: cursey (~cursey@user/cursey)
[14:58:21] <Earnestly> jemius: Either way, but it makes sense that if a format is chosen, to enforce it
[15:00:35] <jemius> I guess there will be discussions about the scope before 1.0 is released. Currently you can have a line width of 300 ^^
[15:01:08] <Levy[m]> I don't find line width to be something that zig fmt should enforce
[15:01:25] <Levy[m]> would be caught by code review per project
[15:02:26] <Earnestly> jemius: Linus makes good point about line width; grep
[15:02:48] <Earnestly> Arbitrarily cutting up long lines to fit 80 column makes grep harder
[15:02:49] <jemius> Earnestly, what are you refering to?
[15:03:08] <Earnestly> > line width
[15:04:08] <Earnestly> Consider https://github.com/AdaDoom3/AdaDoom3/blob/master/Engine/neo-api-vulkan.adb
[15:06:29] *** Quits: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa05) (Quit: No Ping reply in 180 seconds.)
[15:06:41] <jemius> I guess I'll wait until 1.0 and then see if my inner fanatic will be able to live with it
[15:07:41] *** Joins: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa05)
[15:13:27] *** Quits: jemius (~jemius@p200300d967081d005877a778c03d69dc.dip0.t-ipconnect.de) (Quit: Leaving)
[15:17:22] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:2804:2ce1:5f6e:d6e7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:27:50] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:2804:2ce1:5f6e:d6e7)
[15:35:02] *** Quits: siraben (~siraben@user/siraben) (Quit: User was banned)
[15:35:03] *** Quits: motiejus (~motiejus@2001:470:69fc:105::38fb) (Quit: User was banned)
[15:35:03] *** Quits: devast8a (~devast8a@2001:470:69fc:105::3f46) (Quit: User was banned)
[15:35:09] *** Quits: bfredl (~bfredl@2001:470:69fc:105::183) (Quit: User was banned)
[15:35:12] *** Quits: sheeldotme[m] (~sheeldotm@2001:470:69fc:105::1:d886) (Quit: User was banned)
[15:35:17] *** Quits: alethkit1 (~alethkitm@2001:470:69fc:105::1:6fa4) (Quit: User was banned)
[15:35:28] *** Quits: Graham31415 (~Graham@user/Graham31415) (Read error: Connection reset by peer)
[15:35:29] *** Quits: tleydxdy[m] (~tleydxdy@2001:470:69fc:105::16a3) (Quit: User was banned)
[15:35:33] *** Quits: mikolajw (~mikolajtc@2001:470:69fc:105::3b02) (Quit: User was banned)
[15:35:43] *** Quits: CrystalGamma[m] (~crystalga@2001:470:69fc:105::1011) (Quit: User was banned)
[15:35:44] *** Quits: polykernel[m] (~polykerne@user/polykernel) (Quit: User was banned)
[15:35:44] *** Quits: nermur[m] (~nermurmat@2001:470:69fc:105::1:ccc9) (Quit: User was banned)
[15:35:45] *** Quits: moats (~oats@user/oats) (Quit: User was banned)
[15:35:47] *** Quits: Snektron[m] (~snektron@2001:470:69fc:105::f0a3) (Quit: User was banned)
[15:35:47] *** Quits: barath (~barath@2001:470:69fc:105::21a) (Quit: User was banned)
[15:35:47] *** Quits: TianruiWei[m] (~tianruiwe@2001:470:69fc:105::1:601a) (Quit: User was banned)
[15:35:47] *** Quits: plumeus (~plumeus@user/plumeus) (Quit: User was banned)
[15:35:47] *** Quits: midi[m] (~justmidim@2001:470:69fc:105::c739) (Quit: User was banned)
[15:35:47] *** Quits: gpanders (~gpanders@user/gpanders) (Quit: User was banned)
[15:35:47] *** Quits: Levy[m] (~tauoverpi@2001:470:69fc:105::1:71a5) (Quit: User was banned)
[15:35:47] *** Quits: testuser[m] (~testuserm@2001:470:69fc:105::1:167f) (Quit: User was banned)
[15:35:47] *** Quits: acd8 (~acd84c8cc@2001:470:69fc:105::916) (Quit: User was banned)
[15:35:47] *** Quits: coolshaurya (~coolshaur@2001:470:69fc:105::fac0) (Quit: User was banned)
[15:35:47] *** Quits: iceman[m] (~iceman@2001:470:69fc:105::1:e686) (Quit: User was banned)
[15:35:47] *** Quits: LorisCro[m] (~kristoff-@2001:470:69fc:105::1:2521) (Quit: User was banned)
[15:35:47] *** Quits: Nekron[m] (~nekronnoo@2001:470:69fc:105::face) (Quit: User was banned)
[15:50:14] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[16:08:06] *** Quits: coleman (~coleman@2600:1700:13be:9240::40) (Ping timeout: 260 seconds)
[16:08:24] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:12:12] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:2804:2ce1:5f6e:d6e7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:15:38] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:2804:2ce1:5f6e:d6e7)
[16:23:28] *** Joins: Graham31415 (~Graham@user/Graham31415)
[16:29:18] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 260 seconds)
[16:49:11] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:53:06] *** Quits: kron (~weechat@user/qaph) (Read error: Connection reset by peer)
[16:53:35] *** Joins: kron (~weechat@user/qaph)
[17:06:02] *** Quits: Graham31415 (~Graham@user/Graham31415) (Ping timeout: 252 seconds)
[17:06:38] *** Joins: Graham31415 (~Graham@user/Graham31415)
[17:15:01] *** Quits: Graham31415 (~Graham@user/Graham31415) (Ping timeout: 246 seconds)
[17:18:36] *** Joins: devast8a (~devast8a@2001:470:69fc:105::3f46)
[17:21:48] *** Joins: bfredl (~bfredl@2001:470:69fc:105::183)
[17:21:48] *** Joins: moats (~oats@user/oats)
[17:21:48] *** Joins: sheeldotme[m] (~sheeldotm@2001:470:69fc:105::1:d886)
[17:21:48] *** Joins: motiejus (~motiejus@2001:470:69fc:105::38fb)
[17:21:48] *** Joins: mikolajw (~mikolajtc@2001:470:69fc:105::3b02)
[17:21:48] *** Joins: tleydxdy[m] (~tleydxdy@2001:470:69fc:105::16a3)
[17:21:48] *** Joins: alethkit1 (~alethkitm@2001:470:69fc:105::1:6fa4)
[17:21:48] *** Joins: coolshaurya (~coolshaur@2001:470:69fc:105::fac0)
[17:21:48] *** Joins: polykernel[m] (~polykerne@user/polykernel)
[17:21:48] *** Joins: nermur[m] (~nermurmat@2001:470:69fc:105::1:ccc9)
[17:21:48] *** Joins: siraben (~siraben@user/siraben)
[17:21:48] *** Joins: CrystalGamma[m] (~crystalga@2001:470:69fc:105::1011)
[17:21:56] *** Joins: barath (~barath@2001:470:69fc:105::21a)
[17:22:00] *** Joins: midi[m] (~justmidim@2001:470:69fc:105::c739)
[17:22:00] *** Joins: testuser[m] (~testuserm@2001:470:69fc:105::1:167f)
[17:22:00] *** Joins: Snektron[m] (~snektron@2001:470:69fc:105::f0a3)
[17:22:00] *** Joins: Nekron[m] (~nekronnoo@2001:470:69fc:105::face)
[17:22:01] *** Joins: plumeus (~plumeus@user/plumeus)
[17:22:01] *** Joins: LorisCro[m] (~kristoff-@2001:470:69fc:105::1:2521)
[17:22:02] *** Joins: Levy[m] (~tauoverpi@2001:470:69fc:105::1:71a5)
[17:22:02] *** Joins: TianruiWei[m] (~tianruiwe@2001:470:69fc:105::1:601a)
[17:22:02] *** Joins: gpanders (~gpanders@user/gpanders)
[17:22:02] *** Joins: iceman[m] (~iceman@2001:470:69fc:105::1:e686)
[17:22:02] *** Joins: acd8 (~acd84c8cc@2001:470:69fc:105::916)
[17:24:44] *** Quits: coolshaurya (~coolshaur@2001:470:69fc:105::fac0) (Client Quit)
[17:25:00] *** Joins: coolshaurya (~coolshaur@2001:470:69fc:105::fac0)
[17:28:24] *** Joins: Graham31415 (~Graham@user/Graham31415)
[17:31:43] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[17:39:47] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[17:40:34] *** neurocyte0917090 is now known as neurocyte
[17:53:53] *** Quits: MajorBiscuit (~MajorBisc@86.88.79.148) (Ping timeout: 260 seconds)
[17:54:27] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[17:55:02] *** Joins: vilhelmbergsoe (~vilhelmbe@185.19.132.203)
[17:59:13] *** Quits: anthon (~Thunderbi@p2e52a817.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:03:51] *** Joins: anthon (~Thunderbi@p2e52a817.dip0.t-ipconnect.de)
[18:06:03] *** Quits: vilhelmbergsoe (~vilhelmbe@185.19.132.203) (Ping timeout: 260 seconds)
[18:08:44] *** Quits: Graham31415 (~Graham@user/Graham31415) (Ping timeout: 252 seconds)
[18:09:34] *** Joins: Graham31415 (~Graham@user/Graham31415)
[18:09:35] *** Quits: bt-01 (~bt-01@49.207.185.155) (Quit: Leaving)
[18:13:05] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[18:13:49] *** Joins: bindu (~bindu@user/bindu)
[18:18:22] *** Quits: Graham31415 (~Graham@user/Graham31415) (Ping timeout: 260 seconds)
[18:18:56] *** Joins: Graham31415 (~Graham@user/Graham31415)
[18:25:57] *** Quits: Graham31415 (~Graham@user/Graham31415) (Ping timeout: 260 seconds)
[18:26:32] *** Joins: Graham31415 (~Graham@user/Graham31415)
[18:28:45] *** Joins: arkurious (~arkurious@user/arkurious)
[18:38:06] *** Joins: mikezackles__ (~mikezackl@gateway/tor-sasl/mikezackles)
[18:40:15] *** Quits: mikezackles_ (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[18:43:27] *** Quits: Graham31415 (~Graham@user/Graham31415) (Ping timeout: 260 seconds)
[18:44:16] *** Joins: Graham31415 (~Graham@user/Graham31415)
[18:44:49] *** Quits: qbit (~qbit@h.suah.dev) (Quit: WeeChat 3.3)
[18:50:12] *** Quits: Graham31415 (~Graham@user/Graham31415) (Ping timeout: 272 seconds)
[18:50:55] *** Joins: Graham31415 (~Graham@user/Graham31415)
[18:58:37] *** Quits: Graham31415 (~Graham@user/Graham31415) (Ping timeout: 246 seconds)
[19:10:49] *** Joins: vilhelmbergsoe (~vilhelmbe@2-104-79-222-cable.dk.customer.tdc.net)
[19:24:30] *** Joins: vb (~vilhelmbe@2-104-79-222-cable.dk.customer.tdc.net)
[19:24:56] *** Joins: qbit (~qbit@h.suah.dev)
[19:26:47] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[19:41:51] *** Quits: slowjo (~slowjo@sourcehut/user/slowjo) (Remote host closed the connection)
[19:42:07] *** Joins: slowjo (~slowjo@sourcehut/user/slowjo)
[19:42:38] *** Joins: rgrinberg (~textual@177.248.148.38)
[19:50:29] *** Joins: Graham31415 (~Graham@user/Graham31415)
[19:54:16] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 246 seconds)
[19:58:01] *** Joins: monadic-bind (~monadic-b@176.240.173.153)
[20:02:33] *** Quits: monadic-bind (~monadic-b@176.240.173.153) (Remote host closed the connection)
[20:02:50] *** Joins: monadic-bind (~monadic-b@176.240.173.153)
[20:04:06] *** Joins: Graham31515 (~Graham@user/Graham31415)
[20:06:50] *** Quits: monadic-bind (~monadic-b@176.240.173.153) (Remote host closed the connection)
[20:07:08] *** Joins: monadic-bind (~monadic-b@176.240.173.153)
[20:07:27] *** Quits: Graham31415 (~Graham@user/Graham31415) (Ping timeout: 256 seconds)
[20:10:44] *** Quits: monadic-bind (~monadic-b@176.240.173.153) (Remote host closed the connection)
[20:11:01] *** Joins: monadic-bind (~monadic-b@176.240.173.153)
[20:12:08] *** Quits: monadic-bind (~monadic-b@176.240.173.153) (Remote host closed the connection)
[20:12:59] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[20:19:30] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[20:28:14] *** Quits: vilhelmbergsoe (~vilhelmbe@2-104-79-222-cable.dk.customer.tdc.net) (Quit: WeeChat 3.5)
[20:29:18] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[20:41:03] *** Quits: vb (~vilhelmbe@2-104-79-222-cable.dk.customer.tdc.net) (Quit: WeeChat 3.5)
[21:10:17] *** Joins: xackus (~xackus@185.15.0.3)
[21:10:31] *** Joins: zy (~cc@user/zy)
[21:31:53] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:45:15] *** Quits: LostKobrakai (~LostKobra@dia.uberspace.de) (Quit: ZNC 1.8.2 - https://znc.in)
[21:45:24] *** Joins: LostKobrakai (~LostKobra@dia.uberspace.de)
[22:14:11] *** Joins: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de)
[22:14:11] *** Quits: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de) (Changing host)
[22:14:11] *** Joins: tane (~tane@user/tane)
[22:16:38] *** Quits: lanodan (~lanodan@2a01:e0a:d6:9930::35) (Quit: WeeChat 3.3)
[22:17:07] *** Quits: BratishkaErik (~bratishka@37.99.45.2) (Read error: Connection reset by peer)
[22:23:21] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[22:25:08] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[22:36:04] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:38:26] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[22:38:43] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[22:43:38] *** Joins: lanodan (~lanodan@2a01:e0a:d6:9930::35)
[23:01:52] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 260 seconds)
[23:05:22] *** Quits: zy (~cc@user/zy) (Ping timeout: 246 seconds)
[23:09:13] *** Quits: squeek502 (~squeek502@user/squeek502) (Ping timeout: 246 seconds)
[23:22:52] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 260 seconds)
[23:26:37] *** Quits: lanodan (~lanodan@2a01:e0a:d6:9930::35) (Ping timeout: 240 seconds)
[23:35:29] *** Joins: lanodan (~lanodan@2a01:e0a:d6:9930::35)
[23:40:11] *** Quits: lanodan (~lanodan@2a01:e0a:d6:9930::35) (Ping timeout: 260 seconds)
[23:40:26] *** Joins: jemius (~imperator@200116b82dd944002575bcd6ac418d09.dip.versatel-1u1.de)
[23:43:24] *** Joins: lanodan (~lanodan@2a01:e0a:d6:9930::35)
[23:50:28] *** Quits: duds- (~duds-@user/duds) (Ping timeout: 260 seconds)
