[00:01:09] *** Quits: geeknix (~pi@2001:e68:5432:3223:5ebb:b60a:8745:12b9) (Ping timeout: 252 seconds)
[00:01:51] *** Joins: Techcable (~Techcable@168.235.93.147)
[00:01:58] *** Quits: Iarfen (~quassel@181.43.57.66) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:04:33] *** Joins: arinov (~arinov@176.89.29.127)
[00:05:07] *** Joins: donald1 (~donald@88.165.121.242)
[00:05:59] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[00:06:23] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:06:30] *** Joins: donald2 (~donald@2a01:e0a:95e:7ca0:cdab:367d:d10f:b309)
[00:07:48] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[00:09:12] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[00:09:26] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Quit: fBNC - https://bnc4free.com)
[00:10:00] *** Joins: Jong (~Jong@2620:10d:c090:400::5:4540)
[00:10:36] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[00:10:59] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[00:11:01] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[00:11:21] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:12:04] *** Quits: blehmeh98 (~blehmeh98@2601:803:8000:eaa0:5bd:ca5a:c2bf:6dae) (Quit: Leaving)
[00:13:36] *** Joins: Inline (~Inline@aftr-37-201-240-202.unity-media.net)
[00:14:32] *** Joins: geeknix (~pi@2001:e68:5432:c000:3795:5c40:487:1d37)
[00:16:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:18:04] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:19:32] *** Quits: Inline (~Inline@aftr-37-201-240-202.unity-media.net) (Ping timeout: 268 seconds)
[00:22:23] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[00:23:01] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.3)
[00:27:23] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[00:27:43] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[00:28:15] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[00:29:00] *** Joins: vicfred (~vicfred@user/vicfred)
[00:29:36] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:30:40] *** Joins: treble (~treble@user/treble)
[00:31:10] *** Joins: Inline (~Inline@aftr-37-201-240-202.unity-media.net)
[00:32:34] *** Quits: useretail_ (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[00:32:46] *** Joins: useretail_ (~useretail@185.132.19.151)
[00:33:12] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[00:33:17] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[00:34:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:42] *** Joins: cation21 (cation@user/cation)
[00:34:43] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[00:35:59] *** Quits: cation (cation@user/cation) (Ping timeout: 252 seconds)
[00:36:21] *** Quits: Inline (~Inline@aftr-37-201-240-202.unity-media.net) (Ping timeout: 252 seconds)
[00:38:03] *** cation21 is now known as cation
[00:39:52] *** Joins: Inline (~Inline@aftr-37-201-240-202.unity-media.net)
[00:42:24] <floatcomplex> ,cc void func(char str[static 32]) { static_assert(sizeof(str) == 32); }
[00:42:25] <candide> floatcomplex:  In function 'func':  warning: 'sizeof' on array function parameter 'str' will return size of 'char *' [-Wsizeof-array-argument]  note: declared here error: static assertion failed
[00:42:31] <floatcomplex> hmm
[00:43:52] *** Quits: mahmutov (~mahmutov@37.155.35.80) (Ping timeout: 265 seconds)
[00:46:34] *** Joins: dutch (~DutchIngr@user/dutch)
[00:47:34] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[00:47:47] *** Quits: magla (~gelignite@55d40eb7.access.ecotel.net) (Quit: Stay safe!)
[00:48:42] *** Quits: vimart (~vimart@109.249.179.187) (Ping timeout: 265 seconds)
[00:51:37] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:53:30] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[00:56:13] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 240 seconds)
[01:00:03] *** Joins: wand (~user@gateway/tor-sasl/wand)
[01:00:21] *** Joins: plantman (~plantman@2601:405:4680:1b0::2)
[01:02:29] *** Quits: donald1 (~donald@88.165.121.242) (Quit: Leaving.)
[01:03:14] *** Quits: terminalpusher (~terminalp@2a01:586:a4a5:1:e003:e11d:22df:b459) (Remote host closed the connection)
[01:04:10] *** Joins: lightningwright (~lightning@user/lightningwright)
[01:09:21] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:09:21] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:09:21] *** Joins: wroathe (~wroathe@user/wroathe)
[01:09:29] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:09:55] <pragma-> hmmm https://lkml.org/lkml/2021/12/6/461
[01:09:56] <candide> Title of pragma-'s link: LKML: Miguel Ojeda: [PATCH 00/19] Rust support
[01:14:08] <river> https://lkml.org/lkml/2021/12/6/511 hmmm
[01:14:08] <candide> Title of river's link: LKML: Matthew Wilcox: Re: [PATCH 01/19] kallsyms: support "big" kernel symbols
[01:14:27] *** Joins: PortableDave (~portabled@118.208.121.87)
[01:14:33] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Remote host closed the connection)
[01:15:17] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[01:15:34] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[01:16:15] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 265 seconds)
[01:16:29] <pragma-> "no need to overreact! ;)"
[01:16:41] <river> there's something really fucky about this
[01:16:46] <river> nobody asked for rust code in the kernel
[01:16:55] *** Quits: wand (~user@gateway/tor-sasl/wand) (Remote host closed the connection)
[01:16:57] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[01:17:00] <river> like ok as a hobby project? but why post this to lkml
[01:18:03] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[01:18:26] *** Joins: shokara[xmpp] (8a599707f6@198.108.77.17)
[01:18:51] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[01:19:40] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[01:19:49] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:20:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:21:45] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[01:24:11] *** shokara[xmpp] is now known as shokara
[01:25:48] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:26:12] *** Quits: fr13d0kr4 (~fr13d0kr4@ip24-170-205-126.ga.at.cox.net) (Quit: Lost terminal)
[01:26:43] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:26:57] <strajder> Google is pushing Rust, nothing new and speaks volumes
[01:27:14] *** Quits: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de) (Quit: leaving)
[01:28:08] *** Joins: Klinda (~superleag@user/klinda)
[01:31:10] *** Joins: brad_mssw|mac (~bhouse@99-101-56-67.lightspeed.jcvlfl.sbcglobal.net)
[01:31:25] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[01:33:44] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[01:36:12] *** Quits: schmoee (~schmoee@2601:84:4501:6440:21e8:6f7b:eba2:d34) (Remote host closed the connection)
[01:36:47] *** Joins: schmoee (~schmoee@2601:84:4501:6440:21e8:6f7b:eba2:d34)
[01:37:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:37:16] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:37:16] *** Joins: wroathe (~wroathe@user/wroathe)
[01:37:34] <earnest> (and microsoft)
[01:38:27] <plantman> Rust and Go, and python
[01:39:28] *** Joins: kish` (~sid742412@user/aqua)
[01:39:48] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[01:39:55] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:40:07] *** Joins: kish` (~sid742412@user/aqua)
[01:40:17] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) ()
[01:40:46] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[01:41:06] <pragma-> embrace rust, extend it into linux, extinguish linux.
[01:41:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:42:55] <plantman> Torvalds loves C
[01:43:16] <pragma-> if that were true he wouldn't be confused about what sizeof is
[01:44:12] <floatcomplex> sigh, not this again
[01:44:33] <floatcomplex> it is entirely harmless to treat sizeof as if it were a function even though it's an operator
[01:44:47] *** Quits: mjack (~mjack@5634d05c.rev.stofanet.dk) (Quit: mjack)
[01:44:48] <floatcomplex> it is not always harmless to insist it's an operator
[01:44:54] <nomagno> Rust doesn't even have more than one implementation yet. I really don't see it as an appropriate candidate to be included into anything just because
[01:45:22] *** Joins: Jackii (~Jackiii@93-41-1-112.ip79.fastwebnet.it)
[01:45:23] <nomagno> can you use sizeof as an operator? Is that legal? TIL
[01:45:41] * pragma- facepalms
[01:45:44] <Jackii> how to get system timezone ?
[01:45:57] <Jackii> in minutes
[01:46:17] *** Quits: smartin (~Thunderbi@88.135.18.171) (Quit: smartin)
[01:46:24] <pragma-> imagine taking minutes to get the system timezone
[01:47:08] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[01:47:27] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[01:47:40] <nomagno> Jackii: take a look at localtime() and gmtime()
[01:50:48] <Jackii> localtime doesnt work
[01:51:01] <twkm> use of both is needed to obtain the data, or use a platform specific api
[01:51:31] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 252 seconds)
[01:52:48] <twkm> the nasty part is that it varies.
[01:55:11] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[01:55:40] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:55:42] <twkm> e.g., using the current time doesn't tell you if it remains that later, or earlier -- usually it might change only on year boundaries, even decade, but recently some governments have made sudden changes.
[01:56:04] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Remote host closed the connection)
[01:56:26] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[01:56:40] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:57:30] *** Quits: schmoee (~schmoee@2601:84:4501:6440:21e8:6f7b:eba2:d34) (Remote host closed the connection)
[01:57:42] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you tomorrow)
[01:57:47] *** Joins: schmoee (~schmoee@2601:84:4501:6440:21e8:6f7b:eba2:d34)
[01:58:44] *** Quits: schmoee (~schmoee@2601:84:4501:6440:21e8:6f7b:eba2:d34) (Client Quit)
[01:59:12] *** Joins: schmoee (~schmoee@2601:84:4501:6440:21e8:6f7b:eba2:d34)
[02:00:05] <veltas> Pffft, sizeof isn't a function
[02:00:11] <veltas> It's a macro to _Sizeof
[02:00:12] *** Quits: strajder (~strajder@user/strajder) (Quit: nn)
[02:00:43] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 265 seconds)
[02:03:03] *** Quits: schmoee (~schmoee@2601:84:4501:6440:21e8:6f7b:eba2:d34) (Remote host closed the connection)
[02:03:45] *** Joins: Bruda (~bruda@172.58.62.244)
[02:03:54] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:04:02] *** Joins: schmoee (~schmoee@2601:84:4501:6440:21e8:6f7b:eba2:d34)
[02:04:36] <veltas> If you #include <sizeof.h>
[02:05:05] *** Quits: alch (~alch@151.34.170.118) (Read error: Connection reset by peer)
[02:05:22] <plantman> it doesnt matter how sizeof( is implemented
[02:05:26] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our gamedev community https://indiedevs.net/)
[02:05:51] *** Joins: lightningwright_ (~lightning@user/lightningwright)
[02:05:59] <poprocks> veltas: you mean if you #include <stdsizeof.h>
[02:06:09] *** Quits: lightningwright_ (~lightning@user/lightningwright) (Remote host closed the connection)
[02:06:17] <veltas> Sorry I'm not that familiar with the standard, you're right
[02:08:23] *** Quits: lightningwright (~lightning@user/lightningwright) (Ping timeout: 252 seconds)
[02:09:34] *** Joins: alch (~alch@151.34.176.48)
[02:09:36] *** Joins: BSaboia (~bsaboia@177.37.198.179)
[02:10:46] <floatcomplex> just don't write code that needs a function pointer that points to sizeof() and you're good :)
[02:14:40] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:15:55] *** Quits: monkey_ (~user@181.114.17.106) (Remote host closed the connection)
[02:18:06] *** Quits: Akuli (~Akuli@82-203-166-15.bb.dnainternet.fi) (Quit: Akuli)
[02:18:36] *** Quits: donald2 (~donald@2a01:e0a:95e:7ca0:cdab:367d:d10f:b309) (Ping timeout: 265 seconds)
[02:21:22] <Bruda> Once upon a time were we able to run functions without the () if they didn't take any arguments? Otherwise I guess K&R had a minor flaw in section 1.10 code, trying to run getchar instead of getchar().
[02:22:26] <mcf> here's one tricky way sizeof doesn't behave like a function: sizeof(x)["abc"] is not the same as "abc"[sizeof(x)], even though a[i] is defined as *(a+i)
[02:22:57] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 265 seconds)
[02:23:11] <mcf> actually nevermind
[02:23:18] <floatcomplex> Bruda: i see getchar() in k&r2
[02:23:52] <Bruda> Maybe it's just a flaw in my copy.
[02:23:55] <mcf> was trying to come up with a case where the postfix expression part matters, but sizeof isn't a primary expression, so i don't think it works
[02:24:28] <Bruda> floatcomplex: its in the getline() function code, part of the for loop.
[02:24:58] <floatcomplex> at the bottom of page 32?
[02:25:11] <Bruda> top of 34 for me
[02:25:17] <Bruda> errr 33
[02:27:58] <floatcomplex> found the version you're looking at
[02:28:21] <floatcomplex> it's a transcription error in your version. that flaw was not present in either k&r or k&r2 as printed
[02:28:36] <Bruda> Suppose it could be a flaw in my copy. Could just be my copy, maybe whoever transferred this to a proper PDF made a mistake.
[02:28:52] <pragma-> "proper pdf"
[02:28:53] <floatcomplex> probably not the only one
[02:29:10] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[02:30:21] <Bruda> This copy was a 'gift' from another coder years ago.
[02:31:22] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:31:27] <floatcomplex> did they leave 🔥💩 emojis in your repo too
[02:32:13] <Bruda> lol nobody directly contributed to any repo of mine.
[02:33:25] *** Quits: pizdets (~pizdets@183.182.115.115) (Ping timeout: 240 seconds)
[02:33:53] *** Joins: pizdets_ (~pizdets@183.182.111.243)
[02:34:05] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[02:35:01] <Bruda> I'm on social security so I can't usually spend a lot on books. But where is the cheapest place to get a proper copy of the book?
[02:35:47] *** Quits: brad_mssw|mac (~bhouse@99-101-56-67.lightspeed.jcvlfl.sbcglobal.net) (Quit: Leaving)
[02:35:51] <koollman> someone else's house. or a library. :)
[02:36:10] <Bruda> lol Who here has a proper copy and leaves their door unlocked? :P
[02:36:23] <koollman> hey, it's cheap ;)
[02:36:46] <Bruda> I'll leave $10 in place of the book lol
[02:36:48] <koollman> anyway, libraries would probably solve the "I want to check the proper copy for errors"
[02:37:20] <floatcomplex> Bruda: i had to scroll past a lot of non-broken pdf versions of it when googling to get your broken one
[02:37:45] <Bruda> Yea probably. Might have to request a book from an out of town library though. I don't think our local one has it. Been through that computer section already.
[02:37:54] <pragma-> how do you know they're non-broken if you scrolled past?
[02:38:08] <floatcomplex> pragma-: they were purple :)
[02:38:11] <Bruda> floatcomplex: I looked too. The copies online seem to be the same as the one I have.
[02:38:25] <floatcomplex> Bruda: wtf weird
[02:38:40] <floatcomplex> google being google and showing you what it thinks you want
[02:39:01] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 240 seconds)
[02:39:22] <Bruda> The various ones I'm seeing all show the same bit, (c=getchar))
[02:39:46] <Bruda> I'm yet to see one that shows the correct form. I've seen at least 3 variants of the book so far.
[02:40:59] *** Quits: plantman (~plantman@2601:405:4680:1b0::2) (Quit: Leaving)
[02:42:24] <floatcomplex> Bruda: https://kremlin.cc/k&r.pdf this is the first result on both ddg and google, and it's not broken
[02:42:48] <earnest> Oh, kremlin.  I wonder if he's still around
[02:42:52] <Bruda> I'm on ddg. Hmm. Weird how I didn't see that result.
[02:45:16] * Bruda facepalms
[02:45:34] <Bruda> I have 2 copies of the book in my ebook archive and this is the other one in there. 20 something mbs
[02:45:53] <Bruda> Guess I know which one to stick to now.
[02:46:12] * floatcomplex slaps Bruda around a bit with a large pdf
[02:46:13] <Bruda> Even if the text is a little crooken from photo copying lol
[02:46:27] * Bruda giggles like it tickled
[02:48:33] *** Joins: random-nickname (~random-ni@87.116.181.93)
[02:51:49] *** Quits: random-nick (~random-ni@87.116.165.83) (Ping timeout: 240 seconds)
[02:54:50] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:57:31] *** Quits: Satin (uid193953@id-193953.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:58:06] *** Joins: TastyWiener95 (~uhhh3@user/tastywiener95)
[03:03:41] <Bruda> Decided to refresh chapter 1 then go back to the couple exercises at the end that I skipped. 1-23 and 1-24. Tricky but I think I'll figure it out.
[03:06:00] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[03:06:19] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[03:08:31] <Bruda> Would ftell() return the current char in the input stream without moving the pointer to the next char?
[03:09:06] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:09:55] <Bruda> Though I suppose technically I haven't been exposed to that function at this point in the book.
[03:10:15] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[03:10:31] <floatcomplex> no that's not what it does
[03:11:07] <floatcomplex> ftell tells you where in the stream you are, not what's there
[03:11:12] <Bruda> Ahh ok.
[03:11:20] <floatcomplex> idk why it's called that
[03:11:36] <pragma-> ,man fpos
[03:11:52] <pragma-> Oh god, I keep forgetting that the freebsd server hosting these manpages is super slow
[03:12:04] <floatcomplex> ,ps
[03:12:05] <candide> One process: 228883: man fpos
[03:12:06] <candide> No output.
[03:12:26] <Bruda> and ungetc doesn't come in until later....
[03:12:44] <floatcomplex> the devil's getc
[03:13:25] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[03:13:28] <Bruda> So what's a good way to test if I"m at the beginning of a comment without losing a character in the stream if it's not the beginning of a comment?
[03:13:38] <Bruda> s/I"m/I'm/
[03:14:11] <pragma-> Just do what the chapter taught you and hinted at.
[03:15:39] <Bruda> I guess I'll reread it again and see if I see the hint. Can't hurt to reinfore the material again.
[03:16:54] <derelict> hey folks, as part of our OSs class, we need to implement a barebones shell using the fork-exec pattern. are there any pointers on how i could use this to run commands in the background as opposed to the foreground?
[03:17:08] <Bruda> One idea I have is the getline thing, except saving the whole code first then processing that buffer.
[03:17:21] * Bruda shrugs.
[03:17:36] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[03:17:42] <pragma-> derelict: didn't your OS class go over that? why not ask some classmates or the teacher or teacher's assistant? i dont understand why people pay for tuition and shit but then come to this channel instead
[03:18:05] <floatcomplex> derelict: look at the source code for musl popen
[03:18:58] <floatcomplex> whatever you do, don't look at the source for busybox shell
[03:19:13] <derelict> thanks floatcomplex! ill check it out
[03:19:34] <derelict> pragma-: our classes are flipped, we do the research and implement stuff before instruction
[03:22:21] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:23:35] *** Joins: odoood (~odoood@2601:c8:c003:a550::5)
[03:28:51] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[03:30:43] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 256 seconds)
[03:30:44] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[03:31:02] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[03:33:19] *** Joins: mjack (~mjack@5634d05c.rev.stofanet.dk)
[03:33:24] <twkm> ignore popen, consider what exec* does.
[03:33:27] *** Quits: schmoee (~schmoee@2601:84:4501:6440:21e8:6f7b:eba2:d34) (Ping timeout: 252 seconds)
[03:35:14] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:38:59] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[03:40:52] <Bruda> Somehow vim just feels like a perfect editor for C.
[03:42:35] <floatcomplex> :(
[03:42:59] <carrar> vim is the perfect editor for everything...
[03:43:00] <Bruda> What? You an Emacs user?
[03:43:21] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:43:47] <Bruda> Yea vim is pretty versatile. Especially if you are familiar with how to use it. I refresh myself in vimtutor every so often.
[03:43:47] <rcf> ed is the standard editor dammit 
[03:44:04] <rcf> You kids and your fancy video terminals
[03:44:05] *** Joins: ferdna (~ferdna@user/ferdna)
[03:44:13] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[03:44:16] <carrar> haha
[03:44:18] <rcf> REAL PROGRAMMERS EDIT LINE BY LINE 
[03:44:21] <Bruda> ed? Isn't that a line editor?
[03:44:23] <rcf> Yes. 
[03:44:25] <Bruda> Yep....
[03:44:39] <Bruda> Fuck that. I want to see the code, not just the line lol
[03:44:58] <rcf> On a real teletype! WHERE YOU PAY EXTRA TO SEE LOWERCASE! 
[03:45:11] <floatcomplex> nano in the streets, xcode in the sheets
[03:45:17] <Bruda> XD
[03:45:56] <Bruda> Vim is still old school enough for this millennia. 
[03:46:35] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[03:46:43] *** Joins: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4)
[03:47:03] <poprocks> haha. Funnily enough, Vim is not some bare-bones minimalist software - it has a *lot* of features! ... particularly when dealing with C code. Because that's what we're discussing. C.
[03:47:26] <Bruda> poprocks: yea I'm even using syntastic :P
[03:47:35] <floatcomplex> nano got good while everyone was busy arguing about vim vs some editor that i'm not even sure whether it exists or is a no-longer-funny joke like intercal
[03:47:56] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:48:01] <twkm> oh, it's the editor war/zealotry.  *snore*
[03:48:16] <Bruda> Along comes the guy who says 'vscode' is the new king :P
[03:48:50] <floatcomplex> if your laptop is plugged in maybe
[03:49:13] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Ping timeout: 252 seconds)
[03:49:26] <Bruda> hehe twkm things we're fighting over editors.
[03:50:29] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4c65-8a88-a069-13d6.res6.spectrum.com)
[03:51:03] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[03:52:25] * Bruda jokingly glares at the vim haters while loading a proverbial gun.
[03:52:45] *** Joins: Wulf (~Wulf@user/wulf)
[03:53:17] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[03:53:37] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::5)
[03:53:42] *** Joins: kish` (~sid742412@user/aqua)
[03:53:44] *** Joins: szutt (~szutt@116.37.2.145)
[03:56:11] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 252 seconds)
[03:57:01] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 240 seconds)
[03:58:25] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[03:58:32] <Bruda> So I guess I settled on doing a buffer for storing the "code" then processing the buffer and printing anything that's not a comment (K&R ex1-23).
[03:58:50] <Bruda> Still coding up the solution but I have a working code buffer so far.
[03:58:59] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4c65-8a88-a069-13d6.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:02:26] <Bruda> Is it necessary to do an arbitrary length version or would it suffice for the purporse of the exercise to just do a simple preconfigured buffer length for simple code examples?
[04:02:44] <twkm> ,kr1-23
[04:02:44] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-23. Write a program to remove all comments from a C program. Don’t forget to handle quoted strings and character constants properly. C comments don’t nest.
[04:03:02] *** Joins: chenqisu1 (~03cia7d@183.217.201.63)
[04:04:18] <twkm> i wouldn't accept length limited.  what matters is what you'll accept as having learned the new concepts presented, building on the previous.
[04:04:43] <Bruda> Seems like if I was writing a proper program to process code it would be processing a prewritten file, thus predetermined buffer length.
[04:04:56] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:06:17] <rcf> I would argue the opposite, because I'd probably use such a program in a pipeline on the command line. 
[04:06:22] <Bruda> Though I suppose the arbitrary version could process the code line by line...
[04:06:27] *** Quits: travankor (travankor@user/travankor) (Ping timeout: 252 seconds)
[04:06:29] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[04:06:45] <floatcomplex> line by line is the way to do it, or even character by character
[04:06:52] *** Joins: travankor (travankor@user/travankor)
[04:07:35] <floatcomplex> bonus points if the state of your "state machine" is "stored" implicitly in "where the code is currently executing"
[04:07:51] <Bruda> Whew. The hard way. Wonder if coming up with a working solution would be a good start, then refining it to an arbitrary version once I have the general logic down.
[04:08:08] <floatcomplex> i think doing it character by character is probably not the hard way
[04:08:36] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[04:08:54] <rcf> That would be the easy way 
[04:09:03] <Bruda> The part I get confused by in the character-by-character version is how to look ahead at the next character without forwarding the stream.
[04:09:18] <Bruda> Using only what the chapter has taught so far.
[04:09:25] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[04:09:32] <floatcomplex> Bruda: you don't
[04:09:33] <twkm> just remember the last character.
[04:09:47] <rcf> A one character buffer, in other words. 
[04:09:56] <floatcomplex> or just ingest an additional character when you branch on the first character being an escape character or whatever
[04:10:00] <twkm> (and that's only if it was a slash or quote)
[04:10:20] <floatcomplex> thereby "remembering the last character" implicitly by where you are in control flow rather than explicitly in a variable
[04:13:41] *** Quits: BSaboia (~bsaboia@177.37.198.179) (Quit: This computer has gone to sleep)
[04:13:47] <Bruda> Hmm. Sort of like tracking the word state but some kind of test state that changes to a confirmed state?
[04:14:11] <floatcomplex> no literally like if (*p == '\\') p++; p++;
[04:14:22] <floatcomplex> but with getchar or whatever
[04:14:36] <Bruda> But pointers haven't been introduced yet.
[04:14:53] <Bruda> But I didn't realize I could do '//' or such.
[04:15:12] <Bruda> But doesn't that test for two characters when only one is stored in the c var?
[04:15:19] <twkm> \\ isn't the same as //
[04:15:54] <Bruda> \\ isn't the start of a comment though. Why would I test for that?
[04:15:59] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::5) (Ping timeout: 252 seconds)
[04:16:01] <floatcomplex> Bruda: i mean literally get another character from stdin instead of advancing a pointer
[04:16:20] <floatcomplex> '\\' is a character literal
[04:18:26] <Bruda> So far only getchar was covered, which advances to the next character in the stream in my experience so far.
[04:18:38] <floatcomplex> matches on backslash, so that when you get a backslash (and the previous character implicitly wasn't one, because of where you are in the control flow) you skip the next character
[04:18:49] <floatcomplex> or whatever special you want to do with the next character
[04:20:12] *** Joins: Guest81 (~Guest81@2600:1700:c751:21d0:5458:e804:f526:bb9)
[04:21:05] <Bruda> Hmm. Seem confusing but I guess I'll work at it and see what I come up with.
[04:21:51] *** Quits: Guest81 (~Guest81@2600:1700:c751:21d0:5458:e804:f526:bb9) (Client Quit)
[04:22:47] *** Joins: Teckla (~Teckla@user/teckla)
[04:23:17] *** Joins: karakedi (~eAC53C340@user/karakedi)
[04:23:51] <Bruda> In my mind I feel like I'm gonna see a mess of input and output as this char-by-char version process stdin and prints out. 
[04:26:39] <Bruda> It'll make sense as I go I guess.
[04:27:57] *** Quits: Geezabiscuit (~Geezabisc@user/geezabiscuit) (Ping timeout: 256 seconds)
[04:28:05] <Bruda> Typicall a / isn't valid code unless it's a comment, right? So testing for it, then moving forward a char in the stream should always yield single line or multi line comment otherwise its erroneous code?
[04:28:48] <Bruda> Or is there another use of / that I haven't covered yet?
[04:28:52] <floatcomplex> yes
[04:29:19] <Bruda> Ok. I guess now it seems less confusing.
[04:30:23] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[04:31:05] *** Joins: donald1 (~donald@2a01:e0a:95e:7ca0:cdab:367d:d10f:b309)
[04:31:32] *** Joins: h4zel (~hazel@user/h4zel)
[04:33:03] *** Quits: Libero (~Libero@77.49.128.70.dsl.dyn.forthnet.gr) (Quit: Leaving)
[04:34:45] <Bruda> Though * might is trickier since it could be a pointer unless its followed by a slash.
[04:34:56] *** Quits: dacav (~dacav@h94-245-9-202.cust.a3fiber.se) (Ping timeout: 245 seconds)
[04:35:01] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[04:35:30] <floatcomplex> i meant yes / is used for more than just comments
[04:35:43] *** Joins: dmenz (~daniel@2804:14d:5cd4:5e94::d)
[04:35:46] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[04:36:10] *** Joins: soapsudsxx (~soapsudsx@209.221.40.158)
[04:36:10] <Bruda> peachie
[04:36:26] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4c65-8a88-a069-13d6.res6.spectrum.com)
[04:37:49] <Bruda> I guess it makes sense now why the char by char might be easier, since I could test the next char and print it if it's not related to a comment start/end.
[04:38:26] *** Joins: Geezabiscuit (~Geezabisc@user/geezabiscuit)
[04:38:26] <floatcomplex> pent is the past tense of pending
[04:40:14] *** Quits: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:40:48] *** Joins: useretail__ (~useretail@185.132.19.151)
[04:40:48] *** Quits: useretail_ (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[04:41:22] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:44:05] *** Quits: donald1 (~donald@2a01:e0a:95e:7ca0:cdab:367d:d10f:b309) (Ping timeout: 265 seconds)
[04:44:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:44:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:44:52] *** Joins: wroathe (~wroathe@user/wroathe)
[04:46:24] <Bruda> Is it still a valid solution if my output is mixed with the input or is there a way to delay my output til everything has been processed? An output buffer with preconfigured max?
[04:50:12] <Pent> acceptable
[04:51:34] <Bruda> I guess it should be obvious what's happening eh? Comments don't get printed, just everything else?
[04:52:12] *** Joins: dacav (~dacav@h94-245-9-202.cust.a3fiber.se)
[04:54:33] <floatcomplex> Bruda: you can ingest one character at a time and write one or two characters at a time
[04:54:37] *** Quits: Enzix (~Enzix@77.105.17.172) (Ping timeout: 240 seconds)
[04:54:40] <floatcomplex> no need to buffer any more than that
[04:55:39] <Bruda> Yea I think I get that now. This will do everything char-by-char when I'm done. It's just figuring out my algorithm is a challenge.
[04:56:47] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[04:58:31] *** Quits: useretail__ (~useretail@185.132.19.151) (Remote host closed the connection)
[04:58:46] *** Joins: useretail__ (~useretail@185.132.19.151)
[05:00:49] *** Joins: cation21 (cation@user/cation)
[05:01:58] *** Quits: cation (cation@user/cation) (Ping timeout: 265 seconds)
[05:02:28] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Quit: Updating details, brb)
[05:02:37] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[05:03:25] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 240 seconds)
[05:04:10] *** cation21 is now known as cation
[05:04:13] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[05:07:19] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[05:08:30] *** Joins: random-nick_ (~random-ni@87.116.181.93)
[05:12:05] *** Quits: random-nickname (~random-ni@87.116.181.93) (Ping timeout: 252 seconds)
[05:12:27] <floatcomplex> Bruda: https://godbolt.org/z/76GdnjTrE
[05:12:47] <Bruda> Got a really basic version so far that filters out multiline comments if they are not in a quoted string.
[05:13:26] <Bruda> floatcomplex: I opened that link in the browser but I won't look yet lol. Want to see what I come up with for a solution first :)
[05:13:33] <floatcomplex> :D
[05:13:49] *** Quits: dmenz (~daniel@2804:14d:5cd4:5e94::d) (Ping timeout: 240 seconds)
[05:13:52] <floatcomplex> caveat: mine only works on valid programs. you'll see why, when you click on it
[05:13:57] <Bruda> The tricky part now is to filter out the // comments. 
[05:14:12] <floatcomplex> Bruda: within the context of k&r, you don't need to do that
[05:14:27] <Bruda> Ohh...that's right, // came from C++ right?
[05:15:43] <floatcomplex> it's C, but not until C99
[05:16:05] <floatcomplex> the authors of k&r2 did not expect you to solve that in that exercise
[05:16:11] *** Joins: cation21 (cation@user/cation)
[05:16:42] <Bruda> Ohh. Well, so technically I might have a solution to the exercise already. Albeit first draft and without stuff I might not have thought of yet.
[05:17:01] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[05:17:32] <floatcomplex> indeed
[05:17:34] <Bruda> What do they mean handle character constants correctly? There's no such thing as '/*' right? or is there?
[05:18:01] <Bruda> , kr 1-23
[05:18:01] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-23. Write a program to remove all comments from a C program. Don’t forget to handle quoted strings and character constants properly. C comments don’t nest.
[05:18:10] <floatcomplex> Bruda: what they mean is that if " occurs inside single quotes then you shouldn't go into the part of your parser that looks for the closing "
[05:18:37] <Bruda> Ohhh....shoot didn't think about that.
[05:18:59] <Bruda> So comment state, string state, char constant state...
[05:19:04] <floatcomplex> yup
[05:19:18] <floatcomplex> none of which need to have any variables associated with whether you are in that state or not :)
[05:19:38] *** cation21 is now known as cation
[05:19:41] <Bruda> I think I can handle that. What I got so far was easier than I expected.
[05:20:43] <floatcomplex> fwiw i wrote one of these handle-escaped-things parsers today for dayjob and it required fewer states and less code than this one does
[05:20:50] <floatcomplex> but it was fresh in my mind
[05:21:07] *** Joins: Guest8036 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[05:21:18] <floatcomplex> (and it wasn't operating on a FILE * input)
[05:21:46] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[05:23:36] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:23:46] <Guest8036> floatcomplex: should be FILE* input 
[05:23:50] <Guest8036> beginner mistake
[05:23:53] <floatcomplex> lol
[05:24:08] <Bruda> Day job eh? Boy would I love to make money doing this. With your help seems like I'll at least be good enough to do it as a hobby at some point.
[05:24:16] <Bruda> ;)
[05:25:07] <Bruda> do I have to escape the single quote within single quotes? or just c == '''?
[05:25:31] <floatcomplex> '\'m
[05:25:33] <floatcomplex> er
[05:25:40] <floatcomplex> '\''
[05:25:44] <floatcomplex> sorry, phone keyboard
[05:26:37] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[05:26:59] <Bruda> Hmm ok. Suddenly I realize I might have to ignore the escaped quotes in the code too....
[05:27:09] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[05:29:34] *** Joins: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4)
[05:32:54] *** Quits: ntwk (~ntwk@user/ntwk) (Ping timeout: 265 seconds)
[05:33:06] <caze> Bruda: You should start by drawing your state machine on a piece of paper.
[05:33:33] <Bruda> I write it out in pseudocode in comments usually.
[05:33:57] <caze> Bruda: Draw a diagram.
[05:34:15] <Bruda> flowchart sorta thing?
[05:34:55] <caze> Bruda: https://i.imgur.com/PdQlSur.png
[05:34:56] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4c65-8a88-a069-13d6.res6.spectrum.com) (Remote host closed the connection)
[05:35:21] <caze> I don't know why state 1 is marked an a finish state. Ignore that.
[05:35:58] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[05:36:29] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[05:36:31] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[05:37:24] <caze> Finish states are sort of irrelevant to the problem anyway.
[05:38:13] <Bruda> Ooo perty picture. I think that confuses my brain. 
[05:38:21] <Bruda> But I get the idea
[05:38:24] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Remote host closed the connection)
[05:38:45] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[05:38:53] *** Joins: jdurand (~jdurand@user/jdurand)
[05:39:11] *** Quits: random-nick_ (~random-ni@87.116.181.93) (Ping timeout: 265 seconds)
[05:39:53] <caze> Bruda: What sequence of states does the input //**2**/ would you traverse according to the diagram?
[05:40:27] <caze> (Starting at state 0)
[05:40:43] <Bruda> Gah making me think through another exercise while I'm trying to wrap my head around this one :P
[05:40:54] <caze> It's the same exercise.
[05:41:02] <caze> ,kr1-23
[05:41:02] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-23. Write a program to remove all comments from a C program. Don’t forget to handle quoted strings and character constants properly. C comments don’t nest.
[05:41:24] <caze> You literally cannot solve 1-23 correctly if you cannot answer this.
[05:42:25] <caze> In fact, if you can't answer this question, then any effort you spend on solving 1-23 is a waste of time, because there's like a 99% chance that whatever solution you come up with will be wrong.
[05:42:27] <Bruda> I feel like I have a solution already, I'm just battering it with various code trying to test it out.
[05:43:32] <Bruda> Ok.... Lets see...
[05:43:34] <caze> Like I said, if you can't answer this question, then you haven't really understood the problem that you're being asked to solve, and therefore whatever solution you've come up with will likely be wrong.
[05:44:50] *** Quits: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com) (Remote host closed the connection)
[05:44:51] <Bruda> 0-1-1-2-3....Uhh..where do I got if it's a number 2?
[05:44:52] <caze> I'll start you out - the first char is /, so from state 0, you follow the arrow that is labelled with /. That takes you to state 1.
[05:45:21] <Bruda> s/got/go/
[05:45:29] <caze> An unlabelled arrow is the default.
[05:45:35] <caze> So you'd go back to state 2.
[05:46:07] <Bruda> 0-1-1-2-3-2-3-3-0?
[05:46:23] <caze> Yes.
[05:46:46] <caze> You need four states just to handle /* comments correctly.
[05:47:05] <caze> THe other five states are to handle '' and "".
[05:47:19] *** Joins: cation21 (cation@user/cation)
[05:47:30] <caze> All of the debugging should be done on the diagram.
[05:48:01] <caze> Then you can transcribe the diagram to code.
[05:48:12] <Bruda> Though converting this to code still seems like a confusing challenge. Seems like I would need goto's or something for this to work.
[05:48:22] *** Quits: cation (cation@user/cation) (Ping timeout: 265 seconds)
[05:48:35] <caze> You need a while loop and a bunch of if blocks.
[05:48:53] *** Joins: manjaroi3 (~manjaro-i@125.131.114.50)
[05:48:53] *** Quits: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:50:41] <Bruda> Blah. All my work basically has to go out the window now.
[05:50:43] *** cation21 is now known as cation
[05:51:35] <floatcomplex> caze: lol your flowchart may contain erotic imagery
[05:51:54] <caze> Bruda: Yup. I tried to tell you.
[05:52:13] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[05:52:25] <floatcomplex> caze: i think that flowchart can be simplified if it only needs to accept *valid* c89
[05:52:26] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[05:52:49] <Bruda> Gees. I'm only in chapter one, why do the exercises have to be this complicated for the basics covered so far?
[05:53:07] <caze> Bruda: The book assumes a certain knowledge of computer science concepts.
[05:53:42] <Bruda> Guess I need a book of computer science concepts....
[05:53:45] *** lukedashjr is now known as luke-jr
[05:53:46] <caze> Bruda: Formal language theory is usually 3rd or 4th year undergrad subkect.
[05:54:13] <caze> floatcomplex: Simplified or more complex?
[05:55:33] *** Joins: kuoi (~kuoi@109.175.166.58)
[05:59:09] <floatcomplex> caze: does that flow chart intend to handle c99 comments, i can't tell
[05:59:16] <floatcomplex> and what do the double circles signify
[05:59:17] <caze> floatcomplex: No.
[05:59:23] <caze> floatcomplex: Nothing.
[05:59:30] *** Quits: mjack (~mjack@5634d05c.rev.stofanet.dk) (Quit: mjack)
[05:59:53] <rcf> If they're following K&R2, there's no need for c99 
[06:00:33] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[06:02:18] <caze> Bruda: https://ideone.com/jmP6AF
[06:02:22] *** Quits: Jackii (~Jackiii@93-41-1-112.ip79.fastwebnet.it) (Quit: Leaving)
[06:02:22] <caze> Got it started for you.
[06:03:16] <wroathe> caze: This is one of your favorite concepts to teach, isn't it?  
[06:03:35] *** Quits: Guest8036 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[06:03:43] <Bruda> Well, just so I don't feel like I wasted effort I tried to complete my solution anyways. Let me post it and you can tell me what code input would break my solution.
[06:03:47] <caze> wroathe: It's one of those things that's fun to watch people struggle for hours and think they have a solution.
[06:04:10] <wroathe> Haha, so you like the pain and suffering aspect of it. 
[06:04:43] <caze> I mean, the redemption aspect.
[06:05:03] <Bruda> https://bpa.st/NUPQ
[06:05:04] *** Quits: alch (~alch@151.34.176.48) (Read error: Connection reset by peer)
[06:05:24] <Bruda> I've thrown some basic code at this and so far I'm sorta getting the results I expect.
[06:05:29] <caze> wroathe: It's one of the first things that make people go, "Oh, so this is what computer science actually is."
[06:05:38] <wroathe> caze: Agreed.
[06:05:44] <wroathe> caze: It's a perfect example, really
[06:06:06] <wroathe> Where computability theory meets practical use 
[06:06:06] <Bruda> forget the MAXLENGTH thing, I forgot to remove it.
[06:06:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:06:48] <floatcomplex> caze: trying to identify all of your states in my version
[06:06:56] *** Joins: Guest8085 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[06:07:05] *** Quits: nomn (nomn@user/nomn) (Ping timeout: 252 seconds)
[06:07:08] *** Quits: travankor (travankor@user/travankor) (Remote host closed the connection)
[06:07:18] *** Joins: travankor (travankor@user/travankor)
[06:07:28] *** Joins: nomn (nomn@user/nomn)
[06:07:49] <caze> Bruda: Translating the diagram to code is relatively easy. In fact, there are tools that will do it for you.
[06:08:22] *** Joins: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com)
[06:08:35] <Bruda> coming up with said diagram myself is what is probably beyond me. But I'm trying not to feel like a hopeless case. I feel like I still come up with some solutions if I work at it enough.
[06:09:48] <caze> Bruda: https://ideone.com/XIWU2R
[06:09:50] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[06:09:59] *** Joins: alch (~alch@151.34.163.51)
[06:12:13] *** Quits: travankor (travankor@user/travankor) (Ping timeout: 252 seconds)
[06:12:23] <caze> Bruda: Coming up with the diagram is equivalent to understanding how C comments work.
[06:12:31] <Bruda> Uhh see that's using things I don't think we covered yet in the book. We haven't even started on that complex usage of arrays.
[06:12:50] <Bruda> But impressive though.
[06:13:01] *** Quits: nomn (nomn@user/nomn) (Ping timeout: 240 seconds)
[06:13:16] <floatcomplex> caze: what is the meaning of state 1 in your flowchart
[06:13:26] <caze> Bruda: That is using a table, called an adjacency matrix. It's a solution that is closer to an sutomatically generated solution.
[06:13:57] <caze> Bruda: By hand, you would fill out the rest of the first code I showed you.
[06:14:29] <caze> floatcomplex: https://ideone.com/jmP6AF
[06:15:09] <caze> floatcomplex: ///a should output ///a
[06:15:12] *** Joins: nomn (nomn@user/nomn)
[06:15:28] <caze> floatcomplex: but ///* should only output //
[06:15:53] <floatcomplex> still don't see why thet needs to be handled specielly in pre c99
[06:16:00] <Bruda> Well, I'm testing my solution still. Might be ugly and noobish but pre-C99 it seems like it works for the exercise.
[06:16:34] <caze> floatcomplex: How else would you handle it?
[06:16:55] <caze> I don't see what this has to do with c99.
[06:17:06] <Bruda> I'll keep trying to pretty it up, but I did this much with state tracking instead of loops. That's what the chapter seems to suggest to me based on the code examples I worked with so far.
[06:17:13] *** Joins: ntwk (~ntwk@user/ntwk)
[06:17:22] <caze> That diagram doesn't work with c99 style comments.
[06:17:26] <floatcomplex> idk i'm not at my computer right now, on mobile, can't godbolt. can you tell my why my preciphs godvolt doesnmt handle it
[06:18:22] <Bruda> So why do I have to track anything with // in it? If it wasn't til c99 that single line comments came into play?
[06:18:22] *** Joins: dutch (~DutchIngr@user/dutch)
[06:18:22] <floatcomplex> ,recall me -t godbolt.org
[06:18:22] <candide> [1h6m ago] <f​loatcomplex> Bruda: https://godbolt.org/z/76GdnjTrE
[06:19:18] *** Quits: PortableDave (~portabled@118.208.121.87) (Ping timeout: 265 seconds)
[06:19:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:19:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:19:57] <Bruda> Even if single line comments were a thing, they weren't covered yet thus far in the book. So I think just working with /* */ comments and being mindful of char constants and quoted strings is enough.
[06:20:23] *** Joins: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4)
[06:20:38] <floatcomplex> caze: looks like my version does correctly distinguish between ///a and ///* without needinf a state for //
[06:21:04] <caze> floatcomplex: I don't have a state for //.
[06:21:11] <caze> I have a state for /, and so do you.
[06:21:55] <Bruda> Sometimes I think you elite guys just like showing off or scaring the newbies with your elite code :P
[06:22:05] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[06:22:37] *** Joins: donald1 (~donald@2a01:e0a:95e:7ca0:cdab:367d:d10f:b309)
[06:22:55] <floatcomplex> Bruda: fwiw my code was written with caze's erotic state machine in front of me, and i'm having trouble squaring them
[06:23:05] <floatcomplex> s/wastwad not/
[06:23:06] <floatcomplex> onfg
[06:23:14] <Bruda> lol
[06:23:15] <caze> floatcomplex: My state 1 is your line 40.
[06:23:26] <floatcomplex> s/was/was not/
[06:24:07] <Bruda> I still think I have a working solution so far though given the criteria, and I didn't have to do anything too confusing. Though I understand it's probably kinda ugly and could be refined a bit. But that's ok.
[06:24:18] <caze> floatcomplex: But because you're doing lookahead, you automatically take care of the condition where you have more than one / in a row.
[06:24:31] <caze> floatcomplex: I need a separate state for that, because I'm strictly only reading one char at a time.
[06:25:01] <caze> Bruda: It's just tricky to debug.
[06:25:31] <floatcomplex> idk whether i would call what i'm doing lookahead
[06:25:45] <Bruda> Well the exercise didn't say "make the code easy to debug" lol. But yea it's confusing code. Keeping my head wrapped around it is tricky.
[06:25:49] <floatcomplex> there's more than one getchar, yes
[06:25:50] <caze> You're reading into c and d.
[06:25:58] <caze> That's one look ahead.
[06:26:35] <floatcomplex> it's more like i am storing state in control flow instead of in a variable
[06:26:46] <caze> I guess.
[06:27:02] *** Quits: donald1 (~donald@2a01:e0a:95e:7ca0:cdab:367d:d10f:b309) (Ping timeout: 265 seconds)
[06:28:22] <caze> I pretty much just have one big while ((c = getchar()) != EOF) loop.
[06:28:31] <floatcomplex> "lookahead" implies i'm either calling ungetc or doing something tricky to selectively either call getchar or use a pent value
[06:28:51] *** Quits: ossifrage (~ossifrage@pool-72-78-189-30.phlapa.fios.verizon.net) (Read error: Connection reset by peer)
[06:29:02] <caze> pent value
[06:29:34] <caze> I mean, you are sort of selectively calling getchar.
[06:30:49] *** Joins: Rounin (~david@84.212.130.215)
[06:31:26] <floatcomplex> ,recall -n10 -t pent
[06:31:28] <candide> [21d34m ago] <b​ruda> I used to be a web developer, but I spent some years getting through some health issues which set me back on just about everything coding. [21d3m ago] <f​loatcomplex> quartz: i spent most of my day writing C bindings for a C++ library written by people who think if one thread is good, nine is better [19d19h ago] <a​potheon> NRK[m]: Palemoon should work well with Vimperator or P... <truncated; https://0x0.st/-F-D.txt>
[06:31:38] <floatcomplex> wtf
[06:32:02] <floatcomplex> where is the pent
[06:32:04] <Bruda> hmm
[06:32:07] <caze> Anywho
[06:32:13] *** Quits: nomn (nomn@user/nomn) (Ping timeout: 240 seconds)
[06:32:20] <caze> I think you have the same number of states as me.
[06:32:58] <Bruda> 20:08 < floatcomplex> pent is the past tense of pending
[06:33:07] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 252 seconds)
[06:33:17] <caze> Bruda: Are you going to fill out the rest of my skeleton code?
[06:33:19] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 265 seconds)
[06:34:01] <Bruda> caze, I should.... I just at least wanted to finish my solution, however unknowingly flawed it is. Your solution will help me with ex1-24
[06:34:24] <caze> Bruda: Did yo do 1-17?
[06:34:35] <caze> ,kr1-17
[06:34:35] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-17. Write a program to print all input lines that are longer than 80 characters.
[06:34:48] <caze> 1-17 can also be done using a state machine diagram.
[06:35:00] <caze> In fact, a *lot* of problems can be done this way.
[06:35:18] *** Joins: nomn (nomn@user/nomn)
[06:35:27] <caze> In computing theory, there is a name for all the problems that can be solved using this machinery.
[06:35:33] <Bruda> Well I'm not a computer science genius lol. Though I do eventually find some kind of solution using my primitive newbie ways :P
[06:36:31] <caze> Bruda: That's the difference between what you learn when you go to university to study computer science, versus what you learn by following tutorials and videos on the interwebs.
[06:37:02] <caze> Bruda: The difference in substance is huge.
[06:37:03] <Bruda> The code you showed me has structs, typedef, etc. Things I haven't covered yet in the book.
[06:37:16] <caze> Bruda: Did you look at the first thing I showed you?
[06:37:16] <Bruda> Even switch statement is later on.
[06:37:31] <caze> Bruda: It literally only has while and if.
[06:37:34] <caze> https://ideone.com/jmP6AF
[06:37:56] <Bruda> had to go back  for it. Checking it now
[06:38:08] <caze> bbiaw
[06:39:38] <Bruda> Well... this is gonna be fun.... Think I'm supposed to use the diagram to figure this one out? https://ideone.com/jmP6AF
[06:39:46] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.3)
[06:40:41] <Bruda> Gonna break my brain, dude. But I suppose if I manage this there's some hope for me.
[06:42:20] *** Joins: treble (~treble@user/treble)
[06:45:59] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[06:46:55] *** Joins: simon323 (~simon323@2409:8a34:468:83d0:9543:fac3:aa5a:e4d)
[06:47:00] <Bruda> That code won't even go past state 0 test. 
[06:51:45] *** Quits: Guest8085 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[06:51:52] <amosbird> Hello, is there any case that sigqueue would block?
[06:53:17] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:29] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:54:40] *** Quits: reset (~reset@user/reset) (Quit: reset)
[06:55:28] *** Joins: Guest8036 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[06:55:57] *** Joins: dmenz (~dmenz@2804:14d:5cd4:5e94::d)
[06:56:05] *** Joins: dmenezes (~dmenz@2804:14d:5cd4:5e94::d)
[06:56:24] *** Quits: dmenezes (~dmenz@2804:14d:5cd4:5e94::d) (Remote host closed the connection)
[06:59:53] *** Quits: h4zel (~hazel@user/h4zel) (Ping timeout: 252 seconds)
[07:00:03] *** Quits: kassle (~kassle@202.73.24.66) (Quit: Leaving shadow ...)
[07:00:07] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:1c0d:269a:4896:ee44)
[07:00:47] *** Joins: h4zel (~hazel@user/h4zel)
[07:01:10] *** Joins: kassle (~kassle@202.73.24.66)
[07:01:25] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[07:02:49] <floatcomplex> caze: i'm actually not entirely sure what valid C89 requires states 6,7,8 in your diagram
[07:03:05] <rcf> amosbird: POSIX specifies 'shall return immediately', so no. 
[07:03:09] <floatcomplex> i coded it up in mine too, but struggling to write a comment that exercises it
[07:03:12] *** Quits: skintimidation (~skintimid@user/skintimidation) (Quit: Client closed)
[07:03:15] <floatcomplex> or non-comment
[07:03:29] <Bruda> I think I need to come up with a simpler diagram for my purposes then translate that to a working solution using your idea, floatcomplex.
[07:04:16] <rcf> amosbird: if there are too many signals queued already, you just get an immediate error return with EAGAIN set. 
[07:04:52] *** Quits: Charadon (~Charadon@155.138.164.183) (Remote host closed the connection)
[07:05:25] *** Quits: h4zel (~hazel@user/h4zel) (Ping timeout: 240 seconds)
[07:06:13] <floatcomplex> iow my version allows for /* to occur when inside single quoes and not be considered the beginning of a comment, but that's not valid c
[07:06:20] <floatcomplex> is there any valid c where states 6,7,8 are needed
[07:06:37] <Bruda> floatcomplex: yea my solution prints out the comment if it's inside " ".
[07:07:00] *** Joins: h4zel (~hazel@user/h4zel)
[07:07:19] <rcf> To be truly evil, they should have specified you handle trigraphs as well 
[07:07:39] <Bruda> In my notes anything in double quotes is printed as is. Single quotes or 'character constats' printed as is. Anything between (and including) /* and */ are to be ignored.
[07:07:44] <rcf> (they are infamous for triggering bizarre output in some styles of comment) 
[07:07:44] *** Joins: gco (~gco@2601:647:5a00:223:14ad:de7b:9961:3438)
[07:07:57] <Bruda> What else should I note?
[07:08:12] <Bruda> In respect to K&R chapter 1 material?
[07:08:14] *** Joins: skintimidation (~skintimid@66.205.192.111)
[07:08:24] *** Quits: skintimidation (~skintimid@66.205.192.111) (Client Quit)
[07:09:24] <amosbird> rcf: thanks
[07:09:40] <Bruda> And ex1-23 related that is.
[07:11:15] *** Quits: frost (~frost@user/frost) (Ping timeout: 252 seconds)
[07:11:18] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:13:41] <caze> floatcomplex: I just added it because the exercise specifically mentions that case, and I couldn't think of what else they could've meant.
[07:13:50] <floatcomplex> yeah me too
[07:13:56] <floatcomplex> but idfk how to exercise it
[07:14:21] <caze> Bruda: The code is not complete. States 3-8 are empty.
[07:14:30] <Bruda> I have a working solution, albeit ugly one that could be improved with some loops or such. But I think that diagram is overcomplicating this exercise.
[07:14:33] <caze> 2-8, rather.
[07:14:53] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:1c0d:269a:4896:ee44) (Ping timeout: 265 seconds)
[07:15:09] <caze> The diagram is simplifying the exercise. It is literally distilling it down to the most basic operations.
[07:15:42] <Bruda> I don't need to care about /// or *** or things like that. I'm simply removing basice /* comments */ from 'code'.
[07:15:53] <Bruda> s/basice/basic/
[07:17:23] <caze> Bruda: My diagram does not care about those either.
[07:17:45] <caze> Bruda: What you do need to care about are things like ///******/
[07:17:46] <Bruda> But if I did want to do the complicated way, do you have a computer science book in mind that would complement the material I'm trying to learn?
[07:19:35] <Bruda> doing ///*****/ isn't even valid code or anything after // would be ignored in a comment anyways. So how would I end up having to deal with that case anyway?
[07:19:52] <caze> / is not a c89 comment.
[07:19:57] <caze> ///
[07:19:59] <caze> //
[07:20:25] <Bruda> Right. I knew that. So I don't worry about // style comments. 
[07:20:33] <caze> Like you just said: removing basice /* comments */ from 'code'
[07:20:54] <Bruda> right. So where would I run into something like ///****/ ?
[07:20:57] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[07:21:10] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[07:21:16] *** Quits: chenqisu1 (~03cia7d@183.217.201.63) (Remote host closed the connection)
[07:21:23] <caze> In input.
[07:21:39] <caze> Bruda: https://ideone.com/gipDHz
[07:21:40] *** Joins: chenqisu1 (~03cia7d@183.217.201.63)
[07:22:13] *** Quits: h4zel (~hazel@user/h4zel) (Ping timeout: 240 seconds)
[07:22:14] <caze> Bruda: https://ideone.com/6AUWZw
[07:22:40] <caze> Bruda: Your program does not remote /* comments */.
[07:22:43] <caze> remove
[07:23:04] <Bruda> You typed in ///**/. That's not a /* */ comment.
[07:23:15] *** Joins: h4zel (~hazel@user/h4zel)
[07:23:32] <Bruda> But I think I see where you are going with that. I just don't understand why that would be typed into 'code' that way.
[07:23:35] *** Quits: nomn (nomn@user/nomn) (Ping timeout: 265 seconds)
[07:24:13] <NRK[m]> hey, i have code like that
[07:24:19] <caze> Bruda: It is a /* */ comment with two / in front of it. It should not matter what is in front of a /* */ comment.
[07:24:29] <caze> A /* */ comment is a /* */ comment.
[07:24:43] <NRK[m]> ahh, nvm it's different
[07:25:03] <NRK[m]> `/* stuff //other sutff */`
[07:25:33] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[07:25:34] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[07:25:56] *** Joins: kish` (~sid742412@user/aqua)
[07:26:06] <Bruda> I appreciate that you found a way to break my code. Gives me something to think about. I'm also gonna try reworking things based on your idea, But I'm not sure I'm fully wrapping my head around this diagram in such a way that I can complete your skeleton code. I might need to work on it my way.
[07:26:12] <wroathe> Bruda: If you're trying to learn parser theory, I can recommend the first 4 or 5 chapters or so of the dragon book
[07:26:25] <wroathe> Bruda: There are other good ones out there, but that's the one I've read and I thought was good enough
[07:26:36] <Bruda> wroathe: dragon book? 
[07:26:48] *** Joins: nomn (nomn@user/nomn)
[07:26:55] <NRK[m]> "writing and designing compilers"
[07:27:01] <NRK[m]> or something along those lines
[07:27:09] <NRK[m]> everyone just calls it dragon book
[07:27:10] <wroathe> Compilers: Principles, Techniques, and Tools
[07:27:17] <Bruda> Ah that exact thing just came up when I put in 'comptuer science dragon book'
[07:27:29] <caze> Bruda: https://godbolt.org/z/ed4MsWzca
[07:27:30] <Bruda> s/comptuer/computer/
[07:27:33] <NRK[m]> yes, thank you wroathe
[07:27:36] *** Quits: Guest8036 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[07:27:53] <caze> Bruda: That is equivalent to: int a = 4 / 2;
[07:28:07] *** Quits: h4zel (~hazel@user/h4zel) (Ping timeout: 252 seconds)
[07:28:35] <floatcomplex> is wroathe the past tense of writhe
[07:28:37] <Bruda> The book didn't mention comments starting with //* */ though. But that's a mix of c99 comment and C comment.
[07:28:53] <Bruda> the first // would start the comment the rest is ignored.
[07:29:12] <caze> Bruda: It is not a mix of c99 comment and C comment.
[07:29:14] <floatcomplex> that's really just a c99 comment, nothing more
[07:29:19] <wroathe> floatcomplex: It's from my edgier days when I thought a portmanteau of wrath and loathe would make me cool 
[07:29:20] <caze> Bruda: It is the division operator followed by a comment.
[07:29:23] <Bruda> floatcomplex: thank you
[07:29:30] *** Joins: h4zel (~hazel@user/h4zel)
[07:29:48] <wroathe> Now in my 30s I'm just rolling with it 
[07:30:05] <caze> Bruda: int a = 4 //*comment*/2;
[07:30:13] <Bruda> a division operator directly followed by a / turning it into a c99 comment. But who puts a comment in the middle of a simple math expression?
[07:30:20] <caze> Bruda: Do you understand that in C89, that is int a = 4 / 2;
[07:30:46] <floatcomplex> ,cc int a = 4 //* comment lol */2;
[07:30:47] <candide> floatcomplex: error: expected ',' or ';' before 'return'
[07:30:48] <Maxdamantus> At least it's not a misspelling of an insect from when you were 10.
[07:31:05] <floatcomplex> ,cc int a = 4 /* comment lol */2;
[07:31:06] <candide> floatcomplex: error: expected ',' or ';' before numeric constant
[07:31:13] <caze> -std-c89
[07:31:24] <caze> =
[07:31:26] <floatcomplex> ,cc -std=c89 int a = 4 //* comment lol */2;
[07:31:28] <candide> floatcomplex: no output: a = 2
[07:31:33] <NRK[m]> ,cc -std=c89 int a = 4 //* comment lol */2;
[07:31:34] <floatcomplex> chicken dinner
[07:31:35] <candide> NRK[m]: no output: a = 2
[07:31:59] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:b047:382:834a:1550)
[07:31:59] <caze> Bruda: I mean, it's not really your place to change the rules of how c89 comments work?
[07:32:05] <Bruda> I get that I need a solution that factors in that sort of thing. But why overcomplicate something that's just meant to reinforce some basics of K&R chapter 1?
[07:32:13] <caze> Bruda: You either understand how they work, or you don't.
[07:32:16] <NRK[m]> afaik, c89 requires comments to be replaced by a single space char
[07:32:25] <Bruda> I'm not learning computer science, just basic C programming principals at this point.
[07:32:41] <floatcomplex> why are the great minds of this channel not focusing on why k&r2 exercise 1-23 specifically mentions character constants
[07:32:55] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:33:08] <wroathe> Bruda: You actually don't need to know these concepts to work through K&R. That's one of the beauties of K&R. Do things the brute force way on your first go through, and then as you become a more competent computer scientist return periodically and think about how you could've solved the problems in a more elegant way
[07:33:09] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[07:33:31] <caze> <caze> You literally cannot solve 1-23 correctly if you cannot answer this.
[07:33:33] <wroathe> Bruda: They wrote it in such a way that there's real computer science underpinning most of the questions, but the tasks they're asking you to complete are simple enough to be solved without it
[07:33:44] <floatcomplex> the book is for people who want to write code for a living. computer scientists don't write code
[07:33:46] <caze>  <caze> Like I said, if you can't answer this question, then you haven't really understood the problem that you're being asked to solve, and therefore whatever solution you've come up with will likely be wrong.
[07:33:49] <Bruda> wroathe: that's what I was thinking at first, but caze keeps trying to put me through the elite way on the first pass.
[07:33:56] <wroathe> caze: Correctness is overrated
[07:34:13] *** Quits: h4zel (~hazel@user/h4zel) (Ping timeout: 240 seconds)
[07:34:31] <wroathe> Bruda: That said, he's put in a lot of work to help you with this. Make an effort :P
[07:34:38] <wroathe> Bruda: The concept he's teaching isn't that hard
[07:34:51] <NRK[m]> kek, from what i see, he's just telling you that you need to understand the rules of C89 comment to actually filter them out
[07:35:15] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:35:40] <floatcomplex> wroathe: "when you become a computer scientist" is there anything that can be done to avoid that or is it inevitable? like are there pills or exercises
[07:35:43] <Bruda> I get that, and I'm not disregarding anything. In fact I'll look into that dragon book, but I still feel like things are getting needlessly overcomplicated for a chapter 1 exercisde.
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:21] <wroathe> floatcomplex: I said _more competent_ :P Implying he already is one. It's too late for pills. 
[07:36:23] <floatcomplex> Bruda: did you look at my godbolt
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:32] <caze> Well, the only thing I'd be concerned about is if you truly believe that //*comment*/ does not contain a C89 comment, because there is a / in front of it.
[07:36:54] <wroathe> floatcomplex: This affliction will last a lifetime I'm afraid 
[07:36:59] <Bruda> floatcomplex: the one you posted earlier that I was holding off on? Yea I peeked at it. I like your idea better for this exercise. Is that valid solution?
[07:37:05] *** Joins: Macuser (~Macuser@216.30.159.201)
[07:37:12] <floatcomplex> it's not hard, and i'm arguing that there may be one whole branch of it that can be pruned if it only has to work on *valid* c89 code
[07:37:20] <floatcomplex> Bruda: afaik yes
[07:37:59] <caze> imo floatcomplex's solution is more complex because he does getchar in multiple places, and that's more to keep track of.
[07:38:01] <wroathe> caze: A quick peek at one of those K&R wiki sites shows that there's a variety of ways people solve this exercise. Some just use variables to keep track of state in a loop.
[07:38:13] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 240 seconds)
[07:38:15] <floatcomplex> right now it handles an arbitrary number of nonescaped characters in single quotes, which isn't valid c
[07:38:26] <Bruda> I glanced it over without trying to burn it in so much that I just write the exact same solution. But I understand what it's doing and I'm trying to put together my own solution. AT this point I'm going back to pseudocode and trying to correctly piece the logic together.
[07:38:45] <wroathe> caze: Not saying that's the best way, but I'd file it away under a "brute force solution that can be improved later once I understand how state machines work"
[07:38:53] <floatcomplex> and i'm struggling to come up with a *valid* c sequence of characters that necessitates that set of states
[07:39:07] <caze> Bruda: Okay, but spend some time understanding how c89 comments work.
[07:39:22] <caze> Bruda: And maybe take a look at my diagram and sample code.
[07:39:39] <caze> Bruda: See how it handles the problem of //**/
[07:39:50] <Bruda> caze I will. Thanks for the constructive input. I guess I just didn't expect someone to try to put a division operator directly in front of a /* */ comment, but the guys tested that right here in chat and it was broken code anyways.
[07:40:14] <caze> Bruda: It is valid c89 code.
[07:40:21] <NRK[m]> it wasn't. u just needed -std=c89
[07:40:32] <caze> Bruda: The errors were from nto specifying c89 mode.
[07:40:49] <NRK[m]> ,cc -std=c89 int a = 4 //* comment lol */2; printf("%d\n", a);
[07:40:51] <candide> NRK[m]: 2
[07:41:01] <Bruda> ah I missed that part I guess.
[07:41:26] <NRK[m]> under c99+ that code will be broken i believe. but it's valid under c89
[07:41:59] <Bruda> Well. Again I'm starting from scratch anyways using what ideas I can wrap my head around here. At least now I know what breaks my code and what to test.
[07:42:41] <wroathe> caze: I guess my point is that if I were tasked with teaching someone how to program, and if I were to have them go through K&R, I'd just have them focus at taking a good crack at each exercise, rather than trying to get them to write bullet-proof programs that solve the problem. 
[07:43:17] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:43:25] <caze> wroathe: I think I wouldn't teach someone how to program, using C.
[07:43:27] <wroathe> caze: Because they can still get value out of K&R by working through it in that way, and then later on when they're reading a book on parser theory something may then click and they'll think back to an earlier exercise they struggled with and finally see what the point of it was
[07:43:35] <Bruda> wroathe: I agree there. The newbie code isn't going into production code, just needs to be practicing the basic principals being taught in the chapter.
[07:44:00] *** Joins: Viewday111 (~Viewday@user/viewday)
[07:44:01] <caze> But for other reasons than this particular exercise.
[07:44:04] <Bruda> Is Dragon Book 2nd edition good enough? 
[07:44:09] <zwr> or maybe they'll be like me and forget what the exercises even were about
[07:45:09] <wroathe> Bruda: There are only two editions 
[07:45:20] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[07:45:20] *** Viewday111 is now known as Viewday11
[07:45:25] <Bruda> I'll assume I can work with this one I found then.
[07:45:31] <caze> Yes, the exercises can be done naively. They are forgetable if done that way.
[07:45:42] <Bruda> Does this book require I already have some mastery of C or anything?
[07:45:59] <wroathe> Bruda: No, but it's conceptually more dense
[07:46:01] <caze> 1-17 is one of those exercises. 
[07:46:04] <caze> ,kr1-17
[07:46:04] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-17. Write a program to print all input lines that are longer than 80 characters.
[07:46:17] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[07:46:21] <floatcomplex> someone take my goddamn nerd bait
[07:46:23] <caze> You can hardcode a maximum line length, and then it becomes a trivial, forgettable exercise.
[07:46:40] <caze> If you write the version that can deal with arbitrarily long lines, then it tends to stick in your brain.
[07:46:50] <caze> floatcomplex: Did you figure it out?
[07:47:14] <caze> Bruda: Did you do 1-17 already?
[07:47:19] <Bruda> wroathe: ok thank you. I'll try to cover it as I go. If I get overwhelmed in these exercises maybe I'll come back to them so that I don't have to feel Like I'm stalling because certain exercises are using concepts I'm not fully aware of.
[07:47:22] <zwr> yeah 1-17 is easy to solve for me now, not sure if beginner me solved it
[07:47:29] <Bruda> , k&R ex1-17
[07:47:33] <wroathe> caze: Yeah, I'd say it's a balance. We've talked about this before, but I wouldn't necessarily force state machines on a first time K&R reader. That said, I agree with you on 1-17
[07:47:53] <Bruda> , Kr1-17
[07:47:53] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-17. Write a program to print all input lines that are longer than 80 characters.
[07:48:01] <wroathe> Bruda: Well, that's tricky. I'm not giving you a blank check to move on when the going gets tough :P
[07:48:17] <caze> zwr: Can your versions handle infinitely long lines?
[07:48:18] <Bruda> Yes, I did that exercise and I took into account the arbitrary line length example that was put in front of me before. 
[07:48:40] <caze> Bruda: 1-17 can be solved with a state machine diagram also.
[07:48:46] <zwr> caze: yeah the one I'm thinking up now can, the beginner me version can't. guess I'll just write the good solution now
[07:49:20] <Bruda> Hmm. Would it be a simpler one than this comment removal exercise?
[07:49:34] <caze> Bruda: Yes.
[07:50:03] <Bruda> So state machines. Is this something I can cover in this dragon book?
[07:50:15] <wroathe> Bruda: Yes
[07:50:28] <caze> Bruda: State 1: Put each character into a buffer until the buffer contains 80 characters. State 2: print contents of buffer. State 3: print every character until you see a '\n'.
[07:50:39] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 265 seconds)
[07:50:40] <Bruda> Sweet. Maybe that should be my next step before continuing.
[07:51:01] <caze> Bruda: That book is like 10x as long as K&R.
[07:51:09] <Bruda> caze: sounds simple put like that. 
[07:51:25] <NRK[m]> infinitely long lines? how would you even store such thing in memory
[07:51:33] <floatcomplex> you don't
[07:51:33] <caze> NRK[m]: You don't.
[07:51:47] <NRK[m]> hmmm. what am i missing then
[07:51:59] <wroathe> Bruda: I wouldn't recommend taking a detour to the dragon book if you're struggling with early chapters of K&R
[07:52:01] <Bruda> caze: yea I'm sure it covers a lot. For now I'm just gonna try to conver the necessary parts to get through what I can in K&R.
[07:52:19] *** Quits: nomn (nomn@user/nomn) (Ping timeout: 252 seconds)
[07:52:22] <caze> NRK[m]: read char, print char, read char, print char, read char, print char, read char, print char
[07:52:32] <caze> NRK[m]: It's called a loop.
[07:52:33] <floatcomplex> caze: no i did not figure it out, but i've had like ten full minutes at an actual computor keyboard in the last three hours
[07:52:41] <Bruda> wroathe: Yea I'm not gonna jsut front-to-back the dragon book. I'll jump to state machines, go back to K&R again.
[07:52:42] <floatcomplex> NRK[m]: or some loops
[07:52:46] <caze> Well I'm eating sushi right now.
[07:52:54] <wroathe> Bruda: Well, let me know how that goes
[07:53:03] <wroathe> Bruda: The book calls them "finite automata" 
[07:53:13] <NRK[m]> well, you're not supposed to print unless the line is N chars long
[07:53:26] <NRK[m]> and N can be infinitely long as well i assume
[07:53:28] *** Joins: nomn (nomn@user/nomn)
[07:53:28] <caze> NRK[m]: SO wait then.
[07:53:35] <caze> NRK[m]: N is 80
[07:53:38] <floatcomplex> how the fuck do you get sushi at 11:30 pm in brumfridge or whatever it's called
[07:53:49] <Bruda> wroathe: should I skipp the dragon book altogether and keep trying to wrap my head around all this?
[07:53:50] <floatcomplex> are you eating...old susgi
[07:53:59] <NRK[m]> oh, so N stays 80? that's easy then
[07:54:04] <wroathe> Bruda: I just said that. I think you should stay focused on K&R
[07:54:10] <NRK[m]> i thought u said something about not hardcoding that
[07:54:20] <wroathe> Bruda: And since you're so far into caze's explanation of basic state machines, you should see it through :P
[07:54:25] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:54:27] <wroathe> Bruda: The damage is already done. Might as well finish.
[07:54:45] <caze> floatcomplex: Supermarket sushi.
[07:55:49] <Bruda> Actually I'm not really that far into it. I was just making notes and trying to wrap my head around it. Feels like I could use some background on the subject.
[07:55:50] <caze> Although I actually like to let premade sushi warm up to room temperature so that the rice isn't hard.
[07:56:21] <wroathe> Bruda: Does this diagram from the wikipedia article help at all? https://en.wikipedia.org/wiki/Finite-state_machine#/media/File:Turnstile_state_machine_colored.svg
[07:56:25] <Bruda> But I'm putting notes into files for each exercise n stuff. Trying to keep the suggestions handy.
[07:56:29] <caze> Bruda: You kind of only need to spend some time looking at my diagram and the code for the first two states I filled out in my skeleton code.
[07:56:50] <wroathe> Bruda: For a coin operated turnstile 
[07:58:04] <wroathe> Bruda: Take a crack at what caze is telling you to do
[07:58:05] <Bruda> wroathe: I guess that simplifies the state machine idea a bit. I'll stare at that for a bit.
[07:59:25] <floatcomplex> caze: yesterday i had food truck dim sum with sticky rice with "chinese sausage" and god help me it was amazing
[07:59:38] <wroathe> Bruda: The important thing to think about with that diagram is the idea of being _in_ a _state_. 
[07:59:47] <wroathe> Bruda: In the beginning you're in the state of the turnstile being locked
[07:59:58] <wroathe> Bruda: If you push on the turnstile, you remain in the state of it being locked
[08:00:11] * floatcomplex wonders if any cs student actually knows what a turnstile is
[08:00:21] <wroathe> Bruda: But if you insert a coin, you _transition_ to the state of the turnstile being unlocked 
[08:00:37] <wroathe> Bruda: If you insert another coin, you transition again to the state of the turnstile being unlocked
[08:00:59] <caze> Yeah, they've been replaced with gates now.
[08:01:03] <wroathe> Bruda: But if you finally push the turnstile when you're in the state of it being unlocked, it returns the turnstile back to the state of being locked
[08:01:03] <Bruda> caze: I promise to try. I'm gonna just try for now to get this state machine idea down better.
[08:01:25] <caze> With motin sensors.
[08:01:29] <caze> Body sensors?
[08:01:45] <wroathe> Turnstile: https://en.wikipedia.org/wiki/Turnstile#/media/File:Turnstiles_in_Alewife_station,_August_2005.jpg
[08:01:56] <Bruda> wroathe: I'm following you. If I was translating this to code I think that's where I'm pushing uphill a bit. But I think it'll register if I work with it.
[08:01:56] <caze> Actually, I don't think they have any sensors.
[08:02:04] <caze> I think I've had one close on me before.
[08:02:41] <caze> wroathe: This is what's there now. https://www.youtube.com/watch?v=6JyO2YHtyAg
[08:02:42] <candide> Title of caze's link: Spastic Fare Gate at Alewife Station - YouTube
[08:02:53] <Bruda> wroathe: this is like one of those push button arcade coin slots right?
[08:04:15] <wroathe> Bruda: Anyway, so the concept caze is teaching you is the same. Let's say you're trying to match a line comment: // foo. and, your cursor is just before the first /. You're in the initial state of not having seen a comment. Then, when you consider the first / as input, you _transition_ to the state of maybe being in a line comment (You're not sure yet, you still need another / to confirm). Then, when you 
[08:04:21] <wroathe> consider the next / you transition to the state of being in a line comment. Finally, you consume characters until the next newline character, at which point you transition back to the initial state, having recognized a line comment
[08:04:33] *** Joins: explosion-mental (~explosion@2001:470:69fc:105::dac2)
[08:04:46] <caze> We're ignoring // comments.
[08:04:49] *** Joins: Burgundy (~yomon@79.115.213.171)
[08:05:07] <Bruda> Yea, but I see where you are going with that.
[08:05:07] <wroathe> caze: I find them easier to teach :P 
[08:06:10] <wroathe> Bruda: Anyway, do what caze is telling you to do :P
[08:06:22] *** Quits: davros (~davros@host86-185-99-134.range86-185.btcentralplus.com) (Remote host closed the connection)
[08:06:32] <wroathe> caze: All this new fangled technology
[08:06:39] <wroathe> caze: My old bones can't keep  up
[08:06:48] <wroathe> keep up*
[08:07:30] *** Quits: Jong (~Jong@2620:10d:c090:400::5:4540) (Quit: Textual IRC Client: www.textualapp.com)
[08:08:21] <floatcomplex> caze: did YOU figure it out yet, or is there sushi
[08:09:21] <wroathe> Bruda: So anyway, how do you model these states I'm talking about to write a program? Simple. You enumerate them. The initial state is state 0. The state of having seen a /, but still pending another / is state 1. The state of having seen // is state 2. If you're in state 1 (still waiting for that second /), and you receive the letter 'a' instead of another /, you transition back to state 0 (because 'a' is not 
[08:09:27] <wroathe> the second / you needed in order to transition to state 2)
[08:10:12] <wroathe> Bruda: So literally it's enum state { INITIAL, FIRST_SLASH, LINE_COMMENT }, and then a variable that holds which of those states you're in, depending on what you've seen in the input
[08:10:15] *** Joins: kurahaupo (~kurahaupo@203-194-51-46.static.tpgi.com.au)
[08:11:00] <Bruda> Ok. I'm gonna save all that to my notes and keep processing it.
[08:11:35] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[08:12:18] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:12:18] <wroathe> Bruda: Just like the states in that turnstile example are states 0 and state 1, for locked and unlocked respectively
[08:12:50] <wroathe> Bruda: If you look at what I wrote, and then look at caze's diagram and his code example it should start to make a kind of sense
[08:14:57] <wroathe> Or celphi_ can explain it to you
[08:15:01] <caze> Bruda: The code literally just follows the arrows in the diagram.
[08:15:11] <Bruda> It's definitely helping when you put it that way. Translating it to code is the uphill part for me. But I think it'll come to me as I go. Maybe like caze mentioned, the 1-17 exercise would be a simpler starting point.
[08:15:20] <caze> Plus some "side effects".
[08:15:25] <floatcomplex> lol
[08:17:26] <caze> Bruda: Do you see the correlation between the diagram having 8 states, and the code having a series of blocks like: if (state == 0) {}, ... if (state == 8) {} ?
[08:18:20] <Bruda> I have to replace the state=0 parts with the equivalent code version of that state check?
[08:18:50] <caze> Actually, there are 9 states. 0-8.
[08:19:06] <caze> Bruda: No, I've completed states 0 and 1 for you.
[08:19:27] <caze> You have to fill in the rest of the states (2-8).
[08:19:55] <caze> You fill them in with code that does what the arrow leaving that state do.
[08:20:06] <Bruda> The part that confuses me is the continues. The first continue would skip the rest of the loop wouldn't it?
[08:20:16] <caze> Yes.
[08:21:03] <caze> Because once that state transition is complete, you want to read the next character. And you do that at the top of the loop.
[08:21:12] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:21:41] <Bruda> How does the code get past the continue in order to check the next state?
[08:21:56] <caze> For instance, in state 0, let's say you read a '/' character, and line 9 changes the state to 1. You don't want to go down to the state == 1 block down below until you've read the next character.
[08:22:33] <caze> Bruda: Do you know the difference between breaking out of a loop, and continuing a loop?
[08:22:54] <Bruda> Well breaking the loop ends the loop entirely, continuing goes to the next iteration.
[08:23:08] <Bruda> I've just never seen a continue like this before.
[08:23:16] <caze> Bruda: Yes. The next iteration checks the next state.
[08:23:41] *** Quits: rahl (~rahl@102.114.126.85) (Ping timeout: 256 seconds)
[08:24:00] <wroathe> Got a link to this code? 
[08:24:12] <Bruda> That's pretty wild. I didn't realize it would work that way. I figured it would just go bac to the top of the loop and be back to checking the first state again
[08:24:17] <Bruda> https://ideone.com/jmP6AF
[08:24:29] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 265 seconds)
[08:25:18] <caze> If you want, just think about the state transitions first.
[08:25:26] <Bruda> Not even sure break or continue were even mentioned yet so far in the chapter. Those appear to come in chapter 3.
[08:25:27] *** Joins: rahl (~rahl@102.114.68.112)
[08:25:30] <caze> Then think about the side effects that each transition should cause.
[08:26:09] <caze> Bruda: For instance, if you're in state 0, and you see a '/' character, then the state should change to 1. This is what line 9 does.
[08:26:32] <caze> Bruda: Then you continue to the next iteration of the loop.
[08:27:08] <caze> Oh, the continues need to be inside the if blocks. My bad.
[08:27:13] <wroathe> LOL
[08:27:22] <wroathe> I was looking at this going "what the hell am I not seeing"
[08:27:26] <Bruda> Well shit. You had me all fucked up there.
[08:27:30] <wroathe> caze: I trust you too much
[08:27:32] <arkanoid> should I expect "#if defined(_MSC_VER) && defined(_WIN64) && (_MSC_VER > 1400) || defined(__MINGW32__) || defined(__MINGW64__)" to be true on a linux machine compiling with gcc?
[08:27:44] <caze> Well I was eating and coding at the same time.
[08:28:01] <Bruda> Now I think I can put it together a bit easier lol
[08:28:09] <floatcomplex> that brace and indent style makes me want to fight someone
[08:28:17] <wroathe> floatcomplex: fite me
[08:28:19] <Bruda> This whole time it was partially the continues that had me so thrown off...
[08:28:30] <caze> Bruda: Oh sorry.
[08:28:41] <wroathe> Too funny
[08:28:52] * wroathe hands caze the dunce cap
[08:29:00] <Bruda> The amazing caze everyone.
[08:29:03] * Bruda applauds
[08:29:36] <caze> floatcomplex: I was trying to work on a style that makes the code belonging to each state and token stand out from each other.
[08:29:37] <Bruda> But ok. I think that simplified it a tad for me. Now maybe with the code corrections it'll start clicking better.
[08:29:53] * floatcomplex slaps wroathe around a bit with a large sushi-grade tuna
[08:30:37] <wroathe> https://www.youtube.com/watch?v=T8XeDvKqI4E
[08:30:38] <candide> Title of wroathe's link: Monty Python - The F​ish Slapping Dance - YouTube
[08:30:58] *** Joins: kurahaupo_ (~kurahaupo@pa49-180-180-200.pa.nsw.optusnet.com.au)
[08:30:59] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 256 seconds)
[08:31:28] <Bruda> The code goes hand in hand with the diagram of course. Without that the code probably seems confusing to a newbie. I'm used to using pseudocode to figure out my algorithms.
[08:31:59] *** Joins: kdc (~kdc@196.211.197.159)
[08:32:00] <caze> Bruda: Some mediums are better for communicating certain concepts than others.
[08:32:15] <caze> Code is often the worst medium.
[08:33:21] *** Joins: mkv (~znc@ubuntu/member/m4v)
[08:33:26] <Bruda> Yea, though sometimes things are more personal to each person. The original methods that helped one understand some things might always be a prominent way to solve problems.
[08:33:40] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 265 seconds)
[08:33:49] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 256 seconds)
[08:33:49] *** mkv is now known as m4v
[08:33:52] <Bruda> But I'm not dismissing anything here. It'll be useful to know this I bet.
[08:34:35] <Bruda> Flowcharts and pseudocode were things that came up at ITT for me 20 years ago. But they just ran me through vb6.
[08:34:38] *** Quits: kurahaupo (~kurahaupo@203-194-51-46.static.tpgi.com.au) (Ping timeout: 265 seconds)
[08:35:02] <Bruda> Later I went into web development instead. But never had to do anything too crazy in code. Half my work was designing the interfaces that way.
[08:36:24] <Bruda> Learning C is my way of going beyond all that and trying to dive into systems programming. Even if all I ever do is simple programs I'm just mainly doing this as a hobby for fun.
[08:38:03] <caze> Bruda: So your code https://bpa.st/NUPQ for the input of "//", immediately on line 46 and 47, outputs both of those chars.
[08:38:31] <zwr> I spent way too long fixing an off by one error, but here's my solution to K&R C's exercise 1-17, this time not making the rookie mistake of failing to cope with infinitely long lines: https://paste.opensuse.org/view/raw/2791a3bd
[08:38:45] <caze> Bruda: But according to my state diagram, the second / keeps the state in state 1, it doesn't send it back to state 0. Meaning that second / could potentially be the start of a real comment.
[08:39:32] <caze> Bruda: You do of course, output the first /, which you know by now isn't a comment.
[08:39:44] <Bruda> Hmm. I see how that is a bit cleaner than my way. I'd have to add additional confusing state checks to accomodate for that.
[08:39:52] *** Joins: doofenshmirtz (~farawayas@103.160.128.7)
[08:40:40] <Bruda> So did you revise that code or do I have to figure out what you meant to do?
[08:41:34] <caze> Bruda: https://ideone.com/qjVPOx
[08:41:39] *** Quits: soapsudsxx (~soapsudsx@209.221.40.158) (Remote host closed the connection)
[08:41:50] <caze> Bruda: Line 19 is the relevant line.
[08:42:31] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[08:42:33] <caze> Bruda: To be clear, the / that it's outputting is the / from the *previous* iteration of the loop, that we've only now learned is not the beginning of a comment.
[08:42:50] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Client Quit)
[08:43:01] <caze> We won't know about the / that we've just read in *this* iteration of the loop until the next iteration.
[08:43:23] <Bruda> Right ok.
[08:44:20] <wroathe> Bruda: You still around?
[08:44:23] <wroathe> Bruda: https://ideone.com/1Dl1yi
[08:44:30] <wroathe> Bruda: ^ turnstile example
[08:44:43] *** Quits: pizdets_ (~pizdets@183.182.111.243) (Ping timeout: 250 seconds)
[08:44:51] *** Joins: pizdets (~pizdets@183.182.111.137)
[08:45:21] <Bruda> yea
[08:45:50] <caze> zwr: https://ideone.com/T6jvsG
[08:48:09] <Bruda> Crap I lost that turnstile diagram.
[08:48:33] <wroathe> https://en.wikipedia.org/wiki/Finite-state_machine#/media/File:Turnstile_state_machine_colored.svg
[08:48:35] <Bruda> found it
[08:49:32] *** Joins: Jong (~Jong@2620:10d:c090:400::5:4540)
[08:49:48] <caze> Actually, my column counter could overflow.
[08:50:07] <Bruda> Saving the code and the diagrams for both of these to work with.
[08:50:39] <zwr> caze: it printed the line that was exactly 5 characters
[08:51:46] <caze> zwr: I guess I have an off by one error also.
[08:51:52] <Bruda> I need to head to bed. But I'm gonna tackle this tomorrow for sure.
[08:51:59] <caze> I'm more concerned with the counter overflowing though.
[08:52:15] <wroathe> Bruda: This is the basis for pretty much everything in parsing text with a computer
[08:52:20] <wroathe> Bruda: So yeah, good to know for sure
[08:52:55] <caze> Bruda: More than several books have been written for which this is foundational.
[08:52:58] <Bruda> Yea I'm definitely gonna play with it and understand it. Maybe cover the topic in Dragon book too. finite what?
[08:53:08] <wroathe> automata
[08:53:22] <Bruda> finite automata. Got it.
[08:53:30] <floatcomplex> wee beasties what do your code
[08:53:58] <caze> Bruda: Have you ever heard of the P=NP problem?
[08:54:02] <Bruda> I hate Dolphins file search dialog....
[08:55:02] <gnoo> i solved k&r2 1-17 like this. should handle infinitely long lines http://ix.io/3Hke
[08:55:18] <zwr> caze: also it might be silly but I made sure mine just works with non-textual input. i.e it copes for instance with sending `printf '\xFF'` (happens to be EOF on my system) to its stdin
[08:55:22] <Bruda> Found the section.
[08:55:22] <wroathe> Look at this guy, bragging about his infinite memory source
[08:56:42] <caze> gnoo: You have the same problem as me. count can overflow.
[08:57:00] <caze> I've solved this before though.
[08:57:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:57:43] *** Quits: rcf (rcf@sdf.org) (Quit: WeeChat 3.2.1)
[08:59:07] *** Joins: rcf (rcf@iceland.sdf.org)
[09:00:29] <caze> Easy fix: instead of doing column++, just do: column = column <= LEN ? column + 1 : LEN + 1;
[09:01:15] *** Quits: Bruda (~bruda@172.58.62.244) (Ping timeout: 252 seconds)
[09:01:58] <caze> wroathe: I showed bruda Zhivago's solution and he nearly had a meltdown.
[09:02:16] <wroathe> caze: It's clever code. That's not surprising.
[09:02:41] <zwr> link that Zhivago guy's solution again please I haven't seen it
[09:02:43] <wroathe> I still fundamentally disagree with gatekeeping K&R exercises behind state machines :P
[09:03:16] <caze> https://ideone.com/XIWU2R
[09:03:36] <zwr> oh no
[09:03:38] <caze> wroathe: Blame K or R, not me.
[09:03:51] <caze> (I forget which one actually wrote the book)
[09:04:16] <caze> zwr: It basically uses an adjacency matrix.
[09:04:35] <caze> With macros and marshalling and stuff.
[09:04:50] <wroathe> caze: I choose to believe that they wrote it for all experience levels, and that a standard loop with some boolean state variables would be seen as a valid attempt
[09:05:06] <wroathe> caze: "Oh, bless their hearts, the don't know about state machines yet"
[09:05:09] <wroathe> they*
[09:05:59] <caze> wroathe: It's just sort of a shame, because then all the exercises become trivial and unremarkable.
[09:06:57] *** Quits: gco (~gco@2601:647:5a00:223:14ad:de7b:9961:3438) (Quit: ZZZzzz…)
[09:07:03] <caze> wroathe: Especially since nowadays, many people learning C already know another language. They miss out on what techniques work with C, that they would never consider for the languages they're coming from.
[09:07:31] <wroathe> caze: I don't know about that. I tend to think people just learn in stages is all.
[09:07:42] <caze> wroathe: How many people's reaction to character at a time i/o is "yuck", or "That is grossly inefficient".
[09:07:45] <wroathe> caze: They should still be pushed to exert themselves
[09:08:36] <wroathe> caze: But if they get stuck on something like 1-23 for two days trying to play whackamole with state variables like bool seen_first_slash, and their program is then mostly working, I say move on to the next
[09:09:19] <wroathe> caze: They won't be able to get around processing text one character at a time if they're going to work through K&R
[09:09:28] <wroathe> caze: That's entirely separate from forcing state machines on them
[09:10:27] <caze> wroathe: I mean, they do, if they just assume a 100 character maximum line, which many do.
[09:10:52] *** Joins: vimart (~vimart@213.205.197.68)
[09:11:00] <caze> wroathe: That's how Bruda originally did 1-17, before I told him to go back and do it over.
[09:11:52] <wroathe> caze: Sure, and that's a perfect example of where I think beginners should be pushed to do better
[09:12:17] <wroathe> caze: I just personally see state machines a slightly more advanced concept that detracts from teaching absolute beginners in the beginning stages
[09:13:25] <caze> wroathe: Given his stated background, I think it's about the right time for him to learn about them.
[09:14:08] <wroathe> caze: They're going to write code like if (c == '/') { char d = getc(stdin); if (c == '/') { // handle comment } }, and it's going to be buggy, and that's ok to start out with. 
[09:14:19] <wroathe> err, sorry if (d == '/'), I meant
[09:14:33] <wroathe> caze: Yeah, maybe
[09:14:42] <wroathe> caze: I think he was just flustered
[09:14:46] <wroathe> caze: And maybe tired. 
[09:16:11] <caze> wroathe: Also, I don't think this was his first time doing the exercises. Or maybe he skipped them the first time through chapter 1, and now he's revisiting them.
[09:16:27] <caze> These last few chapter 1 exercises, I mean.
[09:16:41] <caze> I think I saw him discuss exercises in later chapters.
[09:16:46] <wroathe> caze: Yeah, I don't have the full background on what he's dealing with. Maybe what you were pushing on him is just what he needed.
[09:17:03] <wroathe> caze: I'm just saying that on average I don't think state machines are the right thing to start out with for beginners
[09:17:09] <caze> But like, some of these chapter 1 exercises are the hardest exercises in the whole book.
[09:17:38] <caze> I don't know why K or R made them that way.
[09:18:13] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[09:18:39] <wroathe> caze: Well, it seems like that whole Bells Labs group were very well versed in parser theory around the time of the book's writing. That said, I choose to believe that they also didn't assume that their readers necessarily would be
[09:18:54] *** Joins: szutt (~szutt@116.37.2.145)
[09:19:13] <wroathe> Ken Thompson and the writing of grep, for example
[09:19:35] *** Quits: luizfrds1 (~Luiz@152.250.243.147) (Ping timeout: 265 seconds)
[09:19:51] <zwr> I read some other books Kernighan & the other Bell Labs people had a hand in and I think they just have no mercy lmao, but most of the time that leads to some good exercises I think
[09:20:09] *** Joins: jinsun (~quassel@user/jinsun)
[09:21:00] *** Joins: damxsa (~damx@2001:16a2:cc64:7200:bdc3:4708:1067:d70f)
[09:22:33] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[09:23:11] <floatcomplex> wroathe: re: "they're going to write code like" i'm in this picture and i don't like it
[09:23:39] <wroathe> floatcomplex: Haha
[09:24:06] <zwr> ,c11 7.21.7.1p1
[09:24:06] <candide> http://www.iso-9899.info/n1570.html#7.21.7.1p1 [The fgetc function] #include <stdio.h> i​nt fgetc(FILE *stream);
[09:24:18] <zwr> ,c11 7.21.7.1p2
[09:24:19] <candide> http://www.iso-9899.info/n1570.html#7.21.7.1p2 [The fgetc function] If the end-of-file indicator for the input stream pointed to by stream is not set and a next character is present, the fgetc function obtains that character as an unsigned char converted to an i​nt and advances the associated file position indicator for the stream (if defined).
[09:24:29] <Beastie> wroathe: in my opinion, when K&R wrote their book, they were assuming the readers would be only the staff at at&t that were about to use unix and no more.  You must think that they had to use a pdp-11 at most and this posed a very small limit on how big a program could be (64kb at most) and they had to write everything in a typewriter using ed.
[09:24:36] <zwr> I guess if we're going to put that character from getchar & co into an array it should be an array of unsigned char
[09:25:51] <oldlaptop> Beastie: Surely if they didn't know better than that for the first edition, they did for the second.
[09:26:38] <apotheon> Well, oldlaptop beat me to it.
[09:27:09] <apotheon> . . . but phrased it better than what I had in mind.
[09:27:10] <Beastie> oldlaptop: the second  edition was not a rewrite.  I have a copy of the first edition book and it's almost the same (they even use the idiom of not using the return type on main declaration still)
[09:27:15] <zwr> wasn't C used outside of bell labs by the time the 1st edition came out?
[09:28:26] <Beastie> imho they were very focused in writing text processing tools, which was the target of the original unix development.
[09:28:57] <apotheon> and OSes
[09:29:05] <Beastie> zwr: it was.... but it wasn't the first programming language used yet.
[09:30:15] <oldlaptop> Text processing wasn't the "target" for early unix, it was the excuse given to the Suits (TM) to justify hacking on a timesharing OS
[09:31:49] * oldlaptop likes the observation that Thompson was (IIRC) more or less inventing much of RE/FA theory as we know it better
[09:32:19] <oldlaptop> (but not put in those words, I must need to sleep)
[09:34:02] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[09:34:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[09:35:16] *** Quits: damxsa (~damx@2001:16a2:cc64:7200:bdc3:4708:1067:d70f) (Remote host closed the connection)
[09:35:29] *** Joins: damxsa (~damx@2001:16a2:cc64:7200:e49d:a9e2:19fd:26)
[09:39:07] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:44:44] *** Joins: Viewday114 (~Viewday@user/viewday)
[09:45:23] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) ()
[09:46:09] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:b047:382:834a:1550) (Quit: Leaving)
[09:46:18] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[09:46:18] *** Viewday114 is now known as Viewday11
[09:47:24] *** Joins: Everything (~Everythin@37.115.210.35)
[09:48:40] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:5317:d3c8:e695:d80a)
[09:51:25] <Beastie> oldlaptop: I've read the original papers written (most of them by hand) and you are true in some point, their main intention was to nvestigate in OS design, but the main contract they had was to sell the machine they had acquired (a pdp-11) to the patents department, and so, they had to include text processing.
[09:52:07] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[09:52:31] *** Joins: vicfred (~vicfred@user/vicfred)
[10:01:22] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:01:22] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:01:22] *** Joins: wroathe (~wroathe@user/wroathe)
[10:02:05] *** Joins: Satin (uid193953@id-193953.ilkley.irccloud.com)
[10:04:27] *** Joins: PortableDave (~portabled@118.208.121.87)
[10:04:28] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[10:05:04] *** Quits: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:05:11] *** Quits: alch (~alch@151.34.163.51) (Read error: Connection reset by peer)
[10:05:32] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:05:59] *** Quits: damxsa (~damx@2001:16a2:cc64:7200:e49d:a9e2:19fd:26) (Ping timeout: 265 seconds)
[10:06:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[10:08:53] *** Quits: PortableDave (~portabled@118.208.121.87) (Ping timeout: 265 seconds)
[10:09:08] *** Joins: Jantz (~IceChat95@2407:7000:8d04:100:89eb:6f7d:9fd:621f)
[10:09:14] *** Quits: Jantz (~IceChat95@2407:7000:8d04:100:89eb:6f7d:9fd:621f) (Excess Flood)
[10:09:43] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[10:16:25] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:21:53] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[10:25:39] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[10:28:24] *** Joins: Libero (~Libero@77.49.128.70.dsl.dyn.forthnet.gr)
[10:35:46] *** Quits: catern (~sbaugh@cpe-98-7-229-235.nyc.res.rr.com) (Ping timeout: 245 seconds)
[10:40:31] <floatcomplex> caze: https://godbolt.org/z/Wc61oePPn
[10:41:16] <SrPx> is there any C compiler optimized for compilation speed? I need compilation to be really, really fast, but it *should* apply some optimizations if possible given that constraint
[10:41:30] <floatcomplex> SrPx: google "tccboot"
[10:41:57] <floatcomplex> it used to compile the linux kernel, from source, at boot time, not taking a noticeable amount of time to do so, 
[10:42:17] <SrPx> cool :)
[10:42:18] <SrPx> thank you!
[10:42:26] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:42:35] <SrPx> very impressive the tinycc site
[10:45:21] <cehteh> you can use tcc for scripting (-run option) as well as link it as library to your application and it comes with a bounds checker too
[10:45:33] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[10:47:44] <zwr> SrPx: there are plenty of compilers that are fast, for starters you might try gcc or clang with optimizations turned off, otherwise you may want to try tcc or cparser
[10:48:11] <floatcomplex> clang with basic optimizations enabled is probably still way faster than gcc with optimizations off
[10:48:37] <dave0> new versions of gcc are slower than old versions... you could try   gcc 2.95.3   i used that for ages
[10:48:46] <floatcomplex> if clang -Os is not fast enough for you, consider not trying to compile stupid shit
[10:49:27] *** Joins: damxsa (~damx@2001:16a2:cc64:7200:e49d:a9e2:19fd:26)
[10:52:04] *** Joins: Jenmin (~Jenmin@111.225.66.251)
[10:56:29] *** Quits: dmenz (~dmenz@2804:14d:5cd4:5e94::d) (Quit: Leaving)
[10:58:06] *** Parts: noord (~noord@user/noord) (...)
[10:58:51] <gnoo> ,kr 1-13
[10:58:51] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-13. Write a program to print a histogram of the lengths of words in its input. It is easy to draw the histogram with the bars horizontal; a vertical orientation is more challenging.
[10:58:56] <gnoo> i did this like so but it only counts 30 words. is there any better method? (ignoring the overflow that might happen, i'll try to fix that myself) http://ix.io/3Hks
[10:59:37] *** Joins: frost (~frost@user/frost)
[10:59:41] *** Joins: alch (~alch@151.34.168.188)
[11:00:01] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[11:00:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[11:01:17] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[11:02:48] <floatcomplex> caze: i still haven't found a character sequence that requires states 6-8 but i have found a flaw in godbolt's syntax highlighting while looking
[11:03:15] <Beastie> gnoo: IMHO you should be able to count any number of words.  Why have you stopped at 30?
[11:04:55] <gnoo> Beastie: but, how would i store length of arbitrary number of words? ( the book hasn't talked about malloc or pointers yet )
[11:06:24] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[11:06:46] <floatcomplex> malicious answer: recursion
[11:07:36] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[11:08:15] <Beastie>   you don't need... you have to accumulate one in slot for length l
[11:09:06] <gnoo> Beastie: that would work for horizontal orientation but not vertical, right?
[11:09:19] *** Joins: moose (~moose@user/moose)
[11:09:43] <Beastie> once you have the histogram in memory you can print it in any order you want.
[11:10:35] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[11:11:38] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.19)
[11:12:37] * floatcomplex mumbles about reversing arbitrary length strings via recursive main()
[11:13:26] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 252 seconds)
[11:13:35] <floatcomplex> if we can use the call stack as the world's most confusing string buffer then why not a bignum impl
[11:14:51] <Beastie>  why are you using the world's most confusing string buffer... what about words that are longer than the buffer length?
[11:15:01] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[11:15:13] <gnoo> here's how i can do it horizontally: http://ix.io/3Hku
[11:16:38] <floatcomplex> Beastie: i'm referring to a specific bit of cursed code that was pasted in here a while back that reversed a string by effectively storing one character at a time on the C call stack with recursive calls to main() and writing them back out in reverse order as a consequence of where the putchar() call was
[11:16:48] <gnoo> hmm, that len variable is useless there. should print it directly
[11:16:54] *** Quits: retro_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[11:17:44] <floatcomplex> since we're discussing it again now, one could even say it was...recursed 😎
[11:17:51] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[11:18:05] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[11:18:39] <Beastie> you can write three programs, and make them run in a pipe... the first just counts the word lengths and feed them to the second.  the second indexes the numbers coming and creates the histogram.  The third just prints the histogram according to the data feed from the second.
[11:18:40] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:19:09] <floatcomplex> s/programs/coroutines/
[11:19:16] <floatcomplex> although k&r says coroutines don't exist
[11:19:35] <Beastie> i prefer to write three programs... more in the line of old unix design.
[11:19:54] *** Joins: doofenshmirtz (~farawayas@103.160.128.7)
[11:20:09] <Beastie> so you can use them for other things... or even insert a sort command to sort the histogram if you like.
[11:20:12] <floatcomplex> you KNOW kernighan was like "come on put coroutines in the second edition" and ritchie was like i'm not, and i'm going to say that i'm not
[11:20:47] *** Joins: wlemuel_ (~wlemuel@210.22.124.110)
[11:21:04] *** Joins: lleo (~leo@89-200-32-158.mobile.kpn.net)
[11:21:27] <Beastie> the concept of coroutine was not present in the first unix papers... it was not until well established System V when threading was introduced into the kernel.
[11:21:42] <floatcomplex> coroutines != threads
[11:22:50] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[11:22:57] <dave0> task switch=coroutine yield
[11:23:03] <gnoo> using isblank, i think it can't be better than this: http://ix.io/3Hkx
[11:23:09] <floatcomplex> "we don't need userspace task switching, just use threads, it's the same thing only better" set things back by two decades
[11:23:27] <floatcomplex> cooperative multitasking and preemptive multitasking both have their use cases, even within the same program
[11:23:44] <floatcomplex> you can't just replace cooperative with preemptive in all use cases
[11:23:48] <dave0> is c getting coroutines?
[11:24:14] <dave0> cooperative can share resources without locking
[11:24:18] <floatcomplex> dave0: no but you can has coroutines in c with a bit of asm, it's been done many times and lots of critical sofware depends on it
[11:24:40] *** Quits: wlemuel_ (~wlemuel@210.22.124.110) (Client Quit)
[11:24:46] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Read error: Connection reset by peer)
[11:25:05] <floatcomplex> so you can have "coroutines for c" but not coroutines implemented IN pure c
[11:26:04] *** Joins: doofenshmirtz (~farawayas@103.160.128.7)
[11:26:09] *** Joins: wlemuel_ (~wlemuel@210.22.124.110)
[11:27:22] <dave0> it'd be nice to standardise them
[11:27:29] <dave0> sometimes they're real handy
[11:27:43] <floatcomplex> idk if i would be comfortable with them being added to the language
[11:27:45] <dave0> and if there is already implementations it might help
[11:27:53] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:5317:d3c8:e695:d80a) (Quit: Leaving)
[11:28:00] *** Quits: lleo (~leo@89-200-32-158.mobile.kpn.net) (Ping timeout: 268 seconds)
[11:28:15] *** Joins: lleo (~leo@89-200-32-158.mobile.kpn.net)
[11:28:20] <dave0> why not?
[11:28:30] <dave0> it's simpler than threads and they got in there
[11:28:36] <floatcomplex> i'd prefer that swapcontext be fixed up and made compliant with standard C, so that various coroutine APIs could be implemented on top of it, rather than any one of those APIs made standard
[11:29:02] <floatcomplex> instead of doing that, they just struck swapcontext from posix and said use pthreads
[11:29:03] <floatcomplex> bastards
[11:29:27] *** Quits: lleo (~leo@89-200-32-158.mobile.kpn.net) (Remote host closed the connection)
[11:29:34] *** Joins: arinov (~arinov@213.194.126.155)
[11:29:48] *** Quits: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com) (Quit: WeeChat 2.8)
[11:29:49] *** Joins: lleo (~leo@89-200-32-158.mobile.kpn.net)
[11:30:27] <floatcomplex> maybe they could make a cooperatively multitasked subset of c11 threads that could be mixed with the preemptive version. but they'd probably fuck that up too
[11:32:40] <dave0> threads needs kernel support.. coroutines don't
[11:32:53] <dave0> how did preemtie threads get in but not coroutines
[11:33:12] <Beastie> but it can be easily implemented as a single flow of information, so pipes should be fine for that.
[11:33:14] <dave0> surely kernel support is out of scope of c standard
[11:33:48] *** Quits: bookworm (~bookworm@thelounge/maintainer/bookworm) ()
[11:34:36] *** Quits: Fozzworth (~Fozzworth@user/fozzworth) (Read error: Connection reset by peer)
[11:34:49] *** Joins: bookworm (~bookworm@thelounge/maintainer/bookworm)
[11:34:56] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[11:35:09] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[11:35:50] *** Quits: wlemuel_ (~wlemuel@210.22.124.110) (Quit: leaving)
[11:36:42] <dave0> my understanding is the standard doesn't add new things that requires great changes to existing implementations
[11:36:57] <dave0> threads is a great change
[11:38:31] <dave0> was there implementations of threads that /wasnt/ posix? you could have left it to posix pthreads
[11:39:01] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[11:39:08] *** Quits: bookworm (~bookworm@thelounge/maintainer/bookworm) (Remote host closed the connection)
[11:39:26] *** Joins: bookworm (~bookworm@thelounge/maintainer/bookworm)
[11:39:46] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:3ddf:77ed:0:281)
[11:40:32] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[11:41:23] *** Joins: mjack (~mjack@5634d05c.rev.stofanet.dk)
[11:43:41] *** Quits: Jenmin (~Jenmin@111.225.66.251) (Ping timeout: 252 seconds)
[11:44:09] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 276 seconds)
[11:44:47] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[11:44:50] *** Joins: Viewday116 (~Viewday@user/viewday)
[11:45:34] *** Joins: aradesh (~aradesh@user/aradesh)
[11:45:40] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[11:45:40] *** Viewday116 is now known as Viewday11
[11:46:32] *** Joins: malloy (~jimery@116.30.223.163)
[11:47:13] *** Joins: skapata (~Skapata@user/skapata)
[11:47:19] <zwr> linux threads probably
[11:47:35] *** Joins: uskerine (~uskerine@0x3ec66374.ejb.customer.dk.telia.net)
[11:50:12] <dave0> zwr: i think even that had a posix layer
[11:50:17] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[11:50:23] *** Quits: damxsa (~damx@2001:16a2:cc64:7200:e49d:a9e2:19fd:26) (Ping timeout: 265 seconds)
[11:50:40] <dave0> iirc there was some incompatibilities... so they rewrote it to be more posix compatible
[11:53:21] *** Joins: mrig (~AdiIRC@user/mrig)
[11:53:37] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[11:59:01] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:3700:12c3:7bff:fe6d:d374)
[12:11:35] *** Joins: retro_ (~retro@05412d78.skybroadband.com)
[12:11:47] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[12:18:31] *** Quits: simon323 (~simon323@2409:8a34:468:83d0:9543:fac3:aa5a:e4d) (Ping timeout: 252 seconds)
[12:19:00] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:8509:5e24:a106:c0c4)
[12:20:02] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[12:20:14] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[12:21:42] *** Quits: dacav (~dacav@h94-245-9-202.cust.a3fiber.se) (Remote host closed the connection)
[12:24:51] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[12:28:55] <markand> I think C11 threads are too limited
[12:29:08] <markand> no rw/shared mutexes which are quite handy 
[12:29:39] <markand> no thrd_kill that sends a signal like pthread_kill
[12:30:15] *** Quits: uskerine (~uskerine@0x3ec66374.ejb.customer.dk.telia.net) (Ping timeout: 252 seconds)
[12:31:28] *** Joins: donald1 (~donald@88.165.121.242)
[12:32:06] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[12:32:23] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[12:32:43] *** Quits: jdurand (~jdurand@user/jdurand) (Quit: Leaving)
[12:35:01] *** Quits: mjack (~mjack@5634d05c.rev.stofanet.dk) (Remote host closed the connection)
[12:35:13] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 268 seconds)
[12:35:22] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[12:35:49] *** Quits: donald1 (~donald@88.165.121.242) (Ping timeout: 265 seconds)
[12:42:52] <floatcomplex> good riddance
[12:44:05] *** Joins: dacav (~dacav@h94-245-9-205.cust.a3fiber.se)
[12:46:03] *** Quits: Elladan (~elladan@user/elladan) (Ping timeout: 256 seconds)
[12:46:33] *** Joins: travankor (travankor@user/travankor)
[12:48:18] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[12:49:56] <sebag> I'm curious if you can use freopen() as fopen() passing it an unitialized FILE? like: FILE f = {0}; freopen("/etc/hosts", "r", &f) ?
[12:49:59] <sebag> this would allow to use stack-allocated FILEs if only a way to close the stream would be found, as fclose will try to free the memory. But, it's probably just close(f.some_fd_containing_field).
[12:51:31] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:8509:5e24:a106:c0c4) (Ping timeout: 252 seconds)
[12:53:02] <cehteh> why would you want to do that anyway
[12:53:04] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:53:06] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[12:53:20] <cehteh> aka pretty much UB ... glhf
[12:53:42] *** Quits: Jong (~Jong@2620:10d:c090:400::5:4540) (Ping timeout: 265 seconds)
[12:55:08] *** Quits: Inline (~Inline@aftr-37-201-240-202.unity-media.net) (Ping timeout: 256 seconds)
[12:55:15] <sebag> cehteh: on embedded devices heap is sometimes more problematic, it's better to use stack there
[12:55:34] <sebag> just noting that it's funny how man avoids stating that the ptr returned must be same as the passed one (or NULL)... It doesn't make any sense otherwise (man: "fdopen(), and freopen() return a FILE pointer.")
[12:55:41] <dave0> sebag: not allowed to pass a NULL stream to freopen
[12:55:41] *** Quits: dacav (~dacav@h94-245-9-205.cust.a3fiber.se) (Remote host closed the connection)
[12:56:05] <cehteh> sebag: it is not defined that fclose calls free, FILE* may be a global table/array on embedded OS'es
[12:56:42] *** Joins: uskerine (~uskerine@0x3ec66374.ejb.customer.dk.telia.net)
[12:56:56] <sebag> dave0: but the man says "The  original  stream  (if  it exists) is closed.". Not existing stream should be a = {0} FILE structure, shouldn't it?
[12:56:57] <cehteh> most likely it frequently is actually
[12:57:41] <dave0> it might refer to a non-existent file
[12:57:41] <sebag> cehteh: yes, or it might call alloca() and allocate on stack
[12:58:21] <dave0> FILE is hidden from you.. you should only use FILE*
[12:58:30] <cehteh> whatever works, while i am not sure alloca would work, because a FILE* can outlive the function opening the file
[12:59:03] <cehteh> just use FILE* or low level IO (posix open()) and dont mess with undefined/implementation defined things
[12:59:20] <dave0> pointer-to-FILE is not used as pesudo pass-by-reference
[12:59:28] <cehteh> and dont make (mostly wrong) assumptions
[12:59:42] <dave0> it doesn't go   *stream = ...
[13:00:15] <dave0> it accesses it as a struct eg   stream->filedescriptor   (i made something up)
[13:00:38] <cehteh> in embededd and when you are not interested in portability AND some shortcuts / implementations details are documented, then you may use it
[13:01:09] <sebag> cehteh: true, scope requires default non-alloca() allocation
[13:01:21] <cehteh> its not forbidden that some OS implements FILE in some way that it grants users access to the inner guts, just wont be portable then
[13:02:04] <dave0> there's a note somewhere that i've forgotten, that the address might be a magic cookie.. you really can't meddle with it as though it's a struct
[13:02:32] <cehteh> but for a memory constrained embedded os i'd expect it has some  FILE internal_fd[N]; somewhere globally with N reasonable small
[13:02:56] <cehteh> when you open a file then it looks for a unused slot and returns a pointer to that
[13:03:24] <dave0> i'd expect that if you want buffering but you don't want the overhead of stdio, you could go to something like linux or netbsd and cut&paste their code to get buffering
[13:03:29] <sebag> In general, I just like using, passing structs by value, so being able to write FILE f = {0} is interesting to me :)
[13:03:44] <dave0> i believe plan 9 wrote their own buffering library
[13:04:05] <cehteh> i did my own buffering/io lib on a embedded os too
[13:04:19] *** Joins: BSaboia (~bsaboia@177.37.198.179)
[13:04:32] <cehteh> i mean there is arguably a lot one could do better than FILE :)
[13:09:36] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:11:19] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:11:41] *** Joins: arinov (~arinov@176.89.29.127)
[13:11:57] <sebag> but despite this, FILE is an interesting member of libc, being a fairly high-level API/object (also)
[13:15:37] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4-dev)
[13:16:38] *** Joins: kashyaprushi (~kashyapru@49.36.97.119)
[13:16:45] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[13:17:40] <sebag> glibc has rich extensions to mode flags, like "c" (mute any operations like read or write) or "m" - use mmap (but works only for reading)
[13:21:22] *** Joins: simon323 (~simon323@2409:8a34:468:83d0:d0c4:7304:66f3:e561)
[13:24:12] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[13:26:12] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 276 seconds)
[13:28:12] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[13:29:16] *** Joins: Symbioti1Female (~Symbiotic@user/SymbioticFemale)
[13:29:29] *** Joins: Atque (~Atque@user/atque)
[13:30:07] *** Joins: gce108_ (~gce@64-250-5-223.gvec.net)
[13:30:16] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:30:54] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[13:31:57] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:32:10] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[13:32:22] *** Quits: gce108 (~gce@user/gce108) (Ping timeout: 265 seconds)
[13:32:27] *** Joins: donald1 (~donald@2a01:e0a:95e:7ca0:a0cb:59a2:ecb9:5eb3)
[13:34:03] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[13:34:13] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[13:35:53] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[13:36:18] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[13:37:30] *** Quits: retro_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[13:38:03] *** Quits: pnill (~pnill@ip170.ip-54-39-37.net) (Ping timeout: 265 seconds)
[13:39:25] *** Quits: donald1 (~donald@2a01:e0a:95e:7ca0:a0cb:59a2:ecb9:5eb3) (Ping timeout: 240 seconds)
[13:39:57] *** Quits: lleo (~leo@89-200-32-158.mobile.kpn.net) (Quit: Leaving)
[13:39:59] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[13:41:04] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[13:41:09] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:43:52] *** Lord_of_Life_ is now known as Lord_of_Life
[13:44:13] *** Joins: Viewday110 (~Viewday@user/viewday)
[13:44:42] *** Joins: Burgundy (~yomon@79.115.213.171)
[13:45:31] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:45:31] *** Viewday110 is now known as Viewday11
[13:48:03] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[13:48:13] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[13:48:58] *** Quits: krissmaster (~kriss@213.239.83.90) (Remote host closed the connection)
[13:49:16] *** Joins: Atque (~Atque@user/atque)
[13:50:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:50:30] *** Joins: krissmaster (~kriss@213.239.83.90)
[13:50:52] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:51:53] *** Joins: pulse (~pulse@user/pulse)
[13:52:38] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:52:47] *** Joins: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt)
[13:53:02] *** Joins: steve_ (~steve@ool-182c2b80.dyn.optonline.net)
[13:53:03] *** Joins: phineasflynn (~farawayas@103.160.128.7)
[13:54:02] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[13:54:22] *** Quits: chenqisu1 (~03cia7d@183.217.201.63) (Quit: Leaving)
[13:54:41] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[13:55:49] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Ping timeout: 240 seconds)
[13:57:51] *** Joins: shivesh (~shivesh@user/shivesh)
[13:59:06] *** Quits: buzel (~buzel@fsf/member/buzel) (Ping timeout: 245 seconds)
[14:00:53] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[14:06:59] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[14:10:10] *** Joins: chenqisu1 (~03cia7d@183.217.201.63)
[14:10:24] *** Joins: donald1 (~donald@88.165.121.242)
[14:11:26] *** Joins: Tyaku (~Tyaku@176-154-243-92.abo.bbox.fr)
[14:11:27] *** Joins: donald2 (~donald@2a01:e0a:95e:7ca0:a0cb:59a2:ecb9:5eb3)
[14:13:23] <Tyaku> Hi, I have a question about sockets on C/Linux. I made a TCP server, the listen() function has a "backlog" parameter. If i set this to 1, i remark that TCP Clients (telnet), can open up to 3 connections (where the server only accept one). How to limit at 1 connection ?
[14:15:01] *** Joins: buzel (~buzel@fsf/member/buzel)
[14:18:31] <river> what if you set it to 0?
[14:19:11] <trenka> Tyaku: not a C question, but it's not a limit for clients, but size of the queue
[14:19:32] <trenka> Tyaku: you should track it yourself if you need the limit
[14:19:33] <river> is there another channel for unix network programming in C?
[14:19:44] *** Joins: ko (~i.am@user/marlboro)
[14:20:01] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[14:20:11] <trenka> river: at least posix should be more in topic
[14:21:23] <river> Tyaku: aso im reading that you can close the socket, and it will still work with the client but wont accept new conncs
[14:21:44] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[14:21:52] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[14:22:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:22:50] <Tyaku> One way is to close the client connection after the accept(). But I want to keep my blocking pattern: I accept a connexion and i process this connection to the end of this connection . 
[14:23:16] <river> well im not sure if it's even possible
[14:23:21] <trenka> Tyaku: so, do not accept another one
[14:23:23] <Tyaku> But the backlog parameter is supposed to limit the number of un-accepted connections if i understand it,
[14:23:24] <river> just the way to tcp stack on linux is implemented
[14:23:37] <river> maybe there's a setsockopt into some kind of reject mode
[14:23:43] <river> that can be switche don and off
[14:23:51] <Tyaku> So i don't understand why the value of 1, only reject after 3 connections. 
[14:25:06] <Tyaku> Even if i don't accept the connexions, i think it's a problem. Because I have 2 connexions, not accepted by my software, but these connexions can send DATA to the IP Stack. 
[14:25:56] <Tyaku> Is it so easy to do a denial of service on a TCP server C implementation in linux ? 
[14:25:59] <river> the ip stack just discards that data doesn't it?
[14:26:03] <river> I dont think this is a DOS
[14:26:13] *** Quits: uskerine (~uskerine@0x3ec66374.ejb.customer.dk.telia.net) (Ping timeout: 240 seconds)
[14:27:30] <Tyaku> No, the IP stack don't discard the data, because on my TCP server, when i finish with the first connexion, and i accept the second, at this moment i receive all the data that the second client sends when he was NOT ACCEPTED (accept())
[14:29:25] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Quit: Leaving)
[14:29:56] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:30:12] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:57] *** Joins: csrf (~csrf@user/csrf)
[14:31:08] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[14:32:11] *** Quits: Symbioti1Female (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[14:32:25] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[14:32:54] *** Quits: useretail__ (~useretail@185.132.19.151) (Quit: Leaving)
[14:33:09] *** Joins: useretail (~useretail@185.132.19.151)
[14:36:18] *** Joins: random-nick_ (~random-ni@87.116.181.93)
[14:41:15] *** Joins: reset (~reset@user/reset)
[14:44:35] *** Joins: jjido (~Denis@90.213.58.125)
[14:45:00] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:46:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[14:47:20] *** Joins: uskerine (~uskerine@0x3ec66374.ejb.customer.dk.telia.net)
[14:48:19] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:48:25] *** Quits: donald2 (~donald@2a01:e0a:95e:7ca0:a0cb:59a2:ecb9:5eb3) (Ping timeout: 268 seconds)
[14:50:03] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[14:50:18] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:50:35] *** Joins: seninha (~seninha@user/seninha)
[14:52:09] *** Quits: Dreg (~Dreg@fr33project.org) (Ping timeout: 252 seconds)
[14:53:54] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[14:54:47] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:56:21] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[14:58:15] *** Joins: f1refly (~f1refly@p200300d02f2242fc000000000000092c.dip0.t-ipconnect.de)
[14:58:25] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:59:22] *** Joins: donald2 (~donald@2a01:e0a:95e:7ca0:a0cb:59a2:ecb9:5eb3)
[14:59:25] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c5d2:58a5:f5c6:cdea) (Ping timeout: 240 seconds)
[15:00:21] *** Parts: f1refly (~f1refly@p200300d02f2242fc000000000000092c.dip0.t-ipconnect.de) (Leaving)
[15:00:30] *** Joins: zwr (~zwr@2804:d45:b966:fb00:30:a6f4:bd2d:bb15)
[15:00:53] *** Quits: Satin (uid193953@id-193953.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:00:59] *** Joins: Dreg (~Dreg@fr33project.org)
[15:03:14] *** Quits: alch (~alch@151.34.168.188) (Ping timeout: 265 seconds)
[15:05:06] *** Joins: alch (~alch@151.36.121.52)
[15:08:33] *** Quits: Dreg (~Dreg@fr33project.org) (Ping timeout: 265 seconds)
[15:08:52] *** Joins: slidercrank (~slidercra@user/slidercrank)
[15:11:26] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:15:14] *** Joins: luizfrds1 (~Luiz@152.250.243.147)
[15:16:20] *** Quits: chenqisu1 (~03cia7d@183.217.201.63) (Quit: Leaving)
[15:16:46] *** Quits: lemontree (~chat@user/lemontree) (Quit: WeeChat 3.1)
[15:17:52] *** Quits: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt) (Quit: Leaving)
[15:18:42] *** Quits: vimart (~vimart@213.205.197.68) (Ping timeout: 265 seconds)
[15:19:56] <roxlu> hi, maybe a bit unrelated, but let's say I create a C app that calls `malloc()` to allocate e.g. a chunk of 20M, what tool could I use on Linux to detect/measure these 20M increments?
[15:19:57] *** Joins: lemontree (~chat@user/lemontree)
[15:24:02] <tarzeau> roxlu: free -m ?
[15:24:49] <roxlu> tarzeau: yeah that would be one of my first tries too, but it doesn't show what I would expect
[15:25:03] <tarzeau> roxlu: what does it show?
[15:25:04] <roxlu> there is no clear 20M increment/decrement; same with `sar`
[15:25:26] <tarzeau> roxlu: you only allocate once? and do you not use/fill that malloc'd part of memory?
[15:25:28] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[15:25:34] *** Joins: Dreg (~Dreg@fr33project.org)
[15:25:35] *** Joins: moose` (~moose@user/moose)
[15:25:53] <roxlu> it does show changes in used/avail memory but then number sometimes change with different amounts of 20 (e.g. just 1m)
[15:25:53] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[15:26:04] <roxlu> tarzeau: ah, I do not fill them
[15:26:19] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:26:23] <roxlu> could it be optimized away?
[15:26:56] <tarzeau> do you get 20000000 bytes or 20971520 bytes?
[15:27:00] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[15:27:12] <river> roxlu: its hard to actually detect this because of how high level eveything is
[15:27:23] <roxlu> I allocate `20971520` 
[15:27:28] <river> allocated memory that's untouched is still virtual and stuff like that
[15:27:40] <river> but /proc/<pid>/mem has real and virt mem
[15:27:59] <edk> /proc/pid/status usually
[15:28:08] <river> ty edk ! my mistake
[15:29:17] <roxlu> and `pmap -x`, would that be usefull?
[15:29:22] <roxlu> *usable
[15:29:49] <edk> yes, but interpreting it may not be easy for you
[15:31:51] <roxlu> ok thanks
[15:33:12] *** Quits: Dreg (~Dreg@fr33project.org) (Ping timeout: 265 seconds)
[15:33:13] *** Quits: kurahaupo_ (~kurahaupo@pa49-180-180-200.pa.nsw.optusnet.com.au) (Ping timeout: 252 seconds)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:06] <roxlu> it seems like /proc/[pid]/status shows the heap allocation in `VmPeak`
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:08] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[15:37:19] * tarzeau is not a fan of using /proc as it makes things unportable...
[15:37:39] <tarzeau> besides you know never know when its format changes
[15:39:07] <roxlu> yeah that's true, but I just noticed that my current attempt, using `sar -r -u ...` doesn't really give me the info I want
[15:39:23] <roxlu> .. atm I just want to verify if my measurements are correct
[15:43:58] *** Joins: Viewday112 (~Viewday@user/viewday)
[15:45:17] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[15:45:18] *** Viewday112 is now known as Viewday11
[15:46:23] *** Joins: jjido (~Denis@90.213.58.125)
[15:46:35] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[15:48:28] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[15:50:06] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our gamedev community https://indiedevs.net/)
[15:50:42] *** Joins: Dreg (~Dreg@fr33project.org)
[15:50:50] <river> tarzeau: I think the format does not change
[15:51:03] <river> because its part of what the linux kernel exposes to userland, and there is a rule about breaking that
[15:51:05] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[15:51:06] <river> "dont break it"
[15:51:56] *** Quits: donald1 (~donald@88.165.121.242) (Ping timeout: 256 seconds)
[15:52:17] *** Joins: Dreg (~Dreg@fr33project.org)
[15:52:50] <tarzeau> river: one day you should read http://itvision.altervista.org/why.linux.is.not.ready.for.the.desktop.current.html
[15:55:03] <river> does it have anything to do with proc status changing
[15:55:31] <river> does not seem to mention /proc at all
[15:55:45] *** Quits: phineasflynn (~farawayas@103.160.128.7) (Read error: Connection reset by peer)
[15:56:08] *** Joins: phineasflynn (~farawayas@103.160.128.7)
[15:57:28] <river> you shouldn't just say wrong things because you don't like linux
[15:57:54] <tarzeau> i like linux, i have no idea where your impression comes from
[15:58:04] <river> ok lmao good one
[15:58:14] *** Joins: Jenmin (~Jenmin@111.225.66.251)
[15:58:31] <tarzeau> i've been running it since 1999, and run about 200 linux desktops for many more users. oh and it was not always only fun
[15:58:49] *** Quits: donald2 (~donald@2a01:e0a:95e:7ca0:a0cb:59a2:ecb9:5eb3) (Ping timeout: 265 seconds)
[15:58:49] <river> and how many times did /proc/status change in that time
[16:00:03] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[16:00:09] *** Joins: Dreg- (~Dreg@fr33project.org)
[16:00:38] *** Joins: pulse (~pulse@user/pulse)
[16:00:39] *** flooded is now known as _flood
[16:01:21] <tarzeau> river: https://www.kernel.org/doc/html/latest/filesystems/proc.html at least once
[16:01:33] <river> thank you
[16:02:12] *** Joins: plastico (~plastico@neomutt/plastico)
[16:02:24] <river> where in that document does it mention that?
[16:03:27] <tarzeau> river: the as of 4.x part, it wasn't there before :)
[16:10:24] *** Joins: Elladan (~elladan@user/elladan)
[16:14:14] *** Joins: Klinda (~superleag@user/klinda)
[16:31:49] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 240 seconds)
[16:39:57] *** Joins: lleo (~leo@89-200-32-158.mobile.kpn.net)
[16:42:15] *** Quits: Jenmin (~Jenmin@111.225.66.251) (Quit: WeeChat 3.3)
[16:43:35] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[16:43:59] <retr0> how can I make an algorithm to design flow free large boards
[16:44:19] <retr0> ive done all of the levels on my phone
[16:44:34] <retr0> now I want something harder (so larger boards)
[16:45:00] <river> what?
[16:45:05] <river> its a video game?
[16:45:12] <retr0> its a PUZZLE game
[16:45:38] <river> ah looks cool
[16:45:50] <retr0> yes
[16:46:27] <retr0> I like the regular boards/packs best
[16:46:37] <retr0> square or rectangle
[16:47:35] *** Joins: mncheck (~mncheck@193.224.205.254)
[16:51:35] <retr0> I can probably make the grid using an enum
[16:51:41] <retr0> but the rest is hard
[16:52:12] <river> you could place 2 points randomly then pathfind a line between them
[16:52:18] <river> and just keep doing that til the grid is full?
[16:52:22] <retr0> yes but
[16:52:32] <retr0> if you have dots in certains ways
[16:52:35] <retr0> its impossible to solve
[16:52:49] <retr0> and you cant cross lines too
[16:52:55] <retr0> also you must fill every square
[16:53:01] <retr0> i.e cell
[16:54:59] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[17:02:24] <retr0> anyone here
[17:02:45] *** Quits: kashyaprushi (~kashyapru@49.36.97.119) (Quit: Leaving)
[17:03:00] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[17:03:24] *** Joins: szutt (~szutt@116.37.2.145)
[17:03:44] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[17:07:55] <dogbert2> Chuck Norris doesn't do software QA...Chuck Norris can test an entire application with a single assert() <and get 110% code coverage in the process>
[17:09:49] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 240 seconds)
[17:13:32] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 256 seconds)
[17:14:05] *** Joins: donald1 (~donald@2a01:e0a:95e:7ca0:a0cb:59a2:ecb9:5eb3)
[17:17:09] *** Joins: AsenMx (~AsenMx@user/asenmx)
[17:18:16] <pragma-> Chuck Norris is a nutter.
[17:18:24] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[17:18:37] <retr0> kkkkkkkkk
[17:23:45] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:24:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[17:28:57] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:30:02] *** Joins: jjido (~Denis@90.213.58.125)
[17:30:52] *** Quits: jjido (~Denis@90.213.58.125) (Client Quit)
[17:33:46] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[17:34:03] *** Quits: dooba (35c4732bbc@2604:bf00:561:2000::9d) (Remote host closed the connection)
[17:34:04] *** Quits: okt (560965ea7b@user/okt) (Remote host closed the connection)
[17:35:00] *** Quits: manjaroi3 (~manjaro-i@125.131.114.50) (Ping timeout: 265 seconds)
[17:35:28] *** Quits: lemontree (~chat@user/lemontree) (Quit: WeeChat 3.1)
[17:36:05] *** Joins: lemontree (~chat@user/lemontree)
[17:36:14] *** Quits: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d) (Remote host closed the connection)
[17:36:14] *** Quits: mzal (7dc76dea13@2604:bf00:561:2000::69) (Remote host closed the connection)
[17:36:14] *** Quits: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c) (Remote host closed the connection)
[17:36:14] *** Quits: tom5760 (73d4025b14@user/tom5760) (Remote host closed the connection)
[17:36:14] *** Quits: sm2n (ae95cb1267@user/sm2n) (Remote host closed the connection)
[17:36:14] *** Quits: fmac (bf93f83905@2604:bf00:561:2000::26) (Remote host closed the connection)
[17:36:35] *** Joins: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c)
[17:36:35] *** Joins: fmac (bf93f83905@2604:bf00:561:2000::26)
[17:36:35] *** Joins: mzal (7dc76dea13@2604:bf00:561:2000::69)
[17:36:36] *** Joins: okt (560965ea7b@user/okt)
[17:36:43] *** Joins: exec64 (5ff8a84e19@2604:bf00:561:2000::f9)
[17:36:43] *** Joins: tom5760 (73d4025b14@user/tom5760)
[17:36:49] *** Joins: sm2n (ae95cb1267@user/sm2n)
[17:36:50] *** Joins: dooba (35c4732bbc@2604:bf00:561:2000::9d)
[17:36:50] *** Joins: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d)
[17:37:49] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 256 seconds)
[17:37:54] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:40:14] *** Joins: Klinda (~superleag@user/klinda)
[17:40:19] *** Quits: uskerine (~uskerine@0x3ec66374.ejb.customer.dk.telia.net) (Ping timeout: 265 seconds)
[17:40:28] *** Quits: donald1 (~donald@2a01:e0a:95e:7ca0:a0cb:59a2:ecb9:5eb3) (Ping timeout: 268 seconds)
[17:44:00] *** Joins: velgin (~velgin@162.212.106.178)
[17:44:09] *** Joins: Viewday119 (~Viewday@user/viewday)
[17:44:57] <roxlu> river: it seems that the values from /proc/[pid]/status (vmrss, vmpeak, vmhwm) stabilize for me; is it correct to conclude that my process is at least not continuously growing it's heap?
[17:45:10] <river> yes
[17:45:32] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[17:45:32] *** Viewday119 is now known as Viewday11
[17:45:41] <roxlu> ok thanks that's great :) 
[17:46:12] *** PublicWiFi is now known as SantasWiFi
[17:47:09] *** Joins: saribro (~swinnenb@user/swinnenb)
[17:47:10] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:48:45] <roxlu> Looking into this made me wonder what values you would use from e.g. `sar` or `free`; e.g. buffers/cache, memused, memfree etc. 
[17:49:15] *** Quits: TastyWiener95 (~uhhh3@user/tastywiener95) (Quit: Konversation terminated!)
[17:50:06] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[17:50:20] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 268 seconds)
[17:50:43] *** Joins: bindu (~bindu@user/bindu)
[17:50:59] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:52:52] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[17:53:03] *** Joins: uskerine (~uskerine@0x3ec66374.ejb.customer.dk.telia.net)
[17:55:40] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[17:56:12] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:58:13] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 256 seconds)
[17:58:28] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:8db1:f08e:3f5b:3312)
[17:58:34] *** Joins: ztx (~ztx@user/ztx)
[17:59:39] *** Quits: random-nick_ (~random-ni@87.116.181.93) (Ping timeout: 265 seconds)
[17:59:43] <Juliu> Test
[18:02:22] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[18:02:48] *** Joins: donald1 (~donald@37.164.43.230)
[18:04:15] *** Joins: donald2 (~donald@37.164.43.230)
[18:05:10] <retr0> NO.
[18:05:14] *** Joins: dacav (~dacav@h94-245-9-205.cust.a3fiber.se)
[18:05:28] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[18:05:45] *** Quits: rsarson (~rsarson@2607:fea8:29e1:b000::2baf) (Ping timeout: 252 seconds)
[18:06:20] <uskerine> where would you try to find a C/C++ developer for low-level real time programming *handling 10Gbps throughput* (handling binary encodings and doing things that are reasonablily optimised)? I can only find profiles who do Object Oriented high level stuff
[18:06:46] *** Joins: omegatron (~some@p5484973e.dip0.t-ipconnect.de)
[18:06:51] *** Joins: aqua (~sid742412@user/aqua)
[18:07:00] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[18:07:23] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 265 seconds)
[18:07:43] <floatcomplex> uskerine: they have jobs
[18:07:48] <floatcomplex> :)
[18:08:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:08:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:08:20] *** Joins: wroathe (~wroathe@user/wroathe)
[18:10:20] <uskerine> I am surprised how complex is to find this profile
[18:11:42] <floatcomplex> maybe stop searching for "c/c++" as you tend to get c++
[18:12:25] <LeoNerd> I expect that phrase is an instant red-flag for actual C programmers
[18:12:27] <LeoNerd> I for one would avoid it
[18:12:48] <floatcomplex> you can do some fast things in c++, but not if you are a c++ programmer
[18:15:55] <river> ouch
[18:15:58] <Bou> how is the supply/demand for low-level jobs? somehow I only find webdev jobs everywhere
[18:16:03] <river> did you just log on today to insult me floatcomplex :)
[18:18:22] <Bou> idk if I even want to work in IT, given the state of it all
[18:18:24] <kaichiuchu> there's a heavy concentration of webdev jobs on the east coast of the US
[18:18:35] <kaichiuchu> it was extremely difficult to get into a place here, but I managed
[18:19:03] <kaichiuchu> I think for lower level stuff if you're talking the east coast it has to be fintech/defense contractors, otherwise you basically have to go to the west
[18:19:09] <kaichiuchu> but your mileage may vary
[18:19:24] <river> Bou computers dont actually matter, just the people
[18:19:26] *** Joins: superboot (~agentgasm@user/superboot)
[18:19:41] <Bou> I studied CS, got my degree and all... then I bought a goddamn snackbar and sold french fries for 8 years
[18:20:40] <kaichiuchu> the market is very tough
[18:21:16] <kaichiuchu> especially now with job postings like "entry level software engineer, requiring a master's degree"
[18:22:55] <uskerine> There is an API in C++, but I would be looking for someone doing things like memory preallocation, reusing buffers, things like that. Other than creating classes to handle structs....
[18:23:59] <Bou> but, a class *is* a struct :)
[18:24:36] <uskerine> so no recommendation for where to look for?
[18:25:01] <kaichiuchu> maybe you could post something on stackoverflow
[18:26:19] <floatcomplex> you're looking for someone who knows about all that class stuff but doesn't really believe in any of it. again, you probably actually just want someone with C experience and problem solving skills
[18:27:47] *** Joins: kurahaupo (~kurahaupo@pa49-180-180-200.pa.nsw.optusnet.com.au)
[18:27:59] *** Joins: pnill (~pnill@ip170.ip-54-39-37.net)
[18:28:53] <uskerine> I agree floatcomplex
[18:29:11] <omegatron> sorry, I came late to the party .. what exactly is he/she looking for?
[18:29:12] <uskerine> kaichiuchu I tried stackoverflow but they do not accept small companies
[18:29:29] <kaichiuchu> ah i didn't know that
[18:29:33] <kaichiuchu> that's actually fucked
[18:29:34] <river> omegatron: low-level real time programming *handling 10Gbps throughput*
[18:30:02] <river> 10 gigs is very much related to hardware
[18:30:33] <tk> LeoNerd: your serialisation library is borked btw
[18:30:44] <tk> LeoNerd: recompile with sanitization and just try running the tests
[18:30:44] <uskerine> It is 100% SW, but I need someone understanding how to handle stuff on a low level, preallocating memory and all that stuff because the amount of data to process is large
[18:30:49] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[18:31:06] <tk> you could put up a job ad somewhere
[18:31:56] <river> uskerine: im just saying if that's even possible is dependent on the hardware that things are running on
[18:32:08] <omegatron> plain ethernet stuff or fiber hardware involved ?
[18:32:09] <uskerine> We put ad jobs and we receive MongoDB developers
[18:32:13] <floatcomplex> uskerine: you may be overspecifying the solution to the problem
[18:32:15] <river> this is running through a network interface card?
[18:33:03] <uskerine> it requirs several servers I guess, but it uses regular network stuff right
[18:33:06] *** Joins: Inline (~Inline@aftr-37-201-241-222.unity-media.net)
[18:33:17] <river> are those cards able to even do 10gig
[18:33:25] <uskerine> I just need somebody with C background, knowing the basics of C++ so he can handle an API written in C++ and common sense
[18:33:27] <river> this is what i mean, its not just software
[18:34:11] <uskerine> It is only software, no drivers involved
[18:35:05] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 252 seconds)
[18:35:21] *** Joins: monkey_ (~user@181.114.17.106)
[18:36:11] *** Joins: wingsorc__ (~wingsorc@user/wingsorc)
[18:37:01] *** Quits: wingsorc__ (~wingsorc@user/wingsorc) (Client Quit)
[18:38:16] <tk> uskerine: maybe you're not putting a high enough salary estimate in your job offer?
[18:38:36] *** Joins: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de)
[18:38:37] *** Quits: donald1 (~donald@37.164.43.230) (Ping timeout: 240 seconds)
[18:38:48] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Ping timeout: 265 seconds)
[18:38:49] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[18:39:00] <pragma-> i'll do it for three bananas. how much could a banana cost? $7,500?
[18:39:20] <uskerine> No I do not think it is a salary issue as we do not have any specific budget. We are not paying super premium but we are definitely not paying bad.
[18:40:39] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: bbl)
[18:40:44] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[18:40:58] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:41:30] *** Joins: Jong (~Jong@2620:10d:c090:400::5:d6f6)
[18:41:40] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::5)
[18:42:32] <tk> Can you provide a cleaned version of what you put in the job ad?
[18:42:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[18:42:42] <omegatron> and using http://cpp-netlib.org for example and programming it yourself is not an option, I guess!?
[18:43:16] <pragma-> uskerine: you can talk dirty to me
[18:43:21] <tk> ...
[18:44:29] <omegatron> (I'm an employer myself and .. well .. in most cases we had to resort to do it ourselves, because there is/was simply noone available fitting the job description at that time)
[18:46:25] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[18:46:40] <tk> honestly, I'd like to know where all these non-boring jobs are
[18:47:16] <omegatron> .. are you experienced with bio-medical computer science ?  =D
[18:47:17] <Bou> I'd work for 3 literal bananas if the job is interesting and non-boring/depressing
[18:47:22] <tk> no
[18:47:31] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[18:47:40] <omegatron> see
[18:47:42] <river> ill get you all bananas for christmas you poor hungry monkeys
[18:47:50] <cehteh> uskerine: i think you need some team not some single dev for that :D
[18:48:19] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[18:48:39] <cehteh> the description is slightly vague still
[18:49:56] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:50:07] <floatcomplex> and yet, already overspecified
[18:50:53] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[18:51:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:51:56] <cehteh> would be fun to play with such, but its a broad field with a lot optimization opportunities, on OS, platform and alkgorithmic level, needs some broad knowledge .. and then i wont touch C++
[18:51:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:51:56] *** Joins: wroathe (~wroathe@user/wroathe)
[18:52:04] * floatcomplex mutters something about being handed a gorilla and the entire forest by river
[18:53:20] <cehteh> .. and prolly needs the willingness to experiment and wager on different approaches, benchmark against each other
[18:54:06] *** Joins: kurahaupo_ (~kurahaupo@pa49-181-52-140.pa.nsw.optusnet.com.au)
[18:54:59] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Remote host closed the connection)
[18:55:15] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[18:55:15] <omegatron> c++ and fun ...  can't imagine that ...
[18:55:26] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[18:55:44] <omegatron> unless "fun" and "pain" have switched meaning lately
[18:55:56] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[18:56:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:56:40] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 256 seconds)
[18:56:41] *** Quits: kurahaupo (~kurahaupo@pa49-180-180-200.pa.nsw.optusnet.com.au) (Ping timeout: 265 seconds)
[18:57:02] *** Quits: voirnox (~voirnox@xor.moe) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[18:57:25] *** Quits: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com) (Ping timeout: 240 seconds)
[18:58:04] <river> honestly C++ Is not as bad as I used to think
[18:58:15] <kaichiuchu> C++11 on up makes it pretty cool
[18:58:20] * floatcomplex munches on a gorilla-free banana
[18:58:31] <river> ever tried plantain?
[18:58:32] *** Joins: johnnyreb (~tth@user/johnnyreb)
[18:58:34] <kaichiuchu> but as I've been told, most companies don't really care about c++11 all that much
[18:58:38] <floatcomplex> fried yeha
[18:58:41] <river> yum
[18:59:48] <floatcomplex> kaichiuchu: i really, really doubt most companies care about c++ dialects
[19:00:00] <novns> C++ is nice for solving simple tasks, but once you go big with it - it's a trap
[19:00:13] <kaichiuchu> floatcomplex: that appears to be the case
[19:00:40] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[19:01:11] <novns> with C++ you spend hours debugging simple typos in templates
[19:01:31] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 265 seconds)
[19:01:31] <kaichiuchu> but C++ is what all of the hip cool kids use these days, accordingly the market for c++ programmers is still smaller than the market for web developers but still larger than the market for C programmers
[19:01:37] <novns> because the code with a typo still compiles
[19:01:39] <floatcomplex> i do think that if uskerine wants to hire someone to do this, they'll probably have to be poached
[19:01:44] <river> kaichiuchu: not rust?
[19:01:50] <novns> and t works but not as expected
[19:01:59] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[19:02:02] <kaichiuchu> river: i try my best not to think about rust
[19:02:27] <kaichiuchu> it has plenty of good ideas but enforced in very rigid ways "for your protection"
[19:02:35] <novns> and then you put strict rules about using C++ in your company
[19:02:50] <novns> "no templates!  no exceptions!"
[19:03:10] <kaichiuchu> but to answer your question, yes, Rust is what all of the hip cool kids want everything to be rewritten in
[19:03:12] <cehteh> i am somewhat happy with rust now
[19:03:17] <kaichiuchu> RIIR is not really much of a meme anymore, it's a movement
[19:03:22] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[19:03:40] <kaichiuchu> i absolutely like the idea of evaluating as much stuff during compile-time as possible
[19:03:53] <kaichiuchu> but it doesn't let me do what I want
[19:04:02] *** Quits: alch (~alch@151.36.121.52) (Ping timeout: 256 seconds)
[19:04:31] <kaichiuchu> and by that I mean I'm spending a great deal of time fighting the borrow checker
[19:04:36] <novns> try Zig, it borrows some ideas from Rust
[19:04:41] <kaichiuchu> yeah Zig looks _really_ cool
[19:04:43] <cehteh> since 20 years i am thinking about an 'ideal' language which is mostly based on the compiletime evaluaton idea
[19:05:01] <kaichiuchu> I do think C is a bit dated, but C++ isn't the alternative
[19:05:10] <cehteh> ack
[19:05:12] <uskerine> cehteh no it can be done by one person we are considering 1/2 months contract role. it is just receiving data in real time, doing some basic filtering and reparsing and passing to another system. Can't provide more details sorry
[19:05:15] <novns> cehteh, the ideal language is BASIC of course
[19:05:23] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::5) (Ping timeout: 265 seconds)
[19:05:25] <kaichiuchu> to be clear, I'll always have a special place for C
[19:05:32] *** Joins: alch (~alch@151.38.107.43)
[19:05:42] <cehteh> uskerine: noway :D
[19:06:26] <kaichiuchu> it's not impossible to write good C++ code, it's just very hard
[19:06:53] <kaichiuchu> the die hard idiomatic way to declare a variable is something like `auto x{int{5}};`
[19:06:54] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[19:07:38] <novns> try INTERCAL btw, it's a beautiful language
[19:07:52] <kaichiuchu> and like C, the world of "nobody is invalidated, but nobody is right" is present
[19:08:02] <kaichiuchu> there's no Right Way to do things in this world
[19:08:21] <kaichiuchu> what's INTERCAL
[19:08:32] <kaichiuchu> oh.
[19:08:32] * kaichiuchu runs
[19:08:44] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[19:09:03] *** Joins: Satin (uid193953@id-193953.ilkley.irccloud.com)
[19:09:09] *** Joins: szutt (~szutt@116.37.2.145)
[19:09:42] *** Quits: kapil (~kapil@o-k.website) (Ping timeout: 256 seconds)
[19:10:16] *** Joins: kapil (~kapil@o-k.website)
[19:11:03] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[19:11:53] <pragma-> Haskell and Nim have some good ideas too.
[19:12:00] *** Joins: X-Scale` (~ARM@25.55.43.5.rev.vodafone.pt)
[19:12:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:12:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:12:47] *** Joins: wroathe (~wroathe@user/wroathe)
[19:13:11] * cehteh likes prolog :D
[19:13:16] <floatcomplex> is haskell turing complete tho
[19:13:18] * floatcomplex runs
[19:13:35] <roxlu> river: do you know what RssFile: size of resident file mappings
[19:13:40] <novns> Haskell is nice if you've spent half a century studying it
[19:13:40] <roxlu> ... means?
[19:13:45] <cehteh> .. and mercury is the better haskell, unfortunally it never left the academic state
[19:13:49] *** Quits: X-Scale (~ARM@46.50.4.128) (Ping timeout: 240 seconds)
[19:13:49] *** X-Scale` is now known as X-Scale
[19:14:18] *** Joins: seninha (~seninha@user/seninha)
[19:14:21] <river> roxlu: I think thats to do with disk backed mapped memory
[19:14:56] *** Joins: tolog (~tolog@91.193.6.10)
[19:15:00] <roxlu> river: like swap? or shmem/memmap
[19:17:28] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[19:21:36] *** Joins: shailangsa (~shailangs@host86-161-220-126.range86-161.btcentralplus.com)
[19:22:33] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Read error: No route to host)
[19:23:02] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[19:23:18] *** Quits: lleo (~leo@89-200-32-158.mobile.kpn.net) (Ping timeout: 256 seconds)
[19:23:32] *** Joins: meator (~meator@user/meator)
[19:25:02] <nomagno> Hey, I have a fairly huge issue with dumping a section of the memory from my VM. I've tried to pin down the issue, but if anyone sees any obvious undefined behaviour or dumb error, I'd appreciate it. Compacted explanation with nice CLI examples: https://termbin.com/t5ju
[19:25:43] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Quit: leaving)
[19:26:03] *** Quits: Tyaku (~Tyaku@176-154-243-92.abo.bbox.fr) (Quit: Lost terminal)
[19:26:12] <nomagno> I simply can't explain this one-time offset, I'm opening as `r+`, it just shouldn't happen
[19:26:50] <nomagno> And the duplication on the second run is extremely weird too
[19:27:18] <nomagno> the behaviour doesn't change after the second run
[19:27:28] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:28:06] *** Quits: Oxfuxxx (~sharky@89.35.30.169) (Ping timeout: 265 seconds)
[19:28:58] *** Joins: Oxfuxxx_ (~sharky@37.120.158.30)
[19:28:58] *** Joins: Guest8331 (~textual@2601:84:4501:6440:196c:9879:2e7d:1715)
[19:29:30] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:29:36] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[19:30:11] *** Quits: Oxfuxxx_ (~sharky@37.120.158.30) (Client Quit)
[19:31:00] *** Joins: quartz (~quartz@user/quartz)
[19:31:47] *** Joins: Oxfuxxx (~sharky@195.200.221.41)
[19:31:52] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:ad6e:11f1:f274:1597)
[19:34:31] *** aqua is now known as kish`
[19:36:19] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 265 seconds)
[19:36:44] *** Joins: johnnyreb (~tth@user/johnnyreb)
[19:38:23] <nomagno> OOH, `fread` changes the file position, I need to use `fseek` afterwards
[19:38:27] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:ad6e:11f1:f274:1597) (Quit: Leaving)
[19:41:33] *** phineasflynn is now known as doofenshmirtz
[19:44:06] *** Joins: Viewday116 (~Viewday@user/viewday)
[19:45:27] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:45:27] *** Viewday116 is now known as Viewday11
[19:45:34] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Quit: Client closed)
[19:50:14] <cart_man> Anybody know how ualarm(100,500000); actually works? Is it being processed OS level? in #include<signal.h> 
[19:52:39] *** Joins: lleo (~leo@89-200-32-158.mobile.kpn.net)
[19:52:40] <nomagno> cart_man: ualarm is not a C nor a POSIX standard function
[19:54:45] *** Joins: dohtem (uid524096@user/dohtem)
[19:54:54] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[19:55:26] <nomagno> ualarm is purposefully unspecified in POSIX. You want to look at the Linux kernel code
[19:55:35] <nomagno> slash glibc
[19:56:43] *** Quits: Guest8331 (~textual@2601:84:4501:6440:196c:9879:2e7d:1715) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:56:57] *** Joins: strajder (~strajder@user/strajder)
[19:59:13] *** Quits: lleo (~leo@89-200-32-158.mobile.kpn.net) (Ping timeout: 268 seconds)
[20:00:54] <floatcomplex> http://git.musl-libc.org/cgit/musl/tree/src/unistd/ualarm.c
[20:01:29] <floatcomplex> it's just a wrapper around setitimer
[20:03:49] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 240 seconds)
[20:04:22] *** Joins: Betal (~Betal@user/betal)
[20:06:00] *** Joins: johnnyreb (~tth@user/johnnyreb)
[20:07:31] *** Joins: Techcable (~Techcable@168.235.93.147)
[20:08:20] *** Joins: donald1 (~donald@2a01:e0a:95e:7ca0:d0e7:3f4e:b209:88f5)
[20:08:38] *** Quits: kurahaupo_ (~kurahaupo@pa49-181-52-140.pa.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[20:10:34] * APic laughs magically.
[20:10:35] *** Quits: donald2 (~donald@37.164.43.230) (Read error: Connection reset by peer)
[20:10:51] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Quit: Client closed)
[20:13:39] * pragma- farts musically.
[20:14:26] <APic> Gesundheit.
[20:14:51] <APic> pragma-: Do You also have a best friend who reprogrammed You via NLP?
[20:15:52] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[20:20:10] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[20:20:30] *** Quits: Jong (~Jong@2620:10d:c090:400::5:d6f6) (Remote host closed the connection)
[20:23:13] *** Joins: mrig (~mrig@user/mrig)
[20:26:13] *** Quits: uskerine (~uskerine@0x3ec66374.ejb.customer.dk.telia.net) (Ping timeout: 240 seconds)
[20:27:21] *** Joins: effexzi (uid474242@id-474242.ilkley.irccloud.com)
[20:28:10] *** Joins: dmenz (~dmenz@2804:14d:5cd4:5e94::d)
[20:29:39] *** Joins: bogdomania (bogdomania@2a02:2f01:6713:d900:8483:7d4f:b696:9b0f)
[20:30:09] *** Quits: bogdomania (bogdomania@2a02:2f01:6713:d900:8483:7d4f:b696:9b0f) (Client Quit)
[20:30:25] *** Joins: bogdomania (bogdomania@user/bogdomania)
[20:30:46] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[20:30:46] *** Joins: donald2 (~donald@2a01:e0a:95e:7ca0:d0e7:3f4e:b209:88f5)
[20:33:09] *** Quits: donald1 (~donald@2a01:e0a:95e:7ca0:d0e7:3f4e:b209:88f5) (Ping timeout: 252 seconds)
[20:34:33] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[20:37:27] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 268 seconds)
[20:37:42] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 265 seconds)
[20:39:04] *** Joins: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4)
[20:40:18] *** Joins: johnnyreb (~tth@user/johnnyreb)
[20:42:16] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:43:51] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[20:46:48] *** Joins: Bruda (~bruda@172.58.62.135)
[20:49:03] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[20:49:33] *** Joins: novns (~novns@user/novns)
[20:49:49] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.19) (Ping timeout: 240 seconds)
[20:53:47] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[20:55:18] *** Quits: simon323 (~simon323@2409:8a34:468:83d0:d0c4:7304:66f3:e561) (Quit: simon323)
[20:55:56] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[20:58:13] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 240 seconds)
[20:58:37] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[20:59:19] *** Joins: evlc (~evlc@l37-193-63-15.novotelecom.ru)
[21:01:42] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you tomorrow)
[21:02:03] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[21:02:17] *** Quits: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:02:18] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[21:06:56] *** Quits: evlc (~evlc@l37-193-63-15.novotelecom.ru) (Quit: WeeChat 3.3)
[21:08:17] *** Quits: Oxfuxxx (~sharky@195.200.221.41) (Ping timeout: 268 seconds)
[21:09:01] *** Joins: Akuli (~Akuli@213.216.209.210)
[21:16:57] *** Joins: cousteau (~cousteau@user/cousteau)
[21:20:00] *** csjp__ is now known as csjp
[21:20:21] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[21:20:29] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[21:22:13] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Ping timeout: 240 seconds)
[21:27:31] *** Joins: lleo (~leo@89-200-32-158.mobile.kpn.net)
[21:28:12] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[21:29:08] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:29:26] *** Joins: kurahaupo (~kurahaupo@pa49-181-52-140.pa.nsw.optusnet.com.au)
[21:30:31] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:30:32] *** Quits: donald2 (~donald@2a01:e0a:95e:7ca0:d0e7:3f4e:b209:88f5) (Ping timeout: 252 seconds)
[21:31:36] *** Joins: joe (~textual@2601:84:4501:6440:196c:9879:2e7d:1715)
[21:32:00] *** joe is now known as Guest841
[21:32:18] *** zer0bitz_ is now known as zer0bitz
[21:32:58] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 268 seconds)
[21:33:28] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[21:33:44] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[21:38:05] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[21:39:04] *** Joins: phineasflynn (~farawayas@103.160.128.7)
[21:40:07] *** Joins: magla (~gelignite@55d4e16d.access.ecotel.net)
[21:40:30] *** phineasflynn is now known as ferbflynn
[21:41:25] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Ping timeout: 240 seconds)
[21:41:34] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 256 seconds)
[21:42:39] *** ferbflynn is now known as doofenshmirtz
[21:43:56] *** Joins: Viewday110 (~Viewday@user/viewday)
[21:45:21] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[21:45:22] *** Viewday110 is now known as Viewday11
[21:46:49] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 265 seconds)
[21:51:55] *** Joins: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4)
[21:52:02] *** Joins: Jong (~Jong@2620:10d:c090:400::5:d6f6)
[21:52:16] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[21:55:14] *** Quits: Guest841 (~textual@2601:84:4501:6440:196c:9879:2e7d:1715) (Quit: Textual IRC Client: www.textualapp.com)
[21:55:45] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Quit: Leaving)
[21:56:21] <Bruda> caze: you around?
[21:57:51] *** Quits: agander_m (sid407952@tinside.irccloud.com) (Ping timeout: 245 seconds)
[21:58:16] *** Quits: subvisor (sid502026@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[21:58:28] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: shutting down pc for 8+ hrs.)
[21:58:32] *** Joins: jjido (~Denis@90.213.58.125)
[21:58:37] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 240 seconds)
[21:58:41] *** Quits: englishm (sid6629@tinside.irccloud.com) (Ping timeout: 245 seconds)
[21:58:46] *** Quits: celphi_ (sid97751@user/celphi) (Read error: Connection reset by peer)
[21:59:05] *** Joins: subvisor (sid502026@id-502026.helmsley.irccloud.com)
[21:59:13] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[21:59:35] *** Joins: englishm (sid6629@id-6629.tinside.irccloud.com)
[22:00:25] *** Joins: celphi_ (sid97751@helmsley.irccloud.com)
[22:01:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:01:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:01:53] *** Joins: wroathe (~wroathe@user/wroathe)
[22:04:21] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:06:42] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[22:13:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[22:13:32] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[22:14:00] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[22:14:10] *** Joins: bindu_ (~bindu@user/bindu)
[22:16:02] *** bindu_ is now known as bindu
[22:17:18] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[22:17:50] *** Quits: dmenz (~dmenz@2804:14d:5cd4:5e94::d) (Ping timeout: 252 seconds)
[22:18:57] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[22:21:13] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[22:21:19] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[22:25:33] *** Joins: skintimidation (~skintimid@66.205.192.145)
[22:29:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:29:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:29:27] *** Joins: wroathe (~wroathe@user/wroathe)
[22:30:19] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 265 seconds)
[22:30:25] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:33:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:35:42] <Bruda> floatcomplex?
[22:40:45] *** Quits: skintimidation (~skintimid@66.205.192.145) (Quit: Client closed)
[22:41:03] <Bruda> The code he told me to fill in: https://ideone.com/qjVPOx - The diagram he told me to use: https://i.imgur.com/PdQlSur.png - The code I came up with: https://ideone.com/dMAbVq
[22:41:33] <Bruda> Does that satisfy the c89 compliant variant for kr1-23?
[22:41:50] *** Joins: mahmutov (~mahmutov@5.176.31.136)
[22:42:03] <Bruda> Granted I can refine it a bit. I just wanted to leave the parts in that I skipped to show how they might have been unnecessary.
[22:42:10] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[22:43:32] *** Joins: arinov (~arinov@213.194.126.155)
[22:43:47] <Bruda> The output on my local machine appears different than what's showing up on that site though.
[22:44:48] <Bruda> My version works on my system...
[22:44:56] *** Joins: donald1 (~donald@2a01:e0a:95e:7ca0:d0e7:3f4e:b209:88f5)
[22:45:06] *** Quits: Haxxa (~Haxxa@202-144-160-174.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:46:01] <Bruda> Oh its working on there now too. Didn't update the input. Derp.
[22:46:10] <floatcomplex> :)
[22:46:30] <Bruda> floatcomplex! What do you think? 
[22:47:00] <floatcomplex> if it works, it works
[22:47:03] <floatcomplex> here's my latest: https://godbolt.org/z/n85WWoEPr
[22:47:21] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:50:20] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[22:51:11] *** Quits: magla (~gelignite@55d4e16d.access.ecotel.net) (Quit: Stay safe!)
[22:51:18] *** Joins: bindu (~bindu@user/bindu)
[22:51:36] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:51:42] <Bruda> That site is confusing when trying to see the output of what you enter for stdin input.
[22:51:43] *** Joins: uskerine (~uskerine@0x3ec66374.ejb.customer.dk.telia.net)
[22:52:19] <Bruda> Oh I see what you did there.
[22:52:25] <Bruda> Ran the program on your own code.
[22:52:43] *** Joins: jjido (~Denis@90.213.58.125)
[22:54:11] *** Joins: idle_rain (~idle_rain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[22:54:53] <Bruda> I see how your's works. Though I'll be honest, caze's way was pretty straightforward once I grasped how to follow the dialog in the code he gave me. Seems easier to follow the code this way too.
[22:55:17] <Bruda> though I realized about 3 states were likely unnecessary and skipped them.
[22:55:59] <Bruda> Like why test for anything between quotes? It gets outputted regardless and doesn't start or end a comment.
[22:57:18] *** Quits: bogdomania (bogdomania@user/bogdomania) (Quit: Konversation terminated!)
[22:58:02] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[22:58:50] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:8db1:f08e:3f5b:3312) (Quit: Quit)
[22:59:48] *** Quits: idle_rain (~idle_rain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: idle_rain)
[23:00:28] <Bruda> But I posted in here in case there was some weird code instance I didn't think of. But as far as I can tell the exercise requirements are satisfied.
[23:00:44] *** Joins: seninha (~seninha@user/seninha)
[23:01:56] *** Joins: skintimidation (~skintimid@66.205.192.145)
[23:02:01] *** Quits: lleo (~leo@89-200-32-158.mobile.kpn.net) (Ping timeout: 252 seconds)
[23:03:10] *** Quits: alch (~alch@151.38.107.43) (Ping timeout: 256 seconds)
[23:03:45] <Bruda> kr1-24 is scary looking though. Who's got that diagram? lol
[23:04:56] *** Joins: alch (~alch@151.36.99.223)
[23:05:14] *** Joins: PortableDave (~portabled@118.208.121.87)
[23:05:19] <floatcomplex> Bruda: for 1-23 i think for strict c89 the single quotes thing may be a red herring but the double quotes thing definitely isn't
[23:05:34] <floatcomplex> scroll to the bottom
[23:05:52] <floatcomplex> of my godbolt, see if yours correctly handles those
[23:06:47] <Bruda> Ohhh. I guess I didn't think about the escaped thing... Mine probably breaks those. Ok now I see why.
[23:07:15] <twkm> '/*' might be valid for some implementation.  true, it isn't portable.
[23:08:05] <Bruda> I was thinking of the wrong slash when I was processing that part of the diagram.
[23:09:25] *** Quits: PortableDave (~portabled@118.208.121.87) (Ping timeout: 240 seconds)
[23:13:34] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[23:14:34] <floatcomplex> kr1-24 is dangerous because it makes people think they can and should write their own languages
[23:14:50] <floatcomplex> once you start down that dark path, forever will it dominate your destiny
[23:15:36] <Bruda> lol it does seem like an exercise I might not be prepared for. There's a lot of syntax stuff to be aware off and that code will get pretty complex quickly.
[23:15:47] <Bruda> It also says it'll be hard in full generality.
[23:15:57] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[23:16:44] *** Joins: magla (~gelignite@55d4e16d.access.ecotel.net)
[23:17:05] <floatcomplex> right, which starts you thinking about how "c would be easier to parse if it X" and then you start mentally designing a language X that is easier to parse, without being able to stop
[23:17:17] *** Joins: sicelo_ (~sicelo@user/sicelo)
[23:17:37] <Bruda> I can see that happening to me. I would find myself going down a rabbit hole.
[23:17:42] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[23:18:01] *** Quits: sicelo_ (~sicelo@user/sicelo) (Remote host closed the connection)
[23:18:02] <MrMobius> and you may get a language like Forth that is trivial to parse and mostly horrible to use
[23:18:15] <MrMobius> and even enjoyable to implement
[23:18:17] *** Joins: Oxfuxxx (~sharky@82-64-161-82.subs.proxad.net)
[23:18:56] <floatcomplex> yeah i'm accidentally in that picture too and i don't like it
[23:19:05] <floatcomplex> there are a lot of languages that have morw i
[23:19:19] <floatcomplex> more implementations than useful programs written in them
[23:20:33] <Bruda> Ok here we go: https://ideone.com/g1fMGP
[23:21:04] <Bruda> Was easy enough to finish the code following the diagram. Damn, caze definitely set me up for success here.
[23:21:07] <MrMobius> yes I wonder how many people have gone to job interviews and said "I implemented an entire working compiler"
[23:21:25] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:89d9:5e4e:e450:1642)
[23:21:27] <river> me
[23:21:57] <MrMobius> without the employer realizing what they really did
[23:22:20] *** Joins: sicelo_ (~sicelo@harlock.dyne.org)
[23:22:20] *** Quits: sicelo_ (~sicelo@harlock.dyne.org) (Changing host)
[23:22:20] *** Joins: sicelo_ (~sicelo@user/sicelo)
[23:23:10] <Bruda> Honestly when I look at kr1-24 I realize there's too many cases to cover as to how to know when there should be a closing bracket, brace, etc. Even just drawing the state diagram feels like chaos.
[23:23:43] <Bruda> Feels like a complicated exercise for a basic tutorial chapter.
[23:24:03] <Bruda> Someone who hasn't even fully covered the language trying to write a syntax checker?
[23:26:05] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:89d9:5e4e:e450:1642) (Client Quit)
[23:27:10] <Bruda> But...if someone puts a proper state diagram in front of me I think caze possibly has me prepared enough to follow it.... 
[23:28:16] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:68eb:9b8c:ed60:d2d2)
[23:29:52] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[23:33:16] *** Quits: sicelo_ (~sicelo@user/sicelo) (Quit: Bye!)
[23:35:16] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[23:36:23] *** Joins: shiroyas1 (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[23:37:22] *** Joins: krychu_ (~krychu@2a01:4f8:210:50c5::2)
[23:37:33] *** Joins: hayaliali (~alip@exherbo/developer/alip)
[23:37:33] *** Joins: dme2_ (~dme2@67.205.140.199)
[23:37:34] *** Joins: wyre_ (~wyre@user/wyre)
[23:37:41] *** Joins: dos1 (~dos@dosowisko.net)
[23:38:07] *** moose` is now known as moose
[23:39:18] *** Joins: oldlaptop_ (~quassel@45.63.78.126)
[23:39:38] *** Joins: ndorf_ (~nd@ob.noxio.us)
[23:39:44] *** Joins: f0xb4t_ (~mac@78.46.13.69)
[23:40:08] *** Joins: bleb_ (~cm@user/bleb)
[23:40:59] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[23:42:25] *** Quits: rcf (rcf@iceland.sdf.org) (Quit: WeeChat 3.2.1)
[23:44:04] *** Joins: Viewday116 (~Viewday@user/viewday)
[23:44:30] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[23:44:30] *** Quits: krychu (~krychu@static.152.151.251.148.clients.your-server.de) (Quit: ZNC 1.8.2+deb1+bionic2 - https://znc.in)
[23:44:30] *** Quits: alip (~alip@exherbo/developer/alip) (Remote host closed the connection)
[23:44:30] *** Quits: dme2 (~dme2@67.205.140.199) (Remote host closed the connection)
[23:44:30] *** Quits: wyre (~wyre@user/wyre) (Remote host closed the connection)
[23:44:30] *** Quits: oldlaptop (~quassel@45.63.78.126) (Quit: No Ping reply in 180 seconds.)
[23:44:30] *** Quits: SantasWiFi (~PublicWiF@user/publicwifi) (Ping timeout: 260 seconds)
[23:44:30] *** Quits: ndorf (~nd@ob.noxio.us) (Ping timeout: 260 seconds)
[23:44:31] *** Quits: dos (~dos@dosowisko.net) (Ping timeout: 260 seconds)
[23:44:31] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Ping timeout: 260 seconds)
[23:44:31] *** Quits: bleb (~cm@user/bleb) (Ping timeout: 260 seconds)
[23:44:31] *** Quits: f0xb4t (~mac@78.46.13.69) (Ping timeout: 260 seconds)
[23:44:31] *** dos1 is now known as dos
[23:44:35] *** bleb_ is now known as bleb
[23:44:53] <floatcomplex> modern alternative: consider writing a json parser instead. json.org is exactly the state machine you need to do that. it requires the same code techniques and it's a much less open-ended problem
[23:45:14] <floatcomplex> it'll end up being about 150 lines of code
[23:45:24] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[23:45:24] *** Viewday116 is now known as Viewday11
[23:45:27] *** Joins: Akiva (~Akiva@user/Akiva)
[23:45:37] <twkm> for a chapter 1 exercise.  HAHHAHAHAAHAHAHA
[23:47:00] <floatcomplex> twkm: have you looked at what the original exercise is?
[23:47:20] <floatcomplex> it's significantly more complicated than a json parser
[23:47:37] <floatcomplex> so you're laughing at k&r
[23:47:49] <Bruda> If a json parser is basically the same thing then I'm still at square one, figuring out the diagram for it.
[23:48:05] <caze> hi
[23:48:12] <floatcomplex> Bruda: click on json.org, the site is literally a state diagram
[23:48:23] <Bruda> Oh. 
[23:48:29] <Bruda> hey caze, https://ideone.com/g1fMGP
[23:49:22] <Bruda> BTW, caze, got a diagram for kr1-24? Heh.
[23:49:39] *** Joins: sicelo_ (~sicelo@harlock.dyne.org)
[23:49:39] *** Quits: sicelo_ (~sicelo@harlock.dyne.org) (Changing host)
[23:49:39] *** Joins: sicelo_ (~sicelo@user/sicelo)
[23:49:41] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[23:49:43] <caze> Bruda: Nice.
[23:49:49] <caze> ,kr1-24
[23:49:49] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-24. Write a program to check a C program for rudimentary syntax errors like unmatched parentheses, brackets and braces. Don’t forget about quotes, both single and double, escape sequences, and comments. (This program is hard if you do it in full generality.)
[23:49:56] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[23:50:15] <Bruda> I'm shaking in my boots trying to imagine how to draw that one out.
[23:50:22] <floatcomplex> yeah, a json parser is a much more constrained problem than that
[23:50:34] <floatcomplex> but requires the same techniques
[23:50:47] <floatcomplex> Bruda: someone drew it out for yoy
[23:50:50] <caze> Bruda: It's not that much different from 1-23. A few more states.
[23:51:06] <Bruda> Just a few....
[23:51:12] <caze> Bruda: But actually, this problem can't be solved with a pure finite state machine.
[23:51:27] <floatcomplex> caze: 1-24 probably wants recursion
[23:51:35] <Bruda> Pfft.
[23:51:42] <Bruda> Well for one recursion hasn't been covered yet...
[23:52:08] *** Joins: meator (~meator@user/meator)
[23:52:08] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:52:09] *** Joins: SantasWiFi (~PublicWiF@user/publicwifi)
[23:52:16] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[23:53:44] <caze> Bruda: This problem requires counting, and finite state machines are incapable of counting.
[23:54:03] <floatcomplex> recursion is a form of counting
[23:54:30] <caze> Bruda: You need a PDA.
[23:54:37] <caze> (or equivalent)
[23:54:55] <Bruda> Yay... Maybe I can just chalk this one up as 'over my head' for now and finally get one with the book from chapter 2 again.
[23:54:56] *** Joins: dutch (~DutchIngr@user/dutch)
[23:55:01] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[23:55:03] <caze> Bruda: https://en.wikipedia.org/wiki/Pushdown_automaton
[23:55:15] <caze> Bruda: It's not really that hard.
[23:55:43] <Bruda> You say that, eventually it proves to be simpler then I realize, but not without a bit of help.
[23:55:45] <caze> You just need a buffer where you save the sequence of opening braces you've seen.
[23:56:12] <caze> And remove the last one when you see its closing brace.
[23:56:28] <floatcomplex> use the C call stack for that :)
[23:56:53] <caze> You can still use the state machine to filter out "false" braces, e.g., things that appear in comments, strings, char constants, etc.
[23:56:54] <Bruda> call stack? Is that something covered in chapter 1?
[23:57:52] *** Quits: Guest5645 (~luca0N@nautilus.luca0n.com) (Ping timeout: 268 seconds)
[23:57:53] <floatcomplex> Bruda: i mean use recursion, when you get to an opening brace you call a loop_until_matching_closing_brace() function
[23:58:28] <floatcomplex> the call graph of your parser will end up resembling the code it's parsing
[23:58:42] <Bruda> Yea so I'd need some functions to call. Like when encountering quotes inside of braces, etc.
[23:59:30] <caze> Bruda: You mean braces inside of quotes?
[23:59:38] <Bruda> Well yea those too.
