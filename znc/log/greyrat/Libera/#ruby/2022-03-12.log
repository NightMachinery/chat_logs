[00:02:55] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[00:07:15] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:32:06] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[00:34:51] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:42:49] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:43:02] *** Quits: Tasi (~Tasi@20014C4C220C8F000CE80D12B41311DE.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[00:49:25] <adam12> weaksauce: Oof. You're right. It works coincidentally.
[00:52:30] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:56:21] *** Joins: Tasi (~Tasi@20014C4C220C8F00EC51A86A7F3E144A.catv.pool.telekom.hu)
[01:12:18] *** Quits: robotmay (~beepboop@2001:8b0:7af0:2580:1d0b:55bb:ed0a:7673) (Quit: No Ping reply in 180 seconds.)
[01:13:30] *** Joins: robotmay (~beepboop@2001:8b0:7af0:2580:296f:31d:bd49:6ce0)
[01:19:01] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 272 seconds)
[01:23:00] *** Quits: Tasi (~Tasi@20014C4C220C8F00EC51A86A7F3E144A.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[01:27:11] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[01:36:55] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[01:43:57] *** Joins: Tasi (~Tasi@20014C4C220C8F0025192B2D9C6D5055.catv.pool.telekom.hu)
[01:56:14] *** Quits: drincruz (drincruz@2607:5300:203:3f52::19) (Ping timeout: 252 seconds)
[01:59:32] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[02:00:17] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:01:33] *** Joins: gfawcett1 (~gfawcett@ns521973.ip-158-69-124.net)
[02:01:35] *** Joins: Goodbye_Vincent4 (cyvahl@freakshells.net)
[02:01:37] *** Joins: rhe8 (~rhe@labyrinth.rhe.jp)
[02:01:43] *** Joins: yuckey2d4 (~yuckey2d@gateway/vpn/pia/yuckey2d)
[02:01:44] *** Joins: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com)
[02:01:50] *** Joins: lucerne8 (~lucerne@ip202.ip-51-178-215.eu)
[02:02:31] *** Joins: entropy (~mit@ip5f599513.dynamic.kabel-deutschland.de)
[02:02:31] *** Joins: Bitflux (~byte@byteflux.net)
[02:02:36] *** Joins: seabre_ (~seabre@user/seabre)
[02:02:39] *** Joins: dannyAAM_ (~dannyAAM@saru.saru.moe)
[02:03:33] *** Joins: cxl_ (~hey_its_m@84.254.102.36)
[02:03:49] *** Joins: quintasan_ (~quassel@quintasan.pl)
[02:04:32] *** Joins: m_antis_ (~znc_admin@ool-44c09a21.dyn.optonline.net)
[02:05:50] *** Joins: mahlon_ (~mahlon@martini.nu)
[02:05:53] *** Joins: jimeh_ (jimeh@matrix.bah.io)
[02:08:43] *** Quits: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com) (Quit: Client closed)
[02:09:04] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[02:09:44] *** Quits: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net) (*.net *.split)
[02:09:44] *** Quits: rhe (~rhe@labyrinth.rhe.jp) (*.net *.split)
[02:09:44] *** Quits: cout (~cout@li941-240.members.linode.com) (*.net *.split)
[02:09:45] *** Quits: cxl (~hey_its_m@84.254.102.36) (*.net *.split)
[02:09:45] *** Quits: entropie (~mit@ip5f599513.dynamic.kabel-deutschland.de) (*.net *.split)
[02:09:45] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[02:09:45] *** Quits: jimeh (jimeh@matrix.bah.io) (*.net *.split)
[02:09:45] *** Quits: pandabot (~pandabot@user/leftylink/bot/pandabot) (*.net *.split)
[02:09:45] *** Quits: leftylink (~leftylink@user/leftylink) (*.net *.split)
[02:09:45] *** Quits: seabre (~seabre@user/seabre) (*.net *.split)
[02:09:45] *** Quits: Goodbye_Vincent (~Goodbye_V@freakshells.net) (*.net *.split)
[02:09:45] *** Quits: Pixi (~Pixi@user/pixi) (*.net *.split)
[02:09:45] *** Quits: Spitfire_ (~spitfire@user/Spitfire) (*.net *.split)
[02:09:45] *** Quits: yuckey2d (~yuckey2d@gateway/vpn/pia/yuckey2d) (*.net *.split)
[02:09:45] *** Quits: apotheon (~apotheon@copyfree/founder/apotheon) (*.net *.split)
[02:09:45] *** Quits: mahlon (~mahlon@martini.nu) (*.net *.split)
[02:09:45] *** Quits: quintasan (~quassel@quintasan.pl) (*.net *.split)
[02:09:45] *** Quits: dannyAAM (~dannyAAM@saru.saru.moe) (*.net *.split)
[02:09:45] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[02:09:45] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[02:09:45] *** Quits: gfawcett (~gfawcett@ns521973.ip-158-69-124.net) (*.net *.split)
[02:09:45] *** entropy is now known as entropie
[02:09:45] *** rhe8 is now known as rhe
[02:09:45] *** dannyAAM_ is now known as dannyAAM
[02:09:46] *** Goodbye_Vincent4 is now known as Goodbye_Vincent
[02:09:46] *** yuckey2d4 is now known as yuckey2d
[02:09:47] *** lucerne8 is now known as lucerne
[02:09:49] *** gfawcett1 is now known as gfawcett
[02:10:33] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[02:10:44] *** jimeh_ is now known as jimeh
[02:11:34] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:11:39] *** Joins: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com)
[02:15:26] *** Joins: cout (~cout@li941-240.members.linode.com)
[02:15:26] *** Joins: pandabot (~pandabot@user/leftylink/bot/pandabot)
[02:15:26] *** Joins: leftylink (~leftylink@user/leftylink)
[02:15:26] *** Joins: Pixi (~Pixi@user/pixi)
[02:15:26] *** Joins: Spitfire_ (~spitfire@user/Spitfire)
[02:15:26] *** Joins: apotheon (~apotheon@copyfree/founder/apotheon)
[02:16:45] *** Quits: Artea- (~Lufia@artea.com.pt) (Quit: ZNC 1.6.2 - http://znc.in)
[02:18:59] *** Joins: drincruz (drincruz@2607:5300:203:3f52::19)
[02:26:02] *** Quits: Tasi (~Tasi@20014C4C220C8F0025192B2D9C6D5055.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[02:26:47] *** Quits: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com) (Quit: Client closed)
[02:30:17] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[02:32:59] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:34:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:35:05] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:36:15] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:37:07] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:37:54] *** Joins: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com)
[02:38:17] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:39:15] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:40:40] *** Joins: roadie (~user@pd956924f.dip0.t-ipconnect.de)
[02:41:07] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:42:03] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:43:17] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:44:08] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:45:26] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:46:18] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:47:41] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:48:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:50:11] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:51:05] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:52:46] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:52:52] *** Quits: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com) (Quit: Client closed)
[02:53:42] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:55:04] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[02:56:02] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:58:17] *** Joins: Tasi (~Tasi@20014C4C220C8F0025192B2D9C6D5055.catv.pool.telekom.hu)
[03:02:15] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[03:03:58] *** Quits: nemesit (~nemesit@myriadvisuals.com) (Ping timeout: 250 seconds)
[03:06:48] *** Quits: kaleido (~adam@user/kaleido) (Remote host closed the connection)
[03:10:01] *** Joins: vvmt0 (~guest@2806:261:491:43:5f8:fc11:ca24:3111)
[03:12:51] *** Joins: kaleido (~adam@user/kaleido)
[03:15:33] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:19:20] *** Quits: roadie (~user@pd956924f.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[03:21:03] *** Parts: vvmt0 (~guest@2806:261:491:43:5f8:fc11:ca24:3111) (WeeChat 3.4)
[03:49:33] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[03:55:26] *** Joins: roadie (~user@pd956924f.dip0.t-ipconnect.de)
[03:55:55] *** Quits: mmalter (~mmalter@88.126.10.237) (Quit: Lost terminal)
[04:33:51] *** Quits: Tasi (~Tasi@20014C4C220C8F0025192B2D9C6D5055.catv.pool.telekom.hu) (Quit: Leaving)
[05:27:48] *** Joins: eddof13 (~eddof13@192.154.196.160)
[05:36:58] *** Joins: rijndael (~rijndael@31-187-42-13.dynamic.upc.ie)
[05:37:05] *** rijndael is now known as John__
[05:37:24] <John__> hi. I'm attempting to work with Watir's wait_until() method. https://www.rubydoc.info/gems/watir/Watir%2FWait.until
[05:37:58] <John__> I have seen examples where watir uses wait_until(element visible or selected)
[05:38:14] <John__> but I have not seen a function where you'd have an element "changed/updated"
[05:38:23] <John__> any ideas?
[05:39:03] <John__> I have a <a href="#"> anchor which starts off like that. once javascript runs, it will change href to an actual URI
[05:39:14] <John__> and I need to wait until it has been "populated"
[05:57:21] *** Joins: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com)
[06:17:27] *** Quits: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com) (Quit: Client closed)
[06:17:42] *** Quits: eddof13 (~eddof13@192.154.196.160) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:23:15] *** Joins: rhe5 (~rhe@labyrinth.rhe.jp)
[06:24:39] *** Quits: rhe (~rhe@labyrinth.rhe.jp) (Ping timeout: 252 seconds)
[06:24:39] *** rhe5 is now known as rhe
[06:37:26] *** Quits: roadie (~user@pd956924f.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:20:12] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 252 seconds)
[07:32:32] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[08:24:08] *** Joins: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com)
[08:24:36] *** Quits: rando25892 (~homefame@user/rando25892) (Ping timeout: 272 seconds)
[08:29:27] *** Joins: bluedust (~bluedust@86.106.136.215)
[08:36:00] *** Quits: mdemo (~mdemo@user/mdemo22) (Quit: The Lounge - https://thelounge.github.io)
[08:36:27] *** Joins: mdemo (~mdemo@user/mdemo22)
[08:38:56] *** Quits: bluedust (~bluedust@86.106.136.215) (Ping timeout: 250 seconds)
[08:39:29] *** Quits: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com) (Quit: Client closed)
[08:44:06] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (Quit: The BNC has broken!)
[08:48:02] *** Quits: yossarian (~yossarian@user/yossarian) (Ping timeout: 250 seconds)
[08:49:46] *** Quits: JSharp (sid4580@2a03:5180:f:2::11e4) (Ping timeout: 250 seconds)
[08:49:46] *** Quits: r3my (sid262473@id-262473.tinside.irccloud.com) (Ping timeout: 250 seconds)
[08:50:05] *** Quits: weyhmueller (~weyhmuell@blofeld.nc.w9r.de) (Quit: ZNC 1.8.2 - https://znc.in)
[08:50:05] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (Read error: Connection reset by peer)
[08:50:06] *** Quits: BSaboia (~bsaboia@2a05:f480:1400:b88:5400:3ff:fe51:575c) (Quit: ZNC - https://znc.in)
[08:50:06] *** Quits: frodl (sid527064@user/frodl) (Read error: Connection reset by peer)
[08:50:07] *** Quits: oz (~oz@crystal/user/oz) (Quit: EOF)
[08:50:12] *** Joins: r3my (sid262473@id-262473.tinside.irccloud.com)
[08:50:19] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[08:50:22] *** Joins: frodl (sid527064@user/frodl)
[08:50:26] *** Joins: BSaboia (~bsaboia@2a05:f480:1400:b88:5400:3ff:fe51:575c)
[08:50:30] *** Joins: ox (~oz@crystal/user/oz)
[08:50:51] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[08:52:19] *** Joins: weyhmueller (~weyhmuell@blofeld.nc.w9r.de)
[08:53:49] *** Joins: yossarian (~yossarian@ool-44c5f69e.dyn.optonline.net)
[08:53:50] *** Quits: yossarian (~yossarian@ool-44c5f69e.dyn.optonline.net) (Changing host)
[08:53:50] *** Joins: yossarian (~yossarian@user/yossarian)
[09:15:37] *** Joins: unyu (~pyon@user/pyon)
[09:18:29] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[10:04:57] <ox1eef> John__: is the idea not to simply return true/false from the block ? eg wait_until { cond }
[10:08:37] <ox1eef> John__: not sure of waitr's api, but you should be able to poll that condition using a css selector
[10:21:48] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Ping timeout: 240 seconds)
[11:59:06] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[12:23:09] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[12:30:09] *** Quits: oxtyped[m] (~oxtyped2l@2001:470:69fc:105::1:8590) (Quit: You have been kicked for being idle)
[12:30:11] *** Quits: hellstabber[m]1 (~hellstabb@2001:470:69fc:105::1:b3fa) (Quit: You have been kicked for being idle)
[13:11:59] *** Joins: ollysmith (~ollysmith@94.197.65.8.threembb.co.uk)
[13:14:20] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[13:14:45] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[13:56:01] *** Joins: TasiMobile (~TasiMobil@2a0a:f640:1300:61dc:d7a4:d7ca:61c5:79fc)
[13:57:24] *** Quits: TasiMobile (~TasiMobil@2a0a:f640:1300:61dc:d7a4:d7ca:61c5:79fc) (Quit: Quit)
[13:57:36] *** Joins: TasiMobile (~TasiMobil@2a0a:f640:1300:61dc:d7a4:d7ca:61c5:79fc)
[14:18:37] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[14:23:52] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[14:25:00] *** Joins: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1)
[14:46:01] *** Quits: cognemo (~cognemo@cpe-92-37-82-231.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:46:16] *** Joins: cognemo (~cognemo@cpe-92-37-82-231.dynamic.amis.net)
[15:13:39] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:47:40] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[15:49:01] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (Ping timeout: 240 seconds)
[16:05:51] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[16:08:06] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:08:26] *** Quits: legit (petru@2a03:b0c0:3:f0::60:1000) (Quit: WeeChat 2.8)
[16:09:32] <nakilon> when you do "fail :some_symbol" it throws "exception class/object expected" -- why doesn't it throw "exception class/object or a string expected"?
[16:09:37] <nakilon> can't find it in source code
[16:10:00] *** Joins: legit (petru@2a03:b0c0:3:f0::60:1000)
[16:11:22] <nakilon> probably it's here https://github.com/ruby/ruby/blob/83fabfccf5d45312325bab83de2cf62ea54fa020/eval.c#L804
[16:14:09] <nakilon> not sure what is isstr and where is the branch there it's only an exception class
[16:14:33] *** Joins: Rounin (~david@84.212.130.215)
[16:26:44] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[16:41:44] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[16:42:07] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[16:45:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:46:09] *** Joins: shiru (shiru@gateway/vpn/protonvpn/shiru)
[16:47:09] *** Joins: mirage_ (~mirage@host-94-103-80-198.hosted-by-vdsina.ru)
[16:48:54] *** Quits: mirage_ (~mirage@host-94-103-80-198.hosted-by-vdsina.ru) (Client Quit)
[16:59:30] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Ping timeout: 272 seconds)
[17:06:39] *** Quits: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1) (Ping timeout: 256 seconds)
[17:08:35] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:08:45] *** Joins: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1)
[17:10:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:13:44] *** Quits: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1) (Ping timeout: 250 seconds)
[17:18:13] *** Joins: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1)
[17:21:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:25:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:33:14] *** Quits: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1) (Ping timeout: 250 seconds)
[17:34:06] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[17:34:35] *** Quits: shiru (shiru@gateway/vpn/protonvpn/shiru) (Quit: leaving)
[17:34:49] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:40:36] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Ping timeout: 250 seconds)
[17:41:41] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[17:43:45] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[17:44:21] *** Joins: bluedust (~bluedust@217.138.254.103)
[17:46:43] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[17:50:39] *** Joins: ollysmith_ (~ollysmith@92.41.121.58.threembb.co.uk)
[17:51:09] *** Quits: ollysmith (~ollysmith@94.197.65.8.threembb.co.uk) (Ping timeout: 268 seconds)
[17:56:38] *** Quits: bluedust (~bluedust@217.138.254.103) (Ping timeout: 250 seconds)
[18:23:50] *** Joins: fooklydookly (~doop@d5153017c.static.telenet.be)
[18:32:47] <John__> hi. I'm attempting to work with Watir's wait_until() method. https://www.rubydoc.info/gems/watir/Watir%2FWait.until
[18:32:56] <John__> I have seen examples where watir uses wait_until(element visible or selected)
[18:33:14] <John__> but I have not seen a function where you'd have an element "changed/updated"
[18:33:29] <John__> I have a <a href="#"> anchor which starts off like that. once javascript runs, it will change href to an actual URI
[18:33:39] <John__> and I need to wait until it has been "populated"
[18:33:45] <John__> any ideas?
[18:38:26] *** Joins: jetchisel (jetchisel@user/jetchisel)
[18:40:34] <mooff> John__: did you get anywhere with ox1eef's suggestions?
[18:40:50] <mooff> > John__: is the idea not to simply return true/false from the block ? eg wait_until { cond }
[18:40:50] <mooff> > John__: not sure of waitr's api, but you should be able to poll that condition using a css selector
[18:42:00] *** Joins: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1)
[18:46:21] <mooff> looking at the API.. i think you want browser.link(href: "/desired/uri").wait_until(&:visible?)
[18:53:50] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Ping timeout: 250 seconds)
[18:57:57] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[19:02:11] *** Joins: Tempesta (~Tempesta@user/tempesta)
[19:03:09] *** Quits: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1) (Quit: ERC (IRC client for Emacs 25.3.50.1))
[19:04:22] *** Joins: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1)
[19:04:24] *** Quits: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1) (Remote host closed the connection)
[19:06:41] *** Joins: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1)
[19:07:25] *** Quits: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1) (Remote host closed the connection)
[19:10:42] *** Joins: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1)
[19:12:32] <John__> mooff, I don't think I did, apologies.
[19:12:53] <John__> mooff, hmm. that line of code seems close enough, but I don't think I have a predictable /desired/uri
[19:12:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:13:02] <John__> the URI is generated randomly and it may contain arbitrary values.
[19:14:07] <John__> of course, I could do the unintuitive "browser.link(href: "#").wait_until(!&:visible?)"
[19:14:23] <John__> mooff, but I really don't think that's an adequate solution. it feels wrong.
[19:14:39] <ox1eef> it is invalid syntax for one thing :)
[19:15:46] <John__> ox1eef, did you come online recently? I tried to tab-complete your name but it didn't work.
[19:16:00] <John__> must've missed your name or mistyped.
[19:16:08] <ox1eef> sadly i never leave this place
[19:16:26] <John__> sadly?
[19:17:04] <John__> ox1eef, are you by any chance the person who recommended me the Eloquent Ruby book?
[19:17:28] <ox1eef> not sure but could be, it is the usual recommendation of this channel afaik
[19:18:14] <John__> I come from a C/C++ background. seeking refuge in the... "more sane" dynamically typed languages. ruby hit the spot. but I do tend to fight with documentation sometimes - especially from external gems.
[19:18:53] <John__> stuff that should be there just isn't. I think? or I might be doing something horribly wrong.
[19:19:50] <John__> ox1eef, I seek refuge because the web has reached a complex level that C just isn't the right language for doing web requests/parsing.
[19:20:12] <John__> even though it can.... but 5 lines in ruby would result in 150 lines of C...
[19:21:27] <ox1eef> C is still fun and you can combine it with Ruby through C extensions
[19:21:35] <ox1eef> and also mruby
[19:22:06] <John__> I wouldn't know. I'm still a ruby greenhorn.
[19:26:26] <mooff> welcome to the Hotel California...
[19:26:59] <mooff> John__: watir lets you match attributes with regexes
[19:27:44] <mooff> browser.link(href: /some\/regex\/\d+/).wait_until(&:visible?)
[19:27:45] <John__> mooff, I can definitely match attributes yes. I want to wait until a matched attribute changes though.
[19:28:21] <John__> e.g when <a href="#"> becomes <a href="unpredictable_uri"> and then extract that "unpredictable_uri"
[19:29:01] <John__> visible() isn't really the right approach I think? although I could do "wait until # is not visible".
[19:29:12] <John__> but the api doesn't offer anything better. that, or I'm blind.
[19:29:22] <John__> or both!
[19:30:06] <mooff> John__: are you sure you have to detect the change itself?
[19:30:23] <mooff> can you just wait for / expect the final uri? then process that?
[19:31:09] <John__> mooff, you mean "wait until "/" present in href" ?
[19:33:12] <John__> js_doc = browser.element(css: "#dlbutton").wait_until(href: "/")
[19:33:19] <John__> I suspect this won't work.
[19:33:48] <mooff> John__: i was thinking e.g. "wait until href matches /^\/download\/\d+/"
[19:34:27] <John__> mooff, the href is unpredictable. it will never contain anything I can use to match against it because it will contain a value like /434t44/32t4gmedsf
[19:35:17] <mooff> does the element have a class you could use as a selector?
[19:35:35] <John__> mooff, it does. I can select the element.
[19:35:41] <John__> #dlbutton
[19:36:04] <John__> problem is, at the moment of selection, unless I "wait", the returned value is <a href="#">
[19:36:22] <John__> as opposed to <a href="/252453/234vnref">
[19:36:30] <mooff> John__: it doesn't look like wait_until takes match options in that way, btw
[19:36:45] <John__> aye
[19:38:06] <John__> browser.text_field(css: "new_user_first_name").wait_until(timeout: 60, &:present?)
[19:38:07] <John__> oops
[19:38:28] <John__> mooff, browser.element(css: "#dlbutton").wait_until(timeout: 60)
[19:38:45] <John__> that would work. if I replace the timeout with 5-10 seconds. rather poor solution but...
[19:38:49] <mooff> John__: browser.link(css: '#dlbutton', href: /^\//).wait_until(&:visible?)
[19:40:09] <John__> mooff, that will work too I guess.
[19:40:36] <John__> thank you.
[19:41:07] * John__ stretches on desk in dissapointment
[19:41:54] <mooff> take time to decompress, but what has you disappointed?
[19:43:00] <John__> mooff, I suppose watir in this case. and it's api
[19:43:40] <John__> mooff, and the fact that what I want to do involves complexity due to......... dynamic js webpages.
[19:44:59] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:46:07] <mooff> understood :)
[19:46:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:46:58] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[19:47:21] <John__> mooff, honestly, I was expecting the typical "browser.wait_until_changed(element)"
[19:47:40] <John__> event driven apis work like that. on_change() events.
[19:48:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:54:11] <mooff> John__: automated browser testing can be pretty frustrating to debug
[19:54:35] <mooff> the APIs tend to work like "give me some conditions, and i'll wait in a loop until they're matched, or raise"
[19:55:29] <John__> I'll keep that in mind
[19:55:58] *** Joins: impermanence (~impermane@c-75-73-193-204.hsd1.mn.comcast.net)
[19:57:26] *** Quits: wand (~user@gateway/tor-sasl/wand) (Remote host closed the connection)
[19:57:43] *** Joins: wand (~user@gateway/tor-sasl/wand)
[20:32:09] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[20:40:27] *** Quits: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1) (Ping timeout: 252 seconds)
[20:41:18] *** Quits: fooklydookly (~doop@d5153017c.static.telenet.be) (Ping timeout: 250 seconds)
[21:06:00] *** Joins: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1)
[21:07:28] *** Quits: cout (~cout@li941-240.members.linode.com) (*.net *.split)
[21:07:28] *** Quits: pandabot (~pandabot@user/leftylink/bot/pandabot) (*.net *.split)
[21:07:28] *** Quits: leftylink (~leftylink@user/leftylink) (*.net *.split)
[21:07:28] *** Quits: Pixi (~Pixi@user/pixi) (*.net *.split)
[21:07:28] *** Quits: Spitfire_ (~spitfire@user/Spitfire) (*.net *.split)
[21:07:28] *** Quits: apotheon (~apotheon@copyfree/founder/apotheon) (*.net *.split)
[21:10:53] *** Quits: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1) (Ping timeout: 256 seconds)
[21:11:03] *** Joins: bluedust (~bluedust@81.92.206.10)
[21:12:55] *** Joins: cout (~cout@li941-240.members.linode.com)
[21:12:55] *** Joins: pandabot (~pandabot@user/leftylink/bot/pandabot)
[21:12:55] *** Joins: leftylink (~leftylink@user/leftylink)
[21:12:55] *** Joins: Pixi (~Pixi@user/pixi)
[21:12:55] *** Joins: Spitfire_ (~spitfire@user/Spitfire)
[21:12:55] *** Joins: apotheon (~apotheon@copyfree/founder/apotheon)
[21:20:44] *** Quits: bluedust (~bluedust@81.92.206.10) (Ping timeout: 250 seconds)
[21:21:03] <John__> to what degree can bundler make packaged source code with gem packs "standalone"?
[21:21:27] <John__> for example, can you truly distribute a standalone ruby application by just providing it's packed gems + the source code?
[21:24:28] *** Joins: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1)
[21:26:22] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Ping timeout: 250 seconds)
[21:29:52] <nakilon> John__ unless they also depend on some non-ruby libraries
[21:30:12] <nakilon> such as a gem that uses imagemagick
[21:30:22] <John__> nakilon, sure, makes sense. what about gems that require compilation/the devkit?
[21:30:35] <John__> the situation you mentioned I took as a given :)
[21:30:55] <John__> nakilon, suppose one of the gems I bundle was compiled with mingw.
[21:30:57] <John__> and it arrives on another machine.
[21:31:00] <John__> what happens then?
[21:31:08] <John__> say, linux. or say on a different architecture.
[21:32:07] <nakilon> the .gem file isn't yet compiled but bundler probably has some flag to specify where to install gems and there the compilation artifacts will be put right in the corrersponded dirs of each gem installed
[21:32:45] <nakilon> i.e. the *.o file will be put somewhere either in the ./lib or higher
[21:33:13] <John__> nakilon, so in other words, it won't work. it has to be recompiled.
[21:33:20] <nakilon> of course changing the platform will break the gem
[21:33:32] <nakilon> but it should be runnable on the same linux
[21:33:57] <John__> nakilon, makes sense. although that breaks a little bit of the "ruby is crossplatform"
[21:34:03] <John__> aspect
[21:34:22] <John__> i suppose it being recompiled elsewhere and working without sourcecode changes is satisfactory enough
[21:34:37] *** Joins: jetchisel (jetchisel@user/jetchisel)
[21:34:43] <nakilon> some gems are pure-ruby, i.e. there is a json gem that compiles and the one that does not -- that's where there crossplatformability is used
[21:34:45] <John__> it would also vary from gem to gem
[21:34:56] <nakilon> also consider using docker
[21:35:28] <John__> nakilon, my goal is to create standalone software that does not depend on the network.
[21:35:42] <John__> e.g it runs offline without exceptions.
[21:37:12] *** Quits: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1) (Ping timeout: 250 seconds)
[21:48:38] <John__> I have written an abomination.
[21:51:12] *** Joins: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1)
[21:51:45] <John__> but it works
[21:55:57] *** Quits: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1) (Ping timeout: 240 seconds)
[22:00:09] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.133)
[22:08:49] *** Joins: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1)
[22:14:29] *** Quits: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1) (Ping timeout: 252 seconds)
[22:27:41] *** Joins: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1)
[22:34:51] *** Quits: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1) (Ping timeout: 252 seconds)
[22:37:39] *** Joins: ur5us (~ur5us@122-56-201-64.mobile.spark.co.nz)
[22:39:02] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[22:39:30] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Client Quit)
[22:50:08] *** Joins: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1)
[23:09:05] *** Quits: ur5us (~ur5us@122-56-201-64.mobile.spark.co.nz) (Quit: Leaving)
[23:11:21] *** Quits: ua_ (~ua@public-gprs231422.centertel.pl) (Quit: Leaving)
[23:19:06] *** Quits: roadie (~user@2a02:8108:5a40:1d87:d928:3239:7a99:9ea1) (Ping timeout: 245 seconds)
[23:20:55] *** Quits: John__ (~rijndael@31-187-42-13.dynamic.upc.ie) (Quit: Leaving)
[23:21:17] *** Joins: John_Ivan (~John_Ivan@user/john-ivan/x-1515935)
[23:21:33] <John_Ivan> ox1eef, done.
[23:42:25] <John_Ivan> right. so nakilon. I should separate out pure-ruby gems and... compile-able ruby gems.
