[00:00:10] <gensyst> c_wraith, thanks will look up on it
[00:00:18] <gensyst> lots of pitfalls to worry about
[00:00:44] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[00:02:00] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[00:03:20] *** Quits: simendsjo (~user@84.211.91.241) (Remote host closed the connection)
[00:03:57] *** Joins: simendsjo (~user@84.211.91.241)
[00:04:05] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f) (Remote host closed the connection)
[00:07:48] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[00:08:35] *** Quits: ukari (~ukari@user/ukari) (Remote host closed the connection)
[00:09:16] *** Joins: ukari (~ukari@user/ukari)
[00:14:00] <monochrom> My collection of the GHC-API is that I had to call one function to create a record (it contains IORefs), then I had to pass this record to all other functions.
[00:14:13] <monochrom> So I think ghci does the same, but I haven't checked.
[00:14:37] <monochrom> So it goes back to the non-global solution.
[00:15:05] <geekosaur> ghc-api does have its globals though; consider unsafeDynFlags
[00:15:17] <geekosaur> granting that they're in the process of cleaning that up recently
[00:15:21] <monochrom> That said, gtk2hs solves multi-threading with a secret global IORef for a queue.
[00:16:36] <monochrom> It's marvelous. You know how gtk+ is one of those C libraries that "you must choose one thread, and only that thread is allowed to call gtk+ functions".  Hell, you're working with such a C library right now.
[00:17:02] <monochrom> So how does gtk2hs allow you to call gtk2hs functions in any thread you like, every time a different thread?
[00:18:08] <monochrom> So you are supposed to use postGUISync or postGUISync, depending on whether you want to wait or not.
[00:18:10] *** Joins: Pickchea (~private@user/pickchea)
[00:18:54] <monochrom> Both of them enter the thunk that stands for your function call into the global queue.
[00:19:14] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 250 seconds)
[00:19:15] *** Quits: SolidusRiver (~fuag1@174.127.249.180) (Ping timeout: 256 seconds)
[00:19:22] <monochrom> gtk2hs's main loop periodically dequeues and makes the actual call.
[00:19:39] <monochrom> So all actual calls are made in the same thread as the main loop.
[00:19:59] <monochrom> But it still requires a global queue. Which is basically your scenerio.
[00:20:29] <monochrom> Now, how do you make a queue in Haskell?
[00:20:58] <monochrom> Most people don't mind an immutable queue, and putting it in an IORef if mutability is desired.
[00:21:43] <monochrom> Furthermore, for an immutable queue, most people don't mind settling for amortized O(1) time, it's simpler.
[00:22:10] <monochrom> Then it's a tuple of two lists, let's call them "front" and "back".
[00:22:32] <monochrom> To enter something into the queue, back_new = x : back
[00:22:58] <monochrom> To dequeue: If front is non-empty, take the head.
[00:23:24] <monochrom> If front is empty, front_new = reverse back, back_new = [].  Now try again.
[00:23:38] <texasmynsted> I am curious if anybody is doing anything with Haskell and ORC files. I saw this https://www.huwcampbell.com/posts/2020-09-18-announcing-orc-haskell.html
[00:23:47] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[00:25:30] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[00:26:18] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[00:28:28] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Client Quit)
[00:29:00] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[00:30:28] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Client Quit)
[00:30:37] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[00:30:38] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:30:51] <gensyst> monochrom, heh it's really that simple? hmm.
[00:31:35] <monochrom> But you can make a big fuss about "this is not performant! worst case is not O(1)!!!111"
[00:32:09] <gensyst> monochrom, i will have to create my own channel, recursive IO function, etc. stuff right?
[00:32:21] <monochrom> I don't know.
[00:32:26] <gensyst> the "processing loop" so to speak
[00:32:42] <monochrom> "loop" is a very simple kind of recursion.
[00:33:16] <monochrom> And maybe "channel" just means queue.
[00:33:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[00:34:02] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[00:34:25] <zebrag> ski: yes, neither do I. (reflexive subcategory)
[00:34:28] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:34:42] *** Quits: _ht (~quassel@2a02:a468:b619:1:4334:88f2:ba01:c6e) (Remote host closed the connection)
[00:35:09] *** Joins: johnjaye (~pi@173.209.65.233)
[00:35:42] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 250 seconds)
[00:36:33] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[00:36:39] *** Quits: Guest24 (~Guest24@144-124-136-14.pip.aber.ac.uk) (Quit: Client closed)
[00:38:02] <gensyst> c_wraith, can you summarize briefly the hot-reloading issues that could arise? can't find much upon quick search
[00:39:12] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[00:39:20] <c_wraith> that's because no one actually knows how they interact. or rather - you can see how they interact now, but GHC is unwilling to specify that behavior and prevent changes if someone makes a better suggestion
[00:40:08] <c_wraith> the current version: when a module is reloaded, all top level values are reallocated.
[00:40:33] <c_wraith> this can cause problems if a current mutable state gets forgotten
[00:41:32] <c_wraith> all top level values in that module, that is
[00:41:54] <gensyst> c_wraith, is this a ghci issue specifically? if i do the unsafePerformIO in my library, users will load that lib precompiled presumably.
[00:42:00] <gensyst> s/users/users of ghci
[00:42:34] <c_wraith> ghci is one place code gets reloaded, but not the only such place.
[00:43:12] <c_wraith> and it makes some effort to prevent weirder things that aren't part of the process, like clearing all current bindings when it reloads code.
[00:43:47] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[00:44:10] *** Joins: SolidusRiver (~fuag1@174.127.249.180)
[00:44:19] <c_wraith> in general code in packages probably won't get reloaded, but... I don't know of any guarantees
[00:44:39] *** Joins: ystael (~ystael@user/ystael)
[00:45:29] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:45:56] <zebrag> (just laughing: in google I type "lisp self m", and google which knows every correct answer complete in "lisp self modifying code". But it is either that, or vim, or vscode.)
[00:47:12] <gensyst> c_wraith, okay - i'll keep it at the back of my mind in case I encounter some such weirdness
[00:47:30] <gensyst> monochrom, c_wraith thanks so much all for your great replies! you're saving me big time
[00:48:54] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[00:50:52] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[00:51:25] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[00:51:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:52:06] *** Quits: gensyst (gensyst@user/gensyst) (Quit: Leaving)
[00:52:10] <jackdk> remark: when I first started playing with Haskell, I wanted top-level mutable state. In all my years of using Haskell for work, I never wanted top-level mutable state.
[00:52:15] <jackdk> ah, he just left =|
[00:53:28] *** Quits: n3t (n3t@s45.mydevil.net) (Changing host)
[00:53:28] *** Joins: n3t (n3t@user/n3t)
[00:53:57] <geekosaur> I used top levelmutable state once. it was with a very early version of gtk2hs, before even the postGUI* stuff monochrom described, and had no good way to deal with what I was doing
[00:54:12] <geekosaur> next release of gtk2hs did but I'd moved on by then
[00:55:11] *** Joins: __monty__ (~toonn@user/toonn)
[00:57:33] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[00:58:01] *** Quits: cosimone (~user@93-47-229-195.ip115.fastwebnet.it) (Remote host closed the connection)
[01:00:07] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:03:31] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[01:04:24] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[01:04:29] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f)
[01:05:49] <c_wraith> a pretty common desire for top-level mutable state is for working around C libraries that aren't re-entrant
[01:06:59] <c_wraith> I ran into that with the curl bindings a long time ago. (curl was re-entrant by itself, but the way it used openssl wasn't)
[01:08:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f) (Ping timeout: 240 seconds)
[01:14:09] *** Joins: cosimone (~user@93-47-229-195.ip115.fastwebnet.it)
[01:14:24] <maerwald> I use it delibaretly in test code too
[01:17:27] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:d445:4a94:576b:ee4c) (Remote host closed the connection)
[01:19:22] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:19:58] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:21:25] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 240 seconds)
[01:22:04] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 250 seconds)
[01:22:56] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[01:23:22] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[01:24:28] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:26:45] <zzz> are case patterns irrefutable?
[01:28:39] *** Joins: n3rdy1 (~n3rdy1@2a00:79e1:abc:1564:ccb7:9ff4:1442:61e5)
[01:28:43] <zzz> this was a stupid question, nevermind
[01:28:49] *** Quits: ubert (~Thunderbi@p200300ecdf099440f4ae4d8df8b0fc6d.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:28:49] *** ub is now known as ubert
[01:29:12] <zebrag> I hope LCF-ML "Object Language Embedding with Quote/Antiquote" (https://www.smlnj.org/doc/quote.html) is not related to lisp-elisp `(funcall (intern "+") 5 2)`.
[01:29:40] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:33:29] <monochrom> case patterns and "f [] = ...  f (x:xs) = ..." patterns are the very same thing.
[01:33:47] <monochrom> So, refutable unless you add ~
[01:34:16] <monochrom> let patterns are the irrefutable ones, "let x:xs = ..." for example
[01:34:21] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[01:35:19] <monochrom> well, let and where, "where x:xs = ..." has the same semantics as the let version.
[01:43:34] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Remote host closed the connection)
[01:43:47] *** Quits: mmhat (~mmh@55d49b67.access.ecotel.net) (Quit: WeeChat 3.4)
[01:44:03] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[01:45:54] <EvanR> all that and gensyst just needed a TVar
[01:46:16] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:46:19] <EvanR> not necessarily even globally accessible
[01:46:30] <EvanR> XY problems
[01:46:35] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:46:54] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881) (Remote host closed the connection)
[01:47:08] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:47:11] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881)
[01:47:13] <geekosaur> I said that some time back
[01:47:23] <geekosaur> they wanted their global variable
[01:47:42] <monochrom> zebrag: LCF-ML quote/antiquote is indeed not (intern "+") at all.
[01:48:17] <monochrom> (intern "+") really refers to the language's own +
[01:49:18] <monochrom> quoting allows writing a string literal to be parsed to an ADT, and the ADT can have nothing to do with the host language.
[01:50:03] <monochrom> And anti-quoting just means "string interpolation" in shell scripts etc.
[01:50:03] <zebrag> No weird paradox then?
[01:50:14] *** Quits: n3rdy1 (~n3rdy1@2a00:79e1:abc:1564:ccb7:9ff4:1442:61e5) (Ping timeout: 268 seconds)
[01:50:38] <monochrom> No, it's just syntax sugar for an ADT.
[01:51:01] <zebrag> I'm so relieved
[01:52:39] <monochrom> I have a "data B = E | X Int B B" and I'm tired of writing "X 5 (X 4 E E) (X 3 E E)" so I set up quoting so I can write the string literal "4(5)3" and the compiler desugars that to X 5 (X 4 E E) (X 3 E E) for me.
[01:53:05] <monochrom> Clearly the B type, nor its values, is not LCF-ML itself.
[01:54:09] <monochrom> In the actual LCF-ML case, the ADT is the AST of a predicate logic.
[01:55:07] *** Joins: yauhsien_ (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[01:58:34] <zebrag> right, right, thanks
[01:59:01] *** Quits: michalz (~michalz@185.246.204.37) (Remote host closed the connection)
[01:59:37] *** Quits: yauhsien_ (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[02:06:54] * ski . o O ( SML/NJ )
[02:06:59] <int-e> monochrom: heh, what does 1(2)3(4)5 mean in that notation? :P
[02:07:43] <monochrom> "syntax error" is a possibility!
[02:08:18] <int-e> pattern synonyms can sometimes help in Haskell. pattern L x = X x E E  is an obvious one
[02:09:01] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[02:09:48] <int-e> monochrom: sure, that's one of three reasonable answers...
[02:11:43] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881) (Remote host closed the connection)
[02:11:59] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881)
[02:12:15] *** Quits: SolidusRiver (~fuag1@174.127.249.180) (Quit: Leaving)
[02:13:15] <EvanR> monochrom went back to their business when suddenly the 2nd of three reasonable answers started banging on the door, let me in, let me in
[02:15:03] *** Quits: ukari (~ukari@user/ukari) (Remote host closed the connection)
[02:15:29] <monochrom> I am like one of those pizza places that refuse online orders outside business hours :)
[02:15:32] *** Joins: ukari (~ukari@user/ukari)
[02:15:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[02:15:45] <monochrom> In fact, even online pre-orders.
[02:16:14] <monochrom> In fact, the irony being that online pre-orders are accepted during business hours.
[02:16:46] <int-e> but do the accept pre-orders for non-business hours during business hours
[02:17:32] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[02:18:31] <int-e> . o O ( Where's the Amazon Prime pizza service with same day delivery? )
[02:18:44] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[02:18:54] <hpc> delivered by 11:59PM or your money back
[02:20:44] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[02:21:34] <zzz> why does g typecheck and h doesn't? https://paste.jrvieira.com/1642719061390
[02:21:42] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:22:15] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[02:22:23] <int-e> because the two components of x have the same type
[02:22:28] <monochrom> Float=a=Int
[02:22:28] <ski> `a' and `b' are polymorphic
[02:22:32] *** Quits: cosimone (~user@93-47-229-195.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:22:34] <ski> (in `g')
[02:22:38] <int-e> you can declare  x :: (Num a, Num b) => (a, b)
[02:22:48] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[02:22:54] <monochrom> Ah yeah my sentence was explaining just h.
[02:23:37] <int-e> Oh yes, `let` is polymorphic. Fun example :)
[02:23:37] <monochrom> "let (a,b) = x" is desugared to "let a = fst x; b = snd x" for all semantic purposes.
[02:24:21] <zzz> but let w = x in w also doesn't typecheck. isn't w polymorphic?
[02:24:21] <int-e> g = case x of (a,b) -> (a,b)  would fail again
[02:24:35] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[02:24:45] <EvanR> monomorphism restriction?
[02:24:58] <ski> zzz : in `g', you're basically invoking `x' twice
[02:25:01] <monochrom> NoMonomorphismRestriction
[02:25:09] <int-e> zzz: yes, but w has the same polymorphic type as x
[02:25:26] <int-e> zzz: let w = x in (fst w, snd w)  should work
[02:25:31] <zzz> EvanR: we are assuming NoMonomorphismRestriction -> https://paste.jrvieira.com/1642719061390
[02:25:53] <int-e> zzz: (which is using w at two different types)
[02:26:07] <zzz> hmm
[02:26:23] <int-e> :t let x :: Num a => (a,a); x = (0,1) in (fst x, snd x)
[02:26:24] <lambdabot> (Num a, Num b) => (a, b)
[02:26:28] <int-e> :t let x :: Num a => (a,a); x = (0,1) in x
[02:26:29] <lambdabot> Num a => (a, a)
[02:26:57] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[02:29:35] <int-e> zzz: it would be sound to automatically generalize Num a => (a, a) to (Num a, Num b) => (a, b), but it's a really bad idea, because the only way to do that is to compute the pair twice.
[02:30:28] <EvanR> how the heck did your first x gain more polymorphism after be explicitly less polymorphic
[02:30:53] <int-e> Which makes the  let (a, b) = x in (a, b)  case a bit surprising because it doesn't *look* like it duplicates a computation.
[02:31:10] <monochrom> Well, if the user supplies a type sig, the compiler is obliged to not generalize that behind your back.
[02:31:13] <int-e> But in fact it does!
[02:31:31] <int-e> (Though ghc will be smart about it if it knows that the type is the same)
[02:31:39] <monochrom> But if you define "x = (0,1)" without type sig and without MMR, you do get x :: (Num a, Num b) => (a, b).
[02:32:17] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[02:32:25] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Ping timeout: 256 seconds)
[02:36:10] *** Joins: jiribenes_ (~jiribenes@rosa.jiribenes.com)
[02:36:39] <EvanR> :t let x :: Num a => (a,a); x = (0,1); y = (fst x, snd x) in y
[02:36:40] <lambdabot> (Num a, Num b) => (a, b)
[02:36:47] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:36:58] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:37:49] *** Quits: liskin (~liskin@xmonad/liskin) (Ping timeout: 240 seconds)
[02:37:49] *** Quits: jiribenes (~jiribenes@rosa.jiribenes.com) (Ping timeout: 240 seconds)
[02:38:08] <monochrom> WWWHHHHYYYY... :)
[02:38:08] *** Joins: liskin (~liskin@xmonad/liskin)
[02:38:30] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881) (Remote host closed the connection)
[02:38:33] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[02:38:43] <EvanR> is it really possible for a /= b here... but the explicit sig...
[02:38:57] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881)
[02:39:02] <monochrom> The explicit sig is explicitly polymorphic.
[02:39:18] <EvanR> (a,a) but you can pick two different a? xD
[02:39:27] <EvanR> I would fail algebra
[02:39:30] <monochrom> fst x gets one "a", snd x gets a different "a".
[02:39:47] <int-e> > let x = 0 in (x, x) -- EvanR: YES!
[02:39:48] <EvanR> oh, it's two different x
[02:39:48] <lambdabot>  (0,0)
[02:39:54] <int-e> :t let x = 0 in (x, x)
[02:39:55] <lambdabot> (Num a, Num b) => (a, b)
[02:39:55] <monochrom> OK, here is an elementary example:
[02:40:08] <int-e> (oops, > and :t are not the same)
[02:40:12] <monochrom> let f = \x->x in (f True, f 4)
[02:40:13] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[02:40:22] <ski> spelling out the `forall's might make it clearer, i guess
[02:40:44] <monochrom> Now no one complained that f has two types, did you?
[02:41:16] <EvanR> f has two types, and before x had two types, both uniform (a,a), (b,b)
[02:41:20] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881) (Remote host closed the connection)
[02:41:21] <monochrom> So why suddenly complain about x having two types.
[02:41:23] <EvanR> tricky tricky
[02:41:24] <int-e> monochrom: I didn't complain when we had the monomorphism restriction either.
[02:41:33] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881)
[02:41:47] <int-e> both ways make some amount of sense and have their own nasty surprises
[02:42:06] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[02:42:13] <int-e> EvanR: oh sorry btw for using x instead of a ;-)
[02:46:46] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[02:49:25] *** Quits: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr) (Ping timeout: 256 seconds)
[02:49:51] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:50:45] <zzz> excellent
[02:55:50] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[02:55:53] *** Joins: notzmv (~zmv@user/notzmv)
[03:01:39] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f)
[03:03:30] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:06:48] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[03:07:49] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[03:08:52] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[03:09:11] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[03:10:48] *** Joins: Guest24 (~Guest24@144-124-136-14.pip.aber.ac.uk)
[03:12:15] <Guest24> hi could you help me with this please I keep getting an indentation error
[03:12:16] <Guest24> https://paste.tomsmeding.com/MU3TLGUF
[03:12:39] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[03:13:51] <monochrom> Delete "let "
[03:14:10] <zzz> that let doesn't belong there
[03:14:18] *** Joins: hyiltiz (~quassel@31.220.5.250)
[03:14:19] <monochrom> The type "[numbers] -> result" reflects very wrong concept.
[03:15:59] <Guest24> so should i change the result to int
[03:16:25] <Axman6> probably the easiest thing would be to change the type to negsum :: [Int] -> Int
[03:17:08] <Guest24> https://paste.tomsmeding.com/9gTFmffy
[03:17:16] <Axman6> it's very important to undertstand what that's saying, that nugsum is a function (->) that takes a list of Ints as its input and returns an Int as its output
[03:17:28] <Axman6> no, int is not Int
[03:18:07] <Axman6> int ius a type variable, that's the same as writing negsum :: [a] -> a, it's saying that the type contained in the list could be literally anything
[03:18:11] *** Quits: simpleauthority (~simpleaut@user/simpleauthority) (Quit: ZNC 1.8.2 - https://znc.in)
[03:18:31] <monochrom> Are you supposed to do addition?  Where do you use the + operator?
[03:18:31] <Axman6> Int is a concrete type for (smallish) integers
[03:18:36] <geekosaur> also, what causes you to redundantly say `== True`?
[03:18:44] <Guest24> thank you
[03:19:07] <Axman6> > (False == True, True == True)
[03:19:09] <lambdabot>  (False,True)
[03:19:20] <Axman6> @check \x -> (x == True) == x
[03:19:21] <lambdabot>  +++ OK, passed 100 tests.
[03:19:35] <Guest24> well i want my function to check if the value I took from the array is less than 0 (so negative) and then return the sum of those numbers
[03:19:58] *** Joins: simpleauthority (~simpleaut@user/simpleauthority)
[03:19:59] <monochrom> People coming from javascript probably think of "foo", "foo == True", "foo === True", "foo ==== True" as all different things.
[03:20:04] <Axman6> better to call it a list, an array is something different
[03:20:11] <jackdk> geekosaur: the two causes I usually see: previous experience in a dynamic language where such an expression doubles as a type-check, or not yet realising that `== True` never adds additional information
[03:20:18] <jackdk> monochrom: are we up to four equals now?
[03:20:43] <Axman6> equalAF(a,b) = a ================ b
[03:20:44] <jackdk> (both are fine, that how learning works)
[03:20:55] <monochrom> And people coming from python think of "array", "list", "hash table", "dictionary", "set" as all the same thing.
[03:20:57] <hpc> this is why i always write "foo = True"
[03:21:00] <hpc> it's the only way to be sure
[03:21:09] <monochrom> The two anti-intellectual extremes of programming languages.
[03:21:16] <Guest24> im sorry im really confused now
[03:21:28] <Axman6> what are you confused about?
[03:21:31] <monochrom> OK I'm joking about ====, but don't be surprised if you see it happen in the future!
[03:22:32] <Axman6> (====) :: SuperEq a => a -> a -> Bool -- ^ Checks that y and y are the same, they were defined in exactly the same place in the code, in the same program, in the same git commit
[03:22:41] <ephemient> @check True ==> True
[03:22:42] <lambdabot>  +++ OK, passed 100 tests.
[03:22:52] <Guest24> im essentially supposed to change filter(\x -> (x<0) == True) numbers into a function
[03:23:06] <hpc> why are you doing "== True" though
[03:23:09] <hpc> why not just (x < 0)
[03:23:24] <Guest24> idk it didn't work when it just did that
[03:23:32] <monochrom> At this rate I wonder if "foo == True" comes straight from the teacher.
[03:23:42] <hpc> i think you changed more things than just adding "== True" between tests
[03:23:56] <Guest24> i guess that's true
[03:24:01] <monochrom> Like, today is basically "==True" having a field day.
[03:24:27] <Axman6> Guest24: there are other problems with your code, we're going through them one at a time, focusing on the most helpful first. telling us "it didn't work" doesn't give us any information to help you, what is "it"? what error did you get?
[03:24:57] <monochrom> Although, I still recommend against picking on it.  There are many more pressing concerns.
[03:25:18] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[03:25:37] <hpc> monochrom: the elephant in the room casts a long shadow
[03:25:38] <monochrom> An algorithm for summing that uses : instead of + for example.
[03:25:48] <Guest24> with the code i currently have posted there is this error
[03:25:55] <Guest24> Â * Couldn't match expected type `[int]' with actual type `int'
[03:25:55] <Guest24> Â  Â  Â  `int' is a rigid type variable bound by
[03:25:56] <Guest24> Â  Â  Â  Â  the type signature for:
[03:25:56] <Guest24> Â  Â  Â  Â  Â  negsum :: forall int. [int] -> int
[03:25:57] <Guest24> Â  Â  Â  Â  at question2.hs:4:1-22
[03:25:57] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[03:25:57] <Guest24> Â  Â  * In the second argument of `(:)', namely `negsum xs'
[03:25:58] <Guest24> Â  Â  Â  In the expression: x : negsum xs
[03:25:58] <Guest24> Â  Â  Â  In the expression:
[03:25:59] <Guest24> Â  Â  Â  Â  if (x < 0) == True then x : negsum xs else negsum xs
[03:25:59] <Guest24> Â  Â  * Relevant bindings include
[03:26:00] <Guest24> Â  Â  Â  Â  xs :: [int] (bound at question2.hs:6:11)
[03:26:00] <Guest24> Â  Â  Â  Â  x :: int (bound at question2.hs:6:9)
[03:26:00] <Axman6> use the pastye wensite!
[03:26:01] <Guest24> Â  Â  Â  Â  negsum :: [int] -> int (bound at question2.hs:5:1)
[03:26:01] <Guest24> Â  |
[03:26:02] <Guest24> 8 |                 then x:negsum xs
[03:26:02] <Guest24> Â  |                        ^^^^^^^^^
[03:26:03] <Axman6> website*
[03:26:15] <monochrom> It is not a long shadow unless it's "((foo == True) == True) == (True == True)" haha
[03:26:26] <geekosaur> you can include error messages in your paste
[03:26:33] <Guest24> https://paste.tomsmeding.com/WGy62gW1
[03:26:33] <Axman6> you can post code and the error you got with it at the saem time, please do that and don't paste multiple lines in here
[03:26:46] <Guest24> sorry i didn't know :(
[03:26:51] <geekosaur> looks to me like you are still not recognizing that `int` is not the same as `Int`
[03:26:57] <geekosaur> Haskell is case sensitive
[03:27:14] <monochrom> You are still not taking Axman6's advice that int is not Int.  You want Int.
[03:27:21] *** Joins: johnjaye (~pi@173.209.65.233)
[03:27:59] <monochrom> See this is what happens when everyone discusses ==True.
[03:27:59] <Guest24> https://paste.tomsmeding.com/HKo31Fqa
[03:28:10] <Axman6> > "int" == "Int"
[03:28:11] <lambdabot>  False
[03:28:25] <jackdk> you are writing lowercase `i` where a capital `I` is required
[03:28:48] <Guest24> https://paste.tomsmeding.com/V3pzH0y2
[03:28:53] <geekosaur> the first oart of the past eshows it changed, the error does not
[03:29:05] <jackdk> ah right sorry
[03:29:15] <Axman6> geekosaur: that error doesn't match the code you pasted
[03:29:22] <Axman6> uh, Guest24*
[03:29:30] *** Joins: glassy (~glassy@user/glassy)
[03:29:30] <Axman6> ok, better
[03:29:34] <Guest24> its the erro i got tho
[03:29:35] <Axman6> (sorry, a bit behind)
[03:29:42] <Guest24> ok sorry
[03:29:45] <Axman6> ok, do you know what : does?
[03:29:52] <glassy> hi, is it possible to overload the 'if then else' syntax with TemplateHaskell?
[03:30:24] <glassy> I would like it to be more flexible so I can use monadic if
[03:30:24] <hpc> glassy: you want RebindableSyntax
[03:30:38] <hpc> https://downloads.haskell.org/~ghc/7.0.2/docs/html/users_guide/syntax-extns.html#rebindable-syntax
[03:30:58] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[03:32:22] <Axman6> Guest24: do you know what : does?
[03:32:36] <glassy> if you use RebindableSyntax, does using import Prelude bring it back to normal?
[03:32:44] <glassy> just changing ifThenElse is the only thing I wish to change
[03:32:58] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f) (Remote host closed the connection)
[03:33:09] <Guest24> it's the cons operation?
[03:33:27] <hpc> glassy: yeah
[03:33:39] <hpc> import Prelude hiding (ifThenElse)
[03:34:36] <ephemient> there is no ifThenElse in Prelude
[03:35:08] <monochrom> But it becomes a thing under RebindableSyntax; see the doc there.
[03:35:17] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[03:35:29] <monochrom> (I was thinking that too. So I clicked the link. Best decision ever.)
[03:35:57] <Axman6> Guest24: it is, which means that when you write x:negsum xs you must be returning a list, right?
[03:36:13] <Axman6> :t (:)
[03:36:14] <lambdabot> a -> [a] -> [a]
[03:36:15] <Guest24> yh that's true
[03:36:34] <Axman6> based on the name of your function, I assume you actually want to add things, right?
[03:37:09] <Axman6> you know that x is an Int, andf you know that, because of the type of negsum, that negsum applied to xs will also return an Int, right?
[03:37:28] <Guest24> i want write a recursive function that will take each value from the list and test it under the condition. if the condition is satisfied it will add that value to the running sum of the negative numbers in the list
[03:38:00] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 276 seconds)
[03:38:04] <Guest24> im sorry i come from imperative programming so this is very hard for me to grasp
[03:38:26] <glassy> i'm a bit confused how I would use it though. ifThenElse :: (ToBool p, Monad m) => m p -> m a -> m a -> m a. ifThenElse :: ToBool p => p -> a -> a -> a
[03:38:30] <glassy> i would like both signatures to work
[03:38:35] <glassy> but they seem incompatible
[03:38:46] <EvanR> Guest24, fun fact you can translate any imperative algorithm to functional using One Weird Trick
[03:39:09] <Guest24> please tell me the trick
[03:39:29] <EvanR> well I dunno about one weird trick, but it's pretty formulaic and may help you transition
[03:39:33] *** Quits: max22- (~maxime@2a01cb08833598008b56a1095c0012ed.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:39:34] <Axman6> I think it's best to just make the one character change to this function to make it work first EvanR
[03:39:45] <EvanR> yeah do that instead
[03:40:06] <Axman6> Guest24: you're supposed to be returning an Int, but instead you're returning a list of Ints, right? can you see that? 
[03:40:17] <Guest24> yes i can
[03:40:38] <Axman6> but you're trying to add together all the negative values, and you haven't use + anywhere
[03:40:40] <glassy> can I replace ifThenElse with a typeclass instance instead of an actual function?
[03:40:51] <ephemient> {-# LANGUAGE RebindableSyntax #-} import Prelude; main = if True then print 1 else print 0 -- error: Not in scope: `ifThenElse'
[03:41:34] <Guest24> so i think that what i want to do is in the then part of the if statement is add the x value to something and the call the function again with the tail of the list as the parameter
[03:41:48] <ephemient> hiding (ifThenElse) doesn't change that
[03:41:52] <Axman6> you're thinking imperatively
[03:41:56] <hpc> glassy: i think as long as it can be called as "if _ then _ else _" you're good to go
[03:41:56] <Guest24> :((
[03:42:01] <Axman6> you can just add things together
[03:42:09] <hpc> so yeah
[03:42:10] <Axman6> x is an Int, negsum xs is an Int
[03:42:32] <Axman6> (+) takes two Ints and adds them
[03:43:00] <Guest24> what would i add the x value to
[03:43:04] <EvanR> when you evaluate 2 + 2, you get 4. You don't update something holding a number
[03:43:17] <EvanR> that's how haskell works
[03:43:18] <Guest24> can i use the built-in function filter
[03:43:23] <glassy> thanks hpc, I will give it a shot. it feels very hacky haha :), hopefully little type level magic needed
[03:43:27] <Guest24> or foldl
[03:43:27] <Axman6> > let f y = y^2 in 7 + f 14
[03:43:28] <lambdabot>  203
[03:43:42] <Axman6> Guest24: you literally only have to change one character to make your code work
[03:43:49] <hpc> glassy: yeah, the whole extension feels hacky to me
[03:44:01] <geekosaur> so is pretty much all of RebindableSyntax tbh
[03:44:01] <glassy> it seems like the kitchensink for overloaded stuff
[03:44:02] <Axman6> you're returning a list when you're supposed to be adding
[03:44:06] <hpc> i think if i wanted that kind of syntactic flexibility i would use lisp
[03:44:37] <glassy> never used lisp
[03:44:43] <glassy> it looks like too many brackets
[03:44:47] <glassy> like python
[03:44:59] <hpc> it is - i had one college course that used common lisp and my laptop's 9 key broke
[03:45:08] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 256 seconds)
[03:45:11] <glassy> that is really funny
[03:45:44] <ephemient> just switch to AZERTY keyboard layout, as long as your 5 key still works :p
[03:45:44] <Axman6> glassy: I'll say it again: x is an Int, negsum, when given a list of Ints returns an Int, so negsum xs is also an Int. (+) takes two Ints and returns an Int. you need an Int 
[03:45:56] <Guest24> https://paste.tomsmeding.com/n9v0edHS
[03:46:25] <Axman6> Guest24: add numbers :: [Int] above numbers = ...
[03:46:27] <ephemient> well now you're hitting type defaulting and monomorphism
[03:46:40] <Guest24> guys i think i did it
[03:46:48] <ephemient> if you wrote negsum numbers inside the .hs file it would be deduced correctly
[03:46:49] <geekosaur> mm, but shouldn't that in a module infer it as :: [Int]?
[03:46:54] <Axman6> you didn;t tell the compiler what type numbers was, so it defaulted to [Integer]
[03:47:11] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[03:47:13] <Axman6> and Int and Integer are different types
[03:47:15] <glassy> Guest24 why not get rid of the positive numbers then sum all of that?
[03:47:17] <Guest24> https://paste.tomsmeding.com/ljoGkaCW
[03:47:22] <johnjaye> i'm surprised you can even hit the 9 key on a laptop
[03:47:22] <johnjaye> let alone any thing like ' or pagedown
[03:47:22] <johnjaye> this one i have now is an old hp and the arrow keys are super slim and tiny so you can barely use them
[03:47:35] <Axman6> > (3^253 :: Integer, 3^253 :: Int)
[03:47:37] <lambdabot>  (514846119915350862092369580702449270793403151142700511080017868259392861591...
[03:47:48] <hpc> johnjaye: this was a while ago
[03:47:55] <hpc> i had an elegant laptop from a more civilized age
[03:48:09] <Axman6> glassy: we're covering the basics first
[03:48:25] <johnjaye> i kinda want to bring my laptop inside but if i disconnect the power it will die in like 5 minutes (bad battery)
[03:48:28] <glassy> ahh i see, good luck guys :)
[03:48:38] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[03:48:46] *** Joins: Guest96 (~Guest96@144-124-99-115.pip.aber.ac.uk)
[03:48:54] <Axman6> gotta crawl before you can walk, and walk before you can run
[03:50:49] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f)
[03:51:32] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881) (Remote host closed the connection)
[03:51:42] *** Quits: simpleauthority (~simpleaut@user/simpleauthority) (Quit: ZNC 1.8.2 - https://znc.in)
[03:51:57] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881)
[03:52:44] <zzz> FOLLOW UP this is where it gets me:
[03:52:45] <zzz> w :: (Int,Float)
[03:52:45] <zzz> w = (fst x, snd x) -- this is ok
[03:52:45] <zzz> h :: (Int,Float)
[03:52:45] <zzz> h = let k = x in (fst k, snd k) -- this is DMRed
[03:53:28] <zzz> reminder that x is:
[03:53:29] <zzz> x :: Num a => (a,a)
[03:53:29] <zzz> x = (0,1)
[03:53:51] *** Joins: simpleauthority (~simpleaut@user/simpleauthority)
[03:54:01] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[03:54:33] <zzz> what's the intuition here? why are w and h different?
[03:56:00] <ephemient> h = let k :: Num a => (a, a); k = x in (fst k, snd k) would behave like w, I expect
[03:56:17] *** Joins: cyphase (~cyphase@user/cyphase)
[03:57:39] <zzz> yes
[03:57:45] *** Joins: deadmarshal (~deadmarsh@95.38.113.215)
[03:59:02] <monochrom> DMR looks at "k =" and monomorphizes it.
[03:59:12] <monochrom> (OK, plus the fact that Num is involved.)
[03:59:14] <zzz> but let k :: (Num a, Num b) => (a, b); ... errrs
[03:59:40] <zzz> *errors
[03:59:52] <monochrom> Because (Num a, Num b) => (a, b) is more general than the type of x.
[04:00:15] <zzz> that's what trips me
[04:00:21] <zzz> k = x is ok
[04:00:21] *** Joins: dut (~dut@user/dut)
[04:00:45] <monochrom> I don't know.  Suppose I define "f :: () -> (); f x = x".
[04:01:02] <monochrom> Now suppose you use "f True".
[04:01:55] <ephemient> if you give them different names, there's x@Int, x@Float, and w = (fst x, snd x) is (fst x@Int, snd x@Float). two different values. whereas there is no way to fit x into (Num a, Num b) => (a, b)
[04:01:57] *** Quits: deadmarshal (~deadmarsh@95.38.113.215) (Ping timeout: 240 seconds)
[04:01:57] <monochrom> "x = what" doesn't matter, "x :: Num a => (a,a)" does.
[04:03:26] <zzz> hmm
[04:05:45] <monochrom> "let (a,b) =" and "case of (a,b)" are type-checked very differently, if that's what you're wondering.
[04:05:57] <monochrom> and "\(a,b) ->" is on the case side, for that matter.
[04:06:30] <zzz> no problem with those
[04:06:53] <zzz> let (a,b) = x === let a = fst x; b = snd x
[04:06:58] <zzz> and
[04:07:18] <Axman6> Guest24: so do you understand the function you have now?
[04:07:27] <Guest24> yes i do thank you
[04:07:57] *** Quits: xff0x (~xff0x@2001:1a81:5280:6800:a068:90b7:b174:1f03) (Ping timeout: 240 seconds)
[04:08:06] <zzz> f = case x of (a,b) -> (a,b) === f = let ab = x in ab === h = x
[04:08:37] <zzz> i mean
[04:08:56] <zzz> === f (a,b) = (a,b) -- to be precise
[04:09:01] *** Joins: xff0x (~xff0x@2001:1a81:5280:6800:582b:a2d3:42a2:2b48)
[04:09:57] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[04:10:36] <zzz> but why f = let k = x in (fst k, snd k) differs from f = (fst x, snd x) is not intuitive
[04:13:20] <ephemient> because GHC won't infer k to be polymorphic by default
[04:13:21] <EvanR> "let polymorphism"
[04:13:34] <EvanR> let generalization
[04:13:58] <EvanR> things I wish I knew when I learned haskell
[04:14:02] <johnjaye> should i worry about a difference of 8.6 vs 8.7 with ghc?
[04:14:17] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[04:15:00] <monochrom> I just tried. Those two f's do not differ.
[04:15:27] <EvanR> oh it's the original x
[04:16:47] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::55f8)
[04:17:05] <zzz> monochrom: the first f requires NoMonomorphismRestriction when x :: Num a => (a,a)
[04:17:18] <zzz> the second one doesn't
[04:17:28] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881) (Remote host closed the connection)
[04:17:42] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881)
[04:17:48] <monochrom> Sigh.
[04:18:01] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:18:33] <zzz> i may be misunderstanding you. am i missing something?
[04:19:50] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 252 seconds)
[04:20:02] <ephemient> https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/let_generalisation.html MonoLocalBinds is default enabled, separately from MonomorphismRestriction
[04:20:27] <monochrom> https://paste.tomsmeding.com/ziRW5SJd
[04:20:30] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[04:20:31] <ephemient> actually hmm. I'm not sure what the default state is.
[04:21:40] <monochrom> The default state depends on other extensions, I think GADTs is an example.
[04:21:41] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881) (Remote host closed the connection)
[04:21:54] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881)
[04:22:21] <geekosaur> yes
[04:23:15] <geekosaur> "The extension MonoLocalBinds is implied by TypeFamilies and GADTs."
[04:23:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:23:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:23:30] *** Joins: wroathe (~wroathe@user/wroathe)
[04:23:34] <monochrom> And I wish the pair is called PolyLocalBinds and NoPolyLocalBinds :)
[04:23:35] <zzz> right
[04:23:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:24:57] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:28:11] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[04:31:01] <[itchyjunk]> hmm i have royally confused myself. say i have fun :: (Maybe a -> Maybe b) -> Maybe a -> b
[04:31:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:31:06] <[itchyjunk]> (i know its partial function)
[04:31:21] <[itchyjunk]> now i have `fun f (Just a ) = `
[04:31:35] <[itchyjunk]> i understand the lhs part of this, it's the rhs thats confusing me
[04:31:49] <monochrom> I think "f (Just a)" will work great?
[04:32:00] <monochrom> Err oops no.
[04:32:00] <[itchyjunk]> what i want to do it, apply f to (Just a), what i get should be `Just b`
[04:32:00] *** Joins: mechano (~mechano@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[04:32:06] <[itchyjunk]> and now i want to refrence this `b`
[04:32:10] <jackdk> if the input to `f` is `Maybe a`, you do not need to deconstruct it.
[04:32:11] <[itchyjunk]> since this is what fun should return
[04:32:20] <monochrom> Use moar pattern matching.  Or use fromJust.
[04:32:28] <mechano> hi im currently using cabal and stack, but only v1 commands, what are the v2 commands for?
[04:32:29] <[itchyjunk]> jackdk, ah fair
[04:32:41] <jackdk> `fun f (Just a) = case (Just a) of { Just b -> b; Nothing -> error "I wrote a partial function and now I'm sad." }
[04:32:44] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 250 seconds)
[04:32:58] <geekosaur> mechano, cabal's v2 commands behave more like stack but without a resolver
[04:33:34] <geekosaur> v1 commands install things "globally" which means projects can conflict with each other by requiring incompatible versions of things. v2 prevents these collisions
[04:33:35] <jackdk> mechano: v1 was a lot of "seemed like a good idea" commands. prefixing the v2 commands allowed a migration path
[04:33:37] <mechano> also, currently installing python from the microsoft store, wondering why msi installers were depreciated in favour of chocolatey via powershell
[04:34:00] <mechano> jackdk: you say that in the past tense, but its the approach i use
[04:34:19] <geekosaur> re a real pain to use in the cloud
[04:34:26] <geekosaur> argh
[04:34:35] <mechano> geekosaur: all my v1 installs break, but i cant even do global installs with v2
[04:34:52] <jackdk> what cabal version are you on, and what os?
[04:34:53] <geekosaur> the msi question is better asked elsewhere, but I suspect it has to do with the fact that msi installers are a real pain to use in the cloud
[04:35:03] <mechano> if an install breaks with v1, then i use stack
[04:35:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[04:35:51] <mechano> geekosaur: for new users, an msi installer for ghci, cabal and stack would be useful - or via the microsoft store
[04:35:52] *** Joins: larrykma (~bc8147f2@cerf.good1.com)
[04:36:00] <Guest24> https://paste.tomsmeding.com/NBIP3Mxa
[04:36:22] <jackdk> why do you want global installs? Pretty much every package ecosystem has moved away from them AFAIK (consider: project-specific node_modules dir, python venv and friends, ruby bundler, cargo...)
[04:36:28] <Guest24> Axman6 could you please help me with this
[04:36:34] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[04:37:20] <mechano> jackdk: win 10, ghci 9.0.1, cabal 3.4.0.0
[04:37:41] <geekosaur> Guest24, that looks more like javascript than haskell
[04:37:53] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[04:37:53] <geekosaur> you cannot declare a mutabloe variable with "var"
[04:38:01] <Guest24> i've never programmed in java
[04:38:03] <mechano> jackdk: because then time consuming library builds dont need to be repeated between projects
[04:38:12] <ephemient> Guest24: "var"??
[04:38:15] <glassy> https://paste.tomsmeding.com/3cbznf58 I am trying to use a partially applied class constraint as a type and define instances using that. I get that 'toBool' is not a (visible) method of class 'ToBool'.
[04:38:20] <glassy> what should I do to make it visible?
[04:38:20] <Guest24> should i use let instead
[04:38:36] <jackdk> they don't in v2-builds either, if the version of things is compatible
[04:38:46] <ephemient> Guest24: it happens to do nothing here, but I think you still have fundamental misconceptions about Haskell
[04:38:57] <Guest24> i definitely do
[04:39:21] <geekosaur> glassy, you can't use type that way
[04:39:32] <glassy> oh
[04:39:36] <glassy> what do i do instead?
[04:39:39] <mechano> glassy: just leave the second parameter, ie use both in the instance, but have the second as a polymorphic lowercase type
[04:39:46] <geekosaur> your class is called ToBoolLike, but it's looking for a class (not type synonym for a class) ToBool
[04:40:11] <glassy> so you can't have partially applied constraints?
[04:40:16] <geekosaur> you have to make the instance for ToBoolLike Bool Bool
[04:40:25] <mechano> dont think you an instantiate class synonyms, only use them in constraints
[04:40:31] <geekosaur> ^
[04:40:44] <glassy> ahh so it isn't possible thanks
[04:40:56] <geekosaur> it's not even looking at yout `type`, it's looking directly for ToBool instead of ToBoolLike
[04:41:10] <mechano> but whater you were trying to do should be possible using actual syntax
[04:41:34] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:34] <EvanR> Guest24, `let x = some formula here in ...' is fundamentally like substituting `some formula here' in ... wherever x appears (unless shadowed e.g. by more lets)
[04:41:48] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 256 seconds)
[04:41:56] <mechano> still dont get what v2 is for btw. whats the advantage instead of stack when not doing global installs?
[04:42:00] <EvanR> which is different from the usual way variables work 
[04:42:06] <EvanR> in e.g. javascript
[04:42:59] <EvanR> it's arguably a lot easier to reason about the haskell way
[04:43:05] <ephemient> Guest24: the immediate issue is that you have an expression in a where block. there is a difference between bindings and expressions. at the top level or inside let or where, you can have bindings ("x = ...", "f x = ...", etc.) but not expressions ("x", "if ...", etc.). expressions go on the right-hand side of an =
[04:43:17] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[04:43:55] <mechano> is it advised to use stack or v2?
[04:44:44] <geekosaur> that's a matter of taste
[04:44:46] <monochrom> Both get advocates.  I'm on the cabal side.
[04:44:52] <geekosaur> some people prefer stackk, some cabal
[04:44:59] <mechano> im guessing the only difference is that v2 uses the currently avaiable packages and the currently installed ghc
[04:45:23] <glassy> mechano it works just using ToBoolLike Bool t, although I had a typo t and b were in the wrong order on line 9
[04:45:27] <Guest24> https://paste.tomsmeding.com/eH12euPM
[04:45:31] <mechano> why were global installs depreciated?
[04:45:34] <glassy> it compiles although i'm scared
[04:45:35] <monochrom> I disbelieve in stackage, and I disbelieve in auto-installing yet another version of GHC, so I chose cabal.
[04:45:41] <glassy> it requires undecidable instances
[04:45:45] <geekosaur> mechano, they conflict with each other
[04:45:54] <Guest24> this is what i've changed from what I understand of what you said ephemient
[04:46:03] <geekosaur> stack and cabal v2 both refuse to do global installs for that reason
[04:46:15] <monochrom> You have experienced breaks under v1. It is why.
[04:46:19] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[04:46:24] <mechano> glassy: this is a very useful langage extension, its basically on all the time if your doiing anything
[04:46:39] <EvanR> the problem with global installs is the same as earlier, they didn't go far enough and have some server with the latest working GHC available for anyone in the world to use. A global install
[04:46:45] <geekosaur> they both install to internal repositories anbd expose parts of those repositories specifically when requested, as opposed to always (and causing conflicts)
[04:46:55] <mechano> it should probably have a less scary name...
[04:46:57] <glassy> yeah but usually it is other people's code that i turn on undecidable instances for
[04:46:59] <glassy> not my own haha
[04:47:02] <monochrom> or s/breaks/conflicts/
[04:47:12] <ephemient> Guest24: ok. now you have two expressions: if then else; if then else. that's not something that makes sense in Haskell
[04:47:33] <mechano> monochrom: i guess i like stack because im sick of my hard work getting bitrotten
[04:47:35] <Guest24> ok should have nested if then else or quards or something
[04:47:41] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:00] <glassy> my problem with stack is i always end up with multiple stack versions for different projects
[04:48:03] <glassy> but that is probably just me
[04:48:09] <monochrom> cabal v2 has "cabal freeze" to mitigate that.
[04:48:19] <ephemient> (well, in theory you could have (if then else) (if then else) the first r function applied to an argument, both of which come from conditionals, but the syntax doesn't allow for that without grouping)
[04:48:35] <monochrom> It's like a huge generalization of stackage resolver.
[04:48:37] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Ping timeout: 240 seconds)
[04:48:37] <jackdk> using correct version bounds on deps also avoids this problem - see `cabal gen-bounds` as a starting point
[04:48:47] <ephemient> Guest24: yes. and then once you figure that out, you'll find that "== Special String" doesn't work either.
[04:48:49] <mechano> so if two imports use different version of the same library, it gets both and just sends the parts where they are needed?
[04:48:57] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:48:58] <ephemient> to deconstruct data constructors, use pattern matching
[04:49:23] <monochrom> Yeah and cabal gen-bounds.
[04:49:43] <ephemient> == is not a pattern match. f (Special _) is, as is case _ of Special _ ->; ...
[04:50:02] <mechano> so stack is basically superceded entierly by v2? what about breaking ghci changes? is that the only case where saving a copy with the stack resolver would be an extra layer of safety?
[04:50:23] <mechano> i cant see how v2 freeze could match that without the local ghci installs
[04:50:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:50:49] <monochrom> Right, I would still need to keep my old GHC around.
[04:50:57] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[04:51:04] <ephemient> mechano: I can only parse your sentence in a way that makes a modicum of sense with s/ghci/ghc
[04:51:15] <mechano> yeah that was a type
[04:51:18] <mechano> typo*
[04:51:21] <ephemient> but yeah, if you're using cabal just keep multiple ghc's around with ghcup 
[04:51:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:51:35] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7985:a982:d93:11f) (Quit: Textual IRC Client: www.textualapp.com)
[04:51:36] <mechano> but stack does all that...
[04:51:39] <glassy> when i use cabal build -j24 it doesn't peg all my cores but rather just one?
[04:51:43] <glassy> why is that?
[04:51:46] <monochrom> Frankly I don't mind updating my code for a newer GHC and some newer versions of libraries.
[04:51:47] <mechano> and it records which is the right ghc for the old libs
[04:51:52] <davean> mechano: stack does a very limited special case of that
[04:52:01] <mechano> limited!?
[04:52:05] <davean> Extremely
[04:52:15] <mechano> seems to do it perfectly, whats the criticism for?
[04:52:28] <davean> Try targetting something other than your current system
[04:52:39] <davean> like JS or webassembly, or crosscompilation, or ...
[04:52:40] <monochrom> So if you mind that very much and try to argue with me, we won't get anywhere.  I do my thing.
[04:52:42] <mechano> so v2 does cross compliation?
[04:53:21] <mechano> monochrom: im arguing that stack is the only way to ensure builds do not become bitrotten
[04:53:26] <davean> Its GHC that does the cross compilation
[04:53:44] <mechano> im asking why i should use v2
[04:53:56] <ephemient> because v1 is dead
[04:53:57] <davean> mechano: If you're arguing that you're just here trolling and I'm done?
[04:54:11] <monochrom> I know a prof who explained an even better way.
[04:54:14] <jackdk> in fact, stack does a great job of encouraging bitrot, as its templates create libraries with no bounds on deps, which then get uploaded to hackage and break things for everyone else
[04:54:20] <mechano> you wade in quite rudely davean
[04:54:29] <monochrom> But it involves keeping even the old hardware.
[04:54:47] <monochrom> And he didn't even have Haskell in mind.  More likely C.
[04:54:52] <EvanR> I'd appreciate a stackage for old hardware
[04:55:02] <mechano> jackdk: ah, i wasnt aware of this issue to do with bounds
[04:55:04] <jackdk> Particular recent example: base >= 4.x && <5 admits unreleased versions which are allowed to contain breaking changes, which is exactly what happened when GHC9 appeared on the scene
[04:55:08] <jackdk> also aeson-2.0
[04:55:20] <johnjaye> ephemient: what is the difference between v1 and v2 in cabal? i saw a makefile that was talking about v1 commands
[04:55:22] <EvanR> operator, get me an old BeBox, for R5
[04:55:33] <glassy> i thought v2 had atomic updates and stuff like that?
[04:55:38] <glassy> i'm probably wrong
[04:55:42] <Guest24> could i put an if statement within an if statement
[04:55:43] <davean> glassy: that -j is the package parallization, not the GHC
[04:55:54] <glassy> what do you mean by package parallization?
[04:56:03] <monochrom> His way translated to Haskell, you wouldn't even refer to stackage online.  You would download the tarballs, and stick to them.  You don't even know that stackage won't change the tarballs.
[04:56:12] <jackdk> so I consider the patterns encouraged by stack to be extremely rude, in that they use the bounds information to construct their snapshots, and then encourage the uploading of packages which make that break that information source.
[04:56:25] <davean> glassy: compiling seperate packages in parallel, not inside a package
[04:56:39] <davean> glassy: and most of cabal stuff is atomic - what do you mean by atomic updates?
[04:56:43] <ephemient> my approximate flowchart is: stack is fine if you just want some libraries as an end-product and don't particularly care which versions. cabal is required if you want to stay up to date or ship something to be used by other users
[04:57:01] <glassy> i just thought you could rollback stuff with cabal v2, i'm not well informed
[04:57:12] <davean> glassy: 
[04:57:24] <davean> The concept of "rollback" isn't meaningful for v2
[04:57:54] <jackdk> I can respect that it helps people making applications at the leaf of the dependency graph, but it also holds the ecosystem back. There's little enthusiasm for using things like backpack and multiple internal libraries because they don't work with stack, and stack has not enough dev resources
[04:57:57] <mechano> jackdk: hmm, so it doesnt ensure against breaking changes from new ghc versions. thats a shame, since that was the reason i was using it. i guess if it doesnt even do that, then my reason for using it, and advocating for it, and the haskell toolchain - based on a rationality of the snapshots ... wait, how does what you say change anything, the
[04:57:57] <mechano> snapshots should always use the correct ghc
[04:58:04] <glassy> lol idk
[04:58:28] <glassy> davean: how do i make builds inside a package parallel as well as compiling seperate packages in parallel?
[04:58:42] <glassy> been wondering for about a year embarassingly
[04:58:53] <glassy> maybe i got it working but my disk is the bottleneck
[04:58:58] <Guest24> https://paste.tomsmeding.com/6yumtqfg
[04:59:24] <Guest24> this is what I've changed
[05:00:04] <dibblego> it's Friday somewhere, go to the pub
[05:00:05] <jackdk> mechano: maybe the snapshots continue to work. That's not what I'm saying. I'm saying that the patterns encouraged by stack encourage people to submit misbehaving libraries to hackage, which makes the ecosystem worse for everyone else. I don't support bootstrapping off someone else's commons, and then making it worse
[05:00:08] <davean> glassy: Also, is your setup a custom setup?
[05:00:10] <mechano> ephemient: as far as i could tell it was the only way to ensure that a personal project that builds could certainly be built again at another time
[05:00:31] <glassy> davean no, it is just cabal now after i moved from stack
[05:00:37] <glassy> i don't have any dot files changing compilation
[05:00:54] *** Joins: vysn (~vysn@user/vysn)
[05:01:19] <jackdk> besides, who knows if the ghc you download will run against the system libs on your build machine in the future? Nix will get you closer, but this question will ultimately bottom out against the fact that GHC doesn't have a working bootstrap path any more
[05:01:28] <monochrom> dibblego: But the pubs are closed in my city :(
[05:01:33] <davean> glassy: see https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5176
[05:01:38] <dibblego> can't be, that's illegal
[05:01:58] <davean> glassy: if you have parallism between package builds - the strongest parallelism - then you have a problem of getting the correct overall parallelism when there is parallelism inside a build
[05:02:04] <ephemient> mechano: cabal can certainly pin versions, including ghc. the onus is on you to have a working GHC version, but I think that's reasonable: ghcup makes it easy
[05:02:23] <glassy> i've tried using ghc-options -j 24 too
[05:02:43] <glassy> it is hard to know how to split threads between building packages and those packages themselves
[05:02:45] <ephemient> I still use stack for personal projects, but I'm sort of expecting to have to switch off of it as it's in community maintenance mode now
[05:02:46] *** Quits: incertia (~incertia@24.42.241.219) (Ping timeout: 256 seconds)
[05:03:04] <mechano> ah, i understand your point now jackdk
[05:03:06] <mechano> seems fair
[05:03:22] <johnjaye> jackdk: i'm kinda new to haskell so i don't really get how cabal works
[05:03:34] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[05:03:34] <johnjaye> i just use it to install things with cabal install. i guess that's bad because of library versions?
[05:04:01] <Guest24> https://paste.tomsmeding.com/ZKBIf4iv
[05:04:04] <mechano> ephemient: pin? iv never written the ghc version in a cabal file, i guess i should do that instead of using stack?
[05:04:16] <Guest24> i get an error with the special string
[05:04:26] <Guest24> how do i fix it :((
[05:04:40] <monochrom> See this is why my prof says to even keep old hardware.  Keep old hardware.  Keep old OS.  Keep old system libs...
[05:05:00] <ephemient> mechano: https://cabal.readthedocs.io/en/3.6/cabal-project.html#cfg-field-with-compiler
[05:05:12] <johnjaye> monochrom: there is potential wisdom in that. the problem is you don't know which old hardware or OS will end up being useful. exponential and all
[05:05:12] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Read error: Connection reset by peer)
[05:05:17] <ephemient> I don't know if I'd say "should"; it will depend on your priorities.
[05:05:21] <monochrom> He was teaching a software engineering course and was relating actual practices in very large companies.
[05:06:09] <monochrom> A glimpse of his context is in "we're talking about a million lines of code".
[05:06:11] <mechano> ok cool, so i just write the with-compiler line in the cabal file. ok, i guess i dont need to use stack
[05:06:24] <monochrom> Although, a million lines of C is not doing very much.
[05:06:34] <ephemient> * not the project.cabal file, but the cabal.project file
[05:06:50] <jackdk> johnjaye: generally I'm working in some package, so I list the packages I need in `build-depends` and go from there
[05:07:13] <mechano> ephemient: oh thanks, i didnt spot that
[05:07:14] <johnjaye> monochrom: well if your self-driving car crashes due to a bug just restart and recompile
[05:07:43] <jackdk> johnjaye: if you just want to test some stuff in a repl it's possible to say `cabal repl -b lens`, say
[05:08:01] <mechano> johnjaye: the good thing is that now that tesla has such a large cluster with convolutional geometry, that my old "structured access memory" patterns are finally useful
[05:08:10] <Guest24> ephemient the special string doesn't work could you please look at my code https://paste.tomsmeding.com/ZKBIf4iv
[05:08:16] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[05:08:20] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[05:08:26] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[05:08:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:08:36] <ephemient> like I mentioned earlier, "== Special String" is not the way to pattern match
[05:08:43] <mechano> instead of having to emulate it with fpga's
[05:09:13] <ephemient> you can pattern match when binding (the left-hand side of =, or "case ... of")
[05:09:56] <mechano> does anyone remember that? the thing with the pointer comonads for nearest neighbour navigation...
[05:09:56] *** Joins: slac83129 (~slack1256@186.11.27.69)
[05:09:57] <ephemient> that being said, the error message is rightfully about String - you're trying to use it in a value position, but there is no "value" named "String"
[05:10:26] <ephemient> there's basically a namespace for types and a namespace for values, and "String" is only in the former
[05:10:28] <davean> glassy: yah well ... uh, you're going to have problems getting -j to GHC to work - never mind it might just not be possible with your project due to include order
[05:10:32] <Guest24> https://paste.tomsmeding.com/7TOb0tPp this is what i've changed it to
[05:10:38] <monochrom> I think I remember people implementing Game of Life with comonads...
[05:10:49] <mechano> right, but its slow without SAM
[05:10:50] <ephemient> Guest24: still not a binding
[05:11:02] <Guest24> what is a binding
[05:11:07] <ephemient> the left-hand side of =
[05:11:15] <monochrom> Oh, I also heard of transputers...
[05:11:25] <mechano> lol
[05:11:29] <jackdk> monochrom: that's the main use of seen, as well as buildery configuration things using `instance Monoid m => Comonad ((->) m)`
[05:11:32] <ephemient> (eh... more complicated than that but close enough for now)
[05:12:01] <davean> mechano: theres a lot of optimization approaches to the comonad code, the nice part is the optimizations are externally applied 
[05:12:03] <mechano> idk why they call it "bind" - makes it seem like some kind of paradox infliction
[05:12:19] <Guest24> what would i bind that to tho
[05:12:24] *** Quits: slack1256 (~slack1256@191.125.99.215) (Ping timeout: 256 seconds)
[05:12:26] <jackdk> a name gets bound to an expression or value, I guess
[05:12:29] *** Joins: zaquest (~notzaques@5.130.79.72)
[05:12:48] <davean> mechano: because it attaches a name to a definition
[05:12:53] <mechano> i guess its because >>= puts the output into the rhs for lambda binding or something
[05:13:06] <ephemient> that's "bind" but a different one
[05:13:17] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[05:13:52] <mechano> yeah, things end up confused because of these semantics
[05:13:58] <monochrom> Perhaps it's a LoTR Mordor one-ring reference :)
[05:14:33] <davean> I mean its sorta the same bind/apply thing, sorta
[05:14:40] <monochrom> "one doesn't simply extract from Mordor" or something...
[05:15:03] <monochrom> CoMordor, though, is a different story...
[05:15:21] <davean> monochrom: CoMordor allows the eagel operator
[05:15:27] <monochrom> :)
[05:15:33] <mechano> i thought that was a metaphor for promises
[05:16:35] <mechano> bound to be..
[05:16:37] *** Joins: zmt01 (~zmt00@user/zmt00)
[05:17:30] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[05:17:54] *** Quits: mechano (~mechano@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Connection closed)
[05:18:11] <monochrom> Haha
[05:18:52] <EvanR> Unforunately, no one can be told what a Monad is :morpheus:
[05:19:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[05:19:39] <monochrom> Is Neo ()?  Or is Neo IO()?
[05:20:01] *** Joins: ub (~Thunderbi@p548c8cd6.dip0.t-ipconnect.de)
[05:20:21] *** Quits: larrykma (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[05:21:16] *** Quits: ubert (~Thunderbi@p200300ecdf0994402d77270a91cab57e.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:21:17] *** ub is now known as ubert
[05:22:18] <EvanR> well I guess they escape from The Matrix after all so that parallel is dead
[05:22:24] <ephemient> neo = the [1, 1..]
[05:22:36] <davean> I think Neo is (# State# RealWorld, Neo #)
[05:23:00] <davean> He got unboxed
[05:25:15] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[05:25:15] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f) (Remote host closed the connection)
[05:25:59] <zzz> this is fun: https://paste.jrvieira.com/1642730131768
[05:28:01] <Guest24> hi so this is what i decided to bind could it be correct ??
[05:28:03] <Guest24> ghci> :l question4
[05:28:04] <Guest24> [1 of 1] Compiling Shop             ( question4.hs, interpreted )
[05:28:04] <Guest24> question4.hs:16:1: warning: [-Wtabs]
[05:28:05] <Guest24> Â  Â  Tab character found here, and in 10 further locations.
[05:28:05] <Guest24> Â  Â  Please use spaces instead.
[05:28:06] <Guest24> Â  Â |
[05:28:06] <Guest24> 16 |         (if f (Special String) == True
[05:28:07] <Guest24> Â  Â | ^^^^^^^^
[05:28:07] <Guest24> question4.hs:25:1: error: parse error on input `totalBanana'
[05:28:08] <Guest24> Â  Â |
[05:28:08] <Guest24> 25 | totalBanana :: [IceCream] -> Float
[05:28:09] <Guest24> Â  Â | ^^^^^^^^^^^
[05:28:09] <Guest24> Failed, no modules loaded.
[05:28:10] <Guest24> ghci>
[05:28:12] <Guest24> https://paste.tomsmeding.com/rvkscpSB
[05:28:34] <Guest24> i'm sorry i thought i had copied the URL but i still had the error message
[05:28:35] <zzz> Guest24: try not to do that
[05:28:47] <zzz> Guest24: which irc client are you using?
[05:28:55] <Guest24> irc client?
[05:29:55] <jackdk> looks like the libera web interface whatever that is
[05:30:16] <zzz> yes. which program are you using to access irc? you can configure most to prevent long pastes
[05:30:25] <zzz> jackdk: oh well :/
[05:31:10] <Guest24> im using windows powershell and editting with motepad ++ but that's all I know
[05:31:37] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[05:32:38] *** Joins: califax- (~califax@user/califx)
[05:33:06] <Guest24> could someone please help me with my code ?
[05:33:08] <Axman6> where you're taling right now is IRC Guest24, are you doing that in a browser?
[05:33:24] <Guest24> https://paste.tomsmeding.com/rvkscpSB
[05:33:59] <zzz> well, i guess my paste is going to go unnoticed...
[05:34:03] <Axman6> Guest24: you can't indent those definitions like that, all top level definitions need to start in the first column 
[05:34:27] <Guest24> the definitions as in the types
[05:34:41] <Axman6> module isn;t an object of some sort, it';s the name for a collection of definitions
[05:35:06] <Axman6> you also need to configure your text editor to not use tabs
[05:35:25] <monochrom> Axman6, that was partly my fault, I wrongly suggested the indenting. Although, I also thought I already said I was wrong.
[05:35:31] *** Joins: alp (~alp@user/alp)
[05:35:32] <Axman6> that will fix the first warning, to fix the error, you need to remove the spaced before the words type and data
[05:35:39] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:35:40] *** califax- is now known as califax
[05:36:17] <Axman6> spaces*
[05:36:33] <Axman6> thank god I don't work in an industry where typing is my main activity! >_<
[05:37:03] <Guest24> https://paste.tomsmeding.com/hs4fwq8S
[05:38:10] <Axman6> there is a lot wrong with the line "isBanana if (f,s,h) == Banana"
[05:38:19] <Axman6> firstly, there's no = so it is not a definition'
[05:39:25] <Axman6> seccondly, (f,s,h) has type (Flavour, Scoops, HasSprinkles) but Banana has type Flavour, so you can't test if they are equal, only things of the same type can be equsl
[05:39:53] <Axman6> start with: isBanana (f,s,h) = <definition of the function>
[05:40:43] <Axman6> price's definition also doesn't make sense, you've said its type is IceCream -> Float, but in price [] = 0 you're saying that the first argument is a list
[05:40:56] <Axman6> you should delete that line
[05:41:49] <zzz> Guest24: how are you introducing yourself to Haskell? Are you following any specific material?
[05:42:02] <Axman6> also, you should stop writing x == True, it is always redundant, eithe x is True and the result is True, or x is False and the result is False. 
[05:42:21] <Guest24> https://paste.tomsmeding.com/gmqbZeSd
[05:42:34] <Guest24> this is what i've done
[05:43:17] <Guest24> should i use case of instead if statements in the price function
[05:43:43] <Axman6> yes, that would be much clearer
[05:43:59] <Guest24> ok i'll try that
[05:44:14] <Guest24> do the other things look ok to you when it comes to my program
[05:44:28] <zzz> this desn't seem like the best approach to learning a language
[05:44:30] <Guest24> i think i may still have an issue with my totalscoops function
[05:45:49] <Axman6> Guest24: explain what you think "s + (f,s,h):xs" is doing?
[05:46:02] <ephemient> 1. the precedence of + and : does not lead to expected results in totalScoops, and 2. your recursion does not make any progress
[05:46:55] <ephemient> but 0. you're still using ==; Flavor is not an Eq so that won't work. also that is not what you want to do for Special anyway.
[05:47:09] <zwro[m]> zzz: why does that happen?
[05:47:14] <zzz> why does what happen?
[05:47:54] <zwro[m]> <zzz> "this is fun: https://paste...." <- https://paste.jrvieira.com/1642730131768
[05:49:02] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:49:24] *** Joins: jacks2 (~bc8147f2@217.29.117.252)
[05:51:51] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (Quit: WeeChat 2.9)
[05:52:21] <zzz> i'm not sure
[05:53:57] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[05:54:21] <EvanR> if F is some type family and I have an a -> b, can I have a F a -> F b
[05:54:32] <EvanR> guess not
[05:54:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f)
[05:55:04] <Guest24> https://paste.tomsmeding.com/ShhEzeE5
[05:55:24] <Guest24> i still am not sure how creat recursive functions
[05:55:47] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[05:56:13] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[05:56:51] <jackdk> EvanR: you would need an instance of that type family `F (a -> b) = F a -> F b`
[05:57:07] <ephemient> Guest24: you were close before, you just had some extra bits breaking it
[05:57:16] <EvanR> I have that
[05:57:20] <Guest24> ok thank you
[05:57:26] <Guest24> i'll try to figure it out again
[05:57:39] <EvanR> so how do I get the actual values xD
[05:58:45] *** Quits: xff0x (~xff0x@2001:1a81:5280:6800:582b:a2d3:42a2:2b48) (Ping timeout: 268 seconds)
[05:58:54] <EvanR> I'm not sure it's possible since F a need have nothing to do with a
[06:00:17] *** Joins: xff0x (~xff0x@2001:1a81:52b8:8500:a7fd:d6d9:518c:9835)
[06:01:43] <zwro[m]> zzz: ok that's weird
[06:02:00] <Guest24> https://paste.tomsmeding.com/NZ0tO7e6
[06:02:10] <Guest24> so this what i've gotten to so far
[06:02:36] <Guest24> should i use s instead of x
[06:03:33] <Guest24> https://paste.tomsmeding.com/d2T0W0yD
[06:04:00] <Guest24> so i changed it and now im getting errors for the last function
[06:04:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:04:23] <Guest24> ephemient
[06:05:16] <ephemient> filter returns a list with the same type as its input, just with fewer elements
[06:05:50] <ephemient> a list cannot be a Float, which is why there is a type error there
[06:05:56] <Guest24> ok
[06:05:57] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[06:06:09] <zwro[m]> zzz: in https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/let_generalisation.html you can read:
[06:06:23] <zwro[m]> So here are the exact rules used by MonoLocalBinds. With MonoLocalBinds, a binding group will be generalised if and only if
[06:06:23] <zwro[m]> Each of its free variables (excluding the variables bound by the group itself) is closed (see next bullet), or
[06:06:23] <zwro[m]> Any of its binders has a partial type signature (see Partial Type Signatures). Adding a partial type signature f :: _, (or, more generally, f :: _ => _) provides a per-binding way to ask GHC to perform let-generalisation, even though MonoLocalBinds is on.
[06:07:48] <zzz> zwro[m]: that doesn't explain my example. I don't think MonoLocalBinds is relevant even
[06:07:49] *** Quits: jenna8912 (~jenna@c-107-5-104-51.hsd1.mi.comcast.net) (Quit: Reconnecting)
[06:08:01] *** Joins: jenna8912 (~jenna@c-107-5-104-51.hsd1.mi.comcast.net)
[06:10:34] <zzz> even more, g and h both have partial type signatures on y (in fact, it's the noly diff) and the former errors while the latter works, MR or NoMR
[06:12:20] <Guest24> https://paste.tomsmeding.com/4wOl8H40
[06:12:27] <Guest24> this what i've done
[06:12:39] <Guest24> i've made the function recursive like the top one
[06:13:12] <zwro[m]> zzz: it's weird. i have no idea what's going on there. maybe _ -> allows for ghc to generalize it to Any -> ?  but I'm out of my depth
[06:13:59] <zzz> zwro[m]: that seems unlikely
[06:15:09] <ephemient> pretty sure _ => _ forces it to be polymorphic, bypassig MR
[06:15:25] <ephemient> while _ doesn't
[06:16:46] <zzz> ephemient: can you suggest some literature where i can explore this further?
[06:17:27] <zzz> why does _ fail then?
[06:18:07] <ephemient> because there's no _ that can stand in, that one is definitely monomorphic
[06:18:16] <ephemient> at least, that's how it looks; I've never played with PartialTypeSignatures before
[06:18:59] <zzz> ah, (a,b) would clash with Num a => (a,a)
[06:19:26] *** Joins: razetime (~quassel@49.207.203.87)
[06:20:01] <zzz> wait
[06:20:06] <zzz> hmm
[06:20:12] *** Quits: jacks2 (~bc8147f2@217.29.117.252) (Quit: http://www.okay.uz/)
[06:20:38] <zzz> y :: (a,b) gives me:
[06:20:38] <zzz>       Expected type: (a, b)
[06:20:38] <zzz>         Actual type: (a, a)
[06:20:45] <zzz> :/
[06:20:53] <zzz> but i get it
[06:21:04] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:21:04] *** Quits: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org) (Remote host closed the connection)
[06:21:36] <ephemient> further evidence: () => _ fails, so the _ => definitely makes the difference
[06:21:41] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:22:57] <monochrom> zzz: Here you run into "y :: (a,b)" meaning "y :: forall t1 t2. (t1, t2)" and has nothing to do with any outer "a" or "b".  And then you will read up on ScopedTypeVariables.
[06:24:44] <zzz> monochrom: you are right, i forgot about the implicit forall
[06:25:31] <zzz> might be room for error message imporvement
[06:25:33] <monochrom> Isn't Haskell exciting! >:)
[06:25:49] <zzz> i's pretty confusing, but rewarding noneheless
[06:26:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[06:27:44] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[06:28:37] <zzz> learning haskell is like reading a contract with recursive fineprint
[06:28:44] <monochrom> Consider conflating "exciting" with "surprising" haha
[06:29:57] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[06:30:54] <zzz> at some point i started expecting the "surprise"
[06:31:27] <ski> @quote is.the.solution
[06:31:27] <lambdabot> quicksilver says: head-explosion is the solution, not the problem.
[06:31:49] <zzz> ski: :)
[06:32:23] <ephemient> the more your head explodes, the more space there is for Haskell (?)
[06:32:50] <ski> learning often involves a certain amount of unlearning
[06:33:17] *** Joins: Erutuon (~Erutuon@user/erutuon)
[06:33:36] <zzz> ski: that's not the problem with haskell
[06:34:01] <zzz> the problem with haskell is that learning something always requires learning something
[06:34:17] <zzz> it's lazily evaluated knowledge
[06:34:52] <zzz> to learn haskell you first need to learn haskell; otherwise = mempty
[06:34:56] <ski> yea, unfortunately many people come to expect to not have to learn that much new
[06:35:44] <ski> oh, yea, i see what you mean. learning is often circumambulatory, spiraling. you learn about A, then B, then C, then A again, but now from a "higher viewpoint", since you've at least to some degree covered those other terrains
[06:36:04] <johnjaye> zzz: i think what really gets people discouraged is yak shaving. to learn A you need B. But B depends on C. you need D to finish C. etc
[06:36:26] <zzz> tell me *anything* about haskell, and your sentence will invariable end with an asterisk
[06:36:51] <EvanR> haskell is purely functional
[06:36:52] *** Joins: cyphase (~cyphase@user/cyphase)
[06:36:58] <ski> finding out the proper order in which to introduce concepts, when attempting to teach a topic, can be quite hard
[06:37:23] <ski> (also considering that people come from different backgrounds, have different learning styles and preferences, &c.)
[06:37:25] <EvanR> asterisk in the same sense that "the sky is blue" has asterisk
[06:38:11] <EvanR> well hopefully it's purely functional more often than the sky is blue
[06:38:36] * zzz unsafely performs IO
[06:38:57] <EvanR> gross
[06:39:10] <ephemient> Haskellâ€  isâ€¡ purelyÂ§ functionalÂ¶ (no asterisks)
[06:39:32] <EvanR> haha depending on what the definition of is is
[06:39:42] <monochrom> Haskell is Haskell.
[06:40:04] * ski . o O ( "RÃ©sumÃ©" by Roman Cheplyaka,Maria Kovalyova in 2010-12-12 at <https://ro-che.info/ccc/11> )
[06:40:07] <monochrom> I guess your asterisk footnote is "yeah it's a tautology, nothing to see here"
[06:41:50] <monochrom> "to learn A you need B. But B depends on C. you need D to finish C. etc" holds for learning by dive-in projects only.
[06:42:09] * ski . o O ( <https://xkcd.com/703/>,<http://www.vex.net/~trebla/humour/tautologies.html> )
[06:42:18] <ephemient> haskell == haskell -- requires evaluating `haskell'
[06:42:35] <monochrom> "I want to learn Haskell, I heard that dive-in projects are best for learning programming, I conclude that I want to learn Haskell by a webapp project."
[06:42:51] <monochrom> This is why I recommend against dive-in projects.
[06:43:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:43:47] <monochrom> Oh it's how you learned Python? Well Python is different.
[06:44:06] <monochrom> Oh you cannot learn programming some other way?  Well natural selection...
[06:44:56] <ephemient> I learned Python by reading all the docs first. I tried to do that for Haskell but I don't think I ever finishedâ€¦
[06:44:59] <monochrom> Oh you conclude that Haskell is harder to learn? I agree.
[06:45:10] *** Quits: glassy (~glassy@user/glassy) (Quit: Leaving)
[06:45:18] <monochrom> Whereas Python is harder to write correct code in.
[06:45:40] <EvanR> it's how I wrote some terrible python programs but not how I learned python (never learned it)
[06:46:51] <ski>   "My reasoning was simple, by writing a Haskell compiler in Haskell I will double my language learning speed since I will not only have to learn how to program in it by forcing myself to complete a non-trivial project, but also its subtle semantics and dark corners since I actually needed to implement it correctly."
[06:47:02] <ski>   "Writing a compiler is also doubly efficient to begin with, since if you self-compile improvements not only give you a better optimizer, but also speed up your self-compiled compiler. All in all I figure I was making very good use of my time. For some reason, when I explain my reasoning to other people they look at me like I am crazy, but I can detect no flaw in my logic."
[06:47:07] <ski>   -- John Meacham,"The story of jhc",<http://www.repetae.net/computer/jhc/jhc.shtml#the-story-of-jhc>
[06:47:45] <monochrom> Success stories are written by the victors. >:)
[06:48:19] <ski> :>
[06:48:28] <EvanR> each time you optimize the compiler, your optimization rate increases, requiring a theory of analysis to explain how your speed didn't diverge
[06:48:48] <zzz> ephemient: i don't think we've finished writing them
[06:49:59] <ephemient> the rest of them are probably just behind that thunk over there
[06:50:15] <zzz> pkill -9 ghc
[06:52:10] <hughjfchen> Anyone knows the path library? I use parseSomeFile to parse a filepath into a path, then use filename try to get the filename from the path. However, I got an error message saying that cannot match 'SomeBase File' with 'File'.
[06:52:17] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[06:52:55] <zzz> jhc looks interesting
[06:53:01] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[06:53:21] <hughjfchen> I already pattern match the return of parseSomeFile
[06:53:27] <zzz> where can i learn more about system E?
[06:54:26] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 250 seconds)
[06:56:01] <hughjfchen> code is here: https://i.imgur.com/iDjEbCK.png
[06:57:31] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:57:31] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:57:31] *** finn_elija is now known as FinnElija
[07:02:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:02:40] *** Quits: td_ (~td@muedsl-82-207-238-049.citykom.de) (Ping timeout: 250 seconds)
[07:03:36] <ephemient> prjSomeBase filename <$> parseSomeFile f
[07:04:40] *** Joins: td_ (~td@94.134.91.211)
[07:05:05] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[07:05:28] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[07:07:48] <hughjfchen> ephemient: thanks, ephemient, I'll have a try
[07:10:28] *** Joins: nineonine (~nineonine@2604:3d08:7780:cd00:e983:291a:d390:4809)
[07:10:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:12:09] <hughjfchen> ephemient: thanks, it works.
[07:12:55] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:36] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[07:14:08] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:19:48] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[07:20:43] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[07:20:57] *** Quits: vglfr (~vglfr@88.155.104.216) (Ping timeout: 240 seconds)
[07:22:11] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[07:23:12] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[07:25:24] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[07:25:37] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[07:29:11] *** [_] is now known as [itchyjunk]
[07:30:01] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[07:30:05] *** Joins: lechner (~lechner@debian/lechner)
[07:31:21] *** Joins: haasn (~nand@haasn.dev)
[07:32:44] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[07:34:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[07:36:47] *** Joins: vglfr (~vglfr@88.155.98.86)
[07:43:37] *** Quits: Guest24 (~Guest24@144-124-136-14.pip.aber.ac.uk) (Quit: Client closed)
[07:45:32] <zzz> first error day! i had never seen this one before:
[07:45:36] <zzz>     Wildcard â€˜_â€™ not allowed in a constraint
[07:45:36] <zzz>       except as the last top-level constraint of a type signature
[07:45:36] <zzz>         e.g  f :: (Eq a, _) => blah
[07:45:36] <zzz>       in the type signature for â€˜yâ€™
[07:45:36] <zzz>    |
[07:45:38] <zzz> 15 |    y :: (_,_) => (a,_)
[07:45:41] <zzz>    |          ^
[07:46:08] *** Joins: CHUD (~CHUD@cpc142034-slou6-2-0-cust488.17-4.cable.virginm.net)
[07:46:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[07:47:17] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[07:47:40] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[07:48:05] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:51:25] *** Joins: faustind (~faustin@M014008067225.v4.enabler.ne.jp)
[07:55:51] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[07:59:00] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 250 seconds)
[07:59:02] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[07:59:27] *** Joins: deadmarshal (~deadmarsh@95.38.113.215)
[07:59:52] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 250 seconds)
[08:00:45] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[08:01:00] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[08:01:27] *** Joins: incertia (~incertia@207.98.176.40)
[08:01:28] <Axman6> just leave it out and the compiler will tell you what constraint isn't matched
[08:10:48] <zzz> i know i was just playing around
[08:12:34] *** Joins: mbuf (~Shakthi@110.225.224.187)
[08:14:58] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[08:16:21] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:21:47] <Axman6> Guest96: you should do this if you're are writing Haskell in Notepad++ https://community.notepad-plus-plus.org/topic/18041/tab-key-enters-spaces-instead-of-tab
[08:22:36] <zzz> anyone using hls in vim?
[08:22:38] <Axman6> uh, meant Guest24, who's now gone
[08:22:59] <Guest96> lmao, I was so confused
[08:24:23] <ephemient> zzz: there's also no reason for (_, _) => as (_) => can stand in for multiple constraints
[08:24:33] <CHUD> I have a module where we are learning haskell 
[08:24:39] <CHUD> can I hang out here?
[08:28:05] <sm> sure
[08:30:44] <Axman6> CHUD: you can even ask questions, but if they're homework, remember to tell us - we won't give you answers to the questions but will guide you so you learn the answers yourself
[08:33:32] <CHUD> Yeah, we just started this week so we haven't been set anything, I'm mainly looking for learning recommendations atm
[08:34:21] <ski> you've been suggested any textbook ?
[08:34:41] <CHUD> learnyouahaskell.com/
[08:34:46] * ski nods
[08:35:27] <jackdk> welcome aboard CHUD
[08:35:48] <ski> both beginner and more advanced questions are allowed in here. and both more practical and more theoretical. something the channel is more silent, sometimes more busy. sometimes multiple conversations are going on at the same time
[08:37:32] <ski> you're welcome to lurk around, and see what people talk about. perhaps you could learn some stuff from seeing some questions/problems that other people have (iow, if you feel like it, you don't have to join only when you want a question answered, and then leave directly after you've got an answer. it can pay off to stick around a bit more)
[08:39:03] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 256 seconds)
[08:39:06] <ski> LYAH has pretty pics. one problem though is that it doesn't have exercises
[08:39:51] <ski> (also, some people think that LYAH can be a bit confusing, that some other learning resources can be better)
[08:39:58] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:39:59] <ski> anyway, if you want to, you could also check out
[08:40:01] <ski> @where CIS194
[08:40:01] <lambdabot> https://www.seas.upenn.edu/~cis194/spring13/lectures.html
[08:40:02] <CHUD> Yeah I am looking for something like mooc.fi java but for haskell 
[08:40:09] <ski> which has exercises
[08:40:41] <oak-> Doesn't mooc.fi have Haskell? :P
[08:40:53] *** Joins: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr)
[08:40:58] *** Joins: nunggu (~q@user/nunggu)
[08:41:14] <oak-> https://haskell.mooc.fi/
[08:41:14] <CHUD> I don't think so, I only found python and some cyber sec. stuff 
[08:41:20] <CHUD> nvm
[08:41:30] <oak-> (I'm in Haskell Mooc's Telegram group)
[08:42:10] *** Joins: ksqsf (~user@210.45.76.145)
[08:42:33] *** Quits: ksqsf (~user@210.45.76.145) (Client Quit)
[08:42:51] <CHUD> cool, thanks for that 
[08:42:57] *** Joins: ksqsf (~user@2001:da8:d800:336:ecbe:7994:fa3f:f03c)
[08:43:01] <CHUD> have you completed the course?
[08:43:31] <oak-> No, the part one was a little too beginner course for me, I could check part two though
[08:44:00] <nunggu> what course? i want to learn haskell but i'm too lazy to read docs...
[08:44:20] <nunggu> oh, this one: https://haskell.mooc.fi/, right?
[08:44:25] <oak-> Yes
[08:46:08] <oak-> I have learned Haskell "the hard way" over the years, but I have read haskellbook.com and I have Real World Haskell as a physical copy. I'm currently reading Thinking with Types to learn more about type-level programming
[08:46:50] <CHUD> I don't want to end up in tutorial hell that's my main objective 
[08:47:01] <nunggu> i copied (from the web), pasted, edited xmonad.hs til it compiled. all without knowing how it supposed to work
[08:47:43] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:50:05] <oak-> What I still don't completely grasp is how to practically use Monad Transformer Stacks to structure a program. I've been using ReaderT Design Pattern combined with RIO to create software to run in production, also effect systems using free monads (such as polysemy) look interesting
[08:50:37] <jackdk> oak-: https://github.com/qfpl/applied-fp-course/blob/master/bonus/mtl.md may help
[08:51:24] <oak-> Thanks, I'll have to bookmark this for later
[08:51:42] <zzz> i don't like monad transformers
[08:52:41] <zzz> and feel the urge to announce it whenever someone mentions it
[08:52:46] <zzz> carry on
[08:52:50] <oak-> It could be still useful to understand them, to be able to read code written by others, which uses Monad Transformers
[08:52:53] <Axman6> do you have much experience using them?
[08:53:42] <zzz> no i don't
[08:53:54] <CHUD> I'm curious, as I ended up hear my accident after reading the IRC wiki page, how long you guys been on here for? do you prefer it over other channels or community platforms and why?
[08:53:54] <zzz> not at all
[08:53:59] <CHUD> here*
[08:54:30] <Axman6> being able to use MTL and have code which says things like foo (HasDatabase m, HasConfig m, HasLogging m) => m () is pretty useful, it makes it clear what effects something can use, and what it can't
[08:55:23] <Axman6> I've been here for like 13 years, IRC has always been the best medium for ad hoc help IMO. StackOverflow has no easy ability to have a conversation, and modern chat platforms are pretty awful with thousands of users
[08:55:36] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[08:55:40] <jackdk> I like that it's an open protocol, and I can connect with whatever client that pleases me. Modern chat platforms are too often proprietary silos.
[08:55:51] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[08:55:55] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[08:55:59] <oak-> And it is useful for mocks in testing as well (to have those Has-typeclasses)
[08:56:26] <Axman6> yeah, your code is decoupled from the implementation of those effects
[08:57:01] <Axman6> zzz: that's kinda like saying "I don't like rug making, no I have never even tried to make a rug". why would you hate something you don't understand?
[08:58:50] *** Joins: nunggu (~q@user/nunggu)
[09:00:00] <oak-> I'd say you actually start to learn monads when you get your hands dirty with them, and try to do stuff with monads
[09:00:58] *** Quits: nshepperd2 (~nshepperd@li364-218.members.linode.com) (Quit: Ping timeout (120 seconds))
[09:01:09] *** Joins: nshepperd2 (~nshepperd@li364-218.members.linode.com)
[09:01:44] <ski> CHUD : some twenty years
[09:01:45] <Axman6> It turns out that a lot of what you really need for real applications is ReaderT, which contains any config you need, connection objects, logging functions etc. but it can be nice to be able to talk about those separately
[09:02:19] <zzz> Axman6: your question was "do you have much experience using them?"
[09:02:47] <zzz> not "do you understand them?" or "have you ever used them?"
[09:02:54] <zzz> but i get your point
[09:03:30] <Axman6> I'm just curious why you even have the opinion that you don't like them
[09:04:11] <zzz> oh, that's personal taste. i don't advise against it
[09:04:31] <Axman6> what alternative do you perfer?
[09:04:57] <zzz> depends on the problem i'm trying to solve
[09:06:09] <zzz> i can't think of a case where you *need* monad transformers
[09:06:10] <CHUD> when using something like discord, people add too many channels and the conversation get's fragmented, it also stop people from posting because they think it's not active 
[09:07:16] <ski> (and yea, i like the spontaneity, but also the occasional conversation over larger spans of time. and the non-proprietaryness, openness to different clients, lack of built-in / blessed logging, lack of (in-line) images and other such nonsense, and (mostly) lack of emoji. (i believe that many of these contribute to particularities of IRC culture in a way that might not be completely evident). obviously we 
[09:07:17] <Axman6> people get confused by IRC by joining and not seeing anyone talk for five minutes - if you have a question, you just ask it, and if people are around they'll answer
[09:07:22] <ski> have our share of problems and drama as well, though)
[09:07:55] <Axman6> ðŸ’©
[09:07:57] *** Quits: joeyh_ (~joeyh@kitenet.net) (Ping timeout: 256 seconds)
[09:07:59] <zzz> ski: what's "blessed" logging?
[09:08:20] *** Joins: joeyh (joeyh@kitenet.net)
[09:08:25] <ksqsf> I was fond of monad transformers until I learned about MonadBaseControl
[09:08:39] <ski> like in Discord, it's built-in to the client. you can see backlog from before you joined. i think that's probably a bad idea
[09:08:46] <Axman6> MonadBaseControl is pretty horrible IMO
[09:09:17] <Axman6> Yeah, we talk crap about ski all the time when they're not here
[09:09:35] <ski> (makes people be more cautious with what they say, since someone else, who wasn't present, can later search through history and pick up some statement)
[09:09:38] * ski grins
[09:09:39] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 256 seconds)
[09:09:49] <Axman6> oh no
[09:10:10] <ski> (oh, also, i'm against "karma" and "like & dislike" systems ..)
[09:10:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:10:20] * ksqsf hesitates to point out this channel has public logging
[09:10:23] <zzz> ski +1
[09:10:27] * ski twitches
[09:10:42] <Axman6> oh no, my life is ruined
[09:11:06] <ski> ksqsf : yea, i'm full aware. but it's not an automatic default on all channels. and it's recommended on Libera to mention such a thing in channel topic on on-join notice
[09:11:09] <ephemient> zzz, well you don't "need" monads either. monad transformers are a tool with a certain set of trade-offs
[09:11:29] <zzz> ephemient: great point
[09:11:36] * ski hugs Axman6
[09:12:11] <zzz> the only annoying thing about irc is this actions nonsense
[09:12:19] <ski> hehe
[09:12:35] <jackdk> ski: good point about the lack of emoji and karma systems. I approve `:)`
[09:12:37] <Axman6> Thanks dude
[09:12:43] <jackdk> (emoticons are fine, IMHO)
[09:12:45] <ski> :)
[09:12:57] <ski> (yea, smileys are okay)
[09:13:00] <Axman6> :thinkingface:
[09:13:03] <ksqsf> (^_^)
[09:13:19] <Axman6> (à² _à² )
[09:13:22] <CHUD> https://becca.ooo/discord
[09:13:23] * ski glances around nervously
[09:13:55] <zzz> well, even emoticons are up to the client
[09:14:04] *** Joins: rusrushal13 (~rusrushal@2401:4900:5d31:3217:d016:3e1b:c176:62e9)
[09:14:07] <zzz> irc is encding agnostic
[09:14:09] <qrpnxz> ksqsf, what do you think of https://hackage.haskell.org/package/layers
[09:14:30] <qrpnxz> (asking because you mentioned MonadBaseControl)
[09:14:47] <glguy> agnostish, it support encodings that agree on what \0, \r, and \n mean
[09:14:53] <ksqsf> qrpnxz: never used that
[09:15:14] <oak-> I don't want to run IRC-client in a shell anymore, but luckily it is also possible to connect through Matrix bridge
[09:15:19] *** Quits: joeyh (joeyh@kitenet.net) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[09:15:31] <ksqsf> I still use mtl primarily, but a proper effect system will solve pretty much all the pain points
[09:15:33] <Axman6> every encoding should agree that \0 is a perfectly good character
[09:15:42] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[09:15:59] <ski> there's also GUI clients
[09:15:59] *** Joins: joeyh (~joeyh@kitenet.net)
[09:16:33] <glguy> or even better web clients
[09:16:43] <zzz> oak-: the libera-wide matrix bridge sucks
[09:16:55] * ski . o O ( "Team Chat" <https://xkcd.com/1782/> )
[09:17:04] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:17:19] <sm> I find it mostly works fine zzz
[09:17:25] <Axman6> glguy make the best client though
[09:17:28] <oak-> zzz: Why?
[09:17:31] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[09:17:48] * glguy high-fives Axman6
[09:17:57] <qrpnxz> i use an xmpp bridge
[09:18:01] <Axman6> it is frustrating when someone joins using matrix and doesn't realise it's actuall IRC, and then constantly edits their messages
[09:18:08] <CHUD> goodnight all 
[09:18:09] <qrpnxz> lol
[09:18:22] <ski> g'night, CHUD, have fun with your Haskell learning !
[09:18:29] <monochrom> Such revisionists.
[09:18:29] *** Quits: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9) (Ping timeout: 252 seconds)
[09:18:34] <Axman6> I feel like I've never had a "why IRC" conversation on IRC before...
[09:18:48] <CHUD> inception vibes 
[09:18:53] <ski> happens occasionally
[09:18:56] <zzz> glguy: trying out your client is in my todo list
[09:18:57] <Axman6> "WHy are we here?"
[09:19:11] *** Quits: CHUD (~CHUD@cpc142034-slou6-2-0-cust488.17-4.cable.virginm.net) (Remote host closed the connection)
[09:19:17] <glguy> Axman6: because we'd have to disconnect to not be here.
[09:19:22] <Axman6> glirc really is excellent, I moved from irssi and haven't looked back. I'd been using irssi for over a decade then
[09:19:38] <ksqsf> IRC is great, I don't have to spend time on picking the best profile icon
[09:19:41] <zzz> i'm using irssi
[09:20:24] <monochrom> I made the best profile icon ever. You can see it on my github profile, https://github.com/treblacy/
[09:20:25] <zzz> i've invested so much in configuring it. "i have it just the way i like it"
[09:20:28] *** Joins: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9)
[09:20:46] <Axman6> there's a couple of feature I miss but they're not a big deal... the only one that comes to mind is better support for split screens (I don't understand how glirc's work) - I used to always have a 20 line high split with just mentions in it
[09:20:54] <ski> (re absence of logging, it seems to me this contributes to (many, though not all) people (regulars) staying connected for longer period of times, and thus contributes to the common "lurk until someone says something interesting" pattern. also picking up threads and conversations from a while ago)
[09:21:18] <glguy> Axman6: glirc's split screen works like how I used xmonad
[09:21:23] <Axman6> ski: I like the lack of time pressure that brings
[09:21:26] <ksqsf> monochrom: nice gradient!
[09:21:28] <ski> yes
[09:21:36] <glguy> a column for a main window, and a column for the stuff I'm watching
[09:21:59] <glguy> (or optionally all in one column)
[09:22:27] <glguy> zzz: It's best for me, but not for everyone. You'll likely find you prefer irssi :)
[09:22:28] <Axman6> would love to know how to do that - I think I tried but couldn't figure out how to a) have a fixed size window with mentions/highlights, b) how to configure that in the config
[09:23:24] <ski> zzz : well, using Irssi, i've still only made very few customizations (i guess i've very lazy/tolerant/reluctant to cross the threshold to adding much such stuff)
[09:23:50] <Axman6> I definitely found glirc easier to configure than irssi
[09:24:34] <Axman6> Also, by default there's a highlight set up for the word glirc, so I know that every time I say glirc it highlights all the glirc users
[09:24:43] <zzz> oak-: it's a long list, but between dropped messages, not rare over a minute latency (up to 2 hours, i've experienced) and weird stuff like messages not being sent when not all matrix users in one channel can see eachother or something like that
[09:24:45] <Axman6> and that gived me warm, fuzzy feelings
[09:24:48] <Axman6> gives*
[09:25:16] *** Joins: glguy_ (x@libera/staff/glguy)
[09:25:19] <ski> hehe :)
[09:26:00] *** Quits: glguy_ (x@libera/staff/glguy) (Remote host closed the connection)
[09:26:13] <zzz> glguy: i don't know. the video really convinced me
[09:26:35] <zzz> i think you have a demo somewhere
[09:26:45] <oak-> I used glirc as a library when I experimented creating an IRC bot with Haskell :-P
[09:26:55] *** Quits: Guest96 (~Guest96@144-124-99-115.pip.aber.ac.uk) (Quit: Client closed)
[09:27:33] <jackdk> monochrom: On some sites I have a 1x1 transparent PNG as my avatar
[09:27:45] <jackdk> I approve of this gradient though, very tasteful
[09:27:48] <oak-> but generally I would recommend Weechat over Irssi based on my experience
[09:28:07] <ephemient> the "must stay connected to lurk" "feature" of IRC is more of a hindrance than a benefit IMO. IRC is only usable to me by working around that with a bouncer
[09:28:10] *** Quits: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0) (Quit: ZNC - http://znc.in)
[09:28:16] <glguy> super brief recording just now: https://asciinema.org/a/u2AJqyXz3z2cYAlBui84Danid - old video https://www.youtube.com/watch?v=taz0-hZwWP4
[09:29:07] <ski> fwiwi, "Why I no longer contribute to StackOverflow" by ttmrichter in 2013-12 at <https://web.archive.org/web/20140104210553/http://michael.richter.name/blogs/why-i-no-longer-contribute-to-stackoverflow/> talks a bit about artificial scoring systems ("gamification")
[09:29:10] <glguy> I should make a new demo video at some point
[09:30:14] <Axman6> showing splitting would be good :P
[09:30:39] <zzz> love asciinema
[09:30:59] <ski> ephemient : yes, but that means that it's people who care enough that have access to fuller logs, rather than just any random denizen of the internet
[09:31:08] *** Joins: glguy_ (x@libera/staff/glguy)
[09:31:25] <ephemient> s/care enough/have access to full-time computing power
[09:31:43] <ski> (but i agree there's both pros and cons. i suspect the pros of the lack overweight the cons)
[09:31:50] <ski> yea
[09:32:12] <Axman6> I just run glirc in tmux :\
[09:33:10] *** Quits: glguy_ (x@libera/staff/glguy) (Remote host closed the connection)
[09:34:10] <glguy> aw shoot. I made a perfectly good recording with splits; but I resized the terminal during it and that's not supported
[09:34:16] <ski> (i suspect that one reason for the perceived wealth of rudeness and hostility on systems like Twitter is due to its relative lack of localization into communities)
[09:34:35] *** Quits: deadmarshal (~deadmarsh@95.38.113.215) (Ping timeout: 256 seconds)
[09:34:38] <ski> (obviously there's also many other contributing factors)
[09:35:01] <zzz> glguy: you should clarify that's not supported *by asciinema*
[09:35:23] <zzz> ;)
[09:35:47] <ephemient> yeah. I think it's impossible to build a global community without shared mores, but at the same time global communication is incredibly usefulâ€¦
[09:35:59] * ski nods
[09:36:47] <zzz> this will eventually turn into a ruseeau vs hobbes discussin
[09:37:14] *** Quits: ph88 (~ph88@tmo-085-109.customers.d1-online.com) (Remote host closed the connection)
[09:37:31] *** Joins: ph88 (~ph88@2a01:598:d003:cd60:6db8:d93b:1b5e:cf50)
[09:37:37] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2da1:8e76:2324:a881) (Ping timeout: 240 seconds)
[09:37:43] <zzz> *rousseau *discussion
[09:37:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[09:38:07] <ski> would you like to elaborate ? :)
[09:38:12] <Axman6> I have no idea where most of you are, and it doesn't really matter
[09:38:50] <ski> (yea, localization doesn't have to be geographic)
[09:39:03] <monochrom> Hobbes argues that people should be ruled by tigers. Calvin argues that people should be ruled by kids.
[09:39:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[09:40:20] <Axman6> Both are correct
[09:40:34] <ski> tiger kittehs, then ?
[09:41:49] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:41:59] * ski . o O ( "fixed in teh HEAD" <https://lambdacats.github.io/fixed-in-head/> )
[09:42:10] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:42:18] <zzz> are people inherently bad and regulated by society, or the opposite? this is the usual simplified dicothomy. Hobbes however (usualy presented as the preponent of the "people are bad" theory) has a nuanced argument involving scale and such
[09:42:38] <zzz> iirc
[09:42:47] <zzz> long time since i read them
[09:43:29] <zzz> proponent? english is not my native language
[09:43:50] <ski> aye
[09:43:55] <ski> @wn proponent
[09:43:56] <lambdabot> *** "proponent" wn "WordNet (r) 3.0 (2006)"
[09:43:56] <lambdabot> proponent
[09:43:56] <lambdabot>     n 1: a person who pleads for a cause or propounds an idea [syn:
[09:43:56] <lambdabot>          {advocate}, {advocator}, {proponent}, {exponent}]
[09:44:14] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[09:48:08] <zzz> one thing i miss here is the ability to follow conversations easily
[09:49:14] <EvanR> lambdabot is like the starship enterprise or the tardis, what it can do is never fully fleshed out but if it would be appropriat suddenly it's possible
[09:49:20] <zzz> like sometimes i wish we would tag our messages with hashes corresponfing to the not-really-a-thread(s) we're replying to
[09:50:14] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[09:50:42] <zzz> -eb0c76- if you know what i mean
[09:51:14] <EvanR> chat... *it's not linear*
[09:51:39] <ski> it becomes a bit easier, with some practice
[09:52:09] <zzz> ski: what does?
[09:52:16] <zzz> oh, right
[09:52:29] <zzz> you forgot the -eb0c76-
[09:52:41] <zzz> i'm making it a thing
[09:52:49] <ski> > 0xeb0c76
[09:52:51] <lambdabot>  15404150
[09:53:14] *** Quits: ph88 (~ph88@2a01:598:d003:cd60:6db8:d93b:1b5e:cf50) (Remote host closed the connection)
[09:53:24] <zzz> no easter egg, just a random hash :p
[09:53:32] *** Joins: ph88 (~ph88@2a01:598:d003:cd60:6db8:d93b:1b5e:cf50)
[09:53:33] <EvanR> > sort (show 15404150)
[09:53:34] <lambdabot>  "00114455"
[09:53:38] <EvanR> > num it
[09:53:39] <lambdabot>  error:
[09:53:39] <lambdabot>      â€¢ Variable not in scope: num :: t0 -> t
[09:53:39] <lambdabot>      â€¢ Perhaps you meant one of these:
[09:53:45] <EvanR> > nub it
[09:53:47] <lambdabot>  error:
[09:53:47] <lambdabot>      â€¢ Variable not in scope: it :: [a]
[09:53:47] <lambdabot>      â€¢ Perhaps you meant one of these:
[09:53:49] <ski> doesn't look that random, to me .. :D
[09:54:15] *** Joins: cyphase (~cyphase@user/cyphase)
[09:54:27] <zzz> > nub $ show 0xeb0c76
[09:54:28] <lambdabot>  "1540"
[09:54:35] <ski> % :t it
[09:54:36] <yahb> ski: TypeRep
[09:56:02] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:56:02] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:56:02] *** Joins: wroathe (~wroathe@user/wroathe)
[09:56:18] *** Joins: michalz (~michalz@185.246.204.43)
[09:56:21] <EvanR> any time you enter a derelict haskell spaceship, first thing you check is the type and possibly value of `it'
[09:57:06] <ski> be careful not to bump any bottom
[09:57:43] <zzz> never evaluate foreign values
[09:58:14] <ski> unless they're Trustworthy
[09:58:48] <zzz> yeah right
[09:58:53] <EvanR> in let x = x in x, no one can hear you scream
[09:59:19] <EvanR> ok maybe that'd be a better setting for an event horizon reference
[09:59:31] <zzz> which reminds me this is the right place to ask:
[09:59:52] <zzz> :t let a = a in a
[09:59:52] <lambdabot> t
[10:00:00] <zzz> why is it t?
[10:00:13] <EvanR> :t undefined
[10:00:14] <lambdabot> a
[10:00:17] <EvanR> haha...
[10:00:24] <ephemient> could by any type variable
[10:00:40] <zzz> ephemient: as can a
[10:00:48] <zzz> undefined
[10:00:58] <ephemient> @src undefined
[10:00:58] <lambdabot> undefined = error "Prelude.undefined"
[10:01:08] <ephemient> :t error
[10:01:09] <lambdabot> [Char] -> a
[10:01:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:01:15] <ephemient> thus, a
[10:01:23] <zzz> ok
[10:01:36] <EvanR> :t fix id
[10:01:37] <lambdabot> a
[10:01:47] *** Quits: rusrushal13 (~rusrushal@2401:4900:5d31:3217:d016:3e1b:c176:62e9) (Ping timeout: 256 seconds)
[10:01:50] <zzz> EvanR: nice
[10:02:04] <ephemient> :t fix error
[10:02:05] <lambdabot> [Char]
[10:02:11] <zzz> :/
[10:02:13] <ephemient> ðŸ¤”
[10:02:33] <ski> @type let f (x:xs) ys = f xs (x:ys) in f
[10:02:33] <lambdabot> [a] -> [a] -> t
[10:03:16] <ski> result type is a singleton type variable, implies you've an infinite loop (or other bottom, like `error (...)')
[10:03:44] <zzz> ski +1
[10:04:06] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:04:43] <ski> (i guess a (bottom-up) merge sort, missing its base case, might be a better example)
[10:05:14] <ski> > fix error
[10:05:15] <lambdabot>  "*Exception: *Exception: *Exception: *Exception: *Exception: *Exception: *Ex...
[10:05:18] <ski> > fix show
[10:05:19] <lambdabot>  "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\...
[10:06:03] <monochrom> Yeah, https://perl.plover.com/classes/OOPSLA/samples/slide068.html
[10:07:06] *** Quits: incertia (~incertia@207.98.176.40) (Quit: ZNC 1.7.5 - https://znc.in)
[10:07:10] <ephemient> [] is a list of strings, so the second statement seems wrong </missing-the-point>
[10:07:26] *** Joins: deadmarshal (~deadmarsh@95.38.113.215)
[10:08:43] *** Quits: echoreply (~echoreply@45.32.163.16) (Quit: WeeChat 2.8)
[10:09:14] *** Joins: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[10:09:19] <EvanR> 4 slides later you are confronted with a giant image of a cockaroach
[10:09:39] <EvanR> I command W so fast I never really understood the context of that page
[10:10:01] <zzz> Programming in Haskell is pleasant
[10:10:01] <zzz> No type declarationsâ€”everything is automatic
[10:10:01] <zzz> You get quite a few type errors (darn!)
[10:10:01] <zzz> But every error indicates a real, serious problem
[10:10:04] <zzz> Not like lint or C or Pascal.
[10:10:14] <zzz> ^ monochrom: lol
[10:10:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:10:46] <EvanR> not sure about you guys but I'm so bad ass I disable all the warnings and errors in haskell, I know what I'm doing
[10:11:18] <monochrom> Sometimes a type error indicates a typo, like int vs Int. Not sure if it's a real serious problem.
[10:12:01] <EvanR> a significant chunk of my errors are like that
[10:12:10] *** Quits: deadmarshal (~deadmarsh@95.38.113.215) (Ping timeout: 256 seconds)
[10:12:30] <EvanR> if this was HTML we wouldn't be bogged down by such
[10:12:33] <ephemient> ghc -fdeferred-type-errors -- yolo
[10:13:40] <zzz> pfft, i just write `main = main` and call it a day
[10:14:06] *** Joins: deadmarshal (~deadmarsh@95.38.113.215)
[10:14:21] <EvanR> deriving BonanzaProfitMMORPG
[10:14:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[10:15:10] <zzz> interestingly, main = main typechecks...
[10:15:15] <EvanR> (I mean, it can't be that hard to get a formula for that)
[10:15:24] <ski> (why wouldn't it ?)
[10:15:39] <EvanR> how could it not*
[10:15:56] <ephemient> yeah, it would be more surprising if it *didn't* typecheck
[10:16:06] <zzz> main is supposed to be IO a
[10:16:18] <zzz> main = pure 7 doesn't
[10:16:21] <monochrom> HM type inference works in mysterious ways...
[10:16:22] <ski> @type let main :: IO a; main = main in main
[10:16:23] <lambdabot> IO a
[10:16:56] <ephemient> @type let main :: a; main = main in main :: IO ()
[10:16:57] <monochrom> main = pure 7 is fine.
[10:16:57] <lambdabot> IO ()
[10:16:59] <ski> @type let main :: IO Integer; main = pure 7 in main  -- this also works
[10:17:00] <lambdabot> IO Integer
[10:17:09] <ski> (at the top-level, i mean)
[10:17:17] <ephemient> as long as there's some way to have main :: IO (), it's fine
[10:17:18] <zzz> you are right
[10:17:34] <EvanR> main = main has any type you want
[10:17:35] <ski> the result value is discarded. it doesn't have to have type `()'
[10:17:52] <monochrom> No you don't need ().
[10:18:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[10:19:49] *** Quits: forell (~forell@user/forell) (Ping timeout: 240 seconds)
[10:20:39] <zzz> <<loop>>
[10:21:37] *** Quits: xff0x (~xff0x@2001:1a81:52b8:8500:a7fd:d6d9:518c:9835) (Ping timeout: 240 seconds)
[10:22:41] *** Joins: xff0x (~xff0x@2001:1a81:52b8:8500:bb40:636:eb26:d15a)
[10:22:42] *** Joins: forell (~forell@user/forell)
[10:28:30] <zzz> monochrom: written in slide 65:
[10:28:31] <zzz> We could put in a list of Integer and get out a list of String
[10:28:32] <zzz> Which is impossible
[10:28:41] <zzz> "
[10:28:58] <zzz> well, it's not impossible, is it?
[10:29:02] <ski> (at least if it's actually sorting ..)
[10:31:27] <zzz> the problem with (Ord t) => [t] -> [a] is the forall a.
[10:31:32] <zzz> right?
[10:32:09] <ski> not sure what you mean
[10:33:06] <ski> it is an issue that the input element type is unrelated to the output element type
[10:34:15] <zzz> well, you could replace a with any type and it would be fine
[10:34:32] *** Parts: faustind (~faustin@M014008067225.v4.enabler.ne.jp) ()
[10:36:12] <zzz> you can even just constraint, depending on the constraint
[10:37:12] <zzz> if all ts are sorted, return minBound, otherwise maxBound
[10:38:03] <ski> yea
[10:38:27] <ski> (although the latter does require an additional `Bounded a' constraint)
[10:38:41] <zzz> sure
[10:39:55] <ephemient> :t zipWith fst [0..] -- this is a function whose output element type has no relation to the input element type, but still does something (potentially) useful
[10:39:56] <lambdabot> (Num (b1 -> c, b2), Enum (b1 -> c, b2)) => [b1] -> [c]
[10:40:12] <ephemient> actually did I write that wrong, the type doesn't look like I expect
[10:40:17] *** Quits: forell (~forell@user/forell) (Ping timeout: 240 seconds)
[10:40:20] <ski> `const' ?
[10:40:28] <ephemient> oh yeah
[10:40:42] <ephemient> :t zipWith const [0..]
[10:40:43] <lambdabot> (Num c, Enum c) => [b] -> [c]
[10:40:56] * ski nods
[10:41:05] <ephemient> so it's not like it's totally unreasonableâ€¦ it just doesn't make sense for sort
[10:42:38] *** Quits: razetime (~quassel@49.207.203.87) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[10:43:38] <zzz> as long as you have constraints on the output type
[10:45:28] <zzz> my point is that no function can introduce a new unconstrained type variable on the output type
[10:46:04] <ski> well, the empty list has type `[a]', for any `a'
[10:46:47] <zzz> touche
[10:47:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:48:17] *** Joins: mud (~mud@user/kadoban)
[10:48:43] <zzz> :t const Nothing
[10:48:44] <lambdabot> b -> Maybe a
[10:50:29] *** Quits: nshepperd2 (~nshepperd@li364-218.members.linode.com) (Read error: Connection reset by peer)
[10:50:30] *** Joins: dumptruckman_ (~dumptruck@45-79-173-88.ip.linodeusercontent.com)
[10:50:35] *** Quits: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com) (Ping timeout: 250 seconds)
[10:50:41] *** dumptruckman_ is now known as dumptruckman
[10:50:51] <ksqsf> I just created a lambdacats sticker pack for Telegram users :-p
[10:50:57] <ksqsf> https://t.me/addstickers/lambdacats
[10:51:05] *** Quits: edr (~edr@user/edr) (Ping timeout: 256 seconds)
[10:51:28] *** Quits: deadmarshal (~deadmarsh@95.38.113.215) (Ping timeout: 250 seconds)
[10:51:31] *** Joins: nshepperd2 (~nshepperd@li364-218.members.linode.com)
[10:51:47] *** Joins: edr (~edr@enlo.co)
[10:51:47] *** Quits: edr (~edr@enlo.co) (Changing host)
[10:51:47] *** Joins: edr (~edr@user/edr)
[10:51:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[10:52:29] *** Joins: _ht (~quassel@82-168-34-160.fixed.kpn.net)
[10:56:06] *** Quits: nineonine (~nineonine@2604:3d08:7780:cd00:e983:291a:d390:4809) (Remote host closed the connection)
[10:56:30] *** Joins: notzmv (~zmv@user/notzmv)
[10:58:52] *** Joins: yauhsien_ (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[11:01:00] *** Quits: ksqsf (~user@2001:da8:d800:336:ecbe:7994:fa3f:f03c) (Ping timeout: 250 seconds)
[11:06:31] *** Joins: deadmarshal (~deadmarsh@95.38.113.215)
[11:06:37] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[11:07:08] *** Joins: cheater (~Username@user/cheater)
[11:12:04] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[11:12:37] *** Quits: slac83129 (~slack1256@186.11.27.69) (Ping timeout: 240 seconds)
[11:14:44] *** Quits: ph88 (~ph88@2a01:598:d003:cd60:6db8:d93b:1b5e:cf50) (Remote host closed the connection)
[11:15:02] *** Joins: ph88 (~ph88@2a01:598:d003:cd60:6db8:d93b:1b5e:cf50)
[11:15:04] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:315f:3454:b0d8:112e)
[11:17:09] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[11:19:44] *** Quits: ph88 (~ph88@2a01:598:d003:cd60:6db8:d93b:1b5e:cf50) (Remote host closed the connection)
[11:20:02] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 268 seconds)
[11:20:02] *** Joins: ph88 (~ph88@2a01:598:d003:cd60:6db8:d93b:1b5e:cf50)
[11:20:28] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:23:39] *** Joins: forell (~forell@user/forell)
[11:24:55] *** Joins: cyphase (~cyphase@user/cyphase)
[11:26:05] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:ba7b:1b5c:238c:4447)
[11:29:51] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[11:31:30] *** Quits: deadmarshal (~deadmarsh@95.38.113.215) (Ping timeout: 256 seconds)
[11:36:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:37:18] *** Joins: fendor (~fendor@178.165.192.6.wireless.dyn.drei.com)
[11:37:29] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:38:31] *** Joins: alp (~alp@user/alp)
[11:38:42] *** Quits: polyphem (~rod@2a02:810d:840:8754:b6f3:5141:3b3:83de) (Ping timeout: 250 seconds)
[11:39:01] *** Quits: mbuf (~Shakthi@110.225.224.187) (Quit: Leaving)
[11:39:02] *** Joins: deadmarshal (~deadmarsh@95.38.113.215)
[11:39:56] *** Joins: ksqsf (~user@2001:da8:d800:336:807c:6844:3aff:5291)
[11:40:45] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:41:42] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[11:43:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:45:55] *** Joins: Major_Biscuit (~MajorBisc@c-001-024-001.client.tudelft.eduvpn.nl)
[11:48:45] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[11:48:57] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 240 seconds)
[11:49:50] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:53:52] *** Joins: vpan (~0@212.117.1.172)
[11:55:34] *** Joins: cfricke (~cfricke@user/cfricke)
[11:55:50] *** Joins: polyphem (~rod@2a02:810d:840:8754:b6f3:5141:3b3:83de)
[11:55:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[11:56:49] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:56:49] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:56:49] *** Joins: wroathe (~wroathe@user/wroathe)
[12:00:20] *** Joins: dsrt^ (~dsrt@207.182.73.202)
[12:01:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:03:58] *** Quits: nshepperd2 (~nshepperd@li364-218.members.linode.com) (Quit: Ping timeout (120 seconds))
[12:04:58] *** Quits: joeyh (~joeyh@kitenet.net) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[12:05:10] *** Joins: joeyh (joeyh@kitenet.net)
[12:06:13] *** Quits: tomjaguarpaw (~tom@li367-225.members.linode.com) (Ping timeout: 240 seconds)
[12:07:17] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[12:07:35] *** Quits: tureba (~tureba@tureba.org) (Ping timeout: 256 seconds)
[12:14:48] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:16:35] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[12:17:19] *** Joins: tomjaguarpaw (~tom@li367-225.members.linode.com)
[12:18:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f) (Remote host closed the connection)
[12:19:34] *** Joins: kuribas (~user@ptr-25vy0i8mxo9em8d53n7.18120a2.ip6.access.telenet.be)
[12:19:55] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[12:19:59] *** Joins: tureba (~tureba@tureba.org)
[12:20:21] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[12:20:45] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:20:53] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[12:21:24] *** Joins: nshepperd2 (~nshepperd@li364-218.members.linode.com)
[12:22:28] *** Quits: yauhsien_ (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:22:58] *** Joins: Guest5225 (~Guest52@80-100-97-100.ip.xs4all.nl)
[12:24:43] *** Joins: yauhsien_ (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[12:27:30] *** Quits: ph88 (~ph88@2a01:598:d003:cd60:6db8:d93b:1b5e:cf50) (Read error: Connection reset by peer)
[12:27:52] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:e821:f261:3387:e512)
[12:29:41] *** Quits: yauhsien_ (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[12:30:21] *** Quits: phma (phma@2001:5b0:212a:d158:6462:9429:37ae:1dd1) (Read error: Connection reset by peer)
[12:31:14] *** Joins: phma (phma@2001:5b0:211b:b1e8:ef4c:8052:a169:f66a)
[12:33:38] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[12:33:50] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:36:14] *** Joins: mmhat (~mmh@55d4fecc.access.ecotel.net)
[12:36:38] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:36:40] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[12:46:22] *** Quits: andjjj23_ (~irc@107.170.228.47) (Ping timeout: 268 seconds)
[12:47:01] *** Quits: c_wraith (~c_wraith@adjoint.us) (Ping timeout: 240 seconds)
[12:47:15] *** Quits: fluxit (~fluxit@techsmix.net) (Ping timeout: 256 seconds)
[12:47:15] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (Ping timeout: 256 seconds)
[12:47:15] *** Quits: meejah (~meejah@rutas.meejah.ca) (Ping timeout: 256 seconds)
[12:47:44] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:44] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:47] *** allbery_b is now known as geekosaur
[12:48:18] *** Joins: yauhsien_ (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[12:48:47] *** Joins: meejah (~meejah@rutas.meejah.ca)
[12:48:55] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[12:52:01] *** Joins: fluxit (~fluxit@techsmix.net)
[12:52:24] *** Joins: c_wraith (~c_wraith@adjoint.us)
[12:55:57] *** Quits: noctux (~noctux@user/noctux) (Read error: Connection reset by peer)
[12:56:47] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[12:58:19] *** Quits: mud (~mud@user/kadoban) (Remote host closed the connection)
[12:58:45] *** Joins: mud (~mud@user/kadoban)
[12:59:55] *** Quits: yauhsien_ (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:00:41] *** Joins: yauhsien_ (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[13:00:57] *** Quits: fluxit (~fluxit@techsmix.net) (Ping timeout: 240 seconds)
[13:01:02] *** Quits: c_wraith (~c_wraith@adjoint.us) (Ping timeout: 256 seconds)
[13:01:42] *** Joins: andjjj23_ (~irc@107.170.228.47)
[13:01:49] *** Joins: c_wraith (~c_wraith@adjoint.us)
[13:02:40] *** Joins: nsilv-phone (~nsilv-pho@host-213-45-115-140.pool21345.interbusiness.it)
[13:02:46] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[13:02:49] *** Quits: nsilv-phone (~nsilv-pho@host-213-45-115-140.pool21345.interbusiness.it) (Client Quit)
[13:03:43] *** Joins: fluxit (~fluxit@techsmix.net)
[13:04:27] *** Joins: ubert1 (~Thunderbi@p200300ecdf09943ef05cebfd8a506150.dip0.t-ipconnect.de)
[13:04:34] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[13:05:43] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[13:05:48] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[13:06:16] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[13:10:08] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 250 seconds)
[13:12:36] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:12:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:12:36] *** Joins: wroathe (~wroathe@user/wroathe)
[13:13:41] *** Joins: noctux (~noctux@user/noctux)
[13:15:03] *** Quits: yauhsien_ (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:16:38] *** Quits: tomjaguarpaw (~tom@li367-225.members.linode.com) (Ping timeout: 250 seconds)
[13:16:45] *** Joins: tomjaguarpaw (~tom@li367-225.members.linode.com)
[13:17:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[13:19:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f)
[13:22:32] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:315f:3454:b0d8:112e) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:23:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f) (Ping timeout: 240 seconds)
[13:23:37] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 240 seconds)
[13:28:37] *** Quits: c_wraith (~c_wraith@adjoint.us) (Ping timeout: 256 seconds)
[13:28:37] *** Quits: xff0x (~xff0x@2001:1a81:52b8:8500:bb40:636:eb26:d15a) (Ping timeout: 240 seconds)
[13:28:48] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (Ping timeout: 256 seconds)
[13:29:52] *** Joins: xff0x (~xff0x@2001:1a81:52b8:8500:6c95:ecd6:fb54:75ad)
[13:30:30] *** Quits: vglfr (~vglfr@88.155.98.86) (Ping timeout: 256 seconds)
[13:31:31] *** Joins: vglfr (~vglfr@46.96.174.179)
[13:31:58] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:81fd:e333:1e93:e27e)
[13:32:31] *** Quits: ksqsf (~user@2001:da8:d800:336:807c:6844:3aff:5291) (Remote host closed the connection)
[13:33:15] *** Joins: c_wraith (~c_wraith@adjoint.us)
[13:33:54] *** Quits: meejah (~meejah@rutas.meejah.ca) (Ping timeout: 256 seconds)
[13:33:57] *** Quits: fluxit (~fluxit@techsmix.net) (Ping timeout: 240 seconds)
[13:39:00] *** Quits: andjjj23_ (~irc@107.170.228.47) (Ping timeout: 256 seconds)
[13:39:36] *** Quits: c_wraith (~c_wraith@adjoint.us) (Ping timeout: 250 seconds)
[13:40:14] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[13:41:05] *** Quits: deadmarshal (~deadmarsh@95.38.113.215) (Ping timeout: 256 seconds)
[13:43:42] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:44:18] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[13:51:30] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b4f2:7b49:1758:11bf)
[13:52:19] *** Joins: andjjj23_ (~irc@107.170.228.47)
[13:52:57] *** Joins: fluxit (~fluxit@techsmix.net)
[13:53:04] *** Joins: c_wraith (~c_wraith@adjoint.us)
[13:53:14] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[13:55:26] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[13:56:57] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[13:57:44] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[13:57:49] <romesrf> hey everyone
[13:58:03] <romesrf> in type UniqResult result = (# result, UniqSupply #), what are the ### called?
[13:58:07] *** Joins: meejah (~meejah@rutas.meejah.ca)
[13:58:19] <ski> that's an unboxed tuple type
[13:58:25] <romesrf> thank you :)
[13:59:06] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 250 seconds)
[13:59:34] *** Joins: __monty__ (~toonn@user/toonn)
[14:01:09] *** Joins: mgd (~mgd@85.210.231.115)
[14:08:27] *** Joins: vysn (~vysn@user/vysn)
[14:09:28] *** Joins: mechano (~mechano@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[14:10:27] <mechano> how do lexers and parsers work? is that some kind of formal methods thing, since its like language design?
[14:11:16] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:b4f2:7b49:1758:11bf) (Quit: Textual IRC Client: www.textualapp.com)
[14:11:51] <mechano> there must be some kind of low dimensional space somewhere, and that the language design must somehow target that
[14:12:45] *** Joins: deadmarshal (~deadmarsh@95.38.113.215)
[14:13:31] <mechano> i was thinking of an example like describing rhythms, where repetition and variation instructions are normally given. basically this gives a language to produce binary sequences, and i was wondering how this compared to a proper programming language.
[14:14:01] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:14:04] <__monty__> It's more a mechanical recognizing of character sequences.
[14:14:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:15:18] *** Lord_of_Life_ is now known as Lord_of_Life
[14:15:48] <mechano> here the low dimensional space is that rhythms are something to do with how the brain expects a repeated sound, because of how it processes vocal tones (im guessing) - and that this gives the language, which people have somehow naturally determined...
[14:16:02] <[exa]> mechano: lexers and parsers are usually formalized as programs that compute matches to regular and context-free languages
[14:16:10] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[14:16:30] <[exa]> mechano: rhytms are much more lattice-like and the definition is waaaaaaaaaaaaaay softer
[14:16:33] <mechano> [exa] its just like an encoder and a decoder right? like, an autoencoder...
[14:16:48] <[exa]> not really
[14:17:02] <mechano> its different because its streaming?
[14:17:38] <mechano> [exa]: no? i thought it was just a basis rotation...
[14:17:38] <[exa]> I wouldn't use neural network methodology to describe the parsing, although you can technically "wire" the regular parsers and limited-depth context-free parsers to neural networks
[14:18:11] *** Parts: mgd (~mgd@85.210.231.115) ()
[14:18:36] <mechano> sure, there is some mismatch between the soft classifiers and the binary case
[14:19:14] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[14:19:30] <mechano> i guess the main differernce is that a language isnt a black box parametric model, and that all of the design variables are comprehensible
[14:20:01] <[exa]> also NNs are tremendously inefficient compared to parsers that you can automatically define from a formal language spec (regex/automaton, CF grammar, ...)
[14:20:14] <[exa]> yeah, no blackboxes
[14:20:40] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Remote host closed the connection)
[14:21:00] <mechano> so this spec is giving a test case, that arbitrary implementation can be shown equivalent under?
[14:21:03] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[14:21:18] <mechano> ok, i guess i should speak in terms of language specifications then
[14:21:22] <[exa]> let's continue in #haskell-offtopic, can we? this is getting offtopic :D
[14:21:37] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[14:21:41] <mechano> where does the formal methods part end, i dont want to stray offtopic
[14:22:07] <[exa]> like, this is getting to automata & grammar theory which is kinda offtopic anyway :D
[14:22:16] <[exa]> no big worries I guess tho
[14:22:49] <[exa]> the point is that spec is not giving a test case, it is a complete, always decidable specification of what is in a language and what isn't
[14:23:08] <mechano> so how does haskell fit in to all this? i mean, i was just using a simple example to try to understand how an actual language can be described
[14:23:36] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[14:23:54] <[exa]> haskell has a quite complicated context-free grammar, you might find the "specifications" in GHC source, likely as alex/happy parser source code
[14:24:26] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[14:25:37] <[exa]> https://github.com/ghc/ghc/blob/master/compiler/GHC/Parser/Lexer.x eg here
[14:25:46] <mechano> im struggling to get the difference between a basis transformation, eg a matrix in linear algebra, and the compilation and program writing process as a kind of similar bijection. is the specification fulfilling the same role as the matrix parameters?
[14:26:34] <[exa]> the difference is that compiling program by basis transoformation is theoretically possible but a total madness to do correctly
[14:26:37] <mechano> [exa] wait, why does haskell use happy & alex? what are those, how do they work here?
[14:27:13] <ephemient> alex : happy :: lex : yacc
[14:27:54] <mechano> ephemient: im not sure what that means
[14:27:56] <[exa]> mechano: are you aware of the finite-state machine theory, pushdown automata, etc?
[14:28:09] <mechano> im guessing that the parser has some state
[14:28:24] <mechano> during a fold that consumes the program string
[14:28:45] <ephemient> alex is to happy as lex is to yacc. lex and yacc are well-known lexers and parser generators in old-school compilers, alex and happy fulfill similar roles in Haskell
[14:28:46] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[14:29:07] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[14:29:11] <mechano> and undergoes a state action that is the "automata" update
[14:29:23] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[14:29:44] <[exa]> mechano: yep. you can encode that to linear algebra but it gets unwieldy
[14:31:16] <mechano> im guessing the problem is that there is a large number of discrete values, and you would need an orthogonal vector for each, but i can almost see how that might end up as a matrix!
[14:31:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[14:31:56] <mechano> i dont like trying to understand the vector space version of logic..
[14:32:12] <mechano> id rather just think of it as a bijection
[14:32:46] <[exa]> yeah, given e.g. a DFA you can work in Z(2) with 1-bit representation of the state, and each letter causes multiplication by a matrix that describes all transitions caused by the letter
[14:32:57] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[14:33:05] <[exa]> and you accept if there's '1' in the expected finishing states
[14:33:06] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[14:33:15] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[14:33:22] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[14:33:25] <mechano> ephemient: so alex is a lexer? and happy is a parser?
[14:33:31] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[14:34:03] <[exa]> normal parser state machines have "stacks" (ie. infinite memory) which is impossible to do easily, but you can convert limited-depth stack machine to DFAs and go the same way
[14:34:23] <[exa]> ending up with matrices like 10000000x10000000 for parsing haskell
[14:34:41] <ephemient> a parser generator. you give it a grammar and it spits out Haskell code
[14:34:43] <mechano> ah, right, part of this was supposed to be to do with brevity
[14:35:25] <[exa]> (I'm assuming there are no shenanigans (there are) and no lookahead)
[14:35:26] <mechano> like, a good language would somehow be effecient, somehow using the shape of the low dimensional space "good programs" inhabit
[14:35:57] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[14:36:24] <[exa]> I don't want to see the size of the matrix that would be needed to represent the whole program transformations done by even a relatively tiny compiler, such as tcc
[14:36:29] <mechano> ephemient: sounds more like a lexer that outputs parser, which seems confusing
[14:36:31] <[exa]> you won't fit it on earth IMO
[14:36:56] <mechano> so how does the compiler end up being so elegant?
[14:37:06] <mechano> is that because its a good language?
[14:37:22] <[exa]> it avoids expressing problems in inefficient ways
[14:37:27] <mechano> or because its written in a good language? im still slightly confused about the stages ere
[14:37:32] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[14:37:56] <[exa]> linear algebra is simply not an efficient way to work with complicated exact language structures and ASTs.
[14:37:57] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[14:38:32] <mechano> something to do with them being consumed in an ordered way?
[14:38:54] <[exa]> same with neural nets, you can express the learning task as precise boolean logic problem, but no one does that because the complexity of doing it that way would be completely hopeless
[14:39:02] <mechano> you only get left to right determinism then... but i cant see that being responsible for the most part of the savings
[14:39:50] <mechano> i think im missing something about what makes a good language, or a good program, or something
[14:40:15] <[exa]> did you do any computational complexity theory?
[14:40:16] <mechano> seems like theres something to do with compiler complexity, ie not just a big matrix
[14:40:34] <[exa]> inverting compilers is NP
[14:40:37] <mechano> [exa] i never heard of it, so im guessing not, but the ideas are probably familiar
[14:40:57] <[exa]> (ok maybe much harder than NP)
[14:41:08] <mechano> [exa] thats basically impossibly hard, iiuc
[14:41:53] <[exa]> yeah it very easily belongs to some class of problems that you just can't expect to solve in humane times
[14:41:53] <mechano> so you need to use the spec to give the lexer and parser (compiler), and not try to infer the spec from the compiler? is that what your saying?
[14:42:19] <[exa]> lexer and parser _are_ the compiler
[14:42:24] <mechano> how is that to do with what makes a good language?
[14:42:32] <[exa]> nothing honestly
[14:42:40] <mechano> wait, i thought the compiler was just a parser, and that the programmer was the lexer
[14:42:41] <[exa]> people choose whatever language they like
[14:42:41] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[14:42:57] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[14:43:02] <[exa]> anyway we're now seriously offtopic :D
[14:43:02] <mechano> im not sure why you were mentioning inverting compilers
[14:43:22] <[exa]> you wanted a bijection right?
[14:43:37] <mechano> i guess ill never understand how haskell was an eloquent bijection
[14:43:46] <[exa]> because it's not
[14:44:25] <mechano> but it describes the format targeted by the programmer and compiler
[14:44:46] <mechano> which seem to be the transformation and its inverse
[14:44:55] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[14:45:31] <mechano> yeah, at this point ill accept im not going to understand which parts of this are ontopic and just give up!
[14:45:34] <mechano> but thanks
[14:45:49] <[exa]> the "seem to be" there is too vague honestly. :D
[14:46:07] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[14:46:13] <mechano> well im not sure, so...
[14:48:19] <mechano> all i was trying to say is that haskell must somehow compress program size, by being a "good" language
[14:48:27] <[exa]> like, maybe we're just talking different languages now; check out some of the formal material on compilers, and some of the complexity theory (where these representation transformations are quite common) I guess you might find an answer there
[14:48:42] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[14:48:46] <[exa]> ah, you meant "expressive"
[14:49:01] <mechano> oh is that what that means!?
[14:49:09] <[exa]> that is also double sided, check out APL. :D
[14:49:49] <mechano> this? https://en.wikipedia.org/wiki/APL_(programming_language)
[14:49:54] <mechano> what am i looking for?
[14:49:57] <[exa]> anyway there is no good metric on how to measure this AFAIK, especially not with bijections and linear algebra because the "expansion" process is just wicked complex
[14:50:24] <[exa]> yeah that was my anti-example to "compress program size"
[14:50:45] <mechano> i guess trying to understand what makes a language good would be like trying to understand the "most common shaped programs" or something
[14:51:14] <[exa]> Haskell does the expansion basically by embedding a few layers of extra logic above the actual program logic and programmer may exploit these to do complicated stuff in the lower layers quickly
[14:51:15] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[14:51:47] <mechano> like how i can say that describing drumbeats as repititions and variations is a good idea, because most of the common patterns inhabit the small space where repetition and variation are used a lot, and those kind of instructions allow lots of data to be generated from short statements
[14:51:59] <[exa]> ah, that doesn't work on programs
[14:52:29] <[exa]> similarity of programs as a metric is completely impossible to do right, because the interpretation is binary
[14:53:00] <[exa]> (see e.g. rice's theorem)
[14:53:09] <mechano> but like, many programs are recursive. i guess that gets a whole bunch
[14:53:22] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[14:53:27] <mechano> i think i could be wrongly thinking in terms of higher order programs though
[14:53:29] <[exa]> s/binary/complicated and totally not smooth/
[14:54:34] <mechano> that sounds like Russels paradox almost...
[14:54:38] <[exa]> anyway re drum patterns, these have some representation in grammars as well (there might be nice papers on that), but the interpretation there is completely different
[14:54:49] <mechano> how so?
[14:54:56] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[14:54:58] <johnjaye> what's the correct way to update cabal to 3.0+?
[14:55:06] <[exa]> no one really knows how brains listen to that
[14:55:08] <mechano> because its just a binary sequence?
[14:55:19] <johnjaye> this ubuntu pc apparently only has 2.x in the repos
[14:55:21] <[exa]> johnjaye: I just downloaded the new cabal binary and put it in $PATH...
[14:55:39] <johnjaye> from like the git release page or?
[14:55:51] <[exa]> johnjaye: chances are you might be better off with a ghc+cabal installed by `ghcup` instead of the ones from ubuntu/debian repositories
[14:56:10] <__monty__> [exa]: Isn't Haskell's layout grammar actually case-sensitive?
[14:56:17] *** Joins: incertia (~incertia@24.42.229.53)
[14:56:20] <__monty__> Not case, context >.<
[14:56:27] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[14:56:42] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[14:56:59] <johnjaye> do i need to update cabal? it gave me a message about v1/v2 deprecation but
[14:57:05] <mechano> [exa] yeah, well, i think the *main thing* is this idea of addaptive classfiers that become context aware, becoming sensitized by recent observations. basically you end up with some idea of "knowing what to expect" and this entering into the classification process. hence repitition in music is a kind of neuroscientifically understandable phenomina.
[14:57:05] <mechano> (now *thats* offtopic!)
[14:57:10] <johnjaye> it seems it's updating
[14:57:10] <[exa]> johnjaye: the repository ones are kept for compatibility and ubuntu, for development it's better to just install your own :]
[14:57:25] <johnjaye> ok
[14:58:02] <[exa]> johnjaye: anyway the v2 should be okay for some time, you might be able to find v3.x in .deb somewhere (I guess debian testing/unstable repos?), but generally I'd really recommend to just remove system cabal+ghc and go with ghcup
[14:58:04] <johnjaye> specifically i tried to run ministg and got the error [__1] unknown package: monads-tf (dependency of ministg)
[14:58:46] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:58:53] <mechano> the point being just that repitition & variation as a grammer for drumpattens is kind of rationalizable. but i still cant understand how that idea carries over to haskell, about what programs we can expect, and how this governs the language we end up using
[14:59:36] *** Joins: sheb (~sheb@31.223.228.71)
[14:59:43] <mechano> but i suppose most languages dont even have functions as first class citizens, so i guess they are way behind
[14:59:56] <mechano> i wonder how impactful all of this stuff is
[15:00:04] <mechano> Â /important
[15:00:04] <[exa]> mechano: spoiler: the idea doesn't really carry easily to haskell. If you are trying to determine how humans perceive the haskell programs and why it is nice for them, you'll need to go super deep to neuroscience and you might have like 20 years of work to do, likely getting 2 or 3 PhDs in the process :D
[15:00:33] <mechano> huh, then i might be able to describe it nicely
[15:01:00] <mechano> without resorting to category theoretic string theory constructions!
[15:01:14] <mechano> *muhaha* - ok im offski
[15:01:17] <[exa]> there might be some work done on that topic, try going to scholar.google.com and find a few papers
[15:01:21] *** Quits: mechano (~mechano@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Connection closed)
[15:01:58] <[exa]> johnjaye: `cabal update` didn't fix that? (that downloads a new database of packages)
[15:02:00] <johnjaye> er... so ghcup just downloads binaries?
[15:02:06] <johnjaye> [exa]: correct
[15:02:33] <johnjaye> it printed Downloading the latest package list from hackage.haskell.org then returned
[15:03:06] <[exa]> if it still fails then, I'd expect some realistic versioning problems that might be fixed with newer cabal, but I don't know much of the packages, really guessing now
[15:03:31] <[exa]> ghcup is kinda like rustup, it downloads you a working environment, puts everything in the $PATH right, and provides an easy tool to get newer versions of the tools
[15:03:42] <johnjaye> you know as much as i do.
[15:03:44] <johnjaye> https://hackage.haskell.org/package/ministg
[15:04:41] <[exa]> perhaps try to pastebin the whole error message
[15:04:51] <[exa]> someone here could recognize the problem
[15:05:02] * [exa] -> afk
[15:05:13] <johnjaye> https://bpa.st/4BMQ
[15:05:19] <johnjaye> yup thanks
[15:05:34] <johnjaye> this is ubuntu 20.04 so i'm surprised it's that out of date sof ast
[15:06:57] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[15:10:42] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[15:10:48] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[15:11:33] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:11:52] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[15:12:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:12:53] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[15:14:11] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[15:17:57] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[15:18:09] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:19:48] *** Joins: fef (~thedawn@user/thedawn)
[15:22:56] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[15:23:36] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[15:24:18] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[15:24:50] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[15:24:54] <byorgey> Does the Hackage Matrix Builder website work for anyone else?  e.g.  https://matrix.hackage.haskell.org/#/package/disco  when I visit it, it's just blank.
[15:25:21] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:25:31] <__monty__> The HTML has an empty body for me too.
[15:26:11] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:26:57] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[15:27:04] <__monty__> johnjaye: Hmm, and this is after running cabal update?
[15:28:12] <johnjaye> yes. ghcup finished and i'm using that instead
[15:28:41] <johnjaye> with that it compiled a bunch of things
[15:29:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:29:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:29:21] *** Joins: wroathe (~wroathe@user/wroathe)
[15:29:24] <johnjaye> hrm. ok
[15:29:30] <johnjaye> so the final result is in... ./dist-newstyle/build/x86_64-linux/ghc-8.10.7/ministg-0.3/x/ministg/build/ministg/ministg
[15:29:35] <johnjaye> is that... normal?
[15:34:16] <c_wraith> yes
[15:34:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:34:25] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[15:34:27] <c_wraith> you aren't supposed to ever type that out :)
[15:34:37] <Clint> he pinged out, he was so upset
[15:36:10] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[15:37:34] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:38:34] *** Joins: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org)
[15:45:11] *** Quits: vglfr (~vglfr@46.96.174.179) (Ping timeout: 256 seconds)
[15:47:33] *** Quits: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org) (Quit: Alpine Linux, the security-oriented, lightweight Linux distribution)
[15:47:57] *** Joins: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org)
[15:52:37] *** Quits: deadmarshal (~deadmarsh@95.38.113.215) (Ping timeout: 240 seconds)
[15:53:46] *** Quits: dut (~dut@user/dut) (Quit: Leaving)
[15:56:07] *** Joins: deadmarshal (~deadmarsh@95.38.113.215)
[15:58:59] <geekosaur> byorgey, matrix builder is dead, nobody knows how to resurrect it
[15:59:57] <geekosaur> I asked about it and got pointed to a big pile of hvr code that I'd have to mindmeld with to understand :/
[16:04:26] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:07:29] <maerwald[m]> xD
[16:08:10] *** Joins: vglfr (~vglfr@46.96.174.179)
[16:08:28] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[16:08:34] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[16:09:04] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[16:10:03] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[16:10:38] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Quit: Leaving)
[16:11:32] *** Joins: nunggu (~q@user/nunggu)
[16:12:57] *** Quits: michalz (~michalz@185.246.204.43) (Ping timeout: 256 seconds)
[16:13:13] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[16:13:34] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 268 seconds)
[16:13:49] *** Joins: michalz (~michalz@185.246.204.58)
[16:18:30] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[16:18:30] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[16:21:45] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[16:21:57] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:26:31] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:26:34] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:26:52] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[16:29:41] *** Joins: yauhsien_ (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[16:34:29] *** Quits: yauhsien_ (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[16:35:12] *** Joins: nunggu (~q@user/nunggu)
[16:40:58] *** Joins: fendor_ (~fendor@178.115.77.166.wireless.dyn.drei.com)
[16:41:17] *** Quits: incertia (~incertia@24.42.229.53) (Read error: Connection reset by peer)
[16:43:33] *** Quits: fendor (~fendor@178.165.192.6.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[16:49:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:49:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[16:53:39] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 268 seconds)
[16:54:48] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[16:56:27] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[16:57:48] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[16:59:04] *** Joins: xkuru (~xkuru@user/xkuru)
[17:02:03] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[17:02:14] *** Joins: cosimone (~user@93-47-230-23.ip115.fastwebnet.it)
[17:09:51] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[17:12:37] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[17:13:17] *** Joins: max22- (~maxime@2a01cb088335980025090258985cbdb2.ipv6.abo.wanadoo.fr)
[17:16:23] *** Quits: cosimone (~user@93-47-230-23.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[17:17:24] *** Joins: slack1256 (~slack1256@191.125.227.213)
[17:21:37] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[17:22:07] *** Joins: cosimone (~user@93-47-230-23.ip115.fastwebnet.it)
[17:22:25] *** Joins: incertia (~incertia@207.98.176.56)
[17:22:27] *** Joins: alp (~alp@user/alp)
[17:24:51] *** Parts: hrdl (~hrdl@mail.hrdl.eu) ()
[17:28:48] *** Joins: ksqsf (~user@2001:da8:d800:611:7915:1763:796:9db6)
[17:30:19] *** Quits: Guest5225 (~Guest52@80-100-97-100.ip.xs4all.nl) (Quit: Connection closed)
[17:30:22] <merijn> after much study I think the solution to my problem is to use a Bounding Volume Hierarchy. Sadly, finding a good explanation of how to construct those is hard to find. I don't suppose anyone here knows a good introduction? :p
[17:30:35] *** Joins: Guest5261 (~Guest52@80-100-97-100.ip.xs4all.nl)
[17:30:45] <[exa]> merijn: what was the problem btw?
[17:32:20] <merijn> [exa]: I have a large volume partitioned into sub-volumes (hypercuboids?) where each sub-volume has a corresponding value, the problem is: Given a point what is the value associated with the subvolume the point falls in
[17:33:23] *** Quits: cosimone (~user@93-47-230-23.ip115.fastwebnet.it) (Remote host closed the connection)
[17:33:30] <[exa]> there's no hierarchy in the subvolumes right?
[17:33:46] <c_wraith> Is a bounding volume hierarchy a generalization of quadtree/octree/etc?
[17:33:48] <merijn> [exa]: There is no overlap no, so not really
[17:33:54] <merijn> c_wraith: Not quite
[17:34:05] <merijn> c_wraith: kd-trees are a generalisation of those
[17:34:35] <[exa]> everything is axis aligned?
[17:34:51] <merijn> c_wraith: But making those handle dense cases is tricky
[17:34:52] <[exa]> dimensionality is ~5, ~20, or greater?
[17:35:15] <merijn> [exa]: Probably ~5 and only (hyper)cuboids, so axis aligned, yeah
[17:35:33] *** Joins: cosimone (~user@93-47-230-23.ip115.fastwebnet.it)
[17:35:34] <[exa]> then some kind of R-trees should work
[17:35:49] <c_wraith> Heck, with that much structure you could just do a binary search on each axis
[17:35:51] <merijn> c_wraith: Effectively BVH are trees where every node is marked with the bounding volume of its sub-nodes
[17:36:02] <merijn> c_wraith: I'm not sure you can?
[17:36:07] <merijn> c_wraith: How would that work?
[17:36:13] <[exa]> merijn: how many volumes do you have there btw?
[17:36:43] <merijn> [exa]: Common case: Very little (tens-hundreds), theoretical worst case: millions
[17:37:15] <merijn> c_wraith: What would you binary search on?
[17:37:16] <[exa]> I'd throw it to a GPU and just bruteforce it
[17:37:24] <[exa]> even for millions it's like in 1 click
[17:37:44] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:38:34] <c_wraith> I mean, it's not maximally efficient, but it's simple.  search over a sorted list of bounds in each dimension, intersect the results.  I suppose that could be bad if the active set is changing a lot.
[17:39:01] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:39:03] <[exa]> in the other case I'd go with some variant of R tree constructed along simple splitting planes
[17:39:14] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[17:39:49] <[exa]> the chances you hit a good binary split in a few tries is quite high usually
[17:39:54] <[exa]> *are
[17:40:04] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[17:40:09] <[exa]> unless your data is pathological, at which point it is sometimes better to just subdivide the data
[17:41:17] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[17:44:09] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[17:45:53] *** Quits: deadmarshal (~deadmarsh@95.38.113.215) (Ping timeout: 256 seconds)
[17:47:03] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[17:50:41] *** Joins: xkuru (~xkuru@user/xkuru)
[17:51:18] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[17:58:17] *** Quits: qrpnxz (abc4f95c31@user/qrpnxz) (Quit: Gateway shutdown)
[17:58:43] *** Joins: deadmarshal (~deadmarsh@95.38.113.215)
[18:00:15] *** Quits: max22- (~maxime@2a01cb088335980025090258985cbdb2.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[18:02:16] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[18:02:45] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[18:02:45] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[18:02:47] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[18:02:48] *** allbery_b is now known as geekosaur
[18:08:05] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[18:11:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:11:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:11:59] *** Joins: wroathe (~wroathe@user/wroathe)
[18:12:10] *** Quits: phma (phma@2001:5b0:211b:b1e8:ef4c:8052:a169:f66a) (Read error: Connection reset by peer)
[18:12:11] <merijn> [exa]: R-trees seem to, effectively, be trickier versions of BVHs?
[18:12:29] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:13:05] *** Joins: phma (phma@2001:5b0:211f:5068:5bee:1f6d:8374:247d)
[18:13:22] <merijn> [exa]: Additionally I also don't know how to construct R-trees, so that just turns my "what's a good introduction to how to construct a BVH" to "what's a good introduction to constructing an R-tree?"
[18:14:08] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[18:14:49] <merijn> oh, actually, turns out R-trees are a subset of BVHs :p
[18:14:57] <[exa]> R trees are BVHs that allow overlap
[18:15:14] <[exa]> or maybe the other way, yeah
[18:16:05] <[exa]> re construction method: you'll get a pretty good R tree by just trying random separating planes at each step, and making 1 child from "everything that's wholly on side" and the second child from "everything that's left"
[18:16:11] *** Joins: max22- (~maxime@2a01cb08833598001513a4ce4dc1d3d2.ipv6.abo.wanadoo.fr)
[18:16:24] <[exa]> I'd suggest trying like 5-10 random choices and pick the one that separates best
[18:16:42] <[exa]> random trees are really good in average case
[18:19:34] *** Joins: rusrushal13 (~rusrushal@2409:4056:e03:14be:158d:b825:79a6:6bc)
[18:23:31] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Remote host closed the connection)
[18:23:36] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Remote host closed the connection)
[18:23:59] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[18:25:18] *** Joins: Pickchea (~private@user/pickchea)
[18:25:19] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[18:25:28] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Quit: WeeChat 3.3)
[18:25:41] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[18:26:41] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[18:26:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:26:59] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:27:14] *** Joins: burnside_ (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[18:27:15] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:c17:d8ca:f795:73f0)
[18:30:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[18:31:13] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[18:32:50] *** Joins: Pickchea (~private@user/pickchea)
[18:37:55] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[18:38:13] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:38:48] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:40:00] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:40:14] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[18:40:57] *** Quits: xff0x (~xff0x@2001:1a81:52b8:8500:6c95:ecd6:fb54:75ad) (Ping timeout: 240 seconds)
[18:41:06] *** Joins: slac94902 (~slack1256@186.11.31.133)
[18:41:32] <byorgey> geekosaur: ah, sad (re: matrix builder)
[18:43:22] *** Quits: slack1256 (~slack1256@191.125.227.213) (Ping timeout: 250 seconds)
[18:47:39] *** Quits: rusrushal13 (~rusrushal@2409:4056:e03:14be:158d:b825:79a6:6bc) (Ping timeout: 256 seconds)
[18:54:36] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:56:29] *** Joins: rusrushal13 (~rusrushal@2409:4056:e03:14be:158d:b825:79a6:6bc)
[18:56:45] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[18:58:14] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:58:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[19:01:34] *** Quits: ksqsf (~user@2001:da8:d800:611:7915:1763:796:9db6) (Ping timeout: 250 seconds)
[19:05:24] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 256 seconds)
[19:06:55] *** Quits: rusrushal13 (~rusrushal@2409:4056:e03:14be:158d:b825:79a6:6bc) (Ping timeout: 256 seconds)
[19:07:25] *** Quits: incertia (~incertia@207.98.176.56) (Read error: Connection reset by peer)
[19:07:32] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[19:07:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:07:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:07:43] *** Joins: wroathe (~wroathe@user/wroathe)
[19:07:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[19:12:16] *** Joins: incertia (~incertia@24.42.246.251)
[19:12:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:12:48] *** Joins: shapr (~user@2601:7c0:c37c:46d0:25fd:6854:a2a7:2f62)
[19:12:59] *** Quits: burnside_ (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Remote host closed the connection)
[19:13:33] *** Joins: xff0x (~xff0x@2001:1a81:52b8:8500:6c95:ecd6:fb54:75ad)
[19:13:46] *** Joins: slack1256 (~slack1256@191.126.227.213)
[19:14:15] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[19:15:50] *** Joins: ksqsf (~user@2001:da8:d800:611:7915:1763:796:9db6)
[19:15:59] *** Quits: slac94902 (~slack1256@186.11.31.133) (Ping timeout: 256 seconds)
[19:18:49] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[19:20:32] *** Quits: ksqsf (~user@2001:da8:d800:611:7915:1763:796:9db6) (Ping timeout: 240 seconds)
[19:23:52] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f)
[19:27:11] *** Joins: ksqsf (~user@2001:da8:d800:611:d47b:4206:e65:5027)
[19:27:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f) (Ping timeout: 240 seconds)
[19:27:57] *** Quits: Guest5261 (~Guest52@80-100-97-100.ip.xs4all.nl) (Ping timeout: 240 seconds)
[19:31:54] *** Quits: ksqsf (~user@2001:da8:d800:611:d47b:4206:e65:5027) (Ping timeout: 250 seconds)
[19:35:10] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:35:12] <hololeap> I just had to patch someone's library for ghc-9.0.2, where this first line gives an error, but this second line works fine. what is the explaination for this?
[19:35:36] <hololeap> applyMap = view âˆ˜ mapIso
[19:35:42] <hololeap> applyMap m = view $ mapIso m
[19:35:54] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[19:36:10] <[exa]> monomorphism restriction?   <- blind shot
[19:36:25] <[exa]> the definition of âˆ˜ is the same as of .  right?
[19:36:36] <hololeap> yes, AFAIK
[19:36:47] <[exa]> does the function have an explicit type signature?
[19:36:49] <ski> is there any type signature for `applyMap' ?
[19:36:55] <[exa]> (if not, try the first variant with the type signature)
[19:36:56] * ski low fours [exa]
[19:37:12] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:37:19] <geekosaur> simplified subsumption?
[19:37:24] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[19:37:26] <hololeap> https://github.com/mvoidex/text-region/blob/master/src/Data/Text/Region.hs#L81
[19:37:41] <maerwald> https://downloads.haskell.org/~ghc/9.0.1/docs/html/users_guide/exts/rank_polymorphism.html#simple-subsumption
[19:37:50] <geekosaur> see the 9.0.1 release notes and https://downloads.haskell.org/ghc/9.0.2/docs/html/users_guide/exts/rank_polymorphism.html#simple-subsumption
[19:37:51] <maerwald> geekosaur: what I thought
[19:38:04] <ski> are any of `Map' or `Region' type synonyms ?
[19:38:23] <hololeap> Couldn't match type: forall (p :: * -> * -> *) (f :: * -> *). (Profunctor p, Functor f) => p Region (f Region) -> p Region (f Region) with: (Region -> Const Region Region) -> Region -> Const Region Region
[19:38:45] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:38:45] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:38:45] *** Joins: wroathe (~wroathe@user/wroathe)
[19:39:40] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:ba7b:1b5c:238c:4447) (Quit: WeeChat 2.8)
[19:40:15] <hololeap> Expected: Map -> Getting Region Region Region Actual: Map -> Iso' Region Region
[19:42:47] <[exa]> is it just me or is there a dangling ) in the 9.0.1 release notes, in the signature of `g4` ?
[19:43:03] <[exa]> or missing (
[19:43:05] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:43:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:43:19] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:43:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:43:49] <ski> [exa] : i think the trailing `) -> Bool' should be removed
[19:44:22] <[exa]> very true
[19:45:01] *** Joins: ksqsf (~user@222.195.66.54)
[19:45:03] <[exa]> also "arbitrary-aank" types below
[19:45:34] <[exa]> where do I send a patch?
[19:46:20] <maerwald> ghc repo? :D
[19:49:30] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[19:49:38] <[exa]> `grep aank ghc -r` -> nothing ;_;
[19:49:47] <[exa]> maybe it's fixed in master now
[19:49:59] *** Quits: ksqsf (~user@222.195.66.54) (Ping timeout: 256 seconds)
[19:49:59] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[19:50:41] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[19:51:03] <maerwald> oh, new alex release, causing new build failures with c2hs/language-c
[19:51:05] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[19:52:13] <maerwald> https://github.com/simonmar/alex/issues/197
[19:52:28] *** Joins: ksqsf (~user@2001:da8:d800:611:7c44:28ce:f32f:226)
[19:52:52] *** Joins: Guest|28 (~Guest|28@136.228.217.112)
[19:53:36] *** Quits: Guest|28 (~Guest|28@136.228.217.112) (Client Quit)
[19:53:52] <maerwald> I'm starting to believe in stackage snapshots
[19:54:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[19:54:38] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[19:54:44] <maerwald> even critical core packages can't maintain PVP expectations
[19:54:49] *** Quits: lagash_ (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[19:55:05] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[19:55:16] *** Joins: lagash (lagash@lagash.shelltalk.net)
[19:57:02] *** Quits: ksqsf (~user@2001:da8:d800:611:7c44:28ce:f32f:226) (Ping timeout: 240 seconds)
[20:01:30] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[20:03:26] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[20:04:30] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:81fd:e333:1e93:e27e) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:05:02] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:06:04] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[20:06:54] *** justJustache is now known as justache
[20:08:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:08:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:08:59] *** Joins: wroathe (~wroathe@user/wroathe)
[20:09:36] *** Joins: ksqsf (~user@2001:da8:d800:611:2156:d87c:1289:bb62)
[20:10:00] *** Quits: deadmarshal (~deadmarsh@95.38.113.215) (Ping timeout: 256 seconds)
[20:13:33] *** Joins: Akiva (~Akiva@user/Akiva)
[20:13:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:13:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:14:48] *** Quits: ksqsf (~user@2001:da8:d800:611:2156:d87c:1289:bb62) (Ping timeout: 250 seconds)
[20:15:46] *** Joins: alp (~alp@user/alp)
[20:16:42] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:18:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[20:18:29] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:18:30] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:22:22] <EvanR> if there's a function emb :: A -> B and for any function f on A's a function h f :: B -> B such that g f (emb x) = emb (f x)... what is that, or is that somehow just automatic and obvious
[20:22:36] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[20:22:42] <EvanR> and does this make A and subtype of B or vice versa
[20:22:49] <EvanR> A a*
[20:23:10] <EvanR> ... g should be h
[20:23:14] <EvanR> I got mixed up
[20:23:33] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[20:25:01] <ski> hm, reminds me of dynamical systems
[20:25:23] <EvanR> https://paste.tomsmeding.com/CqElZb7k
[20:25:50] <ski> yep, i just conceptualized that commuting diagram
[20:26:02] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:295b:27c3:87b1:2b8f) (Ping timeout: 240 seconds)
[20:27:44] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[20:27:46] *** Joins: ksqsf (~user@222.195.66.54)
[20:28:53] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:29:36] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:30:03] <ski> hm. `emb' induces a partition on `A' (two elements are in the same partition if they map to the same element of `B'). the diagram then claims that `f' must map all elements in a part into a common part, and `h f' must map the `b' of the first part to the `b' of the second part
[20:30:24] *** Quits: remedan (~remedan@octo.cafe) (Ping timeout: 256 seconds)
[20:31:09] <ski> also, if there's any element of `b' that's not in the image of `emb', then `h f' is free to choose where to send it
[20:31:55] *** Quits: incertia (~incertia@24.42.246.251) (Ping timeout: 256 seconds)
[20:31:59] <EvanR> this h is kind of tricky then
[20:32:29] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[20:32:50] <EvanR> it has to obey a law in some case (emb is looking at you) and not others
[20:33:04] <ski> hm. so what if we pick an `f' that does not respect the partition induced by `emb' ?
[20:33:14] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[20:33:33] <ski> i guess we're talking about a situation with an `A', an `B', and an `emb', where there is no such `f'
[20:34:09] <EvanR> "any function f on A's" might be the tricky part
[20:34:18] <ski> hm, which would imply that `emb' is injective, so that the partition is the discrete/trivial one
[20:34:22] *** Joins: incertia (~incertia@207.98.242.204)
[20:34:43] <ski> hm
[20:35:25] *** Joins: remedan (~remedan@octo.cafe)
[20:35:33] <ski> yea, if every element of `A' is in its own part / equivalence class, then there's no restriction on differering elements (in the same part) having to be mapped into a common part
[20:35:34] <EvanR> h is kind of like fmap
[20:35:43] <EvanR> isn't it
[20:36:14] <ski> so, unless i'm missing something, it seems that like one would be able to prove that `emb' must be injective, for this condition to hold
[20:36:36] <EvanR> i didn't follow that, what condition 
[20:36:37] <ski> (which i guess then justifies using the name `emb', as in "embedding", for it)
[20:37:31] <ski>   forall f :: A -> A. exists g :: B -> B. g . emb = emb . f
[20:37:43] <ski> (the condition you started with)
[20:37:57] <EvanR> ah
[20:38:36] <EvanR> gnarly
[20:39:47] *** Joins: wroathe (~wroathe@user/wroathe)
[20:39:58] <EvanR> what's the meaning of these g's that do whatever they want with B not in the image of emb
[20:41:21] <EvanR> also, if emb is necessarily injective, then I guess that makes A and subset / subtype? of B
[20:41:32] <EvanR> ... A a
[20:41:41] <ski> yes
[20:41:58] <ski> (trying to think of how one might be able to prove injectivity)
[20:42:46] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[20:43:56] <EvanR> well if B = (), it seems hard to be injective xD
[20:44:16] <ski> heh, then `A' is a subsingleton, yea
[20:44:21] <ski> (aka a proposition)
[20:44:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[20:44:59] <EvanR> then g = id and works
[20:46:04] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[20:46:38] <EvanR> hmm? A could be Int, f any Int function, and B = () and g = id?
[20:46:55] <EvanR> what subsingleton u talkin about
[20:47:02] *** Quits: Major_Biscuit (~MajorBisc@c-001-024-001.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[20:47:54] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c)
[20:47:58] <darchitect> #haskell 
[20:47:59] <EvanR> there's at most 1 partition, yeah
[20:48:08] <darchitect> ?src ($)
[20:48:08] <lambdabot> f $ x = f x
[20:48:18] <ski> oh, right. with the indiscrete/cotrivial partition (everything in the same part / equivalence class), there's also no restriction
[20:48:27] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[20:48:28] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c) (Client Quit)
[20:48:38] * ski blinks
[20:48:45] * geekosaur wonders what that was about
[20:49:05] <EvanR> apparently you can use ? to invoke lambdabot
[20:49:18] <geekosaur> yep
[20:49:25] <geekosaur> some people do so habitually
[20:49:29] <maerwald> ??
[20:49:31] <ski> EvanR : if `B' is `()', and `emb' injective, then `A' is a subsingleton (subtype of unit)
[20:49:37] *** Quits: ksqsf (~user@222.195.66.54) (Ping timeout: 240 seconds)
[20:49:49] <maerwald> ?(?)
[20:49:55] <EvanR> just to be clear, we can't prove emb is an injection in general right
[20:50:08] <geekosaur> @(?)
[20:50:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:50:18] <ski> maybeit requires axiom of choice, or proof-by-contradiction, or something ..
[20:50:22] <geekosaur> apparently lb ignores some kinds of noise
[20:50:32] <ski> (or maybe i was missing something in my information consideration above)
[20:50:34] <EvanR> maybe I missed another condition you brought up
[20:50:40] <geekosaur> ?info blah
[20:50:40] <lambdabot> blah
[20:50:45] <maerwald> geekosaur: makes sense, it's been ignoring me for some time xD
[20:50:56] <ski> i'm not immediately seeing how you could prove it, constructively, anyway
[20:50:59] <monochrom>  ?info is auto-corrected to ?undo
[20:51:05] <EvanR> didn't I just disprove it?
[20:51:08] <EvanR> is what I'm saying
[20:51:11] <geekosaur> yes, I know
[20:51:33] <ski> EvanR : oh, ah. sorry, yes
[20:51:48] <ski> hm
[20:51:57] <geekosaur> (I seriously considered adding a line to lb to output when it was doing that, back when I was using lb as a channel logger)
[20:52:50] <EvanR> since it seems functor like, you'd expect some "embeddings" to cause loss of info
[20:53:02] <EvanR> collision
[20:53:19] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[20:53:29] <EvanR> I guess embedding is supposed to imply that doesn't happen
[20:54:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[20:54:38] <ski> hm, so if we have at least two parts, at least one of them containing at least two elements (iow `emb' being non-injective), then there's an `f' that doesn't respect the partition
[20:54:53] <EvanR> it's a functor between two categories of endomorphisms
[20:55:07] <ski> so, i guess, either `B' is subsingleton, or `emb' is injective
[20:55:28] <ski> (that's presumably a multiplicative / non-constructive disjunction)
[20:56:21] <EvanR> what does f respecting the partition mean
[20:56:22] <ski> how's it a functor ?
[20:56:52] <ski> EvanR : the aforementioned condition
[20:57:19] <EvanR> g . emb = emb . f
[20:57:23] <ski> (if two elements are in the same part, then `f' must map them into a common part)
[20:57:32] <EvanR> oh
[20:57:54] <EvanR> yeah so that's what you've been working with the whole time, I see how that is easily not the case
[20:58:13] *** Joins: econo (uid147250@user/econo)
[20:59:47] <ski>   emb (f x) = g (emb x) ={ `x',`y' in same part }= g (emb y) = emb (f y)
[20:59:54] <ski> ergo, `f x',`f y' in same part
[21:02:20] *** Joins: ksqsf (~user@222.195.66.54)
[21:02:57] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[21:03:36] <EvanR> oh, that's cool. So f has to respect the partition
[21:03:56] <EvanR> is that right
[21:04:20] <EvanR> I take back my functor thing, I was mixed up
[21:04:50] <ski> yes, that's what `g . emb = emb . f' says (and `g' is the part mapping)
[21:04:50] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:05:40] <EvanR> so the existence of B, emb, and these g's induces dynamical partitions on A...
[21:05:45] <EvanR> weird
[21:05:59] <ski> `emb' induces the partition
[21:06:14] <EvanR> by itself?
[21:06:28] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f)
[21:06:44] <EvanR> the dynamical partitioning doesn't know about emb
[21:06:46] <ski> `x' and `y' are defined to be equivalent (in the same part) iff `emb x = emb y'
[21:06:53] <EvanR> the f's
[21:07:04] <ski> and the insistance of there being a `g' for every `f' seems to imply that either `B' is subsingleton, or `emb' is injective
[21:07:06] *** Quits: ksqsf (~user@222.195.66.54) (Ping timeout: 268 seconds)
[21:07:56] <EvanR> I'm trippin, any f :: A -> A results in some kind of dynamic partition, even if it's trivial
[21:08:02] <EvanR> orbits
[21:08:18] <ski> any `f' describes a dynamical system on `A'
[21:08:32] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[21:08:50] <EvanR> f automatically respects those
[21:08:59] <ski> and you're claiming that for any dynamical system on `A', there is a dynamical system on `B', with `emb' being the dynamical system morphism between them
[21:09:15] <ski> (s/you/your condition/)
[21:10:37] <ski> so, we're talking about objects `A',`B' and morphism `emb' such that any dynamical system on `A' induces one on `B', with `emb' a morphism between them
[21:11:09] <EvanR> is the g unique
[21:11:24] <EvanR> guess not since you could reverse whatever the g system is
[21:11:41] <EvanR> or shift it over one
[21:11:58] <ski> you had no such condition. if `emb' is not surjective, then there's leeway/choice in where `g' sends "unassigned parts"
[21:12:08] <EvanR> oh yeah that
[21:12:42] <EvanR> dynamical system morphism, got it
[21:12:53] <ski> (although if we're talking about some other category than `Set', considering dynamical systems over that, we could probably have a unique `g' even if `emb' is not epi)
[21:14:37] <ski> ("f automatically respects those" -- which ?)
[21:14:44] <EvanR> it's own orbits
[21:14:52] <EvanR> partitions
[21:15:01] <ski> yea, `f . f = f . f'
[21:15:33] <ski> well, the orbits aren't the parts induced by `emb'
[21:15:34] <EvanR> um, interesting xD
[21:15:40] <EvanR> no, the orbits are just there
[21:16:33] <ski> anyway, yes, `f' is a morphism from the dynamical system `(A,f)' to itself
[21:17:08] <ski> (which `f . f = f . f' verifies)
[21:17:42] <EvanR> and if any two morphisms compose, it's a category
[21:17:58] <EvanR> with compatible types
[21:18:04] <ski> well, i'd not call them morphisms, otherwise :p
[21:19:21] <EvanR> does any morphism have 1 to 1 correspondence between orbits
[21:19:25] <tomjaguarpaw> Does DerivingVia only make sense for things of kind Type?
[21:19:31] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[21:19:55] <tomjaguarpaw> Could I, for example, implement the MTL instance boilerplate using DerivingVia?
[21:20:16] <tomjaguarpaw> The instances of are things of kind  (Type -> Type) -> Type -> Type  which makes me think not
[21:20:31] <tomjaguarpaw> There wouldn't be a suitable  Coercible
[21:20:51] <awpr> oddly enough Coercible does exist for partially applied type constructors
[21:21:40] <tomjaguarpaw> Aha, that sounds useful
[21:21:40] <ski>   forall DA : DynSys | U DA = A. exists DB : DynSys | U DB = B. exists demb : DA >---> DB. U demb = emb
[21:21:48] <ski> something like that, i guess .. hmm
[21:21:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f) (Remote host closed the connection)
[21:22:05] <ski> EvanR : hm, not sure what you mean by that ?
[21:22:11] <awpr> > let x :: Coercible m n => m a -> n a; x = coerce in x @Maybe @Maybe
[21:22:12] <lambdabot>  <hint>:1:53: error:
[21:22:12] <lambdabot>      Pattern syntax in expression context: x@Maybe
[21:22:12] <lambdabot>      Did you mean to enable TypeApplications?
[21:22:21] <awpr> % let x :: Coercible m n => m a -> n a; x = coerce in x @Maybe @Maybe
[21:22:21] <yahb> awpr: ; <interactive>:18:1: error:; * No instance for (Show (Maybe a0 -> Maybe a0)) arising from a use of `print'; (maybe you haven't applied a function to enough arguments?); * In a stmt of an interactive GHCi command: print it
[21:22:32] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:23:37] <ski> % let x :: Coercible m n => m a -> n a; x = coerce in x @Maybe @Maybe @Void Nothing
[21:23:37] <yahb> ski: Nothing
[21:24:06] *** Joins: alexd (~nineonine@50.216.62.2)
[21:24:33] <awpr> IIRC `Coercible (m :: k -> Type) n` means for all equal type arguments (note: not all coercible arguments), GHC will use it to solve `Coercible (m a) (n a)`.  but there's another thing you need if that's to be useful: the instances need to exist, and I don't know off the top of my head whether they do
[21:26:02] <awpr> actually this is probably an unnecessary diversion: DerivingVia is used routinely for Monad instances, where the kind is `Type -> Type`.  is this case actually any different from that?
[21:26:36] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[21:29:28] <EvanR> ski, the source and target dynamical system have the same number of orbits, i.e. their set of orbits are in a 1 to 1 correspondence?
[21:29:53] *** Joins: vicfred (~vicfred@user/vicfred)
[21:30:49] <ski> clearly you can map a DS consisting of two loops, to one consisting of just one (the length of which must then be a common divisor of the lengths of the previous ones)
[21:30:50] <EvanR> the morphism doesn't "split" orbits into suborbits, or doe sit
[21:31:18] <EvanR> wha
[21:31:34] <ski> (that's a non-injective morphism, obviously)
[21:32:27] <EvanR> how does the larger loop have a length that is a common divisor of two smaller loops
[21:32:35] <ski> if you think of the endofunction as (discrete) time. then if you take one time step, and then map over to the other system, that must be the same as mapping over to the other system, then taking a time step there
[21:32:51] <EvanR> yes
[21:32:55] *** Quits: ubert1 (~Thunderbi@p200300ecdf09943ef05cebfd8a506150.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:33:30] *** Joins: deadmarshal (~deadmarsh@95.38.113.215)
[21:33:31] <ski> the second system "simulates" the first, there's an "image" of the first, inside the second. this image might be non-singular, might conflate/coalesce different states of the former system, in case the morphism was non-injective
[21:33:37] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[21:33:40] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:34:10] <ski> larger loop ?
[21:34:23] <EvanR> oh now I see
[21:34:35] <EvanR> two big loops coalesce into 1 smaller loop
[21:34:40] <EvanR> tricky
[21:34:46] <ski> if you have a system `C_6 + C_10' (a six-loop and a ten-loop), you can map that to a `C_2' (two-loop)
[21:35:08] <EvanR> so the number of orbits stays the same or decreases
[21:35:47] <ski> (also, because the endofunctions are not required to be invertible, you can have "hairs"/"dendrites". so a dynamical system is a loop, with such "dendrites" (trees) hanging off it. (an infinite strand is considered a zero-loop))
[21:35:49] <EvanR> orbits are non-renewable
[21:36:55] <EvanR> almost forgot about not-loops
[21:37:07] <ski> well, could you clarify exactly what you mean by an orbit, here ? a maximal subset of elements where any two elements eventually end up the same, after time passing ?
[21:37:42] <EvanR> oh, and if f is not invertible, it could "fork when going back in time"
[21:37:44] <ski> or maybe you mean a map from `(Nat,succ)' ? (or `(Integer,succ)' ?)
[21:37:52] <ski> right, that's the tree branching
[21:38:10] <EvanR> I was thinking invertible
[21:38:23] <EvanR> an an orbit is a linear thing
[21:38:27] <EvanR> sequence
[21:38:42] <ski> extending in one direction ? or both ?
[21:39:18] <ski> mhm
[21:39:24] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:39:27] <EvanR> for loops might as well go 1 way, otherwise go back to the start
[21:39:38] <EvanR> oops there might not be a start
[21:39:51] <EvanR> both ways
[21:39:52] <ski> a map from `(Nat,succ)' is a sequence of elements, with a starting-point
[21:40:03] <ski> such maps are in bijection with the elements of the DS
[21:40:21] <ski> so `(Nat,succ)' plays the role of `()', in this category
[21:42:41] <ski> then there's also another DS, `(Nat,pred)' (where `pred 0 = 0'), which acts like a "truth-value object" (aka "subobject classifier"). any subobject (`(S,e)') of a DS `(A,f)' (iow, with a mono from `(S,e)' to `(A,f)) corresponds exactly to a map (the characteristic map) from `(A,f)' to `(Nat,pred)'
[21:43:30] <ski> oh, sorry, that should actually be `InfNat' (it also contains an infinity element)
[21:43:53] <ski> in `(Nat,pred)', `0' means "true", or "yes, the element is in the sub-DS". `1' means "false now, but true in one time step", and so on. then `inf' (or `fix succ') means "forever false"
[21:44:15] <ski> (`pred inf = inf', naturally)
[21:44:27] *** Quits: incertia (~incertia@207.98.242.204) (Ping timeout: 256 seconds)
[21:44:36] <EvanR> cool
[21:44:54] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[21:45:03] <ski> (well .. that's a bit aside. but it might be nice/fun to ponder)
[21:45:12] *** Joins: wroathe (~wroathe@user/wroathe)
[21:45:14] *** w1gz_ is now known as w1gz
[21:45:21] *** Joins: incertia (~incertia@207.98.168.249)
[21:45:38] <EvanR> that ended up being a lot richer than my diagram led me to believe
[21:45:49] *** Quits: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) (Quit: Bye)
[21:47:05] *** Joins: Akiva (~Akiva@user/Akiva)
[21:49:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:51:37] *** Joins: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667)
[21:51:57] <ski> i'm still wondering if there's a nicer way to think about it, in terms of the underlying functor, or somesuch (like i attempted to formulate it, above)
[21:53:58] *** Quits: max22- (~maxime@2a01cb08833598001513a4ce4dc1d3d2.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[21:55:15] <monochrom> I'm still in set theory. Here is what I found. The image of emb is a singleton, or emb is injective.
[21:55:36] <EvanR> really
[21:55:40] <ski> yea, i had s/singleton/subsingleton/
[21:56:02] <EvanR> why can't it be somewhere in between
[21:56:27] <ski> (but, if `B' is empty, then obviously `emb' is injective, so ..)
[21:56:27] *** Joins: ksqsf (~user@222.195.66.54)
[21:56:53] <monochrom> I have a social commentary reading of that, too.  The two Pareto points of evolution of society: everyone is part of the same hive mind, or everyone is independent >:)
[21:57:04] <ski> hehee :)
[21:57:10] *** Joins: zmt00 (~zmt00@user/zmt00)
[21:57:39] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:00:50] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:01:01] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[22:01:38] *** Quits: ksqsf (~user@222.195.66.54) (Ping timeout: 256 seconds)
[22:02:42] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:04:14] <tomjaguarpaw> awpr: I got it to work it seems, thanks!
[22:05:02] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[22:05:59] *** Joins: raym (~raym@user/raym)
[22:08:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[22:09:01] *** Joins: Siv (~fuag1@174.127.249.180)
[22:09:31] <Siv> I'm having trouble getting a project to build on windows with it requiring unix, but unix not providing a library. I'm using stack
[22:09:53] <maerwald> Siv: that's pretty unfortunate
[22:10:24] <Siv> is there a work around or do i need to set up mingw32 or somethin' similar
[22:11:03] <polyphem> doesnt windows have linux subsystem now ?
[22:11:08] <geekosaur> there's a unix-compat library that will work for some things, but you may well need WSL or mingw
[22:11:12] <EvanR> somewhere someone is on unix cursing a project that requires windows to build
[22:11:15] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[22:11:32] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[22:11:32] <Siv> or a way to tell exactly what is causing the unix dependency? is unix a cross platform library that wraps posix functionality, it kinda looks like it
[22:11:34] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:11:43] <Siv> yeah i can try the compat layer, i think its network is isolated though which is a problem
[22:12:38] <maerwald> unix package doesn't work on windows
[22:13:01] <maerwald> so it's likely that you're trying to build a package that's not supported on windows
[22:13:59] <geekosaur> what package is this?
[22:14:01] <maerwald> mingw32 is already set up... stack does that automatically
[22:14:14] <Siv> is there a way to list what is getting pulled in by what to try to unpack what the conflict is? maybe i can hack in a replacement faster
[22:14:17] <geekosaur> yeh, mingw32 only goes so far
[22:14:24] <maerwald> Siv: yes... if you use cabal
[22:14:40] <Siv> oof, stack was a bad choice then
[22:14:41] <Siv> lol
[22:15:04] <maerwald> cabal puts resolution into dist-newstyle/cache/plan.json
[22:15:06] <Siv> its a project i did but i dev'd on unix and didn't think i was using anything super platform specific
[22:15:08] *** Joins: CHUD (~CHUD@cpc142034-slou6-2-0-cust488.17-4.cable.virginm.net)
[22:15:13] <polyphem> windows too :)
[22:15:42] <maerwald> Siv: well, link to the project would help
[22:16:11] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[22:16:59] <Siv> tis private but i'm just finidng i actually list unix in the dependencies. hmm i wish i remembered why, going to try removing it
[22:17:14] <geekosaur> try swapping with unix-compat first
[22:17:30] <maerwald> are you writing a HACK?
[22:17:31] <geekosaur> if you're lucky that will be good enough
[22:18:09] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:18:39] <Siv> no i just rolled this on unix. I was never planning on running it on a windows host. Turns out wsl and docker and exposing all that to the windows host is super non-trivial
[22:19:12] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[22:19:39] <Siv> but maybe eating taking the time to figure that out is the way to go. Its kinda crazy to me that docker on windows has no real option to expose ports to the host
[22:19:47] <Siv> s/real/simple/
[22:20:02] *** Joins: vysn (~vysn@user/vysn)
[22:20:20] *** Joins: max22- (~maxime@2a01cb0883359800a734b5267d8e6eaf.ipv6.abo.wanadoo.fr)
[22:20:26] <Siv> but thats far from a stack problem. unix-compat didn't pan out
[22:21:02] <geekosaur> :(
[22:22:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f)
[22:22:49] *** Joins: themc47 (~mc47@xmonad/TheMC47)
[22:22:52] <Siv> well, i GET to learn more about windows / wsl networking today :P
[22:23:12] <Siv> thanks for the suggestions of unix-compat and pointing out this is likely a dead end to try to hack around
[22:23:33] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Ping timeout: 256 seconds)
[22:23:33] *** Quits: themc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[22:24:00] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Client Quit)
[22:24:29] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[22:26:17] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:e821:f261:3387:e512) (Quit: Leaving)
[22:26:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f) (Ping timeout: 240 seconds)
[22:27:07] *** Joins: ksqsf (~user@2001:da8:d800:611:9019:cb2c:2b8f:4e39)
[22:27:18] *** Joins: tzh_ (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[22:27:34] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Remote host closed the connection)
[22:30:55] *** Joins: lechner (~lechner@debian/lechner)
[22:31:04] <maerwald> windows WSL2 works great
[22:31:44] *** Quits: ksqsf (~user@2001:da8:d800:611:9019:cb2c:2b8f:4e39) (Ping timeout: 250 seconds)
[22:34:55] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[22:35:32] <Siv> yeah, i'm reading up on it, if you have experience maybe you have some tips. I need to host a postgresql server and some web servers that need to be connected to by my windows host and others on my network. I can allow the ports needed through my firewall, route through my modem, and create a proxy to the wsl2 vm
[22:36:01] <maerwald> sounds like you're writing a HACK
[22:36:06] <Siv> last time i tried running a postgresql db from wsl2 i was told to sod off for some reason that I cant remember so I'm doing a dry run of that
[22:36:16] <maerwald> but networking is one of the few things that doesn't work that well in WSL2, lol
[22:36:31] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[22:37:02] <Siv> is HACK an acronym or do you mean literal hacking to try to get something odd to work
[22:37:29] <Siv> ideally i'd have a 2nd machine on the network i can just run all this crud on but i'm in a dual boot setup
[22:38:06] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[22:39:32] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:41:02] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[22:41:05] *** Joins: roboguy (~roboguy@user/roboguy)
[22:42:13] <maerwald> Siv: https://stackoverflow.com/questions/61002681/connecting-to-wsl2-server-via-local-network
[22:42:30] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[22:44:56] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[22:45:02] <Siv> yeah, and i jsut got postgresql to run on wsl2 successfully! ok, so if i forgo the nice docker images i prepared and just run everything in wsl2 with a proxy things should be good :D, we'll see in... an hour or so
[22:45:09] *** Quits: max22- (~maxime@2a01cb0883359800a734b5267d8e6eaf.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:45:34] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[22:47:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f)
[22:51:32] *** Quits: tafama (~tafa@user/tafa) (Quit: ZNC - https://znc.in)
[22:51:47] *** Joins: whatif (~user@123.123.223.41)
[22:52:35] *** Joins: alp (~alp@user/alp)
[22:53:03] <whatif> why there's no splitOn in String but in Text? why there's readFile and yet no readLines? I need to read the file and replace the '\n' char with "<br>" string, how to appendFile to append data in the beginning not the ending?
[22:53:24] <EvanR> fmap lines readFile
[22:53:40] *** Joins: tafa (~tafa@user/tafa)
[22:53:50] <whatif> ok
[22:53:50] <dsal> :t fmap lines . readFile
[22:53:51] <lambdabot> FilePath -> IO [String]
[22:54:37] <EvanR> there's an unfortunate package for splitting lists with like 100 different ways to do it
[22:54:39] <maerwald> whatif: https://hackage.haskell.org/package/split-0.2.3.4/docs/Data-List-Split.html#v:splitOn
[22:54:55] <EvanR> ^
[22:55:02] <dsal> :t fmap (intercalate "<br>\n" . lines) . readFile
[22:55:03] <lambdabot> FilePath -> IO [Char]
[22:55:20] <whatif> maerwald this isn't came with the standard library
[22:55:27] *** Joins: ksqsf (~user@2001:da8:d800:611:f824:c8ac:863e:f879)
[22:55:33] <maerwald> whatif: yeah, the standard library isn't very good
[22:55:35] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[22:55:39] <dsal> You can only do so much with the standard library.
[22:55:40] <whatif> maerwald why splitOn isn't in Data.List?
[22:55:42] <EvanR> they couldn't agree on what the best split API would be
[22:55:50] <EvanR> so there is the split package
[22:55:54] <dsal> whatif: We don't need a standard library that covers every possible use case.
[22:55:54] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:56:20] <EvanR> you can also create your own list split with span and break
[22:56:23] <EvanR> :t break
[22:56:24] <lambdabot> (a -> Bool) -> [a] -> ([a], [a])
[22:56:26] <whatif> dsal: but splitOn is so much used than splitAt 
[22:56:26] <dsal> :t fix
[22:56:27] <lambdabot> (a -> a) -> a
[22:56:46] <dsal> whatif: In your code perhaps?  I don't use it very much at all.
[22:57:08] <EvanR> String isn't the greatest option for doing heavy amounts of text processing
[22:57:11] <dsal> (and when I do, it's in Text)
[22:57:56] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Remote host closed the connection)
[22:58:08] <maerwald> dsal: I'm pretty sure the number of splitOn from extras and split package across hackage is massive
[22:58:18] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Ping timeout: 256 seconds)
[22:58:44] *** Joins: briandaed (~briandaed@185.234.208.208.r.toneticgroup.pl)
[22:59:05] <whatif> what's the name to do `foldl1 <> ["a","bc"]`?
[22:59:21] <dsal> fold
[22:59:30] <dsal> > fold ["a", "bc"]
[22:59:31] <lambdabot>  "abc"
[22:59:32] <EvanR> > join ["a","bc"] -- xD
[22:59:34] <lambdabot>  "abc"
[22:59:52] <EvanR> > concat ["a","bc"]
[22:59:53] <lambdabot>  "abc"
[22:59:54] <whatif> why don't name it "reduce"?
[22:59:54] *** Quits: ksqsf (~user@2001:da8:d800:611:f824:c8ac:863e:f879) (Ping timeout: 250 seconds)
[23:00:01] <dsal> Why would it be named reduce?
[23:00:13] <EvanR> flatten, which is what join really means
[23:00:20] *** Parts: alexd (~nineonine@50.216.62.2) (Leaving...)
[23:00:20] <whatif> since lisp and other language did it
[23:00:23] *** Quits: CHUD (~CHUD@cpc142034-slou6-2-0-cust488.17-4.cable.virginm.net) (Ping timeout: 256 seconds)
[23:00:38] <EvanR> reduce doesn't always
[23:00:47] <EvanR> i.e. scanl
[23:00:54] <ski> `reduce' takes a callback, `concat' doesn't
[23:01:10] <maerwald> yeah, this isn't npm 
[23:01:12] <geekosaur> join is generalized concat
[23:01:19] <geekosaur> :t join
[23:01:20] <lambdabot> Monad m => m (m a) -> m a
[23:01:33] <ski> @type mconcat
[23:01:33] <geekosaur> % :t join @[]
[23:01:33] <yahb> geekosaur: [[a]] -> [a]
[23:01:34] <lambdabot> Monoid a => [a] -> a
[23:01:37] <ski> @type Data.Semigroup.sconcat
[23:01:38] <lambdabot> Semigroup a => NonEmpty a -> a
[23:03:00] *** Joins: aliosablack (~chomwitt@ppp-94-67-1-27.home.otenet.gr)
[23:03:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f) (Remote host closed the connection)
[23:03:43] <whatif> string is [Char] so ["a"...] would be [[Char]],so join can get [Char] which is String, neat
[23:04:20] <ski> yea, it wasn't totally clear if the strings were just an example, or if it was important that you had a list of lists
[23:04:57] *** Quits: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr) (Ping timeout: 240 seconds)
[23:05:21] <whatif> appendFile, how to insert at the beginning?
[23:05:30] <ski> (also, since you asked about `foldl1 (<>)' (and not about `foldl1' itself), "reduce" sounded inappropriate, rather it being applied to some specific callback could be more similar)
[23:05:34] <whatif> insertFile?
[23:06:46] <whatif> ski: could `foldl1 <>` == join?
[23:06:54] <geekosaur> there's no good way to do that, even outside of haskell
[23:07:16] <geekosaur> rename file to file.old, write new content, append old file to new?
[23:07:36] <ski> whatif : are you talking about `join :: [[a]] -> [a]' (iow `concat'), or the more general (monadic) meaning of `join' ?
[23:07:38] <whatif> oh, no, if different m
[23:07:56] <EvanR> if the OS supported comprehending any file in reverse, maybe it could be done nicely
[23:07:59] <whatif> ski: never mind
[23:08:06] <ski> ok
[23:08:23] <ski> (anyway, `foldl1' doesn't work on empty list ..)
[23:08:31] <whatif> in list they're equal, not on others
[23:08:47] <EvanR> efficiently reverse the file, write your data in reverse, then efficiently reverse that file again
[23:08:58] <whatif> @hoogle insertFile
[23:08:58] <lambdabot> No results found
[23:09:08] <whatif> insertFile, could we have a insertFile?
[23:09:26] <EvanR> files don't support efficient insert
[23:09:29] <EvanR> in general
[23:09:43] <whatif> I mean insert the data in the beginning of the file
[23:09:48] <EvanR> nor that
[23:09:51] <geekosaur> yes, files do not support that
[23:09:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:10:18] <whatif> not others language support that?
[23:10:35] <geekosaur> [21 19:36:54] <geekosaur> there's no good way to do that, even outside of haskell
[23:10:46] <geekosaur> has nothing to do with haskell. *files* do not support that
[23:11:17] <whatif> but I did a lot opening my file and type something at the beginning
[23:11:31] <geekosaur> editors can do it by rewriting the whole file
[23:11:32] <[exa]> whatif: you were deceived by your userfriendly editor!
[23:11:36] <monochrom> In an editor? That's just RAM.
[23:11:42] <geekosaur> which is the only way to do it
[23:11:57] <monochrom> Noticely nicely that if you don't hit "save" nothing happens to the file.
[23:12:04] <geekosaur> there's no way to just stuff some data at the start of a file without rewriting the whole file
[23:12:33] <whatif> [exa]: we can do readFile and writeFile to do insertFile
[23:12:40] <[exa]> yeah
[23:12:47] <monochrom> And if you do hit "save", it's erase-and-start-over-write-it-from-the-very-beginning-to-the-very-end.
[23:13:00] <monochrom> Try saving a 2GB file some time.
[23:13:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:13:16] <[exa]> but that's readfile and writefile, basically makes a new file. If your file is sufficiently big, it's gonna fail
[23:13:27] <whatif> monochrom: 2GB file, with editors, it's slow?
[23:13:35] <monochrom> You haven't tried?
[23:13:58] <whatif> monochrom: my laptop only has 4GB RAM
[23:14:11] <whatif> open a 2GB file is too hard to my laptop
[23:14:24] <whatif> if I have a 16GB RAM, may I try it
[23:14:42] <geekosaur> still slow
[23:14:49] <geekosaur> editors don't like files that large
[23:15:10] <EvanR> opening the file isn't the problem, it's inserting stuff at the beginning
[23:15:13] <whatif> which editor can edit a 2GB file
[23:15:14] <EvanR> and saving
[23:15:35] <monochrom> Also the word "open" becomes double-speak at this point.
[23:15:52] <monochrom> The OS-level "open file" is not the editor-level "open file".
[23:16:22] <monochrom> In particular, editor-level "open" means OS-level open, read, close.
[23:16:30] <EvanR> oof
[23:17:05] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[23:17:06] <geekosaur> and save is open, write entire file, close
[23:17:13] <monochrom> At some point, as a programmer, you are supposed to understand the following much more than average users:
[23:17:26] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:17:35] <monochrom> 1. The computer system has many layers of abstractions.  2. Every layer lies.
[23:18:48] *** Joins: CHUD (~CHUD@cpc142034-slou6-2-0-cust488.17-4.cable.virginm.net)
[23:18:56] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:20:50] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[23:21:22] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:22:24] *** Joins: ksqsf (~user@2001:da8:d800:611:bc8a:94b2:c042:3f5f)
[23:23:03] *** Quits: CHUD (~CHUD@cpc142034-slou6-2-0-cust488.17-4.cable.virginm.net) (Ping timeout: 256 seconds)
[23:23:04] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[23:23:24] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:24:44] <whatif> how to solve file locking? I readFile then writeFile on the same file?
[23:25:01] <whatif> is there a @hoogle closeFile
[23:25:03] <monochrom> OS-depending.
[23:25:09] <monochrom> err, OS-dependent.
[23:25:13] <whatif> monochrom: debian
[23:26:00] <geekosaur> readFile and writeFile are whole-file operations and you should not have to explicitly close, although you may have to force data to avoid laziness holding it open
[23:26:03] <monochrom> then read up on "unix advisory file locking"
[23:26:41] <EvanR> readFile, complete your read (tricky if you used the lazy readFile), then writeFile
[23:27:05] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[23:27:12] *** Quits: ksqsf (~user@2001:da8:d800:611:bc8a:94b2:c042:3f5f) (Ping timeout: 250 seconds)
[23:27:20] <whatif> EvanR which one readFile isn't lazy?
[23:27:30] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[23:27:40] <EvanR> you don't want a strict readFile for [Char]
[23:27:48] <EvanR> use Data.ByteString or Text
[23:28:09] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[23:28:32] <monochrom> System.Posix.IO has bindings to the locking operations. Comes with GHC on unixes.
[23:29:07] <whatif> EvanR the Internal one or the Lazy one?
[23:29:59] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:30:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:30:35] <geekosaur> monochrom, I think the "locking" they're talking about is the RTS Handle locking, in this case meaning readFile is lazy and so writeFile fails with a "handle locked" error
[23:30:54] <monochrom> Oh that.
[23:31:14] <c_wraith> is that new?
[23:31:22] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[23:31:29] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[23:31:39] <c_wraith> I remember the combination of readFile and writeFile being happy to just lose all your data for you
[23:31:57] <geekosaur> it was fixed relatively recently I think
[23:32:17] <geekosaur> I recall a fair amount of complaining when people started getting the "locked" errors
[23:32:21] <monochrom> I just don't do that. I don't even do that in shell scripts.
[23:32:33] <geekosaur> but the Haskell standard requires it specifically because it can lose data otherwise
[23:32:33] <monochrom> Always write to a temp file then mv.
[23:32:34] <c_wraith> yeah, it causes data loss even in shell scripts
[23:33:22] <monochrom> Hell I even wrote a shell script for this "atomic destructive update" design pattern :)
[23:33:27] <c_wraith> writing to a temp file then moving isn't perfect either. the ext filesystems can still lose your data on a power loss because it syncs data and metadata separately
[23:33:50] <monochrom> I invested in a UPS for that :)
[23:34:02] <monochrom> either that, or a laptop battery
[23:34:04] <c_wraith> you need write/fdatasync/rename
[23:34:12] <c_wraith> then you at least have atomicity
[23:34:23] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[23:34:24] <monochrom> Ah nice, thanks, good to know.
[23:35:34] <monochrom> fdatasink >:)
[23:35:37] <zzz> what's the best way to force let bindings to be exaustive?
[23:36:05] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[23:36:34] <c_wraith> let bindings don't branch in the pattern match portion - only if there are also guards.
[23:36:43] <c_wraith> So exhaustiveness checks don't apply.
[23:36:56] <c_wraith> If you need to match against multiple patterns, you need a case
[23:36:58] <monochrom> Oh maybe pattern guards then heh
[23:37:04] <ski> (and the guards "face inwards", not outwards)
[23:37:25] <zzz> ski: what does it mean?
[23:37:32] <whatif> EvanR Data.ByteString.readFile and writeFile work
[23:37:46] <monochrom> But really "exhaustive pattern binding" is an oxymoron.
[23:38:05] <c_wraith> whatif: those have different semantics - readFile actually reads then closes the entire file before it returns.
[23:38:12] *** Quits: roboguy (~roboguy@user/roboguy) ()
[23:38:20] *** Quits: briandaed (~briandaed@185.234.208.208.r.toneticgroup.pl) (Quit: Lost terminal)
[23:38:30] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[23:39:10] <monochrom> If your file has 2GB, Data.ByteString.readFile takes 2GB RAM. I thought you were afraid of that.
[23:39:12] <zzz> ski: i think i see what you mean
[23:39:23] <whatif> c_wraith: then why System.IO readFile and writeFile locking?
[23:39:28] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:494b:f936:f65f:424f)
[23:39:46] <ski> in a non-function `let'/`where' binding, `<pat> = <expr>' or `<pat> | <guard> = <expr> | ...', there's still only one pattern that you're matching against, not multiple ones. the guards only serve to determine which value will be matched with the pattern, not to select a branch after matching the pattern
[23:39:46] <monochrom> Also let me scaremonger you further about killing cache locality...
[23:39:49] <whatif> monochrom: I don't have that big file, just some text file
[23:40:03] <c_wraith> whatif: because System.IO readFile doesn't read the entire file before it returns. It just opens it. The value it returns hides a bunch of magic for actually reading from the file on demand.
[23:40:45] *** Joins: coot_ (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[23:40:51] <whatif> c_wraith: then what's its purpose? why it's doing that
[23:40:53] <EvanR> System.IO readFile is the "gotcha" at the door to the haskell club
[23:40:58] <geekosaur> and this is why you can find yourself still reading the file when you go to write it
[23:41:18] <whatif> return immetly after open it?
[23:41:22] <geekosaur> lazy I/O is convenient. until it bites your ass, at least
[23:41:24] <ski> contrast with function bindings `f <pat> ... = <expr>; ...' or `f <pat> ... | <guard> = <expr> | ...; ...', where the matching on the argument patterns will select a defining equation, and the any associated guards will select a particular branch
[23:41:27] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (Quit: WeeChat 2.9)
[23:41:28] <c_wraith> whatif: it does that so that it bounds memory use.  Or at least enables you to bound memory use if you are careful.
[23:41:34] <ski> zzz : am i making sense ?
[23:41:47] <c_wraith> whatif: you can open a 10TB file and only ever use a couple kilobytes of memory
[23:42:32] <monochrom> I don't have a 10TB file, my disk is too small :(
[23:42:42] <monochrom> Oh! I have /dev/zero :)
[23:42:44] <c_wraith> Of course, getting that *right* requires you to know enough that you could use a library with a saner interface...
[23:43:00] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[23:43:04] <whatif> c_wraith: in python they would read a certain mount of Bytes of a big file, that's fine too
[23:43:37] *** Quits: Siv (~fuag1@174.127.249.180) (Ping timeout: 240 seconds)
[23:43:41] <geekosaur> hGet is a thing. or hGetLine.
[23:43:53] <geekosaur> actually I think it's hGetBuf?
[23:43:53] <c_wraith> if that's what you want to do, write code that does it.
[23:43:55] <whatif> monochrom: I only have a 256GB disk
[23:44:01] <geekosaur> % :t System.IO.hGetBuf
[23:44:02] <yahb> geekosaur: Handle -> Ptr a -> Int -> IO Int
[23:44:03] <c_wraith> Don't use readFile
[23:44:21] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Ping timeout: 268 seconds)
[23:44:31] <geekosaur> Ptr a? seriously?
[23:44:38] <geekosaur> % :t hGet
[23:44:39] <yahb> geekosaur: ; <interactive>:1:1: error:; * Variable not in scope: hGet; * Perhaps you meant one of these: `BSL.hGet' (imported from Data.ByteString.Lazy), `BS.hGet' (imported from Data.ByteString)
[23:44:48] <c_wraith> you went digging for the primitive, you found the primitive :)
[23:44:52] <geekosaur> come to think of it, I guess yes
[23:44:54] <ski> @hoogle openFile
[23:44:54] <lambdabot> System.IO openFile :: FilePath -> IOMode -> IO Handle
[23:44:54] <lambdabot> GHC.IO.FD openFile :: FilePath -> IOMode -> Bool -> IO (FD, IODeviceType)
[23:44:54] <lambdabot> GHC.IO.Handle.FD openFile :: FilePath -> IOMode -> IO Handle
[23:45:30] <zzz> ski: yes, that's what i thought you meant
[23:45:42] * ski nods
[23:46:23] <whatif> does anyone use scotty? why that author of scotty doesn't provide a login session?
[23:46:38] <c_wraith> logging in isn't part of the web.
[23:46:46] <c_wraith> scotty is a web server
[23:46:54] <EvanR> HTTP AUTH
[23:46:56] <whatif> c_wraith: and yesod is a web server?
[23:47:06] <c_wraith> no, warp is a web server
[23:47:11] <geekosaur> yesod is an application framework
[23:47:16] <geekosaur> far moe than a web server
[23:47:20] <c_wraith> yesod is an application framework built on top of warp
[23:47:21] <whatif> EvanR how to do http auth?
[23:47:46] <zzz> it just seems to me it would be useful to have a warning for something like `f x = let Just y = x in y`
[23:48:23] <EvanR> don't do http auth
[23:48:47] <EvanR> use a horrible canned auth solution
[23:48:53] <EvanR> like everyone else
[23:49:13] <whatif> EvanR how they do?
[23:49:15] <ski> % let Just y = Nothing in y
[23:49:15] <yahb> ski: *** Exception: <interactive>:25:5-20: Non-exhaustive patterns in Just y
[23:49:27] <polyphem> whatif: ther is scotty-session
[23:49:32] <ski> % :set -Wincomplete-uni-patterns
[23:49:32] <yahb> ski: 
[23:49:34] <ski> % let Just y = Nothing in y
[23:49:34] <yahb> ski: ; <interactive>:27:5: warning: [-Wincomplete-uni-patterns]; Pattern match(es) are non-exhaustive; In a pattern binding: Patterns not matched: Nothing; *** Exception: <interactive>:27:5-20: Non-exhaustive patterns in Just y
[23:49:39] <ski> zzz ^
[23:49:49] <whatif> polyphem: is it candidate?
[23:49:49] <zzz> oh yay
[23:50:00] <c_wraith> ski: that's runtime.  There really isn't a compile-time warning for an irrefutable pattern match
[23:50:05] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:51:11] <geekosaur> incomplete-uni-patterns is a warning
[23:51:13] <polyphem> whatif: it provides session functionality , you could build your login on it
[23:51:49] <whatif> ok
[23:51:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:51:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:51:55] *** Joins: wroathe (~wroathe@user/wroathe)
[23:51:56] <geekosaur> it's separate from full pattern matching because it only applies to things that can't have alternatives (like let-bound values or lambda parameters)
[23:52:10] <c_wraith> geekosaur: doesn't seem to trigger for me in ghc 9.2.1
[23:52:28] <ski> % let f x = let Just y = x in y
[23:52:28] <yahb> ski: ; <interactive>:28:15: warning: [-Wincomplete-uni-patterns]; Pattern match(es) are non-exhaustive; In a pattern binding: Patterns not matched: Nothing
[23:52:44] <ski> c_wraith ^ ?
[23:52:57] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[23:53:05] *** Quits: coot_ (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot_)
[23:53:11] <geekosaur> works for me in 9.2.1
[23:53:51] <c_wraith> Oh, it's a ghci thing.  It doesn't apply to top-level lets in ghci.  they have to be in a function body
[23:54:16] <geekosaur> let in ghci is "special", yeh
[23:54:20] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[23:54:28] <c_wraith> my mistake
[23:54:29] <geekosaur> recall that used to be the only syntax for binding a value
[23:54:59] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[23:55:00] <c_wraith> yeah, but that used the do block let syntax, not let-in
