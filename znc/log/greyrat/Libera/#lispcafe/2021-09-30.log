[00:01:31] <pjb> Ah, depends if you have -Wall -Werror too, or not.
[00:02:31] <gilberth> -Wconversion
[00:03:28] <pjb> I always assume that and more: https://gitlab.com/bocl/bocl/-/blob/master/sources/common.mk#L16
[00:03:28] -ixelp- sources/common.mk Â· master Â· BoCL / BoCL Â· GitLab
[00:03:46] <gilberth> pjb: Yes, depends. It gets dangerous with stuff like "extern foo();"
[00:05:40] <gilberth> Or declaring sth from libc according to an old API.
[00:41:17] *** Joins: semz (~none@user/semz)
[00:56:46] <GreaseMonkey> Y2K compliance, partying like it's 19121
[00:57:44] * gilberth still has no luck.
[01:00:44] <gilberth> http://clim.rocks/gilbert/cadr-y2k.png
[01:03:32] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[01:13:29] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 268 seconds)
[01:32:02] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:33:37] <hayley> https://www.reddit.com/r/lisp/comments/pxmq81/any_lisp_with_native_reference_counting/heqlvxm/"Hold on, I understand your problem: you are living in 1972."
[01:34:54] <pjb> What's this idiocy? LISP had garbage collection in 1959!
[01:35:04] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:39:20] *** Joins: santiagopim (~user@90.167.66.93)
[01:40:09] <pl> ... isn't two-space copying gc older than refcounts?
[01:40:24] *** Joins: tophullyte (~tophullyt@68.170.104.27)
[01:40:48] <gilberth> I would say yes. And refcounting is no GC in my book.
[01:41:27] <pjb> pl: of course.
[01:41:52] <hayley> https://www.youtube.com/watch?v=ns-fw7a16Gw
[01:41:53] -ixelp- jean-jacques burnel - Freddie Laker - YouTube
[01:42:13] <moon-child> of course rc is gc.  Just a very poor one
[01:42:38] <gilberth> One that does not work.
[01:42:42] <hayley> Refcounting is GC in my GC handbook.
[01:43:31] <Gnuxie> tfw second edition will have some Rust apologia 
[01:43:50] <moon-child> tracing gc will not collect reaachable, dead objects.  This is something you must know if you use it.  Similarly refcounting gc will not collect cycles.  This is something you must know if you use it
[01:44:09] <moon-child> one of these is a far supider caveat than the other; but the existence of caveats in a memory management policy does not make it not gc
[01:44:23] <hayley> But note that the refcounting GC chapter is not the concurrent GC chapter (there is another chapter for that) which is in turn not the real time GC chapter.
[01:48:23] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[02:03:19] <pl> moon-child: well, RC /shouldn't/ collect reachable objects because if an object is dead but reachable it means you lost count
[02:05:12] <moon-child> pl: (let ((x (cons))) (when (undecidable) (access x)))
[02:06:32] <moon-child> this is the general case of the reachable/dead problem
[02:07:11] <pl> and I don't see how RC doesn't involve keeping /at least/ 1 in refcount over the span of that block
[02:07:18] <pl> but arguably it's 0037 here
[02:07:36] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[02:08:19] <moon-child> well, consider if it were decidable.  (let ((x (cons))) (when nil (access x)) other junk)
[02:08:31] <moon-child> we can fold away (access x), and then kill x early
[02:09:06] <moon-child> (now just consider the case where it's decidably nil, but arbitrarily complex such that the optimizer can't figure it out)
[02:09:22] <pjb> hayley: refcounting GC doesn't exist, because if circular structures!
[02:09:50] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[02:09:57] <pl> ah, see, I removed any idea of optimizing that
[02:16:28] *** Joins: Jacobis9100 (~jonaholuf@host86-144-136-140.range86-144.btcentralplus.com)
[02:17:19] <Jacobis9100> Hi! Quick question before bed, my book says a function up to four a's and four d's in cadr is available in lisp
[02:17:34] <Jacobis9100> but that doesn't seem to be the case, how long does it actually get?
[02:18:43] <hayley> Looks like four to me.
[02:19:20] <Jacobis9100> caaddaddr gives me an error
[02:19:27] <moon-child> Jacobis9100: that is up to four letters, each of which may be an a or a d; not four as catenated with four ds
[02:19:39] <Jacobis9100> ah I see thanks
[02:20:21] <Jacobis9100> The book is confusing on this point, it has examples up to one with four letters, and then says, 'And so on', making you think you can go on making longer cadr functions
[02:21:16] <Jacobis9100> Ok thanks guys, I'm off to bed
[02:21:21] <Jacobis9100> Good night :)
[02:21:23] *** Quits: Jacobis9100 (~jonaholuf@host86-144-136-140.range86-144.btcentralplus.com) (Quit: leaving)
[02:30:31] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[02:31:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:54:34] *** Quits: tophullyte (~tophullyt@68.170.104.27) (Quit: Leaving)
[03:01:16] <hayley> Hm, now that I plan to use Lisp macros to generate COND and FOR and whatever else, I wonder if I can do decent enough register allocation to be able to write nested expressions rather than ANF.
[03:04:14] <pjb> Jacobis9100: https://termbin.com/0lgl
[03:05:34] <hayley> In other news, it seems reasonable to me that you can't expect the GC to run awfully predictably, if the rest of your program has unpredictable performance?
[03:25:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:27:03] <hayley> https://www.ibm.com/support/pages/pause-less-garbage-collection-java-8050-and-z14 IBM has a pauseless collector too now?
[03:27:04] -ixelp- Pause-less Garbage Collection with Java 8.0.5.0 and z14
[03:27:28] <hayley> "the Guarded Storage Facility" sounds like a read barrier somehow.
[03:28:44] <hayley> Yes, there is hardware with fast traps for GC.
[03:31:30] <gilberth> When an object is reachable it is not dead by definition. GC never promised to solve the halting problem.
[03:34:16] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 245 seconds)
[03:37:50] <hayley> "Concurrent collection time isn't pause time, your program still runs." "Semantics. Pause time is the time during which my program's logic is paused." "Yes, that isn't pause time." "By pause time I mean the time during which your program logic is not running."
[03:38:12] * hayley 's head hits the desk. Desk is fine.
[03:38:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:38:37] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[03:39:07] <hayley> This guy still hasn't shown me how the OS guarantees low millisecond pauses at best, how we don't swap and burn, and so on. So I don't see how you do prove that the GC is hard real time when everything else isn't.
[03:39:48] <gilberth> Well, real time operating systems exist.
[03:40:03] <hayley> Yes, but he is probably not using a RTOS.
[03:41:12] <gilberth> Perhaps not, no.
[03:41:45] <hayley> So I don't see how he proves anything about latency.
[03:42:38] <gilberth> When is a sub-millisecond latency important anyway outside the context of what you would need an RTOS for, anyway?
[03:42:58] <hayley> "That means, say, 5 ms 100th percentile pause times - whether you have 1000 pointers or 1 trillion." Yeah, still can't prove that.
[03:43:13] <hayley> Dick measuring competitions?
[03:43:24] <gilberth> I mean, are we are talking about some industrial control here? For a machine? Or sth like that?
[03:44:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:44:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[03:45:14] <gilberth> Anyhow, I still don't get why my CADR is not talking to the file server. They talk, but they don't understand each other somehow.
[03:45:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:47:37] <hayley> Though, at least without global pauses (i.e. on-the-fly or pauseless collectors) you won't have a STW to swap in the middle of, so you need to make all the threads pause at the same time to have lossage.
[03:49:18] <hayley> Like, it must be a doohickey measuring contest, because you can't really guarantee anything even if you had a pauseless GC, when using a stock OS.
[03:49:43] <gilberth> So no <https://www.youtube.com/watch?v=3vJWVyEBcdE&t=994s> anymore?
[03:49:43] -ixelp- Garbage the Video - YouTube
[03:50:37] <hayley> I thought the last collector in the video was Baker's incremental copier, so it was only a problem in video-land for five minutes or so.
[03:51:50] <gilberth> Yes, but I still just love that scene. Also the other guy who felt asleep over his terminal.
[03:52:26] <gilberth> Actually is fun to watch the CADR doing a GC for minutes while the system still is responsive.
[03:52:41] * hayley thinks about how to write a Pascal-esque procedure definition. Maybe (procedure (name arg1 arg2 ...) (local1 local2 ...) ...)
[03:52:53] <gilberth> And by minutes, I mean minutes. Literally.
[03:53:09] <gilberth> &aux?
[03:53:18] <hayley> The arguments would just be aliases for the registers, and locals would be stack^Wstatic variables.
[03:53:22] <gilberth> PROG?
[03:53:37] <hayley> I don't need recursion for a metacircular VM, just procedures.
[03:54:07] <gilberth> Procedures could be recursive, too.
[03:54:27] <gilberth> So when you have no recursion, why a stack?
[03:54:47] <hayley> Well, you know, the caller-callee graph is not cyclic. Just INTERPRET -> INSTRUCTION-BLAH -> MEMORY-READ -> FIND-PAGE -> LDB or something.
[03:54:58] <hayley> No stack.
[03:55:12] <gilberth> You don't need one then. The PLZ language for my TTL toy CPU just allocates local variables to static memory locations.
[03:55:26] <hayley> The lcc compiler apparently generates code which eventually blows the stack. I had a little "loader" which would copy from program data into emulated memory, and the stack would blow after 150 words were loaded or so.
[03:56:14] <gilberth> Hayley, what are you doing?
[03:56:26] <hayley> gilberth: Making a LC3 virtual machine which runs under a LC3 virtual machine.
[03:56:46] <hayley> The initial joke went like "So, we have a LC3 virtual machine written in C, and a C compiler for LC3..."
[03:57:02] <gilberth> Ah.
[03:57:25] <gilberth> So you retargeted lcc?
[03:57:47] <hayley> The authors of the textbook did, and they did a shit job.
[03:58:17] <gilberth> I was wondering because gcc is easier to retarget.
[03:58:38] <hayley> As LC3 is word-oriented and not byte-oriented, they have sizeof(int) = 1, and lcc assumes that means "one byte" and refuses to work with larger values.
[03:59:08] <hayley> It also seems lcc generates a lot of ADD Rn, Rn, #15 statements in order to build up to a constant value.
[03:59:14] <gilberth> Oh. Dunno if gcc would cope.
[03:59:27] <gilberth> hayley: lol.
[03:59:52] <hayley> So I am doing as Baker did, and using Lisp macros to implement a structured programming assembler.
[04:00:22] <gilberth> Could at least have been a sequence of ADD Rn, Rn, Rn and optional ADD Rn, Rn, #1 for lit bits.
[04:00:41] <hayley> Yes, you could do it in O(lb) time with that.
[04:01:17] <gilberth> LD Rn, [PC + #offset] not available?
[04:01:26] <hayley> Yes, but lcc doesn't generate those.
[04:01:45] <hayley> What's weird is the LD instruction is PC-relative, and you want LDR (load register) for any other load.
[04:01:58] <gilberth> For ARM it's actually the assembler, which does it for gcc.
[04:04:55] <gilberth> Well, there must be a reason, why I ditched lcc for my TTL RISC design. I modified the ARM backend for it and gcc just copes fine with the more limited ISA.
[04:06:23] <gilberth> I got stuck a little as libgcc is not available in C, but only in assembler.
[04:06:53] <hayley> I saw someone worked on a LLVM backend for LC-3 but I haven't tested it.
[04:08:15] <gilberth> I settled for the golden version 2.95 of gcc and found it easy to work with.
[04:09:15] <hayley> LC3> (and 'r0 'r1 2) â AND r0, r1, #2
[04:09:29] <hayley> I just need to implement a special printer for BR, as it has condition codes.
[04:09:39] <gilberth> You quote register and not the constants? Odd.
[04:11:00] <hayley> (and r0 r1 2) â AND r0, r1, #2
[04:12:08] <gilberth> So LC-3 is a three address load/store ISA? Is the PC a register like any other?
[04:12:21] <hayley> The PC is not exposed, but it is three address load/store.
[04:13:00] <gilberth> How would you do indirect jumps? Self-modifying code?
[04:13:13] <hayley> You can jump to the value of a register.
[04:13:38] <gilberth> LR?
[04:14:00] <hayley> There's BR to jump some offset from the PC, and JMP to jump based on a register.
[04:14:31] <gilberth> Curious names.
[04:14:53] <gilberth> Subroutine calls? Is there a link register (LR)?
[04:15:22] <hayley> Yes. There are single instructions to load an address from a PC-relative word then load/store to it. Much like other textbook stuff, it doesn't seem very close to reality from here.
[04:15:28] <hayley> By convention R7 is the link register.
[04:16:04] <gilberth> No you load R7 with the return address manually?
[04:16:13] <gilberth> So
[04:17:52] <hayley> There is a CALL instruction, but it is a macro for something like JSR target, R7.
[04:17:58] <hayley> Same for RET.
[04:20:08] <gilberth> ok.
[04:20:31] <hayley> Another weird thing is that you finish assembler files with .END - does it really matter there?
[04:21:31] <gilberth> Is this little exercise for school?
[04:21:43] <hayley> Not really. Just bored.
[04:21:51] <gilberth> hayley: Not "FIN"?
[04:22:02] <hayley> I've already done WASM on the printer, SECD on the distributed hash table, CL on the x86-64...
[04:27:04] <hayley> Now (while :positive (add r0 r0 1)) compiles to start0; ADD r0, r0, #1; BRp start0
[04:41:38] * hayley thinks about writing an OR but remembers she has to use De Morgan's law to get it from AND and NOT.
[04:42:53] <gilberth> No OR instruction?
[04:42:59] <hayley> Nope.
[04:44:00] <gilberth> XOR?
[04:44:06] <hayley> Also nope.
[04:44:13] <gilberth> SHR?
[04:44:18] <hayley> Nope again.
[04:44:24] <gilberth> Ouch.
[04:44:27] <hayley> Only ADD, AND and NOT.
[04:44:35] <hayley> Unfortunately I can implement LDB from those...somehow.
[04:44:49] <gilberth> Have fun for your multiplier then without SHR.
[04:45:01] <hayley> I don't need a multiplier, fortunately.
[04:45:29] <gilberth> As I didn't want to build a 32-bit barrel shifter, my TTL design has shift-right-by-one-bit
[04:46:06] <gilberth> LSH is same as ADD it itself, so I don't need that.
[04:46:49] <gilberth> hayley: Indeed, FIB doesn't need multiplication. :)
[04:47:03] <hayley> I want to run LC-3 -> LC-3 -> FIB
[04:47:36] <gilberth> Hmm, (LC-3)**n -> FIB?
[04:48:02] <hayley> Depends on how well paging works, and how much space the VM takes.
[04:48:33] <gilberth> In theory you could do with just ADD.
[04:48:41] <hayley> I get a whole 64kwords, which I had divided into 256 256-word pages. IIRC FIB with the lcc C runtime, memoization table and all required 8 pages?
[04:49:16] <gilberth> That much?
[04:49:22] <hayley> Yes.
[04:49:37] <gilberth> The crammed LISP in less.
[04:50:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:51:56] <hayley> Here we go: https://plaster.tymoon.eu/view/2655
[04:55:10] <hayley> Now it looks like I wrote the 24 LOC of assembler by hand.
[04:59:11] <gilberth> Can't you do the inner loop with just negative logic? Saving the constant negation?
[04:59:47] <hayley> That hurts my head.
[04:59:52] <gilberth> lol
[04:59:56] <hayley> Now the supposedly two pass compiler complains that I have defined a label twice.
[05:00:02] <hayley> s/compiler/assembler
[05:00:28] <gilberth> It's two pass after all, isn't it?
[05:01:04] <hayley> It's also possible that the assembler is a nazi and wants BRnp rather than BRpn.
[05:01:22] <hayley> Indeed it is.
[05:09:16] <hayley> My LDB seems to work somehow.
[05:23:41] <hayley> The other function I need is sign extension, which can be done with the same lookup table.
[05:26:36] <gilberth> Signed LDB?
[05:26:56] <hayley> Pretty much.
[05:27:42] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[05:36:22] <gilberth> hayley: Why don't you just say: (unless (= 0 (and r3 integer source-mask)) (incf result destination-mask) in the loop instead of ORing?
[05:36:50] <hayley> Good point.
[05:37:17] <hayley> It seems SBCL has fooled my plan to use macros, because it resets *gensym-counter* between top level forms.
[05:37:42] <gilberth> GENTEMP
[05:38:04] <hayley> We found a use for GENTEMP!
[05:39:16] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[05:40:47] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[05:47:14] <hayley> Only 72 words for LDB and SIGN-EXTEND, and a little test program.
[05:48:17] <mfiano> Did you implement sign-extend?
[05:48:44] <hayley> Yes.
[05:48:54] <mfiano> In CL, or asm/vop/etc?
[05:49:02] <hayley> In LC-3 assembly: https://plaster.tymoon.eu/view/2655
[05:49:08] <mfiano> Ok nevermind then.
[05:49:26] <hayley> ...using CL as a macro assembler.
[05:50:46] <mfiano> I don't have enough active brain cells left until I recharge, so I will refrain from clicking, sorry.
[05:51:01] <mfiano> Wasted them all on my design today, and trying to help paule32 in #commonlisp
[05:51:14] <hayley> It's okay.
[05:51:15] <mfiano> (and I still don't even know what they were stuck on)
[05:51:42] <hayley> "You are going to Brazil^Wwrite OOP code in CL." - me
[05:52:29] <mfiano> After the long discussion I am not even sure if there is an architectural problem or a how to use classes problem.
[05:52:36] <gilberth> Ok. Brad Parker's original FILE server just segfaults as soon as I login. Is that progress?
[05:53:08] * mfiano thinks the guy should stick to CL instead of C++. I feel like I am the one that tries to teach him the basics once per year when he decides to show up on IRC with some ambitious project idea without even knowing language basics
[05:53:28] <gilberth> But as we learned C programs are supposed to crash and burn. So I'd say: yes.
[05:53:32] <mfiano> i will stop ranting now and plan my design ideas for tomorrow
[05:53:55] <hayley> https://www.youtube.com/watch?v=wIfo8PsXMK8
[05:53:55] -ixelp- Burning Airlines Give You So Much More (2004 Digital Remaster) - YouTube
[05:57:46] <gilberth> mfiano: Hayley is practicing for implementing Lisp on my itty bitty CPU design.
[05:58:10] * hayley hopes gilberth was less dumb about picking instructions.
[05:58:36] <gilberth> Ok. The original CADR simulator is so laggy, that I can't use it remote. I don't know whether I broke my version. *Sigh*
[05:58:48] <mfiano> Ah cool. If it was a 6502 i might be interested :)
[05:58:57] <gilberth> hayley: Dumb? Just cheap.
[05:59:05] <mfiano> Wrote an assembler and disassembler for it so far, though haven't worked on it in a few months.
[06:00:02] <gilberth> mfiano: I must disappoint you. It's 32-bit and word oriented: <http://clim.rocks/gilbert/b32/doc/intro.html>
[06:00:02] -ixelp- A homebrew 32-bit CPU with TTL chips
[06:00:24] <mfiano> Oh well
[06:01:25] <gilberth> You have two registers. An accumulator and a program counter. Have fun.
[06:01:51] <hayley> At least I don't have to write another register allocator.
[06:01:59] <gilberth> lol
[06:03:12] <gilberth> hayley: Well I could mimic RISC by setting aside a few registers^Wmemory words as what would be registers. So ADD R1, R2, R3 => LOD R1 ; ADD R2 ; STO R1 :-P
[06:03:13] <mfiano> Don't cry over spilled registers
[06:04:15] <gilberth> Actually that scheme would be a good strategy for a compiler, because accessing the stack is painful with no SP and no indirect addressing either.
[06:04:43] <gilberth> But: You could have as many registers as you want.
[06:05:12] <gilberth> *Sigh* I should write more.
[06:06:48] <gilberth> And I want a Chaosnet FILE server. On a stick. Now!
[06:08:22] <gilberth> I could port TeX to the CADR. Not.
[06:09:44] <hayley> https://www.youtube.com/watch?v=IW2TslVcpWU
[06:09:44] -ixelp- A Saucerful Of Secrets (Live) (2011 Remastered Version) - YouTube
[06:19:51] <gilberth> Meanwhile a little graphics demo: <https://free-clim.org/cadr-munch.mov>
[06:20:39] <gilberth> I have not yet tried the other demos.
[06:22:17] <gilberth> The FILE serve is awkward to debug. It's launched from a daemon, with its stdin and stdout the network connection. How to get gdb into that?
[06:22:55] <gilberth> Or: How would I turn on core files being dumped?
[06:28:07] <gilberth> lol. Now gdb dumps a core, too.
[06:38:41] <hayley> https://www.youtube.com/watch?v=Er5WWRcQhzg
[06:38:42] -ixelp- pigs - YouTube
[06:39:50] <manicennui> Fake pigs.
[06:43:28] <gilberth> I love this. When I cling gdb inbetween, it seems to work. Terrific.
[06:44:03] * hayley starts to wonder if there is a pattern in making programs do stupid things by giving ^D.
[06:44:25] <gilberth> Try ^@
[06:44:38] <hayley> The LC-3 VM in C I found continually spewed out ^377 or something, the C++ assignments I got last year would think you typed nothing and prompt indefinitely...
[06:45:07] <gilberth> EOF?
[06:45:14] <moon-child> 'prompt indefinitely' eof
[06:45:15] <hayley> Yes.
[06:45:24] <moon-child> and ^377 is octal 355, ~-1 (also eof)
[06:45:29] <moon-child> 255
[06:45:32] <gilberth> Me gets used to octal. :)
[06:47:20] <gilberth> I want a CADR emulator that (1) is snappy (I have that) and (2) works out of the box (I work on that).
[06:48:42] <gilberth> For others to play with.
[06:51:38] <gilberth> moon-child: ~0 is E0F ~-1 is NUL :-p
[06:51:59] <moon-child> â¨
[06:52:41] <moon-child> gilberth: two's complement is not portable! :^)
[06:52:53] <gilberth> Indeed.
[06:53:44] <gilberth> The FILE server knows whether a file is opened in binary or as text. I could write a converter between the Lispm character set and UTF-8. When I get that damn animal to behave.
[06:55:01] <gilberth> Now my laptop tells me, my disk is full? Is it kidding me?
[06:56:39] <gilberth> Not my night.
[07:05:54] *** Joins: selwyn (~selwyn@user/selwyn)
[07:33:41] *** Quits: semz (~none@user/semz) (Ping timeout: 264 seconds)
[07:38:21] <gilberth> It's frustating how little progress I make. I call it a night.
[07:43:52] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[07:44:28] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[07:46:08] *** Joins: semz (~none@user/semz)
[08:04:38] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[08:19:04] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:49:38] <White_Flame> gilberth: maybe you should try talking to paule32 on #commonlisp instead.  That's even less progress! \:D/
[08:54:29] <dave0> maw
[08:58:46] <mfiano> haha
[08:59:21] <mfiano> I am saving the little hair I have left for my project's design document tomorrow :)
[09:06:36] <gilberth> White_Flame: That bad? Nah, I believe I keep hiding here at our cozy CafÃ©.
[09:07:19] <White_Flame> he's a "special" case
[09:07:39] <gilberth> Yes? In what way?
[09:07:43] <White_Flame> it goes way beyond just a language barrier (he's natively german)
[09:07:51] <White_Flame> inability to think/learn/communicate
[09:08:25] <gilberth> Yep, happens.
[09:08:28] <White_Flame> it's been _years_ that he pops on and asks the most basic of basics
[09:08:43] <mfiano> insistant on using Notepad and counting parentheses by dangling them on their own lines should say enough.
[09:09:02] <White_Flame> well, it's Notepad++, which might have paren matching
[09:09:08] <gilberth> Years? So, literally no progress. Gosh. Somehow I even remember that nick somehow.
[09:09:30] <mfiano> A negligible step towards interacting with the image
[09:09:40] <mfiano> Yes, years.
[09:10:28] <gilberth> mfiano: We should give him a nice ruler which he could hold up against the screen for counting parens.
[09:10:57] <mfiano> :)
[09:11:49] <gilberth> OTOH. Respect! Years with no progress -- that's persistent.
[09:11:49] <mfiano> I just can't begin to imagine how he has had zero progress in so long, or why he chooses to use CL to begin with.
[09:12:26] <mfiano> He wants to write CL like "delphi, php, c" from my conversation with him yesterday
[09:13:20] <gilberth> Oh! Then he should brush up on parsers and macros and/or compiling. Don't mention that I have a Pascal "compiler".
[09:13:25] <mfiano> The worst part is he joined the channel with a vague question "how do i design an IC simulator in CL?"
[09:13:41] <gilberth> lol
[09:14:24] <mfiano> and it took two days for us to ask the right questions to get us down to the recent observations that he wants to write CL like Blub
[09:14:52] <gilberth> Blub?
[09:15:12] <mfiano> http://www.paulgraham.com/avg.html
[09:15:13] -ixelp- Beating the Averages
[09:15:39] <mfiano> gilberth: You call yourself a Lisper? :)
[09:15:46] <mfiano> Oh no, not another one ;)
[09:16:38] <mfiano> and two days, mostly because he can't understand English or CL, and we can't understand his English or his CL :)
[09:16:57] <mfiano> dual language barrier. oof
[09:18:26] <gilberth> I see.
[09:18:41] <Qwnavery> he could atleast learn vi/vim no?
[09:18:57] <mfiano> I basically directed them to a learning resource and politely told them i won't be wasting anymore of my time, like beach and a couple others that refuse to help him.
[09:19:04] <gilberth> Oh yeah. *beep* *beep* *beep*
[09:19:09] <Qwnavery> like really, notepad++
[09:19:22] <mfiano> I didn't want it to devolve into me hurting their feelings, because I have completely lost my patience with them.
[09:20:04] <gilberth> Ok. So that is that kind of guys who doesn't do his home work? Neither in English nor in CL?
[09:21:09] <mfiano> I think he is one of those people that do random projects in as many languages as they can to feel important on their social network^W^Wgithub
[09:21:51] <gilberth> Ah. A true wannabee. In the literal sense.
[09:23:19] <mfiano> I assume so
[09:23:34] <gilberth> Good that I hide here. The older I get the less patience I have for people not doing their damn homework.
[09:23:52] <mfiano> I wasted too much time trying to help them over the last couple days, and in the past. I am also wasting time talking about my wasted time, so I shall be productive now :)
[09:24:33] <gilberth> I gave up on being productive tonight. And besides I am overdue. Again.
[09:24:52] <mfiano> Oh, well good night!
[09:25:18] <gilberth> I just don't get why this damn FILE server is working with Linux, but not with macOS.
[09:26:57] <dave0> hayley: https://www.loudersound.com/features/why-you-should-definitely-own-discipline-by-king-crimson
[09:26:57] -ixelp- Discipline by King Crimson: why you should definitely own it | Louder
[09:26:58] <gilberth> Apart from not working in 64-bit at all. But that is kinda expected.
[09:27:54] <gilberth> mfiano: I'll lurk a while here to shut down my brain. Thanks!
[09:28:25] <mfiano> I've initiated shutdown process as well.
[09:29:39] * gilberth hears a computer voice "Shutdown initiated. Shutdown in 30 minutes." in his head.
[09:30:20] <gilberth> A Star Trek computer voice. Wasn't there something like an auto-self-destruct or something with a count-down?
[09:31:16] <dave0> i think data started the self-destruct-sequence in one episode
[09:31:24] <mfiano> Obligatory 80's "T-minus" in there somewhere too.
[09:31:33] <gilberth> But then Linux mimics SYSV, while macOS is BSD. Hmm.
[09:31:48] <dave0> do we talk about the next generation, or only the original series?
[09:32:18] <gilberth> I really don't remember each and every episode. But mfiano saying "initiated" triggered a vague memory.
[09:34:22] <mfiano> I have no idea. I remember watching TNG with my father like 35(?) years ago, and I didn't like it, and never really interested me to date.
[09:34:22] <dave0> engage
[09:34:51] <gilberth> Voyager? I found <https://www.youtube.com/watch?v=SYfGPFSMevY> on YT.
[09:34:51] -ixelp- Star Trek: Voyager - Self-Destruct Sequence (Dreadnought) - YouTube
[09:35:22] <dave0> i was gonna say there is probably a self-destruct episode in every star trek spin-off show :-)
[09:35:53] <gilberth> DS9, too?
[09:36:05] <dave0> i dont remember but there's gotta be :-)
[09:36:43] <dave0> holodeck malfunction too
[09:37:41] *** Joins: shka (~herr@109.231.6.176)
[09:38:49] <gilberth> Which remind me that I still have all of Star Trek on DVD, never got around to rip that.
[09:39:23] <gilberth> But the here forbidden episodes are perhaps missing, haven't checked.
[09:39:32] <Qwnavery> gilberth: what are you using for the FILE server? ftp?
[09:40:42] <gilberth> That is Chaos net. I work with the server that came with Brad Parker's CADR emulator.
[09:41:22] <gilberth> It's a virtual Chaos network with a router listening to a unix domain socket to which the CADR simulator and the servers connect.
[09:42:13] <Qwnavery> oh. I don't have a lisp machine, or any knowledge of the CADR sim.
[09:42:32] <Qwnavery> Is there a git repo for the sim?
[09:43:05] <Qwnavery> *emulator simulator, tomato tomato
[09:43:15] <gilberth> Perhaps. Or look at Brad Parker's site.
[09:43:54] <Qwnavery> is it unlambda.com?
[09:44:21] <gilberth> https://www.youtube.com/watch?v=h1YoVo_y0tU
[09:44:21] -ixelp- You say potato and I say potato - YouTube
[09:44:22] <Qwnavery> ah dw, found it
[09:44:57] <gilberth> I fixed the console emulation. The simulated frame buffer was real slow, not it's very snappy.
[09:45:30] <Qwnavery> I'm not a trekkie, but is it just me or does he look like the zucc?
[09:46:08] <gilberth> zucc? Who's the zucc?
[09:46:16] <Qwnavery> Mark Zuckerburg
[09:46:27] * gilberth checks
[09:46:38] <gilberth> You believe so?
[09:47:08] <Qwnavery> https://www.youtube.com/watch?v=YeemJlrNx2Q
[09:47:08] -ixelp- Zucc Smokin Meats - SONGIFY THIS - YouTube
[09:48:38] <gilberth> Qwnavery: <https://free-clim.org/cadr-remote.mov> That is the simulator running remote via DSL to my box at my house 100km away.
[09:49:56] <Qwnavery> you streaming this rn?
[09:50:12] <gilberth> Indeed. Another android!
[09:50:17] <gilberth> rn?
[09:50:29] <gilberth> Nope. Recorded.
[09:51:01] <gilberth> Boring graphics demo: <https://free-clim.org/cadr-munch.mov>
[09:51:17] <gilberth> Qwnavery: ck_ asked me to do a recording.
[09:51:34] <Qwnavery> Right now. Apologies I won't use abbreviations like that.
[09:51:51] <gilberth> I got that. Took me a while :)
[09:51:54] <Qwnavery> Playback is broken for me.
[09:52:10] <gilberth> A pity. I should make .mp4's then.
[09:52:38] <Qwnavery> mov is a terrible format for network
[09:53:08] <Qwnavery>  It's not even letting me download it :(
[09:53:24] <gilberth> I noticed. This was just the quickest solution for me as I need ages to figure how to use ffmpeg for recoding.
[09:53:37] <Qwnavery> Cadr Munch is working
[09:53:51] <gilberth> Hugh? Now that should work. It's just a file sitting on the web server.
[09:54:19] <White_Flame> mfiano: noooooo
[09:54:19] <Qwnavery> For a little bit.
[09:54:23] <gilberth> And it's the Apache at my hoster and not CL-HTTPD as CL-HTTPD somehow cannot cope with streaming.
[09:54:24] <Qwnavery> Argh
[09:54:27] <mfiano> Oh no
[09:54:32] <mfiano> I really ought to sleep
[09:54:43] <White_Flame> dropping a grenade and running?
[09:54:44] <Qwnavery> gilberth: I'm in Australia so it's travelling across several oceanlines and global proxies.
[09:54:46] <gilberth> Good night, then. Take care.
[09:54:52] <Qwnavery> Night mfiano
[09:55:02] <White_Flame> he invited paule32 here 
[09:55:11] <gilberth> Who?
[09:55:17] <mfiano> o/
[09:55:23] <gilberth> You?
[09:55:25] <mfiano> I am too tired to know what I am doing at this point
[09:55:26] <White_Flame> the ununderstanding person
[09:55:36] <White_Flame> (the derstanding person?)
[09:55:52] <gilberth> No verstanding, for sure. :)
[09:56:04] <Qwnavery> standing person
[09:56:14] <Qwnavery> he's still. not going anywhere.
[09:58:03] <gilberth> Yes, not making progress. That was already mentioned.
[09:59:47] <mfiano> Countdown timer finished
[10:00:22] <gilberth> Hmm, nothing happens. I am disappointed.
[10:01:32] <Qwnavery> whoo I got cadr-munch
[10:03:05] <Qwnavery> gilberth: what hardware is that being emulated on that's sick
[10:03:51] <Qwnavery> like a pi? aarch64? mips?
[10:04:10] <gilberth> Try <http://bauhh.de/cadr-remote.mov> perhaps that machine has a better peering for you.
[10:05:21] <gilberth> Qwanvery: That's an mid-2015 Macbook, that I have here. When that was your question. i7 2.2GHz.
[10:06:41] <Qwnavery> that's nutty
[10:06:50] <Qwnavery> from a 100km away and it's that fast???
[10:07:12] <gilberth> Yep.
[10:08:18] <Qwnavery> This could be well worth hacking to get to run on arm64 so I can have a remote cadr pi
[10:08:41] <Qwnavery> can I mirror those files on my homeserver?
[10:08:53] <gilberth> Sure. I don't see why that won't work.
[10:09:03] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[10:09:12] <gilberth> The videos? Sure. Attribute me.
[10:09:22] *** Joins: robin (~robin@user/terpri)
[10:09:31] <Qwnavery> for sure
[10:10:05] * gilberth thinks.
[10:10:34] <Qwnavery> website is www.lambdaspace.xyz I'm currently reworking it so it's not going to hurt any casual visitors eyes
[10:11:23] <gilberth> I'll setup a page for my little project I would ask you link, if you don't mind. I cannot yet decide on a machine or domain.
[10:12:30] <Qwnavery> of course!
[10:13:28] <gilberth> Great! I am delighted you enjoyed it. I'll make more demos, when I get that f***ing FILE server behave.
[10:14:59] <Qwnavery> hehe
[10:15:16] <Qwnavery> I'm actually in the process of setting up a mediaserver for public
[10:15:25] <gilberth> The CPU emulator is not even optimized in any way. Brad Parker mentions that, it was a tool for him to understand the machine and craft the Verilog.
[10:16:05] <Qwnavery> I currently have an Emby server, but it's not exactly ideal for public viewing (plus it's closed source) though I'm considering switching to peertube, jellyfin or mediagoblin
[10:16:54] <Qwnavery> damn. I want to dig into the source now.
[10:17:29] <gilberth> But our machines are so incredible fast these days. The remote Linux box is now at 12ns simulated cycle time. That is 83MHz. The real CADR ran at 5MHz.
[10:18:20] <Qwnavery> considering we have GHz machines, I think it could be a fun experiment clocking it up to at least 1GHz
[10:18:30] <Qwnavery> :D
[10:18:49] <gilberth> We could do that when we JIT the microcode.
[10:19:31] <gilberth> The 200ns cycle time is the microcode cycle time. It takes a couple of cycles for one Lisp LAP macro instruction.
[10:20:20] <Qwnavery> that's a bit expensive. I get why you're only running it at 83MHz
[10:20:34] <Qwnavery> who else is working on it?
[10:21:07] <gilberth> I guess nobody. Brad Parker wanted to have it on an FPGA.
[10:21:39] <gilberth> And I just wanted to fix the dumb and very slow frame buffer emulation. The original emulator feels slower than it is.
[10:23:04] <gilberth> I off-load frame buffer updates to another thread which just looks at the frame buffer every now and then and sends changes to the X server. Emulation speed is not hurt by that at all.
[10:24:25] <Qwnavery> and you still have lighting fast speed from 100km away?
[10:24:28] <Qwnavery> that's nutty
[10:25:31] <gilberth> Yes. Sending _bit_maps down the DSL line isn't that expensive. I am careful to limit dirty regions to send. And I avoid any round-trips.
[10:28:12] <gilberth> Have you seen my remote CLIM demo? <http://bauhh.de/free-clim/free-clim-remote.mov> Same setup.
[10:28:49] <Qwnavery> no, I have not
[10:29:01] <Qwnavery> downloading... :P
[10:29:07] <gilberth> :)
[10:30:00] <Qwnavery> I have wondered though, has anyone tried to buy out the shell of Symbolics?
[10:30:35] <gilberth> The domain is not for sale.
[10:31:01] <Qwnavery> not the domain, the remains of the Company
[10:31:12] <gilberth> I doubt it would be exactly cheap.
[10:31:30] <gilberth> Do we even know who owns it?
[10:31:33] <Qwnavery> I do too.
[10:32:14] <Qwnavery> on the symbolics-dkms website it's possible to get in contact with them
[10:32:52] <Qwnavery> *symbolics-dks
[10:33:00] <Qwnavery> http://symbolics-dks.com/
[10:33:19] <Qwnavery> David Schmidt is apparently the only guy you can get in contact with
[10:33:28] <Qwnavery> Whether or not he's the owner, who knows?
[10:33:49] <Qwnavery> I've tried searching but I can't find anything on the elusive David Schmidt
[10:34:22] <gilberth> Hmm.
[10:34:54] <Qwnavery> makes me wonder though, if this is the wonderful stuff MIT had to offer wayy back then, I wonder what they're cooking up now
[10:35:33] <gilberth> Cooking?
[10:36:12] <Qwnavery> a figure of speech, s/cooking/developing/
[10:36:38] <gilberth> Sure. But what would there be to cook? It's a dead horse.
[10:36:55] <Qwnavery> MIT?
[10:37:10] <gilberth> No, the Lisp machine.
[10:37:37] <Qwnavery> oh. yeah, if you say so. No I was just speaking in general.
[10:38:15] <Qwnavery> I personally don't believe lisp machines are entirely dead yet.
[10:38:25] <gilberth> Has anything of significance happened in the last thirty years in CS in general?
[10:38:35] <mfiano> Yes
[10:38:36] <Qwnavery> I don't know, haven't been alive that long.
[10:38:46] <mfiano> Just one thing
[10:38:51] <shka> well, okasaki paper was published
[10:38:57] <gilberth> Qwnavery: RAM is cheap these days, so no need for a Lisp machine anymore.
[10:39:08] <mfiano> We write sloppier, slower, worse, code and justify it as okay because we have better computers.
[10:39:10] <shka> so that's something i guess
[10:39:40] <Qwnavery> it's not about resources, it's about saving time and energy and preventing to collapse due to overcomplexity
[10:39:57] <Qwnavery> the human brain can only handle so much complexity, and complexity scales.
[10:40:10] <gilberth> We are still not at GC being universally accepted. Or dynamic typing. The field will get there as languages will converge towards Lisp. Slowly.
[10:40:30] <mfiano> In another 10 years we'll have electron-based VM's running electron-based web browsers, running a notepad++ emulator
[10:40:43] <mfiano> pile on the stack and watch it tumble over
[10:40:53] <gilberth> Heh.
[10:41:03] <Qwnavery> I don't want that, because in 10 years I'll be 27.
[10:41:15] <Qwnavery> I'll have to clean up the mess or go back to the stone age.
[10:41:21] <gilberth> And meanwhile say good bye to folders^Wdirectories. ;)
[10:41:54] <Qwnavery> gilberth: what do you mean by that?
[10:42:19] <hayley> CLOSOS?
[10:42:21] <Qwnavery> ipfs, unix "philosophy" (everything is a file), heirachy management?
[10:42:33] <gilberth> Someone posted here that people of your age have trouble with the concept of a hierarchical file system.
[10:42:50] <hayley> Netfarm, Smalltalk philosophy, object systems?
[10:42:52] <gilberth> Or a file system at all.
[10:43:15] <Qwnavery> what. how the f*ck do you not understand a tree with roots.
[10:43:18] <Qwnavery> it's the same thing.
[10:43:28] <gilberth> hayley: Dream on, lady. Has been proposed a gazillion times.
[10:44:04] * Qwnavery picks up laptop
[10:44:10] <Qwnavery> it's time to redecentralize
[10:44:12] <mfiano> a tree with a root you mean?
[10:44:21] <mfiano> otherwise it's a forest :)
[10:44:21] <gilberth> Qwnavery: Operating systems like Windows or macOS and more so iOS try very hard to not bother the user with the place some file is stored at.
[10:44:26] * Qwnavery throws laptop out the window
[10:45:04] <gilberth> It drives me crazy as I'd like to know where my files are.
[10:45:09] <Qwnavery> mfiano: ah i guess... semantics...
[10:45:15] <mfiano> I cannot stand hierarchical file systems
[10:45:33] <gilberth> They are fine.
[10:45:51] <mfiano> Infact I have considered writing an application to tag all of my papers that I can't locate on my file system
[10:45:51] <Qwnavery> gilberth: I grew up on windows and It was hierachial
[10:46:07] <Qwnavery> I don't even understand how it's possible to *not* have a heirachial filesystem
[10:46:28] <Qwnavery> letalone fail to understand the most basic of concepts of partitioning
[10:46:36] <dave0> Qwnavery: luxury
[10:46:42] <gilberth> I mean you don't pile up a few 100k files on just one gigantic heap. You keep projects and within projects, e.g. sources and modules, and documentation, etc.
[10:46:49] <dave0> in the 80's we wrote raw disk blocks
[10:46:59] <Qwnavery> "muh gamez, caveman point and click, get dopamine... ooga booga"
[10:47:06] <gilberth> With a magnet, dave0, yes.
[10:47:12] <dave0> gilberth: lol
[10:47:30] <mfiano> My problem isn't with hierarchical file systems. It's with the lack of adequate metadata.
[10:47:48] <gilberth> Qwnavery: Yes, but the trend is to hide that from users. Or: Does an iPhone expose it's file system in any way?
[10:47:55] <Qwnavery> mfiano: what about zfs?
[10:48:15] <Qwnavery> or btrfs if you swing that way
[10:48:30] <Qwnavery> gilberth: when I jailbreak it, it does. :)
[10:48:33] <mfiano> I may want to apply some text to a folder, or maybe 20 snippets of text, and then we get into structuring that text with designated fields like "year", "date", "tags", etc
[10:48:43] <gilberth> The trouble with meta data is, that you cannot transport it well.
[10:49:12] <Qwnavery> why do you need that data in folders? at that point you might aswell have a database external to your filesystem logging all that stuff
[10:49:28] <mfiano> One can't stick a lisp paper that introduces a CLOS OS, in a lisp directory AND an operating systems directory that are siblings of each other
[10:49:44] <hayley> https://bluishcoder.co.nz/self/transporter.pdf is right there.
[10:49:53] <Qwnavery> ln -s
[10:49:56] <Qwnavery> :)
[10:50:02] <mfiano> then you no longer have a tree!
[10:50:08] <mfiano> bye bye hierarchy!
[10:50:14] <Qwnavery> it's a quantum superposition tree
[10:50:19] <gilberth> I have 4.7M files below /home/gilbert/ would that work with just tags?
[10:50:24] <Qwnavery> you don't know where it goes til you look inside!
[10:50:53] <gilberth> Could I tar sth up and transport it somewhere else?
[10:50:53] <mfiano> and links are horrible in this regard
[10:51:01] <mfiano> since they are unidirectional
[10:51:13] <mfiano> When I delete the source of a link, do I want to go find all broken links, etc etc
[10:51:14] <Qwnavery> also why are domains and DNS records so excessively complex
[10:51:17] <mfiano> file systems are horrible
[10:51:49] <gilberth> They are fine.
[10:52:00] <Qwnavery> for people without static IP addresses they are not.
[10:52:07] * mfiano has like 20k papers in a flat directory structure because i gave up categorizing them and managing links
[10:52:23] <gilberth> What has a static IP to do with a file system?
[10:52:30] <Qwnavery> ipfs
[10:52:55] <Qwnavery> which is next gen filesystems 
[10:53:03] <Qwnavery> (which happens to be heirachial)
[10:53:05] <gilberth> What's that? A cloud? AFS reloaded?
[10:53:38] <Qwnavery> interplanetary filesystem
[10:53:46] <Qwnavery> global filesystem
[10:54:01] <mfiano> p9 :)
[10:54:10] <gilberth> I see. But that orthogonal to how we organize files.
[10:54:24] <Qwnavery> I've been tempted to try p9
[10:54:49] <Qwnavery> gilberth: agreed, apologies for bringing it up
[10:55:10] <Qwnavery> mfiano: how do you propose one organizes a filesystem them?
[10:55:40] <Qwnavery> throw everything onto the desktop and drag around the entire desktop like a giant panel until we find what we're after?
[10:56:17] <gilberth> Well, what I hate is that I have to manage manually on which box my files are. As I hide here at my Cousin's place while my Linux box, where I used to keep all files is now remote. Thus sucks, as our internet is just slow with it's 30ms latency.
[10:56:23] <Qwnavery> what about "every file is a s-exp" and all the metadata is generated from macros
[10:57:26] <mfiano> I envision data stored in a, wait for it...database with relational queries. The filesystem would just be an interface to those queries.
[10:58:35] <gilberth> Same thing with backups. Why can't I have a distributed personal system that manages all that for me?
[10:58:43] <Qwnavery> hm, who would've thought the most effective way to store data is in a database. I guess you got a point because once it's in there you can display it anyway you want.
[10:58:56] <gilberth> mfiano: That would have me still work with directories.
[10:59:18] <Qwnavery> You can create a frontend that treats it exactly like a unix system.
[10:59:30] <Qwnavery> however, there are costs in doing so.
[10:59:38] <Qwnavery> speed.
[11:00:00] <gilberth> Speed?
[11:00:49] <Qwnavery> much more overhead in converting unix psuedodirectories into a database query
[11:00:52] <Qwnavery> and back
[11:00:55] <mfiano> Yes there are
[11:02:36] <mfiano> space would be the biggest cost
[11:03:07] <gilberth> Well, there is one thing I miss with unix. And that is what logical hosts for CL provide. For a session bind a certain physical directory to some logical name.
[11:03:15] <Qwnavery> space isn't too much of an issue considering how huge we have drives now
[11:03:29] <Qwnavery> you could also compress parts of the database
[11:03:57] <Qwnavery> you'd need to have some power-loss management systems aswell
[11:04:19] <Qwnavery> because if it's mid-compression and writing, you don't want to loose all your data
[11:04:39] <gilberth> That is trivial.
[11:04:44] <Qwnavery> you'd also essentially need a paging file/swap space for your storage
[11:05:51] <Qwnavery> But it all causes overhead.
[11:06:00] <Qwnavery> What happens if you want disk encryption?
[11:06:31] <mfiano> I don't know. It's not like I will write such a thing.
[11:06:31] <gilberth> At times I miss the drive letters of DOS, which you assign with "SUBST" (IIRC) and they would keep their own working directory.
[11:07:04] <gilberth> What's with encryption? I would want that in any case. All my disks are encrypted.
[11:07:15] <Qwnavery> more. overhead.
[11:07:20] <mfiano> I just think it will save people a lot of time finding infotmation. Instead we have dedicated applications for a niche of file types that do similar things, like "ebook manager"
[11:08:04] <gilberth> When you are used to directories, you don't waste much time finding things.
[11:09:15] <Qwnavery> find / | grep "$MYEBOOKNAME"
[11:09:20] <mfiano> except when taxonomies don't make sense
[11:09:40] <gilberth> But, yes, at uni we once were asked to implement full text indexing. My friend and me went so far to also index tar files. That was handy.
[11:10:06] <gilberth> Qwnavery: man locate
[11:10:28] <mfiano> It is similar to the diamond problem in OOP, and why traditional OOP is not suited to every problem
[11:10:32] <Qwnavery> man: no entry for locate in the manual.
[11:10:45] <gilberth> Poor.
[11:10:54] <mfiano> You keep pushing classes up a level until you're left with a god object with 5000 members
[11:10:58] <Qwnavery> Package 'locate' not found in repository pool.
[11:11:13] <gilberth> More poor.
[11:11:19] <Qwnavery> :|
[11:11:33] * Qwnavery installs awk
[11:11:49] <gilberth> It's ancient. Perhaps it got renamed for no good reason. locate(1) that is.
[11:12:32] <Qwnavery> lel
[11:13:54] <Qwnavery> just use zfs pools
[11:14:21] <Qwnavery> you can essentially do the drive letter assignment of dos with subst
[11:14:36] <Qwnavery> treat anything as a working directory
[11:14:56] <Qwnavery> and data is automagically spread across the disk
[11:15:15] <Qwnavery> it's even got versioning for backups :D
[11:15:18] <gilberth> Nah, current Debian still has locate(1).
[11:17:03] <Qwnavery> I'm not on Debain
[11:17:10] <Qwnavery> *Debian
[11:17:20] <Qwnavery> hehe updates
[11:17:35] <gilberth> Even more poor. ;)
[11:17:37] <Qwnavery> I'm on a rolling release: Void Linux
[11:17:51] <gilberth> You love downgrading?
[11:18:03] <Qwnavery> no, superiority.
[11:18:16] <Qwnavery> bleeding edge
[11:18:31] <gilberth> As I said. Downgrading all the time.
[11:18:54] * hayley uploaded an image: (393KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/huXeJSYkFGmwfWBXBhjsGdZl/closos2.png >
[11:18:56] <Qwnavery> ._.
[11:19:57] <Qwnavery> hayley: who are the people on the right?
[11:20:19] <hayley> Adele Goldberg, David Moon, Dan Ingalls, Gnuxie
[11:20:24] <gilberth> I mean I recently installed the latest Emacs. Downhill, they broke the text cursor. Unusable. <http://clim.rocks/gilbert/emacs-broken.png>
[11:20:54] <gilberth> This is why I hate upgrading for no reason. When I am fine, why should I upgrade>
[11:23:01] <gilberth> I mean, I just want to hack on my little projects and have fun. Not fix that damn GNU Emacs.
[11:23:45] <Qwnavery> use vim then.
[11:23:49] <Qwnavery> >:)
[11:24:43] <gilberth> *beep* *beep* *beep* No way. I used vi once with a physically detached speaker to port uemacs, then, over to the XENIX I just got.
[11:24:50] <Qwnavery> hayley: these people are based
[11:25:18] <Qwnavery> gilberth: you wanna see something cursed?
[11:25:41] <gilberth> Curesed? Using curses? No X11?
[11:25:48] <Qwnavery> https://www.spacemacs.org/
[11:25:49] -ixelp- Spacemacs: Emacs advanced Kit focused on Evil
[11:26:02] <Qwnavery> my choice of editor >:)
[11:26:18] <mfiano> I wish I had the patience of White_Flame
[11:26:35] <White_Flame> eh, I'm having enough fun at his expense
[11:26:56] <gilberth> Am I missing out?
[11:27:02] <Qwnavery> wait he's *still* going?
[11:27:03] <White_Flame> he's on #clschool now
[11:27:05] <White_Flame> yep
[11:27:13] <White_Flame> after getting yelled at by beach
[11:27:56] <gilberth> Oh. Yes, I am missing out. Remind me that I need to teach my toy client how to join more than one channel.
[11:28:18] <Qwnavery> wait, you guys have autojoin?
[11:28:29] <Qwnavery> ._.
[11:34:19] <gilberth> Quiet there.
[11:35:14] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:39] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:41:06] <gilberth> Again, what is spacemacs? An Emacs with VI bindings?
[11:43:17] <contrapunctus> gilberth: https://www.spacemacs.org/
[11:43:18] -ixelp- Spacemacs: Emacs advanced Kit focused on Evil
[11:44:21] <gilberth> I've been there.
[11:46:09] <gilberth> I miss Epoch. That was very nice for it's time.
[11:46:40] <GreaseMonkey> WRT filesystems: i do have some idea of an ideal interface to present to a running process but it still involves hierarchical structure, and at the same time is not quite going to gel with the Windows model of "drives"
[11:46:59] <GreaseMonkey> ...actually i think wasi has a suspiciously similar idea
[11:47:30] <contrapunctus> gilberth: what is Epoch?
[11:47:46] <gilberth> Well, I just mentioned that because I was used to work with subdirs mounted to a drive.
[11:47:58] <GreaseMonkey> but basically, any program you run is given explicit virtual FS roots, typically you'd need one root for program-specific resources, and one root for user data or something
[11:48:11] <GreaseMonkey> and maybe another root for libraries, who knows
[11:48:12] <gilberth> Epoch was the first Emacs for X11, forerunner of Lucid emacs, forerunner of XEmacs.
[11:48:38] <gilberth> With support for font-locking, which was new at that time.
[11:50:27] <gilberth> GreaseMonkey: Well, consider $PATH for instance. I use that at times, as I like to install new versions of e.g. GCC in /opt/gcc-$VERSION/ and keep the old. I could then just switch my $PATH to have another version being the default. For that session.
[11:52:05] <gilberth> So a session-local alias/mount/subst what ever you want to call it would be nice to work with. But also a horror, since pathnames now wouldn't be unique anymore across the whole machine.
[11:53:00] <gilberth> Within Lisp I work a lot with logical hosts these days.
[11:53:42] <dave0> i have come to an interesting choice. i have 2 bits of information and a 4-byte aligned pointer and i could potentially pack those 2 bits into the low part of the pointer... but this goes against every fibre in my being
[11:54:14] <gilberth> Then you're at the wrong cafe.
[11:54:34] <hayley> Are you sure you only have 4-byte alignment?
[11:55:11] <gilberth> hayley: Has dave0 mentioned how many bits his bytes have?
[11:55:18] <hayley> Oh no.
[11:55:42] <dave0> well it's supposed to run in real mode so pointers are 20 bits ... it would be possible to pack 12 bits of data in the HIGH part of a pointer
[11:55:44] <gilberth> Perhaps he is working on the LC-3?
[11:55:57] <GreaseMonkey> the trick works the same regardless of how many bits in a byte
[11:56:10] <GreaseMonkey> oh right, real mode
[11:56:20] <dave0> it is a 32 bit forth in real mode
[11:56:21] <gilberth> dave0: The middle part. The middle part. Done that, been there.
[11:57:17] <dave0> it is against all my learning
[11:57:43] <GreaseMonkey> oh yeah it'd probably make sense to have an Hxxx:LLLL pointer to 0xHLLLL or HHHH:xxxL to 0xHHHHL
[11:57:49] <gilberth> dave0: Coward! :)
[11:57:57] <dave0> gilberth: lol
[11:58:21] <dave0> gilberth: your ttl cpu could pack 4 bits in the top of your pointers!
[11:59:46] <GreaseMonkey> but the low 2 bits definitely has examples where it's used, the three off the top of my head are the blue book version of smalltalk (actually only uses one bit to distinguish between a 16-bit smallint and an object reference), chicken scheme (uses 2 bits to encode several immediate types), and SBCL (LSbit distinguishes between fixnum and... other things, haven't looked at the other things)
[12:00:12] <gilberth> mulisp for DOS was clever. It used 16-bit pointers and set up segment registers so that the CAR would be in one segment and the CDR in another. And the CXRs (third slot forth slots for symbols and numbers) in yet another. That way 16-bit could address 64k cons cells using 128kB of RAM.
[12:00:31] <hayley> https://www.youtube.com/watch?v=YRrGlDxZYwM
[12:00:32] -ixelp- Gommorah (A Nursery Rhyme) - YouTube
[12:00:43] <gilberth> dave0: Sure. Tag bits would go there.
[12:01:15] <GreaseMonkey> your friendly reminder that the original versions of ARM used the top 4 bits of the PC for some flags and the bottom 2 bits for some other flags
[12:01:44] <gilberth> It still used the LSB to tell Thumb from ARM.
[12:02:09] <gilberth> Odd PC -> Thumb code, even PC -> ARM code.
[12:02:19] <GreaseMonkey> i think once Thumb came into being, ARM had a 32-bit PC
[12:02:26] * hayley thinks
[12:02:31] <hayley> Thumb is 2-byte aligned, so 31 bits?
[12:02:35] <GreaseMonkey> yep
[12:02:49] <gilberth> Yes, Thumb has 16-bit instructions.
[12:03:09] <gilberth> So the code is more compact, when space is an issue.
[12:03:11] <hayley> No, we still need a bit for ARM/Thumb even if Thumb has 2^31 places to put instructions.
[12:03:16] <GreaseMonkey> Thumb-2 and the ARMv6-M version of Thumb-1 has 32-bit instructions at least for some cases
[12:03:52] <gilberth> Still both the 16-bit and 32-bit instruction need to be aligned. So the LSB is free.
[12:04:12] <gilberth> Which is nice as you have no trouble calling ARM from Thumb or vice versa.
[12:04:25] <hayley> Sometimes it still doesn't make sense how I scored higher on maths than computing at high school. Though I refused to mention Hungarian notation, or using binary search where a hash table would do, on the exam.
[12:04:30] <GreaseMonkey> RISC-V's approach is that they already saw what everyone else was doing so they use the bottom 2 bits of the instruction to determine whether something was 16-bit or larger
[12:05:27] <hayley> Hm, was it even a hash table? IIRC they had a file with however many records and monotonically incrementing IDs. So it shouldn't be hard to compute n * sizeof(record) and jump there, with no search necessary.
[12:06:34] <gilberth> TYPE BLAH = RECORD ... END; VAR F: FILE OF RECORD; ?
[12:06:50] <dave0> is that cobol?
[12:06:54] <gilberth> * OF BLAH
[12:06:58] <gilberth> Pascal.
[12:07:04] <GreaseMonkey> on a different note... what would it take to have an environment which 1. runs on a microcontroller (no, not a raspi or anything with anywhere near as much RAM as that), 2. does hard realtime processing, and 3. has a GC?
[12:07:21] <GreaseMonkey> cobol would typically have a few spaces at the start
[12:07:29] <hayley> 1. ulisp 2. idk 3. Baker GC?
[12:08:11] <hayley> Reminds me, my favourite case of internet pseudo-intellectualism was when someone said Lisp GC papers were boring because they assumed only conses.
[12:08:37] <gilberth> Heh.
[12:08:49] <GreaseMonkey> boring becomes desirable when you have to actually implement something
[12:09:04] <hayley> Ahem, chapter 6 of Baker's GC paper.
[12:09:27] <hayley> Yes, assuming conses and NIL made the proof for Dijkstra's concurrent mark-sweep much simpler IIRC.
[12:09:46] <gilberth> Well, once you can do that for cons cells, you could that for any larger objects, too.
[12:09:53] <hayley> Exactly.
[12:10:22] <GreaseMonkey> which paper is this by the way?
[12:10:27] <hayley> But with incremental GC (which stops the mutator to do collector work), you do have to be aware of large objects which take more time to collect.
[12:10:38] <hayley> "List processing in real time on a serial computer"
[12:11:43] <GreaseMonkey> neat
[12:12:42] <hayley> The other problem is that it does semispace copying, i.e. you lose half your RAM.
[12:13:02] <GreaseMonkey> yeah that can be quite brutal
[12:13:58] <hayley> I plan on using a 4kB semispace nursery (which is not collected incrementally, but it is tiny) and the rest as incremental mark-sweep oldspace, on the Raspberry Pi Pico (some 256kB of RAM or so).
[12:15:36] <gilberth> GreaseMonkey: At least you avoid <https://www.youtube.com/watch?v=3vJWVyEBcdE&t=994s> ;sorry
[12:15:36] -ixelp- Garbage the Video - YouTube
[12:15:48] <hayley> That's not real time, but it'd be good enough for most things to me.
[12:16:14] <hayley> Apparently a full collection on an Arduino Uno (16MHz AVR, 2kB memory) is 1ms or so. Now, about 100MHz on a 4kB nursery...
[12:17:36] <hayley> http://www.ulisp.com/show?36M3 A full collection on the Pico is 3.7ms.
[12:17:36] -ixelp- uLisp - Performance
[12:19:02] <hayley> OTOH I've read up on enough tricks that it might be possible to write a faster collector.
[12:19:32] <GreaseMonkey> hmm, i suspect a hard realtime system would need to have at least one space it can fill during interrupt processing
[12:19:36] <hayley> ROM is nearly free (all 2MB or so) so I can unroll and do shit like that.
[12:19:51] <GreaseMonkey> i should also add that, well, are you using GCC?
[12:20:28] <hayley> IIRC that's the "default" for AVRs, but I don't know about ARM devices. And they're not my numbers.
[12:20:44] <GreaseMonkey> GCC's Thumb-1 optimiser is a joke, especially in the context of a Cortex-M0+ (as used on the pico IIRC)
[12:21:39] <GreaseMonkey> anything involving multiplies is at risk of exploding into 12 instructions despite having a 1-cycle multiplier, and even if you fix that in the optimiser, divisions by anything other than a power of two ALWAYS defer to software, you never get the magic number multiply stuff going on
[12:21:45] <hayley> Won't use Thumb then. And I'll end up rolling my own compiler (cause I am terrible and want to JIT on the microcontroller).
[12:21:50] <gilberth> hayley: ROM often is slow.
[12:22:03] <GreaseMonkey> on the pico, and therefore the M0+, you have a choice between Thumb-1.
[12:22:19] <hayley> There is some cache on the Pico, but obviously that goes against my point of ROM being free.
[12:22:48] <hayley> https://www.youtube.com/watch?v=xB7SIzpPZ74
[12:22:48] -ixelp- Telegram Sam - YouTube
[12:23:07] <GreaseMonkey> ...actually if you're rolling your own compiler then you should be fine
[12:23:34] <hayley> Well, except for the compiler-rolling part.
[12:23:36] <gilberth> I had three speed classes in my code for the ancient ARM MCU we used. (1) Thumb ROM code (2) ARM ROM code (3) ARM SRAM code.
[12:24:41] <GreaseMonkey> the other optimiser wonkiness i'm aware of is i think the (S|U)XT(B|H) sign extension opcodes, which i'm pretty sure the compiler peephole-optimises, so whenever anything gets rearrange you get stuck with an LSL rx, #(24|16) /(L|A)SR rx, #(24|16) pair
[12:25:08] <GreaseMonkey> yeah nowadays the ROM side... can be a little bit slow? depends on the kind of flash you're using
[12:25:29] <GreaseMonkey> also if you're using XIP off an SPI NOR flash then hot damn that's slow
[12:26:00] <gilberth> Yes, that's so slow, it's not even funny anymore.
[12:26:42] <GreaseMonkey> i'm mostly familiar with STM32 microcontrollers where a flash read takes ceil(cpu_speed / 16 MHz) cycles
[12:27:36] <gilberth> So a 16MHz bus speed?
[12:27:52] <GreaseMonkey> it's more a limit on the speed that the flash can be read
[12:28:10] <GreaseMonkey> RAM and I/O works happily at full speed
[12:28:45] <gilberth> Which I meant, often there is a slow bus for I/O too. So my favorite GPIO pin banging benchmark is silly.
[12:28:45] <GreaseMonkey> although i do also have a hifive1 revb which has the XIP setup and in that case for anything that seriously needs speed you have to use the feature that lets you sacrifice up to half of the icache to dump code in as tightly-integrated memory
[12:29:42] <GreaseMonkey> on some STM32 MCUs, I/O is on the special ARM fast bus which i think makes a store cost literally nothing instead of the usual 1 cycle
[12:29:47] <GreaseMonkey> anyhow i'm off to bed, gnight
[12:30:03] * hayley remains torn between full on inlining and call-site optimization. 
[12:30:03] <gilberth> Take care.
[12:53:17] <shka> hayley: micro-benchmarks tend to show inlining more useful compared to a practical reality
[12:53:41] <Gnuxie> take micro trust in micro benchmarks 
[12:53:51] <hayley> thankyou Cliff Click
[12:54:20] <hayley> shka: It's more that a message-send-heavy language sends a lot of messages, and thus doing "global" analysis like type inference would be handy.
[13:00:51] <shka> hayley: oh, i understand this
[13:01:51] <shka> heiseig in the past recommended me "closure compilation" technique
[13:02:10] <shka> but i think that you are well aware of this option
[13:02:17] <hayley> Well, that's what you get by default with pure message sending.
[13:02:47] <hayley> Though I am considering it for infrequently used REs in one-more-re-nightmare. Or I just make the compiler faster and implement copy propagation properly.
[13:06:17] <hayley> https://www.youtube.com/watch?v=F1VymsO6aLA
[13:06:17] -ixelp- Gary Numan & Dramatis Love Needs No Disguise - YouTube
[13:06:46] <hayley> At least, my suspicion that going from type inference -> copy propagation to copy -> infer -> copy would be faster, as inference has less to choke on.
[13:06:52] <hayley> *is that
[13:33:32] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:00:20] * hayley uploaded an image: (379KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/MWhSqJFAwfiwGMfoRsAqhKMC/network-programming.jpeg >
[14:00:26] <hayley> Based on completely true events.
[14:10:22] <pjb> hayley: it's maguru suchi ou sake suchi?
[14:14:51] <hayley> No idea.
[14:15:51] <edgar-rft> magic sushi
[14:20:40] <hayley> It's the sushi that makes you do the whole network stack in CL.
[14:32:19] <pjb> :-)
[14:32:52] <pjb> Well, from the color, I'd say it's more like maguru suchiâ¦
[14:44:27] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[14:48:06] *** Joins: selwyn (~selwyn@user/selwyn)
[14:51:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[15:41:25] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:57:11] *** Joins: selwyn (~selwyn@user/selwyn)
[15:57:57] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[15:58:21] *** Joins: selwyn (~selwyn@user/selwyn)
[16:20:15] *** Joins: Posterdati (~posterdat@host-95-235-15-123.retail.telecomitalia.it)
[16:25:11] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:29:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[16:44:59] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[17:18:07] * hayley uploaded an image: (139KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/wSQeQqJBiKdiEYYGYrwynill/lol-whats-a-de.png >
[17:34:17] <Alfr> Is that an SICP pony?
[17:34:40] <hayley> Yes.
[17:38:32] <hayley> Much better than an ugly crab.
[17:46:16] <Alfr> And no books were harmed attaching them to ponies, one might only hope.
[17:48:18] <hayley> You'll find Pinkie Pie is merely wearing the book as a hat, and there is no attachment.
[17:48:26] * hayley uploaded an image: (192KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ldvUkWASAtYTBEBJPprLUTHD/Screenshot_2021-09-30_20-21-01.png >
[17:51:32] <Alfr> Hmpf... strike inertia, I guess.
[17:56:22] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:10:19] <dave0> nite all
[18:11:10] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:47:00] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[18:52:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:57:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:00:37] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[19:01:02] *** awolven is now known as clothespin
[19:16:01] <gilberth> Good morning #lispcafe!
[19:20:32] <Alfr> Good morning, gilberth!
[19:24:03] <gilberth> Oh dear. I must have missed the best part on #clschool.
[19:25:13] <Alfr> Did something interesting happen? I don't frequent that channel ... So, is there a log?
[19:26:14] <gilberth> idk. White_Flame mentioned a certain paule32, who is a master of making no progress, it seems. /me shrugs.
[19:27:10] <gilberth> Apropos progress. I still have no clue how to tackle this damn FILE server.
[19:29:37] <gilberth> Perhaps I first make sure that all C functions are declared properly. The compiler already spotted me to some function calls missing arguments and some such. And there are two functions of the same name with different signatures.
[19:30:56] <gilberth> Kinda hilarious how beach suggeted to paule32 to find somebody to translate the ANSI CL spec for him.
[19:33:14] <Duuqnd> "this bring not wider, too. bring me" is probably the funniest thing I've read all week
[19:33:54] <gilberth> Which is a phrase, I don't get.
[19:35:49] <pjb> gilberth: I wouldn't know about paule32, he's been in my /ignore list for so longâ¦
[19:36:17] <gilberth> Ah, ok. Perhaps he meant "Dies bringt [mich] nicht weiter." "This won't getting me anywhere." /me shrugs, again. *gosh*
[19:36:37] <gilberth> pjb: I was bored and thus lurked.
[19:36:46] <pjb> :-)
[19:38:33] <gilberth> And I was stuck.
[19:40:14] <gilberth> Heh, would be nice when unix domain sockets would work over NFS :-)
[19:43:50] <gilberth> Question rather is: Why don't they?
[19:45:11] <gilberth> Likewise with devices. nvm.
[19:56:49] * gilberth just deletes old code reading a directory by read(2).
[20:05:38] *** Quits: luis (~luis@lisp/luis) (Ping timeout: 252 seconds)
[20:09:46] <gilberth> The more I declare the more errors I get.
[20:13:04] *** Joins: luis (~luis@lisp/luis)
[20:13:56] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[20:37:34] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[20:39:16] *** Joins: minion (~minion@common-lisp.net)
[20:43:07] *** Joins: emacsoma1 (~emacsoman@136.60.128.68)
[20:47:36] *** Quits: robin (~robin@user/terpri) (*.net *.split)
[20:47:36] *** Quits: shka (~herr@109.231.6.176) (*.net *.split)
[20:47:36] *** Quits: semz (~none@user/semz) (*.net *.split)
[20:47:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[20:47:36] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (*.net *.split)
[20:47:36] *** Quits: santiagopim (~user@90.167.66.93) (*.net *.split)
[20:47:37] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[20:47:37] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[20:47:53] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:52:09] *** Joins: robin (~robin@user/terpri)
[20:52:09] *** Joins: semz (~none@user/semz)
[20:52:09] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[20:54:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:55:03] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[20:59:01] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:59:55] *** Joins: X-Scale` (~ARM@46.50.4.194)
[21:00:53] <mfiano> Duuqnd: haha
[21:01:30] *** Quits: X-Scale (~ARM@46.50.4.194) (Ping timeout: 265 seconds)
[21:01:30] *** X-Scale` is now known as X-Scale
[21:02:28] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[21:02:42] *** Joins: shka (~herr@109.231.6.176)
[21:06:51] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:10:11] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[21:12:55] *** Joins: childlikempress (~moon-chil@cardinal.elronnd.net)
[21:14:00] *** Joins: SAL9000_ (~SAL9000@shirakumo/sal9000)
[21:14:29] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Posterdati (~posterdat@host-95-235-15-123.retail.telecomitalia.it) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 265 seconds)
[21:15:26] *** Joins: Posterdati (~posterdat@host-95-235-15-123.retail.telecomitalia.it)
[21:15:38] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[21:17:54] *** SAL9000_ is now known as SAL9000
[21:37:23] *** Joins: selwyn (~selwyn@user/selwyn)
[21:37:38] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[21:38:03] *** Joins: selwyn (~selwyn@user/selwyn)
[21:50:34] *** Quits: X-Scale (~ARM@46.50.4.194) (Ping timeout: 252 seconds)
[21:50:47] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[21:51:59] *** X-Scale` is now known as X-Scale
[22:07:06] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 250 seconds)
[22:08:04] *** Joins: X-Scale` (~ARM@46.50.4.85)
[22:09:07] *** X-Scale` is now known as X-Scale
[22:10:32] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:12:01] *** Quits: ixelp (~ixelp@p5492d8bb.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[22:13:40] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[22:34:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[22:36:59] *** Joins: aeth (~aeth@user/aeth)
[22:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[22:39:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:31:07] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[23:34:27] *** Quits: easye (~user@oxi.slack.net) (Ping timeout: 240 seconds)
[23:34:30] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (Ping timeout: 260 seconds)
[23:37:23] *** Joins: minion (~minion@common-lisp.net)
[23:37:42] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[23:37:42] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Read error: Connection reset by peer)
[23:37:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Read error: Connection reset by peer)
[23:38:11] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[23:40:17] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[23:41:12] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[23:43:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:50:51] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[23:52:27] *** Joins: minion (~minion@common-lisp.net)
