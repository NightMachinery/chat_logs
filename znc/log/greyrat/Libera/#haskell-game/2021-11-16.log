[00:02:39] <EvanR> remind me how this works again, if I install sdl2, it pulls in linear, which pulls in the kmettiverse. But does it necessarily mean that whole verse is compiled into my executable? Or just the parts I use
[00:03:25] <ManofLetters[m]> you don't need it
[00:03:57] <ManofLetters[m]> take my cabal.project: https://github.com/LambdaHack/LambdaHack/blob/master/cabal.project#L4
[00:04:23] <ManofLetters[m]> without it, I'm not sure, may depend on whether you strip the exe, etc.
[00:04:52] <f-a> oh there is a flag, nice to know
[00:04:55] <ManofLetters[m]> split section, some Mac pecularities, may be complex
[00:11:26] <EvanR> currently still trying to install sdl2, which requires the C library be installed... 
[00:22:35] <EvanR> yeah I knew there was a no-linear flag, but i didn't use it
[00:23:00] <EvanR> so yeah... installing the sdl C library on windows... in a way that cabal is satisfied
[00:26:13] <ManofLetters[m]> :abandon-all-hope:
[00:27:11] <ManofLetters[m]> though it works in my CI
[00:29:07] <EvanR> you have this configuration working somewheres?
[00:33:04] <ManofLetters[m]> only on AppVeyor, with old GHC, so it won't transfer exactly and it's also too complex, e.g., building sdl2 binding manually instead of letting cabal do this:  https://github.com/LambdaHack/LambdaHack/blob/master/appveyor.yml#L44
[00:33:22] <ManofLetters[m]> probably the paths are the crucial thing
[00:33:42] <EvanR> oh uh... 
[00:36:17] <ManofLetters[m]> oh, and it uses v1- cabal commands (shame on me)
[00:37:38] <sm> I wonder how fltkhs is for text
[00:38:03] <sm> I guess you can plug in anything to https://hackage.haskell.org/package/fltkhs-0.8.0.3/docs/Graphics-UI-FLTK-LowLevel-Base-TextDisplay.html#v:textDisplayCustom
[00:38:25] <EvanR> something about pkg-config
[00:39:12] <ManofLetters[m]> what about it?
[00:47:47] <EvanR> I installed sdl2 to C:\SDL2 god knows why, then modified by PATH and PKG_CONFIG_PATH to point into there
[00:48:12] <EvanR> so presumably something can use pkg-config to determine the include and lib flags
[00:48:20] <EvanR> seems like a wash
[00:49:13] <ManofLetters[m]> I'm not sure, but I  think pgk-config needs to register them
[00:49:26] <ManofLetters[m]> somehow
[00:49:27] <f-a> I started writing a terminal engine after having a bad intercourse with sdl on Windows
[00:49:59] <ManofLetters[m]> rotfl
[00:50:26] <f-a> not lying, #haskell was mostly useless, not because they ignored me but simply because we lack Windows users
[00:53:05] <EvanR> I'm pretty sure I installed it
[00:53:20] <EvanR> how do I run my compiled app with cabal again?
[00:53:32] <EvanR> the exe file is buried pretty deep
[00:53:53] <f-a> cabal run
[00:53:56] <f-a> cabal run <name>
[00:57:27] <EvanR> it just says Up to date
[00:58:16] <EvanR> program immediately exits... maybe that's a different issue
[01:00:27] <EvanR> lol wtf https://imgur.com/a/w5Xeas2
[01:00:41] <EvanR> would explain why no stdout
[01:02:49] <ManofLetters[m]> if you link with SDL say goodbye to stdout
[01:02:55] <ManofLetters[m]> on Windows
[01:04:12] <EvanR> that is indeed what appears to be the cause
[01:04:19] <EvanR> unlinked sdl, I get stdout
[01:04:46] <ManofLetters[m]> very hard to work around
[01:04:49] <ManofLetters[m]> I gave up
[01:05:38] <EvanR> maybe opening a file and remapping the stdout would work?
[01:08:02] <ManofLetters[m]> yes, that's what I do
[01:21:21] <EvanR> holy crap that worked, (GHC.IO.Handle has hDuplicateTo, which apparently can move stdout to an open file. And pleasantly surprised an uncaught exception appears as a popup dialog with no extra meticulous fuckery)
[01:22:39] <ManofLetters[m]> yep, hDuplicateTo
[01:23:33] <EvanR> I can't wait for some poor windows user down the road to be playing this program and it unexpected disappears with a totally useless message popping up
[01:23:46] <EvanR> much better than disappearing without a word
[01:37:06] <EvanR> aaaaaand cairo doesn't seem to have windows binaries
[01:38:50] <ManofLetters[m]> I remember release Threadscope for Windows and it uses cairo, so there must be a way surely?
[01:39:03] <ManofLetters[m]> s/release/releasing/
[01:41:31] <EvanR> using the computer feels more and more like an impossible nintendo game
[01:44:34] <EvanR> cairo's configure --help reveals it has backend support for BeOS xD
[01:47:01] <EvanR> no C compiler found in PATH... that's rich considering I probably installed msys with mingw at least once, whatever environment ghcup installs, and visual studio 
[01:47:48] <ManofLetters[m]> you forgot to pick up the key on level three
[02:18:44] *** Joins: coolnickname (~omg@user/coolnickname)
[02:22:47] <f-a> sad state of Haskell on win
[02:22:52] <f-a> I hope foundation money can fix this
[03:07:21] <EvanR> anyone heard of or have opinion about BGFX
[03:10:14] <f-a> nope
[03:10:16] <EvanR> I just freed up 3.6G of space clearing my failed attempt to build the entirety of GTK on windows, for the ill fated purpose of building hexchat from source
[03:10:22] <f-a> would you have to write the bindings yourself?
[03:10:34] <EvanR> there are haskell bindings on hackage
[03:11:38] <f-a> does it do text on par with your standards?
[03:11:56] <f-a> weird, searching for bgfx turned out empty handed
[03:14:32] <EvanR> this is from the "fonts" example... wtf... https://i.imgur.com/2meJlWS.png
[03:15:26] <EvanR> throw a -1/2 in there if using direct3d9... encouraging
[03:20:15] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:21:01] <sm> if you need to Windows users to build your thing, I think things like SDL and GTK may just be off the table
[03:21:49] <sm> if you always give them binaries, maybe they're alright
[03:22:54] <f-a> binaries and the library shipped with them
[03:25:04] *** Quits: srk (~sorki@user/srk) (Remote host closed the connection)
[03:25:22] *** Joins: srk (~sorki@user/srk)
[03:28:06] <ManofLetters[m]> right
[03:30:15] <sm> opengl/glut, fltkhs and that new one (..luminance ?).. seem more windows-viable
[03:31:40] <sm> monomer
[03:32:18] <f-a> go full terminal :P
[03:33:20] <sm> interesting that that was your motivation f-a. Way to go!
[03:34:00] <sm> I think with unicode / semigraphics / colour we can get terminal graphics looking pretty slick 
[03:34:22] <f-a> as soon as this is fixed https://github.com/UnkindPartition/ansi-terminal/issues/114
[03:34:56] <sm> yes we are in retreat to the 70s/80s.. but it works
[03:36:26] <ManofLetters[m]> with good implants we won't be needing any stinking graphics
[03:36:30] <ManofLetters[m]> soon
[03:38:51] <EvanR> no yeah... who in their right mind would ask users to build it on windows
[03:39:08] <EvanR> the cairo library I guess lol
[03:39:56] <EvanR> on implants that shortcut the need for graphics: what are the chances the APIs for this technology turn out better than graphics APIs did xD
[03:40:16] <sm> oh what could possibly go wrong there
[03:42:19] <f-a> https://github.com/haskell/win32/issues/191 people are on the bug btw
[03:42:32] <f-a> people being: «Tamar»
[03:43:01] * sm didn't see Tamar there
[03:43:22] <f-a> Mistuke yeah
[03:43:33] <sm> aha
[03:45:05] <f-a> still the fact that this impacts a package (ansi-terminal) with 250⁺ reverse dependencies and it was not detected speaks a lot about the lack of resources GHC peopole have to deal with
[03:48:06] <sm> yeah, it's pretty unfortunate
[03:48:38] <sm> QA for a system this complex is a big job
[03:50:17] <EvanR> I think solved my issues on windows
[03:50:36] <EvanR> downloading latest ubuntu
[03:50:54] <f-a> hehe
[03:51:34] <EvanR> we'll see if in the last 2 or 3 years linux doesn't fuck up on this ryzen cpu
[03:51:38] <EvanR> anymore
[04:03:36] <ManofLetters[m]> isn't the new IO supposed to phase out old IO in a couple of years? isn't it optional in 9.2? If so, you are the early adopter and the experimental mice f-a and the precious, but expendable resource of the GHC people ;)
[04:04:03] <f-a> it has been there since 9.0!
[04:04:16] <ManofLetters[m]> but the old IO is the default, right?
[04:04:20] <f-a> yes
[04:04:30] <f-a> and will stay like that for some time
[04:04:48] <ManofLetters[m]> so, you've been nerd-sniped and tricked into testing it for free
[04:05:07] <ManofLetters[m]> and GHC people can go on expensive vacations instead
[04:05:50] <ManofLetters[m]> everything as it should be
[04:10:57] <sm> oh
[04:11:23] <sm> that's not quite as bad then
[04:12:04] <sm> ah, Phyx is also Tamar.
[04:12:55] <sm> our Windows Czar
[06:00:48] <sm> latest a-t-g is in stackage nightly 2021-11-15
[06:03:06] <sm> great migration instructions f-a. I ended up converting to simpleGame syntax, and later back to Game {} syntax to get the new genv arguments though. Perhaps it would be just as easy to say "add an ignored _genv argument to your step and draw functions" ?
[06:03:57] <sm> I had trouble finding the new fps stuff in the haddock (bad searching); I found it by looking at Balls.hs. That mentions generalGame, it should just refer to Game
[06:06:52] <f-a> nicely spotted sm 
[06:07:52] <f-a> as for the migration guide: good suggestion, I am frankly ambivalent as now, but 100% of my users like it!
[06:08:03] <f-a> well, 100% of my users who have a working email address
[06:08:25] <f-a> after 3 days of trying my isp gave up contacting that other lad who used a-t-g
[06:13:27] <sm> f-a for centering, should I start by making a blankPlane of full window size, then *** within that /
[06:13:29] <sm> ?
[06:14:16] * sm hoped for an automatically-sized blankPlane
[06:15:22] <f-a> yes you should
[06:16:24] <f-a> it is specified in «Game» do- mhhh you mean passing a plane of appropriate dimensions as a parameter?
[06:16:30] <f-a> that could be a good idea
[06:17:06] <sm> brb
[06:30:02] <sm> f-a: I mean, it looks like to center my game with 1.6 I need to look up the display size before creating my first blankPlane, which is new. But it's probably super easy, no biggie
[06:30:42] <sm> right there in the genv
[06:31:00] <f-a> that is acutally a very nice suggestion
[06:31:55] <f-a> tho I would need to make one GEnv for state and one for draw, since it makes no sense passing a Plane to state
[06:32:44] <sm> I didn't mean to suggest putting a Plane in GEnv
[06:33:06] <sm> I'm just thinking aloud. I was thinking there might be a blankPlaneFullscreen or so
[06:33:58] <f-a> blankPlaneFullScreen :: GEnv -> Plane ?
[06:34:30] <f-a> another option is making  gDraw :: Plane -> s -> Plane
[06:35:42] <sm> oh right it would need the GEnv, since it's pure
[06:37:30] <sm> here's my altered draw fn:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/2664bf68e9c5c9d8520276697f8ceed08cdf18dd)
[06:37:43] <sm> but I must be doing something wrong, no visible effect
[06:38:38] <f-a> well
[06:38:45] <f-a> you are adding a blank plane to a blank plane :P
[06:38:53] <f-a> hance ending up with… another blank plane :P
[06:39:13] <sm> sorry, I should have included ..., there are more planes below :)
[06:39:45] <f-a> mhhh
[06:39:50] <f-a> if there is  a &
[06:39:54] * sm sent a haskell code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/bd0df78dcdfe9bc97367a17ce5f87c88720e8b2b
[06:41:00] <sm> it's running just as before, but left-aligned in the terminal window. I thought that adding the *** line might center it horizontally
[06:41:18] <f-a> it centers it both horizontally and vertically
[06:41:41] <f-a> well
[06:41:44] <f-a> it is obvious now
[06:41:53] <f-a> you are centering a blank plane over a blank plane
[06:42:04] <f-a> and then blitting **on this merged plane**
[06:42:13] <f-a> try adding a ( after ***
[06:42:17] <f-a> (and close it)
[06:42:39] <f-a> or a let to encompass what you draw and then end it with
[06:42:53] <f-a> … in blankPlane termw termh *** myOldPlane
[06:43:06] <sm> ah, thank you. Not obvious to this poor user :)
[06:43:13] <sm> that did it
[06:43:23] <f-a> means it should be easier
[06:44:41] <sm> [x|y]centered genv $ ... ?
[06:45:00] <f-a> another good ux suggestion
[06:48:43] * sm fools around with 
[06:48:43] * sm ```haskell
[06:48:44] * sm blankPlaneFull GEnv{eTermDims=(termw,termh)} = blankPlane termw termh
[06:48:44] * sm centered genv = (blankPlaneFull genv ***)
[06:48:44] * sm draw genv@GEnv{eTermDims=(termw,termh),..} g@GameState{gamew,gameh,..} =
[06:48:44] * sm     centered genv $
[06:48:44] * sm     blankPlane gamew gameh
[06:48:45] * sm     & ...
[06:48:45] * sm ```
[06:52:39] <sm> and finally.. FPS displayed! hurrah!
[06:52:57] <f-a> well
[06:52:59] <f-a> I am curious!
[06:53:10] <f-a> I will add those convenience functions
[06:53:24] <f-a> how fast does it run?
[06:53:56] <sm> will test a bit now. Just first: the 1.6 changes seem great. Does it no longer fail to run if terminal size is not sufficient ?
[06:55:11] <f-a> it does not fail. if you use `simpleGame` it will just freeze while term is too small and prompt the user to make it bigger. Once it is big enough, running will continue.
[06:55:18] <f-a> for `Game`, it simply never fails
[06:55:29] <f-a> left to the user to decide how to handle it
[06:56:03] <f-a> so :P
[06:56:11] <f-a> how about you share caverunner fps w/ us
[06:56:20] <sm> freeze eh, must try
[06:56:41] <f-a> you can with `cabal run -f examples alone`
[06:56:49] <sm> well, at 80x25 it's rock solid at 60fps. I am capping it at that I think
[06:56:51] <f-a> and during play make your termn small
[06:57:07] <sm> at 80x60 I can see it occasionally waver to 59
[06:57:20] <f-a> 60 is way a lot for term games, but very nice that it works
[06:57:36] <f-a> thanks to fps, I see I can slightly tweak my double buffering function
[06:58:18] <f-a> on large terminals and with few changes, (moveCursor >> putChar ' ') is actually cheaper than what I do now
[06:58:34] <f-a> (moveCursor is not cheap at all, mind you)
[06:59:13] <sm> this is, uh, a bit hard to see on a laptop screen but if I shrink font to get 80x100 I see fps go down to 30 something
[06:59:51] <f-a> which term is this once again?
[07:00:17] <sm> this is apple's Terminal. I saw similar performance in iTerm3 earlier
[07:00:26] <f-a> very good
[07:01:06] <sm> I'm a little confused by what determines the max FPS. I am creating the Game with gTPS = 60, does that influence FPS ?
[07:01:07] <f-a> the larger it is and the fewer changes there are from frame to frame, the more tempting is to use another double buffering strategy
[07:01:15] <f-a> yes
[07:01:28] <f-a> TPS = capped FPS
[07:01:32] <f-a> should write it out in the docs
[07:01:36] <sm> aha
[07:01:44] <sm> FPS will never be > TPS
[07:01:55] <sm> fine, I will play at 1000 TPS
[07:02:09] <f-a> nope, that would be wasteful, a screen redraw with an unchanged state
[07:02:33] <sm> WAA LOL
[07:02:41] <sm> that is hilarious
[07:03:10] <sm> there was a blur of motion and wailing sound followed by an explosion.
[07:03:39] <f-a> haha could add it as a «bad dream level»
[07:03:44] <sm> now it's on the game over screen, nothing moving here to exercise it but FWIW it's showing fps ~370
[07:04:00] <f-a> yup
[07:04:21] <f-a> current strategy is to blit a series of "      " lines when there is no change
[07:04:47] <f-a> this is tremendously more efficient rather than invoking (movecursor x y >> putChar c) for every changed cell
[07:04:58] <f-a> but it *not* efficient when screen is the same of course
[07:05:01] <sm> 👍️
[07:05:14] <f-a> my plan is to see if that is a problem
[07:05:28] <f-a> and if it is we could choose probabilisticly between the two
[07:05:29] <sm> ah yes it seems to be using 100% of a core
[07:05:33] <f-a> switching during runtime
[07:05:43] <f-a> automagically
[07:05:50] <f-a> with some bayesian decision
[07:06:51] <sm> is it possible right now to have a game/simulation with 200 TPS and 30 FPS ? or 30 TPS and 200 FPS (useless as that might seem) ?
[07:08:49] <f-a> no, 1 tick 1 frame. TPS > FPS is useless, TPS>FPS, mhhh, it is useful but you can basically mimick it yourself by running logic function five times per tick
[07:08:56] <sm> by cranking the game's max speed down to 1, it's playable, and I can see FPS is about the same while scrolling (~370)
[07:09:19] * sm tries 120
[07:09:30] <f-a> let your eyes decide
[07:09:41] <f-a> you see movies at ≃ 22FPS
[07:09:47] <f-a> venzone is 13FPS
[07:10:08] <sm> wahaha super fun
[07:10:52] <sm> caverunner players, you thought speed 60 was the worst we could throw at you ? Muhahaha NOT ANY MORE
[07:11:23] <sm> gonna need new caves
[07:12:09] <sm> or a cheat mode, to let it run
[07:12:29] <f-a> I invite you to try it on xterm or other nonfancy terms
[07:12:38] <f-a> you can see they are not good at blitting
[07:12:39] <sm> this is not a normal machine I know, curious to see it on regular laptops
[07:14:01] <sm> with TPS != FPS, I'm imagining simulations or I dunno, interacting with external signals/embedded systems
[07:14:25] <sm> but FPS = TPS or as close as possible is a nice simple model for games, noted
[07:14:25] <f-a> ohhhhhhhhh that is actually a fancy idea
[07:43:59] <sm> FWIW, caverunner shows fps if you press s
[07:44:29] <sm> and is now also a cabal/stack project, so easier to build for some
[07:44:57] <f-a> super! 
[07:44:59] * f-a git pulls
[07:46:42] <f-a> really fancied a cabal prject
[07:48:36] <f-a> I will never digest recordwilcards xD
[07:51:44] <f-a> hi score table is extremely cosy
[07:53:28] <sm> I think the idea will be to see how far you can get toward top right
[07:53:46] <EvanR> what is "new IO"
[07:54:13] <sm> currently you can freely advance up column 1, and you can advance one step to the right. Perhaps you should be able to advance one step upward as well.
[07:55:03] <f-a> are you referring to this, EvanR ? https://mail.haskell.org/pipermail/ghc-devs/2020-July/019053.html
[07:56:32] <EvanR> ok ghc got a new I/O subsystem for windows
[07:57:00] <f-a> native
[07:57:08] <f-a> will become One True God™
[07:57:25] <f-a> nice ‘s’ menu sm 
[07:57:31] <f-a> sound improved too
[08:04:04] <EvanR> sorry, the windows backend for ghc will ascend to the level of godhood?
[08:04:18] <EvanR> remind me to stay in bed that day
[08:06:20] *** Quits: welterde (welterde@thinkbase.srv.welterde.de) (Ping timeout: 268 seconds)
[08:12:41] <sm> it won't do you any good..
[08:13:13] <sm> it shall know wherein we all live
[08:13:22] <EvanR> can't hurt though
[08:13:46] <sm> will it be a judgemental god ?
[08:13:57] <EvanR> I just got back from watching The Eternals
[08:14:21] <sm> will there be a tallying up of who has spoken ill of Windows ? That could be.. bad
[08:14:39] <sm> what's that EvanR
[08:14:43] <EvanR> I'm imagining this wingod haskell compiler like the giant dude in the sky at the end
[08:14:51] <sm> (movie, I see)
[08:14:55] <EvanR> yeah it's a movie
[08:16:58] <sm> any good ?
[08:17:16] *** Joins: welterde (welterde@thinkbase.srv.welterde.de)
[08:19:24] <EvanR> eh...
[08:19:43] <EvanR> long and intense
[08:34:11] <sm> nod
[08:42:20] *** Quits: EvanR (~evan@user/evanr) (Quit: Leaving)
[10:07:06] *** Joins: Guest8054 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de)
[11:02:16] *** Joins: kanamoricoauthor (~kanamoric@2001:470:69fc:105::873a)
[11:47:30] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[13:18:52] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[14:00:40] <sm> stringPlane "" fails (maximum)
[14:40:03] <f-a> yup sm I can make the error clearer but passing and empty string is not ok
[14:47:41] *** Joins: __monty__ (~toonn@user/toonn)
[14:51:27] <sm> surely it should be harmless rather than crash the program ?
[14:51:44] *** Quits: Guest8054 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:52:22] <f-a> I conside it a programmer error, an assert. Is there a legitimate reason to call stringPlane with an empty string?
[14:56:26] <sm> I don't know if it's legitimate, but had a bunch of them joined with === and was trying to add another to insert a blank
[14:57:09] <f-a> (you might like `vcat`)
[14:57:13] <sm> it looks like a regular and harmless function call, not a special assertMayFailAtRuntime, I think it should succeed
[14:57:23] <sm> it's just an empty plane
[14:57:46] <sm> just my 2c
[14:58:50] <sm> more simply, docs say the type is String -> Plane, and "" is a String
[15:12:04] <f-a> so you would have stringPlane "" = cell ' ' ?
[15:13:32] <sm> I'd expect it to be ignored (invisible) I guess
[15:14:17] <f-a> ok
[15:14:27] <ManofLetters[m]> make it pay 1c to f-a's pocket each time it's invoked and you have a deal
[15:14:40] <f-a> λ> planeSize (stringPlane "")
[15:14:45] <f-a> ↑ what should that return?
[15:14:50] <sm> (0,0)
[15:21:47] <f-a> that would change my model quite a bit (I give an implicit assurance that each plane is at least 1,1) so I will not change it; but I will update docs to make it explicit.
[15:22:00] <f-a> nice microtransactions ideas, ManofLetters[m] 
[15:25:15] <sm> maybe the next best thing is that stringPlane "" is stringPlaneTrans " " then ?
[15:27:16] <f-a> that would be an apt alternative
[15:27:37] <f-a> but first, I need to clean the flat
[15:54:48] *** Joins: Guest4216 (~Guest42@wificampus-098145.grenet.fr)
[15:56:11] *** Joins: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de)
[16:32:36] *** Quits: Guest4216 (~Guest42@wificampus-098145.grenet.fr) (Ping timeout: 256 seconds)
[17:22:07] <f-a> http://www.ariis.it/link/t/sm.jpg that last one is killing me… 
[17:23:17] <sm> ha! I'll try to catch up
[17:23:54] <sm> I have 612 for all, I guess you have some scores from before the end bonus
[17:25:47] <f-a> I liked the «numbers of time you died on this spike» number
[17:25:53] <f-a> it mildly infuriates me
[17:27:05] <sm> excellent
[17:38:01] <sm> dang these are tricky
[17:45:20] <sm> I wonder what could make it a little more easy/skilful/enjoyable
[17:54:42] <sm> \o/
[17:55:40] * sm uploaded an image: (1131KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/LTWsrMHzhhvjOqRQGPIaXHoF/Screen%20Shot%202021-11-16%20at%204.24.34%20AM.png >
[17:56:07] <sm> about at my limit 
[17:56:10] <f-a> brainstorming: having the possibility to brake, having the possibility to brake for x timess in a cave, having a poweup that slows you down for 𝑥 seconds, having moving platforms in the larger part of the bore (which is as today a tad uneventful)
[17:56:17] <f-a> argh
[17:56:20] <f-a> well done on 10
[17:57:23] <sm> i definitely plan to have some braking, but first I took it out because it disturbed the smooth motion
[17:57:41] <sm> limited braking fuel per cave perhaps
[17:58:22] <sm> the upper part is boring, it takes too long to get to the challenging part
[17:59:07] <sm> if you could go really fast there it would help
[18:00:27] <f-a> or if there were random bonus
[18:00:39] <f-a> «braking pack»
[18:06:13] <icrbow[m]> I see you like runner games here...
[18:06:13] <icrbow[m]> https://icrbow.itch.io/swerve
[18:08:30] <f-a> ohhh
[18:09:58] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[18:18:11] <f-a> won cave 10 \o/
[18:20:25] <f-a> icrbow[m]: it is a very interesting game! «gravity» part of it is especially enticing
[18:20:38] <f-a> I suppose the «big spikes» are planetoids?
[18:22:06] <f-a> tho when I press up it stutters a bit!
[18:27:35] <icrbow[m]> oops... what's your CPU?
[18:34:58] *** Joins: joes (~joes@2a02:8109:1b3f:b214:c989:cb3a:960a:d80b)
[18:48:59] *** Quits: srk (~sorki@user/srk) (Quit: ZNC 1.8.1 - https://znc.in)
[18:49:18] *** Joins: srk (~sorki@user/srk)
[18:52:51] <icrbow[m]> this should be moved to GPU anyway, but I don't have compute pipelines yet
[18:54:00] <sm> ic.rbow: I'm on a mac, is there source ?
[18:54:23] <icrbow[m]> https://gitlab.com/dpwiz/ld49 good luck 😅
[18:54:48] <f-a> do you mac people have wine?
[18:55:10] <sm> I'll give it a go 
[18:56:21] <icrbow[m]> sm: do you have MoltenVK installed?
[19:01:00] <sm> I do now. Your stack setup nicely finds a build plan. Let's see how far it goes
[19:01:53] <sm> yes we do f-a
[19:03:55] <sm> and in fact I also have ubuntu, running via multipass, but I"m not sure if that will do graphics
[19:11:54] <sm> I got this far: wine: Bad CPU type in executable. , and stack build failed on missing C library opusfile, though I installed it with brew
[19:18:42] <icrbow[m]> > with brew
[19:18:42] <icrbow[m]> does it have, like, headers and pkgconfig stuff?
[19:18:47] <icrbow[m]>  * > with brew
[19:18:48] <icrbow[m]> does it have, like, headers and pkgconfig stuff?
[19:20:25] <icrbow[m]> try dealing with opusfile in isolation first: https://gitlab.com/dpwiz/opusfile
[19:30:10] <sm> no headers that I can find, from any homebrew package
[19:32:07] <sm> oh there they are. Stupid fd failing as usual
[19:34:36] <sm> worked: `stack build opusfile --extra-include-dirs=/opt/homebrew/include/opus --extra-lib-dirs=/opt/homebrew/lib`
[19:46:45] <sm> but the same trick doesn't work with MoltenVK, even though I see the files
[20:09:24] <icrbow[m]> Maybe something from this doc helps?
[20:09:24] <icrbow[m]> https://github.com/KhronosGroup/MoltenVK/blob/master/Docs/MoltenVK_Runtime_UserGuide.md#install
[20:20:43] *** Joins: EvanR (~evan@user/evanr)
[20:22:25] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:05:37] *** Quits: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de) (Quit: Client closed)
[21:06:26] *** Joins: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de)
[21:45:09] <EvanR> the bad news is the unused 500G partition I planned to install linux on turns out to not exist, my hdd is half the size I thought it was
[21:45:47] <EvanR> the good news is in the 9 hours of live CD time it took to figure that out, I didn't have any MCE errors on the console, so maybe linux works on ryzen 2700x now
[21:46:21] <EvanR> no MCE errors, no hard freezes
[21:48:09] <f-a> f@mkiii:~/media/vcs/games/caverunner$ df -h /dev/mapper/debian--vg-root
[21:48:09] <f-a> Filesystem                   Size  Used Avail Use% Mounted on
[21:48:09] <f-a> /dev/mapper/debian--vg-root  218G   43G  164G  21% /
[21:48:22] <f-a> what do you need 500Gb for :P
[21:48:37] <f-a> happy that kernel is now working without problem on your machine
[21:49:09] <EvanR> not only does the spare 500G not exist, the 500G windows is installed on is full
[21:49:19] <f-a> ...
[21:49:27] <f-a> do you have an anime habit?
[21:49:29] <EvanR> so I can't even do a slick resizing
[21:49:36] <f-a> are you a photographer
[21:49:52] <EvanR> what's on the disk? you got me. I even uninstalled stupid large terrible games
[21:50:38] <EvanR> it will be so annoying when I get a new 1T harddrive, use it for linux, and it'll only be like 1% in use
[21:50:51] <EvanR> while windows struggles with 500G
[21:54:54] *** Quits: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de) (Quit: Client closed)
[21:55:36] *** Joins: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de)
[21:58:45] <EvanR> msys is 3 gigs, it's helping me fuck all right now so deleting that
[22:03:13] <f-a> http://www.ariis.it/link/t/sm2-0.jpg this is getting nerve wrecking sm xD
[22:03:52] <EvanR> caverunner eh
[22:05:09] <ManofLetters[m]> oh, that caverunner? did you hear it now displays FPS?
[22:05:26] <f-a> and a plethora of other info
[22:06:56] <ManofLetters[m]> what say you?
[22:15:15] <f-a> stuff like this http://www.ariis.it/link/t/mol.png
[22:15:26] <f-a> basically a better runtime debugger than haskell will ever have
[22:27:19] <ManofLetters[m]> :appropriate_emoji:
[22:29:03] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[22:41:13] *** Quits: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de) (Quit: Client closed)
[22:41:58] *** Joins: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de)
[23:13:50] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:20:23] *** Quits: joes (~joes@2a02:8109:1b3f:b214:c989:cb3a:960a:d80b) (Ping timeout: 265 seconds)
[23:34:46] *** Quits: Guest80 (~Guest80@pd9ed79bf.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
