[00:01:16] *** Parts: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) ()
[00:02:40] *** Joins: dstein64- (~dstein64@dannyadam.com)
[00:05:59] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 256 seconds)
[00:05:59] *** dstein64- is now known as dstein64
[00:06:29] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (Remote host closed the connection)
[00:11:36] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[00:11:49] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[00:13:49] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:16:23] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[00:16:23] *** ChanServ sets mode: +o fe[nl]ix
[00:17:16] *** Quits: victor (uid208353@user/victor) (Quit: Connection closed for inactivity)
[00:30:40] *** Quits: pve (~pve@87-93-236-6.bb.dnainternet.fi) (Quit: leaving)
[00:36:01] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:e9b0:bb2c:cd30:98db)
[00:36:52] *** Joins: notzmv (~zmv@user/notzmv)
[00:39:44] *** Joins: gaqwas (~john@dynamic-077-009-101-217.77.9.pool.telefonica.de)
[00:44:56] *** Quits: user51 (~user51@176.228.148.215) (Remote host closed the connection)
[00:48:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:49:37] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[00:52:19] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:54:51] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:55:19] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:56:14] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[00:58:07] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[00:58:21] *** Joins: anddam (~anddam@user/anddam)
[01:01:13] *** Quits: karlosz_ (~karlosz@47.151.136.69) (Quit: karlosz_)
[01:02:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:03:51] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[01:04:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:4f29:e68c:50c9:fe2) (Ping timeout: 240 seconds)
[01:05:56] *** Joins: breakwindows (~brkwnds@86.107.75.45)
[01:06:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[01:08:20] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[01:12:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:22:17] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 240 seconds)
[01:22:33] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:4895:4e42:bd43:c273)
[01:33:16] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[01:34:30] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[01:36:35] <etimmons> fe[nl]ix: Did Travis stop working on osicat again?
[01:38:00] <etimmons> I was going to merge #56, but Travis doesn't seem to be running (and it doesn't look like it ran on the latest master commit either)
[01:39:15] *** Quits: thomp (~thomp@162.212.34.219) (Ping timeout: 268 seconds)
[01:40:12] *** Quits: breakwindows (~brkwnds@86.107.75.45) (Ping timeout: 256 seconds)
[01:40:13] *** Quits: gaqwas (~john@dynamic-077-009-101-217.77.9.pool.telefonica.de) (Remote host closed the connection)
[01:40:43] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:3c00:f1fd:478d:cfdc)
[01:41:06] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab) (Ping timeout: 268 seconds)
[01:41:45] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10eb:9295:a859:8d19:b171:38d0)
[01:44:42] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:44:47] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:45:02] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:3c00:f1fd:478d:cfdc) (Ping timeout: 240 seconds)
[01:46:17] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[01:48:14] <fe[nl]ix> etimmons: yes, their free credits expired
[01:48:27] <fe[nl]ix> I already emailed support asking for more credits
[01:48:34] <fe[nl]ix> but I haven't heard back
[01:49:07] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 256 seconds)
[01:49:30] <etimmons> ok
[01:50:55] <fe[nl]ix> in any case, maybe you should look into the test failures on ccl/ecl/clisp
[01:51:12] <etimmons> Yep, that's what #56 was aimed at
[01:51:23] <etimmons> It fixed everything before I rebased it just now
[01:53:18] <fe[nl]ix> cool
[01:53:36] <etimmons> I don't see any reason the rebase would have changed that, but I'll double check the tests locally before merging
[01:55:25] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[01:59:15] <fe[nl]ix> I pinged support again
[02:00:03] <fe[nl]ix> at this point, I'm inclined towards switching to Github actions, but I need to work on a way to setup CI easily on Github
[02:01:20] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[02:04:12] *** Quits: gpiero (~quassel@camale.rm-rf.it) (Quit: Quitting...)
[02:04:19] *** Joins: pillton (~user@124.170.13.179)
[02:07:26] <etimmons> Yeah, Travis seems unfortunately dead at the moment unless you pay them $$$
[02:09:00] *** Joins: amb007 (~a_bakic@129.14.23.93.rev.sfr.net)
[02:09:00] *** Quits: amb007 (~a_bakic@129.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[02:09:12] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[02:10:38] <etimmons> I realized I pointed you at 40ants/ci earlier. But An easier place to start might be https://github.com/40ants/setup-lisp
[02:11:04] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[02:11:39] *** Joins: gpiero (~quassel@camale.rm-rf.it)
[02:12:37] <etimmons> It uses Roswell, which I have feelings about. But might be a good starting point if you're looking to do things the GitHub way and want to make a custom action
[02:13:31] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[02:20:17] *** Quits: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d) (Ping timeout: 240 seconds)
[02:22:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:24:22] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10eb:9295:a859:8d19:b171:38d0) (Read error: Network is unreachable)
[02:39:12] *** Quits: theothornhill (~user@2a01:799:159d:aa00:6a66:e04c:d41f:79bd) (Remote host closed the connection)
[02:40:00] *** Joins: gaqwas (~john@dynamic-077-009-101-217.77.9.pool.telefonica.de)
[02:40:14] *** Joins: miique (~miique@181.46.139.166)
[02:40:51] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:e9b0:bb2c:cd30:98db) (Remote host closed the connection)
[02:43:50] <luis> Bonus points if we can test on Windows and OS X too! :D
[02:44:53] <fe[nl]ix> don't know about Windows
[02:45:01] <fe[nl]ix> OSX might be doable
[02:51:09] <etimmons> Actions supports Windows. Even has mingw preinstalled
[03:03:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:08:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[03:08:40] <mfiano> indeed: https://github.com/bufferswap/pngload/actions/runs/1671311160
[03:11:12] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:12:34] *** Quits: gaqwas (~john@dynamic-077-009-101-217.77.9.pool.telefonica.de) (Ping timeout: 256 seconds)
[03:13:37] *** Joins: asarch (~asarch@189.250.218.98)
[03:13:51] <asarch> Free e-books! https://bit.ly/3omYAlG
[03:15:03] *** asarch was kicked by fe[nl]ix (asarch)
[03:23:14] *** Joins: asarch (~asarch@189.250.218.98)
[03:23:19] <asarch> Why?
[03:25:53] <fe[nl]ix> this is not a channel for peddling copyright infringement
[03:26:07] <fe[nl]ix> do it again and you'll get banned
[03:26:49] <asarch> Well, I didn't know there were illegal
[03:27:12] <asarch> As far I know, some times publishing companies gives them for free
[03:28:20] <asarch> Packt for example
[03:28:34] <mfiano> I don't think ignorance is an excuse in any jurisdiction.
[03:29:11] <asarch> And even there is a copyright sign in the site: Copyright 2022 © ebooks-pdf.com
[03:29:21] <asarch> Anyway, I won't do that again
[03:30:49] <fe[nl]ix> ok
[03:33:45] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[03:38:19] *** Quits: dre (~dre@2001:8003:c932:c301:c69e:ead4:d381:5280) (Quit: Leaving)
[03:40:41] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[03:42:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:43:41] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[03:44:16] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:45:54] *** Joins: dre (~dre@2001:8003:c932:c301:74de:141a:136f:2db6)
[03:47:27] *** Parts: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (ERC (IRC client for Emacs 27.2))
[04:01:22] *** Quits: asarch (~asarch@189.250.218.98) (Quit: leaving)
[04:01:55] *** Joins: asarch (~asarch@189.250.218.98)
[04:01:59] *** Quits: VincentVega (~user@212.97.1.105) (Quit: ERC (IRC client for Emacs 27.2))
[04:03:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:05:22] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:15:49] <asarch> Learnig is fun
[04:15:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[04:16:05] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:17:27] *** Joins: igemnace (~ian@user/igemnace)
[04:17:51] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[04:18:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[04:18:25] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[04:20:06] *** Joins: Algernon91 (~Algernon6@88.124.69.179)
[04:28:27] *** Joins: Common-Lisp (~common_li@2600:1700:94cc:c0:28fa:e65:b49c:36e8)
[04:28:35] <Common-Lisp> I didn't realize they turned me into a channel!
[04:29:06] <Catie> I can't believe they distilled an entire person out of the contents of this channel
[04:29:21] <Common-Lisp> Modern technology really is amazing.
[04:31:01] <asarch> Have you seen Alexa?
[04:33:27] * moon-child wants symbolic ai
[04:36:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:39:46] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:44:37] *** Quits: Algernon91 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[04:50:04] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[04:52:43] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[04:58:59] *** Joins: s-liao1 (~s-liao@101.86.96.21)
[05:01:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:03:26] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[05:04:01] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[05:04:12] *** Joins: Catie (~user@user/catie)
[05:05:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:08:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[05:09:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[05:10:49] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:11:57] *** Quits: Common-Lisp (~common_li@2600:1700:94cc:c0:28fa:e65:b49c:36e8) (Quit: bye.)
[05:16:06] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 256 seconds)
[05:18:42] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:18:48] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:24:34] <White_Flame> moon-child: there's plenty of it out there
[05:25:48] <moon-child> not really
[05:25:52] <moon-child> all the funding is for ml
[05:26:48] <White_Flame> all the old stuff still works
[05:26:53] <White_Flame> and is out there
[05:40:37] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-25.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:41:34] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[05:51:06] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-114.dsl.bell.ca)
[05:55:15] <Catie> This is a pretty open-ended question, but sometimes I can load systems using Quicklisp, but I get COMPILE-FILE-ERRORs if I try loading them with ASDF:LOAD-SYSTEM or REQUIRE. Is this a known issue, and if so what causes it?
[05:55:49] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-114.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:55:50] <White_Flame> dependencies?
[05:56:08] <White_Flame> (although I'm not sure they'd be compile-file-errors specifically)
[05:56:32] <etimmons> That does seem odd. Do you have an example?
[05:57:30] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca)
[05:57:32] <Catie> For me the most common one is CLX. If I don't have the FASLs cached, I can't REQUIRE it, but I can QL:QUICKLOAD it. Let me clear my cache to get the exact error
[06:05:16] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Read error: Connection reset by peer)
[06:05:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[06:06:36] <Catie> Well okay, now I just straight up can't REQUIRE Quicklisp systems. So never mind for now I guess?
[06:07:02] <etimmons> I'm surprised REQUIRE worked at all
[06:07:04] <White_Flame> isn't REQUIRE basically deprecated?
[06:07:21] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[06:08:25] <Catie> I've been using it wherever I'm able because it's worked, basically. For the most part, at least
[06:08:50] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[06:08:58] <mfiano> Yeah don't use require, except maybe for implementation modules in your rc file
[06:09:08] <Catie> What's the preferred method?
[06:09:20] <mfiano> asdf:load-system
[06:09:27] <etimmons> +1
[06:09:28] <mfiano> or the quicklisp wrapper
[06:09:38] <mfiano> or since etimmons is here, CLPM :)
[06:09:44] <Catie> Can you do that without modifying asdf:*central-registry*? Because that's the onerous part that I've been trying to avoid
[06:10:14] <White_Flame> are you modifying search paths for REQUIRE or something?
[06:10:21] <etimmons> If you're using QL then any system you've quickloaded in the past can be asdf:load-system'd after QL has been loaded
[06:10:34] <White_Flame> also the QL allows the local-projects dir
[06:10:37] <mfiano> I don't think it's recommended by asdf maintainers to go messing with the registry iirc
[06:10:55] <mfiano> but you can control it via special files in your dotfiles
[06:11:47] <Catie> "modifying" in this case includes locally binding. Historically I've done a (let ((asdf:*central-registry* (cons #P"..." asdf:*central-registry*))) (asdf:load-system :whatever))
[06:13:05] <Catie> I've been using REQUIRE because it's part of the standard, but Quicklisp isn't. Basically I'm trying not to assume Quicklisp will be available. I suppose ASDF isn't either, but it's a de facto standard. Though again, Quicklisp kind of is as well. Hhhhh this made more sense in my head
[06:14:09] <etimmons> require is really only useful for implementation provided modules. because it's pretty underspecified
[06:14:52] <mfiano> Using REQUIRE, or Common Lisp modules, is usually a big mistake
[06:16:10] <etimmons> ASDF is very configurable, so if you want to manually manage all your systems you can pretty easily configure it via environment variables (useful for build scripts) or configuration files in any number of places on your file system
[06:17:02] <Catie> Hmm okay, so it sounds like I mostly just need to get more familiar with ASDF
[06:17:06] <etimmons> If you don't want to manually manage all your systems (i.e., you want to have your dependencies resolved and downloaded for you), QL or CLPM are great for that.
[06:17:29] <mfiano> Or just use QL or CLPM and leave the magic be
[06:17:31] <etimmons> And both of them have ways to then load your downloaded systems directly with asdf:load-system
[06:17:49] <mfiano> But knowing ASDF magic can certainly be helpful, but there be dragons
[06:18:35] <Catie> See, and it sounds like I had some pretty cool magic being able to REQUIRE things willy-nilly, but then I went and observed it and it went away
[06:19:09] <etimmons> BTW, asdf:_central-registry_ still works (and I imagine will continue to work for quite a while), but I really recommend the "source registry" configuration methods. Much more flexible and can be done without modifying rc files for N implementations
[06:22:30] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[06:24:04] <Catie> Thank you everyone! I appreciate the help
[06:30:19] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[06:32:27] *** Quits: s-liao1 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:34:25] *** Joins: Algernon91 (~Algernon6@88.124.69.179)
[06:34:56] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:39:20] *** Quits: Algernon91 (~Algernon6@88.124.69.179) (Ping timeout: 252 seconds)
[06:48:06] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[06:49:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:52:57] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[06:53:08] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[06:54:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[06:55:28] *** Quits: Catie (~user@user/catie) (Quit: going home)
[06:59:20] *** Joins: asen (~asen@2408:821b:618:1a0:2cc1:43d3:3642:45c4)
[06:59:40] *** Quits: asarch (~asarch@189.250.218.98) (Quit: leaving)
[07:03:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:05:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:25:43] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[07:26:50] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[07:30:19] <beach> Good morning everyone!
[07:35:00] <drakonis> morn'
[07:35:26] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[07:39:19] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:40:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:43:42] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[07:44:13] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:56:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:4895:4e42:bd43:c273) (Ping timeout: 240 seconds)
[07:58:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:59:09] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[08:04:23] *** Joins: myrrh (~markus@user/poet)
[08:32:25] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:34:14] <ns12> I am worried about getting viruses from Quicklisp. Deoes Quicklisp contain viruses?
[08:34:44] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[08:35:57] <drakonis> no? how would it
[08:36:47] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[08:43:41] <moon-child> because somebody put one there...
[08:43:47] <ns12> Virus libraries (e.g. cl-trojan-and-worms).
[08:43:49] <sm2n> It could, if someone here was evil. Hopefully that is not true though
[08:43:55] <moon-child> do you expect every line of code there has been vetted?
[08:44:00] <moon-child> you must trust.  Or not.
[08:44:10] <moon-child> But beware of falling into hypothetical rabbitholes like the thompson hack
[08:44:39] <ns12> cl-alexandria includes code to mine BItcoins.
[08:44:52] <sm2n> lol no
[08:45:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:45:27] *** Joins: semz (~none@user/semz)
[08:45:52] <sm2n> I would say reading library code is more of a cultural habit in the CL community than it might be in other language communities. Especially with M-.
[08:46:14] <drakonis> M-?
[08:46:36] <sm2n> But I don't know if people go and read libraries from start to finish (I do sometimes).
[08:46:50] <aeth> quicklisp is curated, unlike larger languages (it doesn't scale)
[08:46:55] <sm2n> Many libraries are short enough for it to be feasible
[08:46:55] <aeth> of course, something could slip by
[08:47:00] <ns12> With a MITM attack on a network used by Lisp zealots, it might be possible to mine Bitcoins using Alexandria.
[08:47:14] <sm2n> drakonis: M-. The emacs command to jump to defn
[08:47:18] <drakonis> oh
[08:47:21] <drakonis> right
[08:48:47] <ns12> aeth: Curated by whom? What if it is "curated" by someone with malicious intent?
[08:49:52] <aeth> afaik, every package goes through Xach
[08:50:17] <sm2n> I'm pretty sure he doesn't read all the code though
[08:50:19] <aeth> as opposed to many package management systems where you can just point it at a github or whatever
[08:50:28] <ns12> The security of almost every Lisper's computer depends on one person?
[08:50:29] <sm2n> he just checks if they build
[08:51:28] <ns12> "All test cases for cl-trojan-and-worms are passing".
[08:51:53] <sm2n> yes, so read the code in your dependencies beforehand if you are worried
[08:52:30] <White_Flame> everybody uses npm, even though there's malicious stuff there, too
[08:52:38] <White_Flame> probably in pip as well
[08:52:40] <ns12> sm2n: That is a lot of work.
[08:52:51] <aeth> npm is impossible to track
[08:52:54] <White_Flame> it's part of the model
[08:52:57] <sm2n> ns12: That is the only way no matter what package manager you use.
[08:53:02] <aeth> use any package and pull in hundreds of dependencies with npm
[08:53:30] <aeth> at least you have a chance to read all of your dependencies' code with CL
[08:53:36] <ns12> That is silly of JavaScripters.
[08:54:02] <sm2n> There are some efforts for distributed auditing/attestation, but they haven't really taken off.
[08:54:33] <sm2n> see <https://github.com/crev-dev/crev/>
[08:55:36] <sm2n> It's actually not bad in CL, since in my experience the set of dependencies that most projects have is relatively small
[08:55:51] <aeth> kind of sounds like a job for the government
[08:55:51] *** Joins: X-Scale` (~ARM@218.92.108.93.rev.vodafone.pt)
[08:56:02] <aeth> everyone needs code audited, nobody's going to spend time or money to audit it
[08:56:11] *** Joins: mrmr3 (~mrmr@user/mrmr)
[08:56:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:56:41] <sm2n> or similar governance orgs, yeah
[08:56:58] <moon-child> why the hell should I trust the government?
[08:57:01] *** Joins: scymtym_ (~user@ip-94-114-248-79.unity-media.net)
[08:57:09] *** Joins: dmgk_ (~dmgk@user/dmgk)
[08:57:11] * moon-child looks askance at nsa-backdoored crypto
[08:57:18] *** Joins: sndr (~sander@user/sander)
[08:57:30] <sm2n> Some languages are single implementation, and also have "blessed" libraries
[08:57:38] *** Joins: cognemo_ (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[08:57:51] <sm2n> the idea being that if you trust that the implementation is not malware, you should trust the libraries too
[08:57:55] *** Joins: Lord_Nightmare2 (Lord_Night@user/lord-nightmare/x-3657113)
[08:58:04] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca)
[08:58:25] <White_Flame> no system that I know which supports downloading libraries off the internet has a preventative vetting process for finding malicious things
[08:58:45] <sm2n> doesn't really work here either, but it seems plausible that people could pool money to pay people to audit code, through some foundation (the CL foundation?) or something
[08:58:47] <White_Flame> quicklisp as least (afaik) ensures that all dependencies in a single release all build & test with each other
[08:59:12] <White_Flame> you don't get that in most other languages
[08:59:15] <sm2n> The issue is that most people don't care enough to actually make such a thing happen anyway
[08:59:32] <White_Flame> if you're concerned about security, you download a package and stop using quicklisp
[08:59:46] <semz> ^
[08:59:49] <White_Flame> include that source code in your own internal repository and don't allow updates from teh outside world
[08:59:49] *** Joins: Demosthe1ex (~Demosthen@user/demosthenex)
[09:00:06] <sm2n> This is a problem everywhere, even outside language ecosystems — how do you verify any software you have isn't malicious?
[09:00:21] <semz> That also has the upside that you're thinking more about which dependencies you add
[09:00:23] <sm2n> (You can't really)
[09:00:38] *** Joins: gpiero_ (~quassel@camale.rm-rf.it)
[09:00:49] <White_Flame> sm2n: you'd have to be able to recognize 100% of all forms of maliciousness
[09:00:59] <aeth> it's just a subset of the problem of internet communities scaling beyond manual moderation of everything being possible... in this case, of code
[09:01:04] <White_Flame> as well as 100% of the means to obfuscate maliciousness
[09:01:12] <aeth> and the answer is people prefer scale to safety
[09:01:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:01:43] <sm2n> In general, it comes down to economics
[09:01:50] <Alfr> For this purpose start with considering all non-halting programs malicious.
[09:02:04] <White_Flame> heh
[09:05:10] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca) (*.net *.split)
[09:05:11] *** Quits: gpiero (~quassel@camale.rm-rf.it) (*.net *.split)
[09:05:11] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (*.net *.split)
[09:05:11] *** Quits: shka (~herr@109.231.0.226) (*.net *.split)
[09:05:11] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (*.net *.split)
[09:05:11] *** Quits: sander (~sander@user/sander) (*.net *.split)
[09:05:11] *** Quits: OlCe (~user@lfbn-nic-1-109-134.w2-15.abo.wanadoo.fr) (*.net *.split)
[09:05:11] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (*.net *.split)
[09:05:12] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[09:05:12] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[09:05:12] *** Quits: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113) (*.net *.split)
[09:05:12] *** Quits: hhdave (~hhdave@cpc95050-newt40-2-0-cust471.19-3.cable.virginm.net) (*.net *.split)
[09:05:12] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (*.net *.split)
[09:05:13] *** Quits: materialfuture (~materialf@149.248.8.187) (*.net *.split)
[09:05:13] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (*.net *.split)
[09:05:13] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[09:05:13] *** Quits: Krystof (~user@81.174.155.115) (*.net *.split)
[09:05:13] *** Quits: dmgk (~dmgk@user/dmgk) (*.net *.split)
[09:05:13] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (*.net *.split)
[09:05:13] *** Quits: mrmr (~mrmr@user/mrmr) (*.net *.split)
[09:05:13] *** Quits: tsiolkov (~tsiolkov@c-68-32-217-32.hsd1.mi.comcast.net) (*.net *.split)
[09:05:13] *** Quits: flip214 (~marek@user/flip214) (*.net *.split)
[09:05:14] *** sndr is now known as sander
[09:05:14] *** dmgk_ is now known as dmgk
[09:05:14] *** mrmr3 is now known as mrmr
[09:05:17] *** X-Scale` is now known as X-Scale
[09:07:42] *** Joins: shka (~herr@109.231.0.226)
[09:09:55] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[09:09:59] *** Quits: Lord_Nightmare2 (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 256 seconds)
[09:10:13] *** Joins: monaaraj (~MonAaraj@149.255.212.49)
[09:10:13] *** Joins: flip214 (~marek@h081217094109.dyn.cm.kabsi.at)
[09:10:13] *** Joins: materialfuture (~materialf@149.248.8.187)
[09:10:13] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[09:10:13] *** Joins: danieli (~danieli@user/danieli)
[09:10:13] *** Joins: skyl4rk (~tlvb@user/tlvb)
[09:10:13] *** Joins: ns12 (~ns12@user/ns12)
[09:10:13] *** Joins: Krystof (~user@81.174.155.115)
[09:10:13] *** Joins: tsiolkov (~tsiolkov@c-68-32-217-32.hsd1.mi.comcast.net)
[09:13:23] *** Quits: loke (~loke@junk.nocrew.org) (Ping timeout: 256 seconds)
[09:15:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[09:15:56] *** Joins: loke (~loke@junk.nocrew.org)
[09:19:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:26:28] *** Joins: OlCe` (~user@lfbn-nic-1-109-134.w2-15.abo.wanadoo.fr)
[09:27:38] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[09:29:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:45:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:46:32] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:48:57] *** Quits: parjanya (~esb@2804:14c:1ad:8b70::1000) (Ping timeout: 240 seconds)
[09:50:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[09:51:43] *** Joins: rgherdt (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de)
[09:53:46] *** Quits: tsiolkov (~tsiolkov@c-68-32-217-32.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[10:00:24] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[10:09:26] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[10:22:11] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[10:22:24] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:24:39] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[10:25:27] *** Quits: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22) (Remote host closed the connection)
[10:26:08] *** Joins: igemnace (~ian@user/igemnace)
[10:28:54] *** Quits: monaaraj (~MonAaraj@149.255.212.49) (Ping timeout: 256 seconds)
[10:29:42] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:30:49] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:32:35] *** Quits: asen (~asen@2408:821b:618:1a0:2cc1:43d3:3642:45c4) (Quit: Leaving)
[10:39:08] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7492:3e11:3d28:6977)
[10:41:12] *** Quits: myrrh (~markus@user/poet) (Remote host closed the connection)
[10:44:24] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:45:54] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[10:50:25] *** Joins: alfonsox (~quassel@103.92.42.80)
[10:54:11] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[10:55:02] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10eb:9295:e9f2:f6ff:6d46:e42c)
[10:56:31] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:58:10] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:58:41] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 245 seconds)
[11:02:15] *** Joins: theothornhill (~user@2a01:799:159d:aa00:df76:97d:6145:c211)
[11:07:24] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[11:07:36] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[11:07:55] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[11:12:49] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[11:13:40] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:14:11] *** Joins: amb007 (~a_bakic@0.14.23.93.rev.sfr.net)
[11:26:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:30:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[11:31:15] *** Demosthe1ex is now known as Demosthenex
[11:31:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:34:52] *** Joins: gaqwas (~john@dynamic-077-009-049-204.77.9.pool.telefonica.de)
[11:36:04] *** Joins: MajorBiscuit (~MajorBisc@c-001-022-052.client.tudelft.eduvpn.nl)
[11:47:06] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[11:47:15] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[11:54:13] *** Quits: amb007 (~a_bakic@0.14.23.93.rev.sfr.net) (Ping timeout: 240 seconds)
[11:54:48] *** Joins: amb007 (~a_bakic@49.15.23.93.rev.sfr.net)
[11:57:10] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:59:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[12:01:23] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[12:03:37] *** Quits: amb007 (~a_bakic@49.15.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:03:47] *** Quits: theothornhill (~user@2a01:799:159d:aa00:df76:97d:6145:c211) (Remote host closed the connection)
[12:04:15] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:04:52] *** Joins: treflip (~user@user/treflip)
[12:05:16] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Read error: Connection reset by peer)
[12:05:31] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[12:07:12] *** Joins: parjanya (~esb@2804:14c:1ad:8dcb:1db7:82e3:e08e:fda1)
[12:09:10] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Remote host closed the connection)
[12:20:12] *** Joins: breakwindows (~brkwnds@86.107.75.45)
[12:27:01] *** Joins: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d)
[12:28:53] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[12:39:56] *** Joins: pve (~pve@178-55-23-137.bb.dnainternet.fi)
[12:57:55] *** Quits: alfonsox (~quassel@103.92.42.80) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:20:56] <phoe> sm2n: (defun malicious-operator-p (x) (if (eq x 'eval) :very :maybe))
[13:21:38] <moon-child> (funcall #'eval ...)
[13:23:14] <phoe> oh no
[13:23:41] <moon-child> (progn (dont-halt) (eval ...))
[13:24:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:26:32] *** Joins: selwyn (~selwyn@user/selwyn)
[13:34:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[13:38:32] <frodef> I'm looking at Hunchentoot sessions, and I'm curious to understand why sessions are internally stored/referenced by an integer ID (rather than, say, the SESSION-STRING/cookie), anyone happen to know?
[13:40:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:41:00] *** Quits: rgherdt (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[13:41:47] *** Joins: rgherdt (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de)
[13:43:46] *** Joins: notzmv (~zmv@user/notzmv)
[13:47:17] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:48:04] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:53:41] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 245 seconds)
[14:03:37] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Ping timeout: 240 seconds)
[14:04:49] *** Joins: rogersm (~rogersm@90.166.180.250)
[14:06:53] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:07:40] *** Joins: igemnace (~ian@user/igemnace)
[14:08:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:09:32] *** Quits: pillton (~user@124.170.13.179) (Remote host closed the connection)
[14:09:42] *** Lord_of_Life_ is now known as Lord_of_Life
[14:14:11] *** Joins: igemnace_ (~ian@user/igemnace)
[14:17:02] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 240 seconds)
[14:18:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:21:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:26:08] <rotateq> With what in the MOP does a class track which instances it made to know what to update? I also mean the ones that weren't bound to symbols, but are still existent till the next full garbage collection.
[14:29:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:32:51] *** Joins: igemnace (~ian@user/igemnace)
[14:34:41] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[14:35:25] *** Quits: igemnace_ (~ian@user/igemnace) (Ping timeout: 240 seconds)
[14:36:36] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:39:01] <Krystof> a class doesn't track them
[14:39:41] <rotateq> okay Krystof, so do you know what does it then? :)
[14:39:46] <Krystof> yes!
[14:39:55] <Krystof> at least in some commonly-used implementations
[14:39:58] <rotateq> would you tell me this deep magical secret?
[14:40:06] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:40:10] <rotateq> SBCL is enough for now
[14:40:22] <Krystof> every time you ask me a question, I delete my half-finished description to answer your question
[14:40:34] <rotateq> heh! :D sry
[14:40:57] <Krystof> the class holds a description of its current layout (slots, inheritance, etc.).  That might be called a "layout" or a "wrapper" depending on context in sbcl
[14:41:13] <Krystof> each instance also refers to that layout
[14:41:13] <rotateq> yes okay ..
[14:41:46] <Krystof> if a class is updated, it marks the current layout as obsolete, and gets a new layout.  Now the class no longer refers to the old layout, but instances do
[14:42:14] <Krystof> when you access an instance, part of the access protocol is checking whether the instance's layout is up-to-date or obsolete.  If it's obsolete, you go into the update-instance flow
[14:42:37] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[14:42:41] <Krystof> if you never access an instance, it is never updated; it stays in its obsolete state (but it doesn't matter, because nothing accesses it)
[14:43:17] <rotateq> yes right I got that by little experimenting, also with the :allocation :class similarly
[14:45:09] <rotateq> so to say how i came to my question: in another talk with someone it came to singleton classes and I thought "hah, i have an idea" so I did it but the only thing that now misses is to look if there's still a referenced instance of a class anywhere
[14:45:31] <Krystof> so, the point is that nothing in this protocol requires the class to keep track of instances.  Instead, instances keep track of which version of the class they were defined with
[14:46:01] <rotateq> alright! thank you very much (again)
[14:46:39] <rotateq> so i could also do it with a locally scoped data structure to mimic it properly
[14:46:41] <Krystof> no problem.  For singletons, you could make allocate-instance throw an error, and use the class-prototype as the singleton instance?
[14:47:28] <rotateq> ahh right, didn't thought of allocate instance :) but made it with some other and a SINGLETON-CLASS metaclass for SINGLETON-OBJECTs
[14:48:56] <rotateq> then we came to this "oh so your methods aren't owned by the class?" and I thought longer, but not aware enough now how to make metaclass stuff (eg with funcallable-standard-class or standard-generic-function) to mimic even that safely for certain generic functions
[14:50:03] <rotateq> Krystof: and not aware how to use prototypes :) but it comes by time I hope
[14:51:28] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7492:3e11:3d28:6977) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:52:17] *** Quits: parjanya (~esb@2804:14c:1ad:8dcb:1db7:82e3:e08e:fda1) (Ping timeout: 240 seconds)
[14:53:24] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:54:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:54:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:58:37] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[14:58:38] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 256 seconds)
[14:58:43] <rotateq> and i realized again why it makes absolutely no sense (by logic!) to ask for the slot-values of an instance in the (allocate-instance :before)-method :D
[14:59:27] *** Joins: amb007 (~a_bakic@34.15.23.93.rev.sfr.net)
[15:00:58] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:01:45] <rotateq> ahh sry I surely meant the (initialize-instance :before)-method
[15:05:15] <rotateq> and "throw" an error? :D
[15:06:30] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:08:04] *** scymtym_ is now known as scymtym
[15:08:04] *** Quits: amb007 (~a_bakic@34.15.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:08:23] *** Joins: amb007 (~a_bakic@34.15.23.93.rev.sfr.net)
[15:08:23] *** Quits: amb007 (~a_bakic@34.15.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:08:40] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:10:57] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:11:36] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:17:17] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Quit: quit)
[15:17:19] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[15:19:21] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:296a:5977:b176:470b)
[15:20:17] *** Quits: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d) (Ping timeout: 240 seconds)
[15:25:56] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:28:35] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[15:34:57] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:35:08] *** Quits: igemnace (~ian@user/igemnace) (Read error: Connection reset by peer)
[15:35:38] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:39:52] *** Joins: theothornhill (~user@2a01:799:159d:aa00:94b2:5b60:dc06:39c0)
[15:42:49] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (#commonlisp)
[15:48:53] *** Quits: theothornhill (~user@2a01:799:159d:aa00:94b2:5b60:dc06:39c0) (Remote host closed the connection)
[15:54:45] *** Joins: igemnace (~ian@user/igemnace)
[16:04:16] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[16:09:03] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:25:35] <beach> Krystof: In Common Lisp, errors are not "thrown", they are "signaled". :)
[16:25:54] * beach thinks Krystof might be using other languages these days. 
[16:26:30] <moon-child> (throw nil (make-instance 'error))
[16:27:10] <beach> C'mon, allow me to pester Krystof a bit.
[16:27:51] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[16:28:07] <Duuqnd> Now I'm really tempted to print out a DESCRIBE output of an error object and start tossing it around.
[16:28:10] <Duuqnd> Literally throwing errors
[16:28:29] <moon-child> beach: :)
[16:29:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:30:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:30:54] *** Joins: heisig (~heisig@p508b541c.dip0.t-ipconnect.de)
[16:31:57] <phoe> d'oh
[16:32:08] <phoe> beach: it's easy and practical to throw errors in Common Lisp
[16:32:22] <phoe> (throw 'somewhere (make-instance 'error))
[16:33:12] <phoe> oh wait moon-child already mentioned that
[16:33:21] * phoe hides
[16:34:27] <moon-child> phoe: considering you wrote the common lisp condition system book, I think you have way more right to say that than I do :P
[16:34:34] <phoe> nope
[16:34:39] <phoe> everyone has a right to throw errors
[16:34:43] <phoe> it's a part of standard Common Lisp
[16:34:47] <phoe> just like throwing non-errors
[16:36:15] * moon-child throws phoe a sandwich
[16:36:51] * phoe thankfully is wrapped in a (catch 'phoe ...), calls #'CONSUME on the sandwich
[16:37:19] <yitzi> I want a sandwich. Throw one to me moon-child!
[16:37:37] <moon-child> (throw 'yitzi (make-instance 'sandwich))
[16:37:37] <edgar-rft> (funcall #'munch)
[16:37:44] * phoe hopes it isn't EQ to the one he received
[16:38:31] <yitzi> ACTION yitzi catches and rethrows into separate thread.
[16:38:57] <moon-child> (throw 'phoe #1=#.(make-instance 'sandwich)) (throw 'yitzi #1#)
[16:39:11] <phoe> okay, now let's figure out how this one works
[16:39:23] <phoe> is there a race condition caused by #'CONSUME and #'MUNCH?
[16:39:53] <yitzi> Ha! Yes. We need sandwich-deep-clone.
[16:41:37] *** Quits: heisig (~heisig@p508b541c.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[16:41:41] <moon-child> (let ((x (make-instance 'sandwich))) (setf (sandwich-filling x) x) x)
[16:41:48] *** Joins: heisig (~heisig@p508b541c.dip0.t-ipconnect.de)
[16:43:59] <yitzi> I'm off to go teach. Thanks phoe, moon-child and edgar-rft for making me laugh so early here. Cheers!
[16:45:49] <madnificent> Any clues on where to find documentation regarding woo? (and I suspect dexador)
[16:46:02] <phoe> nowhere
[16:46:10] <phoe> I doubt you can find that what does not exist
[16:46:23] <madnificent> phoe: I don't know where that is.  Is that a new tool?  I've seen the name before so it must be very popular!  ^_^
[16:46:25] <phoe> AFAIK the only real source of information is the source code itself
[16:46:59] <moon-child> that's not true!  There is a readme
[16:47:07] <moon-child> it has ~10 lines of code examples
[16:47:09] <moon-child> :^)
[16:47:24] <madnificent> that's very exact documentation on the behaviour, but sadly any change would become a breaking change.  must lean towards browser version numbers.
[16:50:22] *** Joins: jpl01 (~user@2001:16b8:497a:cd00:3d07:f3b:5cfa:3fa9)
[16:53:43] *** Joins: miique (~miique@181.46.139.166)
[16:59:36] *** Quits: z3t0 (~z3t0@146.71.14.98) (Read error: Connection reset by peer)
[17:00:17] *** Joins: parjanya (~esb@2804:14c:1ad:8dcb:1db7:82e3:e08e:fda1)
[17:00:26] <Krystof> beach: oh boy it's too long since I've talked about, let alone written, proper Lisp code
[17:00:44] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:01:50] *** Joins: booaa (~booaa@150.116.171.108)
[17:03:14] *** Joins: kevingal (~quassel@37.228.202.92)
[17:03:25] *** Quits: breakwindows (~brkwnds@86.107.75.45) (Ping timeout: 240 seconds)
[17:05:29] <semz> What is improper Lisp code? 🤔
[17:06:20] <heisig> semz: (declare (optimize (speed 3) (safety 0))) :D
[17:07:38] *** Joins: theothornhill (~user@2a01:799:159d:aa00:e177:536f:2816:7dc8)
[17:08:33] <jackdaniel> (declare (optimize (speed yes)))
[17:11:01] <heisig> jackdaniel: Brilliant!  I think I will explicitly allow this declaration in my loop optimization library :)
[17:11:20] <jackdaniel> :)
[17:15:36] <rotateq> beach: And I'm glad you teached me to use "signaling a condition" too. :)
[17:16:13] <rotateq> (declare (beat-c yes))
[17:19:59] <Xach> heisig: some petalisp failures this morning
[17:20:19] <Xach> http://report.quicklisp.org/2022-01-12/failure-report/petalisp.html has some info
[17:20:20] <phoe> (declare (optimize)) ;; the compiler should know what to do
[17:20:44] <phoe> Xach: ooh, a missing split-sequence dependency
[17:20:45] <jackdaniel> technically correct speak is means towards the end of  making the communication easier. in a spirit of this definition the fact that in common lisp conditions are "signaled" and code is organized in "packages" is very unfortunate - it is a barrier for efficient communication with people not immersed in common lisp
[17:21:42] <rotateq> phoe: QOCLC -> Quantum Oracle Common Lisp Compiler
[17:22:15] <semz> very unfortunate acronym
[17:22:45] <random-nick> jackdaniel: I thought java also uses the word package?
[17:23:37] *** Quits: theothornhill (~user@2a01:799:159d:aa00:e177:536f:2816:7dc8) (Ping timeout: 240 seconds)
[17:24:01] <jackdaniel> I didn't say that it doesn't
[17:24:06] <rotateq> yes indeed jackdaniel
[17:24:21] <rotateq> (the unfortunateness i mean)
[17:24:48] <Xach> this draft RFC always made me really mad: https://datatracker.ietf.org/doc/html/draft-meyer-lisp-cons-04
[17:25:12] *** Joins: Bike (~Glossina@71.69.170.70)
[17:25:12] *** ChanServ sets mode: +o Bike
[17:25:21] <moon-child> 'A Content distribution Overlay Network Service for LISP'  ... what ??
[17:25:31] <jackdaniel> name coincidence
[17:25:34] <jackdaniel> for both lisp and cons
[17:25:37] <Xach> and car and cdr
[17:25:41] <Xach> it's a prank
[17:25:57] <jackdaniel> right, I was about to say that it sounds like a poor joke
[17:26:09] <Xach> that's why it makes me mad.
[17:28:05] <heisig> Xach, phoe: Thanks, I just added the missing dependency on split-sequence.
[17:28:32] <phoe> if I had a cent I had for every time I did that mistake
[17:28:47] <phoe> ...I would certainly have some US foreign currency in my household now
[17:29:33] <phoe> I wonder if there could be a Lisp bot that figures out which system needs the dependency, opens its ASD file, inserts the dependency, and automatically files a quicklisp PR
[17:29:41] <phoe> of course it would be wrong like 20% of the time
[17:29:51] <phoe> but the remaining 80%, hmm
[17:30:00] <phoe> s/quicklisp PR/a PR from quicklisp/
[17:30:32] <_death> with package-inferred-systems, an :import-from suffices
[17:30:40] <phoe> that too!
[17:31:41] <heisig> I think I should just add extra CI jobs that load each system independently, and not just all of them in the 'usual' order.
[17:31:52] <jackdaniel> wasn't that we have too many 80% correct solutions and too little complete ones? at least that's what a blog post I see every 1,5 year on hackernews says
[17:31:57] <jackdaniel> the lisp curse or something
[17:32:10] <jackdaniel> I suppose that the curse is that I have to see it every 1,5 year, and lisp is only accidental
[17:32:15] <phoe> ^
[17:32:24] <phoe> a bot that automatically files PRs for missing dependencies would be good enough I guess
[17:32:45] <phoe> even if it sometimes will fail to do the right thing
[17:32:55] <phoe> Xach: would you accept anything like that into your workflow, or is that a silly and/or unnecessary idea?
[17:33:03] <jackdaniel> like it will file an issue instead of a pr?
[17:33:39] <phoe> jackdaniel: yes - if it can't reliably insert a dependency or make it build after inserting it, it should just file an issue IMO
[17:34:34] <jackdaniel> I was joking - you've said that "bot (...) files PRs, (...)it sometimes will fail to do the right thing"
[17:34:44] <jackdaniel> so the only thing beside PR that comes to mind is an issue
[17:35:05] <_death> github bots are bad.. if I started getting issues from them, I'd disable issues
[17:35:48] <Xach> phoe: i don't really want to automatically file PRs. i have code that automatically formats PRs for me, but I submit them "manually" to some degree.
[17:35:54] <Xach> err
[17:35:57] <Xach> sorry, not PRs. issues.
[17:36:01] * Xach got confused
[17:36:07] <Xach> I would never ever want to automatically file PRs.
[17:36:27] <phoe> Xach: OK - just wondering if there's anything that could optimize your workflow a bit
[17:36:30] <phoe> _death: also fair point
[17:37:05] <_death> when a program makes work for a person..
[17:38:34] <Xach> phoe: it would be great if people just stopped making software for a while
[17:38:46] <Xach> say, for 2 to 5 years
[17:39:55] <Xach> not just for lisp
[17:40:14] <phoe> oh
[17:40:17] <phoe> I'll try
[17:40:41] <rotateq> so taking a step back and proving some more critical things and let other things ripe out maybe?
[17:41:41] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:44:33] <moon-child> would be cool if you could take a parameter in the function namespace.  (defun f (#'x y) (x y)).  But it would make for inconsistencies w/destructuring lambda lists
[17:45:16] <phoe> (defun f (x y) (fbind ((x x)) (x y))) is a workaround
[17:45:23] <phoe> where fbind is available in serapeum
[17:45:51] <moon-child> I mean, could just make my own defun/lambda/
[17:46:07] <_death> but it's not the same function, is it?
[17:46:24] <moon-child> _death: what do you mean?
[17:46:27] <phoe> _death: AFAIK correct, it's not EQ
[17:46:37] <moon-child> ah, yes
[17:47:48] *** Quits: heisig (~heisig@p508b541c.dip0.t-ipconnect.de) (Quit: Leaving)
[17:48:40] <phoe> there's no way to make it both EQ and portably I think
[17:49:05] <moon-child> can do it with a code walker
[17:51:17] *** Quits: OlCe` (~user@lfbn-nic-1-109-134.w2-15.abo.wanadoo.fr) ()
[17:51:35] *** Joins: OlCe (~user@lfbn-nic-1-109-134.w2-15.abo.wanadoo.fr)
[17:58:30] <mfiano> Hmm...did I find a conformance bug in SBCL?
[17:59:56] <mfiano> (subtypep foo-instance 'foo) is an error, but (subtypep foo-instance foo-instance) ;=> T,T
[18:00:25] <mfiano> When would an instance be considered a type specifier?
[18:00:44] <_death> for example classes are type specifiers
[18:01:17] <mfiano> Ah, I thought their name was only.
[18:01:38] <moon-child> can't find relevant section of clhs
[18:02:21] <_death> clhs 4.2.3
[18:02:21] <specbot> Type Specifiers: http://www.lispworks.com/reference/HyperSpec/Body/04_bc.htm
[18:03:15] <moon-child> hm, but
[18:03:29] *** Quits: booaa (~booaa@150.116.171.108) (Quit: Connection closed)
[18:03:31] <moon-child> (typep #1=#.(make-instance 'foo) #1#) gives 'bad thing to be a type specifier: #<COMMON-LISP-USER::FOO {10047D88F3}>'
[18:03:35] <moon-child> so I think subtypep does err
[18:03:42] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:03:50] <_death> that's not a class
[18:04:00] <mfiano> My example was with an instance, not a class
[18:04:03] <moon-child> ^
[18:04:26] <_death> you asked a question, and I gave an answer.. the example was incomplete
[18:04:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:04:46] <mfiano> A standard-object to be exact
[18:04:48] <_death> classes are also instances
[18:04:54] <mfiano> But not vice versa
[18:05:07] <moon-child> (if (equal type1 type2) (values t t) ...) ;the culprit
[18:05:10] <_death> so give a complete example
[18:05:45] <mfiano> (defclass foo () ()) (let ((foo (make-instance 'foo))) (subtypep foo foo))
[18:06:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[18:06:39] <_death> ok.. so now you're passing something that's not a type specifier, and so violates constraints in the Arguments and Values section
[18:07:08] <mfiano> Correct, and SBCL is happy to return T,T. Is this UB or a conformance problem?
[18:07:25] <_death> clhs subtypep
[18:07:25] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_subtpp.htm
[18:08:03] <phoe> mfiano: likely the latter
[18:08:07] <mfiano> That's what I read and a type specifier should not accept a standard-object
[18:08:08] <beach> Undefined, apparently.  And a case for WSCL.
[18:08:16] <phoe> I can assume that SUBTYPEP can easily optimize
[18:08:28] <phoe> if two type specifiers are EQ then it can safely return (VALUES T T)
[18:08:34] <phoe> because they denote the same type
[18:08:51] <mfiano> The key words are type specifiers
[18:08:52] <beach> mfiano: A standard object can be a type specifier.
[18:09:00] <mfiano> It can...oh, hmm
[18:09:03] <Bike> that is exactly what sbcl is doing, phoe. though it uses equal.
[18:09:05] <phoe> beach: but it isn't a class
[18:09:05] <_death> clhs 1.4.4.3
[18:09:05] <specbot> The ``Arguments and Values'' Section of a Dictionary Entry: http://www.lispworks.com/reference/HyperSpec/Body/01_ddc.htm
[18:09:14] <phoe> like, class objects can be type specifiers
[18:09:18] <beach> phoe: If it is not a class, it is not a type specifier.
[18:09:25] <mfiano> And it is not
[18:09:32] <beach> I know.
[18:09:36] <Bike> the instance is not a type specifier. as such, subtypep has been called incorrectly and the behavior is undefined.
[18:09:39] <phoe> but in case of (defclass foo () ()), (make-instance 'foo) is not a valid argument to SUBTYPEP
[18:10:06] <phoe> sbcl could possibly signal an error, something like a type-error because the argument is not of type (or symbol cons class)
[18:10:26] <phoe> but that's already a zone of SBCL being nice or not
[18:10:30] <phoe> since it's already UB
[18:10:42] <mfiano> Ok yes, I understand now.
[18:11:13] <phoe> Bike: OK, and by pure luck that defers to EQ for standard objects
[18:11:20] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:11:29] *** Joins: amb007 (~a_bakic@31.15.23.93.rev.sfr.net)
[18:11:29] *** Quits: amb007 (~a_bakic@31.15.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[18:11:29] <phoe> so, an (un)fortunate accident
[18:11:41] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[18:11:42] <moon-child> phoe: that's not luck, that's specified :P
[18:11:56] <phoe> I meant pure luck that SUBTYPEP on SBCL does EQUAL before anything else
[18:12:07] <moon-child> ah, yes
[18:13:08] <phoe> could possibly file a wishlist issue for SBCL, at least to have a type check in there
[18:13:36] <phoe> could work in safe code, I guess
[18:13:52] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10eb:9295:e9f2:f6ff:6d46:e42c) (Quit: Leaving)
[18:15:51] <mfiano> Thanks all, I haven't been Lisping for some months (unfortunately missed the 2-5 years), and made a mistake when I really wanted (eq (class-name (class-of instance)) type-specifier).
[18:16:48] <_death> I should get back to Lisping for a few hours ;)
[18:18:49] *** Joins: _ante_ (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[18:31:15] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:567f:a71e:f346:c5f0)
[18:33:17] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:43:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:43:46] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[18:44:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:44:58] <mfiano> Stupid question, but is there a library that mimics "interfaces" from other languages. What I mean, is I'd like it to be an error if the user forgets to implement a method for all of a set of generic functions for some given class/classes/etc specializers (that the library author decides on)
[18:46:23] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[18:47:19] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:47:23] <moon-child> coalton
[18:48:06] <mfiano> When dealing with very composable APIs with lots of mixins etc, it can be difficult to remember to specialize them all. I could just say "their problem" when they inherit the wrong behaviors, but it would be nice to issue a warning. I know the semantics aren't exactly clear here, and that is why I'd like to look at if some libraries ever attempted to solve it, excluding some DSL/statically
[18:48:09] <mfiano> typed language written in CL. I just want a somewhat light MOP wrapper.
[18:48:33] <semz> When would this error be throw^W signalled?
[18:49:33] <mfiano> Maybe runtime on each invocation. I don't want to sacrifice the dynamism of Lisp for a mere correctness check.
[18:49:47] <mfiano> But that falls under the "unclear semantics"
[18:50:22] <moon-child> (defclass c ...) (defmethod ... ((c)))... (check-class c)
[18:50:34] <semz> ^ is how I'd do it ad-hoc too
[18:50:45] <semz> but I'm not aware of any library
[18:50:50] <mfiano> Heh ok, thanks.
[18:51:46] <moon-child> you could also make some kinda scope.   (my-defclass c (super) (slots) (methods))
[18:51:52] <moon-child> and it checks you define all the required methods
[18:52:10] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Remote host closed the connection)
[18:52:16] <moon-child> (can still define other methods later ofc)
[18:52:49] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:02:12] <mfiano> Unrelated: Just stumbled upon this, which seems, umm, interesting: https://github.com/tfeb/conduit-packages
[19:07:01] *** Joins: CrashTestDummy (~CrashTest@ool-ad020ec7.dyn.optonline.net)
[19:08:25] *** Quits: CrashTestDummy (~CrashTest@ool-ad020ec7.dyn.optonline.net) (Client Quit)
[19:21:14] *** anticomputer_ is now known as anticomputer
[19:23:07] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:26:24] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:30:58] *** Joins: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d)
[19:34:02] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:37:36] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:39:33] *** Quits: phantomics (~phantomic@97-118-136-125.hlrn.qwest.net) (Ping timeout: 256 seconds)
[19:40:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[19:43:31] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:46:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:47:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:52:57] *** Joins: phantomics (~phantomic@71-218-243-149.hlrn.qwest.net)
[20:04:58] *** Joins: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22)
[20:05:16] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:05:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[20:08:24] *** Joins: thomp (~thomp@162.212.34.219)
[20:13:29] <madnificent> mfiano: I also work with (check-xyz) but it's for configuration files rather than classes.  We want something similar in software related to our lisp code too.  But very much ad-hoc.
[20:15:05] *** Joins: Oladon (~olad@98.43.81.226)
[20:24:37] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:27:52] *** Quits: thomp (~thomp@162.212.34.219) (Ping timeout: 256 seconds)
[20:29:08] *** Joins: Catie (~user@user/catie)
[20:30:00] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:30:54] <madnificent> Anyone know if it's intentional that #'woo:run does not yield?  it runs forever (the webserver works though)
[20:31:23] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:32:49] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:33:28] <etimmons> I've never used woo, but I imagine it's intentional and the thread that calls run becomes the thread in charge of the event loop
[20:33:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:34:16] *** Quits: unyu (~pyon@user/pyon) (Read error: Connection reset by peer)
[20:34:40] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:35:54] <madnificent> etimmons: could be, though there's a stop-server command and that expects some input.
[20:36:23] *** Joins: unyu (~pyon@user/pyon)
[20:36:24] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:50:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:59:01] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:296a:5977:b176:470b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:03:40] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:06:49] *** Quits: treflip (~user@user/treflip) (Ping timeout: 256 seconds)
[21:09:05] *** Joins: raeda_ (~raeda@72.49.214.135)
[21:11:55] *** Quits: raeda (~raeda@72.49.214.135) (Ping timeout: 256 seconds)
[21:12:33] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:12:45] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[21:14:37] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[21:14:41] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[21:23:29] <etimmons> madnificent: That does seem weird then
[21:28:16] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 245 seconds)
[21:35:40] *** Joins: VincentVega (~user@212.97.1.105)
[21:35:47] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:36:21] *** Joins: amb007 (~a_bakic@49.15.23.93.rev.sfr.net)
[21:38:22] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[21:40:32] *** Joins: thomp (~thomp@162.212.34.219)
[21:41:31] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[21:46:09] <luis> etimmons: I'd rather "merge" osicat pull requests using rebase as I find the history is much more readable that way, but you're the one doing actual work so if you prefer to work that way that's fine too
[21:46:32] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[21:46:50] *** Joins: shka (~herr@109.231.0.226)
[21:48:05] <luis> etimmons: we can enable the "enforce linear history" option on github, if you agree
[21:48:24] <jackdaniel> oh oh, I've came with a saying: "technically correct to real world is what matematically equal is to floats"
[21:48:35] <phoe> :D
[21:48:38] <phoe> jackdaniel: I like that one
[21:49:32] <jackdaniel> great, my place among wilde and goethe is granted now
[21:49:48] <etimmons> luis: I agree. I don't normally use GitHub (and have all my Gitlab projects set up for linear history) so I totally forgot to check what would happen when hitting the merge button
[21:50:32] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[21:51:07] <luis> etimmons: ok, done. We share the same sort of OCD then :D
[21:51:13] <etimmons> :)
[21:52:26] <nij-> Hi! Any defacto way to quickly get places in a deeply nested sequence? Something like
[21:52:30] <nij->  (place '(2 :a :e) '(nil nil (:a (:b 3 :e 4) :d 5))) ;; => 4
[21:53:11] <jackdaniel> I have a strong impression I saw this question not that long ago from you (with answers!)
[21:53:51] <pjb> nij-: http://groups.google.com/group/comp.lang.lisp/msg/1bab4b5bae1fdca3 http://groups.google.com/group/comp.lang.lisp/msg/190d771c0e033a1c
[21:54:07] <phoe> nij-: https://github.com/AccelerationNet/access
[21:56:50] *** Quits: amb007 (~a_bakic@49.15.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[21:57:21] *** Joins: monaaraj (~MonAaraj@149.255.212.20)
[21:58:33] *** Joins: leo_song_ (~leo_song@1.156.41.129)
[21:58:34] *** Joins: jdz_ (~jdz@185.23.160.114)
[21:58:59] *** Joins: form_fee- (~form_feed@nixon.einval.eu)
[21:59:05] *** Joins: hubvu_ (sid495858@tinside.irccloud.com)
[21:59:36] *** Joins: nefercheprure (~tma@twin.jikos.cz)
[21:59:37] *** Joins: zagura__ (~zagura@vps.zagura.pl)
[22:00:26] *** Joins: amb007 (~a_bakic@77.38.22.93.rev.sfr.net)
[22:05:15] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (*.net *.split)
[22:05:15] *** Quits: loke (~loke@junk.nocrew.org) (*.net *.split)
[22:05:15] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (*.net *.split)
[22:05:16] *** Quits: semz (~none@user/semz) (*.net *.split)
[22:05:16] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[22:05:16] *** Quits: pjb (~pjb@user/pjb) (*.net *.split)
[22:05:16] *** Quits: Josh_2 (~user@37.25.47.130) (*.net *.split)
[22:05:16] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (*.net *.split)
[22:05:16] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[22:05:16] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (*.net *.split)
[22:05:16] *** Quits: phadthai (mmondor@ginseng.pulsar-zone.net) (*.net *.split)
[22:05:17] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (*.net *.split)
[22:05:17] *** Quits: hubvu (sid495858@user/hubvu) (*.net *.split)
[22:05:17] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (*.net *.split)
[22:05:17] *** Quits: mgxm (~mgxm@user/mgxm) (*.net *.split)
[22:05:17] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: derelict (derelict@user/derelict) (*.net *.split)
[22:05:17] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (*.net *.split)
[22:05:17] *** Quits: splatt990 (4b25e29db1@198.108.77.17) (*.net *.split)
[22:05:17] *** Quits: |3b| (bbb@user/3b/x-2324788) (*.net *.split)
[22:05:17] *** Quits: jsatk (sid304796@id-304796.helmsley.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff) (*.net *.split)
[22:05:17] *** Quits: jemoka (~jemoka@user/jemoka) (*.net *.split)
[22:05:17] *** Quits: ogamita (~t@hubble.informatimago.com) (*.net *.split)
[22:05:18] *** Quits: Odin- (~odin@cybernetic.anarchism.is) (*.net *.split)
[22:05:18] *** Quits: ori (~atdt@user/ori) (*.net *.split)
[22:05:18] *** Quits: TMA (tma@twin.jikos.cz) (*.net *.split)
[22:05:18] *** Quits: jmercouris (sid438340@id-438340.hampstead.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: form_feed (~form_feed@user/f/x-7101985) (*.net *.split)
[22:05:18] *** Quits: micro (~micro@user/micro) (*.net *.split)
[22:05:18] *** Quits: jdz (~jdz@185.23.160.114) (*.net *.split)
[22:05:18] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[22:05:18] *** Quits: antoszka (uid528518@id-528518.uxbridge.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: spacebat3 (spacebat@spot.ubermonkey.net) (*.net *.split)
[22:05:18] *** Quits: hefner (~hefner@user/hefner) (*.net *.split)
[22:05:18] *** Quits: BytesAndCoffee (~libera@bytes.coffee) (*.net *.split)
[22:05:18] *** Quits: ecraven (~ecraven@user/nex) (*.net *.split)
[22:05:18] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[22:05:18] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[22:05:18] *** Quits: gin (~gin@user/gin) (*.net *.split)
[22:05:19] *** Quits: cpape (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[22:05:19] *** Quits: ec (~ec@gateway/tor-sasl/ec) (*.net *.split)
[22:05:19] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (*.net *.split)
[22:05:19] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[22:05:19] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (*.net *.split)
[22:05:19] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[22:05:19] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[22:05:19] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (*.net *.split)
[22:05:19] *** Quits: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073) (*.net *.split)
[22:05:19] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (*.net *.split)
[22:05:19] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (*.net *.split)
[22:05:20] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[22:05:20] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[22:05:20] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[22:05:20] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (*.net *.split)
[22:05:20] *** Quits: even4void (even4void@came.here.for-some.fun) (*.net *.split)
[22:05:21] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[22:05:21] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[22:05:21] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[22:05:21] *** Quits: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22) (*.net *.split)
[22:05:21] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:567f:a71e:f346:c5f0) (*.net *.split)
[22:05:21] *** Quits: parjanya (~esb@2804:14c:1ad:8dcb:1db7:82e3:e08e:fda1) (*.net *.split)
[22:05:21] *** Quits: miique (~miique@181.46.139.166) (*.net *.split)
[22:05:21] *** Quits: jpl01 (~user@2001:16b8:497a:cd00:3d07:f3b:5cfa:3fa9) (*.net *.split)
[22:05:21] *** Quits: notzmv (~zmv@user/notzmv) (*.net *.split)
[22:05:21] *** Quits: linjian (~linj@user/linj) (*.net *.split)
[22:05:21] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (*.net *.split)
[22:05:21] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (*.net *.split)
[22:05:21] *** Quits: iquites (sid77830@id-77830.lymington.irccloud.com) (*.net *.split)
[22:05:21] *** Quits: gko (~user@user/gko) (*.net *.split)
[22:05:22] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (*.net *.split)
[22:05:22] *** Quits: griffinmb (sid410590@id-410590.helmsley.irccloud.com) (*.net *.split)
[22:05:22] *** Quits: shka (~herr@109.231.0.226) (*.net *.split)
[22:05:22] *** Quits: raeda_ (~raeda@72.49.214.135) (*.net *.split)
[22:05:23] *** Quits: kevingal (~quassel@37.228.202.92) (*.net *.split)
[22:05:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[22:05:23] *** Quits: rogersm (~rogersm@90.166.180.250) (*.net *.split)
[22:05:23] *** Quits: pve (~pve@178-55-23-137.bb.dnainternet.fi) (*.net *.split)
[22:05:23] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[22:05:23] *** Quits: gaqwas (~john@dynamic-077-009-049-204.77.9.pool.telefonica.de) (*.net *.split)
[22:05:23] *** Quits: sander (~sander@user/sander) (*.net *.split)
[22:05:23] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (*.net *.split)
[22:05:23] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (*.net *.split)
[22:05:23] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (*.net *.split)
[22:05:24] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[22:05:24] *** Quits: qhong_ (~qhong@rescomp-21-400677.stanford.edu) (*.net *.split)
[22:05:24] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (*.net *.split)
[22:05:24] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (*.net *.split)
[22:05:24] *** Quits: frodef (~frode@46.212.93.4) (*.net *.split)
[22:05:24] *** Quits: lisp123win (~user@80.227.170.170) (*.net *.split)
[22:05:24] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[22:05:24] *** Quits: jgkamat (~jay@user/jay) (*.net *.split)
[22:05:24] *** Quits: paul0 (~paul0@user/paul0) (*.net *.split)
[22:05:24] *** Quits: alvaro121 (~aa@201.230.126.66) (*.net *.split)
[22:05:24] *** Quits: hisacro (~OBSD@my.displ.nl) (*.net *.split)
[22:05:24] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (*.net *.split)
[22:05:25] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[22:05:25] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (*.net *.split)
[22:05:25] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[22:05:25] *** Quits: bollu (~bollu@159.65.151.13) (*.net *.split)
[22:05:25] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (*.net *.split)
[22:05:25] *** Quits: utis (~utis@vpn-client281.uio.no) (*.net *.split)
[22:05:25] *** Quits: stack (~stack@ctrl-c.club) (*.net *.split)
[22:05:25] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[22:05:25] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (*.net *.split)
[22:05:25] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[22:05:25] *** Quits: sveit_ (~sveit@45.77.0.246) (*.net *.split)
[22:05:25] *** Quits: specbot (~specbot@common-lisp.net) (*.net *.split)
[22:05:25] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[22:05:25] *** Quits: markasoftware (~quassel@107.161.26.124) (*.net *.split)
[22:05:26] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[22:05:26] *** Quits: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d) (*.net *.split)
[22:05:26] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (*.net *.split)
[22:05:26] *** Quits: sp (~sp@user/susam) (*.net *.split)
[22:05:26] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (*.net *.split)
[22:05:26] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (*.net *.split)
[22:05:26] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (*.net *.split)
[22:05:26] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (*.net *.split)
[22:05:26] *** Quits: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef) (*.net *.split)
[22:05:26] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (*.net *.split)
[22:05:27] *** Quits: sirufer (68f46fc7c3@user/sirufer) (*.net *.split)
[22:05:27] *** Quits: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001) (*.net *.split)
[22:05:27] *** Quits: vegai (vegai@kapsi.fi) (*.net *.split)
[22:05:27] *** Quits: resttime (~rest@2604:a880:400:d0::1b48:d001) (*.net *.split)
[22:05:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (*.net *.split)
[22:05:27] *** Quits: xaltsc (~xaltsc@user/xaltsc) (*.net *.split)
[22:05:28] *** Quits: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81) (*.net *.split)
[22:05:28] *** Quits: jgart (16dd2205e4@irc.cheogram.com) (*.net *.split)
[22:05:28] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (*.net *.split)
[22:05:28] *** Quits: spec (~spec@user/spec) (*.net *.split)
[22:05:28] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[22:05:28] *** Quits: Kabriel (~Kabriel@user/kabriel) (*.net *.split)
[22:05:28] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (*.net *.split)
[22:05:28] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[22:05:28] *** Quits: dbotton (sid492350@id-492350.lymington.irccloud.com) (*.net *.split)
[22:05:28] *** Quits: easye (~user@oxi.slack.net) (*.net *.split)
[22:05:29] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (*.net *.split)
[22:05:29] *** Quits: susam (~susam@user/susam) (*.net *.split)
[22:05:29] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[22:05:29] *** Quits: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (*.net *.split)
[22:05:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[22:05:30] *** Quits: epony (~epony@user/epony) (*.net *.split)
[22:05:30] *** Quits: kakuhen (~kakuhen@user/kakuhen) (*.net *.split)
[22:05:30] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (*.net *.split)
[22:05:30] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (*.net *.split)
[22:05:30] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (*.net *.split)
[22:05:30] *** Quits: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de) (*.net *.split)
[22:05:30] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[22:05:31] *** Quits: antoszka-r (~antoni@rozalia.antoszka.pl) (*.net *.split)
[22:05:31] *** Quits: dale (dale@user/dale) (*.net *.split)
[22:05:31] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[22:05:31] *** Quits: copec (~copec@schrodbox.unaen.org) (*.net *.split)
[22:05:31] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[22:05:31] *** Quits: drakonis (drakonis@user/drakonis) (*.net *.split)
[22:05:31] *** Quits: hirez- (~hirez@2602:ffc5:20::1:512e) (*.net *.split)
[22:05:32] *** Quits: bldr (~bull@185.117.72.168) (*.net *.split)
[22:05:32] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[22:05:32] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[22:05:32] *** Quits: sepanko (~sepanko@user/sepanko) (*.net *.split)
[22:05:32] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (*.net *.split)
[22:05:32] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (*.net *.split)
[22:05:33] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (*.net *.split)
[22:05:33] *** Quits: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com) (*.net *.split)
[22:05:33] *** Quits: theBlackDragon (~dragon@fvwm/admin) (*.net *.split)
[22:05:33] *** Quits: samebchase (~samebchas@51.15.68.182) (*.net *.split)
[22:05:33] *** Quits: jackdaniel (~jack@user/jackdaniel) (*.net *.split)
[22:05:34] *** Quits: les (znc@user/les) (*.net *.split)
[22:05:34] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (*.net *.split)
[22:05:34] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[22:05:34] *** Quits: Fade (fade@outrider.deepsky.com) (*.net *.split)
[22:05:34] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[22:05:34] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (*.net *.split)
[22:05:34] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[22:05:34] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (*.net *.split)
[22:05:34] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (*.net *.split)
[22:05:34] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (*.net *.split)
[22:05:35] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (*.net *.split)
[22:05:35] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (*.net *.split)
[22:05:35] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[22:05:35] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (*.net *.split)
[22:05:35] *** Quits: opc0de (~nathan@user/opcode) (*.net *.split)
[22:05:35] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (*.net *.split)
[22:05:35] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: sgithens (sid10659@id-10659.helmsley.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: pok (~pok@user/pok) (*.net *.split)
[22:05:35] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (*.net *.split)
[22:05:36] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[22:05:36] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[22:05:36] *** Quits: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c) (*.net *.split)
[22:05:36] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[22:05:36] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (*.net *.split)
[22:05:36] *** Quits: Oladon (~olad@98.43.81.226) (*.net *.split)
[22:05:37] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca) (*.net *.split)
[22:05:37] *** Quits: cognemo_ (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (*.net *.split)
[22:05:37] *** Quits: dmgk (~dmgk@user/dmgk) (*.net *.split)
[22:05:37] *** Quits: mrmr (~mrmr@user/mrmr) (*.net *.split)
[22:05:38] *** Quits: dre (~dre@2001:8003:c932:c301:74de:141a:136f:2db6) (*.net *.split)
[22:05:38] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[22:05:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[22:05:38] *** Quits: varjag (~user@188.95.247.247) (*.net *.split)
[22:05:38] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[22:05:38] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (*.net *.split)
[22:05:38] *** Quits: psf (~pi@206.55.172.18) (*.net *.split)
[22:05:38] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[22:05:39] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[22:05:39] *** Quits: _death (~death@adeht.org) (*.net *.split)
[22:05:39] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[22:05:39] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (*.net *.split)
[22:05:39] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (*.net *.split)
[22:05:39] *** Quits: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421) (*.net *.split)
[22:05:39] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (*.net *.split)
[22:05:39] *** Quits: sterni (~lukas@user/sterni) (*.net *.split)
[22:05:39] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[22:06:45] *** Quits: zagura__ (~zagura@vps.zagura.pl) (Quit: Reconnecting)
[22:10:17] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[22:10:17] *** Joins: loke (~loke@junk.nocrew.org)
[22:10:17] *** Joins: zagura (~zagura@user/zagura)
[22:10:17] *** Joins: energizer (~energizer@user/energizer)
[22:10:17] *** Joins: moon-chi- (~moon-chil@cardinal.elronnd.net)
[22:10:17] *** Joins: derelict (~derelict@user/derelict)
[22:10:17] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[22:10:17] *** Joins: spacebat4 (spacebat@spot.ubermonkey.net)
[22:10:17] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[22:10:17] *** Joins: ogamita` (~t@hubble.informatimago.com)
[22:10:17] *** Joins: phadthai_ (mmondor@ginseng.pulsar-zone.net)
[22:10:17] *** Joins: White__Flame (~quassel@user/white-flame/x-6930243)
[22:10:17] *** Joins: Odin-FOO (~odin@cybernetic.anarchism.is)
[22:10:17] *** Joins: semz_ (~none@user/semz)
[22:10:17] *** Joins: ryanbw1 (~ryanbw@mab.sdf.org)
[22:10:17] *** Joins: micro_ (~micro@user/micro)
[22:10:17] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:10:17] *** Joins: hugo- (znc@verdigris.lysator.liu.se)
[22:10:17] *** Joins: jsatk_ (sid304796@id-304796.helmsley.irccloud.com)
[22:10:17] *** Joins: atdt (~atdt@user/ori)
[22:10:17] *** Joins: BytesAndCoffee|a (~libera@bytes.coffee)
[22:10:17] *** Joins: jemoka_ (~jemoka@user/jemoka)
[22:10:17] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[22:10:17] *** Joins: ecraven- (~ecraven@user/nex)
[22:10:17] *** Joins: mgxm_ (~mgxm@user/mgxm)
[22:10:17] *** Joins: antoszka (sid528518@id-528518.uxbridge.irccloud.com)
[22:10:17] *** Joins: gin_ (~gin@2400:8904::f03c:92ff:fe28:e8a7)
[22:10:17] *** Joins: |3b|` (bbb@user/3b/x-2324788)
[22:10:17] *** Joins: JoshYoshi (~user@37.25.47.130)
[22:10:17] *** Joins: cpape` (~user@2a01:4f9:c010:632d::1)
[22:10:17] *** Joins: theothornhill (~user@2a01:799:159d:aa00:93b3:f973:922a:b565)
[22:10:17] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[22:10:17] *** Joins: shka (~herr@109.231.0.226)
[22:10:17] *** Joins: raeda_ (~raeda@72.49.214.135)
[22:10:17] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:10:17] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:10:17] *** Joins: unyu (~pyon@user/pyon)
[22:10:17] *** Joins: Oladon (~olad@98.43.81.226)
[22:10:17] *** Joins: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22)
[22:10:17] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:10:17] *** Joins: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d)
[22:10:17] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[22:10:17] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:567f:a71e:f346:c5f0)
[22:10:17] *** Joins: kevingal (~quassel@37.228.202.92)
[22:10:17] *** Joins: parjanya (~esb@2804:14c:1ad:8dcb:1db7:82e3:e08e:fda1)
[22:10:17] *** Joins: miique (~miique@181.46.139.166)
[22:10:17] *** molybdenum.libera.chat sets mode: +o pl
[22:10:17] *** Joins: jpl01 (~user@2001:16b8:497a:cd00:3d07:f3b:5cfa:3fa9)
[22:10:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:10:17] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[22:10:17] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:10:17] *** Joins: rogersm (~rogersm@90.166.180.250)
[22:10:17] *** Joins: notzmv (~zmv@user/notzmv)
[22:10:17] *** Joins: pve (~pve@178-55-23-137.bb.dnainternet.fi)
[22:10:17] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[22:10:17] *** Joins: gaqwas (~john@dynamic-077-009-049-204.77.9.pool.telefonica.de)
[22:10:17] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[22:10:17] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca)
[22:10:17] *** Joins: cognemo_ (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[22:10:17] *** Joins: sander (~sander@user/sander)
[22:10:17] *** Joins: dmgk (~dmgk@user/dmgk)
[22:10:17] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[22:10:17] *** Joins: mrmr (~mrmr@user/mrmr)
[22:10:17] *** Joins: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt)
[22:10:17] *** Joins: dre (~dre@2001:8003:c932:c301:74de:141a:136f:2db6)
[22:10:17] *** Joins: anddam (~anddam@user/anddam)
[22:10:17] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[22:10:17] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[22:10:17] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[22:10:17] *** Joins: sveit_ (~sveit@45.77.0.246)
[22:10:17] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[22:10:17] *** Joins: varjag (~user@188.95.247.247)
[22:10:17] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[22:10:17] *** Joins: qhong_ (~qhong@rescomp-21-400677.stanford.edu)
[22:10:17] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[22:10:17] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[22:10:17] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[22:10:17] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[22:10:17] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:10:17] *** Joins: frodef (~frode@46.212.93.4)
[22:10:17] *** Joins: epony (~epony@user/epony)
[22:10:17] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[22:10:17] *** Joins: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001)
[22:10:17] *** Joins: psf (~pi@206.55.172.18)
[22:10:17] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[22:10:17] *** Joins: lisp123win (~user@80.227.170.170)
[22:10:17] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[22:10:17] *** Joins: aeth (~aeth@user/aeth)
[22:10:17] *** Joins: _death (~death@adeht.org)
[22:10:17] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[22:10:17] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[22:10:17] *** Joins: linjian (~linj@user/linj)
[22:10:17] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[22:10:17] *** molybdenum.libera.chat sets mode: +o fe[nl]ix
[22:10:17] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[22:10:17] *** Joins: sp (~sp@user/susam)
[22:10:17] *** Joins: jgkamat (~jay@user/jay)
[22:10:17] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[22:10:17] *** Joins: paul0 (~paul0@user/paul0)
[22:10:17] *** Joins: vegai (vegai@kapsi.fi)
[22:10:17] *** Joins: alvaro121 (~aa@201.230.126.66)
[22:10:17] *** Joins: hisacro (~OBSD@my.displ.nl)
[22:10:17] *** Joins: bollu (~bollu@159.65.151.13)
[22:10:17] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[22:10:17] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[22:10:17] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[22:10:17] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[22:10:17] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[22:10:17] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[22:10:17] *** Joins: sepanko (~sepanko@user/sepanko)
[22:10:17] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[22:10:17] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[22:10:17] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[22:10:17] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[22:10:17] *** Joins: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073)
[22:10:17] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[22:10:17] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[22:10:17] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[22:10:17] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[22:10:17] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[22:10:17] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[22:10:17] *** Joins: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef)
[22:10:17] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[22:10:17] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[22:10:17] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[22:10:17] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[22:10:17] *** Joins: markasoftware (~quassel@107.161.26.124)
[22:10:17] *** Joins: minion (~minion@common-lisp.net)
[22:10:17] *** Joins: specbot (~specbot@common-lisp.net)
[22:10:17] *** Joins: mzan (~quassel@mail.asterisell.com)
[22:10:17] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[22:10:17] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[22:10:17] *** Joins: stack (~stack@ctrl-c.club)
[22:10:17] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[22:10:17] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[22:10:17] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[22:10:17] *** Joins: lonjil (~quassel@user/lonjil)
[22:10:17] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[22:10:17] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[22:10:17] *** Joins: even4void (even4void@came.here.for-some.fun)
[22:10:17] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[22:10:17] *** Joins: amk (~amk@109.255.169.126)
[22:10:17] *** Joins: dcx (~dcx@user/dac)
[22:10:17] *** Joins: gabc (~gabc@user/gabc)
[22:10:17] *** Joins: griffinmb (sid410590@id-410590.helmsley.irccloud.com)
[22:10:17] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[22:10:17] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[22:10:17] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[22:10:17] *** Joins: gko (~user@user/gko)
[22:10:17] *** Joins: iquites (sid77830@id-77830.lymington.irccloud.com)
[22:10:17] *** Joins: resttime (~rest@2604:a880:400:d0::1b48:d001)
[22:10:17] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[22:10:17] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[22:10:17] *** Joins: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[22:10:17] *** Joins: borodust (~irc@user/borodust)
[22:10:17] *** Joins: susam (~susam@user/susam)
[22:10:17] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[22:10:17] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[22:10:17] *** Joins: sm2n (ae95cb1267@user/sm2n)
[22:10:17] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[22:10:17] *** Joins: Kabriel (~Kabriel@user/kabriel)
[22:10:17] *** Joins: easye (~user@oxi.slack.net)
[22:10:17] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[22:10:17] *** Joins: spec (~spec@user/spec)
[22:10:17] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[22:10:17] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[22:10:17] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[22:10:17] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[22:10:17] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[22:10:17] *** Joins: Fade (fade@outrider.deepsky.com)
[22:10:17] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[22:10:17] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[22:10:17] *** Joins: les (znc@user/les)
[22:10:17] *** Joins: jackdaniel (~jack@user/jackdaniel)
[22:10:17] *** Joins: samebchase (~samebchas@51.15.68.182)
[22:10:17] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[22:10:17] *** Joins: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com)
[22:10:17] *** Joins: hirez- (~hirez@2602:ffc5:20::1:512e)
[22:10:17] *** Joins: lieven (~mal@ns2.wyrd.be)
[22:10:17] *** Joins: copec (~copec@schrodbox.unaen.org)
[22:10:17] *** Joins: drakonis (drakonis@user/drakonis)
[22:10:17] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[22:10:17] *** Joins: dale (dale@user/dale)
[22:10:17] *** Joins: antoszka-r (~antoni@rozalia.antoszka.pl)
[22:10:17] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[22:10:17] *** Joins: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de)
[22:10:17] *** molybdenum.libera.chat sets mode: +o jackdaniel
[22:10:17] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[22:10:17] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[22:10:17] *** Joins: nckx (~nckx@tobias.gr)
[22:10:17] *** Joins: bldr (~bull@185.117.72.168)
[22:10:17] *** Joins: jfb4 (~jfb4@178.62.2.68)
[22:10:17] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[22:10:17] *** Joins: phoe (~phoe@user/phoe)
[22:10:17] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[22:10:17] *** Joins: pok (~pok@user/pok)
[22:10:17] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[22:10:17] *** Joins: sgithens (sid10659@id-10659.helmsley.irccloud.com)
[22:10:17] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[22:10:17] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[22:10:17] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[22:10:17] *** Joins: opc0de (~nathan@user/opcode)
[22:10:17] *** Joins: sterni (~lukas@user/sterni)
[22:10:17] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[22:10:17] *** Joins: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[22:10:17] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[22:10:17] *** Joins: ChanServ (ChanServ@services.libera.chat)
[22:10:17] *** molybdenum.libera.chat sets mode: +o ChanServ
[22:10:30] *** Joins: victor_ (uid208353@user/victor)
[22:10:32] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:10:36] *** Joins: hefner (~hefner@user/hefner)
[22:11:08] *** Joins: jmercouris (sid438340@id-438340.hampstead.irccloud.com)
[22:12:37] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[22:13:49] <remexre> if I have an end-user print method and a developer print method, what variable am I supposed to branch on in PRINT-OBJECT such that the latter gets used in ~s and error messages, but the former gets used in ~a?
[22:14:13] <phoe> what do you mean, end-user and developer?
[22:14:21] <Bike> *print-escape*
[22:14:24] <phoe> that doesn't look like a standard CL distinction
[22:14:25] <Bike> probably
[22:14:38] <phoe> oh wait - I understand now
[22:14:54] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:15:15] <Bike> ~s binds *print-escape* to true and ~a binds it to false
[22:16:13] <remexre> ah, yep, *print-escape* works great, thanks
[22:16:22] <remexre> I was using *print-readably* before
[22:19:01] <remexre> oh, which I guess ~s doesn't actually bind, only ~a does? werid
[22:19:22] *** Joins: utis (~utis@84.208.160.26)
[22:19:45] <phoe> clhs 22.3.4.2
[22:19:45] <specbot> Tilde S: Standard: http://www.lispworks.com/reference/HyperSpec/Body/22_cdb.htm
[22:19:53] <phoe> "~S binds *print-escape* to t."
[22:21:48] <remexre> yeah, I read the ~a page and assumed there'd be symmetry between ~a and ~s
[22:24:22] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:26:21] *** nefercheprure is now known as TMA
[22:33:23] *** atdt is now known as ori
[22:35:00] *** Quits: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d) (Remote host closed the connection)
[22:35:10] *** Joins: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d)
[22:37:09] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:37:26] *** Joins: cosimone` (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[22:48:49] *** Joins: pjb (~pjb@user/pjb)
[22:52:02] *** Quits: theothornhill (~user@2a01:799:159d:aa00:93b3:f973:922a:b565) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[22:52:23] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:53:21] *** Quits: kevingal (~quassel@37.228.202.92) (Ping timeout: 256 seconds)
[22:55:45] <hobo> does common lisp have some concept of lenses?
[22:56:02] <phoe> (ql:quickload :data-lens)?
[22:56:21] <phoe> https://github.com/fiddlerwoaroof/data-lens
[22:57:58] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[22:58:21] <hobo> phoe: great! thank you :)
[23:05:11] *** Quits: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d) (Remote host closed the connection)
[23:05:21] *** Joins: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d)
[23:05:59] *** Quits: amb007 (~a_bakic@77.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[23:06:46] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[23:10:34] *** Quits: attila_lendvai (~alendvai@2a02:120b:2c72:1dc0:2e07:56d9:2bb8:283d) (Ping timeout: 268 seconds)
[23:12:10] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[23:13:33] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[23:13:36] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Client Quit)
[23:14:14] * phoe looks around for people to instigat^Woffer a slot for the next Online Lisp Meeting
[23:14:49] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[23:16:00] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[23:25:49] *** moon-chi- is now known as moon-child
[23:26:25] *** Joins: morganw (~user@80.225.24.132)
[23:26:53] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[23:28:04] *** Quits: thomp (~thomp@162.212.34.219) (Ping timeout: 256 seconds)
[23:36:34] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[23:37:14] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[23:37:42] *** Quits: monaaraj (~MonAaraj@149.255.212.20) (Ping timeout: 256 seconds)
[23:38:46] *** ecraven- is now known as ecraven
[23:39:37] *** Quits: MajorBiscuit (~MajorBisc@c-001-022-052.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[23:46:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:47:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:47:25] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[23:49:36] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[23:50:12] *** Joins: tanners (~tanners@2600:1003:b11a:a16f:d0aa:19cc:13f7:58b7)
[23:52:57] *** Joins: srhm (~srhm@user/srhm)
[23:53:54] *** |3b|` is now known as |3b|
[23:55:06] *** Quits: srhm (~srhm@user/srhm) (Client Quit)
[23:57:33] *** Joins: srhm (dda3db84b5@user/srhm)
