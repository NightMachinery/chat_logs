[00:04:09] *** Joins: cuz (~user@38.140.58.234)
[00:10:59] *** Quits: isekaijin (~pyon@user/pyon) (Ping timeout: 252 seconds)
[00:11:41] *** Joins: isekaijin (~pyon@user/pyon)
[00:17:10] *** Joins: kpoeck (~kpoeck@87.140.194.0)
[00:17:20] *** Quits: kpoeck (~kpoeck@87.140.194.0) (Client Quit)
[00:18:01] *** Joins: kpoeck (~kpoeck@87.140.194.0)
[00:22:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:23:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:25:45] <etimmons> pve: Sure, I'll do my best to help!
[00:25:52] <etimmons> (Just got back from running errands)
[00:26:11] *** Joins: aeth_ (~aeth@user/aeth)
[00:26:14] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[00:26:19] *** aeth_ is now known as aeth
[00:28:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[00:42:03] *** Quits: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:42:25] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[00:48:01] *** Joins: dsk (~dsk@user/dsk)
[00:50:06] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[00:52:04] *** Joins: gin (~gin@user/gin)
[00:52:23] <gin> Is there an equals function to compare two alists?
[00:53:15] <White_Flame> depends on what its contents are
[00:53:27] <White_Flame> but EQUAL would traverse the cons cells
[00:54:39] <moon-child> (null (set-difference a1 a2 :test #'equal))
[00:55:10] <moon-child> (assuming you want to deal with the associations being in different order)
[00:55:13] <White_Flame> yeah, do ((a . 1) (b . 2)) and ((b . 2) (a . 1)) compare "equal"  in your idea?
[00:55:41] <White_Flame> and then there's ((a . 1) (a . 2)) vs ((a . 1) (a . 3)) which both return the same value for key A
[00:56:38] <gin> I don't need to deal with associations being in different order right now. I will use "equal" for now.
[00:56:43] <gin> thanks moon-child
[00:56:45] <gin> thanks White_Flame
[00:57:03] <moon-child> White_Flame: then you could  (remove-duplicates :key #'car :from-end t)
[00:57:16] <White_Flame> yep
[00:57:47] *** Joins: karlosz (~karlosz@router.cloyne.org)
[01:00:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:00:56] <pve> etimmons: great!
[01:01:35] <pve> etimmons: I'm playing around with making a very simple asdf extension that just loads files in alphabetical order. It works fine, except it can't detect when a file has been added or deleted (unless I use :force t).
[01:01:57] <pve> etimmons: I have written the code that scans the directory for changes, but it's not clear to me how I should hook it up to asdf.
[01:02:35] <pve> etimmons: My first thought was to run the code in operation-done-p for compile-op, but then I thought maybe I should define a new operation scan-components-op and have compile-op depend on it.
[01:03:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:03:05] <pve> etimmons: Do you happen to have any thoughts on when/where this directory scan should take place?
[01:03:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:03:29] <pve> etimmons: I ask because you mentioned wanting to do this yourself for you own extension.
[01:03:47] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 255 seconds)
[01:04:48] <pve> the code is here: https://github.com/pve1/alphabetical-asdf/blob/main/alphabetical-asdf.lisp
[01:09:57] <etimmons> pve: I haven't looked at it yet, but I think the place to hook in would be the define-op for the system
[01:10:43] <etimmons> maybe an operation-done-p method that checks the current list of files against a cached list in the system?
[01:10:45] <pve> mmhmm that's interesting
[01:11:57] <etimmons> That's certainly going to be my first approach when I try it out with my stuff
[01:12:19] <pve> the manual doesn't mention define-op, is it new?
[01:12:31] <etimmons> maybe
[01:12:47] <etimmons> It might have been part of fare's work on multi-phase builds
[01:13:58] <pve> are you going to define a separate operation class?
[01:14:09] <pve> like scan-op or something?
[01:15:21] <etimmons> I wasn't planning on it. But that might be a nice way of doing it
[01:15:48] <etimmons> It would require that I get more comfortable with the multi-phase stuff though
[01:15:49] <pve> I understand ASDF has some kind of cache where it stores the results of operations. I was wondering if I get caching for "free" if I define a new op
[01:15:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-156.dsl.bell.ca)
[01:16:15] <pve> because ideally I want to scan only once per call to asdf:load-system
[01:16:24] <etimmons> Since that scan-op would need to be performed before the plan for the load-op is computed
[01:16:43] <pve> ohh right, the plan
[01:16:47] <pve> forgot about that
[01:17:32] <etimmons> yeah, that's why I was going to see if I could get away with hacking operation-done-p first.
[01:17:55] <etimmons> I think that should still be cached, so ASDF will only call it once per session
[01:17:58] <pve> and have a cache inside the module instance?
[01:17:59] <etimmons> But I could be wrong
[01:18:07] <pve> oh
[01:18:09] <etimmons> yeah
[01:19:33] <pve> Ok well this was helpful, I'm going to experiment some more. Thanks a lot!
[01:20:29] <etimmons> yep! Let me know what insights you have from your experiments!
[01:20:38] <pve> will do
[01:23:34] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[01:25:14] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[01:25:23] *** Quits: clos-encounters (~user@167-248-4-131.oa01.lnk01.ne.dynamic.allophone.net) (Ping timeout: 255 seconds)
[01:25:46] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:29:05] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:34:23] <jeosol> etimmons I just got out of a rabit hold chasing bazel, bazelisp for parallel compilation of my project. Not sure you remember, we had a discussion over from reddit chat (that you said you weren't initiaally aware it had a chat option)
[01:34:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-156.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[01:34:48] <etimmons> yep, yep!
[01:34:58] *** Quits: kpoeck (~kpoeck@87.140.194.0) (Ping timeout: 246 seconds)
[01:35:11] <etimmons> How is that going? I sadly haven't gotten a chance to look more at poiu yet :(
[01:35:15] <jeosol> etimmons no worries for not having time. I may have to go back to hackig the poiu
[01:36:18] <jeosol> I haven't looked at it personally, but now that I fully understand the requirements of bazel and bazelisp (for large orgs, 200+, need lots of machines, etc), and so many issues (from others that used it for non C++ or non Java projects),
[01:36:25] <jeosol> I think I'll drop it for now
[01:36:42] <jeosol> by 200+ above, I mean developers
[01:37:09] <jeosol> I plan to start taking a look again at the repo I cloned a while back, may be get it to work for current SBCL
[01:37:50] <etimmons> Yeah, that's not too surprising. Bazel seems like a massive beast to tame.
[01:38:20] <etimmons> I'm pretty sure bazelisp is used internally by Google, so hopefully it wouldn't have tooooo many issues
[01:39:20] <etimmons> I haven't looked at it myself in a very long time, but I also imagine it may not be the most portable thing if that's important to you.
[01:41:10] <jeosol> ok, but I thought you have to use bazel and bazelisp together. I could not get the former to install. I admit I don't understand how these systems are integrated. I was trying to download bazel to test the C++ tutorial
[01:41:35] <etimmons> Oh yeah, my understanding is that bazelisp and bazel go hand in hand
[01:41:51] <jeosol> I have dome some research, and I am mistaken, to think it was something simple, I could just drop in to do my parallel builds. But that is not the case
[01:41:55] <etimmons> And by portability I meant across CL implementations
[01:42:12] <jeosol> It also requires huge amount of memory to run and you often need many machines to really get the benefits
[01:42:33] <jeosol> Yeah, portability is important, but I have only developed in SBCL from the start
[01:42:48] <jeosol> I think bazelisp only works with SBCL
[01:45:22] <etimmons> I forget if it had happened yet when we last talked, but SBCL has gotten rid of the lock around compile-file.
[01:45:59] <etimmons> would be interesting to see if just using plain old threads to compile things would work
[01:46:23] <jeosol> hmm - that's interesting
[01:46:23] <etimmons> would definitely be easier and more portable than poiu's forking model
[01:46:33] <etimmons> Although not as nifty
[01:47:30] <jeosol> I have heard the forking model mentioned frequently - this is a bad design?
[01:48:09] <jeosol> I have been in touch with Fare, the author, on possibly resurrecting this in some fashion, but I'd have to spend time to study the internals
[01:48:53] <etimmons> Hmmm, I think it got released in 2.1.4, but I see no mention of it in the release notes
[01:50:58] *** Quits: ^[ (~user@user//x-8473491) (Ping timeout: 240 seconds)
[01:51:12] <etimmons> Ha, depends on who you listen to
[01:52:23] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 255 seconds)
[01:52:40] *** Joins: ^[ (~user@user//x-8473491)
[01:53:13] <etimmons> It's super nifty since it creates a new process that's ~identical to the first. Some application servers use it to, for example, load all the code, do any other expensive startup things, and then be able to spawn workers with nearly zero cost
[01:53:41] <etimmons> but it takes great care to use correctly and can easily lead to dead locks or other unforeseen complications
[01:54:39] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:55:17] <etimmons> ECL had an issue on MacOS where spawning a new process (nominally fork() then exec()) caused streams to get corrupted in the parent process if the exec() failed (e.g., the executable didn't exist)
[01:56:10] <etimmons> Plus, forking doesn't work on all OSes (like Windows)
[01:59:08] *** Quits: ^[ (~user@user//x-8473491) (Ping timeout: 255 seconds)
[02:04:39] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[02:05:31] *** Joins: akoana (~ah@user/akoana)
[02:07:41] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 252 seconds)
[02:21:13] *** Joins: ^[ (~user@user//x-8473491)
[02:36:27] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[02:38:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[02:39:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:43:54] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[02:56:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[02:57:27] *** Joins: jfb4 (~jfb4@178.62.2.68)
[03:02:32] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[03:04:47] *** Quits: rgherdt (~rgherdt@ip5f5af43c.dynamic.kabel-deutschland.de) (Ping timeout: 258 seconds)
[03:13:32] *** Quits: pve (~pve@37-136-146-232.rev.dnainternet.fi) (Quit: leaving)
[03:21:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:26:07] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[03:30:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[03:33:52] <jeosol> etimmons Thanks for explaining that
[03:34:31] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[03:35:17] *** Quits: nature (~nature@mail.blazebone.com) (Quit: Lost terminal)
[03:51:10] *** Joins: selwyn (~selwyn@user/selwyn)
[03:52:05] *** Joins: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com)
[03:55:46] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[03:56:14] *** Alfr is now known as Guest4628
[03:56:14] *** Quits: Guest4628 (~Alfr@user/alfr) (Killed (calcium.libera.chat (Nickname regained by services)))
[03:56:18] *** Joins: Alfr (~Alfr@user/alfr)
[04:23:58] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 272 seconds)
[04:33:40] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:52:35] *** Quits: random-nick (~random-ni@87.116.179.201) (Ping timeout: 252 seconds)
[04:57:56] *** Quits: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com) (Read error: Connection reset by peer)
[05:10:42] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[05:27:46] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[05:29:53] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[05:34:27] *** Joins: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com)
[06:05:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:09:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[06:12:16] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[06:38:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[06:45:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[06:46:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:54:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[06:54:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[07:02:29] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 252 seconds)
[07:08:43] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:12:00] *** Joins: Oladon (~olad@98.43.81.226)
[07:27:05] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[07:33:57] <beach> Good morning everyone!
[07:40:52] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[07:42:56] *** Quits: IAmRasputin (~ryan.gann@c-71-192-113-162.hsd1.ma.comcast.net) (Ping timeout: 255 seconds)
[07:59:18] *** Joins: IAmRasputin (~ryan.gann@c-71-192-113-162.hsd1.ma.comcast.net)
[08:00:57] *** Joins: taiju (~taiju@35.217.197.113.dy.bbexcite.jp)
[08:04:04] *** Quits: IAmRasputin (~ryan.gann@c-71-192-113-162.hsd1.ma.comcast.net) (Ping timeout: 265 seconds)
[08:27:33] *** Quits: Oladon (~olad@98.43.81.226) (Read error: Connection reset by peer)
[08:28:38] *** Joins: Oladon (~olad@98.43.81.226)
[09:10:15] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:11:05] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[09:13:00] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[09:13:23] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[09:15:11] *** Quits: taiju (~taiju@35.217.197.113.dy.bbexcite.jp) (Ping timeout: 255 seconds)
[09:20:17] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:23:17] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[09:39:18] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:42:38] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[09:49:19] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:49:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:51:47] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:55:14] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[10:03:13] <leo_song> is it safe to run Quicklisp in an unsafe network? like apublic wifi.
[10:07:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:13:57] *** Joins: selwyn (~selwyn@user/selwyn)
[10:14:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[10:14:49] *** Joins: raeda (~raeda@72.49.219.33)
[10:44:45] *** Joins: dsk (~dsk@user/dsk)
[10:52:22] *** Joins: shka (~herr@109.231.62.239)
[10:52:40] <^[> leo_song: It depends on your threat model. Some might argue that it's not safe to run Quicklisp anywhere, because it doesn't use TLS or verify downloaded packages.
[10:54:38] *** Quits: makomo (~makomo@user/makomo) (*.net *.split)
[10:54:38] *** Quits: luis (~luis@lisp/luis) (*.net *.split)
[10:54:38] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (*.net *.split)
[10:54:38] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[10:54:38] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (*.net *.split)
[10:54:38] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[10:54:38] *** Quits: _death (~death@adeht.org) (*.net *.split)
[10:54:38] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[10:54:38] *** Quits: Vultyre (~vultyre@user/vultyre) (*.net *.split)
[10:54:38] *** Quits: micro (~micro@user/micro) (*.net *.split)
[10:54:38] *** Quits: gpiero (~quassel@193.182.16.91) (*.net *.split)
[10:54:38] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (*.net *.split)
[10:54:38] *** Quits: andreyorst (~andreyors@2.92.125.143) (*.net *.split)
[10:54:39] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[10:54:39] *** Quits: fengshaun (~fengshaun@68.69.214.210) (*.net *.split)
[10:54:39] *** Quits: phadthai (mmondor@user/phadthai) (*.net *.split)
[10:54:39] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[10:54:39] *** Quits: jdz (~jdz@185.23.160.114) (*.net *.split)
[10:54:39] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[10:54:57] *** Joins: jfb4 (~jfb4@178.62.2.68)
[10:54:57] *** Joins: makomo (~makomo@user/makomo)
[10:54:57] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[10:54:57] *** Joins: luis (~luis@lisp/luis)
[10:54:57] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[10:54:57] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[10:54:57] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[10:54:57] *** Joins: andreyorst (~andreyors@2.92.125.143)
[10:54:57] *** Joins: moon-child (~moon-chil@cardinal.elronnd.net)
[10:54:57] *** Joins: zagura (~zagura@user/zagura)
[10:54:57] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[10:54:57] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[10:54:57] *** Joins: energizer (~energizer@user/energizer)
[10:54:57] *** Joins: _death (~death@adeht.org)
[10:54:57] *** Joins: phadthai (mmondor@user/phadthai)
[10:54:57] *** Joins: Vultyre (~vultyre@user/vultyre)
[10:54:57] *** Joins: jdz (~jdz@185.23.160.114)
[10:54:57] *** Joins: micro (~micro@user/micro)
[10:54:57] *** Joins: gpiero (~quassel@193.182.16.91)
[10:54:57] *** mercury.libera.chat sets mode: +o luis
[10:57:20] *** Quits: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com) (Ping timeout: 255 seconds)
[11:13:08] <pjb> leo_song: what is not safe is to execute code that you haven't checked and validated.  So ftp+asdf can be as unsafe as quicklisp, if you don't add an audit in the middle.
[11:14:00] <pjb> leo_song: now arguably, quicklisp doesn't have an audit hook between transfer and asdf (and asdf itself is already executing code from the asd file), so quicklisp is fundamentaly more unsafe than ftp+audit+asdf.
[11:14:00] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[11:15:38] <pjb> leo_song: the security model adopted here is the herd security.  You just keep your ear open, and listen if somebody else has had a problem.  And you'll react in that case.  But it may be you… https://www.youtube.com/watch?v=Q2KwRPtEjco
[11:18:31] *** Joins: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com)
[11:20:01] <moon-child> I guess the specific concern (given public wifi) is mitm.  The question then is whether asdf uses a secure transport layer and/or does signature checking
[11:30:14] *** Quits: phantomics (~phantomic@71-218-246-207.hlrn.qwest.net) (Quit: Ex-Chat)
[11:31:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:36:23] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:39:41] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[11:45:19] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:48:28] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[11:56:04] *** Joins: pve (~pve@87-93-251-224.bb.dnainternet.fi)
[12:02:08] *** Joins: treflip (~user@95.79.32.99)
[12:12:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:12:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:14:25] <kakuhen> another day, another ccl kernel error
[12:14:55] <kakuhen> but this time it's for a really reason: turns out the placement of your assets folder matters A LOT if you use cl-sdl2... the wrong placement of the binary will give you "unrecoverable stack overflow error" and drop you to the kernel debugger
[12:15:00] <kakuhen> for a really funny reason*
[12:17:14] *** Joins: Guest1740 (~Guest17@2a00:23c8:5a01:7101:f01b:9e0f:c7e8:7866)
[12:18:22] *** Parts: Guest1740 (~Guest17@2a00:23c8:5a01:7101:f01b:9e0f:c7e8:7866) ()
[12:30:59] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[12:36:17] *** Joins: derelict (~derelict@user/derelict)
[12:36:17] *** Quits: derelict (~derelict@user/derelict) (Client Quit)
[12:36:40] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:54] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[12:39:35] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:40:44] *** Quits: mariari (~mariari@user/mariari) (Ping timeout: 252 seconds)
[12:41:58] *** Joins: derelict (~derelict@user/derelict)
[12:42:08] *** Quits: derelict (~derelict@user/derelict) (Client Quit)
[12:53:16] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:54:47] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 255 seconds)
[12:55:53] *** Lord_of_Life_ is now known as Lord_of_Life
[13:09:37] *** Joins: lotuseater (~user@p200300e787091b00dd87cc9c4ffe1d4b.dip0.t-ipconnect.de)
[13:09:50] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[13:16:48] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:19:47] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[13:22:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:22:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:34:45] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:35:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:40:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:40:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:58:20] *** Joins: selwyn (~selwyn@user/selwyn)
[14:06:09] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[14:13:05] *** Quits: Devon (~user@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 255 seconds)
[14:22:28] *** Quits: flip214 (~marek@h081217094109.dyn.cm.kabsi.at) (Ping timeout: 272 seconds)
[14:22:35] *** Joins: flip214 (~marek@h081217094109.dyn.cm.kabsi.at)
[14:24:46] *** Quits: spacebat1 (spacebat@spot.ubermonkey.net) (Ping timeout: 272 seconds)
[14:25:06] *** Joins: spacebat1 (spacebat@spot.ubermonkey.net)
[14:29:07] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[14:33:14] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 272 seconds)
[14:37:28] *** Joins: rgherdt (~rgherdt@ip5f5af43c.dynamic.kabel-deutschland.de)
[14:40:30] *** Quits: susam (~susam@user/susam) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:40:46] *** Joins: susam (~susam@user/susam)
[14:43:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[14:46:09] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[15:03:33] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[15:05:18] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Client Quit)
[15:06:05] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[15:06:29] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 252 seconds)
[15:07:12] *** Inline_ is now known as Inline
[15:07:30] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Client Quit)
[15:08:04] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[15:11:17] *** Joins: notzmv (~zmv@user/notzmv)
[15:12:37] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[15:12:57] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[15:16:55] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:18:52] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[15:23:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[15:24:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:27:08] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:27:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:29:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[15:32:08] *** Quits: d4ryus (~d4ryus@ppp-188-174-87-234.dynamic.mnet-online.de) (Ping timeout: 272 seconds)
[15:32:24] *** Joins: d4ryus (~d4ryus@ppp-188-174-87-234.dynamic.mnet-online.de)
[15:32:25] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[15:46:20] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[15:55:53] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[15:58:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:00:22] *** Joins: random-nick (~random-ni@87.116.179.201)
[16:07:31] *** Joins: selwyn (~selwyn@user/selwyn)
[16:08:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[16:29:27] *** Joins: kpoeck (~kpoeck@87.140.194.0)
[16:29:46] *** Joins: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it)
[16:30:06] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:31:27] *** Joins: Devon (~user@c-24-2-157-5.hsd1.ma.comcast.net)
[16:31:57] *** Devon is now known as Devon7
[16:32:09] *** Devon7 is now known as Devon
[16:32:51] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[16:39:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:43:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[16:49:03] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Quit: Must not waste too much time here...)
[16:55:31] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[17:01:03] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:02:03] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:02:04] *** Quits: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com) (Read error: Connection reset by peer)
[17:03:15] *** Joins: joeyxl (~joeyxl@2607:fea8:339f:d8a0:e5c0:e465:f863:43dd)
[17:03:31] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[17:06:11] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[17:06:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:07:30] *** Quits: joeyxl (~joeyxl@2607:fea8:339f:d8a0:e5c0:e465:f863:43dd) (Ping timeout: 240 seconds)
[17:08:17] *** Joins: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com)
[17:18:17] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[17:20:05] *** Joins: mcfrdy (uid507892@user/mcfrdy)
[17:50:00] *** Quits: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com) (Read error: Connection reset by peer)
[17:59:38] *** Joins: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com)
[18:01:14] *** Quits: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com) (Client Quit)
[18:01:28] *** Joins: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com)
[18:04:47] *** Joins: igemnace (~ian@user/igemnace)
[18:23:51] *** Quits: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com) (Read error: Connection reset by peer)
[18:27:21] *** Joins: joeyxl (~joeyxl@2607:fea8:339f:d8a0:e5c0:e465:f863:43dd)
[18:29:14] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[18:40:06] *** Quits: leeb (~leeb@KD111239157039.au-net.ne.jp) (Quit: WeeChat 3.1)
[18:40:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:41:30] *** Quits: joeyxl (~joeyxl@2607:fea8:339f:d8a0:e5c0:e465:f863:43dd) (Ping timeout: 240 seconds)
[18:52:04] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[18:53:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[18:53:35] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[18:55:43] *** Joins: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com)
[19:02:29] *** Joins: Josh_2 (~user@37.25.47.130)
[19:02:46] <Josh_2> Hi
[19:06:34] <Josh_2> What fun should I pass to every to check if an element is non nil?
[19:06:47] <Josh_2> Obv null checks if its nil, whats the opposite of null :think:
[19:08:41] <Josh_2> maybe this is why people use (loop ... :thereis )
[19:12:56] <Josh_2> (every (lambda (e) e) just seems long
[19:13:50] <_death> identity
[19:14:43] <_death> THEREIS is SOME, not EVERY..
[19:18:21] *** Joins: notzmv (~zmv@user/notzmv)
[19:20:04] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:23:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:24:53] <mfiano> Josh_2: #'identity, or if it conveys the intent better, (notany #'null ...)
[19:27:59] *** Joins: nature (~nature@mail.blazebone.com)
[19:33:24] *** Joins: selwyn (~selwyn@user/selwyn)
[19:44:59] <jcowan> Or #'values, though that is not as clear as #'identity
[19:45:02] *** Quits: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com) (Read error: Connection reset by peer)
[19:53:40] *** Joins: Oladon (~olad@98.43.81.226)
[19:54:16] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:54:19] *** Joins: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com)
[19:56:45] <Josh_2> Thanks
[19:58:08] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[20:02:38] *** Joins: mariari (~mariari@user/mariari)
[20:04:39] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[20:06:44] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:07:53] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[20:19:16] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:22:25] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 246 seconds)
[20:31:04] *** Quits: kpoeck (~kpoeck@87.140.194.0) (Ping timeout: 246 seconds)
[20:36:55] *** Joins: kpoeck (~kpoeck@87.140.193.0)
[20:39:47] *** Quits: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com) (Read error: Connection reset by peer)
[20:39:48] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:44:43] *** Quits: kpoeck (~kpoeck@87.140.193.0) (Ping timeout: 246 seconds)
[20:46:59] <gin> Is there a funcall equivalent for invoking a macro?
[20:47:49] *** Joins: svillemot (~sebastien@rama.villemot.name)
[20:49:44] <beach> You can call the macro function manually.
[20:50:37] <beach> (funcall (macro-function 'when) '(when aa 234) nil)
[20:50:44] *** Joins: kpoeck (~kpoeck@87.140.195.0)
[20:51:09] <beach> Or you can use macroexpand.
[20:51:33] <beach> gin: What is it that you want to do?
[20:51:49] <gin> beach: macroexpand only expands the macro? it does not invoke it, right?
[20:52:02] <MichaelRaskin> Arguably you want mactoexpand-1
[20:52:10] <beach> gin: What does it mean to "invoke" a macro?
[20:52:25] <MichaelRaskin> macroexpand and macroexpand-1 perform the expansion but do not evaluate the result of the expansion
[20:52:59] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[20:53:06] <gin> beach: I have a macro add-key-value to add a key value pair to an alist. I wrote a macro for this because that is the only way I see to implement something like (add-key-value "name" "Harry" alist) type of calls.
[20:53:07] <beach> gin: Macros are usually compile-time features.  It doesn't make much sense to "invoke" them at run time.
[20:53:59] <gin> beach: So the problem I have having is that if I have another function that takes alist and uses add-key-value, this function should also become a macro now to avoid alist being copied by value to this function.
[20:54:28] <pjb> gin:  you can just eval the macroform too.
[20:54:31] <beach> gin: Nothing is ever copied implicitly in Common Lisp.
[20:55:20] <pjb> gin: you want to write a setf function or define setf-expander.
[20:55:26] <gin> beach: how can I implement function add-key-value so that (add-key-value "name" "Harry" alist) works then. With a function, I see the alist I pass never sees the change done within add-key-value
[20:57:10] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[20:57:33] <beach> gin: So you don't mean that you add things to an alist.  You mean that you modify the place that contains the alist.
[20:58:13] <gin> beach: yes. but I was originally looking to modify the alist itself. when I could not do that I modified the place containing the alist using defmacro
[20:59:42] <beach> gin: I suggest you turn your alist into an abstract data type that you can then modify with a function.
[21:00:25] <beach> gin: Alists and lists in general, are not abstract data types.  They should mostly be used as building blocks for abstract data types.  Not so much be used by themselves for things like this.
[21:00:42] <beach> gin: If you insist on using alists, then use the return value of your addition function.
[21:01:11] <beach> gin: Like (setf <place> (add-key-value <key> <value> <alist>)).
[21:01:21] <beach> gin: Then add-key-value can be an ordinary function.
[21:02:45] <beach> gin: (defclass dictionary () ((%contents :initform '() :accessor contents)))
[21:03:40] <beach> gin: Then (defun add-key-value (key value dictionary) (push (cons key value) (contents dictionary)))
[21:03:50] <beach> Now you have a proper abstract data type.
[21:05:08] *** Kabriel is now known as skempf
[21:06:18] <beach> gin: Anyway, I need to vanish.  Good luck!
[21:08:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:11:45] <gin> beach: thanks!
[21:14:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:17:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:17:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:20:35] *** Joins: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com)
[21:23:53] <pjb> gin: https://ideone.com/9ZrfXW
[21:25:40] <pjb> gin: notice how (let ((a '())) (values (setf (aget a :key) 42) a)) #| --> 42 ; ((:key . 42)) |# (setf aget) both returns the new value 42, and mutates the place A (which could be more complex than just a mere variable reference, and still handled correctly thanks to get-setf-expander and define-setf-expander).
[21:26:37] <pjb> gin: of course, you can s/aget/key-value/g  and (setf (key-value person-alist :name) "Harry")
[21:55:25] <char> What is suggested alternative to SET? I need SETQ but my symbol is already quoted.
[21:56:50] <Xach> char: nothing wrong with SET
[21:56:59] <Xach> char: it is pretty rare though
[21:57:49] <Xach> char: (setf (symbol-value symbol) ...) might be more modern
[21:59:48] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:02:53] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[22:04:12] <char> hyperspec says set is depricated. It also seems that both set and symbol-value cannot access the lexical value of a symbol
[22:05:00] <Xach> that's right.
[22:05:35] <Xach> i don't let the hyperspec's deprecation tell me what to do!
[22:06:06] <char> okay, but the no lexical access is a problem because the symbol is lexically bound
[22:06:51] <Xach> char: that means it's time to think about a different approach, like maybe having a lookup table keyed by symbols instead.
[22:07:04] <Xach> but the best option depends on context and task
[22:07:05] *** Joins: kpoeck42 (~kpoeck@87.140.194.0)
[22:07:25] <Xach> Can you explain that stuff a bit?
[22:07:41] <Xach> I'm curious about how you get the symbol, for example
[22:10:07] *** Quits: kpoeck (~kpoeck@87.140.195.0) (Ping timeout: 246 seconds)
[22:13:38] <char> it is for my tailrec macro, someone told me to stop using destructuring-bind and set the variables manually (to avoid code duplication in macroexpandsion). So I have quoted symbols (that were present in the original lambda list and used in the body of the function, and I have their values stored in a list in a (gensymed) symbol. I was thinking "just (mapc 'set ',params ,args)", but since the params are lexically bound, it is almost as
[22:13:38] <char>  if they are never set at all.
[22:15:36] *** Joins: selwyn (~selwyn@user/selwyn)
[22:21:11] <char> keep in mind that paramas is a list of symbols at macro time, and args is the gensym containing the list of values at run time.
[22:26:07] <char> my thought was that I can't map over args at compile time because the list doesn't exist yet, but is should be the same length as params, so maybe I can expand a bunch of (setq ,param (elt ,args n).
[22:33:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:34:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:38:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[22:46:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:55:59] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[22:56:10] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[23:01:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:02:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:07:32] *** Quits: andreyorst (~andreyors@2.92.125.143) (Ping timeout: 252 seconds)
[23:12:15] *** Joins: andreyorst (~andreyors@2.92.127.122)
[23:14:31] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[23:16:14] *** Quits: joeyxl (~joeyxl@cpea84e3fc46da3-cma84e3fc46da0.cpe.net.cable.rogers.com) (Read error: Connection reset by peer)
[23:19:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[23:23:02] <Xach> char: a reasonable approach (though elt is not the best)
[23:26:55] <char> Jeez louise, what is wrong with elt? better to use nth?
[23:27:54] <shka> char: elt on the list has O(n) complexity
[23:28:02] <shka> where n is the index
[23:28:58] <shka> so clearly not ideal
[23:30:09] <mfiano> It's also more generic and potentially slower than other methods.
[23:30:41] <shka> less of a problem imho
[23:31:18] <mfiano> ELT is a good choice if the intent to the reader is that it is operating on a more generic sequence
[23:31:36] <char> shka: right, of course, but I don't have much of a choice in my situation. Also the list will be fairly short
[23:31:37] <shka> oh, there is one more good reason to use elt
[23:31:51] <shka> char: maybe you can paste your code somewhere
[23:31:53] <shka> ?
[23:32:24] <shka> elt will signal error, when the index is out of bounds
[23:32:39] <shka> which is not guaranteed in aref
[23:33:15] <char> shka: https://github.com/charJe/tailrec/blob/master/tailrec.lisp#L100
[23:33:39] <shka> oh wow, that is one long macro
[23:33:49] <char> signaling an error if out of bounds is actually desireable in this case.
[23:34:09] <shka> it is almost always desirable imho :-)
[23:34:51] <shka> char: i overestimated my will to read code today
[23:35:47] <shka> however, usually people will rather use with-gensyms instead of explicit (gensym) in let
[23:35:56] <shka> alexandria:with-gensyms
[23:37:18] <char> shka: if only I had known about with-gensyms
[23:37:39] <shka> well, do you happen to know about the macrolet?
[23:38:21] <pranavats> And you might also consider using mapcar instead of (map 'list ...) given that more specific forms are easier to read.
[23:38:34] <char> I have heard of it, but I don't understand it, just makes a local macro?
[23:38:54] <shka> yeah
[23:39:57] <shka> however, it's utility stems from the fact that it is very useful when you may otherwise need to write code walker
[23:40:05] *** Joins: joeyxl (~joeyxl@2607:fea8:339f:d8a0:e5c0:e465:f863:43dd)
[23:40:21] <shka> and defmacro expanding int macrolet is a pattern
[23:40:33] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[23:40:54] <shka> if all you really want to do is to go start when recursive call is spotted
[23:41:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 272 seconds)
[23:43:31] <shka> then you may simply defmacro... `(defun ,function-name (,@arguments) (tagbody ,!start (macrolet ((,function-name (,@!generated-arguments) `(progn arguments-handling-goes-here (go ,',!start)...
[23:43:53] <shka> i may write this for you, give me a sec
[23:44:18] *** Quits: joeyxl (~joeyxl@2607:fea8:339f:d8a0:e5c0:e465:f863:43dd) (Ping timeout: 240 seconds)
[23:48:15] *** Joins: joeyxl (~joeyxl@2607:fea8:339f:d8a0:e5c0:e465:f863:43dd)
[23:48:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:52:18] *** Quits: joeyxl (~joeyxl@2607:fea8:339f:d8a0:e5c0:e465:f863:43dd) (Ping timeout: 240 seconds)
[23:52:51] <char> shka: pull requests welcome
[23:56:16] <shka> char: ha, i don't feel so confident in my understanding of your code
[23:56:17] <shka> anyway
[23:56:36] <shka> char: take a look at this https://gist.github.com/sirherrbatka/10c7631f502272fc55a66bc75973ac27
[23:57:57] <shka> this works in such way that recursive call is replaced by go-to-start
[23:58:50] *** Quits: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:58:56] <shka> which is what you were doing if i understand correctly
[23:59:06] <shka> this code is much shorter and simpler though
[23:59:31] <shka> thanks to that macrolet that will shadow the function-name in the lexical scope
[23:59:39] <shka> neat trick in situations such as this
