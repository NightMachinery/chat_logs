[00:06:40] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:09:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:10:43] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[00:13:11] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[00:13:33] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:1830:3c81:c914:8ce4) (Quit: Client closed)
[00:14:04] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:15:56] *** Joins: proller (~p@2a02:6b8:b081:1214::1:2d)
[00:16:01] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[00:17:12] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:18:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[00:21:19] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:22:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:26:47] *** Quits: szymon (~ugh@37.120.156.246) (Ping timeout: 256 seconds)
[00:29:29] *** Joins: Simplar (~Simplar@188.163.93.241)
[00:31:48] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[00:34:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:35:15] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[00:43:38] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[00:43:49] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:49:38] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:a5df:2a68:55fb:28e4)
[00:49:38] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:a5df:2a68:55fb:28e4) (Changing host)
[00:49:38] *** Joins: skapate (~Skapata@user/skapata)
[00:51:02] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[00:51:57] <LordKalma> fun fact, I'm one day older than Qt
[00:52:07] <kalven> not fun
[00:53:23] <LordKalma> you're not fun
[00:53:25] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[00:54:03] <kalven> that's not what your mom said
[00:54:57] <LordKalma> dayum
[00:56:27] *** Quits: magla (~gelignite@55d43657.access.ecotel.net) (Quit: Stay safe!)
[01:03:16] *** Quits: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net) (Quit: Client closed)
[01:07:00] <ashafq> I am like several years older than Qt ‚òπÔ∏è
[01:07:12] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:07:22] <PJBoy> Qt was written in C++ and C++ didn't exist until 1998
[01:07:29] <PJBoy> >:(
[01:07:53] <ashafq> PJBoy: I dunno, I saw my father use C++ back in mid 90's
[01:08:14] <PJBoy> was your father named Bjarne?
[01:08:19] <ashafq> No
[01:08:31] <PJBoy> then I don't accept your fact
[01:08:32] <ashafq> Borland C++ existed back in 1992
[01:08:45] <ashafq> But you had to #include <iostream.h>
[01:08:57] <PJBoy> that's not C++
[01:08:58] <Alipha> I remember those days
[01:09:02] <PJBoy> that's a monster
[01:09:05] <ashafq> And there were no namespaces.
[01:09:11] * PJBoy shudders
[01:09:52] <ashafq> And you don't really write C++, you write more like C+ (Still a popular language)
[01:10:18] <ashafq> #include <conio.h> // üò¢
[01:10:27] <LordKalma> Franken-C with classes + a taste of Simula and Algol plus a lot of smoking the good stuff, and BAM C++
[01:10:42] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:d293:ac55:1771:f0c9:b1e6)
[01:10:43] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[01:11:21] <ashafq> Back in those days, all I understood was BASIC.
[01:12:03] <PJBoy> sounds like the phoetus of C++
[01:12:09] <PJBoy> before C++ was born in 1998
[01:12:32] <ashafq> OK, so I have a question: why can't std::array be a constexpr?
[01:12:43] <PJBoy> it can
[01:12:55] <LordKalma> can it? it allows incomplete types
[01:13:00] <PJBoy> { constexpr array a{1, 2, 3}; SHOW(a); }
[01:13:01] <geordi> a = {1, 2, 3}
[01:13:32] <PJBoy> aggregates of constexpr types are constexprs
[01:14:14] *** Quits: p-i- (~Ohmu@2403:6200:8978:d293:a95e:b595:a77d:be89) (Ping timeout: 260 seconds)
[01:14:17] <PJBoy> and it doesn't allow incomplete types
[01:14:33] *** Joins: paulmcquad (~gamer@78.17.243.146)
[01:14:51] <PJBoy> { array<struct S, 1> a; }
[01:14:51] <geordi> error: 'array<_Tp, _Nm>::_M_elems' has incomplete type
[01:15:02] <ashafq> See that is really interesting... I never knew this üòä
[01:16:35] *** Quits: paulmcquad (~gamer@78.17.243.146) (Client Quit)
[01:17:34] *** Quits: robod34 (~Username@79.113.227.62) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:21:28] *** Joins: ivii (~ivan@user/ivii)
[01:25:01] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[01:26:52] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:28:26] *** Joins: adeliktas0 (~adeliktas@i59F5F407.versanet.de)
[01:29:11] *** Joins: noarb (~noarb@user/noarb)
[01:29:15] *** Quits: adeliktas (~adeliktas@i59F5F407.versanet.de) (Read error: Connection reset by peer)
[01:29:15] *** adeliktas0 is now known as adeliktas
[01:30:35] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[01:41:56] *** Joins: foul_owl (~kerry@174-21-76-71.tukw.qwest.net)
[01:42:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:26] *** ChanServ sets mode: +v npaperbot
[01:45:57] <xkoncek> does it ultimately matter whether my threads are using each their own file descriptor to send udp data or whether they are all using the same one?
[01:46:55] <xkoncek> i think it ends up being serialized on the kernel side anyway
[01:47:43] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[01:50:18] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[01:50:36] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[01:55:15] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:57:28] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[02:03:07] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[02:03:13] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[02:04:21] <LordKalma> https://developercommunity.visualstudio.com/t/compile-time-explosion-with-static-stdvariant/1660892
[02:04:24] <LordKalma> what a nice edge case haha
[02:07:40] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:10:46] <cart_man> Alipha: imMute : soooo std::system() is returning the number 25344. Any idea why that might be?
[02:11:01] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[02:11:36] <imMute> "On POSIX systems, the return value can be decomposed using WEXITSTATUS and WSTOPSIG"
[02:11:49] <imMute> https://pubs.opengroup.org/onlinepubs/9699919799/functions/wait.html
[02:12:02] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 240 seconds)
[02:12:47] *** Joins: Praise (~Fat@user/praise)
[02:12:51] <imMute> that page is talking about the return value from wait(), but it's the same thing for system() (since it uses that under the hood)
[02:13:46] <imMute> 25344 is 0x6300, so my guesss is something went wrong running the command or the shell.
[02:16:02] *** Quits: epony (~epony@user/epony) (Ping timeout: 240 seconds)
[02:25:16] <cart_man> imMute: Hmmm ...Ok thats quite interseting. When Iwarp int code = WEXITSTATUS(status); it does bring the right code back. So what does WEXITSTATUS(status) actaully do?
[02:28:58] <cart_man> imMute: Ill read it tomorrow. Thanks allot for the help!
[02:38:20] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[02:44:19] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 250 seconds)
[02:45:17] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[02:46:13] *** Joins: Simplar (~Simplar@188.163.93.241)
[02:47:05] *** Quits: BluesBoy (~bboy@user/bluesboy) (Ping timeout: 256 seconds)
[02:47:17] *** Joins: BluesBoy (~bboy@stotz2.com)
[02:47:17] *** Quits: BluesBoy (~bboy@stotz2.com) (Changing host)
[02:47:17] *** Joins: BluesBoy (~bboy@user/bluesboy)
[02:47:33] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:48:57] <mike18> hi - any feedback on that simple thread pool. https://wandbox.org/permlink/r0HhrclUNr7E3T0i ... i dont plan to use that in prod btw. want to know if the std::list<std::function<void(void)> > queue is a good idea?
[02:49:47] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:51:19] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:53:22] *** Joins: epony (epony@user/epony)
[02:54:06] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 245 seconds)
[02:57:19] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[03:03:48] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[03:06:54] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[03:08:11] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:08:23] *** Quits: jsbach (~jsbach@2a01:c22:ac56:b500:f922:8290:56f5:4650) (Ping timeout: 250 seconds)
[03:08:27] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:09:29] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[03:09:31] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[03:10:26] *** Quits: proller (~p@2a02:6b8:b081:1214::1:2d) (Ping timeout: 260 seconds)
[03:11:16] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:11:44] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[03:12:26] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 245 seconds)
[03:16:13] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[03:22:21] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[03:22:37] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[03:22:43] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:23:00] *** Joins: proller (~p@80.240.216.69)
[03:24:42] *** Quits: jancoow (~jancoow@user/jancoow) (Read error: Connection reset by peer)
[03:25:13] *** Joins: jancoow (~jancoow@user/jancoow)
[03:26:37] *** Quits: jancoow (~jancoow@user/jancoow) (Remote host closed the connection)
[03:31:17] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[03:51:43] *** Joins: xiongxin (~Thunderbi@223.104.63.186)
[03:54:28] *** Joins: jancoow (~jancoow@user/jancoow)
[03:54:37] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[03:58:05] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[03:58:31] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:58:45] *** Quits: irrenhaus3 (~xenon@ip-046-005-003-235.um12.pools.vodafone-ip.de) (Quit: Lost terminal)
[04:05:27] <mike18> how can i implement that without std::function? https://wandbox.org/permlink/r0HhrclUNr7E3T0i
[04:07:57] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:08:35] *** Joins: c4017w (~c4017@209.52.68.8)
[04:11:32] <cbreak> mike18: do you care about performance micro optimization?
[04:11:41] <cbreak> if so, consider std::deque instead of std::list
[04:11:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[04:12:09] <mike18> yeah - im looking for readability and short code to achieve a thread pool
[04:12:37] <cbreak> without using an existing therad pool library?
[04:13:37] <cbreak> why is run on line 33 and not just auto run = ...?
[04:13:50] *** Quits: emerent (~quassel@p200300cd5704436bba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[04:14:06] <cbreak> you can even do auto run = std::move(queue.front());
[04:14:23] <cbreak> but I don't think you can get away from std::function, without reinventing it, in this context.
[04:14:31] *** Joins: emerent (~quassel@p200300cd570443d4ba27ebfffed28a59.dip0.t-ipconnect.de)
[04:15:59] <cbreak> either way, deque is better than list.
[04:16:07] <cbreak> maybe one deque per thread is even better.
[04:16:45] <cbreak> then you can pre-dispatch, and have less lock contention
[04:18:59] <mike18> im not trying to use it - just seeing how you could impllement it in less number of lines
[04:20:13] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[04:23:03] <mike18> but how you get the long vector into the deque than?
[04:23:24] <mike18> why 1 deque per thread?
[04:23:31] <mike18> so that there is no locking?
[04:25:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:25:41] <mike18> but it only takes a function pointer in that case lambda - so lock should be quick?
[04:26:29] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[04:28:34] <Alipha> mike18: 1 deque per thread means less locking. Only the producer and one consumer locks it. If you have 1 deque for all threads, the the producer and all consumers would be locking it
[04:29:42] <Alipha> If the locking isn't a performance issue, then one deque for all would probably be simpler
[04:30:03] <mike18> is that what those thread pool libs do as well?
[04:31:16] <mike18> for (std::thread& t : threads) t = std::move(std::thread([this] { this->Run(); }));
[04:31:25] <mike18> also is that readable?
[04:31:28] <Alipha> Probably the better ones do. Though then you also probably should implement "work stealing" or something
[04:35:16] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:36:05] <mike18> saw some other code here: https://github.com/mvorbrodt/blog/blob/master/src/lesson_thread_pool_how_to.cpp ...
[04:37:47] <mike18> and https://vorbrodt.blog/2019/02/27/advanced-thread-pool/
[04:39:21] <mike18>  It uses a queue per worker thread and a work stealing dispatcher
[04:40:23] <mike18>  It also tries to steal work from other unblocked queues. ... how does it know when the queue is unblocked?
[04:41:24] *** Quits: DSpider (~DSpider@82.79.237.5) (Quit: Leaving)
[04:41:24] <Alipha> That's beyond my current kn
[04:41:28] <Alipha> Knowledge
[04:42:56] <mike18> yeah it implementing its own queue
[04:42:59] <mike18> seems more complex
[04:46:14] <mike18> can you do work stealing with work_queue.try_pop() if that doesnt return data - you can do std::this_thread::yield() ?
[04:52:53] *** Quits: xiongxin (~Thunderbi@223.104.63.186) (Remote host closed the connection)
[04:53:37] <mike18> i think thread1 could steal data from queue of thread2 ...
[04:53:56] <mike18> if we have 1 deque per thread
[04:54:18] <mike18> there seems to be a lot of tricks you can do
[04:58:17] <mike18> Alipha: is there anything you can do better on the ans vector in line 116, 117? https://wandbox.org/permlink/q9ymfeVzsEp8oTev
[05:04:26] *** Joins: seninha (~seninha@user/seninha)
[05:08:23] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:09:03] *** Joins: ferdna (~ferdna@user/ferdna)
[05:09:16] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:10:07] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:10:49] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[05:12:46] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[05:17:13] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:28:06] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:4477:9d9a:1a21:9a92) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[05:33:44] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[05:34:38] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:42:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:27] *** ChanServ sets mode: +v npaperbot
[05:45:27] *** Quits: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[05:48:18] *** Joins: xiongxin (~Thunderbi@2409:8955:3850:4ca2:dc9b:8c36:4d00:3b8d)
[05:48:52] *** Quits: xiongxin (~Thunderbi@2409:8955:3850:4ca2:dc9b:8c36:4d00:3b8d) (Client Quit)
[05:53:33] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[05:56:42] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[06:00:29] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[06:09:47] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:13:26] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[06:20:10] *** Joins: pulse (~pulse@user/pulse)
[06:27:18] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 250 seconds)
[06:29:26] <pulse> i have mastered cmake
[06:29:52] <pulse> i have copied CMakeLists.txt from another project and changed project name
[06:33:35] <hnOsmium0001[m]> that's basically how I work yes, except the said "copying from project" is some older project of mine :)
[06:35:25] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[06:52:27] *** Joins: adeliktas9 (~adeliktas@i59F4A591.versanet.de)
[06:53:02] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:54:10] *** Quits: adeliktas (~adeliktas@i59F5F407.versanet.de) (Ping timeout: 250 seconds)
[06:54:10] *** adeliktas9 is now known as adeliktas
[06:55:29] *** Quits: callq (~callq@2409:4062:2296:71d:c827:aaf6:4fa7:dd61) (Quit: callq)
[06:56:01] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:57:35] <mike18> cbreak: is the notify_one right here in line 42 and line 74? https://wandbox.org/permlink/4husN7zQjkXx8fOh
[06:58:11] <mike18> i feel line line 74 is redundant?
[07:06:03] <Alipha> mike18: I feel like you shouldn't have line 42 and instead should only have line 74.
[07:06:45] <mike18> does it need something to wakup the JoinAll/
[07:06:46] <mike18> ?
[07:07:16] *** Joins: Azem (~haise01@user/haise01)
[07:07:39] <Alipha> Though when do threads go to sleep? If there's no work to do, Run just does a busy loop, eating up cpu?
[07:08:00] <mike18> yeah thats not good
[07:08:08] <mike18> i need a this_thread::yield
[07:08:23] <Alipha> Oh, the wait_var is for JoinAll?
[07:08:33] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:08:38] <mike18> how should i notify joinall otherwize?
[07:10:12] *** Quits: haise01 (~haise01@user/haise01) (Ping timeout: 250 seconds)
[07:10:16] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:13:39] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:16:33] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b) (Quit: Quit)
[07:16:34] <Alipha> So, I guess I find it odd that AddTask needs to check stop. Wouldn't the same user who is adding the tasks also be the one who eventually does JoinAll to stop it?
[07:18:13] <mike18> yes
[07:19:10] <mike18> the user could add tasks after the join is started
[07:19:22] <mike18> is called
[07:20:48] <mike18> it could create new threads at the same time while it waits for thread.join's
[07:22:20] <mike18> stop = false is missing when it exists JoinAll
[07:44:10] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Remote host closed the connection)
[07:56:36] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[07:59:46] *** Quits: adeliktas7 (~adeliktas@v15153.1blu.de) (Quit: like, subscribe, turn notifications on, buy my merch, write me an email and have a nice day.)
[08:00:00] *** Joins: adeliktas7 (~adeliktas@v15153.1blu.de)
[08:07:50] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:d293:ac55:1771:f0c9:b1e6) (Remote host closed the connection)
[08:08:45] *** Joins: p-i- (~Ohmu@2403:6200:8978:d293:d42:aa16:b622:3cd7)
[08:10:47] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:10:51] *** Joins: Grell (~john@ool-4579c605.dyn.optonline.net)
[08:11:16] <Grell> What do you guys prefer when writing code?  An IDE or a text editor?
[08:14:19] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[08:38:15] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[08:39:35] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[08:40:31] <ville> is there a difference these days?
[08:42:59] *** Quits: p-i- (~Ohmu@2403:6200:8978:d293:d42:aa16:b622:3cd7) (Quit: Leaving...)
[08:43:29] <Grell> I think so
[08:46:13] *** Quits: CalamityBlue (~CalamityB@2603-8000-d907-cec8-dccd-8808-739a-455d.res6.spectrum.com) (Changing host)
[08:46:13] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[09:05:51] *** Joins: k8yun (~k8yun@user/k8yun)
[09:07:21] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:11:16] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:14:34] <ville> is emacs an ide ore a text editor?
[09:14:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:16:00] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b)
[09:16:15] <kalven> os
[09:17:31] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[09:30:07] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1546:fcd7:6981:338b)
[09:32:49] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[09:35:05] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1546:fcd7:6981:338b) (Ping timeout: 256 seconds)
[09:40:40] *** Joins: andreasbuhr (~quassel@p549db7e2.dip0.t-ipconnect.de)
[09:41:27] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[09:42:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:27] *** ChanServ sets mode: +v npaperbot
[09:48:48] *** Quits: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7) (Ping timeout: 250 seconds)
[09:54:44] *** Joins: jbalint (~jbalint@071-090-119-177.res.spectrum.com)
[10:01:22] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[10:01:27] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[10:01:43] *** Joins: teepee (~teepee@openscad/teepee)
[10:04:18] *** Quits: AssKoala (~asskoala@user/asskoala) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[10:04:33] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[10:04:33] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[10:04:33] *** Joins: AssKoala (~asskoala@user/asskoala)
[10:08:12] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[10:11:47] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:15:14] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[10:17:04] *** Quits: andreasbuhr (~quassel@p549db7e2.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[10:24:20] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[10:29:31] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:31:41] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 250 seconds)
[10:36:16] *** Joins: Xardas (~Xardas@149.233.51.127)
[10:38:13] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 256 seconds)
[10:49:06] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:53:05] <LordKalma> !rq
[10:53:06] <nolyc> LordKalma: <PJBoy> can go into it in more depth if ya want
[10:53:16] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:66bd)
[10:53:22] <LordKalma> ( Õ°¬∞ Õú ñ Õ°¬∞)
[10:54:33] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[10:55:14] *** Joins: letto (~letto@86.120.81.105)
[11:02:07] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:08:24] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:3c94:64e8:bbc0:ab07)
[11:12:17] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:14:07] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:15:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:17:10] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:17:54] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[11:19:41] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b) (Quit: Quit)
[11:23:14] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 260 seconds)
[11:32:38] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[11:32:44] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Read error: Connection reset by peer)
[11:33:00] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[11:43:12] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[11:43:32] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Client Quit)
[11:46:46] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:52:24] *** Joins: jsbach (~jsbach@2a01:c23:64ba:6300:4b59:c320:4cd5:7a04)
[11:54:11] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:03:33] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[12:12:47] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:13:41] *** Joins: robod34 (~Username@79.113.227.62)
[12:16:26] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[12:25:54] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:32:25] *** Joins: Simplar (~Simplar@188.163.93.241)
[12:36:42] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:43:40] *** Joins: plastico (~plastico@neomutt/plastico)
[12:46:37] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[12:47:37] *** Quits: kalven (~calvin@2a02:470:84:102::24) (Read error: Connection reset by peer)
[12:50:35] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[12:51:54] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 260 seconds)
[13:01:47] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[13:10:48] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:13:17] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:15:07] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:16:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:16:44] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 252 seconds)
[13:16:49] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[13:17:05] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:17:51] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[13:18:45] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[13:21:57] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[13:22:57] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 240 seconds)
[13:23:02] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:27:39] *** Joins: ivii (~ivan@user/ivii)
[13:33:12] *** gentooclimax is now known as climax
[13:34:14] *** climax is now known as gentooclimax
[13:34:17] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[13:36:14] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[13:36:28] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[13:38:43] *** Joins: teepee (~teepee@openscad/teepee)
[13:42:20] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:27] *** ChanServ sets mode: +v npaperbot
[13:45:23] *** gentooclimax is now known as climax
[13:47:39] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[13:48:26] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[13:55:08] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[13:55:36] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:56:44] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[13:57:25] *** Joins: proller (~p@2a02:6b8:b081:10::1:39)
[14:02:19] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:10:03] *** Joins: Youmu (uid129469@user/condy)
[14:13:48] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:17:13] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[14:36:37] *** Quits: proller (~p@2a02:6b8:b081:10::1:39) (Ping timeout: 240 seconds)
[14:38:20] *** climax is now known as gentooclimax
[14:38:30] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:39:58] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[14:41:21] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[14:43:21] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[14:44:14] *** Joins: xkuru (~xkuru@user/xkuru)
[14:44:25] *** Joins: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[14:44:29] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[14:45:51] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[14:46:03] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[14:48:32] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[14:49:40] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[14:49:57] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[14:50:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:54:51] *** Joins: hexingb (~hexingb@103.37.140.28)
[15:06:03] *** Joins: seninha (~seninha@user/seninha)
[15:07:26] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 245 seconds)
[15:14:17] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:17:53] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[15:18:57] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[15:21:18] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[15:27:47] *** Quits: hexingb (~hexingb@103.37.140.28) (Ping timeout: 256 seconds)
[15:28:12] *** Joins: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7)
[15:29:08] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[15:29:36] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[15:36:25] *** Joins: jokoon (~eio@2a01:e0a:542:e160:c1da:7e0a:cf58:72c6)
[15:40:32] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[15:45:02] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 260 seconds)
[15:47:38] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[15:47:57] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:49:21] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[15:50:43] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[15:51:37] *** Quits: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7) (Read error: Connection reset by peer)
[15:51:56] *** Joins: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7)
[15:53:15] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:53:40] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[15:53:41] *** Quits: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7) (Read error: Connection reset by peer)
[15:53:55] *** Joins: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7)
[15:55:09] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:00:52] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[16:02:49] *** Joins: proller (~p@2a02:6b8:0:40c:190e:1e4f:38ca:2f28)
[16:11:22] *** Joins: Leone (~Leo@108.175.224.215)
[16:14:48] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:18:07] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[16:21:40] *** Quits: proller (~p@2a02:6b8:0:40c:190e:1e4f:38ca:2f28) (Remote host closed the connection)
[16:21:40] *** Quits: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7) (Read error: Connection reset by peer)
[16:21:54] *** Joins: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7)
[16:23:05] *** Joins: proller (~p@2a02:6b8:0:40c:a3bb:89fc:5b6:fc6a)
[16:25:16] *** Joins: Xardas (~Xardas@149.233.51.127)
[16:26:14] *** Quits: adeliktas7 (~adeliktas@v15153.1blu.de) (Quit: like, subscribe, turn notifications on, buy my merch, write me an email and have a nice day.)
[16:27:16] *** Joins: adeliktas7 (~adeliktas@v15153.1blu.de)
[16:37:20] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[16:40:00] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[16:42:19] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:44:57] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:718b:9b0a:81c:c099)
[16:44:57] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:718b:9b0a:81c:c099) (Changing host)
[16:44:57] *** Joins: skapata (~Skapata@user/skapata)
[16:45:42] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[16:58:35] *** Joins: p-i- (~Ohmu@2403:6200:8978:d293:c8e6:e7be:c059:cf5e)
[17:02:30] *** Quits: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7) (Read error: Connection reset by peer)
[17:02:52] *** Joins: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7)
[17:05:12] *** Joins: gehn (~gehn@user/gehn)
[17:07:32] *** Joins: seninha (~seninha@user/seninha)
[17:08:24] *** PJBoy is now known as Guest2587
[17:08:29] *** Joins: PJBoy (~PJBoy@user/pjboy)
[17:10:57] *** Quits: Guest2587 (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[17:11:37] <xkoncek> java is impossible to write without an IDE
[17:11:45] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[17:12:09] *** Joins: troller (~p@2001:6d0:8000:105:707f:346a:9433:79b8)
[17:13:32] *** Quits: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7) (Read error: Connection reset by peer)
[17:13:51] *** Joins: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7)
[17:15:17] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:18:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:19:25] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[17:20:25] *** Quits: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7) (Read error: Connection reset by peer)
[17:20:56] *** Joins: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7)
[17:22:59] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[17:28:04] *** Quits: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7) (Read error: Connection reset by peer)
[17:28:16] *** Joins: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7)
[17:29:40] <Haohmaru> !rq
[17:29:40] <nolyc> Haohmaru: <cbreak> rmd: welcome back to c++. Here you can log with confidence to not download DLLs from a random third party and execute it.
[17:35:30] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[17:39:01] *** Quits: troller (~p@2001:6d0:8000:105:707f:346a:9433:79b8) (Ping timeout: 240 seconds)
[17:40:45] *** Quits: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7) (Read error: Connection reset by peer)
[17:40:57] *** Joins: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7)
[17:42:20] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:28] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:28] *** ChanServ sets mode: +v npaperbot
[17:42:34] *** Joins: troller (~p@2001:6d0:8000:105:707f:346a:9433:79b8)
[17:42:41] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:46:54] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[17:47:37] *** Quits: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7) (Read error: Connection reset by peer)
[17:47:53] *** Joins: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7)
[17:51:11] *** Joins: darkoccultist (~darkone@2601:1c0:ce02:4420:cdbb:abc2:11d3:6b75)
[17:58:44] *** Joins: callq (~callq@157.41.35.249)
[18:02:22] <xkoncek> what can be a good irc channel to ask about linux networking?
[18:03:12] <Friithian> #networking?
[18:03:59] <Shell> or #linux, depending on how much it leans towards being Linux-focused or networking-focused. :p
[18:04:31] *** Quits: hexingb (~hexingb@2409:8900:2b80:26b6:41df:f78e:2ea0:89e7) (Ping timeout: 245 seconds)
[18:06:36] <Haohmaru> #netwux
[18:07:05] *** Quits: darkoccultist (~darkone@2601:1c0:ce02:4420:cdbb:abc2:11d3:6b75) (Quit: Quantum Condensation Mode Active)
[18:07:10] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[18:08:28] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Read error: Connection reset by peer)
[18:08:29] *** Joins: darkoccultist (~darkone@c-24-21-219-26.hsd1.or.comcast.net)
[18:08:43] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[18:08:50] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:08:51] *** Quits: darkoccultist (~darkone@c-24-21-219-26.hsd1.or.comcast.net) (Remote host closed the connection)
[18:09:09] *** Joins: darkoccultist (~darkone@2601:1c0:ce02:4420:cdbb:abc2:11d3:6b75)
[18:15:48] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:15:49] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Remote host closed the connection)
[18:19:02] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[18:27:32] *** Quits: darkoccultist (~darkone@2601:1c0:ce02:4420:cdbb:abc2:11d3:6b75) (Changing host)
[18:27:32] *** Joins: darkoccultist (~darkone@user/darkoccultist)
[18:27:54] <ville> xkoncek: if you're using arch then i'd go there, also in general whatever you want to do with linux check out arch, debian and gentoo wikis
[18:33:19] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[18:33:27] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:40:15] *** Quits: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com) (Ping timeout: 250 seconds)
[18:43:57] *** Quits: troller (~p@2001:6d0:8000:105:707f:346a:9433:79b8) (Ping timeout: 240 seconds)
[18:44:04] *** Joins: epony (epony@user/epony)
[18:44:59] *** Quits: callq (~callq@157.41.35.249) (Read error: Connection reset by peer)
[18:50:35] <ashafq> If I want to hide implmenetation details from a class, how do I do that in C++?
[18:51:09] <ashafq> I tried class forward declaration, but it seems like I need to pass it through the compiler first before link stage.
[18:52:27] <cbreak> ashafq: put your functions into a .cpp file instead of a header
[18:53:44] <ashafq> cbreak: I tried to put them in C++ file, but I get this error: impl_ has an incomplete type..
[18:53:55] <ashafq> Let me share a snippet
[18:54:44] *** Quits: proller (~p@2a02:6b8:0:40c:a3bb:89fc:5b6:fc6a) (Remote host closed the connection)
[18:55:01] * Terminus thinks this is going to lead to pImpl sooner or later
[18:55:10] *** Joins: hexingb (~hexingb@111.30.225.26)
[18:55:14] <ville> ashafq: you can't*
[18:55:59] <ashafq> ville: Should I just the C style `void *` trick?
[18:56:19] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[18:56:39] <ville> ashafq: yes that could be an option, but if you're shuffling pointers around then might as well be a typed pointer
[18:56:48] *** Joins: markong (~kvirc@213.146.188.203)
[18:57:04] <Friithian> >void*
[18:57:08] * Friithian screams
[18:57:36] <ville> no need for knee-jerk reactions to every bit you don't pleasing
[18:57:40] <ville> err find
[18:57:44] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:57:56] <cbreak> ashafq: there's no need to rely on void * nonsense
[18:58:12] <ashafq> How would you do this, then?
[18:58:14] <cbreak> if you want to hide implementation details in functions, just move them into a source file
[18:58:17] <cbreak> and you're done
[18:58:41] <cbreak> if you want to hide class members, then as some previously mentioned, the pimpl idiom can help
[18:59:06] *** Joins: k8yun (~k8yun@user/k8yun)
[18:59:15] <cbreak> if you want to go the traditional OOP route, you can also just provide some abstract base class, and hide the true implementation class somewhere
[18:59:22] <cbreak> and work via polymorphism
[18:59:38] <cbreak> in none of those solutions you have to give up on type safety.
[19:00:24] <ville> ..or just expose the forward declaration of the type and non-member functions like so: struct aa; void aa_f(aa*, int, int); and so on in the header
[19:00:49] <ashafq> https://godbolt.org/z/YGPMjbv5q so it's something like this
[19:00:56] <ashafq> Right now
[19:01:11] <ville> whether that's aa_f(aa&...) or aa_f(aa*...) is upto you
[19:01:25] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 256 seconds)
[19:01:35] <ashafq> But with seperate compilation, I have to expose the Implementation.. which I don't want to do.
[19:01:36] <cbreak> ville: yeah, C-Style OOP, also a practical path
[19:02:04] <cbreak> ashafq: the impl has to be refered to via a unique_ptr or similar
[19:02:09] <cbreak> you can't have it as direct data member
[19:02:55] <ashafq> cbreak: Right... I also have to write the function to initiate an unique_ptr to that object, right?
[19:03:00] <cbreak> ashafq: think about it: if it's a direct data member, the user of the class obviously needs to know the contents of it
[19:03:08] <cbreak> simply because the user has to know the size of the outer type
[19:03:15] <ashafq> right
[19:03:22] <cbreak> you have to have a constructor, yes.
[19:03:35] <Alipha> !give ashafq spimpl
[19:03:36] <nolyc> ashafq: spimpl is a utility class to slightly simplify writing a PIMPL pattern: https://github.com/oliora/samples For further explanation, see: http://oliora.github.io/2015/12/29/pimpl-and-rule-of-zero.html
[19:03:44] *** Joins: pulse (~pulse@user/pulse)
[19:04:50] <Friithian> how many `rule of $number`s do we have?
[19:05:05] <imMute> 3.  0, 3, and 5.
[19:05:06] <ashafq> I know about, 5, 3, and zero
[19:05:31] <imMute> and 3 turned into 5 with c++11 when move semantics were created
[19:05:46] <ashafq> imMute: Nice I have gotten it right. üôÇ ready for C++ interview
[19:06:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[19:06:50] <Terminus> ashafq: i spent way too much time writing this. ü§£ https://wandbox.org/permlink/4PnLK30pGGqUMAJW
[19:07:32] <LordKalma> shared_ptr to implementation?
[19:07:34] <LordKalma> why not unique?
[19:08:21] <ashafq> LordKalma: because sharing is caring üòâ it could be fun
[19:08:32] <LordKalma> !grab ashafq
[19:08:33] <nolyc> LordKalma: The operation succeeded.
[19:08:40] <Terminus> because i never figured out how to get unique_ptr to work with forward declarations but reading the links above, i see it can be done.
[19:10:23] <Terminus> and yep, i guessed right that this was gonna lead towards pImpl sooner or later. ü§£
[19:12:22] <LordKalma> Terminus, https://www.fluentcpp.com/2017/09/22/make-pimpl-using-unique_ptr/
[19:12:33] <LordKalma> read starting from "Using std::unique_ptr to manage the life cycle"
[19:13:19] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[19:13:20] <LordKalma> Terminus, https://wandbox.org/permlink/4f5xCoGN1w3IXAUN
[19:13:22] <LordKalma> there you go
[19:13:37] <LordKalma> it's just  ~Hello(); on the hpp and Hello::~Hello() = default; on the cxx
[19:13:39] *** Joins: markong (~kvirc@213.146.188.203)
[19:14:36] <ashafq> I have learned so much in the last 5 minutes
[19:14:49] <ashafq> Thank you so much!
[19:16:18] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:16:21] *** Quits: jokoon (~eio@2a01:e0a:542:e160:c1da:7e0a:cf58:72c6) (Quit: Leaving)
[19:18:15] <Terminus> LordKalma: ah... thanks! so just needs the destructor. now i hope i remember this the next time i actually write something with pImpl. üòÄ
[19:18:44] <ville> cbreak: there's also the #define SIZE 4    #define ALIGN 4    struct aa { alignas(ALIGN) unsigned char impl[SIZE]; }; where you can forgo the pointer indirection and static_assert that SIZE and ALIGN are sufficient
[19:19:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[19:19:43] <ville> placement new into the impl buffer and so forth
[19:20:25] <cbreak> ville: eeew :/
[19:20:38] <cbreak> there's aligned_storage, but I'm not sure if that would make it much better
[19:21:24] <LordKalma> I still don't know what is placement new vs new
[19:21:36] <ville> cbreak: deprecated in 23
[19:21:55] <ville> LordKalma: placement new is something that let's you specify the address where something lives
[19:22:04] <LordKalma> what would you use then? when you need actually aligned storage
[19:22:31] <ville> std::aligned_storage was completely unnecessary addition, and on top of that it's dangerously easy to get wrong
[19:23:15] <Alipha> I created this for doing what ville suggested: https://github.com/alipha/cpp/tree/master/opaque_impl
[19:23:47] <cbreak> ville: I find it useful-ish
[19:23:54] <cbreak> well... not that I've used it...
[19:24:32] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[19:24:55] <Alipha> LordKalma: it's UB to placement new an object into a memory address that's not properly aligned for said object
[19:24:59] <ville> i do this sort of thing fairly frequently and yeah never use it. it's pointless. i bet it was its own paper too. someone had to pad their resume with wg21 paper submission
[19:25:21] <imMute> isn't placement new what std::vector uses internally?
[19:25:39] <ville> imMute: presumably. of course it's not specified
[19:26:00] <LordKalma> so in placement new you give the pointer you want stuff to go to?
[19:26:01] <ville> is it? shoulda checked before making that claim
[19:26:05] <ville> LordKalma: yes
[19:26:30] <ville> LordKalma: other than that the object behaves as-if it had been new-ed, so you're responsible for disposing of it as well
[19:26:50] <LordKalma> okay, thanks
[19:27:09] <LordKalma> so how do you make for example a buffer properly aligned before using placement new
[19:27:10] <imMute> roughly   plain new = allocation + placement new
[19:27:18] <LordKalma> without std::aligned_storage?
[19:27:48] <ville> LordKalma: alignas(expr) unsigned char[N];
[19:27:58] <ville> well needs a name..
[19:28:20] <LordKalma> { alignas(string) unsigned char bananas[N]; }
[19:28:20] <geordi> error: 'N' was not declared in this scope
[19:28:24] <LordKalma> { alignas(string) unsigned char bananas[50]; }
[19:28:25] <geordi>  
[19:28:28] <LordKalma> okay, cool
[19:28:47] <Alipha> alignas(alignof(T)) unsigned char data[sizeof(T)]; // LordKalma, this is all that aligned_storage is doing
[19:28:50] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[19:29:17] <LordKalma> thanks
[19:30:43] *** Joins: bobb_ (~bobb_@dslb-088-065-181-024.088.065.pools.vodafone-ip.de)
[19:32:11] *** Joins: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com)
[19:37:58] *** Joins: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net)
[19:44:29] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[19:47:19] *** Quits: hexingb (~hexingb@111.30.225.26) (Ping timeout: 256 seconds)
[19:49:23] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 250 seconds)
[19:50:40] <cbreak> imMute: std::vector has to use the allocator internally
[19:51:56] <cbreak> https://en.cppreference.com/w/cpp/memory/allocator_traits/construct
[19:52:21] <cbreak>  	the constructor arguments to pass to a.construct() or to placement-new (until C++20) std::construct_at() (since C++20)
[19:52:41] *** Quits: minto (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[19:52:57] *** Joins: epony (epony@user/epony)
[19:53:01] *** Joins: minto (~mintograd@47.201.5.61)
[19:53:16] *** Quits: Tokamak (~Tokamak@172.58.191.51) (Quit: Textual IRC Client: www.textualapp.com)
[19:56:27] *** Joins: magla (~gelignite@55d4e921.access.ecotel.net)
[19:59:50] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:00:33] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[20:01:44] <pulse> actual footage of me trying to setup a cmake project https://www.youtube.com/watch?v=3t1EQlKTTF4
[20:02:02] <xkoncek> plain malloc aligns to max_align_t which is surrently long double
[20:03:06] <Friithian> the only issue I've had with setting up a cmake project was there wasn't an easy way to specify minimum versions for compilers (I was using <concepts> which is only supported on newer versions)
[20:03:38] *** Quits: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net) (Quit: Client closed)
[20:05:15] <pulse> if that was your only problem you must have an iq of 199
[20:06:48] *** Joins: hexingb (~hexingb@111.30.225.26)
[20:06:56] <Friithian> I haven't done massively complex build systems with a million lib and weird interaction
[20:07:17] *** Joins: p-i-_ (~Ohmu@mx-ll-180.183.72-196.dynamic.3bb.co.th)
[20:07:24] <cbreak> Friithian: why do you care about the compiler version?
[20:07:36] <cbreak> all you need to have is support for a certain c++ version
[20:07:49] <xkoncek> did anyone ever use sqlite C library?
[20:07:53] *** Joins: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net)
[20:07:54] <xkoncek> *here
[20:08:06] <Friithian> just because a version of gcc lets you do c++20 doesn't mean it has all the functions of c++20
[20:08:19] <ville> xkoncek: sure
[20:08:32] <cbreak> and that you can fix with CXX_STANDARD and https://cmake.org/cmake/help/latest/prop_tgt/CXX_STANDARD_REQUIRED.html
[20:08:33] <xkoncek> Friithian still waiting for make_shared for arrays
[20:09:04] *** Joins: callq (~callq@2409:4062:2296:71d:2439:c59b:32a7:f93)
[20:09:04] <xkoncek> ville i read that it has the concept of precompiled queries?
[20:09:26] <Friithian> xkoncek: I'm still waiting for Text Formatting
[20:10:27] *** Joins: Tokamak (~Tokamak@172.58.191.51)
[20:10:33] <ville> xkoncek: "prepared statements". yes. that's all it has. there's a function that seemingly takes a string literal, or so, as a query but that'll just get shoved through the prepared statement interface as well
[20:10:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:d293:c8e6:e7be:c059:cf5e) (Ping timeout: 240 seconds)
[20:11:34] <ville> as in making a one-off prepared statement and disposing of it at the end
[20:11:56] *** Quits: p-i-_ (~Ohmu@mx-ll-180.183.72-196.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[20:13:29] <ville> https://sqlite.org/c3ref/exec.html
[20:14:10] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:14:39] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[20:16:48] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:17:35] *** Joins: letto (~letto@86.120.81.105)
[20:20:13] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[20:21:04] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:24:03] *** Joins: voidiov (~voidiov@2a02:2f0e:6203:4c00:e0a0:7061:d896:56c9)
[20:24:18] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:24:51] *** Quits: voidiov (~voidiov@2a02:2f0e:6203:4c00:e0a0:7061:d896:56c9) (Client Quit)
[20:24:59] *** Joins: voidiov (~voidiov@2a02:2f0e:6203:4c00:e0a0:7061:d896:56c9)
[20:26:54] *** Quits: voidiov (~voidiov@2a02:2f0e:6203:4c00:e0a0:7061:d896:56c9) (Client Quit)
[20:28:02] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:36:02] <kenanmarasli> I'm learning some standard libraries and I have a question about named requirements. I'd like to sort a vector with a "Compare" object, and I thought of making its member functions virtual, is it wrong to think about it this way?
[20:36:38] <Alipha> kenanmarasli: why do you think they should be virtual?
[20:37:01] <InPhase> kenanmarasli: There's an overhead to calling virtual functions which is negligible for occasional calls but could be significant in the tight looping of comparing large amounts of data.
[20:37:08] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[20:37:41] <kenanmarasli> Alipha: I think writing a single base class and change the concrete compare behaviour in subclasses, and I thought defining a single base class for "Compare" would be convenient
[20:37:59] <kenanmarasli> InPhase: yeah, you're right
[20:38:02] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[20:38:44] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[20:38:56] <InPhase> kenanmarasli: That doesn't mean its necessarily wrong, but something to weight and consider for the use case.
[20:39:14] *** Quits: hexingb (~hexingb@111.30.225.26) (Ping timeout: 250 seconds)
[20:39:34] <kenanmarasli> yes, my main objective is to keep a reference to the compare object and change it if necessary
[20:39:36] <InPhase> Go clean over fast except when you need fast for the focused high-volume portions that matter.
[20:39:39] <Alipha> kenanmarasli: polymorphism is when you need to change behavior at _runtime_ when you don't know what the types involved at _runtime_. if you have a std::vector<Foo>, then you know that you will be sorting Foos at _compile-time_
[20:39:53] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[20:40:41] <kenanmarasli> Alipha: yes but I want different comparison behaviour for different concrete classes
[20:41:00] <InPhase> kenanmarasli: Can you simply make a comparison template?
[20:41:39] <InPhase> If you know the information at compile time, virtual is not needed.
[20:42:03] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 256 seconds)
[20:42:24] <kenanmarasli> InPhase: that could work definitely, and you are right about compile time. Maybe I should hold a function pointer instead
[20:42:34] <kenanmarasli> I suppose that could work also, since the signature is the same
[20:43:03] <InPhase> A function pointer is again for runtime switching.
[20:44:25] <Alipha> kenanmarasli: can you provide more details on exactly what your specific scenario is? what are these classes for? what different comparisons are you doing?
[20:44:36] <imMute> xkoncek: there's also sqlitecpp (of various flavors/forks) that wraps the C api into a nicer C++ api.   writing your own C++ wrapper is a nice challenge too
[20:45:01] <kenanmarasli> Alipha: certainly, give me a second
[20:45:26] *** Joins: letto (~letto@86.120.81.105)
[20:45:36] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[20:47:08] <kenanmarasli> Alipha: https://bpa.st/QFSA
[20:48:04] <Alipha> kenanmarasli: what's Node?
[20:50:42] <kenanmarasli> Alipha: I'm implementing the best-first search algorithm
[20:50:48] <kenanmarasli> node is a step in that search
[20:51:02] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 256 seconds)
[20:51:40] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[20:51:48] <Alipha> kenanmarasli: so you want to change how you sort based upon what you're searching for?
[20:52:38] <Alipha> ie, you have the same set of data, but you might want to sort it different ways
[20:53:33] <kenanmarasli> yes, sort nodes on the fringe depending on if I want to go breadt-first, depdth-first, cheapest, etc.
[20:55:53] *** Quits: bobb_ (~bobb_@dslb-088-065-181-024.088.065.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:56:23] *** Joins: hexingb (~hexingb@111.30.225.26)
[20:59:06] *** Joins: k8yun (~k8yun@user/k8yun)
[20:59:18] <Alipha> okay, so, yes, having a Comparison base class with a virtual comp function and then having different derived classes for each of the different ways would be the simplest and most "OOP" way to do it (you'd also have to change Sort slightly, to avoid slicing of Comparison). however, some templating with perhaps CRTP could speed it up, and note that C++ programmers don't actually typically write very OOP
[20:59:20] <Alipha> code.
[21:01:26] *** Joins: paul424 (~tom@ip-5-172-238-100.multi.internet.cyfrowypolsat.pl)
[21:01:59] <kenanmarasli> Alipha: thank you very much
[21:02:15] <Alipha> kenanmarasli: something like: https://wandbox.org/permlink/kZbHtMwS4Xm0sWoC
[21:03:38] <kenanmarasli> yep, this is what I head in mind, but as you said although it is simple, it is costly. I'll see how else I can tackle this
[21:04:12] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[21:04:30] <Alipha> kenanmarasli: if you wait a bit, i'm working on another example :-P
[21:06:57] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[21:09:55] *** Joins: bobb_ (~bobb_@dslb-088-065-181-024.088.065.pools.vodafone-ip.de)
[21:10:08] <Alipha> kenanmarasli: https://wandbox.org/permlink/K0UWjYTj97jDlXpU
[21:10:13] <Alipha> !give kenanmarasli CRTP
[21:10:15] <nolyc> kenanmarasli: CRTP is the Curiously Recurring Template Pattern. A form of static polymorphism where a derived class inherits from a base class template with the derived class as the template parameter.
[21:11:18] <Alipha> oh, `self.comp(left, right)` needs to be `self->comp(left, right)`, i just noticed
[21:17:17] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:17:37] *** Quits: hexingb (~hexingb@111.30.225.26) (Ping timeout: 240 seconds)
[21:20:50] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[21:21:10] <kenanmarasli> yes, thank you, this is very helpful
[21:23:17] *** Quits: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net) (Quit: Client closed)
[21:26:13] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:26:57] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[21:28:14] *** Joins: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:31:01] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[21:31:14] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[21:32:58] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[21:33:12] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:36:07] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:37:35] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:39:28] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 250 seconds)
[21:39:38] *** Joins: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:42:21] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:24] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:42:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:29] *** ChanServ sets mode: +v npaperbot
[21:42:55] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[21:43:08] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[21:44:02] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[21:44:38] *** Quits: callq (~callq@2409:4062:2296:71d:2439:c59b:32a7:f93) (Quit: callq)
[21:44:57] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 240 seconds)
[21:49:07] *** Joins: k8yun (~k8yun@user/k8yun)
[21:50:16] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[21:51:03] *** Joins: k8yun_ (~k8yun@user/k8yun)
[21:53:08] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[21:54:49] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 250 seconds)
[21:56:26] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[21:56:57] *** Joins: hexingb (~hexingb@111.32.64.243)
[21:57:39] *** Quits: bobb_ (~bobb_@dslb-088-065-181-024.088.065.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[22:00:50] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[22:01:13] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[22:02:49] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[22:03:06] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:05:10] *** Joins: KombuchaKip (~kip@192.252.230.5)
[22:08:35] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:2125:d54c:aebd:5023)
[22:09:06] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3c94:64e8:bbc0:ab07) (Ping timeout: 260 seconds)
[22:13:28] *** Quits: hexingb (~hexingb@111.32.64.243) (Read error: Connection reset by peer)
[22:14:01] *** Joins: hexingb (~hexingb@111.32.64.243)
[22:14:57] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[22:16:30] *** Joins: txtsd (~txtsd@user/txtsd)
[22:17:48] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:19:21] <CarloWood> child_window_list or child_windows_list ?
[22:19:42] <Alipha> child_window_list
[22:19:50] <CarloWood> thanks :)
[22:19:50] <Alipha> assuming you mean a list of child_windows
[22:19:57] <CarloWood> yes
[22:20:26] <ville> child_windows. no list
[22:20:58] <Alipha> +1
[22:21:04] <ville> "list" could be interpreted to imply something of the type
[22:21:14] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[22:22:00] <CarloWood> It was an English question :), you'll be surprised if you see the result (I'll paste it).
[22:22:36] <Alipha> It's a "potato bag", not a "potatoes bag"
[22:23:42] <ville> english uses snake_case?
[22:24:58] <CarloWood> On second thought, I won't paste the result.
[22:28:12] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:28:18] <kalven> if you do, make sure it's in the form of an image
[22:28:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:29:01] <CarloWood> Why?
[22:29:23] <kalven> it's what you usually do
[22:29:49] <CarloWood> Ok, if I don't paste the result I'll use an image.
[22:30:57] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[22:31:10] *** Joins: epony (epony@user/epony)
[22:31:11] *** Quits: paul424 (~tom@ip-5-172-238-100.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[22:35:59] *** Quits: autark (~autark@ti0048a400-0869.bb.online.no) (Read error: Connection reset by peer)
[22:38:14] *** Joins: k8yun (~k8yun@user/k8yun)
[22:41:26] *** Joins: autark (~autark@ti0048a400-0869.bb.online.no)
[22:48:52] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[22:51:41] <gehn> Alipha, but is a "potato bag" a bag made out of potatoes or a bag containing potatoes?
[22:52:22] <gehn> either way, my brain is regularly a potato bag
[22:54:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:55:59] <BurumaSerafuku> hey gehn
[22:56:02] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ad42:8d8e:a97e:d554)
[23:01:59] <ville> gotta love the "screenshot"-interpretation of the !testcase factoid. it's a classic. used by many greats in the past
[23:04:03] *** Joins: rpnx-phone (~rpnx-phon@c-73-237-50-187.hsd1.ga.comcast.net)
[23:05:54] *** Quits: hexingb (~hexingb@111.32.64.243) (Ping timeout: 256 seconds)
[23:08:24] *** Joins: hexingb (~hexingb@111.32.64.243)
[23:15:13] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[23:18:11] *** Quits: rpnx-phone (~rpnx-phon@c-73-237-50-187.hsd1.ga.comcast.net) (Quit: Quit)
[23:18:17] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:18:20] *** Joins: rpnx-phone (~rpnx-phon@c-73-237-50-187.hsd1.ga.comcast.net)
[23:21:44] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[23:23:01] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[23:24:27] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:25:31] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[23:30:03] *** Joins: Simplar (~Simplar@188.163.93.241)
[23:32:57] *** Quits: Simplar (~Simplar@188.163.93.241) (Client Quit)
[23:34:49] *** Joins: p-i- (~Ohmu@2403:6200:8978:d293:9c1e:ddbf:a07f:1f6d)
[23:40:16] *** Joins: paul424 (~tom@ip-5-172-238-100.multi.internet.cyfrowypolsat.pl)
[23:43:02] *** Quits: taiyu (~taiyu@user/taiyu) (Ping timeout: 240 seconds)
[23:46:09] *** Quits: darkoccultist (~darkone@user/darkoccultist) (Quit: Quantum Condensation Mode Active)
[23:49:52] *** Joins: mike18_ (~geri@71-220-52-187.mpls.qwest.net)
[23:50:08] <mike18_> hi does std::async(launch::async) always create a new thread or does it have some thread pool to manage it?
[23:51:27] *** Joins: epony (epony@user/epony)
[23:52:26] <ville> mike18_: undefined
[23:52:40] <ville> don't use std::async(). it's useless
[23:52:48] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:52:51] <BurumaSerafuku> wat
[23:52:52] <mike18_> lets say i create lots of std::async .. .how ill it perform if it always creates a new thread?
[23:52:52] <BurumaSerafuku> why?
[23:53:01] <BurumaSerafuku> can you explain, ville?
[23:53:20] <BurumaSerafuku> mike18_: scott meyers explains how to use async properly in his latest book
[23:53:23] <ville> BurumaSerafuku: it serves no purpose
[23:53:32] <mike18_> BurumaSerafuku: what does he say?
[23:53:33] <BurumaSerafuku> if you don't want to explain, it's fine
[23:54:02] <BurumaSerafuku> mike18_: in summary, you can either accept the implementation policy or you should specify one yourself
[23:54:06] <BurumaSerafuku> but there are more details
[23:54:07] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:54:09] <BurumaSerafuku> I like async a lot
[23:54:34] <mike18_> BurumaSerafuku: what problem you solve with async which is better than a lets say thread pool?
[23:55:09] <BurumaSerafuku> not having to build the thread pool myself :)
[23:55:35] <ville> it's a building block you should have in your arsenal from day 0 you start doing multithreading
[23:55:41] <mike18_> BurumaSerafuku: book called 42 SPECIFIC WAYS TO IMPROVE YOUR USE OF C++11 AND C++14 ?
[23:55:46] <BurumaSerafuku> yes
[23:55:55] <BurumaSerafuku> effective modern C++
[23:56:26] <mike18_> thats the latest?
[23:56:37] <mike18_> effective modern c++ 42 SPECIFIC WAYS TO IMPROVE YOUR USE OF C++11 AND C++14
