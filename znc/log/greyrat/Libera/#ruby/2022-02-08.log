[00:02:54] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[00:09:08] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[00:09:25] *** Joins: alex[m]12 (~alexchete@2001:470:69fc:105::1:1001)
[00:10:37] *** Joins: pgeorgi (~pgeorgi@2001:470:69fc:105::54)
[00:13:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:13:56] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[00:15:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:17:30] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[00:18:15] *** Joins: DenKn (~deac@2001:470:69fc:105::1:5ee2)
[00:19:53] *** Joins: sixecho (~sixecho@2001:470:69fc:105::32)
[00:31:48] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[00:34:27] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:35:55] <havenwood> nakilon: The `rescue` between those lines rescued?
[00:36:24] <havenwood> It doesn't reraise I imagine?
[00:37:23] <nakilon> it does "puts $!.full_message" and skip, yes, does not reraise
[00:38:13] *** Joins: coolshaurya (~coolshaur@2001:470:69fc:105::fac0)
[00:39:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:40:32] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Remote host closed the connection)
[00:40:58] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[00:42:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:50:05] *** Joins: slact[m] (~slact@2001:470:69fc:105::1:5ee3)
[00:51:13] *** Quits: exondation (~wadii@2a01:e34:eca5:6c30:e1be:3474:2eb0:2286) (Ping timeout: 256 seconds)
[00:51:43] *** Joins: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8)
[00:57:43] *** Joins: oxtyped[m] (~oxtyped2l@2001:470:69fc:105::1:8590)
[01:05:23] *** Quits: oxtyped[m] (~oxtyped2l@2001:470:69fc:105::1:8590) (Read error: Connection reset by peer)
[01:05:23] *** Quits: jhass[m] (~jhass@about/ruby/jhass) (Read error: Connection reset by peer)
[01:05:23] *** Quits: sixecho (~sixecho@2001:470:69fc:105::32) (Read error: Connection reset by peer)
[01:05:23] *** Quits: slact[m] (~slact@2001:470:69fc:105::1:5ee3) (Read error: Connection reset by peer)
[01:05:24] *** Quits: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8) (Read error: Connection reset by peer)
[01:05:24] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Write error: Connection reset by peer)
[01:05:24] *** Quits: manveru[m]1 (~manveruma@2001:470:69fc:105::c2d7) (Read error: Connection reset by peer)
[01:05:25] *** Quits: alex[m]12 (~alexchete@2001:470:69fc:105::1:1001) (Write error: Connection reset by peer)
[01:05:25] *** Quits: DenKn (~deac@2001:470:69fc:105::1:5ee2) (Write error: Connection reset by peer)
[01:05:25] *** Quits: coolshaurya (~coolshaur@2001:470:69fc:105::fac0) (Read error: Connection reset by peer)
[01:05:25] *** Quits: pgeorgi (~pgeorgi@2001:470:69fc:105::54) (Read error: Connection reset by peer)
[01:08:13] *** Joins: jhass[m] (~jhass@about/ruby/jhass)
[01:24:13] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[01:36:32] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[01:46:49] *** Joins: sixecho (~sixecho@2001:470:69fc:105::32)
[01:46:49] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[01:46:49] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[01:46:49] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[01:46:49] *** Joins: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8)
[01:46:49] *** Joins: slact[m] (~slact@2001:470:69fc:105::1:5ee3)
[01:46:49] *** Joins: DenKn (~deac@2001:470:69fc:105::1:5ee2)
[01:46:49] *** Joins: oxtyped[m] (~oxtyped2l@2001:470:69fc:105::1:8590)
[01:46:49] *** Joins: coolshaurya (~coolshaur@2001:470:69fc:105::fac0)
[01:46:49] *** Joins: pgeorgi (~pgeorgi@2001:470:69fc:105::54)
[01:46:49] *** Joins: kinduff (~kinduff@user/kinduff)
[01:46:50] *** Joins: alex[m]123 (~alexchete@2001:470:69fc:105::1:1001)
[01:51:42] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:53:05] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[01:58:17] *** Joins: roshanavand (~roshanava@185.213.155.232)
[02:03:02] *** Quits: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8) (Quit: You have been kicked for being idle)
[02:12:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:25:46] *** Quits: weaksauc_ (~textual@ip68-5-101-101.oc.oc.cox.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:26:25] *** Joins: weaksauce (~textual@ip68-5-101-101.oc.oc.cox.net)
[02:31:51] *** Joins: lfalcao (~lfalcao@179.180.158.80)
[02:32:50] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Remote host closed the connection)
[02:39:22] *** Joins: symb0l (~symb0l@user/symb0l)
[02:48:58] <nakilon> btw, figured out that I don't really need to think how to mock async-websocket for my need; I just test the bot that uses my library so I just kill the Async constant and mock the main method of my library so it does not really reach the websockets stuff at all
[02:49:04] <nakilon> https://raw.githubusercontent.com/Nakilon/trovobot/59747c8e0a9b7b6df06ff6626047856efc0922a6/examples/velik_the_bot/test.rb
[02:49:10] *** Joins: manveru[m] (~manveruma@2001:470:69fc:105::c2d7)
[02:50:12] <nakilon> and while stubbed I just load the bot source like if it was really run
[02:59:57] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[03:04:59] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[03:12:19] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 256 seconds)
[03:25:35] *** Quits: roshanavand (~roshanava@185.213.155.232) (Ping timeout: 256 seconds)
[03:38:41] *** Parts: lfalcao (~lfalcao@179.180.158.80) ()
[03:52:57] *** Quits: Guest7003 (~vit@chello085216193138.chello.sk) (Ping timeout: 240 seconds)
[04:06:57] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[04:27:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:27:52] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[04:35:03] *** Quits: samgranieri (~samgranie@user/samgranieri) (Ping timeout: 256 seconds)
[04:36:42] *** Joins: hanzo (uid532183@user/hanzo)
[04:42:32] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791)
[04:48:42] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Remote host closed the connection)
[04:50:17] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[04:52:50] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[04:58:31] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[05:19:01] *** Quits: kaivai_ (~kaivai@user/kaivai) (Quit: ZNC - https://znc.in)
[05:21:42] *** Joins: kaivai (~kaivai@user/kaivai)
[05:32:17] *** Quits: JayDoubleu_ (sid339529@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[05:33:06] *** Joins: JayDoubleu_ (sid339529@id-339529.hampstead.irccloud.com)
[05:52:22] *** Quits: kaivai (~kaivai@user/kaivai) (Quit: ZNC - https://znc.in)
[05:52:33] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[05:54:54] *** Joins: kaivai (~kaivai@user/kaivai)
[05:56:22] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Remote host closed the connection)
[05:57:09] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[05:59:00] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[06:43:37] *** Quits: aighearach (~paris@user/aighearach) (Quit: Leaving)
[06:55:52] *** Quits: kaivai (~kaivai@user/kaivai) (Quit: ZNC - https://znc.in)
[06:58:28] *** Joins: kaivai (~kaivai@user/kaivai)
[06:59:59] *** Quits: symb0l (~symb0l@user/symb0l) (Quit: The Lounge - https://thelounge.chat)
[07:16:09] *** Quits: kaivai (~kaivai@user/kaivai) (Quit: ZNC - https://znc.in)
[07:18:42] *** Joins: kaivai (~kaivai@user/kaivai)
[07:45:58] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[07:47:44] *** Joins: unyu (~pyon@user/pyon)
[07:53:55] *** Joins: fdan (~fdan@2001:1900:2100:2807:640a::ffb)
[07:54:38] <fdan> Hi there, how can i convert this `expect(repo[:release_type].length).to be_between(1, 2).inclusive` to ensure that they are'nt arrays
[07:54:55] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791) (Ping timeout: 250 seconds)
[08:19:03] <nakilon> fdan add one more expect I guess
[08:19:14] <nakilon> above that one
[08:19:39] <fdan> i am not a ruby programmer
[08:19:49] <fdan> do you mind if you can pass me the snippet to do the change
[08:20:59] <nakilon> what exactly shouldn't be an Array?
[08:21:37] <nakilon> https://relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/type-matchers
[08:21:38] <fdan> I have to update `expect(repo[:release_type].length).to be_between(1, 2).inclusive` this to ensure that they are not arrays
[08:24:08] <fdan> nakilon how to do that
[08:30:44] <nakilon> I wish there was a pstore method to check if I'm in a transaction already
[08:31:04] <nakilon> so I could make a method with an optional transaction opening
[08:31:05] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[08:32:13] <nakilon> otherwise to avoid nesting I had to prefetch the query that is actually not an optimal thing to do
[08:36:19] <fdan> nakilon are you answering me
[08:36:34] <nakilon> no
[08:37:17] <fdan> ok
[08:37:33] <fdan> can you guide me
[08:51:27] *** Joins: bluedust (~bluedust@103.161.144.34)
[09:03:03] <havenwood> nakilon: Maybe just make your own little wrapper to detect if you're in a transaction? Something like? https://gist.github.com/havenwood/ddc1dcbac4867d7c443adf08a4a481f3
[09:03:16] <havenwood> fdan: What shouldn't be an Array?
[09:03:42] <fdan> i am going to change release_type to be a string
[09:04:01] <fdan> so in the rspec, i will have to ensure that release_type is not an array in the spec file
[09:04:19] <havenwood> fdan: Normally you don't test what things aren't.
[09:04:45] <fdan> yes can we check that they're strings atleast
[09:07:33] <havenwood> fdan: You can test whatever you want, but typically we use duck typing and don't care what's passed as long as it responds to the appropriate methods for your interface.
[09:07:43] <havenwood> fdan: expect(repo[:release_type]).not_to be_an(Array)
[09:08:11] <havenwood> fdan: That ^ is how you'd express that `repo[:release_type]` must not be an Array.
[09:08:36] <havenwood> fdan: It's an odd test, to be sure, just since what else all must it not be?
[09:08:47] <fdan> i see
[09:10:20] <havenwood> fdan: If you really want to check types, I'd suggest using RBS and Steep to for type checking.
[09:10:48] <fdan> havenwood: 'not_to be_an` is a method in rspec?
[09:11:29] <havenwood> Yup, RSpec stuff.
[09:12:11] <havenwood> You can generate fairly nice RBS type signatures these days with `typeprof` in Ruby 3.1.
[09:12:17] <fdan> can you pass me the documentation for it
[09:12:20] <fdan> could not find
[09:13:47] <havenwood> fdan: https://bfy.tw/SWD3
[09:14:32] <havenwood> fdan: I searched for "rspec not to" and it's the top link. ¯\_(ツ)_/¯ 
[09:14:50] <havenwood> Maybe try a new search engine.
[09:15:22] <fdan> sorry i search with not_to_be_an
[09:15:38] <havenwood> fdan: Two methods, #not_to and #be_an.
[09:15:48] <havenwood> fdan: nakilon linked you the latter.
[09:16:00] <fdan> i see
[09:16:18] <havenwood> fdan: I use Minitest, which ships with Ruby, and is less fancy.
[09:16:35] <havenwood> RSpec has this little English-like domain-specific language for tests.
[09:17:01] <havenwood> I'd recommend an RSpec tutorial if you want to get up to speed with RSpec.
[09:17:06] <fdan> havenwood i have one more question. I have release_type: [Rn::Monitor::SDK_RELEASE, Rn::Monitor::NODE_RELEASE]
[09:17:21] <nakilon> havenwood that's a cool wrapper but it's like another wheel
[09:17:23] <fdan> how do i update this
[09:17:46] * havenwood spins the wheel
[09:19:14] <fdan> sorry i m coming from python experience and its my day 1 in ruby
[09:19:23] <havenwood> fdan: How do you update it to what?
[09:19:27] <havenwood> I don't understand the question.
[09:19:48] <havenwood> nakilon: Yeah, it's not context aware like `Async do`, which is too bad.
[09:20:20] <havenwood> I usually wrap PStore anyways, since it's interface is clunky, so I don't mind a layer of abstraction.
[09:20:26] <fdan> previously release_type was an array in an .rb file, i changed it to string and hence the spec file also changes
[09:20:56] <fdan> i dont know what i would have to update it to?
[09:21:36] <nakilon> probably as a kludge I could pass a transaction object to my method so it will see the presence of context immediately in args
[09:21:39] <havenwood> fdan: Okay. So you're showing us an Array with two constant variables and asking how to update it to a String? What are those constants? How do you make an Array a String? Your question doesn't make sense without context.
[09:22:49] <havenwood> fdan: Have you shared this code and I missed it? You can't make an Array a String without deciding how you're going to represent a list as text.
[09:23:02] <fdan> havenwood do you mind if i can DM you the code?
[09:25:05] <havenwood> fdan: I feel like I'm about to go down a rabbit hole here. :P Can you say why you're making a String and show just one example of what you'd like the content of the String to be?
[09:25:12] <havenwood> 🐇
[09:25:35] <fdan> hey so basically we got duplicate tickets in jira from the ruby program
[09:25:47] <havenwood> Feel free to share a link to a gist of the code here.
[09:26:14] <havenwood> Okay, you got duplicate tickets, copy.
[09:26:35] <fdan> yes
[09:26:43] <havenwood> And why are you taking a list of things and turning it into text?
[09:27:06] <fdan> sure, 1 sec
[09:28:21] <fdan> https://i.imgur.com/6rrPZnD.png
[09:28:28] <fdan> this is the change i made
[09:28:51] <fdan> i made this change because when the release_type was an array, when there is a second condition in the array
[09:29:22] <fdan> the condition for that was never run as it was mutually exclusive
[09:29:29] <fdan> hence i made this code change
[09:29:44] <fdan> after i made the code change i am asked to update few more things, which i am not sure
[09:31:23] <fdan> havenwood iam asked to update L19 https://i.imgur.com/GlSBc56.png
[09:32:08] <fdan> do you get an idea
[09:34:46] <havenwood> fdan: I understand the code but don't understand what you want.
[09:35:21] <fdan> what does L19 do?
[09:36:31] <havenwood> fdan: It's the key/value pair of a hash, where the key is a Symbol and the value is an Array with both sdk and node release types.
[09:36:33] <fdan> after modifying to expect(repo[:release_type]).not_to be_an(Array), does L19 change?
[09:36:45] <havenwood> No, don't do that.
[09:37:06] <havenwood> Your whole "turn the Array into a String thing seems misguided with the code you've shown.
[09:37:28] <havenwood> You have three cases, [Foo], [Bar], and both [Foo, Bar].
[09:38:00] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[09:38:25] <havenwood> The original code before your update said "do x if [Foo] or [Foo, Bar] and y if [Bar]" basically.
[09:38:29] <fdan> havenwood why i ask is, i have made the change here some days before https://i.imgur.com/SvRY4O5.png
[09:38:34] <havenwood> fdan: After your update, it doesn't make sense.
[09:39:23] <havenwood> fdan: I think maybe just say what you want the logic to be? Obviously you didn't like options 1) [Node], [Node, SDK], and 2) [SDK].
[09:39:30] <havenwood> fdan: What *do* you want the logic to be?
[09:39:52] <havenwood> fdan: Are you trying to say it should never be both Node and SDK?
[09:40:02] <havenwood> fdan: This test presumes you can have one, the other, or both.
[09:40:25] <havenwood> If it's Node or both, "NODE_DEFAULT_ASSIGNEE"
[09:40:28] <fdan> it can be node and sdk as well, but problem was previously they were in array
[09:40:33] <fdan> now im going to change them to string
[09:40:34] <havenwood> If it's SDK, "SDK_DEFAULT_ASSIGNEE"
[09:40:49] <fdan> L313 and L319 will be a string
[09:41:17] <havenwood> fdan: That seems completely unrelated to your problem to me. I'm scratching my head wondering why you want to involve a String at all?
[09:41:45] <havenwood> Then being in an Array *really* doesn't seem like a problem to me.
[09:41:55] <havenwood> I suspect you just want some logic change? What?
[09:42:04] <fdan> yes the whole idea of changing from an array to string is, if an array simultaneously contains both node and sdk release
[09:42:14] <fdan> the latter condition never really executed
[09:42:16] <havenwood> So what if it does? Change your logic?
[09:42:28] <fdan> hence we made this change https://i.imgur.com/6rrPZnD.png
[09:42:38] <havenwood> fdan: That's just gibberish.
[09:43:04] <fdan> now i want to make the release_type to be a string
[09:43:07] <havenwood> fdan: Sorry, maybe someone else can follow, but I don't understand why you can't just adjust your logic slightly and still use an Array.
[09:43:31] <fdan> havenwood it should never be an array. it should have only one item
[09:43:47] <fdan> or how you will adjust the logic?
[09:44:06] <fdan> when it was an array, we got duplicate tickets and we never got a ticket for sdk
[09:44:33] <havenwood> fdan: Right, but that's because the logic said to do that, not because it's an Array.
[09:44:43] <fdan> yes i agree
[09:44:54] <fdan> do you have a better way to do this
[09:46:55] <havenwood> fdan: Since I still have no clue what you want, let me suggest starting very explicitly. Sec, I'll show you an example.
[09:47:04] <fdan> ok
[09:49:40] <havenwood> fdan: Consider the following: https://gist.github.com/havenwood/d5cda61ef24b7911c5f71f379a26db0a
[09:50:11] <havenwood> fdan: You can certainly make this code more elegant, but I'm trying to show there are three cases and you can have three outcomes — whatever you want them to be.
[09:50:32] <havenwood> You can do two on one case when, with a comma between to mean "either".
[09:50:52] <havenwood> If you make it work with that ^ code it'll be easy for folk here to then help you refactor it.
[09:51:23] <havenwood> fdan: If you want to flatten this and change your test case, go ahead, but maybe start with making the code logic work as is.
[09:51:33] <fdan> ok
[09:52:59] <havenwood> If you don't want to match one of those, remove it. Explicit is probably a safe place to start and it'll make it clear to anyone helping how to refactor.
[09:53:41] <havenwood> fdan: Circle back if that works for you and folk here can help make it pretty.
[09:53:48] <fdan> hmm sure
[09:57:49] <fdan> havenwood what is the difference between the gist you have given and this https://bpa.st/QUZQ
[10:00:00] <fdan> or what does this line do https://gist.github.com/havenwood/d5cda61ef24b7911c5f71f379a26db0a#file-release_type-rb-L7
[10:08:43] <leftylink> 2022-02-08 05:49:14 <             fdan> sorry i m coming from python experience and its my day 1 in ruby
[10:08:47] <leftylink> so basically I think this is a lie
[10:09:00] <leftylink> but I'm not sure whether I should withhold help based on it being a lie, or if I should just help anyway
[10:09:09] <fdan> why
[10:09:43] <fdan> its upto you. but i have no ruby experience
[10:11:57] <leftylink> hey all I'm saying is I have a good memory
[10:13:53] <leftylink> okay yeah
[10:14:17] <leftylink> I think you're lying, and I have decided not to help because of it. I won't stop others from helping, but I'm simply informing others of what I have chosen to do
[10:14:34] <leftylink> others are of course free to make their own individual choices - I'm not the boss of them
[10:16:20] <fdan> i still understand how you're coming to a conclusion that i am lying
[10:22:20] <leftylink> that is a good point though. if I don't explain how I came to that conclusion, there are two huge disadvantages 1. accused does not get a chance to respond to the accusations, 2. others have no reason to come to the same conclusions and potentially take the same actions. given those two disadvantages, I should explain how I came to that conclusion
[10:23:42] <leftylink> so my reasons are 2021-08-06, 2021-08-27, 2021-08-30, and 2022-01-21. those are the days that led me to think it being day 1 is false
[10:24:23] <fdan> yes i agree, but still its a day 1 at ruby, i have not formally learnt ruby yet
[10:25:07] <leftylink> I see, so it must have been a expression I am not familiar with. I apologise. English isn't my first language, so I must have misunderstood you.
[10:33:42] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[10:48:52] *** Joins: infinityfye (~infinityf@156.212.9.209)
[10:49:44] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[10:50:00] *** Joins: keremcan (~keremcan@31.223.35.232)
[10:51:14] *** Quits: keremcan (~keremcan@31.223.35.232) (Client Quit)
[10:56:27] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[11:17:24] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[11:25:58] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:32:36] *** Joins: Guest7003 (~vit@chello085216193138.chello.sk)
[11:45:08] *** Joins: Rounin (~david@84.212.130.215)
[11:54:26] *** Joins: bluedust_ (~bluedust@117.204.132.5)
[11:57:51] *** Quits: bluedust (~bluedust@103.161.144.34) (Ping timeout: 256 seconds)
[12:06:39] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:11:53] *** Joins: exondation (~wadii@2a01:e34:eca5:6c30:255d:905b:6f80:33cc)
[12:19:28] *** Quits: rando25892 (~homefame@user/rando25892) (Quit: enemy at the gate)
[12:30:39] *** Joins: keremcan (~keremcan@31.223.35.232)
[12:32:39] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Ping timeout: 256 seconds)
[12:34:55] *** Joins: infinity_fye (~infinityf@156.212.9.209)
[12:37:38] *** Quits: infinity_fye (~infinityf@156.212.9.209) (Client Quit)
[12:38:05] *** Quits: infinityfye (~infinityf@156.212.9.209) (Ping timeout: 250 seconds)
[12:38:32] *** Joins: infinityfye (~infinityf@156.212.9.209)
[12:43:59] *** Joins: infinity_fye (~infinityf@156.212.9.209)
[12:45:46] *** Joins: dviola (~diego@user/dviola)
[12:45:48] *** Quits: keremcan (~keremcan@31.223.35.232) (Quit: Client closed)
[12:46:17] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 240 seconds)
[12:47:09] *** Quits: infinityfye (~infinityf@156.212.9.209) (Ping timeout: 256 seconds)
[12:48:06] *** Joins: infinityfye_ (~infinityf@156.212.9.209)
[12:51:07] *** Quits: infinity_fye (~infinityf@156.212.9.209) (Ping timeout: 256 seconds)
[12:52:25] *** Joins: infinityfye (~infinityf@156.212.9.209)
[12:52:32] *** Quits: infinityfye_ (~infinityf@156.212.9.209) (Ping timeout: 240 seconds)
[12:52:53] *** Joins: Aylat (~Aylat@33.red-83-35-103.dynamicip.rima-tde.net)
[12:52:53] *** Quits: Aylat (~Aylat@33.red-83-35-103.dynamicip.rima-tde.net) (Changing host)
[12:52:53] *** Joins: Aylat (~Aylat@user/Aylat)
[13:00:54] *** Joins: goldfish (~goldfish@user/goldfish)
[13:17:55] *** Joins: infinity_fye (~infinityf@156.212.9.209)
[13:21:02] *** Quits: infinityfye (~infinityf@156.212.9.209) (Ping timeout: 240 seconds)
[13:21:51] *** Joins: infinityfye (~infinityf@102.45.113.5)
[13:22:31] *** Quits: infinity_fye (~infinityf@156.212.9.209) (Ping timeout: 250 seconds)
[13:22:47] *** Joins: infinity_fye (~infinityf@102.45.113.5)
[13:26:25] *** Quits: infinityfye (~infinityf@102.45.113.5) (Ping timeout: 250 seconds)
[13:26:30] *** Joins: infinityfye_ (~infinityf@102.45.113.5)
[13:29:27] *** Quits: infinity_fye (~infinityf@102.45.113.5) (Ping timeout: 250 seconds)
[13:30:48] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[13:31:59] *** Joins: infinity_fye (~infinityf@102.45.113.5)
[13:33:37] *** Quits: infinity_fye (~infinityf@102.45.113.5) (Client Quit)
[13:35:05] *** Quits: infinityfye_ (~infinityf@102.45.113.5) (Ping timeout: 250 seconds)
[13:44:24] *** Joins: infinityfye (~infinityf@156.212.254.45)
[13:52:08] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[13:52:18] *** Joins: roshanavand (~roshanava@185.213.155.232)
[14:02:48] *** Quits: fdan (~fdan@2001:1900:2100:2807:640a::ffb) (Quit: Client closed)
[14:34:38] *** Quits: reset (~reset@user/reset) (Quit: reset)
[14:35:23] *** Quits: roshanavand (~roshanava@185.213.155.232) (Ping timeout: 256 seconds)
[14:48:15] *** Joins: reset (~reset@user/reset)
[15:02:49] *** Joins: unyu (~pyon@user/pyon)
[15:06:08] *** Quits: unyu (~pyon@user/pyon) (Client Quit)
[15:20:57] *** Quits: quintasan (~quassel@quintasan.pl) (Ping timeout: 256 seconds)
[15:26:41] *** Joins: quintasan (~quassel@quintasan.pl)
[15:27:05] *** Joins: TomyWork (~TomyLobo@p200300e80f006700098d024049e60133.dip0.t-ipconnect.de)
[15:32:59] *** Quits: duds- (~duds-@user/duds) (Remote host closed the connection)
[15:33:47] *** Joins: duds- (~duds-@user/duds)
[15:35:12] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[16:02:29] *** Quits: Aylat (~Aylat@user/Aylat) (Read error: Connection reset by peer)
[16:04:49] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[16:06:25] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:17:57] *** Joins: unyu (~pyon@user/pyon)
[16:24:52] *** Joins: roshanavand (~roshanava@185.213.155.232)
[16:29:04] *** Joins: John_Ivan (~John_Ivan@31-187-33-75.dynamic.upc.ie)
[16:36:37] *** Quits: quintasan (~quassel@quintasan.pl) (Ping timeout: 240 seconds)
[16:48:40] *** Quits: roshanavand (~roshanava@185.213.155.232) (Remote host closed the connection)
[16:48:58] *** Joins: roshanavand (~roshanava@185.213.155.232)
[17:18:26] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Quit: taupiqueur)
[18:01:12] *** Joins: quintasan (~quassel@quintasan.pl)
[18:10:03] *** Joins: acosta (~acosta@163.172.62.165)
[18:33:27] *** Joins: fef (~thedawn@user/thedawn)
[18:49:22] *** Joins: fandre1986 (~fandre198@181.29.33.88)
[19:10:29] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 250 seconds)
[19:34:24] *** Quits: bluedust_ (~bluedust@117.204.132.5) (Remote host closed the connection)
[19:53:05] *** Quits: fandre1986 (~fandre198@181.29.33.88) (Quit: Connection closed)
[20:05:07] *** Joins: bluedust (~bluedust@117.204.132.5)
[20:18:58] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 250 seconds)
[20:19:20] *** Joins: Guest53 (~textual@cpe-75-191-248-232.triad.res.rr.com)
[20:22:08] *** Quits: infinityfye (~infinityf@156.212.254.45) (Read error: Connection reset by peer)
[20:25:23] <adam12> Gemdocs.org is now storing 27 GB of uncompressed docs over 4299 gems.
[20:25:30] <adam12> Seems like we run about 100 gems a day for releases.
[20:27:24] *** Joins: bluedust_ (~bluedust@185.248.85.41)
[20:28:25] *** Quits: bluedust (~bluedust@117.204.132.5) (Ping timeout: 256 seconds)
[20:29:40] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[20:34:30] <mooff> nice :-)
[20:44:58] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 250 seconds)
[20:45:57] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[20:46:06] *** Joins: bluedust (~bluedust@117.204.128.175)
[20:48:12] *** Joins: unyu (~pyon@user/pyon)
[20:49:57] *** Quits: bluedust_ (~bluedust@185.248.85.41) (Ping timeout: 256 seconds)
[20:52:31] *** Quits: weaksauce (~textual@ip68-5-101-101.oc.oc.cox.net) (Ping timeout: 250 seconds)
[20:52:42] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[20:54:33] *** Joins: Guest27 (~Guest27@2600:1700:360:1bbf:85e9:8685:49b:4535)
[20:55:03] *** Quits: Guest27 (~Guest27@2600:1700:360:1bbf:85e9:8685:49b:4535) (Client Quit)
[21:17:27] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 250 seconds)
[21:24:41] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[21:35:31] *** Joins: weaksauce (~textual@ip68-5-101-101.oc.oc.cox.net)
[22:00:32] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[22:02:15] *** Quits: bluedust (~bluedust@117.204.128.175) (Remote host closed the connection)
[22:12:02] <nakilon> leftylink heh are those his timestamps? I don't remember nicknames, but inability to even understand my first question "what exactly should be array?" I supposed it's not 1st ruby day but rather 1st computer day, but with timestamps it makes even worse sense
[22:12:45] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[22:13:24] <mjacob> how do i get the Method object of some method of some object which has an overridden method 'method'?
[22:14:33] <weaksauce> super?
[22:15:06] <mjacob> weaksauce: wouldn't that work only within the overriden 'method' method?
[22:15:53] <weaksauce> yes
[22:15:56] *** Quits: TomyWork (~TomyLobo@p200300e80f006700098d024049e60133.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:15:56] <weaksauce> what's the context
[22:16:28] <nakilon> probably the last line in this answer https://stackoverflow.com/a/18448863/322020
[22:17:17] <kenichi> obj.method(:meth_name), no?
[22:17:40] <mjacob> weaksauce: https://gist.github.com/manueljacob/a3678102ad69c0bc2eb7b1cc2aab4509
[22:18:00] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:18:28] <kenichi> ohhhh
[22:19:04] <adam12> mjacob: Maybe you need send here.
[22:19:20] <adam12> Actually..
[22:20:16] <mjacob> i got it working with "Object.instance_method(:method).bind(controller.request).method(...)"
[22:20:19] <mjacob> thank you all!
[22:23:00] <adam12> I guess that breaks down if you actually need the original `method`.
[22:23:07] <adam12> But a nice solution outside of that.
[22:25:11] <mjacob> adam12: yes, actually, i want the method object of a method which is not called 'method'. sorry for the confusion.
[22:25:23] <ox1eef> instance_method(..).bind(self).call is great knowledge to have in the toolbox.
[22:25:27] <adam12> mjacob: Nah, it's not confusing. Just an interesting predicament.
[22:25:46] <adam12> I guess you could maybe alias :method to :original_method or something, then method(:original_method).. but it does kind of defeat the purpose.
[22:26:04] <adam12> That's if you needed method(:method) of course, which you don't :)
[22:27:10] <adam12> If you could rename when binding, that would be neat.
[22:43:58] *** Joins: bluedust (~bluedust@117.204.128.175)
[22:57:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:14:38] *** Joins: samgranieri (~samgranie@user/samgranieri)
[23:18:40] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:20:17] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:26:42] <mooff> the .: operator was supposed to help with that situation (grabbing a Method when #method is overridden)
[23:28:12] *** Joins: Guest70 (~Guest70@201.240.196.25)
[23:28:23] <mooff> i wish numbered parameters still looked like @1 @2 instead of _1, _2 :)
[23:28:35] <mooff> _1 _2 just look out of place and confusing in Ruby code
[23:29:42] <mooff> i think *even though* @abc refers to instance variables, @1 @2 were still intuitive, and felt right
[23:30:32] <mooff> anyway, </shouting into the void as self therapy> :)
[23:32:12] *** Quits: Guest70 (~Guest70@201.240.196.25) (Client Quit)
[23:32:15] <mooff> i've got a singleton module - a module which extends itself - that represents a collection of bots
[23:33:16] <mooff> it has methods like EvalBots.setup, EvalBots.reset, EvalBots.bots
[23:33:38] <mooff> i'm trying to include Enumerable in it so i can EvalBots.find, EvalBots.first, etc
[23:35:14] *** Joins: Aylat (~Aylat@33.red-83-35-103.dynamicip.rima-tde.net)
[23:35:14] *** Quits: Aylat (~Aylat@33.red-83-35-103.dynamicip.rima-tde.net) (Changing host)
[23:35:14] *** Joins: Aylat (~Aylat@user/Aylat)
[23:35:24] <mooff> i've done include Enumerable; def each() bots.each end, but the Enumerable methods see the collection as empty
[23:35:58] *** Parts: pgeorgi (~pgeorgi@2001:470:69fc:105::54) ()
[23:37:06] *** Parts: jlindgren (~jlindgren@user/jlindgren) (The Lounge - https://thelounge.chat)
[23:38:27] <mooff> aah, need to def each(&blk) bots.each(&blk) end instead :)
[23:45:25] *** Quits: constxd (~brad@142.167.170.88) (Ping timeout: 250 seconds)
[23:59:27] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
