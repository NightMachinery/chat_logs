[00:05:40] *** Quits: sharperguy (~sharpergu@89.244.124.36) (Ping timeout: 260 seconds)
[00:07:05] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[00:09:13] *** Quits: ub (~Thunderbi@77.119.198.223.wireless.dyn.drei.com) (Quit: ub)
[00:09:44] <whatsupdoc> Anyone wanna explain this code? https://dpaste.org/NKiH
[00:09:45] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[00:10:15] *** Quits: jay-m1262 (~jay-m@129.0.77.217) (Read error: Connection reset by peer)
[00:11:09] <KirkMcDonald> whatsupdoc: You know how you call a class to instantiate it?
[00:11:28] <KirkMcDonald> This is overriding __call__ on a metaclass to change that behavior.
[00:11:28] <whatsupdoc> yes
[00:11:52] <whatsupdoc> Do all classes usually inherit from type?
[00:12:08] <KirkMcDonald> All classes are *instances* of type.
[00:12:14] *** Quits: jazz-o-lantern (~jaziz@user/jaziz) (Ping timeout: 260 seconds)
[00:12:42] <whatsupdoc> mindblown
[00:12:48] <KirkMcDonald> Type and its subclasses are metaclasses: Types whose instances are types.
[00:14:22] <whatsupdoc> is the default metaclass=type?
[00:14:46] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[00:16:07] *** Quits: paul424 (~tom@ip-37-248-158-221.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:16:25] *** Quits: sandb0y (~pirate@user/sandb0y) (Ping timeout: 252 seconds)
[00:16:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:18:13] *** Joins: mcon (~Thunderbi@host-79-45-0-75.retail.telecomitalia.it)
[00:18:36] <KirkMcDonald> whatsupdoc: Yes.
[00:18:49] <whatsupdoc> So basically metaclasses define the behavior of classes, while classes define the behavior of instances
[00:19:17] <KirkMcDonald> And classes are instances.
[00:19:36] *** Quits: jkl1337 (~jkl@user/jkl) (Quit: Gone.)
[00:19:36] <whatsupdoc> And it's all possible it seems because everything in python is an object
[00:20:07] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[00:20:51] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[00:20:53] *** Quits: magla (~gelignite@55d47f25.access.ecotel.net) (Quit: Stay safe!)
[00:20:57] *** Joins: jkl (~jkl@user/jkl)
[00:21:16] <mcon> Is there a way to use list comprehension to put in list result of a match; I mean something around the lines: `l1 = [m.group(1) for x in p1.stdout.readlines() if m:=re.match(pat1, x)]` but without the "walrus operator" which I don't have (I'm still on p3.8 as all Ubuntusians).
[00:21:20] *** Joins: ali1234 (~al@user/ali1234)
[00:21:43] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (Quit: ZNC 1.8.2 - https://znc.in)
[00:22:15] <whatsupdoc> I still kinda don't get it. Why not just define __call__ in the class instead of a metaclass? Wouldn't you get the same behavior?
[00:22:45] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[00:23:01] *** Joins: sharperguy (~sharpergu@89.244.124.36)
[00:23:51] *** sunyibo_ is now known as sunyibo
[00:24:55] *** Joins: BSaboia (~bsaboia@187.19.138.198)
[00:25:59] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[00:27:01] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[00:27:04] *** Quits: kostkon (~kostkon@2a02:587:a104:3da6:4d6c:40e6:f58:8e46) (Remote host closed the connection)
[00:27:07] *** Joins: stewie925 (~stewie925@174-26-17-123.phnx.qwest.net)
[00:27:17] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[00:27:34] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:27:39] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:28:16] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[00:28:26] *** Quits: esro (~esro@2a02:120b:2c3a:4620:8d51:c663:a2f9:f7f8) (Quit: Textual IRC Client: www.textualapp.com)
[00:28:27] <whatsupdoc> I guess the only difference is that if you ever want to quickly use a metaclass for another class, you would be able to
[00:28:55] *** Quits: LenarHoyt (~LenarHoyt@p200300eec7010600fd6e3d0f2bfbac26.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[00:29:11] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 264 seconds)
[00:29:15] <whatsupdoc> Instead of redefining it to act as a singleton in every class
[00:29:39] *** Joins: ExpiredKebab_ (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[00:30:13] <whatsupdoc> Are you allowed to use multiple metaclasses?
[00:30:16] <SnoopJ> metaprogramming applications are rarely intuitive or obvious
[00:31:22] <whatsupdoc> Why? I think this usecase might be valid
[00:31:32] <grym> mcon: 3.8 has the walrus
[00:31:41] <whatsupdoc> Actually, maybe not because earlier someone said you should avoid the singleton pattern
[00:31:57] <ali1234> defining __call__ on the class wouldn't allow you to do everything a metaclass does
[00:32:04] *** Joins: kostkon (~kostkon@2a02:587:a104:3da6:4d6c:40e6:f58:8e46)
[00:32:46] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Ping timeout: 260 seconds)
[00:32:46] *** Quits: Tas-sos (~Tas-sos@46-219-149.adsl.cyta.gr) (Ping timeout: 260 seconds)
[00:33:23] *** Quits: oldguy (~oldguy@user/oldguy) (Ping timeout: 264 seconds)
[00:34:15] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:8901:9592:757a:a93f) (Ping timeout: 260 seconds)
[00:34:32] <whatsupdoc> I guess the classes are also sharing the variables
[00:34:54] <whatsupdoc> In the metaclass
[00:35:09] *** Joins: oldguy (~oldguy@user/oldguy)
[00:35:12] <SnoopJ> whatsupdoc, my point is that if the metaprogramming machinery does not immediately suggest to you what problems it solves, they may not be problems you have
[00:35:48] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[00:36:09] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[00:36:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[00:36:40] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:37:02] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-641e-f3a3-251f-31e8.res6.spectrum.com) (Quit: Leaving.)
[00:37:19] <mcon> grym: Then why I do get a "invalid syntax" on the colon oft he walrus in "l1 = [m.group(1) for x in p1.stdout.readlines() if m:=re.match(pat1, x)]" what am I missing?
[00:37:39] <ali1234> too old python version?
[00:37:54] <SnoopJ> mcon, can you share the complete error report? https://bpa.st/+python+pytb
[00:38:10] <mcon> ali1234: Python 3.8.10
[00:38:21] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[00:38:31] <ChrisWarrick> mcon: try adding parentheses around the walrus part
[00:38:32] <Repiphany> Put the match in ()
[00:38:35] <parv> mcon, Missing () round the use of :
[00:38:37] *** Joins: jazzy (~jaziz@user/jaziz)
[00:38:39] <parv> =
[00:40:10] <whatsupdoc> cls is the equivalent of self but in metaclasses?
[00:40:38] <SnoopJ> it conventionally indicates that an arg is a class
[00:40:47] *** Joins: Mindscape (~Lindis@user/lindis)
[00:40:53] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 258 seconds)
[00:40:56] <parv> "cls", "self" is just a variable name
[00:40:58] <SnoopJ> and a metaclass method is often getting a class passed into it
[00:41:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:42:00] <ali1234> cls is often seen on classmethods too
[00:42:12] <SnoopJ> yes, where it has the same meaning
[00:42:23] <mcon> SnoopJ: https://bpa.st/6H5A
[00:42:31] <ali1234> also descriptors
[00:42:52] <spiderman> I love programming, and I love python, but I wish I had a project to work on. I need to get back into tech stuff and find something interesting, what are some of your pet projects #python?
[00:42:54] <parv> How does one define/set up a class method?
[00:43:06] <SnoopJ> mcon, yea I think the parentheses thing is your answer
[00:43:14] <SnoopJ> parv, you decorate the method with @classmethod
[00:43:32] <SnoopJ> https://docs.python.org/3/library/functions.html#classmethod
[00:43:42] <Mindscape> spiderman plenty of scipy projects
[00:44:39] *** Quits: grooverman (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[00:44:55] <mcon> ChrisWarrick: Ok. THANKS! that was the mistake "l1 = [m.group(1) for x in p1.stdout.splitlines() if (m:=re.match(pat1, x))]" works as expected.
[00:46:24] <mcon> SnoopJ: Thanks. Just for my understanding: is there some way to do that without the "walrus" ?
[00:47:50] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[00:48:18] <phy1729> You'd have to do the regex match twice
[00:48:33] *** Joins: ethrl (~morty@user/doforlove33)
[00:49:09] <parv> SnoopJ, Thank you. That also resolves mt misunderstanding of decorator being functionally useless; won't ignore them anymore.
[00:51:22] <mcon> phy1729: you mean something like: "l1 = [re.match(pat1, x).group(1) for x in p1.stdout.splitlines() if re.match(pat1, x)]", right?
[00:51:47] <phy1729> yeah either that or you have to filter out the None's in a second step
[00:51:53] <KirkMcDonald> whatsupdoc: Regarding __call__, such special methods exists on the *type* of an object, not the object itself. You define __call__ on a class for when its instances are called. You define __call__ on a metaclass for when a class is called.
[00:51:57] <KirkMcDonald> exist*
[00:52:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:52:26] <SnoopJ> mcon, once a comprehension starts growing 'hair' and becoming complicated, it's often time to write a generator function instead
[00:52:31] <phy1729> I guess you could [x for x in (re.match(pat1, x).group(1) for x in p1.stdout.splitlines()) if x]   but don't do that
[00:52:44] <whatsupdoc> KirkMcDonald damn good point
[00:52:58] <whatsupdoc> bob = Duck()
[00:52:59] *** Quits: stewie925 (~stewie925@174-26-17-123.phnx.qwest.net) (Quit: Client closed)
[00:52:59] <whatsupdoc> bob()
[00:53:09] <SnoopJ> the pre-walrus spelling would be `m = re.match(...); if m: do_something()` which you can't do in a comprehension (but you could call match() twice as pointed out)
[00:53:12] <whatsupdoc> One controls Duck(), the other controls bob()?
[00:53:22] <KirkMcDonald> whatsupdoc: Yes.
[00:54:23] *** Joins: stewie925 (~stewie925@174-26-17-123.phnx.qwest.net)
[00:54:34] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:55:16] <parv> phy1729, Is the admonition is due to count of for loops in list comprehension?
[00:55:51] <Roey> <spiderman> I love programming, and I love python, but I wish I had a project to work on. I need to get back into tech stuff and find something interesting, what are some of your pet projects #python?
[00:56:02] <Roey> spiderman: do you know about @dataclass and about match-case?
[00:56:09] <spiderman> I do not
[00:56:19] <parv> s/is due/due/
[00:56:22] <SnoopJ> Roey, there's a nice list of project ideas at https://nedbatchelder.com/text/kindling.html
[00:56:24] <Roey> aha! They're recent awesome additions to the language
[00:56:27] <phy1729> because I'd argue the walrus is more pythonic and if that's not an option I think a generator function or loop would be more pythonic than a generator comprehension in a list comprehension
[00:56:28] <mcon> parv: I assume it's because it's fairly obfuscated
[00:56:35] <Roey> SnoopJ: ah, thanks
[00:56:38] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[00:56:39] <Roey> spiderman: what SnoopJ said :)
[00:56:47] *** Joins: Julian (~tos9@python/site-packages/Julian)
[00:57:07] <parv> phy1729, Ok
[00:57:30] <Roey> that's a very nice page, SnoopJ, thanks for that one!
[00:57:33] *** Quits: Akuli (~Akuli@87-94-108-97.bb.dnainternet.fi) (Quit: Leaving)
[00:57:33] <spiderman> yeah, thanks
[00:57:38] <Roey> how did you find it?
[00:58:03] <SnoopJ> I don't know how it entered my references, but I'm sure it was because of #python one way or another
[00:58:13] *** Joins: mat001_ (~mat001@213.143.69.121)
[00:58:22] <parv> mcon, list comprehension does grow over into that
[00:58:30] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[00:58:57] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[00:59:19] *** Quits: mat001 (~mat001@213.143.69.121) (Ping timeout: 252 seconds)
[01:00:16] *** Joins: fofoni (~fofoni@user/fofoni)
[01:01:40] *** Quits: ubert (~Thunderbi@77.119.198.223.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[01:02:19] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[01:03:06] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 260 seconds)
[01:03:34] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 260 seconds)
[01:06:19] *** Quits: nomic (~nomic@185.217.117.204) (Quit: Leaving)
[01:06:25] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[01:08:15] *** Joins: Macuser (~Macuser@216.30.159.201)
[01:09:38] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[01:10:30] *** Quits: src (~src@user/src) (Quit: Leaving)
[01:10:57] <parv> Are there any packages for type checking at runtime (instead of just static type checking)? Would that be done by mangling of code via source filters?
[01:11:38] <grym> parv: there are a few
[01:11:58] *** Quits: Geronimo (~Geronimo@user/geronimo) (Quit: Ping timeout (120 seconds))
[01:12:05] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[01:12:15] *** Joins: Geronimo (~Geronimo@user/geronimo)
[01:12:18] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Client Quit)
[01:12:41] *** Quits: stewie925 (~stewie925@174-26-17-123.phnx.qwest.net) (Quit: Client closed)
[01:12:54] *** Joins: StormDancer (~stormdanc@185.245.86.121)
[01:13:34] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[01:13:37] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[01:14:09] *** Quits: mat001_ (~mat001@213.143.69.121) ()
[01:14:24] *** Quits: StormDancer (~stormdanc@185.245.86.121) (Remote host closed the connection)
[01:14:30] *** Joins: stewie925 (~stewie925@174-26-17-123.phnx.qwest.net)
[01:17:05] *** Joins: wizard1 (~warrior@5.238.148.88)
[01:17:10] <wizard1> hi
[01:17:18] <wizard1> is there any one
[01:17:31] <spiderman> y
[01:17:33] <whatsupdoc> no
[01:17:51] <wizard1> so now iam sure there is no one
[01:18:04] <wizard1> laugh
[01:18:27] <wizard1> spiderman: where are you from
[01:18:32] <wizard1> is your channel
[01:18:51] *** Quits: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 265 seconds)
[01:19:01] *** Quits: stewie925 (~stewie925@174-26-17-123.phnx.qwest.net) (Client Quit)
[01:19:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[01:19:36] *** Parts: wizard1 (~warrior@5.238.148.88) (WeeChat 2.8)
[01:19:52] *** Joins: mat001 (~mat001@213.143.69.121)
[01:20:56] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[01:21:11] <Julian> whatsupdoc: Hi, welcome, this is a channel about the Python programming language. If you have a question, you can ask it.
[01:21:19] <Julian> Erm, thanks irssi.
[01:21:20] *** Joins: fikran (~fikran@user/fikran)
[01:21:23] <spiderman> hehe
[01:22:15] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:23:37] *** Quits: mat001 (~mat001@213.143.69.121) (Client Quit)
[01:24:40] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[01:26:12] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[01:26:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[01:27:20] *** Quits: burakcank__ (~burakcank@88.243.140.242) (Ping timeout: 260 seconds)
[01:28:48] <parv> In exmple 4 in PEP 318 -- https://www.python.org/dev/peps/pep-0318/#examples -- how does `check_accepts` get the function parameter being operated on?
[01:29:02] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:d0b2:4012:3b33:93d5)
[01:29:17] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:29:25] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:30:11] *** Quits: redoc (~redoc@user/redoc) (Remote host closed the connection)
[01:30:32] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[01:30:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:30:53] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[01:30:55] <parv> I mean, in that example, `def accepts(*types)` there if no `f` parameter being assigned to
[01:31:35] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[01:32:28] <Julian> parv: A decorator which takes arguments is one you use by doing @foo(bar)\ndef the fn
[01:32:38] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[01:32:39] <Julian> parv: technically it is a decorator factory, the thing it returns will decorate the function
[01:32:49] <Julian> so indeed accepts does not "see" f, the thing it returns does though
[01:33:15] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[01:33:17] <braxas> https://pypi.org/project/httpservermock/
[01:33:28] <braxas> is there anything else like this?
[01:33:59] <parv> Julian, Oh right. Thanks
[01:34:34] *** Joins: iflema (~ian@user/iflema)
[01:34:51] <Julian> braxas: in what sense?
[01:35:02] <braxas> Julian: for mocking HTTP servers
[01:35:06] <Julian> braxas: Are you using a WSGI framework?
[01:35:10] <braxas> no
[01:35:19] <Julian> braxas: What's your application written on top of?
[01:35:29] <braxas> pure python
[01:35:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[01:35:44] <Julian> WSGI frameworks are typically pure python --
[01:35:45] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:35:50] <Julian> you mean no dependencies?
[01:35:54] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[01:36:02] <braxas> more or less, RDFLib for example
[01:36:04] <Julian> as in you're listening on a raw socket and not following the WSGI protocol?
[01:36:19] <braxas> I'm writing something that should interact with an HTTP server
[01:36:22] <braxas> in a specific way
[01:36:24] <braxas> and I want to test it
[01:36:31] <Julian> so you're writing a client?
[01:37:21] <Julian> man, the wikipedia article for rdflib is awful
[01:37:22] <braxas> well that is one use case, another is I'm trying to make examples of how to use OIDC and OAuth using pytest, and to show PKCE flow I want to fire this up and wait for the callback
[01:38:45] <braxas> https://pypi.org/project/httpservermock/ this is based of what I wrote for these tests: https://github.com/RDFLib/rdflib/blob/master/test/test_graph_http.py
[01:39:47] <braxas> so the point is, when someone does that with the library, and the http server responds with that response, the method should have a specific result
[01:40:52] <braxas> also here: https://github.com/RDFLib/rdflib/blob/master/test/test_sparqlupdatestore_mock.py
[01:41:29] <braxas> I actually don't quite get how it is not a more common pattern
[01:41:32] <braxas> or problem
[01:41:37] <braxas> I have faced it many times now
[01:41:59] *** Joins: humanBird (~humanBird@2603-8001-7003-5966-85b1-7456-f885-50c9.res6.spectrum.com)
[01:42:11] <Julian> braxas: I don't follow your question -- you're saying you have multiple different applications? Or you yourself are rdflib's author? Or?
[01:42:18] *** Joins: raxor2k (~raxor2k@3.109-247-153.customer.lyse.net)
[01:42:18] <Julian> braxas: Fundamentally though, your code you want to test makes HTTP requests?
[01:42:27] <braxas> I am saying I have many applications for this pattern of mocking an HTTP server
[01:42:42] <braxas> Julian: yes
[01:42:46] <Julian> I see -- and all those applications are clients? I.e. they are applications which make HTTP requests?
[01:43:06] <braxas> with application I mean a situation in which it applies
[01:43:11] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[01:43:13] <braxas> not actual python apps
[01:43:22] <braxas> Julian: yes
[01:43:35] <braxas> I mean if not this would not be very useful
[01:43:48] *** Joins: scindmape (~Lindis@user/lindis)
[01:43:50] <Julian> braxas: And what library do you use  to make the requests?
[01:43:59] <braxas> urlopen
[01:44:13] <braxas> it should be actual HTTP, not like that requests-mock
[01:44:20] <braxas> that seems entirely besides the point
[01:44:22] <Julian> I see, well, that might explain why you don't find many examples --
[01:44:36] <Julian> yeah, the common patterns here involve APIs in more commonly used libraries like requests or httpx
[01:44:51] <humanBird> I ran conda config --add channels conda-forge     Then i tried conda install -c conda-forge uwsgi and it says it can't find the package.     https://anaconda.org/conda-forge/uwsgi exists.  why is the conda installer lying to me?
[01:45:04] <Julian> braxas: What I'd call the "good" pattern here involves verified fakes for your HTTP client
[01:45:09] <Julian> Ones that do not talk HTTP at all for your test cases
[01:45:18] <Julian> And urllib, not being a good or modern HTTP client, doesn't have those
[01:45:20] <Julian> requests or httpx do
[01:45:27] *** Parts: mcon (~Thunderbi@host-79-45-0-75.retail.telecomitalia.it) ()
[01:45:33] *** Quits: Mindscape (~Lindis@user/lindis) (Ping timeout: 276 seconds)
[01:45:55] <Julian> (well requests' fake isn't verified, but it's a fake)
[01:45:57] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Quit: Client closed)
[01:46:21] <jinsun> humanBird: what os?
[01:46:30] <humanBird> winderp
[01:46:34] *** Joins: redoc (~redoc@user/redoc)
[01:46:42] <humanBird> So there's no binaries for windows then?
[01:46:52] <Julian> braxas: But e.g.: https://pypi.org/project/responses/
[01:47:11] <jinsun> humanBird: looks like linux and osx only https://anaconda.org/conda-forge/uwsgi/files
[01:47:13] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:47:34] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:49:05] <humanBird> damnit. i need to install some cygwin/mingw/painintheass tool to compile this now?
[01:49:18] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 260 seconds)
[01:49:33] <molt> windows timed shutdown
[01:50:21] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[01:52:58] <jinsun> wsl will be painless
[01:53:27] *** Joins: nomic (~nomic@185.217.117.204)
[01:54:26] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[01:55:14] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:57:31] <humanBird> blah. i'm just going to make a vmware player image
[01:57:39] <humanBird> in linux
[01:58:30] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[01:59:11] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:2c93:2cb0:bcd:aa8e) (Ping timeout: 264 seconds)
[01:59:16] <humanBird> really don't want to deal with docker headaches either.
[02:00:08] *** scindmape is now known as Mindscape
[02:00:19] <humanBird> download ubuntu iso -> install into vm -> install uwsgi -> profit.  i hope.  only 20 seconds left on 2.9 gb iso download
[02:00:23] *** Quits: orbatos (~orbatos@user/orbatos) (Ping timeout: 264 seconds)
[02:00:35] *** Quits: orbatos__ (~orbatos@user/orbatos) (Ping timeout: 260 seconds)
[02:00:58] <Mindscape> humanBird those tools never worked for me, but I was guessing
[02:01:40] <Mindscape> cygwin/mingw
[02:01:50] *** Joins: fructose (~fructose@user/fructose)
[02:02:42] <humanBird> the docs for uwsgi say it's "experimental" anyways.
[02:04:02] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[02:04:35] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 264 seconds)
[02:04:44] *** Joins: sartan (~sartan@user/sartan)
[02:04:48] <humanBird> hrm. i should probably turn off the other vm that's running hearthstone image recognition + AI gameplay automation.
[02:08:17] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[02:09:45] *** Joins: manuels (~manuel@80.211.205.88)
[02:12:50] *** Joins: Julian (~tos9@python/site-packages/Julian)
[02:14:00] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 260 seconds)
[02:14:22] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:14:36] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[02:15:12] <aphysically> jinsun: so I tried pyre on my codebase now that it's both mypy and pyright strict compatible
[02:15:26] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[02:15:32] <aphysically> it's a good manageable chunk of errors but as far as I can tell they're all false positives
[02:15:52] <aphysically> either straight-up pyre bugs or cases where it can't handle a category of type narrowing that pyright and mypy both handle
[02:16:16] <aphysically> not looking to make my code compatible with 3 static type checkers but thought it was interesting anyway
[02:16:35] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[02:16:37] <jinsun> never tried pyre, seemed like a pain to install
[02:16:53] <jinsun> I would try pytype before pyre
[02:17:59] <nedbat> aphysically: 3 static type checkers seems like 2 too many :)
[02:18:54] <aphysically> I think pytype is a nonstarter (it doesn't support a number of different type features I'm already using in my code)
[02:19:10] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 260 seconds)
[02:19:15] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[02:19:18] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[02:20:23] <jinsun> :D, I use 2, which is good sometimes because sometimes one catches stuff that other doesn't
[02:20:34] <aphysically> yeah, pytype is still working on python 3.8 support
[02:21:03] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[02:21:40] <jinsun> but also because I'm too lazy to use pyright from command line (I use it with vscode) and too impatient to wait for mypy while I'm editing, so I run it separately after I'm done
[02:21:41] <aphysically> yeah they make it seem like it's harder to type check with pyre than it is
[02:22:01] <aphysically> it's `pip install pyre-check` then `pyre --source-directory src check`
[02:22:08] <aphysically> or whatever your source-directory is
[02:22:36] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[02:22:55] *** Quits: tgamblin (~tgamblin@199-167-119-224.ppp.storm.ca) (Quit: Leaving)
[02:24:30] *** Quits: mortn (~mortn@81-234-122-230-no158.tbcn.telia.com) (Ping timeout: 260 seconds)
[02:25:58] <jinsun> mostly pyright + mypy should be more than enough, and less chances of pain because more users are using them
[02:26:11] *** Quits: emerent (~quassel@p200300cd5748559aba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[02:26:13] *** Joins: emerent_ (~quassel@p200300cd574855c8ba27ebfffed28a59.dip0.t-ipconnect.de)
[02:26:13] *** emerent_ is now known as emerent
[02:26:31] <aphysically> ye
[02:28:59] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 258 seconds)
[02:29:47] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:29:50] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[02:30:50] *** Joins: jazzy (~jaziz@user/jaziz)
[02:31:00] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[02:31:29] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[02:32:00] *** Quits: BlessJah (~BlessJah@user/blessjah) (Quit: leaving)
[02:32:13] *** Quits: loworder1it (~dave@s0106e81cba1736ea.ss.shawcable.net) (Ping timeout: 252 seconds)
[02:33:27] *** Quits: n-st (~n-st@user/n-st) (Read error: Connection reset by peer)
[02:33:52] *** Joins: BlessJah (~BlessJah@user/blessjah)
[02:35:02] *** Joins: n-st (~n-st@user/n-st)
[02:35:37] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[02:38:34] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[02:39:43] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[02:42:17] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:42:17] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:43:55] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[02:45:16] *** Joins: redrum88 (~redrum88@user/redrum88)
[02:46:04] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[02:46:05] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[02:49:11] <Roey> why
[02:49:11] <Roey> is
[02:49:12] <Roey> nobody
[02:49:15] *** Quits: alkino (~quassel@user/alkino) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:49:16] <Roey> talking
[02:49:17] <Roey> :(
[02:50:08] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:fde1:c7ee:1856:d707) (Quit: Leaving)
[02:50:08] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[02:50:45] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 260 seconds)
[02:50:49] *** Joins: Julian (~tos9@python/site-packages/Julian)
[02:51:17] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:53:09] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[02:56:00] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[02:56:28] *** Quits: The_Jag_ (~The_Jag@host-82-55-23-104.retail.telecomitalia.it) (Read error: Connection reset by peer)
[02:56:47] *** Joins: newpy (~newpy@206.168.231.90)
[02:57:11] *** Joins: The_Jag (~The_Jag@host-82-55-23-104.retail.telecomitalia.it)
[02:57:19] *** Joins: Wulf (~Wulf@user/wulf)
[02:59:17] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[02:59:36] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[03:00:12] <Gerlo> hi
[03:01:28] *** Quits: nomic (~nomic@185.217.117.204) (Quit: Leaving)
[03:04:26] *** Quits: oldguy (~oldguy@user/oldguy) (Ping timeout: 260 seconds)
[03:06:32] *** Joins: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net)
[03:06:41] *** Quits: The_Jag (~The_Jag@host-82-55-23-104.retail.telecomitalia.it) (Read error: Connection reset by peer)
[03:07:05] *** Joins: The_Jag (~The_Jag@host-82-55-23-104.retail.telecomitalia.it)
[03:09:39] <spiderman> python is a good programming language
[03:09:52] <twb> it really isn't
[03:10:16] <twb> It conflates LET and SET, for example, so lexical bindings have a strong tendency to dangle
[03:10:21] <sartan> Here we go
[03:10:37] <twb> sartan: OK sorry, I'll shut up :-)
[03:10:54] <twb> (I forget not all channels are #emacs)
[03:11:08] <sartan> i find forced-functional programming is way too explicit and verbose (eg lisp)
[03:11:24] <twb> lisp is OO not FP
[03:11:26] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[03:11:47] *** Joins: orbatos (~orbatos@user/orbatos)
[03:11:53] *** Quits: humanBird (~humanBird@2603-8001-7003-5966-85b1-7456-f885-50c9.res6.spectrum.com) (Quit: Client closed)
[03:12:41] <sartan> maybe should have been more clear, mostly using clojure and not lisp
[03:12:49] <sartan> Whatever relation those has, /shrug
[03:12:59] <sartan> I'm not a smart person
[03:14:02] *** Joins: rany (~rany@user/rany)
[03:14:07] *** Joins: phao (~phao@2804:d45:8e7a:de00:151a:3b36:fee5:e1d1)
[03:14:22] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[03:14:32] *** Joins: Croves (~Croves@2804:58:c196:3800:b584:e62e:44c6:fcff)
[03:15:34] <phao> Hi. I have two matrices in numpy, both 3xN. I'd like to computer a 1xN matrix consisting of the dot products of respective columns in the given two arrays. Is there a way to do that with some kind of existing numpy call?
[03:16:35] <phao> I managed to do (X*Y).sum(axis=0). That does it, but it ceates this X*Y temporary object. I was looking for a way to avoid that.
[03:16:59] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[03:19:15] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[03:21:43] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 252 seconds)
[03:22:42] *** Joins: Julian (~tos9@python/site-packages/Julian)
[03:22:45] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[03:22:50] *** Quits: The_Jag (~The_Jag@host-82-55-23-104.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[03:23:37] <nedbat> twb: i'm curious what you mean by lexical bindings?
[03:24:10] *** Joins: dulanic (~dulanic@47.187.144.163)
[03:24:11] <phao> Oh. It seems this does it: np.apply_along_axis(np.dot, axis=0, x, y)
[03:24:22] <twb> nedbat: are you familiar with the box and arrow diagrams used to teach that?
[03:24:43] <SnoopJ> phao, you might also look at np.tensordot()
[03:24:47] *** Joins: nomic (~nomic@185.217.117.204)
[03:24:50] <nedbat> twb: not sure. can you share a bit of python code that shows what you mean?
[03:25:19] <nedbat> twb: i know how Python works, and have used diagrams to explain it: https://nedbatchelder.com/text/names1.html
[03:25:32] <twb> nedbat: python doesn't make it easy to express what I'm talking about
[03:25:39] *** Joins: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca)
[03:25:41] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[03:25:47] <twb> Which is my whole complaint really
[03:25:53] <nedbat> twb: you just said python did something bad. but you can;t show what you mean?
[03:26:38] <twb> not without a whiteboard
[03:26:48] <twb> Here we go: https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-15.html#%_sec_2.2
[03:27:08] <twb> Oops not that one
[03:27:14] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:27:18] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[03:27:44] <twb> https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-21.html#%_sec_3.2  this one
[03:28:15] <twb> Python uses "x = y" both to establish a new lexical binding, and to mutate an existing lexical binding.
[03:28:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[03:29:09] <nedbat> twb: what did you mean by "dangle"?
[03:29:10] *** Joins: Fiji (~Fiji@user/fiji)
[03:29:25] *** Joins: bpalmer (~user@user/bpalmer)
[03:29:50] *** Quits: sharperguy (~sharpergu@89.244.124.36) (Ping timeout: 260 seconds)
[03:30:15] <twb> nedbat: in C99, for example, "{ int c = 3; ... } c;" is an error, because the lexical binding of c is scoped to the nearest block (established by braces).
[03:30:30] *** Joins: HaMsTeRs (~Thunderbi@14-0-228-136.static.pccw-hkt.com)
[03:30:37] <twb> nedbat: or more obviously, (let ((x 3))  ...) x  in scheme
[03:30:40] *** Joins: fikran (~fikran@user/fikran)
[03:31:02] *** Joins: djhankb (~djhankb@208.113.164.68)
[03:31:14] <twb> nedbat: in python, unless you call "del x", you typically only have implicit comprehension-, procedure- or file-level scope.
[03:31:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:31:40] <nedbat> twb: i'm still looking for something that's a problem.
[03:31:42] <twb> so for example this is not an error in python:  for x in xs: pass \n x
[03:32:05] <twb> nedbat: if x is large, it also prevents the garbage collector for reaping it
[03:32:10] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[03:32:13] <nedbat> twb: right, blocks aren't a scope
[03:32:22] <twb> it's just sloppy design
[03:32:31] <nedbat> twb: it's a different design.
[03:32:43] <nedbat> twb: there's value to having the name available after the block
[03:33:17] <twb> In my opinion, the uses for that are rare enough you should have to opt-in to them
[03:33:48] <nedbat> twb: without declarations, block-scope would be very inconvenient.
[03:34:09] <nedbat> twb: for example:   if x: y = 1;   do you want y available after the if-block?
[03:34:11] <twb> I don't really see how "let x be 3:" is any worse than "x = 3"
[03:34:33] <twb> nedbat: ah yeah that is another thing I dislike
[03:34:37] <jinsun> pyright doesn't allow that btw (in case the for loop didn't run x will throw namerrors) so  it forces "declaration" before the loop
[03:34:43] <nedbat> twb: what? you want declarations?
[03:35:03] <stealth_> not sure what `for x in xs: pass \n x` "is not an error" means cause thats syntax error
[03:35:04] <twb> nedbat: you can't just say "3 + if ..." in python, and they had to introduce "c if p else a" as a hack for that case
[03:35:04] *** Joins: The_Jag (~The_Jag@host-87-16-43-28.retail.telecomitalia.it)
[03:35:26] <twb> nedbat: or to put it more generally: python distinguishes between statements that return no value, and expressions that return 1 value
[03:35:38] <twb> It should just not have statements
[03:35:42] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:35:44] <nedbat> twb: yes.  i'm sorry there are lots of things you don't like about it.
[03:37:15] <twb> stealth_: http://ix.io/3CrQ
[03:37:25] <jinsun> statement thing is something that I don't like either, after using other languages where everything is expression
[03:37:36] *** Joins: OPK (~OPK@user/opk)
[03:38:36] <stealth_> twb, ya! thats how it works in python. you could put that `for` loop inside a function and now you can't access `x` outside of that function.
[03:38:42] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-9587-7f48-310e-0534.res6.spectrum.com) (Read error: Connection reset by peer)
[03:38:43] *** Joins: Julian (~tos9@python/site-packages/Julian)
[03:38:43] <grandrew> I actually like "I want x to be 3, can you make it 3 given all the libraries and data I gave you?"
[03:39:18] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[03:39:33] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[03:39:44] <jinsun> but statements can be converted to expressions easiliy by wrapping them up in a function, so not too bad
[03:39:47] <grandrew> "If you can't make x a 3, I authorize you to change the code to your liking"
[03:39:53] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:40:18] <stealth_> being able to access `x` like that after `for` loop ends is handy, when you want to know what the last value is and/or use that info for other things.
[03:40:18] <twb> Obviously the other thing that annoys me is opt-out mutability, because then you have to explain deep copy to students before they're really ready for it
[03:40:36] <twb> (And it also makes life a little harder for the compiler0
[03:40:54] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: AA TOO NEE ZUBARALHADEEEEEEEEEEEED)
[03:41:04] <stealth_> if you are using python, you are not really worried about compilers
[03:41:28] <twb> stealth_: "optimizer" t hen
[03:41:36] <KirkMcDonald> Or optimizers.
[03:41:43] <twb> haha
[03:41:44] <KirkMcDonald> The CPython optimizer does fairly little.
[03:41:52] <KirkMcDonald> Some constant folding.
[03:42:05] <bpalmer> there are pythons that do a bit more.
[03:42:40] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 260 seconds)
[03:43:06] *** Quits: ethrl (~morty@user/doforlove33) (Quit: WeeChat 3.0)
[03:43:08] <SnoopJ> I would say the annoyance is obvious, but the particular annoyances are less so
[03:43:12] <KirkMcDonald> But it's not as though these aspects of Python were done unintentionally, without their own reasons.
[03:43:28] <twb> KirkMcDonald: it does seem that way something :-)
[03:43:44] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[03:43:56] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:43:59] <twb> as in, bad design inherited from ABC
[03:44:08] <stealth_> twb by optimizer you mean adding ctypes to your code?
[03:44:14] <twb> and not fixed since because now everyone is just used to it
[03:44:25] <stealth_> its a feature
[03:44:29] *** Joins: Julian (~tos9@python/site-packages/Julian)
[03:44:38] <SnoopJ> bad design for what task(s)?
[03:45:28] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:45:31] <KirkMcDonald> stealth_: Optimizer in the sense of the component of the compiler which attempts to find more efficient expressions of the code that it is compiling.
[03:45:59] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[03:46:05] <KirkMcDonald> The CPython compiler does very little of this. Your typical C compiler does rather more.
[03:46:05] <grandrew> the problem with "python optimizer" is that Python has too much ambiguity
[03:46:18] <grandrew> you have to resolve these at run time
[03:46:20] *** Joins: sharperguy (~sharpergu@89.244.121.19)
[03:46:32] <stealth_> KirkMcDonald, aww, well ya you don't get that directly from cpython, maybe like pypy or others
[03:46:34] <grandrew> or use a really sophisticated automatic prover
[03:46:45] <meejah> pypy is a JIT
[03:46:45] *** Lord_of_Life_ is now known as Lord_of_Life
[03:46:54] <bpalmer> or use a fancy JIT compiler to do the compilation at runtime.
[03:47:02] <bpalmer> I'm not sure, however, what ambiguity you're thinking of in python.
[03:47:18] <twb> A straightforward example of a language specification that allows the optimizer to optimize is "a procedure's arguments are evaluated in an undefined order".  So e.g. cpython could execute f(a(), b()) linearly, and pypy could evaluate a() and b() in parallel on separate CPUs
[03:47:51] <KirkMcDonald> But, I'd say that these aspects of Python as a language can be traced, in most cases to two things: Semantic indentation, and assignment as implicit declaration.
[03:47:53] <grandrew> fancy "tracing" and heuristic-based JIT is good but will only get you so far
[03:47:53] <twb> But if you just code cpython and then the language is "whatever cpython does", it's too late and code might break
[03:48:00] <KirkMcDonald> Or at least to Python's specific approach to those things.
[03:48:09] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[03:48:34] <twb> KirkMcDonald: yeah and I absolutely concede there are synergies in some language decisions
[03:48:38] <stealth_> twb, there are some optimization added to cpython though. They are actually working on adding mor atm.
[03:48:39] <phao> SnoopJ, Thank you. I'll check it out.
[03:48:48] <SnoopJ> twb, and if you introduce a specification and it makes a decision, the same thing is also true? If you value backwards compatibility, that is.
[03:49:05] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:49:14] *** Quits: phao (~phao@2804:d45:8e7a:de00:151a:3b36:fee5:e1d1) (Quit: Leaving)
[03:49:18] <twb> SnoopJ: that's why it's important to get the specification right before there is any backwards to worry about compatibility with :-)
[03:49:35] <KirkMcDonald> twb: There's a general theme of having less visible syntax, which I think does a lot to further the general imprssion that Python is a clean language to look at.
[03:49:37] <grandrew> twb, in 2021 I would refrain from adding any "specifications" that make life of a developer harder for the compiler pleasure
[03:49:38] <Macuser> anyone know a Pyorbital alternative that works for geostationary sats
[03:49:40] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[03:49:41] <SnoopJ> twb, I believe the device you require to tut-tut at past-Guido is called a "time machine"
[03:50:08] <KirkMcDonald> Even if you crack open some language theory and can point out that this really doesn't make Python *simpler* in any real sense.
[03:50:12] <twb> grandrew: do you think people often rely on f(a(), b()) evaluating a before b?
[03:50:28] <grandrew> absolutely
[03:50:39] <KirkMcDonald> twb: If it is part of the language, someone relies on it.
[03:50:47] <grandrew> people read from left to right and from top to bottom
[03:50:47] <twb> KirkMcDonald: well I did say "often"
[03:50:56] <grandrew> any attempt to have a different logic is failed
[03:50:58] <SnoopJ> KirkMcDonald, a bug in users, perhaps
[03:51:05] <bpalmer> grandrew: well, that's not universal.
[03:51:26] <grandrew> well, what IS universal is that people read in a direction :)
[03:51:56] <grandrew> also that's why "graphical" languages are a failure - people are not 2D or 3D artists, it's a different skill from reading in a direction
[03:52:00] <twb> grandrew: there are boustrouphedonic scripts
[03:52:40] <twb> You read like ploughing a field -- right to left, then back left to right
[03:53:00] <SnoopJ> grandrew, someone had better tell UE5 devs (and Scratch educators, and...)
[03:53:12] <twb> mixed hebrew-english texts also require jumping around for loanwords
[03:53:13] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:53:46] <twb> (I'm nitpicking "everybody"; I have no problem with "most people")
[03:54:37] <stealth_> twb ppl also relie on `a()` and `b()` running before `f()`
[03:54:49] <twb> stealth_: I'm not suggesting that should change
[03:54:52] <grandrew> Personally I don't see a reason to learn omnidirectional reading and 3D skulpting just to express and idea
[03:55:05] <stealth_> twb, just saying
[03:55:15] *** Joins: sipeluru (~Thunderbi@222.124.217.58)
[03:55:33] <twb> stealth_: the example I gave is from Scheme, where evaluation order a and b of f(a,b) is undefined SPECIFICALLY so the compiler can parallelize
[03:56:08] <stealth_> twb it could be a gotcha in most cases cause ppl think it will get run when `f()` function is executed but its run on runtime
[03:56:10] <twb> And unless a or b has side-effects, the user doesn't care
[03:56:38] *** Joins: chenqisu12 (~peiycae@183.217.203.91)
[03:56:55] <grandrew> twb, code structure is integral to Python spec so there is no way to relax these "directional" constraints
[03:57:15] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 260 seconds)
[03:57:37] <twb> grandrew: I don't know what you mean by "code structure"
[03:57:39] <grandrew> moreover, I'm a strong proponent of causal way of writing code (having had extreme experience with things like PDDL)
[03:57:57] <InPhase> twb: (print('Hello'), print('World'))
[03:58:07] *** Quits: ham5urg (~ham5urg@p200300d167112900174709b88faf3c4b.dip0.t-ipconnect.de) (Quit: Leaving)
[03:58:31] <SnoopJ> InPhase, that's a demerit, citizen.
[03:58:39] <twb> "C if P else A" doesn't evaluate C first.
[03:58:43] <InPhase> At least I saved the newline tax.
[03:59:11] <InPhase> twb: Nor should it.
[03:59:48] <Macuser> you ever have those moments when you want to write elif's but you don't have an else case
[03:59:52] <InPhase> Logic.  print('Error') if print('Hello') else print('World')
[04:00:16] <nedbat> Macuser: you can use elif's without an else
[04:00:19] <Macuser> oh.
[04:00:20] <grym> Macuser: else: raise ValueError('something went real weird')
[04:00:28] <Macuser> true grym
[04:00:32] <spiderman> :D
[04:00:39] <Macuser> but that's wasted time
[04:00:42] <SnoopJ> It's sometimes useful to elide an `else` when your conditionals are all guards
[04:00:42] <Macuser> wasted typing
[04:00:43] <Macuser> lol
[04:00:44] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[04:00:46] <spiderman> no
[04:00:48] <stealth_> `else` is assumed
[04:00:50] *** Joins: Julian (~tos9@python/site-packages/Julian)
[04:00:51] <twb> Macuser: it's might be a good idea to have an "else raise canthappen" branch though, depending
[04:01:05] <Macuser> yeah i suppose
[04:01:12] <spiderman> whoa you guys raise exceptions ?
[04:01:13] <grym> Macuser: the mainenance sanity bonus for having the branch that's never called is worth it, for me
[04:01:43] *** Quits: hemstock (~hemstock@68.71.244.6) (Read error: Connection reset by peer)
[04:01:58] <Macuser> Pyorbital uses exceptions to skip over equations it doesn't feel like solving
[04:02:02] <Macuser> *shots fired*
[04:02:08] <SnoopJ> spiderman, sure, often
[04:02:15] <twb> spiderman: I use raise RuntimeException('this should be impossible') and raise NotImplementedError('FIXME: deal with this sometime') a lot
[04:02:16] <spiderman> thats crazyyy
[04:02:29] <InPhase> Macuser: Many times in my career a "This should never happen" commented branch in fact happens, because conditions end up violated.
[04:02:30] <grym> i've absolutely written `raise ValueError('this is impossible!') and seen it get executed
[04:02:34] <grym> InPhase: yeah that
[04:02:38] <InPhase> Macuser: So I add them a LOT.
[04:02:39] <grandrew> twb, structure I mean this: https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/
[04:02:40] <twb> i don't use things like raise StopIeration much
[04:02:46] <nedbat> spiderman: why is it crazy?
[04:02:49] <grym> twb: explicitly, anyway
[04:03:01] <Macuser> InPhase *surprised pikachu face*
[04:03:04] <InPhase> Macuser: The bigger the program, the more you should raise exceptions for things that should never happen.
[04:03:10] <Macuser> i never know how to spell that motherf*cking pokemon
[04:03:12] <spiderman> because raising exceptions implies that you are trying to write decent software
[04:03:34] <Macuser> i'm an EE
[04:03:35] * spiderman writes shit code
[04:03:37] <Macuser> I don't write decent software
[04:03:41] <Macuser> I code scripts to get job done
[04:03:42] *** Quits: Ilyu_ (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 260 seconds)
[04:03:44] <Macuser> lol
[04:03:45] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[04:03:48] <grym> Macuser: in matlab! and we liked it!
[04:03:53] <Macuser> oof
[04:03:58] <InPhase> Macuser: It helps when the job done is the job intended.  ;)
[04:04:11] *** Quits: mumixam (james@user/mumixam) (Quit: mumixam)
[04:04:26] <grym> Macuser: never have i ever seen mechE strain analysis excel worksheets >:)
[04:04:34] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[04:04:38] <Macuser> ew
[04:04:42] <stealth_> spiderman, best thing about python is, if you don't raise exception, most likely python will raise one for you.
[04:04:50] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 260 seconds)
[04:04:53] <Macuser> exactlyyy
[04:05:08] <InPhase> stealth_: The worst thing about Python is how often that's not true...
[04:05:11] <SnoopJ> is anybody familiar with SwigPyIterator, or where there might be some actual documentation of it?
[04:05:21] <newpy> stupid question, but how do I add 100 to a specific cell of a pandas dataframe, row 0 column 'C' ?
[04:05:39] <twb> grandrew: I wouldn't mind if it was "purely linear" if the compiler tracked what code could have side effects, and then was only free to implicitly parallelize the known-pure prats
[04:05:42] <SnoopJ> Gotten some confusing behavior out of trying to use it today, and now not even seeing it emitted into the test sample I'm trying to make.
[04:05:47] <grandrew> InPhase, that's why you and me are using asserts in production :))
[04:05:51] *** Joins: jazzy (~jaziz@user/jaziz)
[04:05:58] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[04:06:00] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[04:06:05] <newpy> it's indexed by datetime so I'd have to use iloc for row 0 (could do .loc[df.index[0]] maybe?)
[04:06:15] <stealth_> InPhase, what would you compare that to? with something like C your software will go in reverse!
[04:06:26] <newpy> ah that works, just tried it
[04:07:14] <SnoopJ> twb, Numba does some of this, but I'm guessing this is still coming from the place of "Python is bad, actually"
[04:07:55] <grandrew> twb, static analysis of Python is what I really want. I'm actually working on it
[04:07:58] <InPhase> stealth_: C++ provides more utilities for locking things down at compile time.  For Python, you have to work many times harder to manually check things and throw exceptions at runtime, or else your program will duck type its way into some absurd result.
[04:09:04] *** Quits: BlackBishop (dexter@user/blackbishop) (Ping timeout: 252 seconds)
[04:09:12] <twb> grandrew: remember stalin? :-)
[04:09:27] <grandrew> InPhase, yes! that's what I call ambiguity of the language. and there are better ways to resolve them than assert'ing all your code
[04:09:32] <InPhase> stealth_: In C, yes, you cross your fingers and hope the bits are properly aligned.  But that's why I am happy to not have to use C anymore.  :)
[04:10:01] *** Quits: Croves (~Croves@2804:58:c196:3800:b584:e62e:44c6:fcff) (Quit: Client closed)
[04:10:02] <InPhase> grandrew: I don't type the word assert anywhere.
[04:10:15] <InPhase> grandrew: Unless it's preceded by "static_"
[04:10:46] <stealth_> InPhase, it depends, i generally write excetion to better understand when problem does happen cause you normally wouldn't provide wrong data/type
[04:11:37] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[04:11:51] <grandrew> twb, please specify?
[04:12:35] <twb> grandrew: it was a WPO r4rs compiler
[04:12:55] <twb> grandrew: to compile itself took about 12 days on a pentium 4
[04:13:15] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:14:15] <grandrew> twb, alright that's that scheme compiler! totally forgot
[04:15:33] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 258 seconds)
[04:15:53] <grandrew> luckily we're well past the "pentium 4" performance and we know more-or-less how to parallelize symbolic execution or 128 cores or a modern CPU
[04:16:11] <grandrew> *of
[04:16:20] *** Joins: Axy (~Axy@user/axy)
[04:16:23] *** Quits: whatsupdoc (~whatsupdo@148.64.18.24) (Quit: Client closed)
[04:17:42] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[04:18:11] *** Joins: Lando-SpaceIzzle (~Lando-Spa@user/lando-spacepimp)
[04:18:38] *** Joins: Julian (~tos9@python/site-packages/Julian)
[04:20:18] *** Joins: nyanolantern (~nyany@dronebl/admin/cat)
[04:20:55] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[04:21:40] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:21:45] *** Quits: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 260 seconds)
[04:22:15] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[04:23:14] <grandrew> twb, are you familiar with any papers describing stalin's heuristics (or the absence of)?
[04:23:33] <twb> grandrew: sorry no
[04:23:36] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[04:23:40] <twb> grandrew: I haven't touched any of that stuff for a long long time
[04:23:44] <spiderman> stalin was a great man
[04:23:59] <twb> spiderman: we're talking about a compiler
[04:24:10] <spiderman> so am I
[04:24:16] <spiderman> they have a great man page
[04:24:18] <twb> https://en.wikipedia.org/wiki/Stalin_(Scheme_implementation)
[04:25:05] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:25:25] <grandrew> "the first compiler to perform whole-program polyvariant flow analysis", "one of the highest performing compilers for any language"
[04:25:41] <grandrew> https://engineering.purdue.edu/~qobi/research-statement.pdf
[04:26:26] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:28:07] <grandrew> "Nondeterministic Lisp as a Substrate for Constraint Logic Programming" AAAI 1993 - insane... why the hell is this forgotten?
[04:28:30] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[04:28:48] *** Quits: whoopla (~user@072-031-026-137.res.spectrum.com) (Quit: leaving)
[04:28:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[04:28:54] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:28:58] *** Quits: flokuehn (~flokuehn@muedsl-82-207-236-243.citykom.de) (Ping timeout: 258 seconds)
[04:29:31] <SnoopJ> Forgotten?
[04:30:32] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:30:34] <grandrew> SnoopJ, name any modern whole-program flow analysis compiler?
[04:30:36] <stealth_> there is a nice software called "shotgun", and you search for it and and wondering if you are going to be on some list after!
[04:30:40] <twb> grandrew: my bet is because programming language families cause knowledge "silos"
[04:30:43] *** Joins: flokuehn (~flokuehn@mue-88-130-54-225.dsl.tropolys.de)
[04:30:58] <twb> grandrew: like academics sharing info between russosphere and sinosphere and anglosphere
[04:31:05] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[04:31:07] <SnoopJ> grandrew, that seems like an entirely different proposition than "this idea has been forgotten."
[04:31:44] *** Gustavo6046_ is now known as Gustavo6046
[04:32:07] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[04:32:24] *** Joins: amrx (~amrx@access-63-249-98-253.static.cruzio.net)
[04:32:48] <twb> grandrew: gcc has some basic WPO
[04:33:14] *** Parts: MattWThomas (~macravin@161.38.68.34.bc.googleusercontent.com) ()
[04:34:22] <grandrew> D.Gnad, A.Torraba published the paper "Learning how to ground a plan" AAAI-19
[04:34:40] <SnoopJ> LLVM's ThinLTO might be in-bounds for the question, too
[04:34:46] *** Joins: vlm (~vlm@user/vlm)
[04:35:26] <SnoopJ> (but probably not)
[04:35:31] <grandrew> the idea is that with partial symbolic execution of first-order logic we can machine-learn thousands of "small applicability" heuristics that collectively show great solving power
[04:35:45] *** Quits: sharperguy (~sharpergu@89.244.121.19) (Ping timeout: 260 seconds)
[04:35:55] *** Joins: Julian (~tos9@python/site-packages/Julian)
[04:36:07] <aphysically> I'm looking back at my really old python projects I made early in grad school
[04:36:45] <aphysically> I totally forgot I made a sixth(!) order symplectic integrator
[04:37:28] *** Joins: sharperguy (~sharpergu@88.130.222.95)
[04:37:28] *** Joins: nomic2 (~nomic@185.198.243.184)
[04:37:32] <aphysically> I recall at the time that it got away with bigger step size but it basically evened out with how much slower it was
[04:37:37] <SnoopJ> aphysically, Pure Python? ouch :)
[04:37:42] <aphysically> yes pure python
[04:37:58] <aphysically> I rendered out a toy galaxy collision with it
[04:37:58] <InPhase> grandrew: chez scheme ended up surpassing stalin in performance anyway.  So the fact that stalin went unmaintained doesn't matter too much since chez is maintained.
[04:38:26] <aphysically> pure python (w/ numpy because well yeah)
[04:38:44] <SnoopJ> ah okay
[04:39:09] <aphysically> it's never going to get past a two body system without vectorization yeah
[04:39:59] <SnoopJ> I can't recall what kind of thingies we did for course reasons with Vlasov systems, but probably not sixth-order symplectic
[04:40:06] *** Quits: nomic (~nomic@185.217.117.204) (Ping timeout: 260 seconds)
[04:40:53] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[04:41:13] <aphysically> it actually wasn't very hard; if you programmed a verlet integrator in the right way it comes down to just augmenting it with the right constants
[04:41:29] <aphysically> but depending on how you write your verlet integrator I guess it could require a complete rewrite :P
[04:41:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[04:41:33] <SnoopJ> aphysically, and then you do collective effects and the CFL criterion eats your lunch :P
[04:42:08] <SnoopJ> although this is probably a lot less relevant in astrophysical plasmas than it is in charged beams
[04:42:35] <aphysically> I mean, to be fair my conclusion was basically "this was pointless in python" because the tradeoff didn't end up being worth it (higher order)
[04:42:49] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[04:42:58] <aphysically> so you could avoid CFL by just not using the sixth order integrator :P
[04:43:02] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:43:11] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[04:43:22] <grandrew> InPhase, it's not about the project, it's about the approach used in code analysis. I need to study these more. I wish they where better documented
[04:44:25] <stealth_> aphysically, did you not try to use something like pypy/cython?
[04:44:48] <stealth_> python is a nice prototyping language
[04:44:53] <aphysically> I think pypy wasn't where it needed to be with numpy support at th etime
[04:45:17] <aphysically> i vaguely recall one function I could speed up with numba though
[04:45:22] <aphysically> but it wasn't game-changing
[04:47:47] <stealth_> numpy is normally good, don't know about numba (never used it)
[04:48:14] *** Joins: donald1 (~donald@2a01:e0a:95e:7ca0:cdaf:8fef:7b1b:b22d)
[04:49:03] <donald1> Hello. When I use a library in the def __del__ like : lib.end() I have nonetype has no attribute "end()". what can I do?
[04:49:30] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Ping timeout: 276 seconds)
[04:49:36] <stealth_> donald1, what is `lib`?
[04:49:38] <grandrew> how do we make sure one can reuse the symbolic analysis code? so much stuff has been written by unusable
[04:50:12] <nedbat> donald1: __del__ methods are really tricky, and probably best avoided.  Did you write it?
[04:50:43] <stealth_> donald1, normally ppl don't depend on `__del__`, since when the reference to object on python reaches 0 its automatically garbage collected
[04:52:00] *** Joins: Julian (~tos9@python/site-packages/Julian)
[04:52:12] <donald1> stealth_: donald1, what is `lib`? => this is just an example
[04:52:18] <aphysically> SnoopJ: I think one of the things I didn't like at the time is I was sad there wasn't any good way to do automatic differentiation with numpy but it looks like there might have been movement in that area
[04:52:43] <SnoopJ> aphysically, yea, definitely. jax seems pretty great. I haven't really used it for anything, though
[04:52:56] <aphysically> I was just looking at jax's github yeah
[04:53:00] <stealth_> donald1, well the reason you are getting that error is because `lib = None` and you are trying to access `lib.end` that doesn't exist
[04:53:17] <donald1> lib is actually winproxy in:
[04:53:22] *** nomic2 is now known as nomic
[04:53:29] <donald1> return winproxy.CloseHandle(self._local_handle)
[04:54:05] <donald1> nedbat: a library uses __del__ that causes the error. in response I overwrite this del
[04:54:06] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 260 seconds)
[04:54:40] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[04:55:27] <stealth_> donald1, its getting sent `return None` after the `CloseHandle()` is run! Could better help if we could see acutal code.
[04:55:31] <donald1> do you want to see my code?
[04:55:38] <donald1> ok
[04:55:39] <stealth_> donald1, https://bpa.st/+python
[04:56:01] *** Joins: brabrax_ (~brabrax@user/brabrax)
[04:56:45] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 260 seconds)
[04:56:45] *** brabrax_ is now known as brabrax
[04:57:20] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[04:57:46] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[04:58:17] <donald1> stealth_ or better see my github: https://github.com/Gallopsled/pwntools/pull/1959/files
[04:58:30] *** Joins: mud (~mud@user/kadoban)
[04:58:46] <donald1> the errorr can only happend in the tube.py or process.py or windows_compat.py
[04:58:57] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:59:42] *** Quits: greknod28 (~grek@120.88.171.98) (Ping timeout: 260 seconds)
[04:59:47] <grym> donald1: unrelated, but this looks like a bug https://github.com/Gallopsled/pwntools/blob/27692de4829c03ace1c6ccb90cc109712092c054/pwn/toplevel.py#L92
[05:00:08] *** Quits: mgedmin (~mg@user/mgedmin) (Quit: ZNC - http://znc.sourceforge.net)
[05:00:29] <donald1> https://bpa.st/AIYQ
[05:00:42] <donald1> no
[05:00:48] <donald1> I forgot to remov ethis
[05:00:50] <donald1> this is a test
[05:01:11] <donald1> grym
[05:01:21] <grym> it creates a bug, i should say
[05:01:48] <donald1> I just removed these 2 lines and pushed again
[05:02:04] <donald1> grym: ah yes
[05:02:06] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:02:11] <donald1> because it call the bug
[05:02:15] <donald1> but this is not the bug
[05:02:44] *** Joins: mgedmin (~mg@user/mgedmin)
[05:04:01] *** Joins: The_Jag_ (~The_Jag@host-80-182-37-74.retail.telecomitalia.it)
[05:04:08] <nedbat> donald1: can you share the file with the failing __del__ ?
[05:04:16] *** Quits: HaMsTeRs (~Thunderbi@14-0-228-136.static.pccw-hkt.com) (Quit: HaMsTeRs)
[05:04:29] <donald1> nedbat: no thi sis a library
[05:04:46] <nedbat> donald1: we can find the files from the library, right?
[05:05:31] <donald1> this is it here https://github.com/hakril/PythonForWindows/blob/master/windows/winobject/handle.py
[05:05:58] <stealth_> donald1, i don't think you should use `__del__` its unreliable! you should have some type of `.close()` to close the handler, or use the `with` block with `__exit__` to properly clean up
[05:06:25] <nedbat> donald1: this line? https://github.com/hakril/PythonForWindows/blob/master/windows/winobject/handle.py#L113  what was the exception?
[05:06:35] *** Joins: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[05:06:40] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[05:06:40] *** Quits: The_Jag (~The_Jag@host-87-16-43-28.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[05:06:54] *** Joins: semeion (~semeion@user/semeion)
[05:08:33] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[05:08:50] <ldericher> in attrs, is `default=pathlib.Path(".")` fine as a default or should it be wrapped as `factory=lambda: pathlib.Path(".")`?
[05:09:41] <ldericher> … or is there an even better third way?
[05:09:44] *** Joins: Julian (~tos9@python/site-packages/Julian)
[05:09:44] <nedbat> ldericher: i think Path is immutable, so that is fine
[05:09:53] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 265 seconds)
[05:10:28] <SnoopJ> yea I just had a quick scan and didn't see anything that seems like a red-flag that would make sharing the default bad
[05:11:27] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[05:12:03] <ldericher> Oh right, it's about mutability. Guess I was overly cautious there. mutapath wouldn't exist if Path were mutable.
[05:12:48] <SnoopJ> ldericher, well, there are still cases where a type might have immutable instances, but you want a *different* one per instance
[05:13:04] <SnoopJ> ...probably.
[05:13:11] <Feuermagier> I'd like to precisely interface with another executable (read stdout, send to stdin) and automate inputs based on the prints. And suggestions for libraries?
[05:13:19] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Read error: Connection reset by peer)
[05:13:32] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:13:35] <SnoopJ> immutable → sharing is okay is probably more common by a lot
[05:14:38] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[05:14:50] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[05:14:55] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[05:15:26] <ldericher> Feuermagier, use subprocess module
[05:16:01] <ldericher> Feuermagier, subprocess.Popen should be most interesting to you
[05:16:38] <Feuermagier> ldericher, thx! - I'll take a look. I'm doing some time-sensitive binary exploitation.
[05:16:55] <ldericher> Feuermagier, sounds nasty :D
[05:17:28] <ldericher> How sensitive are we speaking?
[05:17:37] <Feuermagier> ldericher, 6 hours with gdb behind me. Got it all together now. Only need to do some calculations and I should have a shell.
[05:17:40] <Feuermagier> ldericher, 1 second
[05:17:52] <Feuermagier> nothing threaded yet
[05:18:09] <ldericher> alright, 1s should be manageable using python
[05:18:31] *** Quits: curiosity (uid511277@user/cypris) (Quit: Connection closed for inactivity)
[05:18:38] *** Quits: damonlynch (~ngaio@2601:245:c700:2c06:4c9e:a104:707e:d017) (Quit: Leaving)
[05:20:04] <Feuermagier> hmm, what I'd like best is python -> GDB -> pwnd_prog (stdin_of_pwnd_prog->python, stdout_of_pwnd_prog->python)
[05:20:59] <SnoopJ> Feuermagier, pexpect?
[05:21:15] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[05:21:19] <SnoopJ> or is this another executable started separately that you're attaching to with GDB?
[05:21:23] *** Quits: Rikem (~mike@user/rikem) (Ping timeout: 264 seconds)
[05:22:08] <Feuermagier> SnoopJ, atm I'm free to do as I please. Later on the program will run on an external machine and I'll interface with it using netcat (or similar)
[05:23:28] <donald1>  stealth_: donald1, i don't think you should use `__del__` its unreliable! you should have some type of `.close()` to close the handler, or use the `with` block with `__exit__` to properly clean up => even with no __del__ the code has same error
[05:23:43] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[05:23:56] <donald1> nedbat : the exception is here : https://github.com/hakril/PythonForWindows/blob/master/windows/winobject/handle.py#L117
[05:24:00] <spiderman> I'm trying to get function signatures to show up in my autocomplete, using deoplete + python-jedi but it doesn't open a window
[05:24:10] <donald1> AttributeError: 'NoneType' object has no attribute 'CloseHandle'
[05:24:10] <donald1> Exception ignored in: <function Process.__del__ at 0x000002812A617E50>
[05:24:10] <donald1> Traceback (most recent call last):
[05:25:12] <SnoopJ> Feuermagier, well, pexpect (or subprocess, even) can do what you're talking about if the Python process spawns the other one. If you want to 'steal' the stdin/stdout of the other process, that's a more sophisticated question I think
[05:25:40] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[05:25:48] <Feuermagier> SnoopJ, GDB might be able to gracefully do that. I'll search the manpage a bit
[05:27:13] <nedbat> donald1: have you reported this to the library authors?
[05:27:35] *** Joins: Fiji (~Fiji@user/fiji)
[05:28:10] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 260 seconds)
[05:28:29] <Feuermagier> I just got the suggestion to Python -> Network || GDB -> NetCat (offers stdin/out over network) -> pwn_prog. I think I'll try this
[05:28:46] *** Quits: audiobirb (~audio@2603-8081-1800-1546-0532-8ce8-9262-b426.res6.spectrum.com) (Ping timeout: 258 seconds)
[05:28:54] <SnoopJ> I'm having a little trouble following the question since it's mixing what you're currently working on and a hypothetical future version
[05:29:28] <Feuermagier> SnoopJ, nah, you helped me enough already. I'll ask again if I have something more concrete. Thx!
[05:32:24] *** Joins: mumixam (james@user/mumixam)
[05:33:21] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:34:55] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:37:58] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 258 seconds)
[05:38:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[05:40:00] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[05:40:01] *** Joins: fikran (~fikran@user/fikran)
[05:40:06] *** Quits: p-i-_ (~Ohmu@223.206.147.206) (Read error: Connection reset by peer)
[05:40:18] <stealth_> donald1, where it this `self._local_handle` suppose to come from?
[05:40:42] *** Joins: p-i- (~Ohmu@mx-ll-223.206.147-206.dynamic.3bb.co.th)
[05:42:16] <donald1> SnoopJ: good point I will replace windows by subprocess in the future
[05:42:30] <donald1> stealth_:  where?
[05:42:57] <stealth_> donald1, ya, like it doesn't seem to be defined
[05:43:07] <donald1> do you mean here if hasattr(self, "_local_handle"):
[05:43:07] <donald1>     return winproxy.CloseHandle(self._local_handle)
[05:43:28] <donald1> I did not code PythonForWindows library
[05:43:45] *** Joins: Julian (~tos9@python/site-packages/Julian)
[05:44:24] <donald1> stealth_: what should I do?
[05:45:10] *** Quits: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Ping timeout: 260 seconds)
[05:45:19] *** Quits: modlin (modlin@user/modlin) (Ping timeout: 265 seconds)
[05:45:34] <stealth_> donald1, as nedbat said, report it, see what the author says, could be typo for `_handle`
[05:45:53] <donald1> ok thank you
[05:46:55] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[05:47:43] *** Joins: modlin (modlin@user/modlin)
[05:49:02] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[05:49:17] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[05:54:50] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[05:55:14] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[05:56:47] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[05:57:25] *** Quits: hogarius (hogarius@id-222644.uxbridge.irccloud.com) (Ping timeout: 252 seconds)
[05:57:25] *** Quits: Lvl4Sword (sid483043@user/lvl4sword) (Ping timeout: 252 seconds)
[05:57:28] <spiderman> how do you do that thing where your program exposes some configuration through a text editor, like when you do 'systemctl edit', it opens a file in your $EDITOR and saves it when you quit
[05:57:59] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Ping timeout: 264 seconds)
[05:57:59] *** Quits: rburton (rburton@user/rburton) (Ping timeout: 264 seconds)
[05:57:59] *** Quits: debnet (sid330295@python/afpy/debnet) (Ping timeout: 264 seconds)
[05:57:59] *** Quits: kmikita (uid461814@id-461814.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[05:58:00] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (Ping timeout: 260 seconds)
[05:58:26] *** Joins: shawwwn_ (uid6132@helmsley.irccloud.com)
[05:58:31] *** Quits: ballingt (sid190590@id-190590.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[05:58:31] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 252 seconds)
[05:58:31] *** Quits: cuppajoeman (sid521943@id-521943.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[05:58:31] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 252 seconds)
[05:58:33] *** Joins: salimfadhley_ (sid31217@wikipedia/salimfadhley)
[05:58:35] *** Quits: fannagoganna (uid110488@id-110488.tinside.irccloud.com) (Ping timeout: 264 seconds)
[05:58:35] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[05:58:35] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (Ping timeout: 264 seconds)
[05:58:35] *** Quits: salimfadhley (sid31217@wikipedia/salimfadhley) (Ping timeout: 260 seconds)
[05:58:35] *** salimfadhley_ is now known as salimfadhley
[05:58:40] *** Quits: liam (sid7517@id-7517.helmsley.irccloud.com) (Ping timeout: 258 seconds)
[05:58:46] *** Joins: rburton (rburton@user/rburton)
[05:58:46] *** Joins: LyndsySimon (sid34452@lymington.irccloud.com)
[05:59:05] *** Joins: kmikita (uid461814@helmsley.irccloud.com)
[05:59:15] *** Joins: Lvl4Sword (sid483043@user/lvl4sword)
[05:59:17] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[05:59:19] *** Joins: raydeeam (uid325131@dgplug/raydeeam)
[05:59:23] *** Joins: debnet (sid330295@python/afpy/debnet)
[05:59:24] *** Joins: hogarius (hogarius@uxbridge.irccloud.com)
[05:59:25] <spiderman> ah nvm I polished up my google-fu. Trying to find stuff about editors and programs yields a lot of non-specific results
[05:59:32] *** Joins: sa (sid1055@tinside.irccloud.com)
[05:59:40] *** Joins: fannagoganna (uid110488@tinside.irccloud.com)
[05:59:44] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-d88f-6b90-d971-4130.res6.spectrum.com)
[05:59:48] *** Joins: yuesbeez (uid458354@tinside.irccloud.com)
[06:00:28] *** Joins: liam (sid7517@helmsley.irccloud.com)
[06:00:54] *** Joins: Julian (~tos9@python/site-packages/Julian)
[06:02:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:02:22] *** Joins: audiobirb (~audio@2603-8081-1800-1546-75fc-8bbf-b153-2ee6.res6.spectrum.com)
[06:04:06] <SnoopJ> spiderman, often: make a temporary file, put the stuff to be edited there, call the editor program, wait for that process, read the result that they saved to the temporary file
[06:05:11] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 258 seconds)
[06:05:30] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 260 seconds)
[06:05:54] *** Joins: damonlynch (~ngaio@static-68-235-44-23.cust.tzulo.com)
[06:06:10] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[06:08:15] *** Quits: modlin (modlin@user/modlin) (Ping timeout: 258 seconds)
[06:08:45] *** Joins: modlin (modlin@user/modlin)
[06:09:50] <spiderman> SnoopJ: I wasn't sure if there was anything like opening/closing fds, managing ttys, etc. Literally just fork and exec the editor and the child takes over the TTY?
[06:11:52] *** Joins: avikalp (~avikalp@223.184.20.242)
[06:12:00] *** Quits: donald1 (~donald@2a01:e0a:95e:7ca0:cdaf:8fef:7b1b:b22d) (Ping timeout: 260 seconds)
[06:12:36] *** Joins: bn_work (uid268505@uxbridge.irccloud.com)
[06:13:03] <stealth_> you sure you want to save on exit? what if the changes made were bad?
[06:13:52] *** Joins: cuppajoeman (sid521943@id-521943.hampstead.irccloud.com)
[06:13:54] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 260 seconds)
[06:15:35] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:17:37] *** Joins: Julian (~tos9@python/site-packages/Julian)
[06:18:47] *** Joins: djapo (~archangel@user/djapo)
[06:20:44] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Remote host closed the connection)
[06:20:53] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[06:20:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:22:41] *** Joins: Buliarou1 (~gypsydang@185.207.166.57)
[06:22:46] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[06:23:53] <avikalp> Hi everyone! I just found out about this irc channel from Python.org. Glad to be here :)
[06:25:03] *** Quits: zuQe8 (~zuQe8@cpc105068-sgyl40-2-0-cust196.18-2.cable.virginm.net) (Quit: Ping timeout (120 seconds))
[06:25:23] *** Joins: zuQe8 (~zuQe8@cpc105068-sgyl40-2-0-cust196.18-2.cable.virginm.net)
[06:25:34] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[06:25:40] *** Quits: BSaboia (~bsaboia@187.19.138.198) (Quit: This computer has gone to sleep)
[06:27:10] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[06:27:15] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[06:28:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[06:28:39] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[06:30:14] <SnoopJ> spiderman, here's how git does it: https://git.io/JiLUW + https://git.io/JiLUH (and from there into OS-specific code to do whatever needs doing with the fds)
[06:30:48] *** Quits: yuesbeez (uid458354@tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:33:20] *** Joins: Julian (~tos9@python/site-packages/Julian)
[06:36:23] *** Joins: Viewday3 (~Viewday@user/viewday)
[06:36:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[06:38:09] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 258 seconds)
[06:38:09] *** Viewday3 is now known as Viewday
[06:38:10] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[06:39:18] *** Quits: ExpiredKebab_ (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[06:41:45] *** Quits: mawk (~mawk@wireguard/contributor/mawk) (Ping timeout: 260 seconds)
[06:42:42] *** Quits: shawwwn_ (uid6132@helmsley.irccloud.com) ()
[06:43:03] *** Joins: shawwwn (uid6132@id-6132.helmsley.irccloud.com)
[06:44:37] *** Joins: mawk (~mawk@wireguard/contributor/mawk)
[06:45:07] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[06:45:17] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-1127-9ad2-b854-064e.res6.spectrum.com)
[06:47:10] *** Joins: Celeo (~Celeo@user/celeo)
[06:49:30] *** Joins: cheater (~Username@user/cheater)
[06:49:34] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[06:49:41] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[06:49:45] *** Quits: Celeo (~Celeo@user/celeo) (Client Quit)
[06:50:29] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:50:48] *** Quits: c4017__ (~c4017@S0106c0943583f893.vf.shawcable.net) (Read error: No route to host)
[06:51:08] *** Joins: Julian (~tos9@python/site-packages/Julian)
[06:55:49] *** Joins: node1 (~node1@user/node1)
[06:56:21] *** Quits: sipeluru (~Thunderbi@222.124.217.58) (Quit: sipeluru)
[06:56:22] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[06:56:33] <node1> Hi
[06:57:41] *** Parts: p-i- (~Ohmu@mx-ll-223.206.147-206.dynamic.3bb.co.th) (Leaving...)
[06:58:12] <node1> Could anyone helps me to know the basic principal of REST API?
[06:59:47] *** Quits: audiobirb (~audio@2603-8081-1800-1546-75fc-8bbf-b153-2ee6.res6.spectrum.com) (Ping timeout: 264 seconds)
[07:00:52] *** Joins: audiobirb (~audio@2603-8081-1800-1546-2cd9-0d64-4f9c-e2f6.res6.spectrum.com)
[07:06:23] *** Quits: audiobirb (~audio@2603-8081-1800-1546-2cd9-0d64-4f9c-e2f6.res6.spectrum.com) (Ping timeout: 264 seconds)
[07:06:42] *** Quits: nomic (~nomic@185.198.243.184) (Quit: Leaving)
[07:08:54] <t2mkn> node1 As of me it is nothing but a web module or package. and it is good to give short and sweet json info on demand.
[07:08:56] *** Joins: Julian (~tos9@python/site-packages/Julian)
[07:10:44] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 258 seconds)
[07:11:19] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[07:12:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[07:14:06] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[07:14:34] *** Gustavo6046_ is now known as Gustavo6046
[07:16:51] <node1> Basically i'm looking to know it's principal so that i could think and write good test cases
[07:17:40] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[07:17:50] <parv> node1, https://duckduckgo.com/?t=ffab&q=rest+api+what&atb=v266-1&ia=web ?
[07:19:35] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 264 seconds)
[07:19:44] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-d88f-6b90-d971-4130.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[07:22:14] *** Joins: yeirr (~yeirr@user/yeirr)
[07:25:15] *** Joins: Julian (~tos9@python/site-packages/Julian)
[07:26:30] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[07:26:53] <Feuermagier> How do I socket.receive() until there is no more data to be receiled?
[07:27:06] <Feuermagier> received*
[07:27:58] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[07:29:17] <twb> Feuermagier: isn't it something along the lines of "while chunk := sock.receive() != sock.EOF"
[07:29:35] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 260 seconds)
[07:29:35] *** jmiehe1 is now known as jmiehe
[07:29:52] <Feuermagier> I don't have an EOF (I think). The other side is waiting for input after it wrote a sentence
[07:30:26] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[07:30:42] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[07:32:37] <Feuermagier> I have worked around the issue. But thx!
[07:34:30] *** Joins: et_ (~et@user/et)
[07:35:13] *** Joins: elkclone (~elkclone@user/elkclone)
[07:35:25] *** Quits: et (~et@user/et) (Ping timeout: 260 seconds)
[07:35:25] *** et_ is now known as et
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:47] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:36:59] *** Quits: Linux77 (~Linux7_7@186.233.183.123) (Ping timeout: 264 seconds)
[07:37:57] <stealth_> Feuermagier, what module you using? python stdlib stocket does not have `socket.receive`
[07:38:23] <Feuermagier> recv() ; sry
[07:38:49] <stealth_> Feuermagier, normally its `data = socket.recv(); if not data: break`
[07:39:06] *** Quits: Lando-SpaceIzzle (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 258 seconds)
[07:39:57] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[07:40:42] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[07:41:15] *** Quits: reset (~reset@user/reset) (Quit: reset)
[07:42:01] *** Joins: Julian (~tos9@python/site-packages/Julian)
[07:42:57] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[07:43:35] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 260 seconds)
[07:43:36] <stealth_> Feuermagier, you shouldn't just receive all the data btw, maybe like `data = socket.recv(1024)` parse the header first, make sure its save befor getting all the data
[07:43:55] *** Joins: Sadale (~Sadale@user/sadale)
[07:44:05] <stealth_> safe*
[07:44:38] <Feuermagier> stealth_, I'm receiving a redirected stdin for a binary exploitation project. Nothing is safe and the intention is to blow it up :P
[07:45:23] *** Joins: analoq (~yashi@user/dies)
[07:46:25] <stealth_> Feuermagier, i meant more like, make sure you have the space to store the data! like what if someone sends you 100GB and you only have 2GB ram?
[07:47:09] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[07:47:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[07:48:40] <Feuermagier> stealth_, fair point. But I have the executable here and am disassembling it. (I am host and client. This is just to make GDB usable with timed inputs)
[07:49:22] *** Joins: fikran (~fikran@user/fikran)
[07:50:47] <stealth_> Feuermagier, i see, are you using unix socket?
[07:50:57] <Feuermagier> stealth_, netcat
[07:51:30] <stealth_> Feuermagier, o, its on a differnet system?
[07:51:54] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 260 seconds)
[07:52:39] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-1127-9ad2-b854-064e.res6.spectrum.com) (Quit: Leaving.)
[07:54:40] <Feuermagier> stealth_, atm it's on my system. As in: I have the binary here. The task is to find a bug in the binary and exploit it to spawn a shell. Once I know how to exploit it reproducably (that's what python is for) I'll connect to my university server, where the same binary is hosted on a system not owned by me (they are using netcat on the other side, too) with the shell I then spawn I can access a program that generates a flag, prooving I have broken
[07:54:40] <Feuermagier> into the program.
[07:56:38] <stealth_> Feuermagier, sounds nefarious
[07:57:23] *** Quits: avikalp (~avikalp@223.184.20.242) (Ping timeout: 264 seconds)
[07:57:44] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[07:57:53] <Feuermagier> stealth_, well, that's the point of the course.
[07:58:29] *** Joins: Julian (~tos9@python/site-packages/Julian)
[08:00:23] <Feuermagier> stealth_, we were promised "leet haxxor skillz" for an ungodly amount of work. I'm 10h into this assignment already (1 of 3 for this week). The flag is submitted for grade bonus once you've hacked it.
[08:02:25] <stealth_> Feuermagier, if thats what you are into
[08:03:38] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[08:03:46] *** Joins: node1 (~node1@user/node1)
[08:03:53] <Feuermagier> stealth_, it's rather nice. essentially you get incredibly hard to understand C programs with some weird bug and then you have a week to break it.
[08:03:55] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (Ping timeout: 252 seconds)
[08:05:42] *** Quits: jazzy (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[08:07:17] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[08:08:22] <node1>  In REST API there is principal call "stateless"  i believe it represent scalability (without impacting other request) , which also represent ""Representational State Transfer""
[08:08:27] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[08:10:08] *** Quits: Guddu (~Guddu@200-90-225-124.baf.movistar.cl) (Quit: Leaving)
[08:14:47] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 264 seconds)
[08:15:24] *** Joins: Julian (~tos9@python/site-packages/Julian)
[08:18:39] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-ece3-cc37-fd43-8bc7.res6.spectrum.com)
[08:19:38] *** Joins: avikalp (~avikalp@223.184.20.242)
[08:19:47] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[08:20:19] *** Joins: BSaboia (~bsaboia@187.19.138.198)
[08:20:19] <stealth_> node1, REST is just internet version of create a file, write, read, delete. They are all basically the same, just different lingo
[08:20:47] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 264 seconds)
[08:22:40] <node1> OKay, but here i'm just trying to understand the `stateless` and `Representational State Transfer` , and how it's different or similar from each other
[08:22:54] *** Quits: BSaboia (~bsaboia@187.19.138.198) (Client Quit)
[08:23:11] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:24:03] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[08:24:09] *** Joins: BSaboia (~bsaboia@187.19.138.198)
[08:24:29] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[08:25:36] <stealth_> node1, you can how you can access say `helloworld.txt` from any language? like C, Python... basically that... you can access REST API from any language it doesn't need to know what langauge you are using to access it.
[08:25:50] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[08:25:53] *** Quits: raxor2k (~raxor2k@3.109-247-153.customer.lyse.net) ()
[08:25:53] *** Quits: Awoobis (A_D@libera/staff/dragon) (Ping timeout: 624 seconds)
[08:26:11] *** Quits: daimbag (daimbag@2607:5300:60:21b::1) (Ping timeout: 264 seconds)
[08:26:13] *** Quits: chenqisu12 (~peiycae@183.217.203.91) (Quit: Leaving)
[08:26:22] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:26:31] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:26:36] *** Quits: modlin (modlin@user/modlin) (Ping timeout: 265 seconds)
[08:27:13] <stealth_> node1, if you haven't you can read https://www.codecademy.com/articles/what-is-rest
[08:27:32] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[08:29:11] *** Joins: stranac (~stranac@195.29.239.126)
[08:29:46] *** Quits: yeirr (~yeirr@user/yeirr) (Ping timeout: 252 seconds)
[08:30:00] *** Quits: emerent (~quassel@p200300cd574855c8ba27ebfffed28a59.dip0.t-ipconnect.de) (Remote host closed the connection)
[08:30:11] *** Quits: amrx (~amrx@access-63-249-98-253.static.cruzio.net) (Remote host closed the connection)
[08:31:23] *** Joins: Julian (~tos9@python/site-packages/Julian)
[08:31:45] *** Joins: emerent (~quassel@p200300cd574855c8ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:32:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:33:44] *** Joins: daoudr (~daoudr@2a02:1205:c681:1650:fcd8:ad82:fb0e:c643)
[08:34:39] <node1> okay thanks
[08:34:56] *** Joins: modlin (~modlin@user/modlin)
[08:35:28] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[08:36:21] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[08:36:40] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[08:36:43] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[08:36:47] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[08:38:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[08:39:35] *** Quits: modlin (~modlin@user/modlin) (Ping timeout: 260 seconds)
[08:39:38] *** Joins: _Ev (~ev@user/ev/x-8999918)
[08:42:17] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[08:42:33] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 265 seconds)
[08:42:55] *** Joins: srhm (~srhm@user/srhm)
[08:43:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[08:43:28] <node1> My POST request does not return 201 status code. May i know the reason?
[08:43:28] *** Quits: aoei (aoei@nethackscoreboard/aoei) (Quit: reboot)
[08:43:40] *** Quits: junktext_ (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 260 seconds)
[08:44:17] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[08:44:47] *** Quits: emf_ (~emf@2620:10d:c090:400::5:70ff) (Ping timeout: 264 seconds)
[08:45:15] *** Joins: jazzy (~jaziz@user/jaziz)
[08:46:20] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[08:46:55] <bpalmer> because the server chose to return a different response code.
[08:47:01] <node1> Mybe i need to define inside my code
[08:47:02] <stealth_> node1, what api you using? it depends on the api design
[08:47:23] <node1> OKay now it works since i need to mention the return as 201
[08:47:24] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[08:47:35] <node1> I'm using flask
[08:47:50] *** Joins: srhm (~srhm@user/srhm)
[08:48:01] *** Joins: Julian (~tos9@python/site-packages/Julian)
[08:48:11] *** Quits: yac (~user@user/yac) (Remote host closed the connection)
[08:48:50] <node1> The goal is to govern the REST API principal, as i'm not using through obeject oriented way, just simple functions which govern REST API
[08:49:02] <node1> principals
[08:49:46] *** Joins: cfel (~cfel@104.167.156.180)
[08:49:53] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[08:50:35] <deniska> the original paper on REST doesn't even mention http, carefully using http statuses is something people latched on later
[08:50:56] <deniska> just return a status ≥ 400 if something went wrong and you're fine :)
[08:51:08] *** Joins: yac (~user@user/yac)
[08:51:46] <deniska> knowing what exactly went wrong (or right) requires examining the response and the documentation of your API anyway
[08:52:27] <stealth_> the web has always been wild west. (also whats best about it)
[08:53:02] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[08:53:22] <deniska> 403. Am I not authenticated? Am I not authorized? We'll never know from the status code alone
[08:53:52] <stealth_> not really a fan on REST since the whole GET/PUT/DELETE are header data! and those are not encrypted (normally)!
[08:54:15] <deniska> stealth_: every part of http request are encrypted in the equal fashion
[08:55:57] *** Quits: BSaboia (~bsaboia@187.19.138.198) (Quit: This computer has gone to sleep)
[08:57:07] <deniska> (and method goes before headers)
[08:57:13] <stealth_> deniska, you mean https, i am still in the http 0.9 days
[08:57:38] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[08:58:04] <deniska> in https ssl (well, tls) connection gets established before anything http-related get transfered
[08:58:20] <stealth_> i was thinking of ip header
[08:58:37] <stealth_> suppose its TCP header
[08:59:03] <deniska> an unsophisticated attacker can only see a target IP address
[08:59:45] *** Joins: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e)
[09:00:18] <Jong> How do I do something like call foo(a,b) if the variable b exists, otherwise just call foo(a)
[09:00:20] *** Joins: d1b_ (~db@user/d1b)
[09:00:31] *** Quits: d1b (~db@user/d1b) (Ping timeout: 252 seconds)
[09:00:39] <deniska> Jong: what do you mean by "exists"? Isn't None?
[09:00:46] *** d1b_ is now known as d1b
[09:01:33] <stealth_> jong `a=None, b=None` `if b: ... else: # a`
[09:01:34] <Jong> how can I express that in a single line instead of an if else statement where I test the if 'b' in locals()
[09:01:41] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[09:02:00] <bpalmer> Jong: why don't you simply assign None to b at the very top ?
[09:02:11] *** Quits: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e) (Client Quit)
[09:02:31] <Jong> I could do that yes
[09:02:43] <Jong> good idea
[09:03:18] <stealth_> Jong, you can also `if b: foo(b) else: foo(a)` if you know the value ahead of time.
[09:03:28] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:03:35] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:950f:23bc:c240:5fe1) (Read error: Connection reset by peer)
[09:03:44] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[09:03:44] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[09:04:03] *** Quits: horseface (~horseface@user/horseface) (Quit: STOP, DROP, AND ROLL. IT IS HAMMER TIME!!!)
[09:06:10] *** Joins: Julian (~tos9@python/site-packages/Julian)
[09:06:32] *** Gustavo6046_ is now known as Gustavo6046
[09:06:41] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[09:07:35] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[09:07:38] *** Joins: mei (~mei@user/mei)
[09:08:08] *** Quits: cfel (~cfel@104.167.156.180) (Quit: Lost terminal)
[09:08:52] *** Joins: aoei (aoei@nethackscoreboard/aoei)
[09:09:34] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[09:09:58] <Jong> setting the variable to None at the start of the function the call is in sounds like the best idea
[09:10:11] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-2cdd-ee6c-360d-1986.res6.spectrum.com) (Quit: jarthur_)
[09:10:31] *** Joins: dvx (~dvx@185.63.97.64)
[09:10:51] *** Joins: horseface (~horseface@user/horseface)
[09:11:00] <Jong> Question, if I see a bug that I can fix with one line, but it's in someone else's code, is it a problem if I commit the one line change to master?    I ask because if everyone made a commit per one-line change, there'd be far too many commits
[09:11:14] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[09:11:59] <stealth_> Jong, btw, should check `if b is None:` vs `if b:` sometimes you pass `0` and value.
[09:12:17] <deniska> Jong: depends on whatever rules about contribution you agreed upon
[09:12:21] <Jong> stealth_  good point
[09:12:31] <Jong> deniska  there are no explicit rules
[09:12:59] <Jong> Maybe subconsciously I just want to show off that I'm studying the code in the odd hours of the night heh
[09:13:08] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[09:13:52] *** Joins: furrykef (~furrykef@ip68-229-192-239.ok.ok.cox.net)
[09:14:24] <deniska> that's not exactly the right signal to make
[09:14:31] <stealth_> Jong, i am just correcting my own mistake. when you get all tired you start rambling weird stuff.
[09:15:55] *** Quits: node1 (~node1@user/node1) (Ping timeout: 256 seconds)
[09:17:05] <furrykef> I'm parsing a text file and I would like to read in all the following lines until I encounter the next line that does *not* start with a space, which I would like to remain in the buffer until a later time. Is there a way to do this?
[09:17:15] <furrykef> I tried using peek(1), but it's not defined for this kind of stream.
[09:17:24] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[09:18:15] <stealth_> furrykef, you can `open(buffering=1)` that should read line by line
[09:18:44] *** Joins: upsala (~zcb@185.213.155.160)
[09:19:03] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[09:20:02] <furrykef> stealth_: But that won't give me a peek method, will it?
[09:20:29] <stealth_> furrykef, i don't really get why you are using peek
[09:21:24] <furrykef> So I can tell if the next line starts with a space or not without removing it from the buffer
[09:22:01] *** Quits: visl (visl@user/visl) (Ping timeout: 252 seconds)
[09:22:35] <stealth_> furrykef, why not just read line by line, and see if it starts with " " or not? parse or not accordingly
[09:23:00] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[09:23:22] <furrykef> Because if it doesn't start with a space, I don't want to deal with it till later
[09:23:30] <furrykef> Here, lemme explain the structure I'm trying to use...
[09:23:43] *** Joins: Gerula_ (~Gerula@user/gerula)
[09:23:43] *** Quits: Gerula (~Gerula@user/gerula) (Killed (lead.libera.chat (Nickname regained by services)))
[09:23:43] *** Gerula_ is now known as Gerula
[09:23:57] *** Joins: visl (visl@user/visl)
[09:23:59] <stealth_> furrykef, you can store that line in a list or something! then parse at the end
[09:24:16] *** Joins: Julian (~tos9@python/site-packages/Julian)
[09:24:20] *** Quits: ckdCreations (~ckdCreati@147.55.133.137) (Read error: Connection reset by peer)
[09:24:41] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[09:24:54] <furrykef> Here's my text file: https://raw.githubusercontent.com/furrykef/oedict/main/lexicon.txt
[09:25:27] <furrykef> You can see each dictionary entry begins with an unindented line, then there are one or more indented lines that make up the definition. The next dictionary entry is the next unindented line
[09:26:15] <furrykef> So I'm trying to make an outer loop where each iteration is "read a whole dictionary entry", with an inner loop that is "read the (indented) dictionary definition"
[09:27:03] *** Joins: yeirr (~yeirr@user/yeirr)
[09:27:07] <furrykef> There is a name for this style of processing, but its name escapes me at the moment..
[09:27:28] <stealth_> furrykef, i got what you were saying, i am just saying, read file once, parse and store data for later.
[09:27:35] *** Quits: horseface (~horseface@user/horseface) (Quit: STOP, DROP, AND ROLL. IT IS HAMMER TIME!!!)
[09:28:27] <furrykef> Yeah, maybe...
[09:29:04] *** Joins: horseface (~horseface@user/horseface)
[09:30:07] <stealth_> furrykef, actually do not use the `buffering=1` you can leave the default buffering for `open()` python is really good for that.
[09:30:23] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 264 seconds)
[09:30:36] <furrykef> The default behavior for text files is the same as buffering=1, I believe
[09:30:55] <stealth_> there lines are so small, it doesn't make much sense in enableing line buffering
[09:31:51] <stealth_> furrykef, where did you read that?
[09:33:24] <furrykef> Oh, whoops, I misread. It's only true for stuff like tty's
[09:35:28] <hendry> how do I show 2^64 from the python cli?
[09:35:39] <stealth_> normally python does 8k buffering size, and within that you can read line by line, when python is running out of buffer it will get more data! so its dynamic and well optimized for reading fast vs in small amount (slow).
[09:35:43] *** Joins: djapo (~archangel@user/djapo)
[09:38:33] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[09:39:54] *** Quits: steam (~steam@user/steam) (Remote host closed the connection)
[09:40:37] *** Joins: steam (~steam@user/steam)
[09:40:58] <stealth_> hendry, not sure what you are asking, do you mean 2**64 ?
[09:41:36] <hendry> stealth_: oh yeah
[09:43:08] *** Joins: Julian (~tos9@python/site-packages/Julian)
[09:43:17] <dba> does anybody here working or building program with python a realtime OS, can python be used on a realtime OS?
[09:43:22] <hendry> stealth_: what's the python way of running that on the cli and returning the answer the stdout?
[09:44:32] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[09:45:36] *** Joins: chele (~chele@user/chele)
[09:45:45] <stealth_> hendry, cli as in running python on terminal? `>>> 2**64` ?
[09:47:09] *** Joins: carl- (~carl-@185.103.188.130)
[09:47:11] *** Quits: seednode4 (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:47:54] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[09:47:54] *** Joins: seednode4 (~seednode@user/seednode)
[09:48:25] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[09:48:55] <stealth_> hendry, maybe you are talking about https://realpython.com/command-line-interfaces-python-argparse/ ? cli means a lot of things to me.
[09:49:12] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[09:49:34] <stealth_> hendry, is there something specific you are trying to find out?
[09:49:35] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 264 seconds)
[09:49:39] <hendry> stealth_: i figured it out, i needed a "print" python -c "print (64**11)"
[09:50:32] *** Joins: kosh (~kosh@user/kosh)
[09:51:25] *** Quits: Mindscape (~Lindis@user/lindis) (Remote host closed the connection)
[09:51:30] <stealth_> hendry, ok, what does that number suppose to be for?
[09:52:05] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:53:22] <hendry> stealth_: number of possible youtube videos... haha
[09:54:09] <pr100> I have numpy array N rows by M columns, where the rows have integer data. One of the columns in each row is represents an  id and I know that all the ids are in the range [1, K]. I want to make a new array K x M, where the i'th row is the data from the original matrix where the id is i. Any rows with missing data should be all zero. I can easily
[09:54:10] <pr100> write a loop to iterate over the rows of the original to populate the target, but is there are vectorised way of doing it?
[09:54:11] <stealth_> hendry, ya, never would have guessed that one :p
[09:54:57] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[09:55:16] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:11ee:20a2:9e70:232e)
[09:55:40] *** Quits: rfm (~rfm@user/rfm) (Read error: Connection reset by peer)
[09:56:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[09:57:09] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[09:58:23] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[09:58:43] *** Joins: fikran (~fikran@user/fikran)
[09:59:07] *** Joins: Julian (~tos9@python/site-packages/Julian)
[09:59:20] *** Joins: ckeshav (~keshavcha@103.66.50.47)
[09:59:42] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[09:59:55] <stealth_> dba realtime os?
[10:01:12] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[10:02:12] <stealth_> dba there was a project like that floating around, not sure what the progress on it is.
[10:02:21] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[10:02:44] *** Joins: de-facto (~de-facto@user/de-facto)
[10:03:16] *** Parts: furrykef (~furrykef@ip68-229-192-239.ok.ok.cox.net) (Leaving)
[10:04:14] <dba> stealth_ what the project called?
[10:04:21] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[10:04:34] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:04:35] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 264 seconds)
[10:04:47] <stealth_> dba, no clue, you can search for "python os" or something, not sure what this realtime is about
[10:04:47] <spiderman> its called relos
[10:06:03] <dba> spiderman, can you share the url as I am not able to find it on google
[10:06:06] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:07:03] <spiderman> https://www.relos.org
[10:07:05] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 260 seconds)
[10:07:24] *** Joins: palasso (~palasso@user/palasso)
[10:07:48] *** Joins: sudomann (~sudomann@2601:543:100:2e3:914a:5d9:5784:eec5)
[10:08:03] <spiderman> does anyone have advice on debugging an ncurses program? pdb.set_trace is buggy because the term is messed with by curses
[10:09:01] <jeho> can try remote debug with pycharm
[10:09:14] <dba> stealth_ as there is realtime application there are alos realtime operating systems
[10:09:42] <stealth_> dba aren't os already realtime?
[10:09:52] <dba> nop
[10:10:58] <stealth_> dba how would realtime os be different?
[10:11:00] *** ckeshav is now known as ckeshav_
[10:11:42] <dba> stealth_ it process data as it comes in, typically without buffer delays.
[10:12:34] <stealth_> dba, well you can disable buffer, which would just make things slower
[10:12:39] *** ckeshav_ is now known as ckeshav__
[10:13:22] <supakeen> stealth_: A realtime OS (mostly a scheduler usually) guarantees all threads get the same runtime at the same time, no getting rescheduled by the OS :)
[10:13:46] *** ckeshav__ is now known as ckeshav
[10:13:50] <supakeen> If you have really time critical things (say hardware that must receive something every few milliseconds) it's a thing.
[10:14:23] <supakeen> Interrupt handling also tends to be different.
[10:14:24] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[10:14:28] <stealth_> well current os already do that and more
[10:14:38] <stealth_> well i am thinking of linux
[10:14:38] <supakeen> They don't give you the time guarantees.
[10:15:04] *** Joins: Julian (~tos9@python/site-packages/Julian)
[10:15:05] *** Joins: visl_ (visl@user/visl)
[10:15:06] <stealth_> that has to do with moderning cpu being dynamic to save power
[10:15:27] <supakeen> No, it has to do with the scheduler.
[10:15:55] *** Quits: visl (visl@user/visl) (Remote host closed the connection)
[10:16:11] *** Quits: ckeshav (~keshavcha@103.66.50.47) (Changing host)
[10:16:11] *** Joins: ckeshav (~keshavcha@user/ckeshav)
[10:16:13] <supakeen> (more so)
[10:16:25] <raek> dba: I don't know exactly what you are looking for, but there are python implementations for microcontrollers (micropython and circuitpython) that basically only run python directly in the CPU without much of an OS
[10:16:45] *** Joins: Tas-sos (~Tas-sos@46-219-149.adsl.cyta.gr)
[10:17:09] <stealth_> supakeen, not sure what you mean by time guarantee, its not like schedular say how long a task can run or not!
[10:17:27] <stealth_> its more to do with over/under clocking cpu
[10:17:38] <raek> but I think those two projects focus more on making microcontrollers easier to program by using Python instead of C, rather than trying to get real-time guarantees into Python
[10:18:05] *** Joins: mickey8 (~user@user/mickey)
[10:18:10] <supakeen> stealth_: and that's the entire point, a RTOS is optimized to switch tasks very fast and do so in a regular way instead of determining if a process is 'blocked on i/o' or the other heuristics used by Linux.
[10:18:46] <supakeen> MicroPython still has a GC and as such can't be named 'realtime' (though even without the guarantee it gets pretty close, I've tried ;))
[10:19:46] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[10:20:06] <stealth_> supakeen, blocked io? linux does async io now.
[10:20:27] <supakeen> stealth_: I think you should read up on the Linux scheduler :)
[10:20:30] *** Quits: avikalp (~avikalp@223.184.20.242) (Ping timeout: 260 seconds)
[10:21:25] *** Joins: pluri (~pluri@user/pluri)
[10:21:31] <supakeen> Another common difference is that in a RTOS your tasks don't need to speak to the kernel to access hardware.
[10:21:37] <supakeen> So you don't have context switches.
[10:21:42] *** Joins: Naan (~Naan@user/naan)
[10:21:50] <supakeen> (which introduce time problems etc)
[10:22:10] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 260 seconds)
[10:22:38] <supakeen> e.g. there is no concept of "user space" and "kernel space", there is no time sharing, you don't have extensive processes.
[10:22:48] <dba> raek, supakee, I guess it is not possible to build an app which is sensitive to time constraints with python as python does a  hash table lookup whenever you are trying to access a variable. Please correct me if I am wrong
[10:23:08] <dba> and that would take unpredictable time
[10:23:42] <pluri> does anyone know how to force python to print traceback errors, when something is suppressing them? I'm trying to start a flask app, and it fails with just "Error: While importing 'app', an ImportError was raised." I have already tried setting the FLASK_ENV to `development`
[10:24:19] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[10:24:29] <aphysically> slightly unrelated, but I find exceptions suppressed in threads/during POpen one of the most annoying things
[10:24:31] <stealth_> supakeen, well thats a good way to crash the system, os is normally there to help manage
[10:24:34] <supakeen> dba: You can likely meet your time constraints but you can only find out by trying.
[10:24:39] <aphysically> the thread thing isn't a very big deal I just join the exceptions later
[10:24:44] <aphysically> but the popen one is actually pretty annoying
[10:24:47] <supakeen> stealth_: And the point in an RTOS is that the OS doesn't manage (because that takes time) :)
[10:24:51] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[10:25:33] <supakeen> And yes, that's a different approach that's not good for a general computer.
[10:25:38] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:25:46] <stealth_> supakeen, ok, so you can now run 1 software with full hard ware resources
[10:25:52] <supakeen> Correct.
[10:26:03] <stealth_> you can make that software OS
[10:26:17] <supakeen> And reintroduce the problems you didn't want?
[10:26:24] <dba> supakeen, how would I find out how long it would take the python interpreter look for a variable in the hash table?
[10:26:46] <supakeen> dba: You shouldn't look at it in that way, you should check to see how long a specific task takes on a whole and how much jitter there is in that.
[10:27:21] <stealth_> supakeen, you pretty much are going to re-invented the OS
[10:27:30] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[10:27:37] <supakeen> stealth_: ... a RTOS is just another form of an OS yes hence it being called a real-time OS.
[10:28:06] <supakeen> As opposed to say a multitasking OS such as Linux.
[10:29:24] *** Quits: ckeshav (~keshavcha@user/ckeshav) (Quit: Leaving)
[10:29:28] <stealth_> well its managing multiple softwares at same time...
[10:29:31] <supakeen> The usecase is usually embedded hardware in tight PID loops; not general purprose large processors.
[10:29:48] <supakeen> Where it is absolutely necessary to guarantee a 10ms reply to an interrupt for example.
[10:29:50] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[10:29:54] <stealth_> suppose you can tell linux to only use x amount of resource and give you software the rest, if you just want o run your software.
[10:30:19] <supakeen> stealth_: I wish you very good luck running Linux on your AVR.
[10:31:02] <supakeen> Note that an RTOS such as FreeRTOS requires only 64kB of RAM.
[10:31:08] *** Quits: sudomann (~sudomann@2601:543:100:2e3:914a:5d9:5784:eec5) (Quit: Leaving)
[10:31:10] <supakeen> (or 16kB if you have a coproc)
[10:31:12] *** Joins: Julian (~tos9@python/site-packages/Julian)
[10:32:32] <supakeen> And that's with everything turned on :)
[10:32:33] <deniska> supakeen: linux on avr: http://dmitry.gr/?r=05.Projects&proj=07.%20Linux%20on%208bit
[10:32:51] <deniska> (obviously you have to download more ram and, uhm, wait a bit)
[10:33:19] <supakeen> Yes they put a 1GB SPI storage on it ;)
[10:34:03] <supakeen> Oh this isn't the -offtopic channel, sorry let's take any further discussion of RTOS and stuff there :)
[10:34:14] <stealth_> i am not sure why you are thinking of running linux on a microcontroller
[10:35:15] <deniska> Don't people think about that all the time?
[10:35:33] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[10:36:15] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[10:36:42] *** Joins: mortn (~mortn@81-234-122-230-no158.tbcn.telia.com)
[10:37:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:38:45] *** Joins: BlackBishop (dexter@user/blackbishop)
[10:41:30] *** Quits: nicode (~nic@2607:f2c0:93cb:8f00:e552:f66b:bd97:27e3) (Ping timeout: 260 seconds)
[10:41:54] *** Joins: gusto (~Augustus@109.255.100.54)
[10:42:07] *** Joins: ubert (~Thunderbi@178.165.203.151.wireless.dyn.drei.com)
[10:42:31] *** Joins: control (~v1@user/control)
[10:43:41] <control> hello, theres any way i could set a variable to run on all multiprocesses?
[10:44:25] *** Quits: solo (~solo@c-73-219-147-223.hsd1.ct.comcast.net) (Ping timeout: 260 seconds)
[10:44:28] <control> words = sample(english, randint(6, 6)) - this gets 6 words out of hundreds. i want to set this variable to all processes
[10:44:37] *** Quits: mortn (~mortn@81-234-122-230-no158.tbcn.telia.com) (Remote host closed the connection)
[10:44:45] <control> currently every process gets random words
[10:45:04] *** Joins: avikalp (~avikalp@223.184.20.242)
[10:46:30] *** Joins: mat001 (~mat001@88.128.88.212)
[10:46:42] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[10:46:45] *** Joins: kosh (~kosh@user/kosh)
[10:47:36] *** Joins: Julian (~tos9@python/site-packages/Julian)
[10:47:43] *** Joins: OnceMe (~stefan@user/onceme)
[10:48:30] <OnceMe> I have params = ( "flag", flagBool ) and then requests.post(... params = params ) now, flagBool is bool in python, how do I properly convert True to true and send it as params ?
[10:49:20] *** Joins: alkino (~quassel@user/alkino)
[10:49:38] *** Joins: arinov (~arinov@213.194.126.155)
[10:50:02] <deniska> OnceMe: pass it a string 'true' instead of a bool
[10:50:11] *** Joins: han-solo (~hanish@user/han-solo)
[10:50:16] <OnceMe> that will do, but it looks ugly
[10:50:29] <OnceMe> why would I pass str, when I expect bool as argument?
[10:50:38] <The-Compiler> OnceMe: maybe you're looking for something like str(flagBool).lower() or so? Or if you want to be more explicit:   "true" if flagBool else "false"
[10:50:59] <OnceMe> my endpoint looks like /some/endpoint?flag=true
[10:51:04] <OnceMe> that is how it expects it
[10:51:22] <The-Compiler> OnceMe: okay, so pass it like this. URL parameters don't have no concept of booleans.
[10:51:40] <OnceMe> how to pass it?
[10:51:43] <OnceMe> as str?
[10:51:45] *** Joins: rendar (~rendar@user/rendar)
[10:52:34] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[10:52:35] *** Quits: avikalp (~avikalp@223.184.20.242) (Ping timeout: 260 seconds)
[10:53:03] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[10:53:17] *** Joins: avikalp (~avikalp@223.184.20.242)
[10:53:37] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[10:54:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[10:55:03] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[10:55:10] <deniska> OnceMe: in the end of the day it has to str
[10:55:21] <deniska> you can come up with various ways of converting bools to strings along the way
[10:55:27] <deniska> hsa to be str*
[10:56:18] <OnceMe> yeah
[10:56:24] <OnceMe> ill just pass it as str
[10:57:23] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[10:57:53] *** Quits: avikalp (~avikalp@223.184.20.242) (Ping timeout: 265 seconds)
[11:01:15] *** Joins: vladoski (~vladoski@2001:b07:add:d406:87fe:db5:9ac5:8458)
[11:02:45] <vladoski> how do I count the number of orm objects in sqlalchemy's Query object?
[11:03:41] *** Joins: Julian (~tos9@python/site-packages/Julian)
[11:04:38] *** Joins: dOhtem (uid524096@id-524096.tinside.irccloud.com)
[11:04:38] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 260 seconds)
[11:04:48] <deniska> len(query)?
[11:04:57] *** Quits: dOhtem (uid524096@id-524096.tinside.irccloud.com) (Changing host)
[11:04:57] *** Joins: dOhtem (uid524096@user/dohtem)
[11:05:22] <vladoski> nvm I've found it it's just query.count()
[11:05:28] <vladoski> doesn't implement __len__ so no len
[11:07:54] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[11:08:55] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[11:11:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[11:14:50] *** Joins: brelod (~me@90.244.150.142)
[11:17:00] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[11:17:10] *** Quits: control (~v1@user/control) (Quit: leaving)
[11:17:12] <varaindemian> I have a string and I'd liketo translate it to something like this
[11:17:27] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:17:46] <varaindemian> b"\x54\x49\x49\x52\x43\x54\x55\x5d\x17\x52\x79\x51\x12\x55\x79\x43\x47\x5c\x5f\x79\x4f\x79\x52\x16\x4a\x42\x79\x5f\x47\x79\x79\x1c\x76\x79\x5b\x45\x52\x40"'
[11:17:52] <varaindemian> how can I do that?
[11:21:02] *** Joins: Julian (~tos9@python/site-packages/Julian)
[11:21:22] *** Quits: visl_ (visl@user/visl) (Ping timeout: 252 seconds)
[11:22:09] *** Joins: visl (visl@user/visl)
[11:22:46] *** Joins: solo (~solo@c-73-219-147-223.hsd1.ct.comcast.net)
[11:22:52] *** Quits: mat001 (~mat001@88.128.88.212) (Remote host closed the connection)
[11:25:10] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 260 seconds)
[11:25:19] <leduyquang753> There is a decode function.
[11:25:22] *** Joins: alkino (~quassel@user/alkino)
[11:25:49] <leduyquang753> encode
[11:26:25] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[11:26:39] *** Joins: node1 (~node1@user/node1)
[11:27:26] *** Parts: willow (~willow@bay.systems) ()
[11:28:05] *** Joins: millido (~millido@84.210.150.128)
[11:30:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:30:47] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[11:33:12] *** Quits: OnceMe (~stefan@user/onceme) (Quit: Konversation terminated!)
[11:34:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[11:35:00] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[11:35:01] *** Joins: rannnn8888 (~rannnn888@bzq-79-176-138-108.red.bezeqint.net)
[11:35:31] <rannnn8888> someone know use tws api python ?
[11:36:17] <node1> Can we say it's `data: {name:}
[11:36:17] <node1> `
[11:36:36] <node1> can we say `data: {name:}` is json object?
[11:37:18] <han-solo> maybe '{"data": {"name": "foo"}}' is json
[11:37:42] *** Joins: Julian (~tos9@python/site-packages/Julian)
[11:38:05] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Ping timeout: 260 seconds)
[11:38:10] <node1> And to pass as argument for this value?
[11:38:17] <node1> name=Hello ?
[11:38:58] *** Quits: _Ev (~ev@user/ev/x-8999918) (Ping timeout: 252 seconds)
[11:39:22] <han-solo> you would make a dict then dump it as json
[11:39:48] <varaindemian> leduyquang753: sorry?
[11:40:18] <han-solo> `name = 'foo'; d = {'data': {'name': name}}; json.dumps(d)` # something like that
[11:42:27] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[11:42:49] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[11:43:02] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[11:44:23] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Read error: Connection reset by peer)
[11:45:25] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[11:45:38] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567377-189.dhcp.inet.fi)
[11:46:04] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567377-189.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:46:50] *** Quits: zepolen (~zepolen@2a02:587:8600:1ad4:ad:98b4:3948:4ca2) (Ping timeout: 260 seconds)
[11:47:03] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Read error: Connection reset by peer)
[11:47:42] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[11:47:54] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:48:55] *** Quits: visl (visl@user/visl) (Remote host closed the connection)
[11:49:18] *** Joins: visl (visl@user/visl)
[11:49:33] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Read error: Connection reset by peer)
[11:49:58] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[11:50:32] <leduyquang753> varaindemian Strings have an encode method.
[11:50:35] *** Joins: darksun (~darksun@user/darksun)
[11:50:45] <varaindemian> leduyquang753: got it!
[11:51:00] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:f4aa:bec3:f131:5cd4)
[11:51:07] *** Joins: shad (~shad@user/shad)
[11:52:22] <varaindemian> leduyquang753: how can I eliminate the `0` thing here:
[11:52:38] <varaindemian> https://www.irccloud.com/pastebin/syKHpBws/
[11:53:00] <varaindemian> I mean I want output: x68x65...
[11:53:33] <leduyquang753> Just trim the resulting string.
[11:54:25] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 260 seconds)
[11:55:30] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:55:50] <varaindemian> leduyquang753: .strip()?
[11:55:55] *** Joins: Julian (~tos9@python/site-packages/Julian)
[11:56:24] *** Quits: vlt (~dm@157.230.21.14) (Quit: WeeChat 2.3)
[11:56:36] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[11:57:30] <leduyquang753> No.
[11:57:42] <leduyquang753> Trim out the first character.
[11:58:43] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[11:59:32] *** Joins: ub (~Thunderbi@178.165.203.151.wireless.dyn.drei.com)
[11:59:46] <mav`rik> varaindemian: your current solution has a bit of a down-side. Characters in strings can be more than a byte long. What is it that you're trying to achieve (what encoding is the thing you're passing this output to expecting)?
[12:00:12] *** Joins: manti7 (~manti7@176.10.104.94)
[12:00:33] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:00:34] <varaindemian> I managed to do it
[12:00:53] <varaindemian> `.replace('0x','x')`
[12:01:06] <mav`rik> varaindemian: and if the input string was 你好?
[12:01:06] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[12:01:21] <varaindemian> mav`rik: it won't be
[12:01:47] <varaindemian> just numbers and letters from us alphabet
[12:02:03] *** Joins: nomic (~nomic@185.198.243.184)
[12:03:25] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[12:03:50] *** Joins: op0x0f05 (uid512716@id-512716.tinside.irccloud.com)
[12:04:16] *** Quits: horseface (~horseface@user/horseface) (Quit: STOP, DROP, AND ROLL. IT IS HAMMER TIME!!!)
[12:04:27] <stealth_> varaindemian, `print(b'hello'.hex())`
[12:05:24] *** Joins: avikalp (~avikalp@223.184.20.242)
[12:05:39] *** Joins: plastico (~plastico@neomutt/plastico)
[12:06:15] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[12:06:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[12:08:04] *** Joins: fikran (~fikran@user/fikran)
[12:08:06] *** Joins: horseface (~horseface@user/horseface)
[12:09:30] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[12:09:48] *** Joins: greknod28 (~grek@120.88.171.98)
[12:11:58] *** Joins: yotsuba (~yotsuba@213.137.70.116)
[12:12:06] *** Joins: Julian (~tos9@python/site-packages/Julian)
[12:13:51] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[12:14:34] *** Quits: baltazar (~baltazar@178-164-254-238.pool.digikabel.hu) (Ping timeout: 268 seconds)
[12:16:08] *** Joins: Rikem (~mike@user/rikem)
[12:16:19] *** Joins: baltazar (~baltazar@84-236-16-46.pool.digikabel.hu)
[12:17:10] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[12:18:10] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 258 seconds)
[12:18:23] <stealth_> varaindemian, o, you can add `.hex('x')` if you want a separator
[12:18:31] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[12:18:34] *** Quits: yotsuba (~yotsuba@213.137.70.116) (Read error: Connection reset by peer)
[12:19:09] *** Joins: de-facto_ (~de-facto@user/de-facto)
[12:19:20] *** Joins: yotsuba (~yotsuba@213.137.70.116)
[12:19:25] <varaindemian> stealth_: that's pretty
[12:19:28] *** Quits: horseface (~horseface@user/horseface) (Quit: STOP, DROP, AND ROLL. IT IS HAMMER TIME!!!)
[12:19:40] *** Joins: horseface (~horseface@user/horseface)
[12:19:47] <leduyquang753> To summarize: 'x' + string.encode('ansi').hex('x')
[12:19:47] <han-solo> that's a 3.8+ thing, i think
[12:19:57] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[12:21:13] *** Quits: rannnn8888 (~rannnn888@bzq-79-176-138-108.red.bezeqint.net) (Ping timeout: 256 seconds)
[12:22:03] *** de-facto_ is now known as de-facto
[12:24:05] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[12:24:56] *** Quits: wolfgang (~wolfgang@101.174.167.116) (Remote host closed the connection)
[12:25:17] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:26:03] <stealth_> varaindemian, https://docs.python.org/3/library/stdtypes.html#bytes.hex
[12:27:44] *** Quits: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[12:28:36] *** Joins: wolfgang (~wolfgang@101.174.167.116)
[12:29:53] *** Joins: Julian (~tos9@python/site-packages/Julian)
[12:31:10] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 265 seconds)
[12:32:08] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[12:32:43] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[12:35:02] *** Joins: alzgh (~alzgh@user/alzgh)
[12:35:02] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[12:35:13] *** Quits: alkino (~quassel@user/alkino) (Quit: No Ping reply in 180 seconds.)
[12:36:32] *** Joins: alkino (~quassel@user/alkino)
[12:37:23] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[12:38:07] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[12:38:30] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[12:39:20] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:fcd8:ad82:fb0e:c643) (Ping timeout: 260 seconds)
[12:40:00] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[12:42:28] *** A_Dragon is now known as Awoobis
[12:43:17] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[12:44:22] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[12:44:41] <lpapp> hi, is there something in python 2 like as_posix in python3's pathlib?
[12:45:13] <lpapp> to convert a path to a posix path
[12:45:24] <lpapp> rather than manual replace of '\\' with '/'
[12:45:39] *** Joins: daoudr (~daoudr@161.12.105.92.dynamic.wline.res.cust.swisscom.ch)
[12:46:09] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 265 seconds)
[12:46:20] <mav`rik> lpapp: what object/type is your path stored as before you're wishing to perform this action?
[12:46:42] *** Joins: Julian (~tos9@python/site-packages/Julian)
[12:46:55] <lpapp> os.path.join
[12:49:25] <jinsun> you can use pathlib2 in python2, install with pip
[12:49:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[12:49:41] <lpapp> would be an overkill to replace replace("\\", "/")
[12:50:07] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[12:50:25] <jinsun> well if replace works then just use that
[12:50:42] <mav`rik> lpapp: if you're running on Windows, but want a Posix path, where are you using this path?
[12:51:57] *** Joins: Mechanismus (~LabMonkey@206.255.106.67)
[12:51:58] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[12:52:11] *** Quits: Bardon (~Bardon@user/Bardon) (Quit: ZNC - https://znc.in)
[12:52:42] *** Joins: Bardon (~Bardon@user/Bardon)
[12:52:43] *** Joins: kia (~kia@user/kia)
[12:54:36] *** Joins: txtsd (~txtsd@user/txtsd)
[12:54:59] *** Quits: kia (~kia@user/kia) (Client Quit)
[12:55:13] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[12:55:19] *** Joins: kia (~kia@user/kia)
[12:56:06] *** Quits: truth (~truth@user/truth) (Ping timeout: 268 seconds)
[12:56:35] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:58:43] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[12:58:48] *** Joins: truth (~truth@user/truth)
[12:59:21] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[13:00:17] <lpapp> mav`rik: in an application that works with posix paths
[13:00:26] <lpapp> jinsun: thanks, was hoping that python 2 had something built-in.
[13:01:17] <mav`rik> In pydantic I'm using a shared validator across a few classes as `_thing_list = validator("thing", allow_reuse=True, pre=True)(shared_validator)` sadly though mypy is now saying "error: Untyped fields disallowed" for that line. How do I tell it it's not a field?
[13:01:20] <grawity> wait, but there's no standard translation from Windows paths to posix paths anyway, is there?
[13:03:03] <jinsun> lpapp: looks like as_posix is doing .replace too internally, so definitely unnessary to install pathlib2 just for this function https://github.com/jazzband/pathlib2/blob/44b902407745211689f678bb251f37eb3d272c8e/pathlib2/__init__.py#L1027
[13:03:15] <vladoski> how can I tell sqlalchemy core to select everything in my query, but with some aliases?
[13:03:17] *** Joins: Julian (~tos9@python/site-packages/Julian)
[13:03:30] <vladoski> I have three columns with the same name thanks to a join
[13:03:50] <vladoski> is it possible to just tell sqlalchemy to create an alias for just these two without putting all my columns in the select?
[13:04:40] <mav`rik> vladoski: use the `.label(some_name)` method on the columns you want to give a different name
[13:05:20] <vladoski> mav`rik, okay but I need to do that in the select
[13:05:40] <vladoski> so it will select just those three columns
[13:06:09] <lpapp> jinsun: thanks
[13:06:10] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[13:06:25] <mav`rik> vladoski: You haven't specified the actual columns you wanted as part of your resultset?
[13:06:40] <vladoski> mav`rik, no, I need all of them
[13:07:13] *** Joins: mcon (~Thunderbi@host-79-45-0-75.retail.telecomitalia.it)
[13:07:18] <vladoski> is it possible to do a select * with some "AS" automatically in sqlalchemy without specifying every column that I need
[13:08:08] <mav`rik> vladoski: in much the same way that you can't in SQL, not really that I'm aware of, no
[13:08:20] <vladoski> mav`rik, okay thanks
[13:08:23] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[13:08:25] *** Quits: parv (~quass@user/parv) (Quit: parv)
[13:08:49] <mav`rik> vladoski: there is a #sqlalchemy though, perhaps they have more detail
[13:10:39] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[13:11:10] <mcon> I am having problems with `subprocess.Popen()` (again). Problem is I'm trying to start tcpdump and it complains "tcpdump: enp7s0 : No such device exists -- (SIOCGIFHWADDR: No such device)" but launching it from terminal with arguments derived by Popen.arguments it works as expected. What should I check?
[13:11:41] <mav`rik> mcon: do you have an example paste that you could share so we can see how you're handling arguments?
[13:12:12] <mcon> mav`rik: I'm preparing it. Stay tuned ;)
[13:12:14] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Client Quit)
[13:12:33] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[13:12:47] *** Joins: rsx (~dummy@ppp-188-174-158-125.dynamic.mnet-online.de)
[13:13:33] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[13:13:57] *** Joins: wender (~Wender@189.37.67.210)
[13:15:34] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[13:15:44] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[13:16:35] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[13:17:25] *** Quits: computeiro (~Wender@189.37.65.80) (Ping timeout: 252 seconds)
[13:17:58] *** Quits: vladoski (~vladoski@2001:b07:add:d406:87fe:db5:9ac5:8458) (Ping timeout: 258 seconds)
[13:18:03] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[13:19:01] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:19:54] *** Joins: Jonopoly (~Jonopoly@static-90-251-254-79.vodafonexdsl.co.uk)
[13:20:29] *** Quits: nomic (~nomic@185.198.243.184) (Quit: Leaving)
[13:20:52] *** Joins: Julian (~tos9@python/site-packages/Julian)
[13:21:50] *** Quits: Jonopoly (~Jonopoly@static-90-251-254-79.vodafonexdsl.co.uk) (Changing host)
[13:21:50] *** Joins: Jonopoly (~Jonopoly@user/jonopoly)
[13:21:57] <mcon> mav`rik: Forgrt the noise. My bad. I had a spurious space at end of one argument, of course in shell it doesn't matter, but when you use a list of strings...
[13:21:57] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:79eb:ea87:6f38:cccf)
[13:22:02] <Zweimer> Hey!
[13:23:50] <Zweimer> Can you run a python-program (maybe even with a UI) as a service (deamon, or something else), so that it still runs even when the user triggers a windows log out?
[13:26:02] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[13:26:21] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:27:26] *** Quits: avikalp (~avikalp@223.184.20.242) (Ping timeout: 260 seconds)
[13:31:13] <mav`rik> mcon: hence the ask :) Glad you worked it out.
[13:31:46] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 245 seconds)
[13:32:11] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[13:32:52] *** Joins: laerling (~lsf@static.235.77.203.116.clients.your-server.de)
[13:33:41] *** Quits: elkclone (~elkclone@user/elkclone) (Ping timeout: 258 seconds)
[13:35:33] *** Joins: avikalp (~avikalp@223.184.20.242)
[13:37:21] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[13:38:28] *** Joins: Julian (~tos9@python/site-packages/Julian)
[13:39:56] *** Quits: yotsuba (~yotsuba@213.137.70.116) (Read error: Connection reset by peer)
[13:40:03] *** Quits: metaace (~metaace@user/metaace) (Remote host closed the connection)
[13:40:34] *** Quits: avikalp (~avikalp@223.184.20.242) (Remote host closed the connection)
[13:40:42] *** Joins: yotsuba (~yotsuba@213.137.73.35)
[13:41:07] *** Joins: metaace (~metaace@user/metaace)
[13:41:31] *** Quits: madprops (~hj8oijo@user/madprops) (Ping timeout: 268 seconds)
[13:41:40] *** Joins: burakcank_ (~burakcank@159.146.40.45)
[13:46:35] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 264 seconds)
[13:47:05] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:47:14] *** Quits: yotsuba (~yotsuba@213.137.73.35) (Read error: Connection reset by peer)
[13:47:38] *** Joins: avikalp (~avikalp@223.184.20.242)
[13:48:44] *** Joins: daimbag (~bagdarrel@shell.xshellz.com)
[13:50:40] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[13:51:33] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[13:52:43] *** Joins: yotsuba (~yotsuba@213.137.73.35)
[13:53:57] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:54:02] *** Quits: daimbag (~bagdarrel@shell.xshellz.com) (Ping timeout: 260 seconds)
[13:54:50] *** Quits: mcon (~Thunderbi@host-79-45-0-75.retail.telecomitalia.it) (Quit: mcon)
[13:55:08] *** Quits: yotsuba (~yotsuba@213.137.73.35) (Read error: Connection reset by peer)
[13:56:32] *** Joins: xa0s (xa0s@sdf.org)
[13:56:52] *** Joins: yotsuba (~yotsuba@213.137.73.35)
[13:57:26] *** Quits: kia (~kia@user/kia) (Quit: kia)
[13:57:58] <mav`rik> Is there a way to create a generator for test purposes that raises such that mypy won't mark the yield as unreachable? Normal approach for this kind of thing is def/raise/yield in that order, with the yield only there to ensure it returns a generator when called.
[13:58:26] *** Joins: Julian (~tos9@python/site-packages/Julian)
[14:00:02] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:00:06] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 265 seconds)
[14:00:52] *** Joins: kia (~kia@user/kia)
[14:01:54] *** Quits: yotsuba (~yotsuba@213.137.73.35) (Read error: Connection reset by peer)
[14:02:17] <bjs> mav`rik: you can `if False: yield` (and presumably mypy doesn't complain?) or `yield from []`
[14:03:09] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[14:03:20] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[14:03:50] *** Joins: Klinda (~superleag@user/klinda)
[14:06:06] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[14:06:17] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[14:07:51] *** Joins: yotsuba (~yotsuba@213.137.73.35)
[14:08:03] *** Joins: ckeshav (~keshavcha@user/ckeshav)
[14:11:57] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:12:06] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[14:15:12] *** Quits: burakcank_ (~burakcank@159.146.40.45) (Quit: Leaving)
[14:15:30] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[14:15:38] *** Joins: Julian (~tos9@python/site-packages/Julian)
[14:16:07] *** Joins: burakcank_ (~burakcank@159.146.40.45)
[14:17:09] *** Quits: burakcank_ (~burakcank@159.146.40.45) (Client Quit)
[14:17:25] *** Joins: fikran (~fikran@user/fikran)
[14:17:28] *** Joins: burakcank_ (~burakcank@159.146.40.45)
[14:19:48] *** Quits: burakcank_ (~burakcank@159.146.40.45) (Client Quit)
[14:20:53] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[14:21:55] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:79eb:ea87:6f38:cccf) (Ping timeout: 256 seconds)
[14:22:22] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[14:23:10] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[14:26:26] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[14:26:42] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 260 seconds)
[14:28:38] *** Joins: paul424 (~chatzilla@2a01:111f:e22:cc00:5b2e:bb46:df53:b01d)
[14:28:51] <paul424> Hello hello, Ive got problem with Visual Studio Code and python
[14:29:22] <paul424> the thing is it doesn't open a built program in separate window
[14:29:53] <paul424> instead it starts to read from error console ( where there are lot;s of unecessery infos)
[14:30:04] <paul424> which distracts my students.... how do I change that /
[14:30:12] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[14:30:26] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[14:30:37] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[14:31:07] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:31:34] *** Quits: avikalp (~avikalp@223.184.20.242) (Ping timeout: 258 seconds)
[14:32:04] *** Joins: Julian (~tos9@python/site-packages/Julian)
[14:33:14] *** Quits: kia (~kia@user/kia) (Quit: kia)
[14:33:16] <mav`rik> bjs: cute idea on the yield from, thanks.
[14:33:21] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[14:33:58] *** Joins: Pi-sistance (~kvirc@cpc94050-newt37-2-0-cust176.19-3.cable.virginm.net)
[14:35:48] *** Joins: semeion (~semeion@user/semeion)
[14:35:57] <Pi-sistance> how come this code doesnt even give me an error due to the indentation being wrong? it just does nothing when I run it?  https://bpa.st/BQUQ
[14:36:17] <Pi-sistance> I was a bit confused by while true loops, so am experimenting a bit
[14:36:33] <nedbat> Pi-sistance: you must not be running that code
[14:36:33] <grawity> how come it doesn't even give an error about `true` being undefined?
[14:36:45] <nedbat> grawity: it would complain about the indentation first
[14:36:46] <grawity> as it is spelled `True` in python
[14:36:58] <grawity> nedbat: hmm ok good point
[14:36:59] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 264 seconds)
[14:38:50] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:79eb:ea87:6f38:cccf)
[14:38:51] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 258 seconds)
[14:40:36] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[14:41:47] <bjs> paul424: I'm not sure what you mean,  you open a "built" program? What's a "built" program?
[14:41:50] *** Quits: shad (~shad@user/shad) (Ping timeout: 260 seconds)
[14:42:11] *** Joins: holgersson (~quassel@user/holgersson)
[14:43:01] <Ninpo> perhaps they mean running the code they've built
[14:43:24] <bjs> Maybe, I don't know, that's why I asked :P
[14:43:26] *** Quits: op0x0f05 (uid512716@id-512716.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[14:44:16] <Pi-sistance> there is a * in jupyter notebook in the in[] part of two cells, I guess that's why I didn't get an error. It's still waiting for me to do something in another cell?
[14:44:27] <Pi-sistance> just googled this
[14:44:59] *** Quits: dld (~davidlowr@2601:197:600:1210:5c78:4bcc:82fe:593c) (Ping timeout: 258 seconds)
[14:45:36] <Pi-sistance> Oh I hadnt stopped an above cell, thought that exiting it and typing elsewhere always stopped it.
[14:45:48] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[14:46:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:46:59] *** Quits: yotsuba (~yotsuba@213.137.73.35) (Read error: Connection reset by peer)
[14:47:35] *** Joins: Klinda (~superleag@user/klinda)
[14:48:16] *** Joins: Julian (~tos9@python/site-packages/Julian)
[14:48:29] *** Joins: zepolen (~zepolen@2a02:587:862e:2f17:a8c2:4429:98dd:c961)
[14:51:36] *** Joins: cdown_ (~cdown@89.32.122.5)
[14:52:29] <paul424> bjs: start without debugging
[14:52:49] <bjs> paul424: are you running the code by pressing some button in VSCode then?
[14:53:04] <paul424> but on the other hand .... someone removed the VCS from the laptops ... wait
[14:53:12] <paul424> bjs: yes to your question
[14:53:18] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[14:54:05] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[14:54:21] <paul424> simply reinstalling VCS makes unusable env ...
[14:54:23] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 264 seconds)
[14:54:31] <paul424> speaking of windows10
[14:54:34] *** cdown_ is now known as cdown
[14:54:50] <bjs> paul424: you could teach the students to run the code from the terminal
[14:55:07] <bjs> You have to configure VSCode's Python configuration to run the thing properly
[14:55:35] <paul424> aha , because before it was able to detect it
[14:56:07] <paul424> brb
[14:56:27] *** Joins: complexnumber (~brett@194-223-26-191.tpgi.com.au)
[14:56:29] *** Joins: BSaboia (~bsaboia@187.19.138.198)
[14:57:10] <mav`rik> Is there an async equivalent of `yield from`? (in as much as there's `async for` as an async equivalent of `for`)
[14:58:32] <bjs> mav`rik: no
[14:58:54] <jinsun> https://www.python.org/dev/peps/pep-0525/#asynchronous-yield-from (which is just a workaround I guess)
[14:59:15] <bjs> mav`rik: `async for x in xs: yield x` is almost there
[14:59:27] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[15:02:27] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[15:02:38] <Pi-sistance> the break outside loop error means the code was going to "break" anyway, right?
[15:04:06] *** Joins: Linux77 (~Linux7_7@186.233.182.138)
[15:05:51] *** Joins: Julian (~tos9@python/site-packages/Julian)
[15:05:59] *** Joins: arseru (uid515527@user/arseru)
[15:07:13] <arseru> Hi! I'm having trouble with a mocked method from a class. Isn't that the right way to mock `get_timestamp()`? https://bpa.st/WAAA I'm then using `get_timestamp_mock.return_value = "20211022"` in my test to try to mock that method, but the tests fail with errors from calls inside the mocked method, which shouldn't get called
[15:08:43] *** Joins: cdown_ (~cdown@163.114.131.1)
[15:09:39] *** Quits: manuels (~manuel@80.211.205.88) (Remote host closed the connection)
[15:10:43] *** Quits: paul424 (~chatzilla@2a01:111f:e22:cc00:5b2e:bb46:df53:b01d) (Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805])
[15:11:29] *** Joins: elkclone (~elkclone@user/elkclone)
[15:11:35] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 260 seconds)
[15:11:46] *** cdown_ is now known as cdown
[15:11:57] *** Joins: manuels (~manuel@80.211.205.88)
[15:12:25] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[15:12:45] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 260 seconds)
[15:13:02] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[15:13:02] *** gitesh is now known as TigerGitesh
[15:13:03] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[15:13:16] *** TigerGitesh is now known as gitesh
[15:14:32] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[15:14:59] <The-Compiler> arseru: can you try class_mock().get_timestamp instead?
[15:15:30] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[15:15:34] <pr100> Pi-sistance: break outside loop is a syntax error: it's not syntactically valid to put a break statement anywhere outside the body of loop
[15:15:48] <pr100> *a loop
[15:16:00] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:16:02] <Pi-sistance> ok thanks
[15:16:10] <arseru> The-Compiler: where? in `get_timestamp_mock` method or inside my test?
[15:16:10] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[15:16:57] *** Quits: manuels (~manuel@80.211.205.88) (Quit: The Lounge - https://thelounge.chat)
[15:17:30] <The-Compiler> arseru: in get_timestamp_mock instead of .return_value
[15:17:36] <arseru> The-Compiler: doesn't work :(
[15:17:47] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Ping timeout: 264 seconds)
[15:17:54] <arseru> I always get weird mental breakages using the mock library
[15:19:16] <The-Compiler> yeah, same, same
[15:19:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:19:35] *** Quits: ckeshav (~keshavcha@user/ckeshav) (Ping timeout: 264 seconds)
[15:19:41] <The-Compiler> arseru: do you really need mock's features like assert_called_with() and such?
[15:19:54] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[15:20:32] <arseru> The-Compiler: I guess I don't in this specific case, since the real method doesn't have any input args
[15:21:15] <The-Compiler> then I'd probably use pytest's monkeypatch
[15:21:35] *** Joins: _Ev (~ev@user/ev/x-8999918)
[15:22:38] <arseru> The-Compiler: is this a good guide? https://docs.pytest.org/en/6.2.x/monkeypatch.html
[15:23:15] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[15:25:17] *** Joins: shad (~shad@user/shad)
[15:26:54] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 260 seconds)
[15:27:50] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 260 seconds)
[15:28:04] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[15:28:24] <The-Compiler> arseru: yep
[15:28:38] *** Quits: wender (~Wender@189.37.67.210) (Remote host closed the connection)
[15:28:40] <arseru> The-Compiler: cool, thanks for the help! :)
[15:28:45] *** Joins: Julian (~tos9@python/site-packages/Julian)
[15:29:24] *** Joins: rany (~rany@user/rany)
[15:29:32] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[15:30:27] *** Quits: BSaboia (~bsaboia@187.19.138.198) (Quit: This computer has gone to sleep)
[15:30:44] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[15:31:16] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:24] *** Joins: shiriru (~shiriru@user/shiriru)
[15:32:00] *** Joins: BSaboia (~bsaboia@187.19.138.198)
[15:32:35] *** Joins: computeiro (~Wender@189.37.67.210)
[15:33:48] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[15:33:59] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 264 seconds)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:53] *** Joins: Julian (~tos9@python/site-packages/Julian)
[15:38:47] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[15:40:03] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[15:42:04] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[15:44:34] *** Joins: dez (uid92154@user/dez)
[15:45:42] *** Joins: vladoski (~vladoski@2001:b07:add:d406:87fe:db5:9ac5:8458)
[15:47:36] *** Joins: burakcank (burakcank@has.arrived.and.is.ready-to.party)
[15:49:06] *** Joins: Betal (~Betal@user/betal)
[15:49:13] *** Joins: jiehuan (~jiehuan@39.190.193.76)
[15:49:26] *** Joins: horseface_ (~horseface@user/horseface)
[15:49:30] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[15:49:58] *** Joins: yotsuba (~yotsuba@213.137.73.35)
[15:52:06] *** Quits: jpic (~jpic@82.142.4.78) (Ping timeout: 260 seconds)
[15:52:14] *** Quits: horseface (~horseface@user/horseface) (Ping timeout: 265 seconds)
[15:52:33] *** Quits: horseface_ (~horseface@user/horseface) (Client Quit)
[15:52:48] *** Joins: doosboox8 (~doosboox@194.132.186.60)
[15:52:49] *** Joins: ExeciN (~ExeciN@user/nicexe)
[15:52:52] *** Joins: Julian (~tos9@python/site-packages/Julian)
[15:53:52] *** Joins: jpic (~jpic@82.142.4.78)
[15:53:55] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[15:54:45] *** Quits: doosboox (~doosboox@194.132.186.60) (Ping timeout: 260 seconds)
[15:54:45] *** doosboox8 is now known as doosboox
[15:55:51] <ldericher> not just python related, but what RE matches both "target" and "{target}" but not e.g. "{target"? Can it be done simpler than "target|{target}"?
[15:56:11] *** Quits: iflema (~ian@user/iflema) (Remote host closed the connection)
[15:56:12] <ldericher> … or more elegantly?
[15:58:02] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[15:58:10] *** Quits: sharperguy (~sharpergu@88.130.222.95) (Ping timeout: 260 seconds)
[15:59:03] *** Joins: upsala (~zcb@185.213.155.160)
[15:59:52] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:59:57] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[16:00:03] *** Joins: sharperguy (~sharpergu@fnord.cryptophone.de)
[16:00:59] *** Joins: mei6 (~mei@user/mei)
[16:01:10] *** Quits: mei (~mei@user/mei) (Ping timeout: 260 seconds)
[16:01:11] *** mei6 is now known as mei
[16:01:16] *** Joins: manuels (~manuel@80.211.205.88)
[16:01:45] *** aoei is now known as AOEI
[16:02:00] *** Quits: manuels (~manuel@80.211.205.88) (Client Quit)
[16:02:08] *** Joins: ikus060 (~ikus060@96.127.228.230)
[16:02:48] *** Joins: manuels (~manuel@80.211.205.88)
[16:02:55] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:11ee:20a2:9e70:232e) (Ping timeout: 260 seconds)
[16:03:29] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:5f1f:cd87:7934:7314)
[16:04:14] <CrtxReavr> So. . . if I'm installing python modules (that I wrote) to a shared location that users can't write two, what do I run to create the .pyc bytecode files so they benefit the users running the scripts?
[16:04:24] <CrtxReavr> s/two/two
[16:05:23] *** Quits: yotsuba (~yotsuba@213.137.73.35) (Read error: Connection reset by peer)
[16:06:06] *** Quits: sharperguy (~sharpergu@fnord.cryptophone.de) (Ping timeout: 260 seconds)
[16:06:06] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 260 seconds)
[16:07:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:07:40] *** Joins: sharperguy (~sharpergu@88.130.222.95)
[16:07:41] *** Joins: yotsuba (~yotsuba@213.137.73.35)
[16:08:26] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[16:10:13] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:11:13] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 252 seconds)
[16:11:26] *** Quits: yotsuba (~yotsuba@213.137.73.35) (Read error: Connection reset by peer)
[16:11:38] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[16:12:00] *** Joins: yotsuba (~yotsuba@213.137.73.35)
[16:12:26] *** Quits: stranac (~stranac@195.29.239.126) (Quit: Leaving)
[16:12:30] *** Joins: dld (~davidlowr@2620:6e:6000:2900:5db6:6f5a:3b6e:25f9)
[16:13:58] *** Joins: alzgh (~alzgh@user/alzgh)
[16:14:36] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[16:14:56] *** Quits: yotsuba (~yotsuba@213.137.73.35) (Read error: Connection reset by peer)
[16:15:23] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 264 seconds)
[16:16:17] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[16:17:05] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:17:33] *** Quits: _Ev (~ev@user/ev/x-8999918) (Quit: Leaving.)
[16:17:49] *** Quits: anonymeowo (~anonymeow@5.34.180.230) (Ping timeout: 252 seconds)
[16:20:18] *** Joins: semeion (~semeion@user/semeion)
[16:21:01] <The-Compiler> CrtxReavr: https://docs.python.org/3/library/py_compile.html#py_compile.compile or https://docs.python.org/3/library/compileall.html probably?
[16:21:13] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:22:41] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[16:23:09] *** Joins: ano (~ano@user/ano)
[16:23:11] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[16:23:31] *** Parts: Amnesia (~Amnesia@user/amnesia) ()
[16:23:32] <bjs> ldericher: not really,  and brackets like that are starting to become complexity too much for regex to handle generally. (e.g. the classic "write a regex that matches balanced parens")
[16:25:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[16:25:36] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[16:25:45] *** Quits: shiriru (~shiriru@user/shiriru) (Quit: Leaving)
[16:26:46] *** Joins: fikran (~fikran@user/fikran)
[16:27:34] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[16:29:41] <CrtxReavr> The-Compiler, I *think* that's what I'm looking for. . . thanks.
[16:29:42] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[16:29:46] *** Joins: src (~src@user/src)
[16:29:47] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 264 seconds)
[16:29:57] *** Joins: nomic (~nomic@185.198.243.184)
[16:30:22] *** Joins: lz_ (l@gateway/vpn/protonvpn/lz/x-63480406)
[16:30:42] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Client Quit)
[16:30:43] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[16:30:47] *** Joins: x2f (~liveuser@45.183.79.27)
[16:30:52] <lz_> hello! I'm struggling with virtualenv; is it possible to uninstall "locally" a package that was installed "globally" ?
[16:31:06] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[16:31:09] <lz_> I did pipenv uninstall package but it still seems to be available
[16:31:18] *** Joins: djhankb (~djhankb@208.113.164.68)
[16:31:19] <lz_> and I'm on windows
[16:31:20] *** Quits: x2f (~liveuser@45.183.79.27) (Quit: weeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee)
[16:31:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[16:31:47] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:31:50] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[16:32:21] *** Joins: ano (~ano@user/ano)
[16:32:36] *** Joins: hendursaga (~weechat@user/hendursaga)
[16:33:13] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[16:33:36] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:34:27] *** Joins: bloody (~bloody@user/bloody)
[16:35:22] *** Joins: x2f (~x2f@45.183.79.27)
[16:37:05] *** Joins: mike18 (~geri@217-149-167-230.nat.highway.telekom.at)
[16:37:38] <burakcank> lz_: virtualenv and global env are two separate environments
[16:37:49] <burakcank> they can have different versions of the same package
[16:37:51] <mike18> i use mypy and get this error: error: Need type annotation for "t1_q" ... code: t1_q = queue.Queue()
[16:37:57] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[16:37:59] <mike18> how can you add a type annotation here?
[16:38:47] *** Quits: nomic (~nomic@185.198.243.184) (Quit: Leaving)
[16:39:00] <lz_> that's what I was expecting but I think I can't get my venv to work
[16:39:34] <lz_> the venv still seems to see "global" packages, and if I uninstall them it removes them globally
[16:40:32] <The-Compiler> mike18:   t1_q: queue.Queue[int] = queue.Queue()   (assuming Python 3.9+)
[16:40:35] *** Joins: Klinda (~superleag@user/klinda)
[16:40:38] <mike18> oh int?
[16:40:45] <The-Compiler> mike18: well, whatever is in your queue
[16:40:49] <jinsun> or object
[16:40:53] <mike18> yeah
[16:40:55] <jinsun> if you want anything
[16:40:56] <lz_> wait I didn't call activate :o)
[16:41:00] <The-Compiler> jinsun: that'd be Any, not object
[16:41:02] <burakcank> lz_: are you using python venv module or pipenv ?
[16:41:13] <bjs> The-Compiler: no you use object to say it accepts anything
[16:41:17] <burakcank> lz_: probably yep
[16:41:20] <bjs> Any means "dont typecheck"
[16:42:07] <The-Compiler> bjs: I'm well aware, but "object" doesn't mean "accepts anything" in practice, it means something like "any operation on this thing will be invalid"
[16:42:25] <The-Compiler> bjs: which usually isn't very useful
[16:42:27] <bjs> The-Compiler: the queue doesn't do any operations, and so a queue that accepts anything is a Queue[object]
[16:42:44] <jinsun> object works unless you want to use use some operation that doesn't work on all objects
[16:42:48] <bjs> ^
[16:43:00] <The-Compiler> you'd usually want to do something with the things you get out of the queue, no?
[16:43:19] <mike18> The-Compiler: but why .Queue here? queue.Queue[int] = queue.Queue()
[16:43:26] *** Joins: nomic (~nomic@185.198.243.184)
[16:43:29] <bjs> mike18: because it's a Queue
[16:43:44] <mike18> meaning t1_q.Queue[object] = queue.Queue() ?
[16:43:45] <bjs> mike18: like how `x: int = 42` you say int because x is an int
[16:44:02] <mike18> t1 is the name btw
[16:44:06] <mike18> t1_q
[16:44:18] <mike18> will i need to use t1_q.Queue[object] everywhere?
[16:44:19] <bjs> mike18: no `queue.Queue[int]` is the annotation, that tells mypy what type it is
[16:44:23] <bjs> no
[16:44:27] <The-Compiler> mike18: no, . and : mean two very different things here
[16:44:40] <mike18> i use self.t1_q in the rest of code...
[16:44:43] <bjs> mike18: like when you say `x: int = 42` the int part is just the annotation, it's just to tell mypy what type iti s. You just use `x` normally in the code.
[16:44:49] <jinsun> The-Compiler: yeah then Any is the convenient thing to use, better would be an exact type or Protocol, or slightly less conveneint typing.cast before doing the operation
[16:44:56] <bjs> mike18: yes so `t1_q : queue.Queue[int] = ...` then you use t1_q normally
[16:45:07] <mike18> ah
[16:45:10] <mike18> that makes more sense
[16:45:12] <The-Compiler> mike18: so probably  self.t1_q: queue.Queue[int] = ...   in that case
[16:45:58] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:46:18] <The-Compiler> jinsun: I guess it depends on how (if at all) you want to find out what things get out of the queue. But I don't think there's a blanket answer regarding whether to use object or Any.
[16:46:32] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Quit: Leaving)
[16:47:22] *** Quits: elkclone (~elkclone@user/elkclone) (Quit: Leaving)
[16:47:42] *** Joins: Gaming4LifeDE (~Gaming4Li@a89-182-119-188.net-htp.de)
[16:48:19] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567377-189.dhcp.inet.fi)
[16:51:15] <queue[m]> dont @ me
[16:51:17] <Gaming4LifeDE> Hi. Do you guys have a suggestion how i can implement something? I'm trying to build a rest api server using flask. the problem is that i want to launch jobs which can take upwards of a minute. does anyone have an idea how i can do it with threading or multiprocessing? the next problem is that i need to return data to the main thread/process after
[16:51:18] <Gaming4LifeDE> the job is done. I don't really want to have a database as a message broke if i don't have to
[16:53:45] *** Joins: shad1 (~shad@user/shad)
[16:54:06] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[16:54:09] *** shad1 is now known as shad
[16:54:20] <vladoski> it's possible to attach another where to a sqlalchemy core query after creating it?
[16:54:26] <vladoski> so after a limit()
[16:54:33] <vladoski> or after a with_only_columns
[16:57:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[16:57:30] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[16:57:41] <raek> Gaming4LifeDE: increase the number of web server worker threads and let the server deal with it? (somebody who is more familiar with the ecosystem might have a better suggestion)
[16:58:11] <Gaming4LifeDE> flask is an application server library so i don't have a deciated webserver
[16:58:31] *** Joins: ano (~ano@user/ano)
[16:59:10] <raek> what server do you use when deploying your app?
[16:59:29] <raek> I've been using gunicorn myself and it has a -w option to set the number of workers
[16:59:37] <Gaming4LifeDE> just flask i think
[16:59:44] <Gaming4LifeDE> it's suppose to be light on resources
[16:59:50] <Gaming4LifeDE> *supposed
[16:59:59] *** Joins: pro_z_ (~pro_z@37.214.46.4)
[17:00:55] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:01:01] <grym> Gaming4LifeDE: flask's docs tell you that its built in webserver is not meant for production
[17:01:04] <grym> fwiw
[17:01:15] <Gaming4LifeDE> maybe caddy then, idk
[17:01:36] <raek> ah, --threads is different from --workers
[17:02:00] <Gaming4LifeDE> idk, doing multiple things at the same time in any way is a first for me
[17:02:11] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:5f1f:cd87:7934:7314) (Ping timeout: 264 seconds)
[17:02:39] <raek> do the jobs interact with any common resource or are they completely independent?
[17:02:41] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:63c8:f04e:ea2f:5050)
[17:02:44] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[17:04:25] *** Joins: horseface (~horseface@user/horseface)
[17:05:08] <raek> it seems like in gunicorn, a "worker" is a python process that handles HTTP requests. so if you have 4 workers, you have 4 python instances each running your flask app
[17:05:49] <grym> raek: more or less
[17:06:01] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[17:06:49] <raek> ...and that if the worker type is "gthread" then each worker can run multiple threads to process requests (in the same process)
[17:07:13] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[17:08:15] <raek> grym: which part of my description is the most inaccurate?
[17:08:50] *** Quits: jiehuan (~jiehuan@39.190.193.76) (Ping timeout: 260 seconds)
[17:09:01] <Gaming4LifeDE> i don't get anything of what you guys discussed lol
[17:09:32] <grym> raek: i think it's all correct, i mistrust my own understanding somewhat though
[17:09:39] <Gaming4LifeDE> they are independent. they get assigned a task (i.e. data as a parameter) and should return data to the parent process, which the parent process should handle
[17:11:41] <DnzAtWrk> god
[17:11:54] <DnzAtWrk> Pandas seems like it just lacks common sense
[17:12:05] <DnzAtWrk> things that just work using numpy as confusing and wierd using pandas
[17:12:11] <DnzAtWrk> is*
[17:12:18] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[17:12:49] <DnzAtWrk> this is the third time today I have issues simply assigning a value to a cell
[17:13:02] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[17:13:03] <grym> DnzAtWrk: pandas is 8 APIs in a trenchcoat
[17:13:09] <grym> and there's some friction that results
[17:13:37] <mav`rik> DnzAtWrk: that same sentence works in many situations: "numpy seems like it just lacks common sense, things that just work using Python are confusing and wierd using numpy"
[17:13:44] <DnzAtWrk> I think most of the issues stem from it acting as both FP and as a traditional object
[17:14:04] <DnzAtWrk> there are like 5 different ways to assign values
[17:14:13] <DnzAtWrk> and a bunch of different ways to index things
[17:14:38] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[17:14:38] *** Joins: RiFo (~RiFo@user/rifo)
[17:14:45] <DnzAtWrk> the whole indexing concept in general is fairly useless imo
[17:14:49] <DnzAtWrk> as a simple column could do the same job
[17:15:03] <raek> Gaming4LifeDE: ok, so each job is just a pure number crunching computation?
[17:15:46] <Gaming4LifeDE> basically.. it's running an external process  using subprocess.run
[17:16:47] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[17:17:48] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:18:38] *** Joins: tobybl (~tobybl@213.31.135.91)
[17:19:08] <SnoopJ> DnzAtWrk, people often use pandas for tasks that would fit entirely within numpy because they like the indexing, and the way you do heterogeneous columns in numpy is kind of obscure.
[17:19:26] <raek> Gaming4LifeDE: you could try running you app like this: gunicorn --workers 10 your.module:app
[17:19:26] <DnzAtWrk> I'd assume that quite often it's just because it's what they're told to do by tutorials
[17:19:30] <SnoopJ> it does have some indexing semantics that numpy strictly does not (like MultiIndex)
[17:19:36] <raek> and vary the number of workers to see how that works out
[17:19:40] <DnzAtWrk> I really can't get this to work
[17:19:49] <DnzAtWrk> products.at['status', index] = 'ONLINE'
[17:19:56] <SnoopJ> and there is also the concept of an Index itself, if you want to index by e.g. datetime objects
[17:19:57] <DnzAtWrk> products.status[index] == 'ARCHIVED'
[17:19:59] <DnzAtWrk> why
[17:20:01] <raek> if you set it to 1 I expect all requests to be served sequentially
[17:20:05] <Gaming4LifeDE> can't really go for fixed workers because for a long time you can either have no requests or a ton at once
[17:21:09] <Gaming4LifeDE> so i can't really have a rigid solution. I want the server to accept the request, start a new thread, reply that it was started (with an id) and the client can ask for the status/result via id
[17:21:44] <raek> ah, so you want a response to be sent before it completes...
[17:23:17] <raek> the ID creation need to be unique across worker processes though. so either a synchronized counter or randomly generated IDs...
[17:24:11] *** Quits: orangeextract (~orangeext@user/orangeextract) (Quit: Leaving)
[17:24:27] <SnoopJ> DnzAtWrk, DataFrame.at is like DataFrame.loc, but explicitly for single pairs (i.e. you can't do a whole range of rows)
[17:24:30] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[17:25:05] <DnzAtWrk> I'm doing single values
[17:25:26] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Ping timeout: 260 seconds)
[17:25:36] *** Joins: BUSY (~BUSY@user/busy)
[17:25:52] <Gaming4LifeDE> raek no just the parent process needs to know the id i think
[17:26:06] <Gaming4LifeDE> the worker process doesn't respond with anything to the client
[17:26:21] <jinsun> DnzAtWrk: when you assing you give status as the row name and index as the column name
[17:26:25] <SnoopJ> DnzAtWrk, I would probably just use .loc, personally
[17:26:35] <raek> Gaming4LifeDE: so you want the client to block until the job is complete?
[17:26:36] <DnzAtWrk> oh for petes sake
[17:26:38] <DnzAtWrk> wrong way
[17:27:00] <jinsun> DnzAtWrk: but when you access it later you are using status as the column name and index as the row name
[17:27:00] <Gaming4LifeDE> basically i want the parent process to keep a list of job with each job being a dict. then i want to give the worker process a job (as a dict or anything else) and just return the result
[17:27:12] <raek> you might need to tweak the HTTP clients you are using to increase their timeouts
[17:27:15] <SnoopJ> they do at least maintain a section of their docs related to the mess that is indexing: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html
[17:27:23] <Gaming4LifeDE> raek if it blocks the api server couldn't respond to more requests
[17:27:29] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[17:27:30] *** Joins: Roey (~Roey@user/Roey)
[17:27:32] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-793f-39d2-9560-b7d9.res6.spectrum.com)
[17:27:33] <summonner> Gaming4LifeDE, create a queue, and each worker picks up a job of the queue
[17:27:39] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[17:27:49] <summonner> if no jobs available, the worker blocks
[17:27:57] <Gaming4LifeDE> summonner and how can i pass data?
[17:28:21] <summonner> queues are thread safe, you can pass jobs  around via them
[17:28:27] <Gaming4LifeDE> don't care about workers blocking, just about the main thread... if that blocks, no more requests can be answered
[17:28:52] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-793f-39d2-9560-b7d9.res6.spectrum.com) (Client Quit)
[17:29:05] <summonner> Gaming4LifeDE, you're using gnunicorn behind nginx right?
[17:29:15] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-793f-39d2-9560-b7d9.res6.spectrum.com)
[17:29:21] <Gaming4LifeDE> no, just flask and flask_restful right now
[17:29:32] <Gaming4LifeDE> seemed easy to use to me
[17:29:37] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Ping timeout (120 seconds))
[17:29:40] <summonner> run flask in the threaded mode, much faster
[17:29:48] <raek> got to go. sorry.
[17:29:51] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[17:29:52] <Gaming4LifeDE> how does that work? can you explain?
[17:30:01] <grym> fastAPI gives you async for free, fwiw
[17:30:03] <Gaming4LifeDE> alright raek, thanks for your input!
[17:30:11] <grym> but otherwise feels like flask
[17:30:17] *** Joins: grooverman (~grooverma@177.102.119.49)
[17:30:28] <summonner> apologies I'm at the office and just observing, you'd need to check the flask readthedocs to get the specifics
[17:30:43] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[17:31:17] *** Joins: djhankb (~djhankb@208.113.164.68)
[17:32:05] <Gaming4LifeDE> grym interesting. i'm reading the website right now. i just want something simple which can run on a small vm
[17:32:40] <summonner> Gaming4LifeDE, I do have a question - " the next problem is that i need to return data to the main thread/process after"  can you elaborate on that? my suggestion might change if I know more
[17:33:03] *** Quits: dav1d (~dav1d@user/dav1d) (Ping timeout: 250 seconds)
[17:33:07] <Gaming4LifeDE> just like a method doing a return
[17:33:22] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[17:33:42] *** Joins: superboot (~agentgasm@user/superboot)
[17:34:57] <summonner> right well then you cannot get around blocking and you might exhaust your 10 workers if it runs too long.
[17:35:19] <grym> Gaming4LifeDE: if you're willing to accept lines of code you have to write as a proxy for simplicity, i have turned flask projects into fastAPI projects and deleted hundreds of lines of code every time
[17:35:37] <Gaming4LifeDE> how does that work?
[17:35:40] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 265 seconds)
[17:36:12] <summonner> Gaming4LifeDE,  run the 10 see how much memory it takes, run it for 20 and see the difference then scale up. None of this is important at the moment though, make your app first and then worry about optimization
[17:36:47] <SnoopJ> +1, "Make things work. Profile. Make things fast. In this order."
[17:36:57] <mav`rik> grym: free-ish, you've still got the issue with GIL/CPU-bound code
[17:37:06] <Gaming4LifeDE> i don't really need to optimize much i think, it just needs to handle ~ 10 connections at most. i just don't want 10 threads sitting there doing nothing
[17:37:18] *** Joins: dav1d (~dav1d@user/dav1d)
[17:37:34] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[17:37:39] <SnoopJ> mav`rik, you can run ASGI workers in subprocesses though, re: the GIL
[17:37:57] <mav`rik> Sure, still something you need to be aware of though
[17:38:01] <SnoopJ> of course
[17:38:37] *** Joins: yeirr (~yeirr@user/yeirr)
[17:38:40] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:f4aa:bec3:f131:5cd4) (Quit: Konversation terminated!)
[17:39:29] <Gaming4LifeDE> summonner you meant basically this? https://fastapi.tiangolo.com/tutorial/background-tasks/
[17:39:39] <grym> those will get you pretty far
[17:39:54] <grym> to go all the way you probably want celery :/
[17:41:48] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[17:41:58] *** Joins: anonymeowo (~anonymeow@81.215.72.145)
[17:41:58] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-ece3-cc37-fd43-8bc7.res6.spectrum.com) (Quit: Leaving.)
[17:42:30] *** Joins: han-solo (~hanish@user/han-solo)
[17:42:38] <Gaming4LifeDE> well i just need to add the response from the background task to the db an make that accessible
[17:42:51] <Gaming4LifeDE> don't know how though
[17:43:04] <Gaming4LifeDE> or maybe have the workers talk to some kind of backend? idk
[17:43:07] *** Joins: daimbag (daimbag@2607:5300:60:21b::1)
[17:43:18] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:45:22] <Gaming4LifeDE> stuff like redis or so take way too much ram for just being a simple key value store havingo like one lookup every 10 seconds up to 10 hours or so
[17:45:49] *** Quits: vladoski (~vladoski@2001:b07:add:d406:87fe:db5:9ac5:8458) (Ping timeout: 252 seconds)
[17:46:39] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[17:47:34] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:49:10] *** PublicWifi is now known as McDonaldsWiFi
[17:49:24] *** McDonaldsWiFi is now known as MaccasWiFi
[17:50:34] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:51:59] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 264 seconds)
[17:52:34] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[17:52:35] *** Quits: jrjsmrtn (~jrjsmrtn@ip-193-121-2-145.dsl.scarlet.be) (Ping timeout: 260 seconds)
[17:53:11] *** Joins: jrjsmrtn (~jrjsmrtn@ip-83-134-174-201.dsl.scarlet.be)
[17:53:42] *** MaccasWiFi is now known as PublicWiFi
[17:56:05] *** Quits: ubert (~Thunderbi@178.165.203.151.wireless.dyn.drei.com) (Remote host closed the connection)
[17:56:06] *** ub is now known as ubert
[17:56:36] *** Quits: km (~km@user/km) (Remote host closed the connection)
[17:56:52] *** Joins: km (~km@user/km)
[17:57:15] *** Quits: carl- (~carl-@185.103.188.130) (Ping timeout: 260 seconds)
[17:59:00] *** Joins: zebrag (~chris@user/zebrag)
[17:59:31] *** Quits: km (~km@user/km) (Remote host closed the connection)
[17:59:55] *** Joins: km (~km@user/km)
[18:01:35] *** Quits: yac (~user@user/yac) (Ping timeout: 264 seconds)
[18:02:24] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[18:03:01] *** Quits: km (~km@user/km) (Remote host closed the connection)
[18:03:20] <SnoopJ> mefistofeles, the fix for that scalene problem appears to be in, but it looks scary... https://github.com/plasma-umass/scalene/commit/f57a3701c152b49db1157eee616d95c7122aa2fc
[18:03:23] *** Quits: mawk (~mawk@wireguard/contributor/mawk) (Ping timeout: 264 seconds)
[18:03:33] <mefistofeles> SnoopJ: yeah, I saw that
[18:03:37] *** Joins: km (~km@user/km)
[18:03:43] *** Joins: Thanatos (~Thanatos@102.89.1.74)
[18:03:47] <SnoopJ> I would think a warning would still be appropriate if it can't find one of the symbols?
[18:04:10] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[18:04:15] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 260 seconds)
[18:04:26] <SnoopJ> "Can't find [blah blah] (note: this is benign if you preloaded)"
[18:04:50] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 260 seconds)
[18:05:02] <SnoopJ> or even just the first part
[18:05:03] *** Joins: yac (~user@user/yac)
[18:06:45] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[18:06:48] *** Joins: FluffyMask (~masque@user/fluffymask)
[18:07:30] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:07:46] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:07:56] <mefistofeles> SnoopJ: wait, I don't get the logic, it's now inverted
[18:08:57] *** Quits: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[18:09:01] <mefistofeles> I have the feeling this won't work for me, but will have to check
[18:09:31] <SnoopJ> mefistofeles, I'm looking through the other commits and seeing some other fixes that are relevant, but the old spelling is `if (either is nullptr) { fail }  init_allocators() ` and the new spelling is `if (neither is nullptr) { init_allocators(); }`
[18:09:38] *** Joins: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[18:09:55] <mefistofeles> SnoopJ: ok yes, I get that
[18:10:40] <mefistofeles> so I guess before at least onie of them was nullptr, and now we hope that at least one of them isn't
[18:10:45] <mefistofeles> *one
[18:11:40] <mefistofeles> agh, I don't know, I'll just try it and see in a few mins/hours
[18:12:00] <SnoopJ> mefistofeles, it doesn't touch the PyMem_* API if either of the symbols can't be loaded, is how I read the PR
[18:12:52] *** Joins: qlixed (~qlixed@181.44.129.13)
[18:13:28] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[18:13:58] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[18:14:01] <mefistofeles> SnoopJ: yeah, that
[18:14:11] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:14:26] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 260 seconds)
[18:14:26] *** ayusta is now known as ayustae
[18:14:51] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[18:15:39] *** Quits: arseru (uid515527@user/arseru) (Quit: Connection closed for inactivity)
[18:16:14] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[18:16:47] <Togra> so comparing random and secrets, would I generally want to use secrets every time, always, even if for RNG for a game and not for security related stuff?
[18:16:49] <SnoopJ> mefistofeles, looks like #287 is relevant too. I'm writing a comment on the issue in case anybody's been spectating like I have been...
[18:17:03] <Togra> as far as I can tell from the docs, secrets is like random, but better in every way
[18:17:50] <SnoopJ> Togra, random is probably the better choice if it's non-cryptographic, making crypto-strong random numbers is rarely computationally cheap compared to "gimme some entropy"
[18:17:55] <arkanoid> Hello. What's the best way to bundle python and it's env in a portable C application? I'm already succeeding in running builtin modules from C, but I'm fails to make it portable and usable with pip installed packages
[18:18:00] <Togra> ah ok, that makes sense
[18:18:46] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[18:18:56] <SnoopJ> Togra, the secrets module docs even point out that random is more explicitly for modeling/simulation, but does NOT prioritize security
[18:19:14] <Togra> yeah, I just wasn't sure why
[18:19:16] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[18:19:42] <Togra> both give me random things, and I would assume that secrets would be more expensive, but both have methods that do about the same thing
[18:19:45] <SnoopJ> Togra, mostly because it's hard to generate crypto-strong random numbers, but it's pretty easy to generate things that are "random enough"
[18:19:51] <Togra> ah ok
[18:20:04] <Togra> so for games, especially if it comes up frequently, go with random for the performance boost?
[18:20:26] <SnoopJ> Togra, more like "use secrets when you are protecting a secret, use random otherwise"
[18:20:33] <Togra> that makes sense
[18:20:47] *** Quits: ubert (~Thunderbi@178.165.203.151.wireless.dyn.drei.com) (Remote host closed the connection)
[18:21:24] *** Joins: Sadale (~Sadale@user/sadale)
[18:21:55] <SnoopJ> Togra, I would recommend you also make your own instance of `random.Random` and call methods on that. The module-level functions use a 'default' instance that is shared among all users, so non-determinism sneaks in easily.
[18:22:40] <Togra> I think I might be doing that, my code has one "get a random int" method that increments the seed each time it's used
[18:23:13] <SnoopJ> you probably don't want to increment the seed, the instance should take care of advancing its own state
[18:23:22] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:23:30] <Togra> oh no it looks like it doesn't, I'll change that
[18:23:48] <SnoopJ> but the state is basically the core of the security concern here: many PRNGs you'd use for "some random numbers" can be predicted perfectly if you observe them for long enough.
[18:24:08] <Togra> well, in this case it is for a game, so while that could be obnoxious, no one'll get hurt
[18:24:11] <SnoopJ> yep
[18:24:15] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[18:24:23] <Togra> but not having to mess around with the seed would be nice
[18:24:46] <SnoopJ> yea I dunno what's up with that, if you have a small example you can extract, maybe share it
[18:24:59] *** Quits: horseface (~horseface@user/horseface) (Quit: STOP, DROP, AND ROLL. IT IS HAMMER TIME!!!)
[18:25:07] *** Joins: Payam (~Payam@138.106.57.132)
[18:25:09] <Togra> yeah, I'll get it
[18:25:28] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[18:25:31] <Payam> Do you guys know how to open a terminal in python? A terminal window with a specified directory?
[18:26:19] <Togra> https://paste.ee/p/fA5ku here's my two random-getting methods
[18:26:28] <Togra> simple, they do the stuff, not necessarily the cleanest ever lolol
[18:26:34] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 260 seconds)
[18:26:55] <Togra> I've used input() for terminal type things but I don't think that's what you want
[18:27:15] <grym> Payam: subprocess.Popen([your, custom,terminal, stuff, here ])
[18:27:39] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:27:40] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: The Lounge - https://thelounge.chat)
[18:28:23] <Togra> a lot of the random type stuff is like, "this character has died, what is the chance, from 0 to 100, that the items drop?" and that check is done on each item individually that the character was holding, with each item having a value that I gave it based on how nice I want to be to the player
[18:28:38] <Togra> or "a weapon is being used, how much damage between min and max is actually dealt this time"
[18:29:29] *** Joins: anonymeow (~anonymeow@5.34.180.230)
[18:29:32] <Payam> grym thanks, how will this open a new window of terminal?
[18:29:35] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[18:30:05] <grym> Payam: that entirely depends on the terminal you call, and the arguments you pass to it
[18:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[18:31:03] *** Joins: djhankb (~djhankb@208.113.164.68)
[18:31:28] *** Quits: anonymeowo (~anonymeow@81.215.72.145) (Ping timeout: 252 seconds)
[18:31:59] *** Quits: Jonopoly (~Jonopoly@user/jonopoly) (Quit: WeeChat 3.3)
[18:32:21] *** Quits: anonymeow (~anonymeow@5.34.180.230) (Remote host closed the connection)
[18:32:39] *** Joins: anonymeowo (~anonymeow@5.34.180.230)
[18:32:39] <Togra> the seed is also initially set to time.time() somewhere else in the code, it's the varcommon one that's used in that paste
[18:33:03] <SnoopJ> Togra, ah, I see, you're incrementing your own internal seed. Yea, this looks like you should probably store a Random instance inside `engine` and get your random numbers like `engine.random.randint(low, high)`
[18:34:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:34:13] <SnoopJ> short doodle showing that Random does change its own state when you get numbers out of it: https://bpa.st/7UEQ
[18:34:33] *** Joins: pro (~pro@user/pro)
[18:34:36] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 258 seconds)
[18:34:42] <lidless> that's good isn't it?
[18:34:43] <SnoopJ> and keeping your own instance means that your state advances only when *you* use it, no possibility that importing some 3rd-party library will suddenly change your stream of random numbers
[18:34:57] <Togra> oh, ok yeah, that makes sense. sounds like it could get messy
[18:35:02] <SnoopJ> very
[18:35:39] <lidless> I still have this hardware PRNG that has never seemed to work. I should try it out again
[18:35:42] <SnoopJ> it's a huge problem in scientific programs because people love to call `random.seed()` and when two libraries do this Bad Things can happen
[18:35:52] <SnoopJ> lidless, hardware *P*RNG?
[18:36:07] *** Joins: fikran (~fikran@user/fikran)
[18:36:09] <SnoopJ> is it just a little CPU churning away or something?
[18:36:10] <lidless> I say P because.. who knows?
[18:36:51] <lidless> This thing: https://onerng.info/
[18:37:14] <lidless> I suppose "RNG" is appropriate. Anyhoo - the docs are sparse and I've never been able to verify its function
[18:37:41] <SnoopJ> avalanche diode and optional RF, neat
[18:37:51] <lidless> neat indeed :D
[18:38:26] <SnoopJ> sampling some RF noise is pretty decent quality unless you think your adversary is going to attack that way
[18:38:29] <lidless> I got it for an air-gapped pi, to generate GPG keys
[18:38:37] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[18:38:40] <lidless> yes - that's a good point, and they certainly can
[18:38:41] <SnoopJ> that was the gold standard for OTPs during the cold war AFAIK
[18:38:47] <lidless> oh wow
[18:39:46] <SnoopJ> these days there are commercial units that do [quantum nonsense] and spit out random numbers.
[18:39:48] *** Joins: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net)
[18:39:55] <SnoopJ> (they aren't particularly cheap, though!)
[18:40:06] *** Joins: legola (~legola@46.235.101.181)
[18:40:37] <lidless> heh, until we re-discover that the quantum randomness isn't random at all. It's good to see progress though
[18:40:39] *** Joins: horseface (~horseface@user/horseface)
[18:41:08] <SnoopJ> if someone manages to cook up a hidden-variable theory that un-violates Bell's inequality it will be quite a stunt
[18:41:27] *** Joins: Klinda (~superleag@user/klinda)
[18:41:53] * SnoopJ is content to put the EPR "paradox" in the grave, there are enough nails in that coffin
[18:42:29] * lidless nods nods
[18:42:49] *** Joins: mud (~mud@user/kadoban)
[18:42:54] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:43:01] *** Parts: pro (~pro@user/pro) (WeeChat 3.3)
[18:43:03] *** Quits: dambuster (~dambuster@185.193.170.225) (Quit: Leaving)
[18:43:16] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Quit: Leaving)
[18:43:43] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[18:44:48] <SnoopJ> Togra, if you're curious about why PRNGs might be bad for crypto, this is a fun historical example that Donald Knuth called "truly horrible": https://en.wikipedia.org/wiki/RANDU
[18:45:46] <lidless> I like to refer to the Debian catastrophe where the base installs had their SSH private keys seeded from the process id
[18:45:57] <lidless> This is good too!
[18:46:11] <SnoopJ> LCGs turn out to be not-random in a particularly awful way that makes them pretty bad even for non-cryptographic usage
[18:49:37] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 265 seconds)
[18:53:21] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:54:01] *** Quits: m1n10n (~r41d1n@cpe-76-184-204-251.tx.res.rr.com) (Ping timeout: 252 seconds)
[18:55:18] *** Joins: m1n10n (~r41d1n@cpe-76-184-204-251.tx.res.rr.com)
[18:56:25] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--a1.oracle-ocna.com)
[18:59:38] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:00:48] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:01:15] <Payam> now I can open a terminal window from Python, how ever I want to do a `cd` and `ls` in that terminal window. Can I pass any argument to that from python?
[19:01:33] *** Joins: pycurious (~Adium@user/pycurious)
[19:01:43] <pycurious> Any ideas on how to speed this code up -> https://dpaste.org/syY6 (PIL Image)
[19:03:14] <grym> Payam: you can interact with spawned processes with Popen().communicate
[19:04:17] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[19:04:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[19:04:54] <Payam> can you give me a simiple example where you actually send a command?
[19:05:34] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[19:06:05] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[19:06:32] <Payam> grym https://bpa.st/S4JQ
[19:06:43] <Payam> It opens the terminal but doesn't cd
[19:06:47] *** Joins: zommKa (~ccctttmat@2001:470:69fc:105::b947)
[19:07:09] *** Gustavo6046_ is now known as Gustavo6046
[19:08:16] *** Quits: horseface (~horseface@user/horseface) (Quit: STOP, DROP, AND ROLL. IT IS HAMMER TIME!!!)
[19:08:38] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[19:10:10] *** Quits: zepolen (~zepolen@2a02:587:862e:2f17:a8c2:4429:98dd:c961) (Ping timeout: 260 seconds)
[19:10:53] *** Joins: thiras (~thiras@user/thiras)
[19:11:55] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:12:00] *** Quits: bdeshi (~bdeshi@bdeshi.space) (Quit: bouncer disconnect)
[19:12:04] <grym> Payam: hmm.
[19:12:57] *** Joins: bdeshi (~bdeshi@bdeshi.space)
[19:14:10] *** Quits: RiFo (~RiFo@user/rifo) (Ping timeout: 260 seconds)
[19:14:41] <nedbat> pycurious: other than updating rowcount, that looks like masking an image.
[19:14:54] <nedbat> pycurious: and rowcount should be pixelcount, right
[19:14:56] <nedbat> ?
[19:15:06] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 260 seconds)
[19:15:47] *** Quits: Payam (~Payam@138.106.57.132) (Quit: Client closed)
[19:17:11] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 264 seconds)
[19:21:22] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[19:22:08] *** Joins: nikkc (~nikkc@2603-7080-0103-7aa9-3561-4b05-ce75-e79e.res6.spectrum.com)
[19:22:24] <nikkc> why does this ( https://bpa.st/PGGA ) print true while this ( https://bpa.st/IHHQ ) prints false?
[19:22:49] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:22:54] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 258 seconds)
[19:22:58] *** Quits: legola (~legola@46.235.101.181) (Remote host closed the connection)
[19:23:15] *** Joins: e2m4n (~ezman@user/e2m4n)
[19:23:16] *** Joins: rfm (~rfm@user/rfm)
[19:23:46] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:23:54] <phy1729> zip returns an iterator and you exhausted it
[19:23:54] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[19:24:39] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[19:24:40] <nikkc> @phy1729 ty
[19:25:01] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[19:25:43] *** Joins: ialokin (~ialokin@user/ialokin)
[19:26:36] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[19:27:05] *** Quits: anonymeowo (~anonymeow@5.34.180.230) (Ping timeout: 260 seconds)
[19:27:05] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:27:35] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[19:28:44] *** Joins: akk (~akk@75.161.146.115)
[19:28:56] *** Joins: djapo (~archangel@user/djapo)
[19:30:44] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[19:31:07] *** Joins: anonymeowo (~anonymeow@5.34.180.230)
[19:31:16] *** Quits: wolfgang (~wolfgang@101.174.167.116) (Remote host closed the connection)
[19:31:17] *** Joins: djhankb (~djhankb@208.113.164.68)
[19:32:20] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[19:34:14] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 260 seconds)
[19:34:35] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 264 seconds)
[19:35:17] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:79eb:ea87:6f38:cccf) (Ping timeout: 256 seconds)
[19:36:55] *** Joins: audiobirb (~audio@2603-8081-1800-1546-0d8f-fc32-e8a3-87bf.res6.spectrum.com)
[19:39:08] *** Joins: stdout (~stdout@216.163.21.11)
[19:39:27] *** Quits: m1n10n (~r41d1n@cpe-76-184-204-251.tx.res.rr.com) (Quit: GoodBye)
[19:41:41] *** Joins: Elodin (~weechat@user/elodin)
[19:43:46] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:44:07] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[19:44:15] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Remote host closed the connection)
[19:44:35] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 260 seconds)
[19:46:20] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 260 seconds)
[19:47:34] *** Joins: Klinda (~superleag@user/klinda)
[19:48:09] *** Joins: W7 (~W7@172.87.12.111)
[19:48:23] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 264 seconds)
[19:49:54] *** tris is now known as empty_string
[19:50:01] *** empty_string is now known as tris
[19:51:25] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[19:52:02] <W7> I am trying to write a minesweeper program with tkinter and i installed tkinter using pip and whenever i try to run it it says no module named tkinter
[19:52:10] *** Quits: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net) (Ping timeout: 260 seconds)
[19:53:01] <nedbat> W7: you shouldn't have to install tkinter though?
[19:53:45] <Saxtheowl> Why does it return true when I do "if "1" in list_of_one: " and list_of_one contain only ["00"]
[19:54:05] *** Quits: nomic (~nomic@185.198.243.184) (Quit: Leaving)
[19:54:06] <W7> i have to install tkinter as it was missing for some reason also i am running xubuntu 21.10 nedbat
[19:54:30] <nedbat> W7: ok, use python to install:  python -m pip install ....
[19:54:43] <nedbat> Saxtheowl: not sure, can you link us to the program?
[19:55:13] <grym> W7: you might need tk-dev
[19:55:17] <grym> W7: from apt
[19:55:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[19:55:33] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[19:55:40] <Saxtheowl> https://bpa.st/GUKQ
[19:55:40] <grym> W7: err, python-tk, sorry
[19:55:55] <Saxtheowl> I receive things like "00100001011110"
[19:56:15] <Saxtheowl> And I have to return 1 if there is no "1" in input
[19:56:26] <grym> Saxtheowl: what's 'b'
[19:56:48] <Saxtheowl> b = input()
[19:57:01] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 258 seconds)
[19:57:11] <Saxtheowl> im doing this exercise https://www.codingame.com/ide/puzzle/create-the-longest-sequence-of-1s
[19:57:22] *** Joins: RougeR (~rougex250@user/rouger)
[19:57:25] *** Joins: horseface (~horseface@user/horseface)
[19:57:31] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:57:34] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 260 seconds)
[19:57:59] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 264 seconds)
[19:58:20] *** Gustavo6046_ is now known as Gustavo6046
[19:58:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:58:45] *** Quits: rsx (~dummy@ppp-188-174-158-125.dynamic.mnet-online.de) (Quit: rsx)
[19:59:10] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:00:20] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 260 seconds)
[20:01:50] <RougeR> anyone able to give me a hand with this sqlalchemy issue
[20:01:58] <RougeR> https://dpaste.org/xu2z#
[20:03:03] <RougeR> code seems to work but im getting this error
[20:03:04] <RougeR> https://dpaste.org/5KBJ
[20:03:33] *** Joins: Macuser (~Macuser@216.30.159.201)
[20:03:34] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[20:04:10] *** Quits: notepad (~notepad@129.159.46.243) (Quit: The Lounge - https://thelounge.chat)
[20:05:41] *** Joins: notepad (~notepad@129.159.46.243)
[20:05:56] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[20:06:15] *** Joins: alzgh (~alzgh@user/alzgh)
[20:08:47] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:08:55] <sartan> do you want resource_name to be identical between both tables?
[20:09:48] <RougeR> sartan, yeah Integration and User both have a composite primary key of resource_name
[20:09:56] <RougeR> which also act as foreign keys
[20:11:06] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[20:11:47] <aphysically> jinsun: how would you hint the type to narrow to mypy here? https://mypy-play.net/?mypy=latest&python=3.10&gist=fe01115fa1c57827fbb3bd5d851b8f8e
[20:11:51] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:12:11] <sartan> i'm wondering if resource_name = db.Column(sa.String, foreign_keys='Users.resource_name', primary_key=True) would work - but i'm not sure about primary_key=True
[20:13:10] <aphysically> there's an open PR to mypy to narrow this but it's stale; I'm going to open a corresponding issue for pyright
[20:13:15] <RougeR> let me have a look sartan
[20:13:29] *** Joins: raxor2k (~raxor2k@78.158.254.247)
[20:13:33] <raxor2k> bjs: are you here
[20:13:34] *** Quits: Thanatos (~Thanatos@102.89.1.74) (Remote host closed the connection)
[20:13:40] <RougeR> im also debating just puplicating the key and having user_resource_name, integration_resource_name
[20:13:53] <W7> grym nedbat that did not work i am still getting the same error
[20:13:59] <RougeR> and then using orm.synonym perhaps
[20:14:37] <nedbat> W7: can you pastebin what you've done?
[20:14:58] *** Joins: Thanatos (~Thanatos@102.89.1.72)
[20:15:23] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 264 seconds)
[20:16:03] <W7> the python pastebin says 404 page not found
[20:16:11] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[20:16:25] <bjs> raxor2k: yes but you don't have to ask me directly, you can ask the channel
[20:16:25] <grym> W7: https://bpa.st/+python  loads fine for me
[20:16:37] <bjs> Saxtheowl: do you have an example input that goes wrong?  So we can see
[20:17:10] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Ping timeout: 260 seconds)
[20:18:05] <sartan> i think orm.synoym implies those values are expected to be different
[20:18:08] <RougeR> hmmm dont think so sartan? seems like wrong syntax
[20:18:14] <sartan> Sorry RougeR it was a vague idea
[20:18:22] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:18:24] <RougeR> its cool, appreciate the input
[20:19:10] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:19:26] <W7> https://bpa.st/I3UA these are the 3 things i have tried so far and they all say installed tkinter but then i get the error no mudule named tkinter
[20:19:28] <aphysically> jinsun: this is a particularly nasty type checking limitation since you can't fix it with an assert
[20:19:42] *** Joins: emf (~emf@2620:10d:c090:400::5:bb17)
[20:20:03] <bjs> W7: as a quick check, what version of Python are you using exactly? and how did you install it?
[20:20:23] *** Quits: fbiagent__ (~fbiagent@user/fbiagent) (Remote host closed the connection)
[20:20:31] <grym> W7: i may have lead you astray as well; it's probably python3-tk :(
[20:20:39] <W7> i am using python 3 from the ubuntu repositories
[20:20:48] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[20:20:59] <grym> i've kind of forgotten that py2 exists and i get it wrong sometimes
[20:21:07] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[20:21:36] *** Joins: ravan (~ravan@user/ravan)
[20:22:34] <W7> well now it doesn't give me an error it just does nothing
[20:22:51] <bjs> W7: what is "it"
[20:23:48] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[20:24:02] <PJBoy> is it, what is it
[20:24:28] <W7> my terminal is spitting out errors because modules are missing and now i got the tkinter module and i am trying to run a test of some code that generates the field in minesweeper
[20:25:24] <grym> W7: if you can `python3 -c "import tkinter"`, then at least you've got the tkinter stuff sorted
[20:25:30] <grym> if it worked you'll get no output at all
[20:25:33] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567377-189.dhcp.inet.fi) (Quit: Leaving)
[20:25:54] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[20:26:37] <jinsun_> <aphysically> "jinsun: this is a particularly..." <- this is one of the uses of TypeGuard I think
[20:29:04] <jinsun_> because this requires type checker to keep track of the length of the collection, which would require running code or full blown dependent types otherwise maybe
[20:29:08] *** Joins: shad (~shad@user/shad)
[20:29:32] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:29:45] <W7> grym this is the code so far https://bpa.st/YTWA
[20:30:01] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[20:30:07] <aphysically> jinsun_: I think type checkers can add simple narrowing for len checks at least
[20:30:13] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[20:30:18] <aphysically> there's an open PR for mypy that would resolve it https://github.com/python/mypy/pull/10367
[20:30:25] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[20:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[20:31:03] *** Joins: djhankb (~djhankb@208.113.164.68)
[20:32:37] <jinsun> yeah they could special case len checks too
[20:33:51] <grym> W7: ok.  you think you're past the tkinter issue?
[20:34:05] <W7> yes
[20:34:17] <grym> W7: if you execute that code file and nothing happens, it's because you don't call any of the functions
[20:34:22] <grym> you just declare that they exist
[20:35:44] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[20:35:57] <grym> if you call play_bomberdodger() at the bottom, you'll get a NameError, because `layout_window` isn't defined
[20:36:37] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[20:36:51] <jinsun> aphysically: typeguard way https://mypy-play.net/?mypy=latest&python=3.10&gist=7a88942461df4adec2c3e90dd3def260
[20:37:14] *** Joins: djapo (~archangel@user/djapo)
[20:37:20] <aphysically> jinsun: in my PR I did it the casting way https://github.com/willmcgugan/rich/pull/1616
[20:37:36] <W7> grym i forgot to add the line that calls everything and now it works
[20:38:28] <grym> W7: cheers
[20:38:56] <jinsun> aphysically: yeah cast works obviously, and typeguard is kinda a cast too, just that is checked at runtime
[20:39:11] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:42:54] *** Joins: Auron (~Auron956@user/auron)
[20:43:30] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[20:44:05] <aphysically> jinsun: yeah ideally we would check the single case with a typeguard since the other cases are large
[20:44:26] <aphysically> I assume typeguard is in typing_extensions so if that works I might check that out
[20:44:37] *** Joins: magla (~gelignite@55d4ee8d.access.ecotel.net)
[20:45:25] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:45:28] *** Joins: fikran (~fikran@user/fikran)
[20:45:34] *** Joins: mawk (~mawk@wireguard/contributor/mawk)
[20:45:40] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[20:46:48] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:47:07] *** Joins: redrum88 (~redrum88@user/redrum88)
[20:47:40] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[20:47:48] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[20:48:13] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Quit: hyskaru)
[20:49:10] *** Joins: Sir_Andrei (~andrei@r167-57-68-48.dialup.adsl.anteldata.net.uy)
[20:49:31] *** Quits: W7 (~W7@172.87.12.111) (Quit: Leaving)
[20:49:43] <jinsun> another easy solution in this particular case is to take tuple[object, ...] instead of the union, and just return tup[len(tup)-1]
[20:51:05] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 260 seconds)
[20:51:27] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 258 seconds)
[20:51:57] <jinsun> suddenly it is more flexible than before, and if it is not meant to be that flexible then take a custom dataclass or namedtuple as input instead of tuples
[20:51:58] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[20:52:36] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:53:26] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[20:53:27] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[20:55:09] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[20:55:21] *** Joins: StormDancer (~stormdanc@185.245.86.122)
[20:56:50] *** Joins: LabMonkey (~LabMonkey@206.255.106.67)
[20:57:18] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[20:57:37] *** Joins: avikalp (~avikalp@223.184.20.242)
[20:58:26] *** Quits: SuperLag (~akulbe@user/superlag) (Remote host closed the connection)
[20:59:15] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 260 seconds)
[20:59:58] *** Quits: Mechanismus (~LabMonkey@206.255.106.67) (Ping timeout: 252 seconds)
[21:02:19] *** Joins: wolfgang (~wolfgang@101.174.167.116)
[21:02:26] *** Quits: avikalp (~avikalp@223.184.20.242) (Ping timeout: 260 seconds)
[21:02:47] *** Joins: ThanatosJ (~Thanatos@197.210.44.192)
[21:02:58] *** Joins: avikalp (~avikalp@223.184.20.242)
[21:04:39] *** Quits: StormDancer (~stormdanc@185.245.86.122) (Remote host closed the connection)
[21:04:52] *** Quits: Thanatos (~Thanatos@102.89.1.72) (Ping timeout: 258 seconds)
[21:05:22] <aphysically> jinsun: I think you can't typeguard a tuple as length 1
[21:05:47] *** Quits: shad (~shad@user/shad) (Ping timeout: 264 seconds)
[21:05:59] <jinsun> oh, why not?
[21:06:48] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Read error: Connection reset by peer)
[21:07:18] <aphysically> well
[21:07:24] <aphysically> imagine say you wanted to do this
[21:07:25] *** Quits: avikalp (~avikalp@223.184.20.242) (Ping timeout: 260 seconds)
[21:07:30] <aphysically> def is_single_tuple(tup: Tuple[T, ...]) -> TypeGuard[Tuple[T]]:
[21:07:40] <jinsun> aphysically: seems to be working https://mypy-play.net/?mypy=latest&python=3.10&gist=13b5c16c4d69deff34cc21ef5be3b661
[21:08:20] <aphysically> that typeguards against a specific type of tuple
[21:08:31] <aphysically> (of object)
[21:08:45] <jinsun> oh you don't want object, you want T
[21:08:48] <aphysically> if you want the typeguard to keep the typing you have to use a generic, but if you use a generic like I used it
[21:08:53] *** Joins: prs (~Priyanshu@2409:4043:681:65e0::c1f:b8a5)
[21:09:04] <aphysically> do you see the problem? T, ... isn't T, V, K... it's T, T, T...
[21:09:25] <aphysically> there's no way to express what you want, so you can't use that as a typeguard without losing typing information
[21:09:48] <jinsun> well you can change the input annotatioon to object, then any tuple will be allowed
[21:09:50] *** Joins: Pandadub (~Barones@2804:7f3:888a:e4ba:96f5:11fe:2241:5a89)
[21:10:02] <jinsun> and do isinstance check inside the typeguard
[21:10:33] <jinsun> ah but you still won't have the T
[21:10:41] *** Quits: Pandadub (~Barones@2804:7f3:888a:e4ba:96f5:11fe:2241:5a89) (Remote host closed the connection)
[21:10:48] <aphysically> T is needed or you lose typing information with your typeguard
[21:11:01] <jinsun> yeah
[21:11:22] <aphysically> you can't do tuple(T) | tuple(Any, ...) or anything either, because the latter matches both cases so it won't work as a typeguard
[21:11:24] *** Joins: Pandadub (~Barones@2804:7f3:888a:e4ba:96f5:11fe:2241:5a89)
[21:11:40] <jinsun> so you would need typeguard foreach type separately
[21:11:54] <aphysically> which is not any better than a cast :)
[21:12:13] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[21:12:14] <jinsun> the lesson learnt is don't write functions that accept tuples of variable length, which can also be heterogeneous types
[21:12:16] *** Quits: Pandadub (~Barones@2804:7f3:888a:e4ba:96f5:11fe:2241:5a89) (Remote host closed the connection)
[21:12:38] <jinsun> (or just cast)
[21:12:50] <aphysically> pyright says they're not interested in implementing this type narrowing pattern; I made an issue since there was a corresponding mypy one: https://github.com/microsoft/pyright/issues/2474
[21:13:23] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[21:13:26] <jinsun> yeah this is not really common pattern I think
[21:13:35] <jinsun> (and as Eric says)
[21:13:50] *** Joins: han-solo (~hanish@user/han-solo)
[21:13:56] <aphysically> it's really not obvious why you can't type narrow a length 1 tuple tho
[21:14:00] <aphysically> tricky
[21:15:36] *** LabMonkey is now known as Mechanismus
[21:15:57] <hrob> off topic, but is it possible on this libera irc chat to use markdown code syntax?
[21:16:05] <aphysically> I might ask if he has a trick to do length 1 tuples but I strongly suspect it can't be done
[21:16:33] *** Quits: ThanatosJ (~Thanatos@197.210.44.192) (Ping timeout: 265 seconds)
[21:16:37] <jinsun> maybe you can do something with dataclass, have to try
[21:16:54] *** Joins: SuperLag (~akulbe@user/superlag)
[21:17:54] <apollo13> hrob: luckily no
[21:18:14] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[21:18:41] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com)
[21:18:44] <jinsun> hm, no doesn't work
[21:20:10] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 260 seconds)
[21:20:13] <jinsun> hrob: depends on the client, your client may support markdown, but others won't see it that way then
[21:22:47] *** Quits: nikkc (~nikkc@2603-7080-0103-7aa9-3561-4b05-ce75-e79e.res6.spectrum.com) (Quit: Client closed)
[21:23:45] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--a1.oracle-ocna.com) (Ping timeout: 260 seconds)
[21:24:22] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[21:24:23] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[21:24:36] <doc> anyone seen anything that allows xpath like queries for graphql?
[21:24:43] <jinsun> aphysically: you can define typeguards for each length instead of each type, so one for tuple[T,U] and one for tuple[T, U, V], and so on
[21:24:46] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[21:24:48] *** Joins: ckdCreations (~ckdCreati@147.55.130.37)
[21:25:05] <aphysically> yes ;D
[21:25:05] <jinsun> aphysically: it has been done before :D https://github.com/groovy/groovy-core/blob/master/src/main/org/codehaus/groovy/runtime/ArrayUtil.java
[21:25:11] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[21:25:19] *** Quits: Sir_Andrei (~andrei@r167-57-68-48.dialup.adsl.anteldata.net.uy) (Remote host closed the connection)
[21:25:20] <stdout> I'm running into an issue using numpy within mod_wsgi. From what I've read, the solution is to use the OS python environment instead of the application specific venv. Most of the python packages that I need to use aren't included in the rhel/centos/rocky linux repositories. What is the recommended best practice method to install the required packages with pip?
[21:25:21] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[21:25:44] *** Joins: arinov (~arinov@31.142.50.8)
[21:26:53] <aphysically> jinsun: if you're willing to do that you can just union all of them in the case-1 typeguard I believe
[21:27:41] <aphysically> but it doesn't actually quite work because the type checker can infer a tuple[unknown, ...] sometimes
[21:27:42] <hrob> jinsun thanks, best avoid it lol
[21:28:19] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:29:39] <jinsun> aphysically: ah yeah that is not bad at all, and you won't realistically have too many differnt length heterogeneous type tuples, so it probably won't even be too long
[21:29:58] *** Joins: fofoni_ (~fofoni@user/fofoni)
[21:30:12] <aphysically> jinsun: huh I'm not sure what's happening here is this a pyright bug
[21:30:25] <aphysically> jinsun: https://bpa.st/JLZA
[21:30:36] <aphysically> for the length one case:
[21:30:36] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[21:30:38] <aphysically>   /home/gregory/Documents/open/rich/rich/repr.py:57:21 - info: Type of "a" is "Tuple[str | int]"
[21:31:10] *** Joins: djhankb (~djhankb@208.113.164.68)
[21:31:23] <aphysically> if I replace the other cases with all objects it seems okay
[21:32:47] *** Quits: fofoni (~fofoni@user/fofoni) (Ping timeout: 264 seconds)
[21:32:59] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[21:35:07] <jinsun> hmm well your first items arer of different types, so T becomes str | int
[21:35:31] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[21:35:32] <aphysically> eric seems to not understand
[21:35:48] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:35:53] <jinsun> because tuple[str, int] has to match tuple[T, object]
[21:36:14] <jinsun> and tuple[int] has to match tuple[T]
[21:36:24] <jinsun> so T has to match str | int ?
[21:36:41] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[21:36:46] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[21:36:54] <aphysically> yeah I guess
[21:37:06] <aphysically> anyway, the all object case for the non-T case doesn't work in general either
[21:37:06] *** Joins: Sadale (~Sadale@user/sadale)
[21:37:09] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[21:37:28] *** Joins: rsrx (~rsrx@178.220.12.180)
[21:37:29] *** Quits: rsrx (~rsrx@178.220.12.180) (Remote host closed the connection)
[21:37:37] *** Joins: Sadale (~Sadale@user/sadale)
[21:37:41] *** Joins: theprophet (~theprophe@85.114.228.184)
[21:37:54] *** Joins: rsrx (~rsrx@178.220.12.180)
[21:38:05] <aphysically> if a variable length tuple is inferred (say, by type narrowing with isinstance(.., tuple)), then pyright knows it can't use your attempt at a typeguard :D
[21:38:20] <theprophet> guys , how do you split this into 4 part, 1.2.3.4.5.6.7.8.9.10 , 11, 12 ,13 ,14 ,15 ,16 ,17 , 18 ,19 , 20 ? in python of course?
[21:38:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[21:38:45] *** Joins: Akuli (~Akuli@87-94-110-25.bb.dnainternet.fi)
[21:38:47] <InPhase> theprophet: Slicing.
[21:39:05] <theprophet> InPhase can you be more specific please? i will be thankful
[21:39:11] <bjs> theprophet: is that a string? or a list of things?
[21:39:16] <theprophet> list
[21:39:31] *** Joins: ano (~ano@user/ano)
[21:39:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:39:51] <bjs> theprophet: and what are the 4 parts you want?
[21:40:05] <theprophet> welll 12345
[21:40:07] <theprophet> 67890
[21:40:09] <theprophet> and so on
[21:40:33] <bjs> theprophet: I'm confused, you have dots and commas.  Which part is the list?
[21:40:36] <InPhase> theprophet: a[0:len(a)//3], a[len(a)//3:2*len(a)//3], a[2*len(a)//3:]
[21:40:51] <theprophet> like this , 12345 then 678910 , then 11,12,13,14,15, then 16 , 17 , 18 , 19 , 20
[21:41:14] <bjs> theprophet: what?
[21:41:28] <jinsun> aphysically: yeah this probably is one of the cases for just casting and forgetting about the "right" way till the type checkers get smarter, or redesign the code to use custom classes instead of tuples
[21:41:33] <bjs> theprophet: wouldn't it be easier to show the lists like Python does: ["a", "b", "c"] etc
[21:41:47] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-848c-99f6-3ab2-978a.res6.spectrum.com) (Ping timeout: 264 seconds)
[21:41:49] <theprophet> bjs
[21:41:50] *** Quits: ikus060 (~ikus060@96.127.228.230) (Quit: Leaving)
[21:42:03] <theprophet> wdym?
[21:42:27] <InPhase> theprophet: If it were 21 elements such that it actually made 3 equal lists, you could use np.array(a).reshape((3,-1))
[21:42:34] <bjs> theprophet: you typed "12345 then 678910 , then 11,12,13,14,15, then 16 , 17 , 18 , 19 , 20" but where is the list here? is this one list?  Multiple lists? a list of lists? which parts are the elements?  it's not really clear what you have
[21:43:10] <theprophet> bjs i mean it is inside the list
[21:43:10] <han-solo> list(zip(*[iter(range(1, 21))]*4))
[21:43:19] <theprophet> i am just not implementing it here.
[21:43:57] *** Joins: jay-m1262 (~jay-m@129.0.205.3)
[21:44:12] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[21:44:12] *** Quits: damonlynch (~ngaio@static-68-235-44-23.cust.tzulo.com) (Quit: Leaving)
[21:44:12] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[21:44:25] <InPhase> han-solo: Neat use of list multiply's reference issue as a feature.
[21:44:39] <han-solo> InPhase: yeah, i stole it from someone here ;)
[21:44:42] <grym> theprophet: the way you're showing us information here is making it harder to help you; it's also a sign at least to me that you haven't thought through the details of waht you actually want yet
[21:44:44] <theprophet> thanks, ill try if this works.
[21:44:45] <ApostleInTriumph> Hello. I've installed a package by pip. how can I access some files within this package?
[21:44:45] <jinsun> han-solo: nice, though it should be 5 I think based on theprophet's example
[21:45:05] <han-solo> jinsun: oh, right
[21:45:07] <theprophet> i will be more specific next time, if this does not work.
[21:45:21] <theprophet> thanks
[21:45:26] <grym> ApostleInTriumph: you can just edit them, if you'd like.  and find out where they are usually by `python -c "import thething; print(thething)"` and look at where they live
[21:45:37] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[21:45:50] <grym> ApostleInTriumph: this is brittle to do in general and there are some better options that depend on what you're up to
[21:45:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:45:57] <InPhase> han-solo: Although that does not seem to play well with mismatched dimensions.
[21:46:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:46:17] <han-solo> InPhase: indeed, might have to bring in `zip_longest` with defaults or something ?
[21:46:17] <InPhase> zip bites you back on that one.
[21:46:19] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[21:46:28] *** Joins: ubsyyz (~ubstoront@172-97-184-5.cpe.distributel.net)
[21:46:36] <grym> InPhase: not any more!
[21:46:36] <ApostleInTriumph> grym I want to know if the pytorch3d that i've installed is after or before this commit : https://github.com/facebookresearch/pytorch3d/commit/88f5d790886b26efb9f370fb9e1ea2fa17079d19
[21:46:47] <InPhase> grym: Not anymore how?
[21:46:55] <grym> InPhase: 3.10 supports strict=True i believe
[21:47:16] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:47:38] <grym> or at least is/was scheduled to do so
[21:47:52] <grym> ApostleInTriumph: ah, and you want to just diff it or something? yeah, that'll work
[21:48:13] <ApostleInTriumph> grym yes exactly
[21:48:22] <grym> ApostleInTriumph: you can get into trouble when you edit files outside of version control that are in your site; that's the brittleness i meant earlier
[21:48:32] <grym> so if you don't do that, then you're gtg
[21:48:41] *** Quits: Kaya (~KC@static.89.202.216.95.clients.your-server.de) (Changing host)
[21:48:41] *** Joins: Kaya (~KC@user/kaya)
[21:48:50] <InPhase> grym: Ah, itertools.zip_longest handles it, by filling with None.
[21:49:02] <grym> ApostleInTriumph: nedbat calls this 'machete mode debugging', and that's a good term :)
[21:49:10] *** Joins: djapo (~archangel@user/djapo)
[21:49:12] <grym> InPhase: that too. but i meant https://www.python.org/dev/peps/pep-0618/
[21:49:13] <InPhase> I spotted that in the pep discussing strict.
[21:49:18] <InPhase> Yes, in there.  :)
[21:49:29] <grym> yeah.  zip_longest is an old friend
[21:50:05] <aphysically> jinsun: I'm surprised eric didn't understand the problem
[21:50:11] *** Quits: rfm (~rfm@user/rfm) (Ping timeout: 264 seconds)
[21:50:31] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[21:50:32] *** Quits: stoneware (~stoneware@user/stoneware) (Ping timeout: 265 seconds)
[21:51:46] <jinsun> well usuallly I forget that tuples can be heterogenous too, probably same happened to him
[21:52:01] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (tungsten.libera.chat (Nickname regained by services)))
[21:52:01] *** vinleod is now known as vdamewood
[21:52:22] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Ping timeout: 260 seconds)
[21:52:26] <jinsun> and you just mentioned length, not heterogeneous or homogenous, so he just assumed homogeneous I guess
[21:53:05] *** Quits: raxor2k (~raxor2k@78.158.254.247) ()
[21:53:24] *** Joins: reset (~reset@user/reset)
[21:54:23] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[21:54:45] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[21:55:02] *** Joins: Thanatos (~Thanatos@197.210.44.192)
[21:56:17] *** Quits: Thanatos (~Thanatos@197.210.44.192) (Read error: Connection reset by peer)
[21:56:56] *** Joins: Thanatos (~Thanatos@197.210.44.192)
[21:58:52] <ApostleInTriumph> grym it's pretty weird that 0.6.0 corresponds to many versions in reality and the one that's "currently" 0.6.0 has no correlation with what i have locally
[21:59:42] <aphysically> jinsun: by the way, I think the entire thing exposed a bug in rich
[21:59:54] <aphysically> it's pretty clear rich is assuming the first element there must be a string, but that's not actually the case
[22:00:01] *** Joins: shad (~shad@user/shad)
[22:00:06] <aphysically> it just so happens the code won't *fail*, but it's obviously unintended
[22:02:01] <aphysically> I'll fix the bug and edit the PR
[22:02:03] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[22:02:05] <jinsun> depends, that str | int was more of a problem with the typevar, it will really be int only in one branch and str only in the other branch
[22:02:47] *** Joins: Sadale_ (~Sadale@user/sadale)
[22:03:45] *** Joins: sandb0y (~pirate@user/sandb0y)
[22:03:46] *** Joins: gbristol (gbristol@hermes.gbristol.net)
[22:04:00] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 260 seconds)
[22:04:05] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:04:16] *** Joins: maryo (~Maryo@user/maryo)
[22:04:35] *** Quits: upsala (~zcb@185.213.155.160) (Ping timeout: 260 seconds)
[22:04:52] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[22:05:12] *** Quits: rsrx (~rsrx@178.220.12.180) (Quit: Leaving)
[22:06:16] *** Joins: upsala (~zcb@185.254.75.29)
[22:07:07] *** Joins: avikalp (~avikalp@223.184.20.242)
[22:07:11] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[22:07:21] <avikalp> o/
[22:07:45] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Client Quit)
[22:08:14] *** Quits: Sadale_ (~Sadale@user/sadale) (Ping timeout: 260 seconds)
[22:08:18] *** Quits: avikalp (~avikalp@223.184.20.242) (Client Quit)
[22:08:56] *** Joins: avikalp (~avikalp@223.184.20.242)
[22:09:03] <aphysically> jinsun: let me show you what I mean
[22:09:16] <aphysically> jinsun: https://github.com/willmcgugan/rich/blob/e6fec11cae662d26c22ed54340681cada272fc3c/rich/repr.py#L69
[22:09:31] *** Joins: Sadale (~Sadale@user/sadale)
[22:09:43] <aphysically> it seems clear to me that 1) the code here clearly didn't intend for the tuple[object, ...] case to still be possible here
[22:09:55] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[22:10:10] <aphysically> 2) the code that *is* there incorrectly treats the first argument as optional[str] when it was attempted to be typed as str
[22:10:25] <aphysically> it just so happens that these mistakes don't create any runtime error, but it's obviously wrong
[22:10:36] *** Joins: bloodElk (~bloodElk@user/bloodelk)
[22:11:37] *** Joins: avikalp_ (~avikalp@223.184.20.242)
[22:13:12] <jinsun> aphysically: okay because the Tuple[object] case went away but not the object
[22:13:46] <aphysically> right, but type checkers don't know the tuple[object] case went away so I do need to cast that
[22:13:49] <jinsun> the code is expecting object to never be Tuple probably, but there is no way to annotate that
[22:13:51] *** Joins: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de)
[22:13:52] <aphysically> hence my cast
[22:15:05] *** Quits: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de) (Client Quit)
[22:15:05] *** Quits: Thanatos (~Thanatos@197.210.44.192) (Ping timeout: 260 seconds)
[22:15:10] *** Quits: avikalp (~avikalp@223.184.20.242) (Quit: leaving)
[22:15:54] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[22:16:43] *** Quits: avikalp_ (~avikalp@223.184.20.242) (Remote host closed the connection)
[22:17:11] *** Quits: rndm (~rndm@2600:1700:5f81:1f50:45a5:1316:5521:252c) (Ping timeout: 264 seconds)
[22:17:12] <aphysically> jinsun: by the way mypy widens to Any in this part of the code so it doesn't know anything about this at all
[22:17:14] <jinsun> again just hightlights that tuples are not really good here, convenient to create but a huge pain to type hint
[22:17:19] *** Joins: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de)
[22:17:19] *** Joins: avikalp (~avikalp@223.184.20.242)
[22:17:34] *** Quits: maryo (~Maryo@user/maryo) (Ping timeout: 260 seconds)
[22:17:36] <aphysically> I'm not sure exactly where mypy got lost (try doing reveal_type and such before my cast)
[22:17:48] <aphysically> I haven't tracked down what limitation is causing it to widen yet
[22:18:04] *** Joins: goldfish (~goldfish@user/goldfish)
[22:18:06] <jinsun> oh even after the isinstance check?
[22:18:14] <aphysically> yep, try it
[22:18:23] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[22:18:24] <aphysically> it's tuple[Any]
[22:18:33] <aphysically> whereas pyright understands the type
[22:18:53] <aphysically> maybe the mypy protocol support is just bad or something
[22:20:04] <aphysically> jinsun: even without the code not realizing object can become tuple, the code still assumes it's Optional[str] instead of str
[22:20:09] <aphysically> otherwise why check for None
[22:20:24] *** Joins: anarcat (~anarcat@user/anarcat)
[22:20:29] <anarcat> hello
[22:20:38] <anarcat> is anything up with test.pypi.org? i'm getting a cert error here
[22:20:56] <anarcat> $ curl https://test.pypi.org
[22:20:57] <anarcat> curl: (60) SSL: no alternative certificate subject name matches target host name 'test.pypi.org'
[22:21:16] <aphysically> I just avoided making any functional changes in my PR fixing the typing in that file and left a message bout it so maintainer can decide what they want to do https://github.com/willmcgugan/rich/pull/1616 jinsun
[22:21:19] *** Quits: jpic (~jpic@82.142.4.78) (Ping timeout: 265 seconds)
[22:21:31] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[22:21:31] <sartan> DNS Name=r.shared-319-default.ssl.fastly.net
[22:21:46] *** Quits: avikalp (~avikalp@223.184.20.242) (Ping timeout: 260 seconds)
[22:21:52] <anarcat> sartan: yeah exactly
[22:22:05] <anarcat> which doesn't resolve either
[22:23:09] *** Joins: jpic (~jpic@82.142.28.130)
[22:23:10] *** Quits: arinov (~arinov@31.142.50.8) (Ping timeout: 260 seconds)
[22:24:28] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[22:25:16] <Jong> I hate len( ) because it takes longer to read than had there been a built in .len function or something
[22:25:37] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:25:45] <anarcat> https://github.com/pypa/packaging-problems/issues/551
[22:25:46] <Jong> I always need to find the closing parenthesis. It takes a quarter second longer to read. But those quarter seconds add up!
[22:26:07] <jinsun> aphysically: careful, the maintainer might not like Any  -> object changes, if the users have to cast later
[22:26:10] *** Joins: mickey8 (~user@user/mickey)
[22:26:51] <han-solo> Jong: use some colorize bracket extension or something ? :)
[22:27:03] <aphysically> that code isn't part of the API afaik jinsun
[22:27:41] <Jong> I tried some. Issue is that I'm coding on vscode sshed into remote server. The remote server must approve the extension, I believe.
[22:28:18] <han-solo> this works fine for me # https://github.com/CoenraadS/Bracket-Pair-Colorizer-2
[22:28:50] <jinsun> not needed anymore, https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization
[22:29:19] <jinsun> it is built into vscode now without any extensions
[22:29:23] <han-solo> cool
[22:29:36] <jinsun> jsut have to enable it
[22:29:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:30:29] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[22:30:52] <jinsun> aphysically: yeah if it doesn't make typing changes for the users it should be fine
[22:30:55] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[22:31:02] <aphysically> jinsun: https://github.com/psf/black/blob/62ed5389fca51384721245ff1c2f1c62a13a04ff/src/blib2to3/pgen2/tokenize.py#L248
[22:31:04] <aphysically> lol
[22:31:13] <aphysically> their usecase could be covered by a typeguard at least though
[22:31:28] *** Joins: djhankb (~djhankb@208.113.164.68)
[22:31:40] <nedbat> aphysically: has will be receptive to your changes?
[22:31:55] <aphysically> yes he's merged three
[22:32:03] <nedbat> that's good to hear
[22:32:35] <aphysically> they're almost all bugfixes, and the ones that are questionably pyright-specific I make sure to signpost so he can decide what he wants
[22:33:32] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[22:35:08] <aphysically> that PR I'm removing 8 (!) # type: ignore that was mostly only there due to really subtle typing errors that took me a while to figure out actually
[22:35:09] *** Quits: atomicwrites (~atomicwri@user/atomicwrites) (Ping timeout: 268 seconds)
[22:35:11] <ApostleInTriumph> grym i install pytorch3d from its git repo https://github.com/facebookresearch/pytorch3d/blob/main/INSTALL.md. however, inside  python -c "import pytorch3d; print(pytorch3d)" i'm unable to find the folder csrc. why is that so?
[22:35:19] *** Joins: parv (~quass@user/parv)
[22:35:36] <ApostleInTriumph> is my installation gone wrong or that's expected ? ( i don't see this happening from the setup.py)
[22:35:39] *** Joins: lethu (~lethu@user/lethu)
[22:35:40] *** Joins: djapo (~archangel@user/djapo)
[22:36:56] *** Joins: isomorpheus (~isomorphe@c-73-53-247-25.hsd1.fl.comcast.net)
[22:37:28] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[22:37:54] *** Joins: Sadale (~Sadale@user/sadale)
[22:38:15] <isomorpheus> I have something of shape (20, 32, 32). Consider it to be 20 square matrices. I want the sum of the non-diagonal elements of each matrix. I.e., something of shape (20,). What's a clean way of doing that? (I'm using pytorch but a numpy solution would be helpful, probably)
[22:40:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:40:37] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[22:41:08] *** Quits: c10l (~c10l@user/c10l) (Quit: Ping timeout (120 seconds))
[22:41:49] *** Joins: fikran (~fikran@user/fikran)
[22:42:07] *** Joins: Thanatos (~Thanatos@197.210.44.192)
[22:42:31] *** Joins: atomicwrites (~atomicwri@user/atomicwrites)
[22:42:40] *** Joins: c10l (~c10l@user/c10l)
[22:43:31] <aphysically> jinsun: I should figure out why mypy infers Any though; probably just a protocol issue
[22:44:05] *** Quits: alexises (~lameire@51.15.136.90) (Ping timeout: 246 seconds)
[22:44:19] <jinsun> aphysically: it is the isinstance check it seems
[22:44:22] *** Quits: c10l (~c10l@user/c10l) (Client Quit)
[22:44:28] *** Joins: extropiator (~admin@user/extropiator)
[22:44:56] *** Quits: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:44:57] *** Joins: c10l (~c10l@user/c10l)
[22:45:08] <ApostleInTriumph> isomorpheus you can try to mask the non-diagonal element by creating a tensor with 0s along the diaongal of same shape as your input matrix. then you can apply an elementwise multiplication (einstein summation)
[22:45:20] <jinsun> aphysically: https://mypy-play.net/?mypy=latest&python=3.10&gist=906066a83d990e2952771c390bfcf219 just this much is enough to get the Any
[22:45:43] <extropiator> Im using pybind11, and in the PYBIND11_MODULE() declaration in the C++ code, which happens to have a parent module, I would like to access objects within the parent modules namespace. Anyone know the syntax for that off hand?
[22:46:45] <grym> ApostleInTriumph: the filestructre will be somewhat different
[22:46:51] *** Joins: orangeextract (~orangeext@user/orangeextract)
[22:47:04] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[22:47:07] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[22:47:16] <ApostleInTriumph> grym I see. the commit i'm interested in lies in those folders that aren't present :/
[22:47:51] <aphysically> jinsun: yeah seems pretty questionable, pyright is obviously more correct there
[22:48:21] <jinsun> aphysically: basically mypy doesn't do Unknown like pyright, and it goes for a more lenient Any instead
[22:48:22] *** Quits: jay-m1262 (~jay-m@129.0.205.3) (Ping timeout: 258 seconds)
[22:48:59] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 264 seconds)
[22:49:02] <aphysically> yeah, the pyright behavior allows it to keep making sure all your code is valid for all the union'd types in addition to the unknown though so it's more strict
[22:49:12] <extropiator> *oh, I see, something along the lines of: py::object pet = (py::object) py::module::import("basic").attr("Pet");
[22:49:46] <aphysically> jinsun: yeah I'm guessing he doesn't have a better suggestion https://github.com/microsoft/pyright/issues/2474#issuecomment-949867839
[22:50:23] *** Joins: Sadale (~Sadale@user/sadale)
[22:51:16] *** Joins: morten (~morten@81-234-122-230-no158.tbcn.telia.com)
[22:51:36] <jinsun> yeah Union[Tuple[object], Tuple[Any]] -> Tuple[Any] is also bad (on top of inferring Tuple[Any] instead of tuple[unknown, ...])
[22:52:05] <nedbat> wow, i really wish type hints didn't add so much noise to function signatures...
[22:52:15] <nedbat> i guess I'll get used to them?
[22:52:36] *** Quits: yeirr (~yeirr@user/yeirr) (Remote host closed the connection)
[22:52:36] <phy1729> You can always write more type aliases
[22:52:40] <jinsun> 3.10 solves some of the problems, the Unions are less ugly
[22:52:46] <nedbat> i'd say, "maybe putting each argument on its own line would help," but I know black will prevent that
[22:53:12] <aphysically> nedbat: I think(hope) this will get better in the coming years as more syntactic sugar gets added
[22:53:17] * phy1729 doesn't use black and does put each on its own line
[22:53:22] <phy1729> makes diffs nicer
[22:53:37] <jinsun> black will enforce that usually, with such long annotations it will be hard to keep everything in 88 chars
[22:53:45] *** Joins: arinov (~arinov@213.194.126.155)
[22:53:55] <jinsun> so it explodes each argument into separate lines
[22:54:13] <aphysically> covariant/contravariant signatures are probably going to get a +/- notation, there's the | notation now, there's a new callable syntax in the works, and hopefully the ? PEP for optional signatures makes it in
[22:54:17] *** Joins: Klinda (~superleag@user/klinda)
[22:54:23] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:54:37] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[22:54:55] <aphysically> the ? for optional signatures goes along well with PEP 505 if it's accepted
[22:55:01] <Stench> nedbat: i've actually found that black seems to respect when i put arguments or list entries on separate lines. I have several __init__ files whose `__all__` contains a single entry on its own line, and black doesn't change it.
[22:55:15] *** Quits: BSaboia (~bsaboia@187.19.138.198) (Quit: This computer has gone to sleep)
[22:55:22] <nedbat> Stench: and they would fit more than one to a line?
[22:55:23] <Stench> (i say that but now i'm not sure if i've just configured it that way... let me check)
[22:55:26] <phy1729> All I need is a kwargs is just geting passed to foo other function to type check it against that and that will get most of the way to mypy --strict
[22:55:55] <jinsun> nedbat: you can add a trailing comma if they fit in one line
[22:55:59] <aphysically> nedbat: I think you can put them all on different lines and black will keep it there as long as you end the last line with a comma
[22:56:00] <Stench> nedbat: yes, for example i have "OpenTheWhatWeTreatMenu" on a single line -- black is fine with that.
[22:56:45] *** Joins: Sadale (~Sadale@user/sadale)
[22:58:07] <jinsun> and a really clean solution exists from the beginning, pyi files, I haven't tried to create myself since inline annotations are less work
[22:58:42] <aphysically> oh eric is interested still, but I'm about to go out
[22:58:47] <aphysically> I'll make a minimal example when I'm back
[22:59:31] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[23:00:50] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[23:01:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[23:01:17] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[23:01:55] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[23:02:32] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[23:03:46] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 260 seconds)
[23:04:45] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[23:06:02] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[23:06:35] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[23:06:55] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[23:10:38] *** Quits: xa0s (xa0s@sdf.org) (Quit: leaving)
[23:11:14] *** Quits: extropiator (~admin@user/extropiator) (Ping timeout: 260 seconds)
[23:12:24] *** Joins: extropiator (~admin@user/extropiator)
[23:15:17] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[23:15:50] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[23:16:46] *** Joins: soc (~daedw@cpe-172-113-121-232.socal.res.rr.com)
[23:16:46] *** Quits: extropiator (~admin@user/extropiator) (Ping timeout: 245 seconds)
[23:18:01] *** Joins: extropiator (~admin@user/extropiator)
[23:18:16] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:18:23] <ali1234> is there a "golfed" way to get the index of the first element in a list for which f(element) is true?
[23:18:59] <ali1234> i am imagining something like L.index(key=f)
[23:19:07] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[23:19:12] *** Joins: AnselmoCampanas (~AnselmoCa@190.99.69.41)
[23:19:15] *** Quits: pro_z_ (~pro_z@37.214.46.4) (Ping timeout: 260 seconds)
[23:20:00] *** Joins: LabMonkey (~LabMonkey@206.255.106.67)
[23:20:34] <exarkun> next(filter(f, L))
[23:20:44] <KirkMcDonald> That gives the element, not the index.
[23:21:00] <exarkun> L.index(next(filter(f, L)))
[23:21:03] <exarkun> :)
[23:21:51] <KirkMcDonald> Ugh.
[23:22:16] *** Joins: pycurious (~Adium@user/pycurious)
[23:22:20] <exarkun> list(map(f, L)).index(True)
[23:22:25] *** Quits: jamwil (~jamwil@user/jamwil) (Quit: leaving)
[23:22:26] <KirkMcDonald> Well, there's always next(i for i in range(len(L)) if P(L[i]))
[23:22:54] *** Quits: extropiator (~admin@user/extropiator) (Ping timeout: 260 seconds)
[23:23:11] *** Quits: Mechanismus (~LabMonkey@206.255.106.67) (Ping timeout: 265 seconds)
[23:23:32] *** Joins: extropiator (~admin@user/extropiator)
[23:23:44] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:24:37] <exarkun> y(lambda f, L, g: 0 if f(L[0]) else g(f, L[1:], g) + 1)
[23:24:57] *** Joins: nomic (~nomic@185.198.243.184)
[23:28:07] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[23:28:14] *** Quits: extropiator (~admin@user/extropiator) (Ping timeout: 258 seconds)
[23:28:25] *** Quits: orangeextract (~orangeext@user/orangeextract) (Quit: Leaving)
[23:29:06] *** Joins: extropiator (~admin@user/extropiator)
[23:29:18] <jinsun> exarkun: getting worse with each try :D
[23:29:22] <Kaya> reading that makes my brain hurt
[23:29:26] <exarkun> that's how you play golf, isn't it
[23:29:46] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[23:30:10] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[23:30:15] *** Joins: amogorkon (~amogorkon@port-92-196-6-35.dynamic.as20676.net)
[23:30:20] <exarkun> the correct answer is of course the obvious one: find_first(L, key=f) and implement find_first with documentation, automated tests, etc.
[23:30:30] <Kaya> I wish I could get the hang of using lambdas and such :(
[23:30:35] <exarkun> (maybe spent more than 5 seconds on the name, too)
[23:30:45] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[23:30:52] *** Quits: c10l (~c10l@user/c10l) (Quit: Ping timeout (120 seconds))
[23:31:02] <amogorkon> hi
[23:31:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:31:09] <exarkun> Kaya: well, you know how to get to carnegie hall, right
[23:31:20] *** Joins: djhankb (~djhankb@208.113.164.68)
[23:31:23] *** Joins: c10l (~c10l@user/c10l)
[23:31:55] <Kaya> am i having a stroke
[23:32:27] *** Joins: Mechanismus (~LabMonkey@206.255.106.67)
[23:32:33] *** Quits: morten (~morten@81-234-122-230-no158.tbcn.telia.com) (Quit: WeeChat 3.0)
[23:32:46] <exarkun> I hope not
[23:32:52] <axisys> meed help with reading an excel file with pandas.. xls = pd.ExcelFile('file.xlsx') works with some warnings.. but xls.sheet_names outputs to [] .. I have four sheets in this xls file
[23:32:57] <axisys> what gives?
[23:32:57] *** Quits: prs (~Priyanshu@2409:4043:681:65e0::c1f:b8a5) (Read error: Connection reset by peer)
[23:33:01] <exarkun> anyway it turns out you get the hang of lambdas the same way you get to cargenie hall: practice
[23:33:26] *** Quits: extropiator (~admin@user/extropiator) (Ping timeout: 245 seconds)
[23:33:28] *** Quits: c10l (~c10l@user/c10l) (Client Quit)
[23:33:54] *** Joins: c10l (~c10l@user/c10l)
[23:34:39] *** Joins: extropiator (~admin@user/extropiator)
[23:34:43] <Kaya> ah, that went way over my head, probably why I can't lambda too :-D
[23:34:52] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:35:08] <Kaya> but you make a good point.
[23:35:08] *** Quits: LabMonkey (~LabMonkey@206.255.106.67) (Ping timeout: 258 seconds)
[23:35:10] *** Joins: ethrl (~morty@user/doforlove33)
[23:35:12] <amogorkon> lambda is easy, just ignore the stupid word and focus on what it's doing
[23:35:14] *** Quits: mike18 (~geri@217-149-167-230.nat.highway.telekom.at) (Read error: Connection reset by peer)
[23:35:46] <amogorkon> think of it as a def (x,y):
[23:35:56] <amogorkon> without a name and without ( )
[23:35:59] *** Joins: evocatus (~evocatus@84.51.113.13)
[23:36:01] <amogorkon> def x, y:
[23:36:23] <exarkun> amogorkon: often it doesn't help a /lot/ to tell someone that something they have trouble with is easy
[23:36:29] <exarkun> tempting though it may be
[23:36:50] <amogorkon> well, i had the same trouble at first
[23:37:19] *** Joins: jamwil (~jamwil@user/jamwil)
[23:37:39] <amogorkon> but it didn't go away by practice but by realizing that "lambda" is just a badly chosen word for what you already know - def
[23:37:52] <amogorkon> with some limitations
[23:38:54] <KirkMcDonald> I don't know about "badly chosen."
[23:39:06] <ApostleInTriumph> hello can someone please help me how I can do this purely in torch and avoid python forloop?
[23:39:07] <ApostleInTriumph> https://bpa.st/XXJQ
[23:39:24] <sartan> anarcat: test.pypi.org should be resolved now.
[23:39:40] *** Quits: extropiator (~admin@user/extropiator) (Ping timeout: 260 seconds)
[23:40:02] <sartan> i emailed security@python.org and they got back to me really quickly
[23:40:13] *** Joins: extropiator (~admin@user/extropiator)
[23:40:40] <amogorkon> KirkMcDonald, the people who know what "lambda" means, usually don't need it (math/CS people with focus on numeric stuff) while the people who *need* lambdas (for GUIs, callbacks) usually don't have the theoretical background to know what a "lambda" means
[23:41:10] <amogorkon> so it's definitely a bad name
[23:41:24] <exarkun> That is an interesting categorization of developers.
[23:41:35] <sartan>  I feel attacked
[23:42:50] <exarkun> But it's okay.  Everyone knows that Python should have skipped statement function definitions and used `def` in place of `lambda`.
[23:42:55] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Ping timeout: 256 seconds)
[23:43:09] *** Quits: seanBE_ (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com) (Quit: Goodbye)
[23:43:36] <sartan> i only use def in place of lambda if there are more than a few lines of logic to throw in there, or pylint makes it unnecessarily difficult to format nested stuff correctly
[23:43:53] <grym> everyone knows defun is better than lambda because it's easier to unbind things later
[23:43:56] <grym> oh, wait, wrong chanel
[23:44:10] <amogorkon> ohai grym ;D
[23:44:24] *** Quits: c10l (~c10l@user/c10l) (Quit: Ping timeout (120 seconds))
[23:44:24] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[23:45:53] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:46:42] *** Joins: mickey8 (~user@user/mickey)
[23:47:25] *** Quits: horseface (~horseface@user/horseface) (Quit: STOP, DROP, AND ROLL. IT IS HAMMER TIME!!!)
[23:47:50] *** Quits: anonymeowo (~anonymeow@5.34.180.230) (Remote host closed the connection)
[23:48:31] *** Joins: Pickchea (~private@user/pickchea)
[23:48:34] <spiderman> Everyone welcome our newest member to the steering committe, Roey!
[23:48:49] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[23:49:33] <exarkun> how about fst(next(filter(compose(f, snd), enumerate(L))))
[23:50:21] <Roey> \o/ hola
[23:50:30] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[23:51:00] <AnselmoCampanas> hi everyone, I'm trying to make work celery and django, I need to use memcache from the celery task, but it is not working
[23:51:24] <mawk> maybe provide more information AnselmoCampanas
[23:51:43] <AnselmoCampanas> mawk, yes, sorry, I was typing
[23:51:51] <mawk> ah sorry
[23:52:38] *** Joins: avikalp (~avikalp@223.184.20.242)
[23:52:45] <AnselmoCampanas> first of all, I am using docker and trying to define a container using memcached image
[23:53:05] <AnselmoCampanas> but in the Django settings Im using 'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache', as backend
[23:53:11] <AnselmoCampanas> Im not sure if this is correct
[23:53:13] <nedbat> spiderman: what steering committee? :)
[23:53:37] <spiderman> nedbat: the one I made up :)
[23:53:44] <nedbat> spiderman: nice :)
[23:53:54] <grandrew> can you accept me too?
[23:54:02] <spiderman> sure, what are your qualifications
[23:54:08] <spiderman> ok, you're accepted
[23:54:34] <grandrew> 1. rattling a lot 2. breaking things
[23:55:47] <sartan> Roey, take the wheel!
[23:57:30] <AnselmoCampanas> this is my docker-compose.yml
[23:57:31] <AnselmoCampanas> https://pastebin.com/uzT53Kv8
[23:58:07] * Roey takes control of the wheel and veers us left, off a cliff
[23:58:29] *** Joins: horseface (~horseface@user/horseface)
[23:58:34] <Roey> sartan: whatup :")
[23:58:53] <Roey> horseface: your nickname reminds me of this boss character from the game Zelda 2: The Adventure of Link.  Namely, "Horse Head"
[23:59:05] <horseface> the virus is a hoax, right?
[23:59:18] * grym checks watch 
[23:59:20] <grym> guess it's friday
[23:59:30] *** Quits: avikalp (~avikalp@223.184.20.242) (Ping timeout: 260 seconds)
