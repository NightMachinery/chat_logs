[00:00:00] *** Quits: casionaut (~casionaut@user/casionaut) (Quit: o7)
[00:03:36] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 265 seconds)
[00:14:19] <georgy> asdf
[00:23:04] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[00:27:41] *** Joins: random-nick_ (~random-ni@87.116.166.234)
[00:28:54] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[00:30:02] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[00:32:46] *** Joins: Catie (~user@user/catie)
[00:33:26] *** Joins: VincentV` (~user@212.241.29.230)
[00:35:30] *** Quits: VincentVega (~user@212.241.29.230) (Ping timeout: 265 seconds)
[00:49:02] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[01:04:01] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[01:04:28] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[01:05:17] *** Joins: dmgk (~dmgk@user/dmgk)
[01:06:37] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:07:09] <_73> why is it common to `:export` and `:use` uninterned symbols (with sharp-quote) when defining packages with defpackage?
[01:07:38] <jackdaniel> _73: because you don't want to intern them in the package /in which/ your package is defined
[01:07:43] <White_Flame> because those are just names
[01:08:33] <White_Flame> also, think about what package you're in when the DEFPACKAGE form is evaluated, likely CL-USER
[01:08:42] <White_Flame> s/evaluated/read/
[01:08:58] <_73> I can't figure out how to produce any different behavior by interning vs not-interning the symbols
[01:09:27] <Catie> I mean, you can always use keywords too, those are very predictable in what package they're interned into
[01:10:02] <Catie> It still pollutes the image somewhat, I'm not disputing that bit
[01:10:33] <White_Flame> and that pollution can interfere with tab completion, giving you unused symbols that evaluate wrong
[01:10:51] <White_Flame> and/or cause package import conflicts later
[01:10:52] <_73> Catie: ohh ok now I see why I was confused. What I was using as my example for an uninterned symbol was a keyword.
[01:11:25] <Catie> There's the keyword symbol :keyword and the uninterned symbol #:keyword, those are different
[01:13:41] <_73> Yes I understand that. I was comparing `:export :foo :bar` with `:export #:foo #:bar` and not seeing any difference. Either way the consensus is clearly to just use uninterned symbols.
[01:14:08] <Catie> Okay gotcha, just making sure we were on the same page there!
[01:14:36] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[01:18:03] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[01:28:13] *** Joins: dre (~dre@2001:8003:c932:c301:db7c:7ab5:2e79:7650)
[01:31:34] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 265 seconds)
[01:31:55] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Client closed)
[01:33:13] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[01:34:48] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[01:45:01] *** Quits: dre (~dre@2001:8003:c932:c301:db7c:7ab5:2e79:7650) (Ping timeout: 240 seconds)
[01:46:19] *** Joins: pillton (~user@61-68-208-155.tpgi.com.au)
[01:48:44] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Remote host closed the connection)
[01:52:46] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[01:55:59] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:02:32] *** Joins: dre (~dre@60.229.45.121)
[02:17:25] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[02:17:46] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[02:26:47] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:33:17] *** Quits: gaqwas (~john@dynamic-077-004-083-017.77.4.pool.telefonica.de) (Read error: Connection reset by peer)
[02:34:15] *** Joins: gaqwas (~john@dynamic-077-004-083-017.77.4.pool.telefonica.de)
[02:36:49] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11d8:819b:81c8:22d1:4b3e:fb86) (Ping timeout: 265 seconds)
[02:39:08] *** Quits: pve (~pve@178-55-171-136.bb.dnainternet.fi) (Quit: leaving)
[02:41:39] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 265 seconds)
[02:42:03] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[02:50:40] *** Joins: dra (~dra@2a04:4540:6408:da00:a179:6502:b833:e628)
[03:00:24] *** Quits: random-nick_ (~random-ni@87.116.166.234) (Ping timeout: 268 seconds)
[03:10:30] <mzan> dre: hi, if you are interested I'm a newbie of CL too, and I'm doing the AoC https://github.com/massimo-zaniboni/advent-of-code-2021
[03:10:38] <mzan> I'm rather slow, up to date only day 3
[03:12:23] <rotateq> mzan: or more thorougly :)
[03:14:47] <rotateq> hm all those dependency libs seem to me a bit much at once for someone new :/
[03:15:04] <mzan> I tried to use first the series
[03:15:06] <mzan> then the loop
[03:15:08] <mzan> then iterate
[03:15:12] <mzan> Up to date I prefer iterate
[03:15:43] <mzan> "newbie" not in the sense that these are my first lines of CL code.
[03:15:54] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[03:15:58] <mzan> I played with CL in another project, where I studied CLOS.
[03:16:35] <rotateq> oki
[03:17:11] <rotateq> from now on you could switch "(when (not (null ...)))" to "(unless (null ...))"
[03:17:26] <mzan> good
[03:17:38] <rotateq> and CLOS is a big topic ^^
[03:18:14] <Catie> If I may also, I'd strongly recommend with-open-file instead of open
[03:18:32] <mzan> no you cant :_)
[03:18:38] <Catie> Then I shall not
[03:19:02] <rotateq> Catie: unwind-protect for saving the day :)
[03:19:10] <mzan> In other days, I used also "(iter (for line in-file fn using #'read-line)"
[03:19:14] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:19:37] <mzan> Catie: I'm learning new tricks every day about CL
[03:19:43] <mzan> I like it very much
[03:19:49] <Catie> I frequently use (loop for line = (read-line file nil nil) until (null line) ...)
[03:20:06] <Catie> mzan: You and me both!
[03:20:08] * Xach usually does "while line do ..."
[03:21:45] <Catie> Xach: Is it a preference, or do the two have different semantics?
[03:23:09] <Xach> Catie: a preference
[03:23:23] <Catie> Okay cool thank you, just making sure
[03:24:58] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[03:29:01] *** Quits: VincentV` (~user@212.241.29.230) (Ping timeout: 265 seconds)
[03:29:01] *** Joins: paule32__ (~paule32@user/paule32)
[03:29:51] <rotateq> mzan: and maybe sometimes DECF and INCF will come in handy for you too :)
[03:31:07] <mzan> yes, I started using them
[03:31:40] <hayley> mzan: w.r.t day2b, (ecase cmd ('forward ...)) will so happen to work, because that is equivalent to (ecase cmd ((quote forward) ...)). The "cases" in each clause are written using a list of values, and none are evaluated.
[03:31:43] <rotateq> nice
[03:33:16] <hayley> There's also a few dangling parens which are distracting admittedly.
[03:35:59] <mzan> hayley: are you saying that the "(ecase cmd ('forward ..))" is an error?
[03:36:26] <hayley> It's not an error per se, but it is not doing what you expect.
[03:36:43] <hayley> e.g. (ecase cmd ((+ 2 2) (print "blah")) doesn't print "blah" if cmd is 4.
[03:37:44] <mzan> I were thinking to this: "(ecase cmd ('forward 10))" is equivalent to "(cond ((eq cmd 'forward) 10))"
[03:39:24] <mzan> BTW ``(ecase cmd ("forward" 10))`` is error-prone because only symbols are singletone values (i.e. correctly comparable by "eq"), while strings are distinct references. So "case" in CL is rather error-prone.
[03:39:40] <mzan> THe value semantic of Haskell is less tricky sometime.
[03:40:32] <Xach> mzan: are you quoting something re: case?
[03:41:54] <Xach> I don't think it's correct to say CASE is error-prone.
[03:42:30] <Xach> Also, CASE does not use EQ.
[03:42:53] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 252 seconds)
[03:44:54] <mzan> I expanded "case" and yes it is doing something of completely unexpected to me
[03:45:16] <mzan> @Xach: yes you are right. "case" is not error-prone, because I will avoid to use it right-now :-)
[03:47:27] <rotateq> as i saw upto now CASE uses EQL
[03:48:48] <rotateq> and from what the other people said, that's why #. can sometimes be useful in a CASE expression when you want to match on parameters that are defined in the toplevel for example
[03:49:15] <mzan> Ok I reread "case" description http://clhs.lisp.se/Body/m_case_.htm
[03:49:19] <mzan> It is error-prone
[03:49:21] <mzan> nil
[03:49:24] <mzan> (nil) ...
[03:50:23] <mzan> Probably I also not understanding correctly the usage of ``'forward``. Probably I'm using quoting, but it is better using some other keyword-like symbol.
[03:51:24] <rotateq> when you would use :forward that would match as expected
[03:51:32] <mzan> yes
[03:51:51] <mzan> I thought that ":key" was only/mainly used for ":key value"
[03:51:57] <mzan> and not standalone
[03:52:08] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[03:52:30] <rotateq> keywords can be very useful and expressive on their own
[03:52:30] <hayley> mzan: (ecase cmd (forward 10)) == (cond ((eql cmd 'forward) 10))
[03:52:51] <hayley> And having "value" or "reference" semantics does not make the problem of defining equality much simpler.
[03:54:04] <_death> if you are prone to making errors when using case, use cond, until you learn how to use case without making errors
[03:55:46] <mzan> To be fair, if I expanded my "ecase" usage, I would notice immediately the problem. So if I'm in doubt with some complex macro, I can double-check in CL.
[03:56:48] <mzan> hayley: ok but in CL I had to remember that numbers, symbols are values, while strings are references.
[03:57:21] <mzan> To be fair in CL the majority of things are references, so it is not difficult to remember.
[03:57:25] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:57:28] <hayley> Not really. Symbols are also mutable objects.
[03:57:47] <mzan> To be fair, I don't know CL :-)
[03:58:15] <rotateq> i thought you studied CLOS ^^
[03:58:23] <mzan> A little
[03:58:33] <hayley> And reference equality on strings can be useful, though the most common use is as a quick test before comparing characters.
[03:58:39] <hayley> ...in order to implement value equality.
[03:58:39] <mzan> "studied" == read something, coded something
[03:59:09] <rotateq> ahaaa
[03:59:34] <hayley> i.e. (defun string= (x y) (or (eq x y) (and (= (length x) (length y)) (every #'char= x y)))) to a zeroth approximation.
[03:59:51] *** Joins: dra_ (~dra@2a04:4540:6416:3a00:a179:6502:b833:e628)
[04:02:19] *** Quits: dra (~dra@2a04:4540:6408:da00:a179:6502:b833:e628) (Ping timeout: 252 seconds)
[04:04:40] <Alfr> hayley, your string= also accepts other things: (string= (list #\a #\b) (list #\a #\b)) => T
[04:04:53] <hayley> Hence "to a zeroth approximation".
[04:05:57] <Alfr> I don't know what a zeroth approximation means here.
[04:06:50] <hayley> I'm just illustrating using EQ to check before performing a slower structural test.
[04:07:10] <Alfr> Understood.
[04:07:22] <mzan> hayley: yes yes. THe choices of CL make sense. It is only fun that after programming too much in Haskell (a pure FP) one like me expect that a string is a value inside "case", while obviously in a programming language like CL (that is also a system-level PL), the best choice is a reference. And as said, the majority of things in CL are references.
[04:10:49] <rotateq> at some point Simon Peyton-Jones called Haskell the most imperative programming language :D
[04:11:53] <georgy> the best imperative programming language in the world, IIRC :)
[04:13:27] <mzan> the most funny quote about Haskell is: the Haskell motto is "avoid success at all costs" but it is not clear if it is "avoid $ success at all costs" or "avoid success $ at all costs" :-)
[04:14:19] <rotateq> georgy: höhö
[04:14:22] <_death> mzan: the choices of whether to evaluate keys or not, or whether to compare using equal or eql are not wrong, and throughout Lisp history there have been many variations.. for example Lisp Machine Lisp had a SELECTQ operator that's like CASE (the q is for "quoting", i.e. not evaluating.. there was also a CASEQ alias), but also a SELECT operator that did evaluate the keys.. it also had a SELECTOR operator which allowed you to specify the
[04:14:23] <_death> comparison function.. it also had a few other similar operators
[04:15:50] <_death> mzan: so every Lisp makes some choices.. what's nice is that Lisp lets you come up with your own operators if you need something else
[04:16:40] <_death> I meant "not wrong or right"
[04:17:13] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[04:17:29] *** Quits: dra_ (~dra@2a04:4540:6416:3a00:a179:6502:b833:e628) (Ping timeout: 268 seconds)
[04:17:35] *** Joins: Oladon (~olad@98.43.81.226)
[04:19:12] <mzan> _death: I'm not criticizing CL. It is a very old PL, and it is still relevant. But if you study Eiffel, during the design of the language, the creator tried to avoid error-prone features and concepts. If your life depends on some code written in CL or Eiffel, you would like the fact that the programmer can not confuse an (case (nil ...)) with (case ((nil) ...)).
[04:19:56] <mzan> Some CL features are more error-prone than in other languages.
[04:19:59] <mzan> But it is ok.
[04:20:08] <_death> mzan: in my experience, you can make a mess with every language.. and you will, even NASA does
[04:20:17] <mzan> yes
[04:20:50] <rotateq> that's with contracts, i see those as a thing similar to dependent types
[04:20:56] <_death> mzan: for example, you keep using the term "error-prone", but it means "in the habit of making errors".. so that's better applied to a person than to an operator
[04:21:42] <mzan> changes nothing. The sense remain the same.
[04:21:44] <georgy> to be fair I'm not a huge fan of "we have 4 equality functions, and we hope you can guess what we meant"
[04:22:32] <_death> mzan: though Don Norman did elaborate on the concept of "affordance".. obviously some features are easier to misuse than others
[04:22:49] <georgy> five if you count =
[04:22:54] <_death> mzan: but you are not really in a good position to judge whether something is misused or not, because you are a newbie
[04:23:31] <rotateq> georgy: different types of equality :)
[04:23:56] <_death> mzan: I remember some people did have an issue with (nil) and ().. and these people decided to always use a list to specify keys
[04:24:15] <_death> mzan: but personally it's not an issue I see often in the wild
[04:25:23] <mzan> yes, I agree
[04:25:25] <mzan> But ...
[04:25:59] <mzan> there are modern PL were you can not overrides variables names in the lexical-scope. Doing this, they are less error-prone.
[04:26:35] <_death> it's more common to see some code that has 'foo keys though.. but my guess is that it's a result of the person not understanding CASE, rather than a typo or a thinko
[04:27:33] <mzan> In case of "case", there is also a mine problem. I considered case a friendly instruction, similar to Haskell or "switch", but it was a false friend: in reality it has a different semantic.
[04:27:43] <mzan> It is a mine problem, and not of the instruction.
[04:28:00] <mzan> Now I know, and zero problem.
[04:28:21] <mzan> Ah: thanks for the hint!!!
[04:29:43] <hayley> case does not evaluate patterns in Haskell. You can't do "case 4 of 2 + 2 -> ..." or approximate (I forget the exact syntax of ML languages).
[04:30:13] <mzan> In Haskell I used case in an error-prone way to... :_)
[04:30:19] <georgy> mzan there are pattern matching CL libraries. not sure which one is popular today, but here's one. https://lispcookbook.github.io/cl-cookbook/pattern_matching.html
[04:30:39] *** Joins: xsperry (~xs@user/xsperry)
[04:30:57] <mzan> hayley: something like ``let x = 5 in case y of x -> "I'm 5"``
[04:31:16] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: Going home)
[04:31:25] <mzan> but "case .. of x" introduces a new variable "x" that overrides the "let x = 5" one.
[04:31:42] <mzan> In a PL where it was not possible to override variables, the problem will be signaled.
[04:31:56] <rotateq> and switch-case is just ridicolous and bad design
[04:34:14] <georgy> case in haskell is used for matching constructors and deconstructing data. for things like 2 + 2 multiway if could be used. or guards
[04:34:39] <rotateq> mzan: in CASE you can even use an OR expression as this is a macro and not a function
[04:36:11] <mzan> georgy: yes. But in my "stupid mind", ``case y of x -> ..." were equal to ``if y == x then ...``
[04:37:00] <mzan> Instead ``case y of x -> ...`` is equavalent to ``x match y`` so ``x become y``.
[04:37:22] <georgy> yeah, case y of x -> will match any y and assign it to x
[04:37:58] <_death> I don't understand why you keep comparing CL to Haskell though.. this is a recipe for failure, because when you learn a language you should ditch such "friends" and learn it as it is.. it's a kind of "suspension of disbelief"
[04:39:09] *** Joins: king (~kingofcsu@123.118.74.105)
[04:39:30] <rotateq> and everything new should be for also widening the horizont :)
[04:39:36] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:40:01] <mzan> _death: I also cited Eiffel.
[04:40:02] <_death> unfortunately many people are stuck on one side of the static/dynamic divide and just can't reconcile with the other.. this creates a lot of noise
[04:41:56] <mzan> IN my case, I compared valued semantic of Haskell with reference semantic of CL. So the type system in my case was not cited. But your point remain valid.
[04:42:28] <mzan> And I cited other examples of constructs, that can be more or less error-prone. Obviously if you are a good programmer, you can avoid any problem.
[04:43:27] <_death> mzan: but your argument is based on an abstract theory you have about "error-prone", not empirical evidence.. in practice Lisps have been (are) used by NASA, Boeing, etc.. so was (is) assembly.. so maybe it's more about process, less about language features.. and if you can't afford such a process, maybe you don't need such guarantees anyway.. besides, it's not the only measure
[04:43:38] <mzan> And I have personal problems with "case" in every language :-) When I read "case", I see "==" everywhere :-)
[04:44:00] <mzan> _death: yes sorry. "case" in CL is perfect!
[04:44:07] <_death> mzan: of course it's perfect
[04:44:24] <rotateq> even this "==" isn't very accurate, like "=" for assignment
[04:45:05] *** Joins: igemnace (~ian@user/igemnace)
[04:45:50] <rotateq> be it as it is
[04:51:13] <mzan> AdventOfCase :-)
[04:54:21] <_death> mzan: personally, my life depends much more on CL than Eiffel btw ;)
[04:55:39] <rotateq> i think not only yours
[04:57:33] <mzan> _death: I'm not interested to discuss about life-dependency of an user called _death :-)
[04:57:39] *** Joins: karlosz (~karlosz@47.151.136.69)
[04:58:08] <dre> mzan, I'm on day 3 as well
[04:58:12] <_death> once, sbcl even babysitted my kitten
[04:58:21] <dre> but i have no time to complete the rest of aoc haha
[04:58:32] <dre> day 7 is apparently easy
[04:58:46] <mzan> I read day4 and I have a plan
[05:00:06] <dre> I implemented day4 but realised that i misread the problem :P
[05:00:35] <dre> when bingo is called, you sum all the numbers that aren't marked. I thought you sum the winning row.
[05:00:54] <mzan> dre: you can always adopt my behaviour/attitude: you misread the problem because CL is error-prone! :-)
[05:03:16] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 265 seconds)
[05:03:54] <rotateq> that's what the powerful condition system is for
[05:04:43] <mzan> unwind the specification
[05:08:46] <mzan> I go to bed, but I want to add this observation (_death will kill me): ``case`` is error-prone in Lisp, because it is the only Lisp macro that accepts too few parens! :-)
[05:11:40] <White_Flame> and to correct the correctly diagnosed newbie root cause, this is not an issue with CASE, but with the NIL/() equivalence
[05:12:04] <rotateq> the parentheses aren't even really there :P
[05:13:25] <_death> just wait until you FIND
[05:17:47] *** Quits: king (~kingofcsu@123.118.74.105) (Quit: king)
[05:21:47] *** Quits: Catie (~user@user/catie) (Quit: going home)
[05:23:21] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:25:38] <fe[nl]ix> luis: https://github.com/cffi/cffi/pull/196
[05:28:03] *** Joins: _paul0 (~paul0@191.251.43.155)
[05:28:07] *** Quits: paul0 (~paul0@user/paul0) (Read error: Connection reset by peer)
[06:01:48] *** Joins: jstoddard (~user@2600:8801:a400:5a00::72d6)
[06:14:54] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[06:41:45] *** Joins: king (~kingofcsu@123.118.74.105)
[06:43:45] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[06:51:07] <fe[nl]ix> anyone here using OSX ?
[06:51:42] *** Joins: paule32_ (~paule32@user/paule32)
[06:53:49] *** Quits: gaqwas (~john@dynamic-077-004-083-017.77.4.pool.telefonica.de) (Ping timeout: 240 seconds)
[06:54:07] *** Joins: gaqwas (~john@dynamic-095-115-044-086.95.115.pool.telefonica.de)
[06:54:21] *** Joins: paule32 (~paule32@user/paule32)
[06:55:23] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 252 seconds)
[06:56:37] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 240 seconds)
[06:56:51] *** Joins: s-liao (~s-liao@101.86.99.70)
[06:57:09] *** Joins: paule32_ (~paule32@user/paule32)
[06:57:37] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[06:58:35] *** Joins: paule32__ (~paule32@user/paule32)
[06:59:50] <etimmons> fe[nl]ix: I do occasionally
[07:00:13] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 240 seconds)
[07:01:59] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 252 seconds)
[07:02:10] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 265 seconds)
[07:02:36] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[07:04:37] <fe[nl]ix> etimmons: can you paste the output of otool -L $(which openssl) ?
[07:05:02] *** Joins: ldb (~user@user/ldb)
[07:05:08] <ldb> morning
[07:07:01] <ldb> fe[nl]ix: https://pastebin.com/k1qPfPjH
[07:07:56] <ldb> I use CCL on OSX
[07:09:01] <fe[nl]ix> thanks
[07:09:49] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Ping timeout (120 seconds))
[07:10:06] <fe[nl]ix> ldb: I'd like this too: ls -l /usr/lib/libssl.*
[07:10:09] <fe[nl]ix> I'm curious
[07:10:15] <etimmons> I get the same think on an M1 running Big Sur (except, it's repeated twice: once for x86_64, once for arm64e)
[07:10:15] <fe[nl]ix> what version of OSX is that ?
[07:10:31] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Client closed)
[07:10:53] <fe[nl]ix> etimmons: can you paste that too ?
[07:10:54] <ldb> I'm using 11.6.1 Big Sur, the lastet one has issue with CCL
[07:11:42] *** Joins: s-liao (~s-liao@101.86.99.70)
[07:12:47] * etimmons uploaded an image: (311KiB) < https://libera.ems.host/_matrix/media/r0/download/davidson-timmons.com/OaMSYwRiypwBxfDOLfFeSKLM/Screenshot_2021-12-08_22-41-47.png >
[07:13:09] <etimmons> fe[nl]ix: ^ (sorry it's a screenshot. I have a crazy setup needed to access that machine at the moment)
[07:13:56] <fe[nl]ix> etimmons: can you run a few more commands ?
[07:14:14] <etimmons> Also note that there are no libssl.* (or libcrypto.*) in /usr/lib
[07:14:27] <etimmons> They live Somewhere Else now
[07:14:29] <etimmons> Sure
[07:15:13] <ldb> yes, is is linked by some magic settings since system integrity support
[07:15:13] <fe[nl]ix> echo 'int main(){}' > test.c ; cc -o test test.c -lssl ; otool -L test
[07:15:38] <ldb> ld: library not found for -lssl
[07:16:14] <ldb> seems Cook doesn't want us to use the openssl lib shipped with mac
[07:16:34] <etimmons> same. Note I do not have homebrew (or fink or macports or ...) installed on here
[07:16:54] <ldb> neither I do
[07:17:11] <fe[nl]ix> I was just about to ask that
[07:17:34] <fe[nl]ix> how does Xcode link against openssl then ?
[07:18:11] <fe[nl]ix> di you have Xcode installed ?
[07:18:37] <fe[nl]ix> maybe that will install libssl.dylib
[07:19:11] <ldb> no, and I probably won't want to install that, because that's huge
[07:20:00] <fe[nl]ix> ok, so I need somebody with Xcode now :D
[07:20:32] <kakuhen> this is reminding me of some libssl issue that appeared elsewhere in a common lisp software on later macs
[07:20:53] <etimmons> I don't either. But I know from looking at this myself that libssl.dylib is there (in the linker cache). It's just a stub that crashes the process.
[07:20:55] <ldb> according to this thread, openssl is not shipped with Xcode either: https://stackoverflow.com/questions/33341113/how-to-add-openssl-to-an-xcode-project
[07:21:05] <kakuhen> in short, big sur moves all libraries to a single dyld_shared_cache file, and the actual libraries in /usr/lib are simply stubs referencing points in the shared cache, and this causes some software to behave strangely
[07:21:31] <kakuhen> i forget where exactly the same libcrypto problem appeared; I think it was in Nyxt?
[07:21:43] <etimmons> But I did read somewhere (can't find it at the moment) that binaries signed by Apple (such as the bundled python) can load libssl.dylib (unversioned) without crashing
[07:22:23] <fe[nl]ix> so Apple doesn't want you to load libssl directly, but presumably only as a dependency of one of their frameworks ?
[07:22:25] *** Joins: qhong_ (~qhong@rescomp-21-400677.stanford.edu)
[07:22:56] <etimmons> You can load libssl directly, so long as it's libssl.X.dylib, where X is some integer
[07:23:20] <fe[nl]ix> right, but when linking a C binary, how does one do that ?
[07:23:29] <fe[nl]ix> anyway, I'm trying to make this work: https://github.com/sionescu/cl-plus-ssl/commit/a66c1be8d00a15e4813c9f718a7d5d7faefb01d2
[07:23:33] <etimmons> That I do not know, but would love to
[07:23:52] <fe[nl]ix> on Linux I'm parsing the output of /usr/bin/ldd and it just works
[07:24:01] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 256 seconds)
[07:26:33] <kakuhen> anyway, fwiw, there is a /usr/lib/libssl.dylib on macOS 10.15 and earlier; https://github.com/cl-plus-ssl/cl-plus-ssl/issues/114 seems to be relevant for your problem
[07:27:04] <etimmons> Note that I floated the idea of :canary earlier, but it was shot down: https://github.com/cl-plus-ssl/cl-plus-ssl/pull/116
[07:28:31] <ldb> It seems Xcode developers are now using Network.framework instead of linking with openssl https://developer.apple.com/documentation/network
[07:28:50] <etimmons> fe[nl]ix: I *like* the :pkg-config option in the unix entry. is that new?
[07:29:11] <fe[nl]ix> kakuhen: I know, that's the exact issue I'm trying to fix: endlessly hard-coding ever changing paths
[07:29:46] <fe[nl]ix> ldb: that's what I suspected, the change to use stubs makes sense in light of that. Apple are trying to make openssl just an implementation detail
[07:30:11] <beach> Good morning everyone!
[07:30:44] <fe[nl]ix> etimmons: yes, it's basically the same syntax as cffi:define-foreign-library, except that this file is processed as an ASDF extension and the code tries to resolve the actual library pointed to by pkg-config
[07:31:08] <fe[nl]ix> morning beach
[07:31:58] <beach> mzan: Are you around?
[07:32:04] <kakuhen> fe[nl]ix: i think the only "easy" way out of this is to require a mac user to install openssl on their own, kind of like how iolib requires users to install libfixposix
[07:32:29] <kakuhen> I just checked Network.framework and there is no dylibs offered by it for you to link against, so I think the chances of avoiding hard-coding different paths depending on OS X version is very very low
[07:33:47] <kakuhen> https://github.com/sergot/openssl/issues/81#issuecomment-782916961 this offers so hope however, but I don't know how one would use cffi to do something like this
[07:34:01] <fe[nl]ix> kakuhen: perhaps, but I wouldn't declare defeat right away
[07:35:45] <fe[nl]ix> ldb: are the Openssl symbols globally visible when loading Network.framework ?
[07:36:52] <fe[nl]ix> if yes, the easy solution for cl+ssl would be to just load Network.framework instead
[07:50:06] <ldb> fe[nl]ix: I find libboringssl.tbd, which includes some of the symbols
[07:50:25] <ldb> _OPENSSL_cleanse, _OPENSSL_free, _OPENSSL_malloc, etc.
[07:53:30] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[07:54:38] <etimmons> fe[nl]ix: I don't know how much you've been following it/if this will affect you at all. But on Monterey, if you dlopen any nonexistent path that ends in lib{ssl,crypto}.dylib your process will be aborted
[07:54:40] <ldb> fe[nl]ix: https://pastebin.com/pgvyWtER
[07:56:03] <fe[nl]ix> ldb: thanks. how did you obtain that output ?
[07:56:38] <fe[nl]ix> etimmons: which is why the cl+ssl of probing libraries won't work
[07:56:49] <fe[nl]ix> *cl+ssl approach
[07:57:04] <fe[nl]ix> but I need to blog about it
[07:58:44] <etimmons> Yep. It's unfortunate. Anton pushed a change that checks for the existence of non-system SSL dylibs before loading them. I think it works, but it just makes the macOS code even more nasty than it already was.
[07:58:55] <ldb> fe[nl]ix: I'm greping the MacOSX.sdk shipped with CommandLineTools
[07:59:26] <ldb> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib there are some symbol tables there.
[08:01:13] <fe[nl]ix> interesting that the main init functionss, OPENSSL_init_ssl and OPENSSL_init_crypto, are missing
[08:03:19] <ldb> yea I find other crypto related libraries there.
[08:04:48] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[08:05:55] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[08:06:56] *** Quits: king (~kingofcsu@123.118.74.105) (Quit: king)
[08:08:52] *** Quits: semz (~none@user/semz) (Ping timeout: 265 seconds)
[08:21:32] *** Joins: semz (~none@user/semz)
[08:24:22] *** Joins: karlosz (~karlosz@47.151.136.69)
[08:44:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:45:44] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[08:48:03] *** Joins: asarch (~asarch@2806:10ae:7:eae1:f5bc:3731:a20a:a4c)
[09:02:39] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[09:09:13] *** Quits: georgy (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (EOF))
[09:12:47] *** Quits: jstoddard (~user@2600:8801:a400:5a00::72d6) (Quit: ERC (IRC client for Emacs 27.1))
[09:24:28] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[09:25:28] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Quit: Ping timeout (120 seconds))
[09:25:47] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[09:31:46] *** Joins: Alfr (~Alfr@user/alfr)
[09:42:11] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[09:48:20] *** Quits: asarch (~asarch@2806:10ae:7:eae1:f5bc:3731:a20a:a4c) (Quit: Leaving)
[09:52:04] *** Joins: king (~kingofcsu@123.118.74.105)
[09:55:02] *** Quits: king (~kingofcsu@123.118.74.105) (Client Quit)
[10:01:58] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[10:07:09] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 252 seconds)
[10:17:28] *** Joins: treflip (~user@95.79.32.99)
[10:19:28] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:da4:9ec6:5ef5:74d6) (Ping timeout: 268 seconds)
[10:28:23] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[10:28:46] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:37:27] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Client closed)
[10:38:09] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:40:27] *** Joins: |3b|` (bbb@user/3b/x-2324788)
[10:40:44] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[10:41:30] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[10:41:32] *** Quits: |3b| (bbb@user/3b/x-2324788) (Ping timeout: 240 seconds)
[10:41:52] *** Quits: anddam (~anddam@user/anddam) (Ping timeout: 256 seconds)
[10:41:52] *** Quits: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[10:42:08] *** Joins: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de)
[10:43:15] *** Joins: zacque (~zacque@175.139.232.25)
[10:44:29] *** |3b|` is now known as |3b|
[10:46:01] *** Joins: anddam (~anddam@user/anddam)
[10:46:01] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:48:54] *** Joins: pillton` (~user@118.208.141.168)
[10:48:55] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[10:51:18] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[10:51:52] *** Quits: pillton (~user@61-68-208-155.tpgi.com.au) (Ping timeout: 260 seconds)
[10:51:58] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[10:52:19] *** Quits: treflip (~user@95.79.32.99) (Read error: Connection reset by peer)
[10:52:39] *** Joins: treflip (~user@95.79.32.99)
[10:52:43] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11d8:819b:219e:f772:a70d:2c66)
[10:54:57] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Client Quit)
[10:56:37] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[10:59:00] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 265 seconds)
[10:59:32] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[11:00:41] *** Quits: dale (dale@user/dale) (Ping timeout: 252 seconds)
[11:01:04] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:01:44] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[11:01:57] *** Joins: dale (dale@user/dale)
[11:03:59] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 252 seconds)
[11:04:44] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[11:06:09] *** Joins: lagash (lagash@lagash.shelltalk.net)
[11:16:26] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:16:42] <mzan> White_Flame: true. (I didn't thinked to these reason). In reality, my point were that too few parens in case are misleading. Case should avoid ``(case x (1 ...))`` from the beginning and accept only ``(case x ((1) ...))``. "case" can also avoid ``(case x (() ..)`` and ``(case x (nil ..))`` because it is never executed. But obviously, I'm only introducing noise. At this point is a semi-joke/trolling about "case". I understood the behaviour of case,
[11:16:42] <mzan> it is acceptable/right, and also I missinterpreted a quotation like 'forward instead of using a symbol like :forward.
[11:16:51] *** Joins: amb007 (~a_bakic@179.148.22.93.rev.sfr.net)
[11:20:02] <mzan> beach: hi
[11:27:55] <beach> mzan: Never mind.  I was going to point out some more style issues, but you have already been told them, and you didn't seem interested in fixing them.
[11:28:57] <mzan> beach: you miss-interpreted. I linked old code. If you read the end of the file, I adopted the new style you suggested. At least I hope.
[11:29:11] <mzan> I add code to the file at each exsercise.
[11:29:47] <beach> But it would be a good exercise to fix the previous one too, and it would help people reading the code, because they don't know where the old starts and the new begins.
[11:30:56] <mzan> The file start with
[11:30:57] <mzan> ; Study Common Lisp (CL) using AoC 2021 as exsercise.
[11:30:57] <mzan> ; This code makes no justice of CL, because I'm a newbie.
[11:32:07] <mzan> BTW, I fixed the "ecase" error, because it was an error, and doing this I fixed also the style. But I didn't commit yet.
[11:32:28] <mzan> Because there is also temporary code for the day 4.
[11:33:19] *** Quits: gaqwas (~john@dynamic-095-115-044-086.95.115.pool.telefonica.de) (Ping timeout: 252 seconds)
[11:36:26] <beach> mzan: I do not keep track of the details of your code, such as the day that it was written compared to the day you were given style advice, and I don't think I'm alone.  But that's OK.  Don't worry about it.
[11:47:47] <mzan> AoC are 25 exsercise. Many use it for learning a new PL. So the style and tricks used in last exsercise will be very different from the style used in first exsercise. It is like reading a diary.
[11:57:06] *** Joins: frgo (~frgo@2001:4ba0:92c1:806:7524:86b4:ffe0:bf1a)
[11:57:25] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[11:57:36] *** Joins: Cymew (~ante@host-217-213-139-210.mobileonline.telia.com)
[11:59:21] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 252 seconds)
[11:59:29] *** Quits: pillton` (~user@118.208.141.168) (Remote host closed the connection)
[12:02:13] *** Quits: frgo (~frgo@2001:4ba0:92c1:806:7524:86b4:ffe0:bf1a) (Ping timeout: 240 seconds)
[12:03:46] *** Quits: amb007 (~a_bakic@179.148.22.93.rev.sfr.net) (Ping timeout: 265 seconds)
[12:04:27] *** Joins: amb007 (~a_bakic@205.36.22.93.rev.sfr.net)
[12:08:31] *** Quits: treflip (~user@95.79.32.99) (Quit: time to work)
[12:10:00] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:12:33] *** Quits: amb007 (~a_bakic@205.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:12:41] *** Joins: amb007 (~a_bakic@205.36.22.93.rev.sfr.net)
[12:12:41] *** Quits: amb007 (~a_bakic@205.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:12:54] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:14:00] *** Joins: notzmv (~zmv@user/notzmv)
[12:14:36] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:14:43] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:16:30] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[12:19:31] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[12:19:45] *** Joins: amb007 (~a_bakic@205.36.22.93.rev.sfr.net)
[12:27:52] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:47:50] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[12:53:17] *** Joins: s-liao (~s-liao@101.86.99.70)
[13:09:01] *** Quits: Cymew (~ante@host-217-213-139-210.mobileonline.telia.com) (Ping timeout: 240 seconds)
[13:09:49] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[13:10:12] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[13:13:13] *** Joins: karlosz (~karlosz@47.151.136.69)
[13:19:10] *** Quits: dre (~dre@60.229.45.121) (Ping timeout: 265 seconds)
[13:22:42] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[13:24:42] *** Quits: OlCe` (~user@lfbn-nic-1-117-213.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[13:30:43] *** Joins: OlCe (~user@lfbn-nic-1-117-213.w2-15.abo.wanadoo.fr)
[13:35:56] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[13:37:10] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[13:40:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:41:34] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:45:44] *** Quits: _paul0 (~paul0@191.251.43.155) (Remote host closed the connection)
[13:46:08] *** Joins: _paul0 (~paul0@2804:1b3:8401:1257:5949:57d:97aa:adf3)
[13:47:43] *** Joins: VincentVega (~user@212.241.29.218)
[13:48:52] *** Quits: amb007 (~a_bakic@205.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[13:52:25] *** Joins: VincentV` (~user@212.241.29.218)
[13:52:26] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[13:54:07] *** Quits: VincentVega (~user@212.241.29.218) (Ping timeout: 252 seconds)
[13:59:13] *** Quits: frodef (~frode@46.212.93.4) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[13:59:42] *** Joins: frodef (~frode@46.212.93.4)
[14:05:03] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[14:08:39] *** Joins: treflip (~user@95.79.32.99)
[14:15:10] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:21:08] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[14:21:13] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:22:40] *** Joins: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it)
[14:25:14] *** Joins: Krystof (~user@81.174.155.115)
[14:41:06] *** Joins: pillton (~user@118.208.141.168)
[14:43:46] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:49:04] *** Quits: _paul0 (~paul0@2804:1b3:8401:1257:5949:57d:97aa:adf3) (Ping timeout: 265 seconds)
[14:51:36] *** Joins: s-liao (~s-liao@101.86.99.70)
[15:09:16] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[15:12:16] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11d8:819b:219e:f772:a70d:2c66) (Ping timeout: 265 seconds)
[15:12:52] *** Joins: pjb (~pjb@user/pjb)
[15:16:18] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11d8:819b:219e:f772:a70d:2c66)
[15:23:19] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[15:31:18] *** Quits: pillton (~user@118.208.141.168) (Quit: ERC (IRC client for Emacs 27.2))
[15:39:12] *** Joins: s-liao (~s-liao@101.86.99.70)
[15:45:59] *** Joins: igemnace (~ian@user/igemnace)
[15:49:40] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:54:43] *** Quits: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it) (Read error: Connection reset by peer)
[16:02:54] *** Joins: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it)
[16:06:08] *** Joins: raeda__ (~raeda@72.49.249.241)
[16:07:22] *** Quits: raeda_ (~raeda@72.49.249.241) (Remote host closed the connection)
[16:13:47] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[16:14:05] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:18:52] *** Joins: random-nick_ (~random-ni@87.116.166.234)
[16:25:59] *** Joins: treflip (~user@95.79.32.99)
[16:26:54] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[16:34:12] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:cd28:ecf9:b8a2:d95a)
[16:58:27] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[17:09:30] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[17:09:45] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[17:09:53] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Remote host closed the connection)
[17:10:07] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[17:18:21] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:21:54] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:22:46] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 265 seconds)
[17:28:49] *** Joins: Bike (~Glossina@71.69.170.70)
[17:28:49] *** ChanServ sets mode: +o Bike
[17:30:38] *** Joins: xsperry (~xs@user/xsperry)
[17:31:59] *** Joins: davep (uid504677@id-504677.tinside.irccloud.com)
[17:32:38] *** Joins: pve (~pve@178-55-232-234.bb.dnainternet.fi)
[17:36:56] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[17:37:05] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Client Quit)
[17:37:16] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[17:39:53] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[17:40:13] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[18:00:45] <_73> Is there a difference between a `(signed-byte 64)` in CL and a 64-bit signed integer in C?
[18:01:57] <yitzi> _73: You mean in encoding?
[18:02:11] <_73> yes
[18:03:50] <empwilli> afaik C doesn't really make a statement about encoding, as well? it only describes properties that a 64-bit signed int must fulfill?
[18:04:09] <empwilli> the rest should be implementation/platform specific
[18:06:40] <_73> empwilli: I did not know that
[18:07:10] *** Quits: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[18:07:20] <_73> I am trying to find documentation on how SBCL encodes a `(signed-byte 64)` but cannot.
[18:08:11] <Xach> _73: if you could find it, what would you do with that information?
[18:08:20] <empwilli> https://en.cppreference.com/w/cpp/types/integer ah, apparently it is even specified that they use two's complement
[18:08:38] <jdz> clhs signed-byte
[18:08:39] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/t_sgn_by.htm
[18:10:04] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[18:10:39] <jdz> The spec says what numbers are included in the set denoted by this type, but not their "representation".
[18:11:31] <jdz> Implementation details are usually left to implementations.  But I'm also curious about the answer to Xach's question.
[18:12:09] <_73> I just wanted to know
[18:12:12] <Bike> sbcl does not encode numbers in the same way in every context
[18:13:19] <jdz> I bet the representation depends on the machine type SBCL (and C) are running on, but most of the time I'd expect the implementations to use "native" representations.
[18:13:22] <Bike> in a typed array on a 64 bit system they might be stored as untagged machine words. on a 32 bit system, two machine words. if the type is less clear, it could fall back to using bignums
[18:14:09] <Nilby> _73: I don't think rely on it. It can depend on how it's compiled. If you need to be compatible with C, you can (cffi:convert-to-foreign x :int64) where x is declared an (signed-byte 64), and if you're lucky it might only take 1 instruction.
[18:14:36] *** Joins: idurand (~user@2a01:cb19:150:3400:edbf:feb1:ed71:75d6)
[18:14:50] *** Joins: ldb (~user@user/ldb)
[18:14:51] *** Quits: idurand (~user@2a01:cb19:150:3400:edbf:feb1:ed71:75d6) (Client Quit)
[18:14:52] <Bike> if you compile with high SPEED optimization, it will give you many notes when it can't figure out how to avoid representing things optimally
[18:14:57] <Bike> er
[18:15:04] <Bike> "how to represent thigns optimally"
[18:15:14] *** Joins: s-liao (~s-liao@101.86.99.70)
[18:15:51] *** Joins: idurand (~user@2a01:cb19:150:3400:edbf:feb1:ed71:75d6)
[18:16:27] <Bike> spelling. hard.
[18:16:54] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 265 seconds)
[18:20:21] *** Joins: treflip (~user@95.79.32.99)
[18:20:46] *** Quits: idurand (~user@2a01:cb19:150:3400:edbf:feb1:ed71:75d6) (Ping timeout: 260 seconds)
[18:22:19] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[18:24:04] <jackdaniel> planet ape reference?
[18:24:42] *** Joins: Algernon666 (~Algernon6@2a04:cec0:11c7:1a3b:219e:f772:a70d:2c66)
[18:25:07] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 265 seconds)
[18:25:10] <Nilby> _73: There's also cffi:with-pointer-to-vector-data which could be transparent, or even not require swizzling if everything goes well.
[18:25:47] *** Joins: amb007 (~a_bakic@176.13.23.93.rev.sfr.net)
[18:26:45] <_73> Nilby: Thanks, I'll remember to use cffi if I need to be compatible with C, which could be possible for my project.
[18:27:49] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11d8:819b:219e:f772:a70d:2c66) (Ping timeout: 240 seconds)
[18:30:39] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[18:35:33] <Nilby> _73: Implementations generally need complete freedom to do data encoding however they want, so you can have a CL interpreter or run on top of other languages (e.g. ABCL), unusual architectures, etc.
[18:40:39] <Bike> having a bijection from language types to machine representations would be far too limiting. even in C you have packed vs unpacked structures and stuff.
[18:44:43] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[18:45:30] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[18:46:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:cd28:ecf9:b8a2:d95a) (Ping timeout: 268 seconds)
[18:50:31] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[18:53:04] <Nilby> I like to imagine one could constuct a purely mechanical hand-cranked but compliant CL.
[18:54:34] *** Quits: amb007 (~a_bakic@176.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[18:55:28] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[18:57:52] <pjb> Nilby: indeed.
[19:07:25] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[19:14:39] *** Quits: zacque (~zacque@175.139.232.25) (Quit: Goodbye :D)
[19:15:17] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:1b4:2cec:47c3:871e)
[19:16:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:26:47] *** Joins: aartaka (~aartaka@176.59.202.162)
[19:27:19] *** Quits: aartaka (~aartaka@176.59.202.162) (Read error: Connection reset by peer)
[19:27:34] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:29:11] *** derelict is now known as tetrahedron
[19:34:43] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[19:34:45] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:38:23] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:52:36] *** Quits: VincentV` (~user@212.241.29.218) (Ping timeout: 265 seconds)
[20:03:46] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:08:01] *** Joins: idurand (~user@laptop-ipv6-2001-660-6101-403-1-e9.labri.fr)
[20:09:14] *** Joins: makomo (~makomo@user/makomo)
[20:15:31] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[20:16:00] *** Joins: srhm (~srhm@user/srhm)
[20:22:44] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:33:35] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[20:35:35] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[20:35:39] <utis> is there a straightforward way to loop for i from* a to* be when one doesn't know which of a and b is greatest?
[20:37:00] *** Joins: Catie (~user@user/catie)
[20:38:13] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[20:38:35] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Remote host closed the connection)
[20:42:23] *** Quits: idurand (~user@laptop-ipv6-2001-660-6101-403-1-e9.labri.fr) (Ping timeout: 265 seconds)
[20:45:55] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[20:49:03] <fe[nl]ix> luis: ping
[20:51:02] <Xach> utis: (loop for with step = (signum (- b a)) for a* = a then (+ a* step) until (= a* b) do ...)
[20:51:08] <Xach> "Straightforward"
[20:52:40] <utis> hehe . . thanks
[20:54:53] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[20:56:01] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:57:09] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[20:57:23] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:58:50] <Bike> (loop for i from (min a b) to (max a b) ...)?
[21:01:02] <beach> Not quite conforming to the specification.
[21:01:40] <Bike> it's not?
[21:01:48] <beach> That one might loop from b to a, but it was specified that the loop should be from a to b.
[21:02:35] <Bike> oh, like the specification of the problem. yeah, maybe i didn't understand it
[21:04:54] *** Joins: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it)
[21:08:13] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 240 seconds)
[21:14:48] <Guest74> I guess you could always write a macro around it to test which is greater and stick a :to or :downto accordingly.  this is usually when I reach for DO.
[21:20:31] <Xach> I don't see signum much in my normal course of lisping so it's always fun to use it.
[21:20:56] *** Joins: igemnace (~ian@user/igemnace)
[21:23:16] <Guest74> i use it so infrequently I keep forgetting about it.  Then when I see it again, i think i should make more frequent use of it.
[21:23:48] <Xach> a function that used signum and revappend would be doubly blessed. ldiff too? trebly.
[21:25:37] <Guest74> I'd love to so a practical example of those, especially ldiff.  Never used either.
[21:26:05] <Guest74> but then again, every time I use append something goes wrong.
[21:27:01] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 240 seconds)
[21:27:06] <_73> then surely everything will go right when you use revappend
[21:27:37] <Guest74> healthy logic, warrants a try.
[21:29:28] <Bike> https://github.com/s-expressionists/Cleavir/blob/main/Ctype/default.lisp#L344-L345 here's a simple use of ldiff i wrote. tailp i can't help you with
[21:32:09] <Guest74> rewords wish, a practical self contained example.  :)   seriously though, I'll look at that later I think I'll have to understand more of where it's used.  busy writing a visualization right now.  lol, though it basically requires picking colours .
[21:35:27] <Bike> it takes a lambda list with &optional in it, and gets a list of the elements before the &optional.
[21:35:51] *** Quits: gko (~user@user/gko) (Remote host closed the connection)
[21:36:16] *** Joins: gko (~user@user/gko)
[21:37:13] <Guest74> this sounds useful to me.  does it return it in the order written?
[21:40:13] <Bike> Yes. like, (a b c &optional d) => (a b c)
[21:41:53] <Guest74> that sounds like something I can use.  Hopefully I can remember it when the time comes.
[21:43:10] <Bike> the downside is it traverses the list twice, but at least it's ismple to write
[21:43:16] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (Ping timeout: 245 seconds)
[21:43:18] *** Joins: tophullyte (~tophullyt@162.213.177.125)
[21:44:08] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Client closed)
[21:44:33] *** Quits: treflip (~user@95.79.32.99) (Quit: good night ✨)
[21:44:33] <Guest74> and usually very small lists
[21:46:08] *** Joins: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte)
[21:49:05] *** Quits: tophullyte (~tophullyt@162.213.177.125) (Ping timeout: 265 seconds)
[21:49:24] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[21:50:46] *** Joins: VincentVega (~user@212.241.29.218)
[21:53:33] *** Joins: VincentV` (~user@212.241.29.218)
[21:55:01] *** Quits: VincentVega (~user@212.241.29.218) (Ping timeout: 240 seconds)
[22:07:53] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[22:09:29] <jackdaniel> uh oh, sbcl in safe code "Unhandled memory fault at #x5E8ECA8." :) but I'll need to test with a newer release
[22:15:57] <rotateq> pretty rare such a thing, isn't it? like a shiny pokemon
[22:16:32] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[22:22:06] <jackdaniel> well, it seems that I have a recent release and it broke after the system built it, I'll try with local build and narrow the issue
[22:35:18] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[22:36:26] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[22:39:15] *** Joins: gaqwas (~john@dynamic-095-115-044-086.95.115.pool.telefonica.de)
[22:43:03] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[22:52:19] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[23:08:20] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 252 seconds)
[23:09:01] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11c7:1a3b:219e:f772:a70d:2c66) (Ping timeout: 240 seconds)
[23:11:37] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Ping timeout (120 seconds))
[23:14:36] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[23:15:22] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[23:17:28] *** Joins: Algernon666 (~Algernon6@2a04:cec0:11c7:1a3b:219e:f772:a70d:2c66)
[23:24:44] <Guest74> I really need to fix my recording functions.  recording this https://youtu.be/zgXHWmBH00o has brought my laptop to a crawl.  a single thread running an ffmpeg process shouldn't cause this should it? I wonder if sbcl is reading all the output?  Shouldn't this slowdown go away after the thread is killed?
[23:25:03] <Guest74> I'm going to have to reboot, it's still slow like half an hour after.
[23:27:09] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:27:52] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:29:20] *** Quits: VincentV` (~user@212.241.29.218) (Remote host closed the connection)
[23:32:22] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[23:32:23] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[23:33:22] *** Joins: minion (~minion@common-lisp.net)
[23:33:24] *** Joins: specbot (~specbot@common-lisp.net)
[23:34:14] *** Quits: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 256 seconds)
[23:36:27] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[23:36:46] *** Joins: minion (~minion@common-lisp.net)
[23:36:53] *** Quits: specbot (~specbot@common-lisp.net) (Killed (NickServ (GHOST command used by specbot1)))
[23:37:39] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[23:38:00] *** Joins: minion (~minion@common-lisp.net)
[23:38:46] *** Joins: specbot (~specbot@common-lisp.net)
[23:44:37] *** Joins: VincentVega (~user@212.241.29.218)
[23:49:27] *** Joins: VincentV` (~user@212.241.29.218)
[23:51:37] *** Quits: VincentVega (~user@212.241.29.218) (Ping timeout: 268 seconds)
[23:54:25] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[23:56:08] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
