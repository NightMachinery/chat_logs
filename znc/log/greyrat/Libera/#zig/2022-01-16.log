[00:22:38] *** Quits: chgr (~ek@nat-91-137-25-18.net.encoline.de) (Quit: WeeChat 3.3)
[00:26:05] *** Joins: ur5us (~ur5us@203.86.198.200)
[00:26:05] *** Joins: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b)
[00:39:28] *** Quits: phaleth (~user@user/phaleth) (Quit: phaleth)
[00:42:59] *** Quits: ur5us (~ur5us@203.86.198.200) (Ping timeout: 256 seconds)
[00:51:54] *** Joins: rgrinberg (~textual@2806:101e:7:4889:70e9:6f65:e573:10f5)
[01:11:20] *** Quits: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net) (Remote host closed the connection)
[01:15:08] *** Quits: tsmanner_ (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net) (Quit: tsmanner_)
[01:15:23] *** Joins: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net)
[01:18:20] *** Quits: trainsley69_ (~trainsley@c83-252-9-240.bredband.tele2.se) (Ping timeout: 250 seconds)
[01:19:18] <voldial> Is there something wrong with my setup? I am using zig.vim, and by default all TODO's are hilighted yellow, the exact same color as if I was to search with `/`, which is distracting when I am looking for matches.
[01:20:10] <voldial> https://github.com/ziglang/zig.vim/blob/master/syntax/zig.vim#L235
[01:32:57] *** Joins: trainsley69_ (~trainsley@c83-252-9-240.bredband.tele2.se)
[01:42:17] *** Quits: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b) (Ping timeout: 240 seconds)
[01:42:55] <voldial> oops. user error. its not zig.vim, just realized that plugin isnt being executed
[02:04:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[02:07:02] *** Quits: bozo (~bozo@188.252.191.222) (Quit: Leaving)
[02:18:44] *** Joins: nektro (~nektro@75-164-170-164.ptld.qwest.net)
[02:35:42] *** Quits: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa03) (Quit: wallace dozed off)
[02:36:22] *** Joins: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa03)
[02:43:45] *** Quits: ysh (sid6017@id-6017.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:57:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[03:06:38] *** Joins: pkap (~pkap@185.209.196.174)
[03:15:45] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[03:18:21] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[03:18:53] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[03:25:44] *** Quits: nurbl (~jofo@c83-252-92-24.bredband.tele2.se) (Ping timeout: 250 seconds)
[03:44:52] *** Joins: notapenguin (~ryu@187.3.254.107)
[04:04:43] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 256 seconds)
[04:12:00] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[04:13:03] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[04:13:15] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[04:14:14] *** Quits: notapenguin (~ryu@187.3.254.107) (Quit: WeeChat 3.4)
[04:17:11] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:9d9f:f6f8:55dd:d1e2)
[04:18:56] *** Joins: xackus (~xackus@185.15.0.3)
[04:22:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:22:57] *** Quits: rgrinberg (~textual@2806:101e:7:4889:70e9:6f65:e573:10f5) (Ping timeout: 240 seconds)
[04:23:01] *** Joins: sebonirc (~sebonirc@8.9.88.219)
[04:23:35] *** Joins: okCiel (~okCiel@softbank126051111074.bbtec.net)
[04:26:53] *** Joins: livoreno (~livoreno@user/notzmv)
[04:39:42] *** Joins: notzmv (~zmv@user/notzmv)
[04:40:21] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[04:45:02] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Ping timeout: 250 seconds)
[04:55:57] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:9d9f:f6f8:55dd:d1e2) (Ping timeout: 240 seconds)
[04:57:09] *** Quits: sebonirc (~sebonirc@8.9.88.219) (Quit: sebonirc)
[05:03:10] *** Joins: factor (~factor@c-73-68-120-166.hsd1.ma.comcast.net)
[05:12:54] <drewr> does std.mem.split require only string literals, or can I coerce a [*:0]u8 to a []const u8?
[05:13:23] <drewr> I want to split a string from a command line arg
[05:14:19] <drewr> to be more accurate, I'm splitting a path returned from libcurl
[05:18:37] *** Joins: dbe (~dbe@c188-149-52-217.bredband.tele2.se)
[05:21:26] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 250 seconds)
[05:25:49] *** Joins: xackus_ (~xackus@185.15.0.3)
[05:25:49] *** Quits: xackus (~xackus@185.15.0.3) (Read error: Connection reset by peer)
[05:29:44] *** Quits: dbe (~dbe@c188-149-52-217.bredband.tele2.se) (Killed (NickServ (GHOST command used by dbe1)))
[05:30:09] *** Joins: dbe (~dbe@c188-149-52-217.bredband.tele2.se)
[05:33:59] <dbe> I was experimenting with epoll in zig, and I noticed a few things; 1. std.os.linux.epoll_create1 has a return type of usize, which is wrong, and makes "if (-1 == ret)" blocks be optimized away by the compiler. 2. There is another one at sys.os.epoll_create1 (even though it's linux specific) with a better return value, but e.g. the constants/flags like EPOLL_CLOEXEC are not re-exported by os.zig
[05:34:00] <dbe> (missing a "pub const EPOLL = system.EPOLL;"). What is the guidelines here? What am I supposed to use?
[05:37:21] <shachaf> dbe: Looking at the second epoll_create1, it seems like you're supposed to getErrno to get an error code from a usize return value.
[05:37:27] <shachaf> to use getErrno
[05:39:18] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[05:40:28] <nektro> drewr: std.mem.span can perform the coercion
[05:48:32] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[05:54:11] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:55:01] *** Quits: xackus_ (~xackus@185.15.0.3) (Read error: Connection reset by peer)
[05:55:10] *** Joins: neurocyte0917095 (~neurocyte@user/neurocyte)
[05:57:24] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:57:24] *** neurocyte0917095 is now known as neurocyte091709
[05:57:26] *** Joins: xackus (~xackus@185.15.0.3)
[05:59:03] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[06:01:28] *** Quits: pkap (~pkap@185.209.196.174) (Ping timeout: 256 seconds)
[06:03:01] *** Joins: sebonirc (~sebonirc@8.9.88.219)
[06:04:02] *** Quits: Stalevar (~stalevar@user/stalevar) (Ping timeout: 240 seconds)
[06:07:34] <drewr> nektro: thanks, I got it to work... @as([]const u8, std.mem.span(path))
[06:08:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[06:10:24] <daurn> drewr: you shouldn't need the `@as`
[06:10:37] <nektro> nice :)  the `@as` there shouldnt be necessary afaik
[06:10:54] <daurn> drewr: I mean I guess if you really do want a `[]const u8` you do; but in general just let that happen automatically as you pass it elsewhere
[06:17:54] *** Joins: Stalevar (~stalevar@user/stalevar)
[06:19:38] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[06:19:53] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[06:20:16] <drewr> but span(path) just returns the same type right?
[06:22:21] <nektro> no it take `[*:0]const u8` and returns []const u8
[06:24:32] <drewr> ah, ok, it does work, I thought I had tried it already
[06:24:37] <drewr> thank you
[06:26:10] <drewr> I misread the tests under Span
[06:31:22] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[06:33:46] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:35:32] *** Quits: dbe (~dbe@c188-149-52-217.bredband.tele2.se) (Ping timeout: 240 seconds)
[06:52:34] *** Parts: DarkUranium (~DarkUrani@stdrand.com) (Leaving)
[06:52:41] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[07:01:06] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 250 seconds)
[07:05:32] *** Quits: okCiel (~okCiel@softbank126051111074.bbtec.net) (Ping timeout: 240 seconds)
[07:21:22] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:24:49] *** Quits: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net) (Quit: tsmanner)
[07:25:06] *** Joins: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net)
[07:34:16] <nektro> shell.nix is a really cool concept
[07:34:33] <nektro> wrong channel oops
[07:39:53] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[07:40:25] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[07:43:33] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[07:51:46] *** Joins: okCiel (~okCiel@softbank126051111074.bbtec.net)
[07:59:02] *** Quits: okCiel (~okCiel@softbank126051111074.bbtec.net) (Ping timeout: 240 seconds)
[07:59:46] *** Joins: okCiel (~okCiel@softbank126051111074.bbtec.net)
[08:04:35] *** Quits: okCiel (~okCiel@softbank126051111074.bbtec.net) (Ping timeout: 256 seconds)
[08:07:25] *** Joins: okCiel (~okCiel@softbank126051111074.bbtec.net)
[08:07:28] <tsmanner> nektro +1 the only two channels I auto join are zig and nixos
[08:18:14] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[08:28:02] *** Quits: semarie (~semarie@user/semarie) (Ping timeout: 240 seconds)
[08:30:48] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Read error: Connection reset by peer)
[08:32:22] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[08:33:46] *** Joins: semarie (~semarie@user/semarie)
[08:45:56] *** Quits: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net) (Remote host closed the connection)
[09:06:25] *** Quits: nektro (~nektro@75-164-170-164.ptld.qwest.net) (Quit: Client closed)
[09:11:25] *** Joins: nektro (~nektro@75-164-170-164.ptld.qwest.net)
[09:34:34] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:9d9f:f6f8:55dd:d1e2)
[09:52:25] *** Joins: ur5us_ (~ur5us@2406:e002:6d58:d101:7a5a:42e1:750a:339f)
[09:53:17] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:9d9f:f6f8:55dd:d1e2) (Ping timeout: 240 seconds)
[10:07:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:10:54] *** Quits: semarie (~semarie@user/semarie) (Ping timeout: 250 seconds)
[10:16:38] *** Joins: semarie (~semarie@user/semarie)
[10:33:37] *** Quits: sebonirc (~sebonirc@8.9.88.219) (Ping timeout: 256 seconds)
[10:42:32] *** Quits: okCiel (~okCiel@softbank126051111074.bbtec.net) (Ping timeout: 240 seconds)
[10:43:50] *** Quits: semarie (~semarie@user/semarie) (Ping timeout: 250 seconds)
[10:49:28] *** Joins: semarie (~semarie@user/semarie)
[11:01:09] *** Joins: okCiel (~okCiel@softbank126051111074.bbtec.net)
[11:08:32] *** Quits: okCiel (~okCiel@softbank126051111074.bbtec.net) (Ping timeout: 250 seconds)
[11:17:38] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:55:05] *** Joins: ysh (sid6017@id-6017.ilkley.irccloud.com)
[12:21:19] *** Quits: ur5us_ (~ur5us@2406:e002:6d58:d101:7a5a:42e1:750a:339f) (Quit: Leaving)
[12:24:27] *** Joins: tenshi (~red@user/tenshi)
[12:24:52] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Remote host closed the connection)
[12:26:23] *** Joins: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c)
[12:27:14] *** Quits: rgrinberg (~textual@2806:101e:7:2b:1003:b28a:b712:6d2c) (Client Quit)
[12:31:47] *** Joins: notzmv (~zmv@user/notzmv)
[12:49:59] *** Joins: pkap (~pkap@185.213.155.160)
[12:52:02] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[12:59:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[13:12:53] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:9d9f:f6f8:55dd:d1e2)
[13:18:17] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:9d9f:f6f8:55dd:d1e2) (Ping timeout: 240 seconds)
[13:24:23] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[13:26:17] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[13:32:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:45:42] *** Quits: nektro (~nektro@75-164-170-164.ptld.qwest.net) (Quit: Client closed)
[13:53:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[14:04:41] *** Quits: marwan (~marwan@90.247.112.9) (Remote host closed the connection)
[14:05:08] *** Joins: marwan (~marwan@90.247.112.9)
[14:17:51] *** Quits: pkap (~pkap@185.213.155.160) (Ping timeout: 256 seconds)
[14:22:36] <Franciman> hi everyone
[14:22:45] <Franciman> is there any library for writing a terminal UI in zig?
[14:22:50] <Franciman> that is interesting
[14:27:01] *** Joins: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b)
[14:27:25] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[14:40:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[15:04:29] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[15:06:26] <Snetry> Quick question, what is the stance of not using standardTargetOptions and standardReleaseOptions within a build.zig
[15:07:29] <ifreund> Snetry: perhaps if you are working on some werid embedded project where they dont make sens
[15:07:46] <ifreund> 99% of projects should use those though
[15:08:09] <Franciman> it's to give you the extra power you may need
[15:08:16] <Franciman> extra flexibility
[15:08:26] <Franciman> when you write your window manager for your washing machine
[15:08:45] <Snetry> ifreund: sure, but in genral its not something thats enforced so a project may very well choose to implement its own logic for that
[15:08:47] <Franciman> WM on WM is a good name, yes
[15:09:04] <Snetry> so is that something that can truly be relied on, like the advanced options
[15:10:50] <ifreund> If you're talking about this from the prespective of e.g. packaging zig software for distribution, yes I think any sofware that is intended to be package needs to provide -Dtarget whatnot
[15:11:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:11:21] <ifreund> failing to do so would be a bug with the project in question IMO
[15:15:15] <Snetry> I disagree
[15:15:48] <Snetry> I consider them as optional as they are not enforced by the build system
[15:27:44] <Earnestly> They are not optional if packaging requires it, such as changing prefixes and other paths.  Whether to use system libs or not, etc.
[15:27:59] <Snetry> thats not part of it
[15:28:17] <Earnestly> Especially if they have policies on which build flags to use
[15:28:21] <Snetry> all the --prefix* options are part of the General Options
[15:28:35] <Snetry> these are provided by build system in general
[15:28:42] <Snetry> you cannot remove them without editing the standard library
[15:28:57] <Earnestly> They don't provide all of the gnu standard directories, that might change though
[15:29:30] <Snetry> again, all the prefix stuff is included by default and an external project cannot change those
[15:29:49] <Snetry> what i am talking about are the -Dtarget, -Dcpu and all the -Drelease-* options, which are project specific
[15:30:17] <Snetry> and provided by std.build.Builder.standardTargetOptions and std.build.Builder.standardReleaseOptions
[15:41:29] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e558:997e:112:92fe:0:7ca)
[16:02:31] *** Joins: xackus (~xackus@185.15.0.3)
[16:35:18] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[16:42:57] *** Joins: chgr (~ek@nat-91-137-25-18.net.encoline.de)
[16:43:13] *** Quits: chgr (~ek@nat-91-137-25-18.net.encoline.de) (Client Quit)
[16:49:19] *** Quits: ofelas (~ofelas@ti0071a400-8852.bb.online.no) (Ping timeout: 256 seconds)
[16:52:26] *** Joins: dbe (~dbe@c188-149-52-217.bredband.tele2.se)
[17:06:12] <bw> does anyone have an up to date (for 0.9.0) example x86 os in zig? i see there are a bunch of old ones. i'm looking for the right way to setup build.zig
[17:08:17] <motiejus> I recall reading somewhere that perfect hash is somewhere in zig stdlib; is that true? I can't find it through grepping. If not, it's OK, just want to make sure before I go and (re-)implement it
[17:12:02] <ifreund> motiejus: don't think so currently
[17:12:56] <ifreund> motiejus: you're probably thinking of https://andrewkelley.me/post/string-matching-comptime-perfect-hashing-zig.html
[17:15:02] *** Quits: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b) (Ping timeout: 240 seconds)
[17:23:41] *** Joins: ofelas (~ofelas@ti0071a400-5026.bb.online.no)
[17:28:07] *** Joins: pkap (~pkap@185.213.155.252)
[17:31:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:32:12] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[17:32:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:32:57] *** Quits: pkap (~pkap@185.213.155.252) (Client Quit)
[17:40:19] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Read error: Connection reset by peer)
[17:40:56] <motiejus> Yes, I recall that, and something about stdlib'ing afterwards. Perhaps I misremembered it
[17:40:59] <motiejus> Thanks
[17:41:12] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[17:46:10] *** Joins: nyah (~nyah@94.6.71.219)
[17:51:32] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 240 seconds)
[17:54:32] *** Joins: NeoCron (~NeoCron@p200300c4cf4baa00766f97a7a0c56948.dip0.t-ipconnect.de)
[18:28:30] *** Joins: arkurious (~arkurious@user/arkurious)
[19:04:47] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e558:997e:112:92fe:0:7ca) (Quit: WeeChat 3.4)
[19:23:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[19:23:16] *** Joins: terminalpusher (~terminalp@2a01:586:875c:1:18dd:c6d:2987:1281)
[19:34:41] *** Joins: sebonirc (~sebonirc@8.9.88.219)
[19:36:30] *** Joins: koakuma (~koakuma@user/koakuma)
[19:53:00] *** Joins: xackus (~xackus@185.15.0.3)
[19:54:55] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[20:01:09] *** Quits: Bonstra (~Bonstra@val.bonstra.fr.eu.org) (Quit: Pouf c'est tout !)
[20:09:07] *** Joins: Bonstra (~Bonstra@val.bonstra.fr.eu.org)
[20:13:49] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[20:43:08] *** Joins: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-131-125.cust.tzulo.com)
[20:44:28] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e558:997e:112:92fe:0:7ca)
[20:48:11] *** Joins: [deleted] (~livoreno@user/notzmv)
[20:51:51] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[21:00:21] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[21:01:26] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[21:03:36] *** Quits: terminalpusher (~terminalp@2a01:586:875c:1:18dd:c6d:2987:1281) (Remote host closed the connection)
[21:08:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[21:08:32] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Quit: WeeChat 3.3)
[21:10:30] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[21:20:37] <andrewrk> motiejus, std.ComptimeStringMap
[21:37:12] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[21:41:37] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[21:57:27] <ifreund> it doesn't do perfect hashing though, at least not how I understand perfect hashing
[21:57:54] <motiejus> yeah. I found it while searching
[21:58:06] <motiejus> I saw it (by comptime params), but it didn't seem to do perfect hashing
[22:00:03] *** Joins: chgr (~ek@nat-91-137-25-18.net.encoline.de)
[22:03:00] *** Joins: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566)
[22:03:23] *** Joins: phaleth (~user@user/phaleth)
[22:04:17] *** Quits: _Vi (~vi0oss@2a0d:7c40:3000:1326::3) (Ping timeout: 240 seconds)
[22:04:54] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[22:11:25] <andrewrk> the API is solid, we use it in stage2. probably the implementation can be improved with the more robust comptime implementation
[22:19:16] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[22:23:56] <motiejus> context: inspired by your glibc_tool, I am trying to compress our user database. It needs to look up by username. I want to store the user structs in an array. Minimal perfect hashing of the username could provide me an index to the lookup array, saving space and time.
[22:24:39] <motiejus> but seems like there's quite a bit to learn in the perfect hashing space
[22:27:20] <andrewrk> ah neat
[22:27:36] <andrewrk> compression is such a fascinating topic
[22:28:12] <andrewrk> I remember trying to write a compressor when I was a young programmer and utterly failing
[22:29:24] <motiejus> yeah it is. Your talk in homemede seattle triggered me to look beyond xz and zstd
[22:29:34] <motiejus> There are some ready-to-use libraries available for perfect hashing; each key costs some bits. And now I need to estimate how much storage a trie would cost instead :)
[22:38:43] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[22:47:59] *** Joins: _Vi (~vi0oss@2a0d:7c40:3000:1326::3)
[22:54:05] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[22:54:28] *** Joins: rgrinberg (~textual@2806:101e:7:2b:a509:6fda:5123:c5ae)
[23:08:04] *** Joins: nurbl (~jofo@c83-252-92-24.bredband.tele2.se)
[23:24:17] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[23:36:48] *** Joins: livoreno (~livoreno@user/notzmv)
[23:44:21] *** Joins: xackus_ (~xackus@185.15.0.3)
[23:47:21] *** Quits: nurbl (~jofo@c83-252-92-24.bredband.tele2.se) (Ping timeout: 256 seconds)
[23:47:21] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 256 seconds)
[23:47:33] *** Joins: nurbl (~jofo@c83-252-92-24.bredband.tele2.se)
[23:52:26] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[23:52:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
