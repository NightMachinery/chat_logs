[00:00:26] *** Quits: stephane (~stephane@88.164.90.135) (Client Quit)
[00:00:39] *** Joins: stephane (~stephane@88.164.90.135)
[00:00:39] *** Quits: stephane (~stephane@88.164.90.135) (Client Quit)
[00:03:02] *** Joins: Pdroman (~Android@93.red-79-156-174.staticip.rima-tde.net)
[00:04:08] *** Parts: Pdroman (~Android@93.red-79-156-174.staticip.rima-tde.net) ()
[00:06:42] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 260 seconds)
[00:08:39] *** Joins: soliste (~soliste@88.164.90.135)
[00:18:16] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[00:21:15] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:33:32] *** Quits: fuzzix (~fuzzix@46.7.53.110) (Quit: brb)
[00:36:17] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 265 seconds)
[00:37:48] *** Quits: vague (~vague@irssi/staff/vague) (Quit: Client closed)
[00:38:23] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:49:34] *** Joins: fuzzix (~fuzzix@46.7.53.110)
[00:55:10] *** Quits: Dorward (~dorward@13.5.169.217.in-addr.arpa) (Quit: ZNC 1.8.2+deb2build1 - https://znc.in)
[00:56:37] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[00:57:39] *** Joins: Dorward (~dorward@13.5.169.217.in-addr.arpa)
[00:58:30] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[01:04:45] *** Quits: soliste (~soliste@88.164.90.135) (Quit: leaving)
[01:04:53] *** Joins: krismatrix (~krismatri@38.80.149.51)
[01:13:08] *** Quits: P1RATEZ (piratez@user/p1ratez) (Quit: https://miguelmigs.com/sensations-remixes-part-1/)
[01:13:49] *** Joins: vague (~vague@irssi/staff/vague)
[01:14:11] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 264 seconds)
[01:19:02] *** Quits: whynot_ (~whynot@37.73.62.14) (Quit: leaving)
[01:19:03] <krismatrix> does perl allow named clousers...perhaps more specifically can i do something like :    return sub fib($n) { ... }
[01:19:18] <revhippie> what would that do?
[01:20:02] <gordonfish> That returns a code ref.
[01:20:10] <revhippie> ...i meant the name.
[01:20:15] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[01:20:16] <gordonfish> oops, mis read that
[01:20:18] <krismatrix> just emulating something that i am seeing in JS. But seems pretty dumb to me...wouldn't making it simply a function and returning that be better.
[01:21:37] <gordonfish> krismatrix: You'd declare it like normal, than use a reference to it. Like:
[01:21:39] <gordonfish> sweval: sub fib($n) { ... } \&fib;
[01:21:40] <perlbot> gordonfish: sub { "DUMMY" }
[01:22:14] * GumbyPAN welcomes PPUTMAN - Patrick Putman to CPAN!
[01:22:26] <rfi> they are called anonymous sub rountines. ex: return sub { my $var = shift ,,, }
[01:22:52] <rfi> or more directly: my $sub = sub { pring "woo\n" }; $sub->() 
[01:23:03] <krismatrix> let me see if I can get you guys the JS code that I want to implement similarly in perl.
[01:25:06] <Grinnz> you can name a coderef but the only thing that affects is how it shows up in stack traces. there is no reason for a coderef to have a name unless you want to access it via name instead of via the ref
[01:25:18] <Grinnz> in which case you need to install it to that name in the package stash
[01:25:32] <Grinnz> and the coderef to it is unnecessary
[01:25:41] <krismatrix> https://perl.bot/p/hb7tus
[01:25:42] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[01:25:51] <krismatrix> That's the JS code. I want to emulate the same but in perl.
[01:26:14] <Grinnz> ah, that's just so it can call itself. if you're on perl 5.16+ you can enabled the current_sub feature and use __SUB__ to do that
[01:26:45] <krismatrix> ? current sub feature?
[01:26:51] <Grinnz> use feature 'current_sub';
[01:27:06] *** Quits: magla (~gelignite@55d45a4d.access.ecotel.net) (Quit: Stay safe!)
[01:27:06] <Grinnz> it's also available in any feature bundle starting with 5.16
[01:27:22] <krismatrix> ok..found the perldoc on it...let me look.
[01:27:23] <Grinnz> if you're not on perl 5.16+, you can use https://metacpan.org/pod/Data::Munge#rec-BLOCK
[01:27:24] <Paperbot> Link title(s): [ Data::Munge - various utility functions - metacpan.org ]
[01:27:44] <krismatrix> for this type of monkeying around..i am using perl v 30
[01:28:03] <Grinnz> you can also use lexical named subs to get something closer to what js is doing there - but that requires an even newer perl
[01:28:45] <gordonfish> Oh I see. Yeah use feature 'current_sub'; as Grinnz mentioned above will let you self reference an anon sub from within it.
[01:29:16] <Grinnz> actually i take that back, it doesn't look like lexical named subs have any support for sensible recursive calls
[01:29:22] <Grinnz> you'd just end up using __SUB__ anyway
[01:29:53] <krismatrix> use v7 can't come soon enough.
[01:30:15] <Grinnz> the sooner it comes the less features it'll have ready though :P
[01:30:26] <krismatrix> lol
[01:30:42] *** Quits: Pali (~pali@user/pali) (Ping timeout: 260 seconds)
[01:31:28] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[01:31:50] *** Quits: Discipulus_ (~discip@194.242.223.24) (Ping timeout: 260 seconds)
[01:34:52] <krismatrix> return __SUB__->($n-1) + __SUB__($n - 2);   What is wrong here?
[01:35:04] <Grinnz> the second one is missing a deref arrow
[01:35:11] <krismatrix> oh thx u
[01:35:51] <gordonfish> sweval: use feature qw(current_sub); sub fibonacci_master { my %cache; return sub ($n) { return $cache{$n} if exists $cache{$n}; return $n if $n < 2; $cache{$n} = __SUB__->($n-1) + __SUB__->($n-2); return $cache{$n}; }; } my $faster_fib = fibonacci_master; $faster_fib->(10);
[01:35:53] <perlbot> gordonfish: 55
[01:36:48] <krismatrix> perfect. working. Thank you. I learned something completely new. It is still not named though. It does allow you to call your current subroutine. meaning...you can't do return sub fib ($n) { .. }. I suppose you might argue...what is the point of the name?
[01:37:38] <gordonfish> If you really want to do it with named (though this is far from ideal)
[01:37:39] <gordonfish> sweval: sub fibonacci_master { my %cache; my sub fib; sub fib($n) { return $cache{$n} if exists $cache{$n}; return $n if $n < 2; $cache{$n} = fib($n-1) + fib($n-2); return $cache{$n}; } return \&fib; } my $faster_fib = fibonacci_master; $faster_fib->(10);
[01:37:42] <perlbot> gordonfish: 55
[01:38:45] <krismatrix> I don't really want to do any of this. I am just trying to understand it. This type of writing code is very confusing to me. I would avoid if possible.
[01:39:23] <gordonfish> sweval: sub fibonacci_master { my %cache; sub fib; my sub fib($n) { return $cache{$n} if exists $cache{$n}; return $n if $n < 2; $cache{$n} = fib($n-1) + fib($n-2); return $cache{$n}; } return \&fib; } my $faster_fib = fibonacci_master; $faster_fib->(10); fib(6); # Proof fib only exists inside of fibonacci_master
[01:39:25] <perlbot> gordonfish: ERROR: Undefined subroutine &main::fib called at (IRC) line 1. 
[01:41:20] <gordonfish> Re: <Grinnz> actually i take that back, it doesn't look like lexical named subs have any support for sensible recursive calls
[01:41:23] <gordonfish> Seems to work fine.
[01:42:17] <Grinnz> that's a memory leak, you've had it close over itself (same as if you put it in a scalar variable)
[01:42:23] <Grinnz> the docs mention this
[01:42:33] <gordonfish> oooooh ok yeah that's not good
[01:42:52] <gordonfish> (I did say it wasn't ideal, seems I was more right than I realized, heh)
[01:44:04] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[01:44:23] <krismatrix> all good man.
[01:45:13] <gordonfish> The anon sub version is the mroe normal perl way of doing it any how.
[01:46:04] <krismatrix> makes sense.
[01:47:17] * GumbyPAN CPAN Upload: Catalyst-View-MojoTemplate-0.004 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/Catalyst-View-MojoTemplate-0.004
[01:48:55] <krismatrix> what do I do if I get a coderef...i tried another closue implementation...but there is no recursion.
[01:49:06] <krismatrix> I just wanted to return a value..ut it returns a coderef.
[01:50:04] <krismatrix> ok..i need to take a step back...I thought I knew references...but I clearly do not.
[01:50:24] <krismatrix> *runs back to Orielly 'intermediate perl'*
[01:51:48] <gordonfish> sweval: use feature qw(current_sub); sub fibonacci_master { my %cache; return sub ($n) { return $cache{$n} if exists $cache{$n}; return $n if $n < 2; $cache{$n} = __SUB__->($n-1) + __SUB__->($n-2); return $cache{$n}; }; } my $faster_fib = fibonacci_master; $faster_fib->(10);
[01:51:50] <perlbot> gordonfish: 55
[01:52:02] <gordonfish> krismatrix: You can study that and compare to what you're attempting.
[01:54:01] <gordonfish> If you have a $coderef, then ``return $coderef;`` returns a reference to a sub (that $coderef refers to), where as ``return $coderef->(...)`` returns the result of calling the function (ahem, sub routine) that $coderef refers to.
[01:55:09] <gordonfish> (Also, my favorite fibonacci routine:)
[01:55:10] <gordonfish> sweval: use List::Util qw(reduce); sub fib($n) { reduce { $a + $b } 1..$n; } fib 10;
[01:55:12] <perlbot> gordonfish: 55
[01:55:29] <krismatrix> https://perl.bot/p/3gcqd4
[01:55:29] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[01:55:49] <krismatrix> That is what I am doing. It doesn't look all that differnt from what you have (but for the problem I am doing)
[01:56:37] <gordonfish> krismatrix: You can replace ``use feature 'signatures'; no warnings 'experimental::signatures';`` with just ``use experimental 'signatures';``
[01:57:00] <krismatrix> ok
[01:57:08] *** Quits: proller (~p@2a02:6b8:b081:4::1:36) (Ping timeout: 268 seconds)
[01:57:25] <gordonfish> krismatrix: I see that you define ``sub addTo80`` but never call it
[01:57:42] <krismatrix> not important...like I said..this is monkeying around code.
[01:58:06] <krismatrix> referring to the non-use of addTo80
[01:58:10] <gordonfish> ``sub memoizedAddTo80`` looks fine to me so dar
[01:58:11] <gordonfish> far
[01:59:15] <gordonfish> The problem is you're printing what memoizedAddTo80 returns, which is a code ref.
[01:59:49] <krismatrix> yeah..figured out the problem.
[01:59:57] <krismatrix> Not a problem with my function but rather how I am calling it.
[02:00:08] <gordonfish> memoizedAddTo80 shouldn't have an arg either. You want something like my $addTo80 = memoizedAddTo80; print $addTo80->(5), "\n";
[02:00:11] <krismatrix> had to this: my $memoized = memoizedAddTo80();
[02:00:11] <krismatrix> print $memoized->(5),"\n";
[02:00:12] <krismatrix> print $memoized->(5),"\n";
[02:00:20] <gordonfish> Yeah like that
[02:01:10] <krismatrix> I might have to go back and review oth learning perl and intermediate perl. I somehow skated by without knowing something that seem fairly fundamental.
[02:01:17] <gordonfish> In ``if ($cache{$n}) {``, you probably want that check to be ``if (exists $cache{$n}) {``
[02:01:39] <gordonfish> Otherwise it'll fail if it exists but is 0
[02:01:52] <krismatrix> good point.
[02:02:04] <gordonfish> (Like when $n -s -80)
[02:02:10] <gordonfish> s/-s/is/
[02:06:19] * GumbyPAN CPAN Upload: WebSocket-v0.1.2 by JDEGUEST https://metacpan.org/release/JDEGUEST/WebSocket-v0.1.2
[02:08:37] <krismatrix> thx guys. logging off for a bit.
[02:09:08] <gordonfish> No problem. Speaking of logs, I need to go add one to the stove.
[02:09:58] *** Joins: proller (~p@80.240.216.69)
[02:13:35] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 264 seconds)
[02:13:38] *** Quits: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net) (Ping timeout: 260 seconds)
[02:22:15] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[02:34:03] *** Joins: bmeneg (~Bruno@2001:1284:f016:975e:2136:af72:b1a1:5df5)
[02:34:07] *** Joins: pizdets_ (~pizdets@183.182.114.223)
[02:34:13] *** Quits: pizdets (~pizdets@183.182.114.240) (Ping timeout: 265 seconds)
[02:45:20] *** Quits: woei (~woei@cust-245-64-110-94.dyn.as47377.net) (Ping timeout: 265 seconds)
[02:47:03] *** Joins: jabberwok (~wlindley@75.105.20.104)
[02:51:11] *** Quits: vague (~vague@irssi/staff/vague) (Quit: Client closed)
[02:59:11] *** Quits: arthurpbs (~arthurpbs@168.121.98.124) (Ping timeout: 264 seconds)
[03:02:19] *** Joins: argento (~argent0@168-227-96-26.ptr.westnet.com.ar)
[03:04:02] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[03:04:25] *** Joins: proller (~p@2a02:6b8:b081:8813::1:39)
[03:12:45] *** Joins: arthurpbs (~arthurpbs@168.121.99.146)
[03:15:38] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[03:20:26] *** Joins: krismatrix (~krismatri@38.80.149.51)
[03:27:51] *** Quits: Su-Shee (~Susanne@p4ffc7739.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[03:29:43] *** Joins: Su-Shee (~Susanne@p50894954.dip0.t-ipconnect.de)
[03:35:08] *** Quits: proller (~p@2a02:6b8:b081:8813::1:39) (Ping timeout: 258 seconds)
[03:37:04] *** Joins: proller (~p@80.240.216.69)
[03:39:12] *** Quits: gloin (~gloin@user/gloin) (Remote host closed the connection)
[03:39:53] *** Quits: e1f (~user@141.117.1.174) (Quit: goodnight...)
[03:42:23] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 264 seconds)
[03:53:50] *** Joins: proller (~p@2a02:6b8:b081:8019::1:39)
[04:16:33] * GumbyPAN CPAN Upload: WebService-Mailgun-0.12 by MIKIHOSHI https://metacpan.org/release/MIKIHOSHI/WebService-Mailgun-0.12
[04:32:14] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 260 seconds)
[04:43:35] *** Joins: krismatrix (~krismatri@38.80.149.51)
[04:51:37] * GumbyPAN CPAN Upload: Net-Libwebsockets-0.02 by FELIPE https://metacpan.org/release/FELIPE/Net-Libwebsockets-0.02
[05:01:38] *** Quits: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617) (Quit: Leaving)
[05:02:34] *** Quits: Su-Shee (~Susanne@p50894954.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:04:16] *** Joins: Su-Shee (~Susanne@p50894212.dip0.t-ipconnect.de)
[05:11:54] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 260 seconds)
[05:19:22] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[05:23:20] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[05:40:32] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[05:46:48] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[06:00:59] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 264 seconds)
[06:01:45] * GumbyPAN CPAN Upload: CXC-Number-0.06 by DJERIUS https://metacpan.org/release/DJERIUS/CXC-Number-0.06
[06:02:52] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[06:07:20] *** Quits: argento (~argent0@168-227-96-26.ptr.westnet.com.ar) (Quit: leaving)
[06:14:13] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 258 seconds)
[06:16:35] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 264 seconds)
[06:18:16] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:19:21] *** Joins: pucara (~i@181.93.167.217)
[06:20:47] *** Joins: Manderson (~manderson@115.sub-174-208-203.myvzw.com)
[06:32:09] *** Quits: marcus (~marcus@mojo/viking/marcus) (Remote host closed the connection)
[06:32:09] *** Quits: batman (~batman@50.31.137.146) (Remote host closed the connection)
[06:32:33] *** Joins: batman (~batman@50.31.137.146)
[06:32:35] *** Joins: marcus (~marcus@mojo/viking/marcus)
[06:42:05] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[06:44:53] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 258 seconds)
[06:46:21] *** Quits: proller (~p@2a02:6b8:b081:8019::1:39) (Ping timeout: 245 seconds)
[06:48:00] *** Joins: ztx (~ztx@user/ztx)
[06:50:13] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[07:03:23] *** Quits: Martchus_ (~martchus@dynamic-077-002-062-076.77.2.pool.telefonica.de) (Ping timeout: 264 seconds)
[07:03:26] *** Joins: Martchus (~martchus@2a01:c22:7266:1100:d250:99ff:fe49:3cce)
[07:15:10] *** Quits: Manderson (~manderson@115.sub-174-208-203.myvzw.com) (Ping timeout: 258 seconds)
[07:16:19] *** Quits: patterner_ (sid212303@id-212303.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[07:17:05] *** Quits: tag (sid271787@id-271787.lymington.irccloud.com) (Ping timeout: 258 seconds)
[07:18:43] *** Joins: patterner_ (sid212303@ilkley.irccloud.com)
[07:19:26] *** Joins: tag (sid271787@id-271787.lymington.irccloud.com)
[07:31:21] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (Quit: gamo)
[07:34:17] *** Quits: blinky42 (~quassel@user/blinky42) (Ping timeout: 264 seconds)
[07:35:43] *** Joins: blinky42 (~quassel@jabber.blinkylight.net)
[07:35:43] *** Quits: blinky42 (~quassel@jabber.blinkylight.net) (Changing host)
[07:35:43] *** Joins: blinky42 (~quassel@user/blinky42)
[07:36:02] *** Joins: gamo (~Thunderbi@cm-93-156-61-102.telecable.es)
[07:40:10] *** Joins: vague (~vague@irssi/staff/vague)
[07:41:33] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[07:42:30] *** Joins: Linux77_ (~Linux7_7@186.233.182.226)
[07:44:36] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Remote host closed the connection)
[07:45:54] *** Quits: Linux77 (~Linux7_7@186.233.183.1) (Ping timeout: 260 seconds)
[07:46:49] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[07:46:58] *** Joins: jabberwok (~wlindley@75.105.20.104)
[07:48:01] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:60fb:a62c:6c4e:adb0) (Ping timeout: 245 seconds)
[07:55:07] *** Joins: mattil (~mattil@airio.portalify.com)
[08:10:59] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:12:21] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[08:42:11] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 258 seconds)
[08:43:16] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[08:44:16] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 245 seconds)
[08:53:53] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[08:58:19] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[08:59:34] *** Joins: furrymcgee (~devuan@cgn-89-1-210-103.nc.de)
[09:04:07] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[09:20:13] *** Joins: mattil (~mattil@dy6nrh-flyt23lvqvg39y-4.rev.dnainternet.fi)
[09:20:20] *** Quits: mattil (~mattil@dy6nrh-flyt23lvqvg39y-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:20:52] *** Joins: mattil (~mattil@airio.portalify.com)
[09:27:00] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[09:32:38] *** Joins: mattil (~mattil@dy6nrh-flyt23lvqvg39y-4.rev.dnainternet.fi)
[09:32:49] *** Quits: mattil (~mattil@dy6nrh-flyt23lvqvg39y-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:33:21] *** Joins: mattil (~mattil@airio.portalify.com)
[09:36:18] *** Joins: R2robot (~R2robot@user/r2robot)
[09:37:01] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[09:38:49] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[09:39:44] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[09:46:23] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[09:47:10] * GumbyPAN CPAN Upload: Weather-YR-0.44 by TOREAU https://metacpan.org/release/TOREAU/Weather-YR-0.44
[09:47:13] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: It's too late now.)
[09:48:57] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:49:05] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:49:17] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:49:35] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:50:07] *** Joins: mattil (~mattil@airio.portalify.com)
[09:56:20] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[10:01:36] *** Joins: Discipulus_ (~discip@194.242.223.24)
[10:11:16] *** Quits: pucara (~i@181.93.167.217) (Quit: Lost terminal)
[10:19:09] *** Quits: vague (~vague@irssi/staff/vague) (Quit: Client closed)
[10:24:46] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:24:55] *** Quits: Su-Shee (~Susanne@p50894212.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[10:26:43] *** Joins: Su-Shee (~Susanne@p4ffc78d4.dip0.t-ipconnect.de)
[10:32:14] *** Quits: randir (~randir@95-25-159-246.broadband.corbina.ru) (Remote host closed the connection)
[10:38:28] *** Joins: vague (~vague@irssi/staff/vague)
[10:39:00] *** Quits: nuclightq_ (~quasselxp@broadband-77-37-180-193.ip.moscow.rt.ru) (Ping timeout: 265 seconds)
[10:42:33] *** Joins: Pali (~pali@user/pali)
[10:43:38] *** Joins: randir (~randir@93.159.239.42)
[10:45:23] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 264 seconds)
[10:46:42] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[10:50:09] *** Joins: tejr (~tejr@user/tejr)
[11:00:56] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[11:02:42] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[11:03:05] *** Joins: tejr (~tejr@user/tejr)
[11:06:42] *** Quits: Pali (~pali@user/pali) (Ping timeout: 258 seconds)
[11:31:32] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[11:40:57] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[11:41:10] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Remote host closed the connection)
[11:41:37] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[11:46:24] * GumbyPAN CPAN Upload: App-sslmaker-0.14 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/App-sslmaker-0.14
[11:46:24] * GumbyPAN CPAN Upload: App-Netdisco-2.050003 by OLIVER https://metacpan.org/release/OLIVER/App-Netdisco-2.050003
[11:51:00] <Botje> huh no activity for ten hours, that's odd.
[11:53:16] <merpaderp> perl is a solved problem.
[12:01:17] *** Joins: jabberwok (~wlindley@75.105.20.104)
[12:07:12] <eseyman> also, people are sleeping
[12:18:54] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[12:26:44] *** Joins: choroba (~E.Choroba@88.146.255.106)
[12:29:55] <mst> djerius: I would look at Capture::Tiny + IPC::System::Simple or IPC::Run or IPC::Run3 for actually calling the external programs
[12:31:12] <mst> djerius: also not 100% sure why it's taking multiple runs, all the sqlite-ing should be happening in the parent so the jobs should be Just There
[12:31:19] <Altreus> I was, indeed, sleeping
[12:31:26] <Altreus> and now, regrettably, I am not
[12:31:33] <mst> djerius: maybe worth doing a SELECT of your own against the jobs table to figure out what the state is
[12:31:38] <Botje> "waking up today was a pointless act of masochism"
[12:33:09] <mst> djerius: $worker->backend->stats should do the trick
[12:33:19] <rindolf> Botje: heh
[12:33:39] <mst> Botje: that's what I said to myself yesterday, hence why I never actually got up and just slept through until today
[12:35:01] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[12:35:06] <Altreus> you can do that?
[12:35:19] <Altreus> I suppose "for some values of you"
[12:35:44] <mst> djerius: at least we seem to be getting closer, and it'll be cute to be able to e.g. do a stats call from a separate script while it's running, or run a tiny lite app with just the minion web UI to keep an eye on things
[12:37:36] <mst> Altreus: if I've been accumulating sleep deficit for a while, then yeah, absolutely, one of the entries in the 'advantage' column for my complete inability to have a regular sleep pattern
[12:40:17] <Altreus> On reflection I think I'd rather be able to redo a day than next one
[12:49:16] <Altreus> Is there some magic that can be performed to find out where $" gets changed?
[12:49:34] <mst> p3rl.org/Variable::Magic
[12:50:30] <mst> wiz fetch => sub { carp 'Changing $"'; return; };
[12:50:31] <mst> or so
[12:50:40] <mst> (check the docs for whatever stupid mistake I just made)
[12:53:14] * Botje groans at the terminology abuse here
[12:53:28] <mst> Botje: ?
[12:53:58] <mst> "jamming as many puns as possible into your module design" isn't abuse, it's the perl way :D
[12:54:09] <Botje> a wizard is clearly a mirror and 'cast' applies a proxy
[12:54:16] <Altreus> curse these well-behaved modules with no default exports
[12:54:41] *** Quits: Lemniscate (~sauvin@about/linux/staff/sauvin) (Ping timeout: 245 seconds)
[12:54:50] <Botje> mst: I did research into OO metaprogramming for a year, so it's just offensive to my eyes
[12:54:53] <Botje> other than that, cute naming.
[12:54:56] <Altreus> mst: it worked :) the correct spelling was: cast $", wizard(set => sub { Carp::cluck 'Someone set $"' } );
[12:55:08] <Botje> was that someone Altreus ?
[12:55:15] <Botje> I bet it was Altreus . always up to no good, that cat.
[12:55:51] <Altreus> and the winner is ...
[12:55:57] * Altreus parses cluck output
[12:56:11] <Altreus> Test::Builder::_print_to_fh
[12:56:28] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[12:57:28] <mst> Botje: right, but the perl level structure that stores the stuff is -called- the magic array, so it's on theme with the implementation it's attaching itself to
[12:58:02] <Botje> Yep, no argument there :)
[12:58:52] <mst> Botje: also, it gets fired as a callback during the set process but doesn't directly mediate the set operation itself, so it's kind of a 'before' modifier rather than a full proxy method
[12:59:30] <mst> makes me feel like using the 'proper' terminology would if anything be differently inaccurate
[12:59:39] <Altreus> hmm it does have a local()
[13:04:08] <mst> I forget how local and magic interact
[13:05:00] <Altreus> I mean I don't think Test::Builder is being naughty setting $" because it's doing it locally
[13:05:23] <Altreus> Test script doesn't run for me so I'm going to have to fuck about to see if anything else sets it
[13:06:16] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[13:08:06] <mst> Altreus: yeah, if there's a local it shouldn't leak and the problem is likely elsewhere
[13:08:25] <mst> Altreus: the only thing I can think of is to check if something it's printing has a stringify overload or something
[13:09:19] <Altreus> hrm
[13:09:29] <Altreus> it's a shopping trolley, it turns out
[13:09:51] <mst> four different pieces of code that never move in the same direction at once?
[13:10:03] <Altreus> ... @{[ ]}
[13:11:18] <Altreus> with a Maybe[Str] inside it
[13:11:29] <Altreus> sweval: "@{[ undef ]}"
[13:11:31] <perlbot> Altreus: Use of uninitialized value in join or string at (IRC) line 1. 
[13:11:35] <mst> I thought the silly name for that was babycart
[13:11:35] <Altreus> yeh that's what I thought
[13:11:57] <Altreus> I saw shopping cart but I'm English and so I used the correct term
[13:18:58] <Altreus> ah, it would help if the issue happened for me
[13:20:02] <Altreus> scratch that, it does now
[13:20:31] <mst> so if we're en_UKing it, surely it's the pram operator
[13:21:54] <Altreus> if I had heard babycart before, I would have said pram
[13:22:02] <Altreus> well I would have said what the fuck sort of word is that
[13:22:08] <Altreus> it sounds like an ironic metal band
[13:22:51] <mst> the shape *is* reminiscent of a full size lay-down pram
[13:23:28] <Altreus> with the player character pushing it
[13:24:36] <Altreus> er
[13:24:43] <Altreus> I feel like I'm new to this
[13:24:43] <mst> or you can see the @ as the handle, but that works too :D
[13:24:55] <Altreus> why does stuff leak out when I do 2>&1 > file
[13:25:09] <Altreus> surely only stdout and stderr are in use
[13:25:52] <Altreus> surely the terminal wouldn't know what to do with data on anything other than 1 and 2
[13:26:34] * GumbyPAN CPAN Upload: XML-MyXML-1.08 by KARJALA https://metacpan.org/release/KARJALA/XML-MyXML-1.08
[13:27:53] <Altreus> looks like |& less catches everything
[13:28:07] <Altreus> maybe >& also works?
[13:29:25] <Botje> you mean &>
[13:29:56] <Botje> and you swapped the order of 2>&1 and >
[13:30:03] <Botje> which is a common footgun, which is why &> is betterer.
[13:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:30:33] <Botje> should be "> file 2>&1" no matter how weird it looks
[13:31:01] *** Joins: csrf (~csrf@user/csrf)
[13:31:07] <fizzie> Yeah, the logic with `2>&1 > file` is that it first redirects fd 2 to the same thing fd 1 originally was, and then fd 1 to file, but that won't affect what fd 2 "points to".
[13:31:43] <mst> Altreus: "send stderr to the original stdout, then send stdout to this file" is probably not what you had in mind
[13:32:47] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:33:03] <Altreus> huh, I guess I rote-learned a wrong thing and never realised it was wrong
[13:33:17] <Botje> I learned &> first so yay me
[13:33:33] <Altreus> wait so it's |& but &>
[13:33:39] <Altreus> unless &| also works
[13:33:40] <Botje> ah but oui monsieur.
[13:33:52] <Altreus> no because then it would be foo&
[13:33:58] <Botje> because >&X is syntax for "redirect standard output to fd X"
[13:34:46] <freefallwefall> Can't think of nor google for the CPAN package for matching quotes or delimiters in text safely.
[13:34:58] <Botje> Text::Balanced?
[13:35:04] <freefallwefall> Yes, thank you!
[13:35:31] <freefallwefall> We really need to improve the metacpan search. I tried "balance text", but got nothing of the like. :P
[13:36:21] <Altreus> the search needs to be more elastic
[13:36:29] <freefallwefall> Yes. :)
[13:36:30] <mst> Altreus: >foo 2>&1 # and I often type it the wrong way round first, I just then immediately facepalm when it gives me the wrong result and fix it
[13:36:56] <Altreus> heisenbug!
[13:37:09] <Altreus> If I print the value of $" the warning moves to the next pram
[13:37:48] <rindolf> Altreus: pram?
[13:38:13] <mst> rindolf: please read scrollback
[13:39:09] <Altreus> something something babycham
[13:39:38] <rindolf> mst: i see, thanks
[13:43:00] <Altreus> literally nothing happens between printing $" and the warning that it's undef: >>>>> [ ] <<<<< Use of uninitialized value $" in join or string at
[13:43:13] <Altreus> wait, maybe buffering
[13:46:31] *** Quits: Stealth (stealth@sourcemage/archon/stealth) (Excess Flood)
[13:47:03] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[13:47:28] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[13:47:42] <Altreus> nope
[13:47:44] *** Joins: Stealth (stealth@sourcemage/archon/stealth)
[13:47:44] <Altreus> :D
[13:47:53] <Altreus> My guess is Perl is wrong
[13:48:15] <Altreus> There's no way a @{[ ]} is sort of lazily evaluated until it's output, is there?
[13:50:58] <aquanight> did I miss something?
[13:51:37] <aquanight> Altreus: it's complaining about $" being undef I'm guessing? (So why is it undef)
[13:52:05] <Altreus> that's right
[13:52:22] <Altreus> The line before it is def, and it isn't changed in between
[13:52:54] <Altreus> It /is/ changed by Test::Builder::note, which is the funnel through which all log messages are shoved in a test script
[13:53:15] <Altreus> So if the @ is evaluated late, $" will have been undef'd beforehand
[13:53:27] <aquanight> @ is not evaluated late
[13:53:34] <aquanight> it's evaluated at where the string is
[13:54:11] <aquanight> perlbot: sweval sub test { $" = undef; say shift; } test "Hello @{[1 .. 3]}"
[13:54:13] <perlbot> aquanight: Hello 1 2 3 
[13:54:21] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[13:54:25] <Altreus> yea
[13:54:28] *** Joins: tejr_ (~tejr@user/tejr)
[13:54:31] <Altreus> but this is 5.14
[13:54:36] <Altreus> good test though, I try
[13:54:50] *** tejr_ is now known as tejr
[13:54:53] <aquanight> perlbot: eval5.14 use strict; use warnings; sub test { $" = undef; print shift; } test "Hello @{[1 .. 3]}"
[13:54:56] <perlbot> aquanight: Hello 1 2 3
[13:55:21] <Altreus> yeah that trivial test works fine
[13:56:22] <aquanight> also nothing about https://metacpan.org/dist/Test-Simple/source/lib/Test/Builder.pm#L1294 modifys $"
[13:56:22] <Paperbot> Link title(s): [ lib/Test/Builder.pm - metacpan.org ]
[13:57:27] <aquanight> if something is stomping the value of $"
[13:57:34] <mst> aquanight: _print_to_fh local()s it in the version Altreus is working with
[13:57:37] <aquanight> it is mostly likely something that executes in that time
[13:57:50] <aquanight> mst: then it should have no effect on his code
[13:57:52] <mst> Altreus did double check the source code AFAIK
[13:58:06] <mst> aquanight: YES THAT'S WHAT WE'RE CONFUSED ABOUT AND HAVE BEEN DISCUSSING!
[13:58:12] * mst facepalms
[13:58:13] <Altreus> thanks for your input :P
[13:58:15] <aquanight> mst: I just woke up give me a break :)
[13:58:25] <Altreus> meeting time, gonna keep investigating after
[13:58:30] <mst> aquanight: go get yourself a coffee and read the scrollback then :P
[13:58:38] <aquanight> mst: my scrollback goes back 30 minutes
[13:58:42] <Altreus> why
[13:59:10] <aquanight> because I don't leave my shit turned on and pissing away electricty when I'm sleeping?
[13:59:33] <aquanight> anyway. Odds are something *in* the @{[ ]} itself is messing with $"
[13:59:54] <aquanight> my suggestion: insert a , do { printf "[%s]", $"; } at the end of your array expression
[14:00:00] <aquanight> my suggestion: insert a , do { printf "[%s]", $"; (); } at the end of your array expression
[14:00:09] <aquanight> nearly forgot that printf returned something
[14:00:22] <mst> we've already been trying precisely those things for precisely those reasons
[14:00:31] <aquanight> bah
[14:01:07] <aquanight> mst: was there a point where there was an example of the offending line?
[14:01:10] <Altreus> aquanight: it's a moose property that is a Maybe[Str]
[14:01:19] <Altreus> hold on
[14:01:25] <Altreus> that might be false because I was confused earlier
[14:01:31] <Altreus> oh hang on meeting
[14:01:39] * Altreus keeps ADHDing himself
[14:02:01] <mst> $self->distract while ADHD;
[14:02:54] <huf> Anno Domini H... D...?
[14:03:11] <mst> attention deficit huf disorder
[14:03:48] <aquanight> oh HOO
[14:03:54] *** Joins: semeion (~semeion@user/semeion)
[14:03:54] <aquanight> perlbot: eval5.14 use strict; use warnings; print "Testing @{[1, 2, 3, undef, 4, 5, 6]}"
[14:03:56] <perlbot> aquanight: Use of uninitialized value $" in join or string at (IRC) line 1. Testing 1 2 3  4 5 6
[14:03:58] <aquanight> it's not $"
[14:04:01] <aquanight> it's one of your array values
[14:04:40] <Altreus> aquanight++ # I was sure I tested that
[14:04:50] <Altreus> but not on 5.14 apparently
[14:04:51] <aquanight> perlbot: eval use strict; use warnings; print "Testing @{[1, 2, 3, undef, 4, 5, 6]}"
[14:04:52] <perlbot> aquanight: Use of uninitialized value in join or string at (IRC) line 1. Testing 1 2 3  4 5 6
[14:04:59] <aquanight> yeah they apparently fixed it at some point
[14:05:04] <aquanight> perlbot: evalall use strict; use warnings; print "Testing @{[1, 2, 3, undef, 4, 5, 6]}"
[14:05:05] <perlbot> aquanight: Couldn't pastebin output
[14:06:13] <mst> oh, yeah, the eval to pastebin function is currently having a mardy
[14:06:38] * GumbyPAN CPAN Upload: URPM-v5.124 by TVIGNAUD https://metacpan.org/release/TVIGNAUD/URPM-v5.124
[14:07:52] <aquanight> it was *only* 5.14
[14:07:56] <aquanight> https://l.perl.bot/p/wvnjkx
[14:07:56] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[14:08:16] <aquanight> 5.12 gets it right, 5.16 gets it right, only 5.14 sneaks in the confusing $"
[14:09:54] <aquanight> anyway, huzzah I wasn't useless for once?
[14:10:40] <mst> :D
[14:10:45] <mst> nicely figured out
[14:12:40] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[14:13:12] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:13:16] <Altreus> ah, haven't heard the term mardy used for quite some time
[14:13:32] <Altreus> except by me but I don't listen to myself as you well know
[14:14:18] <mst> that's ok, nor does anybody else
[14:15:03] *** Linux77_ is now known as Linux77
[14:15:04] <Altreus> this seems like a comfortable ground state
[14:15:18] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 258 seconds)
[14:16:19] <Altreus> I do like saying "mard-arse"
[14:16:40] * GumbyPAN CPAN Upload: Net-WebSocket-0.24_01 by FELIPE https://metacpan.org/release/FELIPE/Net-WebSocket-0.24_01
[14:16:49] <mst> it is definitely an underused word
[14:18:17] <Altreus> I don't think it really left the north
[14:18:50] <mst> was mostly thinking that I don't use or hear it nearly often enough either
[14:18:57] <mst> and I never really left the north either so
[14:19:26] <mst> longest I've spent south of wigan was just under six months in bath
[14:19:39] <Altreus> after a whole day in bed that sounds nice
[14:19:56] <Altreus> Bedford, Bath, and Beyond
[14:20:15] <Altreus> Anyway it doesn't sound right in most accents from the south east
[14:20:42] <Altreus> Picturing it in a West Country accent is also amusing
[14:21:48] <mst> puns that put the argh in oo-arr
[14:31:41] * GumbyPAN CPAN Upload: Mo-utils-0.04 by SKIM https://metacpan.org/release/SKIM/Mo-utils-0.04
[14:32:09] *** Quits: nehsou^ (~nehsou@70.166.66.234) (Remote host closed the connection)
[14:33:09] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[14:33:11] <mst> Altreus: also did you see aquanight's diagnosis above?
[14:33:25] <mst> Altreus: turns out it's a 5.14 specific bug in the warning
[14:33:46] <Altreus> mst: I did. Typical :D
[14:34:25] <Altreus> he's (colleague) removing the prams but he'll still have undef there, which means something to fix I think
[14:34:43] <mst> indeed, the prams aren't the problem
[14:34:58] *** Joins: art1 (~romeyke@p200300ccdf0a590058a3d4432934bb14.dip0.t-ipconnect.de)
[14:37:25] <Altreus> prams::validate
[14:38:44] <mst> ... well done.
[14:41:42] * GumbyPAN CPAN Upload: Mo-utils-0.05 by SKIM https://metacpan.org/release/SKIM/Mo-utils-0.05
[14:44:50] <lucerne> Can Perl export shared libraries usable from FFI in other languages?
[14:51:28] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[14:52:58] <mst> lucerne: perl is very embeddable - that's how e.g. the scripting in the copy of irssi I'm currently running works
[14:53:22] *** Joins: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com)
[14:53:34] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[15:00:48] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (Remote host closed the connection)
[15:01:01] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[15:06:40] <mst> lucerne: https://perldoc.perl.org/perlcall#DESCRIPTION
[15:06:41] <Paperbot> Link title(s): [ perlcall - Perl calling conventions from C - Perldoc Browser ]
[15:07:03] <mst> lucerne: plus https://perldoc.perl.org/perlembed
[15:07:03] <Paperbot> Link title(s): [ perlembed - how to embed perl in your C program - Perldoc Browser ]
[15:08:21] <mst> lucerne: I'm not familiar with anything that generates the C shared library for you, but then again I try and avoid writing C because I've worked with my C code and it's awful, so that doesn't mean it doesn't exist, just that the world's probably a safer place if I don't know about it ;)
[15:13:32] <fuzzix> I used to get paid to write C, which is a terrifying idea to me now. Thankfully that product never went live.
[15:14:16] <Altreus> I tried to get paid to write C but they didn't want me to
[15:14:22] <Altreus> seems fair, since I didn't know C
[15:14:36] <Altreus> But I was right out of uni so what did they expect
[15:14:49] <Altreus> All they knew is Java and wrong Perl
[15:15:58] <freefallwefall> Is knowing "wrong Perl" really knowing Perl?
[15:16:05] <Altreus> no
[15:16:15] <Altreus> it put me on a PHP path for several years until I was rescued by Lovefilm
[15:16:15] <choroba> I got paid for teaching C, which was pretty strange given I've never been paid for writing it
[15:16:23] <Altreus> choroba: those who can't?
[15:17:08] <freefallwefall> A long time development manager was hired by our technical college to teach programming classes... Which horrifies me because he was very ... stupid.
[15:17:42] <freefallwefall> That's kind of what my work on https://castopulence.org/ is all about. The world of today is an animal world, and it's stupid, and we can fix it. Today. If we just wake up.
[15:17:42] <Paperbot> Link title(s): [ INFINITY(2) - ∞ ]
[15:17:58] <choroba> the student didn't pass, but I was able to write several programs to solve the test questions
[15:18:15] <greyrat> mst: I actually want the C shared library more for calling Perl from other languages than using it from C :)) E.g., to call Perl from Python.
[15:18:34] <greyrat> It seems to me that exporting a shared library is the only performant universal code sharing solution.
[15:19:13] <Botje> coughsplutterhack parrot
[15:19:49] <Botje> aww, they canceled the project as of august.
[15:19:59] <Botje> (after not making any more commits since 2017)
[15:20:46] <Botje> greyrat: keep in mind you need to manage a perl VM too.
[15:21:17] <greyrat> Botje: ? Perl has a VM? I thought that was Raku only
[15:21:53] <Botje> *interpreter.
[15:22:08] <Botje> see the perlembed page mst linked you to
[15:22:37] <greyrat> I'll check them out. 
[15:22:41] <mst> greyrat: perl is a VM, CPython is a VM, etc. etc.
[15:23:05] <mst> greyrat: also you might find Inline::Python enlightening, since it embeds python but also provides python with the means to call back to perl
[15:24:09] <greyrat> mst: Well, aren't all interpreters VMs with that definiton? What's the difference?
[15:24:37] <choroba> marketing?
[15:25:05] <Botje> greyrat: I don't think there is any significant difference.
[15:27:13] <mst> greyrat: you're the one that claimed perl didn't have a VM
[15:27:40] <mst> though generally it's used to distinguish from a pure treewalker
[15:29:14] <greyrat> Hmm. What is the difference between Raku having a VM and Perl having a VM? E.g., why is Raku slower to start?
[15:32:03] <Botje> greyrat: great question. I suggest you find out and write a small essay
[15:32:04] *** Quits: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com) (Quit: Leaving)
[15:32:29] <greyrat> Any references? :))
[15:32:48] <Botje> the source code?
[15:32:53] <Botje> strace? simple timing tests?
[15:33:16] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[15:33:27] <Botje> Running both under a profiler such as `perf`?
[15:33:29] <mst> greyrat: if you want to know about raku's startup time, you should be asking #raku
[15:33:35] <greyrat> I think the answer should be more high-level.
[15:33:53] <greyrat> All VM languages have bad startup time (Julia, Java, Erlang, etc)
[15:33:53] <mst> well the high-level answer is presumably "raku does a lot more 'stuff' at startup time"
[15:34:03] <mst> since I don't use that language, I don't know what stuff
[15:34:48] <freefallwefall> There are only two reasonable answers. Either it's doing more "stuff" or it's doing the same stuff poorer. Though that seems unlikely given that many of the same brains are probably involved.
[15:35:42] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[15:35:55] <mst> I -think- part of it is that raku has to bootstrap a metacircular metamodel during startup - its OO metamodel is partially based on p3rl.org/Moose (which in turn is partially based on the previous version of the perl6 metamodel) and Moose takes noticeable time to bootstrap on load too
[15:36:22] <mst> common lisp has to do the same thing wrt CLOS
[15:36:45] <freefallwefall> I guess a virtual machine is just a software program that interprets instructions instead of directly executing them on hardware. With that defined nice and abstractly I think it's clear that perl would be a VM of sorts.
[15:36:48] *** Joins: tejr (~tejr@user/tejr)
[15:37:20] *** Quits: Su-Shee (~Susanne@p4ffc78d4.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[15:37:25] <mst> general thing is, as I said before, to disambiguate from trivial treewalker interpreters that just process the parse tree directly
[15:37:37] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[15:37:43] <mst> which is common for very simple interpreters (and works fine for what it does)
[15:37:58] <greyrat> freefallwefall: Yes, but what is the essential difference between Perl/Python and the JVM?
[15:38:09] <mst> e.g. most simple BASIC interpreters operate basically straight off the token stream
[15:38:14] <mst> greyrat: there isn't one
[15:38:16] <freefallwefall> I don't think there is one. At least, not the one you're fishing for.
[15:38:18] <Botje> greyrat: please stop trying to pull people in rabbit holles if you're not going to contribute something.
[15:38:27] <greyrat> Okay.
[15:38:28] <Botje> s/holles/holes/
[15:38:49] <mst> greyrat: you have imagined something that doesn't exist and are asking us to describe it, and that's not really very helpful
[15:38:49] *** Joins: Su-Shee (~Susanne@p4ffc720d.dip0.t-ipconnect.de)
[15:39:37] <freefallwefall> JVM performs better because of JIT optimization and/or engineering to optimize runtime performance at the cost of build or startup time.
[15:39:50] <freefallwefall> (That is, if it performs better, I honestly couldn't say, I rarely run it)
[15:39:57] *** Quits: vague (~vague@irssi/staff/vague) (Quit: Client closed)
[15:40:17] *** Joins: vague (~vague@irssi/staff/vague)
[15:40:44] <Botje> freefallwefall: ... no and no.
[15:41:00] <Botje> there's a reason it's called "JIT".
[15:41:15] <greyrat> It definitely exists on some level. People talk of some langs having VMs, and not of others (e.g., Python, Perl). This category correlates with some characteristics such as being able to JIT, support multiple languages on a single VM, slow startup, etc. So it is a meaningful category. I thought perhaps the category could be identified with some essential lower-level characteristics, and you suggest that it can not be.
[15:41:16] <freefallwefall> Erm, fair.
[15:41:30] <mst> greyrat: a JIT compiler isn't even a VM
[15:41:47] <mst> greyrat: people talk about lots of things, and most of them turn out not to know what they're talking about
[15:42:08] <greyrat> mst: Still, these categories convey information.
[15:42:19] * Botje nopes out.
[15:42:29] <freefallwefall> greyrat: In that case, it's that JVM executes a bytecode intermediate language which allows for many host languages to be implemented on the VM. But that's not a feature of VMs. That's a feature of intermediate languages.
[15:42:35] <mst> greyrat: python and perl both absolutely have VMs and anybody who says otherwise can be safely ignored as being too ignorant to have an opinion worth caring about
[15:42:42] <Botje> I'm getting flashbacks to the person who locked the channel for three days trying to figure out basic unicode.
[15:43:05] <mst> freefallwefall: CPython is bytecode based and perl5's VM ops aren't meaningfully different
[15:43:40] <mst> in fact perl even has tools that can directly load the bytecode, it's not commonly used because it's generally not worth it but it absolutely exists
[15:43:59] <freefallwefall> mst: I'm not arguing that perl's is any different. I'm just explaining the features he's pointing to. It was designed to host many languages so it does. Whereas perl5's VM presumably was not and does not. But I honestly don't know if that's true.
[15:44:14] <mst> freefallwefall: the JVM wasn't designed for that at all.
[15:44:33] <mst> greyrat: 'VM' is absolutely a meaningful category, and it's one that perl, cpython and the JVM are all part of.
[15:44:54] <Botje> freefallwefall: please take care to make a distinctions between 'things you know', 'things you think are true', and 'things you know because you researched them'
[15:44:59] <freefallwefall> My experience is all .NET so it's possible that I'm getting polluted ideas. (shrug)
[15:45:16] <freefallwefall> Botje: Only if you do the same.
[15:45:25] <mst> freefallwefall: he is doing, don't make me ban you for being a dick.
[15:45:41] <freefallwefall> I meant no offense at all. Just trying to contribute. I'll go back to being quiet.
[15:45:50] <Botje> I do. I did a PhD in a programming langauges lab and spent two years researching VMs.
[15:45:55] <mst> freefallwefall: .NET absolutely was, yes, although because it was designed specifically for a single class of OO languages e.g. the F# developers have had a lot of fun bending it to support ML like semantics
[15:46:17] <Botje> If I'm not sure of something I will spotlight it.
[15:46:20] <mst> freefallwefall: when somebody asks you to do something they *have* been doing, 'only if you do the same' is not trying to contribute.
[15:46:42] <mst> I am trying to be polite here but aggressive ignorance when experts are trying to help you understand something is a pretty bad look.
[15:46:53] <freefallwefall> I'm not looking to argue with heated moderators. Enjoy your day.
[15:47:00] *** Parts: freefallwefall (~bambams@user/bambams) ()
[15:47:03] <mst> 'heated' lol
[15:47:09] <mst> mistake not ...
[15:47:32] <Botje> 'not going to argue with people who correct my uninformed guesses with actual facts'
[15:48:09] <mst> yeah, well, they parted so whatever
[15:48:10] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[15:49:01] <Botje> back to a not very interesting team meeting for me.
[15:49:12] <greyrat> Botje: Experts use jargons with precise meaning, e.g., "work" in physics. This does not mean that questions using imprecise terminology are necessarily mistaken or just answered by repeating the precise definition.
[15:49:34] <mst> greyrat: please stop
[15:50:06] <mst> we explained how you were mistaken and you replied by saying "no, there definitely is a distinction"
[15:50:22] <mst> it wasn't the asking questions that was the problem and pretending it was is not constructive
[15:50:30] <greyrat> Okay. I don't want to argue. I just wanted to point out why he might have gotten offended. I myself don't really know this stuff to have an opinion.
[15:50:39] <Botje> greyrat: I asked you to do some research up front instead of lobbing a question at the channel and sitting back.
[15:51:37] <Botje> and insisting the answer was wrong despite "not really knowing this stuff"
[15:51:41] <Botje> is also not helpful.
[15:51:50] * GumbyPAN CPAN Upload: Mac-Pasteboard-0.101 by WYANT https://metacpan.org/release/WYANT/Mac-Pasteboard-0.101
[15:51:53] <mst> I would suggest that "stack based virtual machine" and "register based virtual machine" are good terms to start your searching with
[15:52:15] <mst> (e.g. perl's is stack based and raku's underlying moarvm is register based)
[15:52:49] <mst> for a simple register based VM, the erlang one is pretty accessible
[15:52:59] <greyrat> Thanks.
[15:53:48] <Botje> also the full blog/paper archive from the following projects: pypi, self, luaJIT, lua, guile, ...
[15:54:03] <Botje> duktape is also a very nice stack-based VM.
[16:03:30] <mst> Botje: meanwhile from elsewhere: 'transpiler, n.: somebody else's compiler'
[16:03:47] <mst> greyrat: oh, 'tree walking interpreter' might also bring up useful examples of not-a-VM
[16:03:55] <mst> possibly 'tree walker'
[16:04:04] <mst> it's been a while since I had to google this
[16:04:43] <LeoNerd> Perl's VM is really quite unlike anything else though
[16:05:48] <mst> LeoNerd: is it? 'core while loop and return a next pointer' seems to be a pretty common pattern, having learned the guts of perl, I found the python, tcl, ruby and erlang equivalents all pretty accessible and familiar
[16:05:56] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:06:30] <LeoNerd> Hrmmm
[16:06:45] <LeoNerd> I guess I mean quite different from the "bytecode-shaped" ones
[16:07:20] <LeoNerd> (JVM and CLR for example)
[16:08:32] <LeoNerd> Small perl ponderance. I have an odd-sized array of numbers. I want to print all these numbers, putting parens around the middle one. So. e.g.  "1 2 (3) 4 5"
[16:08:47] <LeoNerd> That's veryalmost a  join " ", sprintf ...  except I can't think of a neat way to parenthesize the middle one
[16:09:23] <mst> local $ary[$mid] = '('.$ary[$mid].')';
[16:09:33] <LeoNerd> (By "middle" I just mean the one in the central position, which I know will exist because there's an odd number. Actually there's always five so it's always the one at [2])
[16:09:49] <LeoNerd> Oh huhh... that would actually do it quite neatly
[16:09:51] <mst> LeoNerd: I'm not sure I see a C struct shaped area of memory as much different
[16:11:20] <mst> using an internal offset within an array rather than using a pointer mostly seems like a storage detail
[16:11:39] *** Joins: jabberwok (~wlindley@75.105.20.104)
[16:11:52] <LeoNerd> Mm.. it's mainly the way that the perl one stores those function pointers
[16:12:15] <LeoNerd> The function pointers really are the "program", the opcode largely doesn't matter. It's just there for deparse and similar purposes
[16:12:38] <LeoNerd> Which is great for custom ops but means you'd have a really hard job actually serialising it to disk if such a thing mattered
[16:12:53] <Botje> so if you squint hard enough it's basically forth's WORDS ON A STICK^WSTACK
[16:13:31] <Botje> (where new definitions are basically lists of function pointers to existing verbs)
[16:14:09] <mst> LeoNerd: B::ByteLoader was kinda fragile but did work
[16:14:33] <LeoNerd> Has it had much interaction with custom ops though?
[16:14:37] * mst remembers zefram doing a lightning talk where he used that as the primary source of truth for some code and wrote a 'deparse, edit, re-encode' cycle
[16:15:03] <mst> probably not, those inevitably complicate everything
[16:16:06] <LeoNerd> I've been using Syntax::Keyword::Match more lately.. that's not going to deparse at all well currently
[16:17:52] *** Joins: proller (~p@2a02:6b8:0:51e:4dcf:5a2e:df9d:133a)
[16:20:08] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[16:21:51] <LeoNerd> join " ", pairmap { $a == 2 ? "($b)" : $b } kv @values;
[16:22:01] <LeoNerd> For some suitable "kv" function
[16:23:45] <Botje> join " ", sub{my @x=@_;$x[2]="$x[2]"; return @x}->(@values)
[16:23:50] <Botje> (or just define the damn subroutine.
[16:24:18] <mst> join ' ', do { local $x[2] = "($x[2])"; @x };
[16:24:30] <Botje> that too.
[16:25:08] <LeoNerd> Ooooh... subtle. That actually works
[16:25:26] <LeoNerd> I had sortof expected the localisation to disappear before the return value got created. But it doesn't
[16:25:55] <mst> @x gets flattened onto the stack before the }
[16:26:04] <LeoNerd> Ah.. right, yes
[16:26:22] <LeoNerd> Oooh.. but that wouldn't work with `dynamically`
[16:26:50] <mst> you'd have to take that up with the author of 'dynamically', I guess
[16:27:01] <LeoNerd> Well... that's sortof the difference in design
[16:27:21] <LeoNerd> local replaces the scalar itself, so the @x temporarily contains a different actual scalar, which is the one put onto the stack in your code
[16:27:22] <mst> right, dynamically's fucking with the SV in place whereas local's fucking with the AV slot
[16:27:44] <LeoNerd> dynamically sets a different value for the same SV, so the same SV appears on the stack, whose value is later restored during the } so caller sees the original value again
[16:28:02] <LeoNerd> I might want to document that as it is a rare case of perl-visible difference in behaviour
[16:29:04] <Altreus> maybe add an "except" to go with it
[16:29:20] <Altreus> @x except $x[2] = "($x[2])"
[16:30:18] <Altreus> an expression form of temporarily
[16:30:24] <Altreus> I kind of don't hate it
[16:30:43] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[16:30:45] <Altreus> reminds me of but
[16:30:54] <LeoNerd> I was just thinking of but
[16:31:05] <LeoNerd> #phrasing
[16:31:21] <Altreus> :)
[16:31:32] <Altreus> but is how you apply a role to a variable in raku
[16:31:50] <Altreus> it works best when your roles are named as adjectives
[16:32:09] <Altreus> $foo but Magic
[16:32:23] <LeoNerd> I kindof like the idea of an `except` to put differente values in parts of a list expression...  (1..5) except [2] = "Fizz"
[16:32:44] <Altreus> oh yeah, it could also work on literals
[16:32:54] <Altreus> that's a good idea
[16:34:06] <Altreus> but what if it's computed! (1..100) except [%7 && %5] = "FizzBuzz" or [%5] = "Fizz" or [%7] = "Buzz"
[16:34:15] <LeoNerd> %% surely?
[16:34:20] <Altreus> hmm actually this is feeling a bit similar to the application of ... to $.
[16:34:25] <Altreus> yeah probably
[16:34:36] <LeoNerd> https://metacpan.org/pod/Syntax::Operator::Divides  :)
[16:34:36] <Paperbot> Link title(s): [ Syntax::Operator::Divides - an infix operator for division test - metacpan.org ]
[16:35:16] <Altreus> (1..100) except { "FizzBuzz" if $a %% 7 and $a %%5; "Fizz" if $a %% 5 ... }
[16:36:30] <Altreus> $a and $b because we don't need $k and $v polluting the special vars too
[16:36:45] <LeoNerd> Yeah.. it's a shame.. $*K and $*V would have been nicer
[16:37:01] <Altreus> I was thinking that ... which twigils do we have in Perl5?
[16:37:04] <LeoNerd> say "The $*I'th value is $_" for @items;
[16:37:06] <LeoNerd> also ;)
[16:37:15] <Altreus> I'm sure we have one
[16:37:18] <Altreus> is it $^?
[16:37:24] <LeoNerd> $* has been dead for many many years now. We could get it back for special vars
[16:37:35] <LeoNerd> Scheme calls them  *earmuffs*
[16:37:43] <revhippie> use Variable::Zombie;
[16:37:44] <mst> oo 'err
[16:38:20] <LeoNerd> (fluid-let ((*list-separator* ",")) (display my-list))    ##  roughly like   { local $, = ","; print @list }
[16:38:23] <Altreus> what am I thinking of that uses ^ then? Special hash entries or something?
[16:38:36] <Altreus> maybe I'm just confused
[16:38:40] <Altreus> I should stop learning similar languages
[16:38:56] <LeoNerd> ${^THINGY} is already a thing
[16:38:59] <LeoNerd> I just don't like the braces
[16:39:11] <Altreus> right, I had braces in my head but I couldn't justify them
[16:39:15] <LeoNerd> I want to steal $*... as a prefix. Move  $*STDOUT $*STDERR  etc over there while we're at it
[16:39:24] <Altreus> I assume Perl can't understand $^THINGY because of Reasons
[16:39:33] <LeoNerd> Permit $*INDEX inside any for-like consstruct, which just coutns
[16:39:43] <Altreus> this is very rakuvian
[16:39:49] <LeoNerd> Perl -can- do  $^T
[16:39:51] <Altreus> careful of your words or you'll be ostracised
[16:39:53] <LeoNerd> And already does
[16:40:07] <LeoNerd> $^T HINGY   is a syntax error though, because that's a var next to a bareword
[16:40:10] <LeoNerd> whitespace is optional
[16:40:12] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 258 seconds)
[16:40:29] <revhippie> Ostrich-sized... I could stand to be a little taller, but that's a bit much.
[16:40:32] <Altreus> and the T-consumer can't be extended to identifier-consumer because ...
[16:40:33] <LeoNerd> That's why the braces have to exist in the things whose name is longer than one letter
[16:40:55] <LeoNerd> Silly silly backcompat reasons
[16:41:05] <Altreus> hysterical raisins, right
[16:41:06] <LeoNerd> print "$^Where is your god now??!"
[16:41:13] <LeoNerd> It's always qq() interpolation, with these things
[16:41:16] <LeoNerd> It will screw you every time
[16:41:22] <Altreus> so qq QQ's
[16:41:44] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:41:49] <Altreus> ah but wait
[16:41:57] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:41:59] <Altreus> surely that would apply to anyone trying to interpolate $*
[16:42:02] <Altreus> eval: $*
[16:42:04] <perlbot> Altreus: ERROR: $* is no longer supported as of Perl 5.30 at (IRC) line 1. 
[16:42:13] <LeoNerd> It's been a dead variable for *aaaaages*
[16:42:21] <LeoNerd> eval $^W
[16:42:22] <Altreus> what did it do? Probably formats
[16:42:30] * jabberwok pronounces that, Buck-splat.
[16:42:30] <LeoNerd> ^-- That right now contains the warnings bitflags
[16:42:34] <LeoNerd> eval: $^W
[16:42:35] <perlbot> LeoNerd: 0
[16:42:40] *** Joins: xenial-user10 (~androirc@20014C4C17E1D20002094CFFFE807190.catv.pool.telekom.hu)
[16:42:45] <Altreus> sweval: $^W
[16:42:46] <perlbot> Altreus: 0
[16:42:49] <Altreus> does it
[16:42:52] <LeoNerd> $* used to contain the regexp flags, but 5.000 (!) added the m/foo/flags notation
[16:43:07] *** Joins: nuclightq (~quasselxp@broadband-77-37-180-193.ip.moscow.rt.ru)
[16:43:20] <LeoNerd> Before things like  m/foo/i  you'd have to  { local $* = (some bitmask to mean /i);  m/foo/ }
[16:43:53] <jabberwok> Removed in 5.10 according to Camel4
[16:44:16] <Altreus> wait, local came before a sensible place for flags? :D
[16:44:32] <LeoNerd> local is -very- old tech. It predates `my`
[16:44:39] <Altreus> so "$*INDEX" will never interpolate $*
[16:44:49] <Altreus> but $!INDEX could easily want $! so we can't use that
[16:44:54] <Altreus> this seems fine
[16:44:59] <Altreus> what can you break
[16:45:14] <LeoNerd> Yeah, I went over all the available twigil characters when I was looking for one in Object::Pad
[16:45:18] <Altreus> anything less egregious than what unary minus breaks will be accepted
[16:45:27] <LeoNerd> That's why I eventually settled on  $:foo  because that seems the least-bad of the available possible options
[16:46:03] <LeoNerd> $: is still a valid variable, but it relates to formats... so in practice I don't think anyone will be expecting that to work within a `use feature 'class'` scope
[16:46:57] <Altreus> but perl still has to decide whether to interpolate it "$:here is your god now"
[16:47:06] <Altreus> same as $a I suppose
[16:47:30] <Altreus> people being unlikely to use something, I've found, is not commonly associated with whether or not they do
[16:47:39] <LeoNerd> Sure. But that's easy enough. by default the `format_vars` feature would be in scope, so that's the format var, followed by the literal "here"
[16:48:03] <LeoNerd> In a `use feature 'class'` scope, the format_vars feature is turned off again, so that becomes the $:here slot variable, followed by a space and some more string
[16:48:36] <LeoNerd> This one only really works because in order to get slot vars you'd need to know to turn on the class feature, so you're opting-in to switching off the format vars
[16:52:37] <Altreus> can you hook into variable parsing to create $*vars?
[16:52:48] <Altreus> from a module
[16:52:57] <LeoNerd> Can /I/? ;)
[16:53:00] <LeoNerd> Answer is no, not yet
[16:53:07] <Altreus> can anyone?
[16:53:12] <Altreus> if not you, who else
[16:53:20] <LeoNerd> At the moment there actually aren't any holes
[16:53:27] <Altreus> (Only you™ can save mankind™)
[16:53:38] <LeoNerd> every possible sequence of (ASCII) chars following the $ definitely has a meaning in the parser
[16:53:46] <LeoNerd> So there currently aren't any gaps into which a module can insert new behaviour
[16:53:49] <Altreus> with * being die
[16:53:55] <LeoNerd> That is actually the reason I wanted to   no feature 'format_vars';
[16:54:07] <LeoNerd> It creates some gaps - namely in places like  $:  $~  and a few others
[16:54:13] *** Joins: seoul_man (~meh@user/seoul-man/x-5066766)
[16:54:27] <Altreus> but it also means that the parser doesn't ask anyone else if they have a better idea about what $\w means
[16:54:29] <LeoNerd> Places where the parser (well, lexer) would now go "OK I got no idea, maybe the plugins know"
[16:54:52] <Altreus> i.e. you can't override, only fill in
[16:54:59] <LeoNerd> Yeah
[16:55:37] <Altreus> k - maybe we can turn $* into a normal syntax error then :D
[16:55:58] <Altreus> eval: $ *  # what does this do
[16:55:59] <perlbot> Altreus: ERROR: $* is no longer supported as of Perl 5.30 at (IRC) line 1. 
[16:56:02] <Altreus> thought so
[16:56:27] <LeoNerd> The parser still recognises that $* is a variable, it then complains that you're trying to use it
[16:57:37] <Altreus> I'm wondering what the default error would be for using a $ without a variable name, since apparently that's currently impossible
[16:57:55] <Altreus> eval: $™
[16:57:57] <perlbot> Altreus: ERROR: Unrecognized character \x{2122}; marked by <-- HERE after se utf8; $<-- HERE near column 12 at (IRC) line 1. 
[16:58:13] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 258 seconds)
[16:58:31] <LeoNerd> I'd go with something like "Unrecognised scalar variable beginning at $:flibble... at FILE line LINE.
[16:58:50] <LeoNerd> The "beginning at" is important, since as it's unrecognised we can't even tell how far it extends
[16:59:02] <LeoNerd> Maybe some plugin parser will think that  $*kebab-case-is-perfectly-fine*
[16:59:17] <Altreus> I suppose that's why <-- HERE
[16:59:58] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[17:00:15] <Altreus> cos if $* stopped being recognised as a variable name at all, it would actually now be a $ followed by a multiplication
[17:00:22] <Altreus> sweval: $
[17:00:23] <perlbot> Altreus: ERROR: syntax error at (IRC) line 1, at EOF 
[17:00:30] <Altreus> just that I suppose
[17:02:36] *** Joins: YaoNai (~YaoNai@user/yaonai)
[17:04:19] *** Quits: xenial-user10 (~androirc@20014C4C17E1D20002094CFFFE807190.catv.pool.telekom.hu) (Ping timeout: 252 seconds)
[17:05:19] <The_Blode_> Hey Perlites. Quick one.
[17:05:24] <The_Blode_> Which is more efficient.
[17:05:56] <The_Blode_> @test; $test[0] = "1"; or @test; array_push("1", @test);
[17:06:40] <LeoNerd> array_push ?? Are you sure this is the right language? That sounds PHPish to me
[17:06:57] * GumbyPAN CPAN Upload: Weather-YR-0.45 by TOREAU https://metacpan.org/release/TOREAU/Weather-YR-0.45
[17:07:09] <The_Blode_> Apologies. I meant push(@test, "1");
[17:07:18] <The_Blode_> I'm using PHP and Perl together :)
[17:07:23] <LeoNerd> In any case if you wanted an array with a single "1" in it, you probably wanted   my @test = ("1");
[17:07:54] <The_Blode_> So the coder is using a while loop and iterating over some elements.
[17:08:06] <The_Blode_> She's assigning the properties using a counter to get the array index.
[17:08:13] <The_Blode_> I'm thinking, why not push them
[17:08:26] <The_Blode_> Is there any performance difference between the two or are they similar
[17:08:30] <Altreus> mst: further developments - the exact same code outside the pram (i.e. concatenated manually) was not, in fact, undef in the first place
[17:08:56] <Altreus> seems reproducible but only in some situations
[17:09:00] <LeoNerd> This feels like a question that would benefit seeing more of the code.. hard to answer in such a small example
[17:09:03] <The_Blode_> For me, it's more legible to read but that's all I can come up with.
[17:09:43] <The_Blode_> I hear ya. Let me see.
[17:10:07] <Altreus> The_Blode_: prioritise legibility over minor optimisations
[17:10:08] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[17:10:23] <The_Blode_> That's my personal preference.
[17:10:33] <The_Blode_> Is this a rule of thumb for programmers?
[17:10:39] <Altreus> perl, at least
[17:10:43] <The_Blode_> Or Perl in particular or your personal thing
[17:10:48] <Altreus> if you're working on Factorio, no
[17:10:50] <The_Blode_> Ah ok thanks
[17:11:16] <Altreus> The general philosophy is that Perl is already inefficient in favour of legibility
[17:11:22] <Altreus> otherwise you'd use C or something
[17:11:50] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[17:11:55] *** Joins: diskin (~diskin@31.23.207.230)
[17:12:08] <zgu> or XS, if you want to still use perl but completely throw legibility out the window
[17:12:09] <huf> eh
[17:12:11] <Altreus> The_Blode_: is the while loop the correct loop? Or is this a map plus a lot of misunderstanding?
[17:12:41] <huf> none of this matters
[17:12:43] <Altreus> The_Blode_: also you don't need a counter. @array[@array] = x
[17:12:46] <huf> if you're pushing, push.
[17:12:53] <huf> if you use an index, i'm gonna spend time looking for the trick
[17:12:59] <Altreus> it already knows its length
[17:13:02] <The_Blode_> This is the code here;
[17:13:02] <The_Blode_> my @test; my $lines = 10; my @array = (1,2,3,4,5,6,7,8,9,10); my $i = 0; while ($lines > $i) { $test[$i] = $array[$i]; }
[17:13:09] <Altreus> huf: well that's "legibility over efficiency" isn't it
[17:13:14] <The_Blode_> I think push increases legiblity but any performance gains here?
[17:13:15] <Altreus> i.e. don't even test, just do it right
[17:13:23] <LeoNerd> No, it's terrible
[17:13:25] <Altreus> The_Blode_: who cares, it's bad :)
[17:13:25] <LeoNerd> Just push, really
[17:13:44] <The_Blode_> Index assignments can be hard to read but it works in a similar way to pushing.
[17:13:44] <Altreus> as huf says, future-you is going to try to figure out what's wrong with push and rewrite it anyway
[17:13:50] <huf> The_Blode_: it definitely increases legibility, and worrying about speed at this level is stupid
[17:13:53] <The_Blode_> But could index assignments with counters go awry?
[17:14:00] <Altreus> yes
[17:14:03] <huf> also that code is broken
[17:14:07] <mst> The_Blode_: much easier to screw up than push
[17:14:15] <Altreus> someone could edit the code, not realising you're an idiot who doesn't know how to push
[17:14:15] <mst> The_Blode_: for example you forgot to implement $i
[17:14:17] <The_Blode_> Got it
[17:14:21] <mst> The_Blode_: so your code already went completely wrong :P
[17:14:26] <LeoNerd> ^-- THAT
[17:14:26] <The_Blode_> I forgot $i++; my bad
[17:14:40] <mst> The_Blode_: which is precisely -why- you don't do that
[17:14:42] <Altreus> if someone adds an if to your code, suddenly the counter doesn't get updated, and now it's broken
[17:14:52] <mst> push @test, @array; # done.
[17:14:56] <The_Blode_> I'll feed this back as an advisory to the dev
[17:15:00] <Altreus> adding an if and accidentally skipping the *push* is a lot harder and a lot more obvious
[17:15:03] <mst> that replaces the entire thing
[17:15:05] <huf> ~/should the loop counter be forgot and never brought to mind/~
[17:15:21] <The_Blode_> Thank you so much guys yet again for Perly knowledge and wisdom :)
[17:15:29] <Altreus> The_Blode_: Another consideration is that you've basically duplicated knowledge for no reason. The array knows how long it is but she's also tracking how long it is
[17:15:38] <Altreus> since it knows how long it is, ask it
[17:15:52] <Altreus> @array[@array] = new value; # now it looks stupid
[17:15:55] <Altreus> that's because it is
[17:16:00] <The_Blode_> The test example is with static data. But in the example I have from the coder, it's rows from a database.
[17:16:05] <mst> The_Blode_: yes, and?
[17:16:12] <zgu> huf: for my $dear (qw/auld lang syne/)
[17:16:14] *** Joins: pucara (~i@181.93.167.217)
[17:16:15] <The_Blode_> There may be lots of rows
[17:16:18] <mst> The_Blode_: and?
[17:16:23] <mst> try and avoid imagining extra problems that don't exist - programming is hard enough when you only have to deal with the real ones.
[17:16:28] <The_Blode_> The array will be bigger
[17:16:32] <mst> irrelevant
[17:16:34] <Altreus> The_Blode_: that's why it's stupid
[17:16:38] <Altreus> push will work anyway
[17:16:40] <mst> the foreach loop will be slower anyway
[17:16:43] <Altreus> it's probably O(1) !
[17:16:44] <The_Blode_> push() simplifies things
[17:16:46] <mst> so will that stupid broken while
[17:16:58] <mst> if there's too many rows to keep in RAM, none of this will work anyway
[17:17:03] <mst> if there isn't, push is a better answer.
[17:17:05] <The_Blode_> Oh
[17:17:06] <Altreus> depends what she's pushing
[17:17:24] <mst> basically that while loop is deliberately slowing down the code for no reason
[17:17:26] <Altreus> but one might suggest that she gets the SQL to do the work instead
[17:17:36] <Altreus> The_Blode_: no answer is simple is it :D
[17:17:44] <The_Blode_> Nope not when it comes to Perl
[17:17:52] <The_Blode_> There are many correct answers
[17:17:53] <mst> there being more array elements will just make the while loop even slower
[17:18:00] <Altreus> while ($cursor->next) { complex stuff; push @array, some result }  # can complex stuff be an SQL query?
[17:18:08] <mst> stop fighting perl and just do the simple thing :)
[17:18:14] <Altreus> If so, you can just select directly into the array
[17:18:35] <LeoNerd> A single push will preëxtend the target array to be big enough; pushing one-at-a-time in a loop will have to extend many times and lead to O(n²) speed
[17:18:52] <The_Blode_> Also, is this critical or will it run still?
[17:18:57] <The_Blode_> $flag == "0"
[17:19:03] <mst> '0' is false
[17:19:12] <Altreus> that's just an ifn't
[17:19:15] <The_Blode_> I thought it should be eq
[17:19:16] <mst> it's horrible and pointless and the quotes make me sad
[17:19:20] <Altreus> surely there's a better word
[17:19:29] <mst> but the == will convert "0" to 0
[17:19:33] <The_Blode_> Oh
[17:19:39] <The_Blode_> Oh yeah someone told me earlier in PHP
[17:19:42] <xenu> using quotes is weird, but it's legal, "123" and 123 are the same
[17:19:44] <mst> though 'if (not $flag) {' seems better
[17:19:45] <Altreus> don't trust what PHP does
[17:19:47] <The_Blode_> That string will be converted to numeric type
[17:20:04] <Altreus> "0123" and 0123 are not the same, though
[17:20:09] <Altreus> write what you mean
[17:20:16] <Altreus> it's a pretty simple rule but it works
[17:20:28] <The_Blode_> "0123" becomes 123 if I'm not mistaken.
[17:20:31] <Altreus> == 0 is not the same as "is false"
[17:20:34] <mst> The_Blode_: whereas 0123 is octal
[17:20:35] <The_Blode_> Which are not the same
[17:20:57] <Altreus> if you mean "flag is false" you say "if not $flag"
[17:21:17] <Altreus> if you mean "flag is not zero" (because zero might be something else in future) then you say if $flag != 0
[17:21:18] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 260 seconds)
[17:21:42] <mst> The_Blode_: you should buy your developer a copy of ovid's Beginning Perl
[17:21:57] <Altreus> When's he going to write Ending Perl?
[17:21:57] <mst> re-inventing push() is a truly strange thing to do
[17:22:01] <The_Blode_> Well, here's the thing. The value "0" is coming from a shell command. From backticks.
[17:22:08] <The_Blode_> This will be returned as a string right?
[17:22:18] <mst> The_Blode_: so you have a completely different problem to the one you told us about :(
[17:22:18] <Altreus> I assume you mean system
[17:22:23] <The_Blode_> System yes
[17:22:25] <mst> Altreus: liz was working on that but failed :P
[17:22:25] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[17:22:25] *** Quits: diskin (~diskin@31.23.207.230) (Killed (copper.libera.chat (Nickname regained by services)))
[17:22:25] *** diskin_ is now known as diskin
[17:22:34] <The_Blode_> Yeah sorry this is another part of the code
[17:22:34] <Altreus> mst: damn, no original jokes any more
[17:22:34] <zgu> yes but "0" will become 0 whenever you try to use it as a number
[17:22:36] <huf> Altreus: but why?
[17:22:43] <jabberwok> "0123" != 0123 however (the second is in Octal, for the DEC devotees)
[17:22:46] <mst> The_Blode_: system() returns an integer, not a string
[17:22:51] <Altreus> huf: it's dead. It deserves a biography
[17:22:59] <The_Blode_> Actually, I'm using backticks `ls`
[17:23:06] <mst> ... but you said 'yes' to system
[17:23:07] <Altreus> ls doesn't return an integer
[17:23:08] <mst> aaaaaaaaaaaaaaaaaaargh
[17:23:17] <The_Blode_> I thought you were referring to the shell my bad
[17:23:24] <huf> what
[17:23:28] <mst> perl has a system() built-in
[17:23:38] <mst> it's like PHP's exec() except not named by an idiot
[17:23:39] <Altreus> The_Blode_: we've code reviewed someone else's work through you bit by bit for a while now :P
[17:23:40] <The_Blode_> I know but I like using backticks so I can capture my output :)
[17:23:47] <mst> (exec means something completely different in unix)
[17:23:53] <mst> The_Blode_: then tell us what you were doing :P
[17:24:09] <mst> The_Blode_: also, Capture::Tiny or IPC::System::Simple or IPC::Run or IPC::Run3 are vastly superior to backticks
[17:24:16] <The_Blode_> Well, AFAIK, backticks always returns the raw output from the console (as a string)
[17:24:17] <huf> i dont think php's exec() is like system. php's exec is like a great big nothing
[17:24:21] <Altreus> Capture::Tiny ftw
[17:24:24] <mst> backticks are "you need to be -very- good at this or you will break your code"
[17:24:38] <The_Blode_> Oh
[17:24:39] <mst> also using backticks to call ls is insane, this isn't bash
[17:24:47] <The_Blode_> I use backticks exclusively for shell commands
[17:24:50] <jabberwok> Capture::Tiny at the minimum.  Backticks are lovely if you enjoy debugging malicious injections
[17:24:56] <mst> The_Blode_: yes, that's what makes them dangerous.
[17:25:07] <The_Blode_> What would you recommend in it's place?
[17:25:09] <mst> The_Blode_: because you have to do full shell escaping in perl and get it right every time
[17:25:17] <mst> The_Blode_: I already listed the four modules to use instead
[17:25:21] <Altreus> presumably you didn't put a variable in your backticks!
[17:25:30] <mst>  mst> The_Blode_: also, Capture::Tiny or IPC::System::Simple or IPC::Run 
[17:25:30] <mst>              or IPC::Run3 are vastly superior to backticks
[17:25:44] <The_Blode_> Thank you for those I'll need to check them out
[17:26:00] <mst> also for 'ls', you should use opendir+readdir+closedir or Path::Tiny
[17:26:03] <Altreus> The_Blode_: use Capture::Tiny; my ($stdout, $stderr) = capture { system 'command', $with, $variables };
[17:26:10] <The_Blode_> ls was just an example though
[17:26:20] <Altreus> The_Blode_: it's like SQL bind variables except for commands
[17:26:21] <mst> The_Blode_: ... stop doing that!
[17:26:31] <mst> The_Blode_: if you lie about your code it will cause us problems
[17:26:32] <The_Blode_> Binds? Nice
[17:26:35] <The_Blode_> I like the sound of this
[17:26:54] <mst> "it was just an example" means "I made something up rather than tell you the truth about what I'm doing"
[17:27:00] <mst> it's really unpleasant for us when people do that :(
[17:27:05] <Altreus> The_Blode_: mst must think you're OK because normally when people lie about what's really happening he exises them from the universal timeline
[17:27:12] <Altreus> excises
[17:27:19] <The_Blode_> Nobody lied guys come on now
[17:27:24] <The_Blode_> I'm giving examples
[17:27:28] <Altreus> examples are lies
[17:27:31] <Altreus> like stories
[17:27:37] <mst> The_Blode_: you told me you were running `ls`, if that isn't what you were running, you need to tell me that.
[17:27:46] <mst> The_Blode_: I believed you were running `ls` beause that is what you told me
[17:27:52] <Altreus> a bit like how I pointed out that ls doesn't return an integer
[17:27:54] <The_Blode_> I missed some words, my bad
[17:27:56] <mst> The_Blode_: telling me after the fact that that wasn't true was not helpful
[17:28:01] <mst> better than not telling me at all
[17:28:04] <mst> but still :P
[17:28:22] <Altreus> vague is bad, but wrong is worse
[17:28:29] <Altreus> vague: not you
[17:28:29] <mst> seriously, 'just an example' when you don't tell us it's not actually the real code, just something you made up that you -think- is similar to the real code
[17:28:35] <mst> is a great way to annoy the people trying to help you
[17:28:47] <mst> especially since it often turns out the real code is -not- the same thing as the example
[17:28:52] <The_Blode_> Apologies for that
[17:29:24] <Altreus> mst: I believe there's a Switch.pm example that you solved immediately when you learned what was really happening?
[17:29:26] <mst> excuseme being forceful about this, but you're actually quite pleasant to help so when you do something incredibly annoying I feel the need to debug your question asking routine :D
[17:29:42] <mst> Altreus: that was a "had to see the whole code"
[17:29:45] <Altreus> ah
[17:29:49] <mst> cos the error was coming from the wrong line number
[17:29:59] <mst> so the fragment of code the user showed me wasn't anything to do with the problem
[17:30:11] <Altreus> now I recall
[17:30:13] <mst> The_Blode_: you ever heard the old joke about the drunk looking for his car keys?
[17:30:28] <Altreus> I've not
[17:30:45] <mst> "what are you doing?"
[17:30:49] <mst> "looking for my car keys"
[17:30:56] <mst> "where did you lose them?"
[17:30:57] <mst> "over there"
[17:31:03] <mst> "why are you looking over here then?"
[17:31:10] <mst> "because this is where there's a streetlight"
[17:31:13] <huf> ...
[17:31:16] <huf> that's a policeman joke
[17:31:20] <huf> holy shit way to fail
[17:31:34] <huf> drunk people are nowhere near stupid enough for the joke to work
[17:31:54] <Altreus> do you have particularly stupid policement in hufgary?
[17:32:00] <Altreus> ... ment?
[17:32:01] <huf> no
[17:32:02] <mst> huf: https://en.wikipedia.org/wiki/Streetlight_effect
[17:32:03] <Paperbot> Link title(s): [ Streetlight effect - Wikipedia ]
[17:32:09] <huf> Altreus: normal type
[17:32:20] <Altreus> it's both!
[17:32:38] <huf> but we do have a whole genre of jokes about stupid policemen
[17:32:45] <huf> well, i say jokes, more like factual accounts
[17:33:04] <mst> The_Blode_: anyway, yeah, please don't make up examples, half the time they'll turn out to be wrong and you'll get the wrong advice and I will be sad :P
[17:33:29] <Altreus> I also learned about the McNamara fallacy!
[17:33:48] <Altreus> I think you made him cry
[17:34:38] *** Quits: bmeneg (~Bruno@2001:1284:f016:975e:2136:af72:b1a1:5df5) (Read error: Connection reset by peer)
[17:34:39] <mst> http://trout.me.uk/bunny.jpg
[17:35:16] <Altreus> bunny!
[17:36:09] <Grinnz> at least, if you use examples, tell us what the real code does as well, so we aren't solving the example problem 
[17:36:36] *** Joins: magla (~gelignite@55d41a29.access.ecotel.net)
[17:42:18] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[17:46:31] *** Joins: bmeneg (~bmeneg@2001:1284:f016:975e:713b:8772:bad6:3e5d)
[17:50:02] *** Quits: mtj (quasselcor@2400:8902::f03c:91ff:fe93:b7f1) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[17:58:01] *** Joins: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it)
[17:58:19] *** Quits: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it) (Excess Flood)
[17:58:42] <revhippie> if you're using $" inside a small sub, is it generally a good idea to `local $"` within, or just to avoid altogether and use `join`?
[17:59:18] <mst> if you're ever changing it at all, use local
[17:59:26] <LeoNerd> Either are "tecnhnically fine", but honestly in modern code I just wouldn't bother with the weirdness of $"
[17:59:31] <mst> but "just use join" is superior
[17:59:35] <LeoNerd> Jsut write a join() call. It's obvious to readers what is going on then
[17:59:44] <revhippie> okalie doke.  thanks!
[17:59:51] <LeoNerd> Whereas $" is subtle. Doubly subtle is trying to remember which one is $" and which is $, and what situation to use eiter in
[17:59:58] <LeoNerd> And don't confuse them with $;
[18:00:07] <mst> my $line = "Here are some things: ${\join(', ', @things)}\n";
[18:06:04] <tm604> ${local $" = join ",", ("") x 2; \"@{\@things}"} # if there's concern about $" being too subtle, just leave more hints in the code
[18:07:19] <mst> tm604: that doesn't include a space after the ,
[18:07:25] <revhippie> that looks like something the zodiac killer might've written.
[18:07:51] <mst> revhippie: don't be silly hippie, ted cruz can't write perl
[18:08:04] <revhippie> mst: not w/ the power going out, he can't
[18:08:17] <mst> $cruz->can('cun')
[18:08:22] <tm604> mst: true, in the excitement I left out the not-fragile-at-all =~ s{,}{, }gr
[18:08:26] <revhippie> mst++ # snort
[18:09:22] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[18:12:11] *** Joins: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it)
[18:12:30] *** Quits: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it) (Excess Flood)
[18:17:04] * GumbyPAN CPAN Upload: Dist-Zilla-PluginBundle-Author-TABULO-1.000000 by TABULO https://metacpan.org/release/TABULO/Dist-Zilla-PluginBundle-Author-TABULO-1.000000
[18:17:38] <Altreus> so cun he or cun't he?
[18:19:24] <Grinnz> join > $"
[18:31:52] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:60fb:a62c:6c4e:adb0)
[18:37:07] * GumbyPAN CPAN Upload: Dist-Zilla-PluginBundle-Author-TABULO-1.000002 by TABULO https://metacpan.org/release/TABULO/Dist-Zilla-PluginBundle-Author-TABULO-1.000002
[18:37:16] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 252 seconds)
[18:38:11] *** Joins: thrig (~thrig@65.113.153.50)
[18:39:53] *** Joins: gast0n (~g4570n@user/gast0n)
[18:42:07] * GumbyPAN CPAN Upload: Math-Polynomial-Cyclotomic-0.004 by MHASCH https://metacpan.org/release/MHASCH/Math-Polynomial-Cyclotomic-0.004
[18:42:08] * GumbyPAN CPAN Upload: Dist-Zilla-PluginBundle-Author-TABULO-1.000004 by TABULO https://metacpan.org/release/TABULO/Dist-Zilla-PluginBundle-Author-TABULO-1.000004
[18:46:13] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[18:48:56] *** Quits: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net) (Quit: Leaving)
[18:50:31] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[18:52:09] * GumbyPAN CPAN Upload: mb-0.35 by INA https://metacpan.org/release/INA/mb-0.35
[18:56:34] <Altreus> This is why rules are guidelines: /\bSetup[ ]Fee\b/msxi
[18:57:05] <Grinnz> augh
[18:57:09] * GumbyPAN CPAN Upload: GFX-Enhancer-0.1.19 by KOBOLDWIZ https://metacpan.org/release/KOBOLDWIZ/GFX-Enhancer-0.1.19
[18:57:18] <Grinnz> let me guess, someone is blindly following perlcritic core rules
[18:58:11] <thrig> I, for one, welcome our new perlcritic core rulers
[18:59:35] <Altreus> That is also my guess
[18:59:49] <Altreus> someone has clearly learned that msxi is always correct, without understanding what any of them mean
[18:59:53] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[19:00:08] <Altreus> and thus has managed to construct a regex that either ignores or misuses all of them
[19:00:37] <Grinnz> well, /x and /i could be intentional there
[19:00:40] <thrig> I always have to lookup /m and /s
[19:00:42] <Grinnz> the other two are clearly pointless
[19:01:14] *** Quits: keir (~keir@user/keir) (Quit: I've gone)
[19:01:33] <mst> thrig: I remember that one modifies '.' and one modifies '^$' and then I remember 's' modifies a single thing and 'm' modifies more than one thing and then I know which is which
[19:01:51] *** Joins: keir (~keir@user/keir)
[19:02:08] <Altreus> Grinnz: maybe - but then they used [ ] to get around /x, and put capitals in despite /i
[19:02:10] <Grinnz> i mostly remember because /s is often useful and /m is almost never useful
[19:02:25] <Grinnz> Altreus: point
[19:02:46] <revhippie> $foo =~ /10/i
[19:02:51] <Altreus> and there's no .$^ so it's all useless :D
[19:05:19] <thrig> maybe they like decorating their regex tails
[19:05:22] <tm604> hopefully that regex is at least being applied to raw HTML
[19:06:46] <LeoNerd> Oooh.. that's a possible feature thought for type-tagged strings.. An HTML-tagged string would just refuse to allow =~ on it
[19:07:09] <thrig> it's Taint Jim but not as we know it
[19:07:24] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[19:09:28] <mst> just let me overload things already damnit
[19:10:15] <Altreus> LeoNerd: or it would apply it to *sections* of the string!
[19:10:45] <Altreus> thrig: no taint
[19:11:11] <tm604> with extended patterns to control which sections it applies to...
[19:11:27] <mst> snort my $taint;
[19:12:11] * GumbyPAN CPAN Upload: Dist-Zilla-PluginBundle-Author-TABULO-1.000006 by TABULO https://metacpan.org/release/TABULO/Dist-Zilla-PluginBundle-Author-TABULO-1.000006
[19:12:23] *** Quits: furrymcgee (~devuan@cgn-89-1-210-103.nc.de) (Quit: leaving)
[19:12:50] <Altreus> LeoNerd: why don't we just create tagged regexes too, and then we've solved everything
[19:13:50] <revhippie> substr($foo, 150, 200)->type('json')
[19:14:11] <mst> him has a %* operator for that
[19:14:29] <thrig> off by one row?
[19:14:45] <tm604> we don't even have Scalar::Util::looks_like_html yet, tagged regex seems a bit optimistic
[19:15:11] <thrig> ... and considering what HTML parsers accept ...
[19:15:12] <mst> tm604: but how can you parse tagged html without tagged regular expressions?
[19:15:14] <Altreus> qr/id=foo/->as_html_attribute
[19:15:25] <choroba> and tagged exceptions, too
[19:15:38] <Altreus> metadata seems valuable
[19:15:42] <Altreus> maybe we should allow it
[19:16:19] <Grinnz> modular and configurable taint mode would actually be somewhat useful
[19:16:29] <Altreus> I found another regex written by someone who understands the language /\bUpgrade Refund\b/
[19:16:44] <Altreus> this may have been the same person dot-product clue stick
[19:16:46] *** Joins: randir (~randir@95-25-159-246.broadband.corbina.ru)
[19:16:55] <Grinnz> it also wouldn't be recognizable as taint mode if done properly
[19:16:57] <tm604> mst: with "smart regex" - a shocking union of smartmatch and regex, hopefully =~=~ is free for this
[19:17:12] <Altreus> tm604: ~==~ surely
[19:17:22] <Altreus> it looks like Wario's moustache
[19:17:23] <thrig> totoro operator when
[19:17:52] <Altreus> do not covet thy neighbour's operators
[19:18:23] <tm604> Altreus++
[19:18:44] <tm604> do we have overloadable join() on String::Tagged yet?
[19:18:57] <LeoNerd> We dont' have overloadable join() full stop
[19:18:59] <LeoNerd> Perl core doesn't support it
[19:19:29] <LeoNerd> Over the summer I was mentoring some new folks who might be pressed into implementing that, but that doesn't seem to have gone anywhere yet. I will nudge them, and if not might just write it myself
[19:19:43] <tm604> it's the full stops I'm trying to avoid here :P
[19:19:46] <Altreus> this seems to be the LeoNerd loop
[19:20:01] <Altreus> Fine, I'll write it myself
[19:20:21] *** Quits: ztx (~ztx@user/ztx) (Read error: Connection reset by peer)
[19:20:29] <thrig> full stops sound like the halting problem
[19:21:17] <LeoNerd> Hah
[19:22:38] <Grinnz> someone get LeoNerd the time stone already
[19:23:12] * LeoNerd misread as "someone get LeoNerd stoned already"
[19:23:40] <Altreus> that makes the time go the wrong way
[19:23:46] <Grinnz> no that's the mind stone
[19:24:57] <Altreus> mind stone > matter stone
[19:26:20] *** Joins: ztx (~ztx@user/ztx)
[19:26:48] <tm604> save the stoning for later, he hasn't even written Syntax::Keyword::Which yet
[19:27:12] * GumbyPAN CPAN Upload: HTTP-BrowserDetect-3.35 by OALDERS https://metacpan.org/release/OALDERS/HTTP-BrowserDetect-3.35
[19:27:24] <thrig> who are the stakeholders in that discussion?
[19:27:38] *** Quits: keir (~keir@user/keir) (Quit: I've gone)
[19:27:56] <mst> tm604: =~~ surely
[19:28:04] <tm604> they're clearly ducking responsibilities
[19:28:14] <Altreus> that would be the drakeholders
[19:28:23] *** Joins: keir (~keir@user/keir)
[19:29:15] <mst> thrig: everybody defending against help vampires?
[19:29:19] <tm604> mst: unfortunately that compiles already, and it would only work in conjunction with the /gism flags
[19:29:53] <mst> oh oh course because unary ~ and the world hates me
[19:30:49] <LeoNerd> So, fun fact: PL_infix_plugin does let you see and invent new operator syntax that would otherwise break
[19:31:17] <LeoNerd> The %% operator, for example. Without it,  $num %% $div  parses as  $num % ( %$div )
[19:31:30] <LeoNerd> modulo when divided by the number of keys in the hash referenced by $div
[19:32:13] * GumbyPAN CPAN Upload: Plack-Middleware-Security-Simple-v0.5.0 by RRWO https://metacpan.org/release/RRWO/Plack-Middleware-Security-Simple-v0.5.0
[19:32:13] * GumbyPAN CPAN Upload: Hash-Match-v0.7.1 by RRWO https://metacpan.org/release/RRWO/Hash-Match-v0.7.1
[19:32:42] <Altreus> so it is a sort of override
[19:32:54] <Altreus> as in it's not just "I dunno" from perl
[19:34:53] <mst> LeoNerd: *lolsob*
[19:35:38] <LeoNerd> As a mitigation, PL_infix_plugin can only see sequences of non-identifier characters that also aren't " or '
[19:35:47] <LeoNerd> So basically just the "normal" punctiation
[19:36:06] <Altreus> Does that mitigate it or just artificially limit it?
[19:36:20] <LeoNerd> It slightly limits the amount of damage you could otherwise make
[19:37:33] <Altreus> so not enough rope to hang yourself? Not very Perly is it
[19:37:40] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[19:38:01] *** Joins: tejr (~tejr@user/tejr)
[19:40:24] *** Quits: scp1 (~scp1@user/japh) (Read error: Connection reset by peer)
[19:42:14] * GumbyPAN CPAN Upload: Catalyst-TraitFor-Request-StructuredParameters-0.006 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/Catalyst-TraitFor-Request-StructuredParameters-0.006
[19:42:49] <mst> LeoNerd: so how is altreus supposed to write his 'expect' binop? :(
[19:43:01] <LeoNerd> Oh.. it can also see identifier-like ones
[19:43:09] <mst> HAH
[19:43:34] <LeoNerd> It just can't see mixed ones.. e.g.  max=  is not an operator you can make
[19:43:38] <Altreus> mst: I wait for the LeoNerd Loop to get to "I'll do it myself" and then I don't have to
[19:44:11] *** Joins: Pali (~pali@user/pali)
[19:44:24] * mst cackles
[19:44:40] <Altreus> although I am kinda intrigued
[19:45:01] <Altreus> I might rewatch his talk since it was actually entertaining enough to counteract the ADHD
[19:45:36] <thrig> Advanced Dungeons, Hampsters, and Dragons?
[19:46:29] <Altreus> if it's hampsters then one of the Ds is dance
[19:46:42] <Altreus> attention deficit hampster dance
[19:46:54] <Altreus> That very much describes how it feels some days
[19:47:12] <thrig> some?
[19:48:25] <Altreus> yes, if it were a consistent thing it would be a lot easier to deal with and/or treat
[19:48:43] <Grinnz> i don't know what a hampster is but yes, hamsters
[19:53:05] <Altreus> a hampster is a thing that does the hampster dance
[19:53:29] *** Parts: art1 (~romeyke@p200300ccdf0a590058a3d4432934bb14.dip0.t-ipconnect.de) ()
[19:54:53] <mst> Altreus: Dee daaa dee dah dee deee doh doh dee dot doo doot doh
[19:55:47] <choroba> it has a sequel: https://www.youtube.com/watch?v=i3MdrDC0qAI
[19:55:47] <Paperbot> YouTube video linked by choroba: Dedoles.sk - Veselá spodná bielizeň - published by Dedoles SK
[19:56:07] *** Joins: japh (~scp1@host-95-205-47-25.mobileonline.telia.com)
[19:56:07] *** Quits: japh (~scp1@host-95-205-47-25.mobileonline.telia.com) (Changing host)
[19:56:07] *** Joins: japh (~scp1@user/japh)
[19:57:16] *** Quits: humky (~humky@user/humky) (Remote host closed the connection)
[19:57:35] <Altreus> a SQL?
[19:57:36] *** Joins: humky (~humky@user/humky)
[19:58:16] <Altreus> Can't believe there is nothing at all related to robin hood on netflix
[19:58:30] *** Quits: magla (~gelignite@55d41a29.access.ecotel.net) (Quit: Stay safe!)
[19:58:30] <Altreus> not entirely surprised that one isn't there since Disney want all the marbles for themselves
[19:58:35] <Altreus> but... really?
[19:58:47] <thrig> sounds like rent seeking to me
[19:59:01] *** Quits: japh (~scp1@user/japh) (Read error: Connection reset by peer)
[19:59:13] <Altreus> oh it's the VPN
[19:59:28] <Altreus> apparently there's a Robin Hood with Russel Crowe in it
[19:59:30] <Altreus> What's that for?
[20:03:23] <tm604> if it doesn't have Michael Praed, Whitney Houston or that Elwes chap, it doesn't really count as robin hood
[20:04:00] <tm604> wo does Russel play, friar tuck?
[20:04:46] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[20:09:21] *** Joins: japh (~scp1@host-95-205-47-25.mobileonline.telia.com)
[20:09:21] *** Quits: japh (~scp1@host-95-205-47-25.mobileonline.telia.com) (Changing host)
[20:09:21] *** Joins: japh (~scp1@user/japh)
[20:09:58] <Altreus> at a guess, Robin Hood himself
[20:10:49] <mjgardner> New blog, not dead yet: https://phoenixtrap.com/2021/10/19/the-reports-of-perls-death-have-been-greatly-exaggerated/
[20:10:52] <Paperbot> Link title(s): [ The reports of Perl’s death have been greatly exaggerated - The Phoenix Trap ]
[20:11:01] <tm604> he doesn't seem the sort of person to have a convincing french accent, but fair enough
[20:11:28] <thrig> shouldn't robin hood have like a british accent?
[20:11:49] <Altreus> Just like all the voice actors in the animated film!
[20:29:56] *** Quits: vrurg (~vrurg@45.74.95.181) (Remote host closed the connection)
[20:30:53] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[20:31:57] *** Joins: FastJack_ (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[20:32:34] <Kobaz> can you qr a s//g regex?
[20:32:48] <Kobaz> having trouble getting the syntax
[20:33:34] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 260 seconds)
[20:33:51] <thrig> eval: $_="catcat"; $re = qr/cat/; s/$re/mlatu/g; $_
[20:33:53] <perlbot> thrig: mlatumlatu
[20:34:13] *** Joins: vrurg (~vrurg@45.74.95.181)
[20:34:16] <Kobaz> my $foo = qr/.*/;  ah so you need to s//g the qr'd regex
[20:34:19] <Kobaz> k that works
[20:34:27] <mst> thrig: it's a mewt point?
[20:34:46] <thrig> four of the five ends are pointy
[20:35:36] <mst> "Don't fight a cat. Use your brain. Use drugs."
[20:35:58] <thrig> haven't ever owned a cat that cared a whit about catnip
[20:36:21] <mst> that was a quote from a vet training manual
[20:36:27] <mst> they presumably have access to different drugs
[20:36:43] <mst> though it turns out our cat likes THC even more than catnip
[20:36:54] <mst> and will come and make a pest of herself if you go too long between rolling joints
[20:41:10] <Altreus> in our household, rolling joints usually refers to ankles
[20:41:19] <Altreus> it's why we own crutches
[20:41:27] <thrig> use less 'getting_old'
[20:41:48] <Altreus> the culprit is 26 ... 26? 26.
[20:42:09] <Altreus> o she's nearly 27 I suppose
[20:42:15] <mst> I mean, I broke my hip at 29
[20:42:46] <Altreus> she broke hers at 18. Well, I say she ... her horse broke her hip
[20:43:16] <Altreus> The thing about horse people is they're often cunts and make you get back on the horse and walk home even if what you need is emergency surgery
[20:44:21] <mst> true, though they're probably too used to over-coddled girls who burst into tears when getting back on the horse -is- the right answer
[20:44:22] *** Joins: magla (~gelignite@55d41a29.access.ecotel.net)
[20:44:27] <mst> false positives versus false negatives etc. etc.
[20:45:05] <xenu> it's her fault for having weak bones
[20:45:28] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[20:45:40] <mst> personally my solution is "staying away from horses"
[20:46:35] <Altreus> xenu: it's ehlers-danlos syndrome really
[20:47:03] <Altreus> although we believe this is the event that ... activated? it
[20:47:28] *** Joins: jabberwok (~wlindley@75.105.20.104)
[20:49:27] <Kobaz> horses? what?
[20:49:32] <Kobaz> i came in here for teh perls
[20:50:23] <Altreus> perls before equine
[20:50:36] <thrig> rhymes with secure wine
[20:50:38] <Altreus> apparently my brain is in "connecting words" today
[20:50:44] <Altreus> ... mode
[20:52:30] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[20:56:49] <huf> mainly it's just connecting your skull though
[20:57:37] <Altreus> it's a lot of meat just to register headaches
[20:57:50] <huf> also produces mental illnesses
[20:57:52] <huf> really great thing
[20:58:35] <Altreus> Those are easy - just reframe them as diversity and don't worry about it
[20:59:23] <huf> *diuersity
[21:01:09] *** Joins: gloin (~gloin@user/gloin)
[21:01:15] <Altreus> is that a diuretic joke
[21:02:14] <huf> no
[21:02:24] <Altreus> then I don't get it
[21:02:30] <Altreus> I didn't get it even if it had been
[21:03:05] <huf> it's a funny spelling
[21:04:22] <Altreus> aha
[21:04:24] <Altreus> like evro
[21:05:19] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Remote host closed the connection)
[21:05:45] <huf> like the evropean vnion?
[21:06:31] *** Joins: tankf33der (mpech@envs.net)
[21:06:35] <Altreus> ya
[21:06:54] <mst> as opposed to the UK which is working strongly on 'not the vnion'
[21:07:30] *** Joins: EGD (~egd@user/egd)
[21:14:14] *** Joins: soliste (~soliste@88.164.90.135)
[21:16:16] <Altreus> the VK
[21:16:34] <huf> no no, go back to the sensible spelling
[21:16:45] <Altreus> Just England
[21:17:51] <huf> i was thinking cynig or something
[21:18:59] *** Quits: proller (~p@2a02:6b8:0:51e:4dcf:5a2e:df9d:133a) (Ping timeout: 264 seconds)
[21:19:06] <tm604> prydain fawr?
[21:19:08] <huf> Geanede Cynerice :D
[21:19:43] <tm604> is cinerice the modern version of popcorn?
[21:20:53] <daemon> :)
[21:20:58] <huf> nah, popcorn is just american for banged grains
[21:21:22] <huf> or possibly some papist lie
[21:27:45] <djerius> oh my. Debian 11 ships Perl 5.32.1 and my production is 5.28?  How is this even possible? (TBH, production runs on CentOS 7.obsolete, and I'm in charge of updating, but still, I'm behind Debian?)
[21:28:33] <daemon> your also behind gentoo :P This is perl 5, version 34
[21:30:28] <djerius> well, at least I'm still ahead of whatever ships with CentOS 7.  Must go install latest Perl on production and break things.  
[21:30:45] <daemon> would'nt perlbrew help out on centos
[21:32:08] <daemon> then again 5.28 is hardly ancient, I am suprised you are even looking to upgrade on production
[21:32:18] <daemon> you tested this on a staging system I assume
[21:32:25] <thrig> when did centos ship 5.28?
[21:32:34] <djerius> I have the most complicated setup which started back when Solaris was a popular OS as well as a fine novel.  Lots of dependencies on external libraries, some of which need patching (thanks to CPAN distroprefs)
[21:32:52] <djerius> thrig: it didn't.  I manage perl.
[21:34:05] <daemon> I thought CentOS was one of those linux's that got very upset when you messed with its installed perl version
[21:34:13] <djerius> daemon:  one of the benefits of being on the downside funding of a NASA program is that the size of your user group steadily decreases to the point where staging and production are defined by sticking your head in someone's office and saying "I'm upgrading stuff, is now ok?"
[21:34:33] <daemon> :) ah well at least take a system dump
[21:34:44] <thrig> presumably you'd install a new perl elsewhere and not break the vendor space
[21:35:05] <daemon> well yeah that is why I thought perlbrew would be handfy
[21:35:08] <daemon> handy*
[21:35:12] <djerius> yeah.  very separate space.  
[21:35:39] <daemon> ah that should not be to bad
[21:37:52] <djerius> I used to use perlbrew for my development environment (have switched to plenv), but our network is not heterogeneous. TBH, it's easier to just install Perl into its special place, install all of the modules, compile all of the third party stuff, then swap a symlink and pray that everything goes through the symlink.  Sometimes Perl installed executables rewrite the #! to point to the absolute path, so you don't know its borken 
[21:37:52] <djerius> until you remove the old Perl.
[21:38:40] <daemon> at the very least with that type of setup tar -xzvf should be easy to do before you begin (incase of disaster)
[21:38:47] <daemon> -czvf *
[21:39:20] <daemon> I actually need to setup perlbrew on my dev box keep putting it on one side and then totally forgetting about it
[21:40:08] *** Quits: humky (~humky@user/humky) (Remote host closed the connection)
[21:40:18] <djerius> Yeah.  We've got netapp snapshots, I have nightly rsnapshots, everything uses stow. the nice thing about using a symlink is that if it breaks, I can usually swap the link to what it used to point at and protest my innocence as to what happened.
[21:40:26] *** Joins: humky (~humky@user/humky)
[21:40:37] <daemon> blame CentOS
[21:40:42] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[21:41:48] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[21:42:32] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[21:43:39] <djerius> daemon: blame RH.  I tried to convince the powers that be to go with Debian, but RH was the big name, so they started with Fedora Core (or whatever it was) and then redhat and then CentOS (I forget how many versions). CentOS wasn't horrible when you could keep it up-to-date.
[21:45:33] <zgu> but it goes like 5-7 years between major releases
[21:45:53] <mst> djerius: debian 10 is 5.28 IIRC
[21:48:25] <daemon> djerius, I would agree but i'm one of those overbearded BSD users :)
[21:48:48] <thrig> here's a nickel kid, get yourself a real OS
[21:50:23] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[21:52:50] <djerius> zgu: users here like things to be stable.  very upset when they had to switch from exmh to gmail.
[21:53:33] <thrig> ... have fdm pull stuff off gmail, keep using exmh, problem solved ...
[21:56:11] <djerius> that's a magic incantation for the sophistication of the users here.  and the system folks didn't want to support it; much easier for them to point the user at the browser.  
[21:56:32] <daemon> they should still be able to use ldap and even pop3 with gmail
[21:59:52] <daemon> perlbot paste
[21:59:53] <perlbot> daemon: Paste your code to the new https://l.perl.bot/#perl or http://paste.scsys.co.uk/ or https://gist.github.com/ | see allowpaste plugin as an op to control the pastebin in your channel
[22:01:28] <daemon>  .. or be dispatched to a different session (sorry used to POE not async!)
[22:01:29] <daemon> https://l.perl.bot/p/s21h45
[22:01:29] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[22:01:37] <daemon> that was the wrong way around
[22:01:44] <daemon> simcop2387, your bot has stopped reporting when a paste happens again
[22:03:00] <xenu> yeah, it seems to be broken, i've just tried
[22:03:00] <daemon> anyhow, lines 17-26 will that be dispatched instantly and the subfunction continue to execute or will it block (which I assume it will because of the 'await') - if it does block how do I tell it not to, I just want to fire that JSON off and continue on
[22:04:41] <mst> daemon: 'await' is you explicitly telling it to wait
[22:04:45] <daemon> I mean what would be really nice is if I could say to it ... fire off this post and call another of my functions with the results
[22:04:47] <mst> but also, why not just do ->render before that?
[22:05:09] <daemon> ooh I could do that in this case
[22:05:44] <daemon> yep that is far easier :) - though if anyone does know how I would get what I just mentioned 'post it off and tell something else what happened' would be good to know 
[22:05:48] <daemon> mst++ # ta
[22:07:20] <mst> daemon: http://paste.scsys.co.uk/596037
[22:07:21] <Paperbot> Link title(s): [ magnet_web paste from Someone at 217.168.150.38... ]
[22:08:07] <daemon> ah interesting
[22:08:25] <thrig> I wonder if the route-ssh-over-the-webserver trick can be done with mojo
[22:08:35] <daemon> so there is a try/catch automatically built in to this stuff
[22:09:02] <mst> if the promise body die()s that causes ->reject
[22:09:13] <mst> and ->catch can catch any sort of ->reject
[22:09:39] *** Quits: soliste (~soliste@88.164.90.135) (Quit: leaving)
[22:10:16] <daemon> so I bet I could do something like ... $c->req->body->json_decode instead of that try/catch with MaybeXS doing the work
[22:10:36] <mst> oh, yes, $c->req->json should work IIRC
[22:10:52] <daemon> nice! thank you
[22:11:02] <mst> you already know you have valid json if ->valid_input worked, surely
[22:11:44] <daemon> possible, I really do not know that much about these modules I am using, first time using mojo, openapi and async :) IO normally just hand write everything in POE
[22:12:02] <daemon> luckily this is a really tiny POC, so I thought it was time to try something new
[22:12:09] <mst> openapi's gotta validate the body against a json schema
[22:12:12] <mst> so one would presume
[22:12:42] <daemon> well should be easy to test lets see
[22:15:02] <daemon> Unhandled rejected promise: Transaction already destroyed at /home/paul.webster/perl5/lib/perl5/Mojolicious/Plugin/OpenAPI.pm line 117.
[22:15:12] <daemon> so yes I assume it gets quite upset
[22:15:40] <mst> that error means $c->tx went out of scope before it tried to use it for something
[22:15:50] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[22:16:50] <daemon> I should probably move this over to mojo -signatures while its new
[22:17:01] <mst> yes
[22:17:17] <mst> I almost switched it as I was writing it but figured one thing at once
[22:18:18] <daemon> I think signatures was one of the nicest things visually that has been added to perl over the last few years wonder if its been pulled into core yet
[22:18:23] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 264 seconds)
[22:18:32] <mst> eh?
[22:18:33] <daemon> well sorry, if its been marked 'unexperimental'
[22:19:21] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[22:19:40] <xenu> nope
[22:19:46] <xenu> which is sad
[22:20:09] <zgu> no warnings 'experimental::signatures'
[22:20:25] <xenu> i consider 'experimental' a meaningless label. smartmatch and signatures are both experimental
[22:20:29] <xenu> do they really have the same status?
[22:20:47] <daemon> I prefer, use experimental 'signatures';  which I think is just use signatures && no warning
[22:20:53] <xenu> also good luck making breaking changes in signatures, that ship has sailed years ago
[22:21:23] <xenu> so i really don't understand the point of them being experimental
[22:21:39] <daemon> maybe there is some sort of policy a wait time that there has to be no changes before it can happen
[22:21:56] <Grinnz> yeah the only reason switching attribute order in signatures didn't melt down CPAN is because nobody uses sub attributes
[22:22:14] <Grinnz> the experimental designation has been meaningless for years
[22:22:21] <tm604> https://www.nntp.perl.org/group/perl.perl5.porters/2021/02/msg259100.html
[22:22:21] <Paperbot> Link title(s): [ Re: De-experimentalising "signatures" -  nntp.perl.org ]
[22:22:48] <Grinnz> yeah, dave m wants to introduce a breaking change, but that's not going to work in practice anyway
[22:22:53] <ether> xenu: yes, they both have the same status, officially. except we know that one is on its way in and the other is on its way out.
[22:23:11] <tm604> once the @_ question is resolved (and we have exception objects, types and a MOP in core) then we'll probably see a non-experimental upgrade to `signatures`
[22:23:30] <mst> yeah ... that's not going to fly
[22:23:42] <Grinnz> easiest option is to make removal of @_ its own feature
[22:23:56] <mst> no feature 'snailtrail';
[22:26:03] <tm604> also the significant-whitespace feature that current signatures introduces can be mildly annoying, but I don't see that changing any time soon
[22:28:04] <xenu> wait, what significant whitespace?
[22:28:38] <thrig> sendmail.cf called, they want their tabs back
[22:29:30] <tm604> having the signature directly after attributes means `sub whatever:attrib($x)` and `sub whatever:attrib ($x)` have completely different meanings
[22:29:56] <mst> oh ... oh. lolsob.
[22:30:27] <tm604> of course we can't have attributes after the signature because function bodies are due to be deprecated and all the code goes in the (...)
[22:30:28] <zgu> and sub whatever ($x) :attrib gets parsed as a prototype instead, right?
[22:30:37] <mst> eople putting whitespace between attribute name and attribute payload always made me sad so the problem had never occurred to me
[22:30:39] <tm604> and putting the attribute after the `sub` only works for named subs :/
[22:31:29] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:31:55] <mst> tm604: sub foo :lvalue ($self, $foo = return $self->{foo}) { $self->{foo} = $foo }
[22:32:02] <mst> so ... only most of it?
[22:32:38] <Grinnz> zgu: no, a syntax error (by that point the parser will have assumed it's a signature
[22:32:40] <tm604> needs more feature 'class'
[22:32:41] <Grinnz> )
[22:33:03] <Grinnz> mst: attributes don't allow whitespace before the () in any instance
[22:33:05] <tm604> I think the earlier discussion on attribute/signature ordering was in https://github.com/Perl/perl5/issues/14189
[22:33:06] <Paperbot> Link title(s): [ signature/attribute syntax is awful · Issue #14189 · Perl/perl5 · GitHub ]
[22:37:51] *** Quits: pucara (~i@181.93.167.217) (Ping timeout: 258 seconds)
[22:38:36] *** Joins: Martchus_ (~martchus@2a01:c23:c129:eb00:d250:99ff:fe49:3cce)
[22:39:23] *** Quits: Martchus (~martchus@2a01:c22:7266:1100:d250:99ff:fe49:3cce) (Ping timeout: 258 seconds)
[22:47:32] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[22:47:55] *** Joins: kensanata (~user@user/kensanata)
[22:50:18] *** Quits: humky (~humky@user/humky) (Remote host closed the connection)
[22:50:38] *** Joins: humky (~humky@user/humky)
[22:50:48] <daemon> hey all when dealing with json and mojo, I assumed you could just chain catch onto the end of the decode: https://dpaste.org/3Gv4 apparently not as json will be an unblessed object, what is the correct way to catch for something invalid json?
[22:50:49] <Paperbot> Link title(s): [ dpaste/3Gv4 (Perl) ]
[22:53:47] *** Quits: humky (~humky@user/humky) (Remote host closed the connection)
[22:54:24] <skyl4rk> I can get a hash from a returned ref like so: perl -E 'sub x{my $r={a=>1}; $r} my %h = %{x()}; say $h{a}' ...I haven't been able to figure out the opposite case (without the use of intermediate variables), when the sub returns a hash, and I want to convert it to a ref?
[22:54:51] *** Joins: proller (~p@80.240.216.69)
[22:55:34] <mst> skyl4rk: my $ref = { x() };
[22:56:47] <skyl4rk> ...of course, I have infact used that kind of method, but working with arrays, totally skipped my mind now for hashes though
[22:56:48] <kensanata> yeah, was going to say perl -E 'sub x{my %h=(a=>1); %h} my $r = {x()}; print $r->{a}'
[22:56:51] <skyl4rk> thanks
[22:57:26] <mst> skyl4rk: perl contains enough clever that it's sometimes easy to forget that sometimes no additional clever is required
[22:57:46] <Grinnz> keep in mind "returns a hash" is not a thing; a return value can only be a scalar in scalar context, or a list of one or more scalar values in list context
[22:57:59] <Grinnz> in your cast, that list just happens to be alternating keys and values copied from the hash you passed to return
[22:58:03] <Grinnz> in your case*
[22:58:51] <Grinnz> either assignment to a hash variable or putting it in {} will assign those to a new hash
[22:58:52] <skyl4rk> sure, and 'sub {my %named_params = @_; ... } is neat
[23:01:23] <mst> use experimental 'signatures'; sub foo (%params) { ... }
[23:06:07] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:13:01] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[23:15:17] *** Quits: magla (~gelignite@55d41a29.access.ecotel.net) (Quit: Stay safe!)
[23:26:50] *** Quits: vague (~vague@irssi/staff/vague) (Quit: Client closed)
[23:27:10] *** Joins: vague (~vague@irssi/staff/vague)
[23:28:27] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 258 seconds)
[23:31:52] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:35:45] *** Joins: jetchisel (jetchisel@user/jetchisel)
[23:41:03] *** Joins: proller (~p@2a02:6b8:b081:8821::1:19)
[23:50:41] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 258 seconds)
[23:57:21] <revhippie> I _vaguely_ remember a way to call a method whose name is stored as a string; something like (but not) $foo->$bar() -- is there some way to do that, or have I been sniffing too much glue?
