[00:00:09] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:00:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:01:57] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:09:49] *** Joins: xkuru (xkuru@user/xkuru)
[00:09:51] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[00:10:14] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:10:21] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[00:10:26] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:11:39] *** Joins: x_kuru (~xkuru@user/xkuru)
[00:12:07] *** Joins: undephin3d (~undephin3@158.181.72.102)
[00:13:05] <pulse> std::format_c
[00:13:24] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[00:14:53] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:15:24] *** Quits: xkuru (xkuru@user/xkuru) (Ping timeout: 240 seconds)
[00:16:45] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:22:36] *** Joins: badone (~badone@209.132.189.152)
[00:28:32] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:29:16] *** Joins: stefanos82 (~stefanos8@31-108-116.netrun.cytanet.com.cy)
[00:36:23] *** Quits: z3t0_alt (~z3t0@146.71.14.98) (Quit: Connection closed)
[00:40:37] *** Quits: stefanos82 (~stefanos8@31-108-116.netrun.cytanet.com.cy) (Quit: Leaving)
[00:42:36] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 252 seconds)
[00:43:35] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[00:46:43] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:46:57] *** Joins: foobaz21266 (~foobaz212@109.249.187.65)
[00:47:06] *** Quits: foobaz21266 (~foobaz212@109.249.187.65) (Client Quit)
[00:47:40] *** Joins: foobaz21266 (~foobaz212@109.249.187.65)
[00:47:58] *** Quits: foobaz21266 (~foobaz212@109.249.187.65) (Client Quit)
[00:48:17] *** Quits: ville (~ville@user/ville) (Quit: ville)
[00:48:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:49:47] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[00:50:51] *** Quits: nq (~nq@2a02:2f08:e015:a900:cafd:3575:1a3d:974) (Ping timeout: 252 seconds)
[00:51:05] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d0e9:aad1:55a7:81ee)
[00:52:38] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[00:56:53] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[00:57:38] *** Joins: ville (~ville@user/ville)
[00:58:21] *** Joins: Terminus (~null@user/terminus)
[01:07:43] *** Joins: xkuru (~xkuru@user/xkuru)
[01:09:11] *** Joins: x_kuru (~xkuru@user/xkuru)
[01:09:20] *** Quits: AmR (~AmREiSa@156.207.194.71) (Quit: Konversation terminated!)
[01:10:08] *** Joins: foobaz21266 (~foobaz212@109.249.187.65)
[01:12:41] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[01:12:47] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[01:13:32] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[01:14:13] *** Quits: foobaz21266 (~foobaz212@109.249.187.65) (Client Quit)
[01:15:04] <ashafq> What is nice way to display some progress bar?
[01:15:05] *** Joins: xkuru (~xkuru@user/xkuru)
[01:17:52] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:18:18] *** Joins: mrvn (~mrvn@ip-046-005-255-082.um12.pools.vodafone-ip.de)
[01:18:37] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[01:19:06] <pulse> in terminal or GUI?
[01:19:29] <pulse> in terminal i like the rotating \-/| next to a [##.......] 20%
[01:19:48] *** Quits: Alipha (~AliphaX@user/alipha) (Ping timeout: 240 seconds)
[01:20:16] <PJBoy> an unbounded sequences of dots
[01:20:23] <PJBoy> like in the good ol' DOS days
[01:21:11] <PJBoy> more seriously a percentage is just fine
[01:22:13] *** Quits: robod34 (~Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:23:12] <ashafq> I guess I can do this but with just one line: https://gist.github.com/ashafq/217b9c7a90e2d1008c594a486109edb1
[01:24:03] <ashafq> Like rainbow progress bar... but how far do I want to take that?
[01:25:35] <ashafq> alas C++ doesn't have that werid Python's * operator on strings
[01:28:09] <pulse> what would be the absolute worst C++ possible
[01:28:21] <pulse> some kind of meta-hell?
[01:28:29] <PJBoy> C
[01:28:39] <pulse> so a lot of confusing pointers
[01:29:08] <PJBoy> man C++ doesn't have a particularly terse way of doing python's string multiplication
[01:29:25] <pulse> you can implement your own
[01:29:52] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:30:22] <gehn> "PJBoy, C" <- lmao, it's true, it's funny because it's true XD
[01:30:30] <mrvn> Can I make a "tee" in C++ coroutines?
[01:30:32] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[01:31:10] <gehn> mrvn, meaning what, more precisely
[01:31:13] <gehn> like https://www.gnu.org/software/coreutils/manual/html_node/tee-invocation.html#tee-invocation ?
[01:31:14] <PJBoy> there isn't even a repeat_view or anything
[01:31:36] <ville> c is hardly "hell"
[01:31:38] <mrvn> gehn: I have two places that need the values returned from a coroutine.
[01:32:13] <ville> PJBoy: how many years of c programming experience do you have?
[01:32:34] <PJBoy> hard to say
[01:32:40] <ville> 5? 10?
[01:33:27] <PJBoy> I've always had to interact with C in my C++'ing
[01:33:44] <PJBoy> so I can only say I've been doing C/C++ for ~12 years
[01:33:55] <mrvn> gehn: I figure I can't just have 2 parts of the code co_wait on the same coroutine, right?
[01:33:59] <ville> well that doesn't really count. you're not actively thinking what c offers and how to utilize those primitives
[01:34:29] <PJBoy> I did do two years of a C only job
[01:34:39] <PJBoy> but that was terrible
[01:35:58] <PJBoy> although looking back on it, it was very good for C
[01:36:37] <PJBoy> except for all the macros being used where functions would have worked
[01:36:46] <PJBoy> very questionable code in there
[01:36:52] <gehn> I can understand where some embedded folks are coming from who like C. When there's no stdlib, like you don't even have malloc, it's just like "here's 256k of memory, do whatever", sure an ancient simplistic byte processing language fits that paradigm fairly well
[01:37:09] <PJBoy> and we had lots of linked lists because data structures in C are hard
[01:37:18] <ville> eh?
[01:37:29] <gehn> but even within that context, plenty of other C++ language features are still usable and it still means you have, well... more features, better type safety, etc
[01:38:11] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[01:38:42] <mrvn> gehn: Do this in C: https://www.youtube.com/watch?v=zBkNBP00wJE&t=3697s
[01:39:04] <ville> i don't know why you would say data structures are hard. you just probably want some code generating capability to spam them out for whatever specific types you use them with
[01:39:32] <PJBoy> well they're more expensive that difficult
[01:39:32] <mrvn> Freestanding c++ is rather preferable for embedded I feel.
[01:39:53] <PJBoy> it takes time to write simple things like a resizable array in C
[01:40:02] <PJBoy> so immediately you have to justify not using a linked list
[01:40:03] <gehn> PJBoy, reasonably terse to me https://wandbox.org/permlink/YMqdvBDSk4jTYrbE
[01:40:23] <ville> PJBoy: umm.. and you spam it out with code generation
[01:40:30] <mrvn> PJBoy: too slow, takes twice the memory.
[01:40:39] <PJBoy> code generation takes time to write and adds complexity
[01:40:51] <gehn> though it does admittedly involve the creation of said custom wrapper function which itself isn't amazingly terse, but like, it's really not too out of order and the resulting usage is quite terse
[01:40:56] <ville> it's not like it's particularly easy to write data structures for c++ either. if you really really try to do everything by the book and avoid all gotchas in generic code
[01:40:58] *** Quits: magla (~gelignite@d5362120.access.ecotel.net) (Quit: Stay safe!)
[01:40:59] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[01:41:09] <PJBoy> yeah but I can use vector<T>
[01:41:19] <PJBoy> so it's immediately far better than C could ever hope to be
[01:41:53] <gehn> that's less true where you don't have stdlib available, e.g. tiny embedded devices
[01:42:04] <mrvn> have to write new/delete first
[01:42:17] <mrvn> oh wait, that needs a linked list :)
[01:42:19] <ville> code generation is not that difficult to setup. and it's really nice one you've it. as you've everything "instantiated" rather than in their generic/templated form
[01:42:20] <gehn> anything resembling the "applications" level domain though, C++ beats C all day every day
[01:42:34] <LordKalma> there's a library called the embedded template library
[01:42:43] <LordKalma> WHICH IS AMAZIIIIIIIIINNNNNGGGGGG
[01:42:46] <mrvn> LordKalma: Any good? url?
[01:42:47] <PJBoy> also why would you ever want code generation when you can just use a language that has generics
[01:43:12] <LordKalma> https://www.etlcpp.com/
[01:43:20] <PJBoy> if you're doing code gen + C, then you're doing two languages where a single good language would suffice
[01:43:46] <LordKalma> • The embedded template library has been designed for lower resource embedded applications. It defines a
[01:43:46] <LordKalma>    set of containers, algorithms, and utilities, some of which emulate parts of the STL. There is no dynamic memory
[01:43:46] <LordKalma>    allocation.
[01:43:46] <LordKalma> • The library makes no use of the heap. All the containers (apart from intrusive types) have a fixed capacity
[01:43:46] <LordKalma>    allowing all memory allocation to be determined at compile-time. The library is intended for any compiler that
[01:43:47] <LordKalma>    supports C++03 or greater.
[01:43:53] <PJBoy> plus you have to come up with your own mangling scheme
[01:43:54] <ville> PJBoy: perhaps the rest of the crap from the "good" lanuage are not worth it
[01:43:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:44:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:44:05] *** ChanServ sets mode: +v npaperbot
[01:44:22] <PJBoy> you can make a policy to only use the common subset of C and C++, and vector<T>, and it would still blow C out of the water
[01:44:26] <mrvn> LordKalma: no dynamic structures. That seems rather pointless then.
[01:44:36] <ville> PJBoy: you can't escape some aspects of c++ the language
[01:44:56] <LordKalma> mrvn, well, we're talked embedded systems that probably don't even have a heap
[01:45:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[01:45:08] <LordKalma> if you're developing for like an ARM cpu, just use the std
[01:45:09] <ville> PJBoy: object lifetimes and such. well you can of course escape them by just ignoring the rules you don't agree with
[01:45:13] <mrvn> LordKalma: every system has a heap. They might not have malloc but they do have a heap.
[01:45:20] <PJBoy> ville, I'll give you that
[01:46:02] <LordKalma> mrvn, you know what I mean
[01:46:04] <mrvn> LordKalma: I was hopeing for something that has std::pmr::vector for example.
[01:46:04] <PJBoy> but that's not a huge drawback at all
[01:46:21] <PJBoy> basically any benefit you can get from C++ would outweigh that
[01:46:33] <LordKalma> plus, in tiny devices you probably want to know the size it'll occupy beforehand
[01:47:03] <mrvn> LordKalma: if you can the yes. But some things just need to grow on demand.
[01:47:20] <LordKalma> in those systems just use boost if you don't have a std :)
[01:47:29] <ville> PJBoy: also code generation is sort of nice as you get the "instantiated" form on disk. it's there. everything works on it just like regular code
[01:47:45] <mrvn> LordKalma: STL/Boost are horrible memory hoggs though.
[01:47:55] <PJBoy> ville, I was thinking the opposite :/
[01:48:11] <PJBoy> you do your debugging and you get generated code instead of real code
[01:48:40] <ville> it's great when you debug
[01:48:41] <PJBoy> if you want to fix anything you have to rerun your generator
[01:48:46] <PJBoy> and you likely don't have any support for comments
[01:48:52] <LordKalma> mrvn, what the hell you're talking about?
[01:48:52] <mrvn> LordKalma: do you know if boost supports std::pmr::polymorphic_allocator?
[01:48:54] <PJBoy> edit and continue likely doesn't work
[01:49:02] <LordKalma> std::vector doesn't really occupy more than it needs, I'd say
[01:49:12] <LordKalma> mrvn, and yes, there are PMR boost libraries
[01:49:17] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:49:40] <mrvn> LordKalma: for embedded you want both, the static stuff the etlcpp has and dynamic stuff boost has, but maybe not that featurefull.
[01:50:02] <LordKalma> well, with the advent of sane package management, you can just do it :)
[01:51:13] <xkoncek> btw that vulkan.hpp lib is pretty modern and they even template everything on allocator types
[01:51:25] <xkoncek> not that it would be useful for a regular user
[01:51:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:52:18] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[01:52:36] <gehn> mrvn, no they're not? also STL isn't a thing (anymore)
[01:52:44] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[01:53:37] <mrvn> gehn: what did that refer to?
[01:53:57] <LordKalma> Stl, std, whatever
[01:53:59] <gehn> <mrvn> LordKalma: STL/Boost are horrible memory hoggs though.
[01:54:32] <LordKalma> Yes, they aren't
[01:54:37] <gehn> like, std::vector doesn't inherently use any more memory than you would otherwise need to use anyway if you did what it does and if you provided what it provides
[01:54:43] <LordKalma> They are as slim as it gets
[01:54:46] <mrvn> gehn: compared with array based intrusive data types with indexes instead of pointers they are a lot bigger.
[01:55:12] <gehn> if you need to keep track of the size and capacity of a growable array there's sort of a minimum amount of memory you need to use, namely a pointer to the data and at least e.g. an integer for size, possibly one for capacity as well
[01:55:28] <BurumaSerafuku> std::vector can use more memory than a hand rolled implementation yes (allocators, capacity and possible internal stdlib stuff)
[01:55:40] <mrvn> gehn: vector is pretty idea, array is perfect. But think maps
[01:55:41] <BurumaSerafuku> that's why a a vector<vector... is usually a bad idea
[01:55:56] <gehn> mrvn, I assume you mean like e.g. `int foo[100];` where `100` is known at compile time
[01:55:58] <mrvn> s/idea/ideal/
[01:56:04] <gehn> which isn't equivalent functionality to what `std::vector` provides
[01:56:11] *** Quits: malloy (~jimery@120.235.172.170) (Quit: WeeChat 3.0)
[01:56:14] <gehn> not only is it not growable, it's also not heap allocated
[01:56:48] <gehn> saying something like "array of perfect" is entirely myopic and missing the point
[01:57:04] <mrvn> gehn: but if you know the size and can use a statically sized data type that saves a lot.
[01:57:07] <gehn> array isn't perfect, but it's also not not perfect - that criteria is fuzzy and lacks informational and utility value
[01:57:19] <mrvn> gehn: As I said you need both
[01:57:20] <gehn> right tool for the right job
[01:57:36] <gehn> mrvn, yes but it's erroneous to conflate the two as you've done
[01:57:44] <gehn> with some hand wavy claim about memory usage
[01:58:04] <gehn> also there still exists `std::array` which is part of your so called "STL"
[01:58:43] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[01:58:59] <mrvn> gehn: I already said (std::)array is perfect. You can't get better than 0 overhead.
[01:58:59] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) ()
[01:59:14] <gehn> you really don't understand what's going on here do you
[01:59:29] <mrvn> gehn: you don't seem to understand "think about maps"
[01:59:44] <gehn> that's not how this works
[01:59:47] <LordKalma> You want a growable type hat doesn't occupy more space than N*T?
[01:59:55] <LordKalma> That*
[02:00:44] <mrvn> LordKalma: N*T + const is ok. Can't get around that. But N*(t+const) is quickly wastefull.
[02:02:09] <LordKalma> And what std types do the latter?
[02:02:17] <LordKalma> Honest question because I don't know
[02:02:35] <gehn> and N*T+c is exactly what vector uses, so vector is ok afterall, glad you could confirm that for us, thanks
[02:02:36] <gehn> !next
[02:02:37] <nolyc> this factoid is locked. for a reason. do not recreate it.
[02:02:54] <mrvn> gehn: and you still don't seem to understand "think about maps"
[02:03:11] <mrvn> LordKalma: any stl type that adds an indirection.
[02:03:20] <gehn> you still don't seem to understand the basic premise of clear discussion and communication and the fallacy of conflation
[02:03:40] <ville> mrvn: adds an indirection compared to what?
[02:03:43] <gehn> oh look, let's conflate `int foo[100];` with vector and pretend this means STL is bloated
[02:03:49] <mrvn> gehn: we already agreed that std::array and std::vector have nothing you can loose.
[02:04:12] <ville> mrvn: what do you mean by "maps"?
[02:04:14] <gehn> your argument is <mrvn> LordKalma: STL/Boost are horrible memory hoggs though
[02:04:24] <gehn> an argument for which you've not provided any support
[02:04:30] <gehn> beyond conflating array with vector
[02:04:55] <mrvn> std::unordered_map for example.
[02:05:23] <mrvn> gehn: the only one conflating array with vector is you. I never said that.
[02:06:05] <LordKalma> How do you do a map without a hash table?
[02:06:10] <ville> mrvn: alright so "hash table". yes you can choose to implement a hash table in various ways. what is your particular objection about std::unordered_map then?
[02:06:18] *** Joins: x_kuru (xkuru@user/xkuru)
[02:06:23] <ville> LordKalma: std::map
[02:06:27] <LordKalma> Well, I guess you can just compute a binary search every time
[02:06:53] <ville> LordKalma: which is an rb-tree pretty much guaranteed due to complexity requirements
[02:07:12] *** Joins: x_kuru_ (xkuru@user/xkuru)
[02:07:26] <LordKalma> Yes  I realised after you could have cpu time instead of a hash table
[02:07:27] <mrvn> LordKalma: The hashtable isn't the problem, the dynamically allocated buckets are. You can use a hashtable with different collision strategies that do not have buckets and then you just have one blob with size, fill_grade, data_blob.
[02:08:12] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:08:55] <LordKalma> If I had to bet, I'd say someone in boost wrote something like that. There isn't a container boost doesn't have haha
[02:09:10] <mrvn> LordKalma: consider a unordered_map of ints. Each int is in a bucket. A bucket has a 4 byte for the int, 8 byte for the next pointer, 4 byte padding, 16-32 byte malloc overhead. So 32-48 bytes instead of 4 bytes with not buckets.
[02:09:39] <mrvn> LordKalma: possibly boost might have it. I know STL does not.
[02:10:03] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[02:10:32] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 240 seconds)
[02:11:07] *** Joins: xkuru (xkuru@user/xkuru)
[02:11:13] <gehn> <mrvn> gehn: compared with array based intrusive data types with indexes instead of pointers they are a lot bigger <- this is absolutely conflating the two as if their use cases are the same and their functionality is equivalent
[02:11:32] *** Quits: x_kuru_ (xkuru@user/xkuru) (Ping timeout: 240 seconds)
[02:11:37] <gehn> "I want to eat pizza" ... "well, you know, you could eat sushi instead, they both have nutritional value"
[02:11:55] <mrvn> gehn: *array based*. You implement a heap in an array. Or a hashtable.
[02:12:39] <mrvn> gehn: meaning you allocate one chunk of memory and place the whole datatype in there instead of tousands of small allocations.
[02:12:41] <gehn> you're using as support for your horrible argument that "X is bloated" the idea that "you can use Y" instead, when X and Y are not interchangeable
[02:12:57] *** Joins: x_kuru (~xkuru@user/xkuru)
[02:13:01] *** Joins: pepperon1 (~pepperoni@172.58.102.236)
[02:13:09] <gehn> "I want to adopt a dog"... "here, have this cat instead", said no one ever
[02:13:14] <mrvn> gehn: A hashtable with no buckets in interchangeable with the one in std::unordered_map.
[02:13:45] <gehn> and now you've moved the goal post and are pretending like you never made the conflation from earlier
[02:13:59] <mrvn> gehn: I never did. that is your own misunderstanding.
[02:14:08] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[02:14:30] <gehn> and now you're gaslighting me, telling me you never said stuff that's clearly visible in the scrollback
[02:14:57] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Ping timeout: 240 seconds)
[02:15:02] <mrvn> gehn: obviously sionce you misunderstand and insist on misunderstanding what I wrote.
[02:15:35] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[02:15:53] <gehn> !wall
[02:15:54] <nolyc> gehn: Error: "wall" is not a valid command.
[02:16:23] <ville> mrvn: so yeah the std lib did make some choices for unonrered containers in particular, but that's a far cry from your original claim that the whole library is
[02:16:29] *** Quits: xkuru (xkuru@user/xkuru) (Ping timeout: 256 seconds)
[02:17:14] <mrvn> ville: std::string?
[02:17:47] <ville> mrvn: that's just "std::vector" with crap-ton of unnecessary members
[02:17:52] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[02:18:12] <mrvn> ville: No, it adds an indirection if you don't have a small string.
[02:18:23] <LordKalma> Same as a vector?
[02:18:32] <LordKalma> Pointer to data and size
[02:18:35] <LordKalma> Aka... A vector
[02:18:44] <mrvn> ville: There is a good reason for it in the STL but in embedded you often don't want to pay the memory for the small speed gain.
[02:18:46] <LordKalma> Even smaller than a vector because the capacity is the size
[02:18:59] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[02:19:24] <mrvn> ville: especially for const strings.
[02:19:25] <ville> mrvn: umm. std::string is roughly speaking: pointer, size, size
[02:19:31] *** Parts: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) ()
[02:19:49] <mrvn> ville: You can reduce it to size+data in a single chunk.
[02:19:50] <LordKalma> Ah yes you're Wright, strings do have independent capacity
[02:20:16] <LordKalma> Well, that's a static string
[02:20:16] <ville> mrvn: but you're again thinking you _need_ to use std::string for string literals?
[02:20:31] <gehn> you're again conflating features sets and utility
[02:20:40] <gehn> char foo[100] is not equivalent to std::string
[02:20:49] <mrvn> ville: what else do you want to use const char*? Often works but not the same.
[02:21:02] <LordKalma> Yeah, like, you keep complaining dynamically sized types have overhead over static types...
[02:21:06] <gehn> same fallacy you just put forward for your horrible argument like 5 minutes ago
[02:21:07] <LordKalma> Like, yes, and?
[02:21:08] <ville> mrvn: i can't parse that sentence
[02:21:08] <gehn> no surprise here
[02:21:23] <ville> mrvn: you could now use a string_view for various uses of string literals if you wish
[02:21:41] <mrvn> ville: what else do you want to use? const char*? Often works but not the same.
[02:22:01] <LordKalma> Boost has static string if you insist haha
[02:22:11] <CarloWood> punctuations are your friend.
[02:22:12] <ville> mrvn: it depends what the actual use-case is. if it's a runtime sized string then std::string is fairly alright choice i would say.
[02:22:29] <mrvn> ville: exactly. So assume the use case needs the feature std::string has.
[02:22:30] <ville> mrvn: if it's a string literal then std::string_view probably alright
[02:23:07] <LordKalma> If you need the same features as std string you can't get smaller than a std string
[02:23:11] <gehn> "only what you use", nothing necessitates you use the pre-fab containers in STL
[02:23:15] <ville> mrvn: so i still don't know why you thought std::string was a particular memory waster
[02:23:18] <mrvn> And you can do that with an indirection like the STL does or without. The later saves you 24 bytes per string.
[02:23:26] <gehn> if you actually need the same feature set, good luck doing a better job than the stdlib authors
[02:23:35] <gehn> if you don't, then you're conflating functionality and thus your argument is invalid
[02:23:58] <gehn> with some wiggle room here, not saying all of stdlib is perfect, but it wasn't designed to be everything for everyone for every use case
[02:23:59] <mrvn> gehn: I'm not trying to be better, just more space efficient.
[02:24:05] <ville> mrvn: what indirection are you on about? yes a pointer to a data buffer will be indirection, but so would a char const* on a string literal for example
[02:24:22] *** ik is now known as kleiner
[02:24:30] <gehn> mrvn, what the fuck do you think is the definition of "better" here in this context that you've been going on about
[02:24:45] <mrvn> ville: In C terms you would do struct String { size_t size; char data[]; }
[02:25:08] <ville> mrvn: well pointer, size, size. you want to track total size and used size
[02:25:38] <gehn> you are free to write your own implementation
[02:25:38] <ville> mrvn: as a side small buffer optimization is not mandated by the standard. some implementations do it, but that's often done on top of the pointer,size,size members
[02:25:39] <mrvn> ville: then struct String { size_t length; size_t capacity; chat data[]; }
[02:25:47] <ville> mrvn: that's what std::string is
[02:25:52] <gehn> it would still be better to do so in C++ rather than in C
[02:25:59] <mrvn> ville: no, std::string has that pointer to data.
[02:27:32] <mrvn> ville: That C syntax describes a single struct with the data attached to the end of the struct. No a pointer to data.
[02:27:42] *** Joins: galik (~galik@217.138.195.27)
[02:27:59] *** Quits: galik (~galik@217.138.195.27) (Client Quit)
[02:30:28] <ville> mrvn: yes c++ doesn't have flexible array members
[02:32:52] <LordKalma> How do they work in C? It's a bit of a nice magic to have structs of the same type be different sizes
[02:33:25] <LordKalma> And why doesn't c++ have that? I guess you could do a stack allocator, but still weird
[02:33:28] *** Quits: mrvn (~mrvn@ip-046-005-255-082.um12.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[02:33:57] <gehn> and yet still none of this even comes close to a valid or reasonable support for the idea that "STL/Boost are horrible memory hoggs"
[02:34:15] <LordKalma> Forget that
[02:34:28] <ville> LordKalma: https://port70.net/~nsz/c/c11/n1570.html#6.7.2.1p20
[02:34:28] <gehn> but that's the whole point here, isn't it?
[02:34:41] <LordKalma> Someone explain me why C has some magic we don't, and how it works
[02:34:42] <gehn> like that's how this got started, and that's why it's still going
[02:34:46] <LordKalma> Thanks, lemme read
[02:35:10] <ville> LordKalma: so in that example you would move the indirection to accessing the object, but then know the offset where the buffer starts
[02:36:08] <LordKalma> Ahhh it requires malloc
[02:36:11] <LordKalma> No magic in that
[02:37:17] <LordKalma> And now you're reminding me of that typedef struct {} struct dance C requires
[02:37:27] <ville> it doesn't _require_ it
[02:37:43] <ville> it's the sane thing to do, but it doesn't require it
[02:37:53] <LordKalma> That link really reminds everybody of how structs are syntactic sugar in C
[02:38:19] <ville> and that's where c++ lost the plot
[02:38:35] *** Joins: mrvn (~mrvn@ip-046-005-255-082.um12.pools.vodafone-ip.de)
[02:38:36] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[02:38:38] <mrvn> re
[02:38:46] <gehn> not required, unless you want sanity XD
[02:38:50] <LordKalma> Well, I guess if that struct was a stack object the flexible array member would be a vla?
[02:38:58] <mrvn> LordKalma: C++ doesn't have those variable structs because you can't pass them by value.
[02:39:16] <mrvn> (and that question was the last I saw)
[02:39:54] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:40:14] <LordKalma> Not sure what that even means. But yeah, they example in the link makes very clear how the C model for structs is incompatible with a strong type system
[02:40:47] <LordKalma> That said, I wound find it very hard to believe something similar can't be donewwith C++ with some effort
[02:40:59] <mrvn> LordKalma: you can't have 'void Foo(struct String str);'. The compiler wouldn't know how bit the argument is.
[02:41:03] <LordKalma> The size+data chunk business, I mean
[02:41:36] <LordKalma> That only reinforces the idea that C is just moving the overheads elsewhere
[02:42:05] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:42:18] <mrvn> LordKalma: You can easily do it in C++ with ugly tricks and hide all that in the class. The one point to notice is that you gain space but you give up a lot of the move semantic.
[02:43:04] <ville> LordKalma: you probably couldn't. legally following all the rules
[02:43:14] <mrvn> E.g. for the string the control block and data are a single allocation. Can't move thet data into a different control block like the STL can.
[02:43:52] *** Quits: pepperon1 (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[02:44:13] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[02:44:44] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 250 seconds)
[02:45:55] <LordKalma> Well, static strings with size as template parameter and string view for api boundaries then hehe
[02:46:01] <mrvn> It's always a trade off. The STL and boost are optimized for speed more than space. But if memory is your most precious resource then you can do it differently. That's all I wanted to say.
[02:47:26] <mrvn> LordKalma: doesn't the gsl have a type alias for those?
[02:49:40] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:50:57] *** Quits: cq-work (~cq-work@user/cq-work) (Remote host closed the connection)
[02:51:17] *** Joins: cq-work (~cq-work@user/cq-work)
[02:52:35] <LordKalma> Not a gsl specialist
[02:52:41] <LordKalma> Side rant on the gsl
[02:52:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[02:53:28] <LordKalma> Making a theoretical library for the sake of cpp core guidelines with no reference implementation is really bullshit
[02:54:08] <LordKalma> Microsoft's gsl is good enough, but still, who the hell makes guidelines telling you to use a library that doesn't exist
[02:54:10] <ville> doesn't micros~1 ship one?
[02:54:15] <mrvn> I've seen UDTs for this for embedded stuff. "fixes sized string"_str converts into a struct with length and data.
[02:54:27] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:54:57] <LordKalma> ville, yes, but my rant stands
[02:55:05] <ville> on one leg?
[02:55:13] <mrvn> LordKalma: A lot of the guideline doesn't need any extra support. For the rest there is the gsl.
[02:55:43] <mrvn> LordKalma: haven't learned all of it but sofar the guidelines had a lot of good suggestions.
[02:56:26] <LordKalma> ville, well, the Microsoft gsl is kinda the facto implementation of the gsl. But my problem is the order of things. You can't just write guidelines over a library you just made up in your mind
[02:57:35] <ville> LordKalma: odds are "they" had versions of the things they were recommending that were locked up in the respective companies they work for
[02:57:51] <LordKalma> Probably
[02:57:58] <LordKalma> Where does Herb work?
[02:58:06] <ville> micros~1
[02:58:09] <LordKalma> Bjarne works at bloomberg, right?
[02:58:37] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[02:58:39] <LordKalma> Ahhh okay, that makes sense then
[02:58:46] <ville> morgan stanley?
[02:58:55] <LordKalma> Oh yes, that, sorry
[02:59:46] <ville> so then at some point "they" got some interns clean room an implementation that could be released
[02:59:54] <ville> lawyers involved and all that
[03:00:03] <LordKalma> Yeah, that sounds plausible.
[03:00:16] <LordKalma> Gsl so probably was an internal library at ms
[03:00:22] <cq-work> gsl doesn't implement everything in the core guidelines
[03:00:34] <LordKalma> Which is a more reasonable origin story
[03:01:13] <cq-work> Actually, they have a list in the readme showing a whole thing about what they don't implement.
[03:01:28] <LordKalma> cq-work, thus why I rant about recommending you to do things with theoretical libraries, but at least with the info that Herb works in MS its a more clear origin story
[03:02:23] <cq-work> Some of those are goofy... like joining_thread is basically just jthread no?
[03:02:44] <cq-work> How does one implement "[[implicit]]"
[03:03:19] <LordKalma> Haven't really read trough all of it. Owning Raw pointer types and a basic view is all I remember it has
[03:03:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:03:48] <LordKalma> cq-work, the standard tells compilers to ignore any attributes they dint know, so you can make user defined attributes by just using them
[03:04:09] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[03:04:11] <LordKalma> Sure, they provide nothing in terms of static analysis, or compiler optimization or anything like that
[03:04:21] <mrvn> LostFrog: and 2 years later the standard adds that and BOOM
[03:04:24] <LordKalma> But for code reading semantics, you just use it
[03:05:13] <LordKalma> There's, like always, a one hour cpp con tall about user defined literals and it is basically one hour to tell you what I just did
[03:05:20] <LordKalma> You just use them
[03:05:53] <LordKalma> Talk about user defined attributes *
[03:07:52] <mrvn> LordKalma: I like how gcc put's it's own attributes in a namespace: [[gcc:...]
[03:09:16] <LordKalma> They all do that. But nobody uses those anyway. We all use the old non standard attributes via macros like real programmers
[03:09:37] <LordKalma> __declspec and __pragma like real men
[03:09:40] <mrvn> I'm not writing __attribute__ for anything new anymore.
[03:10:33] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d0e9:aad1:55a7:81ee) (Ping timeout: 252 seconds)
[03:11:15] *** Joins: ferdna (~ferdna@user/ferdna)
[03:15:22] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:17:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:20:17] *** Quits: proller (~p@2a02:6b8:b081:8803::1:2f) (Ping timeout: 240 seconds)
[03:24:36] <gehn> mrvn> It's always a trade off. The STL and boost are optimized for speed more than space. But if memory is your most precious resource then you can do it differently. That's all I wanted to say
[03:24:44] <gehn> perfectly reasonable claim, unlike your original claim
[03:26:24] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:cdda:3757:8d29:77bf)
[03:26:24] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:cdda:3757:8d29:77bf) (Changing host)
[03:26:24] *** Joins: skapata (~Skapata@user/skapata)
[03:27:53] <mrvn> gehn: I guess you never tried to use the STL with 4kb of memory.
[03:28:59] <gehn> I guess you think that 4kb memory constraints are the majority or the norm
[03:29:23] <gehn> meaning, the majority of C++ devs work in those kinds of constraints
[03:29:39] <mrvn> gehn: with embedded when you aren't talking Raspberry Pi stuff that's about the size you have normally.
[03:29:43] <gehn> I doubt anyone knows the actual numbers on that - there are too many C++ devs in the world
[03:29:55] <gehn> embedded is but one domain of many for which C++ is used
[03:30:11] <mrvn> gehn: but it's the domain we were talking about
[03:30:19] <gehn> and I would conjecture that embedded is not the majority
[03:30:29] <gehn> no, it's the domain you were talking about
[03:30:49] <gehn> and that domain was never stipulated in your original assertion about STL/Boost being bloated "memory hogs"
[03:30:55] <gehn> which they still aren't
[03:31:44] <gehn> anyway, your original claim was shit. this more recent amendment is more reasonable
[03:32:06] <mrvn> gehn: scroll up to: 23:06 < gehn> I can understand where some embedded folks are coming from ... and read everything again
[03:32:23] <gehn> no thanks
[03:32:37] <gehn> you still suffered massive conflation and fallcies
[03:33:19] <mrvn> gehn: seems like you rather want to argue than contribute anything constructive. So EOT form my side.
[03:33:45] <gehn> constructive stuff, so to you that's like conflations and fallacies and stuff?
[03:34:06] *** Joins: proller (~p@80.240.216.69)
[03:34:16] *** Joins: Tokamak (~Tokamak@172.58.188.132)
[03:40:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:41:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:41:43] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 256 seconds)
[03:45:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[03:50:13] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:54:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[03:55:41] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[03:59:48] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[04:00:11] *** Joins: proller (~p@2a02:6b8:b081:b503::1:24)
[04:01:04] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: WeeChat 3.4)
[04:05:54] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[04:06:11] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[04:10:23] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:15:01] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d088:f824:bd53:1d4c) (Quit: Quit)
[04:18:34] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[04:21:49] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[04:21:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:23:24] *** Quits: undephin3d (~undephin3@158.181.72.102) (Ping timeout: 240 seconds)
[04:23:33] *** Parts: mrvn (~mrvn@ip-046-005-255-082.um12.pools.vodafone-ip.de) ()
[04:25:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:26:02] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[04:26:50] *** Quits: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca) (Quit: Konversation terminated!)
[04:28:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:31:07] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[04:31:10] *** Quits: Gamah (~quassel@gamah.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:31:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:31:48] *** Joins: Gamah (~quassel@gamah.net)
[04:32:25] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:32:53] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[04:34:47] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:34:48] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[04:48:36] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[04:50:35] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:53:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[04:55:11] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:56:17] *** Joins: malloy (~jimery@120.235.172.170)
[05:05:57] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[05:13:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:14:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[05:19:40] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[05:20:43] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[05:20:52] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[05:21:25] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Remote host closed the connection)
[05:21:48] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[05:28:20] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[05:28:53] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Read error: Connection reset by peer)
[05:29:11] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[05:29:50] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:31:39] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[05:43:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:44:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:44:05] *** ChanServ sets mode: +v npaperbot
[05:46:12] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[05:50:51] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:54:19] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:55:19] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[06:00:47] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[06:01:20] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:04:41] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[06:06:05] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[06:09:20] *** Joins: Inline__ (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de)
[06:10:11] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:795e:a75c:8fe1:c5f2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:12:13] *** Quits: Inline (~Inline@p200300cd470a26002e72b25ea400e9f0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:12:25] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:17:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:23:59] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[06:24:45] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[06:29:38] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 252 seconds)
[06:30:02] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:45:56] *** Joins: smeso (~smeso@user/smeso)
[06:51:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:53:16] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[06:53:49] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[06:54:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[07:01:14] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:11:07] *** Joins: adeliktas0 (~adeliktas@i59f527d7.versanet.de)
[07:13:24] *** Quits: adeliktas (~adeliktas@i59F52712.versanet.de) (Ping timeout: 250 seconds)
[07:13:24] *** adeliktas0 is now known as adeliktas
[07:23:43] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[07:39:02] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[07:41:01] *** Quits: mintograde (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[07:42:19] *** Joins: mintograde (~mintograd@47.201.5.61)
[07:42:26] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[07:43:48] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:47:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:51:49] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:55:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:59:48] *** Joins: k8yun (~k8yun@user/k8yun)
[08:02:52] *** Joins: callq (~callq@157.41.137.81)
[08:10:56] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[08:25:46] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 250 seconds)
[08:31:57] *** Joins: emerent_ (~quassel@p200300cd5743c3ebba27ebfffed28a59.dip0.t-ipconnect.de)
[08:31:57] *** Quits: emerent (~quassel@p200300cd5743c36fba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (zinc.libera.chat (Nickname regained by services)))
[08:31:57] *** emerent_ is now known as emerent
[08:32:13] *** Quits: MetaNova (~zero-one@znc/supporter/metanova) (Quit: quit)
[08:37:13] *** Joins: MetaNova (~zero-one@znc/supporter/metanova)
[08:52:33] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:53:36] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[08:56:06] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[08:58:56] *** Joins: johnny (~johnny@user/johnny)
[09:01:38] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[09:08:52] *** gentooclimax is now known as climax
[09:14:56] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:16:15] *** climax is now known as gentooclimax
[09:17:42] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[09:23:21] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[09:23:40] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[09:26:16] *** gentooclimax is now known as climax
[09:27:56] *** climax is now known as gentooclimax
[09:37:56] *** gentooclimax is now known as climax
[09:43:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:44:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:44:06] *** ChanServ sets mode: +v npaperbot
[09:45:43] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[09:47:16] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:50:36] *** peeps[zen] is now known as peepsalot
[09:50:55] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[09:53:14] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:53:18] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Ping timeout: 250 seconds)
[09:56:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:05:47] *** Joins: k8yun (~k8yun@user/k8yun)
[10:11:44] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:12:33] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[10:15:49] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[10:24:05] *** Joins: xkuru (~xkuru@user/xkuru)
[10:27:40] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[10:31:47] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[10:32:53] *** Joins: nq (~nq@2a02:2f08:e015:a900:996:d873:2110:d8d4)
[10:36:04] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:39:34] *** Joins: JohnMS_AWAY (~kvirc@194.110.240.100)
[10:40:09] *** Joins: p-i- (~Ohmu@2403:6200:8978:9086:e8a3:2cbd:7ed9:8d88)
[10:50:02] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:a098:ee07:c9e8:a17a) (Quit: Client closed)
[10:50:49] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[10:51:26] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Remote host closed the connection)
[10:53:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:54:42] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[10:55:51] *** Joins: manjaro-user (~manjaro-u@199-7-159-115.eng.wind.ca)
[10:57:18] *** Quits: Kerr (~Kerr@2601:602:ce80:df10::b76e) (Quit: Client closed)
[10:57:30] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[10:57:38] *** Joins: Kerr (~Kerr@2601:602:ce80:df10::b76e)
[10:57:56] *** Quits: Kerr (~Kerr@2601:602:ce80:df10::b76e) (Client Quit)
[10:58:04] *** Joins: Kerr_ (~quassel@2601:602:ce80:df10::b76e)
[10:58:27] *** Quits: Kerr_ (~quassel@2601:602:ce80:df10::b76e) (Client Quit)
[10:58:45] *** Joins: Kerr (~quassel@2601:602:ce80:df10::b76e)
[11:00:25] *** climax is now known as gentooclimax
[11:00:59] *** Joins: andreasbuhr (~quassel@p549db611.dip0.t-ipconnect.de)
[11:07:28] *** Joins: x_kuru (~xkuru@user/xkuru)
[11:07:57] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:09:32] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[11:10:02] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[11:12:20] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[11:12:53] *** Joins: xkuru (~xkuru@user/xkuru)
[11:13:57] *** Joins: x_kuru (~xkuru@user/xkuru)
[11:15:00] *** Joins: DSpider (~DSpider@82.79.237.117)
[11:15:06] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[11:15:06] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[11:15:44] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[11:15:57] *** Quits: foul_owl (~kerry@23.82.193.89) (Ping timeout: 240 seconds)
[11:17:51] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[11:18:26] *** Joins: xkuru (~xkuru@user/xkuru)
[11:18:57] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[11:19:43] *** Joins: x_kuru (~xkuru@user/xkuru)
[11:20:23] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 268 seconds)
[11:20:55] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[11:23:26] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[11:24:18] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[11:24:29] *** Joins: xkuru (~xkuru@user/xkuru)
[11:25:36] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[11:26:22] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[11:29:38] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 268 seconds)
[11:31:35] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[11:31:38] *** Joins: foul_owl (~kerry@23.82.193.89)
[11:34:15] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9086:d00f:f2c2:bf2c:7c2b)
[11:35:24] *** Quits: p-i- (~Ohmu@2403:6200:8978:9086:e8a3:2cbd:7ed9:8d88) (Ping timeout: 240 seconds)
[11:37:24] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[11:37:40] *** Joins: p-i- (~Ohmu@2403:6200:8978:9086:f1b7:e70:337:d2ba)
[11:40:17] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:40:32] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9086:d00f:f2c2:bf2c:7c2b) (Ping timeout: 240 seconds)
[11:42:17] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[11:42:36] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[11:45:00] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[11:45:03] *** Joins: epony (epony@user/epony)
[11:48:06] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:6457:bfc9:b18d:cf5)
[11:51:25] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[11:54:13] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[11:54:22] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9086:d156:14d4:fe1b:90bd)
[11:54:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:55:18] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:ed8e:eff0:febb:d703)
[11:57:02] *** Quits: p-i- (~Ohmu@2403:6200:8978:9086:f1b7:e70:337:d2ba) (Ping timeout: 240 seconds)
[11:58:07] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:58:46] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[12:00:47] *** Joins: Miyu (~hackkitte@94.31.104.136)
[12:02:55] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:03:07] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[12:03:28] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 272 seconds)
[12:03:58] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[12:08:23] <LordKalma> !rq
[12:08:24] <nolyc> LordKalma: <xkoncek> so basically CSV is the Json of SQL?
[12:08:49] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:09:38] *** Joins: paul424 (~tom@ip-5-172-236-119.multi.internet.cyfrowypolsat.pl)
[12:10:07] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[12:11:32] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9086:d156:14d4:fe1b:90bd) (Remote host closed the connection)
[12:12:04] *** Joins: p-i- (~Ohmu@2403:6200:8978:9086:d456:def0:f1eb:7e7c)
[12:14:45] *** Quits: kurfen (~kurfen@213.152.188.7) (Ping timeout: 250 seconds)
[12:14:51] *** Joins: kurfen_ (~kurfen@176.119.195.9)
[12:17:33] *** JohnMS_AWAY is now known as JohnMS_WORK
[12:18:03] *** Miyu is now known as hackkitten
[12:24:30] *** Joins: robod34 (~Username@79.113.243.73)
[12:29:05] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[12:34:17] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[12:36:20] *** Quits: malloy (~jimery@120.235.172.170) (Ping timeout: 265 seconds)
[12:37:18] *** gentooclimax is now known as climax
[12:37:22] *** Joins: msk (~msk@103.213.213.65)
[12:40:48] <Furai> As someone who haven't used many build tools like make or whatever - what is the current go to for modern development? CMake? Meson? Anything else? Since I don't have any experiences with it I want to learn something considered industry standard right now. What do you guys use mostly?
[12:41:44] *** Joins: malloy (~jimery@120.235.172.170)
[12:48:11] *** climax is now known as gentooclimax
[12:48:48] <TinoDidriksen> CMake is by far the most popular and widely supported.
[12:48:58] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:49:06] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Ping timeout: 245 seconds)
[12:51:16] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[12:51:54] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[12:53:22] *** Joins: Miyu (~hackkitte@94.31.104.136)
[12:54:06] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 252 seconds)
[12:55:20] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:56:04] *** Miyu is now known as hackkitten
[12:56:36] *** Quits: EdFletcher (~PKD@user/edfletcher) (Ping timeout: 250 seconds)
[12:57:46] *** Joins: undephin3d (~undephin3@158.181.75.126)
[12:58:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[12:59:11] <LordKalma> unless you ask fiesh :p
[12:59:13] <LordKalma> but yeah, cmake :)
[13:10:45] <TinoDidriksen> There's plenty of personal preference, but fact is that CMake is by a large margin the current leader.
[13:11:30] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:02] <LordKalma> indeed
[13:13:26] <ville> cmake certainly has the loudest teenagers
[13:14:34] <Haohmaru> !grab ville
[13:14:34] <nolyc> Haohmaru: The operation succeeded.
[13:21:49] *** gentooclimax is now known as climax
[13:25:53] *** Joins: xkuru (~xkuru@user/xkuru)
[13:26:18] *** climax is now known as gentooclimax
[13:29:57] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[13:31:55] <very_sneaky> i hear a lot of good things about meson too, but yeah cmake
[13:36:19] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:41:22] <LordKalma> it's like everything else in the world
[13:41:35] <LordKalma> you look at all the sexy girls, but you want the reliable one
[13:42:08] <LordKalma> girls/boys/non-binary/everything-else-that-floats-your-boat :)
[13:43:10] <LordKalma> Anyway
[13:43:17] <LordKalma> starting the day ranting about conan: https://github.com/conan-io/conan/issues/10805
[13:43:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:44:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:44:08] *** ChanServ sets mode: +v npaperbot
[13:45:00] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[13:45:14] <Haohmaru> so did you just say cmake is ugly?
[13:45:41] <TinoDidriksen> It is rather ugly.
[13:45:56] <TinoDidriksen> Nobody is saying CMake is good, just that it's the least bad.
[13:46:00] <LordKalma> cmake-lang is like the worst scripting language anyone ever came up with
[13:46:04] *** Joins: Guest94 (~Guest94@lputeaux-658-1-19-240.w193-252.abo.wanadoo.fr)
[13:46:12] <LordKalma> but it's a nice _tool_ :) and the de-facto standard
[13:47:16] <LordKalma> also, for some reason, the vcpkg crew decided it was a sane decision to write vcpkg "recipes" in cmake
[13:47:36] *** Quits: Guest94 (~Guest94@lputeaux-658-1-19-240.w193-252.abo.wanadoo.fr) (Client Quit)
[13:50:31] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[13:50:55] *** Joins: ville (~ville@user/ville)
[13:51:43] <very_sneaky> LordKalma: i think the issue title could be a bit clearer if you specified "for upstream dependencies"
[13:55:40] <LordKalma> I'm not inspired today
[13:55:44] <LordKalma> and that's not going anywhere anyway
[13:56:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:57:20] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[13:58:56] <LordKalma> honestly, the "right" answer for that would honestly to have a directory in the project with custom conan recipes
[13:59:05] <LordKalma> and orchestrate "conan create" with a super-build
[13:59:26] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[14:02:18] <very_sneaky> ehhhhh.. idk about that
[14:02:34] <very_sneaky> that breaks encapsulation i think
[14:03:00] <LordKalma> welcome to the hell dependencies are :)
[14:03:03] <very_sneaky> maybe in the `requires()` call you can set env vars for the upstream build
[14:03:25] <LordKalma> you can't becayse they aren't considered in the package ID and the only way to pass them in is with profiles anyway
[14:03:31] <LordKalma> Conan just doesn't support this workflow
[14:03:48] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[14:03:49] <very_sneaky> i.e. `requires("openssl/1.1.1l", env={"CXXFLAGS": ["-ffast-math"]})
[14:04:03] <LordKalma> if you want to use a dependency out-of-the-box, it's fine. Anything clever is out of the table
[14:04:40] <LordKalma> very_sneaky, that would require having the env part of the package ID, which 1) isn't implemented, 2) it's not easy to implement, 3) would be shit
[14:04:50] <LordKalma> 3) because you don't want for example PATH to change your package ID
[14:05:02] <LordKalma> only like C[XX]FLAGS and the linker equivalents
[14:05:05] <very_sneaky> i think the 90% solution would just be what i have above with package ID on the unique key/pair values
[14:05:20] <LordKalma> probably
[14:05:40] <very_sneaky> it wouldn't be perfect, because you'd get package id changing on anything
[14:05:41] <LordKalma> ooor have all CCI recipes have an "extra_cxx_flags" option haha
[14:06:02] <very_sneaky> but maybe better than nothing, and obviously opt in - package id changing is just a convenience thing
[14:06:18] <very_sneaky> yeah, that would be an option too
[14:06:22] <LordKalma> that's what I'm saying. you need to be sane and stable. You don't want to have to rebuild on every single thing
[14:06:26] <very_sneaky> defaulted field
[14:06:34] <very_sneaky> LordKalma: you wouldn't _have_ to
[14:06:39] <very_sneaky> it would be opt in
[14:07:02] <LordKalma> oh the other hand, it can also be dangerous
[14:07:19] <LordKalma> I'm not sure what CMake does when you pass both -DCMAKE_CXX_FLAGS and have CXXFLAGS defined
[14:07:43] <LordKalma> because with a "extra_cxx_flags" option you'd do the former and would that invalidate the latter, thus invalidating your profile?
[14:08:28] <very_sneaky> still, a net win - you wouldn't be introducing any additional complexity
[14:08:33] <LordKalma> "For any configuration run ( including the first), the environment variable will be ignored if the CMAKE_CXX_FLAGS variable is defined." https://cmake.org/cmake/help/latest/envvar/CXXFLAGS.html
[14:08:35] <LordKalma> as expected
[14:08:50] <LordKalma> very_sneaky, but it doesn't comply very well with the principle of least surprise, I'd say
[14:09:07] <very_sneaky> maybe, you could do some validation
[14:09:14] <LordKalma> https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_FLAGS_INIT.html#variable:CMAKE_%3CLANG%3E_FLAGS_INIT
[14:09:19] <very_sneaky> i'm not proposing this as the best sollution
[14:09:20] <LordKalma> this could be cool tough
[14:09:27] <very_sneaky> just one that would get us most of the way there
[14:09:40] <LordKalma> CMAKE_<LANG>_FLAGS_INIT joins itself with the env variable
[14:09:51] <LordKalma> so that's a solution for cmake-based recipes, hum...
[14:11:03] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:6457:bfc9:b18d:cf5) (Ping timeout: 256 seconds)
[14:11:19] <LordKalma> very_sneaky, if you want to do the TLDR of this dicussion in https://github.com/conan-io/conan/issues/10805 I'd appreciate it
[14:12:02] <LordKalma> I'm tempted to just copy-paste it
[14:12:31] <LordKalma> you'd be okay with that?
[14:13:38] *** gentooclimax is now known as climax
[14:17:52] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9086:d6f:655c:b421:bc62)
[14:19:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:9086:d456:def0:f1eb:7e7c) (Ping timeout: 240 seconds)
[14:19:19] <LordKalma> Yesterday I spoke about the ETL. So beautiful when things have sane systems: https://github.com/conan-io/conan-center-index/blob/master/recipes/etl/all/conanfile.py
[14:24:13] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[14:24:58] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[14:31:15] <fiesh> so we have a function hardcodedStuff() { return std::vector{S{...}, S{...}, ...}; }.. it used to be a array, but that led to stack overflows with the windows binary.  but now even this function leads to stack overflows there thanks to the puny stack size there.  any recommendations how to improve this without something cumbersome like including a serialization and deserializing?
[14:33:51] <LordKalma> is S{...} creating temporaries and calling move constructors?
[14:34:02] <LordKalma> (because how would it otherwise cause a stack overflow?!)
[14:34:21] <fiesh> it's a struct without any user defined constructors
[14:34:32] <LordKalma> doesn't invalidade what I said
[14:34:42] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[14:34:44] <fiesh> I have no idea why it does, didn't look into the assembly, but it does...
[14:34:53] <fiesh> it does call std::string's ctor from a c style string
[14:35:03] <LordKalma> so maybe create the vector first and then call emplace_back a lot? hahah
[14:35:09] <ville> increase your stacksize?
[14:35:09] <fiesh> (basically, all members of S are int, double, or std::string)
[14:35:28] <very_sneaky> LordKalma: yeah, copy paste away
[14:35:38] <fiesh> ville: already increased to 8mb
[14:36:00] <fiesh> ville: feel reluctant about increasing more, but maybe I should give it a shot
[14:36:40] <LordKalma> honestly, all of this should have been constexpr'able
[14:36:50] <LordKalma> call Jason Turner, he'll solve it :D
[14:37:29] <very_sneaky> i hear he's available for consulting
[14:37:31] <fiesh> yeah S could be constexpr if std::string_view was used, but S is also used as runtime type where std::string is correct, and having two separate types would be annoying
[14:38:53] <LordKalma> std::string doesn't have constexpr constructors in C++20?
[14:39:04] <fiesh> let's see if -Wl,-z,stack-size=16777216 resolves the issue...
[14:39:21] <LordKalma> QStringLiteral is a macro that shoves its data into .text and any QStrings from it are free. I wonder how they do it
[14:39:29] <fiesh> idk, stuck with c++17 due to annoying issues with boost.log... I need to remove boost.log entirely at some point
[14:39:54] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[14:39:59] <LordKalma> https://www.qt.io/blog/desktop-and-mobile-are-in-the-dna-of-qt "We're still a desktop framework, we promiseeeeeee" :D
[14:40:04] <LordKalma> (nice to see, honestly)
[14:40:13] <fiesh> aha, I think the stack size option doesn't work as such with lld, so maybe that's related... so let's try ld.bfd
[14:41:21] <ville> a .def file could be used to set the process stack size?
[14:41:54] <fiesh> .def file?  we're using mingw to produce the binaries, is that some windows special stuff?
[14:42:24] <ville> "To specify a different default stack reservation size for all threads and fibers, use the STACKSIZE statement in the module definition (.def) file."
[14:42:31] <ville> https://docs.microsoft.com/en-us/windows/win32/procthread/thread-stack-size
[14:42:33] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[14:43:47] <fiesh> no idea what a "module definition file" is... ;)
[14:44:16] <ville> msdn surely tells you
[14:44:21] <LordKalma> .def files are how msvc does dlls (as far as I care)
[14:45:11] <fiesh> doesn't really clarify, but I guess searching for mingw with it might help, thanks for the pointer
[14:45:15] <ville> but you can request different stacksize at runtime as well with https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadstackguarantee ?
[14:46:13] <fiesh> I suppose this would require position independent code?  at least can't imagine how it would work otherwise
[14:46:51] <ville> ok that function is possibly not it
[14:47:02] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[14:47:09] *** Quits: paul424 (~tom@ip-5-172-236-119.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[14:47:46] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[14:48:59] <xkoncek> why does bitset::to_ulong have to be possibly throwing?
[14:49:08] <ville> if you're using pthreads you could call theirs?
[14:50:26] <ville> xkoncek: it can be wider than an ulong?
[14:50:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:50:54] <xkoncek> but that's known at compile time
[14:51:25] <ville> it does it based on the value
[14:51:53] <ville> if your N is wider than ulong but all 0s it won't throw
[14:52:20] <PJBoy> as demonstrated in the cppref example >_>
[14:53:06] <ville> xkoncek: as for the original question: it desn't have to. choices were made
[14:53:14] <xkoncek> i get it, but i wonder if optimizers are able to truly zero-cost a biset<8> to pure bit manipulation
[14:53:52] <ville> xkoncek: time to compare assembly then
[14:54:03] <TinoDidriksen> The stdlib is allowed to specialize for certain N, so they could optimize for you.
[14:54:10] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[14:54:10] <xkoncek> once again, the functions in <bit> only work with unsigned integers
[14:54:34] <ville> yes that's reasonable
[14:56:18] *** Joins: Roughy (~mdaw45ns@user/roughy)
[14:56:20] <ville> LordKalma: do which part?
[14:56:44] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:56:45] <ville> LordKalma: aren't qt types still cows?
[14:56:47] <LordKalma> very_sneaky, oh wow: https://github.com/conan-io/conan/issues/10805#issuecomment-1070812009
[14:57:17] <Haohmaru> "Desktop and Mobile have always been in our core's very essence" ... "the Qt framework first became publicly available in May 1995"
[14:57:41] <Haohmaru> LordKalma so, are you saying they knew about smartphones back in 1995?
[14:57:41] <LordKalma> Qt is literally one day younger than myself
[14:58:02] <ville> LordKalma: so they could make the qstring created from a string literal be in a state where it thinks it's "sharing" the buffer. so soon as you do a write operation you copy
[14:58:08] <LordKalma> ville, QStringLiteral
[14:58:14] <LordKalma> I know they work with CoW
[14:58:17] <very_sneaky> LordKalma: i'm really impressed with james - he's so quick to respond to basically everything i put up
[14:58:31] <PJBoy> stdlib wouldn't even need to specialise bitset, it could `if constexpr (N < sizeof(unsigned long) * CHAR_BIT) { return non_throwing(); } else { return throwing(); }`
[14:58:35] <very_sneaky> everything you want in a maintainer
[14:58:38] <LordKalma> what I wonder is really how do you make a macro/function that stores things in .txt
[14:59:17] <xkoncek> PJBoy could, but i was inspecting gnu's libstdc++ and they don't seem to bother with it too much
[14:59:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[15:00:19] <xkoncek> found this comment in <bitset>:
[15:00:32] <xkoncek> / Are all empty bitsets equal to each other?  Are they equal to
[15:00:32] <xkoncek> / themselves?  How to compare a thing which has no state?  What is
[15:00:32] <xkoncek> / the sound of one zero-length bitset clapping?
[15:00:35] <LordKalma> "The [conf] has possibility to target per-package if desired like <pkg-pattern>:tools.build:cxxflags=value" // This is literally what I wanted
[15:00:38] <PJBoy> although specialisation would be needed to make to_ulong() noexcept for small N
[15:00:41] <LordKalma> Conan is becoming better by the day
[15:01:13] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[15:02:08] <xkoncek> well, they do specialize a bitset of size of one word
[15:02:25] <ville> LordKalma: it just returns some funny data type that the qstring then knows to set it self in shared-buffer state from?
[15:03:08] <ville> LordKalma: overloading picks the right ctor and so on
[15:03:46] <ville> LordKalma: the compiler aleady puts the string literal into read-only
[15:04:43] <ville> Haohmaru: everyone knew about smart phones in 1995
[15:04:52] <Haohmaru> really?
[15:04:59] <ville> Haohmaru: smart phones have been mainstay of sci-fi since 50s or 60s
[15:05:37] <Haohmaru> i need a delorean.. to go back and undo some things..
[15:06:15] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 256 seconds)
[15:07:06] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[15:07:16] <Haohmaru> i also wasn't informed about that in 1995
[15:09:14] <LordKalma> I was just shitting myself
[15:10:01] <Haohmaru> in 1995 i guess i was listening to The Prodigy on a Compact Cassette
[15:10:14] <ville> smartphone as a device is just waiting for a general purpose computing device to be miniaturized to some form factor.
[15:11:25] <ville> it's not exactly something you have to innovate. you can innovate things such as the actual processes how its components are miniaturized.
[15:12:19] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[15:12:30] <LordKalma> I remember seeing win xp tablets and I have used a PDA when I was a teenager (given to me by an experimental project about the usage of PDAs in school environment)
[15:12:38] <Haohmaru> they are miniaturized by yelling at the engineers and scientists harder "I DON'T CARE THAT YOU HAVEN'T SEEN YOUR FAMILY FOR 2 YEARS, MAKE IT SMALLER!"
[15:12:54] <LordKalma> TSMC will solve it :)
[15:13:40] <LordKalma> honestly, I've had clean room training and photolitography training and I tell you, it amazes me how anything gets done
[15:14:01] <Haohmaru> with laz0rz
[15:14:11] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[15:14:30] <LordKalma> haha in the sense of how hard it is to work on such environments
[15:14:43] <LordKalma> speckles of dust ruin thousands of dollars worth of wafer :)
[15:14:56] <xkoncek> Haohmaru also, A Space Odyssey predicted the dimensions of modern screens
[15:15:10] <Haohmaru> what dimmensions?
[15:15:21] <Haohmaru> do you mean the uberHD madness?
[15:15:31] <LordKalma> 19:2? hahaha
[15:15:39] <xkoncek> the monolith was 16 / 9 / 4 i believe or 16 / 9 / 1
[15:16:08] <ville> yes. the processes are very impressive. and that's where you had actual innovation happening. how to make the manufacturing yield anyting of value
[15:16:17] <Haohmaru> uhm, i don't think that's the reason for the 16:9 aspect ratio
[15:16:47] <xkoncek> no, i made it up, it was 1 / 4 / 9
[15:17:17] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[15:17:26] <Haohmaru> ville by yelling at the employees ;P~
[15:17:34] <Haohmaru> yelling solves everything
[15:17:58] <PJBoy> not the problem of it being too loud
[15:18:03] <LordKalma> I'm not sure how things are in Taiwan but probably not _that_ bad
[15:18:22] <LordKalma> but your acoustic waves incur the risk of shaking the wafer too much
[15:19:06] <PJBoy> think your footsteps would cause more shaking
[15:19:17] <ville> the platforms are isolated
[15:19:20] <Haohmaru> or a catastrophic fart
[15:19:23] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[15:20:02] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[15:20:34] <LordKalma> in optics we use floating tables a lot
[15:20:46] <LordKalma> basically massive legs that are air pressurized
[15:20:48] <LordKalma> pretty cool
[15:20:56] <LordKalma> a table costs like 5k€
[15:21:08] <PJBoy> ok that's nuts
[15:21:38] <LordKalma> the table top is guaranteed to be flat up to some % and it's made of steel with holes every 25mm or 1in depending whether it's metric or imperial
[15:21:46] <LordKalma> and a thick honecomb material for stability
[15:22:10] <LordKalma> https://www.newport.com/g/optical-tables
[15:23:30] <PJBoy> I want a floating beanbag chair
[15:24:08] * Haohmaru gives PJBoy 4 floating points for a foundation
[15:24:43] <LordKalma> https://www.thorlabs.com/newgrouppage9.cfm?objectgroup_id=5930
[15:24:48] <LordKalma> they are more expensive than I reembered
[15:26:37] <LordKalma> honestly, they are extremely annoying to work with then they are pressured
[15:26:51] <LordKalma> *pressurized?
[15:28:06] <ville> yes
[15:28:50] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:29:43] <LordKalma> imagine working on a table you can't even lean on.. it's very annoying. What everybody does it only pressurize them when they *really* need to. a 500+kg chunk of table is already pretty stable for most things
[15:29:57] <LordKalma> (yeah, they weight half a ton or more)
[15:30:45] *** Joins: JohnMS_AWAY (~kvirc@194.110.240.100)
[15:30:58] <PJBoy> dang that's some serious air pressure
[15:32:23] <PJBoy> imagine the power goes out and that thing falls on your foot
[15:34:01] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 256 seconds)
[15:35:15] *** Quits: proller (~p@2a02:6b8:b081:b503::1:24) (Ping timeout: 252 seconds)
[15:35:44] <LordKalma> nah, the pistons have like 5cm of travel, you can have the table resting on the legs safely
[15:35:49] <LordKalma> which, as I said, we mostly do anyway
[15:36:37] <LordKalma> and power loss doesn't mean instant depressurization, it just means no more pressure. the table would just slowly float to the rest position with leaks or whenever it discharges while adjusting
[15:36:56] <LordKalma> and even if you do just open the valve, it still slowly goes to rest on the legs
[15:37:12] <PJBoy> oh right, that makes sense
[15:37:16] <LordKalma> byt anyway, we digress. the whole point was to give you an example of the kind of tech we do use to get things stable
[15:37:46] <PJBoy> just so we can write terrible terrible software
[15:38:04] <PJBoy> where we're so lazy we use embedded browsers
[15:38:17] <PJBoy> with highly questionable error checking
[15:44:13] <very_sneaky> would you guys abandon a work programme you're attached to for a $30k pay bump?
[15:44:26] <very_sneaky> like, you're part way through it and want to see it through to the end
[15:44:33] <very_sneaky> and you know if you leave it will die
[15:44:39] *** Joins: SorryBeauty (~SorryBeau@103.25.241.104)
[15:44:56] <LordKalma> fuck that, get the money
[15:45:29] <very_sneaky> lol
[15:45:36] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[15:45:49] <PJBoy> not sure
[15:45:53] <PJBoy> probably
[15:46:06] <PJBoy> I've never been attached to a work programme before
[15:46:19] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[15:46:29] <PJBoy> if work could give me a project I feel attached to, that would be worth money to me
[15:46:34] <very_sneaky> you've never been invested in the outcomes?
[15:46:45] <PJBoy> nah our software sucks
[15:46:51] <PJBoy> I just pray that it doesn't blow up
[15:47:10] <very_sneaky> i mean that kind of matches my situation - our tooling sucks and i'm transitioning us to conan lel
[15:47:14] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[15:47:28] <PJBoy> but then it depends on how expensive your life is and whatnot
[15:48:04] <PJBoy> after meeting the threshold of "living comfortably", I would be less likely to take the money/happiness tradeoff
[15:48:25] <very_sneaky> it hadn't even occurred to me that some of you might work in SV and be on big $ with fancy mansions
[15:48:34] <very_sneaky> and huge life expenses
[15:48:57] <PJBoy> working 10 hour days, high stress >_>
[15:49:07] <very_sneaky> is that all
[15:49:09] <PJBoy> don't think any of us IRC frequenters fit that build
[15:49:36] <very_sneaky> the SV build?
[15:49:47] <PJBoy> yeah
[15:50:22] <very_sneaky> idk, from what i've read it's actually pretty slow
[15:50:33] <very_sneaky> the bigger organisations get the more cruft and beauracracy there is
[15:51:15] <PJBoy> I worked at HP for a couple years, and man, those big organisation structures can be pretty comfy
[15:51:39] <very_sneaky> i bet
[15:52:01] <PJBoy> especially when you aren't personally invested in the success of your product
[15:52:05] <PJBoy> which I would never advise being
[15:52:15] <very_sneaky> don't the stock options do that?
[15:52:32] <PJBoy> meh
[15:52:42] <PJBoy> when has software quality ever affected its market value
[15:52:54] <very_sneaky> you don't want to be invested in your work?
[15:53:06] <PJBoy> nah, that makes life too painful
[15:53:24] <very_sneaky> interesting take. i'd rather feel like what i do has impact than not
[15:53:26] <PJBoy> imagine working with 50 other devs that just hack code and being invested in your work
[15:53:28] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[15:53:32] <PJBoy> you'd wanna kill yourself
[15:53:53] *** Joins: kevr (~kevr@user/kevr)
[15:53:56] <very_sneaky> lol, i'd see that as an opportunity
[15:53:58] <PJBoy> having to make all these time/quality tradeoffs for business interest
[15:54:10] <PJBoy> doesn't make any sense to be passionate about that
[15:54:24] <very_sneaky> i agree with that - business interest is rarely a good motivator
[15:55:07] <PJBoy> if you were a project lead, then I could see you having a vested interest
[15:55:12] <TinoDidriksen> ... #C++-social
[15:55:15] <PJBoy> or you worked in a real small company
[15:55:35] <PJBoy> right >_>;
[15:56:12] <very_sneaky> pj isn't in social
[15:57:08] <PJBoy> not being in social is my preventative measure for not getting distracted by being sociable
[15:57:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:57:32] <very_sneaky> fair. that's why i don't buy chocolate when i do groceries
[15:58:35] <Haohmaru> because chocolate makes you more social?
[15:58:52] <very_sneaky> it's the glue that connects society
[15:59:05] <very_sneaky> people glued together by chocolate
[16:01:13] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:06:36] *** Quits: manjaro-user (~manjaro-u@199-7-159-115.eng.wind.ca) (Ping timeout: 252 seconds)
[16:14:10] <rpav> anyone used a decent C++ parser generator
[16:15:53] *** Quits: JohnMS_AWAY (~kvirc@194.110.240.100) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[16:17:29] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[16:24:06] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[16:24:33] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[16:27:42] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[16:39:32] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[16:44:01] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[16:45:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:46:33] *** Joins: CodePoint (~jonathan@50-192-38-69-static.hfc.comcastbusiness.net)
[16:47:24] *** Joins: malloy (~jimery@120.235.172.170)
[16:51:52] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[16:51:58] *** Joins: darkbit (~db@136.158.8.67)
[16:53:25] <rpav> https://github.com/peter-winter/ctpg .. you can tell it's good when the simple example given causes internal compiler errors
[16:54:25] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b461:63e9:52c:68dc)
[16:58:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:00:52] <PJBoy> ahaha
[17:01:21] *** Joins: Alipha (~AliphaX@user/alipha)
[17:01:22] <PJBoy> I don't trust someone that writes std::endl to make a good C++ parser
[17:01:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:01:38] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[17:02:17] <PJBoy> and overloading >= for non comparison, that may or may not interact poorly with spaceship operator
[17:02:59] <rpav> shouldn't
[17:03:37] <rpav> like if you're using comparison operators for non-comparing things, then you won't be implementing <=>
[17:06:27] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b461:63e9:52c:68dc) (Remote host closed the connection)
[17:06:50] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[17:06:50] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd)
[17:08:52] <PJBoy> yeah should be fine
[17:09:42] <PJBoy> I was a little worried there might be some tricks like the compiler rewriting `a < b` as `!(b >= a)`
[17:09:42] <rpav> probably shouldn't use comparison overload for non-comparison things for general operators of course, e.g. "i expect users to overload this for functionality"
[17:10:10] <rpav> though even still imagine `cout << 1 << 2;`
[17:10:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[17:11:50] *** Quits: CodePoint (~jonathan@50-192-38-69-static.hfc.comcastbusiness.net) (Ping timeout: 250 seconds)
[17:12:52] <PJBoy> I'm a little forgiving of operator<< being used for non bitshift
[17:13:25] <rpav> only becuase it's been ingrained for like 40 years
[17:14:04] <rpav> the _first_ objection everyone has to `x | y | z` is "but doesn't that conflict with bitwise operations"
[17:14:15] <rpav> not even considering `cout << 1 << 2;`
[17:17:16] <PJBoy> heh
[17:17:29] <PJBoy> the bitwise ops in general I'm ok with overloading
[17:17:39] <PJBoy> because they're only valid as bitwise ops with integer types
[17:17:49] <PJBoy> it's not like the relational operators that are generic
[17:18:21] <PJBoy> the weird part for me is that you have to put up with those operators' precedence
[17:18:30] <PJBoy> but their precedence only makes sense as bitwise operators
[17:20:18] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[17:21:36] <rpav> https://github.com/jwtowner/lug <- this seems to work pretty well so far
[17:22:11] <rpav> lacking some documentation
[17:23:09] <PJBoy> any particular reason to parse C++?
[17:23:18] <rpav> i'm not parsing C++
[17:24:01] <PJBoy> any reason to make a parser generator?
[17:24:04] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:24:12] <rpav> becuase it's nicer than hand-rolling a parser
[17:24:34] <PJBoy> that part makes sense
[17:25:02] <PJBoy> oh I see hahaha
[17:25:25] <LordKalma> what's a parser generator?
[17:25:34] <rpav> code that generates a parser given a grammar
[17:25:56] <rpav> if you need some custom parsing it's really the nicest way to go
[17:26:26] <PJBoy> like ply.tacc
[17:26:30] <PJBoy> *ply.yacc
[17:28:43] <PJBoy> even when you said "C++ parser generator" I was thinking "a generator for parsing C++, like variants of?"
[17:28:55] <PJBoy> took me too long to realise you meant a parser generator written in C++
[17:29:42] *** Joins: pulse (~pulse@user/pulse)
[17:31:40] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:41:33] *** Quits: nq (~nq@2a02:2f08:e015:a900:996:d873:2110:d8d4) (Quit: Leaving)
[17:43:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:44:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:44:07] *** ChanServ sets mode: +v npaperbot
[17:58:48] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:59:56] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[18:01:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[18:02:58] *** Quits: callq (~callq@157.41.137.81) (Ping timeout: 250 seconds)
[18:03:21] <xkoncek> due to my muscle memory, i write "contains" as "constains"
[18:03:38] <LordKalma> the matrix folks have a server that's not the dumpsterfire that's synapse, interesting
[18:03:45] <LordKalma> "dendrite" written in Go, still in beta
[18:04:19] <Haohmaru> constainspr
[18:10:09] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[18:10:13] <Alipha> sighs. my internet was out for like 15 hours. time to read the backlog!
[18:11:32] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[18:13:35] <rpav> 15 hours D:
[18:13:54] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd) (Quit: Konversation terminated!)
[18:14:17] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd)
[18:14:38] <Haohmaru> R.I.P. Alipha's brain
[18:14:57] <mort> is there a way to make brace init lists work properly with perfect forwarding
[18:15:42] <mort> Foo takes a Vec2, Foo({10, 20}) works but make_unique<Foo>({10, 20}) doesn't
[18:19:20] <Alipha> mort: no :-(
[18:19:42] <mort> :(
[18:19:44] <PJBoy> it's one of the things that's imperfect about it
[18:19:59] <PJBoy> !perfect
[18:20:01] <nolyc> The C++11 forwarding idiom (which uses a variadic template and std::forward) is not quite perfect, because the following cannot be forwarded transparently: initializer lists, 0 as a null pointer, addresses of function templates or overloaded functions, rvalue uses of definition-less static constants, and access control.
[18:21:34] <mort> are there any proposals in the works to rectify any of that?
[18:22:26] <rpav> need to deprecate braced init lists and have tuple literal syntax
[18:24:12] <rpav> `t(10, 20) | make_unique<Foo>`
[18:25:37] <Alipha> it would be cool if {10, 20, 3.5} would automatically convert to a std::tuple<int, int, double>
[18:25:42] <rpav> yes
[18:26:03] <rpav> i wonder if doing so could be made backward-compatible
[18:26:44] <LordKalma> it would also be cool it structured bindings worked recursively
[18:26:46] <LordKalma> we can't have nice things
[18:26:58] <rpav> and you could ignore some of them or grab some by name
[18:27:14] <Alipha> and assign to existing variables instead of having to create new variables
[18:27:38] <rpav> struct P { float x, y, z; };  P p; auto [y: y, z] = p;
[18:28:09] <rpav> Alipha: even that ought to be unambiguously possible and not particularly difficult
[18:28:40] <rpav> like if you can already create a binding, you can also make a "hidden" binding and then have `x = y` assignment
[18:29:33] <rpav> though there would be some question about shadowing .. probably not much, because breaking that would likely be bad
[18:29:42] <Alipha> then you can just have a global `struct ignore_binding { template<typename T> ignore_binding(T&&) {} } _;` and do `[_, y, z] = p;`
[18:31:09] <rpav> yeah and that should work basically everywhere heh
[18:31:19] <rpav> well
[18:31:34] <rpav> Alipha: see that's the problem with shadowing .. right now shadowing happens, so you'd have to break it for that to work
[18:32:00] <Alipha> yeah :-(
[18:32:09] <rpav> if you introduce named assignment syntax you could not have explicit skipping be necessary
[18:32:29] <rpav> `auto [y: y, z] = ...` skips to `y`
[18:32:57] <Alipha> `auto [&_, y, z] = p;`  prefixing with & means to refer to an existing variable ;-)
[18:33:14] <rpav> `auto [inline _, y, z] = p;`
[18:33:26] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[18:33:43] <ville> 8;9u8;9u
[18:33:50] <rpav> since inline is "may be defined more than once"
[18:36:56] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[18:37:32] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[18:38:02] *** Joins: Roughy (~mdaw45ns@user/roughy)
[18:38:22] *** Joins: slavfox (~slavfox@93.158.232.111)
[18:38:56] <PJBoy> mort, parenthesised aggregate init was made to deal with this kind of thing
[18:40:28] <PJBoy> { vector<S> v; v.emplace_back(5, 7); cout << v.back().x, v.back().y; } struct S { int x, y; };
[18:40:28] <geordi> 5, 7
[18:40:48] <PJBoy> the idea being that you don't bother passing a braced list
[18:40:58] <mort> huh
[18:41:02] <mort> what version of C++ is that in?
[18:41:06] <PJBoy> C++20
[18:41:23] <rpav> er, what about that is 20-specific
[18:41:30] <PJBoy> parenthesised aggregate init
[18:41:37] <PJBoy> geordi, use --2017
[18:41:37] <geordi> error: new initializer expression list treated as compound expression
[18:41:39] <rpav> oh i see
[18:41:45] <mort> this seems like it works for one level but not multiple?
[18:41:46] <mort> like
[18:41:48] <PJBoy> wow that error message sucks
[18:42:02] <PJBoy> yeah indeed, that's the biggest flaw with it
[18:42:04] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[18:42:41] <mort> with `struct Vec2 { float x, y; }; struct S { Vec2 v; int bleh; }` -- you presumably couldn't do `v.emplace_back(40, 20, 6)`
[18:42:52] <mort> so it doesn't help me at all
[18:43:04] <PJBoy> worth a quick check
[18:43:26] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:dce3:39ec:6605:20a)
[18:43:26] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:dce3:39ec:6605:20a) (Changing host)
[18:43:26] *** Joins: skapata (~Skapata@user/skapata)
[18:43:30] <PJBoy> { S s(40, 20, 6); } struct Vec2 { float x, y; }; struct S { Vec2 v; int bleh; };
[18:43:30] <geordi> error: could not convert '40' from 'int' to 'Vec2'
[18:43:33] <mort> { vector<S> v; v.emplace_back(5, 7, 6); cout << v.back().x, v.back().y; } struct Vec2 { int x, y; }; struct S { Vec2 v; int z };
[18:43:34] <geordi> error: expected ';' at end of member declaration (fix known)
[18:43:35] <PJBoy> yeah trash
[18:43:57] <PJBoy> but understandable
[18:44:05] <mort> I wish C++ would stop bolting on hacky syntax hotfixes which work in a few cases but not most
[18:44:12] <PJBoy> there's no type for "C++ syntax blob"
[18:44:26] <mort> maybe there should be
[18:44:38] <mort> at least internally
[18:45:00] <PJBoy> eh
[18:45:07] <PJBoy> the work around is to not bother with aggregate init
[18:45:10] <PJBoy> make a ctor
[18:45:11] <mort> a lot of C++ syntax is already straddling the line between macros and normal code
[18:45:27] <mort> this isn't just a problem for stuff without a ctor
[18:45:58] <mort> { S s(40, 20, 6); } struct Vec2 { Vec2(float x, float y): x(x), y(y) {} float x, y; }; struct S { S(Vec2 v, int bleh): v(v), bleh(bleh) {} Vec2 v; int bleh; };
[18:45:58] <geordi> error: no matching function for call to 'S::S(int, int, int)'
[18:46:13] <mort> no aggregate initialization involved, and it doesn't work
[18:46:29] <PJBoy> { S s({40, 20}, 6); } struct Vec2 { Vec2(float x, float y): x(x), y(y) {} float x, y; }; struct S { S(Vec2 v, int bleh): v(v), bleh(bleh) {} Vec2 v; int bleh; };
[18:46:30] <geordi> warning: declaration of 'v' shadows a member of 'S'
[18:46:32] <mort> { S s({40, 20}, 6); } struct Vec2 { Vec2(float x, float y): x(x), y(y) {} float x, y; }; struct S { S(Vec2 v, int bleh): v(v), bleh(bleh) {} Vec2 v; int bleh; }; // <-- this is what I would expect to work if C++ was good
[18:46:32] <geordi> Same warning.
[18:46:36] <mort> oh
[18:46:44] <PJBoy> geordi, use -w
[18:46:45] <geordi>  
[18:47:07] <PJBoy> C++ good then, as confirmed by mort
[18:47:23] <mort> oh
[18:47:28] <mort> this doesn't use forwarding, derp
[18:47:48] *** climax is now known as gentooclimax
[18:47:54] <mort> { vector<S> v; v.emplace_back({10, 20}, 30) } struct Vec2 { Vec2(float x, float y): x(x), y(y) {} float x, y; }; struct S { S(Vec2 v, int bleh): v(v), bleh(bleh) {} Vec2 v; int bleh; }; // <-- this is what I would expect to work if C++ was good
[18:47:55] <geordi> error: no matching function for call to 'vector<S>::emplace_back(<brace-enclosed initializer list>, int)'
[18:47:59] <mort> there
[18:48:21] <mort> { vector<S> v; v.emplace_back(Vec2{10, 20}, 30) } struct Vec2 { Vec2(float x, float y): x(x), y(y) {} float x, y; }; struct S { S(Vec2 v, int bleh): v(v), bleh(bleh) {} Vec2 v; int bleh; }; // <-- this does work however
[18:48:22] <geordi> error: expected ';' before '}' token (fix known)
[18:48:34] <mort> { vector<S> v; v.emplace_back(Vec2{10, 20}, 30); } struct Vec2 { Vec2(float x, float y): x(x), y(y) {} float x, y; }; struct S { S(Vec2 v, int bleh): v(v), bleh(bleh) {} Vec2 v; int bleh; }; // <-- this does work however
[18:48:35] <geordi> warning: declaration of 'v' shadows a member of 'S'
[18:48:59] <PJBoy> yeah but that's reasonable enough
[18:49:09] <mort> not really
[18:49:20] <mort> you can do S({10, 20}, 30)
[18:49:39] <mort> emplace_back's parameter list should work the same as the parameter list of the ctors of the type it's constructing
[18:50:02] <PJBoy> emplace_back is just a function though
[18:50:16] <mort> which is used to call a constructor
[18:50:20] <PJBoy> it doesn't get to see that it's calling S's ctor
[18:50:25] <mort> maybe it should
[18:50:33] <PJBoy> so it doesn't get to deduce the type of its arguments relative to that ctor
[18:50:36] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[18:50:39] *** Joins: slavfox_ (~slavfox@93.158.232.111)
[18:50:45] <mort> emplace, emplace_back, make_unique, make_shared, etc. is increasingly becoming how you construct stuff in C++
[18:51:03] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 252 seconds)
[18:51:06] <mort> maybe the language should accommodate that class of function
[18:51:25] *** slavfox_ is now known as slavfox
[18:51:26] <PJBoy> mm, but how?
[18:51:35] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[18:51:36] <mort> idk, more piles of hacks probably
[18:51:41] <PJBoy> you make a new type of function that can only forward its arguments to a ctor
[18:51:50] <PJBoy> and that's all it can ever do with those arguments
[18:51:57] <PJBoy> and you can only call a ctor in one way
[18:52:19] <PJBoy> I think those would be the limitations you'd need
[18:52:26] <mort> maybe we should have macros for this
[18:52:43] <mort> macros would be a class of function which does accept a syntax blob
[18:53:05] <PJBoy> I don't think the complexity of all this is worth it just to avoid naming the type of that argument you're constructing
[18:53:15] <mort> I agree
[18:53:28] <mort> I do, however, think it's worth it to unify how objects are created in C++
[18:53:51] <mort> if S({10, 20}, 30) didn't work, and you had to type S(Vec2{10, 20}, 30) I would be perfectly content
[18:53:51] <PJBoy> destructive move would probably be the ideal solution
[18:53:56] <barometz> another way to initalize things? bold :P
[18:54:05] <mort> but since S({10, 20}, 30) works, make_unique<S>({10, 20}, 30) should also work
[18:54:06] <PJBoy> make it so that push_back(S(args...)) doesn't have to do a move operation
[18:54:15] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[18:54:31] <mort> that's essentially the rust solution fwiw
[18:54:37] <barometz> "RVO but for parameters" is something you could sell
[18:54:37] <PJBoy> yeah, and it's good
[18:54:52] <mort> make moves cheap enough and optimizable enough that moving stuff into place is "zero-cost" in non-debug builds
[18:55:08] <mort> though, we already have all this emplace stuff in the language
[18:55:20] <mort> should we deprecate all of that once we have destructive moves?
[18:55:21] <PJBoy> in the library, yeah
[18:55:28] <PJBoy> yeah absolutely
[18:55:32] <PJBoy> emplace is a burden
[18:55:56] <ville> just rethink the whole object model
[18:55:58] <mort> I would love to kill emplace, but the fact that there are billions of loc already written using emplace-style functions means it'll forever be a burden
[18:56:08] <mort> hey
[18:56:15] <PJBoy> yeah so it'll be deprecated forever
[18:56:22] <mort> what if we fork C++98
[18:56:23] <PJBoy> but never removed
[18:56:34] <mort> and build on top of that
[18:56:53] * Haohmaru confiscates mort's forks and spoons
[18:56:54] <mort> incorporate all the good stuff of C++11-23, remove all the cruft, fix the move semantics
[18:57:03] <ville> starting from there doesn't help if you plan to be compatible with 98
[18:57:11] <PJBoy> yeah I don't think C++98 is a good place to start
[18:57:22] <ville> c++ got the object model wrong from the get go
[18:57:26] <mort> alright, fair
[18:57:28] <CodePoint> C++98 is C++ in it's purest form.
[18:57:36] <mort> start from C?
[18:57:37] <CodePoint> C++98 is the way.
[18:57:43] <mort> build cfront2
[18:57:47] <CodePoint> All praise C++98.
[18:57:50] *** gentooclimax is now known as climax
[18:58:00] <Haohmaru> no, i want my constexpr
[18:58:16] <mort> constexpr is one of those things
[18:58:17] <CodePoint> no....  you get const T* const
[18:58:20] <mort> each incremental step makes sense
[18:58:33] <mort> but now, maybe things could've been different
[18:58:56] <mort> as a compile-time C++ code execution mechanism, constexpr is kinda meh
[18:59:04] <PJBoy> one big issue with C++98 is that it doesn't have a multithreaded memory model
[18:59:23] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[18:59:31] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:59:43] <PJBoy> you got no std::thread or std::atomic or anything
[18:59:52] <PJBoy> and your pthread stuff is probably technically UB
[18:59:52] <ville> not that big deal in practice
[19:00:08] <mort> in practice the platform defines all the behavior you kinda need
[19:00:08] <PJBoy> you don't get a thread local errno
[19:00:11] <PJBoy> so errno is useless
[19:00:29] <mort> didn't C++98 compilers in practice give you thread-local errno
[19:01:13] <PJBoy> good question
[19:01:22] <PJBoy> I would guess that that would be non conforming
[19:01:30] *** Joins: callq (~callq@2409:4062:4e9a:a9bd:d23:3204:52b:f841)
[19:01:37] <ville> errno to start off is problem in it self that needs to be removed
[19:01:38] <mort> hmm possibly
[19:01:48] <mort> yeah errno is a pretty terrible error reporting mechanism
[19:02:07] <PJBoy> yeah I don't get how errno became popular
[19:02:22] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[19:03:05] <PJBoy> I'd be more inclined to start from C17 than C++98
[19:03:14] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[19:03:32] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 240 seconds)
[19:03:39] <ville> just start from scratch
[19:03:50] *** Joins: bobb_ (~bobb_@dslb-088-066-135-095.088.066.pools.vodafone-ip.de)
[19:04:01] <PJBoy> that would take too long :(
[19:04:35] <mort> C compatibility is like the main reason anyone uses C++
[19:04:51] <PJBoy> maybe
[19:05:17] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[19:05:17] <ville> you certainly can get "easy to call into c" without c++'s hostage situation
[19:05:22] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[19:05:24] <PJBoy> I feel like there's not much competition in the compiled non-bytecode languages
[19:05:52] <ville> there are interesting developments right now
[19:06:01] <PJBoy> go-lang has garbage collection, and then it's C and C++
[19:06:01] <mort> in the world of native-compiled languages with automatic deterministic memory management that's not too expensive at runtime, we have:
[19:06:03] <PJBoy> and now rust
[19:06:04] <mort> * C++
[19:06:05] <mort> * rust
[19:06:09] <PJBoy> and I think that's it?
[19:06:10] <rpav> "ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second"
[19:06:25] <rpav> oh
[19:06:29] <ville> jai and zig would be two of those interesting developments, we'll see how those go
[19:06:37] <mort> hmm yea
[19:06:45] <mort> I think jai is gonna be pretty manual?
[19:07:06] <mort> I haven't paid that close attention to it but afaik it has a go-style defer but not proper lifetime management
[19:07:11] <PJBoy> C++ has sensible value/reference semantics
[19:07:17] <ville> no it doesn't
[19:07:32] <PJBoy> I mean better than every other language at least
[19:07:37] <ville> just start looking at all the problems that come from it
[19:07:38] <mort> go-style defer goes a long way compared to manual memory management but it's still really easy to mess up compared to languages with dtors
[19:08:02] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[19:08:27] *** Joins: slavfox (~slavfox@93.158.232.111)
[19:08:29] <mort> I don't know, C++ value and reference semantics seem to make a bunch of sense
[19:08:33] <mort> at least to me
[19:08:55] <mort> move semantics could use some work, destructive moves would be nice
[19:09:30] <mort> automatically implementing a move operator= in terms of a dtor and move ctor would be nice
[19:09:39] <mort> same with copy operator= in terms of dtor and copy ctor
[19:09:47] <bobb_> Hi, why does https://godbolt.org/z/PrYcacjEh returns false?
[19:10:30] <mort> (I know there are really good reasons to implement move ctor in terms of default ctor + move operator=, but I would personally prefer operator= implemented in terms of ctor rather than ctor implemented in terms of operator=)
[19:10:31] <ville> bobb_: pointer-to-function vs function type?
[19:10:31] <bobb_> both are types, i hope types of a function but they are somehow different but why?
[19:10:38] <PJBoy> because a pointer to function and a function aren't the same
[19:10:57] <ville> bobb_: don't take the address of f on line 8
[19:11:00] <bobb_> argghh i'm an idiot
[19:11:03] *** Quits: SorryBeauty (~SorryBeau@103.25.241.104) (Ping timeout: 256 seconds)
[19:11:04] <PJBoy> << TYPE<decltype(f)>, TYPE<decltype(&f)>; void f(int a, char c) {}
[19:11:05] <geordi> void(int, char), void (*)(int, char)
[19:11:16] <mort> speaking of, iostreams is one of those things which really should be different but we're stuck with supporting now
[19:11:42] <mort> whose idea was it to mutate the global state of the global output stream in order to print a single boolean as "true"/"false" rather than 1/0
[19:11:48] <PJBoy> no one's forcing you to use iostreams
[19:11:49] <bobb_> i simplified my example too much
[19:12:18] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:12:40] <PJBoy> global state for formatting / locale stuff is indeed terrible though
[19:12:54] <PJBoy> and all the stdlib stuff works on that basis
[19:13:04] <mort> at least C++ has an excuse for locale, it inherited that mess from C
[19:13:22] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[19:13:26] <ville> don't use std::cout specifically then?
[19:13:29] <PJBoy> there's std::format though
[19:13:36] <mort> yeah, std::format will be good
[19:13:54] <PJBoy> possibly in conjunction with std::puts
[19:14:07] <mort> I'm using fmtlib in this project (with spdlog), I kinda wish you could implement a formatter without implementing a parser though
[19:14:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:14:39] <mort> the idea that a type would know how to parse itself from a string format is pretty strange in general, especially when the string format is one whose primary goal is to be human readable
[19:15:20] <PJBoy> if you have no modifiers for your type, then you just parse "{}" and it's easy
[19:15:30] <PJBoy> or wait
[19:15:50] <PJBoy> yeah that's right, right?
[19:16:05] <PJBoy> we're parsing the format string
[19:16:12] <PJBoy> so a trivial parse method does very little
[19:17:05] <PJBoy> might help if I actually tried writing a formatter at some point
[19:17:31] <ville> ...for floating point types. have fun
[19:17:47] <PJBoy> shouldn't be too hard
[19:17:56] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd) (Ping timeout: 250 seconds)
[19:18:08] <PJBoy> I mean, if I'm allowed to use sprintf >_>
[19:18:49] <InPhase> I do not miss sprintf from my C days...
[19:18:52] *** Joins: zen_coder (~zen_coder@ip5f5bf686.dynamic.kabel-deutschland.de)
[19:19:27] <InPhase> I even more do not miss sscanf.
[19:20:01] <Friithian> other than printf formatting, does anyone miss any IO of C?
[19:20:11] <InPhase> I used to like them a lot, and thought they were very convenient, but as I moved away from them I realized how much I struggled in the past with bugs from them.
[19:20:20] <CarloWood> The reason I never use any printf format is because I constantly print custom types. That one time that you need to write output that could also be written using printf... duh. Then I just do the same thing as I always do: write it to the ostream that I use.
[19:20:59] *** Joins: pulse (~pulse@user/pulse)
[19:21:14] <mort> I miss IO from posix, it's nice to be able to actually interact with a filesystem
[19:21:33] <mort> ik C++ theoretically has std::filesystem now but I don't think that's really supported anywhere
[19:21:40] <CarloWood> heh
[19:22:21] <InPhase> Friithian: There is sometimes an elegant clarity to the binary file IO using the C routines, especially when dealing with file formats that were obviously designed for it.
[19:22:31] <mort> apparently that's outdated, apparently the big stdlibs now support std::filesystem
[19:23:25] <ville> PJBoy: no. you implement the formating
[19:23:36] <mort> I think a good streams I/O library really only needs: an interface with a write() method which takes a byte buffer and returns nothing or error, an interface with a read() method which takes a buffer and a size and returns a size or an error, and a concrete type which implements buffered I/O
[19:23:41] <PJBoy> <_<;
[19:23:46] <PJBoy> I'll pass
[19:24:07] <mort> C comes closer to that than C++, but FILE* is a pretty terrible interface; you can't really implement a new kind of FILE* without being the stdlib
[19:24:31] <PJBoy> everyone supports std::filesystem
[19:25:10] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[19:25:11] <ville> avr-gcc doesn't have it! oh wait it doesn't have any of the standard library
[19:25:44] <mort> I'm so glad I spend most of my time with architectures which are supported by the compiler upstreams
[19:25:50] <LordKalma> what's going on?
[19:25:52] <mort> in fact, why isn't avr-gcc merged into gcc yet?
[19:26:19] <PJBoy> LordKalma, we're talking about C++
[19:26:27] <PJBoy> I know, I know, it's weird
[19:26:29] <mort> yeah
[19:26:40] <mort> should we just talk about rust instead
[19:26:51] <PJBoy> it has no exceptions
[19:26:55] <PJBoy> in 2022
[19:27:00] <mort> yeah
[19:27:04] <mort> get with the times, right??
[19:27:07] <PJBoy> inexcusable
[19:27:26] <PJBoy> and it calls std::variant `enum`
[19:27:40] <mort> everyone knows enum is syntax sugar for an int
[19:27:42] <PJBoy> that's just plain weird
[19:27:43] <CarloWood> mort: "I think a good streams I/O library really only needs..."...  I use https://github.com/CarloWood/evio for all my I/O. It has more than just a read and write in its API.
[19:28:27] <mort> meming aside, I wonder how large of a performance impact it has to use conditional returns everywhere to propagate errors up
[19:29:02] <LordKalma> I hate avr compolers
[19:29:05] <LordKalma> *compilers
[19:29:18] <mort> the branches themselves are probably rare and thus correctly predicted, but predictable branches still take cycles, make hash collisions in the branch predictor more likely, and bloat code size
[19:29:31] <LordKalma> also, llvm suposedly got an avr target in 11 or 12
[19:29:36] <LordKalma> but dunno what happened
[19:30:07] <LordKalma> https://releases.llvm.org/11.0.0/docs/ReleaseNotes.html#changes-to-the-avr-target
[19:30:10] <mort> I know exceptions are pretty code bloat-y too but at least they're not in the hot path generally, conditional returns everywhere will bloat hot code
[19:30:17] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[19:30:28] <mort> it would be interesting to do a study on the real-world performance impacts of different error handling strategies
[19:31:45] *** Quits: climax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 252 seconds)
[19:34:35] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[19:34:38] <pulse> C error handling > all
[19:35:25] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[19:36:31] <PJBoy> goto fail
[19:36:51] <PJBoy> it's pretty bad when the most hated construct of all time is the best form of error handling
[19:38:38] <pulse> the older i get the more i appreciate C. the philosophy of C is KISS, meanwhile all the other languages want to out-complicate each other
[19:39:02] <pulse> i still prefer C++ due to quality of life stuff but i think i might switch over to C for a couple projects
[19:39:21] <rpav> keep it stupid, stupid
[19:40:11] <mort> I write C for some projects
[19:40:32] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[19:40:46] <mort> in C++, I often prefer using the C libraries than C++ wrappers, the C++ wrappers just tend to complicate stuff
[19:41:12] <PJBoy> I think simple C++ is much simpler than simple C
[19:41:43] <pulse> the language itself is complex
[19:41:46] <CarloWood> I think that people make a mistake by keeping things "simple". It's more that they are afraid (or too stupid) to work with more complex interfaces; but in the end any added "complexity" is a benefit. If it wasn't, then it wouldn't be added.
[19:42:04] <pulse> which means that the chance that somewhere down the line someone is going to tackle the code with some arcane features is considerably higher than with C
[19:42:09] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[19:42:19] <pulse> CarloWood, i used to think that but now i disagree
[19:42:20] <CarloWood> Of course, you can write a BAD library that is needlessly complex etc, but that doesn't prove that complex is bad.
[19:42:25] <PJBoy> C has its own complexities and arcane features
[19:42:26] <pulse> C offers the smallest and simplest subset to do anything you want
[19:42:42] <PJBoy> it's been over ten years, and I'm stilling learning things about C
[19:43:04] <PJBoy> ain't nothing simple about character literals being ints >_>
[19:43:11] <rpav> C's problem is it's so _manual_
[19:43:34] <PJBoy> or doing generic programming with macros
[19:43:55] <rpav> a hacky solution to one of the manual-ness problems
[19:44:15] *** Joins: paul424 (~tom@ip-5-172-234-217.multi.internet.cyfrowypolsat.pl)
[19:44:20] <PJBoy> or doing generic printing using format strings >_>
[19:44:41] <CarloWood> pulse: For example C++ - if you think it is too complex, just don't use the "complex" features of the language. Nobody tells you to use more than just C when using C++.  Yet you do, so you DO see the added value in the "complexity" on top of C.  And this holds for every feature they add to C++. If you'd have a perfect memory and you have no problems seeing the structure of all of it, then it becomes simple and only gives
[19:44:41] <CarloWood> you a more powerful tool.
[19:45:09] <CarloWood> The bottleneck (of the complexity) is the user.
[19:45:16] <pulse> CarloWood, it's both a philosophical and a pragmatic consideration
[19:45:23] <pulse> i do like C++ a lot
[19:45:29] <pulse> but i see the appeal of C
[19:45:30] <PJBoy> when you're writing C++, it's as complex as you make it, no one's disputing that
[19:45:41] <PJBoy> but it can certainly be a chore to read C++
[19:45:53] <PJBoy> especially when they use auto everywhere >:(
[19:45:58] <pulse> C is minimalistic. that is its appeal
[19:46:11] <PJBoy> C's kinda bad at being minimalistic though
[19:46:15] <CarloWood> If a language becomes so complex that 99% of the professional coders can't efficiently use it anymore - then I guess you have an argument for making it simpler; but you need to prove first that this is the case and humanity is simply not ready for C++
[19:46:31] <pulse> i'm not saying don't use C++ CarloWood
[19:46:32] <PJBoy> and then there's GNU C that you'd be somewhat obligated to learn
[19:46:35] <pulse> C++ is fantastic
[19:46:57] <pulse> but there is some aspect of C that i find far more appealing than C++
[19:47:13] <pulse> the only reason why i don't write it more is because C++ is easier to use, it has more faculties and better abstractions
[19:47:16] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[19:47:27] <ville> PJBoy: again there are some language rules you may not escape
[19:47:29] <pulse> but C is far more romantic and elegant in my mind
[19:47:32] <PJBoy> I do at times wish there was a sane C
[19:47:47] <ville> PJBoy: other than by just ignoring them and doing what you feel like should be legal
[19:48:16] <PJBoy> I don't think you end up doing anything non conforming in simple C++
[19:48:42] <PJBoy> usually the issue is people doing type punning or whatever
[19:49:05] <PJBoy> which is still UB in C
[19:49:11] <ville> and that's something you should be able to do. it's just memory.
[19:49:12] <PJBoy> so it's complicated
[19:49:12] <CarloWood> All C-style casts are evil.
[19:49:39] <CarloWood> Many _cast<>'s are too.
[19:49:46] <PJBoy> what about `(void) expr;`
[19:49:51] <CarloWood> You need to have a realllllly good reason to cast.
[19:50:15] <PJBoy> what about `std::vector<int>(24)`?
[19:50:16] <CarloWood> PJBoy: that could be UB I think
[19:50:22] <pulse> if you guys knew vendu, he was writing a book about C https://vendu.onedot.nl/files/wizardcode4.pdf
[19:50:25] <PJBoy> UB?!?!
[19:50:32] <pulse> in chapter 1.1.5 he has some pretty damn solid arguments for C
[19:50:40] <PJBoy> that's just a void cast to explicitly discard the result of an expression
[19:50:43] <CarloWood> std::vector<int>(24) is not UB?  That's just 24 int's initialized to zero.
[19:50:53] <PJBoy> yeah of course it's not
[19:50:55] <PJBoy> but it's a cast
[19:50:57] <ville> CarloWood: but that's a cast wa the point
[19:50:59] <pulse> it boils down to "C is simple, elegant, and extremely powerful"
[19:51:09] <LordKalma> What a fking asshole: https://bugreports.qt.io/browse/QTBUG-99968?focusedCommentId=642153&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-642153
[19:51:18] <PJBoy> we cast all the time in C++
[19:51:39] <PJBoy> type conversions don't need much of a justification
[19:51:51] <CarloWood> I meant reinterpret_cast<> and static_cast<>(static_cast<>(...))
[19:52:08] <CarloWood> Hence that I said *_cast<>
[19:52:26] <PJBoy> you did say "You need to have a realllllly good reason to cast." though
[19:52:50] <PJBoy> and of course `static_cast<vector<int>>(24)` is also fine
[19:53:16] <PJBoy> reinterpret_cast should be avoided where reasonable, but like it's in the name
[19:54:06] *** Quits: msk (~msk@103.213.213.65) (Ping timeout: 260 seconds)
[19:55:19] <PJBoy> LordKalma, love a good metadiscussion
[19:55:36] <LordKalma> that guy is a fucking asshole
[19:55:43] <LordKalma> "are you as smart as Taylor?"
[19:55:56] <LordKalma> makes me ashamed of using WSJTX, ffs
[19:56:05] <CarloWood> I read half of it, but didn't get what it is about - and also not why he'd be an asshole therefore.
[19:56:07] <LordKalma> (and it's not even a demanding DSP application)
[19:56:26] <PJBoy> yeah I kinda gave up about halfway in too
[19:56:29] *** Quits: ville (~ville@user/ville) (Quit: ville)
[19:57:07] <PJBoy> like I get it, you're triggered and ranting overly defensively
[19:57:15] *** Joins: ville (~ville@user/ville)
[19:57:45] <PJBoy> the best thing that could have happened is no one acknowledging that post
[19:57:56] <CarloWood> I need to think about what an object/class should look like to carry the state of a vk::GraphicsPipelineCreateInfo in a way that it can be incrementally changed... so, back to work.
[19:57:56] <LordKalma> ahah that would have been hilarious
[19:59:51] <LordKalma> also, that rant  like "omg we're just amateur, you're the pros, fix yo shit".... As I said, I've used WSJTx, and do you know how they ship source code for it?
[19:59:59] <LordKalma> they give you a tgz with *everything* on it
[20:00:16] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:00:29] <LordKalma> there isn't a public repo. they give tgzs of the releases, and they are flattened versions ofsource, like, boost source files are in there, everything
[20:03:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[20:14:45] *** Joins: AmR (~AmREiSa@156.207.194.71)
[20:16:26] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9086:d6f:655c:b421:bc62) (Read error: Connection reset by peer)
[20:17:00] *** Joins: p-i- (~Ohmu@2403:6200:8978:d82d:89c0:e177:c2f7:c9a9)
[20:26:34] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[20:26:39] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[20:31:47] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[20:37:13] *** Quits: AmR (~AmREiSa@156.207.194.71) (Quit: Konversation terminated!)
[20:38:24] *** Joins: magla (~gelignite@d5364d83.access.ecotel.net)
[20:41:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:45:17] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:51:57] *** Quits: callq (~callq@2409:4062:4e9a:a9bd:d23:3204:52b:f841) (Ping timeout: 240 seconds)
[20:56:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:56:51] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:00:36] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:02:02] *** Quits: undephin3d (~undephin3@158.181.75.126) (Ping timeout: 240 seconds)
[21:02:48] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[21:03:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[21:10:42] <kalven> https://hackingcpp.com/cpp/libs/fmt.html - nice quick reference
[21:11:14] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:71b7)
[21:15:21] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[21:16:14] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[21:17:21] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 252 seconds)
[21:20:29] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[21:27:03] *** Quits: bobb_ (~bobb_@dslb-088-066-135-095.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[21:30:42] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[21:31:08] *** Joins: eck (~root@user/eck)
[21:34:00] *** Joins: CodePoint (~jonathan@2607:fb90:c69:64e:11dc:1c88:ffd2:77df)
[21:40:50] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:71b7) (Quit: Client closed)
[21:41:33] *** Quits: CodePoint (~jonathan@2607:fb90:c69:64e:11dc:1c88:ffd2:77df) (Ping timeout: 252 seconds)
[21:42:18] *** Joins: nq (~nq@2a02:2f08:e015:a900:40da:1589:cc07:ab3)
[21:43:34] <xkoncek> what format does windows use for static libraries?
[21:44:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:44:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:44:08] *** ChanServ sets mode: +v npaperbot
[21:47:52] <Raziel> xkoncek, .lib is the default
[21:48:17] <xkoncek> but what is the underlying structure?
[21:48:31] <xkoncek> does it reuse .zip?
[21:48:45] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Remote host closed the connection)
[21:49:14] <kalven> coff?
[21:49:39] <xkoncek> i am just pointing out how i dislike unix' static libraries inability to handle directory hierarchies inside .a archives
[21:50:02] <Raziel> they're not compressed or combined
[21:51:01] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 240 seconds)
[21:51:59] <Raziel> and yeah, it looks like it's coff. lib I compiled starts with !<arch>./1638982904 which is indeed what a coff header is supposed to look like, apparently :p
[21:52:22] <xkoncek> never heard about coff
[21:54:03] <xkoncek> "The COFF file header stores the date and time that the object file was created as a 32-bit binary integer, representing the number of seconds since the Unix epoch, 1 January 1970 00:00:00 UTC. Dates occurring after 19 January 2038 cannot be stored in this format."
[21:54:29] <Raziel> yuuuup
[21:54:47] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[21:54:55] <Raziel> y2k all over again, time to panic
[21:55:09] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[21:56:08] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[21:56:16] *** Quits: mitch0 (~mitch@178-164-184-5.pool.digikabel.hu) (Ping timeout: 272 seconds)
[21:56:18] *** Quits: baltazar (~baltazar@178-164-184-5.pool.digikabel.hu) (Ping timeout: 256 seconds)
[21:57:29] *** Joins: mitch0 (~mitch@84-236-97-135.pool.digikabel.hu)
[21:57:46] *** Joins: baltazar (~baltazar@84-236-97-135.pool.digikabel.hu)
[21:59:49] <rpav> y3.0k
[22:01:11] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:01:57] <barometz> I filed a ticket about that on an internal project just the other day
[22:03:06] <barometz> got a static analysis warning in CI about a type mismatch, otherwise I would never have realized time_t is int32_t on our target
[22:03:22] *** Joins: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca)
[22:04:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[22:06:41] *** Inline__ is now known as Inline
[22:06:51] *** Quits: Inline (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de) (Quit: Leaving)
[22:07:43] *** Quits: sonic (~sonic@user/sonic) (Read error: Connection reset by peer)
[22:13:44] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:19:59] *** Joins: gehn (~gehn@user/gehn)
[22:20:23] <LordKalma> I'm amazed how the hell there wasn't enough oversight to think people could want to use computers beyond 2038
[22:20:50] <LordKalma> GPS has a couple roll-overs already, so it's not the end of the world
[22:24:19] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fcde:a8ca:a29e:9109)
[22:24:31] <xkoncek> LordKalma actually SW engineers wanted to provide future generations with jobs of maintaining those systems
[22:25:03] <LordKalma> well, the problem is always the same
[22:25:20] <LordKalma> for example, at my old college, we literally have an MS-DOS machine that everybody prays it doesn't break
[22:25:38] <LordKalma> it's connected to an equipment that's very good, very precise, and *veeeeeeeeeeeerrrrrrrrrrryyyyyyyyyy* expensive to replace
[22:25:44] <rpav> gtest doesn't let you actually do things with expected-exceptions-thrown?
[22:25:54] <rpav> everyone is so bad at testing fail states
[22:26:08] <LordKalma> how many hospitals have MRI machines running win xp because that's what they shipped with?
[22:26:17] <LordKalma> heck, the ATMs here *are* win xp (most of them)
[22:26:43] <LordKalma> people put OSes in machines, stop supporting them and then everybody is fucked
[22:26:58] <LordKalma> from ransomware to just not  being able to get an MRI with the right timestamp on the picture
[22:27:21] <xkoncek> now talk about OSes that run inside CPUs
[22:27:33] <ashafq> LordKalma: I finally figured it out... I think
[22:27:33] <LordKalma> those *can* be updated, and are
[22:27:49] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:27:53] <LordKalma> We have a bunch of equipment at the lab that run win xp for embedded and things like that
[22:28:05] <LordKalma> some run full desktop versions, like most keysight gear
[22:28:16] <LordKalma> keysight even tells you to send them the windows even log when we have problems
[22:28:16] <ashafq> LordKalma: I recall win xp embedded is still supported
[22:28:53] <LordKalma> probably is
[22:29:28] <ashafq> LordKalma: I figured out few of my threadding problems! 😊
[22:38:48] *** Joins: Inline (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de)
[22:39:01] *** Quits: zen_coder (~zen_coder@ip5f5bf686.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[22:41:07] <LordKalma> good
[22:41:32] <LordKalma> a  good general tip I have is, when you're designing a ystem that you're not sure how it'll interact, don't code
[22:41:32] <LordKalma> draw
[22:41:59] <LordKalma> make pseudo flow diagrams, the UML rules aren't important, just help yourself
[22:42:05] <LordKalma> a good pen and notebook is invaluable
[22:42:26] <LordKalma> people (mysself included) are to quick to open the IDE instead of a notebook
[22:42:43] <LordKalma> gitmind is a nice website for tghat as well
[22:43:02] <rpav> where do you use flow diagrams
[22:43:28] <Raziel> I do not have enough artistic skill to draw the 5d chess with multiverse timetravel that my intertwined systems full of pseudo-nondeterministic paths could take :(
[22:43:54] <rpav> dunno i just don't really think of things in terms of flow i guess and have never really needed that
[22:44:49] <LordKalma> not necessarely flow diagrams
[22:45:09] <LordKalma> but I did wrote some of those algorithm diagrams here and there
[22:45:25] <LordKalma> https://i.gyazo.com/d10349c7d177ae7a52c14f8031f9a190.png
[22:45:31] <LordKalma> sometimes is just nice to have a "big picture"
[22:45:33] <Alipha> Raziel: just design the rules and AIs for playing. then you can have the AIs play against each other and record the results. then you'll just be like, "i have no idea what this game looks like, but MrFastFingers is winning"
[22:45:38] <LordKalma> (that's all outdated)
[22:45:44] <rpav> looks complicated
[22:45:46] <Raziel> lol
[22:45:49] *** Joins: darkbit (~db@152.32.100.99)
[22:45:59] <rpav> i draw a lot of geometry and stuff and like angle/trig diagrams though
[22:46:24] <rpav> i keep a running log/stack of what i'm doing too so if i get interrupted i can get back on track easily
[22:46:47] <Raziel> LordKalma, that just looks like class declarations but also with a few lines of comments for a few of em
[22:47:19] <Raziel> like, not sure why you'd want that in a diagram when the IDE shows you the exact same thing just fine :p
[22:48:25] <rpav> shrug everyone finds different tools useful
[22:48:31] <rpav> having ones that solve your problems on hand is the big thing
[22:49:02] <Raziel> oh, definitely. I'm not tryin to shit on that way of doing things, just trying to understand the value
[22:49:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:49:26] <Raziel> like, maybe I'm missing something
[22:49:34] <Raziel> then again, maybe that specific example is just not great :p
[22:50:41] <rpav> yeah that's why i ask about flow stuff becuase it's not really a way i think
[22:50:53] <rpav> general objecty design layout though, definitely more
[22:51:35] <Raziel> I still have a flow bug somewhere with a previous winline not getting cleared before the next one gets rendered. I should go find and fix that. lol
[22:51:48] <rpav> std::variant is annoying
[22:51:58] <rpav> actually
[22:52:06] <rpav> no damn you can't specify the index type
[22:52:30] <Raziel> the index type?
[22:52:45] <rpav> yeah it would be nice if you could match the variant with an enum statically
[22:53:11] <Raziel> that would be nice
[22:53:48] <Raziel> I am constantly disappointed by the limitations of enums and always have to make unordered_maps for em to do what I want
[22:53:54] <Raziel> so... you could make a map. :p
[22:54:21] <rpav> nah i need a union/variant type
[22:54:22] *** Quits: Tokamak (~Tokamak@172.58.188.132) (Read error: Connection reset by peer)
[22:54:40] <rpav> but i also want to switch on names
[22:55:22] <Raziel> so... two maps? :^)
[22:55:26] <rpav> o.O
[22:56:11] <yolo> http://ix.io/3SGR  is this a violation of strict-aliasing? -- I posted this in ##c but it's very quiet these days
[22:57:07] *** Joins: Tokamak (~Tokamak@172.58.188.132)
[22:57:10] <yolo> basically if two structs are the same layout and cast to another, is it a violation? testing code said it is not, but the blog I read said it is
[22:59:29] <rpav> bah, you can't have a vector of const?
[23:01:07] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[23:01:39] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[23:01:43] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:03:37] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:04:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[23:06:29] <Raziel> rpav, best I can get you is a constexpr set, take it or leave it
[23:06:31] <Raziel> lol
[23:07:57] <rpav> none of these really apply, variant is what i need
[23:08:36] <rpav> overloaded<Ts...> ought to be in std
[23:09:49] <Alipha> +1
[23:17:08] *** Joins: immibis (~hexchat@62.156.144.218)
[23:18:45] *** Joins: rty (~rty@gateway/vpn/pia/rty)
[23:20:48] <rty> if I were to implement an adjacency list, which can be represented as a map of vertices to a linked list of vertices, where vertex is a class, how would you suggest to manage ownership of vertex pointers?
[23:22:06] <LordKalma> rpav> overloaded<Ts...> ought to be in std -> don't you need this for std::visit if you don't want to use auto params?
[23:23:17] *** Quits: darkbit (~db@152.32.100.99) (Ping timeout: 240 seconds)
[23:26:36] *** Quits: Tokamak (~Tokamak@172.58.188.132) (Ping timeout: 240 seconds)
[23:27:43] <PJBoy> I mean there's other ways
[23:28:03] <PJBoy> you can make a class with a bunch of operator() overloads manually
[23:28:21] *** Joins: Tokamak (~Tokamak@172.58.188.132)
[23:29:01] *** Joins: EdFletcher (~PKD@user/edfletcher)
[23:29:28] <rpav> LordKalma: yeah
[23:30:13] <rpav> LordKalma: i think you need it for auto params regardless
[23:30:58] <ashafq> <LordKalma> people (mysself included) are to quick to open the IDE ...
[23:31:03] <rpav> i can tell i've come a ways in c++ grokkage because when i first encountered that some years back, i had no clue in hell how it worked, now i was pretty sure without looking how to implement it
[23:31:24] <Alipha> rty: put the vertex objects in the map and have vertex pointers on the linked list? Or vice versa?
[23:31:34] <ashafq> LordKalma: Thanks for the tip. I had the basic idea, but I didn't know how to "sync" the two threads using C++ threads. 😊
[23:32:46] <ashafq> LordKalma: Also, the timing of the audio thread and disk-io-thread are two different beasts, so I didn't know the sizes of the queues.
[23:33:10] *** Quits: tlophd_becky__ (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net) (Ping timeout: 250 seconds)
[23:33:11] <ashafq> It's really based on the OS, sample-rate, real-time priority, etc.
[23:33:40] <ashafq> I still don't think this is a good design. I may have to explore signals
[23:34:02] *** Quits: paul424 (~tom@ip-5-172-234-217.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[23:34:32] <rpav> dammit
[23:35:18] <rpav> can't switch(v) { case A: return buildA(Ts...); case B: return buildB(Ts...); ...};
[23:35:39] <rpav> need constexpr switch / constexpr case and even then they'd probably make it not work because it would be useful
[23:36:50] <rpav> i'm not even sure this can be done
[23:38:07] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[23:39:08] <Alipha> if constexpr(v == A) { return buildA(Ts...); } else if constexpr(v == B) { return buildB(Ts...); } else { ... } ?
[23:39:09] <PJBoy> << f<0, 4>(0), f<0, 4>(4); template<int a, int b> string f(int x) { switch (x) { case a: return "A"; case b: return "B"; } return "neither"; }
[23:39:10] <geordi> A, B
[23:39:17] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[23:39:32] <PJBoy> is how I interpreted what you wrote
[23:41:03] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:f87e:42e6:dc86:d5cf)
[23:41:23] <rpav> Alipha: yeah except it's not constexpr
[23:41:31] <rpav> but i solved it a different way
[23:41:47] <Alipha> rpav: return a std::variant?
[23:41:51] <rpav> (switch constexpr wouldn't really solve it because of that in the first place i think)
[23:41:52] <Alipha> can't return different types
[23:42:05] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:fcde:a8ca:a29e:9109) (Remote host closed the connection)
[23:42:07] <rpav> Alipha: kinda .. make/take types directly that will go into the variant
[23:42:28] <rpav> ends up nicer anyway and i can process them ahead of time and just build the API differently
[23:42:28] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fcde:a8ca:a29e:9109)
[23:44:40] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[23:45:55] *** Quits: rty (~rty@gateway/vpn/pia/rty) (Remote host closed the connection)
[23:52:44] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[23:54:40] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[23:56:31] *** Joins: xuxx (~xuxx@86.228.71.37.rev.sfr.net)
[23:56:32] <xuxx> Hello
[23:56:41] <xuxx> I'm looking for good ressources about low latency C++, if some of u have advice
[23:57:16] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
