[00:02:51] *** statler_waldorf is now known as dilfridge
[00:04:05] *** Joins: kensanata (~user@user/kensanata)
[00:06:03] <mjgardner> What's the difference between that and ADJUST?
[00:06:14] <mst> ADJUSTPARAMS would be the equivalent of BUILDARGS
[00:07:00] <LeoNerd> Oh, not quite
[00:07:14] <mjgardner> It already has BUILDARGS.
[00:07:29] <LeoNerd> ADJUST doesn't receive any arguments to it. ADJUSTPARAMS or whatever I call it will take a single arg, being a hashref of the kvpairs
[00:07:52] <LeoNerd> So code can inspect it and do whatever, likely should delete keys from it that it has handled. After running all the blocks, whatever keys remain are therefore considered unhandled and we complain
[00:08:15] <LeoNerd> BUILDARGS is unrelated; runs much earlier and was a copy of the same idea from... is it Moo/Moose?
[00:08:26] <LeoNerd> That's the one for reshaping @_ into a kvlist
[00:08:42] <mst> oh, sorry, I misunderstood
[00:09:08] <mst> I thought handling extra values was what your BUILD phaser was for
[00:09:32] <LeoNerd> Yeah... it is/was... it's all a bit of a mess. Since BUILD just gets passed the entire @_, it's a total free-for-all with no real structure to it
[00:09:49] <LeoNerd> It's useful for handling all sorts of weird shaped things, but one thing it can't do is detect typoes of param names. :/
[00:10:16] <mst> right
[00:10:45] <LeoNerd> Already at the moment, an Object::Pad class with no BUILD blocks at all is therefore known to have all its :param names known ahead of time.. so constructor can complain
[00:11:01] <LeoNerd> But the moment you have any BUILD block in there it just goes "eh, I've no idea, anything could happen" and doesn't bother checking
[00:11:20] <mst> right, so ADJUSTPARAMS is going to be "you can still check, just let me fiddle around first"
[00:11:24] <LeoNerd> Yup
[00:11:28] <mst> whereas BUILD is "nope, I'm replacing everything, piss off"
[00:11:32] <LeoNerd> Indeed
[00:11:45] <mst> I thought you were going to call that CONSTRUCT
[00:11:48] <LeoNerd> I'm also not sure that BUILD is the best name for it...
[00:12:10] <LeoNerd> Yah, so the Corinna design has something called CONSTRUCT. I -think- that is basically what my current BUILDARGS does
[00:12:11] <mst> BUILD is what raku calls its equivalent but it's going to be really confusing for people coming from M* OO I suspect
[00:12:13] <Grinnz> BUILD in moo(se)y land means something that runs after constructor and doesn't affect the constructor, so this sounds a bit different
[00:12:24] <LeoNerd> Yeah.. I named a lot of the early things rather poorly
[00:12:37] <mst> Grinnz: right, I thought it was a mistake on stevan's part to re-use the BUILD name in a way completely different from perl6
[00:12:42] <Grinnz> (though not to say it's a sensible name on Moo(se) either)
[00:12:45] <mst> but I was unable to convince him of that
[00:13:02] <LeoNerd> Also, the word turns up unrelatedly in Build.PL, and also XS::Parse::Keyword::Builder
[00:13:09] <LeoNerd> So it's at least 3 or 4-ways overloaded by now
[00:13:14] <Grinnz> anyway, if we have new names that work that solves the problem
[00:13:44] <LeoNerd> Yeah the idea is to add a bunch of new named things that work in a nice set, and point out "oh by the way this old thing is equivalent to that, but you probably dont' want to use it going forward"
[00:13:57] <mjgardner> Naming things is hard.
[00:14:06] <LeoNerd> Yup. It's called the problem of.. er... 
[00:14:10] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[00:15:35] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:16:41] <mst> LeoNerd: and we can always modify our Perl::Critic bundle to whine about them
[00:26:02] <Grinnz> ...one PPI is able to parse Object::Pad without barfing
[00:26:04] <Grinnz> once*
[00:26:38] <Grinnz> (which implies, once the naming is stable enough)
[00:30:26] <mjgardner> I am all for that. I ❤️ perlcritic.
[00:32:36] *** bleb_ is now known as bleb
[00:32:37] <buu> So I'm trying to parse some amazon html and I ended up writing something like FooBar\s*:\s+(\w+)
[00:32:37] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 245 seconds)
[00:32:46] <buu> Which doesn't match
[00:33:01] <buu> I was very confused why because the text was "FooBar :  stuff"
[00:33:26] <buu> It turns out amazon embedded a million LEFT-TO-RIGHT invisible codepoints everywhere
[00:33:29] <buu> Which \s doesn't match
[00:37:20] <Grinnz> lol
[00:37:32] <Grinnz> i18n!
[00:38:12] <Grinnz> i wonder if there's a name for "substring grapheme match"
[00:38:23] <Grinnz> which would ignore things that have no grapheme
[00:39:13] *** Joins: e1f (~user@141.117.1.174)
[00:44:33] *** Quits: mattil (~mattilinn@62-113-176-119.bb.dnainternet.fi) (Quit: Leaving)
[00:50:57] *** Joins: KnoP_ (~KnoP@HSI-KBW-095-208-250-131.hsi5.kabel-badenwuerttemberg.de)
[00:54:17] *** Quits: KnoP (~KnoP@HSI-KBW-046-005-017-012.hsi8.kabel-badenwuerttemberg.de) (Ping timeout: 245 seconds)
[00:55:15] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[00:55:46] *** Quits: KnoP_ (~KnoP@HSI-KBW-095-208-250-131.hsi5.kabel-badenwuerttemberg.de) (Ping timeout: 240 seconds)
[00:57:41] *** Joins: R2robot (~R2robot@user/r2robot)
[01:01:20] * GumbyPAN CPAN Upload: Bot-IRC-1.36 by GRYPHON https://metacpan.org/release/GRYPHON/Bot-IRC-1.36
[01:02:35] <ehuelsmann[m]> Grinz: that or an an API for PPI which custom keywords can hook into?
[01:02:48] * pragma- recommends an AST.
[01:02:58] <Grinnz> yes, static analysis hints is another tack
[01:03:02] <ehuelsmann[m]> Grinnz: That or an API for PPI which custom keywords can hook into?
[01:03:55] <mst> ehuelsmann[m]: the likely solution is to define a standard for 'syntax defining comments' that PPI can introspect
[01:10:34] *** Quits: EGD (~egd@user/egd) ()
[01:11:21] * GumbyPAN CPAN Upload: HTTP-BrowserDetect-3.34 by OALDERS https://metacpan.org/release/OALDERS/HTTP-BrowserDetect-3.34
[01:12:10] <buu> I feel like \s should match invisible characters also
[01:12:12] <buu> or something
[01:15:01] <Grinnz> i mean, really what you want to match is not-visible-characters
[01:15:09] <Grinnz> so excluding control characters as well
[01:15:23] <Grinnz> whitespace is just one part of that
[01:15:48] <Grinnz> including*
[01:17:30] <genio> I just heard an ad for CarGurus on Pandora and the person pronounced it in such a way that it rhymed with the USian pronunciation of kangaroo. I don't know why that bothers me
[01:19:14] <ether> that's the sort of thing I'd use 'uniprops' for.  in https://metacpan.org/dist/Unicode-Tussle
[01:19:14] <Paperbot> Link title(s): [ Unicode-Tussle-1.111 - Tom's Unicode Scripts So Life is Easier - metacpan.org ]
[01:19:27] <Grinnz> sweval: "FooBar\N{LEFT-TO-RIGHT MARK} :" =~ m/FooBar[^\p{Graph}]*:/
[01:19:30] <perlbot> Grinnz: No output.
[01:19:54] <ether> uniprops --all U+1234  <-- see what character classes your evil char falls into
[01:20:52] <Grinnz> sweval: "FooBar\N{LEFT-TO-RIGHT MARK} :" =~ m/FooBar\P{Graph}*:/
[01:20:53] <perlbot> Grinnz: No output.
[01:21:53] <Grinnz> basheval: uniprops --all U+200E
[01:21:54] <perlbot> Grinnz: /tmp/7xFbWlXIg5: line 1: uniprops: command not found␤[Exited 127]
[01:27:17] <Grinnz> sweval: "\N{LEFT-TO-RIGHT MARK}" =~ m/\p{Graph}/
[01:27:20] <perlbot> Grinnz: 1
[01:27:22] <Grinnz> why the fuck
[01:28:27] <Grinnz> sweval: "FooBar\N{LEFT-TO-RIGHT MARK} :" =~ m/FooBar[\s\p{Cntrl}]*:/
[01:28:28] <perlbot> Grinnz: No output.
[01:28:54] <Grinnz> sweval: "FooBar\N{LEFT-TO-RIGHT MARK} :" =~ m/FooBar[\s\p{Bidi_Control}]*:/
[01:28:56] <perlbot> Grinnz: 1
[01:28:59] <Grinnz> lol
[01:29:05] <Grinnz> you might have to dot aht
[01:29:09] <Grinnz> that*
[01:33:08] *** Joins: aaron (~crypto@fuck.socialdistancing.today)
[01:33:34] *** aaron is now known as voip
[01:35:16] *** Quits: kensanata (~user@user/kensanata) (Remote host closed the connection)
[01:41:24] * GumbyPAN CPAN Upload: Data-Record-Serialize-0.24 by DJERIUS https://metacpan.org/release/DJERIUS/Data-Record-Serialize-0.24
[01:42:14] *** Quits: voip (~crypto@fuck.socialdistancing.today) (Quit: leaving)
[01:43:34] <revhippie> "I did not match it, I did not- Oh, hi, \N{LEFT-TO-RIGHT MARK}."
[01:43:59] *** Joins: deadmarshal (~deadmarsh@95.38.228.142)
[01:44:23] *** Joins: jaytee80 (~jaytee80@47.190.14.171)
[01:45:39] <jaytee80> I switched a comm layer from using TCP to zeromq, and the client requires using EV ("lazy pirate pattern" in the zmq docs). Works, but now process hangs on exit()? Any ideas on where I should start looking?
[01:46:30] *** Quits: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com) (Ping timeout: 256 seconds)
[01:48:27] *** Quits: deadmarshal (~deadmarsh@95.38.228.142) (Ping timeout: 245 seconds)
[01:58:03] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[01:59:13] *** Joins: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com)
[02:02:06] *** Joins: woei31 (~woei@144.248.22.115)
[02:02:49] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[02:04:40] *** Quits: woei (~woei@144.248.22.115) (Ping timeout: 246 seconds)
[02:05:07] *** Joins: clf59 (~clf59@user/clf59)
[02:11:01] *** Joins: woei3140 (~woei31@144.248.22.115)
[02:13:04] *** Quits: magla (~gelignite@55d4b7f5.access.ecotel.net) (Quit: Stay safe!)
[02:14:07] *** Quits: woei31 (~woei@144.248.22.115) (Ping timeout: 246 seconds)
[02:19:39] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[02:27:04] *** Quits: clf59 (~clf59@user/clf59) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:54:30] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[02:54:58] *** Quits: Juerd (juerd@computervrede.nl) (Ping timeout: 240 seconds)
[02:57:21] *** Joins: Juerd (juerd@computervrede.nl)
[03:01:02] *** Joins: v` (~v@user/ctrl)
[03:04:50] *** Joins: gast0n (~g4570n@user/gast0n)
[03:16:34] * GumbyPAN CPAN Upload: Hustle-Table-v0.2.3 by DRCLAW https://metacpan.org/release/DRCLAW/Hustle-Table-v0.2.3
[03:26:35] * GumbyPAN CPAN Upload: PDL-2.055 by ETJ https://metacpan.org/release/ETJ/PDL-2.055
[03:37:16] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[03:41:54] *** Joins: whynot (~whynot@88.155.61.213)
[03:52:04] *** Joins: krismatrix (~krismatri@38.80.149.51)
[04:09:35] *** Joins: clf59 (~clf59@user/clf59)
[04:09:44] *** Quits: clf59 (~clf59@user/clf59) (Client Quit)
[04:17:43] *** Quits: Dorward (~dorward@13.5.169.217.in-addr.arpa) (Ping timeout: 250 seconds)
[04:21:46] *** Quits: Pali (~pali@user/pali) (Ping timeout: 240 seconds)
[04:24:21] *** Quits: e1f (~user@141.117.1.174) (Quit: goodnight...)
[04:34:28] *** Joins: Dorward (~dorward@13.5.169.217.in-addr.arpa)
[04:45:07] *** p71- is now known as p71
[04:47:50] *** Quits: toretto (~0xe3b7@user/toretto) (Ping timeout: 256 seconds)
[04:49:56] *** p71 is now known as p71-
[04:50:16] *** p71- is now known as p71_
[04:50:31] *** p71_ is now known as p71
[04:52:57] *** Joins: toretto (~0xe3b7@ca1-1.azirevpn.net)
[04:57:55] *** Quits: toretto (~0xe3b7@ca1-1.azirevpn.net) (Ping timeout: 258 seconds)
[05:03:04] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[05:11:12] *** Joins: toretto (~0xe3b7@ca1-1.azirevpn.net)
[05:11:32] *** Quits: toretto (~0xe3b7@ca1-1.azirevpn.net) (Changing host)
[05:11:32] *** Joins: toretto (~0xe3b7@user/toretto)
[05:15:32] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[05:19:19] <mjgardner> LeoNerd: Hm, ran into a problem with porting a Moo role to Object::Pad: What should I do about method modifiers like `around`?
[05:22:17] <mjgardner> Just put it in a method in the role and then call that method in each consumer?
[05:24:20] <mst> mjgardner: can I have a specific example please
[05:24:46] <Grinnz> short answer is Object::Pad doesn't have that feature currently
[05:25:15] <mst> Grinnz: yes but whether that's a problem or there's a better way is an open question
[05:25:20] <mst> hence wanting the example
[05:25:43] <mst> mjgardner: also LeoNerd is just the implementor, there's no reason to ping him for design questions, we're all here :D
[05:25:59] <mjgardner> OK
[05:26:09] <Grinnz> there's always another way, but yeah if there's a better way would depend on the problem
[05:26:09] <mst> mjgardner: seriously though, example please? :D
[05:26:53] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[05:27:11] <mjgardner> mst: Here is the Moo role and its method modifier: https://github.com/mjgardner/dbcritic/blob/master/lib/App/DBCritic/Policy.pm#L52
[05:27:12] <Paperbot> Link title(s): [ dbcritic/Policy.pm at master · mjgardner/dbcritic · GitHub ]
[05:28:08] <mst> mjgardner: and what's it applied to?
[05:29:09] <mjgardner> Hm, I don't seem to have an example for that yet.
[05:29:22] <mjgardner> Oh wait
[05:30:05] <mst> if you don't have an example of what it's actually -for- it's hard for me to help :)
[05:30:20] <mjgardner> Here's a consumer: https://github.com/mjgardner/dbcritic/blob/master/lib/App/DBCritic/PolicyType.pm
[05:30:21] <Paperbot> Link title(s): [ dbcritic/PolicyType.pm at master · mjgardner/dbcritic · GitHub ]
[05:31:22] <mjgardner> It in turn is consumed by, e.g., https://github.com/mjgardner/dbcritic/blob/master/lib/App/DBCritic/PolicyType/ResultSet.pm
[05:31:22] <Paperbot> Link title(s): [ dbcritic/ResultSet.pm at master · mjgardner/dbcritic · GitHub ]
[05:32:11] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[05:32:39] <mjgardner> Though this is probably a better example, as it has consuming classes: https://github.com/mjgardner/dbcritic/blob/master/lib/App/DBCritic/PolicyType/ResultSource.pm
[05:32:40] <Paperbot> Link title(s): [ dbcritic/ResultSource.pm at master · mjgardner/dbcritic · GitHub ]
[05:33:15] *** Joins: thunder (~thunder@user/thunder)
[05:33:20] <mjgardner> Here's a consumer class at the end of that chain: https://github.com/mjgardner/dbcritic/blob/master/lib/App/DBCritic/Policy/NoPrimaryKey.pm
[05:33:20] <Paperbot> Link title(s): [ dbcritic/NoPrimaryKey.pm at master · mjgardner/dbcritic · GitHub ]
[05:34:01] *** Joins: Su-Shee (~Susanne@p4ff4905d.dip0.t-ipconnect.de)
[05:34:13] <mst> mjgardner: ok, so, I appreciate the idea, but that's totally not what (IMO) modifiers are for
[05:34:58] <mst> honestly I feel like it should quite possibly be a separate object that calls the policy, i.e. delegation
[05:35:06] <mst> if not, it should definitely be different method names
[05:35:17] <Grinnz> yeah i dont really follow the whole thing but it seems like just a weird way to avoid calling a second method
[05:35:57] <Grinnz> so around can probably just be avoided here
[05:36:20] <mjgardner> OK, I'll have to rethink things.
[05:36:37] <mst> mjgardner: note lack-of-around is something that bugs me
[05:36:48] <mst> mjgardner: but this is definitely not a case where *I* would use around in the first place
[05:37:24] *** Quits: Su-Shee_ (~Susanne@p4ff499c0.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[05:45:31] *** Joins: deadmarshal (~deadmarsh@95.38.228.142)
[05:49:46] *** Quits: deadmarshal (~deadmarsh@95.38.228.142) (Ping timeout: 240 seconds)
[05:50:14] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[05:50:29] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:50:40] *** Joins: thunder (~thunder@user/thunder)
[05:52:56] *** Quits: gryphn (~gryphon@191.96.106.193) (Quit: kthxbye)
[05:56:48] <mjgardner> mst: It bugs me too, because it means roles are less capable than superclasses.
[05:57:26] <mst> mjgardner: yes, but also people overuse modifiers
[05:57:33] <mst> mjgardner: your case is IMO one of those
[05:57:44] <mjgardner> Message received
[05:57:48] <mst> mjgardner: we need enough cases where they're -not- being overused to make the case
[05:59:13] <ens> modifiers, roles, superclasses.... what ever happened to a plain old blessed hashref ? :D
[05:59:47] <mst> ens: these are formalisations of what we did anyway that are easier to understand, as I said before :D
[06:00:24] <ens> true true, but all you modern people make me feel so crusty and ancient. i'm just expressing my repressed jealousy.
[06:00:46] <mst> ens: superclass is just 'use base'
[06:01:30] <mst> ens: a method modifier is ... ok, if we forget everything else
[06:01:34] <mst> sub foo { ... }
[06:01:41] <mst> around foo => sub { ... }
[06:01:51] <mst> the 'around' is equivalent to
[06:02:08] <mjgardner> mst: I thought `use parent` was the new hotness.
[06:02:23] <mst> mjgardner: I'm trying to explain to somebody thinking in terms of 15 or 20 years ago
[06:02:27] *** Quits: Jonno_FT1 (~come@api.carswap.me) (Quit: Reconnecting)
[06:02:34] *** Joins: Jonno_FTW (~come@api.carswap.me)
[06:02:40] <ens> indeed.
[06:02:41] <mjgardner> Fair
[06:02:52] <mst> my $orig = __PACKAGE__->can('foo'); *foo = sub { $around->($orig->(@_)) };
[06:03:04] <mst> ens: ^^ does that help explain around?
[06:03:08] *** Quits: Jonno_FTW (~come@api.carswap.me) (Changing host)
[06:03:08] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[06:03:25] <ens> it will when it sinks in in a few seconds.
[06:03:36] <mst> ens: fair :D
[06:04:29] <ens> yeah that makes sense.
[06:05:07] <mst> ens: note it isn't -quite- that
[06:05:12] <xenu> it always amazes me how broken emacs perl modes are
[06:05:24] <mst> ens: but it gives you an idea of what stuff it's for
[06:05:26] <mst> actually
[06:05:33] <mst> *foo = sub { $around->($orig, @_) };
[06:05:36] <mst> is more accurate
[06:05:37] <mst> sorry
[06:05:44] <mst> that was easy enough I should've just typed it
[06:05:51] <mst> (though it's 0235 here so whatever)
[06:06:45] <ens> isn't that kinda abusable though, wouldn't it be easier to just make sure people do their subs properly instead of breaking stuff up?
[06:07:15] <ens> oh wait, object oriented stuff. got it
[06:07:52] <mst> ens: right, this is a way to compose shit
[06:09:08] <ens> for me when debugging people's code a primary blocker to how fast it gets fixed tends to be "how distributed around the codebase is this and how many levels of indirection have they implemented"
[06:09:27] <mst> yes, that's annoying and I don't disagree
[06:09:38] <mst> but people can do that no matter what
[06:09:46] <Grinnz> every bit of this can be abused, as can plain blessed hashrefs
[06:09:49] <mst> it's just harder to understand their levels of indirection if they're snowflakes
[06:10:00] *** Joins: Su-Shee_ (~Susanne@p4ffc7915.dip0.t-ipconnect.de)
[06:10:11] <mjgardner> mst: Go to bed, IRC will still be here in the morning. 😄
[06:10:17] <ens> thanks mst.
[06:10:24] <mst> mjgardner: hacking :P
[06:11:23] <xenu> mjgardner: i'm sure someone said something similar the day before lee took over freenode
[06:11:33] <mjgardner> My favorite is when developers start to notice they're repeating code in a bunch of classes, so they make a superclass for new classes to inherit from but then neglect to refactor the original classes. Guess who had that in their codebase until recently?
[06:11:54] *** Quits: Su-Shee (~Susanne@p4ff4905d.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[06:12:53] <mjgardner> And then surprise, you add new code to the superclass and wonder why everything you thought was a subclass doesn't see it.
[06:13:16] <mst> augh yes
[06:13:35] <mst> ack 'sub thing' lib/
[06:13:38] <mst> helps with that
[06:13:50] <mst> and for imports, http://p3rl.org/Devel::Wherefore
[06:13:53] <Paperbot> Link title(s): [ Devel::Wherefore - Where the heck did these subroutines come from? - metacpan.org <https://metacpan.org/pod/Devel::Wherefore> ]
[06:14:13] <xenu> i always format my code like this: 'sub\nname { }' to prevent the others from refactoring my fucntions
[06:14:22] <xenu> functions*
[06:14:42] <mst> xenu: yeah but your code is always nicely polished
[06:14:45] * mjgardner makes the sign of the cross at xenu
[06:19:42] <ens> i read about inside out objects the other day and i'm like... great scott this seems like effort.
[06:19:55] <mst> ens: yeah, fuck that
[06:20:17] <mst> ens: I deliberately killed inside-out objects in mainstream cpan back in '06 or so
[06:20:36] <mst> damian's Class::Chlamydia aside
[06:20:53] <Grinnz> inside out objects *need* to be accompanied by the ability to debug them as simply as normal objects, like is planned for Object::Pad
[06:21:28] <mst> a bunch of people read DBP and tried to use them with Cat and DBIC
[06:21:45] <mst> thing is, that sort of OO batshittery was something I was always the person who fixed
[06:21:48] <mst> I declined
[06:21:53] <mst> Class::Chlamydia died
[06:21:55] <mst> womp womp.
[06:24:26] <Adura> Whatever happened to Object::Tampon?
[06:25:13] <mst> Adura: somebody pulled the string
[06:26:06] <mjgardner> Thankfully I’ve never had the pleasure of dealing with inside-out objects.
[06:28:15] <mst> you're welcome :D
[06:28:36] <mjgardner> And I kinda liked most of PBP.
[06:28:55] <mst> at least half of it is pretty good
[06:29:33] <mjgardner> “PBP: The Good Parts”
[06:34:23] *** Quits: whynot (~whynot@88.155.61.213) (Quit: leaving)
[06:43:24] *** Joins: eramirez (~eramirez@49.149.137.68)
[06:47:04] <haarg> most of the "language" recommendations are reasonable
[06:47:28] <haarg> recommending return; rather than return undef; is probably the biggest sin
[06:47:47] <haarg> the module recommendations are all pretty terrible though
[06:49:02] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:49:03] *** FinnElija is now known as Guest9934
[06:49:03] *** Quits: Guest9934 (~finn_elij@user/finn-elija/x-0085643) (Killed (calcium.libera.chat (Nickname regained by services)))
[06:49:03] *** finn_elija is now known as FinnElija
[06:57:31] *** Quits: eramirez (~eramirez@49.149.137.68) (Ping timeout: 258 seconds)
[07:01:48] <Jonno_FTW> how do I turn a '' into 0 or else 1?
[07:03:27] <Jonno_FTW> dbix is complaining because I have a non-null integer column, but I want to do enabled => $settings{enabled} eq "on"
[07:05:41] <tirnanog> what is the value in the case that it is actually enabled?
[07:06:50] <tirnanog> Jonno_FTW: ^
[07:07:00] <Jonno_FTW> the value where?
[07:07:19] <Jonno_FTW> $settings{enabled} is either "on" or "off"
[07:07:29] <tirnanog> oh, right.
[07:07:50] <Jonno_FTW> but enabled in the db column is a boolean, so it's an int 0 or 1
[07:07:53] *** Quits: bmeneg (~bmeneg@2804:828:f233:5a4b:7e83:50f:9dc1:719b) (Remote host closed the connection)
[07:08:04] <tirnanog> didn't read properly, sorry. anyway, a ternary operator is probably the most readable solution: $settings{enabled} eq 'on' ? 1 : 0
[07:08:35] *** Quits: willow (~willow@173-228-31-194.dsl.static.fusionbroadband.com) (Quit: willow)
[07:08:37] <Jonno_FTW> ok
[07:09:11] <Jonno_FTW> actually it shouldn't even be "on" or "off", .val() in jQuery always returns "on"  for checkbox input
[07:18:50] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[07:20:10] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:22:04] *** Joins: lesihctej (jetchisel@user/jetchisel)
[07:24:42] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[07:36:18] <simcop2387> Jonno_FTW, 0+!!$var?
[07:36:37] *** Quits: solitario (~adrian@www3.kiess.onl) (Quit: Reboot… to pkgsrc-2021Q2)
[07:36:45] <simcop2387> eval: $f="foo"; 0+!!$f
[07:36:47] <perlbot> simcop2387: 1
[07:36:52] <simcop2387> eval: $f=""; 0+!!$f
[07:36:55] <perlbot> simcop2387: 0
[07:37:29] <simcop2387> or $f eq "on" ? 1 : 0
[07:37:52] <simcop2387> bah I'm nnot mentall jere that's aall, answered
[07:39:52] *** Joins: Martchus (~martchus@dynamic-095-118-073-054.95.118.pool.telefonica.de)
[07:39:58] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[07:40:01] *** Joins: solitario (~adrian@www3.kiess.onl)
[07:41:44] *** Quits: Martchus_ (~martchus@dynamic-077-007-070-169.77.7.pool.telefonica.de) (Ping timeout: 272 seconds)
[07:43:52] *** Quits: solitario (~adrian@www3.kiess.onl) (Read error: Connection reset by peer)
[07:45:43] *** Joins: solitario (~adrian@www3.kiess.onl)
[07:46:06] *** Joins: thunder (~thunder@user/thunder)
[07:52:03] * GumbyPAN CPAN Upload: DNS-Unbound-0.25_01 by FELIPE https://metacpan.org/release/FELIPE/DNS-Unbound-0.25_01
[07:52:11] <Jonno_FTW> so I get an error trying to run the update saying that a column value is the column name
[07:52:51] <perlbot> Jonno_FTW pasted a new file at https://l.perl.bot/p/nv4st7 - 
[07:53:09] <Jonno_FTW> I get an error: Catalyst DBIx::Class::Row::get_column(): No such column '2020-01-01' on 
[07:54:35] <tirnanog> don't use "or".
[07:54:40] <tirnanog> use "||" if you really mean it.
[07:55:19] <tirnanog> otherwise, you'll almost certainly be running into issues of operator precedence.
[07:56:33] <tirnanog> sweval: [ 1, '' or 2, 3 ]
[07:56:36] <perlbot> tirnanog: [2,3]
[07:56:38] <tirnanog> sweval: [ 1, '' || 2, 3 ]
[07:56:40] <perlbot> tirnanog: [1,2,3]
[07:56:44] <Jonno_FTW> alright thanks
[07:56:49] <Jonno_FTW> I fixed that but still get the same error
[07:58:21] <Jonno_FTW> actually that fixed it
[08:03:03] <tirnanog> as an aside, you'll only need "|| undef" where the value could be some defined, but falsey, value - such as 0 - that must then be coerced to undef for whatever reason.
[08:03:26] <Jonno_FTW> falsy values should be treated as undef
[08:03:32] <Jonno_FTW> (in this particular case)
[08:03:42] <tirnanog> ok. just checking.
[08:04:17] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 245 seconds)
[08:07:13] <mst> Jonno_FTW: generally using get_column is a mistake
[08:07:35] <Jonno_FTW> mst: it's an internal error coming from hte library
[08:07:54] <mst> Jonno_FTW: yes, sorry, I'd misread your mistake :D
[08:08:09] <mst> I'd write
[08:08:27] <mst> enabled => ($jsparams{...}||0),
[08:08:35] <mst> that way it's obvious when reading stuff later
[08:09:06] <mst> personally I tend to do
[08:09:14] <mst> $row->enabled($value);
[08:09:15] <mst> ...
[08:09:18] <mst> $row->update;
[08:09:34] <Jonno_FTW> guess I like code closer to sql
[08:10:08] <mst> I use SQL::Abstract directly for that
[08:10:28] <mst> or $rs based stuff
[08:11:33] <mst> I mean SQL::Abstract *can* do quite complex SQL: https://metacpan.org/pod/SQL::Abstract::Plugin::ExtraClauses#update-from-clause
[08:11:33] <Paperbot> Link title(s): [ SQL::Abstract::Plugin::ExtraClauses - new/experimental additions to SQL::Abstract - metacpan.org ]
[08:12:50] <mst> Jonno_FTW: note: the zen of DBIx::Class usage is to have the SQL that'
[08:13:11] <mst> Jonno_FTW: note: the zen of DBIx::Class usage is to have the SQL that's going to get run in your head as you're writing significantly less perl than would've been required to express the same thing in SQL
[08:14:00] <mst> Jonno_FTW: remember DBIx::Class was written by people who actually *like* SQL :)
[08:14:23] <Jonno_FTW> people like SQL?
[08:14:30] <mst> yes.
[08:14:31] * tirnanog raises hand
[08:14:51] <mst> SQL is awesome, and 98% of ORMs don't understand that it's awesome.
[08:15:01] <mst> DBIx::Class is an exception to that rule.
[08:16:13] <Jonno_FTW> I didn't pick dbix::class, I am maintaining this legacy software
[08:16:40] <mst> DBIx::Class is designed for people who like databases and SQL
[08:16:47] <Jonno_FTW> most of the commits are from 2012-2013
[08:17:17] <mst> tirnanog: my only real objection is that SQL is bad at being metaprogrammable, hence SQL::Abstract and DBIx::Class
[08:17:33] <mst> Jonno_FTW: sure, but even in 2021 you'll usually be better off with a database than anything else
[08:17:53] <Jonno_FTW> I have another problem where large workloads are fed off to separate worker processes while the main process waits for a reasponse, and for whatever reason, sometimes nothing is returned from the worker process despite the worker saying it sent it
[08:18:10] <mst> that is what's known as "a bug"
[08:19:46] <mst> like if you want an NDA and me to fix this, https://shadow.cat/ is how you hire me, but I'm still happy to do my best to help on IRC in so far as you can explain stuff :)
[08:19:47] <Paperbot> Link title(s): [ Shadowcat Systems Limited ]
[08:20:01] <Jonno_FTW> it only happens sometimes though
[08:20:11] <Jonno_FTW> I'll keep trying to fix it
[08:20:14] * mst shrugs
[08:20:23] <mst> without knowing ... anything at all .. about the code
[08:20:30] <mst> I can't make any suggestions :D
[08:20:44] <tirnanog> sweval: [ $^V ]
[08:20:46] <Jonno_FTW> wait for all the customers to drop the service so we can burn this dumpster
[08:20:46] <perlbot> tirnanog: [bless( {version => [5,35,3],original => "v5.35.3",qv => 1}, 'version' )]
[08:21:11] <mst> Jonno_FTW: eh, it doesn't sound that bad, you're just new to the codebase
[08:21:16] <tirnanog> sweval: use IO::Pipe; $p = IO::Pipe->new; [ $!, "$!" ]
[08:21:18] <perlbot> tirnanog: ERROR: Global symbol "$p" requires explicit package name (did you forget to declare "my $p"?) at (IRC) line 1. 
[08:21:20] <tirnanog> sweval: use IO::Pipe; my $p = IO::Pipe->new; [ $!, "$!" ]
[08:21:20] <mst> and apparently it uses an SQL database and you don't like SQL
[08:21:22] <perlbot> tirnanog: ["Illegal seek","Illegal seek"]
[08:21:24] <mst> which is never great
[08:21:34] <Jonno_FTW> mst: I've been working on this since mid 2018
[08:22:04] <mst> Jonno_FTW: and?
[08:22:11] <Jonno_FTW> is that considered new?
[08:22:29] <Jonno_FTW> I woulnd't say I'm new to the codebase since I rewrote large parts of it
[08:22:38] <mst> Jonno_FTW: well you told me you hate SQL still even after however long you've spent working with an SQL based codebase
[08:22:45] <Jonno_FTW> I never said I hate sql
[08:22:57] <mst> < Jonno_FTW> people like SQL?
[08:23:03] <mst> then what did that mean?
[08:23:05] <Jonno_FTW> that's not me saying I hate it
[08:23:08] <Jonno_FTW> I just tolerate it
[08:23:16] <Jonno_FTW> try to use an orm where I can
[08:23:46] <mst> also you tried to argue with me about DBIx::Class which is usually the sign of somebody who's new
[08:23:59] <Jonno_FTW> I didn't argue about it
[08:24:34] <Jonno_FTW> i was wondering why my code might be failing because dbix::class was raising the error symptomatic of something else
[08:24:35] <mst> I'm confused, given I told you how to use it better, you told me you wanted to be closer to SQL, then you told me you didn't like SQL
[08:24:50] <mst> like ... pick one of the two? :D
[08:25:01] <Jonno_FTW> it's merely a style preference
[08:25:05] <Jonno_FTW> all of this is irrelevant anyway
[08:25:25] <mst> so you prefer to write bad DBIx::Class code and then complain about it
[08:25:30] <mst> that's ... uh ... kinda silly?
[08:25:58] <mst> if you'd written it the way I'd suggested you'd never have had this bug in the first place, after all
[08:26:06] <Jonno_FTW> I'm not complaining about it. It just had a bug
[08:26:11] <Jonno_FTW> my code that is
[08:26:27] <mst> yes, and if you'd done things the way I suggested, that bug could never have happened.
[08:26:40] <mst> which is -why- I suggest doing things that way
[08:26:48] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[08:26:50] <mst> I like avoiding chances to make that sort of mistake
[08:27:01] <mst> I fuck up all the time too, after all
[08:29:03] <mst> I'm trying to help you here, but you seem to be determined to do things the way that are easy to introduce bugs and then to say that's a style preference and it's somehow the fault of the codebase and, uh, that's not how anything works?
[08:30:00] <mst> like, "here's a better way that's harder to break" "oh but i don't want to do that but I'm going to call it a dumpster even though I've refused to make it better" ... what?
[08:37:49] <gordonfish> [OT] I just caught some Olympic wrestling and I must say it's refreshing to see actual wrestling instead of all the theatrics of the likes of the WWE (and earlier, WCW, WWF, etc), what the US calls "professional wrestling."
[08:38:52] <mst> hah, yeah
[08:39:33] <Grinnz> "olympic wrestling"? is that like olympic musical theatre?
[08:39:55] <pragma-> Oh sure, blame the US for entertainment wrestling and not Mexico.
[08:39:57] <mst> Grinnz: no, it's -real- wrestling, non choreographed
[08:40:06] <Grinnz> i don't follow
[08:40:12] *** Parts: tirnanog (~tirnanog@user/tirnanog) (= "")
[08:40:13] <mst> evidently
[08:40:19] <Grinnz> the theatre *is* real wrestling
[08:40:22] * pragma- points at the luchadores.
[08:40:28] <gordonfish> G
[08:40:33] <Grinnz> what else is there to wrestling
[08:40:33] <mst> Grinnz: lol
[08:40:38] <mst> fail
[08:40:54] <gordonfish> Grinnz: Um, you think WWE (and WWF/WCW before) is real?
[08:41:16] <Grinnz> please reread that
[08:41:46] <mst> gordonfish: he called it theatre
[08:41:52] <mst> gordonfish: c'mon dude
[08:42:04] <gordonfish> Please define the theatre then. Admittedly I misread that as "the theatrics"
[08:45:15] <gordonfish> Maybe it's a regional thing, but I don't know of any connection of theatre to actual wrestling. I can see calling WWE, etc a form of theatre, which was part of my confusion.
[08:46:22] <mst> right, he's calling WWE theatre
[08:46:24] <Grinnz> yes, my point is there is no professional wrestling other than that
[08:47:55] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 258 seconds)
[09:04:15] <gordonfish> Right
[09:04:55] <gordonfish> But then where do the ones in the Oympics come from then, straight from college wrestling?
[09:06:17] <gordonfish> Also, has there been a final for the 200m Freestyle for People Who Can't Swim? I've only ever seen the preliminary heat.
[09:24:45] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[09:26:04] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Client Quit)
[09:26:11] *** Quits: schelcj (~schelcj@096-035-119-047.res.spectrum.com) (Ping timeout: 258 seconds)
[09:28:33] *** Joins: schelcj (~schelcj@096-035-119-047.res.spectrum.com)
[09:39:42] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[09:40:21] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[09:43:06] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:46:23] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:46:55] *** Joins: mattil (~mattil@airio.portalify.com)
[09:50:27] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:01:39] *** Joins: randir (~randir@93.159.239.42)
[10:04:18] *** Joins: habamax (~habamax@user/habamax)
[10:06:34] *** Quits: Dreadnaught (Kulrak@n122-109-226-190.rdl2.qld.optusnet.com.au) (Quit: Leaving)
[10:06:52] *** Joins: jplesnik (~jplesnik@nat-pool-brq-t.redhat.com)
[10:18:08] *** Joins: gggp__ (~gggp@60.10.194.46)
[10:19:08] *** Joins: Kulrak (Kulrak@n122-109-226-190.rdl2.qld.optusnet.com.au)
[10:20:02] *** gggp__ is now known as gggp
[10:32:45] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[10:33:12] *** Joins: horsepatat (~horsepata@212.3.198.101)
[10:34:30] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 252 seconds)
[10:35:00] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[10:38:50] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[10:53:12] *** Joins: ufobat (~martin@dynamic-077-002-045-042.77.2.pool.telefonica.de)
[10:59:51] *** Joins: systemdlete (~systemdle@c-73-48-236-81.hsd1.ca.comcast.net)
[11:00:21] <systemdlete> Hello.  Running into an issue with perl 5.28.1.  Hope this is the right place to ask this.
[11:00:33] <systemdlete> If I run the following from the command shell:
[11:00:34] *** Quits: thunder (~thunder@user/thunder) (Quit: Leaving)
[11:00:44] <systemdlete> perl -e 'use v5.28; use strict; while((my($x) = shift(@ARGV)) != undef){say "arg: $x";}' a b c
[11:00:54] <systemdlete> the loop never terminates.
[11:01:30] <systemdlete> even perl -e 'use v5.28; use strict; while(my($x) = shift(@ARGV)){say "arg: $x";}' a b c
[11:01:35] <systemdlete> does not work, either
[11:01:45] <systemdlete> (I added the test for undef just to make sure...)
[11:01:58] <systemdlete> this is probably somethinig really stupid I am doing
[11:02:30] <systemdlete> I'm hoping someone here can spot it because I've been fumbling around with this for what seems like ages now.
[11:03:04] <systemdlete> I've been able to work around it in some cases by declaring the loop control variable outside the loop.  But that doesn't work here for me.
[11:04:44] <systemdlete> thanks for assistance, if you could.
[11:05:08] <systemdlete> Almost forgot:  This is running on devuan beowulf.
[11:06:26] <lopid> you want for, not while
[11:08:04] <systemdlete> Hmmm.  What about this; see https://www.tutorialspoint.com/perl/perl_shift.htm
[11:08:05] <Paperbot> Link title(s): [ Perl shift Function - Tutorialspoint ]
[11:08:07] <shlomif> perlbot: -f defined
[11:08:15] <perlbot> shlomif: https://perldoc.perl.org/functions/defined
[11:08:26] <shlomif> systemdlete: tutorialspoint is awful
[11:08:32] <systemdlete> I've noticed.
[11:08:43] <lopid> for while: perl -e 'use v5.28; use strict; while ( my $x = shift @ARGV ){say "arg: $x";}' a b c
[11:08:44] <systemdlete> but I've done this in the past without a problem.
[11:09:27] <shlomif> systemdlete: https://perl-begin.org/ and http://perl-tutorial.org/
[11:09:28] <Paperbot> Link title(s): [ Perl Beginners' Site ] [ Perl Tutorial Hub ]
[11:09:37] <systemdlete> lopid: Are you saying to drop all the parens around the $x = shift?
[11:10:31] <systemdlete> good grief.  thanks lopid.
[11:10:58] <systemdlete> so shift has no notion of "wantarray" (prob since it's a built-in)
[11:11:20] <systemdlete> yeah, that def does the trick.
[11:11:36] * systemdlete slaps himself for being an early adopter of perl, c. 1990
[11:12:08] <systemdlete> I don't use perl all the time; in fact, I rarely code these days.  Maybe I need a refresher.  I'll look at the tutorial, shlomi!
[11:12:13] <systemdlete> thanks all!
[11:12:26] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 258 seconds)
[11:12:27] <systemdlete> s/shlomi/shlomif/
[11:13:50] <lopid> i don't think you can pass an undef as an arg, btw. you can pass a blank string, but that would break your while loop (not the for)
[11:13:53] <shlomif> systemdlete: you're welcome 
[11:14:58] <shlomif> systemdlete: there is more than one recommended tutorial
[11:23:22] *** Quits: jplesnik (~jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[11:26:25] * GumbyPAN CPAN Upload: Graphics-Fig-v1.0.5 by SCOOTER https://metacpan.org/release/SCOOTER/Graphics-Fig-v1.0.5
[11:27:42] *** Joins: gggp_ (~gggp@60.10.194.46)
[11:28:01] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[11:28:26] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[11:28:27] *** Joins: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com)
[11:29:42] *** Joins: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[11:30:50] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[11:31:27] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[11:32:21] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[11:32:37] *** Quits: mattil (~mattil@airio.portalify.com) (Read error: Connection reset by peer)
[11:32:56] *** Joins: mattil (~mattil@airio.portalify.com)
[11:34:40] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 258 seconds)
[11:44:02] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[11:47:17] *** Joins: EGD (~egd@user/egd)
[11:56:29] * GumbyPAN CPAN Upload: Healthchecks-0.02 by LDIDRY https://metacpan.org/release/LDIDRY/Healthchecks-0.02
[11:56:47] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 245 seconds)
[12:01:29] * GumbyPAN CPAN Upload: enum-1.12 by NEILB https://metacpan.org/release/NEILB/enum-1.12
[12:06:25] *** Joins: art1 (~romeyke@p200300ccdf0ae100dc8374dbcc7010b4.dip0.t-ipconnect.de)
[12:08:13] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[12:09:11] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 250 seconds)
[12:09:50] *** Quits: Trigon (~reuben@73.127.1.41) (Ping timeout: 256 seconds)
[12:12:56] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[12:16:48] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 276 seconds)
[12:17:01] *** Quits: jaytee80 (~jaytee80@47.190.14.171) (Quit: Client closed)
[12:30:43] *** Joins: gggp__ (~gggp@60.10.23.170)
[12:31:32] * GumbyPAN CPAN Upload: WWW-Form-1.22 by SHLOMIF https://metacpan.org/release/SHLOMIF/WWW-Form-1.22
[12:31:45] *** Joins: Pali (~pali@user/pali)
[12:33:52] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 245 seconds)
[12:34:54] <shlomif> legacy dies hard: https://leejo.github.io/2016/02/22/all_software_is_legacy/
[12:34:54] <Paperbot> Link title(s): [ All Software is Legacy ]
[12:51:09] *** Joins: jplesnik_ (~jplesnik@nat-pool-brq-t.redhat.com)
[12:53:39] *** Quits: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com) (Ping timeout: 252 seconds)
[12:58:21] *** jplesnik_ is now known as jplesnik
[13:07:26] *** woei3140 is now known as woei
[13:09:20] *** Joins: choroba (~E.Choroba@46-13-200-141.customers.tmcz.cz)
[13:10:22] <shlomif> mst: hi! can you code review https://github.com/shlomif/Dir-Manifest then?
[13:10:23] <Paperbot> Link title(s): [ GitHub - shlomif/Dir-Manifest: retrieve texts and blobs from files in a dir - convenient dictionary ]
[13:11:50] <shlomif> https://mlp.fandom.com/wiki/Applejack%27s_%22Day%22_Off
[13:11:51] <Paperbot> Link title(s): [ Applejack's "Day" Off | My Little Pony Friendship is Magic Wiki | Fandom ]
[13:16:36] *** Quits: Pali (~pali@user/pali) (Ping timeout: 276 seconds)
[13:20:43] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[13:39:34] *** Quits: EGD (~egd@user/egd) ()
[13:40:24] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 258 seconds)
[13:45:51] <Mandevil> I need to walk a hash-based tree structure. Should I write my own code to do it or is there some convenient lib that's not too big a dependency?
[13:47:13] <shlomif> Mandevil: there is https://metacpan.org/search?q=dpath
[13:47:15] <Paperbot> Link title(s): [ Search for "dpath" - metacpan.org ]
[13:48:11] <Botje> also maybe Data::Visitor
[13:48:22] <Botje> depends on what kind of walk you need to do
[13:48:31] <Mandevil> I just want a walk, no addressing needed whatsoever.
[13:48:32] <shlomif> Botje++
[13:48:47] <Mandevil> I need to see every value and do something with it.
[13:49:12] <shlomif> Mandevil: use recursion then?
[13:49:22] <Mandevil> Yes, I can write that myself.
[13:49:30] <Mandevil> But the question is ... should I?
[13:55:15] *** Joins: jaggz (~jaggz@user/jaggz)
[13:55:36] <jaggz> any of you get vim's syntax highlighting to recognize indented heredocs?
[13:55:47] <jaggz> https://paste.debian.net/hidden/656b7dfe/
[13:55:49] <Paperbot> Link title(s): [ Debian Pastezone ]
[13:55:55] <jaggz> that chokes for me at line 34
[13:55:57] <shlomif> Mandevil: it may not be worth the trouble of using a cpan package
[13:56:01] *** Joins: akaWolf (~akaWolf@akawolf.org)
[14:04:12] <LeoNerd> mjgardner: short answer: there's no `around` yet. longer answer: it's definitely on my list of things to think about adding - see https://rt.cpan.org/Ticket/Display.html?id=136395
[14:04:14] <Paperbot> Link title(s): [ Bug #136395 for Object-Pad: Support for method modifiers <https://rt.cpan.org/Public/Bug/Display.html?id=136395> ]
[14:06:21] <japh> jaggz, looks like that ~ thing was added in perl 5.26, and https://github.com/vim-perl/vim-perl/commits/dev hasn't been updated
[14:06:23] <Paperbot> Link title(s): [ Commits · vim-perl/vim-perl · GitHub ]
[14:07:28] <japh> oh but it has. https://github.com/vim-perl/vim-perl/commit/47d919b00c5edff92f7d512b4f514572c5cc8947
[14:07:29] <Paperbot> Link title(s): [ Make indented heredoc syntax name clearer · vim-perl/vim-perl@47d919b · GitHub ]
[14:15:44] <Mandevil> Hm, how about this implementation: https://f.perl.bot/p/zropog
[14:15:44] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[14:16:40] *** Quits: gggp__ (~gggp@60.10.23.170) (Read error: Connection reset by peer)
[14:18:04] <Mandevil> Actually, this is not good.
[14:18:10] <Mandevil> I need to modify the values.
[14:18:32] <Botje> (`map { $h->{$_} } keys %$h` better written as `values %$h`)
[14:18:46] <Mandevil> HAh, forgout about values
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:27] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 252 seconds)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:32:57] <Mandevil> OK, new version that allow for modification of the values: https://f.perl.bot/p/8k7n4t
[14:32:57] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[14:33:23] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[14:36:04] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:37:20] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[14:41:04] <jaggz> japh, oh.. wow
[14:41:46] * GumbyPAN CPAN Upload: Object-Pad-SlotAttr-Trigger-0.03 by PEVANS https://metacpan.org/release/PEVANS/Object-Pad-SlotAttr-Trigger-0.03
[14:43:44] <jaggz> thanks :)
[14:44:53] <jaggz> is that complete?  I don't see rules for it ..
[14:45:04] <jaggz> looks like they just made the name more clear
[14:45:54] <jaggz> hey, anyone know how I get an image from a URL (like with LWP $res->content) into an image (using Imager->file() right now to read a file off the disk)
[14:46:12] <jaggz> need to get one from a URL and resize it and stuff
[14:49:33] <Mandevil> And the final form to work as a class method: https://f.perl.bot/p/22zuuu
[14:49:34] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[14:49:48] <jaggz> okay, looks like they have read(data =>)
[14:49:50] <jaggz> kewl
[14:54:01] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (Quit: gamo)
[15:02:04] *** Joins: gamo (~Thunderbi@cm-93-156-61-102.telecable.es)
[15:03:03] <shlomif> Mandevil: «for(my $i = 0; $i < @$h; $i++) {» - seriously, dude??
[15:06:52] <jaggz> i need a way to make larger eastern language glyphs in my terminal (not console)
[15:07:30] <jaggz> like, each glyph to take up 4 or something :)
[15:07:40] <jaggz> 4x
[15:08:55] <shlomif> jaggz: why not use a gui lib or xhtml/css?
[15:09:27] <shlomif> jaggz: you mean CJKV right?
[15:10:30] <jaggz> shlomif, in this case i'm dealing with arabic
[15:10:39] <jaggz> and i'm not native to it so .. eyes can barely make out the stuff
[15:10:53] <jaggz> but i want it to work through ssh
[15:11:11] <shlomif> jaggz: ah, i can read arabic
[15:11:33] <jaggz> like good ol' dos/linux days just in a text console when they'd use a couple lines of ascii to make arabic/farsi (not sure what they did for hebrew) 
[15:11:39] <shlomif> jaggz: ssh x tunnelling?
[15:12:09] <jaggz> although if some way of assembling some pretty unicode to make the larger glyphs.. 
[15:12:11] <jaggz> nooo
[15:12:37] <jaggz> i'm just running my perl script at commandline for stuff.. sometimes ssh'ing from my phone
[15:13:09] <shlomif> jaggz: a phone has xhtml5+css
[15:13:27] <jaggz> grr
[15:13:35] <Mandevil> shlomif: ?
[15:13:47] <Mandevil> shlomif: Anything wrong with that?
[15:14:44] <shlomif> Mandevil: yes: https://perl-begin.org/tutorials/bad-elements/#c-style-for-loops
[15:14:45] <Paperbot> Link title(s): [ Perl Elements to Avoid - The Perl Beginners’ Site ]
[15:15:47] <Mandevil> shlomif: That doesn't answer the question "what's wrong with that".
[15:16:42] <jaggz> yeah it doesn't say anything's actually wrong with it
[15:17:38] <jaggz> Mandevil, in your case a range would be more concise and even more legible [not exactly arguably.. pretty much a given]
[15:17:50] <Mandevil> Yeah, it could be.
[15:17:51] <shlomif> Mandevil: it is less idiomatic and more cluttered
[15:18:11] <Mandevil> Personally, I never understood or remember the $#array thing.
[15:18:17] <jaggz> schelcj, I do actually generate HTML output too.. but I'm perfectly happy in my text console and would like to stay there :)
[15:18:27] <jaggz> https://i.imgur.com/GpahKcj.png
[15:18:52] * shlomif thinks the "people" here can be stupid
[15:19:24] <tm604> Mandevil: you can skip the $#array thing by using `keys`, e.g. for my $idx (keys @array)
[15:19:45] <jaggz> oh neat
[15:20:21] <Mandevil> Hm, keys @array is new to me too
[15:20:31] <Mandevil> My perl knowledge is too spotty it seems.
[15:20:48] <Mandevil> Where can I order my "Complete Perl" online course?
[15:20:50] <tm604> It's not widely used
[15:21:08] <jaggz> Mandevil, what's $#array do?
[15:21:32] <jaggz> don't think; answer!
[15:21:34] <Mandevil> It gives you the index of the last element?
[15:21:36] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 258 seconds)
[15:22:00] <jaggz> okay.. well you asked a question .. but good. :)
[15:22:48] <jaggz> so you always just remember that it's just like your happy length(@array) but -1
[15:22:50] <shlomif> jaggz: and i want a pony: https://www.shlomifish.org/humour/fortunes/show.cgi?id=how-are-flying-unicorn-ponies-called ; i'd like terminals to KISS
[15:22:51] <Paperbot> Link title(s): [ How are flying unicorn ponies called? - Fortune ]
[15:22:54] <Mandevil> But i like the keys @array thing
[15:22:54] <jaggz> +1 would be dangerous!  
[15:22:59] <Mandevil> That's definitely much nicer.
[15:22:59] <shlomif> perlbot: KISS
[15:23:00] <perlbot> shlomif: *kiss*
[15:23:11] <jaggz> go off the end of an array.. crash your C!  out of bounds memory! danger
[15:23:32] <Mandevil> I used to write C eons ago.
[15:23:37] <tm604> jaggz: with a sparse array, you can't guarantee @x == 1 + $#x
[15:23:44] <jaggz> Mandevil, yeah.. hence the love of for() stuff :)
[15:24:02] <Mandevil> I use foreach whenever I don't need the index (which is most of the time).
[15:24:04] <tm604> fortunately no one uses delete with arrays any more, so that's usually not an issue
[15:24:11] <jaggz> tm604, and with perl you can go ahead and reference stuff out there anyway.. so whatever :)
[15:24:29] <jaggz> the point is C coder mental memory for $#foo :)
[15:24:46] <shlomif> jaggz: otherwise you get monstrocities such as C++: https://developers.slashdot.org/story/17/11/27/039226/why-esr-hates-c-respects-java-and-thinks-go-but-not-rust-will-replace-c
[15:24:48] <Paperbot> Link title(s): [ Why ESR Hates C++, Respects Java, and Thinks Go (But Not Rust) Will Replace C - Slashdot ]
[15:24:54] *** Quits: jplesnik (~jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[15:25:16] <Mandevil> I had to write C++ once.
[15:25:21] <Mandevil> And it was enough for life.
[15:25:32] <shlomif> Mandevil: exactly
[15:26:40] <tm604> C++ is best language
[15:27:17] <jaggz> shorne, you so silly.
[15:27:23] <shlomif> tm604: the best at being sucky
[15:27:34] <Mandevil> It's god damn complex.
[15:27:42] <Mandevil> Even my simple uni project was a nightmare.
[15:27:58] <Mandevil> I have distinct memory of trying to get something work with my prof.
[15:28:12] <Mandevil> Even for him it was pretty tough to figure it out.
[15:28:32] <jaggz> back in the 90's when we (at least here where we are) didn't have the means or knowhow, in dos/text terminals, to handle persian, for instance, we had the stuff just written out in 2 or 3 lines of ascii
[15:29:32] <shlomif> Mandevil: i wrote my uni projects in C, perl5, docbook/xml, etc
[15:29:33] <jaggz> i'm sure that stuff's still around; just don't know the name of it
[15:30:06] <Mandevil> shlomif: I had to use Java, C and C++ IIRC.
[15:30:20] <Mandevil> My final project was in C however.
[15:30:43] <shlomif> Mandevil: ah, java... you're young
[15:30:53] <Mandevil> No, I'm not.
[15:31:05] <Mandevil> Java's been here for quite some time already.
[15:31:15] <Mandevil> I remember buying a book on Java in Toronto in 1994
[15:33:45] <shlomif> Mandevil: java has some legitimate usecases, but i think enterprise sw does nothing useful: https://www.shlomifish.org/humour/bits/Emma-Watson-applying-for-a-software-dev-job/
[15:33:46] <Paperbot> Link title(s): [ Emma Watson getting interviewed for a software developer job - Shlomi Fish’s Homesite ]
[15:35:32] <shlomif> Mandevil: i remember the "write once, run anywhere" slogan
[15:36:47] <Mandevil> I am not in the business, so fortunately I didn't have to write any more Java.
[15:38:24] <shlomif> Mandevil: heh
[15:39:47] <Mandevil> But I actually use an intricate client for a Nokia equipment. It's written in Java and it's really impressive piece of software. So I think it's possible to actually write software in Java ;-)
[15:39:50] <shlomif> Mandevil: i use vnu and epubchecker which are written in java
[15:41:42] *** Joins: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com)
[15:45:07] <jaggz> schelcj, I can't read this unicorn page.. bleh
[15:47:03] *** Joins: gugod (gugod@li7-202.members.linode.com)
[15:48:03] <shlomif> jaggz: do you mean me?
[15:48:54] *** Joins: gggp (~gggp@60.10.194.46)
[15:49:09] <shlomif> jaggz: my name is "shlomi" - not "schlomi"
[15:49:39] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 252 seconds)
[15:50:35] *** Joins: gggp_ (~gggp@60.10.23.170)
[15:50:48] *** Quits: lesihctej (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[15:52:24] <shlomif> https://www.shlomifish.org/meta/FAQ/your_name.xhtml
[15:52:25] <Paperbot> Link title(s): [ Shlomi Fish’s FAQ - What can you say about your name? ]
[15:52:42] <jaggz> ugh..yeah.. tab completion and blurry eyes
[15:52:53] <shlomif> jaggz: ah
[15:54:11] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[15:54:17] <jaggz> well, my interlaced image upload didn't work right https://i.imgur.com/YTv0AMv.jpg
[15:55:17] <jaggz> i was kinda hoping for that bug.  it only drew the first pass of interlaced lines (mostly.. some hits failed to get to the esp8266)
[15:55:37] <jaggz> if it worked it would have done the other lines, overwriting the attic fan text notice
[15:57:32] *** Quits: horsepatat (~horsepata@212.3.198.101) (Read error: Connection reset by peer)
[16:05:28] *** Joins: gggp__ (~gggp@111.63.14.121)
[16:08:54] *** Quits: gggp_ (~gggp@60.10.23.170) (Ping timeout: 252 seconds)
[16:13:24] *** Joins: gggp_ (~gggp@60.10.194.46)
[16:16:34] *** Quits: gggp__ (~gggp@111.63.14.121) (Ping timeout: 240 seconds)
[16:22:37] *** Quits: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com) (Quit: Leaving)
[16:23:11] *** Joins: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com)
[16:24:51] *** Joins: jplesnik_ (~jplesnik@nat-pool-brq-t.redhat.com)
[16:25:44] <shlomif> jaggz: there is https://jupyter.org/ too
[16:25:44] <Paperbot> Link title(s): [ Project Jupyter | Home ]
[16:27:36] *** Quits: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com) (Ping timeout: 252 seconds)
[16:28:58] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:29:32] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:40:43] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[16:41:58] * GumbyPAN CPAN Upload: FASTX-Reader-1.1.0 by PROCH https://metacpan.org/release/PROCH/FASTX-Reader-1.1.0
[16:48:04] *** Joins: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu)
[16:49:58] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:50:14] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:55:52] *** Joins: gggp__ (~gggp@60.10.194.46)
[16:59:10] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:59:44] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[16:59:48] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:04:18] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 240 seconds)
[17:10:36] *** Quits: v` (~v@user/ctrl) (Ping timeout: 268 seconds)
[17:16:36] *** Quits: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu) (Ping timeout: 258 seconds)
[17:27:03] * GumbyPAN CPAN Upload: Proch-N50-1.4.0 by PROCH https://metacpan.org/release/PROCH/Proch-N50-1.4.0
[17:28:03] *** Quits: anthk_ (~anthk_@92.176.105.30) (Quit: anthk_)
[17:30:15] *** Joins: anthk_ (~anthk_@92.176.105.30)
[17:35:35] *** Joins: jetchisel (jetchisel@user/jetchisel)
[17:38:31] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Remote host closed the connection)
[17:38:37] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:39:10] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[17:44:33] *** Joins: bmeneg (~bmeneg@2804:828:f233:5a4b:7e83:50f:9dc1:719b)
[17:50:53] <ens> i was coding python the other day to see what it was all about, i went to delete a key from a hash and it threw a runtime error because i didn't check if the key existed in the hash first... 
[17:51:07] <ens> why does perl not adopt this amazingly well thought out boilerplate-code generating strategy?
[17:52:06] * GumbyPAN CPAN Upload: DNS-Unbound-0.25_02 by FELIPE https://metacpan.org/release/FELIPE/DNS-Unbound-0.25_02
[17:52:39] <ilmari> hash.pop('key', None)
[17:52:50] <Altreus> perl has much better boilerplate-code-generating strategies
[17:54:08] <shlomif> Altreus: heh
[17:54:58] <shlomif> https://www.shlomifish.org/philosophy/computers/your-programming-language-must-suck/
[17:54:59] <Paperbot> Link title(s): [ Your Programming Language Must Suck - Shlomi Fish’s Homesite ]
[17:57:14] <Altreus> reminds of the "capabilities" essay
[17:57:16] <Altreus> me
[18:01:04] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 258 seconds)
[18:02:07] * GumbyPAN CPAN Upload: MIME-DB-v1.49.0 by TDRUGEON https://metacpan.org/release/TDRUGEON/MIME-DB-v1.49.0
[18:02:07] * GumbyPAN CPAN Upload: Mojolicious-Plugin-Restify-OtherActions-0.04 by EBRUNI https://metacpan.org/release/EBRUNI/Mojolicious-Plugin-Restify-OtherActions-0.04
[18:04:22] <shlomif> Altreus: which one? url?
[18:07:07] * GumbyPAN CPAN Upload: DNS-Unbound-0.25_03 by FELIPE https://metacpan.org/release/FELIPE/DNS-Unbound-0.25_03
[18:07:08] * GumbyPAN CPAN Upload: RT-Extension-MessageSizeLimit-0.03 by ELACOUR https://metacpan.org/release/ELACOUR/RT-Extension-MessageSizeLimit-0.03
[18:07:29] <Altreus> alas I only vaguely recall it
[18:07:33] <Altreus> I can try to find it
[18:08:11] <shlomif> Altreus: ah
[18:09:44] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[18:10:10] <Altreus> not sure how to search for it :<
[18:10:21] <Altreus> It probably has many quotable phrases, but I don't know any of them
[18:12:37] <Altreus> Maybe someone else knows what I'm on about and will pipe up :)
[18:12:43] <Altreus> I'm sure I found it in here in the first place
[18:15:46] *** Joins: mattil (~mattilinn@87-92-5-183.bb.dnainternet.fi)
[18:16:23] *** Joins: gggp_ (~gggp@111.63.14.121)
[18:16:58] *** Joins: gryphn (~gryphon@84.17.45.19)
[18:19:51] *** Quits: gggp__ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[18:20:22] *** Joins: Su-Shee (~Susanne@p4ff49336.dip0.t-ipconnect.de)
[18:20:47] *** Joins: toretto_ (~0xe3b7@45.15.16.60)
[18:22:44] *** Quits: Su-Shee_ (~Susanne@p4ffc7915.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[18:23:30] *** Quits: toretto (~0xe3b7@user/toretto) (Ping timeout: 240 seconds)
[18:27:03] *** Quits: toretto_ (~0xe3b7@45.15.16.60) (Quit: leaving)
[18:27:10] * GumbyPAN CPAN Upload: Mojo-Leds-1.04 by EBRUNI https://metacpan.org/release/EBRUNI/Mojo-Leds-1.04
[18:32:10] * GumbyPAN CPAN Upload: Proch-N50-1.4.1 by PROCH https://metacpan.org/release/PROCH/Proch-N50-1.4.1
[18:32:50] <shlomif> https://metacpan.org/release/EBRUNI/Mojo-Leds-1.04/view/lib/Mojo/Leds.pm -no idea what it's good for
[18:32:51] <Paperbot> Link title(s): [ Mojo::Leds - Leds aka Light Environment (emi) for Development System based on Mojolicious - metac... ]
[18:33:25] <Altreus> Not documented = not getting used
[18:33:56] <shlomif> Altreus: s/=/->/
[18:35:32] <choroba> it works in the <- direction, too ;-)
[18:37:09] <shlomif> «There’s a lot of wonderful, useful code buried on sourceforge somewhere that nobody uses because it was created by programmers who don’t write very well (or don’t write at all), and so nobody knows what they’ve done and their brilliant code languishes.» -- https://www.joelonsoftware.com/2005/01/02/advice-for-computer-science-college-students/
[18:37:10] <Paperbot> Link title(s): [ Advice for Computer Science College Students – Joel on Software ]
[18:38:51] <shlomif> choroba: unused software can have good docs
[18:39:53] <choroba> so it depends on the semantics of the arrow...
[18:40:18] <choroba> I interpreted it as "often leads to"
[18:40:29] <Altreus> I think in boolean logic it means implies?
[18:40:43] <shlomif> choroba: A -> B "if A then B"
[18:41:22] <Altreus> yes, it's directional equality really
[18:41:44] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:42:57] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[18:43:10] <choroba> yeah, but logic is too simple to capture the reality :)
[18:43:35] <Altreus> that's why programming is hard
[18:44:48] *** Quits: gggp_ (~gggp@111.63.14.121) (Ping timeout: 256 seconds)
[18:48:04] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 272 seconds)
[18:51:03] <shlomif> Altreus: "let's go shopping" ;) https://www.perl.com/pub/2007/12/06/soto-11.html/
[18:51:03] <Paperbot> Link title(s): [ Programming is Hard, Let's Go Scripting... ]
[18:51:46] *** Quits: jplesnik_ (~jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[18:57:06] *** Quits: Manderson (~manderson@047-028-019-189.res.spectrum.com) (Read error: Connection reset by peer)
[18:57:13] * GumbyPAN CPAN Upload: File-Symlink-Relative-0.005 by WYANT https://metacpan.org/release/WYANT/File-Symlink-Relative-0.005
[19:00:21] *** Quits: art1 (~romeyke@p200300ccdf0ae100dc8374dbcc7010b4.dip0.t-ipconnect.de) (Quit: Leaving.)
[19:03:02] *** Quits: mattil (~mattilinn@87-92-5-183.bb.dnainternet.fi) (Quit: Leaving)
[19:11:28] *** shlomif is now known as shlomif2
[19:11:31] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[19:11:48] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[19:12:59] *** shlomif2 is now known as shlomif
[19:14:37] *** Quits: gce108 (~gce@user/gce108) (Remote host closed the connection)
[19:29:01] *** Joins: jaytee80 (~jaytee80@47.190.14.171)
[19:32:12] *** Quits: habamax (~habamax@user/habamax) (Ping timeout: 245 seconds)
[19:38:07] *** Joins: gggp (~gggp@60.10.194.46)
[19:38:34] *** Joins: thrig (~thrig@65.113.153.50)
[19:45:31] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:45:32] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[19:45:41] *** Joins: thrig (~thrig@65.113.153.50)
[19:46:18] * GumbyPAN CPAN Upload: JSONSchema-Validator-0.005 by LOGIONIZ https://metacpan.org/release/LOGIONIZ/JSONSchema-Validator-0.005
[19:48:03] *** Joins: randir (~randir@95-25-151-74.broadband.corbina.ru)
[19:51:19] * GumbyPAN CPAN Upload: CallBackery-0.38.14 by OETIKER https://metacpan.org/release/OETIKER/CallBackery-0.38.14
[19:55:43] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[19:58:49] *** Joins: Manderson (~manderson@66.228.19.117)
[19:59:40] *** Joins: thrig (~thrig@65.113.153.50)
[20:01:20] * GumbyPAN CPAN Upload: CallBackery-0.38.15 by OETIKER https://metacpan.org/release/OETIKER/CallBackery-0.38.15
[20:01:40] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[20:06:17] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 250 seconds)
[20:32:23] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[20:32:32] *** Joins: thrig (~thrig@65.113.153.50)
[20:37:38] *** Quits: edef (~quassel@user/edef) (Ping timeout: 272 seconds)
[20:40:00] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[20:45:37] *** Joins: edef (~quassel@user/edef)
[20:47:37] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 245 seconds)
[20:51:22] *** Quits: edef (~quassel@user/edef) (Ping timeout: 268 seconds)
[20:53:36] *** Quits: choroba (~E.Choroba@46-13-200-141.customers.tmcz.cz) (Quit: Leaving)
[20:54:41] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[20:56:55] *** Quits: ufobat (~martin@dynamic-077-002-045-042.77.2.pool.telefonica.de) (Ping timeout: 268 seconds)
[20:58:45] *** Joins: Pali (~pali@user/pali)
[21:03:16] *** Quits: woei (~woei31@144.248.22.115) (Quit: Client closed)
[21:03:31] *** Joins: woei (~woei@144.248.22.115)
[21:11:06] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[21:13:18] *** Joins: edef (~quassel@user/edef)
[21:13:18] *** Quits: edef (~quassel@user/edef) (Client Quit)
[21:14:17] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[21:16:23] <jaytee80> If you had a program that hangs on exit() where would you be looking first?
[21:16:37] <LeoNerd> END blocks or DESTROY methods
[21:16:45] <LeoNerd> Though first I'd strace it to see if it was stuck on a system call
[21:18:25] <jaytee80> Hanging on a poll. Hmmm
[21:18:52] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 258 seconds)
[21:19:21] <Adura> It voted wrong.
[21:19:47] <thrig> hanging chads?
[21:20:59] <jaytee80> poll(30.... looks up to see what fd=30 is... /dev/null. Ugh.
[21:21:11] <revhippie> neat
[21:21:38] <jaytee80> fml
[21:22:09] <LeoNerd> 30 means a list of 30 poll structures was passed into the poll()call
[21:22:20] <jaytee80> poll([{fd=30, events=POLLIN}], 1, -1
[21:22:26] <LeoNerd> Oh, right. :)
[21:22:30] <jaytee80> Pretty sure that means fd
[21:22:37] <jaytee80> I just wrote it lazily above
[21:22:39] <LeoNerd> Yeah, in that case. And also no timeout :/
[21:23:00] <LeoNerd> Wait.. er... why is your /dev/null not read-ready? That should always be the case
[21:23:40] <jaytee80> I'm like why is /dev/null even being used? Maybe the fd gets reused somewhere and I didn't see it?
[21:23:52] <revhippie> "I ask for nothing!"  "And you shall receive it... IN ABUNDANCE!"
[21:25:10] <LeoNerd> Well, in any case you've worked out what the file descriptor is... now you might want to rerun the program and find out what bit of code opened fd 30, so you can see what module that was.
[21:26:12] <shlomif> revhippie: heh
[21:26:22] <shlomif> revhippie++
[21:26:31] <jaytee80> Yeah, I'm going to go in and start turning off part of code and see where the hang goes away. Kinda half way through that now. May be quicker than looking at every open file.
[21:26:57] <jaytee80> Although I see it writing, so my log lib may be using it. But... why would my logger ever READ the log?
[21:28:00] <jaytee80> Well, it seems this fd IS reused.
[21:28:10] <Altreus> Is it rotating the log file or something?
[21:28:28] <jaytee80> No, I use externals for that.
[21:32:02] <jaytee80> It seems FFI::Platypus may be involved. The last bit of fd 30 before hang is trying to read /usr/lib64/perl5/auto/share/dist/FFI-Platypus/config.pl
[21:32:25] <jaytee80> And there is no subsequent close.
[21:32:35] <thrig> well platypus are pretty strange
[21:33:00] <LeoNerd> Which again raises the question of why polling it for readability just hangs
[21:33:05] <LeoNerd> A regular file is always readable too
[21:34:06] *** Joins: mattil (~mattil@87-92-157-158.rev.dnainternet.fi)
[21:35:31] *** Quits: jaytee80 (~jaytee80@47.190.14.171) (Quit: Client closed)
[21:35:41] *** Joins: jaytee80 (~jaytee80@47.190.14.171)
[21:38:01] *** rozie_ is now known as rozie
[21:38:11] <perlbot> jaytee80 pasted a new file at https://l.perl.bot/p/5gxxme - strace
[21:38:14] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
[21:38:25] *** Quits: mattil (~mattil@87-92-157-158.rev.dnainternet.fi) (Ping timeout: 258 seconds)
[21:38:55] <jaytee80> So most recent use of fd 30 is FFI::Platypus, then it closes it, then fnctl on it a few more times, then nothing until exit() is called where it hangs.
[21:40:39] <xq> thats not /dev/null though
[21:42:29] <xq> fd 30 is created by eventfd2()
[21:45:36] <jaytee80> I'm not sure strace is getting me anywhere unless I can figure out where in code this is created but not then closed.
[21:46:24] <xq> find out where the eventfd2() is being called from
[21:46:31] *** Quits: bmeneg (~bmeneg@2804:828:f233:5a4b:7e83:50f:9dc1:719b) (Remote host closed the connection)
[21:46:40] <revhippie> jaytee80: strace -y will use file paths instead of descriptors
[21:47:32] <xq> that thing (fd 30) is an abstract counter, there is no path
[21:47:41] <revhippie> well, nuts.
[21:48:40] *** Joins: gggp_ (~gggp@123.113.184.133)
[21:51:52] *** Joins: bmeneg (~bmeneg@2804:828:f233:5a4b:7e83:50f:9dc1:719b)
[21:52:22] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 272 seconds)
[21:55:34] *** Joins: P1RATEZ (~piratez@user/p1ratez)
[21:55:37] *** Joins: habamax (~habamax@broadband-109-173-44-6.ip.moscow.rt.ru)
[21:55:37] *** Quits: habamax (~habamax@broadband-109-173-44-6.ip.moscow.rt.ru) (Changing host)
[21:55:37] *** Joins: habamax (~habamax@user/habamax)
[21:59:07] <ehuelsmann[m]> quick question: all modules in Workflow are Perl 5.6 compatible (on the syntax -- except one). I'm switching it from `use base` to `use parent`. `parent` was added to core in 5.10. should I change `use 5.006` to `use 5.010`, or is `parent` a dual life module?
[21:59:17] <ehuelsmann[m]> (and if the latter, how do I tell?)
[21:59:18] <Grinnz> it's dual life
[21:59:32] <Grinnz> whether it's available as its own cpan distribution
[21:59:37] <ehuelsmann[m]> ok. good. then I can leave the minimum perl versions as it is.
[21:59:44] <Grinnz> https://metacpan.org/pod/parent is in the parent dist, not the perl dist
[21:59:44] <Paperbot> Link title(s): [ parent - Establish an ISA relationship with base classes at compile time - metacpan.org ]
[22:00:04] <ehuelsmann[m]> ok. that's clear then. thanks!
[22:02:25] *** Joins: willow (~willow@173-228-31-194.dsl.static.fusionbroadband.com)
[22:02:34] <willow> is there a site like wooledge.org for perl?
[22:03:34] *** Quits: thrig (~thrig@65.113.153.50) (Quit: leaving)
[22:04:17] *** Joins: thrig (~thrig@65.113.153.50)
[22:06:48] <jaytee80> Ok, so this counter object is created as fd 30, and never really used. But when exit() is called, it gets polled? So I gotta find a DESTROY somewhere with a poll in it I guess.
[22:07:32] <thrig> undef all the things
[22:08:12] <xq> this is a textbook case where you should use a debugger
[22:08:25] <jaytee80> And it says poll says it's readable if counter val is >0, and since it was never read from fd = 0
[22:09:34] <shlomif> willow: hi
[22:10:01] *** Joins: Guest9 (~Guest9@103.240.204.119)
[22:10:11] <xq> assuming that your program is pure perl code, the perl debugger will allow to find the source of the problem quickly
[22:10:19] *** Quits: Guest9 (~Guest9@103.240.204.119) (Client Quit)
[22:10:24] <Altreus> that sounds optimistic
[22:10:25] <shlomif> maybe https://perl-begin.org/
[22:10:25] <Paperbot> Link title(s): [ Perl Beginners' Site ]
[22:11:08] <xq> yeah I guess if the platypuses are involved it can't be pure perl
[22:11:26] <xq> platypusi?
[22:11:41] <jaytee80> platypii
[22:12:09] <shlomif> willow: your nickname reminds me of https://buffy.fandom.com/wiki/Willow_Rosenberg
[22:12:10] <Paperbot> Link title(s): [ Willow Rosenberg | Buffyverse Wiki | Fandom ]
[22:12:19] <Altreus> It also sounds optimistic to get the debugger to help after exit()
[22:12:55] <xq> is it not smart enough to step through destructors?
[22:13:02] <jaytee80> It's been a decade since I've run gdb.
[22:13:14] <thrig> platypen
[22:13:28] <Altreus> Dunno honestly
[22:13:43] <xq> jaytee80: what are you running?
[22:14:00] <Altreus> I don't think `s` on an exit() would go into DESTROYs
[22:14:13] <Altreus> and `n` would try to run them... dunno how you'd stop *in* them
[22:14:45] <jaytee80> xq: um software? Can you be more specific?
[22:15:11] <xq> is it some known perl application?
[22:16:19] <xq> it's hard to provide any help with so little information
[22:16:21] <alh> Devel::Trace and perl -d:Trace yoourthing.pl could offer some pointers as to what's hanging where (but it will be loud)
[22:17:02] <jaytee80> No, it's satellite ground station control software I write. I added a new comm layer that drivers are using. New comm layer is using ZMQ::FFI which necessitates stuff like Platypus, EV, and (gasp) threads.
[22:17:19] <jaytee80> But this is the damn client so at least no threads.
[22:19:44] <jaytee80> Commenting out all the EV code does nothing. I'm trying to comment out the ZMQ next. 
[22:20:13] <xq> so unrelated question, but why are you using EV directly?
[22:20:43] <xq> this is way too low level a thing than a typical perl application should be using
[22:20:52] * ehuelsmann[m] will leave it to others to rant about threads
[22:21:46] <alh> You could maybe try something like $SIG{INT} = sub { require Carp; Carp::cluck("what is happening"); exit; }; 
[22:21:52] <alh> Then signal your program and see if you get a helpful stack trace
[22:22:02] <xq> there are easy to use, friendly event loops like IO::Async, Mojo::IOLoop, POE
[22:22:32] <jaytee80> I pulled this from the perl example code here: https://zguide.zeromq.org/docs/chapter3/#A-Load-Balancing-Message-Broker
[22:22:36] <Paperbot> Link title(s): [ 3. Advanced Request-Reply Patterns | ØMQ - The Guide ]
[22:23:25] <xq> anyevent, threads and ev
[22:23:25] <xq> nice
[22:23:26] <xq> (no)
[22:23:38] <xq> jaytee80: that example code is bad
[22:23:46] <jaytee80> yeah, I know. But I need ZMQ, and that's kinda required. 
[22:23:48] <Altreus> Threads are not for using
[22:24:19] <Altreus> I'm not going to go as far as saying they might be causing your problem, especially if anyevent is there to take the blame instead
[22:24:40] <jaytee80> Client doesn't use threads, though. Hang on, I'll post that code.
[22:25:23] <Altreus> when you see "threads", read "win32-fork-hack"
[22:25:34] *** Quits: gggp_ (~gggp@123.113.184.133) (Ping timeout: 258 seconds)
[22:25:43] <thrig> throat warbler mangrove
[22:26:05] <xq> perlbot: zmq
[22:26:06] <perlbot> xq: No factoid found. Did you mean one of these: [cms] [jmj] [omg] [png] [rms] [rnc] [tnx] [vms] [ding] [dong]
[22:26:07] <Altreus> it's just the name of the module, sir
[22:26:10] <xq> perlbot: zeromq
[22:26:10] <perlbot> xq: No factoid found. Did you mean one of these: [branes] [drink] [drunk] [forums] [french] [grinnz] [turing] [wrong] [orinoco] [warnock]
[22:26:41] <jaytee80> https://l.perl.bot/raw/4nfnbq
[22:26:51] <ilmari> Altreus: well, leont is working on making them more useful (ithreads, not threads.pm)
[22:26:57] <Grinnz> jaytee80: yeah so this would be trivial with IO::Async and Futures
[22:27:18] <xq> two async zmq modules show up in search
[22:27:36] <xq> https://metacpan.org/pod/Net::Async::ZMQ
[22:27:37] <Paperbot> Link title(s): [ Net::Async::ZMQ - IO::Async support for ZeroMQ - metacpan.org ]
[22:27:42] <xq> https://metacpan.org/pod/POEx::ZMQ
[22:27:42] <Paperbot> Link title(s): [ POEx::ZMQ - Asynchronous ZeroMQ sockets for POE - metacpan.org ]
[22:27:56] <jaytee80> *BUT*, this code doesn't cause the problem. I can comment it out, make command() just return "BULLSHIT" and it still hangs on exit.
[22:28:18] <Grinnz> what about if you comment out loading EV and AnyEvent?
[22:28:40] <jaytee80> Did that, no change. That's why I'm about to comment out ZMQ::FFI and see
[22:29:34] <ilmari> xq: wow, a Net::Async::* module not written by LeoNerd or tom_m :D
[22:29:46] <LeoNerd> There are a few ;)
[22:29:51] <xq> ilmari: my thoughts exactly
[22:29:51] <leont> lehmann rather hates threads, I'd be surprised if EV works well with them
[22:30:46] <jaytee80> Commenting out ZMQ::FFI and now the code exits like expected. WTF.
[22:31:07] <xq> misbehaving platypii?
[22:31:13] <jaytee80> seems so
[22:31:57] <jaytee80> The ZMQ::FFI guys never respond over on github unless you're contributing stuff, so this kinda mega sucks.
[22:32:24] <jaytee80> (I did commit some helpers recently to enable the crypto on ZMQ connections, but no questions after that have been answered)
[22:32:36] <xq> I used that module a couple times, it worked fine everytime without issues
[22:33:41] <jaytee80> It certainly works fine in the server I'm talking to, just the client is hanging on exit.
[22:34:29] <xq> jaytee80: but I want to stress this enough to you, if you are writing a event-driven application in perl in 2021 you should not be using EV directly, OR AnyEvent
[22:34:51] <xq> rewrite this while you still can, and thank yourself later
[22:35:23] <LeoNerd> +1
[22:35:43] <thrig> asyunk cost fallacy
[22:35:55] <xq> thrig++ lol
[22:36:06] *** Quits: woei (~woei@144.248.22.115) (Quit: Client closed)
[22:36:20] *** Joins: woei (~woei@144.248.22.115)
[22:36:28] <jaytee80> I would prefer to resolve this exit hang first, though. 
[22:36:46] <Grinnz> you can either use the Net::Async::ZMQ module, or work directly with IO::Async::Socket
[22:36:53] <ehuelsmann[m]> why? I mean, you'll be changing the code later anyway?
[22:36:55] <Grinnz> either should be able to replace what you're doing here
[22:38:39] *** Joins: EGD (~egd@user/egd)
[22:39:11] <xq> jaytee80: I would say that there is a nonzero chance that whatever issue you are having will be resolved by the above suggestion
[22:40:19] <xq> also, what perl is this, what OS and how did you install the non-perl zmq parts?
[22:41:02] <jaytee80> Can't, it doesn't have z85_encode/decode bindings that I need for crypto on the ZMQ lib it uses. 
[22:41:46] <ehuelsmann[m]> https://metacpan.org/pod/Convert::Z85
[22:41:46] <Paperbot> Link title(s): [ Convert::Z85 - Encode and decode Z85 strings - metacpan.org ]
[22:41:50] <xq> "it doesn't have" = what doesn't have?
[22:42:14] <jaytee80> ZMQ::LibZMQ4 that is used by the Net::Async::ZMQ module
[22:43:03] <jaytee80> or the curve_keypair binding
[22:43:32] <Grinnz> jaytee80: hence the IO::Async::Socket option I mentioned, which directly replaces your use of EV/AnyEvent
[22:44:29] <Grinnz> and may replace your use of threads depending what you're using those for
[22:46:33] <xq> jaytee80: that may be true, but worth trying I think. From what I see, Net::Async::ZMQ::Socket->new takes a $socket object and a coderef, and inside a coderef it you call various recv and send functions
[22:46:58] <xq> will it care that $socket is created by ZMQ::FFI and not the module used in example? I'm not sure it will
[22:47:13] <xq> same for send/recv calls in the coderef
[22:47:32] <xq> and there is also what Grinnz suggested
[22:48:21] <revhippie> . o O ( platypodes? )
[22:48:56] <thrig> those would be platypus feet
[22:49:02] <thrig> or tentacles?
[22:49:26] <revhippie> i imagine platypodiatrists have to be careful of the spurs.
[22:53:13] <jaytee80> Welp, I fixed my problem. No hang on exit.
[22:53:34] <jaytee80> Apparently my socket is never going out of scope to auto-destroy. 
[22:54:29] <jaytee80> NOW, I can give some thought to using better async lib.
[22:55:32] <LeoNerd> :)
[22:56:22] * gordonfish knows of a real nice one
[22:57:43] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[23:01:07] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:19:21] *** Joins: magla (~gelignite@55d4f84b.access.ecotel.net)
[23:20:00] * Grinnz spends 10 minutes trying to figure out why a process was ended without restarting it on monday, conclusion: i'm an idiot
[23:27:36] *** Quits: deadmarshal (~deadmarsh@95.38.118.162) (Ping timeout: 276 seconds)
[23:27:48] <gordonfish> Cue Garfield
[23:28:51] *** Joins: furrymcgee (~devuan@31.179.186.66)
[23:29:08] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[23:29:43] <shlomif> gordonfish: cue -> Q -> https://mlp.fandom.com/wiki/Discord
[23:29:45] <Paperbot> Link title(s): [ Discord | My Little Pony Friendship is Magic Wiki | Fandom ]
[23:30:55] <shlomif> same actor
[23:32:44] <jaytee80> Before the link... lemmie see if I can remember name.... John DeLacie ?
[23:33:30] <jaytee80> John De Lancie, I was close
[23:34:18] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 240 seconds)
[23:34:48] *** Quits: habamax (~habamax@user/habamax) (Quit: leaving)
[23:34:53] *** Joins: zakame (~zakame@user/zakame)
[23:35:28] <shlomif> jaytee80: “I can spell ‘Emma Watson’ easily enough, but how the hell do I spell ‘Kira Nightly’?” ;)
[23:36:17] <jaytee80> Kiera Knightly
[23:36:45] <jaytee80> Holy crap guessed that one right too
[23:37:22] <jaytee80> Oops, Knightley
[23:37:49] <jaytee80> Oops Keira
[23:37:54] <jaytee80> Well I guess I just suck then
[23:38:04] <shlomif> https://en.wikipedia.org/wiki/Keira_Knightley - aye
[23:38:05] <Paperbot> Link title(s): [ Keira Knightley - Wikipedia ]
[23:38:27] <jaytee80> But can you spell her mine ey
[23:39:07] <shlomif> Hermione?
[23:40:46] *** Joins: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[23:40:51] <shlomif> well, off to sleep
[23:41:04] *** Quits: jaytee80 (~jaytee80@47.190.14.171) (Quit: Client closed)
[23:41:16] *** Joins: jaytee80 (~jaytee80@47.190.14.171)
[23:41:59] <shlomif> good night sweet hacker princes and princesses
[23:42:54] *** Joins: anthk_ (~anthk_@92.176.105.30)
[23:49:08] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Ping timeout: 258 seconds)
[23:54:28] *** Joins: deadmarshal (~deadmarsh@95.38.118.162)
