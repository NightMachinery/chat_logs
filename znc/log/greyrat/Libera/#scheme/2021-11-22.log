[00:00:43] *** Quits: jao (~jao@37.120.199.36) (Remote host closed the connection)
[00:05:23] *** Joins: xgqtd (~user@static62133140007.ostnet.pl)
[00:08:18] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[00:08:41] *** Joins: cjb (~cjb@user/cjb)
[00:13:13] *** Joins: badkins (~badkins@136.56.92.199)
[00:33:24] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[00:40:38] *** Quits: X-Scale (~ARM@83.223.249.106) (Ping timeout: 260 seconds)
[00:40:55] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[00:41:50] *** X-Scale` is now known as X-Scale
[00:42:17] *** Joins: xsperry (~xs@user/xsperry)
[00:42:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c1d7:63de:66b3:4892) (Quit: Leaving)
[00:44:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ff5a:fb87:fc33:be7c)
[00:48:41] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:b34e:35c:927e:c5ee) (Quit: Leaving)
[01:06:52] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[01:16:32] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 240 seconds)
[01:17:54] *** Joins: X-Scale` (~ARM@31.22.202.54)
[01:18:46] *** X-Scale` is now known as X-Scale
[01:19:31] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Quit: Leaving)
[01:22:33] *** Joins: mononote (~mononote@user/mononote)
[01:27:58] *** Joins: klovett_ (~klovett@166.205.90.177)
[01:30:06] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 260 seconds)
[01:35:38] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:36:16] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[01:44:02] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 240 seconds)
[02:17:47] *** Quits: gproto10 (~gproto23@user/gproto23) (Remote host closed the connection)
[02:22:17] *** Joins: klovett (~klovett@166.205.90.177)
[02:24:17] *** Quits: klovett_ (~klovett@166.205.90.177) (Ping timeout: 256 seconds)
[03:05:59] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:09:25] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[03:16:09] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 265 seconds)
[03:24:00] *** Joins: s-liao (~s-liao@101.86.101.64)
[03:34:32] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[03:42:22] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[04:00:02] *** Joins: badkins (~badkins@136.56.92.199)
[04:05:28] *** Quits: flatwhatson (~flatwhats@118-208-195-122.tpgi.com.au) (Remote host closed the connection)
[04:05:57] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[04:23:11] *** Parts: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) ()
[04:28:46] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:29:20] *** Joins: badkins (~badkins@136.56.92.199)
[04:29:36] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:29:47] *** Joins: badkins (~badkins@136.56.92.199)
[04:30:09] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[04:32:30] *** Joins: s-liao (~s-liao@101.86.101.64)
[04:38:38] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:39:10] *** Joins: badkins (~badkins@136.56.92.199)
[04:44:15] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[04:50:54] *** Joins: klovett_ (~klovett@166.205.90.177)
[04:53:34] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 260 seconds)
[04:53:52] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[04:58:00] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[04:59:00] *** Joins: badkins (~badkins@136.56.92.199)
[05:01:39] *** Joins: cjb (~cjb@user/cjb)
[05:05:47] *** Joins: klovett (~klovett@166.205.90.177)
[05:06:17] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:06:57] *** Joins: badkins (~badkins@136.56.92.199)
[05:08:57] *** Joins: klovett__ (~klovett@166.205.90.177)
[05:09:26] *** Quits: klovett_ (~klovett@166.205.90.177) (Ping timeout: 260 seconds)
[05:11:38] *** Joins: klovett_ (~klovett@166.205.90.177)
[05:11:56] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[05:12:33] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 268 seconds)
[05:12:38] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[05:13:29] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[05:15:30] *** Quits: klovett__ (~klovett@166.205.90.177) (Ping timeout: 260 seconds)
[05:16:42] *** Joins: klovett (~klovett@166.205.90.177)
[05:20:31] *** Quits: klovett_ (~klovett@166.205.90.177) (Ping timeout: 256 seconds)
[05:26:31] *** Joins: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net)
[05:49:11] *** Joins: klovett_ (~klovett@166.205.90.177)
[05:51:26] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 260 seconds)
[05:52:22] *** Joins: klovett (~klovett@166.205.90.177)
[05:53:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:56:20] *** Quits: klovett_ (~klovett@166.205.90.177) (Ping timeout: 268 seconds)
[06:04:03] *** jackhill is now known as KM4MBG
[06:28:31] *** Quits: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[06:37:03] *** Joins: flatwhatson (~flatwhats@118-208-195-122.tpgi.com.au)
[06:45:05] *** Joins: klovett_ (~klovett@166.205.90.177)
[06:47:54] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 260 seconds)
[06:55:16] *** KM4MBG is now known as jackhill
[06:59:49] *** Joins: s-liao (~s-liao@101.86.101.64)
[07:09:07] *** Joins: klovett (~klovett@166.205.90.177)
[07:10:45] *** Joins: badkins (~badkins@136.56.92.199)
[07:11:20] *** Joins: klovett__ (~klovett@166.205.90.177)
[07:12:38] *** Quits: klovett_ (~klovett@166.205.90.177) (Ping timeout: 260 seconds)
[07:13:51] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 256 seconds)
[07:15:33] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[07:32:48] *** Quits: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864) (Ping timeout: 265 seconds)
[07:34:25] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:35:34] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:44:51] *** Joins: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864)
[08:48:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ff5a:fb87:fc33:be7c) (Quit: Leaving)
[08:55:27] *** Joins: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net)
[09:18:48] *** Quits: weinholt (weinholt@h-37-123-132-162.A785.priv.bahnhof.se) (*.net *.split)
[09:18:57] *** Joins: weinholt (weinholt@h-37-123-132-162.A785.priv.bahnhof.se)
[09:24:59] *** Quits: kori (kori@user/kori) (*.net *.split)
[09:24:59] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[09:24:59] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[09:24:59] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[09:25:00] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[09:25:00] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[09:25:00] *** Quits: rudybot (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com) (*.net *.split)
[09:25:09] *** Joins: greaser|q (greaser@antihype.space)
[09:25:13] *** Joins: kori (~kori@li490-89.members.linode.com)
[09:25:29] *** Quits: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[09:25:35] *** Joins: nisstyre (~wes@li798-187.members.linode.com)
[09:26:42] *** Joins: hexology (~hexology@user/hexology)
[09:26:44] *** Joins: rudybot (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com)
[09:27:50] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[09:27:50] *** Joins: greaser|q (greaser@user/greasemonkey)
[09:27:52] *** greaser|q is now known as GreaseMonkey
[09:30:17] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[09:36:35] *** Joins: Ekho (~Ekho@user/ekho)
[09:46:51] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 256 seconds)
[09:53:10] *** Quits: sdu (~doo@185.44.146.165) (Remote host closed the connection)
[09:59:23] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[10:14:53] *** Quits: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864) (Ping timeout: 250 seconds)
[10:30:16] *** Joins: gproto10 (~gproto23@user/gproto23)
[10:31:04] *** Quits: klovett__ (~klovett@166.205.90.177) (Quit: ZZZzzz…)
[10:36:06] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 260 seconds)
[10:57:06] *** Joins: nebu (~user@user/wavion)
[10:57:19] <nebu> are racket questions welcome here?
[10:58:12] <Zipheir> Sure.
[10:59:05] <nebu> I'm implementing streams (as in SICP) in Racket's #lang sicp and having some serious trouble --- my streams don't seem to be lazy
[10:59:59] <nebu> This surprises me, since all my SICP related stuff has worked correctly. Been puzzling over this for a few hours now
[11:00:34] <Zipheir> A shot in the dark, but, have you defined cons-stream as a macro?
[11:01:03] <nebu> No. Is that necessary?
[11:01:13] <Zipheir> Or perhaps that's provided by the Racket #lang package.
[11:01:21] <Zipheir> Well, cons-stream can't be a procedure.
[11:02:07] <nebu> As I have currently defined it, it seems to be a procedure. I'm somewhat confused as to why it has to be a macro.
[11:02:12] <Zipheir> SICP: "Cons-stream is a special form defined so that (cons-stream A B) is equivalent to (cons A (delay B))."
[11:02:28] <nebu> Right.
[11:02:44] <Zipheir> nebu: Do you remember the SICP problem where procedural-if blows up?
[11:03:22] <Zipheir> e.g. (procedure-if (zero? 0) 'foo (run-forever))
[11:03:43] <Zipheir> Procedural cons-stream has the same problem.
[11:04:57] <nebu> No - could you point me to which chapter it's in?
[11:04:58] <Zipheir> More specifically, delay-ing the *value* of an expression is pointless.
[11:05:26] <nebu> Hmm...
[11:06:47] <Zipheir> nebu: https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-10.html#%_idx_556
[11:08:37] <Zipheir> In any case, the macro version is very simple (define-syntax cons-stream (syntax-rules () ((cons-stream a e) (cons a (delay e)))))
[11:11:37] <nebu> Right -- the exercise fails since `if` is a procedure whose internals are evaluated before anything else...instead of it being a special form provided by Lisp
[11:12:07] <nebu> Zipheir: so my assumption is that defining it as a macro makes it behave like a special form?
[11:12:39] *** Joins: badkins (~badkins@136.56.92.199)
[11:13:33] <Zipheir> nebu: Yes.  "Macro" and "special form" are often synonymous in Scheme jargon, unless we're talking about primitives like lambda or define.
[11:16:07] <Zipheir> Macros provide a metalanguage for manipulating syntax before evaluation.
[11:16:27] <Zipheir> delay, in turn, is a special form.
[11:16:36] <nebu> Understood...so delay itself
[11:16:55] <nebu> Yes -- was just getting there
[11:17:13] <Zipheir> I think you've figured it out.
[11:17:34] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 260 seconds)
[11:17:37] <nebu> Maybe -- thanks a lot for your help!
[11:17:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[11:17:45] <Zipheir> nebu: yw!
[11:17:50] <nebu> I may ping again, having some trouble with this.
[11:19:22] <Zipheir> Sure.  I'm going to bed in a moment, but others may be able to help.
[11:19:52] <nebu> I probably should too...thanks a lot in any case!
[11:22:52] *** Quits: nrr__ (sid20938@id-20938.lymington.irccloud.com) (Ping timeout: 265 seconds)
[11:24:36] *** Joins: nrr__ (sid20938@id-20938.lymington.irccloud.com)
[11:28:21] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:28:31] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[11:28:53] <lockywolf> Hm... I wonder if someone can recommend a "C++ for a Scheme programmer" tutorial> 
[11:29:40] <lockywolf> My work now involves working with quite a bit of C++, and I am finding myself abusing std::transform and std::accumulate for nefarious reasons.
[11:29:53] <sham1> That's very specific. Also not an angle usually explored. Usually it goes other way around
[11:30:53] <lockywolf> well, we are using c++17, with lambdas, lists, and std::transform
[11:31:08] <lockywolf> none of my coworkers seem to understand my code now
[11:33:37] <lockywolf> But I am feeling that programming C++ in a schemy way not be very efficient.
[11:47:30] <lockywolf> Like, it should be possible to implement something that is very much like srfi-1 in c++, except it would require a bit of type fiddling
[11:48:55] <lockywolf> I guess, it would require running a garbage collector manually once in a while...
[12:00:50] <amazigh> I do not know C++, but I like http://yosefk.com/c++fqa/ I think it helps to understand c++ by an experienced c++ dev that questiones common answers (a counter point-of-view)
[12:00:59] <amazigh> the fqa is old but might be useful nonetheless.
[12:01:19] <amazigh> old = not maintained.
[12:02:27] <amazigh> IDK C++, but my understanding is not very positive about it. What I read is that teams should create their own guidelines and stick to it; otherwise the c++ language is way to large, and c++ code becomes unreadable.
[12:02:46] <amazigh> there is various such guidelines in the wild.
[12:03:24] <amazigh> writing c++ like c++ was a scheme is doomed to fail; but I made that mistake myself several times when learning a new language.
[12:04:41] <amazigh> here is an example c++ guide: https://google.github.io/styleguide/cppguide.html
[12:05:10] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[12:05:12] <amazigh> maybe the gamedev industry has more insights.
[12:08:02] <amazigh> hth
[12:10:15] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[12:13:05] <lockywolf> I'm afraid I am falling the same pitfall
[12:21:58] *** Joins: civodul (~user@guix/contributor/civodul)
[12:29:05] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:42:36] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[12:46:42] *** Quits: gproto10 (~gproto23@user/gproto23) (Ping timeout: 260 seconds)
[12:46:45] <amazigh> maybe searching for "idiomatic c++" or "c++ interview question" can help.
[12:51:07] <amazigh> search "<something> interview question" is ime always a useful query to get into a topic
[12:52:14] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:58:28] *** Quits: samth (sid14502@id-14502.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[12:58:28] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[12:58:34] *** Quits: duncanm (sid287146@id-287146.tinside.irccloud.com) (Ping timeout: 265 seconds)
[12:58:34] *** Quits: Balooga (sid407689@id-407689.lymington.irccloud.com) (Ping timeout: 265 seconds)
[12:58:41] *** Quits: nrr__ (sid20938@id-20938.lymington.irccloud.com) (Ping timeout: 245 seconds)
[12:59:02] *** Joins: groovy_ (sid62069@hampstead.irccloud.com)
[12:59:04] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:59:04] *** Quits: vito (sid1962@user/vito) (Ping timeout: 260 seconds)
[12:59:22] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 268 seconds)
[12:59:22] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[12:59:23] *** Quits: groovy (sid62069@id-62069.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[12:59:23] *** groovy_ is now known as groovy
[12:59:32] *** Quits: d_run (sid83858@id-83858.hampstead.irccloud.com) (Ping timeout: 265 seconds)
[12:59:32] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (Ping timeout: 265 seconds)
[12:59:32] *** Quits: rickbutton (sid410078@id-410078.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[12:59:59] *** Quits: theruran (uid11305@id-11305.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[13:00:01] *** Quits: dnm (sid401311@id-401311.lymington.irccloud.com) (Ping timeout: 265 seconds)
[13:00:01] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[13:00:08] *** Joins: rubin55 (sid175221@hampstead.irccloud.com)
[13:00:12] *** Joins: theruran_ (uid11305@hampstead.irccloud.com)
[13:00:33] *** Joins: rickbutton (sid410078@helmsley.irccloud.com)
[13:00:52] *** Joins: duncanm (sid287146@tinside.irccloud.com)
[13:00:53] <rudybot> la la la
[13:01:05] *** Joins: dnm (sid401311@lymington.irccloud.com)
[13:01:39] *** Joins: buhman (sid411355@user/buhman)
[13:01:40] *** Joins: masoudd (~masoudd@user/masoudd)
[13:01:45] *** Joins: vito (sid1962@user/vito)
[13:01:50] *** Joins: conjunctive (sid433686@helmsley.irccloud.com)
[13:01:52] *** Joins: nrr__ (sid20938@lymington.irccloud.com)
[13:01:54] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[13:02:08] *** Joins: jcowan (sid325434@ilkley.irccloud.com)
[13:02:54] *** Joins: d_run (sid83858@hampstead.irccloud.com)
[13:04:28] *** Joins: iisi (sid19824@hampstead.irccloud.com)
[13:08:02] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (Ping timeout: 240 seconds)
[13:09:16] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[13:13:45] *** Joins: Balooga (sid407689@id-407689.lymington.irccloud.com)
[13:13:52] *** Joins: samth (sid14502@id-14502.ilkley.irccloud.com)
[13:14:51] *** Quits: nebu (~user@user/wavion) (Ping timeout: 264 seconds)
[13:23:09] *** Joins: mononote (~mononote@user/mononote)
[13:27:42] *** Joins: badkins (~badkins@136.56.92.199)
[13:29:46] <edgar-rft> rudybot: you keep repeating the same song every day, that's rather boring
[13:29:48] <rudybot> edgar-rft: you're repeating yourself, and refusing to listen.
[13:30:34] <edgar-rft> rudybot: the lisp listener listens for me
[13:31:16] <rudybot> edgar-rft: you could implement a thin wrapper that turned it into a socket listener
[13:31:57] <edgar-rft> rudybot: does the socket sing more interesting songs than you?
[13:32:15] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 264 seconds)
[13:32:16] <rudybot> edgar-rft: well, i speak (rather write) english quite fluently, but i hardly understand what singer sing in 90% of songs
[13:32:49] <edgar-rft> rudybot: that's why you sing only la la la?
[13:33:09] <rudybot> edgar-rft: why does rudybot sing la la la anyways?
[13:33:35] <edgar-rft> rudybot: now you're talking to yourself
[13:33:52] <rudybot> edgar-rft: you're talking about adding an index in order to avoid having to do the equivalent of a full table scan. now ask yourself why databases default to not indexing every field and the answer will be clear =)
[13:34:30] <edgar-rft> rudybot: no, I didn't talk about that
[13:34:57] <rudybot> edgar-rft: nah, it's not like that. When you live in an extreme inland place like that hating the weather is just a thing you have to do. No one would believe you were a native if you didn't talk about the weather.
[13:35:38] <edgar-rft> rudybot: don't try to distract from the topic
[13:35:43] <rudybot> edgar-rft: don't try to distract from the topic
[13:35:59] <edgar-rft> rudybot: very interesting argument
[13:36:00] <rudybot> edgar-rft: I read a slightly interesting piece the other day by a journalist who lays down a very convincing argument to having found out who the "What's the frequency kenneth?" guy was.
[13:36:34] <edgar-rft> rudybot: I think it's rather hopeless to talk to you
[13:36:47] <rudybot> edgar-rft: damd`: I haven't checked, but I'd call Xah Lee a hopeless rebel
[13:45:37] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[13:45:58] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[13:48:46] *** Joins: klovett (~klovett@166.205.90.177)
[13:49:35] *** Quits: klovett (~klovett@166.205.90.177) (Client Quit)
[13:52:02] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Ping timeout: 260 seconds)
[13:59:10] <sham1> When is talking to bots ever fruitful
[14:02:22] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[14:03:37] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Remote host closed the connection)
[14:03:55] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[14:04:50] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[14:05:06] <lockywolf> I have to say this is rather genius of a bot.
[14:05:19] * lockywolf was talking to Eliza when feeling lonely
[14:05:44] <lockywolf> What is the backend?
[14:11:32] *** Joins: s-liao (~s-liao@101.86.101.64)
[14:14:11] <edgar-rft> lockywolf: -> https://github.com/offby1/rudybot
[14:15:48] <edgar-rft> rudybot is written in racket and offby1 is looking for someone helping with maintainance by the way...
[14:17:51] <lockywolf> nah, I have a daily job, which includes programming in Scheme
[14:18:39] <lockywolf> It's a very advanced bot though
[14:19:04] <wasamasa> rudybot does look for something in its chat log matching the most uncommon word in the sentence
[14:19:22] <wasamasa> rudybot: tell me about your mermaid collection
[14:19:24] <rudybot> wasamasa: Let's cast a manatee as the little mermaid.
[14:20:01] *** Joins: masoudd (~masoudd@user/masoudd)
[14:20:27] <dpk> lockywolf: how do you use Scheme at your job?
[14:20:32] <dTal> that's an impressively simple heuristic
[14:20:59] <wasamasa> the least common word was mermaid and that style of sentence match #emacs
[14:21:06] <lockywolf> mostly porting things away from it :(
[14:21:07] <wasamasa> yeah, it works a lot better than my GPT bot, lol
[14:22:01] <lockywolf> like, we use one old MIT library as a part of our physics model, which has a Scheme interface, with the core in a low-level language 
[14:22:49] <lockywolf> we have a bunch of demos written in Scheme, and I am re-implementing them in C++, because nobody understands Scheme
[14:23:24] <lockywolf> seasoning the resulting C++ code with lambdas is my little vengeance for that
[14:23:28] <dpk> ah, Greenspunning
[14:24:19] <lockywolf> well, I'm not extremely pleased with the level of Scheme usage in that library
[14:24:25] <lockywolf> it's full of set!
[14:25:29] <lockywolf> we are generally planning to move away from that MIT library
[14:29:07] <amazigh> =/
[14:29:17] *** Joins: klovett (~klovett@166.205.90.177)
[14:29:24] <wasamasa> you're making yourself obsolete, huh
[14:29:51] <lockywolf> well, I'm not expecting to work at this place indefinitely
[14:30:13] <lockywolf> and these guys offered me a nice bonus
[14:34:10] *** Quits: xsperry (~xs@user/xsperry) ()
[14:34:34] <lockywolf> meanwhile I have an official excuse to fix bugs in that old MIT library, so it's not all in vain
[14:38:21] <wasamasa> jcubic isn't here, right?
[14:41:29] <sham1> Doesn't seem like it
[14:43:36] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 268 seconds)
[14:50:28] *** Joins: gproto10 (~gproto23@user/gproto23)
[14:54:13] *** Joins: seninha (~seninha@user/seninha)
[15:01:24] <wasamasa> sad
[15:02:26] <wasamasa> there's an email tangentially mentioning CSP and I can actually help with that
[15:05:26] *** Joins: xsperry (~xs@user/xsperry)
[15:07:05] *** Joins: X-Scale` (~ARM@31.22.202.54)
[15:08:16] *** Quits: X-Scale (~ARM@31.22.202.54) (Ping timeout: 268 seconds)
[15:08:21] *** X-Scale` is now known as X-Scale
[15:14:43] <amazigh> CSP like go's channels?
[15:14:50] <amazigh> what email?
[15:16:47] <sham1> CSP is more like using goroutines
[15:16:55] <sham1> Or the general pattern they're based around
[15:17:01] <sham1> See also Erlang
[15:19:08] <wasamasa> no, content security policy
[15:19:22] <wasamasa> because it prevents the JS lisp stuff from working :D
[15:19:41] <sham1> Oh
[15:20:25] <wasamasa> https://srfi-email.schemers.org/schemeorg/msg/18298964/
[15:20:50] *** Joins: klovett_ (~klovett@166.205.90.177)
[15:22:01] <amazigh> Oh
[15:23:03] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 268 seconds)
[15:28:43] *** Joins: badkins (~badkins@136.56.92.199)
[15:33:32] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[15:39:46] <wasamasa> I wrote a reply and ignored the macro bits, can't help with that :P
[15:41:05] *** Quits: klovett_ (~klovett@166.205.90.177) (Quit: Textual IRC Client: www.textualapp.com)
[16:18:13] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Ping timeout: 250 seconds)
[16:26:54] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[16:59:53] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[17:02:01] *** Joins: s-liao (~s-liao@101.86.101.64)
[17:30:54] <amazigh> wasamasa: re security, and web: is it true that it is easier to protect against XSS with single-page-apps?
[17:31:18] <amazigh> what security do you recommend for CSRF?
[17:36:03] *** Quits: akarle (~akarle@user/akarle) (Ping timeout: 256 seconds)
[17:36:23] <wasamasa> from what I've observed, XSS is more of a problem with traditional web applications and many SPA frameworks help with avoiding it
[17:36:55] <wasamasa> CSRF is another one of that kind
[17:37:22] <wasamasa> easy to overlook something when using a traditional web application, but on the opposite end I see funny contortions when SPA code tries to work around the need for CSRF tokens
[17:37:48] <amazigh> I do not have a framework.
[17:38:24] <amazigh> I am wondering what is the point of the CSRF token, when there is already a session cookie...
[17:39:03] <amazigh> I mean the sesssion cookie can also be generated with a secure random; if the session cookie is invalid, there is not XSS possible
[17:39:49] <wasamasa> basically, you want to avoid that a stateful request can be unintentionally done on behalf of the user
[17:40:21] <amazigh> ok tx
[17:40:52] <wasamasa> a session cookie wouldn't prevent that because it is automatically sent along with every request done for that website
[17:41:22] <amazigh> yes, but over HTTPS, how would the attacker retrieve / guess the session cookie?
[17:42:07] <wasamasa> the attacker needs to trick the user to open a link or visit a form that performs a POST request
[17:42:11] *** Joins: MiraCat (~MiraCat@c-24-30-27-91.hsd1.ga.comcast.net)
[17:42:17] <wasamasa> that link/form target the URL of the vulnerable application
[17:42:27] <wasamasa> the browser looks up cookies for that URL and adds them to the request
[17:42:42] <wasamasa> the application looks only at the cookie for authentication and lets it go through
[17:43:38] <amazigh> Does the CSRF token needs to be unique for every all html forms?
[17:45:48] <wasamasa> hm, not necessarily
[17:46:10] <wasamasa> but to verify whether the submitted token is equivalent to the generated one, it would need to be part of the session
[17:46:56] <wasamasa> it's better if it is unique for every generated form though to reduce the window of opportunity
[17:47:31] <wasamasa> suppose a web application has a very long session validity, then the token would stay the same and the likeliness that it's still valid and can leak somehow is higher than if it were short-lived
[17:47:42] <amazigh> ok
[17:48:23] *** Joins: sdu (~doo@185.44.146.165)
[17:49:16] <wasamasa> I'd probably go with something like regenerating it after every submitted form
[17:49:24] <amazigh> That latter makes sense. I need to wrap my head aroudn this CSRF thing. 
[17:49:35] <amazigh> At this time, I think I will go with WebSockets and a single page application, and store the session token somewhere that is not the cookies;
[17:49:59] <amazigh> IIUC if the session is not in the cookies, it can not be automatically sent by a form from a attacker?
[17:50:10] <amazigh> s/the session/the session token/
[17:50:11] <wasamasa> I'm specifically talking about server side sessions
[17:50:17] <amazigh> yes
[17:50:43] <wasamasa> it depends, there's other headers that may be sent automatically, like authorization
[17:50:57] <wasamasa> or maybe you have some JS code that helpfully appends CSRF tokens to URLs, lol
[17:51:02] <wasamasa> I've had that a bunch of times
[17:54:36] <amazigh> WebSockets brings their own deal of problems (outside the fact that I do not have websocket server side)
[17:54:52] <amazigh> I read slack.com does require the client to refresh the connection regularly
[17:55:01] <amazigh> hmm sorry.
[17:55:48] <amazigh> To get started, slack will allocate an WS URL for every client, and during the WS dialog, the clients needs to re-auth itself (with the same URL IIRC)
[17:56:08] <amazigh> periodically, slack server will challenge the client
[17:56:24] <wasamasa> hm, sounds a bit like oauth, with its long-lived and short-lived secret
[17:56:54] <amazigh> It is prolly a good idea then to read about oauth, i guess.
[17:57:24] <wasamasa> not really, but sure, doesn't hurt
[17:57:49] <amazigh> Regarding REST API, is there a security reason to require more than a SECRET_TOKEN?
[17:57:50] <wasamasa> the idea is that you're given out these two tokens and whenever the short-lived one runs out, you use the long-lived one to renew it and get a new one
[17:58:20] <amazigh> I read twitter had both APP_TOKEN and SECRET_TOKEN; not sure what is the point.
[17:58:31] <wasamasa> that ensures that whoever gets ahold of the short-lived token cannot use it beyond that time
[17:59:25] <wasamasa> if you look at oauth, make sure to find some diagrams showing the back and forth in graphical form, explicitly stating which one it's for
[18:00:48] *** Joins: badkins (~badkins@136.56.92.199)
[18:02:02] *** Quits: flatwhatson (~flatwhats@118-208-195-122.tpgi.com.au) (Ping timeout: 240 seconds)
[18:02:37] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[18:02:46] *** Joins: badkins (~badkins@136.56.92.199)
[18:04:39] <wasamasa> unclear for twitter
[18:05:10] <wasamasa> > API Key and Secret: Essentially the username and password for your App.
[18:06:35] <MiraCat> What's the best scheme dialect that compiles to C. Chicken? Bigloo?
[18:07:29] <amazigh> it depends what you need to do. There is also Gambit. Bigloo does not have a tail call optimization IIRC.
[18:07:47] <wasamasa> yeah, I'd pit CHICKEN against gambit and its derivatives
[18:07:59] <MiraCat> I only require SDL2 bindings.
[18:08:23] <amazigh> I guess chicken is easier / faster to get started.
[18:11:16] *** Joins: flatwhatson (~flatwhats@27-33-115-212.tpgi.com.au)
[18:11:32] <wasamasa> possibly, I've briefly tried gambit/gerbil and was not amused
[18:12:55] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[18:13:11] <wasamasa> gambit's docs could be better (the website is still unusable) and I gave up getting gerbil to work in a container
[18:14:05] *** Quits: nisstyre (~wes@li798-187.members.linode.com) (Changing host)
[18:14:05] *** Joins: nisstyre (~wes@user/nisstyre)
[18:14:26] *** Joins: s-liao (~s-liao@101.86.101.64)
[18:19:42] *** Joins: Inline (~Inline@2a02:908:1252:7a80:1d47:7f49:468:ba96)
[18:23:31] <wasamasa> hmm: https://servers.scheme.org/
[18:23:39] <wasamasa> that's a lot of subdomains
[18:25:51] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[18:26:12] *** Quits: flatwhatson (~flatwhats@27-33-115-212.tpgi.com.au) (Ping timeout: 268 seconds)
[18:26:55] *** Joins: flatwhatson (~flatwhats@115-64-234-110.tpgi.com.au)
[18:35:00] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[18:41:56] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[18:49:54] <sham1> CHICKEN is neat, although you need to download a lot of eggs
[18:49:55] <sham1> A lot
[18:57:18] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[18:57:34] *** Quits: MiraCat (~MiraCat@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[19:39:00] <jcowan> A summary of Scheme compilers is at https://docs.scheme.org/surveys/compiler-available/
[19:40:46] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 245 seconds)
[19:44:07] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[19:44:13] *** Joins: xsperry (~xs@user/xsperry)
[19:44:37] *** Joins: badkins (~badkins@136.56.92.199)
[19:49:34] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[19:49:44] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:53:27] *** Joins: badkins (~badkins@136.56.92.199)
[19:53:37] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[19:54:27] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 264 seconds)
[19:59:09] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[20:00:57] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Ping timeout: 250 seconds)
[20:03:51] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:04:21] *** Joins: badkins (~badkins@136.56.92.199)
[20:06:30] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[20:09:10] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[20:23:04] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Read error: No route to host)
[20:30:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:47:03] *** Joins: vats (~vats@106.67.68.168)
[20:53:16] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 245 seconds)
[20:53:48] *** Joins: livoreno (~livoreno@user/notzmv)
[20:55:14] <amazigh> sham1: it is automatic, no?
[20:57:50] <Zipheir> The CHICKEN package manager tools work pretty well, yes.
[21:13:41] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 245 seconds)
[21:19:46] *** Joins: seninha (~seninha@user/seninha)
[21:39:33] <dpk> oh, but when she was bad, she was very, very bad …
[21:39:56] <dpk> i worked out how we can get https://gitlab.com/dpk/presrfis/-/tree/master/syntax-keywords procedures to be fully first-class in R7RS Large (but not in small)
[21:43:11] <sham1> Well I do wonder how much effort people are putting in small that just isn't about Large anyway
[21:43:24] <dpk> if we get syntax-case (which is looking very likely) … the keywords are stuck in syntax keyword space, but identifier-syntax can make them first class
[21:43:45] <dpk> so … just use identifier-syntax to make them appear to be variables (well, constants) bound to 'themselves', i.e. to identifier syntax objects
[21:44:05] *** Quits: vats (~vats@106.67.68.168) (Read error: Connection reset by peer)
[21:45:23] <jcowan> dpk: I still think 'foo is as good as :foo or foo: from a macrology viewpoint, and users can get used to it.  Note that this would not be replaceable by an arbitrary expression: the macro recognizes (quote foo) as a keyword, and it has to be in odd position.
[21:45:53] <dpk> yes, i'm currently revising my review, and i now explicitly note the benefits of such a restriction
[21:46:00] <dpk> (i.e. non-replaceability)
[21:46:49] <dpk> the 'problem' is that 'foo can't be recognized by syntax-rules. (may not be a problem depending on how seriously we want to take syntax-rules compatibility in this case)
[21:48:00] <jcowan> I think we can take it as read that syntax-case is coming.
[21:49:03] <jcowan> What do you think about not allowing requiird arguments?  When I use keyword args in Python, all the args are keywords.
[21:49:39] <sham1> Might be a bit too restrictive. Sometimes it's fine to have both positional and keyword arguments
[21:50:14] <sham1> Keyword arguments really should be there to help ledgibility. So if a positional argument makes sense in its context, it should be allowed to stay positional
[21:51:08] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:52:49] *** Joins: akarle (~akarle@user/akarle)
[21:53:16] <jcowan> I suppose it might look like dd(1).
[21:57:43] *** Quits: akarle (~akarle@user/akarle) (Ping timeout: 268 seconds)
[21:59:22] <Zipheir> Whatever Python does is probably the Wrong Thing.
[21:59:54] <gwatt> Python's args kwargs are actually pretty nice.
[22:01:02] <sham1> For example, in Common Lisp land they have PARSE-INTEGER, which takes the string to parse as a positional argument, and then they have keyword arguments :start, :end, :junk-allowed and :radix, which of course tell you where in the string to parse, whether to allow for non-integer characters after the string, the radix of course. Now, if one was to be forced to use all keyword arguments, you'd have
[22:01:04] <sham1> two options. Either you only force all arguments to be keyword args when you would use an existing keyword argument, or you force them all the time when calling a function with keyword arguments. But something like (parse-integer :string "10" :radix 8) or (parse-integer :string "8") respectively look silly
[22:01:06] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a1ca:c9d6:7edc:f8dc)
[22:01:07] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a1ca:c9d6:7edc:f8dc) (Changing host)
[22:01:07] *** Joins: skapata (~Skapata@user/skapata)
[22:01:51] <sham1> So for example with this procedure, having the input string be a positional argument makes sense while the parse options make sense being keyword args
[22:02:58] <gwatt> Similarly for iota, it makes sense to have the required, positional argument be the count, while start and increment can both be optional, keyword arguments
[22:03:18] <sham1> It wouldn't look any less silly with SRFI 88 keyword syntax either, like you'd have something like (string->number string: "10" radix: 8) or (string->number string: "8")
[22:03:59] <sham1> That's just way too busy for something where the positional argument would clearly have a definite meaning
[22:05:36] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[22:07:47] <Zipheir> Are we talking about making *every* argument named?
[22:08:00] <Zipheir> i.e. optionally denotable by name.
[22:08:28] <sham1> 20:18 <jcowan> What do you think about not allowing requiird arguments?  When I use keyword args in Python, all the args are keywords.
[22:08:59] <Zipheir> I'm not sure what "not allowing requiird arguments" means in this context.
[22:09:02] <sham1> So unless I misunderstood, this is saying that one couldn't have required positional args. Of course you should be able to define a procedure where every argument has to be a KW-arg
[22:09:27] <sham1> But it shoudn't be the default
[22:09:40] <Zipheir> Ah, I get it.
[22:10:06] <jcowan> Required/optional is orthogonal to positional/keyword.
[22:10:17] <Zipheir> It seems like existing Scheme convention is to allow named argument positional arguments to be mixed.
[22:10:35] <Zipheir> *named arguments and positional
[22:10:36] <sham1> Why would you not want to allow requireds either
[22:10:42] <sham1> Err
[22:11:10] <sham1> Required arguments, whether keyword or positional are still good to have. Sometimes there just isn't a "sane default value"
[22:11:26] <Zipheir> Agreed, they're two different discussions.
[22:12:06] <Zipheir> That's the big difficulty with named parameters: they don't mix nicely with positional.
[22:12:12] *** Joins: harlchen[m] (~harlchent@2001:470:69fc:105::1:3b28)
[22:12:21] <sham1> Sure they do. Just put them after
[22:12:31] <Zipheir> Yes, that's the least ugly solution.
[22:12:37] <gwatt> jcowan: while that's true, the more optional parameters you have, the nicer it is to be able to specify just one of them.
[22:12:46] <jcowan> CL allows required positional, optional positional, and optional keyword args (in that order) but not required keywords.  I'm proposing a bifurcation: required positional followd by optional positional in that order, XOR required and optional keywords in any order.
[22:13:11] <sham1> Hm
[22:13:26] <sham1> But could you mix positional and keywords
[22:13:37] <jcowan> No
[22:14:06] <Zipheir> That would simplify things.
[22:14:33] <jcowan> Yes.  The question is whether it's too simple.
[22:14:42] <sham1> It would. It'd also make it a bit too simple IMHO
[22:14:59] <jcowan> Okay, what's your counterexample?
[22:15:20] <sham1> I need to think about it
[22:15:52] <jcowan> Sure.
[22:16:15] * jcowan waits ... tap ... tap ... tap ...
[22:17:48] <Zipheir> There may be procedures which take one or two required arguments in some well-known order (e.g. output: object, port), which also could take many optional named arguments.  With jcowan's strategy, you'd have to pay the "keyword tax" on every call, even if you're just using the defaults.
[22:18:00] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[22:18:07] <sham1> Well okay. Not having optional KW-args with positional args like with my example of string->number or the prior art of CL's PARSE-INTEGER would make the API a bit unwieldly. Maybe there's one optional flag you'd want to set while leaving the others as they are. That would mean that one would have to assign the other arguments if we were to be doing it with positional arguments. And I already showed
[22:18:09] <sham1> what it would be if one would force them to be KW-args for this
[22:18:18] <sham1> Or that
[22:20:25] <Zipheir> There's also the question of how composition of named-argument functions works.
[22:21:04] <jcowan> I think changing from (parse-integer "123" :radix 16) to (parse-integer :s "123" :radix 16) is not such a big cost, where :s = source or string.
[22:22:09] <Oxyd> I feel that :s goes against the spirit of using descriptive names. Forcing people to use single-letter non-descriptive names like that to work-around a language limitation to me suggest that the limitation shouldn't exist.
[22:22:11] <gwatt> Not if you're calling it directly, but what if you (map parse-integer '("123" "456" "789"))
[22:22:19] <dpk> apologies for disappearing, was eating
[22:22:22] <Zipheir> Can I write (apply parse-integer <expr>) in a way that works reliably?
[22:22:39] <dpk> "<jcowan> What do you think about not allowing requiird arguments?  When I use keyword args in Python, all the args are keywords." — you mean you always use the (bare) * operator?
[22:22:43] <jcowan> where the :s keyword is required and :radix, :start, :end, :junk-allowed are optional
[22:23:20] <gwatt> I feel like scala does the best thing, which is to allow keyword args if you're calling a function directly, and degrade to positional only if you're passing the function as a value
[22:23:35] <jcowan> Yes, I do.  Of course "requiird" is just a misspelling of "positional".
[22:23:55] <Zipheir> That's another related question.  How do you map a named-argument procedure?
[22:24:12] <sham1> You'd probably need a wrapping lambda
[22:24:23] <Zipheir> Ugh.
[22:24:28] <sham1> Yeah
[22:24:38] <jcowan> "cut" makes such lambdas easy
[22:25:27] <Zipheir> True, but, between composition and HOFs, we're talking about a heavy dose of cut-ting.
[22:26:00] <Zipheir> SRFI 210 compose could be extended, I guess.
[22:26:04] <sham1> Mmm, it would certainly cut into the ergonomics of the language for something that should be simple
[22:26:19] *** Joins: badkins (~badkins@136.56.92.199)
[22:26:32] <jcowan> Mapping keyword functions in CL is not simple at all.
[22:27:02] <Zipheir> That's simply bad design for a functional language, IMO.
[22:28:03] <sham1> Yeah, and that's why requiring one to do something like (map (cut (parse-integer :s <> :radix 16)) list-of-hex-strings) would just be silliness
[22:28:17] <sham1> Or even if you're only parsing base10
[22:28:24] <Zipheir> I wonder how Racket deals with this, given that they went full semantics with their keyword arguments.
[22:28:26] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[22:29:13] <jcowan> sham1: It's awfully clear.
[22:29:15] <sham1> Would (map parse-integer list-of-decimal-strings) still work? Or would one need to do something like (map (cut parse-integer :s <>) list-of-decimal-integers)
[22:29:27] <jcowan> BTW, https://mlochbaum.github.io/BQN/doc/functional.html has a Venn diagram (scroll down a bit) that shows different "functional languages" based on which features of the (supposed) functional language abstraction they actually exhibit.
[22:29:55] <Zipheir> (lambda (x) (g :some-key (f :some-other-key x)))
[22:30:43] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[22:30:44] *** Joins: hackeryarn (~hackeryar@2600:1700:139c:1410:a32c:9716:6f9:d6ae)
[22:31:55] <Zipheir> Surely™ we can agree that high-order functions and composition are important in Scheme, "true" functional language or no.
[22:32:09] <jcowan> so when Alice says Foop is/isn't a functional language, Bob can ask "Where is it on the Venn diagram?"
[22:32:31] <dpk> Zipheir: syntax-keywords always allows keyword arguments to be given positionally, making map less of a problem, except that in the current version the 'procedures' are actually macros and aren't first class
[22:32:44] <dpk> but i have several (mutually compatible) solutions in mind for that
[22:32:45] <jcowan> You could add other ovals like "single-argument functions"
[22:33:13] <Zipheir> dpk: That sounds promising.
[22:34:47] <Zipheir> jcowan: One of my favorites http://conal.net/blog/posts/the-c-language-is-purely-functional
[22:34:51] <jcowan> I think syntax-case macros are the Right Thing, not because of particulars of syntax-case but because its behavior in operand position is definable.  Any other macro system *could* provide this, but they don't.
[22:35:25] <jcowan> I love that one
[22:36:27] <jcowan> s/one/post
[22:38:45] <Zipheir> It's worth taking a look at Racket's keyword-apply https://docs.racket-lang.org/guide/application.html#%28part._apply%29
[22:44:15] <Zipheir> It doesn't look like they have any clever mechanism for composing named-argument functions; the named arguments just degrade to positional.
[22:49:06] <dpk> gwatt: it's nice to know there's precedent for that (the Scala thing)
[22:49:37] <dpk> since that's what syntax-keywords currently would have to do, if my perverse identifier-syntax approach isn't adopted
[22:49:53] <gwatt> Yeah, it's not quite as good as "preserve keyword arguments no matter what", but it's probably the easiest way to implement keywords efficiently
[22:52:07] <dpk> the other problem with syntax-keywords is less trivial to work around: because keywords are R{6,7}RS-style auxiliar syntax keywords, they (a) have to be exported as well as the actual procedures, and (b) technically they're unique to each library, so if you import procedures from two different libraries which use the same keyword name, you have to rename one of the keywords (although Chibi at least deliberately violates this)
[22:53:11] <dpk> i'm not sure to what extent (b) can be worked around. i suspect not at all without syntax-case, again
[22:54:10] <dpk> although SRFI 206 looks potentially relevant
[22:55:17] <gwatt> I think there was a proposal for a magic library that exported whatever you asked for as a keyword
[22:57:02] *** Joins: badkins (~badkins@136.56.92.199)
[22:57:17] <dpk> jcowan: why isn't SRFI 206 on the yellow ballot?
[22:57:34] <dpk> answer: because it's on the Morpheus docket
[23:00:01] <dpk> actually … it might be possible to implement SRFI 206 in terms of SRFI 212 (identifier aliasing)? which looks like it'll make it into the Yellow Edition
[23:00:42] <dpk> oh, actually, not, because aliased identifiers are explicitly specified not to be free-identifier=? to each other
[23:01:51] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[23:02:51] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Ping timeout: 245 seconds)
[23:03:00] <gwatt> dpk: I think that's not true. The examples are comparing a shadowing name with the alias, not the original name
[23:04:32] <dpk> ah, right
[23:04:33] <dpk> > (define-syntax foo (syntax-rules (foo-aux)))
[23:04:33] <dpk> > (alias foo-aux* foo-aux)
[23:04:33] <dpk> > (free-identifier=? #'foo-aux #'foo-aux*)
[23:04:33] <dpk> #t
[23:04:36] <dpk> — Chez
[23:15:21] *** Joins: badkins (~badkins@136.56.92.199)
[23:16:39] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 264 seconds)
[23:22:01] *** Quits: choas (~lars@ppp-188-174-58-126.dynamic.mnet-online.de) (*.net *.split)
[23:22:08] *** Joins: choas (~lars@ppp-188-174-58-126.dynamic.mnet-online.de)
[23:24:32] *** Quits: kori (~kori@li490-89.members.linode.com) (Changing host)
[23:24:32] *** Joins: kori (~kori@user/kori)
[23:26:02] *** Joins: TCZ (~tcz@91.150.178.193)
[23:33:00] <zwr> oh man it clicked in my head and I finally understood the 9th chapter of the little schemer, I got confused with scheme's syntax for a while
[23:34:16] <zwr> I didn't realize the anonymous function with the argument "length" was being called immediately
[23:36:08] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[23:38:13] <Zipheir> It's a bit of a mind-bender.
[23:43:44] <sham1> Yeah. Expressions like this aren't always obvious: ((lambda (x) (* x x)) 2)
[23:43:58] <sham1> Although that's just "let"
[23:53:29] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[23:56:06] *** Joins: cjb (~cjb@user/cjb)
[23:56:35] *** Joins: livoreno (~livoreno@user/notzmv)
[23:58:13] *** Quits: gproto10 (~gproto23@user/gproto23) (Remote host closed the connection)
