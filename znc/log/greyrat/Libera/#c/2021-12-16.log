[00:00:05] <cousteau> e.g. `const double sin(double x)` or `char *const end_of_string(const char *s)`, specifying that if the input parameter is constant at compile time, the output of the function can also be computed at compile time
[00:00:10] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[00:00:21] <cousteau> (this is not a C feature btw, just something I was thinking of)
[00:00:44] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[00:00:48] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[00:01:04] <cousteau> NRK[m]: anyway, did you see how I somehow managed to reverse your example so that it worked on clang but NOT on gcc?
[00:01:10] *** Joins: kish` (~sid742412@user/aqua)
[00:01:16] *** Quits: teepee (~teepee@openscad/teepee) (Quit: bye...)
[00:02:02] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[00:03:01] *** Joins: de-facto (~de-facto@user/de-facto)
[00:03:52] *** Joins: EdFletcher (~PKD@user/edfletcher)
[00:04:57] <NRK[m]> ye, that's why i said to stay away from anything not explicitly defined in the standard
[00:05:12] *** Joins: damxsa (~damx@2001:16a2:ce8a:800:e3e7:2a55:7b19:ad28)
[00:05:20] <cousteau> indeed
[00:05:53] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[00:05:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:05:58] *** Joins: beencubed (~beencubed@209.131.238.248)
[00:06:21] <cousteau> but I mean... it's funny how I randomly found a way to turn the tables.  This wasn't intentional; I just tested random stuff and eventually got that
[00:07:33] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf)
[00:08:08] <cousteau> so clang won't accept a static const var as a "compile-time constant" and gcc will; however gcc won't accept a compound literal as a "compile-time constant" and clang will
[00:08:28] <cousteau> *a static constant ARRAY var
[00:08:40] <cousteau> *a static const ARRAY var
[00:10:27] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[00:10:43] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:10:55] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[00:11:14] *** Joins: teepee (~teepee@openscad/teepee)
[00:17:04] *** Joins: u0_a391 (~u0_a391@2600:380:bc5f:f68d:8776:74f1:32c4:29f6)
[00:17:12] *** Joins: PortableDave (~portabled@118.210.56.9)
[00:17:20] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f)
[00:19:00] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[00:20:15] *** Quits: xata (~xata@46.98.129.9) (Quit: Bye)
[00:20:46] *** Joins: zat_ (~zat@191.23.60.220)
[00:20:51] *** Quits: Kit (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com) (Ping timeout: 250 seconds)
[00:22:21] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:24:03] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Remote host closed the connection)
[00:27:02] *** Joins: remavas (~Remavas@user/remavas)
[00:27:13] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[00:30:30] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[00:30:55] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[00:31:00] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[00:31:09] *** Joins: tejr (~tejr@user/tejr)
[00:32:07] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[00:32:56] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[00:34:03] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:619c:d1db:5920:bb54) (Ping timeout: 250 seconds)
[00:35:45] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[00:36:38] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:37:23] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 252 seconds)
[00:37:45] *** Joins: Pdroman (~Android@197.red-79-156-174.staticip.rima-tde.net)
[00:38:27] *** Joins: johnnyreb (~tth@user/johnnyreb)
[00:43:18] *** Quits: Pdroman (~Android@197.red-79-156-174.staticip.rima-tde.net) (Quit: AndroidIrc Disconnecting)
[00:49:12] *** Quits: damxsa (~damx@2001:16a2:ce8a:800:e3e7:2a55:7b19:ad28) (Quit: Leaving)
[00:51:27] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:52:32] *** Quits: Macuser (~Macuser@2600:1003:b443:b5e5:451b:6eac:6d38:7fec) (Ping timeout: 240 seconds)
[00:53:30] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:54:06] *** Quits: Kev_ (~Kev@2a01cb0400149f001dcf40039f95c655.ipv6.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[00:54:47] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:55:32] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 240 seconds)
[00:57:09] *** Joins: Charadon (~Charadon@155.138.164.183)
[00:58:00] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[00:58:02] *** Joins: Guest87 (~Guest87@97-126-38-150.tukw.qwest.net)
[01:01:03] *** Quits: Guest87 (~Guest87@97-126-38-150.tukw.qwest.net) (Quit: Client closed)
[01:01:44] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:08:54] *** Quits: remavas (~Remavas@user/remavas) (Quit: WeeChat 2.8)
[01:09:36] *** Quits: effexzi (uid474242@id-474242.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:10:18] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[01:10:24] *** Quits: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de) (Quit: leaving)
[01:14:36] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[01:15:53] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[01:16:05] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[01:19:21] *** Quits: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[01:19:56] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[01:20:38] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:80ee:faa6:7302:e610) (Ping timeout: 260 seconds)
[01:27:22] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[01:27:32] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[01:27:49] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[01:31:22] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:32:13] *** Joins: NEYi (~NEYi@109.251.216.38)
[01:34:01] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[01:35:11] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:36:15] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 250 seconds)
[01:36:34] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:39:10] *** Quits: Torr (~Torr@user/torr) ()
[01:42:38] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[01:43:37] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[01:44:25] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[01:44:40] *** Joins: pflanze__ (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[01:44:49] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[01:45:11] *** Quits: pflanze_ (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (Read error: Connection reset by peer)
[01:47:17] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 250 seconds)
[01:47:18] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[01:47:20] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[01:47:39] *** Joins: Klinda (~superleag@user/klinda)
[01:49:29] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:50:56] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[01:53:18] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Ping timeout: 260 seconds)
[01:53:47] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:57:13] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:00:19] *** Joins: peve (~peve@static-198-54-134-134.cust.tzulo.com)
[02:00:31] *** Quits: chomwitt (~chomwitt@2a02:587:dc19:a500:12c3:7bff:fe6d:d374) (Ping timeout: 250 seconds)
[02:01:10] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[02:01:43] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 252 seconds)
[02:02:38] *** Quits: zat_ (~zat@191.23.60.220) (Ping timeout: 252 seconds)
[02:02:53] *** Quits: magla (~gelignite@55d4970c.access.ecotel.net) (Quit: Stay safe!)
[02:03:15] *** Quits: mahmutov (~mahmutov@37.155.5.146) (Ping timeout: 256 seconds)
[02:03:59] *** Quits: peve (~peve@static-198-54-134-134.cust.tzulo.com) (Client Quit)
[02:06:51] *** Joins: zat (~zat@191.23.60.220)
[02:07:08] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[02:07:21] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:10:35] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[02:10:38] *** Quits: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[02:15:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:1e71:dc8c:d2fa:3d7e)
[02:18:05] *** moose`` is now known as moose
[02:19:46] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:22:57] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[02:23:44] <tag> I have this elf binary I'm having a bit of trouble disassembling. `objdump -D` just emits "file format elf32-i386"
[02:24:19] <tag> and nothing else
[02:24:44] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[02:25:37] <Twix> usually -d is enough. Maybe there is nothing more? Maybe you don't have bintools installed, which can handle i386.
[02:26:00] <tag> Maybe I don't have bintools installed
[02:26:40] <Twix> hmm, maybe it wasn't called bintools
[02:27:01] <Twix> binutils it was
[02:27:05] <Twix> *is
[02:27:51] <SymbioticFemale> if you just want to delete a line but you don't want to re-write the whole file, is there any other option than to just zero it out? i mean, my line is "kittens" (7 characters) and i want it to just be "cats", but i don't want to rewrite the whole file. 
[02:28:20] <Twix> SymbioticFemale, thats usually not possible
[02:28:21] <SymbioticFemale> hmm, wait, i just overwrite "kitt" with "cats" and put a newline over the e
[02:28:42] <fizzie> And then you're left with "...\ncats\nns\n..."
[02:28:47] <Twix> but then you'll have a line with ns
[02:28:54] <SymbioticFemale> yeah but i can just zero out the rest
[02:28:59] <tag> Maybe he means binutils
[02:29:01] <SymbioticFemale> i'll just zero that line
[02:29:15] <SymbioticFemale> then i waste less space yet acheive my purpose
[02:29:21] *** Joins: constxd (~brad@142.134.38.68)
[02:29:47] <fizzie> If it's a "regular" text file, people generally aren't expecting zeroes in them. Of course if it's a file only your program will ever touch, you can do whatever.
[02:29:55] *** Joins: kuber (~kuber@97-113-156-194.tukw.qwest.net)
[02:29:57] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[02:30:01] *** Quits: SpikeHeron (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[02:30:10] <SymbioticFemale> yeah its not a regular text file
[02:30:20] <caze> What is it?
[02:30:39] *** Quits: kuber (~kuber@97-113-156-194.tukw.qwest.net) (Client Quit)
[02:30:53] *** Quits: zat (~zat@191.23.60.220) (Remote host closed the connection)
[02:31:15] *** Joins: zat (~zat@191.23.60.220)
[02:31:34] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[02:31:35] <SymbioticFemale> config file
[02:31:42] <tag> To be clear, I have intercepted this binary as part of an exploit I don't expect it to be particularly standard. I just really wanna pick it apart. It does have a program header (which I can see with `objdump -p`), perhaps I can figure out a way to just disassemble it from the loader offets
[02:32:37] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[02:32:38] *** Quits: pizdets_ (~pizdets@183.182.110.83) (Ping timeout: 250 seconds)
[02:33:09] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[02:33:16] <Twix> tag, that explains a lot. If nothing helps, you might want to pick it apart by hand using a hex editor
[02:33:21] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:33:35] *** Joins: DarkPlutonium (~DarkUrani@stdrand.com)
[02:33:36] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:33:59] *** Joins: pizdets (~pizdets@183.182.110.46)
[02:34:00] *** Joins: wyre_ (~wyre@user/wyre)
[02:34:13] <tag> I am fairly familiar with the intel ISA encodings but it seems like it would be much easier to disassemble it
[02:34:29] <tag> I wrote a disassembler the other day for an unrelated use-case, maybe I just point that at it.
[02:34:32] *** Quits: DarkUranium (~DarkUrani@stdrand.com) (Ping timeout: 252 seconds)
[02:34:50] *** Quits: Djoobstil (~djoobstil@144.91.111.212) (Ping timeout: 260 seconds)
[02:35:17] *** Quits: wyre (~wyre@user/wyre) (Ping timeout: 265 seconds)
[02:35:43] *** Joins: Djoobstil (~djoobstil@144.91.111.212)
[02:35:55] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[02:36:29] <fizzie> tag: `objdump -b binary -m i386 -D file.bin` will just disassemble a flat binary. With --adjust-vma=0x1000 to change the hypothetical load address.
[02:37:27] <fizzie> (You might also want to add --start-address and/or --stop-address to exclude headers / trailing garbage.)
[02:38:01] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Ping timeout: 252 seconds)
[02:39:37] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[02:39:54] *** Joins: ferdna (~ferdna@user/ferdna)
[02:40:09] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:40:38] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[02:40:53] *** Joins: CoolerVoid (~CoolerVoi@2804:14c:26:8b72:d439:a408:6753:8a60)
[02:41:29] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[02:41:38] *** Joins: joe_ (~joe_@2601:84:4501:6440:9d39:c68:2122:cba)
[02:44:56] <CoolerVoid> HiddenWall is a Linux kernel module generator for custom rules with netfilter. (block ports, Hidden mode, rootkit functions, etc.). The motivation: in a bad situation, an attacker can put your iptables/ufw to fall. But if you have HiddenWall, the attacker will not find the hidden kernel module that blocks external access because it has a hook to
[02:44:57] <CoolerVoid> netfilter on kernel land(think like a second layer for Firewall).
[02:44:59] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[02:45:04] <CoolerVoid> My beginning purpose at this project is to protect my server, and now it is to protect my friends' machines. When I talk to friends, I say peoples that don't know how to write low-level code. Using the HiddenWall, you can generate your custom kernel module for your firewall configuration.
[02:45:11] <CoolerVoid> https://github.com/CoolerVoid/HiddenWall
[02:46:20] *** Joins: Zenton (~user@user/zenton)
[02:46:32] *** Joins: DonRichie (~DonRichie@ricl.de)
[02:47:05] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 250 seconds)
[02:47:51] *** Quits: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt) (Quit: Leaving)
[02:50:11] <twkm> and?
[02:53:40] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8) (Quit: Quit)
[02:54:38] <tag> fizzie: Thanks this is useful
[02:56:21] <tag> fizzie: I assume what I want is the paddr addresses for the loader blocks, we'll see though I think I can pick it apart from here.
[02:57:51] <twkm> it'll just be wack-a-mole CoolerVoid, attackers will just throw an rmmod into their scripts.
[02:57:57] <cousteau> SymbioticFemale: the thing is, the way files are stored in disk, you'll have to rewrite the whole file no matter what
[02:58:11] *** Quits: zat (~zat@191.23.60.220) (Ping timeout: 252 seconds)
[02:58:35] <cousteau> you can't just "punch a hole in the disk", or somehow mark the bytes as "these bytes don't count".  That's not how filesystems work.  (And if there is any that does, that's none of C's concern.)
[02:59:11] *** Quits: dogbert_2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[02:59:27] *** Joins: dogbert_2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[02:59:40] <cousteau> IF, if, the file format you're dealing with has some way to mark "bytes that are not considered", such as null bytes or some other special character, you might be lucky and might be able to do what you want without overwriting the rest of the file.
[03:01:13] *** Joins: Macuser (~Macuser@2600:1003:b443:39bf:179:badd:53f3:2eea)
[03:01:16] <cousteau> Now, you mentioned it's a config file.  Although "config file" is not too specific (there are hundreds of "config file" formats), chances are it's a plain text file with information stored in some specific format, and it's possible that adding extra newlines doesn't affect the result
[03:01:17] <SymbioticFemale> cousteau: my software goes through all the lines of the file. if it finds a string that it identifies as a known-setting identifier, then it scans for the next string on the line (the setting)
[03:01:28] <SymbioticFemale> yeah that
[03:01:49] <cousteau> oh, it's a format you created yourself?
[03:02:11] <SymbioticFemale> so if it finds "Brightness" then it reads the line and gets the following number or whatever. if it just sees "ness" then it ignores it and goes to the next line
[03:02:15] <SymbioticFemale> yeah
[03:02:55] <cousteau> well I can't advise on that since I don't know the format... but if it just ignores the lines it doesn't understand then it sounds to me like blank lines (i.e., single '\n's) won't affect the result and may be used as padding
[03:03:38] <SymbioticFemale> hmm i never thought of that option
[03:03:40] <cousteau> I guess lines look like "string=value\n" or "string value\n"?
[03:03:52] <SymbioticFemale> yeah, the latter
[03:03:53] *** Quits: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net) (Quit: Client closed)
[03:03:59] <SymbioticFemale> string value
[03:04:03] <cousteau> anyway it's a poor option since it only goes one way -- you can only ever shorten the lines, not enlarge them
[03:04:07] *** Joins: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net)
[03:04:12] <SymbioticFemale> right
[03:04:22] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[03:05:01] <cousteau> so going from "pet_type kittens\n" to "pet_type cats\n\n\n\n" is possible, but not from "pet_type cats\n" to "pet_type kittens\n"
[03:05:14] <cousteau> and it's kind of hacky anyway
[03:05:34] <cousteau> so it's probably a good idea to just rewrite the whole file as a general-purpose solution
[03:05:58] <cousteau> write a single function that does that, instead of having a function that does that for longer strings AND another function that does something else for shorter strings
[03:06:30] <SymbioticFemale> the other option is to zero out lines. with zeroing, there is no possibility of ever having a failed write or something that takes out the whole file.
[03:06:55] <SymbioticFemale> of course that means that every change is an append, unless it fines a zero line of the correct size
[03:07:08] <cousteau> I'd generally advise against writing null bytes to something meant to be interpreted as a text file
[03:07:10] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[03:07:19] <SymbioticFemale> i mean literal zeros
[03:07:19] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[03:07:22] <SymbioticFemale> not null bytes
[03:07:28] <cousteau> reading null bytes from a file using --
[03:07:28] <cousteau> oh
[03:07:40] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[03:07:44] <cousteau> well, "pet_type cats000\n" is sure gonna look weird
[03:07:52] <SymbioticFemale> no no
[03:08:16] <SymbioticFemale> the zeroes are contained on their own lines. zero'd lines are only zeroes.
[03:08:27] <cousteau> however, "percentage 100\n" becoming "percentage 010" sounds fine (as long as you parse that as strictly decimal)
[03:08:32] <SymbioticFemale> more readable than hundreds of newlines
[03:08:41] <cousteau> oh
[03:08:48] <cousteau> well, that just seems confusing
[03:08:53] <SymbioticFemale> :P
[03:08:53] <cousteau> I'd rather use spaces
[03:09:03] <SymbioticFemale> oh i never thought of spaces
[03:09:22] *** Quits: beencubed (~beencubed@209.131.238.248) (Quit: Leaving)
[03:09:26] <SymbioticFemale> that would increase readability 
[03:09:26] <cousteau> but, if you're gonna be doing this often, it sounds to me like your file is more like a binary file
[03:10:27] <cousteau> you could have a file where each "record" is a key-value pair, both with up to 7+1 characters (for example)
[03:10:52] <SymbioticFemale> mmmm i see
[03:11:27] <SymbioticFemale> pre-allocated filesystem space, essentially
[03:11:27] <cousteau> or, dunno, 15+1 chars for the key and 48 bytes for the value (either a string or an arbitrary type depending on the key)
[03:11:36] <cousteau> yeah pretty much
[03:12:03] <cousteau> except, well, the idea is probably to read the whole thing into memory, modify it as needed, and dump it back to a file, rather than memory-mapping the whole thing
[03:12:17] <hohohoroutines> if you need both, consider having text, then one or more zero bytes such that the binary starts at an agreed-upon multiple M of bytes into the file (which should be a multiple of the size of the largest binary data type). then the binary segment is mmapable
[03:13:06] <SymbioticFemale> interesting. ok.
[03:13:19] <nomagno> Is accessing a struct pointer with a dot (.) the same as accessing a pointer to that element?
[03:13:54] <hohohoroutines> no
[03:13:59] *** Joins: zat (~zat@191.23.60.220)
[03:14:37] <cousteau> but yeah you could have a struct { char key[8]; union { char s[1]; int n; double d; } value; } config_file[]
[03:14:47] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[03:14:49] <cousteau> nomagno: you can't access a struct pointer with a dot
[03:15:01] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[03:15:06] <cousteau> you access a struct with a dot, and a struct pointer with ->
[03:15:25] <cousteau> or get the struct the struct pointer points to with *, then access the member with .
[03:15:34] <cousteau> (*my_struct).member
[03:15:43] <cousteau> which is an ugly way to write my_struct->member
[03:16:04] *** Quits: CoolerVoid (~CoolerVoi@2804:14c:26:8b72:d439:a408:6753:8a60) (Quit: Client closed)
[03:19:40] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[03:21:13] * hohohoroutines looks at char s[1]
[03:22:36] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.3)
[03:24:17] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[03:24:29] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[03:25:05] <cousteau> hohohoroutines: it's so that you can use it as a char [sizeof (double)] without being too verbose
[03:25:25] *** Quits: alch (~alch@151.38.110.87) (Ping timeout: 256 seconds)
[03:25:27] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[03:25:46] *** Joins: dutch (~DutchIngr@user/dutch)
[03:26:18] <hohohoroutines> that's UB. just make it char[8]
[03:26:36] <hohohoroutines> and then you don't even need to assume sizeof(double) is 8
[03:26:57] *** Joins: alch (~alch@151.36.107.205)
[03:27:44] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:28:03] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:29:33] <cousteau> I don't think it's UB; wouldn't it work as a flexible array member?
[03:30:03] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (*.net *.split)
[03:30:03] *** Quits: Macuser (~Macuser@2600:1003:b443:39bf:179:badd:53f3:2eea) (*.net *.split)
[03:30:03] *** Quits: dogbert_2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (*.net *.split)
[03:30:03] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (*.net *.split)
[03:30:03] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (*.net *.split)
[03:30:03] *** Quits: constxd (~brad@142.134.38.68) (*.net *.split)
[03:30:03] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (*.net *.split)
[03:30:03] *** Quits: zmt01 (~zmt00@user/zmt00) (*.net *.split)
[03:30:03] *** Quits: mdw (~root@159.65.86.163) (*.net *.split)
[03:30:03] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (*.net *.split)
[03:30:03] *** Quits: Satin (uid193953@user/Seten) (*.net *.split)
[03:30:03] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (*.net *.split)
[03:30:03] *** Quits: reset (~reset@user/reset) (*.net *.split)
[03:30:03] *** Quits: echoSMILE (uid504326@user/echosmile) (*.net *.split)
[03:30:03] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (*.net *.split)
[03:30:03] *** Quits: minto_ (~mintograd@47.201.5.61) (*.net *.split)
[03:30:03] *** Quits: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3) (*.net *.split)
[03:30:03] *** Quits: nvmd (~nvmd@user/nvmd) (*.net *.split)
[03:30:03] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (*.net *.split)
[03:30:03] *** Quits: Jong (~Jong@2620:10d:c090:400::5:3f74) (*.net *.split)
[03:30:03] *** Quits: random-nick (~random-ni@87.116.167.143) (*.net *.split)
[03:30:03] *** Quits: ppt (~yulung@211-21-14-99.hinet-ip.hinet.net) (*.net *.split)
[03:30:03] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (*.net *.split)
[03:30:03] *** Quits: Rounin (~david@84.212.130.215) (*.net *.split)
[03:30:03] *** Quits: bliminse (~bliminse@host86-186-4-210.range86-186.btcentralplus.com) (*.net *.split)
[03:30:03] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (*.net *.split)
[03:30:03] *** Quits: zwr (~zwr@2804:d45:b966:fb00:3186:b42a:1a11:574d) (*.net *.split)
[03:30:03] *** Quits: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[03:30:03] *** Quits: karakedi (~eAC53C340@user/karakedi) (*.net *.split)
[03:30:03] *** Quits: beneth (~beneth@ip208.ip-54-36-198.eu) (*.net *.split)
[03:30:03] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (*.net *.split)
[03:30:03] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (*.net *.split)
[03:30:04] *** Quits: cpuid (~cpuid@user/cpuid) (*.net *.split)
[03:30:04] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[03:30:04] *** Quits: vin (~vin@user/crash) (*.net *.split)
[03:30:04] *** Quits: davros (~davros@host86-185-99-134.range86-185.btcentralplus.com) (*.net *.split)
[03:30:04] *** Quits: fluter- (~fluter@user/fluter) (*.net *.split)
[03:30:04] *** Quits: fcresende (~quassel@vps35015.publiccloud.com.br) (*.net *.split)
[03:30:04] *** Quits: fmac (bf93f83905@2604:bf00:561:2000::26) (*.net *.split)
[03:30:04] *** Quits: Hawker (~pi@user/hawker) (*.net *.split)
[03:30:04] *** Quits: skeels (21030cf582@2604:bf00:561:2000::237) (*.net *.split)
[03:30:04] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[03:30:04] *** Quits: defjam (~eb0t@90.210.94.161) (*.net *.split)
[03:30:04] *** Quits: FragByte (~christian@user/fragbyte) (*.net *.split)
[03:30:04] *** Quits: makersmasher (~makersmas@2600:6c40:5b00:158d:62a4:4cff:feb5:d54a) (*.net *.split)
[03:30:04] *** Quits: marcj (~marc@205.175.215.25) (*.net *.split)
[03:30:04] *** Quits: Elladan (~elladan@user/elladan) (*.net *.split)
[03:30:04] *** Quits: jaeckel (~jaeckel@sleipnir.jaeckel.eu) (*.net *.split)
[03:30:04] *** Quits: w\W (code@192.99.249.211) (*.net *.split)
[03:30:04] *** Quits: ndorf_ (~nd@ob.noxio.us) (*.net *.split)
[03:30:04] *** Quits: dme2_ (~dme2@67.205.140.199) (*.net *.split)
[03:30:04] *** Quits: krychu_ (~krychu@2a01:4f8:210:50c5::2) (*.net *.split)
[03:30:04] *** Quits: anton (anton@user/anton) (*.net *.split)
[03:30:04] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[03:30:04] *** Quits: dooba (35c4732bbc@2604:bf00:561:2000::9d) (*.net *.split)
[03:30:04] *** Quits: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d) (*.net *.split)
[03:30:04] *** Quits: exec64 (5ff8a84e19@2604:bf00:561:2000::f9) (*.net *.split)
[03:30:04] *** Quits: tom5760 (73d4025b14@user/tom5760) (*.net *.split)
[03:30:04] *** Quits: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c) (*.net *.split)
[03:30:04] *** Quits: mzal (7dc76dea13@2604:bf00:561:2000::69) (*.net *.split)
[03:30:04] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[03:30:04] *** Quits: travankor (travankor@user/travankor) (*.net *.split)
[03:30:04] *** Quits: kurfen (~kurfen@176.119.195.10) (*.net *.split)
[03:30:04] *** Quits: faint (~faint@2a05:f480:2000:1325::) (*.net *.split)
[03:30:04] *** Quits: Bou (sid274843@user/bou) (*.net *.split)
[03:30:04] *** Quits: aosync (~aws@mx1.aosync.me) (*.net *.split)
[03:30:04] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (*.net *.split)
[03:30:04] *** Quits: riv (river@tilde.team/user/river) (*.net *.split)
[03:30:04] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[03:30:04] *** Quits: haise01 (~haise01@user/haise01) (*.net *.split)
[03:30:04] *** Quits: kernelc (~kornel@46.101.204.33) (*.net *.split)
[03:30:04] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[03:30:04] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[03:30:04] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[03:30:04] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[03:30:05] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (*.net *.split)
[03:30:05] *** Quits: joev (~joev@user/joev) (*.net *.split)
[03:30:05] *** Quits: alien_lappy (~alien@user/alien) (*.net *.split)
[03:30:05] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[03:30:05] *** Quits: Telvana (~capo@user/telvana) (*.net *.split)
[03:30:05] *** Quits: homura (uid398348@user/homura) (*.net *.split)
[03:30:05] *** Quits: int (~int@0x4.cx) (*.net *.split)
[03:30:05] *** Quits: Biolunar (~bio@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (*.net *.split)
[03:30:05] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[03:30:05] *** Quits: dutch (~DutchIngr@user/dutch) (*.net *.split)
[03:30:05] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[03:30:05] *** Quits: DonRichie (~DonRichie@ricl.de) (*.net *.split)
[03:30:05] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (*.net *.split)
[03:30:05] *** Quits: u0_a391 (~u0_a391@2600:380:bc5f:f68d:8776:74f1:32c4:29f6) (*.net *.split)
[03:30:05] *** Quits: Akiva (~Akiva@user/Akiva) (*.net *.split)
[03:30:05] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (*.net *.split)
[03:30:05] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[03:30:05] *** Quits: swinnenb (~swinnenb@user/swinnenb) (*.net *.split)
[03:30:05] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (*.net *.split)
[03:30:05] *** Quits: g2anj_ (~v@58.228.230.4) (*.net *.split)
[03:30:05] *** Quits: jan6 (jan6@tilde.team/user/jan6) (*.net *.split)
[03:30:05] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[03:30:05] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (*.net *.split)
[03:30:05] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[03:30:05] *** Quits: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e) (*.net *.split)
[03:30:05] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (*.net *.split)
[03:30:06] *** Quits: Echoz (~chris@user/echoz) (*.net *.split)
[03:30:06] *** Quits: Ragnor (~Ragnor@user/ragnor) (*.net *.split)
[03:30:06] *** Quits: xcm_ (~xcm@user/xcm) (*.net *.split)
[03:30:06] *** Quits: wangledorf (sid505185@id-505185.ilkley.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (*.net *.split)
[03:30:06] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[03:30:06] *** Quits: bleb (~cm@user/bleb) (*.net *.split)
[03:30:06] *** Quits: celphi_ (sid97751@helmsley.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: englishm (sid6629@id-6629.tinside.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: subvisor (sid502026@id-502026.helmsley.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: okt (560965ea7b@user/okt) (*.net *.split)
[03:30:06] *** Quits: lemontree (~chat@user/lemontree) (*.net *.split)
[03:30:06] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: buzel (~buzel@fsf/member/buzel) (*.net *.split)
[03:30:06] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: Geezabiscuit (~Geezabisc@user/geezabiscuit) (*.net *.split)
[03:30:06] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (*.net *.split)
[03:30:06] *** Quits: m0shbear (~nope@205.185.119.231) (*.net *.split)
[03:30:06] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[03:30:06] *** Quits: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net) (*.net *.split)
[03:30:06] *** Quits: poprocks (~logan@user/poprocks) (*.net *.split)
[03:30:06] *** Quits: xSavitar (~xSavitar@user/xsavitar) (*.net *.split)
[03:30:13] *** Joins: krychu (~krychu@2a01:4f8:210:50c5::2)
[03:30:14] *** Joins: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c)
[03:30:18] *** Joins: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3)
[03:30:18] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[03:30:19] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[03:30:21] *** Joins: Ragnor (~Ragnor@dslb-084-062-055-138.084.062.pools.vodafone-ip.de)
[03:30:23] *** Joins: Riviera (Riviera@user/riviera)
[03:30:25] *** Joins: tom5760 (73d4025b14@user/tom5760)
[03:30:26] *** Joins: Rounin (~david@84.212.130.215)
[03:30:26] *** Joins: constxd (~brad@142.134.38.68)
[03:30:27] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[03:30:29] *** Joins: ppt (~yulung@211-21-14-99.hinet-ip.hinet.net)
[03:30:30] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[03:30:30] *** Joins: alien_lappy (~alien@mail.rmail.be)
[03:30:30] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[03:30:31] *** Joins: asm (~alexander@burner.asm89.io)
[03:30:32] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[03:30:33] *** Joins: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net)
[03:30:35] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[03:30:35] *** Joins: davros (~davros@host86-185-99-134.range86-185.btcentralplus.com)
[03:30:39] *** Joins: aosync (~aws@mx1.aosync.me)
[03:30:39] *** Joins: ndorf (~nd@23.95.130.20)
[03:30:41] *** Joins: cpuid (~cpuid@168.119.177.116)
[03:30:42] *** Joins: lemontree (~chat@46.23.89.241)
[03:30:42] *** Quits: Ragnor (~Ragnor@dslb-084-062-055-138.084.062.pools.vodafone-ip.de) (Changing host)
[03:30:42] *** Joins: Ragnor (~Ragnor@user/ragnor)
[03:30:43] *** Joins: FragByte (~christian@p579d2134.dip0.t-ipconnect.de)
[03:30:45] *** Joins: englishm (sid6629@id-6629.tinside.irccloud.com)
[03:30:46] *** Joins: Geezabiscuit (~Geezabisc@81.107.34.132)
[03:30:48] *** Joins: Akiva (~Akiva@d75-156-97-166.bchsia.telus.net)
[03:30:48] *** Joins: joev (~joev@pool-108-34-251-123.prvdri.fios.verizon.net)
[03:30:49] *** Joins: Echoz (~chris@47.81-167-91.customer.lyse.net)
[03:30:49] *** Joins: dsrt^ (~dsrt@98.188.240.142)
[03:30:49] *** Joins: defjam (~eb0t@90.210.94.161)
[03:30:50] *** Joins: homura (uid398348@helmsley.irccloud.com)
[03:30:51] *** Joins: g2anj_ (~v@58.228.230.4)
[03:30:52] *** Joins: u0_a391 (~u0_a391@2600:380:bc5f:f68d:8776:74f1:32c4:29f6)
[03:30:53] *** Joins: swinnenb (~swinnenb@2a02:a03f:8469:a00:6d3f:7894:f9c0:7c5c)
[03:30:53] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[03:30:53] *** Joins: celphi_ (sid97751@helmsley.irccloud.com)
[03:30:55] *** Joins: Bou (sid274843@user/bou)
[03:31:00] *** Joins: vin (~vin@cortana.cs.wisc.edu)
[03:31:03] *** Joins: jan6 (jan6@tilde.cafe)
[03:31:03] *** Joins: dutch (~DutchIngr@72.243.181.202)
[03:31:04] *** Quits: alien_lappy (~alien@mail.rmail.be) (Changing host)
[03:31:04] *** Joins: alien_lappy (~alien@user/alien)
[03:31:05] *** Joins: placeb0 (uid283215@2a03:5180:f:2::4:524f)
[03:31:09] <cousteau> are you done, Mr. Netsplit?
[03:31:10] *** Joins: jaeckel (~jaeckel@sleipnir.jaeckel.eu)
[03:31:10] *** Joins: subvisor (sid502026@2a03:5180:f:1::7:a90a)
[03:31:26] *** Joins: okt (560965ea7b@2604:bf00:561:2000::1f4)
[03:31:27] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:31:30] *** Quits: FragByte (~christian@p579d2134.dip0.t-ipconnect.de) (Changing host)
[03:31:30] *** Joins: FragByte (~christian@user/fragbyte)
[03:31:32] *** Joins: fmac (bf93f83905@2604:bf00:561:2000::26)
[03:31:33] *** Joins: echoSMILE (uid504326@helmsley.irccloud.com)
[03:31:36] *** Quits: Geezabiscuit (~Geezabisc@81.107.34.132) (Changing host)
[03:31:36] *** Joins: Geezabiscuit (~Geezabisc@user/geezabiscuit)
[03:31:36] *** Joins: xcm_ (~xcm@static.90.45.69.159.clients.your-server.de)
[03:31:38] *** homura is now known as Guest6120
[03:31:39] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[03:31:40] *** Quits: Guest6120 (uid398348@helmsley.irccloud.com) (Changing host)
[03:31:40] *** Joins: Guest6120 (uid398348@user/homura)
[03:31:43] *** Joins: anton (anton@tloks.com)
[03:31:43] *** Joins: Satin (uid193953@ilkley.irccloud.com)
[03:31:56] *** Joins: mzal (7dc76dea13@2604:bf00:561:2000::69)
[03:32:03] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[03:32:11] *** Quits: cpuid (~cpuid@168.119.177.116) (Changing host)
[03:32:11] *** Joins: cpuid (~cpuid@user/cpuid)
[03:32:11] *** Quits: echoSMILE (uid504326@helmsley.irccloud.com) (Changing host)
[03:32:11] *** Joins: echoSMILE (uid504326@user/echosmile)
[03:32:13] *** Joins: leah2 (~leah@vuxu.org)
[03:32:13] *** Quits: Satin (uid193953@ilkley.irccloud.com) (Changing host)
[03:32:13] *** Joins: Satin (uid193953@user/Seten)
[03:32:15] *** Quits: anton (anton@tloks.com) (Changing host)
[03:32:15] *** Joins: anton (anton@user/anton)
[03:32:22] *** vin is now known as Guest1693
[03:32:25] *** dutch is now known as Guest6489
[03:32:48] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:32:48] *** Joins: fcresende (~quassel@vps35015.publiccloud.com.br)
[03:32:48] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[03:32:51] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[03:32:55] *** Quits: Guest6489 (~DutchIngr@72.243.181.202) (Client Quit)
[03:32:55] <hohohoroutines> it's not an fam
[03:33:02] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[03:33:12] <hohohoroutines> and there's zero reason not to just do it properly
[03:33:18] *** Joins: mintograde (~mintograd@47.201.5.61)
[03:33:24] *** Quits: jan6 (jan6@tilde.cafe) (Changing host)
[03:33:24] *** Joins: jan6 (jan6@tilde.team/user/jan6)
[03:33:28] *** Joins: Colt (~Colt@user/colt)
[03:33:30] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Read error: Connection reset by peer)
[03:33:38] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[03:33:44] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:33:48] *** Joins: elemongw (~elemongw@20.107.36.50)
[03:34:11] *** Joins: DutchIngraham (~DutchIngr@72.243.181.202)
[03:34:14] *** Quits: celphi_ (sid97751@helmsley.irccloud.com) (Changing host)
[03:34:14] *** Joins: celphi_ (sid97751@user/celphi)
[03:34:16] *** Quits: DutchIngraham (~DutchIngr@72.243.181.202) (Signing in (DutchIngraham))
[03:34:16] *** Joins: DutchIngraham (~DutchIngr@user/dutch)
[03:34:17] *** Joins: faint (~faint@2a05:f480:2000:1325::)
[03:34:18] *** Joins: sm2n (ae95cb1267@user/sm2n)
[03:34:18] *** Joins: Elladan (~elladan@user/elladan)
[03:34:22] *** Joins: skeels (21030cf582@2604:bf00:561:2000::237)
[03:34:25] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[03:34:28] *** Joins: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d)
[03:34:32] *** Joins: dooba (35c4732bbc@2604:bf00:561:2000::9d)
[03:34:33] *** Joins: Telvana (~capo@user/telvana)
[03:34:33] *** Joins: int (~int@0x4.cx)
[03:34:35] *** Joins: exec64 (5ff8a84e19@2604:bf00:561:2000::f9)
[03:34:35] <cousteau> hohohoroutines: look how wrong you are!
[03:34:36] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[03:34:36] *** Joins: slavfox (~slavfox@93.158.232.111)
[03:34:37] <cousteau> ,cc union { char s[1]; int i; } u; u.s[sizeof (int) - 1] = 42;
[03:34:39] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[03:34:40] <candide> cousteau:  runtime error: index 3 out of bounds for type 'char [1]'
[03:34:42] *** Joins: haise01 (~haise01@user/haise01)
[03:34:43] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[03:34:46] *** Joins: kurfen (~kurfen@176.119.195.10)
[03:34:47] *** DutchIngraham is now known as Guest6728
[03:34:47] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[03:34:47] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[03:34:50] <cousteau> pragma-: your bot is clearly broken because there's no way I was wrong!
[03:34:51] *** Joins: shan (~shan@cyblog/maintainer/shan)
[03:34:54] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[03:34:56] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:35:01] *** Joins: marcj (~marc@205.175.215.25)
[03:35:08] *** Joins: buzel (~buzel@fsf/member/buzel)
[03:35:11] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[03:35:11] *** Joins: m0shbear (~nope@205.185.119.231)
[03:35:16] <cousteau> hohohoroutines: ok so MAYBE I was wrong.  Maybe.
[03:35:17] *** Joins: poprocks (~logan@bras-base-toroon1016w-grc-32-76-64-53-16.dsl.bell.ca)
[03:35:17] *** Joins: bleb (~cm@user/bleb)
[03:35:18] *** Quits: Guest6728 (~DutchIngr@user/dutch) (Client Quit)
[03:35:19] *** Joins: bliminse (~bliminse@host86-186-4-210.range86-186.btcentralplus.com)
[03:35:19] *** Joins: kernelc (~kornel@46.101.204.33)
[03:35:21] *** Joins: Hawker (~pi@user/hawker)
[03:35:22] *** celphi_ is now known as celphi
[03:35:27] *** Joins: klys (~mdasoh@show.op8.us)
[03:35:27] *** Joins: zwr (~zwr@2804:d45:b966:fb00:a798:3719:6645:498)
[03:35:28] <cousteau> (god, will this damn netsplit never end?)
[03:35:34] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[03:35:35] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Remote host closed the connection)
[03:35:35] *** Joins: koolazer (~koo@user/koolazer)
[03:35:35] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[03:35:38] *** Joins: DonRichie (~DonRichie@ricl.de)
[03:35:42] *** Joins: mdw (~root@159.65.86.163)
[03:36:08] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[03:36:25] *** Joins: riv (river@tilde.team/user/river)
[03:36:52] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[03:37:26] <hohohoroutines> how come i get in trouble for saying blent and you don't get in trouble for not saying netsplidded
[03:37:49] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:37:49] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:37:49] *** Joins: wroathe (~wroathe@user/wroathe)
[03:38:28] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Client Quit)
[03:38:30] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[03:38:30] *** Joins: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e)
[03:38:40] *** Joins: dme2 (~dme2@67.205.140.199)
[03:39:03] <cousteau> because blent sounds too much like blunt?
[03:39:59] <hohohoroutines> blunded body reentry vehicle
[03:42:50] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:43:39] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[03:45:49] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[03:47:13] *** Quits: luca0N (~luca0N@nautilus.luca0n.com) (Quit: Leaving)
[03:47:23] *** Joins: Wulf (~Wulf@user/wulf)
[03:47:27] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[03:47:27] *** Joins: luca0N (~luca0N@nautilus.luca0n.com)
[03:47:31] *** Quits: zat (~zat@191.23.60.220) (Ping timeout: 256 seconds)
[03:47:51] *** luca0N is now known as Guest7846
[03:48:11] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 250 seconds)
[03:48:25] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[03:48:34] *** Guest7846 is now known as luca0N
[03:48:39] *** Joins: jinsun__ (~quassel@user/jinsun)
[03:49:05] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[03:49:26] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[03:49:55] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[03:50:02] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[03:50:06] <wroathe> hohohoroutines: Have you considered that coroutines may not be the answer?
[03:50:29] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[03:51:31] *** Quits: poprocks (~logan@bras-base-toroon1016w-grc-32-76-64-53-16.dsl.bell.ca) (Changing host)
[03:51:31] *** Joins: poprocks (~logan@user/poprocks)
[03:51:37] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[03:51:47] *** Quits: poprocks (~logan@user/poprocks) (Quit: leaving)
[03:52:21] *** Joins: poprocks (~logan@user/poprocks)
[03:55:20] *** Quits: spike_spiegel38 (~spike_spi@static.200.4.251.148.clients.your-server.de) (Read error: Connection reset by peer)
[03:56:36] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
[03:56:45] *** Quits: Akuli (~Akuli@82-203-161-29.bb.dnainternet.fi) (Quit: Akuli)
[03:57:48] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[03:58:39] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:59:20] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf) (Read error: Connection reset by peer)
[03:59:34] *** Joins: odoood (~odoood@2601:c8:c003:a550::5)
[04:00:00] *** Quits: GDiaX (~medic@186.99.62.94.rev.vodafone.pt) (Read error: Connection reset by peer)
[04:00:05] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf)
[04:01:24] *** Joins: treble (~treble@user/treble)
[04:02:49] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 256 seconds)
[04:04:22] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[04:04:29] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[04:06:51] *** Joins: shivesh (~shivesh@user/shivesh)
[04:07:42] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:09:02] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:14:31] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Read error: Connection reset by peer)
[04:15:19] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:15:21] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[04:15:34] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[04:16:02] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:16:02] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:17:20] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[04:18:07] *** Quits: Akiva (~Akiva@d75-156-97-166.bchsia.telus.net) (Ping timeout: 256 seconds)
[04:18:22] *** Joins: u0_a3911 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[04:18:49] *** Quits: u0_a3911 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Read error: Connection reset by peer)
[04:22:13] *** Quits: u0_a391 (~u0_a391@2600:380:bc5f:f68d:8776:74f1:32c4:29f6) (Ping timeout: 250 seconds)
[04:22:39] *** Joins: BUSY (~BUSY@user/busy)
[04:23:17] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Ping timeout: 240 seconds)
[04:24:10] *** vinleod is now known as vdamewood
[04:24:40] *** Joins: u0_a3911 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[04:25:57] *** Quits: u0_a3911 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Read error: Connection reset by peer)
[04:30:27] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[04:31:36] *** Quits: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net) (Quit: Client closed)
[04:31:47] *** Joins: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net)
[04:32:11] *** phrosty is now known as scalablecory
[04:32:24] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[04:33:31] *** Quits: okt (560965ea7b@2604:bf00:561:2000::1f4) (Changing host)
[04:33:31] *** Joins: okt (560965ea7b@user/okt)
[04:34:57] *** Joins: u0_a3911 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[04:35:44] *** Quits: u0_a3911 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Read error: Connection reset by peer)
[04:37:33] *** Joins: u0_a3911 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[04:37:33] *** Quits: u0_a3911 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Read error: Connection reset by peer)
[04:40:02] *** Joins: rgrinberg (~textual@187.223.209.106)
[04:41:20] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[04:43:13] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8)
[04:43:24] *** Joins: malloy (~jimery@116.30.221.255)
[04:43:28] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[04:43:50] *** Joins: u0_a3911 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[04:46:42] *** Quits: u0_a3911 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Read error: Connection reset by peer)
[04:49:42] *** Joins: fe23 (~fe23@2409:8a34:468:83d0:edd6:ffef:9645:1c12)
[04:50:36] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf)
[04:53:16] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf) (Ping timeout: 245 seconds)
[04:57:20] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf) (Read error: Connection reset by peer)
[04:58:05] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf)
[04:59:29] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[05:00:14] *** Joins: kurahaupo_ (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au)
[05:01:29] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[05:03:49] *** Quits: kurahaupo (~kurahaupo@203-194-51-46.static.tpgi.com.au) (Ping timeout: 250 seconds)
[05:04:03] *** Joins: frost (~frost@user/frost)
[05:05:51] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:07:59] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f)
[05:08:01] *** Joins: u0_a3912 (~u0_a391@2600:380:bc5f:f68d:3fb6:8346:c9e8:14af)
[05:08:52] *** Joins: odoood (~odoood@2601:c8:c003:a550::5)
[05:11:45] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f) (Client Quit)
[05:13:40] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f)
[05:14:11] *** u0_a3912 is now known as Kit
[05:14:13] *** Quits: treble (~treble@user/treble) (Ping timeout: 256 seconds)
[05:14:47] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[05:15:37] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:15:47] *** Joins: treble (~treble@user/treble)
[05:16:06] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[05:17:54] *** Joins: abraham (~abraham@143.244.185.86)
[05:18:06] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[05:19:16] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[05:20:54] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[05:22:21] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[05:22:55] *** Joins: arinov (~arinov@213.194.126.155)
[05:24:21] *** Joins: karakedi (~eAC53C340@user/karakedi)
[05:24:56] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[05:25:08] *** Joins: beencubed (~beencubed@209.131.238.248)
[05:25:23] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[05:27:45] *** Quits: beencubed (~beencubed@209.131.238.248) (Client Quit)
[05:29:53] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:31:15] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[05:31:22] *** Joins: beencubed (~beencubed@209.131.238.248)
[05:31:33] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 250 seconds)
[05:33:01] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[05:35:22] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[05:37:44] *** Joins: goddard (~goddard@user/goddard)
[05:38:29] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[05:38:37] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[05:40:00] *** Joins: moog (~moog@107.126.48.93)
[05:40:25] *** Quits: moog_ (~moog@107.126.48.93) (Ping timeout: 250 seconds)
[05:41:23] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[05:41:54] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[05:43:04] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[05:48:38] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[05:52:33] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[05:53:23] *** Joins: loganlee (~Thunderbi@user/loganlee)
[05:55:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:55:18] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[05:56:37] *** Quits: EtherNet (~ethernet@user/ethernet) (Ping timeout: 240 seconds)
[05:56:50] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[06:03:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8) (Quit: Quit)
[06:03:30] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:04:09] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 276 seconds)
[06:05:15] *** Quits: moog (~moog@107.126.48.93) (Remote host closed the connection)
[06:05:37] *** Joins: moog (~moog@107.126.48.93)
[06:05:58] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[06:07:18] <goddard> anyone can explain something to me
[06:07:28] <goddard> https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#exchanging_data_frames
[06:07:38] <goddard> how is this frame setup?
[06:07:38] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[06:07:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:07:54] <goddard> i tried 0b00000000 and i change the bits but it is always wrong
[06:07:57] <goddard> it doesn't make sense
[06:09:20] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[06:09:36] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[06:10:23] <cousteau> are you taking into account endianness?
[06:10:25] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[06:11:05] <goddard> no
[06:12:29] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 250 seconds)
[06:12:51] <cousteau> like, if you read stuff in blocks of 4 bytes, you have to keep into account that network stuff usually transmits the most significant byte first
[06:12:56] *** Joins: u0_a391 (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com)
[06:13:48] <goddard> hmm ok .. so i guess i gotta figure out what most significant means
[06:14:06] <wroathe> lol
[06:14:15] <cousteau> when you have a number like 2048, 2 is the most significant digit, 8 is the least significant digit
[06:14:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:14:32] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[06:14:36] <goddard> oh so size
[06:14:47] <cousteau> 2048 in hexadecimal is 0x0800
[06:15:14] <cousteau> (...right?)
[06:15:18] *** Joins: Enitin (~Enitin@82.102.22.85)
[06:15:27] <cousteau> (yes, ok, it is)
[06:16:07] <cousteau> 0x0800 (as a 16-bit int) has two bytes; the most significant is 0x08 and the least significant is 00
[06:16:44] *** Quits: Kit (~u0_a391@2600:380:bc5f:f68d:3fb6:8346:c9e8:14af) (Ping timeout: 252 seconds)
[06:16:57] <cousteau> computers usually encode the least significant byte first (they start "from the right"), so byte 0 of that number would be the 00 and byte 1 would be the 08
[06:17:07] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[06:17:17] <cousteau> (with some exceptions; for example PowerPC goes the other way around)
[06:17:22] <rcf> Well, not anymore. 
[06:17:45] *** u0_a391 is now known as Kit
[06:17:51] *** Joins: reset (~reset@user/reset)
[06:17:59] <cousteau> but stuff sent over the internet always uses the same way; and that happens to be to send the most significant byte first
[06:18:01] <rcf> IBM have given in and only support BE power hardware as a legacy platform these days. 
[06:18:06] <cousteau> so 08 first and 00 last
[06:19:14] <rcf> (technically powerpc/power have always been switchable, but supporting hardware pushes people toward one or the other, at least for the bare metal OS) 
[06:19:26] <cousteau> so... basically, and since it's not really written anywhere how your computer should store the stuff (big endian, ie starting from the big (most significant) end; or little endian, ie starting from the little (least significant) end)
[06:20:06] <cousteau> you have to be careful and translate data from "host" to "network" order when transmitting it, and from "network" to "host" order when receiving it
[06:20:18] <goddard> i see
[06:20:20] <rcf> Well, sometimes. 
[06:20:38] <cousteau> (if your machine is big endian you don't really have to do anything, because host and network order happen to be the same)
[06:20:41] <rcf> In modern use more and more protocols eschew network order because it's a total waste of time. 
[06:20:53] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[06:21:16] <cousteau> rcf: but stuff such as frame headers are always big endian, right?
[06:21:22] <rcf> Those are, yes. 
[06:21:22] *** Joins: tejr (~tejr@user/tejr)
[06:21:40] <cousteau> whether the data they transmit is big or little endian is just a matter of whatever the specific application feels like doing
[06:22:26] <cousteau> obviously if you want to send a binary file containing integeres in little endian there's no rule that says you have to convert it to big endian if you want to send it through the internet
[06:24:04] *** Quits: moog (~moog@107.126.48.93) (Remote host closed the connection)
[06:25:25] <goddard> am i right in thinking this diagram represents a single byte up to the mask?
[06:25:42] <cousteau> goddard: so... back to the "frame format" example.  Byte 0 is a bunch of bits plus an opcode.  Byte 1 is a mask bit (as the most significant bit) plus a length (basically "either 0 or 128" for the mask, plus a length from 0 to 127)
[06:25:45] <goddard> if so 0b00000001 is clearly from right to left
[06:26:10] <cousteau> um no, the diagram represents 32 bits from left to right
[06:26:16] <cousteau> each row is 32 bits (4 bytes)
[06:26:19] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[06:26:37] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 240 seconds)
[06:28:49] <cousteau> so it's 1 byte for the FIN bit and the opcode, then 1 byte for the length (if it's 125 or less) or 3 (if it's 126 to 65535) or 9 (if it's 65536 or more)
[06:28:54] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:28:55] <cousteau> and then the mask (4 bytes)
[06:29:04] <cousteau> and then the payload (message)
[06:29:14] <goddard> ok
[06:29:44] <goddard> do you ignore the rsv1, 2, 3
[06:29:53] <cousteau> it says so in the spec
[06:30:08] <cousteau> "RSV1-3 can be ignored, they are for extensions."
[06:30:29] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 250 seconds)
[06:30:47] <rcf> goddard: keep in mind that bit ordering is consistent, only byte order changes. 
[06:30:59] <cousteau> indeed
[06:31:10] <rcf> (as far as you need to care about anyway, for those of us in the lower level world....) 
[06:31:43] <cousteau> so you read the first byte to know the type of message (opcode and FIN bit), then you read the second byte to know the length and MASK bit
[06:32:26] <goddard> ok gotcha
[06:32:35] <goddard> gotta play around with this more 
[06:32:35] <cousteau> if the length (once you've removed the MASK bit) is 0 to 125, that's the actual length.  If it's 126, you read the following 2 bytes to get the actual length.  If it's 127, you have to read the 8 following bytes.
[06:32:53] <cousteau> And those 2 bytes are ordered as 256*first + second
[06:33:33] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:33:34] <cousteau> (or `first<<8 | second` if you're using bitwise operators, which you probably will want to)
[06:33:58] <goddard> that is what is confusing me as well
[06:34:25] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 268 seconds)
[06:35:22] <goddard> if i wanted a fin of 1 and opcode of 1 for text and a mask of 0(zero) how would you right that ?
[06:35:23] <cousteau> there are usually functions to convert from network to host order, so you can just read those 2 bytes into a 16 bit integer (typically an unsigned short), and then use a function called something like `ntohs()` to convert from Network TO Host order a Short
[06:35:47] <cousteau> fin 1 means 1xxxxxxx
[06:35:56] <cousteau> opcode of 1 means xxxx0001
[06:36:26] <cousteau> and the RSV bits are probably zero, so x000xxxx
[06:36:44] <goddard> hmm
[06:36:50] <cousteau> so 1-000-0001, i.e. 0x81, i.e. 129
[06:37:31] <cousteau> 1000-0001 = 0b10000001 = 0x81 (1000 is 8, 0001 is 1)
[06:37:54] <cousteau> or you can build the number by doing 1<<7 | 1
[06:38:38] <cousteau> (a 1 bit shifted up to the 7th position, combined with a (four-bit) 1 in the 0th position, counting from the right)
[06:39:10] <goddard> and people like to do that rather then 0b format?
[06:39:19] <cousteau> then for the second byte, you want a mask of 0, so that'll be 0xxxxxxx
[06:39:44] <cousteau> well, 0b looks nice but it's not standard C (yet).  Many compilers support it though.
[06:39:57] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Read error: Connection reset by peer)
[06:40:01] <cousteau> the advantage of 1<<7 | 1 is that both ones may be parameters
[06:40:45] <cousteau> like   unsigned int fin = 1;  unsigned int op = 1;  unsigned char first_byte = fin<<7 | op;
[06:41:00] <cousteau> (or maybe they're parameters to a function, or assigned within an if, or whatever)
[06:41:19] <cousteau> feel free to hard-code that as 0b10000001 or 0x81 though
[06:41:25] <goddard> ahh i see
[06:41:29] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[06:41:50] <hohohoroutines> is 0b10000001 c23 or is it still just gonna be a gurnoo extension
[06:41:57] <cousteau> 0x81 should be readable enough if you understand how hex maps to bin (the first 8 is just a shortened 1000, the second 1 is a shortened 0001)
[06:42:21] <cousteau> hohohoroutines: I *think* it is C23, or at least it was planned
[06:42:40] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community: https://indiedevs.net/)
[06:43:40] <wroathe> hohohoroutines: You're a gurnoo extension.
[06:45:09] <hohohoroutines> *deep sigh* maybe i am
[06:45:24] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:45:38] <cousteau> http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2731.pdf binary-prefix: one of 0b 0B
[06:47:36] <hohohoroutines> yay
[06:48:33] *** Joins: gco (~gco@2601:647:4c80:2424:6d7b:d9aa:d590:cbee)
[06:49:29] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:49:49] <cousteau> goddard: so say you want FIN=1, OP=0001, MASK=1 and length=33 (0100001).  Then first byte would be 1-000-0001 and second byte would be 1-0100001
[06:50:05] <cousteau> so 0b10000001 and 0b10100001
[06:51:26] <goddard> i see
[06:51:36] <goddard> still lots to play around with using that
[06:52:14] <cousteau> now, if length is more than 125, say 1234 bytes (0000-0100-1101-0010), then second byte needs to encode "126" (1111110) and third and fourth bytes will be 0000-0100 and 1101-0010 respectively
[06:53:39] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[06:54:15] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:54:57] <cousteau> so in that case you'd be sending   1000-0001  1111-1110  0000-0100  1101-0010
[06:55:13] <cousteau> ie 81 FE 04 D2
[06:55:44] <cousteau> byte 0 is 0x81, byte 1 is 0xFE, and so on
[06:55:57] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[06:57:15] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[06:57:27] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[06:58:18] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:e7e:a40e:598b:4092)
[06:58:25] <cousteau> tightly packed binary protocols like this aren't specially nice, but not too terrible either once you get used to them
[06:59:12] <cousteau> you might be able to use some library function to generate them instead of having to deal with it yourself manually.  If this seems too complicated and frustrating maybe it's a good idea to search for one of those instead
[06:59:29] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Client Quit)
[06:59:50] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[07:00:56] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[07:00:59] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:01:46] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[07:02:27] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[07:02:58] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[07:03:24] <cousteau> "3. Read the next 64 bits and interpret those as an unsigned integer. (The most significant bit must be 0.)"
[07:03:47] <dave0> maw
[07:03:49] <cousteau> yeah no shit sherlock; if it were 1 it would take more than a century to transmit the whole thing even at 20 Gbps
[07:05:47] <wroathe> cousteau: Nerd
[07:05:57] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[07:06:13] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[07:07:17] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[07:07:17] <cousteau> hey, not my fault they warn you not to break impossible goals
[07:09:28] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[07:10:14] *** Joins: Enitin (~Enitin@82.102.22.86)
[07:14:34] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[07:16:38] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[07:17:11] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[07:17:30] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[07:18:53] *** Joins: travankor (travankor@user/travankor)
[07:20:19] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[07:21:30] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Client Quit)
[07:22:28] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[07:23:15] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[07:23:34] *** Quits: alch (~alch@151.36.107.205) (Read error: Connection reset by peer)
[07:26:21] *** Joins: alch (~alch@151.36.118.38)
[07:26:23] *** Quits: de-facto (~de-facto@user/de-facto) (Quit: See you around. 💤)
[07:27:01] *** Joins: de-facto (~de-facto@user/de-facto)
[07:27:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:28:59] *** Joins: chello (~qw-1@user/chello)
[07:29:53] *** Parts: emanuele6 (~emanuele6@user/emanuele6) (WeeChat 3.3)
[07:30:38] <chello> Hi, I want to be honest here. I'm a total idiot when it comes to coding. I want to learn but have no idea where to start. My end goal is to make programs or possibly cheats for games. Where do I start?
[07:30:57] <smlavine> Probably not in C
[07:31:15] <chello> Is there a preferred ladder?
[07:31:49] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[07:32:46] *** Joins: begriffs (~begriffs@user/begriffs)
[07:33:19] *** Quits: begriffs (~begriffs@user/begriffs) (Client Quit)
[07:34:17] <dave0> i've heard scheme is good for learning how to program
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:53] <dave0> #scheme seems to exist here
[07:38:44] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:40:25] <chello> I'm reading up on it. Every time I look at this stuff I feel so stupid.
[07:40:53] <dave0> coding's not for everyone
[07:40:54] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[07:44:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:44:25] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:44:25] *** Joins: wroathe (~wroathe@user/wroathe)
[07:45:06] <smlavine> Python is probably the most common first language to learn
[07:46:48] <chello> I once knew a guy that was a genius at php and since I basically think in images, he told me that when it comes to that he's color blind. I think I'm that, only with coding, but I want to learn, but it's like it just doesn't click.
[07:47:17] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:48:15] <smlavine> That's okay. It's not for everyone. But there are a lot of resources out there that can make it for more people than you might think
[07:48:19] *** Quits: gco (~gco@2601:647:4c80:2424:6d7b:d9aa:d590:cbee) (Quit: ZZZzzz…)
[07:48:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[07:50:23] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Quit: The Lounge - https://thelounge.chat)
[07:51:42] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf) (Read error: Connection reset by peer)
[07:53:28] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:8d6c:5230:cbd2:1879)
[07:54:26] *** Parts: chello (~qw-1@user/chello) ()
[07:59:44] *** Joins: doofenshmirtz (~farawayas@103.160.128.7)
[07:59:44] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[08:03:57] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Ping timeout: 240 seconds)
[08:06:56] *** Joins: Guest92 (~Guest92@47.153.171.56)
[08:08:02] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[08:09:08] *** Quits: mintograde (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[08:09:43] *** Joins: rgrinberg (~textual@187.223.209.106)
[08:10:05] *** Parts: Guest92 (~Guest92@47.153.171.56) ()
[08:23:24] *** Quits: soapsudsxx (~soapsudsx@141.193.188.143) (Remote host closed the connection)
[08:23:27] *** Quits: okt (560965ea7b@user/okt) (Remote host closed the connection)
[08:23:36] *** Joins: okt (560965ea7b@user/okt)
[08:25:30] *** Joins: slidercrank (~slidercra@user/slidercrank)
[08:27:36] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[08:27:55] *** Joins: tejr (~tejr@user/tejr)
[08:29:28] *** Joins: constxd (~brad@142.134.38.68)
[08:33:27] *** Joins: mkv (~znc@ubuntu/member/m4v)
[08:33:45] *** pflanze__ is now known as pflanze
[08:33:59] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 250 seconds)
[08:34:00] *** mkv is now known as m4v
[08:34:21] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[08:35:57] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 256 seconds)
[08:36:08] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[08:37:31] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[08:38:50] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 260 seconds)
[08:53:04] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[08:53:32] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:54:15] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:54:54] *** Joins: vicfred (~vicfred@user/vicfred)
[08:55:21] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[08:56:17] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[08:57:30] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[09:00:05] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[09:00:19] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 256 seconds)
[09:01:56] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[09:03:58] *** Joins: X-Scale` (~ARM@206.46.158.5.rev.vodafone.pt)
[09:07:38] *** Quits: X-Scale (~ARM@31.22.202.86) (Ping timeout: 265 seconds)
[09:07:38] *** X-Scale` is now known as X-Scale
[09:08:57] *** Joins: Burgundy (~yomon@79.115.213.171)
[09:12:47] *** Quits: inomoz (~inomoz@85.26.165.145) (Ping timeout: 256 seconds)
[09:17:21] *** jinsun__ is now known as jinsun
[09:20:31] *** Joins: beneth (~beneth@ip208.ip-54-36-198.eu)
[09:26:57] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[09:26:58] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[09:27:25] *** Joins: kurahaupo (~kurahaupo@d211-31-139-245.bla1.nsw.optusnet.com.au)
[09:30:25] *** Joins: Rounin (~david@84.212.130.215)
[09:31:24] *** Quits: kurahaupo_ (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[09:33:01] *** Joins: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr)
[09:42:48] *** Quits: kurahaupo (~kurahaupo@d211-31-139-245.bla1.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[09:45:02] *** Joins: kurahaupo (~kurahaupo@d211-31-139-245.bla1.nsw.optusnet.com.au)
[09:45:09] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[09:46:04] *** Joins: the_lanetly_052_ (~the_lanet@194.135.154.32)
[09:46:12] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[09:46:49] *** Quits: the_lanetly_052_ (~the_lanet@194.135.154.32) (Max SendQ exceeded)
[09:47:18] *** Joins: the_lanetly_052_ (~the_lanet@194.135.154.32)
[09:47:58] *** Quits: the_lanetly_052_ (~the_lanet@194.135.154.32) (Max SendQ exceeded)
[09:48:26] *** Joins: the_lanetly_052_ (~the_lanet@194.135.154.32)
[09:49:46] *** Joins: chomwitt (~chomwitt@2a02:587:dc19:a500:12c3:7bff:fe6d:d374)
[09:52:31] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:52:57] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[09:53:01] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[09:54:32] *** Quits: kurahaupo (~kurahaupo@d211-31-139-245.bla1.nsw.optusnet.com.au) (Ping timeout: 252 seconds)
[09:55:19] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:56:57] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[09:57:18] *** Quits: segnior_ (segnior@user/segnior) (Ping timeout: 268 seconds)
[09:58:50] *** Joins: kurahaupo (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au)
[09:59:56] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[10:00:16] *** Joins: segnior (segnior@user/segnior)
[10:02:08] *** wyre_ is now known as wyre
[10:02:18] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[10:04:48] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:10:12] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:10:59] *** Joins: diiirt (~diiirt@user/diiirt)
[10:12:43] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[10:13:02] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:14:58] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e546:f9c1:f549:4c7e:0:281)
[10:16:32] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[10:16:54] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[10:16:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[10:20:00] *** Joins: ztx (~ztx@user/ztx)
[10:20:39] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[10:21:16] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:24:07] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Read error: Connection reset by peer)
[10:25:24] *** Joins: doofenshmirtz (~farawayas@103.160.128.7)
[10:25:57] *** Quits: Echoz (~chris@47.81-167-91.customer.lyse.net) (Quit: WeeChat 3.3)
[10:26:18] *** Joins: Echoz (~chris@user/echoz)
[10:30:21] *** Quits: mrec (~markus@sundtek.de) (Changing host)
[10:30:21] *** Joins: mrec (~markus@user/mrec)
[10:32:47] *** Quits: swinnenb (~swinnenb@2a02:a03f:8469:a00:6d3f:7894:f9c0:7c5c) (Quit: This is the hidden truth, the world between the lines.)
[10:32:50] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[10:33:02] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[10:34:02] *** Joins: jancoow (~jancoow@user/jancoow)
[10:34:30] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[10:36:20] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 252 seconds)
[10:38:09] *** Joins: digilink (~digilink@user/digilink)
[10:39:14] *** Quits: et09 (~et09@user/et09) (Ping timeout: 260 seconds)
[10:39:31] *** Joins: diamondbond (~diamondbo@175.157.81.165)
[10:40:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[10:42:56] *** Quits: kurahaupo (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[10:43:21] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:47:27] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:52:43] *** Joins: gshumway (~gshumway@user/gshumway)
[11:01:22] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.157)
[11:02:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:03:17] *** Quits: the_lanetly_052_ (~the_lanet@194.135.154.32) (Ping timeout: 252 seconds)
[11:08:48] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[11:10:32] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[11:13:15] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[11:17:05] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:17:50] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[11:18:31] *** Quits: joe_ (~joe_@2601:84:4501:6440:9d39:c68:2122:cba) (Remote host closed the connection)
[11:19:09] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[11:19:59] *** Joins: malloy (~jimery@116.30.221.255)
[11:24:32] *** Quits: rahl (~rahl@102.114.205.237) (Ping timeout: 240 seconds)
[11:24:49] *** Quits: alch (~alch@151.36.118.38) (Ping timeout: 256 seconds)
[11:26:27] *** Joins: rahl (~rahl@102.114.84.162)
[11:26:42] *** Joins: alch (~alch@151.82.126.6)
[11:28:58] *** Joins: lleo (~leo@31-161-154-106.mobile.kpn.net)
[11:31:37] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:e7e:a40e:598b:4092) (Ping timeout: 240 seconds)
[11:35:17] *** Quits: lleo (~leo@31-161-154-106.mobile.kpn.net) (Ping timeout: 240 seconds)
[11:36:37] *** Quits: fe23 (~fe23@2409:8a34:468:83d0:edd6:ffef:9645:1c12) (Ping timeout: 240 seconds)
[11:38:38] *** Joins: node1 (~hex@user/node1)
[11:38:47] <node1> Hello
[11:40:37] <node1> If i have the address of a object(Python class object). Then is it possible to decipher( get the content ) of that object ?
[11:40:49] <node1> using C?
[11:42:16] *** Joins: karakedi (~eAC53C340@user/karakedi)
[11:44:02] *** Quits: m4ho (~m4ho@p5098be52.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[11:44:10] <Learath2> I'm guessing this is a python c extension api question which isn't really fitting here, but the documentation for PyObject isn't that bad, so you should just read that
[11:45:28] <node1> Let suppose ` <__main__.Tree object at 0x7fea986b5e10>`  How could we decipher the content stored at this address using C?
[11:45:58] <node1> In general it indicates that the object has been created at this place on a memory.
[11:46:23] <node1> I wish we could do some magic in C to print the content of that address.
[11:46:47] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:47:29] <dave0> without knowing the layout of that struct, you're stuck with dumping the raw hex bytes from memory
[11:47:32] <Learath2> What do you mean "using C"? What is our context? Are we attaching ourselves using ptrace? Are we coding a python extension? Are we injecting dlls? The answer is drastically different depending on context
[11:48:12] <dave0> i don't know the gdb command to dump bytes of memory, but if it's code you can disassemble <address>
[11:48:30] <Learath2> I'm not even getting into what you mean by "decipher". What is an acceptable deciphering of a Tree e.g.?
[11:48:37] *** Joins: m4ho (~m4ho@p5098be52.dip0.t-ipconnect.de)
[11:48:47] <Learath2> dave0: it's x, e(x)amine
[11:49:15] <Learath2> but using gdb to dump it is not "using C" by any definition imho :P
[11:49:15] <dave0> Learath2: ah thanks
[11:49:44] *** Joins: kurahaupo (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au)
[11:50:07] *** Joins: Akiva (~Akiva@user/Akiva)
[11:50:36] *** Joins: aradesh (~aradesh@user/aradesh)
[11:50:37] *** Joins: hex_ (~hex@1.39.139.189)
[11:50:37] *** Quits: hex_ (~hex@1.39.139.189) (Client Quit)
[11:51:17] *** Quits: node1 (~hex@user/node1) (Killed (NickServ (GHOST command used by hex_!~hex@1.39.139.189)))
[11:51:24] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[11:51:44] *** Joins: node1 (~hex@user/node1)
[11:51:55] <node1> dave0, I agree here we must know the object occupied at memory. But it's clear that the first starting  address is 0x7fea986b5e10
[11:53:05] <node1> we must know how the object is being occupied*
[11:56:46] *** Joins: mrig (~AdiIRC@user/mrig)
[11:56:52] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[11:56:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[11:57:17] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[12:00:31] *** Joins: Enitin (~Enitin@82.102.22.85)
[12:00:45] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[12:00:59] *** Joins: constxd (~brad@142.134.38.68)
[12:01:02] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[12:03:19] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:75e6:90b9:a33f:f625)
[12:03:32] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:04:00] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:04:57] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[12:05:12] *** Quits: node1 (~hex@user/node1) (Quit: Leaving)
[12:05:37] *** Quits: kurahaupo (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[12:10:12] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[12:10:51] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:11:53] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[12:12:05] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:13:02] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[12:14:13] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[12:14:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[12:15:20] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[12:16:23] *** Quits: diamondbond (~diamondbo@175.157.81.165) (Ping timeout: 256 seconds)
[12:22:57] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[12:28:03] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[12:29:18] *** Joins: inlight (~inlight@157.35.40.164)
[12:29:18] *** Quits: inlight (~inlight@157.35.40.164) (Changing host)
[12:29:18] *** Joins: inlight (~inlight@user/inlight)
[12:30:14] *** Joins: Klinda (~superleag@user/klinda)
[12:31:41] *** Quits: PortableDave (~portabled@118.210.56.9) (Ping timeout: 256 seconds)
[12:32:20] *** Joins: PortableDave (~portabled@118.210.56.9)
[12:37:07] *** Joins: inomoz (~inomoz@85.26.165.145)
[12:38:52] *** Quits: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com) (Ping timeout: 268 seconds)
[12:39:07] *** Joins: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com)
[12:41:12] *** Joins: jamesmartinez (uid6451@id-6451.helmsley.irccloud.com)
[12:44:29] *** Quits: iomari891 (~iomari891@197.210.70.46) (Ping timeout: 252 seconds)
[12:45:17] *** Quits: m4ho (~m4ho@p5098be52.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[12:45:57] *** Joins: iomari891 (~iomari891@197.210.70.47)
[12:48:57] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:50:04] *** Pokey is now known as ahorner
[12:50:09] *** ahorner is now known as Pokey
[12:51:09] *** Joins: m4ho (~m4ho@p5098be52.dip0.t-ipconnect.de)
[12:51:12] *** Quits: PortableDave (~portabled@118.210.56.9) (Ping timeout: 268 seconds)
[12:53:06] *** Joins: fe23 (~fe23@2409:8a34:468:83d0:b891:f17d:c81d:13b3)
[12:53:45] *** Quits: ppt (~yulung@211-21-14-99.hinet-ip.hinet.net) (Ping timeout: 250 seconds)
[12:54:29] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:56:28] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:58:21] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[12:59:15] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[12:59:37] *** Quits: iomari891 (~iomari891@197.210.70.47) (Ping timeout: 240 seconds)
[13:02:30] *** Joins: iomari891 (~iomari891@197.210.70.65)
[13:03:29] *** Quits: LucaTM (~LucaTM@user/lucatm) (Read error: Connection reset by peer)
[13:09:39] *** Joins: plastico (~plastico@neomutt/plastico)
[13:10:37] *** Joins: lleo (~leo@31-161-154-106.mobile.kpn.net)
[13:10:55] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:11:07] *** Quits: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[13:11:52] *** Joins: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr)
[13:11:59] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:13:45] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[13:14:45] *** Quits: m4ho (~m4ho@p5098be52.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[13:14:46] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:14:49] *** Joins: bindu_ (~bindu@user/bindu)
[13:16:36] *** bindu_ is now known as bindu
[13:16:37] *** Quits: alch (~alch@151.82.126.6) (Read error: Connection reset by peer)
[13:18:28] *** Joins: m4ho (~m4ho@p5098be52.dip0.t-ipconnect.de)
[13:18:43] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.157) (Ping timeout: 256 seconds)
[13:20:52] *** Joins: alch (~alch@151.82.120.47)
[13:22:03] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:22:19] *** Joins: bindu (~bindu@user/bindu)
[13:23:36] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:30:06] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:31:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[13:32:01] *** Joins: _kimchi (~kimchi@87.247.123.112)
[13:32:23] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:32:49] *** Joins: alicef (~none@gentoo/developer/alicef)
[13:35:43] *** Quits: zlg (~zlg@user/zlg) (Ping timeout: 256 seconds)
[13:39:45] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:41:02] *** Quits: joilerv_ (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Quit: Textual IRC Client: www.textualapp.com)
[13:42:12] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:45:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:47:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:47:03] *** Lord_of_Life_ is now known as Lord_of_Life
[13:48:46] *** Joins: zlg (~zlg@user/zlg)
[13:49:17] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[13:49:19] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[13:49:56] *** Joins: wingsorc__ (~wingsorc@user/wingsorc)
[13:51:48] *** Quits: xcm_ (~xcm@static.90.45.69.159.clients.your-server.de) (Quit: WeeChat 3.2)
[13:51:57] *** Joins: xcm (~xcm@user/xcm)
[13:52:41] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Ping timeout: 252 seconds)
[13:54:39] <smallville7123> is `foo(int main)` only valid in a macro function ?
[13:55:49] <dave0> it's fine
[13:55:57] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[13:56:01] <dave0> you are allowed to shadow variables
[13:56:02] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[13:57:09] <dave0> ,cc void foo(int main); int main(void) { foo(23); return 0; } void foo(int main) { printf("%d ", main * 3); }
[13:57:11] <candide> dave0: 69
[13:57:27] *** Quits: andjjj23 (~irc@107.170.228.47) (Ping timeout: 250 seconds)
[13:57:47] *** Joins: andjjj23 (~irc@107.170.228.47)
[13:58:16] <smallville7123> is the statement `foo(int main)` only syntaxally valid in a macro function ?    eg you can do   '#define foo(a) a\n     foo(hello world);`     but you cannot do   `void foo(void x) {};\n   foo(hello world);`        ?
[13:59:31] <dave0> i don't think you can do that macro
[13:59:49] <dave0> ,cc #define foo(a) a \n foo(hello world);
[13:59:50] <candide> dave0: error: unknown type name 'hello'  note: in definition of macro 'foo'
[14:00:16] *** Quits: lleo (~leo@31-161-154-106.mobile.kpn.net) (Ping timeout: 268 seconds)
[14:00:28] <dave0> oh wow you can.. didn't know that
[14:00:31] *** Quits: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net) (Quit: Client closed)
[14:01:03] <smallville7123> yup
[14:02:59] *** Quits: leah2 (~leah@vuxu.org) (Quit: trotz alledem!)
[14:03:09] *** Joins: leah2 (~leah@vuxu.org)
[14:03:33] <smallville7123> why do functions have to be so complex?
[14:04:02] <smallville7123> yer magically simpe
[14:04:06] <smallville7123> yet*
[14:04:20] <smallville7123> why do functions have to be so complex yet magically simple?
[14:04:30] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Quit: leaving)
[14:04:40] <dave0> ,cc #define foo(a) #a \n puts(foo(hello world));
[14:04:43] <candide> dave0: hello world
[14:04:47] <dave0> that's weird i don't like it
[14:04:55] <smallville7123> haha
[14:05:02] <river> it gets worse, dave0 
[14:05:08] <river> look into ##
[14:06:09] <smallville7123> ,cc #define s(a) #a \n #define foo(a, b) s(a##b) \n puts(foo(hello world, goodbye world));
[14:06:11] <candide> smallville7123: hello worldgoodbye world
[14:06:20] <smallville7123> :)
[14:06:41] <smallville7123> ,cc #define foo(a, b) #a##b \n puts(foo(hello world, goodbye world));
[14:06:42] <candide> smallville7123: error: pasting ""hello world"" and "goodbye" does not give a valid preprocessing token  note: in definition of macro 'foo'
[14:06:47] <smallville7123> oof
[14:07:27] <smallville7123> ,cc #define foo(a, b) #(a##b) \n puts(foo(hello world, goodbye world));
[14:07:28] <candide> smallville7123:  error: '#' is not followed by a macro parameter
[14:07:39] <smallville7123> rip
[14:09:25] *** Joins: FrostKiwi (~user@user/frostkiwi)
[14:09:30] <smallville7123> anyway is the statement `foo(int main)` only syntaxally valid in a macro function ?    eg you can do   '#define foo(a) a\n     foo(hello world);`     but you cannot do   `void foo(void x) {};\n   foo(hello world);`        ?
[14:12:10] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:12:48] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:8d6c:5230:cbd2:1879)
[14:13:30] <smallville7123> would #c or #c++ be the best place to talk about the macro preprocessor
[14:13:51] <rcf> Probably here. 
[14:13:55] <omegatron> here
[14:14:00] <smallville7123> ok
[14:14:56] *** Joins: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt)
[14:14:58] *** Joins: constxd (~brad@142.134.38.68)
[14:15:21] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:8d6c:5230:cbd2:1879) (Ping timeout: 245 seconds)
[14:15:29] *** Quits: _kimchi (~kimchi@87.247.123.112) (Remote host closed the connection)
[14:17:01] <smallville7123> https://gist.github.com/mgood7123/4f428e9e7d9d16e9a539046520bebdcb as this is currently how i identify my functions however it only deals with regular functions, eg foo(a, b, c, b, , , f,d,e)   and doesnt deal with additional complexities such as statements, ops, parens, strings, ect nor preprocessor specific such as foo(     eferg te b tr b b,     { i am a block of whatever }   )
[14:17:02] <candide> Title of smallville7123's link: GLSL_PREPROCESSOR.cpp · GitHub
[14:17:29] <FrostKiwi> Hey there :] For practise I'd like to make poor man's video compressor. I have a sequence of similar images, 8bits per channel and I would like to safe and compress the difference between two images, so delta encoding. If I subtract one image from the other, the result can have a range values from -255 to +255. But that doesn't fit into an 8bpp difference image anymore. I can't just take the absolute value either, because I lose the
[14:17:29] <FrostKiwi> distinction for whether the pixel is supposed to brighter or darker. How is this usually done? How can I create the difference image without stepping up the bitdepth?
[14:18:24] <smallville7123> FrostKiwi: look at existing algoritms
[14:19:35] <smallville7123> also look at how a compression algorithm actually works
[14:20:28] <smallville7123> it (normally, depending on what data it is intended for) does not convert to a larger type just to compress something
[14:20:44] <constxd> FrostKiwi: u want a + (b - a) == b
[14:20:52] <clarity> FrostKiwi: You don't need sign
[14:21:00] <clarity> Just let it wrap
[14:21:18] <clarity> Or if you're doing lossy compression, you can internally increase bit depth but then quantize the output
[14:23:35] <FrostKiwi> smallville7123: Will definetly do so, just wanted to see if I have a thinking error first. constxd: This sounds good will get a piece of paper let it sink in. Thx for the input! clarity: This is how I imagined it based on feel and intuition. Just now that I actually write the code I feel like I got a -40 IQ debuff. Thx for confirming my intutition of not needing a sign.
[14:23:54] <smallville7123> also assuming 8bits per channel is exactly 1 byte, and 4 channels, ARGB, that is 32 bits for a complete pixel, do you want to save this part "If I subtract one image from the other, the result can have a range values from -255 to +255"
[14:24:45] *** Joins: cassepipe (~cassepipe@13.149.22.93.rev.sfr.net)
[14:24:53] <smallville7123> also "If I subtract one image from the other" dont do this
[14:24:57] <FrostKiwi> smallville7123: Currently just 1 channel. 8bpp. And yeah, I want i-frames and b-frames like typical video compression and I only want to save the difference for 99 frames and 1 i frame every 100
[14:25:22] <FrostKiwi> smallville7123: I meant "subtract one channel from another" didnt word it properly...
[14:26:03] <FrostKiwi> smallville7123: Ohh, again not worded properly. "save the difference of the same channel from the previous frame"
[14:26:11] <smallville7123> assuming we are purely talking about compression and not transforming into a specific format, then...
[14:26:50] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[14:26:53] <smallville7123> first take frame A, look for all matching patterns (in this case all pixel's of the same color, could even split by channel)
[14:27:32] <smallville7123> and then store this info in some format that is meaninful to be able to decompress
[14:27:42] *** Joins: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net)
[14:27:48] *** jamesmartinez is now known as BarbeDeCou
[14:28:09] *** Joins: ko (~i.am@user/marlboro)
[14:28:28] <smallville7123> for example, pixel 1: 00 00 00 00,   pixel 2: 00 00 00 00,       possible compressed output:   2 00 00 00 00
[14:28:48] <smallville7123> 2 indicates 00 00 00 00 is to be duplicated 2 types sequentially
[14:29:14] *** Quits: cassepipe (~cassepipe@13.149.22.93.rev.sfr.net) (Quit: Leaving)
[14:29:56] <smallville7123> you could also store position:     2 1 2 00 00 00 00       position count 2, positions 1, 2,     value to set positions to 00 00 00 00
[14:30:32] <smallville7123> exact format depends on many factors
[14:31:02] <FrostKiwi> smallville7123: Thx for the awesome breakdown of possibilites! Just getting the basics for practise. Figuring out the basic math as <constxd> showed. End product is supposed to be "FrostKiwi's Lossless Frankenstein Videocompressor - FEATURES: No sound, Awefull compression ratios and awefull speed, but it's only 50 lines of C!"
[14:31:17] <smallville7123> do this for each pixel until the entire image is compressed, then repeat for next image and then merge output with previous output
[14:31:52] *** Joins: earnestly (~earnest@user/earnestly)
[14:31:52] <smallville7123> eg image 0: 100 00 00 00 00   image 1: 100 00 00 00 00     merged: 200 00 00 00 00
[14:32:02] <smallville7123> assuming 50 by 50 pixels w and h
[14:32:13] <smallville7123> eg 50 pixels w and 50 pixels h
[14:32:28] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:32:51] <smallville7123> 200 cus the pixels can be written sequentially without error as there are no changes inbetween from start to end
[14:33:08] <smallville7123> eg the entire 0 to 200 is completely a single pixel
[14:33:13] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[14:33:14] *** Joins: csrf (~csrf@user/csrf)
[14:33:56] <smallville7123> if there are mixed pixels (very likely) then you will want positions and length as these will give offset and how long each offset is
[14:35:09] <FrostKiwi> smallville7123: Sounds really daunting O.O  Gotta figure out the diffrence part first. Thx for the exellent breakdown.
[14:35:10] <smallville7123> eg set first 10 pixels to black, set next 40 pixels at position 20 to black, set first 10 pixels at position 10 to red   ( 10 black, 10 red, 40 black)
[14:36:01] *** Quits: FrostKiwi (~user@user/frostkiwi) (Quit: ERC (IRC client for Emacs 27.2))
[14:36:54] <smallville7123> maybe something like 60 0 10 20 40 BLACK_PIXEL, 10 10 10 RED_PIXEL       with BLACK_PIXEL and RED_PIXEL being appropriate pixel format if ARGB or RGBA
[14:37:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[14:37:46] <smallville7123> wait no
[14:37:56] <smallville7123> maybe something like 2 0 10 20 40 BLACK_PIXEL, 1 10 10 RED_PIXEL       with BLACK_PIXEL and RED_PIXEL being appropriate pixel format if ARGB or RGBA
[14:37:58] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:38:27] <smallville7123> which translates to          total 2, position 0, length 10, position 20, length 40, value BLACK_PIXEL,     total 1, position 10, length 10, value RED_PIXEL
[14:38:40] *** Joins: NEYi (~NEYi@109.251.216.38)
[14:39:28] *** Joins: cassepipe58 (~cassepipe@13.149.22.93.rev.sfr.net)
[14:39:31] <smallville7123> ideally you would NOT write the output as each image is processed
[14:39:40] *** Quits: cassepipe58 (~cassepipe@13.149.22.93.rev.sfr.net) (Client Quit)
[14:40:12] <smallville7123> you would instead store the output as a structure and just add up all info until all images have been processed, and then write the structure to disk
[14:40:17] *** Joins: asdfasdfsd (~kolibri_u@bl17-179-51.dsl.telepac.pt)
[14:40:30] *** Quits: asdfasdfsd (~kolibri_u@bl17-179-51.dsl.telepac.pt) (Client Quit)
[14:44:50] <smallville7123> maybe something like        out.pixels[BLACK] += Info(0, 10);   out.pixel[RED] += Info(10, 10); out.pixel[BLACK] += Info(20, 40);
[14:44:57] *** Joins: sbrothy (~sbrothy@192038130164.mbb.telenor.dk)
[14:45:06] *** Joins: kurahaupo (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au)
[14:45:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1de0:ae4d:2639:9c8e)
[14:45:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1de0:ae4d:2639:9c8e) (Changing host)
[14:45:25] *** Joins: skapata (~Skapata@user/skapata)
[14:45:44] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[14:45:56] *** Quits: mcf (~mforney@netbsd/developer/mcf) (Excess Flood)
[14:46:05] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[14:48:06] *** Joins: cassepipe (~cassepipe@13.149.22.93.rev.sfr.net)
[14:49:30] *** Quits: cassepipe (~cassepipe@13.149.22.93.rev.sfr.net) (Quit: Leaving)
[14:49:54] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:50:21] *** Quits: mcf (~mforney@netbsd/developer/mcf) (Excess Flood)
[14:50:31] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[14:52:03] *** Joins: cassepipe (~cassepipe@13.149.22.93.rev.sfr.net)
[14:52:57] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[14:53:51] <smallville7123> are there 2 types of function statements? C function statement and macro function statement?      or is there only a single combined function statement that detects everything that is syntaxilly valid ?
[14:54:57] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[14:55:05] <omegatron> are you asking just for curiosity?
[14:56:00] <omegatron> macro means the preprocessor is involved, which in turn does only textual processing, nothing else
[14:56:16] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[14:56:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[14:57:00] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.157)
[14:57:38] <smallville7123> im asking in terms of preprocessor parsing
[14:58:46] *** Joins: _kimchi (~kimchi@87.247.123.112)
[14:59:02] *** Quits: cassepipe (~cassepipe@13.149.22.93.rev.sfr.net) (Quit: Leaving)
[14:59:23] *** Joins: pulsar12 (~pulsar12@95.172.181.187)
[15:00:12] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[15:00:26] <omegatron> and what would be your definition of the two different function statements you mentioned?
[15:01:23] <omegatron> (i'm asking, because you seem to misunderstand a small detail)
[15:02:16] <smallville7123> like,         function : or<macro_function, c_function> // order of detection is not important, as long as one of the function types match
[15:03:05] <smallville7123> as apposed to merging macro_function and c_function into a single rule
[15:03:17] *** Joins: cassepipe (~cassepipe@13.149.22.93.rev.sfr.net)
[15:03:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[15:04:02] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Quit: leaving)
[15:04:31] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:04:42] <clarity> The preprocessor has its own grammar
[15:05:00] <smallville7123> eg a function could be parsed as a macro function but not actually be one when checked during parsing of the statement itself in the action rule
[15:06:20] <smallville7123> eg foo(a b c d);     // '#define foo' has not been encountered before but must still parse this as macro function however will error upon action checking and parsing the function during expansion and processing since foo is not a defined macro
[15:07:03] <clarity> Usually preprocessing and parsing the language proper are completely separate steps
[15:07:09] <clarity> One doesn't know or care about the other
[15:07:21] <clarity> And they can be implemented as separate programs
[15:07:32] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[15:07:42] <smallville7123> true
[15:08:17] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[15:09:39] <smallville7123> tho in my case i am kinda mixing the preprocessor and some of the language proper together as it seems nessicary in order to parse and correctly expand macro's and statements
[15:10:07] <clarity> Why would it seem necessary?
[15:10:44] <smallville7123> eg function macro's happen to look extremely similar to C functions and can be invoked AS c functions
[15:10:57] <clarity> Irrelevant
[15:11:03] <clarity> Macros are expanded when you preprocess
[15:11:07] <clarity> After that, macros do not exist
[15:11:14] <smallville7123> yea
[15:11:39] <clarity> So when you're done with preprocessing, you simply do not care about macros
[15:11:51] <clarity> And by contrast, when you're preprocessing, you simply don't care about all the rest of the grammar
[15:12:17] <smallville7123> ok
[15:12:57] <smallville7123> so, how do i correctly parse a function macro?
[15:13:20] <river> you're writing a compiler?
[15:13:38] <smallville7123> im writing a preprocessor
[15:13:42] <river> a "function macro" isn't a thing? there are functions and macros, separate
[15:13:45] *** Quits: dsrt^ (~dsrt@98.188.240.142) (Ping timeout: 256 seconds)
[15:13:48] <river> maybe it is what it's called idk
[15:14:04] <river> I suppose you would need to find a cpp specification
[15:14:17] <river> it should describe exactly how to parse it
[15:14:21] <smallville7123> function-like macro *
[15:15:04] <clarity> The syntax is documented in the standard
[15:16:24] *** Joins: phineas (~farawayas@103.160.128.7)
[15:16:33] <smallville7123> yea
[15:16:57] <smallville7123> isnt exactly adaptable tho
[15:17:12] <clarity> What's the issue?
[15:17:39] <smallville7123> eg it only describes how to read it, not what should happen when
[15:18:37] <clarity> It describes what should happen
[15:18:37] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Ping timeout: 240 seconds)
[15:20:10] <smallville7123> yea, tho it would be nice if they included the syntax with the documentation of what it should do and what each one does
[15:20:17] *** Parts: cassepipe (~cassepipe@13.149.22.93.rev.sfr.net) (Leaving)
[15:20:30] *** Joins: cassepipe (~cassepipe@13.149.22.93.rev.sfr.net)
[15:20:32] <smallville7123> instead of grouping the syntax together at end and then everything else above
[15:20:58] <clarity> Meh, having full syntax at the end for reference is convenient
[15:21:10] <smallville7123> :)
[15:21:11] <clarity> It is also duplicated in the relevant sections where introduced together with semantics
[15:21:58] <smallville7123> im currently basing my parser off of https://gcc.gnu.org/onlinedocs/cpp/Macro-Arguments.html and similar pages
[15:21:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[15:22:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[15:22:46] <smallville7123> not exactly descriptive enough if your using as an implemetation reference
[15:22:57] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:23:00] <clarity> Yea, I would highly recommend the spec, not some random compiler documentation
[15:23:23] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[15:23:36] <smallville7123> where would i find that?
[15:23:43] *** Joins: daw132 (~daw132@21-53-255-130.kamensktel.ru)
[15:23:47] <daw132> dad
[15:23:52] <omegatron> =D
[15:23:53] <clarity> http://iso-9899.info/wiki/The_Standard
[15:23:54] *** Quits: daw132 (~daw132@21-53-255-130.kamensktel.ru) (Read error: Connection reset by peer)
[15:24:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:24:38] <smallville7123> in this?     Programming languages — C - ISO ⁄ IEC 9899/202x (E) International Standard — November 6, 2018.pdf
[15:25:05] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 256 seconds)
[15:25:33] <smallville7123> or this?    Programming languages — C - ISO ⁄ IEC 9899/TC3 Committee Draft — Septermber 7, 2007.pdf
[15:25:48] <smallville7123> or this?     The C Programming Language - 2nd Edition - Ritchie Kernighan.pdf
[15:26:04] *** Joins: AsenMx (~AsenMx@user/asenmx)
[15:26:08] <smallville7123> clarity: 
[15:26:36] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8)
[15:26:36] *** Quits: m4ho (~m4ho@p5098be52.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[15:26:44] <clarity> I usually read n1256.html but you can pick whichever version of the standard you prefer
[15:26:55] *** Joins: dawwda132 (~dawwda132@21-53-255-130.kamensktel.ru)
[15:26:58] <dawwda132> qq
[15:27:00] *** Quits: dawwda132 (~dawwda132@21-53-255-130.kamensktel.ru) (Client Quit)
[15:31:55] *** Joins: m4ho (~m4ho@p5098be52.dip0.t-ipconnect.de)
[15:32:17] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[15:32:48] *** Parts: alien_lappy (~alien@user/alien) ()
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:21] <smallville7123> most of the extra stuff seems to be in the constraints section
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:37] *** Quits: Dotz0cat (~Dotz0cat@h222.215.213.151.dynamic.ip.windstream.net) (Ping timeout: 240 seconds)
[15:36:57] *** Joins: Dotz0cat (~Dotz0cat@h158.227.19.98.static.ip.windstream.net)
[15:37:46] <smallville7123> "An identifier currently defined as an object-like macro shall not be redefined by another #define preprocessing directive unless the second definition is an object-like macro definition and the two replacement lists are identical"
[15:38:02] <smallville7123> is this actually followed by most compilers?
[15:38:39] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:39:06] <smallville7123> as most often allow redefining whatever you want (hence usually need to be careful of defining stuff that may already be defined) (certain libs abuse define)
[15:40:12] <smallville7123> as most just spit a warning about the macro being redefined
[15:40:24] <omegatron> .. that's why I would never recommend to use macros, except for constant numeric values ... just write plain functions and reap the benefits of type checks
[15:40:58] <smallville7123> :)
[15:41:20] <clarity> The "what should happen" is in the semantics section
[15:41:54] *** Joins: pulse (~pulse@user/pulse)
[15:41:54] *** Quits: asm (~alexander@burner.asm89.io) (Changing host)
[15:41:54] *** Joins: asm (~alexander@user/asm)
[15:42:06] <clarity> Also make sure you've read translation phases and know what a preprocessing token is
[15:42:52] <clarity> It's all there, you should be able to implement preprocessor using the standard alone for reference
[15:44:37] *** Joins: frost (~frost@user/frost)
[15:44:54] *** Joins: arinov (~arinov@176.89.29.127)
[15:45:09] <smallville7123> i think i found it "The sequence of preprocessing tokens bounded by the outside-most matching parentheses forms the list of arguments for the function-like macro. The individual arguments within the list are separated by comma preprocessing tokens, but comma preprocessing tokens between matching inner parentheses do not separate arguments. If there are sequences of preprocessing tokens within the list of argument
[15:45:09] <smallville7123> s that would otherwise act as preprocessing directives,175) the behavior is undefined."
[15:46:06] <smallville7123> i assume this refers to the processing of foo(a b c, g d) and such and not the processing of #define foo(a, b, c, d) and such
[15:46:41] <smallville7123> not exactly easy to tell what refers to what
[15:46:55] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[15:47:44] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:48:44] *** Joins: zat (~zat@191.23.60.220)
[15:52:56] *** Joins: somkls^ (~somkls@wsip-98-188-240-142.mc.at.cox.net)
[15:53:04] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:53:54] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[15:56:54] *** Joins: brad_mssw (~bhouse@172.110.173.1)
[15:58:27] *** Joins: EtherNet (~ethernet@user/ethernet)
[15:59:06] *** f0xb4t is now known as mac-
[16:00:47] *** Joins: seninha (~seninha@user/seninha)
[16:01:52] <clarity> smallville7123: The keyword here that tells you're right is 'argument'
[16:02:23] *** Quits: cassepipe (~cassepipe@13.149.22.93.rev.sfr.net) (Quit: Leaving)
[16:03:29] <clarity> smallville7123: In macro definitions you have parameters.  In an invocation, you have arguments.
[16:03:48] <clarity> (Likewise for function declarations or definitions and function call expressions)
[16:03:57] <clarity> These terms are defined in section 3
[16:04:16] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:05:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:12:35] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[16:12:36] *** Joins: constxd (~brad@142.68.160.15)
[16:14:29] *** Joins: u0_a391 (~u0_a391@2600:380:bc52:ebbd:3fe3:3b25:a9ee:d19f)
[16:15:55] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:18:26] *** Quits: Kit (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com) (Ping timeout: 252 seconds)
[16:21:23] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[16:25:10] *** Quits: puke (~puke@user/puke) (Remote host closed the connection)
[16:25:28] *** Joins: puke (~puke@user/puke)
[16:26:11] *** Joins: nicko (~iClass@222.211.31.34)
[16:28:30] *** Joins: Teckla (~Teckla@user/teckla)
[16:29:22] *** u0_a391 is now known as Kit
[16:29:56] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[16:30:07] *** Quits: m4ho (~m4ho@p5098be52.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[16:31:57] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[16:35:02] *** Joins: m4ho (~m4ho@p5098be52.dip0.t-ipconnect.de)
[16:38:17] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[16:40:35] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:41:17] *** Quits: _kimchi (~kimchi@87.247.123.112) (Ping timeout: 240 seconds)
[16:41:35] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[16:41:39] *** Quits: pulsar12 (~pulsar12@95.172.181.187) (Quit: Client closed)
[16:44:37] <smallville7123> clarity: ok :)
[16:46:37] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.186)
[16:46:37] *** Quits: sbrothy (~sbrothy@192038130164.mbb.telenor.dk) (Quit: leaving)
[16:47:41] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[16:47:50] <smallville7123> arguments can extend across new lines, right?
[16:48:01] <smallville7123> eg foo(a\nb)
[16:49:09] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.186) (Read error: Connection reset by peer)
[16:49:24] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[16:49:39] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:49:45] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.253)
[16:50:10] <ioxzev1z> smallville7123, C doesn't care about whitespace for the most part, but assuming above you mean a, b not ab as in a\nb
[16:50:37] *** Quits: zat (~zat@191.23.60.220) (Ping timeout: 240 seconds)
[16:50:44] <ioxzev1z> foo(a, \nb) is fine, but given argument ab, you cannot write foo(a\nb)
[16:50:49] <smallville7123> like "foo(a\nb);"
[16:50:54] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:51:10] <ioxzev1z> Is that two arguments (a, b), or a single argument called ab that you then split in the middle?
[16:51:31] <smallville7123> it is "a b" except space is replaced by new line
[16:51:50] <ioxzev1z> Right, that is fine but I don't get how you're passing to foo arguments a and b without a comma
[16:52:13] <smallville7123> it would be a single argument in a function-like macro
[16:52:42] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.253) (Read error: Connection reset by peer)
[16:52:55] *** Quits: iomari891 (~iomari891@197.210.70.65) (Ping timeout: 256 seconds)
[16:53:22] <ioxzev1z> ,cc #define foo(a b) printf("%d %d", a, b); foo(1 2);
[16:53:23] <candide> ioxzev1z: [warning: preprocessor directive not terminated by \n, the remainder of the line will be part of this directive] error: expected ',' or ')', found "b"
[16:53:35] <ioxzev1z> ,cc #define foo(a, b) printf("%d %d", a, b); foo(1 2);
[16:53:38] <candide> ioxzev1z: [warning: preprocessor directive not terminated by \n, the remainder of the line will be part of this directive] Success (no output).
[16:53:41] *** Joins: iomari891 (~iomari891@197.210.53.158)
[16:53:47] <smallville7123> no
[16:54:07] <smallville7123> ,cc #define foo(a) printf("%s", #a); foo(1 2);
[16:54:08] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.253)
[16:54:10] <candide> smallville7123: Same output.
[16:54:15] <smallville7123> ,cc #define foo(a) printf("%s", #a); foo(1 2);\n
[16:54:18] <candide> smallville7123: Success (no output).
[16:54:28] <smallville7123> ,cc #define foo(a)\n printf("%s", #a); foo(1 2);
[16:54:30] <candide> smallville7123: error: stray '#' in program
[16:54:43] <smallville7123> -_-
[16:54:44] *** Joins: sbrothy (~sbrothy@192038130164.mbb.telenor.dk)
[16:54:54] <smallville7123> ,cc #define foo(a) printf("%s", #a); \n   foo(1 2);
[16:54:58] <candide> smallville7123: 1 2
[16:55:07] *** Quits: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt) (Quit: Leaving)
[16:55:08] <ioxzev1z> Right
[16:55:23] <smallville7123> ,cc #define foo(a) printf("%s", #a); \n   foo(1\n2);
[16:55:24] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:55:26] <candide> smallville7123: Breakpoint 3, main (argc=1, argv=0x7fffffffe3d8) at  41       return 0;
[16:55:28] *** Joins: BadWolf (~azerty@user/badwolf)
[16:55:32] <smallville7123> oof
[16:55:36] <smallville7123> lmao
[16:55:46] <smallville7123> i broke it XD
[16:57:03] * smallville7123 Achievement Unlocked: break candide
[16:57:48] <smallville7123> ,cc #define foo(a) printf("%s", #a); \n   foo(i still work);
[16:57:53] <candide> smallville7123: i still work
[16:58:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[16:58:40] <smallville7123> ,cc #define foo(a) printf("%s", #a); \n   foo( \n 1 \n 2 \n );
[16:58:42] <candide> smallville7123: 1 2
[16:58:49] <smallville7123> ,cc #define foo(a) printf("%s", #a); \n   foo( \n 1\n2 \n );
[16:58:51] <candide> smallville7123: 1 2
[16:58:55] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:58:59] <smallville7123> ,cc #define foo(a) printf("%s", #a); \n   foo(1\n2);
[16:59:02] <candide> smallville7123: Breakpoint 3, main (argc=1, argv=0x7fffffffe3d8) at  41       return 0;
[16:59:09] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[16:59:10] <smallville7123> rip
[16:59:15] <smallville7123> ,cc #define foo(a) printf("%s", #a); \n   foo( 1\n2 );
[16:59:18] <candide> smallville7123: Same output.
[16:59:22] <ioxzev1z> I don't think candide will display \n on output to avoid line noise so you might want to try compiling yourself
[16:59:40] <smallville7123> i know
[16:59:44] <river> ,cc printf("%zero4s", "abc");
[16:59:46] <pragma-> you can use -paste to see newlines 
[16:59:46] <candide> river: [warning: use of 'z' length modifier with 'e' type character has either no effect or undefined behavior [-Wformat=]] 0.000000e+00ro4s
[17:00:58] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.253) (Read error: Connection reset by peer)
[17:01:02] *** Quits: nicko (~iClass@222.211.31.34) (Quit: Konversation terminated!)
[17:01:23] *** Joins: nicko (~iClass@222.211.31.34)
[17:01:53] *** Quits: inomoz (~inomoz@85.26.165.145) (Quit: WeeChat 3.3)
[17:03:00] <dave0> ooh we get to choose
[17:04:11] <smallville7123> how could i rewrite my grammar to correctly collect my arguments separated by comma? https://gist.github.com/mgood7123/6f7b51f5a4b2318fe53ace68eab57494
[17:04:12] <candide> Title of smallville7123's link: preprocessor.cpp · GitHub
[17:04:39] <ioxzev1z> smallville7123, doesn't look like C
[17:05:17] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:75e6:90b9:a33f:f625) (Quit: Leaving)
[17:05:17] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[17:05:38] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:06:16] *** Joins: zat (~zat@191.23.60.220)
[17:06:57] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 240 seconds)
[17:07:02] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[17:07:54] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[17:07:55] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[17:08:29] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[17:09:00] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:09:57] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[17:10:35] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[17:10:50] *** Quits: BadWolf (~azerty@user/badwolf) (Quit: *)
[17:11:14] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[17:13:16] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[17:13:40] *** Joins: noonien (~noonien@user/noonien)
[17:15:40] *** Quits: krzych (krzych@nroot.pl) (Remote host closed the connection)
[17:17:20] *** Joins: masterbuilder (~user@user/masterbuilder)
[17:17:33] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[17:18:25] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[17:19:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:19:33] *** Quits: alch (~alch@151.82.120.47) (Ping timeout: 256 seconds)
[17:19:53] <river> its lisp
[17:19:57] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[17:19:59] *** Joins: krzych (krzych@nroot.pl)
[17:21:13] *** Joins: alch (~alch@mi-18-24-206.service.infuturo.it)
[17:25:41] *** Quits: PaulePanter (~paul@mail.gw90.de) (Ping timeout: 250 seconds)
[17:26:39] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Ping timeout: 276 seconds)
[17:27:43] *** Quits: nicko (~iClass@222.211.31.34) (Quit: Konversation terminated!)
[17:28:45] *** Quits: alch (~alch@mi-18-24-206.service.infuturo.it) (Read error: Connection reset by peer)
[17:28:51] <pragma-> ,cc #define foo(a b) printf("%d %d", a, b)\n foo(1 2);
[17:28:52] <candide> pragma-:  error: expected ',' or ')', found "b"
[17:29:07] <pragma-> /* fixed ioxzev1z's malformed #define */
[17:29:29] <pragma-> (technically still malformed, but slightly less so!)
[17:30:04] <pragma-> At least the error message now correctly reflects the malformedness
[17:30:33] <pragma-> without the \n at the end of the macro, it swallowed up the foo(1 2) as part of the macro and then never invokes it.
[17:31:34] *** Joins: pulse (~pulse@user/pulse)
[17:32:42] *** Joins: alch (~alch@mi-18-28-220.service.infuturo.it)
[17:35:38] *** Quits: sbrothy (~sbrothy@192038130164.mbb.telenor.dk) (Read error: Connection reset by peer)
[17:35:51] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[17:36:17] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[17:37:22] *** Joins: PaulePanter (~paul@mail.gw90.de)
[17:43:48] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[17:44:09] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[17:44:17] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 240 seconds)
[17:44:55] *** Joins: AsenMx (~AsenMx@user/asenmx)
[17:45:58] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:47:32] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.157) (Remote host closed the connection)
[17:47:33] *** Quits: somkls^ (~somkls@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[17:47:38] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:47:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:48:29] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[17:48:54] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:50:08] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.60)
[17:51:07] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.60) (Read error: Connection reset by peer)
[17:52:07] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:52:25] *** Quits: brad_mssw (~bhouse@172.110.173.1) (Ping timeout: 256 seconds)
[17:53:19] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[17:54:16] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[17:57:47] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[17:58:21] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[17:59:11] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:03:12] *** Joins: monkey_ (~user@181.114.17.106)
[18:03:52] *** Joins: _kimchi (~kimchi@87.247.123.112)
[18:06:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:06:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:06:00] *** Joins: wroathe (~wroathe@user/wroathe)
[18:06:07] *** Joins: badsektor (~badsektor@user/badsektor)
[18:06:19] *** Joins: arinov (~arinov@176.89.29.127)
[18:06:35] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:07:17] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[18:08:45] *** Joins: moog (~moog@107.242.124.157)
[18:09:12] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.157)
[18:10:25] *** Joins: inlight (~inlight@157.35.40.164)
[18:10:25] *** Quits: inlight (~inlight@157.35.40.164) (Changing host)
[18:10:25] *** Joins: inlight (~inlight@user/inlight)
[18:11:30] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[18:11:44] *** Joins: kish` (~sid742412@user/aqua)
[18:19:17] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 240 seconds)
[18:24:24] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:24:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:25:08] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:25:48] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[18:27:05] *** Joins: cousteau (~cousteau@user/cousteau)
[18:27:24] <cousteau> Sup
[18:27:30] <cousteau> Hi rindolf :)
[18:28:37] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[18:29:09] *** Joins: inlight (~inlight@user/inlight)
[18:29:15] *** Joins: odoood (~odoood@2601:c8:c003:a550::5)
[18:31:00] <markand> could be nice if someone© could write a proposal to add strtok_r from POSIX into C
[18:31:11] <markand> since we've incorporated lots of _r into C23 as well
[18:31:21] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[18:33:57] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Ping timeout: 240 seconds)
[18:34:00] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:34:31] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Quit: This is the hidden truth, the world between the lines.)
[18:35:57] <rindolf> cousteau: hi, i added some runtime asserts
[18:36:07] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[18:37:00] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[18:37:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:39:27] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[18:40:15] <rindolf> cousteau: what's new?
[18:41:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:41:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:41:14] *** Joins: wroathe (~wroathe@user/wroathe)
[18:44:18] <ozzz> Hi! Is there any C lib for reading pcap files? 
[18:44:42] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.173)
[18:44:44] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 252 seconds)
[18:45:07] <river> libpcap
[18:45:21] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.173) (Read error: Connection reset by peer)
[18:45:38] *** Joins: et09 (~et09@user/et09)
[18:45:49] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8d6c:5230:cbd2:1879)
[18:45:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:45:57] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[18:47:04] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[18:47:25] <ozzz> river, hmm. It has functions for reading/reassembling tcp sessions?
[18:48:41] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:8d6c:5230:cbd2:1879) (Ping timeout: 245 seconds)
[18:50:10] *** Joins: strajder (~strajder@user/strajder)
[18:53:15] *** Joins: interweb (~interweb@user/interweb)
[18:53:56] *** Quits: interweb (~interweb@user/interweb) (Client Quit)
[18:54:07] *** Joins: emanuele6 (~emanuele6@net-93-71-98-153.cust.vodafonedsl.it)
[18:54:19] *** Quits: emanuele6 (~emanuele6@net-93-71-98-153.cust.vodafonedsl.it) (Changing host)
[18:54:19] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[18:57:51] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.173)
[18:58:14] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.173) (Read error: Connection reset by peer)
[19:00:27] *** DarkPlutonium is now known as DarkUranium
[19:03:05] *** Joins: NEYi (~NEYi@109.251.216.38)
[19:03:15] *** Quits: constxd (~brad@142.68.160.15) (Ping timeout: 256 seconds)
[19:03:37] *** Joins: retr0 (~retr0@143.110.243.123)
[19:04:04] <retr0> what makes a bus a bus (either serial or parralel)
[19:04:49] <MrMobius> more than two things communicating using it
[19:05:10] <MrMobius> not necessarily at the same time
[19:05:28] <retr0> I thought it was more to do with the data not being lost or arriving in the wrong order
[19:05:32] <retr0> like UDP
[19:05:40] <retr0> which is not a bus therefore
[19:05:50] <MrMobius> i guess like any term you can change it to mean what you want
[19:05:56] <retr0> its a protocol over ethernet/radio waves
[19:05:59] <MrMobius> so the real question is what people usually mean when they say it
[19:06:09] <retr0> ok
[19:07:41] <retr0> so I put "A bus is simply a way for more than one device to access a data stream or another piece of hardware, and in such a way that it does not cause conflicts with timing or with the data itself."
[19:07:55] <retr0> idk if theres a clock or not
[19:08:47] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::5)
[19:09:30] <omegatron> ... are you refering to the actual hardware, the abstract concept or what? besides i'm pretty sure the wikipedia has a page about that topic in your native language
[19:10:10] <ioxzev1z> retr0, https://en.wikipedia.org/wiki/Bus_(computing) : "... is a communication system that transfers data between components inside a computer, or between computers."
[19:10:53] <ioxzev1z> "Early computer buses were parallel electrical wires with multiple hardware connections, but the term is now used for any physical arrangement that provides the same logical function as a parallel electrical bus." where "electrical bus" then links to a specific page describing it.
[19:11:08] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 252 seconds)
[19:12:15] <retr0> ohh theres electrical bus too ugh
[19:12:29] <ioxzev1z> Does candide fetch from wikipedia?
[19:12:32] <ioxzev1z> ,wiki bus
[19:12:33] <candide> http://www.iso-9899.info/wiki/Main_Page
[19:12:33] <retr0> im referring to hardware
[19:12:43] <retr0> and this is not homework question
[19:12:58] <retr0> I actually wanna know lol
[19:12:59] <pragma-> ioxzev1z: not very well.
[19:13:04] <retr0> of my own free will
[19:13:14] <pragma-> ,wp eletrical bus
[19:13:15] <candide> pragma-: Electrical wiring - Wikipedia: <https://en.wikipedia.org/wiki/Electrical_wiring>
[19:13:56] *** Joins: arinov (~arinov@176.89.29.127)
[19:14:04] <pragma-> ,wikipedia electrical wiring
[19:14:07] <candide>  'Electrical wiring' is an electrical installation of cabling and associated devices such as switches, distribution boards, sockets, and light fittings in a structure. Wiring is subject to safety standards for design and installation. Allowable wire and cable types and sizes are specified according to the circuit operating voltage and electric current capability, with further restrictions on the environme... <truncated; https://0x0.st/-CiY.txt>
[19:14:09] *** Quits: _kimchi (~kimchi@87.247.123.112) (Ping timeout: 268 seconds)
[19:14:11] * pragma- shrugs.
[19:14:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[19:16:10] *** retr0 is now known as id
[19:16:33] *** id is now known as retr0
[19:17:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:23:00] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[19:24:05] *** Joins: lavaball (felix@31.204.155.215)
[19:25:01] *** Parts: lavaball (felix@31.204.155.215) ()
[19:25:29] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:26:48] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[19:27:03] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[19:28:40] *** Joins: mrig (~mrig@user/mrig)
[19:29:46] *** Quits: random-nick (~random-ni@87.116.167.125) (Quit: quit)
[19:30:17] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-8d6c-5230-cbd2-1879.inf6.spectrum.com)
[19:31:55] *** Joins: meator (~meator@user/meator)
[19:32:03] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[19:32:51] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8d6c:5230:cbd2:1879) (Ping timeout: 245 seconds)
[19:33:33] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[19:34:25] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[19:34:40] *** Joins: random-nick (~random-ni@87.116.181.93)
[19:35:37] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[19:36:19] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-d496-c4da-44b3-2835.inf6.spectrum.com)
[19:38:31] <cousteau> rindolf: btw I couldn't tell you yesterday because you had just left when I noticed, but I found a potentially problematic issue with the macro you have at https://github.com/shlomif/fortune-mod/blob/master/fortune-mod/fortune/fortune.c#L430-L432
[19:39:10] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-8d6c-5230-cbd2-1879.inf6.spectrum.com) (Ping timeout: 260 seconds)
[19:40:02] <cousteau> basically, defining a function-like macro as {...} may give you trouble if you use it in an if-else without braces, because the { } have already an "imlicit semicolon" at the end
[19:40:04] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[19:40:53] <cousteau> and `if (condition) { }  ;  else whatever;` isn't valid in C because the `else` statement follows a `;` statement and it should only follow an `if` statement
[19:41:07] *** Joins: nyah (~nyah@94.6.71.219)
[19:41:42] <cousteau> ,cc #define nop() {}  \n  if (1) nop(); else nop();
[19:41:43] <candide> cousteau: error: 'else' without a previous 'if'
[19:42:01] *** Quits: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net) (Quit: Client closed)
[19:42:08] <cousteau> ,cc #define nop() {}  \n  if (1) nop()  else nop()  // looks ugly though
[19:42:10] <candide> cousteau: Success (no output).
[19:42:33] <cousteau> ,cc #define nop()     \n  if (1) nop(); else nop();  // just remove the {} entirely
[19:42:35] <candide> cousteau: [warning: suggest braces around empty body in an 'else' statement [-Wempty-body]]  Success (no output).
[19:42:59] <retr0> you cant do ++ or -- on arrays right, only pointers
[19:43:29] <cousteau> ,cc #define nop() do {} while (0) \n  if (1) nop(); else nop();  // good ol' do...while (0), but it looks rather ugly here
[19:43:32] <candide> cousteau: Success (no output).
[19:44:11] <cousteau> retr0: you can't assign to an array, and ++ -- are assignment operators
[19:44:29] <retr0> what
[19:44:52] <cousteau> (they read the value, increment it, and assign it; finally yelding the value before incrementing it)
[19:44:53] <retr0> ok ++ and -- modifiy the value
[19:45:01] <cousteau> yes, correct
[19:45:10] <cousteau> and the value of an array is its address
[19:45:23] <cousteau> and you can't modify the address of a variable
[19:45:32] <retr0> you can assign to arrays
[19:45:35] <retr0> if its only 1 byte
[19:45:42] <cousteau> you can assign to ELEMENTS of an array
[19:45:59] <cousteau> ,cc char s[1];  s = 'a';
[19:46:00] <candide> cousteau: error: assignment to expression with array type
[19:46:07] <retr0> becaise thats how computers do it, byte for byte
[19:46:20] <cousteau> no, forget bytes
[19:46:25] <cousteau> arrays have elements
[19:46:27] <retr0> chars
[19:46:32] <cousteau> same thing
[19:46:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[19:46:45] <retr0> char and byte are different in some ways
[19:46:50] <cousteau> (...or pretty much the same, anyway)
[19:46:55] <retr0> ok
[19:47:16] <cousteau> only difference is that byte is a unit of size and char is a data type, but they're pretty much the same and seem to be used interchangeably in the standard
[19:47:21] <nomagno> Chars are bytes, as far as you're concerned when coding in C
[19:47:27] <retr0> ok so anyhow, ++ and -- you cant do on arrays but you can on pointers
[19:47:29] <nomagno> You can't really address a smaller unit of memory
[19:47:31] <cousteau> one char has a size of one byte
[19:47:36] <pragma-> aside from signedness, bytes and chars are identical, que no?
[19:47:37] <earnestly> (CHAR_BIT)
[19:47:52] <retr0> you cant use chars for RGBA
[19:47:55] <retr0> i think
[19:48:02] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[19:48:12] <retr0> ?
[19:48:18] <cousteau> pragma-: well... I wouldn't say bytes have a concept of "signedness" at all; they're just, like, a chunk of memory
[19:48:41] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 245 seconds)
[19:48:42] <hohohoroutines> retr0: SIGBUS is a signal your code gets when there is a bus
[19:48:44] <pragma-> cousteau: right, it's chars that have signs
[19:48:56] <pragma-> unsigned char and byte are 100% identical.
[19:49:04] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:671f:f146:9b7e:7b61)
[19:49:09] <twkm> bitch i'm a sigbus?
[19:49:27] <cousteau> I don't think the standard states this anywhere, but I see chars as a data type (an interpretation/value of a memory chunk) and bytes as an amount of physical memory (the memory chunk itself)
[19:49:28] <nomagno> cousteau: one char can hold at least 8 bits
[19:49:35] <cousteau> this is probably more something I made up myself
[19:49:46] <nomagno> Hell you can have 32bit chars
[19:49:48] <cousteau> nomagno: according to the standard, so can one byte
[19:49:52] <pragma-> cousteau: the standard does define "object representation" in terms of unsigned char.
[19:50:11] <nomagno> Which version of the standard are we talking about here?
[19:50:17] <nomagno> I don't know of any "byte" type
[19:50:21] <cousteau> if CHAR_BIT is 16, then a "byte" in that platform would be 16 bits, although "nobody calls that a byte unless it's 8 bits"
[19:50:31] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Quit: ZNC - http://znc.in)
[19:50:33] <pragma-> everybody calls it a byte
[19:50:39] <nomagno> A byte is, specifically, a char
[19:50:40] <pragma-> we call 8 bits an octet
[19:50:43] *** Joins: jiffe (~jiffe@mail.nsab.us)
[19:50:52] <nomagno> A char is, specifically, a char
[19:51:57] <pragma-> a byte is not necessary 8 bits. bytes have been known to be smaller and bigger. octets, on the other hand, are 8 bits.
[19:52:12] *** Quits: larry87 (~quassel@c-73-6-106-85.hsd1.tx.comcast.net) (Read error: No route to host)
[19:52:22] <cousteau> well, the French call bytes "octets"
[19:52:38] <nomagno> You have 7-bit bytes, and 18-bit bytes on some cursed systems
[19:52:56] <oldlaptop> so do Internet standards documents, which bear deep scars of a time when things other than DSPs had non-octet bytes
[19:53:56] <cousteau> TI documentation often uses "byte" to refer to 8-bit sequences in their 16-bit DSPs, where CHAR_BIT is 16, probably because they assume it's "popular knowledge that a 'byte' is 8 bits".  It should be noted that this is not compliant with the C standard, where a "byte" is, by definition, the size of a char.
[19:54:03] *** Joins: larry87 (~quassel@c-73-6-106-85.hsd1.tx.comcast.net)
[19:54:58] <cousteau> (well, specifically, whenever they mention "byte" they're talking about the lower 8 bits of a 16-bit char, I think.  Anyway, this was just an example of a "popular knowledge" showing bytes being a synonym for octets.  The C standard doesn't have this definition.)
[19:55:29] <ioxzev1z> Byte just signifies iirc the smallest unit of storage, allowing them to be any size based on the arch. e.g. 16-bit bytes, and so on. If you definitely mean 8 bits then "octet" is the correct word
[19:55:30] <cousteau> nomagno: 7-bit bytes aren't C compliant though, although they have existed historically (see ASCII)
[19:55:53] <cousteau> I mean, there have been uses of the term "byte" to refer to 7-bit sequences
[19:56:03] <nomagno> You know, if the C processor is Turing complete (it is), can you make an algorithm to dynamically handle any size of char/int/whatever that could ever possibly be?
[19:56:21] <oldlaptop> is it?
[19:56:37] <ioxzev1z> cousteau, 7-bit bytes with regard to ASCII are valid if you just consider the left most bit to be irrelevant, leaving it unused. Nothing non-compliant in C about 7-bit bytes
[19:56:52] <nomagno> Yes there is like, a Brainfuck interpreter written fully in the C preprocessor
[19:56:53] <nomagno> Somewhere
[19:57:12] <oldlaptop> ioxzev1z: The C standard does not permit a "byte" to have fewer than eight bits.
[19:57:24] <nomagno> cousteau: well does C actually define that it can only be implented in binary CPUs?
[19:57:27] <cousteau> ioxzev1z: no, all bits in a byte (with a minimum size of 8) must be relevant as per the standard
[19:57:28] <ioxzev1z> CHAR_BIT must be at least 8, but you don't have to actually use every bit
[19:57:47] <ioxzev1z> If I give you the char 10010101 and tell you to ignore the three left most bits
[19:57:48] <cousteau> nomagno: I think it does, or at least in systems that can behave as binary CPUs
[19:57:48] <oldlaptop> If you only use the lower four bits of a long long, is long long really four bits?
[19:57:55] <cousteau> the concept of binary representation exists
[19:58:01] <retr0> can we stop saying that a byte is 6 bits, this has been irrevelant for about 800 years now
[19:58:08] <retr0> it was true for about 10 seconds
[19:58:14] <retr0> then IBM said it was dumb
[19:58:19] <nomagno> Aw, ternary C would be cool
[19:58:20] <cousteau> you can implement a digital computer emulator on a ternary computer, and make it run C programs
[19:58:23] <ioxzev1z> oldlaptop, no, it means that while long long is the normal size, you're using only the lower four bits
[19:58:51] <oldlaptop> Then why does it mean an eight-bit byte is "seven bits" if you only happen to put ASCII characters in it?
[19:59:00] <retr0> saying it isnt always 8 bits is just going off on a tangent
[19:59:09] <cousteau> ioxzev1z: all bits in a char must be meaningful.  This is not the case for int, for example, which may have padding bits.  But char precisely can NOT have padding bits.  Them's the rules.
[19:59:32] <cousteau> I can point you to the rules if you prefer that to me stating that "them's the rules", but I'd have to look it up first
[19:59:57] <retr0> byte is a cpu terminology like word and dword char is a language terminology
[20:00:19] <cousteau> word and dword have long lost their meaning, I think
[20:00:32] <oldlaptop> retr0: According to the relevant standard, a "byte" must have no fewer than eight bits. It can (and sometimes does today, on certain embedded systems) have more than that.
[20:00:41] <ioxzev1z> oldlaptop, my point was that while CHAR_BIT is at least 8, that doesn't mean you cannot use 7-bit bytes in C. A little like how you can use 24-bit integers without having uint24_t in C
[20:00:49] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 250 seconds)
[20:00:54] <cousteau> word used to mean "2 bytes", nowadays it's often either "4 bytes" or "whichever the native word length is" (e.g. 64 bits in 64-bit architectures)
[20:01:04] <earnestly> This channel accidently engages with tactics described in a 1950s CIA document on how to disrupt and damage companies and organisations
[20:01:08] *** Joins: shivesh (~shivesh@user/shivesh)
[20:01:31] <retr0> lol
[20:01:44] <cousteau> ioxzev1z: while you can definitely use 8-bit bytes to store 7-bit values, that doesn't mean that you can have a C compliant system with 7-bit bytes
[20:02:24] <nomagno> You can definitely implement C on 7-bit systems with no larger word size. It won't be compliant, but it'll be better than no C implementation
[20:02:25] <cousteau> what I understood you meant was that "a system where a byte is 8 bits, but the leftmost bit is always set to 0, is C compliant, because it technically has 8 bits per byte"
[20:02:38] <rindolf> cousteau: thanks. 1. my policy is https://fc-solve.shlomifish.org/docs/distro/HACKING.html#one-line-clauses 2. i checked all uses of debugprint() now. they seem safe
[20:03:08] <cousteau> rindolf: well, I was mentioning that because I had seen several uses of braceless if in your code
[20:03:19] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 256 seconds)
[20:03:20] <cousteau> it is otherwise an acceptable policy, I'd say
[20:04:21] <cousteau> my personal policy is "you can have the if body without braces but in that case don't put it on a separate line; if you need to do so then use braces even if it's for a single statement"
[20:04:23] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:04:34] <cousteau> mostly to prevent possible errors
[20:04:58] <cousteau> (e.g. the infamous "goto fail" error by Apple could have been avoided using my policy... or yours, for that matter)
[20:05:17] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[20:05:20] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[20:06:27] <hohohoroutines> that could have been avoided by -Wmisleading-indentation
[20:06:28] <cousteau> rindolf: anyway, when I need to "define a function as a do-nothing" I often use the "leave the define blank", then the statement is only the ; that goes after the macro.  Just a generic advice.  Shouldn't be too problematic if you're careful enough
[20:06:47] <oldlaptop> nomagno: You could implement C in a compliant manner as well, just as you can implement C on systems that do not natively support >=16 bit values for conforming short/int, or >=32-bit for conforming long, or >=64-bit for conforming long long.
[20:07:07] <cousteau> (but it also makes your code slightly less inviting for hacking) :)
[20:08:29] <cousteau> rindolf: also as a side note, I think you don't need to fflush(stderr) because stderr flushes automatically (it's unbuffered), so the entire debugging function could be replaced by a macro that calls fprintf directly.  But that's a matter of taste.  The static function is perfectly acceptable too.
[20:08:44] <cousteau> (and a good and elegant use of static functions)
[20:12:03] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[20:12:17] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[20:12:21] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.60)
[20:12:29] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[20:13:28] *** Joins: Charadon (~Charadon@155.138.164.183)
[20:13:31] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[20:13:32] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.60) (Read error: Connection reset by peer)
[20:13:32] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[20:14:37] <cousteau> rindolf: ...overall, I agree with most of your coding guidelines.  They seem pretty reasonable.  (Only I don't like the "put the { on a separate line"; I think it's a bit wasteful and somehow feel like it potentially allows one to accidentally sneak a ; in the line above)
[20:15:31] <GyrosGeier> it has the big advantage that { and } are in the same column
[20:15:52] <cousteau> for (i=0; i<10; i++);    {    printf("i = %d\n", i);    }
[20:16:13] <oldlaptop> You can also comment out the condition or loop clause while fooling about with things.
[20:16:27] <cousteau> ...you probably would need to be a special kind of idiot to accidentally put a ; there, but dunno, I feel like I could 100% be that idiot :/
[20:16:31] <oldlaptop> You can sneak a semicolon in the other way too
[20:16:41] <cousteau> GyrosGeier: well I see how that can be nice
[20:16:59] <ioxzev1z> Why do people use "dest" for "destination" rather than dst, so it aligns with src?
[20:17:04] <cousteau> oldlaptop: the other way will make it less obvious and maybe also less prone to accidentally happening
[20:17:16] <cousteau> if you're used to ending all lines with a semicolon
[20:17:27] <supakeen> ioxzev1z: Because I write sorc as well, it makes me think of sorcerers
[20:17:39] <oldlaptop> (You could enforce a ban on such semicolons with static analysis, but you might not wish to exclude things like body-less for loops)
[20:17:40] <supakeen> In other words, there's a lot of programmers with ideas.
[20:17:54] <cousteau> ...anyway the "opening brace on a separate line" is possibly one of the few styles in the "list of things I'd never do" which I respect and tolerate
[20:18:28] <cousteau> oldlaptop: I like to explicitly use empty braces for body-less loops
[20:18:38] <cousteau> makes it clearer that they are doing nothing
[20:19:24] *** Joins: bbju (~bbju@103.144.149.220)
[20:19:25] <GyrosGeier> that, and they also avoid compiler warnings
[20:20:00] <cousteau> another thing I ended up doing is to also put the opening { of a function in the same line, even if that breaks decades of C tradition started when in pre-ANSI C there was a space between the function declaration and the body for declaring the parameters.
[20:20:28] <cousteau> it all started when I would systematically copy-paste all the function prototypes from my .c file to my .h file
[20:20:45] <cousteau> then I'd paste   int frobnicate(int value)
[20:20:52] <cousteau> and 100% of the time I'd forget the ;
[20:21:22] <cousteau> so I noticed that if I put the { on the same line, then the thing I paste is   int frobnicate(int value) {
[20:21:35] <cousteau> and that { makes it much easier to spot that I'm forgetting something
[20:21:50] *** Joins: tbcr (~brclark@user/tbcr)
[20:22:21] <cousteau> ...so, superstition.  I do it for superstition, because I think that putting the { on the same line "brings good luck".  Most of my coding style is superstition-based, lately.
[20:23:24] <cousteau> ioxzev1z: re: dst, I think I use both dst or dest depending on my mood, and always think of that
[20:24:15] <cousteau> but it's like antonyms are meant to always differ in one letter.  src/dest, input/output (or in/out), read/write...
[20:24:26] <cousteau> it annoys me a lot more than it should
[20:27:41] <ioxzev1z> Or begin/end for a list when you should be using head/tail
[20:27:48] <ioxzev1z> Muh alignment.
[20:28:17] <cousteau> ha, nice one
[20:28:20] <cousteau> or car/cdr
[20:28:38] <cousteau> I have no idea what car/cdr means but I've seen lisp and friends use that a lot
[20:28:54] <System_Error> one line clauses are known source of errors when someone trying to extend logic - whoops, only part of thing worked?
[20:29:37] <cousteau> System_Error: that's why I make one-line clauses strictly one line.  I think that for very simple things it is acceptable to make them one line
[20:29:50] <System_Error> So it recommended by plenty of safety guidelines and somesuch - to avoid future bugs.
[20:29:50] <cousteau> like   if (x<0) return -1;
[20:30:11] <cousteau> BUT NEVER   if (x<0) \n    return -1;
[20:30:17] <cousteau> because that's when tragedies happen
[20:30:18] <fizzie> Famously car/cdr is from the instruction set of a specific computer (https://en.wikipedia.org/wiki/CAR_and_CDR#Etymology), maintained forever for historical reasons.
[20:30:57] <cousteau> because if you write the `return -1;` on a separate line then you get confident and believe there's a { } somewhere, and then BAM, goto error
[20:31:27] <fizzie> The pairs I know of (for the same operation) are car/cdr, head/tail and first/rest, and I do find it annoying if someone mixes up across those.
[20:32:06] <System_Error> But when we want not just "return -1" but do_something(); and eventually change to 
[20:32:06] <System_Error> do_something();
[20:32:06] <System_Error> do_something_else();
[20:32:38] <cousteau> System_Error: basically, this is how you mess up code horribly:  https://4.bp.blogspot.com/-OOGNA-WWQ10/UwmwlMMYytI/AAAAAAAAKbY/9_v5Bq6g6t8/s1600/Bug_SSL.png
[20:32:41] <System_Error> ....it getting not very elegant, no?
[20:32:53] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[20:33:18] <System_Error> i.e. my point is multiline with brackets extends as expexced; change well traceable in git, etc, etc... 
[20:33:29] <cousteau> System_Error: then you need an extra line anyway, so you immediately realize that it can no longer be `if (x==0) do_something();` on a single line
[20:33:44] <System_Error> I see someone just added "do_something_else" in no time, and all changes follow same pattern
[20:35:11] <System_Error> Actually I think idea like that is one of "Embedded C coding standard" clauses. They do care of antibug and safety. Maybe also MISRA. 
[20:35:22] <cousteau> my point is that `if (x==0)  \n  do_something();` is horrible because of the same reason you mentioned, but `if (x==0) do_something();` is harmless because you'll clearly need to break that and then will add the braces
[20:36:10] <System_Error> And another idea is never write if(something == 0) because typo can be if(something = 0). OTOH if(0 == something) would surely fail.
[20:36:13] <cousteau> re: git diffs, I've already learned that "minimizing the length of git diffs" isn't really a valid argument
[20:36:28] <System_Error> Er I mean typo version: if (0 = something).
[20:36:52] <cousteau> there are many cases when I try to introduce changes in a git-friendly way and that ends up leading to a poor coding style
[20:37:21] <cousteau> like trying to keep the indentation of code while entering/removing an indentation level
[20:37:35] <cousteau> "I know, I'll just use 2 spaces for this `if` instead of 4!"
[20:38:24] <cousteau> I rapidly learned that if your git needs to have 8 red lines and 8 green lines that are identical to the red lines but with extra spaces, so be it.
[20:38:35] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[20:38:58] *** Joins: Akiva (~Akiva@user/Akiva)
[20:39:04] <cousteau> System_Error: anyway, overall it's not a bad idea to use braces always.  It makes things clearer.
[20:39:57] <System_Error> cousteau: it makes things unified so in the end both original intent is clear and extending it doesn't causes "unusual" things that could confuse humans.
[20:40:14] <cousteau> do do while (a==1); while (b==2) foo(); while (c==3);  // if I ever see code like this outside of an IOCCC contest I'm killing someone
[20:41:27] <cousteau> ...wait, I'm not sure if that's valid as is, with an arbitrary while having a body
[20:41:52] *** Joins: _kimchi (~kimchi@87.247.123.112)
[20:42:22] <cousteau> System_Error: my counter-argument is that `if (x<0) x=0;` reads as a single statement, like "crop x to 0 if it's less than 0"
[20:42:32] *** Quits: bbju (~bbju@103.144.149.220) (Quit: Client closed)
[20:42:40] <cousteau> Perl has `$x = 0 if x<0;` for that idiom
[20:43:52] <cousteau> whereas if you want "if the function had an error, print an error message and exit", those are two things, so you obviously need to group them
[20:44:41] *** Joins: lleo (~leo@31-161-154-106.mobile.kpn.net)
[20:44:52] <cousteau> ...basically, I see "if (x==0) return;" as saying "return if x is 0", and "if (x==0) { return; }" as "if x is 0, then return".  It sounds differently in my head.
[20:45:32] <cousteau> but that's only for very concise and simple stuff.  If the line is going to be very long, then definitely use multiple lines, and in that case of course please use braces.
[20:46:25] <cousteau> I'm definitely not going to complain if someone does NOT write stuff on a single line when I would have, and instead uses braces.
[20:48:39] *** Joins: Satin (uid193953@user/Seten)
[20:49:01] <cousteau> ...specially when mistakes like the "goto fail" one are a possibility
[20:49:26] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[20:49:32] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[20:49:55] <cousteau> System_Error: re: `if (something = 0)`, most compilers warn you nowadays if you do that, even if you MEANT to do that
[20:50:27] <cousteau> and the `if (0 == something)` idiom never seemed to catch on
[20:50:48] <System_Error> As for abbreviations and so on I also liked idea to make custom types ending with _t, like something_t - so its dead clear we refer datatype.
[20:51:04] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:51:10] <ioxzev1z> System_Error, _t is reserved
[20:51:32] <cousteau> ,cc int foo(void) { return 42; }   int res;  if (res = foo()) { printf("foo() returned %d\n", res); }
[20:51:35] <candide> cousteau: [warning: suggest parentheses around assignment used as truth value [-Wparentheses]] foo() returned 42
[20:52:07] <cousteau> ioxzev1z: I think it's not enforcedly reserved by the standard though, only by posix
[20:52:16] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[20:52:21] <System_Error> ioxzev1z: so something_t as typedef is not good? What standard clause mandates it?
[20:52:28] <cousteau> the standard just says it may be used in the future, so if you decide to use it in your program, that's your problem
[20:52:29] *** Joins: constxd (~brad@192.75.101.164)
[20:57:04] <cousteau> ,c11 7.31.10
[20:57:04] <candide> http://www.iso-9899.info/n1570.html#7.31.10 [Integer types <stdint.h>] 1 Typedef names beginning with i​nt or uint and ending with _t may be added to the types defined in the <stdint.h> header. Macro names beginning with I​NT or UINT and ending with _MAX, _MIN, or _C may be added to the macros defined in the <stdint.h> header.
[20:57:43] <cousteau> basically, the standard says that integer types ending in _t MAY be added to the standard, IN A FUTURE, but are otherwise perfectly fine
[20:58:56] <cousteau> https://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html -- this shows a complete list of all name patterns reserved by C and POSIX
[21:00:34] <cousteau> specifically, leading two-underscores or underscore-uppercase are reserved by the C standard; trailing _t is reserved by POSIX but not by the C standard
[21:02:06] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[21:02:22] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[21:02:59] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[21:03:03] <System_Error> Hmm, but it doesn't says anything about something_t is being not OK in C. Posix and gnu libc is not a C standard. IMO posix got ton of really dumb skelets in closett.
[21:03:08] <cousteau> ,c11 7.1.3
[21:03:09] <candide> http://www.iso-9899.info/n1570.html#7.1.3 [Reserved identifiers] 1 Each header declares or defines all identifiers listed in its associated subclause, and optionally declares or defines identifiers listed in its associated future library directions subclause and identifiers which are always reserved either for any use or for use as file scope identifiers. -- All identifiers that begin with an underscore a... <truncated; https://0x0.st/-C-Y.txt>
[21:03:21] <cousteau> so __ is reserved by the standard, but _t is not
[21:03:46] <cousteau> but yeah, POSIX is also a standard, and a very prominent one.  Maybe don't break that standard just because you can.
[21:03:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[21:04:13] <System_Error> I know of _ and __ reservations, and like never do that, except maybe when I'm implementer of intrinsic that known to have that name  :)
[21:04:24] <cousteau> or do.  I sure do.  But I do stupid stuff all the time.
[21:04:59] <cousteau> rindolf: *ahem* https://github.com/shlomif/fortune-mod/blob/master/fortune-mod/fortune/fortune.c#L290-L302
[21:05:39] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.157) (Ping timeout: 256 seconds)
[21:05:58] <pragma-> car/cdr is just head/tail on lists. given a list (1, 2, 3, 4) then head(list) is 1 and tail(list) is (2, 3, 4).
[21:06:57] <cousteau> yeah well it depends on what your definition of "head" and "tail" is I guess.  Maybe in this case they were referring to head=1 and tail=4, with an intermediate body
[21:07:02] <pragma-> alternative names could be first/rest
[21:07:27] <cousteau> it depends on what kind of animal we're talking about -- a dog or a snake
[21:07:57] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::5) (Ping timeout: 240 seconds)
[21:08:09] <rindolf> cousteau: i changed fortune.c now
[21:08:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[21:08:58] <rindolf> cousteau: github.com has a 'y' key
[21:09:23] <cousteau> oh... must have been cached in my browser
[21:10:23] <cousteau> I had seen those braceless ifs before and that's why I thought you might have trouble with that macro you defined, if you ever accidentally put it as the sole statement of an if that has an else after it
[21:12:11] *** Joins: mahmutov (~mahmutov@37.155.62.65)
[21:13:21] <rindolf> cousteau: i fixed them. note that i inherited fortune-mod from previous maintainers
[21:13:35] <cousteau> but once you've applied those guidelines it shouldn't be a problem.  I still think it's more elegant to not use a #define with braces, but I'll leave that to your discretion
[21:13:37] *** Quits: tbcr (~brclark@user/tbcr) (Ping timeout: 240 seconds)
[21:14:35] <cousteau> (...as if I had any right to make you do otherwise...)
[21:15:08] *** Joins: tbcr (~brclark@user/tbcr)
[21:16:51] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[21:17:14] *** Joins: Atque (~Atque@user/atque)
[21:18:34] *** Quits: tbcr (~brclark@user/tbcr) (Client Quit)
[21:19:54] *** Joins: odoood__ (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[21:19:57] *** Quits: odoood__ (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Remote host closed the connection)
[21:20:50] *** Joins: reset (~reset@user/reset)
[21:22:16] *** Joins: Betal (~Betal@user/betal)
[21:23:18] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:d496:c4da:44b3:2835)
[21:24:50] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:25:23] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[21:26:26] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-d496-c4da-44b3-2835.inf6.spectrum.com) (Ping timeout: 252 seconds)
[21:27:32] *** Quits: _kimchi (~kimchi@87.247.123.112) (Ping timeout: 252 seconds)
[21:29:50] *** Quits: alch (~alch@mi-18-28-220.service.infuturo.it) (Read error: Connection reset by peer)
[21:31:53] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[21:32:08] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[21:32:17] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[21:33:02] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:33:36] *** Quits: lleo (~leo@31-161-154-106.mobile.kpn.net) (Quit: beyond time space in laws)
[21:34:04] *** Joins: alch (~alch@mi-18-17-239.service.infuturo.it)
[21:35:35] *** Joins: gproto23 (~gproto23@user/gproto23)
[21:35:37] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[21:38:05] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[21:38:57] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[21:40:09] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[21:41:09] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:43:23] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[21:49:37] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:50:51] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[21:51:47] *** Quits: retr0 (~retr0@143.110.243.123) (Quit: Client closed)
[21:52:34] *** Quits: fe23 (~fe23@2409:8a34:468:83d0:b891:f17d:c81d:13b3) (Quit: fe23)
[21:55:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:55:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:55:46] *** Joins: wroathe (~wroathe@user/wroathe)
[22:00:45] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[22:03:31] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[22:03:53] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Client Quit)
[22:04:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[22:05:13] *** Quits: mrus (~mrus@149.28.224.172) (Quit: Surfing the great wave off Kanagawa)
[22:05:30] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[22:05:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[22:05:48] *** Joins: Akuli (~Akuli@213.216.209.28)
[22:06:20] *** Joins: System_Error (~SystemErr@user/systemerror)
[22:08:52] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[22:12:15] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8c85:3d90:d3c9:3f6b)
[22:13:13] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[22:14:36] <rindolf> cousteau: night, and thanks
[22:14:48] <cousteau> yw :)  good night!
[22:15:21] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:d496:c4da:44b3:2835) (Ping timeout: 245 seconds)
[22:15:53] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:16:50] *** Joins: Jong (~Jong@2620:10d:c090:400::5:3f74)
[22:17:14] *** Joins: rgrinberg (~textual@187.223.209.106)
[22:17:37] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Reconnecting)
[22:18:22] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[22:20:00] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[22:20:13] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 240 seconds)
[22:21:48] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (zirconium.libera.chat (Nickname regained by services)))
[22:21:48] *** vinleod is now known as vdamewood
[22:22:19] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:22:19] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:22:19] *** Joins: wroathe (~wroathe@user/wroathe)
[22:26:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:27:14] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:27:56] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[22:28:38] *** Joins: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net)
[22:29:21] <hxx> I need some clarification. I know * means it's related to pointers, but I'm confused what something such as (foo*)widget is supposed to mean.
[22:30:15] <LeoNerd> Compare to   (int)widget
[22:30:17] <LeoNerd> It's a typecast
[22:31:15] *** hohohoroutines is now known as floatcomplex
[22:31:30] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[22:31:48] <ioxzev1z> hxx, that is casting widget to type foo *
[22:32:08] <ioxzev1z> You probably want (foo *) &widget; though
[22:32:13] <ioxzev1z> But depends on the code
[22:32:17] <hxx> That makes sense.
[22:32:23] <cousteau> well, unless widget is a pointer per se, or maybe an array
[22:32:38] <pragma-> ,english (int *)widget
[22:32:39] <candide> pragma-: `widget` converted to pointer to i​nt.
[22:32:48] <cousteau> but yeah, (foo *) is a cast
[22:32:53] <cousteau> to pointer to foo
[22:33:04] <cousteau> pragma-: that's a fine bot
[22:33:11] <pragma-> just needs a bit more polish
[22:33:28] <ioxzev1z> Shame it's not written in C, could make some srs speed savings over perl
[22:33:36] *** Joins: de-facto_ (~de-facto@user/de-facto)
[22:33:42] <ioxzev1z> IRC is a fast moving business
[22:33:44] <pragma-> fortunately it's as fast as it needs to be
[22:33:59] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[22:34:11] <pragma-> working with a lot of text in C is not for the faint of heart.
[22:34:26] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[22:34:41] <cousteau> yeah, perl seems like the right tool for messing with text
[22:34:46] <pragma-> especially if you're altering and combining the text
[22:35:07] <cousteau> not a very pretty language in some regards, but pretty damn fine for text processing
[22:35:43] <ioxzev1z> I wouldn't mind recommending a bot as a C learning project but something like perl or python seems like the right tool for the job
[22:35:52] <ioxzev1z> Though Rust would be a good other option
[22:36:06] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[22:36:43] *** Joins: vuks (~Vuks69@87-206-7-209.dynamic.chello.pl)
[22:37:14] *** Joins: X-Scale` (~ARM@31.22.167.4)
[22:37:45] *** de-facto_ is now known as de-facto
[22:38:20] *** Joins: magla (~gelignite@55d46610.access.ecotel.net)
[22:39:01] *** Quits: X-Scale (~ARM@206.46.158.5.rev.vodafone.pt) (Ping timeout: 240 seconds)
[22:39:01] *** X-Scale` is now known as X-Scale
[22:39:12] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[22:39:31] *** Joins: _kimchi (~kimchi@87.247.123.112)
[22:39:31] *** Quits: _kimchi (~kimchi@87.247.123.112) (Client Quit)
[22:44:29] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[22:48:28] *** Joins: meator (~meator@user/meator)
[22:48:43] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[22:49:18] *** Quits: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[22:49:21] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[22:51:26] *** Joins: Itaru (~Itaru@ro2.flokinet.is)
[22:52:05] *** Joins: me_ (~me@151.144.8.109.rev.sfr.net)
[22:52:26] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[22:52:34] *** Quits: me_ (~me@151.144.8.109.rev.sfr.net) (Client Quit)
[22:53:21] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.26)
[22:54:31] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.26) (Read error: Connection reset by peer)
[22:55:53] <System_Error> ioxzev1z: funny thing... tox bot in c somehow much easier than irc bot in like anything. Courtest of fun api I guess. Tho it isnt without its limits.
[22:56:14] <System_Error> and its funny when making distributed chat bot easier than irc bot XD
[22:56:57] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[22:57:15] *** Joins: meator (~meator@user/meator)
[22:58:08] *** Joins: NovaKe1n (~novake1n@user/NovaKe1n)
[22:58:48] *** Quits: NovaKe1n (~novake1n@user/NovaKe1n) (Client Quit)
[22:59:18] <apotheon> System_Error: Are there any useful Tox protocol clients other than the reference implementation?
[22:59:25] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.26)
[23:00:50] <apotheon> Tox seems, as far as I have been able to determine, to be inferior in all the important particulars to Briar.
[23:01:19] <apotheon> Ah, I found a list of clients for Tox in Wikipedia.
[23:01:51] <System_Error> apotheon: I don't know your definition of "useful" but there're some (quite easily hackable) bots, various kinds of clients (some console apparently based on former) and many other stuff, e.g. haskel or rust impl of "core".
[23:02:50] <System_Error> No idea what briar is but tox had really small Cish bots and clients I can hack to fit my preferences.
[23:03:16] <System_Error> And it sorta distributed/no centralized asshats to ever yank my account or something.
[23:05:08] <apotheon> It looks like more than half the clients are abandonware, but there are a few surviving.
[23:05:23] <System_Error> guess I liked idea with callbacks on events, I wonder if there's comparable IRC lib for C :)
[23:05:56] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[23:06:46] <apotheon> System_Error: Briar is fully decentralized and encrypted to, but unike Tox it uses onion routing as standard functionality over the internet and it operates using a mesh networking protocol that works via internet, wifi network, and Bluetooth, as needed.  It might also support NFC; I don't recall for sure.
[23:07:15] <apotheon> s/to,/too,/
[23:07:54] *** Joins: me_ (~me@151.144.8.109.rev.sfr.net)
[23:09:07] <apotheon> I only know of three clients for Briar, though -- Android, iOS, and "desktop", the last of which is kinda experimental right now, I think.
[23:09:37] <System_Error> apotheon: this thing apparently some Java based smth, only existing for android? So is nowhere like "better in all regards" for me.
[23:09:46] *** Quits: me_ (~me@151.144.8.109.rev.sfr.net) (Client Quit)
[23:09:50] <apotheon> Briar is one of the most privacy-oriented ad-hoc communications protocols I've seen.
[23:10:12] <pragma-> Speaking of experimental desktop support being the lowest priority, I read an article a couple of weeks ago that says the vast majority of children and teens and young adults on the internet today use a phone rather than a computer.
[23:10:17] <apotheon> Maybe Briar isn't on iPhone; I'm not sure.
[23:10:31] <System_Error> Oh, privacy oriented something on android, in java app? I'd rather not to have that on my head.
[23:10:58] <apotheon> System_Error: If you want it on a smartphone, you're going to have to make some concessions.  If not, just get the desktop client.
[23:11:03] <pragma-> All those redditors, instagrammers, tiktokkers, IRCers, etc, you see today are more likely to be connected via a phone or tablet than a desktop computer or laptop. Crazy times.
[23:11:15] <apotheon> pragma-: yep
[23:11:19] <System_Error> apotheon: maybe you failed to read, but I've triffled with Tox on desktop, to begin with.
[23:11:49] <apotheon> I don't know what you mean by "triffled".  Is that a typo for "trifled", or are you saying something else?
[23:11:49] <System_Error> and I wouldnt run bot on phone any day, that just weirdest idea ever
[23:12:01] <apotheon> um
[23:12:10] <apotheon> You're acting like I said you have to use a smartphone to use Briar.
[23:12:22] <apotheon> "If not, just get the desktop client."
[23:12:49] <System_Error> Hm I dont see that on their site or github?
[23:12:50] <apotheon> . . . but I guess you can just argue against positions I don't hold, and attribute them to me anyway, without my involvement.  Carry on without me, then.
[23:13:31] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.26) (Read error: Connection reset by peer)
[23:13:37] <apotheon> They use GitLab, not GitHub.
[23:13:45] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:14:30] <apotheon> https://code.briarproject.org/briar/briar-desktop
[23:15:03] <apotheon> I'm not a huge fan of the Java implementation, but as I said the *protocol* seems to be a clear win.
[23:15:05] <System_Error> Well, their site's main page sent me to GH and this only had java android something.
[23:15:22] *** Joins: NEYi (~NEYi@109.251.216.38)
[23:15:38] <apotheon> If you click "browse the source code" on https://briarproject.org/download-briar/ it takes you to GitLab.
[23:16:09] <apotheon> I don't see any GitHub links at all.
[23:16:19] *** Joins: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[23:16:43] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.167)
[23:17:52] *** Joins: hxztnxt_ (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[23:17:56] *** Quits: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Client Quit)
[23:18:04] *** Quits: hxztnxt_ (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Client Quit)
[23:18:23] *** Joins: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[23:18:39] <hxztnxt> where can i find the man page for min (stdlib)
[23:18:52] <hxztnxt> it says no man page exist
[23:19:35] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 268 seconds)
[23:20:21] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[23:21:36] <tarzeau> hxztnxt: manpages.debian.org (probably in manpages-dev if on debian)
[23:21:39] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[23:22:35] *** Joins: inlight (~inlight@user/inlight)
[23:22:57] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[23:23:22] <apotheon> hxztnxt: Look for the OpenBSD manapge, I guess.
[23:24:05] <apotheon> OpenBSD typically has the best manpage for any given C library, in my experience.
[23:25:03] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[23:25:53] <pragma-> https://www.freebsd.org/cgi/man.cgi?query=min&apropos=0&sektion=0&manpath=OpenBSD+7.0&arch=default&format=html finds nothing
[23:27:02] <pragma-> sigh, I wish it had an option to search all its manpages. I've checked Plan 9, Open BSD 7.0, and a couple of others before giving up.
[23:27:53] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[23:28:02] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.167) (Read error: Connection reset by peer)
[23:29:29] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[23:30:06] <cousteau> hxztnxt: you can also read the standard
[23:30:13] <cousteau> look for "[The min function]"
[23:30:47] <pragma-> that's good advice. if the min function was standardized.
[23:31:13] <cousteau> which, as it turns out, is not standard
[23:31:28] <cousteau> see?  I just learned that by only failing to find it
[23:31:45] <pragma-> it's probably just a simple #define min(x, y) ((x) < (y) ? (x) : (y))
[23:31:52] <cousteau> I hope it's not
[23:32:10] <cousteau> otherwise min(a++, b++) will be a huge UB
[23:32:30] <cousteau> ...wait actually not UB, but still a very weird behavior
[23:32:48] <pragma-> you deserve it for using min() that way
[23:33:02] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e546:f9c1:f549:4c7e:0:281) (Quit: Leaving)
[23:33:23] <pragma-> smh, why is there so much unnecessary golfing and terseness in a lot of code?
[23:33:28] <pragma-> use more statements!
[23:33:42] <dmlloyd> may I introduce you to Java
[23:33:53] <dmlloyd> ✨
[23:34:11] <apotheon> gawd no
[23:35:00] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 268 seconds)
[23:35:26] <apotheon> I'm glad Java forgot my name.  Don't remind it.
[23:35:37] <apotheon> I don't want it coming over to borrow things from me and never return them.
[23:35:41] <pragma-> #define min(a,b) ({ __typeof__ (a) _a = (a); __typeof__ (b) _b = (b); _a < _b ? _a : _b; })
[23:35:55] <pragma-> there, no you can min(a++,b++)!
[23:35:58] <pragma-> now
[23:38:52] *** Joins: monkey_ (~user@181.114.17.106)
[23:39:49] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:40:17] <System_Error> apotheon: you know, I built minimal tox core + bot in like half of day. It ate 2 Mb ram and I appreciated their C api.
[23:40:41] <System_Error> some Java desktop clients... sorta far away from what I may need or want
[23:40:56] <river> wow didn't know you could use {} for an expression
[23:41:07] <river> that's such a proper macro
[23:42:05] <pragma-> too bad it's a nonstandard gnu extension for now
[23:42:23] <pragma-> on the other hand, if all you use are gnu-compatible compilers...
[23:42:30] <System_Error> pragma-: doesn't this thing only works in code? So there's no way to #define SOMETHING min(a,b) anymore?
[23:43:25] <constxd> bro what
[23:43:59] *** Joins: chr1 (~chr@mail.alfaorigo.dk)
[23:46:47] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:47:10] *** Quits: chr1 (~chr@mail.alfaorigo.dk) (Client Quit)
[23:47:17] <dmlloyd> ironically several CPUs implement min (or max) as a single instruction or even partial instruction...
[23:48:02] <dmlloyd> so first you go to the effort to implement a macro or inline function or whatever with correct semantics, and then the compiler has to recognize that pattern and turn it back into a single instruction again
[23:48:14] *** Joins: gothicserpent (~gothicser@204.152.215.249)
[23:52:06] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[23:52:21] <apotheon> If I had time, I'd be interested in writing a C library for Briar.
[23:52:40] <apotheon> As I said, it's a better protocol.  We just don't have the same client options.
[23:52:42] *** Joins: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5)
[23:57:09] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:59:46] *** Quits: gothicserpent (~gothicser@204.152.215.249) (Quit: Leaving)
