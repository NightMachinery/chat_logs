[00:14:01] *** Joins: magla (~gelignite@55d4f5a2.access.ecotel.net)
[00:34:39] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:43:49] *** Quits: darkstardevx (~darkstard@50.39.114.152) (Read error: Connection reset by peer)
[00:44:26] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[00:49:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[00:49:51] *** Quits: CppCon (~cppcon@104.132.34.90) (Quit: This computer has gone to sleep)
[00:52:32] *** Joins: darkstardevx (~darkstard@50.39.114.152)
[00:53:28] *** Quits: darkstardevx (~darkstard@50.39.114.152) (Remote host closed the connection)
[00:53:55] *** Joins: darkstardevx (~darkstard@50.39.114.152)
[00:54:53] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[00:55:14] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[00:55:38] *** Joins: ARoxdale (~ARoxdale@109.78.38.164)
[01:03:16] <yolo_> never heard about #linux channel, interesting
[01:03:51] <yolo_> used to have a very active eletronics channel for circuit and board questions but now I forgot
[01:07:22] *** Joins: zmt01 (~zmt00@user/zmt00)
[01:08:01] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[01:13:35] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[01:14:55] <KombuchaKip> LiaoTao: Yes, I'm experiencing problems. I'm not getting any IN_CLOSE_WRITE notifications.
[01:17:30] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[01:23:16] <LiaoTao> KombuchaKip, Could you show what the problematic code looks like? Specifically the various inotify calls
[01:23:47] <KombuchaKip> LiaoTao: Sure. Let me prepare a minimal.
[01:31:18] <Alipha> << std::string("dangle").c_str(); // xkoncek, this doesn't dangle because the std::string lives until the end of the statement
[01:31:18] <geordi> dangle
[01:37:40] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:48] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:48] *** ChanServ sets mode: +v npaperbot
[01:40:23] *** Quits: AmR (~AmREiSa@156.199.218.104) (Ping timeout: 256 seconds)
[01:41:16] *** Joins: zmt00 (~zmt00@user/zmt00)
[01:43:57] <LiaoTao> KombuchaKip, https://godbolt.org/z/Ex6n5qTYs
[01:44:03] <LiaoTao> This works on my system
[01:45:03] <LiaoTao> That is to say, "select returned" prints when I either open the file or save to it
[01:50:28] *** Quits: bluap (~bluap@cpc156931-stav19-2-0-cust147.17-3.cable.virginm.net) (Quit: bluap)
[01:56:31] *** Joins: CaCode (~CaCode@user/cacode)
[01:58:13] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[01:59:21] *** Joins: EdFletcher (~ubuntu@user/edfletcher)
[02:01:07] *** Joins: Fault (~Fault@152.70.112.168)
[02:03:45] *** Joins: emerent_ (~quassel@p200300cd5748552fba27ebfffed28a59.dip0.t-ipconnect.de)
[02:03:45] *** Quits: emerent (~quassel@p200300cd5748556aba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (calcium.libera.chat (Nickname regained by services)))
[02:03:46] *** emerent_ is now known as emerent
[02:06:05] <manuels> is there a patricia trie map container in stl?
[02:06:46] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[02:07:42] <LiaoTao> Generally speaking there are no specific tree implementations in the stdlib
[02:08:40] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[02:09:58] <yolo_> what's the point of godblot, who really check assembly code these days except for those compiler folks, like 50 of them all together on earth
[02:10:33] <johnny> probably not the assembly portion for most , but the compiler output :)
[02:10:38] <yolo_> it bothers me that asm code talks 50% of the page by default
[02:10:45] <johnny> yeah i don't know why it's the default myself
[02:10:47] <yolo_> s/talks/takes/
[02:11:02] <johnny> i understand why it's an option, but default, i don't know
[02:11:06] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[02:11:26] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[02:11:27] <yolo_> same here, which is why I prefer wandbox when I really need it
[02:12:09] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[02:13:48] <kalven> people here use the output all the time
[02:14:59] <yolo_> not a good sign to me, does it mean c++ is so tweak you need check ASM output to make sense out of it often the times?
[02:15:09] <yolo_> s/tweak/trick/
[02:15:52] <kalven> no, it doesn't mean that
[02:17:45] <yolo_> i rarely need look at asm code, like not once in the last 10 years
[02:17:57] <cbreak> I look at it quite a bit
[02:18:04] <cbreak> mostly for fun
[02:18:26] <yolo_> and I'm an embedded low-level guy that is by wage
[02:18:34] <kalven> yolo_: good thing there are different tools then
[02:19:29] <cbreak> with embedded, it doesn't matter much how efficient you are, customers won't be able to measure it anyway, as long as you're fast enough / not too power hungry
[02:19:38] <Raziel> yolo_, no, it means C++ is so easy and simple that we can easily point out where a compiler does something stupid, and we frequently do it for fun
[02:19:39] <Raziel> :^)
[02:19:57] <cbreak> but when writing code which you want to be proud of, code which you want to run fast and efficient, then understanding the tools is needed
[02:20:02] <cbreak> and looking at ASM can help with that
[02:20:40] <yolo_> i wrote asm and machine code in college, just not at job, like forever
[02:20:57] <Raziel> it's hardly ever something you "need" to do for the vast majority of usecases. but having the option and ability to do it can be useful.
[02:21:16] <yolo_> did recall me those asm ("eieio") days, yes a little bit asm actually I wrote
[02:21:47] <cbreak> I've had to look at ASM a lot for debugging
[02:22:08] <cbreak> for example, my most recent project used OneDNN, as compute backend
[02:22:30] <yolo_> the oneapi stuff, intel's mimic of CUDA that is
[02:22:31] <cbreak> and looking at the ASM of a crash told me that I need to overalign my memory even more
[02:22:36] <cbreak> no
[02:22:56] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:22:56] <cbreak> not cuda, more CuDNN
[02:23:33] <yolo_> well cuda means everything there
[02:23:54] <Raziel> sounds like you don't actually know what cuda is
[02:24:07] <yolo_> i hope oneapi can take off, cuda has 85% of the market share so far
[02:24:19] <cbreak> the closest equivalent to cuda in c++ is c++
[02:24:36] <johnny> isn't the problem here about defaults, not that the feature exists?
[02:24:37] <yolo_> as a matter of fact, my systemc work is for a risc-v chip, which, I will need some risc-v asm practice soon
[02:24:39] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[02:24:52] <yolo_> johnny: yes, it's about the default
[02:25:24] <yolo_> risc-v asm can be put into one double-sided page, which is amazing
[02:25:25] *** Joins: Fault (~Fault@152.70.112.168)
[02:26:12] <yolo_> talking about DNN, i hope SYCL will make it
[02:26:42] <yolo_> https://github.com/codeplaysoftware/SYCL-DNN
[02:27:36] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:29:15] <Raziel> if sycl was a thing when openCL started being a thing, maybe. at this point, it seems like it's a bit too late
[02:33:33] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[02:45:28] <manuels> Alipha
[02:45:32] <manuels> [](auto&&... Ts) { return std::make_shared<Object>(std::forward<decltype(Ts)>(Ts)...); };
[02:45:36] <manuels> what is this calles
[02:45:38] <manuels> d
[02:45:46] <manuels> the auto&&...  part
[02:46:15] <manuels> is this a template lambda?
[02:47:45] *** Joins: Fault (~Fault@152.70.112.168)
[02:48:24] <Alipha> manuels: yes, a templated lambda
[02:48:56] *** Quits: Brewster (~Brewster@185.145.156.241) (Remote host closed the connection)
[02:49:27] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:58e:15a4:a761:e873) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:54:00] <Alipha> yolo_: people (in here, anyway) look at the asm output to see if the compiler does the optimizations you expect it to. There's a lot of comparing different ways to write something to see if they produce the same code (eg, if the "nice, readable code" produces the same asm output as the "unportable, unreadable 'optimized' code". Another thing that's pretty common is to see if the compiler will vectorize
[02:54:02] <Alipha> loops
[02:54:02] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[02:54:08] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[02:55:24] <Alipha> People want to see if the compiler will use cpu-specific, specialized instructions, or if they have to resort to using compile intrinsic functions
[02:55:26] *** Quits: DSpider (~DSpider@82.79.237.43) (Quit: Leaving)
[02:56:46] *** Joins: zmt01 (~zmt00@user/zmt00)
[02:58:27] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[02:58:54] *** Quits: zmt01 (~zmt00@user/zmt00) (Client Quit)
[02:59:09] <LiaoTao> We use it to make sure that our zero-cost abstractions remain as such. We also verify that no copies are made where they are not expected, and that calculations are properly optimized in the hot path.
[02:59:13] *** Joins: zmt01 (~zmt00@user/zmt00)
[02:59:16] <LiaoTao> That being said 90% of the time it's just example code pasting.
[02:59:41] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[03:01:22] *** Joins: Brewster (~Brewster@185.145.156.241)
[03:01:48] *** Quits: Brewster (~Brewster@185.145.156.241) (Changing host)
[03:01:48] *** Joins: Brewster (~Brewster@user/brewster)
[03:05:27] *** Joins: darkstarx (~darkstard@185.226.144.76)
[03:07:58] *** Quits: darkstardevx (~darkstard@50.39.114.152) (Ping timeout: 260 seconds)
[03:10:29] *** Joins: darkstardev13 (~darkstard@176.113.72.221)
[03:13:02] *** Quits: darkstarx (~darkstard@185.226.144.76) (Ping timeout: 260 seconds)
[03:17:20] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:17:23] <KombuchaKip> LiaoTao: The difference is I'm trying to do it asynchronously. Here's my minimal. No events are reported. https://pastebin.com/KFEJWX82
[03:18:27] *** Joins: darkstarx (~darkstard@50.39.114.152)
[03:19:19] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[03:20:56] *** Quits: darkstardev13 (~darkstard@176.113.72.221) (Ping timeout: 245 seconds)
[03:21:11] <LiaoTao> KombuchaKip, I seem to be actually misusing the API in my example. It's strange that it still works.
[03:21:22] * KombuchaKip shrugs
[03:22:35] *** Quits: dblsaiko (~saiko@crispy.dblsaiko.net) (Quit: ZNC 1.8.2 - https://znc.in)
[03:23:04] *** Joins: dblsaiko (~saiko@crispy.dblsaiko.net)
[03:28:04] <LiaoTao> KombuchaKip, No, actually I seem to be using it correctly.
[03:28:17] <LiaoTao> You should select on the inotify descriptor and not the watch descriptor
[03:28:26] <LiaoTao> The latter is for identifying which watch triggered a particular event
[03:29:32] <KombuchaKip> LiaoTao: Let me give it a try.
[03:30:06] *** Joins: Fault (~Fault@152.70.112.168)
[03:30:07] <LiaoTao> Source: https://www.linuxjournal.com/article/8478
[03:30:29] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:31:37] *** Quits: Brewster (~Brewster@user/brewster) (Remote host closed the connection)
[03:33:29] <KombuchaKip> LiaoTao: Will read, but still doesn't work: https://pastebin.com/KFEJWX82
[03:35:01] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[03:35:38] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[03:38:31] *** Joins: Fault (~Fault@152.70.112.168)
[03:38:38] *** Joins: Brewster (~Brewster@185.145.156.241)
[03:39:08] *** Joins: wasd (~wasd@user/axis)
[03:40:02] *** Joins: darkstardev13 (~darkstard@89.47.234.174)
[03:40:04] *** Quits: Fault (~Fault@152.70.112.168) (Client Quit)
[03:41:14] <LiaoTao> KombuchaKip, You are also reading from the watch descriptor and not from the notify descriptor
[03:41:47] <LiaoTao> The watch descriptor is for you to match with the wd field in the structs read by ::read
[03:42:20] <KombuchaKip> LiaoTao: Ok thank you. It seems to work now. I will study your notes and link above more carefully.
[03:42:26] *** Quits: darkstarx (~darkstard@50.39.114.152) (Ping timeout: 260 seconds)
[03:44:17] *** Joins: Fault (~Fault@152.70.112.168)
[03:45:21] <LiaoTao> KombuchaKip, Unrelated but _please_ use camelCase or snake_case for variable names :(
[03:45:31] <LiaoTao> Most people's brains are wired to read PascalCase as typenames
[03:45:35] <KombuchaKip> LiaoTao: No thanks =)
[03:47:13] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[03:47:29] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[03:49:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[03:54:24] <computerquip> You come from PowerShell or something?
[03:54:40] <comrad> PascalCase ftw!
[03:54:59] *** Quits: Brewster (~Brewster@185.145.156.241) (Remote host closed the connection)
[03:57:20] <KombuchaKip> From English actually.
[03:57:45] <computerquip> ... what?
[03:57:54] *** Joins: Brewster (~Brewster@185.145.156.241)
[03:57:54] *** Quits: Brewster (~Brewster@185.145.156.241) (Changing host)
[03:57:54] *** Joins: Brewster (~Brewster@user/brewster)
[03:58:00] <comrad> I come from TurboPascal
[04:01:44] *** Quits: magla (~gelignite@55d4f5a2.access.ecotel.net) (Quit: Stay safe!)
[04:03:38] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[04:04:42] *** Joins: Fault (~Fault@152.70.112.168)
[04:06:25] *** Joins: gargus (~user@203.220.68.182)
[04:13:50] *** Joins: dld (~dld@98.217.187.57)
[04:17:15] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[04:26:33] *** Quits: ARoxdale (~ARoxdale@109.78.38.164) (Remote host closed the connection)
[04:32:36] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 245 seconds)
[04:35:18] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[04:35:33] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:fd32:61c3:2684:b130) (Quit: Quit)
[04:36:03] *** Joins: ARoxdale (~ARoxdale@109.78.38.164)
[04:46:16] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[04:49:32] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[04:52:36] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 245 seconds)
[05:04:26] *** Quits: ARoxdale (~ARoxdale@109.78.38.164) (Remote host closed the connection)
[05:06:06] *** Joins: ARoxdale (~ARoxdale@109.78.38.164)
[05:09:03] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:11:06] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[05:11:58] *** Quits: ARoxdale (~ARoxdale@109.78.38.164) (Remote host closed the connection)
[05:23:26] *** Joins: darkstarx (~darkstard@gateway/vpn/pia/darkstardevx)
[05:25:55] *** Quits: darkstardev13 (~darkstard@89.47.234.174) (Ping timeout: 256 seconds)
[05:29:43] <very_sneaky> has anybody experimented with making c++ class interfaces available in python? I'm trying to work out if making templated classes is possible in python and what the syntax would even look like
[05:32:16] *** Joins: CaCode_ (~CaCode@user/cacode)
[05:33:15] <very_sneaky> ah, the answer is no - need to instantiate the template to make it available on the python api. guess that makes sense
[05:35:11] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 264 seconds)
[05:36:23] *** Joins: ARoxdale (~ARoxdale@109.78.38.164)
[05:37:40] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:48] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:48] *** ChanServ sets mode: +v npaperbot
[05:48:58] *** Quits: darkstarx (~darkstard@gateway/vpn/pia/darkstardevx) (Remote host closed the connection)
[05:49:26] *** Joins: darkstarx (~darkstard@gateway/vpn/pia/darkstardevx)
[06:21:01] *** Quits: nshire (~Neal@user/nshire) (Ping timeout: 268 seconds)
[06:21:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:26:22] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[06:26:53] *** Joins: Fault (~Fault@152.70.112.168)
[06:30:31] *** Quits: ARoxdale (~ARoxdale@109.78.38.164) (Ping timeout: 256 seconds)
[06:35:15] <computerquip> https://github.com/libusb/libusb/issues/29#issuecomment-675197466
[06:36:14] <computerquip> This is why I hate open-source some times. I spent months back then trying to get these ideas to form, I tried contacting people in several different forms, and the result is it gets ignored for 7 goddamn years and I get told to post on the mailing list instead
[06:36:51] <computerquip> Like damn, who realistically would have any interest in this after that long?
[06:40:59] *** Joins: great_taste (~great_tas@190.32.235.20)
[06:48:32] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[06:54:53] <great_taste> I wish I could create a `namespace 2D` within my main namespace... it'd look cool but it cannot start with a number
[07:02:15] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[07:02:31] *** Joins: ferdna (~ferdna@user/ferdna)
[07:08:38] *** Quits: shailangsa (~shailangs@host86-185-98-19.range86-185.btcentralplus.com) ()
[07:10:00] <yolo_> systemc library(a open source c++ library used widely) will crash when I build it with GLIBCXX_DEBUG -fsanitize=address,undefined, not really sure if it's systemc's fault, or the 3 flags does not play along well
[07:10:50] <yolo_> by crash I mean build a helloworld using a simple API from the library, it will report memory alignment errors or bad address access
[07:11:54] <yolo_> I made sure my helloworkd.cpp and the library both built with the same glibcxx_debug and sanitize flags to stay in sync
[07:16:24] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Remote host closed the connection)
[07:21:45] <KombuchaKip> If I've got a vector<byte> MyVector and I want a raw pointer to the Xth byte, is it &MyVector.at(X), &(MyVector.at(X)), MyVector.data() + X, or something else?
[07:22:54] <computerquip> yolo_, probably need to figure out where it's crashing
[07:23:56] <RandomReader> KombuchaKip - any of them
[07:24:11] * KombuchaKip nods at RandomReader
[07:24:18] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[07:24:18] <computerquip> There's a slight difference there with at being checked. There's also the iterator form I suppose.
[07:24:28] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Client Quit)
[07:24:51] <computerquip> Could also just do &MyVector[X]
[07:24:55] <RandomReader> I tend to prefer the .data() form, which matches nicely with what you'd need to do to get an end marker if you wanted a pair of raw pointers to serve as iterators, but they all have the same effect
[07:27:34] <yolo_> computerquip: had a quick look and could not figure out, reported to systemc as a possible bug
[07:29:39] <yolo_> the sad part is that, i have enjoyed glibcxx_debug and sanitize in my practice code, now I realize when I need work with 3rd party libraries, there is no way I can use either of them, as those libraries(unlike glibc) did not build with those flags
[07:40:28] *** Joins: frost (~frost@user/frost)
[07:47:29] *** Joins: nshire (~Neal@user/nshire)
[07:58:36] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[08:04:41] *** Joins: shailangsa (~shailangs@host86-185-98-19.range86-185.btcentralplus.com)
[08:07:06] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 260 seconds)
[08:08:59] *** Joins: Fault (~Fault@152.70.112.168)
[08:25:42] <johnny> great_taste, TwoD :)
[08:31:57] <great_taste> :/
[08:32:13] <computerquip> Could just flip it, call it d2
[08:32:21] <computerquip> or _2d (but don't though)
[08:35:59] <great_taste> or call it bi, as in bidimensional
[08:38:36] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[08:55:35] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[09:04:30] *** Joins: andreasbuhr (~quassel@p548dde89.dip0.t-ipconnect.de)
[09:10:26] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:11:26] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 260 seconds)
[09:12:31] *** Quits: nikko77 (~nikko77@2001:1388:5ca0:155f:2013:6e41:a4f5:70c8) (Quit: Leaving)
[09:21:35] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[09:21:56] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[09:24:31] <ville> two words: roman numerals
[09:25:18] *** Quits: skapata (~Skapata@user/skapata) (Quit: Äœis.)
[09:32:21] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[09:33:02] *** Joins: Fault (~Fault@152.70.112.168)
[09:36:24] *** Quits: chozorho (~chozorho@2601:146:300:c30::b683) (Quit: thank you! good night!)
[09:37:41] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:50] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:50] *** ChanServ sets mode: +v npaperbot
[09:55:51] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[09:56:58] *** Joins: Fault (~Fault@152.70.112.168)
[10:01:02] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[10:07:13] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:07:58] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:09:11] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:09:42] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:10:28] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:10:55] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:11:37] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:12:40] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:13:33] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:14:02] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:14:53] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:15:15] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:15:21] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 268 seconds)
[10:15:57] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:16:03] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[10:16:19] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:16:50] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[10:16:55] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:17:10] *** Joins: Fault (~Fault@152.70.112.168)
[10:17:30] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:18:16] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:18:38] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:19:05] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:20:15] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:20:51] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:21:42] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:22:46] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:23:08] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:24:06] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:24:53] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:25:55] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:26:22] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:27:15] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:27:57] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:28:31] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:29:24] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:29:57] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:30:18] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:30:51] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:31:17] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:32:19] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:32:47] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:33:16] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:33:37] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:34:17] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:34:22] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[10:35:00] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:35:15] *** Joins: Fault (~Fault@152.70.112.168)
[10:35:44] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:36:40] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:37:10] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:37:51] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:38:53] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:41:43] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:42:40] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:43:23] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[10:43:59] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:44:33] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:45:11] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:45:40] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:46:14] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:47:09] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:47:30] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:48:17] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:48:39] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:49:05] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:50:04] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:50:35] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:51:28] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[10:51:54] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[10:52:24] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:53:32] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:53:53] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:54:36] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:55:41] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:56:40] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:57:09] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:59:29] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[10:59:56] *** Joins: Fault (~Fault@152.70.112.168)
[11:04:22] *** Joins: cm007magnum (~Rheanna@101.68.251.194)
[11:11:53] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[11:11:55] <Alipha> iid == 498
[11:12:40] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[11:28:59] <amosbird> Hello! Is this the right way to trim whitespaces out of a string_view?      auto ss = std::string_view(s.data(), std::find_if(s.rbegin(), s.rend(), [](int ch) { return !std::isspace(ch); }) - s.rend());
[11:39:59] *** Quits: andreasbuhr (~quassel@p548dde89.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:43:56] <Alipha> amosbird: no. And to clarify, what you want to remove is trailing whitespace only? eg, "  hello world " -> "  hello world"?
[11:44:52] *** Joins: saohh (~saohh@ip-78-45-135-51.net.upcbroadband.cz)
[11:47:13] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:47:33] <Alipha> << std::find_if(s.rbegin(), s.rend(), [](int ch) { return !std::isspace(ch); }) - s.rend(); std::string_view s("Hello world  ");
[11:47:34] <geordi> -11
[11:47:46] <Alipha> You have the subtraction backwards
[11:47:59] <Alipha> << s.rend() - std::find_if(s.rbegin(), s.rend(), [](int ch) { return !std::isspace(ch); }); std::string_view s("Hello world  ");
[11:48:00] <geordi> 11
[11:48:22] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[11:50:48] *** Quits: saohh (~saohh@ip-78-45-135-51.net.upcbroadband.cz) (Quit: Leaving)
[11:51:12] *** Joins: saohh (~saohh@ip-78-45-135-51.net.upcbroadband.cz)
[11:51:13] *** Quits: saohh (~saohh@ip-78-45-135-51.net.upcbroadband.cz) (Remote host closed the connection)
[11:53:02] *** Joins: saohh (~saohh@ip-78-45-135-51.net.upcbroadband.cz)
[11:53:39] *** Quits: saohh (~saohh@ip-78-45-135-51.net.upcbroadband.cz) (Client Quit)
[11:56:15] <amosbird> Alipha: yes, trailing whitespace only
[11:56:40] <amosbird> Ah, ok)
[11:56:42] <Alipha> amosbird: your subtraction was backwards, otherwise it was fine
[12:11:50] *** Joins: CaCode (~CaCode@user/cacode)
[12:13:44] *** Quits: CaCode (~CaCode@user/cacode) (Remote host closed the connection)
[12:14:03] *** Joins: CaCode (~CaCode@user/cacode)
[12:14:03] *** CaCode is now known as netester
[12:14:22] *** Quits: netester (~CaCode@user/cacode) (Remote host closed the connection)
[12:14:52] *** Joins: netester (~CaCode@user/cacode)
[12:23:11] *** Quits: emerent (~quassel@p200300cd5748552fba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[12:24:25] *** Joins: emerent (~quassel@p200300cd5748552fba27ebfffed28a59.dip0.t-ipconnect.de)
[12:30:01] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:7025:e670:e56f:f750)
[12:35:13] <RandomReader> also it needs to be "unsigned char ch", not int
[12:35:59] <RandomReader> same goes for all the character functions, see https://en.cppreference.com/w/cpp/string/byte/isspace#Notes for why
[12:57:45] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:00:43] *** Joins: ray04 (~ray04@2600:1011:b004:fbf7:b4f8:cfeb:865d:4283)
[13:00:46] *** netester is now known as CaCode
[13:02:08] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:02:30] <ray04> Best IDE for building audio plugins?
[13:07:41] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[13:36:38] *** Joins: Burgundy (~yomon@86.127.194.72)
[13:37:41] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:50] *** ChanServ sets mode: +v npaperbot
[13:38:19] *** Joins: YetAnohterone (~kmph@2a02:a317:223a:8180:bc78:ae37:102e:8dc5)
[13:41:49] *** Quits: gargus (~user@203.220.68.182) (Quit: Leaving)
[13:42:02] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:684a)
[13:42:32] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:44:55] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (strontium.libera.chat (Nickname regained by services)))
[13:44:59] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:52:05] *** Quits: YetAnohterone (~kmph@2a02:a317:223a:8180:bc78:ae37:102e:8dc5) (Quit: Client closed)
[13:53:08] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:f9b0:14b7:ed5a:ac01)
[14:14:28] *** Joins: plastico (~plastico@neomutt/plastico)
[14:35:03] <very_sneaky> ray04: what features do you need for audio plugins?
[14:37:38] <Raziel> I'm gonna go ahead and guess the best IDEs for building audio plugins are gonna be the same as the best IDEs for building most anything else. v:
[14:38:08] <Raziel> so, Visual Studio, CLion, maybe qt creator
[14:39:07] *** Joins: paule32 (~paule32@user/paule32)
[14:39:16] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[14:43:21] *** Joins: nshire_ (~Neal@47.146.41.156)
[14:46:04] *** Quits: nshire (~Neal@user/nshire) (Ping timeout: 268 seconds)
[14:46:47] *** Joins: anjali (~anjali@42.111.17.17)
[14:55:50] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[14:56:36] *** Joins: cart_man (~rynot@host-78-144-127-199.as13285.net)
[14:58:53] <cart_man> Does anybody really use "noexcept" and what for?
[14:59:37] *** Joins: AmR (~AmREiSa@156.199.218.104)
[15:01:45] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[15:02:13] <ville> cart_man: yes people use it and for performance
[15:06:30] <ville> cart_man: http://coliru.stacked-crooked.com/a/616ac54c5dbcacba
[15:08:01] <cart_man> ville: For performance?
[15:08:11] <ville> see link
[15:14:51] *** Joins: chris64 (~chris@user/chris64)
[15:16:42] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[15:17:00] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[15:20:05] <ville> this is a slightly surprising variation: http://coliru.stacked-crooked.com/a/db08b74d86633ebf
[15:29:34] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[15:37:11] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[15:37:49] <amosbird> RandomReader: interesting. thanks
[15:39:41] *** Quits: anjali (~anjali@42.111.17.17) (Ping timeout: 245 seconds)
[15:48:39] <very_sneaky> Raziel: you forgot vim
[15:50:12] <LordKalma> ray04, for audio plugins, https://juce.com/ is probably the best framework
[15:50:21] <LordKalma> it includes an IDE with features specific for audio development
[15:50:26] <LordKalma> including some "hot reload" magic
[16:20:00] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Quit: Konversation terminated!)
[16:20:54] *** Joins: anjali (~anjali@42.111.17.17)
[16:23:08] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[16:44:29] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[16:51:12] *** Joins: malloy (~jimery@120.235.172.205)
[16:57:54] *** Quits: malloy (~jimery@120.235.172.205) (Quit: WeeChat 3.0)
[17:05:14] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:05:36] *** Joins: Simplar (~quassel@188.163.92.225)
[17:15:27] *** Joins: pulse (~pulse@user/pulse)
[17:18:35] <Simplar> How do I use getline to record the value of the current line into a variable?
[17:18:45] <Simplar> Thing is, each line I read has two numbers separated by a space
[17:18:58] <Simplar> I need to write first number into an array, and second number into an array
[17:19:04] <Simplar> how do I do it with getline?
[17:25:11] <Raziel> Simplar, the simplest would be to get the whole line then split the two numbers after, but you could also do it by alternating getlines with space and \n as delimiter
[17:25:48] *** Joins: ARoxdale (~ARoxdale@109.78.38.164)
[17:26:41] <ville> for some definition of simplest i'd say just operator >> twice
[17:27:16] <Raziel> I mean, yes, that works too. but it doesn't use getline :^)
[17:37:42] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:49] *** ChanServ sets mode: +v npaperbot
[17:37:58] <Simplar> how to pass array as a function argument?
[17:39:32] <Raziel> raw arrays?
[17:41:06] <Raziel> https://wandbox.org/permlink/1cuGmKEadzhIjjZN
[17:41:27] <Raziel> but, since this is C++, you should mayhaps avoid raw arrays.
[17:45:18] *** Quits: Tokamak (~Tokamak@172.58.191.92) (Ping timeout: 260 seconds)
[17:47:45] <Raziel> https://wandbox.org/permlink/0ocRNOIFNrwHueaz although passing std::array is slightly impolite, cause of the requirement for the size in the template
[17:47:47] <ARoxdale> Never pass a raw array. You'll only have to pass the length as well, and then keep passing it for every single function call after.
[17:47:57] <Raziel> so you usually wanna template it v:
[17:48:37] <ARoxdale> No. Wrap it in a slice type struct.
[17:48:48] <Raziel> p a i n
[17:49:05] <ARoxdale> struct Slice { size_t length, T* data}.
[17:49:14] <ARoxdale> It's the easiest thing in the world
[17:49:45] <ARoxdale> You don't even need templates if you use a void* or just typedef everything
[17:49:57] <Raziel> pain and runtime unsafe behaviour
[17:50:36] <ARoxdale> Alright, pass your array length down through half a dozen function calls. I hope nobody modifies it on the way down!!
[17:50:49] <ARoxdale> (I say these things because they happened)
[17:51:05] <Raziel> oh, no, I'm not saying passing a raw array + size is better (even though it is the C way)
[17:51:15] <Raziel> I'm saying templating your functions for std::array is better
[17:52:35] <Raziel> if you must use raw arrays, then sure, wrapping it is nicer than not
[17:52:43] <ARoxdale> It's better than nothing, but the need to template std::array is pretty annoying
[17:53:19] <Raziel> it is. but realistically most things are gonna be using vector over array
[17:53:55] *** Quits: Simplar (~quassel@188.163.92.225) (Ping timeout: 256 seconds)
[17:54:02] <Raziel> we lost him D:
[17:57:15] *** Quits: ARoxdale (~ARoxdale@109.78.38.164) (Ping timeout: 268 seconds)
[18:01:10] <Raziel> ohno
[18:04:53] *** Joins: Deneb (~johnch@117.111.189.80.dyn.plus.net)
[18:04:59] *** Joins: Deneb^ (~johnch@117.111.189.80.dyn.plus.net)
[18:05:49] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[18:06:14] *** Quits: X-Scale (~ARM@31.22.160.27) (Ping timeout: 260 seconds)
[18:07:55] *** X-Scale` is now known as X-Scale
[18:11:26] *** Quits: anjali (~anjali@42.111.17.17) (Ping timeout: 268 seconds)
[18:16:01] *** Quits: msk (~msk@185.124.240.174) (Ping timeout: 256 seconds)
[18:20:25] *** Joins: msk (~msk@185.124.240.174)
[18:23:29] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[18:24:21] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:25:47] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:27:25] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:907f:6d38:50a3:cb6a)
[18:31:10] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:49b2:5c3a:dea0:5ca1) (Ping timeout: 268 seconds)
[18:38:50] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:49:12] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[18:49:12] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 276 seconds)
[19:01:12] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[19:09:22] *** Joins: Simplar (~quassel@188.163.92.225)
[19:14:40] <Simplar> What is exit code -11?
[19:17:18] <Simplar> Raziel: what if I want to pass a reference to *dynamic* array?
[19:18:58] <SuperNintendoSUX> what's a dynamic array?
[19:19:12] <SuperNintendoSUX> be careful with these made up definitions
[19:19:24] <SuperNintendoSUX> they usually are inaccurate and non conforming
[19:19:25] <Simplar> int *myDynamicArray = new int[someDynamicLength];
[19:19:37] <Simplar> this is an integer array with dynamic length
[19:19:38] <SuperNintendoSUX> ok. a raw pointer that owns memory
[19:19:48] <Simplar> Oh, that's a nice definition
[19:20:00] <SuperNintendoSUX> you can use the pointer itself
[19:20:06] <Simplar> if I want to operate with such array in a function, how do I pass it?
[19:20:08] <Simplar> as a pointer?
[19:20:11] <SuperNintendoSUX> but even better. don't use new[] at all
[19:20:21] <SuperNintendoSUX> use vector or unique_ptr
[19:20:32] <Simplar> Let me explain the situation
[19:20:58] <Simplar> Input data: user enters array's length (an integer > 0) and then passes elements for arrays inside that array
[19:20:59] <SuperNintendoSUX> but yeah, pass the pointer and the length if you HAVE or REALLY WANT to use this crap
[19:21:14] <Simplar> so the resulting array is [[1,2],[3,4],[5,6]] etc
[19:21:27] <SuperNintendoSUX> if you can do proper C++, then use vector and just pass a reference to it
[19:21:41] <Simplar> vector can handle arrays in arrays?
[19:21:49] <Simplar> like... vector in vectors?
[19:21:51] <SuperNintendoSUX> yeah! can be a simple vector or a vector of vectors
[19:21:57] <Simplar> vector of vectors*
[19:22:01] <Simplar> hmm, interesting
[19:22:04] <SuperNintendoSUX> the latter costs a lot more memory and only recommended for sparse matrices
[19:22:07] <Simplar> I've worked with js before
[19:22:09] <Raziel> Simplar, you can pass it exactly the same as a non-dynamic array https://wandbox.org/permlink/s11z2AVgx1sMDyEF
[19:22:23] <SuperNintendoSUX> for regular dense matrices, just use a single vector<int>
[19:22:23] <Simplar> and cpp is something I do want to get better at
[19:22:25] <SuperNintendoSUX> !sillymatrix
[19:22:26] <nolyc> SuperNintendoSUX: Error: "sillymatrix" is not a valid command.
[19:22:36] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[19:22:42] <SuperNintendoSUX> use a vector + row length pair
[19:22:45] <SuperNintendoSUX> !fs matrix
[19:22:45] <nolyc> SuperNintendoSUX: Key search for "matrix" (2 found): "matrix" and "silly matrix"
[19:22:49] <SuperNintendoSUX> !silly matrix
[19:22:50] <nolyc> template<typename T> struct matrix { matrix(unsigned m, unsigned n) : m(m), n(n), vs(m*n) {} T& operator ()(unsigned i, unsigned j) { return vs[i + m * j]; } private: unsigned m; unsigned n; std::vector<T> vs; }; /* column-major/opengl: vs[i + m * j], row-major/c++: vs[n * i + j] */
[19:23:18] <SuperNintendoSUX> that's a 2D matrix backed up by just a vector and a row or column length
[19:23:18] <Simplar> I know that vector is a dynamic-length array that can manage memory by itself
[19:23:30] <SuperNintendoSUX> nice! you learn fast
[19:23:31] <SuperNintendoSUX> now use it
[19:23:36] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[19:23:37] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[19:23:54] <Simplar> so basically i will need to include <vector>
[19:23:56] <Simplar> to use it
[19:23:56] <yolo_> every morning the news is like someone is rewritten X in rust, rust is into the linux kernel, there is no way rust is going to rewrite every c++ egines and libraries, meanwhile rust is moving up fast, how will they co-exist at a software level? e.g. c++ builds with rust or vice versa somehow
[19:24:09] <SuperNintendoSUX> yolo_: no one cares about rust
[19:24:11] <SuperNintendoSUX> :D
[19:24:17] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:48e0:406d:e67c:af6)
[19:24:17] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:48e0:406d:e67c:af6) (Changing host)
[19:24:17] *** Joins: skapata (~Skapata@user/skapata)
[19:24:49] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[19:25:01] <yolo_> wonder why rust catches so many eyeballs these days, maybe younger is indeed more attractive
[19:25:53] <Simplar> rust isn't as good as cpp
[19:25:58] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:c2f7:8e7f:1dd4:38f0)
[19:25:58] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:c2f7:8e7f:1dd4:38f0) (Changing host)
[19:25:58] *** Joins: RoKenn (~RoKenn@user/rokenn)
[19:26:22] <m_ben> c++ is getting more and more complex with every standard. it's hard to catch up for beginners
[19:26:42] <m_ben> I can totally understand the younger generation
[19:26:47] <kalven> yolo_: here's some info for how firefox does its c++/rust interop: https://firefox-source-docs.mozilla.org/writing-rust-code/ffi.html
[19:27:20] <yolo_> maybe c++26 should be: let's stop adding new things and simplify/streamline the existing things before everyone got lost eventually
[19:28:41] <Simplar> ...how do I put a vector inside a vector?
[19:28:55] <yolo_> vector<vector<int>>?
[19:29:26] <Simplar> oh
[19:29:34] <Simplar> so <> contain the *type* of value in vector
[19:29:35] <Simplar> okay
[19:29:57] <Simplar> So `vector<vector<int>> intervals;` is fine
[19:30:07] <yolo_> yes it is
[19:30:32] <Simplar> using while (!cin.eof()) loop is a good way to consume multiline input?
[19:32:48] <yolo_> kalven: thanks, at least it's do-able though pretty verbose, as expected.
[19:33:52] *** Joins: magla (~gelignite@55d4a5c9.access.ecotel.net)
[19:34:58] <yolo_> I believe people like rust is because they got more coffee breaks everyday, when each of their cargo build takes 10+ minutes
[19:40:36] <Simplar> https://www.mycompiler.io/view/FtyK11R
[19:40:48] <Simplar> Help me to understand why is input misinterpreted by vector here
[19:41:07] <Simplar> it prints (5,25) - correct, then (40,90) - incorrect
[19:41:29] <Simplar> Should print line by line according to input: (5,25), (27,40), (75,90)
[19:41:35] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:46:33] *** Joins: chozorho (~chozorho@2601:146:300:c30::9cc7)
[19:48:21] <Simplar> Hm
[19:48:30] <Simplar> The shortest version i can think of is while(cin >> s >> e) intervals.push_back({s,e});
[19:52:55] <Simplar> ...okay, question time
[19:53:04] <Simplar> Why does it give me compilation error on push_back?
[19:53:18] <Simplar> main.cpp:15:51: error: no matching function for call to 'std::vector<std::vector<int> >::push_back(<brace-enclosed initializer list>)'
[19:53:52] <Simplar> am i not allowed to initialize a vector inside push_back?
[19:56:46] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:57:29] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Ping timeout: 268 seconds)
[19:59:22] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[20:00:32] <Raziel> {std::min(1, 2);}
[20:00:32] <geordi>  
[20:00:44] <Raziel> {cout << std::min(1,2);}
[20:00:45] <geordi> 1
[20:01:06] <Raziel> {cout << std::min(1.0f, 54.8868f);}
[20:01:07] <geordi> 1
[20:01:21] <Raziel> well why the fuck does it return -nan(ind) for me then eh
[20:02:18] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[20:03:25] <Raziel> {std::vector<std::vector<int>> vec; vec.push_back({1, 2});}
[20:03:25] <geordi>  
[20:03:42] <Raziel> Simplar, seems to be working fine v:
[20:07:20] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[20:10:12] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:e9:abf1:b887:13fa)
[20:12:55] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:907f:6d38:50a3:cb6a) (Ping timeout: 268 seconds)
[20:12:59] <Simplar> Yea, I figured the error out already
[20:13:15] <Simplar> unsigned int and usual int seem to not be friends UWU
[20:14:35] <Raziel> in templated stuff, they most certainly are not
[20:18:37] <Simplar> void someFunction(vector<vector<unsigned int>>* v) {}
[20:18:54] <Simplar> Is this a correct way to pass a reference to a vector of vectors into function?
[20:19:28] <Raziel> it is a correct way but it is not the preferred way
[20:19:41] <Simplar> what's the preferred way then?
[20:19:44] <Simplar> Just so I know
[20:20:03] <Raziel> void someFunction(vector<vector<unsigned int>>& v) if you want that function to modify the vector, void someFunction(const vector<vector<unsigned int>>& v)  if you don't want that function to modify the vector
[20:20:10] <Raziel> references over pointers
[20:20:32] <Simplar> The ampersand means reference?
[20:20:39] <Raziel> yes
[20:20:41] <Simplar> the ampersand right after the type i mean
[20:20:47] <Simplar> what if I do it right before the name?
[20:20:53] <Simplar> const vector<vector<unsigned int>> &v
[20:20:58] <Raziel> same thing
[20:21:08] <Raziel> that's just style preference
[20:21:15] <Simplar> So it won't technically clone the vector?
[20:21:57] <Raziel> nope, it won't make a copy
[20:22:07] <Raziel> if you want to make a copy you just do void someFunction(vector<vector<unsigned int>> v)
[20:22:23] <Simplar> ah, and to use reference I should first ...dereference ?
[20:24:21] <Raziel> nope
[20:24:51] <Raziel> https://wandbox.org/permlink/EaRTIBLpyPv7fsz0
[20:26:48] *** Quits: msk (~msk@185.124.240.174) (Read error: Connection reset by peer)
[20:26:52] <Simplar> Wow
[20:26:53] <Simplar> Nifty
[20:27:11] *** Joins: msk (~msk@185.124.240.174)
[20:28:39] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[20:36:43] *** Joins: horribleprogram (~user@2607:fea8:7040:830:b87c:5d6:8ebc:5e7c)
[20:36:56] *** Quits: horribleprogram (~user@2607:fea8:7040:830:b87c:5d6:8ebc:5e7c) (Changing host)
[20:36:56] *** Joins: horribleprogram (~user@user/horribleprogram)
[20:38:16] *** Joins: paul424 (~tom@ip-31-0-123-225.multi.internet.cyfrowypolsat.pl)
[20:39:33] <paul424> hello, only one question regarding the default's arguemnt values and virtual functions ; Once one method in the hierarchy is changed , then I pressume every method up and down must be changed ? like virtual foo() to virtual foo(int bar=0) in EVERY defintion right ?
[20:45:14] <paul424>     virtual void updateActiveSpots() override; hmm what would happen if I remove the override  directive ?
[20:45:53] <paul424> to  virtual void updateActiveSpots(GameMap* gm) ?
[20:46:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[20:51:47] *** Quits: rb (~augh@theguntretort.com) (Quit: ZNC - https://znc.in)
[20:52:10] <Alipha> !give Simplar books
[20:52:11] <nolyc> Simplar: A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[20:53:37] *** Joins: rwb (~augh@theguntretort.com)
[20:54:32] <paul424>     virtual void updateActiveSpots(GameMap* gameMap) = 0; can null virtual functions contain default values ?
[20:55:07] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[20:55:35] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[20:58:08] <paul424> ahh it passed so it can ...
[20:59:26] <Alipha> paul424: default parameter values are just syntactic sugar. When you declare a function `virtual void foo(int bar=0);`, then you're declaring a function `virtual void foo(int);` which the caller will automatically pass in 0 for the parameter if you don't specify. So if you type `x.foo();` it is equivalent to `x.foo(0);`
[21:00:18] <paul424> with virtual functions and class inheritance hierarchy the matter complicates .... ;)
[21:00:49] <Alipha> paul424: so yes, if you want to override foo, derived classes have to declare `virtual void foo(int bar = 0);` or `virtual void foo(int bar);` or even `virtual void foo(int bar = 3);`
[21:01:01] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[21:01:13] <Alipha> Though preferably using the override keyword instead
[21:01:18] <Simplar> Alipha: thanks a ton!
[21:01:35] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Ping timeout: 264 seconds)
[21:01:57] <Simplar> https://www.mycompiler.io/view/6YIgx2v Any improvements to the performance of this algo you can suggest?
[21:02:07] <Alipha> Defining a `virtual void foo();` would not override the base class's foo, but instead create another, different virtual function
[21:03:43] *** Quits: EdFletcher (~ubuntu@user/edfletcher) (Quit: leaving)
[21:04:13] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[21:05:07] <Alipha> paul424: and those are called "pure virtual functions", not "null virtual functions"
[21:05:35] <paul424> hehe
[21:05:42] <paul424> my English is rusty
[21:11:30] *** Quits: pa (~pah@user/pah) (Ping timeout: 268 seconds)
[21:11:38] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[21:12:43] *** Joins: pah (~pah@user/pah)
[21:13:47] *** rwb is now known as rb
[21:17:58] *** Quits: msk (~msk@185.124.240.174) (Ping timeout: 260 seconds)
[21:19:06] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[21:19:24] *** Joins: Fault (~Fault@152.70.112.168)
[21:19:44] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[21:20:33] *** Joins: pah (~pah@user/pah)
[21:22:10] *** Joins: msk (~msk@185.124.240.174)
[21:26:51] <Simplar> maybe looping over all elements of a vector from 10^9 elements isn't the best idea in the world
[21:27:00] <Simplar> on every step of recursive func
[21:29:33] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[21:31:19] *** Joins: pah (~pah@user/pah)
[21:37:42] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:52] *** ChanServ sets mode: +v npaperbot
[21:38:50] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[21:40:25] <Simplar> Hey guys
[21:40:29] <Simplar> How to cin char by char?
[21:43:34] <cbreak> Simplar: you can use formated (>> into a char) or unformated (read(): https://en.cppreference.com/w/cpp/io/basic_istream/read )
[21:43:52] <cbreak> there's also https://en.cppreference.com/w/cpp/io/basic_istream/get
[21:45:20] *** Joins: great_taste (~great_tas@190.32.235.20)
[21:46:05] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[21:46:36] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[21:48:29] *** Joins: pah (~pah@user/pah)
[21:49:39] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[21:50:15] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[21:50:38] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[21:51:18] *** Joins: Fault (~Fault@152.70.112.168)
[21:51:35] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[21:52:04] *** Quits: Fault (~Fault@152.70.112.168) (Client Quit)
[21:59:39] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[22:01:49] <Simplar> cbreak: I am reading user input from the console
[22:02:03] <Simplar> and I wish to read one char, do operation with it, read next char, etc until the end of the line
[22:02:36] <cbreak> Simplar: why not use std::getline into a std::string, and process it somewhere else?
[22:02:53] <cbreak> in general it's a good idea to separate IO with logic
[22:02:58] <Simplar> I fear the time limit given by a certain task
[22:03:11] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[22:03:22] <Simplar> They don't explicitly tell the time limit, but they tell if it's surpassed
[22:04:00] <Simplar> A user input on one line (!) can consist from 400k chars.
[22:04:14] <Simplar> and reading them, and processing them afterwards will be hella costy on time imo
[22:04:46] <Simplar> I have only two chars in the input: first is L, second is R
[22:04:52] <Simplar> char types*
[22:05:09] <Simplar> The example input can be LLLRLRLRLRLRLRLRLRLLLLRRRRRLLRLRLR<...>LRLR (400k chars)
[22:06:21] *** Joins: Tokamak (~Tokamak@172.58.188.16)
[22:06:34] <Simplar> The actual task is to prepend each array index of chars that are equal to 'L' and append each array index of chars that are equal to 'R' from that input
[22:06:52] <Simplar> The output string has "0" in it by default.
[22:07:09] <Simplar> Thus, if we have, for example, an input LLRLRRR
[22:07:51] <Simplar> Then the program should output a string "4 2 1 0 3 5 6 7"
[22:08:01] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Remote host closed the connection)
[22:08:18] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[22:08:38] <Alipha> in that case, it probably does make sense to read a char at a time using cin.get(ch);
[22:08:48] <Simplar> I also have a solution: https://www.mycompiler.io/view/6Wsmg2c
[22:08:59] <Simplar> I haven't come to beg to solve the task for me, but to help me optimize
[22:09:08] *** Quits: udet_ (~udet@ve603.venus.servdiscount-customer.com) (Remote host closed the connection)
[22:09:20] *** Joins: udet_ (~udet@ve603.venus.servdiscount-customer.com)
[22:09:36] <Simplar> Alipha: so, I do while(cin.get(ch)) { ... } loop?
[22:11:03] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Remote host closed the connection)
[22:11:20] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[22:11:31] <Alipha> Simplar: yeah
[22:11:33] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[22:12:02] <Simplar> Alipha: first two chars are blank, why is that?
[22:12:13] *** Joins: Fault (~Fault@152.70.112.168)
[22:13:25] <Alipha> Simplar: maybe they're newlines, spaces, or tabs? cin.get(ch) doesn't ignore whitespace. use `cin >> ch` to ignore whitespace.
[22:13:39] <Alipha> or just skip the whitespace yourself manually
[22:14:11] <Simplar> cin >> ch also reads char by char?
[22:14:16] <Simplar> if ch is a char type
[22:14:47] <Alipha> yes, but skips whitespace
[22:15:19] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Remote host closed the connection)
[22:15:32] <Simplar> Alipha: when doing cin like this, there is no way to get char position in the input, correct?
[22:15:36] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[22:15:40] <Simplar> I should declare int i and do i++
[22:16:00] <Alipha> Simplar: right
[22:16:36] *** Quits: Fault (~Fault@152.70.112.168) (Client Quit)
[22:16:39] <cbreak> I'd not use int. unsigned, or better size_t, is more scalable. Unless you know you never need more than 32k
[22:16:53] <cbreak> or you write hardware-specific code
[22:16:54] *** Joins: Fault (~Fault@152.70.112.168)
[22:16:56] <Simplar> cbreak: max positions by the problem is 400k
[22:17:07] <cbreak> yeah, then better not use int
[22:17:16] <cbreak> uint32_t, size_t, better alternatives
[22:17:18] <Simplar> so size_t is better?
[22:17:41] <Alipha> well, size_t could potentially also be 16-bit :-)
[22:17:53] <cbreak> chances are size_t is big enough. More than big enough.
[22:18:01] <cbreak> uint32_t will be big enough, guaranteed
[22:18:08] <cbreak> if it exists :)
[22:18:18] <Simplar> aight :)
[22:18:22] <Alipha> unsigned long would be guaranteed to be big enough
[22:18:33] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[22:18:34] <Simplar> again i need no more than 400k
[22:19:31] <Simplar> Also
[22:19:36] <Simplar> picture = to_string(i+1)+' '+picture;
[22:19:38] <Alipha> uint32_t is most appropriate
[22:19:48] <Simplar> is there a better way to prepend a number to a string?
[22:20:10] <Simplar> if my number is uint32_t
[22:21:49] *** Joins: pah (~pah@user/pah)
[22:22:38] <cbreak> Simplar: how about a std::deque<uint32_t>
[22:22:45] <cbreak> and then create a string out of it later?
[22:22:58] <cbreak> that will save you a lot of time on allocating / reallocating
[22:23:01] <Simplar> are you kidding me X"D
[22:23:35] <cbreak> deque is optimized for insertion at both ends
[22:23:39] *** Quits: msk (~msk@185.124.240.174) (Ping timeout: 256 seconds)
[22:23:47] <cbreak> it is much more efficient than prepending to a string
[22:23:59] <Simplar> and conversion of deque to string?
[22:24:02] <Simplar> in cout
[22:24:12] <Simplar> I'll sure try deque out
[22:24:19] <cbreak> simple ranged for loop for example
[22:25:11] <Simplar> which is basically O(n) complexity
[22:25:34] <cbreak> you will not be faster than O(n) ever :)
[22:26:15] <Simplar> O(1)?
[22:27:03] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[22:27:03] <computerquip> For traversal?
[22:27:33] *** Quits: Tokamak (~Tokamak@172.58.188.16) (Read error: Connection reset by peer)
[22:27:46] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[22:27:58] <Simplar> well, yea
[22:28:36] *** Joins: msk (~msk@185.124.240.174)
[22:29:22] <computerquip> You can search in O(1), traversal is pretty much always O(n)
[22:30:28] <Alipha> imo, I'd use std::deque<std::string> and then keep track of the sum of string lengths so that you can reserve the final string to the correct length when you build it.
[22:33:08] *** Joins: Tokamak (~Tokamak@172.58.188.16)
[22:33:51] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[22:35:16] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[22:35:22] *** Joins: pah (~pah@user/pah)
[22:36:13] *** Joins: Fault (~Fault@152.70.112.168)
[22:36:52] <cbreak> Alipha: don't think that's needed
[22:37:15] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[22:37:22] <cbreak> you know the final string will contain all numbers from 0 to N, along with N-1 spaces
[22:37:33] <Alipha> fine. do math :-P
[22:38:39] <Alipha> you're having to use std::to_string on each of the numbers at some point anyway, so it probably doesn't make much of a difference if you do it before you put them in the std::deque or after you take them out
[22:40:03] <cbreak> std::cout can format numbers just fine
[22:44:10] <Simplar> brb, returning later
[22:44:46] *** Quits: Simplar (~quassel@188.163.92.225) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:45:12] <Alipha> oh yeah. don't actually have to build a string. doh
[22:50:53] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:51:44] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[22:52:57] *** Quits: Tokamak (~Tokamak@172.58.188.16) (Read error: Connection reset by peer)
[22:54:48] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[22:55:41] *** Joins: pah (~pah@user/pah)
[22:55:57] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[22:57:55] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[22:58:12] *** Joins: Fault (~Fault@152.70.112.168)
[23:09:25] *** Joins: andreasbuhr (~quassel@p548dde89.dip0.t-ipconnect.de)
[23:13:35] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 268 seconds)
[23:23:13] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[23:24:31] *** Joins: pah (~pah@user/pah)
[23:30:14] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[23:31:43] *** Joins: pah (~pah@user/pah)
[23:34:53] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:36:39] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[23:48:30] *** Quits: Deneb^ (~johnch@117.111.189.80.dyn.plus.net) (Remote host closed the connection)
[23:48:30] *** Quits: Deneb (~johnch@117.111.189.80.dyn.plus.net) (Remote host closed the connection)
[23:56:46] *** Quits: micronn (~micronn@user/micronn) (Quit: brb)
[23:57:12] *** Quits: paul424 (~tom@ip-31-0-123-225.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[23:57:14] *** Joins: micronn (~micronn@user/micronn)
