[00:00:17] *** Quits: dialtone (~dialtone@135-180-111-143.fiber.dynamic.sonic.net) (Ping timeout: 244 seconds)
[00:02:08] *** Quits: whatsyourask (~whatsyour@user/whatsyourask) (Quit: whatsyourask)
[00:03:35] *** Quits: dmathieu (~textual@pop.92-184-110-0.mobile.abo.orange.fr) (Ping timeout: 272 seconds)
[00:10:15] *** Quits: hub (~hub@user/hub) (Quit: ZNC 1.8.2 - https://znc.in)
[00:10:40] *** Joins: hub (~hub@user/hub)
[00:19:20] <home> hello
[00:19:33] *** Joins: WayneS (~WayneS@user/waynes)
[00:19:52] <mouseghost> hello
[00:20:25] <martian67> <bkero> https://github.com/signalapp/Signal-Android/issues/127
[00:20:27] <mockturtle> [ Request: Google Play signed download alternative · Issue #127 · signalapp/Signal-Android ] - github.com
[00:20:34] <martian67> moxie is such a shitheel about this stuff
[00:20:38] <martian67> it really sucks
[00:21:55] *** Joins: NieDzejkob (~quassel@195.149.98.3)
[00:23:18] *** Quits: hlz_ (~rue@1-162-45-43.dynamic-ip.hinet.net) (Quit: WeeChat 3.1)
[00:36:55] *** Quits: dmc (~dmc@archlinux/trusteduser/polyzen) (Quit: WeeChat 3.1)
[00:38:18] *** Joins: dmc (~dmc@archlinux/trusteduser/polyzen)
[00:39:31] *** Quits: pja (~pja@dsl-217-155-153-10.zen.co.uk) (Quit: WeeChat 3.0)
[00:48:11] *** Joins: nordmann (~nordmann@user/nordmann)
[00:55:40] <mockturtle> Multicore OCaml: May 2021 [ml compilers] (c-cube) https://lobste.rs/s/gonksn
[01:00:38] <drakonis> nice
[01:01:01] <mockturtle> In-browser, open source data IDE for developers [databases web show] (eatonphil) https://lobste.rs/s/mecdh3
[01:02:41] <cepi> ooh, been waiting for OCaml to get multicore support
[01:02:51] <cepi> probably not the only one..
[01:02:59] <companion_cube> we're waiting
[01:03:09] <companion_cube> but it's going to actually happen, which is crazy
[01:03:19] <drakonis> yesssssss
[01:03:21] <cepi> yeah! very exciting!
[01:05:27] <rwb> about as exciting as emacs getting threading via actors
[01:06:12] <companion_cube> I use ocaml and not emacs, so I'm definitely more excited about multicore OCaml :p
[01:06:19] *** Joins: MerchantOfVenice (~patrick@user/merchantofvenice)
[01:08:25] <iDrougge> At least more exciting than "In-browser, open source data IDE for developers".
[01:08:25] <manicennui> What are domains?
[01:09:25] <companion_cube> they're kind of heavy threads
[01:09:38] <drakonis> emacs getting threads via actors say what
[01:10:18] <companion_cube> wow, the in browser IDE doesn'
[01:10:25] <companion_cube> t even load in my firefox
[01:10:40] <companion_cube> Uncaught SyntaxError: private fields are not currently supported
[01:10:43] <companion_cube> oh well
[01:10:43] <cepi> same here lol
[01:11:02] *** Joins: pja (~pja@dsl-217-155-153-10.zen.co.uk)
[01:12:38] *** Parts: expix (~louis@amontpellier-652-1-2-1.w90-57.abo.wanadoo.fr) ()
[01:14:47] *** Quits: WayneS (~WayneS@user/waynes) (Quit: Leaving.)
[01:19:47] *** Quits: metadaemon (~metadaemo@user/metadaemon) (Ping timeout: 272 seconds)
[01:22:27] <mockturtle> Why Gemini is not my favorite internet protocol [web rant] (calvin) https://lobste.rs/s/vhlagb
[01:23:08] *** Quits: home (~home@user/home) (Remote host closed the connection)
[01:23:43] <companion_cube> :D
[01:23:44] *** Joins: home (~home@user/home)
[01:23:58] <companion_cube> classic friday night rant
[01:25:42] <skuzzymiglet> sourcehut "minimalist" bootlickers subbing for drew however
[01:26:28] <skuzzymiglet> sourcehut is full of (clap clap) very minimal gemini clients
[01:26:33] <iDrougge> Second "not my favourite" today.
[01:27:14] <manicennui> Not sure what the point of this rant is.
[01:27:25] <manicennui> It doesn't make a strong argument for anything other than the author not liking it.
[01:27:41] <hoistbypetard> iDrougge: what was the first?
[01:27:43] <bsandro> skuzzymiglet: "I'm on this picture and I don't like it" =)
[01:27:55] <manicennui> So don't use it and move on.
[01:28:12] *** Quits: home (~home@user/home) (Ping timeout: 252 seconds)
[01:28:19] <manicennui> It's not like Gemini is taking over.
[01:28:27] <iDrougge> hoistbypetard: Myself, seven hours ago.
[01:28:49] <iDrougge> Dart is "not my favourite language".
[01:29:25] <bsandro> what is that article even, "there is no official client"
[01:29:37] <bsandro> is there an official HTTP client then?
[01:29:45] <pe> Good point.
[01:30:18] *** Quits: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1) (Ping timeout: 272 seconds)
[01:30:24] <bsandro> closest thing I remember there was some w3c monstrocity resembling gnu/hurd some years ago
[01:31:58] <bsandro> (i'm not defending gemini though, looks as a fun recreational project but not for me)
[01:32:23] <bsandro> push enough money into gemini and it become same bloat www became
[01:32:39] <skuzzymiglet> the technology decisions feel like a reaction rather than being careful. it's chalked up to be the new web but doesn't even bother with nested styling in its markup format
[01:32:51] <companion_cube> manicennui: opinions must be had
[01:33:50] *** Joins: home (~home@user/home)
[01:34:46] <skuzzymiglet> I find it somewhat harmful/pointless because all the time will be spent cargo-culting over stupid light technology rather than presenting solid alternatives
[01:35:13] <manicennui> Not only is there no standard HTTP client, but every client implements only a portion of the standard, and most extend it as well.
[01:35:31] <companion_cube> well… curl is arguably a pretty standard client :p
[01:35:36] <manicennui> Their other points are essentially reason that people DO want to use gemini.
[01:36:00] *** Joins: aleph (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[01:36:00] *** ChanServ sets mode: +o aleph
[01:36:00] <manicennui> Sorry, they probably really mean web, i.e. HTTP, HTML, CSS, etc.
[01:36:55] <companion_cube> I do like the idea that one can write one's own client
[01:36:58] <gerikson> manicennui: I mostly wrote it so I had a handy place to link my thoughts on Gemini ;)
[01:37:01] <companion_cube> but the markup, too? ugh
[01:38:19] *** Joins: skrzyp (~skrzyp@skrzyp.net)
[01:38:32] <manicennui> skuzzymiglet: You seem to be arguing that they shouldn't implement what seems to be exactly what many Gemini users want because they could be using that time implementing something you want.
[01:40:16] <bsandro> gemini is a relatively simple standard that is somewhat fun to implement though. like, there is countless of IRC clients as well, people often write them just for fun
[01:40:30] <bsandro> when learning new language for example it is a good exercise
[01:40:35] <skuzzymiglet> well gemini users are happy with gemini. I don't think anyone finds gemtext useful, not just me
[01:40:49] *** Joins: arcatech_ (~arcatech@user/arcatech)
[01:40:53] *** Quits: arcatech_ (~arcatech@user/arcatech) (Client Quit)
[01:40:54] <companion_cube> bsandro: IRC was ok for the 80s (?)
[01:41:06] <companion_cube> but if one was to remake a "IRC-like" in 2021
[01:41:16] <companion_cube> I hope they'd reconsider some of the worst technical mistakes
[01:41:17] <bsandro> companion_cube: still ok for 2020s imo
[01:41:25] <gerikson> you mean Discord companion_cube ;)
[01:41:26] <companion_cube> I like IRC, but because it's stable
[01:41:30] <companion_cube> gerikson: nah
[01:41:31] <manicennui> companion_cube: You know it would just be some JSON mess.
[01:41:34] <companion_cube> yeah
[01:41:35] *** Joins: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1)
[01:41:46] <companion_cube> but I'd take some json mess over a line oriented thing
[01:41:48] <gerikson> bsandro: look, I'm giving modern IRC a shot, and it's a freakin' usability nightmare
[01:41:52] <companion_cube> I mean, if done properly
[01:41:55] <gerikson> the mobile support is laughable
[01:42:04] <manicennui> companion_cube: Clearly not since you choose to continue to use IRC.
[01:42:11] <gerikson> you need to have an always on bouncer for it to work...
[01:42:18] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 264 seconds)
[01:42:19] <bsandro> gerikson: can't argue, last time i've tried it wasn't handy at all
[01:42:33] *** Quits: aleph (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Quit: WeeChat info:version)
[01:42:36] <zr> Oh, are we talking IRC vs Discord vs Matrix again? :D
[01:42:40] <companion_cube> ohno
[01:42:43] <gerikson> and the narrative around authentication & encryption is from the Before Times
[01:42:53] <gerikson> Discord is Easy To Use
[01:42:58] <gerikson> so people will use it
[01:43:19] <iDrougge> <bsandro> push enough money into gemini and it become same bloat www became
[01:43:32] <bsandro> but not counting cellphones i find irc amazing client-wise
[01:43:35] <iDrougge> I wrote a comment to the same effect when Gemini came up before on the site.
[01:43:38] <companion_cube> who would want to put money into gemini anyway
[01:43:38] <manicennui> I find Discord to be a pain. I don't want to be in every channel on the server and have to go through and mute all of them.
[01:44:13] <iDrougge> Tim Berners-Lee didn't exactly put out a WWW client with Javascript, CSS and multimedia APIs.
[01:44:33] <iDrougge> But three years later, Netscape had done exactly that, without any involvement of W3C.
[01:45:11] <zr> I think the Gemini-ers mean when they say that "gemini can't be exploited by Big Capitalism" is the fact that the protocol is utterly unextensible ensures that it can't become anything else
[01:45:21] *** Joins: jj5 (~jj5@111-220-243-3.dyn.dodo.net.au)
[01:45:23] <bsandro> maybe it is not about standards, it is about having options for users. someone is comfortable with being a product, someone is not (not flaming)
[01:45:26] <zr> Alright, that could use a rephrasing...
[01:45:33] <companion_cube> 3 years later?? :o
[01:45:38] <zr> (regarding what I said)
[01:46:04] <zr> but yeah, nothing stops google from coming up with their own incompatible gemini client that *does* extend gemini, albeit in an incompatible way
[01:46:22] <zr> and because they're google it'll be the only gemini anyone knows about
[01:46:28] <companion_cube> along with gromium to browse it
[01:46:40] <manicennui> There is little chance that Google will become interested in Gemini.
[01:46:42] <zr> gromium
[01:46:44] <zr> lol
[01:46:52] <zr> manicennui: Of course. I was just using an example.
[01:46:52] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2-rc1)
[01:46:57] <Church> Welp seems some lua code I hadn't commited got overwritten
[01:46:58] <Church> fml
[01:48:01] <manicennui> Gemini seems to be in exactly the same place as Gopher was when I first started using the Internet: I'm not aware of anything I'd actually want to access on Gemini.
[01:48:42] <zr> There are a few nice blogs there
[01:48:45] <zr> Not much else.
[01:49:05] <manicennui> zr: Maybe if I knew about them I'd try to access them, but I don't even know how I'd become aware of them.
[01:49:17] <zr> I mean, it's not even much
[01:49:23] <companion_cube> there's some gemini-exclusive content by ddevault
[01:49:26] <companion_cube> you don't want to miss that
[01:49:31] <manicennui> Do HN or lobsters allow gemini link submission?
[01:49:33] <zr> Ah, of course, how could I forget !!
[01:49:36] <zr> manicennui: nope.
[01:49:44] <manicennui> companion_cube: Does he not post everything on the web too?
[01:49:53] <companion_cube> not everything iirc
[01:49:54] <iDrougge> zr: The WWW is a solution for distributing hypertext. Didn't prevent people from writing video editors in it.
[01:50:17] <zr> manicennui: you might find them by browsing some stuff from SDF or tildeverse on their HTTP websites
[01:50:28] <zr> iDrougge: Gemini is *not* extensible in the same way that HTML is.
[01:50:30] <gerikson> if there were good Gemini plugins for modern browsers... I might be more interested
[01:50:37] <zr> there are gemini gateways
[01:50:44] <zr> but you shouldn't be bothering about it, lol
[01:51:01] <iDrougge> companion_cube: Let's say the WWW made its public debut in 1992. By 1995, Netscape had turned it into something else.
[01:51:12] <iDrougge> And we're still recovering.
[01:51:53] <zr> Was that a mis-ping?
[01:51:59] <companion_cube> that's crazy
[01:52:08] <companion_cube> so js was invented less than 3 years after the web?
[01:52:21] <manicennui> The web came before the public Internet.
[01:52:44] <manicennui> I think.
[01:52:58] <iDrougge> Depends on your definition.
[01:53:39] <iDrougge> companion_cube: Roughly three years. Difficult to say when WWW debuted.
[01:53:49] <companion_cube> still, impressive
[01:53:51] <companion_cube> (and sad)
[01:53:59] <manicennui> But we can definitely agree that Brendan Eich ruined the web and programming.
[01:54:01] <manicennui> =P
[01:54:08] <manicennui> And he knew better!
[01:54:32] <companion_cube> that's a lot of stuff to ruin, wow
[01:54:43] <iDrougge> manicennui: Yes.
[01:54:47] <companion_cube> like saying that gerikson ruined shit, posts, and space capsules
[01:55:07] <iDrougge> But the blame should only be on him for stupid Javascript things like break in switch cases.
[01:55:26] <iDrougge> The blame for Javascript's destroying the web should be placed on the industry.
[01:55:39] <iDrougge> He alone couldn't have forced anyone to use the language.
[01:55:50] <manicennui> The only real alternatives were VBScript and Flash?
[01:56:10] <gerikson> there's always been a pressure for more stuff in the browser
[01:56:11] <companion_cube> lua is from 1993 !
[01:56:13] <iDrougge> The real alternative would be Gemini.
[01:56:20] <companion_cube> (well… probably not known back then)
[01:56:24] <gerikson> it simplifies sofware distribution enormously
[01:56:26] <manicennui> companion_cube: Did anyone have a popular browser with Lua support though?
[01:56:33] <companion_cube> wasn't Tcl a thing back then, btw?
[01:56:34] <zr> Well, back then you could do impressive stuff in VBScript (looks at FogBugz)
[01:56:40] <zr> companion_cube: it was iirc?
[01:56:43] <companion_cube> manicennui: no no, I'm just saying, JS could have never been a thing
[01:56:53] <manicennui> companion_cube: Many languages existed, but few ere really available as an option in browsers.
[01:56:55] <iDrougge> But seriously, if the IT industry is so stuck on a path dependency from 1995, it should never claim to "disrupt" anything.
[01:57:08] <mockturtle> Examining Computer Science Education [audio education] (lim) https://lobste.rs/s/5bss9u
[01:57:15] <manicennui> Although MS actually allowed a number of languages to implement scripting language engines.
[01:57:33] <manicennui> iDrougge: Disrupt doesn't mean "make better".
[01:57:38] <companion_cube> ^
[01:58:03] <companion_cube> in games, if you hear "disruption field", you don't jump in enthusiastically
[01:58:06] <companion_cube> :p
[01:58:11] <iDrougge> manicennui: No, but it entails changing an industry set in its way.
[01:58:14] <pe> People stick to the familiar, building new things is hard and getting others to adopt it even harder.
[01:58:16] <manicennui> companion_cube: Maybe you don't...
[01:58:24] <companion_cube> I press save first, ok
[01:58:40] <companion_cube> maybe the web browser industry is ripe for disruption
[01:58:44] <companion_cube> by WEB ASSEMBLY
[01:58:46] * pe types this on Dvorak Simplified Keyboard on an ortholinear split keyboard
[01:58:50] <companion_cube> and rust
[01:58:52] <companion_cube> ofc
[01:58:55] <manicennui> I think the people using Gemini are doing exactly the right thing: not worrying about pleasing everyone.
[01:59:00] <manicennui> It scratches their itch.
[01:59:02] <iDrougge> Building Javascript took 10 days, building its replacement will take 100 years.
[01:59:04] <manicennui> It doesn't need to take over the web.
[01:59:17] <manicennui> iDrougge: Arc?!
[01:59:24] <companion_cube> ohno
[01:59:29] <mockturtle> add Model.update! that is similar to Model.update but raises exceptions [ruby] (dorianmariefr) https://lobste.rs/s/ikdib3
[01:59:34] <iDrougge> Arc?
[01:59:34] <manicennui> Or will it be PG's language that starts with some later letter?
[01:59:38] <zr> Bel
[01:59:53] <manicennui> Maybe he'll finally get it right with Q.
[02:00:16] <companion_cube> GrahamScript
[02:00:19] <gerikson> Arc
[02:00:22] <gerikson> Bek
[02:00:23] <companion_cube> if he takes his time, pgscript
[02:00:24] <gerikson> *Bel
[02:00:30] <iDrougge> Wasm isn't really fixing anything, it is only tying us closer to the shit platform that is the browser.
[02:00:32] <gerikson> wonder what's on C
[02:00:40] <manicennui> iDrougge: PG wrote some puff piece about creating a language that will last a century, then later released Arc, which is like Scheme with a few extra macros.
[02:00:41] <gerikson> CDR
[02:00:45] <gerikson> lisp it up
[02:00:50] <iDrougge> Oh, that Arc. The one that Hacker News is written in.
[02:01:05] <companion_cube> the language that will endure a thousand years
[02:01:18] <companion_cube> also some interesting undertones
[02:01:25] <manicennui> You know, PG could very easily create a real cult.
[02:01:26] <iDrougge> I was just thinking of those.
[02:01:33] <manicennui> He has enough cult-like followers already.
[02:01:41] <manicennui> He should go all L. Ron Hubbard.
[02:01:54] <technomancy> odd that you think he hasn't already
[02:02:09] <edk> they don't seem as organised as a cult needs to be
[02:02:10] <companion_cube> the problem is, where is he going to find attractive female followers
[02:02:16] <manicennui> Especially with those incentives that some idiot governments have crated for tech companies to take over cities.
[02:02:22] <companion_cube> cause the usual HN crowd doesn't provide this kind of cult leader perks
[02:02:34] <manicennui> s/crated/created/
[02:02:40] <edk> manicennui: it's impossible to look at san francisco and not feel ill
[02:02:48] <manicennui> edk: I don't mean that.
[02:03:15] <edk> take that as a free opinion, then
[02:03:37] *** Quits: talos2 (~mhj@2601:580:c200:b830:418:e421:b1e:e6c5) (Remote host closed the connection)
[02:03:39] <manicennui> There were those tax incentives or whatever for companies to almost literally take over cities.
[02:03:50] <manicennui> I can't think of a specific example...
[02:04:02] *** Joins: talos2 (~mhj@2601:580:c200:b830:a3b7:6209:5e28:46d0)
[02:04:51] <manicennui> https://www.govtech.com/smart-cities/tech-companies-could-soon-have-their-own-cities-to-run.html
[02:04:51] <mockturtle> [ Tech Companies Could Soon Have Their Own Cities to Run ] - www.govtech.com
[02:05:06] *** Quits: fro (fro@humpty.dance) (Quit: EPIC5-2.1.5[1945] - amnesiac : Are we there yet?)
[02:05:45] <manicennui> https://cities-today.com/nevada-innovation-zones-plan-scaled-back/
[02:05:46] <manicennui> Damn.
[02:05:52] <mockturtle> [ Nevada Innovation Zones plan scaled back - Cities Today - Connecting the world’s urban leaders ] - cities-today.com
[02:05:54] <pe> Anarchocapitalism, at last.
[02:05:58] <manicennui> We'll have to wait for our tech giant dystopias.
[02:06:52] <manicennui>  Isn't this essentially what the British Empire used to do?
[02:07:08] <manicennui> Just, in other people's countries.
[02:07:29] <companion_cube> :D damn
[02:08:25] <pe> Those companies wouldn't have much power, would they, anyway.
[02:08:52] <manicennui> The government ought to do something about streaming services putting shows in "new releases" that weren't actually released recently.
[02:09:14] <manicennui> Stupid Netflix teasing me with Ozark, and Amazon teasing me with Bosch.
[02:09:21] <iDrougge> The colonial empires were just extensions of the private enterprises that were East Indies Companies.
[02:09:39] <companion_cube> new releases: C++11
[02:09:45] <manicennui> iDrougge: The colonies in North America were basically charters given to rich people to run.
[02:10:21] <iDrougge> They were?
[02:10:25] <manicennui> Pretty sure it was basically "go run this thing and in exchange provide us with taxes".
[02:10:53] <manicennui> https://en.wikipedia.org/wiki/Colonial_charters_in_the_Thirteen_Colonies
[02:10:53] <mockturtle> [ Colonial charters in the Thirteen Colonies - Wikipedia ] - en.wikipedia.org
[02:10:59] <iDrougge> That makes sense. There was little point in directly running the resource-poor northern parts of America.
[02:10:59] <rwb> ##crustaceans
[02:11:20] <manicennui> "Colonial charters were approved when the king gave a grant of exclusive powers for the governance of land to proprietors or a settlement company. The charters defined the relationship of the colony to the mother country as free from involvement from the Crown. For the trading companies, charters vested the powers of government in the company in England."
[02:12:10] <iDrougge> Well, it's off-topic.
[02:13:17] <manicennui> Sure, dropped.
[02:17:15] *** Joins: fro (fro@humpty.dance)
[02:37:39] *** Joins: soczol (~soczol@user/soczol)
[02:40:46] *** Joins: jaevanko (~jaevanko@2600:1700:1330:2bef:5548:773a:cf10:a3a1)
[02:46:11] <manicennui> Composition seems like a fundamental concept that is a bit of a super power, but it also seems super ambiguous, mostly due to how it is used in OO.
[02:46:23] <manicennui> Like is a method/function that calls other methods/functions composition?
[02:46:42] <manicennui> In OO it seems to mean some form of delegation.
[02:47:19] <manicennui> It seems clearest in functional languages that have a concrete "compose" function.
[02:47:59] *** Joins: jmw (~jmw@user/jmw)
[02:48:40] <manicennui> Many web frameworks also clearly use composition really well: each layer/handler takes a request and the response so far and returns a new version of the response.
[02:49:15] <manicennui> This is kind of the pattern I'm using for something at work, where we have very simple components that all return output that meets the same contract.
[02:49:26] <manicennui> And they can be rearranged in any order.
[02:49:31] <manicennui> Or added/removed.
[02:49:59] <manicennui> I just can't wrap my head around what the fundamental functionality is that gives this pattern/idea its power.
[02:50:02] *** Quits: river (~river@tilde.team/user/river) (Quit: Leaving)
[02:50:13] <manicennui> It seems far less powerful when implemented as delegation in OO for some reason.
[02:51:00] <manicennui> But it makes a bit more sense if I think of a new class as the composition of the parent class, some delegation classes, and some new functionality. Maybe it is just the syntax.
[02:52:40] <bsandro> manicennui: i'm using it data-wise, seems to work pretty well
[02:52:41] <manicennui> Composing a type out of traits with default implementations seems a bit cleaner.
[02:52:47] <manicennui> Data-wise?
[02:53:22] <bsandro> yeah it is something in the middle I guess between pure data and program archtecture
[02:53:52] <meff[m]> manicennui: heh the OO dream was all about composing things declaratively in a config file, like Java beans
[02:53:58] <bsandro> objects defined in database ('interactives') contain one or more 'aspects' on it that defines its role in the app
[02:54:15] <meff[m]> well okay not "the OO dream" but the "Java OO dream" which was probably in C++ as well
[02:54:42] <manicennui> C++'s dream seemed to be structs with function pointers.
[02:54:52] <manicennui> Now it has 1500 different dreams.
[02:55:17] <meff[m]> lol indeed
[02:55:18] <bsandro> c++ dream was an every possible initialization imaginable
[02:55:29] <meff[m]> C++ is the kitchen sink
[02:55:32] <manicennui> bsandro: Is there some article or something about data-wise?
[02:55:38] <ngoldbaum> the dream
[02:55:39] <manicennui> When I search for it I find something unrelated.
[02:56:54] <bsandro> manicennui: i honestly don't know. imo that is a general concept in any case and applicable in wide number of cases
[02:57:02] <manicennui> Ah.
[02:57:24] <bsandro> can try to do write up sometime, maybe could be useful to someone
[02:58:03] <drakonis> ah, ocaml 4.13 is nearly upon us
[02:58:10] <drakonis> then its time for 5.0
[02:58:15] <bsandro> in any case you either build or generate wrappers for that database structures so it transfers into code anyway
[02:58:37] <drakonis> https://github.com/ocaml/opam-repository/issues/18791 ho ho ho
[02:58:38] <mockturtle> [ OCaml 4.13 Release Readiness · Issue #18791 · ocaml/opam-repository ] - github.com
[03:02:50] *** Joins: rafael6 (~rafael@user/rafael)
[03:05:18] *** Quits: rafael (~rafael@user/rafael) (Ping timeout: 272 seconds)
[03:05:18] *** rafael6 is now known as rafael
[03:06:37] *** Quits: jmw (~jmw@user/jmw) (Quit: jmw)
[03:09:13] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[03:10:20] <meff[m]> how are the Effects coming along in Ocaml?
[03:10:24] <meff[m]> and the new parallelism stuff
[03:10:54] <manicennui> Someone posted a link to it earlier.
[03:11:10] <manicennui> https://discuss.ocaml.org/t/multicore-ocaml-may-2021/7990
[03:11:11] <mockturtle> [ Multicore OCaml: May 2021 ] - discuss.ocaml.org
[03:11:18] <manicennui> It's on the front page of lobsters.
[03:12:41] <bsandro> ooooh ebiten now supports nintendo switch, so nice (not sure how many people here are into gamedev but still)
[03:15:00] <manicennui> More importantly, it supports the ultimate gaming platform: FreeBSD.
[03:15:12] <mockturtle> Demystify SwiftUI [video ios mac swift] (kevinc) https://lobste.rs/s/8liqo2
[03:18:18] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 264 seconds)
[03:19:56] <iDrougge> manicennui: I interpret composition as either (in very OO languages) mixins or (in multi-paradigm languages) the use of interfaces and "protocol extensions" as well as embedding objects within each other.
[03:20:24] <iDrougge> The delegate pattern of Cocoa could also fit in here.
[03:20:57] *** Quits: tex (~super@user/dix) (Ping timeout: 244 seconds)
[03:21:24] <manicennui> None of those things are as nice as function composition though.
[03:21:31] <iDrougge> <manicennui> Composing a type out of traits with default implementations
[03:21:41] <iDrougge> Protocol extensions in Swift parlance.
[03:24:14] <iDrougge> Function composition as in ƒ(ƒ1() -> T, ƒ2() -> U) -> ƒ() -> V?
[03:27:08] <manicennui> I believe so. I'm not completely familiar with that sort of type notation.
[03:27:21] <manicennui> https://www.johndcook.com/blog/2011/07/19/you-wanted-banana/
[03:27:22] <mockturtle> [ You wanted a banana but you got a gorilla holding the banana ] - www.johndcook.com
[03:27:33] <manicennui> "You wanted a banana but what you got was a gorilla holding the banana and the entire jungle."
[03:27:34] <manicennui> hah
[03:28:27] <manicennui> iDrougge: https://clojuredocs.org/clojure.core/comp
[03:28:28] <mockturtle> [ comp - clojure.core | ClojureDocs - Community-Powered Clojure Documentation and Examples ] - clojuredocs.org
[03:30:06] <manicennui> I actually like Ocaml's pipeline operator and Clojure's threading macro even more in many cases.
[03:30:35] <iDrougge> Well, so ƒ(ƒ(T) -> U, ƒ(U) -> V) -> ƒ(T) -> V
[03:30:56] <iDrougge> Forgot a parenthesis, of course.
[03:31:11] <iDrougge> But I don't know why it would be nicer to compose functions than objects.
[03:31:31] <manicennui> Because in practice, in most popular languages, it just is for some reason.
[03:32:23] <manicennui> Even if you don't explicitly use inheritance, you are generally inheriting some basic Object class.
[03:32:55] <manicennui> Then if you are using has-a in most OO languages, it feels more like a hack.
[03:33:47] <manicennui> Mixins are a bit cleaner in some ways, but you still basically have a composition of an inherited super class, plus your new class, plus the mixin, and the three things are done in three different ways.
[03:34:14] <manicennui> It is very easy in most cases for each thing to behave differently when composed than when separate.
[03:34:26] <manicennui> And very common for the pieces not to be usable at all separately.
[03:34:29] *** Quits: x64k (~x64k@185.65.135.232) (Ping timeout: 272 seconds)
[03:34:36] <manicennui> For instance mixins.
[03:34:39] <iDrougge> Yes, but from a platonic perspective, it doesn't have to be that way.
[03:34:59] <manicennui> Is there an example of a language where it isn't?
[03:35:00] <iDrougge> Some languages have very thick Object classes, some have very thin ones.
[03:35:09] <manicennui> Prototypical languages seem close.
[03:36:32] *** Quits: cepi (~cepi@cm-84.209.137.56.getinternet.no) (Quit: Client closed)
[03:36:39] <iDrougge> Swift structs don't inherit anything. You can print them to get the type name, but that's a debugging feature.
[03:37:02] <manicennui> I mean, you can say the same for C structs.
[03:37:19] <iDrougge> Structs can't inherit. But they can implement protocols (interfaces/traits).
[03:38:04] *** Joins: shapr (~user@pool-108-28-144-11.washdc.fios.verizon.net)
[03:40:06] *** Joins: metadaemon (~metadaemo@user/metadaemon)
[03:40:37] <manicennui> Similar to Go?
[03:41:17] <iDrougge> Probably. Or Rust.
[03:41:47] <manicennui> I feel like there is data composition and behavior composition. Many OO languages attempt to combine both in overly complex ways. Go doesn't truly combine the two. It just provides some sugar to create behavior where a specific type is one of the parameters.
[03:42:31] <iDrougge> `struct S { let a: Int }` has the same shape as an equivalent C struct. But you can extend it with `extension S: Hashable {}` to make it hashable using the default (synthesised) implementation.
[03:43:16] <manicennui> That seems similar to Derive in Rust.
[03:43:24] <iDrougge> Yes.
[03:43:35] <iDrougge> Go is essentially duck-typed when it comes to interfaces.
[03:43:49] <manicennui> I think I've managed to figure out what I wanted to know.
[03:44:03] <manicennui> Which explains why certain languages appeal to me more.
[03:45:08] <iDrougge> Go occupies an uncomfortable middle ground between totally dynamic languages and static languages.
[03:45:37] <technomancy> all the safety guarantees of a dynamically typed language and all the convenience of a static language
[03:46:16] <iDrougge> And the expressiveness of C.
[03:46:19] *** Quits: belak51 (~belak@66.175.222.59) (Changing host)
[03:46:19] *** Joins: belak51 (~belak@user/belak)
[03:46:29] *** Quits: belak51 (~belak@user/belak) (Quit: ZNC 1.8.2 - https://znc.in)
[03:46:38] *** Joins: belak (~belak@66.175.222.59)
[03:46:45] <manicennui> At least Go provides the same level of guarantee at compile and runtime. Typescript requires one to deal with both separately.
[03:46:46] *** Quits: belak (~belak@66.175.222.59) (Changing host)
[03:46:46] *** Joins: belak (~belak@user/belak)
[03:47:00] <manicennui> I think this is an area where static typing fans are a bit blind.
[03:47:06] <manicennui> Most of the input to your program is not static.
[03:47:13] <manicennui> Your program must have runtime checks.
[03:47:28] *** Quits: MerchantOfVenice (~patrick@user/merchantofvenice) (Quit: Konversation terminated!)
[03:47:30] <mouseghost> technomancy, wait wha...
[03:47:44] <technomancy> best not to think too hard about it
[03:47:47] *** Quits: loc (~loc@174-045-102-241.res.spectrum.com) (Ping timeout: 272 seconds)
[03:47:49] <iDrougge> At least Typescript has a (somewhat) valid excuse for its shortcomings.
[03:48:36] <iDrougge> My static programs have runtime checks that are either synthesised due to the type system or construct a guaranteed-valid object.
[03:48:38] <manicennui> Sure, but it makes things almost worse.
[03:49:51] <mouseghost> what is the goto language for parsing wysiwyg made websites >~>?
[03:50:08] <iDrougge> V8.
[03:50:52] <mouseghost> am not buying into js >~>
[03:50:56] <iDrougge> Isn't a parser a typical example of a type system?
[03:51:13] <mouseghost> hm
[03:51:19] *** Quits: jaevanko (~jaevanko@2600:1700:1330:2bef:5548:773a:cf10:a3a1) (Quit: Leaving)
[03:51:42] <iDrougge> You transform input into types. Of course, given HTML in the wild, you would need many transformations before arriving at your final AST.
[03:52:36] <mouseghost> i think its more of machine learning job
[03:53:20] <iDrougge> If you're pragmatic, perhaps.
[04:01:43] *** Quits: dialtone_ (~dialtone@135-180-111-143.fiber.dynamic.sonic.net) (Ping timeout: 272 seconds)
[04:09:02] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[04:11:25] *** Quits: soczol (~soczol@user/soczol) (Ping timeout: 272 seconds)
[04:12:19] *** Quits: afon (~afon@c-73-32-240-117.hsd1.tx.comcast.net) (Read error: Connection reset by peer)
[04:14:45] <companion_cube> manicennui: you can have runtime checks driven by the type system
[04:14:56] <companion_cube> like iDrougge says
[04:15:14] <manicennui> companion_cube: Of course.
[04:15:14] <companion_cube> and once you've parsed at interfaces, you get proper types internally
[04:16:07] <companion_cube> my colleagues do that with a Elm-like library of encoders, quite manual
[04:16:17] <companion_cube> but there's also ways of having codegen do it for you, à la deriving
[04:17:21] <manicennui> I think some people believe that everything will run flawlessly with statically type languages, but don't consider the fact that most input will come from users or external systems.
[04:18:22] <manicennui> Of course most statically typed languages will check types at runtime as well, but at that point, they are on equal footing with dynamic languages, which have the same capabilities, even if less convenient.
[04:18:49] *** Quits: maahl (~maahl@cm-84.209.53.232.getinternet.no) (Ping timeout: 272 seconds)
[04:21:24] <companion_cube> I'm talking from the point of view of a language without runtime checks
[04:21:31] <companion_cube> but it's the whole "parse, don't validate" stuff
[04:21:44] <companion_cube> the input is never used as is, but transformed into proper types
[04:23:14] <manicennui> Most dynamic languages have optional runtime checking.
[04:23:18] <manicennui> But most people don't use it.
[04:23:55] <manicennui> And it is rarely as straightforward as a single keyword.
[04:24:11] <companion_cube> oh sure
[04:24:23] <companion_cube> wait
[04:24:27] <companion_cube> did you mean static languages
[04:24:32] <manicennui> No.
[04:24:43] <companion_cube> most dynamic languages have mandatory runtime checking, no ? :p
[04:24:53] <manicennui> No.
[04:25:00] <manicennui> Most of them rely on ducktyping.
[04:25:10] <manicennui> Meaning as long as I can call this method, I don't care what it is.
[04:25:40] <manicennui> But I could certainly add a guard clause in a Ruby method to return immediately if an argument is not the right type.
[04:25:45] <manicennui> Pretty common to do this to check for nils.
[04:26:18] *** Quits: belak (~belak@user/belak) (Quit: ZNC 1.8.2 - https://znc.in)
[04:26:19] <manicennui> Less so to check the actual types.
[04:26:22] <companion_cube> I think elixir does it the other way, even
[04:26:30] <companion_cube> you write clauses with explicit types
[04:26:30] *** Joins: belak (~belak@user/belak)
[04:26:35] <companion_cube> and if no clause matches, if fails
[04:27:03] <companion_cube> anyway, one would argue that for json, for example, dynamic languages will typically parse that into their unitype (dict/list/atomic types)
[04:27:03] <manicennui> I assume its type system is pretty similar to Erlang's.
[04:27:10] <companion_cube> and then manipulate that directly
[04:27:13] <companion_cube> yes
[04:27:26] <companion_cube> whereas in static languages one tends to parse into cookie cutter types for each schema
[04:27:50] <manicennui> That's not really what is happening in dynamic languages though.
[04:28:20] <manicennui> Most languages don't have a variant type like VB.
[04:28:28] <manicennui> JSON only supports a few types.
[04:29:05] <manicennui> Collection/container types in dynamic languages just tend to be more relaxed.
[04:29:28] <manicennui> It would be more like defining a hashmap where the keys can be one of 15 types.
[04:29:30] <manicennui> But they are typed.
[04:29:32] <belak> Is there anything like gRPC that's less clunky to use?
[04:29:39] <manicennui> If you check their type at runtime it is not "generic type".
[04:30:12] <companion_cube> it might be JSONObject or JSONArray or whatever
[04:30:27] <companion_cube> the "unitype" thing is more tongue in cheek, although I still find the argument credible :p
[04:30:28] <manicennui> In most languages I have used it is the default dict/hash/whatever type.
[04:30:31] <companion_cube> yep
[04:30:43] <manicennui> Which is not a "unitype".
[04:31:10] <companion_cube> depends on whether you accept that runtime types are actually "types"
[04:31:19] <companion_cube> or just some runtime info that should really be named differently :)
[04:32:32] <manicennui> irb(main):001:0> foo = {"asf" => 1, jkl: 2}
[04:32:36] <manicennui> irb(main):003:0> foo.class
[04:32:36] <manicennui> => Hash
[04:32:36] <manicennui> irb(main):004:0> foo.keys.map {|k| k.class}
[04:32:36] <manicennui> => [String, Symbol]
[04:33:38] <manicennui> Are you gatekeeping types?
[04:34:27] *** Quits: shapr (~user@pool-108-28-144-11.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[04:34:51] <companion_cube> https://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/
[04:34:52] <mockturtle> [ Dynamic Languages are Static Languages ] - existentialtype.wordpress.com
[04:34:55] <companion_cube> that's the original one
[04:35:13] <companion_cube> I think it's provocative, but technically, that's how I see dynamic languages too
[04:35:25] <manicennui> I really think it boils down to static/dynamic, a scale of weak to strong, and thing like what crazy implicit conversions the language does.
[04:35:36] *** Quits: home (~home@user/home) (Remote host closed the connection)
[04:35:38] <companion_cube> (and that's why I don't really consider, say, python to be typed)
[04:35:44] <companion_cube> (despite it using the word)
[04:36:10] <companion_cube> (well, with mypy, kind of. ugh)
[04:37:09] <fro> (ok)
[04:37:56] *** Quits: blaklistd (~blaklistd@user/blaklistd) (Read error: Connection reset by peer)
[04:38:45] <companion_cube> (hi)
[04:39:23] <companion_cube> manicennui: another point of view I also hold (being a bit inconsistent here)
[04:39:28] <companion_cube> is that dynamic languages only have types on values
[04:39:34] <manicennui> companion_cube: I don't understand this argument.
[04:39:36] <companion_cube> whereas static languages have types on expressions
[04:39:38] <manicennui> There is no unitype.
[04:39:49] <companion_cube> statically speaking, there is
[04:39:59] <companion_cube> it's "whatever", and always trivially typechecks :)
[04:40:01] <manicennui> You can in fact check that something is an int at runtime in most dynamically typed languages.
[04:40:09] <manicennui> And you can create types that only exist at runtime.
[04:40:27] <manicennui> VB's variant is a unitype, but that is not at all what most languages are using.
[04:40:41] <companion_cube> object is a unitype
[04:40:51] *** Joins: home (~home@user/home)
[04:41:13] <companion_cube> what you call type, Harper might call a runtime tag
[04:41:37] <companion_cube> it's kind of a different thing, really, you can have one without the other
[04:41:50] <companion_cube> (or both, like java)
[04:41:56] <manicennui> How is that different from saying that all types in dynamic languages are just chunks of memory, and you are "tagging" them?
[04:42:02] <manicennui> Err.
[04:42:04] <companion_cube> sure
[04:42:06] <manicennui> s/dynamic/static/
[04:42:15] <companion_cube> you don't necessarily tag them
[04:42:17] <manicennui> And in C, this is almost literally true.
[04:42:23] <companion_cube> they're tagged by the type checker at compile time
[04:42:27] <companion_cube> in C you have 0 tags
[04:42:32] <companion_cube> that's why it's so unsafe :D
[04:42:38] <companion_cube> even the unions are untagged 😱
[04:43:11] <manicennui> I don't know. I don't buy any of this.
[04:43:16] <manicennui> Seems like games with semantics.
[04:43:19] <companion_cube> but `a+b` will not do runtime check because there's no way of doing runtime checks anyway
[04:43:31] <companion_cube> I mean, C has literally 0 runtime type information
[04:43:40] <companion_cube> (it also doesn't have the best type system, but well)
[04:44:16] <companion_cube> I mean we're debating the meaning of the word "type", of course there's going to be semantics :D
[04:44:51] <manicennui> But it doesn't seem like an important distinction. It literally seems like using semantics to find yet another way to deprecate dynamically typed languages.
[04:45:32] <companion_cube> 🤷
[04:46:01] <companion_cube> or despise them, maybe
[04:46:44] <manicennui> There are many dynamically typed languages that I would put far, far ahead of many popular statically typed languages when it comes to preventing actual problems.
[04:46:58] <companion_cube> if we compare clojure to C, I'm on board
[04:47:10] <manicennui> I like static typing, but also find it extremely inconvenient in many cases, and it only solves a very small number of real world problems.
[04:47:23] <manicennui> Clojure was definitely the language I had in mind for the dynamic side.
[04:47:40] <manicennui> With a large number of algol inspired languages on the other side.
[04:48:17] <companion_cube> fair enough
[04:48:19] <manicennui> The only common "type" problem we experience in our massive Rails codebase is nils.
[04:48:27] <manicennui> Which also exists in a large number of statically typed languages.
[04:48:30] <companion_cube> never any arity mismatch? :p
[04:48:41] <manicennui> Not really in production.
[04:48:43] <companion_cube> another thing is that types are better if you model with them
[04:48:57] <companion_cube> if you go beyond just int/string/list or whatever
[04:49:06] <manicennui> Not saying it never has happened, but as a percentage, it is basically a rounding error.
[04:49:26] <companion_cube> but I don't think dynamic languages have a good counterstory to "make illegal states irrepresentable" except for gigantic amounds of tests
[04:49:50] *** Quits: leah2 (~leah@vuxu.org) (Read error: Connection reset by peer)
[04:49:50] <manicennui> The vast majority of business software problems are two things: problem with requirements, or logic problem in the code.
[04:50:28] *** Quits: home (~home@user/home) (Remote host closed the connection)
[04:50:28] <companion_cube> https://queue.acm.org/detail.cfm?id=2038036
[04:50:30] <mockturtle> [ OCaml for the Masses - ACM Queue ] - queue.acm.org
[04:50:41] <companion_cube> yeah, well, types can prevent a bunch of logic problems too
[04:50:42] <technomancy> there's always the good old racket/erlang approach of "make illegal states representable by omitting nil from your entire language semantics"
[04:50:44] <companion_cube> (not all of them ofc)
[04:50:48] <technomancy> *irrepresentable
[04:50:51] <manicennui> It's not actually difficult to implement state machines in dynamic languages.
[04:50:59] <companion_cube> but you can't check them 🤷
[04:51:09] *** Quits: pacbard (~pacbard@user/pacbard) (Quit: ZNC 1.8.2 - https://znc.in)
[04:52:00] <manicennui> Again, while I agree that static types are nice, you are talking about a not insignificant amount of additional effort and code, with some real downsides, to deal with a tiny portion of problems I have seen in my career.
[04:52:32] *** Joins: home (~home@user/home)
[04:52:50] <companion_cube> I mean, defining a few types is a lot less efforts than writing tests
[04:52:53] <manicennui> And the downsides generally involve data serialization/deserialization, which are *extremely* common things to do.
[04:53:14] <companion_cube> idk, seems to me like `deriving` and friends are good answers to that?
[04:53:17] <manicennui> The types of tests that types replace do not catch the two biggest areas of problems.
[04:53:22] <technomancy> manicennui: I think rather than serialization/deserialization it's better to frame it in terms of "edges of the system"
[04:53:59] <technomancy> serialization/deserialization is how the boundaries of the system are usually crossed
[04:54:07] <manicennui> companion_cube: The strictness of statically typed languages IS the problem when it comes to seralization/deserialization, not the amount of extra code I have to write or anything.
[04:54:08] <technomancy> but it's not the serialization itself; it's the system boundary
[04:54:08] *** Joins: arcatech (~arcatech@user/arcatech)
[04:54:24] <manicennui> Go has possibly the worst answer here.
[04:54:53] *** Joins: pacbard (~pacbard@user/pacbard)
[04:54:58] <manicennui> You either deal with its default types, which can lead to incorrect data, or you use pointers and write nil pointer checking everywhere.
[04:55:13] <manicennui> s/default types/default values/
[04:55:55] <companion_cube> idk, I'm thinking of like Serde, or https://github.com/ocaml-ppx/ppx_deriving_yojson
[04:55:55] <mockturtle> [ ocaml-ppx/ppx_deriving_yojson ] - github.com
[04:56:10] <companion_cube> you can add {strict=false} to allow unknown keys
[04:56:38] <manicennui> companion_cube: I don't want just unknown keys. Sometimes I still want to process the data even if one key is the "wrong type".
[04:57:13] <manicennui> I think Rich Hickey has done a good job of talking about this problem with static type systems.
[04:57:16] <companion_cube> that's quite sloppy :/
[04:57:39] <manicennui> A customer type might be composed of 15 types, but my function might only care about 2 of them.
[04:58:00] <manicennui> Do I endlessly divide all types into smaller types that I can use for specific functions?
[04:58:03] <companion_cube> so write the record with 2 types
[04:58:11] <companion_cube> unless you parse it in one entrypoint
[04:59:12] <companion_cube> his talk on "maybe not" is disingenuous at places
[04:59:16] <companion_cube> he does make some good points
[04:59:19] <companion_cube> but others, nope
[04:59:37] <companion_cube> (like, if i change a type, I *do* want to edit all the places of  the code that are affected, thank you very much)
[04:59:54] <manicennui> That's easy to say when your types are only used in one piece of software.
[05:00:14] <manicennui> The reality today is that they are probably used by multiple services, if not half the Internet.
[05:00:57] <manicennui> I've seen this in practice with protobufs where I work.
[05:01:24] <manicennui> The shared types get updated frequently, which means you end up having to update your dependencies and have processes to regenerate the types in your system.
[05:01:44] <technomancy> protobuf is kind of a straw man for static type systems tho
[05:01:46] <manicennui> And you have a bunch of things that some systems have no way of knowing, so they have to allow nil.
[05:02:12] <technomancy> I mean, no one who's actually done their homework on type systems would design a system like protobufs
[05:02:26] <companion_cube> ^
[05:02:26] *** Quits: home (~home@user/home) (Remote host closed the connection)
[05:02:44] <manicennui> Some of the same problems exist no matter what you use.
[05:02:56] *** Joins: home (~home@user/home)
[05:02:57] <manicennui> Unless you just set everything to Maybe<T>.
[05:03:14] <technomancy> I mean, yeah it's hard to evolve types over time in a distributed system; sure
[05:03:21] <technomancy> but it's not hard to do better than protobufs
[05:03:40] <manicennui> Do you think someone has?
[05:04:07] <companion_cube> unison maybe? :D
[05:04:15] <technomancy> I can't point to specifics; I work in Clojure all day =P
[05:04:21] <companion_cube> it's a good question, because you have to aim for the lowest common denominator
[05:04:52] <technomancy> I don't know if someone's designed a better system that is as widely deployed as protobufs
[05:04:56] <companion_cube> I think if you mostly shuffle stuff around, clojure must be great
[05:05:10] <technomancy> companion_cube: it's definitely not where our pain points are
[05:05:13] <companion_cube> but if you do non trivial stuff wit hthe types internally, then the balance is different
[05:05:21] <manicennui> I think you are always going to run into cases where you either need to allow for many values to be nil/maybe<t>, or you are going to have to divide everything up into a dozen smaller groupings for different purposes.
[05:05:29] <technomancy> companion_cube: the largest codebase I deal with regularly is like 5kloc
[05:05:53] <technomancy> things are spread out over several codebases and we do heavy typechecks at all system boundaries
[05:06:13] <manicennui> companion_cube: I think most business software is essentially shuffling shit around.
[05:06:16] <technomancy> oh damn; I lied. it's up to 8.2kloc now
[05:06:30] <manicennui> Do you use spec for checking?
[05:06:35] <technomancy> but it's been really hard to enforce functional-core/imperative-shell as the team grows
[05:06:36] <manicennui> Or schema?
[05:06:37] <technomancy> manicennui: yeah
[05:06:37] <companion_cube> yeah possible
[05:06:44] <companion_cube> technomancy: that's tiny :D
[05:06:47] <companion_cube> wow
[05:07:21] <technomancy> companion_cube: well, it's the biggest of four or five codebases
[05:07:26] <manicennui> Our monorepo has over a million lines of SQL.
[05:07:27] <technomancy> but yeah
[05:07:41] <manicennui> But most of it is migrations that were applied years ago.
[05:07:54] <manicennui> It's still hundreds of thousands of lines of SQL.
[05:08:03] <c355e3b> I don't want to run sloc at work
[05:08:04] <technomancy> we have a monolith of 100kloc but it's a legacy death trap that everyone avoids; I haven't touched it outside one isolated namespace in over a year
[05:08:10] <manicennui> Plus hundreds of thousands of lines of Ruby.
[05:08:12] <companion_cube> so a statically typed language? :D
[05:08:13] <manicennui> Plus...
[05:08:16] <companion_cube> (one with null, but well)
[05:08:27] <c355e3b> I've been able to cut down the amount of Ruby I have to deal with
[05:08:28] <c355e3b> which is nice
[05:08:29] <manicennui> There is a good rust utility for this...
[05:08:41] <companion_cube> (I'm kidding, because sql really doesn't have much in the way of typing)
[05:08:44] <manicennui> https://github.com/XAMPPRocky/tokei
[05:08:45] <mockturtle> [ XAMPPRocky/tokei ] - github.com
[05:09:06] <manicennui> companion_cube: I fight with PostgreSQL's types all the time.
[05:09:08] <technomancy> I wish SQL made null opt-in instead of opt-out
[05:09:09] <technomancy> oh well
[05:09:28] <manicennui> "There is no function defined for types..."
[05:09:36] <manicennui> Fine, ::text
[05:09:46] <companion_cube> manicennui: also, daily, I work with compiler-libs (so, a compiler as a library)
[05:09:54] <companion_cube> there, types are just… I couldn't live without them
[05:10:03] <companion_cube> I'd just have a nervous breakdown and quit
[05:10:33] <companion_cube> so tjat's quite different than shuffling json on the network, where things are less well defined
[05:10:36] <manicennui> Sure, I'm not advocating dynamic typing everywhere.
[05:10:47] <technomancy> well, you are solving a different problem
[05:10:59] <manicennui> But there are also places like data cleaning where I think static typing would be insanely irritating.
[05:11:09] <manicennui> And for business software, there are arguments to be made both ways.
[05:11:10] <companion_cube> ah, yeah
[05:11:23] <manicennui> I just don't think the case for static types in most business software is as strong as people think it is.
[05:11:24] <companion_cube> well you'd use a `json` type or `csv` type and have to do all checks dynamically
[05:11:33] <manicennui> Most companies don't care *that* much about software quality.
[05:11:51] <companion_cube> I'd argue that the benefit is not quality, but refactorability
[05:12:00] <technomancy> and business software is 90% glue rather than logic
[05:12:21] *** bontaq` is now known as bontaq
[05:12:35] <manicennui> I've come to terms with the bullshit I deal with by realizing that one day I will stop working on it, and I will literally never care about it again.
[05:12:43] <manicennui> It isn't my "legacy" or some such nonsense.
[05:12:51] <manicennui> I just get paid to deal with it.
[05:12:52] *** Quits: mahmutov_ (~mahmutov@5.176.50.18) (Ping timeout: 244 seconds)
[05:12:53] *** Quits: home (~home@user/home) (Remote host closed the connection)
[05:12:57] <indigo> +1 manicennui
[05:12:59] <manicennui> I rather enjoy doing it a bit more.
[05:13:14] <manicennui> But things could be worse.
[05:13:27] *** Joins: SirRippovMaple6 (~SirRippov@70-132-237-80.lightspeed.iplsin.sbcglobal.net)
[05:13:30] *** Joins: home (~home@user/home)
[05:13:39] <c355e3b> I wish people would fix their legacy rails shit though
[05:13:56] <manicennui> I'm also at the point where I'm financially stable enough that I wouldn't be upset if my employer just went out of business tomorrow.
[05:14:01] <indigo> Legacy code (noun): code that makes money for the business and keeps you employed
[05:14:03] <manicennui> I'd prefer that it not be due to something I did.
[05:14:06] <ngoldbaum> is rails still a thing now that basecamp imploded?
[05:14:20] <manicennui> ngoldbaum: Of course.
[05:14:22] <indigo> I'm curious what happened to the Rails core team
[05:14:35] <ngoldbaum> i mean going forward
[05:14:47] <manicennui> Most of us with large Rails codebases couldn't move to something else even if we wanted to.
[05:14:48] <c355e3b> i don't know
[05:14:49] <technomancy> basecamp didn't implode long enough ago to collapse a whole ecosystem
[05:15:18] <manicennui> Basecamp also isn't synonymous with Rails.
[05:15:41] <manicennui> Most of the people I talk to who like Rails don't even know its history. They might have heard of DHH.
[05:15:51] <manicennui> The average person just doesn't hear about all of this drama.
[05:15:54] <technomancy> wow, that's wild
[05:16:12] <technomancy> I was using ruby in 2005 and it's hard for me to imagine that
[05:16:29] <ngoldbaum> maybe rails is the next python2.7, gaining success and mind share by not changing for a long time
[05:16:31] <manicennui> I also live/work in Chicago.
[05:16:38] <technomancy> my first rubyconf they did the thing where you raise your hand if you get paid to write in ruby and it was only 80% or so
[05:16:43] <manicennui> So you would think people would be more aware.
[05:16:47] <technomancy> it was still considered a thing you were lucky to get away with using
[05:16:47] <indigo> I wonder how many current Rails devs have heard of _why
[05:17:00] <manicennui> technomancy: There are tons of Rails jobs here.
[05:17:13] <technomancy> manicennui: the only time I've ever been in chicago was for the first railsconf
[05:17:14] <manicennui> My employer alone has spawned a number of lending companies that use Rails.
[05:17:50] <manicennui> If I wanted to keep doing Rails, I could easily find another job.
[05:18:21] *** Quits: home (~home@user/home) (Ping timeout: 272 seconds)
[05:19:00] <manicennui> I've seen a lot of people put out info on local Rails jobs trying to attract any people who left Basecamp.
[05:19:14] <manicennui> Most of the people there weren't involved in the development of Rails itself though.
[05:20:16] <manicennui> Wouldn't be surprised if companies like Shopify employ more Rails contributors.
[05:21:53] <technomancy> shopify was started by one of the first rails core members wasn't it
[05:22:09] <manicennui> Looking through the Rails core team, it looks like two work for Basecamp and one used to, and there are a couple where it isn't clear where they work.
[05:22:19] <manicennui> At least one shopify developer and one github developer.
[05:22:31] <manicennui> Several people working at other random companies I haven't heard of.
[05:22:54] <technomancy> does rails still have a thing where it can look at your VCS and just run the changes pertaining to things that are new since the last commit?
[05:23:17] <technomancy> I think that was one of my first OSS patches ever, back when it was in SVN
[05:23:20] <manicennui> You mean migrations?
[05:23:24] <technomancy> no
[05:23:36] <manicennui> Oh, you mean dynamically pick up changes?
[05:23:37] <manicennui> Yes.
[05:23:42] <manicennui> In development mode.
[05:23:45] <manicennui> Not production.
[05:24:47] <technomancy> no like you run `rake test:uncommitted` and it only runs a subset of the tests, the ones for the things that haven't been checked in yet
[05:24:48] *** Joins: jmw (~jmw@user/jmw)
[05:26:31] <manicennui> https://guides.rubyonrails.org/autoloading_and_reloading_constants_classic_mode.html#constant-reloading
[05:26:32] <mockturtle> [ Autoloading and Reloading Constants (Classic Mode) — Ruby on Rails Guides ] - guides.rubyonrails.org
[05:26:54] <manicennui> Oh, yeah, there are a couple of tools for that.
[05:27:31] <manicennui> Unfortunately I work on a "legacy" codebase that is in an ancient version of Rails, so we don't have the nice toys.
[05:27:38] <mockturtle> Public key cryptography: OpenSSH private keys [crypto] (calvin) https://lobste.rs/s/o3elkr
[05:28:03] <technomancy> manicennui: apparently it was added in 3.0; is that ancient enough for you? =) https://raw.githubusercontent.com/rails/rails/3-0-stable/railties/CHANGELOG
[05:28:22] <technomancy> grep down for technomancy
[05:28:45] <manicennui> Nope.
[05:28:52] <technomancy> wow
[05:28:56] <manicennui> We are on 2.3 LTS (commercially maintained).
[05:29:06] <technomancy> http://oldasballs.com
[05:29:06] <mockturtle> [ Old as balls ] - oldasballs.com
[05:29:19] <technomancy> that's like... a version I've actually used
[05:29:36] <manicennui> When I started, we were on 1.6 and Ruby 1.8.7.
[05:29:36] *** Quits: SirRippovMaple (~SirRippov@ns527547.ip-192-99-37.net) (Quit: The Lounge - https://thelounge.chat)
[05:29:47] <manicennui> We are now on 2.3 LTS and Ruby 2.4.9.
[05:29:59] <c355e3b> 2.3 LTS?
[05:30:02] <c355e3b> Cursed Version
[05:30:26] <manicennui> c355e3b: It is a special version of 2.3 that we pay for. They add bug fixes and security patches.
[05:30:27] *** Joins: home (~home@user/home)
[05:30:34] *** Joins: SirRippovMaple3 (~SirRippov@ns527547.ip-192-99-37.net)
[05:31:07] <manicennui> We plan to attempt an upgrade to 3.something soonish.
[05:31:29] *** Quits: home (~home@user/home) (Remote host closed the connection)
[05:31:31] <c355e3b> manicennui: I'm aware, I have to support it at work
[05:31:42] <manicennui> Ah.
[05:31:55] <c355e3b> (I write observability/APM stuff for Ruby and other langauges)
[05:32:30] <manicennui> We used Newrelic, and just switched to Datadog APM.
[05:32:35] *** Joins: home (~home@user/home)
[05:32:47] <c355e3b> Ouch
[05:33:06] <c355e3b> In other news https://www.capecodtimes.com/story/news/2021/06/11/humpback-whale-catches-michael-packard-lobster-driver-mouth-proviencetown-cape-cod/7653838002/
[05:33:06] <mockturtle> [ ‘I was completely inside’: Lobster diver swallowed by humpback whale off Provincetown ] - www.capecodtimes.com
[05:33:40] <c355e3b> NewRelic and DataDog were the two companies who were *utterly* abusive towards me as a SRE
[05:34:21] <manicennui> I assume it was on accident.
[05:34:30] <manicennui> The whale thing.
[05:37:11] *** Quits: digilink (~digilink@user/digilink) (Quit: WeeChat 3.1)
[05:37:13] *** Quits: SirRippovMaple6 (~SirRippov@70-132-237-80.lightspeed.iplsin.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[05:37:54] *** Quits: home (~home@user/home) (Ping timeout: 268 seconds)
[05:38:13] *** Joins: digilink (~digilink@user/digilink)
[05:42:24] *** Joins: home (~home@user/home)
[05:42:45] *** Joins: supersandro20008 (~supersand@i5C756554.versanet.de)
[05:42:45] *** supersandro2000 is now known as Guest2894
[05:42:45] *** Quits: Guest2894 (~supersand@i5C756D47.versanet.de) (Killed (strontium.libera.chat (Nickname regained by services)))
[05:42:45] *** supersandro20008 is now known as supersandro2000
[05:42:54] *** Quits: h0m1 (~h0m1@user/h0m1) (Ping timeout: 264 seconds)
[05:43:08] <ngoldbaum> c355e3b: whale is friend to lobster
[05:43:19] <c355e3b> big if true
[05:43:45] <ngoldbaum> whal.es
[05:44:04] <c355e3b> sad that its taken
[05:44:15] *** Joins: h0m1 (~h0m1@user/h0m1)
[05:44:28] <ngoldbaum> i think you need to be an eu citizen to register an es domain too
[05:45:00] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[05:45:40] <c355e3b> not since 2005
[05:51:34] *** Joins: sneak (~sneak@datavi.be)
[05:51:53] <Church> c355e3b: bale.en?
[05:51:54] *** Quits: azazel (~azazel@orphu.arstecnica.it) (Quit: bye)
[05:52:13] <c355e3b> is .en even real?
[05:53:11] <Church> Hmm
[05:54:17] <Church> Seems like no.
[05:54:21] <Church> Thought it was
[05:54:52] <defect> c355e3b: were you working at datadog or a customer?
[05:54:58] <c355e3b> Customer
[05:55:02] <defect> damn
[05:55:12] <c355e3b> Are you having issues with DD?
[05:55:25] <defect> no, i have a friend working there, and i interviewed last year
[05:55:33] <c355e3b> ah
[05:55:34] <defect> probably a good thing i didn't get it
[05:55:44] <c355e3b> Their sales team treated me like shit
[05:55:52] <defect> that sucks
[05:56:02] <manicennui> DD is into all kinds of things. I assume it is like any decent sized employer where it entirely depends on the team.
[05:56:41] <manicennui> My employer is so large that I never deal with sales people.
[05:56:42] *** Quits: jfoy (~jfoy@c-67-168-110-181.hsd1.wa.comcast.net) (Remote host closed the connection)
[05:57:00] <manicennui> That decision is made at a higher level.
[05:57:08] <sneak> hi
[05:57:11] <defect> yeah, i was interviewing for one of their cloud infra team, so probably wouldn't have worked with sales much
[05:57:20] *** Joins: jfoy (~jfoy@c-67-168-110-181.hsd1.wa.comcast.net)
[05:57:44] <c355e3b> manicennui: you seem to be in a nice position then
[05:57:48] <c355e3b> I was an SRE at a compnay of 150
[05:57:49] <manicennui> I just get told "we need to switch to DD APM by this date".
[05:57:58] <c355e3b> I had to deal with 15ish vendors
[05:58:16] <manicennui> I'm sure some of our IT people do deal with sales people for some things.
[05:58:28] <manicennui> Our SREs are more like half developers who keep our massive system going.
[05:58:35] <c355e3b> you're also large enough to where you probably don't get pushed around in these calls
[05:58:36] <manicennui> They mostly deal with vendors when there is an outage.
[05:58:54] <manicennui> Yeah, our revenue is north of $1 billion.
[05:59:24] <c355e3b> yeah so you have money and people
[05:59:37] <manicennui> The bad thing is we have gotten to the point where the senior managers rather have one solution for everyone, even if it is terrible for half of the company.
[05:59:43] <c355e3b> We basically owned the entire market
[05:59:54] <c355e3b> but that was a tiny slice of the world
[06:00:21] <companion_cube> the senior managers are hedgehogs? :p
[06:00:49] <manicennui> companion_cube: I don't understand that reference.
[06:01:05] <companion_cube> https://lobste.rs/s/tcmn0u/don_t_feed_thought_leaders :)
[06:01:05] <mockturtle> [ Don’t Feed the Thought Leaders ] - lobste.rs
[06:01:31] <manicennui> I constantly get pushed to use some service that some rando at the company wrote because one of the words in the name of the service is mentioned in a meeting.
[06:02:32] <manicennui> No, I don't think that is it.
[06:02:40] <manicennui> These people don't even fundamentally understand the problem.
[06:03:33] <manicennui> They have some vague idea of the problem, they see some sales pitch that claims it will be a silver bullet, and they push us all to pretend like it is the best thing ever.
[06:03:36] *** Quits: asthasr (~asthasr@162.210.29.120) (Read error: Connection reset by peer)
[06:04:01] <Church> c355e3b: I'm happy to only deal with... I think 5 vendors.
[06:04:10] <Church> Maybe 6.
[06:04:58] <manicennui> We have two different vendors just for sending email, plus two different internal solutions.
[06:05:05] <Church> Not looking forward to that growing
[06:05:12] <Church> manicennui: Appalling
[06:05:51] <manicennui> We are really bad about allocating enough time to fully migrate to one solution.
[06:11:45] <manicennui> companion_cube: After OCaml sorts out the multicore stuff, it needs a good book.
[06:14:06] <companion_cube> there was Real World Ocaml, but it's kind of dated
[06:14:15] <companion_cube> idk why people focus so much on multicore anyway
[06:14:56] <manicennui> companion_cube: Regardless of why they do, it seems likely to generate some interest.
[06:15:28] *** Quits: Maple (~Maple@user/maple) (Quit: WeeChat 3.1)
[06:15:56] <companion_cube> indeed, that's a good point
[06:16:14] <companion_cube> a problem with RWO is that it was cowritten by a janestreet guy
[06:16:20] <companion_cube> so they use a lot of janestreet libraries
[06:16:32] <companion_cube> and then people are surprised to hear that not everybody agrees on that
[06:17:46] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[06:18:15] *** Joins: Maple (~Maple@user/maple)
[06:31:30] <technomancy> when I tried it I remember seeing that just including like a single call to a janestreet batteries thingy made the executable size go up to like 15MB or something bananas like that
[06:31:35] <technomancy> for a 200loc program
[06:32:04] <companion_cube> :D
[06:32:07] <companion_cube> yep
[06:32:14] <companion_cube> they're full of features
[06:32:24] <technomancy> they said they were gonna add tree shaking soon tho
[06:32:32] <technomancy> but I didn't really stick around long enough to find out
[06:32:46] <companion_cube> there's "tree shaking" at the module level
[06:32:51] <companion_cube> if modules aren't too interdependent
[06:33:54] <technomancy> I'd like to get a chance to try it again
[06:33:58] <technomancy> but it seems unlikely
[06:35:24] <companion_cube> maybe when multicore lands ;)
[06:35:33] <companion_cube> tbh it _is_ a niche language.
[06:35:44] <companion_cube> a very good one, but not really popular
[06:36:00] <technomancy> I just dunno if I'm gonna find myself in a situation where its strengths outweigh the difficulty of finding contributors
[06:39:53] <companion_cube> yeah
[06:40:03] <companion_cube> unless it's a personal project taht seems not likely
[06:40:20] <companion_cube> otoh it's an ok language to build a company on, I think, if you're ready to write a few libraries
[06:40:32] <companion_cube> (a small company, but attracting good programmers, probably)
[06:44:10] <manicennui> Or do the Jane Street thing.
[06:44:20] <manicennui> I mean, many people would say the same about Clojure.
[06:44:49] <manicennui> I don't want to spend the next 20 years working with things I don't enjoy.
[06:45:17] <companion_cube> right, janestreet is doing what I said, except they ran away with it with wild success
[06:45:25] <companion_cube> they even configure emacs with OCaml
[06:45:29] <companion_cube> s/configure/extend
[06:45:37] <manicennui> Seems to be somewhat common among hedge funds.
[06:45:50] <manicennui> I've heard there are jobs in several functional languages in finance.
[06:48:11] *** Quits: noteness (noteness@user/noteness) (Remote host closed the connection)
[06:49:08] <companion_cube> technically that's my case :3
[06:49:24] <companion_cube> yeah some big NYC companies are using haskell, I think
[06:50:08] *** Joins: noteness (noteness@gateway02.insomnia247.nl)
[06:50:32] *** noteness is now known as Guest1449
[07:01:07] <drakonis> there's real world ocaml 2e now
[07:01:13] <drakonis> still uses a lot of jane street stuff
[07:02:06] <companion_cube> yeah…
[07:02:14] <companion_cube> I don't have time or energy to write a book :p
[07:07:39] <manicennui> Surprisingly, there have been several C books written in the last few years.
[07:08:17] <companion_cube> I hear "modern C" is good
[07:08:32] <companion_cube> but C is incomparably more popular than OCaml, so ofc you find people crazy enough to write books on C :p
[07:08:40] <companion_cube> (or… worse… javascript)
[07:10:58] <technomancy> yeah it's a decent language to start a company around but I don't want to start a company
[07:11:29] <technomancy> maybe a worker-owned cooperative or something but that seems like an even more difficult place to justify a niche tech
[07:11:35] <companion_cube> don't you feel inspired by the orange website?
[07:11:59] <technomancy> oh, I definitely feel an inspiration
[07:12:10] <technomancy> to run far far away and do the opposite of what they do
[07:12:18] <companion_cube> :D
[07:12:34] <companion_cube> don't you want to bask in pg's glorious thoughts?
[07:12:51] <technomancy> on that note I'm gonna go take a shower
[07:12:52] <technomancy> eww
[07:15:22] *** Quits: arcatech (~arcatech@user/arcatech) (Remote host closed the connection)
[07:18:49] <drakonis> ah yes pg
[07:18:52] <drakonis> what a true thought leader
[07:18:59] <imode> fuck pg.
[07:19:04] <drakonis> agreed
[07:27:32] <zr> sigh, moodyharsh. why the OO trolling.
[07:27:44] <imode> do tell.
[07:46:44] <drakonis> hmmm
[07:51:45] *** Joins: arcatech (~arcatech@user/arcatech)
[07:53:14] <companion_cube> OO trolling is such fun though
[07:53:46] <quanticle> I'm reading about the EA hack, and the Vice write-up says that the hack started when the hacker purchased some Slack "cookies" on the dark web for $10. So I'm confused. This is the first I'm hearing about Slack cookies getting stolen, and yet apparently this happens so often that the going prices for them is just 10 bucks?
[07:54:00] <quanticle> How is this not a scandal for Slack?
[07:54:49] <companion_cube> obviously they should use macaroons
[07:56:19] <quanticle> It just seems really weird to me that all the online discussion I've read is just treating this as a special case of phishing or social engineering when I don't think it's the same thing at all.
[07:56:41] <quanticle> A phishing e-mail is a cold e-mail, more or less. This had at least some level of bona fides attached.
[07:56:58] <quanticle> And yet no one seems to wonder, "Wait, how did those cookies leak in the first place?"
[07:57:24] <companion_cube> some plugin maybe?
[07:57:31] <companion_cube> slack integration?
[07:58:05] <manicennui> How do they not have some time-based component preventing old cookies from being used?
[07:59:04] <quanticle> I don't know; my main concern is that we use Slack at work. Is there something that I should be doing to prevent *my* auth tokens from ending up on sale for $10 on the dark web?
[07:59:31] <quanticle> No one seems to be even considering this question, much less answering it, and that bothers me.
[08:01:08] <companion_cube> quanticle: you can use 2Fa, at least
[08:01:13] <companion_cube> with authy or equivalent
[08:02:24] <quanticle> I do, but from what I'm reading the attacker was able to use a long-lived cookie to log in to EA's internal slack. They then messaged someone in EA's IT department and got them to either bypass or add a new 2FA device to the employee's account.
[08:02:40] <companion_cube> I see, so there's still some phishing in there
[08:03:27] <quanticle> Yeah, Slack was just the initial access; what blew the network open for the attacker was the fact that they were able to social engineer someone in the IT department.
[08:04:12] <quanticle> But, IMO, the reason the social engineering was so effective was that it took place over Slack
[08:04:45] <quanticle> People have been trained to distrust weird e-mails, even when they're supposedly coming from their co-workers. They have not had the same training re: Slack.
[08:06:05] <manicennui> Pretty sure our IT department would just point them to the instructions for updating 2FA in okta.
[08:07:59] <quanticle> That's the right approach, but I guess EA's IT was more "helpful"
[08:11:49] <manicennui> I don't think I've had any problems with Okta in the years we've been using it.
[08:11:55] <manicennui> It seems like a genuinely good product.
[08:19:12] *** Joins: MerchantOfVenice (~patrick@user/merchantofvenice)
[08:21:36] *** Quits: xy (znc@user/icy) (Quit: ZNC 1.9.x-nightly-20210409-e0ffdddd - https://znc.in)
[08:23:54] <manicennui> https://github.com/neovim/neovim/pull/14686
[08:23:56] <mockturtle> [ [RDY] Allow lua to be used in runtime files by shadmansaleh · Pull Request #14686 · neovim/neovim ] - github.com
[08:24:06] <manicennui> (merged)
[08:27:37] *** Joins: chronos (terminal@gateway/vpn/protonvpn/chronos)
[08:34:27] <Church> Yeah I am curious what these cookies are.
[08:35:17] <fro> y'all should investigate
[08:35:25] <fro> go undercover on the "dark web"
[08:36:14] <quanticle> It's funny because I had a previous job that was literally that
[08:36:32] *** Joins: retropikzel (~Retropikz@dy5nfwp0z53m484z134-y-4.rev.dnainternet.fi)
[08:37:27] <chronos> what sort of job requires you to lurk on the dark net?
[08:37:38] <Church> The fun kind
[08:37:40] <ario_> inb4 crypto
[08:37:58] <Church> quanticle: So what 3-letter agency?
[08:38:06] <chronos> I mean, you're not wrong Church, drug dealing is technically a job
[08:38:29] <chronos> I did know some folks that had to scrape the dark net to get prices.
[08:38:43] <Church> chronos: Fair enough
[08:39:05] <chronos> Apparently it's not uncommon for government agencies to scrape it
[08:39:19] <chronos> Like, even the boring ones too
[08:43:00] <quanticle> chronos: It was a cybersecurity company; their business model was to hash customer data, then pull data off the dark net and compare hashes to see if any of our customers' data had ended up on the dark net.
[08:43:27] <quanticle> The idea being that way you know that you've been hacked before you get the e-mail from the FBI
[08:44:13] <manicennui> "This week Nubank announced a new $750M investment, led by $500M from Berkshire Hathaway at a $30B valuation. Nubank is the largest user of Clojure and Datomic in the world and a great example of the benefits of Clojure’s approach to managing complexity at scale."
[08:44:14] <manicennui> Hmm.
[08:44:48] <chronos> quanticle: makes sense, I see that being flogged all the time on youtube VPN ads
[08:46:00] *** Quits: home (~home@user/home) ()
[08:46:03] <quanticle> The funny thing is, those Youtube VPN ads annoyed the heck out of our CEO, because the "scanning" a lot of those companies do is just like a search of HaveIBeenPwned, which they then use to try to upsell you into buying antivirus
[08:46:53] <quanticle> But yeah, that company did what those Youtube ads *advertised*, as opposed to what those Youtube ads actually did.
[08:48:47] <quanticle> One thing I learned at that job is that quite a few "darknet" sites aren't really on the dark web at all. They're clearnet sites hosted in jurisdictions where they enjoy immunity from extradition. Also, *lots* of them are protected by Cloudflare, and Cloudflare definitely does not give a shit.
[08:52:29] <ngoldbaum> the russian government doesn’t care as long as they don’t have russian targets
[08:53:08] *** Joins: ionface (~ionface@user/ionface)
[08:53:32] *** Quits: nordmann (~nordmann@user/nordmann) (Quit: WeeChat 3.1)
[08:53:56] <quanticle> Yeah, pretty much. The reason I bring up Cloudflare is because the most common obstacle I had to deal with was Cloudflare's CAPTCHA
[08:54:18] *** Quits: resistite (~resistite@86.106.121.175) (Remote host closed the connection)
[08:54:26] *** Joins: resistite (~resistite@86.106.121.175)
[08:54:31] <quanticle> As it turns out all of these sites are under DDOS threat all the time (because every parasite has parasites of its own), so they all use Cloudflare
[08:54:46] <quanticle> And so Cloudflare CAPTCHAs are omni-present
[08:58:53] <martian67> i mean its not even people in extradition proof countries really
[08:59:04] <martian67> its just no law enforcement agency cares enough to bother
[08:59:31] <martian67> maybe if they make a REALLY big move they might, but the police will never even bother looking into fraud at a low level etc
[09:02:01] <drakonis> manicennui: hmm yes, nubank is a startup from brazil...
[09:02:06] <drakonis> its some wild shit
[09:02:21] <drakonis> being large enough to consume clojure and elixir
[09:03:07] <chronos> drakonis: wdym "consume clojure and elixir"? Not sure what you mean
[09:03:38] <drakonis> nubank acquihired plataformatec and cognitect
[09:03:49] <drakonis> although to be fair, jose valim wasnt at plataformatec by then
[09:03:54] <chronos> Ah ok
[09:03:55] <drakonis> but rich hickey is still at cognitect
[09:09:15] <technomancy> three major-ish programming languages controlled out of brazil now
[09:09:38] <chronos> wonder what Brazil is doing to attract the businesses that own them
[09:09:41] <technomancy> "B-tier languages"?
[09:09:50] <technomancy> chronos: one of them is lua; not owned by a business
[09:10:03] <chronos> interesting
[09:10:26] <technomancy> and for clojure it's not like brazil attracted clojure's attention; more like clojure attracted a brazillian business's attention
[09:10:36] <chronos> that's what i mean
[09:10:53] <chronos> i'm curious if anything about brazil made those busiesses stay there rather than move
[09:11:32] <chronos> i've just not heard good things about the government there, so i'd never think of it as a place to run a large business
[09:11:32] <technomancy> of the three I think Clojure is the only one that wasn't created in Brazil
[09:11:39] <technomancy> haha well
[09:11:45] <technomancy> fascists love banks afaict
[09:11:57] <chronos> is brazil facist?
[09:12:06] <chronos> i guess it was at some point
[09:12:17] <technomancy> Bolsanaro sure is; dunno about beyond that
[09:12:34] <chronos> yeah, i was going to say bolsonaro stepped down in an election
[09:12:48] <chronos> but id bet the state is still filled with facists
[09:12:52] <companion_cube> chronos: the US just had 4 years of trump, and yet there's a lot of large businesses there
[09:12:59] <chronos> since... not much changed to my understanding
[09:13:05] <mockturtle> Can memcpy be implemented in LLVM IR? [compilers] (calvin) https://lobste.rs/s/rjhjfc
[09:13:06] <companion_cube> and, there goes the no politics rule
[09:13:28] <chronos> not trying to get political
[09:13:48] <chronos> just mostly curious since i thought they were buying the ip for those based on the chat
[09:13:55] <mockturtle> Binate: A very compact database query language based on binary relations (2014) [databases plt] (dpercy) https://lobste.rs/s/43xxwy
[09:14:47] <chronos> i've been trying to find the perfect rapid prototyping language
[09:15:28] <chronos> its trickly to find info about stuff for that that's not just "node.js"
[09:20:18] <imode> forth.
[09:20:39] *** Joins: l554 (~l554@172.58.231.179)
[09:20:58] *** Joins: atisu (~atisu@catv-176-63-233-143.catv.broadband.hu)
[09:22:22] <companion_cube> :D wat
[09:22:39] <companion_cube> I mean I guess ruby is probably a good bet?
[09:22:43] <manicennui> NuBank is literally a Brazilian bank. Not sure how you think they would just move to the US.
[09:23:50] <manicennui> Brazil's economy is very attractive to a lot of companies.
[09:24:01] <imode> I have a hard time believing ruby is actually a good rapid prototyping language, though I guess the definition of rapid prototyping is subject to debate.
[09:24:12] *** Joins: meireikei (~anon@gateway/tor-sasl/meireikei)
[09:24:15] <manicennui> My employer lends there, and we also have a Brazilian office (confusingly, they don't work on the Brazil product).
[09:24:32] <companion_cube> imode: why not? it's pretty expressive and has a decent ecosystem
[09:24:43] <companion_cube> forth, otoh, is impenetrable to most people
[09:25:03] <manicennui> Rails is the real reason why so many companies use Ruby.
[09:25:05] <imode> fair, and fair, but if the criteria is "expressive and has a decent ecosystem", the argument could be made for every language that's mainstream.
[09:25:25] <companion_cube> not really? no one would say  that of C :P
[09:25:36] <companion_cube> but ruby, python, sure
[09:25:41] <manicennui> imode: It's about its ecosystem for web apps.
[09:25:45] <imode> there are many people who would say that of C.
[09:25:48] <manicennui> Ruby's ecosystem is pretty terrible for many other domains.
[09:25:53] <imode> manicennui: fiar.
[09:25:55] <imode> *fair.
[09:26:09] <imode> one could make the argument for Go and whatever routing you want to use as well.
[09:26:10] <manicennui> Again, it is really about Rails.
[09:26:16] <manicennui> There are also a lot of Rails developers out there.
[09:26:18] <imode> yeah..
[09:26:26] <imode> don't remind me, we have legacy rails apps at work.
[09:26:39] <companion_cube> imode: I wouldn't say go is expressive
[09:26:39] <manicennui> Go is terrible for business logic.
[09:26:42] <companion_cube> but it should do the job
[09:26:49] <imode> define expressiveness, then.
[09:26:58] <manicennui> And its ecosystem is terrible for everything outside of maybe containers.
[09:27:02] <companion_cube> ability to express your intent reasonably concisely :p
[09:27:03] <imode> million dollar opinionated question outside of computability.
[09:27:11] <imode> bahaha, I wouldn't call Ruby expressive.
[09:27:20] <companion_cube> compared to what then
[09:27:22] <chronos> go libraries are not really mature enough to use for prototyping sadly
[09:27:22] <imode> I'd call _prolog_ expressive.
[09:27:27] <companion_cube> meh
[09:27:30] <chronos> even web stuff can be kinda shoddy
[09:27:44] <imode> chronos: tell me about it.. gorilla/websocket is still looking for a maintainer.
[09:27:48] <companion_cube> prolog is cool but it's not that expressive outside of… well… backtracking?
[09:28:00] *** Quits: atisu (~atisu@catv-176-63-233-143.catv.broadband.hu) (Quit: Connection closed)
[09:28:01] <imode> companion_cube: have you ever used it for any serious work? it's pretty damn expressive.
[09:28:15] <manicennui> I have.
[09:28:16] <manicennui> It sucks.
[09:28:17] <companion_cube> I honestly have not
[09:28:22] <imode> manicennui: lol.
[09:28:25] <companion_cube> but in practice you're just going to do recursion
[09:28:30] <manicennui> Your code ends up being about Go boilerplate instead of the problem you are solving.
[09:28:31] <companion_cube> so…
[09:28:44] <companion_cube> manicennui: we mean prolog, not go
[09:28:53] <imode> lol.
[09:28:53] <manicennui> Oh.
[09:29:10] <companion_cube> good luck inserting your cuts at the right places
[09:29:17] <companion_cube> the performance must also be all over the place…
[09:29:32] <imode> companion_cube: you should take a look at some production prolog codebases, but they are few and far between because they're mostly used at skunkworks projects. cuts aren't required.
[09:29:47] <imode> I had the opportunity to see some samples from a geographic analysis app studying trucking routes.
[09:30:00] <companion_cube> good for them
[09:30:04] <manicennui> I saw an interesting talk years ago at Strange Loop about production prolog.
[09:30:10] <companion_cube> I don't think prolog does anything that FP can't do
[09:30:24] <companion_cube> it's really cool and interesting, mind you
[09:30:37] <imode> much like there isn't anything that FP can do that C can't..?
[09:30:45] <companion_cube> oh sure, but I meant, concisely and shit
[09:30:56] <companion_cube> backtracking makes for a pretty good monad
[09:31:02] <imode> I wouldn't call some FP concise.
[09:31:05] <imode> at all, actually.
[09:31:13] <imode> the opposite, in fact.
[09:31:24] <companion_cube> really? what do you have in mind
[09:31:35] <companion_cube> the Haskell I've seen has always been super dense
[09:31:40] <companion_cube> clojure, I can only imagine
[09:31:51] *** Joins: atisu (~atisu@catv-176-63-233-143.catv.broadband.hu)
[09:32:07] <imode> I find it really funny when you bash on concatenative languages or forth, you say that it's because it's out of reach of most people, when I could say the same of "dense" functional programming language code, that really isn't that dense to accomplish the same functionality and intent.
[09:32:08] *** Quits: chronos (terminal@gateway/vpn/protonvpn/chronos) (Ping timeout: 264 seconds)
[09:32:11] <imode> in other languages.
[09:32:30] <imode> it's kind of narrow-sighted.
[09:32:34] <companion_cube> probably
[09:32:40] <companion_cube> I just like having variables and types
[09:32:42] <imode> yes, it's unfamiliar. but.. haskell isn't really any better.
[09:32:48] <companion_cube> haskell I can grok
[09:32:56] <imode> because you took the time to learn it.
[09:33:00] <companion_cube> concatenative stuff, there's just too much keep in my head
[09:33:14] <imode> then stop generalizing it to the rest of the population. :P
[09:33:34] <manicennui> What are you hoping to get out of this discussion?
[09:33:44] *** Joins: chronos (terminal@gateway/vpn/protonvpn/chronos)
[09:33:49] <imode> I can point to several absolutely readable and understandable snippets of concatenative code, and I can point to some really readable and understandable haskell code, and I can point to direct opposites of both languages.
[09:34:27] <imode> so when we talk about expressiveness and conciseness, it's always going to be "on this gradient I'm familiar with".
[09:34:41] <companion_cube> imode: I generalize because I know a bunch of people excited or familiar with haskell, and even using it
[09:34:49] <manicennui> It's always going to be completely subjecting and mostly useless.
[09:34:55] <manicennui> subjective
[09:35:01] <imode> companion_cube: are you willing to admit that that's a small fraction of the programming community at large? :P
[09:35:10] <companion_cube> otoh, forth, it's like the post-apocalyptic OS, and some people into minimalism
[09:35:11] <manicennui> Just seems like something for geeks to argue about.
[09:35:14] <companion_cube> imode: oh sure
[09:35:23] <companion_cube> I just run in FP circles, that's clear
[09:35:33] <imode> then.. it's not different for forth or concatenative langs, yet I don't claim that it's better.
[09:35:36] <companion_cube> but I think concatenative langs are even more obscure than FP, and that's saying something
[09:35:55] <chronos> imode: yeah, most people i know who know haskell don't use it. im an fp guy too, and i don't even use it often.
[09:35:56] <imode> Iiiii beg to differ, they're used in many ways. one implementation is in space right now.
[09:35:59] <companion_cube> and instead of a cult of maths and type theory, they have a cult of extreme minimalism (for forth)
[09:36:09] <companion_cube> yeah we have all heard of that one
[09:36:10] <chronos> mostly just for learning a functional concept rather than actually building something
[09:36:45] <imode> the cult of extreme minimalism and maths and type theory aren't exactly mutual exclusive when talking about concatenative languages, who's primary point is that they form a monoid.
[09:36:56] <imode> just look at manfred von thun's treatment of joy, for instance.
[09:37:09] <companion_cube> yeah, you can type that
[09:37:11] *** fedorafan is now known as Umbire2
[09:37:25] <companion_cube> and I'm sure it fits somewhere in a Haskell monad or whatever
[09:37:33] <imode> monoid, not monad. :P
[09:37:47] *** Umbire2 is now known as fedorafan
[09:38:08] <imode> just saying that if you want to be, I guess I'd term it a well-rounded programmer, it helps to understand lots of areas of programming instead of a single facet.
[09:38:15] *** Quits: atisu (~atisu@catv-176-63-233-143.catv.broadband.hu) (Quit: Connection closed)
[09:38:23] <imode> afk, dog walk.
[09:38:23] <companion_cube> I know a bit, thank you
[09:38:32] <companion_cube> it's just very unatural to me to write code this way
[09:38:37] <companion_cube> I like my local let bindings
[09:38:44] <imode> that's fine. stop claiming that it's a generalist thing, then.
[09:39:11] <companion_cube> well it's also the sample of people I know IRL and online, who seem rarely excited by these
[09:39:58] <imode> your groups and my groups do not overlap. the venn diagram is not just our two social groups. there are people who would say FP is bizzare, outdated and foreign in plenty of circles outside of the ones I frequent. and that's alright. afk.
[09:40:15] <manicennui> Nah, fuck those people.
[09:40:27] <companion_cube> there's a ton of people who don't even know about either
[09:40:40] <manicennui> Seriously, the vast majority of employed programmers don't have opinions worth considering unless you are trying to sell something to them.
[09:41:22] <chronos> manicennui: the alternative is... unemployed developers have more valuable opinions?
[09:41:24] <imode> ah yes, and the current flavor of functional programming with some flavor of type system is the path forward for them.
[09:41:26] <manicennui> And to imply that companion_cube's general knowledge is not fairly broad compared to the average working programmer is laughable.
[09:41:38] <manicennui> The average programmer is luck if they even know the language they work in well.
[09:41:45] <manicennui> Let alone other paradigms and languages.
[09:41:52] <companion_cube> imode: well, FP concepts are slowly becoming mainstream
[09:42:00] <imode> companion_cube: wadler would laugh at that.
[09:42:04] <companion_cube> stack languages are extremely popular… in virtual machines
[09:42:10] <imode> going to actually take my dog out now, ciao. o/
[09:42:12] <companion_cube> I very much doubt so
[09:42:20] <imode> go ask him. he responds to email.
[09:42:22] <companion_cube> Wadler would be happy to see typeclasses in Rust
[09:42:29] <chronos> manicennui: fair, many people I work with don't know much other than their language of choice
[09:42:32] <manicennui> s/lucky/lucky/
[09:42:38] <imode> evangelism needs to die.
[09:42:52] <companion_cube> the intersection of rust and haskell is quite strong, and rust is as hype as it gets
[09:43:00] <companion_cube> people even hear about monads these days
[09:43:05] <manicennui> A big problem when hiring Rails "developers" is finding people who actually know Ruby, and not just some Rails incantations that they memorized.
[09:43:07] <companion_cube> which I want to image Wadler cares about :)
[09:43:36] <chronos> I see a lot of code that's clearly just copy and pasted in people's work. When they have unused variables everywhere
[09:43:44] <manicennui> Rust is the C++ of FP/imperative.
[09:43:50] <manicennui> Just add a little bit of everything.
[09:43:52] *** Quits: retropikzel (~Retropikz@dy5nfwp0z53m484z134-y-4.rev.dnainternet.fi) (Quit: Leaving)
[09:43:55] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 272 seconds)
[09:44:04] <companion_cube> don't forget scala!
[09:44:05] *** Joins: Retropikzel (~Retropikz@dy5nfwp0z53m484z134-y-4.rev.dnainternet.fi)
[09:44:06] <companion_cube> the real C++ of FP
[09:44:23] <companion_cube> (fwiw I'd consider scala more complicated than rust)
[09:44:28] <chronos> i've been thinking of learning scala, how's the ecosystem around it
[09:44:35] <companion_cube> you get the jvm
[09:44:36] <manicennui> chronos: It's the JVM.
[09:44:40] <manicennui> So amazing.
[09:44:41] <companion_cube> and some scala stuff on top
[09:44:58] <chronos> true, true. Playing around with clojure lately and have started to really like the jvm
[09:45:01] <companion_cube> chronos: scala 3 might be cool, too. they added proper synax for sum types
[09:45:23] <chronos> companion_cube: very nice
[09:45:35] <manicennui> I think Scala 3 is targeting three different platforms.
[09:45:41] <manicennui> JVM, JS, and native.
[09:45:59] *** Joins: ionface_ (~ionface@user/ionface)
[09:46:00] <companion_cube> never sure if native actually works though
[09:46:09] <companion_cube> did they implement their new GC? immix?
[09:46:11] <chronos> Intersting, i'd probably stick to the jvm one
[09:46:33] <manicennui> companion_cube: Not sure.
[09:46:40] <companion_cube> it's like kotlin native
[09:46:43] <manicennui> My friend who does Scala doesn't seem to have high hopes for Native.
[09:46:49] <companion_cube> it's probably going to stay second class forever
[09:46:51] <companion_cube> exactly
[09:47:02] <chronos> is scala trying to do the Kotlin thing of being a "better java", or is it it's own language more?
[09:47:21] <chronos> As in, not trying to be java, but with more features basically
[09:47:29] <companion_cube> it's a lot more its own thing
[09:47:46] <companion_cube> well, when it was created, anyway
[09:47:49] <manicennui> I kind of thing a few different groups should get together and create a standard library and some other shared components for languages that want to move off the JVM.
[09:47:52] <companion_cube> back when java didn't even have lambdas, I think?
[09:48:21] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 264 seconds)
[09:48:23] <chronos> huh, there's a selenium library for scala, nice
[09:48:24] <manicennui> Scala is the language you use when you rather be writing Haskell, but you have to work with the JVM.
[09:48:42] <chronos> there's a haskell in the jvm
[09:48:49] *** Quits: fedorafan (~fedorafan@user/fedorafan) (Quit: Textual IRC Client: www.textualapp.com)
[09:49:05] <manicennui> Scala has some corporate acceptance though.
[09:49:15] <chronos> eta, that's it
[09:49:21] <chronos> yeah, i know scala is popular
[09:49:48] *** Joins: fedorafan (~fedorafan@user/fedorafan)
[09:50:08] <chronos> i might pick that up. the only downside of clojure is that redability takes a hit from all the brackets.
[09:50:36] <chronos> so something strongly functional that's more c-styled would be really nice
[09:52:17] <manicennui> chronos: Can I tell you about our Lord and Savior, ML?
[09:52:41] <companion_cube> :D not exactly C-style…
[09:52:42] <chronos> manicennui: by all means
[09:53:06] *** Quits: bontaq (~user@ool-18e47f8d.dyn.optonline.net) (Ping timeout: 252 seconds)
[09:53:07] <chronos> companion_cube: closer to c than lisps are, that's all i was getting at
[09:53:28] <chronos> companion_cube: in the visual appearance of the code
[09:54:03] <companion_cube> well there's Reason, which is lipstick on OCaml to make it look like javascript
[09:54:08] <companion_cube> simple, right?
[09:54:09] *** ionface_ is now known as ionface
[09:54:44] <chronos> companion_cube: I'm not a fan of JS, so i'd not want something painted yellow and black to look like it
[09:54:55] <imode> companion_cube: just thought of something! you hate tacit programming, right?
[09:55:16] <chronos> find it makes you lazy, since you can make bad design without immediate concequences
[09:55:20] <companion_cube> the haskell kind?
[09:55:23] <imode> any kind!
[09:55:30] <companion_cube> not that familiar with the term
[09:55:34] <imode> https://en.wikipedia.org/wiki/Tacit_programming
[09:55:35] <mockturtle> [ Tacit programming - Wikipedia ] - en.wikipedia.org
[09:55:47] <companion_cube> so, pointless
[09:56:02] <companion_cube> the haskell style is… fine, I guess? as long as there's a typechecker
[09:56:04] <imode> yeah, tacit, point-free, etc.
[09:56:05] <companion_cube> I do write more explicit code
[09:56:20] *** Quits: jmw (~jmw@user/jmw) (Quit: jmw)
[09:56:44] <companion_cube> > APL family
[09:56:45] <imode> I don't know why I was talking about concatenative langs as if they were purely orthogonal to FP ones... they're just FP langs with a tacit style.
[09:56:47] <companion_cube> now that seems fun.
[09:57:09] <companion_cube> yeah, FP in pointfree style is basically a stack of size 1
[09:57:25] <companion_cube> but you also get a notion of immutable value, and closures, in a consistent whole
[09:57:28] <imode> I'd argue against that, considering you can manipulate and re-order multiple values.
[09:57:38] <companion_cube> well it's a big stack slot :p
[09:58:05] <companion_cube> the thing is, even in haskell, you tend to have _some_ local definitions and local names, even if it's in `where`
[09:58:31] <imode> same thing in many concatenative languages.. heck, gforth offers locals as basically a macro.
[09:59:03] <imode> you can go without them. but you can also use them. I use them.
[09:59:06] <companion_cube> but do you have closures? a heap? persistent structures (like balanced trees)?
[09:59:21] <imode> yyyyes.. I don't know why you believe that can't be accomplished in a concatenative style.
[09:59:28] *** Parts: l554 (~l554@172.58.231.179) ()
[09:59:34] <companion_cube> more wondering about forth.
[09:59:52] <companion_cube> I imagine factor, for example, is more or less on par with functional languages
[10:00:00] <companion_cube> (although I've only heard of it, never tried)
[10:00:25] <imode> most if not all concatenative languages are roughly on par with functional ones, they're just not as mainstream (and I believe factor is falling behind).
[10:00:29] *** Joins: rhn (~rhn@dynamic-078-048-148-225.78.48.pool.telefonica.de)
[10:00:49] <companion_cube> there was a post on lobsters about ideas on how to mix the two worlds iirc
[10:00:51] <imode> you can construct closures in forth. you can build any data structure you like in forth and pass it around as some lovely syntax.
[10:00:57] <companion_cube> sth about having named stacks
[10:01:00] <imode> not that I _love_ forth.
[10:01:08] <imode> ah yeah, there's a lot of that buzz going around in the esolang community as well.
[10:01:18] <companion_cube> I forgot the name, but it was a cool idea
[10:01:50] <imode> heck there's object oriented extensions to forth too, and they mix with the fp ones.
[10:02:19] <imode> someone, somewhere, built something similar to CLOS.
[10:02:28] <imode> which I thought was a herculean feat.
[10:02:43] <imode> actually, another neat concept: have you ever actually seen written examples of backus' fp?
[10:02:52] <imode> and I mean the lang.
[10:02:52] <companion_cube> no
[10:02:55] <imode> hooo boy.
[10:03:03] <companion_cube> I'm not that much into esolangs :p
[10:03:10] <imode> that is not an esolang.
[10:03:41] <imode> that is the system that john backus detailed as an example of a programming model "liberated from the von neumann style".
[10:04:08] <imode> something that every FP enthusiast this side of the temporal plane cites as being an example of why functional programming is the future.
[10:04:20] <imode> despite probably never actually looking at it.
[10:04:25] <companion_cube> ah well, maybe?
[10:04:30] <imode> it's pointfree.
[10:04:45] <companion_cube> maybe the FP enthusiasts you know :p
[10:05:12] <companion_cube> I'm here for the sum types and the immutability
[10:05:23] <companion_cube> pointfree seems to be mostly a haskell thing
[10:05:31] <companion_cube> (in FP circles)
[10:05:58] <imode> aagh, the mirror for this is down, that's so lame.
[10:06:24] <imode> https://web.archive.org/web/20160304094715/http://www.call-with-current-continuation.org/fp/
[10:06:27] <imode> check this out.
[10:06:34] *** Joins: atisu (~atisu@catv-176-63-233-143.catv.broadband.hu)
[10:06:40] <companion_cube> what a domain name
[10:06:40] <imode> https://en.wikipedia.org/wiki/FP_(programming_language) along with this.
[10:06:40] <mockturtle> [ FP (programming language) - Wikipedia ] - en.wikipedia.org
[10:07:22] <imode> it's nice to know the history behind the things we use.
[10:07:29] <imode> even nicer when someone implements that history.
[10:07:40] <companion_cube> I mean, this comes later than lisp… ?
[10:07:50] <companion_cube> 1977… it's even younger than ML
[10:08:10] <companion_cube> not sure how foundational it is to ML then
[10:08:20] <imode> nearly every functional programming research project looked at this and went "welp, that's cool as hell, let's try to do some stuff around that".
[10:08:36] *** Quits: chronos (terminal@gateway/vpn/protonvpn/chronos) (Quit: WeeChat 2.8)
[10:09:14] <imode> also I'll say this, mccarthy never wanted lisp to be a functional language, any more than he wanted S-expressions to be the primary syntax of writing lisp.
[10:09:21] <imode> should say "never intended".
[10:09:44] <companion_cube> sure, but took off anyway :)
[10:09:51] <imode> which is why we have a lot of imperative constructs and stateful stuff in lisps.
[10:10:05] <companion_cube> peak PL design was reached with ML anyway
[10:10:15] <companion_cube> I'll keep thinking that in a totally unbiased way :p
[10:10:19] <imode> loool.
[10:10:28] <imode> hey, everybody has their canonical art that inspired them.
[10:11:19] <companion_cube> well it just took 50 years to get mainstream
[10:11:25] <companion_cube> but we're getting there
[10:11:27] <imode> I wouldn't even call it mainstream yet.
[10:11:44] <companion_cube> rust is going to make it mainstream, don't worry
[10:12:06] <imode> for better, or worse. I don't think it's the functional aspects of rust that will get championed, it'll be the borrow checker.
[10:12:17] <companion_cube> (and I have proof!! http://okmij.org/ftp/ML/ML14.html <---- rust at the ML workshop)
[10:12:18] <mockturtle> [ ACM SIGPLAN Workshop on ML, September 2014, Gothenburg, Sweden ] - okmij.org
[10:12:19] <imode> which is effectively just linear logic... which we had with stack langs but nobody really cared.
[10:12:32] <companion_cube> oh lots of people are discovering sum types and pattern matching thansk to rust
[10:12:35] <companion_cube> it's amazing
[10:12:49] <companion_cube> and then they are grumpy when they have to use java or C++ again
[10:13:15] <imode> there was this talk that was given at GOTO I believe about ALGOL. specifically like ALGOL 60.
[10:13:50] <imode> programmers are still discovering things that ALGOL had in its standard. it's amazing how little we actually look at the history of our field.
[10:14:07] <imode> hell I was nearly blind before I started just digging through historical articles.
[10:14:44] <imode> you can really learn a lot about damn near any field if you study its history.
[10:16:28] <companion_cube> yeah
[10:16:40] <companion_cube> and to see the languages that ignore all of history, is sad
[10:16:55] <companion_cube> (I'll let you guess what language created in 2010 I'm thinking of)
[10:17:04] <companion_cube> that said, it's 1:45 am, I need to sleep -_-
[10:17:09] <imode> I'm actually gonna ask which one you mean. :P
[10:17:12] <companion_cube> may your stack not underflow
[10:17:15] <companion_cube> ugh :p
[10:17:21] <companion_cube> starts with G and ends with O
[10:17:31] <imode> may your typechecker's halting problem be decidable. :)
[10:17:49] <imode> ..seriously don't fuck with dependent types.
[10:18:22] <companion_cube> heh, indeed not
[10:18:40] <companion_cube> I have enough problems with ML polymorphism as it is -_-
[10:19:01] <imode> just add more morphisms and functors.
[10:19:10] <imode> throw in some bifunctors.
[10:19:27] <imode> we always need bifunctors.
[10:26:16] <manicennui> https://www.graalvm.org/ruby/
[10:26:16] <mockturtle> [ Ruby ] - www.graalvm.org
[10:26:50] <imode> wonder how widespread the usage of that is.
[10:26:57] <imode> we use JRuby at work.
[10:28:45] <meff[m]> how's the UX like around JRuby dev?
[10:28:51] <meff[m]> Jython died a quiet death
[10:29:23] <imode> it's alright.
[10:29:29] *** Joins: emperor_time (~kurapika@117.222.64.84)
[10:29:32] <imode> basically just a drop-in replacement for your ruby interpreter.
[10:32:32] <imode> we have some legacy data models that were written in java, and our build system is language independent and just links everything together, so I can't really judge the effort of using it.. apart from the small modifications we've had to make.
[10:32:33] <meff[m]> nice, so not too much friction huh
[10:32:58] <quanticle> The reason Jython died is because Jython didn't have support for C extensions
[10:33:06] <quanticle> Hence no numpy
[10:33:13] <quanticle> And no scipy
[10:33:16] <meff[m]> yeah
[10:33:33] <meff[m]> well I think that was one reason among many, but certainly a large one
[10:33:34] <quanticle> Which is a shame because Jython doesn't have a GIL
[10:33:41] <meff[m]> ugh yeah tell me about it
[10:33:55] <meff[m]> @#$#*$ GIL!!! shakes fist
[10:34:55] *** Quits: emperor_time (~kurapika@117.222.64.84) (Quit: leaving)
[10:34:59] <meff[m]> hmm I wonder if we can move our chef over to JRuby
[10:37:07] *** Joins: BrenGamis (~BrenGamis@103.139.178.13)
[10:37:21] <BrenGamis> Hi!
[10:37:29] <imode> allo.
[10:38:20] <BrenGamis> So, I have been looking at lobster.rs posts for sometime and thought maybe someone could refer me for an account :)
[10:39:06] <BrenGamis> Oh, I didn't know webchat auto turned into emojis I like to choose when to use which one
[10:40:38] <BrenGamis> So, is lobsters like hacker news or a little different?
[10:40:52] <imode> little different.
[10:42:03] <BrenGamis> A bit of primer?
[10:43:18] <imode> diverse community of technology enthusiasts who post and cultivate articles that are more technically themed than the orange site, with an account referral system.
[10:43:34] <imode> recommend you lurk a while, it's nice here.
[10:45:23] <BrenGamis> I see posts there every once a while, but this one gave the push the chat here: https://lobste.rs/s/vhlagb/why_gemini_is_not_my_favorite_internet
[10:45:23] <mockturtle> [ Why Gemini is not my favorite internet protocol ] - lobste.rs
[10:45:36] <BrenGamis> https://lobste.rs/s/vhlagb/why_gemini_is_not_my_favorite_internet
[10:45:37] <mockturtle> [ Why Gemini is not my favorite internet protocol ] - lobste.rs
[10:45:42] <imode> what about the article did you enjoy?
[10:45:51] <BrenGamis> Oh sorry about double
[10:45:59] *** Quits: h0m1 (~h0m1@user/h0m1) (Quit: WeeChat 3.1)
[10:47:04] *** Joins: h0m1 (~h0m1@user/h0m1)
[10:47:26] <BrenGamis> In some ways yes, but I do have bit more to say
[10:48:03] <BrenGamis> I feel like markdown is what is the perfect combination of simplicity+complexity
[10:49:06] <BrenGamis> I don't think eternal September was bad, just it was different. If there was no September fest almost no one would have discovered and improved this amazing thing
[10:53:25] <imode> imo, the way the web should have moved was away from documents and towards server side executable programs.
[10:53:56] <imode> with capability determination and a TCP-like protocol.
[10:54:04] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[10:54:08] <imode> you send input, server sends back draw commands.
[10:54:28] <meff[m]> yeah agreed
[10:54:40] *** Joins: wyclif (~wyclif@user/wyclif)
[10:54:46] <meff[m]> I think it's taking an incredibly roundabout way to arrive at that conclusion
[10:55:32] <imode> you can build linked documents on top of that foundation but doing the reverse is just asenine.
[10:55:45] <quanticle> So the web should have been X remote?
[10:55:48] <imode> yep.
[10:55:58] <meff[m]> essentially yeah
[10:56:22] <meff[m]> well I do think TBL's ideas for the web were very different, but here we are
[10:56:40] <imode> TBL didn't know what the hell he wanted to do.
[10:56:47] <meff[m]> heh
[10:56:48] <imode> documents were low hanging fruit.
[10:56:51] <meff[m]> s e m a n t i c  w e b
[10:56:56] <quanticle> lol
[10:56:59] <imode> jesus christ don't remind me of RDF.
[10:57:00] <quanticle> The dream
[10:57:20] <meff[m]> I like the idea of the semantic web, but RDF-XML is uh lol and stuff
[10:57:31] <imode> semantic networks are _awesome shit_.
[10:57:39] <imode> RDF-XML makes me wanna stab my eyes shut.
[10:57:43] <meff[m]> yeah
[10:57:59] <imode> in what world did people look at HTML and say "y'know what's missing? markup about markup. that's what the teens wanna write."
[10:58:05] <meff[m]> I'm glad that TTL and JSON-LD is finally here, though I guess the largest actual users of JSON-LD are Fediverse S2S protocols
[10:58:16] <meff[m]> imode: I remember seeing an "SGML in 24 hours" book
[10:58:19] <meff[m]> in the library
[10:58:19] <imode> LOL.
[10:58:31] <imode> I have that somewhere on my bookshelf.
[10:58:39] <meff[m]> hahahaha
[10:58:43] <meff[m]> yeah it still makes me laugh
[10:58:49] <imode> that and some VRML stuff.
[10:58:49] <BrenGamis> Imofe: that seems to be one way to do it
[10:59:43] <meff[m]> oh maaan VRML
[10:59:47] <meff[m]> thanks you just brought me real far back
[10:59:58] <imode> hahahahaha
[11:00:20] <BrenGamis> OK I don't know what's rdf, json-ld, vrml, TTL
[11:00:37] <meff[m]> VRML is more just a bit of history at this point
[11:00:41] <BrenGamis> I know rtf, json
[11:01:22] <imode> imo, what should've happened is something like what NeWS was trying to do. data as code.
[11:01:41] <imode> all postscript.
[11:01:43] <BrenGamis> I am so lost
[11:02:46] <BrenGamis> Maybe I should skip account creation for now
[11:02:47] <imode> the working group I have is basically building a distributed NeWS environment as an alternative to the web.
[11:03:13] <BrenGamis> Link?
[11:03:22] <imode> via slack and it's private.
[11:03:32] <BrenGamis> K bye
[11:03:58] <imode> ...bye?
[11:05:35] <meff[m]> BrenGamis: I can give you an article introducing the semantic web if you're interested
[11:05:46] <imode> https://en.wikipedia.org/wiki/NeWS
[11:05:46] <mockturtle> [ NeWS - Wikipedia ] - en.wikipedia.org
[11:07:55] *** Quits: BrenGamis (~BrenGamis@103.139.178.13) (Ping timeout: 250 seconds)
[11:10:29] <imode> weird fellow.
[11:11:23] <meff[m]> imode: are y'all layering on capabilities?
[11:11:58] <bsandro> rdf, vrml - made me remember about 'hypertext fidonet' that one popular fella used to heavily fantasise about
[11:12:14] <imode> yup, and it's mostly a standards thing vs. a concrete "you can only do stuff with these clients" thing.
[11:12:26] <meff[m]> Nice that's a real cool idea
[11:12:30] <imode> so you can send draw calls. but the clients are free to ignore them if unsupported.
[11:12:31] <meff[m]> Wish y'all luck with it
[11:12:36] <imode> thaaanks.
[11:13:00] <imode> an interesting concept that we're tackling is the idea of mobile code.
[11:13:09] <meff[m]> Are y'all using WASM instead of PS?
[11:13:18] <imode> custom VM. we need tight resource constraints.
[11:13:26] <meff[m]> Ah so similar to the classic smart contract work, a la E?
[11:13:34] <imode> something like that.
[11:13:40] <meff[m]> Very cool
[11:13:48] <imode> imagine, for example, you wanted to draw a complex primitive, or ship a piece of data that the client doesn't know how to unpack.
[11:14:14] <imode> the stuff shipped back and forth between the server and the client is actual executable code.
[11:14:46] <imode> it is a subset of the language that both sides understand, with the interpreter being defined in said superset language.
[11:15:50] <imode> it's a subset in that it lacks access to core I/O primitives apart from emitting things along created "ports", and has execution time and memory constraints.
[11:16:20] <meff[m]> right, so I'm guessing its access to I/O or any form of external state comes from some handle right?
[11:16:26] <meff[m]> and you're modelling external services as vats?
[11:16:37] <meff[m]> also, are you incentivizing or compensating execution at all?
[11:17:03] <imode> not really. we're basically just using code as the transport mechanism for extensibility. we're still feeling stuff out.
[11:17:09] <meff[m]> gotcha
[11:17:23] <meff[m]> There's a whole bunch of projects springing up with overlapping sets of ideas here, though I'm sure you're familiar with them
[11:17:32] <imode> we are, however, ensuring that servers can bridge together.
[11:18:46] <imode> meaning that parts of the code you write can migrate between hosts autonomously.
[11:18:56] <meff[m]> oh interesting
[11:19:53] <imode> I'm hoping in 2 or so years, my main desktop will be distributed across multiple pieces of hardware that I own.
[11:21:00] <meff[m]> cool cool, good luck!
[11:21:23] <imode> thaaaanks. really deep into the mobile agent paradigm currently.
[11:22:03] <imode> keep wanting to build a MOO-esq. environment on it.
[11:25:22] <meff[m]> yeah lots of folks who are exploring this space seem to want to work with MOOs or MMOs, seems like a "natural" diversion
[11:26:16] <imode> when you look at what the web should've been, it should've been "I can write this in five seconds and my friends can jump in with me and test it immediately in a shared space".
[11:26:43] <imode> instead of building applications on top of the web, the protocol and surrounding "space" should've been flexible enough to mold into anything.
[11:27:36] <imode> the natural first step is building something like a MOO, because it demonstrates quite a few capabilities: permanence, storage, shared interaction, communication, permissions, authorship, collaborative programming...
[11:28:00] <imode> everything else is just some kind of abstraction on top of or in addition to that.
[11:28:29] *** Quits: rob (~user@194.81.254.84.ftth.as8758.net) (Ping timeout: 244 seconds)
[11:28:38] *** Joins: rob (~user@194.81.254.84.ftth.as8758.net)
[11:28:43] <imode> you want to make the world look like one giant computer. or at least a bunch of computers that are closer to you.
[11:30:34] *** Joins: Qria___ (uid25348@id-25348.tinside.irccloud.com)
[11:30:41] *** Qria___ is now known as Qria
[11:31:05] <meff[m]> heh Spritely folks seem to believe the same thing
[11:31:09] <meff[m]> multi-agent systems, virtual worlds, that sorta thing
[11:31:24] <imode> I saw that and was like "woah woah, all too complicated all at once".
[11:31:35] <imode> and I followed that up with "let's build our own thing".
[11:31:38] <meff[m]> ugh yeah their messaging is (imo at least) pretty opaque
[11:31:59] <meff[m]> it took me a while digging around their codebases and their spaces to get an idea of what was going on, which is really cool, but yeah opaque
[11:32:12] <imode> imo one of the core tenets of our working project is "you can implement the basics in a weekend in your favorite language".
[11:32:16] <meff[m]> and yes, they have lots of ideas
[11:32:20] <imode> because ease of reproduction means ease of adoption.
[11:32:30] <meff[m]> yeah that's what the SES folks believe
[11:32:35] <imode> SES?
[11:32:42] <meff[m]> Secure ECMAScript
[11:32:43] <rwb> when the impostor is ses
[11:32:53] <meff[m]> ol
[11:32:55] <meff[m]> l
[11:33:15] <imode> I will never be able to write an EMCAScript implementation in a weekend.
[11:33:21] <imode> I'm sorry, I just won't. I'm a really simple dude.
[11:34:02] <meff[m]> yeah they took it from the other take which is, layer it atop something that has a lot of developers already
[11:34:06] <meff[m]> in this case ECMAScript
[11:34:25] <meff[m]> they're locking down parts of the runtime necessary to be able to execute code with exposed capabilities
[11:34:39] <imode> when you look at why the web is spiralling out of control, it's a combination of "people are trying too hard to accomplish something with standards that are diametrically opposed to doing that", and "google/MSFT/etc. can introduce standards that are difficult/impossible to comply with, hindering browser vendors".
[11:35:21] <imode> I will never write a document layout engine in a weekend. I can hack up a simple display for Feather (the language) to draw stuff to via SDL and my language of choice in a weekend.
[11:35:39] <imode> when your foundations are reproducible, the fun part is the stuff built on top of them.
[11:36:08] <imode> it's why people have a lot of fun with minimalistic VMs, and I saw some of that in WASM but it's still too flakey for my liking.
[11:36:13] <meff[m]> So start with a small VM like environment and build that up eh?
[11:36:18] <imode> exactly.
[11:36:33] <meff[m]> Nice nice
[11:36:40] <imode> you should be able to write a fairly minimal implementation in a weekend and run most existing code.
[11:37:04] <meff[m]> Forth! Though that's certainly not the only one
[11:37:12] <meff[m]> And I mean Forth and PS share some heritage
[11:37:20] <imode> yup, the core language looks like it's going to be some concatenative variant.
[11:37:41] <imode> it'll have an incredibly simple linear garbage collection scheme based on moving references around in chains.
[11:37:42] *** Joins: icy (~icy@user/icy)
[11:37:48] <meff[m]> Yeah concatenation languages really seem like the way to go to quickly build up semantics from the basics
[11:37:56] <imode> not just semantics, but syntax too.
[11:38:14] <meff[m]> Yeah true
[11:39:31] <imode> multiply-sum { x :: int , y :: pair } -> y :first . x * y :second . x * + ;
[11:39:42] <imode> none of that syntax, for example, is built in to Feather.
[11:40:12] <imode> every bracket, every piece of punctuation is defined as some lower form. there are about 8 core primitives, and about 4 or 6 extra ones.
[11:41:01] <meff[m]> I'm thinking through how it's an interesting contrast to Gemini
[11:41:12] <meff[m]> Which purposefully restricts to maintain simplicity
[11:41:24] <imode> there are two main components to simple tools.
[11:41:30] <imode> rather, I guess, two main approaches.
[11:41:56] <imode> one is placing restrictions on a thing or set of things to force you to be creative in how you approach using them.
[11:42:15] <imode> the other is having a small basis of tools that can be composed together to build larger tools.
[11:42:58] *** Quits: rob (~user@194.81.254.84.ftth.as8758.net) (Ping timeout: 268 seconds)
[11:43:07] <imode> in feather's case, for example, we have a few primitives. dup, swap, drop, left, right, compose, apply, quote, first, rest.
[11:43:45] <imode> from this we can build anonymous recursion. from that we can build while loops. we can build list syntax by repeated composition.
[11:44:10] <imode> we can also pattern match/compile on the stack effects from these, reducing them down to simpler operations. we can also JIT them.
[11:45:29] *** Joins: river (~river@tilde.team/user/river)
[11:45:54] <imode> simple machinery means simple implementation. simple implementation means simple audits and diverse adoption for weekend hackers.
[11:48:21] <meff[m]> and also simple machinery to attempt proofs or assertions of any kind
[11:48:24] <meff[m]> (hopefully)
[11:48:39] <imode> exactly. you can build static analysis tools, type and effect checkers, all inside or outside the ecosystem.
[11:49:46] <imode> hell if you don't like concatenative programming, either extend the language or write a compiler for it. you have dynamically allocated nested lists of symbols and some primitive operations.
[11:50:05] <imode> and your garbage collection is still all linear.
[11:50:28] <imode> meaning if you're careful, you never have to really allocate anything.
[11:51:21] <meff[m]> cool ideas, can't wait until you put your stuff out there in some public form!
[11:51:45] <meff[m]> the space is full of lots of attempts and I really hope one of them win and teach everyone that the web doesn't have to be insecure as shit
[11:52:01] <imode> give us two years. ;)
[11:52:14] <meff[m]> hey that's not that long
[11:52:29] <imode> it's all hobby shit, I'd go for funding but we don't really have a business plan settled apart from offering the first managed instance of this environment and hosting for it.
[11:52:42] <meff[m]> I mean yeah it sounds like y'all are still in the experimentation phase here
[11:53:00] <imode> you should've seen our first phase.
[11:53:06] <imode> it was awesome. horrible, but awesome.
[11:53:16] <meff[m]> hahaha I can imagine
[11:53:22] <imode> we wanted to base it entirely on homomorphic encryption, so we chose boolean circuits.
[11:54:06] <imode> well it turns out you can do some really interesting stuff like translate, say, a set of string rewrite rules to something that _looks_ like boolean circuits.
[11:54:18] *** Joins: rob (~user@194.81.254.84.ftth.as8758.net)
[11:54:22] *** Joins: expix (~louis@amontpellier-652-1-210-55.w90-57.abo.wanadoo.fr)
[11:54:28] <imode> we built a mandelbrot renderer in it.
[11:54:36] <imode> like, just straight up string find/replace rules.
[11:54:58] <meff[m]> hahaha oh gosh
[11:55:02] <meff[m]> that definitely sounds awesome yet horrible
[11:55:15] <imode> that came to an end when we realized that they didn't exactly compose well. think thue (the esolang) but with built-in patterns that did I/O and data transport and stuff.
[11:55:35] <imode> it was neat but it wasn't quite what we wanted.
[11:55:58] <meff[m]> how are y'all planning to handle stuff like I/O faiure?
[11:56:11] <meff[m]> or handling
[11:56:16] <imode> same way we handle anything else. data values.
[11:56:26] <imode> taking some inspiration from clojure on that.
[11:56:46] *** Joins: mahmutov_ (~mahmutov@5.176.50.18)
[11:56:50] *** Joins: tex (~super@user/dix)
[11:56:57] *** Joins: arcatech (~arcatech@user/arcatech)
[11:56:57] <imode> a stack underflow in Feather right now, for example, is technically just a function that maps an empty stack and an operation with arity >0 to a constant value.
[11:57:25] <imode> or, I guess, maps a stack with length < arity and an operation with arity > 0 to a constant value.
[11:57:35] <imode> you do `1 +` and you get `stack-underflow`.
[11:58:35] <imode> you can handle that any way you like. it's how we actually clear the stack, if you'll believe it: we have an anonymous recursive function that just `drop`s until it sees `stack-underflow`, then does a final drop.
[11:59:10] <meff[m]> interesting; how do you "react" to these values like `stack-underflow`, just equality checks?
[11:59:30] <imode> yup, and those equality checks are primitives that return the equivalent of church booleans.
[11:59:42] <imode> so they rely on nothing more than symbolic equivalence as a starter.
[12:00:14] <imode> we had a second iteration that was actually a pet project of mine, called Modal, and it was based off of pattern matching term trees. I actually got a near perfect copy/paste of quicksort in haskell to run in that.
[12:01:11] <imode> https://hastebin.com/ucokumodej.txt
[12:01:12] <mockturtle> [ hastebin ] - hastebin.com
[12:01:23] <imode> quicksort is on line 329.
[12:01:49] <imode> https://git.imode.tech/?p=python/modal;a=blob;f=modal.py;h=e9d0122bf68bbb26ca6b2ee3f7447f78819d9a8c;hb=refs/heads/master
[12:01:52] <mockturtle> [ git.imode.tech Git - python/modal/blob - modal.py ] - git.imode.tech
[12:02:01] <imode> interpreter if you wanna run it.
[12:02:50] <imode> we're still kinda determining what we wanna do, roll with the concatenative language or use something like sentence-like term rewriting.
[12:03:05] <meff[m]> ooh cool cool
[12:03:11] <meff[m]> (taking a look at the interpreter)
[12:04:07] <imode> it's all based around a queue that contains the parenthesized version of the term tree under rewriting, so you can think of this as a kind of modified depth first traversal with pattern matching.
[12:04:28] <imode> had a rough sketch of what this would look like in hardware, too.
[12:04:39] <imode> term rewriting on the metal. :)
[12:04:52] <meff[m]> huh semicolons in Python
[12:05:00] <imode> yeaaah I had a phase.
[12:05:06] <meff[m]> 😀
[12:05:07] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[12:05:30] <imode> cut my teeth on 6502 assembly and then straight into ANSI C, whaddaya expect. :P
[12:06:39] <meff[m]> LOL
[12:06:44] <meff[m]> still very readable tbh
[12:06:50] <meff[m]> just not a style I've really encountered before
[12:07:21] <imode> lines 218 to 229 in the hastebin paste above are my favorite out of that file.
[12:07:48] <imode> being able to type "10 in trinary" and seeing the list of digits printed out was incredibly exciting.
[12:08:26] <imode> also notice that equality was defined earlier on in the file as simple patterns on variables that are guaranteed to be the same.
[12:09:11] <meff[m]> `match` ?
[12:09:42] <imode> ah, I mean in this paste: https://hastebin.com/ucokumodej.txt
[12:09:42] <mockturtle> [ hastebin ] - hastebin.com
[12:10:10] <imode> or are you asking me how match works.
[12:10:20] *** Quits: hub (~hub@user/hub) (Quit: ZNC 1.8.2 - https://znc.in)
[12:10:47] *** Joins: hub (~hub@user/hub)
[12:11:11] <meff[m]> no no, I meant the paste thanks
[12:11:14] <imode> aha.
[12:12:00] <imode> I think if I could pick, and we're currently in the process of picking, I'd probably define all of that as some kind of syntax on top of a concatenative language.
[12:12:14] <imode> pattern matching on stuff like this is inherently expensive.
[12:13:16] <imode> and requires potentially unbounded buffers, which means from a hardware perspective (or even from a simple assembly implementation perspective), you either put a maximum length on the things your variables bind to or you slice stuff out of a giant hunk of memory and pray that you don't try to bind to a 5 million long list.
[12:13:45] <imode> there's some interesting "weaving" you can do to avoid some copying, but your pattern needs to be at least assembled and bound.
[12:14:13] <imode> feels like I'm in a design meeting..
[12:18:14] <meff[m]> LOL
[12:18:26] <meff[m]> giant hunk of memory might be the most "efficient" thing to do
[12:20:06] <imode> the problem is in the copying. when you do something like `sum (?head ?tail)`, for example, you actually need to bind/take values for both variables somewhere, because if you use ?head or ?tail again somewhere in the pattern, it's actually an equality check, and if the equality check fails, the pattern doesn't match. so even if you don't copy, you need to store, say, queue offsets for the start
[12:20:08] <imode> of each comparison.
[12:21:27] <imode> that's why `[?x == ?x] -> [true] [?x == ?y] -> [false]` works. rules get matched on priority, and in the first case, x is bound, and then the term that corresponds to the second usage of x gets compared to the binding.
[12:21:36] <imode> 10 == 10 is true, but 11 == 10 is false.
[12:22:20] <imode> it's interesting when you actually dig down into what an effective method might be for a dynamic language like this.
[12:22:35] <imode> don't even get me started about how you'd build lambdas, combinators or type systems out of this.
[12:24:14] <imode> the original version didn't even have math built-ins, you'd use peano numerals in unary and destructure numbers.
[12:26:19] *** Joins: cepi (~cepi@84.209.137.56)
[12:26:38] <rwb> o/
[12:26:56] <imode> o/
[12:27:04] <rwb> how's your weekend
[12:27:17] <rwb> mine is, uh
[12:27:20] <rwb>  10:57:21 up 20:50,  1 user,  load average: 9.01, 15.71, 16.29
[12:27:27] <cepi> o/
[12:27:42] <imode> ...how many cores.
[12:27:44] <rwb> 8
[12:27:48] <imode> LOL.
[12:27:55] <rwb> that's IO load cause i'm building qtwebengine
[12:27:58] <cepi> oh..
[12:27:58] <rwb> which is basically blink
[12:28:00] <imode> daaaaaaamn.
[12:28:05] <cepi> rough
[12:28:06] <imode> my heart goes out to you.
[12:28:15] <imode> and those poor cores.
[12:29:34] <rwb> i just froze for a couple minutes lol
[12:29:40] <cepi> lmao
[12:29:50] <rwb> i'm building with 8 jobs which requires 32GB of RAM to build comfortably
[12:29:56] <cepi> at that point i might just cry
[12:29:58] <rwb> i have 16 so it swaps every now and then
[12:30:02] <imode> ouch.
[12:30:17] <cepi> oof
[12:31:13] <imode> I have 16 too and I spill over onto my SSD just by using Firefox.
[12:31:46] <cepi> I'm so glad I got 32GB for music production because that'd have been the reality for me too ^ haha
[12:32:28] <rwb> >SSD
[12:32:30] <rwb> hahahahahaha
[12:32:36] <rwb> i'm on a 7200RPM HDD at the moment
[12:32:37] <cepi> always sitting on at least 6-7GB while using firefox with 17 windows open..
[12:32:40] <imode> oh my god.
[12:32:49] <cepi> rwb: i feel for you
[12:32:54] <imode> I mean you probably won't kil it with that.
[12:33:00] <imode> I'll kill my SSD eventually. :P
[12:33:14] <cepi> it'll be fast though :)
[12:33:37] <imode> I've got a clevo laptop coming later in the month.
[12:33:51] <imode> one of the new i7s with a Xe iGPU, 64 GiB of RAM.
[12:33:58] <rwb> i'm afraid of storing important things on an SSD
[12:34:24] <cepi> imode: whoa, how expensive was that thing?
[12:34:40] <imode> cepi: not that expensive! it was like $1400.
[12:35:04] <cepi> not that bad actually.. that's exciting!
[12:35:25] <imode> I bought one to test it. I want something that's just held together by screws.
[12:35:36] <imode> hate taking apart stuff that's held together with plastic clips.
[12:35:48] <cepi> agreed!
[12:37:00] *** Quits: rodolphoeck (~rodolphoe@user/rodolphoeck) (Ping timeout: 252 seconds)
[12:38:06] <imode> what's interesting is that the clevo machine I've got coming is one of the similar models that system76 offers.
[12:38:10] <imode> they just rebrand clevo machines.
[12:38:22] <cepi> well that's good to know haha
[12:39:07] <rwb> from what i've read online you can't recover data from those reliably
[12:39:20] <imode> from what, SSDs or clevo machines.
[12:39:21] <rwb> yes, it tookme 6 mins to regain control and send that message ;^)
[12:39:22] <cepi> from SSDs?
[12:39:24] <rwb> yeah SSDs
[12:39:25] <cepi> omg
[12:39:32] <cepi> 6 minutes :D
[12:39:36] <imode> yikes.
[12:39:59] <rwb> i bought an SSD for my laptop because its HDD started having bad sectors, but nothing for my desktop yet
[12:40:16] <rwb> it has 2x2TB toshibas
[12:40:42] <rwb> i'd have bought HGST if i could find em here
[12:41:03] <imode> isn't grabbing data from an SSD pretty much like just grabbing it from the HDD in many cases.
[12:41:08] <imode> same controller, stuff like that,
[12:41:13] <imode> (roughly)
[12:41:19] <cepi> recovering "deleted" data is harder I've heard too
[12:41:28] <rwb> yeah, but the storage is different, you can't read the dat off platters like you can with HDDs
[12:41:33] <rwb> yeah that's what i was worried about
[12:41:37] <imode> that's true.
[12:41:40] <rwb> what if my SSD gets damaged?
[12:41:45] <cepi> ah yeah, I was just echoing what you wrote earlier rwb haha
[12:42:28] <rwb> so i'd use SSD for / and maybe /home and store everything important in /data (or as i've taken to calling it, /bitplane)
[12:42:39] <mockturtle> Announcing Wildland Client v0.1 [release] (wlodekg) https://lobste.rs/s/yiom4a
[12:42:59] <rwb> even /home is risky
[12:43:13] <rwb> so i'd keep it lightweight (configs etc.) and take regular backups
[12:43:13] <cepi> can't not read "or as i've taken to calling it" without hearing about GNU/Linux in my head
[12:43:21] <rwb> that was what i was going for. :^)
[12:43:41] <cepi> i appreciate it
[12:44:15] <rwb> which reminds me, i should start taking backups!
[12:44:40] <rwb> the first toshiba i bought is jan-2016, the new one is like dec-2019
[12:44:52] <rwb> so i was thinking of backing up important /home stuff via rsync to /bitplane
[12:45:56] <rwb> the really cool thing about portage is that you can pretty much copy /etc/ and /var/lib/portage/world to a new system, do emerge -vauND @world and get your system back up like 90%
[12:46:06] <rwb> (of course some programs like to place their stuff outside /etc/ :^( )
[12:46:14] * sam_ nods enthusiastically ;)
[12:46:15] *** Joins: azazel (~azazel@orphu.arstecnica.it)
[12:46:36] <rwb> that's also why i like pluggable /home
[12:47:06] <rwb> i'm using my desktop as practically a home server, which means i have minidlna etc on it
[12:47:28] <rwb> so the smart tv i stupidly bought can play H.264 AAC videos off it because it's the only codec that it understands
[12:47:35] <sam_> I think uh
[12:47:39] <imode> the problem is.. everything is geared towards SSDs right now, even m.t
[12:47:41] <imode> m.2*
[12:47:42] <sam_> yeah, I tried jellyfish for that
[12:47:49] <sam_> I don't think we have it packaged right now though :|
[12:47:55] <imode> can I even buy a modern laptop with an HDD in it.
[12:48:16] <rwb> idk the laptop i'm talking about was the samsung one that ubuntu bricked originally
[12:48:25] <rwb> like one of the first laptops with UEFI
[12:48:32] <imode> aaaah wow.
[12:48:36] <rwb> that had a buggy UEFI and installing ubuntu on it hard bricked it
[12:48:40] <imode> I'm still rocking a Thinkpad T430.
[12:49:13] <cepi> I have a similar model, imode, I love it! don't use it quite as much as I'd like though
[12:49:26] <imode> it keeps me humble.
[12:49:32] <cepi> it might be one of the X-models
[12:49:34] <iris> I'm using an X230 right now!
[12:50:08] <cepi> imode: exactly! it's great for developing on specifically because you know it'll work fine on a larger set of computers
[12:50:53] <cepi> sorry for putting words in your mouth with my inaccurate use of "exactly".. my bad!
[12:51:07] <imode> nah you were right on the money. :)
[12:51:23] <imode> that's exactly why I use it.
[12:51:23] <cepi> phew! :)
[12:51:47] <rwb> i compile C++ at least partly for living, so i need a strong independent laptop who doesn't need no desktop
[12:52:03] <imode> rent a high-powered dedicated build box. :P
[12:52:15] <rwb> so i might look into the newer lenovo thinkpads, not too new though
[12:52:28] <imode> I have a... what is that, a P52 or something.
[12:52:51] <imode> I used to work at a startup that was developing a Discord competitor and needed to do ungodly amounts of load testing with faux users.
[12:53:08] <imode> had them pay $4k for a lenovo p52 with 128GiB of RAM.
[12:53:16] *** Quits: elus (~elus@S0106a84e3ffbfa53.cg.shawcable.net) (Ping timeout: 268 seconds)
[12:53:35] <imode> that thing ran hot.
[12:53:42] <imode> but I never ran out of memory.
[12:54:26] <rwb> if i boughytought an IBM thinkpad i'd only be able to use it for shitposting as much as libreboot sounds cool :^(
[12:54:36] <cepi> imode: o_o
[12:54:39] <rwb> s/boughytought/bought/ thanks swap :^)
[12:54:51] <cepi> lol
[12:54:55] <imode> to be fair it was a great alliteration.
[12:55:13] <imode> boughtytoughtytought
[12:55:21] <cepi> indeed haha
[12:55:24] <imode> also just buy a system76 machine if you want libreboot.
[12:55:29] <imode> they have ryzens now.
[12:55:58] <imode> my bad I think it's coreboot. still.
[12:57:07] <rwb> also apparently there's a file called jank_monitor_impl.cc in chromium source :^)
[12:57:15] <imode> sigh.
[12:57:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[12:57:32] <rwb> imode: sounds interesting!
[12:57:36] <rwb> i'll check them out
[12:57:49] <rwb> my budget's always a little short, but might be interesting to check out nevertheless
[12:58:00] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[12:58:01] <imode> I'm trying to source "ethical" or at least "reasonable" machines that don't come badged with windoze.
[12:58:23] <imode> https://www.youtube.com/watch?v=OchC8ZzKdKI
[12:58:24] <mockturtle> [ How to Upgrade the System76 Galago Pro Linux Laptop - TekThing Short ] - www.youtube.com
[12:58:55] <cepi> I would 100% use unix all the time if it weren't for games geared toward windows I'm playing with my friends : |
[12:59:01] <imode> proton!
[12:59:15] *** Quits: MerchantOfVenice (~patrick@user/merchantofvenice) (Quit: Konversation terminated!)
[12:59:18] <imode> also look at that beautiful lower body come away just from unscrewing stuff.
[12:59:28] <cepi> Does it work with awful DRM/anti-cheat stuff?
[12:59:29] <imode> mmmmm.
[12:59:34] <imode> yeah, in some games.
[12:59:39] <imode> what do you usually play?
[12:59:46] <imode> https://www.protondb.com/
[13:00:46] <cepi> Tibia (oof), Realm Royale, Beatmania, Age of Empires 2, Destiny 2, DJMax : |
[13:00:56] <cepi> I should really look into that I guess
[13:01:08] <cepi> Would be nice to get away from Windows at last
[13:01:19] <imode> https://lutris.net/
[13:01:20] <mockturtle> [ Lutris - Open Gaming Platform ] - lutris.net
[13:01:35] <imode> in case you just wanna install crap without having to configure it all (and if you don't wanna run it through steam)
[13:01:45] *** Quits: hazardcell (~jhc@141.98.252.251) (Quit: bye!)
[13:02:10] <rwb> i only play factorio and tf2 which Just Work ;^)
[13:02:34] <cepi> Factorio, of course!
[13:03:02] <imode> mindustry is another neat factorio-like that you can play at your desk during work.
[13:03:20] <cepi> So can you still play on Steam game servers? Might have everything I need then
[13:03:35] <cepi> Sounds great imode haha
[13:03:47] <rwb> imode: i should look into it
[13:04:09] <rwb> factorio and incremental games are nerd snipes, or as i've recently taken to calling it, autism tests
[13:04:27] <cepi> I'm addicted to Kittens Game..
[13:04:46] *** Joins: x64k (~x64k@185.65.135.232)
[13:05:10] <imode> rwb: TIS-100 was my first nerd snipe.
[13:05:20] <imode> that was entertaining.
[13:05:27] <rwb> i haven't played that yet
[13:05:28] <cepi> Don't have autism though, only part of the criteria for the diagnose.. you're a liar! /s
[13:05:29] <imode> actually maybe it was corewar.. hm.
[13:05:39] <rwb> i should also play shenzen io when work is lighter
[13:05:44] <cepi> it is fun
[13:05:48] <imode> who am I kidding, everything I work on outside of work is a nerd snipe.
[13:06:53] <bsandro> i usually have mobile farming game launched all my workday OTL
[13:07:06] <rwb> cookie clicker anyone?
[13:07:16] <imode> ol' skool.
[13:07:17] <cepi> rwb: stopped recently!
[13:07:20] <rwb> i usually give up when it becomes farm optimization then restart it 6 months later
[13:07:30] <bsandro> i dislike cellphone games a lot :D
[13:07:31] <imode> idlerpg.
[13:07:36] <rwb> 777x and 666x elder frenzy
[13:07:37] <imode> best game.
[13:07:38] <rwb> aaaaaaaaaaaaa
[13:07:47] <rwb> i've only had that happen ONCE and it was AMAZING
[13:08:26] <cepi> Trimps?
[13:08:42] <bsandro> anyone ever tried HOVALAAG btw?
[13:08:53] <rwb> cepi: ?
[13:08:59] <imode> rwb: https://trimps.github.io/
[13:09:00] <mockturtle> [ Trimps 5.5.1 ] - trimps.github.io
[13:09:11] <cepi> yupyup
[13:09:11] <rwb> :genuine_worry:
[13:09:11] *** Joins: wyclif (~wyclif@user/wyclif)
[13:09:19] <imode> bsandro: I have not!
[13:09:20] <cepi> sorry!
[13:09:23] <imode> looks neat.
[13:09:32] <imode> verilog-like HDL?
[13:09:47] <imode> ahhhh nope it's a CPU.. neat.
[13:09:53] <cepi> looks cool haha
[13:10:03] <imode> J1 forth?! a netizen after my own heart.
[13:11:16] <rwb> nooooo not another nerdsnipe ;^(
[13:11:25] <cepi> :(
[13:12:55] <imode> the internet in megaman battle network was the best version of the internet.
[13:13:10] *** Joins: mercerist (~mercerist@user/mercerist)
[13:13:54] *** Joins: emperor_time (~kurapika@117.222.64.84)
[13:13:58] *** Joins: soczol (~soczol@user/soczol)
[13:14:53] <Retropikzel> Many things try to kill you but no ads?
[13:15:03] <imode> there you go!
[13:21:25] <imode> sweet dreams and happy trails, this unit needs sleep. o/
[13:21:30] <rwb> l8r
[13:23:03] <cepi> l8r sk8r
[13:24:34] <rwb> [22533/23897]
[13:24:36] <rwb> so close
[13:25:57] *** Quits: milosz (~milosz@user/milosz) (Ping timeout: 252 seconds)
[13:31:44] *** Joins: maahl (~maahl@cm-84.209.53.232.getinternet.no)
[13:32:51] *** Joins: hlz (~rue@1-162-45-43.dynamic-ip.hinet.net)
[13:33:11] *** supersandro2000 is now known as Guest6459
[13:33:11] *** Joins: supersandro20007 (~supersand@i5C756554.versanet.de)
[13:33:11] *** Quits: Guest6459 (~supersand@i5C756554.versanet.de) (Killed (tin.libera.chat (Nickname regained by services)))
[13:33:11] *** supersandro20007 is now known as supersandro2000
[13:36:05] <amirouche> trimps ftw!
[13:36:10] <rwb> >-DHAVE_SCTP
[13:36:13] <rwb> lol
[13:39:42] *** Quits: mercerist (~mercerist@user/mercerist) (Quit: mercerist)
[13:41:37] <cepi> amirouche: yas!
[13:45:03] *** Joins: mercerist (~mercerist@user/mercerist)
[13:46:02] <mockturtle> Gemini is Useless [web philosophy] (lim) https://lobste.rs/s/3nsvkk
[13:46:52] <rwb> w o w
[13:47:38] <bsandro> what's with all that gemini bashing recently
[13:47:43] <martian67> lol flamebait
[13:47:54] *** Quits: maahl (~maahl@cm-84.209.53.232.getinternet.no) (Remote host closed the connection)
[13:53:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[13:54:00] *** Quits: polve (~polve@user/polve) (Ping timeout: 252 seconds)
[13:55:04] *** Joins: s1 (~s1@103.78.115.42)
[13:55:04] *** Quits: s1 (~s1@103.78.115.42) (Changing host)
[13:55:04] *** Joins: s1 (~s1@fedora/s1)
[13:56:18] *** Joins: polve (~polve@user/polve)
[13:57:15] <rwb> Gemini: "Write blog posts" as a moral imperative
[13:58:11] <emperor_time> martian67: Why do you think so?
[14:01:51] <rwb> the article seems to be arguing is because gemini is useless and obscure it's good because nobody will try to do anything interesting with their blog protocol
[14:02:56] <emperor_time> rwb: What do you think about Gemini?
[14:03:22] <rwb> i think it's pretty pointless
[14:03:31] *** Joins: leah2 (~leah@vuxu.org)
[14:04:13] *** Joins: whatsyourask (~whatsyour@user/whatsyourask)
[14:04:14] <emperor_time> rwb: Do you think Gemini is trying to solve a real problem?
[14:04:34] <rwb> no, unless writing blog posts where you can't add inline links is a real problem
[14:08:38] *** Joins: wyclif (~wyclif@user/wyclif)
[14:09:47] *** Quits: Qria (uid25348@id-25348.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[14:09:54] *** Joins: maahl (~maahl@cm-84.209.53.232.getinternet.no)
[14:10:02] *** Quits: bkraptor (~bkraptor@80.111.141.51) (Quit: Leaving)
[14:11:13] <ignaloidas> the bashing is fair, but it should have been ended like two months ago
[14:11:22] <ignaloidas> no need to continue beating a dead horse
[14:14:57] <x64k> Gemini bashing was very aptly predicted by XKCD in this comic strip many years ago
[14:15:01] <x64k> https://xkcd.com/359/
[14:15:01] <mockturtle> [ Rock Band ] - xkcd.com
[14:16:20] <emperor_time> x64k: I don't get it.
[14:16:49] <cepi> People are having fun with Gemini, people are bashing Gemini for not being their kind of fun I think
[14:16:55] *** Quits: atisu (~atisu@catv-176-63-233-143.catv.broadband.hu) (Ping timeout: 244 seconds)
[14:17:11] <emperor_time> cepi: Maybe.
[14:17:13] <x64k> Everyone's raging about how it's useless because it poorly solves a bunch of problems that WWW solves better
[14:17:32] <kline> This comment is, essentially, correct. Gemini is useless: it can't do nearly anything that HTTP/HTML can, its design ignores most of the progress in web technology over the last 30 years, and its feature set is so minimalist that it forces the user far outside their normal experience of what the web should be like.
[14:17:41] <kline> imagine posting this and not realising _thats the point_
[14:17:47] <x64k> and it does, but it's also something a bunch of people are just doing for fun, and which doesn't really aim to do all the things that the web does because the people who use it don't think they're important
[14:18:35] *** Quits: imode (~imode@user/imode) (Ping timeout: 272 seconds)
[14:18:54] <x64k> which I sort of get tbh, e.g. comment posting (which I think can actually be done?) is something that I found super interesting for a short period of time between... 2003 and 2009 or so?
[14:18:56] <cepi> right, I don't think people who use Gemini necessarily believe it will take over the world, so let them have their fun
[14:19:32] <emperor_time> cepi: What if they do believe it is going to take over the world?
[14:19:33] <x64k> It's kindda like dwm for web protocols
[14:19:39] <x64k> I guess, I... don't really use dwm either
[14:19:41] <cepi> emperor_time: I don't think that matters..
[14:20:13] *** Quits: Retropikzel (~Retropikz@dy5nfwp0z53m484z134-y-4.rev.dnainternet.fi) (Quit: Leaving)
[14:20:25] <emperor_time> cepi: I don't think it warrants a lengthy discussion.
[14:20:57] <cepi> Precisely :)
[14:23:04] <emperor_time> cepi: It's a toy compared to HTTP. It won't take over. I think people who bash it are like people who would rightly get annoyed when the new kids say that the 1920s or 1960s were the best time to be alive because they weren't no matter what the movies tell you.
[14:24:30] <emperor_time> cepi: I think that is what `gerikson` meant.
[14:28:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[14:28:50] <gerikson> emperor_time: it's a bit more nuanced than that ;)
[14:28:57] <gerikson> (my argument)
[14:29:27] <emperor_time> gerikson: Obviously, I was crude. You can better explain it.
[14:30:15] <gerikson> I think a lot of people who pine for the lost golden age of the internet think it was that way because the tech was simple, and not because the users were fewer, more homogenous, and more acculturated
[14:30:52] <gerikson> so replicating the limited tech does nothing
[14:31:05] <gerikson> *other* than artificially limit the people interested in it
[14:31:19] <mockturtle> Unintentional forensic edit logs via font changes [security] (0x2ba22e11) https://lobste.rs/s/ncifk6
[14:31:25] <gerikson> which is a) a bit creepy, and b) also what lobsters does, so...
[14:32:02] <gerikson> emperor_time: stuff like the fediverse tries to look outwards, and expand, while gemini/lobsters looks inwards and limits
[14:32:14] <emperor_time> gerikson: Certainly.
[14:32:38] <gerikson> but tbh the 'rant' tag on my post is apt
[14:32:40] <ignaloidas> the problems with gemini isn't that it is useless, but that it's community somewhat wants to position it against HTTP, which is a no-go
[14:32:42] <emperor_time> gerikson: I suppose they are quite aware of that.
[14:33:31] *** Joins: voltage_ (voltage@user/voltage)
[14:34:23] <gerikson> I'll check through the comments and maybe expand on my post...
[14:35:52] <emperor_time> gerikson: It's a club, I suppose. Maybe you could include that. It would be difficult to find evidence, but having been part of these communities I feel it is quite apparent. There is a lingering sense of intellectual and technical supremacy, almost like among the people who *like* Jazz.
[14:39:46] *** Joins: wyclif (~wyclif@user/wyclif)
[14:39:49] <cepi> emperor_time: what is the difference between a community and a club in the sense you are using them? Clubs being more exclusive with communities being more inclusive?
[14:40:10] <gerikson> sure, I get that, btu for some reason the people are outside the club, giving out flyers and trying entice people in
[14:40:36] <gerikson> and if you try to say "this club doesn't sound like something for me" they get whiny ;)
[14:40:40] <emperor_time> cepi: I didn't realise that I used them in a different sense. But the difference `gerikson` pointed is what I was trying to give a dramatic tone to, lol.
[14:41:13] <cepi> emperor_time: oh I'm not sure you were, I just wanted to make sure I understood your point :)
[14:42:22] <emperor_time> cepi: I think you correctly extracted more from what I said. What you pointed out is a good piece of vocabulary detail. I shall remember this in the future.
[14:45:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[14:56:04] *** Joins: wyclif (~wyclif@user/wyclif)
[14:56:21] <mockturtle> Linus explaining how mRNA vaccines work to an anti-vaxxer on the Kernel mailing list [linux] (samebchase) https://lobste.rs/s/oezs6h
[15:01:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[15:02:25] *** Quits: emperor_time (~kurapika@117.222.64.84) (Quit: leaving)
[15:04:54] *** Joins: Retropikzel (~Retropikz@dy5nfwp0z53m484z134-y-4.rev.dnainternet.fi)
[15:06:00] *** Joins: atisu (~atisu@catv-176-63-233-143.catv.broadband.hu)
[15:08:59] *** Joins: seschwar (~seschwar@user/seschwar)
[15:12:11] *** Joins: soczol_ (~soczol@user/soczol)
[15:12:26] *** Joins: wyclif (~wyclif@user/wyclif)
[15:13:25] *** Quits: soczol (~soczol@user/soczol) (Ping timeout: 256 seconds)
[15:16:10] *** Joins: cdown_ (~cdown@163.114.131.1)
[15:17:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[15:18:57] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 272 seconds)
[15:30:11] *** Joins: wyclif (~wyclif@user/wyclif)
[15:35:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[15:39:35] *** Quits: jungleboogie (~jungleboo@wireguard/tunneler/jungleboogie) (Read error: Connection reset by peer)
[15:43:15] *** Joins: Guest9 (~Guest9@43.250.157.5)
[15:43:36] *** Joins: jungleboogie (~jungleboo@wireguard/tunneler/jungleboogie)
[15:44:06] *** Joins: loc (~loc@174-045-102-241.res.spectrum.com)
[15:45:07] <Guest9> how to sort list of words by rhyming words/similar letter combination i.e. nation, ment etc.
[15:46:14] <pe> I have to remember what that thing's called.
[15:47:30] *** Joins: wyclif (~wyclif@user/wyclif)
[15:47:43] <pe> https://en.wikipedia.org/wiki/Soundex etc.
[15:47:43] <mockturtle> [ Soundex - Wikipedia ] - en.wikipedia.org
[15:48:46] <Guest9> thanks pe
[15:48:54] *** Quits: loc (~loc@174-045-102-241.res.spectrum.com) (Ping timeout: 264 seconds)
[15:50:09] <pe> Rhyming happens at the end, but you might find something from there.
[15:50:31] <Guest9> any readymade function (withotu writing macro/program) can resolve it? (in programs like excel/google spreadsheet/any online tool)
[15:51:39] <Guest9> thanks for keyword, i could google by that keyword: https://www.informit.com/articles/article.aspx?p=1848528
[15:51:40] <mockturtle> [ Using Fuzzy Matching to Search by Sound with Python | | InformIT ] - www.informit.com
[15:52:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[15:57:10] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:58:35] *** Joins: emperor_time (~emperor_t@117.222.64.84)
[16:01:16] *** Joins: Scrutinizer (Scrutinize@user/scrutinizer)
[16:03:04] <ubitux> does anyone happen to know a place where text layout/shaping/rendering is discussed, typically around harfbuzz/freetype technologies and maybe more?
[16:03:19] <ubitux> there are mailing lists but can't find much irc channels
[16:03:44] <ubitux> on matrix/discord/gitter maybe?
[16:06:27] *** Quits: mahmutov_ (~mahmutov@5.176.50.18) (Ping timeout: 244 seconds)
[16:12:51] <pe> lol
[16:13:23] *** Quits: mercerist (~mercerist@user/mercerist) (Quit: mercerist)
[16:13:36] <pe> What do you want to discuss about it?
[16:13:49] <pe> Only a handful of people work on it.
[16:21:32] <ubitux> well typically right now i struggle sorting out what i need from all the metrics and different units
[16:22:32] <ubitux> for example, i'm wondering if the x/y bearing will work with the glyph control box, bounding box, or font control box, or font bounding box, in which units they are, etc
[16:22:53] <ubitux> i'm working at the outline level, so i want to ignore everything related to pixel units
[16:22:56] <ubitux> that sort of stuff.
[16:23:23] <ubitux> and the thing is, after shaping i get yet another set of metrics in different units which i have to work with
[16:23:34] *** Joins: wyclif (~wyclif@user/wyclif)
[16:24:21] <ubitux> the freetype doc is not that bad, but it covers just not quite enough afaict for my needs
[16:24:49] <ubitux> anyway ¯\_(ツ)_/¯
[16:26:35] *** Joins: mercerist (~mercerist@user/mercerist)
[16:30:44] *** Quits: mercerist (~mercerist@user/mercerist) (Ping timeout: 244 seconds)
[16:40:07] *** Joins: speckz (~speckz@2600:1700:ce0:bf00:a85b:15c8:3ff3:762f)
[16:45:41] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 252 seconds)
[16:48:10] *** Quits: whatsyourask (~whatsyour@user/whatsyourask) (Quit: whatsyourask)
[16:52:25] *** Joins: WayneS (~WayneS@user/waynes)
[16:53:35] *** Joins: BrenGamis (~BrenGamis@103.139.178.13)
[16:54:31] *** Joins: masoudd (~masoudd@user/masoudd)
[16:56:16] <pe> You can ask Behdad Esfahbod if he doesn't know of any appropriate channels.
[16:56:29] <pe> I've been fine with ascent/descent and advance so far personally.
[16:56:49] <pe> With the general stuff, this appears to be not dead e.g. https://typedrawers.com/categories/font-technology
[16:56:50] <mockturtle> [ Font Technology ] - typedrawers.com
[16:57:27] <pe> ubitux: nothing should be in pixels, nothing at all, ever.
[16:58:23] <ubitux> yeah i communicated with Behdad at times, mainly in hb bug tracker
[16:58:26] <pe> Well, except when using bitmap fonts.
[16:58:42] <ubitux> i'm just looking for a chat medium
[16:59:11] <ubitux> pe: most of freetype and hb api relies on pixel or pixel derivates
[16:59:32] *** Joins: xinau (~Thunderbi@2a02:908:f81:43c::fba)
[16:59:38] <ubitux> if i start getting glyphs without scale, hell breaks
[17:00:38] <pe> Hm. Never met pixels in Pango.
[17:01:48] <pe> It just has a mapping between its own units and device units.
[17:02:42] <pe> And the rest is pts.
[17:03:52] *** Quits: BrenGamis (~BrenGamis@103.139.178.13) (Quit: Client closed)
[17:04:35] *** Joins: BrenGamis (~BrenGamis@103.139.178.13)
[17:04:40] *** Parts: BrenGamis (~BrenGamis@103.139.178.13) ()
[17:04:48] *** Joins: BrenGamis (~BrenGamis@103.139.178.13)
[17:05:40] <BrenGamis> And back, meff[m] do you have the semantic web link :)
[17:07:46] <ubitux> pe: well, pango rasterize in a bitmap
[17:07:57] <ubitux> so it's actually working with pixels
[17:08:04] <ubitux> afaict it doesn't work with outlines directly
[17:08:25] <pe> ubitux: most of my work with Pango didn't involve bitmaps but vector surfaces.
[17:09:00] <pe> Measured in pt, not px.
[17:09:07] *** Joins: mercerist (~mercerist@user/mercerist)
[17:09:49] <ubitux> okay; it doesn't work with the vector data from the font though
[17:10:25] <pe> What?
[17:10:44] <ubitux> pango doesn't extract the vectorial outlines of a font
[17:10:57] <ubitux> it simply uses FT to rasterize in a bitmap
[17:11:07] <pe> When it has to, yeah.
[17:11:26] <ubitux> it *never* extracts vectorial outlines :P
[17:11:30] <pe> But when you render to PDF, nothing is rasterized at any point.
[17:11:33] *** Joins: mahmutov_ (~mahmutov@5.176.50.18)
[17:12:32] <ubitux> how is the text stored in a pdf?
[17:13:33] *** Quits: mercerist (~mercerist@user/mercerist) (Ping timeout: 264 seconds)
[17:14:42] <pe> It embeds a subset of the font file (typically) and you can index into that. Text in PDF is a mess.
[17:15:11] <pe> Pango/Harfbuzz still decides where everything goes.
[17:15:14] <ubitux> ok so just refering glyph indices i guess
[17:15:28] <ubitux> don't even need to work with vectorial data
[17:15:43] <ubitux> anyway, i'm at a different level
[17:15:44] <pe> Or you can tell it to render an outline explicitly, and it will do it in vectors.
[17:16:11] <ubitux> i'm not seeing any code related to vector outlines in pango
[17:16:22] <ubitux> (which is what i'm interested in)
[17:16:34] <pe> Might be in pango/cairo/pangocairo.
[17:16:51] <ubitux> oh in cairo yeah
[17:16:53] <ubitux> ok
[17:18:01] <pe> ubitux: https://developer.gimp.org/api/2.0/pango/pango-Cairo-Rendering.html#pango-cairo-layout-path
[17:18:02] <mockturtle> [ Cairo Rendering ] - developer.gimp.org
[17:18:25] <ubitux> yeah cairo has some outline code
[17:18:47] <ubitux> which is very similar to internal freetype code actually
[17:19:01] <pe> Two two libraries aren't exactly spectacularly separated. :)
[17:20:12] <pe> Cairo's toy text API is different from the above.
[17:21:10] <pe> https://www.cairographics.org/manual/cairo-text.html#cairo-show-text
[17:21:10] *** Joins: JordiGH (~jordi@fencepost.gnu.org)
[17:21:10] *** Quits: JordiGH (~jordi@fencepost.gnu.org) (Changing host)
[17:21:10] *** Joins: JordiGH (~jordi@user/jordigh)
[17:21:12] <mockturtle> [ text: Cairo: A Vector Graphics Library ] - www.cairographics.org
[17:22:32] <pe> But maybe one calls the other.
[17:23:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[17:27:10] *** Quits: BrenGamis (~BrenGamis@103.139.178.13) (Quit: Client closed)
[17:30:02] *** Quits: xinau (~Thunderbi@2a02:908:f81:43c::fba) (Quit: xinau)
[17:31:01] *** Joins: jaevanko (~jaevanko@2600:1700:1330:2bef:5548:773a:cf10:a3a1)
[17:33:59] *** Joins: l554 (~l554@172.58.231.192)
[17:34:53] *** Joins: wyclif (~wyclif@user/wyclif)
[17:38:22] *** Joins: masoudd_ (~masoudd@user/masoudd)
[17:39:10] *** Joins: anonymous (~river@tilde.team/user/river)
[17:39:57] *** Quits: fedorafan (~fedorafan@user/fedorafan) (Quit: Textual IRC Client: www.textualapp.com)
[17:40:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[17:41:08] *** Joins: hub| (~hub@user/hub)
[17:41:25] *** Joins: soczol (~soczol@user/soczol)
[17:41:29] *** Joins: x64k_ (~x64k@185.65.135.232)
[17:41:34] *** Joins: rob_ (~user@194.81.254.84.ftth.as8758.net)
[17:41:45] *** Joins: mahmutov (~mahmutov@5.176.50.18)
[17:42:29] *** Joins: jhc (~jhc@141.98.252.251)
[17:43:42] *** Joins: l554_ (~l554@172.58.231.192)
[17:44:19] *** Quits: paruh (~paruh@92.60.39.18) (Quit: paruh)
[17:44:30] *** Joins: hlz_ (~rue@1-162-45-43.dynamic-ip.hinet.net)
[17:44:38] *** Quits: seschwar (~seschwar@user/seschwar) (Killed (NickServ (GHOST command used by seschwar1!~seschwar@dyndsl-092-252-093-096.ewe-ip-backbone.de)))
[17:44:43] *** Joins: seschwar1 (~seschwar@dyndsl-092-252-093-096.ewe-ip-backbone.de)
[17:45:37] *** Parts: l554_ (~l554@172.58.231.192) ()
[17:47:12] *** Quits: masoudd_ (~masoudd@user/masoudd) (Ping timeout: 244 seconds)
[17:47:56] *** Joins: paruh (~paruh@92.60.39.18)
[17:48:14] *** Quits: jaevanko (~jaevanko@2600:1700:1330:2bef:5548:773a:cf10:a3a1) (*.net *.split)
[17:48:14] *** Quits: mahmutov_ (~mahmutov@5.176.50.18) (*.net *.split)
[17:48:14] *** Quits: l554 (~l554@172.58.231.192) (*.net *.split)
[17:48:14] *** Quits: masoudd (~masoudd@user/masoudd) (*.net *.split)
[17:48:14] *** Quits: speckz (~speckz@2600:1700:ce0:bf00:a85b:15c8:3ff3:762f) (*.net *.split)
[17:48:14] *** Quits: soczol_ (~soczol@user/soczol) (*.net *.split)
[17:48:14] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[17:48:14] *** Quits: hlz (~rue@1-162-45-43.dynamic-ip.hinet.net) (*.net *.split)
[17:48:14] *** Quits: x64k (~x64k@185.65.135.232) (*.net *.split)
[17:48:14] *** Quits: hub (~hub@user/hub) (*.net *.split)
[17:48:14] *** Quits: rob (~user@194.81.254.84.ftth.as8758.net) (*.net *.split)
[17:48:14] *** Quits: expix (~louis@amontpellier-652-1-210-55.w90-57.abo.wanadoo.fr) (*.net *.split)
[17:48:14] *** Quits: river (~river@tilde.team/user/river) (*.net *.split)
[17:49:40] *** Joins: mercerist (~mercerist@user/mercerist)
[17:49:43] *** Joins: l554 (~l554@172.58.231.192)
[17:49:44] <mockturtle> SSH quoting [linux unix] (nixcraft) https://lobste.rs/s/8tki7j
[17:51:23] *** Joins: digilink (~digilink@user/digilink)
[17:52:22] *** Joins: wyclif (~wyclif@user/wyclif)
[17:55:32] *** Joins: leah2 (~leah@vuxu.org)
[17:56:00] *** Joins: chronos (terminal@gateway/vpn/protonvpn/chronos)
[17:56:15] *** Joins: bontaq (~user@ool-18e47f8d.dyn.optonline.net)
[17:57:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[17:58:30] *** Quits: Guest9 (~Guest9@43.250.157.5) (Ping timeout: 264 seconds)
[18:01:20] <mockturtle> Toward Vagrant 3.0 [ruby go devops virtualization] (reezer) https://lobste.rs/s/7ijtwb
[18:05:03] *** Quits: avakand (~root@static.164.226.201.195.clients.your-server.de) (Quit: WeeChat 3.1)
[18:05:18] *** Joins: l__q (~modinfo@user/modinfo)
[18:05:19] *** Joins: avakand (~root@static.164.226.201.195.clients.your-server.de)
[18:08:35] *** anonymous is now known as river
[18:10:00] *** Joins: wyclif (~wyclif@user/wyclif)
[18:15:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 264 seconds)
[18:16:15] *** Joins: wyclif (~wyclif@user/wyclif)
[18:16:28] *** Quits: pacbard (~pacbard@user/pacbard) (Quit: ZNC 1.8.2 - https://znc.in)
[18:21:20] *** Quits: Guest1449 (noteness@gateway02.insomnia247.nl) (Changing host)
[18:21:20] *** Joins: Guest1449 (noteness@user/noteness)
[18:21:20] *** Guest1449 is now known as noteness
[18:21:40] *** Quits: martian67 (~martian67@user/martian67) (Ping timeout: 252 seconds)
[18:21:53] *** Joins: martian67| (~martian67@user/martian67)
[18:24:07] *** SirRippovMaple3 is now known as SirRippovMaple
[18:26:13] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 272 seconds)
[18:27:54] *** Parts: l554 (~l554@172.58.231.192) ()
[18:28:08] *** Quits: wyclif (~wyclif@user/wyclif) (Quit: Lost terminal)
[18:30:15] *** rany is now known as Guest505
[18:30:15] *** Quits: Guest505 (~rany@user/rany) (Killed (strontium.libera.chat (Nickname regained by services)))
[18:30:21] *** Quits: chronos (terminal@gateway/vpn/protonvpn/chronos) (Quit: WeeChat 2.8)
[18:30:31] *** Joins: Guest505 (~rany@user/rany)
[18:31:10] *** Joins: rany (~rany@user/rany)
[18:31:53] *** Quits: Guest505 (~rany@user/rany) (Client Quit)
[18:32:19] *** Joins: dmathieu (~textual@pop.92-184-110-103.mobile.abo.orange.fr)
[18:38:37] *** Quits: erm67 (~erm67@2001:470:69fc:105::5cc) (Quit: issued !quit command)
[18:38:54] *** Quits: dmathieu (~textual@pop.92-184-110-103.mobile.abo.orange.fr) (Ping timeout: 252 seconds)
[18:47:53] *** Joins: shapr (~user@pool-108-28-144-11.washdc.fios.verizon.net)
[18:50:29] *** Quits: freddy (~freddy@kushida.uberspace.de) (Ping timeout: 252 seconds)
[18:50:41] *** Joins: freddy (~freddy@kushida.uberspace.de)
[18:51:06] *** Quits: SirRippovMaple (~SirRippov@ns527547.ip-192-99-37.net) (Quit: Ping timeout (120 seconds))
[18:51:08] *** Joins: noteness_ (noteness@user/noteness)
[18:51:33] *** Joins: SirRippovMaple (~SirRippov@ns527547.ip-192-99-37.net)
[18:51:34] *** Quits: noteness (noteness@user/noteness) (Ping timeout: 252 seconds)
[18:51:34] *** Quits: skyl4rk (~tlvb@user/tlvb) (Ping timeout: 252 seconds)
[18:52:06] *** Quits: eroc19907 (~eroc1990@068-116-193-243.res.spectrum.com) (Ping timeout: 252 seconds)
[18:52:29] *** Joins: pacbard (~pacbard@user/pacbard)
[18:52:47] *** Joins: eroc19907 (~eroc1990@68.116.193.243)
[18:53:09] *** Joins: skyl4rk (~tlvb@user/tlvb)
[18:56:05] *** Quits: emperor_time (~emperor_t@117.222.64.84) (Quit: leaving)
[18:58:44] *** Joins: dkmueller (~dkmueller@2a01:c22:7262:e300:7229:8c74:cc39:3a35)
[19:03:49] *** Joins: mouseghost (~draco@user/mouseghost)
[19:13:16] *** Quits: kshockey (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.0 - https://znc.in)
[19:17:05] *** Joins: chronos (terminal@gateway/vpn/protonvpn/chronos)
[19:20:28] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2-rc1)
[19:32:07] *** Joins: drobilla (~user@104-195-158-225.cpe.teksavvy.com)
[19:36:00] *** Quits: dkmueller (~dkmueller@2a01:c22:7262:e300:7229:8c74:cc39:3a35) (Quit: WeeChat 3.1)
[19:42:59] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[19:42:59] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[19:42:59] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[19:43:11] *** Joins: mambang (~mambang@user/mambang)
[19:45:47] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Client Quit)
[19:49:19] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[19:49:19] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[19:49:19] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[19:51:12] *** Quits: cepi (~cepi@84.209.137.56) (Quit: Ping timeout (120 seconds))
[20:03:52] *** Joins: home (~home@user/home)
[20:06:11] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Ping timeout: 244 seconds)
[20:12:39] *** Quits: Retropikzel (~Retropikz@dy5nfwp0z53m484z134-y-4.rev.dnainternet.fi) (Quit: Leaving)
[20:15:25] *** Quits: mahmutov (~mahmutov@5.176.50.18) (Ping timeout: 268 seconds)
[20:19:08] *** Joins: zealot (~zealot@117.222.64.84)
[20:25:53] *** Quits: zealot (~zealot@117.222.64.84) (Quit: leaving)
[20:29:24] *** Quits: home (~home@user/home) (Remote host closed the connection)
[20:30:01] *** Joins: home (~home@user/home)
[20:30:26] *** Quits: home (~home@user/home) (Remote host closed the connection)
[20:30:43] *** Joins: home (~home@user/home)
[20:31:47] <companion_cube> https://news.ycombinator.com/item?id=27482243 so for once this is an interesting thread from HN
[20:31:48] <mockturtle> [ Do You Really Need Redis? How to Get Away with Just PostgreSQL | Hacker News ] - news.ycombinator.com
[20:32:07] <companion_cube> I'm still not entirely sure whether redis' persistence with write-ahead is really good or not
[20:35:16] *** Quits: mambang (~mambang@user/mambang) (Quit: Leaving)
[20:35:22] *** Joins: cepi (~cepi@cm-84.209.137.56.getinternet.no)
[20:37:34] <chronos> companion_cube: noticed HN's userbase is going downhill lately. People are getting oddly hostile, and content marketing cruft is starting to pop up more. Not sure if I'm just noticing, or it's gotten worse somehow lately.
[20:37:47] <Church> Just noticing it
[20:37:48] <mockturtle> Optimizing for Free Hosting — Elixir Deployments [elixir] (soulcutter) https://lobste.rs/s/rmq30e
[20:37:56] <Church> Not truly getting appreciably worse in my mind
[20:38:22] *** Joins: ghurabah (~chatzilla@194.99.104.12)
[20:39:48] *** Quits: ghurabah (~chatzilla@194.99.104.12) (Client Quit)
[20:39:49] <companion_cube> there's been blogspam for a long time
[20:39:59] <companion_cube> but still some interesting threads with interesting people showing up
[20:40:05] <companion_cube> like antirez in this case,actually
[20:40:07] *** Quits: home (~home@user/home) (Remote host closed the connection)
[20:40:16] <chronos> blogspam for sure, but lately there's been blatent marketing crap showing up and getting voted positively
[20:40:27] <chronos> And more political nonsense in the disucssions, sadly
[20:41:06] <chronos> again, maybe the novelty has worn off and i'm just noticing it more
[20:41:48] <companion_cube> heh
[20:41:50] *** Joins: home (~home@user/home)
[20:41:57] *** Joins: ghurabah (~chatzilla@193.27.14.84)
[20:42:05] <companion_cube> soemtimes it's also interesting to see the marketing stuff
[20:42:15] <companion_cube> like the browser-in-the-cloud thing
[20:42:32] <companion_cube> (what's the name?)
[20:42:47] <Church> God I forgot how odd some of the... free software people I know are.
[20:43:03] <Church> Odd and insufferable. :|
[20:43:04] <companion_cube> ah, Mighty
[20:43:09] <companion_cube> that was an amazing thread
[20:43:11] *** Quits: jess (~jess@libera/staff/jess) ()
[20:43:20] <chronos> I remember something about a guy writing a javascript os on eth showing up there
[20:43:29] *** Quits: ghurabah (~chatzilla@193.27.14.84) (Client Quit)
[20:43:32] <chronos> that was interesting in more of a "why would you do this" sort of way
[20:43:37] *** Joins: ghurabah (~chatzilla@193.27.14.84)
[20:43:45] <chronos> someone decided that was worth sending into the world...
[20:45:03] <Church> I'm arguing with someone (again repeating the same argument as years ago) on why you might not want to use TLS1.0 and self signed certs even on your personal web page
[20:46:01] <chronos> Are they saying that there's no need for tls on a personal site, or they want to do it in a goofy way
[20:47:01] <Church> chronos: Very, very, verrrryyy free software in the most odd and minimal way
[20:47:21] *** Joins: cdown (~cdown@89.32.122.5)
[20:47:23] <Church> Doesn't want to worry about getting offlined by a central CA and also thinks TOFU is a grand idea
[20:48:06] <chronos> Church: Oh ok, so FS past all practicality then, gotcha
[20:48:30] <Church> chronos: Yeahhhh they're nuts but I get a neat convo out of them now and then
[20:48:51] <chronos> Church: I think you'd need to be posting some pretty screwy stuff to get taken down by a CA
[20:49:21] <chronos> Church: that's true, sometimes people with out there ideas have some good ideas too, original thinkers in some cases get a little too far into their ideas
[20:50:09] *** Quits: cdown_ (~cdown@163.114.131.1) (Ping timeout: 264 seconds)
[20:53:39] *** Quits: WayneS (~WayneS@user/waynes) (Ping timeout: 252 seconds)
[20:54:35] *** Quits: arnt (~arnt@pitta.toroid.org) (Remote host closed the connection)
[20:54:46] *** Joins: arnt (~arnt@pitta.toroid.org)
[20:56:23] <Church> chronos: Yeah they raised sci-hub as an example.
[20:56:28] <home> hello
[20:56:42] <Church> Got their cert struck by Comodo under the threat of legal pressure iirc
[20:58:38] *** Joins: arcatech (~arcatech@user/arcatech)
[21:00:14] *** Quits: ghurabah (~chatzilla@193.27.14.84) (Remote host closed the connection)
[21:02:41] *** Joins: jaevanko (~jaevanko@2600:1700:1330:2bef:5548:773a:cf10:a3a1)
[21:04:22] *** Quits: chronos (terminal@gateway/vpn/protonvpn/chronos) (Quit: WeeChat 2.8)
[21:13:27] *** Quits: home (~home@user/home) (Remote host closed the connection)
[21:14:03] *** Joins: home (~home@user/home)
[21:14:43] *** Quits: home (~home@user/home) (Remote host closed the connection)
[21:14:59] *** Joins: home (~home@user/home)
[21:16:38] *** Quits: river (~river@tilde.team/user/river) (Quit: Leaving)
[21:25:26] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[21:25:26] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[21:25:26] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[21:29:08] *** Joins: mahmutov (~mahmutov@5.176.10.118)
[21:29:52] <manicennui> Is Tcl still state-of-the-art for testing programs written in C?
[21:30:01] <manicennui> Just noticed that redis has a bunch of Tcl tests.
[21:36:43] <varjag> well it's Tests for C Language, no
[21:38:19] *** Quits: atisu (~atisu@catv-176-63-233-143.catv.broadband.hu) (Ping timeout: 272 seconds)
[21:43:19] <manicennui> Oh.
[21:43:25] <manicennui> Is that true?
[21:43:33] <manicennui> Regardless, is there nothing better?
[21:43:43] *** Joins: mohab (~mohab@45.243.118.119)
[21:44:56] <varjag> it is probably down to what particular programmer was comfortable to script with
[21:45:51] <varjag> if you test console interaction there's also 'expect' which is tcl based
[21:46:07] <varjag> really handy, but it's not something specific about c tests
[21:46:55] <varjag> also, i swear state-of-the-art for testing c programs is not testing at all
[21:47:54] <varjag> i've seen some tools like mocka but i never worked on a c project that had automated tests for real
[21:48:43] *** Joins: jmw (~jmw@user/jmw)
[21:50:54] <manicennui> I assume most popular open source written in C has tests.
[21:53:38] *** Joins: WayneS (~WayneS@user/waynes)
[21:54:48] <varjag> if we consider linux kernel the most popular, then no
[21:55:48] <varjag> i mean, some projects clearly do
[21:55:53] <varjag> but rn they are exceptions
[21:56:32] <companion_cube> the intersection of C and Tcl has tests
[22:02:32] *** Joins: expix (~louis@amontpellier-652-1-210-55.w90-57.abo.wanadoo.fr)
[22:02:46] *** Joins: manjaro-user (~manjaro-u@ip174-74-91-218.om.om.cox.net)
[22:02:58] *** Quits: jmw (~jmw@user/jmw) (Ping timeout: 272 seconds)
[22:04:15] *** Joins: jmw (~jmw@user/jmw)
[22:04:58] *** Quits: mercerist (~mercerist@user/mercerist) (Quit: mercerist)
[22:06:23] *** Joins: Guest9 (~Guest9@43.250.157.5)
[22:10:35] *** Joins: chronos (terminal@gateway/vpn/protonvpn/chronos)
[22:12:37] *** Quits: shapr (~user@pool-108-28-144-11.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[22:13:11] *** Joins: shapr (~user@pool-108-28-144-11.washdc.fios.verizon.net)
[22:23:51] <drobilla> I test with whatever the build system is.  Which is meson lately
[22:24:25] <drobilla> I don't think I've ever seen Tcl used for that outside of places where Tcl already is maybe
[22:25:20] *** Quits: mohab (~mohab@45.243.118.119) (Ping timeout: 245 seconds)
[22:26:28] *** Joins: mohab (~mohab@45.243.118.119)
[22:29:08] *** Joins: imode (~imode@user/imode)
[22:29:08] <drobilla> But really I think that question's more or less equivalent to "what glue language do people use?".  I use Python for tests that need support scripts or whatever because I use Python for everything like that.  Apparently redis is a Tcl shop
[22:32:10] *** Quits: mohab (~mohab@45.243.118.119) (Read error: Connection reset by peer)
[22:32:15] <varjag> right
[22:33:00] *** Joins: mohab (~mohab@45.243.118.119)
[22:33:14] *** Quits: Scrutinizer (Scrutinize@user/scrutinizer) (Quit: Bye!)
[22:35:41] <pja> manicennui: Use Google Test?
[22:35:46] <pja> It works fine for testing C code.
[22:35:56] <imode> o/
[22:37:18] <drobilla> I switched to just using assert (also what libc++ does)
[22:39:14] <drobilla> It's primitive but works everywhere forever and avoids a bunch of dependency hassle
[22:39:26] *** Quits: home (~home@user/home) (Remote host closed the connection)
[22:39:52] <rwb> drobilla: no coverage stats from that though
[22:40:03] *** Joins: home (~home@user/home)
[22:40:14] <drobilla> rwb: Coverage stats don't really depend on the testing framework
[22:40:27] <rwb> huh, i thought it did
[22:40:37] <rwb> since it exercised the code via tests then looked at how much ran?
[22:40:38] <drobilla> At least with the builtin gcc/clang stuff and lcov or whatever.  You can get coverage of a program you just run and manually tinker with, or whatever.  It doesn't care
[22:40:46] <rwb> i see
[22:40:59] <manicennui> Test coverage is a really bad measurement.
[22:41:01] <drobilla> When you compile code that way it just dumps out its coverage blindly
[22:41:08] <manicennui> It is really just code executed.
[22:41:20] <manicennui> People are obsessed with it because tools make it easy to measure.
[22:41:41] <drobilla> Meh.  I find it quite useful and projects with high coverage by far the nicest to work with
[22:41:58] <drobilla> People being obsessed with X as a panacea is the problem, for all X
[22:42:22] <drobilla> (See also: unit tests vs integration tests vs whatever religious debates)
[22:42:23] <manicennui> You can get 100% coverage without testing anything.
[22:42:45] <drobilla> Yeah, and you can convince yourself that you've tested things by thinking ever so hard about them and actually not.  and? :)
[22:43:37] *** Quits: home (~home@user/home) (Remote host closed the connection)
[22:43:54] *** Joins: home (~home@user/home)
[22:44:12] <drobilla> Coverage is nice because it finds dead code and/or has a way of exposing other problems
[22:44:50] <drobilla> e.g. if you're having trouble hitting something... maybe it's nonsense
[22:45:59] *** Quits: expix (~louis@amontpellier-652-1-210-55.w90-57.abo.wanadoo.fr) (Quit: Leaving.)
[22:46:13] <manicennui> Like most things, tests are great when written by competent people.
[22:46:30] <manicennui> And when written by incompetent people, which is much of our profession, they can be a net negative.
[22:46:46] <manicennui> My coworkers can't write solid tests, but the answer is to just write more tests to increase coverage.
[22:47:12] <imode> so what's the alternative for the "incompetent masses".
[22:47:15] <imode> you seem to hate people.
[22:47:25] <manicennui> So we have a very large, slow test suite that rarely catches actual problems.
[22:48:29] <rwb> >you seem to hate people.
[22:48:32] <rwb> you don't?
[22:48:47] <imode> having been inexperienced, I understand what it's like to be inexperienced.
[22:49:05] <imode> horrible condition, I know.
[22:49:10] *** Joins: atisu (~atisu@catv-176-63-233-143.catv.broadband.hu)
[22:49:14] <rwb> i hate other programmers, i hate programmers before me, and most importantly i hate myself from 6 months ago for slapping a FIXME here
[22:50:20] <rwb> don't take "hate" as absolute anger, it's just professional anger
[22:50:23] <rwb> i don't hate them personally
[22:50:31] <rwb> i just hate the way they (and i used to) program
[22:50:36] <imode> professional anger isolates individuals.
[22:50:47] <ngoldbaum> i like finding opportunities to teach technical things, i often come away from it with a better understanding of what i’m trying to teach and students often have interesting things to say
[22:51:00] <ngoldbaum> but i understand being jaded too
[22:51:23] *** Joins: whatsyourask (~whatsyour@user/whatsyourask)
[22:51:28] *** Quits: jmw (~jmw@user/jmw) (Quit: jmw)
[22:51:30] *** Joins: poww0wmus1c (~poww0wmus@gateway/tor-sasl/poww0wmus1c)
[22:51:36] <ngoldbaum> it’s not great when both parties aren’t trying to gain mutual understanding about something or when one is trying to get something out of the other
[22:51:37] <rwb> ngoldbaum: i wish people would listen to me... i try to explain why something should be done a certain way in a calm fashion, only to have code that does the same fucking wrong thing pushed to a PR
[22:51:47] <rwb> by the same person
[22:52:07] <imode> rwb: I have SDEs demanding and escalating that I do their work or provide a proof of concept.
[22:52:14] <ngoldbaum> yeah that’s frustrating, it’s not great not feeling listened to
[22:52:36] *** Joins: river (~river@tilde.team/user/river)
[22:52:42] <manicennui> imode: I was better than most of my current coworkers who have 5-10 years of experience when I first entered the profession.
[22:53:05] <manicennui> I never had the feeling of being completely incompetent.
[22:53:18] <manicennui> And the resources available now are ridiculous.
[22:53:30] <imode> my advice to you would be.. looking down on people that're inexperienced isn't going to help you professionally.
[22:53:38] <imode> it's not even going to help you socially.
[22:53:45] *** Quits: mohab (~mohab@45.243.118.119) (Quit: Quit)
[22:53:55] <imode> you weren't born knowing any of this, and neither were they.
[22:54:15] <manicennui> I don't need help professionally.
[22:54:24] <rwb> X
[22:54:35] <rwb> there's jaded and then there's edgy
[22:55:47] <manicennui> imode: The point is, most people don't get better.
[22:55:58] <manicennui> The answer is for humans to write far less software.
[22:56:25] <mockturtle> Open Source and Mental Health [person] (qznc) https://lobste.rs/s/62tdsc
[22:57:07] <rwb> leenode #python just closed very violently
[22:57:22] *** Joins: joaj (~joaj@2001:818:e326:8200:53a8:d128:cdbc:354)
[22:57:23] <imode> when I was a kid, I had the opportunity to be around industry veterans, as I lived in the state that most of them retired in. from long time programmers in the embedded space to current employees at MSFT and Google working on functional programming or hypervisor projects, I was an inexperienced, cocky kid that thought I was the best.
[22:57:25] <varjag> did he turn everone on the channel into nft?
[22:58:14] <imode> the best thing that I ever learned from them was "know your history", and that at one point, they weren't experts. they were inexperienced beginners. and so was I.
[22:58:39] <imode> when I learned how to keep a firm eye on that, I learned a whole lot more from them, and my peers did too.
[22:59:06] <imode> varjag: "bippity bripto you all are now crypto"
[22:59:45] <imode> rwb: whahappen
[23:00:01] <rwb> one of the channel owners got into an argument with some other people and then everyone was akicked
[23:00:19] <imode> dramaaaa~
[23:00:31] <varjag> "Do You Really Need Redis? How to Get Away with Just PostgreSQL"
[23:00:34] <varjag> "just"
[23:00:45] *** Quits: chronos (terminal@gateway/vpn/protonvpn/chronos) (Ping timeout: 245 seconds)
[23:01:13] <rwb> JUST
[23:01:31] <imode> postgres is the entire kitchen if redis is the kitchen sink.
[23:01:37] <imode> it even has pubsub!
[23:01:52] *** Joins: JordiGH (~jordi@fencepost.gnu.org)
[23:01:52] *** Quits: JordiGH (~jordi@fencepost.gnu.org) (Changing host)
[23:01:52] *** Joins: JordiGH (~jordi@user/jordigh)
[23:02:09] <manicennui> imode: The difference is, most people never get much better.
[23:02:27] *** Quits: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1) (Ping timeout: 265 seconds)
[23:02:27] <manicennui> The stories about people being unable to write fizzbuzz are not hyperbole.
[23:02:44] <imode> I work with those kinds of people every day and I don't really care.
[23:02:59] <drobilla> Top among people who never get much better: people who think they're hot shit and always have been ;)
[23:03:10] <rwb> Do You Really Need Redis? How to Get Away with Just Memcached"
[23:03:12] <rwb> title fixed
[23:03:15] <rwb> also top amogus
[23:03:16] <manicennui> We both want our data to be secure and for our software to work reasonably well, but also want to be nice to dumb people.
[23:03:51] <manicennui> drobilla: I know that I'm not actually hot shit. It's just that there are so many terrible people in the profession.
[23:04:54] <lep> > do you really need redis? just use mkfifo
[23:05:38] *** Joins: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1)
[23:06:05] *** Joins: mercerist (~mercerist@user/mercerist)
[23:07:29] <bsandro> manicennui: you seem to think a lot about people "worse" than you, I don't think that's productive
[23:07:35] <companion_cube> drobilla: apparemment redis started as a redis module, just like tcl
[23:07:50] <companion_cube> seems lkike most of the C code I really like is from tclers
[23:07:57] <cepi> manicennui: could stand to be a bit more humble imo
[23:08:31] * manicennui doesn't really care what others think.
[23:08:35] <bsandro> whenever i stumblel upon on some code of questionable quality I try to think first what reasons were behind that code, and there usually are some
[23:08:51] <manicennui> Rationalizing things does not make them good.
[23:08:55] <bsandro> thing is, no one wants to write bad code
[23:09:33] <manicennui> Many are incapable of writing good code.
[23:09:34] <bsandro> manicennui: yeah but 10 years from now probably your current code will look to you bad as well
[23:09:36] <cepi> manicennui: seems unfair to call people dumb though
[23:09:44] <manicennui> bsandro: Nah.
[23:10:11] <bsandro> not to get things personal but I don't think you spent a lot of time in that field yet :D
[23:10:20] <bsandro> too many 'loud' statements
[23:10:28] <manicennui> bsandro: I've been doing this for over two decades.
[23:10:32] <manicennui> I'm a lead engineer.
[23:10:43] *** Quits: mercerist (~mercerist@user/mercerist) (Ping timeout: 272 seconds)
[23:10:47] <manicennui> I'm very comfortable and not longer need to care what people think.
[23:10:51] <manicennui> s/not/no/
[23:10:57] <bsandro> then I guess yeah, some people don't get better
[23:11:03] <manicennui> I spent many years trying to be more understanding.
[23:11:03] <cepi> ^
[23:11:11] <manicennui> I gave people endless chances to become better.
[23:11:28] *** Joins: mercerist (~mercerist@user/mercerist)
[23:11:36] <bsandro> and they didn't?
[23:11:47] <manicennui> No.
[23:11:55] <bsandro> maybe bad 'leading' then?
[23:11:59] <cepi> Could be..
[23:12:14] <manicennui> It is almost always obvious within a few months who is going to gradually become better, and how is going to be a drag on the team.
[23:12:37] <bsandro> eeeh nope.
[23:13:08] <bsandro> especially if you press them with authority and 'ya'all shits'
[23:13:13] <cepi> I'll just say I strongly disagree with you manicennui
[23:13:23] <manicennui> I obviously don't do that.
[23:13:30] <manicennui> I would not have been promoted if I just treated people like shit.
[23:14:39] *** Quits: jungleboogie (~jungleboo@wireguard/tunneler/jungleboogie) (Quit: WeeChat 3.1)
[23:15:11] <bsandro> i looked on gamedesigners as at monkeys for a longest time too; one time when I was complaining they can't configure some feature right again our CTO said "maybe you don't teach them good enough"
[23:15:29] <drobilla> companion_cube: redis started as a... redis... module?
[23:15:34] <bsandro> that legit made me rethink the whole approach
[23:16:32] <bsandro> and it helped. you just gotta find the right angle for lots of ppl. there are very few that are terminally incapable of doing work
[23:16:51] <cepi> exactly
[23:16:58] <manicennui> They do work, but it's usually two steps forward, one step back.
[23:17:31] <manicennui> And they aren't capable of becoming better because they don't fundamentally understand things. They try to memorize steps.
[23:18:01] <cepi> That sounds like an issue with helping them the wrong way
[23:18:06] <manicennui> They have a million excuses why they can't figure things out, but if I'm asked, the expectation is that I will just figure it out.
[23:18:15] <drobilla> Most problems with shit code in commercial environments in my experience are structural/institutional in nature
[23:18:21] <drobilla> ... although this is true of most problems in general
[23:18:58] <manicennui> drobilla: My experience is that almost everything boils down to the quality of the people. Good people will create good software given any set of tools.
[23:19:09] <manicennui> Everyone else makes excuses endlessly.
[23:19:10] <bsandro> manicennui: well, there are always issues that can be figured out by senior devs only
[23:19:16] <manicennui> This is not to say that good people prefer to use bad tools.
[23:19:20] <bsandro> that's why they're senior and paid more
[23:19:29] <bsandro> to solve problems that others cannot
[23:19:37] <manicennui> bsandro: I did this sort of thing at the beginning of my career. I have never asked people for help.
[23:19:40] <manicennui> I just figure it out.
[23:19:42] <drobilla> manicennui: Yet they got hired
[23:19:48] <manicennui> There are *so* many resources available.
[23:20:02] <bsandro> manicennui: and you work with clones of you? :D
[23:20:11] <manicennui> And if you actually understand the fundamentals, many problems are obvious.
[23:20:12] <cepi> yeah, that's the thing.. people work differently
[23:20:14] <bsandro> you can't expect people to think exacly like you do
[23:20:27] <manicennui> At least once per week someone pastes an error message in Slack that has the solution to their problem.
[23:20:31] <manicennui> And asks us what to do.
[23:20:43] <manicennui> Like, did you read what you pasted?
[23:21:09] <cepi> Once per week sounds like a "I'm stressed" problem more than a "I can't read" problem
[23:21:30] <manicennui> I'm not saying they only ask for help once per week.
[23:21:44] <manicennui> I'm saying at least once per week what they ask for help with is solved by literally reading what they paste.
[23:21:44] <cepi> I was talking to that specific type of issue
[23:21:58] <cepi> I'm assuming they can read since they write code
[23:22:09] <manicennui> I don't know.
[23:22:10] <cepi> So it's unlikely that they can't read the error message
[23:22:18] <manicennui> It is generally the same few people who do that repeatedly.
[23:22:34] <manicennui> It's like being in ##programming during the school year.
[23:23:43] <bsandro> dunno mate, that elitist mindset can harm your "soft-skills" even if you think you don't express that
[23:24:27] <bsandro> and it can influence people who you work with too
[23:24:28] <manicennui> I know you want to believe that, but my manager loves me, I basically run the team for her, and my team frequently tells her in their one-on-ones that they love being on my team.
[23:24:43] <manicennui> I have a tech huddle every week where we go over design problems and such.
[23:24:50] <manicennui> I'm endlessly patient with them.
[23:25:01] <manicennui> My employer does not tolerate assholes.
[23:25:14] <bsandro> welp, nice then :)
[23:25:42] <manicennui> We write lending software, and it is really bad, and our customers have to deal with it.
[23:25:50] <manicennui> But at least we employ a bunch of people to be nice I guess!
[23:26:12] <bsandro> nah I'm all in for meritocracy
[23:26:38] <cepi> It's convenient how all of this is easily verifiable by anyone other than you
[23:26:38] <manicennui> The product I work on has over 20 developers working on it.
[23:26:45] <manicennui> I'd say that maybe 5 of us are highly competent.
[23:27:06] *** Quits: atisu (~atisu@catv-176-63-233-143.catv.broadband.hu) (Ping timeout: 252 seconds)
[23:27:12] <manicennui> And maybe 5 should probably just be fired.
[23:27:41] <manicennui> Another 5 should probably just be demoted.
[23:28:01] <manicennui> We have endless training sessions, lunch and learns, etc.
[23:28:34] <manicennui> The company will buy any book anyone wants.
[23:28:47] <manicennui> Before the pandemic we sent people to conferences all the time.
[23:29:12] *** Joins: chronos (terminal@gateway/vpn/protonvpn/chronos)
[23:33:19] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[23:33:43] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:33:50] <manicennui> Boring Line of Business Applications (BLOBAs)
[23:33:52] <manicennui> I like this term.
[23:33:57] <companion_cube> drobilla: oh fu, sorry. Redis started as a tcl module
[23:34:06] <companion_cube> seems like 4h of sleep ain't enough
[23:34:17] <companion_cube> https://gist.github.com/antirez/6ca04dd191bdb82aad9fb241013e88a8
[23:34:18] <mockturtle> [ LMDB -- First version of Redis written in Tcl ] - gist.github.com
[23:35:34] <bsandro> manicennui: what are you using as a platform/language/etc?
[23:35:44] <manicennui> bsandro: Mostly Rails.
[23:36:03] <drobilla> companion_cube: That's what I figured but the "just like tcl" part threw me off :)
[23:36:58] <companion_cube> just like sqlite
[23:37:01] <companion_cube> jesus
[23:37:36] <drobilla> heh
[23:38:07] <manicennui> "The name originally comes from Tool Command Language"
[23:38:16] <drobilla> Which I guess is an example of aggressively testing C that didn't come up, now that you mention it
[23:38:30] <manicennui> varjag: You liar.
[23:39:07] <drobilla> Does Tcl have a strong testing culture in general?  I don't really know anything about it in practice
[23:39:14] <bsandro> manicennui: cool! RoR was actually my starting thing, I guess. still think it was a better start than, say, php or something
[23:40:04] <manicennui> I did QBASIC, then VB, and Perl, then PL/SQL, then PHP, then more VB, then Perl, and now Ruby.
[23:40:13] <drobilla> Although the whole database thing is a/the common thread here
[23:40:19] <manicennui> But I also did sys admin and help desk work at some of those places.
[23:40:31] <gerikson> manicennui: what's your fav?
[23:40:32] <manicennui> And had a couple of jobs where I was a "systems engineer" and did a bit of both.
[23:40:56] <manicennui> gerikson: Of those, probably Perl.
[23:41:23] <manicennui> I'd rather be doing Clojure or something.
[23:41:28] <gerikson> <3
[23:41:37] <meff[m]> My encounters with Tcl in practice have always been related to hardware tooling, so not much testing going on
[23:42:19] <meff[m]> But I suspect folks that wrote Tcl in software shops probably did test. The language is super dynamic, so testing should be simple.
[23:42:33] <bsandro> manicennui: qbasic for living? :-o
[23:42:39] <manicennui> No.
[23:42:58] <manicennui> Perl was technically the first language I did professionally.
[23:43:59] <manicennui> I wrote a small inventory management system for a client while I was an assistant sys admin.
[23:44:14] <manicennui> Then I moved into development at that company and worked on a system that was 100k lines of PL/SQL.
[23:44:33] <manicennui> Then left for a dotcom during the boom and did PHP.
[23:44:45] <manicennui> Was a "systems engineer" at that company.
[23:45:01] <manicennui> Basically an assistant sys admin, and I wrote code for the product.
[23:45:40] <imode> sorry I dipped, neighbor kid told me a momma turtle was laying eggs.
[23:45:44] <imode> miracle of life.
[23:45:48] <manicennui> Nice.
[23:45:51] <alb> imode: how cool!
[23:45:53] <manicennui> What kind of turtle?
[23:45:58] <lep> post pics
[23:46:00] <imode> red-eared slider.
[23:46:10] <companion_cube> drobilla: http://antirez.com/articoli/tclmisunderstood.html
[23:46:11] <mockturtle> [ Tcl the misunderstood ] - antirez.com
[23:46:15] <companion_cube> it kind of intrigued me
[23:46:34] <companion_cube> I think lua is probably a better bet as an embedded language these days, but still, that was fun to read
[23:46:38] <skyl4rk> qbasic ...those were the days
[23:46:44] <companion_cube> (redis embeds lua, which I guess means antirez also likes Lua)
[23:47:06] <skyl4rk> qbasicnews.com is still there
[23:47:07] <meff[m]> The mindshare is certainly around Lua, but the niche it targets I think has room for more, though now there's a host of Lua-adjacent languages coming up
[23:47:35] <manicennui> *cough* fennel *cough*
[23:47:37] <skyl4rk> haven't been updated for a while though
[23:47:43] <lep> warcraft 3 recently got lua support; wasnt as smooth as one would've hoped
[23:48:00] <manicennui> Did you all see the PR that was merged in neovim yesterday?
[23:49:03] <pe> What did they disrupt this time?
[23:49:08] <maskd> yosefk also had a fun post on Tcl
[23:49:13] <manicennui> https://github.com/neovim/neovim/pull/14686
[23:49:15] <mockturtle> [ [RDY] Allow lua to be used in runtime files by shadmansaleh · Pull Request #14686 · neovim/neovim ] - github.com
[23:49:22] <maskd> https://yosefk.com/blog/i-cant-believe-im-praising-tcl.html
[23:49:23] <mockturtle> [ I can’t believe I’m praising Tcl ] - yosefk.com
[23:49:39] <pe> > echosystem
[23:50:30] *** Quits: kunst (~kunst@2001:41d0:a:fbd8::1) (Quit: kunst)
[23:50:33] <bsandro> what is echosystem D:
[23:50:42] <drobilla> I'm drawn to that easy integration but I just can't get over my passionate hatred of languages that think "end" is a good idea
[23:51:05] <imode> drobilla: some might say that's a fear of the end.
[23:51:07] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 272 seconds)
[23:51:08] <imode> ;)
[23:51:10] <drobilla> Utterly superficial but god I hate that so much
[23:51:18] <imode> what would you rather have.
[23:51:19] *** Quits: creature (~alex@198.98.114.33) (Read error: Connection reset by peer)
[23:51:30] <bsandro> i actually finished burning out lua from one of projects recently, felt really good
[23:51:30] *** Joins: creature (~alex@198.98.114.33)
[23:51:37] <mockturtle> The Fixed Point: Recursion, Laziness, and Haskell's fix function [haskell] (rebeccaskinner) https://lobste.rs/s/od6zgf
[23:51:45] <skyl4rk> drobilla: I agree *absolutely* an if statement should be ended with 'fi' :p
[23:51:59] <manicennui> drobilla: I bet you really love when people add a comment at the closing brace # END OF FOO FUNCTION
[23:51:59] <drobilla> Nothing?  a period?  a semicolon?  Literally anything but a word which is objectively awful for such a delimiter and no I will not be taking any questions :D
[23:52:20] <imode> square -> dup * ;
[23:52:22] <drobilla> WHAT ARE WE SENDING TELEGRAPHS NOW STOP THIS IS RIDICULOUS FULL STOP
[23:52:45] <manicennui> Surely there is programming language out there that looks like telegrams.
[23:52:50] <imode> hahahaha.
[23:52:52] <imode> pascal.
[23:52:58] <rwb> drobilla: stop :1: Undefined wod
[23:53:02] <rwb> word*
[23:53:07] <bsandro> SQL
[23:53:21] <skyl4rk> cobol maybe
[23:53:32] <pe> The end is always near in Lua.
[23:53:57] <rwb> shush
[23:54:02] <imode> hehehehe.
[23:54:09] <pe> Lua is surprising in that it doesn't care about newlines at all.
[23:54:17] <pe> And so: a = 1 b = 2 c = 3
[23:54:29] <pe> Perfect.
[23:54:35] <drobilla> Yeah COBOL is pretty telegraphey, but the end delimiter situation is kind of all over the place
[23:54:35] <skyl4rk> that
[23:54:37] <skyl4rk> no
[23:54:47] <skyl4rk> lua why
[23:54:51] <imode> :a 1 = :b 2 = :c 3 =
[23:55:07] <manicennui> Lua should add parentheses and move the operator to prefix position.
[23:56:27] <drobilla> lambda: the ultimate end
[23:57:54] <manicennui> "null is the Sarumon of static typing"
[23:58:07] *** Quits: mercerist (~mercerist@user/mercerist) (Quit: mercerist)
[23:59:23] <mockturtle> Digital signatures in Lithuania [crypto] (ignaloidas) https://lobste.rs/s/tcw6is
