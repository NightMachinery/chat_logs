[00:01:39] <rabbitear> 6
[00:02:02] <rabbitear> maybe 7
[00:03:59] <lungaro_> Just blew past 4
[00:04:27] <Sam> The correct next answer was '8' :)
[00:06:38] <bpalmer> no, 13; A(m, 0) for succeeding values of m, I assume. Then 65533.
[00:09:37] <lungaro_> what if it skips 2 digits for every consecutive pair. we'll never know...
[00:14:25] *** Quits: revolve (~u0_a227@82-132-247-41.dab.02.net) (Read error: Connection reset by peer)
[00:14:33] *** Joins: yakiza (~yakiza@cpc91196-cmbg18-2-0-cust129.5-4.cable.virginm.net)
[00:16:10] *** Joins: revolve (~u0_a227@82-132-246-71.dab.02.net)
[00:17:01] *** Joins: sidy (~sidy@user/sidy)
[00:18:48] <KirkMcDonald> 2, 3, 5, 8, 13; 2, 3, 5, 7, 11
[00:24:36] *** Joins: absc (~absc@dynamic-adsl-94-34-194-170.clienti.tiscali.it)
[00:25:03] *** LGnome is now known as LawnGnome
[00:25:13] *** Quits: absc (~absc@dynamic-adsl-94-34-194-170.clienti.tiscali.it) (Client Quit)
[00:26:54] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Quit: Client closed)
[00:27:08] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[00:30:36] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-679b-f12f-4ff6-2676.ip6.gigabit.dk)
[00:31:25] *** Quits: ckopn (~evg@8.21.110.39) (Ping timeout: 265 seconds)
[00:31:37] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[00:33:50] *** Joins: c10l (~c10l@89.34.167.207)
[00:34:15] *** Joins: arcatech (~arcatech@user/arcatech)
[00:35:18] *** Joins: nabromov (~nabromov@94.11.23.235)
[00:39:15] *** Quits: dr0n (~nabromov@94.11.23.235) (Ping timeout: 252 seconds)
[00:44:25] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Remote host closed the connection)
[00:47:47] *** Parts: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Textual IRC Client: www.textualapp.com)
[00:49:28] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[00:58:04] <foobaz> what sort of cryptography should i use for CSRF protection?
[00:58:45] <foobaz> if i generate random values, i need to store all previously-handed-out random values for all users, which could be too large or too forgetful
[00:59:06] <ikke> You just need to store it in the session
[00:59:09] <foobaz> so i was thinking about using TOTP, but i'm not sure if that's a good technique
[00:59:18] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 256 seconds)
[00:59:20] <foobaz> but how many do i store in the session?
[00:59:33] <foobaz> the user will not necessarily use every one, so i can't simply store them until i use them
[00:59:49] <foobaz> and what about for non-logged-in users?
[01:00:11] <bookworm> do you understand how csrf tokens work?
[01:00:18] <bookworm> you don't appear to
[01:00:48] <foobaz> i am not sure i am qualified to determine whether or not i understand how csrf tokens work
[01:01:08] <foobaz> i generate a token on the server, give it to the client as a hidden form input, and then require that token when the form is submitted
[01:01:40] <foobaz> do i use the same token every time for a given user? that's not very secure. do i use a different token every time? now i have to store a bunch of tokens
[01:01:48] *** Quits: elgraz (~elgraz@151.65.7.224) (Quit: Leaving)
[01:01:59] <ikke> each token can only be used once
[01:02:06] <bpalmer> foobaz: why do you have to store tokens?
[01:02:27] <foobaz> (1) so i can validate the token and (2) so i can ensure tokens are only used once
[01:03:03] <ikke> You only need to store it for a limited time
[01:03:10] <bpalmer> foobaz: if a token is only valid for a limited amount of time, and *maybe* there's basic rate limiting in place, you dn't need to necessarily store them
[01:03:47] <ikke> You need to be able to verify that the token is valid
[01:03:49] <bpalmer> foobaz: reuse of tokens is not particularly worrisome for CSRF attacks, as long as they do change fairly regularly.
[01:04:00] <foobaz> that's why i'm thinking TOTP is a good solution
[01:04:02] <bpalmer> tokens can carry the information that is needed to validate them.
[01:04:17] <bookworm> https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie
[01:04:22] <foobaz> with TOTP i can hand out and validate ~infinite unique tokens without storing infinite tokens
[01:04:28] <bookworm> ^ for the stateless variant
[01:04:52] *** Joins: independent_ (~independe@185.69.145.158)
[01:04:58] <bookworm> you never need to store infinite tokens
[01:06:44] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[01:06:47] <foobaz> bookworm: that page suggests using HMAC, which doesn't have a time limit
[01:06:51] <foobaz> if i use TOTP, i also get token expiration
[01:06:59] <foobaz> so i believe my solution is superior
[01:07:42] *** Quits: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru) (Quit: sizeof_void34)
[01:08:14] <foobaz> this site also suggests csrf tokens are "unique per user session", i was planning to change them more frequently
[01:08:15] <ikke> unless you have a different totp seed for each client (Which you need to store), each user would get the same token
[01:08:24] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:08:38] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 265 seconds)
[01:08:41] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[01:08:47] <foobaz> maybe that's why you claim storing infinite tokens is unnecessary, because you didn't plan on unique tokens per request
[01:08:52] <foobaz> so again i think my own solution is better
[01:09:16] <ikke> csrf protection is generally unique per request
[01:09:25] <foobaz> ikke: storing the seed per client is a good solution, that is the same storage requirement as storing a static token per session
[01:09:26] *** Quits: independent_ (~independe@185.69.145.158) (Remote host closed the connection)
[01:09:44] *** Joins: independent_ (~independe@185.69.145.158)
[01:10:06] <foobaz> how do i generate unique tokens from the seed i have stored in the session?
[01:10:11] <bookworm> csrf tokens only do a very specific thing, they aren't your security barrier for all things, the use case is fairly narrow and in modern browsers not a problem as long as you set the proper attributes on your cookie in the first place
[01:10:20] <foobaz> is TOTP a good solution for that?
[01:11:09] <foobaz> bookworm: so are you recommending to use one token per session, and reuse it for multiple requests within that session?
[01:11:14] <ikke> I don't think so
[01:11:23] <ikke> what if the user loads the page just before the totp roll-over
[01:11:34] <foobaz> that's why TOTP checks the previous time period too
[01:13:15] <bookworm> you can... you can also roll it over per every request but that can have usability issues (back button, other tabs...)
[01:13:38] <foobaz> yea, so i need to store multiple tokens
[01:13:52] <foobaz> either infinite, which is DDOSable, or limited, which is forgetful
[01:14:10] <foobaz> whereas with TOTP i can generate effectively infinite tokens and only store a single seed
[01:14:22] <foobaz> sorry i mean DOSable
[01:14:27] <bookworm> why would you ever need to store infinite tokens? you need to store at most a few per user and not even that if you don't want to
[01:14:41] <foobaz> because "a few" might not be enough
[01:14:47] <bookworm> why not?
[01:14:57] <foobaz> tabs, back button
[01:15:40] <foobaz> why would i accept a solution that can only remember "a few" tokens when my TOTP idea can remember so many more?
[01:15:43] <bookworm> csrf tokens do one thing, prevent js code from interacting with your site if you don't control it (meaning it doesn't originate from your site)
[01:16:06] <bookworm> I'm not sure what properties you think it should have
[01:16:20] <foobaz> they also protect against clicking malicious links, which does not involve js
[01:16:24] <bookworm> all frameworks do pretty much the same thing without otp
[01:16:49] <bookworm> only if you are interesting enough to put stuff behind get requests
[01:16:50] <foobaz> i think i can do better
[01:16:52] <ikke> Yes, the goal is to prevent people making requests in your behalve, that can be done without js
[01:17:01] <bookworm> post? how?
[01:17:23] <bookworm> in your run of the mill browser?
[01:17:27] <ikke> Well, it does require user interaction ofcourse
[01:17:35] <foobaz> ah true, malicious links can't POST
[01:17:55] <foobaz> but why would i accept a solution that only protects POSTs, when my TOTP idea protects GETs as well?
[01:18:01] <ikke> If I have a form on my site, and you submit that form, it could do posts against other sites
[01:18:27] <bookworm> no, chrome does a preflight test and checks the permissions
[01:18:30] <ikke> You cannot protect GET requests
[01:18:33] <foobaz> GETs can modify state too, like which messages have been viewed already, that's not critical information but why not protect that too?
[01:18:47] <foobaz> i can, by putting a token in the query string
[01:19:13] <ikke> GET requests should be idempotent :)
[01:19:27] <foobaz> it seems as though i have overthought this and come up with a solution that is vastly more secure and functional than anything anyone else has done
[01:20:22] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[01:20:40] <foobaz> you're right, GET requests should be idempotent, i should make sure everything affecting state is a POST, even minor state like whether a message has been viewed already
[01:22:24] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[01:23:44] *** Joins: dkmueller (~dkmueller@2a01:c22:7205:b400:2ca3:4ff:17cb:5f51)
[01:29:06] *** Quits: nabromov (~nabromov@94.11.23.235) (Ping timeout: 276 seconds)
[01:29:08] <foobaz> technically marking a message as read is idempotent, even though it modifies state, because it's safe to mark it as read multiple times
[01:29:53] *** Quits: independent_ (~independe@185.69.145.158) (Remote host closed the connection)
[01:30:10] *** dkmueller is now known as v0lta
[01:30:16] *** Joins: independent_ (~independe@185.69.145.158)
[01:30:35] <foobaz> so even idempotent GET requests can benefit from CSRF protection
[01:33:50] *** Quits: v0lta (~dkmueller@2a01:c22:7205:b400:2ca3:4ff:17cb:5f51) (Quit: WeeChat 3.2)
[01:34:08] *** Joins: v0lta (~dkmueller@2a01:c22:7205:b400:2ca3:4ff:17cb:5f51)
[01:34:11] *** Quits: yakiza (~yakiza@cpc91196-cmbg18-2-0-cust129.5-4.cable.virginm.net) (Quit: Client closed)
[01:34:42] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[01:38:55] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Remote host closed the connection)
[01:40:01] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[01:44:09] *** Quits: Kaivo (~Kaivo@user/kaivo) (Ping timeout: 252 seconds)
[01:44:22] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 272 seconds)
[01:44:38] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[01:45:18] *** Joins: Kaivo (~Kaivo@user/kaivo)
[01:45:30] *** Quits: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be) (Ping timeout: 240 seconds)
[01:46:00] *** Quits: preisi_svr (~preisi@prei.si) (Ping timeout: 276 seconds)
[01:48:09] *** Joins: preisi (~preisi@prei.si)
[01:49:21] *** Quits: preisi (~preisi@prei.si) (Client Quit)
[01:49:26] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 272 seconds)
[01:51:55] *** Quits: DM4307842 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[01:52:13] *** Joins: DM4307842 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[01:53:12] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[01:54:14] *** Joins: PichuChen (~PichuChen@36-230-5-77.dynamic-ip.hinet.net)
[01:58:48] *** Quits: PichuChen (~PichuChen@36-230-5-77.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[02:01:57] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:22:34] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Ping timeout: 240 seconds)
[02:25:00] *** Joins: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de)
[02:25:32] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 272 seconds)
[02:25:36] *** Quits: independent_ (~independe@185.69.145.158) (Ping timeout: 272 seconds)
[02:32:13] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 258 seconds)
[02:37:01] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:39:00] *** Joins: LiftLeft (~LiftLeft@138.199.10.20)
[02:41:18] *** Joins: independent56 (~independe@185.69.145.158)
[02:42:43] *** Quits: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de) (Quit: rootbox)
[02:47:07] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:47:15] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[02:47:32] *** Joins: mickey (~user@user/mickey)
[02:49:43] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[02:50:11] *** Quits: v0lta (~dkmueller@2a01:c22:7205:b400:2ca3:4ff:17cb:5f51) (Quit: WeeChat 3.2)
[02:50:52] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[02:51:06] *** Joins: mickey (~user@user/mickey)
[02:52:32] *** Quits: sagax (~sagax@213.138.71.146) (Ping timeout: 268 seconds)
[02:57:25] *** Quits: independent56 (~independe@185.69.145.158) (Remote host closed the connection)
[02:57:51] *** Joins: independent56 (~independe@185.69.145.158)
[03:01:33] *** Joins: preisi (~preisi@prei.si)
[03:03:17] *** Quits: preisi (~preisi@prei.si) (Client Quit)
[03:03:32] *** Joins: preisi (~preisi@prei.si)
[03:05:45] *** Quits: preisi (~preisi@prei.si) (Client Quit)
[03:05:59] *** Joins: preisi (~preisi@prei.si)
[03:07:15] *** Quits: src (~src@user/src) (Ping timeout: 276 seconds)
[03:15:44] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.2)
[03:31:21] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:42] *** Joins: jsrnop (~mark@user/jsrnop)
[03:43:37] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Quit: Client closed)
[03:43:51] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[03:45:48] *** Quits: jawn-smith (~william@cpe-70-119-160-53.tx.res.rr.com) (Remote host closed the connection)
[03:48:20] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[03:49:16] *** Quits: independent56 (~independe@185.69.145.158) (Ping timeout: 258 seconds)
[03:50:46] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[03:53:00] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 272 seconds)
[04:02:29] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[04:07:18] *** Joins: src (~src@user/src)
[04:07:26] *** Joins: yoonkn (~user@175.197.208.79)
[04:23:34] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[04:27:38] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:28:13] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:34] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:00] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:52:05] *** Joins: califax (~califax@user/califx)
[04:56:09] *** Quits: eti (~eti@2a07:abc4::1:26e) (Quit: byeeeee)
[04:56:09] *** Quits: lew (~lew@89.234.183.156) (Quit: ZNC - https://znc.in)
[04:59:40] *** Joins: eti (~eti@2a07:abc4::1:26e)
[05:00:08] *** Joins: lew (~lew@2a07:abc4::1:26e)
[05:04:44] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[05:06:11] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1005)
[05:07:01] *** Quits: lew (~lew@2a07:abc4::1:26e) (Quit: ZNC - https://znc.in)
[05:07:02] *** Quits: eti (~eti@2a07:abc4::1:26e) (Quit: byeeeee)
[05:07:07] *** Joins: tia (~sidy@nat.esu3.org)
[05:07:43] *** Joins: eti (~eti@2a07:abc4::1:26e)
[05:08:11] *** Joins: lew (~lew@2a07:abc4::1:26e)
[05:09:51] *** Quits: sidy (~sidy@user/sidy) (Ping timeout: 250 seconds)
[05:29:42] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:30:47] *** Joins: mud (~mud@user/kadoban)
[05:31:31] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[05:32:03] *** Quits: kadobanana (~mud@user/kadoban) (Ping timeout: 265 seconds)
[05:32:50] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[05:33:08] *** Quits: omegatron (~some@p54bd5da4.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[05:34:14] *** Quits: eti (~eti@2a07:abc4::1:26e) (Quit: byeeeee)
[05:34:14] *** Quits: lew (~lew@2a07:abc4::1:26e) (Quit: ZNC - https://znc.in)
[05:37:31] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[05:40:18] *** Joins: frickenate (~frickenat@user/frickenate)
[05:42:12] *** Quits: deafpian1 (~tomlazar@cpe-65-26-56-76.wi.res.rr.com) (Ping timeout: 265 seconds)
[05:47:01] *** Joins: califax- (~califax@user/califx)
[05:48:12] *** Joins: deafpiano (~tomlazar@cpe-65-26-56-76.wi.res.rr.com)
[05:49:40] <frickenate> Is it possible by any means to force an http server's mux to serialize the order of requests handled, such that it is guaranteed that each request is handled one at a time? Within the handler function, I could hold a mutex or write to a 1x buffered channel, but I feel that if 2 requests arrived at exactly the same time, the goroutine order could be wrong. I really want an http server/mux that accept()s a single socket at a time and waits for the
[05:49:40] <frickenate>  response to be written before accepting the next client.
[05:50:22] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[05:50:23] *** califax- is now known as califax
[05:51:03] *** Quits: nperez (~nperez@2a02-a45b-17c4-1-a00-27ff-feab-4723.fixed6.kpn.net) (Ping timeout: 276 seconds)
[05:52:09] <frickenate> I'd also need to handle the difference between a single client pipelining 2+ requests and/or 2+ clients having separate requests. I feel like Go's assumption of a threaded http server doesn't allow for this.
[05:54:08] <frickenate> Never thought I'd wind up in a situation where Go's automatic green threads for an http server would hurt me haha.
[05:54:21] *** Joins: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[05:57:28] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[05:59:38] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:02:50] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 272 seconds)
[06:06:38] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1005) (Ping timeout: 272 seconds)
[06:11:07] *** Joins: eti (~eti@2a07:abc4::1:26e)
[06:11:36] *** Joins: lew (~lew@2a07:abc4::1:26e)
[06:12:15] *** Quits: src (~src@user/src) (Ping timeout: 258 seconds)
[06:12:49] *** Joins: nperez (~nperez@2a02-a45b-17c4-1-a00-27ff-feab-4723.fixed6.kpn.net)
[06:15:20] *** Joins: kn1003 (~kn100@wireguard/tunneler/kn100)
[06:15:33] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 265 seconds)
[06:17:29] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 265 seconds)
[06:17:29] *** kn1003 is now known as kn100
[06:18:33] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[06:20:48] *** Quits: nperez (~nperez@2a02-a45b-17c4-1-a00-27ff-feab-4723.fixed6.kpn.net) (Remote host closed the connection)
[06:22:59] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 258 seconds)
[06:26:45] <frickenate> Perhaps a simpler way of asking this question: is there really no way to artificially limit the number of goroutines launched by an http.Server ?
[06:28:31] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[06:28:36] <frickenate> Ooooooh I may have answered my own question. http.Server.ConnState field. Some manual work to do, but not a huge problem.
[06:29:08] *** Joins: gggp (~gggp@60.10.23.170)
[06:29:34] *** Joins: c10l (~c10l@89.34.167.207)
[06:29:44] *** Joins: gggp_ (~gggp@60.10.23.170)
[06:29:59] *** Joins: Crassus (~Crassus@user/crassus)
[06:32:33] *** Quits: c10l (~c10l@89.34.167.207) (Client Quit)
[06:32:53] *** Joins: c10l (~c10l@89.34.167.207)
[06:34:00] *** Quits: gggp (~gggp@60.10.23.170) (Ping timeout: 252 seconds)
[06:37:53] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:39:29] *** Joins: gggp__ (~gggp@60.10.23.170)
[06:42:48] *** Quits: gggp_ (~gggp@60.10.23.170) (Ping timeout: 252 seconds)
[06:43:15] <b0nn> Hrm, does that configure the pool that the http.Server draws goroutines from?
[06:44:16] *** Quits: revolve (~u0_a227@82-132-246-71.dab.02.net) (Read error: Connection reset by peer)
[06:47:04] *** Quits: eti (~eti@2a07:abc4::1:26e) (Quit: byeeeee)
[06:47:05] *** Quits: lew (~lew@2a07:abc4::1:26e) (Quit: ZNC - https://znc.in)
[06:47:39] *** Joins: f8l12 (~f8l12@d24-36-156-191.home1.cgocable.net)
[06:48:19] *** Quits: c10l (~c10l@89.34.167.207) (Quit: Ping timeout (120 seconds))
[06:48:41] *** Joins: c10l (~c10l@89.34.167.207)
[06:49:18] <f8l12> is it normal for the postgresql driver to return this error: pq: sorry, too many clients already? i'm load testing and i figured it would just block but i'm getting that error
[06:50:29] <f8l12> im guessing the solution is to set the max conns higher but it's kind of sketchy
[06:50:55] <bpalmer> I don't know if it's normal, but a database under load rejecting a connection outright (rather than having to accept it and then wait to do anything, I guess?) seems like a sensible approach
[06:51:16] *** Joins: revolve (~u0_a227@82-132-247-224.dab.02.net)
[06:51:48] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[06:52:07] *** Quits: Crassus (~Crassus@user/crassus) (Ping timeout: 258 seconds)
[06:52:40] *** Joins: eti (~eti@2a07:abc4::1:26e)
[06:53:09] *** Joins: lew (~lew@89.234.183.156)
[06:53:12] *** Quits: eti (~eti@2a07:abc4::1:26e) (Client Quit)
[06:53:12] *** Quits: lew (~lew@89.234.183.156) (Remote host closed the connection)
[06:53:44] *** Joins: eti (~eti@89.234.183.156)
[06:54:03] *** Quits: eti (~eti@89.234.183.156) (Client Quit)
[06:55:19] *** Joins: eti (~eti@2a07:abc4::1:26e)
[06:55:37] *** Quits: eti (~eti@2a07:abc4::1:26e) (Client Quit)
[06:58:14] <f8l12> also would you check the error message (ie. err.Error() == "pq: sorry, too many clients already") to retry the request? i was wondering in case the db driver changes the string or something
[06:58:16] <b0nn> ftr I've seen the too many clients error before
[06:58:29] <b0nn> It's because too many concurrent (open) sessions
[06:58:50] <f8l12> b0nn, so do you just increase the max conns?
[06:59:10] <b0nn> I use a pool of goroutines to connect to the db
[06:59:26] <b0nn> Because I have a single process accessing the db instance
[06:59:42] <b0nn> but multi process is a bit more interesting to manage
[07:00:07] <f8l12> should be fine for me too as i have only one process as well
[07:00:09] <f8l12> thanks
[07:00:24] <b0nn> WRT up the max_conns; the reason that the setting exists is because contention on a DB is painful, your transactions can become super slow
[07:00:56] <f8l12> can there be contention for just db reads?
[07:01:06] <b0nn> "It depends"
[07:02:07] <b0nn> If there's no processes at all ever writing, and there's no calculation of what to read (ie. range or math) then a cache is probably a better solution (eg. NoSQL)
[07:02:17] *** Joins: eti (~eti@2a07:abc4::1:26e)
[07:02:37] *** Quits: eti (~eti@2a07:abc4::1:26e) (Client Quit)
[07:03:08] *** Joins: eti (~eti@89.234.183.156)
[07:03:09] <frickenate> @f8l12 postgres is well-known for not handling a lot of connections
[07:03:25] <frickenate> pgbouncer is effectively a guaranteed requirement
[07:03:36] *** Joins: lew (~lew@2a07:abc4::1:26e)
[07:04:32] <frickenate> You can thank the postgres devs for spending years upon years upon years refusing to admit that a fork-per-client model is unacceptable. There's no multithreaded model.
[07:05:03] *** Quits: eti (~eti@89.234.183.156) (Client Quit)
[07:05:03] *** Quits: lew (~lew@2a07:abc4::1:26e) (Client Quit)
[07:05:07] <f8l12> frickenate, do you have a suggestion for a better sql db?
[07:05:07] <frickenate> Depending on your hardware, you'll only get dozens or hundreds of concurrent client connections. Once you break that limit, you HAVE to use pgbouncer. It's not optional, unfortunately.
[07:06:13] <frickenate> Not in terms of functionality, unfortunately. You should try to use postgres if at all possible, but scaling it without a load balancer (or at least persistent connections on client side, depending on your needs) is not an option.
[07:06:46] *** Joins: eti (~eti@2a07:abc4::1:26e)
[07:06:47] *** Joins: kodah (~kodah@user/kodah)
[07:07:14] *** Joins: lew (~lew@89.234.183.156)
[07:07:23] *** Quits: eti (~eti@2a07:abc4::1:26e) (Client Quit)
[07:07:23] *** Quits: lew (~lew@89.234.183.156) (Remote host closed the connection)
[07:07:59] <frickenate> You'd have to downgrade to mysql to get a multithreaded model with an mvcc model that scales "easier", but it's a HORRIFIC downgrade.
[07:08:10] <frickenate> If you're already with postgres, you'd be better off adding pgbouncer.
[07:08:29] *** Joins: eti (~eti@89.234.183.156)
[07:08:57] *** Joins: lew (~lew@2a07:abc4::1:26e)
[07:09:03] *** Quits: eti (~eti@89.234.183.156) (Client Quit)
[07:09:03] *** Quits: lew (~lew@2a07:abc4::1:26e) (Remote host closed the connection)
[07:09:40] <f8l12> i could easily switch to any sql db
[07:09:45] *** Joins: eti (~eti@89.234.183.156)
[07:10:13] *** Joins: lew (~lew@89.234.183.156)
[07:10:17] <f8l12> but i don't mind trying pgbouncer
[07:11:14] <frickenate> The idea of "benchmarking" databases without real world usage is basically a waste of time.
[07:11:20] <f8l12> i was hoping to use cassandra but found out quickly it doesn't support range queries
[07:11:39] *** Quits: eti (~eti@89.234.183.156) (Client Quit)
[07:11:39] *** Quits: lew (~lew@89.234.183.156) (Client Quit)
[07:12:05] <f8l12> not without severely hindered performance anyway
[07:12:22] *** Joins: eti (~eti@89.234.183.156)
[07:12:33] *** Quits: eti (~eti@89.234.183.156) (Client Quit)
[07:12:45] *** Joins: gzj (~GZJ0X@199.193.127.138.16clouds.com)
[07:13:00] <foobaz> have you considered pooling your connections on the client side?
[07:13:15] <frickenate> f8l12, are you working on something that absolutely needs to scale TODAY, or are you just playing around and expecting great performance?
[07:13:16] *** Joins: eti (~eti@2a07:abc4::1:26e)
[07:13:32] <foobaz> if you can limit the number of postgres connections your go program spawns, you may not need to change anything on the server side
[07:13:45] *** Joins: lew (~lew@2a07:abc4::1:26e)
[07:13:46] <frickenate> "load testing" the database is micro-optimization unless you're actively working on something requiring that scale NOW.
[07:14:08] <f8l12> frickenate, yeah so i ended up load testing because the db was utterly flailing from something im working on
[07:14:11] *** Quits: eti (~eti@2a07:abc4::1:26e) (Client Quit)
[07:14:11] *** Quits: lew (~lew@2a07:abc4::1:26e) (Client Quit)
[07:14:14] <b0nn> Cassandra is a https://en.wikipedia.org/wiki/Log-structured_merge-tree - it's not going to be great for range queries, no
[07:14:44] <frickenate> You're heading into a massive rabbit hole, and "i could easily switch to any sql db" tells me you're not actually at the point of switching databases willy-nilly.
[07:15:10] *** Joins: eti (~eti@2a07:abc4::1:26e)
[07:15:10] <f8l12> i meant that because i'm not using anything pg specific
[07:15:39] *** Joins: lew (~lew@89.234.183.156)
[07:15:54] <f8l12> foobaz, yeah i'm considering it but pgbouncer might solve it
[07:16:14] <frickenate> If you're invested whatsoever in postgres, then I'd say pgbouncer. If/when you give up on that, switch to MySQL. It'll do more concurrency out of the box without worrying about it as much.
[07:16:46] <foobaz> if you don't need the networking features, consider sqlite
[07:16:50] <frickenate> Oh God, I just recommended MySQL. Someone stab me.
[07:16:58] *** Joins: gggp_ (~gggp@60.10.194.46)
[07:17:17] *** Quits: lew (~lew@89.234.183.156) (Client Quit)
[07:17:17] *** Quits: eti (~eti@2a07:abc4::1:26e) (Client Quit)
[07:18:04] *** Joins: eti (~eti@2a07:abc4::1:26e)
[07:18:07] <f8l12> foobaz, is that serious? sqlite could work for what i'm doing but i didn't think it was all that fast
[07:18:18] <foobaz> sqlite is super fast
[07:18:32] *** Joins: lew (~lew@89.234.183.156)
[07:20:05] *** frickenate is now known as frickenate_
[07:20:06] *** Quits: gggp__ (~gggp@60.10.23.170) (Ping timeout: 258 seconds)
[07:26:54] *** frickenate_ is now known as frickenate
[07:30:54] *** Joins: noxim (~noxim@user/noxim)
[07:33:22] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[07:37:55] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[07:40:23] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[07:44:28] <kodah> sqlite runs Outlook and the SMS app on ios
[07:45:24] <kodah> the way it gets slow is when schema changes, a lot of time you have to do wonky stuff like recreating tables in order to do things fast, so people just add columns over time
[07:45:56] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[07:52:26] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[08:02:32] <seebs> sqlite is extremely fast for the most part, but it has some definite limitations. still an amazing tool.
[08:07:22] *** Joins: oxum (~oxum@106.203.221.241)
[08:10:00] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[08:20:10] *** Joins: Snyp (~rksht@49.207.215.9)
[08:22:58] *** Quits: fentanyl (~0xe3b7@ca1-1.azirevpn.net) (Ping timeout: 240 seconds)
[08:25:31] <Snyp> How do I turn off the default dark mode in pkg.go.dev ?
[08:32:51] *** Quits: welt (~welt@2605:6400:30:f719:8888:8888:8888:8888) (Remote host closed the connection)
[08:40:57] *** Quits: gzj (~GZJ0X@199.193.127.138.16clouds.com) (Remote host closed the connection)
[08:42:22] *** frickenate is now known as frickenate_
[08:42:30] *** Joins: freakazoid333 (~matt@2603-9000-cf0f-80e3-c53b-ee23-db77-54e5.inf6.spectrum.com)
[08:42:36] *** Joins: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be)
[08:44:47] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 250 seconds)
[08:46:17] *** Joins: masoudd (~masoudd@user/masoudd)
[08:46:30] *** Joins: oxum (~oxum@106.203.221.241)
[08:46:46] *** frickenate_ is now known as frickenate
[08:47:21] *** Quits: frickenate (~frickenat@user/frickenate) (Quit: frickenate)
[08:51:56] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[08:55:41] *** Quits: sus (thelounge@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[08:56:07] *** Joins: sus (thelounge@user/zeromomentum)
[08:56:30] *** Joins: gggp__ (~gggp@111.63.14.121)
[08:59:53] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 265 seconds)
[09:18:24] *** Joins: Atque (~Atque@user/atque)
[09:22:33] *** Quits: tpefreedom (~tsomers@98-125-225-122.dyn.centurytel.net) (Remote host closed the connection)
[09:25:14] <A_Dragon> I believe t toggles it
[09:25:24] <A_Dragon> but it listens to your system theme
[09:26:38] <Snyp> A_Dragon: wew, that worked. thanks
[09:27:02] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 256 seconds)
[09:30:58] *** Joins: arcatech (~arcatech@user/arcatech)
[09:33:27] <Snyp> Any idea why I get an error saying the type Console has no method of suitable type here - https://hastebin.com/uyicomuwah.go ? IIRC, the receive and reply args are gob encodable since they're structs of builtin types pretty much.
[09:34:29] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[09:35:07] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[09:36:24] *** Joins: arcatech (~arcatech@user/arcatech)
[09:36:39] <A_Dragon> is that code truncated for ease of paste?
[09:36:46] <Snyp> yes
[09:38:03] <A_Dragon> are you possibly passing a pointer to a pointer?
[09:38:53] <Snyp> A_Dragon: oh fuck. indeed.
[09:39:01] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[09:39:23] <Snyp> A_Dragon: it's working now
[09:39:25] <A_Dragon> Snyp: :D
[09:39:31] <Snyp> thanks again
[09:39:46] <A_Dragon> I was looking though the source and couldnt see exactly where you'd manage to get ONLY that message
[09:39:55] <A_Dragon> because the lib is actually quite helpful for what you're missing
[09:40:07] <A_Dragon> interface{} claims another type check victim
[09:40:26] <A_Dragon> for reference, if in future you're curious
[09:40:34] <A_Dragon> ttps://cs.opensource.google/go/go/+/refs/tags/go1.16.6:src/net/rpc/server.go;drc=refs%2Ftags%2Fgo1.16.6;l=279 is the source that checks the methods
[09:41:31] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[09:41:38] <Snyp> A_Dragon: the thing is the error says "type Console has no ..." not "type *Console has no..."
[09:42:05] <A_Dragon> yeah I'd assume it did something funky with unwrapping
[09:42:16] <Snyp> hmm
[09:43:51] *** Quits: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 258 seconds)
[09:46:45] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Quit: Either rebooting or something broke.)
[09:49:49] *** Joins: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[09:55:25] *** gggp__ is now known as gggp
[10:05:45] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[10:06:42] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[10:16:40] *** Joins: gggp_ (~gggp@60.10.23.170)
[10:19:18] *** Joins: fentanyl (~0xe3b7@ca1-1.azirevpn.net)
[10:19:54] *** Quits: gggp (~gggp@111.63.14.121) (Ping timeout: 272 seconds)
[10:22:25] *** Joins: gggp__ (~gggp@60.10.23.170)
[10:22:58] *** Quits: gggp__ (~gggp@60.10.23.170) (Remote host closed the connection)
[10:23:22] *** Quits: fentanyl (~0xe3b7@ca1-1.azirevpn.net) (Ping timeout: 240 seconds)
[10:25:44] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[10:25:58] *** Quits: gggp_ (~gggp@60.10.23.170) (Ping timeout: 256 seconds)
[10:26:02] *** Joins: gggp (~gggp@60.10.23.170)
[10:31:24] *** Joins: fef (~thedawn@user/thedawn)
[10:35:48] *** Quits: Snyp (~rksht@49.207.215.9) (Ping timeout: 272 seconds)
[10:42:13] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[10:47:22] *** Quits: nevivurn` (~nevivurn@user/nevivurn) (Quit: Goodbye~)
[10:48:41] *** Joins: gggp_ (~gggp@60.10.194.46)
[10:49:22] *** Joins: hikhvar79607380 (~thelounge@dynamic-046-114-004-254.46.114.pool.telefonica.de)
[10:49:40] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:49:58] *** Quits: gggp (~gggp@60.10.23.170) (Killed (NickServ (GHOST command used by gggp_!~gggp@60.10.194.46)))
[10:50:00] *** gggp_ is now known as gggp
[10:51:34] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[10:52:16] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 272 seconds)
[10:53:57] *** Quits: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 265 seconds)
[10:59:43] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[11:00:08] *** Quits: hikhvar79607380 (~thelounge@dynamic-046-114-004-254.46.114.pool.telefonica.de) (Ping timeout: 258 seconds)
[11:02:42] *** Joins: Atque (~Atque@user/atque)
[11:03:56] *** Joins: nevivurn (~nevivurn@user/nevivurn)
[11:06:00] *** Joins: sagax (~sagax@213.138.71.146)
[11:07:39] *** Quits: justache (~justache@user/justache) (Remote host closed the connection)
[11:09:06] *** Joins: justache (~justache@user/justache)
[11:19:06] *** Joins: ugjka (~ugjka@2a03:ec00:b18f:1b67:cc10:2827:31c2:2094)
[11:19:41] *** Joins: gggp_ (~gggp@123.113.184.133)
[11:22:28] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 265 seconds)
[11:25:45] *** Joins: shka (~herr@109.231.62.239)
[11:31:25] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:35:37] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[11:36:15] *** Joins: mrig (~mrig@user/mrig)
[11:36:33] *** Joins: ckopn (~evg@176.59.49.214)
[11:38:20] *** gggp_ is now known as gggp
[11:38:33] *** Joins: oxum (~oxum@106.203.221.241)
[11:38:35] *** Quits: oxum (~oxum@106.203.221.241) (Read error: Connection reset by peer)
[11:39:08] *** Joins: oxum (~oxum@106.203.221.241)
[11:40:07] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[11:40:46] *** Quits: LiftLeft (~LiftLeft@138.199.10.20) (Ping timeout: 256 seconds)
[11:44:12] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[11:47:45] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[11:50:41] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[11:50:59] *** Quits: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be) (Ping timeout: 265 seconds)
[11:53:26] *** Joins: oxum (~oxum@106.203.221.241)
[11:53:56] *** Joins: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be)
[11:57:46] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 240 seconds)
[12:01:44] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Quit: Client closed)
[12:01:57] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[12:03:55] <lack> I have this utility that has a lot of dependencies, some of which are a bit flaky to fetch from upstream. I used "go mod vendor" to commit them all into my repo, but when I go to another machine and "go get" my package, it seems to still want to download the packages from the upstream locations and only gets my vendor/modules.txt.  Am I misunderstanding the vendor directory?
[12:04:33] <lack> I thought it would pull what I checked in to vendor/ and just go with it as-is
[12:05:01] *** Joins: oxum (~oxum@106.203.221.241)
[12:05:03] <lack> (go 1.15 on the machine that's doing the get)
[12:05:23] <ikke> afaik, you do not need to run go get
[12:05:59] <ikke> https://golang.org/ref/mod#go-mod-vendor
[12:07:25] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[12:08:11] *** Joins: gggp_ (~gggp@60.10.23.170)
[12:11:26] *** Quits: gggp (~gggp@123.113.184.133) (Ping timeout: 272 seconds)
[12:11:38] <lack> I'm running 'go get' to mimic what a user will do if they want to install my tool and use it.
[12:12:00] <ikke> that's not the goal of go mod vendor
[12:12:32] *** Joins: Atque (~Atque@user/atque)
[12:12:35] <lack> I read it was in part to mitigate against an upstream going away... Is that untrue?
[12:13:23] <ikke> Yes, but it's not an alternative source to get dependencies
[12:14:13] <ikke> You declare your dependencies for a project, you use go mod vendor to fetch a local copy which you commit, and then when you build the project, it uses the dependencies in the vendor project\
[12:14:43] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:15:06] <ikke> vendor dir*
[12:15:51] <lack> So I it protects me from a missing upstream, but it doesn't protect someone doing "go get" from the same problem?
[12:15:54] *** Quits: ckopn (~evg@176.59.49.214) (Ping timeout: 256 seconds)
[12:16:00] <ikke> correct
[12:16:13] <ikke> note that in the future
[12:16:18] *** Joins: ckopn (~evg@8.21.110.39)
[12:16:21] <ikke> go get will not even download sources anymore
[12:17:30] <lack> Oh?  Why not?
[12:17:33] <ikke> "Building and installing packages with get is deprecated. In a future release, the -d flag will be enabled by default, and 'go get' will be only be used to adjust dependencies of the current module."
[12:18:06] <lack> Ah, but "go install" still will, right?
[12:18:15] <ugjka> -d flag of what
[12:18:21] <ikke> ugjka: go get
[12:18:24] <ikke> lack: yes
[12:18:31] <ugjka> ok
[12:19:05] <lack> Got it.  Will "go install" respect censored code to mitigate dead upstream?  Or will that never happen?
[12:19:26] <lack> s/censored/vendored/
[12:19:42] <lack> (autocorrect!)
[12:20:11] <ikke> I don't think so
[12:20:26] <ikke> like I set, the vendor dir is not a source to install dependencies from
[12:20:34] <ikke> it just is used when building a project (iirc)
[12:21:10] <ikke> It's used for end-projects, not intermediate libraries
[12:21:38] <lack> I guess I figured "go install" is just shorthand for getting and building and installing a project.
[12:22:00] <lack> It's weird to me that it acts differently
[12:22:47] <lack> (fyi this is an end-project, not an intermediate library)
[12:23:56] <ikke> afaik, the idea is that users clone your project using git, and then run go build
[12:24:44] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[12:24:46] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[12:24:47] <lack> So then rather than telling people to use "go install" to get my utility, I should tell them to do that multi-step clone-and-build?
[12:25:06] <lack> Then what's "go install" for?
[12:25:07] *** Joins: mickey (~user@user/mickey)
[12:30:34] *** Quits: arthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[12:33:27] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[12:37:39] *** Joins: oxum (~oxum@106.203.221.241)
[12:38:11] *** Joins: gggp__ (~gggp@60.10.194.46)
[12:38:49] <mrig> Hello, can anyone help me to understand how the xml.CharData type is working here? https://play.golang.org/p/QqWEymKasRI
[12:38:59] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[12:39:41] <ikke> It's just a number
[12:39:44] <mrig> I can see that the \n is being preserved in the last case, but why are there apparently bytes from the name of the following element showing up in the previous cases.
[12:39:46] <mrig> ?
[12:40:12] <mrig> sure these are hexadecimal numbers.
[12:40:42] <ikke> I misunderstood your question
[12:40:48] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:5bf:aefb:36bd:9aa7)
[12:41:20] *** Quits: gggp_ (~gggp@60.10.23.170) (Ping timeout: 258 seconds)
[12:41:56] <mrig> They appear to be xml tokens that are made from the input string that store data such as newlines, but I can not get them to behave when pretty printing a parse tree, perhaps I have misunderstood their purpose in this context, or how to read them correctly?
[12:42:28] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[12:43:28] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[12:44:33] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[12:45:17] <ikke> Do you skip the first token on purpose?
[12:45:47] <ikke> oh, you use both token and next
[12:46:14] <ikke> "Slices of bytes in the returned token data refer to the parser's internal buffer and remain valid only until the next call to Token."
[12:46:31] <ikke> So what you do is invalid
[12:53:10] <mrig> Oh I see, so there is data coming through from a previous iteration?
[12:53:36] <ikke> You get a slice back from Token, run Token again, that slice is now overwritten with new data (but I assume still has the old length)
[12:54:01] <ikke> So if the old slice contained 2 characters, you will get 2 characters from the next token
[12:54:06] <mrig> right, let me try this using the .Copy() call.
[12:54:37] <mrig> Yes I see what you mean, thanks for the pointer, need to ponder this a bit.
[12:55:07] *** Joins: foobaz212 (~foobaz212@119.188.159.143.dyn.plus.net)
[12:55:50] *** Joins: oxum (~oxum@106.203.221.241)
[12:57:41] *** Joins: zanshin (~zanshin@user/zanshin)
[12:58:27] *** Quits: ckopn (~evg@8.21.110.39) (Ping timeout: 252 seconds)
[12:58:53] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Ping timeout: 252 seconds)
[12:59:34] *** Quits: foobaz212 (~foobaz212@119.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[13:00:01] *** Joins: independent56 (~independe@185.69.145.158)
[13:01:28] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 272 seconds)
[13:02:25] *** Joins: ckopn (~evg@176.59.49.214)
[13:04:50] <mrig> ikke: Although your point is valid, these are interfaces and I can not see how it would be the case that the = operation are not having the desired effect.
[13:09:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[13:09:47] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[13:10:28] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:11:41] <ikke> = does not copy data
[13:11:52] <ikke> You just store whatever you are given
[13:12:42] <mrig> these are pointers as interfaces, I believe, so they are receiving different pointers.
[13:12:54] <mrig> the Token is an interface.
[13:14:13] <ikke> A Token is a concrete type
[13:14:16] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 256 seconds)
[13:14:29] *** Quits: revolve (~u0_a227@82-132-247-224.dab.02.net) (Read error: Connection reset by peer)
[13:15:04] *** Quits: ckopn (~evg@176.59.49.214) (Ping timeout: 258 seconds)
[13:15:11] *** Joins: foobaz212 (~foobaz212@119.188.159.143.dyn.plus.net)
[13:15:27] *** Joins: ckopn (~evg@8.21.110.39)
[13:15:29] <mrig> an xml.Token is an interface.
[13:15:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[13:15:59] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:16:25] <ikke> Sorry, right
[13:16:27] <ikke> but: "A Token is an interface holding one of the token types: StartElement, EndElement, CharData, Comment, ProcInst, or Directive. "
[13:16:35] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[13:16:47] <mrig> yes I'm with you there.
[13:16:50] <ikke> But the documentation is clear
[13:17:06] <ikke> You are not supposed to use whatever Token() returned after the next call of Token()
[13:17:20] <mrig> Where is this stated?
[13:17:42] <mrig> also Token is overwriting the interface in each loop.
[13:17:45] <ikke> https://pkg.go.dev/encoding/xml#Decoder.Token
[13:17:58] <ikke> mrig: you have 2 variables
[13:18:00] <ikke> token and next
[13:18:29] <ikke> before the loop, you set token
[13:18:32] *** Joins: revolve (~u0_a227@82-132-246-224.dab.02.net)
[13:18:37] <mrig> yep
[13:21:00] *** gggp__ is now known as gggp
[13:21:04] *** Joins: xsteadfastx (~marv@94.31.101.21)
[13:23:35] <ikke> Then in the loop, you set next
[13:24:42] *** Joins: gggp_ (~gggp@111.63.14.121)
[13:25:13] *** Joins: LiftLeft (~LiftLeft@191.96.150.48)
[13:25:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[13:26:35] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:27:03] <mrig> right, I'm a little surprised that the tokens are not replace in my playground example, I see why I need to make copies of the references if storing them though.
[13:28:02] <mrig> I've got my \n back in this version https://play.golang.org/p/d25iy9ugJu3
[13:28:08] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 265 seconds)
[13:28:48] <mrig> cool this is starting to make sense now :)
[13:28:58] *** Quits: gggp_ (~gggp@111.63.14.121) (Ping timeout: 240 seconds)
[13:29:11] <mrig> ah and the 0x9 is a tab
[13:30:23] <mrig> there token is not serving as a lookahead, so I need to work a way around that.
[13:30:37] <mrig> Thank you for your help ikke :)
[13:31:28] *** Quits: independent56 (~independe@185.69.145.158) (Remote host closed the connection)
[13:32:29] *** Quits: xsteadfastx (~marv@94.31.101.21) (Ping timeout: 265 seconds)
[13:33:29] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[13:37:33] <ikke> You are apparently getting a slice back, which is a reference
[13:38:00] <ikke> the slice has a reference to an underlaying array, which is modified by the decoder
[13:38:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[13:39:30] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:39:38] <mrig> yep, with you there.
[13:40:12] <mrig> I just need to find another way to do my look ahead.
[13:40:23] *** Joins: oxum (~oxum@106.203.221.241)
[13:40:54] <mrig> For the rest of the code I have been able to use the Token.Copy() command to make new versions of each token.
[13:42:06] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[13:45:34] *** Joins: arthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr)
[13:45:37] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[13:46:36] <ikke> make token the copy, and next the current?
[13:46:39] <mrig> oh I am only requiring the type, no need to keep an actual token :)
[13:46:49] <ikke> oh, that's also possible
[13:46:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[13:47:03] <mrig> keeps it a little cleaner then.
[13:47:43] *** ugjka is now known as isnessness
[13:47:52] *** isnessness is now known as ugjka
[13:48:05] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:48:08] <ikke> But if you only have the type, you cannot show the actual token value, right?
[13:48:09] <mrig> I could make a function that makes a copy, I think I like that idea.
[13:48:16] <ikke> Or was that just for debugging purposes?
[13:49:01] <mrig> no the lookahead is to deal with the /> token endings and tab depth, seems that the tabs are stored though.
[13:49:08] <mrig> I'd not realised this before.
[13:49:38] <mrig> So I was making a new layout from the parse trees depth.
[13:50:06] <mrig> I need to make a choice hear now as to how I want to deal with the tabs, maintaining or stripping them out.
[13:50:14] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[13:50:34] *** Quits: ugjka (~ugjka@2a03:ec00:b18f:1b67:cc10:2827:31c2:2094) (Quit: WeeChat 3.2)
[13:50:49] *** Joins: ugjka (~ugjka@2a03:ec00:b18f:1b67:cc10:2827:31c2:2094)
[13:51:15] <A_Dragon> mrig: what exactly is your target with doing this manually?
[13:51:20] *** Quits: ckopn (~evg@8.21.110.39) (Ping timeout: 265 seconds)
[13:51:27] <mrig> A_Dragon: fmt for svg
[13:51:43] <A_Dragon> ah okay
[13:51:46] <mrig> and wax on wax off for xml usage.
[13:52:10] <A_Dragon> sorry I just wanted to check you were doing something that was really needing this level of complexity
[13:52:21] <A_Dragon> honestly I'd be really dumb about it and not tokenise at all
[13:52:27] <A_Dragon> but that comes with its own issues
[13:52:44] <A_Dragon> eg if a string contains < somewhere and so on
[13:52:45] *** Joins: oxum (~oxum@106.203.221.241)
[13:52:46] <mrig> I really do want to get used to doing this kind of parsing code, so it is all good practice.
[13:52:49] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[13:53:17] <mrig> I've some other things to do that will require it, better that I cut my teeth on something visual.
[13:53:31] <mrig> can seem the error of my ways then :)
[13:54:36] *** Quits: freakazoid333 (~matt@2603-9000-cf0f-80e3-c53b-ee23-db77-54e5.inf6.spectrum.com) (Ping timeout: 272 seconds)
[13:57:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[13:57:55] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:59:04] *** Quits: LiftLeft (~LiftLeft@191.96.150.48) (Ping timeout: 265 seconds)
[14:09:47] *** Quits: ugjka (~ugjka@2a03:ec00:b18f:1b67:cc10:2827:31c2:2094) (Quit: WeeChat 3.2)
[14:10:02] *** Joins: ugjka (~ugjka@2a03:ec00:b18f:1b67:cc10:2827:31c2:2094)
[14:13:08] *** Quits: arthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[14:14:09] *** Quits: milosz (~milosz@user/milosz) (Ping timeout: 276 seconds)
[14:17:46] *** Joins: nperez (~nperez@2a02-a45b-17c4-1-a00-27ff-feab-4723.fixed6.kpn.net)
[14:25:47] *** Joins: oxum (~oxum@106.203.221.241)
[14:30:58] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 265 seconds)
[14:39:16] *** Joins: ckopn (~evg@176.59.49.214)
[14:41:41] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:5bf:aefb:36bd:9aa7) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[14:43:18] *** Joins: Jad (~Nashmi@user/jad)
[14:45:34] *** Joins: nyah (~nyah@90.221.186.180)
[14:58:13] *** Joins: Atque (~Atque@user/atque)
[15:02:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[15:04:04] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[15:04:26] *** imm__ is now known as imm_
[15:07:18] *** Joins: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net)
[15:10:07] *** Quits: foobaz212 (~foobaz212@119.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[15:13:42] *** Joins: independent56 (~independe@185.69.145.158)
[15:18:30] *** Quits: independent56 (~independe@185.69.145.158) (Ping timeout: 258 seconds)
[15:18:42] *** Quits: ckopn (~evg@176.59.49.214) (Ping timeout: 252 seconds)
[15:19:04] *** Joins: ckopn (~evg@8.21.110.39)
[15:23:16] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 272 seconds)
[15:23:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[15:23:59] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[15:36:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[15:36:32] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[15:49:50] *** Joins: dr0n (~minix@94.11.23.235)
[15:51:46] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:c53b:ee23:db77:54e5)
[15:53:00] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[15:55:14] *** Joins: isnessness (~ugjka@2a03:ec00:b18f:1b67:6a97:220d:aeb2:af9e)
[15:57:32] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 272 seconds)
[15:58:09] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[16:00:04] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:04:21] *** Joins: yoonkn (~user@175.197.208.79)
[16:12:57] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 265 seconds)
[16:15:20] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[16:19:52] *** Joins: fentanyl (~0xe3b7@ca1-1.azirevpn.net)
[16:20:47] *** Joins: yakiza (~yakiza@cpc91196-cmbg18-2-0-cust129.5-4.cable.virginm.net)
[16:22:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[16:23:13] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[16:24:07] *** Quits: fentanyl (~0xe3b7@ca1-1.azirevpn.net) (Ping timeout: 250 seconds)
[16:24:51] *** Joins: fentanyl (~0xe3b7@ca1-1.azirevpn.net)
[16:28:55] *** Joins: src (~src@user/src)
[16:36:55] *** Quits: qilx (~quassel@62.201.21.8) (Remote host closed the connection)
[16:44:16] *** Joins: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de)
[16:45:20] *** Quits: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de) (Client Quit)
[16:48:17] *** Joins: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de)
[16:48:41] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:48:58] *** Quits: martin_ (nobody@188.113.85.137) (Quit: WeeChat 3.0)
[16:49:13] *** Joins: normen (~normen@p200300d7173dc9004cb3d82361c54a96.dip0.t-ipconnect.de)
[16:51:17] *** Quits: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de) (Client Quit)
[16:55:17] *** Joins: martin_ (nobody@188.113.85.137)
[16:56:28] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:5bf:aefb:36bd:9aa7)
[16:57:17] *** Joins: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de)
[16:59:29] *** Joins: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[17:01:22] *** Quits: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de) (Ping timeout: 240 seconds)
[17:01:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[17:02:34] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[17:04:20] *** Quits: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 256 seconds)
[17:11:41] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1)
[17:13:02] *** Joins: Atque (~Atque@user/atque)
[17:13:26] *** Joins: iateadonut (~dan@121.177.17.154)
[17:15:01] *** Joins: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[17:21:06] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 240 seconds)
[17:21:30] *** Quits: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 240 seconds)
[17:23:47] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[17:29:31] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[17:32:16] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[17:34:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[17:34:59] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[17:35:03] *** Joins: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[17:35:36] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[17:35:39] *** Joins: oxum (~oxum@106.203.221.241)
[17:38:14] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 272 seconds)
[17:40:37] *** Joins: moonface (~moonface@45.133.4.49)
[17:40:40] *** Joins: moonface__ (~moonface@45.133.4.49)
[17:40:49] <iateadonut> where would you find struct tags in the documentation?
[17:41:08] *** Joins: welt (~welt@willow.spiderden.net)
[17:41:23] *** Quits: moonface__ (~moonface@45.133.4.49) (Client Quit)
[17:41:23] *** Quits: moonface (~moonface@45.133.4.49) (Client Quit)
[17:41:24] *** Quits: ckopn (~evg@8.21.110.39) (Ping timeout: 265 seconds)
[17:42:32] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[17:42:46] *** Joins: sizeof_void34 (~Thunderbi@109.252.75.112)
[17:46:43] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:5bf:aefb:36bd:9aa7) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[17:46:54] <fizzie> Semantics of *specific* tags, or just what struct tags are all about?
[17:47:22] *** Quits: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net) (Quit: Client closed)
[17:47:38] *** Joins: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net)
[17:48:39] *** Quits: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 265 seconds)
[17:48:48] *** Joins: xsteadfastx (~marv@94.31.101.21)
[17:48:49] <fizzie> For the latter, https://golang.org/ref/spec#Struct_types explains the concept ("A field declaration may be followed by an optional string literal /tag/, --") and the perhaps slightly non-obvious https://pkg.go.dev/reflect#StructTag documents the common convention for how tags strings are formatted.
[17:50:16] *** Quits: fentanyl (~0xe3b7@ca1-1.azirevpn.net) (Ping timeout: 272 seconds)
[17:54:31] *** Joins: fentanyl (~0xe3b7@ca1-1.azirevpn.net)
[17:55:19] *** Quits: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[17:55:34] <A_Dragon> though do note that they can contain anything
[18:01:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[18:02:16] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[18:08:38] *** Quits: xsteadfastx (~marv@94.31.101.21) (Ping timeout: 272 seconds)
[18:10:24] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:13:28] *** Quits: zwr (~zwr@2804:14c:5bc5:8b2c:3553:691d:7df4:8081) (Ping timeout: 256 seconds)
[18:24:07] *** Joins: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net)
[18:25:10] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[18:27:56] *** Joins: yoonkn (~user@175.197.208.79)
[18:28:39] *** Quits: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be) (Read error: No route to host)
[18:29:35] *** Joins: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be)
[18:31:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[18:31:37] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[18:36:32] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:57:07] *** Quits: isnessness (~ugjka@2a03:ec00:b18f:1b67:6a97:220d:aeb2:af9e) (Quit: WeeChat 3.2)
[18:57:28] *** Quits: ugjka (~ugjka@2a03:ec00:b18f:1b67:cc10:2827:31c2:2094) (Quit: WeeChat 3.2)
[18:59:15] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[19:00:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[19:00:58] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[19:04:32] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[19:12:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[19:13:16] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[19:14:33] *** Quits: yakiza (~yakiza@cpc91196-cmbg18-2-0-cust129.5-4.cable.virginm.net) (Quit: Client closed)
[19:15:35] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[19:17:12] *** Quits: rabbitear (~juice@142.93.115.104) (Quit: leaving)
[19:20:41] *** Joins: rabbitear (~juice@142.93.115.104)
[19:25:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[19:25:33] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[19:27:23] *** Quits: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net) (Quit: Client closed)
[19:27:36] *** Joins: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net)
[19:30:29] *** Joins: oxum (~oxum@106.203.221.241)
[19:35:26] *** Joins: ugjka (~ugjka@ugjka.net)
[19:35:46] *** Quits: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[19:36:02] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[19:43:03] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[19:44:18] *** Quits: revolve (~u0_a227@82-132-246-224.dab.02.net) (Read error: Connection reset by peer)
[19:46:12] *** Joins: revolve (~u0_a227@82-132-245-165.dab.02.net)
[19:47:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[19:48:02] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 265 seconds)
[19:48:02] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[19:49:27] *** Joins: arcatech (~arcatech@user/arcatech)
[19:51:14] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Ping timeout: 272 seconds)
[19:51:54] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[19:54:09] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[19:57:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[19:58:12] *** Joins: independent56 (~independe@85.255.232.5)
[19:58:40] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[19:59:35] *** Joins: ckopn (~evg@8.20.127.119)
[20:03:31] *** Joins: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net)
[20:08:19] *** Quits: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[20:08:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[20:09:42] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[20:14:28] *** Quits: independent56 (~independe@85.255.232.5) (Remote host closed the connection)
[20:17:12] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 272 seconds)
[20:17:55] *** Joins: arcatech (~arcatech@user/arcatech)
[20:21:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[20:22:43] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[20:23:20] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[20:23:54] *** Joins: oxum (~oxum@106.203.221.241)
[20:27:25] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[20:28:54] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 252 seconds)
[20:31:23] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:d406:dd5:8f7:c6b2)
[20:34:56] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:c53b:ee23:db77:54e5) (Ping timeout: 272 seconds)
[20:35:31] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[20:35:46] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[20:36:35] *** Joins: c10l (~c10l@89.34.167.207)
[20:38:28] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[20:38:46] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[20:38:48] *** Joins: masoudd (~masoudd@user/masoudd)
[20:39:41] *** Joins: blinux2 (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[20:41:00] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 252 seconds)
[20:42:09] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[20:42:32] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[20:45:04] *** Quits: blinux2 (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Ping timeout: 265 seconds)
[20:45:06] <f8l12> is there a better way to do this? https://play.golang.org/p/KkQda-4llRz in particular line 30 seems sketchy
[20:46:59] *** Joins: blinux2 (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[20:52:02] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 272 seconds)
[20:52:20] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:5bf:aefb:36bd:9aa7)
[20:52:58] <f8l12> should probably use a mutex for the heap access: https://play.golang.org/p/C0g9EfTfhyT
[20:54:06] *** Joins: foobaz21259 (~foobaz212@111.188.159.143.dyn.plus.net)
[20:57:22] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Ping timeout: 258 seconds)
[20:58:07] *** Joins: oxum (~oxum@106.203.221.241)
[21:02:38] <f8l12> it's bad because if the workerPool chan is congested the priority won't matter
[21:02:55] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[21:03:26] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[21:05:09] *** Joins: oxum (~oxum@106.203.221.241)
[21:07:27] <f8l12> this is better i guess: https://play.golang.org/p/d0P4Q5YW4VE but can it be improved? i don't know if ticking at 50ms is the best approach
[21:09:42] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[21:12:25] *** blinux2 is now known as blnux
[21:16:38] *** Quits: ckopn (~evg@8.20.127.119) (Ping timeout: 252 seconds)
[21:18:34] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 272 seconds)
[21:20:17] *** Joins: mrig (~mrig@user/mrig)
[21:29:03] *** Joins: pepee (~user@user/pepee)
[21:42:32] <nevivurn> I only read the last version, it looks very racy, even with the locks.
[21:46:28] <f8l12> i had to lock the Len() call too https://play.golang.org/p/woCK7Dc-MYS
[21:46:53] <f8l12> but yeah i know what you mean. i'm not sure how else to write it
[21:52:24] <nevivurn> f8l12: you could use sync.Cond, I think?
[21:54:22] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 246 seconds)
[22:00:00] <nevivurn> f8l12: https://play.golang.org/p/6MEJKVFoPnx something like this
[22:03:50] <iateadonut> fizzie, thanks.  if you have a struct field 'f', you can get the Tag, if it exists, from f.Tag - i'm just not sure how i would ever find this in the go documentation
[22:09:01] *** Joins: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[22:10:45] *** Joins: ckopn (~evg@8.21.110.39)
[22:13:32] *** Joins: buffet (~buffet@buffet.sh)
[22:14:18] *** Quits: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 272 seconds)
[22:14:25] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[22:20:49] *** Joins: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[22:21:47] <fizzie> In that case f would be a reflect.StructField, so you'd look at its documentation: https://pkg.go.dev/reflect#StructField
[22:22:12] *** Quits: gregf (~gregf@user/gregf) (Quit: ZNC - https://znc.in)
[22:23:52] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[22:24:32] *** Joins: independent56 (~independe@85.255.235.132)
[22:25:07] *** Quits: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 245 seconds)
[22:26:47] *** Joins: LiftLeft (~LiftLeft@191.96.227.125)
[22:29:14] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:31:44] <f8l12> thanks nevivurn
[22:35:08] <iateadonut> aha.
[22:35:24] <iateadonut> f8|12, just curious, what you're building exactly?
[22:37:01] <f8l12> iateadonut, a database adapter
[22:37:45] *** Joins: gregf (~gregf@user/gregf)
[22:38:42] *** Quits: independent56 (~independe@85.255.235.132) (Ping timeout: 240 seconds)
[22:43:19] <iateadonut> it has a Swap() function; on what basis does it change priority of an item?
[22:44:14] <iateadonut> what are you doing this for?  is it going to be on github?  i'm kind of curious where this goes.
[22:47:01] <f8l12> that's just a standard priority queue taken from https://pkg.go.dev/container/heap#example__priorityQueue
[22:47:41] <f8l12> basically i have a server which needs to serve up requests to users and it does stuff in the background as well. and i want to prioritize user requests
[22:48:40] <iateadonut> very neat.  good luck.
[22:49:25] *** Parts: iateadonut (~dan@121.177.17.154) ()
[23:00:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[23:00:30] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:04:32] <f8l12> b0nn, you said yesterday you use a pool to manage db connections. wondering how many workers you use?
[23:06:36] <flam> custom connection pool, not one provided by db library?
[23:08:56] <f8l12> flam, yeah. the postgres driver doesn't provide one
[23:14:05] *** Quits: chripell__ (~chripell@109.255.230.3) (Quit: Leaving)
[23:14:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[23:15:21] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:29:38] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[23:32:47] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[23:33:04] *** Joins: thing (~thing@user/thing)
[23:39:11] *** Joins: independent56 (~independe@85.255.235.132)
[23:39:30] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:5bf:aefb:36bd:9aa7) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[23:42:01] <NCS_One> f8l12: which driver?
[23:42:09] <f8l12> NCS_One, pq
[23:44:31] *** Joins: hexfive (~eric@50.35.83.177)
[23:44:35] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[23:49:37] *** Joins: v0lta (~dkmueller@2a01:c22:729b:b200:d529:fc38:a873:b8c5)
[23:51:27] *** Quits: sizeof_void34 (~Thunderbi@109.252.75.112) (Quit: sizeof_void34)
[23:54:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[23:54:50] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:59:41] *** Joins: Guest4286 (~hentai@2a01:e0a:a5c:a070:71cc:b7d7:6cfd:d400)
[23:59:41] *** Quits: Guest4286 (~hentai@2a01:e0a:a5c:a070:71cc:b7d7:6cfd:d400) (Changing host)
[23:59:41] *** Joins: Guest4286 (~hentai@user/hentai)
