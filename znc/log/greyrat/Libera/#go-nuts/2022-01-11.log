[00:00:26] *** Quits: bkircher (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689) (Remote host closed the connection)
[00:00:40] *** Joins: bkircher (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689)
[00:00:58] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[00:01:28] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[00:01:57] *** Joins: mickey8 (~user@user/mickey)
[00:02:56] <pyzozord> mickey8: swagger has  generators
[00:03:14] *** Quits: Nixieboluo (~Nixiebolu@47.93.220.75) (Quit: Ping timeout (120 seconds))
[00:03:17] <pyzozord> https://swagger.io/tools/swagger-codegen/
[00:03:45] *** Joins: Nixieboluo (~Nixiebolu@47.93.220.75)
[00:08:13] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[00:08:58] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[00:15:50] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:17:13] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:21:11] *** Joins: Xjs (~jannis@user/xjs)
[00:25:15] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:32:08] <pyzozord> something is inconsistant for me, variable declarations as well as function arguments have first identyfier and then the type
[00:32:51] <pyzozord> however this expression has & then type then literal  &foostruct{}
[00:33:31] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:34:43] *** Joins: trafficjam (~qubes@119.17.42.59)
[00:34:45] *** Quits: internut (~internut@98.38.226.136) (Remote host closed the connection)
[00:36:09] <NCS_One> pyzozord: isn't {} the type?
[00:36:58] <pyzozord> I don't know but I don't think so because you can put values inside
[00:37:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[00:37:17] <NCS_One> it's a struct
[00:37:35] <pyzozord> yes {} is an empty struct as far as I can tell, a value
[00:37:42] <pyzozord> a literal of an empty struct
[00:37:45] * b0nn is tempted to say "look it up in the godoc..."
[00:38:25] <pyzozord> yeah I mean I can look up everything in the godoc but that's going to take a lot of time and then I don't need your help at all :P
[00:38:56] <b0nn> I'm not really sure what you're asking too, to be really honest
[00:39:17] *** Joins: fikran (~fikran@user/fikran)
[00:39:22] <b0nn> your code is "adddress of a instance of a type with this data"
[00:39:32] <pyzozord> why yes
[00:39:43] <b0nn> it would noramally be a:= &foo{}
[00:39:47] <pyzozord> I'm asking about the inconsistancy I see in the syntax.
[00:39:56] <b0nn> what incosistency?
[00:40:11] <b0nn> my god my typing and spelling are terrible this morning
[00:40:24] <fogobogo> frefkjkl saawem wqepoewq?
[00:40:36] <b0nn> close :)
[00:40:42] <fogobogo> :D
[00:40:57] *** Quits: moto (~moto@user/moto) (Ping timeout: 240 seconds)
[00:41:11] <pyzozord> Go presents itself to be a language where type is "after" [the identyfier]
[00:41:13] <fogobogo> not sure you even need the {}
[00:41:31] <ikke> {} is not an identifier
[00:41:39] <pyzozord> but that is not the case with these struct literals, in this case the type comes BEFORE
[00:41:54] <ikke> type after identifier, but before literal :-)
[00:41:54] <pyzozord> yes I guess it's not but you know, it's still kind of inconsistant, isn't it?
[00:42:00] <b0nn> no
[00:42:07] <fogobogo> from what i understood {} is just 'init empty'
[00:42:22] <pyzozord> ooh could be "after identyfier but before literal"
[00:42:32] <pyzozord> I was interpreting it as "after everything" kind of
[00:42:49] <pyzozord> "after the thing" where thing is either identyfier or value/literal
[00:43:01] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[00:43:08] <ikke> map[foo]bar is also a thing
[00:43:15] <pyzozord> identifier
[00:44:01] <pyzozord> but that's one big type isn't it? just a "composite" type
[00:44:04] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[00:44:30] <fogobogo> fun really starts with map[int]string.inteface{} or somesuch
[00:44:54] <mickey8> if i have a type A []struct{}, why can't I range over A{} ?
[00:45:17] <ikke> f := map[string]foo{"a": foo{}}
[00:45:45] <fogobogo> mickey8: because you range over an array but not a custom data type
[00:45:48] <pyzozord> fogobogo: I don't reall understand what is this, it's a type that is a map with int keys and values that are string.interface structs, but what does {} do there
[00:46:09] <fogobogo> mickey8: program just doesn't know what might be hiding in a struct
[00:46:35] <ikke> It's a map from string to foo, which sets a key "a" to an instance of foo{}
[00:46:58] <fogobogo> pyzozord: beat me too. var mystruct []MyStruct is perfectly fine as is var mystruct []MyStruct{}
[00:47:33] <ikke> It's an initializer, which is optional
[00:47:49] <fogobogo> pyzozord: as said, afaik, {} is just 'initialize with no values'
[00:48:05] <pyzozord> ooh
[00:48:36] <pyzozord> I was thinking of it more as "create anonymous empty typeless struct then cast/convert it to mystruct"
[00:48:58] <fogobogo> you might choose to do otherwise in which case it all makes sense. e.g. var mystruct MyStruct{ .Name = "poop" }
[00:49:59] <pyzozord> I was thinking that Foo{} are actually two expressions. But it really is one expression with optional parameters
[00:50:15] <mickey8> fogobogo https://go.dev/play/p/_0s1Y2Z-A07
[00:50:26] *** Quits: trafficjam (~qubes@119.17.42.59) (Ping timeout: 256 seconds)
[00:50:33] <mrig> pyzozord: I think it is the := that is throwing you there
[00:50:56] <fogobogo> mickey8: *v is you're using pointers
[00:51:01] <mrig> there is also a new(thing) command that does the same, but it seems to have fallen out of favor.
[00:51:10] <fogobogo> mickey8: for _, t := range *v {
[00:51:32] <mickey8> fml. thanks.
[00:52:02] <fogobogo> we don't range over pointers. leave that to C
[00:54:11] <fogobogo> mickey8: that would also work https://go.dev/play/p/q4CSAvAQEZ5
[00:55:58] <pyzozord> mrig: could be
[00:56:39] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[00:57:22] *** Quits: edrocks (~Ed@user/edrocks) (Remote host closed the connection)
[00:57:47] <pyzozord> what does [...] do?
[00:57:54] <pyzozord> just found it here https://go.dev/ref/spec#Composite_literals
[00:58:14] <pyzozord> ah "The notation ... specifies an array length equal to the maximum element index plus one."
[00:58:24] <pyzozord> I looked this one up in the documentation
[00:58:34] <mrig> there is both var thing mystruct   and   thing := mystruct{}
[00:58:42] <b0nn> lol :)
[00:59:17] *** Quits: ys (~ys@user/ys) (Remote host closed the connection)
[00:59:18] <pyzozord> https://go.dev/ref/spec is the human-friendliest language specification I've seen
[00:59:24] <fogobogo> pyzozord: theres an example [...]Point{{1.5, -3.5}, {0, 0}}     // same as [...]Point{Point{1.5, -3.5}, Point{0, 0}}
[00:59:35] <pyzozord> very reminescent of the language specification attached to K&R
[00:59:40] <pyzozord> but even better
[01:00:08] <fogobogo> i wouldn't say "The notation ... specifies an array length equal to the maximum element index plus one." is particularly easy to parse
[01:00:27] <pyzozord> comes to me very natraully
[01:01:25] <fogobogo> i'd prefer 'its like a car but...'
[01:01:30] <pyzozord> could be "... truns into array length" but that would be maybe too colloquial
[01:01:42] *** Joins: lechner (~lechner@debian/lechner)
[01:02:10] *** Joins: trafficjam (~qubes@119.17.42.59)
[01:02:16] <b0nn> Yeah - I find the ellipsis notation confusing
[01:02:22] *** Joins: bluedust (~bluedust@117.241.190.221)
[01:03:00] <b0nn> I didn't even realise it meant len +1, I had up till now thought it meant len
[01:03:06] <pyzozord> fogobogo: but look up c11 or c++11 or even ECMA-262 (javascript) those are hard to parse
[01:03:41] <pyzozord> it doesn't mean len + 1 it means last index + 1 which equals len
[01:03:56] <fogobogo> i'm not the most avid reader of specificatons. or phone books.
[01:04:19] <b0nn> index + 1?
[01:04:21] <ikke> Who _reads_ phonebooks?
[01:04:35] <b0nn> ikke: phonebookophiles :)
[01:04:48] <pyzozord> fogobogo: I am very much on the same boat. All I have has been worked out through literal sweat and tears and ibuprofens :P
[01:05:04] <mrig> back in the day, people who wanted to know a phone number.
[01:05:42] <b0nn> https://boingboing.net/2017/06/10/how-adam-west-played-a-prank-u.html
[01:05:49] <b0nn> ^ phone book pranks
[01:06:22] <_xor> Newbie question, but if I have CGO_ENABLED=1 and I need to pass additional header include dirs, what's the proper way to do it for go build? (I tried setting CFLAGS="-I/path/to/includes" and CXXFLAGS and CPPFLAGS, but no dice)
[01:06:37] *** Quits: bluedust (~bluedust@117.241.190.221) (Ping timeout: 240 seconds)
[01:07:02] <mrig> oh that's priceless!
[01:07:29] <fogobogo> reminds me, does anyone know lua tables? does go have some equal to that? map[int]string and such doesn't quite cut it
[01:08:07] <_xor> What are you trying to do?
[01:08:08] <ikke> fogobogo: what's lacking from that?
[01:08:24] <ikke> lua tables are a combination of lists and maps
[01:08:39] <_xor> I'm assuming you want to have flexible types for the key/value on your maps? (because that's what lua allows)
[01:09:20] <_xor> oh nevermind, got my answer.
[01:09:21] <fogobogo> well mostly that 'its almost like excel' feel. sure, you can have an array of maps but stuff like key value value value doesn't seem so obivous or maybe i'm missing something
[01:09:43] *** Quits: boof (~rickybob@146.70.38.38) (Quit: boof)
[01:09:49] <_xor> Huh?
[01:09:57] <ikke> You mean nested maps?
[01:10:00] <mrig> fogobogo: It is common to make a struct with both a map and a slice inside.
[01:10:02] <_xor> You want a hash table or something?
[01:10:16] <fogobogo> ikke: yeah, somesuch maybe
[01:10:24] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[01:11:10] <fogobogo> i mean, lua basically is just tables and a variable here and there though that might be tables too
[01:11:11] <_xor> Depending on your use-case, it might be beter to implement a hash table.
[01:11:17] <mrig> fogobogo: lua can not remove the slice (or array) from a table, go just give you the ingredients .
[01:12:15] <fogobogo> well its no big deal, just thought i might've missed something
[01:12:40] <ikke> fogobogo: lua is dynamically typed
[01:12:41] <pyzozord> is there a way to use "naked return" to return nothing when the function has defined named return values?
[01:13:02] <ikke> set those values to nil?
[01:13:08] <pyzozord> meaning the same way "naked return" returns nothing when the function doesn't have defined returned type at all
[01:13:10] <fogobogo> ikke: yeah, but then again, you have interfaces in go
[01:13:37] <pyzozord> oh so naked return in functions that don't have return type specfied returns null?
[01:13:40] <pyzozord> *nil
[01:14:00] <fogobogo> json.Unmarshal() can map you some unknown json but that too struggles with nesting
[01:14:19] <fizzie> If the function is declared to return values of some types, it must return at least the zero values of those types.
[01:14:54] <pyzozord> oh ho will not even let me test what is the return value of a funciton that doesn't have a retun type
[01:15:08] <ikke> it literally returns nothing
[01:15:24] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:1579:68c2:3775:df0e)
[01:15:27] <b0nn> the signature is a contract - you say you are going to return something, then you absolutely must return that something
[01:15:28] <fizzie> Not any more than C let you use the (nonexistent) return value of a `void f() {...}`.
[01:16:03] *** Quits: Piraty (~irc@user/piraty) (Quit: -)
[01:16:13] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 240 seconds)
[01:16:13] *** Joins: Piraty (~irc@user/piraty)
[01:16:17] <ikke> fogobogo: how does json.Unmarshal struggle with nesting?
[01:16:30] *** Joins: rcernin (~rcernin@101.189.141.138)
[01:16:46] *** Quits: Xjs (~jannis@user/xjs) (Read error: Connection timed out)
[01:16:51] <fogobogo> oh one other thing. is there a way to go run / build be a bit more lenient? like not abort if theres an unused variable because i commented out some code or complain about this or that import?
[01:17:59] *** Joins: moto (~moto@user/moto)
[01:17:59] <fizzie> No, but it's a frequently asked question. :)
[01:18:00] <fogobogo> ikke: well it doesn't like nested arrays. you get a map of the json object but anything thats an array isn't there. you'll have to specifically map that. in lua it'd just be yet another table
[01:18:03] <fizzie> https://go.dev/doc/faq#unused_variables_and_imports
[01:18:10] <fogobogo> fizzie: ah thanks
[01:18:36] <pyzozord> ok so when I say I will return something I must return at least a nothing, I cannot return without a value
[01:18:59] <fogobogo> ikke: subtable rather
[01:19:18] <pyzozord> talking about the distinction between "empty value" and "no value at all"
[01:19:47] <fogobogo> theres only one "no value at all" an its called nil
[01:19:50] <fizzie> fogobogo: If you want it to be entirely dynamic, you just unmarshal into a `map[string]interface{}`, and it'll have as much nesting as there is in the JSON.
[01:19:57] *** Joins: Xjs (~jannis@user/xjs)
[01:20:13] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:1579:68c2:3775:df0e) (Ping timeout: 240 seconds)
[01:20:13] <b0nn> maybe look at rawjson first though
[01:20:18] <mrig> does anyone have any advice for persistent caching of data when installing to an os? Are build constraints perhaps the best way to detect and act accordingly?
[01:20:55] <b0nn> mrig: persistent caching in that instance needs to happen on another parition/disk
[01:21:05] <b0nn> partition too
[01:21:16] <mrig> how comes?
[01:21:22] *** Quits: deonild (~deonild@c-24-12-215-71.hsd1.il.comcast.net) (Quit: Leaving)
[01:21:53] <b0nn> the installation of the os usually destroys any references to data held locally
[01:22:21] <fizzie> pyzozord: The language supports having more than one return value, so it's kind of consistent that "returns nothing" is just the "returns 0 values" case. And every type has a designated zero value (that, for example, variables of that type are initialized by default), but that zero value isn't always `nil`.
[01:22:28] <mrig> oh, not for an OS but when installing a program with the go install command.
[01:22:30] <b0nn> that's why a lot of linux put / on a different partition to /home
[01:22:48] <b0nn> oh TO an OS, my bad
[01:23:02] <mrig> yes I was just learning about /var, really good to know!
[01:23:13] <fogobogo> yeah, did that to. can basically swap the distro without losing my /home
[01:23:36] <mrig> but am also thinking of windows, and I've no idea where things go on mac yet.
[01:23:51] <b0nn> WRT /home - back in myyyyy day ubuntu upgrades were less than reliable and you very often lost everything
[01:24:15] <mrig> keeping /var looks useful too for mail and cached sites and the likes.
[01:24:27] <b0nn> mrig: so you are trying to cache shared libs?
[01:24:35] <ikke> fogobogo: https://go.dev/play/p/O9G3cFQUxCR
[01:24:36] <pyzozord> fizzie: so there are: "zero values" (like 0) and the "no value" (always nil), but there is no "no value"
[01:25:04] <ikke> nil is also a zero value
[01:25:05] <b0nn> pyzozord: there kind of is, it's a shared value
[01:25:06] <pyzozord> sorry last quote is spposed to be "value not provided at all"
[01:25:17] <b0nn> but it's still a value
[01:25:40] <fizzie> `nil` is the zero value of many types (maps, pointers, slices, interface types, maybe more).
[01:26:00] <pyzozord> can I assign nil to an int variable?
[01:26:02] <fizzie> But not the zero value of integer types, floating-point types, strings or arrays.
[01:26:05] <ikke> pyzozord: no
[01:26:06] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:26:12] <pyzozord> ah, ok it's clear now
[01:26:19] <pyzozord> there are only "zero values"
[01:26:53] <mrig> Well I'm pondering where to to put cached data that a client app that I wrote, figured that it would be nice to make a little example of an installed program that is a little tidier than I currently do. At the moment it stores xkcd data in a folder with the source code but this is obviously not any good for a program that is going to be installed.
[01:27:06] <fogobogo> ikke: i stand corrected. how can one access say, 3?
[01:27:27] <b0nn> mrig: Persist data to a DB, or /tmp
[01:27:39] <pyzozord> mrig: few standard places are /var, /usr/var, ~/.cache
[01:27:58] <ikke> /var/lib in particular
[01:28:01] <pyzozord> although those vars and .cache are kind of different
[01:28:18] <mrig> the thing that I'm wondering is how best to code for windows or posix
[01:28:20] <fizzie> fogobogo: `j.([]interface{})[1].([]interface{})[0].(float64)` gets you 3.
[01:28:29] <pyzozord> mrig: man hier and man file-hierarchy
[01:28:29] <fogobogo> fizzie: good lord
[01:28:34] <fizzie> Of course you'd usually write it with a bit more steps.
[01:29:11] <fogobogo> yeah, thats not quite lua regardless. close? i guess?
[01:29:33] <mrig> b0nn: it is already going to a file, (on this occasion) was really looking for best practices for portable programs in this reguard.
[01:30:15] <mrig> pyzozord: yes found that one earlier on, really useful"
[01:30:17] <mrig> !
[01:30:30] <pyzozord> for really portable programs you might want to provide a flag to let the user decide where it goes
[01:30:45] <pyzozord> and have a safe default of "." maybe?
[01:31:00] <fizzie> fogobogo: Of course if they're all of uniform type, you don't _have_ to unmarshal it into the most generic type. https://go.dev/play/p/rBkMTRI3HjP works just as well, and lets you write just j[1][0].
[01:31:11] <b0nn> follow on enforced!
[01:31:16] <gjvc> what's the most common format for configuration files in go apps?  .ini?
[01:31:21] <b0nn> oh, hrm, tyhis isn't twitter :\
[01:31:52] <fizzie> But if it's a heterogenous list, then yes, the Go version will probably look a little more verbose than your average "types are just suggestions" language.
[01:31:55] <fogobogo> fizzie: ho hum, but you'd have to know the type beforehand. also the array indices
[01:32:14] *** Joins: walterwhip (~www@user/walterwhip)
[01:32:25] <fogobogo> quite nice anyway
[01:32:43] <ikke> fogobogo: https://go.dev/play/p/Yo1gXZFJ6he
[01:32:51] <pyzozord> ah few moments later I arrived at the zero values subject https://go.dev/tour/basics/12
[01:32:58] <ikke> oh, I see fizzie already answered
[01:33:16] <pyzozord> (I'd probably still have the same questions after this slide though)
[01:33:18] <fogobogo> yeah, thanks anyway
[01:33:32] <mrig> I'm think at the moment that the user has absolutely no idea what they are doing, and would like to put the cache somewhere that it is cleared when they clear system cache but not when they clear temporary files. Yes a flag to override that would be a must though.
[01:34:49] <ikke> to me cache is temporary files
[01:35:01] <fogobogo> mrig: afaik most OS' these days have provisions for that. XDG_DATA_DIR on linux, windows should have something likewise and no idea about mac
[01:36:28] <fogobogo> pretty sure theres some %ProgramFiles% or somesuch on windows.
[01:37:15] <mrig> I picked up a link to xdg a little earlier will have a thorough read through of that.
[01:37:49] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:38:04] <mrig> Yes looks like I can use the build to direct which code is run, would be the most logical it would seem.
[01:38:36] <fogobogo> mostly just sets a few environment variables. e.g. XDG_CACHE_HOME is where cache files shall go to, XDG_CONFIG_HOME where application settings belong
[01:38:45] <mrig> If I do it at runtime then cross compiling would go wrong.
[01:38:46] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:38:57] <mrig> oh right that does sound ideal.
[01:39:25] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:40:30] <fogobogo> be sure to fall back to something sensible though if you can't getenv() those values. xdg is widespread but not mandatory
[01:41:25] *** Quits: alwyn (~alwyn@user/alwyn) (Ping timeout: 240 seconds)
[01:44:23] <mrig> Right noted, thanks for the pointer.
[01:45:18] <ikke> On my system, those XDG_* veriables are not set in the env
[01:45:24] <ikke> but they are certainly used
[01:45:31] <ikke> afaik, the env variables are only meant to override it
[01:47:30] <fogobogo> yeah, xdg handles a few other things too. localized folder names and such
[01:48:37] <ikke> mrig: https://pkg.go.dev/github.com/adrg/xdg
[01:48:46] <ikke> (and there are many more)
[01:51:09] <mrig> oh great, thank you.
[01:58:14] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[01:59:36] *** Joins: Atque (~Atque@user/atque)
[02:01:11] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Quit: WeeChat 3.0)
[02:03:17] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[02:03:36] *** Joins: shtirlic_ (~shtirlic@178.70.131.230)
[02:05:51] *** Quits: bkircher (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689) (Ping timeout: 268 seconds)
[02:06:38] *** Quits: shtirlic (~shtirlic@178.70.131.230) (Ping timeout: 252 seconds)
[02:06:49] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:07:35] *** Joins: walterwhip (~www@user/walterwhip)
[02:07:36] *** csmarchbanks_ is now known as csmarchbanks
[02:08:07] *** Quits: fjb (~fjb@2804:378:9085:6200:1fec:696e:9e8e:7c9b) (Quit: fjb)
[02:14:40] *** Quits: Xjs (~jannis@user/xjs) (Read error: Connection timed out)
[02:15:17] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:18:04] *** Joins: walterwhip (~www@user/walterwhip)
[02:18:22] *** Joins: Xjs (~jannis@user/xjs)
[02:26:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:26:24] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:26:58] *** Joins: walterwhip (~www@user/walterwhip)
[02:30:23] *** Joins: maidhc_ (~maidhc@user/maidhc)
[02:31:17] *** maidhc_ is now known as maidhc
[02:34:32] *** Quits: Xjs (~jannis@user/xjs) (Read error: Connection timed out)
[02:39:36] *** Quits: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it) (Quit: Leaving)
[02:40:46] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:47:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:47:49] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:48:38] *** Joins: fikran (~fikran@user/fikran)
[02:50:05] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:50:33] <mfiano> Can anyone help with this? https://gist.github.com/mfiano/fe4d71248952f2fec17441a3fa29b94e
[02:50:38] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[02:51:57] <albertito> mfiano: maybe you need -gccgoflags -I/usr/local/include or something like that?
[02:52:56] <mfiano> go build: when using gc toolchain, please pass compile flags using -gcflags, and linker flags using -ldflags
[02:53:07] <mfiano> I tried using the flag they suggest and get the same error
[02:57:47] *** Joins: rcernin_ (~rcernin@101.189.141.138)
[03:00:37] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[03:02:47] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com)
[03:02:59] *** Joins: walterwhip (~www@user/walterwhip)
[03:03:20] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[03:05:13] <fikran> Hi all. I have an issue where a write to a map causes a completely unrelated bit of code to malfunction.
[03:05:27] <fikran> I isolated the issue to what appears to be a single line, but I do not see the connection between the two
[03:06:05] <fikran> The line here is failing: https://gitlab.com/khanzf/fedilogue/-/blob/relay-debug/fedilogue/follow.go#L66
[03:07:39] <fikran> The error being reported is...FATAL: json: unsupported type: func(*http.Request) (*url.URL, error)
[03:08:22] <fikran> I isolated it to this. If this line (https://gitlab.com/khanzf/fedilogue/-/blob/relay-debug/fedilogue/instance.go#L93) is run, then that random error message pops up. If not, it doens't.
[03:08:29] <fikran> I do not see the connection between the two.
[03:08:43] <fikran> Any ideas on how to help identify/isolate the problem?
[03:12:15] *** Joins: mikoto-chan (~mikoto-ch@185.25.79.189)
[03:12:46] <mfiano> Solved. cgo does not know to look in the right paths for headers and libraries on FreeBSD/
[03:13:25] <fikran> I'm not certain why one bit of code is changing something unrelated elsewhere...
[03:15:24] *** Joins: Xjs (~jannis@user/xjs)
[03:16:29] <fikran> COuld it be a memory corruption issue? I have no idea why this is doing this...
[03:16:36] <fikran> Does golang have memory issues like that?
[03:19:08] <fikran> hm...just updating this map is causing some sort of bizzare issue where a variable in another place is beig modified.
[03:26:27] *** Joins: user (~user@62.216.61.67)
[03:26:33] *** Parts: user (~user@62.216.61.67) ()
[03:26:45] *** Joins: user (~user@62.216.61.67)
[03:27:25] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 240 seconds)
[03:27:40] *** Quits: beholders_eye (~weechat@2804:1b3:70c3:780f:2dd0:e9d9:61c8:7724) (Remote host closed the connection)
[03:29:23] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:30:10] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[03:30:23] <destroycomputers> fikran, looking at the code, I assume the problem is that RunningInstance contains a field of type http.Client. You should explicitly omit the field from serialised representation by attributing it `json:"-"`, as per the docs https://pkg.go.dev/encoding/json
[03:31:54] <destroycomputers> (as well as all the other fields you don't want in your JSON)
[03:31:55] *** Quits: souvik_ (~souvik@80.179.69.245.cable.012.net.il) (Read error: Connection reset by peer)
[03:31:56] *** Quits: adip (~adip@user-188-33-250-10.play-internet.pl) (Ping timeout: 256 seconds)
[03:35:04] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[03:35:07] *** Joins: souvik (~souvik@103.59.72.42)
[03:35:10] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[03:35:51] *** Parts: user (~user@62.216.61.67) ()
[03:37:30] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:40:39] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:41:54] <fikran> I've been butchering a lot of code to see if I can isolate the issue further.
[03:42:07] <fikran> but...I don't understand what you're suggesting? @ destroycomputers
[03:43:28] <destroycomputers> fikran, add `json:"-"` for this field https://gitlab.com/khanzf/fedilogue/-/blob/relay-debug/shared/headers.go#L61
[03:44:44] <destroycomputers> and all the other fields you don't want in your resulting JSON. Although, it may be a better idea to factor out all the fields that should be serialised in a separate struct and handle it separately, that's how it is usually done.
[03:51:43] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[03:51:59] *** Joins: matoro (~matoro@2600:1700:4b10:9d8e::2)
[03:51:59] *** Joins: mickey8 (~user@user/mickey)
[03:52:28] <fikran> ahh...
[03:52:38] * fikran experiments...
[03:53:17] <matoro> question, when bootstrapping using make.bash, how do I get it to cache the build results?  right now every time I make a change and re-run it takes ~15 minutes to re-bootstrap everything and get back to the point it was at
[03:54:26] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[03:55:17] *** Joins: Xjs (~jannis@user/xjs)
[03:56:22] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:56:43] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[03:58:31] *** Joins: walterwhip (~www@user/walterwhip)
[03:59:52] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[04:02:04] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-630-171.w86-246.abo.wanadoo.fr) (Quit: The Lounge - https://thelounge.chat)
[04:23:28] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[04:24:37] *** Joins: walterwhip (~www@user/walterwhip)
[04:24:54] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[04:25:17] *** Joins: xse (~xse@user/xse)
[04:28:13] *** Quits: souvik (~souvik@103.59.72.42) (Ping timeout: 240 seconds)
[04:28:38] *** Quits: naicam|ne (~naicam|ne@wireguard/tunneler/naicamne) (Read error: Connection reset by peer)
[04:36:52] *** Joins: naicam|ne (~naicam|ne@wireguard/tunneler/naicamne)
[04:38:43] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[04:40:13] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Client Quit)
[04:41:50] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[04:43:36] *** Joins: walterwhip (~www@user/walterwhip)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:43] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:00] *** Joins: deonild (~deonild@c-24-12-215-71.hsd1.il.comcast.net)
[04:51:47] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Quit: rickybob)
[04:55:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[04:58:00] *** Joins: fikran (~fikran@user/fikran)
[05:00:27] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[05:00:46] *** Joins: xse (~xse@user/xse)
[05:04:15] *** Joins: bluedust (~bluedust@117.241.190.221)
[05:05:09] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:05:52] *** Joins: walterwhip (~www@user/walterwhip)
[05:07:25] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[05:08:17] *** Quits: bluedust (~bluedust@117.241.190.221) (Ping timeout: 240 seconds)
[05:17:03] *** Joins: walterwhip (~www@user/walterwhip)
[05:17:23] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[05:24:57] *** Quits: dr0n (~nabromov@176.26.119.61) (Ping timeout: 240 seconds)
[05:25:55] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[05:27:02] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[05:29:51] *** Joins: walterwhip (~www@user/walterwhip)
[05:33:29] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[05:33:44] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:37:44] *** Quits: trafficjam (~qubes@119.17.42.59) (Ping timeout: 256 seconds)
[05:43:34] *** Joins: califax- (~califax@user/califx)
[05:44:39] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:44:40] *** califax- is now known as califax
[05:48:30] *** Quits: deonild (~deonild@c-24-12-215-71.hsd1.il.comcast.net) (Remote host closed the connection)
[05:52:20] *** Joins: ethoxy (~root@bison.sh3ll.ru)
[05:58:02] *** Joins: neurocyte09175 (~neurocyte@IP-045143079193.dynamic.medianet-world.de)
[05:58:03] *** Quits: neurocyte09175 (~neurocyte@IP-045143079193.dynamic.medianet-world.de) (Changing host)
[05:58:03] *** Joins: neurocyte09175 (~neurocyte@user/neurocyte)
[05:58:26] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com)
[06:00:15] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[06:00:15] *** neurocyte09175 is now known as neurocyte0917
[06:03:49] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Ping timeout: 240 seconds)
[06:05:35] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[06:06:43] *** Joins: monkeycoder (~monkey@183.171.107.43)
[06:07:33] *** Joins: bluedust (~bluedust@117.241.190.221)
[06:08:36] *** Joins: walterwhip (~www@user/walterwhip)
[06:09:17] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[06:12:27] *** Quits: bluedust (~bluedust@117.241.190.221) (Remote host closed the connection)
[06:17:50] *** Joins: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea)
[06:19:36] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (Remote host closed the connection)
[06:23:47] *** Quits: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:24:46] *** Joins: souvik (~souvik@103.59.72.42)
[06:24:52] *** Joins: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com)
[06:27:20] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[06:28:53] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:29:18] *** Quits: souvik (~souvik@103.59.72.42) (Ping timeout: 256 seconds)
[06:31:26] *** Joins: walterwhip (~www@user/walterwhip)
[06:34:10] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:35:32] *** Quits: mikoto-chan (~mikoto-ch@185.25.79.189) (Ping timeout: 256 seconds)
[06:37:34] *** Joins: mikoto-chan (~mikoto-ch@185.25.79.189)
[06:38:49] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[06:39:32] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:43:29] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:46:56] *** Joins: lilgopher (~textual@2601:241:8000:38f0:348a:fa9a:ed32:eac8)
[06:48:13] *** Quits: mikoto-chan (~mikoto-ch@185.25.79.189) (Ping timeout: 240 seconds)
[06:51:38] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[06:51:59] *** Quits: feuerrot (~feuerrot@shells.chaosdorf.de) (Ping timeout: 268 seconds)
[06:52:55] *** Joins: feuerrot (~feuerrot@shells.chaosdorf.de)
[06:54:07] *** Quits: henry40408 (~henry4040@175.181.188.127) (Remote host closed the connection)
[06:54:36] *** Joins: henry40408 (~henry4040@175.181.188.127)
[06:55:49] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[06:59:55] *** Joins: darkapex_ (~darkapex@user/darkapex)
[07:00:19] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 256 seconds)
[07:05:00] *** Quits: monkeycoder (~monkey@183.171.107.43) (Ping timeout: 256 seconds)
[07:05:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[07:07:22] *** Joins: fikran (~fikran@user/fikran)
[07:10:40] *** Joins: mikoto-chan (~mikoto-ch@185.25.79.189)
[07:15:18] *** Joins: trafficjam (~qubes@118.127.126.178)
[07:16:59] *** Joins: buu_ (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[07:19:11] *** Quits: buu_ (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (Client Quit)
[07:27:40] *** Quits: trafficjam (~qubes@118.127.126.178) (Ping timeout: 256 seconds)
[07:27:44] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[07:29:30] *** Joins: trafficjam (~qubes@118.127.126.178)
[08:01:29] *** Joins: souvik (~souvik@103.59.72.42)
[08:05:12] *** Joins: anandn (~anandn@2601:600:a27f:d92d:4c9a:7729:efdf:f7c5)
[08:05:49] *** Quits: souvik (~souvik@103.59.72.42) (Ping timeout: 240 seconds)
[08:06:28] *** Joins: souvik (~souvik@80.179.69.241.cable.012.net.il)
[08:16:57] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[08:21:17] *** Quits: moog (~moog@107.126.53.103) (Remote host closed the connection)
[08:24:20] *** Quits: souvik (~souvik@80.179.69.241.cable.012.net.il) (Ping timeout: 256 seconds)
[08:27:49] *** Joins: souvik (~souvik@80.179.69.245.cable.012.net.il)
[08:29:14] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[08:34:03] *** Quits: matoro (~matoro@2600:1700:4b10:9d8e::2) (Quit: Client closed)
[08:36:47] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com)
[08:38:44] *** Joins: monkeycoder (~monkey@183.171.107.43)
[08:39:30] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[08:43:49] *** Joins: noarb- (~noarb@user/noarb)
[08:44:35] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 256 seconds)
[08:45:18] *** Quits: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net) (Ping timeout: 256 seconds)
[08:45:33] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[08:45:43] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[08:49:51] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[08:50:17] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[08:51:10] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[08:52:02] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[08:53:33] *** Joins: noarb (~noarb@user/noarb)
[08:54:22] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 256 seconds)
[08:54:37] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[08:58:58] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[09:14:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[09:16:43] *** Joins: fikran (~fikran@user/fikran)
[09:30:07] *** Joins: hanzo (uid532183@user/hanzo)
[09:46:54] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[09:55:01] *** Quits: mikoto-chan (~mikoto-ch@185.25.79.189) (Ping timeout: 240 seconds)
[10:04:07] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[10:18:05] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:21:20] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[10:22:13] *** Quits: monkeycoder (~monkey@183.171.107.43) (Ping timeout: 240 seconds)
[10:28:24] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[10:37:37] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[10:39:54] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.4)
[10:45:15] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:45:21] *** Joins: shka (~herr@109.231.0.226)
[10:47:40] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[10:47:50] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[10:55:59] *** Joins: theoceaniscool_ (~theoceani@119.12.233.166)
[10:56:22] *** Quits: theoceaniscool (~theoceani@119.12.233.166) (Read error: Connection reset by peer)
[10:56:25] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[10:57:17] *** Joins: yangby (~secret@115.199.105.217)
[10:58:39] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[10:59:28] <fogobogo> whats the syntax for ranging over an array starting at index 1 again? i seem to remember something like arr[:1] or [:1]arr or somesuch
[11:00:26] <fogobogo> ah, nvm. found it arr[1:] it is
[11:00:37] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[11:02:25] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[11:07:19] <tar_xvf> sometimes, i miss python negatives indices
[11:07:24] *** Joins: mikoto-chan (~mikoto-ch@95.214.66.65)
[11:08:22] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:08:48] <fogobogo> eh, python. not a fan tbh. 9 out of 10 times python ends with a traceback for me
[11:09:33] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[11:09:51] <tar_xvf> lol, i can't stand python
[11:10:14] *** Quits: lilgopher (~textual@2601:241:8000:38f0:348a:fa9a:ed32:eac8) (Quit: Textual IRC Client: www.textualapp.com)
[11:10:17] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:11:37] <fogobogo> they really botched that 2 to 3 transition and my god is python slow. wish the world would've just gone with a lua deluxe
[11:14:33] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[11:17:01] *** Quits: mikoto-chan (~mikoto-ch@95.214.66.65) (Ping timeout: 256 seconds)
[11:17:24] *** Joins: mikoto-chan (~mikoto-ch@95.214.66.65)
[11:17:25] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:17:37] *** Joins: mrig (~mrig@user/mrig)
[11:20:14] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 268 seconds)
[11:20:59] *** Joins: bkircher (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689)
[11:23:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[11:25:47] *** Quits: yangby (~secret@115.199.105.217) (Quit: Go out for a walk and buy a drink.)
[11:26:04] *** Joins: fikran (~fikran@user/fikran)
[11:26:05] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[11:26:33] <seebs> i was able to get python to beat go, but just barely, for performance
[11:26:42] <seebs> when i compared "go run" to a precompiled python script
[11:26:55] <seebs> for a hello-world type of thing
[11:33:00] *** Joins: fef (~thedawn@user/thedawn)
[11:33:36] *** Quits: mikoto-chan (~mikoto-ch@95.214.66.65) (Ping timeout: 256 seconds)
[11:33:48] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[11:35:06] *** Joins: mikoto-chan (~mikoto-ch@95.214.66.65)
[11:36:48] <RemoteHost> was that a hot run or a cold run
[11:36:54] <RemoteHost> ie, was it already compiled?
[11:37:10] <RemoteHost> and python is not slow :P
[11:37:19] <RemoteHost> its rather fast, especially pypy
[11:37:40] <fogobogo> thats a jit not interpreter no?
[11:37:51] <RemoteHost> all python is compiled
[11:37:59] <RemoteHost> even cpython is compiled
[11:38:15] <foobaz> i like python, especially 3, but it's the slowest language i use, and i use a few
[11:38:26] <RemoteHost> python is compiled to bytecode which is interpreted, but yes, pypy is a jit on top of that
[11:38:34] <fogobogo> from what i've seen lua is done by the time python gets is ass up
[11:38:37] <RemoteHost> its faster than js :P
[11:38:48] <RemoteHost> and lua is about ten thousand times less complex than python
[11:38:49] <fogobogo> now thats true
[11:39:00] <RemoteHost> and luajit is silly quick :P
[11:39:09] <foobaz> js is much faster in my experience, except maybe for specialized numpy stuff, but that's really C code
[11:39:51] <fogobogo> i'd argue thats just because you throw a jit at it nowadays
[11:39:58] <foobaz> oh absolutely
[11:40:43] <foobaz> lua is quite nice, it deserves to be more popular than it is
[11:41:37] <fogobogo> well it has its problems. most notably lack of a decent stdlib
[11:42:14] <foobaz> that's what killed pascal a couple decades ago
[11:43:42] <fogobogo> eh, pascal its kinda hard to read. from what i've seen fpc or was it lazarus comes with a brickton of bindings to all sorts or libs these days
[11:43:57] *** Joins: aLeSD (~aLeSD@2001:b07:6462:32c2:d0b4:84e9:62b6:1c15)
[11:43:58] <RemoteHost> lua exists to be embedded
[11:44:03] <RemoteHost> its not intended to be a GP lang
[11:44:07] *** Joins: absc (~absc@81.31.144.28)
[11:44:32] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[11:44:59] <fogobogo> might as well use it as that. hence my call for a lua deluxe
[11:45:43] *** Joins: califax (~califax@user/califx)
[11:46:58] <fogobogo> i know koreader is lua mostly. guess it had to because e-reader devices aren't exactly power horses
[11:47:39] <fogobogo> and lua just doesn't have that much of a footprint
[11:50:25] *** Joins: alwyn (~alwyn@user/alwyn)
[11:53:51] *** Quits: rcernin_ (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[11:58:17] *** Quits: danderson (~dave@tailscale/danderson) (Ping timeout: 240 seconds)
[11:59:06] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[12:01:05] *** Joins: adip (~adip@user-188-33-250-10.play-internet.pl)
[12:03:38] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[12:04:01] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[12:07:51] *** Quits: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) (Remote host closed the connection)
[12:08:37] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 240 seconds)
[12:12:33] *** Joins: jannis (~jannis@user/xjs)
[12:13:54] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf)
[12:15:25] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 240 seconds)
[12:18:37] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf) (Ping timeout: 240 seconds)
[12:20:59] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 252 seconds)
[12:22:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[12:23:39] *** Joins: morgabra (sid500580@user/morgabra)
[12:24:34] *** Joins: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp)
[12:26:08] *** Quits: sus (zero@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[12:26:44] *** Joins: sus (zero@user/zeromomentum)
[12:28:22] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[12:29:23] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[12:29:43] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[12:41:32] *** Joins: dr0n (~nabromov@92.40.255.113.threembb.co.uk)
[12:42:06] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[12:42:57] *** Joins: danderson (~dave@tailscale/danderson)
[12:42:57] *** ChanServ sets mode: +v danderson
[12:43:48] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:44:45] *** Joins: neurocyte0917 (~neurocyte@IP-045143079193.dynamic.medianet-world.de)
[12:44:45] *** Quits: neurocyte0917 (~neurocyte@IP-045143079193.dynamic.medianet-world.de) (Changing host)
[12:44:45] *** Joins: neurocyte0917 (~neurocyte@user/neurocyte)
[12:48:24] *** Quits: mikoto-chan (~mikoto-ch@95.214.66.65) (Ping timeout: 256 seconds)
[12:48:28] *** Joins: wcsiu (~wcsiu@user/wcsiu)
[12:49:47] *** Parts: wcsiu (~wcsiu@user/wcsiu) ()
[12:50:19] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[12:54:32] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 252 seconds)
[12:54:54] *** Joins: wcsiu (~wcsiu@user/wcsiu)
[12:56:31] *** Quits: wcsiu (~wcsiu@user/wcsiu) (Quit: leaving)
[12:59:02] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[12:59:23] *** Joins: mickey8 (~user@user/mickey)
[12:59:30] *** Joins: smach (~savio@177.12.48.44)
[12:59:41] *** Quits: smach (~savio@177.12.48.44) (Remote host closed the connection)
[13:03:09] *** Joins: ys (~ys@user/ys)
[13:06:20] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[13:07:37] *** Quits: d42 (~root@user/d42) (Ping timeout: 240 seconds)
[13:11:21] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[13:12:33] *** Quits: trafficjam (~qubes@118.127.126.178) (Quit: trafficjam)
[13:14:43] *** Joins: rendar (~rendar@user/rendar)
[13:24:21] *** Joins: dalan5 (~dalan@203-219-209-191.static.tpgi.com.au)
[13:25:49] *** Quits: dalan (~dalan@194-193-162-96.tpgi.com.au) (Ping timeout: 240 seconds)
[13:25:49] *** dalan5 is now known as dalan
[13:33:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[13:34:16] *** RemoteHost is now known as A_Dragon
[13:34:28] *** Joins: d42 (~root@user/d42)
[13:35:25] *** Joins: fikran (~fikran@user/fikran)
[13:40:02] *** Joins: maroloccio (~marolocci@151.75.59.229)
[13:41:08] *** Joins: absc (~absc@81.31.144.28)
[13:50:45] *** Joins: aLeSD_ (~aLeSD@93-34-146-120.ip50.fastwebnet.it)
[13:52:17] *** Joins: mikoto-chan (~mikoto-ch@91-157-120-246.elisa-laajakaista.fi)
[13:52:17] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf)
[13:53:47] *** Quits: aLeSD (~aLeSD@2001:b07:6462:32c2:d0b4:84e9:62b6:1c15) (Ping timeout: 268 seconds)
[13:57:14] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf) (Ping timeout: 252 seconds)
[14:00:51] *** Joins: jasonwucj (uid13975@id-13975.ilkley.irccloud.com)
[14:04:35] *** Quits: g2anj (~v@58.228.230.4) (Quit: .)
[14:12:43] *** Joins: andreisamoila (~andreisam@188.27.130.50)
[14:13:41] *** Joins: trafficjam (~qubes@118.127.126.178)
[14:17:47] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[14:18:59] *** Joins: g2anj (~v@58.228.230.4)
[14:19:58] *** Joins: bluedust (~bluedust@61.3.70.137)
[14:22:08] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[14:34:38] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 252 seconds)
[14:35:48] *** Quits: maroloccio (~marolocci@151.75.59.229) (Quit: WeeChat 3.0)
[14:39:53] *** Joins: bluedust_ (~bluedust@194.37.96.104)
[14:41:33] *** Quits: bluedust (~bluedust@61.3.70.137) (Remote host closed the connection)
[14:41:55] *** Joins: megamus_prime (~megamus_p@a89-154-196-21.cpe.netcabo.pt)
[14:42:09] *** Joins: bluedust (~bluedust@61.3.70.137)
[14:43:11] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[14:43:24] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf)
[14:45:08] *** Quits: bluedust_ (~bluedust@194.37.96.104) (Ping timeout: 256 seconds)
[14:46:13] *** Quits: bluedust (~bluedust@61.3.70.137) (Ping timeout: 240 seconds)
[14:48:13] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf) (Ping timeout: 240 seconds)
[14:52:12] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[14:53:18] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Ping timeout: 260 seconds)
[14:53:37] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[14:54:13] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 240 seconds)
[14:54:24] *** Joins: bluedust (~bluedust@61.3.70.137)
[14:56:20] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[14:57:02] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[14:59:03] *** Quits: ys (~ys@user/ys) (Remote host closed the connection)
[15:00:31] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[15:01:42] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[15:08:37] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 240 seconds)
[15:09:51] *** Joins: ys (~ys@user/ys)
[15:11:15] *** Joins: yoonkn (~user@175.197.208.79)
[15:13:25] *** Joins: fef (~thedawn@user/thedawn)
[15:17:17] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Read error: Connection reset by peer)
[15:17:36] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[15:18:03] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[15:20:16] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[15:21:26] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[15:22:13] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 240 seconds)
[15:23:39] *** Quits: bluedust (~bluedust@61.3.70.137) (Remote host closed the connection)
[15:24:39] *** Quits: siXy (~jfindley@centos/ops/sixy) (Ping timeout: 256 seconds)
[15:25:12] *** Quits: ys (~ys@user/ys) (Remote host closed the connection)
[15:28:27] *** Joins: bluedust (~bluedust@61.3.70.137)
[15:28:48] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[15:30:42] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:33:29] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 252 seconds)
[15:34:12] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf)
[15:38:37] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf) (Ping timeout: 240 seconds)
[15:42:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[15:43:49] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 240 seconds)
[15:44:04] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[15:44:46] *** Joins: fikran (~fikran@user/fikran)
[15:46:51] *** Joins: ys (~ys@user/ys)
[15:47:16] *** Joins: siXy (~jfindley@centos/ops/sixy)
[15:48:31] *** Quits: ys (~ys@user/ys) (Remote host closed the connection)
[15:52:59] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[15:54:42] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[15:57:31] *** aLeSD_ is now known as aLeSD
[15:58:54] *** Joins: shtirlic (~shtirlic@178.70.131.230)
[16:00:40] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[16:02:13] *** Quits: shtirlic_ (~shtirlic@178.70.131.230) (Ping timeout: 240 seconds)
[16:02:53] *** Joins: califax- (~califax@user/califx)
[16:04:06] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[16:04:07] *** califax- is now known as califax
[16:05:42] *** Joins: shtirlic_ (~shtirlic@167.71.15.181)
[16:08:51] *** Quits: shtirlic (~shtirlic@178.70.131.230) (Ping timeout: 256 seconds)
[16:12:00] *** Quits: mikoto-chan (~mikoto-ch@91-157-120-246.elisa-laajakaista.fi) (Quit: mikoto-chan)
[16:29:06] *** Quits: jasonwucj (uid13975@id-13975.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:29:45] *** chilvers1 is now known as chilversc
[16:48:12] *** Joins: Everything (~Everythin@37.115.210.35)
[16:51:49] *** Joins: Ergo^ (~ergo@91.238.59.144)
[16:54:49] *** Joins: beholders_eye (~weechat@2804:1b3:70c3:780f:2dd0:e9d9:61c8:7724)
[16:59:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:00:39] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:08:05] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744)
[17:12:17] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5135:fc39:ccab:a744) (Ping timeout: 240 seconds)
[17:13:27] *** Quits: beholders_eye (~weechat@2804:1b3:70c3:780f:2dd0:e9d9:61c8:7724) (Quit: WeeChat 3.3)
[17:15:27] *** Joins: beholders_eye (~weechat@2804:1b3:70c3:780f:2dd0:e9d9:61c8:7724)
[17:20:48] *** Quits: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea) (Quit: KonaArctic)
[17:23:04] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf)
[17:28:23] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf) (Ping timeout: 268 seconds)
[17:37:15] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[17:37:36] *** Joins: ys (~ys@user/ys)
[17:37:44] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[17:43:37] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:51:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[17:54:07] *** Joins: fikran (~fikran@user/fikran)
[17:54:27] *** Quits: eyJhb (~eyJhb@user/eyjhb) (Quit: Clever message)
[17:55:53] *** Joins: eyJhb (~eyJhb@user/eyjhb)
[18:04:33] *** Joins: menace (~someone@ppp-93-104-175-249.dynamic.mnet-online.de)
[18:04:53] *** Quits: menace (~someone@ppp-93-104-175-249.dynamic.mnet-online.de) (Changing host)
[18:04:53] *** Joins: menace (~someone@user/menace)
[18:04:57] *** menace is now known as Deknos
[18:07:38] *** Quits: bkircher (~bkircher@2001:a61:24d4:b401:80d5:941a:8e6d:689) (Quit: Leaving)
[18:10:11] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[18:12:25] *** Joins: boof (~rickybob@gateway/vpn/pia/rickybob)
[18:13:32] *** Joins: mrig_ (~mrig@lfbn-mar-1-947-62.w90-73.abo.wanadoo.fr)
[18:14:33] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com)
[18:16:36] *** Joins: xse (~xse@user/xse)
[18:16:57] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 240 seconds)
[18:19:11] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[18:21:25] *** Joins: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr)
[18:23:00] *** Quits: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr) (Client Quit)
[18:23:26] *** Joins: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr)
[18:23:31] *** Quits: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr) (Client Quit)
[18:25:00] *** Quits: Tach (~Tach@user/tach) (Ping timeout: 256 seconds)
[18:27:30] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[18:27:46] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[18:29:46] *** Joins: Tach (~Tach@user/tach)
[18:30:03] *** Quits: Tach (~Tach@user/tach) (Client Quit)
[18:30:37] *** Quits: adip (~adip@user-188-33-250-10.play-internet.pl) (Ping timeout: 240 seconds)
[18:30:45] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[18:32:05] *** Joins: souvik_ (~souvik@80.179.69.245.cable.012.net.il)
[18:34:38] *** Quits: souvik (~souvik@80.179.69.245.cable.012.net.il) (Ping timeout: 256 seconds)
[18:34:44] <A_Dragon> ! https://github.com/golang/tools/commit/eb0714863624ce772f7391ed34b4e734b29c5041 :D it was merged!
[18:35:44] *** Joins: roshanavand (~roshanava@185.213.155.232)
[18:35:46] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[18:43:37] *** Quits: bluedust (~bluedust@61.3.70.137) (Remote host closed the connection)
[18:44:29] *** Quits: mrig_ (~mrig@lfbn-mar-1-947-62.w90-73.abo.wanadoo.fr) (Changing host)
[18:44:29] *** Joins: mrig_ (~mrig@user/mrig)
[18:44:29] *** mrig_ is now known as mrig
[18:47:04] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[18:47:23] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[18:51:25] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 240 seconds)
[18:51:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[18:52:08] *** Joins: Snyp (~Snyp@49.207.207.174)
[18:52:09] *** Quits: aLeSD (~aLeSD@93-34-146-120.ip50.fastwebnet.it) (Quit: Leaving)
[18:55:05] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[19:00:20] *** Quits: ys (~ys@user/ys) (Remote host closed the connection)
[19:01:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:03:06] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[19:03:24] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:04:36] *** Joins: Tach (~Tach@user/tach)
[19:07:17] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 240 seconds)
[19:09:52] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:2d06:fff0:d105:7c1)
[19:11:30] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf)
[19:15:49] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf) (Ping timeout: 240 seconds)
[19:17:07] *** Joins: arcatech (~arcatech@user/arcatech)
[19:20:49] *** Joins: moog (~moog@107.126.53.135)
[19:25:18] *** Joins: anessen97 (~Anessen97@host-79-41-170-37.retail.telecomitalia.it)
[19:28:08] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[19:29:26] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[19:32:52] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[19:34:39] *** Joins: ckopn (~evg@70.8.3.93.rev.sfr.net)
[19:37:11] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[19:38:21] *** Quits: ckopn (~evg@70.8.3.93.rev.sfr.net) (Client Quit)
[19:41:55] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[19:42:30] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-227.dsl.bell.ca)
[19:46:47] *** Quits: boof (~rickybob@gateway/vpn/pia/rickybob) (Quit: boof)
[19:47:31] *** Quits: andreisamoila (~andreisam@188.27.130.50) (Quit: Leaving...)
[19:49:17] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-227.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:50:26] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[19:52:30] *** Joins: Atque (~Atque@user/atque)
[19:54:54] *** Quits: megamus_prime (~megamus_p@a89-154-196-21.cpe.netcabo.pt) (Read error: Connection reset by peer)
[19:58:57] *** Joins: megamus_prime (~megamus_p@a89-154-196-21.cpe.netcabo.pt)
[19:59:49] *** Quits: victori (~victori@cpe-76-174-179-126.socal.res.rr.com) (Ping timeout: 240 seconds)
[20:01:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[20:03:02] *** Joins: edrocks (~Ed@user/edrocks)
[20:03:03] *** Quits: souvik_ (~souvik@80.179.69.245.cable.012.net.il) (Read error: Connection reset by peer)
[20:03:28] *** Joins: fikran (~fikran@user/fikran)
[20:04:01] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-183.dsl.bell.ca)
[20:05:01] *** Joins: souvik (~souvik@103.59.73.33)
[20:08:33] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-183.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:08:48] *** Quits: Snyp (~Snyp@49.207.207.174) (Quit: Textual IRC Client: www.textualapp.com)
[20:14:14] *** Joins: masticass (~gzc@host-85-201-222-202.dynamic.voo.be)
[20:14:22] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[20:16:45] *** Quits: masticass (~gzc@host-85-201-222-202.dynamic.voo.be) (Client Quit)
[20:17:06] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Quit: brb)
[20:22:43] *** Quits: trafficjam (~qubes@118.127.126.178) (Ping timeout: 256 seconds)
[20:24:38] *** Joins: tomeaton17 (~tomeaton1@2a02:c7f:16cc:cf00:ec3e:3cbe:3c69:d259)
[20:24:56] <tomeaton17> Hi, does anyone know how I can pass args when running go file in delve?
[20:25:43] <fogobogo> os.Args[]?
[20:25:47] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[20:26:46] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[20:30:39] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[20:33:09] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:35:30] <tomeaton17> I figured it out. You must use -- and everything after that is passed through.
[20:37:43] *** Joins: fling (~fling@user/fling)
[20:38:58] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[20:39:23] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[20:40:49] <dr0n> hello all, what is the use case for the init() function, I understand what its doing, but why that would be used?
[20:41:03] <dr0n> e.g what is the used case
[20:41:48] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[20:45:48] <fogobogo> what init function?
[20:46:32] <fogobogo> ah nvm
[20:46:35] <fogobogo> "The init functions are extremely useful due to the fact that they are executed immediately before any other functions from the package and they maintain the order of declaration and execute in the same order. This helps create programs that maintain a steady flow of execution."
[20:46:40] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 256 seconds)
[20:47:14] <fogobogo> i guess the idea is you set up or probe your environment before anything serious goes off
[20:47:32] <siXy> dr0n: when writing libraries, you can use init() to set up things required for your library to function. In practice, you should do this sparingly.
[20:48:01] *** Joins: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[20:48:29] <fogobogo> never used it. then again, not the biggest go guy
[20:49:49] *** Quits: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Quit: Ping timeout (120 seconds))
[20:49:58] * tar_xvf is the biggest go guy, but still never used init
[20:50:10] *** Joins: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[20:50:38] *** Quits: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 256 seconds)
[20:51:19] *** Joins: innsmouthrain (~lovev@178.132.75.214)
[20:51:55] <siXy> tomeaton17: That's not a go thing, that's a bash thing. -- means that bash should stop interpreting following things as arguments to the binary it's running, and instead just pass them as stdin. cat --help prints help text, cat -- --help tries to open a file named `help`
[20:52:18] <siXy> er named `--help` sorry
[20:53:41] *** Joins: bluedust (~bluedust@61.3.70.137)
[20:55:39] <siXy> A good example of when you might legitimately use init() functions is here: https://github.com/go-sql-driver/mysql/blob/bcc459a906419e2890a50fc2c99ea6dd927a88f2/driver.go#L83 -- here init is used to tell the database/sql package that there is a driver for mysql available, which needs to be done before the DB is used for anything.
[20:56:33] <fogobogo> thats how you delete all your files if you forget about it. want to get of some hidden files and rm -rf .* instead of rm -rf -- .* and you better bring the coffee maker online
[20:57:00] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[20:57:08] <siXy> It should be used sparingly because you don't know what other packages your users may import, and reasoning about the order in which things happen in init() is hard. So you should only use it when you really need to - most of the time having a NewFoo() function is a better idea.
[20:58:37] *** Quits: innsmouthrain (~lovev@178.132.75.214) (Ping timeout: 240 seconds)
[21:02:11] <seebs> siXy: that's not "arguments" and "stdin", and it's not a bash thing. it's a POSIX spec thing that "--" marks the end of special options, and that things after it should be treated as non-option arguments. but argument parsing is always command-specific anyway. bash has no idea about that; it just splits things into words and handles globs.
[21:02:49] <seebs> and this creates an idiom sometimes that things like a debugger might do "[debugger options] program -- [program options]"
[21:03:14] <dr0n> siXy Thank you. It makes  a bit more sense
[21:04:23] <siXy> seebs: *sigh*. https://xkcd.com/1318/
[21:04:25] <fogobogo> ah, speaking of which. supposedly one can use gdb as debugger? anyone tried yet?
[21:06:47] <seebs> the "stdin" vs "argument list" distinction seems pretty important, i think
[21:10:24] <fogobogo> i mean, sprinkling println's all over the place can get old real quick. what do you guys use for debugging?
[21:12:24] <destroycomputers> delve is the most used, i'd guess
[21:12:33] <siXy> fogobogo: You'll get much better results with delve than gdb, IME. Personally I rarely need either - printf works fine most of the time.
[21:13:05] <fogobogo> thanks, i'll check it out
[21:15:47] *** Joins: neurocyte09179 (~neurocyte@IP-045143079193.dynamic.medianet-world.de)
[21:15:48] *** Quits: neurocyte09179 (~neurocyte@IP-045143079193.dynamic.medianet-world.de) (Changing host)
[21:15:48] *** Joins: neurocyte09179 (~neurocyte@user/neurocyte)
[21:15:49] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[21:15:49] *** neurocyte09179 is now known as neurocyte0917
[21:15:59] *** Joins: whaley (~whaley@2603-6080-a301-33d1-0c5f-5454-d0c6-78ae.res6.spectrum.com)
[21:19:39] *** Joins: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com)
[21:21:30] *** Quits: megamus_prime (~megamus_p@a89-154-196-21.cpe.netcabo.pt) (Remote host closed the connection)
[21:22:52] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[21:24:23] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[21:25:12] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Ping timeout: 256 seconds)
[21:25:22] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[21:26:17] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[21:28:49] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[21:30:37] *** Quits: henry40408 (~henry4040@175.181.188.127) (Remote host closed the connection)
[21:31:08] *** Joins: henry40408 (~henry4040@175.181.188.127)
[21:32:53] *** Joins: Atque (~Atque@user/atque)
[21:33:38] <foobaz> A_Dragon: congrats on getting code into the project
[21:37:58] *** Quits: bluedust (~bluedust@61.3.70.137) (Remote host closed the connection)
[21:38:06] *** Joins: megamus_prime (~megamus_p@2001:8a0:ece9:af00:76ee:cc45:c291:c1a)
[21:40:24] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[21:42:37] *** Joins: bluedust (~bluedust@61.3.70.137)
[21:42:54] *** Quits: megamus_prime (~megamus_p@2001:8a0:ece9:af00:76ee:cc45:c291:c1a) (Remote host closed the connection)
[21:43:01] *** Quits: bluedust (~bluedust@61.3.70.137) (Remote host closed the connection)
[21:44:59] *** Joins: megamus_prime (~megamus_p@2001:8a0:ece9:af00:76ee:cc45:c291:c1a)
[21:47:54] *** Quits: megamus_prime (~megamus_p@2001:8a0:ece9:af00:76ee:cc45:c291:c1a) (Remote host closed the connection)
[21:49:17] *** Joins: megamus_prime (~megamus_p@2001:8a0:ece9:af00:76ee:cc45:c291:c1a)
[21:53:23] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[21:53:40] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf)
[21:54:03] <pyzozord> var name = value always makes name of type the same as the type of value right?
[21:55:33] <pyzozord> also is there literal for scinetific notation or some other easy way to make a very small fraction or very large int?
[21:55:45] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[21:58:29] *** Quits: SJrX (~sjr@S0106302303dfb018.vf.shawcable.net) (Ping timeout: 256 seconds)
[21:58:49] <destroycomputers> pyzozord, yeah, var name will infer the type from the rhs of assignment. and you can use e to specify exponent of a literal, for integers too, like 2e10
[21:59:06] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf) (Ping timeout: 268 seconds)
[21:59:55] <pyzozord> oh cool, is there a way to use it fo make a 0.000001 value?
[22:00:22] <pyzozord> or is there a float epsilon constant?
[22:00:22] *** Quits: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com) (Quit: KonaArctic)
[22:00:48] <destroycomputers> pyzozord, just use negative exponent, 1e-6
[22:00:56] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[22:00:59] <pyzozord> great, thanks!
[22:01:53] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[22:01:55] <destroycomputers> pyzozord, there's also math.SmallestNonZeroFloat32/64
[22:02:43] <pyzozord> perfect!
[22:03:10] *** Joins: edrocks (~Ed@user/edrocks)
[22:03:14] *** Quits: megamus_prime (~megamus_p@2001:8a0:ece9:af00:76ee:cc45:c291:c1a) (Remote host closed the connection)
[22:04:55] *** Quits: pgloor (~petergloo@mix.cubus.space) (Quit: The Lounge - https://thelounge.chat)
[22:05:30] *** Joins: pgloor (~petergloo@mix.cubus.space)
[22:06:09] *** Joins: cobber (~protorom@213.240.182.77)
[22:06:48] *** Joins: pepee (~pepee@user/pepee)
[22:09:19] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[22:09:35] *** Joins: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea)
[22:10:24] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[22:10:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[22:12:49] *** Joins: fikran (~fikran@user/fikran)
[22:16:52] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[22:20:27] *** Joins: novns (~novns@user/novns)
[22:20:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[22:26:24] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:34:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[22:35:57] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:43:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:46:11] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-198.dsl.bell.ca)
[22:48:23] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[22:51:25] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-198.dsl.bell.ca) (Ping timeout: 240 seconds)
[22:52:25] *** Quits: jramsay (~lack@user/lack) (Quit: Signing off)
[22:55:29] *** Joins: lack (~lack@user/lack)
[22:57:54] *** Joins: ustedes (~whaley@2603-6080-a301-33d1-8c46-e0cf-9906-f8cf.res6.spectrum.com)
[22:58:14] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[22:59:34] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Quit: Leaving)
[23:00:30] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[23:00:45] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-25.dsl.bell.ca)
[23:00:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:01:14] *** Quits: ustedes (~whaley@2603-6080-a301-33d1-8c46-e0cf-9906-f8cf.res6.spectrum.com) (Client Quit)
[23:04:19] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[23:07:38] *** Quits: tomeaton17 (~tomeaton1@2a02:c7f:16cc:cf00:ec3e:3cbe:3c69:d259) (Ping timeout: 256 seconds)
[23:09:42] *** Joins: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net)
[23:11:25] *** Joins: dandaman (~Adium@c-67-176-92-29.hsd1.co.comcast.net)
[23:16:13] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[23:20:03] *** Joins: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it)
[23:20:25] <dandaman> hi all, i'm a bit frustrated… I'm interviewing at reddit for a backend role. Everything they've told me is that their coding interviews are language agnostic. Now they want to put me in for a front end interview(I'm not interested in FE roles) since most of my experience is in typescript. They have told me if I want to proceed with the backend interview I need to use Go or Python. As someone with 10 years of experience, I have no conc
[23:20:25] <dandaman> erns about being able to become proficient in Go(which I am actually interested in learning), but if i were asked to write runnable code for it in an interview setting I wouldn't do well. They told me I can come back in a few months after I've brushed up on Go.
[23:20:55] <seebs> yeah that seems annoying
[23:20:56] <dandaman> as someone with very strong typescript knowledge, how long do you guys think it'd take to be proficient enough in Go to pass a coding interview? I'm thinking leetcode style questions
[23:21:14] <seebs> depends a ton on you. i'd say try the go tour and see how you feel about it after you've tried it some?
[23:21:25] *** Joins: mrig (~mrig@user/mrig)
[23:22:07] <dandaman> seebs: i started on it a few weeks ago but in between work, interviewing, and my hobbies(need them for mental health) it's hard to find the time.
[23:22:08] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:22:13] <dandaman> what sort of time commitment is the tour
[23:23:52] <b0nn> dandaman: honestly? Learning a different language is always going to have a time cost
[23:24:36] <b0nn> If you want to be proficient enough to pass their tech interviews, then you are going to have to spend time to get used to the language that you choose to write it in
[23:24:41] <seebs> i did the tour in, like, an afternoon
[23:24:47] <dandaman> b0nn: of course, but there is a difference for me if i can spend 8 hours a day in it at my day job vs doing it after work hours as a hobby
[23:24:47] <seebs> but also i'm a C person
[23:25:03] <noord> dandaman: leetcode questions mostly can be solved under 50 lines
[23:25:28] <noord> the only thing you should cover collections
[23:25:41] <b0nn> dandaman: How long should I spend to be able to learn typescript in order to pass their technical interviews?
[23:28:02] <b0nn> personally speaking, I'd go with my strongest language, take the job they offer, then look to transition to the role I want
[23:28:03] <dandaman> b0nn: if you have a strong understanding of how arrays and hashmaps work. I'd say 10 hours to familiarize yourself with syntax, then spend 5 hours memorizing array functions and some useful hash functions in the Object class. Then taking maybe a good half day to familiarize yourself with how scope works in it. After a month of practicing a leetcode problem a day i'd say you would be able to breeze through most stuff
[23:28:22] <dandaman> b0nn: that's sort of what i'm thinking but i don't really know much about what a frontend interview looks like
[23:28:25] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[23:29:35] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[23:29:54] <b0nn> So, see you in a month then?
[23:31:48] *** Quits: lack (~lack@user/lack) (Quit: Signing off)
[23:32:44] <dandaman> b0nn: you're thinking it's the same answer for Go?
[23:33:06] *** Joins: lack (~lack@user/lack)
[23:33:40] <b0nn> Suuuuure, a Jr role is waiting for you
[23:34:02] *** Quits: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it) (Quit: Leaving)
[23:34:03] <b0nn> I mean, if you're after a Sr role though ...
[23:37:06] *** Quits: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[23:38:17] <dandaman> is Go that complex of a language to master? I thought the selling point was it's simplicity and toolkit
[23:38:29] *** Joins: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de)
[23:38:50] <b0nn> Have you ever played the game Go?
[23:38:56] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[23:39:00] <b0nn> The rules are incredibly simple
[23:39:27] <b0nn> Mastering it, though, takes more brainpower than Grandmaster level chess (seriously)
[23:40:24] *** Joins: tomeaton17 (~tomeaton1@2a02:c7f:16cc:cf00:88cd:8104:b736:335c)
[23:41:22] <b0nn> That's not to say mastering Go programming is at that level, though
[23:42:22] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf)
[23:43:30] <dandaman> b0nn: the difference here is that go and chess have a different rule set and are played completely different. I would imagine it's not an apt analogy between go and typescript. They are different languages but general principles are the same for production development and codebase architecture
[23:43:54] <dandaman> i dunno, maybe saying that go and typescript share any qualities might offend people here lol
[23:44:37] <b0nn> Well, one thing's for sure. Spending your time arguing about the difficulty of Go is teaching you... nothing
[23:45:04] <dandaman> not arguing, trying to understand. Does what i said make sense to you?
[23:45:11] <dandaman> or am i still way off?
[23:45:17] <b0nn> TIAS
[23:45:38] <dandaman> i'm still in the phase of determining if i want to make the time investment in such a short window of time
[23:46:28] <b0nn> See, your goal is to learn enough to pass a test
[23:46:47] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:35ec:d743:c18f:4fdf) (Ping timeout: 250 seconds)
[23:47:06] <b0nn> You're not really interested in the language
[23:47:14] <b0nn> You just want out of what you're doing
[23:47:22] <dandaman> right now it is. I'd like to be as proficient in Go as i am with typescript. It is one of the main reasons i'm interested in reddit
[23:48:10] <b0nn> If I come to you and say that about Typescript - am I going to be considered for a Sr role?
[23:48:13] <dandaman> ime the best way to become super proficient is to work your day job in that ecosystem or spend an equal amount of time outside of work learning it.
[23:48:24] <dandaman> i don't have the luxury of quitting my job to go for the latter
[23:48:43] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[23:48:59] <b0nn> So, weren't you saying earlier that you had no out of work time because hobbies?
[23:49:11] <dandaman> at my company, you would. I don't care if you know a language in and out. If you know computer science I'm not worried about you learning syntax on the job
[23:49:49] <dandaman> the amount of time my hobbies take up is tiny compared to my job… should i give up sleeping?
[23:49:57] <dandaman> nvm, now we're arguing
[23:50:05] <dandaman> thanks for your viewpoint
[23:50:10] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:50:18] <b0nn> You're the one claiming time constratins preventing you from learning, you tell me
[23:50:37] <MD87> What kind of answer would be useful to you, dandaman? Everyone learns in different ways, everyone has different levels of understanding and experience. Easiest way to see how long it'll take you to learn is for you to go start trying to do something.
[23:50:49] <b0nn> ^
[23:50:52] <MD87> aka TIAS :)
[23:50:53] <davidkrauser> unfortunately, it sounds like you're switching specialities (front-end to back-end). That either requires starting at a lower level (at a place that will let you learn on the job), or brushing up on your skills in your own time.
[23:51:19] <dandaman> davidkrauser: no, i'm a backend developer(nodejs)
[23:51:20] <dr0n> MD87 what is TIAS ?:)
[23:51:25] <dandaman> try it and see
[23:51:29] <davidkrauser> dandaman: I stand corrected :-)
[23:51:30] <dr0n> ah!
[23:52:41] <dandaman> MD87: mostly just looking for answers on what the big differences are in Go vs typescript so I can get an idea of the number of topics I'll need to invest time in. Eg. class architecture, are there big differences there? Is scoping funky, etc…
[23:52:53] <davidkrauser> dandaman: it sounds like your options are: try for the front-end job (which isn't your speciality, you just know the language. That could be a tricky interview), learn go on your own for the back-end interview, or look elsewhere?
[23:53:55] <davidkrauser> I joined the conversation late. Trying to understand where it's at
[23:54:14] <b0nn> he wants people to tell him its easy and will only take a few hours to master
[23:55:22] <dandaman> yep, what b0nn said, then i'll come back and blame you guys when i botch the interview because my code doesn't run
[23:55:37] * b0nn would not be surprised
[23:57:31] <dandaman> davidkrauser: yeah, that's basically where i'm at. trying to determine if I can ramp up quickly in Go to succeed for the backend interview vs doing the front end one in a language I'm good at.
[23:57:52] <dandaman> b0nn would obviously say go do the front end interview
[23:58:02] <dandaman> i doubt it's as black and white as that
[23:58:09] <davidkrauser> dandaman: honestly, I don't think we can give you a great answer. It all comes down to what they ask in the interview
[23:58:11] <dandaman> anyways, i gotta go, thanks all
[23:58:25] <davidkrauser> Learning basic syntax isn't bad at all, but the idioms/tooling/corner-cases/libraries/etc. is non-trivial
[23:58:52] <b0nn> wait, I already said to do the front end interview and then try and transition, now he's predicting it??
[23:59:18] <b0nn> Is this tenet?
[23:59:34] <davidkrauser> my advice is to not take a job that you don't want. That's just going to make everyone unhappy. Wait until you find something that fits what you want
