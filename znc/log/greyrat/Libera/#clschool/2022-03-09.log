[00:00:39] *** Joins: Oladon (~olad@98.43.81.226)
[00:02:32] *** Quits: silasfox (~sbv@p200300cec71b49000fb32acff10041ab.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[00:02:48] *** Joins: silasfox (~sbv@p548d11aa.dip0.t-ipconnect.de)
[00:03:40] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 272 seconds)
[00:09:13] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[00:13:43] *** Joins: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[00:15:42] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 272 seconds)
[00:16:55] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[00:18:52] *** Quits: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 272 seconds)
[00:21:00] *** Joins: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[00:22:00] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 250 seconds)
[00:25:21] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[00:26:20] *** Quits: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 252 seconds)
[00:31:50] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 252 seconds)
[00:32:16] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[00:34:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[00:36:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:38:36] *** Joins: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[00:39:40] <pjb> CodeBitCookie[m]: again, if you have a string with a fill-pointer, you can just do  (let ((s (make-array 6 :element-type 'character :adjustable t :fill-pointer 6 :initial-contents "Helllo"))) (replace s s :start1 3 :start2 4) (decf (fill-pointer s)) s) #| --> "Hello" |# 
[00:39:56] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 245 seconds)
[00:40:59] <pjb> CodeBitCookie[m]: even if you want to create a new string, it'd be cheaper to do: (let* ((s "Helllo") (d (make-string (1- (length s))))) (replace d s :end2 4) (replace d s :start1 4 :start2 5) d) #| --> "Hello" |# 
[00:54:32] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[00:55:45] *** Quits: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[01:02:56] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:04:48] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[01:05:44] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 272 seconds)
[01:06:39] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[01:16:42] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[01:28:03] *** Quits: random-nick (~random-ni@87.116.176.196) (Quit: quit)
[01:31:07] *** Joins: random-nick (~random-ni@87.116.167.125)
[01:31:32] *** Joins: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[01:32:57] <CodeBitCookie[m]> pjb:  I didnt quite understand that last message, I would really appreciate an explanation. Unfortunately I have to go to sleep, so can you please write out why replace has to have 2 strings and what start1 and start2 represent. Thank you~
[01:32:58] <CodeBitCookie[m]> s/~/!/
[01:35:33] *** Quits: plexi (~orcabot@digital.sanctuary.org) (Quit: Don't panic!)
[01:39:20] *** Joins: plexi (~orcabot@digital.sanctuary.org)
[01:39:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:48:01] <pjb> CodeBitCookie[m]: subseq will create new strings, concatenate too.  so 3 strings are created.  with make-string 1 string is created, and replace doesn't create new strings, it only copies the elements.  start1 end1 defines a subset in the first argument (destination string), and start2 end2 in the second argument (source string).
[01:48:05] <pjb> clhs replace
[01:48:45] <pjb> In general, replace will be very useful to build resulting sequences without consing intermediary subsequences.
[01:53:19] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[02:06:14] *** Joins: lisp123 (~lisp123@120.154.103.52)
[02:08:08] *** Joins: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[02:09:42] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 272 seconds)
[02:12:29] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 252 seconds)
[02:21:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[02:30:43] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[02:32:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[03:02:46] *** Joins: lisp123 (~lisp123@120.154.103.52)
[03:05:22] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[03:06:12] *** Quits: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[03:07:42] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[03:09:26] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[03:10:32] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[03:11:21] *** Quits: neominimum (sid537410@user/neominimum) (Ping timeout: 252 seconds)
[03:11:54] *** Quits: dbotton (sid492350@id-492350.lymington.irccloud.com) (Ping timeout: 252 seconds)
[03:12:06] *** Joins: neominimum (sid537410@user/neominimum)
[03:12:25] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[03:19:30] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:31:24] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[03:33:45] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:58:38] *** Joins: beach` (~user@2a01:cb19:150:3400:25f5:58f7:d461:f8de)
[04:03:13] *** Quits: beach (~user@2a01:cb19:150:3400:394a:6f50:a550:eb5b) (Ping timeout: 268 seconds)
[04:03:33] *** Joins: cyberban` (~user@2607:fb90:42b7:213f:db43:ae3e:7744:5cba)
[04:06:03] *** Quits: cyberbanjo (~user@2607:fb90:42b7:213f:732e:306d:a6f3:7f1) (Remote host closed the connection)
[04:09:28] *** Joins: lisp123 (~lisp123@120.154.103.52)
[04:25:57] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[04:36:11] <White_Flame> or if it's just a single element, you could build on REMOVE-IF or DELETE-IF, counting tests until you hit the element in question
[04:36:56] <White_Flame> which could set up a general interface pretty easily.  But then again, you could do the same with shoving subsequences together.  just an idea
[04:37:42] <White_Flame> oh, I just noticed _death's answer in the main channel.  that's probably the best :)
[04:43:05] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:46:04] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[04:46:05] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Read error: Connection reset by peer)
[05:20:53] *** Joins: lisp123 (~lisp123@120.154.103.52)
[05:25:58] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[05:37:37] *** Quits: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[05:38:55] *** Quits: cyberban` (~user@2607:fb90:42b7:213f:db43:ae3e:7744:5cba) (Remote host closed the connection)
[05:41:56] *** Joins: cyberbanjo (~user@2607:fb90:42b7:213f:db43:ae3e:7744:5cba)
[06:52:12] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[06:53:26] *** Quits: silasfox (~sbv@p548d11aa.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[06:55:02] *** Joins: silasfox (~sbv@p200300cec714c80015b1d3d0a473d324.dip0.t-ipconnect.de)
[07:02:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:02:42] *** Joins: lisp123 (~lisp123@120.154.103.52)
[07:20:00] *** beach` is now known as beach
[07:24:58] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[07:26:36] *** Joins: aeth (~aeth@user/aeth)
[07:31:09] <beach> Good morning everyone! 
[07:52:33] *** Joins: Oladon (~olad@98.43.81.226)
[07:57:14] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[08:04:43] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:08:02] *** Quits: santiagopim (~user@90.167.66.93) (Ping timeout: 268 seconds)
[08:19:04] *** Joins: lisp123 (~lisp123@120.154.103.52)
[08:29:41] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[08:46:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Read error: Connection reset by peer)
[08:46:18] *** Joins: lisp123 (~lisp123@120.154.103.52)
[08:59:21] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:02:47] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:08:51] <whereiseveryone> Does anyone happen to know what might be missing to make this warning/error go away in CI? 
[09:09:03] <whereiseveryone> https://penguin2.genenetwork.org/jobs/qc/5
[09:09:39] <whereiseveryone> Here's the buggy file: https://git.genenetwork.org/jgart/qc/src/branch/master/run-tests.lisp
[09:09:43] *** Joins: King_julian (~King_juli@41.1.69.35)
[09:12:09] <King_julian> Hi newb here, was reffered to irc, testing here to see if I am getting this connecting to irc right 
[09:13:15] <lisp123> Yes
[09:13:27] <King_julian> Tx again
[09:13:55] *** Quits: cyberbanjo (~user@2607:fb90:42b7:213f:db43:ae3e:7744:5cba) (Remote host closed the connection)
[09:14:14] <whereiseveryone> King_julian works ya, welcome!
[09:14:49] <King_julian> Thank you, will observe for now üôèüèΩ
[09:15:17] *** Quits: King_julian (~King_juli@41.1.69.35) (Read error: Connection reset by peer)
[09:22:19] *** Joins: Oladon (~olad@98.43.81.226)
[09:23:20] *** Joins: King_julian (~King_juli@41.1.69.35)
[09:24:02] *** Quits: King_julian (~King_juli@41.1.69.35) (Client Quit)
[09:24:26] *** Joins: King_julian (~King_juli@41.1.69.35)
[09:25:22] *** Quits: King_julian (~King_juli@41.1.69.35) (Read error: Connection reset by peer)
[09:34:58] *** Joins: King_julian (~King_juli@41.1.69.35)
[09:35:05] *** Quits: King_julian (~King_juli@41.1.69.35) (Read error: Connection reset by peer)
[09:36:40] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[09:37:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[09:38:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[09:54:12] *** Quits: silasfox (~sbv@p200300cec714c80015b1d3d0a473d324.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[09:54:29] *** Joins: silasfox (~sbv@p548d123f.dip0.t-ipconnect.de)
[10:00:53] *** Joins: pjb (~pjb@user/pjb)
[10:05:23] *** Joins: King_julian (~King_juli@41.1.69.35)
[10:09:26] *** Joins: lisp123 (~lisp123@120.154.103.52)
[10:14:02] *** Quits: Oladon (~olad@98.43.81.226) (Read error: Connection reset by peer)
[10:14:39] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[10:15:51] *** Joins: Oladon (~olad@98.43.81.226)
[10:16:09] *** Quits: King_julian (~King_juli@41.1.69.35) (Read error: Connection reset by peer)
[10:18:33] *** Joins: King_julian (~King_juli@41.1.69.35)
[10:26:16] *** Quits: King_julian (~King_juli@41.1.69.35) (Read error: Connection reset by peer)
[10:27:12] *** Joins: King_julian (~King_juli@41.1.69.35)
[10:34:48] *** Quits: King_julian (~King_juli@41.1.69.35) (Ping timeout: 256 seconds)
[11:15:30] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:16:12] *** Joins: lisp123 (~lisp123@120.154.103.52)
[11:21:50] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[11:41:13] *** Joins: shka (~herr@109.231.3.55)
[13:02:34] *** Joins: King_julian (~King_juli@41.1.71.249)
[13:28:10] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:39:31] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[13:44:58] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:49:44] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[14:10:14] *** Joins: lisp123 (~lisp123@120.154.103.52)
[14:21:42] *** Quits: King_julian (~King_juli@41.1.71.249) (Ping timeout: 260 seconds)
[14:26:23] *** Joins: King_julian (~King_juli@41.1.71.249)
[14:47:05] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[15:20:00] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:33:10] *** Joins: lisp123 (~lisp123@120.154.103.52)
[15:38:13] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[15:38:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:39:45] *** Joins: kingjulian (~kingjulia@41.1.71.249)
[16:14:54] *** Quits: kingjulian (~kingjulia@41.1.71.249) (Quit: Leaving)
[17:01:32] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 240 seconds)
[17:07:03] *** Joins: v88m (~Xiro@213.87.129.203)
[17:09:00] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[17:27:59] *** Quits: King_julian (~King_juli@41.1.71.249) (Quit: Quit)
[17:28:13] *** Joins: King_julian (~King_juli@41.1.71.249)
[17:29:23] *** Quits: King_julian (~King_juli@41.1.71.249) (Client Quit)
[17:31:02] *** Joins: King_julian (~King_juli@41.1.71.249)
[17:37:13] *** Quits: King_julian (~King_juli@41.1.71.249) (Ping timeout: 256 seconds)
[17:45:59] *** Joins: King_julian (~King_juli@41.13.18.123)
[18:09:36] *** Joins: epony (epony@user/epony)
[18:18:05] *** Quits: King_julian (~King_juli@41.13.18.123) (Read error: Connection reset by peer)
[18:18:14] *** Joins: King_julian (~King_juli@41.13.18.123)
[18:23:41] *** Joins: Bike (~Glossina@71.69.170.70)
[18:24:09] *** Quits: King_julian (~King_juli@41.13.18.123) (Quit: Quit)
[18:42:12] *** Quits: v88m (~Xiro@213.87.129.203) (Ping timeout: 240 seconds)
[19:00:34] *** Joins: King_julian (~King_juli@41.13.18.123)
[19:00:53] <King_julian> save
[19:07:39] *** Joins: Oladon (~olad@98.43.81.226)
[19:19:24] *** Quits: King_julian (~King_juli@41.13.18.123) (Quit: leaving)
[19:19:47] *** Joins: King_julian (~King_juli@41.13.18.123)
[19:20:44] *** Quits: King_julian (~King_juli@41.13.18.123) (Client Quit)
[19:27:48] *** Joins: King_julian (~King_juli@41.13.18.123)
[19:30:19] *** Joins: King_jul1an (~King_juli@41.13.18.123)
[19:36:00] <CodeBitCookie[m]> Hello Everyone!
[19:36:31] <CodeBitCookie[m]> I know beach will be very angry with me after the following messages, but I am sorry.
[19:36:41] <CodeBitCookie[m]>  * I know beach  will be very angry with me after the following messages, but I am sorry.
[19:37:12] <CodeBitCookie[m]> I want to modify the variable at an argument for a function. Lets say I have this function:
[19:37:20] <CodeBitCookie[m]> (defun nstr-concat (str &rest args)
[19:37:20] <CodeBitCookie[m]>   "A Non-Consing Destructive String Concatenation which modifies it's first argument to be the concatenation of all the string arguments including the first one."
[19:37:20] <CodeBitCookie[m]>   (setf (cons str) (apply #'str:concat str args)))
[19:37:49] <CodeBitCookie[m]> For what the function wants to be, please read the documentation string.
[19:38:58] <CodeBitCookie[m]> The thing is, this function doesn't work as expected, it returns the expected value (the concatenation of all the strings) but doesn't set STR.
[19:39:39] <Bike> what is (setf (cons str) ...) supposed to do, exactly?
[19:42:19] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:44:15] <CodeBitCookie[m]> Oh, whoops
[19:44:24] <CodeBitCookie[m]> let me edit my message
[19:44:26] <Bike> but the problem with your code is probably that functions receive values, not references or variables or something. if you do (setf str ...) that will just change the value of the local variable, and won't affect anything outside the function.
[19:44:31] <CodeBitCookie[m]>  * ```... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/7243a5b67ce5123e7f18ca74250da379b619953d)
[19:44:46] <CodeBitCookie[m]> Bike: So, I should use a macro?
[19:45:25] <Bike> well, probably you shouldn't do this. could you explain a bit of the context of why you want this operation? there might be a better way to go about it.
[19:46:36] <CodeBitCookie[m]> Well, I am just tired of typing:
[19:46:46] <Bike> operations like NCONC, which you seem to be mimicking the name of, are still functions. they work by actually modifying the _object_, not some variable. an analogous operation for strings would do that too.
[19:48:27] * CodeBitCookie[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/245668c22b553ba4909848d46a6b6c8822c3550b
[19:48:53] <CodeBitCookie[m]> notice how I had to type `(get-line-characters *editor*)` twice? 
[19:49:08] <CodeBitCookie[m]> What I started doing was, having a `let`
[19:50:06] <Bike> if get-line-characters returns an adjustable string, you could just mutate it, kind of like nconc does
[19:50:16] <Bike> if it doesn't, then yeah, i guess you could define a modify macro
[19:50:16] * CodeBitCookie[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/e372bfcb1f3861f1c031526650b10a8fb2498cc9
[19:50:32] <Bike> that didn't do what you expected, eh?
[19:50:57] <Bike> because once you bind the variable, any association with get-line-characters is gone, and the setf will just be of the variable and not the line characters.
[19:52:40] <CodeBitCookie[m]> Bike:  Oh, I think you misunderstood, The two code snippets above were not inside any function, instead I was just having to type out code like that wherever I had to. I got tired and then tried to make a function to do it for me. This was in response to one of your messages asking me what I wanted to achieve, since there could be better ways to get around it.
[19:52:50] <CodeBitCookie[m]> Bike: Although, since I am kind of new to lisp, can you check If I made the modify macro right?
[19:53:04] <Bike> i can check.
[19:53:05] <CodeBitCookie[m]> I will post the macro in a jiffy.
[19:55:15] <beach> Why would I be angry?
[19:57:03] <CodeBitCookie[m]> I have to go the market, come back in 10 mins
[19:57:09] <CodeBitCookie[m]> beach: will explain
[19:58:07] <pjb> CodeBitCookie[m]: you can do that only if the first string argument is actually mutable and adjustable (and better with a fill-pointer too).
[19:58:38] <pjb> CodeBitCookie[m]: note: adjusting a string is consing.
[19:58:55] <pjb> CodeBitCookie[m]: the only way to make it non-consing, is to pre-allocate the string and have a fill-pointer.
[20:04:58] <pjb> CodeBitCookie[m]: https://termbin.com/f1xb
[20:13:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[20:17:08] *** Quits: King_jul1an (~King_juli@41.13.18.123) (Ping timeout: 272 seconds)
[20:17:57] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[20:20:47] <CodeBitCookie[m]> I am back
[20:21:33] <edgar-rft> I'm still here :-)
[20:22:47] <CodeBitCookie[m]> <pjb> "CodeBitCookie: https://termbin...." <- Oh thanks so much, with a break from the market, I now understand that we have to return a new string. Although we can still `setf` the symbol that referred to it.
[20:23:52] <pjb> CodeBitCookie[m]: we don't have to. You can use (dolist (string args (values) ‚Ä¶ instead.
[20:24:13] <pjb> CodeBitCookie[m]: it's just that it's convenient to return the first argument of a function, when it's mutated.
[20:25:55] <CodeBitCookie[m]> <beach> "Why would I be angry?" <- beach: Well, it's good you didn't, but the last time I asked a question about variables and pointers you were, which is totally valid since I already asked that 2 times before and still couldn't understand the concept.
[20:26:25] <beach> Hmm, OK.
[20:27:16] *** Quits: King_julian (~King_juli@41.13.18.123) (Ping timeout: 272 seconds)
[20:27:28] <CodeBitCookie[m]> beach: Is that like an upset OK or a understandable okay. I think the former becuase of the capitalization of the K.
[20:27:33] <CodeBitCookie[m]> s/becuase/because/
[20:27:38] <CodeBitCookie[m]> s/./?/, s/becuase/because/
[20:27:59] <CodeBitCookie[m]> pjb: pjb: I don't get it.
[20:28:12] <beach> CodeBitCookie[m]: I don't recall being angry, but I take your word for it.
[20:28:13] <CodeBitCookie[m]> what will that do?
[20:28:25] <pjb> CodeBitCookie[m]: look at the example: the result is not used.
[20:28:45] <pjb> (nstr-concat foo a b c)  (do-something-with foo)
[20:28:53] <pjb> vs. (do-something-with (nstr-concat foo a b c))
[20:29:41] *** Joins: King_julian (~King_juli@41.1.92.54)
[20:30:14] <CodeBitCookie[m]> pjb: So, should I use a modify macro since I have normal, non-mutable strings?
[20:30:32] <pjb> Yes.
[20:30:42] <CodeBitCookie[m]> beach: Well, Thanks you.
[20:30:53] <pjb> A modify macro will let you modify a place, without mutating an object!
[20:31:10] <CodeBitCookie[m]> pjb: Also, thanks a lot for just sending out the code to do it for mutable strings!
[20:33:30] <CodeBitCookie[m]> pjb: Oh, that actually makes things a lot clearer.
[20:33:38] <CodeBitCookie[m]> s/Thanks/Thank/
[20:36:01] <pjb> well, defsetf won't help here, if the original binding to the place is not an adjustable string or a string with a fill-pointer.
[20:36:12] *** Quits: King_julian (~King_juli@41.1.92.54) (Ping timeout: 250 seconds)
[20:36:22] <pjb> defsetf calls a mutating function, it doesn't rebind the place.
[20:38:45] *** Joins: King_julian (~King_juli@41.1.92.54)
[20:42:57] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[20:42:58] <CodeBitCookie[m]> Bike: pjb So, sorry to bother again, but I think it works now. Here is my modify macro:
[20:43:02] <CodeBitCookie[m]> (defmacro nstr-concat (str &rest args)
[20:43:02] <CodeBitCookie[m]>   "A Non-Consing Destructive String Concatenation which modifies it's first argument to be the concatenation of all the string arguments including the first one."
[20:43:02] <CodeBitCookie[m]>   `(setf ,str (concatenate 'string ,str ,@args)))
[20:43:36] *** Joins: jealousmonk (~user@user/jealousmonk)
[20:44:12] <CodeBitCookie[m]> You guys and beach, don't find any problems with this right?
[20:47:07] <beach> I haven't followed the details, but I don't see how anything like that could be non-consing.  And the first argument is a place if it is a macro, yes?
[20:49:43] <edgar-rft> maybe it's non-consing because strings aren't made from cons
[21:13:21] <pjb> CodeBitCookie[m]: there are a lot of problems with your macro.
[21:14:32] <pjb> (let ((ss (vector "a" "b" "c")) (i 0))   (nstr-concat (aref ss (incf i)) "hello, " "world!") (list ss i)) #| --> (#("a" "chello, world!" "c") 2) |# 
[21:15:42] <pjb> CodeBitCookie[m]: the results are completely inconsistent.  instead of concatenating (aref ss 1), it concatenates (aref ss 2) !!!
[21:15:50] <pjb> But it still sets (aref ss 1).
[21:16:06] <pjb> and instead of leaving i=1, it leaves i=2.
[21:16:14] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:18:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:21:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[21:23:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:30:00] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:53] *** Joins: ns12 (~ns12@user/ns12)
[21:34:05] *** Quits: silasfox (~sbv@p548d123f.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[21:36:05] *** Joins: silasfox (~sbv@p200300cec714c80015b1d3d0a473d324.dip0.t-ipconnect.de)
[21:39:17] *** Quits: King_julian (~King_juli@41.1.92.54) (Ping timeout: 240 seconds)
[21:41:56] *** Joins: King_julian (~King_juli@41.1.92.54)
[22:01:10] <Bike> CodeBitCookie[m]: this definitely conses. also, modify macros are complicated by places with side effects. for example if you did (nstr-concat (get-line (incf i)) ...), the incf would evaluate twice.
[22:07:17] <CodeBitCookie[m]> I see. So, how can I make it better?
[22:08:15] <CodeBitCookie[m]> I just wrote non-consing since I thought that it was the technical term for destructive or something.
[22:08:18] <CodeBitCookie[m]> My bad.
[22:08:35] <CodeBitCookie[m]> I still have to refer to pjb's issue, which is the inconsistancy.
[22:08:55] <CodeBitCookie[m]> Also, I still don't know what non-consing actually means and don't really understand when I search it up.
[22:09:17] <Bike> "consing" means constructing new objects, which generally entails heap memory allocation
[22:09:38] <Bike> which can be inefficient
[22:10:01] <Bike> cl:concatenate will construct a new object, so it is consing, and therefore nstr-concat is as well
[22:37:36] <CodeBitCookie[m]> Ohhhhhh
[22:37:44] <CodeBitCookie[m]> Thanks a lot Bike!
[22:38:23] <CodeBitCookie[m]> So I can't make it non-consing until the string is mutable. Otherwise I am left with no choice but to create another, which means to cons.
[22:38:45] <CodeBitCookie[m]> I still don't know how to deal with the other problems though.
[22:39:21] <CodeBitCookie[m]> <beach> "I haven't followed the details..." <- beach: Yes.
[22:39:23] <Bike> CodeBitCookie[m]: here is how i would write the macro https://gist.github.com/Bike/0e5db3b75efe8c290c48220f79837154
[22:39:57] <Bike> this takes care of the multiple evaluation issue, but still conses
[22:40:07] <pjb> CodeBitCookie[m]: one way is to use a function instead of a macro. (defun (setf nstr-concat) ‚Ä¶)  Another way  is to use define-setf-expander.
[22:41:10] <pjb> or rather get-setf-expansion as Bike demonstrated.
[22:50:54] <CodeBitCookie[m]> Yeah, I am kind of lost.
[22:51:09] <CodeBitCookie[m]> I don't understand `get-setf-expansion`.
[22:51:39] <Bike> yep, it's definitely a lot more complex!
[22:52:14] <CodeBitCookie[m]> Nor do I understand how (setf nstr-concat) would work out of the context of a method.
[22:52:45] <Bike> oh, i called it concatf instead of nstr-concat
[22:52:53] <CodeBitCookie[m]> So, can you give me pointers to any resources which would explain to me?
[22:53:06] <CodeBitCookie[m]> Bike: Yeah, about that, what is the `f` for?
[22:53:16] <Bike> you would do (concatf (get-line-characters *editor*) x y z) for example
[22:53:35] <Bike> dunno what it means. it's conventional. analogous to setf, incf, decf
[22:53:51] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[22:54:15] <Bike> hm, don't think PCL explains setf expansions...
[22:55:04] <CodeBitCookie[m]> Bike: Yeah, and, I was mentioning pjb's comment 
[22:55:20] <CodeBitCookie[m]> Bike: How did you learn it?
[22:55:25] <Bike> clhs 5.1.1
[22:55:30] <Bike> no link, huh
[22:55:33] <Bike> http://www.lispworks.com/documentation/lw50/CLHS/Body/05_aa.htm
[22:55:40] <Bike> i forget how i learned it
[22:56:22] <Bike> basically, the setf expansion system is in place to let you customize how setf works while keeping in mind the multiple evaluation issue
[22:56:36] <Bike> a "setf expansion" describes how to read and write from a place
[22:56:48] <Bike> the details are explained in this section
[22:58:38] <CodeBitCookie[m]> Oooh, nice. I am reading it now.
[22:58:40] <CodeBitCookie[m]> Pretty interesting.
[23:00:44] <Bike> you can also see what you get from things like (get-setf-expansion '(nth (incf i) list)) to orient yourself
[23:03:48] *** Quits: silasfox (~sbv@p200300cec714c80015b1d3d0a473d324.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[23:04:06] *** Joins: silasfox (~sbv@p200300cec714c80015b1d3d0a473d324.dip0.t-ipconnect.de)
[23:09:59] <pjb> clhs define-setf-expander
[23:10:32] <pjb> CodeBitCookie[m]: the clhs of define-setf-expander and get-setf-expansion should give you all the information you need.
[23:10:36] <CodeBitCookie[m]> Yeah. I am trying very hard to understand this concept.
[23:10:47] <pjb> CodeBitCookie[m]: the problem is that you want to evaluate the subforms of the place expression only once.
[23:10:48] <CodeBitCookie[m]> Okay.
[23:11:01] <CodeBitCookie[m]> Oh right!
[23:11:03] <pjb> (and left-to-right).
[23:11:06] <CodeBitCookie[m]>  * Oh, right!
[23:11:14] <CodeBitCookie[m]> what?
[23:11:24] <CodeBitCookie[m]> isn't that already the case?
[23:11:43] <CodeBitCookie[m]> Also, I am new to the concept of an ENVIRONMENT.
[23:11:47] <pjb> when you write a simple macro, if you duplicate the place form, you get multiple evaluation.
[23:12:05] <pjb> Also, you may use the place form in a different order, compared to the other arguments. 
[23:12:16] <CodeBitCookie[m]> even more complicated is the `&environment` in a defun!
[23:12:41] <pjb> (let ((v (vector 0 0 0)) (i 0)) (setf (aref v (incf i)) (incf i)) (list v i)) #| --> (#(0 2 0) 2) |# 
[23:12:45] <CodeBitCookie[m]> pjb: So, in my case, it was `,str` writen twice?
[23:12:49] <pjb> CodeBitCookie[m]: yes.
[23:13:08] <CodeBitCookie[m]> pjb: What do you mean, and why would I do that?
[23:13:20] <pjb> get-setf-expansion let you split str into the inner forms, and a getter and setter pair.
[23:14:23] <CodeBitCookie[m]> Ohhhh, so the two subforms(?) the accessor and the value to set to it, are the getter and setter pair?
[23:14:31] <CodeBitCookie[m]> s/are/is/
[23:14:59] <CodeBitCookie[m]> pjb: So, how does this code snippet relate to anything?
[23:16:00] <pjb> (let ((v (vector 0 0 0)) (i 0)) (setf (aref v (incf i)) (incf i)) (list v i)) shows you that (aref v 1) is used to read, (%set-array v 1 new-value) is used to write, and the value to write is 2.
[23:16:10] <pjb> So this implies the order of evaluation of all the subforms.
[23:16:47] <pjb> d = (incf i), n = (incf i), (%set-array v d n)
[23:17:16] <pjb> With the getter: (let ((v (vector 10 20 30)) (i 0)) (incf (aref v (incf i)) (incf i)) (list v i)) #| --> (#(10 22 30) 2) |# 
[23:17:34] <pjb> If you implement your own incf, it should behave the same.
[23:21:34] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[23:21:41] <CodeBitCookie[m]> pjb: I took a good few minutes re-reading this and understanding it. Just wanted to ask, what do you mean by "with the getter: "
[23:21:42] <CodeBitCookie[m]> * getter: "?
[23:22:12] <CodeBitCookie[m]>  * pjb: I took a good few minutes re-reading this and understanding it. Just wanted to ask what do you meant by "with the getter: "?
[23:23:21] <pjb> setf only uses the setter. It doesn't read the place.
[23:23:39] <pjb> incf uses both. It reads the place, increments it, and writes back the place.
[23:25:09] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[23:26:41] *** Joins: aeth (~aeth@user/aeth)
[23:30:55] *** Quits: plexi (~orcabot@digital.sanctuary.org) (Quit: Don't panic!)
[23:31:57] *** Joins: Oladon (~olad@98.43.81.226)
[23:33:25] *** Joins: plexi (~orcabot@digital.sanctuary.org)
[23:34:44] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[23:36:39] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:47:17] *** Quits: silasfox (~sbv@p200300cec714c80015b1d3d0a473d324.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[23:47:34] *** Joins: silasfox (~sbv@p548d123f.dip0.t-ipconnect.de)
[23:49:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
