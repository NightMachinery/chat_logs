[00:32:35] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[01:20:38] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:80ee:faa6:7302:e610) (Ping timeout: 260 seconds)
[01:28:11] * hayley reads "How much would you pay for a FOSS book writing program?"
[01:28:44] <hayley> I mean, you can pay for free software, it fits the definition and all, but who the fuck does?
[01:29:16] <hayley> And there's ole LaTeX +  AUCTeX for the low price of free.
[01:43:37] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[01:50:18] <gilberth> What is a "book writing" program, anyway? And is it about a FOSS book, or about a FOSS program?
[01:50:55] <selwyn> isnt it book writing month
[01:51:22] <gilberth> December is the book writing month?
[01:51:37] <selwyn> https://nanowrimo.org/about-nano
[01:51:38] -ixelp- NaNoWriMo
[01:51:41] <selwyn> its november
[01:52:02] <hayley> gilberth: A program you use to write books.
[01:52:09] <selwyn> emacs.exe
[01:52:38] <hayley> Given they want to use Markdown too, seems very likely that LaTeX would stink less.
[01:52:48] <hayley> selwyn: AUCTeX is a set of things for Emacs, yes.
[01:53:04] <selwyn> dumb question: why markdown when you can just use a subset of org mode
[01:53:18] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Ping timeout: 260 seconds)
[01:53:43] <gilberth> For novels, do you really need any markup?
[01:58:12] <hayley> https://arxiv.org/abs/2112.06498
[01:58:21] <hayley> "Proof of Steak"
[01:58:27] <hayley> gilberth: \chapter{}
[01:58:31] <gilberth> hayley: BTW cache does matter. I was playing with a simple copying collector. I benchmarked FIB with a fully consing interpreter (no BC, no fixnums, no envs on the stack). When I don't do any GC and just bump allocate from a like 4M nodes heap, this is 30% slower than GC with a 64k nodes heap. Not that this would be news of any kind.
[01:58:51] <hayley> Indeed.
[01:58:53] <gilberth> hayley: Scary! A \chapter{}.
[01:59:41] <hayley> I know the ole GC Handbook was TeXed, and it has complicated things like figures, a hierarchical index (with a poorly thought out hierarchy IMO), and a bibliography.
[01:59:52] <gilberth> Still 200x faster than the thing in Rust.
[02:00:50] <hayley> https://shipilev.net/jvm/anatomy-quarks/11-moving-gc-locality/
[02:01:51] <gilberth> I was thinking. Should a plain mark and sweep be a good for a nursery?
[02:02:28] <hayley> I guess the Boehm GC does plain mark and sweep, even in generational mode.
[02:02:34] <gilberth> shouldn't, rather. I am running low on single quotes. Have you seen moon-child?
[02:02:54] <gilberth> hayley: Boehm cannot move anyway.
[02:04:11] <gilberth> I believe Go uses mark and sweep, too. But I was thinking about the cache sized nursery.
[02:05:37] <hayley> I've heard cache size is sometimes irrelevant for a nursery size.
[02:06:15] <gilberth> Hmm, wasn't this the idea of a nursery?
[02:06:42] <hayley> e.g. http://users.cecs.anu.edu.au/~steveb/pubs/papers/mmtk-sigmetrics-2004.pdf p.10 the minima is nowhere near 512kB of L2.
[02:07:08] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[02:08:03] <hayley> But then IIRC beach and some Haskell hackers found cache sizing to be better, but they use thread-local heapsm and thus the effects of fitting in cache would not be diminished by cache ping pong.
[02:09:14] <gilberth> Are we talking about L1 or L2 cache?
[02:09:39] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:6175:921c:ea3:862)
[02:10:02] <hayley> L2.
[02:10:35] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[02:10:39] * hayley was thinking the name of the paper was "Mythbusting garbage collection" or something, and finds slides from a presentation by one rich asshole named Larry Ellison.
[02:10:57] <hayley> "Myth 6: I can get a GC that delivers very high throughput and very low latency." Fight me.
[02:11:58] <gilberth> Well, L2 caches are relatively large already to begin with.
[02:13:02] * hayley only has 256kB of L2 on her laptop.
[02:13:26] <gilberth> That is "relatively large".
[02:13:27] *** Joins: zacts (~zacts@user/zacts)
[02:14:03] <hayley> 512kB on the desktop too. Hasn't grown since 2004?
[02:15:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:1e71:dc8c:d2fa:3d7e)
[02:16:18] <gilberth> Yep, my laptop too only has 256KB L2 cache. My server has 256KB per core.
[02:17:32] <gilberth> But both are old machines.
[02:18:24] <hayley> The newest "version" of my desktop processor still has 512k/core. 
[02:18:32] <kakuhen> yeah i have 256 kb / core of l2 cache on my machine it seems
[02:20:06] <mfiano> Really? L2 is usually not per core
[02:20:33] <hayley> Can't reproduce that here.
[02:20:42] <hayley> L3 is shared though.
[02:21:19] <gilberth> My server says so and after a closer look my "About This Mac" at my laptops says so, too.
[02:22:08] <gilberth> Even the poor i5 of my MacMini mentions 256KB per core.
[02:22:09] <moon-child> mfiano: I think L2 is usually shared between blocks of cores
[02:22:40] <moon-child> so it does make sense to refer to the amount of L2 available per core, as distinct from the overall quantity of L2 (though you should also mention how many cores there are to a block)
[02:22:44] <mfiano> sure it's i+d. L1 is usually split into i/d and per-core though
[02:23:09] <moon-child> https://images.anandtech.com/doci/16214/CC3950X.png  this beautiful graph
[02:23:51] <mfiano> looks like I had 32K/32K L1, 512K L2, and 64M L3
[02:23:57] <mfiano> s/had/have/
[02:25:14] <gilberth> moon-child: Ouch. I had no idea that this is that slow.
[02:52:31] *** Joins: vms14 (~user@149.red-79-153-96.dynamicip.rima-tde.net)
[02:52:35] <vms14> hi
[02:52:46] <vms14> I try to implement lisp in perl
[02:52:48] <vms14> xd
[02:53:10] <vms14> I'm making a transpiler instead of an interpreter
[02:53:36] <vms14> this is the most minimal stuff I have
[02:53:51] <vms14> http://www.thecatisonthetable.tk/r
[02:53:52] <vms14>  
[02:54:47] <vms14> special macro is just a dirty way to get a macro with args evaled as if it were a function
[02:55:20] <vms14> being a transpiler has the nice side effect of letting a macro return a string and it will be raw perl code
[02:55:36] <vms14> but idk how much macros are broken in this implementation
[02:59:40] <vms14> I have a "parser" which is a bunch of regex that translate (s t u f f) into [s,t,u,f,f]
[02:59:53] <vms14> well actually ['s',...]
[03:00:41] <vms14> but it's just like 4 regex and does not much to do with the language itself except for the reader macros
[03:00:52] * hayley uploaded an image: (135KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/cMipfdccmMkmaWUoqseSosuH/abelson-what-the-fuck.png >
[03:01:15] <vms14> for example the ' quote sugar syntax would crash there
[03:01:24] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[03:03:30] <pjb> vms14: a parser??? (intern (format nil "[~{~A~^,~}]" '(s t u f f))) #| --> |[s,t,u,f,f]| ; nil |# 
[03:03:44] <moon-child> vms14: s[t;u;f;f] pls
[03:07:13] <hayley> https://www.youtube.com/watch?v=LqZCwY69XLA
[03:07:13] -ixelp- Only Good For Conversation - YouTube
[03:08:48] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[03:09:30] <vms14> pjb: a "parser"
[03:10:28] <vms14> http://www.thecatisonthetable.tk/s
[03:10:33] <vms14> this is the parser
[03:10:34] <vms14> XD
[03:11:03] <vms14> and the reason the ' would crash
[03:13:16] *** Joins: notzmv (~zmv@user/notzmv)
[03:14:03] <moon-child> gilberth: hmm, does this make you happier? https://images.anandtech.com/doci/16214/CC5950X.png
[03:15:06] <hayley> Is chiplet->chiplet L3 any faster than primary memory?
[03:15:24] <hayley> At least 80ns is ballpark around primary memory latency IIRC 
[03:17:29] <moon-child> hayley: I guess the 80ns number is with contention, so you have to wait for your pipeline
[03:20:20] <vms14> do you know perl enough to test if macros are right?
[03:20:28] <hayley> https://www.youtube.com/watch?v=JAT1m_Wu_Po
[03:20:29] -ixelp- Youtube Poop Anthony Sullivan Tortures Lobsters - YouTube
[03:30:03] *** Quits: djuber (~user@65.79.128.64) (*.net *.split)
[03:30:03] *** Quits: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com) (*.net *.split)
[03:30:03] *** Quits: pjb (~pjb@user/pjb) (*.net *.split)
[03:30:03] *** Quits: random-nick (~random-ni@87.116.167.143) (*.net *.split)
[03:30:03] *** Quits: Alfr (~Alfr@user/alfr) (*.net *.split)
[03:30:03] *** Quits: kakuhen (~kakuhen@user/kakuhen) (*.net *.split)
[03:30:03] *** Quits: easye (~user@oxi.slack.net) (*.net *.split)
[03:30:03] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[03:30:04] *** Quits: robin (~robin@user/terpri) (*.net *.split)
[03:30:04] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (*.net *.split)
[03:30:04] *** Quits: phantomics (~phantomic@97-118-135-6.hlrn.qwest.net) (*.net *.split)
[03:30:04] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[03:30:04] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (*.net *.split)
[03:30:04] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (*.net *.split)
[03:30:04] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[03:30:05] *** Quits: ixelp (~ixelp@p5b157756.dip0.t-ipconnect.de) (*.net *.split)
[03:30:05] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[03:30:05] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[03:30:05] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:6175:921c:ea3:862) (*.net *.split)
[03:30:05] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (*.net *.split)
[03:30:06] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[03:30:06] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (*.net *.split)
[03:30:16] *** Joins: djuber (~user@65.79.128.64)
[03:30:25] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[03:30:53] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[03:31:36] *** Joins: phantomics (~phantomic@97-118-135-6.hlrn.qwest.net)
[03:32:48] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:32:51] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[03:33:02] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:33:34] <vms14> btw didn't know lisp could preserve the case of symbols
[03:33:44] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:34:06] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:34:11] <vms14> althought is tricky because if you put it in preserve you'll have to write in upcase xD
[03:34:18] *** Joins: sm2n (ae95cb1267@user/sm2n)
[03:34:19] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[03:34:22] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[03:35:19] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[03:35:29] <vms14> I used it for prototyping the transpiler in lisp, but once I need macros I need the transpiled language
[03:35:34] *** Joins: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com)
[03:35:54] <vms14> http://www.thecatisonthetable.tk/t
[03:36:04] <vms14> this is the prototype in lisp xD
[03:39:04] <vms14> perl has some kind of macros, which are source filters
[03:39:25] <vms14> they were created to allow developers encrypt their code
[03:40:07] <vms14> but it's kind of an eval after a translator
[03:40:41] <vms14> the difference is where in lisp you modify lists, in perl you modify the source code directly xD
[03:51:45] *** Joins: kuao (uid504326@id-504326.helmsley.irccloud.com)
[03:59:30] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[04:35:44] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Quit: WeeChat 3.3)
[04:35:54] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[04:36:59] *** Quits: vms14 (~user@149.red-79-153-96.dynamicip.rima-tde.net) (Remote host closed the connection)
[05:55:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:56:50] *** Joins: Alfr (~Alfr@user/alfr)
[05:58:15] <moon-child> gilberth: 'S.T.A.L.K.E.R. 2 is getting NFTs'  still like that game?
[06:00:40] <kakuhen> i loev nft
[06:01:26] <moon-child> kakuhen: I'm really into NFT too--Neo From The matrix
[06:07:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:09:52] <kakuhen> my IRC client uses webkit webviews to render the irc chats (but otherwise uses "native widgets" for everything else)
[06:10:00] <kakuhen> and uh lol i love how the longer i keep this client open, the more ram it's consuming
[06:10:10] <kakuhen> started at 50 mb and now we're at 690.3 mb a week later
[06:10:26] <kakuhen> finder started at 25 mb and now it's at 524.9 mb
[06:10:54] <kakuhen> that's one feature i miss from windows -- there used to be some special thing you can do to tell every program to discard whatever memory it can
[06:11:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:11:29] <kakuhen> i know that mac os has a similar thing but it's an optional method for the ApplicationDelegate protocol
[06:11:52] <kakuhen> i forget it's actual name, but it's intention is for the OS to tell a program "i'm low on memory and if you don't do something about it i'll kill you"
[06:13:26] <kakuhen> i can fix these issues with a simple restart of both processes in question, but at this point i'm just curious on how much the memory usage can expand 
[06:14:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:15:47] * hayley tries to upload crap onto SoundCloud and all the tracks say "This track failed to upload."
[06:15:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[06:16:24] <kakuhen> does soundcloud still limit you on upload time
[06:16:41] <kakuhen> i recall in 2012 soundcloud limiting your upload not by quantity, but how long your connection took to upload
[06:16:55] <hayley> Seems like quantity to me.
[06:16:56] <kakuhen> so if you had a shitty DSL connection like me, you could barely upload a single mp3
[06:17:06] <kakuhen> ah they changed it now, for good reason
[06:17:17] <hayley> Apparently NetworkManager fucking died. Cool.
[06:21:21] * hayley reads dmesg. Apparently her laptop overheated while exporting most of the songs from her next album, and it throttled way too hard.
[06:32:07] <semz> kakuhen, iirc you can listen for low memory notifications with cgroups under Linux, but I've never done it myself and I don't know if they can be triggered manually.
[06:32:55] <moon-child> hayley: that's what you get for using redhatware
[06:34:36] <semz> I also doubt many programs use this, so a manual trigger probably wouldn't do all that much...
[06:34:47] <semz> "simplicity"
[06:37:08] <hayley> It has been 15 years and still no kernel support for bookmarking GC smh my head
[06:37:30] <kakuhen> redhatware is too convenient to give up
[06:37:45] <kakuhen> online i always see ppl complain about pipewire failing but it's literally just worked for me
[06:37:52] <kakuhen> of course this is my limited experience on fedora 34
[06:39:57] <semz> the hardest thing about not using redhatware is the constant fight against its attempts to creep into your system through dependencies imo
[06:45:08] <hayley> https://www.da.vidbuchanan.co.uk/widgets/pngdiff/
[06:56:00] *** Joins: robin (~robin@user/terpri)
[07:01:10] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:01:30] <dave0> maw
[07:01:37] <hayley> Is infinite recursion in C UB? IIRC infinite looping is at least.
[07:10:39] <hayley> I can make Clang drop infinite recursion with C++ but not C. Maybe I forgot something.
[07:21:35] <moon-child> internet sez it's different in c and c++
[07:21:47] <moon-child> c: a loop which satisfies certain conditions may be assumed to terminate
[07:22:06] <moon-child> c++: a thread may be assumed to eventually terminate or perform side effects
[07:24:52] <hayley> Right.
[07:28:50] <moon-child> (hmm, i wonder if gcc/clang will break if you do it with goto instead of a loop)
[07:32:48] * hayley gets as close to blatant evidence as possible that people think shouting into the void is an equivalent of "private conversation".
[07:33:34] <hayley> https://goblin.camp/@umalkosh/107265084640232183 I made a very simple version of this spaghetti decision tree in 30 seconds, they forgot to (declaim (optimize (speed 3)))
[07:33:43] * hayley uploaded an image: (29KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/tRmzgvzoiVCpIjEvTWGggXDG/am-i-a-reply-guy.png >
[07:34:29] <moon-child> what is a 'reply guy'?
[07:35:24] <hayley> As per the optimized decision tree, a guy who replies who OP doesn't like
[07:36:10] <moon-child> hmm, it seems to me that it is not necessary to reply to be a reply guy
[07:36:26] <moon-child> neither of these flowcharts states it as a prerequisite
[07:36:44] <hayley> It's implied, since you don't tend to think about people unless they interact with you.
[07:36:56] <hayley> Just a second then...
[07:37:38] <moon-child> well, if I dislike somebody, I probably think of them
[07:38:12] <hayley> But you tend to only dislike somebody after knowing they exist. Though, you can do that without them replying to you.
[07:38:43] <moon-child> yes
[07:39:24] * hayley uploaded an image: (54KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/gHgCOZySNnIFBlRDtbVLNdRN/am-i-a-reply-guy.png >
[07:39:26] <hayley> Happy now?
[07:40:25] <hayley> What's funny is that I wrote a book, and people happily spread the news around when I published a draft of it, but none read the part where I argued that everyone involved in a controversial discussion is a reply guy.
[07:42:08] <hayley> Say: unless you're actively looking for trouble, then you found a (somewhat) offensive comment without having to do anything - the social media platform just showed it to you since it doesn't know better. So you flame back. The other person found a (somewhat) offensive comment without having to do anything - the social media platform just showed it to them since it doesn't know better.
[07:43:46] <hayley> Thus, everyone is a reply guy. 🎉
[07:45:52] <hayley> Huh, I didn't write that in the book, I just said that no one really is in control of a conversation (which is pretty obvious). I should have, still.
[07:46:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:46:52] <moon-child> I fear I am getting lost in semantics.  I think you are saying that there is a meaningful category which encompasses some things which are called 'reply guy' and some which are not; and that this category is more meaningful than the 'reply guy' category (or that the distinction between the two subsets is not meaningful); and hence that it is silly to have a name for one and not the other
[07:47:26] <moon-child> but, despite asking the internet, I am entirely really sure what a reply guy is nor what distinguishes your superset
[07:47:45] <White_Flame> <hayley> Thus, everyone is a reply guy. 🎉
[07:47:58] <hayley> I don't think there is a useful definition of "reply guy", since it is entirely perspective, and who decided to talk about a topic first.
[07:52:14] <hayley> In my exemplar situation, the only difference between the two instances of someone reading someone else's bogosity, is what sort of false assumption the social media platform made, about who is interested in what.
[07:55:07] <moon-child> 'the social media platform just showed it to you since it doesn't know better'  to the contrary, I think the platform showed that to you precisely _because_ it knows better
[07:55:47] <hayley> The one real example that is constantly in my head 
[07:56:18] <hayley> ...is when someone flamed out complaining about CL for whatever reasons, I mentioned that the comparisons they made were nonsensical, and they then called me every insult under the sun.
[08:01:58] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[08:03:43] <hayley> In a way, I can only imagine that people who complain about reply-guying just don't find themselves disagreeing with anything very often. That's fine, but I guess handling misinformation is only something most people find useful long after they need it (like e.g. privacy generally).
[08:09:35] <moon-child> oh, I see
[08:14:54] *** Joins: semz (~none@user/semz)
[08:17:12] <hayley> But the book only attracts irony from experience. For example, someone complained about my warning against people trying to claim some sense of ownership over public spaces, and they said some words like "Get out of my town".
[08:18:13] <moon-child> hahaha
[08:19:07] <moon-child> I have learned it is pointless trying to reason with society, unless you like to sisyphistically pile grains of sand upon an edifice which is constantly being eroded
[08:21:49] <moon-child> (pondering 'sisyphustically'.  I hate it.  English is crappy about declensions but I refuse to relinquish this one)
[08:24:59] <hayley> lol
[08:26:53] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[08:32:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:33:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:38:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[08:59:56] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[09:01:55] *** Joins: aeth (~aeth@user/aeth)
[09:38:29] <hayley> https://twitter.com/krugermacro/status/1471328997644505091/photo/1
[10:28:07] <sm2n> random thought, C++/"low level" devs ought to love the idea of single address space os because it's a ZERO COST ABSTRACTION, kernelspace is just another runtime after all
[10:28:54] <hayley> lol
[10:29:50] <hayley> sm2n: see https://i.redd.it/yxmyv4achv281.jpg
[10:31:03] <sm2n> who's in that picture?
[10:32:42] <hayley> From "front" to "back": Gilad Bracha, Dave Moon, Adele Goldberg, Gnuxie, Dan Ingalls
[10:33:08] <sm2n> ah
[10:33:17] *** Joins: shka (~herr@109.231.0.226)
[10:33:48] <hayley> ...of Newspeak, lispm, Smalltalk and CLOSOS fame
[10:36:13] <sm2n> yeah, I know the names, just not the portraits
[11:02:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:10:40] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[11:12:49] <gilberth> Well, there are two things to address spaces in the UNIX sense. One is virtual memory and one is isolation. You could run a UNIX-like operating system without an MMU, see ucLinux. That however was not feasible is to do that on a PDP-11 because of its small address space.
[11:13:36] <gilberth> Also, UNIX used swapping not paging.
[11:15:03] <gilberth> The isolation then came for "free". You can't touch another processes memory, when that process isn't in memory at all.
[11:15:19] * hayley has been "challenged" to write a DES cracker.
[11:16:33] <dave0> minix 1 (maybe 2?) did unix v7 without an mmu (68000 macintosh, amiga, atari)
[11:16:45] <dave0> fork was interesting
[11:18:37] <gilberth> Did Minix ever ran on the 8086? As long as you stick to 16-bit addresses, those segment registers would be very handy. You could even have a separate address space for text and data for more head room as a program could always use a 64kB data segment.
[11:18:50] <hayley> I believe so.
[11:19:05] <dave0> yup PC, XT, AT
[11:19:09] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[11:19:24] <gilberth> And you could move processes in memory.
[11:20:04] <dave0> sort of pseudo-paging
[11:20:43] <gilberth> BTW XENIX on the 80386 still had the text segment different from the data segment. The effect was that the data segment and the stack were practically un-executable.
[11:20:44] <dave0> i dont remember if minix compacted memory
[11:21:08] <hayley> https://www.youtube.com/watch?v=soL8JK6kALc
[11:21:19] <dave0> yes non-execute has existed since 286
[11:21:57] <dave0> it's a pity 286 wasn't compatible with dos
[11:22:53] <gilberth> dave0: It's a cross between paging and swapping. You could keep more than process in core at the same time, you just don't have demand paging. And when you trust sbrk(2), you could keep more than 640kB/64kB segments at once in memory. Even if you don't, you can.
[11:23:18] *** Joins: treflip (~user@95.79.32.99)
[11:23:36] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:25:08] <gilberth> dave0: I said "practically" as you could still set the segment registers. But: Using a buffer overflow to patch a return address of a function to point to any random code you injected, does not work. So I never really understood why (a) Linux didn't do that and (b) what the hype about this executable page bit was.
[11:25:29] <hayley> Someone told me that it seemed reasonable to get one DES key tested per cycle, but that makes no sense, as DES at least has 16 steps of some "box" construction, and AIUI it requires a few look up tables.
[11:26:02] <hayley> Patching the return address of a function lets you do incremental stack scanning on the cheap.
[11:26:02] <dave0> eh linux
[11:26:08] <dave0> not so good
[11:26:11] <GreaseMonkey> protected mode is weird
[11:26:27] <gilberth> For dynamically generated code this was troublesome. XENIX on i386 had no mmap(2) but another special syscall to get a chunk of memory mapped to both the code and data segments.
[11:26:35] *** Quits: treflip (~user@95.79.32.99) (Changing host)
[11:26:35] *** Joins: treflip (~user@user/treflip)
[11:27:30] <gilberth> What is weird about protected mode is that those segments are still there.
[11:29:24] <dave0> maybe they thought people would run powerful os, instead we got unix :-p
[11:30:02] <dave0> didn't os/2 fully support segments?
[11:30:28] <gilberth> I don't know, I never played with OS/2.
[11:30:55] <gilberth> And I practically skipped the 286.
[11:31:30] <GreaseMonkey> OS/2 supported enough things to make emulators cry
[11:31:37] <GreaseMonkey> at least that's what i've heard
[11:31:47] <dave0> my first pc was in the late 90's .. i clung to my amiga long past it's slow death
[11:32:08] <dave0> i still have my first c program
[11:32:30] <GreaseMonkey> ...in defence of unix, at least you can build unix entirely on a unix system
[11:32:32] <dave0> i pirated the amiga c compiler off some guy on irc
[11:33:36] <gilberth> I had XENIX for the 80386. 32-bit address space and virtual memory and preemptive multitasking. That was very nifty at a time, where people still used DOS and Win 3.11. I ported GCC and X11 to it.
[11:33:38] <GreaseMonkey> it's one sad thing about the amiga from what i've read, apparently you cannot build the entire amiga OS on an amiga
[11:34:20] <GreaseMonkey> as for the atari ST, well, they eventually got it to that point where it could self-host some time before launch... because people were sick of how slow the apple lisa was
[11:34:23] <hayley> .oO(So many bit permutation operations though. Maybe I should use this as an excuse to learn how to use a FPGA.)
[11:34:38] <gilberth> I still remember that my father was pretty stunned that you could move windows. That is the window with all its contents and not just some wire-frame. Miles ahead of Win 3.11.
[11:34:51] <dave0> GreaseMonkey: i believe the amiga guys used sun workstations to write amigaos
[11:35:22] <GreaseMonkey> dave0: i'd have to look it up at some point... also, i believe a lot of amigaos was written in BCPL
[11:35:40] <dave0> yeah the dos was in bcpl
[11:35:44] *** Joins: pjb (~pjb@user/pjb)
[11:35:47] <dave0> TRIPOS
[11:35:52] <dave0> i think it still exists
[11:36:15] <GreaseMonkey> which reminds me... C is extended B, which is simplified BCPL... which is simplified CPL
[11:37:26] <gilberth> From what I read, there isn't much CPL left in BCPL. The idea was "writing compilers and runtimes is hard, let's go shopping."
[11:37:37] <dave0> GreaseMonkey: https://en.wikipedia.org/wiki/TRIPOS
[11:37:57] <gilberth> Or: "We're lazy!"
[11:38:46] <gilberth> And this philosophy sticks.
[11:40:01] <gilberth> Rust is the most recent instance of that mindset to be lazy at compiler writing and pushing all the work to the programmer.
[11:40:50] <gilberth> I mean: I have to manually increment a reference count? Serious!? That's a joke.
[11:43:03] <gilberth> The only thing that Rust does here, is that it noticed when I forgot that. But, when it notices, why can't the damn compiler just insert it, when needed? Sometimes, when you pass a value "linearly" and you don't need to. But you grow a habit on appending .clone() to every value, just in case.
[11:44:43] <gilberth> And his is bad. Say you have sth. like { ..blah.. foo (x); }. Now you want to insert sth before that foo() call, which uses 'x', too. You say { ..blah.. bar(x); foo(x); } and it won't compile.
[11:45:37] <hayley> Well, Ironclad has a DES implementation I can look at. Though I suspect some of the permutation operations can be pulled out of the loop, as I have constant plaintext, and I can just un-permute the key instead of permuting each key, would I brute force every option anyway.
[11:46:06] <gilberth> I just don't get it. When they do all the escape analysis, why is this information only used to annoy the programmer?
[11:46:25] <hayley> So that you have to be explicit about it.
[11:46:40] <gilberth> Yes, milady, all the time.
[11:49:29] * hayley spots IRONCLAD::DES-MUNGE-BLOCK
[11:50:24] <gilberth> And this makes sense when you see the Rust compiler as a verification tool and not a helpful compiler. I mean, the saga is that they failed two times to make the Mozilla renderer parallel. Google is said to have failed, too. So they used Rust, because it forces me to put every pointer behind a mutex.
[11:51:26] <hayley> I can think of better verification tools then.
[11:51:55] <gilberth> Also it's copy happy and the belief is that copying is faster than just passing a pointer. Which of course it is, when you put each pointer into an Arc<Mutex<T>>. A self-fulfilling prophecy.
[11:52:33] <hayley> Recall I got in a conversation two days ago, where someone said that managing memory manually should be easy as you know what your program does. So I said that figuring out the temporal logic for that is _not_ easy with multiple threads. Then someone said "oh, the borrow checker in Rust literally does that."
[11:53:03] <shka> it literally can't
[11:53:10] <gilberth> lol. It solves the halting problem?
[11:53:16] <hayley> How stupid - it munges regions and affine types, more or less. When I mentioned that, they said "if you love your GC, then have fun writing slow and buggy programs".
[11:53:19] <shka> exactly
[11:53:49] <hayley> So I said "okay, if you are going to bail out of regions with naïve RC, then have fun writing slow and buggy programs yourself."
[11:54:22] <gilberth> Well, my Lisp interpreter in Rust is 200x slower than my C implementation. That's a task where Rust is particular bad at.
[11:54:39] <hayley> AIUI the theory is that you can make most variables linear and/or borrow, but that's out the window when writing an interpreter, since you don't know what the interpreted program does.
[11:55:19] <gilberth> Yes, that's the halting problem.
[11:55:44] <gilberth> This would apply to anything I would find interesting, like compilers, say.
[11:56:15] <hayley> Yes, anything with pointers is FUBAR. But apparently there are no good data structures that use pointers.
[11:56:48] <selwyn> good morning everyone
[11:57:01] <hayley> That's the excuse for linked lists, at least, but it looks much funnier for an instruction graph.
[11:57:25] <gilberth> Well, as I said a few days ago: When all your data is essentially strings of bits, you're probably fine with Rust. You still copy all the time, but at least that is no allocation, right?
[11:58:06] <hayley> Oh, and people say that there's no way to do variable-sized stack allocation too.
[11:58:32] <gilberth> See my border-style example. They needed four words to represent that. four.
[12:00:07] <gilberth> The slides I saw said it is either unset, none, solid, dashed, with-hearts, with-flowers, or dashed(some integer).
[12:01:17] <gilberth> I wonder what they would do, when there would be possibility to have a dash pattern as a sequence of numbers.
[12:02:54] <gilberth> Am I living in another universe? Or do "they" do?
[12:03:16] <hayley> https://dystroy.org/blog/how-not-to-learn-rust/ "Mistake 3: Start by implementing an obsolete technical solution [a linked list]"
[12:03:32] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:03:52] <hayley> "You'll probably realize later that you don't need them, but in the meantime, just take it that learning Rust with linked lists is a very bad idea." What, I'm supposed to only have straight line code in my IR? No control flow?
[12:04:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:08:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[12:09:06] <gilberth> This advice reads like a list of things Rust is bad at. Calling that what Rust is bad at as bad per se is pushing the blame on the programmer.
[12:09:30] <gilberth> I like this one: "Rust makes it especially easy to refactor." RLY?
[12:09:47] <gilberth> Funny definition of "easy".
[12:11:18] <shka> gilberth: i think that you approach Rust wrongly
[12:11:44] <shka> Rust is at heart cleaned up C++
[12:11:45] <gilberth> shka: Ah, because I like pointers?
[12:12:10] <shka> no, because it is alternative to C++
[12:12:25] <shka> and community is full of shit, i know
[12:13:17] <mfiano> Rust is not a cleaned up C++
[12:13:17] <shka> but the truth is that the selling point of rust is solving few of the major headaches of C++
[12:13:28] <gilberth> Well, I wanted to do with Rust is to get a feeling about how this language actually is. Now I know.
[12:13:38] <mfiano> It borrows a lot from ML. Infact, the original compiler was written in OCaml IIRC.
[12:13:59] <shka> mfiano: yeah, because it solves a lot of problems with templats
[12:14:23] <shka> Rust is, simply put, what C++ would have been if it was designed from scratch 
[12:14:30] <mfiano> "Despite the syntactic resemblance to C and C++, the semantics of Rust are closer to that of the ML family of languages and the Haskell language."
[12:14:43] <moon-child> only if you copy everything?
[12:14:46] <gilberth> shka: I very much doubt that.
[12:14:52] <shka> mfiano: yes, because C++ type system is insane
[12:14:58] <moon-child> and shitty closures?
[12:15:10] <shka> no remotely sane person would want to copy that
[12:15:13] <hayley> mfiano: Total bull.
[12:15:20] *** Quits: kuao (uid504326@id-504326.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:15:29] <hayley> ML has closures, GC, exceptions...
[12:15:52] <mfiano> The amount Rust borrows from ML and even Lisp is pretty crazy, and it's still not decent.
[12:16:08] <hayley> http://www.mlton.org/Regions
[12:16:18] <hayley> "We believe that it is the case that common SML idioms tend to work better under GC than under regions."
[12:16:47] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[12:17:00] <gilberth> Seriously, compare Rust with Go. I would prefer Go anytime.
[12:17:13] <shka> well, go is at least simple
[12:17:15] *** Joins: Alfr (~Alfr@user/alfr)
[12:17:40] <gilberth> I was making fun of Go initially, but it is a proper languages, with GC, with closures, and good performance.
[12:17:44] <mfiano> I have no interest talking anymore about Rust when I should be sleeping. I jumped that ship like 8 years ago.
[12:17:48] <mfiano> Night :)
[12:18:03] <gilberth> Take care.
[12:18:34] <shka> i would have picked D over both go and rust
[12:18:39] <shka> but  D is Dead
[12:18:56] <selwyn> substance d
[12:19:41] <hayley> BTW see page 10 of https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.86.8004&rep=rep1&type=pdf
[12:20:11] <gilberth> And btw. Go does escape analysis too. The compiler does it for you, you don't need to be explicit about it.
[12:20:16] <hayley> Fair few leaks there.
[12:21:03] <hayley> "tyan: 197M (no GC) 2356k (GC)"
[12:21:30] <gilberth> C compilers do that too these days. Your malloc(2) may turn into stack allocation or no allocation at all, when that entity could be held in registers.
[12:21:46] <moon-child> hm, I don't think such optimizations are common
[12:21:56] <sham1> And when you're not putting the pointer into a struct or returning anything
[12:22:24] <hayley> The appendix to Don't Build Your Own Lisp includes a buggy benchmark, wherein C, Java and JS compilers kill all allocations, as none are used.
[12:22:35] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[12:23:36] <hayley> The C example was, in turn, because the author thought a local "volatile int" variable could be used to bait the compiler into not folding out code.
[12:23:55] <gilberth> So what's the benefit of Rust again? I could be explicit in C and put my struct as a lexical variable. Sorry, My point is: A language does not need to force you to be explicit about stack allocation.
[12:24:05] <moon-child> https://0x0.st/-CsL.txt  huh, apparently gcc optimizes this but clang does not
[12:24:18] <sham1> What's the benefit of Rust? Marketing, mostly
[12:24:19] <gilberth> hayley: Where is your lovely meme with the girl who can't read.
[12:24:37] * hayley uploaded an image: (102KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/iXCwXrhbomGtjwLZmbuDHEpz/stack-allocation.jpeg >
[12:24:49] <selwyn> oh that meme
[12:24:50] <gilberth> Thanks.
[12:25:03] <shka> gilberth: the benefit of rust is that it is not C++ :D
[12:25:21] <sham1> Plauge and cholera
[12:25:27] <shka> seriously
[12:26:17] <shka> i don't see how anyone other then C++ programmers would go into GC-less language
[12:26:23] <shka> well, or C
[12:28:21] <gilberth> I am working on a toy compiler, and I want it to do make a CONS call go away, when only the CAR and CDR are looked at. That is turn (let ((q (cons 1 2))) (+ (car q) (cdr q)) turn into (+ 1 2) into 3.
[12:28:36] <hayley> https://www.youtube.com/watch?v=tbHix56qfG8
[12:29:27] <sham1> gilberth: constant folding
[12:29:38] <moon-child> gilberth: S!  R!  O!  A!
[12:29:53] <gilberth> shma1: Escape analysis.
[12:30:41] <gilberth> moon-child: ?
[12:30:45] <moon-child> sham1: much of the time you won't be able to constant fold, but you still want such optimizations
[12:30:48] <sham1> Well you can still return a cons while also turning that into (+ 1 2)
[12:31:01] <moon-child> e.g. (lambda (x y) (let ((q (cons x y))) (+ (car q) (cdr q)))
[12:31:10] <moon-child> and yes it's not escape analysis exactly either
[12:31:14] <moon-child> gilberth: scalar replacement of aggregates
[12:31:25] <moon-child> (e.g. (values q (+ (car q) (cdr q))))
[12:31:42] <gilberth> What about: (let ((q (cons 1 2))) (incf (car q)) (+ (car q) (cdr q)))?
[12:31:56] <sham1> Or whatever it's called. It's an optimisation step in Guile, I know that much
[12:33:20] <moon-child> sroa -> (let ((q0 1) (q1 2)) (incf q0) (+ q0 q1)); ssa -> (let ((q0 1) (q1 2)) (let ((q2 (+ q0 1))) (+ q2 q1))); constant-folding and dce -> 3
[12:34:53] <gilberth> This comes up with that I want to open code keyword argument parsing. That is: The caller does the parsing, not the callee. You will have code like ((lambda (&rest args) <some loop over args> ...) ...). This should first turn into ((lambda (args) ...) (list ....)) and then the loop repeatly inlined. With all going away, when the keywords passed are constant.
[12:35:19] <gilberth> moon-child: Exactly.
[12:37:14] <moon-child> you refer to your compiler as a toy, but this seems like a slightly fancy optimization.  What aspirations do you have for it?
[12:38:13] <gilberth> Well, it's part of my toy. I just have my what I call "core lisp" as the target. It's a play ground.
[12:39:03] <gilberth> Without needing to bother with tedious assembly language generation.
[12:40:01] <hayley> gilberth-to-HIR
[12:40:02] <moon-child> assembly is not so bad.  Unless you want to do register allocation.  _That_ is annoying
[12:40:13] <hayley> ):<
[12:40:38] <sham1> So, are you doing SSA or CPS or are you even bothering with those
[12:40:40] <moon-child> as I recall my register allocator works, but I do not generate correct live ranges, and I have little motivation to go back and fix them
[12:40:44] <gilberth> hayley: Hey, I could do a CL->CL compiler :-p
[12:41:18] <hayley> moon-child: y no estimated-distance-to-use
[12:41:48] <gilberth> moon-child: Yes and I want to play with different aspects.
[12:43:30] <moon-child> hayley: iirc I did two-pass linear scan
[12:43:46] <kakuhen> core lisp, so tiny scheme ;)
[12:43:48] <moon-child> didn't even do anything fancy w/constraints for two-address instructions.  Just inserted movs
[12:43:59] <moon-child> (mighta grabbed the register if it was available from that point on, don't remember)
[12:44:37] <gilberth> kakuhen: Perhaps more tiny: I do with QUOTE, IF, LAMBDA, SETQ, CATCH/THROW.
[12:46:23] <kakuhen> that's very tiny
[12:46:29] <kakuhen> even smaller than picolisp
[12:50:17] <sham1> I think that's even smaller than the micro-manual
[12:50:39] <moon-child> so, what, do you do church encoding for numbers?
[12:51:01] <Alfr> gilberth, maybe something similar to "snippet"s as described in http://metamodular.com/SICL/call-site-optimization.pdf ?
[12:51:31] <gilberth> moon-child: No, I am not that minimalistic.
[12:52:19] <Alfr> gilberth, it's more or less different entry points which ultimately may proceed to the same "main" function.
[12:53:06] <gilberth> Alfr: Perhaps. I did this in mid 90s already. You just have to recompile/patch the call sites when you redefine.
[12:54:31] <selwyn> wonder what it was like in the 90s for lisp
[12:54:33] <gilberth> For just optional arguments it's trivial to have foo/n stubs which branch off to the real foo. It get's interesting, when you want to inline keyword argument parsing.
[12:56:47] <gilberth> selwyn: I survived with an improved XLisp for some time, I implemented a BC for it. Then there was CLISP, and CMUCL once available was a major leap. But: Memory-wise it was tight all the time. A non-issue these days.
[12:57:05] <Alfr> gilberth, as presented there, it's simply a jump to a snippet (likely also with a return address passed somehow) which has to be updated on redefinition I guess; tough for keyword, the number of permutations/combinations may become too expensive with a dozen keyword already.
[12:57:11] <selwyn> are we in a silver age of lisp now?
[12:57:45] <gilberth> Heh.
[12:58:11] <gilberth> I still have a few years until I become a silver Lisper :-)
[12:58:21] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[12:58:51] <gilberth> Alfr: Yes. What I did was to patch the call sites, no fixed trampolins.
[12:59:01] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[13:00:07] <Alfr> gilberth, on the other hand, you may get away with not too many for keywords as well, as CL usually wants left to right evaluation, you may have to simply do that and pass in the results in some specific order and some sentinel value for not provided keywords.
[13:00:29] <moon-child> gilberth: main draw of 'call site optimization' as I recall is that you do not have to fully recompile all callers, nor do the work to generate a snippet right away
[13:00:34] <moon-child> so redefining a function is faster
[13:02:23] <gilberth> Yep, but I am not concerned about that. And my ancient approach was not recompiling, but just inserting the right instructions to shuffle arguments into the right places, that was quick.
[13:03:00] <moon-child> skimming paper again '[inline caching] is not directly related to speeding up function calls, but it has the effect of making calls to generic functions faster'  eh?  Why couldn't you cache the lambda-list of the callee??
[13:03:58] <hayley> I was sorta disappointed that beach didn't mention that the call snippet for a generic function is basically a polymorphic inline cache.
[13:04:16] <moon-child> gilberth: what if suddenly you need more instructions?  Now all your jump offsets are wrong, at the very least
[13:04:29] <hayley> But, I guess, what does inline caching the lambda list achieve?
[13:04:45] <moon-child> don't have to do argument parsing?
[13:04:59] <hayley> What do you cache to achieve that?
[13:07:19] <moon-child> presumably given a function with a lambda list like  a &key (b 2) (c 3).  Then you generate an alternate entry point which does no argument parsing.  And you have a call site like (f 2 :c 5), it calls the alternate call site with 2 2 5
[13:07:30] <moon-child> s/presumably //
[13:07:42] <moon-child> s/alternate call site/alternate entry point/
[13:08:59] <gilberth> moon-child: Of course they are, but relocating is quick too. I won't call that compiling.
[13:09:57] <moon-child> gilberth: if you have variable-width offsets and alignment directives, the optimal configuration is undecidable :)
[13:10:04] <moon-child> (or, rather, there is no optimal configuration)
[13:10:14] <moon-child> (meh, probably pretty fast in practice anyway :)
[13:10:37] <Alfr> moon-child, can't, programmers may redefine the function with a new lambda list: a &key (b 21) (c 3)
[13:10:42] <gilberth> Well, I didn't have variable width offset to begin with.
[13:11:08] <moon-child> Alfr: that's what the inline cache is for!
[13:11:11] <Alfr> moon-child, if you don't want to touch the caller later, you'll have to defer default value bindings to the snippet.
[13:11:36] <moon-child> when the lambda list is redefined, the guard on the inline cache will fail and you'll go to the fallback entry point (and asynchronously generate new code; I think monomorphic is fine here)
[13:11:36] <Alfr> moon-child, oh, interesting, didn't think of that.
[13:12:03] <moon-child> and you can hash-cons lambda lists, so it's a cheap compare
[13:12:21] <moon-child> the only problem is if you have anything non-constant I believe it has to be evaluated in the callee's environment
[13:12:37] <moon-child> but that can be arranged
[13:12:41] <moon-child> gilberth: fair enough
[13:18:24] <Alfr> moon-child, I guess invalidating caching and invalidating it is the sane choice, as the lambda list may change incompatibly as well, and then you may also omit argument checks when calling, as that can be done during code generation for each entry point.
[13:19:06] <hayley> I guess inline caching is usually used for method dispatch, still.
[13:19:11] <Alfr> Hm ... what did I do there? oO
[13:19:42] <Alfr> s/invalidating caching and invalidating it/invalidating the caches/
[13:21:21] <Alfr> hayley, is there a reason not to use it for normal function calls?
[13:21:50] <hayley> I can't think of one.
[13:22:11] <moon-child> I think js does exactly that, in order to inline
[13:22:16] <moon-child> (I could be completely making that up, though)
[13:26:08] <hayley> https://en.wikipedia.org/wiki/Covox_Speech_Thing
[13:26:19] <Duuqnd> Yeah, that's the one I was thinking of
[13:26:41] <Duuqnd> There's also the Disney Sound Source, but it has a buffer that limits the sample rate
[13:28:45] <hayley> As long as I can get the chime from the start of <https://www.youtube.com/watch?v=XA3KTY--20g> at boot I'm sold.
[13:31:18] <Duuqnd> How hard are modern sound devices to interface with?
[13:31:33] <sham1> Quite
[13:31:36] <hayley> I don't know.
[13:32:38] <Duuqnd> I like how the only audio things the OSDev wiki mentions on the front page is the PC Speaker and Sound Blaster 16 
[13:33:04] <Duuqnd> They're like "dude it won't work, just stay in DOS-land"
[13:33:21] <sham1> They have an Intel HDA page, but yeah
[13:34:31] <Duuqnd> What about just using a whole Amiga as a sound card
[13:38:00] <sham1> SID chip
[13:38:05] <sham1> Now that'd be neat
[13:48:26] * hayley uploaded an image: (185KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/qHNqBIDRCYiEAvqiioypmswX/discovering-a-new-species.png >
[13:52:00] <shka> https://www.youtube.com/watch?v=1ftld7Ohojg
[13:53:11] <hayley> https://github.com/rust-lang/rust/pull/91476 Best PR crabs could come up with, even with a €6,000 computer for compiler hacking
[13:53:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:57:30] <Alfr> hayley, that'll be an amusing one, they don't consult a unicode name table but add 16 lines to error on one code point ...
[13:57:54] <Duuqnd> Why can't they have emoji in their variable names? Are the crabs that paranoid that people will pull dumb shit?
[13:58:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[13:58:08] <hayley> Also a good question.
[13:59:00] <Duuqnd> Do they forbid all non-ASCII characters or just emoji?
[13:59:09] <hayley> AIUI the latter.
[13:59:13] <gilberth> Yep, I had the expression that the Rust compiler hackers love nice and verbose error messages calling the programmer lazy, while in fact they are.
[13:59:51] <moon-child> verbose error messages were one of the things that really bugged me about rust.  And for some reason nobody shared this sensibility with me.  ¯\_(ツ)_/¯
[14:00:15] * hayley searches and someone mentions https://www.unicode.org/reports/tr31/
[14:00:50] <moon-child> sbcl: (let ((☺ 5)) ☺) #| --> 5 |#
[14:01:13] <Duuqnd> They should add an error message for when you miss a semicolon that says "Yo shit for brains, what goddamn character goes here, huh? You blind motherfucker! Who the fuck do you think you are?"
[14:01:18] <hayley> OTOH https://github.com/rust-lang/rust/pull/73305 - no, non-ASCII isn't "first class".
[14:01:41] <moon-child> I have a difficult time believing any language treats unicode as first-class other than raku
[14:01:52] <gilberth> moon-child: Yet already bugs me with recent versions of gcc or clang. You mistype an identifier and get a dozen lines of blah blah hiding the actual error message. Heh, even SBCL is too verbose for my taste.
[14:02:01] <hayley> non-ASCII _identifiers_ aren't "first-class".
[14:03:02] <moon-child> gilberth: yeah.  Iirc they create a virtual 'variable', but type it 'int', so then you get so many error messages about how you cannot do such-and-such to an int, when really it was not m eant to be an int in the first place
[14:03:36] <moon-child> s/then/that/
[14:03:48] <hayley> "Rust source encoding is specified to be UTF-8. Identifiers must begin with a character that has Unicode XID_start property and remaining characters must have the XID_Continue property."
[14:03:51] <moon-child> hmm, s/so/such/
[14:04:21] <gilberth> Indeed. A mere foo.c:42: Unknown identifier 'mystiped' would be suffice.
[14:04:41] <moon-child> there is some flag you can pass to keep them from emitting more than one error
[14:04:58] <moon-child> and of course there is tcc.  Tcc errors are rather decent, but I don't like that they don't include column numbers
[14:05:26] <gilberth> moon-child: It's call head(1) :-)
[14:05:34] <moon-child> lol
[14:05:44] <moon-child> but then they detect they are being piped and strip away the colour!
[14:06:02] * moon-child shakes his fist at the in-band comms
[14:06:08] <gilberth> Hey, I am olde-school and type "make" to a shell, when I hack in C.
[14:06:16] <moon-child> as do I
[14:06:22] <moon-child> and I am probably half your age
[14:06:52] <gilberth> Don't remind me that I am not 30yo anymore.
[14:07:10] <moon-child> I was 15 quite recently!
[14:07:55] <gilberth> Heh.
[14:24:56] * hayley started CL at 16
[14:27:21] * gilberth started Lisp at 12.
[14:27:49] <hayley> Guess I was late then,
[14:28:06] <hayley> ...and Python existed too, which was a false start.
[14:28:24] <moon-child> heh, I started with python too
[14:28:42] <moon-child> well technically I started with unix, that was at 5 or 6.  Python at 9.  Lisp later
[14:28:44] <selwyn> i started with java
[14:28:46] <hayley> And Cliff Click wrote his first compiler at 15 (Pascal on Z80).
[14:28:49] <selwyn> miss applets
[14:28:55] <gilberth> Well, I used what was available. Started with BASIC and 8080 assembler^Wmachine code.
[14:29:14] <selwyn> wasn't there some trend of writing applets in other languages for a while?
[14:29:20] * hayley was playing with DEBUG.COM on primary school computers at 11 though.
[14:29:21] <selwyn> back when java ruled the waves
[14:29:33] <moon-child> java and flash, and I think ms had a thing
[14:29:42] <selwyn> yes
[14:29:45] <selwyn> active applets or some shit
[14:29:46] <hayley> Which is more or less a shitty x86 assembler REPL, given that it can assemble on the fly, and even dump images for you.
[14:30:18] <hayley> https://thestarman.pcministry.com/asm/debug/debug.htm
[14:31:13] <Duuqnd> I recently used the DOS debugger on an old palmtop computer that runs DOS and it was certainly interesting
[14:31:14] <gilberth> Ever used EDLIN?
[14:32:23] <hayley> Nope, just EDIT for me.
[14:32:55] <selwyn> was the applet security model any good? all i remember is struggling to understand how to sign an applet
[14:45:27] <hayley> There was a model other than "no file IO lol"?
[14:45:41] <hayley> I think Flash had optional permissions for e.g. webcam use though, like browsers do now.
[14:46:51] <selwyn> there were apparently two other models
[14:47:26] <moon-child> my impression is the security problems were on the implementation side.  But I could be completely wrong about that
[14:47:27] <selwyn> eventually, java bought in optional permissions with java web start
[14:48:43] * hayley wonders why they called it Pauseless and never implemented it without pauses.
[15:11:30] <sham1> Maybe the idea is that it has a potential to be pauseless if implemented properly
[15:11:37] <sham1> Or maybe it's just a name
[15:12:27] <hayley> For the most part, yes (except their plan for concurrent weak reference processing was BS), but it's still ironic to me.
[15:13:25] <sham1> Anyway, paper tax. Because it sounds interesting I'd like to see it
[15:14:26] <hayley> https://www.usenix.org/legacy/events/vee05/full_papers/p46-click.pdf
[15:21:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[15:22:52] <selwyn> is pgp going to last a while
[15:23:47] <hayley> Maybe?
[15:24:07] <hayley> Okay, it's been a while, and I think PGP has lasted.
[15:24:18] <selwyn> classic lindy
[15:24:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:24:38] <selwyn> but i hear complaints about the codebase
[15:24:58] <shka> yeah, it has... story
[15:25:09] <shka> but how do you replace it anyway?
[15:25:40] <selwyn> apparently ssh-keygen can be used to sign arbitrary data
[15:25:53] <selwyn> ssh keys exist and are widespread
[15:25:56] <selwyn> and so on
[15:26:21] <shka> yeah, but last time i tried to encrypt with ssh-keygen it complained about the size of the file
[15:26:31] <shka> so dunno what i was doing wrong
[15:26:35] <shka> gpg works fine
[15:26:40] <selwyn> oh
[15:27:06] <shka> and it was like a month from now
[15:27:18] <shka> anyway, thing with PGP/GPG is that it works
[15:27:24] <shka> and so far never failed me
[15:28:29] <selwyn> sigh
[15:28:34] <selwyn> time to do a german lateral flow test
[15:31:30] <shka> the cringe championship https://www.youtube.com/watch?v=PjkAVpFA5Ys
[15:45:25] <selwyn> impressed that the german test only takes 15 minutes while the nhs one takes 30 minutes
[15:45:31] <selwyn> continental efficiency
[15:48:09] <ck_> I haven't heard the term "lateral flow test" before. is it a pcr variant or something else?
[15:48:45] <selwyn> i think it is just our term for an antigen rapid test
[15:49:18] <ck_> ah
[16:04:04] <shka> selwyn: are you using spacemacs?
[16:07:15] <selwyn> yes
[16:07:22] <selwyn> looks like i am negative again
[16:07:39] <shka> so i just discovered ])
[16:07:46] <shka> try it out in the normal mode
[16:08:23] <selwyn> and?
[16:11:18] <shka> cool shortcut, it never occurred to me that [ or ] can be bound to anything in the normal mode
[16:27:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[16:49:52] <shka> i really enjoy composing vim style commands
[16:50:05] <shka> so now i can d ])
[16:50:08] <shka> cool
[16:58:38] <selwyn> i don't understand how to invoke the shortcut
[17:01:50] <shka> are you using evil mode or the holy mode?
[17:02:59] <shka> in evil, while in normal mode press ]
[17:03:23] <shka> submenu popsup, and ) will then take you to the closing parenthesis
[17:07:02] <dave0> nite all
[17:09:00] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:58:21] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[17:58:57] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:04:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:16:03] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[18:25:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:29:14] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[18:31:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[18:33:30] *** Joins: aeth (~aeth@user/aeth)
[18:42:02] *** Joins: notzmv (~zmv@user/notzmv)
[18:55:33] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[19:29:46] *** Quits: random-nick (~random-ni@87.116.167.125) (Quit: quit)
[19:34:40] *** Joins: random-nick (~random-ni@87.116.181.93)
[19:47:17] *** Joins: makomo (~makomo@user/makomo)
[19:56:43] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[19:57:28] *** Joins: minion (~minion@common-lisp.net)
[20:02:22] <selwyn> i wonder if korea has starcraft tourism
[20:05:19] *** Joins: kuao (uid504326@id-504326.helmsley.irccloud.com)
[20:08:56] <ck_> it used to, you'd see visiting people in the tournament audiences
[20:09:22] <selwyn> i was thinking more of studio tours
[20:09:30] <selwyn> but i suppose thinking of it now there wouldn't be much to see
[20:09:58] <selwyn> 'and on your left you can see the devs are in crunch again'
[20:11:24] <ck_> and on your right, those are the empty brood war desks
[20:21:03] <pl> well, the core problem is that StarCraft isn't developed in Korea
[20:21:10] <selwyn> oh
[20:21:15] <pl> so it would have to be trip from Korea to USA
[20:21:19] <selwyn> :s
[20:22:16] <pl> Blizzard has /events/ in Korea, due to huge eSports popularity there with Starcraft, but doesn't have a studio in Korea
[20:29:51] <selwyn> i really think we are screwed by january
[20:30:14] <selwyn> they won't do any new precautions until christmas is over and the r rate is estimated between 3 and 5
[20:42:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:43:35] <ck_> will you go to that wedding tomorrow?
[20:43:57] <selwyn> its on saturday
[20:44:08] <selwyn> but yes i will
[20:44:32] <selwyn> and after that, a quiet christmas it seems
[20:45:28] <pl> Be original, go in full NBC geear
[20:46:23] <selwyn> how much n can those things actually protect against
[20:47:30] <pl> selwyn: if you have working filters? depending on type of gear and keeping to its proper use, you could walk through covid hospital, touch ebola patients, etc.
[20:47:33] <pl> and be safe
[20:47:53] <selwyn> i meant n for nuclear
[20:47:56] <selwyn> should have been clearer
[20:48:20] <pl> selwyn: depends on gamma and neutron radiation levels in the area
[20:49:08] <pl> cause those can penetrate through and are still dangerous even if you are not in contact with the radiating item
[20:49:26] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[20:49:38] <pl> they will protect against alpha and beta radiation till it goes to the level that will impact serious heat transfer
[20:50:08] <pl> but usually if that's an option, you got worse things to deal with
[20:50:31] <selwyn> indeed
[20:50:49] <pl> the point of NBC gear is to prevent radioactive material, or biological agents, or chemical agents, from touching you directly
[20:51:00] <ck_> what do you mean it isn't friday :[
[20:51:13] <pl> so filters or sources of clean air, hi-quality sealing, etc.
[20:51:47] <selwyn> well, i am leaving for it on friday
[20:52:15] <pl> then safe handling includes cleaning yourself appropriately before removing them and removing them in correct way, too
[20:52:32] <selwyn> what did they use at chernobyl
[20:52:54] <selwyn> for the people who opened the valves for example
[20:53:19] <ck_> I meant it feels like friday today, that's why I said "wedding tomorrow". then you placed an entire day of the week back on my shoulders
[20:53:19] <pl> NBC gear with extra lead lined layers for liquidators
[20:54:07] <pl> selwyn: during normal operations you have basic lab coat and such plus shoe wrappers and a dosimeter
[20:54:07] <selwyn> ck_: oh dear lol
[20:54:09] <selwyn> sorry
[20:59:50] <gilberth> Good morning #lispcafe!
[21:00:04] <selwyn> good morning gilberth
[21:00:43] *** Joins: lisp123 (~lisp123@45.86.202.12)
[21:02:44] <gilberth> selwyn: There actually is a wedding on Saturday? I hope that it won't be an Omicron party.
[21:03:01] <selwyn> me too
[21:03:26] <selwyn> i was wondering if the govenment would cancel such things in time
[21:03:45] <pl> with R between 3 and 5, it will be an omicron part
[21:04:13] <selwyn> there is compulsory testing before attending and i won't take public transport
[21:04:34] <selwyn> but as pl says
[21:04:39] <gilberth> Oh dear, is the R that high already?
[21:04:50] <selwyn> according to the health secretary iirc
[21:04:56] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 245 seconds)
[21:05:13] <gilberth> Ok. We're doomed then.
[21:05:19] <selwyn> well
[21:05:56] <selwyn> remember that these are under contemporary british circumstances of nearly everything being open with minimal social distancing and mask wearing
[21:07:10] <selwyn> they can get it down if they try
[21:07:48] <pl> well, China (both chinas, even) and other countries shows it's doable
[21:08:00] <pl> disregarding NZ, they are the madagascar of long 2020
[21:08:09] <selwyn> hahaha
[21:08:34] <gilberth> Well, last time we here just followed your development. And in Germany 30% are still not fully vaccinated and most of those don't want to get vaccinated.
[21:08:39] <pl> to make it funnier, Taiwan literaly pulled memetic madagascar in 2020 but couldn't keep things as much shut down
[21:08:39] <selwyn> feel embarassed for not drawing that comparison during the last two years
[21:09:12] <pl> as in, a minister in Taiwan learnt of covid, or rather of covid symptoms in china, from online forum
[21:09:40] <pl> so it was "<someone sneezes in europe> <Madagascar orders all ports closed>" meme
[21:10:08] <selwyn> i wish i lived in an island state that could do that kind of thing
[21:11:13] <gilberth> In Saxony it's pretty bad already. And there is loud protest against any restrictions. The maps of Covid infections and voting results for the right wing match pretty well. I am not optimistic.
[21:11:51] <selwyn> age a controlling variable?
[21:12:43] <gilberth> For the situation in the east and south? No. It's not that we in the North are any younger than those in Saxony.
[21:13:10] <selwyn> ok
[21:13:16] <pl> selwyn: some of the biggest pro-epidemic idiots here aren't old at all
[21:13:24] <selwyn> i agree with that
[21:13:36] <pl> we should vaccinate like it's 1968
[21:13:46] <pl> but the ruling party is incapable of that
[21:13:59] <pl> especially due to internal group of MPs that are anti-vax
[21:15:50] <gilberth> selwyn: It's political. Damn right wing voters just protest and believe --- idk --- they could harm the government or whom ever? I never got what actually makes those that stupid and xenophobic. I really don't get it.
[21:16:06] <selwyn> i ask because there appears to be a correlation between brexit areas and covid deaths
[21:16:49] <selwyn> but i suspect it is down to deindustrialisation causing flight of young people and general ill health
[21:17:09] <pl> for reference - in 1968 in Poland, we beat WHO expectations on smallpox epidemic by, among other things, having a fine for not taking vaccine set at few months of wages, and if you refused vaccination again it was 5 years prison (and you'd get vaccinated anyway)
[21:17:37] <selwyn> i wonder why the commies were so good at public health
[21:18:00] <selwyn> i suppose it is just a matter of good logistics and a modest national mobilisation
[21:18:25] <gilberth> Anyhow. I have hope in our new government. The minister of health is an epidemiologist.
[21:18:33] <selwyn> hm
[21:19:18] <selwyn> i can't imagine living in a culture where most politicians actually have phds
[21:19:35] <selwyn> (or in this case medical degrees)
[21:19:41] <gilberth> Chancellor however is a person without an opinion and Alzheimer obviously.
[21:19:42] <pl> selwyn: they vacuumed up a lot of people with interest in uplifting, even if in reality it was rife with corruption
[21:19:57] <pl> selwyn: smallpox eradication was also proposed by Soviet Union, based on internal campaign
[21:21:09] <edgar-rft> I don't want to disappoint you but most medical doctors never wrote a doctoral thesis
[21:21:28] <selwyn> losers
[21:21:38] <selwyn> how dare they call themselves doctors
[21:21:47] <gilberth> And if they did that thesis is a joke compared to what it would take to write a thesis in physics, say.
[21:22:29] <pl> gilberth: depends. In Poland I sometimes encounter PhD MD staff
[21:22:37] <gilberth> You usually do your PhD as a doctor in medicine here in just about six month. Without any real research.
[21:22:38] <pl> (there are also PhD nurses)
[21:22:44] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: brb)
[21:22:50] <pl> gilberth: PhD and MD are separate
[21:22:54] <pl> even in UK, iirc
[21:23:02] <selwyn> i think so
[21:23:06] <pl> it's just a legacy thing that both are "doctors"
[21:23:18] <gilberth> pl: Here is the same. Or conflated.
[21:23:28] <pl> now, if you want to be in pinch, be a PhD in non-medical area... mistaken for MD
[21:23:51] <pl> heard story of aerodynamics specialist receiving a baby
[21:24:18] <gilberth> Medical doctors carry a full doctorate degree and title, yet their thesis is a joke and not any more difficult than a vanilla master thesis. If not easier.
[21:25:07] <selwyn> idk
[21:25:43] <selwyn> i think that being a medical doctor is by no means easy
[21:26:04] <gilberth> You just have to memorize a phone book.
[21:26:44] <selwyn> in both cases you have to study for ~10 years before you can make it
[21:27:36] <gilberth> You can do in way less than that. [I can only talk about Germany.]
[21:27:54] <selwyn> md or phd?
[21:28:18] <Gnuxie> bruh
[21:28:57] <gilberth> selwyn: There is no practical difference. Who wants to become an MD, makes his PhD in six month and about 50 pages.
[21:29:01] <edgar-rft> passing a medical exam and getting an approbation to be allowed to treat other people is not easy at all, that's not what I wanted to say, only to get a "doctor" title is very cheap for someone who already has passed the medical exam, at least in germany.
[21:29:10] <pl> gilberth: MD isn't a doctorate though
[21:29:39] <pl> even if it "descended" from doctorate
[21:30:06] <gilberth> pl: Again: 99% of those who become MDs, make their PhD here. In six month for a full academic doctoral title.
[21:30:15] <pl> (similarly, afaik traditionally you don't call surgeons "doctors" in britain, due to snobbish reasons from the time MDs were doctorates)
[21:30:27] <pl> gilberth: fun. Wonder how it shapes up with Bologna
[21:31:11] <gilberth> [As edgar-rft said.]
[21:31:50] <gilberth> pl: Wouldn't that make things even worse? Isn't Bologna part of the education inflation?
[21:32:51] <gilberth> Like for the olde German "Diplom" you needed to do a bit more than for the new master's degree.
[21:33:44] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:34:33] <gilberth> And Abitur, which you need to do before hitting university, also is shorter and easier these days.
[21:36:44] <pl> gilberth: having a lecturer in family, no, it's less due to Bologna and more due to universities pushing for lower standards
[21:38:27] <pl> What Bologna did was make the Bachelor's degree common, which caused considerable change, but it also means that Master's degree are getting rarer and start requiring more
[21:38:37] <pl> which is offset by WAAAAY more students
[21:38:38] <gilberth> And officially so. For the school, that is Abitur (like high school degree just before hitting the uni), they adjusted the standards for grades, So that what is a "1" (A) now formerly was a "2" (B) and so on.
[21:39:31] <pl> well, in Poland the only grade change was expanding the grades from 2-5 to 1-6, which IMO worked quite well
[21:39:41] <pl> the other dumbing down is from completely different reasons
[21:42:14] <selwyn> they tried to reverse dumbing down here and it was a big failure afaict
[21:42:19] <selwyn> so be careful what you wish for
[21:42:57] <gilberth> Indeed. These days around more than 50% of the young begin to study at the university. In the 90s, when I hit the uni, it was less than half that.
[21:43:18] *** Joins: lisp123 (~lisp123@45.86.202.12)
[21:43:35] <pl> One of my professors asserted that a lot of changes in how hard a topic was, was dictated by how many passed
[21:43:55] <pl> as in, they would be suggested to lower the complexity if not enough passed
[21:44:19] <gilberth> This development results into that my company cannot find any employees.
[21:44:42] <kuao> https://log4jmemes.com
[21:44:51] <kuao> ^^
[21:45:41] <pl> gilberth: someone on the net suggested recruiting for niche enough things you avoid hordes of lowest 20%
[21:45:51] *** Joins: Catie (~user@user/catie)
[21:45:53] <pl> for example, by using Lisp at the company
[21:45:59] <pl> (or OCaml, like Jane's Street)
[21:46:45] <gilberth> pl: My company does electrical installations, solar panel installations, fiber networks and such. Lisp doesn't help there.
[21:47:33] <pl> haha
[21:48:04] <gilberth> Would I ever found an software business, I'd use Lisp for the added productivity and recruit in the thing called internet.
[21:48:08] <pl> gilberth: solar panel installers are among the worst spammers in Poland
[21:48:23] <gilberth> Spammers?
[21:48:51] *** Joins: christophergray (~christoph@186.151.84.137)
[21:49:00] <selwyn> i gather that log4j has some vulnerabilities
[21:49:37] <gilberth> selwyn: Yes, It would parse a special kind of URL and load Java objects from there and somehow execute them.
[21:50:30] *** Quits: christophergray (~christoph@186.151.84.137) (Client Quit)
[21:50:31] <selwyn> https://dl.airtable.com/.attachments/60c0ed8bc50050d1a1200ca72e98099c/5b732839/nuhDFFb.jpeg
[21:50:37] <pl> gilberth: spammers. Phone spammers, even
[21:50:54] <gilberth> That is: It parses what it should log. This logging could happen anywhere. It could be suffice to drop that URL anywhere. Logs then processed elsewhere and perhaps way later.
[21:52:00] <pl> there was a somewhat good reason for it to parse the log, the devil of course was in the details
[21:52:10] <gilberth> pl: lol. Well, if somebody spams here it is the customers, we don't need any advertising.
[21:53:04] <pl> gilberth: at this point if I have inkling it's a solar panel installer, I try to speed through their spiel by asking if they are one, then telling them I can't install panels anyway, I live in a flat
[21:53:08] <gilberth> We could hire new personel by the pound. If there would be any.
[21:54:08] <gilberth> pl: Well, technically you could, it would however be pointless to convert artificial light into electricity. :-p
[21:55:00] *** Quits: lisp123 (~lisp123@45.86.202.12) (Remote host closed the connection)
[21:56:00] <gilberth> And it was not our business initially, but customers kept asking for solar panels. And so called "wall boxes" to charge your electrical vehicle.
[21:59:22] *** Quits: treflip (~user@user/treflip) (Quit: good night ✨)
[22:51:21] <clothespin_> gilberth: what other channels are you on?  Or what other channels have you heard are good relating to lisp besides the usual suspects #lisp?
[22:54:28] <clothespin_> I'd really like to find some CAD channels but they're all usually tied to some proprietary system
[22:56:14] *** Joins: lisp123 (~lisp123@45.86.202.12)
[22:56:26] * pl gets triggered by the mention of CAD, starts thinking again why all the nice shape-modeling CADs don't have AutoCAD-style CLI
[22:57:16] <clothespin_> you know, I thought the same thing, but then I started writing an app and neglected to include one
[22:57:35] <clothespin_> of course in my app you have the lisp listener
[22:58:01] <pl> welp. I'll have to simply trudge through the NX UI till I get how to use it faster
[22:58:30] <clothespin_> I'm sure it has some scripting interface
[22:59:03] <clothespin_> python or something
[22:59:24] <clothespin_> what do you do with NX?
[23:01:09] <pl> clothespin_: first thing I'm trying? I'm building model of my flat...
[23:01:15] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 256 seconds)
[23:01:28] <pl> wanted to go all parameterized
[23:01:52] <clothespin_> i hear ya
[23:02:14] <selwyn> you can put solar panels in it at last
[23:02:28] <clothespin_> the word "parameterized" has evolved to mean many things though
[23:03:16] <clothespin_> I release a CLOS-based parametric oo kernel the other day: github.com/awolven/adhoc
[23:03:23] <pl> clothespin_: well, the reason was that I was going to experiment with some stuff, this need is no longer current because we did the design old-fashioned way
[23:03:38] <clothespin_> i c
[23:04:19] <clothespin_> when you are on the firstest iterations of design parametric may be more of a hinderance
[23:04:47] <clothespin_> unless you know it well of course
[23:05:58] <clothespin_> isn't seimens expensive?
[23:07:12] <pl> let's disregard the last part
[23:07:29] <pl> my choice of NX was actually because there's reasonably recent version that was available for linux
[23:09:22] <GreaseMonkey> i consider myself a bare metal programmer. NX means "no-execute".
[23:17:30] <clothespin_> gilberth must be sleeping
[23:43:00] <clothespin_> pl: are there any other channels for this kind of discussion?
[23:44:03] <pl> clothespin_: no idea
[23:44:51] <Catie> I've been looking for CAD channels for a while, I haven't really found a general-purpose one
[23:46:03] <selwyn> pl: how do you line protective gear with lead anyway? medieval style plate armour?
[23:46:11] <clothespin_> yeah, that's my experience too
[23:47:16] <pl> selwyn: plates, woven lead wire, lead-plating surfaces, etc.
[23:47:37] <selwyn> lead wire cool
[23:48:04] <pl> it doesn't have to be solid lead, just generate a tight enough mesh to reduce penetration rate by gamma and neutron radiation
[23:48:31] <pl> (this is also why lead is used at all - density combined with availability)
[23:49:34] <selwyn> in school they give the impression that lead has magical anti radiation properties
[23:49:34] <pl> density means you increase the chances of collision between the photon/neutron and the shielding material
[23:50:10] <pl> selwyn: it depends how deep your schooling goes into physics/chemistry and whether you notice the property yourself
[23:50:56] <pl> my middle school we got all the way to quantum chemistry, physics went a bit less good, but then by middle school I had enough basic idea for a nuke :P
[23:51:29] <selwyn> quantum chemistry in middle school?
[23:51:31] <selwyn> damn
[23:52:32] <pl> quantum chemistry used to be high school material in Poland, my class in middle school was experimental in putting a lot more physics, math and chemistry hours in first few years and we had few people very good at chemistry
[23:53:10] <selwyn> hard to understand how to teach it to high schoolers
[23:53:18] <pl> so by the last year of middle school some of us branched into high school textbooks and more about quantum chemistry (though I think basics were covered for everyone)
[23:53:44] <pl> dunno why, fundamentals of quantum chemistry, the stuff that makes the most early impact, are pretty simple
[23:54:19] <pl> pauli exclusion principle, electron "cloud" (i.e. probability of electron being there), how it forms into orbitals
[23:54:45] <selwyn> can you introduce the wavefunction without significant mathematical machinery though
[23:55:05] <pl> IIRC yes
[23:55:25] <pl> you do not need full mathematical workup of it to start dealing with quantum chemistry
[23:55:32] <selwyn> fair enough
[23:56:46] <pl> being able to manually math the orbitals into graph isn't really that necessary till you're trying to simulate them
[23:57:05] <pl> and you're not going that deep in high school
[23:57:28] <pl> (of course, clasp means it becomes more available)
[23:57:45] *** Joins: lisp123 (~lisp123@45.86.202.12)
[23:58:22] <selwyn> am reminded that i could do with a better knowledge of quantum chemistry
[23:59:19] <selwyn> there are a lot of exciting quantum algorithms to do chemistry but its hard for me to weigh up how revolutionary they are
