[00:03:04] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 244 seconds)
[00:04:30] *** Quits: pulse_ (~pulse@user/pulse) (Read error: Connection reset by peer)
[00:05:01] *** Quits: jrm (~jrm@156.34.187.65) (Ping timeout: 265 seconds)
[00:05:06] *** Joins: pulse (~pulse@user/pulse)
[00:08:03] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[00:08:27] *** Quits: average (uid473595@user/average) (Quit: Connection closed for inactivity)
[00:11:02] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (Ping timeout: 272 seconds)
[00:12:08] *** Joins: caveman_ (~caveman@gateway/tor-sasl/caveman)
[00:12:51] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[00:15:28] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[00:15:49] *** caveman_ is now known as cvmn
[00:15:51] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[00:17:18] *** Joins: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net)
[00:28:47] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[00:38:28] *** Joins: Guest70 (~Guest70@76.115.217.183)
[00:43:48] *** Joins: rahl- (~rahl@102.114.64.47)
[00:44:47] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:986e:1643:d9e5:868d)
[00:44:47] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:986e:1643:d9e5:868d) (Changing host)
[00:44:47] *** Joins: skapata (~Skapata@user/skapata)
[00:46:35] *** Quits: rahl (~rahl@102.114.50.133) (Ping timeout: 265 seconds)
[00:51:23] *** Quits: Guest9 (~Guest9@43.250.157.202) (Quit: Connection closed)
[00:52:26] *** Joins: mthall (~quassel@2a01:4f9:4a:2f4d:ecb0:6aff:fed2:c9a1)
[00:53:14] *** Joins: Dotz0cat_ (~Dotz0cat@h210.234.186.173.dynamic.ip.windstream.net)
[00:53:41] *** Quits: Dotz0cat (~Dotz0cat@h225.173.40.162.dynamic.ip.windstream.net) (Ping timeout: 258 seconds)
[00:55:44] *** Joins: Dotz0cat (~Dotz0cat@h186.236.31.71.dynamic.ip.windstream.net)
[00:57:25] *** Joins: jrm (~jrm@156.34.187.65)
[00:57:42] *** Quits: Dotz0cat_ (~Dotz0cat@h210.234.186.173.dynamic.ip.windstream.net) (Ping timeout: 265 seconds)
[01:06:13] *** Quits: furrymcgee (~devuan@31.179.186.66) (Quit: leaving)
[01:08:27] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 276 seconds)
[01:11:29] *** Joins: momomo (~momomo@user/momomo)
[01:12:04] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:986e:1643:d9e5:868d)
[01:12:05] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:986e:1643:d9e5:868d) (Changing host)
[01:12:05] *** Joins: skapata (~Skapata@user/skapata)
[01:23:28] *** Joins: hbautista (~hbautista@187.171.99.178)
[01:26:20] *** Quits: leotaku (~leotaku@046075079231.atmpu0011.highway.a1.net) (Quit: ZNC 1.8.2 - https://znc.in)
[01:48:35] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[01:48:40] *** Joins: birkoff (birkoff@birkoff.thunderirc.net)
[01:49:04] *** birkoff is now known as Guest6611
[01:51:10] *** Quits: kobaz_ (~kobaz@cpe-74-67-47-183.nycap.res.rr.com) (Ping timeout: 272 seconds)
[01:54:32] *** Joins: Samian (~Sami@2620:10d:c091:480::1:ea67)
[02:01:46] *** Quits: natrys (~natrys@user/natrys) (Quit: natrys)
[02:13:10] *** Joins: blahboybaz (~blahboyba@c-67-183-225-44.hsd1.wa.comcast.net)
[02:35:40] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[02:43:30] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[02:44:09] *** Quits: Thanatermesis (~Thanaterm@191.92.148.122) (Quit: ɯlɐɔ uı ʞɹoʍ oʇ ƃuıoƃ)
[02:48:58] *** Quits: Narrat (~omnius@p200300df5f45d8d906ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:49:19] *** Quits: bremner (~bremner@notmuch/developer/bremner) (Remote host closed the connection)
[02:51:27] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:58:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:496c:4f7:da8b:7ffb) (Remote host closed the connection)
[03:00:30] *** Joins: ferdna (~ferdna@user/ferdna)
[03:01:11] *** Quits: charly (~charly@2a01cb040a52f90000000000abac0043.ipv6.abo.wanadoo.fr) (Quit: Reconnecting)
[03:01:23] *** Joins: charly (~charly@2a01cb040a52f90000000000abac0043.ipv6.abo.wanadoo.fr)
[03:02:09] *** Joins: Null_A (~null_a@2601:645:8700:2290:65e7:3752:1a41:1950)
[03:06:28] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[03:12:26] *** Quits: charly (~charly@2a01cb040a52f90000000000abac0043.ipv6.abo.wanadoo.fr) (Quit: leaving)
[03:12:50] *** Joins: bremner (~bremner@notmuch/developer/bremner)
[03:18:12] *** Joins: charly (~charly@2a01cb040a52f90000000000abac0043.ipv6.abo.wanadoo.fr)
[03:19:50] *** Quits: rahl- (~rahl@102.114.64.47) (Ping timeout: 272 seconds)
[03:23:00] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[03:30:32] *** Quits: blahboybaz (~blahboyba@c-67-183-225-44.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[03:35:03] *** Quits: Guest16 (~textual@178.239.165.90) (Ping timeout: 252 seconds)
[04:02:23] *** Quits: Null_A (~null_a@2601:645:8700:2290:65e7:3752:1a41:1950) (Remote host closed the connection)
[04:05:25] *** Joins: Null_A (~null_a@2601:645:8700:2290:9c43:41fd:2bc5:221e)
[04:07:22] *** Joins: igemnace (~ian@user/igemnace)
[04:17:42] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: switching pcs..  bbl in 15 min.  sry)
[04:21:44] *** Joins: twinsignal (~twinsigna@68.235.43.20)
[04:24:31] *** Quits: twinsignal (~twinsigna@68.235.43.20) (Client Quit)
[04:38:11] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[04:42:14] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[04:43:22] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[04:53:25] *** Quits: m0viefreak (~asdf@user/m0viefreak) (Remote host closed the connection)
[05:00:11] *** Joins: adlternative (~adl@117.32.216.12)
[05:13:28] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[05:14:41] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[05:20:39] *** Joins: hmmmas (~fidnc@183.217.200.220)
[05:21:08] *** Quits: hmmmas (~fidnc@183.217.200.220) (Client Quit)
[05:29:35] *** Quits: Null_A (~null_a@2601:645:8700:2290:9c43:41fd:2bc5:221e) (Remote host closed the connection)
[05:38:23] *** Joins: gnoo (~gnoo@user/gnoo)
[05:40:10] *** Joins: jaggz (~jaggz@user/jaggz)
[05:43:26] *** Joins: Null_A (~null_a@2601:645:8700:2290:694b:df7:8cc3:57c0)
[05:44:20] *** Joins: physikoi (~physikoi@user/physikoi)
[05:46:57] *** Quits: christall (~christall@24.235.88.243) (Read error: Connection reset by peer)
[05:47:09] *** Joins: christall (~christall@24.235.88.243)
[05:48:05] *** Joins: PaMeDa (~apauli@dynamic-095-116-086-117.95.116.pool.telefonica.de)
[05:49:14] *** Quits: apauli (~apauli@dynamic-077-010-017-176.77.10.pool.telefonica.de) (Ping timeout: 258 seconds)
[05:52:11] *** Parts: physikoi (~physikoi@user/physikoi) ()
[06:10:38] *** Parts: foureyes (foureyes@brought.to.you.by.bnc4free.com) ()
[06:22:18] *** Joins: keypushe- (keypusher@user/keypusher)
[06:22:59] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 265 seconds)
[06:25:32] *** keypushe- is now known as keypusher
[06:27:59] *** Joins: zebrag (~chris@user/zebrag)
[06:39:52] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 244 seconds)
[06:40:08] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[06:41:31] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[06:50:35] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:50:35] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (sodium.libera.chat (Nickname regained by services)))
[06:50:35] *** finn_elija is now known as FinnElija
[07:08:50] *** Quits: pizdets (~pizdets@183.182.115.135) (Ping timeout: 245 seconds)
[07:08:56] *** Joins: pizdets_ (~pizdets@183.182.111.75)
[07:26:21] *** Joins: hmmmas (~fidnc@183.217.200.220)
[07:43:56] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[07:45:38] *** Quits: ham (~ham4@user/ham) (Ping timeout: 265 seconds)
[07:46:05] *** Joins: ham2 (~ham4@d8D8627D5.access.telenet.be)
[07:46:42] *** Joins: Xatenev (~xatenev@2a02:8108:963f:9cb8:4ee2:e2cd:a289:5e8)
[07:46:49] *** Quits: Xatenev (~xatenev@2a02:8108:963f:9cb8:4ee2:e2cd:a289:5e8) (Changing host)
[07:46:49] *** Joins: Xatenev (~xatenev@user/xatenev)
[07:46:54] *** Parts: Xatenev (~xatenev@user/xatenev) ()
[07:58:36] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:59:22] *** Joins: apauli (~apauli@dynamic-077-001-076-008.77.1.pool.telefonica.de)
[08:00:35] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:00:51] *** Joins: saroy (~sanroy@43.252.250.101)
[08:02:24] *** Quits: PaMeDa (~apauli@dynamic-095-116-086-117.95.116.pool.telefonica.de) (Ping timeout: 256 seconds)
[08:04:50] *** Joins: thiago (~thiago@2601:1c0:4501:635c:aa0c:a33:938:ca7f)
[08:05:31] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[08:08:47] *** Quits: cdown (~cdown@89.32.122.5) (Quit: Lost terminal)
[08:10:18] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[08:12:55] *** Joins: thiago_ (~thiago@c-73-11-93-254.hsd1.or.comcast.net)
[08:13:04] *** Quits: thiago_ (~thiago@c-73-11-93-254.hsd1.or.comcast.net) (Client Quit)
[08:22:34] *** Joins: amosbird (~amosbird@13.75.119.182)
[08:23:44] *** Quits: thiago (~thiago@2601:1c0:4501:635c:aa0c:a33:938:ca7f) (Quit: Lost terminal)
[08:34:31] *** Joins: thiago (~thiago@2601:1c0:4501:635c:42f7:6816:d317:e922)
[08:35:29] *** Joins: vicfred (~vicfred@user/vicfred)
[08:35:51] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[08:39:52] *** Quits: Null_A (~null_a@2601:645:8700:2290:694b:df7:8cc3:57c0) (Read error: Connection reset by peer)
[08:40:56] *** Quits: adamts (~Adam@user/mysteryblokhed) (Ping timeout: 272 seconds)
[08:49:48] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[08:52:08] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 244 seconds)
[08:55:00] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:04:08] *** Quits: thekingofbandit1 (thekingofb@thunix.net) (Remote host closed the connection)
[09:05:05] *** Quits: subopt (~subopt@2603-8081-2302-459a-552b-60b3-0242-52a7.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:08:18] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[09:08:20] *** Joins: thekingofbandit (thekingofb@user/thekingofbandit)
[09:12:41] *** Joins: PaMeDa (~apauli@dynamic-095-112-080-098.95.112.pool.telefonica.de)
[09:13:51] *** Quits: apauli (~apauli@dynamic-077-001-076-008.77.1.pool.telefonica.de) (Ping timeout: 252 seconds)
[09:19:34] *** Quits: thiago (~thiago@2601:1c0:4501:635c:42f7:6816:d317:e922) (Ping timeout: 272 seconds)
[09:20:24] *** Joins: jazzy (~jaziz@2600:380:c145:1176:ccc4:f85a:7d87:128)
[09:20:34] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[09:24:02] *** Quits: hgl- (hgl@67.230.181.248.16clouds.com) (Quit: Bye)
[09:24:47] *** Joins: hgl (hgl@67.230.181.248.16clouds.com)
[09:26:33] *** Joins: nwoob (~apple@103.135.38.126)
[09:27:03] <nwoob> I have a branch named as "CS1-T1161-Move-Garmin-Statistics-Pace-(DEV)" without quotes
[09:27:49] <nwoob> when I checkout to it I am moved to a detached head with commit sha, instead of branch. COuld someone please explain to me why that happens
[09:33:15] *** Quits: hmmmas (~fidnc@183.217.200.220) (Quit: Leaving.)
[09:34:21] <nwoob> ok, I got it i added origin/branch-name. that's why
[09:38:45] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[09:40:01] *** Joins: apauli (~apauli@dynamic-095-112-014-190.95.112.pool.telefonica.de)
[09:41:00] *** Quits: PaMeDa (~apauli@dynamic-095-112-080-098.95.112.pool.telefonica.de) (Ping timeout: 256 seconds)
[09:44:12] *** Quits: nwoob (~apple@103.135.38.126) (Ping timeout: 272 seconds)
[09:44:42] *** Joins: thiago (~thiago@2601:1c0:4501:635c:42f7:6816:d317:e922)
[09:49:32] *** Joins: JanC_ (~janc@user/janc)
[09:50:16] *** Joins: Guest7058 (~Guest70@118.137.15.136)
[09:51:30] *** Quits: thiago (~thiago@2601:1c0:4501:635c:42f7:6816:d317:e922) (Ping timeout: 240 seconds)
[09:51:42] *** Quits: JanC (~janc@user/janc) (Ping timeout: 276 seconds)
[09:51:51] *** JanC_ is now known as JanC
[09:54:04] *** Joins: nwoob (~apple@103.135.38.126)
[09:54:49] <Guest7058> Hello, I'd like to ask ,What's the best way to learn git for the first time?
[09:56:25] *** Guest7058 is now known as nndwn
[09:57:50] *** Joins: PaMeDa (~apauli@dynamic-095-116-023-191.95.116.pool.telefonica.de)
[09:59:12] <ikke> !book
[09:59:13] <gitinfo> There are several good books available about git; 'Pro Git' is probably the best: http://git-scm.com/book but also look at !bottomup !cs !gcs !designers !gitt !vcbe and !parable
[09:59:31] *** Quits: apauli (~apauli@dynamic-095-112-014-190.95.112.pool.telefonica.de) (Ping timeout: 265 seconds)
[10:02:25] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 265 seconds)
[10:03:59] <nndwn> haha i dont know this ebook is free , thanks
[10:06:28] *** Quits: nndwn (~Guest70@118.137.15.136) (Quit: Client closed)
[10:08:09] <ikke> .trigger_edit book There are several good books available about git; 'Pro Git' is probably the best: https://git-scm.com/book but also look at !bottomup !cs !gcs !designers !gitt !vcbe and !parable
[10:08:10] <gitinfo> ikke: Okay.
[10:10:13] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[10:10:33] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 276 seconds)
[10:11:58] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:14:12] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:15:16] *** Quits: PaMeDa (~apauli@dynamic-095-116-023-191.95.116.pool.telefonica.de) (Ping timeout: 258 seconds)
[10:17:08] *** Joins: PaMeDa (~apauli@dynamic-077-003-212-032.77.3.pool.telefonica.de)
[10:19:28] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:24:24] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:27:50] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[10:29:27] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[10:30:30] *** Quits: hbautista (~hbautista@187.171.99.178) (Ping timeout: 272 seconds)
[10:33:02] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[10:33:58] *** Joins: mike (~mike@116.204.144.25)
[10:34:11] *** Joins: gnooooo (~gnoo@user/gnoo)
[10:34:23] *** mike is now known as Guest1512
[10:35:59] *** Quits: gnoo (~gnoo@user/gnoo) (Ping timeout: 244 seconds)
[10:38:42] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[10:49:49] *** Quits: nasamuffin (~nasamuffi@27.179.83.34.bc.googleusercontent.com) (Quit: WeeChat 3.0)
[10:50:09] *** Quits: pcarphin (~pcarphin@modemcable058.54-202-24.mc.videotron.ca) (Ping timeout: 258 seconds)
[10:52:19] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:52:21] *** Joins: palasso (~palasso@user/palasso)
[10:53:01] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[10:53:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[10:53:34] *** Lord_of_Life_ is now known as Lord_of_Life
[10:55:32] *** Joins: filePeter (~filePeter@user/filepeter)
[11:00:13] *** Joins: pcarphin (~pcarphin@modemcable058.54-202-24.mc.videotron.ca)
[11:03:19] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (Ping timeout: 265 seconds)
[11:18:31] *** Joins: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net)
[11:25:19] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:31:33] *** Joins: sysh (~sysh@212.237.182.120)
[11:33:25] *** Joins: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr)
[11:34:32] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[11:34:50] *** Quits: unluckyshrubbery (~unluckysh@097-069-164-025.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[11:35:23] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[11:37:18] *** Quits: nwoob (~apple@103.135.38.126) (Ping timeout: 258 seconds)
[11:44:45] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[11:45:26] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:46:28] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:52:06] *** Quits: hgl (hgl@67.230.181.248.16clouds.com) (Quit: Bye)
[11:52:19] *** Joins: hgl (hgl@67.230.181.248.16clouds.com)
[11:57:54] *** Quits: pcarphin (~pcarphin@modemcable058.54-202-24.mc.videotron.ca) (Read error: Connection reset by peer)
[11:58:00] *** Joins: pcarphin1 (~pcarphin@modemcable058.54-202-24.mc.videotron.ca)
[11:58:27] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[12:00:26] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 272 seconds)
[12:06:33] *** Joins: theoceaniscool (~theoceani@119.12.233.178)
[12:08:50] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:09:51] *** Quits: saroy (~sanroy@43.252.250.101) (Ping timeout: 252 seconds)
[12:10:10] *** Joins: saroy (~sanroy@202.142.80.239)
[12:13:21] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[12:17:03] *** Joins: randomuser (~randomuse@user/randomuser)
[12:18:52] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[12:21:23] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[12:22:18] *** Quits: randomuser (~randomuse@user/randomuser) (Ping timeout: 240 seconds)
[12:23:10] *** Quits: saroy (~sanroy@202.142.80.239) (Quit: Leaving)
[12:27:06] *** Quits: lessless (~lessless@ip.82.144.211.11.stat.volia.net) (Ping timeout: 240 seconds)
[12:28:09] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:28:47] *** Joins: lessless (~lessless@ip.82.144.211.11.stat.volia.net)
[12:35:45] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:39:00] *** Quits: theoceaniscool (~theoceani@119.12.233.178) (Ping timeout: 272 seconds)
[12:42:59] *** Quits: Samian (~Sami@2620:10d:c091:480::1:ea67) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:45:21] *** Joins: ykrons (~guillaume@62.192.23.101)
[12:45:32] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[12:47:27] *** Joins: zeenk (~zeenk@2a02:2f04:a211:a800:553b:3cb0:5ea1:7e83)
[12:47:55] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[12:48:50] *** Joins: BenjiProd (~BenjiProd@2a01:e34:ec5f:5f60:9653:30ff:fe3c:9be0)
[12:49:36] *** Joins: saroy (~sanroy@43.252.250.97)
[12:49:59] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 250 seconds)
[12:50:47] *** another| is now known as another
[12:50:52] *** another is now known as another|
[12:51:14] *** Joins: randomuser (~randomuse@user/randomuser)
[12:51:29] *** Joins: theoceaniscool (~theoceani@119.12.233.178)
[12:52:34] *** Quits: Guest6611 (birkoff@birkoff.thunderirc.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:52:35] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[12:52:38] *** Joins: nwoob (~apple@103.135.38.126)
[12:52:57] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[12:53:08] *** Joins: Vonter (~Vonter@user/vonter)
[12:55:57] *** Quits: keypusher (keypusher@user/keypusher) (Remote host closed the connection)
[12:56:27] *** Quits: randomuser (~randomuse@user/randomuser) (Remote host closed the connection)
[12:56:45] *** Joins: randomuser (~randomuse@user/randomuser)
[12:58:36] *** Joins: keypusher (keypusher@user/keypusher)
[12:59:36] *** Joins: rahl (~rahl@102.114.64.47)
[12:59:36] *** Quits: chmark96 (~chmark@174.118.239.35.bc.googleusercontent.com) (Read error: Connection reset by peer)
[12:59:51] *** Joins: chmark96 (~chmark@174.118.239.35.bc.googleusercontent.com)
[13:00:39] *** Quits: gnooooo (~gnoo@user/gnoo) (Ping timeout: 244 seconds)
[13:00:43] *** Quits: rahl (~rahl@102.114.64.47) (Remote host closed the connection)
[13:02:32] *** Quits: chmark96 (~chmark@174.118.239.35.bc.googleusercontent.com) (Client Quit)
[13:02:58] *** Joins: birkoff (birkoff@birkoff.thunderirc.net)
[13:02:58] *** Quits: birkoff (birkoff@birkoff.thunderirc.net) (Changing host)
[13:02:58] *** Joins: birkoff (birkoff@user/birkoff)
[13:03:40] *** Joins: AnapodoPsalidaki (~AnapodoPs@2a02:587:2910:6a35:2527:c7c:b1d8:2d5e)
[13:06:07] <Helmholtz> How to gitignore all png except those which exist withing every `data/` dir?
[13:06:58] <ikke> Does *.png; !data/*.png work?
[13:06:59] <gitinfo> [!database_schema] Changing database schemas is a very complicated topic. Some reading: http://thedailywtf.com/Articles/Database-Changes-Done-Right.aspx
[13:07:11] *** Quits: madewokherd (~urk@65-128-171-161.mpls.qwest.net) (Read error: Connection reset by peer)
[13:07:14] <ikke> ignore gitinfo here
[13:09:00] *** Joins: gnooooo (~gnoo@user/gnoo)
[13:09:08] <Helmholtz> ikke, thanks
[13:09:27] <Helmholtz> that ; is insignificant right? I can just use 2 lines?
[13:09:39] <ikke> yes
[13:09:52] <ikke> It's just a way of me specifying 2 rules in a single line here
[13:12:00] *** Quits: randomuser (~randomuse@user/randomuser) (Ping timeout: 272 seconds)
[13:13:34] *** Quits: gnooooo (~gnoo@user/gnoo) (Ping timeout: 244 seconds)
[13:17:39] <ash_worksi> I thought I solved this question but I realized I did not
[13:18:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[13:18:40] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:19:07] <ash_worksi> so I was thinking, I might have a backend project where a dev messes around and wants to create it his own changes to the database; I figure they can commit their local migrations to their branch and then a dba can pull it and check it out and make an offical migration
[13:19:28] <ash_worksi> what I'd like though is for projects to have an up-to-date schema for their dev databases
[13:19:51] <ash_worksi> and I thought "oh well, the dba needs access to the project to begin with, so the can just dump the files in there and commit the project
[13:20:32] <ash_worksi> but then I realized, "oh, but if you have multiple projects (microservices) using the database, then the dba would have to commit the files to each project"
[13:21:37] <ash_worksi> I know this could be solved with a database-per-service, but right now, that's not feasible. Can I have a repo inside a repo where a dev can pull the latest changes to the database?
[13:22:24] <geirha> !submodule
[13:22:24] <gitinfo> git-submodule is ideal to add subsidiary git repositories to a git superproject when you do not control the subprojects or more specifically wish to fix the subproject at a specific revision even as the subproject changes upstream. See http://www.git-scm.com/book/en/Git-Tools-Submodules
[13:23:28] *** Quits: avu (~jan@user/avu) (Quit: avu)
[13:23:55] <ash_worksi> at the moment, the docker setup per project houses the microservice "app" in it's own directory (so for 'flipr' like flipr/app/src, flipr/app/Dockerfile, etc...) and each "fake" infrasture service in it's own directory (flipr/db/docker-entrypoint-initdb.d/schema.sql)
[13:24:24] <ash_worksi> thanks geirha
[13:24:59] *** Joins: avu (~jan@user/avu)
[13:26:58] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:30:44] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 265 seconds)
[13:33:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[13:34:10] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:34:48] *** Joins: gnoo (~gnoo@user/gnoo)
[13:35:00] *** Joins: unluckyshrubbery (~unluckysh@097-069-164-025.res.spectrum.com)
[13:36:49] *** Joins: randomuser (~randomuse@user/randomuser)
[13:40:31] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[13:43:56] *** Joins: natrys (~natrys@user/natrys)
[13:45:52] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Remote host closed the connection)
[13:47:19] *** Quits: tejr (~tejr@user/tejr) (Quit: reboot)
[13:50:15] *** Quits: gnoo (~gnoo@user/gnoo) (Ping timeout: 244 seconds)
[13:50:15] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 244 seconds)
[13:50:57] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[13:51:00] *** Joins: gnoo (~gnoo@user/gnoo)
[13:52:09] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[13:57:44] *** Joins: mbalmer (~mbalmer@2001:67c:1090:5073:21d7:a521:a564:1c62)
[14:00:08] *** Quits: randomuser (~randomuse@user/randomuser) (Ping timeout: 272 seconds)
[14:00:40] *** Joins: securethemews (~securethe@2a00:23c4:1e9b:2f00::1)
[14:01:31] *** Joins: tejr (~tejr@user/tejr)
[14:04:01] *** Joins: randomuser (~randomuse@user/randomuser)
[14:12:12] *** Quits: randomuser (~randomuse@user/randomuser) (Ping timeout: 245 seconds)
[14:15:34] *** Quits: gnoo (~gnoo@user/gnoo) (Remote host closed the connection)
[14:21:36] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[14:26:10] *** Quits: extor (~xtor@192.99.217.240) (Ping timeout: 240 seconds)
[14:41:19] *** Quits: jmft2 (~JMFT@82.3.54.26) (Killed (NickServ (GHOST command used by jmft2_)))
[14:41:41] *** Joins: jmft2 (~JMFT@82.3.54.26)
[14:41:46] *** Quits: jmft2 (~JMFT@82.3.54.26) (Killed (NickServ (GHOST command used by jmft2_)))
[14:45:59] *** Parts: nwoob (~apple@103.135.38.126) ()
[14:50:54] *** Quits: BenjiProd (~BenjiProd@2a01:e34:ec5f:5f60:9653:30ff:fe3c:9be0) (Changing host)
[14:50:54] *** Joins: BenjiProd (~BenjiProd@user/benjiprod)
[14:51:14] *** Joins: extor (~xtor@192.99.217.240)
[14:59:30] *** Joins: Wuzzy (~Wuzzy@p5b0dfff7.dip0.t-ipconnect.de)
[15:03:46] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:05:13] *** Quits: Guest70 (~Guest70@76.115.217.183) (Quit: Client closed)
[15:16:53] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[15:19:20] *** Joins: pulse (~pulse@user/pulse)
[15:20:59] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[15:22:17] *** Joins: manveru (sid26204@user/manveru)
[15:25:49] <manveru> hi folks, i'm trying to figure out a good way to fix a race condition for `git init` when two or more inits for the same directory run at the same time, copying the templates will fail because it already exists
[15:26:34] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[15:27:30] <manveru> i guess i'll have to work around that myself using flock or the like, or is there some hidden option in git that makes this just work? :)
[15:28:04] <geirha> mkdir could also serve as a lock.   mkdir repo && git init repo
[15:28:39] <geirha> if dir already exists, mkdir fails and it won't attempt git init
[15:30:22] *** Quits: adlternative (~adl@117.32.216.12) (Ping timeout: 258 seconds)
[15:30:36] <manveru> hmm, i guess that'd be a bit more cross-platform that flock, yeah
[15:31:34] <Gurkenglas> Is there a way to annotate two branches as being different by merely a refactoring, which should have the meaning that they "have the same behavior" and merging any branch onto both should preserve this?
[15:35:55] <osse> there's no way to annotate tags at all beside their names
[15:36:13] <osse> annoate branches I mean
[15:38:34] <Helmholtz> Can I ask a github question? Can I watch a repo for new commits?
[15:42:39] <securethemews> Helmholtz, you can use the RSS feed i think
[15:45:35] <securethemews> https://github.com/<user>/<repo>/commits/<branch>.atom
[15:51:50] <Helmholtz> securethemews, thanks.
[15:52:54] *** Quits: srinidhi (~srinidhi@49.206.4.186) (Remote host closed the connection)
[16:02:01] *** Joins: darkbit (~db@152.32.99.67)
[16:02:14] <osse> nesmysl: what's your usecase for renaming the remote?
[16:02:34] <osse> I just removed the artificial cosntraint and now all of a sudden I have to justify it
[16:05:06] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[16:10:50] *** Quits: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr) (Read error: Connection reset by peer)
[16:16:17] *** Joins: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr)
[16:18:08] *** Quits: saroy (~sanroy@43.252.250.97) (Quit: Leaving)
[16:20:22] *** Joins: varaindemian (~varaindem@86.124.78.162)
[16:24:32] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 272 seconds)
[16:24:45] <jast> osse: it's basically a clone of git://git.kernel.org/pub/scm/git/git-htmldocs.git
[16:29:35] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[16:30:04] *** Quits: shailangsa (~shailangs@host86-186-196-233.range86-186.btcentralplus.com) (Ping timeout: 268 seconds)
[16:31:23] *** Joins: roadie (~user@2a02:8108:ec0:1427:288d:5490:8814:e094)
[16:45:57] *** Joins: shailangsa (~shailangs@host86-186-196-233.range86-186.btcentralplus.com)
[16:49:37] *** Joins: TomyWork (~TomyLobo@p200300e80f133c00edca32a9512e1858.dip0.t-ipconnect.de)
[16:49:56] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:50:02] <jast> Helmholtz: github supports webhooks for repo updates, which means you can connect your repo to notification services etc.
[16:50:21] <jast> take a look at the repo settings
[16:50:40] <Helmholtz> jast, does it work for a repo in which I don't own
[16:51:03] <jast> only if the owner will set it up for you
[16:53:28] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[16:56:01] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Quit: WeeChat 3.2)
[16:56:45] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[16:59:34] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[17:01:54] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[17:02:48] *** Quits: Guest1512 (~mike@116.204.144.25) (Quit: WeeChat 1.9.1)
[17:03:16] <CarloWood> Hi, I am totally stuck again and can't find the answer online :/.  I have two remotes 'origin' (remote) and 'github' (what I use).  The upstream author (origin) now added a new branch 'fix' that he wants me to test.
[17:03:27] <CarloWood> But I can't find out how to get it and check it out locally :/
[17:03:47] <jast> if you don't need it in your github remote just yet, the easiest way is: git fetch origin; git checkout fix
[17:03:55] <CarloWood> git fetch --all
[17:03:59] <CarloWood> didn't get it
[17:04:35] <jast> hm, possibly your remote is setup to fetch a subset of refs? check with: git config remote.origin.fetch
[17:04:41] <CarloWood> Looking at my history, I did that - and it gave the error that 'fix' is unknown
[17:04:59] <CarloWood> +refs/heads/main:refs/remotes/origin/main
[17:05:04] <jast> yeah, that's the issue
[17:05:14] <jast> replace 'main' with '*' twice (easiest to just edit .git/config)
[17:05:14] <CarloWood> main? I am not even using main.. I use master
[17:05:31] <CarloWood> Oh, I am using main here :/
[17:05:35] <CarloWood> well
[17:05:43] <jast> yeah, it's been github's default for a while now
[17:06:09] <CarloWood> I am getting too tired of politics to go along with it even in my coding projects.
[17:06:17] <jast> I don't exactly follow the reasoning behind it, but it's not really a big deal in practice
[17:06:30] <jast> if you init repos by pushing something from your local repo you can just use your own default
[17:06:52] *** Quits: shailangsa (~shailangs@host86-186-196-233.range86-186.btcentralplus.com) ()
[17:07:44] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 258 seconds)
[17:08:21] <CarloWood> It's because next to the n-word we now also have the m-word. I'll just ignore everything, people are crazy these times.
[17:08:26] <jast> btw this kind of fetch setup is used if you pass --single-branch or --depth during the initial clone
[17:08:46] <jast> the wildcard version is the default
[17:08:58] <CarloWood> I dunno how it got this way :/
[17:09:46] <CarloWood> He has a lot of branches (I guess), and I suppose I didn't want to fetch them all. I was just interested in main.
[17:09:49] <jast> it's even worse in Germany where some people want to genderify many descriptive nouns for groups/positions of people, because German historically used a generic masculine form for many of these
[17:10:13] <jast> yeah, makes sense
[17:10:31] *** Joins: adamts (~Adam@user/mysteryblokhed)
[17:10:39] <CarloWood> There is little sanity left in the world; people are seeing things everywhere that do not exist (only in their heads) and make a HUGE fuss about it.
[17:10:49] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[17:11:28] <jast> I mean people are entitled to their opinions, the real shame is that so many people actively resist proper discussion of stuff like this
[17:12:22] <CarloWood> The worst part is that a sphere has been created where it became all undiscusable. I wouldn't have been surpriced if I had been kicked from this channel for saying I don't care about what people think and still use 'master' as main branch name :p.  Hysteria rules.
[17:12:38] <CarloWood> Ha! I was already typing that. Yes.
[17:12:57] <CarloWood> And moderation of everything except one opinion on many subjects.
[17:13:01] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[17:13:46] *** Quits: jazzy (~jaziz@2600:380:c145:1176:ccc4:f85a:7d87:128) (Ping timeout: 256 seconds)
[17:14:12] <CarloWood> Ok, so I am here:
[17:14:14] <CarloWood> >git checkout fix
[17:14:14] <CarloWood> error: pathspec 'fix' did not match any file(s) known to git
[17:14:28] <jast> old git version?
[17:14:36] <CarloWood> Can I only fix that by changing remote.origin.fetch ?
[17:14:37] <jast> try: git checkout -t origin/fix
[17:14:41] <jast> oh
[17:14:55] <CarloWood> fatal: 'origin/fix' is not a commit and a branch 'fix' cannot be created from it
[17:15:23] <jast> you can manually fetch another branch but it's cumbersome
[17:15:40] <jast> git fetch origin refs/heads/fix:refs/remotes/origin/fix
[17:16:08] <CarloWood> From https://github.com/janekb04/glfwpp
[17:16:08] <CarloWood>  * [new branch]      fix        -> origin/fix
[17:16:29] <jast> it won't auto-update on subsequent 'git fetch'es, either
[17:16:33] <CarloWood> >git checkout -t origin/fix
[17:16:33] <CarloWood> M       external/glfw
[17:16:33] <CarloWood> M       external/imgui/imgui
[17:16:33] <CarloWood> fatal: Cannot setup tracking information; starting point 'origin/fix' is not a branch.
[17:16:52] <CarloWood> He said he made a branch...
[17:16:57] <jast> hmm, maybe there's a check against the fetch config somewhere in there
[17:17:27] <CarloWood> Here is his email: I applied fixes and pushed them to the `fix` branch. It should fix issues #16, #20, #79 and #80. Let me know if this solves your issues. If it does, we may close this PR and I will merge the `fix` branch.
[17:18:13] *** Joins: adlternative (~adl@117.32.216.79)
[17:18:24] <jast> yeah, the branch exists as you can see from the manual fetch updating something
[17:18:55] *** Joins: durham (~durham@2601:cb:8200:840:1c0e:1ef2:1798:7be)
[17:18:55] <jast> I don't know why the automatic tracking setup isn't working but we can do the manual version:
[17:19:02] <jast> git checkout -b fix origin/fix
[17:19:17] <CarloWood> That worked
[17:19:32] *** Quits: durham (~durham@2601:cb:8200:840:1c0e:1ef2:1798:7be) (Remote host closed the connection)
[17:19:35] <jast> anything is possible... you just have to know an extra 35 git commands :-)
[17:20:04] *** Joins: durham (~durham@2620:10d:c091:480::1:2c67)
[17:20:28] <CarloWood> Thanks for you help as always <3
[17:20:36] <jast> you're welcome
[17:22:17] *** Joins: shailangsa (~shailangs@host86-186-196-233.range86-186.btcentralplus.com)
[17:22:45] <CarloWood> Why did you also fetch refs/heads/fix ?
[17:23:03] <CarloWood> in: git fetch origin refs/heads/fix:refs/remotes/origin/fix
[17:23:05] <jast> no, that's a refspec
[17:23:17] <jast> the left half of the foo:bar is the source ref on the remote side
[17:23:27] <jast> and it specifies that should go into the local ref specified on the right
[17:24:22] <CarloWood> Ah ok - so all branches are put in heads/ ? There is like no refs/branches/ ? :)
[17:24:38] <jast> exactly, some of the terminology is a bit... historical
[17:24:48] <jast> refs/heads/ is the base namespace for local branches
[17:25:03] <CarloWood> ok, I am getting it, thanks :)
[17:25:05] <jast> 'git branch' and many other tools just hide it from you
[17:25:20] <jast> you can see the real refs in your repo: git show-ref
[17:25:29] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:28:23] <CarloWood> Not compiling... so I'll have to ask for a pull request I guess.  Hence, I need to push this branch to 'github'
[17:28:38] <CarloWood> git push github fix
[17:28:39] <CarloWood> ?
[17:28:43] <jast> yes
[17:28:49] <jast> add -u if you want this as your upstream branch
[17:29:00] <jast> makes it easier to keep in sync with your version of the branch
[17:35:08] <CarloWood> Basically he ignored all my previous pull requests, wtf.
[17:35:14] <jast> nice
[17:35:30] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[17:35:38] <CarloWood> I hate ppl who are sloppy - if that is the upstream author then why am I using this :\
[17:36:15] <jast> yeah, bit disappointing
[17:36:37] <jast> always nice when you report an issue complete with analysis, or file a PR, and the maintainer just applies it a few hours later
[17:37:00] <jast> like when I found an off-by-thousand bug in a rate limiter
[17:39:09] <CarloWood> I have fixed dramatic/serious bugs in the past (and being a perfectionist, then they were not just fixed, but fixed in a really robust general way)... only to be ignored for YEARS because the maintainer doesn't have the time to review patches that are a bit complex.
[17:40:35] <CarloWood> Aka, added perfect support for multi-HEAD setups (multiple monitors) to the window manager that was used with Gnome (now they use a different window managers, but that was metacity). I kept updating the collisions of my patch for 5 years and then gave up.
[17:40:44] <jast> I tend to make smaller contributions outside of work, so I hardly run into that kind of issue
[17:41:07] <jast> but yeah, that sounds seriously frustrating
[17:41:52] <CarloWood> Also fixed HTTP pipelining support in libcurl in a perfect way - but the maintainer had no time (or expertise to understand) to review it; and 3 years afterwards they REMOVED all support for pipelining completely from curl (we are too stupid).
[17:42:07] <jast> dang
[17:42:11] <CarloWood> :/
[17:42:23] <jast> I remember a user survey from the curl maintainer ("which features do you use? ... want?")
[17:42:30] <jast> there was websocket support on the list
[17:43:05] <jast> as if that would ever happen. make it actually usable would be a nightmare, and I don't want to know what would have to happen to the code
[17:44:43] <CarloWood> I am ok with it when people are too stupid, but then just blindly merge what I wrote grrr.  A good experience in that regard I had with lib M4RI (a library for fast arithmetic with dense matrices over F2), THE open source library used for fast matrix stuff over F2).
[17:46:26] <CarloWood> He let me make huge changes, with direct git access even - after only reviewing what I had done for other things on the internet. And they were insane - no way he could understand what I was doing lol.  Well, the objective was clear: I was inverting the bits in the base word, so bit 0 became bit 63 etc.
[17:46:56] <CarloWood> Afterwards he said only in the end whenever everything fell into place again he saw that I was right that this was better.
[17:47:18] <CarloWood> So, that was a lot of trust imho.
[17:47:51] <jast> true
[17:48:51] <jast> working on low level numerical/algebra code isn't my cup of tea
[17:49:07] <jast> I'm much happier letting other people think about that and just using their work :)
[17:50:14] <CarloWood> Most of that library is totally over my head too - but I know something, after having written an implementation from scratch that does elliptic curve crypto that are over GF(2^n)
[17:50:16] <jast> I used to spend a fair bit of time on IRC and its shortcomings (without any amazing results to show for it, but it was interesting)... but at this point there's too much webshit to compete with
[17:51:06] <jast> I actually work for a company that does chat webshit for a specific class of use cases, and now I can focus on scaling that up
[17:51:17] <CarloWood> The "problem" was to do it in a way that didn't introduce now bugs. So I wrapped everything in C++ classes first to get typesafety and was able to make changes in parts while still being able to run the testsuite.
[17:51:27] <CarloWood> So, that created a really huge mess.
[17:51:38] <CarloWood> s/now/new/
[17:51:38] <jast> a mess called C++ ;D
[17:51:46] <CarloWood> heheh
[17:51:59] <jast> I'm introducing a new component at work written in Rust, my first project with it
[17:52:06] <jast> it's been interesting
[17:52:45] <osse> I want to do that to
[17:52:47] <osse> o
[17:52:51] <jast> and it certainly removes a few headaches with me needing shared memory for performance
[17:53:00] <osse> But stuff depends on stuff that depends on stuff that uses a library for a protocol and so on
[17:53:00] <CarloWood> I am too old to switch to Rust (or anything new). Just going to do C++ till I die.
[17:53:16] <jast> "too old"
[17:53:18] <jast> nice excuse :p
[17:53:19] <CarloWood> Learning vulkan now though - but hey, it is C++ :)
[17:53:26] <osse> So I can't just write a new thing in a different language without rewriting some other stuff
[17:54:30] <jast> the cool thing is that the types make sure I can't read/write the shared memory objects without obtaining a lock first
[17:54:34] *** Quits: roadie (~user@2a02:8108:ec0:1427:288d:5490:8814:e094) (Ping timeout: 256 seconds)
[17:54:59] <CarloWood> I wrote code for that in C++
[17:55:21] <CarloWood> It's wonderful - and nobody seems to notice it (or use it). It is weird.
[17:55:30] <jast> and the lock automatically releases when it goes out of scope, and I can't pass it to places that can copy it
[17:55:44] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[17:55:49] *** Joins: roadie (~user@2a02:8108:ec0:1427:288d:5490:8814:e094)
[17:55:51] <CarloWood> https://github.com/CarloWood/ai-threadsafe
[17:56:05] <CarloWood> I bet my design is even better? :)
[17:56:11] <jast> the latter would probably be hard or impossible in a language without borrow checking
[17:56:11] <CarloWood> what you think
[17:57:00] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 272 seconds)
[17:57:03] <jast> in terms of how clean it is, they're fairly similar
[17:58:13] <CarloWood> This allows you to write code that is read/write lock aware, easily convertable between different types of mutexes though: read/write, or just a plain mutex, or no mutex at all but just checking (in debug mode) that there is indeed only one thread at a time access it.
[17:58:29] <osse> jast: what kind of component is it? How does it fit into the rest?
[17:58:59] <jast> well, we have a fairly mixed read/write load and make heavy use of transactions and row locking to ensure data consistency
[17:59:24] <jast> but some operations are tricky to lock because of the sheer number of different tables and rows involved
[17:59:48] <jast> so the new component is a network service that other components contact to perform these critical operations entirely in RAM
[18:00:07] <jast> and they're committed to the database in near-realtime
[18:00:26] <CarloWood> Taking a read lock (using just mutexes too) gives const& access only. You can convert write-locks to read-locks of course (either because the former is derived from the latter, or by seamless going from a write lock to a read lock), and visa versa (going from a readlock to a writelock without releasing the read first of course).  You can write fuctions that take an accessor object, guaranteeing that the object is already locked etc.
[18:01:19] <jast> basically the component enforces an ordering on operations but lets these operations run in typically <1ms, the only downside being that a power loss or machine crash can lose a second of data
[18:01:21] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:01:47] <CarloWood> Oh - well, everything is in ram here. In the ends they are just atomic variables no?  It's just the API that makes it impossible to make mistakes.
[18:02:29] <jast> yeah
[18:02:40] <CarloWood> Hardly a downside if the effect of a 1s delay is that it is much much faster.
[18:02:45] <jast> and these are entire data structures, so they're "not that atomic"
[18:02:59] <jast> but the locking makes them so
[18:03:16] <CarloWood> the data structures that are protected are not atomic, otherwise you wouldn't even need locks.
[18:03:21] <jast> exactly
[18:03:23] <CarloWood> I mean, the locks are atomics.
[18:03:26] <jast> yeah
[18:03:45] <CarloWood> No database here, or locks-over-networks :p. Just atomic vars in ram.
[18:03:53] <jast> precisely
[18:04:12] <CarloWood> I did write an API for locking files though...
[18:04:13] <jast> that was the design idea, to make it virtually impossible for an operation to block
[18:04:36] <jast> (let's not talk about interrupts and swapping and such...)
[18:05:11] <CarloWood> Things that are "perfect" usually tend to be a lot more complex than what people expect/accept. I think that is one reason why people don't use my stuff quickly, steep learning curves and no documentation :p
[18:05:20] *** Quits: roadie (~user@2a02:8108:ec0:1427:288d:5490:8814:e094) (Ping timeout: 256 seconds)
[18:05:34] <jast> and then the whole thing uses a brokerless message queue approach to have the components communicate
[18:05:50] <jast> which helps abstract away some short-term temporary failures without pretending that networks never fail
[18:06:02] *** Joins: ThorMojito (~Adium@modemcable212.77-202-24.mc.videotron.ca)
[18:06:32] <CarloWood> This is what I like about vulkan (that I am now learning): a very huge complex API that requires you to do every little detail.  Yet, it is the only way to really get everything out of it. And people are apparently (finally) willing to use it in order to get the performance increases.
[18:07:00] <jast> I don't really want to get into that myself
[18:07:59] <jast> but one of the projects on "my list"(tm) is a 3d render engine that simulates hand-drawing... not just cel shading but actual contours (and maybe even textures) that look human... which I suspect is just about impossible to hardware-accelerate
[18:09:22] <jast> I mean maybe using something like cuda/opencl... but I'd first have to start the project, and I suspect I wouldn't start out with that. in the end the question is moot because I don't really have time to do it anyway :>
[18:10:12] <CarloWood> What you describe I like - sounds like you are not afraid to write complex code when that is necessary to make things robust under ALL circumstances - and not write some half-arsed then subsequently keeps having problems over the years, requiring kludge upon kludge to work around problems, that never CAN be fixed (aka, if you ignore network failures from the get go, you will never be able to make REALLY reliable. Certainly not
[18:10:12] <CarloWood> "later on")
[18:10:26] *** Joins: nyah (~nyah@90.221.186.180)
[18:10:34] <jast> yeah, we've been through a few iterations with this codebase
[18:10:38] <bookworm> maybe that discussion has outlived this channel's topic and should move to a query
[18:11:05] <jast> hey, off topic is allowed here as long as it's not getting in the way of on topic stuff, I don't make the rules
[18:11:12] <jast> (actually I do, but that's beside the point :P)
[18:11:48] <CarloWood> I'm fine with closing the discussion anyway - and going back to work :)
[18:21:08] *** Quits: Shentino (~shentino@user/shentino) (Read error: Connection reset by peer)
[18:21:24] *** Joins: nvmd (~nvmd@user/nvmd)
[18:24:35] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[18:28:25] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:31:02] *** Joins: jazzy (~jaziz@2600:380:c145:1176:ccc4:f85a:7d87:128)
[18:31:35] *** Joins: roadie (~user@2a02:8108:ec0:1427:288d:5490:8814:e094)
[18:32:29] *** Joins: Shentino (~shentino@user/shentino)
[18:34:52] *** Joins: randomuser (~randomuse@user/randomuser)
[18:36:26] <cbreak> jast: how about using a network like stylegan?
[18:36:34] <cbreak> or an other image-to-image translation network?
[18:37:10] <CarloWood> I'd love to see (have) A.I. that can tell IRC discussions apart in channels. Then you can just ignore a "discussion" without muting people completely. Or highly one that you are actively interested in.
[18:37:28] <CarloWood> s/highly/highlight/
[18:38:45] <CarloWood> I was thinking about this before because I felt the need for it when /ignore-ing someone; in that case you not just want to ignore that person, but also every discussion they are involved in (seeing just one side of a discussion is highly annoying).
[18:38:50] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:39:04] <jast> cbreak: I was thinking of making this usable as a 3d engine, where you can render arbitrary scenes with animation, ideally in realtime
[18:39:24] <jast> AI isn't that great unfortunately
[18:39:46] <jast> I don't usually trust it to filter my inputs for me (though I make an exception for spam with an "unsure" bucket
[18:40:37] <cbreak> the way it'd work is to render something normally, then use style transfer to "stylize" it
[18:40:40] <jast> just a while ago one of our customers at work reported a deepl translation that said the exact opposite of the original (and not just a simple negation in the wording, it was a completely different sentence)
[18:40:56] <CarloWood> Actually, I think this is technically possible already at this time. It seems a lot less difficult then Watson, the AI playing jeopardy :p.
[18:42:05] <jast> and it kind of sucks if your customer says "I'm not at all happy with how your service handled this and I'm not sure I'll do business with you again" and it gets translated to "I'm very happy with your service"
[18:42:10] <osse> CarloWood: sounds like the kind of thing that makes your IRC client use 40 % CPU continuously :p
[18:42:21] <CarloWood> osso: LOL
[18:42:33] <jast> no, to achieve that you just implement it with electron :>
[18:42:36] <cbreak> jast: sounds good. Always be friendly
[18:43:01] <jast> that's another thing we need more of: stuff replaced by stuff that's based on electron
[18:43:06] <cbreak> jast: but language translation is much harder than image translation
[18:43:29] <cbreak> https://genekogan.com/works/style-transfer/ // 5 years old, modern architectures are better
[18:43:48] <jast> eh, I've yet to see really amazing results
[18:44:10] <jast> and, simply put, I don't think AI the way it's done currently is sustainable
[18:44:27] <CarloWood> There is no "AI" yet.
[18:44:27] <jast> it shines in narrow domains, sure
[18:44:42] <jast> but there is no known model that scales to larger parts of the real world
[18:45:07] <CarloWood> Just sophisticated pattern recognition.
[18:45:08] <jast> and as long as that doesn't exist, you'll keep having weird glitches in unexpected corner cases
[18:45:11] <cbreak> jast: so?
[18:45:12] <osse> easier if we let the AI dictate the real world
[18:45:18] <cbreak> that's like saying "programming is not sustainable"
[18:45:27] <cbreak> just because you have to write new programs for every new problem
[18:45:29] <jast> in programming you have a different class of failures
[18:45:48] <osse> Like Rehoboam
[18:45:52] <jast> but if an AI model fails in particular ways, often the only thing you do is retrain from scratch
[18:45:58] *** Joins: varaindemian (~varaindem@86.124.78.162)
[18:46:00] <cbreak> I use machine learning at work, and it works _SO_MUCH_ better than any alternative, it's not even funny
[18:46:18] <jast> as I said... if the problem domain is narrow enough, it's usually fine
[18:46:24] <CarloWood> The AI's for self-driving cars will still look at pure noise and tell you that is a truck that you have to evade and drive into the side of the road.  I mean, if they can't tell noise from the real thing, what are they doing?
[18:46:33] <cbreak> translating an image is quite narrow domain
[18:46:41] <jast> depends on the translation
[18:46:48] <cbreak> CarloWood: they can tell noise from the real thing
[18:47:01] <CarloWood> Not if you feed them just the right noise.
[18:47:04] <cbreak> outlier detection is easy
[18:47:08] <jast> but often, extensive domain knowledge is required
[18:47:15] <cbreak> if you feed them the right noise, then it's not noise, it's data
[18:47:21] <jast> for example, trucks will often have speed limit signs attached to their rear
[18:47:26] <CarloWood> It will look like noise to us :p
[18:47:48] <jast> and adversarial samples are definitely a thing
[18:47:48] <cbreak> CarloWood: do you know "optical illusions"?
[18:47:49] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f1ac:3985:60c2:941e)
[18:47:50] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f1ac:3985:60c2:941e) (Changing host)
[18:47:50] *** Joins: skapata (~Skapata@user/skapata)
[18:47:53] <cbreak> the old school kind
[18:48:25] <CarloWood> https://www.bbc.com/news/technology-41845878
[18:48:29] <cbreak> those are basically adversarial images that work on humans
[18:48:33] <jast> optical illusions are fairly well documented and consistent between humans, but with AI potentially every new model implementation will have entirely different failure modes
[18:48:35] <CarloWood> Computers can be fooled into thinking a picture of a taxi is a dog just by changing one pixel, suggests research.
[18:48:41] <cbreak> and depending on how good your vision algorithm is, they also work on those
[18:48:45] <CarloWood> ^^^ quote from the above article
[18:48:47] <cbreak> CarloWood: so?
[18:49:08] <CarloWood> So they are not intelligent :p.
[18:49:13] <cbreak> of course they're not
[18:49:13] <CarloWood> They just classify
[18:49:22] <cbreak> they just classify better than any human could
[18:49:32] <jast> I recall a paper in which they fed images into a popular image recognizer and its recognition rates went down by a lot when they just shifted the whole image to the right by 50 pixels
[18:49:35] <CarloWood> Well, that was the original discussion topic (ish)
[18:49:56] <cbreak> the original topic was: can AI translate an image into something that looks hand drawn?
[18:50:02] <jast> the point is that failure modes are subtle
[18:50:03] <cbreak> and my claim is: Yeah, I think it can
[18:50:13] <jast> training is hard
[18:50:26] <jast> fixing training mistakes can be impossible, or worse you'll notice it too late
[18:50:44] <CarloWood> I was talking about this (sub)topic:
[18:50:46] <CarloWood> <jast> and, simply put, I don't think AI the way it's done currently is sustainable
[18:50:46] <cbreak> jast: there are newer classifiers that are affine-transformation invariant
[18:50:46] <CarloWood> <CarloWood> There is no "AI" yet.
[18:50:46] <CarloWood> <jast> it shines in narrow domains
[18:50:50] <jast> and there's always a point at which you stop being able to train more things into the same network
[18:51:15] <cbreak> and for example for this purpose, you'd use a CNN, which is inherently position invariant
[18:51:20] <cbreak> since it's convolutional
[18:51:29] <jast> this was actually a paper about a CNN-based recognizer
[18:51:40] <cbreak> recognizers are not convolutional
[18:51:46] <cbreak> they always have a FC tail
[18:51:50] <cbreak> that's the problem
[18:51:59] <cbreak> if you want to make them position independent, you have to be more clever
[18:52:35] <jast> here's the paper btw: https://www.jmlr.org/papers/volume20/19-519/19-519.pdf
[18:52:44] <cbreak> I'm not personally working with classifiers, so I don't know the tricks they have nowadays, but I think it involves extracting features in a spatially invariant representation
[18:53:00] *** Quits: adlternative (~adl@117.32.216.79) (Ping timeout: 252 seconds)
[18:53:12] <jast> they specifically argue that CNNs aren't actually that position-invariant
[18:53:36] <cbreak> depends on how careful you are with implementing them
[18:54:05] *** Joins: Samian (~Sami@2620:10d:c091:480::1:73e1)
[18:54:41] <cbreak> all the ones I work with are
[18:54:43] <jast> I believe they tested six different reference implementations (from 2019)
[18:55:56] *** Quits: nyah (~nyah@90.221.186.180) (Quit: leaving)
[18:56:31] <jast> and the sampling argument seems quite sound to me
[18:56:34] *** Joins: subopt (~subopt@2603-8081-2302-459a-552b-60b3-0242-52a7.res6.spectrum.com)
[18:57:14] *** Joins: nyah (~nyah@90.221.186.180)
[18:57:43] *** Joins: nobody_ (~nobody@host-79-45-186-108.retail.telecomitalia.it)
[18:57:53] *** Quits: sysh (~sysh@212.237.182.120) (Ping timeout: 250 seconds)
[18:58:42] <jast> and I guess you can address this by mangling the data between layers, but how common is that in common implementations? I have no idea :)
[18:59:23] <cbreak> the way it's addressed in the networks I work with is by translating from an image to an other
[18:59:45] <jast> you mean enhancing the training set?
[18:59:46] <cbreak> each output pixel is determined deterministically from only the input pixel in its region of information
[18:59:49] <cbreak> no
[18:59:53] <cbreak> architecting the network
[19:00:13] <cbreak> the network has no information about the position of a pixel in the image, so it can not be dependent on it either
[19:00:38] <jast> that would make it invariant to positional changes but not to changes in scale
[19:00:52] <cbreak> indeed.
[19:01:06] <cbreak> my network works on outputs of renderers
[19:01:14] <cbreak> so you can't really scale those easily
[19:01:25] <cbreak> (without destroying the information it needs to do its job)
[19:01:35] <jast> which makes your domain quite a bit narrower than image translation in other contexts :)
[19:01:48] <cbreak> yeah.
[19:02:16] <cbreak> but the same idea applies to style transfer too, if you want it
[19:03:48] <jast> humanization can cause deviations by a fair bit more than a distance of one pixel, though
[19:04:01] <cbreak> although, I'm not sure if scale invariance even means anything for translating an image into a hand-drawn sketch.
[19:04:08] *** Quits: randomuser (~randomuse@user/randomuser) (Ping timeout: 272 seconds)
[19:04:48] <cbreak> would you want all lines in the sketch to become thinner? or would you want less information to be extracted? I'd expect the latter
[19:05:26] <jast> I'd want the lines to be jittery for instance if modeling a bad artist
[19:05:38] <cbreak> you get that naturally
[19:05:40] <jast> and curves and straight lines to be less perfect and more like they follow the natural movement of the joints
[19:05:58] <cbreak> the opposite is much harder, temporal stability in image translation algorithms is... not the default :)
[19:06:35] <jast> so you'd have "straight" lines that tend to be slightly curved around the artist's arm
[19:07:00] <jast> and then for animation the parameters shouldn't deviate too much between frames
[19:07:20] <jast> but still deviate a little so it looks like each frame was drawn separately
[19:07:20] *** Joins: adlternative (~adl@117.32.216.42)
[19:08:27] *** Joins: mike18 (~geri@217-149-163-174.nat.highway.telekom.at)
[19:08:32] <mike18> hi
[19:08:40] <mike18> does git clone have a timeout i can set?
[19:08:50] <mike18> and can i only clone master branch?
[19:08:56] <mike18> or the latest commit?
[19:09:01] <mike18> of master branch
[19:09:04] <mike18> or another branch
[19:09:05] <cbreak> you can do the latter with --branch master --depth 1
[19:09:14] <mike18> and the timeout param?
[19:09:15] <jast> there's no built in timeout option
[19:09:21] <mike18> whats default?
[19:09:34] <cbreak> ssh has a timeout probably
[19:09:35] <jast> TCP timeout from system or SSH timeout
[19:10:01] <jast> (or HTTP timeout if you're using HTTP... in which case it can potentially be customized with curl settings)
[19:10:14] <mike18> and https clone?
[19:10:23] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[19:10:37] <lpapp> hi, how to get a git diff between main and my branch for particular filepaths?
[19:10:47] <lpapp> git diff main..HEAD -- filepath kind of thing
[19:10:57] <lpapp> except that the current branch has been rebased a few times on top of main
[19:11:18] <mike18> @jast how to set the timeout for clone with https?
[19:12:30] <jast> hm, looks like libcurl doesn't let you configure it externally
[19:12:36] *** Joins: arcatech (~arcatech@user/arcatech)
[19:12:48] <mike18> @jast libcurl?
[19:13:00] <jast> libcurl is the library git uses internally to do HTTP operations
[19:13:01] <mike18> @jast does git clone use libcurl?
[19:13:21] <jast> and git doesn't expose an option to control timeouts, nor does libcurl (to the end user)
[19:13:39] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:13:50] <jast> if you're running the clone from a script, you could try and wrap a timeout of your own around the whole command, but that's a bit tricky
[19:14:24] <jast> lpapp: what kind of problems are the rebases causing you when trying that?
[19:15:00] *** Quits: nobody_ (~nobody@host-79-45-186-108.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[19:15:36] <cbreak> lpapp: git diff yourbranch main -- file
[19:16:04] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[19:16:05] <mike18> @jast so git clone will hang forever?
[19:16:28] <jast> mike18: normally it will timeout eventually due to the underlying TCP timeouts (which can be several minutes after the data was received)
[19:16:36] <mike18> after 30 min?
[19:16:49] <cbreak> I think standard tcp timeout can be in the order of hours or days
[19:16:52] <jast> however if a remote server is being malicious or very, very slow, it could take a lot longer
[19:17:23] <jast> on linux, TCP timeouts are usually due to a limit on retries, and a factor on how long the delay between retries scales up
[19:17:43] <lpapp> cbreak: yep, I tried what I wrote out, and I am surprised that it just worked :D
[19:17:47] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[19:17:55] <mike18> jast: i think i was stuck in git clone of the github repo - meaning it didnt complete...
[19:17:59] <lpapp> My assumption was wrong that rebase could break it
[19:18:09] <lpapp> jast: nothing apparently, thanks :D
[19:18:13] <jast> :D
[19:18:18] *** Quits: jazzy (~jaziz@2600:380:c145:1176:ccc4:f85a:7d87:128) (Ping timeout: 240 seconds)
[19:18:21] <cbreak> lpapp: git diff doesn't look at history
[19:18:24] <cbreak> just at state
[19:18:59] <jast> yeah, diff is all "compare this tree to this tree"
[19:19:44] <lpapp> before merging my feature branch to main, how would you find all the TODOs added by me?
[19:19:55] <lpapp> in other words, I would not like to get the TODOs that is there in main
[19:20:01] <jast> git log main..feature -p -STODO
[19:20:07] <jast> at least that's what I would use
[19:20:08] <lpapp> git diff main branch | grep grep or git grep -r so?
[19:20:15] <lpapp> git grep -l*
[19:20:29] <osse> can try git diff -STODO main branch
[19:20:31] <jast> though that splits it up by commit
[19:20:47] <lpapp> why main first?
[19:20:49] <jast> I don't think -S works with diff?
[19:20:54] <jast> well, it's a range
[19:21:12] <jast> a..b means the same as ~a b which is basically "everything in b but exclude a and all of its history"
[19:21:21] <jast> or, intuitively (most of the time), "from a to b"
[19:21:38] <osse> jast: -S works with diff, yes
[19:21:40] <lpapp> sure, that is why it should be feature main
[19:21:42] <lpapp> not main feature, right?
[19:21:53] <jast> then you would get TODOs that exist on main but not on feature
[19:22:14] <lpapp> oh, just reread the meaning of a b
[19:22:18] <lpapp> I assumed it is a..b
[19:22:34] <lpapp> but it seems to be b..a
[19:22:38] <jast> with 'git diff', 'a..b' and 'a b' is the same
[19:22:48] <lpapp> now, I am confused
[19:22:51] <jast> but in general '..' has a different more specific meaning
[19:22:54] *** Joins: jetchisel (jetchisel@user/jetchisel)
[19:22:55] <jast> e.g. in 'git log' (which was my example)
[19:22:57] <lpapp> then why not main feature
[19:23:03] <lpapp> if I want to see this in my feature, not main?
[19:23:15] <jast> yeah, that's what I would use, if I was using 'git diff'
[19:23:24] <osse> https://raw.githubusercontent.com/Osse/git-stuff/master/dots.txt
[19:23:41] <lpapp> git diff -STODO foo main seems to output a lot of flood
[19:23:47] <lpapp> can I squeeze this?
[19:24:20] <lpapp> e.g. just to get file and line numbers to the TODOs, so that I can jump to them
[19:24:45] <jast> tricky :)
[19:25:23] *** Joins: thiago (~thiago@2601:1c0:4501:635c:42f7:6816:d317:e922)
[19:25:24] <lpapp> I guess I could | grep
[19:25:52] <lpapp> anyway, it does not work
[19:25:57] <lpapp> it does not show only the TODOs from my branch
[19:25:58] <osse> In that case I would git grep -n ... in feature, and subtract the result from main
[19:25:59] <lpapp> the git diff version
[19:26:02] *** Joins: junktext (~junktext@77.247.181.218)
[19:26:19] <lpapp> how would you substract the result from main?
[19:27:02] <osse> something like:  comm -23 <(git grep TODO feature) <(git grep TODO main)
[19:27:34] <lpapp> git log main..feature -p -STODO | grep TODO - workecd
[19:27:34] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 272 seconds)
[19:27:45] <lpapp> thanks jast
[19:28:00] <lpapp> osse thanks for the idea, maybe the git log command is simpler for a layman :)
[19:28:10] <jast> that will not give you line numbers unfortunately
[19:28:11] <osse> no line numbers there though
[19:28:22] <jast> and it will break down if things moved to different files
[19:28:30] <osse> me gusta  vim -q <(git grep -n ...)
[19:28:52] <lpapp> actually, I was wrong, it did not work.
[19:29:06] <lpapp> no line number is fine
[19:29:09] <lpapp> so long as there is content
[19:29:14] <lpapp> but it does not give me the right content anyway
[19:29:17] <lpapp> so, something is not right
[19:29:27] <lpapp> it gives some content, but having had a closer look, it is not correct
[19:29:46] <osse> it will also show removals, for example
[19:30:35] <osse> the only actually technically correct solution I can think of is to find all todos in both branches and subtract one from the other
[19:30:49] <jast> seems error-prone
[19:34:32] *** Quits: roadie (~user@2a02:8108:ec0:1427:288d:5490:8814:e094) (Ping timeout: 272 seconds)
[19:35:10] *** Quits: bin101 (~bin101@user/bin101) (Quit: goodbye)
[19:37:22] *** Quits: morrigan (~m0rr1gan@user/m0rr1gan) (Ping timeout: 240 seconds)
[19:37:45] *** Joins: DoofusCanadensis (~DoofusCan@2604:3d09:47c:f970:f8db:ee37:a601:5191)
[19:38:32] <osse> git log -p main..feature | grep '^+.*TODO'  I gues
[19:38:33] <osse> s
[19:40:59] <osse> jast: only if you're not a perfect human being
[19:41:06] <jast> :(
[19:50:19] *** Joins: bin101 (~bin101@user/bin101)
[19:51:33] *** Joins: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b)
[19:51:38] *** Quits: Samian (~Sami@2620:10d:c091:480::1:73e1) (Ping timeout: 272 seconds)
[19:52:22] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[19:53:10] <roxlu> Hi! When I use `git apply mychanges.diff` once it works fine, but when I try to apply the same command again I get an error `patch does not apply` which makes sense. But I'm applying this patch with a cmake script which fails because of this and I was wondering if git has a feature to fail silently? .. or maybe there is a better solution?
[19:53:48] <bookworm> your shell does
[19:53:53] <bookworm> || true
[19:54:22] <osse> roxlu: i've used the following trick in the past: Do a reverse patch dry run. If that succeeds you know the patch has already been applied
[19:54:29] <bookworm> but why are you trying to add a patch that already exists?
[19:55:06] <osse> roxlu: git apply --check --reverse
[19:55:07] <roxlu> bookworm: it looks like cmake tries to apply the patch every time I build my project
[19:55:15] <bookworm> yes, but why
[19:55:33] <roxlu> osse: ah thanks! how would you combine that with cmake?
[19:55:53] <roxlu> bookworm: good question :) I'm not sure if this is normal cmake behavior or not tbh
[19:56:03] <osse> roxlu: basically the same as what you're doing now
[19:56:05] <bookworm> cmake just does what you tell it to
[19:56:31] *** Quits: mike18 (~geri@217-149-163-174.nat.highway.telekom.at) (Remote host closed the connection)
[19:56:31] <roxlu> bookworm: you can say that about every command in general
[19:56:37] <osse> roxlu: usually you can specify more than one COMMAND (or PATCH_COMMAND or whatever) and if one succeeds it will also do the next
[19:56:41] <jast> if it's a patch to the sources, that makes sense... cmake isn't really designed to alter source files
[19:56:52] <roxlu> bookworm: I'm also telling it to use a git repository and cmake is not cloning it upon every run neither
[19:57:36] <osse> roxlu: concider using FetchContent instead of ExternalProject. It runs at "cmake time", not "build time", and is supposed to be easier to use
[19:57:51] <roxlu> osse: so you add something like: `PATCH_COMMAND git --apply --check --revers mychanges.diff && git apply mychanges.diff` ?
[19:57:53] <osse> it will fix the whole issue, I think
[19:58:05] <jast> ||, not &&
[19:58:15] <roxlu> jast: ah thanks
[19:58:29] <jast> OTOH you could just do: PATCH_COMMAND git apply ... || true
[19:58:33] <roxlu> osse: fetchcontent only works for other cmake projects if I'm correct
[19:58:53] <osse> roxlu: says "via any method supported by the ExternalProject module" in the docs
[19:58:58] <osse> but I admit I haven't tried it myself
[19:59:07] *** Quits: Strom (strom@fedora/strom) ()
[19:59:52] <roxlu> ok thanks!
[20:00:01] *** Quits: lgc (~lgc@user/lgc) (Quit: WeeChat 3.2-dev)
[20:00:11] *** Joins: roadie (~user@2a02:8108:ec0:1427:288d:5490:8814:e094)
[20:00:27] <roxlu> Using || true did the trick for now :) ... maybe not the best solution, but I think the correct solution lies outside cmake in this case (e.g. the library should be fixed)
[20:00:45] <osse> submit the patch upstream :P
[20:01:10] *** Joins: Strom (strom@fedora/strom)
[20:01:14] <osse> barring any "hurr durr but IP and licensing and stuff" problems
[20:01:20] <roxlu> yeah hmm there is a bit more to it than I'm sharing :)
[20:02:08] <roxlu> i'm using a minus .1 version of a library as ffmpeg only works with this version. I could udpate ffmepg too but where do you stop ^.^
[20:02:46] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[20:02:53] <osse> we-have-to-go-deeper-meme.jpg
[20:03:27] <osse> wait... || true ?
[20:03:47] <osse> git apply --check --reverse mychanges.diff || git apply mychanges.diff
[20:03:54] <osse> otherwise it won't apply the patch the first time!
[20:04:38] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[20:04:43] *** Joins: madewokherd (~urk@comcast.codeweavers.com)
[20:05:35] <osse> also, on some systems it might not generate an actual script to run the commands so shell syntax can be a bit icky
[20:06:24] *** Joins: srinidhi (~srinidhi@49.206.4.186)
[20:06:33] *** Quits: bin101 (~bin101@user/bin101) (Quit: goodbye)
[20:09:00] <roxlu> ah thanks!
[20:09:01] *** Joins: bin101 (~bin101@user/bin101)
[20:16:04] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[20:16:49] <osse> to solve the shell problem you can do  FOO_COMMAND cmd1 COMMAND cmd2   (which will run one after the other) but then you need a way to negate the result of the first, and I haven't found a good way except using shell syntax, so...
[20:18:35] <jast> osse: git apply mychanges.diff || true
[20:19:41] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[20:19:47] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[20:21:22] <osse> that still assumes shell
[20:24:39] *** Parts: strk (~strk@user/strk) (WeeChat 3.0.1)
[20:24:59] <osse> Now I'm just making the whole ordeal more difficult for myself. In most cases it will be run as a shell script.
[20:26:06] *** Quits: roadie (~user@2a02:8108:ec0:1427:288d:5490:8814:e094) (Ping timeout: 276 seconds)
[20:27:35] *** Quits: adlternative (~adl@117.32.216.42) (Quit: Konversation terminated!)
[20:29:29] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[20:33:54] *** Joins: morrigan (~m0rr1gan@user/m0rr1gan)
[20:41:27] *** Joins: Samian (~Sami@163.114.130.5)
[20:43:56] <lpapp> osse: what did you mean by git log -p main..feature | grep '^+.*TODO'?
[20:50:21] <osse> lpapp: I mean that as an improvement over the previous version of using git log for this task
[20:50:35] <lpapp> yeah, I get that you wanted to see additions, only.
[20:50:43] <lpapp> but that was not a solution in the first place from what I can see?
[20:50:51] <lpapp> it is not giving me the TODOs introduced in my branch?
[20:50:56] <lpapp> does it for you?
[20:51:09] <osse> I haven't got an applicable repo to test in at the moment
[20:51:31] <osse> The reason I wrote it so late is simply that I didn't think of it before then
[20:52:03] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[20:52:20] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[20:52:50] <lpapp> ah, ok, well, I am still looking for a solution :)
[20:53:06] <osse> Is that a way of saying it didn't work?
[20:53:10] <lpapp> yes
[20:53:17] <lpapp> I still do not get this main..feature thing
[20:53:23] <lpapp> is it not source..destination?
[20:53:31] <osse> more like  from..to
[20:53:42] <imMute> "show me all the commits in feature that are not also present in main"
[20:53:47] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[20:53:55] <osse> lpapp: what does it print, then?
[20:53:55] <imMute> where "in" means "reachable from" if you want to get into the details
[20:55:28] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[20:55:35] *** Joins: nobody_ (~nobody@host-79-45-186-108.retail.telecomitalia.it)
[20:55:59] <lpapp> osse: why git log, not git diff?
[20:56:20] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[20:56:28] <osse> lpapp: now that you mention it, no particular reason. cargo culted from jast's suggestion
[20:56:58] <lpapp> git diff is less noisy
[20:57:05] <osse> indeed
[20:58:22] *** Joins: orbyt (~textual@172.92.4.78)
[20:58:56] <osse> I tested a bit. both the 'git diff ...' and 'git log -p ...' solutions seem to do what's desired piping it to | grep '^+.*TODO'
[20:59:43] <lpapp> osse: yes, I was wrong. I am really sorry.
[21:00:03] <osse> no problemo
[21:00:06] <osse> the dude abides
[21:00:12] <lpapp> but if I am honest, it is not correct for me, still
[21:00:18] <lpapp> it gives some TODOs not introduced in the branch
[21:00:21] <lpapp> how is this possible?
[21:00:55] <osse> the git diff solution?
[21:00:59] <lpapp> I am getting a TODO in a line
[21:01:07] <lpapp> which git blame says 2014-1020
[21:01:14] <lpapp> both git diff and git log
[21:01:17] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[21:01:23] <osse> that's possible if a TODO is removed in main that remains in feature
[21:01:35] <osse> that will appear as an addition when you diff main against feature
[21:01:41] <lpapp> how to get that out of the way?
[21:02:00] *** Joins: roadie (~user@2a02:8108:ec0:1427:288d:5490:8814:e094)
[21:02:09] <osse> if it also appears in the git log solution then I don't know. I expected git log to not show it
[21:02:55] <lpapp> oh, yes, true man
[21:03:41] <lpapp> actually, git log shows some TODOs
[21:03:45] <lpapp> which git diff does not
[21:03:52] <lpapp> so, that is not perfect either
[21:03:57] <lpapp> it seems to show intermittent ones
[21:04:05] <lpapp> that were added in the branch and then removed
[21:04:12] <osse> try this:  git diff main...feature
[21:04:15] <lpapp> maybe, I need to create the intersection of the git diff and log solutions?
[21:04:15] *** Quits: darkbit (~db@152.32.99.67) (Ping timeout: 258 seconds)
[21:04:20] <osse> THREE dots, oh lawd
[21:04:33] <lpapp> that works! :)
[21:05:47] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[21:06:24] <ikke> two dots with diff is redundant
[21:06:47] <osse> aaaand now I got Mr. Bungle in my head. Thanks, ikke.
[21:07:53] <lpapp> thanks, osse.
[21:09:06] <osse> Off the top of my head I can't think a weird edge case where this would give a different result from comparing the actual results of grepping TODO in both branches
[21:09:22] <Timvde> I *always* forget the difference between two and three dots :(
[21:09:32] <osse> But at this point my comm -23 <(blablabla) solution is starting to look not so complicated after all :P
[21:10:13] <osse> Timvde: print this one out and keep it under your pillow: https://raw.githubusercontent.com/Osse/git-stuff/master/dots.txt
[21:10:25] <osse> after ten-ish years you should be good to go
[21:11:15] <ikke> Learning by osmosis, nice
[21:11:28] <Timvde> osse: I just always look it up and then forget 5 minutes later (or I just try until I get what I'm looking for)
[21:11:34] <lpapp> osse: how is comm -23<... not more complicated than ...?
[21:12:10] <CarloWood> So, upstream merged everything - and now I'd like to test his 'main' branch, but without deleting my own main branch ... Hmm. I suppose I could just rename my own branch first and then do the same thing as before for the 'fix' branch.
[21:12:35] *** Quits: Lunatrius (~Lunatrius@77.38.22.128) (Ping timeout: 252 seconds)
[21:12:42] *** Quits: Samian (~Sami@163.114.130.5) (Ping timeout: 272 seconds)
[21:12:51] <Timvde> osse: the thing that always confuses me is that the logic seems to be reversed for diff vs the rest
[21:12:55] <osse> lpapp: the command line is more complicted, but what it represents is simpler. Subjective, I guess
[21:13:08] <lpapp> fair enough
[21:13:32] <Timvde> So if anyone can explain how that's not the case, maybe I can remember :P
[21:13:57] <osse> But I'm probably biased. It was the first solution I could think of, and has given the correct answer all this time we tweaked the other ones :p
[21:14:32] <osse> Timvde: diff compares to states.  .. means a range. ranges don't make sense for diff. QED
[21:14:35] <osse> *two states
[21:14:42] <CarloWood> Oh, I have a question that has been bothering me: A while ago I added 'branch = whateverbranch' to all [submodule "..."] blocks in .gitmodule.  It seems that 'branch=' wasn't used (it only contained path= and url=). I use this branch in my scripts to make sure that that branch of the submodule will be checkedout.
[21:14:59] <osse> Timvde: I wouldn't say it's reversed. It's just different
[21:15:29] <CarloWood> But this upstream ALSO had a 'branch=' in his .gitmodules :/, which gave me problems. So, question: is 'branch=' used by git somehow?
[21:16:01] <CarloWood> .gitmodules*
[21:16:23] *** Joins: Acki (~Acki@2a02:8109:a280:2d8d:a8b8:61e8:b7a1:56f9)
[21:16:25] <Timvde> osse: .. for log etc is the range from the base to the tip of the branch, while ... represents the entire range from tip to tip. For diff ... shows the diff starting from the merge base, while .. shows the diff between the tips
[21:16:54] *** Joins: Lunatrius (~Lunatrius@77.38.22.128)
[21:17:09] <osse> I see your point
[21:17:11] <Acki> I use `* text=auto` in gitattributes, however what does it mean for my line endings? What line ending will end up in the central reposity?
[21:17:27] <imMute> Acki: depends on core.autocrlf settings
[21:17:35] <osse> IF I were king I would have made .. do what ... does now, treat ... as a syntax error and left it at that.
[21:19:09] <Acki> imMute: but this is a user setting, right?
[21:19:31] <Acki> how can I make sure that in the central repo is only LF used, while user on windows can checkout with CRLF?
[21:19:56] <imMute> I don't think that's possible without setting core.autocrlf on each clone
[21:20:42] <osse> * text=auto in .gitattributes is the best you get
[21:21:10] <osse> that ensures LF in the the repo itself.
[21:24:09] <Acki> osse: I think this enforces that the same line ending is used for all files, it is not enforcing LF
[21:24:37] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[21:24:45] <ikke> It enables line-ending normalization
[21:24:51] <osse> https://git-scm.com/docs/gitattributes#Documentation/gitattributes.txt-Settostringvalueauto
[21:25:09] <ikke> meaning that it makes sure that LF is stored in the index/repository, and that it will checkout files in the working tree in the native format
[21:26:47] <Acki> so no mix of line endings in one file, correct?
[21:27:20] <ikke> It does not prevent editors making a mess of the files
[21:27:40] <Acki> ah okay, so internally it stores them as LF
[21:32:07] *** Quits: Acki (~Acki@2a02:8109:a280:2d8d:a8b8:61e8:b7a1:56f9) (Ping timeout: 246 seconds)
[21:32:12] <CarloWood> Is there a way to merge such that if one branch add something to a line (aka 'void setTime(double)' --> inline void setTime(double') and the other branch added that PLUS something else, in a single commit ('void setTime(double)' --> '[[always_inline]] inline void setTime(double)') that git then will think: they agree on adding 'inline' and then one adds '[[always_inline]]' so I'll keep that.
[21:32:19] <CarloWood> Not sure how to formulate that...
[21:32:40] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[21:33:37] <CarloWood> multiple changes on a single line merging thus. In principle not that much different from when they appear on different lines no? Aka, I have line1 and line2, and I merge with a branch that has line1 and line3, it will just add line3.
[21:35:15] <CarloWood> I think I even wrote the algorithm for that once...
[21:35:25] <imMute> CarloWood: I don't think you can make that automatic.  git works with lines and the line was changed in both branches, therefore _conflict_
[21:37:33] <CarloWood> Hmm, I once wrote something to merge changelogs where author names could be added to the same line by different "branches"...
[21:38:02] <CarloWood> I think it could be applied to git to merge single lines that were changed by both.
[21:38:12] <CarloWood> I can't find it back though :/
[21:41:05] <jast> you could do this in a custom merge driver most likely
[21:41:31] <jast> but there's no built-in magic for this
[21:42:07] <CarloWood> Ah, here it is: https://github.com/AlericInglewood/contribmerge/blob/master/src/three_way_merge.h
[21:42:16] <CarloWood> where contribmerge is the whole application
[21:42:22] <jast> see man gitattributes -> "Defining a custom merge driver"
[21:42:23] <gitinfo> the gitattributes manpage is available at https://gitirc.eu/gitattributes.html
[21:42:53] <jast> so you have to define it in .git/config or ~/.gitconfig and then apply it to a file pattern using .gitattributes
[21:42:57] *** Quits: nobody_ (~nobody@host-79-45-186-108.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[21:45:26] *** Quits: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr) (Remote host closed the connection)
[21:47:56] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:56:18] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[21:56:50] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[21:57:52] *** Joins: tsdh (~tsdh@j289989.servers.jiffybox.net)
[21:58:22] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[22:00:51] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[22:06:29] *** Joins: masber (~masber@178.197.197.167)
[22:10:19] *** Joins: Samian (~Sami@2620:10d:c091:480::1:385b)
[22:11:17] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 265 seconds)
[22:12:04] *** Joins: travisghansen (~travisgha@192.74.130.86)
[22:12:32] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[22:17:26] <NightMonkey> Howdy. My team is having a problem with 'ghost commits' comming back when we commit feature branches to long-standing branches with GitHub PRs. I feel (don't know) that someone did a rebase on a public branch when they shouldn't have. Is there a way to find out when/where rebases are in the git history (vs. merges)?
[22:17:59] <davve> you can see it with git reflog
[22:18:05] <davve> but that is only for your local repository
[22:18:06] <NightMonkey> I have a feeling it is a misconfigured IDE at the root of this, but until I can validate that...
[22:18:10] <jast> not in a central place unfortunately
[22:18:20] <jast> you can really only see it on the machine of the person who did it
[22:18:26] <davve> ^
[22:18:47] <jast> github PRs keep a note of force pushes made to the underlying branch, too
[22:18:48] <NightMonkey> davve: jast: Ah. Thanks. If I have access to local repositorys, what would I look for in the reflog?
[22:19:04] <jast> but if someone rebased the main branch outside of a PR, you're *probably* out of luck
[22:19:09] <NightMonkey> Ugh, *repositories
[22:19:28] <NightMonkey> jast: OK, thanks.
[22:19:28] <jast> search it for entries that say 'rebase' and hope you understand what's going on :)
[22:19:35] <davve> you can see when the rebases are done
[22:19:51] <NightMonkey> jast: Ah, it's just listed like that? Great!
[22:20:57] <jast> yeah. preferably don't look in the reflog for HEAD first because it tends to be a big mess
[22:21:08] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:21:23] <NightMonkey> One other question: Is there a 'pattern' (anti- or otherwise) that could result in 'ghost commits' coming back into PRs? Where previous changes seem to be 'replayed'?
[22:22:01] <NightMonkey> I *see* that the changes are in the destination branch, but the PR flow seems to think that the change is needed *again*.
[22:22:08] <jast> basically whenever one person updates a branch by rebasing, and another updates the branch by merging (having the old version of the branch locally)
[22:22:51] <jast> or similarly, if someone cherry-picked the commits from the feature branch to the target branch, they're technically different commits
[22:23:42] <NightMonkey> jast: Thank you. It's good to not feel quite as crazy as when I started seeing this, because of your help. :)
[22:24:19] <jast> general best practice: rebase feature branches to keep them up-to-date (unless they're super-active with multiple developers, in which case you may have to come up with your own workflow that minimizes pain), use merge (real merge, not squash) to integrate feature branches into long-lived branches
[22:24:40] <jast> the rebase is mostly for keeping things clean and making the feature branches easy to follow/understand later on
[22:24:56] <jast> the merges serve as markers in history when (and by who) the feature branch got merged
[22:25:49] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[22:25:51] <jast> similarly, forward-merging changes on an oldstable branch to a stable branch is best done with a merge so you can later see how the work made its way through the branches
[22:26:38] <jast> for tiny feature branches, or really messy feature branches, a squash merge may be better than a real merge
[22:27:06] <NightMonkey> jast: Thank you!
[22:27:13] <jast> but the two guiding principles are always: how likely is it that I will understand the history later? how likely are we to mess this up?
[22:28:35] *** Joins: cyrus_mc (~cyrus_mc@45.62.180.58)
[22:31:59] <NightMonkey> jast: We have been using GitHub PR's "Squash and merge" (but not rebase) for merging from topic/feature branches to long-lived branches like "dev" and "main".
[22:32:26] *** Quits: austin987 (~null@cpe-173-174-99-192.austin.res.rr.com) (Ping timeout: 272 seconds)
[22:33:06] <jast> yeah, it's not a terrible practice, but a big PR tends to be easier to understand afterwards if you keep the individual commits (if the individual commits make sense, i.e. they're not a huge sequence of "fix this" "try another approach" "fix some more tests" "undo this first change" etc.
[22:33:09] *** Joins: Thanatermesis (~Thanaterm@191.92.148.122)
[22:34:17] *** Joins: Betal (~Beta@user/betal)
[22:35:19] *** Parts: Thanatermesis (~Thanaterm@191.92.148.122) ()
[22:40:06] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 272 seconds)
[22:40:07] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[22:40:08] *** Joins: nasamuffin (~nasamuffi@27.179.83.34.bc.googleusercontent.com)
[22:41:02] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[22:41:05] *** Joins: dscho (~dscho@cgn-89-1-212-168.nc.de)
[22:42:58] <Gurkenglas> Is there a way to make it so that particular commits don't show on a git blame?
[22:43:31] <Gurkenglas> nevermind, should have googled that first
[22:43:47] <ikke> blame.ignoreRevsFile
[22:43:54] *** Joins: austin987 (~null@100.42.98.196)
[22:46:41] *** Quits: masber (~masber@178.197.197.167) (Quit: Client closed)
[22:47:58] *** Joins: dunpeal (~dunpeal@2001:470:69fc:105::3e80)
[22:48:47] *** Joins: asbachb (~asbachb@190.148.209.14)
[22:48:56] *** Parts: cyrus_mc (~cyrus_mc@45.62.180.58) ()
[22:49:44] <dunpeal> Hello!  I'd like to have a setup like this: two branches, a normal `master` and a special branch `published`, with the `published` branch containing a _subset_ of the files in the `master` head. Is that possible to do easily?
[22:50:39] <asbachb> Hi. I wonder if there's a possibility to launch a git-bash on windows with some kind of init script. I'm looking for an installation/user independent approach (so no /etc/profile, bash_profile, etc)
[22:50:53] <ikke> dunpeal: not trivialy
[22:52:04] *** Quits: Murr (~Murr@212-51-143-52.fiber7.init7.net) (Remote host closed the connection)
[22:52:30] *** Joins: Murr (~Murr@212-51-143-52.fiber7.init7.net)
[22:58:56] *** Joins: Narrat (~omnius@p200300df5f45d8ce06ea56fffe2e7cdc.dip0.t-ipconnect.de)
[22:59:11] *** Joins: rahl (~rahl@102.114.64.47)
[23:01:38] *** Joins: EvilDMP_ (~textual@2001:1c00:30e:1f00:a583:6d46:2b7c:b0fc)
[23:03:16] <dscho> asbachb Git Bash respects ~/.bash_profile IIRC
[23:03:31] <asbachb> dscho: But it's user specific
[23:04:03] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 276 seconds)
[23:04:11] <dscho> You could try passing `-c <command> -i`, that _might_ work.
[23:04:36] <asbachb> dscho: Actually that closes the shell again
[23:05:26] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 272 seconds)
[23:05:53] <asbachb> I want to distribute a pack with vanilla git-bash + some additional env variable setup. But I want to keep the ability to replace that vanilla git installation from time to time without fiddeling files in and out.
[23:06:29] <asbachb> So i don't have a problem with an external launcher
[23:08:05] *** Joins: clime (~clime@ip-94-199-195-39.acvyskov.cz)
[23:08:58] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[23:13:05] <dscho> asbachb you could always put stuff into `/etc/profile.d/`
[23:14:04] <asbachb> dscho. From my undestanding this is placed in git-bash installation.
[23:14:27] <dscho> You would create a file in there, yes.
[23:14:58] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 244 seconds)
[23:15:09] <dscho> Otherwise you would have to launch git-bash.exe with that `-c`/`-i` combination I mentioned earlier (if it works, which you need to test).
[23:16:00] <dunpeal> ikke: how would you do it?  I'm thinking of doing a merge-squash of master into published, and just deleting private files from the merge commit.
[23:18:07] *** Quits: TomyWork (~TomyLobo@p200300e80f133c00edca32a9512e1858.dip0.t-ipconnect.de) (Quit: Leaving)
[23:18:41] *** Joins: randallb (~rsbecker@cpe00fc8d49d843-cm00fc8d49d840.cpe.net.cable.rogers.com)
[23:19:08] <dunpeal> And then just to keep resetting `published` into a new merge-squashed commit.
[23:19:11] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 258 seconds)
[23:19:24] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[23:20:03] <ikke> yeah, it would involve something like that
[23:20:09] *** Quits: reprazent (~reprazent@178-118-195-230.access.telenet.be) (Ping timeout: 268 seconds)
[23:20:10] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[23:20:12] <asbachb> dunpeal: Maybe you should rethink what you want to accomblish and why it should be in your git repo
[23:20:36] <asbachb> sounds at least strange to me
[23:21:05] *** Joins: reprazent (~reprazent@178-118-195-230.access.telenet.be)
[23:21:09] *** Gustavo6046_ is now known as Gustavo6046
[23:21:49] <osse> asbachb: if the end result you want is just environment variables then you can make a script and have 'exec bash' at the bottom of it.
[23:22:45] <osse> this will re-read .bashrc, though. so might not fork for you if you want to modify the common vars because they might be overwritten
[23:26:34] <asbachb> osse: the important thing is it that I don't want to modify user/installation directory.
[23:27:26] <asbachb> so .bash_* and/or /etc is not working for now.
[23:28:18] <dunpeal> asbachb: I'm trying to publish a subset of the files of a repo to be more broadly accessible.
[23:28:41] <dunpeal> So that subset goes to a public repo, while the main repo remains private.
[23:30:09] <osse> asbachb: I think my solution should work with that requirement
[23:31:59] <asbachb> dunpeal: So for me it sound like these are different repos.
[23:32:16] <asbachb> osse: Just to clearify I want to to something like this: https://gist.github.com/asbachb/9c01f2f77bd16a5a22bbfb56dd67d608
[23:32:31] <asbachb> And make it available to a newly opened bash.
[23:32:57] *** Joins: durham_ (~durham@2620:10d:c091:480::1:2c67)
[23:33:03] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[23:33:17] <asbachb> So ideally the user click on a shortcut to open that git-bash with that predefined stuff.
[23:33:17] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[23:33:26] *** Quits: durham (~durham@2620:10d:c091:480::1:2c67) (Read error: Connection reset by peer)
[23:34:00] *** Quits: Quietus (~quietus@larch.ratcliffefamily.uk) (Ping timeout: 256 seconds)
[23:37:49] <asbachb> dunpeal: Is it for documentation purposes or should a thirdparty be able to interact with that public repo?
[23:39:09] <dunpeal> asbachb: purely documentation purposes. Effectively the `published` repo is read-only.
[23:39:52] *** Joins: Quietus (~quietus@larch.ratcliffefamily.uk)
[23:41:14] <asbachb> dunpeal: Just my 2 cents: I'd suppose to keep these repos seperated. So you minimize the chance to expose private information by accident. And sync it somehow automated vi CI/CD. So you have a better control on what to publish and what not.
[23:42:24] <osse> asbachb: add 'exec bashg
[23:43:27] <osse> asbachb: try this:  add 'exec bash' at the bottom of the script. then make a shortcut to git-bash.exe with Target:  "C:\Program Files\Git\git-bash.exe" --cd-to-home C:\your\scripthere
[23:43:38] *** Joins: arkho (~ccc@dynamic-acs-24-112-153-241.zoominternet.net)
[23:44:25] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[23:45:33] <arkho> I am trying to set up unauthenticated Git server-based access to a repo. I have placed a 'git-daemon-export-ok' file in the repo on the remote server, but I am still told that either I'm denied access or the repo is not exported. Is there another step?
[23:48:33] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 244 seconds)
[23:48:52] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[23:49:10] <asbachb> osse: Ah cool. That works!
[23:49:24] <osse> asbachb: nice
[23:50:10] <osse> asbachb: there is a small caveat. If the user's .bashrc or other sourced file sets a brand new value for PATH (as opposed to adding something to it like you do) then you'll find that it won't work
[23:50:48] <osse> But I can't remember ever seeing that in real life. IF the user modifies PATH at all it's most usually similar to what you do, in which case you'll have no problems
[23:51:48] <asbachb> But some script is messing with my JAVA_HOME ^^ f*
[23:53:20] *** Joins: Thanatermesis (~Thanaterm@191.92.148.122)
[23:53:49] *** Quits: Thanatermesis (~Thanaterm@191.92.148.122) (Client Quit)
[23:54:36] <asbachb> Mh strange. The path gets changed to "../java-path"
[23:58:18] *** Joins: sniperwolf (~sniperwol@91.230.98.1)
[23:58:27] *** Joins: pulse (~pulse@user/pulse)
