[03:11:35] *** Joins: akronymus[m] (~akronymus@2001:470:69fc:105::f7be)
[03:11:36] <akronymus[m]> Whats the correct way to have a script running every x time in a SAFE website?
[09:08:14] *** Quits: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac) (*.net *.split)
[09:22:45] *** Joins: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac)
[11:07:43] <xeno> akronymus[m]: what the hell is a SAFE website? I should probably know, but... I've only seen "SAFE" in settings (like web sites, languages, books, courses) that have made me not wanting to look into it purely by association - so I don't know the term... 
[11:07:43] *** Joins: Deide (~deide@user/deide)
[11:07:43] *** Joins: jinsun_ (~jinsun@user/jinsun)
[11:10:12] <xeno> akronymus[m]: but my general answer for it would be make sure it's decoupled completely from any of the actual web calls. Having it start as a separate process that just accesses the DB is a good way for instance, or if you feel it won't compromise the stability of the application, just have it bundled into the application and have it triggered by a scheduler 
[11:11:00] <akronymus[m]> xeno I meant it to have a continuously running script purely client side.
[11:11:59] <akronymus[m]> Something like one that updates a number to see how long you've been on the site, for example.
[11:12:50] <akronymus[m]> I know that I am not good with words
[11:13:03] <xeno> ah, good question. javascript function triggered on a schedule? I think the DOM got lotsa events you can listen to 
[11:13:46] <akronymus[m]> I guess I could work with a endless loop that waits for some time.
[11:13:52] <xeno> no, you should not 
[11:14:14] <akronymus[m]> I shouldn't?
[11:14:27] <akronymus[m]> Oh right, because mvu
[11:14:35] <xeno> because of tons of reasons 
[11:15:14] <xeno> try look at e.g. some game dev things or something for javascript, and see how they trigger updates 
[11:15:52] <xeno> or just google "scheduler browser javascript" or something
[11:15:59] <xeno> should be easy to find 
[11:16:02] <akronymus[m]> Seems to mostly be based in callbacks.
[11:16:18] <akronymus[m]> And setting timeouts.
[11:16:40] <xeno> yes
[11:18:42] <akronymus[m]> Basically, what I want to do is update a counter VERY frequently. Dunno if "incremental game" says anything to you.
[11:19:21] <xeno> incremental as in going faster and faster? Should normally still not be a problem 
[11:19:46] <xeno> but what you do need to do is to check the actual time passed and take that into consideration
[11:20:25] <xeno> say if you wanna move something 10 steps each 5 ms, and your scheduler is slightly delayed so it triggers after 7 ms - then you should move it 10*7/5 steps 
[11:20:50] <xeno> that goes no matter how you trigger it 
[11:21:40] <akronymus[m]> Obviously I would work with delta time. 
[11:22:03] <akronymus[m]> But wondering what the best way is without completely locking it up.
[11:22:40] <xeno> yeah, that's by having callbacks to events 
[11:23:31] <xeno> when going faster and faster, you should probably also not alter the framerate/trigger interval - just operate with different deltas 
[13:43:10] *** Joins: kuribas (~user@ptr-25vy0i85c22k4hh4u57.18120a2.ip6.access.telenet.be)
[23:02:13] *** Quits: kuribas (~user@ptr-25vy0i85c22k4hh4u57.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
