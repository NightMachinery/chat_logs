[00:04:10] *** Quits: yauhsien (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[00:05:02] *** Joins: yauhsien (~Yau-Hsien@61-231-32-166.dynamic-ip.hinet.net)
[00:05:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:06:00] *** Joins: schmudde (~schmudde@93-35-146-65.ip55.fastwebnet.it)
[00:10:50] <TimMc> Definitely worth knowing about clojure.walk, though, if you need to transform a nested structure.
[00:12:46] *** Joins: yauhsien_ (~Yau-Hsien@61-231-32-166.dynamic-ip.hinet.net)
[00:13:03] <seabass> TimMc: absolutely; it's on my list of 'things-to-learn' :)
[00:15:21] *** Quits: yauhsien (~Yau-Hsien@61-231-32-166.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[00:16:43] <TimMc> I've only used the functions in there a couple of times but it was very nice to have them handy.
[00:17:22] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[00:19:51] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 256 seconds)
[00:25:00] *** Quits: kipper (~kipz@home.kipz.org) (Ping timeout: 240 seconds)
[00:25:35] *** Joins: kipz (~kipz@home.kipz.org)
[00:25:38] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[00:25:39] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[00:25:39] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[00:41:12] *** Quits: schmudde (~schmudde@93-35-146-65.ip55.fastwebnet.it) (Ping timeout: 252 seconds)
[01:00:18] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[01:00:30] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[01:01:22] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[01:11:18] *** Joins: seschwar (~seschwar@user/seschwar)
[01:16:57] *** Quits: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru) (Ping timeout: 252 seconds)
[01:31:06] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 272 seconds)
[01:35:56] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[01:35:56] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[01:35:56] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[01:42:15] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 252 seconds)
[01:46:43] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[01:47:52] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[01:47:52] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[01:47:52] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[01:54:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:55:28] *** Quits: seabass (~seabass@user/seabass) (Quit: leaving)
[02:01:48] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:21ed:2de6:957:205c)
[02:16:18] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:26:13] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:21ed:2de6:957:205c) (Ping timeout: 250 seconds)
[02:41:57] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[02:46:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[02:50:36] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[02:58:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:59:48] *** Quits: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com) (Ping timeout: 252 seconds)
[03:13:54] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[03:18:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[03:44:05] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:03:44] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 250 seconds)
[04:16:29] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[04:25:27] *** Joins: lagash (lagash@lagash.shelltalk.net)
[04:52:34] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-d449-2685-1032-d72e.res6.spectrum.com) (Remote host closed the connection)
[04:55:08] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[05:09:53] *** Quits: drakonis (drakonis@user/drakonis) (Quit: WeeChat 3.1)
[05:38:56] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[06:02:57] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 252 seconds)
[06:37:21] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Quit: Leaving)
[06:41:27] *** Joins: mbuf (~Shakthi@117.96.195.201)
[06:43:49] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[06:58:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[07:03:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[07:17:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[07:21:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[07:32:12] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:32:41] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:33:56] <aphyr> How do you declare mutually-dependent defrecords in Clojure? Is there a forward class declaration?
[07:35:25] <aphyr> https://gist.github.com/aphyr/1b5d7b7fa4da4244cb3dd408ff96660c
[07:48:21] <seebs> ... incredibly surprisingly, i can't answer that. :P
[07:48:52] <seebs> hey, so, newbie question: is there a convenient Standard Tool for indenting, or at least a popular one? i am definitely missing "go fmt" right now as i try to develop intuitions.
[07:49:20] <seebs> also someone handed me some code in racket once, and i thought "i'll translate it into clojure to see how that works" and it fails in a way that i am definitely a bit unclear on.
[07:50:41] <seebs> ah-hah. i did not appreciate a vec/list distinction
[08:02:10] <seebs> https://gist.github.com/seebs/e36df018f9928d899f0c42bf5af433aa
[08:02:36] *** Quits: yauhsien_ (~Yau-Hsien@61-231-32-166.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[08:02:41] <seebs> okay, so, there's two attempts here at (pointlessly, i know) implementing a binary search on a presumed-sorted vector. b-search is a translation-to-clojure of this done in racket by a friend of mine
[08:03:12] <seebs> s-search is my first actual attempt at writing clojure past 1-2 line repl tests. i clearly have no idea what a formatting convention looks like yet.
[08:04:25] <seebs> i have a bazillion questions about the style/idioms/etc of this. e.g., in go, i'd have done an early-return for the "(= l h)" test, because then it's gone. in clojure i took advantage of (get vec pos) being safe to do even if pos is out of bounds to only need one cond instead of one test before and one after that check, which i'm not sure is actually a good idea.
[08:04:50] <seebs> the "false or N" is not necessarily the idiom i'd normally choose, but i wanted to preserve the semantics of friend's racket program.
[08:05:44] <seebs> things i got wrong in the process: (1) forgot the equal-to-needle case entirely, (2) used m instead of p in the tests, (3) forgot the (+ m 1) on the high half. :P
[08:06:53] <seebs> anyway, am definitely interested on feedback about problems with this, with the caveat that i'm aware that "implement your own binary search by hand" is proooobably not a great use of developer time in general
[08:07:39] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[08:10:10] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[08:14:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[08:34:51] <jeaye> ridcully_: That YT vid was great. Thanks again.
[08:43:00] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[08:43:54] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[08:43:59] *** Joins: lagash (lagash@lagash.shelltalk.net)
[08:44:58] *** Joins: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru)
[08:46:28] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[08:46:46] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:48:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[08:51:48] *** Joins: puchka (~marius@165.73.241.19)
[09:18:14] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[09:22:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[09:27:25] <seebs> someone i was talking to said that he had a CS course at one point where they were asked to do a thing in "any language", and the thing was somewhere in the vicinity of "wait for a change without busy-waiting", and he couldn't find a way to do this at all in clojure. i think this implies condition variables, and indeed, i don't see anything obvious for that.
[09:31:41] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[09:31:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[09:40:44] <seebs> > cat   A high-performance combining fn that yields the catenation of the reduced values. The result is red...
[09:40:59] <seebs> actually that's a "..." meaning "we truncated this description" but it sure did confuse me for a while
[09:41:19] <seebs> > Applies f to every value in the reduction of coll. Foldable.
[09:41:28] <seebs> i'm not sure what foldable means.
[09:41:29] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[09:42:09] <jeaye> agents and atoms can be watched, so you can know when they change without spinning on it.
[09:42:11] <jeaye> https://clojuredocs.org/clojure.core/add-watch
[09:44:03] <seebs> thanks! i have forwarded this to the person who couldn't find it at the time, just for Future Reference
[09:44:28] <seebs> also i've since realized that (vec (take i v)) = (subvec v 0 i) only the latter is probably a much better choice
[09:55:34] <xerox> lol
[09:55:39] <xerox> oops wrong channel
[09:59:09] *** Joins: yauhsien (~Yau-Hsien@61-231-32-166.dynamic-ip.hinet.net)
[09:59:46] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[10:04:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[10:05:06] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[10:14:41] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[10:31:20] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[10:33:52] *** Quits: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net) (Ping timeout: 272 seconds)
[10:35:48] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[10:41:12] <ridcully_> seebs: there is cljfmt and most likely native-image compiled ones nowadays.  e.g. cider uses cljfmt - so i have "reformat outer form" bound in my editor so i clean up in small steps after myself
[10:45:53] *** Joins: struchu (~struchu@staticline-31-183-186-82.toya.net.pl)
[10:46:23] *** Quits: struchu (~struchu@staticline-31-183-186-82.toya.net.pl) (Client Quit)
[10:46:43] *** Joins: struchu (~struchu@staticline-31-183-186-82.toya.net.pl)
[10:48:05] <jeaye> seebs: Also, clojure has core.async which has the analog of "goroutines" with parking instead of blocking. If there's a lot of async waiting going on, that's what I'd use.
[10:55:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:00:28] *** Quits: op2 (~op2@user/op2) (Ping timeout: 272 seconds)
[11:04:35] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[11:04:53] *** Joins: SR-71 (~user@user/SR-71)
[11:09:12] *** Quits: mbuf (~Shakthi@117.96.195.201) (Quit: Leaving)
[11:20:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:24:46] <seebs> i'm currently using atom For Historical Reasons (it has a highlighter i like for go) and i haven't figured out how to integrate that with suitable tools, but i will eventually get there.
[11:24:51] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[11:30:29] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:38:57] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:42:48] <ridcully_> seebs: checkout https://www.clojure-toolbox.com/ - there are two other formatters beside cljfmt and both seem to have native-image builds.  i'll try out cljstyle myself now for babashka
[11:52:05] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[12:00:24] *** Quits: malaclyps (~mala@user/malaclyps) (Ping timeout: 250 seconds)
[12:02:49] *** Quits: Frozenlock (~user@modemcable251.64-203-24.mc.videotron.ca) (Ping timeout: 256 seconds)
[12:04:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[12:11:34] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:11:58] *** Joins: schmudde (~schmudde@93-35-166-154.ip55.fastwebnet.it)
[12:27:38] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[12:27:52] *** Quits: schmudde (~schmudde@93-35-166-154.ip55.fastwebnet.it) (Ping timeout: 272 seconds)
[12:32:01] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[12:37:59] *** Joins: mala (~mala@user/malaclyps)
[12:41:08] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[12:48:30] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[12:48:48] *** Joins: m5zs7k_ (aquares@web10.mydevil.net)
[12:52:42] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[12:54:43] *** Joins: MajorBiscuit (~MajorBisc@c-001-001-032.client.tudelft.eduvpn.nl)
[12:57:46] *** m5zs7k_ is now known as m5zs7k
[13:02:30] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[13:07:00] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[13:08:33] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:f0c6:e281:36c1:5577)
[13:40:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[13:49:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[14:06:52] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[14:11:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[14:15:04] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[14:19:04] *** Joins: op2 (~op2@user/op2)
[14:28:59] *** Joins: yarmo (~yarmo@keyoxide/dev/yarmo)
[14:35:25] *** Quits: kipz (~kipz@home.kipz.org) (Remote host closed the connection)
[14:35:36] *** Joins: kipz (~kipz@home.kipz.org)
[14:45:23] <yeik-the-spik[m]> Could you recommend a svg manipulation library? I have tikkba and dali on my radar. Is there any other I am missing?
[14:46:01] <yeik-the-spik[m]> Tikkba uses analema, and that one looks kinda dead. Dali is on alpha status
[14:46:23] <yeik-the-spik[m]> I could use batik directly, by I rather use a wrapper
[14:46:53] <yeik-the-spik[m]> I am a bit tired of clojure OOP
[14:55:43] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[14:57:48] <EdwardIII> clojure.test doesn't come with like assert-contains, right? should i be looking at assert-predicate? i currently have this: https://gist.github.com/EdwardIII/c0a87821b9a85e26de6a64b8dfc9a9ff 
[15:00:29] <EdwardIII> tried to find some examples of assert-predicate online to get a feel for it's use but i'm coming up blank
[15:00:54] <ridcully_> are you looking for better error/assert messages?
[15:01:42] <EdwardIII> yes. the default one where it just spits out the forms is not too bad actually, but i feel like we can do better :)
[15:02:49] <EdwardIII> just something like "Expected <your text> in <actual text>"
[15:05:19] <EdwardIII> ah so i guess assert-expr is what i need
[15:08:34] <ridcully_> oh i did not know about that.  i usually wrote my own asserts
[15:13:23] <EdwardIII> ridcully_: without assert-expr?
[15:13:39] <EdwardIII> i don't suppose you have any public examples you can share? just curious!
[15:16:40] *** Joins: patrice (~patrice@user/patrice)
[15:21:40] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[15:26:04] <ridcully_> might be, but not out of my head.  i switched to kaocha und the runner gives diffs that are useful most of the time
[15:26:50] <ridcully_> i know for sure i wrote one for spec based tests, but i can not be arsed to search for it.  sorry :}
[15:26:52] <EdwardIII> ah ha OK
[15:27:11] <EdwardIII> thanks for your input thus far :)
[15:30:51] <Para> clojure.test is indeed very barebones in regards to its assertions, you might find something more useful from https://github.com/lambdaisland/kaocha but no guarantees :)
[15:31:15] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[15:31:30] <Para> to be specific, kaocha is a clojure.test runner, but it has quite a lot of libraries and a whole bunch of documentation around it, so maybe they point to some lib that has better assertions for your needs
[15:49:43] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[15:50:02] <EdwardIII> that does make sense :) thanks
[15:51:13] <EdwardIII> i did have a crack at making a custom assertion for fun, but i don't quite see why i'm getting "unable to resolve symbol"? https://gist.github.com/EdwardIII/1a64c55c3b99187093130abbc98c5b35
[15:51:51] <EdwardIII> never used multimethods before but from what i saw in the docs this seems OK
[15:54:18] <ridcully_> t/do-report maybe?
[15:54:23] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[15:55:48] <EdwardIII> just tried that along with adding (:gen-class) but getting the same thing: https://gist.github.com/EdwardIII/1a64c55c3b99187093130abbc98c5b35
[15:57:15] <ridcully_> running the doc example works
[15:57:44] <EdwardIII> hmm maybe i need to switch everything over to t/*, i'll try that
[15:59:14] <EdwardIII> nope, same thing. hmm
[15:59:42] <EdwardIII> maybe it doesn't work with the test runner somehow?
[16:01:25] <Para> I'm thinking it might be a peculiarity from the nested macros.
[16:01:36] <Para> After all, deftest, testing and the assertion predicates are all macros.
[16:03:14] <EdwardIII> Para: hmm but like ridcully_ their example seems to work?
[16:03:35] <Para> vOv :)
[16:13:35] <EdwardIII> hmm, i copied their exact example in, it works, tweaked the guts a little, straight back to 'Unable to resolve symbol: roughly in this context'
[16:13:48] <EdwardIII> https://gist.github.com/EdwardIII/fd0b8c01145e2c04bedd1ced96cf3c00
[16:17:13] <ridcully_> EdwardIII: https://termbin.com/3fiw
[16:17:53] <ridcully_> EdwardIII: form is actually the full form and not just the args; do-report and the result are two things.  so a do is needed
[16:22:15] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 252 seconds)
[16:23:29] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[16:25:34] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[16:25:34] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[16:25:34] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[16:26:33] <EdwardIII> thanks ridcully_! i'm just reading now and trying to understand a bit why this is, and why i was just getting 'symbol not found' rather than some kind of other error
[16:28:11] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[16:34:21] *** Quits: puchka (~marius@165.73.241.19) (Ping timeout: 252 seconds)
[16:40:32] <ridcully_> if you run that macroexpand-all in the comment with your old code, you will see that assert-contains? ends up on all the wrong places.  it is after all `(first form)` 
[16:40:59] <EdwardIII> that was pretty good. i was trying to expand it with macroexpand-1 but getting nowhere. thanks for all the pointers!
[16:41:11] <ridcully_> so the error you are seeing is actually not the one you typed inside `is` but is the one the macro expanded to
[16:46:22] *** Joins: puchka (~marius@109.70.150.114)
[16:51:58] *** Quits: puchka (~marius@109.70.150.114) (Ping timeout: 272 seconds)
[16:55:49] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Remote host closed the connection)
[16:58:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[16:58:53] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[17:02:50] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[17:03:05] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[17:07:21] *** Quits: MajorBiscuit (~MajorBisc@c-001-001-032.client.tudelft.eduvpn.nl) (Ping timeout: 252 seconds)
[17:11:38] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[17:12:40] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[17:14:05] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[17:15:00] *** Joins: yewscion (~yewscion@52.94.133.128)
[17:26:01] *** Joins: paul_j (~user@67.26.169.217.in-addr.arpa)
[17:29:08] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[17:29:20] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:30:34] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:33:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[17:54:39] *** Joins: patrice (~patrice@user/patrice)
[18:03:48] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[18:05:58] *** Joins: MajorBiscuit (~MajorBisc@c-001-001-032.client.tudelft.eduvpn.nl)
[18:28:14] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 272 seconds)
[18:33:27] <aphyr> seebs: for blocking on another thread, I'd use promise (for a single event) or j.u.c.CyclicBarrier (for repeated or multi-thread sync)
[18:44:40] *** Joins: puchka (~marius@172.107.93.166)
[18:50:53] *** Quits: struchu (~struchu@staticline-31-183-186-82.toya.net.pl) (Quit: WeeChat 3.3)
[19:12:20] <TimMc> aphyr: I feel like maybe the best you can do with the records is... *hand waves* something with interfaces?
[19:14:31] <aphyr> TimMc: yeah, I think that's right
[19:15:55] <seebs> so, more people around: i seek information about code style choices and tragic mistakes, etc.
[19:15:57] <seebs> https://gist.github.com/seebs/e36df018f9928d899f0c42bf5af433aa
[19:16:16] <seebs> two functions. one is an attempt to translate an implementation a friend made of binary-search using Racket
[19:16:39] <seebs> this because we stumbled across a blog post saying the success rate of experienced engineers trying to write a binary search without actually testing it was around 10%, which i think is actually probably right
[19:16:52] <seebs> the second is my attempt to write it in a way that i thought was less confusing
[19:18:15] <ridcully_> seebs: use def only to hold something at toplevel inside a namespace.  never inside defn etc.  use let instead
[19:19:39] <seebs> yeah, i was unclear on that. like, i just wasn't clear on what exactly (def ...) does differently from the (let ...), but it was a single-line (define ...) in racket, so i translated it.
[19:20:38] <seebs> i've asked the writer why it's a define instead of a let, since they used let for a later part of it.
[19:21:04] <ridcully_> def puts a var inside a namespace (thread safe etc)
[19:21:14] <ridcully_> let is for local vars
[19:22:07] <seebs> i wonder whether that differs in racket
[19:22:32] <seebs> it ... doesn't look like it does
[19:22:51] <seebs> so that would indeed imply that, after this, l would be set to the value it had in the lowest recursion of the function
[19:23:37] <ridcully_> i can not say.  seeing def all over the place is usually an indicator of a beginner struggling with fp/immutable data
[19:24:01] <ridcully_> then they ask how to change that var and someone will tell them that atoms are used for that
[19:24:15] <seebs> in this particular case, it's someone who's very lispy but i think mostly racket, which is much less immutable-ish
[19:24:24] <ridcully_> and then kittens cry somewhere
[19:24:57] <seebs> same person who complained about needing to spend two days implementing tail calls in python, by which they meant implementing the no-stack-frame behavior for tail recursion, because they were implementing "read each line in a file" recursively
[19:25:18] <seebs> so like. very lispy, but i think not used to engineering-at-scale at all
[19:27:00] *** Quits: puchka (~marius@172.107.93.166) (Ping timeout: 240 seconds)
[19:29:05] *** Joins: puchka (~marius@172.107.93.165)
[19:29:12] <seebs> and when i originally looked at this, i really disliked the part where it had to add an offset to a return value if the return value wasn't false, and actually i think that even breaks the tail recursion thing, and also i think the subvec ops used were copies.
[19:30:10] <seebs> and it just seemed like an anonymous function can take advantage of being a closure and not need to pass the needle and haystack around or change them. so basically, this was more like just iterating on setting the bounds, which seemed simpler.
[19:33:50] <ridcully_> while functions are an recur "entry point" i would use loop here
[19:42:25] <seebs> ooh. i didn't know that existed. i guess i'll go look at that next. :)
[19:42:53] <seebs> friend says that in racket, (define ...) would be namespaced to that function, so it's idiomatic to use (define) to avoid creating more indentation.
[19:44:18] <TimMc> Ah, yeah, that's a difference.
[19:44:33] <seebs> is there a non-indenting way to create a local binding? my vague intuition would be "no, because the binding necessarily creates an implied context of where-this-binding-exists, so that would be misleading"
[19:45:00] <TimMc> Horrible, horrible macros that allow you to de-indent your code? :-)
[19:45:08] <TimMc> I think there's a library for that. Arrows something.
[19:45:13] *** Quits: Guest3567 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Quit: Reconnecting)
[19:45:25] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[19:45:49] *** sudden is now known as Guest402
[19:46:15] *** Quits: Guest402 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[19:46:15] *** Joins: Guest402 (~cat@user/sudden)
[19:48:47] <seebs> okay, i updated my gist, it does look simpler with (loop) once i figured out how that works
[19:48:55] <ridcully_> i never missed that "c-style" of "hey lets put a var somewhere... hope your editor helps you finding it quickly..."
[19:49:17] <seebs> racketeer friend is bothered by cond not parenthesizing its condition/expr pairs.
[19:49:48] *** Joins: seschwar (~seschwar@user/seschwar)
[19:52:09] <seebs> thanks, i hadn't noticed loops, and i think i'd been given the impression that looping was Unlispy and therefore probably a thoughtcrime
[19:55:48] <ridcully_> the jvm has no direct support for TCO - so recursion will at some point blow your stack.  using loop/recur is here to help with that.
[19:56:33] <opqdonut> seebs: the secret clojure trick for interleaving definitions and side-effects is `(let [a (+ 1 1) _ (prn a) x (+ a 1) _ (prn x) z (* x 2) _ (prn z)])
[19:56:41] <opqdonut> tada! no indentation :P
[19:57:30] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[20:00:01] <seebs> i think i'm used to lispy people being hostile to any kind of iteration that isn't at least *expressed* as tail recursion (with the caveat that, because jvm, you need recur to do that)
[20:00:40] <ridcully_> and easily turn-off-able by adding a `#` before the `_`
[20:01:03] <opqdonut> exactly!
[20:01:14] <seebs> wait what does that do
[20:01:15] <ridcully_> but in the debug-print case i'd use doto
[20:01:30] <opqdonut> I've started warming up to hashp for debug prints
[20:01:44] <opqdonut> seebs: chuck it in a file, add line returns, indent, think, run
[20:02:04] <seebs> so, the lack of TCO in the JVM implies you can't have a two-function recursion loop which would be eaten by TCO?
[20:02:13] <opqdonut> yep
[20:02:27] <opqdonut> you can use a trampoline to avoid blowing the stack though
[20:02:56] <opqdonut> I don't think I've ever found a valid usecase for trampoline
[20:03:20] <opqdonut> once you have enough data that the stack matters, the perf hit of a trampoline usually doesn't cut it either
[20:03:24] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[20:03:39] <opqdonut> maybe some sort of long-running asyncy event loop thing
[20:04:00] <seebs> so i don't understand the implications of the #_ instead of _, cljfmt doesn't seem to think that matters.
[20:04:14] <opqdonut> #_ is a reader macro that ignores the next sexp
[20:04:26] <opqdonut> and _ is just an idiomatic name for an unused variable
[20:05:33] <seebs> ahh
[20:05:41] <seebs> neat
[20:05:56] <opqdonut> #_ has great ergonomics
[20:06:05] <opqdonut> also #_#_ for commeting out a key-val pair in a map
[20:07:55] <seebs> they stack?
[20:08:00] <opqdonut> yeah!
[20:08:37] <seebs> i once knew someone whose custom user title on a forum was "DISOWNING DOESN'T STACK, ASSHOLE"
[20:09:04] <seebs> because they had a narcissistic family member who would angrily disown them, then tearfully retract that, on a regular basis, and once tried to disown them before retracting the previous disowning.
[20:09:10] <seebs> and it just stays funny to me
[20:23:10] <technomancy> in clojure many of the problems that scheme solves with recursion get solved with laziness instead
[20:23:17] <technomancy> (operating on lists of unlimited length)
[20:23:22] <TimMc> seebs: Weird corner case, since I know you like those: #(do #_ %3 %)
[20:23:54] <seebs> what's #(?
[20:24:04] <seebs> that reminds me! i had a thing i couldn't figure out the other day.
[20:24:29] <seebs> oh right, that's the function inline with % things
[20:25:18] <Para> seebs: everything starting with # is something special, have a look at  https://clojure.org/reference/reader#_dispatch
[20:25:35] <seebs> "(fn [x] x)" -> function which returns its parameter. how do i write that with #(...%...?
[20:25:38] <opqdonut> TimMc: wow, that's cool
[20:25:51] <opqdonut> seebs: #(do %) is the usual workaround
[20:25:51] <ridcully_> that is just identity
[20:26:00] <technomancy> TimMc: *muffled screaming*
[20:26:02] <opqdonut> but often I just write an fn for things like that
[20:26:14] <opqdonut> or perhaps use constantly or identity
[20:26:49] <seebs> oooh, so `#_ %3` forces it to be a 3-arg function, but then only %1 is used
[20:26:55] <technomancy> https://p.hagelb.org/h/you-think-its-cool.gif
[20:29:04] <seebs> i'm now wondering how much of my historical bouncing-off-lisps has been entirely a result of running into the wrong lisp fans
[20:29:12] *** Joins: remyrd (~remyrd@194.182.168.180)
[20:29:34] <opqdonut> the good thing about clojure compared to other lisps is that people actually write a lot of real-world software with it
[20:29:46] <opqdonut> and there's quite a bit of activity around the tooling etc.
[20:30:09] <opqdonut> the bad thing is that it's not a very ... principled language
[20:30:20] <seebs> what do you mean by "principled"?
[20:30:23] <opqdonut> you can see all sorts of weird seams and half-finished features
[20:30:30] <opqdonut> and inconsitencies
[20:30:46] <seebs> i have definitely gotten the impression that a lot of lispy stuff is sort of... not really aimed at being used at-scale?
[20:31:05] <aphyr> Most of my lisp is intended for use at scale, but I'm weird ;-)
[20:31:21] <opqdonut> the latest nice example of some seams showing is this:
[20:31:22] <aphyr> (I worked at Factual, which had roughly 400 people and was heavily clojure)
[20:31:27] <opqdonut> (try (keys [:a]) (catch Throwable t :caught))
[20:31:50] <opqdonut> (try (doall (keys [:a])) (catch Throwable t :caught)) -- you might think this is the fix... :)
[20:32:17] <aphyr> ahahahaha
[20:32:17] <opqdonut> (try (into [] (keys [:a])) (catch Throwable t :caught)) -- but it turns out you need this
[20:32:28] <aphyr> oh this one's GOOD
[20:32:43] <opqdonut> yeah, took me quite some time
[20:33:45] <seebs> okay what's happening there
[20:33:48] <Para> ._.
[20:34:04] <TimMc> laaaazy
[20:34:08] <TimMc> seebs: Try (class (keys [:a]))
[20:34:13] <TimMc> then without the class call
[20:34:15] <opqdonut> TimMc: it's not laziness as such
[20:34:36] <TimMc> No?
[20:34:38] <opqdonut> or rather, not the usual sort of laziness
[20:34:42] <opqdonut> otherwise a doall would fix it
[20:34:58] <TimMc> hmm
[20:35:04] <opqdonut> now you're getting it
[20:35:53] <TimMc> You can call next, but not first? :-)
[20:35:58] <seebs> (I worked [...]) <-- brief moment of insight: maybe capital-letter identifiers are magic?
[20:37:33] <Para> People generally avoid capitalized identifiers, probably because they're a very good indicator of either interop or protocols being used.
[20:37:54] <opqdonut> schemas tend to get capital letters
[20:38:00] <Para> And by protocol I mean record. Always confuse those two.
[20:38:00] <opqdonut> it's a nice convention
[20:38:14] <Para> capitalized = "object-y thing"
[20:38:18] <TimMc> https://github.com/clojure/clojure/blob/84811650bb33846c7212f391468f9661819b906b/src/jvm/clojure/lang/APersistentMap.java#L168
[20:38:30] <opqdonut> TimMc: you got it
[20:38:57] <opqdonut> here's another seam of a different sort:
[20:39:28] <opqdonut> https://gist.github.com/opqdonut/b74b7483bd7304f0d0648561efdcb253
[20:39:56] <TimMc> (count (keys [:a :b :c :d])) => 4
[20:40:04] <TimMc> (first (keys [:a :b :c :d])) => ðŸ’¥
[20:40:07] <opqdonut> TimMc: yes, lovely
[20:41:16] <TimMc> Whoa, what's this memory-meter thing?
[20:41:30] <TimMc> I don't recall seeing *that* around  years ago.
[20:41:33] <TimMc> *4 years
[20:42:16] <opqdonut> released 2018 it seems
[20:44:22] <seebs> okay why does keys [...] not work though? i would have thought keys on a vec would be, like, [0 1 2 3] or something
[20:44:41] <TimMc> You'd think!
[20:45:23] *** Joins: silasfox (~sbv@p4fe8dbf5.dip0.t-ipconnect.de)
[20:45:25] <TimMc> I regard it as a bug that it doesn't work on vectors. (Or sets, I assume.)
[20:45:33] <seebs> hmm
[20:45:58] <seebs> see, i'd think of a set as being more like an unkeyed pile of values, than a pile of keys with no values
[20:46:04] <seebs> but i guess it makes more sense to think of it as keys than as values
[20:46:05] <technomancy> (-> [a 1 x 99] (let (+ a x))) ; are we doing cursed clojure?
[20:46:17] *** Quits: zak (~zak@144.172.69.61) (Ping timeout: 240 seconds)
[20:47:24] <seebs> wat
[20:47:31] *** Joins: sagax (~sagax_nb@user/sagax)
[20:47:56] <seebs> oh hey, that link to APersistentMap.java makes me more curious: what *is* happening in running clojure? like, is clojure *compiling to* jvm, or is it being interpreted by a jvm interpreter, or ?
[20:48:26] <ridcully_> it's compiled to jvm bytecode
[20:48:57] <technomancy> it's compiled and interpreted, and then sometimes compiled again =)
[20:49:00] <ridcully_> there is a clojure interpreter as a library
[20:49:45] <technomancy> the JVM interprets the bytecode emitted by the clojure compiler until it detects a hotspot that needs to be optimized, then it turns it into machine code.
[20:50:42] <ridcully_> it's also interpreted while compiling
[20:52:37] *** Quits: SR-71 (~user@user/SR-71) (Remote host closed the connection)
[20:53:05] <TimMc> seebs: I think it goes like this... 1) Reader parses input files and returns top-level expressions, one at a time. Reader-macros like get called during this phase. 2) AST is macro-expanded. 3) Compiler walks the AST and emits JVM bytecode, including turning function definitions into classes. 4) Bytecode gets executed.
[20:53:20] <TimMc> s/like get/get/
[20:54:06] <TimMc> The important thing here is that it's compiled incrementally, line-at-a-time (well, expression-at-a-time). There's no whole-program compilation like you get in Java.
[20:56:02] <TimMc> Single-pass compilation means it's very suitable for use at the REPL, but it does cause some problems for mututally recursive definitions like aphyr was trying to do earlier.
[20:57:24] <technomancy> problems? or opportunities?!
[20:58:52] <TimMc> ;-)
[20:59:24] <technomancy> seriously though; being able to read from the top to the bottom and just know you're not going to run into any bullshit is real refreshing
[20:59:57] <TimMc> seebs: Here's where the let* special form is implemented, for example: https://github.com/clojure/clojure/blob/84811650bb33846c7212f391468f9661819b906b/src/jvm/clojure/lang/Compiler.java#L6336
[21:00:16] <TimMc> technomancy: "Hmm, where is this helper function defined? Up!"
[21:00:37] <seebs> so the clojure compiler itself is not yet self-hosting. :)
[21:00:37] <TimMc> It enforces a partial ordering on the code that's kind of a relief.
[21:00:57] <seebs> *thinking*
[21:02:20] *** Quits: paul_j (~user@67.26.169.217.in-addr.arpa) (Quit: Asta la vista)
[21:03:00] <technomancy> seebs: they were talking a lot about that like 10y ago and then they kinda just ... stopped
[21:03:06] <seebs> so... as a REPL, it's loading the code it generates as it goes, but it can also compile-to-jar and then the compiler is done and we just have the code. but... do we still have a compiler present at runtime for eval and the like?
[21:03:57] <TimMc> Yep!
[21:04:41] <technomancy> you actually more or less can't ship without the compiler
[21:04:45] <TimMc> When you run (eval (read-string "(+ 1 2)")) you're invoking the reader and then compiler.
[21:04:55] <technomancy> it's tightly coupled with the runtime
[21:12:43] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[21:14:07] *** Quits: MajorBiscuit (~MajorBisc@c-001-001-032.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:14:09] <seebs> oh interesting, "eval" and "read-string" are separate operations. that makes sense.
[21:18:51] <Para> There's a few different read-strings, however :) Because why not.
[21:19:29] <Para> https://clojuredocs.org/clojure.core/read-string https://clojuredocs.org/clojure.edn/read-string and replacements for both of these in https://github.com/clojure/tools.reader
[21:20:00] <Para> (there's of course an actual reason for each)
[21:23:23] *** Quits: Harlin (~DonQixote@75-163-174-136.clsp.qwest.net) (Quit: Leaving)
[21:29:46] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[21:34:33] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[21:39:41] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 256 seconds)
[21:42:00] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[21:42:00] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[21:42:00] *** Joins: turlando (~turlando@user/turlando)
[21:53:20] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: No Ping reply in 180 seconds.)
[21:54:46] *** Joins: mzan (~quassel@mail.asterisell.com)
[22:02:45] *** Joins: blei (~blei@c-73-153-189-5.hsd1.co.comcast.net)
[22:02:50] <blei> anyone interested in ML and looking for work
[22:04:29] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[22:04:58] <ridcully_> Meta Language or Machine Learning ?
[22:05:14] <technomancy> always had a soft spot for ocaml
[22:06:43] <blei> sounds good. please PM me your resume
[22:07:07] <seebs> ... i feel like that is not really an answer to the question
[22:07:39] <blei> that also works, please PM me your resume
[22:09:16] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[22:12:20] <TimMc> >_<
[22:13:01] <seebs> well that biases me towards thinking it's machine learning
[22:13:19] <TimMc> Could be Managing Leopards.
[22:13:32] <TimMc> (this is the professional version of herding cats)
[22:13:47] <technomancy> seebs: savage
[22:15:20] <seebs> "if all the other machine learning algorithms jumped off a cliff, would you do it too?"
[22:15:54] <TimMc> I mean, who am I to deviate from my training data.
[22:21:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[22:24:21] <blei> btw I noticed last night that weka has a module for Clojure algorithms
[22:26:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[22:33:08] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:33:43] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:45:25] *** Quits: blei (~blei@c-73-153-189-5.hsd1.co.comcast.net) (Ping timeout: 256 seconds)
[22:47:48] *** Quits: puchka (~marius@172.107.93.165) (Ping timeout: 252 seconds)
[22:49:43] *** Joins: puchka (~marius@172.107.93.165)
[22:57:53] *** Quits: lunik1 (~lunik1@37.205.14.203) (Remote host closed the connection)
[22:58:13] *** Joins: lunik1 (~lunik1@37.205.14.203)
[23:03:42] *** Quits: puchka (~marius@172.107.93.165) (Quit: leaving)
[23:06:32] *** Joins: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[23:12:56] *** Quits: lunik1 (~lunik1@37.205.14.203) (Quit: :x)
[23:14:31] *** Joins: fluxit (~fluxit@techsmix.net)
[23:16:34] *** Joins: lunik1 (~lunik1@37.205.14.203)
[23:26:38] <goodger> dafuq
[23:52:21] *** Quits: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek_caan)
