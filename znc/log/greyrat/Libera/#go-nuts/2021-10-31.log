[00:01:20] *** Quits: craekz (~craekz@user/craekz) (Remote host closed the connection)
[00:06:18] *** Joins: tebruno994 (~tebruno99@user/tebruno99)
[00:06:55] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[00:08:11] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Ping timeout: 264 seconds)
[00:08:11] *** tebruno994 is now known as tebruno99
[00:08:14] *** Quits: mrmanner (~jmanner@user/mrmanner) (Ping timeout: 260 seconds)
[00:13:30] *** Joins: FreeBDSM (~uzer@user/freebdsm)
[00:13:45] *** Joins: craekz (~craekz@user/craekz)
[00:15:07] <FreeBDSM> how to specify path, relative to current executable when calling exec.Command()?
[00:15:59] *** Quits: keyjoo (~keyjoo@62.176.30.155) (Ping timeout: 264 seconds)
[00:17:01] *** Joins: tebruno997 (~tebruno99@user/tebruno99)
[00:17:53] *** Joins: keyjoo_ (~keyjoo@62.176.30.155)
[00:18:59] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Ping timeout: 264 seconds)
[00:18:59] *** tebruno997 is now known as tebruno99
[00:19:45] <foobaz> FreeBDSM: first use os.Args[0] to determine the location of the executable relative to the present working directory
[00:23:15] *** Joins: craekz_ (~craekz@user/craekz)
[00:23:40] *** Quits: craekz_ (~craekz@user/craekz) (Client Quit)
[00:24:16] *** Quits: craekz (~craekz@user/craekz) (Ping timeout: 245 seconds)
[00:24:25] *** Joins: craekz (~craekz@user/craekz)
[00:27:01] *** Quits: Berlin36 (~Berlin36@user/berlin36) (Quit: i sleep)
[00:27:33] *** Joins: tebruno996 (~tebruno99@user/tebruno99)
[00:29:14] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Ping timeout: 260 seconds)
[00:29:14] *** tebruno996 is now known as tebruno99
[00:31:26] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 246 seconds)
[00:37:51] *** Joins: tebruno991 (~tebruno99@user/tebruno99)
[00:39:16] *** Parts: craekz (~craekz@user/craekz) ()
[00:39:43] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Ping timeout: 260 seconds)
[00:39:43] *** tebruno991 is now known as tebruno99
[00:41:04] <FreeBDSM> foobaz: https://paste.sh/gzILejWm#HDHe84XO9rHIWGPNrI9G7_yz
[00:41:57] <foobaz> as expected
[00:43:04] <foobaz> that output is useful because it tells you the path to the current executable is ./
[00:43:19] <foobaz> and you need to know the path to the current executable, if you wish to specify a path relative to the current executable
[00:43:25] <FreeBDSM> foobaz: but pwd is /go/src
[00:44:10] <foobaz> sure, but you did not ask how to specify a path relative to the pwd
[00:44:17] <foobaz> you asked how to specify a path relative to the current executable
[00:47:12] *** Joins: normen_ (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de)
[00:47:35] <foobaz> it is not necessary to determine the absolute path to achieve your goal
[00:47:53] <foobaz> doing so would only add unnecessary complexity
[00:48:25] *** Joins: tebruno997 (~tebruno99@user/tebruno99)
[00:48:27] <FreeBDSM> thanks, just figured that it's simpler to add WORKDIR before running the go script
[00:48:54] <FreeBDSM> and then exec.Command("./myscript.sh") works fine
[00:49:06] *** Quits: Memory (sid459764@user/memory) ()
[00:49:59] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Ping timeout: 260 seconds)
[00:50:00] *** tebruno997 is now known as tebruno99
[00:50:06] *** Quits: normen (~normen@p200300d71721dd00e85fdb7a7a6a5cc3.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[00:50:08] *** normen_ is now known as normen
[00:58:27] *** Joins: tebruno992 (~tebruno99@user/tebruno99)
[00:59:07] *** Parts: keyjoo_ (~keyjoo@62.176.30.155) ()
[01:00:23] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Ping timeout: 264 seconds)
[01:00:23] *** tebruno992 is now known as tebruno99
[01:02:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[01:04:02] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
[01:04:31] *** Joins: fikran (~fikran@user/fikran)
[01:08:58] *** Joins: tebruno992 (~tebruno99@user/tebruno99)
[01:10:46] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Ping timeout: 260 seconds)
[01:10:46] *** tebruno992 is now known as tebruno99
[01:11:27] *** Joins: vovs03 (~En3rgy.UM@62.176.30.155)
[01:12:36] *** Joins: nitrix (~nitrix@user/nitrix)
[01:13:10] <vovs03> Hi. How get start for golang?
[01:13:31] <ikke> https://tour.golang.org/
[01:13:46] <vovs03> ikke: thanks
[01:19:01] *** Joins: tebruno991 (~tebruno99@user/tebruno99)
[01:19:35] *** Quits: kinlo (~peter@user/kinlo) (Ping timeout: 264 seconds)
[01:20:27] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[01:20:34] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Ping timeout: 260 seconds)
[01:20:34] *** tebruno991 is now known as tebruno99
[01:24:17] *** Joins: kinlo (~peter@user/kinlo)
[01:28:52] *** Joins: tebruno998 (~tebruno99@user/tebruno99)
[01:30:31] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[01:30:59] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Ping timeout: 264 seconds)
[01:30:59] *** tebruno998 is now known as tebruno99
[01:31:00] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[01:34:04] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[01:34:34] *** Quits: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[01:40:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[01:42:49] <FreeBDSM> exec.Command() doesn't seem to return an exit code, is there a way to obtain it? exec.Wait() seems to return an exit code, but the docs confuse me with `The command must have been started by Start.`, while I don't use exec.Start().
[01:42:52] *** Joins: fikran (~fikran@user/fikran)
[01:44:42] <ikke> FreeBDSM: Isn't exec.Command just a struct?
[01:44:54] <ikke> Or a function that returns one, I mean
[01:45:02] <ikke> https://pkg.go.dev/os/exec#Command
[01:46:29] <ikke> You need to call either Run or Start for it to actually do something
[01:47:11] <FreeBDSM> ikke: oh, so the fact that it gets executed is actually a consequence of .Output()?
[01:47:19] <FreeBDSM> out, err := exec.Command("date").Output()
[01:47:57] <ikke> 'Output runs the command and returns its standard output. Any returned error will usually be of type *ExitError. "
[01:48:13] <FreeBDSM> yeah, but that's a lie
[01:48:26] <ikke> What?
[01:48:28] <FreeBDSM> it's `out, err := exec.Command("date").Output()`
[01:48:37] <FreeBDSM> surely it returns not just standard output
[01:48:41] <FreeBDSM> but also standard error
[01:48:55] <FreeBDSM> which contradicts the part you quoted
[01:49:36] <FreeBDSM> am I not correct?
[01:50:07] <ikke> Well, if you see the function signature, it's immediately obvious that it's not the _only_ thing it returns
[01:50:18] <lazyreader> "If c.Stderr was nil, Output populates ExitError.Stderr."
[01:51:06] <lazyreader> Stderr being a reader you can optionally set on the Cmd struct.
[01:51:49] <ikke> FreeBDSM: But in any case, the error returned, if not nil, contains the exit code
[01:52:06] <FreeBDSM> ikke: that's not true
[01:52:09] <ikke> https://pkg.go.dev/os/exec#ExitError
[01:52:16] <ikke> https://pkg.go.dev/os#ProcessState
[01:52:22] <FreeBDSM> end, stdOut: , stdErr: fork/exec ./rehost-video.sh: no such file or directory
[01:52:40] <FreeBDSM> this is from a log from the interaction with my .go script
[01:53:08] <FreeBDSM> the code behind that line was `log.Printf("end, stdOut: %s, stdErr: %s", urls, stdOut, stdErr)
[01:53:16] <lazyreader> that's just fmt.Printf on the outputs? ExitError has some more fields you might be interested in
[01:53:21] *** Joins: krux02 (~krux02@p200300ca8f00b9007f473b6073e7a3c7.dip0.t-ipconnect.de)
[01:53:47] <lazyreader> like ExitCode, as ikke linked above
[01:54:14] <lazyreader> (well, methods, technically, but w/e)
[01:55:06] <FreeBDSM> I barely understand the language, sorry, it takes time for me to get how to 'reach' for ExitCode
[01:55:21] <ikke> err.ExitCode()
[01:55:37] <ikke> (after you checked that it's not nil)
[01:56:09] <ikke> It returns an ExitError, which has OsState embedded
[01:56:23] <ikke> ProcessState*
[01:57:04] <FreeBDSM> so 'err' is such an object that has methods/fields/properties/whatever that can be accessed like log.Printf(err.ExitCode()), but at the same time there's some 'master record' that is shown when I do log.Printf() against the object itself?
[01:57:53] <ikke> A lot of structs have string formatters, which prints them in a friendly way, but do not show all details (stringer interface)
[01:58:28] <FreeBDSM> ikke: do you by any chance know the correct term on how it is called?
[01:58:40] <FreeBDSM> or is 'stringer interface' the one?
[01:58:43] <ikke> yes
[01:58:52] <FreeBDSM> got it, researching/reading, thanks
[01:59:01] <ikke> https://pkg.go.dev/fmt#Stringer
[01:59:54] <ikke> https://pkg.go.dev/os/exec#Cmd.String
[02:00:16] *** Joins: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de)
[02:06:59] <FreeBDSM> ikke: https://cs.opensource.google/go/go/+/refs/tags/go1.17.2:src/fmt/print.go;l=62 did I get it right that in my program with bunch of classes, objects, types, structs etc - I'd have to not only provide a .String() method for stuff, but also `type Stringer interface { String() string }`  as well?
[02:07:24] <ikke> No, interfaces are implicit
[02:07:39] <ikke> as long as you have a method called String() that returns a string, it satisfies that interface
[02:09:05] <leitz> if k is a *big.Int, how do I convert it to a plain int if the number is small enough?  So far "int(k)" doesn't seem to work, nor any of the other conversions I've tried.
[02:09:30] <FreeBDSM> ikke: thank you for the explainations
[02:09:42] <fizzie> leitz: It's not a built-in conversion. You call the Int64() method of the big.Int to get an int64, which you can then convert further.
[02:11:05] <fizzie> (Or the Uint64() method if that's more reasonable.)
[02:11:09] *** Joins: dntreou (~yakiza@host-87-2-222-6.retail.telecomitalia.it)
[02:15:11] <FreeBDSM> ikke: I noticed that log (which I use instead of fmt for some reason, probably because it prepends printed stuff with datetime) doesn't have such an interface, but that package imports fmt package, is that why stringer interface still allows me to print structs the way their .String() methods specify them to get printed?
[02:16:16] <ikke> Other functions/methods can check for the Stringer interface and call .String() in that case
[02:17:15] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[02:17:21] <FreeBDSM> ikke: https://cs.opensource.google/go/go/+/refs/tags/go1.17.2:src/log/log.go ctrl+f 'Stringer' - 0 resoolts
[02:17:22] <leitz> fizzie, no luck for me so far. crypto/rand.Int returns *big.Int, and I'm trying to figure out how to convert that to a regular int.
[02:18:06] <leitz> Even my wasabi peas aren't waking me up enough to figure this out...
[02:18:12] <fizzie> leitz: Like I said, `int(theBigThing.Int64())`, assuming you know for sure it's small enough.
[02:18:28] <ikke> fizzie: It calls fmt.Sprintf
[02:18:32] *** Joins: jbauer_ (~jbauer@146.71.11.98)
[02:18:59] <FreeBDSM> ikke: oh, right
[02:20:59] <fizzie> leitz: Here's a few conversions both ways: https://play.golang.org/p/77lpYLRV1aG
[02:20:59] *** Quits: jbauer (~jbauer@146.71.11.98) (Ping timeout: 260 seconds)
[02:22:48] *** Joins: hammdist (~hammdist@c-98-234-114-58.hsd1.ca.comcast.net)
[02:23:25] <hammdist> I can't get go build to take extldflags seriously: https://paste.ee/p/6Oj9f
[02:23:56] <leitz> fizzie, thanks!
[02:28:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:30:20] *** Joins: gggpkm (~gggpkm@123.113.182.112)
[02:39:51] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[02:41:19] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[02:41:19] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[02:43:06] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:57:23] *** Quits: X-Scale (~ARM@83.223.251.139) (Ping timeout: 264 seconds)
[02:57:31] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[02:58:55] *** X-Scale` is now known as X-Scale
[03:06:11] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1007)
[03:11:02] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 246 seconds)
[03:12:16] <FreeBDSM> did I get it right that there's no such an operation in golang over a variable containing a string as to append/concatenate another string? I only found https://pkg.go.dev/strings#Join which makes me first convert both strings into a slice?
[03:14:12] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[03:15:16] <seebs> +
[03:19:28] <FreeBDSM> why do arrays exist in golang? they seem to be second class citizens: slices seem to be just superior to them, to the point where I don't see why anyone would want to use an array (other than in some niche cases where having fixed size is an advantage)
[03:21:20] <seebs> they exist because they're an object rather than a reference to a separate object
[03:21:41] <FreeBDSM> so extra memory, why is that good?
[03:23:16] <andlabs> I am going to guess arrays were added first
[03:23:38] <andlabs> but yes they are rare
[03:23:41] <seebs> it's not the extra-memory, it's the fact that the data is in the object, not somewhere else and pointed to by the object
[03:23:55] <seebs> i mean, the extra memory is also a factor sometimes
[03:24:20] <andlabs> the extra memory for a slice is negligible at best
[03:24:22] <seebs> consider that `make([]byte, 4)` takes up 28 bytes of storage on most systems, and `[4]byte` takes up 4.
[03:24:30] <seebs> depends on how many billion of them you have
[03:24:40] <seebs> also, the separate *allocation* is expensive on a hot path
[03:25:08] <seebs> if you're in one of the many cases where the cost of allocation is actually hurting you on a hot path, getting rid of an allocation can be very valuable.
[03:25:41] <FreeBDSM> seebs: but it sounds like an argument in favor of slices, not arrays?
[03:25:57] <seebs> ... what?
[03:26:17] <seebs> other way around. the slice needs to be allocated AND the storage for it needs to be allocated separately
[03:26:28] <seebs> the slice *itself* is an object which takes up space and will have to live somewhere
[03:26:34] <seebs> but also it refers to a backing store which is a separate object
[03:27:23] <seebs> so if you have something like `struct KeyPair { key1, key2 [16]byte }` vs `struct KeySlicePair { key1, key2 []byte }`
[03:27:29] <FreeBDSM> I guess it has to be something very low level when you have to operate on arrays of bytes
[03:27:46] <seebs> to create and populate the first one is a single allocation of 32 bytes, to create and populate the second is one allocation of 48 bytes plus two more separate allocations of 16 bytes.
[03:27:48] <seebs> not really
[03:28:24] <seebs> arrays aren't hugely used as standalone things, but they're moderately common as parts of structs and things. like, not as common as slices, probably, but they're definitely *useful*.
[03:29:02] <lazyreader> you seem them a lot around the crypto bits of the standard library, where knowing _exactly_ the size of something is very valuable
[03:29:14] <FreeBDSM> mmkay, got it, a weirdo type, touch it only when absolutely necessary
[03:29:39] <lazyreader> for most of what you're going to do day-to-day, slices are probably all you need to think about
[03:29:47] <FreeBDSM> crypto stuff in go. riiight.
[03:29:56] <lazyreader> but knowing that a slice "is a pointer" to an underlying array is important.
[03:30:20] <lazyreader> FreeBDSM I can't tell if you're being sarcastic, but go's cryptography libraries are excellent
[03:31:22] <seebs> not "only when absolutely necessary". just "when you know why you want it".
[03:31:24] <FreeBDSM> well, I'm half serious. My current understanding that such problems aren't really in the domain of go as a language
[03:31:52] <seebs> ... what?
[03:31:53] <lazyreader> go is general-purpose
[03:32:31] *** Quits: dntreou (~yakiza@host-87-2-222-6.retail.telecomitalia.it) (Quit: WeeChat 3.2)
[03:32:37] <FreeBDSM> yeah, but not really
[03:32:52] <lazyreader> oh? how so.
[03:33:00] <FreeBDSM> suppose you need to write a program to work with SQL - would you choose go for that task?
[03:33:21] <lazyreader> ...yes? go does excellent parsing strings like that
[03:33:29] <FreeBDSM> (if yes - then this is just a professional deformation on your side, lol)
[03:33:37] <lazyreader> there are at least two SQL-conversant databases that I'm aware of written in go
[03:33:54] <FreeBDSM> well, okay, I am probably wrong on a lot of topics then
[03:34:39] <lazyreader> I'm not going to sit here and say go is perfect, but it's pretty good.
[03:35:03] <FreeBDSM> well, I hope I'll get it once.
[03:41:07] <andlabs> I would personally go with Go for that if only because the Go database/sql is mostly designed to not allow you to do the wrong thing
[03:41:20] <seebs> what would you think would be a better choice for it?
[03:41:45] <andlabs> source: experience with a professional project written in another language with another sql library where everything was done in the exact right type of "wrong way" that the only way to fix it would be a complete and total rewrite
[03:41:59] <seebs> i sometimes use ruby for little toy programs where performance isn't important, and i want to have to type as little as possible, and i use C for stuff that needs to fit in tiny amounts of memory.
[03:42:31] <andlabs> (the library allowed using it in a certain way that the program structure was built around)
[03:42:38] <seebs> go's crypto stuff is really good, and i mean. yes, C works for it, but look at the sheer *density* of extremely dangerous and destructive errors because of things that are possible to get wrong in C, and *not* possible to get wrong in Go.
[03:43:09] <seebs> so, if i were doing crypto, go would definitely be among the languages i'd consider, except for the part where in practice i would go find a crypto dev.
[03:43:11] <andlabs> ultimately the programming lagnauge to use depends on the job at hand, the requirements for the job, and ultimately your personal taste
[03:43:26] <seebs> yup
[03:43:45] <andlabs> and while I have a bit of an axe to grind at certain programming communities I'm not going to criticize anybody for making the choices they do
[03:43:58] <seebs> i like go and it basically stays out of my way so it's a likely choice for me for a lot of things. on the other hand, if you wanted to build something like minecraft, specifically including the ability to do plugins and mods? awful choice.
[03:44:06] <andlabs> (unless of course the choices are counterproductive to their own ends)
[03:44:10] <seebs> go has essentially zero functional tooling for anything like that.
[03:44:13] <andlabs> (as described above)
[03:45:58] <Awoobis> seebs: well technically neither does minecraft, its just a pile of reflection to make mods work >.>
[03:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[03:46:15] <seebs> yeah, but *Java* has tooling for runtime class loading
[03:46:17] *** Quits: gggpkm (~gggpkm@123.113.182.112) (Read error: Connection reset by peer)
[03:46:28] <seebs> and that turns out to be *extremely* helpful for things like that.
[03:46:35] <andlabs> also in my experience I've had a bit of a problem with one project of mine being written in Go
[03:46:40] <andlabs> and not really having proper binaries
[03:46:45] <andlabs> but that project has other problems I never really addressed
[03:47:21] <andlabs> (namely that it's glacially slow and I presented it as a complete and usable thing when I should have presented it as something that I used for the one thing I needed it for and published it because I felt that the "due diligence" taken by the paper authors was counterproductive to people wanting to recover their data which should give away what I'm referring to)
[03:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[03:48:02] <andlabs> granted I had similar headaches with gnu make on windows so
[03:48:07] <Awoobis> seebs: no love for `plugin`? :D /s
[03:48:37] <Awoobis> (yes I know its horribly broken in many ways)
[03:49:38] <andlabs> oh yeah that's another thing
[03:49:43] <andlabs> I stopped keeping up with Go updates after 1.11 or so
[03:49:53] <andlabs> but I can't shake the supsicion that a lot of them were... half-formed
[03:50:09] <andlabs> I do need ot read up on everything that came since because it's A Lot
[03:50:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[03:50:43] <andlabs> (and I'm also vehemently opposed to the new caching stuff especially since one of the first selling points of Go was how you could set up a toolchian in under 2 minutes and build entire programs in seconds... whatever happened to that lol)
[03:52:11] <seebs> it still works pretty well in my experience, i don't really mind the build cache stuff, in general. but it's been going well, mostly, i think.
[03:52:12] *** Joins: fikran (~fikran@user/fikran)
[03:52:37] <seebs> 1.18 gets us at least an initial implementation of generics, although i think with enough performance overhead to make them not really do the thing that people mostly wanted.
[03:52:47] <seebs> because of concerns about code bloat with really-all-the-specializations.
[03:54:05] <Awoobis> playing with generics was fun
[03:54:57] <Awoobis> I used it to do a matrix based Game of Life impl with a generic matrix struct
[03:56:00] <seebs> the things i've mostly wanted generic-like stuff for are typically things where i suspect the performance hit from the indirection and generic implementation will *probably* make them Not Worth It, but i dunno, they could still beat interfaces.
[03:57:50] <Awoobis> it honestly depends on runtime impl, and Im still not entirely sure what was chosen
[03:59:12] *** Joins: guniberas (~guniberas@42.191.188.121)
[04:01:58] *** Quits: Echoz (~chris@user/echoz) (Quit: WeeChat 3.3)
[04:10:22] *** Quits: krux02 (~krux02@p200300ca8f00b9007f473b6073e7a3c7.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:23:51] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[04:24:46] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:21d8:f508:23f8:99f8) (Read error: Connection reset by peer)
[04:25:31] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-21d8-f508-23f8-99f8.inf6.spectrum.com)
[04:28:16] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:31:54] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 260 seconds)
[04:33:50] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:49:17] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[04:49:27] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[04:56:05] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[04:56:32] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[05:02:19] *** Joins: loggingbot (~loggingbo@user/loggingbot)
[05:29:19] *** Quits: jbauer_ (~jbauer@146.71.11.98) (Quit: Quitting)
[05:30:50] *** Joins: shtirlic (~shtirlic@178.70.141.41)
[05:34:11] *** Quits: shtirlic_ (~shtirlic@95-55-26-134.dynamic.avangarddsl.ru) (Ping timeout: 260 seconds)
[05:38:16] *** Quits: welt (~welt@willow.spiderden.net) (Remote host closed the connection)
[05:57:16] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[05:59:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[06:01:19] <hammdist> a compiled go program is eschewing the use of mrc and using runtime.read_tls_fallback instead. are there any options I need to set to tell it to use mrc? context: https://github.com/golang/go/blob/master/src/runtime/tls_arm.s#L37
[06:01:33] *** Joins: fikran (~fikran@user/fikran)
[06:01:58] <hammdist> I'm compiling with linkmode external and a custom linker script fwiw
[06:11:15] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:11:22] *** Quits: vovs03 (~En3rgy.UM@62.176.30.155) (Ping timeout: 260 seconds)
[06:11:27] *** Joins: kiril (~kiril@85.91.153.163)
[06:20:08] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1007) (Quit: ZNC 1.8.2 - https://znc.in)
[06:20:26] <hammdist> ah found it. it needed GOARM=7
[06:22:14] *** Joins: jbauer (~jbauer@146.71.11.98)
[06:22:14] *** Quits: jbauer (~jbauer@146.71.11.98) (Client Quit)
[06:24:58] *** Quits: brooks7 (~bswinnert@23.157.160.131) (Quit: The Lounge - https://thelounge.chat)
[06:25:33] *** Joins: brooks7 (~bswinnert@23.157.160.131)
[06:33:38] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[06:55:29] *** Quits: b0nn (~shane@user/b0nn) (Remote host closed the connection)
[06:55:48] <Thedarkb-Work> I've currently got an issue with http.HandleFunc where it's not calling the callback when the page is visited.
[06:55:50] <Thedarkb-Work> https://dpaste.com/CPCQKLAGB
[06:56:19] <Thedarkb-Work> The problem is on line 427
[06:57:03] <Thedarkb-Work> Wait
[06:57:13] <Thedarkb-Work> Nevermind, I forgot https like a dumbass.
[07:13:01] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 245 seconds)
[07:15:17] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[07:20:38] *** Quits: loggingbot (~loggingbo@user/loggingbot) (Remote host closed the connection)
[07:21:44] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[07:21:55] *** Joins: loggingbot (~loggingbo@user/loggingbot)
[07:24:32] *** Joins: b0nn (~shane@user/b0nn)
[07:59:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:59:29] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.118)
[08:08:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[08:10:54] *** Joins: fikran (~fikran@user/fikran)
[08:15:44] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:a5d1:df99:7445:eeb7) (Quit: Leaving)
[08:17:40] *** Joins: frozenn00b (~daniel@user/frozenn00b)
[08:24:42] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[08:25:11] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[08:35:07] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[08:35:40] *** Joins: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[08:35:58] *** Quits: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[08:45:28] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[08:45:47] *** Joins: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[09:05:49] *** Joins: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de)
[09:10:56] *** Quits: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[09:26:10] *** Joins: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de)
[09:27:54] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Quit: The Lounge - https://thelounge.chat)
[09:29:31] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:30:55] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[09:31:18] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:33:44] *** Joins: mei (~mei@user/mei)
[09:33:50] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[09:34:09] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:34:30] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[09:34:51] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:38:35] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[09:39:33] *** Joins: frost (~frost@user/frost)
[09:40:46] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:46:02] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Quit: The Lounge - https://thelounge.chat)
[09:46:26] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:47:51] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[09:48:13] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:49:14] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[09:49:34] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:51:24] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[09:51:43] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:53:08] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[09:53:29] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:54:02] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[09:54:27] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:55:21] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[09:55:49] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:56:46] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[09:57:54] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:58:38] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[09:59:19] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[10:00:54] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[10:01:22] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[10:01:42] *** Joins: hunian (~hunian@130.61.201.239)
[10:02:26] *** Joins: gggpkm (~gggpkm@60.10.194.46)
[10:02:37] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Client Quit)
[10:05:15] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:07:20] *** Joins: gggpkm_ (~gggpkm@123.113.182.112)
[10:10:14] *** Quits: gggpkm (~gggpkm@60.10.194.46) (Ping timeout: 260 seconds)
[10:12:06] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[10:18:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[10:20:15] *** Joins: fikran (~fikran@user/fikran)
[10:27:44] *** Quits: ikke (~kevin@alpine/developer/ikke) (Quit: WeeChat 3.2)
[10:27:59] *** Joins: ikke (~kevin@alpine/developer/ikke)
[10:33:11] *** Joins: bkircher (~bkircher@2001:a61:25e1:a901:f7b9:7a2c:5cbb:7cb)
[10:44:47] *** Quits: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[10:48:10] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[10:49:53] *** Joins: mrig (~AdiIRC@user/mrig)
[10:51:33] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[10:54:31] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:55:33] *** Quits: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de) (Read error: Connection reset by peer)
[10:56:00] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[10:57:14] *** Joins: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de)
[10:59:04] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[10:59:18] *** Quits: gggpkm_ (~gggpkm@123.113.182.112) (Ping timeout: 260 seconds)
[10:59:29] *** Joins: mickey8 (~user@user/mickey)
[11:20:02] *** Joins: welt (~welt@willow.spiderden.net)
[11:22:53] *** Quits: welt (~welt@willow.spiderden.net) (Remote host closed the connection)
[11:23:38] *** Joins: welt (~welt@willow.spiderden.net)
[11:35:46] *** Joins: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de)
[11:36:07] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:38:39] *** Quits: rbn (~rbn@user/rbn) (Read error: Connection reset by peer)
[11:41:14] *** Quits: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[11:48:20] *** Quits: hunian (~hunian@130.61.201.239) (Quit: The Lounge - https://thelounge.chat)
[11:50:16] *** Joins: hunian (~hunian@130.61.201.239)
[11:52:01] *** Quits: hunian (~hunian@130.61.201.239) (Client Quit)
[11:52:10] <Thedarkb-Desktop> Hi, I've got an issue with a Go webserver where if I change the port to anything other than 8080, it times out.
[11:53:25] <Thedarkb-Desktop> Nevermind, screwed up a firewall rule.
[11:54:11] *** Joins: hunian (~hunian@130.61.201.239)
[11:55:02] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[11:55:39] *** Joins: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de)
[11:57:26] *** Joins: mickey8 (~user@user/mickey)
[12:00:59] *** Quits: mickey8 (~user@user/mickey) (Client Quit)
[12:01:17] *** Joins: mickey8 (~user@user/mickey)
[12:09:40] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.118) (Read error: Connection reset by peer)
[12:11:45] *** xy is now known as icy
[12:13:51] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[12:20:40] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: Connection reset by peer)
[12:23:48] *** Joins: jpw (~jpw@user/jpw)
[12:26:10] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[12:27:30] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[12:28:19] *** Joins: craekz (~craekz@user/craekz)
[12:28:19] *** Parts: craekz (~craekz@user/craekz) ()
[12:29:11] *** Quits: guniberas (~guniberas@42.191.188.121) (Ping timeout: 264 seconds)
[12:29:36] *** Joins: fikran (~fikran@user/fikran)
[12:30:34] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[12:33:34] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[12:33:58] *** Quits: gggpkm__ (~gggpkm@60.10.194.46) (Ping timeout: 260 seconds)
[12:35:31] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[12:42:31] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[12:43:01] *** Quits: bookworm (~bookworm@neomutt/bookworm) ()
[12:44:30] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 260 seconds)
[12:45:21] *** Joins: bookworm (~bookworm@neomutt/bookworm)
[12:56:24] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[12:58:51] *** Joins: esro_ (~esro@nat1.krakowskiinternet.pl)
[12:59:08] *** Quits: esro_ (~esro@nat1.krakowskiinternet.pl) (Read error: Connection reset by peer)
[13:05:51] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:06:23] *** Quits: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[13:23:06] *** Joins: x-x (~x@user/x-x)
[13:24:04] *** Parts: x-x (~x@user/x-x) ()
[13:29:59] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:30:29] *** Joins: kcrk (~kcrk@user/kcrk)
[13:35:52] *** Joins: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de)
[13:37:38] *** Quits: bookworm (~bookworm@neomutt/bookworm) (Read error: Connection reset by peer)
[13:38:03] *** Joins: bookworm (~bookworm@neomutt/bookworm)
[13:40:17] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 264 seconds)
[13:40:17] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 264 seconds)
[13:40:31] *** Joins: dngray (~unknown@user/dngray)
[13:40:54] <dngray> so i'm trying to do this:
[13:40:56] <dngray> lsblk -o FSTYPE,UUID | awk '/^crypto_LUKS/ { printf $NF; exit }'
[13:41:07] <dngray> {{-     (output "lsblk" "-o" "FSTYPE,UUID" "|" "awk" "/^crypto_LUKS/ { printf $NF; exit }" ) -}}
[13:41:09] <dngray> and it doesn't seem to be working
[13:41:11] <dngray> i think it doesn't like the pipe
[13:41:30] *** Quits: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[13:42:36] <bookworm> you sure you want to ask this in #go-nuts?
[13:42:48] <bookworm> wait, you wanna do this logic in a template?
[13:43:03] <dngray> yeah, it's the issue with the output function
[13:43:05] <bookworm> that's... very roundabout. Just get the information via go, then pass the data in the template
[13:43:06] <dngray> https://www.chezmoi.io/docs/templating/#useful-templates is an example
[13:43:54] <dngray> well it kind of makes sense, because i'm using specifically for my dotfiles
[13:44:17] <bookworm> not really no, even if you use it for your dotfiles, the point remains the same
[13:44:35] <bookworm> you are essentially misusing go templates as an sh replacement, poor idea
[13:44:39] <bookworm> but you do you
[13:45:08] *** Joins: Atlas (~atlas@user/atlas)
[13:47:18] <dngray> hmm you're probably right
[13:47:35] <dngray> but it would require me to make a go module hmm
[13:47:59] <dngray> but logically this particular thing would only work in my situation anyway
[13:48:09] <dngray> where i know i only have one crypto_LUKS volume per machine
[13:48:31] <dngray> i suppose i could just hardcode the value
[13:51:53] *** Joins: darkapex (~darkapex@user/darkapex)
[13:54:42] *** Joins: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de)
[13:56:37] <dngray> bookworm: what i might do is hardcode it in my volume for now
[13:58:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 260 seconds)
[14:00:45] <dngray> that command is flawed anyway
[14:01:03] <dngray> if i were to install another disk in my computer with an LVM volume the result would be unpredictable
[14:01:19] <dngray> and given it only changes when i reformat my volume (which is something i basically never do) it's not work doing
[14:04:15] *** Joins: frost (~frost@user/frost)
[14:23:11] *** Atlas is now known as atlas`
[14:23:11] *** Quits: atlas` (~atlas@user/atlas) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:23:32] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[14:23:40] <HisShadow> is there a less moronic way to check for alive connection other than this: https://gist.github.com/DuratarskeyK/597d195050c59090deceb5f0eb97bf7c ?
[14:25:36] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[14:26:02] *** Quits: gggpkm__ (~gggpkm@60.10.194.46) (Read error: Connection reset by peer)
[14:26:54] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 260 seconds)
[14:30:31] <HisShadow> I guess not :(
[14:34:36] *** Joins: arinov (~arinov@213.194.126.155)
[14:34:52] <evilop> why not use a label?
[14:37:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[14:37:20] *** Joins: riv (river@tilde.team/user/river)
[14:37:28] <riv> https://github.com/rain-1/goldmark-mathjax/blob/v1.0.0/go.mod i forked and edited and tagged, and it has module github.com/rain-1/goldmark-mathjax in the  go.mod file
[14:37:36] <riv> i run go mod download -json, the GoMod file it refers to
[14:37:42] <riv> "GoMod": "/home/river/go/pkg/mod/cache/download/github.com/rain-1/goldmark-mathjax/@v/v1.0.0.mod",
[14:37:47] <riv> this is the old version :/
[14:38:00] <riv> https://bpa.st/RL3Q this is the error im getting
[14:38:57] *** Joins: fikran (~fikran@user/fikran)
[14:42:54] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[14:44:49] <riv> please help me this sucks :(
[14:45:43] *** Joins: krux02 (~krux02@p200300ca8f00b9007f473b6073e7a3c7.dip0.t-ipconnect.de)
[14:53:26] *** Quits: nachoes (~nachoes@user/nachoes) (Quit: bye)
[14:53:40] *** Joins: nachoes (~nachoes@user/nachoes)
[14:54:21] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[14:55:14] *** Joins: thing (~thing@user/thing)
[15:10:13] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[15:17:11] <riv> nvm! found a solution
[15:27:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:36:14] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[15:44:48] *** Joins: rbn (~rbn@user/rbn)
[15:44:50] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[15:50:11] *** Joins: girafe2 (~girafe@176-147-142-235.abo.bbox.fr)
[15:53:11] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 264 seconds)
[15:54:47] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[16:06:20] <andlabs> so people who fork mods need to make sure to update the go.mod file I guess
[16:06:54] <andlabs> I guess that's a practical reason the github hit-and-run fork-and-forget approach isn't a sensible one but eh
[16:07:55] <andlabs> (forking is not the same as retweeting and providing a UI that makes it seem similar has always felt very strange)
[16:11:26] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 260 seconds)
[16:11:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[16:13:34] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[16:14:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:16:43] <shiroyasha> GitHub certainly chose a curious spelling of "clone".
[16:20:16] <Awoobis> forks are more than clones
[16:20:32] <Awoobis> they have more connections (and technically exist in the same repo on the gh backend)
[16:22:42] *** Quits: frost (~frost@user/frost) (Ping timeout: 260 seconds)
[16:27:34] *** Joins: frost (~frost@user/frost)
[16:33:56] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[16:34:07] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[16:41:16] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: Connection reset by peer)
[16:46:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[16:46:48] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[16:48:18] *** Joins: fikran (~fikran@user/fikran)
[16:52:37] *** Joins: Atque (~Atque@user/atque)
[16:58:04] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:06:58] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[17:07:31] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[17:13:10] *** Joins: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de)
[17:13:10] *** Quits: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de) (Changing host)
[17:13:10] *** Joins: tane (~tane@user/tane)
[17:17:38] *** Quits: dngray (~unknown@user/dngray) (Remote host closed the connection)
[17:19:28] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:23:18] *** Joins: bea (~bea@user/bea)
[17:24:08] <bea> i am relatively new to go... how do i make this work? https://play.golang.wiki/p/rH4hUlipEDx
[17:26:29] <icy> bea: what exactly are you trying to do?
[17:26:43] <bea> change the state based on the value of the string
[17:27:00] <bea> i.e if the string is ```, change the state to true
[17:27:09] <icy> ah
[17:27:41] <Vigdis> you should use the strings package
[17:28:20] <since_> bea: you change the local variabls
[17:28:23] <bea> the thing that is unexpected to me there is that it prints false
[17:28:38] <since_> you have two variables called state
[17:28:40] <icy> bea: you're changing the local var being passed as an arg to changeState()
[17:29:46] <icy> bea: https://play.golang.wiki/p/CmsGEwNrlQE
[17:29:48] <since_> possible fix: rename the local state variable, or remove the global one and return the value
[17:30:04] <bea> ohhh
[17:30:24] <bea> weird, not sure why i was under the impression that i had to pass the global var
[17:30:27] <bea> thank you
[17:32:28] <since_> thats the idea that global variables are accessible everywhere. Here is a version without it: https://play.golang.wiki/p/l-WKDtFZ6rF
[17:33:37] <icy> unrelated: is golang.wiki an official site?
[17:34:19] <bea> no, that was a google misstep
[17:34:41] <huf> or https://play.golang.wiki/p/10Fog-fHQhH
[17:35:14] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[17:35:51] <icy> interesting. it's identical to the golang.org site.
[17:36:09] <since_> huf: thats ugly :D
[17:36:19] <since_> And unnecessary
[17:36:31] <icy> lol
[17:36:32] <since_> passing the pointer of a global variable
[17:37:04] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[17:37:09] <icy> what's the general consensus around maintaining global state in programs like this?
[17:37:12] <icy> in go, that is
[17:37:14] <huf> still, it's *a* solution
[17:37:30] <andlabs> so wait
[17:37:35] <andlabs> is golang.org official?
[17:37:55] <andlabs> if golang.wiki is not but it's a mirror of the other
[17:39:50] <andlabs> I see no search results for this "misstep"
[17:43:05] *** Joins: casionaut (~casionaut@user/casionaut)
[17:43:20] *** Quits: casionaut (~casionaut@user/casionaut) (Remote host closed the connection)
[17:45:57] <bea> not sure, if you search go playground on duckduckgo, the first result points to golang.wiki
[17:55:07] <since_> huf: another solution *still*: https://play.golang.wiki/p/m1oi94L17zA
[17:55:42] <huf> hah
[18:01:10] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[18:05:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:08:06] *** Quits: frost (~frost@user/frost) (Ping timeout: 260 seconds)
[18:17:11] *** Quits: yonson (~yonson@2600:8801:d900:7bb::d7c) (Remote host closed the connection)
[18:19:03] *** Joins: yonson (~yonson@2600:8801:d900:7bb::d7c)
[18:22:21] *** Joins: neurocyte0132889 (~neurocyte@45.93.111.195)
[18:22:21] *** Quits: neurocyte0132889 (~neurocyte@45.93.111.195) (Changing host)
[18:22:21] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:23:30] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[18:28:19] *** Joins: ramrunner (~dsp@78.141.218.152)
[18:28:54] *** Parts: ramrunner (~dsp@78.141.218.152) ()
[18:28:59] <FreeBDSM> it looks like using conditionals (if statement) causes the block to spawn a new namespace/context for variables, so I can't do a simple `myvar := "a"    if x >y { myvar := "b" }`, because myvar := "b" is in it's isolated context and I can't find a solution in the docs on how to pass that variable outside the if {} block
[18:31:25] <FreeBDSM> ah, should've used myvar = "b" inside the if block...
[18:33:55] *** Quits: hendry (~hendry@210.23.22.2) (Ping timeout: 260 seconds)
[18:34:14] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 260 seconds)
[18:34:25] *** Joins: hendry (~hendry@210.23.22.2)
[18:39:08] *** Joins: nrl^ (~nrl@wsip-98-188-242-6.mc.at.cox.net)
[18:40:46] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Remote host closed the connection)
[18:54:12] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:55:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[18:57:39] *** Joins: fikran (~fikran@user/fikran)
[18:58:10] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 252 seconds)
[18:58:41] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[19:00:06] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[19:00:35] *** Joins: normen_ (~normen@p54b35daf.dip0.t-ipconnect.de)
[19:02:47] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[19:03:23] *** Quits: normen (~normen@p200300d71721dd006431409ed9965b44.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[19:03:25] *** normen_ is now known as normen
[19:03:54] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:10:14] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[19:12:05] <FreeBDSM> https://play.golang.org/p/KSFo5Kpj6CJ why can't I access exit code?
[19:12:16] <FreeBDSM> Command finished with error: <nil>
[19:12:46] <FreeBDSM> ah, because I didn't run cmd.Run()
[19:13:22] <FreeBDSM> but if I call it - I still get some stringified representation of what happened instead of just exit code
[19:17:39] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[19:18:07] *** Quits: bkircher (~bkircher@2001:a61:25e1:a901:f7b9:7a2c:5cbb:7cb) (Remote host closed the connection)
[19:18:21] *** Joins: bkircher (~bkircher@2001:a61:25e1:a901:f7b9:7a2c:5cbb:7cb)
[19:19:44] <since_> And then its not nil
[19:21:00] *** Quits: Vigdis (~danj@ns4.chown.me) (Quit: WeeChat 3.3)
[19:21:22] <FreeBDSM> what?
[19:21:48] <FreeBDSM> it looks like go's std lib is very limiting
[19:23:00] *** Quits: yonson (~yonson@2600:8801:d900:7bb::d7c) (Remote host closed the connection)
[19:23:08] *** Joins: yonson (~yonson@2600:8801:d900:7bb::d7c)
[19:23:08] <FreeBDSM> suppose I'd like to write a function that calls some program and based on the exit code it would either log 'fizz' (if exit code is 2) or log 'buzz' (if exit code is 3)
[19:23:45] <FreeBDSM> and I simply can't reach exit code, I can only reach a string that contains exit code among other things
[19:24:10] <lazyreader> https://play.golang.org/p/G-e3C0lz8Qr
[19:24:15] <lazyreader> there's how you do it
[19:25:27] <FreeBDSM> lazyreader: wow, thanks, that's exactly what I wanted, but I don't get this syntax: `e, ok := err.(*exec.ExitError)`, could you explain what is that?
[19:25:41] <FreeBDSM> it looks like a call to an unnamed method
[19:25:46] <lazyreader> the `err` you get back is of type *exec.ExitError, which you have to assert (because of some typing rules). Once you've got the correct type of error, you have access to everything on https://pkg.go.dev/os/exec#ExitError.
[19:25:59] <lazyreader> https://tour.golang.org/methods/15
[19:26:26] <lazyreader> it's a "type assertion", a way of "unwrapping" (in some sense) an interface (like `error`) into the concrete underlying type
[19:27:24] <lazyreader> if called in the single-return form, i.e. `e := err.(*exec.ExitError)`, it'll panic if the assertion wouldn't work
[19:27:53] <lazyreader> calling in the two-return form `e, ok := err.(*exec.ExitError)` lets you check the `ok` value first and avoid the panic
[19:28:16] *** Joins: Vigdis (~danj@ns4.chown.me)
[19:28:38] <FreeBDSM> lazyreader: does panic always stop the program?
[19:29:17] <lazyreader> panics can be recovered in a defer, technically, but they
[19:29:38] <lazyreader> 're generally only thrown when the go runtime thinks there's no reasonable way to continue
[19:29:53] <lazyreader> they're _not_ a replacement for exceptions from languages like Java
[19:30:13] <lazyreader> for more on panics and recovery: https://go.dev/blog/defer-panic-and-recover
[19:30:45] <FreeBDSM> failing to print something barely sounds like a reason good enough to stop the program completely and if handling such cases requires more boiler plate code - that's not good
[19:31:10] <FreeBDSM> but thanks a lot for explaining all that
[19:31:13] <lazyreader> well, that's the outcome in _this case_, but you can attempt an assertion on any interface, anywhere
[19:31:44] <lazyreader> and if it fails, any code written after that assertion won't have access to the struct you were attempting to assert to
[19:31:55] <lazyreader> so there's no way to run it, in a sense.
[19:31:55] *** Joins: jbauer (~jbauer@146.71.11.98)
[19:32:10] *** Quits: jbauer (~jbauer@146.71.11.98) (Remote host closed the connection)
[19:32:27] <FreeBDSM> why not fallback to empty string / false / nil / etc. by default?
[19:32:57] <lazyreader> because then the programmer is lulled into a false sense of security
[19:33:38] <lazyreader> when given the option between magic and explicitness, go will almost always choose explicitness
[19:33:57] <seebs> I think you might be looking for PHP.
[19:34:04] <lazyreader> plus, that's _why_ the ,ok form exists
[19:34:19] <lazyreader> so you can find out if your assertion worked _without_ throwing a panic.
[19:34:44] <seebs> The idea of an "assertion" is that execution does not continue if the assertion fails. If you don't want that, you use an explicit test.
[19:35:27] <seebs> In languages which just do an automatic fallback to a default value that you don't explicitly request, errors like that produce severe bugs which can be extremely hard to detect, because there's no way to ask the question "did this conversion succeed".
[19:35:38] <lazyreader> maybe a default fallback is fine! but the code should make it explicit that's what's happening, rather than just letting the runtime return some default value. (how could you distinguish between a fallback and "the struct passed in was the zero type", anyway?)
[19:35:40] <seebs> Go makes you be a little more verbose, but you also get exactly the behavior you specified.
[19:36:34] <fizzie> The "right" way to get the exit error would arguably be errors.As -- https://play.golang.org/p/wUSqMdv1xEr -- instead of a type assertion.
[19:38:31] <FreeBDSM> fizzie: timtowtdi, got it
[19:38:51] *** Joins: SyntaxError (~afP@194.87.46.214)
[19:39:09] *** Parts: SyntaxError (~afP@194.87.46.214) ()
[19:39:09] <fizzie> (It only *really* makes a difference if the desired error might be wrapped, which isn't ever the case when it comes straight out of the Run() method, but it's still a reasonable practice to use the "errors" package just for consistency.)
[19:39:20] <lazyreader> errors.As was added in a later go version, too, so it's arguably a more recent way to do it
[19:39:32] <lazyreader> I wouldn't bat an eye at the explicit assertion if I saw it in code review
[19:40:30] <lazyreader> oh I hadn't considered nested upwrapping, is that why the As method exists?
[19:40:47] <lazyreader> I hadn't been able to come up with a good use-case before now
[19:41:03] <fizzie> That's what https://golang.org/doc/go1.13#error_wrapping suggests.
[19:41:29] <lazyreader> 💡
[19:41:33] <fizzie> (And yeah, it was added in 1.13.)
[19:43:22] <FreeBDSM> `var i interface{} = "hello"; s := i.(string)` what would you call `s` in this case? I like self-explaining var names and I simply don't get what kind of an entity that variable is, I feel like with languages like go it's just easier to forget about good var names and just use shortest possible unique crap
[19:43:45] <lazyreader> it depends on what you're using `s` for
[19:44:09] <FreeBDSM> what if I use it for many things? imo that's a wrong approach
[19:44:38] <lazyreader> if you're using it for many things, almost by definition you're going to have to use a vague name
[19:45:07] <FreeBDSM> or I would rather name it after what it represents, rather than what is it used for
[19:45:27] <lazyreader> `message`? `welcomeText`?
[19:46:16] <FreeBDSM> account name, personal greeting's subject, os login, and so on and on
[19:46:29] <lazyreader> the shorter the lifetime of a variable, the shorter the name can be, because there's no confusion over time as to what it refers to.
[19:47:37] <lazyreader> you might find https://golang.org/doc/effective_go an interesting read if no one's pointed you to it already
[19:47:53] <FreeBDSM> I guess after some prof. deformation occurs and people are able to 'read' this crap (well, with help of IDE, of course) and instantly understand where it is used for - the crap's name doesn't really matter anymore
[19:48:01] <lazyreader> it gets across many of the more philosophical design points of the design of go
[19:49:10] <FreeBDSM> I'm not yet that much familiar with that language as to bother with "why things are so?" questions about it; first I need to make some use of it.
[19:49:37] <lazyreader> I can't tell if your complaint about naming here is around the results of type assertions or just what to name things in general
[19:50:13] <lazyreader> from `var i interface{} = "hello"; s := i.(string)`, the answer to "what should I call s" is "the same as if you'd just written `var s string = "hello"`
[19:50:16] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:50:25] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:50:42] *** Joins: mickey8 (~user@user/mickey)
[19:51:07] <lazyreader> or `var welcomeMessage string = "hello"` or what have you
[19:51:10] <FreeBDSM> `var lastname = "jackson"` is self explaining
[19:51:24] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[19:51:45] <FreeBDSM> `var lastnameorfalls := i.(string)` is just madness
[19:51:55] <FreeBDSM> or false*
[19:52:07] <MD87> That's just a lastname, it's never false
[19:52:10] <lazyreader> `lastname, ok := i.(string)`
[19:52:17] <lazyreader> multiple return
[19:52:23] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:52:30] <lazyreader> lastname is a string, ok is a bool
[19:52:32] <FreeBDSM> MD87: it is false if that interface has no (string)
[19:52:44] <MD87> If i can't be asserted to a string then execution stops
[19:52:45] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[19:52:45] <lazyreader> no, it _panics_
[19:53:00] <lazyreader> lastname never gets resolves if the type-assertion panics
[19:53:52] <lazyreader> in the , ok case it's an empty string, I suppose, but in that case you also know that because you check the result of the conversion
[19:54:34] <riv> andlabs: hey sorry to ping you but did you have any insight into my issue? I worked around it by not using that library - but for future im curious what i need to do
[19:54:38] <FreeBDSM> https://play.golang.org/p/ZWOQfPxZOis
[19:55:06] *** Quits: girafe2 (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 245 seconds)
[19:55:11] <lazyreader> https://play.golang.org/p/jZs2c5qYQ8M
[19:55:18] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[19:55:24] <lazyreader> yeah, it's the zero value of the type you asserted
[19:55:52] <lazyreader> because your assertion failed!
[19:56:26] <lazyreader> but you'd name `whattheisthis` whatever you _thought_ the result of your assertion was going to be
[19:56:38] <lazyreader> because why else would you be making that assertion?
[19:56:59] <FreeBDSM> yeah, you are probably right here
[19:57:06] <lazyreader> TBH this doesn't come up that often because most of the time you're not working with raw `interface{}`s
[19:57:23] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 264 seconds)
[19:57:38] <lazyreader> if you are, you're either doing some weird reflection-based code, or actively fighting the type-system
[19:58:31] <lazyreader> I write go code for a living and can probably count the number of explicit type assertions in my projects on one hand
[19:58:46] <lazyreader> (mostly around go's context package)
[20:00:44] *** Joins: khrbt (~znc@user/khrbt)
[20:05:22] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[20:06:35] *** Joins: volt (~volt@67.197.6.215)
[20:07:56] <riv> hey i need advice
[20:08:06] <riv> i got my github project with all the .go files and stuff in /
[20:08:19] <riv> can i put them in src/ ? just to tidy up the repo
[20:08:33] <andlabs> riv: no, I'm actually not familiar with modules yet
[20:08:39] <riv> alright!
[20:08:40] <andlabs> but you should open an issue with that person to tell them to updat ehte go.mod file
[20:08:45] <andlabs> that might be the correct fix
[20:08:51] <andlabs> unless they're trying to get their changes merged upstream
[20:08:59] <riv> well i was thinking I could just fork it and do the change myself
[20:09:07] <riv> idk.. its really weird
[20:09:42] <andlabs> I do need to eventually figure out modules because I'm certain a lot of people are waiting for ui to be moduleized =P
[20:10:11] <riv> :D
[20:10:18] <riv> is that your project? what's it do?
[20:10:27] <andlabs> it was a native GUI library
[20:10:33] <riv> ahh very nice
[20:10:45] <andlabs> it is now a discombobulated mess instead
[20:14:31] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[20:19:35] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[20:22:22] *** Parts: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) ()
[20:22:36] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 245 seconds)
[20:23:48] *** Joins: lilgopher (~textual@d4-50-5-233.evv.wideopenwest.com)
[20:25:43] *** Joins: christophergray (~christoph@190.148.52.44)
[20:27:53] *** Quits: christophergray (~christoph@190.148.52.44) (Client Quit)
[20:29:44] *** Joins: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com)
[20:30:02] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (Ping timeout: 260 seconds)
[20:31:44] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[20:32:31] *** Quits: volt (~volt@67.197.6.215) (Ping timeout: 260 seconds)
[20:33:03] <FreeBDSM> https://cs.opensource.google/go/go/+/refs/tags/go1.17.2:src/log/log.go;l=322 can I capture prtintf'ed string into variable first so that I could use it in 2 places (for log.Printf() and for return)?
[20:33:42] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 260 seconds)
[20:36:09] <FreeBDSM> looks like log is incapable of that, will have to resort to using fmt.Sprintf()
[20:36:09] *** Quits: lilgopher (~textual@d4-50-5-233.evv.wideopenwest.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:36:46] <j416> FreeBDSM: fmt.Sprintf
[20:37:00] <j416> indeed
[20:37:36] <FreeBDSM> j416: I already import log package, so now I have to import both, it'll probably make my resulting bin a bit larger or something
[20:37:58] <j416> log package depends on fmt. no worry.
[20:38:21] <FreeBDSM> oh, right, so only an extra line in my script
[20:38:22] <j416> also, if binary size is an issue, Go might not be your language
[20:38:39] <j416> (Go generally produces quite large binaries)
[20:40:58] <FreeBDSM> 6.5M, so far quite thin
[20:42:54] <j416> everything is relative
[20:44:59] *** Joins: lilgopher (~textual@d4-50-5-233.evv.wideopenwest.com)
[20:45:05] <riv> got any tips for using go within docker?
[20:45:11] *** Parts: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com) ()
[20:45:16] <riv> im finding that it pulls or rebuilds the entire thing every time
[20:45:17] <riv> i build the image
[20:45:24] <j416> riv: use layers
[20:45:24] <riv> i thought docker would not redo stuff it already did
[20:45:34] <riv> I think each line of the dockerfile is a layer though
[20:45:39] <j416> probably
[20:45:58] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[20:47:32] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[20:48:57] <lilgopher> the same happens to me with docker, I suspect it might be the build cache is not available unlike when building without containers, but I a noob with docker
[20:54:42] <ikke> If you change an upper layer, all layers below it are rebuilt
[20:55:15] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[20:55:16] <since_> -ldflags -s trick makes your bin also a bit smaller
[20:55:34] <since_> But it was not recommended
[20:56:09] <ikke> -s -w
[20:56:34] <lilgopher> does it make sense to make a worker pool that fetches items from a map instead of a channel? I want to constraint workers to execute requests from specific hostnames and I have like 10 different hostnames. For example if I create 5 workers, worker 1 can execute requests for hostanme 1 and 2, and worker 2 for hostname 3 and 4, etc
[20:56:49] <since_> ikke: what does -w do?
[20:57:29] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:59:07] <ikke> Ommit DWARF symbol table
[20:59:12] <ikke> used for things like gdb
[20:59:17] <ikke> https://pkg.go.dev/cmd/link
[21:00:45] <lilgopher> oh I think I have to use a map with sync.Mutex
[21:02:30] <j416> lilgopher: or read from the map in one goroutine that dispatches to other goroutines based on your desired distribution
[21:03:39] <j416> (not sure about your whole use-case)
[21:05:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[21:07:00] *** Joins: fikran (~fikran@user/fikran)
[21:07:35] <FreeBDSM> lazyreader: fizzie: now that I have access to exit code via exec.Command().Run(), it seems like I've lost access to stdOut and stdErr: https://play.golang.org/p/hxYG_1hixGY I get the error that I can't call .Output() 2nd time (which my code basically does), but without it - I don't know how to reference stdOut and stdErr, could you, please, help?
[21:09:28] <andlabs> use the return from exec.Command() and change stdout and stderr to something like a bytes.Buffer
[21:12:31] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:12:54] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Quit: Ping timeout (120 seconds))
[21:13:20] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[21:14:34] <FreeBDSM> andlabs: but https://cs.opensource.google/go/go/+/refs/tags/go1.17.2:src/os/exec/exec.go;l=115 says that Stdout and Stderr are parts of the Cmd struct, and so I should be able to access them like this: https://play.golang.org/p/lD2zkDxK8AY
[21:16:16] <MD87> You can access them like that, but they're writers. You can't read from them. If you want to capture stdout/stderr you'll want to set them to your own writer (like a bytes.Buffer as andlabs said) before running the command
[21:16:55] <MD87> Something like https://play.golang.org/p/YaZDOAO_0iH
[21:19:35] <FreeBDSM> `cmd.Stdout = &stdout` this breaks my brain: imo left and right part need to be swapped, lol
[21:19:44] <FreeBDSM> MD87: andlabs: thanks!
[21:21:42] <seebs> i don't understand why you'd expect the left and right parts to be swapped. the left side is what you're assigning to.
[21:21:43] <seebs> *thinks*
[21:21:50] <seebs> ohhh, i see.
[21:21:59] <seebs> you're thinking "cmd has a Stdout, i want to read it, so i want to assign it to something"
[21:21:59] <MD87> You're configuring it before you run it. It's a bit like doing "echo 'foo' > /somefile" - it doesn't run the command then check if it should put the output somewhere, it redirects it in advance
[21:22:00] <seebs> ?
[21:25:36] <lilgopher> j416 does that mean I can send a task to a specific goroutine?
[21:26:48] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[21:28:00] <FreeBDSM> seebs: `var stdout, stderr bytes.Buffer` they are freshly declared vars of a bytes.Buffer type. `&stdout` is the address of one of the variables. cmd.Stdout is a variable that contains the standard output from prior execution of a command. Surely I want to assign cmd.Stdout's value to another variable (becase cmd.Stdout is too bitchy to be used directly for some reason).
[21:28:25] <j416> lilgopher: sure
[21:29:08] *** Joins: khrbt (~znc@user/khrbt)
[21:29:14] <FreeBDSM> or, well, again I have wrong understanding of what's what
[21:30:34] <j416> FreeBDSM: maybe try focusing on one problem at a time
[21:32:47] *** Joins: X-Scale` (~ARM@31.22.147.35)
[21:33:02] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 260 seconds)
[21:34:23] *** X-Scale` is now known as X-Scale
[21:34:41] *** Joins: Armanzor (~Armanzor@user/armanzor)
[21:34:45] *** Quits: psb (sid500598@user/psb) (Ping timeout: 260 seconds)
[21:35:03] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[21:36:47] *** Joins: psb (sid500598@user/psb)
[21:36:51] <seebs> Stdout does not contain the output from a prior execution of a command. Stdout is the reference to the io.Writer that a command *will* write to.
[21:36:56] <MD87> FreeBDSM: The misunderstanding there is that cmd.Stdout doesn't contain the output, ever. It's a reference to something that can write the output somewhere. By default it's `nil` and the output doesn't go anywhere.
[21:36:59] <seebs> A writer does not "contain" the things written to it. It gets-written-to.
[21:38:04] <j416> nod; this can be confusing, it was confusing for me in the beginning ^
[21:38:16] <j416> io.Writer is something that you can write to; io.Reader is something you can read from
[21:38:40] <j416> io.Writer writes things for you, io.Reader reads things for you, so to speak
[21:40:15] <FreeBDSM> it'd be simpler with arrow operands like `cmd.Stdout > &stdOut` (or `cmd.Stdout => &stdOut`
[21:43:47] <MD87> It's nothing special, though. It's just a normal assignment. It's no different than `userManager.database = someDatabase`. Some point later the userManager will probably call methods on the database; when you Run() the cmd it will call methods on the writer you provide
[21:46:48] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[21:47:26] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (Ping timeout: 260 seconds)
[21:48:11] <MD87> FreeBDSM: Maybe https://play.golang.org/p/_vXSZzwv8fU makes it a bit clearer what's going on?
[21:50:16] <FreeBDSM> MD87: no, I mean I get it that the moment that execution occurs is when cmd.Run() is executed
[21:50:31] <FreeBDSM> MD87: userManager.database is where you assign stuff, and someDatabase is what being assigned there; here it kinda looks the opposite (if not getting into details): you take value from cmd.Stdout (because that's where the lib will write stdout to) and then put it into var 'stdout'.
[21:51:08] <FreeBDSM> Yeah, in fact cmd.Stdout is not where the stdout gets written to, but a reference to an address of where it gets written to, so that var's correct value is some memory address
[21:51:22] <huf> no, that's not what it is
[21:51:28] <FreeBDSM> and that address is where the stdout will get written to
[21:53:03] <FreeBDSM> huf: how so?
[21:53:39] <huf> it's not a thing where bytes get written. it's a way for bytes to get written *somewhere*
[21:54:01] <huf> you have to teach cmd where to put them, that's why you assign your writer into it
[21:55:37] <FreeBDSM> that's what I said? it expects an address for where to write to, that's why you create a var for that and assign that var's address as the value to cmd.Stdout
[21:55:44] <huf> *sigh*
[21:56:14] <ikke> A random variable is not a writer
[21:56:39] <ikke> https://pkg.go.dev/io#Writer
[21:57:02] <FreeBDSM> the writer is cmd.Stdout
[21:57:08] <ikke> no
[21:57:56] <FreeBDSM> but https://cs.opensource.google/go/go/+/refs/tags/go1.17.2:src/os/exec/exec.go;l=115
[21:58:05] <seebs> It really feels like you're getting stuck on models that are from other environments, and trying to map this language into those constructs, but they don't fit.
[21:58:21] <ikke> FreeBDSM: yes, you _assign_ a writer to it
[21:58:25] <ikke> it defaults to nil
[21:58:34] <seebs> i think you're still not understanding what a Writer *is*
[21:58:49] <seebs> a Writer is a thing which has a Write method which is given a buffer and reports how much of the buffer it "wrote". that's it.
[21:58:57] <ikke> "If either is nil, Run connects the corresponding file descriptor to the null device (os.DevNull)."
[21:59:08] <seebs> it isn't a location, it isn't storage, it doesn't imply that there is any way to access the data that has been sent to it later.
[21:59:21] <ikke> FreeBDSM: what do you want to do with the output from the command"
[21:59:24] <ikke> ?
[21:59:30] <seebs> So, for instance, a "Writer" could be a thing which is connected to a websocket, and sends the data passed to it over that websocket to a remote system.
[22:00:09] <seebs> The writer isn't a reference to the *data*, it's a reference to the *steps to take when data is emitted*.
[22:00:42] <ikke> A writer is an 'object' with a Write() method. What that Write method does is implementation specific
[22:00:48] <seebs> So imagine that the writer is just the page of instructions to follow whenr Write() gets called.
[22:01:08] <seebs> And what you're trying to do is, after the fact, copy those instructions into another object and somehow have that object now contain the data that the instructions were followed on.
[22:01:12] <b0nn> A writer is a function, not a destination
[22:02:12] <ikke> https://pkg.go.dev/bufio#Writer is a writer that stores data in memory
[22:03:03] <seebs> So when you do `cmd.Stdout = &stdout`, then the command, when it writes, will call the Write method of stdout, which means it will write into stdout, which is what you want it to do.
[22:03:59] <ikke> https://pkg.go.dev/bytes#Buffer bytes package providers a writer as well
[22:06:25] <FreeBDSM> So we have io.Writer that is all the things you just explained. We have `type Cmd struct { ... Stdout io.Writer ...}` (which I read as "struct 'Cmd' has property 'Stdout' that is of type 'io.Writer'). And we have `cmd.Stdout = &randomvar` (which I read like tie the io.Writer method behind cmd.Stdout to the address of my random variable randomvar, so that that io.Writer will write some stuff there and I'd be able to read it via `randomva
[22:06:25] <FreeBDSM> r.String()`)
[22:07:09] <ikke> FreeBDSM: cmd.Stdout is a variable of type io.Writer, which defaults to nil
[22:07:22] <ikke> You need to _provide_ a writer
[22:08:39] <ikke> os.Stdout is something that implements writer
[22:08:51] <FreeBDSM> ikke: what do you mean by provide a writer? io.Writer is already there, I just need to give it the address to write to?
[22:08:57] <ikke> noi
[22:09:22] <FreeBDSM> :c
[22:09:28] <ikke> io.Writer is not a concrete type, it's an interface
[22:09:29] *** Joins: arcatech (~arcatech@user/arcatech)
[22:09:50] <ikke> An interface just specifies what methods are expected to exist
[22:10:03] <ikke> but unless you assign something to that variable (struct field), the value is nil
[22:11:05] <ikke> _You_ need to assign something that implements the writer interface
[22:11:22] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:ed48:b60:b46b:7dad)
[22:11:35] <ikke> either something that stores it in a buffer, like I mentioned, os.Stdout (which writes to the console), or a socket, like seebs mentioned
[22:12:46] <FreeBDSM> aaaah, so `var stdout bytes.Buffer` is "declare variable of type 'bytes.Buffer' that has all the necessary methods that are needed by the io.Writer interface"?
[22:12:59] <ikke> yes, exactly
[22:13:05] <FreeBDSM> now I got it!
[22:13:21] <FreeBDSM> jeezus you are patient :)
[22:15:17] <ikke> Note that: "The zero value for Buffer is an empty buffer ready to use. "
[22:15:47] <FreeBDSM> and so, basically, if I wanted - I could implement my own type to satisfy io.Writer inteface's requirements and use that instead of bytes.Buffer and it basically just so happens that "everything is already written before us" that it's just easier to take an already written code from bytes package
[22:15:53] <ikke> so var myBuf := bytes.Buffer{} will get you a buffer that is ready to use
[22:16:02] <seebs> yeah
[22:17:36] <seebs> So, the thing happening isn't that you're telling the "io.Writer", which can somehow write to things, what to write to. You're *providing* a thing which matches the form of "io.Writer", and the *thing* is what knows how to write.
[22:20:30] <FreeBDSM> another small question: I don't like having to 'carry' .String() method with stdout everywhere, instead I'd like it to be 'by default', is there anything I could do about that rather than introducing extra intermediate vars like `var str_stdout = stdout.String()` ?
[22:20:47] <FreeBDSM> seebs: yeah, I now finally got it
[22:21:36] <seebs> So, there isn't really a way, and part of this is because if you have a bytes.Buffer, and you call String() on it, it *makes a new string*.
[22:21:37] <seebs> Every time.
[22:21:46] <seebs> So you don't want that to be implicit and automatic because it's insanely expensive.
[22:22:03] <seebs> So you do it explicitly, and then you know when you did it, and that changes to the buffer after that time won't be reflected in the string, and so on.
[22:22:52] <FreeBDSM> "makes a new string" as in "creates new object in memory"?
[22:23:19] <seebs> yeah
[22:23:31] <seebs> it has to, because the bytes.Buffer contents aren't immutable, and strings are immutable.
[22:23:51] <seebs> So if the command produced a megabyte of output, every call to stdout.String() is allocating a megabyte of memory.
[22:25:07] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[22:27:10] <FreeBDSM> seebs: https://play.golang.org/p/4ON3qtCk33V do you mean that here both on lines 25 and 31 I get a new memory allocations?
[22:28:00] <seebs> no, but both 17 and 18 are memory allocations.
[22:28:17] *** Joins: arinov (~arinov@78.187.169.227)
[22:28:24] <seebs> but if you did another "second_so = stdout.String()", that would be another. it wouldn't be able to reuse the string from the first one.
[22:28:45] <FreeBDSM> then my strategy of introducing intermediate vars is correct
[22:28:50] <seebs> yup!
[22:29:05] <seebs> what i'm explaining is mostly why there isn't a way to just use-it-as-a-string without the explicit intermediate variable.
[22:29:14] <seebs> If you could just use it, but every time you used it it allocated memory, that would be awful.
[22:29:26] <FreeBDSM> oh, got it
[22:29:39] <FreeBDSM> maybe there's at least some shorthand way to write that down?
[22:30:46] <seebs> I mean, `stdout_str := stdout.String()` is about as shorthand as it gets.
[22:31:21] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (Ping timeout: 245 seconds)
[22:32:38] <hammdist> what's this strange syntax: https://github.com/golang/go/blob/master/src/runtime/os_linux.go#L220 : I'm referring to *[1<<28]
[22:33:03] <FreeBDSM> after all, stdoud is an object of 'bytes.Buffer' type and what prevents developers of the "bytes" package to provide a new property .str that'd call method .String() on the buffer, init it once somehow and thus do the conversion of bytes into string just once and everyone could just reference obj.str directly? or smth like that
[22:34:25] <ikke> FreeBDSM: that assumes everyone wants to get the output as string
[22:35:32] <FreeBDSM> well, if that assumption 'costs' too much computing resources - there could be just 2 similar structs
[22:35:42] <FreeBDSM> bytes.Stringed
[22:36:09] <ikke> Or you just call .String() on it once all the output has been written
[22:36:44] <ikke> A buffer can be written to continuously, so it would need to update the field constantly
[22:36:50] <FreeBDSM> afaiu, adding such a 2nd similar struct should be cheap and neat because OOP grants us inheritance
[22:37:15] <FreeBDSM> oh, that second argument is good
[22:37:16] <ikke> golang does not do OOP nor has it real inherritance
[22:37:16] <MD87> hammdist: << is the shift left operator (in thise case take 1 and move its binary representation left 28 places) so it's basically an array of size 2^28
[22:37:50] <MD87> hammdist: it could instead say [268435456] but then you wonder all kinds of things about the magic number :)
[22:38:13] <b0nn> hrm, I always find << n magic too
[22:38:20] <hammdist> so the * turns a pointer into a slice?
[22:38:51] <hammdist> ah no wait it's turned into a slice later
[22:38:55] <FreeBDSM> ikke: one can't extend an existing long struct by creating a new one and referencing the existing struct in it?
[22:39:07] <ikke> You can embed structs, yes
[22:39:13] <hammdist> I think I get it, thanks MD87
[22:39:17] <FreeBDSM> here's the inheritance...
[22:39:43] <ikke> It's more like composition
[22:39:43] <seebs> go specifically does *not* have "inheritance" in the OOP sense, that's intentional.
[22:40:05] <b0nn> hammdist: 0001 shifted left once <<1 becomes 0010
[22:40:25] <seebs> I don't think it'd make sense to make something that just calls .String once, because then if you continue using the buffer, what happens?
[22:40:47] <b0nn> 000q shifted left twice <<2 becomes 0100
[22:40:55] <foobaz> seebs: a rose by any other name would smell as sweet
[22:40:59] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[22:41:04] <FreeBDSM> seebs: something something optimize it so that it gets called again whenever you use it?
[22:41:08] <seebs> and a chrysanthemum by any other name would be easier to spell
[22:41:16] <ikke> :D
[22:41:37] <seebs> I think that's sort of contrary to Go's general philosophy, which is to avoid hidden magic and costs.
[22:43:34] <FreeBDSM> well, since runes already exist - just introduce something new, like totems...
[22:44:44] <b0nn> graphemes
[22:44:54] <ikke> graphmemes
[22:45:02] <b0nn> I likes it :)
[22:45:11] <b0nn> I can haz graphmemes
[22:47:39] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[22:58:26] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:59:11] *** Quits: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[22:59:57] *** Quits: pztrn (~pztrn@user/pztrn) (Remote host closed the connection)
[23:00:17] *** Joins: pztrn1 (~pztrn@aurora.pztrn.name)
[23:00:21] <riv> https://play.golang.org/p/w3rlkUNBgn8
[23:00:34] <riv> how would I use .User inside the loop, in line 28
[23:00:48] *** Quits: Armanzor (~Armanzor@user/armanzor) (Quit: Leaving)
[23:00:56] <FreeBDSM> ikke: how to use https://pkg.go.dev/cmd/link ? I build my bin like this: `go mod init && go get -d && go build -o /result`
[23:01:16] *** Quits: pztrn1 (~pztrn@aurora.pztrn.name) (Client Quit)
[23:01:31] <ikke> What do you want to achieve?
[23:01:40] *** Joins: pztrn (~pztrn@user/pztrn)
[23:01:40] <FreeBDSM> slimmer bin
[23:04:15] <ikke> go build -ldflags '-s -w' ..
[23:05:29] <FreeBDSM> ikke:  6.5M -> 4.6M! thanks!
[23:05:55] <ikke> Note that this is at the cost of usefull error messages / debugging
[23:06:10] <ikke> (ie, stacktraces)
[23:06:44] <FreeBDSM> got it. I believe I have enough own debug lines.
[23:07:29] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[23:07:39] <j416> besides, debugging is only needed if there are bugs
[23:09:55] <riv> can anyone help me with templates please
[23:11:35] *** Quits: hammdist (~hammdist@c-98-234-114-58.hsd1.ca.comcast.net) (Quit: Ping timeout (120 seconds))
[23:11:49] *** Joins: chovy (chovy@tilde.club)
[23:12:19] *** Joins: hammdist (~hammdist@c-98-234-114-58.hsd1.ca.comcast.net)
[23:13:05] <j416> !ask
[23:13:12] <j416> riv: just ask your question
[23:13:23] <riv> nvm solved
[23:14:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[23:14:27] *** Quits: acohn (acohn@wikipedia/alex-cohn) (Quit: TTFN)
[23:16:21] *** Joins: fikran (~fikran@user/fikran)
[23:20:00] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[23:21:01] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[23:23:29] *** Parts: Yukkuri_ (~user@mayoinochikurin.eientei.org) ()
[23:24:07] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:24:27] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Client Quit)
[23:24:46] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[23:26:44] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:27:29] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[23:27:51] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[23:32:24] *** Joins: neurocyte0132889 (~neurocyte@45.93.111.195)
[23:32:24] *** Quits: neurocyte0132889 (~neurocyte@45.93.111.195) (Changing host)
[23:32:24] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[23:38:58] *** Quits: arinov (~arinov@78.187.169.227) (Ping timeout: 260 seconds)
[23:43:21] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[23:46:02] <seebs> i should write up a FAQ based on interactions in this channel.
[23:46:06] <seebs> Q: templates?
[23:46:08] <seebs> A: nvm solved.
[23:48:26] <b0nn> riv: uhh, share how you solved your problem - for the benefit of other people who mught also be stuck, and to give yourself a bit of technical writing/knowledge sharing experience
[23:48:54] *** Joins: strubbl891941988 (~strubbl@ipb21a9322.dynamic.kabel-deutschland.de)
[23:49:42] <seebs> sometimes when i explain my solution, i realize that the explanation is obviously wrong and therefore whatever i thought happened isn't actually what happened
[23:50:01] <seebs> i have reworked MANY commits and bug fixes because writing them up revealed that they couldn't possibly be working for the reason i thought they were
[23:51:07] <b0nn> My blog is all about making me understand what's really happening; When I write an article I end up researching a LOT deeper than I had thought the problem was (because I want to be thorough, right)
[23:52:06] <b0nn> += explaining things is the classic rubber ducky too
[23:52:55] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[23:54:45] <riv> can i see your blog
[23:56:07] <b0nn> I don't know, can you? </dad joke>
[23:59:17] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
