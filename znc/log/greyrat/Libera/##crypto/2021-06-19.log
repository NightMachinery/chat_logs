[00:01:52] <DJ`Catlady> visit http://www.desertheatradio.com join our chat and stop spamming MY server
[00:01:55] *** Parts: DJ`Catlady (~DJCatlady@107.126.51.175) ()
[00:11:46] *** Quits: gueriLLaPunK (~textual@135.26.146.148) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:11:48] *** Quits: chrysanthematic (~chrysanth@109.70.150.245) (Quit: chrysanthematic)
[00:24:14] *** A_Dragon is now known as AAAAAA_Dragon
[00:28:10] *** Joins: chrysanthematic (~chrysanth@89.38.69.171)
[00:33:01] *** Quits: chrysanthematic (~chrysanth@89.38.69.171) (Changing host)
[00:33:01] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[00:33:23] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[00:34:40] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[00:37:02] *** Joins: brcolow (~brcolow@ip68-0-136-132.tc.ph.cox.net)
[00:38:50] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[00:42:04] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[00:51:02] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[01:14:23] *** Quits: yawkat (~yawkat@cats.coffee) (Ping timeout: 252 seconds)
[01:19:15] *** Joins: yawkat (~yawkat@cats.coffee)
[01:39:18] *** Quits: Human_G33k (~HumanG33k@2a01:e0a:5b9:7840:215:c5ff:fe68:fb04) (Ping timeout: 272 seconds)
[01:40:16] *** Joins: Human_G33k (~HumanG33k@2a01:e0a:5b9:7840:215:c5ff:fe68:fb04)
[01:52:56] *** Quits: Guyver2_ (Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[01:53:20] *** Quits: nyaomi (~naomi@104.236.14.174) (Quit: meow)
[01:53:46] *** Joins: nyaomi (~naomi@2604:a880:800:14::133:5000)
[01:56:46] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[01:57:06] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[01:59:55] *** Quits: nyaomi (~naomi@2604:a880:800:14::133:5000) (Quit: meow)
[02:00:53] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[02:02:46] *** Joins: nyaomi (~naomi@2604:a880:800:14::133:5000)
[02:07:09] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[02:12:29] *** Quits: s8n (~s8n@user/s8n) (Ping timeout: 272 seconds)
[02:12:54] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: the ##end of the abyss)
[02:13:19] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[02:14:07] *** Joins: s8n (~s8n@user/s8n)
[02:36:31] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[02:36:44] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[02:40:27] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[02:53:06] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Ping timeout: 264 seconds)
[03:02:44] *** Quits: Riastradh (~riastradh@jupiter.mumble.net) (Ping timeout: 252 seconds)
[03:06:42] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 240 seconds)
[03:14:46] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[03:27:45] *** Joins: akaWolf (~akaWolf@akawolf.org)
[03:43:44] *** Joins: Wulf4 (~Wulf@user/wulf)
[03:47:17] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[03:47:17] *** Wulf4 is now known as Wulf
[03:50:22] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[03:51:19] *** Joins: torchic (~noturboo@2a04:dd00:2:61::7068)
[03:52:13] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[03:53:26] *** Quits: X-Scale (~ARM@24.117.108.93.rev.vodafone.pt) (Ping timeout: 265 seconds)
[03:54:35] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[03:57:35] *** Joins: Riastradh (~riastradh@jupiter.mumble.net)
[03:59:42] *** Joins: X-Scale (~ARM@24.117.108.93.rev.vodafone.pt)
[04:03:21] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:04:06] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Ping timeout: 268 seconds)
[04:06:32] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:08:00] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:09:54] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[04:10:42] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[04:11:42] *** Quits: chomwitt (~Pitsikoko@athedsl-20549.home.otenet.gr) (Ping timeout: 264 seconds)
[04:12:02] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[04:13:14] *** AAAAAA_Dragon is now known as A_Dragon
[04:13:18] *** JollyRoger is now known as TheJollyRoger
[04:13:22] *** TheJollyRoger is now known as PeterEaston
[04:13:42] *** PeterEaston is now known as JollyRoger
[04:17:52] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[04:46:41] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:f9a1:6a30:5a54:d88f) (Ping timeout: 252 seconds)
[05:01:52] *** Parts: uplime (uplime@offtopia/nomad) (/me scurries away)
[05:15:18] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[05:23:53] *** Quits: kayabaNerve_ (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[05:27:11] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[05:28:16] *** Quits: kayabaNerve_ (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[05:31:21] *** Quits: jbis (~jbis@72.89.115.213) (Quit: Leaving...)
[05:31:41] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[06:05:20] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[06:08:40] *** Joins: pete443 (~pete@user/pete443)
[06:11:04] *** Quits: pete443_ (~pete@user/pete443) (Ping timeout: 272 seconds)
[06:20:26] *** Joins: deusexbeer (~hedeo@37-146-228-227.broadband.corbina.ru)
[07:39:23] *** Quits: c4rc4s (~c4rc4s@user/c4rc4s) (Ping timeout: 252 seconds)
[08:05:05] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:05:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 244 seconds)
[08:06:18] *** Lord_of_Life_ is now known as Lord_of_Life
[08:09:44] *** Quits: torchic (~noturboo@2a04:dd00:2:61::7068) (Remote host closed the connection)
[08:28:32] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:31:06] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[08:49:17] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[08:49:31] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[08:51:56] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[09:00:14] *** Joins: madage (~madage@user/madage)
[09:04:21] *** Joins: synaps3 (~void@user/synaps3)
[09:04:36] <synaps3> hi, is there a way to encrypt data so it needs multiple keys to decrypt ?
[09:08:03] <Alipha> synaps3: there's shamir secret sharing. Though a simpler way would be to just xor keys together to create a key
[09:08:54] <synaps3> i'm just thinking about like these locks that need 2 keys to unlock
[09:09:11] <synaps3> is there an easy way of doing it, already implemented in some software ?
[09:11:06] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[09:15:29] <Alipha> Encrypt something with master_key. Then randomly generate key1 and key2, and then key3 is (master_key xor key1 xor key2). Distribute key1, key2, and key3. Then you need all 3 in order to recreate master_key by doing (key1 xor key2 xor key3)
[09:32:49] <synaps3> tnx
[09:33:16] <Wulf> synaps3: n locks and n keys needed? or fewer needed?
[09:33:43] <synaps3> 1 lock n keys
[09:38:48] <Wulf> synaps3: each lock only got 1 key...
[09:39:47] <synaps3> oh then n locks n keys yes
[09:40:30] <Alipha> Or you can encrypt the plaintext with one key, then encrypt the ciphertext with another key, and then encrypt THAT ciphertext with another key
[09:42:01] <synaps3> like onion
[09:42:04] <Alipha> My first suggestion means that someone has the master_key at some point, which means they could record that master key so that they don't need it to decrypt in the future. The second suggestion would allow for each party to keep their key secret
[09:42:33] <Alipha> ... so that they don't need the 3 separate keys in the future, I meant
[09:43:26] <Alipha> And yes, like an onion
[09:57:58] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:01:01] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 244 seconds)
[10:04:31] *** Joins: chomwitt (~Pitsikoko@2a02:587:dc02:b00:98b0:cd42:bd6f:8295)
[10:11:13] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:13:56] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[10:32:11] <riv> you could just take he key file and split it into 2 files
[10:32:22] <riv> like if the password is abcdef -> abc and def
[10:32:51] <riv> the xor way is better
[10:40:00] *** Quits: synaps3 (~void@user/synaps3) (Ping timeout: 268 seconds)
[11:28:04] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[11:28:47] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[11:54:19] *** Quits: madage (~madage@user/madage) (Ping timeout: 252 seconds)
[12:04:15] *** Joins: synaps3 (~void@91-150-115-250.dynamic.isp.telekom.rs)
[12:11:07] *** Quits: chomwitt (~Pitsikoko@2a02:587:dc02:b00:98b0:cd42:bd6f:8295) (Ping timeout: 264 seconds)
[12:40:32] *** Joins: chomwitt (~Pitsikoko@athedsl-351576.home.otenet.gr)
[12:51:00] *** Joins: martin02 (silas@hund.fs.lmu.de)
[12:55:04] *** Quits: HifiKuno (~HifiKuno@167-179-170-202.a7b3aa.bne.nbn.aussiebb.net) (Ping timeout: 272 seconds)
[13:19:00] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:20:52] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Read error: Connection reset by peer)
[13:21:06] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[13:22:02] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[13:32:09] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:32:17] *** Joins: Lyn (~Lyn@user/law)
[13:35:16] <Lyn> what's the best practice in this situation: want to publicly broadcast a hash that could be used in the future to indicate having known something in the past (without immediately revealing what exactly). the message might have such low entropy that adding more entropy is desired. In what way should this be done, such that it couldn't be argued that the Message+Entropy wasn't simply a bruteforced collision?
[13:35:34] *** Joins: s1b1 (~s1b1@user/s1b1)
[13:43:11] *** Quits: Oshawott (~archenoth@S0106889e6827f474.cg.shawcable.net) (Ping timeout: 244 seconds)
[13:48:20] *** Quits: riv (~river@tilde.team/user/river) (Quit: Leaving)
[13:54:41] <Wulf> Lyn: is your knowledge about serious vulnerabilities in hash functions?
[13:56:56] <Lyn> Wulf: no
[13:56:58] <Wulf> Lyn: also look into time-stamp services
[13:57:47] <Lyn> I was thinking about using such, on some blockchain, but I'm not yet aware of the practicalities regarding the above
[13:58:04] <Wulf> Lyn: so if you can't break hash functions, simply add some random bytes. Or you could use hmac-sha3-512 and keep the key+message secret.
[14:01:45] <Lyn> in the future someone might break the hash functions, or at least be able to bruteforce a collision, the latter of which I'm a bit wary of, since the random bytes could look like bruteforcing
[14:02:51] <Lyn> so I guess the question boils down to: how to add entropy in such a way that it does not (or perhaps, cannot) resemble bruteforcing a collision
[14:04:56] *** Quits: Ohlov38951749035 (~Ohlov3@dyndsl-085-016-109-147.ewe-ip-backbone.de) (Ping timeout: 252 seconds)
[14:14:24] <Wulf> Lyn: you want entropy that isn't entropy?
[14:15:24] <Wulf> Lyn: nobody managed to create an hmac-md5 collision yet, from what I know.
[14:16:15] <Lyn> I'm just thinking there might be certain typical patterns in bruteforces
[14:17:42] <Lyn> I think I'll look more into the hmac
[14:18:02] <Wulf> Lyn: you can also encrypt your message using an asymmetric algorithm.
[14:18:21] <Wulf> publish it together with the public key. Release the private key later.
[14:18:33] <Lyn> that's a good suggestion
[14:19:21] <Lyn> how do hmac-sha3-512 and hmac-md5 compare?
[14:19:46] <Wulf> Lyn: hmac-md5 is shorter but might be less secure
[14:22:22] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:22:28] <yawkat> this is just a committment
[14:22:40] <yawkat> https://en.wikipedia.org/wiki/Commitment_scheme
[14:22:48] <Riastradh> Lyn: you might be looking for a `commitment scheme', and HMAC-MD5 is a very bad choice for it because it is not collision-resistant and a commitment scheme absolutely relies on collision resistance.
[14:23:20] <yawkat> i think hmac-md5 is still collision resistant
[14:23:26] <yawkat> not that anyone should use it ever
[14:23:38] <Riastradh> no
[14:23:56] <Wulf> Riastradh: is there any known collision?
[14:24:00] <Riastradh> HMAC-MD5 is absolutely not collision resistant
[14:24:21] <Riastradh> It is trivial to find collisions, using a standard MD5 collision attack.
[14:25:03] <Wulf> Riastradh: prove it please
[14:25:07] <Riastradh> Don't even need to choose the prefix; a random prefix will work fine: get a collision in the inner hash, and then pull the key out of whatever the inner message was and use that as the HMAC key, and *bam* you have a full collision in HMAC-MD5.
[14:25:33] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 244 seconds)
[14:25:49] <yawkat> oh yea, "normal" attacks on hmac assume fixed key, but that wont work for a commitment scheme obviously
[14:26:24] <Riastradh> Yes, I'm talking about finding a triple (k, m, m') such that HMAC-MD5(k, m) = HMAC-MD5(k, m').
[14:26:29] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:26:41] <Riastradh> This is the setting of commitments.
[14:27:20] <Riastradh> (For PRF security HMAC-MD5 is more or less fine for reasonably small numbers of messages (expected number before security-destroying collision is 2^64).  But hash commitments rely on much more than PRF security!)
[14:28:15] <Wulf> Riastradh: never mind, I had another look at hmac.
[14:28:25] <Wulf> Lyn: okay, please don't use hmac.
[14:29:24] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[14:30:01] <Riastradh> (The critical difference is that in the commitment setting, the adversary -- trying to break the commitment -- can control the key k; in the PRF setting, the adversary doesn't even know what k is.)
[14:36:22] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[14:36:46] *** Joins: kish` (~aqua@user/aqua)
[14:43:23] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:47:06] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 264 seconds)
[14:57:04] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:03:26] <MacGyver> You can get by with HMAC-SHA2 in a pinch, no?
[15:06:16] <MacGyver> As in, the main problem with using HMAC-MD5 isn't because it's HMAC, but because it's MD5.
[15:11:17] <Riastradh> HMAC-SHA256 is fine, yes
[15:11:27] <Riastradh> any HMAC-SHA2 is fine
[15:13:53] <MacGyver> I mean if you need this commitment to be valid across decades you may want to consider something else, but...
[15:17:24] <Riastradh> not really
[15:18:37] <MacGyver> Riastradh: I'm mainly thinking "Can I imagine advances in cryptanalysis that would break the collision resistance of SHA2 on that timescale".
[15:19:28] <Riastradh> collision resistance not important for _future_ attacks on _past_ commitments
[15:21:55] <MacGyver> D'oh, brainderp, of course.
[15:28:04] *** Quits: brcolow (~brcolow@ip68-0-136-132.tc.ph.cox.net) ()
[15:32:49] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 272 seconds)
[15:34:53] *** Joins: Lynn (~Lyn@user/law)
[15:37:20] *** Quits: Lyn (~Lyn@user/law) (Ping timeout: 268 seconds)
[15:38:55] *** Quits: Lynn (~Lyn@user/law) (Ping timeout: 244 seconds)
[15:45:49] *** Quits: synaps3 (~void@91-150-115-250.dynamic.isp.telekom.rs) (Changing host)
[15:45:49] *** Joins: synaps3 (~void@user/synaps3)
[15:46:47] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[15:51:17] *** Joins: dez (uid92154@user/dez)
[15:56:31] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[15:59:16] *** Quits: deusexbeer (~hedeo@37-146-228-227.broadband.corbina.ru) (Quit: Konversation terminated!)
[16:02:56] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:1e4a:1cd5:4170:e3e0)
[16:15:34] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 252 seconds)
[16:18:17] *** Joins: vernaz (~vernaz@2001:818:d8da:9b00:57:2df:36aa:a681)
[16:28:46] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 252 seconds)
[16:33:29] <tolarz> security risk: two PCs, one keyboard that you regularly switch to which PC it is connected
[16:33:43] <tolarz> entering the password for one PC, realizing the keyboard was connected to the other PC and typed somewhere...
[16:34:06] *** Quits: vernaz (~vernaz@2001:818:d8da:9b00:57:2df:36aa:a681) (Remote host closed the connection)
[16:34:09] <MacGyver> Ah, a variant of the "my screenlocker didn't grab the keyboard".
[16:34:25] <MacGyver> (Yes, I'm still bitter about that. YOU HAD ONE JOB.)
[16:34:43] *** Joins: vernaz (~vernaz@2001:818:d8da:9b00:57:2df:36aa:a681)
[16:35:35] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[16:36:28] <Riastradh> *ahem* if the job description says `screen locker' why do you expect it to lock the keyboard too
[16:37:35] <MacGyver> Well it *was* slock so I guess the suckless philosophy of only doing what it says on the tin applies, but...
[16:38:00] <rqsd> Isn't screen locking on X11 kind of a hard problem anyway?
[16:38:33] <MacGyver> rqsd: Well sure but not so hard that your locker should pass input directly through to whichever application happened to be focused in the workspace before screenlocking.
[16:38:42] *** Quits: vernaz (~vernaz@2001:818:d8da:9b00:57:2df:36aa:a681) (Ping timeout: 240 seconds)
[16:39:02] <MacGyver> Some kind of corner case if slock managed to spawn twice, or something.
[16:39:10] <MacGyver> Suffice to say I stopped running slock.
[16:42:25] <tolarz> hmhmhm
[16:42:35] <tolarz> crazy that this happened
[16:45:54] *** Joins: riv (~river@tilde.team/user/river)
[17:06:29] *** Joins: madage (~madage@user/madage)
[17:20:00] *** Quits: synaps3 (~void@user/synaps3) (Read error: Connection reset by peer)
[17:27:22] *** Quits: Iota (~Iota@user/iota) (Quit: Leaving)
[17:30:52] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[17:39:07] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:1e4a:1cd5:4170:e3e0) (Remote host closed the connection)
[18:01:24] *** Joins: PJBoy (~PJBoy@user/pjboy)
[18:05:56] <[iz]> for issues like that, i forced myself into the habit of waiting a second before hitting enter after typing any password, just to make sure the output went where i thought it was going first
[18:06:15] <[iz]> because usually hitting enter at the end was just like part of typing the password for me
[18:06:41] <[iz]> amazing what a difference one second to double check can make
[18:11:34] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[18:15:07] *** Joins: g00fy (~g00fy@user/g00fy)
[18:25:20] *** Quits: lazzurs (~lazzurs@user/lazzurs) (Quit: The Lounge - https://thelounge.chat)
[18:34:05] *** Joins: kish` (~aqua@user/aqua)
[18:49:56] <BUSY> does running a reasonably secure web password through md5 have any impact on its security?  does the answer change if this operation increases the number of characters in the password?
[18:51:23] <riv> it basically has no effect
[18:51:49] <riv> if X is a set of passwords with entropy k, MD5(X) is also a set with entropy k
[18:52:21] <riv> (assuming k <= entropy of md5 hash)
[18:52:53] <Alipha> BUSY: what are you trying to protect against?
[18:52:58] <BUSY> wouldn't a brute force attacker with no information start with short dictionary attacks? aren't there enough hash digests to slow down an attack?
[18:53:22] <riv> if an attacker knows this schema, they can simply check MD5(small dictionary)
[18:53:37] <riv> so it takes exactly the same amount of time as checking small dictionary
[18:53:48] <riv> i.e. they don't have to check all md5 hashes
[18:55:04] <BUSY> but without, it has high likelihood to double the attack time?
[18:55:14] <BUSY> i can try pbkdf2 or scrypt, but i'm wondering if it isn't overkill
[18:55:24] <riv> without what
[18:55:31] <BUSY> without knowing the schema
[18:55:42] <riv> it's an assumption in cryptography that this is known
[18:55:55] <riv> Kerckhoffs's principle
[18:56:00] <BUSY> maybe my idea of the attacker is wrong
[18:56:06] <Alipha> BUSY: so you're suggesting using an md5 hash as your password when you register on websites?
[18:56:07] <riv> pbkdf2 or scrypt are different to a simple hash function
[18:56:16] <riv> because they are slow key derivation functions
[18:56:24] <riv> performing an md5 hash is basically instant
[18:56:31] <riv> but you can tweak scrypt to take a long time
[18:56:38] <BUSY> Alipha, right, with the input also being somewhat complicated - is this weak to collision?
[18:56:51] <riv> this means that an attacker could be slowed down significantly having to run scrypt on everything in a small dictionary
[18:56:59] <riv> this is what we do in e.g. web servers
[18:57:22] <riv> instead of storing passwords plain, or hashed, we store them scrypt'd (or some other slow key derivation function)
[18:58:07] <Alipha> BUSY: if you're assuming the attacker doesn't know you're using md5, your passwords will be uncrackable within anyone's lifetime
[18:58:45] <BUSY> if they happen to attack using an md5 vector, does this process in-fact reduce my security because of possible shorter collisions?
[18:59:19] <riv> BUSY, if it wasn't obvious from what i said - this idea of hashing your password isn't a good one
[18:59:34] <riv> what you should instead do is choose password from a set with significant entropy
[19:00:06] <Alipha> BUSY: there's not going to be any collisions. The odds of a collision is basically zero
[19:00:19] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[19:00:33] <BUSY> riv, but forcing the attacker to try MD5(large dictionary) is not any worse than using (large dictionary)?
[19:00:47] <riv> yes, i explained why. did it make sense?
[19:00:50] <BUSY> this also hides the plaintext against someone with 0 information
[19:01:07] <riv> You should use Kerckhoffs's principle if you want proper security
[19:01:56] <BUSY> if the attacker goes in knowing i'm using md5, does this weaken the entropy from a secure private key?
[19:02:17] <riv> I explained the conditions for when it does and doesn't already
[19:02:33] <BUSY> i see the conditions for does but not doesn't
[19:02:46] *** Quits: JollyRoger (~JollyRoge@user/thejollyroger) (Ping timeout: 252 seconds)
[19:02:58] <riv> an MD5 hash is 128 bits long, if your list of passwords is > 2^128 long hashing reduces the entropy
[19:03:00] <BUSY> oh with entropy that exceeds md5
[19:03:58] <Alipha> Using MD5(large dictionary) is negligibly less secure than (large dictionary)
[19:04:01] <riv> if your list of passwords is below that then hashing wont have any significant effect on entropy - it might introduce an insignificant number of collisions
[19:04:38] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[19:04:38] <BUSY> i understand - it is never better, often the same, and possibly worse
[19:04:42] <edk> it reduces the entropy before that but i'm failing to recall how
[19:04:47] <riv> yes
[19:05:20] <BUSY> though ignoring mr. auguste kerckhoff, or if i make my own tweak to the schema
[19:05:32] <BUSY> only kidding the geniuses have already done this for me
[19:05:50] <Alipha> BUSY: it's called "using a password manager"
[19:06:31] <BUSY> :)
[19:06:40] <edk> the expected number of unique md5s is always smaller than the number of possible inputs, the different starts getting big a lot sooner than 2^128 iirc
[19:07:10] <Riastradh> BUSY: For someone storing a database of password hashes for authentication: you should use a modern password hash like argon2id.
[19:07:36] <BUSY> Riastradh, this would be done on the client-side - basically looking at \a homebrewed password manager
[19:07:48] <riv> as explained, this isn't useful client side
[19:07:59] <riv> what a client can do that is useful is to choose a password from a large entropy pool
[19:07:59] <Riastradh> If you're picking passwords, why would MD5 be involved?
[19:08:38] <riv> another valuable principle in security is to not randomly add cryptography primtives to stuff
[19:08:39] <BUSY> that is not the plan, i was just trying to better understand why so many people poo-poo it
[19:11:47] <BUSY> easy misconception, i see that longer=better is not always the case
[19:12:01] <Alipha> BUSY: I'm not poo-pooing it necessarily. For an attacker who doesn't know you're using md5, md5(moderately difficult password) is basically impossible to crack. For an attacker who does know you're using md5, md5(moderately difficult password) isn't appreciably less secure than (moderately difficult password). Though ideally you'd use a (super difficult password) in the first place, which makes the md5
[19:12:03] <Alipha> irrelevant
[19:12:46] <BUSY> or a downside
[19:12:49] <riv> it's a bad idea
[19:13:36] *** Joins: PJBoy (~PJBoy@user/pjboy)
[19:14:22] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[19:14:40] <BUSY> thank you all! i've come away with a better understanding
[19:15:22] <Riastradh> If you're tempted to reach for MD5 and you don't have a specific engineering constraint mandating it or limiting you to other cryptography, you should reconsider your life choices.
[19:15:53] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[19:19:17] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[19:24:23] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[19:26:41] *** Quits: AkechiShiro (~licht@user/akechishiro) (Ping timeout: 252 seconds)
[19:27:22] *** Joins: AkechiShiro (~licht@user/akechishiro)
[19:34:18] *** Joins: madage (~madage@user/madage)
[19:35:42] *** Joins: mouseghost (~draco@user/mouseghost)
[19:49:33] *** Quits: GNUcifer (~ct@160-169-142-46.pool.kielnet.net) (Ping timeout: 268 seconds)
[19:54:22] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[19:56:28] <ioxzev1z> If using ECB, and having two identical blocks encrypt to two identical ciphertexts, can those two be enough to recover a key?
[19:56:48] <Riastradh> no
[19:56:55] <ioxzev1z> Or does the knowledge from the above simply make it easier for analysis of the ciphertext?
[19:57:01] <Riastradh> point of ECB is that it is broken _even if_ the underlying block cipher is secure as a block cipher
[19:59:57] <ioxzev1z> Is it possible to determine a mode of encryption given only the cipher (e.g. AES) and the ciphertext, such that you can determine from any c that it uses gcm, ecb, etc without knowing it?
[20:01:29] <ioxzev1z> For example, given c you could determine that the mode used was ecb by finding identical ciphertext blocks, and so on?
[20:01:41] <Riastradh> not necessarily but you can certainly make guesses, e.g. if you see many repeated blocks there's a good chance it was ECB, but you can't say so conclusively
[20:06:12] *** Joins: GNUcifer (~ct@i59F4BE39.versanet.de)
[20:07:18] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[20:16:13] <Wulf> ioxzev1z: usually CBC or GCM is used. I almost never see other modes.
[20:16:44] <ioxzev1z> Are other modes obsolete?
[20:17:00] <ioxzev1z> The wikipedia list has a lot of options
[20:17:06] <yawkat> i hear OCB3 is the new rage
[20:17:13] <yawkat> "new"
[20:17:53] <rqsd> I thought people agreed that OCB3 is only the new rage on the block cipher mode of operation valley if you can't do AEGIS, which is essentially only when you don't have hardware AES
[20:18:05] <rqsd> shoutouts to the patents gang
[20:20:56] <Riastradh> ioxzev1z: the notion of `modes' as a concept for applications to choose is obsolete
[20:21:06] <ioxzev1z> Riastradh, how so?
[20:26:44] <ioxzev1z> Riastradh, do you mean that there is only one logical choice for the vast majority of applications?
[20:27:21] <Alipha> ioxzev1z: a programmer should only be concerned about what they want to DO, not HOW it is done. For instance, if you look at libsodium, there's crypto_secretbox_easy for symmetric encryption and crypto_box for asymmetric encryption. Libsodium decided what algorithms and modes to do those things. The programmer shouldn't be concerned with how it is done and what modes to use, as that gives the opportunity for
[20:27:22] <Alipha> the programmer to make bad choices
[20:35:06] *** Joins: deusexbeer (~hedeo@37-146-228-227.broadband.corbina.ru)
[20:36:18] <Riastradh> you want an authenticated cipher
[20:36:40] *** GNUcifer is now known as cehteh
[20:36:51] <Riastradh> The fact that there's a 128-bit pseudorandom permutation family (`block cipher') underneath isn't important for an application; the fact that you can reuse the same 128-bit PRP in several different ways to make different kinds of things is not important for an application.
[20:36:56] <Alipha> And the vast majority of "block cipher modes of operation" should not be used because they don't provide authentication, which means they don't actually provide any security. What you wanted is Authenticated Encryption (AEAD) algorithms, such as AES-GCM, xsalsa20-poly1305 and xchacha20-poly1305. It's possible to use for example AES-CBC securely, but you need to authenticate it with HMAC or poly1305. However,
[20:36:57] <Alipha> having separate encryption and authentication steps is error-prone (see Lucky 15 attack against AES-CBC-HMAC)
[20:37:23] <Alipha> Lucky 13, rather
[20:47:20] <kish`> What do crypographers use when encrypting? AGE? GPG? OpenSSL?
[20:48:01] <MacGyver> Pen and paper.
[20:48:29] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[20:48:49] <MacGyver> See m? Well if I write down E_k(m) you can no longer read it!
[20:48:57] <riv> kish`, depends on the situation
[20:49:57] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Client Quit)
[20:52:28] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[20:54:59] <kish`> riv, what if you just need to do symmetric encryption
[20:55:48] *** Joins: torchic_ (~noturboo@2a04:dd00:2:61::7068)
[21:00:08] <riv> symmetric encryption is a cryptographic primitive instantiated by things like AES, chaha
[21:00:11] <riv> chacha*
[21:01:03] <riv> to actually solve a practical problem like 'sending a file across blah blah.. and maintaining secrecy and integrity' you would need much more than just a primitive
[21:02:02] *** Joins: wasamasa (~wasamasa@chicken/contributor/wasamasa)
[21:02:30] <wasamasa> I want to enhance some openssl bindings and am looking over various openssl APIs besides the socket ones
[21:02:42] <wasamasa> is there some recommendation what one should use and what not?
[21:03:03] <wasamasa> for example the rand APIs look not terribly useful to me on a linux system
[21:03:32] <wasamasa> I've considered writing bindings for the cipher/digest/mac ones, not sure about kdf, rand, bignums and PKI stuff
[21:11:36] <MacGyver> kish`: You never just need to do symmetric encryption, is what we've come to realize in the past 20 years.
[21:12:06] <MacGyver> See the previous discussion about "modes being obsolete".
[21:13:28] <wasamasa> I'm tempted to just look at the stuff ruby/python bothered writing bindings for
[21:14:21] <MacGyver> kish`: The point being: even if you *think* you only need symmetric encryption, what you *actually* need is symmetric *authenticated* encryption to deter certain classes of attacks.
[21:18:00] <danieldg> yeah, basically the only time you don't nee authenticated encryption is when an attacker can't access the ciphertext
[21:19:05] <danieldg> at that point you may want to ask why you need encryption at all, though in some cases it makes sense - say, the attacker can only gain access after you throw out a disk and you never use it again after throwing it out
[21:20:15] <MacGyver> Yeah, disk encryption is one of the few cases where we don't care *that* much.
[21:20:17] <MacGyver> And even there...
[21:20:39] <MacGyver> We'd *like* to use authenticated encryption but the overhead has just been too damn high so far.
[21:21:06] <ioxzev1z> Doesn't cryptsetup have cryptverify or something like that for AEAD disk encryption?
[21:21:40] <wasamasa> https://web.archive.org/web/20151117025401/http://jbp.io/2014/01/16/openssl-rand-api/ suggests I shouldn't bother with RAND_* :D
[21:22:03] <yawkat> zfs can verify files, but i dont know how much it's really been designed to work as AE
[21:22:05] <MacGyver> ioxzev1z: Quite possibly, there's been some developments in disk encryption that I haven't been keeping track of.
[21:22:30] <MacGyver> yawkat: Yeah, so, the usual advice was "Use XTS and then verify integrity on the data, not the ciphertexts".
[21:22:59] <MacGyver> But that's really just comparable to mac-then-encrypt and we all know how finnicky that kind of construction is.
[21:23:02] <yawkat> which is very dubious yea
[21:23:19] <yawkat> im not sure how zfs handles it since it includes encryption and the authentication
[21:23:21] <MacGyver> And in the case of filesystem integrity checking there's usually not even a key involved, so yeah.
[21:23:27] <danieldg> ioxzev1z: it's difficult to get AEAD on disk crypto if you also want to recover on crashes; I think they may have solved that by journalling or something
[21:23:31] <MacGyver> Oh you mean zfs does this *natively*?
[21:23:34] <yawkat> yes
[21:23:44] <MacGyver> Hrmmm, then there's a chance they actually have a proper construction.
[21:24:30] <yawkat> google also went for an SPRP with their adiantum cipher for android
[21:24:44] <yawkat> though that is limited to disk blocks i believe so not perfect either
[21:24:48] <danieldg> you really need to look at the details (I haven't) because sometimes things like file sizes are left unencrypted
[21:25:05] <danieldg> and maybe that doesn't matter to you, but maybe it does
[21:27:02] <MacGyver> Personally I just assume the local four-letter-agency isn't going to break into my house and I just keep my laptop with me / in line of sight at all times when away from home.
[21:27:08] <MacGyver> So authenticated disk encryption... meh.
[21:27:32] <MacGyver> Wake me in a year or two when stuff's settled a bit :P
[21:30:26] *** Quits: s8n (~s8n@user/s8n) (Ping timeout: 252 seconds)
[21:34:00] *** Joins: s8n (~s8n@user/s8n)
[21:39:56] <kish`> What would you use to encrypt archives that will be stored on someone else server? GPG? something else?
[21:40:03] <kish`> what do you consider most secure?
[21:41:08] *** Joins: andreasbuhr (~quassel@p549dbbcc.dip0.t-ipconnect.de)
[21:41:08] *** Quits: andreasbuhr (~quassel@p549dbbcc.dip0.t-ipconnect.de) (Client Quit)
[21:41:47] <yawkat> encrypted with what? password? stored key?
[21:43:01] <kish`> Password.
[21:43:20] *** Quits: phebus (~phebus@c-73-113-180-252.hsd1.tn.comcast.net) (Quit: POKE 1,0)
[21:44:46] <kish`> I only know of AGE, GnuPG, and OpenSSL. Perhaps there's something better.
[21:47:25] <mouseghost> dont all use AES?
[21:50:08] <riv> kish`, LUKS
[21:50:23] <riv> wait no
[21:51:52] <yawkat> age is fine
[21:52:32] <rqsd> I'd use age, personally
[21:54:44] *** Joins: hug0 (~quassel@2a02:830a:b280:ee00:6e71:d9ff:feb4:55d2)
[21:58:46] *** Quits: hug0 (~quassel@2a02:830a:b280:ee00:6e71:d9ff:feb4:55d2) (Client Quit)
[22:04:44] *** Quits: torchic_ (~noturboo@2a04:dd00:2:61::7068) (Remote host closed the connection)
[22:11:00] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[22:12:50] *** Joins: torchic (~noturboo@2a04:dd00:2:61::7068)
[22:12:56] *** Joins: torchic__ (~noturboo@2a04:dd00:2:61::7068)
[22:14:04] *** Quits: torchic (~noturboo@2a04:dd00:2:61::7068) (Remote host closed the connection)
[22:14:04] *** Quits: torchic__ (~noturboo@2a04:dd00:2:61::7068) (Remote host closed the connection)
[22:17:47] <ioxzev1z> gpg -c file
[22:17:48] <ioxzev1z> ...
[22:18:13] <ioxzev1z> probably want gpg -se -r person file
[22:18:26] <ioxzev1z> s/person/recipient/
[22:18:55] <ioxzev1z> riv, LUKS isn't really for files so much as block devices e.g. hard drives and so on
[22:23:55] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:26:42] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[22:43:15] *** Joins: torchic__ (~noturboo@2a04:dd00:2:61::7068)
[23:12:21] <ioxzev1z> Anyone annoyed with camelCase use for LUKS in cryptsetup?
[23:12:24] <kish`> It's not clear what cipher AGE uses.
[23:12:37] <ioxzev1z> using --luks-add-key over luksAddKey would be much cleaner
[23:13:03] <ioxzev1z> Or --luks --add-key
[23:13:07] <Alipha> There's also the scrypt command line utility
[23:13:52] <Riastradh> kish`: https://age-encryption.org -> formal specification at https://age-encryption.org/v1 -> p. 4, Format: `encrypt[key](plaintext) is ChaCha20-Poly1305 from RFC 7539 with a zero nonce.'; next couple pages detail how it is used in the format.
[23:14:31] <ioxzev1z> Riastradh, zero nonce? how does that work with a stream cipher?
[23:15:13] <Riastradh> ioxzev1z: single-use key
[23:15:35] <Riastradh> ...oh, excuse me, the payload itself is encrypted with STREAM using ChaCha20-Poly1305 (p. 6)
[23:15:37] <ioxzev1z> Riastradh, I always thought nonce was required even for a random key
[23:15:51] <Riastradh> ioxzev1z: The rule is that you must not repeat a (key, nonce) pair.
[23:16:21] <Riastradh> Same nonce, independent keys => you're fine.  Same key, different nonces to send messages at different times => you're fine.
[23:16:41] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[23:17:03] <yawkat> Same nonce, same key => you're a nonce
[23:17:09] <ioxzev1z> Ah, I always read the "never reuse a nonse" as literally never reuse nonce, e.g. 0 nonce is a no
[23:17:33] <yawkat> ok, nonce is more rude than i thought apparently :D
[23:18:28] <Riastradh> Some people prefer `message number' for both of these reasons -- less confusing to the British, and might not imply global uniqueness (e.g., message numbers 0, 1, 2, ..., are perfectly fine in a protocol for conversations with a fresh key for each conversation).
[23:18:40] <Riastradh> s/imply/suggest/1
[23:23:08] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 265 seconds)
[23:24:09] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[23:44:13] *** Joins: JollyRoger (~JollyRoge@user/thejollyroger)
[23:52:55] *** Joins: lazzurs (~lazzurs@user/lazzurs)
