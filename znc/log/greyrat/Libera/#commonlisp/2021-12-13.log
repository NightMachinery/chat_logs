[00:04:29] <phoe> the clnet mailman is still not working correctly, so I'll make a small reminder here: Online Lisp Meeting #12 is announced, see https://www.reddit.com/r/lisp/comments/reahby/ for details
[00:07:25] <rotateq> thank you again
[00:13:41] <fiddlerwoaroof> Has anyone else run into differences between cl+ssl in emacs vs. command-line on mac?
[00:13:41] <fiddlerwoaroof> https://github.com/cl-plus-ssl/cl-plus-ssl/issues/142
[00:17:02] *** Joins: tyson2 (~user@cpe9050cac49283-cm9050cac49280.cpe.net.fido.ca)
[00:30:11] <phoe> seems like some sort of dynalib loading issue
[00:30:32] <phoe> could you post the condition report and/or slots?
[00:32:33] <fiddlerwoaroof> the libs in CFFI::*FOREIGN-LIBRARIES* are identical
[00:33:26] <phoe> I would assume so, but this is likely some stuff on OS level
[00:33:33] <phoe> macos is infamous for such breakages
[00:34:10] <fiddlerwoaroof> If I had to guess, I think there's probably some access rules for the system cert store that is causing problems
[00:34:37] <fiddlerwoaroof> Anyways, I've attached the condition info to the issue
[00:35:03] <phoe> "Certificate Verification: Error (20): Unable to Get Local User Certificate."
[00:35:09] <phoe> woah! you were right
[00:35:57] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:39:44] <fiddlerwoaroof> I'm going to try upgrading openssl, but I doubt that's the problem
[00:40:15] *** Quits: tyson2 (~user@cpe9050cac49283-cm9050cac49280.cpe.net.fido.ca) (Ping timeout: 252 seconds)
[00:41:06] <fiddlerwoaroof> Maybe I'll try using a different implementation first
[00:43:46] <phoe> what is your openssl version?
[00:44:10] <fiddlerwoaroof> 1.1.1k
[00:44:13] <fiddlerwoaroof> but just upgraded
[00:44:31] <fiddlerwoaroof> The reason I don't think this is the problem is that it works from the terminal
[00:45:25] <fiddlerwoaroof> Hmm, it works in ECL from slime
[00:45:37] <fiddlerwoaroof> I now need to double-check that sbcl is still broken, since I upgraded
[00:47:08] <phoe> maybe for whatever reason the openssl binary that is loaded differs between these two sessions
[00:47:17] <phoe> that's the only explanation that comes to my mind, honestly
[00:47:46] <phoe> try to pull a fresh cl-plus-ssl maybe, like, from git
[00:47:52] <phoe> there were some macos-specific patches to it recently
[00:49:03] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 252 seconds)
[00:50:13] <fiddlerwoaroof> Good idea, I haven't updated my quicklisp dists recently
[00:50:21] <phoe> it's not about the quicklisp dist
[00:50:30] <phoe> these were changes that were pushed like days ago, they likely are not on quicklisp
[00:50:32] <phoe> ...yet
[00:51:05] <fiddlerwoaroof> Yeah, it's just I'm not necessarily with the most recent released version of CL+SSL
[00:52:02] <fiddlerwoaroof> Using the git version doesn't help, though
[00:53:36] <phoe> hmmmm
[00:53:41] <phoe> no idea now
[00:56:32] <fiddlerwoaroof> Well, I have a workaround, thanks!
[01:08:59] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:09:11] *** Joins: backquotehelp (~backquote@97-116-60-21.mpls.qwest.net)
[01:09:48] <backquotehelp> Why does ``(+ ,,(+ 1 4)) evaluate to `(+ ,5)?
[01:10:19] <backquotehelp> I'm mostly confused about the stray comma behind the 5
[01:10:52] <backquotehelp> (And if I was writing a macro that used double backquote, how would I get rid of the stray comma? The suggestion of ,', I found elsewhere doesn't appear to work in sbcl, at least)
[01:10:59] <White_Flame> `(... ,(+ 1 4)) => (... 5)
[01:11:30] <White_Flame> so, add in the 2nd layer of ` and , and you get what you got
[01:19:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:19:49] <White_Flame> ``(+ ,',(+ 1 4)) => `(+ ,'5)) => (+ 5)
[01:20:21] <White_Flame> ,', is when you want the literal return value of the inner comma to pass to the outer comma, without reevaluation
[01:21:26] <White_Flame> but numbers just evaluate to themselves, which isn't a problem.  But with symbols, it's a huge difference
[01:21:33] <backquotehelp> Hm, okay, I guess that makes sense
[01:21:54] <White_Flame> it's probably the toughest stuff to learn in lisp, is tangling the quoting in macros
[01:22:39] <White_Flame> but it's just 1 step/layer at a time, using very regular semantics
[01:23:04] <backquotehelp> Alright, thanks!
[01:23:12] <backquotehelp> (Yeah, it is difficult...)
[01:23:40] <White_Flame> it's always good to hand-write what you would like the output to be, and you can work backwards from that
[01:23:59] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:24:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[01:27:31] <backquotehelp> Yeah, I've got something like that; it's mostly a matter of contending with quoting rules
[01:27:38] <backquotehelp> Thanks again for the help!
[01:28:37] *** Quits: backquotehelp (~backquote@97-116-60-21.mpls.qwest.net) (Quit: Client closed)
[01:37:44] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[01:51:36] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:59:38] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 268 seconds)
[02:01:13] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[02:02:25] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Read error: Connection reset by peer)
[02:05:57] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:252e:adea:c6cc:147)
[02:06:06] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[02:10:44] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 268 seconds)
[02:10:44] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 268 seconds)
[02:13:29] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:20:31] *** Joins: Oladon (~olad@98.43.81.226)
[02:21:08] *** Joins: nature (~nature@45.32.235.173)
[02:23:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:25:13] *** Quits: pve (~pve@37-136-164-136.rev.dnainternet.fi) (Quit: leaving)
[02:26:11] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 250 seconds)
[02:30:17] *** Quits: dra (~dra@2a04:4540:641a:a100:cda8:b2a7:6660:1d6b) (Quit: Leaving)
[02:30:44] *** Quits: gaqwas (~john@dynamic-095-117-040-097.95.117.pool.telefonica.de) (Ping timeout: 256 seconds)
[02:30:47] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[02:35:00] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[02:35:39] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:36:26] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Client Quit)
[02:36:45] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[02:51:42] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[02:53:54] *** Quits: random-nick (~random-ni@87.116.160.199) (Ping timeout: 268 seconds)
[03:04:18] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 260 seconds)
[03:10:09] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[03:17:53] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[03:20:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:21:10] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 265 seconds)
[03:21:18] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[03:25:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[03:30:55] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:252e:adea:c6cc:147) (Ping timeout: 268 seconds)
[03:40:17] *** Quits: flip214 (~marek@user/flip214) (Read error: Connection reset by peer)
[03:44:26] *** Joins: flip214 (~marek@user/flip214)
[03:46:45] *** Joins: dre (~dre@2001:8003:c932:c301:706d:6370:7ead:d0e3)
[03:59:38] *** Quits: Spawns_Carpeting (~weechat@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.0)
[04:04:02] *** Joins: yewscion (~yewscion@2601:547:a00:7720:7cdb:db14:25dc:2c9)
[04:09:26] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[04:52:32] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:53:31] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 250 seconds)
[05:07:55] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[05:08:49] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:11:54] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[05:13:36] <Guest74> well, that was a bit disappointing.  The link posted never said anything about gimp being written in lisp.
[05:15:32] *** Quits: jpl01 (~user@2001:16b8:491b:a900:905b:e37:e6b9:c44d) (Ping timeout: 240 seconds)
[05:22:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:22:44] <Bike> dunno what link you mean, but gimp uses scheme for scripting. is that what was meant?
[05:25:12] <_death> does its scheme have arrays? seems back then they weren't familiar with the concept
[05:25:39] <_death> (the link was http://www.uoxray.uoregon.edu/local/manuals/GUM/whatis.html )
[05:27:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[05:28:02] <Guest74> the link posted earlier.  By the talk it sounded like they started writing gimp in lisp.  But the link says they got fed up with lisp and decided to program something in C, gimp.
[05:31:57] <Guest74> i realize i didn't make it any clearer in my summary.  They were originally writing a compiler in lisp.
[05:40:04] *** Joins: Oladon (~olad@98.43.81.226)
[05:44:47] *** Joins: s-liao (~s-liao@101.86.96.154)
[05:45:49] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Remote host closed the connection)
[05:46:49] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[05:50:39] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[05:54:57] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[06:01:19] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[06:23:08] <unixlisp> Suppose a implementation of CL, (defparameter *a* 0) (impl:get-lisp-object-address *a*) (setq *a* 1) (impl:get-lisp-object-address *a)
[06:24:15] <unixlisp> number may be boxed. two addresses equal.
[06:25:28] <unixlisp> Is it conformming  to spec?
[06:27:38] <hayley> GET-LISP-OBJECT-ADDRESS is not a function that is specified by the Common Lisp standard.
[06:27:56] <hayley> clhs eq
[06:27:56] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_eq.htm
[06:28:11] <hayley> An implementation is permitted to make ``copies'' of characters and numbers at any time. The effect is that Common Lisp makes no guarantee that eq is true even when both its arguments are ``the same thing'' if that thing is a character or number.
[06:28:45] <Bike> also, fixnums like 0 or 1 probably don't have "addresses" in any meaningful sense to begin with
[06:29:40] <unixlisp> fixnum is boxed object, not conforming to spec?
[06:30:51] <hayley> The spec doesn't say anything about object representation.
[06:31:01] <Bike> i mean you put "impl:" in your example code
[06:31:10] <Bike> that means it's non standard
[06:32:05] <unixlisp> not break standard?
[06:32:42] <Bike> "impl" presumably means it's an extension to the standard
[06:36:32] <unixlisp> yes. To directly modify fixnum object, identical address Is not a contradiction to standard?
[06:37:26] <hayley> You cannot directly modify a fixnum object, and the standard says nothing about addresses.
[06:38:37] <unixlisp> The standard do not permit you to modify a fixnum object?
[06:38:42] <hayley> And I'll happily bet that "impl:" is an attempt at censoring "sb-impl:" which is a library exposing SBCL "internal" features, and thus exposes SBCL implementation decisions.
[06:38:44] <hayley> No, it does not.
[06:39:01] <hayley> You were modifying a binding, not an object. We went over this yesterday.
[06:39:04] <Bike> can we get some context here?
[06:39:07] <Bike> oh. i see.
[06:40:13] <unixlisp> Hayley: If I modify a object, do it break the standard?
[06:40:23] <hayley> Bike: The context, I think, is that unixlisp has been learning the difference between modifying a binding to an object, and modifying the object itself.
[06:41:11] <hayley> unixlisp: There simply is no way for you to modify a fixnum object. You've been replacing the object that is the value of some binding.
[06:41:41] <unixlisp> It is boxed.
[06:41:59] <hayley> Boxing or not is irrelevant.
[06:42:28] <Bike> thinking in terms of boxing or addresses will get you nowhere at this stage
[06:43:06] * hayley uploaded an image: (30KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/SpQEKYROvelKBsfFNviCPepW/binding.png >
[06:43:34] <hayley> Here is a sketch of what you are doing. SETQ does not modify objects, it just makes the value in a binding change.
[06:44:06] <unixlisp> If it modify object, do it break spec?
[06:44:34] <hayley> I am nowhere near my desk at the moment, so the head-desk slamming will have to wait until later.
[06:45:54] <unixlisp> thanks for discussion.
[06:49:29] <hayley> You can modify objects, generally speaking, but there are no operations which let you modify fixnums, and you are not modifying any objects in the example code provided.
[06:51:47] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[06:54:09] <unixlisp> possible implementation and standard conformming is the point.
[06:55:51] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[06:57:29] <Bike> it sounds like you are not at the level of complexity where standard conformity should be high among your concerns
[07:01:31] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[07:01:50] *** Joins: s-liao (~s-liao@101.86.96.154)
[07:04:52] <unixlisp> to understand spec and CL
[07:05:56] <hayley> The spec doesn't provide any way to modify numbers. So why would it specify what happens if you modify a number?
[07:06:25] <Guest74> this reminds me of ELIZA
[07:06:40] <Bike> you don't seem to understand basic aspects of the language semantics, so you should start with learning those, and then later you can worry about conformity and addresses and such
[07:08:10] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[07:11:05] <unixlisp> It is simple. Do the behavior break spec? Or is it not possibly implemented?
[07:11:26] <unixlisp> Anything not clear?
[07:12:35] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:27] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:13:53] *** Parts: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) ()
[07:16:03] <mfiano> break behavior must be implemented.
[07:24:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:25:14] <Bike> It's not simple if you don't understand basic concepts about the language. You keep talking about modifying numbers as if that's a thing that's possible, but the standard is very clear that it's not, so asking about what happens if you modify a number is nonsensical.
[07:28:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[07:30:23] <beach> Good morning everyone!
[07:30:32] * mfiano thinks above first two questions aren't even orthogonal to each other.
[07:32:16] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:58:39] *** Quits: dre (~dre@2001:8003:c932:c301:706d:6370:7ead:d0e3) (Quit: Leaving)
[08:03:55] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 252 seconds)
[08:05:19] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:05:33] *** Joins: dre (~dre@2001:8003:c932:c301:3df8:d146:e893:5aaa)
[08:16:03] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[08:18:20] *** Joins: semz (~none@user/semz)
[08:22:38] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 256 seconds)
[08:28:41] <White_Flame> and of course the other layer is that lisp systems were implemented in lisp, therefore they had to implement a ton of the low-level runtime implementation itself in lisp, including low-level memory access
[08:29:05] <White_Flame> so certainly that can necessarily coexist in CL to implement the spec
[08:37:20] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[08:37:39] <White_Flame> oh, you weren't here, so I'll repeat
[08:37:43] <White_Flame> and of course the other layer is that lisp systems were implemented in lisp, therefore they had to implement a ton of the low-level runtime implementation itself in lisp, including low-level memory access
[08:37:45] <White_Flame> so certainly that can necessarily coexist in CL to implement the spec
[08:39:34] <unixlisp> Bike: "You keep talking about modifying numbers as if that's a thing that's possible, but the standard is very clear that it's not", that is a clear answer.
[08:39:57] <unixlisp> But, quote the text of spec.
[08:41:03] <beach> unixlisp: There is no operator that modifies a number.  That's perfectly clear I think.
[08:41:06] <unixlisp> CLHS 3.7.1 http://www.lispworks.com/documentation/HyperSpec/Body/03_ga.htm "The consequences are undefined if literal objects are destructively modified."
[08:41:45] <beach> unixlisp: That phrase refers to objects that can be modified using existing operators.
[08:42:09] <beach> unixlisp: Like RPLACA on a literal CONS cell.
[08:42:11] <Bike> "immutable adj. not subject to change, either because no operator is provided which is capable of effecting such change or because some constraint exists which prohibits the use of an operator that might otherwise be capable of effecting such a change. Except as explicitly indicated otherwise, implementations are not required to detect attempts to
[08:42:11] <Bike> modify immutable objects or cells; the consequences of attempting to make such modification are undefined. ``Numbers are immutable.''
[08:42:21] <Bike> from the glossary.
[08:42:36] <unixlisp> "undefined" not break spec
[08:43:03] <beach> unixlisp: Oh, come on!  Are you being intentionally dense?
[08:43:21] <Bike> Reading "the consequences are undefined if literal objects are destructively modified" to mean that anything that can be literal can be destructively modified is completely absurd.
[08:43:42] <Bike> "Numbers are immutable." right there in the glossary. stop being silly.
[08:43:53] <unixlisp> "undefined" not absurd
[08:44:39] <Bike> Do you actually think that numbers are mutable despite the sentence "numbers are immutable" literally appearing in the spec
[08:45:00] <Bike> i honestly didn't think it would be that explicit! but no, it's right there, straight out
[08:45:29] <unixlisp> "numbers are immutable" in glossary not in spec
[08:45:57] *** Joins: Jing_ (~hedgehog@2604:a840:3::10c8)
[08:46:19] <hayley> The glossary is part of the specification.
[08:46:20] * beach makes use of /ignore.
[08:47:10] <hayley> The only part of the HyperSpec that is not normative, i.e. not really part of the standard, is example code.
[08:47:19] <unixlisp> beach: do you agree "The glossary is part of the specification."
[08:47:55] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Ping timeout: 252 seconds)
[08:48:00] <mfiano> Yes, /ignore is handy
[08:48:17] <unixlisp> and what is "being intentionally dense?"
[08:48:27] <Bike> the standard explicitly lists which sections are not normative in "1.4.3 Sections Not Formally Part Of This Standard". It does not include the glossary, so the glossary is part of the standard.
[08:49:18] <hayley> clhs 1.4.3
[08:49:18] <specbot> Sections Not Formally Part Of This Standard: http://www.lispworks.com/reference/HyperSpec/Body/01_dc.htm
[08:49:28] <Bike> Intentional denseness is when you twist what writing says to draw the conclusions you want to draw despite the frankly obvious meaning. If you persist in this, I don't think you're going to get any valuable experience out of this channel, and we're not going to get anything out of you.
[08:50:48] <unixlisp> not intentional surely. just standard and implementation, simple.
[08:50:51] <Bike> i don't know why i answered that. i'm so easily trolled. whatever.
[08:51:10] <Bike> it's apparently not simple because you, unixlisp, continue to be unable to understand its most basic aspects.
[08:51:26] <Bike> or maybe you're just fucking with us, who knows.
[08:52:20] <mfiano> It's very hard to tell which, given how much of a lack of understanding there is, so I'm deferring help to others.
[08:52:29] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[08:53:26] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[08:58:44] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[08:59:13] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[09:01:48] <unixlisp> Bike: "the consequences of attempting to make such modification are undefined. ``Numbers are immutable.'"
[09:02:45] <White_Flame> certainly from C you can appreciate the notion of "undefined behavior", up to and including corrupting your runtime
[09:02:56] <unixlisp> http://www.lispworks.com/documentation/HyperSpec/Body/26_glo_i.htm
[09:04:37] <Bike> there is no operator in the spec that can mutate a number. as such, there is no way to even attempt to modify a number.
[09:04:58] <Bike> mutating numbers is "undefined" in the sense that there is no defined way to do it.
[09:05:26] <beach> Bike: I admire your patience.
[09:05:44] <Bike> i am just about out of it.
[09:07:05] <unixlisp> beach: spec say SETQ modify a number then it break spec?
[09:07:07] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:07:12] <Bike> Yep. I'm done.
[09:07:20] *** unixlisp was kicked by Bike (unixlisp)
[09:07:38] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:08:17] <mfiano> Long overdue I think.
[09:08:57] <Bike> i really don't like to believe that people aren't acting in bad faith, i guess. anyway, sleeping. didn't bother with a ban, if they come back someone else can take care of that. toodles.
[09:08:59] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:13:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:14:37] <mfiano> I don't have to interrupt now to say that after a few months of not being able to program due to medical reasons, I am back on the horse, but taking it easy. A friend of mine got me interested in FreeBSD, so I've been wrapping the parts of its libc and kernel interface I need for some utilities I want to write in Common Lisp, rather than abort to an inferior language or shell scripting. It's far out of
[09:14:43] <mfiano> my comfort zone, as I really don't like writing implementation-specific code (in this case OS libc implementation, not CL), nor do I like relying on C code as my foundation instead of portable, conforming Common Lisp, but at least it's not Linux-volatile.
[09:15:58] <beach> Congratulations to being back.
[09:16:58] <mfiano> Thank you. I am having fun being back.
[09:18:59] <mfiano> In other news, I got another pull request to one of my maintained libraries today, that I refused to merge until (for the 3rd time recently) they re-edit the TAB settings in their editor. I don't see it very nice to mix TAB and space characters in a collaborative version control environment. That just adds a lot of back-and-forth whitespace diff noise.
[09:19:49] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[09:20:05] <opcode> is it possible to split a string/sequence on a blank line (e.g. \n\n in other langs?
[09:20:15] <mfiano> Sure
[09:20:19] <mfiano> "Hello
[09:20:21] <opcode> I tried #\newline#\newline but it doesn't seem to be working
[09:20:22] <mfiano>  world"
[09:20:24] <hayley> (split-sequence:split-sequence #\Newline string)
[09:20:50] <opcode> hayley: that'll split on any newline, but I want to split on an empty line only
[09:21:58] <opcode> i've tried with split-sequence and with the cl-str library but no luck :(
[09:23:31] <mfiano> Sounds like you want cl-ppcre
[09:23:51] <hayley> What's weird is that str uses cl-ppcre.
[09:24:51] <opcode> indeed
[09:25:00] <opcode> but regex is not my strong suit
[09:25:00] <mfiano> But _how_ does it use it?
[09:25:06] <mfiano> THis is a simple regex problem.
[09:25:13] <hayley> Try double escaping the \n, i.e. (str:split "\\n\\n" "Foo<newline><newline>bar")
[09:25:34] <hayley> It works with cl-ppcre but not cl-str.
[09:25:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:26:19] <mfiano> looks like a test to add to omren
[09:26:21] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:27:33] <hayley> Well, I don't think backslash-n works in Common Lisp strings (not something I try frequently), but an actual newline would work. Not that it looks very nice.
[09:27:59] <opcode> thanks, double-escaping \n worked with ppcre but not with str
[09:28:14] <opcode> that's strange, I might file a bug with str
[09:28:19] <hayley> mfiano: possibly easy, unfortunately, since I don't currently have a sense of lines; everything matches the whole string, and the "every character" symbol also matched whitespace.
[09:28:40] <mfiano> backslash n is just going to escape the character n iirc
[09:28:48] <mfiano> in a string that is
[09:29:00] <opcode> yes I realized that after the fact, haha
[09:30:25] <mfiano> also note that you may benefit from one of the efficient substring search algorithms, if your input is large enough, instead of cl-ppcre
[09:30:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[09:30:43] <mfiano> Such as KMP
[09:30:50] <mfiano> (there are better nowadays though)
[09:31:00] <hayley> cl-ppcre does use Boyer-Moore-Horspool for constant strings. It's still a slow implementation, somehow.
[09:31:07] <opcode> I'm doing advent of code, the inputs aren't huge and I can tolerate some slowness since I only have to parse the input once
[09:31:14] <opcode> what does KMP stand for?
[09:31:20] <hayley> (Or, use one-more-re-nightmare to generate SIMD code...)
[09:31:21] <mfiano> Knuth-something-something
[09:31:35] <hayley> Knuth-Morrison-Pratt is my guess.
[09:31:41] <mfiano> Yes that
[09:31:48] <opcode> thanks, I'll search that up for future reference
[09:32:01] <hayley> Knuth-Morris-Pratt; Morrison is the prime minister here.
[09:32:09] <hayley> ...I think, it changes every year.
[09:32:11] <opcode> I appreciate your time hayley, mfiano
[09:32:14] <mfiano> opcode: https://github.com/pfdietz/cl-string-match
[09:32:40] <opcode> nice, bookmarked
[09:33:44] <mfiano> I have not tried it, but Paul is an excellent hacker, and I wouldn't overlook his code
[09:37:20] <mfiano> Anyway, does anyone think I'm being too nitpicky about the above "in other news" comment I made? I seem to be getting a few PR's with that problem.
[09:37:47] * mfiano thinks whitespace is important for the [human] lisp reader, just not the lisp reader.
[09:39:21] <hayley> I think it is fair, given how much different tab widths have haunted #commonlisp.
[09:41:22] <hayley> Or, at the least, I can't really consistently say that tabs are unacceptable while doing code review in #commonlisp, but tabs are acceptable while doing code review elsewhere.
[09:42:08] <hayley> But if you like the changes, you could merge and then fix the tabs.
[09:44:51] *** Joins: treflip (~user@95.79.32.99)
[09:46:41] <hayley> mfiano: For what it's worth, you can get in trouble with "classic" substring search algorithms as they branch fairly unpredictably. So sometimes dropping constant factors, even for O(mn) algorithms, works better c.f. https://arxiv.org/abs/1612.01506
[09:47:39] <mfiano> I wouldn't doubt it.
[09:50:21] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[09:50:43] <hayley> I probably should implement Boyer-Moore-Horspool in one-more-re-nightmare again, since people do use Lisp implementations other than SBCL, and machines that aren't x86-64+AVX2 machines...
[09:51:22] <hayley> but from memory, the DFA for ab|ac, which is pretty good, could run about 2-3 cycles/character, and SIMD ran at 2 characters/cycle or so.
[09:55:21] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[10:00:03] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[10:00:17] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[10:04:44] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.3)
[10:05:48] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[10:07:06] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[10:11:25] <Guest74> oh hey that was me.  And I had just asked how to get make emacs to stop inserting tabs a couple of day ago but I guess I forgot to reformat that.
[10:17:58] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:22:59] *** Joins: spiaggia (~user@2a01:cb19:150:3400:a5fd:6343:9441:40f)
[10:23:08] <White_Flame> mfiano: also congrats on returning to code.  been there myself
[10:23:25] <mfiano> Guest74: Can I both you to add at least a simple test to test.lisp?
[10:23:29] <mfiano> bother*
[10:23:46] <mfiano> It would be nice for regressions and all
[10:23:55] <mfiano> White_Flame: Thanks!
[10:24:20] <Guest74> I'll look at it tomorrow. past my bedtime.
[10:24:53] <mfiano> Guest74: Currently |3b| has the test framework setup to only test decoded images from disk. I'm not sure how difficult it would be to change that.
[10:24:59] <mfiano> So no worries
[10:25:49] <mfiano> Currently I'm more annoyed that GitHub Actions changed its API and we can't get Windows tests to pass...and now opticl is causing Linux tests to fail...
[10:25:50] <Guest74> np, I'll take a look and see if it's trivial.
[10:26:44] <mfiano> I need to hire a [free] CI specialist to takeover. I have no time for this headache.
[10:29:08] <Guest74> I think once ms forces/tricks my windows partition to update I'm never even going to bother with it.  You probably have different priorities though.
[10:29:33] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[10:30:01] <mfiano> I have no idea what that means
[10:30:26] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[10:30:33] <Guest74> wont bother making sure anything runs on windows.
[10:31:06] <mfiano> I only care about FreeBSD myself, but the 3 major OS's are the ones with all the users.
[10:32:28] <mfiano> I also take pride in ensuring my code is portable across OS's for the small ffi bits we have to do, in addition to the obvious CL implementation portability.
[10:33:44] <mfiano> The latter is much more beneficial to longevity of code. Read conditionals can disable OS-dependent things like mmap at the expense of speed.
[10:36:48] <|3b|> the "test framework" is just a call to (pngload.test:run-tests-for-ci)
[10:37:05] <jackdaniel> ensuring that also helps to identify bits that are os dependent (that is not always obvious)
[10:38:05] <|3b|> which just calls (test-images) and converts the results to "true/false" to indicate success
[10:38:11] <jackdaniel> s/that/os portability/ s/that is/that bits are/
[10:43:35] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[10:43:48] <Guest74> |3b|: So what determines if a test succeeds?  I guess I'd have to just read the files into a vector and then load from there?
[10:44:26] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 268 seconds)
[10:45:23] <phoe> thanks
[10:45:33] <mfiano> I think it just tests the sample images in the official libpng test suite, whether or not they decode to expected values
[10:45:39] <mfiano> phoe: for?
[10:45:48] <phoe> oops, wrong channel
[10:45:52] <mfiano> :)
[10:46:01] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[10:49:47] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[10:50:19] <|3b|> Guest74: the person writing the test decides what is success or failure
[10:50:40] <|3b|> so read file into a vector, load it, make sure it contains the expected data
[10:51:01] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[10:51:13] <|3b|> might be reasonable to just combine that into test-image*
[10:51:32] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[10:53:34] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[10:54:55] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[10:59:50] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 268 seconds)
[11:00:39] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[11:02:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:06:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[11:14:02] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 240 seconds)
[11:16:30] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[11:16:43] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Remote host closed the connection)
[11:18:49] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[11:21:46] *** Joins: gaqwas (~john@dynamic-077-009-155-078.77.9.pool.telefonica.de)
[11:26:33] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 250 seconds)
[11:35:54] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:252e:adea:c6cc:147)
[11:36:48] *** Quits: spiaggia (~user@2a01:cb19:150:3400:a5fd:6343:9441:40f) (Quit: ERC (IRC client for Emacs 26.3))
[11:37:59] *** Joins: shka (~herr@109.231.0.226)
[11:41:55] *** Quits: dre (~dre@2001:8003:c932:c301:3df8:d146:e893:5aaa) (Quit: Leaving)
[11:43:17] *** Joins: s-liao (~s-liao@101.86.96.154)
[11:44:46] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:46:22] *** Joins: pve (~pve@37-136-81-253.rev.dnainternet.fi)
[11:53:59] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[11:56:12] *** Quits: Jing_ (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[11:57:05] *** Joins: Jing (~hedgehog@125.106.89.200)
[12:09:03] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[12:13:02] *** Joins: random-nick (~random-ni@87.116.160.199)
[12:13:45] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[12:29:49] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:32:09] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[12:32:49] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[12:33:38] *** Quits: gaqwas (~john@dynamic-077-009-155-078.77.9.pool.telefonica.de) (Ping timeout: 260 seconds)
[12:34:06] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[12:37:15] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[12:47:08] *** Joins: igemnace (~ian@user/igemnace)
[12:49:32] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 256 seconds)
[12:51:02] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[12:54:44] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[12:55:06] *** Joins: heisig (~heisig@p508b527e.dip0.t-ipconnect.de)
[13:03:13] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Read error: Connection reset by peer)
[13:03:32] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[13:03:45] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[13:05:25] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:07:52] *** Joins: shka (~herr@109.231.0.226)
[13:08:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:10:27] *** Quits: Jing (~hedgehog@125.106.89.200) (Read error: Connection reset by peer)
[13:13:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[13:17:02] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[13:33:34] *** Joins: s-liao (~s-liao@101.86.96.154)
[13:41:12] *** Joins: rogersm (~rogersm@90.166.177.48)
[13:44:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[13:45:37] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:52:30] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 268 seconds)
[13:56:20] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[13:57:27] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[14:10:20] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[14:11:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[14:13:18] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[14:13:42] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:15:06] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[14:28:52] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[14:29:30] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 268 seconds)
[14:30:29] *** Joins: amb007 (~a_bakic@243.148.22.93.rev.sfr.net)
[14:32:31] *** Joins: s-liao (~s-liao@101.86.96.154)
[14:34:59] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:40:25] *** Joins: yewscion_ (~yewscion@2604:ca00:140:899a::1260:f67c)
[14:44:19] *** Quits: yewscion (~yewscion@2601:547:a00:7720:7cdb:db14:25dc:2c9) (Ping timeout: 252 seconds)
[14:47:39] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[14:54:23] <Nilby> I'd like to apologize to all the people past and future who have been mistreated and badgered by operators and others for earnest misunderstandings. Note that many of the people here do not engage in such.
[14:54:46] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:03:08] <jackdaniel> Nilby: if you are driving at the morning incident then it is really hard to look at it with "earnest misunderstanding" optics
[15:04:45] <jackdaniel> also saying that operators and other users mistreat newbies kind of hurts - most people here try to earnestly help and not mistreat other human beings <;
[15:05:18] <hayley> It also helps when I felt like I was describing the same concepts yesterday.
[15:05:49] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[15:09:54] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Disconnected: Replaced by new connection)
[15:10:47] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[15:11:36] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:14:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:19:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[15:19:59] <Nilby> jackdaniel: I don't think anyone wakes up and says "How can I mistreat ‘newbies’ today", rather I know people try to be helpful, but it can't always work out.
[15:21:32] <jackdaniel> sure, but your apology on behalf of other people who behaved a) politely, b) accurately; is a dickish thing to do. I won't comment on that any further.
[15:21:33] <Nilby> hayley: If everyone didn't have such a hard time understanding Lisp values and places, etc. I like to imagine the programming world might join us more.
[15:23:24] <hayley> Last time I had to answer a "which pointer are we messing with" sort of question, they got it after am informal description and a diagram.
[15:23:25] *** Quits: amb007 (~a_bakic@243.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:23:31] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:27:58] *** Joins: VincentVega (~user@212.97.4.44)
[15:28:58] <Nilby> jackdaniel: I very sincerely want to apologize to those people. I don't exclude myself from causing problems.
[15:31:15] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[15:31:53] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[15:33:47] <Nilby> hayley: I liked your diagram. I think we could use more cool diagrams, but sadly I've met people with graduate degress in CS that may never fully get it.
[15:36:02] <rotateq> Nilby: don't worry, i had this yesterday evening in #clschool again, but then pjb rescued again with insights and detail knowledge i just don't have yet
[15:39:42] <VincentVega> Hmmm just what could possibly cause a no applicable method condition fail to print? "Error (TYPE-ERROR) printing the following condition: #<SB-PCL::NO-APPLICABLE-METHOD-ERROR {1005830293}>"
[15:40:07] <Nilby> I'm not sure if I'll ever be able to use define-setf-expander without messing it up.
[15:40:39] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[15:41:11] <|3b|> VincentVega: bad print-object methods might cause that, for example on the object for which there was no method
[15:42:17] <rotateq> VincentVega: do you have used a call-next-method ? and maybe there is none after it
[15:42:46] *** Joins: VincentV` (~user@212.97.4.7)
[15:44:27] *** Quits: VincentVega (~user@212.97.4.44) (Ping timeout: 252 seconds)
[15:47:33] <VincentV`> Calling the function in the repl is OK, but when called by some other code, it gives me that error plus spits out "{#<THING2" to the repl. Any guesses/pointers would be appreciated.
[15:48:06] *** VincentV` is now known as VincentVega
[15:48:31] <|3b|> yeah, sounds like buggy print-object methods
[15:48:31] *** Joins: cranium (~cranium@user/cranium)
[15:49:03] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 268 seconds)
[15:49:10] <VincentVega> |3b
[15:49:20] <VincentVega> |3b|: thanks, I will look into those
[15:50:30] <Nilby> VincentVega: The print-object can do different things based on what stream it gets, which can differ between the REPL and other code.
[15:50:35] <|3b|> if you are using slime/sly, try hitting enter on the error message at the top of the debugger window, and then click on whichever things in inspector mention errors printing, and you should eventually get to the object it failed to print
[15:51:51] * |3b| suspects some print-object method might be sending output to *standard-output* or T instead of the requested stream, though that might be unrelated to whatever causes it to also signal an error
[15:52:28] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[15:52:44] <VincentVega> |3b|: Nilby: it was the print-object method. I didn't write it so will have to investigate. Thanks you!
[15:53:45] <|3b|> *print-whatever* settings might also differ between repl and other code, and for example some things might signal an error when told to print READably
[15:55:04] <VincentVega> |3b|: aright, I will keep these in mind
[15:58:02] <VincentVega> |
[15:58:08] <VincentVega> |3b|
[15:58:52] <VincentVega> yeah, the trace actually shows "error printing <structure-name>", thanks again, that was it
[16:01:03] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[16:08:55] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[16:20:16] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[16:21:09] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[16:21:36] *** Joins: notzmv (~zmv@user/notzmv)
[16:23:51] *** Joins: cosimone` (~user@93-47-228-207.ip115.fastwebnet.it)
[16:24:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:26:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 260 seconds)
[16:39:52] *** Joins: s-liao (~s-liao@101.86.96.154)
[16:47:43] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[16:48:15] *** Quits: yewscion_ (~yewscion@2604:ca00:140:899a::1260:f67c) (Ping timeout: 268 seconds)
[16:50:07] <rotateq> Nilby: i never used it till now, seems to be one of the more advanced standard symbols
[16:50:19] <rotateq> i mean define-setf-expander
[16:54:10] <jackdaniel> it is one of the most confusing (yet useful) common lisp operators
[16:54:55] <rotateq> good to know
[16:55:20] <jackdaniel> it allows to group variables and places in a complex setf expression into things that need to be accessed only once, in particular order, with possible parallel assignment
[16:55:41] <jackdaniel> afair you are expected to return five values including temporary variable names
[16:57:42] <rotateq> and then the difference to defsetf ?
[16:58:03] <rotateq> or both included due to historical reasons/backwards compatibility?
[16:59:13] <jackdaniel> defsetf is easier and builds on top of define-setf-expander
[16:59:23] <rotateq> oki
[17:00:37] <Nilby> rotateq: defsetf is easier, but also can't do some complicated setf things, like juggling a bunch of values arguments
[17:10:33] <rotateq> jackdaniel: get-setf-expansion returns five values
[17:12:07] <shka> hi all
[17:12:25] <shka> i am looking for the pseudoinverse written in common lisp
[17:12:35] <shka> without CFFI
[17:13:36] <jackdaniel> rotateq: I've suggested that, didn't I?
[17:13:46] <jackdaniel> shka: what pseudoinverse does?
[17:14:39] <rotateq> yes you did, but i just had to look it up
[17:14:40] <shka> it is a linear algebra algorithm, usually people are using lapack
[17:14:57] <shka> jackdaniel: but i would rather avoid doing that
[17:15:14] <jackdaniel> ah, matrices, I see. thanks
[17:15:48] <shka> though i may use SVD in this case
[17:15:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:16:05] <shka> i THINK
[17:16:09] <flip214> singular value decomposition?
[17:16:16] <shka> yes
[17:18:30] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:19:00] *** Joins: igemnace (~ian@user/igemnace)
[17:19:01] *** Quits: engblom (~foo@user/engblom) (Read error: Connection reset by peer)
[17:20:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[17:20:54] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:26:29] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 268 seconds)
[17:32:37] <yitzi> shka: I think there is a SVD in cl-mathstats
[17:33:15] *** Joins: Colt (~Colt@user/colt)
[17:33:33] <shka> yitzi: cool, thanks!
[17:33:57] <yitzi> Yep.... https://github.com/gwkkwg/cl-mathstats/blob/master/dev/svd.lisp
[17:34:38] <shka> and no FFI in sight, perfect
[17:34:46] <shka> this should do nicely
[17:35:28] <yitzi> Looks like it has lived in several libraries over time.
[17:39:17] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[17:41:44] *** Joins: Bike (~Glossina@71.69.170.70)
[17:41:44] *** ChanServ sets mode: +o Bike
[17:46:32] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 240 seconds)
[17:47:11] <jackdaniel> compute-deffective-method, the typo must be originating in my subconsciousness
[17:48:44] <shka> yitzi: useful stuff
[17:51:00] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[17:56:27] *** Joins: rain3 (~rain3___@79.115.252.154)
[17:56:32] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 240 seconds)
[17:57:50] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[18:03:35] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:13:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:17:04] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[18:23:34] *** Joins: ldb (~user@user/ldb)
[18:30:58] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[18:31:14] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 256 seconds)
[18:33:53] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[18:38:41] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[18:42:26] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[18:42:37] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[18:43:01] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[18:44:09] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[18:45:20] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[18:50:13] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[19:02:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:09:52] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:10:46] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[19:13:44] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[19:15:42] *** Joins: aeth (~aeth@user/aeth)
[19:17:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:18:37] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[19:19:47] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[19:20:25] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[19:21:03] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[19:21:29] *** Joins: aeth (~aeth@user/aeth)
[19:21:57] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Remote host closed the connection)
[19:22:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[19:25:26] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[19:25:50] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:27:32] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 240 seconds)
[19:33:05] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[19:37:57] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[19:38:02] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[19:39:14] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[19:41:25] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[19:42:02] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[19:47:41] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 250 seconds)
[19:49:17] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[19:50:26] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[19:51:09] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[19:51:14] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[19:54:07] *** Joins: treflip (~user@95.79.32.99)
[19:57:30] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Read error: Connection reset by peer)
[20:02:34] *** Quits: heisig (~heisig@p508b527e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[20:17:59] *** Joins: makomo (~makomo@user/makomo)
[20:23:03] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[20:23:18] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[20:24:12] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Read error: Connection reset by peer)
[20:26:34] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[20:26:36] *** Joins: Catie (~user@user/catie)
[20:28:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[20:29:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:32:02] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[20:33:47] *** Joins: aeth (~aeth@user/aeth)
[20:36:29] *** Quits: treflip (~user@95.79.32.99) (Read error: Connection reset by peer)
[20:39:03] *** Joins: treflip (~user@95.79.32.99)
[20:39:35] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[20:39:55] *** Joins: treflip (~user@95.79.32.99)
[20:41:40] *** Joins: Oladon (~olad@98.43.81.226)
[20:44:00] <fe[nl]ix> luis: thoughts on https://bugs.launchpad.net/cffi/+bug/1660081 ?
[20:50:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:52:07] *** Joins: opalvaults2 (~user@207.66.232.21)
[20:52:52] <opalvaults2> Is it abnormal to not have sly-lisp-implementations in emacs? I can't seem to use anything other than sbcl even though I've setq'd sly-lisp-implementations to include ccl.
[20:54:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[20:55:41] <phoe> opalvaults2: I use only inferior-lisp-program
[20:55:44] <opalvaults2> apparently it makes the difference with doing (or (parse-integer (prompt-read "Stuff:" ) :junk-allowed t) 0)..sbcl doesn't like that.
[20:55:53] <phoe> but then again I only use a single impl
[20:56:41] <opalvaults2> i would only be using sbcl phoe but practical common lisp uses CCL. the compiler cares about different things apparently :P
[20:56:59] <opalvaults2> unless i'm doing something
[20:57:02] <opalvaults2> wrong**
[20:57:29] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:59:24] <_death> opalvaults2: what is the error
[20:59:58] <opalvaults2> i will get it one second
[21:02:37] <opalvaults2> https://img.onl/Ub4QF -- _death
[21:02:47] <opalvaults2> maybe that's more informative than copy pastes
[21:03:45] <_death> well, parse-integer expects a string, and prompt-read returns NIL
[21:04:35] <opalvaults2> yeah which is what the book says it'll do
[21:04:51] <opalvaults2> unless I typed in what is in the book wrong, i'm still looking at the documentation
[21:04:59] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[21:05:25] <_death> the book's definition of prompt-read returns the value of read-line, which should be a string.. maybe you have a different definition
[21:06:25] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[21:07:08] <opalvaults2> a different definition?
[21:07:26] <phoe> what does your DEFUN PROMPT-READ look like?
[21:07:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[21:07:43] <opalvaults2>  
[21:07:43] <opalvaults2> (defun prompt-read (prompt)
[21:07:43] <opalvaults2>   (format *query-io* "~a: " prompt)
[21:07:43] <opalvaults2>   (force-output *query-io*))
[21:07:47] <_death> btw I suggest using an ordinary pastebin and not something that requires javascript and shows ads
[21:07:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:07:59] <phoe> oh
[21:08:10] <phoe> ...it's missing an important part, it seems
[21:08:11] <opalvaults2> _death: any suggestions for a good pastebin?
[21:08:13] <phoe> which is, actually reading stuff
[21:08:16] <phoe> opalvaults2: https://plaster.tymoon.eu/edit
[21:08:38] <phoe> it prints and pushes output to *query-io* but it does not read anything
[21:08:48] <phoe> there should be something like (read-line *query-io*) at the end of that function
[21:08:53] <opalvaults2> lets see, i'll pastebin what I have so far phoe
[21:09:04] <opalvaults2> thanks for the help guys :)
[21:10:03] <opalvaults2> https://plaster.tymoon.eu/view/2774#2774
[21:10:06] <opalvaults2> does that link work?
[21:10:45] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[21:10:59] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:11:46] <_death> the book talks about parse-integer returning NIL (in case of junk without digits), not prompt-read.. like phoe said, you are missing the read-line form there
[21:11:51] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[21:13:20] *** Joins: notzmv (~zmv@user/notzmv)
[21:13:43] <opalvaults2> _death: okay, I see what phoe meant now. I've added in read-line *query-io* and it works properly now
[21:13:58] <opalvaults2> woot
[21:14:14] <opalvaults2> user-error, as always. ;P
[21:14:51] <_death> the question is, if you get such an error from sbcl now, do you think you'll be able to figure out what happened?
[21:16:19] <opalvaults2> _death: do you have a suggestion on a resource I should read before going further in the book? I've only done a small amount of common-lisp (I am trying to build a ticketing system, I think you were here for that when I was asking about it?), so to answer more straightforwardly, probably not.
[21:16:40] <opalvaults2> happy to take a step back before going any further
[21:16:51] <opalvaults2> having a lot of fun with CL :)
[21:18:08] <opalvaults2> I was using caveman2 but it abstracts a lot up front so i wanted to go back to the beginning before I continued on using the library
[21:18:43] <_death> opalvaults2: reading PCL is fine, but it doesn't explain everything you need to understand, so what I mean is that you should also get more comfortable with reading the error messages and backtrace in the debugger
[21:20:06] <opalvaults2> _death: good point. I'll crack open http://www.sbcl.org/manual/#Starting-SBCL
[21:20:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[21:21:58] <_death> in the backtrace, you can see that there is a (parse-integer nil :junk-allowed t) .. so you can look up parse-integer in the Common Lisp HyperSpec (do you know that?) and see that it takes a string
[21:22:57] *** Quits: treflip (~user@95.79.32.99) (Read error: Connection reset by peer)
[21:24:13] *** Joins: treflip (~user@95.79.32.99)
[21:24:46] <_death> and then you need to figure out why prompt-read returned NIL.. after evaluating defun prompt-read, you can test it in the REPL.. (prompt-read "Gimme: "), enter something and see the expected output
[21:27:49] <opalvaults2> I was not familiar with the Common Lisp Hyperspec, no! Thank you, I will bookmark that for reading up on the available macros(?) that CL comes with as I'm going forward. I think I'm used to a much less interactive environment in programming so that's something I'll have to get used to.
[21:28:26] <_death> it's one of the great things about Lisp :)
[21:29:21] <opalvaults2> I think so too so far! It's a lot more tinkering than I'm used to with compilers/interpreters (having only experience with Python and Golang).
[21:29:49] <opalvaults2> thank you again for the guidance _death, much appreciated!
[21:30:33] <opalvaults2> (plus thanks for the javascript heads up on that site, i'll use a different site. I have ublock origin with icecat so I don't typically see ads)
[21:31:31] <_death> opalvaults2: I have javascript disabled in my default browser, so when I need to visit something that requires javascript, I use a compartmentalized browser with almost vanilla configuration
[21:33:38] <opalvaults2> _death: which browser do you use? I've been thinking about using nyxt recently as it may help to immerse myself. Unsure if it can block javascript though, I've only seen LibreJS with Icecat able to do that (or setting it to disabled in about:config).
[21:35:01] <_death> opalvaults2: firefox, but anyway this is offtopic.. back to lisp :)
[21:35:27] <opalvaults2> true, okay.
[21:40:08] <_death> opalvaults2: in slime you can C-c C-d h parse-integer RET and it will look it up in the clhs.. you can also download an offline copy from the lispworks site and have slime use that by setting common-lisp-hyperspec-root
[21:42:27] <opalvaults2> _death: ah! so Emacs allowed more than just Emacs Lisp describe-function/variable. Excellent. Thank you for the pointer. Much better to read in info than having to look away to another document :)
[21:43:55] <_death> well, the clhs is html, so it needs a browser.. I use emacs-w3m but emacs's eww also works
[21:45:42] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:48:13] *** Quits: sander (~sander@user/sander) (Ping timeout: 240 seconds)
[21:48:34] *** Joins: sander (~sander@user/sander)
[21:50:08] *** Quits: rain3 (~rain3___@79.115.252.154) (Ping timeout: 256 seconds)
[21:50:24] <opalvaults2> _death: it appears that sbcl/sly includes the macro/function definitions and explanations inside of describe-function. I'll have to cross reference it with what I see on the hyperspec to know if it's much different. Either way, nothing EWW can't clear up for me.
[21:53:27] <opalvaults2> yeah looks fairly similar (if not better formatted at the very least and searchable). Seems to include the source code as well. If only I had Emacs when I first started programming.
[21:53:55] <opalvaults2> ahh looks like I have an (interactive) function called hyperspec-lookup!
[21:54:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:54:23] <opalvaults2> I've set it to open up in a new EWW buffer. Wow. that's so cool :D
[21:54:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:55:14] <_death> you can also look things other than symbols, like format directives C-c C-d ~ or dispatching reader macro characters C-c C-d #
[21:57:44] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[21:57:48] <_death> glossary (I should use that more)..
[21:58:02] * opalvaults2 ~
[21:58:18] <opalvaults2> oops, apparently I don't have C-C C-d ~ bound correctly
[21:59:00] <_death> in slime buffers
[21:59:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[22:00:00] <Guest74> _death: thanks, I keep wondering what the formatting directives thing is, though it makes sense.
[22:00:22] <opalvaults2> oh! wow that's great! especially because those directives at first grok are hard to parse (but no harder than printf tbh). great to know there's a resource for them.
[22:00:48] <opalvaults2> _death: you're a wealth of helpful knowledge, thank you :)
[22:01:07] <_death> the hyperspec is the defacto specification of the language (it's derived from the de jure ansi document)
[22:03:12] <opalvaults2> alright, back to study. thanks again. i'm sure you'll hear from me again ;P
[22:08:27] <akater[m]> opalvaults2: There are at least 2 other hyperspec- commands, also very useful.
[22:11:32] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:13:33] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:15:49] *** Quits: qhong_ (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 240 seconds)
[22:16:25] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[22:18:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:18:23] <opalvaults2> akater[m]: looks like I have about 6 of them upon M-x fuzzy search hyperspec.
[22:18:36] <opalvaults2> I'll have to take a look through them when I have some downtime at work.
[22:18:38] <opalvaults2> thanks! :)
[22:21:12] *** Joins: djuber (~user@65.79.128.64)
[22:27:00] <mfiano> Do you know how I can space-pad the front of a float with FORMAT? I am currently using (format nil "~vf" digits-after-dot percentage), but I want up to two spaces in front of the number (a percentage) so it's always a fixed width.
[22:28:46] <mfiano> I think I did this before a hacky way, but I can't seem to find the code, and I'm sure there must be a better way anyway
[22:30:52] *** Joins: qhong_ (~qhong@rescomp-21-400677.stanford.edu)
[22:30:55] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Read error: Connection reset by peer)
[22:32:23] <_death> (format t "~5,1F" 12.34)
[22:33:39] <mfiano> Sure beats my idea of separating the remainder and using ~d
[22:33:45] <mfiano> I'll have to see how that works
[22:33:49] <opalvaults2> http://www.lispworks.com/documentation/HyperSpec/Body/22_cca.htm
[22:33:58] <opalvaults2> here's what I'm reading about it mfiano if you're interested
[22:35:44] <rotateq> format, a function with many directives :)
[22:35:55] <opalvaults2> an overwhelming amount, in fact.
[22:36:08] <opalvaults2> very flexible though it appears
[22:36:19] <rotateq> yes very powerful
[22:37:05] <rotateq> opalvaults2: it calls the macro FORMATTER on the control-string which parses it and builds the function to which the arguments can be applied
[22:37:40] <Catie> So if you know your string ahead of time you can pre-parse it to a compiled function?
[22:37:42] <mfiano> _death: How do I make that generic for any number of precision instead of 1?
[22:37:57] *** Quits: sterni (~lukas@user/sterni) (Quit: WeeChat 2.9)
[22:38:13] <Shinmera> Catie: any reasonable implementation will notice the constant string passed to FORMAT and do it for you
[22:38:14] <mfiano> That is also a variable in my program. Trying to figure out how to get two ~v's in there
[22:38:35] <Catie> Shinmera: Good to know! Thank you
[22:38:40] *** Joins: nature (~nature@45.32.235.173)
[22:38:48] <rotateq> the april compiler by phantomics has a similar behaviour
[22:38:55] <Shinmera> I've never had a use for FORMATTER.
[22:39:07] *** Quits: treflip (~user@95.79.32.99) (Quit: good night ✨)
[22:39:15] <rotateq> Shinmera: yes, no direct use :) me too not
[22:39:15] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[22:39:31] <opalvaults2> Wait so the compiler will pick up on string constants automatically?
[22:39:35] <_death> mfiano: there's no problem using ~V,VF
[22:40:21] <opalvaults2> replying to Shinmera*
[22:40:35] <Shinmera> If it's a good one, sure. It's a fairly trivial optimisation.
[22:40:56] *** Joins: sterni (~lukas@user/sterni)
[22:41:19] <_death> opalvaults2: implementations can define a compiler macro for FORMAT, so a literal format control string does not need to be interpreted during runtime (unlike C implementations with printf ;)
[22:41:31] <mfiano> Thanks
[22:41:41] <Shinmera> C implementations will also frequently catch printf and transform it.
[22:41:46] * mfiano has been away from programming for too long
[22:43:47] <shka> Shinmera: good evening
[22:43:59] <Shinmera> Hello
[22:44:10] <opalvaults2> Oh, I see. So format control string != the string being input so it can be put on the stack instead of the heap?
[22:44:30] <opalvaults2> pardon my ignorance if I get that wrong btw
[22:45:05] <rotateq> i still think there could be a need for more and broader educational material on compiler-macros
[22:45:13] <_death> Shinmera: interesting.. which C implementations do that?
[22:45:15] <opalvaults2> I'm a little used to how Rust decides to implement stack and heap concepts.
[22:45:20] <drakonis> ah its shinmera, hi there
[22:45:20] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[22:45:34] <Shinmera> I am he
[22:45:42] <opalvaults2> rotateq: I'd be interested to bookmark resources if you know of any.
[22:45:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:46:17] <mfiano> They really aren't any different than regular macros, just that you can decline to expand, and an implementation may as well.
[22:46:41] <rotateq> opalvaults2: maybe for the beginning basic concepts are way more important to get right :) i can point you to good resources or bundle you some to upload
[22:46:45] <Bike> _death: clang does, apparently, in its SimplifyLibCalls pass
[22:47:17] <opalvaults2> rotateq: absolutely. I know nothing about the lisp interpreter/sbcl compiler so I'm happy to read up on how it handles these concepts.
[22:47:27] <rotateq> mfiano: i know, but as with readmacros the differences and when and how matter
[22:47:57] <rotateq> opalvaults2: it's mostly compiled nowadays :)
[22:48:00] <mfiano> compiler macros are for optimizing functions.
[22:48:17] <Shinmera> _death: GCC, clang, etc. https://godbolt.org/z/cGxPsW3Mv
[22:48:18] <rotateq> the book practical common lisp may be a good start for you
[22:48:35] <opalvaults2> rotateq: I'm actualling going through that book right now as I type this.
[22:48:43] <opalvaults2> :)
[22:49:23] <rotateq> okay good, i think that is enough for now. someone said some companies use it also to train new people
[22:49:51] <mfiano> If you have a function that applies a literal list known at compile time, you can remove that function call overhead with a compile-macro installed for your function, and similar things.
[22:50:16] <_death> Shinmera: try "%d %d"
[22:50:41] <mfiano> Though there are a lot of gotchas regarding constant variables. It's one of the only good uses for EVAL after you check constantness.
[22:50:53] <mfiano> Not using EVAL in a compiler macro is often a mistake, actually.
[22:51:02] <opalvaults2> rotateq: I'd believe that. Common Lisp has a mutable toplevel though no?
[22:51:10] <Shinmera> _death: I'm not interested in the limits of the expansion, just saying they do do it, as well as a bunch of much crazier shit like recognising common algorithm implementations and replacing them wholesale.
[22:51:12] <Catie> That's a use for constantp, right?
[22:51:33] <Bike> constantp tells you if something is constant. it doesn't tell you what the value of that constant is.
[22:51:38] <Catie> Having yet to run into a reason to use constantp, it's always just sort of been sleeping in the back of my head
[22:51:51] <opalvaults2> rotateq: from what I understand that's how the REPL is able to be integrated into programs easily. Happy to PM this sort of thing as there is other discussion happening.
[22:51:54] <Bike> some implementations have constant-form-value as an extension for that purpose, but failing that you have to try to figure it out yourself, or use eval
[22:51:55] <Catie> Right yeah, but if it's constant could you potentially optimize it?
[22:52:01] <Shinmera> mfiano: I prefer expanding to L-T-V than to hack stuff with EVAL.
[22:52:07] <Bike> if what is constant, could you optimize what
[22:52:24] <mfiano> Shinmera: Not always an option unfortunately. I think we talked about this not too long ago
[22:52:33] <Shinmera> I have no memory of that
[22:52:33] <Catie> If a form is constant, could you apply a transformation at compile-time rather than runtime?
[22:52:42] <Shinmera> Nor memory of ever needing to use EVAL in a compiler macro :)
[22:52:47] <Bike> sure. that's what we're talking about, isn't it?
[22:52:52] <mfiano> Catie: Yes
[22:53:20] <Catie> Bike: It is, I'm just trying to be very specific to get it into my head
[22:53:33] <Bike> Godspeed to you
[22:53:36] <mfiano> Shinmera: A constant could be a +constant+ passed from the user. Sure it is constant at compile time, like an other symbol :)
[22:53:38] <Catie> Thank you!
[22:53:53] <Shinmera> mfiano: ok, so?
[22:54:11] <mfiano> So a trick I learnd from cl-ppcre and scymtym is to use eval in this case
[22:54:26] <Bike> the problem with compiler macros is that they operate directly on forms, and almost certainly before compiler work like constant propagation that open more optimization opportunities.
[22:54:34] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:252e:adea:c6cc:147) (Ping timeout: 268 seconds)
[22:54:35] <Bike> doesn't cl-ppcre use load-time-value for constant scanners?
[22:54:39] <Shinmera> I just expand to l-t-v and do whatever I need to in there.
[22:55:00] <mfiano> scymtym also said cl-ppcre has a bug in this regard, but he's have to elaborate further
[22:55:06] <mfiano> he'll*
[22:57:01] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[23:00:04] <|3b|> +constant+ might not have a value yet at compile time, so make sure you ensure it has one before looking at it :)
[23:00:43] <|3b|> (implementation only has to know it exists as a constant, and that only if defined at top level)
[23:01:22] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[23:01:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[23:02:13] <opalvaults2> In regards to with-open-file, "The stream object to which the stream variable is bound has dynamic extent; its extent ends when the form is exited." So if I understand this correctly, like most programming languages the compiler garbage collects with the final closing paren of the function?
[23:02:28] <rotateq> opalvaults2: no it's a programmable programming language :)
[23:02:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:02:54] <Catie> It just leaves scope at the end paren, there's no guarantee it'll be garbage collected. But after the closing paren, the file will be closed
[23:03:31] <rotateq> and with-open-file is a macro with an unwind-protect form, that automatically handles closing the file for you
[23:03:45] <mfiano> THis is not Rust. There is not explicit point in time a free will occur
[23:03:46] <Shinmera> opalvaults2: it means the consequences are undefined should you stash away the stream somewhere else and try to access it after the dynamic extent has exited.
[23:05:49] *** zbrown[m] is now known as zborwn
[23:06:38] <opalvaults2> ah! okay, I think mfiano was right on the money in assuming I was thinking it acted in the same way as Rust does in regards to scope and gc. Either way, still good to know. thanks for the info!
[23:06:42] *** zborwn is now known as nworb
[23:06:56] <opalvaults2> gotta shake a bit of the preconceptions
[23:07:41] <Shinmera> Common Lisp does not mention memory in any way, shape, or form.
[23:07:55] <Shinmera> You could write an implementation that runs on a tape drive.
[23:08:40] <rotateq> yeah wouldn't make sense in the spec as it's not just special purpose like C
[23:08:45] <opalvaults2> So if you need granular memory management, does CL allow for that sort of thing, or is it a "not the right tool for the job" kind of situation?
[23:09:09] <Shinmera> depends on the implementation :)
[23:09:24] <random-nick> depends on what you mean by granular memory management
[23:09:29] <rotateq> you can control and reprogram the garbage collector as what your impl offers you
[23:09:40] <Shinmera> usually you can employ standard tricks of creating manually managed pre-allocated pools and such
[23:09:44] <mfiano> dynamic garbage collection is very powerful and often gets a bad rap. Lisp GC's are often very good. In Rust, you are encouraged to heap-allocate a lot to get around the borrow checker, and when large objects go out of scope, large pauses can occur. The Rust community gets around this by implementing Drop on a background thread, which I can't even comment on why that is a bad idea.
[23:12:35] <opalvaults2> mfiano: I largely agree with you there. When you're learning they try and teach to allocate as much as possible on the stack and the compiler actively discourages otherwise (which is fine, I get it). I actually have no strong opinions on garbage collection. I also feel as though static typing gets the same kind of overhyped reverence. Not a fan of Clojure as far as I've ever tried it out, but I feel like Hickey has the right mindset.
[23:12:50] <Shinmera> I talked a bit about GC in my talk at GIC recently. It was very surface-level, but hey. Looks like that talk still hasn't made it to youtube, but the paper is here https://shinmera.com/paper/gic21.pdf
[23:13:31] <rotateq> sure Hickey did also a great job all in all
[23:14:14] <opalvaults2> I'd probably have chosen Clojure as the lisp-to-learn if the EPL was compat with the GPL ;P
[23:14:25] <drakonis> what is the deal with clojure anyways?
[23:14:38] <opalvaults2> Nearly purely functional lisp
[23:14:40] <mfiano> I think we are getting offtopic here
[23:14:43] <mfiano> #lisp ?
[23:14:45] <opalvaults2> Able to use java libraries
[23:14:46] <drakonis> hmm, sure.
[23:16:36] <opalvaults2> I think it's fairly on-topic as I'm comparing my experience with other programmings implementations of memory management vs common lisps. I think a few lines of off-topic shouldn't always be so bad. ;)
[23:16:44] <rotateq> or Racket, I used it some times to teach kids some programming
[23:16:47] <opalvaults2> s/programmings/programming languages
[23:17:02] <rotateq> opalvaults2: Clojure is mostly enslaved to the JVM :)
[23:17:12] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:252e:adea:c6cc:147)
[23:17:32] <opalvaults2> rotateq: There's a common lisp that apparently can use the JVM iirc? Or at least can use Java libraries in some capacity.
[23:17:37] <drakonis> abcl
[23:17:38] <opalvaults2> I thought that was really cool.
[23:17:54] <Shinmera> opalvaults2: this channel has a long, long history of being very strictly on topic. You won't change any minds about it.
[23:18:12] <rotateq> yes ABCL
[23:18:20] <opalvaults2> Shinmera: that's fine, but it's really not a big deal.
[23:18:33] <Shinmera> that's like, your opinion, man
[23:18:37] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10fe:b9ee:6dc1:1fc5:370f:e834)
[23:19:14] <opalvaults2> Shinmera: truly. rotateq I was incorrect ABCL does run on the JVM
[23:19:46] <random-nick> abcl runs on java
[23:20:00] <opalvaults2> random-nick: correct the Java Virtual Machine
[23:20:04] <random-nick> reportedly that includes android java and java on .net
[23:20:14] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[23:20:29] <random-nick> I don't know if those configurations are officially supported tho
[23:20:33] <rotateq> had the idea some time ago it could have this additional mascot: https://trash.randomerror.de/3rnkt/multi_bear.png
[23:21:08] <opalvaults2> I kind of wonder how it compares to Clojure as far as compiler errors go. I'm not well-versed in Java so those compile time errors are basically hieroglyphics
[23:21:14] <rotateq> haha java on .net, as C# wouldn't be Microsoft Java anyway :D
[23:21:16] <opalvaults2> I imagine it's the same situation with ABCL.
[23:22:01] <opalvaults2> ah! And it's under the GPL! fantastic :D
[23:22:11] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:252e:adea:c6cc:147) (Ping timeout: 250 seconds)
[23:22:13] <jcowan> Java on VM is available as part of mono.
[23:22:15] <drakonis> armed bear common lisp, defending the right to keep and arm bears!
[23:22:24] <jcowan> +1
[23:22:53] <jcowan> Perheps it should be "armored bear CL" instead
[23:23:22] <drakonis> its a reference to some old joke about guns
[23:23:58] <rotateq> do you know the joke?
[23:24:20] <drakonis> yes
[23:25:07] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Read error: Connection reset by peer)
[23:25:30] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[23:25:46] <drakonis> https://en.wikipedia.org/wiki/The_Right_to_Arm_Bears or perhaps it is related to this book?
[23:26:13] <drakonis> dang, the stories were published in the 60s
[23:26:15] <peterhil_> opalvaults2: SBCL and Clozure CL implementations offer quite good performance and allow tuning memory management.
[23:26:24] <peterhil_> I might want to check those also.
[23:26:32] <drakonis> its some dawn of computers stuff
[23:26:57] <drakonis> but i'm getting offtrack here
[23:30:38] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[23:32:15] <opalvaults2> peterhil_: I'll have to check out what SBCL is capable of as it's the implementation i've chosen to start out with.
[23:32:51] <opalvaults2> I've bookmarked the sbcl compiler manual so hopefully that has some interesting information regarding memory management.
[23:32:57] <rotateq> opalvaults2: it also offers things when C is too high level :)
[23:34:53] <opalvaults2> man this hyperspec-lookup function is amazing.
[23:35:10] <rotateq> hehe
[23:35:18] <opalvaults2> I don't know how you'd navigate the common lisp hyperspec html page without it
[23:35:32] <rotateq> did you download the files so you can read it offline?
[23:36:11] <opalvaults2> No I should. Am I able to put it in Info much like the emacs lisp manual?
[23:36:40] <rotateq> hm i have a bookmark in my browser for the symbol index
[23:37:10] <rotateq> it's 15MB (!) of mostly html files
[23:37:50] <opalvaults2> It looks like there are two packages for browsing the manual called hyperspec.el and clhs.el
[23:37:58] <rotateq> or was it less? for sure in MBs
[23:38:18] <opalvaults2> if those allow an info view of the documentation offline that would be great.
[23:38:29] <rotateq> don't know, i mostly browse in the browser
[23:38:31] <opalvaults2> Otherwise yeah i'll just have to download it and keep it in my browser
[23:39:21] <opalvaults2> (defun hyperspec-lookup--hyperspec-lookup-w3m (orig-fun &rest args)
[23:39:22] <opalvaults2>   (let ((browse-url-browser-function 'w3m-browse-url))
[23:39:22] <opalvaults2>     (apply orig-fun args)))
[23:39:22] <opalvaults2>  
[23:39:38] <opalvaults2> looks like this function allows for it to at least open up in w3m but I'm sure you could use eww.
[23:41:33] <opalvaults2> https://www.hexstreamsoft.com/articles/getting-started-with-the-clhs/ -- rotateq if you're interested, this details how you can leverage quicklisp to get an offline copy and point sly/slime to it for offline-browsing if you don't want to leave your emacs session
[23:42:05] <rotateq> oh no a hexadecimal stream
[23:42:25] <rotateq> i have the offline copy
[23:42:46] <rotateq> and thanks but i banned this site for my use
[23:44:12] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:49:05] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Client closed)
[23:50:51] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:56:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:57:37] *** Joins: theothornhill (~user@2a01:799:15a2:4900:a55c:f60a:7dd3:337a)
