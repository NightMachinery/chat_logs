[00:00:33] *** Joins: Telvana (~capo@user/telvana)
[00:01:22] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:40a:9f91:8f3e:4f02) (Remote host closed the connection)
[00:01:46] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:f571:277c:e0b0:82b9)
[00:02:50] *** Quits: begriffs (~begriffs@user/begriffs) (Ping timeout: 260 seconds)
[00:04:17] *** Telvana is now known as Rob
[00:05:17] *** Quits: Hercules (~Hercules@user/hercules) (Quit: Leaving)
[00:06:01] *** Quits: cust (amaama@blackbox.amaama.org) (Ping timeout: 268 seconds)
[00:06:44] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[00:08:40] *** Joins: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy)
[00:12:45] *** Quits: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net) (Quit: Leaving.)
[00:14:35] *** Joins: mark_infinite (~skynet@ppp-94-66-136-166.home.otenet.gr)
[00:18:04] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[00:18:30] *** Joins: rgrinberg (~textual@190.113.102.153)
[00:18:40] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[00:18:57] *** Joins: Klinda (~superleag@user/klinda)
[00:21:24] <nomagno> APIc: context?
[00:21:37] <nomagno> Oh- I missed the "nontrivial" keyword, apologies
[00:22:44] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[00:22:59] <APic> No worries.
[00:24:05] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[00:24:06] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[00:25:06] <apotheon> Docker is much more than "containers", and much of the more is wildly unnecessary.
[00:26:34] *** Quits: zwr (~zwr@2804:d45:b966:fb00:4dcf:a637:9af2:74cd) (Ping timeout: 260 seconds)
[00:27:24] *** Joins: zwr (~zwr@2804:d45:b966:fb00:32fc:7d91:84d3:8a74)
[00:28:32] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[00:29:19] *** Joins: brettgilio (~brettgili@x-node.gq)
[00:31:34] *** Joins: cust (amaama@2607:f2c0:f00f:2500::3)
[00:34:35] *** Joins: pynchon (~pynchon@a95-94-153-177.cpe.netcabo.pt)
[00:34:57] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[00:36:42] *** Quits: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy) (Quit: Leaving)
[00:37:50] *** Joins: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net)
[00:40:06] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[00:40:11] *** Joins: gompertz (~gompertz@d198-53-116-248.abhsia.telus.net)
[00:40:50] *** Quits: AmR (~AmREiSa@156.199.218.104) (Quit: Konversation terminated!)
[00:41:09] *** Quits: gompertz (~gompertz@d198-53-116-248.abhsia.telus.net) (Remote host closed the connection)
[00:41:13] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[00:41:53] *** Joins: gompertz (~gompertz@d198-53-116-248.abhsia.telus.net)
[00:42:27] *** lkor is now known as lionkor
[00:43:04] *** Inline_ is now known as Inline
[00:43:23] *** Joins: Betal (~Betal@user/betal)
[00:44:04] *** Quits: phao (~phao@2804:d45:8e7a:de00:10a0:21c4:74dc:fba7) (Quit: Leaving)
[00:48:09] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[00:51:04] *** Quits: davros (~davros@host86-185-61-22.range86-185.btcentralplus.com) (Remote host closed the connection)
[00:51:20] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[00:55:11] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[00:55:35] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:58:21] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 256 seconds)
[00:59:05] *** Quits: pynchon (~pynchon@a95-94-153-177.cpe.netcabo.pt) (Quit: Leaving)
[01:01:31] *** Quits: cust (amaama@2607:f2c0:f00f:2500::3) (Ping timeout: 268 seconds)
[01:02:35] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:02:58] *** Quits: gompertz (~gompertz@d198-53-116-248.abhsia.telus.net) (Remote host closed the connection)
[01:03:19] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-1014-2f07-8b12-3b8a.res6.spectrum.com)
[01:03:30] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:05:31] *** Quits: larry87 (~quassel@98.40.245.193) (Ping timeout: 244 seconds)
[01:08:54] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[01:11:26] *** Joins: Guest82 (~Guest82@pool-100-38-19-214.nycmny.fios.verizon.net)
[01:11:46] *** Quits: Guest82 (~Guest82@pool-100-38-19-214.nycmny.fios.verizon.net) (Client Quit)
[01:14:34] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[01:21:10] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[01:21:10] *** Quits: magla (~gelignite@55d4a5c9.access.ecotel.net) (Quit: Stay safe!)
[01:22:22] <De4nWhit3> Hello!
[01:32:24] <sham1> Hello
[01:32:32] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[01:33:44] *** Joins: Klinda (~superleag@user/klinda)
[01:36:19] *** Quits: mahmutov (~mahmutov@176.30.166.211) (Ping timeout: 256 seconds)
[01:38:00] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[01:38:13] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Client Quit)
[01:40:31] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:41:23] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[01:45:00] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[01:46:12] *** Quits: deflected (~deflected@user/deflected) (Quit: up!)
[01:47:05] *** Quits: riles (~root@dhcp-24-53-243-12.cable.user.start.ca) (Ping timeout: 256 seconds)
[01:49:40] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:52:51] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:54:58] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[01:55:08] *** Joins: riles (~root@dhcp-24-53-243-12.cable.user.start.ca)
[01:55:15] *** Quits: riles (~root@dhcp-24-53-243-12.cable.user.start.ca) (Read error: Connection reset by peer)
[01:55:51] *** Joins: riles (~root@dhcp-24-53-243-12.cable.user.start.ca)
[01:57:40] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[01:59:25] *** Joins: Echoz (~chris@user/echoz)
[01:59:59] *** Joins: dohtem (uid524096@user/dohtem)
[02:00:16] *** Joins: moose (~moose@user/moose)
[02:07:00] *** Quits: Matt|home (~matt@adsl-74-233-58-208.mia.bellsouth.net) (Ping timeout: 244 seconds)
[02:07:06] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[02:07:27] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[02:08:02] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 244 seconds)
[02:08:37] *** Joins: wootz (~wootz@23.19.19.200)
[02:10:31] *** Quits: humdrumcoffee (~humdrumco@88.97.110.231) (Quit: WeeChat 3.3)
[02:18:01] *** Quits: Akuli (~Akuli@213.216.210.156) (Quit: Leaving)
[02:19:12] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[02:19:23] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[02:20:08] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[02:25:28] *** Joins: Torr (~Torr@user/torr)
[02:32:37] *** Quits: pizdets (~pizdets@183.182.111.35) (Ping timeout: 250 seconds)
[02:32:59] *** Quits: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Ping timeout: 256 seconds)
[02:33:33] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[02:33:40] <floatcomplex> ,cc -lm -fno-builtin-cpow double c = cpow(2, 31); printf("%.17g", c);
[02:33:42] <candide> floatcomplex: 2147483648.0000019
[02:33:48] *** Joins: pizdets (~pizdets@183.182.110.244)
[02:33:52] <floatcomplex> ,cc double c = cpow(2, 31); printf("%.17g", c);
[02:33:54] <candide> floatcomplex: 2147483648
[02:35:40] <floatcomplex> ,cc volatile double a = 2, b = 31; double c = cpow(a, b); printf("%.17g", c);
[02:35:42] <candide> floatcomplex: 2147483648.0000019
[02:35:51] <floatcomplex> ,cc volatile double a = 2, b = 31; double c = pow(a, b); printf("%.17g", c);
[02:35:53] <candide> floatcomplex: 2147483648
[02:36:05] *** Joins: cust (amaama@blackbox.amaama.org)
[02:38:39] *** Joins: inomoz (~inomoz@176.59.125.26)
[02:41:37] *** Quits: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net) (Ping timeout: 244 seconds)
[02:42:05] <floatcomplex> so, this is at least a violation of the as-if rule
[02:42:36] <floatcomplex> i would argue that it's also a misinterpretation of a footnote in the standard by all three of the libc's i looked at
[02:44:34] *** Joins: davros (~davros@host86-185-61-22.range86-185.btcentralplus.com)
[02:46:47] *** Joins: EdFletcher (~ubuntu@user/edfletcher)
[02:48:26] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 245 seconds)
[02:51:03] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:53:05] <floatcomplex> (but that, rather than fixing the libc's, the standard should just remove all mention of ieee 754 and say that results of floating point expressions are implementation defined :) )
[02:53:13] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Quit: Ping timeout (120 seconds))
[02:53:52] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[02:54:21] *** Quits: Livio (~livio@host-87-6-217-129.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[02:54:47] <floatcomplex> but seriously there is at least one bug here
[03:02:06] <nomagno> How can I truncate two 16-bit numbers to only keep their most significant 8 bits, then concatenate them?
[03:02:17] <floatcomplex> you sure you want to do it in that order?
[03:02:23] <floatcomplex> oh wait concatenate
[03:02:29] <floatcomplex> are they unsigned
[03:02:46] <nomagno> They are signed, which is an issue
[03:03:05] <nitrix> (a & 0xFF00) || (b & 0xFF00 >> 8) probably?
[03:03:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:03:05] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:03:05] *** Joins: wroathe (~wroathe@user/wroathe)
[03:03:17] <floatcomplex> you may safely cast them to unsigned, and then do the bit shifting
[03:03:24] <floatcomplex> undoing it is a bit more involved
[03:04:12] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:05:14] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[03:06:51] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:07:06] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[03:07:08] <nitrix> Mhh. I was close. https://godbolt.org/z/brEjK3q79
[03:07:50] <floatcomplex> nitrix: the masking of b is unnecessary
[03:07:59] *** Parts: EdFletcher (~ubuntu@user/edfletcher) ()
[03:08:15] <nitrix> Ah yep.
[03:08:29] <floatcomplex> ,paren (a & 0xFF00) | (b >> 8)
[03:08:30] <candide> floatcomplex: (a & 0xFF00) | (b >> 8)
[03:08:40] <floatcomplex> wtb unparen
[03:08:57] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[03:09:22] <nitrix> Both & and >> have higher precedence, should be fine.
[03:09:46] <floatcomplex> ,paren a & 0xFF00 | b >> 8
[03:09:46] <candide> floatcomplex: (a & 0xFF00) | (b >> 8)
[03:09:49] <floatcomplex> yep
[03:09:54] <nitrix> ,cc printf("%x", 0xAB00 & 0xFF00 | 0xCD00 >> 8);
[03:09:57] <candide> nitrix: [warning: suggest parentheses around arithmetic in operand of '|' [-Wparentheses]] abcd
[03:10:07] <nitrix> Curious warning.
[03:10:49] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[03:10:50] *** Quits: Rob (~capo@user/telvana) (Ping timeout: 260 seconds)
[03:12:32] *** Joins: Telvana (~capo@user/telvana)
[03:13:25] <nitrix> I wonder if there's how I picked up that habit. I did it naturally without thinking.
[03:13:57] *** Telvana is now known as Rob
[03:14:25] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[03:15:01] <nomagno> Clearly there is more wrong with my code than the bit shifting, I am probably not following the correct procedure to make sure the data is, like, actually from the sensor and not junk
[03:15:13] <nomagno> Welp, I'll figure it out tomorrow
[03:15:23] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[03:15:44] <floatcomplex> nomagno: uint16_t x = ((uint16_t)a & 0xFF00) | ((uint16_t)b >> 8);
[03:15:47] <floatcomplex> where a and b are int16_t
[03:15:59] <floatcomplex> if you cast it to unsigned instead of uint16_t it doesn't work
[03:18:33] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:18:34] *** Joins: seninha (~seninha@user/seninha)
[03:21:34] *** Joins: deflected (~deflected@user/deflected)
[03:23:09] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-1014-2f07-8b12-3b8a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[03:26:23] *** Joins: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net)
[03:27:42] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[03:30:14] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:37] *** Joins: NEYi (~NEYi@109.251.216.38)
[03:30:39] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:32:15] *** Quits: alch (~alch@151.44.61.87) (Read error: Connection reset by peer)
[03:33:10] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[03:36:27] *** Joins: alch (~alch@151.36.213.139)
[03:38:45] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 268 seconds)
[03:38:52] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:39:21] <floatcomplex> nitrix: does the standard have anything to say directly or indirectly about the the precision guaranteed by cpow()? as mcf pointed out, it says it's allowed to emit spurious fp exceptions in order to be implemented internally using cexp(b * clog(a)) but if you actually do this, it loses precision vs pow(a, b) given real arguments to both
[03:41:33] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[03:43:20] <nitrix> Not my specialty :S
[03:44:01] *** Joins: dexter0_ (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net)
[03:44:47] *** Quits: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[03:44:54] <floatcomplex> gcc breaks the as-if rule reliably on this
[03:44:57] *** dexter0_ is now known as dexter0
[03:44:59] <floatcomplex> clang sometimes
[03:45:33] <floatcomplex> i'd test cproc but error: _Complex is not yet supported
[03:46:44] *** Joins: juliopcrj (~juliopcrj@177.44.227.40)
[03:48:33] <floatcomplex> actually nm i can't reproduce it in clang, i was holding it wrong. so the violation of the as-if rule is limited to gcc
[03:50:34] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[03:51:13] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[03:52:52] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (Read error: Connection reset by peer)
[03:53:50] *** Joins: Matt|home (~matt@adsl-74-233-58-226.mia.bellsouth.net)
[03:53:52] *** Joins: System_Error (~SystemErr@user/systemerror)
[03:54:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[03:54:42] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:56:00] *** Lord_of_Life_ is now known as Lord_of_Life
[03:56:41] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[03:57:19] *** Joins: ferdna (~ferdna@user/ferdna)
[03:58:54] <Matt|home> yo. 
[03:59:21] <Matt|home> .. my idea bucket is empty. im trying to think of a coding project i won't get bored with and that might actually be useful to me at some point..
[04:00:05] <Matt|home> i mean the last big thing i did was basically a glorified objdump clone/elf parser thingy.. 
[04:00:55] <Matt|home> but i'd also like something that isn't months-long in scope
[04:01:21] *** Quits: fstd (~fstd@xdsl-87-79-44-169.nc.de) (Read error: Connection reset by peer)
[04:02:38] *** Joins: fstd (~fstd@xdsl-87-79-44-169.nc.de)
[04:02:57] *** Joins: synaps3 (~void@user/synaps3)
[04:05:19] <caze> Do you want a challenge?
[04:05:39] <synaps3> yea
[04:05:41] <Matt|home> i dunno what i want, that's the problem. all of my project ideas are either boring or require a ton of investment i don't have right now
[04:05:56] <Matt|home> im not trying to solve a technical issue either
[04:06:30] <Matt|home> i guess something that'll impress somebody on a resume looking at my github portfolio? idfk
[04:07:14] <caze> Write a program that reads an arbitrary amount of input and echoes it to output, with one transformation: Replace every occurence of the last non-whitespace character with the character '#'. Don't use malloc for extra challenge.
[04:07:32] <floatcomplex> port tcc to bash
[04:07:36] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-1014-2f07-8b12-3b8a.res6.spectrum.com)
[04:07:37] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[04:07:38] <synaps3> tcc ?
[04:07:53] <Matt|home> caze : of the last non whitespace character with # ?
[04:08:00] <Matt|home> what would that do..
[04:08:08] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[04:08:09] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:08:24] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[04:08:30] *** Joins: rgrinberg (~textual@190.113.102.153)
[04:08:50] <caze> What do you mean?
[04:09:36] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7e94:3856:5140:4361) (Ping timeout: 268 seconds)
[04:09:40] <caze> So for an input of "green bean", it should output "gree# bea#"
[04:10:25] <floatcomplex> that is definitely at least as useful as a c compiler in a widely available interpreted language
[04:11:01] *** Joins: Trigraph (~Trigraph@user/trigraph)
[04:11:34] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[04:11:51] <Matt|home> right
[04:11:59] <Matt|home> i don't understand why that's useful though
[04:12:24] <caze> It's just meant to be a challenge, without using malloc.
[04:12:29] <Matt|home> ah
[04:15:00] *** Joins: frost (~frost@user/frost)
[04:18:03] *** Quits: khoa (~khoa@user/khoa) (Quit: leaving)
[04:23:29] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:24:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[04:24:52] *** Joins: Wulf (~Wulf@user/wulf)
[04:24:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:29:44] *** Joins: acaciause (~acaciause@cpc140764-burn9-2-0-cust788.10-1.cable.virginm.net)
[04:30:31] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[04:34:32] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:35:37] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) ()
[04:37:52] *** Quits: Trigraph (~Trigraph@user/trigraph) (Ping timeout: 244 seconds)
[04:38:23] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[04:38:23] *** Joins: nortoh (~nortoh@user/nortoh)
[04:51:00] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[04:54:41] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 245 seconds)
[04:54:47] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[04:55:13] *** Quits: acaciause (~acaciause@cpc140764-burn9-2-0-cust788.10-1.cable.virginm.net) (Read error: Connection reset by peer)
[04:56:43] *** Joins: acaciause (~acaciause@cpc140764-burn9-2-0-cust788.10-1.cable.virginm.net)
[04:57:28] *** Quits: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se) (Ping timeout: 260 seconds)
[04:58:28] *** Quits: acaciause (~acaciause@cpc140764-burn9-2-0-cust788.10-1.cable.virginm.net) (Client Quit)
[04:58:46] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Quit: varioust)
[04:59:26] *** Joins: begriffs (~begriffs@user/begriffs)
[04:59:32] *** Joins: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se)
[05:03:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[05:09:58] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[05:11:05] *** Joins: ethrl (uid524335@user/doforlove33)
[05:14:57] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[05:19:22] <Inst> ummm
[05:19:26] <Inst> can i ask how to read this?
[05:19:28] <Inst> nfdchar_t* outPath
[05:19:32] <Inst> nfdchar_t is a custom path
[05:19:33] *** candide sets mode: +b *!~inst@2601:6c4:*
[05:20:10] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:20:10] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:20:10] *** Joins: wroathe (~wroathe@user/wroathe)
[05:20:30] *** Joins: superboot (~agentgasm@user/superboot)
[05:23:03] *** Joins: s3uwu (~s3uwu@202-7-192-83.static.tpgi.com.au)
[05:23:13] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:c9f3:c80c:ad31:96ec)
[05:23:52] *** Quits: juliopcrj (~juliopcrj@177.44.227.40) (Quit: Leaving)
[05:24:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[05:24:50] *** candide sets mode: -b *!~inst@2601:6c4:*
[05:26:27] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[05:27:38] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 260 seconds)
[05:28:41] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:29:50] *** Quits: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[05:30:01] *** Quits: s3uwu (~s3uwu@202-7-192-83.static.tpgi.com.au) (Remote host closed the connection)
[05:30:52] *** Joins: kurahaupo (~kurahaupo@pa49-180-48-172.pa.nsw.optusnet.com.au)
[05:31:07] *** Joins: kurahaupo_ (~kurahaupo@ppp122-115.static.internode.on.net)
[05:35:34] *** Quits: kurahaupo (~kurahaupo@pa49-180-48-172.pa.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[05:36:01] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[05:37:10] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[05:37:42] *** Joins: s3uwu (~s3uwu@202-7-192-83.static.tpgi.com.au)
[05:39:03] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:41:09] *** Joins: darkstardev13 (~darkstard@50.39.114.152)
[05:42:06] <nitrix> Take your time phrasing your question. If you can provide examples or code, even better. IRC isn't Twitter.
[05:42:16] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[05:42:47] <nitrix> Too many people in the room to spam everyone 3 word sentences like a teenager would.
[05:43:50] *** Joins: Trigraph (~Trigraph@user/trigraph)
[05:43:56] *** Quits: darkstarx (~darkstard@gateway/vpn/pia/darkstardevx) (Ping timeout: 268 seconds)
[05:44:13] <floatcomplex> i had a very gruff and businesslike boss once who had only ever texted with his teenage daughter, and assumed that's how all text conversations were conducted. it was hilarious
[05:44:26] <dave0> i remember when i was a teenager and now that i'm old i can see how much of a douche teenagers are
[05:50:57] *** Parts: pony (sid524992@smol/hors) ()
[05:56:35] *** Joins: kish` (~aqua@user/aqua)
[05:57:29] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[05:58:10] *** Joins: thing (~thing@user/thing)
[05:58:46] <ARoxdale> Inst: It reads as: outPath is a pointer to a nfdchar_t .
[05:59:07] <ARoxdale> I presume nfdchar_t is some type of character string
[05:59:09] <Inst> right now my bigger problem is with VSC
[05:59:14] <Inst> I can implement something similar as a library
[05:59:18] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (Ping timeout: 260 seconds)
[05:59:22] <ARoxdale> I don't know what VSC is
[05:59:23] <Inst> then I just get Haskell to use its FFI to call the C part
[05:59:25] <Inst> visual studio code
[05:59:28] <floatcomplex> virtual scode l
[05:59:29] <Inst> on the library
[05:59:46] <floatcomplex> s/l//
[06:04:41] *** Quits: masterbuilder (~user@user/masterbuilder) (Quit: "Off to bed")
[06:06:00] *** Quits: s3uwu (~s3uwu@202-7-192-83.static.tpgi.com.au) (Remote host closed the connection)
[06:07:29] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:08:53] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 256 seconds)
[06:09:23] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 264 seconds)
[06:09:41] *** Quits: dohtem (uid524096@user/dohtem) (Ping timeout: 245 seconds)
[06:09:41] *** Quits: cengiz_io (sid223191@id-223191.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[06:09:51] *** Quits: agander_m (sid407952@2a03:5180:f::6:3990) (Ping timeout: 268 seconds)
[06:09:56] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-1014-2f07-8b12-3b8a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[06:09:59] *** Quits: elichai2 (sid212594@id-212594.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[06:09:59] *** Quits: NiKaN (sid385034@2a03:5180:f:1::5:e00a) (Ping timeout: 264 seconds)
[06:09:59] *** Quits: greyblue9 (sid500829@2a03:5180:f:3::7:a45d) (Ping timeout: 264 seconds)
[06:10:27] *** Quits: lhtseng (sid15322@2a03:5180:f:1::3bda) (Ping timeout: 268 seconds)
[06:10:27] *** Quits: glenfe (sid231748@user/glenfe) (Ping timeout: 268 seconds)
[06:10:27] *** Quits: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com) (Ping timeout: 268 seconds)
[06:10:27] *** Quits: terabit (sid146285@id-146285.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: ikiryo (sid109660@user/ikiryo) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: placeb0 (uid283215@2a03:5180:f:2::4:524f) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 268 seconds)
[06:10:35] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[06:10:35] *** Quits: rubin55 (sid175221@2a03:5180:f:4::2:ac75) (Ping timeout: 264 seconds)
[06:10:35] *** Quits: nightstrike (uid487@2a03:5180:f:5::1e7) (Ping timeout: 264 seconds)
[06:10:35] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 264 seconds)
[06:10:35] *** Quits: noahmg123 (sid89117@id-89117.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:10:35] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[06:10:47] *** Joins: Alhazred (~Alhazred@86.106.74.46)
[06:11:04] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 268 seconds)
[06:11:04] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 268 seconds)
[06:11:11] *** Quits: ethrl (uid524335@user/doforlove33) (Ping timeout: 264 seconds)
[06:11:41] *** Quits: psb (sid500598@user/psb) (Ping timeout: 268 seconds)
[06:11:42] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 268 seconds)
[06:11:42] *** Quits: dreamcat4 (uid157427@2a03:5180:f:4::2:66f3) (Ping timeout: 268 seconds)
[06:11:42] *** Quits: Pent (sid313808@2a03:5180:f:2::4:c9d0) (Ping timeout: 268 seconds)
[06:11:42] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (Ping timeout: 268 seconds)
[06:11:47] *** Quits: decartes_ (sid240036@2a03:5180:f:1::3:a9a4) (Ping timeout: 264 seconds)
[06:11:47] *** Quits: schna (sid484866@2a03:5180:f:1::7:6602) (Ping timeout: 264 seconds)
[06:12:13] *** Joins: bjs (sid190364@user/bjs)
[06:12:18] *** Joins: glenfe (sid231748@user/glenfe)
[06:12:18] *** Joins: nightstrike (uid487@uxbridge.irccloud.com)
[06:12:18] *** Quits: Bou (sid274843@user/bou) (Ping timeout: 268 seconds)
[06:12:18] *** Quits: TallonRain (sid214799@user/tallonrain) (Ping timeout: 268 seconds)
[06:12:19] *** Quits: jakesyl_ (sid56879@2a03:5180:f:4::de2f) (Ping timeout: 268 seconds)
[06:12:22] *** Joins: ikiryo (sid109660@user/ikiryo)
[06:12:23] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[06:12:23] *** Joins: buhman (sid411355@user/buhman)
[06:12:29] *** Joins: noahmg123 (sid89117@ilkley.irccloud.com)
[06:12:36] *** Joins: TallonRain (sid214799@user/tallonrain)
[06:12:36] *** Joins: ethrl (uid524335@user/doforlove33)
[06:12:36] *** Joins: terabit (sid146285@uxbridge.irccloud.com)
[06:12:38] *** Joins: Bou (sid274843@user/bou)
[06:12:42] *** Joins: kevinsjoberg (sid499516@lymington.irccloud.com)
[06:12:46] *** Joins: ullbeking (sid5364@user/ullbeking)
[06:13:14] *** Joins: jakesyl_ (sid56879@hampstead.irccloud.com)
[06:13:16] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[06:13:20] *** Joins: rubin55 (sid175221@hampstead.irccloud.com)
[06:13:20] *** Joins: elichai2 (sid212594@hampstead.irccloud.com)
[06:13:29] *** Joins: dreamcat4 (uid157427@hampstead.irccloud.com)
[06:13:46] *** Joins: Xatenev (~xatenev@2a02:8108:9640:74d4:5af0:59ee:485f:536a)
[06:13:46] *** Quits: Xatenev (~xatenev@2a02:8108:9640:74d4:5af0:59ee:485f:536a) (Changing host)
[06:13:46] *** Joins: Xatenev (~xatenev@user/xatenev)
[06:13:46] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[06:13:48] *** Parts: Xatenev (~xatenev@user/xatenev) ()
[06:13:50] *** Joins: cengiz_io (sid223191@ilkley.irccloud.com)
[06:13:52] *** Joins: psb (sid500598@user/psb)
[06:13:56] *** Joins: computerquip (sid423484@user/computerquip)
[06:14:01] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[06:14:05] *** Joins: dohtem (uid524096@user/dohtem)
[06:14:23] *** Joins: IUSR (sid348938@hampstead.irccloud.com)
[06:14:39] *** Joins: sa (sid1055@tinside.irccloud.com)
[06:14:42] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[06:15:03] *** Joins: lhtseng (sid15322@helmsley.irccloud.com)
[06:15:06] *** Joins: schna (sid484866@helmsley.irccloud.com)
[06:15:08] *** Joins: decartes_ (sid240036@helmsley.irccloud.com)
[06:15:32] *** Joins: Pent (sid313808@lymington.irccloud.com)
[06:15:34] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[06:15:36] *** Joins: placeb0 (uid283215@lymington.irccloud.com)
[06:16:49] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 256 seconds)
[06:17:39] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[06:17:47] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 264 seconds)
[06:19:39] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Client Quit)
[06:19:58] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[06:20:11] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Remote host closed the connection)
[06:20:47] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[06:20:50] *** Quits: illustris (sid211748@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:20:59] *** Quits: psb (sid500598@user/psb) (Read error: Connection reset by peer)
[06:21:06] *** Quits: cengiz_io (sid223191@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:21:06] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (Read error: Connection reset by peer)
[06:21:06] *** Quits: wangledorf (sid505185@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:21:07] *** Quits: noahmg123 (sid89117@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:22:36] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[06:22:39] *** Joins: s3uwu (~s3uwu@202-7-192-83.static.tpgi.com.au)
[06:23:01] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[06:23:03] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 256 seconds)
[06:23:28] *** Joins: katnis (uid15849@helmsley.irccloud.com)
[06:28:25] *** Joins: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[06:29:15] *** Quits: thing (~thing@user/thing) (Ping timeout: 276 seconds)
[06:32:15] *** Joins: llh (~llh@user/llh)
[06:32:20] *** Joins: thing (~thing@user/thing)
[06:33:26] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 260 seconds)
[06:34:41] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[06:34:57] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[06:35:02] *** Joins: cengiz_io (sid223191@id-223191.ilkley.irccloud.com)
[06:35:23] *** Joins: psb (sid500598@user/psb)
[06:35:34] *** Joins: ullbeking (sid5364@user/ullbeking)
[06:35:48] *** Joins: noahmg123 (sid89117@id-89117.ilkley.irccloud.com)
[06:35:57] *** Joins: illustris (sid211748@id-211748.ilkley.irccloud.com)
[06:37:13] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 244 seconds)
[06:37:13] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 244 seconds)
[06:37:16] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[06:39:35] *** Joins: dec0d3r_ (~dec0d3r@2001:8004:1d82:1a0f:1d6f:e820:a0ed:ee97)
[06:40:50] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Ping timeout: 260 seconds)
[06:40:57] *** Quits: thing (~thing@user/thing) (Ping timeout: 276 seconds)
[06:45:05] *** Joins: malloy (~jimery@116.30.220.108)
[06:46:32] *** Joins: dec0d3r__ (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[06:47:28] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:47:47] *** Quits: noahmg123 (sid89117@id-89117.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:47:47] *** Quits: cengiz_io (sid223191@id-223191.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:48:41] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 268 seconds)
[06:48:41] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (Ping timeout: 268 seconds)
[06:48:59] *** Quits: wangledorf (sid505185@id-505185.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:48:59] *** Quits: illustris (sid211748@id-211748.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:49:18] *** Quits: dec0d3r_ (~dec0d3r@2001:8004:1d82:1a0f:1d6f:e820:a0ed:ee97) (Ping timeout: 268 seconds)
[06:49:19] *** Quits: psb (sid500598@user/psb) (Ping timeout: 268 seconds)
[06:49:43] *** Joins: psb (sid500598@user/psb)
[06:50:15] *** Joins: ullbeking (sid5364@user/ullbeking)
[06:51:04] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[06:52:10] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:52:38] *** Joins: wangledorf (sid505185@ilkley.irccloud.com)
[06:52:39] *** Joins: illustris (sid211748@ilkley.irccloud.com)
[06:52:40] *** Joins: cengiz_io (sid223191@ilkley.irccloud.com)
[06:52:41] *** Joins: noahmg123 (sid89117@ilkley.irccloud.com)
[06:52:44] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[06:54:27] *** Joins: jnip (~jnip@node-1w7jr9yfylvne4my6nh25vn80.ipv6.telus.net)
[06:58:48] *** Quits: s3uwu (~s3uwu@202-7-192-83.static.tpgi.com.au) (Ping timeout: 256 seconds)
[07:07:03] *** Joins: thing (~thing@user/thing)
[07:19:20] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[07:19:35] *** Quits: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net) (Quit: Leaving.)
[07:19:57] *** Quits: thing (~thing@user/thing) (Ping timeout: 276 seconds)
[07:31:04] *** Joins: thing (~thing@user/thing)
[07:31:53] *** Quits: alch (~alch@151.36.213.139) (Read error: Connection reset by peer)
[07:31:59] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (Ping timeout: 244 seconds)
[07:32:11] *** Quits: PotatoGim (sid99505@lymington.irccloud.com) (Ping timeout: 245 seconds)
[07:32:11] *** Quits: illustris (sid211748@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[07:32:11] *** Quits: Manouchehri (sid384576@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[07:32:11] *** Quits: psb (sid500598@user/psb) (Ping timeout: 256 seconds)
[07:32:11] *** Quits: glenfe (sid231748@user/glenfe) (Ping timeout: 256 seconds)
[07:32:14] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 260 seconds)
[07:32:14] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 260 seconds)
[07:32:14] *** Quits: glowcoil (sid3405@tinside.irccloud.com) (Ping timeout: 260 seconds)
[07:32:30] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (Ping timeout: 244 seconds)
[07:32:30] *** Quits: noahmg123 (sid89117@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[07:32:30] *** Quits: schna (sid484866@helmsley.irccloud.com) (Ping timeout: 244 seconds)
[07:32:30] *** Quits: lhtseng (sid15322@helmsley.irccloud.com) (Ping timeout: 244 seconds)
[07:32:30] *** Quits: elichai2 (sid212594@hampstead.irccloud.com) (Ping timeout: 244 seconds)
[07:32:30] *** Quits: kevinsjoberg (sid499516@lymington.irccloud.com) (Ping timeout: 244 seconds)
[07:32:42] *** Quits: katnis (uid15849@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[07:32:42] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 260 seconds)
[07:32:42] *** Quits: sa (sid1055@tinside.irccloud.com) (Ping timeout: 260 seconds)
[07:32:42] *** Quits: Bou (sid274843@user/bou) (Ping timeout: 260 seconds)
[07:32:45] *** Quits: ethrl (uid524335@user/doforlove33) (Ping timeout: 256 seconds)
[07:32:47] *** Quits: nohit (sid334887@tinside.irccloud.com) (Ping timeout: 268 seconds)
[07:32:52] *** Joins: glenfe (sid231748@user/glenfe)
[07:33:01] *** Quits: ikiryo (sid109660@user/ikiryo) (Ping timeout: 244 seconds)
[07:33:01] *** Quits: kaizen (sid501599@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[07:33:01] *** Quits: starman_jr (sid265462@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[07:33:05] *** Quits: cengiz_io (sid223191@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[07:33:05] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[07:33:05] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 268 seconds)
[07:33:10] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[07:33:10] *** Quits: nightstrike (uid487@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[07:33:15] *** Joins: psb (sid500598@user/psb)
[07:33:19] *** Quits: Pent (sid313808@lymington.irccloud.com) (Ping timeout: 256 seconds)
[07:33:19] *** Quits: decartes_ (sid240036@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[07:33:19] *** Quits: agander_m (sid407952@tinside.irccloud.com) (Ping timeout: 256 seconds)
[07:33:19] *** Quits: terabit (sid146285@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[07:33:19] *** Quits: englishm (sid6629@tinside.irccloud.com) (Ping timeout: 256 seconds)
[07:33:20] *** Joins: illustris (sid211748@id-211748.ilkley.irccloud.com)
[07:33:22] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[07:33:26] *** Quits: leonardus (sid358597@tinside.irccloud.com) (Ping timeout: 245 seconds)
[07:33:46] *** Joins: nohit (sid334887@2a03:5180:f::5:1c27)
[07:33:47] *** Joins: ikiryo (sid109660@user/ikiryo)
[07:33:48] *** Joins: elichai2 (sid212594@id-212594.hampstead.irccloud.com)
[07:33:51] *** Quits: zx2c4 (sid204921@gentoo/developer/zx2c4) (Ping timeout: 245 seconds)
[07:33:51] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[07:33:51] *** Joins: rubin55 (sid175221@2a03:5180:f:4::2:ac75)
[07:33:52] *** Joins: noahmg123 (sid89117@2a03:5180:f:3::1:5c1d)
[07:33:53] *** Quits: wangledorf (sid505185@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[07:33:53] *** Quits: placeb0 (uid283215@lymington.irccloud.com) (Ping timeout: 256 seconds)
[07:33:53] *** Quits: IUSR (sid348938@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[07:33:53] *** Quits: TallonRain (sid214799@user/tallonrain) (Ping timeout: 256 seconds)
[07:33:53] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 256 seconds)
[07:33:53] *** Joins: schna (sid484866@id-484866.helmsley.irccloud.com)
[07:33:54] *** Joins: lhtseng (sid15322@2a03:5180:f:1::3bda)
[07:34:01] *** Joins: kevinsjoberg (sid499516@2a03:5180:f:2::7:9f3c)
[07:34:02] *** Joins: Bou (sid274843@user/bou)
[07:34:02] *** Joins: glowcoil (sid3405@id-3405.tinside.irccloud.com)
[07:34:04] *** Joins: nightstrike (uid487@2a03:5180:f:5::1e7)
[07:34:05] *** Joins: bjs (sid190364@user/bjs)
[07:34:05] *** Joins: katnis (uid15849@2a03:5180:f:1::3de9)
[07:34:07] *** Joins: BlueShark (sid10311@user/blueshark)
[07:34:19] *** Joins: kaizen (sid501599@id-501599.helmsley.irccloud.com)
[07:34:23] *** Joins: starman_jr (sid265462@id-265462.hampstead.irccloud.com)
[07:34:26] *** Joins: IUSR (sid348938@2a03:5180:f:4::5:530a)
[07:34:28] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[07:34:31] *** Joins: zx2c4 (sid204921@gentoo/developer/zx2c4)
[07:34:32] *** Joins: TallonRain (sid214799@user/tallonrain)
[07:34:32] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[07:34:32] *** Joins: cengiz_io (sid223191@id-223191.ilkley.irccloud.com)
[07:34:34] *** Joins: buhman (sid411355@user/buhman)
[07:34:35] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[07:34:36] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[07:34:39] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[07:34:41] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[07:34:45] *** Joins: decartes_ (sid240036@id-240036.helmsley.irccloud.com)
[07:34:46] *** Joins: englishm (sid6629@id-6629.tinside.irccloud.com)
[07:34:55] *** Joins: ullbeking (sid5364@user/ullbeking)
[07:34:59] *** Joins: terabit (sid146285@id-146285.uxbridge.irccloud.com)
[07:35:06] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[07:35:09] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[07:35:12] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[07:35:25] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:10] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 268 seconds)
[07:36:31] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:49] *** Joins: alch (~alch@151.36.130.107)
[07:39:38] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 260 seconds)
[07:43:48] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[07:44:24] *** Joins: skeels (uid493124@id-493124.uxbridge.irccloud.com)
[07:44:39] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 256 seconds)
[07:50:21] *** Joins: kurahaupo (~kurahaupo@pa49-180-48-172.pa.nsw.optusnet.com.au)
[07:51:43] *** Quits: kurahaupo (~kurahaupo@pa49-180-48-172.pa.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[07:51:57] *** Joins: kurahaupo (~kurahaupo@pa49-180-48-172.pa.nsw.optusnet.com.au)
[07:52:02] *** Quits: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Quit: WeeChat 3.3)
[07:53:06] *** Quits: thing (~thing@user/thing) (Ping timeout: 276 seconds)
[07:53:09] *** Quits: kurahaupo_ (~kurahaupo@ppp122-115.static.internode.on.net) (Ping timeout: 256 seconds)
[07:54:37] *** Quits: jrqc (rofl@2603:3016:1e01:b960:20b3:fc15:12c5:30d8) (Read error: No route to host)
[07:56:13] *** Quits: Chip1972 (~Chip1972@186.206.217.247) (Remote host closed the connection)
[08:02:02] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 260 seconds)
[08:02:42] *** Joins: kurahaupo_ (~kurahaupo@123-243-221-134.tpgi.com.au)
[08:02:59] *** Joins: thing (~thing@user/thing)
[08:04:41] *** Quits: kurahaupo (~kurahaupo@pa49-180-48-172.pa.nsw.optusnet.com.au) (Ping timeout: 245 seconds)
[08:15:06] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[08:16:22] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:c8ef:20:697e:a56b)
[08:19:23] *** Quits: soapsudsxx (~soapsudsx@209.221.40.144) (Remote host closed the connection)
[08:20:45] *** Quits: reset (~reset@user/reset) (Quit: reset)
[08:23:13] *** Joins: reset (~reset@user/reset)
[08:25:25] <Inst> god this is driving me absolutely crazy
[08:27:18] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Ping timeout: 260 seconds)
[08:27:28] <Inst> i suspect in order to get haskell to accept my freaking code, i'll have to reimplement the github C repositories that point to Windows API
[08:34:27] *** Joins: slidercrank (~slidercra@user/slidercrank)
[08:35:13] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[08:36:32] <tusko> What would cause the string produced by this to be "z = " without the float value?
[08:36:46] <tusko> https://bpa.st/4DRQ
[08:42:42] <dave0> tusko: what does     puts(output);     print?
[08:43:15] <tusko> I'm not even sure I'm on a microcontroller. Let me see if I can pass that
[08:44:22] <tusko> Yeah, passing it didn't work.
[08:44:31] <dave0> does your microcontroller support floats?
[08:44:48] <tusko> it does. my print function is expecting a char * 
[08:45:14] <tusko> then I send it byte by byte over a transmitter
[08:45:22] <tusko> serial
[08:46:42] <tusko> Its just strange to me the whole string gets through except the float
[08:47:20] <dave0> you could check the result of sprintf ... i believe it returns -1 if there is an error
[08:47:26] <dave0> let me look that up
[08:47:38] <dave0> also does it pront the newline ?
[08:47:42] <dave0> print*
[08:48:00] *** Joins: Tempesta (~Tempesta@user/tempesta)
[08:48:02] *** Quits: Tempesta (~Tempesta@user/tempesta) (Excess Flood)
[08:48:37] *** Joins: Famine_ (~Famine@user/famine)
[08:49:13] <dave0> not -1, this says "a negative value": https://pubs.opengroup.org/onlinepubs/9699919799/functions/sprintf.html
[08:49:22] <dave0> you could check for that
[08:50:21] <tusko> I'll throw a breakpoint there and see what I can see
[08:51:54] *** Joins: vicfred (~vicfred@user/vicfred)
[08:52:01] *** Quits: Famine- (~Famine@user/famine) (Ping timeout: 268 seconds)
[08:53:02] *** Joins: proxy_e (~Master@2405:201:5505:7aa0:6113:1499:8d92:d5b6)
[08:53:19] <dave0> is it just the %1.1f that produces nothing? try   "z = (%1.1f)\n" and check for brackets
[08:54:36] <proxy_e> hello everyone, i have a urgent problem i want to know how to use Graphics.h in code block i have tried everything on internet please help
[08:58:32] <tusko> dave0, you might like this
[08:59:14] <dave0> maybe?
[08:59:25] <tusko> https://bpa.st/S5UQ
[08:59:30] <tusko> produces z = ()
[08:59:37] <dave0> hmm
[08:59:41] <dave0> try linking with -lm
[08:59:59] <dave0> you're sure your mcu supports floats?
[09:00:22] <dave0> maybe your libc doesnt
[09:00:37] <dave0> but try the math lib -lm
[09:01:14] <tusko> I know it will.
[09:01:23] <tusko> I've never actully been in the linker like this. I'm looking to see where to pass the option
[09:01:57] <tusko> ok, so it has gcc c m and nosys in there already
[09:02:19] <dave0> sorry i don't know, i'm out of ideas
[09:02:26] <tusko> bummer
[09:05:47] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[09:05:59] *** Joins: Tempesta (~Tempesta@user/tempesta)
[09:06:01] *** Quits: Tempesta (~Tempesta@user/tempesta) (Excess Flood)
[09:06:23] *** Quits: Trigraph (~Trigraph@user/trigraph) (Ping timeout: 264 seconds)
[09:06:37] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[09:07:51] *** Quits: proxy_e (~Master@2405:201:5505:7aa0:6113:1499:8d92:d5b6) (Quit: Leaving)
[09:08:20] *** Quits: citrons (~citrons@alt.mondecitronne.com) (Ping timeout: 260 seconds)
[09:08:29] *** Joins: citrons (~citrons@alt.mondecitronne.com)
[09:12:23] <tusko> I can tell you after sprintf runs output is ['z', '=', '', '\n', '\0', '\0', '\0'] 
[09:12:24] *** Joins: Trigraph (~Trigraph@user/trigraph)
[09:12:50] <dave0> it looks like your sprintf doesn't support the %f conversion
[09:13:13] <dave0> there's an old function to convert float to ascii but i'm having trouble googling it
[09:13:15] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[09:13:36] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[09:13:37] <dave0> ftoa gets some hits
[09:16:16] <dave0> here's something    gcvt
[09:17:42] <dave0> tusko: https://linux.die.net/man/3/gcvt
[09:17:43] <candide> Title of dave0's link: gcvt(3) - Linux man page
[09:18:14] <tusko> dang that's a thing
[09:18:27] <dave0> i think it's very old
[09:20:52] <dave0> can't make the robot find it
[09:21:03] <dave0> but if your libc has it, it might be worth a look
[09:22:40] <dave0> https://linux.die.net/man/3/fcvt
[09:22:41] <candide> Title of dave0's link: fcvt(3) - Linux man page
[09:22:43] <dave0> also that
[09:24:42] *** Joins: loganlee (~Thunderbi@user/loganlee)
[09:25:15] *** Quits: APic (apic@apic.name) (Ping timeout: 260 seconds)
[09:25:48] *** Joins: APic (~apic@apic.name)
[09:26:26] <Xgc> tusko: You could also try changing the type to double in that test, so that it has a better chance of being passed to sprintf properly.
[09:26:28] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 252 seconds)
[09:27:08] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[09:27:18] *** Joins: ztx (~ztx@user/ztx)
[09:27:45] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[09:27:50] <tusko> I had to go into the linker and add in floating point somehow
[09:28:04] <tusko> It was using a subset 'nano' of the std lib I guess
[09:29:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:29:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:29:27] *** Joins: wroathe (~wroathe@user/wroathe)
[09:29:46] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 260 seconds)
[09:32:25] <floatcomplex> change -lc_nano to -lc ?
[09:32:43] <floatcomplex> having specificed -nostdlib so that you have to link everything explicitly
[09:34:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 244 seconds)
[09:34:59] *** Quits: fcresende (~quassel@vps35015.publiccloud.com.br) (*.net *.split)
[09:34:59] *** Quits: drew (~drew@user/drew) (*.net *.split)
[09:34:59] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[09:34:59] *** Quits: finalsummer_ (~finalsumm@user/finalsummer) (*.net *.split)
[09:34:59] *** Quits: atulu[m] (~atulumatr@2001:470:69fc:105::d50c) (*.net *.split)
[09:34:59] *** Quits: pillarxyz[m] (~pillarxyz@2001:470:69fc:105::1:1985) (*.net *.split)
[09:34:59] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (*.net *.split)
[09:34:59] *** Quits: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com) (*.net *.split)
[09:34:59] *** Quits: bdt (~bdt@2a01:799:39e:7d00:e65f:1ff:fe08:8a88) (*.net *.split)
[09:34:59] *** Quits: les (znc@user/les) (*.net *.split)
[09:34:59] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[09:34:59] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[09:34:59] *** Quits: chiptuner (~bobby@user/chiptuner) (*.net *.split)
[09:34:59] *** Quits: mteo (francis@user/francis) (*.net *.split)
[09:34:59] *** Quits: towel (~towel@user/towel) (*.net *.split)
[09:34:59] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[09:34:59] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[09:35:06] *** Joins: mteo (francis@user/francis)
[09:35:12] *** Joins: finalsummer (~finalsumm@user/finalsummer)
[09:35:13] *** Joins: fcresende (~quassel@vps35015.publiccloud.com.br)
[09:35:13] *** Joins: les (znc@user/les)
[09:35:14] *** Joins: reda (~reda@user/reda)
[09:35:15] *** Joins: chiptuner (~bobby@user/chiptuner)
[09:35:18] *** Joins: vancz (~vancz@user/vancz)
[09:35:19] *** Joins: orkim (~orkim@user/orkim)
[09:35:22] *** Joins: towel (~towel@user/towel)
[09:35:22] *** Joins: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com)
[09:35:27] *** Joins: Stx (~stx@libera/staff/stx)
[09:35:33] *** Joins: bdt (~bdt@2a01:799:39e:7d00:e65f:1ff:fe08:8a88)
[09:35:35] *** Joins: drew (~drew@user/drew)
[09:35:42] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[09:35:54] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[09:36:10] *** Joins: pillarxyz[m] (~pillarxyz@2001:470:69fc:105::1:1985)
[09:36:55] <jnip> first time witnessing a netsplit, that was pretty cool
[09:37:32] *** Joins: atulu[m] (~atulumatr@2001:470:69fc:105::d50c)
[09:38:46] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[09:42:53] *** Quits: dpgraham4401[m] (~dpgraham4@2001:470:69fc:105::1:1aa4) (*.net *.split)
[09:42:53] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (*.net *.split)
[09:42:53] *** Quits: novasharper (~novasharp@2001:470:69fc:105::b4a) (*.net *.split)
[09:42:53] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[09:42:53] *** Quits: pnill (~pnill@ip170.ip-54-39-37.net) (*.net *.split)
[09:42:53] *** Quits: bone (~bone@user/mbo) (*.net *.split)
[09:42:53] *** Quits: grange_c (~grange_c@vps-9763379d.vps.ovh.net) (*.net *.split)
[09:42:54] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[09:42:54] *** Quits: davidv7 (~davidv7@user/videogameenjoyer) (*.net *.split)
[09:42:54] *** Quits: xrj (~av@2a01:4f8:c17:7cba::1) (*.net *.split)
[09:42:54] *** Quits: trenka (~ykaliuta@user/trenka) (*.net *.split)
[09:42:54] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[09:42:54] *** Quits: koisoke_ (xef4@epilogue.org) (*.net *.split)
[09:42:54] *** Quits: ra4king (~ra4king@roiatalla.com) (*.net *.split)
[09:42:54] *** Quits: edr (~edr@user/edr) (*.net *.split)
[09:42:54] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[09:42:54] *** Quits: Epakai (Epakai@drislock.org) (*.net *.split)
[09:42:54] *** Quits: twkm (twkm@rfc1459.net) (*.net *.split)
[09:42:54] *** Quits: jason1234 (fltk@thunix.net) (*.net *.split)
[09:42:54] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[09:42:54] *** Quits: kline (~freedom0@libera/staff/kline) (*.net *.split)
[09:42:54] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[09:43:00] *** Joins: jason1234 (fltk@thunix.net)
[09:43:00] *** Joins: shachaf (~shachaf@user/shachaf)
[09:43:00] *** Joins: koisoke (xef4@epilogue.org)
[09:43:01] *** Joins: pnill (~pnill@ip170.ip-54-39-37.net)
[09:43:03] *** Joins: xrj (~av@2a01:4f8:c17:7cba::1)
[09:43:05] *** Joins: trenka (~ykaliuta@89-27-97-175.bb.dnainternet.fi)
[09:43:06] *** Joins: twkm (twkm@rfc1459.net)
[09:43:06] *** Joins: edr (~edr@enlo.co)
[09:43:06] *** Joins: Epakai (Epakai@drislock.org)
[09:43:12] *** Joins: bone (~bone@user/mbo)
[09:43:15] *** Quits: trenka (~ykaliuta@89-27-97-175.bb.dnainternet.fi) (Changing host)
[09:43:15] *** Joins: trenka (~ykaliuta@user/trenka)
[09:43:17] *** Quits: edr (~edr@enlo.co) (Changing host)
[09:43:17] *** Joins: edr (~edr@user/edr)
[09:43:24] *** Joins: strudl (~strudl@tvarohova.strud.la)
[09:43:25] *** Quits: strudl (~strudl@tvarohova.strud.la) (Changing host)
[09:43:25] *** Joins: strudl (~strudl@user/strudl)
[09:43:28] *** Joins: grange_c (~grange_c@vps-9763379d.vps.ovh.net)
[09:43:30] *** Joins: ra4king (~ra4king@roiatalla.com)
[09:43:35] *** Joins: davidv7 (~davidv7@user/videogameenjoyer)
[09:43:37] *** Joins: dzz007 (~dzz007@user/dzz007)
[09:43:48] *** Joins: kline (~freedom0@libera/staff/kline)
[09:43:50] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[09:44:04] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[09:44:30] *** Joins: ranuzz (~ranuzz@2409:4063:6e18:6b99:a975:ff53:cecd:ef31)
[09:45:43] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[09:46:00] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[09:46:46] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 245 seconds)
[09:47:22] *** Joins: novasharper (~novasharp@2001:470:69fc:105::b4a)
[09:48:54] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[09:51:01] *** Quits: APic (~apic@apic.name) (Ping timeout: 256 seconds)
[09:51:01] *** Joins: vysn (~vysn@user/vysn)
[09:51:03] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[09:51:27] *** Joins: APic (apic@apic.name)
[09:55:59] *** Joins: dpgraham4401[m] (~dpgraham4@2001:470:69fc:105::1:1aa4)
[10:03:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:04:24] *** Quits: APic (apic@apic.name) (Ping timeout: 244 seconds)
[10:13:11] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[10:13:51] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[10:13:52] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:17:50] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 244 seconds)
[10:18:39] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[10:19:18] *** Quits: wootz (~wootz@23.19.19.200) (Ping timeout: 260 seconds)
[10:20:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:20:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:20:20] *** Joins: wroathe (~wroathe@user/wroathe)
[10:20:22] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:21:15] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:21:22] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[10:21:49] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[10:22:16] *** Quits: dec0d3r__ (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[10:23:54] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[10:24:48] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:25:04] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 244 seconds)
[10:27:15] *** Quits: jnip (~jnip@node-1w7jr9yfylvne4my6nh25vn80.ipv6.telus.net) (Quit: WeeChat 3.3)
[10:28:26] *** Joins: mrig (~AdiIRC@user/mrig)
[10:29:32] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:29:43] *** Quits: pizdets (~pizdets@183.182.110.244) (Ping timeout: 244 seconds)
[10:30:45] *** Joins: pizdets (~pizdets@183.182.111.232)
[10:35:20] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[10:36:46] *** Quits: ranuzz (~ranuzz@2409:4063:6e18:6b99:a975:ff53:cecd:ef31) (Ping timeout: 245 seconds)
[10:37:02] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[10:38:23] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:39:02] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Read error: Connection reset by peer)
[10:39:25] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[10:39:41] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:47:17] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[10:47:18] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 260 seconds)
[10:48:53] *** lukedashjr is now known as luke-jr
[10:55:20] *** Quits: Stx (~stx@libera/staff/stx) (Quit: leaving)
[10:56:26] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[10:57:05] *** Joins: Rounin (~david@84.212.130.215)
[11:06:05] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[11:10:13] *** Quits: monchi (~m-6uy5ag@lo3.online) (Remote host closed the connection)
[11:16:01] *** Quits: kurahaupo_ (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 256 seconds)
[11:18:24] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[11:18:48] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 244 seconds)
[11:20:10] *** Joins: Enitin (~Enitin@82.102.22.85)
[11:25:35] *** Quits: somlis (~somlis@user/somlis) (Ping timeout: 264 seconds)
[11:26:01] *** Joins: ranuzz (~ranuzz@2409:4063:6e18:6b99:a975:ff53:cecd:ef31)
[11:27:36] *** Quits: thing (~thing@user/thing) (Ping timeout: 276 seconds)
[11:29:09] *** Quits: finsternis (~X@23.226.237.192) (Remote host closed the connection)
[11:29:16] *** Quits: rahl (~rahl@102.114.41.136) (Ping timeout: 268 seconds)
[11:30:06] *** Quits: alicef (~none@gentoo/developer/alicef) (Quit: install gentoo)
[11:30:37] *** Joins: thing (~thing@user/thing)
[11:30:59] *** Joins: alicef (~none@gentoo/developer/alicef)
[11:35:27] *** Quits: alch (~alch@151.36.130.107) (Ping timeout: 268 seconds)
[11:35:37] *** Joins: rahl (~rahl@102.114.82.103)
[11:37:06] *** Joins: alch (~alch@151.38.196.147)
[11:40:30] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 244 seconds)
[11:41:11] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 264 seconds)
[11:41:58] *** Joins: ckardaris (~ckardaris@static-39-104-87-188.ipcom.comunitel.net)
[11:42:35] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:44:30] *** Joins: wootz (~wootz@23.19.19.200)
[11:45:52] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[11:51:41] *** Joins: aradesh (~aradesh@user/aradesh)
[11:52:30] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:54:05] *** Joins: brelod (~me@90.244.150.142)
[11:54:27] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[11:55:44] <Inst> Dumb question: can pointers override const?
[11:56:21] <floatcomplex> yeah...might get some compiler warnings that you really shouldn't ignore
[11:56:24] <floatcomplex> why do you want to do this
[11:56:47] <Inst> oh, it's just function const etc
[11:57:03] <Inst> i'm currently trying to reverse engineer a call to windows API while not really knowing C
[11:57:20] *** Quits: skeels (uid493124@id-493124.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:58:50] *** Joins: random-nick (~random-ni@87.116.176.55)
[12:00:05] <dave0> Inst: sort of, you have to cast
[12:01:10] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[12:09:51] *** Quits: thing (~thing@user/thing) (Ping timeout: 276 seconds)
[12:10:31] *** Quits: ranuzz (~ranuzz@2409:4063:6e18:6b99:a975:ff53:cecd:ef31) (Ping timeout: 245 seconds)
[12:10:50] *** Joins: thing (~thing@user/thing)
[12:11:49] *** Joins: APic (apic@apic.name)
[12:14:41] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:c9f3:c80c:ad31:96ec) (Ping timeout: 245 seconds)
[12:17:54] *** Joins: earnestly (~earnest@user/earnestly)
[12:18:29] *** Joins: Klinda (~superleag@user/klinda)
[12:19:49] *** Joins: serbest (~serbest@user/serbest)
[12:20:48] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[12:20:48] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[12:20:48] *** Joins: wroathe (~wroathe@user/wroathe)
[12:20:57] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:24:03] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[12:25:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[12:29:05] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[12:30:15] *** Quits: Z[m]1 (~zincognit@2001:470:69fc:105::e306) (Quit: You have been kicked for being idle)
[12:30:15] *** Quits: dotz0cat[m] (~dotz0catm@2001:470:69fc:105::91b) (Quit: You have been kicked for being idle)
[12:30:47] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:32:36] *** Joins: karakedi (~eAC53C340@user/karakedi)
[12:33:02] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 240 seconds)
[12:33:18] *** Joins: somlis (~somlis@user/somlis)
[12:34:06] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[12:35:17] *** Joins: arinov (~arinov@213.194.126.155)
[12:35:34] *** Joins: thing_ (~thing@user/thing)
[12:35:51] *** Quits: thing (~thing@user/thing) (Ping timeout: 276 seconds)
[12:36:11] *** thing_ is now known as thing
[12:38:15] *** Joins: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de)
[12:39:30] *** Quits: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de) (Client Quit)
[12:40:48] *** Joins: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de)
[12:41:22] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[12:44:06] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Quit: Leaving)
[12:44:59] *** Quits: fstd (~fstd@xdsl-87-79-44-169.nc.de) (Ping timeout: 256 seconds)
[12:46:21] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[12:47:09] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[12:47:18] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:49:15] *** Quits: kurfen (~kurfen@45.152.181.20) (Read error: Connection reset by peer)
[12:49:48] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[12:50:33] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:50:40] *** Quits: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net) (Ping timeout: 268 seconds)
[12:50:58] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[12:51:32] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 240 seconds)
[12:52:13] *** Joins: vmcs_ (~vmcs@185.30.88.65)
[12:53:50] *** Joins: kurfen (~kurfen@45.152.181.20)
[12:55:09] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:57:17] *** Quits: vmcs_ (~vmcs@185.30.88.65) (Remote host closed the connection)
[12:59:02] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[13:01:35] *** Joins: ranuzz (~ranuzz@2409:4063:6e18:6b99:a975:ff53:cecd:ef31)
[13:02:41] *** Joins: V-T60 (~v@91.203.24.166)
[13:04:15] *** Quits: steve_ (~steve@ool-182c2aa4.dyn.optonline.net) (Ping timeout: 256 seconds)
[13:06:38] *** Quits: V-T60 (~v@91.203.24.166) (Client Quit)
[13:08:11] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:09:29] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[13:09:45] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[13:10:22] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:10:26] *** Joins: plastico (~plastico@neomutt/plastico)
[13:15:59] *** Quits: ranuzz (~ranuzz@2409:4063:6e18:6b99:a975:ff53:cecd:ef31) (Ping timeout: 264 seconds)
[13:19:06] *** Joins: fstd (~fstd@xdsl-78-34-189-40.nc.de)
[13:27:49] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[13:28:14] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[13:28:53] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:c9f3:c80c:ad31:96ec)
[13:29:11] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:30:05] *** Joins: loganlee (~Thunderbi@user/loganlee)
[13:30:27] *** Quits: thing (~thing@user/thing) (Ping timeout: 276 seconds)
[13:31:25] *** Joins: ranuzz (~ranuzz@47.15.16.221)
[13:31:56] *** Joins: thing (~thing@user/thing)
[13:32:26] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[13:32:48] *** Quits: inomoz (~inomoz@176.59.125.26) (Quit: WeeChat 3.3)
[13:47:36] *** Quits: ranuzz (~ranuzz@47.15.16.221) (Read error: Connection reset by peer)
[13:47:59] *** Joins: samlamamma (~samlamamm@proxy01.se.axis.com)
[13:48:08] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[13:49:27] <samlamamma> Is it OK to allocate a struct with a flexible array member non-dynamically? like const struct Flexy = { n = 1, arr = {1337}}; for example
[13:49:51] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[13:49:55] <dave0> hmm dunno
[13:50:31] <dave0> ,cc struct Flexy { int n; int arr[]; }; const struct Flexy = { .n = 1, .arr = {1337}};
[13:50:33] <candide> dave0: error: expected identifier or '(' before '=' token
[13:50:39] <dave0> oh
[13:50:44] <dave0> ,cc struct Flexy { int n; int arr[]; }; const struct Flexy foo = { .n = 1, .arr = {1337}};
[13:50:46] <candide> dave0: warning: initialization of a flexible array member [-Wpedantic]  note: (near initialization for 'foo.arr')  error: non-static initialization of a flexible array member
[13:50:46] <markand> it may uses VLAs in that case?
[13:51:09] <dave0> ,cc struct Flexy { int n; int arr[]; }; static const struct Flexy foo = { .n = 1, .arr = {1337}};
[13:51:11] <candide> dave0: [warning: initialization of a flexible array member [-Wpedantic]  note: (near initialization for 'foo.arr')] no output: foo = {n = 1, arr = 0x403030 <foo+4>}
[13:51:21] <dave0> i warns but then works
[13:51:23] <dave0> it
[13:51:32] *** Joins: nyah (~nyah@94.6.71.219)
[13:51:39] <vdamewood> Problem with flexible array members is the compiler doesn't know how much to allocate at compile time.
[13:51:53] <markand> theyÂ© say it's mandatory to use (m|c)alloc: https://stackoverflow.com/a/8688284
[13:52:04] <samlamamma> vdamewood: Wouldn't it technically know in this case? Considering the constness of it I mean
[13:52:20] <samlamamma> Lunch :). Thank you!
[13:52:49] <vdamewood> You've assigned a value to the first element, but not specified how many, really.
[13:53:17] <vdamewood> Though, It's true that a normal array would just be one element long in that case.
[13:53:26] <dave0> i guess you could argue the VLA []'s match this initialization    int a[] = {1337};
[13:53:32] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[13:54:18] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:54:41] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[13:55:41] *** Joins: ko (~i.am@user/marlboro)
[13:55:59] <dave0> the robot prints something different here... arr=0x403030  that looks like it's allocated space at 0x403030 whereas if it was a proper VLA it'd be the hex value of 1337
[13:56:10] <dave0> ,cc printf("%x ", 1337);
[13:56:13] <candide> dave0: 539
[13:56:24] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[13:56:49] <dave0> foo should have been   { n=1, arr[0]=539}.. oh maybe
[13:57:04] <vdamewood> D00d! I'm totally 539!
[13:57:14] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[13:58:05] <dave0> ,cc struct Flexy { int n; int arr[]; }; static const struct Flexy foo = { .n = 1, .arr = {1337,42,69}}; printf("%d %d %d ", foo.arr[0], foo.arr[1], foo.arr[2]); /* nah it seems to work */
[13:58:07] <candide> dave0: [warning: initialization of a flexible array member [-Wpedantic]  note: (near initialization for 'foo.arr')] 1337 42 69
[13:58:59] <dave0> 0x403030 is within foo
[13:59:02] <dave0> fair enough
[13:59:06] <dave0> it seems to work
[14:00:11] *** Quits: Klinda (~superleag@user/klinda) (Read error: Connection reset by peer)
[14:00:40] *** Joins: Klinda (~superleag@user/klinda)
[14:01:32] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[14:02:06] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[14:02:34] *** Quits: moose (~moose@user/moose) (Quit: Leaving)
[14:04:30] <fizzie> Initializing flexible array members is a GCC extension.
[14:05:16] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:06:03] <dave0> another "feature"
[14:06:28] <fizzie> https://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html "GCC allows static initialization of flexible array members. --"
[14:06:53] <fizzie> It also shows a clunky workaround that involves defining another struct.
[14:08:50] <kurahaupo> dave0: just because it's a VLA, that does not exempt it from the rule that its name evaluates to a pointer to the first element
[14:09:24] <dave0> kurahaupo: yah i'm used to candide dumping the contents of the array rather than pointer to it
[14:09:47] <kurahaupo> oh right, an issue with candide
[14:09:54] <candide> kâ€‹urahaupo, But of course.
[14:11:06] <dave0> i didn't look closely enough at   arr = 0x403030 <foo+4>   which actually explains where arr is
[14:11:09] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Quit: Quit)
[14:11:16] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[14:11:18] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[14:11:23] <dave0> on the end of foo
[14:12:49] *** Quits: heftig (heftig@archlinux/developer/heftig) (Quit: heftig)
[14:14:38] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[14:15:44] *** Joins: retro_ (~retro@2e41e9c8.skybroadband.com)
[14:16:37] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[14:16:42] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[14:16:56] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[14:17:19] *** lkor is now known as lionkor
[14:18:37] *** Joins: heftig (heftig@archlinux/developer/heftig)
[14:19:28] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[14:20:06] *** nheir_ is now known as nheir
[14:22:02] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:23:49] *** nheir is now known as nheird
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:31:08] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[14:32:41] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:33:48] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[14:39:16] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Quit: Quit)
[14:39:25] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[14:39:48] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[14:40:32] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[14:42:51] *** Joins: Enitin (~Enitin@82.102.22.84)
[14:43:46] *** Joins: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[14:44:21] <hxztnxt> why do people write comments like this /** comment */ instead of with just one * at the beginning
[14:44:23] <hxztnxt> ?
[14:44:47] <vdamewood> hxztnxt: There are systems that produce API documentation from such comments.
[14:46:35] <LangerJan> hxztnxt: check out doxygen for example
[14:47:34] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[14:47:53] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[14:47:57] *** Joins: cursey (~cursey@user/cursey)
[14:50:21] <Inst> sigh
[14:50:25] <Inst> this is still a nasty hack
[14:50:42] <Inst> i'm curious, how do you render normal C code into a header?
[14:50:48] <Inst> are there major conventions I should be aware of?
[14:50:51] *** Joins: Livio (~livio@host-95-235-237-67.retail.telecomitalia.it)
[14:50:58] <vdamewood> 'render'?
[14:51:21] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:51:28] <vdamewood> Well, and 'normal'?
[14:52:24] <dave0> Inst: it's convention to put definitions in .h files, but it's perfectly valid to put code in there.. preprocessor doesn't care
[14:52:38] <dave0> sorry declarations in .h files
[14:52:45] <dave0> definitions in .c files
[14:52:45] <Inst> yeah, what's going on is that i need both C and C++ code together
[14:53:15] <vdamewood> The C standard requires that __cplusplus NOT be defined. The C++ standard requires that it is.
[14:53:16] <Inst> i don't know enough on how to merge them properly, so one solution i'm thinking of is simply turning the C code into a header file, then having the C++ include it
[14:53:43] <dave0> Inst: you can link c and c++ code in the same program
[14:53:49] <Inst> but not in the same file
[14:53:54] <vdamewood> Inst: Sounds like an X Y problem. What are you actually trying to do?
[14:53:56] <Inst> i'm trying to play with an FFI in another language
[14:54:14] <vdamewood> Ah, and that FFI only interops with C and not C++?
[14:54:18] <dave0> Inst: yes but that is not a problem
[14:54:25] <Inst> I'm trying to use a Github repository to provide fodder for a Haskell foreign language interfare, namely because I want to use existing code to call the Windows API
[14:54:36] <Inst> *foreign function
[14:54:52] <Inst> the FFI seems weak, or rather, it's complicated and probably not documented properly
[14:54:57] *** Joins: ranuzz (~ranuzz@2409:4063:6e18:6b99:a975:ff53:cecd:ef31)
[14:55:15] <Inst> so i'm just trying to get it to accept the code by combining all libraries etc in the original repository into one file
[14:55:31] <vdamewood> Sounds like a terrible idea.
[14:55:44] <Inst> spent 48 hours on this, I just need a hack
[14:56:16] <vdamewood> You should keep your different languages in different files.
[14:56:32] <Inst> yeah, which is what i'm aiming to do by converting the C code into a header
[14:56:33] *** Joins: Burgundy (~yomon@86.127.194.72)
[14:56:59] <vdamewood> Let me reword that. Keep different languages in different translation units.
[14:57:07] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[14:57:24] <Inst> I don't understand what you mean
[14:57:42] <vdamewood> compile C and C++ separately.
[14:58:20] <vdamewood> Don't stick C code in a header so you can #include it in a C++ file.
[14:58:35] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[14:58:50] <vdamewood> What do you hope to accomplish by doing that? What problem does it solve?
[14:58:58] <Inst> I can't figure out how to do it otherwise. The repository author claimed it was all C, but it turns out for accessing the Windows API the author resorted to C++
[14:59:07] <dave0> Inst: is the problem that haskell can only call c functions, and the windows api wants c++ function calls?
[14:59:30] <Inst> I tested it, I generated a C++ file, and it was able to call functions in the C++ file.
[14:59:42] <vdamewood> Experience has taught me that the Windows API is 100% C ABI.
[15:00:09] <samlamamma> Inst: I'm sure that's "by accident". Typically C++ code cannot be FFI:d into, because of name mangling issues and lack of a stable ABI (AFAIK)
[15:00:50] <vdamewood> samlamamma: Add to that that some things just don't make any sense to C code, like vtables.
[15:01:08] <vdamewood> (granted, to C code it's just a pointer to a weird kind of struct)
[15:01:33] <vdamewood> Inst: You keep mentioning 'it' but you're not saying what 'it' is.
[15:01:57] <Inst> well, I just set up a .cpp file with <iostream>
[15:02:20] <vdamewood> So what's the problem?
[15:03:07] <Inst> ummmm, the remaining problem is how to integrate the code
[15:03:11] <Inst> the FFI uses gcc
[15:03:51] <Inst> and the C++ code, at least, doesn't seem to show any incidence of "namespace"
[15:04:05] <Inst> although that might be an issue with its own headers
[15:04:21] <vdamewood> So, you're trying to write code for an FFI?
[15:05:06] <samlamamma> Inst: Are you using Capi?
[15:05:15] <Inst> yeah
[15:05:22] <Inst> to the capi question
[15:06:26] <Inst> less trying to write it, and more trying to mangle someone else's code until it's in a format that the Haskell CAPI FFI can work with
[15:06:57] <samlamamma> OK. You need to spec out the function signatures which you're interested in in a C header file. Typically a C library has those headers, so I don't really understand what's going on.
[15:07:59] *** Joins: vysn (~vysn@user/vysn)
[15:09:11] *** Joins: frost (~frost@user/frost)
[15:11:03] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:14:46] *** Quits: puke (~puke@user/puke) (Quit: puke)
[15:16:12] *** Joins: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[15:16:35] *** Quits: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Client Quit)
[15:20:37] <Inst> crap, looks like the compiler got confused by failure to save changes etc, and it actually doesn't accept cpp code
[15:20:45] <Inst> does not recognize <iostream>
[15:24:05] <vdamewood> In general, no, a C compiler won't find C++'s standard headers.
[15:24:36] <vdamewood> You should use a C++ compiler (or frontend) to compile C++ code.
[15:26:02] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[15:27:31] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:30:50] <nomagno> If you are using the famous "Common subset of C and C++" you can definitely just do #ifdef
[15:31:28] <vdamewood> Well, <iostream> isn't in that subset.
[15:31:59] <nomagno> See the part where I say "you can definitely just do #ifdef"
[15:32:11] <nomagno> Headers are not part of the language
[15:32:17] *** Quits: alch (~alch@151.38.196.147) (Read error: Connection reset by peer)
[15:32:37] <nomagno> They're preprocessor thingies
[15:32:38] <nomagno> Well, #include isn't
[15:34:11] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:34:25] <samlamamma> Inst: Yeah, don't use C++. Use C as a bridge. C++ <-> C <-> Haskell
[15:34:53] <vdamewood> I'm not sure inst even needs C++.
[15:35:09] <markand> if it's winapi it's definitely pure C 
[15:35:17] <nomagno> Well they probably want C++, not need it
[15:35:23] <Inst> forget it
[15:35:31] <Inst> i just broke my IDE set-up
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:22] *** Joins: alch (~alch@151.38.191.184)
[15:36:27] <vdamewood> fix it
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:44] <nomagno> How do I go about handling structs as function arguments/return values on Emscriptem/WebAssembly's JavaScript interface?
[15:37:14] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[15:37:22] <Inst> no clue how, and tbh, running haskell on windows is insane
[15:37:42] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[15:37:51] <nomagno> As in, I absolutely need to handle structs but the Emscriptem API just... Doesn't. You can apparently do manual WebAssembly memory accessing but sounds dumb
[15:38:10] <nomagno> Inst: why is running Haskell on Windows insane?
[15:38:47] <Inst> no package manager to help you clean up spare haskell installations, the fact that haskell ends up producing like 20 separate haskells
[15:38:57] <Inst> my hobby is apparently hunting down GHCs and killing them
[15:39:47] <samlamamma> Time for WSL :)  Inst
[15:39:56] *** Quits: synaps3 (~void@user/synaps3) (Quit: Leaving)
[15:42:46] *** Quits: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de) (Quit: Textual IRC Client: www.textualapp.com)
[15:43:13] *** Quits: Trigraph (~Trigraph@user/trigraph) (Remote host closed the connection)
[15:44:36] <vdamewood> Inst: Which IDE?
[15:44:46] *** Joins: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr)
[15:55:32] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Quit: Quit)
[15:55:41] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[15:59:59] <markand> and FreeBSD likes to have 3 different llvm versions in the ports tree
[16:00:18] *** Quits: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr) (Quit: ZNC 1.8.2 - https://znc.in)
[16:00:20] <markand> so when building from source all your packages you actually build a c/c++ toolchain three/four times
[16:00:38] <markand> not mentioning rust that also incorporates its own fork
[16:06:02] * markand still dreams about creating a whole OS with a yet minimalist toolchain
[16:06:37] *** Joins: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr)
[16:08:54] *** Quits: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr) (Client Quit)
[16:09:18] *** Joins: rcoote (~rcoote@221-224-024-217.ip-addr.vsenet.de)
[16:12:13] *** Joins: masterbuilder (~user@user/masterbuilder)
[16:12:16] *** Joins: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr)
[16:14:29] <System_Error> Inst> actually that's what makes windows inconvenient for development even if it isnt haskell.
[16:14:46] <dave0> markand: oberon seems nice
[16:14:52] <Inst> VSC
[16:14:52] *** Quits: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr) (Client Quit)
[16:15:13] <Inst> end result: code was produced that crashed my compiler 2-3 times
[16:15:46] <Inst> i'm fairly angry
[16:15:58] *** Quits: samlamamma (~samlamamm@proxy01.se.axis.com) (Quit: Client closed)
[16:16:04] *** Joins: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr)
[16:17:47] *** Quits: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr) (Client Quit)
[16:18:00] *** Joins: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr)
[16:19:25] *** Quits: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr) (Client Quit)
[16:20:00] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[16:20:30] *** Joins: de-facto (~de-facto@user/de-facto)
[16:20:54] <g0z> sounds like your compiler needs some work
[16:21:45] <alch> markand: I count 8 different llvm versions in the ports tree :D
[16:24:47] *** Joins: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr)
[16:27:26] <nomagno> markand: You can try backporting stuff to Minix :P
[16:33:55] *** Quits: Posterdati (~posterdat@host-87-3-210-39.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[16:35:25] <markand> minix is entirely dead
[16:35:37] <markand> and basically it's NetBSD with a minix kenrel right now
[16:35:53] <markand> last time I tried it it was no longer booting after a hard shutdown
[16:36:18] *** Quits: rsarson (~rsarson@2607:fea8:29e1:b000::952e) (Quit: Leaving.)
[16:36:40] <dave0> linux swallowed everything unixy
[16:37:19] <dave0> but someone put minix on their homebrew 16 bit cpu
[16:37:59] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:38:13] <dave0> http://www.homebrewcpu.com/
[16:41:53] *** Quits: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr) (Quit: ZNC 1.8.2 - https://znc.in)
[16:42:57] *** Quits: Livio (~livio@host-95-235-237-67.retail.telecomitalia.it) (Ping timeout: 250 seconds)
[16:43:03] *** Joins: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr)
[16:43:52] *** Joins: constxd (~brad@192.75.101.164)
[16:47:35] *** Joins: Posterdati (~posterdat@host-80-183-118-167.business.telecomitalia.it)
[16:48:57] *** Quits: rcoote (~rcoote@221-224-024-217.ip-addr.vsenet.de) (Ping timeout: 244 seconds)
[16:49:56] *** Joins: rcoote (~rcoote@dynamic-046-114-105-172.46.114.pool.telefonica.de)
[16:50:32] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[16:52:56] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[16:59:34] *** Joins: rsarson (~rsarson@2607:fea8:29e1:b000::952e)
[16:59:42] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (Ping timeout: 260 seconds)
[17:00:02] *** Quits: ranuzz (~ranuzz@2409:4063:6e18:6b99:a975:ff53:cecd:ef31) (Ping timeout: 240 seconds)
[17:02:53] *** Quits: msk (~msk@185.124.240.174) (Ping timeout: 268 seconds)
[17:07:30] *** Joins: msk (~msk@185.124.240.174)
[17:09:58] *** Joins: seninha (~seninha@user/seninha)
[17:10:48] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:13:39] *** Joins: NEYi (~NEYi@109.251.216.38)
[17:15:27] *** Quits: rcoote (~rcoote@dynamic-046-114-105-172.46.114.pool.telefonica.de) (Ping timeout: 250 seconds)
[17:16:27] *** Joins: Tempesta (Tempesta@user/tempesta)
[17:17:09] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:19:54] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[17:23:28] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[17:26:10] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[17:28:13] *** Joins: ranuzz (~ranuzz@2409:4063:6e18:6b99:cd3b:5f46:fecb:11ca)
[17:29:49] *** Joins: riposte (~finalripo@2403-5802-74-2-20c-29ff-fef3-ce22.ip6.aussiebb.net)
[17:36:20] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[17:37:01] *** Joins: AmR (~AmREiSa@156.199.218.104)
[17:38:43] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:39:22] *** Quits: Fairy (~Fairy@ti0004a400-4356.bb.online.no) (Read error: Connection reset by peer)
[17:39:41] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[17:40:19] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:50:36] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:54:33] *** Joins: strajder (~strajder@user/strajder)
[17:55:32] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[17:56:25] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:57:29] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 250 seconds)
[18:00:23] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[18:03:59] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 250 seconds)
[18:04:43] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:04:43] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:04:43] *** Joins: wroathe (~wroathe@user/wroathe)
[18:04:44] *** Joins: iomari891 (~iomari891@105.112.138.38)
[18:07:18] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c5a4:eaf2:add7:ad94)
[18:09:10] *** Joins: Hercules (~Hercules@user/hercules)
[18:10:16] *** Quits: Hercules (~Hercules@user/hercules) (Max SendQ exceeded)
[18:10:45] *** Joins: Hercules (~Hercules@user/hercules)
[18:12:05] *** Quits: Hercules (~Hercules@user/hercules) (Max SendQ exceeded)
[18:12:09] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:d966:d0e8:ae89:2c81)
[18:12:32] *** Joins: Hercules (~Hercules@user/hercules)
[18:13:08] *** Quits: Hercules (~Hercules@user/hercules) (Max SendQ exceeded)
[18:16:15] *** Joins: V-T60 (~v@91.203.24.166)
[18:18:48] *** Joins: dohtem (uid524096@user/dohtem)
[18:20:19] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[18:22:13] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: nyaa~)
[18:26:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 244 seconds)
[18:28:21] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:33:19] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[18:33:54] *** Quits: ranuzz (~ranuzz@2409:4063:6e18:6b99:cd3b:5f46:fecb:11ca) (Remote host closed the connection)
[18:34:18] *** Joins: ranuzz (~ranuzz@2409:4063:6e18:6b99:cd3b:5f46:fecb:11ca)
[18:36:24] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[18:36:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:d18c:8b69:3306:9a69)
[18:36:47] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:d18c:8b69:3306:9a69) (Changing host)
[18:36:47] *** Joins: skapata (~Skapata@user/skapata)
[18:37:56] *** Joins: quartz (~quartz@user/quartz)
[18:38:14] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Remote host closed the connection)
[18:38:32] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[18:38:40] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[18:38:46] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[18:39:42] <System_Error> <markand> minix is entirely dead <- Intel with all their Management Engines would probably disagree this idea.
[18:40:16] *** Joins: pulse (~pulse@user/pulse)
[18:40:52] *** Joins: pmn (~pmn@bras-base-mtrlpq4706w-grc-02-174-89-234-199.dsl.bell.ca)
[18:42:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:42:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:42:47] *** Joins: wroathe (~wroathe@user/wroathe)
[18:45:01] <omegatron> and because of that, there are more minix "installations" on the planet than <insert here>
[18:45:32] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-1014-2f07-8b12-3b8a.res6.spectrum.com)
[18:46:09] *** Quits: candide (~pbot3@about/c/bot/candide) (Quit: Departure requested.)
[18:46:34] *** Joins: candide (~pbot3@about/c/bot/candide)
[18:47:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:49:21] *** Quits: dld (~dld@98.217.187.57) (Ping timeout: 256 seconds)
[18:51:09] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[18:53:15] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[18:53:21] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:53:56] *** Joins: raj (uid72176@user/raj)
[18:54:09] *** Joins: quartz (~quartz@user/quartz)
[18:55:19] *** Quits: digilink (~digilink@user/digilink) (Quit: WeeChat 3.2.1)
[18:55:46] *** Joins: digilink (~digilink@user/digilink)
[18:59:27] *** Quits: ranuzz (~ranuzz@2409:4063:6e18:6b99:cd3b:5f46:fecb:11ca) (Ping timeout: 250 seconds)
[19:00:27] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[19:00:53] *** Joins: ranuzz (~ranuzz@47.15.22.179)
[19:02:23] *** Joins: squarepants (~ranuzz@47.15.22.179)
[19:03:23] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:04:37] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[19:05:21] *** Quits: ranuzz (~ranuzz@47.15.22.179) (Ping timeout: 244 seconds)
[19:06:59] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Ping timeout: 264 seconds)
[19:07:13] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[19:10:09] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[19:12:19] *** Joins: magla (~gelignite@55d431b8.access.ecotel.net)
[19:14:06] <makersmasher> In K&R it says "Function definitions can appear in any order, and in once source file or several, although no function can be split between files."
[19:14:39] *** Quits: V-T60 (~v@91.203.24.166) (Ping timeout: 244 seconds)
[19:15:07] *** Parts: raj (uid72176@user/raj) ()
[19:15:11] <makersmasher> isn't that contradictory? Or is it saying that if you have a function that calls a function, it can be split (ie one func per source file); but you can't split 1 func into two files?
[19:15:50] <makersmasher> yeah...nm, stupid question
[19:17:01] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[19:19:13] <fizzie> TBF, that's a pretty vague comment too. It's common to use "splitting a function" to mean turning a single function into several, and in that case the new functions can certainly be distributed into different files (translation units) too. But yeah, it's probably trying to just say a specific single function definition can't be split.
[19:19:15] <fizzie> (Besides, with the preprocessor, it's not even true that you couldn't split a single function to several *files*; you just can't split one to several translation units.)
[19:19:56] <makersmasher> thanks
[19:20:02] <makersmasher> makes sense
[19:20:49] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[19:21:15] *** Joins: Fairy (~Fairy@2001:464a:4992:0:c5a4:9a37:ed3f:74d)
[19:21:50] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Client Quit)
[19:22:10] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[19:25:25] <markand> System_Error, that does not mean it's still active. there are a lot of ATMs running Windows XP and yes Windows XP is deda
[19:26:06] <System_Error> markand> I'd grant you, itz zombie invasion. Silent and quite successful, unfortunately.
[19:27:15] <markand> :-)
[19:28:09] *** Joins: seninha_ (~seninha@user/seninha)
[19:30:09] *** Quits: Alhazred (~Alhazred@86.106.74.46) (Ping timeout: 244 seconds)
[19:31:02] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[19:32:00] *** Joins: X-Scale` (~ARM@46.50.3.203)
[19:32:04] *** Joins: fsg (^^@2600:3c00::f03c:92ff:fec6:da18)
[19:32:53] *** Quits: alch (~alch@151.38.191.184) (Read error: Connection reset by peer)
[19:33:14] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[19:33:34] *** Joins: extern (~archer@141.226.58.179)
[19:35:17] *** X-Scale` is now known as X-Scale
[19:35:46] <extern> why the target clean is run here ? 
[19:35:48] <extern> https://paste.ofcode.org/N8er7zm3GBTzasV7PrfWmN
[19:35:56] <extern> Make is complicated ... 
[19:36:15] <markand> it isn't
[19:36:18] <extern> it is 
[19:36:22] <markand> make invoke the first non inference rule
[19:36:32] <markand> which is in your case clean
[19:36:42] *** Joins: alch (~alch@151.38.149.124)
[19:36:50] <extern> all: $(objects) is the first rule
[19:37:02] <markand> no, you have a space 
[19:38:10] *** Joins: Enitin (~Enitin@82.102.22.84)
[19:38:14] <extern> wierd i runned on the file sed $'s/  */\t/'
[19:38:22] <extern> run
[19:38:26] <markand> but in your case I wonder why it wasn't all.c: called if no targets are passed though
[19:40:19] <extern> ok even without that space
[19:40:25] <extern> clean: is run after all:
[19:40:53] <ckardaris> Hello, I would like some help with an issue I am having with unix sockets and polling. Any insight would be very welcome. Let me describe what I have done so far. I have created the socket with socket(AF_UNIX, SOCK_STREAM, 0), I have done bind(socket, (struct sockaddr *)&local, len), local is a sockaddr_un, and lastly I have done listen(socket,5). I know that these commands work, because I was able to
[19:40:55] <ckardaris> connect to my socket from an external program and communicate data, but I don't know if what I have done is optimal. Now I am using the socket fd and placing it a polldf structure with flag POLLIN to use with poll(). This also works correctly, because I have used the poll() function in my code and have manager to communicate with the external program on demand. My issue is the following. The
[19:40:57] <ckardaris> poll(pollfd, pollfdlen, timeout), that is part of never ending loop let's say, does not respect timeout and returns immediately. The return value is 1, but all revent values are 0 (I am polling other things as well). This is not what I am expecting reading the man page of poll and this leads to calling poll in succession and driving high the CPU usage of my machine. When I remove the socket from the
[19:40:59] <ckardaris> poll "watchlist", poll() on my other fds works as expected, respecting the timeout. Sorry for the long message, but I am still learning the ropes of IRC and haven't figured out how to split long posts. Maybe a StackOverflow question would be more valid, but I thought I'd begin from here. 
[19:41:12] <gproto23> char ptr[0]; what is it doing?
[19:41:36] <caze> Declaring a variable.
[19:41:41] <extern> let me ask that way.. how you guys learned Make ?
[19:41:57] <clarity> poorly
[19:42:28] <gproto23> ptr[atoi(argv[1])] = 0; but this?
[19:42:38] *** Joins: mahmutov (~mahmutov@37.155.47.58)
[19:42:42] <caze> gproto23: That is an expression.
[19:43:08] <gproto23> caze what is it doing?
[19:43:28] <caze> gproto23: Assigning the value 0 to an element of the array.
[19:44:23] *** Quits: pmn (~pmn@bras-base-mtrlpq4706w-grc-02-174-89-234-199.dsl.bell.ca) (Quit: WeeChat 3.3)
[19:45:19] *** Quits: extern (~archer@141.226.58.179) (Quit: WeeChat 3.3)
[19:45:35] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-1014-2f07-8b12-3b8a.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[19:45:38] <gproto23> so example if i give "123" to argv[1], then it will be ptr[123] = 0;  
[19:45:45] <caze> gproto23: btw, it's undefined to declare an array with 0 size.
[19:46:34] <caze> gproto23: Yes.
[19:46:50] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[19:47:07] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[19:47:28] <gproto23> if it was undefined what's purpose its?
[19:47:48] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[19:48:45] <caze> gproto23: I don't know. Perhaps the author is unaware.
[19:48:53] <gproto23> before this line there is fread() function. it can be related with it? 
[19:48:54] <caze> Perhaps the author doesn't care.
[19:48:59] <caze> No.
[19:49:24] *** Joins: rgrinberg (~textual@200.5.63.76)
[19:49:59] *** Quits: tbcr (~tbcr@107.13.189.161) (Killed (NickServ (GHOST command used by tbcr_!~brclark@user/tbcr)))
[19:50:16] *** Joins: tbcr_ (~tbcr@107.13.189.161)
[19:53:16] <caze> gproto23: Also, it is undefined to attempt to access an element of an array that does not exist. If the declaration is `char ptr[0]`, assuming that is intended to mean that the array has zero elements, then how could ptr[atoi(argv[1])] = 0; not be an error, no matter what the value of atoi(argv[1])?
[19:53:28] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[19:54:49] *** Joins: strajder (~strajder@user/strajder)
[19:55:56] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[19:57:25] *** Joins: Akuli (~Akuli@82-203-160-135.bb.dnainternet.fi)
[20:01:52] *** Joins: Livio (~livio@host-79-50-52-111.retail.telecomitalia.it)
[20:02:39] *** Quits: seninha_ (~seninha@user/seninha) (Quit: Leaving)
[20:02:43] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[20:07:03] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[20:07:21] <System_Error> <gproto23> ptr[atoi(argv[1])] = 0; but this? <- looks like fabled VLA to me... 
[20:07:47] *** Joins: engest (~engest@50.53.244.75)
[20:08:19] <System_Error> and looks just as safe as playing football with grenade
[20:11:10] <owensjrw> Good morning all. Am I thinking of this concept correctly const int* means the values of the int array cannot be changed. Is that correct? Or is it that the pointer to the array cannot be changed?
[20:11:17] <caze> There's nothing about a VLA there.
[20:11:53] <System_Error> oh its not declaration, my bad
[20:11:53] <caze> owensjrw: const modifies the thing to the left, unless there is nothing to the left. Then it modifies the thing to the right.
[20:12:56] *** Joins: seninha (~seninha@user/seninha)
[20:14:21] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[20:14:50] *** Joins: ckdCreations (~ckdCreati@147.55.133.141)
[20:15:20] <owensjrw> so I would want to write it int const* to protect the values of the array so they cannot be changed?
[20:15:25] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[20:17:01] <caze> owensjrw: "values"?
[20:17:09] <omegatron> ... 'const' is only a hint to the compiler ..  it's still possible to change the values (by some roundabout methods like type casting - unless the array is in some read-only memory area)
[20:17:36] *** Quits: Livio (~livio@host-79-50-52-111.retail.telecomitalia.it) (Quit: WeeChat 3.0)
[20:17:42] <caze> It's more than a hint - it's a promise.
[20:17:44] <omegatron> (and of course a hint to the fellow human who reads the source code)
[20:19:25] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:19:37] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 250 seconds)
[20:19:44] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[20:21:10] *** lukedashjr is now known as luke-jr
[20:21:11] <owensjrw> so I want to pass two arrays of to a function but I don't want the values changed --- int array1[2] = { 2, 4 }; int array2[2] = { 6 , 3 }; int* fun(int const* array1, int const* array2){Some stuff};
[20:21:30] *** topside_ is now known as topside
[20:21:53] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) ()
[20:22:29] <caze> That would work, as would int* fun(const int *array1, const int *array2){Some stuff};
[20:22:33] <owensjrw> can the vales of array1 and array 2 be changed?
[20:23:12] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[20:24:33] <omegatron> if you don't want to change the values, then don't change them ..  are you afraid the compiler would produce code, that might change randomly bits ?
[20:24:34] <owensjrw> More specifically they cant be changed through the fun(). I would say they could be changed else where because they were defined as int* array[].
[20:25:14] <caze> owensjrw: No, the function cannot change the values of the elements of the array.
[20:26:24] *** Joins: zsoltiv_- (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[20:26:49] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 256 seconds)
[20:26:51] *** zsoltiv_- is now known as zsoltiv_
[20:27:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:27:33] <owensjrw> Thank you.
[20:29:39] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:30:34] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[20:30:35] *** Joins: Linux77 (~7Linux7@186.233.178.42)
[20:36:15] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[20:37:02] *** Joins: System_Error (~SystemErr@user/systemerror)
[20:39:42] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:41:38] *** Joins: monchi (~joints@143.198.92.132)
[20:43:43] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c5a4:eaf2:add7:ad94) (Remote host closed the connection)
[20:43:49] *** Joins: neutral (~user@user/neutral)
[20:44:45] *** Joins: Inline (~Inline@2a02:908:1252:7a80:2e5d:c24e:9b07:51fd)
[20:45:17] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:c9f3:c80c:ad31:96ec) (Quit: simon323)
[20:46:29] *** Quits: squarepants (~ranuzz@47.15.22.179) (Ping timeout: 250 seconds)
[20:46:53] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[20:50:32] <gproto23> caze: source code: https://bpa.st/CARA . it is very strange. i dont understand it what is purpose there? 
[20:51:12] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[20:54:50] *** Joins: Macuser (~Macuser@216.30.159.201)
[20:57:44] <fizzie> Its purpose there is to be a bug, most likely.
[20:58:04] <fizzie> (That's clearly from one of those capture-the-flag things.)
[21:01:27] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[21:01:39] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[21:02:47] *** Joins: pulse (~pulse@user/pulse)
[21:03:37] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:07:19] *** Joins: strajder_ (~strajder@user/strajder)
[21:07:54] *** Quits: strajder_ (~strajder@user/strajder) (Client Quit)
[21:07:59] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[21:08:16] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[21:08:18] *** Joins: strajder (~strajder@user/strajder)
[21:10:03] <Bou> gproto23: by picking argv[1] carefully you can set 0 byte, relative to `char ptr[0]`, to zero 
[21:10:16] <Bou> ehh, *1 byte of course
[21:10:56] <Bou> where is that `char ptr[0]`, and what else is in that area of memory?
[21:11:12] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[21:13:27] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[21:18:13] *** Joins: squarepants (~ranuzz@2409:4063:6d16:c791:d46a:f131:69b4:f98c)
[21:19:38] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[21:19:50] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[21:20:32] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 240 seconds)
[21:22:23] *** Joins: dld (~dld@2620:6e:6000:2900:1d51:fa28:794f:615f)
[21:25:52] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[21:28:07] *** Quits: Munnu (~timo@81-197-107-130.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[21:28:27] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:30:58] <Inline> char ptr[0] == char * ptr = 0 ?
[21:31:19] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:31:40] <sham1> No. char ptr[0] is not allowed. And indeed, it's also a misleading name
[21:32:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:33:22] <Bou> non-standard, but gcc allows it (https://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html)
[21:33:26] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:33:52] <caze> gproto23: ,c11 6.7.6.2p5
[21:33:54] <candide> gproto23: http://www.iso-9899.info/n1570.html#6.7.6.2p5 [Array declarators] If the size is an expression that is not an integer constant expression: if it occurs in a declaration at function prototype scope, it is treated as if it were replaced by *; otherwise, each time it is evaluated it shall have a value greater than zero. The size of each instance of a variable length array type does not change durin... <truncated; https://0x0.st/-5JV.txt>
[21:34:06] <caze> "shall have a value greater than zero"
[21:34:24] <omegatron> if anything, the compiler could just ignore such a statement, because an array of length 0 is empty - and then throw an error like  "don't try to use an array YOU declared as being empty"  =D
[21:34:30] <sham1> gcc allows for it, clang also supports it, but you still shouldn't use it
[21:34:49] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:35:18] <caze> Bou: gcc also allows this: ,cc -w int i = 0; printf("%d %d %d %d", i, i++, i, i++);
[21:35:37] <caze> Bou: ,cc -w int i = 0; printf("%d %d %d %d", i, i++, i, i++);
[21:35:39] <candide> Bou: 2 1 2 0
[21:36:40] <Bou> sure, but this code is what gproto has to work with (like fizzie said, it's a capture-the-flag thing)
[21:37:32] <Bou> so assuming this was compiled by gcc, ptr[0] will point somewhere on the stack, and you can change some other local variable / argument relative to it
[21:37:33] <Inline> i thought a char pointer points to some random memory address not ?
[21:37:46] <Inline> aha so stack
[21:37:59] <sham1> Well an array of char is not a pointer
[21:38:00] <caze> THere is no char pointer.
[21:38:06] <Inline> and you zero out that stack part
[21:39:47] <caze> Also, don't confuse "doesn't point at any particular location" with "random".
[21:40:37] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Quit: Leaving)
[21:40:47] <sham1> Yeah, it could be very deterministic, especially if the point of this exercise is to do CTF
[21:40:55] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[21:41:09] <Inline> first time hearing of CTF
[21:41:31] <caze> Seems pretty contrived.
[21:41:40] <caze> The exercise, that is.
[21:42:35] <caze> He could have just made it char ptr[1]; and it the exploit would still work. Likely the author just doesn't know C.
[21:42:45] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[21:43:39] <caze> gproto23: Why are you looking at this code?
[21:44:05] <caze> > Seems pretty contrived.
[21:44:26] <caze> In other words, how likely are you to come across zero length arrays, in the wild?
[21:44:30] <Inline> it reads like it sets you game level back
[21:44:44] <Inline> as far as i understand
[21:44:51] <Inline> lol
[21:45:24] <Inline> so tho you have upped your level you were set back for no reason
[21:45:29] <Inline> hahaha
[21:47:16] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[21:48:36] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:51:36] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Ping timeout: 276 seconds)
[21:53:42] <Inline> it's not a zero length array
[21:53:46] <Inline> it's a memory pointer
[21:54:28] <Bou> well, to an array of zero length (in other words, nothing)
[21:54:47] <Inline> and points to argv[1] at some point and zeroes it out too
[21:55:11] <Inline> an array of 0 length has an address too
[21:55:58] <Bou> sure, it points to where a char ptr[5] would have been except there won't be 5 bytes there
[21:56:06] <Inline> right
[21:56:13] <Inline> so it's about memory pointing
[21:58:42] <Bou> where exactly these locals are on the stack is hard to say though
[21:59:04] <Bou> if you had the binary you could say "char ptr[0] is 40 bytes ahead of pwfile.pass" and use -40 as argument
[21:59:06] <caze> Inline: It's not a pointer.
[21:59:37] *** Joins: tinhatcat (~manjaro-g@2620:103:a000:2201:8e4c:af6a:e11c:11a1)
[21:59:37] <Inline> caze: even the name is pointer
[21:59:40] <Inline> ptr
[22:00:09] <caze> Inline: If the name were 'pickle', does that make it a pickle?
[22:00:21] *** Quits: tinhatcat (~manjaro-g@2620:103:a000:2201:8e4c:af6a:e11c:11a1) (Client Quit)
[22:00:39] <Inline> no, but i don't think some kind of obfuscation is going on by the look at that code
[22:01:01] <caze> Inline: Also, it's not intended to ever point to argv[1] at any point.
[22:01:51] <caze> Inline: The author doesn't know C. He wrote code for which there is no meaning.
[22:01:59] <nomagno> To what extent can you safely read memory from arbitrary parts of the operating system?
[22:02:35] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[22:02:39] <caze> 0 extent
[22:02:41] <pounce> nomagno: none?
[22:02:47] <omegatron> define 'safely'
[22:02:49] <Bou> every process gets its own address space, it's not like you can poke around and accidentally find kernel code or whatever
[22:03:23] <Inline> address space as heap and as stack
[22:03:45] <Inline> activation record etc....
[22:03:48] <caze> Inline: What about static allocation?
[22:04:01] <Inline> huh ?
[22:04:14] <Inline> that would be stack no ?
[22:04:22] <caze> Inline: Is a variable with static storage duration in heap or in stack?
[22:04:34] <Inline> stack ?
[22:04:42] <nomagno> omegatron: Safely as in 'read from this arbitrary memory address and guarantee the process won't crash from just that'
[22:05:03] <caze> Inline: But it doesn't exhibit stack semantics.
[22:05:08] <Inline> but that's not true of say structs not ?
[22:05:20] <Inline> or function pointers ....
[22:05:39] <caze> Inline: What are you asking?
[22:06:08] <omegatron> nomagno: the kernel will usually end your program if any not allowed memory access occurs
[22:06:13] <Inline> you mean the variable gets an address from the heap tho the variable itself is on the stack ?
[22:07:13] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 244 seconds)
[22:08:12] <Bou> ,cc void count() { static int i=0; i++; printf("call #%d. ", i); } int main() { count(); count(); count(); }
[22:08:15] <candide> Bou: call #1. call #2.  call #3.
[22:08:42] <nomagno> ,cc int main(){int *point=malloc(sizeof(int)); *point = 12; free(point); int *mypoint = malloc(sizeof(int)); *mypoint=13; printf("%i", point); free(point);}
[22:08:43] <Bou> clearly it's the same i surviving after each count() calls
[22:08:44] <candide> nomagno: [warning: format '%i' expects argument of type 'iâ€‹nt', but argument 2 has type 'iâ€‹nt *' [-Wformat=]] 4321696
[22:09:10] <nomagno> Well, the program ran!
[22:09:19] *** Joins: pulse (~pulse@user/pulse)
[22:09:25] <System_Error> Inline> addresses dont have notion of heap or stack as such
[22:09:36] <nomagno> ,cc int main(){int *point=malloc(sizeof(int)); *point = 12; free(point); int *mypoint = malloc(sizeof(int)); *mypoint=13; printf("%i", *point); free(point);}
[22:09:39] <candide> nomagno: 13
[22:09:44] <Inline> yes i know that's OS stuff 
[22:09:55] <sham1> It's not even OS stuff
[22:10:00] <Inline> hmm
[22:10:12] <nomagno> Well what I did is definitely UB, but the program didn't crash sooo
[22:10:28] <sham1> But it cold have
[22:10:38] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[22:10:40] <gproto23> there could be a trick at the pointer that should change behaviour of strcmp as true. our target is that should read pwfile.pass at the final in a way.
[22:10:51] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[22:10:51] <caze> Inline: https://ideone.com/sws6M5 Is the value 42 being stored in the stack or in the heap?
[22:11:06] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[22:11:45] <caze> Inline: If it's in the stack, then how is it the same value for *every* recursive call?
[22:11:46] *** Quits: squarepants (~ranuzz@2409:4063:6d16:c791:d46a:f131:69b4:f98c) (Remote host closed the connection)
[22:11:56] <Bou> gproto23: or have puts() print out the password instead of the msg_err
[22:12:08] *** Joins: squarepants (~ranuzz@2409:4063:6d16:c791:9132:cb14:1417:12e1)
[22:12:22] *** Joins: tiotags (~tiotags@user/tiotags)
[22:12:38] *** Joins: rgrinberg (~textual@200.5.63.76)
[22:12:55] <caze> Inline: Shouldn't p be initialized to 0 as in line 4 each time the function is called, if it's on the stack?
[22:13:24] <gproto23> bou: actually yes
[22:13:46] <caze> Inline: And if it's in the heap, then how does one free it?
[22:13:47] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.3)
[22:14:26] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[22:15:28] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[22:18:55] <caze> Inline: The point is that C actually has four storage durations that don't neatly fit into "stack" or "heap".
[22:19:09] <caze> ,c11 6.2.4p1
[22:19:09] <candide> http://www.iso-9899.info/n1570.html#6.2.4p1 [Storage durations of objects] An object has a storage duration that determines its lifetime. There are four storage durations: static, thread, automatic, and allocated. Allocated storage is described in 7.22.3.
[22:19:44] *** Joins: somlis (~somlis@user/somlis)
[22:27:29] *** alicef is now known as alicef_
[22:29:07] <Inline> https://craftofcoding.wordpress.com/2015/12/07/memory-in-c-the-stack-the-heap-and-static/
[22:29:54] *** alicef_ is now known as alicef_m
[22:30:06] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Ping timeout: 245 seconds)
[22:30:22] *** alicef_m is now known as alicef
[22:31:21] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[22:31:23] <caze> Inline: Here I am citing paragraphs from the C specification, and you're giving me back links to some random dude's blog?
[22:33:23] <caze> "C has three different pools of memory." - I literally just quoted you the part of the specification where it says there are actually four, and it lists them for you.
[22:33:40] <caze> But shall we defer to random blog instead?
[22:36:07] <Bou> the article skips over thread-local storage but overall it seems correct, and easier to read for a beginner than the C spec
[22:36:14] *** Joins: Ox151 (~user@user/ox151)
[22:36:21] <Inline> what is static under the hood is still the heap lol
[22:36:28] <sham1> It's not heap
[22:36:31] <sham1> It's bss
[22:36:36] <caze> Inline: Where did you read that?
[22:36:40] <Inline> hahaha
[22:37:16] <caze> "under the hood", "the stack" could really just be a linked list in "the heap"?
[22:37:22] <Ox151> hello, when creating a file descriptor with socket(), if i am making a program where it is a server and a client, does the server and client part of the porgram have to have its own file descriptor created with socket() or can I use the same one for doing both?
[22:37:58] <sham1> A client has a separate file descriptor from the accepting fd
[22:38:06] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[22:38:30] <caze> I don't think the C spec is particularly hard to read in this part - "An object has a storage duration that determines its lifetime. There are four storage durations: static, thread, automatic, and allocated."
[22:38:51] <Inline> yes and how does the allocation for the program ?
[22:38:56] <Inline> s/how/who/
[22:39:38] <caze> The program isn't an object. Only objects are allocated.
[22:39:58] <Ox151> sham1: ok thank you, i thought the client side only calls connect() which in its first parameter is a socket. 
[22:40:25] <Ox151> and the server accepts() with the first parameter being a socket and returns the connection socket of the client
[22:41:16] <Ox151> sham1: wait... how did your comment change. i am crazy. i read your original reply as something else......... to early.
[22:42:47] *** Joins: mad_enz (~mad_enz@2605:8d80:6a0:a30c:5360:8625:d5a7:2a4e)
[22:42:55] <sham1> A server's filedescriptor listen()s and accept()s connections, and the client connect()s. Clearly these things are exclusive and shouldn't be done with the same file descriptor
[22:43:20] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[22:43:30] *** Joins: extern (~archer@141.226.58.179)
[22:43:48] *** Joins: pmn (~pmn@bras-base-mtrlpq4706w-grc-02-174-89-234-199.dsl.bell.ca)
[22:44:09] <pmn> https://github.com/frevib/io_uring-echo-server/blob/07c59d1d0d7d602fb19955ab08d19a034a5318ae/io_uring_echo_server.c#L149
[22:44:33] <pmn> what's that? why not just bid = 0; ?
[22:45:05] *** Quits: Haxxa (~Haxxa@122.199.46.64) (Quit: Haxxa flies away.)
[22:45:27] <sham1> Maybe there's someting in the bid that is significant
[22:45:28] <pmn> .flags of struct cqe are __32
[22:45:31] *** Quits: squarepants (~ranuzz@2409:4063:6d16:c791:9132:cb14:1417:12e1) (Ping timeout: 245 seconds)
[22:45:38] <sham1> In the higher half
[22:46:56] <pmn> sham1: right, i was under the impression that .flags was __u16
[22:47:21] *** Joins: Haxxa (~Haxxa@122.199.46.64)
[22:48:18] <extern> what is the largest off topic channel you guys know ?
[22:48:46] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[22:48:56] <apotheon> off the top of my head, the largest probably only has seven people in it
[22:49:12] <apotheon> I'm not in a lot of explicitly off-topic channels.
[22:49:36] <extern> i mean a channel that you can talk about anything
[22:50:04] <extern> i was once in a good channel however i didn't saved it in my autojoin and i forgot the name
[22:50:30] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:50:59] <apotheon> extern: Any off-topic channel is going to have some culture about it, if it's not essentially empty, so . . . in practice there'll still be some things you wouldn't want to bring up.
[22:51:24] <extern> i agree
[22:51:27] <extern> just give me a channel
[22:51:43] <apotheon> I suspect this channel isn't a great place to discuss off-topic channels.  Send me a PM.
[22:52:09] <nomagno> #linux-offtopic is pretty big, by sheer force of being a branch-off of one of the largest channels on Libera
[22:52:09] <nomagno> 2XX members, I think
[22:52:16] <pmn> sham1: i see why i was confused; so .flags is __u32, bid is int; but he's passing the bid as argument to add_provide_buf() which takes __u16. i would guess that it's for making sure bid has big enough storage?
[22:52:46] <sham1> Perhaps
[22:53:17] <extern> nomagno: it have 66 ppl
[22:53:39] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[22:53:43] <pmn> pmn: those flags, i think, are meta-user-data from library's point of view (libiouring) so it's just for him to keep track of buffer_id's but i don't see how
[22:53:49] <nomagno> Oh, I am looking at it from Matrix. It must have quite a few people bridged over
[22:53:57] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[22:54:01] <pmn> sham1: ^
[22:55:33] *** Joins: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr)
[22:57:17] <Bou> off-topic channel? well there's ##programming :^)
[22:57:26] <apotheon> har
[22:58:22] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 244 seconds)
[23:00:03] <nomagno> https://ruslanspivak.com/eofnotchar/
[23:00:08] <nomagno> This article is a revelation.
[23:00:35] <sham1> I mean, that's why fgetc returns an int
[23:01:03] <caze> nomagno: Literally Chapter 1 of K&R.
[23:01:05] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[23:01:22] *** Joins: de-facto (~de-facto@user/de-facto)
[23:02:36] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:c8ef:20:697e:a56b) (Ping timeout: 245 seconds)
[23:03:13] <nomagno> Do I look like I want to read a book about a programming language? Yes, I am definitely at the point where I can't progress further without more intrinsic understanding
[23:06:29] <omegatron> and it shows how utterly broken many "old" functions are .. this question/problem arises so often with newbies because they don't get it ..  the problem would never have existed, if fgetc   would look like     char  fgetc ( FILE * stream, int * isEOF )     if the (primitive) return value of a function has a mix between possible values and error codes as set, you are doing it wrong
[23:07:24] *** Joins: Stx (stx@libera/staff/stx)
[23:09:58] *** Quits: extern (~archer@141.226.58.179) (Quit: WeeChat 3.3)
[23:10:05] <apotheon> Holy crap, the Go code in that is notably uglier than the C code.  I somehow expected it to be more similar.
[23:10:18] <apotheon> (re: ruslanspivak thing)
[23:10:48] *** Joins: extern (~archer@141.226.58.179)
[23:12:21] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:13:13] *** Quits: Ox151 (~user@user/ox151) (Remote host closed the connection)
[23:13:43] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[23:14:55] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:16:09] *** Joins: steve_ (~steve@ool-182c2b80.dyn.optonline.net)
[23:17:43] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:18:35] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 250 seconds)
[23:20:30] *** Joins: arashatt (~user@2.180.158.129)
[23:21:38] <arashatt> Hi
[23:22:08] *** Quits: mad_enz (~mad_enz@2605:8d80:6a0:a30c:5360:8625:d5a7:2a4e) (Ping timeout: 268 seconds)
[23:22:33] <arashatt> I am a second year computer engineer
[23:23:15] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[23:23:52] <nomagno> Hello!
[23:24:25] <arashatt> why we should avoid reading books by Zed Shaw?
[23:24:33] *** Joins: System_Error (~SystemErr@user/systemerror)
[23:24:47] *** Parts: pmn (~pmn@bras-base-mtrlpq4706w-grc-02-174-89-234-199.dsl.bell.ca) (WeeChat 3.3)
[23:25:05] *** Joins: seninha (~seninha@user/seninha)
[23:25:13] <apotheon> arashatt: because some of those Zed Shaw books are not good ways to learn things
[23:25:57] <apotheon> arashatt: That seems to be especially true of C, where an exclusively exploratory approach to learning the language will almost certainly get your code in a lot of trouble at some point if you keep using it.
[23:26:51] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[23:26:53] <arashatt> but he acclaims to know how to write secure c and it seems really interesting
[23:28:34] <apotheon> Many people claim to know how to write secure C.  Many of them are misinformed or lying.
[23:28:58] <apotheon> I'm not even sure I can write secure C, though my C is probably notably more secure than average.
[23:29:10] <apotheon> (judging by the code I've seen from others)
[23:29:37] <sham1> Secure C is really difficult
[23:29:51] <sham1> Well, it takes a lot of care
[23:30:24] <floatcomplex> all code should follow best practices to avoid creating new openings
[23:30:27] <floatcomplex> but
[23:30:46] <floatcomplex> most code does not need to be written with the care required for code that will handle secreta
[23:30:50] <floatcomplex> secrets
[23:31:25] <floatcomplex> and people who write primarily that kind of code should probably not implement game engines
[23:31:42] <floatcomplex> because they'd be crap
[23:32:05] <arashatt> are memory leaks very serious in c? how can we avoid them?
[23:32:12] *** Quits: alch (~alch@151.38.149.124) (Read error: Connection reset by peer)
[23:32:20] <apotheon> They should still write *secure* code, even if it isn't *security* code.
[23:32:29] <apotheon> (re: games)
[23:32:35] <aosync> one can avoid memory leaks with discipline
[23:32:39] *** Quits: extern (~archer@141.226.58.179) (Quit: WeeChat 3.3)
[23:32:43] <apotheon> arashatt: step one -- avoid off-by-one errors
[23:32:50] <floatcomplex> apotheon: yeah that's what i meant by the first thing i said
[23:32:58] <apotheon> There are many factors involved in avoiding memory leaks.
[23:33:06] <apotheon> floatcomplex: okay, cool
[23:33:26] <floatcomplex> don't fuck up on purpose. but code that intends to handle secrets SHOULD be held to a different standard
[23:33:33] <sham1> We have tools like Valgrind and ASan that help with making code better
[23:34:22] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:34:51] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[23:35:07] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[23:35:34] <apotheon> We should still strive to write code for which ASan doesn't report any problems.
[23:35:37] *** Joins: System_Error (~SystemErr@user/systemerror)
[23:35:42] <floatcomplex> of course
[23:35:47] <floatcomplex> that's a given
[23:36:00] <arashatt> sham1 thanks
[23:36:04] <apotheon> depends on the audience; some people may not realize that
[23:36:10] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:36:11] <floatcomplex> but code can be correct and complete and do its job properly, and still leak secrets
[23:36:19] <floatcomplex> if it's handling secrets
[23:36:24] <floatcomplex> not all code has to worry about that
[23:36:25] <apotheon> e.g. people who ask very beginner-like questions and don't know how important it is sometimes to refer to the standard
[23:36:32] <sham1> Of course one of the questions one needs to ask especially with greenfield projects is whether using C is necessary for the project at all. Because there are situations where it actually is a necessity to actually do C for the thing
[23:36:55] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[23:37:06] <apotheon> sham1: Use the best language for the job.
[23:37:12] <sham1> Yeah, basically that
[23:37:12] <apotheon> general-purpose rule
[23:37:15] *** Joins: alch (~alch@151.36.220.196)
[23:37:31] <nomagno> Memory leaks in C are a bit of a goofy issue, that is easily fixed nowadays by keeping track of that little number valgrind shows you at the end of each run
[23:37:44] <apotheon> Unfortunately, that has to be a fuzzy use of "language", where the *strict* use of "language" would give a different answer.
[23:38:02] <apotheon> SML would be a much more widely "right language for the job" if not for some issues with the ecosystem.
[23:38:11] <apotheon> same with Scheme
[23:38:50] <floatcomplex> what i'm saying is you can correctly not leak any memory, and still leak secrets. avoiding that is a whole discipline that is largely orthogonal to whether the c code is correct
[23:39:16] <floatcomplex> and for code not handling secrets, it doesn't justify the effort
[23:39:45] <arashatt> floatcomplex:like saving password directly without encrypting
[23:39:50] *** Joins: serbest (~serbest@user/serbest)
[23:39:52] <arashatt> in sourcecode
[23:40:22] *** phrosty is now known as scalablecory
[23:40:35] <apotheon> Yeah, passwords in the source code are fucking awful.
[23:40:48] <sham1> Or not zeroing memory, although IIRC sometimes compilers like to optimize that code out...
[23:40:57] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:40:59] <nomagno> Oh definitely, most of my game networking has the great verification system of the client saying "Hey I'm Jake, lemme control Jake's car pls" and the server nodding
[23:41:00] <apotheon> sham1: There are functions for that.
[23:41:02] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[23:41:06] <caze> arashatt: Primarily because Zed confuses C with something else.
[23:41:13] <apotheon> sham1: My go-to solution is a function in libsodium.
[23:41:20] <apotheon> (for portability)
[23:41:33] <nomagno> It is a feature, not a bug. You can annoy your friend by plugging in a device to their session and messing up their inputs!
[23:42:05] <nomagno> sham1: calloc
[23:42:09] <floatcomplex> no
[23:42:16] <sham1> nomagno: no
[23:42:30] <sham1> Calloc doesn't help when you want to clear your buffer before you free it
[23:42:41] *** Joins: NEYi (~NEYi@109.251.216.38)
[23:42:48] <sham1> Since if it contained like a secret key or a password or something, that can be an exploit opportunity
[23:42:59] <floatcomplex> memset_s, and/or use a libc that clears all or part of the buffer on free()
[23:43:20] <sham1> Is memset_s guaranteed not to get optimized out
[23:43:30] <floatcomplex> yes that's why it exists at all
[23:43:33] <sham1> Huh, it is
[23:43:35] <sham1> Nice
[23:43:36] <apotheon> If I don't care about portability because the program has no use outside of OpenBSD, I'll just use explicit_bzero().
[23:44:11] <apotheon> floatcomplex: memset_s is not portable
[23:44:16] <floatcomplex> apotheon: no because you can't trust gcc not to optimize it out
[23:44:26] <floatcomplex> independent of libc
[23:44:35] <apotheon> floatcomplex: What do you mean "no"?
[23:44:40] <apotheon> No what?
[23:44:42] <sham1> Well explicit_bzero also exists in FreeBSD and also with glibc
[23:44:54] <apotheon> explicit_bzero() is guaranteed to not get optimized out on OpenBSD
[23:44:55] <floatcomplex> which no
[23:45:09] <apotheon> the "no" to me
[23:45:34] <floatcomplex> does gcc know to not optimize out explicit_bzero?
[23:45:42] <floatcomplex> it's not up to libc
[23:45:43] <sham1> Yes
[23:45:51] *** Joins: brad_mssw|mac (~bhouse@2601:344:4100:b490:f587:c9e:d283:4644)
[23:45:53] <nomagno> If you know the code you are writing is non-portable, there is nothing wrong with it. However sometimes programs that have no implementation-specific features use a lot of very implementations defined features, and that's annoying
[23:45:56] <caze> Provided you use the compiler in base.
[23:45:56] <apotheon> depends on how you implemented explicit_bzero
[23:46:19] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:d966:d0e8:ae89:2c81) (Ping timeout: 250 seconds)
[23:46:28] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[23:46:33] *** Joins: derpadmin (~Anonymous@love2.be.sexy)
[23:46:43] <apotheon> . . . and yeah, if you use some janky-ass foreign compiler, it can fuck up stuff that ships with your OS, so good fucking luck.
[23:46:53] *** Joins: f1refly (~f1refly@p2e50ba3d.dip0.t-ipconnect.de)
[23:47:12] <apotheon> Once again, for portability, use something like libsodium.
[23:48:36] *** Quits: derpadmin (~Anonymous@love2.be.sexy) (Client Quit)
[23:49:55] <apotheon> Maybe nobody should be using GCC for most purposes, anyway.
[23:50:16] <sham1> Indeed, it seems that openssh can define explicit_bzero according to memset_s at least in the compat area
[23:50:40] *** Joins: euandreh (~euandreh@2804:14c:65c9:5161:2115:7c1d:3a3c:1b92)
[23:50:57] *** Joins: Enitin (~Enitin@82.102.22.85)
[23:51:00] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[23:51:22] <apotheon> I guess, technically, a sufficiently pathological compiler (aka "sufficiently smart compiler") could just rewrite whole chunks of your code to do wildly different things.
[23:51:58] <sham1> Well clang can do a lot of that kind of stuff, it can rewrite a lot of the kinds of weird bit manipulation idioms into single instructions sometimes on AMD64
[23:52:24] <sham1> Which is of course a consequence of the CISC-y nature of it and thus it sometimes has these singular instructions to do a thing
[23:54:05] <apotheon> I'm not sure how much it actually makes the code's outward behavior different, though.  I haven't run into problems with well-managed Clang.
[23:54:11] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[23:54:32] <apotheon> (e.g. don't increase optimization levels to the point where it's likely to break)
[23:55:17] <floatcomplex> anyway i kinda assume that openbsd zeros memory when you free it because that sounds like the kinda thing they would do
[23:55:28] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[23:55:39] <sham1> It very much sounds like an OpenBSD thing to do, yes
[23:55:42] *** Quits: euandreh (~euandreh@2804:14c:65c9:5161:2115:7c1d:3a3c:1b92) (Quit: WeeChat 3.3)
[23:55:53] <floatcomplex> and i'm not writing any code where i have to do more than assume
[23:56:55] *** Joins: shivesh (~shivesh@user/shivesh)
[23:57:23] <apotheon> I'm planning to rewrite my password manager, so I kinda need to do more than assume.
[23:58:30] *** Papa_ is now known as papa
[23:59:15] *** Joins: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net)
