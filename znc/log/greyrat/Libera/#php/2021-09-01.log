[00:16:48] *** Quits: genom (~g@37.214.77.199) (Remote host closed the connection)
[00:24:10] *** Quits: montybanksnyc (~montybank@pool-71-127-199-18.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[00:40:02] *** Quits: Ducki (~ducki@user/ducki) (Ping timeout: 245 seconds)
[00:40:37] *** Joins: Ducki (~ducki@user/ducki)
[00:44:30] *** Joins: gp5st (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net)
[00:51:50] *** Joins: Mr-Snick (mr-snick@gateway/vpn/protonvpn/mr-snick)
[01:00:06] *** Quits: memoryleak (~memorylea@77-58-142-250.dclient.hispeed.ch) ()
[01:01:10] *** Quits: Akimb (~Akimb@86.100.13.100) (Ping timeout: 240 seconds)
[01:04:16] *** Quits: magla (~gelignite@55d413e5.access.ecotel.net) (Quit: Stay safe!)
[01:07:47] *** Quits: g0z (gauze@entropy.tmok.com) (Ping timeout: 240 seconds)
[01:28:44] *** Joins: judah (~judah@rrcs-74-87-190-155.west.biz.rr.com)
[01:36:56] *** Joins: olle (~olle@i5E86669C.versanet.de)
[01:37:06] <olle> Did anyone in this channel contribute to php-src?
[01:38:18] <AllenJB> Technically I have - altho it was a 1 line RFC (Set PDO error mode to exceptions by default)
[01:40:45] <olle> AllenJB: :)
[01:45:46] *** Quits: judah (~judah@rrcs-74-87-190-155.west.biz.rr.com) (Quit: leaving)
[02:02:30] <MrBurns> Im trying to preselect option on a list based on variable that contains 0, 1 or 2 but it's not working. Any ideas?: https://pastebin.com/5E1e2upm
[02:03:43] <__adrian> you'd need to look at the value of $type_err and $type in order to make any reasonable guesses
[02:04:00] <__adrian> also "not wokring" isn't very helpful. what do you expect? what happens instead?
[02:04:21] <Byteflux> Does value="" on <select> even work? Wouldn't it need to be a `selected` attribute in the <option> element?
[02:04:31] <__adrian> ^
[02:04:54] <__adrian> https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option
[02:07:43] <MrBurns> option value="0" is always preselected. Im trying to preselect the option value in $type. f.ex if there is "2" stored in $type the option value="2" should be pre selected
[02:08:11] <__adrian> see Byteflux's comment
[02:08:38] <__adrian> also note you'd still need to know what the value of those variables IS if you need to troubleshoot more.
[02:08:59] <Byteflux> and __adrian's link, which would point you to something along the lines of: <option value="herp" selected>derp</option>
[02:10:58] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (Ping timeout: 252 seconds)
[02:11:18] <Byteflux> i'd guess the reason selection state is set on the option is because select can support multiple selected options when it is <select multiple>
[02:12:02] <MrBurns> I know that the variable contains value 2. The 'selected' attribute looks promising
[02:13:17] <__adrian> MrBurns: so might be easier to see: https://3v4l.org/pGBDd
[02:13:53] <__adrian> as mentioned,  <select value=""> is not the right answer, but do you see now why it's empty?
[02:15:08] <Byteflux> <?= ftw :P
[02:16:44] *** Parts: olle (~olle@i5E86669C.versanet.de) ()
[02:17:15] *** Quits: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl) (Ping timeout: 244 seconds)
[02:27:46] *** Joins: yuters (~yuters@23-233-111-146.cpe.pppoe.ca)
[02:41:45] <MrBurns> <option value="2" <?php if($type=="2") echo selected;?>>option3</option> , this works but seems quite hacky :P
[02:43:07] <Byteflux> MrBurns: these are a couple of approaches you could use: https://3v4l.org/aJ1XZ
[02:45:22] <Byteflux> there are many things you could do, instead of just going with the more direct approach that might make things a bit nicer.
[02:50:54] <MrBurns> Byteflux: your first approach worked perfectly for me. TY
[02:52:16] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 256 seconds)
[02:54:49] <__adrian> MrBurns: the second example (foreach) deserves more attention.
[02:55:41] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:59:04] *** Quits: gp5st (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net) (Remote host closed the connection)
[02:59:28] *** Joins: gp5st (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net)
[03:05:14] *** Quits: yuters (~yuters@23-233-111-146.cpe.pppoe.ca) (Quit: Leaving...)
[03:06:20] *** Quits: gp5st (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net) (Ping timeout: 244 seconds)
[03:12:53] *** Joins: WishBoy (~WishBoy@user/wishboy)
[03:22:35] *** Quits: brentaarnold (~brentaarn@24.112.61.90) (Ping timeout: 250 seconds)
[03:23:10] *** Joins: brentaarnold (~brentaarn@24.112.61.90)
[03:31:15] *** Joins: gp5st (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net)
[03:34:52] *** Quits: de-facto (~de-facto@user/de-facto) (Read error: Connection reset by peer)
[03:36:40] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.111)
[03:36:49] *** Joins: de-facto (~de-facto@user/de-facto)
[03:57:29] *** Quits: gp5st (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net) (Ping timeout: 244 seconds)
[04:03:08] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:04:19] *** Quits: pmercado (~pmercado@186.107.39.248) (Ping timeout: 252 seconds)
[04:05:44] *** Joins: gp5st (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net)
[04:06:24] *** Quits: genomc (uid245282@id-245282.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[04:33:57] <CoJaBo> So, I've now hit yet another and one of the more unique roadbumps in my quest to strict_types all the thingz
[04:34:40] <CoJaBo> This app has all of its modules as executable AND includes, which....... you apparently can't do with strict_types o_O
[04:35:02] <__adrian> this is a faulty quest
[04:35:23] <__adrian> also i don't know what you mean by "all of its modules as executable AND includes"
[04:36:36] <CoJaBo> __adrian: What should I do instead of strict_types then lol
[04:37:04] <CoJaBo> __adrian: And by that, I mean that you can run them in cli as ./thing.php, as well as include('thing.php')
[04:37:07] <__adrian> i'm not telling you to do exclusively one or the other
[04:37:11] <__adrian> in fact the opposite
[04:37:33] <CoJaBo> The latter causes the #! line to be printed, which breaks if you try to make it use strict_types lol
[04:37:35] <__adrian> i'm telling you it's good in some cases, and not always in others
[04:37:52] <__adrian> um... what?
[04:38:35] <CoJaBo> declare(strict_types=1); has to be the first line, but it suddenly finds itself not to be if you include a file with a #!/bin/php line
[04:38:56] <__adrian> ah
[04:39:08] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[04:39:09] <CoJaBo> In a minimal test case, this line actually does get printed, even tho these modules suppress it somehow
[04:39:26] <__adrian> the #! is not suppressed by php
[04:39:42] <CoJaBo> Yeh, the code suppresses it somehow, but I don't know where
[04:39:57] <__adrian> no, it's not suppressed at all. it's _read_ by your shell, which then gives the _remainder_ of the file to php.
[04:40:24] <CoJaBo> Yeh, but that doesn't apply when include()ing it, which is the problem I've just cracked my skull open on
[04:41:24] <CoJaBo> I've added strict_types to preliminarily see what busts, but surprisingly it fails on line #1, which is kind of hilarious
[04:41:32] <Byteflux> You are aware that anything outside of <?php ?> tags is *output* right?
[04:41:39] <CoJaBo> Byteflux: Yeh, that's the problem lol
[04:42:04] <Byteflux> That is PHP's templating nature, it's intentionally designed to be embedded.
[04:42:10] <CoJaBo> But it only becomes output when includeing it, which in turn only became a problem when I tried to add strict_types
[04:42:10] <Byteflux> Just do something different
[04:42:14] <__adrian> CoJaBo: when php includes a file that starts with a #!, the #1 is 100% output
[04:42:21] <__adrian> it's not suppressed or skipped
[04:42:29] <__adrian> it literally shows up in the terminal
[04:42:48] <CoJaBo> __adrian: It's not printed when I run these (but of course is if I write my own test)
[04:43:00] <__adrian> "these" what
[04:43:19] <Byteflux> If you feed the script through your shell, sure. Your shell strips it
[04:43:26] <Byteflux> Therefore, it's not output, because it's been removed by your shell.
[04:43:34] <__adrian> Byteflux:  they're describing something else
[04:43:38] <CoJaBo> __adrian: The main app that includes these files never prints those lines; I assume it's suppressing them with ob_* or something, which is hilarious
[04:43:52] <Byteflux> That is possible too.
[04:44:02] <__adrian> if that's what's happening, ...ok
[04:44:05] <__adrian> pretty janky
[04:44:13] <CoJaBo> We have reached Peak Jank
[04:44:38] <__adrian> so to your actual problem, seems like you have two solutions
[04:44:52] <__adrian> (1) don't strict_types these (do you have any real need to?)
[04:45:01] <__adrian> (2) remove the existing jank
[04:45:12] <__adrian> or possibly (3) both
[04:45:21] <CoJaBo> Dejankification is gonna be annoying in this case
[04:45:53] <CoJaBo> We're using strict_types due to a preponderance of errors with types
[04:46:08] <__adrian> that doesn't solve anything
[04:46:18] <CoJaBo> Better for it to crash more than to corrupt data
[04:46:28] <__adrian> why not actually fix it?
[04:46:39] <CoJaBo> The crashes can at least by caught by coverage testing
[04:46:48] <Byteflux> Runtime strict typing is *highly* overrated.
[04:46:52] <__adrian> if "crash fast" is your solution, then just  throw new Exception("I'm Out");
[04:46:52] <CoJaBo> Can't fix what you can't find lol
[04:46:59] <Byteflux> Just leave your type hints and use static analysis tools.
[04:47:07] <Byteflux> Forget about runtime type enforcement.
[04:47:07] <__adrian> ok, so this is your strategy to find problems?
[04:47:18] <__adrian> look into static analysis instead.
[04:48:01] <__adrian> this will find things strict_types might not, especially considering you'd have to find some way to exercise every possible code path.
[04:48:09] <CoJaBo> One of them; we do use static analysis, but it tends to get pretty lost sometimes because the code just sucks and really needs to be burnt to the ground
[04:48:37] <Byteflux> I find that unlikely.
[04:48:44] <CoJaBo> We're using coverage testing to execute all lines; covering all possible paths is harder tho =D
[04:49:55] <__adrian> it sounds like you're throwing out static analysis simply because it shows you a lot of problems
[04:50:12] <__adrian> there are strategies to deal with very-bad code, you know.
[04:50:27] <__adrian> configure your static analysis to show you particular issues at a time.
[04:51:08] <__adrian> will you have to work on the code a bit? maybe add @annotations, etc.? probably.
[04:51:14] <__adrian> this helps, not hinders.
[04:52:41] <Byteflux> What tools are you using? Ones available to your IDE/editor such as PHPStorm or VSCode should be already pretty good, but there's also PHP Stan and Psalm.
[04:52:54] <Byteflux> Both can be configured to your needs.
[04:53:50] <Byteflux> I think PHPStan and Psalm even has support for generic type hinting using docblocks.
[04:54:08] <CoJaBo> Psalm is one of the ones we're using; the coverage tool is an in-house one, but it's pretty decent, and lightweight enough to run in prod because who has time for dev servers =D
[04:55:00] <CoJaBo> We tend to get a lot of false-positives with Psalm, and unfortunately on the problems that we want to focus on lol
[04:56:05] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[04:56:33] <Byteflux> False positives such as? Are you sure it's not something you can't just configure for what you need?
[04:56:54] <Byteflux> Relying on runtime type checking is just not at all ideal, you want to catch these issues at "compile time"
[04:57:00] <__adrian> like i said, there's going to be work involved
[04:57:12] <__adrian> it's the road, not a roadblock
[04:57:56] <CoJaBo> The problem is this mess takes data from a lot of weird sources, and trying to add checks to all of those is just nightmarish. Runtime checks catch a good number of that, as the actual bug usually occurs when that data is passed to some function that isn't accepting that type. In strict_types, that crashes; without, it just converts that value to something insane and carries on
[04:58:08] <__adrian> e.g., if you need to add a @param annotation, it does far more than just kill the false positive
[04:59:23] <__adrian> tbh that last one sounds like you're trying to avoid writing input validation
[04:59:34] <CoJaBo> In this case, yes
[05:00:21] <Byteflux> This would be unforgivable in an actually strongly typed language.
[05:00:30] <Byteflux> You would be forced to confront this issue or your code simply wouldn't compile.
[05:00:34] <CoJaBo> The app assumes that data that doesn't come from the user will always be valid, but that's a dumb assumption
[05:00:36] <Byteflux> You should treat PHP in the same way.
[05:00:50] <Byteflux> If you really want to enforce types, put in the work to detect these issues at compile time.
[05:00:53] <__adrian> also means you're committing to the "hard fail" approach permanently
[05:01:00] <CoJaBo> Yeh, strict_types gets me 0.1% of the way there, which is an improvement =D
[05:01:03] <Blondie101010> Byteflux: if you prefer Java, do Java, but please don't make PHP become as ugly :P
[05:01:24] <__adrian> you can't control input, so if you don't valiadte it, then you're just doubling down on never actually fixing things.
[05:02:07] *** Quits: christianPHP (~christian@190.232.168.110) (Quit: Client closed)
[05:02:10] <CoJaBo> __adrian: It took about 2 years to write a reasonable amount of validation on the last app; and that project probably will never reach 100% completion lol
[05:02:30] <CoJaBo> This stuff was all written in a mad sprint
[05:02:45] <__adrian> i'm not looking for an explanation
[05:02:52] <Byteflux> Blondie101010: What do you mean? I'm just saying that if you actually care about enforcing types, you should do it properly at compile time instead of relying on strict_types to raise the issue whenever because you're too lazy to do it the proper way :P
[05:03:07] <CoJaBo> I know what needs done; I just don't have the resources to do so, so shortcuts it will be
[05:03:19] *** Quits: goddard (~goddard@user/goddard) (Remote host closed the connection)
[05:03:26] <CoJaBo> This latest problem is killing me because there, isn't really a shortcut, and it's such a stupid problem to boot
[05:03:33] <__adrian> this is not solid reasoning
[05:03:41] *** Joins: goddard (~goddard@user/goddard)
[05:03:43] <__adrian> but in any case, you do what you want
[05:03:48] <CoJaBo> Like, who in their right mind thought it was a good idea to include() a CLI script omg.
[05:03:51] *** Quits: goddard (~goddard@user/goddard) (Client Quit)
[05:03:57] <__adrian> you're not going to convince me of anything, but you don't have to, either.
[05:06:01] <CoJaBo> Mind you, this application supported PHP 4.1 until last week 🤢
[05:06:32] <CoJaBo> We've mercifully now upgraded to, er....... 7.2 :/
[05:07:23] <Byteflux> Could just whip up a script that goes through all of these hybrid exec'able/includable scripts, strips the shebang, creates a new file called say {$name}_cli.php with the shebang line, then includes {$name}.php from there.
[05:07:44] <Byteflux> well, actually dunno if that helps :P
[05:07:49] <CoJaBo> Byteflux: That's uh, what I'm coding up now.
[05:07:57] <CoJaBo> Lazy minds think alike, I guess
[05:08:08] <__adrian> no, that's a legit thing to do
[05:08:28] <__adrian> maybe not exactly like that, but if it needs to be compatible with existing usage, sure
[05:08:37] <CoJaBo> I'm fully expecting it to blow up for an inconceivable reason I've not yet discovered
[05:08:55] <__adrian> just note that the point of doing it is _not_ to allow you to add strict types in place of input validation.
[05:09:11] *** Joins: christianPHP (~christian@190.232.168.110)
[05:09:51] <CoJaBo> __adrian: I don't know if we'll have time to add proper validation to this; mostly we just want to focus on putting it in the hotspots that are actually feeding in bad data
[05:09:54] *** Joins: ferdna (~ferdna@user/ferdna)
[05:11:01] <CoJaBo> Byteflux: Basically, I'm moving all the code to name_real.php (with the #! stripped, and strict_types added), where name.php has the #! line and just includes name_real.php
[05:11:11] <CoJaBo> It doesn't work, of course, tho I'm not sure why
[05:11:25] <Byteflux> you're lucky PHP has strict_types at all that lets you get away with this atrocity because other dynamically typed languages with static typing features do not typically have runtime type enforcement :P
[05:11:42] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.111) (Quit: WeeChat 3.1)
[05:13:27] <__adrian> "no time"...
[05:13:29] <CoJaBo> Byteflux: We finally upgraded the requirement from 4.1 not because 4.1 is obsolete, but because the latest PHP version from that line will segfault at random times
[05:14:21] <__adrian> CoJaBo: this sort of context is unnecessary
[05:14:22] <CoJaBo> I made the unfortunate promise to maintain this if they allowed us to bump the version requirement. Mistakes.. were made
[05:14:32] <__adrian> it doesn't affect the advice you'll get in any way
[05:14:52] <CoJaBo> (Yeh, I'm just mentining this is not the worst atrocity committed here =D)
[05:14:53] <Byteflux> I suppose it provides insight into the people who are making the decisions :P
[05:15:00] <__adrian> (well, it might distract from your actual question, but ;)
[05:15:07] <CoJaBo> Byteflux: Those people, should be committed too
[05:15:10] <__adrian> we don't need the insight, though
[05:15:25] <__adrian> CoJaBo might need that insight, be ...he already has it
[05:15:47] <__adrian> this is what i mean when i say "we're not telling you what to do"
[05:16:31] <Byteflux> Presumably the time it would take to do things correctly is not CoJaBo's decision to make, but yes we've already said what the right course of action is and if it's not being done out of laziness then shame on you, but if it's higher ups saying you can't spend the time required to do that then whatever.
[05:17:12] <CoJaBo> Byteflux: That attempt failed because it lists the modules by basically listing the contents of that directory. So, shortcut fails again <_<
[05:17:26] <CoJaBo> I'll probably just have to patch all of the like, 17 places that do that
[05:18:04] <Byteflux> Eh? I'm confused. You just write a script that traverses a directory (recursive or not, dunno, doesn't matter) and identifies these files by the presence of a shebang at line 1
[05:18:44] <__adrian> alternatively, add a script at the beginning of each file that collects and logs inputs
[05:18:49] <Byteflux> But also find any scripts that are including them too and perform any necessary transformations there, too.
[05:19:03] <__adrian> then you suddenly have a quick way of deciding what validations to make
[05:19:30] <Byteflux> Right if you have no way to immediately know what to expect whether by testing or documentation, then you should be logging the inputs.
[05:19:33] <CoJaBo> Byteflux: Oh, I meant the app itself does this. My script worked fine; but it doubled the number of files there, so now the app thinks those others are modules, includes them twice, and this somehow breaks stuff. Fun times =D
[05:19:37] <__adrian> and that's assuming you have no docs or understanding upfront
[05:20:03] <CoJaBo> I can't move them to another dir, because the configs are all referenced from __DIR__, because Lord Satan wrote this
[05:20:05] <__adrian> in the end this is quicker than the shortcuts
[05:20:18] <Byteflux> Okay so it sounds like you have control over how the app determines what is a module and isn't.
[05:20:21] <Byteflux> So... y'know.
[05:20:26] <__adrian> you spend more time in the next month, but far less time in the next three years
[05:20:40] <CoJaBo> Byteflux: Yeh, but it's duplicated in a lot of places, so it's gonna suck lol
[05:21:01] <Byteflux> Refactoring often does. At least you've identified a problem point in the app that needs refactoring :P
[05:21:07] <__adrian> ^
[05:21:30] <__adrian> make tiny, tiny steps
[05:21:44] <CoJaBo> __adrian: There are quite a few hundred, maybe even thousand, places that just pull random JSON data in and/or extract it, from files, databases, other scripts, etc, and it might be many many more than that
[05:21:49] <__adrian> turn all of those config paths into CONFIG_DIR . "/config";
[05:22:04] <__adrian> that'll take an hour or so, and it makes all kinds of things possible
[05:22:36] *** Quits: christianPHP (~christian@190.232.168.110) (Quit: Client closed)
[05:22:37] <Byteflux> Logging type conformity of your inputs against particular functions/methods could be fairly easily done with some reflection, too :)
[05:22:48] <__adrian> with a narrow focus it's not that hard. it's tedious, but it's not hard.
[05:23:15] <CoJaBo> __adrian: That's one of the main things I plan to do, but the scale of this is insane. __DIR__ isn't the only way these scripts get the current, containing, or config directory. Miss one, and it subtly explodes
[05:23:36] <__adrian> if you miss one, nothing should happen
[05:23:41] <__adrian> because you did nothing to it
[05:23:50] <Byteflux> Correct, you aren't changing behavior.
[05:23:53] <__adrian> ^
[05:24:01] <__adrian> refactor === no changes in behavior
[05:24:03] <Byteflux> You are just deduplicating.
[05:24:10] <__adrian> only changes in implementation.
[05:24:22] <__adrian> nicer code that does _EXACTLY_ the same thing.
[05:24:48] *** Parts: ash_worksi (~ash_m@user/ash-m/x-3292451) ()
[05:24:52] <Byteflux> In this instance, your refactored solution should work in the exact same way all you are doing is minimizing all the duplication of how modules are loaded or whatever.
[05:25:23] <Byteflux> The first step is to have a refactored solution that you can start inserting in place of all the duplicated logic.
[05:26:08] <Blondie101010> it depends on the size and value of the app
[05:26:43] <CoJaBo> Byteflux: Yeh, but that still means I can't move files to other directories til all that refactoring is done, so that doesn't solve my dumb problem (I have to patch 17 dir-listing functions instead, which hopefully will be feasible in the immediate-term)
[05:26:45] <Blondie101010> it could be more cost-effective to just extract the business logic and rewrite it
[05:26:59] <CoJaBo> Blondie101010: It's huge in both regards
[05:27:11] <__adrian> these suggestions don't really. we're weighing one approach against another. the effort:value proposition is not dependent on how big the project is.
[05:27:48] <CoJaBo> Yeh, but the time cost becomes infeasible at a certain point lol
[05:27:51] <Byteflux> CoJaBo: I'm not going to say when is the best time to do that refactoring, just pointing out that it's perhaps not as crazy a task as you might be imagining it to be--As in, if you do it correctly, nothing should break as a side effect just because you "missed a spot"
[05:27:59] <__adrian> your solution ALSO invests that time
[05:28:22] <Byteflux> But you should make note of it and go back to it when the opportunity is there.
[05:28:27] <__adrian> less upfront (but higher risk upfront) but more over time.
[05:28:43] <Byteflux> Things are only going to get worse if you keep accumulating this technical debt without paying any of it off.
[05:29:25] <CoJaBo> Byteflux: I've wanted to refactor this thing for literally years, but was held back by not wanting to re-learn PHP 4.1 rofl
[05:29:47] <__adrian> CoJaBo: i think you're confusing "refactor" with "rewrite"
[05:29:57] <__adrian> "refactor" is not a big undertaking.
[05:30:00] <Byteflux> Refactoring is a highly incremental process.
[05:30:03] <Byteflux> You do it in baby steps.
[05:30:20] <__adrian> it's literally as little as one line at a time, whenever you happen to notice.
[05:30:26] <Byteflux> The idea of rewriting a massive app is a trap. Don't fall into that trap.
[05:30:30] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:44] <Blondie101010> it depends
[05:31:04] <CoJaBo> I just mean, I couldn't start any of those baby steps until this week when we inally dropped support for 4.1. I'd write new code, and it would just bomb because PHP 4.1 is missing that syntax/function/etc
[05:31:06] <__adrian> like the __DIR__ problem. next time you open a file and see that, replace that path with a project-root-relative one.
[05:31:24] <__adrian> nah, you could have done that in php 4
[05:31:46] <CoJaBo> __adrian: Not without gettins nausious
[05:31:48] <Blondie101010> but I don't consider the __DIR__ to be a bad approach
[05:31:50] <Byteflux> I started learning PHP around 4.1, it's not *that* bad :)
[05:32:02] <CoJaBo> Byteflux: lol, same
[05:32:16] <CoJaBo> And then I used it or like.. twenty years
[05:32:17] <__adrian> blondie: it's great in a lot of cases, but not all. talking about paths to config files, here.
[05:32:51] <__adrian> some things should be based off of __DIR__ and some things should be based off other places
[05:33:02] <Blondie101010> sure :)
[05:33:23] <__adrian> my point was, whatever "HUGE PROBLEM" you have, do it a tiny bit at a time.
[05:33:38] <Blondie101010> I thought it was normal to refer to __DIR__ . '/../../../etc/something.dat'
[05:34:00] <CoJaBo> Today's Huge Problem is to stop random records turning into the word "Array" :P
[05:34:03] <__adrian> you need to have way more .. than that
[05:34:11] <__adrian> you know, to make sure you get all the way to the root
[05:34:18] <Byteflux> Using __DIR__ for stuff like that... in different parts of the app, can get noisy and obscure.
[05:34:28] *** Joins: vlm (~vlm@user/vlm)
[05:34:31] <Blondie101010> CoJaBo:  don't echo arrays
[05:34:43] <__adrian> mm. input validation.
[05:35:06] <__adrian> do it in one place.
[05:35:38] <Byteflux> Sounds like a lot of the problems with this app is just copy/pasted code everywhere
[05:35:39] <CoJaBo> __adrian: If strict_types doesn't kill this bug, I'm hurling the server into a volcano
[05:35:55] <Blondie101010> that is not troubleshooting
[05:36:01] <__adrian> it won't kill the bug
[05:36:05] <__adrian> it will kill the application
[05:36:09] <__adrian> you said so yourself
[05:36:13] <CoJaBo> Byteflux: Not even just copy/paste, but the same thing written in different ways dozens to hundreds of times
[05:36:46] <Blondie101010> CoJaBo:  can you get traces of when the problem is happening with some kind of dump/log?
[05:36:46] <Byteflux> Right, large chunks of logic just kinda duplicated everywhere with minor changes to each usage
[05:37:04] <CoJaBo> Yep
[05:37:10] <Blondie101010> do that
[05:37:18] <Byteflux> __adrian already suggested that earlier :P
[05:37:20] <CoJaBo> I like to call this the Fractal Design Pattern
[05:37:30] <Blondie101010> then we agree
[05:38:23] <Blondie101010> CoJaBo:  I haven't seen your code base, but I think I have a pretty good idea of what it looks like
[05:38:32] <CoJaBo> Blondie101010: We can't tell where along the line it gets corrupt, and also haven't succeeded in figuring out how to reproduce it. Hence this initial hail-mary attempt at locating it with blunt force
[05:38:48] <Byteflux> Typical PHP spaghetti straight out of 2005
[05:38:51] <Byteflux> Probably.
[05:38:53] <__adrian> also just for awareness  https://3v4l.org/eJHDb
[05:39:02] <CoJaBo> Yeh. If you code PHP, you've see one of these before =D
[05:39:22] <__adrian> strict_types is not your silver bullet
[05:39:39] <Byteflux> But also, Notice on 7 and Warning on 8. You can log those :)
[05:39:42] <Blondie101010> CoJaBo:  do you know the flow of this application?
[05:39:47] <CoJaBo> It fixed almost all of the issues the last app had
[05:39:57] <Blondie101010> or are you just hired to do a quick patch?
[05:40:16] <CoJaBo> Blondie101010: Ideally quick patch, but it aint gonna be quick lol
[05:40:23] <Blondie101010> ok
[05:40:40] <Blondie101010> I hope you're paid by the hour
[05:40:57] <Blondie101010> otherwise you're skrewed
[05:41:26] <Byteflux> No doubt they suddenly were in need of a new feature after not touching the app for almost a decade and once that feature is done they'll go back to ignoring the big problems with the app, making each subsequent attempt to make "quick changes" slower than the last.
[05:41:47] <Byteflux> :P
[05:42:22] <CoJaBo> Byteflux: That's close to what happened; the larger the input data, the higher the odds that it will segfault. It got to a point that it's not really functional anymore
[05:42:56] *** Joins: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl)
[05:43:12] <Blondie101010> please don't try to even imagine justifying staying on PHP 4
[05:43:34] <CoJaBo> Somehow upgrading to 7.2 has increased the frequency of data corruption tho; but I can't fully rule out the upgrade as we obviously had to spawn a whole new server in the process
[05:44:01] <CoJaBo> My best guess it it might be some kind of race condition, but where is anyone's guess
[05:44:05] <Blondie101010> but making the app compatible with PHP 7 does not make it better, and blind patching will certainly make it worse
[05:44:09] <Byteflux> Yeah I'd want a good hourly rate for a task like this... I'd at least be able to take comfort in that my suffering is being converted to big monies :)
[05:44:22] <CoJaBo> Byteflux: Yep
[05:45:13] *** Quits: onizu (uid373383@id-373383.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[05:45:54] *** Quits: bobdobbs (~user@150.107.174.237) (Ping timeout: 250 seconds)
[05:45:58] <CoJaBo> Blondie101010: The segfault thing is what at long last forced us to drop 4.1, since we can't hope to fix that xD
[05:46:01] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[05:46:39] <Blondie101010> I know and that's a disgusting story
[05:47:25] <CoJaBo> We have a patched 5.x to fix *a* segfault, so this isn't even the first time we've injected TNT into a corpse to try to get it going again
[05:48:22] <Blondie101010> how long have you worked there?
[05:53:13] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.111)
[05:58:48] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[06:27:05] *** Quits: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl) (Quit: Client quit)
[06:29:09] *** Joins: jeffrey (~jeffrey@2001:1c00:b11:8800:6035:eeff:fe81:bf1c)
[06:32:52] *** Quits: jeffrey (~jeffrey@2001:1c00:b11:8800:6035:eeff:fe81:bf1c) (Client Quit)
[06:35:05] *** Joins: jeffrey (~jeffrey@2001:1c00:b11:8800:6035:eeff:fe81:bf1c)
[06:43:51] *** Quits: gp5st (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net) (Ping timeout: 244 seconds)
[06:46:43] *** Joins: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net)
[06:48:43] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Ping timeout: 252 seconds)
[06:48:43] *** shokohsc8 is now known as shokohsc
[06:52:05] <__adrian> i've got a data structure and two validation methods: one that validates an individual property, and another that validates to object as a whole. would you name one validate() and the other something else? both something else?
[06:59:32] <__adrian> $d->isValid($property, $value) and $d->validate() ?
[07:01:11] *** Joins: bobdobbs (~user@2406:5a00:f001:c600:fc0c:c58c:8856:b07f)
[07:03:41] <Byteflux> isValid() seems appropriate if the result is strictly a boolean. validate() on the entire object seems appropriate as you're performing a series of validations and presumably returning a more complex result than a simple boolean, perhaps an array of booleans
[07:04:20] <Byteflux> but I wouldn't call it isValid() if you're actually modifying state
[07:04:35] *** Joins: zro (~zro@user/zro)
[07:04:47] <__adrian> doesn't modify state
[07:04:56] <Byteflux> like say, if (!$d->isValid($property, $value) { /* must access $d state for details on validation errors */ } <-- in this example I'd call it something else.
[07:05:00] <__adrian> but you're right about needing to be strictly boolean, and it's not
[07:05:19] <__adrian> they return ? ValidationException
[07:05:33] <__adrian> (boom! surprise)
[07:05:46] <Byteflux> yeah i'd reserve is*() naming for strictly boolean returns
[07:05:54] <__adrian> yep.
[07:06:11] <Byteflux> so then you still have the issue where you need to distinguish method names between single property vs whole object :P
[07:06:22] <zro> mime_content_type should work on a base64 encoded string, right? I'm going cross eyed and cant figure out why im getting wildy varrying results. http://sprunge.us/PA7wqi?php
[07:06:38] <Byteflux> in Java this is a non-issue because a method with the signature validate(String, String) is not the same method with the signature validate() :)
[07:06:53] <Byteflux> so both can co-exist :D
[07:07:19] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[07:07:55] <Byteflux> but yeah probably would just call it validateProperty() or something
[07:08:06] <Byteflux> if you decide to go the exception route
[07:08:40] <__adrian> zro: i don't know about that assumption
[07:08:47] *** Quits: bobdobbs (~user@2406:5a00:f001:c600:fc0c:c58c:8856:b07f) (Ping timeout: 245 seconds)
[07:09:40] <Byteflux> zro: I don't see anywhere in the docs for mime_content_type() that a base64 string is understood.
[07:09:44] <__adrian> re: local vs. prod: you probably don't have the same magic files
[07:10:10] <Byteflux> The function signature clearly states that it accepts a resource or a string filename
[07:10:23] <Byteflux> So you could probably create a resource from the base64 string
[07:10:23] <zro> it works locally on 8.0.10, and on another server w/ 7.1.33 but not on the same server w/ 8.0.9
[07:10:26] <Byteflux> And then pass it in that way
[07:10:30] <__adrian> define "works"
[07:10:40] <zro> returns image/jpeg
[07:10:55] <__adrian> see, i would not expect that to return image/jpeg.
[07:11:31] <__adrian> but in any case, i don't see anything in the docs that implies you can use it that way
[07:11:41] <zro> fair enough
[07:11:47] <__adrian> and i've never known/assumed it would
[07:12:12] <zro> im not sure why i did this. its some wacky legacy code im pulling thru time :-/. I always hate past me....
[07:12:31] <__adrian> why can't you check the content-type _before_ you encode it?
[07:12:44] *** Joins: Rockwood (~Rocky@user/rocky)
[07:13:25] <zro> im trying to figure out why thats in there like this im not sure
[07:13:34] <zro> its validating image uploads from psr7 streams
[07:13:53] <zro> i think i wanted to validate it before moving it out of tmp, and so im doing that rather than get the tmp name i think?
[07:14:28] <__adrian> is it actually "like this"? i.e., it reads the stream into a string first?
[07:15:11] <Byteflux> $f = fopen("data://text/plain;base64,$b64"); var_dump(mine_content_type($f)); fclose($f);
[07:15:17] <Byteflux> I'm guessing this would work
[07:15:30] <__adrian> ^ probably, that's kinda what i was thinking
[07:15:40] <Byteflux> fopen('...', 'r')
[07:15:47] <Byteflux> Don't forget the 'r', not sure if it's defalut?
[07:15:50] <zro> ya it does this before passing the data around fpor some reason: 'data://;base64,' . base64_encode((string) $file->getStream());
[07:16:05] <__adrian> that seems odd
[07:16:43] <zro> it does
[07:16:57] <zro> i think me in a passed life was maybe drunk
[07:16:58] <zro> no idea
[07:17:18] <zro> never caused a problem till today tho :-/
[07:18:02] <Byteflux> mime_content_type() at least according to docs is only going to work on two kinds of input. a filename or a readable resource of the raw data (as if you did fopen('file.jpg'))
[07:18:23] <Byteflux> You can achieve that with base64 encoded data using the approach I showed above
[07:18:39] <Rockwood> good morning :) everyone
[07:18:54] <Byteflux> But it's also possible that your data:// is wrong too
[07:19:13] <Byteflux> You might *need* it to be data://text/plain;base64,... (notice the missing part?)
[07:20:10] <Byteflux> I suspect that PHP will recognize the data:// protocol
[07:21:16] <Byteflux> Usually functions that accept a "filename" for reading or writing purposes also support the various stream protocols, it just defaults to "file://" in the absence of an explicit protocol.
[07:21:51] <zro> im trying it now Byteflux
[07:24:55] <Byteflux> Although technically data://;base64 is valid according to the data: RFC, maybe PHP requires an explicit media type like text/plain or something (dunno, just guessing)
[07:28:37] <Byteflux> Alternatively try without the slashes too... so "data:;base64,$b64"
[07:29:40] <__adrian> const a = [1,2]; const b = [3,4]; const ab = [...a,...b];  // makes me happy
[07:29:44] <zro> o
[07:30:01] <__adrian> without the slashes isn't going to work
[07:30:03] <zro> ok, so i guess trying that showed me an error that made sense.
[07:30:21] <Byteflux> Supposedly PHP supports data: without slashes, but haven't tried it myself
[07:30:24] <zro> and then enabling allow_url_fopen made it all work
[07:30:48] <__adrian> ahhhhhhhh
[07:30:50] <__adrian> ok
[07:30:52] <Byteflux> Nice :)
[07:31:00] <__adrian> well,
[07:31:06] <__adrian> sure whatever
[07:31:14] <zro> when i did fopen(data://...) it gave me the obvious error
[07:31:43] <zro> still prolly need to go back and refactor that madness, but at least its not gonna hold up migration to 8 if I just set that
[07:32:07] <Byteflux> Yeah, just making wild guesses in the absence of any useful information. No idea why the mime function wasn't reporting it
[07:33:00] <zro> well, at any rate, thx __adrian and Byteflux !
[07:33:05] <__adrian> welcome
[07:34:28] <Byteflux> zro: btw
[07:34:48] <Byteflux> zro: You should be able to just pass $file->getStream()->detach() directly instead of going through this base64 thing
[07:35:27] <Byteflux> var_dump(mime_content_type($file->getStream->detach()));
[07:35:33] <zro> ya, this whole image validation library thing I cooked up in a fever dream sometime in the past years needs to be completely re thought out i think :-/
[07:36:28] <zro> i think once you detatch tho, you can't $file->moveTo(); after, can you ?
[07:37:46] <Byteflux> Well I think the file already exists so even if you lose access to the read/write abilities of the StreamInterface, you may still be able to move the file
[07:38:09] <Byteflux> It just exists as a temporary file, if I remember...
[07:39:06] <Byteflux> Oh but the docs do say that the behavior differs based on environment.
[07:39:18] <Byteflux> I guess in some SAPIs, it relies on the stream
[07:41:58] <Byteflux> Still, doing this whole base64 thing feels pretty dirty. There's probably a better approach :P
[07:42:42] <zro> im sure, I've gone thru a zillion different ways to try to deal with files, and I basically hate all of them
[07:47:55] *** Joins: guidoc (~guido@host-82-55-254-59.retail.telecomitalia.it)
[07:54:22] <Byteflux> zro: This is all I could come up with haha: $fp = fopen('php://memory', 'r+'); fwrite($fp, (string) $file->getStream()); rewind($fp); $result = mime_content_type($fp); fclose($fp);
[07:54:25] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[07:54:26] <Byteflux> Way more verbose :P
[07:54:52] <Byteflux> But does avoid having to needlessly encode/decode
[07:55:02] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[07:58:10] <Byteflux> But also, you could just not do the base64: $data = 'data://;,' . $file->getStream();
[07:58:50] <Byteflux> Why bother if you don't actually need to encode it :)
[08:05:02] *** Quits: jeffrey (~jeffrey@2001:1c00:b11:8800:6035:eeff:fe81:bf1c) (Quit: Client quit)
[08:18:56] <Byteflux> Oh nevermind, I was testing with SVGs which is why it worked without encoding. Still need to encode binary data :P
[08:20:11] *** Joins: christianPHP (~christian@190.232.168.110)
[08:23:37] *** Joins: genomc (uid245282@id-245282.stonehaven.irccloud.com)
[08:34:56] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:42:25] <Rockwood> oops frontend is more harder
[08:44:16] *** Quits: zro (~zro@user/zro) (Ping timeout: 252 seconds)
[08:45:16] *** Joins: NeoCron (~NeoCron@p200300c4cf4a8400dde9c021b1b0ad3f.dip0.t-ipconnect.de)
[08:45:19] *** Joins: zro (~zro@user/zro)
[08:57:37] <CoJaBo> TIL json_decode() didn't even exist until PHP 5.2
[08:58:09] *** Quits: NeoCron (~NeoCron@p200300c4cf4a8400dde9c021b1b0ad3f.dip0.t-ipconnect.de) (Remote host closed the connection)
[09:11:38] <Rockwood> are you sure about PHP version?
[09:20:15] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:26:46] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[09:37:30] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[10:00:56] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Quit: Leaving)
[10:01:35] *** Joins: kerunaru (~Jmcb@64.red-79-146-101.dynamicip.rima-tde.net)
[10:07:25] *** Quits: kerunaru (~Jmcb@64.red-79-146-101.dynamicip.rima-tde.net) (Ping timeout: 244 seconds)
[10:21:20] *** Joins: kerunaru (~Jmcb@64.red-79-146-101.dynamicip.rima-tde.net)
[10:32:37] *** Quits: kerunaru (~Jmcb@64.red-79-146-101.dynamicip.rima-tde.net) (Ping timeout: 252 seconds)
[10:37:18] *** Joins: Akimb (~Akimb@82-135-197-171.static.zebra.lt)
[10:38:03] *** Joins: kerunaru (~Jmcb@64.red-79-146-101.dynamicip.rima-tde.net)
[10:38:04] *** Quits: guidoc (~guido@host-82-55-254-59.retail.telecomitalia.it) (Quit: WeeChat 3.2)
[10:45:21] *** Joins: DevAntoine (~DevAntoin@78.196.234.32)
[10:50:42] *** Quits: christianPHP (~christian@190.232.168.110) (Quit: Client closed)
[11:01:33] *** Joins: guidoc (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f)
[11:08:24] *** Quits: fkrauthan (~fkrauthan@user/fkrauthan) (Quit: ZNC - https://znc.in)
[11:09:00] *** Joins: fkrauthan (~fkrauthan@user/fkrauthan)
[11:21:20] *** Joins: undefined_bob (~undefined@user/undefined-bob/x-5411918)
[11:30:40] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 240 seconds)
[11:43:05] *** Quits: ironsoba (~z@user/ironsoba) (Ping timeout: 250 seconds)
[11:57:02] *** Joins: memoryleak (~memorylea@77-58-142-250.dclient.hispeed.ch)
[12:00:44] *** Quits: memoryleak (~memorylea@77-58-142-250.dclient.hispeed.ch) (Client Quit)
[12:00:59] *** Joins: memoryleak (~memorylea@77-58-142-250.dclient.hispeed.ch)
[12:10:35] *** Joins: linux_daemon (~hristijan@62.162.180.193)
[12:10:44] <linux_daemon> hello everyone! i have a link that downloads a file from another place. is there any way i can see the original filename and extension that comes from the download link? through the browser, it downloads the file properly
[12:11:58] <TinoDidriksen> Only if you forward that information in your code.
[12:12:46] <linux_daemon> i have: $url = "someurlhere"; fopen($url, 'r'); .
[12:12:59] <linux_daemon> how can i get that info TinoDidriksen ?
[12:14:28] <biberu> linux_daemon: content-disposition
[12:15:05] <TinoDidriksen> Given fopen() a context that remembers the headers from the request.
[12:15:10] <biberu> linux_daemon: if your browser shows another name when downloading from the same url it's probably in that header
[12:15:36] <biberu> why are you using fopen?
[12:16:39] <linux_daemon> biberu: it was in the code previously, so i went with it, and inspect the response headers
[12:22:33] <linux_daemon> biberu: there is no Content-disposition header in the response
[12:22:48] <TinoDidriksen> Is there in someurlhere?
[12:22:50] <biberu> linux_daemon: can you share the url?
[12:25:18] <linux_daemon> i cant share the url unfortunately. the issue is , from the browser what i saw in the network tab, it first goes to the link, then gets redirected to aws, which sends content-type: application/octet-stream and downloads a csv file
[12:26:40] <biberu> linux_daemon: did you check each redirect's url and response headers?
[12:26:55] *** Joins: delboy1978uk (~delboy197@109.132.42.202)
[12:27:08] <linux_daemon> not sure how to do that in php
[12:27:09] *** Quits: delboy1978uk (~delboy197@109.132.42.202) (Client Quit)
[12:27:10] <biberu> linux_daemon: you can use e.g. curl from the command line to dump all intermediate response headers and urls
[12:27:33] *** Joins: delboy1978uk (~delboy197@202.42-132-109.adsl-dyn.isp.belgacom.be)
[12:27:56] <biberu> linux_daemon: i'd start with the terminal, once you know what to code it'll be faster :)
[12:33:21] *** Quits: DevAntoine (~DevAntoin@78.196.234.32) (Remote host closed the connection)
[12:45:44] <linux_daemon> damn aws, with curl as i see i can get the redirect url now, but if i set: curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); in the header it returns temporary content type text/html
[13:03:03] *** Joins: DevAntoine (~DevAntoin@195.101.183.21)
[13:05:29] *** Quits: linux_daemon (~hristijan@62.162.180.193) (Quit: Leaving.)
[13:13:52] *** Joins: joo (~joo@fsf/member/joo--)
[13:15:22] *** Quits: guidoc (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f) (Quit: WeeChat 3.2)
[13:18:46] *** Joins: linux_daemon (~hristijan@62.162.180.193)
[13:19:57] <linux_daemon> biberu: curl helped with following the location, but, in the response i still dont see the filename or its extension
[13:21:35] <TinoDidriksen> Dump all resonse headers from the whole request chain.
[13:21:42] <biberu> ^
[13:23:23] <linux_daemon> are we looking for content-disposition header? cause that one is non existent
[13:24:28] <biberu> linux_daemon: grep the output for the filename
[13:26:15] <linux_daemon> i can dump the response, or its data, but all i get back is Content-Type: application/octet-stream
[13:28:53] <linux_daemon> and a little bit unrelated question - do you work with docker?
[13:30:12] <TinoDidriksen> If there is no response header with a filename, then there is no original filename.
[13:30:46] <TinoDidriksen> Lots of people here work with Docker, but be mindful that this channel is for PHP - #docker exists for non-PHP Docker questions.
[13:31:52] <linux_daemon> oh, ok, i will ask there. anyways, there is no response header with a filename. how does the browser then knows to download the file - what name to give it?
[13:32:29] <TinoDidriksen> Check the browser's F12 tools for the download. It'll also show all headers in the request.
[13:32:50] <TinoDidriksen> You need to dump response headers, not response data.
[13:33:02] <TinoDidriksen> And headers for all requests, not just the final redirected one.
[13:33:57] <linux_daemon> let me check all response headers
[13:35:21] <linux_daemon> in the redirect , there is location header that seemingly has the name of the file
[13:35:43] <arash> Hello, is there anyway to search in multi-dimensional array and count the result?
[13:37:11] <linux_daemon> yeah, the Location header has the name of the file, but in a little different form than the download. so then, how does the browser knows how to extract the filename?
[13:41:02] <TinoDidriksen> How different? There's a LOT of heuristics on how to form filenames.
[13:44:44] <linux_daemon> the filename is copied multiple times in the url, separated by /
[13:44:53] *** Quits: delboy1978uk (~delboy197@202.42-132-109.adsl-dyn.isp.belgacom.be) (Quit: delboy1978uk)
[13:46:51] *** Joins: delboy1978uk (~delboy197@202.42-132-109.adsl-dyn.isp.belgacom.be)
[14:09:52] *** Quits: bodiccea (~bodiccea@user/bodiccea) (Remote host closed the connection)
[14:14:41] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[14:37:36] <qwedfg> what would be good framework to start new website for hotel?
[14:44:40] <AllenJB> That's not a simple question to answer. You should draw up a rough spec of what you want the site to do, then look at available options, focusing on ones you're already familiar with.
[14:45:05] *** Joins: Northwoods (~Northwood@202.14.122.173)
[14:54:57] <qwedfg> I am not familiar with anything as I do other stuff now
[14:55:31] <qwedfg> but hotel is big hotel and there needs to be gallery, promotions, popups, messages, tour, comments etc and nice admin for that
[14:55:55] <qwedfg> pretty much standard but it's not good for wordpress I guess so I look for some framework to start ASAP so I have time to learn it
[14:56:13] <TinoDidriksen> There are services that provide hotel sites, with booking and everything. Use one of those.
[14:56:52] <qwedfg> yes but I want to make money and do it myself instead of paying to someone else
[14:57:22] <TinoDidriksen> Then look through https://google.com/search?q=open+source+hospitality
[14:57:25] <qwedfg> is cakephp still up to date?
[14:57:54] <qwedfg> but that's not for the management of hotel but for marketing
[14:58:09] <qwedfg> and no reservations, those are on booking.com
[14:58:42] <biberu> are you looking for a framework or e.g. a CMS? did you gather requirements?
[14:58:51] <TinoDidriksen> So just marketing? Then Wordpress will do fine.
[15:03:46] *** Joins: MaxFrames (~MaxFrames@user/maxframes)
[15:03:48] <MaxFrames> hello
[15:04:39] <MaxFrames> I need some help; a bit of context first: I'm trying to move an intranet website to a new server; the old website was using an uber ancient version of php (I think 5.x), now I am trying to make it work with php 8
[15:06:03] <MaxFrames> this code which worked on the old site, now returns "PHP Warning:  Undefined array key" for $_SERVER['PHP_AUTH_USER'] and $_SERVER['PHP_AUTH_PW']
[15:06:55] <MaxFrames> code here: https://pastebin.com/EtA17vaA
[15:07:57] <TinoDidriksen> MaxFrames, https://www.php.net/manual/en/features.http-auth.php#114877
[15:08:36] <MaxFrames> forgot to mention I'm running IIS 8.5
[15:08:47] <TinoDidriksen> Well, there's probably something similar for IIS.
[15:09:10] <TinoDidriksen> You need to forward the HTTP Basic Auth headers to PHP.
[15:09:11] <MaxFrames> old server=same IIS version but ancient php
[15:11:15] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[15:14:03] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.111) (Quit: WeeChat 3.1)
[15:15:05] <MaxFrames> another error is "PHP Fatal error:  Uncaught Error: Call to undefined function mysqli_connect() "
[15:15:34] *** Joins: bobdobbs (~user@150.107.174.237)
[15:16:16] <arash> what is wrong with this PDO query? https://0bin.net/paste/NVTEjNAu#U1ocgl7Nid8MtPN12WDqN8qwe8Ms9AU2t-3CcdJjKPP
[15:17:39] <TinoDidriksen> arash, exec() should take an array ['ip' => $ipfrompost, ...] and not whatever %{}% is supposed to do.
[15:18:56] <TinoDidriksen> MaxFrames, optional PHP modules need to be enabled. You didn't enable mysqli.
[15:19:41] <MaxFrames> right, sorry
[15:21:44] *** Joins: guidoc (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f)
[15:22:39] <arash> TinoDidriksen, i changed the code but still getting "Fatal error: Uncaught PDOException: SQLSTATE[HY000]: General error: 2031 " error
[15:23:53] <TinoDidriksen> Oh, I see what you meant by %% - you wanted them for the LIKE comparison. I misread %{}% as some templating engine. Well, you still need the key-value. What is the code now then?
[15:24:31] *** Joins: zibby15 (~androirc@user/zibby15)
[15:24:33] <TinoDidriksen> arash, also, you want ->prepare() instead of ->query()
[15:27:04] *** Quits: linux_daemon (~hristijan@62.162.180.193) (Quit: Leaving.)
[15:27:15] <arash> TinoDidriksen, that was the problem. fixed. thank you
[15:31:59] <MaxFrames> all sorted for now, thanks
[15:32:25] <MaxFrames> (I'd also forgotten to create the local users on the server so authentication was denied anyway)
[15:34:04] *** Joins: mikemike (sid13297@id-13297.tooting.irccloud.com)
[15:37:29] *** Joins: WishBoy (~WishBoy@user/wishboy)
[15:55:37] *** Joins: LucaTM (~LucaTM@user/lucatm)
[15:57:05] *** Quits: guidoc (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f) (Quit: WeeChat 3.2)
[16:18:09] *** Joins: daoumilseitek (~daoumilse@164.96.146.77.rev.sfr.net)
[16:19:42] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[16:30:07] *** Joins: guidoc (~guido@host-95-239-249-185.retail.telecomitalia.it)
[16:43:58] *** Quits: delboy1978uk (~delboy197@202.42-132-109.adsl-dyn.isp.belgacom.be) (Quit: delboy1978uk)
[16:44:42] *** Quits: MaxFrames (~MaxFrames@user/maxframes) (Quit: It's time you know I gone troppo.)
[16:49:31] *** Joins: Anticom (~Anticom@87.190.49.75)
[16:49:35] <qwedfg> well, wordpress is not suitable because it will pack number of features wordpress lacks
[16:50:01] <qwedfg> mainly the user-friendly administration of content, it requires wordpress capable person and it must know the plugins well and deal with the website
[16:50:15] <qwedfg> it is meant to be administered by the reception and marketing team
[16:59:11] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Quit: Lost terminal)
[17:05:10] <Blondie101010> qwedfg:  for installation and customization, sure you'd want someone a bit more computer savy than a secretary, but not by much, but if your secretary and marketing team can't write a proper article, you need to replace them with people 50-70 years younger
[17:05:53] <daoumilseitek> many young people don't know how to use a computer it's not just age
[17:06:17] <Blondie101010> fine, replace them with qualified people
[17:06:35] <daoumilseitek> didn't follow the conversation but i know some plugins can fully replace the admin panel
[17:06:42] <Blondie101010> it's quite a basic skill for a secretary and marketer
[17:07:36] <daoumilseitek> giving totally different look, so it should be possible to make it more user friendly
[17:14:37] *** Quits: brentaarnold (~brentaarn@24.112.61.90) (Ping timeout: 252 seconds)
[17:21:23] <biberu> that could cut both ways if the new interface has a smaller market penetration
[17:22:29] *** Quits: Akimb (~Akimb@82-135-197-171.static.zebra.lt) (Read error: Connection reset by peer)
[17:23:04] *** Joins: pmercado (~pmercado@186.107.39.248)
[17:23:20] <daoumilseitek> example : mainwp
[17:27:25] * FloridaMan wrings hands with evil grin in preparation for Laracon
[17:28:25] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[17:47:49] *** Joins: delboy1978uk (~delboy197@d51a46db4.access.telenet.be)
[17:49:19] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 244 seconds)
[18:08:52] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[18:13:45] *** Quits: delboy1978uk (~delboy197@d51a46db4.access.telenet.be) (Quit: delboy1978uk)
[18:14:04] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: The Lounge - https://thelounge.chat)
[18:14:46] *** Joins: delboy1978uk (~delboy197@d51a46db4.access.telenet.be)
[18:15:05] *** Joins: kenoba (~kenoba@user/kenoba)
[18:17:24] *** Quits: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) (Quit: Bye)
[18:21:47] *** Joins: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667)
[18:24:31] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: The Lounge - https://thelounge.chat)
[18:25:04] *** Joins: kenoba (~kenoba@user/kenoba)
[18:27:00] *** Quits: kenoba (~kenoba@user/kenoba) (Client Quit)
[18:27:44] *** Joins: kenoba (~kenoba@user/kenoba)
[18:28:33] *** Quits: kenoba (~kenoba@user/kenoba) (Client Quit)
[18:29:07] *** Joins: kenoba (~kenoba@user/kenoba)
[18:29:41] *** Quits: kenoba (~kenoba@user/kenoba) (Remote host closed the connection)
[18:30:51] *** Joins: inoas (~ionas@aftr-37-201-194-213.unity-media.net)
[18:31:20] *** Quits: Anticom (~Anticom@87.190.49.75) (Quit: Leaving)
[18:37:17] *** Joins: kenoba (~kenoba@user/kenoba)
[18:41:44] *** Quits: kenoba (~kenoba@user/kenoba) (Client Quit)
[18:43:02] *** Joins: kenoba (~kenoba@user/kenoba)
[18:47:42] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 244 seconds)
[18:51:14] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: The Lounge - https://thelounge.chat)
[18:52:34] *** Joins: kenoba (~kenoba@user/kenoba)
[18:54:03] *** Joins: MrTrick (uid181961@id-181961.highgate.irccloud.com)
[18:56:57] *** Joins: Junxter (~Junxter@114.221.66.47)
[18:59:04] *** Quits: d3sync (~d3sync@130.43.80.239.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[19:04:41] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 248 seconds)
[19:06:34] *** Joins: jetchisel (jetchisel@user/jetchisel)
[19:09:53] *** Joins: keiserr (~keiserr@user/keiserr)
[19:12:38] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:15:01] *** Quits: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) (Quit: Bye)
[19:19:58] *** Joins: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667)
[19:23:44] *** Joins: junktext (~junktext@77.247.181.216)
[19:25:51] *** Quits: delboy1978uk (~delboy197@d51a46db4.access.telenet.be) (Quit: delboy1978uk)
[19:26:39] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[19:27:13] *** Quits: inoas (~ionas@aftr-37-201-194-213.unity-media.net) (Ping timeout: 252 seconds)
[19:36:01] *** Quits: kerunaru (~Jmcb@64.red-79-146-101.dynamicip.rima-tde.net) (Ping timeout: 252 seconds)
[19:39:45] *** Joins: d3sync (~d3sync@130.43.80.239.dsl.dyn.forthnet.gr)
[20:01:34] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[20:02:37] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 244 seconds)
[20:02:42] *** Joins: judah (~judah@rrcs-74-87-190-155.west.biz.rr.com)
[20:08:23] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:118e:c9c6:5d52:3b82)
[20:10:37] *** Quits: zibby15 (~androirc@user/zibby15) (Quit: Leaving.)
[20:26:32] *** Joins: genom (~g@37.214.77.199)
[20:34:43] *** Quits: DevAntoine (~DevAntoin@195.101.183.21) (Remote host closed the connection)
[20:34:59] *** Joins: DevAntoine (~DevAntoin@195.101.183.21)
[20:35:05] *** Quits: DevAntoine (~DevAntoin@195.101.183.21) (Remote host closed the connection)
[20:38:59] *** Joins: Akimb (~Akimb@86.100.13.100)
[20:39:03] *** Joins: Pixi_ (~Pixi@user/pixi)
[20:41:28] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 252 seconds)
[20:42:20] *** Joins: kerunaru (~Jmcb@64.red-79-146-101.dynamicip.rima-tde.net)
[20:46:58] *** Quits: kerunaru (~Jmcb@64.red-79-146-101.dynamicip.rima-tde.net) (Ping timeout: 252 seconds)
[20:51:13] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[20:53:46] *** Joins: gp5st (~gp5st@pool-72-77-44-213.pitbpa.fios.verizon.net)
[20:54:18] *** Joins: kerunaru (~Jmcb@64.red-79-146-101.dynamicip.rima-tde.net)
[21:00:43] *** Quits: keiserr (~keiserr@user/keiserr) (Ping timeout: 252 seconds)
[21:58:07] *** Joins: magla (~gelignite@55d4b5be.access.ecotel.net)
[22:01:27] *** Quits: kerunaru (~Jmcb@64.red-79-146-101.dynamicip.rima-tde.net) (Ping timeout: 244 seconds)
[22:06:08] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[22:06:33] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[22:15:06] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[22:15:27] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[22:17:42] *** Joins: christianPHP (~christian@190.232.168.110)
[22:18:36] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:19:30] *** Joins: Rockwood (~Rocky@user/rocky)
[22:20:40] *** Quits: keypusher (keypusher@user/keypusher) (Remote host closed the connection)
[22:22:09] *** Joins: keypusher (keypusher@user/keypusher)
[22:28:06] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[22:28:31] *** Quits: judah (~judah@rrcs-74-87-190-155.west.biz.rr.com) (Quit: leaving)
[22:28:46] *** Quits: keypusher (keypusher@user/keypusher) (Remote host closed the connection)
[22:31:34] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:31:50] *** Joins: Ducki_ (~ducki@user/ducki)
[22:31:57] *** Joins: keypusher (keypusher@user/keypusher)
[22:33:12] *** Quits: Ducki (~ducki@user/ducki) (Ping timeout: 256 seconds)
[22:49:22] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[22:57:45] *** Joins: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl)
[23:15:35] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[23:15:42] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Quit: Easy as 3.14159265358979323846...)
[23:19:21] *** Joins: merecat (~tonygreen@pool-71-185-46-23.phlapa.fios.verizon.net)
[23:20:16] *** Quits: merecat (~tonygreen@pool-71-185-46-23.phlapa.fios.verizon.net) (Client Quit)
[23:34:47] *** Joins: WishBoy (~WishBoy@user/wishboy)
[23:35:27] *** Joins: impliednude (~impliednu@172.56.42.65)
[23:36:31] *** Quits: daoumilseitek (~daoumilse@164.96.146.77.rev.sfr.net) (Quit: Leaving)
[23:39:29] <impliednude> anyone have any resources for creating middleware that will authenticate to a server connection using oauth1 like stuff. I would only need to post to the restful service from a 3rd party application
[23:40:44] *** Quits: guidoc (~guido@host-95-239-249-185.retail.telecomitalia.it) (Quit: WeeChat 3.2)
[23:41:00] <impliednude> I don't know how to use curl to recreate the almost oauth authentication the service needs. I generally use postman to create the code but after the first day I have to reget the code from postman
[23:42:07] <impliednude> if it was a true oauth implmenetation I could just use a premade library
[23:45:28] <Sammitch> kinda sounds like you need to re-read the docs for the service that you're integrating with.
[23:48:51] <impliednude> Sammitch> the service I am using literally says we are not using oauth1 for tba but its pretty close. It's basically 4 tokens, a nonce based on date/time then go from there to authenticate.
[23:49:34] <impliednude> Sammitch> sad thing is, they are a national company -sighs-
[23:50:00] *** Quits: genom (~g@37.214.77.199) (Remote host closed the connection)
[23:52:08] <Sammitch> yes, I understand that it is non-standard. hence you need to revisit their docs and see if you've missed something [eg: a refresh token] or if you're just up shit creek and have to manually touch it once a day to get a fresh auth token
[23:52:21] <Sammitch> or ask their support team about it
[23:53:08] <impliednude> alrighty.
[23:53:44] <Sammitch> that said, a lot of service that DO say "we are using OAUTH" have implemented it in such a way as to be incompatible with everyone else anyway
