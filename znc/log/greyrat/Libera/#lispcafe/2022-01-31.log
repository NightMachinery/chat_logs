[00:02:29] <qhong> Short name can also be descriptive
[00:03:03] <qhong> just for comparison, here's un-abbreivated descriptive name that says basically the same thing, rendered in 4 languages, same font size https://user-images.githubusercontent.com/6486990/151716652-d15f0a4f-08e4-424c-98f6-28bb01113979.png
[00:03:19] <qhong> basically anything non-English does better
[00:03:54] *** Joins: hayley (~theemacss@user/hayley)
[00:06:25] <phoe> https://cdn.discordapp.com/attachments/413865246030299143/937446157855105084/Zrzut_ekranu_z_2022-01-30_21-22-05.png
[00:06:30] <phoe> so I got a mail
[00:06:37] <phoe> it starts out like this
[00:06:44] <phoe> and I have no idea whether to be angry because I was called out or to be thankful because I got a donation
[00:07:51] <hayley> https://twitter.com/hondanhon/status/1487636362979266560 gonna get royalties on #33ff33
[00:08:08] <phoe> t
[00:08:32] <Gnuxie> angry
[00:08:57] <shka> huh
[00:08:58] <shka> furry?
[00:09:15] <shka> how the hell anybody would think so?
[00:09:32] <phoe> they look at the avatar picture I use online or something
[00:09:40] <shka> right
[00:09:46] <hayley> Buy a fursuit with the money
[00:09:46] <Gnuxie> well this is going to be a long evening 
[00:09:55] <phoe> hayley: I'll think about it
[00:10:30] * hayley is a catgirl according to GitHub
[00:10:44] <shka> what is a catgirl?
[00:11:10] <qhong> some specific kind of furry
[00:11:12] <shka> anyway, i had furry friends 
[00:11:17] <qhong> (I guess)
[00:11:23] <hayley> https://github.com/no-defun-allowed
[00:11:25] -ixelp- no-defun-allowed (Hayley Patton) · GitHub
[00:11:31] <phoe> the past tense of the word "had" is interesting
[00:11:41] <shka> phoe: oh, they floated away
[00:11:45] <aeth> well, I use a cat picture for my gravatar because it shows up in the strangest places (e.g. by default, Discord!) where I don't even use my real identity (just my main email) and it's the only way to not accidentally doxx myself, even if it makes my github and gitlab profiles look a bit weird
[00:11:49] <phoe> ooh
[00:12:06] <shka> anyway, normal people, outside of weird sexuality kinks
[00:12:12] <qhong> aeth: you can also use cringe anime pics
[00:12:44] <aeth> I just the other day signed up for a website and got that cat picture as my avatar
[00:12:50] <shka> but otherwise fine gentlemen
[00:12:52] <hayley> aeth: I have the NFT for #33ff33 now I will get royalties if someone uses it
[00:13:03] <aeth> (well, my cat picture, not hayley's catgirl picture)
[00:13:11] <aeth> (probably should disambiguate)
[00:13:37] <shka> dunno why internet hates them
[00:13:56] <shka> i guess partly because it is somehow acceptable 
[00:14:15] <aeth> shka: furries? they're pretty much the friendliest community, online or in person, if you ever run into one
[00:14:29] <shka> aeth: yeah, that's what i am saying
[00:14:35] <phoe> uwu
[00:14:42] <aeth> shka: my personal theory is that the people who spend all day hating furries are the people who are into niche porn because if you search for niche porn (in theory, not like I have done so), it's usually > 50% furry porn because furries are into weird porn
[00:14:55] <aeth> so they're mad that they get so much furry porn in their results
[00:15:19] <shka> kinda like transgender is one of the most popular categories on the pornhub?
[00:15:36] <shka> so people are willing to masturbate to this, but not accept it
[00:15:53] <hayley> Who said anyone here thought anything was a sexual thing?
[00:16:24] <phoe> probably shka first
[00:16:36] <shka> sounds like me admittedly 
[00:16:41] <phoe> but /shrug
[00:16:55] <shka> to my defense, sex is vital for continuation of the species 
[00:17:02] <aeth> Well, I mean the thing is, furries pay their artists and most people don't, so you'll wind up with a ton of drawn furry porn in search results for certain queries... there is just a ton of furry porn out there. And I think that's why a certain subset of the internet associates furries with furry porn even if, for all anyone knows, most furries don't even look at that.
[00:17:11] <shka> and that is reflected in religion, culture, etc.
[00:17:13] <Gnuxie> but continuation of a species is not vital 
[00:17:18] <phoe> there's tons of overtly sexual people in the furryverse and some who don't really care about it, the former are a vocal group though
[00:17:41] <phoe> especially with a lot of graphic art as aeth mentioned
[00:18:22] <shka> well, regardless, i choose to not hate
[00:18:45] <phoe> thank you uwu
[00:18:59] <aeth> Furries are great. For one thing, they're going to singlehandedly take down NFTs somehow. I just know it. So the world is depending on them right now.
[00:19:17] <shka> aeth: lol, ok
[00:19:52] <aeth> Because, again, most artists hate NFTs and quite a few artists make furry art because furries pay artists and most people don't.
[00:19:53] <hayley> "Hey I'll give you free NFT" "Gee thanks but I'm still burnt out on distributed systems"
[00:20:39] <hayley> The person in question made it themselves and doesn't have much else to give me seemingly, but still I'm not in the mental state to accept it.
[00:21:13] <sm2n> aeth: I thought kpop stans were the most powerful now
[00:21:26] <shka> people will eventually abandon NFT art
[00:21:33] <aeth> idk why anyone's a furry instead of a dragon though
[00:21:43] <aeth> very similar subculture but dragons are more powerful and thus are the minmaxer's choice
[00:21:43] <shka> maybe other applications of NFT will endure, not sure about that yet
[00:21:54] <hayley> I know a few dragons.
[00:22:20] <phoe> aeth: that's already scalies
[00:22:29] <Gnuxie> dragons are the most powerful 
[00:22:46] <phoe> aeth: https://i.imgur.com/dfdNWpL.jpg
[00:23:11] <aeth> hah
[00:23:42] <aeth> see, the thing is, dragons are cats. https://old.reddit.com/r/DragonsAreCats/
[00:23:43] <hayley> http://www.sbcl.org/all-news.html?2.2.1#2.2.1 GUYS GUYS GUYS
[00:23:44] -ixelp- DragonsAreCats
[00:23:45] -ixelp- All News - Steel Bank Common Lisp
[00:23:57] <phoe> hayley: I saw, congrats!
[00:25:33] * hayley is dragon girl seemingly
[00:25:34] <hayley> I guess I have to spread the news.
[00:25:48] <aeth> easy to spread news when you can fly
[00:26:23] <hayley> Hmm, yeah I'm not trying that.
[00:26:48] <aeth> https://www.theguardian.com/books/2022/jan/22/its-a-glorified-backpack-of-tubes-and-turbines-dave-eggers-on-jetpacks-and-the-enigma-of-solo-flight
[00:26:48] -ixelp- ‘It’s a glorified backpack of tubes and turbines’: Dave Eggers on jetpacks and the enigma of solo flight | Dave Eggers | [...]
[00:29:55] <shka> aeth: why are you posting this?
[00:29:59] <aeth> flying
[00:30:17] <shka> i saw video of some british soldier boarding ship with this
[00:30:26] <shka> looked like a horribly bad idea 
[00:33:13] <shka> flying low, slow, unarmed, unarmored, with a short range, over a sea, with a jet fuel all around you into adversarial ship 
[00:33:45] <shka> this requires either balls of steel or insanity
[00:34:30] <aeth> this is why it's better to become a dragon
[00:35:02] <aeth> well, actually, by fantasy worldbuilding logic, dragon boys look literally like dragons and dragon girls are basically just women with dragon wings/tails/ears.
[00:35:08] <shka> well, stray bullet into that will let you breath fire for a moment
[00:35:08] <aeth> So I guess it's better to become a dragon girl in particular
[00:35:27] <hayley> https://www.youtube.com/watch?v=eUJ_ifjKopM
[00:35:27] -ixelp- Sparks - "This Town Ain't Big Enough For Both Of Us" (official video) - YouTube
[00:35:53] <shka> aeth: i will have to ask THE QUESTION
[00:36:03] <shka> hayley: i like banshees version of this
[00:36:11] <shka> https://www.youtube.com/watch?v=iCDLVB9Zfe0
[00:36:12] -ixelp- Siouxsie and the Banshees - This town ain't big enough for the both of us - YouTube
[00:36:49] <shka> aeth: namely, how this species procreate (sorry)
[00:37:20] <aeth> I mean, it's just a common meme that makes fun of fantasy tropes. Where the male monsters look like monsters and the female monsters look like attractive human women
[00:37:20] <shka> ok boys and girls, gonna be horny somewhere else 
[00:37:24] <hayley> shka: This town ain't big enough for the both of us!
[00:37:24] <aeth> But technically speaking
[00:37:30] <hayley> And it ain't me who's gonna leave!
[00:37:41] <aeth> shka: It's fairly common in fantasy for actual dragons to somehow procreate with humans
[00:37:51] <shka> hayley: very well, take over those ruins, and reign in them
[00:38:16] <shka> aeth: yeah, well, fantasy 
[00:38:24] <aeth> actual mythology too, sometimes
[00:38:43] <shka> mythology is just fantasy with added time
[00:38:54] <aeth> technically, the Japanese emperor, too? https://en.wikipedia.org/wiki/Amaterasu#Dragon
[00:40:31] <shka> well, ok, i gotta still to that workout i am committing toward and it is already late 
[00:40:33] <shka> so gotta go
[00:40:39] <shka> see ya all later
[00:40:42] * hayley starts to think the decision to start collecting in an on the fly GC should be called "fly by wire".
[00:41:08] <shka> oh, regarding dragons
[00:41:38] <shka> i kinda like dragons from "Dresden Files"
[00:41:41] <aeth> I think a lot of the time dragons are shapeshifters to get around problems with thinking too much about dragons.
[00:41:48] <aeth> which I guess makes them even more overpowered
[00:42:06] <aeth> now you can be a massive dragon without the downsides of being a massive dragon
[00:42:11] <shka> where they are, essentially, just huge beasts that remain on earth from the creation day
[00:42:35] <shka> and they were created to raise mountains, pull continents etc.
[00:43:43] <shka> and since then have nothing to do, but each is among the most powerful beings in the existence
[00:44:05] <shka> also, explains how they procreate: they don't
[00:44:50] <epony> there is one little teensie mistake in your logic ;-)
[00:45:18] <shka> interesting idea i would say
[00:45:21] <humasect> why dragons have arms and wings? all creature with wings, those /are/ their arms. dragon are six-limbed ?
[00:45:30] <aeth> humasect: yes
[00:46:02] <aeth> humasect: while a lot of more rational Hollywood depictions don't give them six-limbs, the broader fantasy worlds that have all of the creatures tend to distinguish between six-limbed dragons and four-limbed (armless) wyverns
[00:46:27] <humasect> ah yeah, was about to mention wyvern
[00:46:33] <aeth> https://en.wikipedia.org/wiki/Wyvern
[00:46:58] <aeth> weirdly a lot of those depictions appear to have the front limbs be the legs and the back ones be the wings
[00:47:05] <aeth> you'd think it would be the other way around, like birds
[00:47:56] <aeth> but it's not like it matters... dragons are clearly not built for flight even with wings... so they usually fly via magic
[00:48:38] <aeth> The actual giant flying monsters are more terrifying than any dragon, anyway. https://en.wikipedia.org/wiki/Quetzalcoatlus
[00:49:06] <aeth> https://upload.wikimedia.org/wikipedia/commons/6/6b/Life_restoration_of_a_group_of_giant_azhdarchids%2C_Quetzalcoatlus_northropi%2C_foraging_on_a_Cretaceous_fern_prairie.png
[00:49:16] <aeth> that dinosaur is apparently human-sized, too
[00:49:31] <aeth> I'll take my chances with the giant, intelligent, talking, mythical dragon at that point
[00:51:09] <humasect> leviathan, bahamut
[00:51:17] <humasect> nefilim
[01:06:24] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:10:36] <pl> aeth: Quetzalcoatlus Northropi is suspected of having flight range of 10-19 thousand kilometers
[01:14:58] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[01:17:05] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[01:26:38] *** Quits: wacki (~wacki@87.123.132.186) (Quit: Leaving.)
[01:38:52] <shka> pl: makes sense
[01:39:06] <shka> such animal would be vulnerable on the ground
[01:39:13] <hayley> https://www.youtube.com/watch?v=hW_WLxseq0o
[01:39:13] -ixelp- Led Zeppelin - Kashmir (Live at Knebworth 1979) (Official Video) - YouTube
[01:39:31] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[01:39:36] <shka> so i can imagine that it evolved to essentially spent as little time on the ground as possible 
[01:41:40] *** Joins: aeth (~aeth@user/aeth)
[01:43:42] <shka> and IIRC the earth back in the day was much kinder to soaring 
[01:43:57] <shka> a lot of hot ground for thermal currents to form
[02:50:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:53:04] <hayley>  https://www.youtube.com/watch?v=UokIoawK9wQ
[02:53:05] -ixelp- By This River (2004 Digital Remaster) - YouTube
[03:23:20] <hayley> https://twitter.com/eeide/status/1487478415665995776 average #sicl personal library
[03:29:49] *** Joins: notzmv (~zmv@user/notzmv)
[03:32:15] <White_Flame> aeth: at least we stil have shoebills
[03:34:05] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[03:35:09] <White_Flame> :-|
[03:35:28] <White_Flame> I guess the shoebill broke his internet connection
[03:35:48] *** Joins: aeth (~aeth@user/aeth)
[03:38:50] <White_Flame> aeth: at least we stil have shoebills
[03:39:14] *** Quits: dra (~dra@2a04:4540:640f:b700:ac3b:5529:89a2:b679) (Ping timeout: 252 seconds)
[03:47:55] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[03:59:27] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 250 seconds)
[04:50:28] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[04:51:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[05:07:26] *** Joins: Oddity (~Oddity@user/oddity)
[05:10:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:12:50] *** Quits: Catie (~user@user/catie) (Quit: sQuit)
[06:16:25] <aeth> White_Flame: what we have, though, is a surprising lack of animals large enough to hurt us
[06:16:33] <aeth> fortunately
[06:16:41] <White_Flame> that's because we don't live in the ocean ;)
[06:16:47] <aeth> or Australia
[06:16:52] <aeth> idk how anyone lives near saltwater crocs
[06:19:40] <aeth> but the last flying animal that could probably seriously hurt humans was afaik https://en.wikipedia.org/wiki/Haast%27s_eagle
[06:20:31] <aeth> extinct circa 1400, surprisingly late... and like most massive predators, it went extinct because humans hunted its prey, not because humans won fighting head to head with one
[06:42:10] <aeth> New Zealand, too, so close enough to Australia
[06:50:30] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:51:37] <hayley> https://twitter.com/TamaraValmar/status/1487972023968038915 "All rise for the femboy anthem"
[07:37:15] *** Joins: domovod (~domovod@176.196.122.197)
[08:10:18] *** Joins: semz_ (~semz@user/semz)
[08:13:14] *** Quits: semz (~semz@user/semz) (Ping timeout: 260 seconds)
[08:13:16] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 245 seconds)
[08:26:17] <hayley> gilberth: I heard SBCL 2.2.1 makes regular expression compilers faster.
[08:28:08] *** Joins: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net)
[08:34:05] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[08:36:03] *** Joins: aeth (~aeth@user/aeth)
[08:36:20] *** Quits: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[08:36:58] *** Joins: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net)
[09:04:07] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:06:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:07:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:12:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[09:12:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[09:42:38] <hayley> Suppose I'd be willing to spend around US$500 on a new CPU for "work", I already have a B350 motherboard for a Zen 1 chip, and I can wait a pretty long while for whatever next micro-arch is coming next. What should my strategy be?
[09:52:35] <moon-child> apparently b350 works fine w/zen2
[09:53:11] <hayley> Right. But what should I waste my money on?
[09:56:25] <moon-child> https://www.amazon.com.au/Desktop-Processor-Without-16-Threads-Unlocked/dp/B09D2KLSFP/  this hits the pricemark, but zen3
[09:57:01] * hayley wonders why the free HDMI cable of all things.
[09:57:50] <moon-child> need it for 'elite 100+ FPS performance in the world's most popular games'
[09:58:04] <hayley> Seems it only works with Windows 10 too ):
[09:58:33] <hayley> But I'll actually consider it. /me was eyeing a Ryzen 5900X at a local store for a pretty close price, actually.
[09:59:21] <hayley> AU$739 rather than $710. idk why it's only a little more expensive.
[10:01:36] <sm2n> yeah, I have a B350 with zen2, I think
[10:01:55] <hayley> https://cplonline.com.au/cpu/amd-am4-5000-series/amd-ryzen-5900x.html
[10:01:59] <sm2n> with ecc, even
[10:02:34] <hayley> Not the worst if I have to get a new motherboard.
[10:03:20] * moon-child starts ripping threads
[10:03:33] * hayley mills the threads
[10:07:50] <hayley> Well, an additional cooler is also going to cost money, but I can survive (probably).
[10:08:11] <hayley> Haven't had many bus trips to spend my GitHub sponsor money on.
[10:08:33] <sm2n> not necessary these days
[10:08:55] <sm2n> stock cooler is sufficient unless you are into overclocking
[10:09:07] <sm2n> amd coolers have been good for a while now
[10:09:16] <hayley> The Zen ....X models don't have stock coolers (AIUI)
[10:09:53] <hayley> Hm, the 3900X has a stock cooler, but not the 5900X.
[10:10:54] <hayley> "Ryzen 9 5900X is an excellent processor for a high-end PC build, and pc power up. It has insane encoding times and top-tier gaming performance" Hm, no REGRIND performance numbers.
[10:11:20] <sm2n> oh
[10:11:38] * hayley regrets having written REGRIND.
[10:11:46] <moon-child> https://blog.openresty.com/en/ylang-intro-part4/  what happens when you build systems that don't compose
[10:11:47] -ixelp- Ylang: Universal Language for eBPF, Stap+, GDB, and More (Part 4) - OpenResty Official Blog
[10:12:16] <moon-child> like dtrace was cool.  Given you have to use unix, I approve of dtrace.  But dtrace doesn't compose with anything else, so you have to _stop_ with dtrace otherwise you don't get anywhere
[10:13:45] <hayley> In any case, I am an order of magnitude (and a bit) away from the computer necessary to make rustc run acceptably fast.
[10:14:06] <hayley> ...though I don't expect to make my money back on a regular expression compiler. Cliff Click thought it was a bad idea!
[10:14:33] *** semz_ is now known as semz
[10:15:16] * moon-child thinks he may actually make
[10:15:20] <moon-child> gah
[10:15:26] <moon-child> something of his disassembler
[10:15:33] <moon-child> but I do not care for speed there
[10:16:20] <hayley> "Hey guis I made shitty Hyperscan in CL" "wow here is $50,000 I am going to use it for parsing HTML"
[10:16:59] <moon-child> hey hayley I built an html parser in regex
[10:17:02] <moon-child> html5 ::= .*
[10:17:07] <hayley> w0w
[10:21:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:21:50] <sm2n> This is what postel's law people want you to do
[10:22:30] <sm2n> moon-child: But dtrace doesn't work on linux!
[10:23:18] <sm2n> (Unless you happen to enjoy head covering of the long visible wavelength response variety)
[10:23:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:23:40] <moon-child> who cares for linux??
[10:24:23] <sm2n> The author of the post you linked?
[10:25:28] <moon-child> eh, bully for him
[10:26:11] <sm2n> It doesn't matter if it doesn't compose with dtrace because you can't have dtrace on the same system
[10:26:24] <sm2n> Anyway, I looked at it and now I regret it
[10:26:46] <sm2n> Why do people make greenfield languages and think keeping the C preprocessor is a good idea?
[10:26:47] <moon-child> sure.  I was making a more general jab at unix
[10:27:08] <sm2n> Something is deeply wrong with how people design things
[10:28:24] <aeth> what about reader macros?
[10:28:29] <sm2n> Oh, it also has a lua-style dsl. That is more acceptable
[10:28:46] <sm2n> aeth: what about reader macros?
[10:29:02] <aeth> should more languages have reader macros?
[10:29:49] <sm2n> Oh. Hmm. Well I'm not sure it really makes sense outside of CL's evaluation model
[10:30:53] <sm2n> I suppose it could work
[10:30:53] <moon-child> forth has reader macros ('immediate words') and has not cl's evaluation model
[10:31:47] <moon-child> raku has extensible syntax, which amounts to reader macros
[10:32:03] <sm2n> I'm ambivalent on reader macros — on one hand, they are nice and I like having that capability, on the other, they break all tooling and I haven't seen a solution to that
[10:32:24] <sm2n> moon-child: How does it work in raku?
[10:33:25] <moon-child> I don't know the details (and it is poorly documented).  Grammars are first-class, and you can modify the grammar used by the compiler
[10:33:39] * hayley thinks it must be time to waste the day playing POSTAL 2 again. Or not, she sucks at first person shooters.
[10:33:49] <moon-child> sm2n: regular macros break tooling too.  Emacs cannot indent certain LOOP forms properly, for instance
[10:35:04] <sm2n> moon-child: I use iterate! But even so it is not as drastic — regular macros can only break tooling in localized ways, pretty much
[10:35:29] <sm2n> whereas a reader macro could e.g break syntax highlighting in the rest of your file
[10:35:40] <moon-child> yeah
[10:37:25] <sm2n> Clearly there is only one solution
[10:38:06] <sm2n> Abolish the reader! You have nothing to lose but your bytestream representations
[10:39:16] <moon-child> yess
[10:39:19] <moon-child> come to the light
[10:39:21] <moon-child> of structural editing
[10:40:24] <semz> sm2n: greenfield language = ?
[10:40:59] <sm2n> semz: "greenfield" means "newly designed"
[10:41:22] <sm2n> starting from scratch
[10:41:25] <semz> ah
[10:41:50] <sm2n> as opposed to brownfield, which means legacy
[10:41:51] * semz searched greenfield language first and found an article by one Patricia Greenfield
[10:42:28] <sm2n> moon-child: it's time, let us all write code in scratch/scheme
[10:43:25] <moon-child> why scratch?
[10:44:14] <sm2n> it is a lisp, and it has structural editing, and most importantly, it's mostly useless for writing useful code
[10:44:50] * moon-child smacks sm2n around a bit with a large trout
[10:45:07] <sm2n> (Though I read somewhere there is some community of teenagers doing dependently typed programming around scratch, which I am not sure whether to believe or not)
[10:45:55] <moon-child> I dare not examine any evidence regarding the veracity of that claim
[11:21:12] *** Joins: notzmv (~zmv@user/notzmv)
[11:24:31] <hayley> https://www.youtube.com/watch?v=IEqYDv8lMHM
[11:24:32] -ixelp- Motion And Heart (2003 Digital Remaster) - YouTube
[11:36:52] <hayley> Compiling "((¬K)K(¬(((¬(U)|(K)))&((O)&((B))))|(M«(M)»)))&(((¬(¬((V)|(((D))|((F))))*)))|(((((¬(O)))&((¬Q))((V)DG))*)))" fails with: Made too many states - either your regular expression is too complicated, or one-more-re-nightmare is broken.
[11:38:33] <hayley> https://www.youtube.com/watch?v=wDlaMQS2DvA
[11:38:34] -ixelp- tinyAVR 0-Series versus Cats! - YouTube
[11:41:29] <hayley> Well, SBCL's GC is actually going to limit REGRIND performance. With 10 threads (on a 6 core/12 thread machine) I see 7.7 threads used at once, and this increases to 9.35 if I factor out serial GC time.
[11:42:33] *** Joins: shka (~herr@109.231.0.226)
[11:45:07] <hayley> Clozure is down bad too: (ONE-MORE-RE-NIGHTMARE-TESTS:REGRIND 2000 :THREADS 10) took 6,717,935 microseconds ( 6.717935 seconds) to run. 2,713,752 microseconds ( 2.713752 seconds, 40.40%) of which was spent in GC.
[11:46:23] <mfiano> I see the hidden meaning now
[11:46:50] <hayley> The hidden meaning in what?
[11:46:54] <mfiano> OMRN is a Greek computer virus!
[11:47:01] <mfiano> OMicRoN
[11:48:24] <hayley> Yes, the King Crimson song off the album Red released in 1974, and the regex engine which was developed from mid-2020, reference a strain of COVID from late 2021.
[11:49:15] <mfiano> <Insert '12 Monkeys' ouroboros reference here>
[11:49:48] <hayley> Seems that the Clozure compiler is not noticeably faster at REGRIND either. I sorta expect that the slower GC doesn't help, but idk how to set heap size actually.
[11:50:22] <shka> good morning all
[11:50:31] <hayley> Good morning shka!
[11:52:48] <hayley> Increasing the GC space threshold manages to increase GC time. Ouch.
[12:01:15] <shka> how cool is that? https://www.youtube.com/watch?v=WBl5LWVczPQ
[12:01:16] -ixelp- Whole Universe May Be Vibrating From Gravitational Wave Background - YouTube
[12:01:40] <shka> hayley: yes, the best GC heap is small heap
[12:02:55] <shka> i would be fine if gc pause would just not block all threads
[12:04:13] *** Quits: copec (~copec@schrodbox.unaen.org) (Ping timeout: 268 seconds)
[12:04:23] <shka> because large heaps usually happen when multiple threads are at work
[12:04:51] *** Joins: copec (~copec@schrodbox.unaen.org)
[12:05:27] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Ping timeout: 268 seconds)
[12:05:27] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: easye (~user@oxi.slack.net) (Ping timeout: 268 seconds)
[12:11:38] *** Quits: taeaad_ (~taeaad@user/taeaad) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[12:12:52] *** Joins: taeaad (~taeaad@user/taeaad)
[12:13:31] <hayley> "i would be fine if gc pause would just not block all threads" Well, either you want a non-moving collector, or some fairly complicated barrier scheme.
[12:13:56] <hayley> Practically I'd be fine with a parallel stop-the-world GC, though of course my dream is concurrent compacting.
[12:20:05] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[12:20:26] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[12:20:41] <shka> hayley: ideally, yes, but, at least thread specific heaps is a big step forward
[12:23:03] <hayley> Thread local heaps are harder than concurrent GC IMO.
[12:23:33] <shka> mmm, ok
[12:23:59] <moon-child> how so?
[12:25:09] <hayley> You need to design a fast write barrier for trapping global -> new references. And this invariant must always be checked, whereas the write barrier for a concurrent GC only has to be run when the GC is actually working.
[12:26:31] <hayley> (Assuming a Doligez-Leroy-Gonthier write barrier design - you can do something even harder with read barriers, to better approximate reachability.)
[12:26:48] <shka> maybe you could squeeze in some bit flag to indicate that memory is not shared between threads?
[12:26:56] <hayley> Then you need to be able to relocate from new to global, and ideally you would have "pretenuring" too.
[12:26:59] <shka> and update it atomically 
[12:27:30] <shka> and when GC is running, well, thread is stopped so this flag can't be changed 
[12:28:36] <moon-child> hayley: don't you need such a barrier anyway if you are generational?
[12:28:54] <moon-child> why would global -> local barrier be harder than old -> young?
[12:29:23] <hayley> Cause, often, you don't even check old -> young, you just keep that part of the bitmap around for young -> young.
[12:29:44] <hayley> (assuming a card map, which e.g. SBCL and Java use, and they don't check young -> young.)
[12:30:42] <hayley> shka: You want to be able to trace those parts of the heap too, and update either part independently. Currently the only technique which just uses a bit, rather than moving, also uses mark-sweep for everything.
[12:30:50] <hayley> https://cse.unl.edu/~witty/research/repository/upload/8.pdf
[12:31:43] <hayley> That paper also mentions the idea of "pretenuring" global allocations, too.
[12:32:42] <hayley> Seems that, without pretenuring, the performance for Java programs is worse than without thread-local heaps.
[12:35:04] <moon-child> 'Sites that had a rate of at least 99% we designated ”global sites”, that is, sites where we would automatically allocate new objects into a global area'  that seems kinda high
[12:35:49] <moon-child> though, I would expect the distribution to be kinda strongly bimodal, so perhaps it does not make much difference?  Looks like they do not discuss that
[12:39:43] <hayley> [ Run times consist of 5.119 seconds GC time, and 178.150 seconds non-GC time. ]
[12:40:06] <hayley> Way to rub in the parallelism. But I still get bitten by those 5 seconds of GC time.
[12:40:24] <moon-child> eh, that is 2.8%
[12:40:28] <moon-child> I call that noise
[12:40:43] <hayley> 5.1s of 27s of wall time.
[12:41:12] <moon-child> oh right
[12:41:27] <moon-child> what if you run a separate process on every core?  It's not like there's anything you need to share
[12:41:53] <hayley> Sure, but then I have 10 processes to manage.
[12:54:27] * hayley uploaded an image: (6KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/OnOYsvKDcPUrpfxzWBXsIovx/Screenshot_2022-01-31_20-34-01.png >
[12:54:30] <hayley> what if you wanted to REGRIND but gencgc said
[13:01:19] <shka> moon-child: yeah, but that's real time, so if you have 16 cores it gets ugly 
[13:07:08] * hayley would still kill for parallel GC. There are patches for it, but she doesn't have the guts to update them for modern SBCL.
[13:07:16] <shka> mmm
[13:07:56] <hayley> https://github.com/luismbo/sbcl/tree/parallel-gencgc
[13:07:57] -ixelp- GitHub - luismbo/sbcl at parallel-gencgc
[13:08:14] <moon-child> huh, why were they not upstreamed?
[13:08:49] <hayley> Μost parallel GCs are slower on a single core. And I guess you didn't know you always had a few cores in 2009(?)
[13:09:06] <moon-child> oh wow missed that date
[13:09:23] <hayley> Specifically, CASing when you will always win is still slower. But it could be a compile-time flag, if you didn't mind the mess.
[13:10:04] <moon-child> not much of a mess, really.  Interpose a different cas, one-and-done
[13:10:15] <moon-child> but yeah makes sense they wouldn't bother
[13:11:43] <hayley> I got a copy of the relevant thesis, and using two cores only made it 20% faster. With 12 threads I expect something quite different.
[13:12:25] <moon-child> at some point you run out of memory bandwidth
[13:12:35] <moon-child> but still, 20% is nothing to sneeze at
[13:12:44] <hayley> Sure.
[13:14:45] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[13:17:27] <hayley> I don't think we are running close to memory bandwidth FWIW. It's usually latency that gets you, without ample prefetching.
[13:17:56] <moon-child> sure.  Then contention bites
[13:18:06] <moon-child> also prefetch buffer works
[13:18:52] <hayley> I tried prefetching in gencgc, but I don't know how to go about it, and prefetching has only really been studied for mark-sweep seemingly.
[13:19:55] * moon-child nods
[13:20:35] <shka> also, note that total energy consumption is important for some people 
[13:21:21] <moon-child> spikier energy profile is better overall
[13:22:14] <moon-child> (though, hmm.  In purely passive system, you dissipate heat more quickly when you're hotter, but usually you have fans; what is the energy impact of spinning those up?)
[13:23:07] <shka> moon-child: multi-thread programs have synchronization overhead  
[13:23:35] <shka> so single thread is usually ever so slightly more energy efficient
[13:24:18] <moon-child> sure
[13:24:38] <moon-child> curious: is this something that's been measured?
[13:26:51] <hayley> The GC apparently was about 20% slower with synchronization too. So, net zero change with two cores vs serial GC?
[13:32:23] <hayley> Again, gotta test with 6 cores.
[13:33:06] * moon-child starts ripping threads
[13:36:08] * hayley regrinds the threads
[14:02:46] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 260 seconds)
[14:04:34] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[14:09:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:8e08:7908:8918:48c0) (Ping timeout: 240 seconds)
[14:11:46] * hayley uploaded an image: (83KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/qAinJvNhMosAgEzYkglSByyp/screenshot_20220131-213412_samsung%20internet_thumbnail_1200.jpg >
[14:11:55] <hayley> Help Gil Tene is after me
[14:17:46] <moon-child> lmao
[14:19:23] <hayley> moon-child: noooo I don't want to go to JVM
[14:20:02] <moon-child> invokedynamic go brrr
[14:20:16] <hayley> (Though I should test it on ABCL; the JIT might be faster for throwaway code that is used only once for a fuzz test.)
[14:21:19] <moon-child> (hmm, will invokedynamic do any good for methods of more than one parameter?)
[14:21:20] <hayley> nooooooo
[14:23:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[14:24:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:29:32] *** Quits: molson__ (~molson@2001-48F8-704A-123D-0-0-75F-1033-static.midco.net) (Ping timeout: 240 seconds)
[14:31:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[14:33:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:37:02] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 240 seconds)
[14:40:51] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[14:54:47] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:55:44] *** Joins: kevingal (~quassel@149.157.105.172)
[15:00:33] *** Quits: kevingal (~quassel@149.157.105.172) (Ping timeout: 256 seconds)
[15:00:45] *** Joins: kevingal (~quassel@2001:770:c0:401:3d01:a4b4:1bb8:b977)
[15:01:03] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[15:03:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:06:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:08:28] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:08:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[15:15:30] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[15:17:20] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[15:19:04] <Gnuxie> selwyn: looks like we'll still be getting the full report? She's only provided an "update" to the cabinet office
[15:21:27] *** Joins: scymtym (~user@ip6-2001-638-504-20d6-1000-0-0-17.VPN.Dyn.CIT-EC.NET)
[15:25:54] *** Joins: notzmv (~zmv@user/notzmv)
[15:31:57] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[15:35:06] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[15:36:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:58:19] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[16:03:36] <ck_> it's by the book, sir
[16:06:55] <selwyn> who knows
[16:07:03] <selwyn> kieth particularly useless
[16:08:12] * pl ponders if any of the "unityped" camp and similar maniacs ever recognize that all their sum types are dynamic?
[16:13:15] <selwyn> i think that he will ride it out
[16:13:19] <selwyn> the outrage is dying down
[16:13:25] <selwyn> labour's point lead is evaporating
[16:13:41] <phoe> what is that kind of graph called? https://i.redd.it/0yd4yx222bl01.png
[16:13:47] <phoe> what kind of software can I use to generate it?
[16:14:11] <shka> phoe: flamegraph, but 90 degrees tilt
[16:14:35] <shka> so gangsta style :P
[16:14:35] <phoe> that's an answer that is both techically correct and not helpful
[16:14:55] <shka> right
[16:15:14] <shka> well, it is functionally identical to flamegraph, with some visual flair to it
[16:15:28] <phoe> oooh
[16:15:30] <phoe> https://sankeymatic.com/build/
[16:15:31] <phoe> found it!
[16:15:31] -ixelp- SankeyMATIC: Build a Sankey Diagram
[16:27:05] <ck_> I would've said that kind of graph is called "depressing"
[16:39:13] <shka> why? it is just data
[16:42:01] <ck_> I was joking, but I have only (or mostly) seen these things where the benefit/effort ratio isn't that high
[16:42:08] <ck_> like https://i.redd.it/qkqqa7rqxho21.png for one randomly chosen example
[16:45:21] <shka> yeah, sounds about right
[16:48:34] <shka> https://www.youtube.com/watch?v=QtOXq9SwarQ&t=380s
[16:48:34] -ixelp- The Congress of Vienna (Part 1) (1814) - YouTube
[17:05:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:09:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[17:16:26] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[17:20:17] *** Quits: atw (~user@ool-18bf5678.dyn.optonline.net) (Ping timeout: 240 seconds)
[17:28:53] *** Joins: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net)
[17:31:07] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:35:04] <selwyn> imagine fucking up a burn and losing webb after all this
[17:35:22] <shka> selwyn: what is happening
[17:35:23] <shka> ?
[17:35:32] <selwyn> nothing like that
[17:35:47] <selwyn> i am simply enjoying a chaotic daydream
[17:36:54] <ck_> I'm sure that, drake equation here, someone will get a good use out of a nice mirror at some point in time, in that case
[17:38:41] <selwyn> a wampa will use it as a shaving mirror
[17:38:58] <ck_> uttini
[17:41:02] <selwyn> you can hear the ewoks first dialogue to be 'that guy's wise' 'more than i am short'
[17:42:41] *** Joins: Alfr (~Alfr@user/alfr)
[17:45:09] <ck_> I hope at one point in my life I'll be able to get through an otherwise difficult situation using an obscure shared reference
[17:46:31] <ck_> do you know that one levis advert with only shakespeare lines?
[17:46:49] <selwyn> no?
[17:46:57] <ck_> it's from a midsummer night's dream, one moment
[17:47:23] <ck_> https://www.youtube.com/watch?v=XPyD4jyiObo
[17:47:23] -ixelp- Levis 501 - Midsummer Nights Dream ad - YouTube
[17:47:24] <selwyn> recently i learnt about the long man saga of japanese adverts
[17:49:15] <selwyn> if kids here don't like to learn shakespeare - i wonder what it is like for kids in other countries
[17:50:43] <ck_> they aren't kicking schools' doors in to learn Goethe either, if that's a comfort
[17:52:28] <ck_> but on the other hand, how could they really. every once in a while I re-read Faust, and always wonder how a kid could possibly grasp it, without having enough experience to relate it with
[17:52:53] <selwyn> i really liked shakespeare
[17:53:04] <selwyn> but i had a good teacher and was a hopeless nerd
[17:54:08] <selwyn> in general, there is a baffling tendency to teach the most boring shakespeare material, which i mostly avoided
[17:54:14] <shka> hopeless nerd and shakespeare? https://www.youtube.com/watch?v=gQddgc1h_2I
[17:54:14] -ixelp- Star Trek VI: Shakespeare Quotes - YouTube
[17:54:30] <ck_> there's also a lot of it in TNG
[17:54:39] <shka> yeah
[17:54:54] <shka> but i fucking love chang
[17:55:43] <shka> also, he was in the video game https://www.youtube.com/watch?v=2yBEvBZaEUk
[17:55:44] -ixelp- Klingon Academy 51 The Ending Low - YouTube
[17:55:50] <ck_> http://valencia.unm.edu/campus-resources/R2S2/pdfs/introduction-to-shakespeare-programming-language.pdf
[17:56:08] <ck_> Juliet: Am I better than you?
[17:56:13] <ck_> Hamlet: If so, let us proceed to scene III.
[17:56:41] <selwyn> lol
[17:58:14] <selwyn> never liked the poems that much and the comedies can be dull
[18:01:10] <ck_> what's your favourite play?
[18:01:53] *** Quits: jeosol (~jeosol@user/jeosol) (Ping timeout: 256 seconds)
[18:02:01] <selwyn> macbeth
[18:02:27] <selwyn> though i also didn't study that many
[18:12:24] <shka> pl: hey you there?
[18:15:48] <pl> yes
[18:22:42] <pl> aaand not exactly anymore
[18:31:21] <shka> heh
[18:31:23] <shka> ok
[18:36:23] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Read error: Connection reset by peer)
[18:53:47] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[19:00:05] <selwyn> gnuxie: https://twitter.com/brokenbottleboy/status/1487814038964867079?s=20&t=ul5qgg3O3KutY0xnl7J3Ew
[19:04:11] <Gnuxie> wtf
[19:05:49] <Gnuxie> the backstory 
[19:05:53] <gilberth> Why doesn't CLX cache xlib:drawable-depth? I mean the depth cannot change and for pixmaps and windows that I created, I actually specified the depth. Like it is now xlib:drawable-depth results into a round-trip. *sigh*
[19:08:57] <gilberth> And round-trips is what you really want to avoid. Our networks might have bandwidth, but have quite a latency. And for the latter we also face the limit of light speed.
[19:11:13] *** Joins: treflip (~user@user/treflip)
[19:13:05] <selwyn> kieth quoting thatcher
[19:17:00] <ck_> gilberth: because (hold on)
[19:17:46] <ck_> gilberth: please read https://github.com/sharplispers/clx/pull/146
[19:17:47] -ixelp- Memorize the bit depth for drawable. by kc- · Pull Request #146 · sharplispers/clx · GitHub
[19:19:11] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Read error: Connection reset by peer)
[19:20:01] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[19:20:15] <ck_> I'd be interested in your opinion on how this interaction turned out
[19:23:29] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[19:24:56] *** Joins: aeth (~aeth@user/aeth)
[19:27:36] <gilberth> ck_: Well. What I read is that the secret XLIB::WITH-GEOMETRY should be used. Which is not a solution in this case as (1) it works on windows not drawables and (2) still results into a round trip. CLX just doesn't memorize the drawable depth. This macro just queries the depth and then withing dynamic context makes xlib:drawable-depth refer to that. It's no solution.
[19:28:26] <gilberth> ck_: Second. It's actually my mistake in McCLIM as I just assumed that XLIB would remember xlib:drawable-depth for me.
[19:30:10] <gilberth> ck_: Third, why the fight. A CLX already has to remember a colormap to a pixmap. A concept X11 doesn't have for a pixmap is just an array of integers to it. There is a colormap property on the drawable plist. McCLIM hackers should just get over it and have a depth property there too and be set.
[19:30:35] <gilberth> * A CLX backend
[19:34:36] <gilberth> Fourth, I don't believe in reusing gcontexts, not when I need to set up all properties too. Reusing makes sense, if you keep gcontexts for say a red foreground and another for a blue foreground and then another for a default font in green and then one for a bold font in yellow, etc. McCLIM doesn't do that.
[19:36:50] <gilberth> However, the nice CLUE/CLIO toolkit, which somewhat parallels Xaw/Xt, by TI has a nifty gcontext cache, which I might reuse. The low-level Xt-like part which is CLIO IIRC is pretty solid, while the widget implementation has flaws. Nevertheless I used it for quite some time.
[19:37:19] <gilberth> ck_: And thanks for pointing me to that discussion.
[19:39:50] <gilberth> That GC cache works by a USING-GCONTEXT macro, where you specify all attributes you care about and CLIO would then go into a cache and find a best matching GC for you. Best matching is a GC where the set of attribute changes needed to be pushed to the server is minimal. However, if you have complex clip masks, or tiling, etc which refer to pixmaps and bitmaps, it's not that easy anymore.
[19:40:55] *** Joins: jeosol (~jeosol@user/jeosol)
[20:00:22] <gilberth> Fifth, XQuartz isn't the fastest X server. My hunch is that this is because it somehow is tied to vsync. It does double buffering after all. However, with a properly designed X application, that shouldn't matter. Slowness you might experience with XQuartz, you will experience upteen-fold with a remote display, too. I bet that the raw rendering "bandwidth" of XQuartz is fine.
[20:01:04] <gilberth> I can't really benchmark the latter as I lack a Linux machine with a display.
[20:11:30] <gilberth> Ok. I am done. I have no more calls to xlib:drawable-depth.
[20:20:09] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 256 seconds)
[20:21:59] *** Joins: domovod (~domovod@176.196.122.197)
[20:27:16] *** Joins: Catie (~user@user/catie)
[20:27:42] <ck_> Thanks
[20:31:45] *** Joins: phantomics (~phantomic@71-218-126-185.hlrn.qwest.net)
[20:36:34] *** Quits: kevingal (~quassel@2001:770:c0:401:3d01:a4b4:1bb8:b977) (Ping timeout: 250 seconds)
[20:41:31] <ck_> selwyn: looking forward to ghengis khan tiktoks
[20:41:45] <selwyn> ?
[20:42:05] <ck_> isn't that the logical progression from winston churchill on british television
[20:42:12] <ck_> The East Will Respond [tm]
[20:44:05] <selwyn> oh lol
[20:44:37] <selwyn> many countries have their version of the king in the mountain who will wake up to save the nation when it is threatened
[20:44:38] <shka> hello, The East called and said that you should stop living in the past, also Churchill was a little bit of a dick
[20:45:11] <selwyn> britain is the only one where that hero is anticipated to participate in the inane political discourse of the day
[20:45:19] <ck_> he's "keeping history alive"
[20:45:41] <shka> jesus christ, i am glad that history of WW2 remains dead
[20:45:50] <selwyn> not here it isnt
[20:45:56] <ck_> yeah, it isn't, was about to say that
[20:47:14] <shka> so you drop bombs on london?
[20:47:24] <selwyn> oh
[20:47:34] <shka> "living the history"
[20:48:17] <selwyn> well, when you put it that way, it is at least mostly dead
[20:48:26] <shka> but i must say that i appreciate some of the recipes from the rationing days  
[20:48:38] <ck_> spam spam spam spam lovely spam, wonderful spam
[20:48:56] <selwyn> have to admit i don't understand the appeal of these recipes
[20:48:59] <shka> well, i eat meat once a week tops, so not so much spam
[20:49:01] <shka> :P
[20:49:25] <selwyn> do they conjure up some ideal of 'deep britain' from a foreign perspective?
[20:49:39] <shka> they are somewhat creative, i appreciate how basic they are 
[20:50:06] <shka> also, it somehow appeals to me how you use only what you grow at home
[20:50:32] <shka> which was how also worked out in Russia after collapse of the soviet union
[20:51:00] <phoe> https://cdn.discordapp.com/attachments/299903314596855808/937757342114672721/Zrzut_ekranu_z_2022-01-31_18-09-07.png
[20:51:05] <shka> anyway, get some chill sauce on those and suddenly they become actually tasty :P
[20:51:15] <selwyn> you can survive off of potatoes for a really long time with no health issues
[20:51:38] <shka> selwyn: yeah, i know, you tested that idea historically :P
[20:51:52] <shka> phoe: i appreciate something more poetic out of you 
[20:53:29] <shka> phoe: like "I bring you the only solution. The only way. The only truth. Despair as there is no hope. We will program as we dream, alone."
[20:53:48] <phoe> shka: wait what
[20:54:11] <shka> regarding that screenshot
[20:54:27] <ck_> selwyn: "ancient irish wisdom" ?
[20:55:43] <phoe> oh
[20:55:50] <phoe> well, there is no solution, we are doomed
[20:56:45] <ck_> there is not no solution if nobody posits the problem
[20:57:11] <phoe> in other languages, the problem is the languages
[20:57:22] <phoe> in lisp, the problem is other lispers
[20:57:31] <phoe> don't @ me
[20:58:28] <selwyn> wittengenstein's 'limits of my language mean the limits of my world' just as applicable to proglangs
[21:00:08] <ck_> selwyn: so here the world is subjectively limitless, but lisp is the manifested multi-world hypothesis?
[21:00:55] <selwyn> well
[21:01:05] <selwyn> c++ gets to be ugg language
[21:01:06] *** Quits: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[21:01:12] <selwyn> lisp can be 19th century high german
[21:01:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:01:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:01:30] <ck_> maybe we're on slightly different metaphors
[21:01:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:02:04] <selwyn> i don't like the many worlds hypothesis as much as i used to
[21:02:12] <ck_> it couldn't be high german, because the point of "high" is a more widely accepted standard of language than local dialects would be, right
[21:02:46] <ck_> and I thought we were all riffing on the "lisp makes it too easy to program your own programming language, which nobody but you will understand once it is done"
[21:02:59] <selwyn> i thought it was a good language for expressing difficult concepts in very long sentences
[21:03:43] <ck_> (with-modifiers (agreeableness 10) 'ok)
[21:04:31] *** Joins: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net)
[21:10:52] <ck_> how is your battle with latex going?
[21:11:52] <selwyn> tedious, but not too bad
[21:12:07] <selwyn> i have been trawling through the literature for the last three days
[21:12:29] <ck_> on the search for what?
[21:12:31] <selwyn> not my favourite activity
[21:12:44] <ck_> put me in coach I'm ready maybe I can help that's my favourite thing to do
[21:12:45] <selwyn> i am collecting a whole bunch of references
[21:12:51] <ck_> oh, that kind of literature
[21:13:03] <ck_> bench me coach that's not my area of expertise I'm afraid of jstor
[21:13:20] <selwyn> there are a lot of things i vaguely know but should really provide citations for
[21:16:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:16:44] <selwyn> i'm entering crunch at the moment
[21:16:51] <ck_> for how long
[21:17:29] <selwyn> as long as it takes
[21:17:39] <ck_> are you open to opinions?
[21:17:40] <selwyn> hoping to get a very good draft by the end of february
[21:17:57] <selwyn> always happy to hear opinions
[21:18:53] <ck_> I believe that crunch is more a calamine lotion for the psyche, makes you feel better than the output justifies
[21:19:19] <ck_> doing a little more is ok, really crunching is pointless, especially open-ended like that, in my opinion
[21:19:34] <selwyn> hm
[21:19:42] <ck_> I would recommend planning a good schedule and sticking to it
[21:20:25] <ck_> well, thanks for coming to my ted talk have a good evening
[21:30:17] <moon-child> many worlds sounds like a model conceived by dirty frequentists
[21:30:19] <moon-child> (sorry)
[21:33:56] <ck_> don't make me come over there and make a counting argument
[21:34:21] <ck_> anyway I'm quite certain the many lisp hypothesis is true
[21:36:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:37:26] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 256 seconds)
[21:38:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:41:45] <phoe> gilberth: https://cdn.discordapp.com/attachments/569524818991644692/937771578501005372/Zrzut_ekranu_z_2022-01-31_19-09-04.png
[21:43:31] <moon-child> phoe: a character is not uniquely identified by its character code
[21:43:39] <moon-child> (or, at least, is not guaranteed to be)
[21:44:11] <phoe> moon-child: yes, that's a wart that I must add - not a problem on many Unicode-enabled CL implementations nowadays, but some older ones might disagree
[21:44:16] <phoe> thanks for the note
[21:44:30] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[21:49:59] <phoe> https://cdn.discordapp.com/attachments/670707716322492436/937774198045171772/Zrzut_ekranu_z_2022-01-31_19-19-33.png
[21:50:02] <phoe> should be a bit better
[21:51:54] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[21:53:17] <sm2n> what the heck someone actually wants to use something I wrote
[21:53:38] *** Joins: aeth (~aeth@user/aeth)
[21:54:16] <sm2n> phoe: that is a lot of namespaces
[21:55:05] <phoe> sm2n: you mean the scanner thing?
[21:55:14] <phoe> sm2n: yes, Lisp-N for the win
[21:55:28] <sm2n> yeah
[21:55:47] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[21:56:20] <sm2n> reminds me of when I first got my mind blown when reading LiSP
[21:56:34] <phoe> could you link me to the repository? I'm kind of curious now
[21:56:39] <phoe> and I can't find it via goodle
[21:56:41] <phoe> google*
[21:56:44] <sm2n> https://git.sr.ht/~sm2n/scanner
[21:56:45] -ixelp- ~sm2n/scanner - sourcehut git
[21:57:13] <ck_> goodle, eescher, baach
[21:57:21] <phoe> oh, let me take a look
[21:57:34] <sm2n> it's pretty hacky
[21:57:57] <sm2n> just wrote enough to make it work for me and then forgot about it
[21:58:01] <phoe> yes
[21:58:07] <phoe> an unpolished gem
[21:58:35] <sm2n> hah
[22:16:15] <gilberth> Nice. a horizontal scroll on the touchpad is translated to mouse button 6 and 7 with XQuartz. I wonder how common that is.
[22:19:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:20:06] <clothespin_> that's great with 5 fingers
[22:22:21] <gilberth> IIRC ck_'s fancy mouse has like ten buttons or so.
[22:23:54] * moon-child 's has 9, plus horizontal scrolling
[22:24:44] * sm2n only has 5, unless the dpi change button counts
[22:25:23] <gilberth> Hmm, X11 events have room for eight buttons only.
[22:25:47] <gilberth> moon-child: What do you do with all those buttons? Do you need them?
[22:26:16] <moon-child> no, not particularly.  But it's a comfortable mouse
[22:26:21] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[22:26:48] <moon-child> 3 standard buttons.  Two are browser forward/back.  Two are ctrl+pgup/pgdn (browser prev/next tab).  Two are auxiliary and I don't really use them
[22:27:35] <moon-child> maybe should, but eh I don't want to spend much time mousing anyway
[22:28:03] <humasect> mouse symmetry
[22:28:26] <gilberth> Opera had mouse gestures, which I really liked. You have those gestures with touch pads these days. A pity they are less common with mice.
[22:28:43] <humasect> had this one, it was beautiful: https://www.etsy.com/listing/691932058/vintage-logitech-3-button-mouse-serial
[22:28:44] -ixelp- Vintage Logitech 3 Button Mouse Serial Connector Model No. | Etsy
[22:29:09] <humasect> my mouse has touch area on the top if that counts, 2d scroll and multitouch etc
[22:32:19] <gilberth> humansect: I had this: <https://i.ebayimg.com/d/w1600/pict/164798990622_/Vintage-Genius-Dyna-Mouse-GM-6-Serial-Interface-Three.jpg>
[22:32:45] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[22:32:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:33:01] <humasect> gilberth: nice =)
[22:33:04] <lisp123> phoe: Is that your writing on custom namespaces?
[22:33:15] <gilberth> Notice the little slider to switch it between the Mousesystems and the MS protocol, the latter which only knew two buttons.
[22:34:34] *** Joins: aeth (~aeth@user/aeth)
[22:43:34] <pl> gilberth: it was a bit annoying to constanty switch that slider ever reboot
[22:45:44] <pl> even though I had a more modern one, with slider on the side (an A4tech, iirc?)
[22:46:27] <pl> used to switch because OS/2 grokked and liked 3 button mouse, while win3x didn't
[22:46:36] <phoe> lisp123: yes
[22:46:42] <phoe> a new CLR recipe
[22:47:37] <lisp123> phoe: That's a very good idea for a recipe
[22:48:06] <phoe> I know, that's why I am adding it
[22:49:45] <humasect> we can 3d print a lot of our own stuff these days
[22:50:16] <humasect> ergonomic sideways claw gaming mice ... i like squares
[22:51:56] <gilberth> pl: Boot into X11 only --- problem solved. Or rather: Don't reboot at all.
[22:52:57] <humasect> self-destructing single-use software
[22:54:50] <phoe> fuck y'all we don't need no revolution, (defun anarchize (x) (if (consp x) (cons (anarchize (cdr x)) (anarchize (car x))) x))
[22:55:03] <phoe> (anarchize '(1 2 3 4 5)) ;=> (((((NIL . 5) . 4) . 3) . 2) . 1)
[22:58:32] <White_Flame> gilberth: in terms of postscript style display servers, are scrollbars handled client-side or server-side?
[23:08:16] <gilberth> White_Flame: If you refer to NeWS, I don't know. If you refer to NeXT, I could only assume it is like Cocoa, where scrolling is not handled at the display server in the sense, that the display server would have a display list or procedure uploaded to redraw a pane automatically.
[23:08:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:11:18] <gilberth> Anyhow, I'd really like to design a system based on a device independent graphics model and the notion of display lists. I am not so fond of the idea that widgets would actually run on the server. The latter is something which you see advertised for NeWS, as you could upload PS code; but as I said: I have no idea if that was really used.
[23:12:03] <gilberth> For NeXT the sources leaked and I could have a look. Would be interesting to know how much PS code was actually uploaded to the display server.
[23:12:36] <White_Flame> I presume it was generally more along the lines of a vector display format instead of bitmap format, more than actually used executive functionality
[23:13:02] <gilberth> Indeed, this is the impression I got too.
[23:13:52] <White_Flame> but I guess the situation also has another distinction:  1) client re-renders vector, 2) server scrolls the area automatically given a larger vector canvas, 3) server executes vector code to redraw scrolled part
[23:15:15] <White_Flame> personally, I like the notion of thungs like #2.  it raises the level of abstraction of communication, instead of making blind calls
[23:15:20] <White_Flame> *things
[23:15:35] <gilberth> However there is no real difference between a display list and a pixmap. Cocoa (and iOS) play tricks for scrolling. They invoke your repaint handler for the scrolled pane with a region a bit larger than what is really visible. When you scroll just a little, the repaint handler is not invoked, as the newly exposed part is already in a pixmap and just needs to be blittered.
[23:16:03] <humasect> =)
[23:16:12] <White_Flame> right, if you upload the entire window's rendered display, then that's not possible
[23:16:18] <White_Flame> (be it vector or bitmap)
[23:16:45] <humasect> css/html is close to "declaratively" describing visuals (within a large margin of error etc) rather than sending straight video/image feed
[23:17:00] <gilberth> Cocoa and iOS then would call your repaint handler asynchronously on not yet exposed parts of your pane. Kind of like a repaint-ahead. I intend to do that with my CLIM too.
[23:17:11] <White_Flame> humasect: yeah, I know.  I do like its declarative model, even if the languages have cruft and jank
[23:17:21] <humasect> yea
[23:18:11] <White_Flame> all of my GUIs have been browser-based for many years now
[23:18:24] <humasect> all techs converging
[23:18:30] <White_Flame> and as I mention a lot, you generally get multi-user and remote graphical access "for free"
[23:18:51] <gilberth> White_Flame: The display server could ask for the display list piecewise. Ask for the actually visible part first and then go from there in this repaint-ahead fashion. As it sees fit. All that is needed is a classical repaint handler. If the server is tight on resources it could just invoke that repaint handler again.
[23:19:37] <humasect> js source can be obfuscated, but is it a real issue for intellectual property and copyright and private secrets etc?
[23:19:41] <White_Flame> gilberth: it would have to know the componentry of your display list
[23:19:48] <White_Flame> as opposed to just being a singular thing
[23:19:51] <gilberth> When now the application could notify the display server about deltas in his version of the display list, you may get somewhere.
[23:20:14] <White_Flame> right
[23:20:27] <gilberth> White_Flame: What do you mean by componentry?
[23:20:39] <White_Flame> I assumed a display list was like a single vector image to render
[23:20:58] <White_Flame> the server would have to be aware that some parts within it could be scrolled
[23:21:16] <gilberth> Yes, but I could always ask for just that part of it which intersections with a certain region.
[23:21:56] <gilberth> White_Flame: Oh, you think of the whole toplevel window as just one single display list?
[23:22:18] <White_Flame> yeah
[23:22:52] <White_Flame> that's what postscript has been to me, when I was coding in it
[23:23:09] <White_Flame> (printer stuff)
[23:23:45] <gilberth> Ok. In my view of things, windows would just be nodes in the display list, which say that the single child is to be clipped by a certain region. You could move that child to scroll. As in my idea of a display list is a tree, not just a linear list.
[23:24:39] <White_Flame> well, that could mean the server sends a button-click or drag back to the client, and the client re-draws whatever region it cares about, in whatever way it does
[23:24:58] <White_Flame> as opposed to the display server having its unified scrollbar preferences
[23:25:07] <humasect> thin client ++
[23:25:11] <White_Flame> (speed, what side of the window, what happens when you click off the handle, etc)
[23:25:41] <gilberth> The client would alter his version of the display and send deltas to the server.
[23:26:15] <humasect> games can use prediction, dont see why unified/standardized UI pieces couldnt be as well
[23:27:19] <gilberth> Or, if you don't want to expose display lists to the client and go with classical procedural repaint handler, the client would just send a dirty region and in anticipation of the exposure event could send graphics requests resulting from the exposure.
[23:27:45] <White_Flame> the main question I'm asking is who runs the semantics of the scroll bar interaction?
[23:27:45] <humasect> now its cheaper to have local gpu
[23:28:06] <White_Flame> eg, converting a click/drag into how much to scroll the clipped display
[23:28:14] <White_Flame> as well as deciidng what the scroll bar looks like
[23:28:24] <gilberth> McCLIM once anticipated exposure events due to scrolling. But I believe that has been removed. /me shrugs.
[23:29:27] <gilberth> White_Flame: That question of yours is not my concern. I am not about to design a toolkit protocol.
[23:29:46] <White_Flame> since I'm not very familiar with the model, I'm asking what's common there
[23:30:06] <humasect> x11 api was designed with this in mind mostly no?
[23:30:25] <gilberth> White_Flame: You find very little information about NeWS.
[23:30:46] <gilberth> humasect: X11 cannot run code in the server.
[23:30:54] <humasect> hm, right
[23:31:09] <gilberth> One could argue that HTML/CSS/JS/AJAX is the new NeWS.
[23:31:22] <White_Flame> but if what you want doesn't involve toolkit/widgets at all, that means all the toolkit definition, rendering, behavior, and preferences are client-side.  the only difference being fully rendered vector vs fully rendered bitmap
[23:31:27] <humasect> yeah
[23:31:31] <White_Flame> (except maybe fonts)
[23:31:39] <humasect> themes eww
[23:32:23] <White_Flame> in the same way that multiple clients can share fonts, they should also (IMO) share toolkits
[23:32:41] <White_Flame> and that doesn't have to be baked into server functionality
[23:33:18] <gilberth> White_Flame: And display lists. And your right, scrolling ought to be handled at the server. It's only that I don't thing that it would easy to design a protocol which won't impose too much assumptions on the look and feel here. And what I am thinking about is something which should be completely toolkit agnostic.
[23:33:28] <humasect> but why seperate and different toolkits ? its fun on linux but
[23:33:40] <White_Flame> versioning
[23:34:00] <humasect> css/html/etc is "anti-toolkit" almost
[23:34:04] <White_Flame> that is, different version of the toolkit system
[23:34:07] <gilberth> humasect: Would you love to use Xaw? In 2022?
[23:34:11] <humasect> (well same way that raw x11 is)
[23:34:13] <White_Flame> uh, html has its own widgets
[23:34:28] <humasect> gilberth: hehe. if i had no internet and an old computer living in a cabin, could be zen
[23:34:32] <White_Flame> unless you're basically only using <canvas> or adding all widget behavior to divs
[23:35:30] <humasect> oops, you are right. OS widgets 
[23:35:57] <hayley> Good morning everyone!
[23:36:01] <humasect> hi ^_^
[23:37:09] <gilberth> Anyhow, as nice as a universal toolkit protocol would be, I fear that you will come to the subset or least common denominator. People will always want to have sth fancier. It should be separate. As should CLIM be separate from the underlying cross-platform Silica (which is windows, events, graphics etc).
[23:37:33] <White_Flame> that's why it would be nice if individual toolkits could live on the server, in the same way fonts can
[23:37:42] <White_Flame> as opposed to having one baked into the server
[23:38:07] <gilberth> White_Flame: Only because they live on the server, won't make their API compatible.
[23:38:18] <White_Flame> and depending on execution model, new toolkits could be uploaded by the client if they're not there already (if it's literally postscript which can both execute + generate vector displays)
[23:38:42] <White_Flame> gilberth: uh, right.  there's gtk v2, gtk v3, foo-tk 1.1, etc
[23:38:46] <White_Flame> or whtaever they are
[23:38:55] <gilberth> White_Flame: Ok, so you think that uploading code to the server is a good idea?
[23:39:03] <White_Flame> just the same as a font registry
[23:39:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:39:20] <White_Flame> if it's purely data-transformational, it can be side-effect free
[23:39:35] <White_Flame> eg, converting widgets/events into vector gfx & outgoing events
[23:39:35] <humasect> server is usually headless, clients are varying input/output methods.
[23:39:57] <gilberth> How about a toolkit server talking to the display server. Both could run locally. Hmm.
[23:40:14] <humasect> web browser and http
[23:40:20] <White_Flame> if it were purely transformational "safe" declarative code, then the client could upload it lazily
[23:40:27] <gilberth> humansect: Servers provide a service. The display, keyboard and the mouse is the service a display server provides.
[23:40:59] <pl> gilberth: at the time we had no X11, and AutoCAD forced the issue a bit 
[23:41:25] <humasect> gilberth: right; they already seperate in some sense or another
[23:41:57] <pl> Uploading code to the server? Do I hear the ghost of NeWS? 
[23:42:24] <gilberth> White_Flame: Thanks for your input! I'll have sth to ponder about now.
[23:42:28] <White_Flame> pl: basically
[23:42:30] <gilberth> pl: You do.
[23:42:36] <humasect> postscript had code, pdf does not ? i can't recall if apple took pdf remotely
[23:42:43] <White_Flame> gilberth: yeah, I don't like compromises, and am brainstorming better distribution of stuff
[23:43:08] <White_Flame> I think PDF is a constrained postscript
[23:43:30] <White_Flame> but with a lot of literal stuff added, too
[23:43:40] <gilberth> White_Flame: Yeah, that's terrific! I have not found a solution yet.
[23:43:41] <White_Flame> as opposed to fully code-generated gfx
[23:43:44] <humasect> that is also how i think of it. and it used to be quite read-only
[23:43:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[23:44:28] <gilberth> PDF is PS without the interpreter (if you forget about this silly JS thing). And PDF has an alpha channel, that PS doesn't.
[23:45:42] <gilberth> PDF has procedures but they can't be more than just another stream of graphics commands.
[23:46:42] <gilberth> Also, I'd like to know what the connection between NeWS and NeXT is. If there is any.
[23:47:12] <hayley> (mismatch "NeWS" "NeXT") => 2
[23:47:29] <gilberth> Very funny.
[23:49:07] <gilberth> White_Flame: Such a toolkit of yours should be modular in the sense that I could use say GtK, but have text fields been handled by an Emacs widget. The next person may want to use a vi widget for text input.
[23:49:54] <humasect> gilberth: but emacs itself then also uses a toolkit
[23:50:17] <White_Flame> I was purely thinking about new vector-based toolkits, decomposing notional widgets to vector drawing calls
[23:50:31] <gilberth> humasect: Which I don't want. I want otherwise native widgets, but have text input been handled by Emacs.
[23:51:11] <humasect> NeWS descends from PS with added stuff for interaction and windows/contexts 
[23:51:23] <humasect> (NeXT and GNUstep using Display PS)
[23:51:47] <gilberth> Yes, and Display Postscript is documented and specified by Adobe.
[23:52:06] <humasect> ghostscript =)
[23:52:11] <gilberth> White_Flame: What is a notional widget?
[23:52:38] <White_Flame> "button, label "foo", event-id :button-1" etc
[23:52:46] <gilberth> humansect: Ghostscript can't do that. And it's very slow otherwise I would have considered using Ghostscript for graphics output.
[23:53:13] <humasect> display ghostscript
[23:53:34] <gilberth> White_Flame: Ok. What about lists and those multi-column lists?
[23:53:35] <White_Flame> display mortally-challenged script, thankyouverymuch
[23:53:40] <humasect> there is a pizza ordering app in PS and i ran it with DGS and it was well
[23:53:59] <White_Flame> gilberth: same as any other toolkit interface
[23:54:00] <humasect> gilberth: NSBrowser thank you small talk, the only way to hierarchy 
[23:55:09] <pl> NeWS was separate evolution than Display Postscript, but I believe a lot of stuff could be ported somewhat easily 
[23:55:12] <gilberth> White_Flame: Could we compile what widgets toolkits of today commonly provide?
[23:55:28] <White_Flame> is wxwidgets still a reasonable reference for that?
[23:55:49] <White_Flame> also, in my idea, the display server wouldn't care.  it'd basically just be rpc routing from client to its requested toolkit server
[23:55:56] <gilberth> idk. WxWidgets used to be very nice and complete, indeed.
[23:55:59] <White_Flame> whatever its api might be
[23:55:59] <pl> One of the problems of NeWS was that afaik they didn't cache the toolkit in server 
[23:56:07] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[23:56:36] <gilberth> pl: You seem to have more information about NeWS than I do.
[23:56:55] <gilberth> But I have not yet done my homework.
[23:57:03] <pl> But you could pretty much do the equivalent of today's single page app, with data handling in client process and all of GUI in PS
[23:57:18] <pl> gilberth: DonHopkins is a prolific poster on HN 
[23:57:22] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[23:57:27] <pl> And has first hand account 
[23:57:43] * gilberth takes notes.
[23:57:55] <pl> Including developing NeWS version of SimCity 
[23:58:06] <humasect> what defines toolkit? this is where i think of themes like gtk+ or css files
[23:58:28] <humasect> NeWS sim city eh ?
[23:58:38] <White_Flame> imo, that which converts the idea of a "button" into actual pixels on screen, and defines the API to interact with your widgets
[23:59:03] <White_Flame> may or may not include flowing layout, scrollbars, etc
[23:59:05] <humasect> ohh.. ActiveX is what you will end up with 
[23:59:21] <pl> humasect: not really 
