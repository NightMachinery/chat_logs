[00:00:07] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[00:02:45] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[00:05:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:06:35] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:07:13] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[00:13:05] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b07b:b6be:41fa:d6a)
[00:15:41] *** Quits: leungbk (~user@2603-8000-1201-2dd2-e446-391d-2222-0a22.res6.spectrum.com) (Ping timeout: 256 seconds)
[00:16:29] *** Quits: sloorush (~sloorush@2401:4900:234a:ee9b:8aa3:1d87:a269:b8a8) (Ping timeout: 256 seconds)
[00:18:18] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:3875:d51d:97cc:8362)
[00:23:33] *** Joins: alp (~alp@user/alp)
[00:29:13] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[00:29:39] *** Joins: leungbk (~user@2603-8000-1201-2dd2-e446-391d-2222-0a22.res6.spectrum.com)
[00:29:46] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[00:30:16] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[00:31:03] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[00:32:42] *** Joins: bahamas (~lucian@84.232.140.158)
[00:33:12] <romesrf> Hi! I'm going to an upcoming small hackathon and am thinking about ideas for a project (unfortunately there's no theme)
[00:33:18] <romesrf> Has anyone any?
[00:35:02] *** Quits: leungbk (~user@2603-8000-1201-2dd2-e446-391d-2222-0a22.res6.spectrum.com) (Ping timeout: 260 seconds)
[00:35:51] *** Quits: Graham31415 (~Graham314@5.33.52.156) (Quit: Client closed)
[00:37:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[00:37:50] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:39:52] *** Quits: kuribas (~user@ptr-25vy0i7hp9xee3gx8cn.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[00:40:40] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[00:42:34] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:45:21] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 252 seconds)
[00:45:59] *** Joins: mud (~mud@user/kadoban)
[00:46:44] *** Joins: leungbk (~user@2603-8000-1201-2dd2-e446-391d-2222-0a22.res6.spectrum.com)
[00:48:47] *** Joins: DELL (~DELL@eth-east-parth2-46-193-64-159.wb.wifirst.net)
[00:50:39] *** Joins: Pickchea (~private@user/pickchea)
[00:50:45] *** Quits: dcoutts__ (~duncan@host86-167-206-34.range86-167.btcentralplus.com) (Remote host closed the connection)
[00:50:46] *** Quits: DELL (~DELL@eth-east-parth2-46-193-64-159.wb.wifirst.net) (Client Quit)
[00:51:03] *** Joins: dcoutts__ (~duncan@host86-167-206-34.range86-167.btcentralplus.com)
[00:54:57] *** lawt2 is now known as lawt
[00:56:16] *** Joins: Hemmo (~Hemmo@85-76-66-96-nat.elisa-mobile.fi)
[00:57:41] <Hemmo> Hello! I'm having trouble finding what exactly does '\x -> ' do in the filter function! 
[00:57:44] <Hemmo> Function here : 
[00:57:45] <Hemmo> Input: filter (\x -> length x > 4) ["aaaa","bbbbbbbbbbbbb","cc"]
[00:57:45] <Hemmo> Output: ["bbbbbbbbbbbbb"]
[00:58:36] <Hemmo> Oh wait it takes an element of the list?
[00:58:47] <Hemmo> Why does it have a \ in it though? What does it signify?
[01:06:19] *** Joins: Guest27 (~Guest27@c-174-63-99-174.hsd1.ma.comcast.net)
[01:06:35] <janus> Hemmo: the backslash is part of the anonymous function syntax
[01:07:09] <Guest27> Recommended .gitignore for cabal v2-style projects? At a minimum seems you want to ignore dist-newstyle/build
[01:09:05] <geekosaur> I'd ignore all of dist-newstyle
[01:09:42] <Guest27> Sweet, thanks
[01:10:07] <geekosaur> looking at my local projects, that and editor temp files are basically it
[01:10:19] <janus> Guest27: if you use tasty you may wanna ignore .tasty-retun-log
[01:10:46] <janus> also consider ignore *.dump-hi files
[01:11:55] <geekosaur> https://github.com/xmonad/xmonad/blob/master/.gitignore fwiw
[01:11:59] <Guest27> Don't use tasty but I need to adopt a testing framework soon...
[01:12:00] <Guest27> What produces .dump-hi?
[01:12:12] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[01:12:44] <Guest27> geekosaur Oh that's perfect
[01:12:51] <geekosaur> ghc with -ddump-hi ? ingeneral anything with suffix .dump-* comes from ghc -d*
[01:13:00] *** Joins: bahamas (~lucian@84.232.140.158)
[01:13:01] <Guest27> Ah okay
[01:13:24] <geekosaur> and -ddump-to-filoe but both cabal and stack turn that on
[01:13:33] <geekosaur> *-ddump-to-file
[01:14:51] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[01:17:19] <janus> Guest27: some of the files in the xmonad config are from before v2, i think
[01:17:28] *** Joins: dextaa_ (~dextaa@user/dextaa)
[01:17:41] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 256 seconds)
[01:18:30] <geekosaur> yeh, I don't think dist or .xmonad-sandbox are used these days.
[01:18:45] <geekosaur> (in fact I think sandbox support has been removed?)
[01:18:50] <Guest27> janus it looks like a good nuclear option for if I ever switch from cabal to stack or whatnot
[01:20:22] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[01:21:56] *** Joins: pavonia (~user@user/siracusa)
[01:23:05] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[01:24:24] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[01:28:45] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[01:30:11] *** Quits: karim (~karim@41.34.201.10) (Ping timeout: 250 seconds)
[01:31:47] *** Joins: pwug (~pwug@user/pwug)
[01:32:55] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[01:33:00] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[01:36:30] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[01:37:19] *** Quits: Hemmo (~Hemmo@85-76-66-96-nat.elisa-mobile.fi) (Remote host closed the connection)
[01:40:05] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[01:41:26] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[01:41:43] * geekosaur wonders why threadDelay takes an Int instead of a Micro. should work the same way but the type at least would document that it's microseconds. (Num instance should cover existing usage?)
[01:42:17] <geekosaur> well, hm, not for computed delays I guess. which means bikeshedding. :(
[01:42:26] *** Quits: fendor_ (~fendor@178.115.72.153.wireless.dyn.drei.com) (Remote host closed the connection)
[01:42:45] *** Joins: fendor_ (~fendor@178.115.72.153.wireless.dyn.drei.com)
[01:43:21] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:44:07] <tomsmeding> breaking changes are a sensitive topic these days
[01:47:21] <janus> geekosaur: Micro, where is that defined? doesn't seem easy to google
[01:47:25] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:47:25] <janus> @src Micro
[01:47:25] <lambdabot> Source not found. And you call yourself a Rocket Scientist!
[01:47:42] <tomsmeding> https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Fixed.html#t:Micro
[01:48:40] <janus> ah, so it is a breaking change. i thought it would be a synonym for Int somehow
[01:49:10] <janus> if the API is broken may as well ensure it can't be negative ;)
[01:51:24] *** Quits: leungbk (~user@2603-8000-1201-2dd2-e446-391d-2222-0a22.res6.spectrum.com) (Ping timeout: 240 seconds)
[01:52:12] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[01:52:14] <Guest27> Without negative arguments how will my time-traveling concurrency work???
[01:53:30] <janus> % :m +Control.Concurrent
[01:53:30] <yahb> janus: 
[01:53:36] <janus> % threadDelay (-1)
[01:53:36] <yahb> janus: 
[01:54:00] * janus looks around, expecting to see a glitch in the matrix
[01:54:32] <Guest27> You may not have felt it but everything shifted back by exactly one microsecond ;)
[01:55:32] <tomsmeding> janus: it eventually calls registerTimeout here, where the delay is the second argument https://hackage.haskell.org/package/base-4.15.0.0/src/GHC/Event/TimerManager.hs
[01:55:51] <geekosaur> right, my point was the Num instance would make literals work as they do now, but computed delays would lose because it'snot an Int any more
[01:55:59] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[01:56:13] <geekosaur> then again, iirc Fixed is backed by Integer so it also fixes a bug/wart
[01:56:25] <geekosaur> sadly that one has come upbefore and been rejected
[01:56:38] <monochrom> I wonder if time travel can extend Curry-Howard to cover classical logic. >:)
[01:57:04] <geekosaur> yep, backed by Integer
[01:57:13] <tomsmeding> also fun: "If humanity still exists in 2500 CE we will ned to be a bit more careful here."
[01:57:14] *** Joins: jaror[m] (~jaror@2001:470:69fc:105::265)
[01:58:05] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[02:00:51] <monochrom> I think currently it is only known that time-like loops imply P=NP. Merely. :)
[02:02:08] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[02:02:50] *** Joins: leungbk (~user@2603-8000-1201-2dd2-e446-391d-2222-0a22.res6.spectrum.com)
[02:05:11] *** Joins: Guest49 (~Guest49@2600:1700:2050:1040:5d4c:e061:4689:d06a)
[02:07:16] *** Joins: nsyd (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net)
[02:07:50] *** Quits: leungbk (~user@2603-8000-1201-2dd2-e446-391d-2222-0a22.res6.spectrum.com) (Ping timeout: 252 seconds)
[02:08:39] *** Quits: Guest49 (~Guest49@2600:1700:2050:1040:5d4c:e061:4689:d06a) (Quit: Client closed)
[02:09:21] *** Joins: charukiewicz[m] (~charukiew@2001:470:69fc:105::ded4)
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:14:29] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:14:37] *** Quits: ub (~Thunderbi@p200300ecdf158894bc3487aad6770a01.dip0.t-ipconnect.de) (Quit: ub)
[02:14:50] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[02:15:16] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[02:15:24] *** Joins: Guest|85 (~Guest|85@pool-108-41-198-29.nycmny.fios.verizon.net)
[02:15:34] *** Joins: Batzy (~quassel@user/batzy)
[02:16:39] *** Joins: zmt00 (~zmt00@user/zmt00)
[02:16:54] <dolio> I don't think so. The 'time travel' interpretation of excluded middle requires different things to happen the second time. So it's not a consistent loop.
[02:17:29] <Guest|85> Just have a quick question, when I try to run the command found on https://www.haskell.org/ghcup/ in powershell to try to get Haskell install on my PC, my powershell window just close itself and ghcup is not installed. How should I install it correctly?
[02:17:42] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 260 seconds)
[02:18:07] *** Joins: charukiewicz (~charukiew@2600:1702:a90:2750:724d:7bff:fe2b:f560)
[02:18:07] <maerwald> Guest|85: https://www.youtube.com/watch?v=bB4fmQiUYPw
[02:18:27] <Guest|85> thx I will check that
[02:18:57] <maerwald> make sure to not run in an admin session
[02:19:10] *** Joins: leungbk (~user@2603-8000-1201-2dd2-e446-391d-2222-0a22.res6.spectrum.com)
[02:19:27] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[02:19:35] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[02:19:53] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:20:01] <yushyin> i see the video is already paying off ;)
[02:20:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[02:21:16] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:21:23] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[02:26:21] *** Joins: alp (~alp@user/alp)
[02:26:35] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:b07b:b6be:41fa:d6a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:31:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[02:33:00] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (Quit: Ping timeout (120 seconds))
[02:33:17] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b07b:b6be:41fa:d6a)
[02:33:52] *** Joins: xsarnik (xbraun1@lounge.fi.muni.cz)
[02:34:02] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:35:55] <Guest|85> Turns out what's blocking me from running the script is because I forgot to turn off my antivirus program
[02:36:08] <Guest|85> X)
[02:36:16] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[02:36:37] *** Joins: vysn (~vysn@user/vysn)
[02:37:21] <monochrom> Personally I just let Windows Defender stay on and say no to any "stronger" ones that are just CPU hogs and disk hogs for no extra value.
[02:38:20] <Guest|85> Yeah that's probably the best
[02:38:32] <Guest|85> Thx for the help
[02:38:36] *** Quits: Guest|85 (~Guest|85@pool-108-41-198-29.nycmny.fios.verizon.net) (Quit: Connection closed)
[02:39:12] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Ping timeout: 252 seconds)
[02:40:42] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:41:18] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[02:41:35] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[02:42:27] <boxscape_> I've made an alias for `\f g -> fmap f . g` a few times, but I just now realized that Control.Arrow.^<< exists
[02:42:48] <boxscape_> tbf hoogle doesn't find it when you enter the specialized type of that function
[02:43:37] <boxscape_> oh wait I think you'd have to wrap it in Kleisli for that...
[02:44:36] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:45:03] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[02:45:31] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[02:45:46] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:49:55] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:49:55] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[02:50:07] *** Joins: sugar (~sugar@bras-base-hmtnon1497w-grc-46-67-70-68-108.dsl.bell.ca)
[02:50:19] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[02:50:37] *** Quits: fendor_ (~fendor@178.115.72.153.wireless.dyn.drei.com) (Remote host closed the connection)
[02:51:51] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[02:52:05] *** Quits: charukiewicz (~charukiew@2600:1702:a90:2750:724d:7bff:fe2b:f560) (Remote host closed the connection)
[02:53:17] *** Joins: charukiewicz (~charukiew@2600:1702:a90:2750:724d:7bff:fe2b:f560)
[02:54:03] *** Joins: acidjnk (~acidjnk@p200300d0c7049f30dd97d7382d55cf65.dip0.t-ipconnect.de)
[02:55:53] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[02:56:29] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Remote host closed the connection)
[02:59:40] <abastro[m]> :t fmap f . g
[02:59:40] <lambdabot> (Functor f, Show a1, Show a2, FromExpr b, FromExpr (f a1)) => a2 -> f b
[03:00:04] <monochrom> You may have better luck with \f g -> fmap f . g
[03:00:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[03:00:15] <abastro[m]> Oh wait
[03:00:16] <abastro[m]> My bad
[03:00:30] <abastro[m]> :t \f g -> fmap f . g
[03:00:31] <lambdabot> Functor f => (a1 -> b) -> (a2 -> f a1) -> a2 -> f b
[03:01:05] <geekosaur> you got some simple_reflect mixed upin there, yeh
[03:01:40] <abastro[m]> Oh. That type is straightforward
[03:02:13] <abastro[m]> Guess I just personally have never needed to shorten it
[03:04:20] *** Quits: michalz (~michalz@185.246.204.62) (Remote host closed the connection)
[03:04:50] <janus> is there a better alternative to generic-arbitrary? it seems abandoned
[03:04:59] <janus> @package generic-arbitrary
[03:04:59] <lambdabot> https://hackage.haskell.org/package/generic-arbitrary
[03:08:50] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[03:13:03] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:a9ba:a14e:e332:b83f) (Remote host closed the connection)
[03:13:47] <abastro[m]> Looks new enough to me except for lack of support for GHC 9.0+
[03:14:30] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[03:14:58] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[03:16:55] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[03:16:59] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:17:34] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[03:18:37] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[03:18:42] <[itchyjunk]> hmm
[03:19:16] <[itchyjunk]> I have a function Int -> [Int] -> (Int,Int)
[03:19:52] <[itchyjunk]> For that first input, i would like to apply different ints over time.. idk if map is the right thing to use here
[03:20:30] <abastro[m]> Wdym different inputs over time?
[03:20:40] <[itchyjunk]> I can map this function to a list of ints but i'd end up with partially applied functions to which i cna somehow apply ..
[03:20:47] <abastro[m]> You mean it is supplied by e.g. timer
[03:20:48] <[itchyjunk]> well i have fun x xs
[03:20:55] <[itchyjunk]> i want x to range over 0 through 9
[03:21:04] <[itchyjunk]> so fun 0 xs, fun 1 xs ...
[03:21:15] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 240 seconds)
[03:21:17] <[itchyjunk]> no no, not timer. time was the wrong choice of words
[03:21:38] <abastro[m]> I guess the way I would do is
[03:21:45] <[itchyjunk]> I just need to use this function 10 times. where the first argument changes from 0 through 9
[03:21:57] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[03:22:00] <[itchyjunk]> and the second argument is the same list
[03:22:01] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[03:22:02] <monochrom> map (\i -> fun i xs) [0, 1, 2, ...]
[03:22:14] <abastro[m]> `map (flip fun xs) [1..9]` assuming you want list
[03:22:27] <monochrom> [fun i xs | i <- [0, 1, 2, ...]]
[03:22:41] <abastro[m]> Or `\i -> fun i xs` instead of flip..
[03:22:45] *** Joins: son0p (~ff@181.136.122.143)
[03:23:15] <[itchyjunk]> oh! the list comprehension one made sense
[03:23:23] <[itchyjunk]> hmm not sure about that lambda function one
[03:23:32] <abastro[m]> `do i <- [1..9]; pure (fun i xs)`
[03:23:37] *** Quits: leungbk (~user@2603-8000-1201-2dd2-e446-391d-2222-0a22.res6.spectrum.com) (Ping timeout: 240 seconds)
[03:23:56] <abastro[m]> The lambda one just maps the function over the list
[03:24:18] <abastro[m]> map f [x1, x2, ...] = [f x1, f x2, ...]
[03:24:26] <monochrom> [fun 0 xs, fun 1 xs, fun 2 xs] = [(\i -> fun i xs) 0, (\i -> fun i xs) 1, (\i -> fun i xs) 2] = map (\i -> fun i xs) [0,1,2].
[03:24:33] <monochrom> This is just vanilla refactoring.
[03:24:47] <abastro[m]> > map (+2) [0, 2, 3, 1]
[03:24:49] <lambdabot>  [2,4,5,3]
[03:25:38] <abastro[m]> > map (\i -> i + 2) [0, 2, 3, 1]
[03:25:39] <lambdabot>  [2,4,5,3]
[03:25:40] <monochrom> This is why I disagree with "don't need math for haskell". You need math skills, such as doing algebraic factoring.
[03:25:56] <monochrom> You don't need the quadratic formula or volume of sphere, sure.
[03:26:00] <abastro[m]> Ignore `(+2)`
[03:26:08] <[itchyjunk]> ahh
[03:27:25] <abastro[m]> monochrom: it would make the claim "Too mathy for me" valid tho
[03:27:58] <boxscape_> monochrom to be fair it's possible to pick those up while learning Haskell, though I'm sure coming into it already having that skill set is helpful
[03:28:12] <monochrom> It is the whole point of FP. To just do algebra and you can understand my code.
[03:28:19] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[03:28:27] <monochrom> As opposed to "imagine how to execute".
[03:28:53] <abastro[m]> I think dealing with equals sign is not much of math ppl imagine
[03:29:24] <abastro[m]> It is not like calculating integration or something
[03:29:42] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:30:28] <abastro[m]> Hm I guess I'd like symbolic calculator for haskell
[03:30:38] <abastro[m]> Tho idk what would be normal form
[03:30:49] <monochrom> My impression is that people who self-identify as "bad at math" already struggle with the full logical conclusions of equality. Though, I have no data.
[03:31:00] <[itchyjunk]> So close to being able to solve this : https://i.imgur.com/1K4VUux.png
[03:31:07] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:31:08] <[itchyjunk]> I can count how often each digit appears now.
[03:31:08] <monochrom> The following next hurdle though, I saw it in students first-hand.
[03:31:14] <[itchyjunk]> https://bpa.st/NA6A
[03:31:35] <monochrom> Define f(x)=x+3, g(x)=x*4.  People struggle with f(g(x)).
[03:32:01] <abastro[m]> Yea it is hard
[03:32:05] <monochrom> Here is why. Their mental model is like BASIC. Have a global variable x, same x for both f and g.
[03:32:19] <abastro[m]> Granted, I wonder how ppl would even program without the ability
[03:32:23] <abastro[m]> Oh wait
[03:32:32] <abastro[m]> Same global variable, 
[03:32:43] <monochrom> To find f(1), set global x to 1.  To find g(2), set global x to 2.  Now f(g(x)) is a paradox.
[03:32:58] <abastro[m]> Think that could be fixed by using different symbol.. maybe not? :<
[03:33:19] <abastro[m]> So ppl's minds do operate in imperative way :<
[03:33:22] <boxscape_> I kind of wish early mathematicians had written (x)f instead
[03:34:24] <dolio> Variables are often poorly explained in mathematics, so it's not entirely the students' fault.
[03:34:38] <abastro[m]> Then we won't have haskell notation
[03:34:56] <abastro[m]> Of having `f x y z` with currying
[03:34:58] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:3875:d51d:97cc:8362) (Remote host closed the connection)
[03:35:22] <monochrom> You can have "z y x f" with currying :)
[03:35:39] <abastro[m]> Ewww
[03:35:58] <boxscape_> kind of a RPN vibe
[03:36:16] <abastro[m]> (((z y) x) f)
[03:36:26] <abastro[m]> :^)
[03:36:27] <geekosaur> forth
[03:36:34] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:c18a:999a:aef5:52af)
[03:37:38] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[03:37:48] <abastro[m]> Perhaps haskell is too hard for ppl..
[03:38:09] <geekosaur> <cynic> thinking is too hard for people
[03:38:12] <abastro[m]> Tho I wonder why ppl do not find programming hard
[03:38:46] <abastro[m]> Indeed, thinking is too hard for ppl. You can see it everywhere nowadays :facepalm:
[03:38:55] <monochrom> You may have a selection bias. People who survive 1st-year CS don't find programming hard.
[03:39:00] <dolio> Because the problem isn't actually that Haskell is too hard for people.
[03:39:07] <[itchyjunk]> I find programming hard.
[03:39:08] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[03:40:08] <monochrom> I think I saw first-hand when a friend taught a "computer stuff for non-CS-majors" course and taught a little bit of python scripting. The students struggled with even for-loops.
[03:40:20] <monochrom> And to think it was python, not even haskell.
[03:40:43] <boxscape_> can't struggle with for loops if you language doesn't have for loops
[03:40:46] <hpc> i mean... i struggle with loops in python
[03:40:50] *** Joins: jakalx (~jakalx@base.jakalx.net)
[03:40:53] <alt-romes> boxscape_: lol
[03:40:55] <monochrom> Haha OK.
[03:41:07] <monochrom> But they struggled with almost everything in python.
[03:41:24] <monochrom> Supposedly the most newbie-friendly language.
[03:41:29] <alt-romes> boxscape_: for [1..n] (do stuff)
[03:41:36] <boxscape_> cheating
[03:41:41] <alt-romes> hahaha ;)
[03:41:41] <monochrom> Probably they struggled with merely variables, too.
[03:42:20] * hpc . o O ( fizzbuzz is a legitimate job interview filtering tool )
[03:42:23] <alt-romes> monochrom: I've seen it too in those sort of non-CS-majors
[03:42:26] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 252 seconds)
[03:42:36] <abastro[m]> Oh I see, perhaps programming is hard but ppl do not realize
[03:42:43] <alt-romes> fizzbuzz = fizzbuzz "See, it compiles"
[03:43:00] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 252 seconds)
[03:43:26] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[03:43:33] <abastro[m]> And just think after learning imperative programming, that they know everything they need
[03:43:40] <abastro[m]> And refuse to learn further
[03:43:44] <hpc> there's a mindset of logic and precision that's required for programming (and a lot of other sciencey stuff), that's likely what's hard
[03:43:50] <abastro[m]> Ya that is perhaps what is happening
[03:44:23] <abastro[m]> And ppl somehow say python is easier to learn
[03:44:25] <hpc> i want to call it "rationality" but that's a much broader and deeper term
[03:44:32] <abastro[m]> ..like, it just has lots of resources
[03:44:43] <hpc> and no matter what language you use, even if it's excel formulas
[03:44:48] <hpc> you need at least a little bit of that mindset
[03:45:27] <boxscape_> helps even if you use natural language
[03:46:06] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[03:46:06] <hpc> yeah
[03:46:16] <hpc> almost to the point that scientific literacy is the new book-literacy
[03:46:17] <abastro[m]> Doesn't help with daily job tho
[03:46:26] <hpc> (complete with percentage of population that's skilled at it)
[03:46:35] <abastro[m]> Book literacy?
[03:46:36] <abastro[m]> Oh
[03:46:38] <abastro[m]> I see.
[03:46:38] <boxscape_> hm yeah
[03:47:02] <abastro[m]> And we see ppl revolting against authority of scientific literacy
[03:47:23] <hpc> there's a lot of logical steps to follow in order to go from "i need to do my taxes" to "i should install an adblocker and google carefully so i don't empty my bank account"
[03:47:28] <abastro[m]> Then there is my theory of flat earthers origin, one of the revolts
[03:47:52] <hpc> much like the logical steps from "i am hungry" to "i should read this year's almanac so i don't deplete the nitrogen in my fields"
[03:48:47] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[03:49:12] <abastro[m]> I guess the skill is not much help in real life tho, seeing those who lack the skill thrive in the society
[03:49:24] <hpc> (fun fact - textiles specialists were the first commercial programmers, and farmers are behind all the recent right-to-repair bills in the US)
[03:49:53] <geekosaur> people thrived when literacy was rare, too
[03:49:57] <hpc> eh, i wouldn't say they thrived
[03:50:33] <abastro[m]> I mean, those who lack the skill thrive "now"
[03:51:02] <hpc> when i hear "thrive" i think like the nobility who spend their lives learning horse riding and astronomy for fun
[03:51:07] <hpc> or people who fly to orbit for fun
[03:51:15] <abastro[m]> Somehow my brain connect the dot with "University is dying in current society"
[03:51:27] <hpc> not people who are negative net worth most of their lives and retire at the age of 70
[03:51:40] <abastro[m]> Yea, born as nobility greatly help there
[03:52:09] <abastro[m]> Retire at age 70 sounds like success tbh
[03:52:42] <abastro[m]> I heard ppl at those ages crave having jobs
[03:53:05] <hpc> ... this is very off topic lol
[03:53:24] <abastro[m]> Oh wait
[03:53:36] <abastro[m]> This chat is for haskell right
[03:53:39] <abastro[m]> Apparently I forgot
[03:53:44] <hpc> in theory, yeah :D
[03:54:04] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[03:54:05] <abastro[m]> (Btw is there haskell-offtopic bridged over matrix)
[03:54:06] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 245 seconds)
[03:54:17] <hpc> all of libera is bridged, i think?
[03:54:29] <geekosaur> I see matrix folk there, don'tknow what it's called matrix side
[03:54:48] <abastro[m]> I see, let me try
[03:55:54] <abastro[m]> Eh idk how
[03:57:31] <abastro[m]> Hm, does anyone got a symbolic calculator which calculates haskell terms into sensible normal forms?
[03:57:36] <boxscape_> abastro[m] /join #haskell-offtopic:libera.chat
[03:57:51] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:58:02] <abastro[m]> Thank you!!
[03:58:07] <boxscape_> np
[03:58:57] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 252 seconds)
[04:00:07] <abastro[m]> As ppl p much live with calculator nowadays, I think a symbolic calculator for haskell would greatly help.
[04:04:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[04:04:25] <Guest27> Hmmm... sounds like a fun project
[04:04:25] <Guest27> Perhaps peek inside GHC's frontend
[04:05:10] <geekosaur> not sure ghc would helpmuch, ghc'sidea of normal form is core
[04:05:16] <geekosaur> maybe hugs?
[04:05:17] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[04:09:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[04:09:53] *** Quits: Benzi-Junior (~BenziJuni@dsl-149-64-179.hive.is) (Quit: ZNC 1.8.2 - https://znc.in)
[04:09:58] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[04:14:24] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[04:16:38] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:21:51] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Ping timeout: 256 seconds)
[04:23:09] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[04:23:16] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[04:23:48] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:156d:4cd3:81cf:f50c) (Ping timeout: 240 seconds)
[04:25:51] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2b3e:70f8:165f:be99)
[04:25:54] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[04:26:16] *** Joins: nicbk (~nicbk@user/nicbk)
[04:26:52] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[04:28:12] *** Quits: sugar (~sugar@bras-base-hmtnon1497w-grc-46-67-70-68-108.dsl.bell.ca) (Quit: Client closed)
[04:28:56] <Axman6> > cos a ^ 2 + sin a ^ 2 :: Expr
[04:28:57] <lambdabot>  cos a * cos a + sin a * sin a
[04:29:11] *** Quits: acidjnk (~acidjnk@p200300d0c7049f30dd97d7382d55cf65.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:29:13] *** Quits: sciencentistguy (~sciencent@hacksoc/ordinary-member) (Ping timeout: 256 seconds)
[04:29:29] <abastro[m]> Ohh
[04:29:59] <geekosaur> @hackage simple-reflect
[04:29:59] <lambdabot> https://hackage.haskell.org/package/simple-reflect
[04:29:59] <abastro[m]> > foldMap First [a, b, c] :: Expr
[04:30:00] <lambdabot>  error:
[04:30:00] <lambdabot>      • Couldn't match expected type ‘Expr’ with actual type ‘First a0’
[04:30:00] <lambdabot>      • In the expression: foldMap First [a, b, c] :: Exprerror:
[04:30:15] <Axman6> > iterate reduce (a * 7) :: Expr
[04:30:17] <lambdabot>  error:
[04:30:17] <lambdabot>      • Couldn't match expected type ‘Expr’ with actual type ‘[Expr]’
[04:30:17] <lambdabot>      • In the expression: iterate reduce (a * 7) :: Expr
[04:30:22] <Axman6> > iterate reduce (a * 7 :: Expr)
[04:30:24] <lambdabot>  [a * 7,a * 7,a * 7,a * 7,a * 7,a * 7,a * 7,a * 7,a * 7,a * 7,a * 7,a * 7,a *...
[04:30:43] <Axman6> > iterate reduce (a+a+a+a+a :: Expr)
[04:30:44] <lambdabot>  [a + a + a + a + a,a + a + a + a + a,a + a + a + a + a,a + a + a + a + a,a +...
[04:30:50] <abastro[m]> foldMap First [a :: Expr, b, c]
[04:31:08] <Axman6> need more ?
[04:31:09] <Axman6> >
[04:32:21] <abastro[m]> > foldMap First [a :: Expr, b, c]
[04:32:22] <lambdabot>  error:
[04:32:22] <lambdabot>      • Couldn't match expected type ‘Maybe a’ with actual type ‘Expr’
[04:32:22] <lambdabot>      • In the expression: a :: Expr
[04:33:15] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[04:33:58] <abastro[m]> Uhm a bit tough to use
[04:34:12] <geekosaur> yes
[04:34:18] <geekosaur> and more than a bit limited
[04:34:29] <geekosaur> read the docs for the simple-reflect package for details
[04:34:36] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[04:34:37] <geekosaur> (I pointed to it earlier)
[04:35:18] <geekosaur> that said, it can do a surprising amount of stuff
[04:36:19] *** Joins: fluxit (~fluxit@techsmix.net)
[04:36:22] <geekosaur> > foldr f z [a,b,c]
[04:36:23] <lambdabot>  f a (f b (f c z))
[04:36:55] <geekosaur> > foldr (*) z [a,b,c]
[04:36:56] <lambdabot>  a * (b * (c * z))
[04:37:14] <abastro[m]> Interesting!
[04:37:29] <abastro[m]> > foldMap First [a, b, c]
[04:37:30] <lambdabot>  error:
[04:37:30] <lambdabot>      • Couldn't match expected type ‘Maybe a’ with actual type ‘Expr’
[04:37:30] <lambdabot>      • In the expression: a
[04:37:39] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:37:42] <abastro[m]> Uhm that is not working
[04:38:38] <geekosaur> First is a bit too tricky for it
[04:38:55] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:39:53] <boxscape_> what output would you expect from foldMap First [a, b, c]?
[04:42:20] *** Joins: AdamConner-Sax[m (~adamcsmat@2001:470:69fc:105::1:e2c8)
[04:42:55] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[04:43:25] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[04:44:23] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[04:45:55] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[04:46:24] <abastro[m]> Hmm
[04:46:34] <abastro[m]> > foldMap f [a, b, c]
[04:46:35] <lambdabot>  error:
[04:46:35] <lambdabot>      • Ambiguous type variable ‘a0’ arising from a use of ‘show_M904037765254...
[04:46:35] <lambdabot>        prevents the constraint ‘(Show a0)’ from being solved.
[04:46:56] <abastro[m]> Wait even that does not work
[04:47:02] *** Joins: hgolden (~hgolden2@cpe-172-251-233-141.socal.res.rr.com)
[04:47:07] <abastro[m]> I just want it to try simplify
[04:47:32] <abastro[m]> Perhaps `First a <> First b <> First c` would do, idk
[04:48:06] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:48:41] <boxscape_> I was going to say maybe foldMap f [a, b, c] would work if Expr had a Monoid instance, but it does
[04:49:13] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[04:49:16] <boxscape_> > mconcat [a, b, c]
[04:49:17] <lambdabot>  mconcat [a,b,c]
[04:49:22] <boxscape_> great
[04:49:36] <monochrom> What is the type of First?
[04:50:01] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:c18a:999a:aef5:52af) (Quit: bye)
[04:50:23] <monochrom> Equivalently, why did the error message bring up Maybe?
[04:51:41] <boxscape_> > foldMap f [a, b, c] :: Expr
[04:51:42] <lambdabot>  f a <> f b <> f c <> mempty
[04:51:44] <boxscape_> ^ abastro[m]
[04:52:03] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Quit: Konversation terminated!)
[04:52:20] <abastro[m]> Yea, so I think even with First
[04:52:34] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[04:52:40] <abastro[m]> It could have gave me `First a <> First b <> First c <> mempty` but nah
[04:52:49] <boxscape_> :t First
[04:52:50] <lambdabot> Maybe a -> First a
[04:52:56] <abastro[m]> Idk, I guess I have many complaints
[04:53:08] <hpc> it can't unify Expr with (Maybe a)
[04:53:14] <abastro[m]> Ya, the type is not matching
[04:53:24] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:746b:7a76:5f:680b) (Quit: Konversation terminated!)
[04:53:25] <boxscape_> abastro[m] I think you could make it work, but you'd need a FromExpr instance for `Maybe a`
[04:53:26] <hpc> Expr isn't a magical fill-stuff-in-wherever type, it's basically String
[04:53:35] <monochrom> Type checker says "the sentiment is mutual" :)
[04:53:38] <abastro[m]> I mean sometimes the user wants that kind of simplification.
[04:53:43] <hpc> you could make an Expr that renders as "First" though
[04:56:15] *** Quits: charukiewicz (~charukiew@2600:1702:a90:2750:724d:7bff:fe2b:f560) (Remote host closed the connection)
[04:56:58] *** Quits: grimey63 (~grimey@pool-108-26-37-118.syrcny.east.verizon.net) (Quit: Connection closed)
[04:57:21] *** Joins: nicbk (~nicbk@user/nicbk)
[04:57:30] *** Joins: charukiewicz (~charukiew@2600:1702:a90:2750::3c)
[04:58:35] <boxscape_> > foldMap First [f, g, h] :: First Expr
[04:58:37] <lambdabot>  First {getFirst = Just f}
[04:58:53] <boxscape_> ^ abastro[m] I did this by first defining @let instance FromExpr (Maybe Expr) where fromExpr e = Just e
[04:59:31] <boxscape_> unfortunately doesn't really take into account the logic of First
[04:59:45] <boxscape_> or illustrates it I mean
[04:59:52] <boxscape_> because no Nothing elements can exist with this instance
[04:59:53] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[05:00:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[05:00:29] <abastro[m]> Hm, interesting
[05:02:38] <boxscape_> abastro[m] generally Expr from simple-reflect relies on being able to make free instance for classes, so when you have specific behavior like First that's not given by a class, it's less useful
[05:02:56] <boxscape_> (except for something like foldr where you can illustrate how it works on a container of expressions, I suppose)
[05:03:53] *** Joins: notzmv (~zmv@user/notzmv)
[05:06:14] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:08:29] <abastro[m]> Hm, I guess what I want is actually
[05:09:29] * abastro[m] sent a hs code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/91f90df4179b292c9a860c4637424f47bda61ae2
[05:09:43] <boxscape_> yeah that makes sense
[05:10:28] <boxscape_> abastro[m] you might be interested in this which kind of goes in that direction https://youtu.be/xZmPuz9m2t0
[05:10:47] <Axman6> > foldMap (First . Just) [a,b,c] :: First Expr
[05:10:48] <lambdabot>  First {getFirst = Just a}
[05:11:20] <boxscape_> alternatively this which is a much shorter video but a similar idea https://youtu.be/SVRYcrhRCes
[05:13:08] <abastro[m]> Thx, I'll take a look
[05:18:43] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[05:19:13] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[05:22:00] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[05:22:27] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[05:22:39] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:25:27] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:25:27] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:25:27] *** Joins: wroathe (~wroathe@user/wroathe)
[05:27:09] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[05:27:42] <Zemyla> > (a + b) * c
[05:27:44] <lambdabot>  (a + b) * c
[05:28:11] *** Joins: Guest|6 (~Guest|6@189.128.188.226)
[05:29:00] <Guest|6> hi all, I am having some trouble installing haskell, I was wondering if someone could help me please
[05:32:12] <sm> what's your operating system and what have you tried, Guest|6 
[05:34:54] <Guest|6> I'm on windows 10, I tried installing haskell using the steps from the ghcup guide, and when I'm asked to install Msys2 it will throw an error
[05:35:47] <Axman6> can you share the error?
[05:37:33] <Axman6> @where paste
[05:37:33] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[05:38:07] <Guest|6> Exec: Error executing command curl.exe with arguments '-o
[05:39:22] <koz> Suppose I have v :: Vector a, and I want [Vector a], which is comprised of every sub-vector of v. What's the easiest way to write this?
[05:40:13] <koz> (specifically, proper sub-vector, aka not including v itself)
[05:40:13] <Axman6> surely there's a vector slice function?
[05:40:23] *** Quits: dsrt^ (~dsrt@96-67-120-105-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[05:40:31] <koz> Axman6: Yeah, I can do it with manual slicing, but I don't necessarily want _contiguous_ sub-vectors.
[05:40:41] <Axman6> oh, that's less fun...
[05:40:45] <koz> (like, non-contiguous ones should be included too)
[05:40:53] <Axman6> hmm, I'm sure there's a filerM trick
[05:41:11] <Axman6> > filterM (const [False,True] [1,2,3]
[05:41:12] <lambdabot>  <hint>:1:36: error:
[05:41:12] <lambdabot>      parse error (possibly incorrect indentation or mismatched brackets)
[05:41:17] <Axman6> > filterM (const [False,True]) [1,2,3]
[05:41:18] <lambdabot>  [[],[3],[2],[2,3],[1],[1,3],[1,2],[1,2,3]]
[05:41:32] <koz> That's 100% what I want, except the last one.
[05:41:39] <koz> Could a list comprehension do this?
[05:41:40] <Axman6> init :)
[05:41:51] <koz> I guess init would work.
[05:41:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[05:42:00] <koz> Something like
[05:42:02] <Axman6> > dropb 1 $ filterM (const [True,False]) [1,2,3]
[05:42:03] <lambdabot>  error:
[05:42:03] <lambdabot>      • Variable not in scope: dropb :: t0 -> [[b0]] -> t
[05:42:03] <lambdabot>      • Perhaps you meant one of these:
[05:42:06] <Axman6> > drop 1 $ filterM (const [True,False]) [1,2,3]
[05:42:08] <lambdabot>  [[1,2],[1,3],[1],[2,3],[2],[3],[]]
[05:42:11] *** Quits: Guest|6 (~Guest|6@189.128.188.226) (Quit: Connection closed)
[05:42:30] <koz> [v' | v <- Vector.filterM (const [False, True]) v, v' /= v]? 
[05:43:08] <Axman6> if you know where that once case is going to be, then just exclude it - it's either going to be the first or last element deopending on the order of True and False
[05:43:25] <koz> > [v' | v' <- filterM (const [False, True]) [1, 2, 3], v' /= [1, 2, 3]]
[05:43:27] <lambdabot>  [[],[3],[2],[2,3],[1],[1,3],[1,2]]
[05:43:29] <koz> :D
[05:43:32] <Axman6> you're making it (more) O(n^2) by adding that check
[05:43:48] <Axman6> since it checks every single vector. just drop the last one with init
[05:43:58] <koz> I guess that works.
[05:44:01] <koz> Thanks!
[05:44:16] <abastro[m]> filterM is honestly impressive
[05:44:25] <abastro[m]> Had hard time replicating the behavior in Scala
[05:45:02] *** Joins: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[05:45:24] <koz> Yeah, I always forget it exists, and then realize you can do so many things with it.
[05:45:37] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:46:11] <koz> OK, so how about this: I have v :: Vector Word8, and I wanna make [Vector Word8] such that they're all the same length as v, but have _at least one_ element somewhere be smaller than its corresponding position in v.
[05:46:35] <koz> Is that some kind of traverse + init combo again?
[05:46:43] <Axman6> > filterM (const [True,False]) "abcd" -- probably a better example since it's more concise
[05:46:44] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[05:46:44] <lambdabot>  ["abcd","abc","abd","ab","acd","ac","ad","a","bcd","bc","bd","b","cd","c","d...
[05:47:03] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[05:47:17] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[05:47:29] <koz> > traverse (\x -> [0 .. x]) [1, 2, 3]
[05:47:31] <lambdabot>  [[0,0,0],[0,0,1],[0,0,2],[0,0,3],[0,1,0],[0,1,1],[0,1,2],[0,1,3],[0,2,0],[0,...
[05:47:44] <koz> > last . traverse (\x -> [0 .. x]) $ [1, 2, 3]
[05:47:45] <lambdabot>  [1,2,3]
[05:47:48] <koz> HMMMM
[05:48:08] <koz> > last . traverse (\x -> [0 .. x]) $ [0, 1, 2]
[05:48:10] <lambdabot>  [0,1,2]
[05:48:14] <koz> OK yeah, works.
[05:48:25] <koz> You could probably spell the filterM example with traverse too somehow.
[05:49:05] <Axman6> foo v = replicate (V.length v) (V.replicate (V.length v) 0) :P
[05:49:26] *** Quits: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Quit: Palaver https://palaverapp.com)
[05:49:28] <koz> Wat.
[05:49:44] *** Joins: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[05:50:01] <Axman6> unless v has length 1, that will produce a list of vectors where at least one element has a value lower than its index
[05:50:20] <Axman6> because all elements are 0 - problem solved!
[05:51:10] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[05:51:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[05:52:13] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:b07b:b6be:41fa:d6a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:52:39] *** Quits: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[05:52:45] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:52:47] *** Joins: Techcable (~Techcable@user/Techcable)
[05:55:29] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b07b:b6be:41fa:d6a)
[05:55:37] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[05:56:57] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:b07b:b6be:41fa:d6a) (Client Quit)
[06:00:27] *** Quits: vglfr (~vglfr@88.155.11.162) (Ping timeout: 256 seconds)
[06:00:50] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[06:03:20] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[06:04:45] *** Joins: haasn` (~nand@haasn.dev)
[06:05:33] *** Joins: alp (~alp@user/alp)
[06:06:15] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:06:24] *** Joins: vysn (~vysn@user/vysn)
[06:08:43] <abastro[m]> Lmao
[06:08:45] *** Quits: haasn (~nand@haasn.dev) (Ping timeout: 256 seconds)
[06:08:45] *** haasn` is now known as haasn
[06:11:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[06:11:34] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[06:12:28] *** Joins: lainon (lainon@gateway/vpn/protonvpn/lainon)
[06:19:24] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[06:24:49] *** Quits: jao (~jao@45.152.183.53) (Remote host closed the connection)
[06:29:24] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[06:35:40] *** Joins: y04nn (~y04nn@2a03:1b20:1:e011::a19e)
[06:41:43] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[06:43:57] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[06:45:04] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[06:51:29] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[06:53:43] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[07:00:34] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[07:04:15] *** Joins: ubert1 (~Thunderbi@p200300ecdf1588c644ba34ac9ed54fc8.dip0.t-ipconnect.de)
[07:04:55] *** Quits: ubert (~Thunderbi@p200300ecdf158894f1c8f499466ba149.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:04:55] *** ubert1 is now known as ubert
[07:04:55] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[07:07:14] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[07:24:20] *** Joins: k8yun (~k8yun@user/k8yun)
[07:24:39] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[07:25:33] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[07:26:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[07:27:33] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[07:28:46] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:29:18] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[07:34:32] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[07:35:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[07:35:58] *** Joins: vglfr (~vglfr@88.155.11.162)
[07:38:08] *** Joins: nicbk (~nicbk@user/nicbk)
[07:40:46] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:47:55] *** Quits: lainon (lainon@gateway/vpn/protonvpn/lainon) (Quit: WeeChat 3.4)
[07:50:12] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[07:55:25] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[07:56:30] <Axman6> Where's the best place to ask about ghcup? the docs have instructions for bash completion ut provides zsh and fish completion files, and I don't know how to install those
[07:57:43] <janus> Axman6: i think this is a good place to ask but try asking when europe is awake
[07:58:25] <Axman6> WAKE UP EUROPE!
[07:59:25] <Axman6> On an unrelated note... are the colours of the ghcup site intentionally the ukrainian flag?
[07:59:46] *** Joins: mbuf (~Shakthi@223.178.96.253)
[08:05:59] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[08:06:15] *** Quits: belphegor666 (~satan@ip-046-223-002-003.um13.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[08:06:39] *** Joins: belphegor666 (~satan@ip-046-223-002-003.um13.pools.vodafone-ip.de)
[08:07:10] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[08:08:38] <abastro[m]> Oh, the color scheme changed, I see
[08:08:57] <abastro[m]> Very courageous.. perhaps at cost of losing Russian userbase
[08:13:54] <Axman6> might hurt our Oleg-factor somewhat
[08:18:02] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[08:19:41] <koz> Oleg K is basically OCamling now, and Oleg G is a Finn IIRC.
[08:19:45] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Quit: Connection closed)
[08:20:23] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[08:21:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[08:22:12] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[08:23:16] *** Joins: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[08:23:33] *** Quits: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[08:27:53] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[08:28:13] *** Quits: vglfr (~vglfr@88.155.11.162) (Ping timeout: 240 seconds)
[08:29:20] <sm> also #haskell-ghcup:libera.chat 
[08:29:44] <sm> but.. shell completions ? really ? :)
[08:29:46] <Axman6> great, thanks
[08:29:57] <Axman6> well, if they're there, why not document how to use them
[08:30:02] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[08:30:11] <sm> that's fair enough :)
[08:31:23] *** Joins: haasn (~nand@haasn.dev)
[08:41:42] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:46:13] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[08:47:03] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[08:49:54] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[08:51:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[08:53:14] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[08:57:49] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[08:58:07] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:59:17] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[09:08:06] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[09:10:05] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[09:11:15] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 240 seconds)
[09:17:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[09:19:18] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:22:05] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[09:24:06] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[09:24:13] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[09:30:15] *** Joins: vglfr (~vglfr@88.155.11.162)
[09:32:29] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[09:33:49] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[09:40:15] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[09:41:26] *** Joins: bahamas (~lucian@84.232.140.158)
[09:43:49] *** Joins: nicbk (~nicbk@user/nicbk)
[09:50:17] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[09:51:37] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[09:52:56] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[09:58:33] *** Joins: zmt00 (~zmt00@user/zmt00)
[10:02:17] *** Quits: nsyd (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net) (Ping timeout: 240 seconds)
[10:06:21] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 252 seconds)
[10:12:51] <abastro[m]> Oleg-factor XD
[10:21:01] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[10:22:04] *** Joins: nsyd (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net)
[10:26:31] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[10:31:39] *** Quits: vglfr (~vglfr@88.155.11.162) (Ping timeout: 252 seconds)
[10:33:35] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 256 seconds)
[10:36:57] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Ping timeout: 240 seconds)
[10:37:05] *** Joins: cheater (~Username@user/cheater)
[10:43:05] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[10:55:37] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 240 seconds)
[10:56:20] <koz> Slightly meta question: is there some abstraction that unifies mapping, filtering and folding? In the sense that any of those can be described with said abstraction.
[10:56:57] <Axman6> Witherable perhaps? jackdk talks about it often but I haven't run into it myself
[10:57:17] <Axman6> not a single abstraction, but it extends the idea of filtering to Traversables
[10:57:29] <Axman6> (I think)
[10:57:37] <jackdk> since you can recreate foldMap with traverse, perhaps you can do everything with witherable?
[10:57:48] *** Joins: vglfr (~vglfr@88.155.11.162)
[10:57:51] <abastro[m]> (Well mapping is implemented by folding tho) .. but yea filtering requires sth like witherable
[10:58:51] <koz> This Witherable? https://hackage.haskell.org/package/witherable-0.4.2/docs/Data-Witherable.html#t:Witherable
[10:59:54] <koz> (also, that function argument should totes be 'a -> Compose f Maybe b')
[11:00:01] <jackdk> with `f ~ forall m . Const m` you can foldmap with that, but you're traverable anyway
[11:00:26] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[11:00:51] <koz> (heck, it should _really_ be Star (Compose f Maybe) a b)
[11:03:15] <Axman6> what's Star?
[11:03:22] <koz> Kleisli with more instances.
[11:03:32] <koz> (from profunctors)
[11:04:03] <Axman6> any reason why Kleisli couldn't have those instances too? I remember seeing Star in lens but never looked into it
[11:04:19] <koz> Axman6: No non-hysterical reasons.
[11:04:32] <koz> Star is just a more profunctorially-oriented Kleisli.
[11:04:59] <Axman6> damn raisins
[11:05:05] <koz> I know right.
[11:05:58] <koz> Annoyingly, Compose f Maybe doesn't automagic up an Alternative.
[11:06:03] <koz> (Compose Maybe f would)
[11:06:43] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[11:06:50] <koz> I mean, I _guess_ if we have Traversable f it would?
[11:08:06] <koz> I wonder what method fails.
[11:08:33] *** Joins: vysn (~vysn@user/vysn)
[11:08:35] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[11:09:08] <koz> Couldn't you define empty as 'pure empty' and '<|>
[11:09:19] <koz> ' as 'liftA2 <|>
[11:09:21] <koz> '?
[11:09:24] <koz> Curse my typing.
[11:09:34] <Axman6> we love typing though
[11:09:39] <koz> (well, modulo all the Compose and getCompose noise)
[11:10:09] <koz> Like, does this violate any laws?
[11:14:23] *** Joins: Graham31415 (~Graham314@5.33.52.156)
[11:18:36] *** Quits: vglfr (~vglfr@88.155.11.162) (Ping timeout: 240 seconds)
[11:20:12] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 240 seconds)
[11:20:32] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[11:22:19] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[11:22:35] <abastro[m]> Is this Compose the Compose we all know?
[11:25:19] <koz> abastro[m]: newtype Compose f g a = Compose { getCompose :: f (g a) }
[11:25:23] <koz> At least, last I checked.
[11:25:28] <abastro[m]> Ya, I guess it is
[11:25:58] <abastro[m]> I guess you could do that, but it seems like Alternative is just.. applicative with innate monoid structure
[11:26:26] <abastro[m]> `pure empty` could work yes
[11:27:19] <koz> I get the feeling that either (Applicative f, Alternative g) or (Alternative f, Applicative g) would work.
[11:27:28] <abastro[m]> Uhm actually
[11:27:34] <koz> (they'd be _different_ Alternatives though wrt their relationship to Applicative)
[11:27:45] *** Quits: y04nn (~y04nn@2a03:1b20:1:e011::a19e) (Ping timeout: 252 seconds)
[11:27:56] <dminuoso> abastro[m]: Alternative is slightly more than that.
[11:28:08] <dminuoso> abastro[m]: There's additional structure with respect to Applicative.
[11:28:08] <abastro[m]> I guess `liftA2 (pure empty) x` does not equal to `x`
[11:28:23] <abastro[m]> Oh. Why does the docs not reveal that
[11:28:30] <dminuoso> It does?
[11:28:31] <koz> dminuoso: Nobody quite agrees on said relationship.
[11:28:39] <koz> abastro[m]: Also check Typeclassopedia's writeup on Alternative.
[11:28:59] <abastro[m]> `A monoid on applicative functors.`
[11:29:01] <dminuoso> base at least has this to say:
[11:29:03] <dminuoso> https://hackage.haskell.org/package/base-4.16.0.0/docs/Control-Applicative.html#t:Alternative
[11:29:10] <dminuoso> If defined, some and many should be the least solutions of the equations: [...]
[11:29:18] <koz> abastro[m]: 'liftA2 (<|>) (pure empty) x' _should_ be 'x'?
[11:29:20] <koz> Ah yeah.
[11:29:32] <koz> 'some' and 'many' are something I always forget about the existence of.
[11:29:32] <dminuoso> Though those are rather constraints about `some` and `many`
[11:29:44] <abastro[m]> I mean, wouldn't the laws hold with default implementations?
[11:29:58] <dminuoso> Yeah I guess
[11:30:10] <koz> Default implementations depend on each other, so if you don't define _either_, I think you might diverge.
[11:30:17] <koz> (you won't _necessarily_, but you might)
[11:30:24] <abastro[m]> Yea, I was more about the minimal definitions
[11:30:31] <abastro[m]> I think the definition is deliberste
[11:30:36] <dminuoso> abastro[m]: You might be interested in Ap
[11:30:37] <abastro[m]> Deliberate*
[11:30:41] <abastro[m]> So it could work in most cases
[11:30:56] <abastro[m]> Isn't Ap which makes Alternative into Monoid
[11:30:58] <koz> abastro[m]: If you don't define _either_ of 'some' or 'many', since they're defined in terms of each other, _using_ one or the other could diverge potentially.
[11:31:08] <dminuoso> abastro[m]: Yup!
[11:31:11] <koz> abastro[m]: 'Ap' makes _Applicative_ into Monoid.
[11:31:11] <dminuoso> instance (Applicative f, Monoid a) => Monoid (Ap f a)
[11:31:22] <abastro[m]> Oh wait
[11:31:25] <abastro[m]> It is applicative.
[11:31:29] <dminuoso> That's essentially just Alternative but via Monoid!
[11:31:33] <abastro[m]> I somehow messed up what it is
[11:31:43] <abastro[m]> No, it is not alike alternative you know
[11:31:43] <dminuoso> Ah sorry hold on
[11:31:47] <dminuoso> miscopy and paste
[11:31:50] <dminuoso> I meant Alt
[11:31:51] <koz> dminuoso: Yes, but it's weaker. Alternative works for _any_ a.
[11:31:55] <dminuoso> https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Monoid.html#t:Alt :)
[11:31:58] <koz> Alt is the other one yes.
[11:32:05] <koz> All these similar-sounding things.
[11:32:20] *** Quits: gehmehgeh_ (~user@user/gehmehgeh) (Remote host closed the connection)
[11:32:37] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[11:32:48] <koz> Basically everything is a monoid.
[11:33:08] <koz> The entirety of Haskell is an elaborate edifice built upon monoids.
[11:33:12] <koz> It's monoids all the way down.
[11:33:22] <abastro[m]> Yea, Alt
[11:33:29] <abastro[m]> I also mixed up Alt and Ap
[11:33:31] <abastro[m]> Meh, me
[11:33:38] <koz> They're easy to mix up.
[11:33:39] *** Quits: Graham31415 (~Graham314@5.33.52.156) (Ping timeout: 256 seconds)
[11:33:58] <abastro[m]> Ap lifts Monoids through Applicative, IIRC
[11:33:58] <koz> Not helped by the fact that 'Alt' is also a semigroupoids thing, which is 'Alternative without empty'.
[11:34:17] *** Joins: winstonsmith_ (~winston@2a02:c98:1003:8000:6106:3ff0:197d:fcd2)
[11:34:23] <abastro[m]> Btw IIRC `some` and many` is designed to terminate for most cases without you implementing them.
[11:34:28] <abastro[m]> * `some` and `many` is
[11:34:42] <koz> A little inconsistent, since it also defined Apply as 'Applicative without pure', so shouldn't it be called 'Altern'?
[11:35:00] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[11:35:26] <abastro[m]> Naming is hard tbh
[11:35:38] <abastro[m]> In my math class I just heard how bad mathematicians are at naming
[11:35:54] <abastro[m]> So they often ended up with same names for numerous concepts
[11:36:21] <koz> Can confirm. Worse, they ended up with _different_ names for the _same_ concept!
[11:37:20] <abastro[m]> <strikethrough> Well concepts become different when you give it different names </>
[11:37:41] <koz> A natural transformation by any other name will compose just as well.
[11:39:17] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 252 seconds)
[11:41:55] <abastro[m]> ?
[11:42:02] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[11:42:03] <abastro[m]> Natural transformation by other name?
[11:42:13] *** Joins: michalz (~michalz@185.246.204.57)
[11:42:25] *** Quits: charukiewicz (~charukiew@2600:1702:a90:2750::3c) ()
[11:42:42] <koz> abastro[m]: A long-running joke/justification in category theory is that so many things in other fields of mathematics are just NTs in fancy clothes.
[11:42:51] <koz> I think Awodey's book pretty much _opens_ with such a claim.
[11:44:23] <dminuoso> 08:08:04             koz | [07:03:08] The entirety of Haskell is an elaborate edifice built upon monoids.
[11:44:31] <dminuoso> Monoids are just ubiquitous. They are everywhere.
[11:44:35] <dminuoso> Not just Haskell or programming.
[11:44:45] <abastro[m]> Oh, that joke
[11:44:58] <abastro[m]> Ya the one where many other mathematicians would hate :)
[11:46:55] *** Joins: vglfr (~vglfr@88.155.11.162)
[11:51:10] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[11:52:07] *** Joins: lagooned (~lagooned@108-208-149-42.lightspeed.hstntx.sbcglobal.net)
[11:52:41] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:54:57] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[11:55:55] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 250 seconds)
[11:56:35] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[11:58:20] *** Joins: mmhat (~mmh@55d49226.access.ecotel.net)
[12:01:24] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:02:32] <tomsmeding> dminuoso: talking about monoids -- there's this trick: newtype Thing m = Thing (m -> m) ; instance Semigroup (Thing m) where Thing f <> Thing g = Thing (f . g) ; instance Monoid (Thing m) where mempty = Thing id ; rep :: Semigroup m => m -> Thing m ; rep m = Thing (m <>) ; abs :: Monoid m => Thing m -> m ; abs (Thing f) = f mempty
[12:02:45] <abastro[m]> Hm I wonder if `liftA2 f (pure x) y == y`
[12:02:48] <tomsmeding> this is "the difference list trick", also known as ShowS
[12:02:55] *** Joins: Graham31415 (~Graham314@5.33.52.156)
[12:03:13] <tomsmeding> I've also seen it being called a "Cayley" transform at least once, but is there a generally accepted name for this?
[12:03:37] *** Quits: Graham31415 (~Graham314@5.33.52.156) (Client Quit)
[12:03:45] <dminuoso> tomsmeding: Mmm, what exactly is the "trick" here?
[12:03:54] <abastro[m]> Eh I should have said, `liftA2 f (pure x) y == y` if for any z, `f x z == z`
[12:04:01] <dminuoso> On its own this seems blant so far
[12:04:08] <tomsmeding> representing a monoid M as functions M -> M, which has better performance properties for some monoids and some usages
[12:04:17] <dminuoso> Ah yes.
[12:04:56] <abastro[m]> Sounds like `Endo`
[12:05:10] <tomsmeding> ah, it is Endo
[12:05:27] <c_wraith> It's not exactly Endo, as you need to associate a function in the mapping between them
[12:05:39] *** Joins: alp (~alp@user/alp)
[12:05:43] <tomsmeding> so, like, suppose I'm writing a paper where I do this and need to call it something :p
[12:05:50] <dminuoso> c_wraith: Thing is Endo
[12:05:52] <c_wraith> To really model it, you want to put the necessary functions in the type, too.
[12:06:09] <abastro[m]> Wdym necessary functions?
[12:06:56] <c_wraith> to convert between Endo [a] and [a], for instance..  
[12:07:02] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:07:07] <hololeap> @hackage bytebuild
[12:07:07] <lambdabot> https://hackage.haskell.org/package/bytebuild
[12:07:12] <hololeap>  > Unlike builders from the bytestring package, these builders do not track their state when they run out of space.
[12:07:21] <hololeap> anyone know what they mean by "run out of space"?
[12:07:30] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[12:07:47] <tomsmeding> c_wraith: the conversion is always (\x -> (x <>)) :: m -> Endo m ; (\x -> x mempty) :: Endo m -> m
[12:07:48] <abastro[m]> Well you could just define `rep` for `Endo`, then you get that.
[12:07:58] <tomsmeding> potentially with (<> x) instead of (x <>) if that works better
[12:08:16] <tomsmeding> at least in this trick that I'm trying to find a name for, it is always this way
[12:08:24] <dminuoso> hololeap: Mmm, did you read the following sentence?
[12:08:38] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[12:08:50] *** Joins: y04nn (~y04nn@2a03:1b20:1:e011::a19e)
[12:08:59] <c_wraith> hololeap: builders are a wrapper around a mutable buffer.
[12:09:41] <abastro[m]> Tbh `Endo (<> x)` sounds short enough to me
[12:09:41] <tomsmeding> abastro[m]: liftA2 f (pure x) y = f <$> pure x <*> y = pure f <*> pure x <*> y =[homomorphism] pure (f x) <*> y =[f x z == z] pure id <*> y =[identity] y
[12:09:57] <tomsmeding> abastro[m]: as a name?
[12:09:58] <abastro[m]> Oh wait
[12:10:05] <tomsmeding> (oh I forgot the Endo wrappers)
[12:10:07] <abastro[m]> Noo
[12:10:18] <tomsmeding> (just coerce that stuff :p )
[12:10:45] <abastro[m]> <del>name it as `Endo _<>`</del>
[12:10:50] <hololeap> dminuoso: yeah I read it
[12:11:21] <tomsmeding> "Now in the next step, we will eliminate some adverse complexity issues using the Endo _<> trick, which ..."
[12:11:37] <hololeap> hm, ok...
[12:12:12] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 240 seconds)
[12:12:14] <c_wraith> hololeap: well.  they're a wrapper around a function for manipulating such a buffer.  In any case, it's saying it doesn't track the length of the buffer and space available.
[12:12:15] <hololeap> yeah I get it now. thanks c_wraith
[12:12:18] <abastro[m]> Hmm, `liftA2 f x (pure y) == pure f <*> x <*> pure y`, can I go further from here
[12:12:28] <abastro[m]> Apparently idk applicative laws. I should memorize it..
[12:12:29] <c_wraith> hololeap: it just fails if it would try to write outside it
[12:12:37] * tomsmeding looked up the laws
[12:12:49] <tomsmeding> abastro[m]: perhaps use Interchange
[12:12:54] <abastro[m]> Ohh
[12:12:58] <tomsmeding> oh no
[12:13:04] <tomsmeding> wrong association of <*>
[12:13:18] <tomsmeding> oh no of course not
[12:13:48] <c_wraith> flip f y <$> x
[12:14:11] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[12:14:27] <c_wraith> (I have a policy of never using flip in non-toy code)
[12:14:53] *** Joins: jakalx (~jakalx@base.jakalx.net)
[12:15:33] <c_wraith> But you end up writing a lot of code that looks vaguely like that when you're writing lenses by hand.
[12:15:56] <c_wraith> and it's important that you stick with only Functor in those cases
[12:16:24] <tomsmeding> abastro[m]: (pure f <*> x) <*> pure y =[interchange] pure ($ y) <*> (pure f <*> x) =[composition] pure (.) <*> pure ($ y) <*> pure f <*> x =[homomorphism x2] pure (($ y) . f) <*> x = pure (\z -> f z y) <*> x
[12:16:45] <abastro[m]> Oh wait, that works
[12:16:57] <c_wraith> I didn't say it was wrong!
[12:17:01] <tomsmeding> had to think a little before I realised that composition does work :p
[12:18:43] <abastro[m]> I guess when f z y = z for all z, like the case with `f = (<|>)` and `y = empty`, it would boil down to `x`, 
[12:18:52] <abastro[m]> So..
[12:19:02] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:19:26] <abastro[m]> Given `(Applicative f, Alternative g)`, we could have `Alternative (Compose f g)`
[12:19:54] <abastro[m]> by `empty = pure empty` and `(<|>) = liftA2 (<|>)`
[12:20:10] <abastro[m]> Now question is, why is it not defined?
[12:21:01] <c_wraith> Probably because there is another equally-lawful implementation with an Alternative f constraint
[12:21:09] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:9be3:3a9c:fd6c:bab4)
[12:22:15] <abastro[m]> Oh. Makes sense.
[12:22:34] <abastro[m]> `(<|>) = coerce ((<|>) :: f (g a) -> f (g a) -> f (g a))` Wait how does this work
[12:22:57] <abastro[m]> Oh nvm, of course works when `f` is alternative
[12:23:45] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[12:24:45] <koz> Yeah, you'd have to pick _one_, because otherwise GHC would barf at instance resolution.
[12:28:09] <abastro[m]> Sometimes deciding instance is intricate, it seems.
[12:28:36] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 240 seconds)
[12:28:45] <c_wraith> especially for a type with as little semantic content as Compose
[12:28:59] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[12:29:06] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[12:29:29] <abastro[m]> Yep, indeed.
[12:31:17] *** Joins: acidjnk (~acidjnk@p200300d0c7049f94990c0fcd1a5d0faa.dip0.t-ipconnect.de)
[12:32:17] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 240 seconds)
[12:33:04] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[12:33:23] *** Joins: briandaed (~root@109.95.142.93.r.toneticgroup.pl)
[12:33:25] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:33:34] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[12:33:41] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[12:34:17] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[12:34:20] *** Joins: cfricke (~cfricke@user/cfricke)
[12:35:57] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[12:40:58] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[12:45:18] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:45:25] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 240 seconds)
[12:46:14] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[12:48:15] *** Joins: benin (~benin@183.82.207.30)
[12:48:36] *** Quits: vglfr (~vglfr@88.155.11.162) (Ping timeout: 252 seconds)
[12:49:15] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[12:50:15] *** Quits: y04nn (~y04nn@2a03:1b20:1:e011::a19e) (Remote host closed the connection)
[12:50:27] *** Joins: y04nn (~y04nn@2a03:1b20:1:e011::a19e)
[12:53:04] *** Quits: benin (~benin@183.82.207.30) (Client Quit)
[12:53:57] *** Quits: Flow (~none@gentoo/developer/flow) (Ping timeout: 240 seconds)
[12:55:28] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[12:55:31] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:57:18] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[12:57:29] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[12:58:03] *** Quits: lagooned (~lagooned@108-208-149-42.lightspeed.hstntx.sbcglobal.net) (Quit: WeeChat 3.4)
[12:58:20] *** Joins: fendor (~fendor@178.115.72.153.wireless.dyn.drei.com)
[13:00:59] *** Joins: dsrt^ (~dsrt@96-67-120-105-static.hfc.comcastbusiness.net)
[13:01:43] *** Joins: Flow (~none@gentoo/developer/flow)
[13:01:49] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[13:02:10] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 260 seconds)
[13:02:14] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[13:02:26] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:03:59] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[13:06:25] *** urtie is now known as earthy
[13:08:29] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[13:13:26] *** Joins: ccntrq (~Thunderbi@2a01:c23:9016:8e00:deb2:a539:32d1:3ed2)
[13:13:29] *** Joins: benin (~benin@183.82.207.30)
[13:15:10] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[13:22:27] *** Quits: gehmehgeh_ (~user@user/gehmehgeh) (Quit: Leaving)
[13:26:42] *** Joins: Pickchea (~private@user/pickchea)
[13:27:25] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-219-172.wlan.tudelft.nl)
[13:29:06] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-219-172.wlan.tudelft.nl) (Client Quit)
[13:29:06] *** Quits: benin (~benin@183.82.207.30) (Quit: The Lounge - https://thelounge.chat)
[13:32:23] *** Joins: Midjak (~Midjak@82.66.147.146)
[13:37:00] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[13:38:03] *** Joins: benin (~benin@183.82.207.30)
[13:39:12] *** Quits: benin (~benin@183.82.207.30) (Client Quit)
[13:39:56] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 245 seconds)
[13:40:15] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[13:40:18] *** Joins: benin (~benin@183.82.207.30)
[13:40:54] *** Quits: benin (~benin@183.82.207.30) (Client Quit)
[13:41:21] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:43:51] *** Joins: benin (~benin@183.82.207.30)
[13:47:02] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Remote host closed the connection)
[13:47:36] *** Quits: benin (~benin@183.82.207.30) (Client Quit)
[13:48:36] *** Joins: benin (~benin@183.82.207.30)
[13:49:09] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:49:33] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:50:17] *** Quits: benin (~benin@183.82.207.30) (Client Quit)
[13:50:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[13:51:30] *** Joins: benin (~benin@183.82.207.30)
[13:51:57] *** Joins: jinsun (~jinsun@user/jinsun)
[13:53:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:54:50] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[13:55:19] *** Quits: jinsun__ (~jinsun@user/jinsun) (Ping timeout: 256 seconds)
[13:58:07] *** Quits: benin (~benin@183.82.207.30) (Quit: The Lounge - https://thelounge.chat)
[13:58:26] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[14:00:52] *** Joins: benin (~benin@183.82.207.30)
[14:01:20] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-219-172.wlan.tudelft.nl)
[14:02:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:03:16] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:05:02] *** Joins: krappix (~krappix@nat-eduroam-76-gw-01-lne.lille.inria.fr)
[14:05:25] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[14:08:34] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[14:09:09] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[14:14:01] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[14:14:35] *** Quits: nsyd (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net) (Ping timeout: 256 seconds)
[14:14:49] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[14:16:52] <abastro[m]> Hmm what is meta?
[14:17:23] *** Quits: benin (~benin@183.82.207.30) (Quit: The Lounge - https://thelounge.chat)
[14:18:01] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[14:18:15] <merijn> E_INSUFFICIENT_CONTEXT :p
[14:18:29] *** Joins: benin (~benin@183.82.207.30)
[14:18:56] <abastro[m]> Haskell foundation links the meta
[14:19:17] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 240 seconds)
[14:19:20] <Franciman> abastro[m]: isnt it the new name of facebook?
[14:19:36] <merijn> Yeah
[14:19:46] <Franciman> Meta is paying haskell to exist
[14:19:58] <Franciman> like microsofwt
[14:20:17] <merijn> Meta the company is the parent company of facebook, trying to rebrand away from facebook's...great...reputation
[14:20:49] *** Joins: bahamas (~lucian@86.120.77.115)
[14:21:02] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 260 seconds)
[14:22:09] <Franciman> luky for us
[14:22:35] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[14:23:11] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[14:25:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:26:13] *** Quits: dextaa_ (~dextaa@user/dextaa) (Quit: The Lounge - https://thelounge.chat)
[14:26:47] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:27:37] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[14:27:51] *** Quits: tinwood (~tinwood@canonical/tinwood) (Remote host closed the connection)
[14:27:54] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.4.1)
[14:28:05] *** Joins: Everything (~Everythin@37.115.210.35)
[14:28:57] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[14:30:53] *** Joins: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io)
[14:30:53] *** Quits: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io) (Changing host)
[14:30:53] *** Joins: tinwood (~tinwood@canonical/tinwood)
[14:31:32] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[14:32:01] <boxscape> Hmm why does the duckduckgo search result for the haskell foundation say "Haskell Foundation - Donuts"
[14:32:01] <boxscape> not that there's anything wrong with donuts
[14:32:32] <boxscape> abastro: meta is the new name of facebook's parent company
[14:33:50] <abastro[m]> Donuts haha
[14:34:01] <abastro[m]> Uhh facebook parent has name meta?
[14:34:06] <abastro[m]> What a lousy name
[14:35:18] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 252 seconds)
[14:36:04] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:4199:73fa:f378:33d)
[14:36:11] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 245 seconds)
[14:36:22] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[14:37:54] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[14:40:15] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[14:40:44] *** Joins: notzmv (~zmv@user/notzmv)
[14:41:09] <abastro[m]> Why such a huge multibillion dollar corporation would choose a name "meta"? I wonder..
[14:43:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[14:45:00] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[14:45:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[14:45:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:46:38] <merijn> because "metaverse"
[14:47:04] <Franciman> and because they are so powerful they can get to pick a super short name
[14:47:06] <merijn> Which can be adequately explained as: Zuckerberg fell asleep while reading Snow Crash and didn't realise Neal Stephenson was describing a dystopia
[14:47:08] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[14:47:08] <Franciman> just to prove they are super cool
[14:47:33] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[14:47:44] <merijn> tbh, Facebook rebranding to Meta and Metaverse is really, *really* funny
[14:48:08] <Franciman> would you classify facebook as a terrorist group trying to undermine democracy?
[14:48:27] <merijn> "Hey, should we market our society destroying tech death machine after a completely dystopian cyberpunk fiction?" 'yeah, that sounds dope'
[14:48:52] <merijn> But probably more for -offtopic :)
[14:49:17] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[14:52:37] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 240 seconds)
[14:59:28] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:01:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:04:38] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[15:09:17] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 240 seconds)
[15:12:23] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[15:14:05] *** Quits: bahamas (~lucian@86.120.77.115) (Ping timeout: 256 seconds)
[15:15:37] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[15:15:52] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[15:20:26] <maerwald[m]> boxscape: https://www.haskellfoundation.org/
[15:20:39] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[15:21:01] <boxscape> maerwald: but the donuts are mentioned in the title of the haskell.foundation search results
[15:21:14] *** Quits: y04nn (~y04nn@2a03:1b20:1:e011::a19e) (Ping timeout: 260 seconds)
[15:21:19] <boxscape> s/results/result
[15:21:58] <boxscape> though it is funny that there are multiple foundations called "haskell foundation"
[15:22:19] <maerwald[m]> It's like googling curry
[15:22:51] *** Quits: benin (~benin@183.82.207.30) (Quit: The Lounge - https://thelounge.chat)
[15:22:59] <abastro[m]> It is still great that HF managed to get to the second entry :)
[15:24:00] <boxscape> the first entry in my search results, even
[15:25:42] <abastro[m]> Wait, duckduckgo now detects who you are?
[15:25:42] <abastro[m]> Scary
[15:27:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[15:28:19] <abastro[m]> It is strange
[15:28:34] <abastro[m]> How company like meta could support haskell
[15:28:56] <abastro[m]> I mean, tbh I dislike FB so..
[15:28:58] <maerwald[m]> https://github.com/haskell-foundation/foundation
[15:29:04] <maerwald[m]> Another one
[15:29:14] <abastro[m]> This is too much offtopic right
[15:29:51] *** Joins: sloorush (~sloorush@136.233.9.99)
[15:30:01] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (Remote host closed the connection)
[15:30:13] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[15:30:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:31:09] <maerwald[m]> Is there a good overview of existing preludes?
[15:31:26] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[15:31:57] *** Quits: belphegor666 (~satan@ip-046-223-002-003.um13.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[15:32:38] *** Joins: cfricke (~cfricke@user/cfricke)
[15:33:11] *** Joins: belphegor666 (~satan@ip-046-223-002-003.um13.pools.vodafone-ip.de)
[15:34:59] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:35:04] <abastro[m]> Indeed, it is funny
[15:35:07] <abastro[m]> Oh right, sorry. offtopic'
[15:37:19] *** Quits: krappix (~krappix@nat-eduroam-76-gw-01-lne.lille.inria.fr) (Ping timeout: 256 seconds)
[15:37:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[15:37:39] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[15:38:23] <maerwald[m]> Franciman: no, terrorists usually have political goals. Causing destructive effects on global society, because you don't care about it needs a different name
[15:38:39] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[15:39:05] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[15:40:29] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 256 seconds)
[15:40:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:40:50] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[15:42:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[15:43:58] *** Joins: benin (~benin@183.82.207.30)
[15:44:55] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[15:48:37] *** Quits: fendor (~fendor@178.115.72.153.wireless.dyn.drei.com) (Remote host closed the connection)
[15:50:01] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:50:16] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[15:50:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:50:51] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[15:51:33] *** Joins: Pickchea (~private@user/pickchea)
[15:51:41] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[15:52:27] *** Joins: abab9579 (~abab9579@143.248.229.174)
[15:52:58] *** abab9579 is now known as abastro_
[15:53:07] *** Quits: MasseR46 (~MasseR@51.15.143.128) (Quit: The Lounge - https://thelounge.chat)
[15:53:43] *** Joins: MasseR46 (~MasseR@51.15.143.128)
[15:53:54] *** Joins: dextaa_ (~dextaa@user/dextaa)
[15:54:19] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[15:54:58] *** Quits: abastro_ (~abab9579@143.248.229.174) (Client Quit)
[15:55:39] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[15:57:24] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[15:58:54] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Remote host closed the connection)
[15:59:03] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[16:00:26] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[16:00:37] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:05:27] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:05:49] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[16:07:00] *** Quits: belphegor666 (~satan@ip-046-223-002-003.um13.pools.vodafone-ip.de) (Changing host)
[16:07:00] *** Joins: belphegor666 (~satan@user/belphegor666)
[16:09:19] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:09:42] *** Joins: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:12:21] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[16:13:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 240 seconds)
[16:15:46] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[16:16:57] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[16:17:31] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:20:53] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[16:21:19] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:22:11] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:22:49] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.4.1)
[16:22:54] *** Joins: Digit (~user@user/digit)
[16:24:11] * Digit gets wild idea of a haskelly terminal shell, wonders if ever been done, to use haskell ways and syntax with unix command line
[16:24:52] <opqdonut> Digit: https://hackage.haskell.org/package/turtle
[16:25:04] <opqdonut> not sure if anybody uses that any more but it was a big thing back in the day
[16:25:15] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 256 seconds)
[16:25:30] <opqdonut> looks like new releases keep coming out, cool
[16:25:37] *** Quits: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:26:26] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.4.1)
[16:27:45] <Digit> oh yup.  been here before.  lets see if the fanciful notion sticks this time.   thanks for sparing me much painful websearching.
[16:27:49] <boxscape_> there's also https://hackage.haskell.org/package/shelly
[16:27:51] *** Joins: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:27:55] <boxscape_> I don't know how they compare though
[16:30:01] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:30:36] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:31:28] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:32:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[16:32:49] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[16:35:31] <geekosaur> you can even runb it in a haskell terminal
[16:35:37] <geekosaur> @package termonad
[16:35:38] <lambdabot> https://hackage.haskell.org/package/termonad
[16:35:41] *** Quits: elkcl (~elkcl@broadband-37-110-156-162.ip.moscow.rt.ru) (Ping timeout: 256 seconds)
[16:35:58] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[16:36:03] <boxscape_> and run that in xmonad
[16:39:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 252 seconds)
[16:39:04] <Andrew> Digit: I've used lisp shells before, that's a good idea
[16:40:10] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[16:40:46] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Read error: Connection reset by peer)
[16:41:11] <Digit> :) already got termonad, but yet to make it my daily driver.  i like the idea my window manager, terminal emulator, and shell, could all be haskell.  :)  and yi, for text editor.  :)
[16:41:24] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[16:41:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:41:54] *** Joins: razetime (~quassel@117.207.18.88)
[16:42:13] <boxscape_> just need a Haskell OS
[16:42:15] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 256 seconds)
[16:42:21] <boxscape_> to complete the set
[16:43:10] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:43:17] <merijn> boxscape_: House, HaLVM
[16:43:48] <boxscape_> I was going to say that I haven't heard of those but then I saw that the link of the search result for HaLVM was purple
[16:44:12] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[16:47:10] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:56:40] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Remote host closed the connection)
[16:56:49] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[16:59:07] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[17:02:54] *** Joins: alp (~alp@user/alp)
[17:03:00] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[17:03:01] *** Quits: acidjnk (~acidjnk@p200300d0c7049f94990c0fcd1a5d0faa.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:08:36] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[17:10:01] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[17:11:26] *** Joins: y04nn (~y04nn@2a03:1b20:1:e011::a19e)
[17:11:30] *** Quits: haritz (~hrtz@user/haritz) (Ping timeout: 252 seconds)
[17:13:37] <abastro[m]> Haskell shell sounds like a dream :)
[17:13:47] <abastro[m]> Wanna experience Typed shell, how can I?
[17:14:57] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:16:07] <[exa]> bash isn't a typed shell? (all them nice Strings)
[17:20:15] <geekosaur> sadly there'sno good way to experience a typed shell, since any types have to be imposed on programs after the fact and that means the shell interface has to know about them to do it
[17:20:49] <geekosaur> unix is kinda fundamentally stringly typed
[17:20:50] <abastro[m]> Sad
[17:24:21] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:24:31] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[17:26:35] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[17:27:25] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[17:27:57] <[exa]> abastro[m]: I highly recommend to observe some systems that attempted to make inputs and outputs of general programs "typed"
[17:28:27] <geekosaur> yeh, unix was actually a reaction to those
[17:28:32] <abastro[m]> I have no experience with such systems, what are the examples?
[17:28:33] <[exa]> esp. OLE32, the favorite choice. :D
[17:28:47] <abastro[m]> Oh, so unix was intentionally untyped
[17:29:14] <[exa]> intentionally textual and string-ish, yes.
[17:29:24] <geekosaur> (pre-unix, input andoutput was typically in the form of database-like typed records)
[17:30:03] <abastro[m]> Hm. I'd prefer typed records though. I guess it is ditched for good, but..
[17:30:37] <[exa]> some extra things to compare would be the MIME "types" that kinda settled in internets, ASN.1, and perhals XML/JSON/RDF schemas
[17:31:55] <[exa]> for shell, you'd need to _infer_ all of these very quickly
[17:32:06] <geekosaur> the problem with typed records is it sets limits on how you can combine programs
[17:32:38] <geekosaur> being able to apply grep, sort, etc. to *any* program was a major innovation
[17:33:36] <geekosaur> (I think we've slid offtopic again)
[17:34:31] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:35:26] <geekosaur> VM/SP had a very complicated system sort program that could via JCL be adapted to handle many (not all) program outputs and subsequent inputs; compare unix sort
[17:37:43] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[17:40:07] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[17:40:12] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 240 seconds)
[17:42:12] <abastro[m]> I see, I disliked how unix uses string for everything but now I see the reasoning.
[17:42:57] <abastro[m]> (My unpopular opinion: monolithic, non-composable programs are good - but that's offtopic and also a bit nonsense)
[17:43:58] <[exa]> abastro[m]: the point of unix is mostly "this is the fastest implementable, vital tradeoff of simple and universal" and it still can support big monolithic stuff if anyone really needs to, for any reason
[17:44:28] <[exa]> man, "non-composable programs are good" is highly offtopic :D :D
[17:44:41] <abastro[m]> Yep, sorry about that
[17:44:55] <geekosaur> keep in mind also that unix was a research OS that slipped int production, not unlike ghc
[17:45:29] <geekosaur> bell labs needed a cheap, compact OS for its phone switches and found unix in its own research arm
[17:45:51] *** Joins: elkcl (~elkcl@broadband-37-110-156-162.ip.moscow.rt.ru)
[17:46:47] <geekosaur> just bell, I guess, bell labs was the research arm
[17:47:35] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 240 seconds)
[17:47:41] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[17:48:22] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[17:48:28] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:48:52] *** alMalsamo is now known as lumberjack123
[17:51:57] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[17:52:04] *** Quits: benin (~benin@183.82.207.30) (Quit: The Lounge - https://thelounge.chat)
[17:52:05] *** Joins: cfricke (~cfricke@user/cfricke)
[17:53:16] <[exa]> that's one way to produce quality software, look into the room that contains the bunch of geeks and just find it. :D
[17:54:05] <geekosaur> unless you're microsoft. (sharepoint was a much better piece of software before the business side go ttheir hands on it, reportedly)
[17:54:52] <abastro[m]> Hm actually, the objection I heard was more of "lack of capability" in unix system
[17:55:25] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[17:55:35] *** Quits: y04nn (~y04nn@2a03:1b20:1:e011::a19e) (Ping timeout: 260 seconds)
[17:56:12] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[17:57:01] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 240 seconds)
[17:57:25] <abastro[m]> That and unified File system described as streams
[17:58:23] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 260 seconds)
[17:59:03] *** Joins: abradabara (~abradabar@185.183.97.187)
[17:59:30] <abradabara> why does printing [5..1] does not work, but [5,4..1] work
[17:59:48] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[18:00:05] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[18:00:33] <[exa]> abradabara: the semantics of [5..1] is captured as `enumFromTo`, which assumes a default step of +1 and continues until the result is (<=1)
[18:00:58] <dminuoso> Its interesting this produces a result at all
[18:01:00] *** Joins: jakalx (~jakalx@base.jakalx.net)
[18:01:08] <dminuoso> Id have expected it to bottom out
[18:01:17] <dminuoso> > [5..1]
[18:01:19] <lambdabot>  []
[18:01:26] <abradabara> [exa]: oh I see, but isn't enumFromTo applies to second part 4..1
[18:01:35] <abastro[m]> Oh, it checks smaller than 1 I guess
[18:01:46] <abradabara> >[5,4..1]
[18:01:50] <abradabara> > [5,4..1]
[18:01:51] <dminuoso> [exa]: Presumably its rather it produces *while* the opposite holds.
[18:01:51] <lambdabot>  [5,4,3,2,1]
[18:01:55] <dminuoso> rather than "doing until"
[18:02:26] <[exa]> abradabara: I'd explain it like that the assumption taken there is the "less surprising" of the two possibilities (the other one being [5,4,3,2,1]) because people usually don't want decreasing sentences appearing from nowhere
[18:02:59] <[exa]> uh yes and the terminating condition there is somewhat shady for sure, check this:
[18:03:16] <[exa]> > [1,1.1..2]
[18:03:18] <lambdabot>  [1.0,1.1,1.2000000000000002,1.3000000000000003,1.4000000000000004,1.50000000...
[18:03:22] <[exa]> ayay
[18:03:38] <[exa]> > reverse [1,1.1..2]
[18:03:40] <lambdabot>  [2.000000000000001,1.9000000000000008,1.8000000000000007,1.7000000000000006,...
[18:03:59] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[18:04:36] <abradabara> [exa]: I don't even know haskell much, just used xmonad for some time, and was taking a look at short learnxinyminutes haskell page, what is haskell mainly used for? I am guessing it's some type of very robust, strict, very precise language
[18:04:55] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[18:04:56] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[18:05:27] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:05:36] <abradabara> what if i do "lambda>[1..]" here
[18:05:43] <[exa]> well, you see precision has practical limits. :D
[18:06:13] <dminuoso> abradabara: its mainly used for all kinds of things.
[18:06:37] *** Joins: bahamas (~lucian@86.120.77.115)
[18:06:42] <Unicorn_Princess> i'm using ghcup. how do i install e.g. the random package, so that is it accessible to ghci? sticking build-depends: random into the project .cabal file seems to suffice to get the project itself to use the package
[18:06:55] <Unicorn_Princess> so that it is*
[18:07:08] <abradabara> dminuoso: could you give some mainstream examples if you don't mind?
[18:07:12] <dminuoso> Facebook uses Haskell for their entire spam classification (which evaluates every single interaction any user can does, every click). 
[18:07:31] <dminuoso> We use Haskell to build a network description and compile it into hardware configuration as part of our SDN automation
[18:07:39] <dminuoso> We also use Haskell in various other places
[18:07:44] *** Joins: acidjnk (~acidjnk@p200300d0c7049f94990c0fcd1a5d0faa.dip0.t-ipconnect.de)
[18:07:50] <dminuoso> GHC uses Haskell to compile Haskell
[18:07:52] <geekosaur> Unicorn_Princess, cabal repl --build-depends random
[18:08:01] *** Joins: y04nn (~y04nn@2a03:1b20:1:e011::a19e)
[18:08:08] <dminuoso> abradabara: You might have come across pandoc, which is also written in Haskell by the way. :)
[18:08:10] <maerwald> Unicorn_Princess: in an empty directory do `cabal install --lib  --package-env=. <pkg>`, then run `ghci`
[18:08:11] <Hecate> We use Haskell to make our various products at work, mainly web APIs, business domain modeling and database interactions
[18:08:28] <dminuoso> abradabara: the question isnt as much about what it can do, but rather what it cant do
[18:08:30] *** Joins: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[18:08:36] <dminuoso> real time/low latency systems is where haskell is not ideal
[18:08:57] <Hecate> yup'
[18:09:05] <Hecate> or your Haskell code produces C code that does it ;-)
[18:09:12] <maerwald> Unicorn_Princess: that will create a file like `.ghc.environment.x86_64-linux-8.10.7` in that dir, which ghc/ghci will pick up
[18:09:20] <dminuoso> and anything where your domain mandates a wealth of existing libraries
[18:09:35] *** Quits: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[18:09:40] <dminuoso> like say in data science or bio informatics you usually mandate particular libraries to exist already
[18:10:03] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[18:10:13] *** Joins: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[18:10:23] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[18:10:33] *** Joins: haritz (~hrtz@62.3.70.206)
[18:10:33] *** Quits: haritz (~hrtz@62.3.70.206) (Changing host)
[18:10:33] *** Joins: haritz (~hrtz@user/haritz)
[18:10:33] *** Quits: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[18:12:05] <Unicorn_Princess> ah. thanks maerwald, geekosaur. looks like `cabal repl` in my project dir suffices to pick up the dependencies of that project :)
[18:12:14] <geekosaur> yes
[18:12:31] *** Joins: Ren5050 (~Ren5050@190-199-106-227.dyn.dsl.cantv.net)
[18:12:38] *** Parts: Ren5050 (~Ren5050@190-199-106-227.dyn.dsl.cantv.net) ()
[18:12:44] *** Joins: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[18:13:11] *** Joins: benin (~benin@183.82.207.30)
[18:13:22] *** Quits: lainon (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[18:14:17] *** Quits: lagash (lagash@lagash.shelltalk.net) (Remote host closed the connection)
[18:15:18] *** Joins: lagash (lagash@lagash.shelltalk.net)
[18:15:43] <abradabara> dminuoso: Hecate: thanks, if you don't mind also what top 5 things that makes haskell different than other popular languages for the use cases you listed?
[18:16:35] <abradabara> for example rust is better than c/c++ (?) because of memory management or something like that
[18:18:28] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[18:18:43] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[18:18:48] <abradabara> dminuoso: probably stupid question, gonna do some reading :)
[18:19:01] <abradabara> learnyouahaskell seems like nice resource
[18:19:33] *** Joins: dextaa_ (~dextaa@user/dextaa)
[18:19:40] *** Quits: benin (~benin@183.82.207.30) (Quit: The Lounge - https://thelounge.chat)
[18:19:49] <lortabac> abradabara: for me it's mostly ease of refactoring. When I work with other languages (especially dynamically-typed), code quality tends to decrease with time, whereas with Haskell this doesn't happen
[18:20:33] <lortabac> of course this only applies to medium/big projects, when you can't keep everything in your head
[18:20:42] <dminuoso> 1. Lack of parenthesis in function application, 2. Clean readable/defineable ADTs, 3. Highly reusable ADTs (You get a lot of reuse from Maybe), 4. Robust type system that improves confidence of rewrites, and 5. IO expressed at the type level improves reasoning about where side effects can happen and where not.
[18:21:22] *** Joins: benin (~benin@183.82.207.30)
[18:21:32] <Hecate> I agree with lortabac (and especially since we're colleagues). abradabara you can also get some of my opinions from this talk https://www.youtube.com/watch?v=2JB1_e5wZmU
[18:21:56] <dminuoso> But yeah, in ease of code refactoring haskell is easily at the top
[18:22:03] <dminuoso> Especially for non-trivial code bases.
[18:22:08] <Hecate> and this joins what dminuoso at a higher-level: Your ubiquitous language, with which you speak to the machine and the business people, is really, really efficient at speaking to both parties
[18:22:14] <Hecate> and this ubiquitous language is Haskell
[18:22:18] <[exa]> abradabara: top differences (my take): writing parsers is fun, insane abstractions and custom sublanguages are easy to do right, it's pretty fast, types actually help you instead of restricting you
[18:23:19] <abradabara> lortabac: thanks sir
[18:23:21] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[18:23:30] <dminuoso> Be sure to also ask about the dark sides.
[18:24:02] <dminuoso> Like "What do you curse about when writing Haskell?"
[18:24:46] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:24:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:25:04] <abradabara> dminuoso: [exa]: thanks! what is the reason for it being read from right to left though
[18:25:13] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:25:47] <dminuoso> What do you mean "read from left to right"?
[18:25:58] <geekosaur> I'm guessing function composition
[18:26:11] <abradabara> dminuoso: nice one?
[18:26:19] <dminuoso> Sorry I dont understand.
[18:26:38] <boxscape_> dminuoso you wrote "left to right", but the question was "right to left"
[18:26:54] <abradabara> dminuoso: I thought you were making a joke reading what I wrote from right to left
[18:27:08] <dminuoso> Oh no, that must have been a typo
[18:27:22] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:27:22] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:27:22] *** Joins: wroathe (~wroathe@user/wroathe)
[18:29:42] <boxscape_> abradabara if you do mean function composition, the reason `f . g` is read from right to left is ultimately because it mirrors the math notation `f ∘ g`, which is in that order so that `(f ∘ g)(x) = f(g(x))`
[18:29:50] <abradabara> for example myLayouts = avoidStruts . minimize . B.BoringWindows $ perWS, is avoidStruts applied at last here?
[18:30:24] <abradabara> boxscape_: yep that explains it thanks!
[18:32:45] <abradabara> Hecate: thanks for the video
[18:33:58] <boxscape_> abradabara there are composition operators going the other way around as well btw, but they're not as commonly used. In that case you'd have `perWS & (B.BoringWindows >>> mimimize >>> avoidStruts)`
[18:34:03] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Quit: xff0x)
[18:34:23] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[18:35:30] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[18:36:30] <abradabara> boxscape_: good to know, thank you
[18:37:31] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:37:42] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:38:12] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[18:38:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:41:11] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:41:15] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[18:43:11] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (Ping timeout: 256 seconds)
[18:43:18] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:43:24] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[18:45:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[18:46:48] *** Joins: hololeap (~hololeap@user/hololeap)
[18:49:56] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[18:50:29] *** Joins: k8yun (~k8yun@user/k8yun)
[18:52:00] <hololeap> how does the hackage server calculate code coverage?
[18:53:27] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:53:34] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[18:54:14] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[18:54:28] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:54:30] *** Quits: ccntrq (~Thunderbi@2a01:c23:9016:8e00:deb2:a539:32d1:3ed2) (Remote host closed the connection)
[18:54:31] <hololeap> here's an example: https://hackage.haskell.org/package/turtle
[18:54:40] *** Joins: nsyd (~psy@104-62-224-96.lightspeed.chrlnc.sbcglobal.net)
[18:54:48] *** Joins: ccntrq (~Thunderbi@2a01:c23:9016:8e00:deb2:a539:32d1:3ed2)
[18:56:33] *** Quits: abradabara (~abradabar@185.183.97.187) (Ping timeout: 256 seconds)
[19:00:44] <exarkun> Does that page say something about coverage?
[19:02:22] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:02:38] <hololeap> there's a badge that says "Coverage | 20%"
[19:02:52] <hololeap> I'm really just curious
[19:05:15] <boxscape_> hololeap looks like hpc https://github.com/haskell/hackage-server/blob/a6e570a7ba47256267e8cdd7658163740123e7d5/exes/BuildClient.hs#L617
[19:06:30] <hololeap> huh ok
[19:06:37] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:06:59] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[19:09:53] <abastro[m]> Hm actually, what does left application do good for programming
[19:09:56] <abastro[m]> Never thought about this
[19:10:12] <hololeap> that actually looks pretty thorough
[19:11:00] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[19:11:17] <abastro[m]> Actually I learned of a case where right multiplication is great
[19:11:27] <boxscape_> left application as in f(x)?
[19:11:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:11:35] <boxscape_> i.e. f is to the left of x?
[19:11:36] <abastro[m]> In mathematics, so maybe left application is not that great in math as well
[19:11:50] <abastro[m]> Yes, f (x)
[19:12:18] <boxscape_> Yeah I'm not sure there's a good reason for it other than for consistency with everything else
[19:12:24] <hololeap> it's just a convention
[19:13:00] <abastro[m]> In programming, desire of reading from left to right def makes sense
[19:13:05] <hololeap> it could be top application and it would work the same
[19:13:18] <geekosaur> math has x^f too, although it's not widely used
[19:13:33] <abastro[m]> Yea, never seen that used personally
[19:14:46] <abastro[m]> Oh wait. Currying requires to left application to look pretty
[19:14:54] <boxscape_> does it though?
[19:15:00] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 240 seconds)
[19:15:58] <abastro[m]> Yea, with right application, you get (z (y (x f)))
[19:16:05] <boxscape_> seems fine to me
[19:16:19] <abastro[m]> ..and you have to read right to left for curried parameters
[19:16:41] <hololeap> something something arabic
[19:17:12] <boxscape_> no, just do `(x (y (z f)))` and get used to being able to partially apply the rightmost argument rather than the leftmost argument
[19:17:41] <boxscape_> or wait would that work out with the type signature...
[19:17:56] <geekosaur> you'd write the type signature in reverse as well
[19:17:56] <boxscape_> f :: z -> y -> x -> ...
[19:17:59] <boxscape_> :/
[19:18:22] <geekosaur> f :: res <- z <- y <- x
[19:18:34] <geekosaur> might even reverse it fully
[19:18:39] <boxscape_> I don't like that you have to read that from right to left now though
[19:18:39] *** Quits: bahamas (~lucian@86.120.77.115) (Ping timeout: 260 seconds)
[19:18:43] <geekosaur> res <- z <- y <- x :: f
[19:19:12] <abastro[m]> Hahahah
[19:20:24] <abastro[m]> Pipe operator is a good middle ground after all
[19:20:51] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[19:21:15] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[19:22:06] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[19:22:30] *** Joins: k8yun (~k8yun@user/k8yun)
[19:22:39] *** Joins: Pickchea (~private@user/pickchea)
[19:25:07] <boxscape_> though if you write it in reverse, `x (y (z f))` actually corresponds to `f :: ((res <- x) <- y) <- z`, which you *can* read from left to right
[19:25:20] <boxscape_> if you accept that the result comes first
[19:26:01] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com) (Ping timeout: 256 seconds)
[19:26:33] *** Quits: winstonsmith_ (~winston@2a02:c98:1003:8000:6106:3ff0:197d:fcd2) (Quit: Leaving)
[19:27:09] *** Quits: y04nn (~y04nn@2a03:1b20:1:e011::a19e) (Ping timeout: 256 seconds)
[19:28:31] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[19:33:15] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:34:10] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[19:34:13] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:35:05] *** Quits: acidjnk (~acidjnk@p200300d0c7049f94990c0fcd1a5d0faa.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[19:36:13] *** Quits: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[19:36:29] <abastro[m]> Hmm if you think of it, monadic bind is left to right, right?
[19:36:40] <abastro[m]> We apply monadic function to the left
[19:36:46] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1d5f-5d86-90b5-efe4.res6.spectrum.com)
[19:37:05] <boxscape_> yep but that's why we also have =<<, to mirror the order of function application
[19:37:09] <boxscape_> though we only have >>, not <<
[19:38:00] <geekosaur> these days we do have <*
[19:38:14] <boxscape_> yeah but << would be flip (>>), which is different from <*
[19:38:36] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[19:38:54] <abastro[m]> Yep, it follows the order of effect
[19:39:16] <abastro[m]> It makes me crave more for pipe operator
[19:40:38] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:40:38] *** Joins: acidjnk (~acidjnk@p200300d0c7049f94990c0fcd1a5d0faa.dip0.t-ipconnect.de)
[19:41:23] *** Joins: k8yun_ (~k8yun@user/k8yun)
[19:44:04] *** Joins: dcoutts_ (~duncan@host86-167-90-249.range86-167.btcentralplus.com)
[19:44:15] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[19:44:57] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 252 seconds)
[19:45:25] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.4.1)
[19:45:26] <kuribas> :t (<*)
[19:45:27] <lambdabot> Applicative f => f a -> f b -> f a
[19:45:29] <kuribas> :t (>>)
[19:45:30] <lambdabot> Monad m => m a -> m b -> m b
[19:45:49] <kuribas> :t (<$)
[19:45:50] <lambdabot> Functor f => a -> f b -> f a
[19:46:06] <kuribas> :t (*>)
[19:46:06] <lambdabot> Applicative f => f a -> f b -> f b
[19:46:17] *** Quits: dcoutts__ (~duncan@host86-167-206-34.range86-167.btcentralplus.com) (Ping timeout: 240 seconds)
[19:49:26] <abastro[m]> I heard that monad was initially introduced in haskell due to user interest
[19:49:32] <abastro[m]> What kind of interest was it?
[19:49:50] <c_wraith> not having to use the previous IO system
[19:50:03] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[19:51:30] <abastro[m]> Ouch
[19:51:45] <c_wraith> What's funny about the history of Haskell there is that the IO type, the Monad class, and the ability to define classes on higher-kinded types were all added to Haskell at the same time
[19:52:21] <abastro[m]> Oh, i did not know haskell used to not have HKT
[19:52:38] <abastro[m]> I guess HKT would be a tough concept even for haskell
[19:53:09] <abastro[m]> Perhaps that is why many modern languages are not following HKT then
[19:53:10] <dminuoso> Higher kinded types are not the biggest thing here.
[19:53:16] <dminuoso> But rather typeclasses over higher kinded types.
[19:53:39] <c_wraith> I don't actually know if it had parametric polymorphism over higher-kinded types before that.
[19:53:40] <dminuoso> One of the things that makes grokking `Monad` or say `Applicative` confusing, is that they are an interface on `Type -> Type` kinded things, not `Type` things.
[19:53:53] <dminuoso> And its also something very few languages support.
[19:53:57] <abastro[m]> Noo I misread :<
[19:54:24] <abastro[m]> Tbh next to no language implements bare HKT either
[19:54:50] <c_wraith> admittedly, when most languages talk about higher-kinded types, they are ignoring the fact that they already have them, they just provide no polymorphism over them
[19:54:59] <dminuoso> Well the idea is present in multiple languages, but not necessarily as first-class types.
[19:55:19] <c_wraith> which is why I usually say things like "higher-kinded polymorphism"
[19:55:20] <abastro[m]> I mean the ability to reference the HKT level thing itself
[19:55:37] <c_wraith> because that's the important part
[19:56:14] <abastro[m]> Really IIRC with generics in other langs, you'd have List represent List<Any>
[19:57:31] <c_wraith> Well, that's a bit different.
[19:58:19] <c_wraith> I think Scala is roughly the only language that's made higher-kinded polymorphism work with that kind of syntax, with Foo[_] stuff
[19:59:05] <c_wraith> It's still not ideal, but at least it makes it clear that the type argument is unnamed
[20:00:13] <c_wraith> Which means it has to be treated polymorphically
[20:01:17] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[20:01:23] <dminuoso> With a bit of twisting you can make it happen in rust
[20:01:28] <dminuoso> But its rather gross
[20:01:40] <dminuoso> And certainly doesnt look remotely similar at first glance
[20:02:00] <Sqaure> I remember reading about GHC adding substantial changes to make it more practical for emitting .js/wasm. I wonder if this is labeled something or if someone has a link to a place where that is detailed? 
[20:02:26] <dminuoso> Sqaure: mpickering mentioned it on the haskell mailing lists a few weeks ago
[20:02:37] <dminuoso> Might want to poke him in #ghc 
[20:02:45] <dminuoso> Think he's shepharding it
[20:02:58] <Sqaure> oh ok. Thanks. Ill follow that lead
[20:03:05] <c_wraith> dminuoso: last I heard, the methods of doing that in Rust break down when you have something like traverse, which is both polytypic and makes use of bounded polymorphism
[20:04:34] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[20:07:35] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[20:07:39] *** Joins: yauhsien (~Yau-Hsien@61-231-38-131.dynamic-ip.hinet.net)
[20:07:42] *** Joins: vysn (~vysn@user/vysn)
[20:10:33] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[20:13:11] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[20:15:18] *** Joins: bahamas (~lucian@84.232.140.158)
[20:17:45] *** Joins: zebrag (~chris@user/zebrag)
[20:18:23] *** Quits: acidjnk (~acidjnk@p200300d0c7049f94990c0fcd1a5d0faa.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[20:19:17] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[20:19:57] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[20:21:12] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[20:22:15] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[20:29:11] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:29:22] <Zemyla> There should be a class Profunctor p => Contraclosed p where contraclosed :: p a b -> p (b -> x) (a -> x)
[20:31:25] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[20:34:44] *** Joins: vglfr (~vglfr@88.155.109.98)
[20:35:41] <geekosaur> that looks suspiciously arrow-like…
[20:36:07] <[exa]> Zemyla: any example instances?
[20:36:23] <c_wraith> the instance for (->) follows directly from the type
[20:36:56] <c_wraith> and most Profunctor instances are for some wrapped variation on (->)
[20:37:24] <Zemyla> The only instances I can think of are (->) and Indexed i.
[20:40:12] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[20:40:13] <c_wraith> You should be able to write an instance for every Profunctor where the type variables belong to the same function.
[20:41:20] <c_wraith> which is certainly the most common shape for a Profunctor instance, though not the only one
[20:43:38] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[20:45:01] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[20:47:39] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[20:48:21] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[20:50:56] *** Joins: napping (~brandon@65.128.43.198)
[20:51:29] *** Quits: benin (~benin@183.82.207.30) (Ping timeout: 252 seconds)
[20:52:03] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[20:52:20] *** Joins: benin (~benin@183.82.207.30)
[20:52:23] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:56:40] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[20:59:06] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:9be3:3a9c:fd6c:bab4) (Quit: WeeChat 2.8)
[21:02:43] *** Quits: vglfr (~vglfr@88.155.109.98) (Ping timeout: 260 seconds)
[21:03:43] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[21:03:58] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[21:08:49] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[21:11:52] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[21:13:31] *** Joins: dextaa_ (~dextaa@user/dextaa)
[21:14:03] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[21:15:14] *** Quits: ubert (~Thunderbi@p200300ecdf1588c644ba34ac9ed54fc8.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:17:25] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[21:17:40] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:20:59] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[21:21:45] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[21:22:03] <janus> what is a quick and dirty way to indent a default Show instance of a record?
[21:22:22] <janus> like, increase indention on '{', newlines after commas, stuff like taht
[21:22:57] *** Joins: deadmarshal_ (~deadmarsh@95.38.114.161)
[21:23:06] <janus> i don't wanna change the code because i have many record nested in one another and i will only use this for debugging anyway
[21:23:56] *** Joins: bahamas (~lucian@84.232.140.158)
[21:25:31] <sm> janus: use pretty-show package
[21:25:35] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[21:26:04] *** Joins: Guest21 (~Guest21@2408:846a:200:2177:9ee:b4ee:80a3:4cfb)
[21:26:09] <sm> pretty-simple is another one, slightly different 
[21:26:34] <sm> g'day all
[21:26:53] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[21:27:02] *** Joins: deadmars- (~deadmarsh@95.38.230.213)
[21:27:17] *** Quits: deadmarshal_ (~deadmarsh@95.38.114.161) (Ping timeout: 256 seconds)
[21:28:21] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 250 seconds)
[21:28:34] *** Quits: Guest21 (~Guest21@2408:846a:200:2177:9ee:b4ee:80a3:4cfb) (Client Quit)
[21:29:51] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[21:30:11] <janus> nice, thanks, this seems to work
[21:32:24] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[21:33:11] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[21:33:26] *** Quits: razetime (~quassel@117.207.18.88) (Remote host closed the connection)
[21:34:10] *** Joins: gues44081 (~username@2408:846a:200:2177:9ee:b4ee:80a3:4cfb)
[21:34:46] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[21:36:16] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[21:37:07] *** Quits: gues44081 (~username@2408:846a:200:2177:9ee:b4ee:80a3:4cfb) ()
[21:38:16] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[21:38:55] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[21:42:33] *** Joins: abradabara (~abradabar@185.183.97.187)
[21:44:57] *** Quits: Kaipi (~Kaiepi@156.34.47.253) (Ping timeout: 240 seconds)
[21:45:25] *** Joins: MaterazziSan (~Materazzi@139.22.44.89.dynamic.jazztel.es)
[21:46:05] *** Joins: sridaran (~sridaran@c-68-83-24-37.hsd1.nj.comcast.net)
[21:48:50] *** Quits: ccntrq (~Thunderbi@2a01:c23:9016:8e00:deb2:a539:32d1:3ed2) (Remote host closed the connection)
[21:48:57] *** Quits: sridaran (~sridaran@c-68-83-24-37.hsd1.nj.comcast.net) (Client Quit)
[21:50:53] *** Quits: deadmars- (~deadmarsh@95.38.230.213) (Ping timeout: 250 seconds)
[21:51:04] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[21:53:13] *** Joins: segfaultfizzbuzz (~segfaultf@2602:306:cd3c:9350:4828:b9b3:658f:35bc)
[21:53:35] *** Quits: sloorush (~sloorush@136.233.9.99) (Ping timeout: 256 seconds)
[21:54:03] <segfaultfizzbuzz> so i am trying to push myself to jump beyond what i currently understand... i saw a discussion of the yoneda lemma of category theory and i might have understood it
[21:54:43] <segfaultfizzbuzz> which is to say that if you have a bunch of functors mapping a variety of things onto X, once you have a great enough variety of those functors are you have completely determined what X is
[21:55:13] <segfaultfizzbuzz> i know that the yoneda lemma has some kind of relevance to haskell... can anyone help me bridge this? or am i way off base here
[21:55:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[21:57:52] *** Joins: bahamas (~lucian@84.232.140.158)
[21:58:12] <geekosaur> I'd say the only relevance it has is that a small subset of Haskellers who understand it make use of it
[21:59:11] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[21:59:42] <segfaultfizzbuzz> i see... is that "essential" usage or is it "decorative" or "sophisticated"
[22:00:29] <geekosaur> depends on who's using it, I think
[22:00:44] <geekosaur> btw I am not one of those who understands yoneda
[22:00:47] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-219-172.wlan.tudelft.nl) (Ping timeout: 252 seconds)
[22:00:59] <geekosaur> except insofar as I know it's related to functors in some way
[22:01:21] *** Joins: econo (uid147250@user/econo)
[22:02:27] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 260 seconds)
[22:05:27] <janus> does anybody care about getting aeson 1.5 running on ghc 9.2 (nightly)? if so, i have sent a PR out for that, would appreciate any reviews: https://github.com/haskell/aeson/pull/935
[22:06:53] *** Joins: sloorush (~sloorush@136.233.9.99)
[22:07:49] *** Joins: Akiva (~Akiva@user/Akiva)
[22:11:31] *** Joins: y04nn (~y04nn@2a03:1b20:1:e011::a19e)
[22:11:57] *** Quits: y04nn (~y04nn@2a03:1b20:1:e011::a19e) (Remote host closed the connection)
[22:20:36] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[22:29:45] *** Parts: MaterazziSan (~Materazzi@139.22.44.89.dynamic.jazztel.es) (ERC (IRC client for Emacs 27.1))
[22:29:58] *** Joins: bahamas (~lucian@84.232.140.158)
[22:30:10] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:30:10] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:30:10] *** Joins: wroathe (~wroathe@user/wroathe)
[22:34:29] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[22:35:22] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[22:36:19] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[22:36:50] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[22:37:21] *** Quits: mbuf (~Shakthi@223.178.96.253) (Quit: Leaving)
[22:39:38] *** Joins: nf (~n@monade.li)
[22:40:15] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[22:43:44] <boxscape_> segfaultfizzbuzz IIRC one use of the Yoneda lemma in Haskell is that you can you use to transform multiple fmap invocations into a single fmap invocation, potentially improving performance
[22:44:20] <dminuoso> Well, it's not really a "usage" of the yoneda lemma.
[22:44:42] <boxscape_> I suppose maybe it's more accurate to say it's a usage of the Yoneda newtype
[22:46:44] <dminuoso> In a lot of ways I think making these connections to category theory is cute, but it scares users away.
[22:46:47] <segfaultfizzbuzz> boxscape_: so the yoneda lemma is useful in proving the equivalence between function applications?
[22:47:12] <dminuoso> segfaultfizzbuzz: So assume you have some repeated applications of fmap
[22:47:19] <dminuoso> `fmap f . fmap g . fmap h . fmap i`
[22:47:20] <segfaultfizzbuzz> i am not interested in being "scared away" or "not scared away", i am interested in "effective abstractions which are not masturbatory"
[22:47:37] <dminuoso> So by fmap laws you have:
[22:47:48] <dminuoso> fmap f . fmap g . fmap h . fmap i = fmap (f . g . h . i)
[22:48:01] <dminuoso> But GHC cant make that transformation itself
[22:48:10] <segfaultfizzbuzz> ...wow really? heh
[22:48:22] <dminuoso> It cant know functor laws are respected in the first place.
[22:48:43] <segfaultfizzbuzz> aren't f g h i declared as functors...?
[22:48:44] <dminuoso> And it would need a special cased simplifier routine to recognize this. But we have neither
[22:49:00] <dminuoso> With Yoneda you can sort of enforce this transformation itself
[22:49:29] <dminuoso> % newtype Yoneda f a = Yoneda { runYoneda :: forall b. (a -> b) -> f b }
[22:49:29] <yahb> dminuoso: 
[22:49:34] <dminuoso> % :t fmap
[22:49:34] <yahb> dminuoso: Functor f => (a -> b) -> f a -> f b
[22:49:56] <dminuoso> So Yoneda will, by convention, contain fmap partially applied to something
[22:50:10] <dminuoso> % x = Yoneda (`fmap` [1,2,3])
[22:50:10] <yahb> dminuoso: 
[22:50:15] <dminuoso> Then you just write:
[22:50:25] <dminuoso> instance Functor (Yoneda f) where fmap f m = Yoneda (\k -> runYoneda m (k . f))
[22:50:27] <dminuoso> % instance Functor (Yoneda f) where fmap f m = Yoneda (\k -> runYoneda m (k . f))
[22:50:27] <yahb> dminuoso: 
[22:50:42] *** Joins: vglfr (~vglfr@46.96.156.93)
[22:50:44] <dminuoso> For convenience we now write
[22:50:47] <dminuoso> % liftYoneda a = Yoneda (\f -> fmap f a)
[22:50:47] <yahb> dminuoso: 
[22:51:02] <dminuoso> Then you can take some arbitrary functorial value, like [1,2,3], liftYoneda (partially apply to fmap)
[22:51:10] <dminuoso> Then if you use `fmap` on the Yoneda wrapper, it will automatically do the fusion
[22:51:18] <dminuoso> And then you lowerYoneda, get your list back
[22:51:39] <dminuoso> Some people think its cute to explain this in terms of category theory, I prefer just looking at what this does.
[22:51:55] <boxscape_> (so `fmap f . fmap g . fmap h . fmap i` becomes `lowerYoneda . fmap f . fmap g . fmap h . fmap i . liftYoneda`)
[22:52:51] <boxscape_> segfaultfizzbuzz the Yoneda lemma here is reflected in the definition of the newtype, f a ~= forall b . (a -> b) -> f b
[22:53:14] <dminuoso> segfaultfizzbuzz: by the way, Codensity is the exact same story except with (>>=) :)
[22:54:16] <segfaultfizzbuzz> it's a little bit far beyond where i am but thanks for trying to help me catch a glimpse of things. something about proving equality of fmap compositions
[22:54:30] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:a9ba:a14e:e332:b83f)
[22:59:57] <dminuoso> segfaultfizzbuzz: By the way, its usually easier to prove `fmap id = id`
[23:00:03] <boxscape_> ugh I keep getting the wrong one of these when searching in Hoogle. I was thinking "hmm it seems really strange that Codensity doesn't have have a Monad instance", but of course that's because the first result in hoogle is for profunctors
[23:00:17] <dminuoso> due to the way our type system works, if you prove `fmap id = id`, `fmap f . fmap g = fmap (f . g)` automatically holds
[23:00:40] <segfaultfizzbuzz> dminuso: ah interesting
[23:01:05] *** Joins: deadmarshal_ (~deadmarsh@95.38.230.213)
[23:02:27] <dminuoso> So yeah, it might be obvious how if you do `fmap f . fmap g . fmap h` on a list that this will generate intermediate lists
[23:02:32] <dminuoso> Which is a bit unfortunate
[23:02:42] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Remote host closed the connection)
[23:03:26] <dminuoso> If you have a list of non-trivial size (say a few million elements), and you want to fmap a bunch of times over that, it's clearly faster and better to just compose the functions and fmap once, generating millions cons cells just once, not a bunch of times
[23:04:02] <dminuoso> Sometimes your code structure lets you just express that, but sometimes it's not as easy or as expressive
[23:04:39] <dminuoso> It's often more convenient to just wrap it with Yoneda, and then just write naive `fmap` a bunch of times, knowing that the Yoneda Functor implementation will compose (fuse) the functions together.
[23:05:24] *** Quits: deadmarshal_ (~deadmarsh@95.38.230.213) (Ping timeout: 240 seconds)
[23:06:04] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[23:07:24] *** Quits: segfaultfizzbuzz (~segfaultf@2602:306:cd3c:9350:4828:b9b3:658f:35bc) (Ping timeout: 240 seconds)
[23:08:10] *** Joins: cheater (~Username@user/cheater)
[23:10:02] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[23:10:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:13:00] *** Joins: Kaipi (~Kaiepi@156.34.47.253)
[23:13:35] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[23:14:27] *** Joins: jakalx (~jakalx@base.jakalx.net)
[23:14:42] *** Joins: Benzi-Junior (~BenziJuni@88-149-64-179.du.xdsl.is)
[23:15:58] *** Quits: vglfr (~vglfr@46.96.156.93) (Read error: Connection reset by peer)
[23:16:07] *** Joins: vglfr (~vglfr@46.96.156.93)
[23:16:48] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[23:17:00] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[23:19:09] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[23:20:02] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[23:20:28] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:21:27] *** Joins: justOkay (~justache@user/justache)
[23:22:33] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[23:26:36] *** Quits: vglfr (~vglfr@46.96.156.93) (Ping timeout: 245 seconds)
[23:29:43] *** Joins: yauhsien_ (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[23:32:03] *** Quits: phma (~phma@host-67-44-208-58.hnremote.net) (Read error: Connection reset by peer)
[23:33:18] *** Joins: phma (phma@2001:5b0:2172:dab8:f6f:c543:829a:340a)
[23:33:32] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[23:35:17] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:38:59] *** Quits: sloorush (~sloorush@136.233.9.99) (Ping timeout: 256 seconds)
[23:39:35] <tomsmeding> it seems I cannot open file descriptors other than 0,1,2 for a child process with 'process'; is it correct that this is just omitted functionality or am I missing something?
[23:41:39] *** Joins: jakalx (~jakalx@base.jakalx.net)
[23:43:58] <monochrom> In the CreateProcess record, the field "close_fds" may help.
[23:44:21] <tomsmeding> oh wait
[23:44:31] <tomsmeding> heh
[23:44:37] <tomsmeding> monochrom++
[23:44:40] <monochrom> But it sounds very indirectly like False is already the default.
[23:45:42] *** Joins: unyu (~pyon@user/pyon)
[23:45:56] <tomsmeding> hm, but the workaround of writing a shell script for this is probably a better idea anyway, so I don't even need the functionality anymore :)
[23:46:26] <geekosaur> using fds other than those is highly nonstandard behavior
[23:46:47] <monochrom> Yeah, give Caeser what belongs to Caeser, give shell what belongs to shell. >:)
[23:47:02] <tomsmeding> man 1 bwrap: "--file FD DEST   - Copy from the file descriptor FD to DEST."
[23:47:05] <tomsmeding> I didn't invent the API
[23:47:24] <tomsmeding> I agree it's weird
[23:47:25] <geekosaur> timeto use /proc/self/fds
[23:47:42] <monochrom> Give Caeser a shell, and he can script for a day. Show him Haskell, and he has galaxy brain for life or something.
[23:48:58] <geekosaur> oh, that might not even work
[23:49:03] <geekosaur> bubblewrap stuff
[23:49:59] <geekosaur> anyway it is nonstandard whereas process has to be as standard as possible to work on both unix and windows. you may find something more flexible in the unix package
[23:50:32] <geekosaur> (in particular at least some versions of windows use fds 3 and 4 already)
[23:51:10] <tomsmeding> ah right, good point about portability
[23:53:22] *** Joins: oooottoo (~oooottoo@c-24-9-197-96.hsd1.co.comcast.net)
[23:53:25] <geekosaur> (and yet still runs into problems. #ghc has seen several rants about both os x and windows portability gotchas)
[23:56:29] *** Quits: yauhsien_ (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[23:57:10] *** Joins: yauhsien_ (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
