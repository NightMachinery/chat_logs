[01:12:35] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[01:14:01] *** Joins: hololeap (~hololeap@user/hololeap)
[02:07:18] <maralorn> <fendor[m]> "ok, I can't seem to launch nix-..." <- Yeah, you might need nix 2.7 for that.^^
[02:11:05] <maralorn> <fendor[m]> "you can see the modules are..." <- Caching makes me curious: I have a quite unusual setup where /home/maralorn is a tmpfs. (I hate state.) Maybe I have some filesystem confusion that breaks hls expectations?
[02:11:35] <maralorn> Or should hls actually cache this in process?
[02:13:48] <maralorn> Well the referenced cache dir seems to exist exactly once.
[02:14:14] <maralorn> Maybe I can go and compile me a hls on my own.
[02:44:00] <maralorn> fendor: marvelous. I tried a) checking out hls and building it with cabal and b) a random different project (also with a cabal crate). The error always happens. üòÄ
[03:37:55] <maralorn> <maralorn> "fendor: marvelous. I tried a..." <- I am pretty sure this is a stupid mistake on my end, but I have no clue how ‚Ä¶
[03:38:14] <maralorn> Ah, wait. I can test it on a another machine for comparison.
[04:32:23] <maralorn> <maralorn> "I am pretty sure this is a..." <- Yeah, same nix-shell works on my laptop.^^
[13:30:24] *** Quits: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0) (Quit: You have been kicked for being idle)
[13:30:54] *** Joins: karim (~karim@102.40.222.144)
[14:04:36] *** Quits: karim (~karim@102.40.222.144) (Ping timeout: 240 seconds)
[16:43:09] <maralorn> I have debugged this further, result can be found here: https://github.com/haskell/haskell-language-server/issues/2801
[17:14:28] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[17:16:15] *** Joins: hololeap (~hololeap@user/hololeap)
[18:02:40] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[18:04:07] *** Joins: hololeap (~hololeap@user/hololeap)
[20:20:04] <sm> morning all
[20:20:48] <sm> sorry for the FAQ, but what's needed to get a hls for ghc 9.2 on mac m1 ?
[20:24:31] <maerwald[m]> sm: https://github.com/haskell/haskell-language-server/issues/2771
[20:26:40] * sm likes "Presumably we want to support it for platforms where it isn't broken, though"
[20:28:14] <sm> in my world 9.2.2 just became viable (a useful subset of my deps now support it) and desirable (it's almost 3x quicker on mac m1)
[20:31:55] <sm> I'm fixing a lot of ghc 9.2 warnings and it would be nice if HLS worked
[20:32:24] <sm> so I'm wondering what's needed exactly .. help ?
[20:34:05] <sm> and I guess I'm asking if there are showstoppers meaning I shouldn't bother trying to build it
[20:34:09] <drsooch[m]> You can build 9.2.2 just fine
[20:34:35] <sm> thanks, I will try it
[20:34:40] <drsooch[m]> Just use cabal-ghc921.project
[20:35:14] <drsooch[m]> https://github.com/haskell/haskell-language-server/issues/2179 this has the 9.2.* status some plugins aren‚Äôt available
[20:36:33] <sm> great, I am absolutely fine with missing plugins. And to be clear when I said "help" above I was wondering if that's what's needed, not begging for free support :)
[21:03:35] <sm> how come, after a successful cabal build, when you do cabal install it builds a bunch more stuff ? Just curious
[21:04:15] <maerwald[m]> sm: build and install are different in caballi, unlike stack
[21:04:32] <sm> I thought cabal build usually built executables too
[21:05:01] <maerwald[m]> Yes, but locally in dist-newstyle, while install puts it into store
[21:07:08] <maerwald[m]> Technically, cabals behavior is better, but stacks more intuitive 
[21:08:11] <maerwald[m]> `stack install` is just an alias for `stack build --copy-bins`
[21:08:50] <maerwald[m]> So I'm assuming stack doesn't cache project local packages globally
[21:10:04] <sm> I expected cabal install would have just been copying the already built exes, then
[21:10:20] <sm> oh well, I'm sure there's a reason
[21:11:14] <sm> figuring out the best way to integrate these new binaries with ghcup. I think I'll move ~/.cabal/bin in front of ~/.ghcup/bin, so when I build something with cabal it'll take precedence
[21:11:51] <sm> but of course that probably requires a FULL REBOOT
[21:12:00] <maerwald[m]> sm: you can build hls with ghcup
[21:14:47] <maerwald> sm: `ghcup compile hls -g master  --ghc 9.2.2 --cabal-project cabal-ghc92.project`
[21:15:29] <sm> aha.. of course I can. I've done it already, but does the above have some extra magic for installing it ?
[21:16:08] <maerwald> and ~/.ghcup/env already ensures that ~/.cabal/bin comes before .ghcup/bin
[21:16:39] <maerwald> sm: it uses `cabal v2-install` under the hood
[21:17:37] * sm isn't using .ghcup/env it seems (and that file doesn't exist)
[21:17:50] <maerwald> sm: the boostrap script installs it
[21:18:18] <maerwald> (which you can safely re-run even if ghcup is already installed)
[21:18:23] <sm> I know
[21:18:48] <sm> alright, so it sounds like I'm on the right track. Thanks maerwald 
[21:31:01] <sm> I installed just the new haskell-language-server-wrapper in ~/.ghcup/bin, and symlinked it so it's the default `haskell-language-server-wrapper`. Should that be enough ? Then restarted the Haskell LSP Server, and it shows this mix of 9.2 and 8.10 stuff, any ideas ?... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/7dbee3af931660095ca62c5a5edb1891464e559b)
[21:31:36] <maerwald> you're probably missing the actual hls executables
[21:31:40] <maerwald> that's why using ghcup is a better idea
[21:32:58] <sm> ok, so I'll copy the haskell-language-server exe also.. but should it be named something special so that haskell-language-server-wrapper selects it at the right time ?
[21:33:20] <sm> as yours are ?
[21:33:24] <maerwald> yes, it needs to have ghc version suffix
[21:33:39] <maerwald> you'll be messing up ghcup's internal executable management most likely :D
[21:33:47] <maerwald> although it is quite permissive
[21:34:38] <sm> sure, but just for initial testing
[21:34:53] <sm> in fact I had already done that, I called it `haskell-language-server-9.2.2~1.6.1.1`. Something is still pointing it to 8.10.7 though
[21:35:13] <sm> my hie.yaml says `stackYaml: "stack9.2.yaml"`, so that should be ok
[21:43:14] <sm> oh I see, it's saying the default `ghc` in PATH is 8.10.7
[21:48:44] <sm> setting compiler: in the stack.yaml didn't help, but switching the default ghc did
[21:50:09] <sm> and it seems to be working. Started up so quick I wasn't sure
[21:53:02] *** Joins: fendor__ (~fendor@91.141.65.26.wireless.dyn.drei.com)
[21:54:04] <sm> and there's my warnings. Success! ‚úåÔ∏è
[21:55:51] *** Quits: fendor_ (~fendor@91.141.68.132.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[21:58:06] <sm> how do I get it to show warnings across all files, without having to visit each one ?
[21:58:59] <sm>  * I installed just the new haskell-language-server-wrapper in ~/.ghcup/bin, and symlinked it so it's the default `haskell-language-server-wrapper`. Should that be enough ? Then restarted the Haskell LSP Server, and it shows this mix of 9.2 and 8.10 stuff, any ideas ?
[21:58:59] <sm> <paste snipped>
[22:00:26] <sm> also.. back to the install process.. shouldn't it have been possible to configure it to use ghc-9.2 in this project, without having to change the default `ghc` in PATH ?
[22:02:14] <sm> hmm. Maybe incomplete-uni-patterns is just too pedantic and must be ignored.
[22:15:26] *** Joins: arrowd (~arr@78.107.6.128)
[22:22:02] *** fendor__ is now known as fendor
