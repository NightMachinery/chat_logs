[00:00:48] <alh> If your brain is dumping cores something serious is wrong!
[00:01:04] <daemon> oh everyone has known that for ages :)
[00:06:44] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[00:08:01] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[00:11:30] *** Joins: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617)
[00:13:40] *** Quits: proller (~p@2a02:6b8:b081:8832::1:f) (Ping timeout: 260 seconds)
[00:17:20] *** Joins: lucasb (uid333435@id-333435.hampstead.irccloud.com)
[00:18:00] *** Joins: xse (~xse@user/xse)
[00:18:03] *** Parts: xse (~xse@user/xse) ()
[00:18:32] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Ping timeout: 240 seconds)
[00:23:00] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:25:03] *** Quits: csrf (~csrf@user/csrf) (Read error: Connection reset by peer)
[00:27:25] *** Joins: proller (~p@2a02:6b8:b081:1207::1:7)
[00:27:32] *** Joins: csrf (~csrf@user/csrf)
[00:27:59] *** Quits: rgrinberg (~textual@201.198.177.243) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:30:36] *** Joins: rgrinberg (~textual@201.198.177.243)
[00:31:17] *** Quits: csrf (~csrf@user/csrf) (Read error: Connection reset by peer)
[00:31:28] *** Joins: csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net)
[00:31:36] *** Joins: kensanata (~user@user/kensanata)
[00:33:03] <dacav> Hey #perl! Which CPAN library would you recommend me to scrape a webpage?
[00:33:12] <dacav> I found a few of them
[00:35:01] <vague> Just scrape or also get a specific element?
[00:36:05] <dacav> I'd say the latter
[00:36:33] <dacav> E.g, big and clumsy webpage, I'd like to extract a few html tags that contain the info I want
[00:36:45] <vague> Not that it matters, I'd use Mojo::UserAgent, or for a one-liner, perl -Mojo -E 'say g("mojolicious.org")->dom("h1")->map("text")->join("\n")'
[00:37:20] <dacav> ah, excellent, it looks simple enough
[00:37:30] <dacav> Thanks vague, I'll try it
[00:37:57] <vague> https://metacpan.org/pod/ojo#g read documentation 
[00:37:57] <Paperbot> Link title(s): [ ojo - Fun one-liners with Mojo - metacpan.org ]
[00:40:15] <dacav> It looks a little intimidating
[00:41:10] <dacav> hey vague! So did they register 'ojo' to play on the `-Mojo`?? :D
[00:41:16] <dacav> LOL
[00:42:44] <vague> It's a play on words, yes :)
[00:44:35] *** Joins: whynot (~whynot@37.73.147.169)
[00:45:22] <Grinnz> under the hood, it's using Mojo::UserAgent and Mojo::DOM (via the dom method)
[00:45:51] <Grinnz> https://www.perl.com/article/143/2015/1/8/Extracting-from-HTML-with-Mojo-DOM/
[00:45:52] <Paperbot> Link title(s): [ Extracting from HTML with Mojo::DOM ]
[00:48:57] *** Quits: zgu (~zgu@2603-7080-b704-0800-e4e2-df43-fd5d-e657.res6.spectrum.com) (Remote host closed the connection)
[00:53:27] *** Quits: XV8 (~XV8@199.192.138.251) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:57:04] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[01:01:53] <daemon> perlbot paste
[01:01:54] <perlbot> daemon: Paste your code to the new https://l.perl.bot/#perl or http://paste.scsys.co.uk/ or https://gist.github.com/ | see allowpaste plugin as an op to control the pastebin in your channel
[01:02:56] <daemon> How can anything be unitilized here? https://l.perl.bot/p/bwu9jg
[01:02:57] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[01:03:59] *** Quits: rgrinberg (~textual@201.198.177.243) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:04:15] <revhippie> Sorting on {b} and {a} instead of {$b} and {$a}?
[01:04:23] <daemon> ah crap
[01:04:26] <daemon> im dumb
[01:04:31] <daemon> revhippie++ # cheers
[01:05:45] <revhippie> You could probably save yourself some 䂪unctuation at the end with: say $summary sprintf '%20s: %s', $key, $lang_count->{$key};
[01:05:57] <daemon> oh yes I forgot sprintf takes a list
[01:06:00] <daemon> cheers again
[01:06:08] <daemon> well say takes a list -_-
[01:06:23] *** Quits: monkey_ (~user@181.114.17.106) (Remote host closed the connection)
[01:06:27] <daemon> I think my brain is malfunctioning today
[01:06:43] <Grinnz> perlbot: utf8 䂪
[01:06:44] <perlbot> Grinnz: U+40AA (e4 82 aa): CJK UNIFIED IDEOGRAPH-40AA [䂪] 
[01:06:47] <revhippie> don't forget to breathe, daemon :)
[01:07:02] *** Joins: rgrinberg (~textual@201.198.177.243)
[01:07:04] <gordonfish> Re: <LeoNerd> I.e. let it tick anyway at its own schedule but then just don't do whatever it is, if you consider it "paused"
[01:07:11] <daemon> revhippie, had to goto london yesterday and do meetings and stuff for the entire day, very not my scene :) followed by hours of train travel
[01:07:17] <daemon> think I am still paying the mental debt
[01:07:54] <gordonfish> LeoNerd: Thanks, though in my case, since every tick the interval is advanced to the next index in $self->{intervals}->@*, though I could skip that if paused. Here is what I came up with much earlier: https://l.perl.bot/p/oc1p7h
[01:07:54] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[01:08:17] <gordonfish> LeoNerd: Check the pause and _reschedule routines.
[01:09:21] <gordonfish> LeoNerd: Err, sorry, wrong version. https://l.perl.bot/p/8mu65t
[01:09:21] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[01:10:48] <gordonfish> Seems to work well, in all my tests, when unpausing, it goes for however much time was remaining when it was paused, so continuing right where it left off, like pausing and resuming a stop watch, for example.
[01:12:42] <gordonfish> I originally started this module for a program I'm working on, but I'm thinking of releasing it to CPAN. What I'm wondering, is if it would be ok to release it as is, in the IO::Async::Timer::... namespace, or should I prefix that with something?
[01:12:55] <gordonfish> I want to be sure as I wouldn't want to encroach or anything.
[01:13:28] <gordonfish> (I hope I'm not being silly asking that.)
[01:13:33] <dacav> vague: it looks very complete, as a library, although I am a little intimidated, and I feel it is a bit of an overkill, for my purposes.  But it is also late, I should have some sleep.  Thanks for the advice.  
[01:13:37] <dacav> see you all :)
[01:23:02] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[01:23:26] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[01:26:43] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Client Quit)
[01:27:02] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 240 seconds)
[01:29:25] *** Quits: magla (~gelignite@55d4df7d.access.ecotel.net) (Quit: Stay safe!)
[01:31:45] <LeoNerd> gordonfish: 3rd party additions seem to live in IO::AsyncX::...
[01:32:43] <gordonfish> Ah, right. Like Moo(se)X, DBIx, etc
[01:35:06] *** Quits: pb (~pb@polemon.org) (Remote host closed the connection)
[01:35:24] *** Joins: pb (~pb@polemon.org)
[01:36:49] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[01:40:07] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:43:46] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Quit: This computer has gone to sleep)
[01:55:09] *** Quits: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[01:59:31] *** Quits: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net) (Ping timeout: 245 seconds)
[02:01:26] *** Joins: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net)
[02:17:08] * GumbyPAN CPAN Upload: Module-Generic-v0.17.3 by JDEGUEST https://metacpan.org/release/JDEGUEST/Module-Generic-v0.17.3
[02:18:51] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:22:08] * GumbyPAN CPAN Upload: Cookie-v0.1.5 by JDEGUEST https://metacpan.org/release/JDEGUEST/Cookie-v0.1.5
[02:23:32] *** Quits: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[02:25:03] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 250 seconds)
[02:27:00] *** Joins: hethw (~heth@46.238.32.56)
[02:32:54] *** Quits: pizdets_ (~pizdets@183.182.111.40) (Ping timeout: 250 seconds)
[02:33:31] <ash_work1i> thanks for the help earlier btw
[02:33:33] *** Parts: ash_work1i (~ash_m@user/ash-m/x-3292451) ()
[02:34:09] *** Joins: pizdets (~pizdets@183.182.111.212)
[02:34:52] *** Joins: gast0n (~g4570n@user/gast0n)
[02:37:32] *** Quits: rgrinberg (~textual@201.198.177.243) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:45:51] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Remote host closed the connection)
[02:47:05] *** Quits: lucasb (uid333435@id-333435.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:49:01] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[03:06:12] *** Quits: whynot (~whynot@37.73.147.169) (Quit: leaving)
[03:25:29] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:4c2d:8074:ff8b:55dd) (Ping timeout: 250 seconds)
[03:30:38] *** Quits: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[03:32:23] *** Joins: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net)
[03:33:15] *** Joins: rgrinberg (~textual@201.198.177.243)
[03:34:41] *** Quits: Darkcoal (~user@143.92.183.8) (Quit: Darkcoal)
[03:39:46] *** Quits: El_Che (~nxadm@ssh2.ulyssis.student.kuleuven.be) (Ping timeout: 260 seconds)
[03:40:33] *** Joins: El_Che (~nxadm@ssh2.ulyssis.student.kuleuven.be)
[03:41:38] *** Quits: woei (~woei@cust-245-64-110-94.dyn.as47377.net) (Ping timeout: 260 seconds)
[03:49:02] *** Quits: Manderson (~manderson@047-028-019-189.res.spectrum.com) (Read error: Connection reset by peer)
[03:49:45] *** Quits: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net) (Ping timeout: 250 seconds)
[03:52:38] *** Joins: woei (~woei@cust-73-85-110-94.dyn.as47377.net)
[03:57:09] *** Joins: twistdroach (~textual@pool-108-49-221-175.bstnma.fios.verizon.net)
[04:08:37] *** Joins: EvanCarroll (~ecarroll@50.222.187.218)
[04:18:48] *** Quits: superkuh (~superkuh@user/superkuh) (Remote host closed the connection)
[04:23:05] <aquanight> LeoNerd: crazy thought: is it really better to use callchecker over wrapping PL_check on OP_ENTERSUB?
[04:24:01] <aquanight> I guess I get the "perl decides if the sub is actually the particular one involved" bit
[04:27:21] *** Joins: superkuh (~superkuh@user/superkuh)
[04:28:46] *** Quits: zenfold__ (~zenfold@user/zenfold) (Ping timeout: 260 seconds)
[04:36:14] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:51:50] <ilmari> aquanight: call_checker is built into the default PL_check[OP_ENTERSUB] (aka Perl_ck_subr)
[04:52:06] <ilmari> so why override it when perl can do the work for you?
[04:52:25] *** Quits: twistdroach (~textual@pool-108-49-221-175.bstnma.fios.verizon.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:52:56] <aquanight> ilmari: my main gripe is that callcheckers aren't chained like PL_check is
[04:53:31] <ilmari> you can only have one call checker for a given sub, yes
[04:53:38] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[04:54:18] <ilmari> when would you ever have multiple checkers fighting over the same sub?
[04:54:30] <aquanight> I don't really know to be honest.
[04:54:49] <ilmari> try and avoid imagining extra problems that don't exist - programming is hard enough when you only have to deal with the real ones.
[04:54:52] <aquanight> but when I think about what I'm doing with it I'm thinking "do I really need to claim this spot that now no one else can?"
[04:55:09] <aquanight> because I don't really know what sort of things people are doing with callcheckers
[04:55:20] <ilmari> nobody else can hook the checking of compilation of calls to that one function that you own
[04:55:31] <aquanight> I know what *I* am doing with it, and nothing about it needs to be inherently incompatible.
[04:55:33] <ilmari> call checker are per sub
[04:55:53] <aquanight> the catch is that I'm putting call checkers on other people's subs. (Subs that they specifically mark, but still.)
[04:55:57] <ilmari> you do that to get special handlng for something that you provide that looks like a sub bug isn't really
[04:57:56] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[05:10:06] <aquanight> that's the thing really
[05:10:55] <aquanight> I'm not changing how the parameters are processed or the "syntax" of the sub call or anything like that. I'm just changing it to execute earlier than normal runtime when specific conditions are met.
[05:21:34] *** Quits: ignarps (~iggy@user/ignarps) (Quit: ZNC - https://znc.in)
[05:25:24] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Ping timeout: 260 seconds)
[05:38:00] *** Joins: twistdroach (~textual@pool-108-49-221-175.bstnma.fios.verizon.net)
[05:38:46] *** Quits: Pali (~pali@user/pali) (Ping timeout: 265 seconds)
[05:44:22] *** Quits: Su-Shee (~Susanne@p4ffc73e9.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:45:51] *** Joins: Su-Shee (~Susanne@p4ffc7d83.dip0.t-ipconnect.de)
[05:52:48] *** Quits: twistdroach (~textual@pool-108-49-221-175.bstnma.fios.verizon.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:00:50] *** Joins: bmeneg (~bmeneg@2001:1284:f016:86c7:92f3:3e43:cc49:dd71)
[06:28:23] *** Joins: twistdroach (~textual@pool-108-49-221-175.bstnma.fios.verizon.net)
[06:28:29] *** Quits: twistdroach (~textual@pool-108-49-221-175.bstnma.fios.verizon.net) (Client Quit)
[06:39:06] *** Quits: EvanCarroll (~ecarroll@50.222.187.218) (Ping timeout: 245 seconds)
[06:46:54] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 260 seconds)
[06:46:55] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 256 seconds)
[06:53:32] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[06:53:47] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[06:56:30] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[07:00:49] *** Joins: EvanCarroll (~ecarroll@68-78-105-35.lightspeed.hstntx.sbcglobal.net)
[07:03:50] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 265 seconds)
[07:12:42] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[07:15:08] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[07:35:28] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[07:38:00] *** Joins: R2robot (~R2robot@user/r2robot)
[07:44:49] *** Joins: Martchus_ (~martchus@dynamic-077-009-059-241.77.9.pool.telefonica.de)
[07:45:14] *** Quits: Martchus (~martchus@dynamic-095-118-047-120.95.118.pool.telefonica.de) (Ping timeout: 260 seconds)
[07:49:33] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[08:00:40] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[08:07:23] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 250 seconds)
[08:14:52] *** Joins: fstd (~fstd@xdsl-87-79-98-69.nc.de)
[08:17:47] *** Quits: fstd_ (~fstd@xdsl-78-35-74-116.nc.de) (Ping timeout: 250 seconds)
[08:20:57] *** Quits: slowButP1esent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:23:03] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[08:48:59] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[09:09:54] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[09:16:31] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[09:27:26] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Ping timeout: 245 seconds)
[09:27:52] <gordonfish> LeoNerd, etc: Been trying out Object::Pad and I am really loving it so far. One very small thing that might be nice is if something like class Foo { has $x :param = 2; has $y :param = $x + 5; } were possible. One can use BUILD { $y //= $x + 5; } to achieve that, which is well and good, though I'm wondering what your (or anyone else's) thoughts might be.
[09:28:29] *** Quits: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Quit: No Ping reply in 180 seconds.)
[09:30:27] <gordonfish> sweval: use Object::Pad; class Foo { has $x :param = 2; has $y :param = $x + 5; method out { print "[x=$x] [y=$y]"; } } Foo->new(x => 3)->out;
[09:30:29] <perlbot> gordonfish: ERROR: parse failed--compilation aborted at (IRC) line 1. 
[09:30:36] <gordonfish> sweval: use Object::Pad; class Foo { has $x :param = 2; has $y :param = undef; BUILD { $y //= $x + 5 } method out { print "[x=$x] [y=$y]"; } } Foo->new(x => 3)->out;
[09:30:37] <perlbot> gordonfish: [x=3] [y=8]
[09:32:43] *** Joins: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net)
[09:37:38] *** Joins: mattil_ (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi)
[09:45:58] *** Joins: mixfix41 (~homefame@user/mixfix41)
[09:47:23] *** Quits: mattil_ (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:47:50] *** Joins: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi)
[09:48:54] *** Quits: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[09:49:03] *** Joins: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi)
[09:56:03] *** Joins: Manderson (~manderson@047-028-019-189.res.spectrum.com)
[10:05:03] *** Quits: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:05:31] *** Joins: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi)
[10:06:07] *** Quits: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[10:06:16] *** Joins: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi)
[10:06:20] *** Quits: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:06:47] *** Joins: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi)
[10:11:58] * GumbyPAN CPAN Upload: App-Notifier-Service-0.0902 by SHLOMIF https://metacpan.org/release/SHLOMIF/App-Notifier-Service-0.0902
[10:13:12] *** Quits: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:13:26] *** Quits: ericlee_ (~ericlee@c-24-7-50-61.hsd1.ca.comcast.net) (Quit: Leaving)
[10:13:40] *** Joins: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi)
[10:18:02] *** Quits: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi) (Ping timeout: 240 seconds)
[10:21:27] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:db2:af70:7900:d455) (Ping timeout: 264 seconds)
[10:23:39] *** Joins: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi)
[10:24:08] *** Quits: rgrinberg (~textual@201.198.177.243) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:28:30] *** Quits: mattil (~mattil@d11m1lskzwq-5kqht94-4.rev.dnainternet.fi) (Ping timeout: 260 seconds)
[10:30:27] *** Joins: tobybl (~tobybl@213.31.134.21)
[10:31:27] *** Joins: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de)
[10:34:55] *** Quits: tobybl (~tobybl@213.31.134.21) (Ping timeout: 250 seconds)
[10:50:02] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 256 seconds)
[10:54:33] *** Quits: Su-Shee (~Susanne@p4ffc7d83.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[10:56:08] *** Joins: Su-Shee (~Susanne@p4ff49ec4.dip0.t-ipconnect.de)
[10:57:59] *** Joins: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[11:03:21] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[11:05:15] *** Joins: art1 (~romeyke@p200300ccdf09d000031b6d900dc81fcd.dip0.t-ipconnect.de)
[11:05:28] *** Quits: randir_ (~randir@95-25-138-85.broadband.corbina.ru) (Remote host closed the connection)
[11:08:01] <LeoNerd> gordonfish: has $y :param { $x + 5 };
[11:08:10] <LeoNerd> It's deferred code, so it sits inside {braces}
[11:09:50] *** Joins: martinus__ (~martin@96.19.201.77.rev.sfr.net)
[11:10:37] *** Joins: mattil (~mattil@helsinki.portalify.com)
[11:14:36] *** Quits: mixfix41 (~homefame@user/mixfix41) (Read error: Connection reset by peer)
[11:18:09] *** Joins: randir (~randir@93.159.239.42)
[11:28:21] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:31:40] *** Joins: cobber (~protorom@213.240.182.77)
[11:32:06] * GumbyPAN CPAN Upload: Async-0.12 by ARISTOTLE https://metacpan.org/release/ARISTOTLE/Async-0.12
[11:37:34] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[11:41:30] *** Joins: Penguin666x (~Penguin66@217.138.205.135)
[11:44:30] *** Quits: Penguin666 (~Penguin66@217.138.205.135) (Ping timeout: 268 seconds)
[11:47:35] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[11:48:36] *** Joins: mattil (~mattil@helsinki.portalify.com)
[11:50:33] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 250 seconds)
[11:56:54] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 256 seconds)
[11:57:52] *** Joins: mattil (~mattil@helsinki.portalify.com)
[12:00:16] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[12:04:06] *** Quits: SergeiZhmylev (~zhmylove@178.252.127.211) (Ping timeout: 245 seconds)
[12:04:42] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 260 seconds)
[12:21:04] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[12:26:40] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[12:31:30] *** Joins: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk)
[12:40:12] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:44:09] *** Joins: kensanata (~user@user/kensanata)
[12:45:31] *** Joins: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se)
[12:51:13] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Ping timeout: 250 seconds)
[12:57:22] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 260 seconds)
[13:06:17] * GumbyPAN CPAN Upload: XML-Sig-OO-0.006 by AKALINUX https://metacpan.org/release/AKALINUX/XML-Sig-OO-0.006
[13:09:01] *** Joins: hethw_ (~heth@46.238.32.56)
[13:11:42] *** Quits: hethw (~heth@46.238.32.56) (Ping timeout: 256 seconds)
[13:19:01] *** Joins: Pali (~pali@user/pali)
[13:20:42] *** Quits: hethw_ (~heth@46.238.32.56) (Ping timeout: 268 seconds)
[13:23:37] *** Joins: choroba (~E.Choroba@88.146.255.106)
[13:27:02] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Quit: SureVoIP: http://www.surevoip.co.uk)
[13:31:20] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:38:12] <Altreus> daemon: just use List::UtilsBy::sort_by in future
[13:38:21] <Altreus> There's almost never a sort that isn't a sort_by with extra steps
[13:38:53] <Altreus> LeoNerd: Every time I bring up sort_by I want some sort of magical "then_by" interface
[13:39:04] <Altreus> I just have no idea how
[13:39:24] <Altreus> I have a tiny idea how
[13:42:00] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[13:44:08] <Botje> Altreus::Sorting->sort_by(...)->then_by(...)->DO_IT(@input)
[13:44:23] <Botje> or just ->(@input)
[13:44:29] <Botje> yay bikeshedding
[13:46:21] * GumbyPAN CPAN Upload: Log-Any-Adapter-DERIV-0.002 by BINARY https://metacpan.org/release/BINARY/Log-Any-Adapter-DERIV-0.002
[13:48:54] <Altreus> don't bikes shed in summer? They should be growing their winter coat right now
[13:50:48] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 260 seconds)
[13:50:52] <Botje> now I wonder how lodash implements its sorting methods.
[13:51:03] <Botje> not like I have actual work to do. *cough*
[13:51:22] * GumbyPAN CPAN Upload: XML-Sig-OO-0.007 by AKALINUX https://metacpan.org/release/AKALINUX/XML-Sig-OO-0.007
[13:52:01] <Botje> butanyway, a simple builder could work.
[13:53:05] <daemon> Altreus, meh that's cheating :)
[13:53:20] <Altreus> everything easy is cheating to you, :P
[13:53:41] <daemon> yes :P
[13:53:55] <daemon> imagine playing long dark in anything but Interloper mode
[13:53:55] <daemon> psh
[13:56:20] *** Joins: hethw (~heth@85.14.7.247)
[14:01:23] * GumbyPAN CPAN Upload: XML-Sig-OO-0.008 by AKALINUX https://metacpan.org/release/AKALINUX/XML-Sig-OO-0.008
[14:10:46] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[14:13:35] <karjala> I discovered the weirdest bug on two of my machines' bashes
[14:13:47] <karjala> First I did `touch a.avi`
[14:14:12] <karjala> Then I typed `vim a` and pressed Tab to autocomplete `a.avi` and it doesn't autocomplete
[14:14:19] <karjala> It doesn't happen with other filenames
[14:14:26] <karjala> Ubuntu 21.10
[14:14:37] <karjala> Does it happen on your machines too?
[14:15:15] <karjala> maybe vim doesn't do avis
[14:15:28] <karjala> but it does mp4's
[14:15:43] <karjala> so it might not be a bug
[14:15:50] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[14:16:19] <rindolf> karjala: it's a shell completion thing
[14:17:34] *** Joins: Darkcoal (~user@2001:16a2:78ed:9900:47a:da4f:967f:2c19)
[14:17:54] <karjala> oh. vim has its own shell completion thing and refuses to do avis?
[14:17:54] <karjala> probably
[14:18:44] <Botje> karjala: bash --norc --noprofile
[14:19:02] <Botje> if that doesn't exhibit the behavior it is indeed something you configured.
[14:20:05] <rindolf> karjala: see eg https://github.com/scop/bash-completion or zsh
[14:20:06] <Paperbot> Link title(s): [ GitHub - scop/bash-completion: Programmable completion functions for bash ]
[14:26:25] * GumbyPAN CPAN Upload: AnyEvent-SparkBot-1.013 by AKALINUX https://metacpan.org/release/AKALINUX/AnyEvent-SparkBot-1.013
[14:29:42] *** Quits: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk) (Remote host closed the connection)
[14:30:12] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[14:30:16] <Altreus> well it works but I dunno how much LeoNerd will like it :D
[14:30:38] <Altreus> oh maybe I should have started a repo so I can diff it
[14:32:51] *** Quits: csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:33:36] *** Joins: csrf (~csrf@user/csrf)
[14:34:06] *** Quits: SergeiZhmylev (~zhmylove@178.252.127.211) (Ping timeout: 245 seconds)
[14:37:26] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Quit: ZNC 1.8.2 - https://znc.in)
[14:37:53] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[14:43:44] <LeoNerd> Hello what me?
[14:46:44] <rindolf> Altreus: 
[14:54:53] <LeoNerd> Huh.. #TIL - if the "main" module in a distribution does not have a  =head1 NAME  section then  ./Build distmeta  will just silently decide not to write a META file
[14:54:57] <LeoNerd> It won't tell you why, it just... won't
[14:58:11] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 250 seconds)
[15:00:02] *** Quits: Darkcoal (~user@2001:16a2:78ed:9900:47a:da4f:967f:2c19) (Ping timeout: 240 seconds)
[15:01:03] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[15:01:29] * GumbyPAN CPAN Upload: Future-Workflow-0.01 by PEVANS https://metacpan.org/release/PEVANS/Future-Workflow-0.01
[15:01:56] <Altreus> sorry, took a break
[15:02:01] *** Joins: Darkcoal (~user@143.92.183.8)
[15:02:09] <Altreus> LeoNerd: is there a repo for List::UtilsBy? metacpan does not know of it
[15:05:22] <LeoNerd> bzr branch https://bazaar.leonerd.org.uk/perl/List-UtilsBy/
[15:05:48] <Altreus> how bzr
[15:05:54] <Altreus> guess I'll install it :D
[15:06:24] <LeoNerd> apt install breezy  or similar
[15:07:30] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Read error: Connection reset by peer)
[15:07:41] <Altreus> oh, bzr was an option so I installed that
[15:08:05] <Altreus> > ./Build distmeta  # more things dzil does better :)
[15:08:20] <LeoNerd> Oh that'll work too but that's ancient. "bazaar" is many years old, the original tool. it's been it's been redone these days as "breezy", which can talk to the same repos
[15:08:23] *** Joins: NeoCron (~NeoCron@p200300c4cf1ab200146a93e8f94739c9.dip0.t-ipconnect.de)
[15:08:24] <Altreus> LeoNerd: didn't like the cert
[15:08:30] <LeoNerd> Oh, yeah I should update that
[15:08:32] <Altreus> oh then I'll try breezy
[15:09:11] <Altreus> ... no breezy
[15:09:18] <Altreus> unless it's python-breezy
[15:10:12] <LeoNerd> Hmmm unsure
[15:10:12] <Altreus> oh it might be actually
[15:10:50] <LeoNerd> Why do you want it, anyhow?
[15:11:18] <Altreus> I want to show you this thing and this is what distributed VC is designed for
[15:12:02] <LeoNerd> I tend to disagree but eh
[15:13:13] *** Joins: pajamian (~pj@ghettoforge/pj)
[15:13:22] <Altreus> that's a bzr opinion ;)
[15:13:29] <Altreus>    pun indented
[15:14:05] <LeoNerd> It's more, if you're showing me code or a usecase or a bug or something, why not just show that?
[15:14:08] <Altreus> I at least want to create a diff, which I can't do because I ovewrote the original file and I don't want to pollute my directory with a second copy when there's already tools
[15:14:09] <LeoNerd> This seems a weird way to go about it
[15:14:30] <LeoNerd> Oh; yes there's tools for that. It's called  sourcepan --git List::UtilsBy
[15:14:38] <LeoNerd> It creates you a local git checkout from any CPAN dist
[15:14:43] <Altreus> oh, that's way better
[15:14:47] <LeoNerd> It's a tool *I* wrote for this *exact* stiuation
[15:14:55] <LeoNerd> because I got tired of having this argument
[15:14:59] <Altreus> I actually forgot about it, even though it's very memorable
[15:15:20] <Altreus> Might be the first time I've needed it, because everything else is already on git ;)
[15:15:52] <Altreus> where's sourcepan on cpan? :)
[15:16:38] <LeoNerd> App::sourcepan
[15:16:39] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 264 seconds)
[15:16:49] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[15:24:05] *** Joins: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk)
[15:24:56] *** pajamian is now known as pj
[15:26:31] * GumbyPAN CPAN Upload: App-Netdisco-2.051004 by OLIVER https://metacpan.org/release/OLIVER/App-Netdisco-2.051004
[15:26:46] <Altreus> I must be running on fumes today because that's obvious too
[15:28:49] <Altreus> LeoNerd: um I don't suppose sourcepan will ever rm a dir
[15:28:58] <Altreus> cos the dir I unpacked has disappeared
[15:29:06] <LeoNerd> It renamed it
[15:29:19] <Altreus> well it also erased my changes
[15:29:43] <Altreus> it was called List-UtilsBy-0.11 and now it's not there
[15:29:44] <LeoNerd> Oh it probably untar'ed over the top of it
[15:29:54] <LeoNerd> Yeah don't do that ;)
[15:30:09] <Altreus> feature request: have sourcepan tell me not to do that
[15:30:17] <LeoNerd> Seems a reasonable idea yah
[15:31:02] * Altreus rewrites
[15:31:14] <Altreus> luckily I've already made all the bugs so I don't have to do them again
[15:31:48] <Altreus> feature request 2: chmod the files to u+w
[15:32:22] *** Joins: cobber (~protorom@213.240.182.77)
[15:32:35] <aquanight> sweval: sub MODIFY_CODE_ATTRIBUTES ($p,$t,@at) { say "<@_>"; return; } say "--"; my sub test :thing { } sub other :foo { }
[15:32:37] <perlbot> aquanight: <main CODE(0x565291370740) thing> CODE package attribute may clash with future reserved word: thing at (IRC) line 1. <main CODE(0x5652913704e8) foo> CODE package attribute may clash with future reserved word: foo at (IRC) line 1. --  🦃
[15:33:13] <aquanight> wait what
[15:33:25] <aquanight> this is not at all what attributes.pm says happens
[15:33:56] <aquanight> sweval: sub MODIFY_CODE_ATTRIBUTES ($p,$t,@at) { say "<@at>"; return; } say "--"; my sub test :Thing { } BEGIN { say "turkey" } sub other :Foo { }
[15:33:58] <perlbot> aquanight: <Thing> turkey <Foo> --  🦃
[15:34:45] <rindolf> perlbot: sweval: 3+3
[15:34:47] <perlbot> rindolf: 6 🦃
[15:35:15] <rindolf> an turkey!
[15:35:35] <aquanight> sweval: sub MODIFY_SCALAR_ATTRIBUTES ($p,$t,@at) { say "<@at>"; return; } say "--"; my $test :Thing; BEGIN { say "turkey" } our $other :Foo;
[15:35:37] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:35:37] <perlbot> aquanight: ERROR: Subroutine attributes must come before the signature at (IRC) line 1.  🦃
[15:36:24] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:36:50] <aquanight> sweval: sub MODIFY_SCALAR_ATTRIBUTES ($p,$t,@at) { say "<@at>"; return; } say "--"; my $test :Thing; BEGIN { say "turkey" }; our $other :Foo;
[15:36:52] <perlbot> aquanight: ERROR: Subroutine attributes must come before the signature at (IRC) line 1.  🦃
[15:37:14] <aquanight> .. ???
[15:37:40] *** Quits: proller (~p@2a02:6b8:b081:1207::1:7) (Ping timeout: 260 seconds)
[15:37:54] <aquanight> sweval: sub MODIFY_SCALAR_ATTRIBUTES ($p,$t,@at) { say "<@at>"; return; } say "--"; my $test :Thing = 0; BEGIN { say "turkey" }; our $other :Foo = 42;
[15:37:56] <perlbot> aquanight: ERROR: Subroutine attributes must come before the signature at (IRC) line 1.  🦃
[15:38:10] <aquanight> what friggin subroutine attributes
[15:38:16] <aquanight> the fuck you on about perlbot 
[15:38:29] <LeoNerd> That is highly strange
[15:39:38] <LeoNerd> For me it complains about that on the `my $test :Thing = 0;`  line
[15:39:53] <aquanight> am I doing that wrong?
[15:40:27] <aquanight> sweval: sub MODIFY_SCALAR_ATTRIBUTES ($p,$t,@at) { say "<@at>"; return; } say "--"; my ($test) :Thing = 0; BEGIN { say "turkey" }; our ($other) :Foo = 42;
[15:40:29] <perlbot> aquanight: ERROR: Subroutine attributes must come before the signature at (IRC) line 1.  🦃
[15:40:31] <LeoNerd> This feels somewhat buggy
[15:40:43] <aquanight> sweval: sub MODIFY_SCALAR_ATTRIBUTES ($p,$t,@at) { say "<@at>"; return; } say "--"; my ($test) : Thing = 0; BEGIN { say "turkey" }; our ($other) : Foo = 42;
[15:40:45] <perlbot> aquanight: ERROR: Subroutine attributes must come before the signature at (IRC) line 1.  🦃
[15:40:53] <aquanight> ok what the hell
[15:41:05] <aquanight> that's now *exactly* what it looks like in attributes.pm perldoc
[15:41:09] <aquanight> whitespace and everything
[15:41:14] <xenu> *technically* perl is right, the attribute is after the signature :P
[15:41:21] *** Joins: pajamian (~pj@ghettoforge/pj)
[15:41:57] <LeoNerd> OK weirdness
[15:42:08] *** Quits: pj (~pj@ghettoforge/pj) (Killed (iridium.libera.chat (Nickname regained by services)))
[15:42:08] *** pajamian is now known as pj
[15:42:41] <LeoNerd> aquanight: http://paste.scsys.co.uk/596202
[15:42:42] <Paperbot> Link title(s): [ magnet_web paste from "LeoNerd" at 217.168.150.38... ]
[15:42:44] <LeoNerd> Pasted one line at a time
[15:42:58] <LeoNerd> That feels like a bug to me
[15:43:19] <Altreus> LeoNerd: be gentle https://gist.github.com/Altreus/941f8c3f257419696b4b832009f1ce59
[15:43:20] <Paperbot> Link title(s): [ List::UtilsBy::then_by prototype · GitHub ]
[15:43:29] <aquanight> yeah I found the error in toke.c
[15:43:33] <aquanight> PL_parser->sig_seen is what triggers it
[15:43:47] <Altreus> is it called toke.c because you have to be high
[15:45:07] <aquanight> problem is I have no effin clue where it's getting set or reset
[15:45:13] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:45:26] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:45:57] <aquanight> but I'm going to go out on a limb and say it's getting left turned on when it shouldn't be
[15:46:10] <aquanight> sweval: sub MODIFY_SCALAR_ATTRIBUTES ($p,$t,@at) { say "<@at>"; return; } sub no { } say "--"; my ($test) : Thing = 0; BEGIN { say "turkey" }; our ($other) : Foo = 42;
[15:46:12] <perlbot> aquanight: turkey <Foo> -- <Thing>  🦃
[15:46:33] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[15:46:41] <aquanight> but on to what I was *originally* after
[15:46:58] <aquanight> it looks like the whole "attributes are applied at runtime on my" is true for scalars but not for 'my sub'
[15:47:47] <aquanight> which is ... concerning. Looks like a scenario I need to evaluate for :Pure. It's obviously likely impossible to inline a 'my sub' properly.
[15:47:50] <LeoNerd> Oh, code attrs are all a bit annoying on those
[15:48:18] <LeoNerd> attrs in general, just could be a lot lot better than they actually are right now
[15:48:28] <LeoNerd> But anyhow I'd report this setup as a bug as it clearly is
[15:48:32] <aquanight> hell... I'm not even sure what's in that CODE reference I get
[15:49:09] <LeoNerd> Altreus: Eh; I'm not sure I like that. It makes special-cases out of values passed to  sort_by
[15:49:24] <aquanight> LeoNerd: right... where does perl want those? Can't say I've ever had to report a core bug :)
[15:49:39] <LeoNerd> aquanight: https://github.com/Perl/perl5/issues
[15:49:40] <Paperbot> Link title(s): [ Issues · Perl/perl5 · GitHub ]
[15:49:56] <aquanight> also I probably need to make sure I can repro this on blead
[15:50:20] <LeoNerd> I suspect the fix will be just to reset  PL_parser->sig_seen = 0;  at some key point
[15:50:47] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[15:56:04] <Altreus> LeoNerd: I thought that was ok, because the special case I created is private
[15:56:29] <LeoNerd> It means you can't use sort_by to sort a collection of  then_by  cases
[15:56:49] <LeoNerd> See for instance the horrendous Raku problem, whereby you can't iterate all the parser tokens by a foreach loop
[15:56:55] <LeoNerd> It stops just after the StopIteration token
[16:00:03] <Altreus> That feels like a "but sometimes" that Alec would be upset with
[16:00:15] <Altreus> for the number of things people *actually* sort
[16:00:26] <LeoNerd> Whatever you're wanting to sort, you can do it in a single sortkey
[16:00:46] <Altreus> what how
[16:00:47] <LeoNerd> sort_by { join "/", $_->lastname, $_->firstname } @people
[16:00:48] <LeoNerd> for example
[16:00:55] <Altreus> no, that's got even more edge cases
[16:01:04] <LeoNerd> But edge cases -you- control in your data
[16:01:21] <Altreus> actually you've made me realise the ACTUAL problem
[16:01:26] <Altreus> You can't sort by string and then by number
[16:01:35] * GumbyPAN CPAN Upload: HTTP-MultiGet-1.023 by AKALINUX https://metacpan.org/release/AKALINUX/HTTP-MultiGet-1.023
[16:01:39] <LeoNerd> Can your strings contain embedded NULs ?
[16:01:45] <Altreus> dunno
[16:02:21] <Altreus> the whole point of data structures is to avoid questions like that
[16:02:31] <Altreus> hmm
[16:03:42] <aquanight> bah. Apparently I don't know how to build blead properly because for some reason Base64 doesn't exist
[16:04:04] <LeoNerd> ./Configure ((with so many options I just have a script for it)); make -j4
[16:04:45] <huf> maybe it should have a new option: -7
[16:04:48] <aquanight> thing is I did that. But maybe there was something I shouldn't have just blindly blasted past
[16:04:51] <xenu> aquanight: perlbot uses blead
[16:04:51] <huf> to build perl7 with all the sane options
[16:05:15] <xenu> so if it happens on your perl and in perlbot it's almost certain it's broken blead
[16:05:22] <aquanight> xenu: I suppose that's fair
[16:05:34] <aquanight> how recent is perlbot's blead?
[16:05:54] <aquanight> actually
[16:05:55] <LeoNerd> eval: $]
[16:05:57] <perlbot> LeoNerd: 5.035005 🦃
[16:06:04] <LeoNerd> *tut* at least a month
[16:06:14] <LeoNerd> But I hiiiiiighly doubt that has changed recently
[16:06:15] <aquanight> evalall: sub MODIFY_SCALAR_ATTRIBUTES ($p,$t,@at) { say "<@at>"; return; } say "--"; my ($test) :Thing = 0; BEGIN { say "turkey" }; our ($other) :Foo = 42;
[16:06:16] <perlbot> aquanight: Couldn't pastebin output 🦃
[16:06:36] * GumbyPAN CPAN Upload: MojoX-HTTP-Async-0.01 by CDN https://metacpan.org/release/CDN/MojoX-HTTP-Async-0.01
[16:06:36] * GumbyPAN CPAN Upload: App-sourcepan-0.05 by PEVANS https://metacpan.org/release/PEVANS/App-sourcepan-0.05
[16:06:51] <LeoNerd> Altreus: ^-- now with overwrite protection
[16:07:03] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[16:07:04] <Altreus> thanks :)
[16:07:17] <aquanight> I should probably get :Pure up on CPAN at some point.
[16:12:42] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[16:12:46] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:13:34] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:13:55] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:14:07] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:15:21] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 245 seconds)
[16:16:59] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[16:17:01] <Altreus> I wonder how to tell tmux that I'm the only client and it doesn't need to resize the window any more
[16:28:22] <Altreus> oh it figured it out
[16:30:11] *** Joins: proller (~p@2a02:6b8:0:40c:3798:4c02:3d64:9098)
[16:32:24] <aquanight> oh bloody hell WSL fucking why. Why do you even put the Windows PATH in there.
[16:34:51] <aquanight> sweval: printf "%03o", (ord(':'))
[16:34:53] <perlbot> aquanight: 072 🦃
[16:36:33] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 250 seconds)
[16:38:19] <aquanight> LeoNerd:  https://github.com/Perl/perl5/issues/19245
[16:38:20] <Paperbot> Link title(s): [ Signature preventing use of attributes in variable declarations · Issue #19245 · Perl/perl5 · GitHub ]
[16:39:27] <aquanight> yeah I don't like that it's a 5.32 report either but fucking ubuntu loves being behind on shit
[16:39:41] *** Joins: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se)
[16:43:25] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[16:46:40] * GumbyPAN CPAN Upload: Mojolicious-Plugin-AdditionalValidationChecks-0.18 by PERLSRVDE https://metacpan.org/release/PERLSRVDE/Mojolicious-Plugin-AdditionalValidationChecks-0.18
[16:50:35] *** Joins: jlenz__ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[16:53:49] *** Joins: diskin (~diskin@178.76.240.186)
[16:53:58] *** Quits: jlenz_ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[16:56:20] *** Joins: diskin_ (~diskin@178.76.240.186)
[16:56:20] *** diskin is now known as Guest1649
[16:56:20] *** diskin_ is now known as diskin
[16:58:27] *** Joins: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net)
[16:59:10] *** Quits: Guest1649 (~diskin@178.76.240.186) (Ping timeout: 260 seconds)
[17:02:12] <Altreus> if I put an OS on an SD card for my pi, can I just chroot into that and use apt to install more stuff?
[17:02:22] <Altreus> is that literally how that works and it's as simple as that?
[17:02:56] <Altreus> hrm the apt it sees will be the pi's one and thus the wrong architecture, perhaps
[17:03:13] <Altreus> So I would need to run native apt but in the SD card's root
[17:05:13] <BinGOs> you might be able to do that with the right user-mode emulation of QEMU
[17:06:07] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[17:06:10] *** Quits: diskin (~diskin@178.76.240.186) (Ping timeout: 260 seconds)
[17:09:18] <BinGOs> https://wiki.debian.org/RaspberryPi/qemu-user-static <- potentially relevant
[17:09:19] <Paperbot> Link title(s): [ RaspberryPi/qemu-user-static - Debian Wiki ]
[17:17:18] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:17:22] *** Quits: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[17:21:44] * GumbyPAN CPAN Upload: Graphite-Simple-0.07 by CDN https://metacpan.org/release/CDN/Graphite-Simple-0.07
[17:22:26] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 268 seconds)
[17:23:03] <Altreus> BinGOs: thanks :)
[17:24:10] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[17:24:54] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[17:25:57] <BinGOs> I have done it with mips images but it looks straightforward enough to do with raspbi images
[17:28:31] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:29:07] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:31:45] * GumbyPAN CPAN Upload: MojoX-HTTP-Async-0.02 by CDN https://metacpan.org/release/CDN/MojoX-HTTP-Async-0.02
[17:33:42] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 260 seconds)
[17:34:25] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[17:35:52] *** Joins: pajamian (~pj@ghettoforge/pj)
[17:36:39] *** Quits: pj (~pj@ghettoforge/pj) (Killed (platinum.libera.chat (Nickname regained by services)))
[17:36:39] *** pajamian is now known as pj
[17:36:45] <Altreus> I'm learning how many tools apply to virtual things
[17:37:04] <Altreus> Didn't know you could ask fdisk about the partitions in a .img file - nor that you could just dd zeroes onto the end of it
[17:38:26] *** Joins: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net)
[17:45:04] <hethw> how can I see what's inside a dirhandle?
[17:45:48] <xq> what exactly do you want to see?
[17:45:54] <Altreus> readdir?
[17:46:02] <hethw> the directory for example?
[17:46:15] <hethw> I don't know what a dirhandle actually is
[17:46:25] <Altreus> it's like a filehandle but it points to a dir
[17:46:28] <Altreus> This sounds trite
[17:46:41] <Altreus> But basically they work entirely differently so they're different
[17:46:49] <Altreus> reading a dir is finding the entries within it
[17:47:02] <Altreus> you can't write to it ... etc
[17:48:33] *** Joins: Guest17 (~Guest17@68.171.185.81.rev.sfr.net)
[17:51:14] <hethw> yeah, but what's actually inside, a memory adress we read from?
[17:51:42] <huf> a DIR*
[17:52:00] <LeoNerd> A dirhandle is probably just a filehandle that was opened with O_DIR and remembers to use some different syscalls to interact with the kernel
[17:52:03] <huf> inside it is an fd
[17:52:12] <xq> depends on your OS
[17:52:13] <Altreus> a floppy disk
[17:53:04] <huf> a long long time ago, it really was just a normal fd
[17:56:03] <hethw> what's wrong here? https://pastecry.pt/GRjg7b#Am%5ETapUv0Um_Rau-Faf4Mem5Hes
[17:56:04] <Paperbot> Link title(s): [ PasteCry.pt: A secure pasting solution offering client-side encryption. ]
[17:57:12] <Altreus> decode returns a value
[17:57:21] <Altreus> doesn't it?
[17:57:25] <hethw> no
[17:57:29] <hethw> it does it inplace
[17:57:46] <hethw> it probably returns an error if something is wrong
[17:57:47] *** Quits: Linux77 (~Linux_77@186.233.179.193) (Ping timeout: 265 seconds)
[17:58:06] <Altreus> eval: my $thing = "ï"; for my $other ($thing) { utf8::encode($other) } $thing;
[17:58:08] <perlbot> Altreus: Ã¯ 🦃
[17:58:13] <Altreus> well that worked
[17:58:37] *** Joins: rewq (~pc@102.184.117.46)
[17:59:17] <Altreus> hethw: you should also ensure that you check for if (not defined wantarray) because that's void context, and people might use it to skip an entry
[17:59:24] <Altreus> in that case it's basically scalar context
[17:59:29] <Altreus> oh
[17:59:31] <Altreus> which you covered, never mind
[17:59:33] <Altreus> :D
[17:59:43] <rewq> D i d    u s a   t r a i n    &   s u p pl y  i s i s     wi th   w e a p o n s     l i k e     i t     d i d   w i t h       a l    q a e d a   to   j u st i f y  c r e a t i n g  w a r  s        > >       C R E A T  I V E     C H O A S
[17:59:47] <rewq> d i d     c i a     d i d     9 1 1    or    i t    j u s t     l e t       it      h a p p en
[17:59:49] <rewq> if     a l   q a e d a      di d    it     w h y      t o    k i l l   9  m i l l i  on     i  r a q i s 
[17:59:51] <rewq> ab o u t    9   m il i o n        i r a q i   l o s t  th e i r  li ves      e i th e r  be ca uz  o f   dir e ct  viol ence  o f   u sa   and   becauz of  si ege      u sa    ma de        ag a in s t     i r a q  t h at   pr eve nt ed    i raqi   f or m es se nt ial         l i v i n   g       ma te rial s  food m e d i c i n e   and  even     p e n c i l s
[17:59:58] <rewq> i s i s   a n d a l q a e da    o n l y     a p p e a r e d  i n       i r  a  q    a f t e r  u s a  i n v a si on  , D i d    u s a     p a v e   th e w ay  f or  i s i s   to  i r a q ?
[18:00:01] <rewq>  sa d  da m     hu ss i n    wh o    lo st   m o s t   of  h i s    p o w er  i n 1st , 2 nd  gu lf  w a    rs  an d   du ri n g    10   y ea rs   of    sie ge    ,  d i d   no t  a l l o w    i s is    o r  a l q a e dea   t o   e n  t e r    i  r   a   q  , e ve n to h e l p h i m    a g a i n s t    u s a
[18:00:05] <rewq> p l e a s e    s h a r e  m y  qs to l e s s e n  u s a     a g g r e s s i o n    a g a i n s t    o t h e rs
[18:00:25] <hethw> what's void context?
[18:00:44] *** ChanServ sets mode: +o LeoNerd
[18:00:49] *** rewq was kicked by LeoNerd (rewq)
[18:00:56] *** LeoNerd sets mode: -o LeoNerd
[18:01:04] *** Joins: jetchisel (jetchisel@user/jetchisel)
[18:02:56] <Altreus> hethw: readdir($fh);
[18:03:01] *** Quits: Guest17 (~Guest17@68.171.185.81.rev.sfr.net) (Quit: Client closed)
[18:03:08] <Altreus> with no =
[18:03:11] <Altreus> with no fn( ... )
[18:03:13] <Altreus> etc
[18:03:18] <Altreus> just on its own
[18:08:12] <buZz> .....
[18:09:51] <xq> perlbot: context
[18:09:51] <perlbot> xq: See http://perl.plover.com/context.html. In a nutshell: When Perl evaluates an expression, it first looks to see whether a scalar, a list, or nothing (void) is expected as the return value, and the expression is evaluated accordingly. For example, in  $x = foo(); @x = foo(); foo(); , foo() is evaluated respectively in scalar, list, and void context. See also the wantarray function in perlfunc.
[18:10:24] *** Joins: cobber (~protorom@213.240.182.77)
[18:10:45] <choroba> also note that foo(); can still be evaluated in different contexts, e.g. when it's the last line of a sub.
[18:10:54] *** Quits: Bossi (~quassel@p5dc59f87.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[18:11:49] * GumbyPAN CPAN Upload: App-plx-0.902003 by MSTROUT https://metacpan.org/release/MSTROUT/App-plx-0.902003
[18:14:27] *** Joins: magla (~gelignite@55d4b9e2.access.ecotel.net)
[18:15:27] <Altreus> ugh true
[18:15:56] <LeoNerd> Perhaps we need a sub attribute to say it wants to be called only in certain contexts..  sub foo :wantonly(void)  etc...
[18:16:07] <LeoNerd> Purely to justify the name of course ;)
[18:16:37] <huf> no no, call it :wantarray()
[18:16:41] <huf> :wantarray(list)
[18:16:46] <huf> for hysterical reasons
[18:17:23] <art1> for some it needs types, for others "want" contexts SCNR ;)
[18:17:28] <xq> if there isn't a perlcritic policy that forbids a sub call or map or some other context-sensitive thing as a last line in a sub, there should be
[18:17:31] <hethw> I think I got it, sort readdir is different than sort readdit_utf8
[18:17:35] <hethw> cheez
[18:17:52] <hethw> doesn't sort want array?
[18:17:57] <huf> xq: but we like implicit returns
[18:18:02] <LeoNerd> Ohgod..
[18:18:09] <LeoNerd> sort is -suuuuper-special snowflake territory
[18:18:26] <hethw> In scalar context, the behaviour of sort is undefined.
[18:18:27] <xq> huf: not me
[18:18:29] <hethw> O_O
[18:18:34] <huf> xq: what's wrong with you
[18:18:44] <LeoNerd> Wow really? I'd have just made it return the number of items
[18:19:03] <hethw> for me it returns nothing with the pasted function above
[18:19:11] <hethw> which is kind of crazy
[18:19:22] <LeoNerd> eval: my $ret = sort (1,2,3,5,4); "ret is $ret"
[18:19:24] <perlbot> LeoNerd: ret is  🦃
[18:19:31] <LeoNerd> Heh.. weird
[18:19:32] <xq> huf: I try to write extremely simple, obvious code that matches documentation to letter
[18:20:12] <LeoNerd> '🦃' [U+1f983] - TURKEY
[18:20:12] <hethw> my @ret = sort (1,2,3,5,4); "ret is @ret"
[18:20:19] <LeoNerd> Ooooh *that's* what it is.
[18:20:20] <hethw> eval: my @ret = sort (1,2,3,5,4); "ret is @ret"
[18:20:22] <perlbot> hethw: ret is 1 2 3 4 5 🦃
[18:20:35] <hethw> what's that icon anyway
[18:20:42] <LeoNerd> TURKEY
[18:20:54] <hethw> ah yes. so what's it doing there
[18:21:01] <hethw> or I don't want to know
[18:23:19] <huf> maybe it's in celebration of genocide day?
[18:25:49] <Altreus> they have their own blue, you know
[18:26:30] *** Joins: mattil (~mattil@87-92-90-94.bb.dnainternet.fi)
[18:28:28] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Quit: This computer has gone to sleep)
[18:31:16] *** Quits: mattil (~mattil@87-92-90-94.bb.dnainternet.fi) (Ping timeout: 260 seconds)
[18:31:43] <hethw> eval: sub test{ return wantarray; }; my $a = sort test(); "$a"
[18:31:45] <perlbot> hethw: No output. 🦃
[18:32:07] <hethw> eval: sub test{ return wantarray; }; my $a = sort test(); [$a]
[18:32:09] <perlbot> hethw: [undef] 🦃
[18:32:18] <hethw> lovely! sort is void context.
[18:32:34] <hethw> how is that possible if sort returns a list..
[18:32:36] <Altreus> is it
[18:32:47] <Altreus> the return value of test is used by sort, doesn't go into $a
[18:32:51] <Altreus> you've sorted no things
[18:32:53] <hethw> hm
[18:33:26] <hethw> I've sorted one thing I don't know what it is
[18:33:42] <xq> perlbot: $a
[18:33:43] <perlbot> xq: Don't use $a or $b as variable names. Not even in examples. They are not normal variables and will not behave like normal variables. The only place they are cromulent is in a sort or List::Util block. Please see https://metacpan.org/pod/Perl::Critic::Policy::Community::DollarAB ; consider using $x, $y instead. | https://perldoc.perl.org/variables/$a
[18:33:45] <Altreus> you've sorted no things and put it into $a, which is a) superglobal and b) still undef
[18:34:00] <Altreus> eval: [ sort ]
[18:34:02] <perlbot> Altreus: [] 🦃
[18:34:10] <Altreus> eval: [ scalar sort ]
[18:34:12] <perlbot> Altreus: [undef] 🦃
[18:34:19] <Altreus> eval: [ scalar sort 1,2,3]
[18:34:20] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[18:34:21] <perlbot> Altreus: [undef] 🦃
[18:34:29] <Altreus> o
[18:34:35] <ilmari> > In scalar context, the behaviour of "sort" is undefined.
[18:34:50] <Altreus> well that's what we're getting :D undefined
[18:35:09] <hethw> so what's wantarray for sort
[18:35:14] <hethw> list?
[18:35:16] <xq> sweval would have told you
[18:35:23] <xq> but for some reason you insisted on eval
[18:35:32] <ilmari> sweval: [ scalar sort]
[18:35:34] <perlbot> ilmari: Useless use of sort in scalar context at (IRC) line 1. [undef] 🦃
[18:35:35] <hethw> what's sweval 'sw'?
[18:35:43] <Altreus> hethw: you should set somethign else to wantarray
[18:35:44] <ilmari> strict+warnings
[18:35:48] <LeoNerd> strict+.. what ilmari said
[18:35:51] <hethw> i see
[18:36:08] <Altreus> sweval: my $wanted; sub test { $wanted = wantarray }; sort test, 1,2,3; $wanted
[18:36:10] <perlbot> Altreus: Useless use of sort in void context at (IRC) line 1.  🦃
[18:36:23] <Altreus> sweval: my $wanted; sub test { $wanted = wantarray }; [ sort \&test 1,2,3 ] $wanted 
[18:36:25] <perlbot> Altreus: Number found where operator expected at (IRC) line 1, near "&test 1" 	(Missing operator before  1?) Scalar found where operator expected at (IRC) line 1, near "] $wanted" 	(Missing operator before  $wanted?) ERROR: syntax error at (IRC) line 1, near "&test 1"  🦃
[18:36:28] <Altreus> sweval: my $wanted; sub test { $wanted = wantarray }; [ sort \&test 1,2,3 ]; $wanted 
[18:36:30] <perlbot> Altreus: Number found where operator expected at (IRC) line 1, near "&test 1" 	(Missing operator before  1?) ERROR: syntax error at (IRC) line 1, near "&test 1"  🦃
[18:36:40] <LeoNerd> use more comma
[18:36:46] <Altreus> sweval: my $wanted; sub test { $wanted = wantarray }; [ sort \&test, 1,2,3 ]; $wanted 
[18:36:48] <perlbot> Altreus: Useless use of anonymous array ([]) in void context at (IRC) line 1.  🦃
[18:36:49] <ilmari> sweval: sub test { say [qw(void scalar list)]->[wantarray + defined wantarray] $a <=> $b }; [ sort test 1,2,3 ]
[18:36:51] <perlbot> ilmari: Scalar found where operator expected at (IRC) line 1, near "] $a" 	(Missing operator before  $a?) ERROR: syntax error at (IRC) line 1, near "] $a "  🦃
[18:36:58] <Altreus> darnit, I deleted loads by accident there
[18:36:59] <ilmari> sweval: sub test { say [qw(void scalar list)]->[wantarray + defined wantarray]; $a <=> $b }; [ sort test 1,2,3 ]
[18:37:01] <perlbot> ilmari: scalar scalar scalar  🦃
[18:37:19] <Altreus> oggy oggy oggy
[18:37:45] <ilmari> hethw: given that the sort function is supposed to return a number less than, equal to or greater than zero, what context do you _think_ it would be invoked in?
[18:38:35] <hethw> "In list context, this sorts the LIST and returns the sorted list value. "
[18:40:51] <ilmari> sweval: sub test { say [qw(void scalar list)]->[wantarray + defined wantarray]; @_ = 1 ? $_[0] : $a <=> $b }; [ sort test test(1), test(2) ]
[18:40:53] <perlbot> ilmari: list list scalar  🦃
[18:41:05] <ilmari> hethw: the list after the sort function name is in list context, obviously
[18:41:19] <ilmari> s/sort/comparison/
[18:41:32] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Remote host closed the connection)
[18:41:46] <ilmari> sweval: sub test { say [qw(void scalar list)]->[wantarray + defined wantarray]; @_ = 1 ? $_[0] : $a <=> $b }; [ scalar sort test test(1), test(2) ]
[18:41:48] <perlbot> ilmari: Useless use of sort in scalar context at (IRC) line 1. list list  🦃
[18:41:51] * GumbyPAN CPAN Upload: fs-Promises-0.04 by HUGMEIR https://metacpan.org/release/HUGMEIR/fs-Promises-0.04
[18:42:10] <ilmari> so it evaluates the list, but doesn't call the comparison function at all
[18:44:22] <xq> is "wantarray + defined wantarray" some well-known idiom?
[18:44:54] <ilmari> xq: I didn't invent it, but I'm not sure how widespread it is
[18:44:57] <huf> adding numbers is a fairly well known thing, yes
[18:45:01] <LeoNerd> Oooh cute
[18:45:04] <ilmari> it's not really useful other than for that particular debug thing
[18:45:05] <huf> but yeah, cute
[18:45:10] <xq> never seen it before
[18:45:26] <huf> you know how true is 1 and false is 0?
[18:45:30] <huf> this is that.
[18:45:35] <xq> huf: it's adding numified booleans
[18:45:40] <huf> yes
[18:45:42] <aquanight> wouldn't that complain about an uninitialized value in void context?
[18:45:46] <ilmari> addition numifies its arguments
[18:45:47] <huf> except booleans dont *really* exist
[18:45:48] <LeoNerd> It reminds me of  [$x => $y]->[$y <= $x]
[18:46:09] <aquanight> sweval: sub thing { say (wantarray + defined wantarray) } thing;
[18:46:09] <ilmari> LeoNerd: yeah, that's cute too
[18:46:10] <perlbot> aquanight: 1  🦃
[18:46:25] <xq> can't tell if it's  min or max
[18:46:27] <aquanight> sweval: sub thing { say (wantarray + defined wantarray) } thing; return
[18:46:29] <xq> but looks cute
[18:46:29] <perlbot> aquanight: Use of uninitialized value in addition (+) at (IRC) line 1. 0  🦃
[18:46:29] <huf> reminds me of that thing, what was it. my ($ldelim, $rdelim) = @delims[0,-1]
[18:46:30] <huf> oslt
[18:47:14] <aquanight> sweval: sub thing { say (!!wantarray + defined wantarray) } thing; return
[18:47:16] <perlbot> aquanight: 0  🦃
[18:47:21] <aquanight> that shuts it up tho
[18:47:32] <ilmari> yeah, because boolifying undef doesn't warn
[18:47:44] <aquanight> which is weird really
[18:48:42] <hethw> this is my problem: https://perl.bot/p/7nftwp
[18:48:43] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[18:49:32] <gordonfish> Re: <LeoNerd> gordonfish: has $y :param { $x + 5 };
[18:49:40] <gordonfish> That doesn't seem to work:
[18:49:43] <gordonfish> sweval: use Object::Pad; class Foo { has $x :param = 2; has $y :param = { $x + 5 }; method out { print "[x=$x] [y=$y]"; } } Foo->new(x => 3)->out;
[18:49:45] <perlbot> gordonfish: ERROR: parse failed--compilation aborted at (IRC) line 1.  🦃
[18:49:54] <LeoNerd> gordonfish: version?
[18:50:04] <LeoNerd> sweval: use Object::Pad; $Object::Pad::VERSION
[18:50:06] <perlbot> LeoNerd: bless( {original => "0.55",version => [0,550]}, 'version' ) 🦃
[18:50:09] *** Joins: gast0n (~g4570n@user/gast0n)
[18:50:12] <gordonfish> sweval: use Object::Pad; $Object::Pad::VERSION;
[18:50:13] <gordonfish> ug
[18:50:14] <perlbot> gordonfish: bless( {original => "0.55",version => [0,550]}, 'version' ) 🦃
[18:50:20] <xq> hethw: what are you trying to do?
[18:50:25] <gordonfish> I get the same on the .57 on my system.
[18:50:27] <LeoNerd> Huh... should be fine since 0.54
[18:50:28] <aquanight> hethw: use Encode::decode("UTF-8", ...)
[18:50:36] <aquanight> rather than utf8::decode
[18:50:45] <hethw> xq: it's pretty obvious utf8 decode results from readdir
[18:50:56] <hethw> aquanight, that's not the problem sadly
[18:51:08] <gordonfish> I also get, just befor the parse failed message:
[18:51:11] <gordonfish> Global symbol "$x" requires explicit package name (did you forget to declare "my $x"?) at -e line 1.
[18:51:29] <huf> no, i bet it's misparsing it :D
[18:51:44] <LeoNerd> Hrmmm... maybe existing slots aren't visible in there yet then
[18:52:03] *** Quits: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617) (Quit: Leaving)
[18:52:31] <huf> deparse: sub foo {} sort foo(1)
[18:52:33] <perlbot> huf: No output. 🦃
[18:52:36] <huf> fuck you
[18:52:41] <gordonfish> ?
[18:53:02] <huf> anyway, it's trying to sort $dh with the sub readdir_utf8
[18:53:05] <gordonfish> huf: Was that failing somewhere?
[18:53:21] <huf> instead of calling readdir_utf8 with the argument $dh and sorting the result
[18:53:54] <gordonfish> Ah
[18:53:55] <hethw> huf, huh, why?
[18:54:48] <huf> because sort
[18:54:48] <aquanight> sweval: my $f = undef; scalar readdir $f;
[18:54:50] <perlbot> aquanight: ERROR: Can't use an undefined value as a symbol reference at (IRC) line 1.  🦃
[18:55:04] <gordonfish> { Re: it's trying to sort $dh } A futitle effort I'm sure, should $dh of mysql
[18:55:14] <aquanight> huf: except that doesn't make sense because then it should die
[18:55:32] *** Joins: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617)
[18:55:37] <gordonfish> LeoNerd: So BUILD { } is right place then I assume.
[18:55:40] <aquanight> huf: sort doesn't pass arguments to the sorting sub unless it's prototyped, so the 'shift' should result in it trying to readdir an undefined handle
[18:55:42] <huf> why?
[18:55:53] <huf> and does that die?
[18:56:02] <huf> oh
[18:56:20] <aquanight> sweval: sub test { say shift//"<>"; } [ sort test 1, 2, 3, 4 ]
[18:56:22] <perlbot> aquanight: <> <> <> <>  🦃
[18:56:24] <hethw> I need readdir_utf8 to behave exactly as readdir so is there a way to emulate that behaviour?
[18:56:25] <LeoNerd> gordonfish: ADJUST. Try to avoid BUILD
[18:56:37] <huf> aquanight: maybe it doesnt sort if there's one element?
[18:56:47] <huf> aquanight: YES
[18:56:48] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[18:56:48] <LeoNerd> By "try to", I mean "that really always should be possible to" ;)
[18:56:53] * GumbyPAN CPAN Upload: DBIx-Spreadsheet-0.02 by CORION https://metacpan.org/release/CORION/DBIx-Spreadsheet-0.02
[18:57:00] <hethw> LeoNerd, how
[18:57:07] <huf> hethw: sort +readdir_utf8($dh)
[18:57:20] <hethw> what the hell is this :)
[18:57:31] <aquanight> hmmm
[18:57:33] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[18:57:40] <aquanight> it is parsing it that way though so why the hell is it being weird
[18:57:41] <LeoNerd> hethw: I did mention that sort is /weeeeeeeird/
[18:57:50] <LeoNerd> Speshul Snowflake
[18:58:03] <ilmari> the comparison function only gets the values as arguments if it has a ($$) prototype
[18:58:05] <aquanight> won't + forc escalar
[18:58:13] <ilmari> no, it only forces expression parsing
[18:58:23] <LeoNerd> The + disarms the special parser magic around sort
[18:58:38] <aquanight> yes but won't it also force scalar?
[18:58:41] <huf> nah
[18:58:42] <LeoNerd> sort has its own unique special parsing logic. sort has its own unique special context-stack block type. sort has its own pp_sort.c file in the perl source code
[18:58:49] <LeoNerd> sort is unique and weird in *sooo many ways*
[18:58:56] <aquanight> lol
[18:59:02] <huf> eval: my @x=1..3; [+@x]
[18:59:04] <perlbot> huf: [1,2,3] 🦃
[18:59:07] <aquanight> I looked at how his paste optreed
[18:59:24] <huf> it does die if you sort readdir_utf8($dh, 1);
[18:59:27] <huf> because of what aquanight said
[18:59:32] <aquanight> it's SORT > { PUSHMARK, NULL > { CONST[BARE] }, PADSV }
[18:59:47] <xq> hethw: https://paste.debian.net/hidden/69419d92/
[18:59:48] <Paperbot> Link title(s): [ Debian Pastezone ]
[18:59:58] <aquanight> I'm guessing the null/const[bare] means it's using the sort SUBNAME LIST parsing
[19:00:01] <gordonfish> LeoNerd: Why ADJUST over BUILD ?
[19:00:10] <huf> aquanight: yes
[19:00:11] <xq> note: I personally avoid wantarray like fire and would recommend you do the same
[19:00:13] <LeoNerd> gordonfish: because params and  :strict(params) and naming and allsorts
[19:00:15] <aquanight> wait
[19:00:21] <LeoNerd> Avoid BUILD because it was an old idea
[19:00:29] <aquanight> oh fuck me it doesn't die because *it's never called there's only one thing in the fucking list*
[19:00:43] <huf> yes
[19:00:45] <huf> as i said
[19:00:57] <aquanight> I don't know why I thought the sorter would still be called
[19:01:01] <aquanight> what even would it put in $b
[19:01:04] <aquanight> a ham sandwich?
[19:01:07] <hethw> xq: no other way to emulate readdir sadly
[19:01:07] <huf> um, itself?
[19:01:13] <xq> hethw: then dont
[19:01:27] <hethw> you're not giving me a better solution
[19:01:30] <aquanight> hmmm
[19:01:31] <xq> an interface that depends on context is not worth emulating
[19:01:45] <aquanight> there might be a way
[19:01:55] <aquanight> sweval: prototype("CORE::readdir")
[19:01:57] <perlbot> aquanight: * 🦃
[19:02:14] <xq> hethw: a solution to what problem? you said you wanted to decode results from readdir, I have given you a complete runnable code that implements the encoding mantra in this context
[19:02:19] <xq> perlbot: encoding mantra
[19:02:19] <perlbot> xq: decode goes from BYTES to UNICODE CHARACTERS. encode goes from UNICODE CHARACTERS to BYTES. decode bytes to unicode characters as soon as possible, work with unicode characters, and encode to bytes as late as possible.
[19:02:19] <gordonfish> sweval: use Object::Pad; class Foo { has $x :param = 2; has $y :param = undef; ADJUST { $y //= $x + 5 } method out { print "[x=$x] [y=$y]"; } } Foo->new(x => 3)->out;
[19:02:21] <perlbot> gordonfish: [x=3] [y=8] 🦃
[19:02:28] <aquanight> nope that doesn't do it
[19:02:55] <hethw> yes, I'm still decoding it
[19:03:01] <hethw> and it uses wantarray
[19:03:04] <gordonfish> LeoNerd: Ok will avoud BUILD fir things like this.
[19:03:12] <hethw> as you advised to not use it, I don't see an alternative
[19:03:29] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Quit: This computer has gone to sleep)
[19:03:30] <aquanight> the problem really isn't readdir_utf8
[19:03:45] <aquanight> if you're wanting to be like readdir that's pretty much how you do it
[19:03:54] <aquanight> the problem is sort is an ass
[19:04:02] <aquanight> solution: sort { $a <=> $b }
[19:04:03] <xq> hethw: if you are writing real code, use https://metacpan.org/pod/Path::Tiny#children
[19:04:04] <Paperbot> Link title(s): [ Path::Tiny - File path utility - metacpan.org ]
[19:04:10] <aquanight> always give it a comparer block
[19:04:12] <huf> cmp surely
[19:04:16] <aquanight> cmp yes
[19:04:21] <huf> what's wrong with +
[19:04:27] <huf> that's how we usually solve shit like this
[19:04:35] <huf> like the {} vs {} problem
[19:04:45] <aquanight> eh I like the explicit sorter block better anyway
[19:04:50] <xq> hethw: if you have more than tens of thousands of items in a directory , use an iterator based code https://metacpan.org/pod/Path::Iterator::Rule
[19:04:51] <Paperbot> Link title(s): [ Path::Iterator::Rule - Iterative, recursive file finder - metacpan.org ]
[19:05:15] <xq> the above readdir stuff I posted is purely for educational purposes
[19:05:16] <choroba> hethw: Wouldn't Sys::Binmode solve your problem?
[19:05:20] <aquanight> but in all seriousness
[19:05:36] <aquanight> this could've been done with sort map { Encode::decode("UTF-8", $_) } readdir
[19:05:52] <xq> Encode:: bad
[19:06:01] <hethw> xq, I'm just writing a small wrapper around a function, and I want to behave exaclty like readdir, your example is still having problems with ( sort readdir_utf8($dhcopy)
[19:06:23] <xq> "and I want to behave exaclty like readdir" <- why?
[19:06:29] <hethw> it's a wrapper
[19:06:35] <hethw> and readdir is used in 100 places
[19:06:47] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[19:06:52] <aquanight> hethw: the problem with sort readdir_utf8 isn't really a problem that's easily solved. The problem isn't with readdir_utf8. It's because sort is an ass.
[19:06:53] <hethw> it should be transparent
[19:07:06] <hethw> I understand sort is special
[19:07:13] <hethw> how can I do it like readdir does it
[19:07:20] <hethw> so I can get rid of this shit
[19:07:47] <aquanight> you would have to solve the problem from the 'sort' side
[19:07:56] <Altreus> maybe it's readdir that's special
[19:08:04] <haarg> https://paste.debian.net/hidden/69419d92/ the example given is as good as you are going to get
[19:08:04] <aquanight> because readdir_utf8 itself is doing the right thing
[19:08:05] <Paperbot> Link title(s): [ Debian Pastezone ]
[19:08:22] <haarg> you aren't going to be able to fix the interaction with sort
[19:08:23] <aquanight> and there's nothing from this end that can change how sort is parsing its expression because, again, sort is an ass
[19:08:33] <huf> *CORE::GLOBAL::readdir = sub ...; seems to "work"
[19:08:47] <aquanight> you could try overriding readdir itself
[19:08:51] <aquanight> like huf just said
[19:08:54] <Grinnz> that would also break every usage of readdir in the program
[19:08:56] <huf> yeah
[19:08:59] <huf> but it's a wrapper
[19:08:59] <xq> for some definitions of work sure
[19:09:04] <huf> and readdir is used in lots of places
[19:09:16] *** Quits: WinterStar (~IceLight@user/icelight) (Quit: WeeChat 3.3)
[19:09:18] <huf> i dont see how this is an argument for all this shit but alas
[19:09:23] <huf> it appears to be one
[19:09:23] <Grinnz> a wrapper which implements different behavior
[19:09:29] <huf> see above
[19:09:47] <hethw> I need both functions else I would just redefine it
[19:10:03] <huf> then why does it matter how many places readdir is used in?
[19:10:10] <huf> a different function is different
[19:10:21] <aquanight> then if you're already having to replace readdir calls it's only a small matter to also fix the sort call to stop the most vexing parse
[19:10:28] <hethw> it's going to replace most recent usage
[19:10:34] <hethw> and be used in the future
[19:10:39] *** Joins: WinterStar (~IceLight@user/icelight)
[19:10:56] <Altreus> then you can also stop calling sort without a block during the same new era
[19:11:04] <aquanight> like you could do it with : s/sort readdir/sort { \$a cmp \$b } readdir_utf8/g
[19:11:19] <LeoNerd> Don't forget that readdir _is_ special because it is a core operator, whereas readdir_utf8 is a function
[19:11:22] <Grinnz> sort followed by any bareword is always a risk
[19:11:31] <LeoNerd> These are different things and the distinction matters to the stupidly specialsnowflake parser that is sort()
[19:11:33] <Altreus> sort_by { $_ } readdir_utf8 :)
[19:11:35] <hethw> Altreus, I'm not doing that, it's already in the code everywhere
[19:11:36] <LeoNerd> Did I mention that sort is special, yet? ;)
[19:11:46] <Grinnz> hethw: so is readdir, and yet
[19:11:54] <Altreus> hethw: but you're already updating the code, and code you don't update doesn't need fixing
[19:12:07] <Grinnz> hethw: it really doesn't matter, what you ask is not possible so you will have to do *something*
[19:12:11] <xq> hethw: does the code I posted above work for you?
[19:12:25] <aquanight> why was sort SUBNAME LIST ever a good idea again?
[19:12:34] <hethw> Grinnz, do we know why sort is different for readdir and readdir_else?
[19:12:34] <Altreus> it was 1990
[19:12:37] <Grinnz> because we (they) were young and naive
[19:12:42] <LeoNerd> aquanight: it predates the -concept- of a subref
[19:12:44] <Grinnz> hethw: because readdir is a builtin keyword
[19:12:54] <LeoNerd> It was the only thing that was possible before  \&funchere  was even a concept
[19:12:59] <hethw> ahha. and I cannot make bulletin words?
[19:13:02] <Grinnz> correct
[19:13:07] <Altreus> I did not need funchere correctly
[19:13:07] <hethw> okay.
[19:13:11] <Altreus> read*
[19:13:27] <Altreus> it says fun-che-re, in the Italian way
[19:13:38] <hethw> I guess replacing all usage of sort it is
[19:13:39] <aquanight> LeoNerd: at the very least, sort could respect prototypes somehow. Not even putting :prototype(*) (the same "prototype" as readdir) works
[19:13:49] <Altreus> updating* since you're updating them anyway
[19:13:58] <Grinnz> here's the really fun part, if you do "sort readdir_utf8" and forget to import readdir_utf8, it will sort the string 'readdir_utf8', even if strict mode is on
[19:14:21] <xq> "fun"
[19:14:37] <Grinnz> (it will probably syntax error based on what follows readdir_utf8, but maybe not)
[19:14:45] <aquanight> you know
[19:14:47] <Altreus> sweval: sub funchere { return qw(a h d r w y) } [sort ()=funchere]
[19:14:48] <aquanight> if you never use sort blocks
[19:14:49] <perlbot> Altreus: Useless use of sort in scalar context at (IRC) line 1. ERROR: Can't modify sort in scalar assignment at (IRC) line 1, near "funchere]"  🦃
[19:14:55] <aquanight> you could override *sort* and fix the problem
[19:14:56] <Altreus> laf
[19:15:09] <Altreus> sweval: sub funchere { return qw(a h d r w y) } [sort +()=funchere]
[19:15:11] <perlbot> Altreus: [] 🦃
[19:15:13] <xq> reminds me of doing try { } catch {}; while forgetting to use Try::Tiny and the code works in a very strange way because indirect
[19:15:27] <Altreus> ye that is equally irritating
[19:15:38] <Altreus> It just says uninitialized value
[19:15:40] <Grinnz> xq: works as long as try throws an exception which blows up the program before it figures out what try is :D
[19:15:53] <vague> perlbot, utf8 🦃
[19:15:53] <perlbot> vague: U+1F983 (f0 9f a6 83): TURKEY [🦃] 
[19:15:56] <Altreus> works as long as it's broken
[19:16:08] <xq> I don't remember specifics but it left a trauma
[19:16:18] <aquanight> sweval: sub readdir_ { readdir shift; } opendir my $d, "."; [ sort readdir $d ]
[19:16:19] <ilmari> Altreus: except it doesn't catch
[19:16:20] <perlbot> aquanight: [".","..",".git",".github",".gitignore","README.md","broken.csv","cert.pem","elib","example.html","foobar.pm","hello.txt","jenkinstest.txt","key.pem","lib","married.fwp","northwind.sqlite3","perl_code_jFKAxAnnAr","rDfownE65r","single.fwp","stdins","template.angular","test.cpp"] 🦃
[19:16:22] <Grinnz> compile-time no feature 'indirect' is definitely superior in that situation
[19:16:27] <aquanight> sweval: sub readdir_ { readdir shift; } opendir my $d, "."; [ sort readdir_ $d ]
[19:16:28] <perlbot> aquanight: [\*{"::\$d"}] 🦃
[19:16:36] *** Joins: rgrinberg (~textual@201.198.177.243)
[19:16:48] <aquanight> sweval: use subs 'sort'; sub sort { CORE::sort @_; } sub readdir_ { readdir shift; } opendir my $d, "."; [ sort readdir_ $d ]
[19:16:50] <perlbot> aquanight: [\*{"::\$d"}] 🦃
[19:16:51] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:3057:7061:fe55:a451)
[19:17:05] <aquanight> sweval: use subs 'sort'; sub sort { CORE::sort {$a cmp $b} @_; } sub readdir_ { readdir shift; } opendir my $d, "."; [ sort readdir_ $d ]
[19:17:07] <perlbot> aquanight: [\*{"::\$d"}] 🦃
[19:17:13] <aquanight> ...what.
[19:17:21] <Grinnz> that's... not how to override a builtin
[19:17:29] <aquanight> did I forget how that shit works
[19:17:46] <aquanight> I know about *CORE::GLOBAL::
[19:17:50] <Grinnz> oh i guess if you're trying to do it locally
[19:17:51] <aquanight> but I think that still keeps the weird parsing
[19:17:58] <haarg> sweval: use subs 'sort'; sub sort { warn "blah"; CORE::sort @_; } sub readdir_ { readdir shift; } opendir my $d, "."; [ sort readdir_ $d ]
[19:18:00] <perlbot> haarg: [\*{"::\$d"}] 🦃
[19:18:14] <haarg> not all things can be overridden
[19:18:32] <aquanight> sweval: sub CORE::GLOBAL::sort { CORE::sort {$a cmp $b} @_; } sub readdir_ { readdir shift; } opendir my $d, "."; [ sort readdir_ $d ]
[19:18:34] <perlbot> aquanight: [\*{"::\$d"}] 🦃
[19:19:02] <aquanight> what are the odds sort is one of those things that can't
[19:19:16] <haarg> sweval: my sub sort { warn "blah"; CORE::sort @_; } sub readdir_ { readdir shift; } opendir my $d, "."; [ sort readdir_ $d ]
[19:19:17] <perlbot> haarg: blah at (IRC) line 1. [".","..",".git",".github",".gitignore","README.md","XmaYiF3PBt","broken.csv","cert.pem","elib","example.html","foobar.pm","hello.txt","jenkinstest.txt","key.pem","lib","married.fwp","northwind.sqlite3","perl_code_UkhJy2Bb6U","single.fwp","stdins","template.angular","test.cpp"] 🦃
[19:20:33] <haarg> sweval: prototype "CORE::sort"
[19:20:35] <perlbot> haarg: No output. 🦃
[19:20:50] <Grinnz> aquanight: extremely high
[19:21:12] <aquanight> 08:41:41/5CBEE < LeoNerd> Did I mention that sort is special, yet? ;)
[19:21:29] <aquanight> can we shoot sort into the sun?
[19:21:38] <hethw> do we have better sort?
[19:21:44] <hethw> no
[19:21:47] <hethw> so we don't
[19:21:59] <Grinnz> i don't know how we could even fix it, aside from a feature flag
[19:22:46] <ilmari> use feature 'sanesort';
[19:22:54] <Grinnz> 1. make sure sort SUBNAME is possible without barewords in every instance, 2. feature flag to disable sort SUBNAME bareword syntax
[19:23:03] <ilmari> use sort 'sane';
[19:23:19] <Grinnz> it's for the parser more than sort, so putting it in sort.pm seems weird :P
[19:23:58] <xq> sort {} @, map {} @, grep {} @ should be the only legal syntax
[19:25:00] <xq> the fact that perl allows you to stuff various cute things as a first argument in these is just bad
[19:25:06] <Grinnz> the difference with sort is that the SUBNAME and BLOCK are both optional
[19:25:13] <Grinnz> it's not just one or the other
[19:25:15] <aquanight> use strict 'sort'; # disables sort SUBNAME. Use \& or { } like you should be.
[19:25:20] <aquanight> actually if I'm completely honest
[19:25:24] <aquanight> strict 'subs' should cover this already.
[19:25:44] <aquanight> or strict 'refs' at least
[19:25:58] *** Quits: rgrinberg (~textual@201.198.177.243) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:27:27] <hethw> sort( ... ) works unlike sort ... that seems the most harmless fix I can do
[19:28:05] *** Joins: rgrinberg (~textual@201.198.177.243)
[19:28:48] <Grinnz> yes that may bypass the SUBNAME parsing
[19:29:18] <Grinnz> did sort +foo not work?
[19:29:37] <haarg> sweval: sub foo { warn "fuck you" unless @_ == 5 } my @f = sort(foo(1..5));
[19:29:38] <perlbot> haarg: 1 🦃
[19:29:42] <haarg> sweval: sub foo { warn "fuck you" unless @_ == 5 } my @f = sort(foo (1..5));
[19:29:44] <perlbot> haarg: Unquoted string "foo" may clash with future reserved word at (IRC) line 1. fuck you at (IRC) line 1. fuck you at (IRC) line 1. fuck you at (IRC) line 1. fuck you at (IRC) line 1. fuck you at (IRC) line 1. 5 🦃
[19:29:51] <LeoNerd> Oooooh spaces!
[19:30:00] <Grinnz> lol
[19:30:11] <xq> lol
[19:30:23] <xq> thats golden
[19:30:34] <xq> haarg++
[19:30:47] <aquanight> are you kidding me? what kind of silly nonsense is this?
[19:30:57] <Grinnz> the perl parser
[19:31:09] <ilmari> it's spaced out
[19:31:23] <LeoNerd> aquanight: You know there's already many places where presnece-or-absence of space matters, yes?
[19:31:46] <aquanight> LeoNerd: .... I don't typically run into those often.
[19:31:49] <aquanight> attributes, sure
[19:32:13] <aquanight> can't exactly say I'm all that thrilled about those either
[19:32:31] <aquanight> if we did "signature before attributes" that wouldn't be a problem nor would that neat little bug I ran into
[19:33:00] <LeoNerd> But then that would make many things impossible; namely, attributes that affect body parsing
[19:33:06] <LeoNerd> because the signature is also the body
[19:33:18] <haarg> how often does that come up?
[19:33:23] <aquanight> attributes aren't even applied until the } aren't they?
[19:33:40] <hethw> oh wait:
[19:33:41] <LeoNerd> Hoboy...
[19:33:43] <hethw> If instead you want to sort the array @key with the comparison routine find_records() then you can use:
[19:33:43] <hethw> my @contact = sort { find_records() } @key;
[19:33:43] <hethw> my @contact = sort find_records(@key);
[19:33:50] <hethw> horray
[19:33:55] <hethw> I know what is happening now
[19:33:57] <haarg> they are "applied" immediately
[19:34:31] <haarg> the perl level methods are called at the end
[19:34:34] <aquanight> ... starting to think everything about attributes.pm is a flat out lie
[19:34:45] <LeoNerd> Oh, yeah that wouldn't surprise me
[19:35:33] <LeoNerd> E.g. the perl parser special-cases the :lvalue attribute so it can call CvLVALUE_on(PL_compcv)
[19:35:43] <aquanight> yeah I noticed that one
[19:35:48] <LeoNerd> There aren't really any others that it knows about, so it saves the rest until later
[19:35:52] <aquanight> I don't ever see it in MODIFY_CODE_ATTRIBUTES
[19:35:55] <LeoNerd> Yuh
[19:36:16] <aquanight> but that also means it applies early enough I can detect it
[19:36:25] <LeoNerd> A core version of `async sub` could have been written  `sub :async ...`  in a similar way
[19:36:32] <LeoNerd> But since it wasn't core, it couldn't
[19:36:55] <haarg> the lvalue attribute as implemented has to be applied before parsing
[19:37:01] <LeoNerd> At some point.. maybe during the 5.37 development round, I keep meaning to come up with a better way to do attrs that are a lot more powerful than currently
[19:37:10] <LeoNerd> because code attrs are completely useless on, say, anon subs
[19:37:24] <LeoNerd> and generally far too late and generally far too weak in abilities, overall
[19:37:47] <haarg> but it would be possible for that to work differently and allow lvalue and having attributes after the signature
[19:37:49] <aquanight> hmmm
[19:38:05] <aquanight> it occurs to me, how do I get the equivalent of Carp::croak in XS? Perl_croak is just a normal die()
[19:38:09] <haarg> but that wasn't general enough for zefram, so instead we got this shit syntax
[19:38:20] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[19:39:01] <aquanight> I'm guessing I need to actually call out to Carp...
[19:39:03] <LeoNerd> Perl_croak() is a normal die but that's OK because ENTERSUB on an XSUB doesn't push to the context stack, so caller works right
[19:39:17] <LeoNerd> So Perl_croak() acts much like Carp::croak()
[19:39:24] <aquanight> LeoNerd: except the caller is the .pm which is implementing MODIFY_CODE_ATTRIBUTES :(
[19:39:40] <tm604> attributes are too confusing, let's get some decorators instead... no one was using the @ for anything were they?
[19:39:42] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 260 seconds)
[19:39:48] <LeoNerd> Ah; yeah if you want the CARP_NOT ability to skip additional frames, you need to use the real one
[19:40:28] <haarg> it's not exactly CARP_NOT - Carp skips anything in the immediate caller's package
[19:40:53] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[19:41:20] <aquanight> and I'm still never sure when it comes to MODIFY_x_ATTRIBUTES itself, is it better to export or to push into @ISA?
[19:41:56] <LeoNerd> Ugh IMHO they're all terrible
[19:42:02] <aquanight> yes
[19:42:02] <LeoNerd> Neither are lexical, so... all is sucky
[19:42:41] <aquanight> I'd almost rather inject into UNIVERSAL
[19:42:44] *** Joins: hans (~hans@81.166.125.50.static.multigamer.no)
[19:43:09] <hethw> Grinnz, some evil genious decided that sort find_records(@key); means campare @key values with find_records()
[19:43:13] <hans> > Unquoted string "gggijgziifiiffif" may clash with future reserved word at - line 1. )
[19:43:22] <hans> what kind of word would that be?
[19:43:36] <aquanight> a word that starts with a lower-case character
[19:43:45] <hans> go on..
[19:44:15] <aquanight> it's perl's general complaint if you have any kind of bareword consisting entirely of lowercase
[19:44:39] <aquanight> because all of perl's reserved words are barewords consisting entirely of lowercase
[19:45:19] <hans> o i c, thanks 
[19:45:23] <aquanight> and nobody's going to import the entire OED into perl to only complain about "real" words especially as many of perl's reserved words are appreviations or not really "words" in the traditional sense
[19:45:37] <hans> tbh barewords are probably a bad thing anyway 
[19:45:45] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Quit: This computer has gone to sleep)
[19:45:49] <aquanight> typically yes
[19:46:24] <aquanight> the two times they're ok is when you're doing {word} or word => ...
[19:46:38] <aquanight> also if you've declared the sub, perl won't complain
[19:46:52] <aquanight> but then it's not a bareword anymore
[19:52:58] *** Joins: diskin (~diskin@185.49.242.49)
[19:54:38] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 260 seconds)
[19:55:46] *** Joins: randir (~randir@95-25-138-85.broadband.corbina.ru)
[19:56:31] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[19:57:03] *** ovid is now known as Ovidius
[19:57:41] *** Quits: Ovidius (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Client Quit)
[19:59:59] *** Joins: diskin_ (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[20:00:00] *** diskin is now known as Guest6605
[20:00:00] *** Quits: Guest6605 (~diskin@185.49.242.49) (Killed (strontium.libera.chat (Nickname regained by services)))
[20:00:00] *** diskin_ is now known as diskin
[20:01:52] *** Joins: heth (~heth@user/heth)
[20:04:03] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[20:06:17] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[20:06:30] *** Quits: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[20:06:30] *** Quits: hethw (~heth@85.14.7.247) (Ping timeout: 256 seconds)
[20:08:15] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[20:11:13] *** Joins: tobybl_ (~tobybl@dhcp-199-132.inf.ed.ac.uk)
[20:12:20] *** Parts: art1 (~romeyke@p200300ccdf09d000031b6d900dc81fcd.dip0.t-ipconnect.de) ()
[20:12:58] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[20:13:10] *** Quits: tobybl_ (~tobybl@dhcp-199-132.inf.ed.ac.uk) (Remote host closed the connection)
[20:14:06] *** Quits: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk) (Ping timeout: 245 seconds)
[20:23:32] *** Quits: proller (~p@2a02:6b8:0:40c:3798:4c02:3d64:9098) (Ping timeout: 240 seconds)
[20:23:49] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 250 seconds)
[20:30:11] *** Quits: rgrinberg (~textual@201.198.177.243) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:35:21] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 245 seconds)
[20:35:42] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[20:40:44] *** Quits: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[20:43:36] *** Quits: magla (~gelignite@55d4b9e2.access.ecotel.net) (Quit: Stay safe!)
[20:45:34] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[20:55:03] *** Joins: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de)
[20:56:59] *** Joins: rgrinberg (~textual@201.198.177.243)
[21:04:13] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[21:08:06] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Quit: This computer has gone to sleep)
[21:08:54] *** Joins: tobybl (~tobybl@213.31.134.21)
[21:08:59] *** Joins: monkey_ (~user@181.114.17.106)
[21:12:06] * GumbyPAN CPAN Upload: MojoX-HTTP-Async-0.03 by CDN https://metacpan.org/release/CDN/MojoX-HTTP-Async-0.03
[21:12:46] *** Joins: proller (~p@2a02:6b8:0:40c:633f:6fd0:cb7a:fa1a)
[21:20:34] *** Quits: SergeiZhmylev (~zhmylove@178.252.127.211) (Read error: Connection reset by peer)
[21:20:52] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[21:21:22] *** Joins: magla (~gelignite@55d4b9e2.access.ecotel.net)
[21:30:58] *** Joins: mattil (~mattil@87-92-90-94.bb.dnainternet.fi)
[21:33:08] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[21:33:56] *** Joins: BSaboia (~bsaboia@177.184.132.202)
[21:35:50] *** Quits: mattil (~mattil@87-92-90-94.bb.dnainternet.fi) (Ping timeout: 260 seconds)
[21:37:08] * GumbyPAN CPAN Upload: DBIx-DBFlow-0.03 by JLMARTIN https://metacpan.org/release/JLMARTIN/DBIx-DBFlow-0.03
[21:37:08] * GumbyPAN CPAN Upload: DBIx-DBFlow-Runtime-0.03 by JLMARTIN https://metacpan.org/release/JLMARTIN/DBIx-DBFlow-Runtime-0.03
[21:39:10] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 260 seconds)
[21:42:45] *** Quits: BSaboia (~bsaboia@177.184.132.202) (Quit: This computer has gone to sleep)
[21:45:06] *** Quits: EvanCarroll (~ecarroll@68-78-105-35.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 256 seconds)
[21:45:12] *** Joins: BSaboia (~bsaboia@177.184.132.202)
[21:45:33] *** Quits: Croran (~Croran@71.231.214.173) (Quit: leaving)
[21:50:05] *** Joins: Croran (~Croran@71.231.214.173)
[21:56:45] *** Quits: BSaboia (~bsaboia@177.184.132.202) (Quit: This computer has gone to sleep)
[21:56:59] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 250 seconds)
[21:57:13] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[22:01:37] *** Joins: BSaboia (~bsaboia@177.184.132.202)
[22:03:48] *** Quits: rgrinberg (~textual@201.198.177.243) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:09:31] *** Quits: proller (~p@2a02:6b8:0:40c:633f:6fd0:cb7a:fa1a) (Ping timeout: 245 seconds)
[22:10:43] *** Joins: veesh_ (~veesh@89.237.100.53)
[22:12:18] *** Quits: veesh (~veesh@89.237.97.163) (Ping timeout: 260 seconds)
[22:12:24] *** veesh_ is now known as veesh
[22:15:16] <xq> is there a test module that offers a function for testing TCP connectivity? something like connect_ok($host, $port) ?
[22:15:51] <LeoNerd> That sounds rather fragile, it's testing your network rather than your code
[22:15:54] *** Joins: veesh_ (~veesh@89.237.100.53)
[22:16:07] <xq> yeah, exactly what I need
[22:16:17] <xq> infrastructure tests
[22:16:32] *** Quits: veesh (~veesh@89.237.100.53) (Ping timeout: 240 seconds)
[22:16:38] *** veesh_ is now known as veesh
[22:17:58] <xq> this looks like it https://metacpan.org/pod/Test::Net::Connect
[22:17:58] <Paperbot> Link title(s): [ Test::Net::Connect - Test::Builder based tests for network connectivity - metacpan.org ]
[22:18:19] *** Quits: BSaboia (~bsaboia@177.184.132.202) (Quit: This computer has gone to sleep)
[22:21:09] *** Joins: Vicissitude (~Vicissitu@user/vicissitude)
[22:22:08] *** Quits: tobybl (~tobybl@213.31.134.21) (Remote host closed the connection)
[22:22:13] * GumbyPAN CPAN Upload: App-Git-Workflow-v1.1.17 by IVANWILLS https://metacpan.org/release/IVANWILLS/App-Git-Workflow-v1.1.17
[22:28:14] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[22:28:19] *** Quits: X-Scale (~ARM@31.22.167.95) (Ping timeout: 268 seconds)
[22:29:26] *** X-Scale` is now known as X-Scale
[22:29:55] <xq> it looks like this module has been unmaintained for many years
[22:32:14] * GumbyPAN CPAN Upload: Object-Pad-0.58 by PEVANS https://metacpan.org/release/PEVANS/Object-Pad-0.58
[22:33:39] *** Joins: tobybl (~tobybl@213.31.134.21)
[22:38:22] *** Quits: tobybl (~tobybl@213.31.134.21) (Ping timeout: 256 seconds)
[22:47:16] * GumbyPAN CPAN Upload: WWW-Correios-SIGEP-0.06 by GARU https://metacpan.org/release/GARU/WWW-Correios-SIGEP-0.06
[22:52:16] * GumbyPAN CPAN Upload: Tickit-Widget-Tabbed-0.025 by PEVANS https://metacpan.org/release/PEVANS/Tickit-Widget-Tabbed-0.025
[22:52:40] *** Quits: monkey_ (~user@181.114.17.106) (Remote host closed the connection)
[22:53:06] *** Joins: monkey_ (~user@181.114.17.106)
[22:57:44] *** Quits: hans (~hans@81.166.125.50.static.multigamer.no) (Ping timeout: 260 seconds)
[23:00:58] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:05:28] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[23:07:39] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[23:10:06] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 256 seconds)
[23:10:13] *** Quits: monkey_ (~user@181.114.17.106) (Remote host closed the connection)
[23:11:18] * GumbyPAN CPAN Upload: CAD-Mesh3D-0.006 by PETERCJ https://metacpan.org/release/PETERCJ/CAD-Mesh3D-0.006
[23:11:18] * GumbyPAN CPAN Upload: Net-AppDynamics-REST-1.008 by AKALINUX https://metacpan.org/release/AKALINUX/Net-AppDynamics-REST-1.008
[23:16:03] *** Joins: Bossi (~quassel@p4fc22aa4.dip0.t-ipconnect.de)
[23:18:01] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[23:20:37] <Nei> hi, there is no way to use INIT block with dynamically loaded code, right
[23:21:04] <Botje> explain yourself
[23:21:53] <lopid> nay, justify yourself
[23:22:16] <Nei> "Too late to run INIT block at Glib::Object::Introspection ..."; this question came up with regards to an irssi perl script that wants to use glib's desktop-notify
[23:23:25] <Nei> I don't think there is any way for irssi to work around this either or do you have some suggestion?
[23:25:30] <haarg> nothing reasonable
[23:25:35] <haarg> INIT is pretty broken
[23:26:25] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:26:37] <Nei> it seems to want to do some important things there https://metacpan.org/release/XAOC/Glib-Object-Introspection-0.049/source/lib/Glib/Object/Introspection.pm#L201
[23:26:38] <Paperbot> Link title(s): [ lib/Glib/Object/Introspection.pm - metacpan.org ]
[23:29:36] *** Joins: proller (~p@2a02:6b8:b081:7205::1:2d)
[23:30:21] *** Quits: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[23:35:35] *** Joins: rgrinberg (~textual@201.198.177.243)
[23:40:26] *** Joins: tomys_ (~tomys@c188-149-14-10.bredband.tele2.se)
[23:40:40] *** Joins: kensanata (~user@user/kensanata)
[23:44:09] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 268 seconds)
[23:45:06] *** Joins: EvanCarroll (~ecarroll@c-73-6-93-87.hsd1.tx.comcast.net)
[23:51:22] * GumbyPAN CPAN Upload: App-Netdisco-2.051005 by OLIVER https://metacpan.org/release/OLIVER/App-Netdisco-2.051005
[23:51:22] <gordonfish> Nei: INIT blocks are run just before the runtime begins, so if it's being use'ed/require'ed from a runtime context (like eval, which, iirc, is what irssi is doing, sort of like perlbot) it wont be able to run it.
[23:51:29] <gordonfish> sweval: package Foo { INIT { say 'Foo INIT'; } } 
[23:51:31] <perlbot> gordonfish: Too late to run INIT block at (IRC) line 1.  🦃
[23:52:51] *** Quits: SergeiZhmylev (~zhmylove@178.252.127.211) (Ping timeout: 245 seconds)
[23:54:15] <Nei> exactly, gordonfish 
[23:56:27] <gordonfish> { Re: <LeoNerd> Avoid BUILD because it was an old idea } May want to make that clear in the documentation, as people coming from Moo and such may be used to BUILD/BUILDARGS, so it's easy to latch onto that when one also sees it in the docs.
