[00:00:26] <_death> q3cpma: it's not premature optimization, since you didn't optimize anything :)..
[00:00:59] <q3cpma> Well, "worrying about premature optimization", if you prefer
[00:01:22] <Bike> what would a hash table api with an option to use precomputed hashes look like? optional parameter to gethash? and then if you put in something that's not actually the hash it gets dumbly inserted there too, i guess?
[00:02:21] <_death> Bike: I guess it could have a incrhash operator for this specific case
[00:02:52] <pjb> Bike: amortised O(1) is O(1).  In any case, the universe ends in 15 billion years.
[00:02:52] <White_Flame> or a more generic get-and-set-hash with a body that's evaluated inbetween
[00:03:18] <q3cpma> Something like Tcl's dict update, where it executes code with a local variable, then use its exit value to write
[00:03:18] <White_Flame> but the EQ key cache should be common in CL hashtable implementations and deal with all that
[00:03:18] <pjb> lisp123_: there's no list of hash keys saved down, it uses MAPHASH.
[00:03:52] <_death> pjb: when you write O(...) it means worst-case, iirc.. for average/amortized cases you don't use big-O but phi or somesuch
[00:04:28] <lisp123_> pjb: thanks
[00:04:47] <Bike> ah, a withhash or such, interesting
[00:05:19] <pjb> That said, nothing prevents you to implement your own hash-table variants with the right properties for your case.
[00:05:27] <_death> pjb: it's important when you have deadlines (real-time).. so you would then prefer, say, merge sort O(n*lg(n)) over quicksort O(n)
[00:05:44] <_death> *O(n^2)
[00:05:58] <White_Flame> but there are tons of options that emerge with this sort of combined API, that just having the basics suffices better
[00:06:11] *** Quits: ggoes_ (~gregf@pool-72-69-95-105.nycmny.fios.verizon.net) (Ping timeout: 246 seconds)
[00:06:15] <White_Flame> for instance, if there is no existing key, maybe you want to have different behavior than if one does exist
[00:06:18] <pjb> _death: indeed.
[00:06:29] <White_Flame> or have the option to remove the key within your read-modify-write operation, etc
[00:06:51] <pjb> _death: note that bubble sort on a sorted array is O(n), so it could even be better if our array is usually sorted.
[00:07:03] <q3cpma> Yeah, another thing that I don't like, is that SBCL's with-locked-hash-table seem to lock the whole table, and not just the bucket
[00:07:25] <_death> pjb: here it's question of what you're counting.. tests or swaps
[00:07:30] <White_Flame> there migh tnot be a "bucket"
[00:07:47] <q3cpma> Yes, in case of open/cuckoo hashing, that's right
[00:09:34] *** Joins: tfeb (~tfb@88.98.95.237)
[00:09:59] <Bike> i think sbcl does use open hashing.
[00:10:01] <_death> q3cpma: basically for this problem I'd say you want a priority queue (which can be implemented, say, as a heap of some kind)
[00:10:49] *** Quits: CptKirk (~user@70-57-27-195.hlrn.qwest.net) (Remote host closed the connection)
[00:11:38] <q3cpma> _death: hmmmm, how would that work with strings? Doing log(N) string comparisons sounds dreadful.
[00:11:53] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:12:12] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[00:12:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:13:20] <pjb> q3cpma: that said, usually you have to have a lock outside of the hash-table, hash-table locks are quite useless IMO.
[00:13:39] <White_Flame> you could intern string themselves, or if they don't have very many shared prefixes, failure comparisons will be quick
[00:13:57] <_death> q3cpma: possibly.. so you may want a trie as well
[00:14:18] <pjb> hash-table locks are ridicuous: (progn (decf (gethash src-account accounts) transfer-amount) (incf (gethash dst-account accounts) transfer-amount))
[00:14:45] <q3cpma> pjb: that's true, a simple mutex certainly is more portable
[00:15:10] <White_Flame> and the (incf (gethash ...) ...) doesn't hold a lock between the read & the write
[00:15:21] <White_Flame> it only serializes them, so it can still trample other writes inbetween
[00:15:46] <_death> q3cpma: of course CL already gives you hash-tables and sort.. and it'll likely be fast enough (even if a hash-function gets called twice...)
[00:15:50] <pjb> The point is that if you have multiple threads, there will be other data to include in the mutex, not only the hash-table entry.
[00:16:48] <tfeb> what a lock in a hashtable protects is the hashtable.
[00:17:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[00:19:16] <Alfr> _death, I doesn't matter whether your analysis is armortized or not. O(f) means there exists A for all sufficiently large X we have g(x) < A*f(X).
[00:20:22] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[00:21:21] *** Joins: CptKirk (~user@70-57-27-195.hlrn.qwest.net)
[00:21:42] <Alfr> _death, in contrast big theta means that's g is also bounded below by f, i.e. additionally there's B f.a. large enough X s.t. B*f(X) < g(X).
[00:25:59] <_death> Alfr: ok.. it's been a while since I read about this notation
[00:26:55] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[00:29:16] <q3cpma> Thanks a lot for your help, everyone, goodbye
[00:29:27] *** Quits: q3cpma (~q3cpma@176-136-178-80.abo.bbox.fr) (Quit: leaving)
[00:30:43] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Remote host closed the connection)
[00:31:19] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[00:31:48] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[00:32:13] <seok> How do I assign a folder to quickload packages ?
[00:32:32] <seok> Sometimes my portacle breaks and stops looking at /projects folder
[00:37:49] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:39:05] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[00:40:35] *** Lord_of_Life_ is now known as Lord_of_Life
[00:45:44] *** Quits: john__ (~john@dynamic-095-117-020-218.95.117.pool.telefonica.de) (Ping timeout: 246 seconds)
[00:49:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:52:36] <White_Flame> ~/quicklisp/local-projects/ can have symlinks or subdirs that will be quickloaded
[00:53:10] <White_Flame> or there's asdf:*central-registry* but you need to have init code that feeds it on every launch
[00:53:44] <White_Flame> ^seok
[00:58:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[00:58:50] *** Quits: eddof13 (~textual@200.52.90.50) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:00:03] <seok> White_Flame do I edit system-index.txt file in ~/quicklisp/local-projects/ ? or...
[01:00:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2.1)
[01:01:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:05:55] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:08:23] <White_Flame> seok: no, there's a ql: call to update/refresh the registry, if you've changed the local-projects during runtime
[01:08:48] <White_Flame> in case it doesn't jus twork
[01:10:04] <seok> oh do you mean, I have to place the systems in there ?
[01:12:52] <pjb> seok: reading the quicklisp documentation.
[01:13:15] <pjb> seok: and not asking the same question in multiple channels. See the answer in #clschool
[01:13:31] <seok> oh sorry someone asked me to ask here
[01:15:35] <White_Flame> symlinks work as well, you don't need to actually place them there
[01:15:51] <White_Flame> just make sure to symlink your whole project directory, not just the .asd
[01:21:48] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[01:21:53] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:22:06] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[01:22:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[01:25:16] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[01:25:46] *** Joins: Alfr (~Alfr@user/alfr)
[01:46:50] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[01:47:48] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:48:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:01:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:03:02] *** Joins: yewscion (~yewscion@2604:ca00:120:9922::1260:59b)
[02:07:53] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 264 seconds)
[02:09:13] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[02:09:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:13:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[02:14:38] *** Quits: CptKirk (~user@70-57-27-195.hlrn.qwest.net) (Ping timeout: 246 seconds)
[02:16:53] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 264 seconds)
[02:17:13] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[02:27:43] *** Joins: selwyn (~selwyn@user/selwyn)
[02:27:52] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:37:49] *** Quits: semz (~none@user/semz) (Quit: Leaving)
[02:40:13] *** Joins: semz (~none@user/semz)
[02:40:17] *** Quits: semz (~none@user/semz) (Remote host closed the connection)
[02:40:28] *** Joins: semz (~none@user/semz)
[02:46:18] *** Quits: pve (~pve@37-136-215-184.rev.dnainternet.fi) (Quit: leaving)
[02:54:24] *** Joins: dre (~dre@2001:8003:c932:c301:a33d:f011:dc0c:a672)
[02:56:35] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:58:30] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[03:03:59] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:07:08] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[03:14:50] *** Quits: random-nick (~random-ni@87.116.180.119) (Ping timeout: 252 seconds)
[03:33:29] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:36:49] *** Joins: selwyn (~selwyn@user/selwyn)
[03:36:50] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[03:38:46] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:40:32] *** Joins: CptKirk (~user@70-57-27-195.hlrn.qwest.net)
[03:49:30] <Guest17> found https://common-lisp.net/project/asdf/asdf.html#Controlling-where-ASDF-searches-for-systems this.  looks like I can just define an environment variable for it at build time
[03:49:46] <Guest17> it being specify the location of asd files to import
[03:49:55] <Guest17> and limiting it to specific places
[03:50:16] *** Parts: akoana (~ah@user/akoana) ()
[03:56:22] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[03:57:31] *** Guest17 is now known as jkordani
[04:07:47] <lotuseater> ah now you have a memorable nickname :)
[04:11:53] *** Quits: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c) (Ping timeout: 246 seconds)
[04:12:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:16:53] <phantomics> Hey everyone, is there a preferred library/macro to write paths for getting contents of nested plists? Like (get-lpath list :a :b :c) instead of (getf (getf (getf list :a) :b) :c)?
[04:17:38] <lotuseater> hey phantomics :)
[04:18:46] <phantomics> What's up
[04:19:41] <lotuseater> i just saw you wrote something and wanted to say hi
[04:19:42] *** Quits: karlosz (~karlosz@47.180.55.252) (Quit: karlosz)
[04:19:57] *** Joins: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[04:19:59] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:20:05] <lotuseater> and sry, i'm not aware of one, since i never got much into touch with plists
[04:21:15] <lotuseater> for the example you gave a recursive macro would be good maybe :)
[04:22:02] <Xach> phantomics: https://github.com/AccelerationNet/access perhaps
[04:23:02] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:23:02] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 252 seconds)
[04:23:02] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 252 seconds)
[04:23:27] <mfiano> Can someone remind me of the extended keyword parameter syntax or point me to the relevant section?
[04:23:39] <phantomics> Thanks Xach
[04:23:54] <mfiano> I would like to write a method for #'shared-initialize that accepts non-keyword-interned &key arguments
[04:23:57] *** Joins: srhm (~srhm@user/srhm)
[04:23:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[04:24:13] <phantomics> But they mention that performance isn't their priority, in my case I know I'll always be using a plist so I could just write a macro for that case myself
[04:24:57] <_death> clhs 3.4.1
[04:24:58] <specbot> Ordinary Lambda Lists: http://www.lispworks.com/reference/HyperSpec/Body/03_da.htm
[04:27:06] <mfiano> So reading this, am I correct in that in order to supply a non-keyword keyword-name, I must explicitly specify the initial value form?
[04:27:25] <mfiano> (even if it should be NIL)
[04:28:37] <_death> no.. (defun foo (&key ((a b))) (list b)) (foo 'a 42) => 42
[04:29:06] <_death> er, (42)
[04:29:32] <lotuseater> having to do that all the time would be a bit noisy
[04:29:56] <mfiano> I see, yes, it is coming back to me now.
[04:30:00] <lotuseater> but could be concerned good style always provide them
[04:30:03] <mfiano> I haven't used this syntax in some years
[04:30:09] <lotuseater> oh ^^
[04:30:22] <mfiano> Thanks.
[04:30:24] *** Quits: Guest76 (~Guest76@2603:4010:1000::19) (Ping timeout: 256 seconds)
[04:30:50] <lotuseater> but (&key (a '())) would be helpful, so one knows from reading that there should go a list
[04:31:09] <lotuseater> like with :initforms in DEFCLASS
[04:32:40] <lotuseater> mfiano: and maybe you remember also that you can give a specific keyword predicate too as a third component
[04:32:42] <mfiano> In this case I have several methods defined on #'shared-initialize specializing on classes that are intended to be abstract mixin classes.
[04:33:30] <lotuseater> is SHARED-INITIALIZE called when some slot has :allocation :class ?
[04:33:40] <mfiano> To define these classes, a defclass-writing macro is used (instead of defclass), which canonicalizes some things. For example, specifying keyword-interned initargs has a high liklihood of clobbering sibling mixins
[04:33:51] <lotuseater> but sounds very reasonable for mixins
[04:34:16] <mfiano> So I must also be sure to do so in shared-initialize/reinitialize-instance/initialize-instance/etc
[04:34:24] <mfiano> Anywhere new initargs can be introduced
[04:36:03] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:37:28] <mfiano> This is a complicated project I've been writing the design down for like 2 months now. Maybe one of these days said design will be solid enough to implement :)
[04:37:33] <mfiano> Anyway, thanks :)
[04:39:50] <lotuseater> I think CLOS and MOP are again of great help when it gets complex. :)
[04:40:15] <mfiano> Indeed. I am [ab]using both to the max here.
[04:40:32] <mfiano> _death: I take it there is no room for shorter syntax when A == B, correct?
[04:40:38] <lotuseater> very nice :D
[04:40:46] *** Parts: yitzi (~yitzi@2001:470:69fc:105::fafd) ()
[04:41:27] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[04:41:30] <mfiano> forgive me for sinning with Algol
[04:41:36] <_death> mfiano: correct
[04:43:13] <lotuseater> _death: hm just a minor, wouldn't it be: (defun foo (&key (a b)) (list b)) (foo :a 42) => (42) ?
[04:43:34] <lotuseater> as long as b is defined before in context
[04:44:08] <mfiano> I read AMOP recently, and the authors made a seemingly bold claim that the MOP solves the problem in that no longer do you have to choose flexibility over performance. Anyone that knows the MOP knows that is not _all_ that bold :)
[04:44:19] <lotuseater> okay it compiles anyway, but gives a message about it
[04:44:45] <_death> lotuseater: your form has a different meaning.. it defines a FOO function with a keyword parameter named :A, a corresponding variable named A, and a default value form B
[04:44:54] <mfiano> lotuseater: No, this is the alternate semantics I was asking about.
[04:45:23] <lotuseater> okay it was just for me to get it right in my head
[04:46:41] <_death> lotuseater: if you look at the clhs page, you can see the BNF for &key
[04:48:19] <mfiano> &key ((a b)) means that the argument will be 'A and the parameter will be B, and bound to NIL if the argument is not supplied.
[04:48:30] <_death> lotuseater: in the sub-section for keyword parameters, an example is given that shows the corresponding long syntax for the short syntax you used
[04:48:32] <mfiano> or something. Too tired
[04:48:33] <lotuseater> i will
[04:49:11] * lotuseater is very happy to be allowed being around so many very capable people, honestly
[04:50:44] *** Quits: rotateq (~user@p200300e787056600fdfeed040e17b750.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[04:51:05] <lotuseater> mfiano: how late is it for you now?
[04:51:09] <mfiano> This is a very nice feature for the rare occasions you need it
[04:53:17] <mfiano> 0122 utc, not that it matters; i sleep when i am tired
[04:53:44] <mfiano> which is as soon as i finish documenting this design section
[04:54:37] <lotuseater> okay so +2h for me
[04:56:08] <lotuseater> hah from our discussion i tried a simple class slot with ":initarg name" so an instance value for this is given by "'name \"foo\""
[04:56:22] <mfiano> correct
[04:59:51] <Josh_2> Staying up to write documentation? Props to you
[05:00:06] <mfiano> Not documentation
[05:00:40] <mfiano> More like trying to piece pages of my thoughts together on paper before I write the next module
[05:00:48] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:01:01] <Josh_2> Ah I see
[05:01:12] <Josh_2> Yeh screw staying up to write documentation :joy:
[05:01:27] *** Joins: srhm (~srhm@user/srhm)
[05:03:46] <lotuseater> mfiano: your "[ab]using to the limit" gets me to the song "Push it to the limit" ^^
[05:05:49] <mfiano> Naming things is hard, especially when the minimum description that conveys meaning is overly verbose.
[05:05:58] <mfiano> This is what keeps me awake at night :)
[05:06:32] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:b0cd:30f5:92cb:18b7)
[05:06:48] <mfiano> overly verbose wouldn't be a problem if it weren't for a high-frequency client interface
[05:09:17] *** Joins: karlosz (~karlosz@12.196.174.98)
[05:11:46] <Josh_2> %%%%%%thing
[05:11:50] <Josh_2> problem solved :P
[05:12:47] <mfiano> Designing and coding is usually easy in comparison with nomenclature. I would probably be a good mathematician if I gave it as much attention.
[05:13:05] <mfiano> This is where I sleep
[05:13:25] <Josh_2> Sleep well :wave:
[05:14:00] <lotuseater> naming everything with (gensym "THING"), problem (not) solved :D
[05:14:28] <Josh_2> I never thought of that, seems like a plan to me
[05:14:38] <lotuseater> ouman
[05:15:14] <mfiano> CL would be a cheater language for a code obfuscation challenge
[05:15:49] <lotuseater> so before (define-symbol-macro thing (gensym "THING")). this would be a line in the book "How to screw things up with elegance"
[05:16:16] <Josh_2> If you are gonna screwup might as well do it in style
[05:17:51] <lotuseater> one can also learn much by knowing how to *not* do something
[05:18:27] <mfiano> name everything with increasing levels of zero-width space characters
[05:18:49] <mfiano> including package-local nicknames, lexical variables, etc
[05:19:01] <mfiano> until you are left with as much zero space as possible
[05:19:18] <mfiano> also bonus points for also doing the same for the #\( and #\) dispatch characters
[05:26:47] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:b0cd:30f5:92cb:18b7) (Ping timeout: 246 seconds)
[05:27:58] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:38:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[06:00:27] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[06:11:50] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2.1)
[06:12:29] *** Quits: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[06:14:29] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 264 seconds)
[06:15:17] <_death> https://gist.github.com/death/e4d71e9c4993717bedaaa7ad4041bc36
[06:15:29] *** Joins: karlosz_ (~karlosz@12.196.174.98)
[06:17:07] *** Quits: CptKirk (~user@70-57-27-195.hlrn.qwest.net) (Remote host closed the connection)
[06:17:52] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[06:17:59] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 252 seconds)
[06:18:00] *** karlosz_ is now known as karlosz
[06:19:59] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 246 seconds)
[06:21:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:22:34] *** Joins: CptKirk (~user@70-57-27-195.hlrn.qwest.net)
[06:23:29] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 246 seconds)
[06:28:30] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[06:28:52] *** Joins: karlosz (~karlosz@12.196.174.98)
[06:28:58] *** Joins: Alfr (~Alfr@user/alfr)
[06:30:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[06:33:33] <beach> Good morning everyone!
[06:34:33] <_death> good morning (off to sleep ;)
[06:42:56] *** Quits: jealousmonk (~user@2804:431:e7c4:4247:75cd:c27b:296a:fb0f) (Remote host closed the connection)
[06:48:58] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[06:49:41] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:01:42] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:03:57] <phantomics> Morning beach
[07:09:41] *** Quits: semz (~none@user/semz) (Ping timeout: 246 seconds)
[07:18:42] *** Quits: jkordani (~Guest17@c-69-255-2-251.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[07:22:43] *** Joins: semz (~none@user/semz)
[07:29:29] *** Quits: CptKirk (~user@70-57-27-195.hlrn.qwest.net) (Ping timeout: 252 seconds)
[07:44:03] *** Joins: taiju (~taiju@210.160.37.43)
[08:03:25] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 265 seconds)
[08:04:07] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[08:08:42] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[08:09:08] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Remote host closed the connection)
[08:15:08] *** Quits: taiju (~taiju@210.160.37.43) (Ping timeout: 252 seconds)
[08:17:38] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[08:18:43] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Remote host closed the connection)
[08:19:23] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[08:19:25] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Remote host closed the connection)
[08:21:47] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[08:21:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:26:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[08:28:10] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[08:30:52] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:35:34] <lotuseater> beach: If you don't mind, I wanted to ask you about the status and your plans with Gsharp. I recommended OpusModus (maybe you heard of it) to a very music-affine friend of mine who also works in that topic and he's already on Mac. I remembered your Gsharp project when he mentioned he used MuseScore.
[08:36:31] <beach> OK.
[08:36:34] <lotuseater> I wonder how much effort would be needed to port OpusModus for other implementations and Linux.
[08:36:53] <beach> I don't remember OpusModus.  Let me Google it...
[08:38:10] <beach> It looks like a commercial program, no?
[08:38:15] <lotuseater> When someone hears `gsharp` it could be thought of a maybe new programming language by Microsoft accidently.
[08:38:23] <lotuseater> Yes it's commercial.
[08:38:40] <lotuseater> And I think they do it with LispWorks.
[08:38:48] <beach> Gsharp v2 has a new name: Clovetree
[08:39:00] <beach> I see.
[08:39:04] <lotuseater> oh okay good to know
[08:39:31] <beach> It is following the tradition of Rosegarden and Lilypond.
[08:39:40] <lotuseater> I saw when skimming through your repo files that you also implement things from Metafont. :) very interesting
[08:39:56] <beach> That stuff is obsolete.
[08:40:01] <lotuseater> okay I used some Lilypond before
[08:40:08] <beach> Just the name...
[08:40:22] <beach> When I started Gsharp, there was no good Music font.  Now there is a free font and a good standard.
[08:40:45] <lotuseater> Oh right, now some years ago.
[08:40:47] <beach> Or, rather, there were music fonts, but they looked like crap on low-resolution displays.
[08:41:59] <beach> So the idea for Clovetree is to use McCLIM, the new open font standard, and the new open font.  I forget the names of the standard and the font.
[08:42:05] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 246 seconds)
[08:42:41] <lotuseater> don't worry, I don't know the names at all for those
[08:42:48] <beach> Otherwise, I will simplify the concepts of Gsharp.  It was a mistake to introduce the concept of a "segment" to the user.  I did it because I thought I needed it for performance.
[08:43:04] <beach> Now, I am convinced it is not needed.
[08:43:40] <beach> SMuFL is the standard, I think.
[08:44:02] <beach> Leland is the font I think.
[08:44:34] <lotuseater> Is music one of your other special interests? Writing such applications requires also much domain specific knowledge.
[08:44:36] <beach> SMuFL has a lot of information on how glyphs fit together.
[08:44:53] <beach> Sort of.
[08:45:13] <beach> I noticed that OpusModus targets composers.
[08:45:26] <beach> But Clovetree is mainly meant for music engravers.
[08:45:57] <beach> And I took an interest in music engraving.  First I read the book by Ted Ross, and that was interesting but very brief.
[08:46:02] <lotuseater> I remember reading about Knuth, when visiting him at home you have to make a organ pipe session playing with him. :)
[08:46:15] <beach> Now, there is the reference of music engraving: "Behind Bars".
[08:46:23] <lotuseater> okay for what are composers?
[08:46:54] <beach> There is software like OpenMusic that targets composers.
[08:47:07] <lotuseater> ah okay
[08:47:07] <beach> The problem is that composers know nothing about the layout of music scores.
[08:47:19] <beach> Whenever I say that in my talks, composers get very angry.
[08:47:34] <beach> But then I show them some examples, and they become very quiet.
[08:48:04] <lotuseater> oh I misread, so composers are a certain type of people
[08:48:12] <beach> Yes.
[08:48:24] <beach> It's the same difference between writers and typesetters.
[08:49:20] <lotuseater> or mathematicians and linotypists in pre-TeX times :)
[08:49:26] <beach> Sure.
[08:50:02] <beach> A composer is someone who knows about things like harmony and counterpoint.  I have studied those a little bit, but not enough to be a composer.
[08:50:35] <beach> Music engraving, however, is something you can read up on and then implement the rules in software.
[08:51:48] <beach> I do recommend the book by Elaine Gould.
[08:51:58] <beach> It is extremely complete.
[08:52:06] <lotuseater> What is the name of it?
[08:52:22] <beach> https://www.amazon.com/Behind-Bars-Definitive-Guide-Notation/dp/0571514561
[08:52:44] <lotuseater> okay thx
[08:52:51] <beach> "Behind Bars, the Definitive Guide to Music Notation"
[08:53:51] <lotuseater> 237MB as PDF, maybe it has many high quality color pictures
[08:55:22] <beach> Almost 700 pages.
[08:55:38] <beach> No, just score snippets.
[08:57:00] <beach> To someone who is unfamiliar with music engraving as a domain (like for those composers who think they know everything) it is a very surprising read.
[08:58:18] <beach> So the main features of a program like this is to implement all these rules, with all the possible variations, while still allowing the user to tweak the result (because it is impossible to totally automate).
[08:58:41] <beach> I believe Common Lisp is absolutely ideal for stuff like that.
[08:59:22] <beach> I can't imagine what prompted the MuseScore developers to use C++.  It seems like a masochistic choice.
[09:00:11] <lotuseater> I would have guessed you think similar about that. :)
[09:00:41] <beach> So what information are you looking for, and what are your plans?  Maybe I already answered all your questions?
[09:01:08] <beach> I do think that Clovetree could become a "killer app" for Common Lisp.
[09:01:15] <lotuseater> I think so, and if not, I know where to find you.
[09:01:24] <beach> Sure.
[09:01:45] <beach> So how do you see your role in software like this?
[09:02:19] <lotuseater> I'm still not so good with McCLIM, but have learned from the examples.
[09:02:43] <lotuseater> My role? Maybe just with CL specific things.
[09:03:25] <beach> I mean, why were you interested in the status of Gsharp in the first place?  Do you plan to re-implement OpusModus?
[09:03:29] <beach> Something else?
[09:04:09] <lotuseater> And maybe if you know the geometry "GeoGebra" I would like to have this in McCLIM too, so featuring 100% less Java.
[09:04:36] <lotuseater> ehm no, I wouldn't even know where to start
[09:04:52] <lotuseater> Maybe if you could need help.
[09:05:44] <beach> Maybe so.  Clovetree is stalled at the moment because I am too busy with Gsharp, but maybe later.
[09:06:06] <beach> The main thing I want with Clovetree is better user gestures.
[09:06:07] <lotuseater> Or with SICL, which is your main project I guess.
[09:06:24] <beach> Oops.
[09:06:29] <beach> I mean "with SICL".
[09:06:31] <beach> *sigh*
[09:06:55] <lotuseater> I should try building Gsharp for trying it at the weekend to get a feeling.
[09:07:05] <lotuseater> Oh okay. ^^
[09:07:24] <beach> I am not even sure it still works.
[09:07:55] <lotuseater> It would also be nice making some nontrivial commit to SICL someday if needed.
[09:08:12] <beach> For you, you mean?
[09:08:26] <beach> Let me finish the bootstrapping procedure first.
[09:09:19] <lotuseater> Yes, but I don't see myself at such a level and don't want to screw things up.
[09:10:32] <beach> Once I finish bootstrapping, there will be tons of smaller, independent projects like a type of compiler optimization, or some other modules.
[09:10:59] <lotuseater> uii
[09:11:26] <lotuseater> I have no doubt you will be successful soon.
[09:12:26] <beach> It is hard stuff, but I think I can do it.
[09:13:10] <lotuseater> Anyway I hope I didn't interrupt you at important things.
[09:13:36] <beach> Not at all.
[09:13:52] <beach> I was watching a YouTube video about tones in Vietnamese.
[09:16:01] <lotuseater> So music or speaking out words?
[09:16:08] <beach> The latter.
[09:16:16] <contrapunctus> Someone working on another Common Lisp scorewriter?
[09:16:33] <lotuseater> I just know it's very very specific how words are emphasized in Mandarin.
[09:17:15] <beach> Bah, Mandarin has only 4 tones as I recall.  Vietnamese has 6 or 8 depending on how you see it.
[09:17:26] <lotuseater> contrapunctus: I know just the two mentioned ones.
[09:17:36] <beach> Oh, I almost forgot: Happy equinox everyone!
[09:18:14] <lotuseater> oh sounds interesting, but maybe if I would learn an Asian human language it would be Japanese I think
[09:19:10] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[09:19:13] <beach> No tones in Japanese though.  But no doubt some other difficulties.
[09:19:21] <lotuseater> Ah right, so now autumn meteorologically.
[09:19:41] <beach> Only in the northern hemisphere.
[09:20:05] <lotuseater> right
[09:20:22] <beach> I see it as giving back the sun to hayley and pillton. :)
[09:21:06] <lotuseater> I even got in touch with two other fellows from over there.
[09:21:45] <lotuseater> isn't a nickname for it "down under"?
[09:21:55] <beach> It is.
[09:22:37] <beach> I lived in Aotearoa for a year, and tried to organize a Kiwi Common Lisp meetup, but there are only around 5 Lispers within a 3 hour flight radius from Auckland.  Very different from Europe.
[09:23:19] <moon-child> wow, you really have lived the world over
[09:23:33] <beach> 5 countries on 4 continents.
[09:24:06] <lotuseater> I never lived in another country yet, but I would want to, if some interesting opportunity opens up and someone would need me.
[09:27:11] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[09:27:42] <lotuseater> gilberth said jokingly to me organizing some CL meetup somewhere here central and invite some people, now that the situation gets hopefully better with time. but I would also travel for that to France if other costs are not out of my current financial range
[09:28:29] <lotuseater> but of course there's ELS too
[09:28:49] *** Joins: leeb (~leeb@KD111239156011.au-net.ne.jp)
[09:33:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:38:41] <beach> Yes, let's hope we get to go to Porto.
[09:40:04] <lotuseater> I assume you mean the city in Portugal.
[09:40:30] <beach> Yes, that's the location for ELS 2022.
[09:41:08] <lotuseater> good to know
[09:47:38] *** Joins: john__ (~john@dynamic-077-009-117-135.77.9.pool.telefonica.de)
[09:48:25] *** Quits: leeb (~leeb@KD111239156011.au-net.ne.jp) (Quit: WeeChat 3.1)
[09:54:49] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[09:59:31] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[10:07:56] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[10:12:23] *** Joins: karlosz (~karlosz@12.196.174.98)
[10:13:20] *** Joins: shka (~herr@109.231.62.239)
[10:19:53] *** Quits: yewscion (~yewscion@2604:ca00:120:9922::1260:59b) (Ping timeout: 264 seconds)
[10:20:33] <pjb> lotuseater: I also worked a little with gsharp, if you have questions.   I have some patches here:  https://gitlab.com/abnotation/gsharp   I have apending pull request on gsharp to prepare for more PR with my patchesâ€¦ https://github.com/robert-strandh/Gsharp/pulls
[10:21:13] <beach> Oh, I completely forgot.  I should merge that.
[10:21:17] <beach> Thanks for reminding me.
[10:21:34] <pjb> ;-)
[10:24:03] <lotuseater> ah thanks for your offer
[10:24:29] <lotuseater> quicklisp didn't find the "obseq" system, did you remember what it's for?
[10:24:48] <beach> pjb: I merged one PR.  I am not sure whether there are more.
[10:25:06] <beach> lotuseater: It should be in the Gsharp repository.
[10:25:35] <pjb> beach: that's nice, all PR merged. I will make new PR with my patches soon (I hope over the week-end).  Thanks.
[10:25:53] <beach> Perfect!  Thank you!
[10:25:59] <lotuseater> I forked the repo this night and skimmed trough, for example changed some (when foo ...) to (unless (null foo) ...) and such
[10:26:19] <lotuseater> okay now it makes sense
[10:26:45] <beach> It appears Obseq is a separate repository in my GitHub account.
[10:27:33] <pjb> https://github.com/robert-strandh/Obseq
[10:33:00] <beach> Right, thanks!
[10:34:07] *** Joins: pve (~pve@178-55-33-119.bb.dnainternet.fi)
[10:34:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[10:57:06] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:04:53] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 264 seconds)
[11:07:37] *** Joins: cosimone (~user@151.14.38.15)
[11:07:41] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[11:09:05] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 246 seconds)
[11:12:41] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 264 seconds)
[11:27:41] *** Quits: john__ (~john@dynamic-077-009-117-135.77.9.pool.telefonica.de) (Ping timeout: 264 seconds)
[11:35:40] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:55] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[11:50:40] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[11:52:18] *** Joins: selwyn (~selwyn@user/selwyn)
[11:54:34] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[11:54:59] *** Joins: selwyn (~selwyn@user/selwyn)
[11:59:30] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:3935:852:53bf:2506)
[12:06:03] <Duuqnd[m]1> If I have two threads both writing to the same network socket using WRITE-SEQUENCE followed by FORCE-OUTPUT, is there any chance that will cause problems? (I'm using SBCL)
[12:12:52] <hayley> Don't Count On It(tm).
[12:13:36] <hayley> When in doubt with concurrent programs: Don't Count On It. How sockets interact with threads is somewhat undefined to my knowledge, so you best use a lock if you care.
[12:13:55] <saturn2> i think it probably won't crash, but the output will be a jumble
[12:14:25] <saturn2> not a good idea, in any case
[12:18:02] <Duuqnd[m]1> I would do that, but the part that writes to the socket is in a library that I don't really want to modify
[12:18:28] <Duuqnd[m]1> This program only has to run on SBCL (because I'm the only user) so I can live with some uncertainty
[12:18:32] <hayley> Can you grab a lock while calling out to the library?
[12:19:20] <Duuqnd[m]1> There's lots of functions that call the socket writing function and putting a lock around each one would be very inconvenient.
[12:19:25] * lotuseater now thinks again about zeromq
[12:19:34] <Gnuxie> hmm i wonder if the bridge is still broke like 3ric said
[12:19:48] <hayley> A: yes
[12:20:34] <Alfr> Duuqnd[m]1, if it's a gf, you could use :around methods.
[12:21:13] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[12:21:22] <hayley> Well, my apologies then. But having your program break because someone decided to change undocumented behaviour, or worse, having it break completely randomly (cause that's threading for ya), is also very inconvenient.
[12:21:50] <lotuseater> Alfr: so getting around having a gf? ^^ haha
[12:22:27] <Alfr> You're getting around having generic functions? What?
[12:22:54] <Duuqnd[m]1> It is indeed. I have to choose between blindly trusting SBCL or making the program much worse to use and I don't like either option. Maybe I'll just add locks in the library after all.
[12:22:56] <lotuseater> ah not important, was just about the "gf" abbreviation
[12:23:28] <Alfr> lotuseater, I know. :)
[12:24:11] <hayley> Is it necessary to have multiple threads use one socket though?
[12:24:36] <Duuqnd[m]1> All this is because if the socket connection dies while it's listening I have to try to send something down the socket for it to notice that it's dead.
[12:25:16] <Duuqnd[m]1> A separate thread that pings the server every 10 seconds was the first solution I came up with (admittedly not a great one but the whole program is a soup of bad decisions)
[12:26:05] <Duuqnd[m]1> I can hardly believe it held out long enough to bridge IRC and Twitch for the two days that ELS needed it
[12:31:44] <Duuqnd[m]1> I guess I'll be using the worst possible solution: Assume it works until it breaks.
[12:32:41] <Duuqnd[m]1> I'll probably end up replacing the library with my own thing anyway since CL-IRC doesn't seem to support SASL which Libera usually wants.
[12:32:57] <hayley> glhf
[12:33:48] <Duuqnd[m]1> Any suggestions for which gods to pray to for making this work?
[12:33:58] <hayley> Leslie Lamport?
[12:34:33] <Duuqnd[m]1> Sure
[12:35:01] *** Joins: igemnace (~ian@user/igemnace)
[12:35:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[12:38:16] *** Joins: tfeb (~tfb@88.98.95.237)
[12:41:31] <pjb> Duuqnd[m]1: you can count on it, on the contrary: count that concurent write-sequence WILL send their data randomly mixed on the socket.
[12:41:47] <pjb> So you have a probability = 1 of that causing problems.
[12:42:08] <pjb> Duuqnd[m]1: definitely use a mutex when you want to write out to the socket.
[12:42:39] <pjb> Duuqnd[m]1: basically, as soon as you have a loop, it's not atomic. Obviously, write-sequence contains loops.
[12:42:51] <pjb> "atomic"
[12:53:14] *** Joins: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad)
[12:53:27] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[12:53:52] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[13:06:04] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[13:13:39] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[13:27:09] *** Joins: random-nick (~random-ni@87.116.178.231)
[14:03:45] *** Joins: notzmv (~zmv@user/notzmv)
[14:23:34] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[14:23:41] <Qwnavery> lotuseater: hey
[14:26:00] *** Joins: selwyn_ (~selwyn@user/selwyn)
[14:27:29] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 252 seconds)
[14:34:26] *** Quits: selwyn_ (~selwyn@user/selwyn) (Ping timeout: 265 seconds)
[14:35:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:40:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[14:54:51] *** Joins: selwyn (~selwyn@user/selwyn)
[15:12:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[15:33:42] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:37:18] <Cymew> lotuseater: You were not alone in your reaction to that expression. I did a double take before I re-parsed it.
[15:41:39] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[15:43:01] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[15:54:36] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[16:11:53] *** Quits: cosimone (~user@151.14.38.15) (Remote host closed the connection)
[16:15:08] <lotuseater> Cymew: good to hear
[16:27:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:37:37] *** Joins: nature (~nature@mail.blazebone.com)
[16:39:24] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[16:56:51] *** Joins: jealousmonk (~user@2804:431:e7c4:4247:75cd:c27b:296a:fb0f)
[16:57:59] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[16:58:43] *** Joins: amb007 (~a_bakic@220.135.22.93.rev.sfr.net)
[17:00:38] *** Joins: Bike (~Glossina@71.69.170.70)
[17:00:38] *** ChanServ sets mode: +o Bike
[17:07:21] <Josh_2> Good afternoon
[17:08:29] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[17:09:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:10:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:10:56] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:14:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[17:19:04] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:3935:852:53bf:2506) (Remote host closed the connection)
[17:40:36] *** Joins: Everything (~Everythin@37.115.210.35)
[17:42:33] <lotuseater> Hi there Josh_2.
[17:49:03] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[17:49:16] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[17:49:26] *** Joins: minion (~minion@common-lisp.net)
[17:50:05] *** Joins: specbot (~specbot@common-lisp.net)
[17:51:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:51:11] *** Quits: amb007 (~a_bakic@220.135.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[17:52:10] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[17:52:19] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[17:52:34] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[17:55:41] *** Joins: scymtym_ (~user@ip-129-70-148-217.WLAN.Dyn.CIT-EC.NET)
[17:55:47] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 246 seconds)
[18:05:17] *** Quits: scymtym_ (~user@ip-129-70-148-217.WLAN.Dyn.CIT-EC.NET) (Ping timeout: 252 seconds)
[18:06:07] *** Joins: scymtym_ (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[18:09:42] *** Joins: Lycurgus (~juan@98.4.112.204)
[18:16:12] *** Joins: eddof13 (~textual@200.52.90.50)
[18:31:41] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[18:45:40] *** Quits: eddof13 (~textual@200.52.90.50) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:50:33] *** Joins: eddof13 (~textual@200.52.90.50)
[18:55:20] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 252 seconds)
[19:00:13] *** Joins: cosimone (~user@93-47-229-220.ip115.fastwebnet.it)
[19:02:41] *** Quits: eddof13 (~textual@200.52.90.50) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:04:49] *** Joins: q3cpma (~q3cpma@176-136-178-80.abo.bbox.fr)
[19:05:55] <q3cpma> Hello, I've finished my wordcount program (http://0x0.st/-Y-W.lisp), but it somehow manages to blow SBCL's 1GB heap just during the word gathering part while processing a 40 MB file. Any idea why?
[19:06:19] *** Joins: eddof13 (~textual@200.52.90.50)
[19:06:54] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Remote host closed the connection)
[19:07:28] <beach> q3cpma: Please indent your code correctly if you want remarks on it.
[19:07:47] <q3cpma> Hmmmm? I'm using sly and emacs, and it looks nice here
[19:07:50] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:07:57] <q3cpma> Tabulation problem?
[19:08:10] <beach> Could be.
[19:08:25] <beach> Does it look fine when you click on your own link?
[19:08:40] <beach> Here (words is not aligned under (lines.
[19:08:50] <q3cpma> No, but that's just an upload website, it doesn't format properly
[19:09:15] <q3cpma> I just `curl http://0x0.st/-Y-W.lisp`, personally
[19:09:40] <q3cpma> Hmmm, would you prefer an image
[19:09:52] <beach> Well, that's what we have to look at and it looks wrong to me.
[19:10:33] <beach> Wow, you should never have (safety 0)
[19:11:14] <beach> It makes things impossible to debug in case of a problem.
[19:12:40] <q3cpma> Yeah, but changing it doesn't do anything for this.
[19:12:50] <q3cpma> I just wanted to be sure debug data wasn't the culprit
[19:12:57] *** Joins: Guest71 (~Guest71@2601:86:400:b18::1d67)
[19:14:08] <beach> You could try increasing the heap size to see whether that's the problem.
[19:14:08] <etimmons> I just finished the first release of my summer side-project on a pure CL library for reading and writing tar files: <https://common-lisp.net/project/cl-tar/>
[19:14:30] <etimmons> Hopefully others find it useful as well :)
[19:14:36] <q3cpma> Here it is: https://paste.ofcode.org/5rGgziNUCBzbG8PxBYSNUJ
[19:14:56] <etimmons> phoe: I was thinking of you when I wrote the extraction code (it uses a lot of conditions and restarts)
[19:15:33] <q3cpma> Whoops: https://paste.ofcode.org/kpLNyv7NnhVLMJcsJQj44N
[19:15:38] <random-nick> q3cpma: what's the purpose of the lines variable?
[19:16:03] <q3cpma> To gather the lines, so I can use :sharedp with cl-ppcre
[19:16:27] <q3cpma> Even if it doesn't work, I would expect at most twice the memory usage, to be honest
[19:17:42] <yitzi> etimmons: is the matrix bridge fixed here?
[19:18:35] <q3cpma> By the way, related question: can I trust the output of (room) concerning memory usage?
[19:19:05] <etimmons> yitzi: I'm getting messages from IRC again! I think the culprit was Alex . When they left the room I started getting things again.
[19:19:27] <yitzi> etimmons: Ok thanks.
[19:19:55] <etimmons> Would still love to prevent it from happening again, but it requires a mod to tweak a setting.
[19:20:49] <yitzi> Yeah, I just switched to matrix and it is pretty nice so kind of irritating to have a hickup.
[19:22:00] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[19:22:56] <random-nick> I'm guessing the shared structure ppcre refers to is array displacements, which shouldn't be making any weak references
[19:23:05] <Gnuxie> oops
[19:23:30] <q3cpma> random-nick: Sorry, you lost me. What are weak references?
[19:23:31] <random-nick> but yeah the lines list alone shouldn't be causing a heap exhaustion
[19:24:57] <random-nick> q3cpma: references which the garbage collector doesn't follow (i.e. something can still be garbage if there's a weak reference to it) and automatically invalidates when the referenced object is collected
[19:26:15] <q3cpma> I see, so what does a displaced array becomes when the parent is reaped (or is it reaped)?
[19:27:49] <random-nick> a displaced array should prevent its parent from being reaped
[19:28:45] <random-nick> as in, a "living" displaced array should keep its parent "living" or at least its storage
[19:29:28] <q3cpma> Cool, wonder if it's standard mandated
[19:32:08] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Remote host closed the connection)
[19:32:08] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Read error: Connection reset by peer)
[19:32:08] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Write error: Connection reset by peer)
[19:32:09] *** Quits: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad) (Remote host closed the connection)
[19:32:09] *** Quits: bitspook[m] (~bitspookm@2001:470:69fc:105::fcd4) (Read error: Connection reset by peer)
[19:32:09] *** Quits: hayley (~theemacss@user/hayley) (Read error: Connection reset by peer)
[19:32:09] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Read error: Connection reset by peer)
[19:32:10] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Remote host closed the connection)
[19:32:10] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Remote host closed the connection)
[19:32:11] *** Quits: saltrocklamp[m] (~elementio@2001:470:69fc:105::5065) (Read error: Connection reset by peer)
[19:32:11] *** Quits: IlluminatedPileo (~heretical@2001:470:69fc:105::8054) (Write error: Broken pipe)
[19:32:12] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Remote host closed the connection)
[19:32:12] *** Quits: bhyde[m] (~bhydematr@2001:470:69fc:105::70e) (Write error: Connection reset by peer)
[19:32:12] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Write error: Connection reset by peer)
[19:32:14] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Write error: Connection reset by peer)
[19:32:14] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Write error: Connection reset by peer)
[19:32:14] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Write error: Connection reset by peer)
[19:32:14] *** Quits: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7) (Write error: Connection reset by peer)
[19:32:14] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (Read error: Connection reset by peer)
[19:32:14] *** Quits: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d) (Remote host closed the connection)
[19:32:15] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Remote host closed the connection)
[19:32:15] *** Quits: dualinverter[m] (~dualinver@2001:470:69fc:105::16a7) (Read error: Connection reset by peer)
[19:32:15] *** Quits: Duuqnd[m]1 (~duuqnd@2001:470:69fc:105::e9c0) (Remote host closed the connection)
[19:32:16] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Read error: Connection reset by peer)
[19:32:16] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (Remote host closed the connection)
[19:33:18] *** Quits: scymtym_ (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Quit: ERC (IRC client for Emacs 28.0.50))
[19:33:43] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[19:33:46] <q3cpma> With a 4MB input file, I get 120MB of dynamic usage vs 40~45MB just for SBCL (using room)
[19:33:46] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[19:33:46] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[19:33:51] <q3cpma> Something is definitely wrong
[19:33:58] *** Joins: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7)
[19:33:59] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[19:34:11] *** Joins: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d)
[19:34:11] *** Joins: IlluminatedPileo (~heretical@2001:470:69fc:105::8054)
[19:34:25] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[19:34:25] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[19:34:25] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[19:34:34] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[19:34:39] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[19:34:51] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[19:35:03] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[19:35:03] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[19:35:03] *** Joins: saltrocklamp[m] (~elementio@2001:470:69fc:105::5065)
[19:35:03] *** Joins: hayley (~theemacss@2001:470:69fc:105::234)
[19:35:04] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[19:35:15] *** Joins: dualinverter[m] (~dualinver@2001:470:69fc:105::16a7)
[19:35:26] *** Parts: Everything (~Everythin@37.115.210.35) ()
[19:35:27] *** Joins: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad)
[19:35:28] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[19:35:40] *** Joins: bitspook[m] (~bitspookm@2001:470:69fc:105::fcd4)
[19:35:40] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[19:35:40] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[19:35:40] *** Joins: bhyde[m] (~bhydematr@2001:470:69fc:105::70e)
[19:35:40] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[19:40:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[19:42:16] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:42:23] <q3cpma> Here's the "final" version: http://0x0.st/-Y-G.lisp, NOT using sharedp allows me to process the 40MB file, but I still get 490MB of memory use (323M in 8.5M simple-character-string and 143MB in 9M cons).
[19:43:17] *** Quits: Guest71 (~Guest71@2601:86:400:b18::1d67) (Quit: Client closed)
[19:44:20] <q3cpma> And there are 8M words in the input file, so the object count figures aren't absurd, only the mem use
[19:45:03] <CodeBitCookie[m]> Hello everyone
[19:45:27] <CodeBitCookie[m]> Any idea on shell scripting and writing short programs with sbcl?
[19:45:44] <beach> Hello CodeBitCookie[m].
[19:46:05] <q3cpma> CodeBitCookie[m]: personally, I'd just UIOP to interface with the OS
[19:46:16] <mfiano> Doesn't SBCL internally use utf32?
[19:47:43] <q3cpma> Hmmm, even then the 40MB file (containing ASCII) would still be 160MB, not 500
[19:48:08] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 246 seconds)
[19:48:10] <beach> That might require using base-strings or somtething like that.
[19:48:16] <beach> something
[19:51:47] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[19:53:18] <scymtym> for short strings, the overhead for array headers is also a factor
[19:53:19] <mfiano> sb-ext:primitive-object-size and the other memory introspection functions may be of help
[19:53:54] <q3cpma> Thanks, I used room
[19:54:06] <beach> I was just going to say what scymtym said.
[19:54:22] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[19:55:37] <q3cpma> scymtym: what's fun is that room reports 55MB of array-headers IF I use sharep, but not otherwise
[19:57:29] <scymtym> q3cpma: you previously mentioned SIMPLE-CHARACTER-STRING. those have header data as well but probably not in the sense of that ROOM report
[19:57:35] <q3cpma> Breakthrough: enclosing the code in a dummy main functions completely solve the problem
[19:57:41] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 264 seconds)
[19:58:29] <q3cpma> Man, I left Tcl where only procs are bytecoded to find CL where I get something similar. What a strange world.
[19:59:03] <q3cpma> ....
[19:59:16] <q3cpma> Ignore me, I'm completely wrong
[19:59:53] *** Joins: nature (~nature@mail.blazebone.com)
[20:05:44] *** Quits: cosimone (~user@93-47-229-220.ip115.fastwebnet.it) (Ping timeout: 252 seconds)
[20:09:34] <q3cpma> So, playing with SB-EXT:PRIMITIVE-OBJECT-SIZE showed me that strings of size 0, 1-4, 5-8 weigh respectively 16, 32 and 48 bytes.
[20:09:47] <q3cpma> It's probably the cause of my misery
[20:11:07] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[20:11:31] *** Joins: amb007 (~a_bakic@236.135.22.93.rev.sfr.net)
[20:12:02] <q3cpma> So, is SBCL not suited at all for string processing, or am I supposed to do something?
[20:12:29] <mfiano> Try a simple-base-string
[20:14:08] *** Joins: igemnace (~ian@user/igemnace)
[20:14:36] <q3cpma> Thanks, it does seem to do something
[20:14:41] <mfiano> A base-string for example, is 32 bytes from 0-15 characters
[20:15:12] <mfiano> Not sure about simple-base-char strings
[20:16:51] <q3cpma> Hmmm, why does (the simple-base-string "abcd") not work but coerce does?
[20:17:02] <q3cpma> Oh, the only declares types
[20:17:11] <mfiano> THE doesn't coerce?
[20:17:22] <mfiano> (sb-ext:primitive-object-size (make-array 15 :element-type 'base-char))
[20:20:58] <mfiano> Using type declarations is undefined behavior anyway. Infact, relying on the internal representation of the string types to stay consistent is bad. Just program Common Lisp instead of an implementation.
[20:22:02] *** Joins: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net)
[20:22:03] <q3cpma> Well, I only get 2MB of saving with simple-base-string
[20:22:58] *** Joins: karlosz (~karlosz@47.180.55.252)
[20:23:28] <mfiano> and that 2MB may change some next version of SBCL.
[20:23:48] <mfiano> I don't agree with implementation specific assumptions. We have a standard for a reason
[20:23:52] <mfiano> But that's just me
[20:24:12] <q3cpma> Guess so
[20:24:19] <saturn2> have you tried calling (sb-ext:gc :full t) before measuring memory use?
[20:24:34] *** Joins: notzmv (~zmv@user/notzmv)
[20:25:11] <mfiano> Looks like you'll get a lot more savings with just base-string though
[20:26:00] <q3cpma> saturn2: it is a lot better, but the original problem was an OOM crash during processing
[20:26:46] <q3cpma> mfiano: why?
[20:27:06] <mfiano> SBCL's default heap size is incredibly small. Personally I set this to half of my physical ram, 32G. It won't all be allocated unless needed.
[20:27:26] <mfiano> No idea. I forget the details of the character types and which parts are UB
[20:27:44] <q3cpma> Maybe this isn't a Lispy way of thinking, but when I have to use 1G for no apparent reason, I'm a bit alarmed
[20:29:38] <saturn2> the default heap size is small, and also the default settings tend to let a lot of uncollected garbage build up
[20:30:12] <mfiano> A larger heap size will affect collections, yes
[20:30:16] <Bike> weird that it wouldn't run a collection rather than die from OOM, though. maybe something is actually kept alive? i don't see anything obvious...
[20:30:21] *** Joins: Guest17 (~Guest17@c-69-255-2-251.hsd1.md.comcast.net)
[20:30:25] *** ChanServ sets mode: -o Bike
[20:30:44] *** Guest17 is now known as jkordani
[20:31:20] <mfiano> Also is it an OS OOM or a heap exhaustion Lisp error
[20:31:28] <saturn2> using displaced strings as hash keys seems like a bit of an out of the ordinary thing to do, maybe there's a bug?
[20:31:32] <q3cpma> Heap exhaustion
[20:31:50] <q3cpma> OS OOM would be scary with only a 1G heap on a 64GB machine
[20:32:11] <q3cpma> saturn2: I switched to :sharedp nil, as it was causing a lot more memory usage (paradoxally)
[20:32:20] <Nilby> The reasons for sbcl's memory behavior are social rather than purely technical.
[20:32:20] <saturn2> yes i saw that
[20:32:53] <q3cpma> I understand that I can grow the heap, but I just wanted to know it needs that much
[20:33:04] <mfiano> Try base-string
[20:33:45] <mfiano> (sb-ext:primitive-object-size (make-array 15 :element-type 'simple-base-char)) ; => 144
[20:33:58] <mfiano> (sb-ext:primitive-object-size (make-array 15 :element-type 'base-char)) ; => 32
[20:34:01] <q3cpma> I replaced the argument of cl-ppcre to (coerce line 'simple-base-string)
[20:34:17] <mfiano> That's not a base-string
[20:34:25] <q3cpma> Hmmmm
[20:34:41] <q3cpma> How am I supposed to convert it, then?
[20:35:56] <saturn2> you can do (dotimes (n 7) (setf (sb-ext:generation-minimum-age-before-gc n) 0.1d0)) to make the garbage collector more aggressive
[20:36:08] <mfiano> Hmm, maybe Bike or someone knows how to read base characters from a stream
[20:36:14] <q3cpma> (sb-ext:primitive-object-size (coerce "abcdefghijklmno" 'simple-base-string)) does give me 32
[20:36:32] <q3cpma> saturn2: I'll try
[20:37:12] <q3cpma> Just for info, python does in 0.12s what the SBCL image with max speed declaim does in 3.94
[20:37:48] <q3cpma> mfiano: I can't convert it when reading, as I need NIL as sentinel value for EOF
[20:39:07] <saturn2> open the file with :element-type 'base-char ?
[20:39:25] <q3cpma> Sadly, I'm using stdin, but I'll try
[20:40:43] <mfiano> That isn't expected. That isn't very idiomatic code, and displaced arrays are slow
[20:41:06] <mfiano> Since they have to do bounds checking on both arrays, and implementations don't really optimize displaced arrays as much as they could
[20:41:10] <q3cpma> But these aren't displaced arrays
[20:41:17] <mfiano> Oh I thought I heard that above
[20:41:30] <q3cpma> It was (probably) when I was using :sharep t
[20:42:07] <mfiano> SBCL is often faster than C if coded right
[20:42:29] <jeosol> mfiano: good to know. That's with type hints and all?
[20:42:39] <CodeBitCookie[m]> Also I was thinking about McCLIM. I really love it. The big problem is that GUIs are made for people who can't use a terminal interface or it's just for an application like video editors which are better with a GUI. People today cannot stand to see something look even a tad bit outdated. I don't care about the looks but people who use my application will. Do you think McCLIM could be made pretty?
[20:42:57] <q3cpma> mfiano: That's what attracted me to CL
[20:42:58] <jeosol> I remember seeing a lisp paper that actually demonstrated it. I probably have it somewhere so it should be easily searchable on the web.
[20:43:06] <q3cpma> But for now, I'm not feelin' the speed
[20:43:07] <mfiano> https://programming-language-benchmarks.vercel.app/problem/spectral-norm
[20:43:17] <mfiano> The other day, cpp was below lisp :/
[20:43:21] <jeosol> q3cpma: The speed is there. I am using it for numerical applications
[20:43:40] <q3cpma> Well, I understand that SBCL is good at numerical code, but strings also exist
[20:44:01] <jeosol> my applications involving mostly number crunching, and I don't optimize things and use type hints for now since bottle neck lies elsewhere
[20:44:10] <mfiano> strings are just arrays of numbers
[20:44:18] <q3cpma> And I really want to love it, because the language is beautiful (the stdlib, "a bit less")
[20:44:47] <jeosol> q3cpma: i agree, but with the gradual typing facilities and I am sure there will be ways to optimize things
[20:44:53] <jeosol> Let me see if I can find that paper
[20:45:26] <jeosol> http://www.iaeng.org/IJCS/issues_v32/issue_4/IJCS_32_4_19.pdf
[20:45:43] <pjb> q3cpma: I would just use symbols: https://termbin.com/npcdj
[20:45:44] <jeosol> Didier is the author, you can get more info
[20:45:51] <saturn2> sbcl should usually be faster than python even without type annotations
[20:46:02] <q3cpma> jeosol: already read it when I was in my hype phase
[20:46:12] <jeosol> q3cpma: ok, good
[20:46:22] <jeosol> haha, what do you mean by hype phase
[20:46:26] <jeosol> is the hype going down?
[20:46:33] <CodeBitCookie[m]> beach: Hey
[20:47:04] <q3cpma> jeosol: to be honest, a bit
[20:47:16] <jeosol> q3cpma: Interesting.
[20:47:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:47:32] <q3cpma> But I wrestled with uplevel too much in Tcl to abandon quasi-quoting and gensym
[20:48:11] <jeosol> I think it depends on your application and problem. For me, I came from matlab and c/c++ (grad school), then I came across CL in a thesis, and I switch because of how easy to read the code was. And emacs+slime+paredit for me is a good IDE.
[20:48:34] <mfiano> It takes a lot to write efficient code. Understanding the standard in depth is a must, and the nuances of the implementation you are writing implementation-specific optimizations for
[20:48:37] <jeosol> I really think it depends on what you are trying to solve and what is expected from it
[20:48:46] <mfiano> One can't expect to get good performance as a beginner
[20:48:56] <jeosol> mfiano: very true
[20:49:08] <q3cpma> I understand, but in this case, I don't really see an escape hatch.
[20:49:22] <q3cpma> Numerical and vector code obviously benefits from type hints
[20:49:33] <jeosol> once my application is extremely stable, then I plan to look into that, but I don't do any optimizations for now and things run really fast - and could be faster
[20:49:41] <q3cpma> jeosol: same, did C/Ocaml in school, C++ at work, found Tcl and now CL
[20:49:59] <jdz> I may be late, but was looking into SBCL's character reading from streams, and there's currently no way to read anything but strings with element type CHARACTER in SBCL.  The only way is to COERCE after reading.
[20:50:03] <jeosol> q3cpma: Interesting
[20:50:07] <q3cpma> You can only appreciated such dynamic languages when you have tried horrible stuff with the C preprocessor
[20:50:15] <mfiano> You can do a lot at compile-time too, which is what cl-ppcre does, and why it is much faster than Perl, which has to interpret bytecodes
[20:50:28] <jeosol> q3cpma: I could not agree more, haha
[20:50:30] <mfiano> So maybe read in and convert your input to base-chars at compile time, etc
[20:50:39] <q3cpma> mfiano: Yes, but compiler-macros do seem like manual inlining to me
[20:50:44] <mfiano> or use load-time-value and other tricks
[20:50:51] <mfiano> umm, not compiler macros
[20:50:55] <mfiano> that is something else entirely
[20:51:06] <q3cpma> Isn't that what cl-ppcre does with scan?
[20:51:18] <jeosol> q3cpma: how long have been hacking CL?
[20:51:25] <q3cpma> 1 week =)
[20:51:33] <jeosol> oh ok
[20:51:50] <jeosol> don't worry, I think you'll get things with time
[20:52:33] <jeosol> the guys here are extremely and you'd get multiple perspectives on your questions here
[20:52:54] <jeosol> ..helpful
[20:53:02] <q3cpma> Will never get over the inconsistency of the stdlib/naming, but I know already enough to persevere
[20:53:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[20:53:48] <mfiano> That is a non-issue with macros.
[20:53:58] <pjb> q3cpma: https://termbin.com/afad
[20:54:57] <q3cpma> mfiano: I was thinking about aliases with fdefinition/symbol-function instead
[20:55:37] *** Joins: aeth (~aeth@user/aeth)
[20:56:39] <q3cpma> pjb: I'm trying to mentally process it
[20:57:03] <q3cpma> Looks like read doesn't handle punctation and other
[20:57:54] <pjb> q3cpma: the explaination is: READ parses "words" (symbols) and intern them in a case-insensitive way, in the current package (a temporary package). The hash table can be an EQL hash-table because the symbols are already interned. The rest is identical.
[20:58:09] <pjb> q3cpma: indeed, it assumes just words and spaces.
[20:58:43] <pjb> q3cpma: actually if the file contains special characters, READ will break because it'll try to parse lisp syntax (parentheses, numbers, etc).
[20:58:51] <q3cpma> Well, it doesn't seem to solve memory usage, to be honest, but that's a different and interesting solution
[20:59:50] *** Joins: cosimone (~user@93-47-229-220.ip115.fastwebnet.it)
[21:00:14] <saturn2> using symbols really shouldn't be more efficient than strings
[21:00:32] <pjb> 338 byte/word is too much?
[21:00:39] <pve> q3cpma: shouldn't you be building your histogram as you're reading each line?
[21:01:04] <pjb> saturn2: less garbage may be generated by interning the data when it's read.
[21:01:24] <q3cpma> pve: I could, but by doing step-by-step, I minimize function calls
[21:01:58] <q3cpma> But I'll try, the memory pressure may be slowing me down too
[21:02:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:02:44] <pjb> q3cpma: of course, it could be made faster, but it'd really be micro-optimization.  Only if you had to work with google-size data would you need that.  Are you doing a hiring test to apply at google?
[21:02:50] <pjb> Otherwise, it's useless.
[21:03:49] <q3cpma> pjb: no, just trying to at least reach other languages
[21:04:10] <scymtym> q3cpma: is your input file available somewhere?
[21:04:25] <saturn2> pjb: "Just for info, python does in 0.12s what the SBCL image with max speed declaim does in 3.94"
[21:04:46] <saturn2> you wanna just let python get away with that?
[21:05:06] <pjb> q3cpma: there are no characters in C.  Don't read strings. Read octets!
[21:05:26] <q3cpma> I used the data from https://github.com/benhoyt/countwords
[21:05:38] <scymtym> thanks
[21:05:39] <q3cpma> https://raw.githubusercontent.com/benhoyt/countwords/master/kjvbible.txt
[21:05:40] <pve> q3cpma: not sure about the "minimize function calls", care to educate me?
[21:05:47] <q3cpma> and the same concatened 10 times
[21:06:05] <q3cpma> pve: Instead of doing a dolist per line, I do only one
[21:07:40] <q3cpma> Being progressive is a lot faster
[21:08:44] <q3cpma> Mistake, it was crashing
[21:22:04] <Josh_2> etimmons: Just seen your  link for the tar project, very nice that will come in useful for me
[21:24:41] <q3cpma> etimmons: on that subject, since Tar has no real standard, what did you use as reference? GNU?
[21:24:50] <q3cpma> Or PAX, maybe?
[21:26:20] <Josh_2> also how did you get 40ants doc to work :( the examples wont run on my machine
[21:28:54] <etimmons> q3cpma: it can read ustar, pax, gnu, and v7 tar files. It can write each of them as well, but I'm missing a couple of gnu extensions in each direction.
[21:29:50] <etimmons> Josh_2: great! Sorry to hear about 40ants doc, what errors were you getting? I had some mgl-pax code that I just ported over so I didn't exactly follow the examples to the letter
[21:29:58] <q3cpma> etimmons: I was going to preempt you, found the gitlab
[21:30:25] <q3cpma> etimmons: GNU is the standard if you want sparse file and long names, these day, so nice
[21:30:44] <q3cpma> Also, https://mgorny.pl/articles/portability-of-tar-features.html is quite "fun"
[21:32:51] <q3cpma> Last version: http://0x0.st/-YHr.lisp if there are who are hacking on it
[21:33:09] <Josh_2> etimmons: the example on the github wont build. I run the (40ants-doc/builder:render-to-string @foo-random-manual :format :markdown) and get an error saying 'unable to figure out *package* for object :(
[21:33:16] <etimmons> q3cpma: PAX handles long names quite nicely as well. sparse files is one GNU extension I'm missing (in the high-level wrapper, at least). But it should be too difficult to add
[21:33:28] <etimmons> s/should/shouldn't/
[21:33:29] <Josh_2> But now I have seen your example site I am even more enthused by that doc builder
[21:34:53] <q3cpma> etimmons: yeah, I'm mixing things up, the problem I had were with the only pax utility (mirBSD pax), and not the format itself
[21:35:01] <etimmons> Josh_2: Huh, that's weird. I'll try to work through the example and see if I can see what's up
[21:35:14] <Josh_2> If you would that would be great :)
[21:35:37] <yitzi> q3cpma: Did you try sbcl with --no-userinit to do that benchmark? For me it takes it from ~4s to about ~.5s
[21:36:10] *** Quits: jkordani (~Guest17@c-69-255-2-251.hsd1.md.comcast.net) (Quit: Client closed)
[21:37:12] <etimmons> Josh_2: I was using mgl-pax for a while and really wish the 40ants stuff wasn't forked and was instead merged into mgl-pax.
[21:37:52] <q3cpma> yitzi: didn't change anything, I don't actualy have a ~/.sbclrc
[21:37:53] <etimmons> Josh_2: But I think there was some strong differences of opinion and I really like being able to load my documentation tool *without* also loading ironclad, so 40ants it is
[21:38:32] <q3cpma> yitzi: Also, when you say 4s, is it with the bible, or the bible cat'ed 10 times?
[21:38:36] <yitzi> Are you loading quicklisp?
[21:38:54] <q3cpma> Here, I get 3.6s for x10 and 0.6 for x1
[21:39:15] <q3cpma> Yes, I'll try a simple (require :cl-ppcre)
[21:39:23] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[21:39:40] *** Joins: Arcsech (~user@c-98-245-9-17.hsd1.co.comcast.net)
[21:39:46] <yitzi> It was just once with their simple.lisp ... in any case my point was that the startup code to load quicklisp/clpm can be significant.
[21:39:50] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[21:40:20] <q3cpma> Yes, I'm seeing it
[21:40:31] <Josh_2> etimmons: I have never used mgl-pax.. or any doc generating tool for that matter
[21:40:37] <Josh_2> ofcourse I am trying to change that
[21:40:52] <q3cpma> I don't actually know how to load cl-ppcre without QL =(
[21:43:05] *** Joins: john__ (~john@dynamic-077-009-117-135.77.9.pool.telefonica.de)
[21:43:17] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 264 seconds)
[21:44:07] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[21:44:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:45:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:49:31] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[21:50:27] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[21:50:31] <q3cpma> yitzi: I gained <0.1s by using (asdf:load-system "cl-ppcre"), is it the way to do it?
[21:50:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[21:51:10] <Bike> i think yitzi means the time advantage of not loading quicklisp at all. using ql:quickload isn't really going to be much slower if you already have it downloaded, since it just does asdf:load-system anyway
[21:52:05] <q3cpma> Oh, of course
[21:52:08] <yitzi> Correct. It might not make much of a difference since they are dumping an image and then executing that.
[21:53:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:54:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:54:48] <q3cpma> I get 0.35 and 3.5s now
[21:55:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:55:24] <q3cpma> Guess I'll stop now
[21:56:50] <q3cpma> Thanks for helping me again, I'll come back another time to at least try to bridge the gap with Slowthon =)
[21:59:34] *** Quits: q3cpma (~q3cpma@176-136-178-80.abo.bbox.fr) (Quit: leaving)
[21:59:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[22:11:59] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:15:03] *** Quits: cosimone (~user@93-47-229-220.ip115.fastwebnet.it) (Ping timeout: 265 seconds)
[22:21:00] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:36:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:45:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[22:52:00] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[22:53:01] *** Quits: copec (~copec@schrodbox.unaen.org) (Read error: Connection reset by peer)
[22:53:19] *** Joins: copec (~copec@schrodbox.unaen.org)
[22:55:29] *** Joins: akoana (~ah@user/akoana)
[22:56:06] <etimmons> Josh_2: I just tried the example. Only problem I ran into was I needed to add the package to the section name in the call to `render-to-string` (so `foo-random::@foo-random-manual`).
[22:56:32] <etimmons> I'm also using the latest version from git, so it's possible he fixed something
[22:58:50] *** Joins: cosimone (~user@93-47-229-220.ip115.fastwebnet.it)
[23:00:42] <Josh_2> What did you quickload?
[23:01:48] <Josh_2> I am still getting an error
[23:01:53] <etimmons> Josh_2: I did the equivalent of cloning <https://github.com/40ants/doc> and <https://github.com/40ants/commondoc-markdown> to local projects, and then `(ql:quickload :40ants-doc-full)`
[23:01:55] <Josh_2> perhaps I should try the version straight from github
[23:02:30] <Josh_2> aah
[23:02:32] <Josh_2> there we go
[23:02:45] <Josh_2> ql:quickload ..doc-full worked
[23:03:34] <etimmons> ahhh, yeah. now I see that's less clear in the readme than I thought
[23:03:47] <etimmons> Your system should depend on 40ants-doc
[23:04:00] <etimmons> but when you go to generate the documentation, you need to load 40ants-doc-full
[23:04:15] <Josh_2> Thats what I was quickloading, I'd then realize I obviously need builder and ignored-words
[23:04:26] <Josh_2> so I'd pull those in, but no obvious mention of full
[23:05:52] <Josh_2> Now it is working I suppose I can actually make use of it
[23:06:32] <Josh_2> Thanks for doing that etimmons
[23:07:43] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[23:09:07] <etimmons> Josh_2: Happy to help!
[23:11:50] <jmercouris> beach: for WSCL I think something should be said about PSETF
[23:12:06] <jmercouris> Josh_2 pointed it out, and macroexpanding it leads me to see that the documentation is very misleading
[23:12:10] <jmercouris> there is nothing parallel abou tit
[23:13:26] <Bike> you mean in that the value forms are evaluated in a specific order?
[23:13:36] <_death> it sets the bindings in parallel (rather than sequentially).. maybe you're conflating several meanings of the word
[23:13:48] <Bike> because i think that's pretty clear from the existing text
[23:13:58] <Bike> "More precisely, all subforms (in both the place and newvalue forms) that are to be evaluated are evaluated from left to right"
[23:14:18] <_death> compare (let ((a 4) (b 2)) (psetf a b b a) (list a b)) with s/psetf/setf
[23:14:56] <jmercouris> I still don't see how the bindings are set in parallel
[23:15:04] <jmercouris> looking at this macroexpansion I see two operations in series
[23:15:15] <jmercouris> first a let*, and then two setq forms
[23:15:38] <jmercouris> what part is in parallel?
[23:15:54] <mfiano> First you have to define what _you_ mean by "parallel".
[23:16:01] <mfiano> It seems not what the standard means
[23:16:03] <jmercouris> I mean occuring simultaneously
[23:16:12] <_death> a is set to the value of b, and b to the value of a "at the same time"
[23:16:13] <jmercouris> I don't think there is a disputable definition of parallel
[23:16:15] <mfiano> That is not the only definition, nor what the standard means.
[23:16:23] <jmercouris> but it is not "at the same time"
[23:16:28] <jmercouris> I don't know, seems wrong to me
[23:16:34] <jmercouris> if we contrive parallel to mean not parallel, then fine
[23:16:36] <jmercouris> it's valid
[23:16:38] <mfiano> parallel is not a temporal term
[23:16:48] <_death> it is.. before: a=4,b=2 and after b=4,a=2
[23:16:57] <jmercouris> fair enough, but we are usually discussing in the context of the fourth dimension
[23:16:59] <Bike> as far as the programmer is concerned, they can take place at the same time. there's no way to determine what order they take place in, if any.
[23:17:01] <jmercouris> it seems a fair assumption for the reader
[23:17:53] <_death> with setf, it would be: (i) set a to the value of b (a=2,b=2) (ii) set b to the value of a (a=2,b=2)
[23:18:37] <Bike> for example, if your macroexpansion happened to expand to the two setqs in a different order, or starting two threads that do the setq and then joining them, you'd never know
[23:18:51] <jmercouris> OK, I see now
[23:19:07] <jmercouris> I'm probably not the first, or last person to get confused by this
[23:20:06] <mfiano> Probably :)
[23:20:23] <mfiano> It is a nice tool and I reach for it a lot in my math codes
[23:24:05] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 246 seconds)
[23:32:52] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 265 seconds)
[23:36:28] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:45:31] *** Joins: Guest17 (~Guest17@c-69-255-2-251.hsd1.md.comcast.net)
[23:46:02] *** Guest17 is now known as jkordani
[23:46:21] *** Joins: yewscion (~yewscion@2604:ca00:120:9922::1260:59b)
[23:48:48] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[23:49:20] *** Joins: frgo (~frgo@p200300deef0cee00a9623ade2171aa79.dip0.t-ipconnect.de)
[23:57:01] *** Joins: molson__ (~molson@2001-48F8-704A-CA1-0-0-75F-104A-static.midco.net)
[23:59:47] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1043-static.midco.net) (Ping timeout: 246 seconds)
