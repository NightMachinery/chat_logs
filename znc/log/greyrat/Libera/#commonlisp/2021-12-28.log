[00:00:04] *** Quits: Colt (~Colt@user/colt) (Read error: Connection reset by peer)
[00:04:58] *** Joins: miique (~miique@181.46.139.166)
[00:12:13] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Quit: WeeChat 3.3)
[00:14:57] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[00:21:17] *** Quits: amb007 (~a_bakic@87.116.175.49) (Ping timeout: 240 seconds)
[00:21:25] *** Joins: amb007 (~a_bakic@109.245.225.179)
[00:21:26] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[00:29:30] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[00:31:29] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Quit: WeeChat 3.3)
[00:32:58] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[00:37:26] *** Quits: ajoberstar (~user@97-116-72-197.mpls.qwest.net) (Ping timeout: 260 seconds)
[00:42:44] *** Quits: rito_ (~rito_gh@45.112.243.219) (Quit: Leaving)
[00:46:07] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:49:07] *** Quits: tyson2 (~user@cpe9050cac49283-cm9050cac49280.cpe.net.fido.ca) (Remote host closed the connection)
[00:54:23] *** Quits: Xach (~xach@66-63-89-62.static.suscom-maine.net) (Changing host)
[00:54:23] *** Joins: Xach (~xach@user/xach)
[00:54:23] *** ChanServ sets mode: +o Xach
[00:57:42] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[01:01:02] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[01:01:11] *** Joins: ajoberstar (~user@97-116-72-197.mpls.qwest.net)
[01:01:40] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Read error: Connection reset by peer)
[01:02:11] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[01:22:35] *** attila_lendvai_ is now known as attila_lendvai
[01:23:55] *** Joins: jpl01 (~user@2001:16b8:4999:f800:7b91:e372:dbda:53a8)
[01:37:30] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[01:38:27] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[01:38:42] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[01:41:23] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:ddc:8433:77f4:fe8d)
[01:42:07] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 250 seconds)
[01:45:46] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Quit: WeeChat 3.3)
[01:50:18] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[01:52:35] *** Joins: Alfr (~Alfr@user/alfr)
[01:54:07] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[01:57:39] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[01:58:37] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Ping timeout: 240 seconds)
[02:00:18] <mfiano> VincentVega: I haven't really considered it, and I'm not sure it would be a good idea, as the numerator/denominator could end up very large and thus be consed as a bignum for all the intermediate calculations in a chain of operations.
[02:01:23] <mfiano> Plus, GPU's expect floating point arrays, particularly composed of single-floats, since double-floats are a serious performance trap for GPU calculations.
[02:01:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:02:06] <mfiano> I would also be surprised of specialized rational arrays were not upgraded to T on every implementation
[02:02:11] <mfiano> s/of/if/
[02:04:09] <mfiano> Performance aside, I don't think it would be very difficult to add with this generic protocol.
[02:07:11] *** Quits: cosimone (~user@93-47-231-248.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[02:07:15] <madnificent> I'm seeing some behaviour I don't grok.  I have a parameter containing a hash-table.  I create a bunch of scanners using #'cl-ppcre:create-scanner for later use at runtime and I try to store them in that hash-table.  When doing so, I'm exhausting the heap.  It's a dolist with a (setf gethash).  How would this land on the heap?
[02:08:01] <hayley> The hash table is allowed to resize. And CL-PPCRE creates a chain of closures which allocates.
[02:09:59] <madnificent> hayley: The heap contains all closures and I'm exhausting space for any function definition?
[02:10:49] <madnificent> These are fixed, so if I could define them another way, that'd work too.
[02:10:50] <hayley> "the heap" being all memory Lisp is allowed to use for storing objects?
[02:11:00] <mfiano> You can use (room t) to see the breakdown of dynamic space usage by type on SBCL at least.
[02:11:19] <mfiano> and the default heap size is very low on SBCL at least
[02:11:33] <madnificent> mfiano: good point
[02:11:55] <hayley> You are aware that April fool's day is in April?
[02:12:34] <mfiano> Note that, even specifying a heap size of all of your RAM, that isn't going to be allocated unless it needs it. I typically use 3/4 or so
[02:12:42] <mfiano> (SBCL that is)
[02:12:43] <White_Flame> hayley: no it's not, that's just an april fool's joke
[02:12:54] <hayley> :<
[02:14:34] <madnificent> Somewhat before creating too many scanners, I'm at 500Mb dynamic space.  Almost all of that are simple-array-fixnum objects (only 74 of them?)
[02:15:31] <hayley> What kinds of REs are you compiling?
[02:16:43] <madnificent> hayley: I first compile a bunch of more complex ones (everything is fine there though).  It starts failing when creating many case-insensitive word matches, basically.
[02:18:07] <madnificent> okay.  Let's read the docs for *use-bmh-matchers* again and for (setf *optimize-char-classes* :charmap).  Disabling those two makes sbcl happy.
[02:19:28] <madnificent> Well, *use-bmh-matchers* kind-of says it: use the (fast but large) Boyer-Moore-Horspool matchers.
[02:20:18] <madnificent> Still confused as to why it crashes with under 700Mb of used space.
[02:20:18] <hayley> Ah yeah, those would give you large fixnum tables.
[02:21:14] <madnificent> Oh right, staring at the numbers again, I must have overlooked that.  That's 971Mb of simple-array-fixnum content.
[02:21:32] <madnificent> Thank you all for the help.  Glad to be seeing some lisp again.
[02:24:14] <mfiano> Sure enjoy, and yeah definitely bump up your heap size if you have more than 2G of RAM or so :)
[02:24:49] <madnificent> Ah, for the scrollback: we're running these things on machines with 256Gb of ram.  There's some wiggle room for sure :P
[02:25:21] <hayley> gigabits?
[02:25:23] <mfiano> Well 256Gb is only 32G :P
[02:25:40] <madnificent> you're right, but wrong too.  Hmmmm....  it's GB.
[02:25:57] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[02:26:01] <madnificent> though there's wiggle room with 32GB too! :P
[02:26:25] <mfiano> You I have 64 on this machine and heap at 48G, though usually never even 1/8 of that used
[02:26:48] <mfiano> But on ocassion I create incredibly large arrays and don't want to lose my image
[02:28:16] <madnificent> Looking at the earlier discussion on GPUs: I recall "doing" deep learning on a CPU with Common Lisp somewhere 2006-2010 and it was terrible for various reasons (most being me).  Is GPU support (preferably AMD) here now for these cases?  Is that a pipe dream?
[02:29:01] <mfiano> I don't do too much GPGPU stuff, nor have I used an AMD. |3b| might be one to ask.
[02:29:10] <hayley> eazy-opencl usually doesn't blow up on meâ„¢, and GPGPU on AMD works fine.
[02:29:23] <hayley> e.g. https://github.com/no-defun-allowed/simulation-and-simulacra
[02:29:57] * |3b| hasn't done any gpgpu outside graphics in a long time (and not even much of that lately), so hands the question to hayley
[02:30:08] <mfiano> :)
[02:30:17] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 240 seconds)
[02:30:36] *** Quits: ajoberstar (~user@97-116-72-197.mpls.qwest.net) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[02:30:44] <madnificent> Oh, that would be a good case to test my graphics card on.
[02:30:49] <VincentVega> mfiano: I was entertaining the idea of an infinite sheet and a relatively small amount of objects, so it's not really for immediate gpu consumption. I haven't yet decided how badly I want infinity though... But yeah, I am getting the hang of the codebase so far, I think.
[02:32:06] <mfiano> VincentVega: Great. I am sort of on break this week, so I can't be of much help unfortunately. But if you come up with something, send a PR or open issues or whatever. I'd love to see what you come up with.
[02:32:07] <|3b|> VincentVega: trying to use rationals in generic graphics code is probably not going to work well even without considering the size problems, too many operations require irrationals :/
[02:33:19] <mfiano> That is also a good point
[02:33:27] <VincentVega> 3b: yeah, true! But an occasional irrational doesn't take away the infinity...
[02:33:47] <|3b|> it does if a double-float in a transform matrix infects everything else :)
[02:33:48] <VincentVega> mfiano: cool, thank you, if I come up with something good, I will make sure to send a PR
[02:34:51] <VincentVega> 3b: yeah that would take some care or type coercion to avoid I guess
[02:35:03] <VincentVega> hell, infinity is hard
[02:35:10] <|3b|> nah, infinity isn't actually that hard
[02:35:41] <|3b|> just need to respecify it as finite regions around and infinite grid
[02:36:13] <|3b|> subtract out the infinity and dump that in a bignum, then do the rest in single-floats or whatever
[02:36:20] <mfiano> is this for the ray tracer?
[02:36:25] <mfiano> or was that someone else?
[02:36:44] <VincentVega> nah, it can be pretty hard, man, I took real analysis and everything there is about screwing around with infinity in some way
[02:37:01] <VincentVega> mfiano: gui
[02:37:04] * |3b| meant "computer graphics infinity" not "math infinity" :p
[02:37:13] <mfiano> ah
[02:37:19] <VincentVega> 3b: I understand : )
[02:38:51] <|3b|> though i guess there is also the question of whether you want infinitesimal in addition to infinite, that's a bit more work than just chopping off the bignum part
[02:40:07] <|3b|> gui is possibly in an easier subset of "graphics" for using rationals though, can do a lot of gui without rotations for example
[02:40:37] <VincentVega> 3b: I guess so, yeah. The edge cases, huh.
[02:41:18] <VincentVega> 3b: gui isn't supposed to be very hard or anything, sure
[02:41:29] <mfiano> famous last words
[02:41:29] <VincentVega> * gui graphics
[02:41:48] <VincentVega> sounds about right : D
[02:51:11] *** Quits: pve (~pve@176-93-78-104.bb.dnainternet.fi) (Quit: leaving)
[03:15:08] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:ddc:8433:77f4:fe8d) (Ping timeout: 252 seconds)
[03:15:19] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1067) (Remote host closed the connection)
[03:17:39] *** Joins: Jing (~hedgehog@2604:a840:3::1067)
[03:22:26] *** Joins: igemnace (~ian@user/igemnace)
[03:22:52] *** Alfr is now known as Guest6901
[03:22:57] *** Joins: Alfr (~Alfr@user/alfr)
[03:25:57] *** Quits: Guest6901 (~Alfr@user/alfr) (Ping timeout: 256 seconds)
[03:26:14] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[03:26:50] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[03:33:44] *** Parts: VincentVega (~user@212.97.4.33) (ERC (IRC client for Emacs 27.2))
[03:36:14] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[03:37:57] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:40:41] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[03:52:50] *** Joins: fmakuncertain (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[03:53:54] <Spawns_Carpeting> should my systems depend on uiop or asdf?
[03:54:01] <Spawns_Carpeting> or are those implicit
[03:58:33] <hayley> ASDF is implicit, UIOP not (in my opinion).
[04:03:56] <yitzi> UIOP should not be implicit, but I thought there was problems including at as a dependency.
[04:06:03] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:06:09] *** Joins: beatastic (~beatastic@75.76.13.155)
[04:06:54] <hayley> I don't think I've had any before.
[04:09:01] <yitzi> Yeah, I looked through the logs I just found etimmons talking about how the fact the systems are not consistent about depending on it makes it difficult for asdf or something like that.
[04:09:20] *** Parts: beatastic (~beatastic@75.76.13.155) ()
[04:12:35] <etimmons> I'd recommend explicitly depending on UIOP if you use it.
[04:14:35] <etimmons> The issue yitzi is thinking of is a combo of a bug in UIOP, some decisions made by QL and ASDF folks, and devs being inconsistent in dependency declarations
[04:14:41] *** Quits: fmakuncertain (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Ping timeout: 256 seconds)
[04:15:08] <etimmons> resulted in weird bugs with fasls containing a bad macro expansion
[04:16:04] <yitzi> So explicitly depending on UIOP fixes or at least minimizes the issure?
[04:18:12] <etimmons> Yep
[04:18:48] <yitzi> Awesome, thanks etimmons!
[04:19:34] *** Quits: jpl01 (~user@2001:16b8:4999:f800:7b91:e372:dbda:53a8) (Remote host closed the connection)
[04:22:44] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: ERC (IRC client for Emacs 27.2))
[04:27:50] <etimmons> Although, adding that dep could break things if any of your other deps use uiop:define-package without a dependency on uiop
[04:28:17] <etimmons> If that happens, the best bet is probably to quickload uiop before anything else
[04:37:30] <sm2n> also, if you use ecl's asdf build extension, your code that uses uiop won't work unless you explicitly depend on it
[04:42:44] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:53:29] <Spawns_Carpeting> is there a keyword to break out of a loop macro lop
[04:53:31] <Spawns_Carpeting> loop*
[04:54:27] <Xach> Spawns_Carpeting: RETURN, sort of
[04:55:22] <|3b|> LOOP-FINISH ?
[04:55:42] <rotateq> Spawns_Carpeting: I do it most times using the NAMED keyword and then FINALLY with a RETURN-FROM and the block name
[04:55:51] <|3b|> not part of LOOP syntax though, if that's what you are looking for
[04:56:57] <Xach> more context would help
[04:58:01] <Spawns_Carpeting> i am attempting to write a little function that splits a string on delimiter, but I can't seem to get the loop to return correctly
[04:58:35] <Spawns_Carpeting> i would like to be able to break out of the code in a "do"
[04:58:57] <Catie> Could always THROW/CATCH
[04:59:45] <rotateq> okay Spawns_Carpeting, do you have it maybe on a pasteboard to look at? :)
[05:00:05] *** Joins: fmakuncertain (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[05:00:34] <rotateq> And you can use SPLIT from the STR system if you want.
[05:02:41] <rotateq> Before you need something more complex achievable with CL-PPCRE or such.
[05:03:16] <Xach> Spawns_Carpeting: what do you have so far?
[05:03:26] <hayley> STR:SPLIT just calls into CL-PPCRE anyway.
[05:04:04] <rotateq> hayley: I just close my eyes and ears. :D lalala
[05:04:34] <Spawns_Carpeting> https://bpa.st/73ZA
[05:04:37] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[05:05:00] <Spawns_Carpeting> sorry my internet keeps going out, may take time for me to respond
[05:05:10] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[05:05:40] *** Joins: amb007 (~a_bakic@109.245.225.179)
[05:06:29] <|3b|> looks like that should exit the loop (possibly at the wrong time?) and you just want to return LIST from the let*
[05:07:03] <Xach> Spawns_Carpeting: are you interested in general feedback, beyond just the returning a value bit?
[05:07:08] <Spawns_Carpeting> thats a good idea, and sure Xach
[05:07:17] <|3b|> actually, you also want to store things into LIST before returning it
[05:07:51] <Xach> Spawns_Carpeting: appending to a list repeatedly can be slow. loop's COLLECT is usually a better option in that situation.
[05:08:19] <Xach> Spawns_Carpeting: also, (subseq string pos) is equivalent to (subseq string pos nil)
[05:09:19] <Spawns_Carpeting> i couldn't figure out how to get this to work with collect and still collect the last substr after search returns nil
[05:09:35] <Spawns_Carpeting> i will try to figure that part out
[05:09:37] <|3b|> test for last search returning NIL after collecting it
[05:11:10] <|3b|> also, i'd probably prefer () or NIL over (list)
[05:11:55] <|3b|> and you can let LOOP update POS for you, (loop for pos = 0 then i for i ...)
[05:16:16] <Spawns_Carpeting> how does "then" work?
[05:16:32] <Spawns_Carpeting> the lisp cookbook thing only has a tiny little section on that
[05:16:45] <Spawns_Carpeting> it seems to make it alternate between two values on every iteration
[05:18:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:18:29] <|3b|> THEN is optional part of FOR = syntax. "FOR x = form1 THEN form2" sets X to result of evaluating FORM1 on first iteration and to result of evaluating FORM2 on subsequent iterations
[05:18:55] <Spawns_Carpeting> oh I see now
[05:18:58] <Spawns_Carpeting> very handy
[05:19:05] <|3b|> so FOR POS = 0 THEN I sets POS to 0 on the first iteration, then to the current value of I on later iterations
[05:19:26] <|3b|> and since it is before the FOR I ..., it sees the value of I from previous iteration
[05:23:50] <Spawns_Carpeting> this is what I ended up with now https://bpa.st/IQSA
[05:24:33] <|3b|> i think WHILE isn't legal there, so you should put WHILE I at the end instead
[05:25:36] <|3b|> and if you are using SEARCH because you want to accept arbitrary strings as delimiters, you should skip by length of delimiter. if not, you might want POSITION instead
[05:26:18] <Spawns_Carpeting> whats the difference between position and search?
[05:26:37] <Spawns_Carpeting> i do want delimiters to be able to be of any length
[05:27:02] <hayley> POSITION finds one element, e.g. #\Space, SEARCH finds a sub-sequence, e.g. "foo"
[05:27:03] <|3b|> search looks for a sequence as a subsequence of another. position would find a single element in a sequence
[05:27:25] <|3b|> ok, sounds like you want search then
[05:28:45] <Spawns_Carpeting> thanks for the help btw, I added (+ i (length delimiter) as well and it seems to work great
[05:29:12] <Spawns_Carpeting> i realize there is uiop:string-split and ppcre split but I wanted to practice my lisp
[05:29:53] <Spawns_Carpeting> why is collect faster than appending to a list by the way? does it have some special optimization
[05:29:59] <Spawns_Carpeting> that is good to know
[05:30:14] <|3b|> might want to check for empty delimiter so that doesn't loop infinitely
[05:30:55] <Xach> Spawns_Carpeting: it generally keeps track of the tail of the list so it does not have to traverse from the beginning each time
[05:32:44] <|3b|> append has to duplicate all but the last list, so accumulating N items with append copies on average 1/2 N elements for every element you add, so O(n^2)
[05:33:18] <|3b|> collect can be expected to do something efficient internally, so should be O(1)
[05:33:23] <|3b|> O(N) i mean
[05:35:18] <|3b|> when accumulating a list like that manually, it is fairly common to accumulate with PUSH or CONS (which adds to beginning of a list without any copying), and then REVERSE or NREVERSE it at the end, which is N operations to build the list, and N to reverse it, so also O(N)
[05:39:16] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[05:39:57] *** Joins: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs)
[05:46:11] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 245 seconds)
[05:46:42] <Spawns_Carpeting> very interesting
[05:47:33] *** Joins: akoana (~ah@user/akoana)
[05:51:36] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 245 seconds)
[05:54:05] <rotateq> Spawns_Carpeting: You could also additionally consult the chapters in Practical Common Lisp and Common Lisp Recipes about LOOP. :)
[05:54:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:55:04] *** Joins: hubvu (sid495858@user/hubvu)
[06:11:50] *** Joins: jstoddard (~user@2600:8801:a400:5a00::b3e3)
[06:26:45] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[06:50:47] *** Quits: fmakuncertain (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Remote host closed the connection)
[06:51:07] *** Joins: fmakuncertain (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[06:54:49] <Spawns_Carpeting> is practical common lisp a free book rotateq
[06:55:02] <hayley> minion: tell Spawns_Carpeting about pcl
[06:55:03] <minion> Spawns_Carpeting: look at pcl: pcl-book: "Practical Common Lisp", an introduction to Common Lisp by Peter Seibel, available at http://www.gigamonkeys.com/book/ and in dead-tree form from Apress (as of 11 April 2005).
[06:55:04] <Spawns_Carpeting> there were a few books I was interested in but many of them cost a decent bit
[06:57:39] *** Quits: fmakuncertain (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Quit: disconnected)
[07:13:08] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[07:13:16] <White_Flame> there's a few officially free books, PAIP is another
[07:13:56] <White_Flame> On Lisp as well
[07:14:06] <White_Flame> although PCL is certainly newer than those
[07:22:35] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:23:28] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:25:19] <huckleberry> does anyone here have experience with (ql:quickload :cl-opengl) using 3.0+ GL? can I rely on it enough that it's shippable?
[07:29:42] <|3b|> should be, at least as much as anything GUI related on lisp
[07:30:15] <beach> Good morning everyone!
[07:30:15] <|3b|> (so expect apple to break things as often as possible for example)
[07:35:51] <huckleberry> osx graphics programming is an endless game of CVE whack-a-mole
[07:36:24] <huckleberry> okay, thanks, I'll try it out
[07:37:18] <markasoftware> mornin'
[07:39:08] <|3b|> note that the high-level wrapper part of cl-opengl (the GL package) has some parts that are old,poorly designed, and/or not a good fit for "modern" opengl, so you might need to use the low-level parts in %GL which are just direct bindings to the C API
[07:41:16] <|3b|> but as far as i know, pretty much everyone (that i've noticed on IRC) is using cl-opengl for GL
[07:41:50] <|3b|> how you get a window+context to use GL with has a bit less agreement :)
[07:43:21] * |3b| can't help with that, since the options i use (glop/glop2 and cl-glut) are probably bad choices. cl-sdl2 seems popular, and possibly some use glfw bindings
[07:43:38] *** Joins: alfonsox (~quassel@103.92.42.161)
[07:46:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[07:49:53] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:50:59] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:57:57] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 240 seconds)
[08:01:55] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[08:03:02] *** Joins: semz (~none@user/semz)
[08:05:15] *** Joins: amk (~amk@109.255.169.126)
[08:06:26] <huckleberry> hurrrgh. i do not like how difficult it is to find non-trivial lisp applications that use opengl
[08:06:48] *** Quits: Catie (~user@user/catie) (Quit: sQuit)
[08:36:13] *** Quits: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723) (Read error: Connection reset by peer)
[08:40:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[09:09:39] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:10:26] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Ping timeout: 252 seconds)
[09:12:33] *** Quits: jstoddard (~user@2600:8801:a400:5a00::b3e3) (Quit: ERC (IRC client for Emacs 27.1))
[09:16:04] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Quit: disconnected)
[09:19:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[09:19:56] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Client Quit)
[09:20:19] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[09:20:39] *** Alfr is now known as Guest5028
[09:20:43] *** Joins: Alfr (~Alfr@user/alfr)
[09:22:23] *** Quits: Guest5028 (~Alfr@user/alfr) (Ping timeout: 256 seconds)
[09:51:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:55:49] *** Joins: zacque (~zacque@175.139.232.25)
[09:58:01] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[09:58:50] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[10:03:09] *** Joins: notzmv (~zmv@user/notzmv)
[10:13:44] <Spawns_Carpeting> how can setf tell the difference between (setf 1 2) and (setf (car list) 2)
[10:14:18] <Spawns_Carpeting> or a better question, does (car list) return some sort of special reference where (1) evals to the number 1?
[10:14:49] <Spawns_Carpeting> i am curious how set works compared to the = operator in c like languages, or compared to how r and l values work
[10:15:26] <hayley> No reference is returned.
[10:16:14] <hayley> Instead (setf (car list) 2) could expand to e.g. (funcall #'(setf car) 2 list) which performs the modification. Or it could expand to some other form.
[10:16:53] <hayley> But generally SETF expands to a call to a function that modifies the object.
[10:17:11] <Spawns_Carpeting> oh thats really interesting, not what I had imagined
[10:20:11] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[10:21:24] <Spawns_Carpeting> in elisp it ends up calling a setcar or setcdr function it looks like. very interesting
[10:35:16] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:ddc:8433:77f4:fe8d)
[10:39:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[10:39:48] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:ddc:8433:77f4:fe8d) (Ping timeout: 240 seconds)
[10:42:41] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[10:43:37] <phoe> hayley: well
[10:43:54] <phoe> I don't think that's right
[10:44:01] <phoe> in the general case SETF can expand to anything, as long as NEWVAL is returned
[10:45:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:45:41] <phoe> like, I don't think (setf (getf x 42) 24) is a case less general than (setf (car x) 42)
[10:46:36] <phoe> Spawns_Carpeting: "how can setf tell the difference between (setf 1 2) and (setf (car list) 2)" - SETF is a macro and it has access to its unevaluated arguments, and therefore it can see that it needs to set a CAR and expand accordingly
[10:47:08] <phoe> and for comparison with elisp, it can expand into a RPLACA call, which is CL's way of saying SETCAR
[10:52:12] *** Joins: taiju (~taiju@61.127.163.30)
[11:06:36] *** Quits: taiju (~taiju@61.127.163.30) (Ping timeout: 268 seconds)
[11:08:57] *** Joins: pve (~pve@188-67-159-68.bb.dnainternet.fi)
[11:13:41] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[11:18:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:20:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[11:21:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:22:22] *** Quits: zacque (~zacque@175.139.232.25) (Quit: Goodbye :D)
[11:26:22] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:27:45] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:37:00] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.3)
[11:50:57] *** Joins: treflip (~user@user/treflip)
[11:52:45] *** Joins: attila_lendvai_ (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[11:52:47] *** Quits: attila_lendvai_ (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Remote host closed the connection)
[11:54:33] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[11:57:29] *** Joins: cosimone (~user@93-47-231-248.ip115.fastwebnet.it)
[11:59:04] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[11:59:24] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[12:02:20] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[12:15:19] *** Joins: attila_lendvai_ (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[12:15:37] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 240 seconds)
[12:30:43] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e3:b2d2:b548:1df5:e1e2:5df1)
[12:32:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[12:32:55] <pjb> Spawns_Carpeting: (atom '1) #| --> t |# (atom '(car list)) #| --> nil |#  this is how setf distinguishes them.
[12:33:27] <pjb> Spawns_Carpeting: then it further distinguishes (symbolp '1) #| --> nil |#  (symbolp 'x) #| --> t |#  between (setf 1 2) and (setf x 2).
[12:34:31] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 245 seconds)
[12:36:39] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[12:39:48] <beach> Spawns_Carpeting: So places are not first-class objects in Common Lisp.  Which is important when someone utters "in Common Lisp, everything is an object", and places are not objects.
[12:42:59] *** Quits: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[12:43:17] *** Joins: amb007 (~a_bakic@109.245.225.179)
[12:49:09] *** Quits: attila_lendvai_ (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Quit: Leaving)
[12:49:09] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[12:49:24] *** Joins: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs)
[12:52:03] <jackdaniel> "From what the programmer can empirically observe every CL form returns a value or signal a condition" doesn't seem to convey the message though
[12:52:58] <beach> Where did you quote that from?
[12:53:06] <hayley> A CL form can also loop indefinitely.
[12:53:27] <jackdaniel> beach: I've came up with that on the spot
[12:53:56] <beach> So no wonder it doesn't convey the message. :)
[12:53:59] <jackdaniel> hayley: empirically you can't observe whether it ends or not, it is indefinite observation
[12:55:25] <jackdaniel> beach: I'm still waiting for a better description of the phenomena often /incorrectly/ dubbed as "everything returns a value" in common lisp
[12:56:48] *** Joins: nature (~nature@45.32.235.173)
[12:58:50] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[13:00:31] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:03:58] <beach> jackdaniel: I see.  I have never seen that claim, though.
[13:04:15] <hayley> (values) ; You're welcome
[13:06:05] <jackdaniel> hayley: thank you, but that is not what I've asked for. still, your effort is much appreciated.
[13:07:27] <jackdaniel> beach: I recall you've criticized such claims on this or #lisp channel a few times; but recollections are often wrong
[13:08:01] <beach> The only one I can remember is the one I cited, i.e. "everything is an object".
[13:08:13] <beach> But what i can remember is of course quite limited.
[13:14:09] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[13:14:39] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:16:59] <edgar-rft> I'm happy that everything in Common Lisp *has* a value, even if not necessarily a value as meant by the ANSI spec :-)
[13:17:33] *** Quits: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[13:17:55] *** Joins: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs)
[13:33:01] *** Quits: Alfr (~Alfr@user/alfr) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[13:33:06] *** Joins: Alfr (~Alfr@user/alfr)
[13:33:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:33:24] <phoe> everything in cl is valuable
[13:33:27] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e3:b2d2:b548:1df5:e1e2:5df1) (Ping timeout: 250 seconds)
[13:35:14] <hayley> "Lisp programmers know the value of everything, and the cost of nothing."
[13:35:53] <phoe> (ql:quickload :cost-of-nothing)
[13:36:04] <hayley> (ql:quickload :the-cost-of-nothing)
[13:36:10] <phoe> oh :(
[13:36:38] <hayley> (saw-in-half #'the-cost-of-nothing:bench)
[13:36:47] *** Joins: dnaeon (~dnaeon@user/dnaeon)
[13:36:47] <jackdaniel> Citius, Altius, Fortius
[13:39:17] * hayley is trying to chase down a performance regression today. Is it one-more-re-nightmare? Can't find a commit that goes any faster. Is it SBCL? No evidence for that either. Is the desktop slower today? Hopefully not.
[13:51:07] <hayley> Well, the source is embarrasing. Somehow my frequency scaling governor got set to powersave, and the processor wouldn't exceed 1.5GHz, when it is supposed to run up to 3.2GHz. Now everything is back to normal.
[13:51:42] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[13:52:30] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:54:03] <jackdaniel> as a side benefit the room got warmer by 2Â°C, I'm running cl-test-grid when it gets too cold
[13:54:48] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:55:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:55:02] <hayley> I survived a winter of online classes by running Minecraft with shaders on.
[13:56:06] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e3:b2d2:b548:1df5:e1e2:5df1)
[13:56:07] *** Lord_of_Life_ is now known as Lord_of_Life
[14:04:46] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[14:07:53] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:9885:40d9:5a41:60eb)
[14:07:53] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e3:b2d2:b548:1df5:e1e2:5df1) (Read error: Connection reset by peer)
[14:07:59] *** Quits: dnaeon (~dnaeon@user/dnaeon) (Ping timeout: 252 seconds)
[14:12:56] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:9885:40d9:5a41:60eb) (Ping timeout: 252 seconds)
[14:17:19] *** Joins: linjian (~linj@user/linj)
[14:43:13] <jackdaniel> how would you test with parachute whether executing a form signals a condition?
[14:43:55] <jackdaniel> in 2am and 5am it is SIGNALS
[14:45:38] *** Joins: miique (~miique@181.46.139.166)
[14:45:58] <hayley> FAIL
[14:46:26] <jackdaniel> alright, thanks
[14:56:27] *** Joins: ldb (~user@user/ldb)
[14:56:32] *** Joins: varjag (~user@188.95.247.249)
[15:05:38] *** Joins: rito_ (~rito_gh@45.112.243.151)
[15:21:35] *** Quits: treflip (~user@user/treflip) (Quit: bye!)
[15:22:19] <jackdaniel> Xach: I've moved endsec/scheduler to sharplispers/scheduler - the former organization doesn't operate for some time
[15:34:02] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[15:39:12] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:40:49] *** Joins: random-nick (~random-ni@87.116.180.98)
[15:47:56] *** Quits: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs) (Read error: Connection reset by peer)
[15:49:10] *** Quits: cosimone (~user@93-47-231-248.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[15:49:52] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[15:54:07] *** Joins: amb007 (~a_bakic@109.245.225.179)
[15:58:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[16:03:21] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[16:07:33] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:13:13] *** Parts: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) ()
[16:13:13] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[16:14:20] *** Joins: amb007 (~a_bakic@109.245.225.179)
[16:22:05] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[16:29:05] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[16:29:31] *** Quits: victor_ (sid208353@id-208353.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[16:29:46] *** Joins: montxero (~montxero@1.145.194.51)
[16:31:46] *** Joins: montxero` (~user@1.145.194.51)
[16:33:25] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[16:34:44] *** Quits: montxero (~montxero@1.145.194.51) (Quit: montxero)
[16:34:58] *** Joins: dnaeon (~dnaeon@user/dnaeon)
[16:35:56] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[16:43:42] *** Quits: montxero` (~user@1.145.194.51) (Remote host closed the connection)
[16:43:43] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[16:43:54] *** Joins: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs)
[16:51:03] *** Joins: cosimone (~user@93-47-231-248.ip115.fastwebnet.it)
[16:51:09] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[16:52:17] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[16:52:25] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net)
[16:54:31] *** Quits: dnaeon (~dnaeon@user/dnaeon) (Ping timeout: 245 seconds)
[16:57:34] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Ping timeout: 265 seconds)
[16:58:59] <nij-> CLOS is great. But is there any thing that it misses that I should pay attention to?
[17:00:12] <jackdaniel> modesty ,)
[17:06:16] *** Joins: dnaeon (~dnaeon@46.10.222.189)
[17:06:16] *** Quits: dnaeon (~dnaeon@46.10.222.189) (Changing host)
[17:06:16] *** Joins: dnaeon (~dnaeon@user/dnaeon)
[17:07:08] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:08:17] <phoe> nij-: CLOS doesn't miss things, CLOS makes it possible to extend itself via implementing them
[17:10:51] <nij-> That's great :) CL doesn't miss things and allows users to extend itself. However, there was a time when amazing extensions (e.g. ASDF, QUICKLISP, CLIM.. etc) did not exist. I wonder if there are some great extensions of CLOS that haven't come to existence yet.
[17:11:01] <_death> nij: take a look at frame systems of the past.. in some ways they are more general than OO, e.g., they support links other than "is-a", slots can have multiple values (called facets), etc.
[17:12:55] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[17:15:03] <_death> they also tend to be more dynamic (sometimes paying the price of efficiency) and makes less of a distinction between classes and objects
[17:18:46] <scymtym> there is also Smalltalk-style MessageNotUnderstood which (i think) can be used, among other things, to implement generic proxy objects that respond to any message without explicit method definitions. even the concept is difficult to express in CLOS terms
[17:19:54] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[17:20:24] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:20:33] <jackdaniel> scymtym: perhaps specializing no-applicable-method on a generic-function metaclass would be a good start?
[17:22:31] <scymtym> jackdaniel: to some extend, maybe. but NO-APPLICABLE-METHOD cannot specialize to the argument classes and multiple such behaviors wouldn't compose
[17:22:55] <_death> if you have a GF where all operations pass through you can have a "message not understood"
[17:24:03] <scymtym> sure, but if i understand correctly, the smalltalk version works for any message without any preparation or convention (i may be wrong)
[17:25:22] <_death> yeah, because the constraints they have chosen enable that
[17:26:10] <phoe> the issue is what is a "message" in CLOS terms
[17:26:22] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[17:26:30] <phoe> an arbitrary GF call? if yes, who is the recipient of that message, if any?
[17:26:32] *** Joins: igemnace (~ian@user/igemnace)
[17:26:48] <phoe> multiple inheritance makes the "recipient" question troublesome
[17:27:24] <scymtym> multiple dispatch, you mean?
[17:27:42] <jackdaniel> hey, no-applicable-method's only method signature is specialized on T. does it mean that I can specialize it on standard-generic-function (i.e add an around method)?
[17:28:09] <jackdaniel> or I got it wrong and I can't specialize any standard function on the standard metaclass?
[17:29:28] <phoe> scymtym: welp, yes, sorry
[17:29:43] <phoe> jackdaniel: the latter, I think
[17:29:51] <phoe> I remember recently running into this issue
[17:30:08] <phoe> CLHS 11.1.2.1.2 point 19
[17:30:12] <phoe> http://www.lispworks.com/documentation/lw71/CLHS/Body/11_abab.htm
[17:30:12] <jackdaniel> thanks
[17:30:38] <phoe> ...but a custom GF would probably be good enough to implement that behavior
[17:30:49] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[17:31:06] <jackdaniel> sure, but if you want to define "universal proxy object", you'd want it to work with functions defined by someone else too
[17:31:07] <phoe> because *then* you could specialize NAM and possibly defer to some kind of other dispatch mechanism that works on the types or classes of the *rest
[17:31:12] <phoe> oh, welp
[17:31:32] <phoe> that would require implementation support then - unless "someone else" also uses that custom GF
[17:31:40] <jackdaniel> oh well, just an exciting thought experiment
[17:31:45] <phoe> I don't think there's a portable way of doing what you describe :(
[17:32:30] <jackdaniel> well, around method and checking args for /your special proxy object/ would suffice to avoid conflicts, but nobody could add another around method :)
[17:32:54] <phoe> obviously, you'd need to provide some other dispatch mechanism then
[17:33:15] <phoe> mostly because you don't even know the length of arguments, so you can't use standard GF dispatch
[17:33:39] <jackdaniel> that's not a problem, you reapply all arguments as they were supplied, but with proxies replaced
[17:33:49] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 240 seconds)
[17:33:51] <jackdaniel> arity doesn't change from the original call
[17:33:57] <phoe> ooh, like that - yes, I see
[17:34:09] <scymtym> going back to original question, CLOS generic functions also cannot do "variable arity specializers". incidentally, having those would probably allow the "universal proxy" thing since you could do (defmethod n-a-m (gf (a1 proxy) &rest r)), (defmethod n-a-m (gf a1 (a2 proxy) &rest r))
[17:42:20] <_death> another interesting set of extensions to CLOS is that of a blackboard system like gbbopen (I mentioned this in private to nij, but may be interesting to others as well)
[17:42:34] <nij-> scymtym: I ran into that problem two times. Recently I found some old (unfinished?) project calling itself predicate dispatch. I don't know yet if that would solve the problem.
[17:43:42] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:46:08] <scymtym> nij-: if the whole object system used predicate dispatch, it would probably enable a solution. predicate dispatch as a user-defined generic function class would still require the kinds of coordination described above
[17:50:55] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:51:35] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[17:56:41] *** Quits: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[17:57:30] *** Joins: amb007 (~a_bakic@109.245.225.179)
[17:58:45] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[18:01:58] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:04:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:04:47] *** Quits: varjag (~user@188.95.247.249) (Read error: Connection reset by peer)
[18:06:28] *** Joins: varjag (~user@188.95.247.249)
[18:07:17] *** Quits: BerntH (~BerntH@cpe0015172156ac-cm20f19e128374.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[18:14:34] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[18:17:19] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[18:18:00] *** Joins: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs)
[18:23:46] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[18:26:34] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 260 seconds)
[18:27:32] *** Quits: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[18:28:24] *** Joins: amb007 (~a_bakic@109.245.225.179)
[18:31:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:31:52] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[18:33:34] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 260 seconds)
[18:39:29] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[18:40:10] <jackdaniel> beach: http://metamodular.com/CLOS-MOP/generic-function-methods-standard-generic-function.html has typo "=> methodss"
[18:40:27] <jackdaniel> also http://metamodular.com/CLOS-MOP/generic-function-methods.html has "=> symbols" instead of "=> methods"
[18:42:05] <beach> jackdaniel: Thank you!
[18:42:19] <jackdaniel> sure
[18:45:13] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[18:48:13] <beach> Fixed.  Thanks again!
[18:48:20] <jackdaniel> no problem
[18:49:19] *** Joins: xaltsc_ (~xaltsc@user/xaltsc)
[18:51:55] *** xaltsc_ is now known as xaltsc
[18:53:16] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[18:55:37] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 240 seconds)
[18:57:55] <jackdaniel> it is a shame that sbcl bypass find-method by using some internal stuff
[19:01:58] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[19:08:08] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[19:08:08] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[19:08:09] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[19:08:48] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Quit: Quit)
[19:09:02] *** Joins: amb007 (~a_bakic@109.245.225.179)
[19:09:17] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[19:09:37] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 240 seconds)
[19:09:46] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:9885:40d9:5a41:60eb)
[19:12:56] *** Joins: Bike (~Bike@71.69.170.70)
[19:12:56] *** ChanServ sets mode: +o Bike
[19:14:08] *** Joins: BerntH (~BerntH@cpe0015172156ac-cm20f19e128374.cpe.net.cable.rogers.com)
[19:15:58] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:17:33] <jackdaniel> this is a fine question: assuming non-standard generic function - compute-applicable-methods-using-classes must be consistent with compute-applicable-methods (that is, when it returns its second value as true, then its first value must be equal to the result of compute-applicable-methods)
[19:17:49] <jackdaniel> does it mean that programmer must define methods for both
[19:18:31] <jackdaniel> or that the implementation can't return t as a second value of c-a-m-u-c when non-standard generic function is called? (because the programmer could have specialized only compute-applicable-methods)?
[19:18:41] <jackdaniel> I'll read answers (if any) later, I'm leaving the office now :)
[19:24:37] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Quit: Quit)
[19:32:02] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Ping timeout: 240 seconds)
[19:33:48] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e3:b2d2:fd85:ebe5:a677:e766)
[19:36:44] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[19:37:32] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:9885:40d9:5a41:60eb) (Ping timeout: 240 seconds)
[19:40:05] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[19:42:20] *** Joins: Catie (~user@user/catie)
[19:52:10] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[19:53:05] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 256 seconds)
[20:02:10] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[20:03:00] *** Joins: amb007 (~a_bakic@109.245.225.179)
[20:03:52] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Ping timeout (120 seconds))
[20:12:12] *** Joins: fazz234234367 (~fazz23423@c-73-235-104-195.hsd1.ca.comcast.net)
[20:16:02] *** Joins: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723)
[20:20:15] *** Joins: Bike (~Bike@71.69.170.70)
[20:20:15] *** ChanServ sets mode: +o Bike
[20:24:32] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[20:30:52] *** Quits: fazz234234367 (~fazz23423@c-73-235-104-195.hsd1.ca.comcast.net) (Quit: Connection closed)
[20:30:53] <phoe> okay, IMAGO now has a sorta decent bicubic interpolation for resizing images
[20:30:57] <phoe> code reviews welcome
[20:31:04] <phoe> https://github.com/tokenrove/imago/pull/10
[20:31:09] *** Joins: fazz234234368 (~fazz23423@c-73-235-104-195.hsd1.ca.comcast.net)
[20:31:29] <phoe> (especially if I made some sort of stupid mistake in the algorithm and there can be more performance easily squeezed out of this thing)
[20:33:18] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[20:35:35] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10e1:639c:fd85:ebe5:a677:e766)
[20:38:15] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[20:38:53] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e3:b2d2:fd85:ebe5:a677:e766) (Ping timeout: 268 seconds)
[20:40:52] <scymtym> i think it would make sense (in terms of performance) to have a generic function (pixel-interpolator image method) that returns a function x y -> pixel-value which closes over the results of WITH-IMAGE-DEFINITION and the type checks. the indirection through INTERPOLATE-PIXEL-CUBIC and interpreting the channel bits also seem like possible bottlenecks
[20:41:39] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[20:41:46] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Remote host closed the connection)
[20:42:15] <phoe> hmmm - I assume that could work, yes
[20:42:30] <phoe> especially the separate interpolator
[20:42:42] <MichaelRaskin> I wouldn't expect there to be a good test suite for such interpolation, as people who care enough might also care enough to expect gammaâ€¦
[20:44:58] <scymtym> also note that alexandria defines the type specifier ALEXANDRIA:ARRAY-INDEX for, well, array indices
[20:45:59] <phoe> I can use that, yes
[20:47:26] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[20:58:37] *** Joins: xsperry (~xs@user/xsperry)
[21:13:46] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[21:16:23] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:18:12] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[21:18:18] *** Quits: alfonsox (~quassel@103.92.42.161) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:33:29] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[21:48:18] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[21:49:13] *** Joins: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs)
[21:51:06] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:53:47] *** Quits: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[21:54:12] *** Joins: amb007 (~a_bakic@109.245.225.179)
[21:58:53] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[21:59:46] *** Joins: amb007 (~a_bakic@87.116.175.42)
[22:03:59] *** Quits: amb007 (~a_bakic@87.116.175.42) (Ping timeout: 256 seconds)
[22:04:19] *** Joins: amb007 (~a_bakic@109.245.225.179)
[22:05:34] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:13:23] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[22:13:38] *** Joins: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs)
[22:17:14] *** Joins: Bike (~Glossina@71.69.170.70)
[22:17:14] *** ChanServ sets mode: +o Bike
[22:33:42] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10e1:639c:fd85:ebe5:a677:e766) (Read error: Connection reset by peer)
[22:34:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:35:39] *** Joins: epony (epony@user/epony)
[22:43:51] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:24:57] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 240 seconds)
[23:46:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:54:29] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
