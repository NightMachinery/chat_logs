[00:00:55] <mst> given the current prototype is at the stage of "mst yells at the interaction of scoping and destructuring bind"
[00:01:37] <mst> logioniz: sorry. I'm happy to try a different explanation but I need to know what words I can use without just being more confusing :D
[00:03:17] *** Joins: khosruw59 (~khosruw@45.137.151.75)
[00:03:31] *** Quits: khosruw (~khosruw@45.137.151.75) (Quit: Client closed)
[00:04:06] <LeoNerd> logioniz: If you explain what you mean by the question "is it stackless?", I'll give you a yes-or-no answer
[00:04:44] <khosruw59> mst sorry because of asking lots of questions, it's the last one: should I use async/await for Models?
[00:05:45] <mst> khosruw59: if your model code is making async calls then I would, yes.
[00:05:49] <logioniz> mst: oh, it seems language barrier... I have never used these words in my own language)
[00:06:03] <mst> logioniz: you said 'stackfull' and 'stackless'. a stack is made of 'stack frames'.
[00:06:33] <khosruw59> mst ok, thanks man ;)  
[00:08:12] *** dilfridge is now known as thecount
[00:08:24] <mst> khosruw59: basically if I'm writing async code, I don't leave home without Future::AsyncAwait and Async::Methods these days :D
[00:09:09] <khosruw59> mst true! bookmarked them!
[00:09:11] * mst personally prefers Future to Mojo::Promise because Future is more powerful, but kraih's choice to focus on "easy" and "don't confuse the javascript developers, find something more challenging to do" in the design is perfectly reasonable
[00:10:32] *** thecount is now known as dilfridge
[00:11:56] <khosruw59> completely true, I'm a JS dev and when read the Future::AsyncAwait docs, it was so clearer to me
[00:12:22] <LeoNerd> As far as I'm aware, the word "stackless" was made up by Python to describe their own system
[00:12:40] <mst> oh, yeah, stackless python was a beautiful piece of batshittery
[00:12:43] <kraih> i would like Future more if it had a Promises/A+ compatible core *shugs*
[00:13:20] <mst> kraih: yeah, it's unfortunate the JS devs decided to invent their own inferior API when Future was already in production lots of places
[00:13:45] <kraih> it is what it is
[00:13:52] <mst> ETARDIS problem
[00:16:48] <logioniz>  mst, LeoNerd: so, it seems there are state machine and all states place in heap. It is stackless behavior.
[00:17:07] <LeoNerd> Yes but that's just how perl has always been
[00:17:20] <LeoNerd> The perl-level stack isn't the C-level stack
[00:17:46] <LeoNerd> Whereas Python's was. They had to reshape the interpreter to make async work, whereas it already worked for us
[00:18:02] *** Quits: jadesoturi (~jadesotur@user/jadesoturi) (Quit: Even death needs to sleep sometimes...)
[00:18:55] <logioniz> OMG, what is difference between perl-level stack and c-level stack?
[00:19:36] <LeoNerd> ...
[00:19:39] <LeoNerd> caller()
[00:20:24] <genio> o.O https://metacpan.org/pod/Bio::DB::Taxonomy#get_all_Descendents     what naming convention is THIS?
[00:20:25] <Paperbot> Link title(s): [ Bio::DB::Taxonomy - Access to a taxonomy database - metacpan.org ]
[00:20:57] <gordonfish> genio: gah
[00:21:24] *** Joins: jadesoturi (~jadesotur@user/jadesoturi)
[00:21:52] <logioniz> LeoNerd: it seems perl keep stack context separately. Thanks, i think i understand you)
[00:22:28] <LeoNerd> Yup. That was fortunate
[00:22:29] <khosruw59> stupid webchat
[00:22:40] <gordonfish> genio: Looks like Java and VB had a baby and it is uuuuuuuugly
[00:23:27] <khosruw59> gordonfish: comparison level 999
[00:23:30] <mst> khosruw59: why are you even using webchat?
[00:23:47] <khosruw59> mst laziness
[00:24:03] <mst> I gave you a shell so we didn't have this problem :P
[00:24:40] *** Joins: khosruw (~khosruw@vps-6df5f188.vps.ovh.net)
[00:24:46] <khosruw> here we go!
[00:24:51] *** Quits: khosruw59 (~khosruw@45.137.151.75) (Quit: Client closed)
[00:25:01] <mst> \o/
[00:25:15] <khosruw> dark theme by default :haha
[00:25:55] <kraih> genio: camel snake?
[00:25:57] <huf> you cant lead a fish to water but you can make it drink
[00:27:09] <kraih> genio: guess i actually win https://i.redd.it/3fcn4yxb6lj31.png
[00:27:43] <khosruw> itWas_COOLThanks
[00:27:54] <mst> kraih: I am still giggling at my discovery that every identifier standard I dislike is the fault of XEROX PARC's weird character set
[00:27:55] <genio> kraih: lol
[00:28:06] *** Quits: jadesoturi (~jadesotur@user/jadesoturi) (Quit: Even death needs to sleep sometimes...)
[00:28:18] <huf> wait, they didnt have _
[00:28:19] <huf> ?
[00:28:22] <huf> or what the fuck
[00:28:25] <khosruw> Even death needs to sleep sometimes...   wow:haha
[00:28:31] <mst> huf: correct.
[00:28:38] <huf> mst: well there's your problem
[00:28:44] <genio> https://github.com/libwww-perl/HTTP-Message/issues/162   aside from it being a weird place to submit that issue, that module is all sorts of o.O
[00:28:45] <Paperbot> Link title(s): [ Bio::DB::Taxonomy won't connect to NCBI · Issue #162 · libwww-perl/HTTP-Message · GitHub ]
[00:28:52] <mst> huf: so they invented CamelCase as a workaround, and the rest was history
[00:28:56] <huf> how did this shit become viral though?
[00:29:04] <huf> i still dont get that part
[00:29:45] <mst> because that meant they encoded it into both MESA and smalltalk
[00:29:54] <logioniz> LeoNerd: you write "Yes but that's just how perl has always been". But Coro was stackfull solution (I'm not 100% sure).
[00:30:15] <mst> logioniz: the perl stack is still not the C stack
[00:30:42] <gordonfish> huf: Maybe it went through china
[00:30:44] <huf> mst: yeah yeah how did it get to java? :D
[00:30:48] <huf> or fucking php
[00:30:50] <huf> even php!
[00:31:01] <khosruw> gordonfish jesus: haha
[00:31:46] <mst> huf: https://en.wikipedia.org/wiki/Mesa_(programming_language)
[00:31:47] <Paperbot> Link title(s): [ Mesa (programming language) - Wikipedia ]
[00:31:59] <mst> huf: Mesa and Cedar influenced Java and Modula-2
[00:32:12] <huf> oh no
[00:32:23] <huf> can we go back and not?
[00:32:31] <logioniz> mst: it seems stack in many languages is not c stack too.. I stopped understanding what you are trying to say 
[00:32:40] <khosruw> Do you know what we call Java that had a trip to China? Jiuanu
[00:32:55] <mst> logioniz: the point is "stackfull" is not a useful word, because it's not a yes/no thing.
[00:33:39] <mst> logioniz: Coro saves and restores the *perl* stack, but it doesn't do *C* level coroutines unless you call perl -> XS -> perl
[00:33:40] *** Joins: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se)
[00:36:35] *** Joins: EvanCarroll (~ecarroll@46.196.88.53)
[00:38:40] *** Quits: proller (~p@2a02:6b8:0:40c:5140:9e7a:c7db:860f) (Ping timeout: 240 seconds)
[00:41:32] *** Joins: jadesoturi (~jadesotur@user/jadesoturi)
[00:42:47] <khosruw> bye!
[00:43:33] *** Quits: khosruw (~khosruw@vps-6df5f188.vps.ovh.net) (Quit: leaving)
[00:44:01] <logioniz> mst: i think i understand you (but i'm not 100% sure). I have another question to maybe eliminate uncertainty: where memory for perl stack is allocated? it seems it may allocated only on/in heap. It doesn't matter where exactly the stack is allocated. It is important that the stack has a limited (small) size and languages, as a rule (go is exception), do not dynamically increase its size. So it is stackfull solution and stackfull pitfalls.
[00:48:27] <mst> logioniz: goroutine stacks are allocated on the heap.
[00:49:38] <mst> the perl stack can grow just fine
[00:49:41] *** Quits: gryphn (~gryphon@143.244.48.4) (Quit: kthxbye)
[00:49:50] <mst> again, Coro only touches the *C* level stack if you call perl -> XS -> perl
[00:49:58] <mst> you are inventing problems that do not exist.
[00:51:09] *** Quits: morte_ (~user@190.104.116.134) (Read error: Connection reset by peer)
[00:51:27] *** Quits: magla (~gelignite@55d4beb4.access.ecotel.net) (Remote host closed the connection)
[00:51:36] *** Joins: morte_ (~user@190.104.116.134)
[00:51:46] *** Quits: furrymcgee (~devuan@31.179.186.66) (Ping timeout: 252 seconds)
[00:53:05] <ology> "confabulation"
[00:54:12] <logioniz> mst: may be, i don't have minimal example of code which we could discuss in detail
[00:55:37] <mst> logioniz: also you do not understand the go stack. or the perl stack. or the C stack.
[00:55:45] <mst> logioniz: this is making this conversation difficult :D
[00:56:18] <mst> go is not in any way an exception.
[00:57:15] <mst> I am trying my best to be polite here, but it is difficult to explain "everything you just said is wrong" and still be 100% polite.
[00:57:28] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:00:19] <logioniz> mst: ok but think for a second, how would you increase the stack (or it seems more correctly "stack frame" on english)? it also needs to be re-allocated in another place and (attention) fix all refs in the heap and in the stack too, which led to the old stack.
[01:00:49] <gordonfish> mst: There's a Weird Al for that ;p
[01:01:14] <mst> logioniz: things outside of the stack do not have references to the stack
[01:01:20] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[01:01:20] *** diskin is now known as Guest7000
[01:01:20] *** diskin_ is now known as diskin
[01:01:34] *** Quits: jadesoturi (~jadesotur@user/jadesoturi) (Ping timeout: 250 seconds)
[01:02:12] *** Joins: jadesoturi (~jadesotur@user/jadesoturi)
[01:03:23] <mst> logioniz: also, no, a stack is made up *of* stack frames.
[01:03:52] *** Quits: Guest7000 (~diskin@31.23.179.220) (Ping timeout: 252 seconds)
[01:03:52] <mst> logioniz: /w 509
[01:03:55] <mst> (sorry)
[01:05:31] <logioniz> what is "/w 509"?
[01:05:40] <ether> a typo
[01:05:49] <ether> it's an irc client command
[01:06:33] <gordonfish> That's a lot of windows
[01:07:43] <mst> logioniz: the perl 'stack' is all outgoing references to begin with, and uses an AV under the hood.
[01:07:58] <mst> logioniz: the go stack used to be allocated in segments, and is now expanded by copying the whole thing instead
[01:08:17] <mst> logioniz: and go does escape analysis to ensure that only variables that are not referenced from outside are allocated on the stack
[01:08:38] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[01:08:49] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[01:08:50] *** Quits: gloin (~gloin@user/gloin) (Remote host closed the connection)
[01:09:01] <mst> go may need to fix up -internal- pointers within the stack during that process
[01:09:10] <mst> but there are no pointers from -outside-
[01:09:48] <mst> and fixing up internal pointers within a data structure on realloc is a very solved problem
[01:11:22] *** Joins: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617)
[01:13:03] <logioniz> mst: you are wrong, some things in heap may have refs to stack (no matter it is stack or it is heap). To solve this problem indirect links are introduced.
[01:13:27] <mst> logioniz: prove it.
[01:14:44] <mst> logioniz: wait. no. you are right that "indirect links are introduced". that is WHY things in the heap do NOT have refs to the stack. the data is instead allocated on the heap, and the stack simply contains a pointer to the heap allocation.
[01:14:57] <mst> logioniz: this is why 'escape analysis' exists and is an entire phase of the go compiler.
[01:15:05] <mst> logioniz: perl however does not have this problem in the first place.
[01:15:51] <mst> logioniz: I am amused that you said "you are wrong" followed by explaining exactly why I am right.
[01:17:37] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[01:19:19] <logioniz> Q90M11L27
[01:19:30] <logioniz> (sorry)
[01:20:29] <logioniz> I'm confused where we come from. I suggest we leave this conversation. 
[01:21:25] <mst> maybe https://blog.cloudflare.com/how-stacks-are-handled-in-go/ and https://medium.com/a-journey-with-go/go-introduction-to-the-escape-analysis-f7610174e890 will help re golang
[01:21:26] <Paperbot> Link title(s): [ How Stacks are Handled in Go ] [ Go: Introduction to the Escape Analysis | by Vincent Blanchon | A Journey With Go | Medium ]
[01:21:28] <logioniz> Sorry for my bad english)
[01:21:48] <mst> this is fine. I have tried to use simpler english to help.
[01:23:45] <mst> also https://golang.org/src/runtime/stack.go
[01:23:58] *** Joins: YaoNai (~YaoNai@user/yaonai)
[01:25:14] <mst> logioniz: note the cloudflare post explains exactly what I was saying (and it from 2014 - the rewrite has been finished)
[01:25:51] <logioniz> thanks, i read this post.
[01:26:31] <mst> logioniz: and the 'escape analysis' post explains how the go compiler makes sure there are not references *into* the stack from *outside*
[01:29:10] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[01:34:07] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[01:47:22] *** Joins: anthk_ (~anthk_@92.176.105.30)
[01:50:04] *** Quits: morte_ (~user@190.104.116.134) (Ping timeout: 252 seconds)
[01:50:22] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[01:53:12] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:03:36] *** Quits: logioniz (~logioniz@94.190.31.65) (Quit: Leaving)
[02:08:06] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[02:36:57] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[02:47:57] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[02:51:03] *** Quits: jess (~jess@libera/staff/jess) ()
[02:53:22] *** Joins: anthk_ (~anthk_@92.176.105.30)
[02:54:29] *** Joins: whynot (~whynot@37.73.89.254)
[03:01:40] *** Quits: Linux77 (~kvirc@237-182-233-186.raimax.com.br) (Ping timeout: 268 seconds)
[03:04:19] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[03:06:23] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:11:57] *** Quits: jetchisel (jetchisel@user/jetchisel) (Remote host closed the connection)
[03:16:00] *** Joins: Linux77 (~kvirc@187-126-71-30.user3p.veloxzone.com.br)
[03:16:41] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[03:22:10] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[03:23:15] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:24:44] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[03:25:36] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:27:06] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[03:27:58] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:29:36] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[03:30:28] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:30:44] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[03:32:08] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[03:33:00] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:35:00] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[03:35:57] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:42:20] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 250 seconds)
[03:43:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:46:12] *** Joins: xenial-user10 (~androirc@20014C4C17E1D2003559B896E18EB080.unconfigured.pool.telekom.hu)
[03:50:10] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[03:52:00] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:52:40] *** Quits: amnesiac (~marco@2601:646:4104:29b0:322e:932e:1dfd:d17d) (Ping timeout: 240 seconds)
[03:53:36] *** Quits: TonyStone (~TonyStone@cpe-74-76-58-56.nycap.res.rr.com) (Read error: Connection reset by peer)
[03:54:02] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[03:54:59] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:56:39] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[03:56:53] <Juerd> Just encountered in actual production code: grep 1, @x
[03:57:13] <Juerd> Fortunately, @x does indeed only ever contain the number 1.
[03:57:40] <mst> http://trout.me.uk/bunny.jpg
[03:57:45] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:57:46] <Juerd> But I don't think the author understands how grep works :)
[03:58:24] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[03:58:48] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[03:58:57] <Juerd> Interestingly, Raku's grep *does* work like that :)
[03:59:02] <mst> Juerd: also fun: <@ilmari> today's silly code: `eval { ... } or die @$;`
[03:59:20] <Juerd> That only needs two fixes
[03:59:29] <Juerd> Possibly only one :)
[04:00:09] <mst> oh, because raku's grep presumably uses the same .ACCEPTS system as given/when and smartmatch?
[04:00:47] <Grinnz> if there's anything we can be thankful for, its' that perl 5's horrible smartmatch didn't infect things like grep
[04:01:03] <Juerd> mst: Yes, it's one of the many places where smartmatches are used. It's so nice to have that.
[04:01:26] <Grinnz> cause that would be really hard to walk back
[04:01:29] <Juerd> Grinnz: I still feel that a raku-like smartmatch should be possible, at least partly, for perl
[04:01:42] <Grinnz> not until values have type declarations
[04:02:22] <Juerd> I think it can be done before that, and improved later.
[04:02:32] <Grinnz> we tried that, it was called 5.10
[04:03:09] <Juerd> So if one attempt is horribly flawed, every other attempt must be too?
[04:03:30] <Grinnz> until the specific reason it was horribly flawed is fixed, i don't have a lot of hope without a more specific suggestion
[04:03:38] <mst> Grinnz: no, we didn't
[04:04:10] <Juerd> Grinnz: Are you aware that Raku does not use the original smartmatch design that perl backported from perl 6?
[04:04:16] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[04:04:17] <mst> what happened was that somebody copied an early guess at the raku design into perl5 core without talking to anybody who understood that design
[04:04:21] <mst> then it was completely redesigned
[04:04:23] <mst> and nobody noticed
[04:04:44] <Grinnz> sure, but the problem is specifically that perl can't differentiate numbers and strings
[04:04:50] <Grinnz> there's no designing around that
[04:04:52] <mst> Grinnz: no. that doesn't *help*.
[04:05:03] <mst> but there's at least two other bigger structural problems before we even get to that question
[04:05:09] <Grinnz> indeed
[04:05:24] <Juerd> In Raku, $LHS ~~ $RHS is mostly just sugar for $RHS.ACCEPTS($LHS), so basically all you need is some autoboxing-like thing for non-objects (doesn't have to be pervasive) and future proof semantics
[04:05:48] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:05:55] <Grinnz> "all you need" :D
[04:06:04] <Juerd> The original Perl 6 design, that was kinda/sorta copied to Perl, had a complex decision mechanism based on *both* $LHS and $RHS
[04:06:28] <mst> the important thing is the "deciding how to handle stuff statically based on the RHS" thing
[04:06:41] <Juerd> Yep
[04:06:59] <Grinnz> *an* important thing
[04:07:13] <mst> I'm still amazed that nobody working on perl5 -or- perl6 realised what had happened
[04:07:28] *** Quits: xenial-user10 (~androirc@20014C4C17E1D2003559B896E18EB080.unconfigured.pool.telekom.hu) (Ping timeout: 250 seconds)
[04:07:43] <mst> the sinking feeling when I saw Larry finally pay attention and go "oh no" the day _after_ 5.10.0 shipped was not a pleasant experience
[04:08:08] <Grinnz> not like 5.10.0 didn't have other completely broken things
[04:09:30] <Juerd> I recall irc conversations going like "<foo> Before we continue, what version are you using? <bar> 5.10.0. Oh shit. Never mind"
[04:09:42] <mst> 5.8.0 was pretty similar tbh
[04:09:53] <Grinnz> shoutout to 5.12.0 for breaking that curse
[04:09:58] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:10:28] <mst> Grinnz: it was more the sudden realisation that we were on our own copying features from perl6 because none of their dev team - including larry - cared enough about us to help anymore
[04:10:31] <Juerd> And wasn't there a linux distribution that shipped a rebranded release candidate as .0?
[04:11:21] <Grinnz> mst: yeah was gonna ask if that was around when communication was breaking down
[04:12:18] <mst> and note that I don't mean larry'd stopped caring about the *people* but the last point where he really gave a shit about the *VM* was earlier in the 5.10 process where he wrote MAD
[04:12:25] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 248 seconds)
[04:12:57] <mst> which was really cool, except for the part where it was impossible to maintain by anybody else and he summarily fuccked off into the distance immediately afterwards so it rapidly bitrotted to death
[04:13:21] <Grinnz> MAD?
[04:14:12] <Juerd> Grinnz: That it was
[04:14:13] <mst> produced full annotated semantic trees during compilation (in XML, but that worked pretty well)
[04:14:17] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:14:42] <mst> all sorts of tools we could've built with that if only it had been possible to keep it working for mor than about 10 minutes after it was committed
[04:14:45] <Grinnz> yeah that sounds like 2007 era
[04:15:38] <mst> that masak and I willed the sister languages narrative into existence in 2008 was not a remporal coincidence
[04:15:54] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[04:17:09] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:18:01] * mst sulks
[04:18:45] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[04:19:48] <Juerd> Thinking about a modern attempt at smartmatch a bit - it should be entirely (type system) future proof if at first it only supported smart matching against references. References have distinct types already.
[04:19:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:21:29] <Juerd> And you would hopefully not be using grep EXPR, LIST with the EXPR evaluating to a reference, so it could be used for grep too.
[04:21:30] <mst> note for anybody reading the above, if it comes across as me blaming anybody specifically rather than the entire situation generally that's not because I'm actually trying to do that it's because it all hurt
[04:21:33] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[04:22:29] <Juerd> Also, why doesn't Perl warn you when doing stupid stuff like grep 1 :)
[04:22:38] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:22:54] <Juerd> Or grep $ref for that matter :P
[04:24:38] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[04:25:48] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:27:26] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[04:28:24] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:30:00] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[04:30:10] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 240 seconds)
[04:31:00] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:32:34] <ether> grep $ref == $otherref is a legit thing to do
[04:33:00] <Juerd> Yes, I meant grep $ref, LIST
[04:33:40] <Grinnz> seems perfectly reasonable for a perlcritic policy at least
[04:34:33] <Grinnz> any grep condition that doesn't either involve $_ or a function taking $_ or a regex match is probably wrong
[04:35:11] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[04:38:13] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:39:53] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[04:40:50] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:42:27] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[04:43:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:45:32] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[04:46:29] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:51:34] *** Quits: Pali (~pali@user/pali) (Ping timeout: 252 seconds)
[04:51:41] *** Joins: pucara (~i@181.92.207.67)
[04:53:17] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[04:54:45] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:55:17] <Juerd> It could be a function that accesses $_ directly
[04:55:41] <Juerd> Still wrong, but not as wrong :)
[04:56:21] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[04:57:15] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:57:18] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[04:57:44] <mst> Juerd: ... ... ... mwahahahahahahaha
[04:57:50] <mst> Juerd: 'use overload bool ...'
[04:58:25] <Juerd> Shit
[04:58:53] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[04:59:03] <Grinnz> Juerd: yeah which is why perlcritic policy you can extend/disable seems like a more reasonable starting point
[04:59:26] <mst> now, admittedly, doing that deliberately should absolutely be a mallet gnome summoning incident
[04:59:50] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:00:28] <Grinnz> "allow custom _ prototype functions to be configured" is perfectly reasonable, "allow overloaded/magic bullshit" is what ## no critic is for
[05:02:27] <mst> oooh, that's a point, you could create a tied or Variable::Magic'd reference that tests $_ too
[05:02:43] <mst> so plain references aren't safe either
[05:02:58] <Grinnz> well magic wouldn't affect the return value generally so that would probably be hard to make effective
[05:03:17] <Grinnz> but yes, tie breaks everything
[05:03:38] <Juerd> Tie does break everything, but have you ever encountered TIESCALAR in actual code?
[05:03:45] <mst> Grinnz: *cough* fetch magic exists
[05:04:06] <Grinnz> i don't even know, does that work through aliases?
[05:04:48] <mst> I'm talking about 'grep $ref, ...' where magic was pre-cast on the $ref
[05:04:59] <Grinnz> oh
[05:05:10] <mst> because I'm a terrible person
[05:05:13] <Grinnz> right, magic could use $_
[05:05:28] <Grinnz> (and this is why it sucks that lexical $_ was a failure)
[05:05:38] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:06:17] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 248 seconds)
[05:08:51] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:10:39] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:15:28] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[05:16:37] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:23:29] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[05:24:35] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:26:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[05:27:08] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:33:55] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[05:35:50] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:37:36] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 250 seconds)
[05:40:59] *** Quits: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617) (Quit: Leaving)
[05:42:10] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[06:08:53] *** Joins: Su-Shee (~Susanne@p4ffc7624.dip0.t-ipconnect.de)
[06:09:45] *** Quits: Su-Shee_ (~Susanne@p4ff49846.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:10:06] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[06:10:21] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[06:21:42] *** Joins: gggp__ (~gggp@li1772-101.members.linode.com)
[06:32:53] *** Joins: bmeneg_ (~bmeneg@2001:1284:f016:5a1b:9150:d44b:d957:c37)
[06:33:04] *** Quits: bmeneg (~bmeneg@2001:1284:f016:c77f:a0a2:51e8:3acb:a2a5) (Ping timeout: 250 seconds)
[06:33:48] *** Joins: slopey (~slopey@user/slopey)
[06:36:44] *** Quits: ingy (~ingy@104.236.228.44) (Ping timeout: 252 seconds)
[06:36:44] *** Quits: elcaro (~anonymous@45.32.191.75) (Ping timeout: 252 seconds)
[06:37:04] *** Joins: ingy (~ingy@104.236.228.44)
[06:37:12] *** Quits: nrr (sid20938@id-20938.tooting.irccloud.com) (Ping timeout: 256 seconds)
[06:37:12] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Ping timeout: 245 seconds)
[06:37:29] *** Joins: elcaro (~anonymous@45.32.191.75)
[06:37:42] *** Quits: p71 (~p71@071-090-085-184.res.spectrum.com) (Excess Flood)
[06:37:43] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[06:38:00] *** Joins: nrr (sid20938@id-20938.tooting.irccloud.com)
[06:38:01] *** Joins: p71 (~p71@071-090-085-184.res.spectrum.com)
[06:43:28] *** Quits: EvanCarroll (~ecarroll@46.196.88.53) (Ping timeout: 250 seconds)
[06:45:13] *** Joins: EvanCarroll (~ecarroll@46.196.88.53)
[06:52:34] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 250 seconds)
[06:54:27] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:54:42] *** Quits: slopey (~slopey@user/slopey) (Quit: Leaving)
[06:56:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[06:59:06] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[07:02:49] <Juerd> Why is it that we use strings for class names, rather than typeglobs?
[07:03:20] <Juerd> bless {}, *Some::Thing;  or  $foo->isa(*Some::Thing)  is so much nicer, and they work.
[07:03:41] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[07:09:13] <Grinnz> well, they only work because typeglobs stringify to their name
[07:09:18] <Grinnz> those functions actually just take strings
[07:09:47] <Juerd> I know, I just like sigils more than quotes for identifiers :)
[07:09:55] <Grinnz> the package is not a typeglob
[07:10:08] <Grinnz> it's a hash, if anything
[07:10:56] <Grinnz> if we had a sigil that actually meant package i'd agree :P
[07:12:34] <mst> I mean we could make * mean that as well
[07:12:41] <mst> what's one more overloading
[07:12:50] <Grinnz> lol
[07:13:02] <Juerd> Don't stashes already live in typeglobs anyway? :)
[07:13:10] <Grinnz> stashes contain typeglobs
[07:13:41] <Juerd> Which in turn can contain other stashes, right? My guts knowledge is not strong.
[07:14:03] <Grinnz> in a hash entry ending in ::, i believe
[07:17:27] <Juerd> Oh, heh, *Some::Thing stringifies to *main::Some::Thing :(
[07:19:45] <Grinnz> right, which actual typeglob you get before stringifying may be a bit surprising
[07:21:17] <Grinnz> main is a weird package
[07:21:38] <Juerd> Well, it stringifies to "*" . __PACKAGE__ . "::Some::Thing"
[07:21:45] <Grinnz> not always
[07:24:52] <Grinnz> and i'm not being more specific because i'd either have to spend ten minutes experimenting or go source code diving to be able to say what happens :P
[07:26:38] <Juerd> I assume very few people actually know how globs work. They're not used much at all. I think basically only *STDIN and friends are used, maybe some old hackers still using them for their own filehandles, and that's about it...
[07:27:02] <Juerd> I never know if STDIN or *STDIN is the preferred style...
[07:27:24] <Grinnz> directly in syntax, they're only used for package filehandles and dynamically assigning subs/exporting variables, pretty much
[07:27:31] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[07:27:41] <Grinnz> indirectly, lexical filehandles are glob refs
[07:28:44] <Grinnz> i prefer *STDIN because that's the actual variable and i don't like having to remember the special cases that accept it as a bareword
[07:29:41] *** Quits: pucara (~i@181.92.207.67) (Quit: Lost terminal)
[07:29:47] <Juerd> Now if we had smartmatch... And grep supported that... and * was the package sigil...
[07:29:55] <Juerd> grep *My::Type, LIST;  # :)
[07:30:13] <Grinnz> at least on new perls you could do grep $_ isa My::Type,
[07:30:37] <Grinnz> and that would be more correct in several ways anyway
[07:31:48] <Juerd> How can you know it's more correct than my made-up fantasy?
[07:32:04] <Grinnz> fair
[07:36:04] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[07:39:12] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[07:40:25] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 248 seconds)
[07:44:41] *** Quits: whynot (~whynot@37.73.89.254) (Quit: leaving)
[07:45:10] *** Quits: clscott (~clscott@184.147.147.88) (Quit: clscott)
[07:52:59] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[07:58:33] <mst> Juerd: the actual stash is \%Package::Name:: IIRC
[07:58:51] <mst> I always go back and read the code inside Moo from when I figured this out once and then immediately forgot half of it again
[08:01:55] <Juerd> mst: I know, but thanks
[08:02:24] <Juerd> Oh, huh, you have a \ there
[08:02:28] <Juerd> In that case I didn't know.
[08:02:49] <mst> Juerd: only because if you take a ref to it you can pass it around
[08:03:07] <Juerd> Right, but that's true for any hash
[08:03:12] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[08:03:36] <mst> sure. I saw you being confused about structures and guts knowledge, I was just trying to explain stuff
[08:03:45] <Juerd> Thanks :)
[08:07:55] *** Quits: dsrt^ (~dsrt@209.65.131.194) (Ping timeout: 252 seconds)
[08:09:45] *** Joins: Martchus (~martchus@2a01:c23:c4a2:9100:d250:99ff:fe49:3cce)
[08:09:54] <mst> Juerd: I once managed to start from \%main:: and write a reduce function that could look up package stashes without ever upsetting use strict
[08:10:21] <mst> the end result was far more confusing than "no strict 'refs';" and I don't think I bothered keeping the code, but it amuses me that it was possible
[08:10:39] <Juerd> Heh, *Package::Name::subname{CODE}() works, and so does $Package::Name::{subname}()
[08:11:22] <Juerd> But \*Package::Name::subname{CODE} != \$Package::Name{subname}
[08:11:29] <Juerd> er,
[08:11:31] <Juerd> But \*Package::Name::subname{CODE} != \$Package::Name::{subname}
[08:11:40] *** Quits: Martchus_ (~martchus@dynamic-077-007-059-046.77.7.pool.telefonica.de) (Ping timeout: 240 seconds)
[08:12:01] <Juerd> But \*Package::Name::subname{CODE} == \&Package::Name::subname though
[08:14:06] <ether> https://metacpan.org/release/ETHER/perl-5.35.3/view/pod/perldelta.pod
[08:14:09] <Paperbot> Link title(s): [ perldelta - what is new for perl v5.35.3 - metacpan.org ]
[08:15:03] <mst> Juerd: I mean, yeah, that's just cos (metaphorically) {...} binds tighter than \
[08:15:50] <Juerd> I think I intended it like that but my head's currently in the process of exploding.
[08:16:23] <mst> this is why I tend to take a reference to the glob or the stash first
[08:16:24] <Juerd> And yeah, I originally had a similar reduce function when I wrote Exporter::Tidy, and quickly resorted to the much more readable symbolic refs instead.
[08:16:43] <mst> then mess with it in heavily parenthesised code so I don't have to think about precedence
[08:16:52] <mst> then, -maybe-, collapse it back down after
[08:17:28] <mst> globs are sufficiently magic that I prefer to be careful where I spend my cognitive overhead budget ;)
[08:18:13] <Juerd> Well I may want this smartmatch thing too badly that I might even have a go at hacking it, or something resembling it.
[08:21:45] <Grinnz> you often need to throw a typeglob into a scalar before attempting to access a typeglob slot
[08:22:01] <Grinnz> because syntax to access a glob slot doesn't quite exist
[08:22:17] <Grinnz> so it only works by using hash access syntax on something that's clearly not a hash
[08:23:23] <Juerd> What about *foo{CODE} does not exist?
[08:23:41] <Grinnz> it's a hash access syntax but it's not actually a hash
[08:23:59] <Grinnz> you can't take a globref and do ->{CODE} for example
[08:24:03] <Juerd> No, hash access syntax involves $ or ->
[08:24:24] <Grinnz> not really, it's just {
[08:24:40] <Juerd> What hash can you access with just {}?
[08:25:17] <Grinnz> i mean, $x{} and @x{} and %x{} are all hash accesses
[08:25:22] <Grinnz> *x{} isn't
[08:25:27] <Juerd> Agreed
[08:25:37] <Juerd> But I don't think it's hash access syntax.
[08:25:45] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 248 seconds)
[08:25:57] <Grinnz> it's using the same subscript
[08:25:58] <Juerd> Not sure how it's parsed
[08:26:18] <Grinnz> it only knows it's glob access because the operand is dereferenced with *
[08:26:33] <Grinnz> i'm not sure i want to look at that part of the parser
[08:28:02] <mst> Juerd: I'd call it "overloading hash access syntax"
[08:28:35] <Grinnz> yeah tahts a good way to put it
[08:28:45] <Juerd> mst: I can agree on that
[08:29:25] <Grinnz> $foo{bar} = *baz; now try to access *baz{CODE} from that hash
[08:30:24] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[08:30:34] <corwin> *($foo{bar}}{CODE} ?
[08:30:42] <Grinnz> nope, it's not a globref :)
[08:30:43] <corwin> s/(/{
[08:30:52] <corwin> :D  this is a fun game :D
[08:31:15] <Grinnz> i'm pretty sure there is no syntax for it
[08:31:38] <mst> eval: sub baz { 1 } $foo{bar} = *baz
[08:31:41] <perlbot> mst: *main::baz
[08:32:21] <mst> eval: sub baz { 1 } $foo{bar} = *baz; *{\$foo{bar}}{CODE}
[08:32:23] <perlbot> mst: sub { "DUMMY" }
[08:32:27] <mst> eval: sub baz { 1 } $foo{bar} = *baz; *{\$foo{bar}}{CODE}->()
[08:32:29] <perlbot> mst: 1
[08:32:33] <mst> Grinnz: works fine?
[08:32:36] <Grinnz> cute
[08:33:13] <Juerd> $x = \$x if !ref(\$x) and ref(\$x) eq 'GLOB';  # :)
[08:33:15] <Grinnz> not what i would consider syntax for that task but it works :P
[08:33:32] * mst would've assigned \*baz to the hash in the first place but you can move the enrefenning later if somebody decides to be a savage :D
[08:34:01] <Grinnz> what's the fun in using typeglobs if you don't stick them directly in scalars?
[08:34:02] <Juerd> (Taken from my completely untested pseudo-ish code https://juerd.nl/i/b0f171651b501b06207ebd3c6263837a.png)
[08:34:15] <Juerd> (Don't look, you won't like it.)
[08:38:43] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 252 seconds)
[08:40:25] <mst> Grinnz: when I want to have fun using typeglobs, I do it by TIEHANDLE-ing them along with overriding CORE::glob so I can support <div> and <div class=
[08:40:34] <mst> Grinnz: when I want to have fun using typeglobs, I do it by TIEHANDLE-ing them along with overriding CORE::glob so I can support <div> and <div class="foo"> because JSX is for cowards
[08:40:58] <Grinnz> thanks but i don't need to induce self vomiting atm
[08:41:47] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[08:42:38] <mst> http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=scpubgit/App-SCS.git;a=blob;f=lib/App/SCS/Plugin/Feeds/Generator.pm;h=f4985616f2979868652e5ad4cfd3267df0735bcc;hb=9ef3dfc81e7e608105ffa5a6eb6d542355db1957#l79
[08:42:40] <Paperbot> Link title(s): [ git.shadowcat.co.uk Git - scpubgit/App-SCS.git/blob - lib/App/SCS/Plugin/Feeds/Generator.pm ]
[08:42:46] <mst> makes for a nice easy way to generate atom feeds
[08:48:06] <Juerd> Looked it up in perly.y: glob subscripts are not hash subscripts, but implemented separately. They are both in 'subscripted' though.
[08:48:27] <Juerd> And it seems they do share tokens but I guess that's a given
[09:38:51] <shlomif> "Perl::Tidy - breaking CI tests since 2002" ;)
[09:44:16] *** Joins: AI4AI (~subie@2601:4c0:4080:bc0:21e1:ab1b:5c16:8966)
[09:44:44] *** Joins: logioniz (~logioniz@94.190.31.65)
[09:45:46] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:46:10] *** Quits: subie (~subie@2601:4c0:4080:bc0:901a:b44a:ae2b:ee45) (Ping timeout: 240 seconds)
[09:53:15] <aquanight> one difference between $x = *foo; and $x = \*foo;
[09:53:24] <aquanight> perlbot: eval our @x = 4; our @y = 8; my $q = *x; *x = *y; [ @x, *$q{ARRAY}->@* ];
[09:53:28] <perlbot> aquanight: [8,4]
[09:53:29] <aquanight> perlbot: eval our @x = 4; our @y = 8; my $q = \*x; *x = *y; [ @x, *$q{ARRAY}->@* ];
[09:53:34] <perlbot> aquanight: [8,8]
[09:54:10] <aquanight> RE: 22:03:59/EB606 < Grinnz> what's the fun in using typeglobs if you don't stick them directly in scalars?
[10:00:40] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[10:04:08] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[10:16:09] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:19:22] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 252 seconds)
[10:23:22] *** Quits: humky (~humky@user/humky) (Read error: Connection reset by peer)
[10:25:46] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[10:43:26] *** Joins: furrymcgee (~devuan@31.179.186.66)
[11:01:22] *** Quits: EvanCarroll (~ecarroll@46.196.88.53) (Ping timeout: 258 seconds)
[11:34:09] *** Joins: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler)
[11:34:10] *** Quits: przemoc (~przemoc@user/przemoc) (Ping timeout: 252 seconds)
[12:09:21] *** Joins: EvanCarroll (~ecarroll@88.246.75.12)
[12:20:43] *** Joins: dsrt^ (~dsrt@209.65.131.194)
[12:25:53] *** Joins: Adoi (~Adoi@user/adoi)
[12:39:47] *** Joins: anthk_ (~anthk_@92.176.105.30)
[12:55:28] *** Quits: Adura (~Adura@user/adura) (Quit: Quit)
[12:55:33] *** Joins: gggp_ (~gggp@li1772-101.members.linode.com)
[12:58:52] *** Quits: gggp__ (~gggp@li1772-101.members.linode.com) (Ping timeout: 252 seconds)
[13:02:10] *** Quits: gggp_ (~gggp@li1772-101.members.linode.com) (Ping timeout: 252 seconds)
[13:07:29] *** Joins: aman (~aman@user/aman)
[13:21:42] *** Quits: dsrt^ (~dsrt@209.65.131.194) (Ping timeout: 250 seconds)
[13:28:33] *** Joins: dsrt^ (~dsrt@209.65.131.194)
[13:50:13] *** Quits: averell (~averell@user/averell) (Quit: .)
[13:50:27] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[13:51:08] *** Joins: humky (~humky@user/humky)
[13:51:13] *** Quits: humky (~humky@user/humky) (Remote host closed the connection)
[14:02:28] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[14:26:57] *** Joins: laidback_01_ (~laidback_@block-66.135.86.40.montanasat.net)
[14:29:18] *** Quits: laidback_01 (~laidback_@206.214.234.14) (Ping timeout: 250 seconds)
[14:30:51] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[14:33:04] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:33:49] *** Joins: csrf (~csrf@user/csrf)
[14:41:13] *** Joins: akaWolf (~akaWolf@2a05:3580:df03:1a00:21e:8cff:fe18:61)
[14:45:34] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[14:45:47] *** Joins: Pali (~pali@user/pali)
[14:48:41] *** Quits: Croran (~quassel@c-73-118-179-18.hsd1.wa.comcast.net) (Ping timeout: 248 seconds)
[14:49:50] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 258 seconds)
[15:05:28] *** Quits: lopid (~lopid@user/lopid) (Quit: WeeChat 3.2)
[15:07:51] *** Quits: solitario (~adrian@www3.kiess.onl) (Ping timeout: 258 seconds)
[15:09:46] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[15:10:20] *** Joins: lopid (~lopid@user/lopid)
[15:12:56] *** Joins: Croran (~quassel@c-73-118-179-18.hsd1.wa.comcast.net)
[15:45:57] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[15:49:43] *** Quits: akaWolf (~akaWolf@2a05:3580:df03:1a00:21e:8cff:fe18:61) (Remote host closed the connection)
[15:51:00] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[15:53:23] *** Joins: akaWolf (~akaWolf@akawolf.org)
[15:57:20] *** Joins: anthk_ (~anthk_@92.176.105.30)
[16:11:14] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:12:14] <leitz> If you call an object's method while in the object, the object ($self) is the implicit first parameter.
[16:13:11] <leitz> Which is more conventional, calling   $self->_my_method($data)   or   _my_method($self, $data)   ?
[16:13:22] <leitz> Is there a difference between the two.
[16:13:33] <leitz> ?
[16:16:09] <shlomif> leitz: hi
[16:16:28] <shlomif> leitz: use "->" usually
[16:16:48] <djerius> leitz: $self->_my_method does a method lookup through the class inheritance hierarchy, so that allows subclasses to override _my_method.  _my_method($self,...) is just a function call. it will be faster, but you can't over override it.
[16:17:48] <djerius> leitz: what shlomif said :)
[16:19:51] <shlomif> djerius: heh
[16:20:32] <leitz> Thanks guys. (in the southern US sense of 'guys')
[16:20:59] <shlomif> EvanCarroll: what's up, cowboy?
[16:21:08] <leitz> Hadn't thought of the inheritance and over-riding issue.
[16:21:28] <shlomif> leitz: southern US?
[16:23:15] <leitz> shlomif, in the southern US, "guys" is gender neutral; it's the formal version of "y'all".    :)
[16:27:21] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 248 seconds)
[16:30:33] <shlomif> leitz: this is the case globally
[16:30:37] *** Quits: castawayc (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net) (Ping timeout: 252 seconds)
[16:31:25] *** Quits: castaway (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net) (Ping timeout: 258 seconds)
[16:39:36] <leitz> shlomif, agreed. However, the US seems to be into overly sensitive sensitivities.
[16:42:02] <shlomif> leitz: be honest and brave: https://www.youtube.com/watch?v=rag0Z1nTJOc
[16:42:02] <Paperbot> YouTube video linked by shlomif: George does Opposite - Seinfeld - published by Seinfeld Shorts
[16:47:16] <djerius> shlomif: we have a long history of being particularly insensitive, so a little extra sensitiviy is just making up for past bad behavior.
[16:51:16] <shlomif> djerius: i encourage ppl to criticise and offend me
[16:53:04] <djerius> shlomif: your wish is my command
[16:53:04] <shlomif> you cannot live your life in la la land afraid of your own shadow
[16:54:00] <leitz> Now we go from "wishful thinking" to "wishful commanding"...
[16:54:08] <djerius> sensitivity != living in la la land.  that's a false dichotomy.
[16:54:46] <djerius> you meet people where they are.
[16:54:59] <djerius> and accept people as they are.  not sensitive. human.
[16:55:31] <leitz> djerius, there's a scale, or continuum, of sensitivity. Some folks are overly sensitive and in la la land. Most people wouldn't mind a little extra sensitivity but aren't "la la landers" about it.
[16:56:21] *** Joins: Getty (getty@stardestroyer.de)
[16:56:33] <leitz> If you really want insensitive, wait till mst shows up.   :P
[16:57:22] <djerius> there's a continuum of all human behavior.  without understanding why a person exhibits that behavior, it's just another way of labelling someone.  i'm not into labels.
[16:57:40] *** Joins: ShorTie (~ShorTie@171.sub-72-105-245.myvzw.com)
[16:59:25] <leitz> djerius, I find lables useful, but admit that they need frequent evaluation. For example, I've already labelled you as "reasonable to talk to". 
[16:59:44] <leitz> shlomif is more "pirate". That's a self-label, mostly.  :)
[17:03:28] <djerius> leitz: you've caught me on a good day!  off to get breakfast, pick up farm share, pick some beans, and prepare for the hurricane that's about to plough through Massachusetts, US.  y'ouse have a good day, as the locals say.
[17:03:34] *** Quits: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler) (Ping timeout: 244 seconds)
[17:04:47] <shlomif> leitz: arrrrr! ye bilge rats
[17:04:47] <leitz> djerius, take care! How you Mass folks deal with all that snow boggles my mind, but y'all gotta be tough for it. The bunch of unmelted snow is something you can handle.
[17:08:01] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:19:18] *** Quits: furrymcgee (~devuan@31.179.186.66) (Remote host closed the connection)
[17:19:27] *** Quits: fling (~fling@user/fling) (Ping timeout: 268 seconds)
[17:31:54] *** Quits: bmeneg_ (~bmeneg@2001:1284:f016:5a1b:9150:d44b:d957:c37) (Remote host closed the connection)
[17:38:36] *** Joins: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler)
[17:45:15] *** Joins: leighbb (~leighbb@user/leighbb)
[17:45:18] *** Joins: castaway (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net)
[17:52:05] *** Joins: castawayc (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net)
[17:52:22] *** Joins: Adura (~Adura@user/adura)
[18:21:46] *** Joins: mattil (~mattil@87-92-153-0.rev.dnainternet.fi)
[18:22:50] *** Joins: jess (~jess@libera/staff/jess)
[18:25:09] *** Quits: laidback_01_ (~laidback_@block-66.135.86.40.montanasat.net) (Quit: Leaving)
[18:33:20] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[18:48:00] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[18:48:07] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[18:50:16] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca)
[18:55:38] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca) (Quit: clscott)
[18:56:40] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[18:57:57] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca)
[18:59:13] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca) (Client Quit)
[19:03:26] *** Quits: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler) (Ping timeout: 244 seconds)
[19:11:01] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[19:14:36] *** Joins: thrig (~thrig@70.97.65.251)
[19:15:04] *** Quits: castawayc (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net) (Ping timeout: 252 seconds)
[19:15:59] *** Quits: castaway (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net) (Ping timeout: 268 seconds)
[19:21:45] *** Joins: castaway (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net)
[19:25:03] *** Joins: castawayc (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net)
[19:54:22] <thowe> I need to figure out how to package my mojo project for mass consumption...
[19:54:46] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[19:55:06] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[19:55:19] <mst> thowe: might want to look at how https://convos.by/ does it
[19:55:20] <Paperbot> Link title(s): [ About · Convos ]
[20:03:06] <thowe> I was thinking more along the lines of "Make Maker" which I think I heard was a thing?  Or whatever the cool kids are using in the way of "distzilla"
[20:06:44] <thrig> Coropilot will help with all your coding and/or IDE and/or packaging and/or blockchain requirements
[20:06:45] * GumbyPAN CPAN Upload: Syntax-Keyword-Match-0.07 by PEVANS https://metacpan.org/release/PEVANS/Syntax-Keyword-Match-0.07
[20:06:45] * GumbyPAN CPAN Upload: Locale-Utils-Autotranslator-1.009 by STEFFENW https://metacpan.org/release/STEFFENW/Locale-Utils-Autotranslator-1.009
[20:06:48] * GumbyPAN CPAN Upload: Locale-Utils-Autotranslator-1.010 by STEFFENW https://metacpan.org/release/STEFFENW/Locale-Utils-Autotranslator-1.010
[20:06:55] * GumbyPAN CPAN Upload: Script-Singleton-0.03 by STEVEB https://metacpan.org/release/STEVEB/Script-Singleton-0.03
[20:07:01] * GumbyPAN CPAN Upload: DNS-NIOS-0.001 by SSMN https://metacpan.org/release/SSMN/DNS-NIOS-0.001
[20:07:07] * GumbyPAN CPAN Upload: Mojolicious-Plugin-LinkedContent-v9-0.10 by EBRUNI https://metacpan.org/release/EBRUNI/Mojolicious-Plugin-LinkedContent-v9-0.10
[20:07:13] * GumbyPAN CPAN Upload: Pod-Coverage-TrustMe-0.002000 by HAARG https://metacpan.org/release/HAARG/Pod-Coverage-TrustMe-0.002000
[20:07:20] * GumbyPAN CPAN Upload: CallBackery-0.38.19 by OETIKER https://metacpan.org/release/OETIKER/CallBackery-0.38.19
[20:07:26] * GumbyPAN CPAN Upload: Music-Beets-Info-0.004 by WOLDRICH https://metacpan.org/release/WOLDRICH/Music-Beets-Info-0.004
[20:07:32] * GumbyPAN CPAN Upload: Test2-Harness-UI-0.000076 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-UI-0.000076
[20:07:38] * GumbyPAN CPAN Upload: URI-Fast-0.52 by JEFFOBER https://metacpan.org/release/JEFFOBER/URI-Fast-0.52
[20:07:44] * GumbyPAN CPAN Upload: Config-XrmDatabase-0.02 by DJERIUS https://metacpan.org/release/DJERIUS/Config-XrmDatabase-0.02
[20:07:50] * GumbyPAN CPAN Upload: Test2-Harness-UI-0.000077 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-UI-0.000077
[20:07:57] * GumbyPAN CPAN Upload: RT-Extension-JSGantt-1.07 by BPS https://metacpan.org/release/BPS/RT-Extension-JSGantt-1.07
[20:08:03] * GumbyPAN CPAN Upload: Test-Compile-v3.0.0 by EGILES https://metacpan.org/release/EGILES/Test-Compile-v3.0.0
[20:08:16] * GumbyPAN CPAN Upload: perl-5.35.3 by ETHER https://metacpan.org/release/ETHER/perl-5.35.3
[20:08:21] * GumbyPAN CPAN Upload: App-git-ship-0.37 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/App-git-ship-0.37
[20:08:27] * GumbyPAN CPAN Upload: Module-Generic-v0.15.7 by JDEGUEST https://metacpan.org/release/JDEGUEST/Module-Generic-v0.15.7
[20:08:34] * GumbyPAN CPAN Upload: Module-Generic-v0.15.8 by JDEGUEST https://metacpan.org/release/JDEGUEST/Module-Generic-v0.15.8
[20:08:40] * GumbyPAN CPAN Upload: Perl7-Handy-0.08 by INA https://metacpan.org/release/INA/Perl7-Handy-0.08
[20:08:46] * GumbyPAN CPAN Upload: Module-CoreList-5.20210820 by BINGOS https://metacpan.org/release/BINGOS/Module-CoreList-5.20210820
[20:08:52] * GumbyPAN CPAN Upload: CPAN-Perl-Releases-5.20210821 by BINGOS https://metacpan.org/release/BINGOS/CPAN-Perl-Releases-5.20210821
[20:08:58] * GumbyPAN CPAN Upload: Unicode-Collate-1.31 by SADAHIRO https://metacpan.org/release/SADAHIRO/Unicode-Collate-1.31
[20:09:04] * GumbyPAN CPAN Upload: CPANPLUS-0.9912 by BINGOS https://metacpan.org/release/BINGOS/CPANPLUS-0.9912
[20:09:10] * GumbyPAN CPAN Upload: OSPF-LSDB-1.13 by BLUHM https://metacpan.org/release/BLUHM/OSPF-LSDB-1.13
[20:09:35] *** AI4AI is now known as subie
[20:12:50] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[20:25:02] *** Quits: Peppard (~quassel@2001:470:1f0b:751:78d8:33ff:fec5:5806) (Ping timeout: 245 seconds)
[20:25:35] <Grinnz> looks like something got unstuck
[20:26:31] *** Joins: Peppard (~quassel@2001:470:1f0b:751:7147:6d36:fee8:136c)
[20:27:07] <Grinnz> thowe: read the first few sections of https://metacpan.org/pod/Dist::Zilla::Starter and you can then dip to one of the other tools if it sounds like your speed (minilla and mbtiny would be my recommendations, but note that if you want to ship resources in lib/ like mojo does you need to use EUMM as your installer which rules out mbtiny)
[20:27:07] <Paperbot> Link title(s): [ Dist::Zilla::Starter - Guide to getting started with Dist::Zilla - metacpan.org ]
[20:31:07] <mst> thowe: I mean, it depends what your goal is - tarball that can be 'cpan-ed' ? something people install as 'just an app' with help getting dependencies? etc. etc.
[20:32:49] *** Quits: thrig (~thrig@70.97.65.251) (Remote host closed the connection)
[20:35:59] <Grinnz> the only way to ship static resources in a Module::Build::Tiny supported way is a dist sharedir
[20:36:15] <Grinnz> which works fine, just takes a few more lines of code
[20:36:48] * GumbyPAN CPAN Upload: oCLI-0.001 by SYMKAT https://metacpan.org/release/SYMKAT/oCLI-0.001
[20:37:22] <Grinnz> i think i'm coming around to the opinion of "module sharedirs are unnecessary in 100% of cases, so i don't care anymore that MBT doesn't support them"
[20:37:30] *** Joins: txtsd (~txtsd@user/txtsd)
[20:37:42] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca)
[20:37:49] <mst> "just dump the files in lib like Mojolicious does" is increasingly seeming less annoying
[20:38:03] <Grinnz> well yeah, but i also like to not use EUMM when possible
[20:38:35] <Grinnz> particularly static install has the same restrictions
[20:38:43] <Grinnz> at least i think static install supports dist sharedirs...
[20:39:13] <Grinnz> it does according to https://metacpan.org/pod/Dist::Zilla::Plugin::StaticInstall
[20:39:14] <Paperbot> Link title(s): [ Dist::Zilla::Plugin::StaticInstall - Identify a distribution as eligible for static installation ... ]
[20:40:04] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca) (Client Quit)
[20:40:18] <thowe> mst, I think it would be good for me to go through the effort of getting something in shape to put on cpan.  i find installing Mojo apps from cpan to not be my preference as a user, but I think I should go to those lengths.  The code for for Mojo PieNg isn't great, as it was one of the first things I ever built, but it works and is useful.  I probably need a better name.
[20:40:58] <Grinnz> https://metacpan.org/pod/Mojolicious::Guides::Cookbook#Making-your-application-installable has some guidance there as well
[20:40:58] <Paperbot> Link title(s): [ Mojolicious::Guides::Cookbook - Cooking with Mojolicious - metacpan.org ]
[20:41:16] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[20:41:16] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[20:41:25] <thowe> Grinzz, nice, thanks
[20:41:45] <Grinnz> (it suggests putting the resources in lib/ and using EUMM as your authoring tool, which aren't ideal but work)
[20:42:31] <Grinnz> frankly my "least resistance" approach would be to use minilla and tell it to use EUMM as the installer
[20:42:46] <Grinnz> and still put the resources in lib cause whatever
[20:43:38] <thowe> I still need to finish the conversion from Catalyst to Mojo, but I am almost there.  I got distracted working on something else.
[20:45:37] <thowe> but today I must remove the roof from an old chicken shed...
[20:46:10] <thowe> hm, one can't set away anymore?
[20:46:32] <Grinnz> /away <message> works in most clients
[20:46:44] *** Joins: thrig (~thrig@65.113.153.50)
[20:46:49] * GumbyPAN CPAN Upload: Prima-1.62_1 by KARASIK https://metacpan.org/release/KARASIK/Prima-1.62_1
[20:46:49] * GumbyPAN CPAN Upload: Devel-Git-MultiBisect-0.15 by JKEENAN https://metacpan.org/release/JKEENAN/Devel-Git-MultiBisect-0.15
[20:47:49] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Remote host closed the connection)
[20:48:29] <thowe> grinnz, never tried before in Convos, but apparently it's not there...  anyway
[20:48:57] <Grinnz> try /quote away <message>?
[20:49:03] <Grinnz> it's a builtin irc command
[20:53:31] *** Quits: aman (~aman@user/aman) (Ping timeout: 252 seconds)
[20:55:20] *** Joins: aman (~aman@user/aman)
[20:55:25] <shlomif> shabbath shalom / shavua tov, everybrony
[21:01:50] * GumbyPAN CPAN Upload: Markdown-Compiler-0.001 by SYMKAT https://metacpan.org/release/SYMKAT/Markdown-Compiler-0.001
[21:03:38] *** Joins: fling (~fling@user/fling)
[21:04:59] <leitz> I'm getting:   Undefined subroutine &Book::Collate::Utils::scrub_word called at lib/Book/Collate/Report.pm line 179.   
[21:05:03] <leitz> From:   https://github.com/LeamHall/book_collate/blob/add_report_tests/lib/Book/Collate/Report.pm#L179
[21:05:04] <Paperbot> Link title(s): [ book_collate/Report.pm at add_report_tests · LeamHall/book_collate · GitHub ]
[21:05:50] <huf> who's supposed to load that module here?
[21:06:14] <leitz> But line 138 is the same, and does not seem to error. The main difference is that generate_general_fry_stats is called directly, while _generate_fry_stats is called as a part of the object.
[21:06:42] <leitz> huf, I'll admit to not being sure what you mean.
[21:06:53] <huf> you're using a thing from a module you havent loaded
[21:07:02] *** Quits: mmlj4 (~mmlj4@ip68-230-228-233.no.no.cox.net) (Remote host closed the connection)
[21:07:36] <leitz> huf, ah, and "require Book::Collate::Utils" fixes it.
[21:07:42] <huf> or better yet, use
[21:07:46] <huf> use Book::Collate::Utils;
[21:08:10] <huf> maybe something else loaded it when you tried code A but that something did not run when you tried code B
[21:08:13] <huf> oslt
[21:09:23] <leitz> Ah, even better, I had created a Collate.pm with the various "use" statements but forgot to add Utils.
[21:09:45] <lopid> %fry_words wouldn't have been what you intended, either
[21:09:50] <huf> I'd still `use` it in each file where i use its functions
[21:09:54] <leitz> https://github.com/LeamHall/book_collate/blob/add_report_tests/lib/Book/Collate.pm#L28-L32
[21:09:55] <Paperbot> Link title(s): [ book_collate/Collate.pm at add_report_tests · LeamHall/book_collate · GitHub ]
[21:10:15] <huf> because that's how you're supposed to do it and it'll save you headaches like this in the future
[21:10:30] <huf> so dont rely on something else being loaded before this that happens to load the module you require
[21:10:41] <leitz> lopid, I'm still working on getting everything going.  :)
[21:10:41] <thrig> or Import::Base it into multiple things
[21:10:47] <huf> aye
[21:11:00] <huf> is this a base class?
[21:11:28] <huf> nay
[21:11:30] <leitz> Not sure what you mean.
[21:11:45] <thrig> all your Base.pm are belong to us?
[21:11:47] <huf> and anyway, use Foo; could have lexical effects
[21:11:53] <huf> so just load it in every file you need it
[21:13:41] <EvanCarroll> shlomif: YO
[21:15:40] <shlomif> EvanCarroll: sup?
[21:27:40] <leitz> lopid, yeah, not sure why the return %fry_used is now failing. Data::Dumper shows the data just fine.
[21:28:12] <thrig> does "failing" come with an error message?
[21:29:01] <leitz> thrig, not really. The file that's being written to doesn't show the data. The test, when Dumper is used, shows the data.
[21:29:41] <leitz> Let me put the code process together and explain.
[21:33:47] <leitz> This is where I'm working:   https://github.com/LeamHall/book_collate/blob/add_report_tests/lib/Book/Collate/Report.pm#L163-L198
[21:33:48] <Paperbot> Link title(s): [ book_collate/Report.pm at add_report_tests · LeamHall/book_collate · GitHub ]
[21:34:14] *** Quits: cation (cation@user/cation) (Quit: Leaving)
[21:34:29] <shlomif> leitz: you return a flattened hash? :(
[21:35:23] <leitz> The hash gets used on line 69 of https://github.com/LeamHall/book_collate/blob/add_report_tests/lib/Book/Collate/Writer/Report.pm#L40-L75
[21:35:24] <Paperbot> Link title(s): [ book_collate/Report.pm at add_report_tests · LeamHall/book_collate · GitHub ]
[21:36:51] <leitz> But when the string from lines 70-74 are printed, they just show the 0 values;
[21:37:33] <leitz> Ah, 0 values, and not what was set.
[21:37:44] <vague> leitz, you return a ref but assign it to a hash
[21:38:01] <thrig> generate_general_fry_stats returns a hashref, my %fry_used  = ... wants a hash
[21:38:57] <leitz> return %fry_used returns a ref?
[21:39:20] <vague> https://github.com/LeamHall/book_collate/blob/add_report_tests/lib/Book/Collate/Report.pm#L197
[21:39:20] <Paperbot> Link title(s): [ book_collate/Report.pm at add_report_tests · LeamHall/book_collate · GitHub ]
[21:39:22] <thrig> there seems to be a bunch of confusion between hash and hashrefs in this code, e.g. converting from a ref to a hash (why??) ...
[21:40:15] <vague> \%fry_used makes it a ref
[21:42:03] <leitz> vague, the reference makes the tests and the process fail, so I tried removing that. So far the tests don't choke but the file output doesn't show the modified data.
[21:42:27] *** Joins: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler)
[21:43:54] <leitz> If I change "miss" to 110 in line 176, the output file shows the 110. It does not show any modifications from lines 184 to 196, even though Dumper shows the data changed.
[21:44:35] <leitz> Is the %fry_used which is defined before the foreach not used inside the foreach?
[21:47:58] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[21:47:58] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[21:49:50] <vague> Try my (%fry_used) = here https://github.com/LeamHall/book_collate/blob/add_report_tests/lib/Book/Collate/Writer/Report.pm#L69 , I'm unsure about lists but it might matter. More parens to the people
[21:49:51] <Paperbot> Link title(s): [ book_collate/Report.pm at add_report_tests · LeamHall/book_collate · GitHub ]
[21:53:35] <leitz> vague, didn't seem to work. I'm going to step away for a bit and let my brain process it.
[21:55:50] <leitz> Returning a reference, and then dereferencing it, doesn't seem to help either...
[21:57:17] *** Joins: Adoi (~Adoi@user/adoi)
[22:04:05] *** Joins: monkey_ (~user@190.104.116.134)
[22:06:40] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Ping timeout: 252 seconds)
[22:11:43] *** Joins: amnesiac (~marco@c-73-189-251-48.hsd1.ca.comcast.net)
[22:12:02] *** Joins: jlenz_ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[22:15:34] *** Quits: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[22:16:09] *** Quits: amnesiac (~marco@c-73-189-251-48.hsd1.ca.comcast.net) (Ping timeout: 248 seconds)
[22:17:16] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[22:18:23] *** Joins: horsepatat (~horsepata@212.3.198.57)
[22:25:46] *** Joins: zakame (~zakame@user/zakame)
[22:31:14] *** Quits: horsepatat (~horsepata@212.3.198.57) (Read error: Connection reset by peer)
[22:31:59] * GumbyPAN CPAN Upload: Finance-IG-0.102 by MARKWIN https://metacpan.org/release/MARKWIN/Finance-IG-0.102
[22:33:25] *** Joins: amnesiac (~marco@c-73-189-251-48.hsd1.ca.comcast.net)
[22:34:43] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 252 seconds)
[22:47:54] *** Joins: magla (~gelignite@55d457aa.access.ecotel.net)
[22:55:40] *** Quits: aman (~aman@user/aman) (Ping timeout: 240 seconds)
[22:57:02] * GumbyPAN CPAN Upload: Data-Validate-Domain-0.15 by DROLSKY https://metacpan.org/release/DROLSKY/Data-Validate-Domain-0.15
[22:57:44] *** Joins: aman (~aman@user/aman)
[23:04:25] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[23:09:35] *** Joins: monkey_ (~user@190.104.116.134)
[23:15:19] *** Joins: proller (~p@2002:50f0:d845:10:41a5:ca2e:e623:f4b4)
[23:24:49] *** Quits: magla (~gelignite@55d457aa.access.ecotel.net) (Quit: Stay safe!)
[23:43:16] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[23:44:00] *** Joins: monkey_ (~user@190.104.116.134)
[23:48:44] *** Quits: proller (~p@2002:50f0:d845:10:41a5:ca2e:e623:f4b4) (Ping timeout: 250 seconds)
[23:56:36] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
