[00:02:48] *** Joins: Skarsnik_ (~Skarsnik@91-170-31-218.subs.proxad.net)
[00:17:35] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Ping timeout: 250 seconds)
[00:17:48] *** Quits: sienet_ja_LSD[m] (~sienetjal@2001:470:69fc:105::1:456c) (Ping timeout: 250 seconds)
[00:17:48] *** Quits: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1) (Ping timeout: 250 seconds)
[00:18:07] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Quit: WeeChat 3.3)
[00:19:02] *** Quits: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8) (Ping timeout: 240 seconds)
[00:19:02] *** Quits: demostanis[m] (~demostani@2001:470:69fc:105::2c2) (Ping timeout: 240 seconds)
[00:21:14] *** Quits: CIAvash (~ciavash@2001:470:69fc:105::264) (Ping timeout: 268 seconds)
[00:21:51] *** Quits: mathias[m]12 (~mathiasma@2001:470:69fc:105::1:4713) (Ping timeout: 268 seconds)
[00:21:51] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Ping timeout: 268 seconds)
[00:26:27] *** vrurg_ is now known as vrurg
[00:28:37] <merryprog> yay my rakudo installation is broken üôÉ
[00:29:19] <merryprog> raku repl wasn't working, homebrew uninstalled rakudo-star, homebrew installed rakudo, now errors with "Unhandled exception: Missing or wrong version of dependency 'gen/moar/stage2/MASTNodes.nqp' (from 'gen/moar/Pod.nqp')"
[00:29:47] <merryprog> (Raku repl wasn't working = no prompt would ever appear and didn't respond to input)
[00:31:23] <tonyo> merryprog: what is the bug with positive lookbehinds?
[00:32:01] <merryprog> tonyo variable interpolation in a positive lookbehind will effectively reverse the argument
[00:32:21] <merryprog> m: my $num = 12; say S:g/<?after $num>/!/ with "12 21"; say S:g/<?after 12>/!/ with "12 21"
[00:32:21] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´12 21!‚ê§12! 21‚ê§¬ª
[00:33:36] <merryprog> what seems to be happening is it reverses the ast (or something magical, I don't really know) when doing a lookbehind but for some reason it doesn't compare the interpolated reversed during that comparison
[00:33:53] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[00:38:09] <lizmat> merryprog: that feels like a known issue, fwiw
[00:38:20] <merryprog> oh. Checked the issue tracker but didn't see it.
[00:38:29] <lizmat> maybe in nqp ?
[00:38:31] <merryprog> yeah
[00:38:37] <merryprog> Looks like the lookbehind stuff is a bit WIP considering its test suite is commented out :P
[00:38:49] <lizmat> could very well be
[00:38:58] *** Joins: CIAvash (~ciavash@2001:470:69fc:105::264)
[00:39:03] *** Joins: mathias[m]12 (~mathiasma@2001:470:69fc:105::1:4713)
[00:41:34] <merryprog> If it is known/WIP then I won't bother looking into this more‚ÄîI underestimated how scary AST combined with Regex parsing would be...
[00:42:50] <[Coke]> We should make sure there's a bug open, probably
[00:43:18] <[Coke]> anyone else having issues with AOC Day 8, Part 2 (no spoilers)
[00:43:32] <[Coke]> (I solve the sample data, but not the real data)
[00:44:33] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[00:46:41] *** Joins: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1)
[00:46:44] *** Joins: sienet_ja_LSD[m] (~sienetjal@2001:470:69fc:105::1:456c)
[00:47:30] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[00:51:02] <MasterDuke> merryprog: there was some chat about that bug over in #moarvm last night https://logs.liz.nl/moarvm/2021-12-08.html#21:25
[00:51:37] <merryprog> oh nice, you beat me to it :)
[00:51:55] <MasterDuke> well, i haven't fixed anything
[00:52:14] <MasterDuke> feel completely free to beat me to that
[00:52:41] <merryprog> well you actually know what you're doing...
[00:53:25] <MasterDuke> ha, almost entirely untrue when it comes to the grammar/regex implementation
[00:53:53] <merryprog> pfft
[00:54:05] *** Joins: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[00:58:52] <japhb> I knew MasterDuke was going to say something like that, but it ruins the humble if someone else says it for them.  ;-)
[00:59:46] <MasterDuke> heh. wish i was exaggerating the humbleness, but not the case this time
[01:01:27] <tonyo> m: m: my $num = 12; say S:g/<?after "$num">/!/ with "12 21";
[01:01:27] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´12 21!‚ê§¬ª
[01:01:38] <tonyo> oop
[01:11:33] *** Quits: TheAthlete (~TheAthlet@176.96.230.100) (Quit: Connection closed)
[01:18:57] *** Joins: lichtkind_ (~lichtkind@p200300d0a722726a2d77365543b3ae05.dip0.t-ipconnect.de)
[01:21:11] *** Joins: demostanis[m] (~demostani@2001:470:69fc:105::2c2)
[01:21:25] *** Quits: lichtkind (~lichtkind@p200300d0a72272f12d77365543b3ae05.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[01:22:25] *** Joins: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8)
[01:25:07] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[01:28:10] <ggoebel> coke: I was able to solve AOC day 8 part 2. can you share your input? and answer? I'll run code against it and let you know if I get the same result (no spoilers)
[01:52:05] *** Quits: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8) (Write error: Connection reset by peer)
[01:52:07] *** Quits: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1) (Read error: Connection reset by peer)
[01:52:07] *** Quits: CIAvash (~ciavash@2001:470:69fc:105::264) (Read error: Connection reset by peer)
[01:52:08] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Write error: Connection reset by peer)
[01:52:08] *** Quits: mathias[m]12 (~mathiasma@2001:470:69fc:105::1:4713) (Read error: Connection reset by peer)
[01:52:09] *** Quits: demostanis[m] (~demostani@2001:470:69fc:105::2c2) (Write error: Connection reset by peer)
[01:52:10] *** Quits: sienet_ja_LSD[m] (~sienetjal@2001:470:69fc:105::1:456c) (Read error: Connection reset by peer)
[01:52:25] *** Joins: hobbs (~andrew@pool-96-242-144-62.nwrknj.fios.verizon.net)
[01:53:39] <hobbs> https://gist.github.com/arodland/b433602c13527dc6baf391e295e0374a -- advent of code day 8 (yesterday) in raku. Mildly untidy but Raku made a decent fit
[01:54:42] *** Joins: CIAvash (~ciavash@2001:470:69fc:105::264)
[01:56:07] <elcaro> OH! When was slippy semilist (`@m[||@xy]`) added to v6.e.PREVIEW ?! I'm sure it didn't work last time I tried
[01:56:09] *** Joins: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1)
[01:56:09] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[01:56:09] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[01:56:09] *** Joins: demostanis[m] (~demostani@2001:470:69fc:105::2c2)
[01:56:09] *** Joins: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8)
[01:56:22] *** Joins: mathias[m] (~mathiasma@2001:470:69fc:105::1:4713)
[01:56:28] <elcaro> Which admittedly was probably 12 months ago
[01:56:34] *** Joins: sienet_ja_LSD[m] (~sienetjal@2001:470:69fc:105::1:456c)
[01:58:36] <elcaro> To which I mean... I know it was added to Associatives a while back (`.{||@keys}`), but I'm sure I tried it on an Array at the time and it didn't work
[02:01:56] *** Quits: hobbs (~andrew@pool-96-242-144-62.nwrknj.fios.verizon.net) (Quit: Leaving)
[02:12:21] *** Quits: Ergo444 (~Ergo444@2E8B6AFC.catv.pool.telekom.hu) (Quit: Connection closed)
[02:13:25] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:1b4:2cec:47c3:871e) (Ping timeout: 240 seconds)
[02:16:42] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Client limit exceeded: 20000)
[02:17:04] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Quit: Client limit exceeded: 20000)
[02:17:05] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[02:17:57] *** Quits: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1) (Quit: Client limit exceeded: 20000)
[02:18:53] *** Quits: CIAvash (~ciavash@2001:470:69fc:105::264) (Quit: Client limit exceeded: 20000)
[02:22:25] *** Quits: demostanis[m] (~demostani@2001:470:69fc:105::2c2) (Quit: Client limit exceeded: 20000)
[02:44:18] *** Quits: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8) (Quit: Client limit exceeded: 20000)
[02:44:29] *** Quits: lichtkind_ (~lichtkind@p200300d0a722726a2d77365543b3ae05.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:46:13] *** Joins: Sgeo (~Sgeo@user/sgeo)
[02:49:26] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[02:59:36] <[Coke]> ggoebel: found the bug in my algo. Just got lucky on the sample data.
[02:59:51] *** Joins: CIAvash (~ciavash@2001:470:69fc:105::264)
[03:00:03] *** Joins: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1)
[03:00:03] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[03:00:03] *** Joins: demostanis[m] (~demostani@2001:470:69fc:105::2c2)
[03:00:15] *** Joins: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8)
[03:15:44] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9808:86a6:acca:9c5)
[03:16:31] <[Coke]> (my bug depended on the order of digits on the LHS)
[03:26:27] *** Quits: Skarsnik_ (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 265 seconds)
[03:34:24] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:35:00] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[03:43:00] <gfldex> elcaro: https://gfldex.wordpress.com/2020/10/26/planned-obsolescence/
[03:53:15] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:12:32] <elcaro> gfldex: yeah I knew about this, and used your module prior... but I thought it was only `postcircumfix:<{|| }>` ... not `postcircumfix:<[|| ]>`
[04:13:16] <elcaro> when your blog post was published, I'm sure I tried using it on a matrix and it didn't work. maybe I'm wrong... or maybe it was fixed later.
[04:26:15] <gfldex> elcaro: It can take a few weeks for PRs to make it into a release.
[04:31:39] *** Joins: xinming (~xinming@115.219.34.239)
[04:47:08] *** Quits: jgaz (~jgaz@2600:8805:d982:4233::9e0) (Remote host closed the connection)
[04:47:20] *** Joins: jgaz (~jgaz@2600:8805:d982:4233:2e0:4cff:fe00:e201)
[04:53:50] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[04:58:04] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[05:11:52] *** Quits: jgaz (~jgaz@2600:8805:d982:4233:2e0:4cff:fe00:e201) (Quit: Leaving)
[05:27:10] *** Quits: xinming (~xinming@115.219.34.239) (Ping timeout: 260 seconds)
[05:32:33] *** Joins: frost (~frost@user/frost)
[05:37:35] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 250 seconds)
[05:45:34] *** Joins: xinming (~xinming@115.219.34.239)
[05:47:40] <elcaro> gfldex: It was after the merge... more likely I forgot to use v6.e.PREVIEW before testing :/
[05:48:36] <elcaro> glad it's there, tho... seems I've been awaiting a feature that's been implemented for over a year :D
[05:52:50] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 260 seconds)
[06:06:16] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[06:20:49] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 252 seconds)
[06:32:03] *** Quits: nine (~nine@comm.detonation.org) (Remote host closed the connection)
[06:32:09] *** Joins: nine (~nine@comm.detonation.org)
[06:33:35] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[07:20:35] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 252 seconds)
[08:20:36] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:20:36] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:20:36] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:20:36] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:20:36] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:20:36] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:20:36] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:20:36] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:20:36] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:20:36] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:20:36] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:20:36] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:20:36] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:20:36] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:20:36] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:20:36] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:20:36] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:20:36] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:20:36] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:21:08] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[08:21:15] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[08:21:29] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[08:22:03] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[08:22:03] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[08:22:05] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[08:22:22] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[08:22:39] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[08:22:49] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[08:23:29] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[09:20:59] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[09:21:26] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[09:22:34] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[09:23:42] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[09:38:15] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:39:50] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[09:41:13] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:42:24] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[10:04:50] *** Quits: mathias[m] (~mathiasma@2001:470:69fc:105::1:4713) (Quit: Client limit exceeded: 20000)
[10:22:14] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[10:22:51] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[10:23:42] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[10:35:00] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:59:56] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[11:00:54] *** Joins: seednode (~seednode@user/seednode)
[11:28:08] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:30:46] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[11:37:58] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:43:32] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 240 seconds)
[11:44:39] *** Joins: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at)
[12:08:10] *** Joins: jjido (~Denis@90.213.58.125)
[12:13:32] *** Joins: TheAthlete (~TheAthlet@176.96.230.95)
[13:05:03] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:15:21] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[13:15:22] *** Quits: TheAthlete (~TheAthlet@176.96.230.95) (Remote host closed the connection)
[13:21:40] *** Joins: lichtkind_ (~lichtkind@p200300d0a722726a2d77365543b3ae05.dip0.t-ipconnect.de)
[13:22:26] *** Joins: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[13:23:22] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 265 seconds)
[13:23:22] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 265 seconds)
[13:24:19] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 252 seconds)
[13:24:37] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 240 seconds)
[13:24:38] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[13:24:41] *** Quits: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Client Quit)
[13:24:54] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[13:25:34] *** Joins: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[13:25:59] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[13:33:12] *** Joins: Skarsnik_ (~Skarsnik@91-170-31-218.subs.proxad.net)
[14:10:47] <Manifest0> How can i invoke a method from an object, when i have the method name as string in a var, like this: class A{method t(){say "t!!"}}; my $a = A.new(); my $m = 't'; $a.$m(); ?
[14:10:59] *** Joins: mathias[m] (~mathiasma@2001:470:69fc:105::1:4713)
[14:19:23] <gfldex> m: class A{method t(){say "t!!"}}; my $a = A.new(); my $m = 't'; $a.$m();
[14:19:23] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´No such method 'CALL-ME' for invocant of type 'Str'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[14:19:27] <gfldex> m: class A{method t(){say "t!!"}}; my $a = A.new(); my $m = 't'; $a."$m"();
[14:19:28] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´t!!‚ê§¬ª
[14:20:48] <Manifest0> gfldex: super! :-)
[14:24:27] <Manifest0> i have to say, though, it's not intuitive
[14:38:42] *** Joins: frost (~frost@user/frost)
[14:38:59] *** Joins: ab5tract (~ab5tract@2a02:a210:8ad:1f00:3323:c252:3272:779e)
[14:45:40] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[15:07:27] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:07:49] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[15:10:26] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[15:12:57] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:19:57] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[15:32:22] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[15:33:05] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:34:24] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:42:32] *** Quits: Skarsnik_ (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 240 seconds)
[16:01:19] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[16:01:30] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[16:05:47] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[16:05:54] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[16:05:57] *** Joins: Ergo444 (~Ergo444@2E8B6AFC.catv.pool.telekom.hu)
[16:06:12] <Ergo444> hi
[16:06:24] <Ergo444> where can I view the log of this channel?
[16:06:46] <lizmat> https://logs.liz.nl/raku/live.html
[16:14:18] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[16:18:38] *** Quits: ab5tract (~ab5tract@2a02:a210:8ad:1f00:3323:c252:3272:779e) (Quit: Client closed)
[16:22:09] *** Quits: [Coke] (~coke@172.58.235.142) (Ping timeout: 252 seconds)
[16:29:35] *** Joins: [Coke] (~coke@172.58.236.56)
[16:29:37] *** Joins: jgaz (~jgaz@2600:8805:d982:4233::9e0)
[16:34:04] <lucs> How can I successfully slurp in (or something) a latin1 encoded file when I don't happen to know the encoding?
[16:34:51] <lizmat> slurp :encoding("latin1")  ?
[16:35:19] <lucs> Yeah, but I don't know the encoding, it might be UTF-8 or latin1.
[16:35:31] <lizmat> actually: :enc<latin1>
[16:35:39] <lucs> Fair enough, still :)
[16:36:00] <lizmat> then utf8-c8 as encoding perhaps ?
[16:36:25] <lucs> Hmm... I'll try-that.
[16:38:54] <lucs> Still complains of malformed UTF-8 :(
[16:39:47] <Ergo444> not suprising
[16:40:27] <lucs> I'd try to trap the exception, except that the data is coming from $*IN, so if it fails at first, I think the data is not available to try again, or is it?
[16:42:44] <lucs> Is there any way to get the raw $*IN contents into a variable and work from that?
[16:43:45] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[16:43:54] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[16:44:17] <lizmat> slurp(:bin) will give you a Bug
[16:44:20] <lizmat> *Buf
[16:44:37] <lucs> Oh, okay, never worked with those, will read up on them.
[16:44:40] <lucs> Thanks.
[16:48:26] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[16:48:34] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[16:55:26] *** Joins: mscha (~mscha@logger.mscha.org)
[16:55:54] <mscha> m: class Foo { rule foo { foo }; method bar($s) { dd $s ~~ /<foo>/  } }; Foo.new.bar('foo');
[16:55:54] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´No such method 'foo' for invocant of type 'Match'‚ê§  in method bar at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[16:55:59] <mscha> m: class Foo { my rule foo { foo }; method bar($s) { dd $s ~~ /<&foo>/  } }; Foo.new.bar('foo');
[16:55:59] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Match.new(:orig("foo"), :from(0), :pos(3))‚ê§¬ª
[16:57:15] <mscha> Declaring a `rule` (or `token`, `regex`) is apparently legal outside of a Grammar, but is unusable as far as I can tell.  Why isn't he first one a syntax error?
[17:06:40] *** Joins: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[17:07:06] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:07:41] *** Quits: [Coke] (~coke@172.58.236.56) (Ping timeout: 250 seconds)
[17:08:15] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 268 seconds)
[17:08:51] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 268 seconds)
[17:10:24] *** Joins: [Coke] (~coke@172.58.236.6)
[17:15:28] *** Joins: ab5tract (~ab5tract@2a02:a210:8ad:1f00:3323:c252:3272:779e)
[17:16:36] <ab5tract> m: class A{method t(){say "t!!"}}; my $a = A.new(); my $m = 't'; $a.<<$m>>();
[17:16:36] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Type A does not support associative indexing.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[17:16:54] <ab5tract> (was simply curious :)  )
[17:21:18] *** Quits: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:21:29] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[17:22:22] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[17:24:32] *** Joins: TempIRCLogger__ (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[17:24:44] *** Quits: TempIRCLogger__ (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[17:28:10] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[17:30:52] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[17:31:02] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[17:33:44] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[17:33:54] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[17:38:21] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[17:38:28] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[17:38:35] *** Joins: habere-et-disper (~habere-et@86-40-144-207-dynamic.b-ras2.rtd.sligo.eircom.net)
[17:40:22] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[17:40:32] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[17:43:08] <habere-et-disper> What is the recommended/idiomatic way to sort an array of arrays?
[17:43:35] <habere-et-disper> m: say sort [ [1,3,2], [5,4,6], [6,2,1] ].map: *.sort
[17:43:35] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´((1 2 3) (1 2 6) (4 5 6))‚ê§¬ª
[17:44:02] <habere-et-disper> It seems we have to say sort twice?
[17:44:35] <lizmat> what is the criterium to sort the lists on ?
[17:44:35] <habere-et-disper> Maybe that is a good compromise for composability?
[17:44:38] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[17:44:43] *** Quits: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at) (Read error: Connection reset by peer)
[17:44:45] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[17:46:10] <habere-et-disper> lizmat ascending numerical order is fine
[17:46:45] <lizmat> so you want to sort on the first element, if that's the same, sort on the next, etc ?
[17:47:01] <lizmat> after having sorted all of the "sub" arrays ?
[17:47:14] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[17:47:40] <habere-et-disper> Sort all the sub-arrays, then the top array.
[17:47:57] <habere-et-disper> Which I sort of think of as a default in this case?
[17:48:20] <lizmat> well, I think it will stringify arrays and compare that
[17:48:26] <lizmat> which is... suboptimal
[17:50:45] <habere-et-disper> okay, thanks.
[17:55:56] <habere-et-disper> Are we using the Edit Distance/Levenshtien algorithm to make suggestions? That would seem to automatically catch typos.
[17:56:20] <lizmat> yes, we are, plus some specific suggestions
[17:56:29] <lizmat> m: say "foo".length
[17:56:29] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´No such method 'length' for invocant of type 'Str'.  Did you mean any‚ê§of these: 'chars', 'codes'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[17:58:47] <habere-et-disper> Wow! Excellent. Thanks.
[18:02:40] *** Joins: TempIRCLogger__ (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[18:02:51] *** Joins: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[18:03:28] *** Joins: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at)
[18:03:32] *** Quits: habere-et-disper (~habere-et@86-40-144-207-dynamic.b-ras2.rtd.sligo.eircom.net) (Ping timeout: 240 seconds)
[18:04:02] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 240 seconds)
[18:04:54] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 256 seconds)
[18:05:07] *** Quits: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Client Quit)
[18:05:18] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[18:16:07] *** Quits: TempIRCLogger__ (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[18:17:15] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[18:19:48] *** Quits: mscha (~mscha@logger.mscha.org) (Quit: Connection closed)
[18:25:47] *** Quits: eseyman (~manu@lfbn-idf1-1-532-49.w86-242.abo.wanadoo.fr) (Read error: Connection reset by peer)
[18:28:51] <tbrowder> publishing modules to Zef with mi6 is now soooo easy. i have now published 8 there which were orig on cpan and will do more.
[18:29:00] *** Joins: mcmillhj (~mcmillhj@c-va-bf0f2b8e02-14356-1.tingfiber.com)
[18:29:43] <tbrowder> if you haven't been using App::Mi6 for module management you have been missing the boat
[18:30:29] *** Joins: Ergo4444 (~Ergo444@2E8B6AFC.catv.pool.telekom.hu)
[18:30:44] *** Quits: Ergo4444 (~Ergo444@2E8B6AFC.catv.pool.telekom.hu) (Client Quit)
[18:31:00] <Ergo444> how can I empty a hash?
[18:31:29] <Ergo444> m: my %h; %h = {};
[18:31:29] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of hash composer on right side of hash assignment; did you mean := instead?‚ê§    at <tmp>:1‚ê§    ------> 3my %h; %h = {}7‚èè5;‚ê§¬ª
[18:31:41] <Ergo444> What is wrong in here?
[18:33:17] <SmokeMachine> m: my %h = :a, :b; say %h; %h = (); say %h
[18:33:17] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´{a => True, b => True}‚ê§{}‚ê§¬ª
[18:33:21] <lizmat> m: my %h; %h = ();
[18:33:22] <camelia> rakudo-moar b5a71ab2a: ( no output )
[18:34:07] <mcmillhj> Maybe I am being dense and not understanding the documentation, but is there are there methods for adding and removing elements from sets? Or am I supposed to use the set operators for this? https://docs.raku.org/type/Set
[18:34:38] <El_Che> "A Set is an immutable set"
[18:34:47] <El_Che> "(For mutable sets, see SetHash instead.)"
[18:35:04] *** Joins: eseyman (~manu@lfbn-idf1-1-532-49.w86-242.abo.wanadoo.fr)
[18:35:26] <lizmat> m: my %s is SetHash; %s.set: 1,2,3; dd %s
[18:35:27] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Too many positionals passed; expected 2 arguments but got 4‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[18:35:39] <lizmat> m: my %s is SetHash; %s.add: 1,2,3; dd %s
[18:35:40] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´No such method 'add' for invocant of type 'SetHash'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[18:35:42] <lizmat> hmmm
[18:36:11] <mcmillhj> El_Che sorry, I did mean to link SetHash I have both tabs open :)
[18:36:36] <lizmat> m: my %s is SetHash; %s.set: (1,2,3); dd %s
[18:36:36] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´SetHash.new(2,1,3)‚ê§¬ª
[18:36:47] <mcmillhj> lizmat okay, but to test for existence do I just `%s{<KEY HERE>}` ? 
[18:36:55] <lizmat> mcmillhj: indeed
[18:37:12] <lizmat> m: my %s is SetHash; %s.set: (1,2,3); dd %s{1}; dd %s{0}
[18:37:12] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Bool::True‚ê§Bool::False‚ê§¬ª
[18:37:31] <mcmillhj> okay, great. I think I was just not understanding the documentation. Thanks all.
[18:40:08] <El_Che> mcmillhj: then the documentation may need some love
[18:41:44] <mcmillhj> El_Che I think it was more me being confused / not reading carefully. I was just kind of expecting an API like I have seen in other languages: .add, .has, etc... My bias isn't the docs fault though :)
[18:43:44] <lizmat> mcmillhj: BagHashes have .add
[18:43:57] <Ergo444> hello what is wrong with this?
[18:44:08] <lizmat> mcmillhj: SetHashes also have .unset
[18:44:10] <Ergo444> m: my %h; %h = {};
[18:44:10] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of hash composer on right side of hash assignment; did you mean := instead?‚ê§    at <tmp>:1‚ê§    ------> 3my %h; %h = {}7‚èè5;‚ê§¬ª
[18:44:33] <Ergo444> useless use?
[18:44:42] <Ergo444> it is not useless
[18:44:59] <lizmat> Ergo444: so what do you think it should do ?
[18:45:09] <Ergo444> empty the hash
[18:45:17] <lizmat> %h = ()
[18:45:21] <lizmat> will do that for you
[18:45:32] <Ergo444> what is wrong with {}?
[18:45:47] <lizmat> well, its semantics are not clear
[18:45:57] <Ergo444> how so?
[18:46:52] <lizmat> should it flatten or not ?
[18:47:15] <lizmat> %h = () will reset an existing Hash object
[18:47:36] <lizmat> %h := { } will re-bind the %h to a fresh (empty) Hash object
[18:47:40] <Ergo444> flatten?
[18:47:44] <Ergo444> Flatten what?
[18:47:58] <lizmat> the right hand side of %h =  }
[18:48:00] <lizmat> the right hand side of %h = { }
[18:48:09] <Ergo444> there is nothing to flatten
[18:48:24] <lizmat> yes there is, A Hash object
[18:48:32] <lizmat> %h = { }
[18:48:39] <lizmat> is effectively the same as:
[18:48:43] <lizmat> %h = Hash.new
[18:49:27] <Ergo444> and?
[18:52:51] <Ergo444> How would an object be flattened?
[18:53:03] <Ergo444> I only know this term with lists.
[18:53:31] <Ergo444> What does it mean to flatten an object?
[18:54:01] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:54:29] <lizmat> well, generally we talk about it in the context of arrays / hashes only
[18:54:59] <lizmat> m: my @a = { :a, :b }; dd @a
[18:54:59] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Array @a = [:b(Bool::True), :a(Bool::True)]‚ê§¬ª
[18:55:13] <lizmat> this flattened the hash into Pairs in the array
[18:55:25] <lizmat> m: my @a = { :a, :b }, { :c, :d }; dd @a
[18:55:25] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Array @a = [{:a(Bool::True), :b(Bool::True)}, {:c(Bool::True), :d(Bool::True)}]‚ê§¬ª
[18:55:36] <lizmat> this did not, because of the single argument rule
[19:03:07] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9808:86a6:acca:9c5) (Ping timeout: 252 seconds)
[19:05:01] *** Quits: mcmillhj (~mcmillhj@c-va-bf0f2b8e02-14356-1.tingfiber.com) (Quit: Connection closed)
[19:05:02] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:f0cf:5664:8ee5:8e87)
[19:08:27] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[19:08:34] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[19:08:45] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[19:08:56] *** Joins: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[19:10:03] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[19:10:11] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[19:37:51] <Ergo444> What is the single assignment rule?
[19:38:54] *** Joins: mcmillhj (~mcmillhj@c-va-bf0f2b8e02-14356-1.tingfiber.com)
[19:39:29] <lizmat> single argument rule
[19:40:06] <lizmat> m: my @a = ^5; for @a { dd $_ }
[19:40:06] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Int @a = 0‚ê§Int @a = 1‚ê§Int @a = 2‚ê§Int @a = 3‚ê§Int @a = 4‚ê§¬ª
[19:40:15] <lizmat> note that this flattened the array in the for loop
[19:40:22] <lizmat> m: my @a = ^5; for @a, @a { dd $_ }
[19:40:22] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Array @a = [0, 1, 2, 3, 4]‚ê§Array @a = [0, 1, 2, 3, 4]‚ê§¬ª
[19:40:36] <lizmat> note that this did not, because the for loop got more than 1 argument
[19:41:31] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[19:56:01] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Remote host closed the connection)
[19:59:01] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[20:04:15] *** Quits: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at) (Remote host closed the connection)
[20:04:15] *** Joins: Guest36 (~Guest36@187.183.40.177)
[20:04:25] <Guest36> Beat do raku
[20:06:41] <ab5tract> The single argument rule should arguably ( ;)  ) be considered the lynch pin to understanding the somewhat odd corners of when to slip/flatten and when to not. IIRC this was basically how we came to "solve" the GLR (Great List Refactor).
[20:07:21] <ab5tract> which reminds me to ask a) how is TimToady these days?; and b) where is the butterfly book? :)
[20:08:55] *** Quits: Guest36 (~Guest36@187.183.40.177) (Client Quit)
[20:34:49] *** Quits: lichtkind_ (~lichtkind@p200300d0a722726a2d77365543b3ae05.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[20:44:34] *** Joins: lichtkind (~lichtkind@p200300d0a722726a491c41ff6bff10f8.dip0.t-ipconnect.de)
[21:03:03] *** Quits: ab5tract (~ab5tract@2a02:a210:8ad:1f00:3323:c252:3272:779e) (Quit: Client closed)
[21:04:29] *** Quits: mcmillhj (~mcmillhj@c-va-bf0f2b8e02-14356-1.tingfiber.com) (Ping timeout: 250 seconds)
[21:06:36] *** Quits: Ergo444 (~Ergo444@2E8B6AFC.catv.pool.telekom.hu) (Quit: Connection closed)
[21:14:49] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Quit: Leaving)
[21:32:43] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:39:03] *** Joins: abraxxa-home (~alex@smtp.hartmaier.priv.at)
[21:50:08] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[22:11:15] *** Joins: mcmillhj (~mcmillhj@c-va-bf0f2b8e02-14356-1.tingfiber.com)
[22:31:24] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[22:32:39] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[22:34:02] <mcmillhj> m: class Point { has Int $.x; has $.y; method find(SetHash[Point] %search-space) { return Nil; } }; my $p = Point.new(x => 0, y => 0); $p.find(SetHash.new);
[22:34:02] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Type check failed in binding to parameter '%search-space'; expected Associative[SetHash[Point]] but got SetHash (SetHash.new())‚ê§  in method find at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[22:34:29] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:34:34] <mcmillhj> ^ what's the correct way to type the `find` function if I want to accept a `SetHash` of `Point` objects
[22:40:39] <lizmat> m: class Point { has Int $.x; has $.y; method find(SetHash[Point] $search-space) { return Nil; } }; my $p = Point.new(x => 0, y => 0); $p.find(SetHash.new);
[22:40:39] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´Type check failed in binding to parameter '$search-space'; expected SetHash[Point] but got SetHash (SetHash.new())‚ê§  in method find at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[22:40:59] <lizmat> m: class Point { has Int $.x; has $.y; method find(SetHash[Point] $search-space) { return Nil; } }; my $p = Point.new(x => 0, y => 0); $p.find(SetHash[Point].new);
[22:40:59] <camelia> rakudo-moar b5a71ab2a: ( no output )
[22:41:07] <lizmat> mcmillhj ^^
[22:41:46] <lizmat> m: class Point { has Int $.x; has $.y; my constant SHP = SetHash[Point]; method find(SHP $search-space) { return Nil; } }; my $p = Point.new(x => 0, y => 0); $p.find(SHP.new);
[22:41:46] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    SHP used at line 1‚ê§‚ê§¬ª
[22:42:22] <mcmillhj> lizmat ty++
[22:42:37] <lizmat> m: class Point { has Int $.x; has $.y; our constant SHP = SetHash[Point]; method find(SHP $search-space) { return Nil; } }; my $p = Point.new(x => 0, y => 0); $p.find(SHP.new);
[22:42:37] <camelia> rakudo-moar b5a71ab2a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    SHP used at line 1‚ê§‚ê§¬ª
[22:43:09] <lizmat> m: class Point { ... }; our constant SHP = SetHash[Point]; class Point { has $.x; has $.y; method find(SHP $search-space) { return Nil; } }; my $p = Point.new(x => 0, y => 0); $p.find(SHP.new);
[22:43:09] <camelia> rakudo-moar b5a71ab2a: ( no output )
[22:43:48] <mcmillhj> oh nice, that looks a lot cleaner. Thank you.
[22:45:43] *** Quits: jgaz (~jgaz@2600:8805:d982:4233::9e0) (Quit: Leaving)
[22:46:30] <lizmat> mcmillhj: what is done there with class Point { ... }  is called "stubbing the class" so that it is known, and only later actually filled in
[22:47:45] <mcmillhj> lizmat I like it, it will let me rewrite my types in my domain
[22:54:01] *** Quits: abraxxa-home (~alex@smtp.hartmaier.priv.at) (Remote host closed the connection)
[23:31:56] *** Joins: Skarsnik_ (~Skarsnik@91-170-31-218.subs.proxad.net)
