[00:01:17] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[00:01:21] *** Quits: Thedarkb (~Thedarkb@82.3.80.190) (Ping timeout: 252 seconds)
[00:01:49] *** Quits: DPA- (~DPA@2a05:41c0:0:8104::a3c:10d) (Ping timeout: 240 seconds)
[00:03:27] <pragma-> Kerr: find what you were looking for?
[00:03:52] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[00:05:05] <fizzie> Kerr: Potentially the line you were looking for: <dave0> Kerr: https://sourceware.org/binutils/docs/as/Incbin.html
[00:05:37] <Kerr> Yep, thanks guys
[00:06:03] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[00:06:44] <fizzie> Well, there was an attached example as well, just for the record: https://0x0.st/oZFd.txt
[00:08:53] <Kerr> xxd -i is neat, for including a file in your binary... but I like this solution because it would only mean an object file ~the size of the binary file I wanted to include... while using xxd needs 6 bytes for each source byte.
[00:10:23] <Kerr> I'm trying to see if I can get it to work with inline assembly as opposed to a separate .s file - because then I could wrap it in a macro in my .c files...
[00:11:08] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[00:14:32] *** Quits: unknow (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[00:17:10] *** Quits: smoke (~smoke@user/smoke) (Ping timeout: 260 seconds)
[00:17:54] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[00:17:58] *** Joins: bick (~kotaman@94.46.203.147)
[00:18:22] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:19:08] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.99) (Ping timeout: 250 seconds)
[00:20:01] *** Joins: smoke (~smoke@user/smoke)
[00:20:58] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:22:53] *** Joins: soul-d (~uknown@user/soul-d)
[00:24:00] <Kerr> It seems that I very well can get it to work in inline asm, which is pretty darn cool
[00:24:31] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:25:49] <greeter> The more I learn about C, the cooler it gets. I feel like that's probably not an uncommon thing though
[00:26:32] <pragma-> don't get to know it TOO well or you might start to hate it
[00:26:55] <greeter> that's an interesting warning. why would i start to hate it by getting to know it too well?
[00:28:46] <markand> I hope n2904 will make it into C23
[00:28:51] <pragma-> because you might find things you don't like
[00:29:16] *** Joins: stefanos82 (~stefanos8@31-108-116.netrun.cytanet.com.cy)
[00:29:23] <greeter> ah i see. right now my only complaint is that i'm not knowledgeable enough with it, yet
[00:29:42] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:31:05] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.100)
[00:31:29] <Kerr> I hate to ask, but I'm very lost in assembly... How do I get a pointer to the current location counter? Here's what I have: https://pastebin.com/fLJ3z7Ss
[00:31:47] *** Joins: Viewday115 (~Viewday@user/viewday)
[00:31:53] *** Quits: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net) (Ping timeout: 256 seconds)
[00:32:45] <Kerr> greeter: https://youtu.be/tas0O586t80
[00:32:53] <pragma-> might get a faster answer in an assembly channel
[00:34:20] <greeter> Kerr: funny you link this today. earlier today i actually played around with dynamic memory allocation for the first time. didn't even trigger a segfault :-D
[00:35:03] *** rcf is now known as nsfw
[00:36:45] *** nsfw is now known as rcf
[00:38:36] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[00:40:37] *** Quits: stefanos82 (~stefanos8@31-108-116.netrun.cytanet.com.cy) (Quit: Leaving)
[00:43:25] *** Quits: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[00:44:39] *** Joins: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net)
[00:44:47] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:45:50] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1)
[00:54:42] *** Quits: dsrt^ (~dsrt@65.240.140.18) (Ping timeout: 252 seconds)
[00:54:46] *** Joins: seninha (~chatzilla@user/seninha)
[00:55:07] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[00:56:16] *** pooryori1k is now known as pooryorick
[00:56:22] *** Quits: cart_ (~cart@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[00:56:30] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[00:57:03] *** Quits: bick (~kotaman@94.46.203.147) (Quit: Lost terminal)
[00:57:40] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[00:59:03] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:59:06] *** Joins: faLUKE (~paolo@host-212-171-66-64.retail.telecomitalia.it)
[00:59:16] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[01:00:19] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[01:01:04] *** Joins: cation21 (cation@user/cation)
[01:01:24] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[01:01:48] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[01:02:29] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[01:04:26] *** cation21 is now known as cation
[01:04:57] <faLUKE> hello. I need a text editor for C programming on Lubuntu. I tried "kate", which has a panel reserved for the terminal (konsole), on which I can execute the compiling commands. However, konsole is very buggy. Is there an alternative or a way to fix this? IDEs like code::blocks are overkill for what I need
[01:05:31] <faLUKE> (in addition: code::blocks doesn't seem to have a template for a C project)
[01:07:05] <Kerr> I like geany
[01:07:23] <Kerr> It's got the ability to be an IDE, but doesn't have to be
[01:08:09] *** Joins: moog_ (~moog@98.97.86.136)
[01:08:12] <greeter> i've just been using vi, but that certainly isn't for everyone, and vim is probably a better choice for something like that
[01:08:33] <Kerr> It's perfectly happy to just open files and act like it's notepad++, but then when you really want something like setting breakpoints and using gdb, it's there
[01:09:13] <faLUKE> thanks
[01:09:20] *** Quits: AmR (~AmREiSa@156.207.194.71) (Quit: Konversation terminated!)
[01:10:39] *** Quits: moog (~moog@107.126.53.19) (Ping timeout: 252 seconds)
[01:11:10] *** Joins: cation21 (cation@user/cation)
[01:11:21] *** Quits: strajder (~strajder@user/strajder) (Quit: 'night)
[01:11:25] <nitrix> A text editor with LSP, autocompletion, some refactoring tools, maybe debugger integration, line annotations for git changes, formatting on save, tweaking a couple options here and there... and oh no, we've got ourselves an IDE.
[01:11:32] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[01:11:39] <nitrix> We certainly wouldn't want to use an IDE, that's uncool.
[01:12:01] *** Joins: dsrt^ (~dsrt@65.240.140.18)
[01:12:33] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Remote host closed the connection)
[01:13:05] <Kerr> I still can't quite seem to get this to work: https://pastebin.com/KdpLBG2y the start position gives me a value, the end position gives me null. if I try to dereference the start position, then it segfaults.
[01:13:53] <nitrix> You're quick to dismiss things as overkill when you can't even get the other simpler alternatives to do correctly the few things that they do.
[01:14:29] *** cation21 is now known as cation
[01:14:59] *** Joins: alex_ (~alex11@user/alex11)
[01:15:05] <nitrix> Kerr, That's not how incbin works, they aren't pointers.
[01:15:07] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[01:15:55] *** Quits: alex_ (~alex11@user/alex11) (Client Quit)
[01:16:16] <Kerr> what should I be doing then? I'm 100% new to any assembly so it's non-obvious to me
[01:16:44] <nitrix> Then don't use assembly. They are libraries that do this for you and modern compilers also have support for it built-in.
[01:16:46] *** Quits: alex11 (~alex11@user/alex11) (Ping timeout: 250 seconds)
[01:17:34] <nitrix> The most common one probably being https://github.com/graphitemaster/incbin
[01:17:35] <candide> Title of nitrix's link: GitHub - graphitemaster/incbin: Include binary files in C/C++
[01:17:52] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:18:36] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 240 seconds)
[01:20:57] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[01:20:57] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:21:05] *** Joins: henistein (~henistein@2001:8a0:fcba:5601:d851:f87b:1171:33f4)
[01:22:02] *** Joins: JanC (~janc@user/janc)
[01:22:29] *** Joins: banc- (~banc@146.70.61.139)
[01:22:36] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[01:24:23] <veltas> faLUKE: You don't need to use the terminal in kate if you don't want. There's also kwrite which is kate with less features
[01:24:44] <Kerr> nitrix I suppose I'll never learn then
[01:25:26] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.100) (Ping timeout: 250 seconds)
[01:26:24] *** Joins: ski (~ski@remote12.chalmers.se)
[01:26:39] <SaltHilStroller_> Why can I not switch on pointer addresses like so: https://onlinegdb.com/7Zz2BhHqZ
[01:26:55] <SaltHilStroller_> Everything needed should be known at compile time
[01:27:06] <fizzie> Because `switch` statements are limited to integers.
[01:27:17] <SaltHilStroller_> fizzie: True, but I've cast to an int
[01:27:22] <veltas> Kerr: https://stackoverflow.com/a/71023862
[01:27:36] <fizzie> Oh, well. Casts (other than of arithmetic types to integer types) are not integer constant expressions.
[01:28:22] <fizzie> ,c11 6.6p6
[01:28:24] <candide> http://www.iso-9899.info/n1570.html#6.6p6 [Constant expressions] An integer constant expression117) shall have integer type and shall only have operands that are integer constants, enumeration constants, character constants, sizeof expressions whose results are integer constants, _Alignof expressions, and floating constants that are the immediate operands of casts. Cast operators in an integer constant ex... <truncated; https://0x0.st/oZ2e.txt>
[01:28:30] <fizzie> It's a pretty short list.
[01:28:47] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[01:28:59] <Kerr> for reasons very opaque to me, extern unsigned char test_png_start[]      !=    extern unsigned char *test_png_start
[01:29:26] <Kerr> and choosing the former was what fixed my issue
[01:29:31] <nitrix> I explained it to you earlier, it isn't a pointer.
[01:29:36] *** Joins: Torr (~Torr@user/torr)
[01:29:48] <SaltHilStroller_> fizzie: That sucks. Do you have any insight on why casts are explicitly disallowed?
[01:30:31] <SaltHilStroller_> fizzie: Especially since a memory address, known at compile time, should function similarily to an integer constant (ignoring the formal definition)
[01:30:47] <nitrix> Addresses aren't integers.
[01:30:56] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:31:18] <veltas> Kerr: When an array is linked the symbol is to the array itself. When a pointer is linked the symbol is to the pointer object storage address
[01:31:27] <nitrix> For all you know, the objects could be stored in a database and the addresses could be UUIDs.
[01:31:48] <fizzie> SaltHilStroller_: One very practical reason might be that addresses may involve relocations (even when they're "compile-time constants"), and the architecture may not have a suitable relocation type to use, if it only ever needs to make relative rather than absolute addresses.
[01:31:51] <veltas> Kerr: This is one of those places where pointers are not like arrays, in C they're not equivalent, even though sometimes it seems like they are
[01:32:06] *** Joins: random-nick (~random-ni@87.116.167.125)
[01:32:24] <fizzie> (FWIW, there's also no guarantee two instances of the same string literal have the same address.)
[01:32:55] <SaltHilStroller_> fizzie: Damn, I really thought I was being clever by avoiding the string-comparison
[01:33:08] <SaltHilStroller_> fizzie: I would hope that any sane compiler would coalesce them
[01:33:20] <nitrix> Not being clever and comparing the string is probably what will help the optimizer to be clever and elide it.
[01:34:26] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:34:48] <veltas> SaltHilStroller_: Always inappropriate but if you're trying to be clever then maybe use a multiple character constant, i.e. 'FOO'
[01:35:18] <veltas> And I can hand you some heroin to try while we're at it
[01:35:24] <nitrix> SaltHilStroller_, Consider this https://github.com/graphitemaster/incbin
[01:35:25] <candide> Title of nitrix's link: GitHub - graphitemaster/incbin: Include binary files in C/C++
[01:35:26] <fizzie> One pretty classic way of being "clever" (if you have a bunch of constant strings) would be to use something like gperf to generate a perfect (i.e., guaranteed collision-free) hash table and switch on the hash. (Though it still needs a string comparison if you can't be sure the input is one of the strings.)
[01:35:47] <veltas> That's a real answer, perfect hashing
[01:35:47] <nitrix> SaltHilStroller_, The optimizer is able to statically propagate the constants, figure out which branch will occurs and inline it.
[01:36:02] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[01:36:07] <nitrix> SaltHilStroller_, Wrong link. This https://godbolt.org/z/savdaMjov
[01:37:31] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.102)
[01:37:47] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[01:38:17] *** Quits: banc- (~banc@146.70.61.139) (Ping timeout: 240 seconds)
[01:38:31] *** Joins: csrf (~csrf@user/csrf)
[01:40:58] *** Quits: magla (~gelignite@d5362120.access.ecotel.net) (Quit: Stay safe!)
[01:40:59] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[01:41:09] *** Joins: banc- (~banc@146.70.61.139)
[01:42:00] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 252 seconds)
[01:42:59] <SaltHilStroller_> nitrix: Man, I wish it was easier to visualize what the compiler would do on a large scale source tree
[01:43:23] <SaltHilStroller_> Just have to trust I suspose
[01:44:25] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[01:45:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[01:46:02] *** Quits: nexus (~nexus@87-97-13-18.pool.digikabel.hu) (Ping timeout: 240 seconds)
[01:46:09] <nitrix> You can profile your codebase and instruct your compiler to emit the assembly it generated for the troublesome areas.
[01:47:14] <SaltHilStroller_> Turns out the compiler complains even if I was to use if `error: result of comparison against a string literal is unspecified (use an explicit string comparison function instead) [-Werror,-Wstring-compare]`
[01:47:32] <nitrix> People forget that CPUs are ridiculously fast. You'll can do something absurd like 250 multiplications in the time it takes to do one fetch from memory.
[01:47:46] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[01:48:01] *** Joins: nexus (~nexus@fibhost-66-208-135.fibernet.hu)
[01:48:04] <nitrix> The string is likely to remain in cache, can be prefetched and benefit from branch prediction, so the whole thing is rather quick.
[01:48:36] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[01:48:38] *** Joins: pert (~pert@fsf/member/pert)
[01:49:57] <nitrix> SaltHilStroller_, String comparison has to be done with strcmp. == will compare the pointer values, not the strings they point at.
[01:50:27] <SaltHilStroller_> nitrix: True. But for string literals, the addresses would (should) be the same
[01:50:48] <nitrix> The Standard says otherwise.
[01:51:23] <nitrix> I don't think you know C very well. These kind of assumptions are very dangerous to make, especially if you're the type who thinks they're very clever.
[01:51:28] *** Joins: loganlee (~Thunderbi@user/loganlee)
[01:51:49] <oldlaptop> Do you also think INT_MAX + 1 should == INT_MIN?
[01:52:18] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[01:53:30] <SaltHilStroller_> oldlaptop: I would expect it to, whether it should I'm not sure
[01:53:44] <oldlaptop> You compiler can and will bite you for that one.
[01:53:55] <oldlaptop> Or rather your compiler.
[01:53:57] <nitrix> I don't understand your distinction between "should" and "expect".
[01:54:19] *** Joins: lilibyte (~lilibyte@89.187.180.40)
[01:55:45] *** Quits: mahmutov_ (~mahmutov@5.176.15.116) (Ping timeout: 256 seconds)
[01:55:54] <oldlaptop> Something to try on different compilers and with different optimization flags: for (int index = 0; index > 0; index++) printf("%d\n", index); // Does it terminate? Does it print anything? What's the question to 42?
[01:56:11] *** Quits: malloy (~jimery@120.235.172.170) (Quit: WeeChat 3.0)
[01:56:16] <oldlaptop> or rather index >= 0, or int index = 1 :|
[01:56:17] <nitrix> Whether it should or not depends on what the Standard requires compilers to do. You knowing the Standard will also determine what you should expect from compilers.
[01:56:24] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[01:56:38] <nitrix> Since they both rely on the same normative document, the "should" and the "expect" are one and the same.
[01:58:58] *** Quits: henistein (~henistein@2001:8a0:fcba:5601:d851:f87b:1171:33f4) (Quit: Client closed)
[01:58:59] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) ()
[01:59:34] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[02:00:44] *** Quits: Torr (~Torr@user/torr) ()
[02:02:53] *** Joins: superboot (~agentgasm@user/superboot)
[02:04:05] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:04:28] <SaltHilStroller_> I guess it seemed fairly obvious to me that coalescing string literals should be done. And in my testing with a less strict compiler it worked, confirming my assumption
[02:04:52] *** Quits: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[02:04:53] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[02:04:55] <oldlaptop> Trial and error is a *very* bad idea, because you *will* learn things that aren't so
[02:06:00] *** Joins: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net)
[02:10:06] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 260 seconds)
[02:10:29] *** Quits: banc- (~banc@146.70.61.139) (Ping timeout: 256 seconds)
[02:11:16] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[02:11:21] <SaltHilStroller_> So I guess the question is why wouldn't the C standard define that? Is there a reason against coalescing string literals? Or it just hasn't come up. Seems like it would allow for a decent optimization on any large string literal
[02:12:04] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[02:12:21] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[02:13:26] <fizzie> It's easy enough within a single translation unit, but not quite as trivial when it comes to merging string literals from across different translation units, when (depending on the implementation) they may no longer really be all that recognizable as separate entities.
[02:14:07] <fizzie> Would you expect other read-only data to be merged? If not, why would string literals be any different? How about whether "bar" should be equal to "foobar" + 3?
[02:14:26] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[02:14:57] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[02:15:29] *** Joins: zzbot (~zzbot@user/zzbot)
[02:15:35] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[02:15:42] *** Joins: pert (~pert@fsf/member/pert)
[02:15:43] <SaltHilStroller_> fizzie: Fair enough, I guess across translation units that makes sense
[02:15:56] *** Quits: pert (~pert@fsf/member/pert) (Remote host closed the connection)
[02:16:31] <fizzie> ,c11 6.4.5p7
[02:16:31] <candide> http://www.iso-9899.info/n1570.html#6.4.5p7 [String literals] It is unspecified whether these arrays are distinct provided their elements have the appropriate values. If the program attempts to modify such an array, the behavior is undefined.
[02:16:47] <fizzie> ,c11 J.5.5p1
[02:16:47] <candide> http://www.iso-9899.info/n1570.html#J.5.5p1 [Writable string literals] String literals are modifiable (in which case, identical string literals should denote distinct objects) (6.4.5).
[02:16:54] *** Joins: banc- (~banc@146.70.61.139)
[02:16:58] *** Joins: indigo256 (~root@2001:19f0:5c01:1fda:5400:2ff:fee1:a0bd)
[02:17:16] <Ali_A> hello guys
[02:17:17] <Ali_A> so, I am looking for any guide/tutorial/blog/whatever to implement my own allocator in C (basically allocate some 1GB or something at the program start and then use that to implement my own memory management) I am basically now writing a game engine, and I am using C (purely from scratch) and would like to get rid of all the call to any memory
[02:17:17] <Ali_A> allocator, any ideas where I can read/learn about this? I have two allocators I want to implement, one is linear/Arena allocator and one is pool allocator (sadly all googling didn't yield much, so anything would be useful thanks!)
[02:17:38] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[02:18:02] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[02:20:37] <omegatron> ugh - why do you want to do that?
[02:21:23] <omegatron> I mean, do you hope for more speed efficiency?
[02:23:08] <Ali_A> omegatron many reasons, including efficiency 1 (and not hoping I am sure it will be faster) also I have a small string library that I can highly optimize (or I think I can) if I use my own allocators, finally learning purposes
[02:24:22] *** ik is now known as kleiner
[02:26:11] <omegatron> maybe https://talloc.samba.org/ for the pool variant ?
[02:26:46] <Ali_A> sounds interesting, might be what I am looking for, thanks!
[02:28:12] <omegatron> and https://www.gingerbill.org/article/2019/02/08/memory-allocation-strategies-002/ for the other
[02:30:54] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Read error: Connection reset by peer)
[02:31:18] <Ali_A> Thanks! sounds good
[02:31:44] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[02:31:56] *** Joins: n8chan (~nate@98.45.167.61)
[02:32:06] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-a0f7-4a6c-9396-dfff.res6.spectrum.com) (Remote host closed the connection)
[02:32:10] *** Quits: banc- (~banc@146.70.61.139) (Ping timeout: 250 seconds)
[02:32:42] *** Joins: Torr (~Torr@user/torr)
[02:32:57] *** Quits: pizdets (~pizdets@183.182.115.244) (Ping timeout: 240 seconds)
[02:33:33] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:33:42] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:33:55] *** Quits: tusko (~yeurt@user/tusko) (Ping timeout: 240 seconds)
[02:34:02] *** Joins: pizdets (~pizdets@183.182.110.188)
[02:34:35] *** Joins: tusko (~yeurt@user/tusko)
[02:35:32] *** Joins: banc- (~banc@217.138.195.27)
[02:36:02] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[02:36:11] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[02:37:00] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.102) (Ping timeout: 252 seconds)
[02:38:05] *** Quits: Torr (~Torr@user/torr) ()
[02:38:21] *** Joins: Torr (~Torr@user/torr)
[02:38:36] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[02:39:05] *** Joins: Betal (~Betal@user/betal)
[02:41:42] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[02:42:05] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:43:36] *** Joins: oxfuxxx (~oxfuxxx@217.138.207.198)
[02:44:44] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 250 seconds)
[02:46:56] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[02:46:58] *** Quits: banc- (~banc@217.138.195.27) (Ping timeout: 260 seconds)
[02:47:32] *** Quits: n8chan (~nate@98.45.167.61) (Ping timeout: 240 seconds)
[02:48:12] *** Quits: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[02:53:13] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[02:54:27] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:55:01] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[02:56:46] *** Quits: oxfuxxx (~oxfuxxx@217.138.207.198) (Ping timeout: 260 seconds)
[02:57:15] *** Quits: vekay (~vekay@user/vekay) (Quit: Leaving)
[02:58:37] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[02:59:43] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:03:02] *** Quits: alch (~alch@151.46.91.54) (Read error: Connection reset by peer)
[03:03:52] *** Joins: oxfuxxx (~oxfuxxx@217.138.207.198)
[03:04:09] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[03:05:53] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:06:06] *** Joins: Zeturic (~Orimendix@50.26.218.162)
[03:06:12] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:07:02] *** Joins: alch (~alch@151.46.35.250)
[03:07:29] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[03:08:54] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 252 seconds)
[03:09:06] *** Joins: banc- (banc@gateway/vpn/airvpn/banc)
[03:10:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:10:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:10:51] *** Joins: wroathe (~wroathe@user/wroathe)
[03:11:07] *** Quits: zzbot (~zzbot@user/zzbot) (Ping timeout: 256 seconds)
[03:11:15] *** Joins: ferdna (~ferdna@user/ferdna)
[03:12:56] *** Joins: banc (~banc@217.138.195.27)
[03:13:16] *** Quits: banc- (banc@gateway/vpn/airvpn/banc) (Ping timeout: 245 seconds)
[03:13:54] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[03:13:57] *** Quits: oxfuxxx (~oxfuxxx@217.138.207.198) (Ping timeout: 256 seconds)
[03:18:15] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:18:44] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:23:15] *** Quits: brad_mssw|mbp (~bhouse@2601:344:4100:b490:c99c:4cfa:9d8f:47e8) (Quit: Leaving)
[03:24:29] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[03:25:07] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[03:26:24] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:cdda:3757:8d29:77bf)
[03:26:24] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:cdda:3757:8d29:77bf) (Changing host)
[03:26:24] *** Joins: skapata (~Skapata@user/skapata)
[03:29:01] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[03:32:00] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:33:35] *** Joins: alex11 (~alex11@user/alex11)
[03:34:57] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:35:29] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[03:36:49] *** Joins: Wulf (~Wulf@user/wulf)
[03:40:19] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:41:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:41:43] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 256 seconds)
[03:45:13] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[03:45:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[03:49:20] *** Quits: faLUKE (~paolo@host-212-171-66-64.retail.telecomitalia.it) (Quit: Konversation terminated!)
[03:51:27] *** Quits: soul-d (~uknown@user/soul-d) (Ping timeout: 268 seconds)
[03:52:32] *** Quits: slidercrank (~slidercra@user/slidercrank) (Read error: Connection reset by peer)
[03:52:54] *** Joins: slidercrank (~slidercra@user/slidercrank)
[03:55:41] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[03:57:29] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[04:00:35] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 252 seconds)
[04:01:04] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: WeeChat 3.4)
[04:03:15] *** Quits: nexus (~nexus@fibhost-66-208-135.fibernet.hu) (Ping timeout: 256 seconds)
[04:05:08] *** Joins: nexus (~nexus@77-234-80-245.pool.digikabel.hu)
[04:09:25] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[04:13:17] *** Quits: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[04:14:05] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[04:15:01] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d088:f824:bd53:1d4c) (Quit: Quit)
[04:15:21] *** Joins: loganlee (~Thunderbi@user/loganlee)
[04:16:38] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[04:16:38] *** Joins: meandrain (~meandrain@2a02:2f0e:f70f:6e00:4045:d48f:1f91:ed31)
[04:17:02] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[04:18:34] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[04:19:36] *** Joins: Thedarkb2 (~Thedarkb@82.3.80.190)
[04:22:03] *** Quits: Thedarkb1 (~Thedarkb@92.40.196.244.threembb.co.uk) (Ping timeout: 252 seconds)
[04:24:28] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[04:25:37] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (Ping timeout: 240 seconds)
[04:26:02] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[04:27:32] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[04:28:18] *** Joins: zzbot (~zzbot@user/zzbot)
[04:28:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:31:07] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[04:31:24] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 252 seconds)
[04:31:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:32:18] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:33:03] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[04:33:06] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[04:34:26] *** Joins: Phandal (~Phandal@user/phandal)
[04:34:48] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[04:34:49] *** Joins: Wulf (~Wulf@user/wulf)
[04:35:00] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4.1)
[04:35:55] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[04:37:11] <Phandal> Hello!
[04:43:20] <pragma-> Good-bye!
[04:45:45] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[04:46:05] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[04:47:27] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[04:49:43] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Ping timeout: 256 seconds)
[04:51:43] *** Parts: Phandal (~Phandal@user/phandal) ()
[04:51:59] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[04:53:07] *** Quits: qorg11 (~lain@user/qorg) (Ping timeout: 268 seconds)
[04:53:33] *** Joins: qorg11 (~lain@user/qorg)
[04:56:17] *** Joins: malloy (~jimery@120.235.172.170)
[04:56:52] *** Quits: KevinX (~KevinX@user/KevinX) (Quit: Textual IRC Client: www.textualapp.com)
[05:00:57] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[05:03:23] *** Joins: gproto23 (~gproto23@user/gproto23)
[05:11:32] *** Joins: kurahaupo (~kurahaupo@pa49-182-116-249.pa.qld.optusnet.com.au)
[05:14:54] *** Joins: soul-d (~uknown@user/soul-d)
[05:14:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[05:18:39] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:20:43] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[05:20:52] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[05:21:25] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Remote host closed the connection)
[05:21:48] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[05:26:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:28:03] *** Quits: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e) (Remote host closed the connection)
[05:28:20] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[05:28:36] *** Quits: BUSY (~BUSY@user/busy) (Read error: Connection reset by peer)
[05:28:53] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Read error: Connection reset by peer)
[05:29:11] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[05:29:50] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:30:47] *** Joins: hanzo (uid532183@user/hanzo)
[05:31:39] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[05:34:21] *** Joins: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e)
[05:34:32] *** Quits: waveclaw_ (~quassel@ip98-162-237-241.ok.ok.cox.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:35:02] *** Joins: bindu_ (~bindu@user/bindu)
[05:35:15] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[05:36:45] *** Joins: fe23 (~fe23@2409:8a34:466:6010:4025:21e8:af4:794f)
[05:36:48] *** bindu_ is now known as bindu
[05:39:03] *** Quits: johnnyre1 (~tth@user/johnnyreb) (Ping timeout: 252 seconds)
[05:39:23] *** Joins: vysn (~vysn@user/vysn)
[05:41:53] *** Joins: johnnyre1 (~tth@user/johnnyreb)
[05:43:18] *** Joins: BUSY (~BUSY@user/busy)
[05:45:56] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[05:46:12] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[05:47:09] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:47:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:47:09] *** Joins: wroathe (~wroathe@user/wroathe)
[05:48:52] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Client Quit)
[05:50:03] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[05:50:27] *** Quits: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e) (Remote host closed the connection)
[05:50:51] *** Joins: zer0x (~zer0x@58.186.50.2)
[05:51:09] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[05:51:21] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[05:52:37] *** Quits: DSee (~DSee@198.147.22.212) (Ping timeout: 240 seconds)
[05:53:04] *** Quits: gce108 (~gce@user/gce108) (Remote host closed the connection)
[05:53:46] *** Joins: Rynn (~rynn@216.30.158.198)
[05:55:57] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 240 seconds)
[05:56:24] *** Joins: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net)
[05:56:58] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:57:37] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Client closed)
[05:57:51] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[05:59:02] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[05:59:31] *** Quits: pizdets (~pizdets@183.182.110.188) (Ping timeout: 265 seconds)
[06:00:54] *** Joins: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e)
[06:01:20] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:02:01] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 256 seconds)
[06:04:02] *** Quits: johnnyre1 (~tth@user/johnnyreb) (Ping timeout: 240 seconds)
[06:04:39] *** Joins: pizdets (~pizdets@183.182.110.150)
[06:04:41] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[06:05:02] *** Quits: yggdrasil (~yggdrasil@67-0-91-179.albq.qwest.net) (Ping timeout: 240 seconds)
[06:07:11] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Remote host closed the connection)
[06:07:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:08:32] *** Parts: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) ()
[06:09:01] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:09:01] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:09:01] *** Joins: wroathe (~wroathe@user/wroathe)
[06:09:20] *** Joins: Inline__ (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de)
[06:12:10] *** Joins: yggdrasil (~yggdrasil@67-0-30-144.albq.qwest.net)
[06:12:13] *** Quits: Inline (~Inline@p200300cd470a26002e72b25ea400e9f0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:13:42] *** Quits: nexus (~nexus@77-234-80-245.pool.digikabel.hu) (Ping timeout: 252 seconds)
[06:14:15] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[06:14:34] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[06:14:37] *** Joins: Satin (uid193953@user/Seten)
[06:15:09] *** Joins: nexus (~nexus@80-95-70-249.pool.digikabel.hu)
[06:17:36] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Read error: Connection reset by peer)
[06:18:25] *** Joins: johnnyre1 (~tth@user/johnnyreb)
[06:19:24] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[06:22:13] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[06:25:46] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Client Quit)
[06:29:38] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 252 seconds)
[06:30:02] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:31:48] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:33:05] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[06:34:06] *** Quits: banc (~banc@217.138.195.27) (Ping timeout: 245 seconds)
[06:35:18] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:36:15] *** Quits: cp_rox (~cp_rox@eduroam-external-69.leeds.ac.uk) (Ping timeout: 256 seconds)
[06:37:08] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[06:38:54] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[06:40:37] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[06:42:39] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[06:43:08] *** Joins: Guest3302 (~arc@2601:586:8100:bc30:f0b5:6a0f:f4ae:e63b)
[06:44:39] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Quit: leaving)
[06:44:53] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[06:45:56] *** Joins: smeso (~smeso@user/smeso)
[06:50:49] <pragma-> ,add c-parsing-ambiguities https://hal.archives-ouvertes.fr/hal-01633123/document
[06:50:50] <candide> c-parsing-ambiguities added to #c.
[06:52:51] *** Joins: banc (~banc@217.138.195.27)
[06:53:23] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:56:26] *** Joins: fstd_ (~fstd@xdsl-78-35-89-30.nc.de)
[06:59:54] *** Quits: fstd (~fstd@xdsl-78-35-88-2.nc.de) (Ping timeout: 260 seconds)
[07:01:14] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:01:57] *** Joins: constxd_ (~brad@142.134.78.128)
[07:02:00] *** Quits: constxd (~brad@142.134.78.128) (Ping timeout: 268 seconds)
[07:02:20] *** Quits: alch (~alch@151.46.35.250) (Read error: Connection reset by peer)
[07:06:08] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:07:20] *** Joins: alch (~alch@151.44.46.182)
[07:12:01] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 245 seconds)
[07:12:19] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[07:16:13] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 240 seconds)
[07:19:14] *** Quits: Zeturic (~Orimendix@50.26.218.162) (Quit: Leaving)
[07:21:31] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[07:21:45] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:21:54] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 252 seconds)
[07:22:11] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[07:24:09] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[07:25:19] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:25:19] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:25:19] *** Joins: wroathe (~wroathe@user/wroathe)
[07:30:02] *** Quits: constxd_ (~brad@142.134.78.128) (Ping timeout: 240 seconds)
[07:41:01] *** Quits: mintograde (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[07:42:19] *** Joins: mintograde (~mintograd@47.201.5.61)
[07:42:26] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[07:45:37] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[07:46:51] *** Joins: lainon_ (~lainon@2601:7c0:c500:4d20::e723)
[07:47:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:47:32] *** Joins: Jong (~Jong@2620:10d:c090:400::5:74b3)
[07:48:04] *** Quits: mra90 (~mra@192.55.55.53) (Quit: Leaving)
[07:49:18] <greeter> to_print = (char *) malloc(sizeof(char) * (max_x + 1));
[07:49:18] <greeter> if (to_print == NULL) panic();
[07:49:18] <greeter> is this a good way to see if a call to malloc failed, and then try to handle a graceful close of the program?
[07:49:55] <dave0> greeter: yeah it's looks alright
[07:50:24] <greeter> sweet :-D
[07:50:38] <dave0> greeter: panic() shouldn't return
[07:51:00] <dave0> it should exit() or similar, after you closed your files or whatever cleanup you need to do
[07:51:18] <dave0> print an error message too
[07:51:21] <greeter> yeah, that's what i did. i figure if it ever returned not nice things would happen in the event of the failed malloc call
[07:51:27] <dave0> ran out of memory or something
[07:51:38] <dave0> yeah it would probably crash if you returned
[07:51:58] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[07:52:38] <greeter> that wouldn't be fun, but it should free up some memory when it does that :-P
[07:52:47] *** Joins: loganlee (~Thunderbi@user/loganlee)
[07:53:02] <greeter> ideally though i'd call some code that gets the terminal back into cooked mode, tries to save the game to disk, and then outputs an out of memory error
[07:53:07] *** Joins: kts (~kts@103.73.237.110)
[07:53:16] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[07:53:16] <dave0> oh right you're using curses
[07:53:23] <dave0> yeah that's the right idea
[07:53:31] <dave0> endwin() or whatever function it is
[07:54:27] <greeter> that it is :-) i even added an endwin() at the end of my main function, even though the return path should never take the program there, just in case i overlooked anything
[07:56:29] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 250 seconds)
[08:03:17] *** Joins: frost (~frost@user/frost)
[08:05:00] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[08:05:15] <dave0> ,cc int cache[1000]; int fib(int a) { if(a==0) return 0; if(a==1) return 1; if(cache[a]==0) cache[a]=fib(a-2)+fib(a-1); return cache[a]; } printf("%d ", fib(40));
[08:05:17] <candide> dave0: 102334155
[08:08:37] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[08:09:10] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[08:09:39] <bparker> ,cc while(1){}
[08:09:48] <candide> bparker: [gdb time-out]
[08:15:59] *** Joins: lleo (~leo@89-200-4-50.mobile.kpn.net)
[08:16:10] <greeter> got a partial inventory system in my game now. i don't think i could have wrapped my head around that just a couple of weeks ago, especially without the help of everyone here :-D
[08:19:31] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[08:20:23] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[08:21:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:22:02] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[08:23:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:23:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:23:25] *** Joins: wroathe (~wroathe@user/wroathe)
[08:26:15] *** Quits: nexus (~nexus@80-95-70-249.pool.digikabel.hu) (Ping timeout: 252 seconds)
[08:26:19] <nitrix> greeter, sizeof (char) is always 1, and multiplying anything by 1 (the identity of multiplication) yields back the same thing again, so it's useless.
[08:27:08] <greeter> ah good point. i can definitely simplify that then
[08:27:10] <nitrix> greeter, Also, you don't need to cast the pointer returned by malloc. `void *` can be converted to other pointer to objects types implicitly.
[08:27:14] *** Quits: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[08:27:15] <ski>   to_print = malloc(sizeof *to_print * (max_x + 1));  /* could do this */
[08:27:55] <nitrix> greeter, Also, preferably the sizeof would be obtain with the identifier that you'll be assigning to, so that the size of the type is guaranteed to match.
[08:28:10] *** Joins: nexus (~nexus@92-249-185-228.pool.digikabel.hu)
[08:28:18] <ski> ,malloc
[08:28:18] <candide> There is no need to cast the result of library functions that return void *; it makes your code hard to read, adds no value, and can hide a bug if you don't have a valid prototype in scope. See http://c-faq.com/malloc/mallocnocast.html
[08:28:21] <ski> ,mallocidiom
[08:28:21] <candide> T *p = malloc(sizeof *p) is more robust than T *p = malloc(sizeof (T)) because sizeof *p will always be the correct size of T and it prevents unnecessarily repeating the T (DRY principle). If sizeof (T) is used and later one of the T's is changed there will be a mismatch. T *p = malloc(sizeof *p) is more concise and easier to read, especially when T is a compound type.
[08:28:25] <ski> ,mallocobj
[08:28:25] <candide> It's better to use the object instead of the type as argument to sizeof when allocating. int *p; p = malloc(sizeof *p); is preferable to p = malloc(sizeof (int)); because you can then later change p to long *p or some other type without having to worry about maintaining or forgetting to change the malloc.
[08:28:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[08:28:46] <ski> (possibly doesn't matter much, in this case, but it's a good habit)
[08:29:22] <greeter> i think i understand. there's definite improvements then :-)
[08:29:32] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 240 seconds)
[08:29:48] <ski> (i presume `to_print' is a `char *')
[08:29:54] <greeter> yes
[08:30:13] <nitrix> Lastly, this is a personal choice, but if (!to_print) is slightly more readable than if (to_print == NULL). The condition has to be successful to designate an operation that failed, it's unnecessarily backwards.
[08:30:52] <greeter> ah, i didn't know that would work with NULL pointers. i'll definitely be making that change then
[08:30:53] *** Joins: CCCG2022 (~dell@120.245.30.75)
[08:31:07] <nitrix> I read `if (!to_print)` as "if you _don't_ have a valid to_print pointer`.
[08:31:14] *** Quits: lainon_ (~lainon@2601:7c0:c500:4d20::e723) (Quit: Leaving)
[08:31:22] <ski> (i guess you could put a `panic' call at the end of `main' ;)
[08:31:58] <greeter> that's a good point. i do eventually plan for the panic() function to accept an argument, so that it can output an error suitable to whyever it was called
[08:32:45] <nitrix> panic should probably be a macro, this way you can pass __FILE__ and __LINE__ to enrich the error message a little more.
[08:33:05] * ski . o O ( `panic("main","program unexpectedly reached end of `main', terminating ..");' )
[08:33:37] <greeter> hmm i've never created a function like macro. i'll definitely look into it
[08:33:44] <nitrix> #define PANIC(msg) fprintf(stderr, "%s:%d -> %s", __FILE__, __LINE__, msg); exit(EXIT_FAILURE);
[08:33:56] *** Joins: kdc (~kdc@196.211.197.133)
[08:34:23] *** Quits: kdc (~kdc@196.211.197.133) (Max SendQ exceeded)
[08:34:52] *** Joins: kdc (~kdc@196.211.197.133)
[08:35:12] <ski> i'd probably wrap that in curly brackets
[08:35:16] <nitrix> I don't recommend terminating the applicating harshly like that. There are probably all sorts of resources you want to cleanup.
[08:35:38] <greeter> there aren't currently, though there will be before it's finished
[08:35:47] <ski> (considering `if (!to_print) PANIC("...")')
[08:36:06] <ski> (well, or the `do { ... } while (0)' trick)
[08:36:08] <nitrix> ski, do {} while(1) is the usual wrapper.
[08:36:15] <nitrix> err 0.
[08:36:31] <nitrix> Realistically, PANIC would become something like LOG and you'd do a proper cleanup.
[08:37:47] <ski> presumably you have some option in the game somewhere to terminate it .. would it be too much trouble to have that trickle back the usual way, returning to `main' normally (not `exit') ?
[08:37:49] <nitrix> If you do it right, the errors bubble-up the callers, with LOG() invocations along the way, up to main() where you terminate the application and have a nice stack-trace to troubleshoot the problem.
[08:37:53] <greeter> that's the goal. i want the program to have one last shot at saving the user's progress so that they don't lose everything if they forgot to save or something
[08:38:20] <greeter> ah i see
[08:38:21] <ski> (in which case reaching the end of `main' would not be unexpected)
[08:39:21] <greeter> i could recode the game loop so that it's recursive until the user opts to quit the program, then have it return to main()
[08:39:42] *** Joins: eddof13 (~eddof13@192.154.196.149)
[08:39:57] *** Quits: Guest3302 (~arc@2601:586:8100:bc30:f0b5:6a0f:f4ae:e63b) (Quit: Leaving)
[08:40:11] <ski> recursive ?
[08:41:00] <ski> (there needn't be anything wrong with that, if you get tail-recursion .. just wondering if that's what you meant)
[08:41:51] <dave0> ,cc #define ifnull(x, msg) { if((x) == NULL) panic(__FILE__, __LINE__, msg); } \n void panic(char *file, int line, char *msg) { printf("%s:%d: %s ", file, line, msg); exit(1); } char *to_string = malloc((size_t)~0/2); ifnull(to_string, "out of memory"); printf("happy");
[08:41:53] <candide> dave0:  out of memory  [Exit 1]
[08:42:00] <greeter> well, this is what it does currently: https://bpa.st/6TFQ pretty straight forward. the only exit condition currently is the user typing the quit command
[08:42:01] <dave0> that's a nice macro
[08:42:28] <greeter> that's probably a bit above me at this point lol. though i definitely want to learn enouigh to get to that point
[08:42:29] <ski> greeter : i'd remove the `return;'
[08:43:31] <greeter> done :-)
[08:43:46] *** Joins: ironman (~ironman@2405:201:1010:b033:b90c:86ca:3fd:ed2a)
[08:44:30] <nitrix> I'd change it to `bool running = true; while (running) { ... }` and when the user types `quit` you set the flag to false.
[08:44:46] <greeter> ah, alright, let me give that a shot
[08:45:16] <nitrix> I don't like when control-flow at a higher level in the callstack is controlled by something inside of a function call deep down.
[08:47:28] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[08:47:29] <ski> such as ?
[08:47:32] <ski> (for a tail-recursive version, i suppose you could have `if (running) loop();' at the end. possibly adding `else return;', if you think that's clearer)
[08:48:02] <nitrix> ski, Such as the parse() function seeing a "quit" command and deciding that it calls exit() directly.
[08:48:14] <ski> ah, right
[08:48:32] <ski> structured programming
[08:48:34] <nitrix> Its sole purpose should be parsing; maybe just maybe setting the flag, but there should be more visibility on the control flow.
[08:48:43] <ski> that too
[08:49:07] <ski> (it could also return the flag, possiblY)
[08:49:16] <nitrix> I know we're not doing functional programming. It's still less messy imo.
[08:49:18] *** Quits: coruja (~coruja@user/coruja) (Quit: WeeChat 3.4)
[08:50:04] <nitrix> The other benefit is that multiple things can set the flag to false to stop the execution, and the cleanup still happens properly and at the same place as usual.
[08:50:08] *** Joins: coruja (~coruja@user/coruja)
[08:50:23] <nitrix> Simplifies the lifetime of objects a lot. Initializations before the loop, cleanup after the loop.
[08:51:09] <greeter> ah, what i had been doing is if it saw a quit command, calling a quit function. that handles cleanup, and then that calls exit()
[08:52:32] <ski> structured programming (single-entry, single-exit) is often a good idea. simplifies reasoning and (often, not always) code structuring
[08:52:54] <greeter> i do definitely want to be as structured as possible. i'm working on it now to have it setup the way you suggested
[08:53:06] <ski> <https://en.wikipedia.org/wiki/Structured_programming>
[08:53:07] <nitrix> ski, I think I developed the habit when doing multithreading.
[08:54:00] <nitrix> ski, Where the threads had nested lifetimes too (never greater than the parent). I think that's a separate discipline though, structured concurrency.
[08:55:12] <ski> interesting
[08:57:22] <ski> nitrix : do you have any link/reference discussing that more, handy ?
[08:58:20] <ski> "In his 2004 textbook, David Watt writes that \"single-entry multi-exit control flows are often desirable\"."
[08:59:07] <nitrix> ski, Maybe this http://libdill.org/structured-concurrency.html
[08:59:24] <ski> (talking about things like `return',`break',`continue' (possibly labelled),apparently)
[08:59:42] <dave0> single-exit is a misunderstanding .. it's that a function returns to a single place (ie. just after the function call in the caller)
[09:00:02] <ski> (David A. Watt's book "Programming Language Design Concepts" in 2004-03 is quite nice, btw)
[09:00:02] <greeter> so something like this then perhaps, https://bpa.st/IUWA
[09:00:04] *** Joins: gce108 (~gce@user/gce108)
[09:00:27] <Kerr> hey dave0, I got that working using inline assembly. (Including binary files with my executable)
[09:01:11] <dave0> Kerr: ah nice
[09:01:34] <Kerr> https://pastebin.com/Wu94MJTR
[09:01:38] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[09:01:47] <dave0> Kerr: along the lines of    asm(".incbin \"myfile\"");   ?
[09:01:49] <Kerr> Not going to claim I 100% understand it, but oh well
[09:02:03] <dave0> Kerr: ah i see, cool
[09:02:15] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[09:02:16] <ski> personally, i'm not too fond of `return',`break',`continue' (seeing as they lexically-dynamically refer to a surrounding context, and so one can't easily refactor out a chunk of code (taking care to pass nonlocals as parameters) if it contains any of them) .. however, if the `return's are in tail-position, then that's fine
[09:03:47] <Kerr> I'm still wierded out but unsigned char *var not being the same as unsigned char var[], and don't understand the whole .section bit
[09:03:56] <ski> greeter : i would possibly opt for having `parse' (or perhaps an `execute' command that you place after that) return `running', rather than having `running' as a global. but it possibly depends on what you intend to do, how you intend to structure your game
[09:04:17] <dave0> the try catch thing is hidden control flow, but it seems to be acceptable
[09:04:20] <Kerr> (Learning assembler is hard also because there isn't much information on the internet)
[09:05:17] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[09:05:39] <greeter> well, my original idea was to pass running as a parameter to the function, but for some reason i couldn't make that work. i know global variables often aren't optimal, i do have a few others in the program though
[09:05:46] <ski> (fwiw, `!' in Prolog has the same refactoring problem as `return' here .. apart from other non-declarativity problems)
[09:06:21] <ski> Kerr : arrays are not pointers
[09:06:23] <dave0> Kerr: you can replace the  .section   thing with simply   ".data"    in this case they mean the same
[09:07:16] <Kerr> I actually really want to learn some assembly, how would I go about learning these things?
[09:07:33] <ski> dave0 : yea. but at least in that case, it doesn't hindering refactoring such as factoring out a chunk of code into a separate routine, or the inverse, inlining a routine
[09:08:13] <dave0> Kerr: i would /join ##asm and ask
[09:08:13] <Kerr> I had it as just .data before, but for some reason it isn't part of the executable if I do that (length becomes 0)
[09:08:57] <Kerr> I'm in the channel, nobody has said anything since I asked a question there yesterday
[09:09:00] <ski> Kerr : it might perhaps be simpler to start with a less complicated processor. perhaps using an emulator for an older system, using 6502 or Z80, or 680x0 .. but there's also the problem of having engaging and motivating enough examples and projects to work on
[09:10:15] <Kerr> ski: funny thing is, I'm an EE student... I can tell you how opcodes are implemented on a processor but don't understand .section
[09:10:32] * ski 's fond of sometimes coding a bit using Turbo Assembler (an assembler IDE, assembling directly to memory), on the C64, e.g. in the Vice emulator
[09:12:29] <dave0> maybe learn assembler for msdos .. there's the dosbox emulator
[09:13:08] <greeter> it's been my experience there's a little more documentation on that than assembler for linux, though i haven't looked recently. there's still a few people out there wanting to program dos games, most of which use some assembler
[09:13:16] <dave0> i know nasm can make msdos .com files but not sure about msdos .exe files
[09:14:34] <Kerr> which reminds me that I need to learn linker scripts better
[09:14:56] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:15:28] <Kerr> I got an STM32F4 running code with no library by writing my own like a year ago, but that's just another part of the whole toolchain that people don't talk about much.
[09:17:35] <Kerr> I remember I had to stick the initial stack pointer at 0x20000000 and the entry point for the code at 0x20000004 etc
[09:18:25] <ski> Kerr : if you had declared `extern unsigned char *test_png_start;', then `test_png_start' would have been assumed to refer to a (statically allocated) object being a pointer to `char' (which then could possibly contain a pointer to a `char', possibly to the first `char' element in an array of `char's somewhere). but now you want `test_png_start' to refer to an array directly (the one that your `asm' code code
[09:18:31] <ski> declares and initializes with the include)
[09:21:02] *** Joins: zer0x (~zer0x@58.186.50.2)
[09:21:14] *** Joins: bzng (~bzng4@2001:871:22b:3947:a0e8:e7ef:f6cf:25a7)
[09:22:27] <dave0> Kerr: consider the assembly     label: .int 69     the c code to get at `label` would be    extern int label;
[09:23:02] <caze> But why.
[09:23:19] <dave0> Kerr: see how   .int    allocates some space and is the size of a c `int`
[09:23:21] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[09:23:40] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[09:24:11] <dave0> Kerr: if you had     array: .int 1,2,3,4    you would do   extern int array[4];   because the assembly allocated space for 4 int's and initialized them
[09:24:29] <dave0> Kerr: .incbin in assembly acts like an array of bytes
[09:26:06] <Kerr> so if I wanted the address of label: .int 69, I would do extern int label, use &label.             C arrays have confused me because I have gotten in the habit of treating them as identical to pointers, where really they only DECAY to pointers
[09:26:22] <dave0> Kerr: if your `test` file was    Kerr      then these assembly statements would be the same:     data: .byte 'K','e','r','r'    and     data: .incbin "test"
[09:26:25] <Kerr> Does that sound correct?
[09:26:51] <dave0> Kerr: except for decay, sure
[09:27:05] <Kerr> okay, how is that wrong?
[09:27:35] <ski> the usual terminology is to say that (in most contexts) arrays are implicitly converted to pointers to their first element
[09:28:02] <ski> (exceptional contexts being `&' and `sizeof' .. perhaps i forgot some other one)
[09:28:19] <Kerr> I suppose I've heard that referred to as decay, but what you said sounds more precise
[09:28:34] <ski> (similarly, in most contexts, functions are implicitly converted to function pointers)
[09:28:36] <dave0> the variable name evaluates to a pointer .. it's technical language thing that we like to argue over in #c :-)
[09:30:15] <dave0> Kerr: you could have      data: .int mybin   mybin: .byte 'K','e','r','r'     now you would declate it as    unsigned char *data
[09:31:11] <dave0> Kerr: if that makes more sense, you can certainly write it that way
[09:32:10] * ski . o O ( `struct { int a[3]; } *foo(void) { ... } ... &foo()->a /* taking the address of an array which is not just a name of an array, but computed as (part of) the result of a function call */' )
[09:33:09] <ski> (the type of `&foo()->a' there is not `int *', but `int (*)[3]', btw. pointer to array of three `int's)
[09:34:00] *** Joins: oxfuxxx (~oxfuxxx@217.138.207.196)
[09:34:10] *** Joins: \o` (~\o`@user/o/x-1005988)
[09:35:00] <Kerr> I'll probably be wrong but let me try to break down what that code is.  "data:" is a label/variable name. ".int" is the type(?) of that variable/label, and "mybin" indicates that we want data to contain the address that the label mybin: is at
[09:35:02] * ski 's still annoyed by LLVM not allowing multiple returns (e.g. by setting multiple registers)
[09:35:47] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[09:35:50] <Kerr> Someone had a badly written question on quora about multiple returns that I argued in lol.
[09:36:33] <Kerr> I'll note that gcc will actually use multiple registers, including the avx registers, to return structs by value
[09:37:03] *** Quits: bzng (~bzng4@2001:871:22b:3947:a0e8:e7ef:f6cf:25a7) (Quit: Leaving)
[09:37:04] *** Joins: marderIII (~MarderIII@86.88.74.111)
[09:37:31] <Kerr> dave0, did that breakdown seem okay, or is it not even wrong?
[09:37:39] <Kerr> I really appreciate this btw
[09:37:46] <ski> labels don't really have types, in assembler (unless you're using a typed assembler, i guess .. but those're not common). `.int' there specifies a format for converting the initializer that follows it, into raw memory data which is placed at that label (and advancing the current position so that later labels, data, and instructions, will be put after this data)
[09:38:18] <ski> "and \"mybin\" indicates that we want data to contain the address that the label mybin: is at" -- yes
[09:38:32] <ski> the "value" of a label is its address
[09:39:05] <Kerr> so .int is what is going to tell it to orient the bytes in little/big endian manner?
[09:39:51] <ski> `.int' will know which convention for endianess is in force, yea
[09:40:04] <Kerr> what is .int called
[09:40:20] *** Joins: bzng (~bzng4@80-123-54-112.adsl.highway.telekom.at)
[09:40:20] <ski> (and how much memory to reserve for the data)
[09:40:21] <Kerr> "'.int is a(n) ...."
[09:40:24] <dave0> Kerr: what you said is right, but where you have 'type' think size ... so an assembly    .int    actually reserves (typically) 4 bytes
[09:40:44] <ski> well, i'd call it an "assembler directive", but perhaps terminology varies in some other assemblers
[09:40:44] *** Quits: oxfuxxx (~oxfuxxx@217.138.207.196) (Ping timeout: 250 seconds)
[09:41:10] <dave0> Kerr: the sizes between an     extern int foo;    and     foo: .int 69     have to match or you will be in a bad place
[09:41:54] *** Quits: \o` (~\o`@user/o/x-1005988) (Quit: Client closed)
[09:41:59] <Kerr> is it okay that I'm annoyed that the sizes of types aren't actually standardized?
[09:42:08] <ski> (e.g. Turbo Assembler has directives `.byte',`.word',`.text',`.offs', and arguably `*=' and maybe `=')
[09:42:42] <dave0> Kerr: that can be a problem, yes.. but assembly is inherently machine specific, so you would know how c's types map to assembly sizes
[09:42:50] <Kerr> do you see why I have trouble googling any of this
[09:44:19] *** Quits: kts (~kts@103.73.237.110) (Quit: Konversation terminated!)
[09:44:51] <caze> I have trouble understanding why you're attempting to google this.
[09:46:05] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[09:46:16] <dave0> Kerr: a fairly safe assumption is that c's    unsigned char    maps to assembly's    .byte     .. the sizes there are 1
[09:46:23] <Kerr> okay, the code that I was shown lets me see that .int can be used for a pointer, but what other directives are there? What do I use if an environment has 4 byte pointers, or has 8 byte pointers?
[09:46:53] <dave0> Kerr: know your assembler
[09:46:57] <Kerr> That's the type of thing I'd try to find some documentation on instead of asking
[09:47:00] *** Joins: raym (~raym@user/raym)
[09:47:25] <caze> It's a bit like trying to google how to put together Ikea furniture.
[09:47:58] <caze> At best, google will come up with the assembly manual, which should be the first thing you looked at anyway.
[09:48:40] <Kerr> like this? http://ww1.microchip.com/downloads/en/devicedoc/atmel-0856-avr-instruction-set-manual.pdf
[09:48:48] <Kerr> (that was a non-serious answer)
[09:49:45] <caze> Why was it non-serious?
[09:50:10] * ski . o O ( seriously kidding )
[09:51:37] <Kerr> because that manual will tell me what WDR does, but not what .int does :)
[09:52:44] <caze> Then you're reading the wrong manual?
[09:53:28] <Kerr> https://ftp.gnu.org/old-gnu/Manuals/gas-2.9.1/html_chapter/as_1.html#SEC1 Is this the right manual?
[09:53:29] <candide> Title of Kerr's link: Using as - Overview
[09:53:41] <caze> What assembler are you using?
[09:55:20] <Kerr> gas I presume, whatever is with gcc, for now
[09:55:28] <dave0> ,cc __asm__("\n foo: \n .incbin \"prog.c\" \n bar: \n .int bar-foo \n"); extern unsigned char foo[]; extern int bar; int main(void) { printf("size=%d chars=%c%c%c%c ", bar, foo[0],foo[1],foo[2],foo[3]); }
[09:55:29] *** Quits: mikess (~sam@user/mikess) (Ping timeout: 256 seconds)
[09:55:29] <candide> dave0: size=861 chars=#def
[09:55:55] <dave0> that's reasonably clean code
[09:56:26] <dave0> candide uses gcc
[09:56:34] <candide> d﻿ave0, I don't think so.
[09:56:49] *** Quits: ironman (~ironman@2405:201:1010:b033:b90c:86ca:3fd:ed2a) (Quit: Leaving)
[09:57:00] <Kerr> candide is a sassy bot?
[09:57:12] <candide> K﻿err, As if!
[09:57:14] <caze> Kerr: https://ftp.gnu.org/old-gnu/Manuals/gas-2.9.1/html_chapter/as_7.html#SEC98
[09:57:14] <candide> Title of caze's link: Using as - Assembler Directives
[09:57:30] <dave0> it's not a shining jewel of portable c
[09:58:32] <Kerr> candide, do you automatically disagree with anyone who uses your name?
[09:58:38] <candide> K﻿err, Not likely!
[09:59:19] <Kerr> for what I'm trying to do, the suggested language feature #embed will be the right solution
[10:00:29] <dave0> i think that doesn't exist yet
[10:00:56] <Kerr> hmm... if you don't do the .int bar-foo would there be anything non-portable in the assembler?
[10:01:13] *** Quits: bzng (~bzng4@80-123-54-112.adsl.highway.telekom.at) (Quit: Leaving)
[10:02:05] <dave0> Kerr: hard to say .. your best bet is to try it on your target machine/os
[10:02:23] <Kerr> I read that g++ apparently supports in in std::embed, I was going to look and see if there is support in c as well
[10:03:59] <dave0> i suppose #embed would be nice .. there's no really good way to include raw binary
[10:04:23] <dave0> but on the other hand it's not super common to want to
[10:04:30] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[10:05:00] <caze> It might actually be easier to write a program to convert a binary to a C string.
[10:05:33] <Kerr> xxd -i source.bin dest.c
[10:05:56] <Kerr> does exactly that
[10:06:15] <Kerr> but then for each byte you need 6 bytes to represent it in the .c file
[10:07:16] <Kerr> I'n an EE student and can think of many reasons I might want to include raw binary on embedded systems
[10:07:18] <caze> So?
[10:07:49] <caze> You have the .c file on your embedded system?
[10:08:00] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[10:08:28] <caze> Don't you have a way to compile it and then transfer the binary to your system?
[10:09:32] <Kerr> http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2499.pdf actually shows why #embed will be useful, speed wise.
[10:10:27] <Kerr> I would end up needing to modify a linker script to include a binary file in the image I flash to a device, if I don't do it in c
[10:11:06] <Kerr> and yes, after completely compiling the code, there isn't really a difference
[10:11:06] <caze> How big is the binary?
[10:11:18] * ski . o O ( "A Personal History of Compilation Speed, Part 1" by James Hague in 2009-08-02 at <https://prog21.dadgum.com/45.html> (seems to be down atm, try <https://web.archive.org/web/20200831152006/https://prog21.dadgum.com/45.html>) )
[10:11:42] <Kerr> this is 95% an academic exercise for me...
[10:11:44] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:12:24] *** Quits: raym (~raym@user/raym) (Ping timeout: 252 seconds)
[10:12:58] <Kerr> I decided to take a step back and look at a lot of my tools and ask questions about how everything fits together, then that let me to wondering how I would include binary files with my executables.
[10:13:09] <caze> Why do you want to do that?
[10:13:15] *** Joins: raym (~raym@user/raym)
[10:14:10] <Kerr> I like portable .exe files on windows, for one
[10:15:24] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 250 seconds)
[10:15:40] <dave0> unsigned char data[] = { 0x00,0x01,0x02, ... };   like what xxd seems to do is by far the most portable
[10:16:04] <caze> Why wouldn't you just have the data in a separate file, and open it from your program?
[10:16:41] <dave0> representing the data as a string is very nice too, trading space for code that converts your string to binary
[10:17:05] *** Joins: Thedarkb1 (~Thedarkb@82.3.80.190)
[10:17:34] <dave0> assembly and linker scripts is much further down the trough
[10:18:02] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 240 seconds)
[10:18:04] *** Quits: Thedarkb2 (~Thedarkb@82.3.80.190) (Remote host closed the connection)
[10:18:09] <Kerr> Flip side, I'd have to use make or something to run xxd and update the array if the source binary file changes
[10:18:27] <dave0> does it change?
[10:19:00] <Kerr> this is 95% an academic exercise, but yes, likely.
[10:19:08] <caze> If only there were some way you could architect it so that you could alter the source binary file, and somehow have your program open that file.
[10:19:49] * ski . o O ( shared object )
[10:20:10] * Kerr goes into ski's hiding place
[10:20:26] <caze> Maybe you could even rename your binary source file, and there would be some way of informing your program of the new name of the file.
[10:21:02] <caze> So like, you could have multiple versions of your binary file, and have an easy way to switch between them.
[10:21:07] <swinnenb> that's nice, if you have a filesystem on your target
[10:21:16] <ski> and perhaps this new file name could be more permanently stored in a (text) configuration file
[10:21:47] * Kerr . o O (Asking the question: How would I embed a binary file into my executable has proven a very interesting rabbit hole, and helped me touch many topics I would otherwise have not.)
[10:21:59] * ski calls the `/me' police
[10:22:07] <Kerr> also, what swinnenb said
[10:22:32] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[10:23:19] <ski> i wonder if there's any shared / dynamically linked object which mostly is for accessing some large chunk(s) of data
[10:24:08] <ski> (that's stored in that object, that is)
[10:24:57] <Kerr> beats me
[10:27:40] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[10:33:27] *** Quits: nexus (~nexus@92-249-185-228.pool.digikabel.hu) (Ping timeout: 256 seconds)
[10:34:10] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:35:07] *** Joins: nexus (~nexus@178-164-188-40.pool.digikabel.hu)
[10:36:17] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[10:36:57] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[10:38:18] *** Joins: the_lanetly_052 (~the_lanet@194.135.167.153)
[10:40:04] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[10:45:39] *** Joins: Atque (~Atque@user/atque)
[10:47:59] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[10:50:35] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[10:50:37] *** oliver1 is now known as cromwell
[10:53:33] *** Quits: cryptonector (~nico@24.28.108.183) (Read error: Connection reset by peer)
[10:53:57] *** Joins: cryptonector (~nico@24.28.108.183)
[10:54:32] *** Quits: the_lanetly_052 (~the_lanet@194.135.167.153) (Ping timeout: 240 seconds)
[10:57:18] *** Quits: Kerr (~Kerr@2601:602:ce80:df10::b76e) (Quit: Client closed)
[10:57:38] *** Joins: Kerr (~Kerr@2601:602:ce80:df10::b76e)
[10:57:56] *** Quits: Kerr (~Kerr@2601:602:ce80:df10::b76e) (Client Quit)
[10:58:04] *** Joins: Kerr_ (~quassel@2601:602:ce80:df10::b76e)
[10:58:27] *** Quits: Kerr_ (~quassel@2601:602:ce80:df10::b76e) (Client Quit)
[10:58:45] *** Joins: Kerr (~quassel@2601:602:ce80:df10::b76e)
[10:58:51] *** Quits: cromwell (~oliver@thunix.net) (Quit: WeeChat 3.4)
[10:59:05] *** Joins: oliver1 (oliver@thunix.net)
[10:59:25] *** oliver1 is now known as cromwell
[11:00:10] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[11:00:14] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:00:38] *** Quits: eddof13 (~eddof13@192.154.196.149) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:04:30] *** Quits: alch (~alch@151.44.46.182) (Read error: Connection reset by peer)
[11:07:35] *** Joins: alch (~alch@151.46.13.31)
[11:07:40] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[11:07:47] *** Joins: the_lanetly_052 (~the_lanet@194.135.169.153)
[11:07:57] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:09:11] *** Joins: eddybilley (~freddieti@217.119.232.174)
[11:09:28] *** Joins: Enitin (~Enitin@82.102.22.86)
[11:11:58] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[11:14:16] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[11:15:54] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[11:15:54] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Changing host)
[11:15:54] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[11:15:57] *** Quits: foul_owl (~kerry@23.82.193.89) (Ping timeout: 240 seconds)
[11:16:02] <Dean> hello
[11:16:06] <greeter> greetings
[11:17:04] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[11:18:34] *** Joins: kts (~kts@103.73.237.7)
[11:20:38] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[11:23:34] *** Joins: godvino (~godvino@2402:8100:3921:9c0b:d813:fc63:9234:3dd3)
[11:25:12] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4.1)
[11:25:53] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[11:29:05] *** Joins: zer0x (~zer0x@58.186.50.2)
[11:30:22] *** Joins: foul_owl (~kerry@23.82.193.89)
[11:31:25] *** Joins: ztx (~ztx@user/ztx)
[11:36:29] *** Joins: Rounin (~david@84.212.130.215)
[11:36:50] *** Quits: godvino (~godvino@2402:8100:3921:9c0b:d813:fc63:9234:3dd3) (Quit: godvino)
[11:38:52] <fluter> meow
[11:39:31] *** Joins: loganlee (~Thunderbi@user/loganlee)
[11:40:01] *** Joins: frytaped (~frytaped@2402:8100:3921:9c0b:d813:fc63:9234:3dd3)
[11:40:11] *** frytaped is now known as Guest6834
[11:40:16] *** Joins: aradesh (~aradesh@user/aradesh)
[11:40:17] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:41:48] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[11:44:43] *** Joins: epony (epony@user/epony)
[11:45:00] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[11:48:52] *** Quits: Guest6834 (~frytaped@2402:8100:3921:9c0b:d813:fc63:9234:3dd3) (Changing host)
[11:48:52] *** Joins: Guest6834 (~frytaped@user/go4godvin)
[11:49:00] *** Joins: kts_ (~kts@103.73.237.62)
[11:49:02] *** Quits: kts (~kts@103.73.237.7) (Ping timeout: 240 seconds)
[11:49:24] *** Quits: Guest6834 (~frytaped@user/go4godvin) (Quit: Guest6834)
[11:50:02] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[11:54:48] *** Joins: rcoote (~rcoote@2a02:908:690:a140:207:e706:7ed4:977b)
[11:57:27] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 252 seconds)
[11:58:12] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:01:21] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Client Quit)
[12:01:53] *** Quits: kts_ (~kts@103.73.237.62) (Quit: Konversation terminated!)
[12:01:57] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[12:02:35] *** Joins: arinov (~arinov@213.194.126.155)
[12:05:44] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:07:36] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[12:12:49] *** Joins: iomari891 (~iomari891@197.210.76.112)
[12:14:32] *** Quits: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu) (Ping timeout: 240 seconds)
[12:14:45] *** Quits: kurfen (~kurfen@213.152.188.7) (Ping timeout: 250 seconds)
[12:14:51] *** Joins: kurfen_ (~kurfen@176.119.195.9)
[12:16:17] *** Quits: fe23 (~fe23@2409:8a34:466:6010:4025:21e8:af4:794f) (Ping timeout: 240 seconds)
[12:17:30] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[12:21:31] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[12:25:16] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[12:28:31] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:30:09] *** Quits: OpenBased[m] (~notarobot@2001:470:69fc:105::dd37) (Quit: You have been kicked for being idle)
[12:30:34] *** Joins: ironman (~ironman@2405:201:1010:b033:b90c:86ca:3fd:ed2a)
[12:33:58] *** Joins: loganlee (~Thunderbi@user/loganlee)
[12:34:06] *** Quits: BGL (ninety@75-149-171-58-Washington.hfc.comcastbusiness.net) (Ping timeout: 245 seconds)
[12:36:20] *** Quits: malloy (~jimery@120.235.172.170) (Ping timeout: 265 seconds)
[12:37:45] *** Quits: noose (~noose@user/noose) (Quit: Bye)
[12:38:08] *** Joins: noose (~noose@user/noose)
[12:39:09] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[12:39:21] *** Quits: [R] (~rs@genoce.org) (Read error: Connection reset by peer)
[12:41:36] *** Joins: vitimiti (~Celtor@2a01:4c8:c8d:8627:d206:a343:5362:ba3d)
[12:41:41] *** Quits: lleo (~leo@89-200-4-50.mobile.kpn.net) (Quit: butterflies in 1024 bits mobius trumpets)
[12:41:44] *** Joins: malloy (~jimery@120.235.172.170)
[12:47:40] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[12:48:58] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:49:06] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Ping timeout: 245 seconds)
[12:51:18] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[12:52:06] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[12:52:54] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[12:55:07] *** Quits: Techcable (~Techcable@168.235.93.147) (Read error: Connection reset by peer)
[12:55:12] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 252 seconds)
[12:55:14] *** Joins: Techcable (~Techcable@168.235.93.147)
[12:56:36] *** Quits: EdFletcher (~PKD@user/edfletcher) (Ping timeout: 250 seconds)
[12:59:53] *** Quits: nexus (~nexus@178-164-188-40.pool.digikabel.hu) (Ping timeout: 256 seconds)
[13:00:33] *** Joins: constxd_ (~brad@142.134.78.128)
[13:01:25] *** Joins: nexus (~nexus@87-97-13-43.pool.digikabel.hu)
[13:03:00] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:05:39] *** Joins: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu)
[13:11:19] *** Joins: loganlee (~Thunderbi@user/loganlee)
[13:11:30] *** Joins: plastico (~plastico@neomutt/plastico)
[13:12:37] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 268 seconds)
[13:20:19] *** Quits: constxd_ (~brad@142.134.78.128) (Quit: WeeChat 3.3)
[13:22:28] *** Joins: zer0x (~zer0x@58.186.50.2)
[13:23:45] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[13:24:32] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[13:27:39] *** Quits: amorel_ (~amorel@mx.mompl.net) (Ping timeout: 256 seconds)
[13:28:01] *** Joins: amorel_ (~amorel@mx.mompl.net)
[13:29:02] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[13:29:57] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[13:29:59] *** Joins: cart_ (~cart@host-78-144-125-214.as13285.net)
[13:30:35] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:37:33] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 252 seconds)
[13:39:24] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:d146:edfe:652:4044)
[13:39:36] <pony> hi
[13:40:12] <dave0> hi pony
[13:40:19] <pony> dave0 o/
[13:40:37] <dave0> sup?
[13:40:44] <pony> nm
[13:41:00] <pony> just listening to this on repeat https://www.youtube.com/watch?v=UlPhDlY0N_0&t=8s
[13:41:03] <dave0> i'm refactoring some code
[13:41:10] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[13:41:18] <pony> I wrote some Rust tonight
[13:41:41] <dave0> cool
[13:41:54] *** Joins: BGL (sixty@75-149-171-58-Washington.hfc.comcastbusiness.net)
[13:42:24] <dave0> c64 nyan cat
[13:42:50] <dave0> oh zx
[13:42:55] <pony> ya
[13:42:59] <dave0> didn't read the comment :-p
[13:43:03] <pony> =]
[13:44:43] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[13:45:00] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[13:51:13] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:54:13] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:56:57] *** Joins: fe23 (~fe23@2409:8a34:466:6010:4025:21e8:af4:794f)
[13:57:06] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 260 seconds)
[13:57:20] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[13:57:48] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Ping timeout: 240 seconds)
[13:59:56] *** Joins: mendel_munkis (~mendel_mu@ool-ae2cb229.dyn.optonline.net)
[14:01:17] *** Quits: divine (~divine@2001:470:8247:1::31) (Ping timeout: 240 seconds)
[14:01:30] *** Joins: unknow (~i.am@user/marlboro)
[14:01:40] *** Joins: divine (~divine@2001:470:8247:1::31)
[14:02:42] *** Quits: munkis (~mendel_mu@ool-ae2cb229.dyn.optonline.net) (Ping timeout: 260 seconds)
[14:03:37] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[14:03:48] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[14:04:36] *** Joins: danisanti (~daniel@user/danisanti)
[14:05:32] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[14:06:21] <danisanti> I am having problems with a function that takes a char* argument and is supposed to save on this argument variable. Here is a draft of the source code i am trying to aim -> https://termbin.com/97uo . Can someone please tell me what I am doing wrong?
[14:06:44] <danisanti> and give me a fix to the source code
[14:07:06] *** Joins: pulsar12 (~quassel@a79-169-140-39.cpe.netcabo.pt)
[14:08:30] <fizzie> The value of the `char *string1` parameter is local to the `status_and_save_string` function. The assignment `string1 = fn1();` has no effect outside that function, and particularly doesn't change `result` in main.
[14:10:22] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-a161-049d-edaf-1b31.res6.spectrum.com)
[14:11:06] <danisanti> fizzie: thank you. How do I make status_and_save_string() save the string and still return a status code?
[14:11:16] <fizzie> If you need to "return" both an `int` and a `char *` value out of a function, the function's signature should generally be either `int status_and_save_string(char **string1)` or `char *status_and_save_string(int *result)`, and then do `*string1 = fn();` or `*status = 1;`. And you'd of course change the call to `int status = status_and_save_string(&result);` or `char *result =
[14:11:18] <fizzie> status_and_save_string(&status);`.
[14:12:25] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[14:16:07] <danisanti> thank you fizzie. now it is working
[14:16:28] <danisanti> fizzie: I need to clarify something in order to not make the same mistake
[14:17:32] <danisanti> when status_and_save_string(result) the result here is a value of an memory address, right?
[14:17:44] *** Joins: pandom79 (~domenico@151.53.169.237)
[14:18:18] <danisanti> I am telling you about my mistake, in order to not repeat
[14:19:34] <fizzie> Yes. (Or in your original example, a null pointer value, since that's what `result` was initialized as.)
[14:21:21] <danisanti> exactly
[14:21:47] *** Joins: angelacrust (~angelacru@182.64.85.36)
[14:22:00] <pandom79> I need to trace all that a child process undergoes. In my signal handler I can get the child pid and understand if it is exited, killed and so on. How can i get the pid which has caused its dead instead? is it possible?
[14:23:30] <danisanti> fizzie: do passing result to status_and_save_string, like this: status_and_save_string(result) will pass the memory address of the variable. now, inside status_and_save_string why is the string1 not able to keep it's changes, since it is a memory address?
[14:23:46] <angelacrust> Hello, I'm new to file handling in C.
[14:23:47] <angelacrust> https://bpa.st/XX7A
[14:23:47] <angelacrust> Am I reading the contents of the file correctly? HEADER_SIZE = 100. I want to read all those 100 bytes into another file.
[14:24:13] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[14:24:58] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[14:25:17] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Ping timeout: 240 seconds)
[14:28:47] *** Parts: CCCG2022 (~dell@120.245.30.75) ()
[14:28:51] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 256 seconds)
[14:28:54] <angelacrust> https://bpa.st/5OIA
[14:28:54] <angelacrust> This is the complete snippet
[14:29:35] <fizzie> danisanti: It's not the memory address *of the variable*, it's the value of the variable, which happens to be of pointer type.
[14:30:02] <fizzie> danisanti: `&result` would be the address of the variable, and have the type `char **`, a pointer to a `char *` object.
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:34] <fizzie> A `char *` value can't possibly be the address of a `char *` value, because it's a pointer to a single `char` (or the first element of an array of such).
[14:30:59] *** Joins: csrf (~csrf@user/csrf)
[14:31:33] <fizzie> If you had allocated storage for the string in main, you could pass that pointer, but then you'd have to use `strcpy(string1, ...)` instead of `string1 = ...` in the status_and_save_string function.
[14:33:57] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[14:34:48] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:38:40] <danisanti> fizzie: thanks
[14:38:48] <danisanti> I think I have got it
[14:38:51] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[14:40:16] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[14:40:54] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[14:43:19] *** Joins: random-nick (~random-ni@87.116.176.196)
[14:43:19] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[14:43:35] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[14:45:45] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[14:45:50] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Client Quit)
[14:48:12] *** Joins: Enitin (~Enitin@82.180.145.226)
[14:50:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:55:20] *** Joins: nightw0lf (~nightw0lf@77.125.126.151)
[14:57:11] *** Quits: vitimiti (~Celtor@2a01:4c8:c8d:8627:d206:a343:5362:ba3d) (Remote host closed the connection)
[14:57:43] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[14:58:34] *** Joins: vitimiti (~Celtor@2a01:4c8:c8d:8627:9f20:fc29:71af:2960)
[14:59:24] *** Quits: nightw0lf (~nightw0lf@77.125.126.151) (Client Quit)
[14:59:32] *** Joins: cK (~cK@77.125.126.151)
[15:00:20] *** Quits: cK (~cK@77.125.126.151) (Remote host closed the connection)
[15:00:24] *** Quits: raym (~raym@user/raym) (Quit: rebooting...)
[15:02:28] *** Joins: osXnut (~osXnut@77.125.126.151)
[15:02:47] *** Quits: alch (~alch@151.46.13.31) (Read error: Connection reset by peer)
[15:04:02] *** Quits: yggdrasil (~yggdrasil@67-0-30-144.albq.qwest.net) (Ping timeout: 240 seconds)
[15:04:31] *** Quits: osXnut (~osXnut@77.125.126.151) (Remote host closed the connection)
[15:04:48] *** Joins: osXnut (~osXnut@77.125.126.151)
[15:05:24] *** Quits: rdg (~rdg@user/rdg) (Ping timeout: 240 seconds)
[15:05:50] *** Joins: alch (~alch@151.82.65.1)
[15:05:56] *** Joins: yggdrasil (~yggdrasil@67-0-3-112.albq.qwest.net)
[15:06:25] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[15:07:28] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 250 seconds)
[15:07:36] *** Joins: rdg (~rdg@user/rdg)
[15:09:32] <dave0> angelacrust: that's the right idea but i can't check your code because the rest is missing
[15:09:44] <angelacrust> oh ok, thanks
[15:10:44] <dave0> angelacrust: you should check if they succeed...    if(fread(header, 1, HEADER_SIZE, input) != HEADER_SIZE) perror("read error"); if(fwrite(header, 1, HEADER_SIZE, output) != HEADER_SIZE) perror("write error");
[15:11:45] <angelacrust> should I add these two lines below the loop?
[15:11:59] <dave0> angelacrust: make sure you check your fopen's aswell..    FILE *input = 0; FILE *output = 0; input = fopen("source.bin", "rb"); if(input == 0) perror("open for reading error"); output = fopen("dest.bin", "wb"); if(output == 0) perror("open for writing error");
[15:12:06] <dave0> angelacrust: what loop?
[15:12:11] <angelacrust> the while loop?
[15:12:24] <dave0> you're gonna have to paste your code
[15:12:37] <angelacrust> https://bpa.st/5OIA
[15:13:21] <angelacrust> I'm using the checks for `fopen` btw
[15:13:36] <dave0> ok cool
[15:14:09] <dave0> yeah check your fwrite    if(fwrite(&buffer, sizeof(int16_t), 1, output) != 1) perror("write error");
[15:14:26] <dave0> the fread is fine
[15:14:38] <angelacrust> Gotcha
[15:14:42] <angelacrust> Thank you!
[15:14:48] <dave0> no worries
[15:15:02] <dave0> check your fclose's too
[15:15:12] *** osXnut is now known as osXnuts
[15:15:40] <dave0> if(fclose(input) != 0) perror("close read file error"); if(fclose(output) != 0) perror("close write file error");
[15:15:41] <angelacrust> https://bpa.st/KJ7A @dave0
[15:15:54] *** Joins: Klinda (~superleag@user/klinda)
[15:16:03] *** osXnuts is now known as osXnut
[15:16:27] *** Quits: osXnut (~osXnut@77.125.126.151) (Quit: leaving)
[15:16:52] <dave0> angelacrust: looks good, just sprinkle some error checking
[15:16:58] <angelacrust> okay
[15:18:55] *** Quits: ironman (~ironman@2405:201:1010:b033:b90c:86ca:3fd:ed2a) (Quit: Leaving)
[15:20:43] *** Joins: raym (~raym@user/raym)
[15:23:04] *** Quits: nexus (~nexus@87-97-13-43.pool.digikabel.hu) (Ping timeout: 250 seconds)
[15:24:40] *** Joins: nexus (~nexus@94-21-108-13.pool.digikabel.hu)
[15:25:39] *** Joins: cren (cren@tilde.team)
[15:26:17] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[15:29:14] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[15:30:10] *** Joins: Enitin (~Enitin@82.180.145.228)
[15:32:26] *** Joins: vitimiti_ (~Celtor@2a01:4c8:c8d:8627:665c:c4a2:cda9:6b00)
[15:34:01] *** Quits: pulsar12 (~quassel@a79-169-140-39.cpe.netcabo.pt) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:35:17] *** Joins: vitimiti__ (~Celtor@2a01:4c8:c8d:8627:7004:f361:be86:ad28)
[15:36:54] *** Quits: vitimiti (~Celtor@2a01:4c8:c8d:8627:9f20:fc29:71af:2960) (Ping timeout: 252 seconds)
[15:36:57] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[15:39:17] *** Quits: danisanti (~daniel@user/danisanti) (Quit: Konversation terminated!)
[15:39:39] *** Quits: vitimiti_ (~Celtor@2a01:4c8:c8d:8627:665c:c4a2:cda9:6b00) (Ping timeout: 252 seconds)
[15:41:19] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[15:41:20] *** Quits: agrosant (~agrosant@46.12.50.59.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[15:41:45] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[15:41:57] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[15:43:57] *** Joins: SorryBeauty (~SorryBeau@103.25.241.104)
[15:44:36] *** Quits: vitimiti__ (~Celtor@2a01:4c8:c8d:8627:7004:f361:be86:ad28) (Ping timeout: 252 seconds)
[15:47:14] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[15:57:34] *** Joins: agrosant (~agrosant@79.103.7.27.dsl.dyn.forthnet.gr)
[16:03:22] *** Quits: angelacrust (~angelacru@182.64.85.36) (Quit: Client closed)
[16:03:30] *** Quits: agrosant (~agrosant@79.103.7.27.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[16:03:45] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:04:25] *** Quits: pandom79 (~domenico@151.53.169.237) (Ping timeout: 250 seconds)
[16:04:38] *** Quits: bliminse (~bliminse@host86-156-84-211.range86-156.btcentralplus.com) (Quit: leaving)
[16:05:33] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[16:08:01] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 256 seconds)
[16:14:20] *** Quits: phaise (~phaise@gateway/tor-sasl/phaise) (Remote host closed the connection)
[16:14:54] *** Joins: phaise (~phaise@gateway/tor-sasl/phaise)
[16:19:06] *** Joins: agrosant (~agrosant@79.103.143.96.dsl.dyn.forthnet.gr)
[16:23:23] *** Quits: agrosant (~agrosant@79.103.143.96.dsl.dyn.forthnet.gr) (Max SendQ exceeded)
[16:24:36] *** Quits: wirehead (~wirehead@121.223.152.47) (Quit: Lost terminal)
[16:37:13] *** Joins: constxd (~brad@142.134.78.128)
[16:42:17] *** Joins: bliminse (~bliminse@host86-156-84-211.range86-156.btcentralplus.com)
[16:43:29] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[16:44:01] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[16:46:33] *** Joins: CodePoint (~jonathan@50-192-38-69-static.hfc.comcastbusiness.net)
[16:47:24] *** Joins: malloy (~jimery@120.235.172.170)
[16:50:17] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[16:55:35] <cromwell> hello, i want to fread from a binary file. what should i use for the size_t size field in fread?
[16:55:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:58:23] <ioxzev1z> cromwell, what do you mean?
[16:58:50] <ioxzev1z> Just pick sensible values and loop fread until EOF
[16:58:59] <clarity> cromwell: The size of the elements you're reading.
[16:59:07] <ioxzev1z> Unless you mean you want to read only part of it
[16:59:17] <cromwell> ah, okay
[17:03:38] *** Joins: Rynn (~rynn@216.30.158.198)
[17:04:02] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[17:04:32] <fizzie> If you mean you're just reading a bunch of bytes into an `unsigned char *` buffer, probably most commonly size == 1, nmemb == size of buffer.
[17:06:05] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:06:47] *** Joins: ztx (~ztx@user/ztx)
[17:09:07] <cromwell> the file has to be stored in a database, measures in megabytes, i used sizeof(char) and i got the correct number of bytes read from fread
[17:10:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[17:11:50] *** Quits: CodePoint (~jonathan@50-192-38-69-static.hfc.comcastbusiness.net) (Ping timeout: 250 seconds)
[17:12:59] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[17:19:53] *** Joins: egm (~egm@user/egm)
[17:20:18] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[17:23:01] <clarity> sizeof(char) is a dumb way to spell 1
[17:23:03] <clarity> :(
[17:26:32] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 240 seconds)
[17:28:30] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[17:29:05] *** Joins: pur3funk (~bjorn@178-78-213-215.customers.ownit.se)
[17:29:25] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[17:29:42] *** Joins: pulse (~pulse@user/pulse)
[17:29:44] *** Joins: tejr (~tejr@user/tejr)
[17:30:01] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:32:30] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[17:34:33] *** Parts: pur3funk (~bjorn@178-78-213-215.customers.ownit.se) ()
[17:34:52] *** Joins: mfao (~mao@187.1.168.150)
[17:36:25] <mfao> Hi, everyone! How can I post a picture with the chartflow of my problem?
[17:39:24] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[17:41:35] *** Joins: Tempesta (~Tempesta@user/tempesta)
[17:42:40] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[17:44:14] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[17:45:52] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Client Quit)
[17:47:37] *** Joins: mikess (~sam@user/mikess)
[17:50:50] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[17:54:22] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 265 seconds)
[17:58:39] *** Joins: Tempesta (~Tempesta@user/tempesta)
[18:01:02] *** Quits: nexus (~nexus@94-21-108-13.pool.digikabel.hu) (Ping timeout: 240 seconds)
[18:02:55] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[18:03:06] *** Joins: nexus (~nexus@84-236-40-211.pool.digikabel.hu)
[18:03:08] *** Joins: tejr (~tejr@user/tejr)
[18:04:40] *** Joins: pandom79 (~domenico@151.53.169.237)
[18:14:45] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 252 seconds)
[18:16:28] *** Joins: kts (~kts@103.73.237.62)
[18:18:48] *** Joins: chomwitt (~chomwitt@2a02:587:dc19:ca00:a7f3:60c8:c144:5351)
[18:19:01] *** Quits: drew (~drew@user/drew) (Ping timeout: 240 seconds)
[18:19:02] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 240 seconds)
[18:22:26] <twkm> find a place to host your picture like imgur or picpaste, send it there and share the resulting url.
[18:24:46] <ioxzev1z> Surely not that easy
[18:25:43] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:26:28] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[18:28:24] <clarity> Imagine if we could build a bunch of tubes and hook them up to all computers in the world, and then send packets containing images and other fun stuff
[18:28:44] *** Joins: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de)
[18:30:01] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[18:32:50] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[18:33:18] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[18:37:32] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[18:38:04] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:38:22] *** Joins: slavfox (~slavfox@93.158.232.111)
[18:38:57] *** Quits: mfao (~mao@187.1.168.150) (Ping timeout: 252 seconds)
[18:39:25] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[18:43:26] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:dce3:39ec:6605:20a)
[18:43:26] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:dce3:39ec:6605:20a) (Changing host)
[18:43:26] *** Joins: skapata (~Skapata@user/skapata)
[18:44:42] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[18:50:15] *** Joins: FluffyMask (~masque@user/fluffymask)
[18:50:16] *** Joins: mahmutov_ (~mahmutov@37.155.17.18)
[18:50:28] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[18:50:36] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[18:50:39] *** Joins: slavfox_ (~slavfox@93.158.232.111)
[18:51:03] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 252 seconds)
[18:51:25] *** slavfox_ is now known as slavfox
[18:51:35] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[18:53:29] *** Quits: X-Scale (~ARM@89.214.146.27) (Ping timeout: 256 seconds)
[18:53:29] *** X-Scale` is now known as X-Scale
[18:55:59] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 252 seconds)
[18:56:03] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[18:59:52] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:00:29] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:02:46] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[19:02:47] *** Quits: alch (~alch@151.82.65.1) (Read error: Connection reset by peer)
[19:02:55] *** Joins: ckdCreations (~ckdCreati@147.55.133.136)
[19:04:13] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[19:05:17] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[19:05:36] *** Joins: mfao (~mao@187.1.168.150)
[19:06:06] *** Joins: feral_hedgehog (~feral_hed@user/feral-hedgehog/x-2217356)
[19:07:11] *** Joins: alch (~alch@151.82.6.186)
[19:07:18] *** Joins: X-Scale` (~ARM@89.214.146.79)
[19:08:02] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[19:08:27] *** Joins: slavfox (~slavfox@93.158.232.111)
[19:09:42] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 272 seconds)
[19:09:43] *** X-Scale` is now known as X-Scale
[19:11:03] *** Quits: SorryBeauty (~SorryBeau@103.25.241.104) (Ping timeout: 256 seconds)
[19:12:40] *** Quits: kts (~kts@103.73.237.62) (Quit: Konversation terminated!)
[19:13:22] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[19:17:04] *** Joins: drew (~drew@user/drew)
[19:20:59] *** Joins: pulse (~pulse@user/pulse)
[19:22:35] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[19:22:35] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:22:55] *** Joins: bindu (~bindu@user/bindu)
[19:22:55] *** Joins: tejr (~tejr@user/tejr)
[19:24:03] *** Quits: drew (~drew@user/drew) (Ping timeout: 252 seconds)
[19:26:04] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: Lost terminal)
[19:27:31] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:29:37] <feral_hedgehog> Hello!
[19:29:42] <feral_hedgehog> If I'm creating a struct variable inside a switch case, does it matter if I first declare and then assign to its fields, or initialize it during the declaration?
[19:29:54] <feral_hedgehog> I'd expect it to not matter, because it should be allocated on the stack in both cases, but I vaguely remember that uninitialized variables are stored in a separate section in the compiled binary.
[19:30:55] <nitrix> It does. Without the initialization, the fields not assigned to have an indeterminate value.
[19:31:53] <nitrix> That is, struct foo f; f.x = 42; isn't the same as struct foo f = { .x = 42 }; in the case where there are other fields.
[19:31:58] <feral_hedgehog> Ohh sorry - forgot to mention that I'm assigning to all the fields
[19:33:08] <nitrix> Then it's irrelevant. Your assignments has the same outcome as if it was initialized.
[19:33:42] <nitrix> Considering you have all the fields to initialize the struct, you should probably delay its creation until you absolutely need it.
[19:37:06] *** Joins: drew (~drew@user/drew)
[19:37:11] <feral_hedgehog> That's why its down in the switch-case to begin with ^_^
[19:37:15] <feral_hedgehog> Thanks for you help!
[19:37:19] *** Quits: feral_hedgehog (~feral_hed@user/feral-hedgehog/x-2217356) (Quit: WeeChat 3.4.1)
[19:39:19] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:40:55] *** Joins: soul-d (~uknown@user/soul-d)
[19:48:27] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 256 seconds)
[19:52:07] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[19:54:19] *** Joins: chair1 (~nero@187.109.23.121)
[19:55:24] *** Quits: fe23 (~fe23@2409:8a34:466:6010:4025:21e8:af4:794f) (Quit: fe23)
[19:55:46] <chair1> Say I want to malloc for five arrays of same size but different types, can I use a single malloc and somehow distribute the memory for each pointer?
[19:56:19] *** Joins: terminalpusher (~terminalp@2a01:586:abfb:1:31dc:a4f3:420d:5622)
[19:56:23] <chair1> Or should I use 5 individual calls to malloc?
[19:56:30] *** Joins: cassepipe (~cassepipe@amontsouris-654-1-97-220.w90-44.abo.wanadoo.fr)
[19:57:57] <NRK> you can use a single malloc, but you'll need to deal with alignment manually.
[19:58:55] <NRK> also, probably not worth it. if you're doing something performance sensitive then you're better off rolling your own custom allocator.
[19:59:06] <chair1> Oh, better call malloc 5 times then. Thanks
[19:59:34] <chair1> Hmmmm, it was more a matter of checking NULL returning from malloc only once rather than five times hehe
[19:59:57] *** Quits: dsrt^ (~dsrt@65.240.140.18) (Remote host closed the connection)
[20:00:09] <NRK> what are you writing?
[20:00:37] <chair1> Just a hobby program, generate some HTML from some data in .txt
[20:00:55] <NRK> for most software, just bailing on malloc failure is pretty good strategy. you can just use a malloc wrapper that checks null.
[20:01:32] <chair1> bailing = exit the program? Everywhere you read you should check for errors, but no one ever says how lmao
[20:02:27] <NRK> emalloc(size_t n) { void *ret = malloc(n); if (ret == NULL) { fprintf(stderr, "malloc failed\n"); exit(1); } return ret; }
[20:02:30] <chair1> I thought about calling malloc in a loop like 1000 times until it succeds, but I guess it failing is rare nowadays
[20:02:44] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[20:02:54] <NRK> here you go, that's typically how i check for malloc failures :P
[20:03:11] <chair1> haha nice, I'll do something similar, thanks a lot
[20:04:03] <NRK> if you need to cleanup some tmpfiles and whatnot, then you can use atexit() as well.
[20:04:45] <chair1> I learned about atexit() recently after reading a bit of SDL documentation :D
[20:04:48] <chair1> sounds super useful
[20:06:13] *** Joins: strajder (~strajder@user/strajder)
[20:08:12] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 240 seconds)
[20:09:53] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:10:32] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 240 seconds)
[20:12:34] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[20:14:45] *** Joins: AmR (~AmREiSa@156.207.194.71)
[20:16:06] <beastie> chair1: it's there since K&R first ed.
[20:17:21] <chair1> I never finished reading this book, gotta finish any day
[20:17:43] <chair1> Anyway, thanks friends, gotta go do le daily labour
[20:17:44] <beastie> do you have a first edition?
[20:17:54] <chair1> Only the ANSI C version
[20:18:04] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[20:18:04] <beastie> ah.... that's the second.
[20:18:08] <chair1> Yep
[20:18:39] *** Quits: chair1 (~nero@187.109.23.121) (Quit: byeee)
[20:23:17] *** Quits: nexus (~nexus@84-236-40-211.pool.digikabel.hu) (Ping timeout: 240 seconds)
[20:24:31] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[20:24:53] *** Joins: Rynn (~rynn@216.30.158.198)
[20:25:22] *** Joins: nexus (~nexus@84-236-55-86.pool.digikabel.hu)
[20:26:01] *** Joins: meator (~meator@user/meator)
[20:30:27] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:30:34] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-cca0-ac82-6720-78cd.fixed6.kpn.net)
[20:31:41] *** Quits: the_lanetly_052 (~the_lanet@194.135.169.153) (Ping timeout: 252 seconds)
[20:32:17] *** Quits: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:33:20] *** Quits: cart_ (~cart@host-78-144-125-214.as13285.net) (Ping timeout: 252 seconds)
[20:35:10] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-cca0-ac82-6720-78cd.fixed6.kpn.net) (Ping timeout: 260 seconds)
[20:35:11] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[20:35:26] *** Quits: kdc (~kdc@196.211.197.133) (Quit: Leaving)
[20:35:52] *** Joins: Enitin (~Enitin@82.180.145.226)
[20:37:00] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 240 seconds)
[20:37:13] *** Quits: AmR (~AmREiSa@156.207.194.71) (Quit: Konversation terminated!)
[20:38:24] *** Joins: magla (~gelignite@d5364d83.access.ecotel.net)
[20:39:49] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[20:41:24] *** Quits: greeter (fresh@2604:180:2:117:cafe:babe:dead:beef) (Ping timeout: 240 seconds)
[20:41:38] *** Joins: Enitin (~Enitin@82.180.145.230)
[20:42:01] *** Joins: seninha (~chatzilla@user/seninha)
[20:43:01] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[20:46:34] *** Joins: cart_ (~cart@109.249.184.191)
[20:47:02] *** Quits: Thedarkb1 (~Thedarkb@82.3.80.190) (Ping timeout: 240 seconds)
[20:48:13] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[20:48:57] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[20:50:34] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 260 seconds)
[20:52:35] *** Quits: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[20:53:23] *** Joins: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net)
[20:54:12] *** Quits: clamiax (~clamiax@net-109-116-207-140.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[20:54:50] *** Quits: mfao (~mao@187.1.168.150) (Read error: Connection reset by peer)
[20:58:57] *** Joins: Bruda (~Bruda@172.58.62.241)
[21:00:59] *** Quits: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[21:01:02] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Ping timeout: 240 seconds)
[21:01:59] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[21:02:16] *** Joins: Betal (~Betal@user/betal)
[21:05:19] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[21:08:41] *** Quits: rcoote (~rcoote@2a02:908:690:a140:207:e706:7ed4:977b) (Ping timeout: 256 seconds)
[21:09:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:11:02] *** Quits: cart_ (~cart@109.249.184.191) (Ping timeout: 240 seconds)
[21:14:35] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 252 seconds)
[21:14:57] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[21:17:37] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[21:19:33] *** Joins: Thedarkb (~Thedarkb@92.40.196.70.threembb.co.uk)
[21:20:49] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[21:21:25] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[21:25:21] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[21:25:27] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[21:27:11] *** Joins: danisanti (~daniel@user/danisanti)
[21:28:16] <danisanti> I want to make my library function private. Do I need to static fn() on both the .c and the .h files?
[21:28:50] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[21:28:58] <rkta> danisanti: don't put it in the header, and yes.
[21:29:07] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[21:29:41] <caze> danisanti: You don't need to make it static in the .c.
[21:30:00] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:42] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[21:30:51] *** Joins: ns12 (~ns12@user/ns12)
[21:31:08] *** Joins: eck (~root@user/eck)
[21:31:37] <caze> danisanti: Just don't put it in the public header at all.
[21:32:26] <danisanti> caze: thanks
[21:32:46] <danisanti> caze: and to make a library function public?
[21:33:16] <danisanti> do I need a special keyword after putting it in the header file?
[21:33:31] <caze> No.
[21:34:00] *** Joins: CodePoint (~jonathan@2607:fb90:c69:64e:11dc:1c88:ffd2:77df)
[21:34:41] *** Quits: terminalpusher (~terminalp@2a01:586:abfb:1:31dc:a4f3:420d:5622) (Remote host closed the connection)
[21:34:56] *** Joins: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net)
[21:35:04] *** Quits: cassepipe (~cassepipe@amontsouris-654-1-97-220.w90-44.abo.wanadoo.fr) (Remote host closed the connection)
[21:35:27] <Amun-Ra> unless it's a wintendo dll
[21:36:55] *** Joins: KevinX (~KevinX@user/KevinX)
[21:39:47] *** Quits: ckdCreations (~ckdCreati@147.55.133.136) (Read error: Connection reset by peer)
[21:40:02] <sham1> Although making it static within the .c-file can help with encapsulating it further due to making it so that the name doesn't get exposed during linking
[21:40:12] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[21:40:15] <sham1> Can also help with inlining within the translation unit
[21:40:37] <sham1> That technically doesn't require it being `static`, but it certainly helps
[21:41:14] <danisanti> I have read an example where to make the function public, extern is used in the header file
[21:41:24] <danisanti> what is this extern all about?
[21:41:33] *** Quits: CodePoint (~jonathan@2607:fb90:c69:64e:11dc:1c88:ffd2:77df) (Ping timeout: 252 seconds)
[21:41:43] *** Joins: nq (~nq@2a02:2f08:e015:a900:40da:1589:cc07:ab3)
[21:42:28] <caze> extern is the default for functions.
[21:43:04] *** Joins: ckdCreations (~ckdCreati@147.55.130.34)
[21:43:17] <Amun-Ra> sham1: still, inline is just a hint
[21:43:38] <sham1> Amun-Ra: that's why I was talking about static
[21:43:54] <Bruda> danisanti: https://www.tutorialspoint.com/extern-keyword-in-c
[21:44:27] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[21:45:14] <danisanti> thankx
[21:46:56] <caze> That's kind of a horrible explanation of extern.
[21:47:32] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[21:47:34] <sham1> Well it's tutorialspoint, which is quite similar to other sites like GeeksForGeeks and such
[21:47:55] <caze> "They are not bound by any function. They are everywhere in the program i.e. global."
[21:47:59] <caze> Nope.
[21:48:14] <fizzie> There's even a block-scoped `extern int b;` right there in the example.
[21:49:47] <Amun-Ra> sham1: I'd say that doesn't require it being 'inline', the other way
[21:49:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[21:50:15] <sham1> Indeed it doesn't
[21:51:31] <caze> danisanti: It's sometimes the case where your library has a "helper" function, that is only called by the other functions of the library. It is not meant to be called directly by the users of the library. In this case you can have one version of the header file that doesn't even mention the helper function, and a second version of the header file that is meant for the library's internal use, that does mention the
[21:51:33] <caze> helper function.
[21:54:49] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[21:55:51] *** Quits: drew (~drew@user/drew) (Ping timeout: 252 seconds)
[21:56:02] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[21:56:18] *** Quits: baltazar (~baltazar@178-164-184-5.pool.digikabel.hu) (Ping timeout: 256 seconds)
[21:57:46] *** Joins: baltazar (~baltazar@84-236-97-135.pool.digikabel.hu)
[21:59:34] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (Quit: quit)
[22:00:06] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[22:01:07] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:02:26] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:03:06] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[22:03:11] *** Joins: drew (~drew@user/drew)
[22:04:20] <sham1> Because, as you noted, `inline` tends to nowadays act more as a hint more than a strong thing. Although having stuff like `static inline` functions in headers can be useful, for example stuff like this: `static inline uint32_t be_to_uint32(const uint8_t *bytes) { uint32_t ret = 0; ret |= ((uint32_t)(bytes[0])) << 24; ret |= ((uint32_t)(bytes[1])) << 16; ret |= ((uint32_t)(bytes[2])) << 8; ret |=
[22:04:21] <sham1> ((uint32_t)(bytes[3])) << 0; return ret; }` which is useful to have in a header whilst being static inline for the inlining
[22:04:30] <sham1> Amun-Ra: ^
[22:05:09] <sham1> Since `inline` also gives you the ability to have the same function in multiple translation units
[22:06:41] *** Inline__ is now known as Inline
[22:06:51] *** Quits: Inline (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de) (Quit: Leaving)
[22:08:03] <caze> It's irrelevant if the identifier is exposed during linking if the compilation fails because there is no declaration in scope.
[22:10:14] <sham1> It's not irrelevant since it also signals intentionality about what it should be like once fixed
[22:11:34] <caze> Fixing it would be removing the attempted use of the function.
[22:12:06] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:12:56] *** Joins: Torr (~Torr@user/torr)
[22:13:41] <sham1> I'm not sure if danisanti was talking about that kind of a situation. After all, why would one try to use a function like that
[22:13:57] *** Joins: Enitin (~Enitin@82.180.145.228)
[22:17:18] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[22:17:59] *** Joins: justAstache (~justache@user/justache)
[22:18:53] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (Quit: ZNC - http://znc.in)
[22:19:59] *** Quits: Torr (~Torr@user/torr) ()
[22:21:41] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.104)
[22:23:07] *** Quits: pandom79 (~domenico@151.53.169.237) (Read error: Connection reset by peer)
[22:23:32] *** Joins: pandom79 (~domenico@37.100.200.52)
[22:24:19] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fcde:a8ca:a29e:9109)
[22:24:51] *** Quits: iomari891 (~iomari891@197.210.76.112) (Ping timeout: 256 seconds)
[22:27:02] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Ping timeout: 240 seconds)
[22:27:49] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:28:23] *** Joins: osXnut (~osXnut@77.125.126.151)
[22:29:55] *** Quits: pandom79 (~domenico@37.100.200.52) (Quit: Konversation terminated!)
[22:30:26] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[22:31:22] *** Joins: kuber (~kuber@75-172-6-223.tukw.qwest.net)
[22:31:34] *** Joins: wlemuel_ (~wlemuel@210.22.124.110)
[22:32:03] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[22:32:17] *** Quits: wlemuel_ (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[22:32:39] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[22:33:05] *** Joins: Zeturic (~Orimendix@50.26.218.162)
[22:36:34] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[22:36:52] *** Quits: raym (~raym@user/raym) (Ping timeout: 268 seconds)
[22:38:14] *** Joins: raym (~raym@user/raym)
[22:38:48] *** Joins: Inline (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de)
[22:39:40] *** Joins: shivesh (~shivesh@user/shivesh)
[22:44:12] *** Joins: Rynn (~rynn@216.30.158.198)
[22:44:18] <yolo> http://ix.io/3SGR  is this a violation of strict-aliasing?
[22:45:01] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[22:46:54] *** Joins: cart_ (~cart@2a00:23c4:2b81:5401:b86b:a5ff:8c43:249c)
[22:47:01] *** Joins: raym (~raym@user/raym)
[22:47:56] *** Quits: cart_ (~cart@2a00:23c4:2b81:5401:b86b:a5ff:8c43:249c) (Client Quit)
[22:48:11] *** Joins: cart_ (~cart@2a00:23c4:2b81:5401:b86b:a5ff:8c43:249c)
[22:48:23] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[22:48:41] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Ping timeout: 245 seconds)
[22:50:05] <danisanti> thank you caze, thank all
[22:50:24] *** Quits: danisanti (~daniel@user/danisanti) (Remote host closed the connection)
[22:52:44] *** Joins: crankslider (~slidercra@user/slidercrank)
[22:54:10] *** Quits: nexus (~nexus@84-236-55-86.pool.digikabel.hu) (Ping timeout: 250 seconds)
[22:55:02] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[22:55:43] *** Joins: nexus (~nexus@178-164-235-215.pool.digikabel.hu)
[22:57:33] <Bruda> Dennis Ritchie himself could answer a question and there would still be an argument about it in here lol. I think the right way to understand something is to explore the topic through various sources and come to a sensible understanding of it on your own.
[22:58:28] *** Quits: jkotra (~jkotra@122.169.141.242) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[22:59:52] *** Joins: jkotra (~jkotra@122.169.141.242)
[23:01:28] <Amun-Ra> Dennis right now is like a Stone Cold Austin, but without the Austin
[23:01:59] *** Joins: azed (~azed@197.23.130.142)
[23:02:15] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.104) (Ping timeout: 256 seconds)
[23:02:31] *** Joins: Narrat (~omnius@p200300df5f13efa406ea56fffe2e7cdc.dip0.t-ipconnect.de)
[23:02:54] *** Quits: alch (~alch@151.82.6.186) (Read error: Connection reset by peer)
[23:03:37] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[23:06:53] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Remote host closed the connection)
[23:07:35] *** Joins: alch (~alch@mi-18-33-112.service.infuturo.it)
[23:08:35] *** mendel_munkis is now known as munkis
[23:09:05] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[23:12:02] <Bruda> It's stone cold Steve Austion. Not stone cold Austin.
[23:12:10] <Bruda> Case in point.
[23:12:49] <Amun-Ra> true
[23:15:17] *** Quits: cart_ (~cart@2a00:23c4:2b81:5401:b86b:a5ff:8c43:249c) (Ping timeout: 240 seconds)
[23:17:08] *** Joins: immibis (~hexchat@62.156.144.218)
[23:17:42] <Bruda> s/Austion/Austin/
[23:25:37] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[23:26:23] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[23:28:37] <cuppajoe> I am trying to exploit a buffer overflow with gets() where I have executable code as the input, and then I overwrite the return address. The array starts at %ebp-108. That means the saved return address is at %ebp+4, so the input string must be 116 bytes, right? Its not working, so I just want to make sure there isn't a flaw in my understanding.
[23:28:39] *** Joins: EdFletcher (~PKD@user/edfletcher)
[23:28:43] <cuppajoe> And the machine is 32-bit
[23:30:01] <sham1> ,cc struct foo { unsigned int f : 4; } bar = { .f 16 }; printf("%d", bar.f);
[23:30:02] <candide> sham1: error: expected '=' before numeric constant
[23:30:06] <sham1> ,cc struct foo { unsigned int f : 4; } bar = { .f = 16 }; printf("%d", bar.f);
[23:30:08] <candide> sham1: [warning: unsigned conversion from 'int' to 'unsigned char:4' changes value from '16' to '0' [-Woverflow]] 0
[23:31:48] <pragma-> ,cc puts("Hello."); return 7;
[23:31:50] <candide> pragma-: Hello.  [Exit 7]
[23:32:10] *** Quits: azed (~azed@197.23.130.142) (Read error: Connection reset by peer)
[23:32:43] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:33:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[23:33:47] *** Joins: Everything (~Everythin@37.115.210.35)
[23:33:59] *** Lord_of_Life_ is now known as Lord_of_Life
[23:35:00] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[23:40:27] <caze> Bruda: The tutorialspoint link you provided is quite clearly wrong.
[23:40:32] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[23:41:41] <Bruda> I'm already past that. But thanks for that pointless remark so long after the fact.
[23:41:56] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-cca0-ac82-6720-78cd.fixed6.kpn.net)
[23:42:05] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:fcde:a8ca:a29e:9109) (Remote host closed the connection)
[23:42:24] <caze> Bruda: I'm not sure what you were referring to then in your comment > Dennis Ritchie himself could answer a question and there would still be an argument about it in here lol.
[23:42:28] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fcde:a8ca:a29e:9109)
[23:45:33] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.103)
[23:46:12] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-cca0-ac82-6720-78cd.fixed6.kpn.net) (Ping timeout: 240 seconds)
[23:46:48] *** Joins: Klinda (~superleag@user/klinda)
[23:49:08] <Bruda> You're doing it right now lol. Doesn't matter what someone says, there's always someone missing the point and complicating the answer.
[23:49:57] <sham1> We just want correctness. Besides, discussions are good, no?
[23:50:07] <Bruda> Discussions, yes of course.
[23:50:45] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:50:45] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:52:02] <Bruda> I've been here before. I got my own elitist beatdown for asking questions about K&R exercises.
[23:52:14] <caze> Oh you weren't referring to a specific question and just meant in general.
[23:52:42] <caze> Elitist beatdown?
[23:52:52] *** Quits: Narrat (~omnius@p200300df5f13efa406ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[23:52:58] <sham1> Also, Mr. Ritchie wouldn't be able to get through with clout alone assuming he has some misconceptions about the later standard C stuff ;)
[23:53:32] <sham1> s/wouldn't be/wouldn't have been/
[23:54:40] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[23:55:02] <Bruda> Thats fair. But the other half of my point was that thorough research can yield a better understanding than asking questions in here and sitting through the debates. Conflicting answers make things more confusing for folks trying to understand something.
[23:55:58] <Bruda> Easy to forget that this isn't a help channel, it's a discussion channel for experience C coders.
[23:56:18] <caze> Read each person's explanation for why they're correct, and decide for yourselg.
[23:56:46] <rcf> Given how error-prone C development is and the immeasurable cost this has had on the end users subjected to software written in it, I don't think driving people away with elitist beatdowns is a bad thing
[23:57:16] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:58:24] <Bruda> Spoken like someone who enjoys giving said beatdowns. Exactly the sort of thing I was speaking up about.
[23:58:32] <rcf> The standard and implementations are written by the worst sorts of pedants you could ever encounter, beyond anyone in this channel certainly.
[23:59:45] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
