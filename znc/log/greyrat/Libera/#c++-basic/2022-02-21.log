[00:00:12] *** Quits: bebyx (~Thunderbi@user/bebyx) (Read error: Connection reset by peer)
[00:00:22] *** Joins: bebyx1 (~Thunderbi@user/bebyx)
[00:02:41] *** bebyx1 is now known as bebyx
[00:32:51] *** majors_ is now known as majors
[00:44:44] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[00:47:27] *** Quits: kariosfox (~kariosfox@176.221.123.109) (Remote host closed the connection)
[00:48:01] *** Joins: kariosfox (~kariosfox@176.221.123.109)
[00:48:47] <ali1234> if static initialization of flexible array is a compiler specific extension, how do i get a variable length block of data with its length into the same object?
[00:50:34] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:4c08:71:8cb3:77da)
[01:00:05] <ali1234> https://ideone.com/NZ3E4s
[01:00:15] <cbreak> ali1234: why do you want it in the same object?
[01:00:23] *** Quits: AmR (~AmREiSa@156.199.67.136) (Quit: Konversation terminated!)
[01:00:43] <ali1234> because i don't want to have to pass two separate arguments to the function that deal with it
[01:01:21] <cbreak> how about std::vector?
[01:01:22] <ali1234> i suppose i could make a macro like #define play_sound(x) real_play_sound(x, x_length)
[01:01:29] <ali1234> you like macros right? :P
[01:01:32] <cbreak> or a range?
[01:01:46] <cbreak> or define your own type for sound
[01:01:46] <ali1234> how would a range or vector help?
[01:01:55] <cbreak> vectors contain their length.
[01:02:04] <ali1234> yes, how do i define my own type that does this?
[01:02:08] <ali1234> within the standard
[01:02:37] <cbreak> struct X { size_t length; std::unique_ptr<T[]> data; }; // one example
[01:02:56] <ali1234> what will the pointer point to?
[01:03:04] <cbreak> template<typename T, size_t N> struct Y { T data[N]; }; // fully static
[01:03:23] <cbreak> ali1234: something allocated with new T[]
[01:03:38] <ali1234> if i use a template, what wll the declaration of the play_sound function look like?
[01:03:48] <cbreak> unique_ptr<T[]> will use delete[], unique_ptr<T> will use delete
[01:04:23] <cbreak> ali1234: template<typename T, size_t N> play(Y<T,N> const & y)
[01:04:25] <ali1234> there won't ever be any deleting. the data will be in read-only memory
[01:05:08] <cbreak> the size of any object of type T is known at compile time.
[01:05:17] <cbreak> that size is sizeof(T)
[01:05:27] <ali1234> hmm
[01:05:38] <ali1234> and that won't lead to multiple play functions being generated?
[01:05:44] <cbreak> it will.
[01:05:49] <ali1234> well that's no good then
[01:05:53] <cbreak> but you can call functions inside.
[01:06:04] <cbreak> for example one that takes the size as normal parameter.
[01:06:33] <ali1234> what are the chances the compiler is smart enough to optimize it out?
[01:06:41] <cbreak> ask godbolt :)
[01:06:52] <cbreak> you can also do the same trickery with arrays
[01:07:42] <cbreak> template<size_t N> void foo(uint8_t (& const data)[N]) { ... }
[01:08:08] <cbreak> ... not entirely sure about the syntax there though, arrays are annoying in parameter lists
[01:09:17] <ali1234> what if i put all the data in one big static array of known size, then in the sound effect object store pointers to the beginning and the end within that static array? will that be evaluated at compile time?
[01:09:50] <ali1234> const pointers of course
[01:11:15] <cbreak> that can also work.
[01:11:45] <cbreak> you'd only have to store beginnings though, since presumably the beginning of the next sound is the end of the one before. (apart from last one)
[01:11:47] *** Quits: sigma__ (~sigma@86.57.90.219) (Quit: Konversation terminated!)
[01:12:43] <ali1234> well the goal is to not store anything in the executable and have the actual addresses used inline
[01:13:01] <cbreak> https://godbolt.org/z/7Th4r35v9
[01:13:41] <ali1234> that shows it got optimized out right?
[01:14:10] <cbreak> depends on what you mean
[01:14:34] <ali1234> in test, foo is called directly
[01:14:39] <cbreak> indeed it is.
[01:14:51] <cbreak> because indirection got inlined
[01:15:14] <ali1234> right, so it didn;t generate any indirection functions at all
[01:15:15] *** Joins: sigma_ (~sigma@164.215.201.51)
[01:15:28] <cbreak> not in the final binary
[01:15:43] <cbreak> it did generate it while compiling
[01:16:15] <ali1234> the final binary is what i care about. it has to fit in 64k flash including all the graphics, sound, music etc
[01:16:36] <cbreak> how much ram do you have? :)
[01:16:43] <ali1234> like half a megabyte
[01:16:54] <ali1234> but that includes the framebuffer which eats like half of it
[01:16:55] <cbreak> ok, then you can compress your stuff
[01:17:11] <cbreak> or generate it on the fly, like they do for those 4k demos
[01:17:37] <ali1234> synth sound effects sound bad tho...
[01:17:47] <cbreak> ... you meant to say "stylish", right?
[01:19:44] <cbreak> https://www.youtube.com/watch?v=eclMFa0mD1c
[01:20:42] *** Quits: magla (~gelignite@55d46ecf.access.ecotel.net) (Quit: Stay safe!)
[01:21:21] <ali1234> amiga didn't have a hardware synth, what you are hearing there is all 8 bit sound samples
[01:21:58] <ali1234> that goes for the soundtracker mod format too. it has no support for synth sounds
[01:22:13] <ali1234> the music is going to be in that format
[01:22:41] <cbreak> it's synthesized enough for my taste :)
[01:24:04] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:25:25] <ali1234> seems that is actually 16 bit samples
[01:36:44] *** Quits: sigma_ (~sigma@164.215.201.51) (Quit: Konversation terminated!)
[01:37:32] <ali1234> so there's another option, which is skip the source step entirely and just do "ld -r -b binary <files> output.o"
[01:37:58] <ali1234> but it isn't clear to me how i'm supposed to use the symbols in the o file that produces
[01:41:00] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[01:41:38] *** Joins: markong (~kvirc@213.146.188.203)
[01:42:14] *** Joins: sigma_ (~sigma@164.215.201.51)
[01:45:41] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[01:48:42] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[01:53:30] *** Joins: teut (~teut@122.161.83.81)
[01:53:58] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[01:54:54] <cbreak> well... run nm on it?
[02:07:10] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:4c08:71:8cb3:77da) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:17:20] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:24:57] *** Quits: kariosfox (~kariosfox@176.221.123.109) (Remote host closed the connection)
[02:26:10] *** Joins: kariosfox (~kariosfox@176.221.123.109)
[02:27:56] *** Quits: kariosfox (~kariosfox@176.221.123.109) (Read error: Connection reset by peer)
[02:28:28] *** Joins: kariosfox (~kariosfox@176.221.123.109)
[02:38:53] <ali1234> this template function thing doesn't work if you try to call it in a different file than where the array is declared
[02:41:46] <ali1234> ie all you have is "extern const uint8_t testdata[];"
[02:42:26] <ali1234> i guess this is always going to be a problem if trying to evaluate the size at compile time
[02:43:58] <cbreak> ali1234: yes, obviously
[02:44:03] <cbreak> because for those, the size isn't known
[02:44:18] <cbreak> you'd have to use std::array or declare it with the size
[02:45:20] <ali1234> i suppose that isn't a problem
[02:46:12] <ali1234> just have to fix the source generator
[02:57:05] *** Quits: bobb_ (~bobb_@dslb-088-066-130-106.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[03:00:52] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[03:23:08] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 272 seconds)
[03:25:31] *** Quits: DSpider (~DSpider@82.79.237.78) (Quit: Leaving)
[03:33:18] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:41:53] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:46:12] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[03:48:39] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[03:53:19] <FuzzyBottom> I am working on an problem. https://pastebin.com/y6WnG6TU . I would appreciate some help on the best way to implement this. Thanks for any advice you have to offer.
[03:56:38] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[04:05:05] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[04:37:37] *** Quits: jsbach (~jsbach@2a01:c23:6025:2d00:256b:a810:99a0:449b) (Ping timeout: 240 seconds)
[06:03:15] *** Joins: ferdna (~ferdna@user/ferdna)
[06:19:23] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:20:25] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.29-122.dynamic.3bb.co.th) (Remote host closed the connection)
[06:21:04] *** Joins: p-i- (~Ohmu@2403:6200:8978:3172:74c7:3101:7ef7:bc18)
[06:56:44] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:00:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:27:39] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:4c08:71:8cb3:77da)
[07:37:48] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:4c08:71:8cb3:77da) (Ping timeout: 240 seconds)
[09:29:21] *** Quits: nickel84481 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (Quit: WeeChat 3.3)
[10:45:16] *** Joins: p-i-_ (~Ohmu@183.89.29.122)
[10:46:11] *** Joins: jsbach (~jsbach@2a01:c22:ad5b:3300:3988:6864:2fb1:fbc9)
[10:47:16] *** Joins: NiD27 (~nid27@49.205.150.78)
[10:48:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:3172:74c7:3101:7ef7:bc18) (Ping timeout: 240 seconds)
[10:49:38] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6344)
[10:50:52] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:54:04] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[10:55:20] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[10:58:37] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:03:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:55:52] *** Joins: osfe (~lemaire@nanpc540.in2p3.fr)
[12:47:17] *** Quits: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0) (Ping timeout: 240 seconds)
[12:48:31] *** Joins: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0)
[12:59:42] *** Quits: kariosfox (~kariosfox@176.221.123.109) (Remote host closed the connection)
[13:02:51] *** Quits: p-i-_ (~Ohmu@183.89.29.122) (Remote host closed the connection)
[13:03:23] *** Joins: p-i- (~Ohmu@2403:6200:8978:3172:a52c:82f0:fae0:da04)
[13:07:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:18:46] *** Quits: sigma_ (~sigma@164.215.201.51) (Quit: Konversation terminated!)
[13:20:56] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:3172:9c8d:bc4a:f54f:40ea)
[13:22:13] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:3172:9c8d:bc4a:f54f:40ea) (Remote host closed the connection)
[13:22:47] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:3172:1daf:a0:fe39:6993)
[13:24:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:3172:a52c:82f0:fae0:da04) (Ping timeout: 240 seconds)
[13:39:56] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:46:03] *** Joins: teut (~teut@122.161.83.81)
[13:46:51] <teut> https://dpaste.org/cfwh#L12Â  in thisÂ  code, I was trying something.Â  Basically line 11 andÂ  the T in line 12 were not there and that was theÂ  interface
[13:47:53] <teut> now I was the Task of a type which I want to pass at run time
[13:48:24] <teut> but to do that I will have to pass T everywhere to the Scheduler too
[13:49:27] <teut> this looks weird , I only want to initialize a Task of a type T.
[13:50:19] <teut> and then the Scheduler would also have to be initialized with T
[13:51:52] <Alipha> teut: what is the T for? Why are you passing something into the task when it's ran?
[13:53:37] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:55:59] <teut> the lambda that std::function is capturing is currently having 0 args
[13:56:56] <teut> I want that I should be able to use it forÂ  std::function<void(int)> , or std::function<void(string)> etc
[13:57:41] <Alipha> teut: what args would get passed to it when it's called?
[13:58:08] <teut> that would be decided at runtime
[13:59:03] <teut> it can be a lambda with 0 args
[13:59:14] <teut> or even with 1 arg or many arg
[13:59:16] <teut> s
[14:00:32] <Alipha> teut: So when you call callLater, at that point, you specify what args the lambda gets called with at the later time?
[14:00:40] <teut> yes
[14:01:12] <teut> in python you do not have to think about it since functions are first class objects
[14:03:55] <teut> templates provide static polymorphism and for dynamic polymorphism I should use a class and then subclasses?
[14:04:44] <Alipha> To achieve that, really, all you have to do is wrap your lambda in another lambda, instead of adding a T parameter to Task or mucking with polymorphism
[14:06:49] <Alipha> auto wrappedFunc = [=]() { func(args...); };
[14:06:50] <teut> [&](){Â Â  return [](int n){Â  fun(n) ;}Â  }?
[14:08:30] <Alipha> Yes, but you'll need [=] because the parameters of callLater aren't going to live until that lambda gets called, and so you'll need to copy them.
[14:12:24] <teut> https://github.com/Teut2711/Scheduler/blob/development/producerConsumer.cpp#L43
[14:12:53] <teut> do you remember my scheduler code from that day ?
[14:13:17] <teut> its same only and I am using the scheduler to run this producer consumer
[14:14:39] <teut> now in that line q.getÂ Â Â  takes a lambdaÂ  with single argumentÂ Â  and thisÂ  lambda thus is not of typeÂ Â Â Â  std::function<void()>
[14:15:12] <teut> so it doesnt fit the callSoon's prototype
[14:18:00] <Alipha> Wouldn't you just do the same thing for callSoon? Wrap the lambda with the additional args?
[14:20:32] <teut> so call soon wouldÂ  getÂ Â Â  [&](){Â Â  return [](int n){Â  fun(n) ;}Â  }?
[14:20:52] <Alipha> template<typename... Args> void callSoon(Task func, Args... args) { ready.push([=]() { func(args...); }); }
[14:21:56] <Alipha> And you really need to think about and understand when you can use [&] and when you need to use [=].
[14:23:08] <teut> = looks like a better choice for now atleast since I am using int
[14:23:37] <Alipha> It doesn't matter if you're using int. It's the only choice here.
[14:24:02] <teut> <typename... Args>Â Â  is that ...ArgsÂ  some syntax in c++ or you are just writing some pseudocode?
[14:24:19] <Alipha> That's c++ syntax
[14:25:08] *** Quits: Cienisty (Cienisty@user/cienisty) (Quit: Error 606 | Demon not found)
[14:25:11] <teut> what do I search for?
[14:25:14] <Alipha> func and args (the parameters to callSoon) die as soon as  callSoon ends. So they won't be alive for when you actually call the lambda from the ready queue. You NEED [=] so that you make copies of func and args. You can't have references to func and args
[14:25:51] <Alipha> They're called variadic templates. They're also called parameter packs.
[14:27:30] <teut> thanks for the help, let me check that and get back then
[14:28:02] <Alipha> I'm going back to sleep. My smoke detector's low battery alert woke me up, lol
[14:29:38] <teut> night's spoiled!
[14:30:12] *** Joins: Cienisty (Cienisty@user/cienisty)
[14:30:13] <teut> it's great that you can understand this pesky code in half sleepy mode
[14:30:16] *** Quits: NiD27 (~nid27@49.205.150.78) (Remote host closed the connection)
[14:38:37] *** Joins: AmR (~AmREiSa@156.199.67.136)
[14:39:30] <teut> https://www.youtube.com/watch?v=Os5YLB5D2BU 1:18Â Â  what is declytype(auto)?
[14:39:36] <teut> decltype
[14:46:41] *** Quits: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) (Remote host closed the connection)
[15:01:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[15:02:09] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[15:24:22] *** Joins: markong (~kvirc@213.146.188.203)
[15:32:25] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[15:33:44] *** Joins: p-i- (~Ohmu@2403:6200:8978:7799:fd4a:71a0:8bdb:db3d)
[15:35:00] *** Quits: CalamityToo (~CalamityB@user/CalamityBlue) (Ping timeout: 240 seconds)
[15:36:06] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:3172:1daf:a0:fe39:6993) (Ping timeout: 260 seconds)
[15:40:04] *** Quits: jsbach (~jsbach@2a01:c22:ad5b:3300:3988:6864:2fb1:fbc9) (Remote host closed the connection)
[15:42:24] *** Joins: jsbach (~jsbach@2a01:c22:ad5b:3300:4d02:2c71:33f7:3a7b)
[16:12:34] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[16:17:50] *** Joins: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[16:55:31] *** Quits: jbalint (~jbalint@071-090-119-177.res.spectrum.com) (Read error: Connection reset by peer)
[16:55:59] *** Quits: artok (~azo@mobile-access-b0486a-201.dhcp.inet.fi) (Quit: reboot for update)
[16:57:10] *** Joins: jbalint (~jbalint@071-090-119-177.res.spectrum.com)
[17:01:20] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:c91d:95da:a39d:f68c)
[17:02:22] *** Joins: bebyx (~Thunderbi@user/bebyx)
[17:06:53] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[17:08:03] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[17:10:57] *** Joins: artok (~azo@mobile-access-b0486a-201.dhcp.inet.fi)
[17:16:07] *** Quits: markong (~kvirc@213.146.188.203) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[18:15:16] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[18:34:01] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:40:33] <Alipha> `decltype(auto)` is a special usage of the decltype keyword and really has nothing to do with its normal usage. So, if a function returns auto, that means it's returning by value. If a function returns auto&, then it's returning an lvalue ref. If a function returns auto&&, then it's returning an rvalue ref. But now, in sine situations, you'd want to return either an lvalue ref or an rvalue ref, depending
[18:40:35] <Alipha> upon if your return statement is an lvalue ref or rvalue ref. That comes up most commonly when you use std::forward, eg, `return std::forward<T>(x);` You want to match the function's return type to match the type of x (whether x is an lvalue or rvalue ref). And so, decltype(auto) will do that. It'll be T& or T&& depending upon what x is.
[18:54:49] *** Quits: hsv-2 (~weechat@gateway/tor-sasl/hsv-2) (Remote host closed the connection)
[18:55:10] *** Joins: hsv-2 (~weechat@gateway/tor-sasl/hsv-2)
[19:41:50] *** Quits: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0) (Remote host closed the connection)
[19:42:38] *** Joins: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0)
[20:00:31] *** Joins: magla (~gelignite@d5361f17.access.ecotel.net)
[20:06:32] *** Joins: markong (~kvirc@213.146.188.203)
[20:13:21] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[20:13:32] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[20:21:14] *** LordKalma_ is now known as LordKalma
[20:23:27] *** Joins: Crash (~dmon@177.21.52.60)
[20:26:47] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:c91d:95da:a39d:f68c) (Quit: Leaving)
[20:27:07] *** Quits: Crash (~dmon@177.21.52.60) (Quit: Leaving)
[20:28:11] *** Quits: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0) (Remote host closed the connection)
[20:34:37] *** Joins: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0)
[20:46:17] *** Quits: MetaNova (zero-one@znc/supporter/metanova) (Ping timeout: 240 seconds)
[20:46:24] *** Joins: teut (~teut@122.161.83.81)
[20:48:45] <teut> https://dpaste.org/AZkN#L1,14
[20:48:57] <teut> void AsyncQueue::get(const void(*)(int) callback) {
[20:49:14] <teut> how to write the pointer to theÂ Â  `run` function?
[20:49:35] <teut> const void(*)(int) callbackÂ Â  is wrong
[20:53:39] *** Joins: MetaNova (~zero-one@znc/supporter/metanova)
[21:00:17] <Alipha> teut: um, you're really best off having get accept a std::function<void(int)>. Consumer::run is a a member function, and member function pointers are different from regular function pointers.
[21:00:51] <teut> Â ;(  thats hard
[21:01:12] <Alipha> void AsyncQueue::get(void(Consumer::*callback)(int)) {   // and then `q.get(&Consumer::run);`, but i don't think you'll like this path
[21:01:12] <teut> I did look at the variac templates
[21:01:59] <Alipha> void AsyncQueue::get(void(*callback)(int)) {  // would be a regular function pointer, but that can't point to Consumer::run, unless Consumer::run is static
[21:02:50] <Alipha> why is void `AsyncQueue::get(std::function<void(int)> callback) {` hard?
[21:03:11] <teut> because for that I will have to change the scheduler
[21:03:30] <teut> or use variac templates which is a bad practice
[21:03:44] <teut> variadic templates.Â  this
[21:04:51] <Alipha> also, regarding your question about decltype(auto)....
[21:04:53] <Alipha> `decltype(auto)` is a special usage of the decltype keyword and really has nothing to do with its normal usage. So, if a function returns auto, that means it's returning by value. If a function returns auto&, then it's returning an lvalue ref. If a function returns auto&&, then it's returning an rvalue ref. But now, in sine situations, you'd want to return either an lvalue ref or an rvalue ref, depending
[21:04:55] <Alipha> upon if your return statement is an lvalue ref or rvalue ref. That comes up most commonly when you use std::forward, eg, `return std::forward<T>(x);` You want to match the function's return type to match the type of x (whether x is an lvalue or rvalue ref). And so, decltype(auto) will do that. It'll be T& or T&& depending upon what x is.
[21:06:36] <teut> Â what's the difference betweenÂ  valueÂ  and (lvalue and rvalue)
[21:06:38] <teut> ?
[21:08:11] <teut> ok ok , its just how to accept the result of the fuction
[21:08:30] <teut> int a or int &a or int && a
[21:08:55] <Alipha> right
[21:09:39] <teut> ya in the video they used std::forward too
[21:25:38] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Quit: ZNC 1.8.2 - https://znc.in)
[21:27:42] *** Joins: duude__ (~duude__@user/duude/x-4676560)
[22:07:26] *** Joins: CaCode (~CaCode@user/cacode)
[22:12:18] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[22:24:02] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:08:51] *** Quits: magla (~gelignite@d5361f17.access.ecotel.net) (Quit: Stay safe!)
[23:39:00] *** Joins: magla (~gelignite@d5361f17.access.ecotel.net)
[23:41:28] *** Quits: jbalint (~jbalint@071-090-119-177.res.spectrum.com) (Read error: Connection reset by peer)
[23:43:09] *** Joins: jbalint (~jbalint@071-090-119-177.res.spectrum.com)
[23:49:48] *** Joins: CaCode_ (~CaCode@user/cacode)
[23:51:08] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[23:53:04] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 272 seconds)
