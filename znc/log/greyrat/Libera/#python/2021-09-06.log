[00:00:22] *** Joins: KevinX_ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[00:01:45] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 248 seconds)
[00:02:31] *** Joins: heco_ (~redrum@user/redrum88)
[00:05:40] *** Quits: heco (~redrum@user/redrum88) (Ping timeout: 252 seconds)
[00:06:00] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[00:06:20] *** Quits: ali1234 (~al@user/ali1234) (Quit: Leaving.)
[00:06:40] *** Quits: heco_ (~redrum@user/redrum88) (Ping timeout: 240 seconds)
[00:07:10] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:07:24] *** Joins: heco_ (~redrum@user/redrum88)
[00:07:24] *** heco_ is now known as heco
[00:08:38] <Henry151> so, looking at this: https://stackoverflow.com/questions/17261551/how-can-i-use-sqlalchemy-to-do-mysql-explain and trying to do the technique at the bottom of the first answer
[00:09:26] <Henry151> the one like DBSession().execute('EXPLAIN ' + query, {'param_1': 'value1', 'param_2': 'value2'}) ... but i'm finding it doesn't seem to work the way shown there, and i want to understand why
[00:09:43] *** erica is now known as birb
[00:10:38] <Henry151> if query = str(DBSession().query(Model).filter(***)) , and i look at query and see it has things in it like %(variable_name) , my understanding was that those are the "bound parameters" talked about
[00:11:10] *** Quits: Dexel (~Arco@68.40.3.32) (Ping timeout: 240 seconds)
[00:11:44] *** Quits: justoneprimate (~textual@2603-6011-df05-844d-b57f-2194-a810-a55d.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[00:11:46] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[00:13:48] <Henry151> but, i'm finding i have to do foo = str(DBSession().query(Modlel).filter(***)) and then foo = str(query) % {'param_1': 'value1'}, and then i can do the DBSession().execute('EXPLAIN ' + foo) and that seems to work. Putting the dictionary inside the DBSession().execute() like shown in the stack overflow page doesn't seem to work for me.
[00:14:11] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[00:14:25] <Henry151> sorry typo, "have to do foo = ..." was supposed to say "have to do query = ..."
[00:14:36] <yitz> Henry151: The `%` is string formatting, not bound SQL vars.
[00:14:46] <yitz> I think `execute()` supports bound vars
[00:15:14] <yitz> See the docs on the .execute() or .query() or whatnot
[00:16:30] *** Quits: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net) (Remote host closed the connection)
[00:17:07] *** Quits: el_kevino (~mote@2604:a880:400:d1::901:5001) (Quit: WeeChat 3.2)
[00:18:28] *** Joins: Adoi (~Adoi@user/adoi)
[00:18:50] <yitz> Or the code if the docs suck, eg https://github.com/PyMySQL/mysqlclient/blob/main/MySQLdb/cursors.py#L171
[00:19:29] *** Joins: herme5 (~mote@2604:a880:400:d1::901:5001)
[00:19:43] *** herme5 is now known as el_kevino
[00:20:44] *** Quits: lexx (~scsi@78.157.70.196) (Ping timeout: 250 seconds)
[00:21:09] <Henry151> so if i have something like foo = str(DBSession().query(bar, baz).join(Spam).filter(*my_filter).group_by(ham).order_by(eggs)) and i inspect it with str(foo), and I see in the SQL that comes out some things like %(foobar), are those correctly called "bound SQL vars"?
[00:21:13] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[00:22:20] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[00:23:17] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[00:23:35] <yitz> Depends on your SQL lib
[00:23:45] *** Joins: diamondbond (~diamondbo@175.157.48.199)
[00:23:52] <yitz> Which module exactly are you using?
[00:23:57] <Henry151> thanks for the link to the relevant part of the code there, it's helping explain already
[00:24:28] *** Quits: diamondbond (~diamondbo@175.157.48.199) (Remote host closed the connection)
[00:24:29] <Henry151> sqlalchemy
[00:24:59] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[00:25:48] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[00:26:10] *** Joins: theprophet (~theprophe@85.114.228.184)
[00:27:32] <yitz> Henry151: https://docs.sqlalchemy.org/en/14/orm/session_api.html#sqlalchemy.orm.Session.execute
[00:27:45] <yitz> See the params
[00:28:13] *** Quits: dangrenier83 (~username@user/dangrenier83) (Ping timeout: 252 seconds)
[00:29:38] *** Quits: Jefren (~Jefren@70.35.67.187) (Quit: WeeChat 3.2)
[00:30:44] <foo> I'm writing a media organization script for myself. I'm ultra concerned about it breaking my images somehow... BUT, if I have backups, if I have counts of all files transferred/organized, if I have the code check byte deltas post-move and display discpencies, I think I should be fine. Agree?
[00:31:52] *** Quits: magla (~gelignite@55d40548.access.ecotel.net) (Quit: Stay safe!)
[00:32:02] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[00:32:16] <Henry151> yitz: you helped me figure it out thank you so much it's working correctly now.
[00:32:34] <Henry151> i had to add "params=" before my dictionary
[00:32:46] <Henry151> i thought it was positional somehow.
[00:32:56] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[00:33:10] *** Quits: shad1 (~shad@user/shad) (Ping timeout: 252 seconds)
[00:33:25] *** Joins: Enitin (~Enitin@82.102.22.85)
[00:33:47] <yitz> Henry151: always start with the docs :)
[00:34:35] <squarecircle> foo: I don't get the point where your stuff should corrupt your data at all. Aren't sou just reading in file metadata and saving it in a database?
[00:34:56] <foo> squarecircle: thank you for clarifying. I'm reading in one directory, then copying files to a new directory in a YYYY/MM/DD format of sorts
[00:35:06] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:06] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:06] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:06] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:06] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:06] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:07] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:07] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:07] <foo> squarecircle: so, technically, my script doesn't even touch the originals... so it's probably fine.
[00:35:08] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:08] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:09] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:09] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:10] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:10] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:10] <foo> !ops
[00:35:11] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:11] <w1z4rd> https://discord.gg/hYj4umbK
[00:35:20] *** Quits: w1z4rd (uid516500@id-516500.helmsley.irccloud.com) (Excess Flood)
[00:36:20] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[00:36:25] *** Quits: baltazar (~baltazar@188-143-71-54.pool.digikabel.hu) (Remote host closed the connection)
[00:36:40] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::4433) (Quit: Konversation terminated!)
[00:37:10] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[00:37:13] <Henry151> ah, spoke too soon.. trying DBSession().execute('EXPLAIN " + str(myquery), params={'param_1': 'value1'}) when str(myquery) contains %(param_1) in it, errors with sqlalchemy.exc.ProgrammingError: (psycopg2.errors.SyntaxError) syntax error at or near "%" and shows the actual %(param_1) in the SQL it's trying to execute, instead of the value1 that's supposed to go there.
[00:37:28] <shangxiao> !ops
[00:37:34] <yitz> shangxiao: too slow
[00:37:38] <mawk> he's gone, shangxiao
[00:37:42] <Yhg1s> also, not useful.
[00:37:52] <foo> shangxiao: One day, you will have the speed of I.
[00:38:08] <yitz> Henry151: myquery might need ? instead of %(...); I think `?` is the standard for binding
[00:38:08] <foo> Yhg1s: Is there a way to get ops attention with a similar command?
[00:38:10] <shangxiao> haha was curious as to what !ops does
[00:38:13] <mawk> the speed of I is the acceleration of Q
[00:38:14] <yitz> Or not. Read the docs. I have no clue
[00:38:19] <foo> mawk: ;)
[00:38:21] <mawk> foo: yes, highlight one of the ops
[00:38:26] <foo> mawk: too much work.
[00:38:28] * foo laughs
[00:38:30] *** Joins: Everything (~Everythin@37.115.210.35)
[00:38:37] *** Joins: baltazar (~baltazar@188-143-71-54.pool.digikabel.hu)
[00:38:45] <yitz> shangxiao: people that op big channels usually add that to their hilights. And then I need to double check what channels I op
[00:38:47] <Henry151> yitz: ah, i will try that
[00:38:49] * foo used to be an op in #mandrake for any of you folks that remember that... !ops worked in that channel
[00:39:12] <shangxiao> oic
[00:39:25] *** Joins: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net)
[00:39:28] *** Quits: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il) (Quit: Konversation terminated!)
[00:39:49] <yitz> Henry151: reading docs is usually less painful that trying random things until they work
[00:39:58] <shangxiao> lul
[00:41:21] *** Joins: dangrenier83 (~pi@user/dangrenier83)
[00:41:24] *** Quits: Hax0r (~Hax0r@128.127.222.236) (Remote host closed the connection)
[00:41:29] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[00:41:43] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[00:41:47] *** Joins: Hax0r (~Hax0r@128.127.222.236)
[00:42:04] *** Quits: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[00:43:17] *** Joins: LeLutin (~lelutin@mail.lelutin.ca)
[00:43:31] <squarecircle> foo: ok, even if you're copying stuff, only the fs should be informed about the file's new location
[00:44:16] <squarecircle> foo: except, if you would read, write to new file and delete the old one. Then you might get errors, while copying
[00:44:31] <LeLutin> I've recently added pytest-cov to my project and I was hoping to use the "fail_under" configuration to make sure tests are added to new code. locally I'm getting good results for coverage when running pytest, but during CI somehow pytest-cov says that all lines are missed and that I have 0% coverage.. there must be something that I missed but I'm not sure what
[00:44:45] *** Joins: Jefren1 (~Jefren@70.35.67.187)
[00:45:01] <squarecircle> Anyway. Who would like to tell me, that it is a bad idea to update a venv from within?
[00:45:08] *** Quits: Haxxa (~Haxxa@122.199.45.213) (Quit: Haxxa flies away.)
[00:45:45] <foo> squarecircle: yeah, not deleting the old one just yet... I think I'll do that manually after I've confirmed the concluding results on counts and byte differences. My script logs how many files were skipped and factors in their bytes into totals and ideally there is 0 delta because it knows everything it did. Because of this, I think I should be good. Partly asking here in the tiny tiny chance there is
[00:45:51] <foo> something I'm missing but I doubt it
[00:46:40] *** Quits: Jefren1 (~Jefren@70.35.67.187) (Client Quit)
[00:47:16] <foo> squarecircle: for example, I have this: https://bpa.st/MV7A
[00:48:25] *** Joins: Jefren (~Jefren@70.35.67.187)
[00:49:07] *** Joins: Haxxa (~Haxxa@122.199.45.213)
[00:50:13] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 252 seconds)
[00:50:18] *** Quits: Jefren (~Jefren@70.35.67.187) (Client Quit)
[00:50:35] * foo investigates if there's a way to sort files by File Inode Change Date/Time
[00:50:41] <foo> in pathlib
[00:50:47] *** Joins: Jefren (~Jefren@70.35.67.187)
[00:51:11] <foo> Bingo: https://techoverflow.net/2019/11/10/how-to-sort-files-by-modification-date-in-python/
[00:51:29] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:51:40] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[00:52:42] <mawk> using sorted ?
[00:52:46] *** Quits: arinov (~arinov@31.142.36.176) (Ping timeout: 256 seconds)
[00:52:51] <mawk> that would be the first thing I'd try
[00:53:01] <mawk> your link doesn't use pathlib though foo
[00:53:05] <mawk> try using pathlib
[00:53:49] <foo> mawk: oh, good eye, I pasted too soon. I'm using pathlib and checked the docs but nothing jumped out at me
[00:53:52] <mawk> what do you mean sorting by File though ?
[00:53:57] *** Joins: zepolen (~zepolen@ppp-94-68-115-2.home.otenet.gr)
[00:53:58] <mawk> you mean just change time right?
[00:54:16] *** Quits: Jefren (~Jefren@70.35.67.187) (Client Quit)
[00:54:37] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[00:54:39] *** Joins: Jefren (~Jefren@70.35.67.187)
[00:54:48] <mawk> foo: sorted(lambda p: p.stat().st_mtime, yourlistofpathobjects)
[00:54:48] <foo> mawk: sort by File Inode Change Date/Time
[00:54:50] *** Quits: Hax0r (~Hax0r@128.127.222.236) (Quit: Leaving)
[00:55:22] <mawk> if you want to iterate files in the current working directory for instance: sorted(lambda p: p.stat().st_mtime, Path('.').iterdir())
[00:57:22] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[00:57:26] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[00:58:01] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[00:58:19] *** Joins: Enitin (~Enitin@82.102.22.84)
[00:58:20] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[00:58:54] <Henry151> if i've got a string mystring = "example with several %(variable_1) %(variable_2) %(variable_3) variables" and i want to do mystring % {"variable_2": "value2"} but leave variable 1 and 3 alone, it says "KeyError" ... is there a way to replace only specific variables but leave the others?
[00:59:49] <foo> sorted(myfiles, key=lambda f: f.stat().st_mtime)
[00:59:54] <foo> mawk: thanks, that worked ^ ... well, sort of.
[01:00:15] <mawk> yes sorry I put the argument in the wrong order
[01:00:19] <mawk> why didn't it work foo ?
[01:00:19] <foo> I'm trying to read in a directory, if there are duplicates in the directly I want to get the original file.
[01:00:21] <mawk> you want reverse order?
[01:00:33] <mawk> what do you mean original file? there cannot be duplicates, that doesn't exist
[01:00:39] <mawk> you can only have a single file with a given name
[01:00:49] <mawk> at least on unix, but I bet on windows too
[01:00:51] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[01:01:05] <foo> mawk: well, if I copy + paste a file 3 times in OS X and it appends copy 2, copy 3
[01:01:07] *** Quits: shangxiao (~davids@124.187.193.187) (Quit: WeeChat 3.2.1)
[01:01:13] *** Quits: Shanzem (~Shanzem@86.31.109.147) (Ping timeout: 252 seconds)
[01:01:45] *** Joins: mattmcc (matt@2600:3c00::f03c:91ff:fe89:c2e8)
[01:01:54] <cloudbender> And here is 'duplicate file finder' does. Can't show the reports, nda
[01:01:56] <cloudbender> https://imgur.com/a/aB4JIRr
[01:02:08] *** Joins: shawwwn (uid6132@id-6132.helmsley.irccloud.com)
[01:02:16] <cloudbender> ...what the finder does
[01:02:19] <mawk> yeah so that's not a duplicate foo they have different names
[01:02:28] <mawk> but I see what you mean, so what do you want to do exactly?
[01:02:29] <foo> mawk: yup, excuse my vague language please.
[01:02:42] <mawk> you want to exclude files that end with Copy XXX from your selection?
[01:02:46] *** Joins: Hax0r (~Hax0r@128.127.222.236)
[01:03:05] <mawk> you can make a regex for it, and use filter
[01:03:21] *** Quits: greedom (~greedom@2001:16b8:2e09:5600:52e3:19f1:7564:76a4) (Remote host closed the connection)
[01:03:50] *** Joins: Naan (~naan@user/naan)
[01:04:58] *** Quits: Wafficus (~user@70.126.240.148) (Quit: ERC (IRC client for Emacs 27.2))
[01:05:06] *** birb is now known as erica
[01:06:32] *** Joins: gggp (~textual@60.10.23.169)
[01:07:30] <foo> mawk: nevermind, I got it. :) I wanted st_ctime.
[01:07:48] <foo> mawk: I was using exiftool and pulling the exif tag value rather than the filesystem value
[01:10:18] *** Quits: NeoCore (~neocore@195.200.221.188) (Quit: Leaving)
[01:11:11] *** Quits: gggp (~textual@60.10.23.169) (Ping timeout: 252 seconds)
[01:12:51] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[01:13:32] *** Joins: montxero (~user@149.167.149.74)
[01:13:48] *** Joins: ubert (~Thunderbi@178.115.47.210.wireless.dyn.drei.com)
[01:14:23] *** Parts: cloudbender (~cloudbend@user/cloudbender) ()
[01:14:44] <mawk> ah yes you wanted creation time
[01:15:23] <foo> mawk: thank you, thank you. :)
[01:16:46] *** Quits: Akuli (~Akuli@82-203-166-83.bb.dnainternet.fi) (Quit: Leaving)
[01:18:10] *** Joins: justoneprimate (~textual@2603-6011-df05-844d-b57f-2194-a810-a55d.res6.spectrum.com)
[01:18:37] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[01:22:44] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:24:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[01:25:20] *** Lord_of_Life_ is now known as Lord_of_Life
[01:28:09] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[01:28:14] *** Quits: krab (~crabhi@ip-213-220-240-133.net.upcbroadband.cz) (Ping timeout: 252 seconds)
[01:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[01:31:05] *** Joins: djhankb (~djhankb@208.113.164.68)
[01:32:40] *** Quits: Gurkenglas (~Gurkengla@dslb-088-075-022-191.088.075.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[01:37:56] *** Quits: mpmc (~mpmc@user/mpmc) (Quit: ZNC - https://znc.in)
[01:39:26] *** Joins: mpmc (~mpmc@user/mpmc)
[01:39:40] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[01:41:32] *** Quits: Hax0r (~Hax0r@128.127.222.236) (Remote host closed the connection)
[01:42:17] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[01:43:04] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:43:47] *** Quits: ubert (~Thunderbi@178.115.47.210.wireless.dyn.drei.com) (Remote host closed the connection)
[01:44:42] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Remote host closed the connection)
[01:46:02] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 256 seconds)
[01:52:23] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[01:54:15] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:55:07] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[01:56:41] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[01:58:30] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[01:59:38] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[02:00:14] *** Joins: jatt (~user@user/jatt)
[02:00:28] *** Joins: gkwhc (~gkwhc@mobile-155-166-228-38.mycingular.net)
[02:02:16] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[02:02:26] <gkwhc> hi all, i have a pandas dataframe column data['MACD']. how can i store a dict in there {'A':a, 'B':b} where a & b are both timeseries data
[02:02:55] *** Joins: Enitin (~Enitin@82.102.22.85)
[02:03:02] <grym> gkwhc: pandas is really designed to be tabular
[02:03:15] <BrenBarn> you mean store a dict in a single cell?
[02:03:37] <gkwhc> BrenBarn: yes, well in a column
[02:04:45] <gkwhc> a & b are pandas Series
[02:05:22] <BrenBarn> are you saying you want `a` to be put in as one column and `b` to be another column?
[02:06:22] <grym> gkwhc: if the dtype of the Series is `object`, you can put anything you want in there, but it's a bad idea
[02:06:36] <gkwhc> BrenBarn: no, I'd like both 'a' and 'b' to be in the same column as {}
[02:07:43] *** Joins: orbatos (~orbatos@user/orbatos)
[02:07:46] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[02:07:47] <InPhase> gkwhc: df = df.append(thedictionary)
[02:08:17] *** Quits: Sky_Net (~Sky_Net@176.14.213.85) (Read error: Connection reset by peer)
[02:08:20] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Quit: Konversation terminated!)
[02:08:30] *** Joins: madduck (~madduck@user/madduck)
[02:08:45] <gkwhc> InPhase: no that just appends the dictionary so they appear as individual columns
[02:09:44] <Celelibi> What's the best way to have the grouper recipe not pad the last chunk with None? https://docs.python.org/3/library/itertools.html#itertools-recipes
[02:09:52] <InPhase> gkwhc: Then you should reexplain what you want instead of that.
[02:10:03] <InPhase> gkwhc: Perhaps a testcase example would help.
[02:10:25] <grym> gkwhc: pd.DataFrame([{'MACD':{"A":'a',"B":'b'}}])  , but again, this is unwise
[02:10:41] *** Quits: mcglk_ (~mcglk@131.191.49.120) (Remote host closed the connection)
[02:11:00] <grym> high dimensional/ragged data isn't a good fit for pandas, generally
[02:11:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[02:11:36] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[02:11:39] *** Joins: mcglk (~mcglk@131.191.49.120)
[02:12:00] *** Joins: r3m (~launch@user/r3m)
[02:12:15] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Remote host closed the connection)
[02:13:24] <InPhase> gkwhc: If that's what you wanted, you are most certainly making a design mistake.
[02:13:40] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[02:13:41] <gkwhc> grym hmm i see. it comes out that MACD is single row but 'a' and 'b' both have multiple rows
[02:13:52] *** Joins: aum (~davidnz10@202.47.255.123.static.snap.net.nz)
[02:14:27] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:15:05] <gkwhc> so the situation is that i have a csv "stock" data with open/close prices in the dataframe. i am appending more columns to the dataframe, however would like to make different plots based on the column
[02:15:05] <rud0lf> could you help me understand multiprocessing.Queue? "When an object is put on a queue, the object is pickled and a background thread later flushes the pickled data to an underlying pipe."
[02:15:19] <rud0lf> what does "data flushed to pipe" means?
[02:15:19] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:15:21] <gkwhc> some plots will use multiple columns
[02:15:28] *** Quits: Ivii (~Ivyy@2001:a61:13eb:f801:e004:51a6:2a21:ea07) (Quit: Leaving)
[02:15:41] *** Joins: Ivii (~Ivyy@2001:a61:13eb:f801:e004:51a6:2a21:ea07)
[02:15:46] <aum> hi guys - got a performance dilemma - SQLite way too slow. Considering implementing schema and storage instead into a directory tree, with careful conventions to optimise the required create/search/read/delete operations. Is this likely to achieve significant speedups, or could it be wasted effort. (OS: Debian Stable, Python: 3.9, filesystem: ext4)
[02:15:58] <rud0lf> it was transported to communication pipe "input end" or that is has been successfully sent and received by get() ?
[02:16:08] <rud0lf> is has = it has
[02:16:18] <grym> aum: "sqlite is slow" usually means "my indexes are wrong!"
[02:16:47] <rud0lf> i'm trying to convert a program that uses multiprocessing to a simple version with threads
[02:16:50] <aum> grym: that, and the Tortoise ORM I'm using over the top of it is a stodgy bottleneck
[02:16:51] <grym> (or "my schema is poorly thought out for what i need it to do")
[02:16:59] <rud0lf> and i need to understand never used before "JoinableQueue"
[02:17:07] <grym> aum: you could investigate more performant ORMs
[02:17:45] <aum> grym, that, or migrate to raw aiosqlite SQL queries, and stop relying on ORM for convenience
[02:18:47] <aum> schema is simple - no related joins, just 3 tiers with each of the bottom 2 tiers having foreign key to the tier above
[02:18:58] <aum> I think TortoiseORM might be my big bottleneck
[02:19:09] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[02:20:39] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Ping timeout: 276 seconds)
[02:21:53] <bjs> rud0lf: what do you need to understand? Where the multiprocessing version used a JoinableQueue use a threading queue (a queue.Queue) instead
[02:21:55] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.2)
[02:23:03] <rud0lf> just Queue, no .join_thread() needed?
[02:23:26] <rud0lf> as i think multiprocessing queue thread is needed for multiple processes
[02:23:36] <rud0lf> which does not take part for threads that share memory
[02:23:52] <rud0lf> one more thing i'm dumb about
[02:24:17] <rud0lf> if two instances of threading.Thread are running, do they share for example method variables?
[02:24:39] <rud0lf> if i use "flag = True" in one thread will other thread read it or will it spawn own copy?
[02:25:08] <rud0lf> since local variable storage exists, i believe method (and function) variables are shared :/
[02:25:20] <rud0lf> why would the storage be there otherwise?
[02:25:39] <Yhg1s> rud0lf: I don't understand what you mean by 'local variable storage'.
[02:26:06] <rud0lf> thread variables
[02:26:07] <Yhg1s> rud0lf: methods are not different from functions. local variables are local to the call. They can, by definition, never be shared. However, while the *variables* aren't shared, the *objects they refer to* can be.
[02:26:14] <rud0lf> mydata = threading.local()
[02:26:24] <Yhg1s> rud0lf: okay, what about them?
[02:26:32] <rud0lf> why do the exist?
[02:26:34] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[02:26:48] <bjs> rud0lf: so you can have data that is local to that thread only
[02:27:02] <rud0lf> i'm missing something important in my head
[02:27:13] <rud0lf> and i'm programming my schizophrenia away this evening
[02:27:13] <bjs> rud0lf: threading.local() != "local" variables
[02:27:19] <Yhg1s> rud0lf: you're not avoiding threads, so, yeah, you're missing that part. Avoid threads.
[02:27:22] <rud0lf> so i'm not 100% sane, please bear with me :)
[02:30:27] <bjs> rud0lf: but yes, if you make two threading.Thread's they share the same objects,  and share global variables. Unlike a process
[02:30:42] <squarecircle> I'm still curious about updating a venv from within.
[02:30:47] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[02:31:40] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[02:31:49] <bjs> squarecircle: the usual way is to `rm` the venv and make a new one with the new version of Python you want
[02:33:34] *** Quits: madduck (~madduck@user/madduck) (Quit: switching to sasl auth)
[02:33:38] <squarecircle> bjs: VIA process.pOpen?
[02:33:57] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[02:34:16] *** Joins: madduck (~madduck@user/madduck)
[02:34:25] <bjs> squarecircle: if the program is already running then you can't "upgrade" it to use a different version of Python while it's running
[02:34:33] *** Joins: sransara (~sransara@2601:2c2:681:8780::e0ee)
[02:34:37] <jinsun> gkwhc: seems like you want a MultiIndex, something like `df = pd.DataFrame({("MACD", k): v for k, v in {"A": [1,2,3], "B": [3,4,5]}.items()})`, then `df["MACD"]` will give both A and B columns
[02:34:42] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 245 seconds)
[02:34:43] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[02:34:49] <bjs> squarecircle: ... maybe I misunderstood what you meant by "updating a venv" though
[02:35:53] <squarecircle> bjs: I thought about writing a wrapper, that terminates my main programm, updates a package and restarts the main application
[02:36:06] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[02:36:20] <bjs> squarecircle: updating things while it's running is ... easy to "do" but really hard to make work correctly
[02:36:41] <bjs> especially if you've already imported the library you want to "update" and are using it
[02:37:20] <squarecircle> bjs: so, wrapper in bash, and everything is fine
[02:39:18] <gkwhc> jinsun: yes! that's it! is it possible to combine that with the rest of the dataframe columns?
[02:40:53] <jinsun> gkwhc: you'll probably have to convert the existing columns to MultiIndex too
[02:41:29] <gkwhc> jinsun: i cant have just one specific column hold two columns?
[02:41:30] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[02:42:12] <squarecircle> bjs: If I don't import my target library, then I can update the package without hassle
[02:42:36] <squarecircle> bjs: and start a new subprocess, that again imports the updated library
[02:42:44] <bjs> squarecircle: yeah but if you've not imported it yet that suggests it's like right at the beginning of your program
[02:42:54] <squarecircle> ?
[02:42:57] <bjs> so you may as well just have a thing that runs first and does the checks and updates rather than trying to do anything "in place"
[02:43:08] *** Quits: madduck (~madduck@user/madduck) (Quit: Switching to CertFP (sorry for the disconnects, this will be the last))
[02:43:22] <bjs> squarecircle: well not even a subprocess
[02:44:13] <squarecircle> you lost me
[02:44:58] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:45:19] <bjs> squarecircle: if you've not imported the library yet, you can run pip and install/update things then just import them.
[02:45:20] <squarecircle> I think, best way would be, to run a wrapper, that starts the main application, but periodically checks for package updates in the background, kills the main application in the event of an update and restarts it
[02:45:47] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[02:45:52] <bjs> squarecircle: but if you've not imported anything yet you may as well just not do it "from within" and just check *before* you run the program (e.g. have a bash or python script that checks first then runs the real program)
[02:45:58] *** Joins: madduck (~madduck@user/madduck)
[02:46:23] <bjs> squarecircle: tbh it's not very unusual for new releases of packages to break old code
[02:46:39] <squarecircle> bjs: stupid question: is there a python binding for pip? o.O like "import pip \n pip.update(blasted_package)" ?
[02:46:39] <bjs> so it's a weird thing to want to do in general
[02:46:58] <bjs> squarecircle: no because if there was people would try use it and 99.9% of the time doing it from "inside" is incorrect
[02:46:59] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[02:47:05] <squarecircle> bjs: thats no problem, continuity is ensued, but its an server application
[02:47:07] <bjs> and you'll just get broken programs
[02:47:12] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:47:38] <squarecircle> s/ensued/guaranteed/
[02:48:03] <gkwhc> jinsun: ?
[02:49:21] <bjs> squarecircle: here's a situation where such a method would be totally broken: (1) I import some library and start making objects, (2) after the program has been running for a while I update the package, and then (3) continue to make new objects from the library
[02:49:53] <squarecircle> bjs: that why I'd kill the subprocess, so that no objects remain
[02:50:05] <bjs> the problem is at this point the "old" library will still be around, and some places might continue making "old" objects and some might make "new" objects,  and the "new" objects will not work with the "old" ones and all manner of bad things would happen
[02:50:16] <bjs> squarecircle: sure, maybe you should just periodically quit and check and restart, that seems sensible.
[02:51:00] <squarecircle> periodically by hand might result in a week or two where its unusuable
[02:51:29] <bjs> Well not really, again,  doing an update like this automatically sounds like a way for everything to break.  I'd always recommend doing these kind of updates manually (or at least with an engineer waiting for it to go wrong...)
[02:51:43] <squarecircle> bjs: until first users write annoyed tickets
[02:51:56] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[02:52:07] *** Joins: dutch (~DutchIngr@user/dutch)
[02:52:14] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:52:24] <squarecircle> that would mean to check every day manually. Thats hardly feasible
[02:53:03] <bjs> squarecircle: I mean you could have a system that checks for updates and notifies a human to do the update or have scheduled update times
[02:53:29] <bjs> I can definitely see a "automated update all packages and push to production" step being a very exciting step :)
[02:53:56] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[02:54:31] <squarecircle> bjs: its not about all packages, its about one, that wraps an API. And whenever the API provider changes its API, everyhting breaks and the package is updated
[02:54:31] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 252 seconds)
[02:54:55] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[02:55:01] <bjs> squarecircle: fair enough,  it sounds like you're gonna have to do a lot of manual stuff anyway if the API is changing out from under you a lot
[02:55:05] *** Joins: rapier (~marcos@170.233.159.1)
[02:55:37] <squarecircle> bjs: thankfully theres a lot of good guys doing that
[02:55:54] <jinsun> gkwhc: was trying it out, you will have to do something like this https://bpa.st/2XMQ, so convert existing columns to MultiIndex and loop over the dict also (or atleast I can't find another way)
[02:55:58] <squarecircle> bjs: the python interface stays the same
[02:56:52] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 256 seconds)
[02:57:48] <rapier> stealth is around here?
[02:58:17] *** Quits: syntaxman (~wade@li227-215.members.linode.com) (Quit: Lost terminal)
[02:58:23] <rapier> i'd like to show to him a recursion solution for hanoi game
[03:00:08] *** Joins: odoood (~odoood@2601:c8:c003:a550::7)
[03:01:09] <jinsun> rapier: this one? https://www.youtube.com/watch?v=8lhxIOAfDss
[03:01:23] <rapier> yeah
[03:01:28] <rapier> this is so cool
[03:01:31] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:01:35] <rapier> who is that guy?
[03:01:49] <rapier> i mean who is that guy from the youtube video?
[03:02:09] <gkwhc> jinsun: oh wow interesting! is there a reason column names 'a' and 'b' repeat themselves?
[03:02:21] <grym> rapier: "Thorsten Altenkirch", per the description.
[03:02:24] <squarecircle> bjs: well it may be the corniest corner case there is ^^
[03:02:46] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 252 seconds)
[03:02:50] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 252 seconds)
[03:03:33] <rapier> grym, i mean who is he in computer world? like tanenbaum, donald knuth?
[03:04:09] <grym> rapier: HoTT guy, apparently https://en.wikipedia.org/wiki/Thorsten_Altenkirch
[03:04:34] <rapier> thanks, grym
[03:04:35] <grym> but not The HoTT Guy
[03:04:46] <rapier> i see
[03:04:52] *** Quits: sransara (~sransara@2601:2c2:681:8780::e0ee) (Quit: Leaving)
[03:04:55] <jinsun> his recent videos on Agda are also cool, make me want to learn emacs also
[03:05:13] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.2)
[03:05:19] <rapier> Altenkirch's work includes: Containers, Epigram programming language, and Homotopy Type Theory: Univalent Foundations of Mathematics (The HoTT Book)
[03:05:25] *** Joins: BUSY (~BUSY@user/busy)
[03:05:33] *** Joins: czuk_cza (~mist@188.147.96.18.nat.umts.dynamic.t-mobile.pl)
[03:06:21] <grym> when i think of HoTT i think of per martin-lof, Vladimir Voevodsky, bob harper, ...
[03:06:34] <grym> but i'm a window-gazer here, it's not my field
[03:07:26] <rapier> me too, i don't know have any idea what it is
[03:07:43] <rapier> i don't have*
[03:07:47] *** Joins: syntaxman (~wade@li227-215.members.linode.com)
[03:08:00] <grym> rapier: hard :)
[03:08:10] <grym> theory usually is
[03:08:17] <jinsun> gkwhc: well MultiIndex means you have multiple headers, kinda like adding another row on top of your header, so you have to choosewhat to fill on the top, I choose to repeat the values because that was the least surprising thing to do
[03:08:26] <rapier> grym, as geometry differential?
[03:09:01] <rapier> i should have said differential geometry*
[03:09:18] <rapier> or is it more harder?
[03:11:29] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[03:12:36] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[03:15:50] *** Quits: justoneprimate (~textual@2603-6011-df05-844d-b57f-2194-a810-a55d.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[03:16:04] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[03:16:28] <jinsun> the thing I don't like about him is that he puts a space before the colon in the def line, absolutely barbaric, lol
[03:16:47] *** Joins: montxero (~user@149.167.149.74)
[03:17:16] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:e1ab:4e99:69af:3453) (Ping timeout: 256 seconds)
[03:18:44] <jinsun> and even in the if else statements
[03:18:58] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[03:19:08] *** Quits: odoood (~odoood@2601:c8:c003:a550::7) (Remote host closed the connection)
[03:19:17] <rapier>  LoL
[03:20:04] *** Quits: nomic (~nomic@185.192.69.188) (Quit: Leaving)
[03:21:45] *** Quits: ColonelJ (~ColonelJ@user/colonelj) (Quit: leaving)
[03:22:50] *** Joins: nomic (~nomic@185.192.69.188)
[03:24:12] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[03:25:15] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[03:25:29] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[03:26:07] *** Joins: blakedyson (~mkp@user/mkp)
[03:31:12] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:31:40] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 240 seconds)
[03:32:50] *** Joins: m4v (~znc@ubuntu/member/m4v)
[03:33:39] <grym> rapier: apples and oranges, i think
[03:35:32] <foo> Is it more common to set both created and updated datetimes in the database on first insert (eg. making them the same), or is it more common to leave updated None?
[03:35:48] <foo> I'm leaning towards the former but curious on a quick poll
[03:36:35] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[03:37:33] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[03:41:09] *** Joins: cjb (~cjb@user/cjb)
[03:41:35] *** Joins: gggp (~textual@111.63.14.116)
[03:41:43] *** Quits: gggp (~textual@111.63.14.116) (Client Quit)
[03:43:42] *** Quits: jatt (~user@user/jatt) (Remote host closed the connection)
[03:44:38] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[03:45:00] <rapier> about recursion >>> https://www.youtube.com/watch?v=AfBqVVKg4GE&ab_channel=NorthBayPython
[03:45:00] <blakedyson> Set both, your queries will be a lot simpler when you want to get the most recent (created or updated) rows
[03:47:12] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:48:08] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[03:51:26] *** Joins: pycurious (~Adium@user/pycurious)
[03:51:49] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[03:51:56] *** Quits: blakedyson (~mkp@user/mkp) (Quit: Client closed)
[03:52:32] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[03:53:04] *** Quits: gitly (~gitly@85.255.236.235) (Ping timeout: 250 seconds)
[03:53:12] *** Joins: lalitmee_ (~lalitmee@180.94.33.132)
[03:53:40] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[03:54:32] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[03:54:50] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[03:55:09] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[03:55:13] *** Joins: gitly (~gitly@85.255.235.176)
[04:00:28] *** Quits: Aye (jeda@hellomouse/dev/cryb.jeda) (Quit: hopefully i did enough to be remembered as a good person)
[04:00:29] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[04:01:24] *** Joins: zebrag (~chris@user/zebrag)
[04:06:27] *** Quits: Ivii (~Ivyy@2001:a61:13eb:f801:e004:51a6:2a21:ea07) (Remote host closed the connection)
[04:08:33] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:09:43] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[04:10:33] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[04:10:55] *** Joins: montxero (~user@149.167.149.74)
[04:13:26] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[04:14:10] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:14:16] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:b92e:3951:b0c7:de35) (Quit: Leaving)
[04:15:47] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[04:17:34] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 252 seconds)
[04:23:34] *** Quits: gkwhc (~gkwhc@mobile-155-166-228-38.mycingular.net) (Quit: Client closed)
[04:25:37] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[04:28:10] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[04:29:45] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[04:29:48] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[04:30:10] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[04:30:33] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[04:31:48] *** Joins: df_data (sid466269@id-466269.ilkley.irccloud.com)
[04:33:11] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[04:34:18] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[04:34:58] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:38:18] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[04:40:49] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:41:55] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[04:43:46] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[04:43:58] *** Joins: Roey (~Roey@user/Roey)
[04:47:02] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[04:48:24] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[04:49:54] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Read error: Connection reset by peer)
[04:50:00] *** Joins: Lando-HoloNet (~Lando@user/lando-spacepimp)
[04:51:48] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:52:34] *** Quits: Soul_keeper (1000@wsip-184-183-17-199.ph.ph.cox.net) (Remote host closed the connection)
[04:52:46] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[04:53:46] *** Quits: zepolen (~zepolen@ppp-94-68-115-2.home.otenet.gr) (Read error: Connection reset by peer)
[04:53:55] *** Joins: zepolen_ (~zepolen@ppp-94-68-115-2.home.otenet.gr)
[04:54:40] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[04:55:10] *** Quits: Lando-HoloNet (~Lando@user/lando-spacepimp) (Ping timeout: 240 seconds)
[04:56:49] *** Joins: dez (uid92154@user/dez)
[04:59:22] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[04:59:54] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[05:01:36] *** Joins: audiocat (~audio@2603-8081-1801-3bb5-af7b-3a1b-89ee-1477.res6.spectrum.com)
[05:01:40] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[05:03:01] *** Joins: Fiji (~Fiji@user/fiji)
[05:03:10] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 240 seconds)
[05:05:39] *** Joins: akk (~akk@174-28-98-206.albq.qwest.net)
[05:09:40] *** Quits: czuk_cza (~mist@188.147.96.18.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[05:11:08] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[05:11:26] *** Joins: Macuser (~Macuser@216.30.159.201)
[05:15:01] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[05:15:03] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Client Quit)
[05:15:46] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 240 seconds)
[05:15:52] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[05:18:49] <Fiji> if i create a multiprocessing pool using a context manager (so `with mp.Pool(x)`), at the end of the context manager's scope, does it clean up all pool resources and delete the processes in the pool? or do i need to call any specific close() or join() methods on the pool?
[05:19:24] *** Joins: Samian (~Sami@2620:10d:c091:480::1:941f)
[05:20:50] <aphysically> ah yes I definitely remember what this bash code did https://bpa.st/PMMQ
[05:21:10] <aphysically> I should have used python before it got to that point
[05:21:12] <aphysically> :D
[05:23:06] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[05:23:34] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Ping timeout: 252 seconds)
[05:24:53] <akk> I wrote so many scripts that started off as sh/bash scripts and got more and more tangled, then I finally rewrote them in python and they became clean and beautiful. :)
[05:25:11] <akk> Finally I learned, if it's not completely trivial, just start in python.
[05:28:32] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[05:29:29] <aphysically> (this code is deduplicating and rendering to a string a directional graph...in bash for some reason)
[05:30:01] <Samian> what's a good resource for learning about egg, wheels, setup.py, python -e install ., creating 'distributions', and so forth
[05:30:11] *** Joins: frost (~frost@59.71.240.119)
[05:30:19] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:34] <Samian> I've never learned why pip install can be replaced with python -e.. or something like that
[05:31:13] <grym> Samian: well, pip install --help would tell you that
[05:32:21] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:33:42] <Samian> grym I'm looking
[05:36:53] *** Joins: Karatsuba (~jamer05@user/karatsuba)
[05:39:37] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[05:40:07] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[05:43:13] *** Joins: chance (~chance@user/chance)
[05:44:59] <rapier> samian, linux things addiction, people from there likes to offer a bunch of options
[05:45:28] <Samian> k
[05:45:51] <rapier> what did you mean by 'k'?
[05:46:02] <Samian> I read what you wrote
[05:46:03] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[05:46:25] <rapier> it doesn't make sense yet
[05:46:32] <jinsun> k is short for ok
[05:47:03] <Samian> I want to replace the install for this: https://github.com/pytorch/FBGEMM/tree/main/fbgemm_gpu
[05:47:09] <rapier> i hate acronyms, because they means different things across different cultures
[05:47:13] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[05:47:16] <rapier> mean*
[05:47:36] <rapier> here k means laugh
[05:47:36] <grym> rapier: k is not an acronym
[05:47:51] <grym> 'ok' _might_ be
[05:47:51] <rapier> i meant short words
[05:47:56] <grym> (but we genuinely don't know)
[05:47:57] <jinsun> Samian: for wheels and creating distributions the resource is this https://packaging.python.org/ (and no need to learn about eggs)
[05:47:58] <rapier> i don't know how you call those thigns
[05:48:01] <rapier> things*
[05:48:20] <grym> abbreviations, possibly
[05:48:24] <Samian> currently you run "python setup.py build develop" to install fbgemm_gpu. the installation creates a binary file that needs to be in the CWD. That's not professional.  I want to change it to use importlib so the binary file can be in a single location
[05:48:29] <rapier> ok, whatever
[05:48:29] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[05:48:52] <Samian> jinsun  yeah I read eggs are old.  I bookmarked https://pythonwheels.com/
[05:48:53] <rapier> american have some many abbreviations
[05:49:13] <grym> 'ok' is one of our few originals
[05:49:34] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Client Quit)
[05:49:54] <rapier> no, i guess you're wrong
[05:49:55] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[05:49:55] <Samian> Thanks jinsun . THat's a good link
[05:49:59] <rapier> the original is not ok
[05:50:28] <Samian> jinsun  I like that I can read that link without any context because it provides all the context I need
[05:51:48] <rapier> OK is abbreviation for 'Oll Korrect'
[05:52:02] <akk> I'm going crazy trying to debug a problem where I fetch something using requests, write response.content to a file (as bytes), the write seems to succeed, but then there's no file there.
[05:52:05] <rapier> i'm so sorry for off topic
[05:52:19] <grym> rapier: maybe! or "ol' kinderhook" :)
[05:52:29] <akk> https://termbin.com/tfa5 -- can anyone suggest a better way to debug this? It's sporadic, most tiles download just fine but occasionally one doesn't.
[05:52:30] <grym> (we're unlikely to ever know)
[05:52:36] <rapier> there is a story behind, grym
[05:52:46] <grym> rapier: many!
[05:52:48] <rapier> "A more likely explanation is that the term originated as an abbreviation of orl korrekt , a jokey misspelling of 'all correct' which was current in the US in the 1830s."
[05:53:14] <grym> ye olde l33tsp34k
[05:53:20] <grym> memed into a political campaign
[05:53:22] <grym> how very ... human
[05:53:30] *** Joins: pycurious (~Adium@user/pycurious)
[05:53:41] <rapier> oh my god. LoL
[05:55:05] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[05:56:29] *** Joins: junktext (~junktext@77.247.181.219)
[05:56:31] <jinsun> akk: do the `ls -l` thing outside the with block
[05:57:11] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Ping timeout: 252 seconds)
[05:57:40] *** Quits: Karatsuba (~jamer05@user/karatsuba) (Ping timeout: 240 seconds)
[05:59:13] <akk> jinsun: Same thing, still "No such file or directory" from the ls.
[06:00:11] <jinsun> paste the new thing you are trying
[06:01:01] *** Quits: reset (~reset@user/reset) (Quit: reset)
[06:01:24] <akk> https://termbin.com/daro
[06:02:37] *** Quits: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Ping timeout: 252 seconds)
[06:03:10] *** Quits: Linux77 (~Linux7_7@186.233.182.237) (Ping timeout: 252 seconds)
[06:03:49] *** Joins: codeguru (~codeguru@2601:82:c201:e6d0:cc2f:afeb:fa1d:70e3)
[06:04:11] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[06:04:18] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:08:19] <pycurious> If I want to put a config.yaml file for my application in poetry - what should i be doing? Is there a way to add config parameters in pyproject.toml?
[06:08:40] *** Quits: LiftLeft (~LiftLeft@172.98.92.79) (Ping timeout: 252 seconds)
[06:08:40] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[06:08:53] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[06:09:48] <jinsun> akk: hmm not sure why that would not work, but I would replace os.system with subprocess.run, I'm guessing that is somehow causing the problem
[06:10:52] *** Quits: fstd (~fstd@xdsl-84-44-235-10.nc.de) (Ping timeout: 252 seconds)
[06:11:36] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[06:11:40] <mefistofeles> jinsun: os.system uses subprocess, iirc
[06:11:51] *** Quits: Elzington (~Elzington@68.235.43.86) (Quit: Leaving)
[06:12:59] <akk> jinsun: Hmm, that's harder because of the steps to make it return stdout and stderr. It might be easier to just do a stat from python; I'll try that.
[06:13:18] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[06:13:18] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[06:14:07] <mefistofeles> akk: do the ls before, I presume there's something wrong with that url_to_path, so the path shown there is not the actual path of the file
[06:14:36] <mefistofeles> or better, just paste the code of that
[06:15:28] <mefistofeles> akk: oh but you are using it correctly later... hmm, dunno
[06:15:35] *** Joins: zensei (~zensei@user/zensei)
[06:16:05] *** Quits: zensei (~zensei@user/zensei) (Remote host closed the connection)
[06:16:30] <akk> mefistofeles: I'm printing out the full path in the debug messages ... oh! I might be renaming it from another thread. I had looked for unlink() calls but not for renames.
[06:17:00] <mefistofeles> akk: ok
[06:17:07] <mefistofeles> that seems likely a cause
[06:17:10] <jinsun> mefistofeles: the docs say it uses the system() call from C stdlib, not subprocess, and also recommend to use subprocess  https://docs.python.org/3/library/os.html#os.system
[06:17:32] <akk> Yeah, the tile gets renamed to blah.png.bad even though it has a good png in it.
[06:17:36] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:18:01] <akk> Thanks, mefistofeles and jinsun -- I think I have a race condition here, which I still need to debug and fix, but now I at least know what I'm looking for.
[06:18:02] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 256 seconds)
[06:18:02] *** brabrax_ is now known as brabrax
[06:18:57] <mefistofeles> jinsun: oh I see... I'm then confusing it with something else, probably
[06:19:01] <akk> I think what's happening is that while the tile is getting written, another thread tries to load it as a pixbuf, which doesn't work because it's not fully written so it says "must be a bad file, move it aside"
[06:19:19] <mefistofeles> akk: ah! that seems very likely, yes
[06:19:31] <akk> which I can probably avoid by keeping a list of downloads still in progress
[06:19:40] *** Quits: moog (~moog@mobile-107-107-188-84.mycingular.net) (Ping timeout: 252 seconds)
[06:21:29] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[06:22:29] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[06:24:40] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[06:26:12] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:27:16] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:29:49] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:30:25] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[06:30:29] *** Joins: moog (~moog@107.126.53.118)
[06:31:02] *** Quits: zaz (~zaz@poneybl.eu) (Quit: bye)
[06:31:34] *** Joins: zaz\ (~zaz@poneybl.eu)
[06:35:30] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[06:35:32] *** Quits: moog (~moog@107.126.53.118) (Ping timeout: 245 seconds)
[06:38:48] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[06:38:55] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[06:38:55] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:40:29] *** Quits: akk (~akk@174-28-98-206.albq.qwest.net) (Quit: +++)
[06:40:58] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:40:59] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:42:15] *** Joins: lalitmee__ (~lalitmee@180.94.33.77)
[06:43:22] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[06:44:17] *** Quits: aum (~davidnz10@202.47.255.123.static.snap.net.nz) (Remote host closed the connection)
[06:44:40] *** Quits: lalitmee_ (~lalitmee@180.94.33.132) (Ping timeout: 240 seconds)
[06:44:57] *** Joins: jetchisel (jetchisel@user/jetchisel)
[06:45:02] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 252 seconds)
[06:51:04] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:51:28] *** Quits: emerent (~quassel@p200300cd5701a153ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:52:03] *** Joins: emerent (~quassel@p200300cd5701a194ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:52:35] *** Joins: HolyTaint^ (~HolyTaint@gateway/tor-sasl/holytaint)
[06:54:57] *** Quits: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint) (Ping timeout: 276 seconds)
[06:57:38] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[06:58:15] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[06:58:16] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:58:53] *** Joins: khrbt (~znc@user/khrbt)
[06:59:18] *** Joins: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[07:00:28] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[07:03:22] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[07:04:40] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[07:09:23] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:11:40] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[07:12:37] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[07:13:29] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Client Quit)
[07:13:31] *** Quits: struct0 (~struct0@104.248.115.49) (Ping timeout: 252 seconds)
[07:15:13] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[07:15:49] *** Quits: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[07:16:52] *** Quits: codeguru (~codeguru@2601:82:c201:e6d0:cc2f:afeb:fa1d:70e3) (Ping timeout: 252 seconds)
[07:17:08] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[07:17:33] *** Joins: Elzington (~Elzington@68.235.43.102)
[07:19:46] *** Joins: n00b101 (uid448161@id-448161.lymington.irccloud.com)
[07:23:50] <fluter> hi, how can i fix this error: *** TypeError: method expected 2 arguments, got 3
[07:24:16] <leduyquang753> Read the docs of the function and pass the correct amount of arguments.
[07:24:45] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[07:25:51] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[07:26:57] <fluter> leduyquang753: the function is not a normal function, it's a result of new.instancemethod
[07:27:07] *** Joins: econdudeawesome (~shadowfax@cpe-76-187-70-50.tx.res.rr.com)
[07:27:09] <fluter> it worked in 2.7, but in py3 it stopped working
[07:27:23] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[07:28:00] <econdudeawesome> hello all. Maybe a dumb question but seems like everything I try runs in a NEW, not EXISTING terminal. VSCode, python w/ ipython shell. Want to run code that I write in the editor in the console. I know this isn't "vscode" channel, but curious if anyone has experience with this in Python
[07:28:10] *** Quits: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net) (Quit: This computer has gone to sleep)
[07:28:25] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[07:28:27] <Repiphany> Maybe pastebin some code if you want some non-mind-readers to be able to help
[07:28:49] <retrosenator> everything works for me
[07:29:08] <retrosenator> I use emacs
[07:29:14] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[07:29:23] *** Joins: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net)
[07:29:26] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[07:29:34] *** Joins: montxero (~user@149.167.149.74)
[07:33:48] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:34:01] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[07:35:06] <vvdaiwrw> same here, but on vim's side (https://0x0.st/NUlP)
[07:36:20] *** Joins: dre (~dre@2001:8003:c932:c301:622f:d12a:5082:ae20)
[07:36:56] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Remote host closed the connection)
[07:37:11] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[07:37:35] *** Joins: mickey (~user@user/mickey)
[07:38:31] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[07:40:00] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[07:41:52] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 250 seconds)
[07:42:28] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[07:43:02] *** Quits: econdudeawesome (~shadowfax@cpe-76-187-70-50.tx.res.rr.com) (Quit: welp.)
[07:43:02] *** Quits: DerpGusta (~quassel@user/derpgusta) (Ping timeout: 256 seconds)
[07:43:29] *** Joins: Mija (~Mija@user/mija)
[07:45:47] *** Joins: DerpGusta (~quassel@user/derpgusta)
[07:47:04] *** Quits: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Ping timeout: 250 seconds)
[07:48:08] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[07:49:30] <fluter> anyone know?
[07:50:09] *** Quits: Naan (~naan@user/naan) (Remote host closed the connection)
[07:50:31] *** Joins: Naan (~naan@user/naan)
[07:51:06] *** Joins: legola (~legola@46.235.100.27)
[07:51:59] <mefistofeles> fluter: https://stackoverflow.com/questions/4364565/replacing-the-new-module web search knows :P
[07:52:37] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[07:52:40] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[07:54:58] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[07:55:43] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:59:17] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 245 seconds)
[08:01:10] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[08:02:18] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[08:02:37] *** Joins: ravan (~ravan@user/ravan)
[08:03:47] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[08:04:42] *** Quits: attackthemoon (~attackthe@097-088-068-145.res.spectrum.com) (Read error: Connection reset by peer)
[08:08:18] *** Joins: odoood (~odoood@2601:c8:c003:a550::7)
[08:12:18] *** Joins: iflema (~ian@user/iflema)
[08:17:02] *** Quits: xikkub (me@user/xikkub) (Quit: .)
[08:20:32] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[08:20:47] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[08:22:23] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Client Quit)
[08:25:40] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[08:25:50] *** Joins: codeguru (~codeguru@c-174-57-209-101.hsd1.nj.comcast.net)
[08:28:25] *** Quits: nomic (~nomic@185.192.69.188) (Quit: Leaving)
[08:30:35] <fluter> hmm, when in a class body, when i use self.func, is it bound or unbound?
[08:30:41] <fluter> func is a method in the function
[08:30:59] <fluter> is self considered an instance?
[08:33:24] *** Joins: zensei (~zensei@user/zensei)
[08:33:56] *** Joins: Skyfire (~pyon@user/pyon)
[08:35:37] *** Joins: upsala (~zcb@185.213.155.160)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:37:59] <jinsun> self is usually the instance of the class yes
[08:38:11] <jinsun>  (but nothing stops you from doing weird things, like expect the method to be called only from class and assume self is not the instance, or you can name the second argument self, and the fisrt argument something else)
[08:39:05] <fluter> ok
[08:39:32] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[08:39:54] *** Joins: montxero (~user@149.167.149.74)
[08:40:24] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[08:40:28] <fluter> https://github.com/python/cpython/blob/main/Lib/types.py#L41 where can i find the source code of type()
[08:40:53] <fluter> in the types.py module, it simply returns type() return value, it doesn't define MethodType
[08:40:59] <fluter> i'd like to inspect its internals
[08:41:08] <fluter> is it in C or python?
[08:42:20] *** Parts: r3m (~launch@user/r3m) (WeeChat 3.3-dev)
[08:43:13] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Ping timeout: 252 seconds)
[08:43:26] <jinsun> it is C definitely
[08:44:15] *** Joins: Sky_Net (~Sky_Net@176.14.213.85)
[08:44:52] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[08:44:53] <fluter> okk, any good ways to get info on how to use its constructor?
[08:44:57] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[08:45:06] *** Joins: sturmmann (~sturmmann@user/sturmmann)
[08:47:19] <jinsun> https://docs.python.org/3/library/functions.html#type ?
[08:48:37] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:49:59] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[08:50:04] <jinsun> fluter: are you trying to make a function without def? if so, why?
[08:51:22] <fluter> jinsun: there is a line of code like this: return types.MethodType(self._function(), self._instance(), self.__class__) which always throws an exception
[08:51:26] <fluter> i'm trying to find out why
[08:52:07] <fluter> it was just migrated from py2 from this line: new.instancemethod(...)_
[08:52:35] <jinsun> ok so someone has already tried to do that, and now you have to fix it
[08:52:56] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[08:53:18] <fluter> yeah
[08:53:42] <fluter> i suspected types..MethodType is not a direct replacement of new.instancemethod, but i wanna confirm it
[08:56:53] *** Joins: r3m (~launch@user/r3m)
[08:57:57] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-237.090.186.pools.vodafone-ip.de)
[08:58:53] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[08:59:10] *** Quits: odoood (~odoood@2601:c8:c003:a550::7) (Ping timeout: 240 seconds)
[08:59:24] <jinsun> you can just use functools.partial to bind the self parameter of the function, probably, can't say much without seeing the full code
[08:59:38] <fluter> ok let me try
[09:01:58] <jinsun> the MethodType code is here probably https://github.com/python/cpython/blob/main/Objects/methodobject.c, but I haven't used the python C api at all, so I can't read that
[09:02:07] *** Joins: promey (~Promeys@110.144.49.15)
[09:02:37] <jinsun> better to not try to create an instance of that anyway
[09:05:04] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 250 seconds)
[09:05:14] *** Joins: lethu (~lethu@user/lethu)
[09:06:11] *** Quits: Elzington (~Elzington@68.235.43.102) (Quit: Leaving)
[09:09:37] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[09:09:39] *** Quits: black_13 (~jjosb@209.221.58.170) (Quit: Leaving)
[09:10:00] <BrenBarn> I tend to doubt that looking at the source of MethodType is going to be much help
[09:10:32] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[09:10:59] *** Quits: gegenschein (~james@ec2-52-91-126-104.compute-1.amazonaws.com) (Quit: leaving)
[09:12:26] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:6686:29f1:fad1:5647)
[09:14:15] *** Quits: zensei (~zensei@user/zensei) (Remote host closed the connection)
[09:14:23] *** Joins: Wulf (~Wulf@user/wulf)
[09:15:41] *** Quits: promey (~Promeys@110.144.49.15) (Quit: Leaving)
[09:17:33] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[09:17:59] *** Quits: beencubed (~beencubed@209.131.238.248) (Quit: Leaving)
[09:22:07] *** Joins: beencubed (~beencubed@209.131.238.248)
[09:24:01] *** Joins: PaddyF (~PaddyF@user/paddyf)
[09:24:49] *** Quits: Mija (~Mija@user/mija) (Quit: Mija)
[09:26:51] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[09:29:03] *** Joins: dasbootmir (~dasbootmi@user/dasbootmir)
[09:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[09:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[09:31:12] *** Joins: Enitin (~Enitin@82.102.22.86)
[09:31:27] *** Joins: promey (~Promeys@gateway/tor-sasl/promey)
[09:31:40] *** Joins: dvx (~dvx@185.63.97.64)
[09:33:30] *** Joins: mixfix41 (~homefame@user/mixfix41)
[09:34:02] *** Joins: stranac (~stranac@195.29.239.126)
[09:35:07] *** Joins: devcpu (~rusty@d50-92-229-34.bchsia.telus.net)
[09:35:56] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[09:36:53] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:37:39] *** Joins: manti7 (~manti7@176.10.104.94)
[09:38:45] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[09:38:46] *** Joins: LuksNuke (~LuksNuke@2001:7e8:c066:6200:be85:8d95:5d9:f9da)
[09:40:25] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[09:42:24] *** Joins: shlomif (~shlomif@87.68.240.100.adsl.012.net.il)
[09:43:00] *** Quits: LuksNuke (~LuksNuke@2001:7e8:c066:6200:be85:8d95:5d9:f9da) (Remote host closed the connection)
[09:43:19] *** Joins: LuksNuke (~LuksNuke@2001:7e8:c066:6200:be85:8d95:5d9:f9da)
[09:43:22] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[09:43:42] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[09:44:03] *** Joins: teut (~teut@122.161.21.145)
[09:44:53] *** Quits: orbatos (~orbatos@user/orbatos) (Remote host closed the connection)
[09:45:00] *** Joins: drewgon (~drewgon@159.196.19.188)
[09:47:34] *** Quits: LuksNuke (~LuksNuke@2001:7e8:c066:6200:be85:8d95:5d9:f9da) (Ping timeout: 252 seconds)
[09:51:58] *** Joins: greedom (~greedom@2001:16b8:32f5:9c00:b659:24eb:b171:6faf)
[09:53:11] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[09:55:29] *** Joins: lexx (~scsi@78.157.70.196)
[09:56:55] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 252 seconds)
[09:57:39] *** Joins: tijuco (~tijuco@user/tijuco)
[09:57:54] *** Joins: LuksNuke (~LuksNuke@2001:7e8:c066:6200:be85:8d95:5d9:f9da)
[09:59:43] *** Quits: lalitmee__ (~lalitmee@180.94.33.77) (Remote host closed the connection)
[10:00:21] *** Joins: lalitmee__ (~lalitmee@180.94.33.77)
[10:02:12] *** Quits: LuksNuke (~LuksNuke@2001:7e8:c066:6200:be85:8d95:5d9:f9da) (Ping timeout: 245 seconds)
[10:04:08] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 256 seconds)
[10:04:57] <mattf> Does anyone how does it work on the irc protocol to send multiple lines on a single message instantly? I am using something like: f"PRIVMSG {channel} :{message} \r\n"
[10:06:28] <mattf> if I combine multiple of those in the same packed (as s single encoded string) the server will display them slowly with a considerable delay between them. I am trying to figure out what is sent when you write "multiple lines" on your irc client and they arrive instantly and display instantly. Or does such thing doesn't exist and is just an impression I have since I sen't the messages myself then the irc client can display it instantly?
[10:07:37] <kline> >slowly with a considerable delay
[10:07:58] <kline> mattf, its far more likely that something on your end is throttling the outgoing to avoid getting killed for flooding
[10:08:12] <mattf> kline
[10:08:17] <mattf> send me 10 lines on privaet
[10:08:25] <kline> ok
[10:08:30] <kline> let me grab something to copy
[10:08:34] <mattf> thanks
[10:09:08] <Wulf> mattf: the irc server may throttle you as well. Only a few lines will get sent fast.
[10:09:12] *** Quits: lalitmee__ (~lalitmee@180.94.33.77) (Remote host closed the connection)
[10:09:58] <mattf> hmm i see
[10:10:00] <kline> Wulf, libera doesnt, we just kill you rather than allow clients to send us data that we need to cache
[10:10:12] <Wulf> kline: sounds good :)
[10:10:20] <kline> or else someone could just connect a lot of clients and then max it out to try and oom kill the ircd
[10:10:28] <mattf> so there is no way besides sending new lines as new PRIVMSG's right
[10:10:37] *** Joins: lalitmee (~lalitmee@180.94.33.77)
[10:10:43] <kline> every new line needs a new privmsg command, yes
[10:10:45] <Wulf> mattf: yup.
[10:10:58] <mattf> yeah thanks guys
[10:10:58] <kline> such is life in an 1980s protocol
[10:11:04] <mattf> oh yeah
[10:11:16] <mattf> still cool and simple enough to learn
[10:11:40] *** Joins: computeiro (~Wender@189.37.64.92)
[10:11:41] *** Joins: djapo (~archangel@user/djapo)
[10:11:44] <Wulf> mattf: you could of course connect multiple clients and use them all for sending your message. If you get the timing right, the audience will see them in the right order. /me runs.
[10:12:28] <mattf> no no, im just wondering why my bot is so slow when displaying (things like chess boards and ascii art)
[10:12:41] <mattf> the first 3 messages come fast then is slow
[10:14:01] <kline> are you connecting via a znc or anything?
[10:14:02] *** Quits: tijuco (~tijuco@user/tijuco) (Quit: Leaving)
[10:14:17] *** Quits: wender (~Wender@189.37.65.111) (Ping timeout: 245 seconds)
[10:14:23] <mattf> here I am
[10:14:28] <kline> on your bot
[10:14:29] <mattf> my bots no
[10:14:36] <kline> is it libera/
[10:14:37] <kline> ?
[10:14:40] <mattf> no
[10:14:46] <kline> could be the server then
[10:14:54] <kline> libera doesnt, others might
[10:15:01] <mattf> it is my friend's oragono
[10:15:13] <kline> (though i think this is a bad idea, servers shouldnt cache user data for any longer than needed to process it)
[10:15:27] <Wulf> kline: I just tried on libera using "telnet". I wasn't killed for flooding, my other client received messages delayed.
[10:15:39] <mattf> maybe with some setting he could at least let 20 messages
[10:16:05] <Wulf> kline: I believe the server got a limit on reading and a limited buffer for a client's receive buffer. Only when this buffer overflows the client is disconnected.
[10:17:44] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 256 seconds)
[10:18:12] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:18:14] *** Joins: Confusioned (~AnySomebo@p200300c2871c5e45e0b9860ece0477f8.dip0.t-ipconnect.de)
[10:19:26] *** Quits: AnySomebody (~AnySomebo@p200300c2871c5e18b7b7671e5d0ba0d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[10:20:27] <kline> Wulf, yes, you get killed for blowing through your network buffer
[10:20:28] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:fdff:1830:feda:d018) (Read error: Connection reset by peer)
[10:20:54] <kline> but theres a rate below the speed we can service your incoming data but above an acceptable amount where you will be killed
[10:22:00] *** Joins: eson123 (~eson123@118.69.128.37)
[10:22:08] *** Quits: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net) (Quit: This computer has gone to sleep)
[10:22:36] <eson123> question about sorting and counting, what algorithm does the .count() method use ? like i am wondering that in case i sort a list into ascending order and sort a list into descending order, which will have the .count() faster
[10:22:50] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[10:22:50] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[10:23:12] *** Joins: montxero (~user@149.167.149.74)
[10:23:26] *** Joins: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net)
[10:23:41] *** Joins: Enitin (~Enitin@82.102.22.86)
[10:24:06] <Wulf> eson123: list.count? The algorithm would have to iterate through the whole list and compare each item. Order doesn't matter.
[10:24:34] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.2)
[10:24:54] <Wulf> eson123: if you've got a sorted list (order doesn't matter again) you could use some binary search to get a fast answer.
[10:24:57] <eson123> Wulf: oh, HHmmm i am thinking of a counting algorithm where all occurances are organized at the beginning if they are the smallest and when it finishes counting it will break the itertion
[10:25:34] <Wulf> eson123: or you can use a dict and store the counts
[10:25:42] <eson123> oh yea that makes more sense
[10:27:24] <The-Compiler> Could probably use https://docs.python.org/3.8/library/bisect.html to find the left- and rightmost value, slice the list and then use .count on that slice. Not really convinced it'll be faster (and in any case, you should probably profile before you optimize)
[10:27:47] <The-Compiler> if you're curious, here's the implementation of .count(): https://github.com/python/cpython/blob/v3.9.7/Objects/listobject.c#L2545-L2576
[10:30:10] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[10:30:53] *** Joins: Enitin (~Enitin@82.102.22.86)
[10:31:05] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 252 seconds)
[10:32:06] <Wulf> The-Compiler: it definitely should be faster. \Theta(log2(n)) instead of \Theta(n)
[10:33:55] *** Joins: Seto_Kaiba (~hunterkll@remote.kisaracorporation.com)
[10:34:11] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Killed (NickServ (GHOST command used by Seto_Kaiba!~hunterkll@remote.kisaracorporation.com)))
[10:34:15] *** Seto_Kaiba is now known as Hunterkll
[10:34:22] <Wulf> didn't know python had a bisect module :)
[10:35:09] <The-Compiler> Wulf: you *still* need to iterate over (parts of) the list, so it's not entirely "instead" (and you also need to copy it) - I guess it really depends on the data in it.
[10:36:13] <fluter> BrenBarn: I need to find out does the MethodType constructor takes 2 or 3 arguments
[10:36:14] *** Joins: lethu (~lethu@user/lethu)
[10:36:17] <Wulf> The-Compiler: no need to copy anything. And only a few items are checked.
[10:36:24] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[10:36:42] *** Joins: lethu (~lethu@user/lethu)
[10:37:45] <The-Compiler> Wulf: a slice is a copy
[10:38:00] <Wulf> then don't slice.
[10:38:17] <Wulf> bisect_right(the_list, item) - bisect_left(the_list, item)
[10:39:07] <The-Compiler> hm, clever :)
[10:39:14] <The-Compiler> didn't think of that, but of course
[10:40:08] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[10:41:09] *** Quits: Mark_Pinecone (~Mark_Pine@gateway/tor-sasl/markpinecone/x-88286818) (Ping timeout: 276 seconds)
[10:41:10] *** Quits: eson123 (~eson123@118.69.128.37) (Quit: Leaving)
[10:41:11] *** Joins: mexen (uid495612@user/mexen)
[10:43:58] *** Joins: ppang (~ppang@user/ppang)
[10:44:25] *** Joins: gegenschein (~james@ec2-52-91-126-104.compute-1.amazonaws.com)
[10:44:58] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:45:13] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:46:21] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:54] *** Joins: seednode (~seednode@user/seednode)
[10:47:20] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:47:42] *** Quits: dasbootmir (~dasbootmi@user/dasbootmir) (Quit: dasbootmir)
[10:49:42] *** Joins: palasso (~palasso@user/palasso)
[10:51:38] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[10:51:59] *** Quits: dre (~dre@2001:8003:c932:c301:622f:d12a:5082:ae20) (Quit: Leaving)
[10:53:34] *** Joins: kosh (~kosh@user/kosh)
[10:55:07] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Ping timeout: 245 seconds)
[10:55:46] *** Quits: jpic (~jpic@82.142.28.254) (Ping timeout: 252 seconds)
[10:56:52] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[10:57:13] *** Joins: khrbt (~znc@user/khrbt)
[10:57:23] *** Joins: jpic (~jpic@82.142.10.6)
[10:59:24] *** Joins: fdan (~fdan@192.146.154.3)
[10:59:28] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Ping timeout: 250 seconds)
[10:59:50] *** Joins: rendar (~rendar@user/rendar)
[11:00:09] *** Quits: syntaxman (~wade@li227-215.members.linode.com) (Quit: leaving)
[11:00:16] *** Joins: pizdets (~pizdets@183.182.110.224)
[11:01:12] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 250 seconds)
[11:04:33] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[11:06:05] *** Joins: gusto (~Augustus@109.255.100.54)
[11:06:26] *** Joins: syntaxman (~wade@li227-215.members.linode.com)
[11:06:28] *** Joins: kosh (~kosh@user/kosh)
[11:09:00] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[11:09:08] *** Joins: pycode (~pycode@2001:b07:5d28:551:adbf:e6a7:458c:d400)
[11:11:10] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[11:11:18] *** Joins: Hax0r (~Hax0r@51.252.22.22)
[11:11:59] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:12:37] *** Quits: codeguru (~codeguru@c-174-57-209-101.hsd1.nj.comcast.net) (Ping timeout: 245 seconds)
[11:13:11] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[11:14:13] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[11:14:43] *** Joins: dre (~dre@2001:8003:c932:c301:693b:b827:4df9:b3e4)
[11:17:11] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 256 seconds)
[11:17:50] *** Quits: Sky_Net (~Sky_Net@176.14.213.85) (Read error: Connection reset by peer)
[11:21:30] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[11:23:24] *** Joins: Skyfire (~pyon@user/pyon)
[11:34:27] *** Joins: Dantali0n (~Dantali0n@89.205.142.34)
[11:34:40] *** Quits: AlanMD (~AlanMD@188.27.5.247) (Ping timeout: 240 seconds)
[11:36:49] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[11:38:40] *** Quits: Dantali0n (~Dantali0n@89.205.142.34) (Ping timeout: 240 seconds)
[11:39:03] *** Joins: slavaqq (~slavaqq@sdmail.sdserver.cz)
[11:39:27] <rendar> why a function object has __get__ defined?
[11:42:44] <jinsun> because all objects have them https://docs.python.org/3/reference/datamodel.html#object.__get__
[11:43:01] <jinsun> *have it
[11:43:04] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[11:43:24] *** Joins: Enitin (~Enitin@82.102.22.85)
[11:44:01] <rendar> jinsun, yes, i get that for classes, and descriptors are a very power mechanism for classes.. but for functions? i can't get how the same mechanism is used with functions, that's because everything is an istance of `object` ?
[11:45:26] <jinsun> yes everything is instance of object, so functions get that even if it might not be useful for function objects
[11:45:51] <rendar> but it is useful
[11:46:12] <rendar> i wonder to understand why is that, i always imagined functions as instances of object() with __call__ implemented, and that's all
[11:50:03] <jinsun> ah ok, I didn't see properly, it is required onl for descriptors, no idea why functions have __get__ then
[11:50:46] <BrenBarn> I think it is useful for function objects, as that's what lets methods work
[11:51:10] <rendar> BrenBarn, can you explain it further?
[11:51:41] <BrenBarn> let's say you have a class Foo
[11:51:45] <BrenBarn> then you create an instance `f`
[11:51:55] <rendar> yes
[11:51:55] <habnabit_> rendar, __get__ is what binds 'self' to a method
[11:52:01] <BrenBarn> and suppose the class has a method `go`
[11:52:26] <BrenBarn> when you access `f.go` then it calls `Foo.__get__(f)` and this returns a method object that is bound to the instance
[11:52:43] *** Quits: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net) (Quit: This computer has gone to sleep)
[11:52:44] <rendar> i see
[11:53:21] <habnabit_> BrenBarn, not quite. it calls go.__get__(Foo, f)
[11:53:35] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[11:53:35] <rendar> the thing that still puzzles me is that for descriptors to work, you have to define them at a class level, instead you can define funcitons also at instance level...
[11:53:36] <BrenBarn> or rather --- right
[11:53:45] *** Joins: Elzington (~Elzington@68.235.43.110)
[11:53:52] <habnabit_> rendar, 'you can define functions at instance level'? how?
[11:54:00] *** Joins: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net)
[11:54:14] <rendar> habnabit_, `def __init__(self): self.my_fn = func`
[11:55:50] <habnabit_> rendar, since functions have __get__ but no __set__, setting the attribute does nothing special; the instance gains a new simple attribute. descriptors are invoked _iff_ during attribute lookup it is _not_ an instance attribute
[11:56:14] <habnabit_> rendar, so, binding methods through __get__ works because the instance has no attribute with that name
[11:56:49] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 252 seconds)
[11:57:02] <rendar> uhm...
[11:57:10] <habnabit_> rendar, yes?
[11:57:36] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[11:58:23] <rendar> habnabit_, the thing is, if i do in `__init__(self): self.my_fn = math.cos` i'm adding 'my_fn' key into __dict__ of that instance right? then, if i do `a.my_fn(123)` python will search for 'my_fn' into that __dict__, and it will found it...
[11:58:35] <habnabit_> rendar, yep
[11:59:49] <rendar> so, if it takes it from __dict__, it won't use the descriptor __get__ basic mechanism, or not?
[12:00:07] <habnabit_> rendar, as i said: "descriptors are invoked _iff_ during attribute lookup it is _not_ an instance attribute"
[12:00:16] *** Joins: arinov (~arinov@213.194.126.155)
[12:00:30] <rendar> and for instance attribute you mean being into __dict__ instance
[12:00:44] <habnabit_> rendar, __dict__ isn't the only way to have instance attributes
[12:00:56] <rendar> what is the other way?
[12:01:08] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[12:01:10] <rendar> oh __slots__, ok
[12:01:26] <habnabit_> rendar, __slots__, pypy's optimized instances
[12:01:34] <rendar> ok
[12:01:41] *** Joins: lalitmee_ (~lalitmee@180.94.33.183)
[12:02:01] <rendar> habnabit_, another thing, do you use pandas' DataFrame?
[12:02:08] <habnabit_> rendar, sure
[12:02:16] <rendar> i was thinking:
[12:03:06] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:03:07] <rendar> for very large timeseries into DataFrame, is it wise to use unix epoch as an uint64, instead of a datetime object? so that uint64 will be allocated directly into the DataFrame table, instead of allocating gazillion of little PyObject's to represent the date of the sample
[12:04:02] *** Quits: lalitmee (~lalitmee@180.94.33.77) (Ping timeout: 252 seconds)
[12:04:40] *** Quits: pizdets (~pizdets@183.182.110.224) (Ping timeout: 240 seconds)
[12:05:29] <habnabit_> rendar, huh? why do you think it makes datetime objects at all? https://numpy.org/doc/stable/reference/arrays.datetime.html#datetime-units
[12:07:04] <rendar> uhm, i see.. but DataFrame is a panda's thing, not numpy's, or it is based on numpy?
[12:07:40] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 240 seconds)
[12:07:46] <habnabit_> rendar, pandas is a wrapper atop numpy :)
[12:07:47] <BrenBarn> it uses numpy, yes
[12:07:55] <rendar> i see :)
[12:11:11] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:13:38] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:15:59] *** Joins: setuid (sid191390@canonical/setuid)
[12:16:34] <setuid> Is there a reason why this particular f-string isn't being interpreted? payload = '{"entity_id": f"light.{args.lamp}_table_lamp"}'
[12:16:42] <setuid> That  _should_ work, right?
[12:16:51] <Wulf> setuid: f''
[12:18:27] *** Quits: pycode (~pycode@2001:b07:5d28:551:adbf:e6a7:458c:d400) (Ping timeout: 245 seconds)
[12:18:28] <Wulf> setuid: or remove the surrounding ''
[12:18:30] <setuid> That's not working either
[12:18:48] <setuid> payload = '{"entity_id": f''light.{args.lamp}_table_lamp''}'
[12:18:57] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[12:18:59] <setuid> Those are single quotes after the eff
[12:19:02] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[12:19:12] <Wulf> setuid: why is there a quote after the equal sign?
[12:19:15] *** Joins: Norore (~weechat@balder.ens.fr)
[12:19:38] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (Quit: you can't fire me!)
[12:19:42] <setuid> Well, because that's how the payload is passed in. If I don't use the f-strings, and use a string literal, it works
[12:19:49] <setuid> Let me remove those outer quotes
[12:20:02] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[12:20:06] <setuid> Ok, this works: payload = {"entity_id": f"light.{args.lamp}_table_lamp"}
[12:20:07] *** Joins: LabMonkey (~LabMonkey@2602:306:cf62:e270:101a:c784:11b0:c2b7)
[12:20:10] <setuid> So it was interpolation
[12:20:36] <setuid> hrm, hates that json now, one sec
[12:20:50] *** Joins: Curiosity (uid511277@user/cypris)
[12:21:25] <setuid> {"message": "Data should be valid JSON."} 400
[12:21:34] <setuid> But the json is: {'entity_id': 'light.aura_table_lamp'}
[12:21:37] <setuid> and that's valid
[12:21:40] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[12:22:10] <setuid> I can pass that same payload in with curl, and it works: -d '{"entity_id": "light.lyra_floor_lamp"}'
[12:22:15] *** Joins: krab (~crabhi@ip-213-220-240-133.net.upcbroadband.cz)
[12:23:08] <DPA> json.dumps(payload)?
[12:23:09] <Wulf> setuid: use requests or httpx and let it handle the json.
[12:23:18] <setuid> I am using requests
[12:23:40] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:8521:a498:49e4:60ce) (Ping timeout: 240 seconds)
[12:23:44] <setuid> Wulf: https://paste.debian.net/hidden/79018982/
[12:23:50] <Repiphany> Presumably you can pass a python dict directly rather than converting it to a string first
[12:24:01] <Wulf> setuid: wrong paste?
[12:24:10] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[12:24:17] <setuid> No, why?
[12:24:21] <Wulf> setuid: json.post(url, json={"foo": "bar"})
[12:24:28] <Wulf> err... requests.post(...)
[12:24:33] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Read error: Connection reset by peer)
[12:25:14] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[12:27:37] *** Joins: theprophet (~theprophe@85.114.228.184)
[12:29:04] *** Joins: Sky_Net (~Sky_Net@176.14.213.85)
[12:29:26] *** Quits: n00b101 (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:29:44] <setuid> Wulf: Suggestions for improvement? https://paste.debian.net/hidden/8282fe37/
[12:31:14] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:31:52] <Wulf> setuid: content type might be set automatically
[12:33:56] <Wulf> setuid: and do not use os.system. Use subprocess.run(["play", "-q", f"lamp_{args.state}.mp3", "tempo", "1.2"]) for security reasons.
[12:34:06] <setuid> ah good call
[12:34:18] <setuid> I don't like that I have to write to a file, then read it back with 'play', but that's how gTTS works
[12:35:06] <zln> What is the best way to refer to the element yielded by seq[2::] @ line:4? https://pastebin.com/fheLkmUA
[12:35:10] *** Joins: mcope (~matt@user/mcope)
[12:36:37] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:18] *** Joins: Proxysna (~Proxysna@185.251.89.199)
[12:37:41] <Repiphany> seq[2::] isn't an element, it's a slice
[12:38:19] <zln> Repiphany: ah, that's right. Wrongly I thought it was yielding elements in turn :D
[12:38:31] <mdk> setuid: yes, it's already in a string (by simple quotes)
[12:38:50] <mdk> (woops I had not scrolled to the bottom before replying, little bug of my client, sry)
[12:39:24] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[12:39:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:39:33] <zln> the thing is, I'm expected to only use nested while loops :/
[12:39:42] <zln> not for loops
[12:39:58] <zln> should list comprehension work in the if header?
[12:40:09] <setuid> Is there a better TTS lib than gTTS? I started with pyttsx3 but its voices using espeak were pretty horrible, even with some tweaking to speed
[12:40:28] *** Joins: Proxysna_ (~Proxysna@62.119.254.142)
[12:40:47] <Repiphany> What are you trying to do
[12:41:23] <DPA> On many linux/unix systems, file descriptors can be accessed using /proc/self/fd, /dev/fd/, and /proc/pid/fd. If the components involved don't require seeking or mmapping, a pipe could probably be used.
[12:41:48] <Repiphany> seq[0]%seq[i]  (i > 0) is always going to be non-zero because seq[i] is larger than seq[0]
[12:42:07] *** Joins: shad (~shad@user/shad)
[12:43:02] *** Quits: Proxysna (~Proxysna@185.251.89.199) (Ping timeout: 245 seconds)
[12:43:46] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[12:44:17] *** Quits: drewgon (~drewgon@159.196.19.188) (Ping timeout: 245 seconds)
[12:44:46] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[12:45:13] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[12:45:17] *** Joins: mcope (~matt@user/mcope)
[12:45:49] <zln> Repiphany: find primenumbers in seq
[12:46:01] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:46:30] <zln> or more preciesly, remove multiples of 2, multiples of 3 and so on
[12:46:35] <Repiphany> So sieve of eratosthenes
[12:47:28] *** Joins: pizdets (~pizdets@183.182.110.224)
[12:47:54] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[12:48:17] <Repiphany> I'd guess the way whoever intended you to do it with while loops meant for you to use indices
[12:49:33] <zln> Repiphany: I'll stick with indices, thanks :)
[12:49:59] <Repiphany> zln: Something like https://bpa.st/6FJA
[12:50:07] *** Joins: plastico (~plastico@neomutt/plastico)
[12:50:33] <zln> Repiphany: thank you! :)
[12:51:10] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[12:51:14] *** Quits: dre (~dre@2001:8003:c932:c301:693b:b827:4df9:b3e4) (Quit: Leaving)
[12:52:35] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[12:56:58] *** Quits: pizdets (~pizdets@183.182.110.224) (Ping timeout: 256 seconds)
[12:57:38] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[13:00:19] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[13:00:33] *** Joins: Naan (~Naan@user/naan)
[13:01:00] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[13:03:46] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[13:04:01] *** Joins: Enitin (~Enitin@82.102.22.85)
[13:04:07] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::4433)
[13:04:40] *** Joins: pizdets (~pizdets@183.182.110.224)
[13:09:55] *** Joins: goldfish (~goldfish@user/goldfish)
[13:10:43] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:11:10] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[13:13:04] <theprophet> guys whats the value for just any number? like if i want to find out if person is old enough to vote but i dont want to specify the variable value?
[13:13:23] <theprophet> whats the keyword for that?
[13:13:47] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi)
[13:13:51] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[13:14:10] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[13:14:32] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[13:15:45] <theprophet> ok nvm, i just realized i asked something that does not make sense
[13:16:33] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[13:16:50] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Ping timeout: 250 seconds)
[13:18:35] <cluelessperson> theprophet, yee
[13:18:55] <cluelessperson> theprophet,    age?  integer?
[13:19:01] <theprophet> ye
[13:19:23] <theprophet> but i realized that it needs to compare to something. and that something gotta be the base value
[13:19:24] *** Quits: Hax0r (~Hax0r@51.252.22.22) (Read error: Connection reset by peer)
[13:20:16] *** Joins: Linux77 (~Linux7_7@186.233.182.237)
[13:21:05] <DPA> Zero-knowledge proof?
[13:21:22] *** Quits: greedom (~greedom@2001:16b8:32f5:9c00:b659:24eb:b171:6faf) (Remote host closed the connection)
[13:22:59] *** Joins: vats (~vats@180.149.226.8)
[13:23:18] *** Quits: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net) (Quit: This computer has gone to sleep)
[13:23:36] <theprophet> DPA what?
[13:23:37] <Linux77> Hello cool friend's it's a pleasure for me stay here and sometimes and maybe learn something! grateful for the oportunity!
[13:23:57] *** Quits: stoneware (~stoneware@user/stoneware) (Quit: I'll be back soon)
[13:24:25] *** Joins: stoneware (~stoneware@user/stoneware)
[13:24:33] *** Joins: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net)
[13:24:46] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:25:34] <cluelessperson> yee
[13:25:36] <cluelessperson> learning!
[13:26:43] <DPA> theprophet: Wasn't meant seriousely. Although it is a real thing. It's all about figuring out only what one wants to know, without gaining any other important additional information about the thing.
[13:27:18] <theprophet> DPA smh
[13:28:24] <theprophet> DPA wow. ok GOD
[13:29:50] *** Quits: pizdets (~pizdets@183.182.110.224) (Ping timeout: 250 seconds)
[13:30:21] <theprophet> DPA privileged rich kids spitting some "truth" lmao
[13:30:34] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:31:25] <DPA> How did you gain this secret information?
[13:31:49] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:34:10] *** Quits: goldfish (~goldfish@user/goldfish) (Read error: Connection reset by peer)
[13:34:15] *** Joins: Dev0n (~Dev0n@user/dev0n)
[13:34:20] *** Joins: Dantali0n (~Dantali0n@217-105-142-198.cable.dynamic.v4.ziggo.nl)
[13:34:29] *** Joins: goldfish (~goldfish@user/goldfish)
[13:34:58] <theprophet> DPA ok ok  :)
[13:35:14] <DPA> :)
[13:35:17] <theprophet> DPA ur makinga scene now :)  lets just end this
[13:36:08] *** Quits: stoneware (~stoneware@user/stoneware) (Quit: The Lounge - https://thelounge.chat)
[13:38:12] *** Joins: lalitmee__ (~lalitmee@180.94.32.179)
[13:39:03] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[13:40:36] *** Quits: lalitmee_ (~lalitmee@180.94.33.183) (Ping timeout: 256 seconds)
[13:40:57] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 245 seconds)
[13:41:15] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[13:42:21] *** Joins: stoneware (~stoneware@user/stoneware)
[13:43:42] <setuid> What's the preferred way of handling keys, tokens in code that is intended to be managed in github? Obviously not committing hardcoded "token = 'foo'" to the repo, but is it enough to just drop it in a local .auth file and add that to .gitignore?
[13:43:58] <setuid> Or maybe stash it in ~/.local/share/<app>/auth.json and parse it with appdirs?
[13:44:00] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 256 seconds)
[13:44:37] *** Joins: Ivii (~Ivyy@2001:a61:13eb:f801:c96f:e059:653f:9d68)
[13:44:40] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[13:44:57] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:45:43] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[13:45:46] *** Quits: retrosenator (~retrosena@158.sub-174-216-5.myvzw.com) (Read error: Connection reset by peer)
[13:45:49] <Helle> setuid: depends on the deployment scheme
[13:46:17] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[13:46:33] <Helle> setuid: but if it is enduser single user deployed then yes I'd go with supporting BOTH local .auth and appdirs, so your development use can easily use alternate auth keys
[13:47:25] *** Joins: darksun (~darksun@user/darksun)
[13:48:22] *** Joins: goldfish (~goldfish@user/goldfish)
[13:50:07] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[13:50:48] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 256 seconds)
[13:52:34] <teut> https://nedbatchelder.com/text/st.html#33
[13:52:55] <teut> I need to ask something in this and the next slide
[13:53:16] <teut> so, how is that code conversion taking place?
[13:55:59] *** Quits: slavaqq (~slavaqq@sdmail.sdserver.cz) (Quit: Client closed)
[13:56:42] <jinsun> the code in the first slide is not being converted to the one in the second slide if you are asking that
[13:56:58] <teut> I mean by what method you kind of loop over the methods  described PortfolioSellTest in the order of appearance of the methods in the class
[13:57:10] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[13:57:14] <teut> PortfolioSellTest.__??__()?
[13:57:39] <teut> like a class  has a .__subclasses__()
[13:57:47] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[13:57:58] <teut> this way you can loop over all subclasses, I had used it once
[13:58:49] <teut> I was looking at the repo, but still I didnt have become good to understand the flow of control
[13:59:10] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[14:00:07] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[14:00:26] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[14:00:40] *** Quits: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[14:00:51] *** Joins: goldfish (~goldfish@user/goldfish)
[14:02:21] <jinsun> __dict__ probably and filter out methods only using inspect
[14:02:45] <teut> _dict__ got that , let me check
[14:02:48] <Yhg1s> teut: you can't determine the order methods are defined in after the fact.
[14:02:48] *** Joins: pizdets (~pizdets@183.182.110.224)
[14:02:58] <Yhg1s> also, don't access __dict__ directly. Use the inspect module, really.
[14:03:00] <teut> but a dict is ordered
[14:03:09] <teut> in python 3.7
[14:03:11] <Yhg1s> teut: that doesn't mean it's the order the methods are defined in.
[14:04:05] <teut> thanks , I did not know about it
[14:04:13] <Yhg1s> teut: you *can* find out the order if you use a metaclass with a __prepare__ method.
[14:04:19] <teut> the inspect module
[14:04:27] <Yhg1s> But it's a much better idea not to care about the order of definition.
[14:04:30] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[14:04:54] *** Joins: op0x0f05 (uid512716@id-512716.tinside.irccloud.com)
[14:05:01] <teut> let me try out tht still,  it will be more learning only
[14:05:38] <teut> class  DEF(ABC)  :  you mean this?
[14:06:05] <Yhg1s> teut: I don't know who or what you're asking
[14:06:40] *** Joins: pycode (~pycode@2001:b07:5d28:551:ff3a:ecbc:dcbe:bbdd)
[14:06:45] <teut> you only, since you were telling about it
[14:06:54] <teut> teut: you *can* find out the order if you use a metaclass with a __prepare__ method.
[14:06:56] <Yhg1s> about what?
[14:07:05] <Yhg1s> teut: 'ABC' is not a metaclass, if that's what you're asking.
[14:07:10] <teut> oh ok
[14:07:18] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:07:20] *** Joins: drogas (~drogas@jump2.jet.uk)
[14:07:30] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[14:07:31] <teut> do you mean     class DEF(metaclass=)  thing?
[14:07:51] <Yhg1s> teut: that's how you would use a metaclass, yes.
[14:08:06] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi)
[14:08:07] <teut> I saw that once in django's codebase
[14:08:20] <teut> I thought its the old python 2 way of making it
[14:08:26] <Yhg1s> it is not.
[14:08:29] <teut> I read on on SO or something I think
[14:08:35] <Yhg1s> well, then it must be wrong.
[14:08:41] <teut> checking out gain
[14:08:46] <teut> again*
[14:11:07] <teut> are metaclasses here related to metaprogramming?
[14:11:23] <teut> oh , yes ,  its exactly like the c++ templates thing
[14:11:23] <Yhg1s> let's say yes. 'metaprogramming' isn't particularly well-defined.
[14:11:36] <teut> the compiler generates code for you
[14:11:39] *** Joins: czuk_cza (~mist@188.147.96.6.nat.umts.dynamic.t-mobile.pl)
[14:11:45] <Yhg1s> no, entirely unlike C++ templates.
[14:11:48] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:11:55] <teut> https://realpython.com/python-metaclasses/
[14:12:09] <teut> here they are using the 2 argumnt form of the type()
[14:12:14] <teut> argument*
[14:12:54] <teut> ok there is more to read there
[14:12:58] <Yhg1s> there is no 2-argument form.
[14:13:08] <teut> 3 rg then
[14:13:13] <teut> 3 argument then*
[14:13:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[14:13:29] <teut> I didnt do python from some time, so forgot
[14:13:43] <teut> am being forced to do shitty react
[14:14:00] <Yhg1s> the 3-argument form isn't worth remembering anyway. The 'class' statement is the usual way to creating types, not the 3-argument form of type().
[14:14:28] <teut> sure
[14:14:41] <teut> but if it exists then it should be known
[14:15:06] <Yhg1s> No, that's not a good approach to knowledge.
[14:15:11] <teut> helps in debugging
[14:15:35] <teut> sometimes I want to write in line 5 , but I write somewhere else
[14:15:53] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[14:16:07] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[14:16:47] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[14:18:39] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[14:18:51] *** Joins: georgios (~georgios@user/georgios)
[14:20:58] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[14:20:58] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[14:21:07] *** Joins: Enitin (~Enitin@82.102.22.84)
[14:23:07] *** Quits: audiocat (~audio@2603-8081-1801-3bb5-af7b-3a1b-89ee-1477.res6.spectrum.com) (Ping timeout: 252 seconds)
[14:27:13] <lericson> we had this discussion a couple of days ago, but why do people like exceptions to signal expected errors?
[14:27:27] *** Quits: zepolen_ (~zepolen@ppp-94-68-115-2.home.otenet.gr) (Read error: Connection reset by peer)
[14:27:48] *** Joins: zepolen (~zepolen@2a02:587:8611:2428:7d4d:8714:ada:4027)
[14:27:49] <lericson> i always thought of exceptions as a means to handle uncommon control flows
[14:28:22] <Yhg1s> lericson: because they won't pass silently.
[14:28:48] *** Joins: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch)
[14:29:35] <lericson> right but that's because they invert control flow essentially
[14:29:46] <Yhg1s> they dont invert it, no.
[14:31:04] <kosh> iteration in python is controlled with exceptions
[14:31:21] <lericson> ... in generators, yes
[14:31:21] <kosh> exceptions even for common things has been the standard in python for a LONG time
[14:31:26] *** Quits: resmo (~resmo@2a00:d420:9:8a00:ddfb:380e:653e:406) (Ping timeout: 252 seconds)
[14:31:51] <kosh> even the standard we suggest for people trying to get things in dictionaries is to try and then catch the KeyError instead of checking first
[14:32:00] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[14:32:04] *** Joins: ^-^hi (~nikw@user/-hi/x-1729478)
[14:32:20] <lericson> great example imo, i really don't think that should be an exception
[14:32:32] <wib_jonas> lericson: mostly because when you make the interface, you might not know which errors are expected in the calling code. this applies eg. to the system call interfaces in python. sometimes you expect certain errors, like EEXIST for os.mkdir or ENOENT for os.remove. but not every code expects the same errors. it's easier to make the interfaces raise
[14:32:32] <wib_jonas> an exception for all errors, and catch them, rather than trying to figure out which errors each call shouldn't raise an exception for.
[14:32:33] <lericson> it's in fact uncommon to see
[14:32:42] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[14:33:12] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Ping timeout: 276 seconds)
[14:33:15] <lericson> most people either do if x in mydict: use_x_in_mydict, or y = mydict.get(x, sentinel_or_substitute_value)
[14:33:17] <kosh> lericson, the advantage is that it provides a way to know that you have an error since a return code of some kind would need to be a value that could never be stored in a dict which is a problem
[14:33:59] <wib_jonas> lericson: now if you're writing a function that you only use yourself, not expose in a library, then sure, I won't use exception handling. I'll return a value if I want to handle it, and die a fatal error if I don't want to handle a result.
[14:34:11] <kosh> best practice is try:   value = somedict[key]  except KeyError:  dosomething      if the .get approach is not sufficient
[14:34:22] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[14:34:41] <^-^hi> how to access dictionary of the current context?
[14:34:50] <lericson> locals() ^-^hi
[14:34:56] <lericson> but you don't want to do that, with near certainty
[14:34:58] <wib_jonas> and yes, sometimes the extra try gets annoying, but it's a reasonable price to pay.
[14:35:12] *** Parts: setuid (sid191390@canonical/setuid) ()
[14:35:59] <lericson> i've written python for a long time, and exception-based signalling just looks odd to me
[14:36:10] <lericson> both in the case of dict.__getitem__ and StopIteration
[14:37:12] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[14:37:32] <kosh> lericson, the issue is that sometimes there is no good value to use to indicate a key is not present and the exception provides a clean way to handle it
[14:37:38] <Yhg1s> lericson: dict.__getitem__ raising an exception isn't a signal. It's because there is no valid return value, and returning something else when it isn't explicitly requested (like dict.get) would be a source of bugs. It's an error.
[14:37:44] *** Joins: dez (uid92154@user/dez)
[14:38:06] *** Joins: gggp (~textual@60.10.194.45)
[14:38:10] *** Quits: gggp (~textual@60.10.194.45) (Client Quit)
[14:38:12] <lericson> there are many other ways to solve that problem, Yhg1s
[14:38:22] <wib_jonas> dict has an is operator to check if something exists, which I call instead of trying to handle the exception from __getitem__
[14:38:25] <Yhg1s> lericson: correct. Python chose this way. It does so consisently. It's a useful pattern.
[14:38:32] <lericson> but yes dict.__getitem__ is perhaps the more logical one
[14:38:33] <wib_jonas> the StopIteration is weird even to me, I admit\
[14:38:38] <kosh> lericson, I have dealt with cases where a dictionary only contained non None values originally so someone wrote code that just assumed None was not a valid key, until someone put a None in there later for a goood reason and a bunch of code broke
[14:38:45] <Yhg1s> Fortunately you don't have to worry about StopIteration.
[14:39:55] <wib_jonas> I also have code here that calls int or float to parse a number from a string, with an except call to handle the case when it's not a number.
[14:40:04] <lericson> Yhg1s: why are you talking to me like i'm an annoying customer on a helpline?
[14:40:17] *** Joins: lua (~ed@101.53.218.157)
[14:40:17] *** Joins: szymon (~ugh@staticline-31-183-187-232.toya.net.pl)
[14:41:04] <lericson> kosh: that's an issue to be sure, but one that seems slightly orthogonal to the design choice of exception-vs-return
[14:41:06] <Yhg1s> lericson: I'm not sure what I did to "sound" like that. I'm trying to answer your questions.
[14:41:27] <lericson> just as an example, go uses separate error returns
[14:41:33] <lericson> so, value, err = dict[foo]
[14:41:51] <lericson> Yhg1s: i see, it's less a question and more a discussion in my mind
[14:42:02] <kosh> lericson, it is also the problem with older c things for instance that would use special values to indicate an error, it is really nice to have the value return separated by an indication of an okay status
[14:42:20] <lericson> ah but C's inability to do anything useful is i think also a separate issue :p
[14:42:28] <Yhg1s> lericson: Go has that particular design choice, yes. It's because Google has had many problems with _C++_ exceptions, and so Rob Pike designed Go explicitly without exceptions. It's been a mistake from the start, really.
[14:42:34] <Yhg1s> It makes it much too easy to silently ignore errors.
[14:42:44] <lericson> interesting
[14:42:49] *** Joins: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[14:42:50] <kosh> what is the problem with c++ exceptions?
[14:43:01] <gloomy> Hi, to make debugging a generator-based pipeline easier, I wrote a function `def generator_or_list(generator):  if USE_GENERATORS: return  generator; else: return list(generator)`. I build my pipeline by calling a = generator_or_list(smth), b= generator_or_list(a); etc. - so if I want to debug, I can change the global variable and easily inspect the contents
[14:43:12] <Yhg1s> kosh: mostly, non-exception code (like C code) not getting to do the cleanup it meant to do.
[14:43:23] <lericson> gloomy: that is bound to lead to headaches
[14:43:27] <lesshaste>  I am implementing fast levenshtein distance code in C. If I use ctypes it seems there is an overhead but I am not sure how large. Do any of cython, cffi or ctypes seem plausible for tiny overheads?
[14:43:55] <deniska> gloomy: when debugging it's just easier to call list() directly on a thing you're interested in
[14:43:55] <lericson> lesshaste: i would opt for cython because levenshtein is a pretty simple algorithm
[14:44:04] <Yhg1s> lesshaste: cffi or cython will have the least overhead, because they can do much more at compiletime instead of runtime.
[14:44:06] <kosh> Yhg1s, ah I see, that has not been a problem for what I have worked on
[14:44:20] <lesshaste> lericson, thanks
[14:44:23] <lesshaste> Yhg1s, thank you
[14:44:31] <gloomy> But something's not working how I expected - if I step through this in the debugger, `a` and `b` have type "generator object generator_or_list"
[14:44:36] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[14:44:41] <kosh> ctypes is nice if you have a single expensive function call to make
[14:44:42] <lesshaste> is there an advantage of cffi over cython for interfacing with C?
[14:44:52] <lesshaste> kosh, got you. That's not my situation
[14:44:57] <Yhg1s> gloomy: sounds like your generator_or_list function is a generator itself, which wouldn't happen with the code you showed.
[14:45:00] <lericson> yes, lesshaste, cffi does not require compilation
[14:45:10] <lesshaste> kosh, what causes the overhead with ctypes?
[14:45:15] <kosh> ctypes advantage is no compilation but high call overhead
[14:45:17] <lesshaste> lericson, thanks!
[14:45:26] <Yhg1s> lesshaste: cython is a separate language, really, almost but not quite unlike Python.
[14:45:28] <lericson> lesshaste: cython serves a different goal, where you'd write the algorithm in python-like syntax
[14:45:34] <Yhg1s> cffi doesn't _require_ compilation, but the sensible way to use it does involve compilation.
[14:45:51] <lesshaste> Yhg1s, it includes C it seems as a subset
[14:45:54] <kosh> but if you have a function to call that takes seconds to minutes to run then ctypes can be really nice
[14:46:13] <lesshaste> kosh, got you. Mine takes maybe 100 nanoseconds
[14:46:20] <Yhg1s> lesshaste: it doesn't really include C, no. It has some specific syntax that looks like C.
[14:46:20] <gloomy> Yhg1s: fair enough :-) here's the real function:
[14:46:31] <lesshaste> Yhg1s,  interesting
[14:46:39] <kosh> also for some of these things you may want to look at numba
[14:46:39] <lesshaste> I know there are almost no cython devs any more
[14:46:47] <lericson> i think you can have Cython input verbatim C or C++ code actually
[14:46:49] *** Joins: theprophet (~theprophe@85.114.228.184)
[14:46:50] <lesshaste> that may be true for cffi and ctypes too?
[14:46:51] <gloomy> https://gist.github.com/ldorigo/5560084a1955d186123ac268692cbf68
[14:46:56] <lericson> s/input/output/
[14:47:11] <lesshaste> kosh, good idea
[14:47:11] <kosh> for some numeric applications I have gotten nearlyt he same performance as writing the code in c/c++ but did not have to do a separate compile step so it worked across platforms easier
[14:47:14] <^-^hi> why is output of locals() in repl so different before del(__builtins__) and after?
[14:47:15] <Yhg1s> gloomy: if your function contains 'yield', it's always a generator.
[14:47:22] <Yhg1s> gloomy: put the generator in a separate function.
[14:47:34] <lesshaste> kosh, I like it
[14:47:41] <gloomy> Yhg1s: so even if the yield is never reached?
[14:47:51] <Yhg1s> gloomy: yes.
[14:47:58] <Yhg1s> ^-^hi: because locals() won't work if you deleted builtins.
[14:48:16] <lericson> gloomy: if you really want to go this route, I would create a function decorator that turns your generators into lists if USE_GENERATORS is False
[14:48:33] <^-^hi> Yhg1s: why does it work, and work differently?
[14:48:45] <Yhg1s> ^-^hi: I don't know what you mean by 'work'. Can you show the actual output you're asking about?
[14:49:43] <lericson> gloomy: i wrote a comment
[14:49:45] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[14:49:52] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:50:08] <gloomy> Yhg1s: so you mean return a new function that is a generator? but that means that I can't use the returned value consistently right?
[14:50:10] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[14:50:34] <Yhg1s> gloomy: no, I mean do what you said you did in your original question. Put the generator code in a separate function, then call that function.
[14:50:58] <^-^hi> Yhg1s:https://termbin.com/1y6n
[14:51:02] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[14:51:25] <gloomy> lericson: thanks, that's much cleaner
[14:51:38] <Yhg1s> ^-^hi: what are you doing 'del __builtins__' in?
[14:51:44] <^-^hi> repl
[14:51:49] <Yhg1s> ^-^hi: which repl?
[14:51:57] <^-^hi> python3
[14:52:16] <Yhg1s> ^-^hi: I can't reproduce what you're seeing, sorry. locals() would be an error after you delete __builtins__.
[14:52:25] <Yhg1s> ^-^hi: can you show what you're actually doing?
[14:54:14] <^-^hi> Yhg1s: https://asciinema.org/a/IVqy3NFZ3fGeJWd7QtJ6H21W8
[14:54:24] <^-^hi> horseplaying with python
[14:54:28] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[14:54:31] <lericson> (hard to not read asciinema as a variation of enema)
[14:54:41] *** Quits: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net) (Quit: This computer has gone to sleep)
[14:55:10] *** Joins: Enitin (~Enitin@82.102.22.84)
[14:55:11] <lericson> gloomy: no problem, but you should know that this is some questionable idea you got going :p
[14:55:40] *** Joins: slavaqq (~slavaqq@sdmail.sdserver.cz)
[14:56:03] *** Joins: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net)
[14:56:40] <gloomy> lericson: yeah this is a one-time use data ingestion thing. Code quality is terrible all around :-)
[14:56:41] <Yhg1s> ^-^hi: __builtins__ is normally the builtin module, but in the interactive interpreter, it can also be a dict with the builtins themselves. Since 3.8, if you delete __builtins__, the Python interactive interpreter restores a sensible __builtins__.
[14:58:53] <^-^hi> pretty nice there is a class named _sitebuiltins.Quitter
[14:59:39] <^-^hi> so when you quit, it shows it's __repr__, just for you to see a foolish message.
[14:59:46] *** Quits: czuk_cza (~mist@188.147.96.6.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[14:59:58] <Yhg1s> Yes. Because otherwise, if you printed it to see what it was, it would exit your program.
[15:00:29] <Yhg1s> Or, printed a dict, like the builtins namespace, that happened to contain it.
[15:01:02] <^-^hi> no i mean, quit() is to be used like a function
[15:01:19] <Yhg1s> Indeed it is.
[15:01:37] <^-^hi> and the rest is there just to show the message when you just write "quit"
[15:01:38] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 256 seconds)
[15:01:41] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[15:01:47] <kosh> why would you delete __builtins__ ?
[15:02:33] <^-^hi> couldn't it have just printed the damn line when the input is "quit" in the spartan C way instead of that complex arrangement?
[15:02:53] <lericson> don't bring the spartans into this
[15:03:01] <^-^hi> i really find it funny
[15:03:10] <Yhg1s> ^-^hi: because the idea of the interactive interpreter is that it is exactly like normal Python. Would you want 'quit' to not be allowed as a variable?
[15:03:37] <^-^hi> hmm... nice
[15:03:58] <lericson> also you'd have to make two such exceptions, ^-^hi, also one for exit
[15:04:34] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:05:19] <^-^hi> kosh: to entertain myself and satisfy my destruction urges
[15:05:34] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:05:36] * kosh sentences  ^-^hi to maintain the code
[15:07:07] * ^-^hi deletes its __builtins__ 
[15:07:45] <deniska> ^-^hi: also fun: adding your own stuff to builtins
[15:07:57] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[15:08:35] <^-^hi> would it make any difference for other people to notice?
[15:08:52] <lericson> also fun: __builtins__['True'] = False
[15:09:02] <deniska> lericson: doesn't work anymore
[15:09:11] *** Joins: AutomatedTester (uid395371@selenium/developer/AutomatedTester)
[15:09:13] <deniska> these are keywords now
[15:09:23] <lericson> what
[15:09:25] <lericson> in tarnation
[15:10:24] <^-^hi> why is _ None?
[15:10:39] <lericson> _ is the previous return value
[15:10:41] <lericson> very useful
[15:10:49] <^-^hi> hmm... nice
[15:10:59] <^-^hi> i think perl had a such a thing
[15:11:03] <lericson> $_ yes
[15:11:12] <lericson> javascript consoles in browsers also tend to have this
[15:12:10] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[15:12:37] *** Quits: k162 (k162@user/k162) (Ping timeout: 252 seconds)
[15:12:58] *** Quits: k162_ (k162@user/k162) (Ping timeout: 256 seconds)
[15:13:29] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[15:13:30] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:14:18] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:14:34] <^-^hi> could anything interesting be done with adding my own stuff to __builtins__?
[15:15:36] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[15:15:43] *** Joins: gggp (~textual@111.63.14.116)
[15:15:44] *** Joins: czuk_cza (~mist@188.147.96.6.nat.umts.dynamic.t-mobile.pl)
[15:16:07] <Yhg1s> ^-^hi: just that. adding builtin names. It's not a good idea, by and large.
[15:16:09] <habnabit_> ^-^hi, not without confusing your users
[15:16:37] <^-^hi> no, i mean for confusing my users and this kind of stuff
[15:17:31] <lericson> you could start adding emoji names to common built-ins
[15:17:58] <lericson> ðŸ–¨("hello world")
[15:18:00] <lericson> beautiful
[15:18:00] <^-^hi> could anything be done with that, that could not be done with simple redefinition? like if simply declare a function len, it would replace builtin len
[15:18:13] <^-^hi> lericson: yeahhh, that is a good idea
[15:18:15] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[15:18:15] <habnabit_> ^-^hi, #python tends to be fairly anti-confusion
[15:19:50] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[15:20:30] <lericson> ^-^hi: also, if you're into writing strange code, unicode has some pretty exciting properties when comparing strings
[15:20:51] <braxas> hi, is there some way to simplify unpacking of args for overloads? like say I have this:  https://bpa.st/4L5A - the only way I can think of implementing that function is basically to match args and kwargs conditions for each case, and then use lambdas to unpack and use them
[15:20:57] <braxas> is there something that makes this easier?
[15:21:10] <habnabit_> braxas, simpler: don't use overloads
[15:21:23] <braxas> yeah
[15:21:39] <braxas> let me do that
[15:22:24] <habnabit_> braxas, there's `singledispatch` for things like operator overloading, but i strongly suggest avoiding overloading whenever possible. python doesn't make it easy
[15:22:43] <braxas> will check out singledispatch
[15:23:03] <habnabit_> braxas, @overload is specifically for dealing with functions that have thorny signatures, _not_ generalized method overloading
[15:23:20] *** Joins: molt (~molt@178-223-40-94.dynamic.isp.telekom.rs)
[15:23:58] <habnabit_> braxas, because python's typing system is not very good and functions have long had signatures which would require dependent typing to resolve (without overgeneralizing)
[15:24:06] <^-^hi> lericson: like similar looking but numerically different letters you mean?
[15:24:52] *** Joins: cdown_ (~cdown@163.114.131.1)
[15:24:58] <habnabit_> braxas, but, again, singledispatch is more for operator overloading. you're varying the arity here too
[15:26:08] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[15:27:32] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 252 seconds)
[15:27:44] *** cdown_ is now known as cdown
[15:29:58] *** Joins: fdan (~fdan@103.215.168.1)
[15:30:07] *** Quits: lua (~ed@101.53.218.157) (Quit: WeeChat 2.8)
[15:30:34] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[15:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[15:30:45] *** Quits: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Quit: Leaving)
[15:30:50] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:17] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[15:33:22] *** Quits: shad (~shad@user/shad) (Ping timeout: 256 seconds)
[15:33:51] *** Quits: gggp (~textual@111.63.14.116) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:33:56] *** Quits: pycode (~pycode@2001:b07:5d28:551:ff3a:ecbc:dcbe:bbdd) (Ping timeout: 256 seconds)
[15:34:37] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[15:34:40] *** Quits: arseru (uid515527@user/arseru) (Quit: Connection closed for inactivity)
[15:36:47] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[15:36:48] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[15:37:27] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[15:38:26] *** Quits: chance (~chance@user/chance) (Quit: Client closed)
[15:38:32] *** Joins: Pixi_ (~Pixi@user/pixi)
[15:41:52] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 256 seconds)
[15:44:17] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[15:45:37] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[15:47:26] *** Quits: Abrax (~Abrax@user/abrax) (Remote host closed the connection)
[15:47:45] *** Joins: Abrax (~Abrax@user/abrax)
[15:48:34] *** Joins: arinov (~arinov@31.142.36.176)
[15:48:40] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[15:48:42] *** Quits: Abrax (~Abrax@user/abrax) (Read error: Connection reset by peer)
[15:51:54] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[15:54:14] *** Joins: white_shadow (~white_sha@user/white-shadow/x-1132694)
[15:54:40] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[15:56:37] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[15:56:41] <az> hey, I've created a lib and used with statement inside another file to call it. now I've two files on with the lib and one using methods from the lib class. Is there a better way to do it without having the "with statement" in every call? https://dpaste.org/Bb7U
[15:57:00] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[15:58:06] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[15:59:54] *** Joins: pycode (~pycode@2001:b07:5d28:551:202e:45ad:12f2:f1a2)
[15:59:59] *** Joins: Abrax (~Abrax@user/abrax)
[16:01:08] *** Quits: junktext (~junktext@77.247.181.219) (Ping timeout: 256 seconds)
[16:01:33] <nedbat> az: in that paste, what's an example of a with you;d like to avoid?
[16:01:41] *** Joins: lalitmee_ (~lalitmee@180.94.32.164)
[16:02:05] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[16:02:33] *** Joins: daoudr (~daoudr@178.197.197.112)
[16:02:33] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:03:55] <az> nedbat, I want to move with to the lib file not have to put in each call I make from the get_results file
[16:04:19] *** Quits: lalitmee__ (~lalitmee@180.94.32.179) (Ping timeout: 252 seconds)
[16:06:10] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[16:06:26] <nedbat> az: the example on line 17 is using with on a function that isn't defined in this paste, so it's hard to know.
[16:09:43] *** Joins: m4r35n357 (~m4r35n357@host-92-20-120-36.as13285.net)
[16:11:32] <az> nedbat, here is the one import bchrpc_pb2_grpc as bchrpc https://dpaste.org/uvi3
[16:13:06] <nedbat> az: is line 17 in the original paste one that you are interested in changing?
[16:14:37] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[16:16:07] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi)
[16:16:47] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 245 seconds)
[16:17:16] <az> nedbat, my idea is to have the with statement outside the get_result.py file if possible. I could only do it with having it inside every method in the bchd_gprc_lib.py file
[16:17:37] <nedbat> az: i've asked twice now: which with statement are you talking about?
[16:17:58] <az>     with grpc.secure_channel(grpc_server, grpc.ssl_channel_credentials()) as channel:
[16:17:58] <az>         stub = bchrpc.bchrpcStub(channel)
[16:18:14] <az> yeah the one in line 17
[16:18:14] <nedbat> az: i don't see where secure_channel is defined.
[16:18:15] *** Quits: digilink (~digilink@user/digilink) (Quit: WeeChat 3.2)
[16:19:08] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[16:19:27] <braxas> habnabit_: thanks, I will just avoid it, not worth the hassle
[16:19:42] <az> https://grpc.io/docs/guides/auth/#python
[16:19:42] <braxas> Is there some package that provides mime type constants?
[16:19:47] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[16:19:51] <nedbat> az: hmm, it's from grpc.  they don't use with in their examples: https://grpc.io/docs/languages/python/quickstart/
[16:20:12] <az> yeah
[16:20:48] *** Joins: Atque (~Atque@user/atque)
[16:20:50] <az> maybe but the example I'm copying from used it. https://github.com/gcash/bchd/blob/master/bchrpc/documentation/client-usage-examples/python-grpc/address_subscription.py
[16:21:04] *** Joins: upsala (~zcb@185.213.155.160)
[16:21:07] *** Joins: lalilulelo (~lalilulel@177.72.97.74)
[16:22:34] *** Quits: Enitin (~Enitin@82.102.22.86) (Remote host closed the connection)
[16:22:37] *** Joins: shad (~shad@user/shad)
[16:23:01] *** Quits: white_shadow (~white_sha@user/white-shadow/x-1132694) (Quit: Leaving)
[16:23:07] *** Quits: lxwulf (~lxwulf@user/lxwulf) (Quit: Leaving)
[16:23:19] *** Joins: Enitin (~Enitin@82.102.22.86)
[16:23:34] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[16:24:34] *** Joins: digilink (~digilink@user/digilink)
[16:25:14] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:b0be:17f0:a0d:c827)
[16:25:55] *** Quits: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net) (Quit: This computer has gone to sleep)
[16:30:01] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[16:31:05] *** Quits: dreamer (~dreamer@user/dreamer) (Ping timeout: 248 seconds)
[16:31:10] <nedbat> az: you could define a decorator to handle that for you perhaps. I don't know what more functions would look like
[16:34:39] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[16:35:23] <az> thanks, will check that
[16:35:38] *** Quits: op0x0f05 (uid512716@id-512716.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:08] *** Joins: dreamer (~dreamer@user/dreamer)
[16:37:30] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[16:37:33] *** Joins: raxor2k (~raxor2k@78.158.248.158)
[16:38:18] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: The Lounge - https://thelounge.chat)
[16:38:49] *** Joins: kenoba (~kenoba@user/kenoba)
[16:38:58] *** Quits: czuk_cza (~mist@188.147.96.6.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[16:39:51] <raxor2k> when i get int from rows in db(using sqlalchemy), they are added to a list like this:  [(5,), (14,), (16,)], why it does that, i dont know, but is there a command to remove those commas and tuples ?
[16:40:08] <raxor2k> i also tried: list.append(int(i)) but didnt help ..
[16:40:39] *** Joins: y1n (~y1n@84-115-64-32.wifi.dynamic.surfer.at)
[16:41:48] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[16:42:44] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:43:22] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 252 seconds)
[16:43:55] <habnabit_> raxor2k, [x for [x] in rows]
[16:44:34] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:45:23] *** Joins: legola (~legola@46.235.100.27)
[16:45:51] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:45:56] <raxor2k> habnabit: "cannot unpack non-iterable int object"
[16:46:07] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[16:46:25] <habnabit_> raxor2k, then that list isn't the list you pasted above
[16:46:42] <raxor2k> habnabit: yes it is ?
[16:46:47] <habnabit_> raxor2k, prove i
[16:46:49] <habnabit_> t
[16:48:39] <raxor2k> habnabit: i solved it in another way, had to do something with the crud query code
[16:48:51] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[16:50:08] *** Quits: portalrat (~portalrat@user/portalrat) (Quit: Leaving)
[16:52:14] *** Quits: shutnoshut (~shutnoshu@ec2-52-29-68-122.eu-central-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[16:52:37] <az> nedbat, I've came up with this now. much shorter. https://dpaste.org/6Bhy can I go and brag about it or not yet :D
[16:54:55] *** Quits: arinov (~arinov@31.142.36.176) (Ping timeout: 252 seconds)
[16:55:27] <az> :/ seems like I will have issues with functions with arguments
[16:55:38] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[16:55:46] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:56:31] *** Joins: p-i- (~Ohmu@223.206.69.159)
[16:57:12] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[16:59:52] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.69-159.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[17:00:07] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[17:01:24] *** Joins: goldfish (~goldfish@user/goldfish)
[17:02:41] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[17:04:01] *** Joins: shutnoshut (~shutnoshu@ec2-52-29-68-122.eu-central-1.compute.amazonaws.com)
[17:05:01] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[17:05:52] *** Quits: shailangsa (~shailangs@host86-186-127-196.range86-186.btcentralplus.com) (Ping timeout: 252 seconds)
[17:11:42] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[17:12:00] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:12:28] *** Quits: digilink (~digilink@user/digilink) (Quit: WeeChat 3.2)
[17:15:04] <az> should I be doing something like this https://stackoverflow.com/questions/5929107/decorators-with-parameters?
[17:15:14] <az> https://stackoverflow.com/questions/5929107/decorators-with-parameters
[17:15:46] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[17:16:19] *** Joins: ferz (~ferz@93-39-142-17.ip76.fastwebnet.it)
[17:16:23] *** Joins: pycurious (~Adium@user/pycurious)
[17:16:58] *** Joins: portalrat (~portalrat@user/portalrat)
[17:17:04] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:b0be:17f0:a0d:c827) (Ping timeout: 256 seconds)
[17:17:36] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:18:01] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[17:18:09] *** Joins: thiras (~thiras@user/thiras)
[17:18:42] *** Joins: lalitmee__ (~lalitmee@180.94.33.161)
[17:18:46] *** Joins: digilink (~digilink@user/digilink)
[17:19:38] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[17:19:55] *** Joins: shad (~shad@user/shad)
[17:20:05] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[17:20:58] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 240 seconds)
[17:21:10] *** Quits: lalitmee_ (~lalitmee@180.94.32.164) (Ping timeout: 240 seconds)
[17:21:41] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:22:37] *** Quits: kungp (~kungp@h-46-59-2-200.A230.priv.bahnhof.se) (Quit: Leaving)
[17:23:17] *** Quits: anorthall (~anorthall@user/anorthall) (Quit: Goodbye!)
[17:24:08] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f)
[17:24:28] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:26:20] *** Quits: y1n (~y1n@84-115-64-32.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[17:26:20] *** Joins: anorthall (~anorthall@user/anorthall)
[17:26:29] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:26:32] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[17:29:02] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[17:29:36] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[17:31:02] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:31:05] *** Joins: paul424 (~tom@apn-95-40-182-140.dynamic.gprs.plus.pl)
[17:31:38] <paul424> Hello, hello I want to teach children python programming , >_< what module for graphics ,I want to demonstrate fractals and maybe simple games .....
[17:31:43] *** Joins: shailangsa (~shailangs@host86-186-132-44.range86-186.btcentralplus.com)
[17:32:42] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[17:33:04] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:33:18] *** Joins: vladoski (~vladoski@2001:b07:add:d406:3dd8:8e4d:1ec3:93a6)
[17:33:40] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[17:35:23] *** Joins: czuk_cza (~mist@188.147.96.6.nat.umts.dynamic.t-mobile.pl)
[17:35:32] *** Joins: pyer33 (~Guest5@2402:7500:57a:e6d4:dc97:d16d:4704:f0f7)
[17:35:33] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi)
[17:35:53] <pyer33> hi all
[17:36:03] *** Joins: kungp (~kungp@h-46-59-2-200.A230.priv.bahnhof.se)
[17:36:38] *** Quits: Enitin (~Enitin@82.102.22.85) (Remote host closed the connection)
[17:37:25] <grym> paul424: turtle?
[17:37:28] <grym> probably turtle
[17:37:45] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f) (Quit: Leaving)
[17:38:20] *** Joins: Enitin (~Enitin@82.102.22.85)
[17:38:23] <paul424> for what age is turtle , grym ?
[17:39:19] <grym> paul424: it's based on LOGO -- which i first used when i was i think 6
[17:39:23] *** Joins: y1n (~y1n@84-115-64-32.wifi.dynamic.surfer.at)
[17:39:31] <grym> you'll need to be at least semi-literate, but that's about it
[17:39:40] <paul424> grym, hmm ok thanks
[17:40:10] <grym> paul424: for "simple games", have a look at pygame
[17:40:17] <paul424> oki
[17:40:31] *** Quits: kn10003 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 252 seconds)
[17:40:46] *** Joins: kn10003 (~kn100@wireguard/tunneler/kn100)
[17:41:25] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[17:42:13] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 252 seconds)
[17:42:46] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:43:31] <Celelibi> Hey guys, I was wondering, when was it decided that python2 support would end in 2020? How long a notice was given?
[17:43:41] <grym> Celelibi: like, a decade?
[17:43:56] <grym> the EOL was pushed back a few times too
[17:44:23] <Celelibi> ok
[17:44:41] <grym> ah, ok, 5 years: sunsetting was originally announced in 2015
[17:44:49] <grym> wait no i'm totally wrong
[17:44:57] <paul424> grym, for fractals the graphics.py  ?
[17:45:03] <grym> announced 2008 for a 2015 sunset, which was pushed back to 2020:
[17:45:04] <pyer33> There is one string "This website http://a.com have  http://a/b.jpg"  , how can I adding HTML <a href> Tag for http link?
[17:45:09] <grym> Celelibi: https://www.python.org/doc/sunset-python-2/
[17:45:38] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[17:45:52] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[17:46:01] <pyer33> expect result is  "This website <a href=http://a.com">  have  <IMG src=http://a/b.jpg>"
[17:46:49] <grym> paul424: i'm not sure what that means
[17:47:05] <habnabit_> pyer33, how about markdown
[17:47:39] <paul424> https://mcsp.wartburg.edu/zelle/python/graphics/graphics.pdf , grym for example
[17:47:58] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:48:58] *** Quits: molt (~molt@178-223-40-94.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[17:49:00] <grym> paul424: looks like a toy that goes along with an intro book
[17:49:02] <pyer33> habnabit_  excuse me, I am not familiar with markdown
[17:49:05] <grym> necer used it
[17:49:32] <habnabit_> pyer33, have you used github?
[17:49:50] *** Parts: JavaBean (~javabean@user/javabean) (No boundaries on the net!)
[17:50:07] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[17:51:10] <paul424> grym, would point by point drawing with such a library have sufficient speed ..., so what's the standard module for graphics in python ?
[17:51:42] <grym> paul424: depends on what you want to do graphically
[17:52:14] *** Quits: Elzington (~Elzington@68.235.43.110) (Quit: Leaving)
[17:52:26] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[17:52:29] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.2)
[17:52:42] *** Joins: JavaBean (~javabean@user/javabean)
[17:53:27] <pyer33> habnabit_  rare
[17:55:19] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[17:56:00] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[17:57:43] *** Joins: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net)
[17:58:16] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Read error: Connection reset by peer)
[17:59:36] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[18:00:14] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi) (Ping timeout: 250 seconds)
[18:00:19] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:02:22] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[18:02:41] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[18:05:19] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[18:05:41] *** Joins: Elzington (~Elzington@static-68-235-44-10.cust.tzulo.com)
[18:05:53] *** LabMonkey is now known as Mechanismus
[18:06:13] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[18:07:10] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[18:07:48] <lericson> psa: jupyter notebooks are very slow in Safari, and very fast in Firefox
[18:08:37] *** Quits: Cyberg33k (~Cybergeek@2-104-62-62-cable.dk.customer.tdc.net) (Quit: This computer has gone to sleep)
[18:09:37] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:6686:29f1:fad1:5647) (Quit: WeeChat 2.8)
[18:10:16] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f)
[18:10:49] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[18:11:55] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 252 seconds)
[18:12:27] *** Quits: pizdets (~pizdets@183.182.110.224) (Quit: pizdets)
[18:12:35] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[18:13:05] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[18:13:09] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[18:13:10] *** Joins: pizdets (~pizdets@183.182.110.224)
[18:13:32] *** Parts: JavaBean (~javabean@user/javabean) (No boundaries on the net!)
[18:14:39] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[18:15:40] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:3ce9:382b:2f39:4762) (Ping timeout: 240 seconds)
[18:16:14] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[18:16:52] *** Joins: wender (~Wender@189.15.175.212)
[18:16:56] <theprophet> guys can you tell me why requested toppings are highlighted like that? but still works? https://ibb.co/ts6JVN0
[18:17:42] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 256 seconds)
[18:18:35] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[18:18:51] <theprophet> anybody?
[18:19:10] <grym> theprophet: presumably your editor knows that it's a variable
[18:19:24] *** Quits: computeiro (~Wender@189.37.64.92) (Ping timeout: 256 seconds)
[18:19:42] <theprophet> @grym
[18:19:55] <grym> ... yes?
[18:19:57] *** Joins: korg815 (~korg815@user/korg815)
[18:19:58] <theprophet> @grym but i did same code for many times
[18:20:09] <theprophet> and this is the first time its highlighted like that
[18:20:20] <az> I've came up with this https://gitlab.com/uak/bchd-grpc-python-lib/ if someone can advice me on how to beautify it. I don't like how the query is long `x.call_channel(x.get_block_info_by_height)(block_height)` hopefully I can make it something like get_block_info_by_height(block_height) like hiding the decorator
[18:20:23] <Yhg1s> Did you use f-strings in those other cases?
[18:20:38] <Yhg1s> it may be your editor warning you about the fact that 'requested_topping' _could_ be undefined, if requested_toppings was empty.
[18:20:39] <theprophet> yes but with different name
[18:20:54] *** Joins: jinsun (~quassel@user/jinsun)
[18:21:02] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Client Quit)
[18:21:10] <theprophet> i am not using identical names for variables
[18:21:11] <grym> yeah, that's pycharms standard hinting for "variable may be unreferenced before use", iirc
[18:22:05] <theprophet> no matter what i write there its still highlited that way
[18:22:50] <Yhg1s> theprophet: well, using a differently named potentially-unnamed variable should still illicit the same warning, yes.
[18:23:06] <Yhg1s> theprophet: what about if you assign to the variable before the loop, or don't use for/else?
[18:23:22] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[18:24:03] *** Joins: VaniaPy (~VaniaPy@adsl-213.176.58.193.tellas.gr)
[18:24:17] <Yhg1s> eh, potentially-undefined rather.
[18:24:46] <jinsun> the for loop may never run so the loop variable may be undefined, vscode also warns about that
[18:25:22] <jinsun> (although here it is obvious that it will run, but the linter is not sso smart)
[18:26:16] <theprophet> it says name requested_toppings can be undefined
[18:26:29] <Yhg1s> theprophet: so it is the thing we're saying it is.
[18:26:32] <theprophet> jinsun yea
[18:26:40] *** Quits: y1n (~y1n@84-115-64-32.wifi.dynamic.surfer.at) (Ping timeout: 250 seconds)
[18:26:59] *** Joins: legola (~legola@46.235.100.27)
[18:27:14] <jinsun> so set to None before the loop, and check for None in the else
[18:27:29] <theprophet> ok thanks guys big thanks
[18:27:34] <theprophet> jinsun ok thank you
[18:27:45] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-48bc-d9bc-c2f0-e922.res6.spectrum.com)
[18:28:13] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[18:28:22] *** Joins: Naan` (~Naan@user/naan)
[18:28:59] *** Quits: ppang (~ppang@user/ppang) (Quit: Leaving)
[18:29:02] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[18:29:32] *** Joins: Enitin (~Enitin@82.102.22.86)
[18:30:01] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[18:30:04] *** Quits: Everything (~Everythin@37.115.210.35) (Ping timeout: 252 seconds)
[18:30:17] *** Joins: p-i-_ (~Ohmu@223.206.69.159)
[18:31:04] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:31:26] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 250 seconds)
[18:33:03] *** Quits: raxor2k (~raxor2k@78.158.248.158) ()
[18:33:52] *** Quits: p-i- (~Ohmu@223.206.69.159) (Ping timeout: 245 seconds)
[18:34:57] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:35:03] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[18:35:10] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[18:35:11] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:6181:b3c:b257:335c)
[18:35:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 245 seconds)
[18:36:34] <andi_> if i have a print() followed by a os.system() which prints stuff into the tty why do i see the stuff from os.system() before the print? even tho the print is before the call in my code?
[18:36:55] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:37:05] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f) (Quit: Leaving)
[18:37:08] <Yhg1s> andi_: usually because of buffering.
[18:37:17] <Yhg1s> (also, don't use os.system; use the subprocess module instead.)
[18:37:41] <andi_> yeah i will switch to the subprocess, i was just curious because i didn't expect the order to be different
[18:37:43] <VaniaPy> i'm doing a post request from the frontend and i'm getting instead of data some gibberish like this {data: "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta â€¦    \n        \n     </tbody>\n\n\n\n\n\n\n</body>\n</html>", status: 200, statusText: "OK", headers: {â€¦}, config: {â€¦}, â€¦}
[18:37:56] <VaniaPy> where should i check for the error?
[18:38:01] <VaniaPy> the status code is 200 btw
[18:38:47] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:38:53] <grym> VaniaPy: that doesn't look like gibberish
[18:39:17] *** Joins: junktext (~junktext@109.201.152.166)
[18:39:40] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[18:40:18] *** Joins: y1n (~y1n@84-115-64-32.wifi.dynamic.surfer.at)
[18:41:09] <VaniaPy> grym why
[18:41:53] <grym> VaniaPy: that looks like a dict
[18:42:51] *** Joins: magla (~gelignite@55d47635.access.ecotel.net)
[18:43:27] *** Quits: sturmmann (~sturmmann@user/sturmmann) (Ping timeout: 276 seconds)
[18:44:15] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[18:44:22] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[18:45:03] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[18:45:20] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:45:52] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[18:46:05] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[18:47:11] *** Quits: y1n (~y1n@84-115-64-32.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[18:47:55] *** Joins: akk (~akk@174-28-98-206.albq.qwest.net)
[18:50:38] *** Joins: Umpalumpa (~HolyTaint@gateway/tor-sasl/holytaint)
[18:52:13] <andi_> Yhg1s: the subprocess.run() would be the replacement for the os.system right?
[18:52:28] <Yhg1s> andi_: usually. it depends on what you want it to do.
[18:53:05] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:53:23] *** Parts: Umpalumpa (~HolyTaint@gateway/tor-sasl/holytaint) ()
[18:53:55] *** Joins: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint)
[18:54:02] <rendar> where i can find useful help to understand descriptors as method decorators?
[18:54:30] *** Quits: HolyTaint^ (~HolyTaint@gateway/tor-sasl/holytaint) (Ping timeout: 276 seconds)
[18:54:42] <varaindemian> Any idea why I the text inside the second file `WORDM_NEW_TEMPLATE` doesn't get changed? https://www.irccloud.com/pastebin/pc2HIpHw/bar.py
[18:55:03] <andi_> Yhg1s: i want to run msbuild and check the return code of msbuild
[18:55:23] <andi_> probably a popen
[18:55:27] *** Joins: georgios (~georgios@user/georgios)
[18:57:02] <Yhg1s> andi_: if you want to wait for it to finish, subprocess.run is usually most convenient.
[18:57:15] <Yhg1s> rendar: what do you mean by 'as method decorators'?
[18:57:39] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[18:58:05] <rendar> Yhg1s, time ago i learnt that decorator classes can be used as decorators of other classes' methods
[18:58:09] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[18:58:29] <Yhg1s> rendar: any callable object can be a decorator, yes.
[18:58:59] <rendar> but descriptors are not callable, usually
[18:59:00] <Yhg1s> however, if you want to decorate methods, don't bother. It's more trouble than it's worth.
[18:59:06] <rendar> i see
[18:59:10] <Yhg1s> descriptors are often callable, yes. All functions are descriptors.
[18:59:36] *** Quits: czuk_cza (~mist@188.147.96.6.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[19:00:11] *** Joins: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net)
[19:00:35] *** Joins: computeiro (~Wender@189.37.64.92)
[19:01:31] <rendar> Yhg1s, uhm, yes i saw that a normal function is a descriptor because `def f(): pass` then `f.__get__` will exists, but i can't get how that's possible, since i see descriptor mechanism in my mind to work only with classes, i mean: i get how descriptor mechanism works if i declare something at a *class* level, e.g. `class A: x = MyDescr()`, but a free function? can't get this.. and besides this, a normal descriptor is a class which implements __get__ and/or
[19:01:31] <rendar> __set__, and so usually it's not callable, per-se
[19:01:53] <Yhg1s> rendar: I'm not sure what's there to 'get'.
[19:01:54] *** Quits: wender (~Wender@189.15.175.212) (Ping timeout: 256 seconds)
[19:02:07] *** Parts: VaniaPy (~VaniaPy@adsl-213.176.58.193.tellas.gr) ()
[19:02:15] <Yhg1s> rendar: a descriptor is an object with a __get__, __set__ or __delete__ method. Function objects have __get__. They are descriptors.
[19:02:16] <rendar> Yhg1s, why a free function has a __get__ method?
[19:02:25] <Yhg1s> rendar: because it's how methods work.
[19:02:58] <rendar> methods of a class, yes! i get it.. there is __getattribute__, which checks __dict__ and so on
[19:03:06] <rendar> but a free function doesn't live inside a class...
[19:03:13] *** Joins: pycurious (~Adium@user/pycurious)
[19:03:36] <Yhg1s> rendar: it does when it's defined in a class body, or assigned to an attribute of the class object.
[19:04:12] <rendar> Yhg1s, if i have `def f(): pass` in my module, that's a free function not defined in a class body, still it has __get__
[19:04:16] *** hexeme is now known as ldlework
[19:04:26] <Yhg1s> rendar: yes.
[19:04:29] <rendar> why?
[19:04:43] <Yhg1s> rendar: because it's how methods work.
[19:05:15] <rendar> and how's that? why that f has __get__? how that's called? and when?
[19:05:36] <Yhg1s> rendar: I'm not sure what to say other than what I already have. __get__ is called when it's fetched from a class object.
[19:05:53] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi)
[19:05:55] <Yhg1s> rendar: 'def' creates a function. So does lambda. The type doesn't change depending on where it is defined.
[19:06:21] <HolyTaint> I need to run an async function in another process while already being in an async function, how could I do that?
[19:06:48] <rendar> Yhg1s, are you saying that if i have `def f(): pass` its __get__ is useful only when i pass that function inside a class body?
[19:07:36] <Yhg1s> rendar: no, I'm saying the *type* has the __get__ method in order for methods to work. The type doesn't care how you use the function, but that's how functions work.
[19:08:10] <rendar> Yhg1s, oh, the type, you mean the "function" type?
[19:08:32] <Yhg1s> yes. __*__ methods are defined on the type. The class.
[19:09:25] <rendar> so, i should think of `class function: ... def __get__(...` somewhere in the code, even if it doesn't exist like that because of C optimizations?
[19:09:44] <Yhg1s> rendar: yes, the function type has a __get__ method.
[19:09:51] *** Joins: DnzAtWrkV2 (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi)
[19:10:01] <rendar> i see
[19:10:39] <rendar> Yhg1s, another thing, why did you say that usually descriptors are callable if they usually aren't since you don't implement __call__ inside a descriptor?
[19:11:08] <Cheaterman> If I can write GUI apps using async idioms, I guess I should? Sorry, intentionally vague question, haha... I'm about to write a new little SDK for an API I made (amusingly Flask, not FastAPI, but I'll get there too) and I figured I'd write it in async, but the problem I'm having is that despite my original question, I'll probably have some synchronous GUI apps
[19:11:18] <Yhg1s> rendar: because *all functions are descriptors*, and functions *are* callable.
[19:11:35] <rendar> Yhg1s, ok, i see now
[19:11:44] <Yhg1s> rendar: so just from that you can see there are a lot of descriptors that are callable. Very likely the vast majority of descriptors in your program, and possibly even the only ones.
[19:11:50] <Cheaterman> Ignoring (again, intentionally) trio's guest mode, should I simply run an event loop on its own thread for those cases?
[19:12:37] <rendar> Cheaterman, i think your GUI framework should support async
[19:12:37] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi) (Ping timeout: 245 seconds)
[19:12:49] <Yhg1s> Cheaterman: I'm not aware of any GUI frameworks that are not async.
[19:12:58] <Cheaterman> rendar: it does, but I have apps coded on top of it
[19:13:01] <Yhg1s> Cheaterman: they are, by nature, event driven frameworks.
[19:13:07] <Cheaterman> those apps are usually not written in async fashion so far
[19:13:42] <rendar> Cheaterman, i think your framework should support classic python loop and asyncio loop
[19:13:49] <Cheaterman> Yhg1s: I mean async as in using an async event loop and coroutines, which Kivy doesn't by default (although it can run inside an event loop, it doesn't use async idioms otherwise)
[19:14:16] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:14:21] <Yhg1s> Cheaterman: if you mean "async functions and await", then sure, kivy is quite a lot older than those features.
[19:14:46] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2.1)
[19:14:50] <Cheaterman> rendar: as I said, it does, but I have apps coded on top of it that currently use the synchronous (blocking) method
[19:15:04] <rendar> i see
[19:15:10] <rendar> so what is the problem?
[19:15:23] <Cheaterman> although I suppose conceptually it should be as easy as replacing a single function code, in practice those apps might be very complex and have plenty caveats
[19:15:28] <rendar> the old apps coded on top of this which uses sync methods won't use async event loop
[19:16:06] <Cheaterman> rendar: Mostly a question - should I write my SDK thingy using async idioms, and if so, should I just create an event loop in a separate thread to run it from otherwise blocking apps?
[19:17:05] <Cheaterman> Or in short, will my fancy new async SDK be compatible with my old blocking apps with minimum hassle
[19:17:08] <rendar> Cheaterman, if i were you, i'd have kivy (the classic old library) and asynckivy (the new one supporting asyncio), and if someone who coded a very big app wants async and coroutines, will do the porting, otherwise it will use old fashioned kivy
[19:17:53] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:18:15] <Cheaterman> Kivy already supports both, it's simply a matter of not calling run() but rather scheduling async_run()
[19:18:17] *** Joins: mickey (~user@user/mickey)
[19:18:49] <Cheaterman> I'm asking about the SDK I'm writing, if I'm trying to use it from old apps that aren't otherwise using an async event loop, should I make a threaded event loop or port the app? AIUI you're saying I should port the app
[19:18:50] <rendar> Cheaterman, ok, far enough, but i don't know if that's possible having it with minimum hassle
[19:19:24] <Cheaterman> rendar: I've been running event loops in threads successfully, I'm just not sure if it's a good approach at all, or if it's frowned upon for some reason
[19:19:27] <rendar> i'd port the app, threaded event loop is not a good idea
[19:19:36] <Cheaterman> and/or if there's a better way to use my async SDK from sync land
[19:19:49] <Cheaterman> and/or if I should simply not write my SDK in an async fashion in the first place, possibly
[19:19:59] <Cheaterman> rendar: I see, thanks
[19:20:03] <rendar> you use async stuff to not have to deal with threads, basically, that the *purpose*
[19:20:09] <Cheaterman> Totally agreed
[19:20:16] <Cheaterman> Then again that's my point about those old apps, they DO use threads
[19:20:18] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:20:35] <rendar> it's their problem to adapt
[19:20:48] <Cheaterman> (mine - I'm the one who wrote them that way xD)
[19:20:53] <rendar> lol
[19:21:10] <rendar> then you should redesign them and using coroutines where you can avoid threads
[19:21:12] <rendar> that's all
[19:22:22] *** Quits: mickey (~user@user/mickey) (Client Quit)
[19:22:24] <Cheaterman> "where you can avoid threads" is a very interesting part of your sentence IMHO - you reckon threads could still make sense in some situations?
[19:22:44] *** Joins: mickey (~user@user/mickey)
[19:22:55] <Cheaterman> I have some actual blocking APIs to use to speak to hardware devices for example (these are Java, too... thank god for pyjnius)
[19:23:10] <Cheaterman> Those could/should remain threads?
[19:23:45] <Cheaterman> (closed source stuff I can't rewrite, obviously - wouldn't even be Java otherwise)
[19:23:47] <rendar> Cheaterman, yes in some situations they still make sense, it depends
[19:24:35] *** Quits: ^-^hi (~nikw@user/-hi/x-1729478) (Ping timeout: 252 seconds)
[19:24:47] <rendar> Cheaterman, uhm, i don't know that specific case, but a blocking API is the classic thing asyncio would manage well
[19:24:53] <Cheaterman> So the way I see it, I should 1Â°) try to simply run my current Kivy apps inside trio and see if they work as-is, 2Â°) potentially rewrite the threaded parts (where applicable) to use coroutines, and 3Â°) make my magic SDK pure async?
[19:25:07] <Cheaterman> rendar: Isn't that literally the opposite of async?
[19:25:14] <Cheaterman> async is all about coroutines and non-blocking calls?
[19:25:22] <rendar> i'd go 2 for *sure* and maybe also 3
[19:25:30] <rendar> Cheaterman, yes
[19:25:39] <Cheaterman> 1/2/3 were steps :-) not separate options
[19:26:04] <Cheaterman> rendar: but that's my point, these functions *are* blocking
[19:26:26] <rendar> Cheaterman, multithreading = you have a restaurant and every threads does something, who cooks, who wait orders and so on, with async stuff you have a restaurant with only *one* employee who cooks while waiting orders, takes orders while spaghetti are cooking.. and so on
[19:26:52] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[19:27:19] <Cheaterman> It's a closed source Java API I'm accessing with pyjnius, and it's literally blocking, as in, the call blocks the current thread on I/O and I have no saying in that
[19:27:24] *** Quits: lalilulelo (~lalilulel@177.72.97.74) (Ping timeout: 256 seconds)
[19:27:30] <rendar> Cheaterman, you should write some piece of code that makes that blocking of those function to work with asyncio, so while it's blocked, asyncio does something else
[19:27:36] <rendar> if you can't do that, you must use threads
[19:27:43] <rendar> otherwise you'd block the entire asyncio loop
[19:27:46] <Cheaterman> OK, so the use of threads here is acceptable
[19:27:48] <rendar> and everything will freeze
[19:27:50] <Cheaterman> Which is good
[19:28:17] <rendar> Java API? how you would access them? with HTTP?
[19:28:33] *** Quits: DnzAtWrkV2 (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:28:34] <Cheaterman> I already answered that question, but I think there's a bunch of mixup
[19:28:46] <Cheaterman> API means Application Programming Interface, it doesn't have to involve HTTP endpoints
[19:28:49] <rendar> oh pyjnius..
[19:28:53] <rendar> i don't know it well, sorry
[19:28:55] <Cheaterman> In this case, it's just a bunch of Java precompiled classes
[19:28:55] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[19:29:00] <Cheaterman> Don't worry ^^ it works well
[19:29:07] <Cheaterman> Just, that code I can't change, and it very much blocks
[19:29:10] <Cheaterman> Hence the threading.
[19:29:14] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Client Quit)
[19:29:47] <Cheaterman> On the other hand - I'm also speaking of a SDK I'm about to write, for HTTP API endpoints that I wrote in Flask (not FastAPI yet lol - soon, soon!) and I was pondering the potential downsides for non-async-ready apps
[19:30:17] <Cheaterman> But then again non-async-ready apps should probably only be a couple lines away from being async-ready
[19:30:30] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[19:30:31] <Cheaterman> Other than all the threading going on, but that doesn't need to be rewritten if it works I guess
[19:30:49] <Cheaterman> So in a nutshell - there's basically no downside to making my brand new SDK async?
[19:31:16] <Cheaterman> Worst case scenario, people can either thread the event loop somehow, or just make their app async (which in my case, again, might not be that hard)
[19:31:19] <Cheaterman> ?
[19:31:27] <rendar> well i guess that you maybe are forced to use threadings with pyjinius
[19:31:40] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[19:31:58] <Cheaterman> It's not necessarily so much about pyjnius, it's more that the API is very much blocking
[19:32:10] <Cheaterman> They could be event-driven instead, with callback handlers and stuff
[19:32:22] <Cheaterman> But it's old Java crud :-)
[19:32:26] <rendar> Cheaterman, implementing async stuff in your framework, i guess it's not a few lines changes
[19:32:50] <Cheaterman> Which framework?
[19:32:55] <rendar> kivy
[19:33:20] <gitesh> does with classes comes unnecessary data?
[19:33:29] <Cheaterman> As I said: Â« Kivy already supports both, it's simply a matter of not calling run() but rather scheduling async_run()
[19:33:32] <Cheaterman> Â»
[19:33:44] <bjs> gitesh: define unncessary?
[19:33:45] <Cheaterman> run() being a blocking function and async_run being a task/coroutine
[19:34:02] <bjs> gitesh: if it's there it's there for a reason,  so no.  But maybe *you* don't need that information, so yes.
[19:34:11] <gitesh> for example , we i did `1` it's int 1 but it create an instance with x.img, x.real, x.whatever bjs
[19:34:30] <gitesh> bjs: yeah ok that was my question
[19:34:30] <bjs> gitesh: well x.imag and x.real are just the data of the number so they're not "unncessary"
[19:34:34] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[19:34:47] <Cheaterman> My question is related to discord.py for example, which is very much async and that sometimes seems to force people to jump through some hoops if using it in an otherwise blocking codebase
[19:35:35] <Cheaterman> (hence me talking about threading the event loop - I been jumping in the past...)
[19:35:45] *** Quits: pyer33 (~Guest5@2402:7500:57a:e6d4:dc97:d16d:4704:f0f7) (Quit: Client closed)
[19:35:55] *** Joins: reset (~reset@user/reset)
[19:36:36] *** Joins: roe_ (~mroe@216.164.247.250)
[19:37:17] <roe_> Can someone help remind me.  In a resent version of python3 they added the feature to type variables getting passed to a function.  I can't find the documentation on that
[19:38:01] <bjs> roe_: you mean to annotate them with a type?
[19:38:15] *** Joins: ^-^hi (~nikw@user/-hi/x-1729478)
[19:38:29] <Cheaterman> https://www.python.org/dev/peps/pep-0484/
[19:38:34] <bjs> roe_: https://docs.python.org/3/reference/compound_stmts.html#function-definitions is the docs for the entire `def` statement,  see the paragraph starting "Parameters may have an annotation of the form "
[19:38:36] <roe_> ah I think I found it.  It's a PEP release for typing
[19:38:49] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[19:39:15] *** Joins: Enitin (~Enitin@82.102.22.85)
[19:39:52] *** Quits: jdmark (~jdmark@67.8.137.130) (Read error: Connection reset by peer)
[19:40:39] <roe_> bjs: thanks
[19:42:51] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:4ca:f02d:d72:7385)
[19:43:12] *** Quits: devcpu (~rusty@d50-92-229-34.bchsia.telus.net) (Quit: leaving)
[19:43:43] *** Joins: zebrag (~chris@user/zebrag)
[19:43:46] *** Joins: devcpu (~rusty@d50-92-229-34.bchsia.telus.net)
[19:46:40] *** Quits: Abrax (~Abrax@user/abrax) (Read error: Connection reset by peer)
[19:47:23] *** Quits: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com) (Ping timeout: 250 seconds)
[19:47:34] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:47:36] *** Joins: shangxiao (~davids@124.187.193.187)
[19:48:16] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:49:11] *** Joins: lalitmee_ (~lalitmee@180.94.33.38)
[19:49:20] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[19:49:26] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[19:49:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Remote host closed the connection)
[19:49:54] *** Quits: magla (~gelignite@55d47635.access.ecotel.net) (Quit: Stay safe!)
[19:51:32] *** Quits: lalitmee__ (~lalitmee@180.94.33.161) (Ping timeout: 252 seconds)
[19:51:39] *** Joins: n1ceaf (~Mark_Pine@gateway/tor-sasl/markpinecone/x-88286818)
[19:52:55] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[19:54:29] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[19:55:01] *** Joins: pro_z (~pro_z@37.214.61.236)
[19:55:08] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Client Quit)
[19:57:00] *** Quits: n1ceaf (~Mark_Pine@gateway/tor-sasl/markpinecone/x-88286818) (Quit: Leaving)
[19:59:30] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:03:01] *** Quits: Naan` (~Naan@user/naan) (Quit: Leaving)
[20:04:33] *** Joins: P1ro_ (~quassel@user/p1ro)
[20:04:34] *** Joins: gulzar (~gulzar@123.201.116.114)
[20:05:10] *** Joins: heco (~redrum@user/redrum88)
[20:05:49] *** Joins: Mocramis (~mocramis@dalaran.sceen.net)
[20:05:56] <gulzar> Hi,. I have a dataframe with lots of columns and 100k rows. I need to apply np.dot(col1,col2,col3) on each row and save the output in other df[colname]. Can't figure out how to apply the formula on specific columns of each row.
[20:06:19] *** Quits: P1ro (~quassel@user/p1ro) (Ping timeout: 252 seconds)
[20:06:45] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[20:07:08] *** Joins: white_shadow (~white_sha@user/white-shadow/x-1132694)
[20:07:30] *** Joins: cth (~Cthulchu@193.194.107.250)
[20:09:09] <gitesh> so in order to sort a list of items , we need sorted key function return always a number?
[20:09:14] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[20:09:17] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[20:09:39] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[20:09:54] *** P1ro_ is now known as P1ro
[20:10:32] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[20:10:43] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[20:10:51] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[20:11:34] <Cheaterman> barely implemented a single func and I think I already love async
[20:11:35] <Cheaterman> in fact
[20:11:44] <Cheaterman> barely did a single async mistake and I already love trio
[20:12:05] <Cheaterman> "bro u trio.run a coro, surely u did coro(args) and u meant trio.run(coro, args) amirite?" - Yes, yes you are right!
[20:12:32] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:13:10] *** Quits: p-i-_ (~Ohmu@223.206.69.159) (Remote host closed the connection)
[20:13:37] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:13:46] *** Joins: p-i- (~Ohmu@223.206.69.159)
[20:14:51] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[20:19:31] *** Quits: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au) (Ping timeout: 252 seconds)
[20:20:48] *** Joins: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com)
[20:21:48] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[20:21:49] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:22:23] *** Joins: cheater (~Username@user/cheater)
[20:22:45] *** Quits: PaddyF (~PaddyF@user/paddyf) (Quit: bye)
[20:23:18] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:911a:795:c2cc:9f2c)
[20:23:25] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[20:23:30] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[20:24:02] *** Joins: n00b101 (uid448161@id-448161.lymington.irccloud.com)
[20:25:34] *** Quits: vladoski (~vladoski@2001:b07:add:d406:3dd8:8e4d:1ec3:93a6) (Quit: Textual IRC Client: www.textualapp.com)
[20:25:47] *** Joins: retrosenator (~retrosena@158.sub-174-216-5.myvzw.com)
[20:25:48] *** Joins: Hax0r (~Hax0r@128.127.222.236)
[20:26:07] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[20:26:16] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[20:28:19] *** Quits: junktext (~junktext@109.201.152.166) (Ping timeout: 252 seconds)
[20:28:28] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Read error: Connection reset by peer)
[20:28:40] *** Joins: jdmark (~jdmark@67.8.137.130)
[20:29:37] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[20:29:53] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[20:33:02] *** Quits: bn_work (uid268505@id-268505.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[20:33:06] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[20:33:06] *** Quits: km (~km@2a01:4f9:c011:1979::1) (Remote host closed the connection)
[20:33:31] *** Joins: km (~km@2a01:4f9:c011:1979::1)
[20:33:32] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[20:33:53] *** Joins: Abrax (~Abrax@user/abrax)
[20:34:37] *** Joins: lalilulelo (~lalilulel@177.72.97.74)
[20:34:51] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:38:29] <shangxiao> gitesh: no, a key function should just return something that's comparable
[20:38:46] <shangxiao> eg the example here uses strings: https://docs.python.org/3/howto/sorting.html#key-functions
[20:40:36] <grym> gitesh: sorted([("foo","zebra"),("zed","apple")], key= lambda x: x[1]), for example, will put (zed, apple) first
[20:40:46] <grym> (because it's sorting on the string in the 1th index of the tuple)
[20:41:04] <grym> (and strings sort asciibetically)
[20:41:15] <grym> or, uh, unicodeabetically, but that's sillier to say
[20:41:28] *** Joins: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au)
[20:41:46] *** Quits: daoudr (~daoudr@178.197.197.112) (Quit: Leaving)
[20:43:25] <shangxiao> fun exercise, try: sorted([True, False, True, False])
[20:45:25] <grym> that makes sense
[20:45:32] <grym> (but i know the party trick already)
[20:45:46] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[20:46:13] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[20:46:18] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[20:46:29] *** Joins: theprophet (~theprophe@85.114.228.184)
[20:47:24] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[20:47:29] <grym> shangxiao: but, what about sorted([True, False, True, False])[::-True]  :)
[20:47:37] *** Joins: dutch (~DutchIngr@user/dutch)
[20:47:40] *** Quits: lalitmee_ (~lalitmee@180.94.33.38) (Ping timeout: 240 seconds)
[20:48:09] *** Joins: Betal (~Betal@user/betal)
[20:48:24] <shangxiao> yeah that's more for gitesh but yeah :)\
[20:48:42] <Luke> any idea why I'm getting 'range is not defined' in Jinja2? My understanding was that `range` should be a jinja global builtin
[20:48:59] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[20:49:13] <Luke> According to https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-globals.range I should just be able to do `{% for x in range(n) %}` but it's not happy about that
[20:49:28] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[20:50:10] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[20:55:00] *** Joins: kosh (~kosh@user/kosh)
[20:56:08] *** Quits: gulzar (~gulzar@123.201.116.114) (Quit: Konversation terminated!)
[20:57:16] *** Joins: k162 (~k162@user/k162)
[20:58:20] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[20:59:45] *** Quits: white_shadow (~white_sha@user/white-shadow/x-1132694) (Ping timeout: 250 seconds)
[21:00:52] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[21:01:00] <shangxiao> Luke: we'd probably need to see some code pasted into https://bpa.st/+python to see how you're using it
[21:01:40] *** Quits: elkclone (~elkclone@user/elkclone) (Remote host closed the connection)
[21:02:05] *** Quits: paul424 (~tom@apn-95-40-182-140.dynamic.gprs.plus.pl) (Remote host closed the connection)
[21:02:51] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[21:02:58] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[21:04:09] <Luke> it's wrapped up in a flask app, I'm trying to isolate it now
[21:06:05] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:08:01] <Luke> ah tracked it down on the way; I was overriding `app.jinja_env.globals` and didn't realise the builtin functions were also stored there
[21:11:20] *** Joins: elkclone (~elkclone@user/elkclone)
[21:11:28] *** Joins: cidtest (~cidtest@185.156.172.203)
[21:12:12] <rendar> i have this https://bpa.st/5O6Q -- basically i must run DO STUFF only when that set has something inside, otherwise if it's empty, the coroutine must sleep, for now i have fixed it with a sleep of some fraction of a second, but it's very ugly, can i fix this?
[21:14:08] *** Quits: cidtest (~cidtest@185.156.172.203) (Client Quit)
[21:14:26] *** Joins: cidtest (~cidtest@89.238.185.211)
[21:16:05] <gitesh> refactor or rewrite classes , writing classes is more of an art than science
[21:16:36] <Cheaterman> hahahaha... one doesn't realize how annoying queues are until one's done dealing with them
[21:16:39] <Cheaterman> async is really awesome
[21:17:16] *** Quits: cidtest (~cidtest@89.238.185.211) (Client Quit)
[21:17:28] <teut> https://www.youtube.com/watch?v=ZpV3tel0xtQ
[21:17:57] <teut> I watched the video but I couldnt understand why do we need a metaclass in python?
[21:18:10] <teut> it looks like c++ templates exacyly
[21:18:13] <teut> exactly
[21:18:15] *** Joins: mattypants (~quassel@66-90-146-141.dyn.grandenetworks.net)
[21:18:15] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[21:18:46] <teut> in there it helps prevent the type()
[21:19:09] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:19:21] <teut> in there it helps to create a function with arbitrary types *
[21:19:25] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[21:19:26] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[21:19:32] *** Quits: Norore (~weechat@balder.ens.fr) (Quit: WeeChat 1.9.1)
[21:19:43] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[21:21:21] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[21:21:41] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[21:22:12] <bjs> rendar: see asyncio.Condition variables
[21:22:57] <treefrob> can someone point me to a github/lab project that could serve as a good example of how to lay out the project directory hierarchy?
[21:23:11] <bjs> teut: objects are instances of classes, right?  Well classes are objects too.  They are instances of their metaclass.
[21:23:13] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.2)
[21:23:36] <bjs> teut: for anything you want to do to an object that you have to define on the class, if you want to do the same thing to the class then you have to define it on the metaclass.
[21:23:42] <teut> interface in java?
[21:23:48] *** Joins: Skyfire (~pyon@user/pyon)
[21:23:51] <bjs> teut: huh?
[21:23:56] <teut> I mean metaclass is interface in java?
[21:23:59] <bjs> teut: no
[21:24:07] <bjs> teut: you know how an object an instance of some class yes?
[21:24:44] <teut> in python everything is of type "object"
[21:24:59] <teut> but "type" is of type "type"
[21:25:06] <teut> so not everything
[21:25:10] <bjs> teut: well not quite, everything is an instance of object but things have types that aren't object
[21:25:37] <bjs> teut: so the object 42 has type int.
[21:25:43] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[21:25:51] <bjs> teut: (it's also an instance of "object", since all objects in Python are)
[21:26:25] <bjs> teut: but `int` itself (the class) is also an object,  so it must have a type.  int's type is "type".  int is also an object, since all things in Python are objects. so int is also an instance of "object"
[21:26:28] <teut> how many types does python have?
[21:26:33] <teut> fundamentally?
[21:26:41] <teut> int, float, object?
[21:26:51] <bjs> teut: what do you mean by "fundamentally"
[21:26:55] <bjs> every class is a type
[21:28:13] <teut> every class of python is derived from the "object" class which is possibly written in c. is this correct?
[21:28:32] <bjs> teut: yes
[21:28:38] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[21:28:52] *** Quits: pycode (~pycode@2001:b07:5d28:551:202e:45ad:12f2:f1a2) (Ping timeout: 245 seconds)
[21:28:58] <teut> ok, so something I know correctly, now let me re-read it
[21:29:06] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[21:29:16] *** Joins: m1n10n (~r41d1n@cpe-76-184-204-251.tx.res.rr.com)
[21:29:54] <teut> class myclass(ABC):  @abstractmethod()def a(self):...
[21:30:09] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Remote host closed the connection)
[21:30:30] <teut> this is a metaclass/abstractclass or interface based on if it has a method implementation
[21:31:03] <bjs> teut: Python's ABCs are basically what Java call abstract classes (or interfaces,  Python merges the two into one thing).
[21:31:17] <teut> yes yes
[21:31:21] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[21:31:26] <bjs> teut: you are getting confused because abc *uses* metaclasses to implement the ABC class,  but metaclasses aren't *about* interfaces/abstract classes
[21:31:26] <teut> so I know atleast that part right
[21:31:39] <teut> correct
[21:31:48] <bjs> teut: are you telling me that I am correct? :P
[21:32:19] <teut> yes
[21:32:23] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[21:32:33] <bjs> teut: okay,  what question do you have then
[21:33:00] <teut> I m thinking that. My goal is to understand this metaclass feture
[21:33:23] <teut>  abc *uses* metaclasses to implement the ABC class
[21:33:36] <teut> this part is vague to me
[21:33:57] <teut> so you have a metaclasses and ABC derives from it
[21:34:01] <teut> ?
[21:34:01] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[21:34:29] <teut> oh right  (metaclass=ABC.meta)
[21:34:35] <teut> this is another syntax
[21:34:38] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[21:34:50] <teut> ABC.Meta  , I think it is
[21:37:14] <teut> at 59:39 in the video they show a good example
[21:38:16] *** Joins: pycurious (~Adium@user/pycurious)
[21:39:19] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:41:23] *** Joins: LuksNuke (~LuksNuke@2001:7e8:c066:6200:be85:8d95:5d9:f9da)
[21:42:01] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 252 seconds)
[21:42:04] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[21:43:13] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[21:43:22] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[21:43:24] <rendar> bjs, so your basic idea is to have a condition waiting, and another coroutine which adds something in that set, then perform a .notify() on that condition ?
[21:44:09] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:46:01] <bjs> rendar: that sounds like a good place to start
[21:46:06] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[21:46:09] <rendar> bjs, i see
[21:46:23] <bjs> teut: I mean, abc uses classes to define interfaces. it could just be a bunch of functions
[21:46:29] <bjs> teut: then it uses metaclasses to make the classes even nicer
[21:46:39] <teut> I got it finally
[21:46:56] *** Quits: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Remote host closed the connection)
[21:46:58] <teut> not the abc thing
[21:47:04] <bjs> teut: specifically abc.ABC wants to do checks every time a new class is made, i.e. each time a new instance of the (meta)class is created.
[21:47:07] <teut> but how its useful to django
[21:47:16] <bjs> so it has a metaclass whose __init__(or I guess __new__) does some checks
[21:47:20] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[21:47:54] *** Quits: retrosenator (~retrosena@158.sub-174-216-5.myvzw.com) (Read error: Connection reset by peer)
[21:48:05] <teut> so if you create a concrete class from an interface
[21:48:35] <teut> then the metaclass will take care of if you forgot to implement the abstractmethod
[21:48:57] <teut> Uploaded file: https://uploads.kiwiirc.com/files/b0f9923aa6ed9c5e1c63982029120f24/image.png
[21:48:58] *** Joins: Macuser (~Macuser@216.30.159.201)
[21:49:57] <bjs> teut: again the metaclass/class relationship is exactly the same as the class/instance relationship
[21:50:11] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[21:50:20] *** Joins: retrosenator (~retrosena@158.sub-174-216-5.myvzw.com)
[21:50:45] <teut> looks like a good point just not something a little difficult to absorb
[21:50:46] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[21:50:54] <teut> omit not
[21:50:56] <bjs> that's really all there is to it, it's not a very commonly needed feature and the only reason Python lets you set the metaclass for something is for when you need to do some fancy stuff with classes
[21:51:01] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[21:51:20] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[21:51:28] <aphysically> https://docs.python.org/3/library/sqlite3.html "When using multiple threads with the same connection writing operations should be serialized by the user to avoid data corruption." -> what do they mean by serialize in this context? just a threading lock would be fine right?
[21:51:32] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[21:51:42] <bjs> aphysically: yes that's what they mean
[21:52:02] <teut> whenever a class is created, a new class is created,  the "class instance"   not the classes instance  is modified by the metaclass
[21:52:10] <teut> by the __new__ method
[21:52:14] *** Joins: cidtest (~cidtest@89.238.185.210)
[21:52:16] <bjs> teut: the class itself *is* an instance.
[21:52:22] *** Quits: cidtest (~cidtest@89.238.185.210) (Client Quit)
[21:52:25] <bjs> teut: the `int` class is an instance of the `type` class, for example
[21:52:25] <teut> yes I understood
[21:52:40] <teut> type is a metaclass?
[21:52:45] <bjs> teut: yes
[21:52:56] <bjs> it's the default metaclass
[21:53:00] <teut> oh, what extra features does it adds to int?
[21:53:05] <teut> ok
[21:53:57] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[21:54:28] *** Quits: slavaqq (~slavaqq@sdmail.sdserver.cz) (Quit: Client closed)
[21:54:37] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f)
[21:54:40] *** Quits: ouzel8_ (~ouzel8_@shams.boastblast.com) (Remote host closed the connection)
[21:54:48] <hexnewbie> How frowned upon are packages without license on PyPI? If I accidentally uploaded a package to PyPI with no license (well, except in the source code; shame on me for not using testpypi), do I have to fix that immediately, or could I take my time and take few days to be more careful with it, so as to fill all the relevant metadata (such as homepage I have not made yet)?
[21:55:00] *** Joins: ouzel8_ (~ouzel8_@shams.boastblast.com)
[21:55:43] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:55:44] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[21:55:51] <Cheaterman> trio is great ; asks is great too. no wonder people fall in love with async
[21:55:53] <aphysically> I can lock reads too but I guess that's not needed
[21:56:19] *** Quits: szymon (~ugh@staticline-31-183-187-232.toya.net.pl) (Quit: szymon)
[21:58:22] <teut> thanks bjs
[21:58:53] <teut> understood quite a lot, just need to write some code more to get it completely
[21:59:08] *** Quits: teut (~teut@122.161.21.145) (Quit: Connection closed)
[22:00:05] *** Joins: pycode (~pycode@2001:b07:5d28:551:e16c:6ddf:f566:2c0d)
[22:00:14] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 252 seconds)
[22:01:58] <Cheaterman> Yaaaay my first async SDK \o/ https://gist.github.com/c8f85dd68e6b188b5701e1c13869c9ec
[22:02:08] <Cheaterman> I mean, it's not complete - but those endpoints are enough for one of our devices
[22:02:10] *** Joins: arinov (~arinov@31.142.36.176)
[22:02:30] <Cheaterman> The stream bit in particular is just <3 - that's the main reason I wanted to leave the blocking world in the first place...
[22:02:31] *** Joins: fanis30 (~fanis30@adsl-142.37.6.0.tellas.gr)
[22:03:13] *** Joins: maryo (~Maryo@user/maryo)
[22:04:02] <Cheaterman> the only tiny bit that annoys me is that asks isn't typed
[22:04:18] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:08:38] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:08:52] <Cheaterman> in fact trio's imported but unused - I used to have a small bit of main-guarded test code
[22:10:04] <Cheaterman> hexnewbie: I'm fairly sure it's fine, the general rule is "no license â†’ full Â©"
[22:10:21] *** Quits: maryo (~Maryo@user/maryo) (Read error: Connection reset by peer)
[22:10:23] <Cheaterman> only means nobody will want to use your code :-) but other than that I think you're fine
[22:10:44] *** Joins: maryo (~Maryo@user/maryo)
[22:13:26] *** Joins: imakestuff (~imakestuf@197.156.111.150)
[22:16:46] *** Joins: ledtc (~ledtc@h-94-254-66-235.A216.priv.bahnhof.se)
[22:18:52] *** Joins: odoood (~odoood@c-73-184-143-53.hsd1.ga.comcast.net)
[22:19:01] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[22:19:03] *** Joins: greedom (~greedom@2001:16b8:32f5:9c00:b659:24eb:b171:6faf)
[22:22:55] *** Joins: legola (~legola@46.235.100.27)
[22:24:12] *** Quits: retrosenator (~retrosena@158.sub-174-216-5.myvzw.com) (Ping timeout: 256 seconds)
[22:24:36] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.2)
[22:24:53] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[22:25:26] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 250 seconds)
[22:25:59] *** Joins: legola (~legola@46.235.100.27)
[22:26:25] *** Joins: noarb (~noarb@user/noarb)
[22:27:05] *** Joins: theprophet (~theprophe@85.114.228.184)
[22:29:06] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.2)
[22:29:25] <ledtc> Pip throws error:      sys.stderr.write(f"ERROR: {exc}")
[22:29:35] <ledtc> why ? google aint helping
[22:30:29] *** Quits: legola (~legola@46.235.100.27) (Ping timeout: 252 seconds)
[22:31:16] *** Quits: jjasghar (~quassel@user/jjasghar) (Ping timeout: 272 seconds)
[22:32:39] <kline> ledtc, can you put the full error here? https://bpa.st/+python
[22:32:42] <kline> include the traceback
[22:34:00] *** Joins: slee (~slee@user/slee)
[22:34:16] <ledtc> https://bpa.st/6QQA
[22:34:27] <ledtc> kline ^
[22:35:01] <ledtc> pip install flask was the command
[22:35:09] <slee> hi, i'm using asyncio to trigger a routine every 5 mins....now i need a separate timer to run a different routine...is it possible to use 2 separate timers?
[22:35:26] <kline> ledtc, pip --version
[22:35:41] <ledtc> same error
[22:35:48] <kline> python --version
[22:35:51] *** Joins: somlis (~somlis@user/somlis)
[22:36:06] <ledtc> 3.5.2
[22:36:25] <ledtc> slee Should be able to start another _thread ?
[22:36:40] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 240 seconds)
[22:37:08] <kline> ledtc, f-strings appear to have been adopted only in python 3.6
[22:37:11] <kline> https://www.python.org/dev/peps/pep-0498/
[22:37:42] <ledtc> i do have python3.9 aswell
[22:38:01] <kline> you should move to using python 3.9 more broadly then i guess
[22:38:20] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:38:33] <kline> how you move between interpreter versions will depend on your environment (os, distro, etc)
[22:38:41] *** Joins: junktext (~junktext@109.201.152.179)
[22:38:43] *** Quits: maryo (~Maryo@user/maryo) (Quit: Leaving)
[22:39:01] <ledtc> I dont understand how that help
[22:39:09] <ledtc> i tried python3.9 get-pip.py
[22:39:15] <ledtc> but it throws zlib missing
[22:39:19] <ledtc> but zlib is installed
[22:39:43] <kline> ok, so youve managed to install a version of pip that requres 3.6+, but by default your environment is using 3.5
[22:39:56] <kline> if you have 3.9, you might want to try making 3.9 the default
[22:40:03] <ledtc> how ?
[22:40:12] <kline> this depends on your environment
[22:40:19] <ledtc> ubuntu ish
[22:40:25] <kline> -ish?
[22:40:26] <ledtc> its a chromebook
[22:40:31] <kline> ok
[22:41:30] <ledtc> but its flashed. but its basicly ubuntu i think
[22:41:31] <kline> ledtc, try asking in #chromium-os (but its a small channel, it might take a while to get an answer)
[22:41:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:41:34] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[22:41:37] *** Joins: magla (~gelignite@55d47635.access.ecotel.net)
[22:41:49] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[22:41:49] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:42:05] <ledtc> how would you set 3.9 to default in ubuntu ?
[22:42:11] <kline> you can try #ubuntu as well but you might need to be savvy in asking the right questions so that people dont just say "fuck that" when they realise you're asking ubuntu people for chromeos suport
[22:42:18] <kline> well, like i said, give it a shot at #ubuntu
[22:42:25] <kline> best of luck
[22:43:19] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[22:45:28] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[22:46:24] <akk> What I've done when I want a different default python is make a symlink ln -s /usr/bin/whatever ~/bin/python
[22:46:27] *** Joins: olbat (~olbat@user/olbat)
[22:46:39] *** Quits: n00b101 (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[22:46:57] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[22:47:06] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:47:08] <akk> and then the same for python3 ... this assumes that you have a ~/bin that's in your path, which is useful anyway if you don't already do that.
[22:47:23] <kline> akk, right or wrong, python version management is sufficiently complex(ified) in systems to warrant checking with the upstream how they do it
[22:47:24] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[22:48:36] <akk> kline: I wasn't clear where ledtc's 3.9 came from, whether it was a distro package that might have a distro-specific way of making it default.
[22:48:57] <Cheaterman> I don't really know if I like my check_response() thing, but raise_with_status() is not quite what I want either
[22:49:06] <akk> update-alternatives works for some things, but on the ubuntu I'm running, python versions don't seem to be included in update-alternatives.
[22:50:23] <Cheaterman> That's actually correct I'm afraid - all the times I wanted to make a clean setup for these things, I had to add the alternative category myself, then the entries I wanted
[22:51:10] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[22:51:17] <Cheaterman> ledtc: BTW, the simplest option IME (but not the best if you insist on it being system-wide for some reason) is to use a shell alias
[22:53:31] *** Quits: pycode (~pycode@2001:b07:5d28:551:e16c:6ddf:f566:2c0d) (Ping timeout: 252 seconds)
[22:54:48] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:55:16] <ledtc> akk I think update-alternatives will work. as 3.9 is now default. But i think my virtual venv has had a stroke i need to recreate it
[22:56:08] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f) (Quit: Leaving)
[22:56:14] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[22:56:25] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f)
[22:57:47] <newdimension> Selenium question, I have a page with two scroll bars. How do I pick the one I want to scrolldown?
[22:57:51] *** Joins: cebor (~cebor@user/cebor)
[22:59:42] *** Joins: khrbt (~znc@user/khrbt)
[23:00:30] *** Joins: wolfgang (~wolfgang@101.174.6.197)
[23:01:17] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[23:06:33] *** Quits: cashew (~cashugh@user/cashew) (Quit: bye)
[23:07:59] *** Quits: imakestuff (~imakestuf@197.156.111.150) (Remote host closed the connection)
[23:08:37] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[23:09:28] *** Quits: arinov (~arinov@31.142.36.176) (Ping timeout: 252 seconds)
[23:09:28] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[23:09:31] *** Quits: greedom (~greedom@2001:16b8:32f5:9c00:b659:24eb:b171:6faf) (Remote host closed the connection)
[23:10:21] *** Joins: greedom (~greedom@2001:16b8:32f5:9c00:b659:24eb:b171:6faf)
[23:10:25] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[23:12:40] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 240 seconds)
[23:17:40] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Ping timeout: 240 seconds)
[23:17:56] *** Quits: krab (~crabhi@ip-213-220-240-133.net.upcbroadband.cz) (Quit: Leaving)
[23:18:51] *** Joins: Guddu (~Guddu@190.84.88.92)
[23:18:56] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[23:19:16] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[23:21:22] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 240 seconds)
[23:24:37] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:26:38] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[23:27:54] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[23:28:33] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[23:28:48] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 256 seconds)
[23:28:55] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[23:29:45] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[23:31:54] <ledtc> anyone els having problems making python3.9 find zlib ?
[23:33:05] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[23:34:00] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[23:35:23] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[23:36:05] <nedbat> ledtc: did you build it yourself from source?
[23:36:28] <ledtc> nedbat nope
[23:36:37] <nedbat> ledtc: odd
[23:36:52] <ledtc> ohh shit i did
[23:37:18] <ledtc> how do i unfuck this ?
[23:37:31] *** Quits: Guddu (~Guddu@190.84.88.92) (Ping timeout: 252 seconds)
[23:38:26] *** Quits: greedom (~greedom@2001:16b8:32f5:9c00:b659:24eb:b171:6faf) (Remote host closed the connection)
[23:39:18] <nedbat> ledtc: re-install from someone else's build? Or install the zlib-whatever-dev package that's needed to support zlib
[23:39:38] <ledtc> nedbat its already installed
[23:39:46] <nedbat> ledtc: what is?
[23:39:50] <ledtc> Zlibv
[23:39:58] <ledtc> zlib-dev  *
[23:40:08] <nedbat> ledtc: maybe it wasn't when you built python?
[23:40:17] <ledtc> no dont think it was
[23:40:20] <ledtc> can i rebuild it ?
[23:40:24] <nedbat> ledtc: sure
[23:41:12] <ledtc> do i just redo the .configure thingie ?
[23:41:22] *** Quits: LuksNuke (~LuksNuke@2001:7e8:c066:6200:be85:8d95:5d9:f9da) (Ping timeout: 245 seconds)
[23:43:03] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[23:44:40] <nedbat> ledtc: i would start with "make distclean; ./configure" etc
[23:45:14] *** Quits: ferz (~ferz@93-39-142-17.ip76.fastwebnet.it) (Ping timeout: 256 seconds)
[23:45:47] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[23:45:48] <ledtc> i tried sudo apt-get install --reinstall python3.9
[23:46:05] <ledtc> and i got a new zlib error: AttributeError: module 'zlib' has no attribute 'crc32'
[23:46:17] <ledtc> wich gets even fewer googel results
[23:47:05] *** Joins: REHBhE02qmJNzm6 (~REHBhE02q@2600:2100:84:8010:34a9:3ecc:4518:4289)
[23:47:27] <nedbat> ledtc: i don't know anything about that way of installing python.
[23:47:40] <nedbat> ledtc: is that building from source?
[23:47:47] <ledtc> i dont know
[23:47:54] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[23:48:04] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[23:48:06] <ledtc> guess i could remove with purge ? and do apt-get install python3.9
[23:49:49] *** Joins: dre (~dre@2001:8003:c932:c301:693b:b827:4df9:b3e4)
[23:49:55] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[23:50:53] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:52:22] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 252 seconds)
[23:52:26] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[23:53:14] *** Joins: LuksNuke (~LuksNuke@2001:7e8:c066:6200:be85:8d95:5d9:f9da)
[23:54:15] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[23:54:17] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Remote host closed the connection)
[23:54:50] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[23:55:57] *** Quits: REHBhE02qmJNzm6 (~REHBhE02q@2600:2100:84:8010:34a9:3ecc:4518:4289) (Ping timeout: 256 seconds)
[23:56:14] *** Joins: teut (~teut@122.161.21.145)
[23:56:52] <Samian> Suppose you have a library of own. What's it called when you want to make so you can install it in a virtual environment so you can use it via import yourLibrary the same way we popular packages like import sys, import numpy, etc
[23:56:59] <Samian> "packaging" your program?
[23:58:21] *** Quits: teut (~teut@122.161.21.145) (Quit: Connection closed)
[23:59:14] <Samian> To me, turning a folder with random python scripts into one in which a user can install is the leap from amature to professional.  What's more professional. "copy and paste the folder over to use the code" or a nice git page on how to install the package? What is make shift bootleggish. The other is more slick and polished
[23:59:44] <Samian> *one is make-shift
