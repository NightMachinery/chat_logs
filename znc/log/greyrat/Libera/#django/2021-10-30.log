[00:06:23] *** Joins: dre (~dre@2001:8003:c932:c301:b2f8:56ee:c2d1:3969)
[00:17:13] <dre> what's the best way to make a custom user class / auth "thing" in django?
[00:18:10] <dre> I want to make a `class Resident(model)` to be the "primary user class" that is used in my app; and when it comes time for them to log in and etc; they only have to log in with their name and a pin code
[00:19:17] <dre> currently reading this: https://docs.djangoproject.com/en/3.2/topics/auth/customizing/#extending-the-existing-user-model
[00:19:26] <GinFuyou> What is "primary user class"? Django doesn't support multiple user models
[00:21:08] <dre> sorry, I meant the user model
[00:21:28] <GinFuyou> Well, it's still can be only one
[00:21:56] <GinFuyou> without some shamaning at least
[00:22:20] <GinFuyou> Otherwise not sure what is different from built-in user model?
[00:23:05] *** Joins: dre_ (~dre@120.156.30.159)
[00:23:08] <dre_> that was weird.
[00:23:20] <dre_> hexchat doesn't respond to ping requests apparently.
[00:25:58] *** Quits: dre (~dre@2001:8003:c932:c301:b2f8:56ee:c2d1:3969) (Ping timeout: 268 seconds)
[00:35:17] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[00:41:35] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[00:45:05] <bparker> GinFuyou: you can make multiple user models work pretty easily
[00:45:13] <bparker> I have like 4 different ones on a particular project
[00:45:20] <FunkyBob> why?
[00:45:33] <bparker> different sets of permissions for one
[00:46:06] <GinFuyou> reinventing auth.Group ?
[00:47:16] <bparker> also the setup is a bit complex where the database is shared among multiple django apps on different servers and not all of them use all the different user models, but the ones in common they share data with
[00:47:53] <hylje> sounds fun
[00:48:56] <duoi> bparker uh
[00:49:02] <duoi> you dont need to have different models for that...
[00:49:21] <duoi> there is an entire group and permissions engine that deals with that...
[00:49:44] <duoi> you can just have proxy models if you want different model methods or model manager methods to deal with different user types too
[00:53:04] <dre_> hey now don't tell the guy to rearchitect the whole thing
[00:53:21] <dre_> perhaps it's just easier to mash dumb shit together
[00:53:24] <dre_> :P
[00:54:49] <wallbroken> how to do Commit, rollback, into a django model database?
[00:54:58] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[00:55:02] <dre_> migrations?
[00:55:22] <wallbroken> do you know what a transaction is?
[00:55:28] <wallbroken> is a database concept
[00:55:37] <dre_> ok thanks
[00:55:46] <dre_> you want atomic
[00:55:47] *** Joins: dez (uid92154@user/dez)
[00:56:00] <dre_> thanks for using the right term in your query
[00:56:23] <FunkyBob> "transactions" is right there in the docs contents page
[00:56:29] <FunkyBob> https://docs.djangoproject.com/en/3.2/topics/db/transactions/
[00:56:59] <FunkyBob> "
[00:57:02] <FunkyBob> "Avanzate: Managers | SQL diretto | Transazioni | Aggregazioni |"
[00:57:09] <wallbroken> ok, thank you
[00:58:53] <duoi> FunkyBob when did you start leaning italian hah
[00:59:27] <duoi> Toucan is a nice little browser plugin I use, I think they support italian :P
[00:59:55] <FunkyBob> duoi: never, but wallbroken was a major reason for a team working on translating the django docs to IT
[01:00:02] <FunkyBob> actually, I did learn it a little in primary school
[01:00:17] <duoi> ah, thats cool
[01:08:05] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[01:08:09] *** Joins: masta_ (~oyster@user/masta/x-2645138)
[01:08:35] *** Quits: masta_ (~oyster@user/masta/x-2645138) (Client Quit)
[01:12:29] <bparker> duoi: you don't have the whole picture but thanks, I understand that.
[01:13:15] <FunkyBob> duoi: you are fluent in Italian?
[01:13:29] <duoi> bparker fair
[01:14:09] *** Quits: lazzurs (~lazzurs@user/lazzurs) (Quit: The Lounge - https://thelounge.chat)
[01:14:12] <duoi> FunkyBob not at all, im moderate in Spanish and can probably stumble my way through italian as a consequence
[01:14:19] <FunkyBob> ah
[01:15:50] *** Joins: lazzurs (~lazzurs@user/lazzurs)
[01:17:50] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:21:29] *** Quits: explore (uid233125@id-233125.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:45:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[01:47:48] *** Joins: fikran (~fikran@user/fikran)
[01:51:20] *** Joins: jabrahams (~jabrahams@user/josephabrahams)
[01:56:12] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[01:57:57] *** Joins: explore (uid233125@id-233125.hampstead.irccloud.com)
[02:03:23] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 264 seconds)
[02:11:29] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:13:44] *** Parts: zommKa (~ccctttmat@2001:470:69fc:105::b947) ()
[02:18:37] *** Joins: Rikem (~mike@user/rikem)
[02:23:47] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 264 seconds)
[02:45:56] *** Joins: djapo (~archangel@user/djapo)
[02:58:54] *** Quits: jabrahams (~jabrahams@user/josephabrahams) (Quit: Textual IRC Client: www.textualapp.com)
[03:03:15] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:21:33] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[03:23:08] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[03:30:03] *** Quits: fikran (~fikran@user/fikran) (*.net *.split)
[03:30:03] *** Quits: dez (uid92154@user/dez) (*.net *.split)
[03:30:03] *** Quits: hylje (~hylje@ponie.fi) (*.net *.split)
[03:30:03] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (*.net *.split)
[03:30:03] *** Quits: jug (~jug@user/jug) (*.net *.split)
[03:30:03] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[03:30:03] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[03:30:03] *** Quits: cebor_ (~cebor@user/cebor) (*.net *.split)
[03:30:03] *** Quits: beanzilla (beanzilla@user/beanzilla) (*.net *.split)
[03:30:03] *** Quits: MarkusH (MarkusH@django/moderator/MarkusH) (*.net *.split)
[03:30:03] *** Quits: chowmeined (~chowmeine@user/chowmeined) (*.net *.split)
[03:30:03] *** Quits: mpana (~mpana@193.226.149.49) (*.net *.split)
[03:30:03] *** Quits: Wooble (~Wooble@107.170.27.240) (*.net *.split)
[03:30:03] *** Quits: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) (*.net *.split)
[03:30:03] *** Quits: simplicity (~yti@user/simplicity) (*.net *.split)
[03:30:03] *** Quits: sa (sid1055@tinside.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: benjaoming (~benjaomin@37.139.19.237) (*.net *.split)
[03:30:03] *** Quits: Lartza (lartza@user/lartza) (*.net *.split)
[03:30:03] *** Quits: anorthall_ (~anorthall@user/anorthall) (*.net *.split)
[03:30:03] *** Quits: kiska (james@user/kiska) (*.net *.split)
[03:30:03] *** Quits: urth (~urth@geertswei.nl) (*.net *.split)
[03:30:03] *** Quits: jgee (~jgee@186.80.49.20) (*.net *.split)
[03:30:03] *** Quits: jasonbraganza (jasonbraga@user/jasonbraganza) (*.net *.split)
[03:30:03] *** Quits: pierrepaul (sid504261@uxbridge.irccloud.com) (*.net *.split)
[03:30:04] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[03:30:04] *** Quits: moldy (~rene@user/moldy) (*.net *.split)
[03:30:25] *** Joins: hylje (~hylje@ponie.fi)
[03:30:41] *** Joins: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d)
[03:30:42] *** Joins: benjaoming (~benjaomin@37.139.19.237)
[03:30:42] *** Joins: MarkusH- (MarkusH@django/moderator/MarkusH)
[03:30:54] *** Joins: kiska (james@user/kiska)
[03:31:06] *** MarkusH- is now known as MarkusH
[03:31:26] *** ChanServ sets mode: +v MarkusH
[03:32:01] *** Joins: deepy (deepy@user/deepy)
[03:32:03] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[03:32:07] *** Joins: jug (~jug@user/jug)
[03:32:13] *** Joins: urth (~urth@geertswei.nl)
[03:32:16] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[03:32:20] *** Joins: beanzilla (beanzilla@user/beanzilla)
[03:32:37] *** Joins: Lartza (lartza@user/lartza)
[03:32:39] *** Joins: mpana (~mpana@193.226.149.49)
[03:32:44] *** Joins: jasonbraganza (jasonbraga@user/jasonbraganza)
[03:32:48] *** Joins: cebor (~cebor@user/cebor)
[03:33:08] *** Joins: anorthall_ (~anorthall@user/anorthall)
[03:33:52] *** Joins: Wooble (~Wooble@107.170.27.240)
[03:34:33] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[03:35:15] *** Joins: simplicity (~yti@user/simplicity)
[03:38:36] *** Joins: AndrewYu (~andrew@user/andrewyu)
[03:40:53] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[03:44:58] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[03:48:07] *** Joins: djapo (~archangel@user/djapo)
[03:48:33] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:09:14] *** Quits: rje_ (~rje@65.141.156.170) (Ping timeout: 246 seconds)
[04:24:05] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 264 seconds)
[04:26:28] *** Joins: Eadwulf0 (~eadwulf@45.186.201.113)
[04:28:15] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 260 seconds)
[04:28:46] <Eadwulf0> Hello, friends.
[04:30:22] *** Quits: Eadwulf0 (~eadwulf@45.186.201.113) (Remote host closed the connection)
[04:30:43] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:34:51] *** Joins: Eadwulf0 (~Eadwulf0@45.186.201.113)
[04:35:12] *** Quits: tm007 (uid287041@id-287041.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:35:22] <Eadwulf0> I learning Django. I have a book (Django Unleashed) in which the author used Django 1.8. The las version of Django, is 3.2.
[04:35:30] <Eadwulf0> I am*
[04:36:26] <Eadwulf0> Is it that much the difference between the too versions?
[04:38:14] <FunkyBob> there are some differences, but the fundamentals shoiuld still work
[04:38:26] <FunkyBob> am curious why you've opted to start with a book, and not the official documentation
[04:38:30] <FunkyBob> that's up to date.
[04:44:27] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:44:42] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Read error: Connection reset by peer)
[04:46:42] <Eadwulf0> That's what I thought, but I wanted to be sure. And I'm more a book guy. I like to learn things in depth and in an orgined way. That's something a book can easily provide.
[04:47:07] <Eadwulf0> organized*
[04:48:11] <Eadwulf0> Have you been Django developer for long time?
[04:48:21] <Eadwulf0> What's your experience with the framework?
[04:49:15] <Rikem> Ditch the book.
[04:49:25] <Rikem> Use the updated documentation
[04:49:37] <Rikem> You will only end up confusing yourself
[04:54:08] *** Joins: The_Jag (~The_Jag@host-82-58-136-144.retail.telecomitalia.it)
[04:57:23] *** Quits: The_Jag_ (~The_Jag@host-87-14-224-44.retail.telecomitalia.it) (Ping timeout: 264 seconds)
[04:57:59] <Eadwulf0> Well, is there a more recent book that you guys can suggest me to read?
[04:59:20] <Eadwulf0> Something not like Django for Begginers. That is a too practical book; does not teach fundamentals.
[04:59:49] <Rikem> https://docs.djangoproject.com/en/3.2/intro/tutorial01/
[05:03:19] <Rikem> Also the tutorial by Mozilla I found to be very helpful
[05:03:39] <Rikem> https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django
[05:08:17] <Eadwulf0> Thanks, Rikem.
[05:10:40] <Rikem> Once you start building something and asking the relevant questions in here you will discover an almost inexhaustible fountain of knowledge
[05:13:00] <dang`r`us> I mean in theory you could read the old book and then go through all release notes since then
[05:13:42] *** Joins: rje (~rje@50.35.241.164)
[05:14:00] <dang`r`us> 1.8 is pretty damn old though
[05:14:16] *** Quits: Eadwulf0 (~Eadwulf0@45.186.201.113) (Read error: Connection reset by peer)
[05:26:10] *** Quits: segfaultbanana (~segfaultb@user/segfaultbanana) (Remote host closed the connection)
[05:27:28] *** Joins: segfaultbanana (~segfaultb@user/segfaultbanana)
[05:28:08] *** Joins: Eadwulf0 (~Eadwulf0@45.186.201.113)
[05:28:46] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[05:28:56] *** Quits: Eadwulf0 (~Eadwulf0@45.186.201.113) (Client Quit)
[05:29:03] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[05:34:53] *** Quits: segfaultbanana (~segfaultb@user/segfaultbanana) (Ping timeout: 264 seconds)
[05:40:02] *** Joins: fikran (~fikran@user/fikran)
[06:01:07] <FunkyBob> have I been a django dev for long... heh
[06:23:11] *** Joins: The_Jag_ (~The_Jag@host-79-32-14-38.retail.telecomitalia.it)
[06:25:56] *** Quits: The_Jag (~The_Jag@host-82-58-136-144.retail.telecomitalia.it) (Ping timeout: 245 seconds)
[06:31:00] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[06:45:13] *** Joins: segfaultbanana (~segfaultb@user/segfaultbanana)
[06:49:35] *** Quits: segfaultbanana (~segfaultb@user/segfaultbanana) (Ping timeout: 264 seconds)
[06:50:21] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[07:04:48] <explore> official docs can be so gud, right now i am reading Rust's official "the book" and learning so much, sometimes authors of books can make something succinct into something so convoluted
[07:05:03] <explore> not all authors are made equal, that's all i am saying
[07:05:07] <explore> not dissing every author
[07:32:19] *** Quits: burakcank (burakcank@has.arrived.and.is.ready-to.party) (Ping timeout: 252 seconds)
[07:33:38] *** Joins: zkanda (~zkanda@box.makean.art)
[07:47:38] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[07:49:43] *** Joins: fikran (~fikran@user/fikran)
[08:45:33] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:48:10] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[08:48:25] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:49:13] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[08:55:38] *** Joins: linexpert (~linexpert@134.209.114.206)
[09:09:20] *** Joins: pro_z (~pro_z@37.214.77.123)
[09:10:17] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:18:06] *** Quits: linexpert (~linexpert@134.209.114.206) (Quit: Client closed)
[09:42:54] *** Joins: d3javu (~d3javu@user/d3javu)
[09:57:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[09:59:04] *** Joins: fikran (~fikran@user/fikran)
[10:10:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[10:16:15] *** Joins: djapo (~archangel@user/djapo)
[10:33:55] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[11:38:56] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:654:695b:3260:c0fc)
[12:03:14] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[12:06:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[12:08:25] *** Joins: fikran (~fikran@user/fikran)
[12:13:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[12:13:56] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[12:18:14] <carloratm> Hi all, I am using django-mptt, i'd like to customize the form rendering for the field. I'd like to generate select groups from a category and show its children as options. Where should I look? Do I need a custom form field, or a custom widget?
[12:19:34] <carloratm> this is the default field used by mptt: https://github.com/django-mptt/django-mptt/blob/7a6a54c6d2572a45ea63bd639c25507108fff3e6/mptt/forms.py#L53
[12:21:52] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[12:23:06] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[12:31:52] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[12:37:37] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[12:48:55] *** Joins: kostkon (~androirc@2a02:587:a10a:f794:5580:9753:e4ff:28db)
[12:51:29] *** Quits: explore (uid233125@id-233125.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:55:18] *** Joins: segfaultbanana (~segfaultb@user/segfaultbanana)
[12:58:21] *** Quits: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net) (Quit: Leaving)
[13:00:05] *** Quits: segfaultbanana (~segfaultb@user/segfaultbanana) (Ping timeout: 264 seconds)
[13:00:20] *** Joins: sisel4 (lysy@user/sisel4)
[13:03:40] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[13:51:13] *** Quits: dor (~erg@78.11.12.207) (Read error: Connection reset by peer)
[13:52:50] <schinckel> dang`r`us: I still wear my 1.8 hoodie sometimes.
[13:53:06] <schinckel> Or was that the 1.4 one...
[14:07:02] *** Quits: kostkon (~androirc@2a02:587:a10a:f794:5580:9753:e4ff:28db) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[14:16:00] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[14:17:46] *** Joins: fikran (~fikran@user/fikran)
[14:23:45] <pycode1> hello
[14:23:52] <pycode1> i am using this field in a form SplitArrayField
[14:24:01] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 268 seconds)
[14:24:01] <pycode1> it basically split an arrayfield into a list of <input>
[14:24:19] <pycode1> when i do {{ my_field }} i see a consecutive list of <input..>
[14:24:33] <pycode1> but i would like to add some class and an html container for each <input
[14:24:36] <pycode1> is that possible somehow?
[14:24:53] <pycode1> i am trying to loop over it but i am surelly missing something
[14:25:09] <pycode1> i see ten inputs but when i try to loop i still see one
[14:25:23] <pycode1> i mean when i print the first one django create the entire list of <input
[14:28:56] <pycode1> i am basically having this problem https://stackoverflow.com/questions/45903579/dividing-a-splitarrayfield-in-django-template
[14:35:04] *** Joins: Atque (~Atque@user/atque)
[14:37:16] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[14:38:47] *** Joins: AnselmoCampanas (~AnselmoCa@190.99.69.41)
[14:41:55] *** Joins: iomari891 (~iomari891@129.205.113.1)
[14:44:43] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:654:695b:3260:c0fc) (Ping timeout: 252 seconds)
[14:56:49] *** Quits: iomari891 (~iomari891@129.205.113.1) (Ping timeout: 252 seconds)
[15:04:15] *** Joins: Ergo^ (~ergo@91.238.59.144)
[15:17:18] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[15:18:00] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:27:30] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Read error: Connection reset by peer)
[15:37:01] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[15:58:42] <LordKalma> meta question: How do you deal with data that, like, is related, but very variable. I'm having trouble thinking on how to setup a model for that. Like, the entities all share some common fields, but they have a lot of parts that only apply to some, other parts to others, some use both. And it doesn't make sense in my head to carry a table full of empty columns that don't even apply...
[15:59:56] <doismellburning> LordKalma: can you talk more about the data?
[16:04:02] <LordKalma> It's kinda specific, but sure. It's ham (amateur) repeaters. All have a "callsign" and some positioning data. Other than that, some are "duplex" (two different frequencies). Some are "simplex" (only one). Some are FM repeaters, some are DMR repeaters, some are D-STAR, and some C4FM. Each one of these types have different parameters. More advances ones are multi-modal. It's a mess
[16:07:58] <LordKalma> https://i.gyazo.com/a70902c9369fa4d594e1df45ee4633c8.png
[16:08:11] <LordKalma> for example, here, the things with red around them only apply to the ones that have DMR
[16:08:30] <LordKalma> the blue column only applies to the ones that have FM
[16:09:08] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[16:13:28] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[16:15:48] <doismellburning> LordKalma: 2E0KGG, hi ;)
[16:16:00] <LordKalma> hehehe CT7ALW ;)
[16:16:24] <LordKalma> this is unexpected haha
[16:16:59] <doismellburning> LordKalma: so I think you're going to have a table of Repeaters, and a table of "DMR data" which FKs to the Repeater, etc. etc.
[16:17:12] <doismellburning> there's nothing wrong with empty columns that don't apply though
[16:17:25] <doismellburning> but I imagine you can probably group to some extent?
[16:17:40] <LordKalma> that's what I was going for. But then I found myself writing too many small models. The variability is immense
[16:17:43] <doismellburning> (I mostly operate on HF so don't know much about repeaters, sorry)
[16:18:07] <doismellburning> I suspect there's going to be no perfect answer
[16:18:31] <LordKalma> yeah, It's a complicated dataset
[16:18:36] <doismellburning> I'd encourage you to not be held back by what you feel you "should" do
[16:18:36] *** Joins: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net)
[16:18:37] <LordKalma> Like, it's related things, but so different
[16:18:41] <doismellburning> Yeah
[16:19:10] <LordKalma> I just don't to make things painful for myself when introducing data or using DRF hahah
[16:19:16] <doismellburning> Understandable
[16:19:56] <doismellburning> I can imagine having models for the different "functionalities" (e.g. DMRRepeaterData, DSTARRepeaterData etc.)
[16:20:11] <doismellburning> And they might not be very big, but they'll make sense as logical groupings
[16:20:40] <doismellburning> Can you share the full model you have right now?
[16:21:39] <LordKalma> Sure. I'm just starting writing code, and I'm new to the django ecosystem, so I don't have much
[16:21:49] *** Quits: AnselmoCampanas (~AnselmoCa@190.99.69.41) (Ping timeout: 256 seconds)
[16:21:54] <LordKalma> https://bpa.st/LIXPNQLG3LFMJOYLD4XHZO6DZI
[16:22:04] <doismellburning> Sorry I mean, the spreadsheet would probably be good!
[16:22:11] <LordKalma> Ah the spreadsheet
[16:22:12] <LordKalma> sure
[16:22:33] <doismellburning> your models look reasonable though
[16:23:06] <LordKalma> I think I'll have to make the base class no abstract
[16:23:27] <LordKalma> otherwise when I want to FK the repeater object I'd need to do that generic FK pattern
[16:23:33] <LordKalma> and that might be a pain to serialize properly
[16:23:36] <LordKalma> especially on write
[16:24:16] <LordKalma> https://docs.google.com/spreadsheets/d/1mXZsB0hPUOBenZ1hxgLq-dHQQlUd7IT-/edit?usp=sharing&ouid=105841830549281979578&rtpof=true&sd=true
[16:24:42] <Kipe_> I would consider using django-polymorphic for that, it has fairly good integration with DRF also
[16:25:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[16:25:47] <LordKalma> yeah, like, the challenge that I'm trying to prepare for is the initial dump. No way I'm doing it manually. I want for it to be easy to just write the data
[16:26:09] <LordKalma> that would ideally mean that a single query would create all the (sub)classes
[16:26:34] <LordKalma> Instead of having to create the base thing first, then create each sub-thing and etc
[16:26:38] <LordKalma> know what I mean?
[16:27:07] *** Joins: fikran (~fikran@user/fikran)
[16:27:08] <doismellburning> nodnod
[16:27:49] <doismellburning> so like, the "worst case" where you have a mega model and lots of rows with empty dstar data isn't _that_ bad
[16:28:46] <LordKalma> yeah, I guess
[16:29:01] <doismellburning> but I think you could do this with half a dozen models or so - one "Repeater" with all the common info, and then like I said above, a DStarData, etc. etc.
[16:29:22] <LordKalma> I also wonder how easy would it be filtering the data
[16:29:43] <LordKalma> like, with a huge single table vs with many small models, how easy is to ask for "all the DMR repeaters" for example
[16:30:16] <doismellburning> Right, whereas it's much easier and "conceptually reasonable" if you had an explicit DMRData model
[16:31:39] <doismellburning> My point is there's no _right_ answer, it's tradeoffs all the way down - I'd personally reach for the multiple-models like I described, but you wouldn't be "wrong" to do megamodel
[16:31:54] <doismellburning> And if that's easier and faster for you to build and ship something, great
[16:32:08] <doismellburning> Ship a v1 soon, iterate later when you have a better feel for things
[16:32:55] <LordKalma> yeah
[16:33:11] <LordKalma> When they ask me in job interviews what my largest flaw is, that's my answer
[16:33:19] <LordKalma> I have a mental problem with minimum viable products
[16:33:20] <LordKalma> hahaha
[16:33:27] <LordKalma> (I'm not a professional coder)
[16:33:58] <Kipe_> I do agree, these kind of systems are quite of then easier to test in practice and then iterate once you know what the issues are
[16:34:19] <LordKalma> thanks, you've been very welcoming
[16:34:33] <doismellburning> We try :) Good luck!
[16:34:44] <LordKalma> A friend just linked me an interesting idea
[16:34:46] <LordKalma> https://docs.microsoft.com/en-us/power-bi/guidance/star-schema#star-schema-relevance-to-power-bi-models
[16:34:48] <Kipe_> if you spend too much time planning, you'll most likely just iterate it over and over and never finish anything... that's at least how it goes for me :D
[16:34:54] <doismellburning> Kipe_++
[16:35:00] <LordKalma> hahahahah so trueeeeeeeee man
[16:35:04] <LordKalma> *person, sorry :p
[16:35:28] <doismellburning> I recently ported 100kloc of C to Go; so many places I wanted to make improvements along the way but I *had* to restrain myself to a straight port at first, otherwise I'd never have finished
[16:36:03] <LordKalma> That said, The star schema was interesting to me. I could have like a "central" table with callsign | GeoInfoKey | FmInfoKey | DmrInfoKey | ....
[16:36:06] <LordKalma> and then fill those in
[16:36:17] <LordKalma> The absence of key means the repeater is not of the corresponding type
[16:36:51] <doismellburning> that's not _unlike_ the model I proposed
[16:37:02] <doismellburning> but through reverse relations
[16:37:17] <LordKalma> yeah
[16:37:49] <doismellburning> The absence of a DMRData Model with repeater_id X means that X isn't a DMR repeater
[16:38:12] <LordKalma> yes, FK/1:1 instead of storing the key
[16:43:05] <LordKalma> I'll have 534 more questions along the way, I'll keep you updated, thanks for the chat!
[16:45:04] <doismellburning> Enjoy :)
[16:50:11] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[16:58:51] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[17:23:54] *** Joins: segfaultbanana (~segfaultb@user/segfaultbanana)
[17:27:49] <LordKalma> followup question: with the "many model" option, how easy is it to write new data using DRF? Like, in a request I'd need to tell "write an entry for this model, and write an entry for these two "sibling" models with FKs to the first"
[17:28:35] *** Quits: segfaultbanana (~segfaultb@user/segfaultbanana) (Ping timeout: 264 seconds)
[17:42:01] <dang`r`us> schinckel, oldskool! I just looked up when I got into it and it must've been 0.96 ... jeez I'm old
[17:44:26] <hylje> magic removal branch
[17:44:45] <doismellburning> LordKalma: I'm not very familiar with DRF but I think that's doable in a single call
[17:46:11] <LordKalma> thanks
[17:52:52] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:03:44] *** Joins: slav0nic (slav0nic@python.su)
[18:24:06] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[18:34:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[18:36:28] *** Joins: fikran (~fikran@user/fikran)
[18:52:24] *** Joins: segfaultbanana (~segfaultb@user/segfaultbanana)
[18:57:23] *** Quits: segfaultbanana (~segfaultb@user/segfaultbanana) (Ping timeout: 264 seconds)
[19:24:17] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:45:45] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[20:12:20] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[20:14:51] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[20:29:15] *** Joins: anddam (~anddam@user/anddam)
[20:44:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[20:45:49] *** Joins: fikran (~fikran@user/fikran)
[20:55:06] *** Quits: pro_z (~pro_z@37.214.77.123) (Ping timeout: 245 seconds)
[20:58:45] <LordKalma> https://bpa.st/JHAG2GFNAGABUPW22VN4RPYIGI
[20:58:48] <LordKalma> I settled on this, for now
[21:00:00] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:94d5:6806:1c74:8f4)
[21:00:00] <LordKalma> https://i.gyazo.com/ecb5ed564aa5e1c00dea09e9f9c32b2c.png
[21:00:05] <LordKalma> and I'm loving how it looks
[21:07:33] <doismellburning> LordKalma: Nice!
[21:09:52] <LordKalma> Hum... I should add some validation so that the same repeater can't be simplex and duplex hahah. Other than that, it's looking pretty good
[21:12:20] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[21:21:05] <pycode1> hello
[21:21:26] <pycode1> is tehre a widget that repeat a field N times where ican customize the container?
[21:21:29] <pycode1> i am using https://docs.djangoproject.com/en/3.2/ref/contrib/postgres/forms/#splitarrayfield
[21:21:49] <pycode1> that is using https://github.com/django/django/blob/ca9872905559026af82000e46cde6f7dedc897b6/django/contrib/postgres/forms/array.py#L105
[21:22:01] <pycode1> but when i print the field i see a list of <input>
[21:22:08] <pycode1> how can i work on it?
[21:27:56] <pycode1> seems based on https://docs.djangoproject.com/en/3.2/ref/forms/widgets/#django.forms.MultiWidget
[21:33:24] <pycode1> is that possible?
[21:34:30] *** Quits: mxp (~mxp@185.16.205.131) (Ping timeout: 260 seconds)
[21:36:26] *** Joins: mxp (~mxp@185.16.205.131)
[21:36:51] *** Joins: segfaultbanana (~segfaultb@user/segfaultbanana)
[21:37:12] *** Quits: segfaultbanana (~segfaultb@user/segfaultbanana) (Remote host closed the connection)
[21:37:27] *** Joins: segfaultbanana (~segfaultb@user/segfaultbanana)
[21:39:56] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:94d5:6806:1c74:8f4) (Ping timeout: 246 seconds)
[22:01:02] *** Joins: explore (uid233125@id-233125.hampstead.irccloud.com)
[22:10:07] *** Joins: Kalov (~Thunderbi@181.226.249.159)
[22:25:15] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 260 seconds)
[22:25:44] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[22:44:58] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[22:46:24] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[22:53:36] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[22:55:10] *** Joins: fikran (~fikran@user/fikran)
[22:56:34] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[23:15:57] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:27:23] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 264 seconds)
[23:36:40] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:38:50] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:39:12] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:39:27] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:41:47] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Ping timeout: 264 seconds)
[23:43:50] *** Joins: bartzy (uid163429@id-163429.hampstead.irccloud.com)
[23:45:00] <bartzy> What would be your approach to saving multiple resolutions of some asset - for example - a video that in 4 different resolutions (4 different files), plus 4 accompanying images in the same size for each video?
[23:45:29] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:46:57] <bartzy> These video+image pairs are logically the content of one of my models in the system. One option is to just have a model like VideoImagePair (i.e. a single resolution) and have a foreign key to my main model. Another is to have a model like ImageVideoBundle that actually has all the resolutions together.
[23:51:51] *** Quits: pembo13 (~pembo13@47.196.95.206) (Quit: Leaving)
