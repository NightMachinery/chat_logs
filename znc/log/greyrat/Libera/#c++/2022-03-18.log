[00:00:04] <bpalmer> CarloWood: what will you define Register to so you don't collide with it?
[00:01:03] <CarloWood> #define register kewl_r3g1ste3__
[00:02:09] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:02:12] <CarloWood> You know what, I'm going to use .pledge()
[00:02:31] <CarloWood> Cause it is a promise that it will update and maintain those vectors.
[00:03:09] <CarloWood>       flat_create_info.pledge(m_vertex_input_binding_descriptions);
[00:03:10] <CarloWood>       flat_create_info.pledge(m_vertex_input_attribute_descriptions);
[00:03:20] <CarloWood> Does that look ok-ish?
[00:03:44] <AliceMeows> Personally I'd use subscribe but otherwise it seem alright to me
[00:05:31] *** Quits: Tokamak (~Tokamak@172.58.188.132) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:05:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:05:32] *** Quits: p|q (~plq@94.54.154.86) (Ping timeout: 240 seconds)
[00:05:35] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[00:08:52] <Alipha> CarloWood: yeah, subscribe
[00:08:55] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:3275)
[00:09:23] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[00:10:43] *** Joins: Tokamak (~Tokamak@172.58.188.132)
[00:11:38] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[00:18:12] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 240 seconds)
[00:24:11] *** Joins: wolfman2000 (~wolfman20@2600:1700:3211:4140:e10b:3250:d487:4a56)
[00:27:40] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[00:28:53] *** Quits: unknow (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[00:29:07] *** Joins: proller (~p@80.240.216.69)
[00:33:50] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[00:35:11] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:3275) (Ping timeout: 256 seconds)
[00:40:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[00:42:46] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[00:44:15] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 256 seconds)
[00:45:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:46:45] *** Joins: proller (~p@2a02:6b8:b081:26::1:39)
[00:48:07] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:11e0:bab1:2383:8658)
[00:48:44] *** Joins: malloy (~jimery@120.235.172.170)
[00:53:05] *** Joins: sobkas (~sobkas@95.175.17.217)
[00:59:24] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Ping timeout: 250 seconds)
[01:02:19] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[01:02:47] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:03:23] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:06:08] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[01:06:20] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[01:06:40] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[01:07:37] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[01:12:24] *** Quits: foul_owl (~kerry@23.82.193.89) (Ping timeout: 250 seconds)
[01:16:01] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-a161-049d-edaf-1b31.res6.spectrum.com) (Quit: Leaving)
[01:17:11] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:17:13] *** Joins: jplejacq (~jplejacq@68.71.169.160)
[01:17:44] *** Parts: jplejacq (~jplejacq@68.71.169.160) ()
[01:19:19] <anyone> {map<int,S> m;m.emplace(5,44); } struct S{int foo;};
[01:19:20] <geordi>  
[01:20:31] <anyone> https://godbolt.org/z/3TWPr6f56  just why can't compilers give a terse message
[01:20:31] <CarloWood> geordi: replace m.emplace(5,44) with m[5] = 44
[01:20:32] <geordi> error: no match for 'operator=' in 'm.map<int, S>::<anonymous>.map<int, S>::operator[](5) = 44' (operand types are 'map<int, S>::mapped_type' {aka 'S'} and 'int')
[01:22:17] <Raziel> anyone, because template errors are made to cause people to rethink their life choices?
[01:22:40] *** Quits: magla (~gelignite@d5364d83.access.ecotel.net) (Quit: Stay safe!)
[01:22:58] <Raziel> geordi, replace 44 with S{44}
[01:22:59] <geordi>  
[01:23:16] <Raziel> there, nice and well defined now. :p
[01:23:19] <constxd> hey kings
[01:23:46] <constxd> in C++11, if i have a struct and it has some POD types in it
[01:24:09] *** Joins: rgrinberg (~textual@177.241.245.222)
[01:24:13] <constxd> MyStruct *s = new MyStruct; // the POD memebers are uninitialized
[01:24:20] <constxd> (there's no ctor defined)
[01:24:23] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[01:24:42] <constxd> MyStruct *s = new MyStruct(); // POD members are value initialized
[01:24:45] <constxd> do i have this right?
[01:25:08] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[01:25:48] <CarloWood> anyone: note that m.emplace(5,S{44});  works. Not sure why it works on geordi without...
[01:27:13] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:28:31] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[01:28:33] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:29:33] <CarloWood> constxd: geordi says so...
[01:29:45] <CarloWood> { char buf[sizeof(S)] = { 0x55, 0x55, 0x55, 0x55 }; S* s = new(buf) S; cout << s->n; } struct S { int n; };
[01:29:45] <geordi> 1431655765
[01:30:02] <CarloWood> geordi: replace S; with S();
[01:30:03] <geordi> 0
[01:30:48] <CarloWood> geordi: replace S(); with S{};
[01:30:49] <geordi> 0
[01:31:16] <constxd> man placement new is so based
[01:31:51] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[01:32:04] <Alipha> constxd: yes
[01:32:06] <CarloWood> It printed 0 regardless without. I think geordi allocates all memory zero initialized.
[01:32:36] *** Quits: Tokamak (~Tokamak@172.58.188.132) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:33:08] <Alipha> constxd: however, if MyStruct has a default constructor which doesn't initialize its members, then the members will remain uninitialized. But if it doesn't have a default constructor, then yes.
[01:33:54] <constxd> based
[01:34:01] <constxd> thanks kings
[01:39:48] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[01:40:39] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:42:03] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[01:43:51] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[01:44:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:44:04] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[01:44:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:44:08] *** ChanServ sets mode: +v npaperbot
[01:46:45] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:47:55] *** Joins: Tokamak (~Tokamak@172.58.188.132)
[01:47:56] *** Joins: foul_owl (~kerry@23.82.193.89)
[01:48:58] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:54:09] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[01:56:32] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[01:59:14] *** Joins: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[02:01:50] *** Quits: Telvana (~capo@user/telvana) (Quit: ZNC 1.9.x-git-170-9be0cae1 - https://znc.in)
[02:01:53] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[02:03:17] *** Quits: tapeworm (~tapeworm@188.168.50.119) (Quit: Leaving)
[02:03:28] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:03:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[02:06:41] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[02:07:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[02:10:22] *** Joins: Telvana (~capo@user/telvana)
[02:10:52] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[02:16:42] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[02:19:17] *** Quits: andreasbuhr (~quassel@p549db611.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:20:43] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[02:20:51] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[02:22:36] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[02:23:15] *** Joins: ferdna (~ferdna@user/ferdna)
[02:25:02] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[02:26:10] *** Joins: cheater (~Username@user/cheater)
[02:26:34] *** Quits: clime (~clime@37-48-56-199.nat.epc.tmcz.cz) (Ping timeout: 260 seconds)
[02:26:42] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Read error: Connection reset by peer)
[02:28:30] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[02:29:48] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[02:34:02] *** Quits: pizdets (~pizdets@183.182.110.150) (Ping timeout: 240 seconds)
[02:34:05] *** Joins: pizdets_ (~pizdets@183.182.111.218)
[02:34:09] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:35:03] *** Quits: lmat (~Lmat@c-73-102-193-68.hsd1.in.comcast.net) (Remote host closed the connection)
[02:36:23] *** Quits: Telvana (~capo@user/telvana) (Quit: ZNC 1.9.x-git-170-9be0cae1 - https://znc.in)
[02:36:33] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ncwbqcfe)
[02:38:03] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[02:39:30] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 250 seconds)
[02:40:23] *** Joins: Telvana (~capo@user/telvana)
[02:46:03] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:46:33] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:52:13] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:52:40] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[02:54:49] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:56:08] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:57:04] *** Joins: hiroshi_ (~freedom@151.37.35.191)
[03:00:53] *** Joins: Vile` (~Vile@73.182.253.255)
[03:01:45] *** Quits: Vile` (~Vile@73.182.253.255) (Changing host)
[03:01:45] *** Joins: Vile` (~Vile@user/Vile/x-1554198)
[03:02:21] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[03:03:51] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 252 seconds)
[03:03:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:05:18] *** Quits: hiroshi_ (~freedom@151.37.35.191) (Quit: hiroshi_)
[03:07:02] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:10:09] *** Joins: richardio02 (~richardio@99-125-205-147.lightspeed.jcvlfl.sbcglobal.net)
[03:10:36] *** Parts: richardio02 (~richardio@99-125-205-147.lightspeed.jcvlfl.sbcglobal.net) ()
[03:16:06] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[03:18:09] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:11e0:bab1:2383:8658) (Ping timeout: 252 seconds)
[03:21:13] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[03:21:48] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:25:52] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 250 seconds)
[03:25:53] *** Quits: ckdCreations (~ckdCreati@147.55.130.34) (Read error: Connection reset by peer)
[03:29:49] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[03:31:44] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[03:32:57] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[03:35:57] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 256 seconds)
[03:36:07] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[03:40:16] *** Quits: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:45:49] *** Parts: AliceMeows (~AliceMeow@user/alicemeows) ()
[03:49:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:50:02] *** Quits: xuxx (~xuxx@86.228.71.37.rev.sfr.net) (Ping timeout: 240 seconds)
[03:51:57] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:54:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[03:57:25] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[03:57:38] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[03:59:13] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[04:00:42] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[04:01:37] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[04:04:29] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:08:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[04:12:07] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[04:13:13] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[04:13:55] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[04:15:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:ed8e:eff0:febb:d703) (Ping timeout: 240 seconds)
[04:16:05] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:16:19] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[04:17:57] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[04:18:43] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[04:19:15] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:19:28] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:20:21] *** Joins: zmt00 (~zmt00@user/zmt00)
[04:21:07] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:dcda:6ac0:7da0:73a8)
[04:21:15] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[04:21:33] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[04:23:56] *** Joins: Rynn (~rynn@216.30.158.198)
[04:24:02] *** Quits: RandomReader (~RandomRea@user/randomreader) (Remote host closed the connection)
[04:24:29] *** Joins: malloy (~jimery@120.235.172.170)
[04:25:44] *** Joins: MsPants (~MsPants@S01069050ca4e3573.cg.shawcable.net)
[04:25:59] <MsPants> C++ is just a way to deal with the leaky abstraction of strings
[04:26:42] <MsPants> the entire history of C++ including its value proposition can be understood in terms of this.
[04:26:49] <MsPants> thoughts?
[04:26:50] <anyone> in terms of "this" ;)
[04:27:01] <MsPants> exactly
[04:27:47] <MsPants> it took me 20 years
[04:27:51] <MsPants> to come to this understanding
[04:27:57] <MsPants> I by no means mean to trivialize
[04:28:18] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:28:25] <cbreak> no.
[04:28:32] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:30:44] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[04:31:42] <MsPants> but I will say, bjarne stroustrup had obviously never considered a native string type back in the day
[04:32:11] <MsPants> would have turned C++ into something like Java
[04:32:16] <MsPants> back in the 70s
[04:32:59] <Raziel> but C++ wasn't around in the 70s
[04:33:11] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:34:59] <ncwbqcfe> yep, 80s: https://cds.cern.ch/record/169940/files/cer-000081326.pdf
[04:35:36] <Raziel> people don't even like C++'s strings, apparently
[04:35:47] <Raziel> case in point: QString exists
[04:36:18] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 260 seconds)
[04:36:28] <Eelis> value semantics are useful for tons of things. the idea that it's all about strings is silly
[04:36:28] <MsPants> Raziel: then how come its rumoured it was invented in 79?
[04:37:27] <MsPants> Eelis: yea it looks like its extremely well known: https://en.wikipedia.org/wiki/Value_semantics
[04:37:31] <MsPants> lol
[04:37:34] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:37:49] <Raziel> no idea, I wasn't exactly around back then so I can't give you a first-hand summary of how it went down :p
[04:37:56] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[04:38:16] <Eelis> MsPants: wikipedia is not a C++ textbook
[04:39:06] <MsPants> well I was banned from #programming for saying this
[04:39:17] <MsPants> so it's clearly a big controversy
[04:39:35] <Raziel> is it? I don't see why it'd matter that much v:
[04:39:36] <Eelis> drama queen
[04:40:14] <MsPants> Eelis: nope, check the logs
[04:40:37] <MsPants> it clearly matters to some people
[04:41:12] <Eelis> if you say so
[04:41:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[04:42:15] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:43:32] *** Quits: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net) (Ping timeout: 240 seconds)
[04:46:56] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[04:47:50] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[04:52:44] *** Joins: abode_ (~abode@2.51.240.182)
[04:53:41] *** Quits: abode (~abode@2001:8f8:1263:8366:8230:49ff:fe6e:36b5) (Remote host closed the connection)
[04:54:42] <NyB> hmm... I know one cannot have default arguments for parameter packs in functions, but is there anything (except for overloading) to get a similar effect?
[04:54:45] <NyB> Example: https://wandbox.org/permlink/dqlUYqPNsNObw3t9
[04:59:12] *** Quits: pulse (~pulse@user/pulse) (Quit: Join us at https://indiedevs.net/)
[04:59:27] *** Joins: pulse (~pulse@user/pulse)
[05:02:22] *** Joins: RandomReader (~RandomRea@user/randomreader)
[05:02:48] <Raziel> NyB, why no overloading?
[05:04:48] <Alipha> Have foo call a foo_impl<A...>::foo(); and partially template specialize
[05:04:59] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:07:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:07:59] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[05:08:19] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:18:32] <Raziel> https://wandbox.org/permlink/ZNzJKWfjjFwhyYL5 but getting weird with overloads is fun v:
[05:22:18] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[05:23:25] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[05:26:06] *** Joins: mixfix41 (~sdenynine@user/mixfix41)
[05:26:24] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[05:27:01] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[05:27:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[05:28:45] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:dcda:6ac0:7da0:73a8) (Quit: Textual IRC Client: www.textualapp.com)
[05:29:17] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[05:30:01] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:30:36] *** Joins: Octarine (~Octarine@p0656794-vcngn.tkyo.nt.ngn.ppp.ocn.ne.jp)
[05:32:41] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[05:33:00] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[05:34:35] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[05:34:57] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:35:55] <Raziel> NyB, behold, madness perfected https://wandbox.org/permlink/Wqo1h5MnOmeKzAs1 - now with commas!
[05:37:27] <Raziel> actually, the third one doesn't need the sizeof check and default now
[05:37:47] *** Quits: MsPants (~MsPants@S01069050ca4e3573.cg.shawcable.net) (Quit: Client closed)
[05:42:44] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[05:44:11] *** Joins: npaperbot2 (~npaperbot@dodecahedron.m-ou.se)
[05:44:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[05:45:57] <Raziel> Alipha, I can't actually tell if what I did there is elegant or an affront to C++, any feedback? :^)
[05:47:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:48:32] *** Joins: mukti (mukti@user/mukti)
[05:49:57] <Alipha> Raziel: I mean, I'd just have `void foo(I i, A... x)` and then `void foo() { foo(1); }`
[05:51:28] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 250 seconds)
[05:51:41] <Raziel> Alipha, that can't handle the specific call to foo<int>(someInt) that he seems to want though
[05:53:25] <Raziel> actually, I guess it doesn't
[05:54:41] <Raziel> it only omits the foo<>(); specific
[05:54:47] <Raziel> which... is a weird thing to do anyway
[05:55:32] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[06:03:34] *** Quits: davidlowryduda (~davidlowr@2601:197:600:1210:b19d:d8f1:1756:fb98) (Ping timeout: 260 seconds)
[06:04:34] <Octarine> is it appropriate to ask here for a code review of a short snippet? or are there other channels for that?
[06:05:33] *** Joins: davidlowryduda (~davidlowr@73.61.8.157)
[06:05:37] <Raziel> maybe C++-general would be more appropriate, but meh
[06:05:42] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:05:56] <Raziel> I doubt anyone's gonna shoot you if you do it here :p
[06:08:02] *** Joins: Inline__ (~Inline@p200300cd470af600c32f3b3744c2844b.dip0.t-ipconnect.de)
[06:08:36] <Octarine> Raziel, um, I tried to write something like random.choice() from Python in C++, here: https://wandbox.org/permlink/ksfESxUKBXwuWE1e  Not being an expert in C++, just wonder if there are any major flaws...
[06:09:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:10:13] *** Quits: Inline (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:12:10] <Raziel> Octarine, is there any particular reason why you want your functions to return... functions?
[06:13:28] <Raziel> I'm not familiar with how random.choice() works in python but I guess it creates generators?
[06:13:45] <Octarine> uh I couldn't think of any other way to accomplish the same...
[06:14:27] <Octarine> The random.choice() in Python just selects a random element from a collection, like random.choice([10, 20, 30]) would return either 10, 20, or 30
[06:15:57] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:16:36] <ncwbqcfe> your permalink just gives an error on my side... wandbox has turned not much reliable lately
[06:16:50] <kalven> if you want to do something like this, why not make a class that contains the rng?
[06:16:54] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a66001194d010dbb9f0be.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[06:17:38] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[06:18:14] <Octarine> Oh, I updated the code to include a use case so probably the old link is no longer correct. Here is a new one: https://wandbox.org/permlink/sXpgtSnuuvDq1JxL
[06:19:13] <Octarine> kalven Actually I didn't think about using a class. Thanks, it may be a good idea.
[06:20:16] <Octarine> But if not using a class, I wonder if the code more or less correct, especially I worry about references/lifetime issues...
[06:20:46] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[06:20:55] <ncwbqcfe> Octarine: it's just broken on my side, not mattering which link
[06:21:02] <ncwbqcfe> some server error
[06:22:15] <kalven> Octarine: lifetime issues are fine
[06:22:28] <kalven> sry, there are no lifetime issues I mean
[06:23:37] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[06:25:30] <Octarine> I see. Thanks for suggestions and reviewing!
[06:25:36] *** Joins: ed (~ed@mlk-174-186.tm.net.my)
[06:25:47] <Raziel> Octarine, if you don't want it to be functional style, you can do this
[06:27:28] <Raziel> ...one sec...
[06:27:36] <kalven> it's just quite costly
[06:30:13] <Raziel> https://wandbox.org/permlink/2tPaVXFsMLSVsWT5
[06:30:20] <Raziel> there, what a normal thing would look like
[06:30:53] <Raziel> excuse my rather loose use of template for the make_choice
[06:30:56] <Raziel> lol
[06:31:25] <Octarine> Raziel, but that would initialize the random generator in each iteration of the loop though?
[06:31:33] <Raziel> negative, because it's static
[06:31:50] <Raziel> it will initialize the uniform distribution thing every time though
[06:32:30] <Raziel> but I don't think that's costly
[06:33:43] <Raziel> but, yes, normally, you'll want your generator to be... somewhere nicer than just statically inside a function.
[06:34:00] <Raziel> for something like that a singleton/global would be fine
[06:34:38] <Raziel> then anything else that wants to use a generator can tap that one rather than making another one or such
[06:36:46] <Octarine> Umm, I see. Thanks for the rewritten version, it gives another perspective. I'll probably reconsider the approach a bit.
[06:37:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:37:03] <Octarine> Just curious to test what the performance impact is.
[06:38:21] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[06:38:32] <Raziel> you can try using this https://www.quick-bench.com/ for benchmarking
[06:39:23] <Octarine> I actually have a random walk simulation, where it is used..
[06:42:25] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-b409-678c-49f6-3fbd.res6.spectrum.com)
[06:42:52] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-b409-678c-49f6-3fbd.res6.spectrum.com) (Remote host closed the connection)
[06:46:48] *** Quits: rgrinberg (~textual@177.241.245.222) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:49:44] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:50:32] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[06:50:59] <Raziel> well, my attempts at using quick-bench are only achieving the feat of making their server time out, so that's not helpful
[06:51:33] *** Quits: Alipha (~AliphaX@user/alipha) (Ping timeout: 252 seconds)
[06:51:58] <Raziel> but anyway, performance is gonna be practically the same if you're only using one saved function ever (ie, only using the same range on the same array all the time), but will probably get worse if you use it on different things and have to instantiate a function each time
[06:52:37] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 240 seconds)
[06:54:40] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[06:56:52] <Raziel> https://www.quick-bench.com/q/ZPNNINoIURGGsqhjj4wBkGLQC9o oh hey it worked
[06:57:15] <Raziel> honestly not sure why there is even a perf difference in that usecase
[07:02:53] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[07:05:09] *** Joins: Alipha (~AliphaX@user/alipha)
[07:06:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:09:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:09:47] <kalven> Raziel: the overhead of std::function would be my guess
[07:10:36] <Raziel> kalven, nope, apparently it's because mt32 is slower than mt64
[07:10:47] <Raziel> changed them both to 64 and they're very close now |:
[07:11:36] *** Joins: msk (~msk@103.213.213.65)
[07:18:18] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:20:59] *** Quits: abode_ (~abode@2.51.240.182) (Remote host closed the connection)
[07:21:50] *** Joins: abode_ (~abode@2001:8f8:1263:8366:8230:49ff:fe6e:36b5)
[07:27:26] *** Quits: Octarine (~Octarine@p0656794-vcngn.tkyo.nt.ngn.ppp.ocn.ne.jp) (Quit: Client closed)
[07:30:10] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:30:32] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[07:30:39] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[07:35:20] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ncwbqcfe)
[07:35:39] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[07:35:44] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:38:30] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[07:43:24] *** Quits: irc-open-up (bounce@bounce.nastycode.com) (Ping timeout: 240 seconds)
[07:43:57] *** Quits: Impulsif (impulsif@impulsif.us2.ircnow.org) (Ping timeout: 240 seconds)
[07:45:30] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[07:46:03] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[07:46:28] *** Joins: SorryBeauty (~SorryBeau@103.76.184.42)
[07:47:06] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 252 seconds)
[07:48:23] *** Quits: pulse (~pulse@user/pulse) (Quit: Join us at https://indiedevs.net/)
[07:48:28] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 250 seconds)
[07:50:27] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[07:53:02] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[08:02:50] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[08:02:56] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Client Quit)
[08:03:17] *** Joins: rgrinberg (~textual@177.241.245.222)
[08:05:32] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 272 seconds)
[08:06:44] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:10:13] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:13:00] *** Joins: abode__ (~abode@2.51.240.182)
[08:15:02] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (Ping timeout: 272 seconds)
[08:15:32] *** Quits: abode_ (~abode@2001:8f8:1263:8366:8230:49ff:fe6e:36b5) (Ping timeout: 240 seconds)
[08:19:30] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[08:20:16] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Client Quit)
[08:20:39] *** Quits: Billiard (~jordan@2603-6000-9803-8ab5-0000-0000-0000-065a.res6.spectrum.com) (Ping timeout: 252 seconds)
[08:21:12] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Remote host closed the connection)
[08:26:17] *** Quits: ville (~ville@user/ville) (Quit: ville)
[08:26:28] *** Joins: Billiard (~jordan@2603-6000-9803-8ab5-0000-0000-0000-065a.res6.spectrum.com)
[08:29:00] *** Joins: ville (~ville@user/ville)
[08:30:00] *** Quits: sreve (~quassel@p4ff44633.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[08:30:26] *** Joins: sreve (~quassel@p549d71d6.dip0.t-ipconnect.de)
[08:30:36] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:30:42] <hachikuji[m]> <kalven> "Raziel: the overhead of std::..." <- yeah, virtual pointers for type erasure and heap allocations for captured variables are the main thing to consider when using that thing
[08:31:29] *** Joins: irc-open-up (bounce@bounce.nastycode.com)
[08:37:45] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[08:39:02] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[08:44:04] *** Joins: Impulsif (impulsif@impulsif.us2.ircnow.org)
[08:48:54] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[08:49:05] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[08:49:05] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[08:49:05] *** Joins: Teukka (~teukka@user/Teukka)
[08:49:13] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 268 seconds)
[08:55:51] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 252 seconds)
[08:57:30] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[08:58:05] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[08:58:09] *** Joins: zer0x (~zer0x@58.186.50.2)
[09:04:30] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[09:07:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:10:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:15:57] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[09:16:43] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[09:17:45] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[09:23:53] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 256 seconds)
[09:24:07] *** abode__ is now known as abode
[09:27:47] *** Joins: crankslider (~slidercra@user/slidercrank)
[09:30:16] *** Quits: Billiard (~jordan@2603-6000-9803-8ab5-0000-0000-0000-065a.res6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[09:31:58] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[09:36:21] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[09:40:29] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[09:42:02] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[09:43:39] *** Quits: rgrinberg (~textual@177.241.245.222) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:44:01] *** Quits: npaperbot2 (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:44:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[09:44:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:44:10] *** ChanServ sets mode: +v npaperbot
[09:49:32] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[09:51:01] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:51:27] *** Joins: andreasbuhr (~quassel@p549db74d.dip0.t-ipconnect.de)
[09:51:39] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[09:52:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[09:52:59] *** Joins: callq (~callq@2409:4062:4e9a:a9bd:dc94:3973:cfd6:75e7)
[09:55:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[09:56:44] *** gentooclimax is now known as climax
[09:57:02] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[09:57:05] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4.1)
[09:58:37] *** climax is now known as gentooclimax
[10:04:02] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[10:04:11] *** Joins: Billiard (~jordan@cpe-75-87-214-101.new.res.rr.com)
[10:06:57] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 256 seconds)
[10:07:21] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:08:47] *** Joins: Enitin (~Enitin@82.180.145.228)
[10:09:14] *** Quits: randm (~randm@mx.rayprimus.com) (*.net *.split)
[10:09:14] *** Quits: talisein (~talisein@user/talisein) (*.net *.split)
[10:09:14] *** Quits: obiwahn (~heini@user/obiwahn) (*.net *.split)
[10:09:14] *** Quits: biotty (~coien@li35-173.members.linode.com) (*.net *.split)
[10:09:14] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[10:09:14] *** Quits: dongcarl (~dongcarl@pool-96-232-179-212.nycmny.fios.verizon.net) (*.net *.split)
[10:09:14] *** Quits: upp (~upp@c-71-227-220-185.hsd1.wa.comcast.net) (*.net *.split)
[10:10:39] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[10:11:11] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.223)
[10:12:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:12:33] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.223) (Max SendQ exceeded)
[10:13:01] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.223)
[10:13:52] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.223) (Max SendQ exceeded)
[10:14:23] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.103)
[10:14:34] *** Joins: randm (~randm@mx.rayprimus.com)
[10:14:34] *** Joins: talisein (~talisein@user/talisein)
[10:14:34] *** Joins: obiwahn (~heini@user/obiwahn)
[10:14:34] *** Joins: biotty (~coien@li35-173.members.linode.com)
[10:14:34] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[10:14:34] *** Joins: dongcarl (~dongcarl@pool-96-232-179-212.nycmny.fios.verizon.net)
[10:14:34] *** Joins: upp (~upp@c-71-227-220-185.hsd1.wa.comcast.net)
[10:14:58] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Max SendQ exceeded)
[10:15:02] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.103) (Max SendQ exceeded)
[10:15:17] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[10:15:27] *** Quits: SorryBeauty (~SorryBeau@103.76.184.42) (Ping timeout: 256 seconds)
[10:15:30] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.223)
[10:16:23] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[10:18:21] *** Joins: zer0x (~zer0x@58.186.50.2)
[10:18:25] *** Joins: xkuru (~xkuru@user/xkuru)
[10:23:01] *** Joins: x_kuru (xkuru@user/xkuru)
[10:25:30] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[10:26:47] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[10:28:57] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 240 seconds)
[10:29:18] *** Joins: Enitin (~Enitin@82.180.145.230)
[10:33:59] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:37:56] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[10:40:20] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:41:06] *** Joins: emerent_ (~quassel@p200300cd5743c3f1ba27ebfffed28a59.dip0.t-ipconnect.de)
[10:41:06] *** Quits: emerent (~quassel@p200300cd5743c3ebba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (erbium.libera.chat (Nickname regained by services)))
[10:41:06] *** emerent_ is now known as emerent
[10:43:37] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[10:45:03] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:46:02] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[10:49:54] *** gentooclimax is now known as climax
[10:51:17] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[10:53:12] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[10:54:13] *** Joins: p|q (~plq@94.54.154.86)
[10:54:32] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.223) (Ping timeout: 240 seconds)
[10:54:44] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[10:55:54] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.223)
[10:57:50] *** Quits: foul_owl (~kerry@23.82.193.89) (Ping timeout: 250 seconds)
[11:00:26] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[11:01:55] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.223) (Ping timeout: 256 seconds)
[11:07:41] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:08:03] *** climax is now known as gentooclimax
[11:10:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:12:06] *** Joins: foul_owl (~kerry@23.82.193.87)
[11:13:02] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[11:15:31] *** Joins: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de)
[11:16:32] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:25:06] *** Joins: frost (~frost@user/frost)
[11:29:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[11:30:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:32:09] *** Joins: sigma_ (~sigma@2.147.53.58)
[11:32:09] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[11:32:15] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[11:32:36] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[11:33:43] *** Joins: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de)
[11:34:50] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[11:37:37] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[11:40:03] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[11:40:21] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 245 seconds)
[11:43:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:45:46] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:52:07] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[11:53:22] *** Joins: SorryBeauty (~SorryBeau@103.76.184.42)
[11:55:01] *** Joins: Guest4156 (~martiert@ti0185q160-2775.bb.online.no)
[11:55:19] *** Guest4156 is now known as martiert
[11:58:59] *** Joins: zibolo (~quassel@global-deiInside018.dei.polimi.it)
[12:00:46] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[12:02:53] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[12:03:21] *** Quits: abode (~abode@2.51.240.182) (Remote host closed the connection)
[12:05:36] *** Quits: Posterdati (~posterdat@user/Posterdati) (Read error: Connection reset by peer)
[12:06:04] *** Joins: bobb_ (~bobb_@dslb-092-074-230-090.092.074.pools.vodafone-ip.de)
[12:06:31] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 256 seconds)
[12:08:27] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:09:15] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[12:10:32] *** Quits: msk (~msk@103.213.213.65) (Ping timeout: 240 seconds)
[12:10:40] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[12:11:14] *** Joins: undephin3d (~undephin3@158.181.75.6)
[12:12:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:14:12] *** Joins: Electron (~ElectronA@user/electronapps)
[12:15:27] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d91b:267d:4123:397)
[12:15:30] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 252 seconds)
[12:16:36] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Ping timeout: 240 seconds)
[12:20:56] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[12:22:36] *** Quits: Electron (~ElectronA@user/electronapps) (Ping timeout: 240 seconds)
[12:30:18] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[12:32:36] *** Joins: Posterdati (~posterdat@user/Posterdati)
[12:34:02] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[12:35:22] *** Quits: baltazar (~baltazar@84-236-97-135.pool.digikabel.hu) (Remote host closed the connection)
[12:36:35] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Ping timeout: 240 seconds)
[12:37:30] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[12:37:32] *** Quits: SorryBeauty (~SorryBeau@103.76.184.42) (Quit: Client closed)
[12:40:51] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[12:41:28] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:44:10] *** Joins: Enitin (~Enitin@82.102.22.85)
[12:44:29] *** Quits: C-Man (~C-Man@78.31.190.82) (Ping timeout: 256 seconds)
[12:49:58] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:50:44] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:51:04] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[12:52:41] *** Joins: baltazar (~baltazar@84-236-97-135.pool.digikabel.hu)
[13:02:55] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:09:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:10:32] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[13:10:57] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[13:12:26] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[13:13:41] *** Joins: plastico (~plastico@neomutt/plastico)
[13:17:21] *** Quits: ville (~ville@user/ville) (Ping timeout: 256 seconds)
[13:20:20] *** Joins: ville (~ville@user/ville)
[13:21:30] *** Joins: SorryBeauty (~SorryBeau@103.25.241.127)
[13:22:55] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[13:23:43] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[13:26:32] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[13:30:11] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d91b:267d:4123:397) (Quit: Konversation terminated!)
[13:33:26] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[13:34:24] *** sweetsymph is now known as bittersweetsymph
[13:35:11] *** Joins: unknow (~i.am@user/marlboro)
[13:35:14] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[13:35:39] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:38:19] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:39:43] *** Quits: nq (~nq@2a02:2f08:e015:a900:40da:1589:cc07:ab3) (Quit: Leaving)
[13:40:51] *** Quits: bobb_ (~bobb_@dslb-092-074-230-090.092.074.pools.vodafone-ip.de) (Quit: Client closed)
[13:43:32] *** Quits: drbeco (~beco@user/beco) (Ping timeout: 240 seconds)
[13:44:02] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:44:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:44:10] *** ChanServ sets mode: +v npaperbot
[13:44:33] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 256 seconds)
[13:48:10] *** Joins: Enitin (~Enitin@82.102.22.85)
[13:55:05] *** Joins: crankslider (~slidercra@user/slidercrank)
[13:56:45] *** Joins: frost (~frost@user/frost)
[13:56:59] *** Joins: Octarine (~Octarine@p0656794-vcngn.tkyo.nt.ngn.ppp.ocn.ne.jp)
[13:58:22] *** Joins: rendar (~rendar@user/rendar)
[13:59:01] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[13:59:49] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[14:00:55] *** Joins: Enitin (~Enitin@82.180.145.223)
[14:00:59] *** Quits: SorryBeauty (~SorryBeau@103.25.241.127) (Ping timeout: 256 seconds)
[14:06:05] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Ping timeout: 256 seconds)
[14:06:11] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[14:06:32] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[14:07:32] *** Quits: Enitin (~Enitin@82.180.145.223) (Ping timeout: 240 seconds)
[14:09:51] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:10:27] *** Quits: myon98 (~myon98@user/myon98) (Ping timeout: 265 seconds)
[14:13:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[14:14:26] *** Joins: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl)
[14:17:06] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[14:17:17] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 240 seconds)
[14:18:10] *** Quits: malloy (~jimery@120.235.172.170) (Ping timeout: 265 seconds)
[14:18:20] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:19:25] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[14:19:44] *** Joins: malloy (~jimery@120.235.172.170)
[14:25:28] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[14:26:32] *** Joins: blackout69 (~blackout6@37.183.198.248)
[14:26:57] *** Joins: myon98 (~myon98@user/myon98)
[14:27:04] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[14:31:00] *** Quits: sigma_ (~sigma@2.147.53.58) (Quit: Konversation terminated!)
[14:34:32] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:37:52] *** Quits: Octarine (~Octarine@p0656794-vcngn.tkyo.nt.ngn.ppp.ocn.ne.jp) (Quit: Client closed)
[14:42:02] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[14:42:54] *** Quits: p|q (~plq@94.54.154.86) (Ping timeout: 252 seconds)
[14:42:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[14:43:34] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[14:49:20] *** Quits: Khoyo_ (~khoyo@user/khoyo) (Quit: ZNC 1.8.2 - https://znc.in)
[14:50:26] *** Joins: Khoyo (~khoyo@user/khoyo)
[14:52:04] *** Joins: Enitin (~Enitin@82.180.145.228)
[14:52:28] *** Joins: wakeup (~wakeup@user/wakeup)
[14:54:00] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[14:54:21] *** Joins: xkuru (~xkuru@user/xkuru)
[14:57:43] *** Joins: Optimus (~risto@87.227.227.147)
[14:58:28] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[14:59:08] *** Joins: Brainium (~brainium@user/brainium)
[15:02:34] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 260 seconds)
[15:02:45] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:02:58] *** Parts: blackout69 (~blackout6@37.183.198.248) ()
[15:07:51] *** Quits: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 256 seconds)
[15:10:37] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:11:44] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[15:12:36] *** Quits: proller (~p@2a02:6b8:b081:26::1:39) (Ping timeout: 252 seconds)
[15:14:05] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:16:22] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[15:16:31] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[15:20:43] *** Joins: drbeco (~beco@user/beco)
[15:29:24] *** Joins: JohnMS_AWAY (~kvirc@194.110.240.100)
[15:31:19] *** Quits: ed (~ed@mlk-174-186.tm.net.my) (Quit: Konversation terminated!)
[15:31:43] *** Joins: myusername (~myusernam@user/myusername)
[15:31:47] *** Quits: davidlowryduda (~davidlowr@73.61.8.157) (Quit: WeeChat 3.0)
[15:33:58] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:36:50] *** Joins: lmat (~Lmat@c-73-102-193-68.hsd1.in.comcast.net)
[15:37:19] *** Joins: AmR (~AmREiSa@156.207.194.71)
[15:38:04] *** Quits: JohnMS_AWAY (~kvirc@194.110.240.100) (Ping timeout: 268 seconds)
[15:39:19] *** Joins: wakeup (~wakeup@user/wakeup)
[15:39:59] *** Joins: xkuru (~xkuru@user/xkuru)
[15:43:04] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[15:44:25] <judabuda> what is best C++ template engine to render html?
[15:44:43] <cbreak> ... render html?
[15:44:56] <cbreak> have you tried using a web browser?
[15:45:10] <cbreak> forking chrome is all the rage at the moment
[15:45:37] <cbreak> (although firefox is obviously better :)
[15:46:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[15:47:26] <furrymcgee> cpp macros are best!
[15:48:56] *** Joins: C-Man (~C-Man@static.88-198-34-209.clients.your-server.de)
[15:49:07] <judabuda> cbreak: i don't mean browser
[15:50:03] <judabuda> cbreak: i meant like forum
[15:50:09] <judabuda> for people to register
[15:50:11] <judabuda> stuff like that
[15:50:16] <judabuda> but backend is c++
[15:50:30] <judabuda> but i need templating engine to show html
[15:51:02] <AliceMeows> Sound like you want something like phpbb but it really isn't the place to ask about it
[15:51:39] <mitch0> judabuda: wrong channel (try #C++-general), but: C++ is not really good at this. if you insist, I'd look into some lua-based template engine
[15:51:51] <judabuda> im asking about tempating engine for c++ to show html(not browser) simple login page or something, something simple as text on html
[15:52:12] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[15:52:51] <furrymcgee> show html is what browsers do?
[15:53:16] <cbreak> like cppcms?
[15:53:33] <judabuda> either im explaining bad or you don't understand
[15:54:19] <furrymcgee> html input or output?
[15:54:40] <judabuda> something like this https://github.com/rep-movsd/see-phit
[15:54:44] <judabuda> furrymcgee: i think so
[15:54:51] <judabuda> i don't know terminology well
[15:59:48] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[16:02:12] <furrymcgee> I think its called a web framework
[16:03:42] <ncwbqcfe> judabuda: ppl are not into web dev so they ignore what's template engine
[16:04:27] <ncwbqcfe> except for compiler's engine for c++ templates :D
[16:04:44] <ncwbqcfe> judabuda: I mean, ppl here
[16:08:58] *** Joins: darkbit (~db@152.32.100.99)
[16:10:28] <furrymcgee> for what reason is google using c++?
[16:11:21] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:11:29] <furrymcgee> maybe as  web application framework
[16:12:39] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[16:14:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[16:15:03] *** Quits: Optimus (~risto@87.227.227.147) ()
[16:16:02] <ville> furrymcgee: speed?
[16:16:08] *** Joins: proller (~p@2a02:6b8:b081:6409::1:30)
[16:16:47] <ville> !give judabuda general
[16:16:48] <nolyc> judabuda: #C++-general for algorithms, libraries, practices, projects, tools etc.
[16:18:31] *** Joins: clime (~clime@37-48-56-199.nat.epc.tmcz.cz)
[16:20:26] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:21:22] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:23:13] *** Quits: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[16:24:00] *** Joins: Milo (~milo@tux.fi)
[16:27:36] *** Quits: myusername (~myusernam@user/myusername) (Quit: Leaving)
[16:30:44] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:31:02] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[16:31:38] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[16:32:32] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 240 seconds)
[16:34:32] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[16:37:41] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:43:01] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[16:49:22] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[16:50:46] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 245 seconds)
[16:52:36] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:54:37] *** Quits: irf21k (~irf21k@2401:4900:32b5:d3e1::122e:9ae9) (Ping timeout: 240 seconds)
[16:55:43] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[16:59:30] *** Joins: zer0x (~zer0x@58.186.50.2)
[17:04:39] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[17:05:41] *** Joins: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de)
[17:06:33] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[17:10:47] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[17:11:24] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 252 seconds)
[17:11:37] <Milo> https://dpaste.com/GKV3VW22Q is there any reason why to capture return-by-value as const reference, instead of const value in a case like this, or any other case? I'm very used to writing "const auto&", and I'm not sure where I've gotten this habit from. I do realize it's at least mostly unnecessary. gcc-10 at least seems to produce the same code regardless of which style is used.
[17:11:43] *** Quits: martiert (~martiert@ti0185q160-2775.bb.online.no) (Ping timeout: 256 seconds)
[17:12:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:12:47] <Milo> my own reasoning has something to do with showing the compiler my wishes for invoking RVO, but I'm not sure anymore if that has ever even been the case.
[17:12:52] <AliceMeows> I'm pretty sure the first one is UB
[17:12:58] *** Joins: ivii (~ivan@user/ivii)
[17:13:18] <AliceMeows> That wont affect RVO
[17:15:55] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:16:06] <Milo> can it be UB, because it seems like something any compiler would give you a solid warning about if it was wrong
[17:16:28] <AliceMeows> Compilers don't and can't always warn you
[17:16:50] <Milo> yeah, but this seems like a case that would be easily detectable
[17:17:08] *** Joins: malloy (~jimery@120.235.172.170)
[17:17:15] <AliceMeows> Its what sanitizers are for
[17:18:32] <Milo> not getting an error with static clang analysis tool
[17:19:01] <Milo> nor am I finding claims from google saying that it's UB
[17:19:16] <AliceMeows> To me it seem dangling
[17:19:33] <AliceMeows> Maybe someone else knows better than I do
[17:19:43] *** Joins: Guest2581 (~martiert@ti0185q160-2775.bb.online.no)
[17:19:49] *** Guest2581 is now known as martiert
[17:20:21] <Milo> I've been capturing values as references in certain cases for a decade. I'm suddenly questioning the validity of those decisions. :)
[17:20:29] <Raziel> it's not actually UB
[17:20:38] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:20:42] <Raziel> because it's a string literal, which is a const piece of memory
[17:20:51] <Raziel> if it was something else, it might be UB
[17:21:47] <Milo> Raziel got a suggestion what would be the most trivial type example where it might be UB?
[17:22:18] <AliceMeows> I'm not entirely sure about this, the captured types are std::string and std::string
[17:23:04] <Alipha> Milo: the code is not UB. The returned std::pair is lifetime extended
[17:23:08] <AliceMeows> They're objects had it been const char[] then it might not be considered UB but the whole thing seem really wrong thing to me to do
[17:23:31] <Raziel> oh, right, lifetime extension is also a thing
[17:23:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:24:02] <Raziel> Milo, https://wandbox.org/permlink/4qvreTXM3O3xmyFX I feel something like this would be a lot more questionable
[17:24:07] <Raziel> but I guess the lifetime extension makes it fine
[17:25:14] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[17:25:23] <Milo> hm, I don't see why that would be anymore questionable, { a + b, a - b } constructs two new items inside the pair initializer list.
[17:25:37] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[17:26:05] *** Joins: wakeup (~wakeup@user/wakeup)
[17:26:13] <Milo> but yeah, lifetime extension explains it, but is there benefit to invoking lifetime extension?
[17:26:30] <Raziel> because those results are supposedly on the stack, or possibly even just in a register, rather than being some const memory like a string literal is
[17:27:21] <Milo> ah, okay. my example may be over-trivialized in that case.
[17:28:30] *** Joins: evilpyro (~evilpyro@user/evilpyro)
[17:28:40] <Milo> https://dpaste.com/2AFTH3FNA sorry for my laziness, but this is closer to the truth
[17:28:42] <Raziel> https://en.cppreference.com/w/cpp/language/reference_initialization#Lifetime_of_a_temporary
[17:30:24] <AliceMeows> https://godbolt.org/z/rKPqeG751 seems like I was wrong and the lifetime is indeed extended
[17:30:44] <Raziel> Milo, I imagine if your m_data lives on you'll be fine
[17:31:51] <Raziel> AliceMeows, yeah, we've gotten to that conclusion too through experimental means. lol
[17:32:30] <Raziel> I guess what I'm unsure about is, how long is it extended for? until the ref falls out of any active scope?
[17:32:44] <AliceMeows> Seems to be
[17:32:44] <Raziel> cause that means you could keep it practically forever, even store it in a global or such
[17:32:55] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[17:33:08] <Raziel> we know there's no garbage collector to suddenly come in and rain on that parade, so
[17:33:24] <AliceMeows> Thankfully
[17:34:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:34:35] <Alipha> Milo: the structured bindings is a weird complication, but if you had like `const auto &x = b.foo();` and foo was `const std::string &foo() const { return this->str; }` then you're avoiding a copy vs had you used `const auto`
[17:34:35] <Milo> AliceMeows but also note that the result is the same for both variations
[17:35:30] <Milo> Alipha yeah, but that'd be entirely different thing, as return value of the function is const ref, not value.
[17:35:30] *** Joins: zer0x_ (~zer0x@58.186.50.2)
[17:36:18] <Alipha> Milo: pre-c++17 didn't have mandatory RVO, so I suppose it could be a performance improvement
[17:36:37] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[17:37:18] <Milo> I'll buy that reasoning, I've started with pre-11 stuff
[17:37:19] *** Joins: bobb_ (~bobb_@dslb-092-074-230-090.092.074.pools.vodafone-ip.de)
[17:38:14] <Raziel> Milo, https://wandbox.org/permlink/CWdZKFApLnSAb2VY
[17:38:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[17:38:26] <Raziel> I managed to make it disappear
[17:38:27] <Raziel> lol
[17:39:12] *** Quits: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[17:39:17] *** Quits: zer0x (~zer0x@58.186.50.2) (Ping timeout: 240 seconds)
[17:39:24] <Milo> layer upon layer upon layer :D
[17:39:47] <Raziel> I think the secret is going back up from the layer where the assignment happens
[17:40:41] <Milo> I cloned it, added little bit of extra stuff to the couts, and now output is different :D
[17:40:46] <Raziel> although maybe not, if I put another cout between test and go, it's still 11. but maybe it's already UB, fuck if I can tell
[17:40:49] <Raziel> yeah
[17:41:07] <Milo> https://wandbox.org/permlink/3UHvt6HZNVch9CrE I wanted to be sure what was the execution order there
[17:41:19] <Milo> but no longer 32k value at last
[17:41:49] <Milo> sounds like a classic sign of UB
[17:41:57] <Raziel> turn optimizations on too
[17:42:06] <Raziel> makes the last one 0 instead of 11 :^)
[17:42:24] <Raziel> definitely ub past some point but it's still a bit hard to figure out where exactly
[17:42:28] <Milo> I have same output options there as you had
[17:42:36] <Milo> or at least what is visible below the code
[17:42:44] <Milo> `$ clang++ prog.cc -Wall -Wextra -std=gnu++2b `
[17:43:12] <Raziel> yeah, just saying that toggling optimization changes the result as well
[17:43:25] <Raziel> which, yknow, obviously means there's ub in there
[17:43:55] <Milo> and at the same time, testing that with the godbolt, I get 0 11 11 11 0
[17:43:55] <Milo> hmm
[17:44:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:44:10] <Milo> that was with gcc-12 though
[17:44:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:44:12] *** ChanServ sets mode: +v npaperbot
[17:45:18] <Milo> clang++-13 doesn't compile that
[17:46:00] <Raziel> probably have to #include <functional> too
[17:46:07] <Raziel> cause the ref stuff is in there
[17:46:26] <Milo> there we go, 32765
[17:46:36] <Milo> well defined ub
[17:49:17] <fluter> hi, i have a strange overload issue, when i'm passing c style string, i wanna call a different version: https://www.godbolt.org/z/ve6rav7c6
[17:49:34] <fluter> but why is it not selecting append(const char*) but selection append<T>(...) ??
[17:49:37] <fluter> how can i fix this?
[17:50:31] <Raziel> fluter, how do I share an edit on godbolt, I forgot
[17:50:38] <Raziel> found it
[17:50:38] <Raziel> --- ChanServ gives voice to npaperbot
[17:50:42] <Raziel> ....thx irc
[17:50:45] <Raziel> https://www.godbolt.org/z/fhxaYEKh4
[17:50:52] <fluter> Raziel: upper right, share
[17:51:29] <Milo> well, I didn't get much wiser for the benefits of doing the capturing as const ref. the cppreference's description wasn't very clear. I shall be capturing those values by values in the future :)
[17:51:32] <fluter> Raziel: what's the issue?
[17:51:50] <fluter> also why typename CString = const char, not typename CString = const char*
[17:52:31] <Raziel> fluter, you could do either I think
[17:52:58] <Milo> I feel like I've read that from a book by scott meyers, but I cannot find which one. Went through three different "effective c++" books today to try and see if it was any of them
[17:53:11] <fluter> Raziel: right, both works
[17:53:17] <fluter> but what is the issue here?
[17:53:21] <Milo> entirely plausible that I have misunderstood something 10 years ago and been doing that ever seince :D
[17:53:22] <fluter> why my version didn't work?
[17:53:24] <Milo> since*
[17:53:28] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[17:53:53] <Raziel> fluter, I think the issue is your initial, non-template overload, doesn't count as a template specialization
[17:53:57] <Raziel> so it gets ignored in favor of the template
[17:54:13] <Alipha> fluter: you have `const char&` instead of `const char*`
[17:54:41] <Raziel> that too. apparently changing that makes it use your overload. :p
[17:54:49] <Raziel> oof
[17:55:33] *** Quits: merpnderp (sid16744@id-16744.hampstead.irccloud.com) (Ping timeout: 250 seconds)
[17:55:33] *** Quits: jakesyl__ (sid56879@2a03:5180:f:4::de2f) (Ping timeout: 250 seconds)
[17:55:59] *** Quits: sa (sid1055@2a03:5180:f::41f) (Ping timeout: 250 seconds)
[17:55:59] *** Quits: blueminder_ (sid143388@2a03:5180:f::2:301c) (Ping timeout: 250 seconds)
[17:56:39] *** Joins: merpnderp (sid16744@id-16744.hampstead.irccloud.com)
[17:56:40] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[17:56:42] <Raziel> Milo, I think in many cases there's not much benefit, since returning value is gonna do copy elision anyway
[17:57:00] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[17:57:05] *** Joins: jakesyl__ (sid56879@id-56879.hampstead.irccloud.com)
[17:57:13] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[17:57:25] *** Joins: blueminder_ (sid143388@id-143388.tinside.irccloud.com)
[17:58:59] <fluter> Alipha: what do you mean?
[17:59:32] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Ping timeout: 240 seconds)
[17:59:41] <Raziel> fluter, your function is void append(const char& ptr, size_t size), change it to void append(const char* ptr, size_t size) and it'll get used
[18:00:34] <Raziel> since the variable you're calling with is a const char*, not a const char&. even though, yeah, const char& should be able to accept const char* just fine, but it's being pedantic about it I guess
[18:00:59] <Milo> Raziel yeah fair enough. I was kind of hoping to get verification of not programming entirely incorrectly for the last decade :D
[18:01:40] <Raziel> Milo, I mean, there's nothing really wrong with it either, as long as you didn't fall into UB :p
[18:01:54] <fluter> Alipha: sorry, that was a typo, my real issues is like this: https://www.godbolt.org/z/jP6xGhz3j
[18:02:09] <fluter> i wanna all the 3 to call append(const char*, size_t)
[18:02:13] <fluter> is this possible?
[18:02:25] <fluter> again sorry i made that typo :(
[18:02:32] <fluter> it was not const char&
[18:03:00] *** Quits: callq (~callq@2409:4062:4e9a:a9bd:dc94:3973:cfd6:75e7) (Ping timeout: 240 seconds)
[18:05:01] <Raziel> fluter, https://www.godbolt.org/z/G8Gczbzbv you can cast when calling
[18:05:05] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:05:09] <Raziel> but that's obviously a bit of a pain
[18:05:34] <Raziel> you could also have even more overloads, but that's also a bit of a pain
[18:05:51] <fluter> right,
[18:06:05] <fluter> but why would char* resolves to T, not const char*?
[18:06:24] <Raziel> ¯\_(ツ)_/¯
[18:06:28] *** Inline__ is now known as Inline
[18:07:13] *** Quits: evilpyro (~evilpyro@user/evilpyro) (Quit: Leaving)
[18:07:15] <Raziel> if it's not exact I guess it goes to the template instead of the cast
[18:07:29] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[18:08:02] <Raziel> cause what if you do wnat to have a different specific one for non-const? or what if the template version handles that?
[18:08:28] <Raziel> the template version is probably considered the default handling for anything that doesn't have an exact signature overload
[18:08:32] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[18:08:37] <Alipha> Right
[18:12:45] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:14:38] <fluter> all right
[18:15:36] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d91b:267d:4123:397)
[18:16:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[18:18:14] *** Joins: Enitin (~Enitin@82.180.145.226)
[18:18:23] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:1192:1a3c:917b:5b02)
[18:18:23] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:1192:1a3c:917b:5b02) (Changing host)
[18:18:23] *** Joins: skapata (~Skapata@user/skapata)
[18:19:28] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Read error: Connection reset by peer)
[18:19:41] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[18:23:38] *** Quits: treble (~treble@user/treble) (Read error: Connection reset by peer)
[18:23:40] *** Quits: luca0N_ (~luca0N@nautilus.luca0n.com) (Ping timeout: 272 seconds)
[18:24:17] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[18:24:51] *** Joins: pulse (~pulse@user/pulse)
[18:25:19] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:26:43] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:27:22] *** Joins: luca0N (~luca0N@nautilus.luca0n.com)
[18:27:46] *** luca0N is now known as Guest7149
[18:30:09] *** Joins: treble (~treble@user/treble)
[18:31:34] <Alipha> fluter: https://www.godbolt.org/z/cvvb1ePE9
[18:31:37] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[18:31:58] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[18:32:47] *** Quits: Guest7149 (~luca0N@nautilus.luca0n.com) (Ping timeout: 252 seconds)
[18:32:47] <Raziel> Alipha, what a nice polite concept
[18:32:50] * Raziel writes it down
[18:36:15] <Alipha> Raziel: concepts makes it nicer: https://www.godbolt.org/z/h77xc7xhs
[18:36:46] <Raziel> damn, that is nice
[18:38:57] *** Joins: foobaz21289 (~foobaz212@152.37.103.80)
[18:39:01] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[18:39:55] <Alipha> that does illustrate a feature of concepts that is more than just syntatic fluff: concept-constrained overloads have a higher overload resolution priority than non-constrained overloads
[18:41:01] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.223)
[18:41:35] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[18:43:38] <Alipha> ie, i'm able to add a templated overload to append without touching the original append function, unlike the enable_if solution
[18:44:06] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[18:44:22] *** Joins: Coldberg (~C-Man@78.31.190.82)
[18:45:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:47:22] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[18:47:38] *** Joins: lispy (~lispy@user/lispy)
[18:48:03] *** Quits: C-Man (~C-Man@static.88-198-34-209.clients.your-server.de) (Ping timeout: 256 seconds)
[18:48:08] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:50:05] <constxd> kings
[18:50:46] <constxd> how do you know if zero-initialization puts an object of a given type into an ok state
[18:51:45] <constxd> like if i have some class Foo with a boost::shared_ptr member, and i make a zero-initialized Foo object, can i be sure the smart pointer member is in a valid state
[18:52:09] *** Quits: unknow (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[18:52:19] *** Joins: neure (~TimoSuora@212.146.12.146)
[18:52:50] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[18:54:03] *** Quits: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de) (Quit: Konversation terminated!)
[18:54:56] <imMute> doesn't zero initialization only work for trivially constructible types?
[18:55:23] <ville> constxd: what do you mean by zero-initialize exactly? value-initialize?
[18:55:28] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Changing host)
[18:55:28] *** Joins: ullbeking_ (sid5364@user/ullbeking)
[18:55:51] <ville> constxd: but yes boost::shared_ptr will default construct to a nullptr-like state
[18:56:24] <constxd> well it says in the case of zero-initialization, all bits are set to zero and the constructors, if any, are ignored
[18:56:51] <imMute> https://en.cppreference.com/w/cpp/language/zero_initialization also says there is no direct way to do zero-initialization - it's just what some ctors does
[18:57:03] <constxd> "if T is a class type with a default constructor that is neither user-provided nor deleted (that is, it may be a class with an implicitly-defined or defaulted default constructor), the object is zero-initialized"
[18:57:36] * imMute was thinking of allocating space, zeroing it, and then casting it to a type (which I don't think is valid either...)
[18:58:03] <constxd> I'm doing: Foo* foo = new Foo(); and in my case Foo meets the above criteria
[18:58:24] <constxd> so it should be zero-initialized, which means the boost::shared_ptr ctor won't be called, right?
[18:58:55] <imMute> where did you get that quote from?
[18:59:05] <constxd> https://en.cppreference.com/w/cpp/language/value_initialization
[18:59:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:59:17] *** ullbeking_ is now known as ullbeking
[18:59:44] <hachikuji[m]> read the whole thing
[18:59:56] <constxd> what about it?
[18:59:56] <hachikuji[m]> it tells you right there
[19:00:11] <constxd> T in this case is Foo, not boost::shared_ptr
[19:00:14] <imMute> I think having a boost::shared_ptr member prevent that zero optimization since it doesn't meet those requirements
[19:00:17] <constxd> Foo doesn't have a non-trivial default ctor
[19:00:29] <hachikuji[m]> >...the object is zero-initialized and the semantic constraints for default-initialization are checked, and if T has a non-trivial default constructor, the object is default-initialized;
[19:01:26] <constxd> wait can an implicitly-defined default constructor be non-trivial?
[19:01:28] <ville> constxd: http://www.eelis.net/c++draft/dcl.init#general-16.4
[19:01:43] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[19:02:53] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:03:37] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[19:04:06] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[19:06:23] *** Quits: zer0x_ (~zer0x@58.186.50.2) (Ping timeout: 250 seconds)
[19:06:36] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[19:06:42] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Client Quit)
[19:07:55] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[19:09:14] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[19:11:13] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[19:12:05] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:d360)
[19:13:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:13:33] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[19:15:02] *** Joins: Enitin (~Enitin@82.180.145.226)
[19:16:07] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[19:16:14] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Ping timeout: 252 seconds)
[19:17:11] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:17:15] *** Quits: foobaz21289 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:17:29] *** Joins: foobaz21289 (~foobaz212@152.37.103.80)
[19:19:13] *** Joins: rgrinberg (~textual@177.241.245.222)
[19:20:07] *** Quits: rgrinberg (~textual@177.241.245.222) (Client Quit)
[19:22:54] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[19:27:23] *** Quits: foobaz21289 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:29:14] *** Joins: Artea (~Lufia@artea.com.pt)
[19:30:11] *** Quits: andreasbuhr (~quassel@p549db74d.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:34:45] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[19:35:38] *** Joins: ckdCreations (~ckdCreati@147.55.133.139)
[19:37:41] *** Quits: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Quit: heiner)
[19:38:12] *** Quits: boreas (~heiner@94.31.85.196) (Read error: Connection reset by peer)
[19:38:37] <lispy> For the underlying memory buffer type for a STL vector implementation, would you consider using std::aligned_storage or implementing something like alignas(T) std::byte __storage[STORAGE_SIZE] etc. (using a class template wrapper of course). I ask this because I've heard that a conforming implementation could 'potentially' use far more memory than what is needed with std::aligned_storage. Are there other downsides that I should be aware of?
[19:39:45] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[19:41:33] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 256 seconds)
[19:43:02] *** Quits: zibolo (~quassel@global-deiInside018.dei.polimi.it) (Ping timeout: 250 seconds)
[19:44:57] *** Quits: bobb_ (~bobb_@dslb-092-074-230-090.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[19:45:50] <marshmallow> say I have class C, which inherits from class B, which inherits from class A. if C has a destructor, does it make sense to prevent UB to mark class B destructor as `virtual`, correct?
[19:47:45] <RokerHRO> What is the usecase for a typecast to 'auto', as shown in (8) and (9) here:  https://en.cppreference.com/w/cpp/language/explicit_cast
[19:48:07] <PJBoy> to make a copy
[19:48:21] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[19:48:58] <RokerHRO> A collegue said it is used to silence compiler warnings, e.g.:  long l = ... ;  int i = auto(l);
[19:49:26] <RokerHRO> that looks just stupid to me.
[19:49:32] <PJBoy> yeah that's non-sense
[19:49:47] <RokerHRO> or even dangerous, if that disables compiler warnings about narrowing. does it?
[19:49:51] <lispy> LOL
[19:50:01] <PJBoy> that'll be up to the compiler
[19:50:20] <PJBoy> it certainly won't stop `int i{auto(l)};` from erroring
[19:50:51] <PJBoy> { long l = LONG_MAX; int i{auto(l)}; }
[19:50:51] <geordi> error: 'auto(x)' only available with '-std=c++2b' or '-std=gnu++2b'
[19:50:55] <PJBoy> boooooo
[19:51:03] <RokerHRO> okay. good. To my understanding the "auto" evaluates the type in (), so it results to 'long' in this case, not to 'int'.
[19:51:13] <PJBoy> yeah
[19:52:12] <RokerHRO> But I still would like to see a sensible example on the cppreference page.
[19:52:24] <RokerHRO> does anyone has an idea for that?
[19:52:27] <PJBoy> maybe it can be used for returning via an explicit ctor
[19:53:07] *** Joins: foobaz21289 (~foobaz212@152.37.103.80)
[19:53:12] <PJBoy> nah that doesn't make any sense at all
[19:53:42] <RokerHRO> there must be a reason why they created this syntax. ;-)
[19:54:27] <PJBoy> lets say you had a function that took had rvalue reference parameter
[19:54:37] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[19:54:38] <PJBoy> and you wanted to pass some `obj` to it
[19:54:46] <PJBoy> but you didn't want to move `obj`, you wanted to pass a copy
[19:54:54] <PJBoy> then you'd pass `auto(obj)` to that function
[19:55:18] <RokerHRO> PJBoy: hum.. sounds sensible. :-)
[19:55:28] <RokerHRO> I'll try it. :-)
[19:56:11] *** Quits: neure (~TimoSuora@212.146.12.146) (Quit: Leaving)
[19:56:45] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[19:57:15] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[19:58:08] <marshmallow>  /cc PJBoy to my previous question
[19:59:15] <PJBoy> protected or virtual dtor, yeah
[19:59:32] <PJBoy> at every level of the hierarchy
[20:00:49] <marshmallow> PJBoy: even if class C had not declared a dtor?
[20:02:53] <PJBoy> makes no difference
[20:03:18] <marshmallow> it makes no difference wrt to what you said above, or it makes no difference declaring base class as virtual?
[20:03:19] <PJBoy> every class has a dtor unless you delete it
[20:03:28] <PJBoy> and then your class would be virtually unusable
[20:03:39] <PJBoy> so basically every class has a dtor
[20:03:51] <PJBoy> makes no difference wrt what I said earlier
[20:04:10] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[20:04:12] *** Joins: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[20:04:20] <PJBoy> { S s; s.~S(); } struct S {}; // see?
[20:04:20] <geordi>  
[20:04:52] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:05:39] <marshmallow> so if B is not declared as virtual, when C goes out of scope, B's dtor is not invoked, right?
[20:06:29] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:d360) (Ping timeout: 256 seconds)
[20:06:36] *** Quits: murdoc_x01 (~nitestryk@98.42.49.72) (Ping timeout: 240 seconds)
[20:08:08] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[20:09:57] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[20:10:32] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[20:13:32] <PJBoy> if C's dtor executes, then B's will always execute
[20:13:35] <PJBoy> regardless of anything
[20:13:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:14:22] <PJBoy> the point of the virtual dtor is so that you can delete a C object via a pointer/reference to B that points/refers to that C object
[20:14:50] *** Joins: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de)
[20:17:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:17:40] <ville> marshmallow: you need virtual when you delete through a base* that points to a derived object at the time. that's all
[20:18:35] <ville> (well i suppose you could call x.~base() on a reference too)
[20:18:57] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[20:19:45] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[20:20:17] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[20:20:28] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[20:20:44] *** Joins: bindu (~bindu@user/bindu)
[20:20:56] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:22:24] <Alipha> marshmallow: A *a = new C; delete a; // is UB unless A has a virtual destructor.
[20:24:29] <Alipha>  `A *a = new B; delete a;` is also UB. And `B *b = new C; delete b;` is UB unless A or B has a virtual destructor (if A has a virtual destructor, then that forces B's destructor to also be virtual)
[20:24:33] *** Joins: nq (~nq@2a02:2f08:e015:a900:af55:b21:1105:35cc)
[20:24:50] *** Joins: magla (~gelignite@55d49742.access.ecotel.net)
[20:25:19] <foobaz21289> hey guys I'm using the `default` to make my own move constructor, but it's not actually moving anything https://godbolt.org/z/1454Kebd8 I was expecting sth to be printed out between the "---" lines
[20:27:39] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[20:28:29] <foobaz21289> I don't get it...my expectation was the compiler give a default move ctr for StringWrapper, given that its field (just std::string) is move-able
[20:29:32] <foobaz21289> oh I think it's bc I overloaded copy ctor. DANG
[20:30:25] <PJBoy> your expectation was correct
[20:31:12] <PJBoy> if you comment out your copy ctor, you'll see why it's being called
[20:31:29] <PJBoy> in this case because it's being used from an std::initializer_list
[20:31:39] <PJBoy> which doesn't support moving objects out from
[20:32:05] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:33:14] <PJBoy> you could do this instead https://godbolt.org/z/PfEEqb5xE
[20:33:50] <Alipha> lispy: if you're paranoid about implementations being unnecessarily expensive, then you might as well not use anything from std and write everything yourself.... Just use std::aligned_storage
[20:34:21] <ville> std::initializer_list is pretty awesome
[20:34:55] <PJBoy> ikr
[20:37:57] <ville> Alipha: that would be using something from the std
[20:38:16] <ville> also it's deprecatd in 23
[20:38:59] <Alipha> aligned_storage is deprecated?
[20:39:08] <ville> yes. before you ask because it's shit
[20:39:34] <Alipha> Yeah, I didn't see the point in it, other than for documentation purposes
[20:40:17] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[20:40:27] *** Quits: foobaz21289 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:40:40] *** Joins: foobaz21289 (~foobaz212@152.37.103.80)
[20:40:59] <ville> no only was there no point it was just plain dangerous
[20:42:24] <ville> if it's insisted that it should follow the something::type convention, then why were you able to construct it at all?
[20:43:38] *** Parts: cdman (~dcm@user/dmc/x-4369397) (Leaving)
[20:44:54] *** Quits: foobaz21289 (~foobaz212@152.37.103.80) (Client Quit)
[20:45:08] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[20:45:38] *** Joins: xdrone (xdrone@93.126.252.7)
[20:53:03] <constxd> ok so just wanna make sure
[20:53:18] <constxd> is `a` guaranteed to be initialized to 0 here: https://godbolt.org/z/3M99cWWWv
[20:53:29] <constxd> or is the implementation just choosing to do that
[20:54:27] <constxd> because according to "if T is a class type with a default constructor that is neither user-provided nor deleted (that is, it may be a class with an implicitly-defined or defaulted default constructor), the object is zero-initialized and the semantic constraints for default-initialization are checked, and if T has a non-trivial default constructor, the object is default-initialized;"
[20:55:22] <constxd> it sounds like the presence of the smart pointer member means the Foo object will be default-initialized rather than zero-initialized
[20:55:46] <foobaz212> thikning about this a bit more https://godbolt.org/z/ncYcqKrbP. I don't quite understand how it's possible to move the content of a map (specifically the values), as the link shows - line 22 to be specific. If I move the value, doesn't this the map's internal pointers would get messed up?
[20:55:49] <constxd> and thus `a` would be uninitialized
[20:57:40] <ville> if it's insisted that it should follow the something::type convention, then why were you able to construct it at all?
[20:57:44] <ville> oops
[20:57:49] <Eelis> geordi, add tracked::B b; before last }
[20:57:50] <geordi> B0* B0~ error: tried to destruct destructed B0. Aborted
[20:58:25] <ville> constxd: i am guessing "a" should be garbage
[21:00:50] <constxd> is shared_ptr's default constructor non-trivial?
[21:01:22] *** Joins: jellie (~luv_panda@user/jellie)
[21:01:42] <ville> constxd: err "a" will be 0...
[21:01:48] <Alipha> foobaz212: r.second is still a valid object and still exists in the same location after you move from it.
[21:01:54] *** Joins: p|q (~plq@94.54.154.86)
[21:02:23] <constxd> ville: what's your reasoning?
[21:02:40] <foobaz212> Alipha oh. So...it's implicitly copying then? i would expect `r.second` to be deleted or something if a move happend
[21:03:21] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[21:03:39] *** Joins: kevr (~kevr@user/kevr)
[21:04:16] <Alipha> foobaz212: no, it's "getting moved".
[21:04:23] <foobaz212> or is jit ust copying the pointers, not the underlying wrapper
[21:04:30] <foobaz212> hmm I see
[21:05:01] <foobaz212> well std::move() was probably not the best name for whatever the hell it's doing :)
[21:05:33] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[21:06:20] <foobaz212> Alipha I actually don't understand why it's not getting moved. I believe the T&& default ctor will be called, which should move the StringWrapper right?
[21:07:00] <foobaz212> oh sorry I misread
[21:07:07] <constxd> "otherwise, the object is zero-initialized and the semantic constraints for default-initialization are checked, and if T has a non-trivial default constructor, the object is default-initialized;"
[21:07:08] <Alipha> foobaz212: why don't you think any moving is getting done?
[21:07:09] <foobaz212> yes it's getting moved, ok:)
[21:07:24] <constxd> does this mean the object is both zero-initialized *and* default-initialized?
[21:07:42] <constxd> (when T has a non-trivial default constructor)
[21:07:55] <foobaz212> sorry I misread your initial repsone - all clear now. It's getting moved, yes that's fine, but it's invalidating the original thing, right?
[21:08:03] <foobaz212> not invalidating**
[21:08:31] <foobaz212> in rust if I move sth from a -> b, a gets invalidated. I think C++ semantics for move is different
[21:09:36] <foobaz212> >" r.second is still a valid object and still exists in the same location after you move from it." Not sure how it can be a valid object after is moved from, but maybe I have to read up more on what "moving" means in c++ :)
[21:10:02] <hachikuji[m]> it's up to you not to reuse moved-out-of value
[21:11:18] <hachikuji[m]> and more often than not, it's still valid and can be reused, mostly if you move something into it again
[21:12:18] <Alipha> foobaz212: a move constructor or move assignment operator doesn't actually do anything special. By calling a move ctor/op= of class Foo, you're just indicating to Foo that, "hey, I don't need the content of this object anymore, so you can steal its contents if you want"
[21:12:30] <ville> constxd: https://godbolt.org/z/TTfnb8zMc   http://www.eelis.net/c++draft/dcl.init#general-16.4    http://www.eelis.net/c++draft/dcl.init#general-9.1.2
[21:13:59] <constxd> ville: so if T has a non-trivial default constructor then the object is zero-initialized *and* default-initialized?
[21:14:25] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:14:34] <constxd> just not sure if im reading that last part right (http://www.eelis.net/c++draft/dcl.init#general-9.1.2)
[21:15:53] <ville> constxd: your guess is as good as mine. usually that part of the rules is written either this or the other thing
[21:17:20] <constxd> meh it seems like every implementation zeroes `a` anyway so i'm just gonna assume that's safe to rely on
[21:17:27] <Alipha> { std::string x("Hello"); std::string y(std::move(x)); std::cout << x, y; } // foobaz212, some classes are able to take advantage of a move constructor to quickly transfer resources
[21:17:28] <geordi> , Hello
[21:17:30] <Alipha> { std::array<char, 3> x{'h', 'i', '\0'}; std::array<char, 3> y(std::move(x)); std::cout << x.data(), y.data(); } // some classes are not, and so they typically just revert to a dumb copy
[21:17:31] <geordi> hi, hi
[21:17:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[21:18:21] <foobaz212> ahh interesting
[21:18:30] <ville> constxd: http://www.eelis.net/c++draft/dcl.init#general-6.2    http://www.eelis.net/c++draft/dcl.init#general-6.1 would get you the guaranteed 0 for the member
[21:19:00] <foobaz212> thanks for clarifying, this makes a lot of sense. I'm curious why in the 2nd example no error is thrown...if you're expecting something to be moved, and it doesn't, I feel it calls for an error?
[21:19:08] <ville> constxd: 9.12 gets you to zero-initialization and then those two
[21:19:14] <ville> err 9.1.2
[21:22:10] *** Joins: rgrinberg (~textual@177.241.245.222)
[21:22:41] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[21:24:01] <Alipha> foobaz212: unless you explicitly delete the move constructor/op=, then a copy is done if there's no move ctor/op= defined
[21:24:05] <ville> constxd: initialization rules is a great game
[21:25:19] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:25:28] *** Joins: sobkas (~sobkas@95.175.17.217)
[21:25:30] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:27:54] *** Joins: Brainium (~brainium@user/brainium)
[21:29:47] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d91b:267d:4123:397) (Quit: Konversation terminated!)
[21:30:21] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:31:25] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[21:31:45] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[21:32:05] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[21:38:17] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:38:45] *** Joins: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com)
[21:40:14] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[21:40:22] *** Joins: Techcable (~Techcable@168.235.93.147)
[21:44:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:44:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:44:12] *** ChanServ sets mode: +v npaperbot
[21:44:45] *** Quits: proller (~p@2a02:6b8:b081:6409::1:30) (Ping timeout: 252 seconds)
[21:45:47] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[21:47:55] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Ping timeout: 256 seconds)
[21:55:49] <lispy> Alipha: I appreciate the response.
[21:56:56] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 250 seconds)
[21:57:16] *** Joins: slavfox (~slavfox@93.158.232.111)
[21:57:24] *** Joins: neet (~neet@136.41.96.251)
[21:58:57] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d91b:267d:4123:397)
[21:59:24] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[22:00:12] *** Quits: nq (~nq@2a02:2f08:e015:a900:af55:b21:1105:35cc) (Quit: Leaving)
[22:02:39] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[22:03:14] *** Quits: Perry (~perry@coffee-break.at) (Quit: ZNC - http://znc.in)
[22:03:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[22:04:00] *** Joins: Perry (~perry@coffee-break.at)
[22:04:30] *** Joins: slavfox (~slavfox@93.158.232.111)
[22:06:05] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[22:07:00] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:07:10] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[22:10:01] *** Quits: neet (~neet@136.41.96.251) (Ping timeout: 256 seconds)
[22:10:22] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[22:11:32] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[22:11:43] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:11:57] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[22:14:49] *** Joins: slavfox (~slavfox@93.158.232.111)
[22:15:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:15:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:17:12] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[22:17:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:18:31] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:18:56] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (Quit: brb)
[22:20:13] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[22:20:20] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:7ced:662b:151f:9503)
[22:20:25] *** Joins: slavfox_ (~slavfox@93.158.232.111)
[22:20:33] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:20:53] *** Joins: minimotomusashi (~minimotom@c-98-197-61-131.hsd1.tx.comcast.net)
[22:21:38] *** Quits: furrymcgee (~devuan@cgn-213-196-210-225.nc.de) (Quit: leaving)
[22:23:33] <minimotomusashi> Good afternoon guys.
[22:23:36] <minimotomusashi> What is the difference between the following two function declarations?
[22:23:45] <minimotomusashi> void foo(int& bar);
[22:23:53] <minimotomusashi> void foo(int* bar):
[22:23:58] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[22:25:53] *** Quits: slavfox_ (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[22:26:01] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[22:26:16] <Alipha> For the first, bar is a reference. For the second, bar is a pointer. You can often accomplish the same goals with either references or pointers, but references have a cleaner syntax, so they're preferred generally
[22:26:44] <Alipha> minimotomusashi: you may want a book
[22:27:36] *** whatsupboy is now known as skipper
[22:28:50] <minimotomusashi> Can I pass a pointer into the declaration that's expecting a reference, void foo(int& bar); ?
[22:29:17] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[22:29:37] <hachikuji[m]> no
[22:30:22] <minimotomusashi> Can I pass a identifier that's not a reference to the declaration that's expecting a reference, void foo(int& bar); ?
[22:30:35] <hachikuji[m]> but you can always just dereference the pointer
[22:31:06] *** Joins: slavfox (~slavfox@93.158.232.111)
[22:31:42] <minimotomusashi> Thanks guys!
[22:32:20] <minimotomusashi> I could always code it up and see, but I've just finished watching a couple videos on the subject, and needed a break : D
[22:34:16] <minimotomusashi> I also need to research where/how this stuff is actually stored on a computer, RAM, CPU, HEAP/STACK, maybe after that it will make a bit more sense to me.
[22:34:53] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:34:58] *** Quits: Leone (~Leo@216.154.12.122) ()
[22:35:13] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[22:36:28] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Client Quit)
[22:36:48] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[22:40:58] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:41:24] <Alipha> !give minimotomusashi books
[22:41:25] <nolyc> minimotomusashi: A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[22:41:41] <Alipha> YouTube videos is not a great way to learn c++
[22:42:10] <minimotomusashi> Thanks guys, really appreciate the help.
[22:44:15] <lispy> Alipha: Agreed, I can imagine that reviewing the material you've learned would be agonising as well
[22:45:43] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:46:18] *** Joins: pulse (~pulse@user/pulse)
[22:47:38] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:50:18] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 272 seconds)
[22:56:15] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 252 seconds)
[22:59:32] *** Quits: osXnut (~osXnut@77.125.126.151) (Remote host closed the connection)
[23:03:07] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:04:02] <minimotomusashi> Interesting, passing in a normal variable/identifier to a function that takes in a reference, converts its type to reference.
[23:07:54] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[23:08:12] <cbreak> minimotomusashi: not really
[23:08:42] <cbreak> minimotomusashi: a function that takes an argument by reference requires that you pass some form of object. It will then receive a reference to said object.
[23:08:45] <cbreak> this is normal.
[23:08:58] <cbreak> there's no type conversion involved usually
[23:09:42] <minimotomusashi> Interesting, thank you!
[23:11:25] <cbreak> minimotomusashi: foo(int x); // this function wants an int value
[23:11:32] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 240 seconds)
[23:11:42] <cbreak> minimotomusashi: bar(int const & y); // this function wants an int _object_
[23:12:05] <cbreak> in this case, a const object, so there are some additional rules about it
[23:12:32] <cbreak> a function might want to receive an object for efficiency, so it can actually access the original object, not a copy of it, not just its value
[23:12:51] <cbreak> or it might want to actually change the object (via a non-const ref)
[23:13:19] <minimotomusashi> foo(int x); // creates a copy of x inside the scope of the function
[23:13:56] <minimotomusashi> foo(int & x); // takes in the original int _object_, and any changes is reflected everywhere it's used.
[23:14:00] <minimotomusashi> Right?
[23:14:59] <cbreak> not exactly
[23:15:16] <cbreak> when passing-by-value, the copy is made by the caller, not the called function
[23:15:23] <cbreak> the copy is made outside foo
[23:15:30] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:15:34] <minimotomusashi> Insightful!
[23:15:48] <cbreak> but when passing by reference, indeed, the object itself is passed
[23:17:30] *** Quits: xdrone (xdrone@93.126.252.7) (Read error: Connection reset by peer)
[23:17:39] <minimotomusashi> Preference of returning a value, vs passing its reference in? a = foo(a); vs foo(&a); ?
[23:17:58] <cbreak> you shouldn't use pointers for this
[23:18:05] *** Joins: xdrone (xdrone@93.126.252.7)
[23:18:14] <cbreak> either use references, or return by value. I recommend you return values normally.
[23:18:26] <barometz> ^
[23:18:27] <cbreak> there are reasons to use out-parameters, but they are less common than reasons to use return values.
[23:18:54] <cbreak> code in general is easier to read when you avoid out parameters, at least unless they're expected
[23:19:09] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:19:11] <minimotomusashi> Very insightful, thanks again.
[23:19:25] <barometz> inout parameters make it impossible to provide a const value as input and assign the result to something else
[23:19:46] <cbreak> indeed.
[23:19:57] <cbreak> I use out parameters a lot in very performance critical code
[23:20:14] <cbreak> but then, I usually pass in large buffers of data, not just simple objects
[23:20:17] <minimotomusashi> Thanks as well barometz
[23:20:26] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[23:20:38] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:a132:2b5b:ce74:5a64)
[23:21:00] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[23:21:25] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[23:34:12] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[23:41:46] *** Quits: rgrinberg (~textual@177.241.245.222) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:43:20] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:43:33] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:45:03] *** Quits: xdrone (xdrone@93.126.252.7) (Remote host closed the connection)
[23:48:51] *** Joins: Enitin (~Enitin@82.180.145.228)
[23:52:56] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:57:16] *** Joins: Leone (~Leo@216.154.12.122)
[23:57:18] *** Joins: nq (~nq@2a02:2f08:e015:a900:4c2b:6fcb:65:18e)
[23:57:22] *** Joins: nq_ (~nq@2a02:2f08:e015:a900:4c2b:6fcb:65:18e)
[23:57:28] *** Quits: nq_ (~nq@2a02:2f08:e015:a900:4c2b:6fcb:65:18e) (Remote host closed the connection)
[23:58:23] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:2ed6:1eb0:fc62:3192)
[23:58:23] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:2ed6:1eb0:fc62:3192) (Changing host)
[23:58:23] *** Joins: RoKenn (~RoKenn@user/rokenn)
