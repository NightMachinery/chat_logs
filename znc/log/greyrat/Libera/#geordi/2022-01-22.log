[09:10:53] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[16:46:33] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:20:21] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 256 seconds)
[18:22:00] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[23:19:02] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[23:19:54] <CarloWood> { string_view sv = "abc def ghi"; auto d = sv.substr(sv.first_of('d')); cout << d; }
[23:19:54] <geordi> error: 'using string_view = class basic_string_view<char>' {aka 'class basic_string_view<char>'} has no member named 'first_of'; did you mean 'find_first_of'? (fix known)
[23:20:01] <CarloWood> { string_view sv = "abc def ghi"; auto d = sv.substr(sv.find_first_of('d')); cout << d; }
[23:20:01] <geordi> def ghi
[23:21:39] <CarloWood> { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto e = dv.substr(dv.length() - dv.find_last_of('f')); cout << 'e'; }
[23:21:40] <geordi> e
[23:21:45] <CarloWood> { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto e = dv.substr(dv.length() - dv.find_last_of('f')); cout << e; }
[23:21:46] <geordi> hi
[23:22:37] <CarloWood> { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto e = dv.substr(dv.length() - dv.find_last_of('f')); cout << "dv = \"" << dv << \", e =\"" << e << "\"."; }
[23:22:37] <geordi> dv = "def ghi, e ="hi".
[23:23:33] <CarloWood> { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto e = dv.substr(dv.find_last_of('f') + 1); cout << "dv = \"" << dv << \", e =\"" << e << "\"."; }
[23:23:34] <geordi> dv = "def ghi, e =" ghi".
[23:24:08] <CarloWood> { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto e = dv.substr(0, dv.find_last_of('f')); cout << "dv = \"" << dv << \", e =\"" << e << "\"."; }
[23:24:09] <geordi> dv = "def ghi, e ="de".
[23:24:16] <CarloWood> { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto e = dv.substr(0, dv.find_last_of('f') + 1); cout << "dv = \"" << dv << \", e =\"" << e << "\"."; }
[23:24:16] <geordi> dv = "def ghi, e ="def".
[23:24:39] <CarloWood> { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto ev = dv.substr(0, dv.find_last_of('f') + 1); cout << "dv = \"" << dv << \", ev =\"" << ev << "\"."; }
[23:24:39] <geordi> dv = "def ghi, ev ="def".
[23:25:35] <CarloWood> { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto ev = dv.substr(dv.find_first_of('d') + 1); cout << "dv = \"" << dv << \", ev =\"" << ev << "\"."; }
[23:25:36] <geordi> dv = "def ghi, ev ="ef ghi".
[23:26:40] <CarloWood> { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto ev = dv.substr(dv.find_first_of('d'), dv.find_last_of('f') - dv.find_first_of('d') + 1); cout << "dv = \"" << dv << \", ev =\"" << ev << "\"."; }
[23:26:41] <geordi> dv = "def ghi, ev ="def".
[23:27:18] <CarloWood> { string_view sv = "abc def ghi"; char c = 'd'' auto dv = sv.substr(sv.find_first_of('d')); auto ev = dv.substr(dv.find_first_of(c), dv.find_last_of('f') - dv.find_first_of(c) + 1); cout << "dv = \"" << dv << \", ev =\"" << ev << "\"."; }
[23:27:18] <geordi> error: Unexpected end of request. Expected any symbol.
[23:27:34] <CarloWood> { string_view sv = "abc def ghi"; char c = 'd'; auto dv = sv.substr(sv.find_first_of('d')); auto ev = dv.substr(dv.find_first_of(c), dv.find_last_of('f') - dv.find_first_of(c) + 1); cout << "dv = \"" << dv << \", ev =\"" << ev << "\"."; }
[23:27:35] <geordi> dv = "def ghi, ev ="def".
[23:27:47] <CarloWood> { string_view sv = "abc def ghi"; char c = 'e'; auto dv = sv.substr(sv.find_first_of('d')); auto ev = dv.substr(dv.find_first_of(c), dv.find_last_of('f') - dv.find_first_of(c) + 1); cout << "dv = \"" << dv << \", ev =\"" << ev << "\"."; }
[23:27:48] <geordi> dv = "def ghi, ev ="ef".
[23:27:58] <CarloWood> { string_view sv = "abc def ghi"; char c = 'd'; auto dv = sv.substr(sv.find_first_of('d')); auto ev = dv.substr(dv.find_first_of(c), dv.find_last_of('f') - dv.find_first_of(c) + 1); cout << "dv = \"" << dv << \", ev =\"" << ev << "\"."; }
[23:27:58] <geordi> dv = "def ghi, ev ="def".
[23:29:56] <CarloWood> { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto ev = f(dv, 'd'); cout << "dv = \"" << dv << \", ev =\"" << ev << "\"."; } string_view f(string_view const& dv, char c) { return dv.substr(dv.find_first_of(c), dv.find_last_of('f') - dv.find_first_of(c) + 1); }
[23:29:56] <geordi> Same output.
[23:31:30] <CarloWood> { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto ev = f(dv, 'd'); cout << "dv = \"" << dv << \", ev =\"" << ev << "\"."; } string_view f(string_view const& dv, char c) { return dv.substr(dv.find_first_of(c), dv.find_last_of('f') - dv.find_first_of(c) + 1); }
[23:31:31] <geordi> Still same output.
[23:32:09] <Eelis> geordi, replace last statement in main with SHOW(dv);SHOW(ev);
[23:32:09] <geordi> error: Unexpected `\` after ` dv << `. Expected additive-expression.
[23:32:23] <Eelis> geordi, erase first \ after dv <<
[23:32:24] <geordi> dv = "def ghi, ev ="def".
[23:42:32] <CarloWood> geordi: show
[23:42:32] <geordi> { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto ev = f(dv, 'd'); cout << "dv = \"" << dv << ", ev =\"" << ev << "\"."; } string_view f(string_view const& dv, char c) { return dv.substr(dv.find_first_of(c), dv.find_last_of('f') - dv.find_first_of(c) + 1); }
[23:42:55] <CarloWood> I missed a "
[23:43:27] <CarloWood>  { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto ev = f(dv, 'd'); SHOW(dv); SHOW(ev); } string_view f(string_view const& dv, char c) { return dv.substr(dv.find_first_of(c), dv.find_last_of('f') - dv.find_first_of(c) + 1); } 
[23:43:28] <geordi> dv = def ghi ev = def
[23:44:37] <CarloWood>  { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto ev = f(dv, 'd'); SHOW(dv); SHOW(ev); SHOW(dv.begin());} string_view f(string_view const& dv, char c) { return dv.substr(dv.find_first_of(c), dv.find_last_of('f') - dv.find_first_of(c) + 1); } 
[23:44:38] <geordi> dv = def ghi ev = def dv.begin() = def ghi
[23:45:12] <CarloWood>  { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto ev = f(dv, 'd'); TYPE(dv.begin()); } string_view f(string_view const& dv, char c) { return dv.substr(dv.find_first_of(c), dv.find_last_of('f') - dv.find_first_of(c) + 1); } 
[23:45:12] <geordi>  
[23:45:25] <CarloWood> eelis: How to print a type of something again?
[23:45:29] <Eelis> << TYPE(3)
[23:45:30] <geordi> prvalue int
[23:45:43] <CarloWood>  { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto ev = f(dv, 'd'); cout << TYPE(dv.begin()); } string_view f(string_view const& dv, char c) { return dv.substr(dv.find_first_of(c), dv.find_last_of('f') - dv.find_first_of(c) + 1); } 
[23:45:44] <geordi> prvalue const char*
[23:45:53] <Eelis> { SHOW(TYPE(3)); }
[23:45:53] <geordi> TYPE(3) = prvalue int
[23:46:52] <CarloWood>  { string_view sv = "abc def ghi"; auto dv = sv.substr(sv.find_first_of('d')); auto ev = f(dv, 'd'); cout << (void*)dv.begin() << ' ' << (void*)ev.begin(); } string_view f(string_view const& dv, char c) { return dv.substr(dv.find_first_of(c), dv.find_last_of('f') - dv.find_first_of(c) + 1); } 
[23:46:53] <geordi> 0x4d430f 0x4d430f
[23:47:10] <CarloWood> I am just going to compare the "iterators" that turn out to be pointers anyway.
[23:47:20] <CarloWood> Sue me if that is against the standard.
[23:47:47] <Eelis> what does that buy you over the standard-supported solution of comparing .data() ?
[23:48:16] <CarloWood> That I didn't have to think about data(). But now that you pointed that out...
[23:48:41] <Eelis> { auto s = "bla"sv; auto x = s.substr(0, 2); cout << (s.data() == x.data()); }
[23:48:42] <geordi> true
