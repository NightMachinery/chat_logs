[00:00:25] *** Joins: libc (~weechat@user/tessio)
[00:00:55] *** ormaaj2 is now known as ormaaj
[00:01:57] *** Quits: junebug (~junebug@2600:1700:3db0:2540:ac97:3ea9:3561:e0d7) (Ping timeout: 240 seconds)
[00:11:17] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[00:13:12] *** Quits: Kyuzo68 (~Kyuzo@host-79-21-30-230.retail.telecomitalia.it) (Quit: Konversation terminated!)
[00:19:38] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[00:20:14] *** Quits: ubique (~ubique@user/ubique) (Quit: .)
[00:22:50] *** Quits: e0- (ec@rie.sdf.org) (Remote host closed the connection)
[00:23:12] *** Joins: e0 (~x@rie.sdf.org)
[00:23:12] *** Quits: e0 (~x@rie.sdf.org) (Changing host)
[00:23:12] *** Joins: e0 (~x@user/e0)
[00:24:20] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Remote host closed the connection)
[00:26:01] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[00:28:45] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Remote host closed the connection)
[00:30:38] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[00:30:57] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 240 seconds)
[00:31:10] *** Joins: moha (uid506645@id-506645.helmsley.irccloud.com)
[00:31:37] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[00:31:59] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[00:32:12] *** Joins: FoodMan (~glucose@user/foodman)
[00:32:27] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[00:33:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:35:43] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Quit: WeeChat 3.3)
[00:36:26] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[00:42:11] *** Joins: lavaball (felix@31.204.155.215)
[00:42:58] *** Quits: bud (~bud@user/bud) (Ping timeout: 256 seconds)
[00:43:33] *** Parts: moha (uid506645@id-506645.helmsley.irccloud.com) ()
[00:48:56] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Remote host closed the connection)
[00:50:33] *** Joins: tobybl (~tobybl@213.31.132.151)
[00:51:23] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1cb3:a1b7:6fb3:1939)
[00:51:23] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1cb3:a1b7:6fb3:1939) (Changing host)
[00:51:23] *** Joins: skapata (~Skapata@user/skapata)
[00:51:25] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[00:54:17] *** Joins: grettke (~grettke@14-251-182-166.mobile.uscc.com)
[00:56:00] *** Quits: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net) (Ping timeout: 256 seconds)
[00:58:26] *** Joins: bud (~bud@user/bud)
[00:59:46] *** Joins: timj (~timj@user/timj)
[01:00:28] *** Joins: junebug (~junebug@2600:1700:3db0:2540:1b3f:f726:5111:27f0)
[01:01:20] *** Quits: tobybl (~tobybl@213.31.132.151) (Remote host closed the connection)
[01:03:30] *** Joins: grettke_ (~grettke@184.62.226.206)
[01:04:37] *** Quits: grettke (~grettke@14-251-182-166.mobile.uscc.com) (Ping timeout: 240 seconds)
[01:05:14] *** Joins: codebam (~codebam@user/codebam)
[01:06:16] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[01:06:28] *** Quits: codebam (~codebam@user/codebam) (Client Quit)
[01:06:47] *** Joins: codebam (~codebam@user/codebam)
[01:06:56] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:07:17] *** Quits: junebug (~junebug@2600:1700:3db0:2540:1b3f:f726:5111:27f0) (Ping timeout: 240 seconds)
[01:14:52] *** grettke_ is now known as grettke
[01:14:52] *** Quits: grettke (~grettke@184.62.226.206) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:19:19] *** Joins: grettke (~grettke@184.62.226.206)
[01:21:57] *** Quits: kevgao (~kevgao@user/kevgao) (Ping timeout: 240 seconds)
[01:23:17] *** Quits: dreamon (~dreamon@pd9503f67.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[01:24:26] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[01:26:40] <Enissay> `awk '!/^\s*\d+\s*$/ {next;} 1' ./nr_list.txt` This is meant to skip all lines not containing digits only (with spaces). There are other conditions applied but this first onw fails already and cannot go further
[01:27:05] *** Joins: junebug (~junebug@2600:1700:3db0:2540:a454:e6fe:6ce0:e4a4)
[01:27:18] *** Joins: stemid (~nocturnal@i-lands.anark.ist)
[01:27:18] <lopid> #awk
[01:27:24] <Enissay> Oh
[01:28:00] <stemid> hey is there a way to get the stdout of a command in a variable and stdout at the same time? if I do out=$(cmd) it's not output to stdout as usual.
[01:28:02] <Enissay> I didnt know it exists... Saved :-)
[01:29:18] *** Quits: grettke (~grettke@184.62.226.206) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:29:22] <twkm> so output it yourself.
[01:29:36] *** Joins: sazawal (~sazawal@122.161.88.7)
[01:30:12] *** Quits: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (Remote host closed the connection)
[01:30:39] *** Joins: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[01:34:15] *** Joins: stonkey (~stonkey@user/stonkey)
[01:34:50] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Quit: Leaving)
[01:36:14] *** Quits: martinus__ (~martin@96.19.201.77.rev.sfr.net) (Ping timeout: 256 seconds)
[01:38:03] <mknod> stemid, what $() does is capturing the output of the command. So yes, it output to stdout as usual.
[01:38:40] *** Quits: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (Remote host closed the connection)
[01:39:05] *** Joins: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[01:39:34] <mknod> $ var="$(echo output | tee /dev/tty)"; echo "var = $var"
[01:39:34] <mknod> output
[01:39:34] <mknod> var = output
[01:41:19] *** Quits: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (Remote host closed the connection)
[01:42:57] *** Joins: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[01:43:31] *** Joins: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3)
[01:45:02] *** Joins: cdown_ (~cdown@188.214.11.14)
[01:46:49] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[01:47:00] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[01:47:10] *** Quits: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (Remote host closed the connection)
[01:47:40] *** Joins: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[01:47:50] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:47:58] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 268 seconds)
[01:48:01] *** cdown_ is now known as cdown
[01:48:08] *** Quits: nucleargrave (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[01:48:58] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Client Quit)
[01:51:07] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[01:52:15] <stemid> ok. I just did echo of the output after. good enough
[01:52:38] *** Joins: sazawal_ (~sazawal@122.161.92.186)
[01:53:10] *** Quits: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (Remote host closed the connection)
[01:53:57] *** Quits: sazawal (~sazawal@122.161.88.7) (Ping timeout: 240 seconds)
[01:54:06] *** Joins: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[01:54:08] *** sazawal_ is now known as sazawal
[01:54:12] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[01:56:17] *** Quits: junebug (~junebug@2600:1700:3db0:2540:a454:e6fe:6ce0:e4a4) (Ping timeout: 240 seconds)
[02:00:37] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 240 seconds)
[02:01:10] *** Quits: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (Ping timeout: 256 seconds)
[02:03:18] *** Joins: earendel (uid498179@user/earendel)
[02:04:21] *** Joins: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[02:06:17] *** Quits: magla (~gelignite@55d4bf95.access.ecotel.net) (Quit: Stay safe!)
[02:07:53] *** Joins: alschaapman (alschaapma@user/alschaapman)
[02:08:08] <alschaapman> Bash is really screwing with my mind tonight
[02:08:58] <alschaapman> I'm trying to do a little one-liner which just does "for every file in this directory, if a file with the same name exists in this other directory, print the full path to the file in the other directory"
[02:09:48] <alschaapman> for i in "./*"; do [[ -e /var/cache/pacman/pkg/${i#./} ]] && echo /var/cache/pacman/pkg/${i#./}; done
[02:09:57] *** Joins: [-_-] (~fractal@user/---/x-1675478)
[02:10:03] <[-_-]> Hello
[02:10:12] <[-_-]> what is specail about printf -v
[02:10:17] <[-_-]> I mean why use it?
[02:10:17] *** Joins: Kyuzo68 (~Kyuzo@host-79-21-30-230.retail.telecomitalia.it)
[02:10:26] <[-_-]> what is wrong with var=value?
[02:10:35] <earnestly> Nothing
[02:10:37] *** Joins: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net)
[02:10:37] <alschaapman> That for loop looks like exactly what I'm trying to do, but it doesn't work
[02:10:59] <[-_-]> earnestly: https://gist.githubusercontent.com/AladW/de1c5676d93d05a5a0e1/raw/16e010ecda9f2328e1e22d4e02ac814ed27717b4/gistfile1.txt
[02:11:04] <earnestly> You can use printf -v to synthesise a string, such as dates, without having to fork
[02:11:10] <alschaapman> For context, the directory I'm running that in is called /var/cache/repo/satoshi/backup
[02:11:34] <alschaapman> I want a list of every file in /var/cache/pacman/pkg that has the same name as a file in /var/cache/repo/satoshi/backup
[02:11:36] <[-_-]> ah...
[02:11:39] <[-_-]> Understood
[02:11:44] *** Quits: Kyuzo68 (~Kyuzo@host-79-21-30-230.retail.telecomitalia.it) (Client Quit)
[02:12:04] <[-_-]> so it is like var=$(printf format value)
[02:12:14] <alschaapman> What's even crazier is that if I change the test to ! -e, I get a list of *ALL* the files in /var/cache/pacman/pkg
[02:12:17] <alschaapman> HUH?????????
[02:12:24] <earnestly> [-_-]: I'm not sure what it's doing here though, but yes
[02:12:36] <[-_-]> thank you earnestly
[02:13:02] <[-_-]> I got that link from 'https://wiki.archlinux.org/title/acpid#Getting_user_name_of_the_current_display' (just giving it for context)
[02:14:29] <earnestly> I'm not sure why they're using indirection like this, I'm not sure why it exists as a function at all
[02:14:45] <alschaapman> It's because I quoted the glob. Never mind
[02:15:02] *** Quits: xx (~xx@user/xx) (Ping timeout: 240 seconds)
[02:16:21] *** Quits: razend (~razend@94.200.42.14) (Ping timeout: 256 seconds)
[02:17:56] *** Joins: rcernin (~rcernin@124.190.149.221)
[02:18:27] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[02:18:58] <earnestly> [-_-]: I wouldn't use grep and such here, I think it was an old script they wrote
[02:19:58] <[-_-]> okay, then I will not
[02:20:48] *** Joins: sszark (~sszark@h-155-4-130-230.NA.cust.bahnhof.se)
[02:21:00] *** Quits: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[02:21:16] <earnestly> [-_-]: Probably could be done more like: while IFS= read -rd '' env; do for arg; case $env in "$arg"=*) export "$env"; esac; done; done < /proc/"$pid"/environ
[02:21:17] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54f844-160.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:21:21] <earnestly> Not tried
[02:21:29] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[02:22:01] <earnestly> [-_-]: But since this doesn't need to be a function I'd remove the cleverness and just use a case statement over each FOOENV=*) you want to match against
[02:22:17] *** Parts: alschaapman (alschaapma@user/alschaapman) ()
[02:22:22] <earnestly> The pid acquisition could probably be better
[02:23:06] <sszark> I have a function in a script. But i want a process i'm calling to be able to call this function itself during it's own runtime. How would you properly source something like that?
[02:23:07] <earnestly> But, you probably want to rethink this
[02:23:35] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[02:24:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[02:24:53] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[02:26:38] *** Quits: Guest3076 (~Guest30@66.115.252.46) (Quit: Client closed)
[02:26:48] <sszark> I have an example here if what i said wasn't clear. https://pastebin.com/raw/eZupFBs5
[02:28:09] <earendel> moo
[02:29:36] <earnestly> sszark: Create a script
[02:29:50] <earendel> if that process is a bash script, you can _source_ the file defining it there. u familiar
[02:30:01] <earendel> with sourcing?
[02:30:34] *** Quits: saki (~saki@gateway/tor-sasl/saki) (Remote host closed the connection)
[02:30:41] <earendel> it will behave as if embedded  in the script you are running.
[02:30:50] *** Joins: saki (~saki@gateway/tor-sasl/saki)
[02:31:17] <earendel> correct?
[02:31:33] <[-_-]> okay
[02:31:44] <[-_-]> gotta go
[02:31:47] *** Quits: [-_-] (~fractal@user/---/x-1675478) (Quit: ZZZzzz?)
[02:31:52] <earendel> bye\\
[02:32:20] *** Quits: PeGaSuS (ubuntu@user/pegasus) (Quit: Goodbye! - WeeChat 3.4)
[02:33:39] *** Joins: PeGaSuS (ubuntu@user/pegasus)
[02:34:04] <sszark> I'm familiar with sourcing. But i figured there might be a way to bring functions into scope. Similar to env variables. So my only option is sourcing it inside of vim in this case?
[02:34:57] *** Joins: kurahaupo (~kurahaupo@pa49-182-131-41.pa.qld.optusnet.com.au)
[02:36:57] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 240 seconds)
[02:37:10] <earnestly> sszark: Write a script, it's better in every way
[02:37:34] <earnestly> Turn it into a useful, standalone tool.  Everything else on the system knows how to execute files
[02:39:28] <pj> sszark: functions can't be exported.
[02:40:35] <sszark> hmm i guess, but i was trying to avoid needing a bunch of helper scripts. If i could put it all in the same one.
[02:40:37] <earnestly> smh when seeing pro advice, writing scripts, and not realising how superior it is.  Like pearls before swine I tell you
[02:40:41] <sszark> That's good to know, thanks pj
[02:40:46] <earnestly> Yes
[02:40:53] <earnestly> Because making one thing do many things is great
[02:41:22] <earnestly> You can also namespace the tools by using a git-like design
[02:41:28] <earnestly> also/always
[02:41:31] <pj> sszark: make one helper script with a bunch of functions that can be called internally, then.
[02:41:56] <earnestly> Which is a nice way to prevent PATH pollution
[02:42:58] <sszark> Having scripts that acts more like a library of functions does sound like a good idea.
[02:43:03] <earnestly> While providing all of the benefits of standalone tools, if you have the discipline to keep them independent and resist the urge to consolidate things
[02:43:14] *** Joins: Kyuzo68 (~Kyuzo@host-79-21-30-230.retail.telecomitalia.it)
[02:43:44] <earnestly> But the point is that having scripts means execve(2) knows what to do, everything on the system understands this language.  Now it is available everywhere
[02:44:54] *** Quits: totenkoph (~scythe@user/totenkoph) (Ping timeout: 276 seconds)
[02:45:57] <pj> sszark: you can load your functions into a single file, then do something like this: `export BASH_ENV=/path/to/filename` then when vim later shells out to bash, as long as it'[s not an interactive shell, it will load the functions from that file.
[02:46:51] <earnestly> ಠ_ಠ
[02:49:42] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[02:50:42] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[02:50:46] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 260 seconds)
[02:53:06] *** Quits: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:53:28] <pj> if you want that to work in an interactive shell as well then you can add this to your ~/.bashrc file: `if [[ $BASH_ENV ]]; then . "$BASH_ENV"; fi`
[02:54:03] <earnestly> It just gets worse
[02:54:10] <pj> heh
[02:56:25] *** Quits: Libero (~Libero@77.49.184.64.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[02:59:17] *** Quits: m0viefreak (~asdf@user/m0viefreak) (Remote host closed the connection)
[03:01:03] *** Quits: MercilessDeth (~brad@136.49.59.177) (Quit: Konversation terminated!)
[03:04:52] *** Joins: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net)
[03:05:35] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:11:24] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:13:41] *** Quits: sszark (~sszark@h-155-4-130-230.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[03:15:01] *** Quits: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:15:03] *** Joins: sszark (~sszark@h-155-4-130-230.NA.cust.bahnhof.se)
[03:15:04] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Quit: Leaving)
[03:15:26] *** Fauto_ is now known as Fausto
[03:15:39] *** Joins: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com)
[03:20:01] *** Quits: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:20:38] *** Quits: sszark (~sszark@h-155-4-130-230.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[03:20:38] *** Joins: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com)
[03:22:24] *** Joins: sszark (~sszark@h-155-4-130-230.NA.cust.bahnhof.se)
[03:23:29] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[03:24:10] *** Quits: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net) (Quit: zzz)
[03:24:20] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[03:27:30] *** Quits: Kyuzo68 (~Kyuzo@host-79-21-30-230.retail.telecomitalia.it) (Quit: Konversation terminated!)
[03:28:37] *** Quits: sszark (~sszark@h-155-4-130-230.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[03:29:16] *** Joins: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com)
[03:30:13] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:39] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:30:47] *** Joins: sszark (~sszark@h-155-4-130-230.NA.cust.bahnhof.se)
[03:32:24] *** Quits: rcernin (~rcernin@124.190.149.221) (Ping timeout: 256 seconds)
[03:32:54] *** Joins: rcernin (~rcernin@124.190.149.221)
[03:34:51] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (Quit: byeee)
[03:35:06] *** Joins: comrumino (~comrumino@li87-103.members.linode.com)
[03:36:39] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[03:40:53] <earendel> hm..pluma has this nice interface exposing context variables (like marked text, file, dir, etc etc) to scripts some internal variables to run script in whatever language you like. i like that concept. its so totally free of demanding any attention to its technology.
[03:40:57] *** Quits: sszark (~sszark@h-155-4-130-230.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[03:42:15] <earendel> sorry i misedited.
[03:42:33] <earendel> maybe you got what i mean anyway.
[03:43:13] *** Joins: sszark (~sszark@h-155-4-130-230.NA.cust.bahnhof.se)
[03:43:41] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:43:55] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[03:43:58] *** Quits: p-i- (~Ohmu@mx-ll-183.89.37-34.dynamic.3bb.co.th) (Remote host closed the connection)
[03:44:20] *** Joins: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au)
[03:47:18] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[03:49:10] <earendel> maybe im going to implement a faaast windows 8 matrix linux clone. its awesome. win 10 was a backstep. windows are useless. split screen once. that is enough. all useless icons gone. instaed some text.  and a lot of free space for the eye to rest on.
[03:49:53] <earendel> but i want it blazing fast. 12mb with david hasselhoff mp3.
[03:52:16] <earendel> of course in rust gl.  :)
[03:52:45] <twkm> *snore*
[03:52:51] <earendel> so i will have to learn a bit linux and rust first.
[03:53:10] <Enissay> I am using AWK command inside a heredoc which is executed on a remote machine... Sadly, the AWK $0 var is being expanded to the script path name... I cannot remove variable expansion as many variable need to be expanded EXCEPT the awk $0
[03:53:12] <Enissay> https://pastebin.com/ZWj10vbT
[03:53:12] <pasteban> Paste is available without ads on https://pastebin.com/raw/ZWj10vbT
[03:53:44] <twkm> escape the $ or prevent parameter expansion.
[03:54:10] <Enissay> doesnt work
[03:54:11] <mknod> <<-"EOF_REMOTE_BASH"
[03:54:21] <twkm> ewww, set -e and -u.
[03:55:06] *** Joins: spawnmc (~spawnmc@192-184-144-150.fiber.dynamic.sonic.net)
[03:56:07] <spawnmc> probably a silly question but... how do I take unquoted, user space separated input into an arg?
[03:56:28] <twkm> read the whole line?
[03:57:10] <spawnmc> yeah but hopefully without having to have the user enter it interactively. just run a command like "./command this is arg $1"
[03:57:10] <mknod> input? into an arg?
[03:57:18] <twkm> Enissay: you quoted the inner heredoc but not outer.
[03:57:34] <spawnmc> noo sorry i mean it would look like this: ./command this is arg $1
[03:57:35] <spawnmc> no quotes
[03:57:37] <twkm> spawnmc: they have to quote it, or you have to guess.
[03:57:57] <twkm> e.g., use "$*" instead of "$1".
[03:58:40] <spawnmc> cool, but what if i have more than 1 arg? eg. ./command arg1 this is arg 2
[03:58:47] <twkm> you are fucked.
[03:58:59] <twkm> they must quote them.
[03:59:16] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[04:00:01] <Enissay> twkm: set -e and -u, what ? I thought that was good practice ?!
[04:00:08] <twkm> you might guess whether each word is part of the prior argument, or perhaps there are rules that are exact that you can implement.
[04:00:15] <twkm> !-e
[04:00:16] <greybot> "set -e" is an inheritance of the old bourne shell, and doesn't really work well with modern shell features. You'll really have less buggy scripts if you do the error handling manually instead of relying on the unreliable "set -e"; see http://mywiki.wooledge.org/BashFAQ/105
[04:00:18] <twkm> !-u
[04:00:18] <greybot> ''set -u'' or ''set -o nounset'', makes the use of unset variables sometimes cause a fatal error. If you want to detect typoed variable names, use shellcheck instead. See http://mywiki.wooledge.org/BashFAQ/112
[04:00:23] <spawnmc> i was hoping i could like maybe automatically insert than into an array and uhh.. "expand" that?
[04:00:29] <spawnmc> them*
[04:01:01] <Enissay> ^_^"" there you shattered my good practices xD
[04:01:08] <twkm> how do you know whether $2 ('this') is part of the first argument or the second?
[04:01:33] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:fdb9:5a79:b8db:b1fd)
[04:01:42] <spawnmc> because it's the first word after whatever $1 is ?
[04:02:12] <spawnmc> sigh, this sound silly, quote enforcement it is
[04:02:12] <twkm> the wording you used makes it seem like it should be part of the second argument.
[04:03:00] <twkm> bash can't read the users mind, they have to either be explicit or your program has to have rules else its down to guessing.
[04:03:27] *** Quits: fatal (~0x00@user/fatal) (Quit: fatal)
[04:04:28] <Enissay> mknod: Anyhow, back to the topic, I cannot quote the outer heredoc as it contains vars that should be expanded $username, $host, $file_remote_path, ... The only one causing issue is the $0 which should be awk's own var
[04:04:45] <Enissay> Any thoughts, or maybe workaround ?
[04:04:51] <twkm> if the rule is: the first word is the first argument, everything else is the second, you can express that as: arg1=$1 arg2="${*:2}"
[04:04:56] <mknod> \$0
[04:05:12] <twkm> i guess escape wasn't clear enough.
[04:05:23] <spawnmc> oh
[04:05:31] <spawnmc> i think thats what i was looking for twkm
[04:05:43] <spawnmc> sweet
[04:06:07] *** Quits: lrgyrfvtdlvbt^ (~lrgyrfvtd@64.253.22.77) (Remote host closed the connection)
[04:06:23] <twkm> of course it fails if the first word has whitespace.
[04:06:30] <earendel> think it's safer to use "at" instead of "asterix"
[04:07:15] <twkm> worthless when not assigning an array.
[04:07:19] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[04:08:32] <twkm> further, it seems spawnmc doesn't want each word as a distinct entity.
[04:08:34] <earendel> at least in times you want to keep the fields .. like when to use an array yes. but also when passed into a function? im not sure. i haven't figured out when to use * yet.
[04:08:47] <earendel> maybe then.
[04:09:07] *** Joins: rgrinberg (~textual@187.223.26.102)
[04:10:34] *** Joins: arinov (~arinov@213.194.126.155)
[04:11:12] *** Quits: zouhair (~zouhair@142.182.82.111) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[04:14:17] *** Quits: dirtcastle (~dirtcastl@2409:4072:11:133d:e4ed:c9ff:fec4:241e) (Ping timeout: 240 seconds)
[04:15:02] <Enissay> twkm: Yes, it is failing... I have already tried it but I mistakenly thought I had the same error while it is not... Now giving `-bash: line 6: syntax error near unexpected token `/[[:blank:]]+/,'    bash: line 6: `gsub(/[[:blank:]]+/, "", $0); '`
[04:16:43] <earendel> i think you don't want the slashes.. you com fom js?
[04:17:03] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:17:55] <earendel> that's the regex javascript literal. for regex in bash its best to assign the regexp to a var in single quotes. (not embedded in slashes, unless by design)
[04:19:05] <earendel> like re='[[:blank:]]+'; gsub($re, $0); ?
[04:19:09] *** Joins: zouhair (~zouhair@142.182.82.111)
[04:20:02] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:20:19] <mknod> I can feel some bash x awk confusion here.
[04:20:36] <earendel> or perhaps, since it's undecidable to what extended regex means, \s or \b
[04:20:52] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:30:04] *** Joins: totenkoph (~scythe@user/totenkoph)
[04:34:06] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 276 seconds)
[04:34:19] *** Quits: spawnmc (~spawnmc@192-184-144-150.fiber.dynamic.sonic.net) (Changing host)
[04:34:19] *** Joins: spawnmc (~spawnmc@user/spawnmc)
[04:35:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[04:35:47] *** Joins: Everything (~Everythin@128-124-10-123.mobile.vf-ua.net)
[04:45:27] *** Quits: zouhair (~zouhair@142.182.82.111) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[04:52:59] *** Joins: off^ (~off@64.253.22.77)
[04:55:42] *** Quits: fling (~fling@user/fling) (Ping timeout: 256 seconds)
[05:02:39] <Enissay> mknod: Thanks again, I had other issues to fix as well, now all good <3
[05:02:49] *** Quits: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com) (Ping timeout: 268 seconds)
[05:04:00] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[05:05:29] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Quit: Leaving)
[05:06:27] *** Joins: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com)
[05:08:04] *** Joins: grettke (~grettke@184.62.226.206)
[05:09:52] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[05:10:32] *** Quits: vee (~vee@c-73-71-90-145.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[05:16:13] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[05:17:43] *** Joins: wiscii (~tct@user/wiscii)
[05:17:51] <wiscii> !qefs
[05:17:51] <greybot> "$Quote" "$Every" "$Fucking" "$Substitution"
[05:19:38] <wiscii> # a="o123"; [ "${a}" = ${a%[!0123]*} ] || echo no
[05:19:39] <shbot> wiscii: bash: [: o123: unary operator expected
[05:19:39] <shbot> wiscii: no
[05:20:13] <izabera> what is happening
[05:20:29] <emanuele6> history expansion
[05:20:33] <izabera> no i mean
[05:20:46] <izabera> why is someone butting in like that
[05:20:48] <wiscii> no, it is me ..
[05:21:18] <wiscii> did not mean to butt-in
[05:22:56] <emanuele6> oh, it is not history expansion, the glob deletes everything
[05:23:13] <emanuele6> yeah, it is obvious why that does not work, why did you for that?
[05:23:51] *** Joins: vee (~vee@c-73-71-90-145.hsd1.ca.comcast.net)
[05:27:02] <wiscii> izabera: my apologies .. i did not mean any offence
[05:27:14] <izabera> it's just weird
[05:27:29] <wiscii> sorry ..
[05:28:22] <emanuele6> s/for/join just to send/
[05:28:50] <wiscii> i should have PM'd the bot
[05:29:41] <emanuele6> pm the bot to get the definition of qefs?
[05:29:42] *** Quits: samsmith (~samsmith@li1371-152.members.linode.com) (Quit: The Lounge - https://thelounge.chat)
[05:30:09] *** Quits: libsys (~libsys@186.105.152.49) (Remote host closed the connection)
[05:30:45] <wiscii> at least if i had tried the bot first i would have recalled my manners :)
[05:31:08] *** Joins: samsmith (~samsmith@li1371-152.members.linode.com)
[05:31:24] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 256 seconds)
[05:31:59] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[05:32:11] *** Joins: docmax_ (~docmax@dynamic-077-010-130-253.77.10.pool.telefonica.de)
[05:32:44] *** Joins: libsys (~libsys@186.105.152.49)
[05:34:13] *** Quits: docmax (~docmax@dynamic-077-010-098-057.77.10.pool.telefonica.de) (Ping timeout: 240 seconds)
[05:34:55] *** Joins: jonthesnow (~xizhendu@36.112.188.169)
[05:36:57] *** Quits: zeraphel (~zeraphel@2a00:a040:196:56d:96de:80ff:fefa:44a) (Ping timeout: 240 seconds)
[05:37:14] *** Joins: zeraphel (~zeraphel@5.29.16.50)
[05:39:37] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[05:40:46] *** Quits: sublim20 (~sublim20@user/sublim20) (Read error: Connection reset by peer)
[05:41:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[05:42:28] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[05:44:49] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:49:25] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[05:51:13] *** Joins: richardm75 (~richardm7@2600:8801:c507:b200:8e1:5106:d083:f6c5)
[05:51:43] *** Joins: ferdna (~ferdna@user/ferdna)
[05:54:06] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[05:54:13] *** Quits: off^ (~off@64.253.22.77) (Remote host closed the connection)
[05:55:37] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 240 seconds)
[05:56:42] *** Quits: mknod (~mknod@user/mknod) (Quit: mknod)
[05:58:12] *** Quits: listenurs (~igloo@c-98-240-233-64.hsd1.mn.comcast.net) (Remote host closed the connection)
[05:58:45] *** Quits: grettke (~grettke@184.62.226.206) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:59:49] *** Quits: rgrinberg (~textual@187.223.26.102) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:01:27] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[06:10:50] *** Joins: junebug (~junebug@2600:1700:3db0:2540:16cd:c838:8c04:4dc4)
[06:11:06] *** Joins: zouhair (~zouhair@142.182.82.111)
[06:16:45] *** Joins: Jong (~Jong@2620:10d:c090:400::5:a269)
[06:18:17] *** Quits: junebug (~junebug@2600:1700:3db0:2540:16cd:c838:8c04:4dc4) (Ping timeout: 240 seconds)
[06:21:03] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[06:22:43] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[06:22:45] *** Joins: junebug (~junebug@2600:1700:3db0:2540:6e53:addd:369e:e979)
[06:30:17] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 240 seconds)
[06:31:02] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[06:31:28] *** Joins: zaz\ (~zaz@poneybl.eu)
[06:34:43] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:38:17] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[06:39:03] *** Joins: janko (~gian@119-229-133-113f1.wky1.eonet.ne.jp)
[06:39:37] *** Joins: n4dir (~user@i5E86C5D8.versanet.de)
[06:40:13] *** Joins: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3)
[06:44:05] *** Joins: dead1 (~dead@user/dead1)
[06:45:28] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[06:46:11] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:51:46] *** Joins: kdc (~kdc@196.211.197.159)
[06:52:36] *** Quits: jos1 (~jos3@dyndsl-091-096-042-023.ewe-ip-backbone.de) (Ping timeout: 268 seconds)
[06:52:40] *** Joins: MercilessDeth (~brad@136.49.59.177)
[06:54:43] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[07:02:13] *** Joins: foul_owl (~kerry@94.140.8.107)
[07:04:16] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:04:43] *** Joins: jos1 (~jos3@host-091-097-190-081.ewe-ip-backbone.de)
[07:07:30] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[07:08:39] *** Joins: DynV (~DynV@user/dynv)
[07:09:27] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[07:09:35] <DynV> How does one copy files and in doing so only overwrite larger files? Date is to be ignored, only if names match and destination is smaller there's overwriting.
[07:10:17] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 240 seconds)
[07:10:35] <Jong> DynV  sounds complicated
[07:10:47] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[07:11:07] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Remote host closed the connection)
[07:11:54] *** Joins: userT (~user01@187.140.230.16)
[07:12:32] <Blondie101010> not that much...  you could just loop through the file list checking the two conditions
[07:12:55] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[07:12:57] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:07] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[07:13:39] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:13:58] *** Quits: timj (~timj@user/timj) (Ping timeout: 256 seconds)
[07:16:12] <userT> I saw an example of "case" statement where a variable $var was being evaluated for the different choices (cases). Thing is, this $var was a single-line string with words separated by single space characters.
[07:16:26] <userT> And "case" evaluated each separate "word".
[07:16:38] <userT> But the variable was a single-line string!
[07:16:53] <userT> Is it that "case" splits variables into words, or something?
[07:17:07] <emanuele6> case matches glob patterns
[07:18:19] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[07:19:07] <emanuele6> # case ' a b c d ' in *' a '*) echo a ;; *' z '*) echo b; esac
[07:19:08] <shbot> emanuele6: a
[07:19:13] <emanuele6> # case ' z b c d ' in *' a '*) echo a ;; *' z '*) echo z; esac
[07:19:14] <shbot> emanuele6: z
[07:20:08] <emanuele6> # case ' a z b c d ' in *' a '*) echo a ;; *' z '*) echo z; esac
[07:20:09] <shbot> emanuele6: a
[07:20:57] <emanuele6> it will only run the list associated with the first pattern that matches, but, only in bash, you can use ;;& instead of ;; to make case check also the following patters
[07:21:04] <emanuele6> # case ' a z b c d ' in *' a '*) echo a ;;& *' z '*) echo z; esac
[07:21:05] <shbot> emanuele6: a
[07:21:05] <shbot> emanuele6: z
[07:21:20] <emanuele6> then bash also adds `;&' which is another thing
[07:21:37] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 240 seconds)
[07:22:42] <emanuele6> not sure why you think `case' word splits something, that would make no sense since `case a b in ...' makes no sense and is invalid
[07:22:51] <emanuele6> err
[07:23:01] <emanuele6> not sure why you think `case' word splits something, since `case a b in ...' makes no sense and is invalid
[07:25:37] <Delf> I'm usually putting arrays in between { and }, only for clarity. Is that a stupid idea?
[07:26:00] <Delf> Err.. I meant variables, not arrays. Well arrays also, since they're variables :P
[07:29:56] *** Quits: Everything (~Everythin@128-124-10-123.mobile.vf-ua.net) (Quit: leaving)
[07:31:45] <userT> # case 'a z b c d' in a) echo a ;; z) echo z; esac
[07:31:46] <shbot> userT: no output
[07:32:33] <emanuele6> 'a z b c d' is not a and 'a z b c d' is not z
[07:33:29] <userT> # case 'one two three four' in one) echo one ;; two) echo two; esac
[07:33:29] <shbot> userT: no output
[07:33:39] <userT> ...I'm sure this is how the example I saw was
[07:33:41] <e36freak> userT: case takes one word, and compares the whole thing
[07:33:56] <e36freak> they have have had in *one*)
[07:33:57] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Ping timeout: 240 seconds)
[07:34:08] <e36freak> that's still a shitty way to look for a thing in an array though
[07:34:09] <Blondie101010> userT: you're missing wildcards, as shown by emanuele6
[07:35:14] <emanuele6> maybe you are thinking of:   for word in one two three four; do case $word in one) echo one ;; two) echo two; esac; done
[07:35:35] <userT> emanuele6: ah, yes!
[07:35:44] <userT> It's inside a for loop
[07:36:00] <userT> But I didn't mention it because I didn't think it'd make the whole difference
[07:36:11] <Blondie101010> no, the quotes do
[07:36:19] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:36:26] <lunario> for i in !(*.mp3); do ffmpeg -n -i "$i" -f mp3 "${i%.mp4}.mp3"; done; for i in *.webm; do ffmpeg -i "$i" -f mp3 "${i%.webm}.mp3"; done
[07:36:45] <lunario> gives me "!:event not found". but only on artix. on devuan, for example, this command works.
[07:36:49] <e36freak> !!
[07:36:49] <greybot> event not found -- These errors only happen in *interactive* shells when you run commands with ! in them with history expansion enabled. Run set +o histexpand (set +H) to disable it, and put it in your ~/.bashrc to disable it in future shell sessions, too. Regardless, it won't affect scripts.
[07:36:50] <lunario> am i missing something?
[07:36:57] <emanuele6> !extglob > lunario
[07:36:57] <greybot> lunario: "Extended globs" (shopt -s extglob) allow you to say things like "all files that do not end in .jpg". See http://mywiki.wooledge.org/glob#extglob
[07:37:04] <e36freak> oh, or that
[07:37:12] <wiscii> # case 'a z b c d' in a*) echo a ;; z) echo z; esac
[07:37:13] <shbot> wiscii: a
[07:37:23] <e36freak> extglob must be set in .bashrc on one system but not on the other
[07:37:37] <lunario> ahh of course.. thank you!
[07:38:54] *** Quits: janko (~gian@119-229-133-113f1.wky1.eonet.ne.jp) (Ping timeout: 256 seconds)
[07:40:01] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Client Quit)
[07:40:04] <userT> Then, the one doing the "magic" splitting the $var variable in the example I'm currently seeing is the for loop...
[07:40:07] *** Quits: foul_owl (~kerry@94.140.8.107) (Quit: WeeChat 2.3)
[07:40:18] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:40:21] <emanuele6> why don't you just show it?...
[07:40:26] *** Joins: foul_owl (~kerry@94.140.8.107)
[07:40:36] *** Quits: Thanatermesis (~Thanaterm@191.92.148.122) (Ping timeout: 256 seconds)
[07:41:23] *** Joins: loganlee (~Thunderbi@user/loganlee)
[07:41:30] <e36freak> x
[07:42:16] *** Quits: foul_owl (~kerry@94.140.8.107) (Client Quit)
[07:42:59] <userT> Ok
[07:43:05] <userT> I'll try
[07:43:14] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:43:38] *** Joins: foul_owl (~kerry@94.140.8.107)
[07:44:34] <userT> Wait, my example is actually esentially the same as the one you already posted
[07:44:37] <userT> # for word in one two three four; do case $word in one) echo one ;; two) echo two; esac; done
[07:44:38] <shbot> userT: one
[07:44:38] <shbot> userT: two
[07:44:54] <userT> Yes, that's it
[07:45:02] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[07:45:02] <emanuele6> how is that it?
[07:45:05] <hejux> while true; do ssh lhunath@lyndir.com; done // Reconnect on failure.
[07:45:09] <hejux> is this right?
[07:45:20] <emanuele6> <userT > But the variable was a single-line string!
[07:45:39] <e36freak> hejux: doesn't actually test for failure or not, just always reconnects when the session ends
[07:45:57] <userT> Let me try something...
[07:46:02] <userT> # echo $var
[07:46:03] <e36freak> hejux: you could do while ! ssh foo@bar.com; do :; done
[07:46:04] <shbot> userT: no output
[07:46:07] <userT> Ok...
[07:46:31] <hejux> e36freak: then, someone needs to correct this : https://mywiki.wooledge.org/BashSheet#Parameter_Operations
[07:46:48] <userT> # var="one two three four" for word in $var; do case $word in one) echo one ;; two) echo two; esac; done
[07:46:48] <shbot> userT: bash: syntax error near unexpected token `do'
[07:46:50] *** Quits: sszark (~sszark@h-155-4-130-230.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[07:46:56] <userT> Ouch
[07:46:56] *** Quits: vishal (~vishal@fedora/vishal) (Quit: ZNC 1.8.2 - https://znc.in)
[07:46:57] <emanuele6> ok, so "you are currently seeing it", but you don't want to show it to us...
[07:47:04] <userT> No, no, no
[07:47:04] <emanuele6> whatever.
[07:47:06] <userT> wait
[07:47:15] <userT> # var="one two three four"; for word in $var; do case $word in one) echo one ;; two) echo two; esac; done
[07:47:16] <shbot> userT: one
[07:47:16] <shbot> userT: two
[07:47:26] <userT> emanuele6: ^ that's my example
[07:47:45] *** Quits: zaden (~maddx@c-73-92-207-228.hsd1.ca.comcast.net) (Quit: WeeChat 3.4-rc1)
[07:47:56] <userT> See that $var is a single-line string?
[07:48:24] *** Quits: foul_owl (~kerry@94.140.8.107) (Client Quit)
[07:48:29] *** Joins: sszark (~sszark@h-155-4-130-230.NA.cust.bahnhof.se)
[07:48:37] *** Joins: janko (~gian@2001:ce8:132:f834:b824:9b3:9c89:1077)
[07:48:42] *** Joins: foul_owl (~kerry@94.140.8.107)
[07:48:43] *** Joins: vishal (~vishal@fedora/vishal)
[07:49:01] <e36freak> not sure why it's under "Dummies"
[07:50:07] <userT> emanuele6: I did not mean to be a troll or something. That's the thing
[07:50:15] <e36freak> hejux: there you go. it is a wiki, you know
[07:50:16] <hejux> e36freak: because true is a dummy
[07:50:41] <e36freak> eh, still seems like a poor description or example
[07:50:45] <userT> As a bash noob, I was "amazed" at how the variable was "split" into words
[07:51:06] <e36freak> userT: wordsplitting is a terrible thing to rely on by the way, that's a poor way of storing/using a list
[07:51:20] <Blondie101010> that's a shell basic...  if you include a IFS delimited thing on the command line, it will get split
[07:51:31] <e36freak> # touch file1 file2; var='one two * four'; for word in $var; do echo "$word"; done
[07:51:37] <shbot> e36freak: one
[07:51:37] <shbot> e36freak: two
[07:51:38] <shbot> e36freak: etc... ( http://ix.io/3IUv )
[07:52:27] <Blondie101010> # touch file1 file2; var='one two * four'; for word in "$var"; do echo "$word"; done # look at the quotes in action
[07:52:28] <shbot> Blondie101010: one two * four
[07:53:00] <emanuele6> userT: how can you possibly think that it is case doing the splitting of $var if your code says `for word in $var; do case $word in' with $word (or whatever) instead of $var between `case ... in'?
[07:53:24] <hejux> e36freak: you done editing? that was fast
[07:53:39] <emanuele6> and the fact that you are "currently seeing" an *example* and you refuse to link it just feels like troll
[07:54:20] <e36freak> hejux: wasn't much to edit
[07:54:50] <hejux> lol, i was tring to edit the comments, and then found the command was changed ..
[07:54:54] <userT> emanuele6: I'm sorry for offending you. My example is on a physical book, not on a webpage. But yes, even so I was being stupid
[07:54:57] <userT> Sorry again
[07:55:11] <userT> So it's for loop the one reading the default IFS
[07:55:19] <e36freak> hejux: i'm not sure what lhunath originally intended for that example, so i just changed the command with a comment
[07:55:26] <e36freak> haven't seen him around in quite some time though
[07:56:25] <emanuele6> $var is unquoted so it gets field splitted
[07:57:24] <emanuele6> and `for word in split1 split2 split3; do case $word in ...; esac; done' runs the code between `do' and `done' multiple times each time set to a different split
[07:57:40] <e36freak> userT: if it's a book that is giving an example of how to deal with lists, it's a terrible book and you probably shouldn't learn from it
[07:57:53] <emanuele6> !book
[07:57:53] <greybot> Most of the published shell/bash books are relatively poor. They may have a few gems here and there, but they're few and far between. Try the BashGuide instead: http://mywiki.wooledge.org/BashGuide
[07:58:33] <hejux> userT: do not read books, read this:
[07:58:35] <hejux> !topic
[07:58:35] <greybot> http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
[07:58:51] <emanuele6> strings and field splitting should not be used as a substitute for a list because, after field splitting, pathname expansion occurs
[07:59:11] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 268 seconds)
[07:59:12] <hejux> i improved a lot reading the topics
[07:59:17] <userT> OUCH
[07:59:29] <userT> Why are most of physical books so poor?
[07:59:52] *** Quits: foul_owl (~kerry@94.140.8.107) (Quit: WeeChat 2.3)
[07:59:56] <emanuele6> so if you have something like x='a /b*'; for i in $x; do printf 'processing: %s\n' "$i"; done, you will not get the result you expect
[07:59:57] <hejux> now i can even see the mistakes on bad codes online.
[08:00:06] <emanuele6> # x='a /b*'; for i in $x; do printf 'processing: %s\n' "$i"; done
[08:00:07] <shbot> emanuele6: processing: a
[08:00:07] <shbot> emanuele6: processing: /bin
[08:00:19] *** Joins: foul_owl (~kerry@94.140.8.107)
[08:00:33] <e36freak> there's something about shell scripting... i don't know if people just don't care enough about it to learn it properly or what
[08:00:58] <hejux> quote the "$x"
[08:00:59] <emanuele6> and a glob could even expand to more than one thing
[08:01:00] <kurahaupo> IFS=*; x='a /b*'; for i in $x; do printf 'processing: %s\n' "$i"; done
[08:01:10] <emanuele6> # x='a /l*'; for i in $x; do printf 'processing: %s\n' "$i"; done
[08:01:11] <shbot> emanuele6: processing: a
[08:01:11] <shbot> emanuele6: processing: /lib
[08:01:11] <shbot> emanuele6: processing: /lib64
[08:01:15] <emanuele6> hejux: no.
[08:01:23] <kurahaupo> #IFS=*/ ; x='a /b*'; for i in $x; do printf 'processing: %s\n' "$i"; done
[08:01:28] <kurahaupo> # IFS=*/ ; x='a /b*'; for i in $x; do printf 'processing: %s\n' "$i"; done
[08:01:29] <shbot> kurahaupo: processing: a
[08:01:29] <shbot> kurahaupo: processing: b
[08:01:39] <hejux> # x='a /l*'; for i in "$x"; do printf 'processing: %s\n' "$i"; done
[08:01:39] <shbot> hejux: processing: a /l*
[08:02:08] <emanuele6> effectively you just run i=$x
[08:02:21] <hejux> oh right.
[08:02:43] *** Quits: TMan459 (~TMan459@068-113-233-054.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[08:03:10] <userT> Why are most of physical books so poor? Could Kernighan & Pike's TUPE be one of those few "gems"?
[08:03:17] <hejux> # x=(a /l*); for i in "${x[@]}"; do printf 'processing: %s\n' "$i"; done
[08:03:18] <shbot> hejux: processing: a
[08:03:18] <shbot> hejux: processing: /lib
[08:03:18] <shbot> hejux: processing: /lib64
[08:03:37] <emanuele6> hejux: that is not sh code, that is bash code
[08:03:47] <emanuele6> and the array is unnecessary
[08:04:19] <hejux> always do array when there are more than one assignment
[08:06:47] <hejux> userT: books are hard to correct...
[08:07:16] <hejux> anyone can make mistakes... then book is hardcopy, not easy to correct.
[08:07:41] <janko> So I am trying to write my own timer, and for the "pause" functions I was thinking of using a fifo (as it was reccomended to me), but when I tried polling via "read -t 1 status < pipe" the timeout does not work. How does one get around this? Or in the case my approach is just wrong, could someone point towards the right direction?
[08:08:01] <hejux> janko: gnu timeout
[08:08:21] <hejux> !timeout
[08:08:21] <greybot> http://mywiki.wooledge.org/BashFAQ/068 -- How do I run a command, and have it abort (timeout) after N seconds?
[08:08:24] <emanuele6> hejux: that makes no sense.. you can't timeout read.
[08:08:36] <emanuele6> (use GNU timeout on read)
[08:09:12] <hejux> & sleep kill wait
[08:09:13] <emanuele6> janko: a fifo can only be opened for reading after it is also opened for writing
[08:10:20] <emanuele6> if the fifo is not being written to `read -t 1 status < pipe' will just hang the shell before even actually running read until pipe is also opened for writing
[08:10:34] <emanuele6> `read -t 1 status < pipe' hardly ever makes sense
[08:11:10] <emanuele6> what you should be doing is open for reading pipe upfront and read from it via a file descriptor
[08:11:38] <emanuele6> `< pipe' will close and reopen pipe every time which is not good
[08:12:08] *** Joins: zaden (~maddx@c-73-92-207-228.hsd1.ca.comcast.net)
[08:12:18] <emanuele6> exec {pipe_fd}< pipe; while IFS= read -r -t 1 -u "$pipe_fd" status; do stuff ...; done
[08:12:42] <emanuele6> or  while IFS= read -r -t 1 -u3 status; do stuff ...; done 3< pipe
[08:13:01] <emanuele6> janko: is that pipe being written to?
[08:15:23] <emanuele6> well, a timeout would not make much sense there either
[08:15:34] <janko> yes, i think so, I want to experiment a bit with it and decide on whether to write to it a status or maybe send the pid to send a signal
[08:15:35] <emanuele6> no, well actually it would
[08:16:22] <emanuele6> janko: you can't open a pipe for reading if it is not already open for writing
[08:16:28] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[08:16:49] <emanuele6> try to run `mkfifo pipe; echo hi < pipe', it will not print `hi' and it will just hang
[08:17:12] <emanuele6> or `sleep 1 < pipe', it will hang
[08:17:44] <emanuele6> it will only actually start running sleep or echo once you open the file for writing somewhere
[08:18:16] <emanuele6> e.g. running `echo x > pipe' or 'exec 3> pipe' from another shell
[08:19:03] <janko> ok, I am following thus far.
[08:19:05] <emanuele6> and running `read something < pipe' will open for reading, run read and then immediately close pipe again
[08:19:25] <emanuele6> that hardly ever makes sense
[08:19:39] <emanuele6> what are you trying to do with this pipe?
[08:19:54] <emanuele6> i mean how do you plan to write to it? why do you need a timeout?
[08:20:54] *** Quits: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com) (Quit: leaving)
[08:21:18] <userT> Ok, thanks everyone. Sorry for briefly "trolling", never my intention.
[08:21:23] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 268 seconds)
[08:22:04] *** Quits: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:23:04] *** Quits: A|an (~Alan@173.216.51.200) (Quit: A|an)
[08:23:25] *** Parts: userT (~user01@187.140.230.16) ()
[08:23:53] <janko> So every seconds or so I want the remaining time displayed, I was thinking that I would echo the remaining time, then in case a start another script to pause the timer the latter script would write to the pipe something like "pause", and then the former script would try to read the pipe, if it reads pause then it would stop until the status changes again
[08:24:33] *** Quits: bloodfart69 (~bloodfart@131.150.105.232) (Quit: Leaving)
[08:24:33] <emanuele6> that is fine, you just need to open the files once for each script
[08:24:35] <janko> *then in the case I want to pause it I would start another script..
[08:25:34] <emanuele6> a pipe needs to be persistent, with the   read something < pipe   and    echo something > pipe   syntaxes you are destroying the pipe connection after each read/echo
[08:26:24] <e36freak> !faq fifo
[08:26:24] <greybot> https://mywiki.wooledge.org/BashFAQ/085 -- How to write several times to a fifo without having to reopen it?
[08:26:28] <emanuele6> janko: i still don't get why the timeout would be on the reading end instead of the writing end though
[08:26:57] *** Quits: janko (~gian@2001:ce8:132:f834:b824:9b3:9c89:1077) (Quit: WeeChat 2.8)
[08:27:09] <emanuele6> you want to read whenever there is data, and only write when every one second, no?
[08:27:17] *** Joins: janko (~gian@2001:ce8:132:f834:b824:9b3:9c89:1077)
[08:27:47] <emanuele6> you want to read whenever there is data, and only write the timestamp every one second, no?
[08:27:59] <janko> correct
[08:28:20] <emanuele6> so it would make more sense to wait on the writing end than timeout the reading end, no?
[08:28:45] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[08:29:43] <janko> Ok give me one second I am rereading and thinking it through
[08:29:49] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 240 seconds)
[08:31:33] <janko> ah!
[08:31:39] <janko> I got it, yeah that would make more sense
[08:31:48] <emanuele6> here is an example http://0x0.st/-CL_.txt
[08:32:20] <emanuele6> create a pipe, then run `bash ex1 pipe' in one terminal and `bash ex2 pipe' in another terminal
[08:33:30] <emanuele6> if the scripts are more complex than just a loop you can use the `exec 3< "$1"' and `exec 3> "$1"' syntax to open the pipe on fd 3
[08:34:01] <emanuele6> and then use >&3 or <&3 (or -u3 in the case of read) to read/write from/to it
[08:34:17] *** Quits: sszark (~sszark@h-155-4-130-230.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[08:34:42] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[08:36:02] *** Quits: mooz (~none@23.254.112.158) (Ping timeout: 240 seconds)
[08:36:10] <janko> and then I do not have to worry about the closing/reopening and the shell hanging, right?
[08:36:30] *** Joins: sszark (~sszark@h-155-4-130-230.NA.cust.bahnhof.se)
[08:36:50] <emanuele6> `exec 3< file' will open file on fd3
[08:37:04] <emanuele6> (only for reading because < was used)
[08:37:12] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[08:37:44] <emanuele6> using <&3 will redirect the stdin of the target command to fd3
[08:37:56] <emanuele6> so no open close will occur
[08:38:40] *** Quits: Gerula (~Gerula@user/gerula) (Quit: Leaving)
[08:38:59] <emanuele6> `cmd 3< file' will open file and set fd3 for the target command to a reading file descriptor that read from file
[08:39:15] <emanuele6> and will close that file descriptor once cmd is done executing
[08:40:03] <emanuele6> if cmd is a loop, and you will only read from the pipe in the context of that loop, you can use `while read -ru3; do ...; done 3< file'
[08:40:21] *** Joins: ElPresidenteP (~ElPreside@2600:1700:3d10:4870:7123:1b33:f295:4b7a)
[08:40:37] <emanuele6> and that is simpler than `exec 3< file' because that will automatically close the file descriptor once the loop is done
[08:40:57] *** Joins: codebam (~codebam@user/codebam)
[08:41:38] <emanuele6> if the script has more complex structure you can use something like: `exec 3< file', but then you have to remember to close that file descriptor once you are done with it (it won't close itself)
[08:41:47] *** Joins: Gerula (~Gerula@user/gerula)
[08:42:48] *** Joins: ravan (~ravan@42.201.198.151)
[08:42:48] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[08:42:48] *** Joins: ravan (~ravan@user/ravan)
[08:43:37] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:fdb9:5a79:b8db:b1fd) (Ping timeout: 240 seconds)
[08:43:51] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[08:43:57] <emanuele6> and if you do something like that you have more error checking to do e.g.:  if ! exec {pipe_fd}< "$pipe_file"; then fail "unable to open ${pipe_file@Q}"; fi; while read -r -u "$pipe_fd"; do ...; done; ...; exec {pipe_fd}<&-; ...
[08:44:16] *** Joins: ravan (~ravan@user/ravan)
[08:46:29] <ano> # printf '%s\n' '   99  A' '  100  A' '  101  B' '  102  A' | uniq -f1 -D
[08:46:30] <shbot> ano:    99  A
[08:46:30] <shbot> ano:   100  A
[08:46:40] <janko> :emanuele6 Thank you very much for your help, I think I know how to make it work now.
[08:47:42] <bud> good morning
[08:47:58] <emanuele6> so basically don't destroy the pipe every time use use it; that is not how pipes work, they are meant to be used as a persistent connection between two processes/threads
[08:48:10] <emanuele6> s/use/you/
[08:48:35] *** Joins: AsenMx (~AsenMx@user/asenmx)
[08:49:26] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[08:49:46] *** Joins: AsenMx (~AsenMx@user/asenmx)
[08:49:54] <janko> I will defo remember that! :)
[08:49:57] *** Quits: joerg (~saturn@user/joerg) (Ping timeout: 240 seconds)
[08:50:27] <vancz> I found this snippet to "check" if an sshd is running, it's not suposed to be robust or anything, but whats with the [/]?
[08:50:27] <vancz> ps ax | grep '[/]sshd'
[08:51:15] <vancz> isnt that the same as just doin '/sshd'
[08:51:44] <emanuele6> `grep /sshd' would also match "ps ax | grep /sshd"
[08:51:51] *** Joins: joerg (~saturn@user/joerg)
[08:52:36] <vancz> im confused because if thats the regex mode [] just means one of the bracketed characters? and since theres only slash, it literally just means one slash?
[08:52:39] <emanuele6> don't use that, if you want to check if some process's command line contains the substring /sshd (which is a terrible way of checking if sshd is running), just use `pgrep sshd'
[08:52:57] <vancz> if its not regex mode, idk how its supposed to work at all
[08:53:13] <emanuele6> vancz: that `ps ax' command lists the command line of every process
[08:53:22] <vancz> yeah thats clear
[08:53:28] <emanuele6> that includes the command line of the grep process itself
[08:53:44] <vancz> i dont understand the difference between [/] and /
[08:53:46] *** Joins: TMan459 (~TMan459@068-113-233-054.res.spectrum.com)
[08:53:47] <emanuele6> `grep /sshd' contain /sshd so it would match its line
[08:54:10] <emanuele6> 'grep [/]sshd' does not contain /sshd so it does not match its own line
[08:54:24] <vancz> OH
[08:54:29] * vancz facepalms
[08:54:44] <emanuele6> this is just dumb anyway, if you want to be dumb and check if a process's command line contains /sshd, just use pgrep /sshd
[08:54:48] <vancz> that could certainyl have used some more exposition
[08:54:55] <emanuele6> that grep hack just makes it even more dumb
[08:55:02] <vancz> (and I could type slower and spell)
[08:55:39] <emanuele6> what you should be using really is `systemctl status sshd' or whatever the init system is
[08:56:04] <vancz> I dont actually need to do this, I just didn't get what the command was doing, but good to know
[08:56:25] <vancz> thanks
[08:56:59] *** Quits: tkazi (~tkazi@user/tkazi) (Quit: Disconnected)
[08:59:22] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[09:00:43] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:ed9a:f06d:f143:d2b)
[09:00:51] *** Joins: tkazi (~tkazi@user/tkazi)
[09:01:05] *** Joins: xizhendu_ (~xizhendu@36.112.188.169)
[09:03:38] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 260 seconds)
[09:03:54] *** Quits: jonthesnow (~xizhendu@36.112.188.169) (Ping timeout: 256 seconds)
[09:03:57] *** Quits: ElPresidenteP (~ElPreside@2600:1700:3d10:4870:7123:1b33:f295:4b7a) (Ping timeout: 240 seconds)
[09:05:10] *** Joins: codebam (~codebam@user/codebam)
[09:07:25] *** Quits: junebug (~junebug@2600:1700:3db0:2540:6e53:addd:369e:e979) (Quit: Leaving)
[09:08:33] *** Joins: terminaldweller (~devi@ip137.ip-145-239-165.eu)
[09:09:19] <terminaldweller> is there a way to update TMOUT for sessions that are running?
[09:09:40] <emanuele6> terminaldweller: what is that?
[09:09:48] <terminaldweller> TMOUT?
[09:10:03] <emanuele6> oh, a bash builtin variable huh
[09:10:11] <emanuele6> i didn't know that
[09:10:26] <terminaldweller> it determines the amount of time after which the login session is automatically terminated if it is idle
[09:10:39] <terminaldweller> i didnt know about it either until yesterday. ;))
[09:11:21] <emanuele6> so what is the question?
[09:11:33] <emanuele6> just set TMOUT to another value, no?
[09:12:02] <terminaldweller> how can I do that for another user after they've logged in?
[09:12:52] <emanuele6> oh, so you are abusing the variable as a way to timeout users that have logged in with bash..
[09:13:32] <terminaldweller> not really abusing. I just want to be able to update the value even for users that have already logged in.
[09:14:34] <emanuele6> TMOUT is not meant for that, you are abusing it to timeout login sessions
[09:14:51] <emanuele6> well, you can reset it, but you need to talk to the login shell like you would with any other process
[09:15:41] <terminaldweller> I'm confused now. isnt TMOUT used to logout idle sessions?
[09:15:43] <emanuele6> e.g. write/read to a pipe, kill the login shell with USR1 and make the login shell handle USR1 as TMOUT=1000
[09:16:15] <emanuele6> terminaldweller: it is used to timeout any shell: shell scripts, read prompts, select prompts, interactive shells, etc
[09:17:05] <emanuele6> you can use it to timeout a user because when the timeout expires you will kill the shell with which they logged in
[09:17:51] <terminaldweller> OK.
[09:17:57] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[09:18:25] <emanuele6> there is nothing stopping the user from changing the value of TMOUT while the login shell is running with gdb
[09:18:42] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[09:19:17] <terminaldweller> thats the thing. in our solution the user is running in a cli but doent have access to the usual commands so I dont have to worry about them bypassing TMOUT.
[09:19:49] <emanuele6> can't he just set TMOUT=1000
[09:20:07] <emanuele6> if he has straight up access to the bash cli
[09:20:17] <terminaldweller> no. theyre not really getting bash. they inside a cli that runs on top of bash.
[09:20:35] <grawity> like a `while read cmd; do` loop?
[09:20:55] <grawity> is TMOUT even in effect for that?
[09:20:55] <terminaldweller> more like a router's cli.
[09:21:21] *** Quits: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[09:21:25] <emanuele6> anyway, you are misusing TMOUT if you think it is a sysadmin feature to set the lifetime of a login session
[09:22:08] <emanuele6> you could make it more robust by making TMOUT readonly: e.g. `readonly TMOUT=3600'
[09:22:12] <emanuele6> but then you can't add more time
[09:22:38] <emanuele6> TMOUT is a user feature, it is set by the user in the user's shell
[09:22:53] <emanuele6> it is in no way a system administration feature meant to be used like that
[09:23:42] <emanuele6> use a more serious solution, e.g. kill the login shell as root after a the time has expired
[09:23:56] <terminaldweller> like adding a cronjob that reads the output of who and logs out users based on that?
[09:24:48] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[09:25:19] <emanuele6> no, like "when a sure logs in, kill the shell with which they logged in after x time"
[09:26:01] <emanuele6> s/sure/user/
[09:26:13] <terminaldweller> I only want to kill idle sessions
[09:26:53] <emanuele6> why don't you let users set their own TMOUT then?
[09:27:01] *** Joins: ElPresidenteP (~ElPreside@2600:1700:3d10:4870:b1b6:5433:b62d:314e)
[09:27:16] <kurahaupo> If you want more time than allowed by a readonly TMOUT, you just type "bash"
[09:27:23] <emanuele6> if they don't want to be timed out, they set TMOUT=0
[09:28:21] <terminaldweller> I know all that. but like I said they cant do that since they will not be in bash when they log in. they will be in another cli and thats all they get.
[09:29:48] *** Quits: janko (~gian@2001:ce8:132:f834:b824:9b3:9c89:1077) (Quit: WeeChat 2.8)
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:30:06] <terminaldweller> imagine using the cli for a network switch/router. they run a unixy OS but as a user you dont get the shell/commands. they the network's devices cli.
[09:30:28] <emanuele6> i get that, but i don't get how that command is running inside bash
[09:30:37] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:ed9a:f06d:f143:d2b) (Ping timeout: 240 seconds)
[09:31:02] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[09:31:16] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:31:18] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[09:31:38] <emanuele6> if they open it manually, they can just press ^Z and set TMOUT=0
[09:32:22] <emanuele6> if it's being `exec'ed from the login shell, then i don't understand how TMOUT is working
[09:32:55] <emanuele6> if it is just run and not execed from the login shell, then they probably can still press ^Z and set TMOUT=0
[09:33:24] <emanuele6> or if they can't do that, they can kill the cli program set TMOUT=0 and reopen it
[09:33:39] <emanuele6> unless you have an exit call after calling the program i guess
[09:35:57] *** Joins: fling (~fling@user/fling)
[09:43:23] <terminaldweller> I think I can see your point now.
[09:48:35] *** Joins: koki_ (~koki@host-82-59-88-43.retail.telecomitalia.it)
[09:48:37] *** Quits: Jong (~Jong@2620:10d:c090:400::5:a269) (Ping timeout: 240 seconds)
[09:50:12] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[09:50:20] <terminaldweller> let me ask another question then? can I, as root, update an environment variable for another user session that's already running a bash session? something like `sudo -u USR1 /usr/bin/bash export TMOUT=1000"?
[09:50:47] <emanuele6> why is TMOUT an environment variable??
[09:50:56] <terminaldweller> its not?
[09:51:07] <emanuele6> if you don't export it, no
[09:51:20] <emanuele6> and i don't understand why you would want to export it
[09:51:21] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[09:51:44] <emanuele6> and what you just wrote makes no sense
[09:52:43] *** Joins: cheer (~cheer@cpe-76-189-213-198.neo.res.rr.com)
[09:52:44] <terminaldweller> ok. I guess I'll have to go do more reading then. thanks for your time.
[09:53:09] <emanuele6> terminaldweller: environment variables are a set of key-value arguments that are passed to a program
[09:53:16] <emanuele6> similar to command line arguments
[09:53:29] <emanuele6> they are not some session-configuration thing
[09:53:50] <terminaldweller> I know but they can still be modified, right? unset? exporting again?
[09:54:36] <terminaldweller> they live next to `argv`s in the vritual mem on top of stack.
[09:54:48] <emanuele6> the fact it is an environment variable rather than a regular variable does not make it any more modifiable than a regular variable.
[09:55:53] <emanuele6> as i said initially, if you want to modify the variable you have to communicate with that process like you would with any other process, with gdb, with signals, with a pipe, etc
[09:56:13] <emanuele6> and make the target shell change the value by itself
[09:57:00] <emanuele6> and since the logic is handled by the user and not by root, there is nothing preventing the user from doing it by themselves
[09:57:25] <emanuele6> there is no magic
[09:58:02] <emanuele6> you are basically asking how to modify the content of a process's memory at runtime
[09:58:39] <terminaldweller> oh... thats a no go then.
[10:00:23] <terminaldweller> OK. thank you for your time.
[10:04:29] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[10:08:17] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 240 seconds)
[10:09:18] *** Quits: spawnmc (~spawnmc@user/spawnmc) (Quit: Client closed)
[10:14:53] *** Quits: cisco87 (~quassel@static.128.104.12.49.clients.your-server.de) (Remote host closed the connection)
[10:16:27] *** Quits: simplicity (~yti@user/simplicity) (Remote host closed the connection)
[10:18:41] *** Joins: simplicity (~yti@user/simplicity)
[10:32:44] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:35:36] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[10:37:17] *** Joins: thevishy (~Nishant@2405:201:f005:c007:48b2:97f1:a252:93a6)
[10:38:37] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[10:45:11] *** Joins: owl4ce[m] (~owl4cemat@2001:470:69fc:105::1:3235)
[10:51:52] *** Quits: ano (~ano@user/ano) (Quit: ano)
[10:52:37] *** Joins: ano (~ano@user/ano)
[10:53:12] *** Quits: ano (~ano@user/ano) (Client Quit)
[10:56:41] *** Joins: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net)
[10:57:10] <ac_slater> hey guys. I have a weird process that I want to put in the background and call `wait` against. But, I want all I/O to be directed toward that process.
[10:57:27] <ac_slater> I hope that makes sense
[10:59:19] <ac_slater> I guess it can be simulated with "bash & wait" but I want to interact with that process as if it were in the foreground
[11:00:00] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[11:00:04] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[11:00:08] *** Quits: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:00:15] *** Joins: unop (~unop@194.154.249.71)
[11:03:42] *** Joins: Kyuzo68 (~Kyuzo@host-80-104-242-33.retail.telecomitalia.it)
[11:04:33] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[11:06:13] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[11:06:52] *** Quits: kurahaupo (~kurahaupo@pa49-182-131-41.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[11:09:08] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[11:10:31] *** Joins: timj (~timj@user/timj)
[11:11:57] *** Quits: DynV (~DynV@user/dynv) (Ping timeout: 240 seconds)
[11:12:20] *** Joins: DynV (~DynV@user/dynv)
[11:13:33] *** Joins: rendar (~rendar@user/rendar)
[11:15:03] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[11:15:29] *** Joins: jensen (~jensen@65.78.100.184)
[11:15:54] *** Joins: unop (~unop@194.154.249.71)
[11:16:11] *** Joins: dreamon (~dreamon@ppp-88-217-82-137.dynamic.mnet-online.de)
[11:16:16] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[11:16:33] *** Joins: Libero (~Libero@77.49.184.64.dsl.dyn.forthnet.gr)
[11:18:46] *** Quits: timj (~timj@user/timj) (Ping timeout: 256 seconds)
[11:19:02] *** Quits: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[11:20:10] *** Quits: n4dir (~user@i5E86C5D8.versanet.de) (Remote host closed the connection)
[11:22:19] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[11:24:19] <jensen> wrt to this: https://mywiki.wooledge.org/BashPitfalls#cmd1_.26.26_cmd2_.7C.7C_cmd3 , should one avoid this even with something like `true && echo ok || echo "not ok` where echo never exits 1 in typical usage?
[11:24:54] *** Quits: sazawal (~sazawal@122.161.92.186) (Quit: Leaving)
[11:25:42] *** Joins: Mo (~Mo@dynamic-077-010-090-208.77.10.pool.telefonica.de)
[11:26:16] <emanuele6> jensen: the first example is exactly `test && echo || echo' so i don't get why you are asking it
[11:29:01] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:29:05] *** Joins: tobybl (~tobybl@213.31.132.151)
[11:29:43] <emanuele6> (as if you are describing a different case)
[11:30:21] *** Joins: ano (~ano@user/ano)
[11:31:31] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[11:31:47] <jensen> i mean is it good practice to just avoid that format even if some commands like echo isn't a concern because it always exits 0
[11:33:11] <emanuele6> `if a; then b; else c; fi' do not have the same meaning
[11:33:15] <emanuele6> err
[11:33:29] <emanuele6> `if a; then b; else c; fi' and `a && b || c' do not have the same meaning
[11:34:13] <jensen> yes, i understand the pitfall where || depends on b, not "a && b"
[11:34:33] <emanuele6> depends on b?
[11:34:36] <jensen> but if b always exits 0, then the effect is like "a && b"
[11:34:37] <emanuele6> it depends of a&&b
[11:35:10] <geirha> echo can exit non-zero
[11:35:32] <emanuele6> the precedence is `{ a && b ;} || c', not `a && { b || c ;}'
[11:35:45] <emanuele6> why do you say "depends on b, not a && b"?
[11:36:57] <geirha> # help echo | tail -n 2
[11:36:58] <shbot> geirha:     Exit Status:
[11:36:58] <shbot> geirha:     Returns success unless a write error occurs.
[11:37:18] <emanuele6> yeah, a write is very likely to fail
[11:37:43] <emanuele6> a better example of something that never fails would have been `rm -f' or a variable assignment
[11:38:24] *** Quits: cheer (~cheer@cpe-76-189-213-198.neo.res.rr.com) (Quit: WeeChat 3.3)
[11:38:36] <emanuele6> but if you use `test && rm -f -- "$file" || something', you are really asking for problems
[11:39:19] <nf> is there a good reason to ever disable extglob?
[11:39:20] <emanuele6> (a variable assignment that assigns a literal)
[11:39:30] *** Quits: FoodMan (~glucose@user/foodman) (Ping timeout: 260 seconds)
[11:39:30] <emanuele6> nf: they are not on by default
[11:39:46] <nf> to ever not enable it then :p
[11:40:12] <emanuele6> if you don't need them and you want to remove noise from the script
[11:40:51] <nf> rephrasing #3: in a context where extglob is on by default, is there a good reason to disable it?
[11:40:58] <nf> i'm thinking of like compatibility reasons
[11:41:13] <jensen> i mean it depends on b assuming a is true... i just wanted to make an emphasis the tip was making. Anyway, the question was going to be:
[11:41:17] *** Quits: richardm75 (~richardm7@2600:8801:c507:b200:8e1:5106:d083:f6c5) (Ping timeout: 240 seconds)
[11:41:18] <nf> but i think a POSIX sh script that uses extglob syntax would fail anyway because of the ()
[11:41:27] <jensen> Won't grouping solve this problem? (a && b) || c
[11:41:38] <jelly> nf, interactive or noninteractive use?
[11:41:41] <geirha> badly written scripts could potentially fail, or behave differently, with extglob enabled. That's likely why it's not enabled by default
[11:41:47] <nf> noninteractive
[11:42:03] <emanuele6> jensen: if a fails and b fails, then a&&b is false and c needs to be evaluated..
[11:42:05] <nf> geirha: hm, do you have an example?
[11:42:30] <emanuele6> it makes no sense to group a and b, that is the default precedence
[11:42:37] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[11:42:52] <jelly> nf, well that sounds like any other feature, if you need bash-specific syntax, be explicit in your #! and don't worry further
[11:43:46] <geirha> # touch oops ; VAR='!()' bash +O extglob -c 'shopt extglob; echo $VAR'
[11:43:47] <shbot> geirha: extglob         off
[11:43:47] <shbot> geirha: !()
[11:43:53] <geirha> # touch oops ; VAR='!()' bash -O extglob -c 'shopt extglob; echo $VAR'
[11:43:53] <shbot> geirha: extglob         on
[11:43:53] <shbot> geirha: oops
[11:46:51] *** Joins: arinov (~arinov@213.194.126.155)
[11:46:53] <nf> oh ah
[11:47:06] *** Quits: Mo (~Mo@dynamic-077-010-090-208.77.10.pool.telefonica.de) (Ping timeout: 256 seconds)
[11:47:27] *** Joins: Mo (~Mo@37.186.172.101)
[11:47:37] <nf> thanks
[11:48:53] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[11:52:12] *** Quits: Mo (~Mo@37.186.172.101) (Ping timeout: 256 seconds)
[11:52:32] <gr33n7007h> something has been bugging me. why are all the shell variables uppercase bar `auto_resume` & `histchars`?
[11:52:40] *** Joins: Mo (~Mo@dynamic-077-010-090-208.77.10.pool.telefonica.de)
[11:53:40] <jensen> i'm an idiot, lol. I suppose there's no way to write an actual one liner since && || aren't ternary operators?
[11:53:46] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:54:35] <emanuele6> how is `if a; then b; else c; fi' not one line?
[11:55:02] *** Quits: xizhendu_ (~xizhendu@36.112.188.169) (Ping timeout: 256 seconds)
[11:55:22] <jensen> i mean you can squeeze an entire script like that. unless people do do that, then i shall do the same
[11:56:47] *** Joins: diamondbond (~diamondbo@175.157.107.97)
[11:57:37] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[11:58:06] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Quit: Leaving)
[11:58:23] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[11:59:02] *** Joins: chenqisu12 (~bhca7d@183.217.201.63)
[11:59:21] <bud> do while true
[11:59:54] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[12:00:01] <bud> if false break
[12:00:10] *** Joins: unop (~unop@194.154.249.71)
[12:00:28] *** Joins: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3)
[12:00:53] <lopid> why use many word when few word to trick
[12:01:03] <ac_slater> lol
[12:01:32] <geirha> gr33n7007h: Yeah. Most likely they were copied from other shells, and they were already lowercase there, for whatever reason.
[12:03:01] <geirha> The history expansion mess was copied from csh, so that's probably the origin of histchars, at least
[12:03:58] <geirha> The worst feature to be added to bash, if you ask me
[12:06:15] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[12:06:56] *** Joins: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au)
[12:07:22] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:09:18] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[12:10:57] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[12:11:45] <bud> i only do history search with these: https://0x0.st/-C91.txt (from my .inputrc)
[12:12:37] <bud> its nice, then i can type f.i. cat (press up and it brings last occurrence of a command started with "cat ")
[12:12:38] *** Quits: maharg101 (~maharg101@savoy.force9.co.uk) (Quit: Textual IRC Client: www.textualapp.com)
[12:13:03] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Quit: Leaving)
[12:13:52] *** Quits: unop (~unop@194.154.249.71) (Ping timeout: 268 seconds)
[12:15:18] *** Joins: unop (~unop@194.154.249.71)
[12:17:02] *** Quits: Kyuzo68 (~Kyuzo@host-80-104-242-33.retail.telecomitalia.it) (Quit: Konversation terminated!)
[12:19:17] *** Quits: unop (~unop@194.154.249.71) (Read error: Connection reset by peer)
[12:19:35] *** Joins: unop (~unop@194.154.249.71)
[12:23:25] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[12:23:32] *** Quits: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net) (Ping timeout: 240 seconds)
[12:23:39] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[12:25:56] *** Joins: legola (~legola@46.235.101.65)
[12:28:50] <grawity> I disabled !-expansion in my bashrc 7 years ago and haven't missed it since...Ctrl+R does the job well. I saw fzf has a hook for visual Ctrl+R history search, might try it out
[12:32:26] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 245 seconds)
[12:33:38] <colo> I do like `sudo !!` and friends
[12:34:12] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 240 seconds)
[12:36:47] <emanuele6> ^P ^A sudo <space>
[12:38:28] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[12:39:57] *** Quits: mat001 (~mat001@c-71-202-208-145.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[12:40:14] *** Joins: lavaball (felix@31.204.155.215)
[12:42:51] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Ping timeout: 268 seconds)
[12:44:17] <colo> yeah, there's more than one way to do it. I still like my !! :p
[12:45:04] *** Quits: unop (~unop@194.154.249.71) (Read error: Connection reset by peer)
[12:45:46] *** Joins: igemnace (~ian@user/igemnace)
[12:46:49] *** Joins: unop (~unop@194.154.249.71)
[12:47:16] <gr33n7007h> geirha: ahh, right, that makes sense. it didn't even cross my mind they could of been copied from older shells :)
[12:49:19] *** Joins: tobybl_ (~tobybl@213.31.132.151)
[12:51:50] *** Quits: tobybl (~tobybl@213.31.132.151) (Ping timeout: 260 seconds)
[12:53:17] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 240 seconds)
[12:57:16] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[12:57:41] *** Joins: timj (~timj@user/timj)
[12:58:54] *** Quits: chenqisu12 (~bhca7d@183.217.201.63) (Read error: Connection reset by peer)
[12:59:25] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[13:00:14] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Remote host closed the connection)
[13:02:02] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:02:06] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[13:02:32] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[13:06:35] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[13:11:05] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[13:11:27] *** Joins: shad (~shad@user/shad)
[13:12:05] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Read error: Connection reset by peer)
[13:12:30] *** Quits: DynV (~DynV@user/dynv) (Quit: Konversation terminated!)
[13:17:38] *** Quits: diamondbond (~diamondbo@175.157.107.97) (Quit: Leaving)
[13:24:07] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Quit: leaving)
[13:24:22] *** Joins: joo-_ (~joo-_@87-49-45-77-mobile.dk.customer.tdc.net)
[13:24:22] *** Quits: joo-_ (~joo-_@87-49-45-77-mobile.dk.customer.tdc.net) (Changing host)
[13:24:22] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[13:25:26] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 260 seconds)
[13:25:36] *** Joins: fourHZ (~fourHZ@92-52-40-121.dynamic.orange.sk)
[13:26:18] *** Joins: AsenMx (~AsenMx@user/asenmx)
[13:26:38] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[13:28:15] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Client Quit)
[13:28:32] *** Joins: codebam (~codebam@user/codebam)
[13:29:06] *** Quits: unop (~unop@194.154.249.71) (Ping timeout: 256 seconds)
[13:29:45] *** Joins: unop (~unop@194.154.249.71)
[13:31:17] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[13:31:33] *** Joins: martinus__ (~martin@96.19.201.77.rev.sfr.net)
[13:32:30] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[13:33:38] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 256 seconds)
[13:35:45] *** Joins: codebam (~codebam@user/codebam)
[13:38:04] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[13:38:38] *** Joins: keypusher (keypusher@user/keypusher)
[13:39:36] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[13:41:00] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[13:42:18] *** Joins: bbju (~bbju@103.144.149.220)
[13:43:16] *** Quits: drewlander (~drewlande@74.196.20.3) (Ping timeout: 256 seconds)
[13:46:57] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 240 seconds)
[13:48:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:48:34] *** Quits: zaden (~maddx@c-73-92-207-228.hsd1.ca.comcast.net) (Quit: WeeChat 3.5-dev)
[13:49:50] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:50:21] *** Joins: furrymcgee (~devuan@cgn-89-1-208-9.nc.de)
[13:51:11] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 252 seconds)
[13:52:41] *** Joins: earnestly (~earnest@user/earnestly)
[13:52:54] *** Quits: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:53:17] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[13:54:52] *** Joins: drewlander (~drewlande@74.196.20.3)
[13:56:00] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[13:56:03] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:81c1:fdbc:2b2:4c4a)
[13:57:05] *** Quits: libc (~weechat@user/tessio) (Quit: WeeChat 3.2)
[13:58:01] *** Quits: drewlander (~drewlande@74.196.20.3) (Client Quit)
[13:58:05] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 268 seconds)
[14:00:56] *** Quits: mongy (~mongy@user/mongy) (Quit: WeeChat 3.3)
[14:02:30] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:2898:525a:5805:3485)
[14:02:30] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:2898:525a:5805:3485) (Changing host)
[14:02:30] *** Joins: skapata (~Skapata@user/skapata)
[14:03:02] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[14:04:10] *** Joins: drewlander (~drewlande@74.196.20.3)
[14:07:02] *** Joins: mongy (~mongy@user/mongy)
[14:08:01] *** Quits: drewlander (~drewlande@74.196.20.3) (Client Quit)
[14:10:00] *** Joins: drewlander (~drewlande@74.196.20.3)
[14:10:31] *** Joins: fatal (~0x00@user/fatal)
[14:12:25] *** Quits: dead1 (~dead@user/dead1) (Quit: Leaving)
[14:12:53] *** Joins: xx (~xx@user/xx)
[14:15:17] *** Joins: FoodMan (~glucose@user/foodman)
[14:16:12] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[14:16:46] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[14:16:57] *** Quits: drewlander (~drewlande@74.196.20.3) (Ping timeout: 240 seconds)
[14:17:52] *** Joins: libc (~weechat@user/tessio)
[14:19:02] *** Joins: razend (~razend@94.200.42.14)
[14:20:18] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[14:29:47] *** Joins: drd (~drd@93-42-69-115.ip85.fastwebnet.it)
[14:31:46] *** Joins: Kyuzo68 (~Kyuzo@host-80-104-242-33.retail.telecomitalia.it)
[14:35:24] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 256 seconds)
[14:35:29] *** Quits: fatal (~0x00@user/fatal) (Remote host closed the connection)
[14:35:41] *** Joins: AsenMx (~AsenMx@user/asenmx)
[14:46:19] *** Joins: ravan_ (~ravan@user/ravan)
[14:47:23] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[14:49:14] *** Quits: winstonsmith (~winstonsm@gateway/vpn/pia/winstonsmith) (Remote host closed the connection)
[14:49:20] *** Joins: malina (~malina@user/malina)
[14:49:29] *** Joins: winstonsmith (~winstonsm@gateway/vpn/pia/winstonsmith)
[14:50:10] *** Quits: Mo (~Mo@dynamic-077-010-090-208.77.10.pool.telefonica.de) (Read error: Connection reset by peer)
[14:50:17] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[14:51:24] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[14:53:59] *** Joins: fatal (~0x00@user/fatal)
[14:55:01] <rendar> what is !! ?
[14:55:54] <tirnanog> it could be a double negation in a mathematical context.
[14:55:56] *** Joins: lavaball (felix@31.204.155.215)
[14:55:57] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 240 seconds)
[14:56:23] <tirnanog> # echo $(( !! 0 )); echo $(( !! 123 ))
[14:56:24] <shbot> tirnanog: 0
[14:56:24] <shbot> tirnanog: 1
[14:56:50] <tirnanog> it could also be a form of history expansion.
[14:56:57] <tirnanog> which is probably what you mean, come to think of it.
[14:57:05] <pj> comes in quite handy in some languages where truthy is different from boolean true/false and you need the latter.
[14:57:26] <pj> but yeah, in this context it has to do with history expansion.
[14:57:30] <tirnanog> from the relevant section of the manpage: !! Refer to the previous command. This is a synonym for `!-1'.
[14:57:34] *** Quits: libc (~weechat@user/tessio) (Quit: WeeChat 3.2)
[14:58:36] <pj> some people like to do: sudo !!
[14:58:52] *** Joins: _gabriele (~gabriele@user/gabriele)
[15:01:45] <rendar> i was referring to `sudo !!` -- what's that?
[15:02:07] <rendar> i mean, ok double negation, but why with sudo?
[15:02:14] <tirnanog> what was stated just above.
[15:02:32] <rendar> ok
[15:02:35] *** Joins: seninha (~seninha@user/seninha)
[15:03:12] <tirnanog> the previous command, in its entirety. if any.
[15:03:15] <rendar> so, `sudo !!` just call the previous command i called with sudo
[15:03:29] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[15:03:49] <tirnanog> yes.
[15:03:56] <rendar> it seems the previous command is been looked also in bash history
[15:04:25] *** Joins: zostj (~rue@1-162-47-43.dynamic-ip.hinet.net)
[15:04:35] <colo> has anyone of you ever used https://www.bashsupport.com/ ("A powerful Bash plugin for JetBrains IDEs")? is this any good?
[15:04:47] *** Joins: Mo (~Mo@dynamic-077-010-090-208.77.10.pool.telefonica.de)
[15:05:59] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[15:06:20] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[15:06:39] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[15:15:07] *** Joins: libc (~weechat@user/tessio)
[15:17:33] <geirha> Use a gigantic java ide to edit bash scripts? nah...
[15:18:07] *** Joins: zaden (~maddx@c-73-92-207-228.hsd1.ca.comcast.net)
[15:19:19] *** Joins: cdown (~cdown@188.214.11.14)
[15:20:29] <Soliton> how else are you going to take part in the log4j fun though??
[15:22:05] *** Parts: koki_ (~koki@host-82-59-88-43.retail.telecomitalia.it) ()
[15:28:22] <djph> Soliton: sitting back and drinking coffee
[15:31:48] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[15:34:09] <libc> geirha: thanks
[15:34:41] *** Joins: semeion (~semeion@user/semeion)
[15:35:37] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[15:35:46] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 245 seconds)
[15:35:59] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[15:37:40] <libc> doesntwork
[15:37:45] <libc> !doesntwork
[15:37:45] <greybot> Saying something "doesn't work" helps neither you or us. Explain the result you *want* or *expect*, what you are *doing* and *how* it is failing. Copy/paste the commands you use and the errors they produce. Consider set -x to get more information on what is happening.
[15:37:53] <libc> who want some ?
[15:39:43] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[15:41:02] <zeraphel> colo: i have been using https://github.com/bash-lsp/bash-language-server for a while,  i see no benefits to it over plain old shellcheck.
[15:42:52] <razend> bashsupport looks cool
[15:43:01] <razend> I do use Jetbrains IDE
[15:45:05] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[15:48:17] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[15:49:34] *** Joins: OlCe (~user@lfbn-nic-1-588-65.w90-118.abo.wanadoo.fr)
[15:55:53] *** Joins: n4dir (~user@i5E86C5D8.versanet.de)
[15:56:19] *** Joins: lavaball (~Melissa@31.204.155.215)
[15:58:49] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:11:54] *** Joins: koki (~koki@host-95-246-137-17.retail.telecomitalia.it)
[16:13:51] <Pinchiukas> I got a program to print stuff in the format of [one]=1 <newline> [two]=2 and put that inside smth=() and now I realize it's being treated as a single string. Any ideas to make it actually happen?
[16:14:15] <Soliton> !eval
[16:14:15] <greybot> 'eval' is a common misspelling of 'evil'. If eval is the answer, surely you are asking the wrong question. See http://mywiki.wooledge.org/BashFAQ/048
[16:14:41] <Pinchiukas> I'm getting mixed feelings about this. :D
[16:14:42] <Soliton> if your program prints shell code you need to eval it.
[16:20:04] *** Joins: mithrin (~mithrin@188-167-233-152.dynamic.chello.sk)
[16:20:12] *** Joins: wako (~wako@151.68.10.132)
[16:20:41] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[16:21:50] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[16:25:02] *** Parts: koki (~koki@host-95-246-137-17.retail.telecomitalia.it) ()
[16:27:09] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[16:35:13] *** Joins: unop (~unop@194.154.249.71)
[16:36:44] <libc> geirha: #sed
[16:37:03] <libc> it doesntwork
[16:37:37] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.4)
[16:43:08] *** Quits: wako (~wako@151.68.10.132) (Read error: Connection reset by peer)
[16:43:19] *** Joins: wako (~wako@151.68.10.132)
[16:44:00] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[16:48:17] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 240 seconds)
[16:51:17] *** Quits: razend (~razend@94.200.42.14) (Ping timeout: 256 seconds)
[16:53:34] *** Joins: fling (~fling@user/fling)
[16:58:16] *** Joins: superboot (~agentgasm@user/superboot)
[17:00:13] *** Quits: wako (~wako@151.68.10.132) (Quit: Leaving)
[17:00:34] *** Joins: Leonard (~Administr@114.55.127.80)
[17:00:46] *** Joins: sinaowolabi (~SinaOwola@41.58.218.49)
[17:03:50] *** Quits: tofran (~tofran@37.189.158.134) (Ping timeout: 260 seconds)
[17:07:21] *** Joins: Jong (~Jong@163.114.132.6)
[17:11:52] *** Quits: Kyuzo68 (~Kyuzo@host-80-104-242-33.retail.telecomitalia.it) (Quit: Konversation terminated!)
[17:12:02] *** Quits: unop (~unop@194.154.249.71) (Read error: Connection reset by peer)
[17:12:24] *** Joins: unop (~unop@194.154.249.71)
[17:14:41] *** Joins: drewlander (~drewlande@74.196.20.3)
[17:16:03] *** Quits: bunny (~bunny@user/bunny) (Remote host closed the connection)
[17:16:25] *** Joins: bunny (~bunny@user/bunny)
[17:17:53] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[17:18:38] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[17:18:44] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[17:19:22] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[17:19:31] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 245 seconds)
[17:23:03] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[17:27:02] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:31:11] *** Quits: _val_ (~valentin@82-169-14-137.biz.kpn.net) (Ping timeout: 245 seconds)
[17:33:41] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:35:41] *** Joins: wolfshappen (~waff@irc.furworks.de)
[17:37:03] <hejux> this `command1  && command2' thing, could return unwanted error code
[17:38:12] <hejux> and when you see that error code in your terminal... you scratch your head, and thinking what the hell went wrong...
[17:38:22] <hejux> if then fi is much safer.
[17:39:35] *** Joins: tex (~super@user/dix)
[17:42:19] *** Joins: GNUHacker (~foobar@fsf/member/GNUHacker)
[17:47:47] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[17:48:12] *** Quits: drd (~drd@93-42-69-115.ip85.fastwebnet.it) (Read error: Connection reset by peer)
[17:48:35] *** Joins: tofran (~tofran@37.189.158.134)
[17:48:38] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[17:50:06] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[17:53:43] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[17:54:29] *** Joins: cisco87 (~quassel@static.134.4.251.148.clients.your-server.de)
[17:55:08] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[17:55:26] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[17:55:36] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[17:57:02] *** Quits: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[17:57:42] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[18:03:32] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 265 seconds)
[18:04:04] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[18:05:35] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[18:07:26] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[18:08:31] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[18:09:10] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Client Quit)
[18:14:51] <DPA> I improved a bash script bootstrapping a system, by isolating mount, pid & ipc namespaces a bit more & restricting which devices it can find in /dev. But now it breaks, after running a long time, with exit code 129.
[18:14:51] <DPA> There is no error message. And suspiciously, the exit trap of my script doesn't print anything, so probably doesn't run, I think something may be killing it. (it's running apt at the time, installing lots of things.).
[18:14:51] <DPA> How can I debug this?
[18:16:37] <Soliton> # kill -l 129
[18:16:38] <shbot> Soliton: HUP
[18:16:39] <tirnanog> 129 implies SIGHUP.
[18:17:31] <Soliton> in bash the exit trap should execute.
[18:17:46] <tirnanog> yeah.
[18:19:39] *** Joins: legola (~legola@46.235.101.65)
[18:19:45] *** Joins: mooz (~none@23.254.112.158)
[18:20:11] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[18:20:15] *** Joins: chandoo (~chandoo@96.240.98.220)
[18:21:00] <DPA> Interesting. It's this script: https://bpa.st/75IA called as  "script mountpoint/ apt-get install lots of stuff"
[18:21:00] <DPA> The script itself is run by another script, which is run by make, which I run from a terminal. As far as I know, none redirect anything nor create any pipes.
[18:21:20] <twkm> i smell set -e.
[18:22:21] <DPA> set -e should still trigger the exit trap.
[18:25:05] <Soliton> how do you know your exit trap is not triggered?
[18:25:07] <twkm> unless the code in your trap handler is itself terminated before it does what you expect.
[18:25:45] <twkm> # set -e; trap "true; echo foo" 0; false
[18:25:46] <shbot> twkm: foo
[18:25:46] <shbot> twkm: (shell exited with 1)
[18:25:53] <twkm> # set -e; trap "false; echo foo" 0; false
[18:25:54] <shbot> twkm: (shell exited with 1)
[18:26:09] <DPA> Oh, wait a second, I forgot to add "set -x". I could have sworn I aded that at some point...
[18:26:15] *** Joins: pmercado (~pmercado@186.107.51.181)
[18:27:03] *** Joins: kj (~kj@kj.aerisnetwork.net)
[18:27:31] *** Quits: bbju (~bbju@103.144.149.220) (Quit: Ping timeout (120 seconds))
[18:29:12] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[18:29:24] *** Joins: Minvera (~Minvera@162.223.44.49)
[18:29:41] *** Joins: wolfshappen (~waff@irc.furworks.de)
[18:31:04] <DPA> So I guess now I will probably see the trap execute when it happens next time, and I'll have to try to figure out what apt is failing to do at the time. Which I've no idea how to do. I bet it's going to be something related to the pseudo terminals or something like that...
[18:33:00] *** Joins: LanDi (~landi@177.37.146.152)
[18:33:22] *** Joins: igemnace (~ian@user/igemnace)
[18:33:37] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 240 seconds)
[18:34:18] *** Joins: wolfshappen (~waff@irc.furworks.de)
[18:34:32] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[18:37:03] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:37:45] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:39:42] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[18:40:17] <earnestly> !pp
[18:40:17] <greybot> Positional parameters, such as $1, $2, $3, or "$@" for all of them. See http://bash-hackers.org/wiki/doku.php?id=scripting:posparams
[18:40:20] <earnestly> !pretty
[18:40:20] <greybot> "Pretty-print" your bash code: pretty() { printf 'pretty() { %s\n }; declare -f pretty' "$(cat)" | bash | sed '1d;2d;$d;s/^ //'; } ## Usage: pretty < myscript
[18:40:23] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[18:40:30] *** Joins: ||arifaX (~Commodore@p4fc72d5b.dip0.t-ipconnect.de)
[18:40:30] *** Quits: ||arifaX (~Commodore@p4fc72d5b.dip0.t-ipconnect.de) (Changing host)
[18:40:30] *** Joins: ||arifaX (~Commodore@user/arifax/x-9857073)
[18:41:14] *** Joins: zebrag (~chris@user/zebrag)
[18:41:49] *** Joins: nitrowheels (~nitrowhee@151.95.83.100)
[18:42:17] *** Quits: sinaowolabi (~SinaOwola@41.58.218.49) (Read error: No route to host)
[18:43:42] <gajus> I have a script that currently iterates and updates one file at a time
[18:43:44] <gajus> i.e. gfind './src' -iregex '.*\.\(ts\|tsx\)$' -print0 | while read -d $'\0' file do cat "$file" | eslint_d --stdin --fix-to-stdout > "$file" echo "DONE $file" done
[18:44:11] <gajus> what would be the best alternative if I wanted to parallelize this operation? i.e. transform 4 files at a time
[18:44:38] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[18:45:20] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[18:46:25] <Soliton> !sponge
[18:46:25] <greybot> sponge() ( tmp=$(mktemp) && cat > "$tmp" && cat -- "$tmp" > "$1" && rm -- "$tmp"; ) # read and write the same file in a pipeline: grep -v '^#' file | sponge file
[18:46:48] <Soliton> you're likely truncating file before cat can read it.
[18:47:52] <Soliton> can eslint handle multiple files with one invocation?
[18:48:20] <Soliton> !wait-n
[18:48:20] <greybot> Run up to 5 processes in parallel (bash 4.3): i=0 j=5; for elem in "${array[@]}"; do (( i++ < j )) || wait -n; my_job "$elem" & done; wait
[18:48:47] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[18:49:30] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[18:49:37] <gajus> Thank you
[18:49:40] <Soliton> i would also get rid of the crazy -iregex. who even knows how emacs regex work or whatever it was.
[18:50:15] <Soliton> \( -name '*.ts' -o -name '*.tsx' \)
[18:52:06] *** Joins: Thanatermesis (~Thanaterm@191.92.148.122)
[18:52:36] *** Quits: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f) (Quit: Oops)
[18:54:18] *** Joins: samgranieri (~samgranie@user/samgranieri)
[18:54:41] *** Joins: sinaowolabi (~SinaOwola@41.58.218.49)
[18:55:06] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (Quit: ZNC 1.8.2+deb2build1 - https://znc.in)
[18:55:42] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[18:58:26] <Soliton> i=0 j=4; gfind './src' \( -name '*.ts' -o -name '*.tsx' \) -print0 | while IFS= read -rd $'\0' file; do (( i++ < j )) || wait -n; { eslint_d --stdin --fix-to-stdout < "$file" > "$file.new" && mv "$file.new" "$file"; printf 'DONE %s\n' "$file"; } & done
[19:00:41] <pmercado> Hi, sorry but don't know if this question fit here, but anyway... currently doing "find . ! -newermt "jan 01 2021" -newermt "jan 01 2020" -print0 | xargs -0 du -shc" to find whole size of files made in a year. But final result is same large "find" output list file with size and some "partials du -c Totals", like ./file1 ./file2 ./file3 Total: 13kb.... ./file4 ./file5 ./file6 Total: 5Kb...
[19:01:13] *** Parts: GNUHacker (~foobar@fsf/member/GNUHacker) (https://gnu.org)
[19:02:00] <e36freak> same if you -exec du -sch {} + # instead of using xargs?
[19:02:28] <e36freak> du is still gonna print the sizes of each file in addition to the total, but if you have enough files it's not gonna be able to accept them all in one invocation due to maximum argument size
[19:02:56] <e36freak> oh, use --files0-from=-
[19:03:09] <e36freak> find ... -print0 | du -shc --files-from=-
[19:03:10] <earnestly> Yes, avoid ARG_MAX entirely
[19:03:24] <e36freak> just had to look to see if it has the option
[19:03:27] <earnestly> e36freak: GNU du has -0
[19:03:37] <e36freak> or that
[19:03:38] <earnestly> --files0-from=-
[19:03:44] <earnestly> Oh you noted that first
[19:03:49] <earnestly> Your example lacked it :p
[19:04:07] <e36freak> second one got it
[19:04:11] *** Quits: n4dir (~user@i5E86C5D8.versanet.de) (Remote host closed the connection)
[19:04:28] <earnestly> pmercado: So `find ... -print0 | du --files0-from=- -shc'
[19:04:53] <e36freak> pipe to tail or whatever if you just want the total
[19:05:12] <pmercado> let me see, thanks e36freak and earnestly :)
[19:05:22] <earnestly> If you want total, I wouldn't use -h, but then have awk sum it for me and numfmt (or awk as well) to turn it into human readable
[19:06:49] *** Quits: LanDi (~landi@177.37.146.152) (Read error: Connection reset by peer)
[19:07:15] <Soliton> sounds like a useless use of awk and numfmt.
[19:10:17] *** Quits: samgranieri (~samgranie@user/samgranieri) (Ping timeout: 240 seconds)
[19:11:11] <earnestly> Hm
[19:11:21] <earnestly> I suppose so since there's no ARG_MAX here
[19:12:32] *** Joins: knstn (~knstn@ppp-94-66-57-173.home.otenet.gr)
[19:13:29] *** Joins: samgranieri (~samgranie@user/samgranieri)
[19:15:17] <e36freak> earnestly: i thought about that too, then i saw the --files0-from
[19:17:22] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[19:18:00] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Client Quit)
[19:18:16] <earnestly> e36freak: I appreciate that xargs has -x, to the degree that xargs can be appreciated
[19:20:06] <hejux> $__inside__
[19:20:08] <hejux> .........
[19:20:25] *** Joins: arinov (~arinov@178.240.130.28)
[19:21:05] <hejux> rm -f "$rootfs"/usr/sbin/policy-rc.d
[19:21:14] *** Joins: chomwitt (~chomwitt@2a02:587:dc19:a500:12c3:7bff:fe6d:d374)
[19:21:23] <hejux> shit. if $rootfs returns nothing. then ... DPA
[19:22:03] <hejux> use "${rootfs:?}"/usr/sbin/policy-rc.d
[19:22:51] *** Joins: TRS-80 (~TRS-80@gateway/vpn/pia/trs-80)
[19:23:01] <TRS-80> Good day, fellow wizards!
[19:23:53] *** Joins: Guest70 (~Guest70@c-98-240-233-64.hsd1.mn.comcast.net)
[19:24:10] <hejux> exec chroot . "$@"
[19:24:43] *** Guest70 is now known as listen_ers
[19:24:45] <hejux> it is better doing chroot /path -s /bin/bash <<-'EOF' .........'EOF'
[19:24:46] <tirnanog> consider, also, the case where the value of rootfs is one or more slashes.
[19:24:51] <TRS-80> I have got find outputting some list of file names matching a reliable pattern like YYYY-MM-DD-HHMM [...] but now how can I exclude results which are prior to a given date?
[19:24:59] <pmercado> earnestly e36freak thanks, your hints help me. Now, how can I get only "new files"? with find -newerbt "<day>" ?
[19:25:15] * TRS-80 have been reading man find and scratching head for some hours
[19:25:26] <pmercado> seems is not supported in my system
[19:25:37] <TRS-80> pmercado: Because birth time is often not supported
[19:25:40] <earnestly> pmercado: What system?
[19:25:54] <hejux> DPA: the code is full of bugs ... // comment as a newbie.
[19:26:41] <earnestly> (file birth is fairly widely supported with newer versions of linux, and its filesystems, these days)
[19:26:55] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:26:56] * TRS-80 t. Debian user
[19:26:59] <earnestly> Now that statx and such can display it
[19:27:13] <earnestly> And stat(1) being written in terms of statx
[19:27:40] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[19:27:49] *** Quits: joerg (~saturn@user/joerg) (Quit: this shouldn't have happened... ever)
[19:27:50] <tirnanog> also, -newerB?
[19:28:12] <tirnanog> just need to make sure it's viable first, of course.
[19:28:15] <Soliton> TRS-80: either you go by file date or write a pattern that only matches the dates you want.
[19:29:08] <tirnanog> that format looks amenable to a lexical comparison also i.e. < and > in [[
[19:29:09] *** Joins: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com)
[19:29:41] <tirnanog> but, still, if it's birth times you care about, -newerXY is worth a look.
[19:29:41] <TRS-80> tirnanog: yes, this is not on accident (ISO dates lending themselves to natural sort)
[19:30:11] *** Quits: modobasico (~modobasic@2001:470:69fc:105::1:1bc) (Quit: You have been kicked for being idle)
[19:31:04] <Soliton> find is not going to do the comparison though. then you need post-processing in a shell loop or so.
[19:31:12] <tirnanog> yes
[19:31:34] <TRS-80> Soliton: Well the regex is for NNNN-NN-NN-NNNN[NN].ext only, because I want to filter out all "untagged / unlabled" files (which would look like "NNNN-NN-NN-NN[NN]_some_label.ext
[19:31:41] <TRS-80> yeah that is what I was afraid of
[19:31:47] <tirnanog> so, if having find compare against the birth time is not viable on your particular system, something like: find ... -print0 | while read -rd ''; do [[ $REPLY < 2021-01-01-0000 ]] || printf '%s\n' "$REPLY"; done
[19:32:04] <pmercado> earnestly: "This system does not provide a way to find the date a file was created.". And yes, is "-newerBt". Can I use -newerct <day> ? btw, files are uploaded and not moved anyway
[19:32:06] <tirnanog> slicing the pathname as may be necessary, of course.
[19:32:17] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Ping timeout: 240 seconds)
[19:32:21] *** Quits: Mo (~Mo@dynamic-077-010-090-208.77.10.pool.telefonica.de) (Quit: Leaving)
[19:32:35] <TRS-80> tirnanog: Aah yes something like that is exactly what I was looking for, thanks.
[19:33:30] <TRS-80> pmercado: You may want mtime
[19:33:46] <hejux> Soliton: you got lots of snippets
[19:34:26] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[19:34:39] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[19:35:35] *** Joins: unop (~unop@194.154.249.71)
[19:36:03] * TRS-80 knew there was some easier way but was having mental block for some reason
[19:36:10] <TRS-80> Thanks frens
[19:37:27] <hejux> wait a second, functions can be defined like this? f () () # run in subshell
[19:37:54] <Soliton> you can use any compound command.
[19:40:26] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[19:40:59] *** Quits: cq-work (~Z_Lund@user/cq-work) (Quit: WeeChat 3.3)
[19:43:09] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[19:45:17] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (Ping timeout: 240 seconds)
[19:46:03] <hejux> Soliton: any? you mean this also ? f () if ... then.. elif ... else ... fi ?
[19:46:14] *** Joins: kapil (~kapil@o-k.website)
[19:47:24] <Soliton> sure.
[19:48:09] *** Joins: richardm75 (~richardm7@2600:8801:c507:b200:b18a:25c2:9e17:d9f9)
[19:48:17] <hejux> !functions
[19:48:17] <greybot> To define: funcname() { your code here; } ## To use: funcname arg1 arg2 ... The "function" keyword isn't portable. ## http://mywiki.wooledge.org/BashGuide/CompoundCommands#Functions
[19:48:32] *** Quits: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net) (Ping timeout: 240 seconds)
[19:49:20] *** Quits: rcernin (~rcernin@124.190.149.221) (Ping timeout: 256 seconds)
[19:50:48] *** Quits: samgranieri (~samgranie@user/samgranieri) (Quit: samgranieri)
[19:51:55] *** Quits: ||arifaX (~Commodore@user/arifax/x-9857073) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[19:53:57] <hejux> fname () compound-command [redirection]
[19:54:02] <hejux>  function fname [()] compound-command [redirection]
[19:54:12] <hejux> man bash ... i need to read the man again.
[19:54:14] <topoi> I apologize if not bash related, but why does the RE "[^(^$)#]" include lines with comments?
[19:55:04] *** Parts: Pinchiukas (~keps@128.29.231.35.bc.googleusercontent.com) (WeeChat 2.8)
[19:55:35] <Fernando-Basso> # nums=(0 1 2 11 12 22 20 21) ; printf '%s\n' "${nums[@]}" | sort -n | tail -n 1
[19:55:36] <shbot> Fernando-Basso: 22
[19:55:44] <Soliton> BRE or ERE?
[19:55:52] <Soliton> looks weird either way though.
[19:56:09] <Fernando-Basso> Is there a more advisable way to get the greatest numerically sorted value from an array?
[19:56:18] *** Joins: spawnmc (~spawnmc@user/spawnmc)
[19:57:16] *** Quits: zostj (~rue@1-162-47-43.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[19:57:45] <topoi> Soliton: ERE (I used egrep to filter /etc/apt/sources.list)
[19:57:58] <topoi> Soliton: Why does it look weird though?
[19:58:14] <Soliton> do you want to match line start?
[19:58:29] <Soliton> because the regex can match wherever.
[19:58:50] <emanuele6> [^(^$)#] matches any line that contains a character that is not '(' '^' '$' ')' '#'
[19:59:00] <emanuele6> in the line:    # a comment
[19:59:07] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[19:59:30] <emanuele6> ' ', 'a', 'c', 'o', 'm', 'e', 'n' and 't' all match that regex
[19:59:31] *** Joins: zostj (~rue@1-162-42-120.dynamic-ip.hinet.net)
[19:59:36] <emanuele6> so the line is printed
[19:59:48] *** Joins: magla (~gelignite@55d4e80d.access.ecotel.net)
[19:59:51] <topoi> Oh. I wanted to filter out empty and commented lines.
[20:00:41] *** Quits: tobybl_ (~tobybl@213.31.132.151) (Remote host closed the connection)
[20:00:47] <hejux> Fernando-Basso: bash does not have a flag for sort
[20:00:48] <Soliton> perhaps: grep -v -e '^ *#' -e '^$'
[20:00:49] <hejux> zsh has
[20:00:53] <spawnmc> weird question... I have multiple hostnames: "unique1.foobar.ssh.com" ... I want the the ssh command to be only "ssh unique1" rather than the full hostname when I paste the full hostname "ssh unique1.foobar.ssh.com" , both on prompt and scripts
[20:01:23] <spawnmc> i know how to filter out the string but not sure how to implement it
[20:01:34] *** Joins: earendel (uid498179@user/earendel)
[20:01:36] <twkm> fix your ssh configuration.  perhaps write a function.
[20:02:18] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 276 seconds)
[20:02:26] *** Quits: ravan_ (~ravan@user/ravan) (Read error: Connection reset by peer)
[20:02:35] <spawnmc> well actually it would be more accurate to say "unique1.unique2.foobar.com"
[20:02:37] <phy1729> spawnmc: add a Host unique1.foobar.ssh.com section to your .ssh/config to rewrite to the full hostname
[20:03:14] <hejux> Fernando-Basso: on zsh: a=(1 3 5 9 2 22) ; echo ${(n)^a}
[20:03:32] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Ping timeout: 252 seconds)
[20:03:48] <twkm> so go use zsh.
[20:04:20] <twkm> why the fuck do people want every shell to be identical.
[20:04:23] <topoi> emanuele6: Thanks. I thought somehow the special symbols are also valid in sets.
[20:04:26] <hejux> bash does not have that kind of Parameter Expansion Flags
[20:04:43] <phy1729> twkm: it's more fun when people assume zsh differences from bash are bugs in zsh
[20:05:18] <twkm> same underlying reason.
[20:05:31] <emanuele6> even if they were, `[^#]' will match any line that contains at least one character that is not '#'
[20:06:18] <emanuele6> s/match/print/
[20:06:20] *** Quits: vmeson (~rmacleod@198-48-226-187.cpe.pppoe.ca) (Quit: Konversation terminated!)
[20:06:24] *** Joins: grettke (~grettke@184.62.226.206)
[20:06:58] <hejux> twkm: bash is more posix... by default
[20:07:11] <hejux> but to be honest, zsh is much more powerful than bash...
[20:07:22] <phy1729> hejux: zsh isn't really topical in #bash
[20:07:31] <hejux> yeah.
[20:07:35] <hejux> just saying
[20:07:45] <gr33n7007h> Fernando-Basso: nums=(0 1 2 11 12 22 20 21) max=${nums[0]}; for num in "${nums[@]}"; do ((num > max)) && max=$num; done
[20:07:51] <jelly> I assume it's bugs in bash.
[20:07:51] <Fernando-Basso> OK. Now let's move on with our lives.
[20:08:06] <Fernando-Basso> gr33n7007h: Interesting. Thanks.
[20:08:20] <spawnmc> I'm guessing this is not the right place to ask .ssh/config specific questions? xd
[20:08:28] <emanuele6> gr33n7007h: for num in "${nums[@]:1}"
[20:08:29] <phy1729> There's #openssh
[20:08:40] <gr33n7007h> Fernando-Basso: np
[20:08:48] <hejux> spawnmc: just ask... i just finished the man ssh_config, ask me anything
[20:09:05] *** Joins: vmeson (~rmacleod@198-48-226-187.cpe.pppoe.ca)
[20:09:07] <phy1729> hejux: not the channel for that; there's #openssh for ssh questions
[20:09:22] <ormaaj> Depends which aspect of zsh.
[20:11:29] <hejux> gr33n7007h: your code assume the ${nums[0]} is the smallest ..
[20:11:52] <twkm> spawnmc: perhaps check the documentation.
[20:12:01] <earendel> why the fuck do people want every shell to be identical. << twkm, 2021-12-20
[20:12:08] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[20:12:09] <hejux> yeah, man is the best friend
[20:12:14] *** Joins: stonkey (~stonkey@user/stonkey)
[20:13:28] <twkm> i've probably said that from time to time, perhaps yearly, for the last couple of decades.  sometimes s/bash/ksh/.
[20:13:34] *** earendel is now known as disfrutar-conchi
[20:13:48] *** Quits: Pall (~Pall@cpc139184-sprt3-2-0-cust125.17-2.cable.virginm.net) (Remote host closed the connection)
[20:14:25] *** Joins: Pall (~Pall@cpc139184-sprt3-2-0-cust125.17-2.cable.virginm.net)
[20:15:20] <hejux> gr33n7007h: sorry, i recall my message.
[20:15:58] *** Quits: dreamon (~dreamon@ppp-88-217-82-137.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[20:16:53] <hejux> twkm: sorry to brought z up.
[20:16:57] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Ping timeout: 240 seconds)
[20:17:01] <hejux> i'll shutup.
[20:17:18] *** Quits: grettke (~grettke@184.62.226.206) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:20:17] <topoi> emanuele6: (So even if special symbols would be valid in sets) shouldn't "[^(^$)#]" match all lines that aren't empty nor comments (because ¬(a∨b)=¬a∧¬b)?
[20:21:05] <twkm> it's fine, just pointless for someone writing bash.
[20:21:46] <Soliton> twkm: bracket expressions match a single character. no clue what exactly you're asking now.
[20:21:50] <e36freak> topoi: ranges take a list of single characters
[20:21:52] <Soliton> err topoi*
[20:22:00] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[20:22:02] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 240 seconds)
[20:22:03] *** Joins: Lunatrius` (~Lunatrius@77.38.70.90)
[20:22:10] <e36freak> not even close to valid regex there
[20:22:16] *** Quits: Lunatrius (~Lunatrius@77.38.22.219) (Ping timeout: 268 seconds)
[20:22:19] *** Lunatrius` is now known as Lunatrius
[20:22:31] <Soliton> i mean it's valid. just doesn't do what is wanted.
[20:24:12] <e36freak> fair enough
[20:25:38] *** Joins: BSaboia (~bsaboia@177.37.198.107)
[20:25:49] <Soliton> i guess the idea was to negate "^#|^$". in general not something you can do in regex though in this case you could instead do: "^[^#]"
[20:26:40] <Soliton> i expect you don't want to match '   #comment' either though...
[20:29:28] <topoi> Soliton: OK, I sadly erred on thinking I got RE to some degree. Can you hint at some literature (or is it feasable to read some specific info pages)?
[20:30:17] <Soliton> !regex
[20:30:17] <greybot> Regular Expressions are used to *match* certain patterns in strings. They come in several flavors (BRE, ERE, PCRE, and more). Bash only supports EREs (using [[ string =~ pattern ]]). Sed uses BREs. See !ere, !bre, !pcre, http://mywiki.wooledge.org/RegularExpression
[20:31:12] <Soliton> if you want to go deep then https://www.regular-expressions.info/ is pretty good not only for BRE and ERE, i think.
[20:31:29] <emanuele6> there is also the #regex #
[20:31:31] *** Quits: zostj (~rue@1-162-42-120.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[20:31:33] <emanuele6> oops
[20:31:50] <emanuele6> there is also the #regex channel that is specifically for regex discussion
[20:32:03] <tirnanog> also, regex(7) if you have it. that gets straight to the point, as far as ERE and BRE are concerned.
[20:32:06] <emanuele6> and links learning resources in topic
[20:34:02] <wiscii> hi, i'm using `set -C` (noclobber) to protect a file.  The problem is the script immediately exits when it hits this block - IE. when the file already exists.  Is there someway to not exit if noclobber is hit ?
[20:34:50] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[20:34:58] <wiscii> the command i use is: exec 7> "${1}" || continue
[20:35:12] <wiscii> inside a while
[20:35:27] *** Joins: zostj (~rue@1-162-41-8.dynamic-ip.hinet.net)
[20:35:43] <Soliton> # echo > file; set -C; exec > file; echo end
[20:35:44] <shbot> Soliton: bash: file: cannot overwrite existing file
[20:35:44] <shbot> Soliton: end
[20:35:44] *** Quits: thevishy (~Nishant@2405:201:f005:c007:48b2:97f1:a252:93a6) (Quit: Leaving)
[20:36:11] <emanuele6> # echo 'echo > file; set -C; exec > file; echo end' > script; bash script
[20:36:12] <shbot> emanuele6: script: line 1: file: cannot overwrite existing file
[20:36:12] <shbot> emanuele6: end
[20:36:25] <wiscii> i don't know why but my script exits .. even shown with sset -x
[20:36:38] <emanuele6> !-e
[20:36:38] <greybot> "set -e" is an inheritance of the old bourne shell, and doesn't really work well with modern shell features. You'll really have less buggy scripts if you do the error handling manually instead of relying on the unreliable "set -e"; see http://mywiki.wooledge.org/BashFAQ/105
[20:37:02] <wiscii> not set -e .. i already dropped that
[20:37:06] <tirnanog> set -e wouldn't explain it, though. unless a fib has been told as to the nature of the code.
[20:39:14] *** Quits: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net) (Quit: Quit)
[20:39:31] <wiscii> this is set -x output:
[20:39:38] <wiscii> ./lock-test.sh: 51: cannot create ./f.lock: File exists
[20:39:40] <wiscii> + exec
[20:40:09] <wiscii> the exec is the exec to open fd 7, it fails and the script exits
[20:40:29] <emanuele6> # set -x; exec 7> /usr/bin/jq; echo end
[20:40:30] <shbot> emanuele6: + exec
[20:40:30] <shbot> emanuele6: + echo end
[20:40:30] <shbot> emanuele6: end
[20:40:57] <wiscii> i've pruned to source down to 97 loc .. just for this single issue
[20:41:17] <emanuele6> oh, i forgot -C
[20:41:20] <emanuele6> # set -Cx; exec 7> /usr/bin/jq; echo end
[20:41:26] <shbot> emanuele6: + exec
[20:41:26] <shbot> emanuele6: bash: /usr/bin/jq: cannot overwrite existing file
[20:41:26] <shbot> emanuele6: etc... ( http://ix.io/3IXU )
[20:41:37] <emanuele6> see, that is the same output
[20:41:40] <disfrutar-conchi> why the fuck do people want every shell to be identical. << tkwm, 2021-12-20
[20:41:41] <emanuele6> exec, error
[20:41:44] <tirnanog> wiscii: pastebin?
[20:41:56] <emanuele6> does not mean that the program exits after
[20:41:59] <wiscii> sure .. hold on
[20:42:20] *** Joins: TomyLobo (~TomyLobo@p200300e80f006700814dd77ec0a9f818.dip0.t-ipconnect.de)
[20:42:51] <emanuele6> anyway, it looks like wiscii is not using bash
[20:42:56] <emanuele6> probably using dash
[20:42:58] <emanuele6> d# set -Cx; exec 7> /usr/bin/jq; echo end
[20:42:59] <shbot> emanuele6: dash: 1: cannot create /usr/bin/jq: File exists
[20:42:59] <shbot> emanuele6: + exec
[20:43:04] <wiscii> https://paste.debian.net/1224207/
[20:43:11] <emanuele6> and dash seems to be exiting after that
[20:43:22] <wiscii> i am dash in sh mode
[20:44:06] <emanuele6> yeah, the only way i was able to tell that was from the error message in your output that is different from bash's
[20:44:17] <wiscii> sure
[20:44:39] <wiscii> let me try bash first
[20:44:46] <disfrutar-conchi> does sets. i wish they could be done with plugs jacks and valkyries on rollerskates again
[20:45:15] <wiscii> bash works cirrectly!
[20:45:16] <disfrutar-conchi> at least the modeset pretty please!
[20:46:12] *** Joins: ChmEarl (~chmearl@user/chmearl)
[20:46:19] <emanuele6> it seems that dash makes the shell exit when `exec' fails even when exec is only used for setting redirections
[20:46:22] <wiscii> and #dash is empty
[20:46:30] <emanuele6> i am not sure if that is accurate POSIX behaviour
[20:46:48] <wiscii> yes, agreed, thanks for getting to the cause so quickly!
[20:47:19] <emanuele6> a non-interactive shell should exit if an exec fails to spawn a process, but i don't think it is accurate to also make the shell exit if an exec with redirection fails
[20:47:25] <emanuele6> maybe it is unspecified
[20:47:28] <jelly> thou shalt not exec in vain
[20:47:57] <disfrutar-conchi> to my unfortune the first article i read on posix was about extended regex
[20:48:33] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[20:48:36] <disfrutar-conchi> posix and my future ruined
[20:48:51] <disfrutar-conchi> :p
[20:49:01] <ormaaj> execfail can be useful on occasion
[20:49:45] <tirnanog> emanuele6: I think it's bash that is in the wrong.
[20:50:02] <disfrutar-conchi> when is it i want to exec? can this be put in a convenient line of words(tm(
[20:50:03] <tirnanog> "If a redirection error occurs (see Consequences of Shell Errors), the shell shall exit with a value in the range 1-125"
[20:50:23] *** Quits: eggbean (~eggbean@user/eggbean) (Quit: WeeChat 3.4)
[20:50:39] <disfrutar-conchi> i mean < 80 col :)
[20:51:31] <emanuele6> # bash --posix -C -c 'exec 7> /usr/bin/jq; echo end'
[20:51:32] <shbot> emanuele6: bash: line 1: /usr/bin/jq: cannot overwrite existing file
[20:51:32] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:51:45] <emanuele6> yeah, bash in POSIX mode also behaves like that
[20:51:48] <tirnanog> right.
[20:51:51] <tirnanog> I just noticed also.
[20:52:02] <tirnanog> conclusion: dash is correct.
[20:52:10] <wiscii> tirnanog: where is that from, please ?
[20:52:19] <tirnanog> wiscii: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html
[20:52:24] <wiscii> tyvm
[20:52:59] <tirnanog> here's a better link: http://www.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_20
[20:53:33] <tirnanog> emanuele6: is it documented, though? I'm having trouble finding anything about it.
[20:53:37] <wiscii> i think i can use subshell
[20:54:03] <e36freak> you can always test first
[20:54:12] <emanuele6> you can't use a subshell, the fd would only be set for the subshell
[20:54:13] <e36freak> exec in a subshell isn't gonna help if you need the redirection to persist
[20:54:46] <e36freak> you can do { commands; blah >&9; blah; } 9>file
[20:55:32] *** Joins: eggbean (~eggbean@user/eggbean)
[20:55:34] <emanuele6> tirnanog: that bash behaviour is specified in the manual section for exec
[20:55:50] <emanuele6> but i don't think there is a mention of the different behaviour in posix mode
[20:56:48] <emanuele6> "If command is not specified, any redirections take effect in the current shell, and the return status is 0. If there is a redirection error, the return status is 1."
[20:56:49] <tirnanog> emanuele6: ok. it's covered in a somewhat generic manner by item #23 of https://tiswww.case.edu/php/chet/bash/POSIX.
[20:57:54] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[20:57:57] *** Joins: dreamon (~dreamon@pd9503f67.dip0.t-ipconnect.de)
[20:59:35] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[21:00:00] *** Joins: stonkey (~stonkey@user/stonkey)
[21:01:12] *** Joins: sublim20 (~sublim20@user/sublim20)
[21:04:26] *** Joins: roadie (~user@2a02:8108:ec0:1427:68b7:a824:bbd1:1af9)
[21:06:12] <tirnanog> wiscii: if sh must remain the target, one option would be to use mkdir as a locking mechanism. it is, after all, atomic.
[21:06:55] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[21:06:58] *** Quits: arinov (~arinov@178.240.130.28) (Ping timeout: 256 seconds)
[21:08:34] *** Joins: arinov (~arinov@178.240.130.28)
[21:09:49] *** Quits: mrlemke (~quassel@208.74.105.200) (Quit: No Ping reply in 180 seconds.)
[21:10:07] *** Quits: listen_ers (~Guest70@c-98-240-233-64.hsd1.mn.comcast.net) (Quit: Client closed)
[21:11:08] *** Joins: mrlemke (~quassel@208.74.105.200)
[21:11:16] *** Joins: Guest70 (~Guest70@c-98-240-233-64.hsd1.mn.comcast.net)
[21:11:39] <tirnanog> i.e. mkdir "$lockdir/1" 2>/dev/null || continue. you just need to ensure that $lockdir exists and is empty first.
[21:11:43] *** Guest70 is now known as listen_ers
[21:12:59] <wiscii> tirnanog: yes, that is another option - thanks for your help
[21:13:01] <tirnanog> and is writeable, obviously. othewise, it will make a mockery of the approach.
[21:14:32] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[21:15:00] <cryptonector> https://johannes.truschnigg.info/writing/2021-12_colodebug/
[21:15:03] *** Quits: Pall (~Pall@cpc139184-sprt3-2-0-cust125.17-2.cable.virginm.net) (Quit: Leaving)
[21:15:07] <cryptonector> talks about using : as a comment
[21:15:15] <cryptonector> which is nice because then you see the commentary when xtrace is on
[21:15:20] *** Joins: Pall (~Pall@cpc139184-sprt3-2-0-cust125.17-2.cable.virginm.net)
[21:15:20] <cryptonector> and it goes from there
[21:15:23] <earnestly> cryptonector: : used to be a comment before # existed
[21:15:25] <cryptonector> I might adopt that technique
[21:15:45] <cryptonector> though I think the arguments to : should be quoted if there's any special chars -- just cause : == true doesn't mean an invocation of it is effect-less
[21:15:54] <cryptonector> earnestly: interesting -- TIL!
[21:16:02] *** Quits: arinov (~arinov@178.240.130.28) (Ping timeout: 256 seconds)
[21:16:08] <Soliton> always good to execute your comments.
[21:16:11] <tirnanog> yes. shellcheck has a test for that, in fact.
[21:16:22] <cryptonector> yes, I know
[21:16:34] <cryptonector> I've been mildly annoyed by it in the past :)
[21:16:37] <earnestly> cryptonector: I suggest using a proper debug function that can be defined at runtime to print or not
[21:16:57] <cryptonector> earnestly: that is my current pattern
[21:17:00] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[21:17:09] <cryptonector> I define info/verbose/notice/... functions
[21:17:24] *** Joins: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net)
[21:17:36] <earnestly> It's nice, people seem to forget that you can (re)define functions as needed.  So much of this 'if ((debug))' everytime, even if in a function, is silly
[21:17:48] <cryptonector> I generally use : for this sort of thing: : ${var:=def_val}
[21:17:54] <earnestly> I don't do that either
[21:18:14] *** Joins: A|an (~Alan@173.216.51.200)
[21:18:20] <cryptonector> and shellcheck complains, naturally
[21:18:21] <earnestly> While I do try to avoid 'cute' abuses of the shell, I also use posix sh in a way that most people would consider a little crazy
[21:18:35] <cryptonector> since it should be : "${var:=def_val}"
[21:18:57] *** Quits: tofran (~tofran@37.189.158.134) (Ping timeout: 240 seconds)
[21:19:05] <emanuele6> cryptonector: yes, because if var is set to '/**/*' from the environment the shell will have to expand a huge glob
[21:19:14] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[21:19:17] <emanuele6> and overload your computer
[21:19:25] <cryptonector> emanuele6: right
[21:19:25] <emanuele6> for no reason, but unsafe code
[21:19:44] *** Joins: tobybl (~tobybl@213.31.132.151)
[21:19:46] <earnestly> It means you don't have to type 'var=' !
[21:19:50] <earnestly> What a benefit
[21:20:04] <earnestly> var=${var:-default} # too obvious
[21:20:38] <emanuele6> `: "${var=def_val}"' is fine, but quote it if you use it
[21:20:38] <cryptonector> heh, well, for some reason it's an idiom I developed that I liked at the time, and it stuck
[21:21:01] <cryptonector> having to add two double quote characters makes the savings in typing less useful...
[21:21:02] <cryptonector> :)
[21:22:38] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[21:22:47] <emanuele6> earnestly: `${var:-var=default}' :)
[21:23:19] <emanuele6> # var=x; ${var:-var=default}; declare -p var
[21:23:19] <shbot> emanuele6: bash: x: command not found
[21:23:20] <shbot> emanuele6: declare -- var="x"
[21:23:24] <emanuele6> ah, right
[21:23:28] <emanuele6> nevermind
[21:23:38] <emanuele6> could have been funny
[21:23:46] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[21:23:56] <emanuele6> # ${var:-var=default}; declare -p var
[21:23:57] <shbot> emanuele6: bash: var=default: command not found
[21:23:57] <shbot> emanuele6: bash: declare: var: not found
[21:24:28] <emanuele6> it does not even work, because the result of a parameter expansion is always interpreted as a command
[21:24:44] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[21:25:39] *** Joins: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net)
[21:26:05] <earnestly> cryptonector: Though much of this 'logging framework' nonsense can avoided in most cases.  See also https://monkey.org/~marius/unix-tools-hints.html
[21:26:26] <earnestly> (Also 'Rule of Silence' and 'Full Exploitation')
[21:26:38] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[21:27:19] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[21:27:21] *** Quits: furrymcgee (~devuan@cgn-89-1-208-9.nc.de) (Quit: leaving)
[21:29:29] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Read error: Connection reset by peer)
[21:29:30] *** Joins: john1_ (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[21:30:02] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[21:31:33] <disfrutar-conchi>  try to avoid 'cute' abuses of the shell -- that sounds like trying not to stumble over your dick.
[21:31:52] <disfrutar-conchi> you are kid!
[21:32:00] <disfrutar-conchi> C:\Larry>
[21:32:36] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[21:33:01] *** Quits: john1_ (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Read error: Connection reset by peer)
[21:34:10] *** Quits: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[21:34:52] *** Quits: eggbean (~eggbean@user/eggbean) (Quit: WeeChat 3.4)
[21:37:05] *** Quits: listen_ers (~Guest70@c-98-240-233-64.hsd1.mn.comcast.net) (Quit: Client closed)
[21:38:22] *** Joins: hyskaru (~hyskaru@lfbn-tou-1-123-39.w86-201.abo.wanadoo.fr)
[21:38:36] *** Quits: hyskaru (~hyskaru@lfbn-tou-1-123-39.w86-201.abo.wanadoo.fr) (Client Quit)
[21:41:04] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[21:41:19] *** Joins: unop (~unop@194.154.249.71)
[21:41:33] *** Joins: ubique (~ubique@user/ubique)
[21:41:43] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[21:42:05] *** Quits: _gabriele (~gabriele@user/gabriele) (Quit: Leaving)
[21:42:12] *** Quits: Gerula (~Gerula@user/gerula) (Quit: Leaving)
[21:43:07] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (Quit: ZNC 1.7.x-git-3-96481995 - https://znc.in)
[21:44:02] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 240 seconds)
[21:44:37] *** Joins: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be)
[21:45:24] *** Joins: Gerula (~Gerula@user/gerula)
[21:46:52] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[21:49:31] *** Joins: Betal (~Betal@user/betal)
[21:49:50] *** Joins: Sayona_ (~Sayona@user/sayona)
[21:50:17] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[21:50:27] *** Quits: Sayona (~Sayona@user/sayona) (Ping timeout: 268 seconds)
[21:53:24] *** Joins: sandb0y (~pirate@user/sandb0y)
[21:53:46] *** Joins: Sayona (~Sayona@user/sayona)
[21:54:09] *** Joins: hyskaru (~hyskaru@lfbn-tou-1-123-39.w86-201.abo.wanadoo.fr)
[21:54:16] *** Quits: hyskaru (~hyskaru@lfbn-tou-1-123-39.w86-201.abo.wanadoo.fr) (Client Quit)
[21:54:34] *** Quits: Sayona_ (~Sayona@user/sayona) (Ping timeout: 256 seconds)
[21:55:24] <DPA> hejux: The code is perfectly fine. Besides, it's not meant to be run as root anyway (and in the project where I use it, I document that. Well, I guess I could check for that. Also, in a normal system, that file shouldn't exist anyway.
[21:57:09] *** Joins: arinov (~arinov@213.194.126.155)
[22:00:45] *** Quits: zostj (~rue@1-162-41-8.dynamic-ip.hinet.net) (Quit: WeeChat 3.4)
[22:01:22] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 256 seconds)
[22:04:32] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[22:05:02] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 240 seconds)
[22:05:05] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[22:06:25] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Read error: Connection reset by peer)
[22:07:07] <ash_worksi> I know this is an asinine question (as it usually is) but is there a way to read every n words into a variable; if it were some --magic option: `read --magic 2 firsttwo secondtwo everythingelse <<<'The quick brown fox jumps over the lazy dog'`
[22:08:27] <Soliton> that is how read works. no magic needed.
[22:08:57] <Soliton> oh you mean two words in one variable?
[22:09:34] *** Quits: tobybl (~tobybl@213.31.132.151) (Remote host closed the connection)
[22:09:42] *** Joins: keypusher (keypusher@user/keypusher)
[22:09:59] <twkm> i'd likely use an array.
[22:11:35] *** Quits: cdown (~cdown@188.214.11.14) (Remote host closed the connection)
[22:11:48] *** Joins: cdown (~cdown@188.214.11.14)
[22:11:57] *** Quits: Jong (~Jong@163.114.132.6) (Ping timeout: 240 seconds)
[22:14:18] *** Quits: cdown (~cdown@188.214.11.14) (Remote host closed the connection)
[22:14:30] *** Joins: cdown (~cdown@188.214.11.14)
[22:15:20] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[22:19:32] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Ping timeout: 240 seconds)
[22:20:03] *** Quits: sinaowolabi (~SinaOwola@41.58.218.49) (Ping timeout: 268 seconds)
[22:21:09] *** Quits: sublim20 (~sublim20@user/sublim20) (Quit: Leaving)
[22:23:46] *** Joins: cognoscente (~cognoscen@75-164-195-169.ptld.qwest.net)
[22:24:24] *** Joins: karakedi (~eAC53C340@user/karakedi)
[22:25:52] *** Quits: l4yer (~l4yer@178.239.168.223) (Quit: Leaving)
[22:26:50] <DPA> read a a2 b b2 c; a="$a $a2"; b="$b $b2"; unset a2 b2
[22:27:02] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[22:28:28] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[22:30:28] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:33:04] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:34:09] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[22:36:06] *** Joins: l4yer (~l4yer@84.69.191.245)
[22:36:54] *** Joins: ravan (~ravan@user/ravan)
[22:39:29] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[22:40:13] *** Quits: l4yer (~l4yer@84.69.191.245) (Ping timeout: 240 seconds)
[22:43:04] <emanuele6> read-r unset-v
[22:44:24] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Read error: Connection reset by peer)
[22:44:55] *** Joins: mknod (~mknod@user/mknod)
[22:47:21] *** Joins: mat001 (~mat001@c-71-202-208-145.hsd1.ca.comcast.net)
[22:49:36] *** Joins: volgrim (~Volgrim@156-155-224-214.ip.internet.co.za)
[22:50:16] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 268 seconds)
[22:50:21] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:51:11] *** Quits: fourHZ (~fourHZ@92-52-40-121.dynamic.orange.sk) (Quit: nite)
[22:51:14] *** Quits: JohnDoe2 (~johndoe2@2001:470:1f07:89::dead:bead) (Quit: bye)
[22:52:04] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[22:53:32] *** Joins: son0p (~ff@181.136.122.143)
[22:57:01] *** Quits: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5) (Ping timeout: 245 seconds)
[22:58:53] *** Joins: joshbaptiste (~josh@192.210.151.34)
[22:58:57] *** Quits: Sayona (~Sayona@user/sayona) (Ping timeout: 240 seconds)
[23:01:52] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[23:02:21] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[23:03:47] *** Joins: tejr (~tejr@user/tejr)
[23:04:24] *** Quits: TRS-80 (~TRS-80@gateway/vpn/pia/trs-80) (Quit: WeeChat 3.0)
[23:06:19] <emanuele6> 77/w java
[23:06:24] <emanuele6> oops
[23:07:31] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[23:08:03] <disfrutar-conchi> # n=3; for ((i=0;i<20;i+)); do if ((i%n)); do printf '%s ' $i; done;
[23:08:05] <shbot> disfrutar-conchi: bash: syntax error near unexpected token `do'
[23:08:17] <disfrutar-conchi> # n=3; for ((i=0;i<20;i++)); do if ((i%n)); do printf '%s ' $i; done;
[23:08:18] <shbot> disfrutar-conchi: bash: syntax error near unexpected token `do'
[23:08:35] <e36freak> if; then
[23:08:39] <disfrutar-conchi> # n=3; for ((i=0;i<20;i++)); do if ((i%n)); do printf '%s ' $i; fi; done;
[23:08:39] <shbot> disfrutar-conchi: bash: syntax error near unexpected token `do'
[23:08:45] *** Joins: goldfish (~goldfish@user/goldfish)
[23:08:47] <e36freak> then printf
[23:08:49] <e36freak> not do printf
[23:09:09] <disfrutar-conchi> # n=3; for ((i=0;i<20;i++)); do if ((i%n)); then printf '%s ' $i; fi; done;
[23:09:10] <shbot> disfrutar-conchi: 1 2 4 5 7 8 10 11 13 14 16 17 19
[23:09:15] <disfrutar-conchi> lol. right. :/
[23:09:17] <jelly> is this a fizzbuzz
[23:09:38] <emanuele6> # printf '%s ' {1..19..2}
[23:09:39] <shbot> emanuele6: 1 3 5 7 9 11 13 15 17 19
[23:09:44] <disfrutar-conchi> i knew it would backflash. on me.
[23:09:55] <emanuele6> well, 3, not 2
[23:10:00] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[23:10:08] <disfrutar-conchi> emanuele6: nobody would ever know this
[23:10:16] <disfrutar-conchi> i wanted modulo.
[23:10:24] <disfrutar-conchi> why did it not work.
[23:10:57] <jelly> (()) returns false if result is 0, apparently
[23:11:08] <emanuele6> that is how it works
[23:11:14] *** Quits: Xeroine (~Xeroine@user/xeroine) (Ping timeout: 268 seconds)
[23:11:18] *** Joins: shalok_ (~shalok@user/shalok)
[23:11:26] <disfrutar-conchi> it wouldn't be a continuous range then. "jelly"
[23:11:32] *** Quits: shalok (~shalok@user/shalok) (Ping timeout: 240 seconds)
[23:11:40] <disfrutar-conchi> oh it isnt.
[23:11:46] <disfrutar-conchi> then it worked. thanks.
[23:11:48] *** shalok_ is now known as shalok
[23:12:14] <jelly> now make a proper oneliner fizzbuzz.
[23:12:25] <jelly> this isn't even half
[23:12:33] <disfrutar-conchi> who is fizzbuzz.
[23:12:41] <libc> me
[23:12:47] <disfrutar-conchi> ah.
[23:13:03] <libc> i hope you won't make fun of my name disfrustar
[23:13:09] <disfrutar-conchi> go ahead then. make a proper oneliner. its makiyage!
[23:13:27] <disfrutar-conchi> encore un fois.
[23:13:37] <libc> right
[23:13:39] <disfrutar-conchi> lol
[23:13:52] <disfrutar-conchi> no.
[23:13:56] <libc> yes
[23:14:01] <disfrutar-conchi> i have too much respect.
[23:14:03] <jelly> fizzbuzz is not a who
[23:14:13] <libc> jelly: you are not a who
[23:14:24] <jelly> I'm not a doctor, either
[23:14:56] *** Quits: roadie (~user@2a02:8108:ec0:1427:68b7:a824:bbd1:1af9) (Ping timeout: 268 seconds)
[23:15:01] <libc> im a hijacker
[23:15:16] <emanuele6> disfrutar-conchi: it's a game: given a list of number, you have to replace every number that divides 3 with "fizz", any number that divides 5 with "buzz" and any number that divides both (i.e. divides 15) with "fizzbuzz"
[23:15:50] <libc> emanuele6: thanks
[23:15:51] <emanuele6> [1,2,3,4,5,6] -> apply fizzbuzz -> [1,2,fizz,4,buzz,fizz]
[23:15:54] <disfrutar-conchi> hm. okay! i see.
[23:16:08] <disfrutar-conchi> 3 * 5
[23:16:11] <disfrutar-conchi> ?
[23:17:06] <disfrutar-conchi> is that for the way it does recursion?
[23:17:37] <disfrutar-conchi> that {a..b..z} thing was probably a BE? emanuele6? ;)
[23:20:42] <disfrutar-conchi> .map(q).map(q).map(q).map(q).map(q) is better than .map(x=>q(q(q(q(q(x)))))
[23:21:19] *** Joins: tercaL (~tercaL@user/tercal)
[23:21:20] *** Joins: l4yer (~l4yer@84.69.191.245)
[23:21:33] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[23:21:48] <disfrutar-conchi>  .map(a).map(b) mosltyt outperforms .map(x=>b(a(x)))
[23:22:23] <tercaL> I've got a single output line like: [{'text': ['123.123.123.12', '123.12.123.1', '124.12.6.7']}] how can I convert (with what tools) that line, having the IP addresses listed one per each line and eliminating/erasing any other chars?
[23:22:58] <phy1729> Instead of using python print, can you output proper JSON, so jq can use it?
[23:23:22] <disfrutar-conchi> what does jq with the json?
[23:23:40] <disfrutar-conchi> how does it use it. for instance.
[23:24:21] <disfrutar-conchi> hmpf.
[23:24:22] <emanuele6> that does not look like json
[23:24:26] <justsomeguy> I think of jq as awk for json. It's a tool specifically for filtering and transforming json. It has it's own programming language.
[23:25:13] <emanuele6> this is so confusing :/ tercaL posted the same in question in at least three channels and every channel is sending replies
[23:25:30] *** Joins: JohnDoe2 (~johndoe2@2001:470:1f07:89::dead:bead)
[23:25:37] *** Quits: l4yer (~l4yer@84.69.191.245) (Ping timeout: 240 seconds)
[23:25:45] <phy1729> what other two?
[23:25:52] <emanuele6> #awk and #sed
[23:26:22] <phy1729> are they responding anywhere?
[23:26:25] *** Quits: kdc (~kdc@196.211.197.159) (Remote host closed the connection)
[23:26:32] <emanuele6> no.
[23:27:27] *** Quits: nitrowheels (~nitrowhee@151.95.83.100) (Quit: Leaving)
[23:27:28] <jelly> it looks almost, but not quite, like json
[23:27:46] <emanuele6> jq would not be able to part it
[23:27:47] <phy1729> It looks like python print
[23:27:49] <emanuele6> bogus json
[23:27:55] *** Joins: Hax0r (~Hax0r@46.38.81.225)
[23:27:57] <jelly> boson
[23:28:01] <emanuele6> oh, it could be python output, yes
[23:28:18] <phy1729> So they should fix the tool to output proper json and then use jq
[23:28:20] <justsomeguy> That would explain why my test with jq error out.
[23:28:38] <DPA> # echo '[{"text": ["123.123.123.12", "123.12.123.1", "124.12.6.7"]}]' | jq -r '.[].text[]'
[23:28:39] <shbot> DPA: 123.123.123.12
[23:28:40] <shbot> DPA: 123.12.123.1
[23:28:40] <shbot> DPA: 124.12.6.7
[23:29:08] *** Quits: brachamh (~brachamh@user/brachamh) (Ping timeout: 268 seconds)
[23:29:09] <tercaL> jq? That's a FreeBSD shell.
[23:29:12] <twkm> ewww, we hates legacy addresses.
[23:29:20] <emanuele6> !jq
[23:29:20] <greybot> jq is a flexible and lightweight JSON processor: http://stedolan.github.com/jq/ . See #jq. Also, query JSON data with jshon: http://kmkeen.com/jshon/
[23:29:22] <jelly> if I could send a cookie over the internet, I'd send it to DPA
[23:29:35] <phy1729> FreeBSD's shell is tcsh (or was)
[23:29:45] *** Joins: brachamh (~brachamh@user/brachamh)
[23:29:47] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Ping timeout: 252 seconds)
[23:29:55] <tercaL> phy1729: csh now
[23:30:09] <phy1729> In any case not jq and jq is the right tool for the job here
[23:30:37] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[23:30:52] <emanuele6> would be if the output was json
[23:30:54] <emanuele6> but it is not
[23:31:04] <phy1729> that's an bug with that tool
[23:31:06] *** Joins: worldofgeese[m] (~worldofge@2001:470:69fc:105::1:3cd8)
[23:31:18] <jelly> well jq obviously worked, so...
[23:31:30] <justsomeguy> tercaL: What is producing the output? Is it JSON, or something else?
[23:31:40] <tercaL> did a "pkg install jq" installed it, and echo '[{"text": ["123.123.123.12", "123.12.123.1", "124.12.6.7"]}]' | jq -r '.[].text[]' worked great! That's all what I needed. Many thanks ladies&guys.
[23:32:04] <phy1729> hey look the quotes changed; maybe just a typo in the first place
[23:32:08] <tercaL> justsomeguy: fail2ban outputs the list of banned IP addresses
[23:32:28] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[23:32:29] <tercaL> phy1729: Sorry?
[23:32:32] *** Quits: steam (~steam@user/steam) (Remote host closed the connection)
[23:32:45] <phy1729> You had single quotes in your original question
[23:32:56] <emanuele6> your question that you sent multiple times had ', not "
[23:33:03] <emanuele6> [{'text': ['123.123.123.12', '123.12.123.1', '124.12.6.7']}]
[23:33:56] *** Joins: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net)
[23:34:17] *** Joins: steam (~steam@user/steam)
[23:34:24] <jelly> |tr \' \" and reduce it to problem above
[23:35:05] <emanuele6> that is just terrible
[23:35:18] <tercaL> emanuele6: original line:
[23:35:28] <tercaL> [{'banned': ['212.83.186.254', '124.122.65.78', '47.254.247.161']}]
[23:35:54] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[23:36:09] *** Quits: fatal (~0x00@user/fatal) (Ping timeout: 276 seconds)
[23:36:18] *** Joins: fatal (~0x00@user/fatal)
[23:36:29] *** Joins: tofran (~tofran@37.189.158.134)
[23:36:30] <disfrutar-conchi> #!/usr/bin/node \n arr=[{'text': ['123.123.123.12', '123.12.123.1', '124.12.6.7']}]; arr[0].text.forEach(element=>stdout.writeln(element))
[23:37:01] <phy1729> tercaL: whatever is outputing this, should output JSON not random stuff with single quotes
[23:37:15] <disfrutar-conchi> boo
[23:38:29] <tercaL> God, a user called "nmz1" in #awk suggested a CRAZY solution, worked perfectly:
[23:38:31] * disfrutar-conchi phy1729 fails to score by unfortunate lore json expose .. oout. 
[23:38:31] <tercaL> awk 'BEGIN {ipv4 = "(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])"} {s=$0;while( match(s,ipv4) ){print substr(s,RSTART,RLENGTH);s=substr(s,RSTART+RLENGTH) } } '
[23:39:16] <jelly> might as well grep -o then!  Cats and dogs sleeping together!
[23:39:38] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[23:40:34] *** Joins: unop (~unop@194.154.249.71)
[23:40:39] <earnestly> !ip4
[23:40:42] <earnestly> !ip
[23:40:42] <greybot> https://mywiki.wooledge.org/IpAddress
[23:40:54] *** Joins: roadie (~user@2a02:8108:ec0:1427:68b7:a824:bbd1:1af9)
[23:40:56] <earnestly> Hm
[23:41:00] <earnestly> !octet
[23:41:13] <earnestly> Well, it's somewhere in greybot
[23:41:23] <emanuele6> !searchkeys ip
[23:41:23] <greybot> emanuele6: 29 matches found: $subscript, checkip, clipboard, coinflip, curlpipesh, euopipefail, ip, ipc, ipv4, ipv4alt, ipv6, lastpipe, myip, namedpipe, ormaajsnip, ormaajsnip2, ormaajxclip, pipe, pipefail, pipestatus, ...
[23:41:28] <emanuele6> !ipv4
[23:41:28] <greybot> isdottedquad() [[ $1 = *.*.*.* && $1 != *.*.*.*.* && .$1. != *..* && $1 != *[!.[:digit:]]* && $1 != *[1-9][0-9][0-9][0-9]* && $1 != *[3-9][0-9][0-9]* && $1 != *2[6-9][0-9]* && $1 != *25[6-9]* ]]
[23:41:29] *** Quits: Hax0r (~Hax0r@46.38.81.225) (Remote host closed the connection)
[23:41:33] <jelly> just ignore any format whatsoever and get out anything that barely looks like ipv4
[23:41:44] <earnestly> Yeah I never bother matching these things exactly
[23:42:03] <earnestly> Typically because the context in which they're presented already provides guarantees on what the data format will be
[23:42:06] <jelly> grep -Po '(\d+\.){3}\d+' is, after all, 4 characters shorter than tr \' \" |jq -r '.[].text[]'
[23:42:08] <emanuele6> that regex is not even correct because it does not match 127.1
[23:42:18] <earnestly> It's not as though I'm looking for addresses in free-form text
[23:42:36] <earnestly> emanuele6: Probably why the function is named as such
[23:42:40] <jelly> I don't think fail2ban is going to ever output 127.1
[23:42:59] <emanuele6> i was referring to the one used in the awk
[23:43:06] <earnestly> Eugh
[23:43:17] <jelly> but it might output ipv6 at some point
[23:43:32] <emanuele6> it looks like it is 100+ bytes and it is not even correct :/
[23:43:59] <earnestly> Though I did end up making my own banning thing, but it was service specific which themselves produce specifically formatted logs.  I just took the relevant field and sent that off to a socket/fifo which my blocking service picked up and added to the firewall
[23:44:07] <emanuele6> 146 bytes
[23:44:18] <jelly> (I used grep -P just to avoid [[:digit:]], so long)
[23:44:28] *** Joins: Sayona (~Sayona@user/sayona)
[23:44:38] *** worldofgeese[m] is now known as worldofgeese
[23:44:42] <earnestly> (Iow, I don't put myself in a position where I need to regex anything.  IP addresses are in field 4 of each log line, job done)
[23:44:42] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[23:44:49] <tercaL> https://imgur.com/ERRziAX
[23:45:04] <emanuele6> !screenshot
[23:45:04] <greybot> Please do not use a screenshot to share text. Use a pastebin. Anything that happens in the terminal is text. Anything that involves graphics is not bash related.
[23:45:09] <earnestly> And let the firewall deal with parsing addresses, this means I can handle all the crazy stuff glibc supports, such as 0x notation
[23:45:27] <tercaL> I'm sorry.
[23:45:30] <earnestly> tercaL: (Also imgur requires both javascript enabled and cookies to display images if not direct links)
[23:45:46] <earnestly> Which means I can't see it
[23:47:19] *** Joins: CaCode (~CaCode@user/cacode)
[23:47:49] *** Quits: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net) (Quit: WeeChat 3.3)
[23:48:05] <jelly> https://i.imgur.com/ERRziAX.png
[23:48:29] <jelly> ^ can be raw'd programatically, just like pastebin dot com
[23:49:22] *** Quits: Sayona (~Sayona@user/sayona) (Ping timeout: 260 seconds)
[23:49:59] *** Joins: Sayona (~Sayona@user/sayona)
[23:50:12] <earnestly> jelly: Sometimes, I think I tried this once and found issues but it might be /a/ links now that I recall
[23:50:42] <earnestly> Can fail2ban list anything but ip addresses?
[23:51:07] <disfrutar-conchi> i think it's a mistake for the printer to drop single quotes on output. is this the great can of worm opener.
[23:51:09] <earnestly> Because
[23:51:26] <earnestly> If it lists ipv4 and ipv6 all you need to get ipv4 is exclude anything containing :
[23:52:22] <jelly> nod, /a/ links are different, those are "albums" and sadly imgur defaults to those if you upload from web
[23:52:46] <disfrutar-conchi> it's like a lossy pipeline.. with each process in it repeating the same failure and coming up with their own solutions (which replace one symbol withanother, ad infinitum regress)
[23:52:51] <earnestly> jelly: It might be possible to pull out the slugs from the page html, but yeah
[23:52:55] *** Joins: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net)
[23:53:08] <DPA> tr \' \" | jq -r '.[][][]'
[23:53:18] <jelly> ooh
[23:53:45] <jelly> grep -Po '(\d+\.){3}\d+' still shorter by 2
[23:54:08] <earnestly> DPA is right
[23:54:28] <disfrutar-conchi> there's actually two ways. one is delimiter. (serial throughput,fast). and other is boundaries (requires high buffers, recursion, but luxuriously unambigous)
[23:54:38] <jelly> but yours wins on aestethics alone
[23:54:41] <disfrutar-conchi> oh and maybe of course. static length.
[23:54:44] <earnestly> emanuele6: (There's an important lesson in programming: "Don't parse")
[23:54:45] <disfrutar-conchi> :)
[23:55:40] <jelly> and if fail2ban starts outputting actual json some day, it won't even break!
[23:56:32] *** Joins: frm (~frm@user/frm)
[23:57:38] *** Joins: Hax0r (~Hax0r@46.38.81.225)
[23:57:44] <disfrutar-conchi> json is good for documents. not for relational data
[23:58:12] <Patsie> for those interested; another wacky project I started -> https://github.com/patsie75/awk-chip8
[23:58:53] <disfrutar-conchi> as pointed out. for an array to be read you need to somehow buffer from [ to  ] .. which can be the whole 2TB blob. bad.
[23:59:45] <disfrutar-conchi> you may come down to something like streaming each dataset as json. which kinda gives you some benefits of both worlds.
[23:59:50] *** Joins: pncl1 (~Hax0r@46.38.81.225)
[23:59:55] *** Quits: pncl1 (~Hax0r@46.38.81.225) (Remote host closed the connection)
