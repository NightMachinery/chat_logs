[00:00:54] <BjoernKerler[m]> subspace1486: Can you share the signal and your grc ?
[00:11:31] <subspace1486[m]> Bjoern Kerler: sure, one second
[00:13:09] * subspace1486[m] posted a file: (33KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/3e55fc0be362dc4f7205251fbe41078031b0c993/FSK_decode_timesync_cleaned.grc >
[00:13:42] <subspace1486[m]> I have a .complex16 recording capture for URH, did you want that, or do you want a WAV?
[00:13:57] <BjoernKerler[m]> wav preferred
[00:14:23] *** Quits: aisrael (~stone@pylon.battleaxe.net) (Ping timeout: 252 seconds)
[00:16:07] <subspace1486[m]> okay, let me see what I can do. Not sure how to capture that
[00:16:40] <subspace1486[m]> I'm sure there's a GNU Radio solution
[00:16:47] <BjoernKerler[m]> ah, then upload the .complex16 :)
[00:18:04] *** Quits: pipapipapibo (~pipapipap@c-67-160-123-241.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[00:20:37] * subspace1486[m] posted a file: HackRF-20220323_211623-313_325MHz-4MSps-4MHz filtered with f_low=0.1697 f_high=0.09091 bw=0.01_trimmed.complex (15183KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/e53f7f0768e53aaba75dc79535a0768ab1917c51 >
[00:21:16] <subspace1486[m]> hopefully that's everything
[00:21:42] <subspace1486[m]> as you can see, there are three bursts, the last two are identical
[00:22:54] <subspace1486[m]> I believe all three have preambles, but I'm matching against the first one
[00:27:08] <BjoernKerler[m]> I think I might see what the issue might be ...
[00:27:18] <BjoernKerler[m]> but downloading your samples first
[00:28:36] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:abe8:94aa:6b34:e39c) (Quit: uros)
[00:29:10] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:abe8:94aa:6b34:e39c)
[00:30:22] <subspace1486[m]> I might have made several mistakes. I've never made a receiver before in GNU Radio and I only have about three months of exposure to it. Feel to suggest anything
[00:33:43] <subspace1486[m]> by the way, this was executed on version 3.8.1.0, the latest in Ubuntu 20.04
[00:36:35] *** Quits: asocialblade (~qsl@user/asocialblade) ()
[00:39:23] <subspace1486[m]> I will note that I have configured GNU Radio to capture at an offset, so that I can use the Translating FIR Filter block to grab the signal and isolate it, thus avoiding the large spike in the middle of the capture that appears in the HackRF One and RTL-SDR
[00:39:39] <subspace1486[m]> other than that, the math should be fairly straightforward for the rest of the blocks
[00:42:22] <BjoernKerler[m]> it's no qpsk, it's bfsk. so my current flow graph won't work :)
[00:42:40] <BjoernKerler[m]> s/qpsk/bpsk/
[00:43:29] * subspace1486[m] uploaded an image: (106KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/1d35829ecca6e39512bcf6f290e69efa6ce3514f/image.png >
[00:44:19] <subspace1486[m]> A collegue and I have been using Universal Radio Hacker to record and replay the signals, but I wanted to get it working in GNU Radio so we could build a larger tool that was more automatic
[00:44:52] <BjoernKerler[m]> I had one somewhere for bfsk, will have a look.
[00:46:33] *** Joins: yesno (~yesno@109.98.151.62)
[00:46:50] <subspace1486[m]> I've been reading multiple blog posts and examples of people decoding FSK, and I've even looked at GNU Radio implementations for RTTY, but so far none of them have solved clock sync very well, but its quite likely that I've simply missed a good example here. If I can get it working I'm strongly considering adding it back into the wiki
[00:48:22] <BjoernKerler[m]> yeah, that's what I thought .. looks like rtty
[00:49:24] <subspace1486[m]> It's not, its from a key-fob, but it's so close to RTTY or other common FSK modes that I was hoping to find a good example.
[00:51:39] <subspace1486[m]> again I'm coming from software programming and the pentesting world, and I'm just struggling to understand the parameters for the Symbol Sync or Clock Recovery MM blocks. It just seems deceptively straightforward to me to extract the symbols if the preamble is tagged with a strong correlation and the baud rate is known, I just honestly don't know how to do that
[00:51:53] <subspace1486[m]> * do that with the right GNU Radio blocks
[00:53:24] <BjoernKerler[m]> I once did a hellas keyfob and that had a similar "look"
[00:55:46] <BjoernKerler[m]> yeah, I'm coming from the same spot originally and I also was struggeling with that part. Turned out in the end for my issues it wasn't clock recovery but agc and symbol rate in fact :)
[01:07:58] <subspace1486[m]> I don't have any AGC in there as you can see, but I consider that okay because the demodulated samples are fairly consistent
[01:24:52] <subspace1486[m]> This person is a little hand-wavy with the clock sync: https://nccgroup.github.io/RFTM/fsk_receiver.html
[01:26:38] <subspace1486[m]> I found https://wirelesspi.com/fsk-demodulation-in-gnu-radio/ earlier, but they link to other sources and don't really explain it
[01:27:19] <BarryDuggan[m]> subspace1486: have you looked at https://wiki.gnuradio.org/index.php?title=Packet_Communications ?
[01:28:09] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:28:10] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[01:28:44] * BjoernKerler[m] uploaded an image: (113KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/a00120901d9b40c0b5310db916d11f967e3dcc7a/grafik.png >
[01:28:54] <BjoernKerler[m]> looks like that now on my first tries
[01:30:47] * BjoernKerler[m] uploaded an image: (118KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/b28ed0fa006a2e30d1832962f0cc74aca90d069d/grafik.png >
[01:30:56] <BjoernKerler[m]> the constellation looks a bit better
[01:31:19] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 272 seconds)
[01:35:29] <subspace1486[m]> <BarryDuggan[m]> "subspace1486: have you looked at..." <- I have not
[01:36:24] <subspace1486[m]> <BjoernKerler[m]> "grafik.png" <- hmm that FSK signal should have an deviation of 60 kHz between the mark and space frequency
[01:38:36] <BarryDuggan[m]> most of my FSK work uses 45 baud and 170Hz deviation. it's up to the student to make appropriate changes 😉
[01:40:49] <subspace1486[m]> Bjoern Kerler: are you manually rebuilding a FSK receiver then? This looks interesting. I hope that my variables were all understandable
[01:41:15] <BjoernKerler[m]> subspace1486: yes I do.
[01:41:52] <BjoernKerler[m]> just about to figure out the symbol rate
[01:42:45] <BarryDuggan[m]> subspace1486: if you look at https://github.com/duggabe/gr-control I created a packet frame and used FSK instead of BPSK modulation.
[01:43:10] <subspace1486[m]> I used Inspectrum for that, but I found it really cool that there was a GNU Radio technique for doing that, I saw it in an article on decoding telemetery from Voyager 1
[01:43:25] <BjoernKerler[m]> yes, using delay
[01:43:41] *** Joins: jacobk (~quassel@64.189.202.128)
[01:44:04] <BarryDuggan[m]> subspace1486: also look at https://wiki.gnuradio.org/index.php?title=Simulation_example:_FSK
[01:44:49] <BjoernKerler[m]> 150hz if I see correctly ?
[01:45:16] <BjoernKerler[m]> 2400Bd
[01:45:27] <subspace1486[m]> BarryDuggan[m]: I've been there several times, it was helpful getting started, but I couldn't make sense of their math
[01:45:37] <subspace1486[m]> BjoernKerler[m]: yes that should be correct
[01:45:57] <BarryDuggan[m]> it's my math! what is your question?
[01:48:16] <subspace1486[m]> oh lol. Anyway I'm currently working on an FSK receiver but I'm struggling with clock sync and pulling symbols out. I have successfully demodulated an FSK signal and I end up with 8 samples per baud, and while the Correlation Estimator block correctly identifies the beginning of the preamble, I've just been unable to comprehend how to reliably use that information and the Symbol Sync block (or any other block that I've experimented
[01:48:16] <subspace1486[m]> with) to extract the 1s and 0s
[01:48:32] <subspace1486[m]> that's what I've been chatting about for the past hour or two here
[01:50:48] <subspace1486[m]> BarryDuggan[m]: A collegue and I were studying this wiki page a month or two ago as we were building our FSK transmitter. I really liked the picture as it explained the layout of the blocks, but neither of us were able to follow along in the "For this flowgraph, the standard RTTY..." paragraph 
[01:51:12] *** Joins: monkwitdafunk (uid238811@fsf/member/monkwitdafunk)
[01:51:22] <subspace1486[m]> but then again both of us are new to GNU Radio so we were on a bit of a crash course
[01:52:26] <subspace1486[m]> We found Derek Kozel on the OARC server and he walked us through the flowgraph
[01:52:43] <BarryDuggan[m]> so do you want to know about the VCO or RTTY?
[01:54:42] <subspace1486[m]> I guess RTTY, after you've run it through the Quadurature Demod block, you're left with many samples per bit I assume. This is also shown in the screenshot. How do you go from there to extract the data?
[01:55:32] <subspace1486[m]> <subspace1486[m]> "image.png" <- This is the flowgraph that I've got so far
[01:56:09] <BarryDuggan[m]> In the simulation, it's just a bit stream.
[01:56:43] <subspace1486[m]> oh right
[01:57:40] <BarryDuggan[m]> but look at https://github.com/duggabe/gr-RTTY-basics for how I create and decode RTTY characters
[01:58:20] <BarryDuggan[m]> it's done in Embedded Python blocks, and basically is a software UART
[02:00:20] <subspace1486[m]> I've been really tempted to try some an embedded python block if there isn't a good solution for this with native blocks. My main concern was that an embedded block might not be fast enough, but I haven't checked
[02:01:28] <BarryDuggan[m]> plus code conversion UTF-8 / RTTY
[02:01:47] <BarryDuggan[m]> it's fast enough for 45 Baud!
[02:02:23] <BarryDuggan[m]> I would expect it to be fast enough for 1200 Baud
[02:03:01] <BarryDuggan[m]> are you sending raw data or UTF-8 characters?
[02:04:14] <subspace1486[m]> I'm receiving raw binary modulated with FSK at 2400 baud
[02:04:33] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:1d6a:345e:a7ac:c8ac)
[02:07:04] <BarryDuggan[m]> if you are using packets, your bytes should already be aligned
[02:19:12] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.11.threembb.co.uk)
[02:19:46] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:abe8:94aa:6b34:e39c) (Quit: uros)
[02:30:26] <subspace1486[m]> sorry for the misunderstanding, I'm not sure of the correct term for "a single segment of bits". Maybe chunk or burst may have been a better word
[02:31:45] <subspace1486[m]> in this signal, there are three chunks of binary data, with a pause in between each chunk. I am receiving a raw stream of this, so there's no alignment at all
[02:32:52] <subspace1486[m]> Bjoern Kerler: what have you discovered so far?
[02:33:39] <BjoernKerler[m]> Still playing with it :)
[02:34:57] <subspace1486[m]> thanks man, I really appreciate your examination of this. I'm honestly learning a lot here and things really click together when the blocks start correctly working together
[02:37:14] <subspace1486[m]> things like a VCO block or Quadature Demod made very little sense until I started really looking at the visualizations and really seeing how they all worked. No doubt I missed something here. I'm trying to get this working at 2400 baud because there's a larger project that I'd like to pursue with it, and then I want to see how the blocks do at a 250,000 baud signal that a friend and I used to pwn a game scoreboard. If I can get a
[02:37:14] <subspace1486[m]> working FSK receiver, it's going to be a big step for both projects.
[02:46:17] *** Quits: jemius (~imperator@200116b82d54ae00381e967f014f4f3d.dip.versatel-1u1.de) (Quit: Leaving)
[02:49:21] <subspace1486[m]> https://dsp.stackexchange.com/questions/67107/symbol-synchronization-for-gfsk-fsk-signals-in-gnu-radio was helpful
[02:57:30] *** Joins: duude__- (~duude__@user/duude/x-4676560)
[02:57:45] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Ping timeout: 252 seconds)
[02:58:31] *** duude__- is now known as duude__
[03:10:21] * BjoernKerler[m] uploaded an image: (66KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/a51d16cdc1ca8d50d4d8f6531800bc3b1b4c6507/grafik.png >
[03:10:28] <BjoernKerler[m]> getting slowly somewhere
[03:26:45] *** Quits: maxtim (~maxtim__@c-73-21-43-6.hsd1.ga.comcast.net) (Quit: Leaving)
[03:34:27] <subspace1486[m]> it's not going to be ASCII, just FYI, I don't believe that there are human readable bits in there anywhere
[03:35:23] <subspace1486[m]> that is looking pretty promising
[03:35:48] <subspace1486[m]> when i open up that .complex file in URH, it decodes to
[03:35:48] <subspace1486[m]> d5555555555555555555555555555555555578aaaaaa565595aa9a66a59aaaaa55a65a95aaaa996a5a5a9666a9aaa5666 [Pause: 199227 samples]
[03:35:48] <subspace1486[m]> f8aaaaaa565595aa9a66a59aaaaa55a65a95aaaa996a5a5a9666a9aaa5666 [Pause: 196789 samples]
[03:35:48] <subspace1486[m]> f8aaaaaa565595aa9a66a59aaaaa55a65a95aaaa996a5a5a9666a9aaa5666 [Pause: 46740 samples]
[03:49:52] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[03:51:13] *** Joins: hololeap (~hololeap@user/hololeap)
[03:52:02] *** Quits: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt) (Ping timeout: 260 seconds)
[03:59:54] *** Joins: comms_engineer[m (~commsengi@2001:470:69fc:105::1:e8e3)
[04:02:54] <miek> it's probably manchester encoded (or similar) btw, because there are never more than two identical symbols in a row
[04:03:58] <subspace1486[m]> that's a fascinating insight, I didn't realize
[04:04:17] <subspace1486[m]> I assumed that was just the nature of the signal or the preamble
[04:37:31] <patchvonbraun[m]> Manchester is easy to do clock recovery on, since there's a transition in every symbol.  
[04:41:24] <subspace1486[m]> good point! It seems easy to identify a symbol transition, since there's a dramatic shift in both magnitude and sign from one sample to another, and the shift in the opposite direction won't happen until the end of the symbol, which has a known width because we know the baud rate and samples per symbol
[04:42:44] <subspace1486[m]> I'm certainly up for trying other methods in GNU Radio, I don't want to fix myself to correlating the preamble and then finding the symbols
[04:43:52] *** Joins: pipapipapibo (~pipapipap@c-67-160-123-241.hsd1.wa.comcast.net)
[04:43:54] <subspace1486[m]> <miek> "it's probably manchester encoded..." <- The only exception to this seems to be in the preamble, where I can find 000 and a 111
[04:54:41] <subspace1486[m]> Bjoern Kerler: how's your luck going with this? I'm really curious if you found key differences in our approach that I'm missing
[05:10:49] *** Quits: monkwitdafunk (uid238811@fsf/member/monkwitdafunk) (Quit: Connection closed for inactivity)
[05:16:26] *** Quits: tj123_ (~tjh123@cpe-75-185-104-199.cinci.res.rr.com) (Read error: Connection reset by peer)
[05:16:36] *** Joins: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com)
[05:19:02] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.11.threembb.co.uk) (Remote host closed the connection)
[05:27:48] *** Joins: antani (~antani@user/antani)
[05:35:41] *** cuoops is now known as ElvisKnievel
[05:41:37] <muaddib[m]> subspace1486: the preamble may be NRZ and the message is manchester
[05:41:40] <muaddib[m]> * message is diff manchester
[05:50:08] *** Quits: ElvisKnievel (~cuoops@user/cuoops) (Quit: kthxbye)
[05:50:24] *** Joins: cuoops (~cuoops@user/cuoops)
[06:08:35] <subspace1486[m]> <muaddib[m]> "subspace1486: the preamble may..." <- thanks! Each of these clues is very helpful. With that in mind, I found https://electronics.stackexchange.com/questions/592174/manchester-and-nrz-coding-schemes Would you say that the second approach here would be better? A VCO with a loop of some kind, then finding the correlation? What is PLL?
[06:08:59] <subspace1486[m]> oh wait, PLL is Phase-Locked Loop, isn't it
[06:11:52] <muaddib[m]> yes
[06:12:12] <muaddib[m]> if you're using URH it does 98% of this for you
[06:12:29] <subspace1486[m]> I've got to read these responses a few times before I understand what they are saying
[06:13:11] <subspace1486[m]> muaddib[m]: In blocks?
[06:14:04] <subspace1486[m]> "Use a preamble of of 1010 to enable fast clock sync then a bit pattern for Byte Sync, then a Frame Sync byte pattern for multi-byte packets or continuous frames." hmm it seems like this might be relevent here
[06:15:06] <muaddib[m]> possibly. once you have your baud rate and you're confident in your message breaks, then it's just looking for patterns
[06:43:28] *** Quits: antani (~antani@user/antani) (Remote host closed the connection)
[07:16:26] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:34:18] *** Quits: cuoops (~cuoops@user/cuoops) (Quit: kthxbye)
[07:34:51] *** Joins: cuoops (~cuoops@user/cuoops)
[07:36:46] *** Quits: harish (~harish@158.140.144.42) (Remote host closed the connection)
[07:38:10] *** Joins: harish (~harish@27.125.135.173)
[07:39:02] *** Quits: harish (~harish@27.125.135.173) (Remote host closed the connection)
[07:39:28] *** Joins: harish (~harish@27.125.135.173)
[07:40:04] *** Quits: harish (~harish@27.125.135.173) (Remote host closed the connection)
[07:41:23] *** Joins: harish (~harish@158.140.144.42)
[07:46:06] *** Quits: cuoops (~cuoops@user/cuoops) (Quit: kthxbye)
[07:46:30] *** Joins: cuoops (~cuoops@user/cuoops)
[08:03:18] *** Quits: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com) (Quit: Leaving)
[09:26:54] *** Quits: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net) (Remote host closed the connection)
[09:54:35] <subspace1486[m]> So, given that I know the baud rate, the preamble, and the fact that it uses Manchester encoding as there is no more than two consecutive bits, what would be your suggestion for clock synchronization or extracting the symbols?
[10:01:55] *** Quits: pcero (~pcero@187.135.227.158) (Ping timeout: 260 seconds)
[10:08:39] <muaddib[m]> I don’t know the entire story here, but if you’re using universal radio hacker, you can import a complex or real valued recording. Then set your samples per symbol to sample rate/baud rate
[10:08:39] <muaddib[m]> I.E. 105,000samples per second/10,500symbols per second = 10 samples per symbol. 
[10:08:39] <muaddib[m]> You’ll need to play with the noise parameter but once youve got that correct you should see the NRZ equivalent of the preamble at the beginning of every line in the main window. 
[10:10:17] <subspace1486[m]> Right, I can manually decode it in URH
[10:10:30] <subspace1486[m]> I'm just trying to automatically decode it in GNU Radio
[10:11:10] <muaddib[m]> Oh
[10:11:25] <muaddib[m]> This is FSK?
[10:11:29] <subspace1486[m]> I just found https://electronics.stackexchange.com/questions/442102/distinguishing-simple-fsk-and-manchester-coding but I'm not sure how to apply the microchip solution to GNU Radio if its even relevent
[10:11:32] <subspace1486[m]> yes, it's binary FSK
[10:12:54] <subspace1486[m]> binary FSK, 2400 baud, I can demodulate it with 8 samples/symbol, and I can even use the Correlation Estimator block to find the beginning of the preamble because that is known, and the stream will then have those tags. I'm just stuck on the last block or technique for reliably downsampling to extract the symbols
[10:14:22] <muaddib[m]> Oh ok my bad. Haven’t really been paying attention.
[10:14:47] <muaddib[m]> I assume you’ve looked at the tutorials?
[10:14:47] <muaddib[m]> https://wiki.gnuradio.org/index.php?title=Simulation_example:_FSK
[10:15:25] <subspace1486[m]> <subspace1486[m]> "image.png" <- This is my flowgraph so far, I've been chatting about it here for the last 12 hours
[10:15:46] <subspace1486[m]> that example doesn't really get into the details of recovering symbols after demodulation
[10:16:43] <subspace1486[m]> and that's the piece that I'm stuck on as its not working reliably for me so far. Everything in my flowgraph seems to be working as expected right up until that last Symbol Sync block and I'm just not sure if I'm missing something, I have bad parameters, I did math wrong, or if there's a better approach
[10:17:50] <muaddib[m]> So you’ve looked at this too?
[10:17:51] <muaddib[m]> https://wiki.gnuradio.org/index.php?title=Packet_Communications
[10:20:53] <subspace1486[m]> I haven't, that header/footer demux block looks interesting
[10:22:00] <subspace1486[m]> https://wiki.gnuradio.org/index.php/Header/Payload_Demux very interesting
[10:24:49] <subspace1486[m]> This could work, perhaps, I'll have to look into it a bit deeper. There are three chunks of signal from the transmitter, which I'm calling A, B, and C, where B and C are identical. Chunk A starts with 11010101010101010101... while B and C start with 11111000101010101010
[10:29:37] <subspace1486[m]> From the wiki, it sounds like it still needs to be synchronized to the beginning of the symbols, in other words it still needs the correct clock timing. My Correlation Estimator block is working, and the best correlation occurs on the sample at the beginning of the preamble, so maybe I can somehow change that tag into the tag that the Header/Payload Demux block needs for its processing.
[10:30:45] <subspace1486[m]> sorry if I sound like I'm circling around here. I just don't know what I don't know, and I just know the right approach for clock sync and pulling symbols out of a FSK signal like this
[10:52:12] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (Quit: < debdrup> What is this /quit thing?)
[10:52:31] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[10:56:48] <muaddib[m]> Yea, I understand. I’d suggest investigating some of that tutorial and maybe the qpsk one. There will be examples of how to synchronize and get down to bits. Your logic after that is fairly straight forward and seems like you know generally what to do.
[10:57:12] <muaddib[m]> I’m jumping off, but folks willing to help are always on here.
[11:44:44] *** Joins: massi (~massi@host-188-15-128-106.business.telecomitalia.it)
[11:46:23] *** Joins: Andrew (Andrew@user/AndrewYu)
[11:46:40] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:46:42] <Andrew> GNU Radio is not a GNU project, am I right?
[11:46:46] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Client Quit)
[11:47:07] *** Joins: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de)
[11:51:49] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl)
[12:02:44] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:a7a:8532:faa1:2b21)
[12:09:41] <cuoops> good question
[12:09:48] <funkylab[m]> Andrew: currently, no. clearly, historically that used to be different (name and all...), but as far as I can tell, we've never been very RMS, if that's what you're asking. There's a bit of a longer organizational and administrative story behind that as well, but it's long, mostly boring-annoying and not good material for IRC discussion.
[12:10:23] <cuoops> heh
[12:11:57] <funkylab[m]> We are a prood free software project, though!
[12:12:04] <funkylab[m]> s/are/_are_/, s/prood/proud/
[12:12:14] <cuoops> i bet patchvonbraun[m] could extent on that
[12:12:53] <funkylab[m]> yes, we speculated for a long time he might be a very proud free software project as well, but he turned out to be a cool human.
[12:17:53] <Andrew> Okay
[12:18:10] <Andrew> I assumed that this is not a GNU project because of mentions of "Open Source" and the usage of GitHub
[12:19:22] <funkylab[m]> ah, honestly, even back in the day we did not run on Savannah or anything. And our tag line has always been "the free and open software radio ecosystem".
[12:20:29] <funkylab[m]> for source hosting, we started out with SVN, had our own trac, but then we switched to git, and later moved to github, when the  then-current infrastructure just couldn't keep up with needs
[12:27:11] <Andrew> I guess
[12:46:12] *** Quits: DaViruz (~daviruz@host-95-192-25-22.mobileonline.telia.com) (Ping timeout: 240 seconds)
[12:53:22] *** Joins: massi_ (~massi@host-188-15-128-106.business.telecomitalia.it)
[12:57:50] *** Quits: massi (~massi@host-188-15-128-106.business.telecomitalia.it) (Ping timeout: 272 seconds)
[12:58:53] *** Joins: DaViruz (~daviruz@host-95-192-24-150.mobileonline.telia.com)
[13:27:33] *** Quits: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de) (Quit: Leaving)
[13:30:09] *** Quits: Reventlov[m] (~rgrunblam@2001:470:69fc:105::b26) (Quit: You have been kicked for being idle)
[14:01:10] *** Quits: massi_ (~massi@host-188-15-128-106.business.telecomitalia.it) (Remote host closed the connection)
[14:25:05] *** Joins: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de)
[15:03:46] *** Quits: roox (~roox@blackhole.pmtu.de) (Quit: Lost terminal)
[15:11:28] *** Joins: roox (~roox@blackhole.pmtu.de)
[15:20:35] *** Parts: Andrew (Andrew@user/AndrewYu) (free)
[15:21:20] <BjoernKerler[m]> subspace1486: sorry i went to bed. I will come up with something soon. I had to sort out issues with mod and demod so I created a bfsk test module to make sure the data is received the same way as originally modulated.
[15:41:37] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:31:32] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[16:31:41] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl)
[16:53:42] *** Quits: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de) (Quit: Leaving)
[16:56:12] *** Quits: jacobk (~quassel@64.189.202.128) (Ping timeout: 240 seconds)
[16:58:33] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:03:26] <willcode4[m]> jacob_theknight: You could file an issue on github so we don't lose your report. There isn't always someone on who's ready to dive into sample delay and tag offset problems.
[17:25:12] *** Joins: jacobk (~quassel@utdpat242024.utdallas.edu)
[17:25:16] *** Joins: pcero (~pcero@187.135.227.158)
[17:38:40] *** Quits: otiose (~otiose@156.146.48.156) (Quit: leaving)
[17:47:18] *** Joins: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de)
[18:02:12] *** Quits: jacobk (~quassel@utdpat242024.utdallas.edu) (Ping timeout: 240 seconds)
[18:03:16] *** Joins: aisrael (~stone@pylon.battleaxe.net)
[18:20:10] *** Quits: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de) (Quit: Leaving)
[19:03:59] *** Joins: mlandivar[m] (~mlandivar@2001:470:69fc:105::1:e999)
[19:06:57] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:1d6a:345e:a7ac:c8ac) (Read error: Connection reset by peer)
[19:10:11] * mlandivar[m] uploaded an image: (92KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/27ad6dc6428a4692b129fc09bbf591eee66d2e8b/gnuradio.PNG >
[19:11:55] <mlandivar[m]> Hello all, I'm new to gnuradio and pretty new to RF. Got a question for you guys: I'm trying to isolate and decode a BPSK 2 kHz subcarrier that's 8 kHz from the main signal. I've screenshotted the gnu flowchart I'm using and the output I'm getting.
[19:11:55] <mlandivar[m]> I seem to have isolated a 500kHz signal instead of the 2 kHz signal. Any idea what next steps I could take to isolate the correct signal?
[19:15:15] * mlandivar[m] uploaded an image: (91KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/19cc1b038273f60759bdefd37f6f8ada267f3bb2/gnuradio.PNG >
[19:15:23] * mlandivar[m] uploaded an image: (179KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/22740a756bebf579b30e35416223471fb406cca6/gnuradio_output.PNG >
[19:21:17] <mlandivar[m]> s/2/2000/
[19:21:59] <mlandivar[m]> s/2/2000/, s/2/2000/
[19:23:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[19:27:14] *** Joins: guillembp[m] (~guillembp@2001:470:69fc:105::1:e99f)
[19:30:10] <guillembp[m]> Hi all! Hope you are well. Where can I download the latest GNU Radio Live SDR Environment image? I want to make a live USB, but the wiki says “Distribution of the GNU Radio Live SDR is currently retired.”
[19:37:21] <tnt> yeah, there is no "latest" AFAIK. Nobody is making them anymore.
[19:37:26] <neelpandeya[m]> I think the GNU Radio Live SDR Environment is no longer maintained...
[19:37:59] <neelpandeya[m]> You can brew your own with Instant GNU Radio from Bastian Bloessl
[19:38:00] <neelpandeya[m]> https://www.bastibl.net/instant-gnuradio/
[19:38:01] <BjoernKerler[m]> there will be soon a new one
[19:38:08] <BjoernKerler[m]> for 3.10 with most oot
[19:38:36] <neelpandeya[m]> https://github.com/bastibl/instant-gnuradio
[19:41:54] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.7.threembb.co.uk)
[19:46:34] <mlandivar[m]> Is there a more appropriate place to post specific gnuradio flowchart questions?
[19:46:56] <guillembp[m]> Thank you for the answers! I might wait for an official version, the extra signal processing pre-installed software of the LIVE SDR (octave, scipy python, ...) was great. Do you know when that would be released?
[19:47:08] *** Joins: jacobk (~quassel@64.189.202.128)
[19:48:04] <BjoernKerler[m]> mlandivar: Regarding your question above : Either adapt your lowpass filter or multiply with the frequency offset if I understand your question correctly
[19:48:07] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.7.threembb.co.uk) (Ping timeout: 246 seconds)
[19:49:01] <BjoernKerler[m]> guillembp: Not sure there will be an official version, but I will ask the gnuradio team. At least dragonsdr live dvd will feature it as well.
[19:49:34] <BjoernKerler[m]> guillembp: And I will also provide a script to do the livedvd automatically on your own.
[19:51:17] <guillembp[m]> BjoernKerler[m]: would be great! much appreciated 🙂
[19:55:03] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.5.threembb.co.uk)
[20:00:10] <mlandivar[m]> <BjoernKerler[m]> "mlandivar: Regarding your..." <- How would I go about adapting my FIR filter? I'm not sure what "knobs" to turn. As I understand it, my options are Decimation, Taps, and center frequency. According to the tutorials (https://wiki.gnuradio.org/index.php?title=Frequency_Xlating_FIR_Filter), center frequency is the location of the channel's center wrt the main signal and thus would be 8khz. I don't understand what taps is
[20:00:10] <mlandivar[m]> but I'm using the complex version called out in the tutorial, which leaves decimation. Decimation is a very specific sampling rate, as I understand it. I don't see how modifying it would adjust which subcarrier I'm isolating.
[20:04:50] <BjoernKerler[m]> the center frequency is defining where the lowpass filter is being used on. If the lowpass filter is wide and does include all "spots", then you need use multiply on complex source to shift the frequency.
[20:06:43] <subspace1486[m]> > <@mlandivar:gnuradio.org> Hello all, I'm new to gnuradio and pretty new to RF. Got a question for you guys: I'm trying to isolate and decode a BPSK 2000 kHz subcarrier that's 8 kHz from the main signal. I've screenshotted the gnu flowchart I'm using and the output I'm getting.
[20:06:43] <subspace1486[m]> > 
[20:06:43] <subspace1486[m]> > I seem to have isolated a 500kHz signal instead of the 2000 kHz signal. Any idea what next steps I could take to isolate the correct signal?
[20:06:43] <subspace1486[m]> I think your key is in the Frequency Translating FIR Filter
[20:07:28] <BjoernKerler[m]> I usually use a qt range with multiply to set the frequency dynamically. you can also add a variable to the center frequency and use that variable in the qt range.
[20:07:52] <subspace1486[m]> <subspace1486[m]> "FSK_decode_timesync_cleaned.grc" <- mlandivar: would you like an example? Here is my GRC
[20:08:00] <BjoernKerler[m]> s/./, but that will affect the lpf of course/
[20:08:29] <funkylab[m]> <guillembp[m]> "Hi all! Hope you are well. Where..." <- question is what you want to do. If you just need a booting USB drive that contains a recent GRC, the most current betas of Ubuntu (22.04) and Fedora (f36) have nice bootable sticks on which you can install a recent GRC through `apt install gnuradio` or `dnf install gnuradio` respectively.
[20:13:50] * BjoernKerler[m] posted a file: (30KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/283351cb4282e9017885095ae77b59a3556184e6/bfsk_mod_demod2.grc >
[20:13:52] <BjoernKerler[m]> @subspace1486 This might help you: 
[20:14:12] <BjoernKerler[m]>  * subspace1486:  This might help you
[20:15:48] <BjoernKerler[m]> subspace1486: The main issue is the sync block. In my tests it was better to use 1-for-n instead and using the sps, but that only works for clean signals of course. But using this flowgraph it's pretty easy to try things and see what improves the output.
[20:17:40] <patchvonbraun[m]> subspace1486: I'll note that your filter length in your xlating filter is kinda eye-watering long at 8e6 sample rate.  If I had to pull a narrow channel out of an 8e6 input, I'd do it in a couple of stages, to keep the filters a reasonable length at the higher rates.
[20:18:30] <subspace1486[m]> The HackRF One is receiving at 8 million samples/second, I think the spec says that the minimum is 4 million
[20:19:41] <subspace1486[m]> but you're saying that you'd decimate in multiple stages instead?
[20:20:02] <patchvonbraun[m]> subspace1486: Yes, filter/decimate in a couple of stages to keep the filter lengths reasonable.
[20:20:02] <subspace1486[m]> I just to make sure I understand. Again this is something that I'm happy to change
[20:20:33] <subspace1486[m]> "it was better to use 1-for-n instead and using the sps" what do you mean here?
[20:20:38] <BjoernKerler[m]> the sync signal block does the decimation as well afaik patchvonbraun 
[20:21:39] <BjoernKerler[m]> subspace1486: instead of using the sync signal block you could adapt the symbol rate by just using the 1-for-n block. But then the symbol rate has to match exactly.
[20:22:03] * BjoernKerler[m] posted a file: (28KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/a5486792406814ca7e826d0e2b8161a716561cb3/bfsk_mod_demod.grc >
[20:22:06] <BjoernKerler[m]> I have another graph that has implemented that
[20:22:07] <patchvonbraun[m]> The filter lenght you're using in yoru xlating filter is length 1920, which at 8e6 SPS is a lot to chew on.   If you used a sloppier filter "up front", decimated down to perhaps 10x the ultimate desired channel width, and then inserted another filter (at the lower sample rate) after the xlating filter, your performance would improve
[20:23:03] <subspace1486[m]> patchvonbraun[m]: oh really? Huh. Where do you get the 1920? I don't understand that calculation
[20:23:24] <patchvonbraun[m]> IF you stick a "len()" around your firdes, it'll tell you the filter length
[20:23:36] <patchvonbraun[m]> It's a useful diagnostic for checking the length of FIR filters
[20:24:52] <patchvonbraun[m]> Generally the filter length scales non-linearly with the sample-rate/transition-width.  So trying to carve a tiny bandwidth out of a very high sample rate will produce VERY long filters, which are computationally expensive.  
[20:25:06] <subspace1486[m]> ah, thank you, I genuinely had no idea
[20:25:59] <patchvonbraun[m]> subspace1486: Right.  Because you're arriving at GR with essentially NO background DSP knowledge.  Such background really helps.  GR cannot, per se, make up for that.
[20:26:54] <subspace1486[m]> <BjoernKerler[m]> "subspace1486: instead of using..." <- That's a good idea. I think I can trust the symbol rate, especially given the length of the message. However, how do I use that block to start decimating from a particular sample? I can reliably tag the beginning of the preamble using the Correlation Estimator block, and it seems logical that I can just use the 1-in-n block to grab samples out of the middle of each symbol
[20:27:24] *** Joins: otiose (~otiose@156.146.48.156)
[20:28:00] <subspace1486[m]> patchvonbraun[m]: Fair, and yes that's all true. I know there's no shortcuts to the math and algorithms. I will try downsampling before the filter, like you said and experimentally see if it improves performance
[20:28:03] <BjoernKerler[m]> subspace1486: just remove the modulation block and use a file source with throttle
[20:29:04] <BjoernKerler[m]> subspace1486: of course you will need to adapt the sps and the filter parameters to match your signal as well
[20:29:14] <subspace1486[m]> of course
[20:29:21] <patchvonbraun[m]> Now having said that, GR is a GREAT tool to help in your journey, like a little laboratory.  But there are also great books on the subject, and websites like complextoreal.com dspreleated.com, etc.
[20:29:38] <BjoernKerler[m]> subspace1486: sps should be baud/bandwidth afair, means around 1666.67
[20:30:12] <subspace1486[m]> sps = samples per symbol
[20:30:13] <subspace1486[m]> right?
[20:30:25] <BjoernKerler[m]> yep
[20:32:18] <subspace1486[m]> thank you. Also, I was lying in bed last night and it finally clicked with me that the demodulated FSK is a square wave, but a Manchestor-encoded square wave is just a special form of Phase Shift Keying, just like you said 18 hours ago and it finally came together once I realized that two identical consecutive symbols was functionally equivelent to a phase change in a sine wave
[20:33:07] <subspace1486[m]> hence I can safely using clock sync methods geared for PSK, because ultimately that's what I'm dealing with, particularly when I run that low-pass filter to smooth out the square wave
[20:33:58] <subspace1486[m]> I have to get back to my work here, but I will take a close look at your GRC files and see what mistakes I made with my attempt and how you approached it
[20:51:14] <guillembp[m]> <funkylab[m]> "question is what you want to do...." <- The classroom's PCs currently run Windows and do not have Internet connection. My idea was to bring one liveUSB (official build for security reasons) for each student, so they can plug and play with the SDR. Could the last release of LIVESDR do the job and where to find the official source? 
[20:53:00] *** Joins: Blsmit5728 (~Blsmit572@209.150.110.10)
[20:53:30] *** Quits: Blsmit5728 (~Blsmit572@209.150.110.10) (Client Quit)
[20:54:50] <guillembp[m]> > <@funkylab:gnuradio.org> question is what you want to do. If you just need a booting USB drive that contains a recent GRC, the most current betas of Ubuntu (22.04) and Fedora (f36) have nice bootable sticks on which you can install a recent GRC through `apt install gnuradio` or `dnf install gnuradio` respectively.
[20:54:50] <guillembp[m]>  * The classroom's PCs currently run Windows and do not have Internet connection. My idea was to bring one liveUSB (official build for security reasons) for each student, so they can plug and play with the SDR. Maybe the last release of LIVESDR could do the job, I saw a UbuntuVM with GNU3.8 and fosphor that I would try to convert to liveusb
[20:55:19] *** Joins: blsmitg3[m] (~blsmitg3g@2001:470:69fc:105::1:e9b7)
[20:59:58] <blsmitg3[m]> I am looking for some guidance for porting my OOT from 3.8 to 3.9+. I have a "block" that I do not want exposed in GRC/Python bindings. What is the best way to not create/remove it from the python binding process of the OOT module building?
[21:04:14] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.5.threembb.co.uk) (Ping timeout: 272 seconds)
[21:12:24] <JoshMorman[m]> You can cmake with -DENABLE_PYTHON=OFF
[21:12:52] <blsmitg3[m]> JoshMorman[m]: that turns them all off, not just one block.
[21:13:46] <JoshMorman[m]> Ah just one. Didnt catch that. You can edit the modulename_python.cc and not bind that block
[21:14:16] <JoshMorman[m]> Just be careful using gr_modtool bind after that. It will overwrite your changes
[21:14:24] <blsmitg3[m]> would it be best to just comment it out there so that gr_modtool can be sane later on?
[21:15:03] <JoshMorman[m]> That should work. Also comment out blockname_python.cc in the cmake
[21:15:30] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.2.threembb.co.uk)
[21:15:52] <blsmitg3[m]> Gotcha, I'll give that a go. Also I'll remove the .yml in the GRC folder. May just comment that out of the CMake there as well
[21:25:46] <BjoernKerler[m]> blsmitg3: easiest is not to add the binding function in the python_binding.cc
[21:26:09] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:37:40] *** Joins: jemius (~imperator@200116b82d827b001580de2d51a557cd.dip.versatel-1u1.de)
[22:02:40] *** Joins: pcero_ (~pcero@187.135.227.158)
[22:02:55] *** Quits: pcero (~pcero@187.135.227.158) (Ping timeout: 260 seconds)
[22:12:15] <blsmitg3[m]> <BjoernKerler[m]> "blsmitg3: easiest is not to..." <- Thanks
[22:13:55] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:22:38] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.2.threembb.co.uk) (Read error: Connection reset by peer)
[22:33:57] *** Joins: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net)
[22:34:20] *** Joins: hololeap_ (~hololeap@user/hololeap)
[22:34:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[22:39:22] *** Joins: hololeap (~hololeap@user/hololeap)
[22:40:55] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[22:41:46] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:43:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:44:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:45:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:47:13] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:11:59] *** Quits: jacobk (~quassel@64.189.202.128) (Ping timeout: 260 seconds)
[23:20:20] *** Joins: linext (~linext@pool-173-63-46-155.nwrknj.fios.verizon.net)
[23:36:40] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[23:58:35] <mlandivar[m]> <subspace1486[m]> "mlandivar: would you like an..." <- Thanks for the example. To make sure we're talking about the same thing, I'm trying to decode a BPSK subcarrier. I've tried adjusting my FIR filter but no joy. I'm not getting the correct 2 dots (locked constellation) I should get for BPSK in the QT GUI Constellation Sink output phase plot. Here's what I am getting and my grc:
[23:58:46] * mlandivar[m] posted a file: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/01ce73f9bb95f90124fa1b85ea17ce312c52af65/BPSK_sc_decoder2.grc >
[23:59:30] * mlandivar[m] uploaded an image: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/419ba3f36b7c20fb726f2b660b171764589438f2/image.png >
[23:59:48] <subspace1486[m]> oh that's a little weird
