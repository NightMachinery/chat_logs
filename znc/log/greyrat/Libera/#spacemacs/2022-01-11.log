[00:00:07] <FromGitter> <kassick> spacemacs c++ layer by default supports the following completion backends: `rtags`, `lsp` and `ycmd`, according to the doc -- lsp being the default nowadays
[00:01:55] <FromGitter> <kassick> lsp is just a protocol, so when using it you must tell wich lsp backend will actually be used (clangd via `lsp-clangd` or ccls via `lsp-ccls`)
[00:02:32] <FromGitter> <kassick> you'll need to install clangd or ccls in your computer (that's outside of the resposabilities of emacs or spacemacs)
[00:03:13] <FromGitter> <kassick> and than, if you work with any project that's more complex then a single file, tell clangd or ccls what are the compilation flags needed to compile (and understand) your project
[00:04:28] <FromGitter> <kassick> if it's a cmake project, CMAKE_EXPORT_COMPILE_COMMANDS will produce a `compile_commands.json` that will be picked by clangd or ccls without much trouble -- https://cmake.org/cmake/help/latest/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html
[00:05:07] <FromGitter> <kassick> for other build tools, try using bear https://github.com/rizsotto/Bear
[00:05:34] <FromGitter> <lebensterben> oops I forget about this issue.
[00:06:41] <FromGitter> <kassick> or if you want to explicitly set your compile commands for the project, just set them in `compile_flags.txt` in your project root https://releases.llvm.org/8.0.0/tools/clang/tools/extra/docs/clangd/Installation.html#compile-flags-txt
[00:08:42] <FromGitter> <kassick> With all that set, when you open a c++ file in your project, you'll have a more IDE-like experience with emacs -- type checking, jump to declaration/definition, semantic auto-completion, etc.
[00:09:12] <FromGitter> <dalanicolai> @lebensterben You mean https://github.com/syl20bnr/spacemacs/pull/15104?
[00:10:27] <FromGitter> <kassick> as to "should I be using lsp layer" if you explicitly add `lsp' to your layers, every language layer (python, go, etc.) that has a lsp backand and something else that would be the default, spacemacs will use the lsp backend
[00:11:55] <FromGitter> <kassick> you can tell c++ to use lsp-clangd without adding the lsp layer -- but I'm not sure if the lsp layer would add other goodies that would make your life easier
[00:12:20] <FromGitter> <dalanicolai> I don't think so, because after it got merged, magit has always worked as expected here.
[00:12:53] <FromGitter> <lebensterben> you're right.
[00:12:55] <FromGitter> <kassick> (I agree with Lu -- use lsp and c++ layers both, and yeah, configuring the c++ toolchain and integrating with a lsp backend can be a pain)
[00:13:00] <FromGitter> <dalanicolai> On the other hand, magit-status-mode is derived from `special-mode`
[00:13:08] <FromGitter> <lebensterben> but magit is working strangely for me recently
[00:13:19] <FromGitter> <lebensterben> C-g doesn't work sometimes
[00:13:25] <FromGitter> <dalanicolai> But I guess it gets `collectionified` later
[00:13:38] <FromGitter> <dalanicolai> I mean evil-collection keybindings
[00:14:11] <FromGitter> <dalanicolai> > but magit is working strangely for me recently ‚èé  ‚èé Well I am no heavy magit user, although I use it frequently
[00:14:19] <FromGitter> <dalanicolai> But I have not experienced any problems with it
[00:14:38] <FromGitter> <lebensterben> that's also possible
[00:15:49] <FromGitter> <dalanicolai> Well, if I remember well, `magit` switched from `evil-magit` to `evil-collection` about half a year ago
[00:16:51] <FromGitter> <dalanicolai> But it is hard to debug problems I do not experience
[00:17:08] <FromGitter> <dalanicolai> Maybe you can find what is wrong next time when `C-g` behaves weird
[00:17:42] <FromGitter> <lebensterben> Emacs ecosystem doesn't conform to senmver. anything can happen during package updates.
[00:18:16] <FromGitter> <dalanicolai> senmver.?
[00:18:36] <FromGitter> <lebensterben> semantic versioning
[00:18:46] <FromGitter> <dalanicolai> Ah... will google that
[00:19:16] <FromGitter> <lebensterben> many packages use release date as version string
[00:19:45] <FromGitter> <lebensterben> and there's no guarantee any public API won't break in next update
[00:20:04] <FromGitter> <dalanicolai> What kind of public api?
[00:20:13] <FromGitter> <dalanicolai> I am no programmer
[00:20:17] <FromGitter> <dalanicolai> Just a hobbyist
[00:20:45] <FromGitter> <dalanicolai> An enthusiastic one, fo that matter
[00:21:01] <FromGitter> <lebensterben> suppose you have a non-private function in your library
[00:21:28] <FromGitter> <lebensterben> downstream users should be confident to use that function and update the library regularly
[00:21:51] <FromGitter> <lebensterben> not worrying that this function will be removed or changed
[00:22:14] <FromGitter> <lebensterben> we don't have any guarantee in Emacs ecosystem
[00:22:37] <FromGitter> <dalanicolai> Well, indeed not when we use 'unofficial' packages...
[00:22:40] <FromGitter> <lebensterben> the only thing people can do is to declare a variable/function as obsolete
[00:22:51] <FromGitter> <dalanicolai> The core libraries manage this quite well AFAIK
[00:23:17] <FromGitter> <dalanicolai> > the only thing people can do is to declare a variable/function as obsolete ‚èé  ‚èé Yeah, but that works alright isn't it?
[00:23:35] <FromGitter> <lebensterben> yes but not melpa packages
[00:23:43] <FromGitter> <dalanicolai> But what it has to do with the magit keybindings?
[00:24:14] <FromGitter> <dalanicolai> Yes true (elpa packages are also no guarantee b.t.w.)
[00:24:25] <FromGitter> <dalanicolai> But core packages are alright I think
[00:25:58] <FromGitter> <lebensterben> so as you mentioned, evil-collection may take over magit buffer's keymap. or we may accidentally evilified a major mode which magit mode derive from. we or any package involved may accidentally used some API with different behavior across updates.
[00:26:44] <FromGitter> <lebensterben> anything can happen here. there's no guarantee of stable behavior and that makes me cynical.
[00:28:23] <FromGitter> <lebensterben> for example if a major mode begins to derive from a different mode in an update, that would be a breaking change in most other languages, but not Emacs. Because we don't have any non-breaking guarantee at all.
[00:28:23] <FromGitter> <dalanicolai> Well I haven't seen much of such problems... but I am no maintainer... I only read some issues, where I think I might say/do something useful
[00:30:44] <FromGitter> <dalanicolai> Well, could be... but this case is quite unlikely, as most packages inherit only from basic modes.
[00:31:29] <FromGitter> <dalanicolai> And switching to another basic mode, I think happens only in theory
[00:31:52] <FromGitter> <lebensterben> yesterday I was reading source code of which-key
[00:31:55] <FromGitter> <lebensterben> https://github.com/justbur/emacs-which-key/blob/9f64733e4ac563c0cda3685acf4e1c2cf600319b/which-key.el#L910
[00:32:32] <FromGitter> <lebensterben> should they remove the compatibility one day we will receive lots of bug report
[00:33:39] <FromGitter> <lebensterben> and there's no warning currently if you used the deprecating API
[00:33:51] <FromGitter> <dalanicolai> Could be, but I guess it would not be so much work to fix
[00:34:42] <FromGitter> <lebensterben> the fix is easy... just to move the compatibility layer into our code. but why bother removing that in upstream?
[00:35:11] <FromGitter> <dalanicolai> I guess to keep things clean/consistent
[00:35:23] <FromGitter> <dalanicolai> But it would be nice to add a deprecation warning
[00:35:37] <FromGitter> <dalanicolai> furture deprecation
[00:36:55] <FromGitter> <lebensterben> you can add a warning. but that's just not a common practice in Emacs ecosystem....
[00:37:22] <FromGitter> <dalanicolai> Again I think in core I see them regularly
[00:38:36] <FromGitter> <lebensterben> Emacs core is different. they're real programmers who write static typed language
[00:38:48] <FromGitter> <lebensterben> you can always count on them.
[00:40:28] <FromGitter> <lebensterben> recently someone found a bug on some meizu phones. if you change the name of your cell network provider to "no signal", your phone enters airplane mode indefinitely...
[00:40:36] <FromGitter> <dalanicolai> I guess so... but for the other packages, we usually have a substantial community that can help keeping them kind of healthy
[00:40:48] <FromGitter> <lebensterben> dynamic language coders always surprise me.
[00:40:58] <FromGitter> <dalanicolai> > recently someone found a bug on some meizu phones. if you change the name of your cell network provider to "no signal", your phone enters airplane mode indefinitely... ‚èé  ‚èé Haha
[00:41:43] <FromGitter> <glmdgrielson:matrix.org> ...and that is why you don't hardcode things like that.
[00:42:01] <FromGitter> <glmdgrielson:matrix.org> Having a "NULL" value is usefull sometimes. That is one such occasion.
[00:42:23] <FromGitter> <dalanicolai> Haha, well that could be anyone... from a typing monkey... to a theoretical triple Turing award winner
[00:42:56] <FromGitter> <dalanicolai> There is not so much difference of course :)
[00:43:11] <FromGitter> <lebensterben> > that could be anyone ‚èé that's exactly what makes me cynical
[00:44:15] <FromGitter> <dalanicolai> Well to publish on Melpa you have at least have to understand comething about Emacs... and check compiler warnings etc...
[00:44:24] <FromGitter> <dalanicolai> It is actually a quite involved process...
[00:44:29] <FromGitter> <dalanicolai> Elpa is actually much easier
[00:45:29] <FromGitter> <lebensterben> that's true. but Emacs compiler is just not mean enough.
[00:45:38] <FromGitter> <dalanicolai> Although Elpa packages might get checked more throughly by humans...
[00:46:06] <FromGitter> <lebensterben> its flexibility also means you have plenty of sloppy ways to introduce silly mistakes, even for best programmers
[00:46:28] <FromGitter> <dalanicolai> haha... well I am not that cynical... I make stupid mistakes myself...
[00:47:34] <FromGitter> <dalanicolai> As long as the intention is good
[00:48:41] <FromGitter> <dalanicolai> That could be, I do not have so much experience
[00:59:13] <FromGitter> <dalanicolai> > Regarding issues with keys on rebase: https://github.com/syl20bnr/spacemacs/issues/15089 ‚èé  ‚èé Haha... I only read this now... I guess that's some solution for the magit issue...
[00:59:36] <FromGitter> <dalanicolai> In that case no wonder I did not experience it, as I am using Ivy
[01:31:24] <FromGitter> <deech> Hi I'm running Spacemacs with native-compilation. Is there a way to compile all my packages at once? The lag of lazy loading + native-compilation is pretty noticeable.
[01:46:19] <FromGitter> <kassick> maybe `native-comp-always-compile`
[01:48:20] <FromGitter> <kassick> I recall having this set at some point, but I did not appreciate the experience -- adding a layer means emacs would be stuck for a couple of minutes
[01:49:59] <FromGitter> <kassick> compiling when load is annoying -- until emacs has compiled everything -- now I don't notice it
[01:50:13] <FromGitter> <kassick> also, are you compiling emacs from sources?
[01:50:45] <FromGitter> <deech> Yes
[01:51:00] <FromGitter> <kassick> if so, use `make NATIVE_FULL_AOT=1` when compiling
[01:51:39] <FromGitter> <kassick> now make will take longer, but then all distribution .el files will be compiled to eln in your install path ;)
[01:52:09] <FromGitter> <kassick> if you don't re-compile emacs on a daily basis, it's a boost ;)
[01:53:55] <FromGitter> <deech> I think it does this automatically? It's the layers that Spacemacs pulls in, eg. simply switching to a theme you haven't used before incurs lag as it compiles asynchronously. I can't seem to find the `native-comp-always-compile` in Spacemacs.
[01:57:17] <FromGitter> <kassick> did you try customize it?
[01:57:36] <FromGitter> <kassick> M-x `customize-variable`RET `native-comp-always-compile` ?
[01:57:51] <FromGitter> <lebensterben> we have not set that variable because it's in 2.8
[01:59:09] <FromGitter> <deech> Huh, I didn't know that was an Emacs variable ... trying now.
[01:59:14] <FromGitter> <lebensterben> we haven't touch native compilation yet
[02:01:19] <FromGitter> <dalanicolai> Isn't it so that after everything has been compiled, then the lag is gone?
[02:01:24] <FromGitter> <dalanicolai> So it is only temporary
[02:02:53] <FromGitter> <dalanicolai> Only first time it compiles for some minutes (like 30 minutes or 1 hour or so, if I remember well)... subsequently the lag is mostly gone...
[02:04:23] <FromGitter> <kassick> @deech -- looking at the makefile, no, it does not compile natively on make unless you specify NATIVE_FULL_AOT
[02:04:28] <FromGitter> <deech> I set that and tried again, it definitely doesn't build everything.
[02:04:31] <FromGitter> <dalanicolai> Then after lazy loading it compiles packages only the first time
[02:04:42] <FromGitter> <lebensterben> the name of the variable is confusing. nothing is asynchronous. it just delays the compilation when you need it.
[02:04:44] <FromGitter> <kassick> > So it is only temporary
[02:04:55] <FromGitter> <kassick> yes, it is
[02:05:02] <FromGitter> <kassick> but it's a loooon temporary :P
[02:05:38] <FromGitter> <dalanicolai> Ah... okay... loooon is a subjective term I guess
[02:05:57] <FromGitter> <deech> I configure the build with `./configure --with-native-compilation --with-json --no-create --no-recursion`. When it compiles I see a bunch of ELN files being built.
[02:06:24] <FromGitter> <dalanicolai> Yes, that goes on for a while
[02:06:32] <FromGitter> <dalanicolai> But I think you can just do your work
[02:06:46] <FromGitter> <dalanicolai> And after some time it stops
[02:07:03] <FromGitter> <kassick> "looooon" it a typo for "looooooong" :P
[02:07:20] <FromGitter> <dalanicolai> Haha, yes I know
[02:07:37] <FromGitter> <deech> So I think its' doing the same as NATIVE_FULL_AOT? I just ran `make NATIVE_FULL_AOT=1` and it didn't rebuild anything.
[02:07:45] <FromGitter> <deech> I
[02:07:47] <FromGitter> <deech> I
[02:07:59] <FromGitter> <deech> I'll do a `git pull` and try again.
[02:08:24] <FromGitter> <dalanicolai> Okay, just wanted to mention it... I did not find it too bad
[02:09:01] <FromGitter> <dalanicolai> I don't know anything about forcing
[02:10:14] <FromGitter> <kassick> from Changelog.3 :  ‚èé  ‚èé `````` [https://gitter.im/syl20bnr/spacemacs?at=61dcb5ce2a210c38c1c085b5]
[02:11:03] <FromGitter> <kassick> maybe `make clean` before `make NATIVE_FULL-AOT=1` will do the trick
[02:24:52] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.3)
[05:45:25] *** Quits: baldlizard (~Thunderbi@p57985a23.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:54:07] *** Quits: henry40408 (~henry4040@175.181.188.127) (Remote host closed the connection)
[06:54:44] *** Joins: henry40408 (~henry4040@175.181.188.127)
[08:31:44] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[08:59:00] *** Quits: osfe (~lemaire@2a01:e0a:16e:7620::1e2d:4e60) (Remote host closed the connection)
[08:59:13] *** Joins: osfe (~lemaire@2a01:e0a:16e:7620::1e2d:4e60)
[09:30:04] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[12:04:29] *** Joins: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::5cc4)
[12:18:49] *** Quits: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::5cc4) (Ping timeout: 268 seconds)
[13:14:32] *** Joins: baldlizard (~Thunderbi@p57985847.dip0.t-ipconnect.de)
[14:08:31] *** Joins: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::5cc4)
[15:54:56] *** Quits: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::5cc4) (Ping timeout: 252 seconds)
[16:35:53] *** Joins: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::5cc4)
[17:19:57] *** Quits: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::5cc4) (Ping timeout: 240 seconds)
[17:37:14] *** Joins: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::5cc4)
[17:53:21] *** Quits: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::5cc4) (Remote host closed the connection)
[17:55:43] *** Joins: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::5cc4)
[18:01:14] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[18:23:04] <FromGitter> <bernalex:matrix.org> Hi. I might be an idiot, but can someone please explain how I get spacemacs to turn off auto-fill-mode, and enable visual-line-mode, for latex? Or for everything, really.
[18:24:10] <FromGitter> <lebensterben> M-x auto-fill-mode ?
[18:24:46] <FromGitter> <bernalex:matrix.org> I mean in the dotfile, permanently.
[18:26:34] <FromGitter> <dalanicolai> I think for auto-fill-mode is described here (https://develop.spacemacs.org/layers/+lang/latex/README.html#auto-fill)
[18:26:39] <FromGitter> <dalanicolai> @bernalex:matrix.org
[18:27:44] <FromGitter> <dalanicolai> I guess visual-line-mode you can enable by adding a `LaTeX-mode-hook`
[18:29:08] <FromGitter> <bernalex:matrix.org> I already have what the docs suggest for auto-fill-mode, but it doesn't work.
[18:29:32] <FromGitter> <dalanicolai> Add `(add-hook 'LaTeX-mode-hook #'visual-line-mode)` to your `user-config` (although I did not test this)
[18:29:38] <FromGitter> <bernalex:matrix.org> visual-line-mode I want everywhere, so I thought (global-visual-line-mode t) would do the trick, but that doesn't work either.
[18:29:46] <FromGitter> <dalanicolai> > I already have what the docs suggest for auto-fill-mode, but it doesn't work. ‚èé  ‚èé Ah... that's unfortunate then...
[18:30:02] <FromGitter> <dalanicolai> So then I have no clue
[18:30:22] <FromGitter> <dalanicolai> > visual-line-mode I want everywhere, so I thought (global-visual-line-mode t) would do the trick, but that doesn't work either. ‚èé  ‚èé I remember I had this in my user config and it worked 'too' well
[18:31:08] <FromGitter> <dalanicolai> (e.g. it messed up keybindings in dired-mode, which I thought then I would try to use, but still don't use it)
[18:31:12] <FromGitter> <lebensterben> use overleaf for latex
[18:31:15] <FromGitter> <bernalex:matrix.org> Your trick about visual-line mode did work for LaTeX though.
[18:31:23] <FromGitter> <bernalex:matrix.org> No.
[18:31:25] <FromGitter> <lebensterben> latex is a total hardache
[18:31:36] <FromGitter> <dalanicolai> For me latex works perfectly fine
[18:31:42] <FromGitter> <bernalex:matrix.org> Same.
[18:32:12] <FromGitter> <dalanicolai> But I never tried to configure `auto-fill-mode`
[18:32:22] <FromGitter> <bernalex:matrix.org> But I'd like to not have to disable auto-fill-mode every time I open a file. Never had this problem in regular emacs. Not sure why spacemacs would have a problem with it.
[18:33:11] <FromGitter> <dalanicolai> Well, if the configuration via the dotfile does not work, then you could add another function to `LaTeX-mode-hook` for it
[18:33:51] <FromGitter> <bernalex:matrix.org> Yeah that's what I'm thinking
[18:33:53] <FromGitter> <dalanicolai> You could use a lambda expression, but I prefer to use named functions for hooks...
[18:33:59] <FromGitter> <dalanicolai> You know how to do these things?
[18:34:50] <FromGitter> <bernalex:matrix.org> Believe it or not, I knew it many years ago. But I basically don't use computers outside of music production and writing these days.
[18:35:11] <FromGitter> <bernalex:matrix.org> I went from a Gentoo developer to a complete computer dunce.
[18:35:48] <FromGitter> <dalanicolai> Haha... well... take some minutes to read about elisp then soon... the intro within emacs... otherwise you are torturing yourself
[18:38:10] <FromGitter> <dalanicolai> I think this should do the trick ‚èé  ‚èé ```code paste, see link``` [https://gitter.im/syl20bnr/spacemacs?at=61dd9d5ad41a5853f945b6e5]
[18:38:53] <FromGitter> <dalanicolai> As a former Gentoo developer I guess you recognize that this is no rocket science (for my mother there is no difference)
[18:39:40] <FromGitter> <bernalex:matrix.org> I don't really understand why turn-off-auto-fill and remove-hook from latex-mode won't work either. Basically nothing I've tried has worked for some reason. I'll try defining a disable-auto-fill like you seggest.
[18:39:42] <FromGitter> <dalanicolai> So therefore, it is handy to read a little about it if want to use Emacs....
[18:41:05] <FromGitter> <golanv:tchncs.de> When an emacs daemon is running using a systemd service...."SPC q R" seems to kill the daemon but fails to restart it.  I don't suppose there is a obvious way to fix this?
[18:41:17] <FromGitter> <bernalex:matrix.org> Your suggestion doesn't work either for some reason.
[18:41:43] <FromGitter> <dalanicolai> Haha... terrible!
[18:42:16] <FromGitter> <dalanicolai> Well let me quickly check...
[18:42:20] <FromGitter> <dalanicolai> if it works here
[18:43:02] <FromGitter> <bernalex:matrix.org> I did a git pull --rebase & updated packages today btw
[18:43:21] <FromGitter> <dalanicolai> Mmm... it seems to work fine here
[18:43:31] <FromGitter> <bernalex:matrix.org> Hah. Great. :P
[18:44:41] <FromGitter> <dalanicolai> I find that there exists a `latex/auto-fill-mode`function also
[18:45:41] <FromGitter> <bernalex:matrix.org> I have to go make dinner. Will have to investigate further tonight.
[18:46:25] <FromGitter> <dalanicolai> Okay... so try to play a little with that `latex/auto-fill-mode`, its probably there for some reason
[18:46:39] <FromGitter> <dalanicolai> Enjoy your dinner
[18:46:44] <FromGitter> <bernalex:matrix.org> Oh wow! Yeah
[18:46:53] <FromGitter> <bernalex:matrix.org> I turned off latex/auto-fill-mode and then it worked. Derp
[18:47:02] <FromGitter> <dalanicolai> Great!
[18:47:11] <FromGitter> <dalanicolai> Then dinner won't taste sour
[18:47:32] <FromGitter> <dalanicolai> Well at least not due to this
[18:47:33] <FromGitter> <bernalex:matrix.org> :) Thanks for investigating.
[18:47:40] <FromGitter> <dalanicolai> üëç
[20:09:33] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[20:11:21] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[20:21:57] *** Quits: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::5cc4) (Ping timeout: 240 seconds)
[20:28:07] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[20:29:40] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[20:44:09] <FromGitter> <westrom:matrix.org> The problem is back unfortunately. Not sure how to fix it.
[20:47:19] <FromGitter> <westrom:matrix.org> https://bpa.st/NPQQ
[20:47:21] <FromGitter> <dalanicolai> Can you do `M-x toggle-debug-on-error` and try again?
[20:47:27] <FromGitter> <dalanicolai> See where it comes from
[20:48:35] <FromGitter> <westrom:matrix.org> https://bpa.st/NRTQ
[20:49:40] <FromGitter> <dalanicolai> Mmm... have you updated your packages already?
[20:50:42] <FromGitter> <dalanicolai> `M-x configuration-layer/update-packages`
[20:50:56] <FromGitter> <westrom:matrix.org> Let me try that.
[20:53:39] <FromGitter> <westrom:matrix.org> Ok, still getting the same error.
[20:53:55] <FromGitter> <dalanicolai> Ah okay
[20:54:33] <FromGitter> <dalanicolai> Can you do `SPC h d f org-roam-node-find`
[20:55:18] <FromGitter> <dalanicolai> Then go to that function (you can press `o` to follow the link in the help buffer, just a nice tip)
[20:55:20] <FromGitter> <westrom:matrix.org> It brings up the description of the function just fine.
[20:55:36] <FromGitter> <dalanicolai> do you find any 'categories' in that file?
[20:56:22] <FromGitter> <dalanicolai> B.t.w. did you restart after running update packages?
[20:56:40] <FromGitter> <westrom:matrix.org> screenshot-2022-01-11T17:26:28+00:00.png (https://gitter.ems.host/_matrix/media/v1/download/matrix.org/QsijnMnGIagyBdpTgAdRhzzw)
[20:56:41] <FromGitter> <westrom:matrix.org> Categories? No...
[20:56:59] <FromGitter> <westrom:matrix.org> yes, I restarted with every change like that
[20:58:07] <FromGitter> <dalanicolai> Ah one second... I am in Emacs 29
[20:58:51] <FromGitter> <dalanicolai> Can you type `M-x compile load`... and run the function that you find (from within that org file)
[21:00:05] <FromGitter> <dalanicolai> okay did you try `M-x comp load`?
[21:00:19] <FromGitter> <dalanicolai> From within that org file
[21:00:46] <FromGitter> <dalanicolai> You'll find some function like `compile and load`
[21:00:55] <FromGitter> <dalanicolai> run that one on that file
[21:01:01] <FromGitter> <westrom:matrix.org> screenshot-2022-01-11T17:30:51+00:00.png (https://gitter.ems.host/_matrix/media/v1/download/matrix.org/JxssuHHAfNWDhWxSjxKoSeMY)
[21:01:24] <FromGitter> <dalanicolai> please add a space and type load
[21:01:27] <FromGitter> <dalanicolai> also
[21:01:48] <FromGitter> <westrom:matrix.org> I have auto-compile-on-load-mode on. That seemed to make roam-node-find work once again.
[21:02:03] <FromGitter> <dalanicolai> Ah okay
[21:02:20] <FromGitter> <westrom:matrix.org> Then when I restart it doesn't work.
[21:02:30] <FromGitter> <dalanicolai> Ah haha
[21:02:40] <FromGitter> <dalanicolai> Can you toggle the debugger again?
[21:02:42] <FromGitter> <westrom:matrix.org> screenshot-2022-01-11T17:32:34+00:00.png (https://gitter.ems.host/_matrix/media/v1/download/matrix.org/OQPXHCDXIhqCHXLppPfkojZl)
[21:03:03] <FromGitter> <westrom:matrix.org> on
[21:03:08] <FromGitter> <dalanicolai> Ah you have native compile?
[21:03:16] <FromGitter> <westrom:matrix.org> yep
[21:03:18] <FromGitter> <dalanicolai> Then I guess you should run that one on that file
[21:03:57] <FromGitter> <dalanicolai> But maybe it is easiest to just go into `emacs.d/elpa` directory
[21:04:45] <FromGitter> <dalanicolai> And delete all org-roam directories... then restart
[21:06:18] <FromGitter> <westrom:matrix.org> alright, trying this
[21:06:34] <FromGitter> <dalanicolai> Greta
[21:07:00] <FromGitter> <westrom:matrix.org> Nah, still get the same error.
[21:07:07] <FromGitter> <dalanicolai> Oh wow
[21:07:25] <FromGitter> <dalanicolai> Well it is quite hard to debug then... from here
[21:07:40] <FromGitter> <westrom:matrix.org> https://bpa.st/2443MHNQC5TUOY6C7FRCAMKL5E
[21:07:50] <FromGitter> <dalanicolai> It looks to me like some of your compiled files is messed up
[21:08:42] <FromGitter> <westrom:matrix.org> Let's see if redownloading all the packages fixes something.
[21:10:03] <FromGitter> <dalanicolai> > https://bpa.st/2443MHNQC5TUOY6C7FRCAMKL5E ‚èé  ‚èé As I am seeing `byte-code`in that file, I guess it is a byte-compiled file... while you are using native-compile
[21:10:36] <FromGitter> <westrom:matrix.org> oh, that could be a problem
[21:11:25] <FromGitter> <dalanicolai> > Let's see if redownloading all the packages fixes something. ‚èé  ‚èé You mean get rid of the whole `elpa/version/develop/directory`?
[21:12:03] <FromGitter> <dalanicolai> Do you have multiple version directories in `emacs.d/elpa`?
[21:12:46] <FromGitter> <dalanicolai> I guess that really should fix the bug... otherwise I guess it is some bug in org-roam
[21:13:09] <FromGitter> <dalanicolai> But it will take some time to install all packages again
[21:14:40] <FromGitter> <westrom:matrix.org> I didn't delete everything in the directory, only for 29.0
[21:15:05] <FromGitter> <dalanicolai> Ah okay... good
[21:18:48] <FromGitter> <westrom:matrix.org> Same problem. I wonder if any other org-roam users are experiencing this...
[21:20:02] <FromGitter> <westrom:matrix.org> `auto-compile-on-load-mode` isn't working either
[21:20:10] <FromGitter> <dalanicolai> https://github.com/syl20bnr/spacemacs/issues/9407
[21:20:21] <FromGitter> <dalanicolai> But that is from 2017
[21:20:55] <FromGitter> <westrom:matrix.org> Yep, I took a look at some of the older issues.
[21:25:41] <FromGitter> <westrom:matrix.org> https://bpa.st/3HVDTO4MGWNDANCJBYHUOOCYJI
[21:27:08] <FromGitter> <westrom:matrix.org> ```code paste, see link``` ‚èé  ‚èé I don't understand why it says this is void. [https://gitter.im/syl20bnr/spacemacs?at=61ddc4f42a210c38c1c2fa1e]
[21:28:14] <FromGitter> <dalanicolai> Okay... I see now... `occ-get-categories` should be a function
[21:28:50] <FromGitter> <westrom:matrix.org> I'm looking at `org-projectile.el`.
[21:29:00] <FromGitter> <dalanicolai> If you should load the `org-projectile.el` file
[21:29:14] <FromGitter> <dalanicolai> Yeah... press `, e b`
[21:29:17] <FromGitter> <dalanicolai> And try again
[21:29:30] <FromGitter> <dalanicolai> You'll probably get a little more useful errror message
[21:30:13] <FromGitter> <westrom:matrix.org> I get this: ‚èé `Debugger entered--Lisp error: (void-variable occ-get-categories)`
[21:30:31] <FromGitter> <dalanicolai> When did you get that?
[21:30:37] *** Quits: henry40408 (~henry4040@175.181.188.127) (Remote host closed the connection)
[21:30:50] <FromGitter> <dalanicolai> So do `M-x toggle-debug-on-error`
[21:30:50] <FromGitter> <westrom:matrix.org> Upon evaling the buffer ‚èé https://bpa.st/FZRI6ARLGCTV23RBX3DU55FAIA
[21:31:00] <FromGitter> <dalanicolai> Ah okay
[21:31:14] <FromGitter> <dalanicolai> I did not get that error when doing `, e b `here
[21:31:16] *** Joins: henry40408 (~henry4040@175.181.188.127)
[21:31:41] <FromGitter> <westrom:matrix.org> Maybe I'll try recompiling emacs?
[21:32:59] <FromGitter> <westrom:matrix.org> I'm using the aur right now. I wonder if it supports incremental builds.
[21:33:27] <FromGitter> <dalanicolai> > So do `M-x toggle-debug-on-error` ‚èé  ‚èé But did you try this now?
[21:33:45] <FromGitter> <dalanicolai> I guess now we will see where that message comes from
[21:33:51] <FromGitter> <dalanicolai> (if you loaded the .el file)
[21:34:18] <FromGitter> <westrom:matrix.org> That stacktrace I pasted was when I evaluated the buffer of org-projectile.el, with `toggle-debug-on-error` toggled on.
[21:34:35] <FromGitter> <dalanicolai> Ah okay
[21:35:32] <FromGitter> <dalanicolai> Okay... because you have auto-compile on it tries to native-compile that file
[21:35:40] <FromGitter> <dalanicolai> And that produces the error
[21:36:04] <FromGitter> <dalanicolai> So switch auto-compile off... and load the .el again
[21:38:18] <FromGitter> <dalanicolai> Okay... I must go... I hope you'll find out
[21:38:32] <FromGitter> <dalanicolai> Otherwise, use Emacs 28 or 27... both fine too
[21:38:48] <FromGitter> <dalanicolai> That could help maybe
[21:42:48] <FromGitter> <lebensterben> just use Emacs 27 and save yourself sometimes
[21:42:55] <FromGitter> <lebensterben> 1) some time
[21:43:57] <FromGitter> <lebensterben> I'm not convinced to use native compile yet after seeing so many issues
[21:44:26] <FromGitter> <dalanicolai> I am still here... but I must leave
[21:44:43] <FromGitter> <dalanicolai> But I used native compile for a whole while before... and I experienced zero issues
[21:45:10] <FromGitter> <dalanicolai> Then for some reason I used the Emacs from my distribution
[21:45:24] <FromGitter> <dalanicolai> And today, I finally compiled Emacs 29 again
[21:45:31] <FromGitter> <dalanicolai> No issues until now
[21:45:38] <FromGitter> <dalanicolai> At least here...
[21:45:43] <FromGitter> <dalanicolai> Okay... see you later!
[23:18:04] <Unicorn_Princess> i have line-numbers everywhere thanks to "dotspacemacs-line-numbers t" in .spacemacs, except in .gitignore files, where i have to enable them manually with one of the line-number functions. how can i enable them permanently? i suspect this is due to the .gitignore layer ignoring dotspacemacs-line-numbers, but i don't really know how that variable is supposed to be propagated to major modes, so i'm just guessing. in general, 
[23:18:04] <Unicorn_Princess> i'd like to know what the idiomatic way to tweak a layer is (short of writing a whole new one)
[23:30:02] <FromGitter> <westrom:matrix.org> @dalanicolai: Hey, I just compiled the latest emacs, the problem did not fix itself though. ‚èé If I switch over to emacs 28 I have no problem though.
[23:38:47] <FromGitter> <golanv:tchncs.de> I'm having some issues with the emacs-evil-colemak-basics package (https://github.com/wbolster/emacs-evil-colemak-basics)...mostly it all seems to work correctly in spacemacs, but for some reason the "k" key ("n" on QWERTY), rather than jumpint to the next search result, seems to search for an old pattern previously searched for.  There shouldn't be any kind of conflict with the "k" key.  Does anyone have 
[23:38:47] <FromGitter> ... any ideas as to what may be causing the problem?
