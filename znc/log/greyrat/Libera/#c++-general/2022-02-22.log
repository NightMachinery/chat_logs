[00:00:52] <Friithian> 95% of the time when I'm writing bash scripts or short c++ programs I feel like I do a lot of things that if it goes wrong Ic an just blame the user for
[00:03:32] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:06:55] <LordKalma> on windows, this is a notable situation, since cmd.exe still uses some old-ass codepage for compatibility, producing interesting terminal crap when using interesting unicode on code built with /utf-8
[00:08:45] <Friithian> that sounds like a user problem
[00:09:41] <pulse> ban unicode, embrace extended ascii
[00:09:48] <Friithian> extended? bah
[00:09:54] <Friithian> just straight ascii
[00:10:02] <pulse> but extended gives you those nice borders
[00:10:11] <Friithian> use *curses for that stuff
[00:10:17] <pulse> never
[00:10:23] <Friithian> then suffer! :P
[00:10:39] <Friithian> I've always wanted to do something with notcurses
[00:10:50] <LordKalma> linux terminal clients usually support utf8 just fine
[00:10:54] *** Joins: rajkosto (~rajkosto@178.220.66.235)
[00:11:08] <LordKalma> and power shell on windows as well, and cmd.exe if you just change the codepage
[00:12:39] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[00:14:45] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:17:32] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[00:34:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:35:03] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:35:08] *** Quits: Tokamak (~Tokamak@172.58.188.134) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[00:39:20] <ashafq> Friithian: How will you emoji with ASCII?
[00:39:44] <Friithian> there's a big assumption there; I do not use emojis at all
[00:40:11] <LordKalma> ‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
[00:40:15] <Friithian> ew
[00:41:19] *** Quits: jsbach (~jsbach@2a01:c22:ad5b:3300:4d02:2c71:33f7:3a7b) (Ping timeout: 256 seconds)
[00:42:31] <LordKalma> ‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï‚≠ï
[00:42:41] <LordKalma> TIL https://emojipedia.org/hollow-red-circle/
[00:42:51] <LordKalma> "Used as an alternative to a check (tick) in Japan for a something that is correct."
[00:42:51] <Friithian> why
[00:42:54] <Friithian> oh
[00:42:54] <LordKalma> not as +18
[00:44:06] <LordKalma> üßÆ // there's an emoji for an abacus
[00:45:14] <rpav> { using ùñÑùñäùï∫ùñëùñâùñäùïøùñìùñô = int; }
[00:45:15] <geordi>  
[00:45:30] <Friithian> why
[00:46:05] <LordKalma> I once reviewed a code from a college colleague (that could barely program) that used a literal Œª as a variable name
[00:46:05] <Inline> je olde Int
[00:46:06] <ashafq> There's also stuff like this: U+FDFD Ô∑Ω
[00:46:06] <Inline> lol
[00:46:17] <rpav> maybe we should make all ùñãùñöùñìùñàùñôùñéùñîùñìùñò `extern "C"` by default
[00:46:23] <Friithian> LordKalma: I hope that review ended in a rejection
[00:46:41] <LordKalma> they were really bad I just said it's fine haha
[00:47:10] <ashafq> That's a single character sentence
[00:47:31] *** Quits: magla (~gelignite@d5361f17.access.ecotel.net) (Quit: Stay safe!)
[00:47:36] <LordKalma> https://i.gyazo.com/3444d0ac5abacee5d14e19508f0d0930.png
[00:47:50] <LordKalma> thanks to hexchat I though U+FDFD was a square with FDFD on it
[00:47:56] <LordKalma> then I copy pasted it into firefox
[00:47:58] <Friithian>  https://friithian.dev/pictures/screenshots/./2022-02-21T16-17-52.png
[00:48:39] <ashafq> LordKalma: need the arabic fonts installed
[00:48:44] <LordKalma> https://i.gyazo.com/8c2e24448cd9e6bf6eb54b677a063020.png
[00:48:49] <LordKalma> compare the url versus the textbox
[00:48:56] <LordKalma> ashafq, hexchat is a big pile of trash
[00:49:05] <LordKalma> you give it alternate fotns and they work 5% of the time
[00:49:06] <Friithian> install irssi
[00:49:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:50:58] <ashafq> Since we are talking about non-c++ stuff: I have been getting into Haiku OS over the weekend.
[00:51:26] <ashafq> I wish there were stuff from Haiku OS that can exist on Linux
[00:52:44] <rpav> is haiku os the BeOS clone
[00:52:54] <ashafq> One of the simple things: GUI related system calls, or I am not aware of GUI system calls on Linux
[00:52:57] <ashafq> rpav: yes
[00:53:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:53:03] <rpav> it seems unlikely that something can't be ported
[00:53:06] <rpav> oh
[00:53:12] <rpav> well, you could, but why would you want that heh
[00:54:00] <rpav> the gui should definitely not be at the system level, beyond the system aiding in how you move memory between processes/banks/etc and otherwise communicate
[00:54:22] * LordKalma laughs in windows.h
[00:54:26] <rpav> probably more "what do the gui system calls do that you would want to be available" would be a better place to start
[00:54:37] <Friithian> LordKalma: is it really laughing?
[00:54:45] <rpav> laughing, weeping, it's all the same
[00:54:46] <Friithian> or is that just the sound of pain
[00:54:47] <LordKalma> idk, I use qt anyway haha
[00:54:52] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Quit: Leaving)
[00:54:53] <LordKalma> ask PJBoy
[00:55:03] <LordKalma> he actually does like winui
[00:55:07] <Friithian> ew
[00:55:16] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[00:55:20] <rpav> which one
[00:55:24] <ashafq> rpav: well, there are Wayland, and X on Linux, but I think it's always a two step processes, no?
[00:55:36] <rpav> ashafq: depends what you mean
[00:55:59] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:56:00] <rpav> wayland is a lot crap, probably don't go by that
[00:56:29] <ashafq> Wayland or X are services on the userspace and then they basically route calls from other application down to the kernel layer
[00:56:44] <rpav> X has a lot of things that aren't really as useful anymore.. although neither one may qualify as what you want for "gui"
[00:57:28] <rpav> ashafq: very generally speaking but probably not the best way to think about it
[00:57:37] <ashafq> Well, what I mean by GUI is just the ability of manipulating raw pixels on screen
[00:58:25] <ashafq> But the graphics stack is so complicated now that I don't even know what I mean by my previous sentence
[00:59:01] <Friithian> oh heck I remember a thing where you could read from dev urandom and append it to some file in /proc/ to really mess with your display
[00:59:13] <ashafq> Let's just say X is not my favorite, and I thought Wayland was the future, but I want to reconsider.
[00:59:17] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Client Quit)
[00:59:32] <ashafq> Friithian: Are you talking about framebuffer?
[00:59:53] <Friithian> I'm not sure, I just remember it was reading from /dev/urandom > /proc/something
[01:00:44] <ashafq> Or let's just talk about other silly examples: how app icons are placed on Windows
[01:01:06] <rpav> ashafq: not sure your experience .. X is surprisingly good in many respects, at a basic design and protocol level
[01:01:12] <rpav> xlib is pretty crap though
[01:01:44] <rpav> a chunk of X has been superseded, and there's more desire for security now perhaps, but
[01:02:00] <ashafq> rpav: X is good if you don't have to write/maintain with xlib and deal with gtk/Qt
[01:02:17] <LordKalma> so, X is good if you don't deal with it at all?
[01:02:34] <ashafq> LordKalma: Have you seen the X API?
[01:02:41] <rpav> what i _really_ want is a GUI as basically a set of utilities .. you get a "gui context" in your application, and do all gpu/graphics writes _locally_, and then you can attach _that_ window to the gui if you want .. or stream it somewhere, or whatever
[01:02:41] <LordKalma> I've heard the memes
[01:03:06] <rpav> the gui itself would be composed of a few things .. compositor, layout manager, decorator, and probably a few other things
[01:03:36] <ashafq> LordKalma: This is from https://www.x.org/wiki/Documentation/ "Rather than develop directly for X, we recommend you use a toolkit such as GTK+ or Qt. There are many other popular toolkits, some special-purpose, such as Clutter and Enlightenment/EFL."
[01:04:14] <rpav> well X isn't a gui in that sense, but then it _shouldn't_ be
[01:04:54] <rpav> what would be ideal these days is even _less_ than X gives you .. basically a gpu context and the ability to make render buffers
[01:06:14] <rpav> even then it doesnt' buy you a lot over X .. more responsive compositing, some security .. with the above separation, you could have niftier and more composable window controls/visuals/etc, but that's probably not what anyone's crying for anyway
[01:06:34] *** Quits: paul424 (~tom@ip-5-172-235-10.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[01:06:37] <ashafq> yea
[01:07:38] *** Joins: syrius (~syrius@titan.stormtek.net)
[01:07:58] <ashafq> Or lol the whole desktop could be a chromium instance and all the UI can be done with JavaScript
[01:08:02] <rpav> though the above scheme _does_ buy you relatively easy remote streaming, and like the ability for games to fully control the display in a console-like setup
[01:08:08] <LordKalma> yes, love that idea
[01:08:14] <LordKalma> let's call it... chromeOS
[01:08:15] <LordKalma> oh wait...
[01:08:17] * rpav shoots ashafq 
[01:08:31] <ashafq> lol
[01:08:46] <rpav> ashafq: ooh, then all gui system calls could be XMLRPC over HTTPS
[01:09:12] <Friithian> eww
[01:09:23] <rpav> actually we should propose taht for the linux kernel
[01:09:31] <LordKalma> and let's call it CursedOS
[01:10:01] <rpav> what better way to start a process than pushing and parsing an 8k chunk of XML describing hte process textually
[01:10:22] *** Joins: p-i-_ (~Ohmu@183.89.27.225)
[01:10:32] <ashafq> LordKalma: Hey it will make Slack, Spotify, Teams very efficient
[01:10:43] <LordKalma> no, it'll make them native
[01:10:47] <LordKalma> exactly the same performance
[01:11:06] <LordKalma> V8 is pretty much what you'll get with JS
[01:11:07] <rpav> slack .. now you can have _kernel_ conversation threads
[01:11:17] <ville> ashafq: you probably mean xlib or xcb's implementation rather than X when you say "X API"?
[01:11:19] <LordKalma> hot
[01:11:34] <ashafq> ville: yes
[01:11:59] <rpav> yeah most people's experience is probably xlib .. though to be fair, xcb isnt' really a user-friendly thing you want to write directly either
[01:12:56] <ville> if anything i'd rate xcb is worse from programmer's perspective just because at least xlib there's some reasonable documentation and the body of examples/existing code is quite vast
[01:13:25] <rpav> kinda .. i don't remember actually having much problem with it once i understood the basics
[01:13:46] <LordKalma> honest questions
[01:13:48] *** Quits: p-i- (~Ohmu@2403:6200:8978:7799:fd4a:71a0:8bdb:db3d) (Ping timeout: 240 seconds)
[01:13:53] <LordKalma> what does X/Wayland handle?
[01:14:01] <LordKalma> like basically a canvas to paint on?
[01:14:03] <ville> for xcb you get autogenerated docs which is just getting the contents of a header file shown in a browser. and half of them containing no text besides: "TODO:"
[01:14:05] <rpav> but i was rewriting clx in terms of xcb calls.. like, xcb seems nice for creating a higher-level API, but using it directly would be kinda like using vulkan directly
[01:14:12] <LordKalma> do they handle input? something smarter than just a canvas?
[01:15:15] <rpav> LordKalma: yeah you get input .. in X you get a lot of stuff, not sure about wayland but i think you don't get much beyond a place to draw and some input stuff
[01:15:22] <ville> they do everything, for some small value of everything, required to do a desktop environment. if not in the original specification as it may be in the case of X then through some extension
[01:16:10] <ville> X has a fairly functional extension mechanism which they've managed to utilize to keep it relevant for so long
[01:16:19] <rpav> the "old" X stuff gives you various basic drawing, font rendering, image blitting, and stuff .. not super useful these days, but a lot has changed in like 40 years
[01:16:25] <ashafq> LordKalma: https://www.x.org/wiki/guide/xorg.svg
[01:16:39] <rpav> (otoh, old X apps still run .. stability is nice)
[01:24:28] *** Quits: robod34 (Username@79.113.243.73) (Remote host closed the connection)
[01:25:57] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[01:30:45] <xkoncek> i wrote a base64 de/en-coder where i was using a biset<24> to realize that i can just use a plain uint32_t
[01:31:09] *** Quits: proller (~p@2a02:6b8:b081:b40d::1:18) (Ping timeout: 250 seconds)
[01:31:53] <ville> that's not modern c++
[01:36:11] *** Joins: markong (~kvirc@213.146.188.203)
[01:38:56] <xkoncek> i was using the same bit-shifting operations but now i don't have to call .toulong()
[01:39:02] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895)
[01:41:51] <Alipha> xkoncek: now make your algorithm time-constant so that if you're encoding/decoding secrets, you're not leaking any information ;-)
[01:42:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:57] *** ChanServ sets mode: +v npaperbot
[01:43:05] <PJBoy> then add side channel masking
[01:43:35] <PJBoy> so thwart power analysis side channel attacks
[01:43:49] *** Joins: proller (~p@80.240.216.69)
[01:44:10] <Alipha> If it's time constant, it's also likely power constant too?
[01:44:37] <PJBoy> not at all
[01:44:55] <LordKalma> how do you make it time constant over varying size of payload?
[01:45:01] <PJBoy> for example, if you just added NOPs to make up the difference between say squaring and multiplication
[01:45:13] <Alipha> LordKalma: it's for a given payload length
[01:45:14] <PJBoy> those NOPs don't draw as much power
[01:45:54] <Alipha> PJBoy: that's a fragile way to make something time constant
[01:46:14] <Alipha> but i see your point
[01:48:37] <LordKalma> next thing we'll discover that you can tap intel processors and get a stream of the instructions out
[01:48:50] <xkoncek> i really only wrote it because openssl (which i am not using) encodes the keys that way
[01:48:57] <PJBoy> there's also attacks against masked side channels, so you can counter those with higher order masking
[01:48:59] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[01:49:21] <xkoncek> allocate every bit on the heap
[01:49:25] <LordKalma> "masking doesn't work? mask more"
[01:49:55] <xkoncek> std::list<bool>
[01:50:03] <PJBoy> then there's differential power analysis
[01:50:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:50:17] <PJBoy> higher order differential power analysis
[01:50:39] <PJBoy> security's damn hard
[01:51:18] <PJBoy> probably most things aren't side channel secure because it's not part of the threat model though
[01:51:19] * rpav wonders if security is ultimately even possible
[01:51:41] <PJBoy> exceptions being things like smartcards
[01:52:04] <Alipha> PJBoy: i wrote time-constant base32 encoding/decoding (i'm not sure if the encoding format is compatible with other base32 encoders, but i don't care): https://wandbox.org/permlink/DytQAAi1qQFZE9BM
[01:52:29] <xkoncek> what does "time-constant" mean?
[01:52:40] <LordKalma> Alipha, but isn't that varying payload size?
[01:52:54] <PJBoy> it would take a while for me to be convinced that it's time constant
[01:52:55] <Alipha> LordKalma: it's time constant for a given payload size
[01:53:02] <PJBoy> I'll choose to believe you
[01:53:15] <LordKalma> Alipha, but 1 to 16 isn0t bigger messages?
[01:53:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:54:26] <Alipha> LordKalma: yes. so, e.g., all messages of length 14 take the same amount of time to encode/decode. and all messages of length 5 take the same amount of time to encode/decode. but messages of length 5 and messages of length 14 take different amounts of time to encode/decode
[01:54:37] <LordKalma> ah ok ok
[01:54:38] <LordKalma> thanks
[01:54:50] <PJBoy> the length of data is always considered public information in crypto
[01:55:44] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[01:56:36] <Alipha> PJBoy: i ran my code through dudect. even though that's not proof, it makes me feel fairly confident: https://github.com/oreparaz/dudect
[01:56:49] <PJBoy> oooh
[01:57:13] <PJBoy> that's a good tool
[01:57:16] *** Joins: hightower2 (~hightower@141-136-176-238.dsl.iskon.hr)
[01:57:24] <hightower2> Heya, where do I start looking to resolve this:
[01:57:25] <Alipha> i know. i think it's pretty awesome :-)
[01:57:32] <hightower2>  /usr/include/c++/7/ext/algorithm:68:14: error: no member named 'min' in namespace 'std'
[01:57:42] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:58:07] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[01:58:09] <PJBoy> and it's aware if leakage detection \o/
[01:58:12] <PJBoy> *of
[01:58:22] <PJBoy> ok I have full faith in that tool
[01:59:05] <PJBoy> now the question is, is it still time constant on ARM?
[01:59:48] <PJBoy> ARM is a lot more facilitating of time constant code with its conditional instructions
[01:59:59] <PJBoy> but idk if compilers are up to scratch
[02:00:50] <Alipha> PJBoy: i actually ran it on a raspberrypi. hm. i'm not sure if i ran it on an intel
[02:01:17] <Alipha> hightower2: how are you getting that error?
[02:01:24] <PJBoy> ah
[02:01:30] <PJBoy> the plot thickens
[02:01:37] *** Joins: proller (~p@2a02:6b8:b081:8024::1:b)
[02:01:38] *** Quits: proller (~p@2a02:6b8:b081:8024::1:b) (Remote host closed the connection)
[02:02:04] *** Joins: proller (~p@2a02:6b8:b081:8024::1:b)
[02:02:37] <hightower2> Alipha, on line:     using std::min;
[02:04:07] <PJBoy> https://github.com/gcc-mirror/gcc/blob/releases/gcc-7/libstdc++-v3/include/ext/algorithm#L68 for context
[02:05:17] <PJBoy> are you including <ext/algorithm> instead of <algorithm> or something crazy like that?
[02:06:10] <hightower2> Seems not:  /usr/include/c++/7/ext/algorithm:68:14: error: no member named 'min' in namespace 'std'
[02:06:26] <PJBoy> what's your code?
[02:06:29] <Alipha> how are you compiling the program? and is this a program you wrote, or are you trying to compile someone else's program?
[02:07:08] <hightower2> I end up there during compilation of something that uses Qt
[02:07:20] <hightower2> hm, probably can't explain/show more than that
[02:08:11] <johnny> you can't so your include of "algorithm"?
[02:08:21] <johnny> do you haeve #include <algorithm> or something else?
[02:08:32] <johnny> or does the code have it in general
[02:09:03] <Alipha> hightower2: are you able to compile this code successfully? https://wandbox.org/permlink/gPV51tVGcIRnWSnl
[02:09:12] <johnny> i can't even remember when gcc 7 came out
[02:11:24] *** Joins: peoliye (~peoliye@54-240-198-38.amazon.com)
[02:12:00] <hightower2> I can compile that, yes
[02:12:38] <Alipha> so it sounds like your build configuration is messing things up somehow?
[02:13:20] <hightower2> yeah, don't see what else. OK, thanks
[02:14:41] <Alipha> hightower2: it would probably be helpful to paste your cmake file and your build output or something
[02:14:45] <Alipha> to a pastebin
[02:17:35] <hightower2> yeah, not easy to do... well, I just visited here to see if this was something that often happens. Given that it's not, I don't have further questions :)
[02:19:13] <Alipha> hightower2: the version of Qt that you're using supports gcc7?
[02:24:08] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:24:49] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[02:30:54] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:30:56] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[02:34:19] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[02:34:28] *** kevr` is now known as kevr
[02:37:24] *** flooded is now known as _flood
[02:39:30] *** Joins: ferdna (~ferdna@user/ferdna)
[02:42:53] <Alipha> PJBoy: oh, it looks like I did indeed test my base32 encoder on Intel too
[02:43:02] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6344) (Quit: Leaving)
[02:47:00] *** Quits: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[02:49:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[02:50:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:51:21] *** Joins: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[02:51:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[02:54:14] *** Joins: test_ (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[02:54:26] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:57:50] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[03:03:08] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:04:48] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:04:58] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:11:57] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[03:14:13] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:b1a9:9586:4800:c579)
[03:14:57] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[03:15:57] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 240 seconds)
[03:16:08] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:e00b:cb48:98a7:f7f9) (Ping timeout: 252 seconds)
[03:18:26] *** Quits: proller (~p@2a02:6b8:b081:8024::1:b) (Ping timeout: 260 seconds)
[03:18:36] <Friithian> oh boy, prof is teaching us makefiles, no mention of cmake
[03:18:56] <PJBoy> good
[03:19:07] <PJBoy> at Alipha, not at makefiles
[03:19:19] <Friithian> I was about to say
[03:20:06] <Alipha> Friithian: i just use this magic makefile: https://github.com/alipha/script_bot/blob/master/makefile
[03:23:53] *** Quits: MatSharrow (~matthew@56.93.9.51.dyn.plus.net) (Remote host closed the connection)
[03:24:19] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:24:24] *** Joins: MatSharrow (~matthew@56.93.9.51.dyn.plus.net)
[03:26:40] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:27:08] *** Quits: HvszrStykp (~X@81.171.62.82) (Ping timeout: 272 seconds)
[03:27:28] *** test_ is now known as _flood
[03:29:01] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:31:57] *** Quits: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[03:33:02] <Friithian> but why
[03:34:38] *** Joins: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[03:41:02] *** Tobbi__ is now known as Tobbi
[03:47:20] <Alipha> i didn't want to figure out cmake and i found that makefile online ;-)
[03:47:31] <Friithian> ah, insanity!
[03:47:33] <Friithian> :P
[03:48:53] <Alipha> the magic under `$(DEP_DIR)/%.d: %.cpp` does incremental compiling--it uses g++ -MM to get a list of header file dependencies for each .cpp file and then only recompiles .cpp files if any of their dependencies change
[03:49:12] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d5a0:edd8:6280:59e9)
[03:49:12] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d5a0:edd8:6280:59e9) (Changing host)
[03:49:12] *** Joins: skapata (~Skapata@user/skapata)
[03:51:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:51:20] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 252 seconds)
[03:54:30] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:56:14] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:13:47] <kalven> yeah that all seems simpler than cmake
[04:14:06] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[04:14:54] <Friithian> does it?
[04:16:32] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 272 seconds)
[04:18:58] <Alipha> i think that was sarcasm
[04:19:04] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 272 seconds)
[04:19:16] <Friithian> oh, shit
[04:19:28] <PJBoy> ccache g++ **/*.cpp
[04:19:30] <Friithian> I just got a massive fuckin whooosh
[04:19:35] <PJBoy> don't @ me
[04:19:42] <Friithian> PJBoy
[04:19:50] <PJBoy> >:(
[04:20:02] <PJBoy> !slap Friithian
[04:20:03] <nolyc> PJBoy: Error: "slap" is not a valid command.
[04:20:07] <PJBoy> it's not?!
[04:20:16] <Alipha> !PJBoy
[04:20:17] <nolyc> Alipha: Error: "PJBoy" is not a valid command.
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:28:12] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:30:58] *** Quits: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[04:35:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:8c05:d57e:b0ce:2212)
[04:41:19] *** Quits: AmR (~AmREiSa@156.199.67.136) (Quit: Konversation terminated!)
[04:42:59] *** Joins: asen (~asen@2408:821a:618:8ad0:c30b:1640:f4a3:fe2a)
[04:46:29] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:47:37] <BurumaSerafuku> !rq PJBoy
[04:47:37] <nolyc> BurumaSerafuku: <CarloWood> xkoncek: If you try hard enough it always fits. https://c.tenor.com/AM5RFwDJ9nMAAAAC/train-funny.gif
[04:47:52] <BurumaSerafuku> !rq Alipha
[04:47:52] <nolyc> BurumaSerafuku: <anyone> a testcase with a trainer but with no pokemon ain't no good testcase :>
[04:48:28] <BurumaSerafuku> oh lol. the GRABBER shows up too?
[04:50:49] <johnny> i don'tthnk rq takes arguments
[04:51:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:51:51] *** Joins: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse)
[04:55:42] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[04:55:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[05:04:31] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[05:06:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:07:00] <PJBoy> !quotegrabs random pjboy
[05:07:00] <nolyc> PJBoy: <PJBoy> can go into it in more depth if ya want
[05:07:14] <PJBoy> that's a terrible quote
[05:08:29] <Friithian> it's something PJBoy said, what did you expect ;P
[05:08:41] <PJBoy> dayum
[05:12:11] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:12:59] <Friithian> it's like trying to get a good quote from me
[05:14:49] <Alipha> !quotegrabs random Friithian
[05:14:49] <nolyc> Alipha: Error: Couldn't get a random quote for that nick.
[05:15:04] <Alipha> !quotegrabs random Alipha
[05:15:05] <nolyc> Alipha: <Alipha> cnomake, hearnomake, speaknomake
[05:15:09] <Friithian> see
[05:15:15] <Friithian> you can't get any good quote from
[05:16:42] <Alipha> !quotegrabs random ville
[05:16:43] <nolyc> Alipha: <ville> don't believe the cmake propaganda. make is fine
[05:17:01] <Alipha> Friithian: see??? make is fine ;-)
[05:17:29] <Friithian> ah yes, that person is such an excellent source :P
[05:20:44] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:23:43] <hnOsmium0001[m]> !quotegrabs random hnOsmium0001
[05:23:43] <nolyc> hnOsmium0001[m]: <hnOsmium0001> I should've quotegrabbed that but anyways...
[05:23:56] <hnOsmium0001[m]> not sure what to react but ok
[05:29:57] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[05:34:13] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:35:04] *** Joins: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[05:39:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:42:49] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b1a9:9586:4800:c579) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[05:42:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:00] *** ChanServ sets mode: +v npaperbot
[05:52:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:55:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:57:39] *** Joins: arch-angel (~quassel@user/arch-angel)
[06:21:53] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:32:36] *** Joins: TommyGunn (~TommyGunn@97.104.8.29)
[06:33:15] *** Parts: TommyGunn (~TommyGunn@97.104.8.29) ()
[06:40:11] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[06:42:50] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 272 seconds)
[06:45:38] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:50:12] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[06:51:17] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[06:52:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:55:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:55:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:58:40] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:02:38] *** Joins: rajkohaxor (~rajkosto@178-221-217-125.dynamic.isp.telekom.rs)
[07:02:39] *** Quits: rajkohaxor (~rajkosto@178-221-217-125.dynamic.isp.telekom.rs) (Remote host closed the connection)
[07:03:03] *** Joins: adeliktas2 (~adeliktas@i59F4A44B.versanet.de)
[07:04:36] *** Quits: rajkosto (~rajkosto@178.220.66.235) (Ping timeout: 240 seconds)
[07:05:11] *** Quits: adeliktas (~adeliktas@i59F5279A.versanet.de) (Ping timeout: 256 seconds)
[07:05:11] *** adeliktas2 is now known as adeliktas
[07:06:43] *** Joins: skapata (~Skapata@user/skapata)
[07:07:29] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:10:51] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:13:16] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:23:26] *** Joins: NiD27 (~nid27@49.205.148.49)
[07:23:41] *** Parts: capjack[m] (~raffaem@2001:470:69fc:105::393) ()
[07:34:23] *** Quits: asen (~asen@2408:821a:618:8ad0:c30b:1640:f4a3:fe2a) (Quit: Leaving)
[07:36:55] *** Joins: CaCode- (~CaCode@user/cacode)
[07:39:00] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[07:45:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:53:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:55:06] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:56:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:08:35] *** Quits: NiD27 (~nid27@49.205.148.49) (Remote host closed the connection)
[08:12:54] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 256 seconds)
[08:17:54] *** Joins: txtsd (~txtsd@user/txtsd)
[08:30:11] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 256 seconds)
[08:37:44] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[08:38:03] <mike18> hi how can i define a multiline string in c++ with \n for line break?
[08:40:26] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[08:40:41] <mike18> ok found it
[08:41:35] <mike18> how can i unit test a std::getline(ss, line) ?
[08:41:42] <mike18> to read data from stdin and parse etc...
[08:42:09] <mike18> i mean: std::getline(std::cin, line)
[08:42:42] *** Joins: malloy (~jimery@116.30.220.175)
[08:52:08] <johnny> can you pass a stringstream in there?
[08:52:30] <johnny> i've still never myself used std::cin
[08:52:59] <mike18> yeah but the real code uses std::cin
[08:53:00] <johnny> it's input from from args, or has no interface at all :)
[08:53:05] <mike18> so wonder whats best
[08:53:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:54:30] <johnny> well you could change your code around such that it uses either one conditionally, or mock it perhaps.
[08:54:33] <mike18> also how to write a regex for (mkdir arg1 arg2  or ls arg1 arg2 ... argx) std::regex rgx("[mkdir|rm|ls][ ]+"); ?
[08:55:41] <johnny> it sounds like you should rrobably be using a token parser if you're going for anything beyond that rather than a regex
[08:56:03] <johnny> i don't know all the rules for parsing cli input, but i know folks have written about it
[08:56:23] <mike18> why no regex?
[08:56:36] <johnny> because once you're in that realm you have to start dealing with backslashes, quotes and other stuff
[08:56:54] <mike18> the input will not have those special chars
[08:56:56] <johnny> oh wildcard expansion or glob expansion as well if you go even farther
[08:57:06] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:57:12] <johnny> so what you're really trying to do is create a deny list of things that aren't allowed?
[08:57:21] <johnny> then you really need to rethink your approach
[08:57:42] <johnny> because that kinda thing can be trivial get around
[08:57:44] <mike18> i use it to validate the string and to split it into tokens
[08:58:08] <mike18> cmd arg1 arg2 -> vect<string>{cmd, arg1, arg2}
[08:58:11] <mike18> vector
[08:58:19] <johnny> if they create a symlink from  /bin/mkdir to $SOMEPLACEINPATH/mysafecommand you've already lost control
[08:58:36] <mike18> its not for real filesystem :)
[08:58:49] <mike18> i said that there is no /
[08:59:02] <mike18> just chars from [a-z][A-Z] and space in between
[08:59:05] <johnny> the real question is.. why regex.. that should be what you think :)
[08:59:14] <peepsalot> anyone know how I could check the version of dwarf debug info in an executable?  it is cross compiled from linux to windows with mingw / gcc
[08:59:27] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:00:02] <mike18> johnny: to validate the input
[09:00:09] <mike18> and to split it with sregex_token_iterator
[09:00:30] <johnny> why are you bother excluding mkdir rm and ls in the first place if it can't do anything?
[09:00:48] <mike18> was just an example
[09:00:59] <johnny> peepsalot, can't readelf do it?
[09:01:15] <johnny> ohsorry you want it for PE
[09:01:22] <peepsalot> right, its not an ELF
[09:01:44] <peepsalot> i found a readpe app, but it segfaults for me
[09:01:52] <mike18> is that valid regex? std::regex rgx("[install|rm|ls][ ]+");
[09:01:57] <johnny> i wonder if this works llvm-dwarfdump --debug-dump=info hello | grep 'Compile Unit:' for PE
[09:02:40] <johnny> mike18, you might wanna play around with a the regex in a webbrowser or a site like reggexr with it set to ecma
[09:02:55] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[09:03:15] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[09:03:17] <johnny> i can't pretend to know the ecmascript regex :(
[09:03:38] <mike18> is that the same as for c++ regex??
[09:03:59] <johnny> yes
[09:04:07] <johnny> peepsalot, http://wiki.dwarfstd.org/index.php?title=Libdwarf_And_Dwarfdump
[09:04:25] <johnny> it says it can do PE files, but i of course have never done it
[09:05:08] *** Joins: teepee (~teepee@openscad/teepee)
[09:05:41] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[09:06:52] <mike18> whats the diff bwteen () and [] in the regex?
[09:07:09] <mike18> isnt both for grouping?
[09:07:34] <peepsalot> johnny: "llvm-dwarfdump: Unknown command line argument '--debug-dump=info'."
[09:07:54] <peepsalot> but "llvm-dwarfdump --all "... worked
[09:08:18] <peepsalot> i got a bunch of grep mathes with "... format = DWARF32, version = 0x0004, ..."
[09:10:03] <peepsalot> now i am just wanting to determine if the debug symbols are compressed or not
[09:10:29] *** Quits: peoliye (~peoliye@54-240-198-38.amazon.com) (Quit: Client closed)
[09:10:42] *** Quits: CaCode- (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[09:12:09] <johnny> mike18, you can totally look up the ecmascript syntax for regex
[09:13:10] <mike18> johnny: i use: https://regex101.com/
[09:13:36] <mike18> but when i call std::regex regex_match it fails
[09:13:51] <mike18> meaning i get back false match
[09:22:22] <kalven> mike18: [] is a list of characters.. like [abc] will match a, b or c. () is a group
[09:23:35] <mike18> how can i get lets say FOO ARG1 in regex?
[09:24:09] <mike18> [FOO|BAR][ ]+ ... would match FOO with space at end?
[09:24:30] <kalven> you want (FOO|BAR)
[09:24:49] <kalven> assuming you want it to either match the literal FOO or BAR
[09:24:49] <mike18> and the [ ]+ after that?
[09:25:11] <mike18> thats clear to me with the first group but how to combine it with [ ]+ ?
[09:25:51] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:26:46] <mike18> i want somethig like [ ]+ ...and say the first word can be only FOO|BAR
[09:26:55] <kalven> [ ]+ matches 1 or more spaces
[09:27:00] <mike18> yeah
[09:28:00] <kalven> so (FOO|BAR)[ ]+ would for example match "FOO     " or "BAR "
[09:28:47] <mike18> for esample: https://www.informit.com/articles/article.aspx?p=2064649&seqNum=7
[09:29:14] <mike18> can the token iterator still read FOO or BAR?
[09:30:36] <kalven> I haven't really used the token iterators from the standard library, so I don't know how they work
[09:31:13] <mike18> ok
[09:33:28] *** Joins: Hercules (~Hercules@user/hercules)
[09:35:42] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[09:35:55] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[09:36:27] *** Joins: rajkosto (~rajkosto@178.220.244.219)
[09:42:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:58] *** ChanServ sets mode: +v npaperbot
[09:54:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:57:16] *** Quits: Hercules (~Hercules@user/hercules) (Quit: Leaving)
[09:57:54] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[10:01:31] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:03:47] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[10:07:21] <onizu> I have two strings, which on printing show the same content but on comparing do not result true, what could be the reason for this?
[10:07:32] <leduyquang753> Invisible characters.
[10:07:53] <leduyquang753> Or you are having two C-strings and you thought you could use `==`.
[10:08:10] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Remote host closed the connection)
[10:08:35] <onizu> C-strings can't be compared with == ?
[10:08:45] <leduyquang753> Unfortunately not.
[10:09:02] <leduyquang753> `==` compares pointers in that case.
[10:10:13] <onizu> ok
[10:18:46] *** Quits: rajkosto (~rajkosto@178.220.244.219) (Read error: Connection reset by peer)
[10:27:13] <TinoDidriksen> If you stuff them in string_view then it'd work, and wouldn't make a copy.
[10:27:26] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:28:24] <TinoDidriksen> { auto a="hello", b="xhello"; ++b; string_view as{a}, bs{b}; cout << (a == b), (as == bs); } // onizu
[10:28:25] <geordi> false, true
[10:30:43] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[10:31:04] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[10:31:09] *** Joins: jsbach (~jsbach@2a01:c22:a87a:4e00:630b:9fc:49af:9fa9)
[10:36:13] <onizu> Thanks TinoDidriksen
[10:41:52] *** Quits: p-i-_ (~Ohmu@183.89.27.225) (Remote host closed the connection)
[10:42:41] *** Quits: montpol (montpol@fine.mouses.xyz) (Remote host closed the connection)
[10:42:41] *** Joins: p-i- (~Ohmu@2403:6200:8978:7799:5848:e615:a642:6b3d)
[10:43:02] *** Joins: montpol (montpol@fine.mouses.xyz)
[10:43:12] *** Quits: montpol (montpol@fine.mouses.xyz) (Client Quit)
[10:43:44] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[10:44:03] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[10:45:48] *** Joins: montpol (montpol@fine.mouses.xyz)
[10:51:47] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:54:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:54:50] <LordKalma> !fact
[10:54:52] <nolyc> LordKalma: The binary * operator indicates multiplication.
[10:55:34] <LordKalma> T operator*(T a, T b) return a + b; // fuck the police
[10:58:12] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[10:58:18] <comrad> in java i once reflection changed the return value of an Integer object to Random. I felt evil that day.
[10:58:22] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:02:20] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f9ec:3f5d:e36a:777a)
[11:07:36] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[11:10:17] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[11:10:53] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[11:13:47] *** Joins: skapata (~Skapata@user/skapata)
[11:16:37] <TinoDidriksen> geordi --version
[11:16:38] <geordi> GCC 12.0.1 20220214 (experimental)
[11:17:16] <TinoDidriksen> geordi --version
[11:17:18] <geordi> GCC 12.0.1 20220222 (experimental)
[11:20:34] <LordKalma> "you have been in suspension for 2222222222222...."
[11:32:06] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Excess Flood)
[11:32:23] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[11:33:39] *** Joins: CaCode (~CaCode@user/cacode)
[11:34:40] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[11:34:57] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[11:35:34] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:35:53] *** Joins: CaCode_ (~CaCode@user/cacode)
[11:36:39] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:39:05] *** Quits: letto2 (~letto@188.26.152.131) (Read error: Connection reset by peer)
[11:39:15] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 272 seconds)
[11:39:33] *** Joins: letto (~letto@188.26.152.131)
[11:40:22] *** Quits: arch-angel (~quassel@user/arch-angel) (Quit: No Ping reply in 180 seconds.)
[11:41:44] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[11:42:45] *** Joins: arch-angel (~quassel@user/arch-angel)
[11:53:31] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:7799:3815:c396:4ca9:5cba)
[11:55:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:57:02] *** Quits: p-i- (~Ohmu@2403:6200:8978:7799:5848:e615:a642:6b3d) (Ping timeout: 240 seconds)
[11:58:43] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:05:37] *** Joins: manjaro-user (~manjaro-u@208.98.223.37)
[12:14:52] *** Quits: artok (~azo@mobile-access-b0486a-201.dhcp.inet.fi) (Quit: faa)
[12:15:45] *** Joins: rajkosto (~rajkosto@93-86-12-136.dynamic.isp.telekom.rs)
[12:18:56] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:19:38] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:7799:3815:c396:4ca9:5cba) (Remote host closed the connection)
[12:20:11] *** Joins: p-i- (~Ohmu@2403:6200:8978:7799:bd02:d02c:e3df:fcf1)
[12:22:45] *** Joins: robod34 (Username@79.113.243.73)
[12:35:59] *** Joins: paul424 (~tom@ip-5-172-234-175.multi.internet.cyfrowypolsat.pl)
[12:37:42] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:37:44] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[12:37:58] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[12:44:28] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 272 seconds)
[12:44:58] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[12:46:12] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:46:30] *** Joins: Guest4248 (~hasan@86.57.123.26)
[12:48:36] *** Joins: DSpider (~DSpider@82.79.237.45)
[12:55:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:56:39] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[12:57:02] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[12:57:51] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:8c05:d57e:b0ce:2212) (Quit: Quit)
[12:59:36] *** Joins: plastico (~plastico@neomutt/plastico)
[12:59:40] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[13:03:11] *** Quits: skapata (~Skapata@user/skapata) (Quit: ƒúis.)
[13:13:24] *** Quits: manjaro-user (~manjaro-u@208.98.223.37) (Ping timeout: 240 seconds)
[13:13:33] *** Joins: manjaro-user- (~manjaro-u@199-7-159-49.eng.wind.ca)
[13:18:28] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[13:18:48] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[13:23:02] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[13:33:30] *** Quits: paul424 (~tom@ip-5-172-234-175.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[13:34:44] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[13:34:53] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:35:09] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[13:37:03] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 272 seconds)
[13:38:13] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[13:42:16] *** Quits: CaCode_ (~CaCode@user/cacode) (Quit: Leaving)
[13:42:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:00] *** ChanServ sets mode: +v npaperbot
[13:46:12] * Haohmaru spins nolyc 7 times
[13:46:13] <Haohmaru> !rq
[13:46:13] <nolyc> Haohmaru: <pulse> multithreading is easy, just bloc you  kthreads frating on same reso om operurces
[13:47:34] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:55:41] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[13:55:56] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[13:56:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:56:59] *** Joins: pulse (~pulse@user/pulse)
[13:59:42] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:06:10] *** Joins: bobb_ (~bobb_@dslb-092-074-238-082.092.074.pools.vodafone-ip.de)
[14:09:08] <bobb_> Hi, i try to build a dep package with cpack inside of a CentOS VM thus cpack warns me with "CPackDeb: Can not find dpkg in your path, default to i386." Should i be concerned about that warning?
[14:09:32] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:09:41] <LordKalma> you don't have dpkg in your system?!
[14:10:14] <bobb_> LordKalma its CentOS
[14:10:18] <TinoDidriksen> If you want to build a Debian package, you kinda need the Debian tools.
[14:10:20] <bobb_> i.e. RedHat
[14:10:27] <LordKalma> so why are you trying to create a deb?
[14:10:36] <bobb_> TinoDidriksen okay, thats what i also suspected
[14:10:44] <LordKalma> and yes, defaulting to i386 seems bad if you're packaging an x64 thing :)
[14:10:46] <bobb_> LordKalma for another target
[14:10:49] <TinoDidriksen> I recommend using Docker instead to build the whole package on and for the target distro.
[14:10:53] <LordKalma> ^that
[14:10:59] <bobb_> TinoDidriksen makes sense
[14:12:05] <bobb_> LordKalma in my case its a x32 app but you're right
[14:12:20] <bobb_> thank you two about making that clear
[14:12:24] <TinoDidriksen> x32 is pretty dead.
[14:12:31] <bobb_> indeed
[14:12:32] <LordKalma> people still build in x86?
[14:12:42] <TinoDidriksen> Not x86 - x32.
[14:12:55] <bobb_> argh, its more x86 sorry
[14:13:03] <LordKalma> I don't understand the alias for these things
[14:13:04] <bobb_> but not x86_64
[14:13:33] <TinoDidriksen> Oh, you did mean 32 bit. 'cause x32 is a whole different beast, mixing x86_64 with x86.
[14:13:33] <LordKalma> some people call is 32-bit, x86, i386, but some use i386/x84 for intel arch in general
[14:13:41] <Haohmaru> x86 means "computer" ;P~
[14:14:19] <Haohmaru> i haven't seen x84 ;P~
[14:14:28] <LordKalma> YOU KNOW WHAT I MEANT
[14:14:50] <Haohmaru> you broke my eardrum
[14:15:20] <LordKalma> "yYou gotta turn up the amps past overload / Eardrums will explode"
[14:15:23] <TinoDidriksen> Anyway, Docker is also good for building for 32 bit.
[14:15:59] <LordKalma> gcc:bullseye seems what you could want
[14:16:52] *** Joins: twice (~twice@173.82.153.50)
[14:16:59] <LordKalma> oh look https://hub.docker.com/r/i386/gcc
[14:17:07] <LordKalma> WARNING: THIS IMAGE IS NOT SUPPORTED ON THE i386 ARCHITECTURE
[14:19:54] <bobb_> LordKalma i see that they have libudev-devel.i686 as dependency
[14:19:56] *** Joins: manjaro-user (~manjaro-u@199-7-159-44.eng.wind.ca)
[14:20:27] <LordKalma> what does?
[14:20:44] <bobb_> what does what?
[14:20:44] *** Quits: manjaro-user- (~manjaro-u@199-7-159-49.eng.wind.ca) (Ping timeout: 272 seconds)
[14:21:47] <xkoncek> but x86 is higher than x64
[14:22:10] <xkoncek> 86-bit cpus
[14:23:13] <TinoDidriksen> I use i386/debian:sid and friends.
[14:24:02] *** Joins: Burgundy (~NA@86.121.143.206)
[14:24:27] <xkoncek> bobb_ i even recommend podman instead of docker (it is used almost the same way)
[14:26:07] <bobb_> xkoncek why do you prefer it over docker?
[14:26:09] <Haohmaru> plain-old-data-man
[14:26:22] *** Joins: manjaro-user- (~manjaro-u@199-7-159-17.eng.wind.ca)
[14:26:32] <xkoncek> you don't need a daemon running
[14:26:36] *** Quits: manjaro-user (~manjaro-u@199-7-159-44.eng.wind.ca) (Read error: Connection reset by peer)
[14:26:58] <xkoncek> literally no configuration needed
[14:27:44] <bobb_> okay
[14:28:06] <PJBoy> I usually build x86 still
[14:28:31] * Haohmaru is on win32 here
[14:28:36] *** Quits: foul_owl (~kerry@23.82.193.88) (Ping timeout: 256 seconds)
[14:28:39] <xkoncek> with docker you have to add your used to some group usually
[14:28:41] <PJBoy> occasionally people I know can't run 64 bit exes
[14:28:46] <xkoncek> *user
[14:28:55] <PJBoy> meanwhile those 64 bits aren't doing anything for me
[14:29:03] <LordKalma> never had to do anything other than apt install docker
[14:29:21] <xkoncek> and could you run docker without sudo?
[14:30:05] <LordKalma> ah no indeed
[14:30:13] <xkoncek> maybe fedora does things differently
[14:32:44] <xkoncek> what was the proposal about more lighweight binary streams?
[14:33:20] <PJBoy> my favourite proposal?
[14:33:33] <PJBoy> [P2146]
[14:33:33] <npaperbot> P2146R2: [LEWGI] Modern std::byte stream IO for C++ <https://wg21.link/p2146r2> (by Amanda Kornoushenko) (2020-07-22) (Related: https://wg21.link/p2146r2/github)
[14:33:39] <xkoncek> i think this one? http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2146r2.pdf
[14:33:42] <TinoDidriksen> I've found that for a build system, Docker is just easier to use. Podman couldn't do the things I wanted beyond Docker (such as running a folder), so was no point in it.
[14:33:43] <LordKalma> npaperbot, search PJBoy's favourite proposal
[14:33:43] <npaperbot> Nothing found for: pjboy's, favourite, proposal
[14:33:51] <PJBoy> bad bot
[14:33:58] <xkoncek> PJBoy never forget the "modern" keyword
[14:34:15] <PJBoy> "old school std::byte stream" doesn't have the same ring to it
[14:34:28] <LordKalma> what will we use for the next paradigm?
[14:34:34] <LordKalma> beyond modern
[14:34:40] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[14:34:43] <PJBoy> in chess they use the word "hypermodern"
[14:34:46] <xkoncek> postmodern
[14:34:58] <PJBoy> of course that refers to openings from the 1900s nowadays
[14:35:18] <xkoncek> it's when yours programs start being self-aware
[14:35:35] <LordKalma> Who the fuck coded myself?!
[14:35:41] <LordKalma> look at this crap
[14:35:46] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[14:36:03] <PJBoy> "hypermodern asynch std::byte stream IO for rust"
[14:36:05] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[14:36:31] <PJBoy> maybe should have been "rust.js"
[14:36:39] <LordKalma> !grab PJBoy
[14:36:40] <nolyc> LordKalma: The operation succeeded.
[14:36:51] <LordKalma> rust.js is something so cursed I can see it happen
[14:37:12] <xkoncek> "... for use in blockchain technology"
[14:37:28] <LordKalma> to buy NFTs
[14:37:33] <xkoncek> jeez i remember when "cloud" was the new cool thing
[14:37:59] <PJBoy> I remember when "cloud" was introduced as a word for "web servers"
[14:38:08] <LordKalma> hahah yes, that
[14:38:11] <Haohmaru> eye-oh-tea still trending
[14:38:13] <PJBoy> and then suddenly gained massive traction somehow
[14:38:20] <LordKalma> well, rust.js wouldn't surprising me
[14:38:26] <LordKalma> you have things like Blazor
[14:38:44] <LordKalma> Blazor is C# to webassembly
[14:39:06] <CarloWood> I blame non-technical business guys for hyping stupid words.
[14:39:43] <PJBoy> hey, we need to keep up the illusion that programmers are somehow worth the salaries they demand
[14:40:59] <bobb_> PJBoy you mean smart-money while "engineering" blockchain-"technology"?^^
[14:41:07] <bobb_> s/while/for
[14:41:26] <LordKalma> powered by AI/ML
[14:41:27] <PJBoy> nah that's hardware engineers manipulating the market into keeping GPUs expensive
[14:41:36] <bobb_> :D
[14:42:08] <bobb_> when this hype is over, what will be next?
[14:42:13] <PJBoy> trying to buy some more time to figure out what's next
[14:42:14] <PJBoy> yeah
[14:42:27] <bobb_> haha absolutely
[14:42:31] <PJBoy> adding transistors is hard now because of heat or something
[14:42:45] <PJBoy> and adding cores is meh because programmers can't do correct concurrent code
[14:43:20] <LordKalma> AMD will start selling LN2 cooled GPUs
[14:43:21] <PJBoy> no one cares about open sourced hardware because HDLs are awful
[14:43:39] <PJBoy> although
[14:43:48] <LordKalma> no. it's just that programmers thing HDLs are "programming" languages
[14:43:51] <LordKalma> and do shit with them
[14:43:52] <PJBoy> what was that project that writes hardware design with C++?
[14:44:00] *** Joins: foul_owl (~kerry@23.82.193.89)
[14:44:08] <LordKalma> because they think making an FGPA circuit is the same as writing a webpage
[14:44:19] <LordKalma> PJBoy, high-level synthesis
[14:44:20] <PJBoy> nah HDLs are terrible and they have terrible compilers
[14:44:50] <PJBoy> I mean I only ever used verilog in uni
[14:44:57] <PJBoy> but I think I can extrapolate that to all HDLs
[14:45:02] <xkoncek> react.c
[14:45:04] <LordKalma> verilog is considered ahrderish than VHDL
[14:45:08] <LordKalma> I did learn verilog as well
[14:45:11] <LordKalma> *harder-ish
[14:45:45] <PJBoy> also yeah hi level synthesis
[14:45:56] <LordKalma> if you want resources on HDLs https://www.asic-world.com/
[14:46:30] <PJBoy> C++ for hardware design is crazy to me
[14:46:41] <LordKalma> it's not "general" c++
[14:46:43] <LordKalma> but yeah
[14:47:49] <CarloWood> The magic of "assume this function exists"...
[14:47:52] <CarloWood>   for (auto attribute_iter = m_attributes.begin(); attribute_iter != m_attributes.end(); ++attribute_iter)
[14:47:52] <CarloWood>     m_glsl_source_code += attribute_iter->declaration();
[14:48:03] <CarloWood> Now to write `declaration()` :/
[14:48:17] <PJBoy> looks like a bad for-range loop
[14:48:20] <TinoDidriksen> Why not use range-for?
[14:48:42] <CarloWood> Oh, cause I copied it from somewhere where the iterator was needed.
[14:48:50] <CarloWood> I'll change it ;)
[14:48:57] <PJBoy> :)
[14:49:23] <CarloWood>   for (auto&& attribute : m_attributes)
[14:49:23] <CarloWood>     m_glsl_source_code += attribute.declaration();
[14:49:26] <CarloWood> Weew
[14:49:38] <PJBoy> taking your first steps into TDD
[14:49:48] <PJBoy> "write broken code, then fix it"
[14:50:05] <LordKalma> TDD is dumb, don't @ me
[14:50:22] <CarloWood> Whoever wrote the code that allows me to select multiple lines from my editor and then paste it elsewhere ADDING A RANDOM NUMBER OF SPACES after each line, should be fired.
[14:50:29] <PJBoy> I like the idea of TDD
[14:50:49] <LordKalma> yeah, I hate whoe they preach you to write the most basic failing function first
[14:51:01] <LordKalma> "oh let's write int add(int a, int, b) return 1; first
[14:51:04] <LordKalma> for fucks sake
[14:52:48] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:307c:c02a:5304:58a9)
[14:53:03] <Shell> TDD works for some things (i.e. you have an existing function that has a bug, you know what the correct output should be, you write a test then fix the function).
[14:53:21] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[14:53:31] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[14:55:01] <PJBoy> [P1886]
[14:55:02] <npaperbot> P1886R0: [SG14, Direction Group] Error speed benchmarking <https://wg21.link/p1886r0> (by Ben Craig) (2019-10-05) (Related: https://wg21.link/p1886r0/github)
[14:55:04] <PJBoy> whoops
[14:56:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:57:32] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[14:57:42] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[14:58:00] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[15:00:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[15:00:12] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[15:04:09] *** Joins: proller (~p@2a02:6b8:0:40c:d9fc:37d2:5d87:a16)
[15:22:14] <LordKalma>  Abort and x64 exceptions are fast on the happy path. Error code strategies are fast on the sad path.
[15:22:16] <LordKalma> what does this mean?
[15:23:35] <Shell> happy path = "no errors occur", sad path = "an error occurs"
[15:24:16] <LordKalma> so exceptions are fast when they don't happen?
[15:24:47] <Shell> yes.
[15:25:22] <Shell> or rather, code that uses exceptions is faster than code which uses an error code strategy if errors don't happen.
[15:25:29] <Shell> and vice versa.
[15:26:58] <PJBoy> yeah it's what you already know
[15:27:21] <LordKalma> well, tell that to C programmers
[15:27:43] <LordKalma> the amount of times if (api.get_latest_error() != API_SUCCESS)
[15:27:58] <PJBoy> also note the sister paper [P1640]
[15:27:58] <npaperbot> P1640R1: [WG21, Direction Group] Error size benchmarking: Redux <https://wg21.link/p1640r1> (by Ben Craig) (2019-09-29) (Related: https://wg21.link/p1640r1/github)
[15:27:59] <LordKalma> oh I mean api_get_latest_error()
[15:28:32] <LordKalma> exceptions are for actual exceptions, not instead of returning false
[15:28:50] <LordKalma> I think people started to think the user clickign cancel on the file save is an exception
[15:28:54] *** Joins: jokoon (~eio@2a01:e0a:542:e160:5ce7:2d4b:e4e:9632)
[15:28:55] <LordKalma> it's like the raw pointer things
[15:28:59] <LordKalma> people always overshoot features
[15:29:02] <LordKalma> then they learn them
[15:29:04] <Shell> I mean, honestly speaking, if your program's speed is dominated by its error-handling strategy you're in a very weird spot of the industry, imo. :)
[15:30:05] *** Quits: bobb_ (~bobb_@dslb-092-074-238-082.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[15:30:14] <PJBoy> parser would probably fall into that category
[15:30:16] <Shell> (also I'm dealing with some cursed C code right now which basically winds up using setjmp/longjmp for error handling, wtf)
[15:31:03] <PJBoy> and in crypto of course
[15:31:10] <PJBoy> can't let your errors leak timing information
[15:31:47] <Shell> true there
[15:32:13] <LordKalma> std::optional is surprisingly absent from that benchmark
[15:32:36] <ville> LordKalma: wouldn't expect it to be that different from std::expected
[15:32:51] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:32:51] <PJBoy> yeah
[15:32:52] <LordKalma> They used that ibe? Sorry I missed it then
[15:33:14] <PJBoy> expected will be slightly worse for the sad path than optional
[15:33:22] <PJBoy> and slightly better for the happy path
[15:34:13] <PJBoy> doesn't carry any error info though
[15:34:25] <PJBoy> so maybe it could outperform expected
[15:34:38] <PJBoy> but you'd expect the measurements to be close
[15:38:58] *** Joins: angelacrust (~angelacru@122.161.32.177)
[15:40:33] *** Quits: rb (~augh@209.141.39.190) (Ping timeout: 272 seconds)
[15:40:43] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:42:43] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[15:47:13] *** Joins: bobb_ (~bobb_@dslb-092-074-238-082.092.074.pools.vodafone-ip.de)
[15:48:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[15:49:02] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[15:49:10] *** Parts: TheGuestMovie (~TheGuestM@173.231.114.74) ()
[15:49:27] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[15:54:01] *** Joins: markong (~kvirc@213.146.188.203)
[15:56:42] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[15:56:53] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[15:57:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:59:32] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[16:00:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[16:01:26] *** Quits: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 272 seconds)
[16:01:34] *** Joins: Leone (~Leo@108.175.224.215)
[16:01:39] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:13:35] *** Quits: manjaro-user- (~manjaro-u@199-7-159-17.eng.wind.ca) (Quit: Konversation terminated!)
[16:15:26] *** Joins: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse)
[16:33:44] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[16:34:00] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[16:34:17] *** Quits: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:36:32] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:48:27] *** Quits: rajkosto (~rajkosto@93-86-12-136.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[16:51:44] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[16:51:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[16:54:55] <rpav> should have "2s challenges" today .. due of course by 22/2/22 22:22:22.22
[16:57:34] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:00:46] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[17:06:20] <Friithian> the real two's day is 2040-06-02T03:57:02
[17:08:10] <rpav> in binary or something?
[17:11:31] <Friithian> in unix time that is 2222222222
[17:13:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[17:17:24] *** Quits: jokoon (~eio@2a01:e0a:542:e160:5ce7:2d4b:e4e:9632) (Ping timeout: 240 seconds)
[17:18:53] *** flooded is now known as _flood
[17:21:33] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[17:22:29] *** Joins: jokoon (~eio@2a01:e0a:542:e160:51b1:8d75:9236:1e13)
[17:22:48] *** Joins: teepee (~teepee@openscad/teepee)
[17:24:24] *** Quits: angelacrust (~angelacru@122.161.32.177) (Quit: Client closed)
[17:25:57] <LordKalma> I wonder how many computers are still out there running systems with 32 bit time variables
[17:26:41] <LordKalma> the answer is too many and too important
[17:26:53] <LordKalma> but for real, Im curious
[17:27:21] <LordKalma> likewise how many devices broke on the last gps roll over
[17:27:35] *** Quits: jokoon (~eio@2a01:e0a:542:e160:51b1:8d75:9236:1e13) (Quit: Leaving)
[17:27:36] <LordKalma> it was the 2nd or 3td time, wasnt it?
[17:37:07] <Friithian> well M$ until the start of this year stored time in an even worse format‚Ä¶
[17:38:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:39:03] *** lh_cat is now known as lh_mouse
[17:41:57] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[17:42:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:59] *** ChanServ sets mode: +v npaperbot
[17:45:10] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Quit: leaving)
[17:46:43] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[17:47:01] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:47:07] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[17:58:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:01:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[18:07:32] *** Joins: pulse (~pulse@user/pulse)
[18:08:20] *** Joins: Tokamak (~Tokamak@172.58.188.134)
[18:12:21] <thad_the_man> When people describe git as a "directed acyclic graph", do they mean the history tree, or the internal tree of "blobs"/objects/file/directories?
[18:13:07] <PJBoy> the history tree
[18:13:47] <LordKalma> directed acrylic graph sounds like a name for road signage
[18:14:13] <LordKalma> ‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è
[18:14:36] <Friithian> acyclic, not acrylic :P
[18:14:54] <LordKalma> hahha my bad :p
[18:15:11] <Friithian> and I'm ont sure how well acrylic would hold up outside in the elements
[18:20:45] <pulse> directed acrylic graphs are great
[18:20:53] <thad_the_man> So wait. Isn't almost every VC a directed acyclic graph? Except for darcs or mercurial which don't have branches?
[18:22:46] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[18:23:11] <mike18> hi how can i get the Foo and Bar still as tokens in the token iterator? https://wandbox.org/permlink/wL6In2rQfyuwxndf
[18:23:21] <Friithian> well if the graph points is a specific direction and cannot go in a circle then yeah, most VC is directed acyclic graphs
[18:26:38] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Read error: Connection reset by peer)
[18:29:59] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[18:30:04] <mike18> hi how can i get the Foo and Bar still as tokens in the token iterator? https://wandbox.org/permlink/wL6In2rQfyuwxndf
[18:30:05] <rpav> thad_the_man: any tree/list
[18:30:11] <mike18> sorry got disconnected
[18:31:34] <rpav> although a vc being "directed" is maybe not accurate
[18:34:09] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:7799:3815:c396:4ca9:5cba)
[18:34:42] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 272 seconds)
[18:35:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:36:56] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:307c:c02a:5304:58a9) (Remote host closed the connection)
[18:37:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:7799:bd02:d02c:e3df:fcf1) (Ping timeout: 240 seconds)
[18:37:18] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:307c:c02a:5304:58a9)
[18:37:48] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:51:44] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:51:58] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:52:42] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:52:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:54:18] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:55:34] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (Remote host closed the connection)
[18:57:23] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[18:58:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:00:45] *** Joins: hasan_ (~hasan@86.57.106.198)
[19:01:10] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[19:02:08] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[19:03:47] *** Quits: Guest4248 (~hasan@86.57.123.26) (Ping timeout: 252 seconds)
[19:04:47] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:7799:3815:c396:4ca9:5cba) (Remote host closed the connection)
[19:05:30] *** Joins: p-i- (~Ohmu@2403:6200:8978:7799:9041:8dee:7588:a871)
[19:06:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:fde8:44d1:927a:3cf9)
[19:06:32] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:fde8:44d1:927a:3cf9) (Changing host)
[19:06:32] *** Joins: skapata (~Skapata@user/skapata)
[19:09:45] *** Joins: darkbit (~db@136.158.8.67)
[19:12:29] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[19:15:18] *** Quits: darkbit (~db@136.158.8.67) (Quit: WeeChat 3.4)
[19:15:35] *** Joins: darkbit (~db@136.158.8.67)
[19:15:51] *** Quits: MatSharrow (~matthew@56.93.9.51.dyn.plus.net) (Read error: Connection reset by peer)
[19:29:21] *** Joins: xkuru (~xkuru@user/xkuru)
[19:37:09] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[19:41:04] *** Joins: MatSharrow (~matthew@56.93.9.51.dyn.plus.net)
[19:46:42] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[19:46:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[19:52:56] *** Quits: bobb_ (~bobb_@dslb-092-074-238-082.092.074.pools.vodafone-ip.de) (Quit: Client closed)
[19:58:59] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:59:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:01:55] *** Joins: LordKalma (~LordKalma@server.portaldoradioamador.pt)
[20:02:03] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[20:02:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[20:02:17] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[20:07:25] <LordKalma> testing testing
[20:07:46] <rpav> *screee*
[20:08:11] <rpav> hrm, could really really use a better looping mechanism in C++
[20:08:17] <rpav> basically i want CL's LOOP
[20:08:38] <LordKalma> now using TheLounge instead of hexchat, that dirty old thing
[20:08:49] *** Joins: magla (~gelignite@55d4d6c3.access.ecotel.net)
[20:08:55] <rpav> i've never heard of either one
[20:09:06] <LordKalma> now I can ‚ú®‚ú®‚ú®‚ú®‚ú® in colour
[20:09:19] <LordKalma> rpav TheLounge is a irc webclient you can self-host
[20:09:49] <rpav> i'm not sure why one would
[20:10:51] <rpav> you could probably hack what i want with some kind of zip iteration over a broader set of things, but it would likely involve a lot of lambda ugliness
[20:11:18] <LordKalma> what's CL's LOOP?
[20:11:22] <LordKalma> what special about it?
[20:13:29] <rpav> mostly you can do a lot of different things all in one loop, like .. iterate over two things then also break if there's some condition, then do some thing after the end, etc
[20:15:31] <LordKalma> in python you can `else` for-loops
[20:16:02] <LordKalma> https://book.pythontips.com/en/latest/for_-_else.html#else-clause
[20:16:08] <LordKalma> that run if there isn't a break
[20:16:10] <rpav> "loop over all the keys in a hash table, and a list of values, and keep a counter, while collecting the value of some expression into a list that you return at the end)
[20:16:12] <rpav> err "
[20:18:26] <rpav> https://lispcookbook.github.io/cl-cookbook/iteration.html#looping-over-two-lists-in-parallel
[20:20:11] <rpav> also just like, _returning a value_ makes it useful, but
[20:20:38] *** Joins: rwb (~augh@209.141.39.190)
[20:20:51] <rpav> but right now i want to find the first point in a series of edges (in reverse) that isn't on a line, and it's ugly
[20:22:14] <rpav> (even _with_ additional / non-std tools for range for)
[20:26:29] *** Quits: arch-angel (~quassel@user/arch-angel) (Ping timeout: 250 seconds)
[20:26:34] <Haohmaru> LordKalma what color? it's +c in here
[20:26:34] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[20:26:57] <LordKalma> what color what?
[20:27:07] <LordKalma> ahhh you put background color in the message
[20:27:21] <Haohmaru> eh?
[20:27:32] <LordKalma> https://i.gyazo.com/7ba0caf6c8ec067016eb22b564bb7b0a.png
[20:27:35] <Haohmaru> no colors here
[20:27:45] <LordKalma> ah nevermind
[20:27:48] <LordKalma> what color what then?
[20:27:56] <Haohmaru> [18:39] <LordKalma> now I can ‚ú®‚ú®‚ú®‚ú®‚ú® in colour
[20:28:21] <LordKalma> ah I meant the emojis, they are rendered in monocolor fonts in hexchat
[20:28:31] <Haohmaru> eww, crapmojis
[20:28:51] * Haohmaru bleaches his clipboard buffer
[20:29:14] <xkoncek> at one point i wanted to store a label from inside a function as a void* pointer elsewhere
[20:29:20] <xkoncek> a goto label
[20:30:14] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:7799:3815:c396:4ca9:5cba)
[20:31:30] <PJBoy> mike18, you can only iterate over either captures or non captures
[20:33:18] <PJBoy> or rather, the shortest prefix containing all captures or the longest suffix containing no captures
[20:33:26] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:33:40] <Haohmaru> wait LordKalma, is that a web client?!
[20:33:48] *** Quits: p-i- (~Ohmu@2403:6200:8978:7799:9041:8dee:7588:a871) (Ping timeout: 240 seconds)
[20:36:08] <LordKalma> yap
[20:36:24] <LordKalma> https://thelounge.chat/
[20:37:19] <Alipha> mike18: it's a little complicated, but: https://www.smork.info/blog/2010/01/26/entry100126-131539.html
[20:37:26] <Haohmaru> as much as i'm not happy with hexchat, that's a downgrade
[20:37:40] <LordKalma> it works
[20:37:48] <Haohmaru> yeah, sure it'll work
[20:38:10] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 260 seconds)
[20:38:13] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:38:16] <xkoncek> i use my faculty's lounge instance
[20:38:19] <Haohmaru> div div div span span
[20:38:29] <xkoncek> even tho i finished with my studies recently
[20:39:33] *** Joins: darkbit (~db@136.158.8.67)
[20:39:53] <LordKalma> honestly it works great
[20:40:11] <Alipha> CarloWood: for (auto&& attribute : m_attributes) m_glsl_source_code += attribute.declaration();  // c'mon, use std::accumulate ;-)
[20:41:23] <PJBoy> accumulate doesn't use operator+= though
[20:41:29] <PJBoy> so it could well be slower
[20:41:43] <PJBoy> if it works at all
[20:41:44] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[20:41:51] *** Joins: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[20:41:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[20:43:27] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895)
[20:45:11] <PJBoy> for example
[20:45:17] <PJBoy> { string s; for (auto num : nums) s += num; } vector<string_view> nums{"1", "2", "3", "4"};
[20:45:18] <geordi>  
[20:45:22] <PJBoy> { string s = accumulate(begin(nums), end(nums), string()); } vector<string_view> nums{"1", "2", "3", "4"};
[20:45:22] <geordi> error: no match for 'operator+' in 'move<string&>(__init) + __first._Safe_iterator<vector<basic_string_view<char>>::iterator, vector<basic_string_view<char> >, random_access_iterator_tag>::<anonymous>._Safe_iterator<vector<basic_string_view<char>>::iterator, vector<basic_string_view<char> >, bidirectional_iterator_tag>::<anonymous>._Safe_iterator<vector<basic_string_view<char>>::iterator, vector<basic_string_view<char> >, forward_iterator_tag>::o
[20:45:43] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[20:45:48] <sprout> this is the way
[20:45:53] *** Joins: szymon (~ugh@37.120.211.198)
[20:45:57] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[20:46:36] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:e8ba:13ba:f86b:c895) (Client Quit)
[20:47:27] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:47:48] <rpav> muahaha .. so one can embed assignments deeply in statements
[20:48:34] *** Joins: szymon_ (~ugh@37.120.211.204)
[20:48:48] <rpav> if(is_equal(T(..., p = e[0]))) break;
[20:50:10] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[20:50:36] <PJBoy> geordi -w { f(); } int x; void f(int x = x = x = x = x = x) {}
[20:50:37] <geordi>  
[20:51:21] <rpav> is that actually evaluated
[20:51:30] *** Quits: szymon_ (~ugh@37.120.211.204) (Client Quit)
[20:51:40] *** Quits: szymon (~ugh@37.120.211.198) (Ping timeout: 256 seconds)
[20:51:41] <PJBoy> yeah probably
[20:51:42] <xkoncek> {f();} void* f() {return reinterpret_cast<void*>(&f);}
[20:51:43] <geordi>  
[20:52:04] *** Joins: malloy (~jimery@116.30.220.175)
[20:52:12] <PJBoy> geordi -w { f(); } tracked::B x; void f(tracked::B x = x = x = x = x = x) { SHOW(x); }
[20:52:13] <geordi> B0* B0=B0 B0=B0 B0=B0 B0=B0 B1*(B0) x = B1 B1~ B0~
[20:52:23] <rpav> there's a win for ascii art
[20:56:22] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:58:06] *** Joins: paul424 (~tom@ip-5-172-233-54.multi.internet.cyfrowypolsat.pl)
[20:59:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:59:36] <LordKalma> `f(tracked::B x = x = x = x = x = x) ` WTF IS THIS
[21:00:00] <Friithian> insanity, it looks like
[21:01:01] <rpav> probably `f(T v = <default-expression>)` where the expression is `v = v = ...` though it seems dubious you can use the variable in its own initializer
[21:01:09] *** Joins: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it)
[21:01:20] <LordKalma> I didn't know you could use an expression there
[21:01:32] <LordKalma> oh wait, nevermind, I get it
[21:01:41] <Alipha> rpav: PJBoy didn't. x there is a global variable.
[21:01:41] <rpav> { int x = x = x; }
[21:01:42] <geordi> warning: 'x' is used uninitialized
[21:01:50] <rpav> Alipha: ph
[21:01:53] <rpav> "oh"
[21:02:16] <rpav> ok, that makes sense then, though the above case makes less sense
[21:02:27] <Alipha> did geordi always have -Wshadow on? i thought it didn't before
[21:03:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:04:54] <PJBoy> yeah
[21:04:57] <PJBoy> it's real annoying
[21:05:24] <PJBoy> it means my `struct S { T t; S(T t) : t(t) {} };` type ctors generate a warning
[21:06:08] <PJBoy> also yeah default arguments can't refer to function parameters
[21:06:52] <rpav> probably you should avoid t(t) .. i try to use t(t_) but definitely don't always ;/
[21:06:58] <PJBoy> `int x = x = x;` looks unconditionally bad, but `int x = S(x);` could potentially make sense
[21:07:15] <rpav> PJBoy: i don't see how
[21:07:16] <PJBoy> if S(int& x) merely keeps the reference around
[21:07:20] <rpav> ah
[21:07:27] <rpav> probably still bad
[21:07:35] <PJBoy> yeah I've got no real world usecase for that
[21:08:16] <rpav> it woud be nice to have a lot richer init-and-use syntax, but
[21:09:06] <PJBoy> maybe something like `T t = register(t);`
[21:09:09] <rpav> these days i find myself making a lot of `const auto vX = ...` intermediate values anwyay so i dunno
[21:09:29] <PJBoy> where t is registered to be notified for messages or something
[21:09:36] <rpav> just not with register ;/
[21:10:08] <PJBoy> I very rarely make const locals anymore
[21:10:19] <rpav> it depends on what you're doing highly
[21:10:30] <PJBoy> for sure
[21:10:55] <rpav> the only real place i start using that kind of code is doing a lot of logical rules / math stuff with intermediate values
[21:11:10] <rpav> i really wish there were _better_ .. system/syntax/something .. for such
[21:14:11] <PJBoy> { array<int, 4> calcs = {1, calcs[0] + 1, calcs[1] * 2, calcs[2] * calcs[2]}; SHOW(calcs.back()); }
[21:14:12] <geordi> calcs.back() = 16
[21:14:54] <PJBoy> that's well defined too
[21:15:45] <PJBoy> probably
[21:17:23] <Alipha> I'm skeptical
[21:17:36] <Alipha> Oh
[21:18:03] <Alipha> I'm less skeptical
[21:18:22] <PJBoy> ahaha
[21:18:28] <PJBoy> that's exactly what I went through
[21:32:43] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[21:32:57] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[21:39:58] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[21:42:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:00] *** ChanServ sets mode: +v npaperbot
[21:55:21] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 245 seconds)
[21:55:25] *** Joins: skapata (~Skapata@user/skapata)
[21:58:16] *** Quits: proller (~p@2a02:6b8:0:40c:d9fc:37d2:5d87:a16) (Ping timeout: 245 seconds)
[22:00:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:02:08] *** Quits: magla (~gelignite@55d4d6c3.access.ecotel.net) (Read error: Connection reset by peer)
[22:02:27] *** Joins: magla (~gelignite@55d4d6c3.access.ecotel.net)
[22:03:16] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[22:17:33] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:23:11] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:307c:c02a:5304:58a9) (Quit: Quit)
[22:35:41] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[22:35:57] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[22:36:22] *** Parts: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it) ()
[22:36:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f9ec:3f5d:e36a:777a) (Ping timeout: 240 seconds)
[22:38:03] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9801:96f6:3a13:6949)
[22:38:48] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Read error: Connection reset by peer)
[22:42:41] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9801:96f6:3a13:6949) (Ping timeout: 252 seconds)
[22:48:34] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[22:49:42] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[22:50:00] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[22:51:14] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:2587:291:d923:f313)
[22:58:12] *** Joins: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net)
[23:00:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:04:16] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:06:48] <LordKalma> what API would you expect from an FFT?
[23:07:20] <kalven> bool doit();
[23:07:40] <LordKalma> yeah, I was thinking just a constructor and operator()
[23:09:41] *** Joins: krishnac (krishnac@c-73-189-104-236.hsd1.ca.comcast.net)
[23:09:53] <imMute> why not a free function?
[23:11:06] <LordKalma> pre-computed factors
[23:15:48] <imMute> ah, yeah, then operator() is the direction I'd go
[23:16:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[23:17:52] <LordKalma> how do you use  __declspec( dllexport ) with classes?
[23:17:55] <LordKalma> https://docs.microsoft.com/en-us/cpp/cpp/using-dllimport-and-dllexport-in-cpp-classes?view=msvc-170
[23:17:59] <LordKalma> says just add to the class
[23:18:08] <LordKalma> but it only shows inline declarations of the methods
[23:19:48] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:20:25] *** Joins: cq-work (~cq-work@user/cq-work)
[23:24:55] *** Quits: paul424 (~tom@ip-5-172-233-54.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[23:24:57] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[23:26:18] <antto> don't you need a float/double buffer?
[23:26:38] <LordKalma> those would be operator() arguments
[23:26:40] <antto> and what's the point of that bool
[23:26:52] <LordKalma> ah that's for k
[23:27:13] <antto> imagine if your fft returned false
[23:28:43] * antto turns nolyc 13 times clocktercountwise
[23:28:44] <antto> !rq
[23:28:44] <nolyc> antto: <mort> I hate that the best solution to this problem is to use vector<bool>
[23:29:00] <PJBoy> LordKalma, the declspec is applied to the class declaration rather than its methods, right?
[23:29:02] <mort> still do
[23:29:13] <PJBoy> so its methods being defined inline has no bearing
[23:29:21] <LordKalma> PJBoy you can do either, apparently
[23:30:15] <PJBoy> yeah apparently so
[23:31:26] <LordKalma> I wonder if std::span would be efficient enough for a fft algorithm
[23:31:43] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[23:31:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[23:32:19] *** Quits: krishnac (krishnac@c-73-189-104-236.hsd1.ca.comcast.net) (Remote host closed the connection)
[23:35:12] <PJBoy> as opposed to?
[23:35:30] <LordKalma> pointer to beginning of data
[23:35:52] <PJBoy> if nothing else, you can get the span's .data()
[23:36:09] <PJBoy> so it's just a question of if paying for that size information matters
[23:36:21] <PJBoy> unless it's a compile time size
[23:36:36] <LordKalma> the constructor ough to take size before hand because of the precomputed factors
[23:36:36] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:37:38] <PJBoy> anything you're expecting would be less efficient with span?
[23:37:57] <LordKalma> I'm just asking if there is some overhead if you use operator[] on them
[23:38:05] <PJBoy> ah, nah nothing like that
[23:38:09] <LordKalma> cool cool
[23:38:27] <PJBoy> I mean maybe in debug mode
[23:39:09] <PJBoy> which I'm sure you'd agree can be a good thing
[23:39:21] <LordKalma> yeahm, for sure
[23:39:39] <PJBoy> but span demands contiguous data, so it doesn't need to account for proxies or any non sense like that
[23:39:41] <LordKalma> I'm imagining asserting span.size==size_ property from the constructor
[23:39:46] <LordKalma> okay, cool
[23:39:50] <LordKalma> so it's efficent
[23:40:58] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:15ea:f475:c9df:f1a) (Remote host closed the connection)
[23:41:41] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[23:41:43] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:97d2:fe15:426:6741)
[23:47:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[23:48:04] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:48:50] *** Quits: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[23:49:40] <LordKalma> hum
[23:49:44] <LordKalma> span does have a problem
[23:50:04] <LordKalma> it has a second template argument, the Extent
[23:50:12] *** Joins: skapata (~Skapata@user/skapata)
[23:50:21] <LordKalma> so you basically have to template every fuction?!
[23:52:06] <LordKalma> or call a copy constructor, I guess
[23:54:53] <PJBoy> it has a default argument
[23:54:58] <LordKalma> yes
[23:55:18] <LordKalma> I assume statically sized ones are convertible to dynamic extent
[23:55:22] <PJBoy> yeah
[23:55:44] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[23:56:05] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[23:56:18] <PJBoy> { vector v{1, 2, 3}, v2{1, 2, 3, 4}; span s(v); s = span(v2); span<int, 3> ss(v); s = ss; }
[23:56:19] <geordi>  
[23:56:25] <PJBoy> all that good stuff
[23:56:44] <LordKalma> now, how overheady is it to call that constructor of std::span? :p
[23:56:59] <PJBoy> copies the pointer and size
[23:57:26] <antto> "overheady"
[23:57:29] <ville> LordKalma: javascript-slow
[23:57:31] <antto> did you just made that word up
[23:57:33] <PJBoy> I guess for converting from static size to dynamic size doesn't even need to "copy" the size
[23:57:38] <LordKalma> yes, I did
[23:57:59] <LordKalma> PJBoy according to cppref
[23:57:59] <LordKalma> If a span has dynamic extent a typical implementation holds two members: a pointer to T and a size. A span with static extent may have only one member: a pointer to T.
[23:58:08] <PJBoy> yeah
[23:58:36] <PJBoy> so for static -> dynamic, it will need to set the dynamic span's size directly
[23:58:37] <LordKalma> ville, I don't think the question is that bad, is it?
[23:58:57] <PJBoy> "it" being span's ctor
[23:59:28] <ville> LordKalma: heh suppose so
[23:59:53] <LordKalma> it's healthy to discuss the pros and cons of bleeding edge approaches
