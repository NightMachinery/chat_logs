[00:04:23] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 246 seconds)
[00:13:07] *** Quits: hueso_ (~root@user/hueso) (Ping timeout: 256 seconds)
[00:15:30] *** Joins: avpx (~nick@ec2-54-214-223-1.us-west-2.compute.amazonaws.com)
[00:16:15] *** Joins: hueso (~root@user/hueso)
[00:16:36] *** Joins: tfeb (~tfb@88.98.95.237)
[00:17:47] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[00:18:09] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[00:18:23] *** Quits: Psybur (~Psybur@2600:1003:b1a9:25a8:9157:2734:89e6:c88e) (Ping timeout: 260 seconds)
[00:18:48] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[00:19:43] *** Joins: Psybur (~Psybur@137.sub-97-47-71.myvzw.com)
[00:19:44] *** Quits: Graham31415 (~Graham@user/Graham31415) (Read error: Connection reset by peer)
[00:26:34] *** Joins: frostbyte_ (~uid@2001:bc8:2117:100::)
[00:26:36] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[00:26:51] *** Joins: Graham31415 (~Graham@user/Graham31415)
[00:28:13] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[00:28:32] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:30:07] <frostbyte_> (completey new to haskell) I'm surprised to find that `runhaskell helloworld.hs > /dev/full` is correctly reporting an error: "helloworld.hs: <stdout>: hPutChar: resource exhausted (No space left on device)", but the compiled version of helloworld is not. Does anyone know why?
[00:30:53] <frostbyte_> ghc --version: "The Glorious Glasgow Haskell Compilation System, version 9.2.1"
[00:31:13] *** Quits: Psybur (~Psybur@137.sub-97-47-71.myvzw.com) (Ping timeout: 260 seconds)
[00:31:58] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:32:07] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-e4f8-bd3f-9136-d580.res6.spectrum.com)
[00:33:32] *** Quits: mvk (~mvk@2607:fea8:5ce3:8500::3800) (Ping timeout: 260 seconds)
[00:33:38] *** Joins: Psybur (~Psybur@2600:1003:b103:720d:4903:f699:2ddf:4e24)
[00:35:04] <frostbyte_> helloworld.hs: 'main = putStrLn "Hello, world!"'
[00:36:12] *** Joins: pavonia (~user@user/siracusa)
[00:38:53] *** Joins: vicfred (~vicfred@user/vicfred)
[00:40:33] <avpx> frostbyte_: What platform are you on? I wasn't able to repro on Windows/MinGW and Mac doesn't have /dev/full
[00:40:45] <frostbyte_> Debian Linux
[00:41:28] <avpx> It seems surprising to me too
[00:41:47] <hpc> frostbyte_: i remember reading about that a while ago, a bunch of languages have this issue
[00:42:22] <hpc> they just ignore the return status of the syscall
[00:42:36] *** Parts: jtm (~jtm@user/jtm) (Leaving)
[00:42:45] <frostbyte_> Indeed. It was seeing that article that led me to try. I wanted it to not be true, as one of the things appealing to me about haskell is correctness.
[00:43:14] *** Joins: mvk (~mvk@2607:fea8:5ce3:8500::3800)
[00:43:16] *** Quits: Graham31415 (~Graham@user/Graham31415) (Read error: Connection reset by peer)
[00:43:25] <frostbyte_> I'm particularly surprised that there's a difference between the two execution methods.
[00:43:41] <frostbyte_> Rather than both go unreported.
[00:43:56] *** Joins: Graham31415 (~Graham@user/Graham31415)
[00:43:58] <hpc> there's probably some generic syscall wrapper in the interpreter maybe?
[00:44:03] * hpc isn't a ghc dev
[00:44:48] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[00:44:52] <frostbyte_> Does `runhaskell` use ghci?
[00:45:00] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[00:45:08] <Rembane> It uses the interpreter rather than the compiler.
[00:45:09] <hpc> no, but they both use the same underlying bytecode stuff
[00:45:17] <frostbyte_> Right.
[00:45:53] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:47:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[00:48:39] *** Lord_of_Life_ is now known as Lord_of_Life
[00:50:53] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:51:31] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[00:52:56] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:54:28] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[00:54:52] *** Joins: jgeerds (~jgeerds@d5364b87.access.ecotel.net)
[00:55:51] *** Joins: kawen (~quassel@static.208.191.216.95.clients.your-server.de)
[00:56:11] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[00:56:25] <geekosaur> write(1, "Hello, world!\n", 14)         = -1 ENOSPC (No space left on device)
[00:56:35] <frostbyte_> Why does the filter in the following code "stop the laziness"? That is, it will no longer read and write a line at-a-time.
[00:56:38] <frostbyte_> main = mapM_ putStrLn =<< filterM doesDirectoryExist =<< lines <$> getContents
[00:56:53] <frostbyte_> geekosaur: Yes, I saw that too.
[00:58:26] <frostbyte_> So, clearly, the return value / error is being ignored. I'm surprised that it is; doubly surprised that it's not the case when using `runhaskell`.
[00:59:09] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:00:23] *** Quits: gamara (~gamara@2607:fea8:1e5f:8df0:b897:10fa:588b:45bc) (Quit: Client closed)
[01:00:28] <geekosaur> actually I'm not
[01:00:36] <frostbyte_> Why so?
[01:00:48] <geekosaur> runhaskell will be in line at a time mode and the output is flushed at the newline, which causes the error to be caught
[01:01:51] <geekosaur> the compiled one will be in block mode because output is not a terminal. this means the Handle isn't flushed and closed until the RTS is doing cleanup post-execution; it therefore has nowhere to report the error to
[01:02:26] <geekosaur> thsi will as noted be a common probem. you need to switch buffering mode to enable the program to catch it
[01:02:37] <Rembane> So... what happens if the output mode is changed? Will both interpreted and compiled code behave the same?
[01:02:42] *** Joins: zaquest (~notzaques@5.130.79.72)
[01:03:30] *** Joins: acidjnk (~acidjnk@p200300d0c7049f70498c262e6d47c9a7.dip0.t-ipconnect.de)
[01:04:37] *** Joins: bahamas (~lucian@84.232.140.158)
[01:04:38] <frostbyte_> That's not really an answer because the error isn't even visible in the program's exit status.
[01:05:26] <geekosaur> it should. sadly stdbuf doesn't work on Haskell programs so you have to change the source
[01:05:29] <frostbyte_> Which I think suggests more that the error is completely ignored and unhandled rather than simply lacking somewhere to report it.
[01:06:39] <geekosaur> skkukuk Z$ ./hello > /dev/full                               
[01:06:39] <geekosaur> hello: <stdout>: commitBuffer: resource exhausted (No space left on device)
[01:06:39] <geekosaur> zsh: exit 1     ./hello > /dev/full
[01:07:02] <frostbyte_> What have you done differently there?
[01:07:13] <geekosaur> import System.IO
[01:07:13] <geekosaur> main = hSetBuffering stdout LineBuffering >> putStrLn "Hello, world!"
[01:07:45] <geekosaur> the problem is, hFlush throws an exception. but during RTS cleanup exception handling doesn't work
[01:07:57] <geekosaur> it's already been torn down
[01:08:35] <geekosaur> if I force the exception to be thrown during normal execution then it is thrown as usual and the RTS catches it because main doens't
[01:09:00] *** Quits: Psybur (~Psybur@2600:1003:b103:720d:4903:f699:2ddf:4e24) (Ping timeout: 240 seconds)
[01:09:24] *** Joins: Psybur (~Psybur@2600:1003:b103:720d:4903:f699:2ddf:4e24)
[01:09:55] <geekosaur> I am not sure this is fixable: if exceptions were sent to an already closed Handle then that would just throw another exception inside the exception handler
[01:10:13] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[01:10:18] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 260 seconds)
[01:11:18] <frostbyte_> Perhaps, but surely the error could still surface without outputting error messages, such as the exit status.
[01:11:24] <geekosaur> which is the general problem with trying to do exception/error handling during RTS cleanup in any language
[01:12:51] <frostbyte_> Based on what you've said, are we able to manually flush and create the error without fiddling the linebuffering?
[01:13:06] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 272 seconds)
[01:13:26] <geekosaur> mm, you'd have to take that one up with the ghc folks since the RTS is their baby. https://gitlab.haskell.org/ghc/ghc/-/issues/new
[01:14:21] <geekosaur> skkukuk Z$ ./hello > /dev/full
[01:14:22] <geekosaur> hello: <stdout>: hFlush: resource exhausted (No space left on device)
[01:14:22] <geekosaur> zsh: exit 1     ./hello > /dev/full
[01:14:22] <geekosaur> skkukuk Z$ cat hello.hs
[01:14:22] <geekosaur> import System.IO
[01:14:22] <geekosaur> main = putStrLn "Hello, world!" >> hFlush stdout
[01:14:43] <frostbyte_> Right. Good.
[01:15:07] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[01:15:13] *** Quits: odnes_ (~odnes@5-203-146-18.pat.nym.cosmote.net) (Quit: Leaving)
[01:16:08] *** Quits: Psybur (~Psybur@2600:1003:b103:720d:4903:f699:2ddf:4e24) (Ping timeout: 260 seconds)
[01:16:32] <geekosaur> come tothink of it, exitFailed is also implemented as an exception, so this may be difficult to fix
[01:17:48] <frostbyte_> Of course I know nothing of the internals but I don't see why, really. Shouldn't flushing and checking it's success be part of cleaning up anyway?
[01:18:14] *** Quits: Graham31415 (~Graham@user/Graham31415) (Ping timeout: 246 seconds)
[01:18:36] <frostbyte_> It's just quite sad for me because it undermines what was haskell's main appeal for me.
[01:18:48] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[01:19:21] <geekosaur> I think if you ever let a filehandle be autoclosed, you're begging to lose any associated errors. be explicit if you care
[01:19:26] <geekosaur> in any language
[01:20:07] *** Joins: Graham31415 (~Graham@user/Graham31415)
[01:20:45] *** Joins: BlackboardN (~nathan@user/BlackboardN)
[01:20:54] <frostbyte_> Although that's true enough, I don't think that should be the case for high level languages, particularly with stdout being something one rarely explicitly opens / closes.
[01:21:17] <geekosaur> this does raise the question of what happens if a Handle with a pending error condition is gc-ed, but it'd take a more involved program to check that
[01:21:41] <frostbyte_> Interesting.
[01:22:01] <geekosaur> because again I'm not sure it's safe to throw an exception in the middle of a gc
[01:25:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[01:27:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:27:49] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[01:31:50] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[01:32:38] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[01:35:11] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[01:37:01] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:37:59] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[01:38:33] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:38:35] *** Quits: Graham31415 (~Graham@user/Graham31415) (Read error: Connection reset by peer)
[01:39:01] *** Joins: Graham31415 (~Graham@user/Graham31415)
[01:39:43] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[01:40:03] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[01:41:28] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[01:42:12] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[01:43:24] *** Quits: Graham31415 (~Graham@user/Graham31415) (Ping timeout: 240 seconds)
[01:44:26] *** Joins: Graham31415 (~Graham@user/Graham31415)
[01:44:42] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[01:46:57] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Quit: WeeChat 3.4)
[01:50:43] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[01:51:46] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[01:55:35] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[01:56:27] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[01:56:33] *** Quits: mixfix41 (~homefame@user/mixfix41) (Quit: cya bbiab!)
[01:57:59] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:00:28] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 260 seconds)
[02:01:14] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 272 seconds)
[02:01:42] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[02:03:52] *** Quits: Graham31415 (~Graham@user/Graham31415) (Read error: Connection reset by peer)
[02:06:32] *** Joins: Psybur (~Psybur@2600:1003:b103:720d:e963:cba8:6a5a:3543)
[02:07:56] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:12:50] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 246 seconds)
[02:13:03] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[02:13:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:14:28] *** Quits: BlackboardN (~nathan@user/BlackboardN) (Ping timeout: 260 seconds)
[02:15:02] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[02:18:30] *** Joins: BlackboardN (~nathan@user/BlackboardN)
[02:19:10] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[02:19:29] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 246 seconds)
[02:19:36] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 272 seconds)
[02:20:29] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:20:41] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:20:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:27:05] *** Quits: Psybur (~Psybur@2600:1003:b103:720d:e963:cba8:6a5a:3543) (Ping timeout: 252 seconds)
[02:29:06] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[02:31:05] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:37:15] *** Quits: BlackboardN (~nathan@user/BlackboardN) (Ping timeout: 260 seconds)
[02:39:08] *** Joins: asthasr (~asthasr@208.80.78.154)
[02:41:40] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[02:43:51] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[02:44:08] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[02:44:09] *** Joins: zaquest (~notzaques@5.130.79.72)
[02:46:17] *** Joins: machinedgod (~machinedg@24.105.81.50)
[02:48:18] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[02:49:57] *** Joins: kvakil (6f76c3db2e@2604:bf00:561:2000::40a)
[02:57:00] *** Quits: mvk (~mvk@2607:fea8:5ce3:8500::3800) (Ping timeout: 240 seconds)
[02:58:13] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 260 seconds)
[02:59:58] *** Quits: liz (~liz@cpc84585-newc17-2-0-cust60.16-2.cable.virginm.net) (Ping timeout: 260 seconds)
[03:00:05] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 246 seconds)
[03:02:54] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[03:03:38] *** Joins: cyphase (~cyphase@user/cyphase)
[03:07:39] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[03:09:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Read error: Connection reset by peer)
[03:09:44] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:13:18] *** Quits: acidjnk (~acidjnk@p200300d0c7049f70498c262e6d47c9a7.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[03:14:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[03:28:26] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[03:29:51] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[03:30:14] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[03:37:14] *** Joins: alp (~alp@user/alp)
[03:37:17] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[03:44:53] *** Quits: zyklotomic (~ethan@res388d-128-61-92-112.res.gatech.edu) (Ping timeout: 246 seconds)
[03:45:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[03:46:55] *** Joins: zyklotomic (~ethan@res380d-128-61-87-190.res.gatech.edu)
[03:47:13] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 260 seconds)
[03:55:14] <geekosaur> frostbyte_, https://gitlab.haskell.org/ghc/ghc/-/issues/21336
[03:56:29] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[04:00:26] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 260 seconds)
[04:02:04] *** Joins: joo-_ (~joo-_@80-62-116-70-mobile.dk.customer.tdc.net)
[04:02:04] *** Quits: joo-_ (~joo-_@80-62-116-70-mobile.dk.customer.tdc.net) (Changing host)
[04:02:04] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[04:02:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[04:03:35] *** Joins: hololeap (~hololeap@user/hololeap)
[04:07:01] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[04:12:25] *** Joins: cyphase (~cyphase@user/cyphase)
[04:16:06] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[04:16:35] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[04:17:20] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[04:17:33] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 260 seconds)
[04:17:56] *** Joins: vicfred (~vicfred@user/vicfred)
[04:20:19] *** Joins: hololeap (~hololeap@user/hololeap)
[04:21:42] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[04:23:12] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Quit: leaving)
[04:23:44] *** Quits: jgeerds (~jgeerds@d5364b87.access.ecotel.net) (Ping timeout: 272 seconds)
[04:24:50] <geekosaur> btw, about your earlier question about `filterM`: iirc IO's >>= is strict so `filterM` is also strict. I may be misremembering the exact place where strictness sneaks in, though
[04:25:03] <geekosaur> @src filterM
[04:25:03] <lambdabot> Source not found. Are you on drugs?
[04:25:09] <geekosaur> bleargh
[04:26:19] <geekosaur> filterM p        = foldr (\ x -> liftA2 (\ flg -> if flg then (x:) else id) (p x)) (pure [])
[04:26:28] <geekosaur> it's Applicative not Monad these days, whoops
[04:27:01] <geekosaur> anyway yes, I am pretty sure that's strict
[04:27:07] <geekosaur> at least in IO
[04:29:13] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[04:29:28] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[04:37:03] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[04:37:11] *** Quits: zyklotomic (~ethan@res380d-128-61-87-190.res.gatech.edu) (Ping timeout: 260 seconds)
[04:39:14] *** Joins: zyklotomic (~ethan@r4-128-61-92-94.res.gatech.edu)
[04:40:49] *** Joins: vysn (~vysn@user/vysn)
[04:44:47] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[04:47:03] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[04:47:23] *** Joins: alp (~alp@user/alp)
[04:55:48] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[04:56:05] *** Joins: ellie (~ellie@user/ellie)
[04:57:28] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.202)
[04:58:55] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[05:01:53] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.202) (Ping timeout: 260 seconds)
[05:03:16] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 245 seconds)
[05:04:16] *** Quits: nsaritzky (~nsaritzky@c-71-231-59-104.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[05:05:58] *** Quits: benin (~benin@183.82.204.110) (Ping timeout: 260 seconds)
[05:13:00] <monochrom> liftA2 for a lot of applicatives kill short circuiting.
[05:13:23] <monochrom> Example: Maybe:
[05:13:35] *** Quits: gingeh (~gingeh@2001:8003:1c2a:b600:79c4:94cc:218e:5ea5) (Quit: Leaving)
[05:13:37] <monochrom> > liftA2 (&&) Nothing undefined
[05:13:38] <lambdabot>  Nothing
[05:13:46] <monochrom> Err oops wrong inputs.
[05:13:54] <monochrom> > liftA2 (&&) (Just False) undefined
[05:13:55] <lambdabot>  *Exception: Prelude.undefined
[05:14:14] <monochrom> does not give && a chance to short-circuit.
[05:16:23] <hpc> > liftA2 (&&) (Just False) (Just undefined)
[05:16:24] <lambdabot>  Just False
[05:16:36] <monochrom> Likewise, for IO, liftA2 op foo bar executes both foo and bar unconditionally. op does not have a say on this.
[05:16:38] <hpc> it's strict in the effect, and inherits the function's strictness on the type variable
[05:16:45] <monochrom> Yeah.
[05:17:16] <monochrom> But perhaps you can mitigate by liftA2 op (unsafeInterleaveIO foo) (unsafeInterleaveIO bar) >:)
[05:17:18] <hpc> (characterizing laziness can be a wild ride sometimes)
[05:18:54] <abastro[m]> > (&&) <$> pure False <*> pure undefined :: IO ()
[05:18:55] <lambdabot>  error:
[05:18:55] <lambdabot>      • Couldn't match type ‘Bool’ with ‘()’
[05:18:56] <lambdabot>        Expected type: IO ()
[05:19:27] <abastro[m]> > (&&) <$> pure @IO False <*> pure undefined
[05:19:28] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[05:19:29] <lambdabot>  error:
[05:19:29] <lambdabot>      Pattern syntax in expression context: pure@IO
[05:19:29] <lambdabot>      Did you mean to enable TypeApplications?
[05:19:42] <monochrom> liftA2 op foo bar is required to be equiv to foo >>= \f -> bar >>= \b -> pure (op f b).
[05:19:56] <abastro[m]> Oh duh I thought TypeApplications was enabled
[05:19:57] <monochrom> Right there you see how op doesn't matter until it's too late.
[05:20:30] <abastro[m]> > (&&) <$> pure False <*> pure undefined :: IO Bool
[05:20:31] <lambdabot>  <IO Bool>
[05:20:43] <monochrom> Unless the monad is like State.Lazy or Tardis.
[05:20:50] <abastro[m]> So it is lazy :>
[05:20:55] *** Joins: notzmv (~zmv@user/notzmv)
[05:39:31] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[05:41:04] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[05:45:05] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[05:46:42] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[05:46:55] *** Joins: img (~img@user/img)
[05:48:30] *** Joins: neurocyte86141 (~neurocyte@IP-094046079092.dynamic.medianet-world.de)
[05:48:30] *** Quits: neurocyte86141 (~neurocyte@IP-094046079092.dynamic.medianet-world.de) (Changing host)
[05:48:30] *** Joins: neurocyte86141 (~neurocyte@user/neurocyte)
[05:48:46] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[05:49:43] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[05:50:55] *** Quits: neurocyte8614 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[05:50:55] *** neurocyte86141 is now known as neurocyte8614
[05:51:20] *** Joins: sayola1 (~vekto@dslb-088-078-152-238.088.078.pools.vodafone-ip.de)
[05:51:25] *** alMalsamo is now known as littlebobeep
[05:51:56] *** Quits: sayola (~vekto@dslb-088-078-152-238.088.078.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[05:53:23] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[05:54:19] *** Joins: sayola (~vekto@dslb-088-078-152-238.088.078.pools.vodafone-ip.de)
[05:55:57] *** Quits: sayola1 (~vekto@dslb-088-078-152-238.088.078.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[05:58:48] *** Joins: mvk (~mvk@2607:fea8:5ce3:8500::3800)
[06:20:11] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::f702)
[06:20:56] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[06:22:44] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::f702) (Client Quit)
[06:25:58] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[06:29:23] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 260 seconds)
[06:29:48] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[06:36:44] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[06:37:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[06:39:27] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:40:03] *** Joins: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr)
[06:45:13] *** Joins: BlackboardN (~nathan@user/BlackboardN)
[06:45:30] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[06:47:51] *** Quits: ubert1 (~Thunderbi@p200300ecdf158897cd25ca1c45111265.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:55:20] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[06:59:43] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[07:12:05] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[07:12:17] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[07:13:07] *** Joins: ss- (~ss-@187.83.249.216.dyn.smithville.net)
[07:15:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:15:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:15:42] *** Joins: wroathe (~wroathe@user/wroathe)
[07:15:48] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[07:16:19] *** Quits: wroathe (~wroathe@user/wroathe) (Client Quit)
[07:16:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:16:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:16:40] *** Joins: wroathe (~wroathe@user/wroathe)
[07:23:41] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:25:11] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[07:27:31] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[07:30:03] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[07:31:24] *** Joins: hololeap (~hololeap@user/hololeap)
[07:40:05] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Ping timeout: 246 seconds)
[07:49:32] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[07:54:43] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[07:55:45] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[07:58:54] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[08:03:27] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[08:07:31] *** Joins: benin (~benin@183.82.204.110)
[08:09:14] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:11:23] *** Quits: BlackboardN (~nathan@user/BlackboardN) (Ping timeout: 252 seconds)
[08:29:28] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:30:03] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[08:30:26] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[08:31:34] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.202)
[08:33:41] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[08:34:21] *** Joins: Sgeo (~Sgeo@user/sgeo)
[08:35:11] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[08:43:48] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:44:37] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[08:44:49] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:45:03] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:45:10] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:45:26] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:45:33] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:45:47] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:45:55] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:46:10] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:46:17] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:46:31] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:46:38] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:46:52] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:47:00] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:47:14] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:47:22] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:47:38] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:47:44] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:47:58] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:48:06] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:48:17] *** Joins: cdman (~dcm@27.2.218.12)
[08:48:17] *** Quits: cdman (~dcm@27.2.218.12) (Changing host)
[08:48:17] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[08:48:22] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:48:28] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:48:43] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:48:50] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:48:58] *** ChanServ sets mode: +o monochrom
[08:49:06] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[08:49:12] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:49:22] *** monochrom sets mode: +b *!*@c-174-63-118-52.hsd1.ma.comcast.net
[09:01:00] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[09:12:37] *** Quits: ss- (~ss-@187.83.249.216.dyn.smithville.net) (Quit: Client closed)
[09:12:59] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 260 seconds)
[09:13:18] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[09:19:52] *** ChanServ sets mode: +o litharge
[09:19:53] *** litharge sets mode: -bo *!*@c-174-63-118-52.hsd1.ma.comcast.net litharge
[09:20:51] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[09:23:21] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[09:31:00] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[09:34:27] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.202) (Ping timeout: 260 seconds)
[09:37:28] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[09:40:28] *** Joins: mbuf (~Shakthi@110.225.242.87)
[09:42:54] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:43:38] *** Quits: benin (~benin@183.82.204.110) (Ping timeout: 246 seconds)
[09:45:54] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[09:46:14] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[09:47:05] *** Joins: frost (~frost@user/frost)
[09:47:43] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 260 seconds)
[09:48:08] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[09:54:09] *** Quits: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:84e3:4a12:bce1:8082) (Quit: ZNC 1.7.x-git-3-96481995 - https://znc.in)
[09:54:28] *** Joins: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:eb96:d26f:93a3:4c34)
[09:56:14] *** Joins: benin (~benin@183.82.204.110)
[09:58:46] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 272 seconds)
[10:01:00] *** Quits: mvk (~mvk@2607:fea8:5ce3:8500::3800) (Ping timeout: 240 seconds)
[10:11:19] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 260 seconds)
[10:12:30] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[10:20:23] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[10:24:56] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 246 seconds)
[10:27:36] *** Joins: acidjnk (~acidjnk@p200300d0c7049f701951913ce7bf0925.dip0.t-ipconnect.de)
[10:29:09] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[10:32:25] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:51:04] *** Joins: Graham31415 (~Graham@user/Graham31415)
[11:00:38] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[11:01:32] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[11:06:28] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[11:12:03] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[11:12:45] *** Joins: notzmv (~zmv@user/notzmv)
[11:14:04] *** Joins: kmein (~weechat@user/kmein)
[11:16:44] *** Quits: zachel (~zachel@user/zachel) (Quit: DIsconnected: v7+nano)
[11:18:49] *** Joins: zachel (~zachel@user/zachel)
[11:19:03] *** Quits: Graham31415 (~Graham@user/Graham31415) (Read error: Connection reset by peer)
[11:20:20] *** Joins: Graham31415 (~Graham@user/Graham31415)
[11:33:55] *** Quits: acidjnk (~acidjnk@p200300d0c7049f701951913ce7bf0925.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[11:56:22] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[11:57:16] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[12:00:22] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 272 seconds)
[12:00:26] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[12:02:02] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:05:26] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 272 seconds)
[12:13:31] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[12:15:50] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[12:16:48] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[12:17:50] *** Joins: img (~img@user/img)
[12:25:22] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Quit: ZNC - https://znc.in)
[12:27:04] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Quit: Leaving)
[12:30:51] *** Joins: arjun (~arjun@user/arjun)
[12:33:00] *** Joins: bahamas (~lucian@84.232.140.158)
[12:34:30] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[12:45:30] *** Joins: odnes (~odnes@5-203-146-18.pat.nym.cosmote.net)
[12:48:05] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 246 seconds)
[12:49:07] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[12:51:14] *** Joins: BlackboardN (~nathan@user/BlackboardN)
[12:53:02] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[12:57:22] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[12:58:39] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:59:13] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[13:01:22] *** Quits: arjun (~arjun@user/arjun) (Quit: Leaving)
[13:02:07] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[13:03:19] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[13:04:27] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[13:08:17] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[13:09:33] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 260 seconds)
[13:15:46] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[13:19:14] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[13:22:30] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[13:24:25] *** Joins: kaph_ (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[13:27:03] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[13:28:18] *** Joins: kaph__ (~kaph@151.47.143.243)
[13:30:07] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Quit: You have been kicked for being idle)
[13:30:45] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[13:30:54] *** Quits: mbuf (~Shakthi@110.225.242.87) (Quit: Leaving)
[13:31:08] *** Quits: kaph_ (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Ping timeout: 246 seconds)
[13:31:34] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 272 seconds)
[13:33:35] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:33:43] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.202)
[13:36:39] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 260 seconds)
[13:39:00] *** Joins: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:44:39] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[13:44:47] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[13:47:51] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[13:49:03] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[13:50:36] *** Quits: BlackboardN (~nathan@user/BlackboardN) (Ping timeout: 240 seconds)
[13:55:49] *** Quits: kaph__ (~kaph@151.47.143.243) (Read error: Connection reset by peer)
[13:55:57] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:57:17] *** Joins: kaph__ (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[13:58:27] *** Joins: img (~img@user/img)
[13:58:41] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:00:00] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[14:00:55] *** Joins: alp (~alp@user/alp)
[14:01:10] *** Joins: coot (~coot@213.134.190.95)
[14:04:39] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[14:06:03] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.202) (Ping timeout: 260 seconds)
[14:07:46] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[14:08:50] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[14:11:11] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[14:16:41] *** Joins: liz (~liz@cpc84585-newc17-2-0-cust60.16-2.cable.virginm.net)
[14:18:39] *** Quits: kaph__ (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[14:22:16] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[14:23:47] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[14:23:58] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[14:25:25] *** Joins: jollygood2 (~bc8147f2@cerf.good1.com)
[14:27:54] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Remote host closed the connection)
[14:28:32] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[14:33:13] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[14:36:32] *** Joins: abastro (~abab9579@192.249.26.132)
[14:37:08] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[14:38:36] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[14:38:58] *** Joins: jakalx (~jakalx@base.jakalx.net)
[14:42:34] *** Quits: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[14:46:10] *** Joins: mzan (~quassel@mail.asterisell.com)
[14:46:37] *** Joins: kaph_ (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[14:47:29] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:47:45] *** Quits: abastro (~abab9579@192.249.26.132) (Remote host closed the connection)
[14:47:47] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Ping timeout: 246 seconds)
[14:47:59] *** Joins: abastro (~abab9579@192.249.26.132)
[14:48:31] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 260 seconds)
[14:49:23] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[14:54:09] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[14:55:08] *** Quits: kaph_ (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Ping timeout: 246 seconds)
[15:08:47] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 256 seconds)
[15:09:20] <Andrew> test
[15:13:01] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 240 seconds)
[15:13:15] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 260 seconds)
[15:13:17] *** Joins: Psybur (~Psybur@2600:1003:b108:f292:c2b:a76d:9518:b609)
[15:15:40] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[15:24:25] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[15:24:27] *** Quits: alp (~alp@user/alp) (Ping timeout: 260 seconds)
[15:26:09] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[15:28:07] *** Joins: FragByte (~christian@user/fragbyte)
[15:29:02] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[15:33:20] *** Joins: toulene (~toulene@user/toulene)
[15:33:53] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[15:37:00] *** Joins: toulene (~toulene@user/toulene)
[15:38:21] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[15:39:07] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[15:40:50] *** Joins: Pickchea (~private@user/pickchea)
[15:41:13] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[15:42:46] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[15:44:43] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[15:48:13] *** Joins: gustik (~gustik@2a01:c844:240e:4d20:38e8:ab4e:3fd6:2e3a)
[15:51:18] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[15:56:23] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:58:23] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[16:00:05] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[16:00:59] *** Joins: alp (~alp@user/alp)
[16:02:55] *** Joins: Vajb (~Vajb@85-76-32-121-nat.elisa-mobile.fi)
[16:04:05] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[16:04:50] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 272 seconds)
[16:07:24] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[16:08:51] *** Joins: bahamas (~lucian@84.232.140.158)
[16:09:12] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[16:10:15] <abastro> I wish there were `Either e Void -> e` or `Either a a -> a`
[16:10:28] <abastro> That or `ExceptT e m Void -> m e`
[16:10:58] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[16:14:13] *** Joins: DNH (~DNH@2a02:8109:b740:2c4:b89d:8c20:3683:54c9)
[16:15:36] *** Quits: abastro (~abab9579@192.249.26.132) (Ping timeout: 272 seconds)
[16:19:24] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[16:20:15] *** Joins: abastro (~abab9579@192.249.26.132)
[16:21:00] *** Quits: abastro (~abab9579@192.249.26.132) (Remote host closed the connection)
[16:21:15] *** Joins: abastro (~abab9579@192.249.26.132)
[16:21:31] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.202)
[16:22:41] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 256 seconds)
[16:24:22] <liz> writing an `Either a a -> a` wouldn't be too hard
[16:24:43] <liz> `fromHomoEither (Left x) = x`; `fromHomoEither (Right y) = y`
[16:25:47] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.202) (Ping timeout: 246 seconds)
[16:26:59] *** Quits: dcoutts (~duncan@host213-122-143-81.range213-122.btcentralplus.com) (Ping timeout: 260 seconds)
[16:30:11] <jackdk> abastro: `either id absurd`, `either id id` respectively; see also "Fairbairn Threshold"
[16:30:35] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:33:09] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[16:48:51] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:48:59] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[16:50:14] *** Joins: metabulation (~wootehfoo@user/wootehfoot)
[16:50:26] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 272 seconds)
[16:50:44] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[16:51:36] <abastro> Oh, so it did not make it because of fairbairn threshold?
[16:52:08] <abastro> Hmm, so what would be the best way to write:
[16:52:25] <abastro> `ExceptT e m Void -> m e`
[16:52:47] <abastro> `fmap (either id absurd) . runExceptT` is quite long to me
[16:54:03] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[16:55:17] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:01:50] *** Quits: Vajb (~Vajb@85-76-32-121-nat.elisa-mobile.fi) (Read error: Connection reset by peer)
[17:01:59] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:03:17] <abastro> I need to do study but my brain don't want to and resorts to: https://paste.tomsmeding.com/SOth1C3N
[17:03:53] *** Joins: frost (~frost@user/frost)
[17:06:53] *** Joins: alp (~alp@user/alp)
[17:07:48] *** Quits: Psybur (~Psybur@2600:1003:b108:f292:c2b:a76d:9518:b609) (Ping timeout: 240 seconds)
[17:08:29] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[17:10:39] *** Quits: odnes (~odnes@5-203-146-18.pat.nym.cosmote.net) (Remote host closed the connection)
[17:11:01] *** Joins: odnes (~odnes@5-203-146-18.pat.nym.cosmote.net)
[17:14:55] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[17:19:07] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[17:20:43] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[17:22:49] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[17:25:07] *** Joins: ccntrq (~Thunderbi@dynamic-046-114-142-228.46.114.pool.telefonica.de)
[17:25:16] *** Quits: gustik (~gustik@2a01:c844:240e:4d20:38e8:ab4e:3fd6:2e3a) (Quit: Leaving)
[17:29:39] *** Quits: ccntrq (~Thunderbi@dynamic-046-114-142-228.46.114.pool.telefonica.de) (Client Quit)
[17:30:03] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[17:30:18] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[17:30:36] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[17:32:03] <kuribas> I often hear "the types are so complicated in haskell".  However I find that more complicated types give rise to easier function definitions.
[17:32:15] <kuribas> Isn't it then just not about pushing complexity into types?
[17:32:28] <kuribas> As in, it's not more complicated, it's just complicated in a different place.
[17:32:47] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[17:33:08] <kuribas> And if done well, it means that this complication is just in one place, rather than popping up all over the codebase.
[17:33:09] <hpc> in my experience, people who say that have just never used algebraic types before
[17:33:26] <kuribas> hpc: well, and that :)
[17:33:32] <hpc> or they look at them in haskell and think "this is foreign and unknowable"
[17:33:47] <hpc> but as soon as you show it to them in say, typescript, it's immediately obvious to them :/
[17:34:20] <hpc> but yeah, a good type is like a good api
[17:34:26] <hpc> all your code invisibly becomes much simpler
[17:34:37] <hpc> well, a good type /is/ a good api
[17:35:26] <kuribas> some things are easier when you don't try to statically proof them correct.
[17:36:15] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.202)
[17:36:26] <hpc> in a turing-complete language you're dealing with the halting problem anyway
[17:36:31] <hpc> so it's about how close you can usefully get
[17:36:33] <kuribas> Even though people erronuously will say, "they are complicated in haskell".
[17:36:55] <hpc> and with things like purity and laziness, it's easy to get a lot closer
[17:37:08] <kuribas> hpc: clojure has purity and laziness.
[17:37:29] <kuribas> hpc: still, I find it nearly impossible to reason about code, without being able to run it in a repl with real examples.
[17:37:35] <kuribas> (in clojure)
[17:39:06] <hpc> that's probably all the other lisp stuff, like macros and dynamic types
[17:40:01] <kuribas> For me it's mostly about using hashmaps for everything.
[17:40:18] <kuribas> It's the same as Objects in python/javascript.
[17:40:44] <kuribas> it's just easier in the sense that you don't see when you break anything.
[17:40:52] <kuribas> Where a typesystem makes it immediately obvious.
[17:43:06] *** Joins: liqidmetalman (~admin@c-98-234-46-210.hsd1.ca.comcast.net)
[17:44:30] <abastro> There is also this thing that many ppl don't understand abstraction
[17:44:36] <abastro> They usually think in concrete cases
[17:44:59] <abastro> So I found ppl against property-based testing for this reason.
[17:45:21] <kuribas> right, and in clojure/lisp, you just code against concrete cases.
[17:46:05] <kuribas> but to me, it's the opposite of "reasoning about code", hence "functional programming".
[17:46:39] <kuribas> clojure isn't really function programming IMO, not more than doing java or javascript with pure objects.
[17:47:14] <kuribas> The spirit of "functional programming", is to be able to understand code by just looking at it.
[17:48:15] *** Joins: BlackboardN (~nathan@user/BlackboardN)
[17:48:54] <nomagno> The spirit of functional programming is really just recursion. The 'algorithms write themselves' part is sprinkled on top
[17:49:36] <kuribas> not recursion, induction.
[17:51:45] *** Joins: n8chan (~nate@98.45.152.91)
[17:51:45] <liz> i find it hard to judge how "difficult" haskell is to the average programmer because i've approached it from a mathematical background
[17:52:02] <kuribas> liz: did that make it easier, or harder?
[17:52:15] <liz> abstraction is my bread and butter, so i believe it made it easier
[17:53:13] <liz> i specialised in algebra so things like Semigroup and Monoid were pre-existing knowledge, rather than concepts to learn in order to learn haskell
[17:53:38] *** Quits: neightchan (~nate@98.45.152.91) (Ping timeout: 246 seconds)
[17:53:51] <liz> and i think that in general the ability to think in abstract terms made learning haskell easier
[17:53:58] <liz> that said though, i'm still very much a haskell novice!
[17:54:08] <hpc> i went the immersion route - a solid month between semesters to properly change how i thought about programming
[17:54:32] <kuribas> But I cannot imagine a good programmer would find Semigroup or Monoid difficult.
[17:54:42] <kuribas> They are pretty much the easiest abstractions out there.
[17:54:59] <liz> that's true, they're conceptually simple structures
[17:55:04] <hpc> they teach the algebraic properties in elementary school even
[17:55:14] <hpc> 10 year olds can learn monoid
[17:55:16] <kuribas> Frankly, only Monad and Applicative are somewhat complicated, from all haskells base abstractions.
[17:55:21] <kuribas> hpc: yeah
[17:56:19] <kuribas> liz: I find idris to be more math oriented.
[17:57:20] <kuribas> IMO OOP is harder than most of haskells abstractions.
[17:58:12] <liz> i think a key difference between OOP and haskell's abstractions comes from the different ways of thinking within the paradigms
[17:58:22] <liz> how to "align" one's brain to solving a problem, if that makes sense
[17:59:26] <liqidmetalman> any hackers in here...
[17:59:30] <liqidmetalman> ....
[17:59:38] <liqidmetalman> got some questions...
[18:00:25] <kuribas> most of haskell "abstractions" are very concrete.  OOP design patterns are mostly fuzzy and leave a lot of room for interpretation.
[18:01:04] <hpc> liqidmetalman: in the classical "i hacked out a microkernel over the weekend" or the modern "i hacked google" meaning? :P
[18:01:21] <hpc> also, don't ask to ask, just ask
[18:02:25] <kuribas> or I did an amazing type system hack.
[18:02:35] *** Joins: Alleria (~textual@user/alleria)
[18:02:49] <hpc> ask in the channel, don't pm people
[18:03:06] <hpc> we prefer open discussion
[18:03:10] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[18:03:22] <abastro> Ppl love fuzzy and room for interpretation things when it looks more cozzy I guess
[18:03:38] <abastro> Like, using Pets, Dogs, and Cat.s in the example
[18:03:38] <kuribas> hpc: unless you don't want the teaching assistant to know?
[18:03:49] <liqidmetalman> i was trying to install venom with metasploit via linux but some of the gems wernt downloading... 
[18:03:55] <hpc> ah, you're in the wrong channel
[18:04:04] <hpc> see the topic for what we're about
[18:04:07] <liqidmetalman> tried "install bundle" still doesnt install...
[18:04:07] <abastro> Very wrong channel
[18:04:39] <liqidmetalman> so i cant get help?..
[18:04:41] <liqidmetalman> ..
[18:04:42] <hpc> not here
[18:04:49] <liqidmetalman> recommendations...
[18:04:49] <liqidmetalman> ..
[18:04:52] <hpc> no clue
[18:04:59] <liqidmetalman> #hack has like 5 people in it
[18:05:00] <liqidmetalman> ..
[18:05:19] <liqidmetalman> been like goin 2 weeks 
[18:05:29] <liqidmetalman> still cant get the damn thing to work..lol
[18:05:31] <liqidmetalman> ...
[18:05:37] <geekosaur> the notion that IRC is inhabited mostly by so-called "hackers" is some 15 years out of date, as I understand it
[18:05:47] <liz> a channel for your specific distro may help, or a ruby channel if you're having issues with gems
[18:07:15] <[exa]> liqidmetalman: there's no channel for metasploit or venom?
[18:07:25] <liqidmetalman> no
[18:07:35] <liqidmetalman> "venom" is a trojan program
[18:07:37] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 260 seconds)
[18:07:41] <liqidmetalman> like a trojan horse...
[18:07:46] <liqidmetalman> drops a payload
[18:07:56] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[18:08:03] <[exa]> it is a compiler
[18:08:04] <liqidmetalman> i can set up the payload ...but can get the main app "venom" to work..
[18:08:10] <liqidmetalman> you know with the lisener...
[18:08:21] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[18:08:30] <[exa]> anyway it's highly offtopic here and you'll probably get 0 help
[18:08:33] <[exa]> try #metasploit
[18:09:50] <[exa]> btw it's useful to prepare a pastebin with what doesn't work, like error messages and so
[18:10:57] *** Joins: nate1 (~nate@98.45.152.91)
[18:12:14] *** Joins: fendor (~fendor@178.115.59.46.wireless.dyn.drei.com)
[18:15:20] *** Quits: nate1 (~nate@98.45.152.91) (Ping timeout: 246 seconds)
[18:16:51] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[18:24:43] <liqidmetalman> k
[18:25:07] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[18:25:24] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[18:28:06] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:9dee:240c:5988:ddb8)
[18:30:11] *** Quits: BlackboardN (~nathan@user/BlackboardN) (Ping timeout: 260 seconds)
[18:30:39] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:d90e:8b62:fe9d:3118) (Ping timeout: 260 seconds)
[18:30:55] *** Quits: ski (~ski@remote12.chalmers.se) (Quit: Lost terminal)
[18:33:56] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:d960:d98a:f624:8ef)
[18:35:49] *** Joins: dcoutts (~duncan@host213-122-143-81.range213-122.btcentralplus.com)
[18:36:14] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:49:03] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[18:50:47] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[18:51:02] *** Quits: abastro (~abab9579@192.249.26.132) (Ping timeout: 246 seconds)
[18:58:35] *** Joins: Guest38 (~Guest38@188.147.98.147.nat.umts.dynamic.t-mobile.pl)
[19:01:35] *** Quits: kuribas (~user@ptr-25vy0i7mej08atpseum.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[19:01:46] <abastro[m]> I wonder how ppl who lack matematical imaginative skills are doing programming work tbh
[19:02:14] <abastro[m]> Like, doesn't it mean SW boom is going too much
[19:04:54] <[exa]> not sure if actual math-specific imagination skills help much with programming
[19:05:52] <[exa]> toddler-like "moving stuff very carefully around to the other heap" and "virtual rubber duck" is on top of my list tbh :D
[19:09:45] <liqidmetalman> metasploit is the client...
[19:10:07] <liqidmetalman> im learning but.. still cant get it to install because of some dependancy issues...
[19:10:11] <liqidmetalman> any thoughs...
[19:10:13] <liqidmetalman> ..
[19:10:21] <liqidmetalman> *thoughts..
[19:10:38] *** Joins: AdityaAlok[m] (~mradityaa@2001:470:69fc:105::1:ee36)
[19:10:44] *** Joins: jushur (~human@user/jushur)
[19:11:03] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[19:11:12] <[exa]> liqidmetalman: as posted above, find actual community of people who use metasploit and show them whatever error message you have; probability of someone knowing stuff about whatever random metasploit extension is negligible
[19:11:31] <[exa]> *someone here
[19:12:38] *** Joins: notzmv (~zmv@user/notzmv)
[19:13:36] <[exa]> also it looks like they're a bit more active on slack than on the IRC
[19:13:41] <abastro[m]> [exa]: Well does that help haskell programming
[19:13:58] *** Quits: DNH (~DNH@2a02:8109:b740:2c4:b89d:8c20:3683:54c9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:14:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:14:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:14:08] *** Joins: wroathe (~wroathe@user/wroathe)
[19:14:11] <[exa]> abastro[m]: yeah, folding my foldy structures :D
[19:14:29] <[exa]> putting stuff in boxes
[19:14:53] <[exa]> checking if stuff fits in a weirdly shaped box
[19:15:34] <liz> sounds like those skills would be useful in a packing facility too :P
[19:16:00] <[exa]> oh yes, all these packages
[19:16:12] <[exa]> :D
[19:19:09] *** Quits: Guest38 (~Guest38@188.147.98.147.nat.umts.dynamic.t-mobile.pl) (Quit: Client closed)
[19:20:21] *** Joins: xkuru (~xkuru@user/xkuru)
[19:21:59] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 260 seconds)
[19:23:04] <abastro[m]> ~~Packaging, sounds like geometric skills to me~~
[19:23:21] <abastro[m]> Hmm don't you apply equational reasoning
[19:23:57] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[19:24:03] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:25:27] *** Quits: jollygood2 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[19:26:30] <AdityaAlok[m]> Hello! everyone. (I'm new to haskell as well as functional programming) I wanted to ask how `currying` is implemented for position dependent arguments. For eg. How does this work? How haskell knowns which argument is for which side..?... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/d174dd238ef62939d268cd5673890b37aba0051f)
[19:26:43] *** Joins: cyphase (~cyphase@user/cyphase)
[19:27:06] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[19:28:52] <abastro[m]> Hm wdym by position dependent argument exactly in this example?
[19:29:02] <[exa]> AdityaAlok[m]: if you mean the operator "section" shortcuts, the symmetric variants are (< 8) and (8 <)
[19:29:07] <[exa]> ie you can choose
[19:29:34] <[exa]> finally, your function is `id` :]
[19:29:37] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[19:29:50] <[exa]> >  id (<10) 5
[19:29:52] <lambdabot>  True
[19:29:58] <[exa]> >  (<10) 5
[19:30:00] <lambdabot>  True
[19:30:03] <[exa]> >  (<10) 15
[19:30:06] <lambdabot>  False
[19:30:15] <[exa]> >  (10<) 15
[19:30:17] <abastro[m]> > ($) (<10) 5
[19:30:17] <lambdabot>  True
[19:30:19] <lambdabot>  True
[19:30:25] <abastro[m]> Closer analogue
[19:32:15] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[19:32:26] *** Parts: liqidmetalman (~admin@c-98-234-46-210.hsd1.ca.comcast.net) ()
[19:33:53] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[19:34:38] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[19:35:50] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[19:44:01] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[19:45:03] *** Joins: califax (~califax@user/califx)
[19:47:15] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 240 seconds)
[19:48:34] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:49:59] <dminuoso> AdityaAlok[m]: It's quite simple: The semantics are baked into the haskell report https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-300003.5
[19:50:06] <dminuoso>  Translation: The following identities hold: 
[19:50:12] <dminuoso> (op e)  =  \ x -> x op e
[19:50:19] <dminuoso> (e op)  =  \ x -> e op x
[19:53:24] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 240 seconds)
[19:56:36] *** Joins: Psybur (~Psybur@2600:1003:b12f:917d:51b:ed39:8828:ea95)
[20:07:19] *** Joins: Midjak (~Midjak@82.66.147.146)
[20:12:36] *** Quits: Psybur (~Psybur@2600:1003:b12f:917d:51b:ed39:8828:ea95) (Ping timeout: 240 seconds)
[20:17:16] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:18:12] *** Joins: bahamas (~lucian@84.232.140.158)
[20:20:44] *** Quits: metabulation (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[20:26:58] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[20:31:20] *** Joins: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net)
[20:31:59] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[20:33:16] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[20:35:18] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[20:39:53] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[20:39:53] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[20:40:42] *** Joins: BlackboardN (~nathan@user/BlackboardN)
[20:47:18] *** Quits: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net) (Ping timeout: 272 seconds)
[20:48:47] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[20:49:17] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 252 seconds)
[20:50:28] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 272 seconds)
[20:53:09] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[20:53:28] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[20:55:40] *** Joins: alp (~alp@user/alp)
[20:57:22] <shapr> I suddenly wish for hoogle.haskell.org to return number of total uses for a thing, and number of uses in the past year.
[20:57:47] <shapr> I searched for URL and many things are returned, but I don't know if there's a *popular* URL type
[20:59:12] <liz> hackage states the number of downloads a package has, if that helps
[20:59:39] <shapr> good point, but I think I want "packages uploaded in the last year that use this thing"
[21:00:36] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 272 seconds)
[21:03:43] <shapr> liz: I guess number of downloads in the past year would work too
[21:05:17] <abastro[m]> Oh, Number of uses for a specific functions?
[21:05:18] <abastro[m]> That would be wonderful
[21:06:24] <liz> there would be a lot of interesting metrics to have on hoogle/hackage
[21:06:35] <liz> occurrences of functions in packages would be neat
[21:07:00] <shapr> aha, rust's lib.rs has this feature: https://lib.rs/crates/serde
[21:07:12] <shapr> let's copy that like ghcup copied rustup!
[21:07:13] *** Joins: DNH (~DNH@2a02:8109:b740:2c4:b89d:8c20:3683:54c9)
[21:08:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[21:10:25] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[21:11:07] <abastro[m]> TIL ghcup copied rustup
[21:11:08] <abastro[m]> I thought they were independently developed and somehow got the same name
[21:11:58] <shapr> oh hey, hoogle DOES have this feature!
[21:12:44] <shapr> when I search https://hoogle.haskell.org/?hoogle=url&scope=set%3Astackage the second result is the package "url" and there's a "Uses" link on the right
[21:13:22] *** Joins: acidjnk (~acidjnk@p200300d0c7049f70e9fe474f3be10533.dip0.t-ipconnect.de)
[21:13:32] <Rembane> That's really cool
[21:13:50] <liz> does the "up" in ghcup stand for anything? i always read it as G-H-Cup
[21:14:32] <shapr> I assumed it was "update" for both ghcup and rustup, but I never thought about it?
[21:14:54] <shapr> check it out! when I click the "Uses" link I get reverse dependencies! https://packdeps.haskellers.com/reverse/url
[21:15:07] <liz> oh wow that's cool :o
[21:15:07] <Rembane> I read it as the up in `ip link eno1 up`
[21:17:15] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[21:18:55] *** Joins: econo (uid147250@user/econo)
[21:20:54] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[21:23:10] <monochrom> I think of "suit up" and "level up".
[21:24:42] *** Joins: machinedgod (~machinedg@24.105.81.50)
[21:25:56] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 272 seconds)
[21:27:14] <Hecate> shapr: oh yeah that's a redirect to packdeps :)
[21:27:24] *** Joins: simendsjo (~user@84.211.91.241)
[21:27:29] <shapr> yah, it's cool! I wish I knew about this before.
[21:27:50] <shapr> I also wish I had "uses in the last year" and that this link showed up for everything, not just packages
[21:27:56] <shapr> salut Hecate, ca va?
[21:31:00] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 272 seconds)
[21:31:05] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[21:31:54] *** Joins: zebrag (~chris@user/zebrag)
[21:32:00] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[21:33:02] <Hecate> shapr: ça va. :)
[21:33:09] <shapr> :-)
[21:33:28] <Hecate> I'm having some trouble finishing the last couple issues needed for a Flora V1
[21:34:27] <shapr> What are those issues?
[21:34:29] *** monochrom sets mode: -o monochrom
[21:35:10] <Hecate> shapr: https://github.com/flora-pm/flora-server/milestone/1
[21:35:32] * shapr clones
[21:35:35] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:36:18] * shapr builds
[21:36:52] <Hecate> shapr: the worst one I'd say, is this one https://github.com/flora-pm/flora-server/issues/78
[21:38:19] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Remote host closed the connection)
[21:39:03] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[21:40:27] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:40:29] *** Joins: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net)
[21:41:00] <shapr> whoa, datalog?
[21:42:37] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[21:43:00] <lechner> Hi, what's a good way to understand, please, why Nix is so popular with some haskellers? Is it reproducibility?
[21:43:15] *** Joins: coot (~coot@213.134.190.95)
[21:43:40] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 272 seconds)
[21:44:12] <hpc> nix is also a pure functional language
[21:44:29] <hpc> and someone went through the effort of making packaging haskell nix packages a lot easier
[21:44:59] <hpc> and it's just interesting
[21:45:02] <shapr> nix being pure means you can cache the compiled packages and then download them instead of rebuilding them locally.
[21:45:03] <Hecate> shapr: ouais, j'utilise ça pour normaliser les catégories
[21:45:10] <shapr> c'est choutte
[21:45:46] <Hecate> yup'
[21:45:50] <Hecate> c'est très chouette
[21:45:58] <shapr> Is there a #haskell.fr ?
[21:46:09] <shapr> huh, yes but it's dead
[21:46:12] * shapr shrugs
[21:46:23] <Hecate> shapr: #haskell-fr actually
[21:46:46] <exarkun> sometimes the cache even has stuff you wanted
[21:47:49] <Hecate> exarkun: no way
[21:48:54] <lechner> does nix in haskell refer to the whole nixos, or just the package manager?
[21:49:32] <Hecate> lechner: just the package manager and the language
[21:49:39] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[21:49:51] <Hecate> nix is popular amongst Haskellers because many here think that it is the redemption and salvation of programmers
[21:50:00] <lechner> so nix is cabal for the non-haskell pieces
[21:50:13] <lechner> ?
[21:50:19] <lechner> that was a question
[21:50:22] <Hecate> oh nix can even be for your haskell pieces
[21:50:28] <shapr> lechner: I think that's a good description.
[21:50:39] <Hecate> but that's another layer of complexity, and another culture
[21:51:19] <Hecate> shapr: if you want to toy with Flora you're more than welcome to ask questions :) Just send them in PM so that I don't miss them in the channel
[21:51:31] <shapr> lechner: one thing I like about nix is that I can specify all the dependencies for whatever I'm making, and they'll all be in scope when I switch to that project's context
[21:51:40] <shapr> Hecate: or perhaps #haskell-in-depth ?
[21:51:45] <lechner> how do you switch?
[21:52:09] <lechner> or, what's a context?
[21:52:09] <shapr> lechner: I use direnv so all the pieces are in scope when I change into that directory.
[21:52:10] <Hecate> shapr: damn I didn't about this channel :D
[21:52:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[21:52:40] <shapr> lechner: for example, my project https://github.com/shapr/takedouble does that
[21:53:15] <shapr> lechner: the two popular ways I see nix used is "nix as package manager on top of other operating system" and "nix as operating system"
[21:53:34] <shapr> if you have nix as pkg manager, you can do most of the same things
[21:53:50] <lechner> How do I bring Nix's greatness to Debian?
[21:54:02] <shapr> you can install nix-as-package-manager
[21:54:40] <lechner> but the nix you run is completely sandboxed?
[21:54:55] <shapr> mostly sandboxed, I have some things in global scope
[21:55:07] <shapr> like zsh, firefox, emacs
[21:55:26] <geekosaur> and even global scope isn't so global if you conditionalize the environment variable setup as I did
[21:55:46] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[21:55:54] <lechner> if a personal question is permitted, what is our base systom, please?
[21:55:58] <lechner> your
[21:56:17] <shapr> I'm using NixOS directly on my laptop, but I used nix on mac at my last job.
[21:56:27] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[21:56:34] <geekosaur> I've used Nix with Ubuntu in the past
[21:56:57] <lechner> shapr: and NixOS has everything you need?
[21:57:09] <shapr> lechner: for some value of everything, yes
[21:57:17] <lechner> geekosaur: I'll need your advice in a minute!
[21:57:34] <geekosaur> not using it currently but still have the setupif I do decide to reinstall it
[21:57:48] <shapr> that is, some things are not yet packaged for nix/nixos, and it can be a pain to hammer a new package into the hermetically sealed viewpoint of nix
[21:57:51] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[21:58:05] <lechner> why sealed?
[21:58:20] <geekosaur> one thing I did not like about Nix was duplication: not only do you have to gc regularly to avoid Nix installing multiple copues of things, but having it duplicate parts of the OS is also annoying
[21:58:22] <shapr> you can't know the exact dependencies otherwise
[21:58:42] <shapr> yeah, that duplication can use lots of disk space
[21:58:46] <exarkun> geekosaur: There are simple toggles you can turn on to run GC automatically.
[21:58:51] <geekosaur> but it goes along with the "sealed" thing
[21:59:00] <lechner> too tight?
[21:59:06] <shapr> ?
[21:59:20] <exarkun> The duplication is not, of course *actual* duplication.  It's more like almost-duplication.
[21:59:21] <lechner> one upgrade triggers too many rebuilds?
[21:59:46] <exarkun> On Debian, if you upgrade glibc-locale then it just switches out from underneath all the rest of the software on your system
[22:00:05] <exarkun> You still have version X.Y.Z of some random Foo package, but it's not actually the same software anymore because now it's using a different from of one of its dependencies
[22:00:11] <exarkun> On NixOS, this doesn't happen
[22:00:20] <lechner> due the way NixOS works, they do not distribute binaries, right? And never will?
[22:00:32] <geekosaur> there is cachix
[22:00:36] <exarkun> If you get a new version of a dependency, you get a new version of everything that depends on it (and you can keep or toss the old version with the previous version of the dependency, as you prefer).
[22:00:45] <exarkun> NixOS does distribute binaries
[22:00:53] <exarkun> Terabytes and terabytes of binaries
[22:01:22] <lechner> are they permutations?
[22:01:41] <exarkun> If you're a regular computer user instead of a programmer, chances are you will never do a local build of anything when using NixOS
[22:01:49] <exarkun> (Chances are if you are a regular computer user you are not using NixOS, of course)
[22:01:53] <shapr> :-D
[22:01:55] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[22:02:27] <exarkun> lechner: NixOS is developed in a repo named "nixpkgs".  A revision of nixpkgs is basically a version of the whole first-party package tree and the OS definition.
[22:02:43] *** Quits: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net) (Ping timeout: 260 seconds)
[22:02:49] <lechner> yeah, i have actually contributed to it
[22:02:54] <exarkun> lechner: There are certain branches in the development workflow for which binaries are built for every revision
[22:02:59] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[22:03:04] <exarkun> lechner: So if you install one of those revisions, all of the binaries are there.
[22:03:15] *** Joins: Psybur (~Psybur@2600:1003:b12f:917d:c456:4602:f034:984a)
[22:03:22] <exarkun> If you pick a different branch that's not part of that system, you get to build a ton of stuff
[22:03:23] <lechner> i see
[22:03:34] <exarkun> Or if you're packaging your own software that's not part of nixpkgs, you get to build that stuff
[22:03:43] <exarkun> Cachix is pretty nice and makes it easy for you to have a binary cache of your own stuff
[22:03:52] <lechner> it's like a completely declarative Gentoo
[22:03:55] <shapr> yes
[22:03:55] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[22:04:14] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[22:04:22] <shapr> I'd say most of the pain of nixos comes from everyday linux software taking a thoroughly non-declarative approach
[22:04:43] <exarkun> yea, there's a /massive/ mismatch between the way nixos works and the way most people are used a linux working
[22:05:03] <exarkun> the mismatch can create a little friction or a lot of friction, just depends
[22:05:27] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:07:01] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[22:07:12] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[22:07:20] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Max SendQ exceeded)
[22:07:28] <shapr> back to my question of an hour ago, is there a suggested URL type on hackage?
[22:07:37] <exarkun> Some other pain of nixos comes from the nix language and toolchain being ... less than fully realized with respect to certain well-known desirable user affordances
[22:07:46] <shapr> exarkun: ooh, I wanna hear you expand on that
[22:07:56] <lechner> what's that is plain English, please?
[22:08:08] <exarkun> eehh
[22:08:19] <shapr> My biggest challenge is that I have never found a single document defining all the attributes and what they do.
[22:08:28] <hpc> lechner: it's very hard to use :P
[22:08:31] *** Joins: crazazy (~user@130.89.171.62)
[22:08:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[22:08:48] <lechner> in Debian, we have what we call the "vendoring problem". it's a massive infrastructure mismatch between language-specific package managers and debian's traditional archive. debian must solve it in order to stay relevant
[22:08:50] <exarkun> ty hpc 
[22:09:37] <shapr> I consider nix the language agnostic package manager, and once you get over the starting cost, it's really good at that.
[22:09:41] *** Joins: __monty__ (~toonn@user/toonn)
[22:09:41] <exarkun> For example one of the most common error messages I get from Nix is "error: value is a string while a set was expected"
[22:09:43] <shapr> starting cost is high though
[22:09:50] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[22:09:57] <exarkun> (and various predictable variations)
[22:10:06] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:10:18] <exarkun> Ultimately this is caused by very simple, reasonable programming mistakes
[22:11:04] <exarkun> Unfortunately you get very little extra help in finding the mistake
[22:11:45] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[22:11:56] <exarkun> shapr: I agree documentation is another big weakness.
[22:11:57] *** Joins: jakalx (~jakalx@base.jakalx.net)
[22:13:27] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:13:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:13:28] *** Joins: wroathe (~wroathe@user/wroathe)
[22:14:22] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:14:23] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 246 seconds)
[22:15:24] <shapr> what's the suggested SHA1 type at the moment?
[22:16:11] <shapr> I'll try cryptonite
[22:16:28] <maerwald> uh-oh
[22:16:29] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 246 seconds)
[22:16:42] <exarkun> did I hear some people poo-pooing cryptonite recently
[22:17:13] <exarkun> details are not coming to me
[22:18:00] <geekosaur> various people distrust it because it does its own crypto and hasn't been validated
[22:18:03] <shapr> maerwald: what would you suggest instead?
[22:18:52] <maerwald> shapr: https://github.com/haskell-crypto/cryptonite/issues/330
[22:19:01] <maerwald> shapr: I use something else, let me check
[22:19:24] *** Joins: jgeerds (~jgeerds@d5364b87.access.ecotel.net)
[22:19:25] <shapr> ouch
[22:19:36] <maerwald> https://hackage.haskell.org/package/cryptohash-sha1
[22:19:40] *** Joins: bahamas (~lucian@84.232.140.158)
[22:19:41] <shapr> ok, I'll use that, thanks
[22:21:22] <exarkun> ouch indeed :/
[22:22:34] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[22:22:46] <maerwald> was also discussed here https://mail.haskell.org/pipermail/libraries/2020-August/030670.html with some... ehm, "strong" replies
[22:24:12] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 272 seconds)
[22:25:10] *** Joins: bahamas (~lucian@84.232.140.158)
[22:28:28] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[22:28:57] *** Joins: kaph (~kaph@151.47.165.211)
[22:29:37] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Quit: WeeChat 3.4.1)
[22:29:59] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[22:30:03] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 260 seconds)
[22:30:04] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:32:27] *** Quits: Psybur (~Psybur@2600:1003:b12f:917d:c456:4602:f034:984a) (Read error: Connection reset by peer)
[22:32:38] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[22:32:46] *** Joins: Psybur (~Psybur@2600:1003:b12f:917d:c456:4602:f034:984a)
[22:32:53] *** Joins: Topsi (~Tobias@dyndsl-095-033-019-200.ewe-ip-backbone.de)
[22:35:27] *** Joins: rekahsoft (~rekahsoft@cpe001b21a2fd89-cm64777ddc63a0.cpe.net.cable.rogers.com)
[22:37:33] *** Quits: kaph (~kaph@151.47.165.211) (Read error: Connection reset by peer)
[22:38:56] *** Joins: kaph (~kaph@151.47.165.211)
[22:41:49] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:42:44] *** Joins: deadmars- (~deadmarsh@95.38.117.185)
[22:42:58] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 260 seconds)
[22:43:33] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.202) (Ping timeout: 260 seconds)
[22:44:32] *** Joins: entbsagtc^ (~entbsagtc@c-24-99-107-170.hsd1.ga.comcast.net)
[22:45:05] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Quit: Leaving)
[22:48:05] *** Joins: d34df00d (~d34df00d@2600:1700:8c60:3a10::46)
[22:48:13] <d34df00d> Hi!
[22:48:16] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 272 seconds)
[22:48:50] <shapr> howdy d34df00d, how you doin?
[22:49:05] <d34df00d> I bumped my stackage lts to 19.1 (the one with ghc 9.0.2), and now I get `Could not find module ‘Prelude’ // Perhaps you haven't installed the profiling libraries for package ‘base-4.15.1.0’?` when I try to build a just created project with `stack build --profile`.
[22:49:18] <d34df00d> So, what am I doing wrong and how to fix this?
[22:49:30] <d34df00d> shapr: can't profile, that sucks :(
[22:49:38] <shapr> oh, that's no fun
[22:49:43] <shapr> I don't know anything about stack, sorry
[22:50:03] <maerwald> maybe https://gitlab.haskell.org/ghc/ghc/-/issues/21190 ?
[22:50:22] <maerwald> they're switching to hadrian produced bindists, so maybe 9.0.2 is affected as well
[22:50:31] <d34df00d> maerwald: that looks related, except that's 9.2.2 and I'm having that with 9.0.2.
[22:50:43] <d34df00d> Yep, would be interesting if 9.0.2 is also affected.
[22:51:03] <d34df00d> Curious what's the fix.
[22:51:11] <d34df00d> (except rolling back to 8.10)
[22:51:42] <maerwald> I think it is affected
[22:52:47] *** Joins: bahamas (~lucian@84.232.140.158)
[22:54:59] *** Quits: Graham31415 (~Graham@user/Graham31415) (Read error: Connection reset by peer)
[22:56:24] <maerwald> so you'll have to build from source
[22:57:29] <d34df00d> Ugh, probably not worth it.
[22:57:42] <maerwald> ghcup compile ghc -j 10 -v 9.0.2 -b 8.10.7
[22:57:42] <d34df00d> I think I'll just revert to ghc-8.10/lts-18.x
[22:58:48] <maerwald> you can use ghc-8.10.7 with lts-19.1
[23:00:05] <geekosaur> there have been a couple reports of the 9.0.2 bindist missing profiling libraries; best you can currently do is still to 8.10.7 apparently
[23:00:17] <geekosaur> s/still/stick
[23:00:42] <maerwald> d34df00d: what distro?
[23:00:53] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[23:01:15] *** Joins: Graham31415 (~Graham@user/Graham31415)
[23:01:19] *** Quits: deadmars- (~deadmarsh@95.38.117.185) (Ping timeout: 260 seconds)
[23:02:27] <d34df00d> maerwald: gentoo lol
[23:02:48] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[23:02:52] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:02:58] <maerwald> d34df00d: I think that's binary compatible with fedora34... I'm building 9.0.2 there right now and can upload the bindist afterwards
[23:05:56] *** Joins: Sgeo (~Sgeo@user/sgeo)
[23:06:46] <d34df00d> maerwald: that'd be useful, thanks!
[23:06:55] <d34df00d> maerwald: how would I marry that to stack?
[23:06:59] <maerwald> system-ghc: true
[23:07:03] <d34df00d> Ah, makes sense.
[23:07:07] <maerwald> https://docs.haskellstack.org/en/stable/yaml_configuration/#system-ghc
[23:07:14] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 246 seconds)
[23:07:30] <d34df00d> Hmm, how do I check if a ghc installation has a version of base libraries with profiling enabled?
[23:07:58] <d34df00d> I already have gentoo's own prebuilt binaries, so wonder if they'd work.
[23:08:55] <maerwald> you try to build a project with profiling enabled
[23:10:20] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:10:54] <geekosaur> you can dig around for libHSbase-x.y.z.w-somehash.p_a, but just trying to build a profiled helloworld app would probably be easier
[23:11:57] <geekosaur> hm,or just look in its install for any file with suffix .p_a I guess would be enough
[23:12:10] *** Quits: foul_owl (~kerry@23.82.193.88) (Ping timeout: 260 seconds)
[23:12:37] <d34df00d> Nope, no p_a for me :(
[23:13:09] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[23:14:54] <geekosaur> oh, looks like it's _p.a
[23:15:39] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[23:15:48] <geekosaur> interestingly, whatever build it used on my system has the p.a and p_hi files in at least 9.2.2
[23:15:55] * geekosaur checks 9.0.2
[23:16:08] <geekosaur> missing there
[23:17:55] *** Joins: foul_owl (~kerry@23.82.193.88)
[23:17:56] *** Quits: kaph (~kaph@151.47.165.211) (Read error: Connection reset by peer)
[23:19:01] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[23:19:02] <d34df00d> Well, I actually just grepped the installed files for libHSbase and got libHSbase-4.15.1.0-ghc9.0.2.so and libHSbase-4.15.1.0.a, and that's it.
[23:23:48] *** Quits: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[23:24:07] <janus> d34df00d: did you already see https://gitlab.haskell.org/ghc/ghc/-/issues/20707 ?
[23:24:13] *** Joins: kaph (~kaph@151.35.76.11)
[23:24:45] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[23:25:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[23:26:05] <janus> i don't understand why there is both 21190 and 20707..
[23:26:27] <lechner> different versions?
[23:28:08] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[23:28:20] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[23:29:26] <janus> well you'd think the fix for 9.2.1 would make it such that no issue for 9.2.2 would be needed
[23:29:27] *** Quits: Graham31415 (~Graham@user/Graham31415) (Read error: Connection reset by peer)
[23:29:57] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[23:31:49] *** Joins: kaph (~kaph@151.35.76.11)
[23:32:23] <lechner> "issues like #21190"     https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7753
[23:32:27] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[23:33:49] *** Joins: hololeap (~hololeap@user/hololeap)
[23:34:17] *** Quits: BlackboardN (~nathan@user/BlackboardN) (Ping timeout: 250 seconds)
[23:42:19] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:43:59] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 246 seconds)
[23:46:02] *** Quits: rekahsoft (~rekahsoft@cpe001b21a2fd89-cm64777ddc63a0.cpe.net.cable.rogers.com) (Read error: Connection reset by peer)
[23:46:26] *** Joins: rekahsoft (~rekahsoft@cpe001b21a2fd89-cm64777ddc63a0.cpe.net.cable.rogers.com)
[23:47:07] *** Joins: fef (~thedawn@user/thedawn)
[23:48:32] <maerwald> d34df00d: https://downloads.haskell.org/~ghcup/unofficial-bindists/ghc/9.0.2/ghc-9.0.2-x86_64-linux-fedora-34-2022-04-03T19%3A16%3A31.167697719Z-99084194.tar.xz
[23:48:51] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[23:49:35] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 246 seconds)
[23:50:36] *** Joins: mvk (~mvk@2607:fea8:5ce3:8500::3800)
[23:50:59] *** Joins: Sgeo (~Sgeo@user/sgeo)
[23:51:30] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[23:54:47] *** Quits: liz (~liz@cpc84585-newc17-2-0-cust60.16-2.cable.virginm.net) (Read error: Connection reset by peer)
[23:54:59] *** Joins: liz (~liz@cpc84585-newc17-2-0-cust60.16-2.cable.virginm.net)
[23:56:06] *** Joins: stevenxl (~stevenxl@c-73-72-2-81.hsd1.il.comcast.net)
[23:57:20] <d34df00d> maerwald: yay, thanks!
[23:57:27] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
