[00:01:31] <enebo[m]> byteit101: ok new news
[00:01:54] <enebo[m]> I managed to run rake reflect on master and using that I can run analog_clock
[00:02:16] <enebo[m]> The gem itself does not work and we just get the no fx loaded error
[00:02:48] <byteit101[m]> hmm
[00:02:53] <enebo[m]> If I were to manage a guess I would say we are loading something generated that is not there or something like that and we are blanket catching some exception
[00:03:35] <byteit101[m]> so to confirm -> rake gem & gem install = fail, but just rake reflect works?
[00:03:48] <enebo[m]> byteit101: I just did a gem install 
[00:03:56] <enebo[m]> I did not build the gem from the repo
[00:04:02] <byteit101[m]> Oh gem install gives you 1.x
[00:04:14] <byteit101[m]> he was using master (2.x dev)
[00:04:38] <enebo[m]> HAHA ok
[00:04:53] <enebo[m]> When will 2.x be released?
[00:05:37] <enebo[m]> I thought a release eventually get out.  It has been 6 years between releases
[00:05:37] <byteit101[m]> after ivar is implemented
[00:05:39] <byteit101[m]> because otherwise we have to break api, then revert the api break
[00:06:12] <byteit101[m]> ruby fxmlloader uses ivars, java fxmlloader uses fields, so hence the ivar exposing push :-)
[00:06:19] <enebo[m]> I can will try making the gem and making sure that is working
[00:06:44] <byteit101[m]> I have some modifications staged for ivar stuff, but nothing too big
[00:06:49] <byteit101[m]> (not pushed)
[00:09:24] <enebo[m]>    https://gist.github.com/enebo/6a2146e13c176d15dc1fd932f4c7e3e0
[00:09:42] <enebo[m]> So gem does work but rdoc complains during install
[00:10:01] <enebo[m]> (which does not actually prevent the gem from installing but it is not desirable)
[00:10:23] <byteit101[m]> that's funky
[00:10:43] <enebo[m]> I did end up install zulu twice and I swore I got JDK FX on first try but nope
[00:11:14] <enebo[m]> So maybe the reporter is not running the FX build since there is a non-FX build
[00:12:16] <enebo[m]> Perhaps ask java --list-modules to make sure it is right one
[00:12:30] <byteit101[m]> comment your findings (and ask if they are sure they are on 2.0/master with rake reflect)
[00:12:47] <enebo[m]> ok
[00:12:48] <byteit101[m]> because "I did end up install zulu twice and I swore I got JDK FX on first try but nope" is interesting
[00:18:04] <enebo[m]> byteit101: yeah I would have bet money I got JDK FX the first time but I definitely got the wrong one
[00:19:32] <byteit101[m]> cool
[00:20:50] <byteit101[m]> thanks, though don't you need rake [build/gem] ? rake reflect only generates the dsl helpers
[00:22:48] <enebo[m]> That did not compute
[00:22:53] <enebo[m]> what didn't I need to do?
[00:23:12] <enebo[m]> if I would have did gem it would have implicitly did the reflect?
[00:30:10] <byteit101[m]> Yes, rake gem depends on reflect, but reflect only doesn't build the gem
[00:30:36] <byteit101[m]> not something that you didn't need to do, but in the instructions you should probably change rake reflect to rake gem (or build I always forget)
[00:45:55] <enebo[m]> byteit101: I only specified that because that is what I did.  Once I ran reflect I ran the clock without installing the gem
[00:46:21] <enebo[m]> then I isntalled the gem after that.  So I  figured I could skip the reflect but I didn't
[00:47:39] <byteit101[m]> enebo: Does that sequence of commands in a fresh checkout work? I don't think so
[00:47:57] <byteit101[m]> I could be wrong though
[00:48:16] <byteit101[m]> my only reason for mentioning this is it may cause confusion to the user if it idn't
[00:48:20] <byteit101[m]> *it isn't
[00:49:04] <enebo[m]> Sure it works
[00:49:17] <enebo[m]> you can rake reflect on an empty project
[00:49:26] <enebo[m]> then just use -Ilib and you can run stuff
[00:50:39] <byteit101[m]> Yes, which is what I do, but your comment on the issue mixes those two modes and may be confusing
[00:51:13] <byteit101[m]> if you run rake reflect, I think the gem install will fail as no gem was build, and that may confuse people
[00:51:15] <enebo[m]> I can remove the rake reflect line if you want
[00:51:26] <byteit101[m]> (people looking at the issue)
[00:51:33] <enebo[m]> I made a gem after running that
[00:51:36] <enebo[m]> I literally did what I typed
[00:51:51] <byteit101[m]> well, either replace it with rake gem as step one
[00:51:58] <enebo[m]> why would rake gem fail if you ran rake reflect?
[00:52:00] <byteit101[m]> or remove gem install and add -I on step 3
[00:52:24] <byteit101[m]> > jruby -S gem install pkg/jrubyfx*.gem (rdoc error did occur but it did not prevent the gem from installing)
[00:52:24] <byteit101[m]> that's not rake gem
[00:52:32] <byteit101[m]> rake gem wouldn't fail, but gem install would
[00:52:44] <enebo[m]> why?
[00:53:38] <enebo[m]> Is it because rake reflect happens on install or something like tat?
[00:58:28] <byteit101[m]> enebo: https://gist.github.com/byteit101/15887be0315193695ad33cb24bb8ef6f
[00:59:02] <enebo[m]> you didn't run rake gem?
[00:59:10] <byteit101[m]> correct!
[00:59:17] <enebo[m]> but I did
[00:59:28] <byteit101[m]> Sure, but you didn't mention it in the comment
[01:00:01] <enebo[m]> ah ok now the confusion is over
[01:00:05] <byteit101[m]> my whole point was your comment didn't mention that fact, which may be confusing to someone who is  "completly new to jruby"
[01:00:05] <enebo[m]> I missed putting a step down
[01:00:55] <enebo[m]> fwiw my instructions were just as confusing by deleting the rake reflect 
[01:01:09] <byteit101[m]> Yes, they were more confusing
[01:01:09] <enebo[m]> since there was no istruction to build the gem
[01:01:30] <enebo[m]> so I had a confusing set of 3 steps
[01:01:47] <enebo[m]> then edited out rake reflect making it more confusing
[01:01:47] <byteit101[m]> Yay, thanks!
[01:01:57] <enebo[m]> then added the missing line
[01:01:58] <byteit101[m]> that confusion took too long to clear up :-P
[01:02:02] <enebo[m]> much too long but we got there :)
[01:27:48] <headius> Java 17 prohibits illegal accesses
[01:28:43] <headius> i.e. --illegal-access flag goes away and you have to add-opens for everything
[09:37:09] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[09:37:09] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[09:37:09] *** Quits: satyanash (~satyanash@143.110.247.92) (*.net *.split)
[09:42:49] *** Joins: satyanash (~satyanash@143.110.247.92)
[15:30:49] <kares[m]> think the openssl gem -> jruby-openssl dependency for the -java version would work.
[15:30:49] <kares[m]> but I need to think about it a bit more, atm I am trying to finish up some jossl improvements such as shipping with secure defaults and TLS 1.3
[20:03:52] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[22:14:18] *** Joins: subbu (~subbu@user/subbu)
[23:38:57] *** Joins: kroth_lookout[m] (~krothmatr@2001:470:69fc:105::1:8372)
[23:45:45] *** Joins: daveg_lookout[m] (~daveglook@2001:470:69fc:105::1:8374)
[23:47:45] <kroth_lookout[m]> hey all, I'm having some serious issues as a result (I think) of the latest jruby-openssl release. the release notes indicate that support for java 1.7 was dropped but that 8 should still work, but I get a NoMethodError when I try to use gem install on jruby-9.2.19.0 (installed by rvm). Usually I'd just uninstall the offending gem version and reinstall an older one, but given I can't install gems.... 
[23:47:45] <kroth_lookout[m]> gem install bundler -v 2.1.4 --no-document --source https://my-gem-source
[23:47:45] <kroth_lookout[m]> Unhandled Java exception: java.lang.NoSuchMethodError: java.nio.ByteBuffer.limit(I)Ljava/nio/ByteBuffer;
[23:47:45] <kroth_lookout[m]> java.lang.NoSuchMethodError: java.nio.ByteBuffer.limit(I)Ljava/nio/ByteBuffer;
[23:48:38] <kroth_lookout[m]>  * hey all, I'm having some serious issues as a result (I think) of the latest jruby-openssl release. the release notes indicate that support for java 1.7 was dropped but that 8 should still work, but I get a NoMethodError when I try to use gem install on jruby-9.2.19.0 (installed by rvm). Usually I'd just... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/ad8f260e67cbb367e256112e059f2c7222c197b3)
[23:49:35] <kroth_lookout[m]>  * hey all, I'm having some serious issues as a result (I think) of the latest jruby-openssl release. the release notes indicate that support for java 1.7 was dropped but that 8 should still work, but I get a NoMethodError when I try to use gem install on jruby-9.2.19.0 (installed by rvm). Usually I'd just... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/0d42824c34a742770e741bf686e163b4fae1dcff)
[23:49:43] <kroth_lookout[m]>  * hey all, I'm having some serious issues as a result (I think) of the latest jruby-openssl release. the release notes indicate that support for java 1.7 was dropped but that 8 should still work, but I get a NoMethodError when I try to use gem install on jruby-9.2.19.0 (installed by rvm). Usually I'd just... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/9d4c0661257403be94a383979c09e11a5741fb1f)
[23:52:53] <kroth_lookout[m]>  * hey all, I'm having some serious issues as a result (I think) of the latest jruby-openssl release. the release notes indicate that support for java 1.7 was dropped but that 8 should still work, but I get a NoMethodError when I try to use gem install on jruby-9.2.19.0 (installed by rvm). Usually I'd just... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/b80ed38604d06cf0587dd85b2f506b7880558af4)
