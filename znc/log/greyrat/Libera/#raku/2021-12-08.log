[00:04:49] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 252 seconds)
[00:04:49] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 252 seconds)
[00:07:16] <merryprog> m: my $num = 11; say S/..<?after «$num»>/ZZ/ with "11!!"
[00:07:16] <camelia> rakudo-moar 6e457595a: OUTPUT: «ZZ!!␤»
[00:07:22] <merryprog> m: my $num = 11; my $str = "11!!"; $str ~~ s/..<?after «$num»>/ZZ/; say $str
[00:07:22] <camelia> rakudo-moar 6e457595a: OUTPUT: «ZZ!!␤»
[00:08:39] <merryprog> m: my $num = 11; my @str = ["11!!"]; @str[0] ~~ s/..<?after «$num»>/ZZ/; say @str[0] # or even
[00:08:39] <camelia> rakudo-moar 6e457595a: OUTPUT: «ZZ!!␤»
[00:11:18] <merryprog> oh
[00:11:57] <merryprog> m: my $num = 11; say S/..<?after «11»>/ZZ/ with "1111"
[00:11:57] <camelia> rakudo-moar 6e457595a: OUTPUT: «1111␤»
[00:12:00] <merryprog> There we go!
[00:12:44] <MasterDuke> interesting, the second version didn't work at first either https://gist.github.com/Whateverable/ed39be1970588fef6ae880764ecdcbd1
[00:13:37] <merryprog> oooo weird
[00:13:54] <merryprog> to the bisectable6 we go
[00:16:59] <MasterDuke> m: my $num = 11; say S/..<?after $num>/ZZ/ with "1111"  # Smylers
[00:16:59] <camelia> rakudo-moar 6e457595a: OUTPUT: «ZZ11␤»
[00:17:25] *** Quits: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be) (Ping timeout: 240 seconds)
[00:18:17] *** Quits: colemanx (~coleman@2605:a601:5529:1e00:334b:f19:cc13:2f85) (Remote host closed the connection)
[00:18:35] *** Joins: colemanx (~coleman@2605:a601:5529:1e00:dd0d:4b4f:fad0:568d)
[00:19:39] <MasterDuke> moritz_: should it still work with those «» there?
[00:19:51] <MasterDuke> or should that be some sort of error/warning?
[00:20:28] <merryprog> Maybe it was meant to be
[00:20:28] <merryprog> m: say S/<?after ..>11/ZZ/ with "1111"
[00:20:29] <camelia> rakudo-moar 6e457595a: OUTPUT: «11ZZ␤»
[00:21:03] *** Joins: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be)
[00:22:10] <moritz_> MasterDuke: the « » mean word boundary, right?
[00:22:43] <merryprog> oh, you're right
[00:22:53] <MasterDuke> that's what it usually means, but maybe inside the <?after > they're just being interpreted as interpolating quotes
[00:23:59] <moritz_> but why would it be interpreted any different?
[00:24:10] <Smylers> I was wanting them to mean word boundary. Specifically I want to overwrite exactly 2 characters, regardless of how long the number is, but only if the entire number matches.
[00:24:37] <Smylers> Also, thank you both for looking into this.
[00:25:21] <moritz_> m: $_ = 42; s[\d+] = $/ == 42 ?? 23 !! $/; .say
[00:25:22] <camelia> rakudo-moar 6e457595a: OUTPUT: «23␤»
[00:25:28] <moritz_> m: $_ = 18; s[\d+] = $/ == 42 ?? 23 !! $/; .say
[00:25:28] <camelia> rakudo-moar 6e457595a: OUTPUT: «18␤»
[00:25:39] <moritz_> Smylers: ^^ a workaround for you
[00:26:08] <MasterDuke> well, the ast for the « » version has a pair of `QAST::Regex(:rxtype(anchor) :subtype(lwb))`and `QAST::Regex(:rxtype(anchor) :subtype(rwb))` that the version without doesn't
[00:26:22] <MasterDuke> so yeah, they're being interpreted correctly in that regard
[00:26:37] *** Quits: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be) (Ping timeout: 240 seconds)
[00:26:43] <moritz_> MasterDuke: I was aalso just checking the AST, but slower than you
[00:27:03] <MasterDuke> that's the only difference
[00:27:33] * MasterDuke pipes the ast ouput into files and then looks at them with vimdiff
[00:27:45] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[00:27:50] <moritz_> and between the two anchors, it also says Nodelist [INTERPOLATE, lexical $x 0 0 0 0] (basically
[00:28:13] <moritz_> does anybody know what these four 0s mean?
[00:28:22] *** Joins: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be)
[00:28:50] <moritz_> (but they are there without the « » as well, so shouldn't make a difference)
[00:29:12] <MasterDuke> i guess those are the args to INTERPOLATE?
[00:29:26] <merryprog> better example:
[00:29:26] <merryprog> m: my $num = 12; say S/..<?after «12»>/ZZ/ with " 123 12 3 "
[00:29:27] <camelia> rakudo-moar 6e457595a: OUTPUT: « 123 ZZ 3 ␤»
[00:29:31] <merryprog> m: my $num = 12; say S/..<?after «$num»>/ZZ/ with " 123 12 3 "
[00:29:31] <camelia> rakudo-moar 6e457595a: OUTPUT: « 123 12 3 ␤»
[00:30:46] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[00:32:28] <moritz_> m: my $num = 12; say S/..<?after $num>/ZZ/ with " 123 12 3 "
[00:32:29] <camelia> rakudo-moar 6e457595a: OUTPUT: « 123 12 3 ␤»
[00:32:49] <merryprog> ah, thanks
[00:32:58] <moritz_> the «» seem to be a red herring, variable interpolation doesn't seem to work in <?after>
[00:34:47] <MasterDuke> m: my $num = 11; say S/..<?after $num>/ZZ/ with "1111"   # but it does in this example, right?
[00:34:47] <camelia> rakudo-moar 6e457595a: OUTPUT: «ZZ11␤»
[00:35:16] *** Joins: riffraff (~riffraff@178-164-207-80.pool.digikabel.hu)
[00:35:24] <MasterDuke> oh, wait
[00:43:25] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 240 seconds)
[00:43:41] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 252 seconds)
[00:43:53] <merryprog> whoa this is weird
[00:44:00] <merryprog> m: my $num = 12; say S/..<?after «$num»>/ZZ/ with "123 12 3"
[00:44:01] <camelia> rakudo-moar 6e457595a: OUTPUT: «123 12 3␤»
[00:44:04] <merryprog> m: my $num = 11; say S/..<?after «$num»>/ZZ/ with "113 11 3"
[00:44:04] <camelia> rakudo-moar 6e457595a: OUTPUT: «113 ZZ 3␤»
[00:52:21] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[00:53:26] <tonyo> m: my $num = 11; say S/<?after «$num»>../ZZ/ with "113 11 3"
[00:53:26] <camelia> rakudo-moar 6e457595a: OUTPUT: «113 11ZZ␤»
[00:53:46] <tonyo> is this what you were expecting merryprog ?
[00:54:14] <merryprog> no
[00:54:48] <merryprog> The one with num = 11 gives the correct substitution... the one with num = 12 doesn't.
[00:55:31] <Smylers> What? It depends on the number?!
[00:56:25] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[00:56:46] <merryprog> ... yeah
[00:58:04] <moritz_> I believe <?after> does some weird, internal string reversals to be able to match backwards
[00:58:19] <merryprog> m: for 1..15 -> $num {say "$num -> " ~ (S/..<?after «$num»>/Z/ with "{$num}3 {$num} 3").contains('Z')}
[00:58:19] <camelia> rakudo-moar 6e457595a: OUTPUT: «1 -> True␤2 -> False␤3 -> True␤4 -> False␤5 -> False␤6 -> False␤7 -> False␤8 -> False␤9 -> False␤10 -> False␤11 -> False␤12 -> False␤13 -> False␤14 -> False␤15 -> False␤»
[00:59:12] <merryprog> oh wait, that can be better
[00:59:16] <moritz_> m: my $num = 21; $_ = 'foo 123 bar'; say S/<?after $num>/XX/'
[00:59:17] <camelia> rakudo-moar 6e457595a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3= 'foo 123 bar'; say S/<?after $num>/XX/7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤…»
[01:00:04] <moritz_> m: my $num = 21; $_ = 'foo 123 bar'; say S/<?after $num>/XX/
[01:00:05] <camelia> rakudo-moar 6e457595a: OUTPUT: «foo 12XX3 bar␤»
[01:00:16] <moritz_> it finds 12 when you give it 21
[01:00:24] <merryprog> maths
[01:00:32] <merryprog> this is so janky, lol
[01:00:37] <merryprog> I love it
[01:00:54] <moritz_> m: my $x = 'cba'; $_ = 'foo abc bar'; say S/<?after $x>/XX/
[01:00:54] <camelia> rakudo-moar 6e457595a: OUTPUT: «foo abcXX bar␤»
[01:01:08] <merryprog> m: my $num = 21; say S/..<?after $num>/ZZ/ with " 123 12 3 "
[01:01:08] <camelia> rakudo-moar 6e457595a: OUTPUT: « ZZ3 12 3 ␤»
[01:01:11] <merryprog> wow
[01:01:53] <merryprog> m: my $num = 21; say S:g/..<?after $num>/ZZ/ with " 123 12 3 "
[01:01:53] <camelia> rakudo-moar 6e457595a: OUTPUT: « ZZ3 ZZ 3 ␤»
[01:01:57] <merryprog> that is /so weird.
[01:10:13] <merryprog> ahahaha, this even happens:
[01:10:13] <merryprog> m: my $num = 12; say S:g/<?after $num>/!/ with "12 21"; say S:g/<?after 12>/!/ with "12 21"
[01:10:13] <camelia> rakudo-moar 6e457595a: OUTPUT: «12 21!␤12! 21␤»
[01:10:30] <merryprog> So it's for some reason reversing it... when doing variable interpolation
[01:14:16] <moritz_> <?after> has to match a regex backwards from the current cursor position
[01:15:20] <moritz_> implementing a whole backwards matcher would've been really quite much work and code duplication, so instead there is a clever trick: reverse both the string and the literals in the regex, and match forward to the end of the <?after>
[01:15:56] <merryprog> sounds super plausible to me :)
[01:16:08] <moritz_> it just seems that when doing so, the implementors forget that you *also* need to reverse interpolated strings (or maybe didn't forget it, but didn't have the framework necessary to apply the reversal at run time)
[01:16:50] * merryprog nods
[01:17:33] <merryprog> now we hope whoever wrote that is going to see this conservation and commit a fix so none of us have to make a ticket for it or find the offending code ourselves
[01:22:18] <Smylers> Thanks. That actually makes sense.
[01:23:41] <gfldex> TIL: When writing tests, don't use symetric strings.
[01:25:39] <japhb> For extra points, don't use ASCII printable strings
[01:25:51] <merryprog> For extra points, https://github.com/minimaxir/big-list-of-naughty-strings
[01:28:02] *** Quits: eseyman (~manu@lfbn-idf1-1-532-49.w86-242.abo.wanadoo.fr) (Quit: leaving)
[01:32:13] *** Joins: riffraff45 (~riffraff@178-164-207-80.pool.digikabel.hu)
[01:33:03] *** Joins: eseyman (~manu@lfbn-idf1-1-532-49.w86-242.abo.wanadoo.fr)
[01:35:02] *** Quits: riffraff45 (~riffraff@178-164-207-80.pool.digikabel.hu) (Client Quit)
[01:35:15] *** Joins: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu)
[01:36:12] *** Quits: riffraff (~riffraff@178-164-207-80.pool.digikabel.hu) (Ping timeout: 256 seconds)
[01:55:17] <Skarsnik> hm
[01:55:23] <Skarsnik> m:class A{has uint8 $.a }; my $a = A.new(:a(185));say sprintf("%
[01:55:23] <Skarsnik> 02X", $a.a)
[01:55:23] <evalable6> Skarsnik, rakudo-moar 559b2b319: OUTPUT: «(exit code 1) 04===SORRY!04=== Er…»
[01:55:24] <evalable6> Skarsnik, Full output: https://gist.github.com/4cc53f973871599174dc95c85b371115
[01:55:47] <Skarsnik> class A{has uint8 $.a }; my $a = A.new(:a(185));say sprintf("%02X",$a.a)
[01:55:47] <evalable6> Skarsnik, rakudo-moar 559b2b319: OUTPUT: «-47␤»
[01:55:56] <Skarsnik> This is an annoying but x)
[01:56:04] <Skarsnik> *bug
[01:57:29] <Skarsnik> m:my uint8 $a = 185;say sprintf("%02X", $a)
[01:57:30] <evalable6> Skarsnik, rakudo-moar 559b2b319: OUTPUT: «B9␤»
[01:58:07] <gfldex> m: class A{has uint8 $.a }; my $a = A.new(:a(185)); say $a.a.WHAT;
[01:58:07] <camelia> rakudo-moar 6e457595a: OUTPUT: «(Int)␤»
[01:58:53] <gfldex> m: class A{has uint8 $.a; method dd { dd $!a, $!a.WHAT } }; my $a = A.new(:a(185)); say $a.dd;
[01:58:53] <camelia> rakudo-moar 6e457595a: OUTPUT: «-71␤Nil␤Int␤»
[01:59:15] <gfldex> m: class A{has uint8 $.a; method dd { dd $!a, $!a.WHAT } }; my $a = A.new(:a(185)); $a.dd;
[01:59:15] <camelia> rakudo-moar 6e457595a: OUTPUT: «-71␤Int␤»
[01:59:24] <Skarsnik> class A{has uint32 $.a }; my $a = A.new(:a(185));say sprintf("%02X",$a.a)
[01:59:24] <evalable6> Skarsnik, rakudo-moar 559b2b319: OUTPUT: «B9␤»
[01:59:46] <gfldex> m: class A{has uint32 $.a; method dd { dd $!a, $!a.WHAT } }; my $a = A.new(:a(185)); $a.dd;
[01:59:47] <camelia> rakudo-moar 6e457595a: OUTPUT: «185␤Int␤»
[01:59:49] <Skarsnik> look like the unsigned constraint is lost somewhere
[01:59:58] <gfldex> indeed
[02:00:23] <Skarsnik> I guess I can switch to uint16, but it was a byte value xD
[02:00:48] <gfldex> Well, the constaint is only taken into account before binding the value to $!a. After that the type of the bound value counts.
[02:01:25] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 252 seconds)
[02:01:27] <Skarsnik> m:class A is rw {has uint8 $.a }; my $a = A.new; $a.a = 185;say
[02:01:27] <Skarsnik> sprintf("%02X", $a.a)
[02:01:28] <evalable6> Skarsnik, rakudo-moar 559b2b319: OUTPUT: «(exit code 1) 04===SORRY!04===␤Ar…»
[02:01:28] <evalable6> Skarsnik, Full output: https://gist.github.com/5750c54867f1e46ba5598fb688ef9aea
[02:01:47] <Skarsnik> class A is rw {has uint8 $.a }; my $a = A.new; $a.a = 185;say 
[02:01:47] <Skarsnik> sprintf("%02X", $a.a)
[02:01:50] <Skarsnik> grmbl
[02:02:43] <Skarsnik> m: class A is rw {has uint8 $.a }; my $a = A.new; $a.a = 185;say sprintf("%02X", $a.a)
[02:02:43] <camelia> rakudo-moar 6e457595a: OUTPUT: «-47␤»
[02:02:52] <Skarsnik> I really don't get this one thou
[02:05:04] <gfldex> 185 is bigger then 128 so when treated as a singed int8, it will be negative.
[02:05:40] <gfldex> Int is int64 unless promoted to BigInt.
[02:07:09] <gfldex> m: class A is rw {has uint8 $.a }; my $a = A.new; $a.a = 185;say sprintf("%02u", $a.a)
[02:07:09] <camelia> rakudo-moar 6e457595a: OUTPUT: «negative value '-71' for %u in sprintf␤Directive %u not applicable for value of type Int (-71) in format␤'%02u'␤  in block <unit> at <tmp> line 1␤␤»
[02:07:20] <gfldex> m: class A is rw {has uint8 $.a }; my $a = A.new; $a.a = 185;say sprintf("%02d", $a.a)
[02:07:20] <camelia> rakudo-moar 6e457595a: OUTPUT: «-71␤»
[02:08:14] <gfldex> There is no signed hex value for sprintf and friends.
[02:08:51] <Skarsnik> yes, but there is not reason to fallback to signed int x)
[02:09:14] <gfldex> It should complain indeed.
[02:09:31] <Skarsnik> 185 fit in a uint8
[02:09:54] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[02:10:59] <gfldex> m: class A is rw {has uint8 $.a }; my $a = A.new; $a.a = 185;say sprintf("%b", $a.a)
[02:11:00] <camelia> rakudo-moar 6e457595a: OUTPUT: «-1000111␤»
[02:11:07] <gfldex> :D
[02:11:27] <gfldex> That is supposed to be an unsigned int in binary.
[02:12:11] <gfldex> It might just be that the sprintf-implementation predates unsinged native types.
[02:12:32] <Skarsnik> m: class A is rw {has uint8 $.a }; my $a = A.new; $a.a = 185;say $a.a;
[02:12:32] <camelia> rakudo-moar 6e457595a: OUTPUT: «-71␤»
[02:12:46] <Skarsnik> does not came from sprintf :)
[02:13:35] <gfldex> sprintf should be able to get it right tho. It's sitting right on top of the VM, using plenty of nqp-magic.
[02:15:55] *** Quits: monkey_ (~user@181.114.17.106) (Remote host closed the connection)
[02:16:21] <Skarsnik> m: class A is rw {has uint8 $.a }; my $a = A.new; $a.a = 185;say $a.a.REPR;
[02:16:21] <camelia> rakudo-moar 6e457595a: OUTPUT: «P6opaque␤»
[02:17:13] <Skarsnik> REPR should not be P6opaque for a native
[02:17:26] *** Quits: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu) (Quit: Client closed)
[02:17:31] <MasterDuke> Skarsnik: fyi, nine++ is currently working on improving the uint support in moarvm/nqp/rakudo
[02:17:42] *** Joins: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu)
[02:19:34] <gfldex> m: class A{has uint32 $.a; method dd { dd $!a, $!a.REPR } }; my $a = A.new(:a(185)); $a.dd;
[02:19:34] <camelia> rakudo-moar 6e457595a: OUTPUT: «185␤"P6opaque"␤»
[02:19:41] <MasterDuke> m: my uint8 $a = 3; say $a.WHAT
[02:19:41] <camelia> rakudo-moar 6e457595a: OUTPUT: «(Int)␤»
[02:19:54] <MasterDuke> when you call a method on a native it gets autoboxed
[02:20:24] <gfldex> WHAT is not a method.
[02:22:06] *** Quits: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu) (Ping timeout: 256 seconds)
[02:22:21] <Skarsnik> :( the multi line reporting is still not fixed? (a block of instruction on multiple line, like multiple condition of a if). It's annoying to only have the error repport for the first line :(
[02:26:28] *** Joins: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu)
[02:28:16] *** Quits: Smylers (~Smylers@host-92-17-4-248.as13285.net) (Ping timeout: 265 seconds)
[02:34:10] *** Joins: Sgeo (~Sgeo@user/sgeo)
[02:34:49] *** Quits: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu) (Quit: Client closed)
[02:35:02] *** Joins: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu)
[02:35:28] *** Quits: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu) (Client Quit)
[02:35:40] *** Joins: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu)
[02:38:51] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[02:40:48] *** Quits: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu) (Ping timeout: 256 seconds)
[02:41:16] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[02:44:14] <japhb> Skarsnik, gfldex: ++nine has been working on a thorough rethink of signedness at all levels of the stack.  PRs aren't ready yet, but I'd say hold on a few days before overthinking this.  (It's all known bugs, and it's being worked on.)
[02:44:38] <Skarsnik> I probably already repported this like 4-5 years ago anyways ^^
[02:49:28] *** Joins: jgaz (~jgaz@2600:8805:d982:4233:2e0:4cff:fe00:e201)
[02:49:32] <moon-child> japhb: a pre-increment well-deserved for some impressive and tedious work
[02:49:34] <moon-child> :)
[02:54:34] <jgaz> Is it just me, or is raku-beginner not on libra chat. Was it not ported from freenode?
[02:55:05] <moon-child> #raku-beginners (with an s), I think?
[02:55:55] <moon-child> hm, maybe not...
[02:56:31] <jgaz> It's sans 's'. I just tried joining manually and it worked. There are people there. But I don't think it's a discoverable channel.
[02:56:49] <jgaz> If you ask for a list of channels from the IRC server -- unless I just missed it -- you won't find it.
[02:57:24] <jgaz> Let me know if I just need to get an eye exam... and another cup of coffee. :)
[02:57:45] <moon-child> maybe it was not registered, and the list only shows registered channels?
[02:58:14] <jgaz> Maybe?
[03:05:33] *** Joins: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu)
[03:06:01] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:07:12] <jgaz> I re-ran my search, it showed up the second time.
[03:07:16] <jgaz> NM
[03:08:33] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[03:09:55] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[03:12:35] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[03:15:21] *** Quits: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu) (Ping timeout: 256 seconds)
[03:21:05] *** Joins: Skarsnik_ (~Skarsnik@91-170-31-218.subs.proxad.net)
[03:22:21] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:24:20] *** Quits: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 265 seconds)
[03:32:43] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:36:51] *** Joins: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu)
[03:41:59] *** Quits: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu) (Ping timeout: 256 seconds)
[04:00:13] *** Quits: Skarsnik_ (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 240 seconds)
[04:01:33] *** Quits: patrickz (~quassel@55d4687d.access.ecotel.net) (Ping timeout: 265 seconds)
[04:01:43] *** Joins: patrickb (~quassel@55d47bd3.access.ecotel.net)
[04:18:46] *** Joins: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu)
[04:23:40] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2021/12/08/lazy-fishy/
[04:23:56] *** Quits: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu) (Ping timeout: 256 seconds)
[05:23:56] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:23:56] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:23:56] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:23:56] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:23:56] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:23:56] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:23:56] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:23:56] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:23:56] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:23:57] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:23:57] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:23:57] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:23:57] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:23:57] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:23:57] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:23:57] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:23:57] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:23:57] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:24:12] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[05:24:31] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[05:24:45] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[05:24:57] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[05:25:16] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[05:25:44] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[05:26:05] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[05:26:47] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[05:27:02] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[05:41:03] *** Quits: jgaz (~jgaz@2600:8805:d982:4233:2e0:4cff:fe00:e201) (Quit: Leaving)
[06:19:49] *** Joins: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu)
[06:23:08] *** Joins: Guest19 (~Guest19@99-35-40-17.lightspeed.tukrga.sbcglobal.net)
[06:24:30] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[06:24:38] *** Quits: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu) (Ping timeout: 256 seconds)
[06:24:44] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[06:25:19] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[06:33:24] *** Quits: patrickb (~quassel@55d47bd3.access.ecotel.net) (Quit: Quit.)
[06:33:32] *** Joins: jgaz (~jgaz@2600:8805:d982:4233:2e0:4cff:fe00:e201)
[06:35:36] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[06:55:45] *** Quits: jgaz (~jgaz@2600:8805:d982:4233:2e0:4cff:fe00:e201) (Quit: Leaving)
[07:11:15] *** Quits: frost (~frost@user/frost) (Ping timeout: 252 seconds)
[07:25:04] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[07:25:21] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[07:26:07] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[07:26:25] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[08:20:20] *** Joins: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu)
[08:25:20] *** Quits: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu) (Ping timeout: 256 seconds)
[08:25:47] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[08:26:27] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[08:32:42] *** Quits: Guest19 (~Guest19@99-35-40-17.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 256 seconds)
[08:52:12] *** Joins: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu)
[09:32:44] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:33:37] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:03:14] *** Joins: Smylers (~Smylers@host-92-17-4-248.as13285.net)
[10:09:49] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 252 seconds)
[10:17:38] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[10:50:02] *** Joins: Merfont (~Kaiepi@156.34.44.192)
[10:52:13] *** Quits: Kaipi (~Kaiepi@156.34.44.192) (Ping timeout: 240 seconds)
[10:53:44] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:54:33] *** Joins: seednode (~seednode@user/seednode)
[10:59:38] *** Joins: frost (~frost@user/frost)
[11:39:58] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:37:11] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[13:37:12] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:37:12] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:40:03] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[13:52:54] *** Quits: riffraff45 (~riffraff4@178-164-207-80.pool.digikabel.hu) (Quit: Client closed)
[14:25:55] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[14:26:03] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[14:28:12] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[14:40:12] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[14:41:16] *** Joins: Skarsnik_ (~Skarsnik@91-170-31-218.subs.proxad.net)
[14:41:55] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[14:44:41] *** Joins: jjido (~Denis@90.213.58.125)
[15:11:26] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:12:07] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[15:32:52] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:44:37] *** Quits: Skarsnik_ (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 240 seconds)
[15:46:12] *** Joins: jjido (~Denis@90.213.58.125)
[16:14:59] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[16:15:08] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[16:34:57] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[16:38:51] *** Quits: Smylers (~Smylers@host-92-17-4-248.as13285.net) (Ping timeout: 252 seconds)
[16:54:48] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[17:00:02] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[17:00:11] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[17:04:37] *** Quits: Zero_Dogg (~zerodogg@2a02:fe1:b002:100:215:17ff:fed8:8c8) (Ping timeout: 240 seconds)
[17:09:21] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[17:09:31] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[17:28:57] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:30:02] *** Joins: jjido (~Denis@90.213.58.125)
[17:30:52] *** Quits: jjido (~Denis@90.213.58.125) (Client Quit)
[17:37:54] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:48:11] *** Joins: Zero_Dogg (~zerodogg@2a02:fe1:b002:100:215:17ff:fed8:8c8)
[17:56:48] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[18:00:46] <discord-raku-bot> <Anton Antonov#7232> What is the easiest way to test that an object is a list or array of functions/callables?
[18:05:35] <moritz_> m: say (&[+], &map) ~~ all(Callable)
[18:05:35] <camelia> rakudo-moar 6e457595a: OUTPUT: «False␤»
[18:05:44] <moritz_> hm
[18:06:07] <moritz_> m: say all(&[+], &map) ~~ Callable
[18:06:08] <camelia> rakudo-moar 6e457595a: OUTPUT: «True␤»
[18:06:13] <moritz_> better :D
[18:06:58] <discord-raku-bot> <Anton Antonov#7232> Thank you!
[18:17:18] <discord-raku-bot> <Anton Antonov#7232> The solution above seems obvious after seeing it. Because of the Monterey-Raku problems, in the last 6 weeks I have been programming too much in Python -- not Raku -- so, I have some sort of mild Pythonitis...
[18:21:26] <discord-raku-bot> <Nemokosch#9980> lol
[18:21:27] <discord-raku-bot> <Nemokosch#9980> what is that like?
[18:25:35] <discord-raku-bot> <Anton Antonov#7232> @Nemokosch#9980 Ah... much easier to find answers to questions than Raku. The problem is that sometimes there are too many answers for a particular question, and many of those answers are not that good or applicable. Also, at least once or twice I read, (mis-)understood, and tried to apply a Python 2 solution to som of my Python 3 problems.
[18:29:42] <discord-raku-bot> <Anton Antonov#7232> Another, more important point is that there are lots of "functionalities" implemented in Python -- in Raku too many things I have to do from scratch. (For the things I am interested in.)
[18:29:43] <discord-raku-bot> <Nemokosch#9980> there are more libs I guess
[18:30:08] <discord-raku-bot> <Nemokosch#9980> on language level, I would be lowkey surprised if there were significant features in Python that Raku misses, I've never had that experience
[18:30:21] <discord-raku-bot> <Nemokosch#9980> and I've used Python way more
[18:35:05] *** Joins: monkey_ (~user@181.114.17.106)
[19:08:59] <discord-raku-bot> <Anton Antonov#7232> Agreed, on "language level" Raku is better. (That is why I invest time in it.)
[19:10:00] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[19:10:57] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[19:13:08] <discord-raku-bot> <Anton Antonov#7232> @Nemokosch#9980 Have you used Python for scientific computations? And/or scientific visualizations?
[19:34:22] <discord-raku-bot> <Nemokosch#9980> not really, no
[19:37:56] <discord-raku-bot> <Anton Antonov#7232> I plan to make a blog post that compares Mathematica, Python, R, and Raku on random data generation.
[19:38:40] *** Joins: melezhik (~melezhik@163.185.148.245)
[19:38:40] <melezhik> .
[19:38:57] <melezhik> I have just released Sparrowdo with a new feature - watcher jobs - https://raku.land/zef:melezhik/Sparrowdo/changes?v=0.1.13
[19:51:27] *** Joins: a (~a@82-169-44-157.biz.kpn.net)
[19:51:41] *** Quits: a (~a@82-169-44-157.biz.kpn.net) (Client Quit)
[20:04:50] <Altai-man> melezhik++
[20:08:42] *** Joins: MoC (~moc@user/moc)
[20:16:54] *** Joins: jgaz (~jgaz@2600:8805:d982:4233:2e0:4cff:fe00:e201)
[20:45:59] *** Quits: Zero_Dogg (~zerodogg@2a02:fe1:b002:100:215:17ff:fed8:8c8) (Ping timeout: 252 seconds)
[20:47:51] *** Joins: Zero_Dogg (~zerodogg@2a02:fe1:b002:100:215:17ff:fed8:8c8)
[20:51:57] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[20:52:06] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[20:52:50] *** Quits: melezhik (~melezhik@163.185.148.245) (Ping timeout: 256 seconds)
[21:00:45] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[21:08:08] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 256 seconds)
[21:14:06] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[21:15:07] *** Joins: ab5tract (~ab5tract@2a02:a210:8ad:1f03:8aba:3797:5d42:5ef5)
[21:16:07] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[21:16:47] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 252 seconds)
[21:26:11] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[21:26:21] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[21:32:50] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:35:57] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[21:51:56] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[21:58:10] *** Quits: SmokeMachine (sid19088@tinside.irccloud.com) (Read error: Connection reset by peer)
[21:58:16] *** Quits: skaji (sid178483@tinside.irccloud.com) (Ping timeout: 245 seconds)
[21:58:34] *** Joins: jjido (~Denis@90.213.58.125)
[21:58:48] *** Quits: rjbs (sid498898@uxbridge.irccloud.com) (Read error: Connection reset by peer)
[21:59:13] *** Joins: SmokeMachine (sid19088@id-19088.tinside.irccloud.com)
[21:59:18] *** Joins: skaji (sid178483@id-178483.tinside.irccloud.com)
[21:59:22] *** Joins: rjbs (sid498898@id-498898.uxbridge.irccloud.com)
[22:09:50] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[22:09:58] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[22:25:06] <ab5tract> hey all, how's it going? I was happy to hear that we have a new release manager!
[22:25:19] <Geth> ¦ doc/codesections-str-seq: c9aa67e804 | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Language/operators.pod6
[22:25:19] <Geth> ¦ doc/codesections-str-seq: Document behavior of sequences like `'aa'…'cc'` 
[22:25:19] <Geth> ¦ doc/codesections-str-seq: 
[22:25:19] <Geth> ¦ doc/codesections-str-seq: The sequence `'aa'…'cc'` does not use a `*.succ` default generator
[22:25:19] <Geth> ¦ doc/codesections-str-seq:  (and this is correct [per Roast](https://github.com/Raku/roast/blob/master/S03-sequence/nonnumeric.t#L58).
[22:25:20] <Geth> ¦ doc/codesections-str-seq: 
[22:25:20] <Geth> ¦ doc/codesections-str-seq: See also https://stackoverflow.com/questions/70239228/can-raku-range-operator-on-strings-mimic-perls-behaviour/70239585 
[22:25:21] <Geth> ¦ doc/codesections-str-seq: and the links cited in the answers.
[22:25:23] <Geth> ¦ doc/codesections-str-seq: review: https://github.com/Raku/doc/commit/c9aa67e804
[22:26:54] <Geth> ¦ doc: codesections++ created pull request #3996: Document sequences like 'aa'…'cc'
[22:26:54] <Geth> ¦ doc: review: https://github.com/Raku/doc/pull/3996
[22:29:34] <tonyo> who's the new release manager?
[22:30:25] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:34:11] <lizmat> jdv
[22:50:25] <[Coke]> jdv++
[22:52:52] *** Joins: jjido (~Denis@90.213.58.125)
[22:53:11] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[22:54:40] *** Quits: gordonfish- (~gordonfis@user/gordonfish) (Ping timeout: 256 seconds)
[23:02:46] <Geth> ¦ doc/codesections-str-seq: e0cfc6644a | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Language/operators.pod6
[23:02:47] <Geth> ¦ doc/codesections-str-seq: Fix whitespace/typo
[23:02:47] <Geth> ¦ doc/codesections-str-seq: review: https://github.com/Raku/doc/commit/e0cfc6644a
[23:04:13] *** Quits: ab5tract (~ab5tract@2a02:a210:8ad:1f03:8aba:3797:5d42:5ef5) (Ping timeout: 256 seconds)
[23:08:24] <Geth> ¦ doc/codesections-str-seq: d02443b724 | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Language/operators.pod6
[23:08:24] <Geth> ¦ doc/codesections-str-seq: Fix typo
[23:08:24] <Geth> ¦ doc/codesections-str-seq: review: https://github.com/Raku/doc/commit/d02443b724
[23:24:52] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[23:25:02] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[23:30:38] <Geth> ¦ doc: d4688c653b | (Daniel Sockwell)++ (committed using GitHub Web editor) | doc/Language/operators.pod6
[23:30:38] <Geth> ¦ doc: Document sequences like 'aa'…'cc' (#3996)
[23:30:38] <Geth> ¦ doc: 
[23:30:38] <Geth> ¦ doc: * Document behavior of sequences like `'aa'…'cc'` 
[23:30:38] <Geth> ¦ doc: 
[23:30:38] <Geth> ¦ doc: The sequence `'aa'…'cc'` does not use a `*.succ` default generator
[23:30:39] <Geth> ¦ doc:  (and this is correct [per Roast](https://github.com/Raku/roast/blob/master/S03-sequence/nonnumeric.t#L58).
[23:30:40] <Geth> ¦ doc: 
[23:30:41] <linkable6> Link: https://docs.raku.org/language/operators
[23:30:42] <Geth> ¦ doc: See also https://stackoverflow.com/questions/70239228/can-raku-range-operator-on-strings-mimic-perls-behaviour/70239585 
[23:30:44] <Geth> ¦ doc: and the links cited in the answers.
[23:30:46] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/d4688c653b
[23:31:22] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[23:33:51] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[23:33:59] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[23:39:30] <[Coke]> codesections++
[23:40:17] *** Joins: polettix_ (~polettixx@linode.polettix.it)
[23:40:54] *** Joins: Skarsnik_ (~Skarsnik@91-170-31-218.subs.proxad.net)
[23:42:22] <Geth> ¦ CCR/main: 507a983715 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | Remaster/Zoffix Znet/IRC-Client-Raku-Multi-Server-IRC-or-Awesome-Async-Interfaces-with-Raku.md
[23:42:22] <Geth> ¦ CCR/main: s/freenode/libera.chat
[23:42:22] <Geth> ¦ CCR/main: review: https://github.com/Raku/CCR/commit/507a983715
[23:44:31] *** Quits: polettix (~polettixx@linode.polettix.it) (Ping timeout: 260 seconds)
[23:44:31] *** Quits: JRaspass (~JRaspass@68.183.32.235) (Ping timeout: 260 seconds)
[23:50:19] *** Joins: ab5tract (~ab5tract@2a02:a210:8ad:1f00:2f21:e706:6b74:38e3)
[23:50:48] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[23:50:57] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[23:51:27] *** Joins: JRaspass (~JRaspass@68.183.32.235)
[23:52:43] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[23:52:52] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[23:54:39] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[23:54:47] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[23:56:38] <tonyo> good stuff
[23:56:43] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[23:56:57] <tonyo> eh lizmat when groups is ready who is going to be admin for the rakudo community modules group?
[23:57:42] <lizmat> I guess that would be an RSC responsibility....  we have a meeting next Sat, will discuss
[23:58:44] <Geth> ¦ CCR/main: 2b424a0843 | (Elizabeth Mattijsen)++ | Remaster/Zoffix Znet/IRC-Client-Raku-Multi-Server-IRC-or-Awesome-Async-Interfaces-with-Raku.md
[23:58:44] <Geth> ¦ CCR/main: Some more s/freenode/libera
[23:58:44] <Geth> ¦ CCR/main: review: https://github.com/Raku/CCR/commit/2b424a0843
