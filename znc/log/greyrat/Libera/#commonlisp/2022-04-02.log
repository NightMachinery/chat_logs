[00:01:56] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[00:05:57] *** Joins: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9)
[00:15:15] *** Quits: prokhor (~Prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net) (Ping timeout: 260 seconds)
[00:16:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[00:17:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:18:27] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[00:18:58] *** Joins: Oddity (~Oddity@user/oddity)
[00:22:40] *** Quits: cage (~cage@dynamic-adsl-94-34-56-60.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:34:01] *** Quits: cosimone (~user@93-47-230-184.ip115.fastwebnet.it) (Remote host closed the connection)
[00:34:11] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:36:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:43:49] *** Quits: attila_lendvai (~alendvai@2a02:ab88:7509:f780:ed82:a496:f55:e07b) (Ping timeout: 240 seconds)
[00:45:47] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[00:45:47] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[00:45:58] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:47:13] *** Lord_of_Life_ is now known as Lord_of_Life
[00:49:21] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[00:51:02] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[00:59:00] *** Quits: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 240 seconds)
[00:59:44] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[01:08:32] <dbotton> Every thread has its own context so a dynamically bound variable would be like a lexical variable in that is should not need protection correct?
[01:10:52] <Bike> protection?
[01:10:59] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:14:12] <dbotton> thread protection
[01:20:06] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[01:20:51] *** Joins: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:24:17] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[01:27:07] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[01:27:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:28:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:31:41] <Guest74> is there some simple encode/decode ieee half floats to octets?
[01:31:43] <jackdaniel> threads are not specified in the standard, but usually special variables bindings are thread-local
[01:37:37] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 272 seconds)
[01:42:14] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Remote host closed the connection)
[01:48:28] <pjb> Guest74: integer-decode-float
[01:53:15] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 260 seconds)
[01:53:46] <Guest74> thanks pjb: that would help with one side of the equation
[01:54:05] <dbotton> jackdaniel thank you, never thought that dynamic variables would be so handy, added an optional cache to clog in just a few lines.
[02:05:34] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[02:05:53] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:12:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:13:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:15:36] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:16:17] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[02:17:03] *** Joins: Bike (~Bike@71.69.170.70)
[02:22:17] *** Joins: lisp123 (~lisp123@143.238.171.43)
[02:23:08] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[02:28:47] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[02:31:36] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[02:33:58] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[02:52:31] *** Quits: Psybur (~Psybur@2600:1003:b1ac:50a1:b89b:d859:b11b:4ef1) (Ping timeout: 260 seconds)
[02:53:13] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[02:56:07] *** Parts: didi (~user@user/didi) (O bella ciao bella ciao bella ciao, ciao, ciao.)
[02:58:44] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[02:58:59] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[03:04:39] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[03:05:12] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[03:05:45] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[03:08:29] *** Joins: lisp123 (~lisp123@143.238.171.43)
[03:10:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[03:10:42] *** Joins: occ (~occ@user/occ)
[03:14:22] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Quit: WeeChat 3.4)
[03:15:32] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[03:15:46] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[03:20:08] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[03:21:52] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[03:22:55] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[03:34:59] *** Joins: Bike (~Bike@71.69.170.70)
[03:44:59] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 246 seconds)
[03:49:53] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[03:50:38] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[03:51:51] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[03:52:18] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[03:56:27] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[03:57:34] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[03:59:08] *** Joins: aeth (~aeth@user/aeth)
[04:07:19] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[04:14:14] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[04:17:48] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[04:19:09] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[04:28:30] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[04:33:19] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[04:38:01] *** Joins: occ (~occ@user/occ)
[04:45:09] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[04:58:52] *** Joins: Bike (~Bike@71.69.170.70)
[05:05:17] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[05:09:41] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[05:33:21] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:34:28] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[05:38:17] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[05:41:53] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Ping timeout: 256 seconds)
[05:43:20] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[05:47:33] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:50:45] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:10:19] *** Joins: yewscion (~yewscion@c-73-214-119-161.hsd1.pa.comcast.net)
[06:16:41] *** Joins: occ (~occ@user/occ)
[06:20:21] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 245 seconds)
[06:20:28] *** Joins: Inline__ (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de)
[06:22:59] *** Quits: Inline (~Inline@p200300cd470b2600b0280ee525100d94.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:25:32] *** Joins: lisp123 (~lisp123@143.238.171.43)
[06:27:54] *** Joins: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04)
[06:29:09] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[06:29:40] *** Quits: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04) (Client Quit)
[06:30:11] *** Joins: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04)
[06:32:03] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[06:33:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:34:01] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[06:34:55] *** Quits: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04) (Ping timeout: 256 seconds)
[06:36:42] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[06:48:08] *** Quits: Jach (~Jach@2601:600:8600:94:feb2:bfe0:bb3a:ea8d) (Remote host closed the connection)
[06:52:51] *** Joins: Jach (~Jach@2601:600:8600:94:feb2:bfe0:bb3a:ea8d)
[07:01:53] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[07:06:53] <lisp123> Are there any linters for CL?
[07:24:12] *** Joins: Bike (~Bike@71.69.170.70)
[07:29:41] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[07:30:26] <beach> Good morning everyone!
[07:30:53] <beach> lisp123: I think Bike is working on one.  I don't know the state of it though.
[07:31:23] <lisp123> beach: Good morning! And thanks
[07:31:31] <Bike> pretty much just a glimmer in my eye so far. i haven't yet thought out what would be good to have, other than checking for unused functions.
[07:32:17] <lisp123> heh, unused functions was the first thing that came to my mind
[07:33:43] <saturn2> there's LISP-CRITIC
[07:34:24] *** Joins: jeosol (~jeosol@user/jeosol)
[07:34:45] <saturn2> https://courses.cs.northwestern.edu/325/exercises/critic.php#critic
[07:36:09] <contrapunctus> o/
[07:36:15] *** Quits: occ (~occ@user/occ) (Ping timeout: 260 seconds)
[07:39:50] <contrapunctus> Does anyone know how to specify a foreign key using CLSQL's `create-table` ? I tried `(create-table [table-name] '(([col] integer :not-null :references other-table [col])))` but got `The value  #<CLSQL-SYS:SQL-IDENT-ATTRIBUTE COL> is not of type  SYMBOL` 🤔️
[07:47:21] <Bike> i guess i can check what other linters do. this looks promising https://pylint.pycqa.org/en/latest/messages/messages_list.html
[07:48:00] *** Joins: semz_ (~semz@user/semz)
[07:48:07] <Bike> lisp critic mostly looks like style issues, and just uses a pattern matcher rather than an involved analysis
[07:50:31] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[07:52:24] <Bike> "A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable." boy, that's familiar
[07:56:54] <beach> Heh.
[07:58:05] *** Joins: asarch (~asarch@2806:10ae:7:2198:c359:d1ec:eb4b:c2b9)
[07:58:54] <Nilby> contrapunctus: I used to just specify them using the :constraints keyword, but I was probably using a different database that worked that way.
[08:00:11] <asarch> How would print a value using the currency format (e.g (format t "Your debt is: …"))?
[08:03:38] <beach> asarch: What is a "currency format"?
[08:03:59] <asarch> Money?
[08:04:45] <beach> You don't care what currency it is?
[08:04:51] <Bike> (format t "Your debt is: ¤~d.~d" (floor ncents 100) (mod ncents 100))
[08:05:06] <Bike> assuming this is decimal currency and not 1700s pounds or something
[08:05:23] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[08:05:33] <contrapunctus> Nilby: I see, thanks again 🙂️
[08:06:11] <Bike> oh, make the second one ~2,'0d
[08:06:17] <beach> Some currencies write the currency sign (if there is one) before the amount.  Most of them after it.
[08:06:41] <Bike> would get funky with negative cash, also...
[08:06:49] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[08:07:20] <beach> That's why I was asking "what is a `currency format'", because I don't think there is such a thing.
[08:08:00] <Alfr> Bike, if you place two cash units on that table, then the table will be empty?
[08:08:19] <Bike> table...?
[08:08:53] <asarch> Thank you!
[08:08:59] <asarch> Thank you very much! :-)
[08:09:03] <Alfr> Bike, furniture!
[08:11:23] *** Quits: asarch (~asarch@2806:10ae:7:2198:c359:d1ec:eb4b:c2b9) (Quit: Leaving)
[08:11:29] <contrapunctus> Nilby: say, since you seem to have worked with CLSQL - is there any way to prevent it from upcasing table names? e.g. `create-table` as used above would create a table called "TABLE_NAME" rather than "table_name"...the only workaround I know of is to use `(execute-command <SQL string>)` 🤔️
[08:13:46] <Nilby> contrapunctus: Perhaps you can just use a string for the table name? The [foo] syntax ususually converts to upper case.
[08:16:49] <contrapunctus> Nilby: aha, that works, thanks! :D
[08:17:01] <Nilby> contrapunctus: I find a useful thing is to see what strings it ends up generating with start-sql-recording
[08:17:15] <contrapunctus> didn't notice that it accepts strings too
[08:18:13] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:18:13] <Nilby> btw, I think you can probably do (create-table [table-name]'(([col] integer :not-null)) :constraints "references other-table (col)") in something like postgresql
[08:19:21] <lisp123> contrapunctus: why not use sqlite?
[08:19:40] <lisp123> for most cases its much better imo
[08:20:34] <contrapunctus> lisp123: that's just what I'm using, via `clsql-sqlite3` ...or do you mean `cl-sqlite` ? 🤔️
[08:21:17] <lisp123> oh, i use cl-sqlite, sorry didn't fully follow and though you were using MySQL or Maria
[08:25:10] <Nilby> the nice thing about using clsql is you can potentially switch from sqlite to something with a trillion rows sharded across datacenters without chaning much code
[08:25:41] <lisp123> Good point
[08:26:44] *** Quits: yewscion (~yewscion@c-73-214-119-161.hsd1.pa.comcast.net) (Ping timeout: 272 seconds)
[08:30:09] *** Joins: pillton (~user@203.63.110.191)
[08:37:36] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:38:18] <lisp123> quick quesiton for anyone using hunchensocker
[08:38:35] <lisp123> how to send a message to a single peer? Say I receive a message from a particular user
[08:39:45] <lisp123> via something like (defmethod hunchensocket:text-message-received ((room chat-room) user message) ---> how do I get the "peer" to send the message to in something like (hunchensocket:send-text-message peer (apply #'format nil message args))
[08:40:12] <hayley> That would be the USER parameter
[08:40:22] <lisp123> hayley: Thanks!
[08:40:28] <hayley> (hunchensocket:send-text-message user "blah")
[08:40:56] <hayley> ...I hope. I'm just gleaning off the cl-decentralise1 code, which uses Hunchensocket. And my memory of it isn't great.
[08:42:02] <hayley> The other thing I notice is that it doesn't lock to push and pop off an "event list", which also will produce messages out of order. lol, this code is shit.
[08:42:54] <lisp123> lol
[08:43:04] <lisp123> just testing now, but i think it should work
[08:43:17] <hayley> So do I, I recall this code working.
[08:43:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:45:26] <lisp123> Works!
[08:45:30] <hayley> Nice!
[08:45:33] <lisp123> Thanks again
[08:46:25] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:47:23] <hayley> It reminds me, I've started writing a manual for one-more-re-nightmare at <https://applied-langua.ge/projects/one-more-re-nightmare/>. I can think of a few things to add, still.
[08:47:30] <contrapunctus> lisp123: does cl-sqlite have an s-expression syntax for SQL? Or perhaps there's one that is available separately from cl-sqlite?
[08:48:01] <lisp123> been ages since I used cl-sqlite, ironically enough, I need to use it today/tomorrow so will let you know
[08:48:17] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[08:48:56] <hayley> ("Now, how do you get reminded of _that_?" Well, I'm glad I replaced cl-decentralise1 with...cl-decentralise2, but I never actually bothered with implementing websockets for cl-decentralise2, years later. And I borrowed the documentation template from the Netfarm book for this manual.)
[08:49:36] <lisp123> hayley: Indeed I was trying to make the connection on how you got reminded to update a manual from websockets
[08:50:27] <lisp123> contrapunctus: https://cl-sqlite.common-lisp.dev/ for how it works
[08:51:06] <lisp123> I don't see s-exp syntax
[08:51:09] <contrapunctus> lisp123: I saw that and didn't see any s-expression syntax, hence the question
[08:51:17] <contrapunctus> cool 😄️
[08:51:19] <lisp123> I can't imagine it will then
[08:51:29] <lisp123> I saw the code, it was pretty small all things considered
[08:51:45] <contrapunctus> oh, there's SXQL, looks like
[08:52:50] <lisp123> 275 stars, sign of quality
[08:57:47] <Nilby> Is there a mistake in CLHS for prog2 ?
[09:00:11] <beach> Nilby: https://www.cliki.net/ANSI%20Clarifications%20and%20Errata
[09:06:25] <Nilby> I wish I could unsee that
[09:12:59] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[09:27:43] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:28:17] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[09:33:14] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[09:38:54] *** Joins: hashfunce31 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[09:40:34] <hashfunce31> am i better off using SBCL's built-in FFI or the CFFI extension? i'm trying to follow the CFFI tutorial, but i'm finding it incredibly difficult to follow/connect-the-core-ideas
[09:40:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[09:41:16] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:41:25] <hayley> As a general rule of thumb, stick to the portable libraries like CFFI.
[09:42:29] <hashfunce31> hayley: from what i'm seeing thus far, CFFI is seeming to be overly-redundant and overly-complex for what it accomplishes
[09:42:46] <hashfunce31> ^ as well as the tutorial
[09:43:00] <hayley> I haven't seen that.
[09:44:25] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[09:47:08] *** Joins: lisp123 (~lisp123@143.238.171.43)
[09:59:01] <boigahs> I found it easier to just ignore the tutorial and skim through the docs to find what I need
[09:59:26] <boigahs> Most of it is pretty straight forward, but the tutorial skips to the crazy stuff pretty fast
[10:02:59] *** Joins: occ (~occ@user/occ)
[10:07:49] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[10:16:27] <hashfunce31> i think i'm gonna go for the pure SBCL approach
[10:19:17] <rotateq> hashfunce31: in which context? :)
[10:20:53] <hashfunce31> rotateq: in the context of me using it haha
[10:22:11] <rotateq> haha okay
[10:22:37] <rotateq> else I would have said try writing as much ANSI compliant code as you can
[10:23:08] <rotateq> there is much for me to discover with just SBCL still
[10:26:24] <hashfunce31> rotateq: yeah i'm definitely gonna aim for that as a primary goal. IMO i feel as if SBCL has solidified itself insomuch as being the future of the language (not so say other implementations will always be relevant as well). sort of akin to how GCC & Clang are to C++
[10:27:22] <hashfunce31> i feel as if C++ isn't really even C++. but more so the question is, "can you program in GCC?" or "can you program in Clang?"
[10:27:29] <rotateq> I thought the part of the "future" is SICL.
[10:27:43] <hashfunce31> i could see that as well
[10:28:03] <rotateq> There is also CLASP which aims to talk directly to C++ and LLVM.
[10:28:52] <hashfunce31> that's true, but that seems to be a niche market
[10:29:05] <rotateq> hashfunce31: so when a new implementation rises the SICL modules can be used to have a well written ANSI-compliant one quickly
[10:29:26] <rotateq> you think so? why that?
[10:32:06] <rotateq> With C++ it may be that it's too complex for even most of the experts. But you know, complexity sells better.
[10:32:32] <hashfunce31> i'm just basing my thought-process on the language being used as a whole, with the primary metric being which language startups are choosing. and based off of what i've read so far, C/C++ are on the list, but definitely not the top of the list
[10:33:27] <rotateq> Yes now you are on another track for a wonderful journey. :)
[10:33:42] <hashfunce31> yeah, i think the one of the primary benefits of C++ is job security. that is for sure
[10:34:03] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[10:34:42] <rotateq> When calling things from the outside we mostly have to go over C but okay, CCL for example offers more for Objective-C. But we're lucky as we can write bindings in CL and have all benefits at hand.
[10:35:17] <hashfunce31> that is why i think lisp has to be the future
[10:35:43] <rotateq> hashfunce31: Yes and if they pay well for the pain, you can say "Sure, I can make a port of my very fast made prototype, but it will be slower and takes five times longer to translate."
[10:36:03] <hashfunce31> if history follows the same pattern, "... there is no new thing under the sun.” then it should come full circle back to lisp
[10:36:34] <rotateq> ahhh okay :) So maybe we can stop here. But if you have a question don't bother to ask in #clschool.
[10:37:04] <hashfunce31> for sure. thanks rotateq. have a nice rest of the day/evening
[10:37:46] <rotateq> Pleasure, you too.
[10:39:39] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[10:40:19] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:45:13] *** Quits: hashfunce31 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[10:53:36] *** Joins: attila_lendvai (~alendvai@2a02:ab88:7509:f780:ed82:a496:f55:e07b)
[11:05:24] *** Quits: attila_lendvai (~alendvai@2a02:ab88:7509:f780:ed82:a496:f55:e07b) (Ping timeout: 240 seconds)
[11:10:24] *** Joins: lisp123 (~lisp123@143.238.171.43)
[11:12:37] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[11:12:50] *** Joins: lisp123 (~lisp123@143.238.171.43)
[11:12:59] *** Quits: yagamisato (~SingSong@user/yagamisato) (Ping timeout: 252 seconds)
[11:14:35] *** Joins: yagamisato (~SingSong@221.179.69.238)
[11:14:35] *** Quits: yagamisato (~SingSong@221.179.69.238) (Changing host)
[11:14:35] *** Joins: yagamisato (~SingSong@user/yagamisato)
[11:20:11] *** Quits: Madsy (~madsy@223.239.164.82.customer.cdi.no) (Ping timeout: 256 seconds)
[11:20:24] *** Joins: Madsy (~madsy@223.239.164.82.customer.cdi.no)
[11:23:04] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[11:28:25] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.5)
[11:37:52] <contrapunctus> Is there any Common Lisp equivalent of Emacs Lisp's `add-variable-watcher` ? I use it to update program object slots when the user changes the value of a certain variable...
[11:42:46] *** Joins: lisp123 (~lisp123@143.238.171.43)
[11:45:14] <rotateq> contrapunctus: CLOS provides updating instances when things for it changed automatically the next time an object is touched.
[11:48:02] <contrapunctus> rotateq: can I watch a global variable for changes using that?
[11:48:57] <rotateq> Can you show some example code? Then I would have better imagination about what you exactly mean.
[11:50:36] <rotateq> but from what I understand, if you have a global variable (aka parameter) as a dummy instance of your class sure
[11:51:55] <contrapunctus> rotateq: sure; I'm porting this Elisp program to Common Lisp, and this is the user-customizable global variable which is watched for changes. When it is changed, the slots of the active backend object are updated - https://tildegit.org/contrapunctus/chronometrist/src/branch/dev/elisp/chronometrist.org#headline-103
[11:52:46] <rotateq> But no guarantee I can really be of any help. :)
[11:52:47] <lisp123> contrapunctus: you would want to add some after methods then on the writer function
[11:54:21] <lisp123> Assume you have a class (defclass test () ((key :initarg :key :accessor key))
[11:55:00] <beach> I think you are misunderstanding what contrapunctus wants.
[11:55:26] <rotateq> Yes beach I'm not so sure yet.
[11:55:29] <lisp123> You can store the global variable as a CLOS object no?
[11:55:41] <lisp123> And then add an after method on its writer function
[11:56:03] <beach> contrapunctus: I assume you mean that you want to catch when someone does (setf *var* <mumble>) for some arbitrary variable *var*, yes?
[11:56:22] <beach> contrapunctus: There is no such mechanism in Common Lisp.
[11:57:39] <contrapunctus> beach: exactly that, yes...
[12:00:08] <contrapunctus> ...on second thoughts, perhaps I don't I want to support that kind of customization either - it could just as well take place through a dedicated function. Thanks ^^
[12:00:27] <beach> That would be better.
[12:11:37] <lisp123> Is there a syntax for multi-line comments? Like /* */
[12:12:56] <hayley> #| ... |#
[12:13:26] <hayley> However, it doesn't let you write underhanded code by nesting comments.
[12:13:50] <lisp123> hayley: Thanks! I was trying |#
[12:30:00] <lisp123> At how many elements does it make sense to store in a hash table vs. alist?
[12:32:15] <hayley> It depends on your machine, access patterns, hash table implementation, etc, but a rule of thumb is about 10 elements or fewer being faster for alists.
[12:32:59] <lisp123> Thanks
[12:33:19] <hayley> I think I measured the crossover point for SICL's linear probing hash table, and SICL's alist "hash table" to be around 6.
[12:34:20] <lisp123> Nice
[12:36:13] <lisp123> That got me thinking, I wonder if this is a place for automated profiling and adjustments
[12:36:28] <lisp123> i.e. if the data coming in is consistently small in size, the system adjusts to using alists
[12:37:15] <hayley> I've thought about it in the past.
[12:37:27] <lisp123> I am going to do it manually in YASON (JSON parser), because I know a username/password is only 2 elements so better to store in an :alist whereas input data is definitely most likely going to be big
[12:37:43] *** Quits: Madsy (~madsy@223.239.164.82.customer.cdi.no) (Ping timeout: 260 seconds)
[12:38:08] <hayley> Tricky, but the payoff is there. Another option would be to have a hash table which doesn't actually hash, if the table is really small. Instead it would basically do FIND on its keys.
[12:38:11] *** Quits: occ (~occ@user/occ) (Ping timeout: 260 seconds)
[12:38:31] <lisp123> oh yes, that's likely a better situation
[12:39:06] <lisp123> one problem I can think of is the cost of measuring the size of the data, that could easily outweigh any benefits
[12:39:43] <lisp123> Unless one did it an aggregated level (*hand-waving* - measure total size of data / number of units to get a sense of average size thus far)
[12:41:58] <lisp123> Now I wonder if the dynamic nature of CL makes it perfect for the future of technology and some form of Machine Learning in live systems
[12:48:13] <hayley> Well, another subject for runtime feedback would be sizing hash tables, adjustable arrays, and such. Say every hash table allocated somewhere has roughly the same size. We could guess that the next hash table allocated there will have a similar size, and avoid resizing.
[12:49:00] <beach> Or we could allocate an ALIST hash table and then change the class when it acquires too many elements.
[12:49:32] <hayley> That would also work, yes.
[12:50:10] <beach> I guess not change the class, but have a general hash table which changes the way elements are stored as appropriate.
[12:50:16] <hayley> I suspect using a tiny vector would be better for locality still, but the idea of changing class would still work.
[12:50:22] <hayley> Right.
[12:52:46] <pjb> Something like https://github.com/informatimago/lisp/blob/master/common-lisp/cesarum/dictionary.lisp#L47
[12:53:01] <pjb> If only somebody had implemented it 12 years ago, we could use it as a library…
[12:53:04] *** Joins: igemnace (~ian@user/igemnace)
[12:53:11] <hayley> Reminds me (again) that I've been thinking that I should take runtime feedback for how often a loop in a state machine is taken. If the loop is taken multiple times, it is faster to use SIMD. If the loop is taken very few times, it is faster to use scalar code.
[12:55:19] <hayley> lisp123: Aha, I have a graph on alists vs. SIMD vs. linear probing vs. buckets: https://raw.githubusercontent.com/no-defun-allowed/simd-sicl-hash-table/master/performance.png
[12:55:48] <_death> there was also https://github.com/binghe/GBBopen/blob/master/source/tools/atable.lisp but I'm not sure such ideas have great impact nowadays.. probably a hand-coded solution for a particular case would be even faster, and worth it by definition
[12:57:09] <lisp123> hayley: Impressive algorithms!
[12:58:04] <rotateq> lisp123: You can remember the #| (to not confuse and start with |#) thing by seeing that #\# is the standard dispatch macro character.
[12:58:10] *** Joins: prokhor (~Prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net)
[12:58:17] <hayley> I can tell you that there is a constant factor due to generic dispatch in SBCL, which makes all slower than the hash tables in SBCL. And none of the designs are new.
[12:59:59] <lisp123> pjb: Such easy to follow code, masterclass in writing well
[13:00:27] <lisp123> hayley: Any good papers to read on it?
[13:00:55] <hayley> Dispatch or hash tables? I only know of two presentations on hash table design.
[13:01:09] <lisp123> hayley: linear-probing / simd
[13:01:57] <hayley> SIMD-PROBING-HASH-TABLE is Matt Kulukundis's linear-probing hash table from <https://www.youtube.com/watch?v=ncHmEUmJZf4>. LINEAR-P-H-T is also the same hash table, but it uses trickery on normal integers for probing, rather than SIMD.
[13:02:08] <lisp123> Thanks!
[13:10:33] *** Joins: nature (~nature@mail.blazebone.com)
[13:10:52] *** Joins: s-liao (~s-liao@101.86.164.158)
[13:12:13] *** Joins: shka (~herr@109.231.3.55)
[13:12:28] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[13:18:28] *** Joins: lisp123 (~lisp123@143.238.171.43)
[13:21:34] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[13:29:22] *** Joins: s-liao (~s-liao@101.86.164.158)
[13:33:50] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:34:25] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[13:38:52] <splittist> At the previous (?) ECLS, Didier did a presentation on Quickref and/or Declt and gave some recommendations for things to include in an .asd file. Are these captured anywhere? I can't find what I want in the Declt User Guide, for example.
[13:39:36] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[13:48:24] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[14:00:08] *** Quits: Inline__ (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de) (Quit: Leaving)
[14:14:31] <splittist> Judging by clon, it would be :long-name :description :long-description :author :mailto :homepage :source-control :license (sic) and :version
[14:16:03] *** Joins: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de)
[14:24:37] <CodeBitCookie[m]> <Shinmera> "one easy way is to throw money..." <- Well, I wish I could...
[14:24:40] <CodeBitCookie[m]> Other than that?
[14:25:35] <beach> CodeBitCookie[m]: http://metamodular.com/Common-Lisp/suggested-projects.html
[14:29:49] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[14:35:37] <Shinmera> splittist: :bug-tracker is another useful one.
[14:35:54] *** Joins: cage (~cage@dynamic-adsl-94-34-56-60.clienti.tiscali.it)
[14:36:05] <beach> CodeBitCookie[m]: If you have any questions, don't hesitate to ask.
[14:41:28] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[14:46:40] *** Joins: Madsy (~madsy@223.239.164.82.customer.cdi.no)
[14:50:33] <Krystof> splittist: now contemplating a hack to make (eq :licence :license) be true
[14:50:53] <Krystof> also (eq :supersede :supercede) and (eq :referer :referrer)
[14:51:35] <Shinmera> CodeBitCookie[m]: It would personally help me a lot if more people knew about Kandria, and especially its upcoming kickstarter.
[14:54:47] *** Joins: Inline__ (~Inline@p4fedb8e0.dip0.t-ipconnect.de)
[14:57:33] *** Quits: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:00:14] *** Quits: pillton (~user@203.63.110.191) (Quit: ERC (IRC client for Emacs 27.2))
[15:06:03] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:07:28] <splittist> Interestingly (?) the ASDF manual uses :licence
[15:10:26] <lisp123> Shinmera: link to kickstarter?
[15:16:44] <_death> (setf find-symbol)
[15:16:54] *** Quits: lisp123 (~lisp123@143.238.171.43) (Quit: Leaving...)
[15:24:27] *** Joins: treflip (~user@user/treflip)
[15:26:40] *** Joins: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9)
[15:35:41] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:36:17] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[15:41:50] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[15:46:02] <Shinmera> lagash: https://kandria.com/kickstarter
[15:46:04] <Shinmera> err
[15:46:07] <Shinmera> lisp123:
[15:49:22] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[15:52:18] *** Joins: Bike (~Bike@71.69.170.70)
[15:57:33] <CodeBitCookie[m]> Shinmera: Okay, I will try to make it more popular, but I was looking for some more development, like writing some code.
[15:58:08] <beach> CodeBitCookie[m]: Did you see my link of suggested projects?
[15:58:31] <CodeBitCookie[m]> beach: Oh, I totally missed that! Let me check it out.
[15:59:17] *** Joins: random-nick (~random-ni@87.116.176.196)
[16:00:11] <CodeBitCookie[m]> beach: Wow, seems like a lot of Fun! However, what is the purpose of this project and who is making it? How many developers are already working on it?
[16:00:20] <CodeBitCookie[m]> I also was already making a Word Processor.
[16:00:43] <CodeBitCookie[m]> I was making it for commercial use, but I may make it open source now.
[16:00:49] <CodeBitCookie[m]> It's really in the basic stage.
[16:00:57] <CodeBitCookie[m]> Made with Pango, GTK and Cairo.
[16:01:51] <splittist> CodeBitCookie[m]: what formats does it read and write?
[16:01:57] <CodeBitCookie[m]> I made text, which supports all languages (although a bit buggy), a cursor and typing, deleting and stuff like that.
[16:01:57] <beach> CodeBitCookie[m]: That's a very hard question to answer.  Why does it matter?
[16:02:07] <CodeBitCookie[m]> No IO, no font selection no nothing yet.
[16:02:16] <CodeBitCookie[m]> It's only really been a week since I started.
[16:02:24] <CodeBitCookie[m]> It's fully made in CL though.
[16:02:36] <splittist> CodeBitCookie[m]: cool. Enjoy!
[16:02:38] <CodeBitCookie[m]> * splittist: No IO,
[16:02:40] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:03:22] <CodeBitCookie[m]> beach: I mean, will give me more motivation if I work on something that people will actually use, don't you agree?
[16:03:32] <CodeBitCookie[m]> Atleast one other person uses.
[16:03:35] <beach> Sure.
[16:03:55] <beach> CodeBitCookie[m]: Does your question refer to the LispOS project as a whole?
[16:04:02] <splittist> CodeBitCookie[m]: https://github.com/splittist/docxplora might help reading and writing MS Word format files (docx's)
[16:04:09] <CodeBitCookie[m]> beach: beach: Yes.
[16:04:19] <contrapunctus> I'm getting an unbound variable error when trying to ql:quickload my local system, but for some reason I don't see any line/character information about it from SBCL... 🤔️
[16:04:20] <CodeBitCookie[m]> splittist: splittist: Oh nice! Thanks.
[16:05:03] <beach> CodeBitCookie[m]: Then you need to count all the collaborators of the SICL project, because the SICL implementation is meant to be the basis of the OS.  So then we are talking about 10-20 people, off and on.
[16:05:08] <CodeBitCookie[m]> splittist: Oh you made that? That's so cool!
[16:05:45] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[16:06:04] <beach> CodeBitCookie[m]: But the OS project, as I wrote, is just a framework for the others.  Applications will be individually usable without the OS.
[16:06:38] <CodeBitCookie[m]> beach: Nice.
[16:06:40] <CodeBitCookie[m]> I see.
[16:07:44] <CodeBitCookie[m]> beach: Why SICL though? What's wrong with SBCL?
[16:08:55] <CodeBitCookie[m]> beach: I have seen this robert-strandh guy quite a lot, he seems very interesting.
[16:09:08] <CodeBitCookie[m]> He is very active and has many nice projects.
[16:09:15] <beach> CodeBitCookie[m]: That would be me.
[16:09:23] <rotateq> Hehe.
[16:09:28] <CodeBitCookie[m]> beach: What do you mean?
[16:09:38] <beach> *sigh*
[16:09:39] <CodeBitCookie[m]> you are robert?
[16:09:47] <CodeBitCookie[m]> Woahhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
[16:09:53] <beach> Yes, "beach" is the literal translation of my last name.
[16:10:04] <beach> CodeBitCookie[m]: SBCL is not a safe implementation, and can't become one either.  At least not safe enough to be used in a safe OS.
[16:10:10] <CodeBitCookie[m]> How did I not notice? You even have the CLIM translation thing!
[16:10:41] <CodeBitCookie[m]> beach: So, you would be making something on the scale o BSD?
[16:10:43] <CodeBitCookie[m]> s/o/of/
[16:10:59] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[16:11:17] <beach> A Lisp OS is way simpler than any Unix-like, so no.
[16:11:42] <beach> CodeBitCookie[m]: Look at Mezzano.  It was implemented essentially by a single person, i.e. froggey.
[16:11:47] <CodeBitCookie[m]> What about https://github.com/froggey/Mezzano
[16:11:49] <CodeBitCookie[m]> Oh.
[16:12:17] <beach> It is good, but not safe enough.  I need first-class global environments for instance.
[16:12:54] <CodeBitCookie[m]> beach: So, what is your goal here? To make it a daily-driver, or a replacement for your current OS?
[16:13:15] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[16:13:37] <CodeBitCookie[m]> If so, would it be able to support all the necessary applications?
[16:13:44] <beach> CodeBitCookie[m]: I mainly want to demonstrate that there are better options than the Unix derivatives that we are now using.
[16:14:14] <CodeBitCookie[m]> Oof, that's quite a big goal.
[16:14:18] <beach> CodeBitCookie[m]: Nah.
[16:14:26] <CodeBitCookie[m]> What do you think can be improved?
[16:14:49] <CodeBitCookie[m]> beach: Sorry, but I have a lot of questions. If you don't mind.
[16:14:51] <rotateq> CodeBitCookie[m]: As I see it SICL itself and then having an OS running on top of Linux that's very safe and very dynamic/interactive to use. Or not, beach?
[16:15:03] <beach> CodeBitCookie[m]: Let me give you some links.
[16:15:29] <CodeBitCookie[m]> rotateq: ON TOP of Linux?
[16:15:41] <contrapunctus> CodeBitCookie[m]: http://metamodular.com/closos.pdf
[16:15:47] <rotateq> CodeBitCookie[m]: The CLOSOS paper might give you some hints. How long are you now into UNIX like operating systems?
[16:15:54] <CodeBitCookie[m]> beach: rotateq: didn't beach just say this ^
[16:16:11] <rotateq> But I read it in the CLOSOS paper.
[16:16:15] <beach> CodeBitCookie[m]: https://archive.fosdem.org/2021/schedule/event/new_type_of_computer/ This is not mine, but it has a good explanation of what is wrong with the current situation.
[16:16:25] <CodeBitCookie[m]> rotateq: Not long, only around 2-3 years.
[16:16:35] <CodeBitCookie[m]> Although, I have gotten quite deep into it.
[16:16:59] <CodeBitCookie[m]> beach: Okay, let me check that.
[16:17:23] <gjvc> beach: that is a fantastic explanation of 50 years in 50 minutes and i'm in (slow) dialogue with the author, Liam Proven -- which reminds me, I must finish that email to him
[16:17:23] <beach> CodeBitCookie[m]: It is good that you are interested in the OS ideas, but don't let that distract you from writing some of the code on that list of projects.
[16:17:53] <beach> gjvc: I just had an exchange with him.  Very interesting stuff.
[16:17:53] <rotateq> Okay, one often thinks so until discovering it's not like this which doesn't mean anything specific now. :) Just that it's worth being open to new thoughts like you are.
[16:18:02] <CodeBitCookie[m]> contrapunctus: beach: Woah, beach you're quite serious into this project, you have got a full paper on this.
[16:18:11] <beach> gjvc: And he is aware of Mezzano.
[16:18:32] <beach> CodeBitCookie[m]: I am working on SICL full time, pretty much.
[16:18:54] <CodeBitCookie[m]> How long has it been?
[16:18:59] <CodeBitCookie[m]> * beach: How long
[16:19:14] <beach> Since 2008, I think.  But I didn't work full time in the beginning.
[16:19:35] <beach> CodeBitCookie[m]: I have had to invent a certain number of new techniques, and that takes time.
[16:19:50] <CodeBitCookie[m]> beach: Okay, just asking, how can I find out how much work has been done on each project on that list?
[16:20:11] <gjvc> beach: good.  his talk did demonstrate his wide-ranging research.  considering using something like amoeba as a basic i/o layer is a good strategy, and one which has not been tried enough.
[16:20:14] <CodeBitCookie[m]> beach: beach: Woah. That's a loooong time.
[16:20:16] <beach> CodeBitCookie[m]: http://metamodular.com/SICL/ is a list of published papers.
[16:20:28] <CodeBitCookie[m]> That project is almost as mature as me.
[16:20:38] <CodeBitCookie[m]> * beach: That project, * as me. 😆
[16:21:23] <beach> CodeBitCookie[m]: Some progress is mentioned on each page, but it is probably better if you look at some you might be interested in, and we can talk about those.
[16:21:49] <CodeBitCookie[m]> beach: Thanks a lot beach!
[16:22:19] <beach> Pleasure.  Good luck.
[16:22:28] <beach> CodeBitCookie[m]: We hang out in #sicl too.
[16:22:52] <CodeBitCookie[m]> Ooooh, let me join that.
[16:23:34] <CodeBitCookie[m]> beach: On Freenode?
[16:23:44] <CodeBitCookie[m]> > <@beach:libera.chat> CodeBitCookie: We hang out in #sicl too.
[16:23:44] <CodeBitCookie[m]>  * beach: On Freenode?
[16:24:01] <beach> On libera.chat
[16:25:20] <hayley> Freenode is a bit like Ravenholm, in that we don't go there anymore.
[16:26:23] <CodeBitCookie[m]> I actually use Matrix, so was just guessing it might be there.
[16:26:32] <hayley> The Matrix room name is #sicl:libera.chat. (Generally you translate by putting :libera.chat on the end.)
[16:26:45] <CodeBitCookie[m]> Yeah.
[16:27:09] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:27:34] <beach> CodeBitCookie[m]: hayley is one of the participants in the SICL project.
[16:27:37] <CodeBitCookie[m]> beach: Did you create those cute pictures on the website?
[16:27:47] <beach> On metamodular?  Yes.
[16:27:55] <CodeBitCookie[m]> beach: beach: Who's hayey?
[16:28:00] <CodeBitCookie[m]> s/hayey/hayley/
[16:28:30] <beach> CodeBitCookie[m]: The one who just told you about accessing #sicl on matrix.
[16:28:48] <CodeBitCookie[m]> beach: Wait, I know that guy from reddit!
[16:29:16] <hayley> I believe we spoke once, yes.
[16:34:02] <CodeBitCookie[m]> hayley: Yes.
[16:47:35] *** Joins: razetime (~quassel@49.207.199.125)
[17:07:43] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[17:08:29] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:09:07] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[17:12:51] *** Quits: razetime (~quassel@49.207.199.125) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:13:07] *** Joins: razetime (~quassel@49.207.199.125)
[17:13:59] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[17:14:02] <beach> CodeBitCookie[m]: I don't see you on #sicl, so I guess you didn't try to join after all?
[17:15:20] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:ac31:7ac1:bab2:710d) (Remote host closed the connection)
[17:15:44] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:67d2:d391:3f5:bf92)
[17:19:16] *** Joins: igemnace (~ian@user/igemnace)
[17:20:17] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[17:32:00] *** Joins: Bike (~Bike@71.69.170.70)
[17:41:50] *** semz_ is now known as semz
[17:49:24] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 240 seconds)
[17:50:26] *** Joins: Psybur (~Psybur@2600:1003:b1ad:503e:b062:f712:8f0b:8adc)
[17:57:54] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[18:00:12] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[18:02:08] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[18:02:45] *** Joins: s-liao (~s-liao@101.86.164.158)
[18:12:33] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[18:23:36] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[18:26:39] *** Quits: Psybur (~Psybur@2600:1003:b1ad:503e:b062:f712:8f0b:8adc) (Ping timeout: 256 seconds)
[18:28:46] *** Joins: s-liao (~s-liao@101.86.164.158)
[18:29:21] *** Joins: Psybur (~Psybur@2600:1003:b1a9:25a8:85a:5624:5153:ebdd)
[18:30:52] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[18:58:10] *** Quits: razetime (~quassel@49.207.199.125) (Ping timeout: 272 seconds)
[18:59:36] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[19:16:43] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Quit: ZNC - https://znc.in)
[19:18:54] <CodeBitCookie[m]> beach: Oh, hello.
[19:19:04] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.5)
[19:19:26] <CodeBitCookie[m]> <beach> "CodeBitCookie: I don't see you..." <- I did, I even said Hello.
[19:19:41] * CodeBitCookie[m] uploaded an image: (265KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/RtTwtYnRbvNSRoopMoRnQJcz/Apr02%3A%3A19%3A49%3A09.png >
[19:19:53] <beach> Not in #sicl.
[19:20:26] <CodeBitCookie[m]> beach: What do you mean, I sent a screenshot.
[19:20:42] <beach> Well, we didn't see anything in the IRC channel.
[19:20:58] <CodeBitCookie[m]> What do I do?
[19:21:13] <mfiano> That is not the channel hayley told you to join.
[19:22:43] *** Joins: igemnace (~ian@user/igemnace)
[19:22:50] *** Quits: igemnace (~ian@user/igemnace) (Read error: Connection reset by peer)
[19:23:19] <CodeBitCookie[m]> mfiano: Oops, I am sorry. I didn't even know there was a difference in prefixing `irc.`. I falsely assumed since all the channels I joined were prefixed with `irc`.
[19:23:28] *** Joins: igemnace (~ian@user/igemnace)
[19:23:35] <CodeBitCookie[m]> s/prefixed/named/, s/with/like/, s/`irc`./that./
[19:23:38] <mfiano> THe hint is in the big message stating that it created a new room.
[19:24:06] *** Quits: igemnace (~ian@user/igemnace) (Client Quit)
[19:24:10] <CodeBitCookie[m]> Yup, again, I didn't notice it.
[19:24:15] <CodeBitCookie[m]> s/again,//
[19:24:39] <mfiano> Also, it is much more convenient to communicate over a text protocol with a client designed for it.
[19:25:16] *** Joins: igemnace (~ian@user/igemnace)
[19:25:31] <mfiano> There can be lag of minutes at times with the relay server, making you often wonder if you are talking to a "live" person.
[19:25:46] <beach> Wow!
[19:35:31] *** Joins: occ (~occ@user/occ)
[19:45:14] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:45:48] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[19:56:35] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 246 seconds)
[20:00:21] *** Quits: shka (~herr@109.231.3.55) (Read error: Connection reset by peer)
[20:00:43] *** Joins: shka (~herr@109.231.3.55)
[20:07:10] *** Joins: Oddity (~Oddity@user/oddity)
[20:18:26] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: Textual IRC Client: www.textualapp.com)
[20:40:52] *** Joins: beach` (~user@2a01:cb19:150:3400:abfc:9bc5:6834:d598)
[20:41:32] *** Quits: beach (~user@2a01:cb19:150:3400:73a8:5148:ab1a:d8f7) (Killed (NickServ (GHOST command used by beach`!~user@2a01:cb19:150:3400:abfc:9bc5:6834:d598)))
[20:41:36] *** beach` is now known as beach
[20:43:00] *** Quits: Psybur (~Psybur@2600:1003:b1a9:25a8:85a:5624:5153:ebdd) (Ping timeout: 240 seconds)
[20:44:35] *** Joins: Psybur (~Psybur@2600:4040:4022:4000:19c2:a1cd:6600:38ba)
[20:46:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:46:49] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[20:47:44] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[20:55:13] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[20:56:04] *** Joins: v88m (~Xiro@213.87.154.193)
[21:08:20] *** Quits: v88m (~Xiro@213.87.154.193) (Ping timeout: 246 seconds)
[21:08:25] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[21:16:32] *** Joins: hhhh92 (~hhhh92@2804:14d:78b1:54b6::1005)
[21:17:16] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[21:22:41] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 246 seconds)
[21:22:52] *** Joins: razetime (~quassel@49.207.199.125)
[21:37:15] *** Quits: razetime (~quassel@49.207.199.125) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:45:55] <mfiano> I have a function, CONVERT, that generates a function by `COMPILE`ing a lambda expression, that converts between two color spaces if it is not cached in a hash table yet keyed by the given color space pair, and then funcalls the generated/cached function.
[21:45:59] <mfiano> I am wondering if it makes sense to return the function directly without funcalling, so the user can avoid the hash table lookups for potentially hundreds of thousands of pixels, and funcall it themself instead.
[21:46:04] <mfiano> That sort of leaks implementation details though, so I'm not sure. Also it would need to be named something else obviously.
[21:55:34] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[22:04:16] *** Joins: Bike (~Bike@71.69.170.70)
[22:04:19] *** Joins: Oddity (~Oddity@user/oddity)
[22:10:40] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:11:15] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[22:16:24] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[22:24:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[22:24:59] <CodeBitCookie[m]> <mfiano> "Also, it is much more convenient..." <- What are you implying?
[22:28:00] <mfiano> I'm implying that the overhead of relaying IRC across HTTP is unnecessary, and introduces more problems than it solves. Data is best transmitted over the protocol it was designed for. One problem I mentioned above. You may not receive messages for several minutes, and your messages may not be delivered for several minutes. This happens frequently with IRC over Matrix.
[22:29:17] <mfiano> The overhead is just inconvenient in a lot of ways. If you want to use Matrix, I won't stop you, but you will not be receiving the full IRC experience.
[22:29:37] <mfiano> But this is off-topic, so I will stop.
[22:31:33] <jackdaniel> my impression of matrix is that it has a very skilled marketing team ,)
[22:32:38] <mfiano> Seems to be the case with all the Web platforms the kids are using these days.
[22:36:44] *** Joins: eddof13 (~eddof13@2806:102e:12:64:44a9:6380:b1d9:f15)
[22:36:53] *** Quits: eddof13 (~eddof13@2806:102e:12:64:44a9:6380:b1d9:f15) (Client Quit)
[22:39:33] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[22:43:56] *** Quits: Psybur (~Psybur@2600:4040:4022:4000:19c2:a1cd:6600:38ba) (Ping timeout: 260 seconds)
[22:44:22] *** Joins: Psybur (~Psybur@2600:1003:b1a9:25a8:9157:2734:89e6:c88e)
[22:46:23] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Quit: ZNC - https://znc.in)
[22:57:50] *** Inline__ is now known as Inline
[23:01:43] *** Joins: eddof13 (~eddof13@2806:102e:12:64:44a9:6380:b1d9:f15)
[23:05:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[23:08:18] *** Quits: eddof13 (~eddof13@2806:102e:12:64:44a9:6380:b1d9:f15) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:24:59] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:43:54] <CodeBitCookie[m]> mfiano: You are right. This did happen. Will look more into it.
[23:45:18] <mfiano> I once waited a half hour for my message to arrive, and another half hour for the reply to arrive, when I was checking out Matrix to see what all the hype was about. Talk about asynchronous communication.
[23:46:26] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[23:47:30] <jackdaniel> disturbed computing
[23:52:51] *** Quits: cage (~cage@dynamic-adsl-94-34-56-60.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:56:33] *** Joins: lucie22 (~lucie22@host-109-88-209-116.dynamic.voo.be)
