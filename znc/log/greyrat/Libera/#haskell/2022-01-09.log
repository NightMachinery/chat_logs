[00:00:30] <bjs> [itchyjunk]: did you mean minListl not minList at the bottom line?
[00:00:30] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[00:00:39] <[itchyjunk]> !
[00:00:40] <[itchyjunk]> dangit
[00:01:04] <[itchyjunk]> that was the bug?
[00:01:07] <[itchyjunk]> /o\
[00:01:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:01:15] *** Joins: vglfr (~vglfr@88.155.96.35)
[00:01:28] <[itchyjunk]> works now..
[00:02:21] *** Quits: little_mac (~little_ma@c-24-127-188-93.hsd1.mi.comcast.net) (Remote host closed the connection)
[00:03:31] <EvanR> Inst, tutorials... better go straight to the documentation
[00:03:45] <Inst> back to haskell report 2010 it is, then
[00:04:07] <EvanR> or the ghc manual
[00:04:24] <EvanR> if you're stuck on really advanced stuff
[00:04:24] <geekosaur> the report won't have  either forall or ~
[00:05:48] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:b17c:f0c6:752d:8263)
[00:05:53] <c_wraith> the ghc manual is really quite readable
[00:08:06] <geekosaur> mostly. iirc the stuff about ~ is less so
[00:10:01] <EvanR> Inst, a ~ b is a Constraint that means a and b are the same type
[00:10:18] <Inst> thank you so much
[00:10:29] <Inst> trying to search through HPFFP
[00:10:49] *** Quits: ouestbillie (~gallup@modemcable057.194-20-96.mc.videotron.ca) (Ping timeout: 256 seconds)
[00:10:49] *** Quits: aouestbillie (~gallup@modemcable057.194-20-96.mc.videotron.ca) (Ping timeout: 256 seconds)
[00:11:04] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:1c21:9777:b34f:a2a4)
[00:11:27] <EvanR> it goes in the same place as other constraints like Ord a, which means a has (to have) an Ord instance
[00:12:02] <geekosaur> in general if you're seeing ~ as a constraint then you've kinda blown past the stuff most Haskell introductory courses cover
[00:12:03] <Inst> i'm more looking for an authoritative reference on type signatures
[00:12:25] <EvanR> it's complicated because there have been so many extensions
[00:12:57] <EvanR> and some of them are really beyond everyday use case
[00:13:32] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:1c21:9777:b34f:a2a4) (Client Quit)
[00:13:47] *** Quits: xff0x (~xff0x@2001:1a81:5298:9f00:c8df:ae8c:ee9b:1cca) (Ping timeout: 268 seconds)
[00:13:50] <c_wraith> and there are things like type families that will look like nothing new in a type signature, but actually are very different.
[00:14:13] <c_wraith> I kind of wish they had a different syntax, but it's far from clear what other syntax was available
[00:14:19] *** Joins: xff0x (~xff0x@2001:1a81:5298:9f00:374f:4390:4780:3d6)
[00:14:35] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[00:14:36] <c_wraith> especially with the ability to hide them behind a type alias
[00:15:29] *** Joins: vglfr (~vglfr@88.155.96.35)
[00:16:02] <[itchyjunk]> oh a~b means there is a type equivalence ? interesting!
[00:16:10] <[itchyjunk]> is this the precursor to HoTT stuff?
[00:16:24] <c_wraith> No, it's mostly a result of adding GADTs to the language
[00:16:38] <[itchyjunk]> hmm
[00:16:43] <c_wraith> when you pattern match on a GADT constructor, you can add evidence to the current context that two types are equivalent
[00:16:58] <c_wraith> the ~ syntax was added as a way to express that independently
[00:17:04] <[itchyjunk]> algebriac datatypes. haven't come across those yet
[00:17:41] <c_wraith> you've certainly come across algebraic datatypes. just not generalized ones.  (all uses `data' to create a type create algebraic types)
[00:17:43] <geekosaur> you probably have, just announced. but GADTs (generalized algebraic datatypes) are a bit different
[00:18:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[00:19:00] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:19:01] <geekosaur> *unannounced
[00:19:08] <geekosaur> hm, how did I do that
[00:19:34] <c_wraith> I do it all the time. It's way too easy.
[00:22:13] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[00:22:31] *** Joins: vglfr (~vglfr@88.155.96.35)
[00:25:42] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:3fb6:23a4:a917:27c7) (Quit: Client closed)
[00:26:17] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[00:26:17] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[00:26:20] *** allbery_b is now known as geekosaur
[00:27:47] *** Quits: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net) (Quit: ZNC - http://znc.in)
[00:29:17] <Inst> EvanR: I took a preview of "type-level programming"
[00:29:47] <Inst> immediately starts talking about cardinality and stuff, I'm faintly familiar with cardinality from popular science interpretations of Cantor, but your type-level stuff is really "wild"
[00:30:32] <Inst> https://leanpub.com/thinking-with-types/
[00:31:15] <EvanR> cardinality is either the number of values a type has, infinite, or you just jumped the shark and went to set theory, which is down the hall and to the left
[00:32:21] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[00:32:28] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[00:32:58] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:34:03] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:34:12] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[00:36:18] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:36:32] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[00:37:00] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:37:56] <[itchyjunk]> lol
[00:44:01] *** Joins: Garbanzo (~Garbanzo@2602:304:6eac:dc10::46)
[00:44:33] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:1c21:9777:b34f:a2a4)
[00:44:49] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[00:44:49] *** Joins: aouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[00:47:05] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[00:52:29] *** Joins: zebrag (~chris@user/zebrag)
[00:54:12] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[01:00:36] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Read error: Connection reset by peer)
[01:02:37] *** Joins: sagax (~sagax_nb@user/sagax)
[01:02:49] *** Quits: emad (~emad@156.214.64.147) (Quit: Leaving)
[01:03:51] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[01:05:44] *** Joins: Guest3 (~Guest3@88.220.154.34)
[01:05:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:08:57] *** Quits: emf (~emf@2620:10d:c090:400::5:9fd9) (Ping timeout: 240 seconds)
[01:13:29] *** Quits: anderson (~ande@user/anderson) (Ping timeout: 252 seconds)
[01:13:36] *** Joins: shapr (~user@2601:7c0:c202:5190:6f6c:93b7:78e9:4fee)
[01:14:57] *** Joins: anderson (~ande@user/anderson)
[01:16:19] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[01:19:37] *** Quits: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org) (Ping timeout: 250 seconds)
[01:19:56] *** Joins: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org)
[01:23:23] *** Quits: haskl (~haskl@user/haskl) (Ping timeout: 252 seconds)
[01:23:42] *** Joins: haskl (~haskl@user/haskl)
[01:25:51] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:26:33] *** Quits: nshepperd (~nshepperd@li364-218.members.linode.com) (Ping timeout: 250 seconds)
[01:26:36] *** Quits: Square (~a@user/square) (Ping timeout: 245 seconds)
[01:26:52] *** Joins: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9)
[01:27:14] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[01:27:30] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Quit: leaving)
[01:27:40] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[01:29:28] *** Joins: Square (~a@user/square)
[01:30:16] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[01:31:38] *** Quits: dminuoso (~dminuoso@user/dminuoso) (Ping timeout: 252 seconds)
[01:32:22] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c7271e2764e98499ffbb1b91.dip0.t-ipconnect.de)
[01:32:22] *** Joins: acidjnk (~acidjnk@p200300d0c7271e2764e98499ffbb1b91.dip0.t-ipconnect.de)
[01:33:25] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[01:35:40] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[01:36:29] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[01:36:48] *** Quits: roboguy (~roboguy@user/roboguy) ()
[01:39:04] <little_mac> cause theres an ai that can code does that mean someone can make a robot that can improve its self
[01:39:07] <little_mac> oh no
[01:39:40] <little_mac> a robot sleeping at night would be just its cpu re-compiling all its code and imporving 
[01:42:46] *** Quits: zer0bitz_ (~zer0bitz@196.244.192.61) (Read error: Connection reset by peer)
[01:43:13] <EvanR> riddle me this
[01:43:26] <EvanR> :t head
[01:43:27] <lambdabot> [a] -> a
[01:43:58] <EvanR> well, imagine we're talking about Foldable. And you want to implement a 'safe head' using a fold.
[01:44:15] <EvanR> by returning a Maybe. 
[01:44:35] <EvanR> how to do this without wrapping and unwrapping maybes
[01:44:39] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[01:44:47] <EvanR> wait, foldr
[01:45:19] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:45:47] <EvanR> duh
[01:46:02] <geekosaur> yeh, I didn't see the problem
[01:48:04] <EvanR> I should have asked this about getting a maybe minimum
[01:48:26] <EvanR> in which case you gotta traverse through all the values
[01:53:20] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Remote host closed the connection)
[01:54:24] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[01:56:02] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[01:56:56] <geekosaur> conceivably the unwraps/rewraps get optimized if ghc is smart enough to fuse the whole thing
[01:57:30] <geekosaur> hm, guess not since it'll sometimes be Nothing and sometimes Just. feh
[01:58:50] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Remote host closed the connection)
[02:01:28] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 256 seconds)
[02:01:33] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[02:02:33] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:02:55] <Rembane> Will catMaybes make it faster?
[02:03:27] <geekosaur> no?
[02:03:57] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 240 seconds)
[02:04:02] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:04:21] <geekosaur> hm, actually if there is any value in the list then only the first time is it Nothing. this might fuse after all
[02:05:44] <geekosaur> and then "wrapping"/"unwrapping" is just writing/reading the correct offset
[02:06:51] <geekosaur> which will be fixed because it's fused
[02:07:27] <geekosaur> not sure ghc is smart enough to unroll the list once to get something fusible though
[02:07:28] <EvanR> that... sounds slick... if it works
[02:08:19] <geekosaur> that might be a question for #ghc
[02:09:42] <geekosaur> hm, in fact it doesn't even need tounroll, just jump into the middle the first time through
[02:10:01] <geekosaur> bypass the unwrap and comparison and store the value
[02:11:01] *** Quits: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[02:11:39] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[02:17:17] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[02:20:34] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:25:21] *** Joins: Hayek1 (~xxx@rrcs-173-196-3-254.west.biz.rr.com)
[02:25:25] *** Quits: Brumaire (~quassel@81-64-14-121.rev.numericable.fr) (Ping timeout: 240 seconds)
[02:25:58] *** Quits: Hayek (~xxx@rrcs-173-196-3-254.west.biz.rr.com) (Read error: Connection reset by peer)
[02:26:24] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[02:27:50] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[02:29:37] *** Quits: shapr (~user@2601:7c0:c202:5190:6f6c:93b7:78e9:4fee) (Remote host closed the connection)
[02:30:37] *** Quits: Hayek1 (~xxx@rrcs-173-196-3-254.west.biz.rr.com) (Ping timeout: 240 seconds)
[02:31:27] *** Joins: Hayek1 (~xxx@rrcs-173-196-3-254.west.biz.rr.com)
[02:36:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:38:42] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[02:38:47] <Inst> technically they're infinite if they have type variables
[02:38:48] <Inst> i suppose multiplication can't break you out of low cardinalities
[02:39:11] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:41:01] *** Joins: stvc (~stvc@192.241.166.39)
[02:42:05] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Remote host closed the connection)
[02:43:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[02:45:44] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Remote host closed the connection)
[02:46:41] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[02:49:23] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[02:56:09] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[02:56:13] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[02:58:09] <EvanR> if they have type variables, the question of cardinality is deferred until someone plugs in some concrete types
[02:58:36] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[02:58:44] <EvanR> a type indexed family of cardinalities
[03:01:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:01:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:01:32] *** Joins: wroathe (~wroathe@user/wroathe)
[03:05:55] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:07:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[03:08:35] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[03:10:05] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[03:11:51] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[03:12:32] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[03:12:52] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[03:13:32] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[03:23:51] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:23:51] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:27:36] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[03:32:06] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[03:34:30] *** Joins: tremon (~tremon@217-120-53-183.cable.dynamic.v4.ziggo.nl)
[03:35:18] *** Joins: talismanick (~talismani@2601:644:8500:8350::256c)
[03:38:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:38:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:38:20] *** Joins: wroathe (~wroathe@user/wroathe)
[03:39:34] *** Quits: max22- (~maxime@2a01cb08833598001e8492dc42f658f2.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:41:25] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[03:42:51] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[03:42:52] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[03:45:35] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 256 seconds)
[03:47:22] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[03:48:51] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[03:50:09] *** Joins: jakalx (~jakalx@base.jakalx.net)
[03:53:01] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[03:58:15] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:58c5:6207:2988:1b06) (Ping timeout: 268 seconds)
[03:59:09] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[04:01:59] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Quit: Leaving)
[04:04:24] *** Joins: DNH_ (~DNH@2a02:8108:1100:16d8:c018:4e56:978b:50e2)
[04:05:05] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c7271e2764e98499ffbb1b91.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:05:05] *** Quits: acidjnk (~acidjnk@p200300d0c7271e2764e98499ffbb1b91.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:05:09] *** Quits: DNH_ (~DNH@2a02:8108:1100:16d8:c018:4e56:978b:50e2) (Client Quit)
[04:05:50] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[04:06:53] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:1c21:9777:b34f:a2a4) (Ping timeout: 268 seconds)
[04:10:37] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 240 seconds)
[04:11:48] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[04:15:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:16:45] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[04:16:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:18:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:18:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:18:52] *** Joins: wroathe (~wroathe@user/wroathe)
[04:20:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[04:20:52] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:20:53] *** Joins: pavonia (~user@user/siracusa)
[04:23:17] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[04:31:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:35:44] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:42:18] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[04:43:07] <lechner> Hi, is it possible to extend Hasql (or perhaps PostgreSQL.Binary.Encoding) with a data type from an extension?
[04:44:40] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[04:51:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[04:59:36] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[05:05:49] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 240 seconds)
[05:07:49] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[05:07:57] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 268 seconds)
[05:20:47] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[05:23:56] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:25:37] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[05:27:39] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[05:32:09] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[05:32:27] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:b17c:f0c6:752d:8263) (Remote host closed the connection)
[05:33:02] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:b17c:f0c6:752d:8263)
[05:33:19] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[05:34:12] *** Joins: vysn (~vysn@user/vysn)
[05:35:05] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[05:36:01] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:36:05] *** Joins: justIrresolute (~justache@user/justache)
[05:36:48] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[05:41:02] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[05:41:25] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:44:40] *** Joins: califax- (~califax@user/califx)
[05:45:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:48:24] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:48:25] *** califax- is now known as califax
[05:49:32] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[05:51:01] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Client Quit)
[05:51:08] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[05:58:11] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 256 seconds)
[05:58:55] *** Joins: machinedgod (~machinedg@24.105.81.50)
[05:59:25] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[05:59:36] *** Joins: neurocyte09172 (~neurocyte@IP-094016064252.dynamic.medianet-world.de)
[05:59:36] *** Quits: neurocyte09172 (~neurocyte@IP-094016064252.dynamic.medianet-world.de) (Changing host)
[05:59:36] *** Joins: neurocyte09172 (~neurocyte@user/neurocyte)
[06:01:11] <lechner> Hi, is 'pure' a suitable no-op in a monadic 'case' expression? Sorry if that language makes no sense
[06:01:25] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:01:25] *** neurocyte09172 is now known as neurocyte0917
[06:03:25] *** Quits: xff0x (~xff0x@2001:1a81:5298:9f00:374f:4390:4780:3d6) (Ping timeout: 240 seconds)
[06:05:34] *** Joins: xff0x (~xff0x@2001:1a81:52d4:9900:80b8:248c:472c:34e)
[06:08:48] <monochrom> Yes, especially "pure ()"
[06:10:04] <lechner> monochrom: thanks!
[06:10:27] <lechner> what should go near the 'Right' please?   https://paste.tomsmeding.com/vx0y49YN
[06:11:08] <lechner> a is ()
[06:13:23] <monochrom> Go back one step. "Session.run (addVersionSession version committish tags) connection >>= \e -> case e of Left error -> ... Right _ -> ...".  Or use do-notation.
[06:13:43] <monochrom> You have "IO (EIther ...)" not plain "Either ...".
[06:14:58] *** Joins: razetime (~quassel@49.207.213.63)
[06:23:49] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 240 seconds)
[06:25:12] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[06:26:30] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0::7e04) (Quit: Leaving)
[06:26:31] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:26:56] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[06:28:38] <lechner> oh, i see. it went back in the monad when i moved it from    Right error <-   (which caused a missed match on success)
[06:31:37] <lechner> how does that look with 'do' please?
[06:33:15] <lechner> i think my issue is simply that i want to do nothing on   Right _
[06:35:05] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[06:35:37] <lechner> Why doesn't that work?     Right _ -> pure ()       I get   Couldn't match expected type ‘IO (Either Session.QueryError ())’ like you said
[06:36:04] *** Joins: justIrresolute (~justache@user/justache)
[06:39:07] <EvanR> expected IO (Either ...
[06:39:22] <EvanR> so like, return (Right (...
[06:39:35] <EvanR> or pure (pure (...
[06:41:34] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[06:46:13] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 240 seconds)
[06:48:48] <lechner> i think i tried all combinations...
[06:48:57] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:b17c:f0c6:752d:8263) (Ping timeout: 240 seconds)
[06:50:29] *** Joins: little_mac (~little_ma@c-24-127-188-93.hsd1.mi.comcast.net)
[06:51:10] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[06:52:38] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[06:53:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[06:57:07] *** Quits: shailangsa (~shailangs@host86-162-150-202.range86-162.btcentralplus.com) (Ping timeout: 256 seconds)
[06:59:23] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[07:00:46] *** Joins: Topsi (~Tobias@dyndsl-095-033-089-163.ewe-ip-backbone.de)
[07:01:22] *** Joins: Hash (~Hash@hashsecurity.org)
[07:01:24] <Hash> Hello
[07:01:30] <Hash> I'm new but have questiona bout Haskell GHC
[07:01:41] <Hash> I install it on Ubuntu 20.04 and it's very large size. 
[07:01:50] <Hash> Almost 1GB of packages for haskell
[07:01:53] <xsperry> are you sure you want to return Either wrapped in an IO? so many things can raise exception in IO, so if you return Either (as opposed to throwing) you just have one more type of error to handle
[07:01:56] <Hash> Is this accurate?
[07:02:16] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[07:02:26] <Hash> Is there possible way to get Haskell compiiler/xmonad without having 1GB of ghc dependencies?
[07:02:34] <Hash> Why is haskell compiler so huge?
[07:02:56] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[07:03:36] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[07:03:43] <sonny> maybe it's possible to install only ghc
[07:04:43] <Topsi> ummm, for me on Windows the size of the folder at C:\Users\Username\AppData\Local\Programs\stack\x86_64-windows\ghc-9.0.1 is 2,5GB
[07:05:15] <EvanR> Hash, I'm on ubuntu
[07:05:24] <EvanR> I used ghcup to get haskell, not packages
[07:05:38] <yushyin> 4.8G /home/yushyin/.ghcup/ ;D
[07:05:56] <Hash> holy moly
[07:05:57] <EvanR> yeah can't speak to the disk foot print, I have a new 1TB drive
[07:06:14] <EvanR> needless to say that's a lot of 1.44MB floppies
[07:06:14] <Hash> That's so much :(
[07:06:50] <xsperry> 1TB hdd is like $30
[07:07:07] <Topsi> I have ghc-8.6.5, ghc-8.8.2, ghc-8.8.3, ghc-8.8.4, ghc-8.10.1, ghc-8.10.2, ghc-8.10.4 and ghc-9.0.1 installed and my SSD is only 227GB -.-
[07:07:30] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Remote host closed the connection)
[07:07:41] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:07:57] <Topsi> ye I have external hdds as well, but they're slower
[07:08:19] <EvanR> Hash, GHC is alien tech, sorry
[07:08:50] <Topsi> I just want to express that I find GHCs size inconvenient
[07:08:56] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[07:09:22] <EvanR> the real issue seems to be how much memory it takes to run, which becomes an issue on raspberry pi
[07:10:08] <Topsi> that too x)
[07:10:23] <lechner> xsperry: i don't want to return anything. just trying to process the error    https://paste.tomsmeding.com/vx0y49YN
[07:11:19] <EvanR> lechner, all functions return something, be it (), Nothing, or an exploding thunk
[07:11:28] <EvanR> or a hard freeze
[07:12:00] <xsperry> lechner, can you paste a test case? (smallest compilable example). "putStrLn $ show error" is the same as "print error", btw
[07:13:56] <xsperry> lechner, nm, Session.run returns IO, you can't use case with IO
[07:14:16] *** Quits: Hayek1 (~xxx@rrcs-173-196-3-254.west.biz.rr.com) (Ping timeout: 256 seconds)
[07:14:35] <lechner> xsperry: just trying to process the error from 'run' here and do nothing on 'Right'    https://hackage.haskell.org/package/hasql-1.4.4/docs/Hasql-Session.html#t:QueryError 
[07:14:50] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[07:15:01] *** Quits: td_ (~td@94.134.91.205) (Ping timeout: 240 seconds)
[07:15:32] <lechner> could i use     eitherResult <- ....       followed by    case eitherResult of .....
[07:15:33] <yushyin> Hash: if that's too much, haskell might be not for you. i have already >10GB in haskell deps
[07:15:39] <Hash> HJeezus!
[07:15:41] <Hash> Wow
[07:15:54] *** Joins: kramer2 (~bc8147f2@cerf.good1.com)
[07:16:11] <xsperry> lechner yes that should work
[07:16:13] <EvanR> 10G, that's like 1/10 or 1/20 of a basic video game now xD
[07:17:05] *** Joins: td_ (~td@muedsl-82-207-238-021.citykom.de)
[07:17:19] <EvanR> :t case Left "!" of Right _ -> return (); Left _ -> return ()
[07:17:20] <lambdabot> Monad m => m ()
[07:17:31] <EvanR> lechner, maybe eitherResult is not what you think it is
[07:17:37] <lechner> xsperry: is there something monadic lke    Session.run ...  >>=   similar to what monochrome wrote?
[07:18:10] <Topsi> right, the haskell dependencies downloaded by stack stored in C:\sr are 24GB for me
[07:18:23] <Hash> Wow
[07:18:25] <lechner> EvanR: i have some type confusion
[07:18:27] <Hash> that's just so much.
[07:18:36] <xsperry> lechner, do and <- are just syntax sugar for >>=
[07:18:39] <Hash> I don't have that kind of space. I use Xmonad only
[07:19:39] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Remote host closed the connection)
[07:20:17] <Topsi> It accumulates over time
[07:20:17] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 240 seconds)
[07:20:54] <EvanR> you can always clear the accumulate ghc stuf
[07:20:59] <kramer2> lecher, what error are you getting?
[07:21:00] <Topsi> There's no proper way to delete stuff. I either delete the GHCs installed by stack manually or remove the C:\sr folder by reinstalling stack every now and then.
[07:21:10] <Topsi> i don't know how else to do it
[07:21:17] <EvanR> as usual on linux, the proper way is to delete the relevant directory
[07:21:23] <EvanR> and start over
[07:21:37] <yushyin> Hash: that said, if you use xmonad, you will need a ghc and yes it will take about 1-2GB of your space. well, probably you could compile xmonad on system x and use only the binary on system y, but then you lose the possibility to quickly reconfigure something.
[07:21:51] <Hash> Or switch to dwm.
[07:21:55] <lechner> kramer2: Couldn't match expected type ‘IO (Either Session.QueryError ())’
[07:21:59] <Hash> But miss out the xmonad extention ecosystem
[07:22:01] <Hash> :(
[07:22:07] <EvanR> I used dwm for many years
[07:22:12] <kramer2> lechner, it looks like you are still matching IO, no Either
[07:22:17] <EvanR> I'm better now
[07:22:20] <kramer2> Hash, I'm curious, what is the size of your hard drive?
[07:22:23] <lechner> Hash: or use sway
[07:22:29] <Hash> I dunno
[07:22:31] <Hash> let's see
[07:22:41] <Hash> /dev/sdd2        30G   22G  7.0G  76% /
[07:22:45] <Hash> /dev/sdd3        41G   18G   22G  45% /home
[07:23:10] <Hash> I just need to reinstall.
[07:23:19] <yushyin> Hash: or any other window manager which doesn't require a whole compiler toolchain for some re-configuration
[07:23:24] <Hash> over the years you install packages adn forget about them
[07:23:29] <Hash> ligbs and dev packs and all
[07:24:05] <EvanR> I can't imagine linux without a ghc
[07:24:13] <EvanR> how do you even
[07:24:16] <lechner> Hash: afaik xmonad will never talk wayland
[07:24:23] <Hash> Whoc ares about wayland
[07:24:26] <Hash> what is that anyway
[07:24:32] <Hash> prometheus movie stuff?
[07:24:40] <Hash> wayland. Stupid name.
[07:24:57] <kramer2> to be honest, if you're not interested in haskell beyond xmonad, I can understand why needing >1GB of space might raise some eyebrows
[07:25:01] <Hash> basic xorg window stuff is good
[07:25:13] <Hash> Do you see my space?
[07:25:19] <Hash> Not enough man
[07:25:21] <Hash> :(
[07:25:40] <Hash> Oh well.Oh well
[07:25:44] <Hash> oh well it's what it is.
[07:25:47] <EvanR> you'll have to delete some of your MP3s to make room for haskell
[07:25:53] <EvanR> or bootlegs, or whatever
[07:25:54] <Hash> No this is just / and /home
[07:26:39] <lechner> or   http://www.nongnu.org/ratpoison/
[07:26:55] <Hash> I have /media and /jorel and /kalel and /valel  /zorel
[07:27:03] <Hash> That's where my data is.
[07:27:15] <Hash> I'm talking about stupid distro packagsges
[07:31:07] *** Joins: yauhsien_ (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[07:31:07] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:35:05] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[07:36:03] *** Joins: justIrresolute (~justache@user/justache)
[07:39:38] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[07:39:44] <EvanR> with ghcup you can sidestep stupid distro packages
[07:42:02] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[07:48:07] *** Joins: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com)
[07:53:12] *** Quits: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com) (Ping timeout: 268 seconds)
[07:55:02] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[08:01:57] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:8890:34c2:e4a2:a79e)
[08:04:32] <EvanR> Data.List.NonEmpty is cool
[08:04:46] <EvanR> I don't hate it
[08:16:40] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[08:16:54] *** Joins: Deep-Thought (~quantum@2001:8003:7937:cf01:485e:bf6c:57df:1e44)
[08:17:28] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[08:19:40] *** Parts: Deep-Thought (~quantum@2001:8003:7937:cf01:485e:bf6c:57df:1e44) (Leaving)
[08:22:07] *** Joins: seer (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[08:22:16] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[08:22:41] <seer> question about custom preludes: which one should I use?
[08:22:43] *** seer is now known as Inst
[08:24:23] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[08:25:58] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) ()
[08:27:31] <EvanR> none of them probably, if you're unsure
[08:29:34] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[08:32:13] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[08:33:20] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:215b:2bd2:2b33:135e)
[08:35:05] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[08:35:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:36:03] *** Joins: justIrresolute (~justache@user/justache)
[08:36:11] *** Joins: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com)
[08:37:41] *** Joins: Topsi1 (~Tobias@dyndsl-095-033-023-075.ewe-ip-backbone.de)
[08:39:16] *** Quits: Topsi (~Tobias@dyndsl-095-033-089-163.ewe-ip-backbone.de) (Ping timeout: 256 seconds)
[08:47:54] *** Quits: kitzman (~kitzman@user/dekenevs) (Quit: C-x C-c)
[08:48:45] *** Joins: kitzman (~kitzman@user/dekenevs)
[08:51:59] *** Joins: user0 (~aj@154.0.137.32)
[08:52:06] *** Parts: user0 (~aj@154.0.137.32) ()
[08:52:18] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:8890:34c2:e4a2:a79e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:56:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:59:54] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:04:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:04:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:04:21] *** Joins: wroathe (~wroathe@user/wroathe)
[09:09:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:18:59] <EvanR> in client server jargon we have verbs like get (request data, not intending to have any other effect), put (here is some data, good luck. I'm not expecting anything else. fire and forget). But what do you call a request for data, but intend for some other effect. Such as a dequeue, bump a counter, move a pointer, at the same time
[09:20:12] <EvanR> like to get the data you had to rip it out, leaving aftermath
[09:21:49] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[09:22:07] <EvanR> GetUpdate, SmashAndGrab, 
[09:23:25] <EvanR> Loot
[09:42:35] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[10:02:05] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 268 seconds)
[10:02:41] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[10:05:25] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:07:30] *** Joins: aeka (~aeka@user/hiruji)
[10:13:25] *** Quits: stef204 (~stef204@user/stef204) (Ping timeout: 240 seconds)
[10:14:54] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[10:19:01] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 240 seconds)
[10:22:37] *** Quits: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f484:3278:789d:d6a5) (Remote host closed the connection)
[10:22:56] *** Joins: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be)
[10:23:04] *** Quits: yauhsien_ (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:23:36] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[10:28:21] *** Joins: acidjnk (~acidjnk@p200300d0c7271e2764e98499ffbb1b91.dip0.t-ipconnect.de)
[10:28:22] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c7271e2764e98499ffbb1b91.dip0.t-ipconnect.de)
[10:33:42] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:34:13] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:34:16] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[10:40:34] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[10:42:28] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[10:44:19] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:44:53] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[10:45:57] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[10:49:53] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:50:25] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::45db) (Quit: Going elsewhere)
[10:50:51] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::45db)
[10:54:54] *** Quits: little_mac (~little_ma@c-24-127-188-93.hsd1.mi.comcast.net) (Remote host closed the connection)
[10:54:56] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:55:31] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[10:55:48] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[10:55:56] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:00:24] *** Joins: nhatanh02 (~satori@123.24.172.30)
[11:03:51] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:05:33] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:06:08] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[11:08:02] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e27182831a202be7205.dip0.t-ipconnect.de)
[11:08:32] *** Joins: Brumaire (~quassel@81-64-14-121.rev.numericable.fr)
[11:09:25] *** Joins: Guest49 (~Guest49@98.47.16.37)
[11:10:09] *** Parts: Guest49 (~Guest49@98.47.16.37) ()
[11:11:09] *** Quits: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com) (Ping timeout: 268 seconds)
[11:11:46] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c7271e2764e98499ffbb1b91.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[11:11:46] *** Quits: acidjnk (~acidjnk@p200300d0c7271e2764e98499ffbb1b91.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[11:12:16] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[11:12:47] *** Joins: acidjnk (~acidjnk@p200300d0c7271e27182831a202be7205.dip0.t-ipconnect.de)
[11:14:11] *** Joins: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de)
[11:14:15] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[11:16:10] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:16:46] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[11:17:25] *** Quits: acidjnk (~acidjnk@p200300d0c7271e27182831a202be7205.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[11:17:25] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e27182831a202be7205.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[11:22:29] <gentauro> Hash: how many partitions do you have? Cos only 40 (ish) GB for home is pretty "small"
[11:23:28] <gentauro> I mean, I just had to do some `cloning` of my NVMe cos the `/nix/store` was eating up all my space …
[11:23:42] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[11:23:58] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Read error: Connection reset by peer)
[11:24:01] * gentauro not the easiest task, but I was noting everything and I will probably throw a blogpost about it :)
[11:26:48] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:27:23] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[11:28:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[11:30:31] *** Joins: coolnickname (uid531864@user/coolnickname)
[11:37:09] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[11:37:25] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:38:00] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[11:40:57] *** Quits: Garbanzo (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[11:40:57] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[11:41:06] *** Joins: vglfr (~vglfr@88.155.96.35)
[11:43:39] <Hash> gentauro: I'm college student, not many money
[11:43:44] <Hash> gentauro: small disk
[11:43:58] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[11:44:01] <Hash> 128gb ssd
[11:44:48] <Hash> Yeah.
[11:44:52] <Hash> This is weird.
[11:44:59] <Hash> I have no idea what I was thinking
[11:45:25] <Hash> https://i.imgur.com/ko5BgNn.png
[11:45:39] <Hash> I don't know what on sdd4
[11:45:45] <Hash> and ... hunh.
[11:46:23] <Hash> I could move /var out of / and into a sep partition and mount it.
[11:46:47] <Hash> I really just need to ge tmore funds, get more disks, and stuff
[11:48:02] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:48:37] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[11:51:09] *** Joins: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com)
[11:55:33] *** Quits: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com) (Ping timeout: 268 seconds)
[11:58:39] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:59:14] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[12:02:13] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[12:02:53] *** Quits: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de) (Quit: Connection closed)
[12:02:56] *** Joins: vglfr (~vglfr@88.155.96.35)
[12:17:52] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:22:40] *** Quits: coolnickname (uid531864@user/coolnickname) ()
[12:24:07] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[12:26:09] *** Quits: kramer2 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[12:30:08] *** Quits: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70) (Quit: You have been kicked for being idle)
[12:30:08] *** Quits: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42) (Quit: You have been kicked for being idle)
[12:33:16] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[12:35:05] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[12:36:04] *** Joins: justIrresolute (~justache@user/justache)
[12:36:29] *** Joins: thevishy (~Nishant@2405:201:f005:c007:40d9:4255:8f71:3678)
[12:37:14] *** Quits: remexre (~remexre@user/remexre) (Remote host closed the connection)
[12:37:29] *** Joins: remexre (~remexre@user/remexre)
[12:40:55] *** Joins: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com)
[12:44:18] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[12:45:30] *** Quits: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com) (Ping timeout: 268 seconds)
[12:46:35] *** Joins: notzmv (~zmv@user/notzmv)
[12:47:36] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:36] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:39] *** allbery_b is now known as geekosaur
[13:04:49] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[13:05:06] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:06:43] <[exa]> Hash: what are you trying to achieve? 128GB SSD should be waaaaaaaaaaaaaay more than enough for any haskelling around, unless you like decide to build the whole stackage from scratch or so
[13:09:49] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[13:14:28] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:15:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:18:28] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:23:01] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[13:23:24] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) ()
[13:31:07] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[13:31:24] *** Joins: vglfr (~vglfr@88.155.96.35)
[13:31:26] *** Joins: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com)
[13:31:26] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:d9b7:23d6:79dd:2e64)
[13:34:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:48c8:920f:83dd:ae34) (Ping timeout: 240 seconds)
[13:35:25] *** Quits: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com) (Ping timeout: 240 seconds)
[13:36:48] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[13:42:28] *** Joins: rito_ (~rito_gh@45.112.243.206)
[13:52:48] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:54:33] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:56:02] *** Quits: vglfr (~vglfr@88.155.96.35) (Ping timeout: 256 seconds)
[14:03:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[14:03:21] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[14:04:47] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:06:14] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:07:33] *** Lord_of_Life_ is now known as Lord_of_Life
[14:16:37] *** Quits: razetime (~quassel@49.207.213.63) (Ping timeout: 240 seconds)
[14:19:11] *** Joins: ircs (~ircs@2-111-85-72-cable.dk.customer.tdc.net)
[14:19:50] *** Joins: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com)
[14:20:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:22:20] *** Quits: ircs (~ircs@2-111-85-72-cable.dk.customer.tdc.net) (Read error: Connection reset by peer)
[14:23:57] *** Quits: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com) (Ping timeout: 240 seconds)
[14:26:13] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[14:26:53] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[14:30:17] *** Joins: jakalx (~jakalx@base.jakalx.net)
[14:31:28] *** Joins: vglfr (~vglfr@88.155.96.35)
[14:31:49] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 240 seconds)
[14:32:34] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[14:34:04] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:35:59] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:42:31] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[14:42:55] *** Joins: vglfr (~vglfr@88.155.96.35)
[14:45:32] *** Joins: cls (~cls@chalk.lubutu.com)
[14:46:27] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[14:49:37] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[14:49:43] *** Quits: Guest3 (~Guest3@88.220.154.34) (Ping timeout: 256 seconds)
[14:50:21] <cls> This is a very newbie question, but I'm trying to cabal install ipa for https://hackage.haskell.org/package/ipa-0.3.1.1 and just get "there is no package named 'ipa'". I have run cabal update. Am I doing something wrong?
[14:50:23] *** Joins: vglfr (~vglfr@88.155.96.35)
[14:51:30] *** Quits: srk (~sorki@user/srk) (Remote host closed the connection)
[14:51:30] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[14:51:49] *** Joins: srk (~sorki@user/srk)
[14:52:38] *** Joins: vglfr (~vglfr@88.155.96.35)
[15:00:17] *** Joins: acidjnk (~acidjnk@p200300d0c7271e27ecbeaa17067bd269.dip0.t-ipconnect.de)
[15:00:17] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e27ecbeaa17067bd269.dip0.t-ipconnect.de)
[15:01:40] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[15:03:17] *** Joins: zer0bitz (~zer0bitz@196.244.192.60)
[15:03:27] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:05:21] <geekosaur> seems to work here
[15:09:14] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[15:09:25] *** Joins: vglfr (~vglfr@88.155.96.35)
[15:09:31] <cls> I think the issue was because I had an out of date version of GHC. Very out of date (7.10.3)! I've got a fresh install with GHCup and it seems to be installing now.
[15:10:12] <geekosaur> ghc shouldn't affect finding the package. maybe you got a newer cabal with it?
[15:10:26] *** Joins: antony (~The_viole@203.77.49.232)
[15:10:39] <cls> Yes, it came with a new cabal as well
[15:11:15] *** Joins: razetime (~quassel@49.207.213.63)
[15:19:31] *** jeffz` is now known as jeffz
[15:19:31] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[15:19:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[15:20:17] *** Joins: vglfr (~vglfr@88.155.96.35)
[15:20:59] *** Quits: razetime (~quassel@49.207.213.63) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:21:36] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[15:22:44] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[15:23:39] *** Joins: vglfr (~vglfr@88.155.96.35)
[15:25:44] *** Joins: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com)
[15:25:45] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[15:26:13] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:24aa:cde6:528:d0da)
[15:26:54] *** Joins: vglfr (~vglfr@88.155.96.35)
[15:30:09] *** Quits: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com) (Ping timeout: 268 seconds)
[15:33:49] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[15:34:58] *** Joins: vglfr (~vglfr@88.155.96.35)
[15:39:15] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[15:40:06] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[15:41:35] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:42:01] *** Joins: __monty__ (~toonn@user/toonn)
[15:42:10] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[15:42:39] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[15:43:28] *** Joins: vglfr (~vglfr@88.155.96.35)
[15:45:25] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[15:47:21] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[15:51:03] *** Joins: xkuru (~xkuru@user/xkuru)
[15:51:03] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[15:51:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:52:18] *** Joins: vglfr (~vglfr@88.155.96.35)
[15:52:37] *** Quits: talismanick (~talismani@2601:644:8500:8350::256c) (Ping timeout: 240 seconds)
[15:54:29] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[15:55:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[15:55:44] *** Joins: vglfr (~vglfr@88.155.96.35)
[15:57:49] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[15:58:41] *** Joins: vglfr (~vglfr@88.155.96.35)
[16:01:07] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[16:01:22] *** Joins: vglfr (~vglfr@88.155.96.35)
[16:04:31] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-11.elisa-laajakaista.fi) (Ping timeout: 256 seconds)
[16:05:47] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[16:05:48] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[16:07:06] *** Joins: vglfr (~vglfr@88.155.96.35)
[16:08:51] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[16:10:23] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:11:36] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:12:11] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[16:12:38] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[16:13:49] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[16:19:49] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-16.elisa-laajakaista.fi)
[16:22:48] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[16:23:31] *** Joins: vglfr (~vglfr@88.155.96.35)
[16:23:57] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 240 seconds)
[16:25:23] *** Joins: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com)
[16:29:37] *** Quits: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com) (Ping timeout: 240 seconds)
[16:32:17] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[16:32:30] *** Joins: vglfr (~vglfr@88.155.96.35)
[16:34:33] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[16:36:58] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[16:37:37] *** Joins: vglfr (~vglfr@88.155.96.35)
[16:40:44] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[16:40:45] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:24aa:cde6:528:d0da) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:41:13] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[16:41:55] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[16:42:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[16:42:04] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[16:42:04] *** Joins: wroathe (~wroathe@user/wroathe)
[16:42:05] *** Joins: vglfr (~vglfr@88.155.96.35)
[16:43:18] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[16:44:20] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[16:44:32] *** Joins: vglfr (~vglfr@88.155.96.35)
[16:46:09] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[16:46:09] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[16:46:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[16:47:07] *** Joins: vglfr (~vglfr@88.155.96.35)
[16:47:37] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:49:17] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[16:49:58] *** Joins: vglfr (~vglfr@88.155.96.35)
[16:50:13] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7c3e:33e9:a263:3716)
[16:52:13] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[16:52:53] *** Joins: vglfr (~vglfr@88.155.96.35)
[16:54:57] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[16:55:37] *** Quits: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 240 seconds)
[16:55:42] *** Joins: vglfr (~vglfr@88.155.96.35)
[16:57:11] *** Joins: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com)
[16:57:52] *** Joins: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[16:58:23] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[17:00:13] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[17:00:23] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Remote host closed the connection)
[17:00:30] *** Joins: vglfr (~vglfr@88.155.96.35)
[17:02:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:02:42] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[17:04:13] *** Quits: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com) (Ping timeout: 240 seconds)
[17:04:32] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[17:11:47] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:11:49] *** Quits: xff0x (~xff0x@2001:1a81:52d4:9900:80b8:248c:472c:34e) (Ping timeout: 240 seconds)
[17:12:54] *** Joins: xff0x (~xff0x@2001:1a81:52d4:9900:4d46:915d:4480:7a51)
[17:14:30] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Quit: ZNC - https://znc.in)
[17:22:53] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[17:23:28] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:24:02] *** Joins: vglfr (~vglfr@88.155.96.35)
[17:25:21] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[17:25:41] *** Joins: son0p (~ff@181.136.122.143)
[17:30:37] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:31:03] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:32:13] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[17:32:24] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:32:58] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:35:11] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[17:37:44] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[17:37:58] *** Joins: vglfr (~vglfr@88.155.96.35)
[17:38:27] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[17:39:15] *** Joins: euandreh (~euandreh@191.181.59.160)
[17:42:37] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[17:42:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[17:43:19] *** Joins: vglfr (~vglfr@88.155.96.35)
[17:44:36] *** Joins: nhatanh02 (~satori@123.24.172.30)
[17:45:25] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[17:45:49] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Ping timeout: 268 seconds)
[17:45:57] *** Joins: uam (uid360535@id-360535.hampstead.irccloud.com)
[17:46:49] *** Joins: vglfr (~vglfr@88.155.96.35)
[17:48:07] *** Joins: cemguresci (~cemguresc@2001:a61:11ff:a001:b826:a072:7137:d00a)
[17:48:12] *** Quits: cemguresci (~cemguresc@2001:a61:11ff:a001:b826:a072:7137:d00a) (Client Quit)
[17:49:01] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[17:49:12] *** Joins: vglfr (~vglfr@88.155.96.35)
[17:50:01] *** Joins: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com)
[17:51:30] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[17:51:46] *** Quits: jassob (~jassob@h-155-4-71-72.A785.priv.bahnhof.se) (Ping timeout: 260 seconds)
[17:52:12] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:52:13] *** Joins: max22- (~maxime@2a01cb088335980006a2e176d919440a.ipv6.abo.wanadoo.fr)
[17:52:42] *** Joins: jassob (~jassob@h-155-4-71-72.A785.priv.bahnhof.se)
[17:52:52] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[17:54:29] *** Quits: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com) (Ping timeout: 252 seconds)
[17:58:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:00:54] *** Joins: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com)
[18:03:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[18:04:39] *** Quits: rito_ (~rito_gh@45.112.243.206) (Ping timeout: 256 seconds)
[18:09:14] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Remote host closed the connection)
[18:09:17] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[18:10:07] *** Quits: antony (~The_viole@203.77.49.232) (Quit: Leaving)
[18:11:42] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:11:47] *** Joins: moshet (~moshet@179.33.156.20)
[18:12:44] *** Joins: shapr (~user@2601:7c0:c202:5190:6367:969d:31ac:68f)
[18:13:01] *** Quits: acidjnk (~acidjnk@p200300d0c7271e27ecbeaa17067bd269.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:13:01] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e27ecbeaa17067bd269.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:13:25] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 240 seconds)
[18:13:39] *** Joins: skreli (~skreli@cpe-72-134-91-230.natsow.res.rr.com)
[18:14:21] *** Quits: skreli (~skreli@cpe-72-134-91-230.natsow.res.rr.com) (Quit: leaving)
[18:15:16] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[18:15:40] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[18:18:15] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[18:19:58] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[18:20:32] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[18:20:49] *** Joins: hud (~hud@uwyo-129-72-161-67.uwyo.edu)
[18:23:44] <hud> hey all, not sure if this is the right place to ask about build dependencies, if I run `cabal repl -b parsec` it
[18:24:16] <hud> s able to find the package, but if I include that in parsec in `build-depends` of my .cabal file it cant be found
[18:25:18] <jneira[m]> hmm it should, could you post the .cabal file?
[18:25:19] <[exa]> just to be sure -- "if I include that _in parsec_ in build-depends" -- there's a parsec section?
[18:25:29] <[exa]> +1 please pastebin
[18:25:56] <[exa]> also preferably the error message
[18:26:29] <hud> https://paste.tomsmeding.com/wCBuVd60
[18:26:46] <hud> oh I can add multiple files hold on
[18:28:11] <[exa]> that looks m'kay, let's see the error :]
[18:28:46] <hud> Oh no wait I think it's just saying its redundant - all good !
[18:29:59] <hud> https://paste.tomsmeding.com/woIFV49V for completion - all good
[18:31:10] <[exa]> yeah it's telling you that you should write actual code using it :D
[18:32:59] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 256 seconds)
[18:33:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:33:41] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:33:41] *** Joins: wroathe (~wroathe@user/wroathe)
[18:34:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[18:39:22] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[18:39:56] *** Quits: euandreh (~euandreh@191.181.59.160) (Ping timeout: 256 seconds)
[18:41:36] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:41:54] *** Quits: Brumaire (~quassel@81-64-14-121.rev.numericable.fr) (Read error: Connection reset by peer)
[18:45:09] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Ping timeout: 276 seconds)
[18:46:26] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[18:46:54] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[18:47:29] *** Quits: aouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[18:47:29] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[18:51:49] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[18:53:04] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:53:33] *** Joins: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net)
[19:02:53] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[19:04:40] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:04:56] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[19:05:49] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[19:06:57] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Ping timeout: 240 seconds)
[19:07:52] *** Joins: xsperry (~xs@user/xsperry)
[19:10:35] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[19:11:01] *** Quits: Hayek1 (~xxx@2603-8000-b401-6099-6db0-07e1-7146-9aa1.res6.spectrum.com) (Ping timeout: 240 seconds)
[19:12:16] *** Joins: stef204 (~stef204@user/stef204)
[19:13:57] *** Quits: shapr (~user@2601:7c0:c202:5190:6367:969d:31ac:68f) (Ping timeout: 240 seconds)
[19:15:27] <albet70> why IOT does not exit?
[19:15:39] <Hecate> albet70: what
[19:15:44] <Hecate> what do you mean by IOT?
[19:15:46] <geekosaur> how could it exist?
[19:15:52] <Hecate> International Organisation of Truffles?
[19:16:15] <albet70> like the other transfer
[19:16:20] <albet70> MaybeT
[19:17:12] <hpc> albet70: try writing it
[19:17:36] *** Joins: zaquest (~notzaques@5.130.79.72)
[19:17:40] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[19:17:56] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:f755:55d9:216b:76f6)
[19:18:34] <albet70> IOT m (IO a)
[19:18:51] <Hecate> what :'')
[19:19:59] <Rembane> International Truffles <3
[19:20:13] <Rembane> albet70: How many IOT could you layer on top of each other? 
[19:20:37] <geekosaur> and what would this accomplish?
[19:20:53] <albet70> there's an evil term I think, Inner Orgasme of ...
[19:20:55] <geekosaur> think also about things like ordering of I/O actions
[19:21:20] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[19:21:25] <hpc> also try not to accidentally imagine things like MaybeT IO while you're working it out ;)
[19:21:40] <geekosaur> but "try writing it" I think meant try implementing something that would work as e.g. IOT (State Int a)
[19:21:54] <hpc> IOT (State Int) a
[19:22:03] <hpc> data IOT m a = ???
[19:22:03] <geekosaur> yeh, sorry
[19:22:22] <hpc> instance MonadTrans IOT where ???
[19:22:30] <hpc> see if you can fill in those blanks
[19:23:13] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:23:16] <hpc> for comparison, try filling in the same blanks for MaybeT, without looking at the existing definition
[19:23:46] <hpc> or IdentityT if you like writing code that does nothing :D
[19:24:11] <albet70> MaybeT m Maybe a
[19:27:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[19:28:51] <albet70> f :: a -> Either a b; traverse f [a]; if that f return Left a, it will return Left a as result, so I wonder when f doing some IO, and how it break and return when IO failed
[19:30:07] *** Quits: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5) (Quit: You have been kicked for being idle)
[19:30:12] *** Quits: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f) (Quit: You have been kicked for being idle)
[19:30:17] <albet70> for example, f take input from that list and check the database with that input and it may fail
[19:30:18] *** Quits: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71) (Quit: You have been kicked for being idle)
[19:30:31] *** Joins: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5)
[19:30:43] *** Joins: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f)
[19:30:45] *** Parts: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f) ()
[19:30:55] *** Joins: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71)
[19:30:58] <albet70> when it failed how to break the next action
[19:32:39] <hpc> :t traverse
[19:32:40] <lambdabot> (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)
[19:33:28] <hpc> the effects of f will show up in the result
[19:34:10] <hpc> since the result is (IO [b]), it just does all the (f a) stuff in sequence
[19:34:32] <hpc> when t = [], it's just each element from start to end of the list
[19:34:58] <hpc> for other Traversable types, it could be some more interesting ordering
[19:38:03] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Ping timeout: 268 seconds)
[19:39:08] <albet70> "hpc :since the result is (IO [b]), it just does all the (f a) stuff in sequence", but when IO b failed, I hope it breaks the list and return, not to the end of the list
[19:39:11] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (Quit: ZNC 1.7.x-git-3-96481995 - https://znc.in)
[19:39:44] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[19:40:30] <hpc> it will, if f fails in a way that short-circuits
[19:40:34] <albet70> in other languages, do IO in a for statement, and use break or return to brea the list
[19:40:46] *** Joins: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f89b:2c73:97b1:7ba3)
[19:41:31] <albet70> but IO doesn't have the effect of short circuit
[19:42:03] <albet70> Left a or Nothing can do short circuit
[19:42:19] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7c3e:33e9:a263:3716) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:43:34] <Rembane> albet70: If you use throwIO IO can shortcircuit. 
[19:43:45] <Rembane> I wonder if this works...
[19:43:56] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Ping timeout: 252 seconds)
[19:44:07] <albet70> "🟢 Rembane :albet70: If you use throwIO IO can shortcircuit.", that's raiseError in some languages
[19:44:17] * geekosaur wonders if spoon can do that
[19:44:35] <albet70> what if f :: a -> IO b -> Either a b?
[19:44:40] <Rembane> albet70: It is indeed. :)
[19:46:13] <Rembane> > throwIO Overflow
[19:46:15] <lambdabot>  error:
[19:46:15] <lambdabot>      • No instance for (Typeable a0)
[19:46:15] <lambdabot>          arising from a use of ‘show_M87663382183998972258’
[19:46:18] <Rembane> Ach. 
[19:46:43] <geekosaur> % throwIO Overflow
[19:46:43] <yahb> geekosaur: *** Exception: arithmetic overflow
[19:47:26] <albet70> f :: a -> IO b -> Either a b; traverse f [a]; would this do the trick? if IO b failed, short circuit?
[19:47:27] <Rembane> There we go. yahb > lambdabot 
[19:48:56] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[19:49:43] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[19:50:16] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:3074:63b1:2e6b:fa59)
[19:51:01] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[19:53:07] <albet70> can we do some IO in f :: a-> Either a b?
[19:54:00] <albet70> in Either do notation , can we print something?
[19:54:35] <geekosaur> no
[19:55:27] <albet70> no the both? or only the last?
[19:55:28] <EvanR> that's not purely functional, sorry
[19:55:38] <geekosaur> no to both
[19:55:42] *** Quits: uam (uid360535@id-360535.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[19:55:45] <geekosaur> do notation is not what enables I/O
[19:55:51] * EvanR points at the "purely functional" sign above the door
[19:55:57] <albet70> and in EitherT?
[19:56:12] <geekosaur> % putStrLn "hi" >> putStrLn "bye" >> return ()
[19:56:12] <yahb> geekosaur: hi; bye
[19:56:29] <EvanR> ExceptT e IO
[19:56:42] <EvanR> is a monad
[19:56:51] <EvanR> it can do IO with liftIO
[19:57:23] <albet70> but ExceptT can't do short circuit
[19:57:33] <EvanR> that's what ExceptT ... does
[19:57:59] <EvanR> it's basically EitherT
[19:58:13] <albet70> can it?
[19:58:22] <EvanR> it was just a branding issue back in the day
[19:59:08] <EvanR> it's one of many ways to short circuit
[19:59:21] <EvanR> cancel a computation early
[19:59:43] <albet70> so f :: a -> EitherT a m b; traverse f [a]; would short circuit?
[19:59:57] <albet70> EitherT a IO b
[20:00:17] <EvanR> just saying I think ExceptT is more idiomatic now for that
[20:00:33] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:00:45] <EvanR> and yes
[20:01:19] <EvanR> but to break out of a for loop purposes there is probably a better way
[20:06:10] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:3074:63b1:2e6b:fa59) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:06:16] <albet70> > let f x = do { liftIO print x; if (x>3) then EithertT Left x else return x } in traverse f [1..6]
[20:06:17] <lambdabot>  error:
[20:06:18] <lambdabot>      Data constructor not in scope:
[20:06:18] <lambdabot>        EithertT :: (a1 -> Either a1 b0) -> b1 -> m b1
[20:06:36] <EvanR> :k ExceptT
[20:06:37] <lambdabot> * -> (* -> *) -> * -> *
[20:07:37] *** Quits: moshet (~moshet@179.33.156.20) (Ping timeout: 256 seconds)
[20:07:37] <EvanR> :t runExceptT
[20:07:38] <lambdabot> ExceptT e m a -> m (Either e a)
[20:08:31] <EvanR> 😎
[20:08:44] <albet70> in Either, how the 'return x' know it suppose to be Left a or Right a?
[20:08:58] <EvanR> convention says Right is pure
[20:09:15] *** Joins: moshet (~moshet@179.33.156.20)
[20:09:28] <EvanR> Left is an effect
[20:09:31] <albet70> "EvanR :convention says Right is pure", so Left isn't pure?
[20:09:43] <EvanR> Left is interpreted as an effect
[20:09:56] <EvanR> namely, short circuit
[20:10:03] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:11:20] <EvanR> by pure I meant the API, pure :: a -> Either e a
[20:11:32] <EvanR> which is the same as return
[20:11:43] <albet70> EvanR the notorious Cont can do short circuit, right?
[20:12:37] <EvanR> CPS can do short circuit, and Cont lets you compose CPS programs
[20:13:02] <EvanR> if you don't want to do it manually
[20:13:39] <EvanR> either way, black magic
[20:14:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[20:14:35] <albet70> black magic in haskell, not in others?
[20:14:40] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[20:14:48] <EvanR> not really a haskell thing
[20:14:53] <albet70> or related to lazy strategy
[20:15:15] <EvanR> continuations is (was?) a big deal in lisps
[20:15:39] <EvanR> rather, using them in non trivial ways
[20:16:10] <EvanR> control flow shenanigans
[20:16:21] <albet70> but in haskell in Cont, capture the fixed point can do loop, this depends on lazy strategy, other languages can't do ir
[20:16:27] <albet70> do it
[20:16:43] <EvanR> by itself, just lazy evaluation lets you do many things, Cont or not
[20:17:03] <EvanR> CPS or not
[20:18:06] <albet70> the funny thing is lisp use macro to do capture continuation thing
[20:18:14] <albet70> not the function
[20:19:09] <albet70> and only a few languages support macro
[20:19:44] <EvanR> all languages support C preprocessor xD
[20:19:59] <EvanR> enjoy
[20:21:58] <albet70> hehe it sounds like all languages can turn to machine languages or assembly languages
[20:25:03] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:25:59] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:27:44] <EvanR> myLoop k = do{ tired <- ... work work work ...; if tired then k else myLoop k }
[20:32:07] <albet70> "EvanR :myLoop k = do{ tired <- ... work work work ...; if tired then k else myLoop k }", myLoop k :: ?
[20:32:19] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Ping timeout: 268 seconds)
[20:33:38] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[20:33:40] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (WeeChat 3.4)
[20:34:35] <EvanR> :t fix \myLoop k -> do { tired <- return False; if tired then k else myLoop k }
[20:34:37] <lambdabot> error:
[20:34:37] <lambdabot>     Unexpected lambda expression in function application:
[20:34:37] <lambdabot>         \ myLoop k
[20:34:46] <EvanR> :t fix $ \myLoop k -> do { tired <- return False; if tired then k else myLoop k }
[20:34:47] <lambdabot> Monad m => m b -> m b
[20:35:04] <EvanR> k : Monad m => m b
[20:36:35] <EvanR> k breaks out of the loop
[20:42:27] *** Joins: shapr (~user@2601:7c0:c202:5190:232c:3331:7d0c:8370)
[20:42:36] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[20:46:21] <albet70> fix depends lazy strategy, can u do it in python or js?
[20:46:50] <EvanR> not a fix thing
[20:46:59] <hpc> you can write fix for functions, but not for other types of data
[20:47:07] <hpc> you can do the myLoop thing, but not
[20:47:10] <hpc> > fix (1:)
[20:47:12] <lambdabot>  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1...
[20:47:20] <EvanR> :t let myLoop k = do { tired <- return False; if tired then k else myLoop k } in myLoop
[20:47:21] <lambdabot> Monad m => m b -> m b
[20:47:29] <EvanR> no you can't do that in javascript
[20:48:49] <EvanR> how to do things in javascript is a whole nother channel
[20:50:17] *** Quits: thevishy (~Nishant@2405:201:f005:c007:40d9:4255:8f71:3678) (Quit: Leaving)
[20:50:42] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[20:54:57] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 240 seconds)
[20:55:18] <int-e> EvanR: may I suggest   blink >> myLoop k  for the last bit ;)
[20:56:01] <EvanR> what meme is this
[20:56:16] <[itchyjunk]> https://bpa.st/2O4A
[20:56:44] <[itchyjunk]> Almost everything i am writing seems to involve writing a helper function then composing it with one of the functions in question :x
[20:57:22] <EvanR> if you're lucky the helper function is a composition of existing functions
[20:57:28] <int-e> [itchyjunk]: \x xs -> xs ++ [x]  <-- you don't have to name your little helpers
[20:57:53] *** Joins: s2k (~textual@122.172.234.134)
[20:57:53] <[itchyjunk]> ah right, i keep forgetting i can do that
[20:57:54] <int-e> now... can we do that with foldr without making it quadratic time? :-P
[20:58:17] <[itchyjunk]> Hopefully the answer is no (or maybe yes if you are not me).
[20:58:37] *** Joins: econo (uid147250@user/econo)
[20:58:50] <EvanR> foldr can do anything
[20:58:51] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[20:58:56] <int-e> (somewhat hard, it's essentially the "implement foldl in terms of foldr" exercise, and that involves picking the right return type for the foldr)
[20:58:59] *** Joins: Erutuon (~Erutuon@user/erutuon)
[20:59:10] <EvanR> because that is the only way to access a list, it turns out
[20:59:15] <[itchyjunk]> can it be applied to itself? answer is probably yet but i don't think i ma ready for it
[20:59:36] <jackson99> [itchyjunk] you will have an easier time implementing reverse with foldl
[20:59:37] <[itchyjunk]> hmm how do you mean that's the only way to access a list? :o
[21:00:01] <[itchyjunk]> jackson99, yeah i think since foldr gave an identity, same thing with foldl might return a reverse function?
[21:00:08] <[itchyjunk]> foldl (:) [] xs ?
[21:00:13] <jackson99> close
[21:00:16] <[itchyjunk]> :<
[21:00:21] <jackson99> you just have to massage (:) so that types check
[21:00:28] <[itchyjunk]> hmmm
[21:00:31] <jackson99> :t foldl
[21:00:32] <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
[21:01:19] <jackson99> accumulator (list in your case) is the first argument, element of the list is the second argument
[21:02:03] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[21:02:25] <[itchyjunk]> ah i see
[21:04:13] *** Parts: pragma- (~chaos@user/pragmatic-chaos) (Bye!)
[21:04:48] <[itchyjunk]> wait `foldl (:) [] xs` where lets say xs = [1..5] would be (:) applies to 5 and [] so `(:) 5 []` right?
[21:05:07] <EvanR> :t foldl (:) [] [1..5]
[21:05:08] <lambdabot> error:
[21:05:08] <lambdabot>     • Occurs check: cannot construct the infinite type: a ~ [a]
[21:05:08] <lambdabot>       Expected type: [a] -> [a] -> [a]
[21:05:09] <EvanR> bzzzz
[21:05:40] <[itchyjunk]> :t (:)
[21:05:41] <lambdabot> a -> [a] -> [a]
[21:05:53] <EvanR> first arg to foldl visitor is the accumulator
[21:06:14] <EvanR> which should be a reversed list
[21:06:33] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 256 seconds)
[21:06:57] <jackson99> > foldl _ [] []
[21:07:00] <lambdabot>  error:
[21:07:02] <lambdabot>      • Found hole: _ :: [a] -> a0 -> [a]
[21:07:04] <lambdabot>        Where: ‘a0’ is an ambiguous type variable
[21:07:10] <[itchyjunk]> oh `foldr f base list` is `f lastElement base` but for `foldl f base list` its `f base lastElement` ?
[21:07:20] <jackson99> can you write that function? [a] -> a -> [a]
[21:07:23] <jackson99> using (:)
[21:07:55] <jackson99> [itchyjunk] yes. base is usually called accumulator
[21:08:21] *** Quits: s2k (~textual@122.172.234.134) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:08:52] <EvanR> no, foldl f base list becomes f everythingDone []
[21:09:00] <EvanR> base is buried in a pile of computation by that point
[21:09:18] <jackson99> it is base on first call
[21:09:42] <EvanR> in foldl' yes
[21:10:06] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[21:11:02] <EvanR> everythingDone is the reversed list in this case
[21:11:28] <EvanR> the 'first call' never happened yet
[21:12:05] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[21:13:05] <jackson99> I'm not sure all this is helpful to someone trying to write [a] -> a -> [a] function
[21:13:57] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[21:13:59] <EvanR> well foldl f base list becoming f base LastElement is wrong
[21:14:17] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[21:14:20] <EvanR> at least
[21:15:09] <[itchyjunk]> hmm, foldl takes the second argument and first element of the list so in `foldl (go2) [] [1..5]`, i take [] and 1 and does `go2 [] x` where go2 xs x = x : xs
[21:15:13] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:15:18] *** Quits: aplainze1akind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[21:15:49] <EvanR> yeah
[21:15:53] <[itchyjunk]> 1:[] -> 2:1:[] 
[21:15:54] <[itchyjunk]> hmmm
[21:16:11] <jackson99> > let go2 xs x = x : xs in foldl go2 [] [1..5]
[21:16:13] <lambdabot>  [5,4,3,2,1]
[21:16:19] <jackson99> we have a function for this btw
[21:16:22] <jackson99> @src flip
[21:16:22] <lambdabot> flip f x y = f y x
[21:16:22] <[itchyjunk]> ahh my code had a typo
[21:16:27] <[itchyjunk]> i wrote foldr instead of foldl
[21:16:40] <jackson99> > foldl (flip (:)) [1..5]
[21:16:41] <lambdabot>  <[Integer] -> [Integer]>
[21:16:46] <jackson99> > foldl (flip (:)) [] [1..5]
[21:16:47] <EvanR> foldl and foldr are similarly named, but wildly different
[21:16:48] <lambdabot>  [5,4,3,2,1]
[21:17:00] <EvanR> don't put them in the same drawer in your mind xD
[21:17:09] <[itchyjunk]> https://bpa.st/DC5A
[21:17:20] <[itchyjunk]> Yes, this is very trippy.
[21:17:25] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[21:17:52] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:18:10] <EvanR> in general it helps to figure out a way to write out intermediate steps of a lazy computation
[21:18:14] <EvanR> then you can visualize what's going on
[21:18:58] *** Joins: Sgeo (~Sgeo@user/sgeo)
[21:19:16] <EvanR> foldl (flip (:)) [] [1,2,3,4,5] is the first step
[21:19:20] <EvanR> or zeroth step
[21:19:25] <EvanR> then
[21:19:28] <polyphem>  [itchyjunk] : foldr op nil xs  substitutes (:) with op and [] with nil in xs , think that way 
[21:20:58] <[itchyjunk]> hmm
[21:20:59] <EvanR> foldl (flip (:)) (1:[]) [2,3,4,5]    is the next step
[21:21:08] <EvanR> see
[21:21:18] <[itchyjunk]> oh flip is a real function? hmmmm
[21:21:21] <EvanR> yes
[21:21:24] <c_wraith> I don't think that way.  I think about how on non-empty lists, foldr reduces to a call to f, while foldl reduces to a call to foldl.  That's the key difference to me.
[21:21:37] <[itchyjunk]> thought you were using as a placeholder for the idea lol
[21:22:11] <EvanR> an example of skipping the helper function by using existing functions and putting them together
[21:22:24] <jackson99> itchyjunk, you don't have to name every trivial function btw, foldl (\acc x -> x : acc)   would work too
[21:22:27] <EvanR> which you can only do after learning the "existing" vocab
[21:22:27] *** Joins: SomeoneElse (~SomeoneEl@c-24-34-241-188.hsd1.ma.comcast.net)
[21:22:58] <jackson99> or just flip, as was mentioned several times above
[21:23:45] <polyphem> foldr (+) 0 (1:2:3:[]) == 1+2+3+0
[21:24:16] <EvanR> [itchyjunk], did you see my two steps above? if you go ahead and write out all 5 (6?) steps I hope it's very clear and beautiful!
[21:24:52] <jackson99> > foldr (+) z [a,b,c,d]
[21:24:53] <lambdabot>  a + (b + (c + (d + z)))
[21:24:56] <jackson99> > foldl (+) z [a,b,c,d]
[21:24:57] <lambdabot>  z + a + b + c + d
[21:25:14] *** Parts: SomeoneElse (~SomeoneEl@c-24-34-241-188.hsd1.ma.comcast.net) ()
[21:25:24] <EvanR> the final form of folding Exprs kind of loses something
[21:25:26] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[21:26:14] <jackson99> hmm, probably easier to visualize:
[21:26:17] <jackson99> > foldr f z [a,b,c,d]
[21:26:19] <lambdabot>  f a (f b (f c (f d z)))
[21:26:21] <jackson99> > foldl f z [a,b,c,d]
[21:26:22] <lambdabot>  f (f (f (f z a) b) c) d
[21:26:52] <[itchyjunk]> yes i can just barely follow along the notation but i think it makes sense
[21:27:04] <EvanR> my notation was literally haskell expressions xD
[21:27:08] <EvanR> of your example
[21:28:01] <[itchyjunk]> right!
[21:28:52] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:215b:2bd2:2b33:135e) (Remote host closed the connection)
[21:29:00] <sofviic[m]> foldr = 'accumulates' starting from the right
[21:29:01] <sofviic[m]> foldl = 'accumulates' starting from the left
[21:29:09] <EvanR> oof...
[21:29:09] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:1b40:b56a:3751:6306)
[21:29:22] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[21:29:56] <polyphem> [itchyjunk]: heres a fun tal about intuition for list folds : https://www.youtube.com/watch?v=t9pxo7L8mS0
[21:30:06] <polyphem> *talk*
[21:31:25] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 240 seconds)
[21:33:03] <[itchyjunk]> Hm there are conferences where there are talks just about fold? interesting!
[21:34:23] <EvanR> well, the idea of folding things goes beyond looping through a list
[21:34:33] <EvanR> IT'S KIND OF A BIG DEAL
[21:34:38] <[itchyjunk]> ah
[21:36:47] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:37:38] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:1b40:b56a:3751:6306) (Remote host closed the connection)
[21:37:41] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[21:37:55] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:62f3:c8e:2d83:a34f)
[21:40:48] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:45:01] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[21:45:09] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[21:45:14] *** Quits: zer0bitz (~zer0bitz@196.244.192.60) (Ping timeout: 256 seconds)
[21:45:24] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[21:48:57] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Ping timeout: 240 seconds)
[21:54:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:54:22] *** Joins: rito_ (~rito_gh@45.112.243.149)
[21:55:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:55:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:55:48] *** Joins: wroathe (~wroathe@user/wroathe)
[21:59:47] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:03:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:06:44] <[itchyjunk]> "" is an empty string right?
[22:06:55] <[itchyjunk]> Is that the best way to talk about nil case of a string?
[22:06:56] <geekosaur> yes
[22:07:06] <geekosaur> what is "nil case"?
[22:07:10] <monochrom> It is one of the many best ways.
[22:07:21] <geekosaur> also, since String is [Char],
[22:07:29] <geekosaur> > [] :: String
[22:07:30] <lambdabot>  ""
[22:07:44] <EvanR> it's literally the empty string (list)
[22:08:50] <[itchyjunk]> hmm
[22:09:50] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:10:23] <EvanR> probably falls in the same mindblowing category of tech such as 'zero' and 'no op'
[22:10:28] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:11:56] <EvanR> https://en.wikipedia.org/wiki/Zero-ohm_link
[22:12:03] <monochrom> Nah in this case it is the surprise that since String = [Char], list syntax works.
[22:12:48] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[22:13:32] <EvanR> yeah I kind of wouldn't complain if String became an abstract type and was not a list
[22:14:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:14:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:14:31] *** Joins: wroathe (~wroathe@user/wroathe)
[22:14:46] <monochrom> Performance police complains that String is not an abstract type. >:)
[22:14:48] <jackson99> I wouldn't complain if it became alias for Text
[22:14:49] <EvanR> though decades of code would probably complain
[22:16:03] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:18:00] <johnw> or just make lazy Text available through the Prelude
[22:18:19] <johnw> I never use String, but it means importing and enabling OverloadingStrings everywhere, all the time
[22:18:31] <johnw> I should make a macro for that
[22:18:51] <EvanR> standard pile of imports everywhere is another story
[22:19:00] *** Joins: Jupy7er (~Jupy7er@2001:d08:e3:b1:dd4e:c9da:9c60:5d27)
[22:19:40] *** Quits: Jupy7er (~Jupy7er@2001:d08:e3:b1:dd4e:c9da:9c60:5d27) (Client Quit)
[22:19:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:19:51] <johnw> I wish I could manage language features in another Haskell module (not cabal) so that I could import that in and have everything. Project preludes.
[22:22:42] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[22:26:28] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:54ff:c767:ef1d:433e)
[22:27:07] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:28:53] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:62f3:c8e:2d83:a34f) (Remote host closed the connection)
[22:30:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:30:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:30:17] *** Joins: wroathe (~wroathe@user/wroathe)
[22:33:53] *** Quits: max22- (~maxime@2a01cb088335980006a2e176d919440a.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[22:34:37] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Ping timeout: 240 seconds)
[22:35:27] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:38:12] *** Quits: AlexNoo (~AlexNoo@178.34.162.219) (Read error: Connection reset by peer)
[22:38:56] *** Quits: Topsi1 (~Tobias@dyndsl-095-033-023-075.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[22:40:12] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[22:40:19] *** Joins: s2k (~textual@122.172.234.134)
[22:42:41] *** Joins: AlexNoo (~AlexNoo@178.34.162.219)
[22:45:23] <[itchyjunk]> I have done confused myself again
[22:45:44] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[22:46:44] <[itchyjunk]> If i want to take two string and remove every char in second that is also present in one, is my base case take a char and a string and remove that char from the string?
[22:46:50] <[itchyjunk]> i think so, right?
[22:46:59] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:62f3:c8e:2d83:a34f)
[22:47:08] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:47:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:47:18] <[itchyjunk]> ah, i think i have solved that case actually
[22:47:19] <[itchyjunk]> https://bpa.st/7ETQ
[22:47:48] <[itchyjunk]> i think i just need to tweak my blah so it can take a string and i can recurse through stuff
[22:50:15] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[22:50:55] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:51:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[22:51:25] *** Joins: hololeap (~hololeap@user/hololeap)
[22:52:42] <[exa]> iteratee_: sounds like a combination of 'filter' and 'elem'
[22:53:42] <[exa]> oh sorry, misfired highlight. Originally to [itchyjunk] ^
[22:53:53] <hololeap> anyone have any idea how to run LogicT branches in parallel?
[22:54:09] <[itchyjunk]> hmm, well i asks me to use foldr to solve it ;x
[22:54:19] <hololeap> this is what I tried, but I get nothing but fizzled sparks: parChoice s = runEval . fmap choice . parList s
[22:55:03] <[exa]> hololeap: is that even possible given there are cuts and everything?
[22:55:13] <hololeap> I have no idea :/
[22:56:04] <EvanR> [itchyjunk], did you write filter already using foldr
[22:56:30] <EvanR> if so, you technically used foldr xD
[22:56:33] <[exa]> there's the "fair conjunction" and "fair disjunction" combinators that iirc don't go well with parallel
[22:57:37] <[itchyjunk]> I have not written filter already using foldr (filter at all)
[22:58:00] <EvanR> oh well, 
[22:58:03] <[itchyjunk]> I should maybe do some filter stuff, but i think i can solve this problem :x i'll look at filter in near (far?) future
[22:58:25] <EvanR> it sounds like it's doing a lot at once
[22:58:54] <hololeap> [exa]: my idea was that each branch (in this case) is equally likely to return a result, so have them run in parallel and return the first success
[22:58:55] <EvanR> since there are two lists I'm not sure you can do with only 1 foldr
[22:59:36] <[exa]> hololeap: what if it backtracks outside the parallelizable area (restarting your parallel spawner)?
[22:59:56] <[exa]> anyway my view is pretty much naive on this but I expect trouble :D
[23:00:09] <hololeap> that's fine. any feedback is welcome
[23:00:40] <[exa]> perhaps manually running a few logicTs using a normal parallel strategy would suffice with speed and prevent the possible weirdness?
[23:00:41] <hololeap> I'm also very new to the parallel side of haskell
[23:01:02] *** Joins: max22- (~maxime@2a01cb0883359800fc4f47b740d6e929.ipv6.abo.wanadoo.fr)
[23:02:30] <hololeap> I'll keep reading/thinking about it
[23:03:06] <[exa]> if you know all branches, you can just "ping" them with `par` a bit in advance before the branches, and then run the branches normally
[23:03:34] <[exa]> *before the branching
[23:03:57] <hololeap> I thought that was what my code did
[23:05:28] <hololeap> choice is from parser-combinators, btw: https://hackage.haskell.org/package/parser-combinators-1.3.0/docs/Control-Monad-Combinators.html#v:choice
[23:06:27] <hololeap> oh, asum is more canonical
[23:06:38] <hololeap> same thing though
[23:06:44] <[itchyjunk]> I am trying to understand this error at the bottom of this paste : https://bpa.st/LEVQ
[23:07:05] <[exa]> hololeap: what's the type after `fmap choice` ?
[23:07:26] <hololeap> parChoice :: forall m a. Alternative m => Strategy (m a) -> [m a] -> m a
[23:07:31] <[exa]> [itchyjunk]: likely too much parens around ++
[23:07:53] <[itchyjunk]> hmm
[23:08:06] <hololeap> so it's Eval (m a)
[23:08:12] <[exa]> [itchyjunk]: likely no parens in that line are necessary
[23:08:19] <[exa]> except for the patternmatch
[23:08:37] <[itchyjunk]> i was getting ome error without the parens too :<
[23:09:02] <[itchyjunk]> oh..
[23:09:13] <[itchyjunk]> the (++) is no good too?
[23:09:14] <[exa]> perhaps you want `:` instd of `++`
[23:09:27] <[exa]> because you're adding a single element from the left, yeah?
[23:09:33] <[itchyjunk]> I originally had : but my blah returns a list right?
[23:09:44] <[itchyjunk]> returns a string
[23:10:07] <[exa]> hololeap: anyway I would expect the stuff to expand to something like: branch1val `par` branch2val `par` branch2val `par` LogicT something 
[23:10:36] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[23:10:51] <[exa]> [itchyjunk]: why does it return a string?
[23:11:05] <[exa]> maybe we should put a proper name on the blah
[23:11:27] *** Joins: jakalx (~jakalx@base.jakalx.net)
[23:11:29] <[exa]> what is it supposed to do actually?
[23:11:31] <[itchyjunk]> blah takes a char c and a string s and removes all occurance of c from s and returns a string
[23:12:04] <[exa]> it can't because it doesn't recurse
[23:12:15] <hololeap> [itchyjunk]: the issue is that you have parens around ++
[23:12:28] <hololeap> `(blah x y ys) (++) (go xs y ys)` is very different than `(blah x y ys) ++ (go xs y ys)`
[23:12:42] <[exa]> yap ^
[23:12:54] <[itchyjunk]> [exa], blah is working fine, i test it with myRmv
[23:13:10] <[itchyjunk]> oh, myRmv takes a char and a string and removes the char from the string
[23:13:19] <[itchyjunk]> blah is a helper function for myRmv :<
[23:13:27] <[itchyjunk]> wait, maybe i see the issue
[23:13:37] <[itchyjunk]> hololeap, right, i removed the ()'s and now it compiles 
[23:13:42] <[itchyjunk]> but I am getting some logical error
[23:14:14] <[exa]> so blah is `prefixUnlessEqual` or something?
[23:15:47] <[itchyjunk]> I don't know what that is :x. my `myRmv "apple" 'a'` returns "pple"
[23:16:12] <EvanR> not exactly a strenuous test
[23:16:15] <[itchyjunk]> in case of `myRemove` i want `myRemove "apple" "ap"` to return "le"
[23:16:22] *** Quits: remexre (~remexre@user/remexre) (Remote host closed the connection)
[23:16:35] <EvanR> what about "apapalaea" 'a'
[23:16:36] <[itchyjunk]> I am getting a "non exhaustive patters for go" as an error currently
[23:16:37] *** Joins: remexre (~remexre@user/remexre)
[23:16:45] <[itchyjunk]> it reutnrs pple
[23:16:52] <EvanR> cool
[23:17:04] <[itchyjunk]> *Main> myRmv "apapalaea" 'a'
[23:17:04] <[itchyjunk]> "pple"
[23:17:21] <[itchyjunk]> This is why i am thinking my issue is with the go and/or myRemove function
[23:17:47] <[itchyjunk]> Maybe i am just missing some base case i need to address 
[23:17:50] <int-e> > "applesauce" \\ "cause"
[23:17:51] <lambdabot>  "pplae"
[23:17:51] <hololeap> [itchyjunk]: you'll have to scan the first list for every letter in the second list. your blah function really should have the signature: blah :: String -> Char -> String -> String
[23:18:03] <[itchyjunk]> "*** Exception: myRemove.hs:8:1-42: Non-exhaustive patterns in function go
[23:18:12] <int-e> oh right, that does this odd multiset difference thing
[23:18:34] <[itchyjunk]> hololeap, that's my `go` signature
[23:19:03] <hololeap> true, but I fail to see your point
[23:19:21] <[exa]> [itchyjunk]: `go` can't handle the end case with empty list
[23:20:02] <[itchyjunk]> hmm go gets 2 lists and hmmmmm
[23:20:16] * [itchyjunk] can't seem to handle the case with empty list either
[23:20:57] <[itchyjunk]> ah
[23:22:43] <[exa]> [itchyjunk]: what about doing it the other way, running through the string and allowing letters through only if they are not in the list of forbidden letters?
[23:22:57] <[exa]> (sounds a bit more like foldr to me)
[23:23:06] <hololeap> hopefully this isn't too close to giving away the answer, but
[23:23:11] <hololeap> > blah :: String -> Char -> String -> String ; blah s0 c s = if any (== c) s0 then s else c:s
[23:23:12] <lambdabot>  <hint>:1:44: error: parse error on input ‘;’
[23:23:20] <hololeap> % blah :: String -> Char -> String -> String ; blah s0 c s = if any (== c) s0 then s else c:s
[23:23:20] <yahb> hololeap: 
[23:23:28] <EvanR> if you write filter with foldr, and elems with foldr, and combine them, you technically used foldr
[23:23:33] <EvanR> er, elem
[23:23:38] <EvanR> :t elem
[23:23:39] <lambdabot> (Foldable t, Eq a) => a -> t a -> Bool
[23:23:42] <EvanR> bah
[23:23:46] <[exa]> it's very foldy, yes
[23:24:02] <geekosaur> % :t elem @[]
[23:24:02] <yahb> geekosaur: Eq a => a -> [a] -> Bool
[23:24:17] <[exa]> [itchyjunk]: if I get the code correctly, the thing you are doing now is kinda headed towards foldl
[23:25:05] <[itchyjunk]> hmm
[23:26:12] <[itchyjunk]> go [] y ys = y:ys
[23:26:27] <[itchyjunk]> if the list of things to removee is empty, just accumulate y into the accumulator, no?
[23:26:40] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[23:26:42] <hololeap> aren't you supposed to use foldr?
[23:26:57] <[itchyjunk]> yes i am using foldr
[23:27:48] <EvanR> you're using recursion
[23:28:01] <EvanR> maybe the problem should have said, use foldr and not recursion
[23:28:10] <[exa]> +1 ^
[23:28:15] <[itchyjunk]> https://bpa.st/PWZA
[23:28:19] <hololeap> % foldr (:) "" "abcd"
[23:28:19] <yahb> hololeap: "abcd"
[23:28:28] <[itchyjunk]> oh i should be doing this without recursion?
[23:28:35] <hololeap> foldr is already building the list back in the correct direction
[23:28:35] <[exa]> likely
[23:28:35] <EvanR> foldr is all you need
[23:28:37] *** Joins: ouestbillie (~gallup@142.169.33.81)
[23:28:41] <[itchyjunk]> hmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
[23:28:49] <[itchyjunk]> maybe i will just start over then
[23:28:54] <EvanR> though likely to only 1 foldr
[23:28:58] <EvanR> NOT only 1
[23:29:16] *** Quits: ouestbillie (~gallup@142.169.33.81) (Client Quit)
[23:29:25] *** Quits: moshet (~moshet@179.33.156.20) (Ping timeout: 240 seconds)
[23:29:33] *** Joins: ouestbillie (~gallup@142.169.33.81)
[23:29:53] <[itchyjunk]> yup, this is too convoluted for my own good. From scratch!
[23:30:03] <[exa]> [itchyjunk]: if you get "ap" and "apple", imagine the problem as solving a small instance ('a':"pple") and deciding whether to return the whole thing or just continue with the result of processing "pple"
[23:31:34] <[itchyjunk]> well i wanna take 'a' from "ap" and go through each char of "apple" and see if there is a 'a' in that list. then do the same with 'p' i think?
[23:31:43] <[exa]> that's foldl
[23:31:46] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[23:31:49] <[itchyjunk]> @_@
[23:31:59] <[exa]> because you can't produce the result by tiny bits
[23:32:04] <[itchyjunk]> hmmm
[23:32:16] <[exa]> do it the other way, take 'a' from apple and decide if you can send it to output or not
[23:33:01] <[itchyjunk]> interesting.. guess i don't really understand foldr vs foldl very well. okay, get 'a' from "apple" and make a decision. i'll try this
[23:33:16] <EvanR> "see if x is in list" with foldr is fine
[23:33:27] <EvanR> then you can cancel early if it is
[23:33:38] <hololeap> foldr naturally builds the new list in the correct direction. you only have to use (:), not (++)
[23:34:24] <[exa]> the question is "can you produce partial output"? with recursing over the string, you can decide that "l" will be a part of output before processing the final "l". With recursing over the forbidden characters, you are never sure your output isn't going to get erased by the next forbidden character
[23:34:43] <[exa]> * the final "e"
[23:35:10] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:35:21] <hololeap> [itchyjunk]: for starters try to implement filter with foldr. that will get you most of the way to your answer
[23:35:25] <hololeap> :t filter
[23:35:26] <lambdabot> (a -> Bool) -> [a] -> [a]
[23:35:35] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:35:46] <[itchyjunk]> oh okay. implement filter with foldr it is then
[23:36:31] <EvanR> someone was asking if the answer to a Bool question can return partial output? xD
[23:37:00] <[itchyjunk]> Maybe true / Maybe false
[23:37:07] <EvanR> file not found
[23:37:13] <hpc> EvanR: :D
[23:37:49] <[exa]> data Bool' = False | True | :¯\_(ツ)_/¯
[23:37:50] *** Joins: juhp (~juhp@128.106.188.82)
[23:39:22] <hpc> fun fact, https://thedailywtf.com/articles/What_Is_Truth_0x3f_ is 17 years old
[23:40:41] *** Quits: ouestbillie (~gallup@142.169.33.81) (Read error: Connection reset by peer)
[23:44:15] *** Quits: kronicma1 (user76545@neotame.csclub.uwaterloo.ca) (Ping timeout: 250 seconds)
[23:44:44] <EvanR> old enough to die for your country but not old enough to drink
[23:44:50] <EvanR> sorry wrong channel
[23:45:34] *** Joins: ouestbillie (~gallup@modemcable053.204-20-96.mc.videotron.ca)
[23:45:57] *** Joins: kronicma1 (user27604@neotame.csclub.uwaterloo.ca)
[23:46:37] *** Joins: roboguy (~roboguy@user/roboguy)
[23:47:04] <[itchyjunk]> It seems to work? https://bpa.st/C4UQ
[23:47:17] <[itchyjunk]> wait
[23:47:27] <[itchyjunk]> wth, i never used foldr..
[23:47:32] <[itchyjunk]> what am i doing? xD
[23:47:46] <[exa]> [itchyjunk]: yeah now transform to foldr
[23:47:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:48:55] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:49:17] <EvanR> you can basically write any function on List with foldr
[23:50:30] <hpc> not just basically, you actually can
[23:54:38] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[23:54:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:54:53] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:54:53] *** Joins: wroathe (~wroathe@user/wroathe)
[23:57:56] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
