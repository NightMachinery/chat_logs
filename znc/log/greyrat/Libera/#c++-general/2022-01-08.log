[00:04:01] <p-i-> gottit tx
[00:10:59] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[00:18:50] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:19:36] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Client Quit)
[00:33:14] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[00:34:18] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:41:19] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[00:43:40] *** Quits: letto (~letto@188.25.113.229) (Quit: Konversation terminated!)
[00:44:24] *** Joins: letto (~letto@188.25.113.229)
[00:44:39] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:51:13] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[00:59:17] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Ping timeout: 252 seconds)
[01:00:45] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[01:01:01] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[01:12:29] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[01:14:39] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:21:45] *** Joins: rayw_ (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[01:22:03] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Read error: Connection reset by peer)
[01:22:55] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a9bb:faa4:6c28:2bd6) (Quit: Quit)
[01:26:37] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 240 seconds)
[01:35:39] *** Joins: Leone (~Leo@157.52.18.77)
[01:37:37] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[01:38:45] *** Quits: Leo_V (~Leo@157.52.18.77) (Ping timeout: 256 seconds)
[01:40:39] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:50] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:50] *** ChanServ sets mode: +v npaperbot
[01:43:26] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[01:46:37] *** Quits: autark (~autark@ti0048a400-0869.bb.online.no) (Ping timeout: 240 seconds)
[01:47:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[01:49:04] *** Joins: autark (~autark@ti0048a400-0869.bb.online.no)
[01:58:13] *** Joins: LHLaurini (~LHLaurini@177.67.230.93.razaoinfo.com.br)
[01:58:22] *** Quits: LHLaurini (~LHLaurini@177.67.230.93.razaoinfo.com.br) (Remote host closed the connection)
[01:59:45] *** Joins: LHLaurini (~LHLaurini@177.67.230.93.razaoinfo.com.br)
[01:59:55] *** Quits: LHLaurini (~LHLaurini@177.67.230.93.razaoinfo.com.br) (Remote host closed the connection)
[02:00:47] *** Joins: evocatus (~evocatus@62.182.77.224)
[02:01:01] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[02:01:24] *** Quits: evocatus (~evocatus@62.182.77.224) (Remote host closed the connection)
[02:01:36] *** Joins: LHLaurini (~LHLaurini@177.67.230.93.razaoinfo.com.br)
[02:01:38] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:01:45] *** Quits: LHLaurini (~LHLaurini@177.67.230.93.razaoinfo.com.br) (Remote host closed the connection)
[02:08:07] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:17:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:25:45] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:32:36] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[02:37:34] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[02:38:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[02:42:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:89aa:29d4:1f39:3e9) (Ping timeout: 240 seconds)
[02:53:40] *** Quits: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com) (Remote host closed the connection)
[03:03:37] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Ping timeout: 240 seconds)
[03:04:45] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[03:08:29] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[03:40:00] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[03:46:06] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[03:46:44] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[03:53:15] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:54:15] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:56:16] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[04:04:01] *** Quits: irrenhaus3 (~xenon@HSI-KBW-046-005-002-128.hsi8.kabel-badenwuerttemberg.de) (Quit: Lost terminal)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:27:46] *** Quits: fundies (~fundies@047-014-230-095.res.spectrum.com) (Ping timeout: 256 seconds)
[04:31:35] *** Joins: artok_ (~azo@mobile-access-5d6ab9-62.dhcp.inet.fi)
[04:34:25] *** Quits: artok (~azo@mobile-access-bcee77-2.dhcp.inet.fi) (Ping timeout: 256 seconds)
[04:38:36] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[04:42:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[04:43:29] *** Joins: frost (~frost@user/frost)
[04:44:05] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:45:58] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[04:55:49] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[04:58:42] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[05:01:12] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:04:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[05:13:40] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 256 seconds)
[05:13:48] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[05:18:14] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[05:21:30] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[05:21:57] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[05:22:35] *** Quits: Figworm (FiggyWitIt@user/figworm) (Ping timeout: 256 seconds)
[05:25:02] *** Joins: Figworm (~inoor@user/figworm)
[05:29:01] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:30:24] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:40:40] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:50] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:50] *** ChanServ sets mode: +v npaperbot
[05:48:42] *** Joins: __dev (~sys@user/dev/x-7984917)
[05:56:31] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:59:37] *** Quits: Figworm (~inoor@user/figworm) (Ping timeout: 240 seconds)
[06:02:22] *** Joins: Figworm (~inoor@user/figworm)
[06:02:24] *** Quits: rayw_ (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[06:02:52] *** Quits: Figworm (~inoor@user/figworm) (Client Quit)
[06:11:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:12:36] *** Quits: artok_ (~azo@mobile-access-5d6ab9-62.dhcp.inet.fi) (Ping timeout: 256 seconds)
[06:18:37] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[06:26:38] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a9bb:faa4:6c28:2bd6)
[06:29:33] *** Joins: artok (~azo@mobile-access-5d6ab9-62.dhcp.inet.fi)
[06:34:23] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[06:38:32] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Client Quit)
[06:49:00] *** Quits: chozorho (~chozorho@2601:146:300:c30::d5ec) (Quit: WeeChat 3.0)
[06:50:55] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:00:49] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[07:02:06] *** Joins: chozorho (~chozorho@2601:146:300:c30::d5ec)
[07:02:47] *** Quits: chozorho (~chozorho@2601:146:300:c30::d5ec) (Client Quit)
[07:03:08] *** Joins: chozorho (~chozorho@2601:146:300:c30::d5ec)
[07:05:14] *** Joins: frost (~frost@user/frost)
[07:11:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:12:42] *** Joins: hypnos (~hypnos@rrcs-24-213-148-3.nys.biz.rr.com)
[07:13:34] *** Quits: hypnos (~hypnos@rrcs-24-213-148-3.nys.biz.rr.com) (Client Quit)
[07:15:49] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[07:15:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:24:19] *** Joins: adeliktas5 (~adeliktas@i59F52114.versanet.de)
[07:26:17] *** Quits: adeliktas (~adeliktas@i59F5FD0A.versanet.de) (Ping timeout: 240 seconds)
[07:26:17] *** adeliktas5 is now known as adeliktas
[07:31:51] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community @ https://indiedevs.net/)
[07:33:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:46:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:49:55] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[07:50:48] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[07:52:15] *** Joins: fundies (~fundies@047-014-230-095.res.spectrum.com)
[07:53:17] <yolo> can I de-const a const?
[07:55:55] <kalven> there's const_cast. it comes with caveats
[07:59:11] <Alipha> yolo: modifying an object that is actually const is Undefined Behavior. but if you have a const T* or const T& which refers to a T object and the object is not actually const, then using const_cast to remove the const from the pointer/reference and then modifying the object is well-defined. It's bad programming practice though
[08:02:14] <yolo> http://ix.io/3Lsr  whenever I need use posix-c api I just could not get rid of those array-decay or const-char*/char-*const cast problems
[08:04:59] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 252 seconds)
[08:07:50] <Alipha> yolo: yeah, you often run into const issues when dealing with T** and const versions thereof. go ahead and use const_cast, since execve doesn't actually modify its arguments, even though it accepts `char* const*` (a pointer to const pointers to non-const chars)
[08:09:26] <Alipha> {} void foo(const char* arg_list[]) { execve("hi", const_cast<char* const*>(arg_list), nullptr); }
[08:09:27] <geordi>  
[08:10:54] <yolo> Alipha: isn't const T* x : 'x is pointer to const T', x itself is not const, but the content(object) it points to is const, so I is not a const and de-const does not hurt?
[08:11:45] <yolo> s/so I is not/so x is not/
[08:13:32] <yolo> Alipha: thanks, that const_cast made the magic, though cppcoreguidelines-pro-type-const-cast still warns, i will just ignore that
[08:13:43] <Alipha> if you "de-const" then you'd be able to use that pointer-to-non-const to modify the const object
[08:14:17] <yolo> I just want to see 0 warnings and get a bit obssessed about that these days thanks to all these modern editor helpers.
[08:14:43] <Alipha> const int v = 3; const int* x = &v; int *y = const_cast<int*>(x); *y = 5; // modifying v, which is const, which is Undefined Behavior
[08:14:43] <yolo> Alipha: i c, thanks!
[08:15:27] <Alipha> int v = 3; const int* x = &v; int *y = const_cast<int*>(x); *y = 5; // this is legal because here v is not actually const.
[08:16:07] * yolo copies these to his little snippet collections
[08:21:24] <yolo> for those array-decay noises, can I say: "as long as the receiver(function arg uses this decayed-array) does not do sizeof() or does not care about array's, it's 100% safe", really, many a time I just want to pass the starting pointer of the array(to avoid a copy for example)
[08:21:47] <yolo> s/does not care about array's size/
[08:22:48] <yolo> in the above code, nullptr is at the end to the array, so the receiving function can detect the size of the array, just like a string has NUL
[08:24:20] <Alipha> yolo: ?? const has nothing to do with array sizes
[08:24:50] <yolo> Alipha: the post code has two FIXME, one is const, another is this frequent array-decay warning
[08:25:09] <yolo> some array-decay warning can be solved by std::array but not always
[08:25:50] <yolo> std::array, or array and size both passed over, or a reference
[08:47:02] *** Quits: AmR (~AmREiSa@156.199.28.131) (Quit: Konversation terminated!)
[08:52:27] *** Joins: epony (~epony@user/epony)
[08:53:25] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:678f) (Quit: Leaving)
[09:07:56] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:10:57] *** Joins: MarcusRoman (~Admin@37.120.232.44)
[09:13:52] *** Joins: AmR (~AmREiSa@156.199.28.131)
[09:17:27] <smallville7123> welp i found something in Java that is IMPOSSIBLE to do, compared to C++       specify defaults for generics,      eg  template <typename ARRAY> class A { ARRAY<IntegerClass> list = new ARRAY(); };      A<ArrayList> a = new A<ArrayList>();  // gets transformed to            A<ArrayList<IntegerClass>> a = new A<ArrayList<IntegerClass>>();
[09:17:31] *** Joins: NiD27 (~nid27@49.205.145.73)
[09:17:38] <smallville7123> you CANNOT do this in java :(
[09:18:02] <smallville7123> even if IntegerClass is final and cannot be subclasses :(
[09:18:08] <smallville7123> subclassed*
[09:19:15] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[09:20:49] <smallville7123> eg in java you need to EXPLICITLY state ArrayList<IntegerClass> even though doing so is redundant as IntegerClass is Final and cannot be subclassed and it expects IntegerClass anyway
[09:21:12] *** Joins: johnny (~johnny@user/johnny)
[09:21:48] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[09:22:17] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[09:24:37] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[09:25:01] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[09:27:44] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[09:30:37] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[09:30:45] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[09:33:37] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[09:40:40] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:48] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:48] *** ChanServ sets mode: +v npaperbot
[09:41:44] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[09:44:37] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[09:45:26] *** Joins: Xardas (~Xardas@149.233.51.127)
[09:46:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[09:47:16] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:48:51] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:51:19] <p-i-> Is there any stdlib I can use to randomly copy all elements from a size-100 vector into 10 size-10 vectors?
[09:54:04] <very_sneaky> do you mean you don't care which position in the 10 size 10 vectors each of the elements in the original vector occupy?
[09:54:50] <ville> no
[09:55:55] *** Quits: dfkfs (~dfkfs@178.49.152.151) (Quit: Client closed)
[09:56:08] <p-i-> yup
[09:56:11] <InPhase> p-i-: Loop and divide (or modulo) the index, and call std::shuffle first if you really meant randomly.
[09:56:26] <p-i-> I think I need to randomly permute the vector first
[09:56:39] <p-i-> cool, tx
[09:57:24] <InPhase> modulo is a little simpler in not requiring any special attention if they don't divide evenly.
[09:57:38] <p-i-> Is there a compact way to pull out e.g. items 21..30 from a vector into another vector?
[09:57:53] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[09:58:47] <InPhase> You can do a std::copy or std::copy_n if you're allergic to for loops.
[09:58:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[09:59:24] <InPhase> In many cases, simply looping is actually clearer.
[09:59:25] <ville> InPhase: modulo gives you uneven distribution "most" of the time
[09:59:38] <InPhase> ville: It gives you as even as you can get.
[09:59:49] <InPhase> ville: Division can get pretty bad in comparison.
[10:00:42] <p-i-> I don't need random. Actual problem is that I have 100 signals, and I want to set up say 50 websockets where each websocket contains 10 signals. So each signal should appear in 5 websockets.
[10:01:00] <p-i-> It's to combat random server latency when creating any one websocket.
[10:02:00] <p-i-> I just hash each incoming packet and store the number of times that hash has been received. If it's the first time, I cout << packet. If it's the 5th time I remove the hash from the hash/count map.
[10:02:50] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[10:03:16] <p-i-> shuffle + create vector + manual-looping using v.push_back ... this looks good enough
[10:04:55] <ville> if the latency is truly random then it doesn't matter how you distribute them on your end
[10:05:50] <p-i-> but if I had signals 0..9 on the first 5 sockets, 10..19 on the next 5, etc... this isn't resilient. If the first 5 sockets are all slow, 10 signals are gona be slow.
[10:05:51] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[10:06:08] <ville> so it's not randoom?
[10:06:13] <ville> err random
[10:06:26] <p-i-> Socket latency _is_ random
[10:07:07] <ville> at any rate a what you're describing is work queues with work stealing
[10:08:25] <ville> you've a queue for every worker and distribute the work "evenly" into those. if a worker runs out of work it steals it froms oneone else's queue
[10:10:14] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Client Quit)
[10:13:35] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[10:14:15] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[10:17:17] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[10:19:35] *** Quits: MarcusRoman (~Admin@37.120.232.44) (Quit: Konversation terminated!)
[10:20:59] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[10:22:17] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[10:24:42] *** Joins: Xardas (~Xardas@149.233.51.127)
[10:25:45] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[10:38:45] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[10:41:49] <InPhase> p-i-: Outer iterate over source signals, inner iterate over source signal multiplicity, and maintain a next_socket index that you update with next_socket = (next_socket+1)%num_sockets;  Then rather than shuffling, you guarantee maximal spread of the multiplicities across different sockets.
[10:42:11] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[10:44:47] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[10:45:27] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:45:28] <InPhase> p-i-: Work stealing as ville suggests will achieve better balance, and thus is superior for large loads.  The iteration approach though requires no active synchronization, and thus scales better to large socket counts and/or very fast activity such that synchronization between them is a significant penalty.
[10:48:00] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[11:05:00] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[11:11:01] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Ping timeout: 240 seconds)
[11:11:32] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[11:11:49] *** Quits: ADHD (~XXX@user/ADHD) (Ping timeout: 240 seconds)
[11:17:09] <p-i-> ok I got it down, thru a mishmash of the suggestions. Works a charm. Thanks @channel!
[11:18:45] <p-i-> I'm currently doing `foo | bar` in bash, to pipe stdout from foo into stdin for bar.
[11:18:52] <p-i-> Problem is I have 3 different stream-types.
[11:19:20] <p-i-> So I'm wrapping each output in JSON: {"streamtype": 2, "payload": {...}"`
[11:19:25] <p-i-> and unpacking it in bar
[11:19:33] <p-i-> Is there a more direct way?
[11:23:49] *** Quits: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Ping timeout: 240 seconds)
[11:25:46] <ville> InPhase: standard requires the uniform distributions to have: 1/(end - begin + 1) discrete probability function. modulo certainly does not get you that
[11:26:13] *** Joins: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d)
[11:27:01] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[11:39:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:41:30] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[11:49:42] *** Quits: AmR (~AmREiSa@156.199.28.131) (Read error: Connection reset by peer)
[11:52:28] <ville> http://www.eelis.net/c++draft/rand.dist.uni#int-1.sentence-1
[12:05:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[12:09:38] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5329)))
[12:09:40] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[12:11:16] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:14:43] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[12:15:40] *** Joins: robod34 (~Username@79.113.195.239)
[12:19:39] *** Quits: artok (~azo@mobile-access-5d6ab9-62.dhcp.inet.fi) (Ping timeout: 256 seconds)
[12:20:25] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[12:23:12] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:23:45] *** Joins: rayw_ (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[12:29:51] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:42:36] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:42:49] *** Joins: supernova (~quassel@2405:9800:ba11:6207:bd49:2c84:533f:e3bf)
[12:46:13] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[12:57:00] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[12:59:45] *** Joins: johnny (~johnny@user/johnny)
[13:01:18] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:10:20] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:13:20] *** Joins: andreasbuhr (~quassel@p5dcf9f78.dip0.t-ipconnect.de)
[13:15:39] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[13:16:22] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[13:36:30] <very_sneaky> are there any benefits to using -fanalyzer over something like clang-tidy for static analysis? do they do different things?
[13:37:45] <very_sneaky> hm, looks like -fanalyzer is gcc specific
[13:37:47] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:38:03] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[13:39:37] <LordKalma> !fact
[13:39:38] <nolyc> LordKalma: A base class specifier that contains the keyword virtual, specifies a virtual base class.
[13:40:00] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:40:40] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:49] *** ChanServ sets mode: +v npaperbot
[13:41:44] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[13:45:13] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[13:49:05] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[13:53:00] *** Joins: r-g (~r-g@51.15.187.53)
[13:56:09] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[13:56:57] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[14:03:12] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[14:05:25] <ville> very_sneaky: -fanalyzer might not do a particularly stellar job with c++
[14:06:30] <ville> c++ support is planned for gcc 13
[14:08:33] <very_sneaky> ah, good to know.
[14:14:34] *** Quits: NiD27 (~nid27@49.205.145.73) (Remote host closed the connection)
[14:16:50] *** Quits: ville (~ville@user/ville) (Quit: kernel)
[14:17:24] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[14:17:54] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[14:18:55] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[14:19:10] *** Joins: ville (~ville@user/ville)
[14:20:27] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[14:37:34] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:52:40] <LordKalma> do you know if there's a way to search in file's *contents* in all of git's history?
[14:53:10] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[15:01:03] *** Quits: segnior (segnior@user/segnior) (Read error: Connection reset by peer)
[15:01:49] <RandomReader> as in trying to find when something appeared or changed? git log can do it, see https://git-scm.com/docs/git-log#Documentation/git-log.txt--Sltstringgt
[15:02:20] <LordKalma> ended up finding `git grep <regexp> $(git rev-list --all)` on stack overflow
[15:03:12] <RandomReader> I think the log search is more efficient, but I can't remember what difference it made and I don't have a decently-sized repo in front of me at the moment
[15:04:48] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[15:15:07] *** Joins: xkuru (~xkuru@user/xkuru)
[15:26:17] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[15:28:10] *** Joins: DSpider (~DSpider@82.79.237.90)
[15:29:38] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[15:38:15] *** Quits: andreasbuhr (~quassel@p5dcf9f78.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:40:58] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[15:55:33] <very_sneaky> LordKalma: there's a better command if you're looking to search the history of one specific file, iirc
[15:56:07] <very_sneaky> oh, yeah, it's git log
[15:56:09] <very_sneaky> lol
[15:56:29] <LordKalma> I didn't know which file it was :)
[16:05:30] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:05:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[16:16:01] <cbreak> LordKalma: git log -Sregexhere
[16:16:18] <cbreak> or -G
[16:16:25] <cbreak> depending on what you want
[16:21:01] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[16:22:31] <very_sneaky> how do people here treat the core guidelines? Have you read them/take them as good advice to be implemented where you can? or do you have good reasons for not following the advice provided?
[16:22:50] <very_sneaky> there's a lot to read here
[16:39:04] <ville> i've read them. don't really bother with them specifically. i may agree on parts
[16:39:11] *** Joins: sigma_ (~sigma@86.57.109.147)
[16:39:40] <ville> as in i don't go out of my way to run some doohickey that tells me whether i am conforming to them
[16:39:55] <very_sneaky> not a clang-tidy user?
[16:41:23] <very_sneaky> there are also things in here like when to prefer class over struct, when to implement a function as a member or as a standalone function etc as well - so things related to convention rather than having more strict technical reasons
[16:41:35] <ville> only because i am lazy, i think emacs' lsp-mode uses it by default. but i never bother to act on any of that
[16:42:02] <very_sneaky> gotcha. any particular reason or just laziness?
[16:43:05] <sigma_> hi, i have static main_board object with const value and this object carry an array [20][20]. i call main_board in headers with extern and get const array with refrence but i think every time i called the data is deffrent. why ?
[16:43:42] <very_sneaky> sigma_: might be easier if you provide a mwe to illustrate your problem
[16:44:16] <very_sneaky> you could use godbolt.org or wandbox.org to share your code snippet
[16:44:51] <ville> laziness probably. the times i've bothered to check what it's complaining about has not been anything i've cared about. so one possibility is that i already mostly do the things core guide lines suggest
[16:45:12] <sigma_> my array is static and i want just read ram address , and get data, i have two other object but data is deffrent
[16:46:01] <ville> sigma_: you could try sanitizer build to see if you're for example reading uninitialized memory
[16:46:07] <ville> sigma_: or valgrind
[16:47:29] <sigma_> i heard about valgrind but i dont know how to use it. it is part of debbuger like gdb
[16:47:44] <very_sneaky> `valgrind ./a.out`
[16:48:01] <very_sneaky> it's unix only though, no windows iirc
[16:48:43] <ville> valgrind is a tool that instruments your binary in such way that various problems can be analyzed. gdb isn't "part of a debugger". it is a debugger.
[16:48:44] <sigma_> yeh , i know
[16:51:15] <sigma_> vallie, gdb is debugger. i mean  valgrind is part of debugger like gdb. example gdb "command valgrind"
[16:51:44] <very_sneaky> valgrind comes as a standalone tool
[16:52:58] <very_sneaky> though, i think you can use it from gdb
[16:52:59] <sigma_> tnx
[16:56:32] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:3fb6:23a4:a917:27c7)
[16:57:23] <rond_> std::optional<MyStruct> a;Â Â Â Â Â Â  does setting `a = {someExistingStruct}` in a fuction trigger copying?
[16:57:24] <__dev> hey guys
[16:58:11] <rond_> (so after the function terminates and local `someExistingStruct` gets out of scope, `a` is still valid because, well, it contains COPIED object.
[16:59:14] <__dev> Do you have idea how I can make a module about report by service bot for example If user make report !report <nick> <reason> I want services to make this report and send the msg on different channel about report
[16:59:38] <__dev> the services are C++
[17:10:41] *** Quits: supernova (~quassel@2405:9800:ba11:6207:bd49:2c84:533f:e3bf) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:14:31] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[17:14:54] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:15:57] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a9bb:faa4:6c28:2bd6) (Quit: Quit)
[17:16:08] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[17:16:31] *** Joins: artok (~azo@mobile-access-bcee8a-63.dhcp.inet.fi)
[17:18:37] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[17:21:16] *** Quits: artok (~azo@mobile-access-bcee8a-63.dhcp.inet.fi) (Ping timeout: 256 seconds)
[17:21:16] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[17:35:01] <PJBoy> choose an IRC library and use it
[17:35:28] <PJBoy> there isn't much of a question there
[17:35:46] *** Joins: plastico (~plastico@neomutt/plastico)
[17:38:59] <rond_> PJBoy could you take a look at my question? (I think I'm correct, but...)
[17:40:41] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:49] *** ChanServ sets mode: +v npaperbot
[17:41:05] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:03:18] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[18:03:46] *** Quits: etolier (~somewhere@202-144-174-137.ip4.superloop.com) (Ping timeout: 256 seconds)
[18:04:23] *** Joins: etolier (~somewhere@122.199.46.54)
[18:09:54] *** Joins: pulse (~pulse@user/pulse)
[18:10:45] <PJBoy> rond_, well it'd be worth testing
[18:11:36] <PJBoy> { MoveOnly obj; optional<MoveOnly> a; a = {obj}; } using MoveOnly = unique_ptr<int>;
[18:11:36] <geordi> error: no match for 'operator=' in 'a = {obj}' (operand types are 'optional<unique_ptr<int> >' and '<brace-enclosed initializer list>')
[18:11:43] <PJBoy> there you go
[18:12:31] <PJBoy> meanwhile
[18:12:33] <PJBoy> { Copyable obj; optional<Copyable> a; a = {obj}; } using Copyable = shared_ptr<int>;
[18:12:33] <geordi>  
[18:17:25] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[18:19:04] *** Joins: seninha (~seninha@user/seninha)
[18:21:42] *** Quits: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com) (Quit: WeeChat 3.4)
[18:22:15] <p-i-> Suppose I'm dealing with large integers (microsecond unix timestamps, e.g. t = 1641661200*1000000, how would I write that?
[18:22:32] <p-i-> uint64_t t = 1641661200LL * 1000000LL; ?
[18:22:37] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:22:45] *** Joins: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com)
[18:28:25] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[18:33:34] *** Quits: rayw_ (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Remote host closed the connection)
[18:35:48] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[18:39:04] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[18:39:39] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:47:fa74:d54f:1100)
[18:40:13] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[18:41:24] <PJBoy> why not
[18:41:57] <PJBoy> I would also accept `uint64_t t = 1'641'661'200'000'000;`
[18:42:26] <p-i->  Ooh, haven't seen that before... What C++ version did that come in?
[18:44:37] <PJBoy> c++14
[18:46:24] <ashafq> I was looking at this: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1280r0.html
[18:46:40] <ashafq> I don't know if this is merged into the standard yet, but would be nice!
[18:51:40] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[18:52:46] <PJBoy> [p1280]
[18:52:46] <npaperbot> P1280R2: [Library Evolution] Integer Width Literals <https://wg21.link/p1280r2> (by Isabella Muerte) (2019-06-17) (Related: https://wg21.link/lewg548, https://wg21.link/p1280r2/github)
[18:52:56] <PJBoy> dropped
[18:55:31] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[19:02:24] <PJBoy> sucks that we don't get to see what the points raised in the discussion were
[19:02:51] *** Quits: adeliktas7 (~adeliktas@v15153.1blu.de) (Read error: Connection reset by peer)
[19:07:11] *** Joins: adeliktas7 (~adeliktas@v15153.1blu.de)
[19:09:30] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Ping timeout: 256 seconds)
[19:10:19] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[19:19:07] *** Joins: paul424 (~tom@ip-31-0-124-61.multi.internet.cyfrowypolsat.pl)
[19:19:53] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[19:24:05] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[19:27:05] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:358f:9a20:1f4d:f83e)
[19:27:05] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:358f:9a20:1f4d:f83e) (Changing host)
[19:27:05] *** Joins: RoKenn (~RoKenn@user/rokenn)
[19:30:19] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[19:30:29] <ville> it's good that that was dropped
[19:31:09] <ville> it would have taken the good literal suffices away from better integer types that had saner conversion rules
[19:31:35] <ville> well ok i8, i16... and such it can take
[19:32:00] *** Joins: lxsameer (lxsameer@user/lxsameer)
[19:33:17] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:582f:142b:19c3:9520)
[19:33:17] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:582f:142b:19c3:9520) (Changing host)
[19:33:17] *** Joins: skapata (~Skapata@user/skapata)
[19:35:12] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[19:35:40] <xkoncek> i am wondering is openssl documentation is so lacking on purpose to force users to study it thoroughly
[19:36:12] <xkoncek> today at morning i was like "i just want a diffie-hellman exchange, how hard can it be"?
[19:36:13] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[19:38:19] *** Joins: lxsameer (lxsameer@user/lxsameer)
[19:43:27] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:01:27] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[20:01:35] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[20:06:16] *** Joins: NiD27 (~nid27@49.205.149.18)
[20:13:47] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[20:17:35] *** Joins: artok (~azo@mobile-access-bcee8a-63.dhcp.inet.fi)
[20:21:16] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:26:15] *** Quits: Friithian (gunqqer@friithian.dev) (Ping timeout: 250 seconds)
[20:26:31] *** Joins: Friithian (~gunqqer@friithian.dev)
[20:27:33] *** Quits: edr (~edr@user/edr) (Ping timeout: 250 seconds)
[20:27:45] *** Joins: edr (~edr@enlo.co)
[20:27:45] *** Quits: edr (~edr@enlo.co) (Changing host)
[20:27:45] *** Joins: edr (~edr@user/edr)
[20:29:17] *** Quits: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi) (Ping timeout: 250 seconds)
[20:29:33] *** Joins: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi)
[20:29:47] *** Joins: segnior (segnior@user/segnior)
[20:29:48] <Furai> Hey, so I've came across piece of C++ code where there was a space between class name and scope resolution operator and method like `class ::method()`. Why one would type it like that? I'm aware it's purely code-style thing but it got me confused.
[20:31:18] <InPhase> ville: In the discussion ~10 hours back, I wasn't proposing any use of probability distributions, but simple distribution by incrementing integer subject to modulo, hence the uniformity.
[20:32:49] <PJBoy> Furai, no teveryone' s spacebar i s full yfunctional
[20:33:52] <PJBoy> it's pretty hard to reason about whitespace
[20:33:53] <paul424> Hello, I have a member variable like this     std::map<Tile*, TileData*> mTileData;
[20:34:00] <PJBoy> like I put whitespace around pointer-to-member access
[20:34:09] <paul424> what is the easiest way to watch it for change ?
[20:34:25] <PJBoy> some people put spaces ( after and before ) parentheses, which I find bizarre
[20:34:33] <paul424> the gdb watch is bad , it seems to bring the program to a kind of stall
[20:35:04] <paul424> or I do something wrong ?
[20:35:31] <paul424> I do try watch *(std::map<Tile*, TileData*, std::less<Tile*>, std::allocator<std::pair<Tile* const, TileData*> > > *) 0x7fffbc076560
[20:35:49] <paul424> and of course that address is from p &mTileData
[20:40:33] *** Quits: DrMax_ (~DrMax@132.215.96.36) (Ping timeout: 250 seconds)
[20:40:56] *** Joins: DrMax_ (~DrMax@132.215.96.36)
[20:41:54] *** Joins: chris64 (~chris@user/chris64)
[20:42:37] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[20:42:42] <Furai> PJBoy, it didn't seem like a mistake, it was in every method definition. But yeah, I won't bother myself with it anymoer.
[20:42:54] <Furai> s/anymoer/anymore/
[20:43:03] <PJBoy> yeah I was just making a bad joke
[20:43:25] <PJBoy> but seriously some people's whitespace convention is an anomaly
[20:50:42] <ville> InPhase: but that has bias unless reminder is 0
[20:52:23] <InPhase> ville: Bias, yes, unless you statically reuse the starting index from the past stopping point.
[20:57:21] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[20:58:45] *** Quits: dzz007 (~dzz007@user/dzz007) (Ping timeout: 250 seconds)
[20:59:06] *** Joins: dzz007 (~dzz007@user/dzz007)
[21:01:43] *** Quits: fundies (~fundies@047-014-230-095.res.spectrum.com) (Remote host closed the connection)
[21:02:33] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[21:03:41] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[21:06:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[21:07:56] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:08:30] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[21:09:38] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[21:12:40] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[21:17:20] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:29:53] *** Quits: autark (~autark@ti0048a400-0869.bb.online.no) (Ping timeout: 256 seconds)
[21:36:23] *** Joins: magla (~gelignite@55d41183.access.ecotel.net)
[21:36:53] *** Joins: autark (~autark@ti0048a400-0869.bb.online.no)
[21:40:41] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:49] *** ChanServ sets mode: +v npaperbot
[21:42:23] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[21:44:06] *** Quits: frost (~frost@user/frost) (Quit: Ping timeout (120 seconds))
[21:45:40] *** Quits: artok (~azo@mobile-access-bcee8a-63.dhcp.inet.fi) (Quit: upgrade)
[21:47:47] *** Joins: sh00p (~sh00p@h-178-174-246-110.A295.priv.bahnhof.se)
[21:47:52] <sh00p> is there no other way to make this compile? https://wandbox.org/permlink/fESaNVP5J9tGcG0m
[21:48:44] <sh00p> converting lambda to std::function by parameter type deduction
[21:49:29] <sh00p> had some old code lingering in the last paste, this one is more streamlined to indicate the real problem https://wandbox.org/permlink/6PZxWnXZUJYEQMhw
[21:51:37] <sh00p> i know i can forward the arguments, but then i get ambiguous call to sub() when introducing other types in the lambda
[21:53:58] <sh00p> it looks to me like the compiler should be able to deduce which kind of std::function is being used simply by looking at the lambda
[21:55:21] <kalven> you're asking it to do two conversions for you, first from lambda to std::function, and then from there to CallbackHandler
[21:59:11] <sh00p> right, is that not legal?
[22:00:00] <kalven> no, the conversion police will get you
[22:03:36] <sh00p> what a bummer
[22:03:51] <sh00p> it makes the code unnecessarily verbose :(
[22:05:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[22:08:50] <sh00p> so with forwarding it works (https://wandbox.org/permlink/Uq4nBuVUnWlzFaFs)
[22:19:18] <LordKalma> !fact
[22:19:19] <nolyc> LordKalma: The backward traversal order is the reverse of forward traversal.
[22:33:07] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:410:b257:d310:4a8f)
[22:33:16] <xkoncek> i cannot call a protected constructor of Base from Derived?
[22:33:46] <xkoncek> not in delegating constructors but simply creating an object somewhere inside a member function
[22:33:56] <Guest19> hello, I've a very silly question - https://wandbox.org/permlink/9VsloqDyaCNeMvl3 . Why does template substitution fail?
[22:36:10] <xkoncek> really, i cannot `auto base = Base(...);`
[22:36:24] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[22:43:08] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:48:07] *** Joins: ferdna (~ferdna@user/ferdna)
[22:49:08] <PJBoy> Guest19, template deduction doesn't consider default arguments
[22:49:26] <Guest19> gotcha, PJBoy. Thanks.
[22:49:44] <PJBoy> not just that
[22:49:59] <PJBoy> but foo<>() specifically would never call a template that does have a parameter
[22:50:40] <PJBoy> you can have a template that has no parameter and one that does have a parameter, and that syntax would choose the former
[22:50:49] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[22:50:53] <PJBoy> and that's a valid form of overloading, so
[22:51:09] <PJBoy> foo<> would actually disable template argument deduction anyway
[22:52:01] <Guest19> I see. the fix the book mentions is template<TyypenameÂ  Â T = std::string>
[22:52:44] <PJBoy> yup, that would work
[22:52:46] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:52:58] <PJBoy> in that case foo<> is equivalent to foo<std::string>
[22:53:03] <PJBoy> and no argument deduction needs to be done
[22:53:40] <Guest19> Since you're here, have another doubt. auto max (T1 a, T2 b) -> typename std::decay<decltype(true?a:b)>::typeÂ  can you ELI5
[22:54:06] <PJBoy> `auto f(args...) -> Ret` is trailing return type syntax
[22:54:14] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:54:15] <PJBoy> are you familiar with that bit?
[22:54:23] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:54:23] <Guest19> yeah that I get..confused about "::type"
[22:54:32] <Guest19> and why do we qualify expression with typename
[22:54:44] <PJBoy> std::decay contains a type alias called `type`
[22:54:54] <PJBoy> << TYPE<std::decay<int>::type>
[22:54:55] <geordi> int
[22:55:25] <PJBoy> the typename is there because the compiler doesn't know that `type` is a type alias, because T1 and T2 aren't known yet
[22:55:41] <PJBoy> so by writing `typename` you're telling the compiler that it is in fact a type
[22:55:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:56:18] <PJBoy> normally it defaults to thinking that `expr<template_parameter>::nnn` is a variable
[22:57:09] <PJBoy> the purpose of `decltype(true ? a : b)` is to get the "common type" of T1 and T2
[22:57:12] <Guest19> ah i see..as if we are accessing a member variable
[22:57:17] <PJBoy> exactly
[22:57:23] <Guest19> but we are telling compiler NO, it's a "type"
[22:57:29] <PJBoy> precisely
[22:57:30] <Guest19> like class/struct/in-built type
[22:57:55] <PJBoy> they eventually added std::decay_t, which solves the problem of needing to write typename
[22:58:03] <Guest19> gotcha
[22:58:07] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[22:58:07] <Guest19> but coming back to decltype
[22:58:17] <PJBoy> so `auto max (T1 a, T2 b) -> std::decay_t<decltype(true?a:b)>`
[22:58:18] <Guest19> true? always will give a which has type T1
[22:58:31] <PJBoy> nah, the true bit is unimportant
[22:58:34] <Guest19> so how is it a "common" type
[22:58:40] <PJBoy> the result of a ternary expression is the common type
[22:58:47] <PJBoy> because that's the only thing that could ever normally make sense
[22:58:53] <Guest19> ah gotcha
[22:59:05] <Guest19> so it's a "hack" to just get the common type of 2 unknown types
[22:59:11] <PJBoy> this is a hacky way of writing std::common_type_t<T1, T2>
[22:59:13] <PJBoy> yeah
[22:59:53] <PJBoy> and the decay is there because return values get decayed
[23:00:01] <PJBoy> decay being things like array -> pointer decay
[23:00:07] <PJBoy> function reference -> function pointer decay
[23:00:46] <Guest19> so this is how I am "visualizing it" - 1) use ternary exp trick to get common type 2) std::decay<common type> creates class like "class Decay { realtype type}" 3) we tell compiler to access the type field but treat it like an actual type
[23:01:07] <Guest19> got it..the book says int refrerence -. int decay but I get it
[23:01:10] <PJBoy> so all in all this is equivalent to the return type of `auto max(T1 a, T2 b) { return true ? a : b; }`
[23:01:29] <Guest19> yeah that I am aware of. Just trying to understand all the pieces involved
[23:01:31] *** Quits: sigma_ (~sigma@86.57.109.147) (Quit: Konversation terminated!)
[23:01:32] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[23:01:34] *** Quits: sh00p (~sh00p@h-178-174-246-110.A295.priv.bahnhof.se) (Read error: Connection reset by peer)
[23:01:59] <PJBoy> if you didn't have the decay, this would be the same as the return type of `decltype(auto) max(T1 a, T2 b) { return true ? a : b; }`
[23:02:27] <PJBoy> which I think might resolve to an rvalue reference, which would dangle
[23:02:50] <PJBoy> don't quote me on that though
[23:03:01] <Guest19> that is anyways above my paygrade so will skip for now lol
[23:03:12] <Guest19> but is this decay recursive when used with auto ?
[23:03:32] <PJBoy> the auto in trailing return types is just a part of the syntax
[23:03:32] <Guest19> I see an example like int x = 4; int const& ir = x; auto foo = x;
[23:03:40] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:03:51] <Guest19> so typeof (foo) == int (I would expect int const&)
[23:04:06] <Guest19> sorry last line should be auto foo = ir
[23:04:17] <PJBoy> `auto x;` <-- x is never a reference
[23:04:30] <PJBoy> `auto& x;` <-- x is always an lvalue reference
[23:04:43] <Guest19> ah this makes it easy to remember!
[23:04:53] <PJBoy> `decltype(auto) x` <-- x can be any reference or not a reference
[23:05:22] <PJBoy> decltype(auto) doesn't appear much fortunately
[23:05:44] <Guest19> yeah
[23:06:12] <PJBoy> << TYPE<decltype(foo)>; int x = 4; int const& ir = x; decltype(auto) foo = ir;
[23:06:12] <geordi> const int&
[23:06:15] *** Quits: johnny (~johnny@user/johnny) (Read error: Connection reset by peer)
[23:06:31] <PJBoy> so decltype(auto) is the one that attempts to do mimicry
[23:08:20] <Guest19> I've seen decltype used with expressions but decltype(auto) seems confusing
[23:09:03] <PJBoy> you can pretend it works like `magic foo = decltype(ir);`
[23:09:12] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:09:24] <PJBoy> where magic is exactly what decltype gives
[23:09:36] <PJBoy> as opposed to auto, which specifies ref-ness
[23:09:37] <Guest19> yeah that makes it easy
[23:10:19] <PJBoy> (refness and constness)
[23:10:55] <PJBoy> `auto&&` is an exception to this rule sometimes
[23:11:01] <PJBoy> unfortunately
[23:11:15] <Guest19> how do you code with so many rules around :S
[23:11:52] <PJBoy> I try to keep things simple
[23:12:07] <PJBoy> if I use auto, it's usually just `auto`
[23:12:18] <PJBoy> which is nice and simple
[23:12:26] <PJBoy> most of the time I don't use auto
[23:12:42] <PJBoy> C++ allows for a lot of complexity, but it doesn't demand it
[23:13:11] <PJBoy> that said I have picked up a lot of the rules just by sticking around here for a while
[23:13:17] <Guest19> yeah that's fair
[23:13:31] <Guest19> Even if I pickup rules, I can't remember them if I don't implement them
[23:13:39] <Guest19> so it's back to square 1
[23:13:41] <PJBoy> oh yeah, for sure
[23:13:52] <PJBoy> that's where it's good to have a reference
[23:14:02] <PJBoy> and a lot of learning just ends up being how to find the reference
[23:14:18] <Guest19> yeah I agree. For me, finding reference = #C++-general lol
[23:14:29] <LordKalma> cppreference.com :)
[23:14:31] <LordKalma> leancpp.com
[23:14:36] <LordKalma> :D
[23:14:47] <PJBoy> yeah cppreference, and slowly getting to know how to navigate it
[23:14:53] <LordKalma> and the most important think you *have* to know:
[23:15:03] <LordKalma> C++ is a dumpster fire, we're all masochists
[23:15:06] <Guest19> hahaha
[23:15:07] <PJBoy> like "oh I wonder how to do explicit instantiation, I remember where that was in cppreference"
[23:15:08] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[23:15:35] <Guest19> Btw I saw this nice lil library : https://github.com/andsmedeiros/fuss. I wanted to understand the implementation and hence I am on this template journey
[23:15:49] <PJBoy> or "how do bitshifts work w.r.t. signed parameters again? oh that was in the arithmetic operations section"
[23:15:59] <Guest19> all those "using" + iterators + "..." confuse the heck out of me :S
[23:16:47] <PJBoy> you should know the `using` for type aliases at least
[23:17:17] *** Quits: __dev (~sys@user/dev/x-7984917) (Ping timeout: 240 seconds)
[23:17:18] <PJBoy> it's the same as `typedef`, but with the order reversed and with an `=` token
[23:17:44] <Guest19> yes that I am aware of...but the whole recursive thing inside the struct
[23:17:53] <ville> { int typedef x; }
[23:17:54] <geordi>  
[23:17:59] <ville> reverse that!
[23:18:13] <PJBoy> I keep forgetting that's possible hahaha
[23:18:16] <Guest19> like if you see a code, you can kind of understand what it does. But I am lacking template related skills
[23:18:29] <Guest19> to understand the implementation
[23:18:33] <ville> it's completely _obvious_ that should be possible!
[23:18:47] <PJBoy> so the other form of `using` is for exposing functions from the base class
[23:19:11] <PJBoy> the base classes there are `shouter<T_message>` and `shouter<T_rest ...>`
[23:19:17] <PJBoy> and the functions are `listen` etc.
[23:19:44] <PJBoy> so those lines are just saying "I have `listen` overloads"
[23:20:00] <PJBoy> "here's where they will get directed too [points to base classes]"
[23:20:28] <PJBoy> the ... is where thing get complicated
[23:20:28] <Guest19> but
[23:20:36] <Guest19> there's struct and class with same name
[23:20:44] <Guest19> and struct is inheriting with class from same name
[23:20:51] <Guest19> + throw in templates and ...
[23:21:09] <PJBoy> class templates instantiated with different template arguments are different classes
[23:21:18] <PJBoy> like how vector<int> and vector<float> are different
[23:21:37] <PJBoy> vector<int> could be derived from vector<float> if it really wanted to
[23:21:37] <Guest19> true
[23:22:21] <PJBoy> tuple is probably the better example
[23:22:42] <PJBoy> tuple<int, float, string> could be derived from tuple<int, float>, which itself is derived from tuple<int>
[23:22:54] <PJBoy> each step adding a member or whatever
[23:23:08] <Guest19> yeah that's better
[23:23:08] <PJBoy> and that's the kind of thing this class template is doing
[23:23:30] <PJBoy> `class shouter<T_message>` being the base case for recursion
[23:23:39] <PJBoy> like how tuple<int> is resolved as the base case
[23:23:50] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[23:24:01] *** Joins: johnny (~johnny@user/johnny)
[23:26:24] <Guest19> I kinda understand..but having struct and class with same names is allowed?
[23:26:36] <PJBoy> oh uh
[23:27:14] <PJBoy> !struct
[23:27:15] <nolyc> The only difference between classes and structs is that the former default to private members and bases, while the latter default to public members and bases.
[23:28:03] <Guest19> uh that I know
[23:28:16] <PJBoy> you don't have to be consistent about which one you choose
[23:28:59] <Guest19> but my doubt was having struct and class with same name
[23:30:06] <PJBoy> { Foo x; struct Foo& a = x; class Foo& b = x; cout << TYPE(x), TYPE(a), TYPE(b); } struct Foo; class Foo {};
[23:30:07] <geordi> lvalue Foo, lvalue Foo, lvalue Foo
[23:30:37] <PJBoy> absolutely no requirement to be consistent about whether you spell class or struct
[23:31:03] <PJBoy> I would go as far as to say that `class` is a useless keyword
[23:33:15] <Guest19> err I must be doing something silly : https://wandbox.org/permlink/v5eRDkVCc9mkY1Nj
[23:43:26] <Guest19> PJBoy : what am I understanding wrong :S
[23:46:05] <PJBoy> you're defining foo twice
[23:46:11] <PJBoy> can only define things once
[23:47:09] <PJBoy> {} struct A {}; class A {};
[23:47:09] <geordi> error: redefinition of 'class A'
[23:47:14] <PJBoy> {} struct A {}; struct A {};
[23:47:14] <geordi> error: redefinition of 'struct A'
[23:47:17] <Guest19> yes my bad. I think it's template so same names are allowed
[23:47:26] <Guest19> likeÂ  you mentioned,it's base case
[23:47:40] <PJBoy> if it were a template taking the same template parameters, you'd get the same error
[23:47:43] <Guest19> I imagine same like factorial template.. we would have same names, one for base case and one for recursive calls
[23:47:53] *** Quits: NiD27 (~nid27@49.205.149.18) (Quit: Leaving)
[23:47:55] <PJBoy> {} template<typename T> struct X {}; template<typename T> struct X {};
[23:47:55] <geordi> error: redefinition of 'struct X<T>'
[23:48:06] <Guest19> yeah makes sense now
[23:49:14] *** Joins: algae (~algernon@170.10.246.117)
[23:55:08] *** Joins: mattgirv (quassel@apps.fossgalaxy.com)
