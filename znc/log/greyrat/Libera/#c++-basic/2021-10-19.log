[18:11:57] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[18:11:57] *** Server sets mode: +nt 
[18:12:31] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Quit: Leaving)
[18:13:25] <greyrat> I want to run `cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON` in a subdir, to not clutter my root directory. How do I make clangd find these files? As a last resort, I can just symlink the needed the files from the subdir to the root dir, but I don't know which of them is needed.
[18:28:54] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[18:39:34] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[18:52:59] *** Quits: hsv-2 (~weechat@gateway/tor-sasl/hsv-2) (Remote host closed the connection)
[18:53:25] *** Joins: hsv-2 (~weechat@gateway/tor-sasl/hsv-2)
[19:06:05] *** Joins: dld (~davidlowr@2601:197:600:1210:5c78:4bcc:82fe:593c)
[19:58:30] *** Quits: magla (~gelignite@55d41a29.access.ecotel.net) (Quit: Stay safe!)
[20:12:40] *** Joins: kariosfox (~kariosfox@176.221.124.11)
[20:44:22] *** Joins: magla (~gelignite@55d41a29.access.ecotel.net)
[21:25:29] <vdamewood> greyrat: I'm not quite sure I know what you mean by running it in a subdir[ectory]. Are you using in-source builds?
[21:26:18] <vdamewood> Also, what can clangd do with the files? It doesn't look like the files generated are anything clangd can work with.
[21:30:03] *** Joins: teut (~teut@182.68.178.118)
[21:30:34] <teut> https://ibb.co/Z2dTQDn  here in img it's that the assembler produces object code
[21:31:02] <teut> In computing, object code or object module is the product of a compiler.[1] 
[21:31:06] <teut> wiki says this
[21:31:14] <teut> what to believe?
[21:34:02] <vdamewood> teut: Both are true, depending on your toolchain.
[21:35:49] <teut> I ve mingw compiler
[21:36:00] <teut> it gives exe
[21:36:03] <teut> its g++
[21:36:24] <teut> but I think its called gcc
[21:36:31] *** Quits: kariosfox (~kariosfox@176.221.124.11) (Read error: Connection reset by peer)
[21:37:00] *** Joins: kariosfox (~kariosfox@176.221.124.11)
[21:37:19] <vdamewood> gcc's compiler generates assembly, which is then assembled by gas to produce the object file.
[21:37:42] <teut> gas? where did that come from?
[21:38:04] <vdamewood> gas is the (G)NU (As)sembler.
[21:38:11] <teut> lol
[21:38:14] <teut> but ok
[21:38:20] <vdamewood> I didn't name it.
[21:38:30] <vdamewood> Anyway, it would have been installed with the rest of mingw.
[21:38:44] <teut> so object code is binary , but that is not exe
[21:39:11] <teut> whats the difference between those 2 now?
[21:39:43] <vdamewood> What 2? Object code and executable code?
[21:39:57] <teut> yes
[21:40:43] <vdamewood> Any place in object code that calls a function that's notin that particular object file is filled in with a place holder, and there's a list of place holders and the functions they need in the header.
[21:41:33] <teut> oh right, in assembly language too there are function calls which need to be replaced by suitable code
[21:42:02] <teut> like I was trying to understand what the heck is cout<<  , you cant write it 
[21:42:30] <vdamewood> call __std__ostream__operator_lt-lt__934958 or such.
[21:42:36] <teut> so looking at the assembly I found out that it was some function in assemply
[21:43:04] <teut> yep, its called a system interrupt , ig
[21:43:07] *** Joins: Tazy (~Tazmainia@197.185.108.207)
[21:43:22] <vdamewood> Yep. Overloaded operators in C++ are implemented as function calls.
[21:43:48] <teut> overloaded operators?  when did I talk about them?
[21:45:59] <teut> ok , so the process is clearer to me now, thanks vdamewood
[21:46:38] *** Quits: Tazy (~Tazmainia@197.185.108.207) (Remote host closed the connection)
[21:47:09] <vdamewood> teut: cout<< is an overloaded operator.
[21:47:24] *** Joins: Tazy (~Tazmainia@197.185.108.207)
[21:47:42] <teut> there are two things in this , "cout"  and "instream"  operator
[21:47:51] <teut> input stream*
[21:48:30] <teut> ostream* 
[21:49:04] <teut> lil bit confusing this in out thing is
[21:49:11] <vdamewood> cout is an instance of the ostream class.
[21:49:28] <teut> and is that written in assembly?
[21:50:02] <vdamewood> That question doesn't even make sense for assembly.
[21:50:02] <teut> that must be a driver of some sort
[21:50:21] <vdamewood> a 'driver'?
[21:51:22] <teut> ya, ok , you can just take any hardware , on that assembler , then on that c/c++ 
[21:51:37] <vdamewood> whether an object is an instance of a particular class isn't something that can be expressed in assembly. Instead the object is a chunk of memory holding the member data, and there are functions that represent the member functions.
[21:51:42] <teut> that how the devices work right?
[21:52:14] <teut> hardware devices
[21:52:46] <teut> no no , cout is not a computation, its an IO function
[21:52:53] <vdamewood> The process of going from writing to stdout to displaying on the screen goes through so many abstractions it's difficult to describe how that works because it's different for different systems.
[21:53:00] <vdamewood> cout is not a function.
[21:53:04] <teut> ok
[21:53:07] <vdamewood> cout is an object.
[21:53:13] *** Joins: bewees (~bewees@user/bewees)
[21:53:23] <vdamewood> ostream::operator<< is a function, though.
[21:53:50] *** Joins: RoKenn (~RoKenn@2001:a61:34f2:df01:405b:3ac5:780d:208b)
[21:53:50] *** Quits: RoKenn (~RoKenn@2001:a61:34f2:df01:405b:3ac5:780d:208b) (Changing host)
[21:53:50] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:53:56] <teut> we can talk about the c alias of cout , which is sdout
[21:54:04] <vdamewood> Um, no.
[21:54:12] <vdamewood> stdout and cout are different concepts.
[21:54:12] <teut> printf 
[21:54:16] <teut> sorry*
[21:54:29] <bewees> Hi, which C++ version should I use as a beginner? IDE defaults to C++14, but it has also C++17, 20 and 23 as options. From what I read most people use C++14 in business and C++17 for their own projects. Looks like >=C++20 isn't used much yet?
[21:54:35] <vdamewood> stdout is a virtual file that's opened when the program starts.
[21:54:41] <vdamewood> cout writes to stdout.
[21:54:45] <teut> prinf
[21:54:51] <teut> printf*
[21:55:28] <teut> ya thats the sentence books often write  , cout writes to stdout.
[21:55:49] <vdamewood> bewees: In general, a later version is the same as an earlier version but with more features.
[21:56:11] <vdamewood> bewees: So, you'll be learning the same overall language no matter which version you learn.
[21:56:18] <bewees> vdamewood, and deprecated features too though :-)
[21:56:32] <teut> when can we expect some breaking changes and removal of garbage from c++?
[21:56:38] <vdamewood> Have there ben any deprecation of features since C++11?
[21:57:04] <vdamewood> s/ben/been/
[21:57:10] <teut> there is talk which decribes 18 ways to initialize an int
[21:57:15] <teut> cppconf
[21:57:41] <teut> I had a question today in a coding test on it
[21:58:33] <bewees> vdamewood, Sorry maybe I wrote it ambigious. I meant removed functions and methods
[21:59:09] <teut> vdamewood   auto_ptr
[21:59:15] <vdamewood> bewees: Oh, nothing has been removed since C++11. And I looked some things up, the features deprecated in C++17 aren't things you should be using anyway.
[21:59:33] <vdamewood> ... even in C++14 code.
[21:59:53] <bewees> vdamewood, Hmm, so I think I should use something like C++17, C++20 or C++23
[22:00:09] <vdamewood> Well, C++23 hasn't been ratified yet.
[22:00:46] <vdamewood> I'd stick to 17 or 20.
[22:01:01] <bewees> Thanks! I go for one of them :-)
[22:01:06] <vdamewood> ... and keep in mind which new features aren't available in older versions.
[22:01:25] <vdamewood> Otherwise you're going to have a bad time when your module doesn't work in C++17.
[22:02:34] <teut> Errors fo und by the compiler are called  compile-lime errors,  errors fo und  by the linker are called link-limt•  errors, and errors not fo und until the program is run arc 
[22:02:34] <teut> called  nm-time trmr.l  or  logic  errors. Generally, compile-time  errors  are  easier to  un­derstand  and  ftx than  link-time  errors,  and  link-time  errors  are  often  easier  to 
[22:02:35] <teut> ftnd  and  ftx than run-time  errors  and  logic  errors.  
[22:04:04] <teut> its broken text , but  anyways,   UB is what type of error?
[22:04:35] <teut> https://ibb.co/9GQvJHb
[22:05:18] <teut> and these linking errors == run time errors?
[22:06:03] <teut> run time == interpreter  , linking == linker
[22:06:27] <teut> doesnt look like to me , but the book suddenly changed words
[22:06:54] *** Joins: Tazmainian (~Tazmainia@197.185.108.207)
[22:07:45] *** Quits: Tazy (~Tazmainia@197.185.108.207) (Ping timeout: 265 seconds)
[22:07:47] <teut> I got bad english , ok there are many "ands"
[22:09:40] *** Quits: Tazmainian (~Tazmainia@197.185.108.207) (Remote host closed the connection)
[22:10:07] <teut> https://stackoverflow.com/questions/5508857/how-does-cout-actually-work  oh now I got your operator overloading stuff
[22:11:45] *** Joins: Tazy (~Tazmainia@197.185.108.207)
[22:13:31] <teut> https://www.codeproject.com/Questions/342008/how-the-cout-statement-works-in-cplusplus-and-how    I need answer to this question basically
[22:13:36] <teut> and here its given
[22:16:26] <Alipha> bewees: i would just find a good book about c++ that covers at least c++11. if the book covers c++14 or c++17, then that's great, as they do have some nice additional features, but i wouldn't worry too much. if the book is older than c++11 though, i'd throw it away. and i'm not aware of any decent books yet that cover c++20 or later.
[22:16:33] <Alipha> !give bewees books
[22:16:34] <nolyc> bewees: A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[22:18:17] <bewees> Thanks! I check those out :)
[22:19:23] <teut> scott meyers already has full playlists on youtube, you might like them
[22:20:09] <teut> all features that he describes in his book in 8- 9 hr talks
[22:22:23] <Alipha> with pre-c++11 vs c++11 and later, there were some big changes and some conceptual changes, that you really need a good book to understand. the changes from c++11 to c++14/c++17 aren't as profound and c++14/17 can easily be picked up if you already know c++11. though c++20 also has some big changes, but unfortunately there's not good learning material out there for it yet
[22:24:27] <bewees> A tour of C++ 2nd edition by B. Stroustrup looks good as it covers C++17
[22:29:06] <Alipha> bewees: how much programming experience do you have and in what languages? Because that one is NOT for beginners
[22:32:39] <bewees> Alipha, I see, maybe I should look into C++ Primer too
[22:33:28] <Alipha> bewees: that's what I'd suggest
[22:36:20] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:38:04] <vdamewood> bewees: pfft, what does B. Stroustrup know about C++? /s
[22:39:40] <vdamewood> (In all seriousness, you can just call him 'Bjarne' and everyone knows who that is.)
[22:41:24] <Alipha> My wife doesn't know who Bjarne is
[22:41:43] <vdamewood> Then clearly your wife is not everyone.
[22:48:47] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:c01:f667:d964:c018) (Quit: Leaving)
[22:55:13] <bewees> Hehe ok :-)
[23:12:31] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[23:15:17] *** Quits: magla (~gelignite@55d41a29.access.ecotel.net) (Quit: Stay safe!)
[23:22:00] <teut> https://godbolt.org/z/vjPqxGsoM
[23:22:11] <teut> how is c typesafe when this is allowed?
[23:22:33] <teut> I read in a tour of c++ that   { }  way of initializing is typesafe
[23:22:53] <teut> it would give errors and wont do type casts
[23:24:51] <teut> https://godbolt.org/z/fY7j9Yeaz   well here is worked 
[23:24:55] <teut> it*
[23:25:07] <teut> what to understand?
[23:25:47] <teut> = allows inplicit typecast , {}  does not , but that too only for int/float
[23:41:53] *** Quits: teut (~teut@182.68.178.118) (Quit: Client closed)
[23:48:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
