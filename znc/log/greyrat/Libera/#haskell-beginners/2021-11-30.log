[00:19:54] <perryprog> I know this is a bit of a bad question, but I'm curiousâ€”is there a better way of stating something like this?       return $ map (map (\x -> read x::Int) . words) rows
[00:20:51] *** Joins: Pickchea (~private@user/pickchea)
[00:22:22] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Quit: Connection closed)
[00:23:34] <geekosaur> that probably depends on surrounding context to some extent
[00:24:41] <perryprog> that would be questionably written IO monad stuff
[00:25:17] <perryprog> But I'm just going from data in a file to an [[Int]]
[00:25:37] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[00:28:04] <geekosaur> then I'd say it's either that or go to a full parser, and it's not clear that you need one unless you want better errors if a row is short or long
[00:29:01] <perryprog> Oh, it's all static data (project euler) so that's not an issue
[00:29:15] <perryprog> Just wanted to make sure the nested maps weren't crazy
[00:36:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:40:56] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[00:56:11] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[01:00:35] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:10:13] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (*.net *.split)
[01:10:14] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c) (*.net *.split)
[01:10:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (*.net *.split)
[01:10:15] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (*.net *.split)
[01:10:15] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[01:10:16] *** Quits: alx741 (~alx741@181.196.69.176) (*.net *.split)
[01:10:16] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[01:10:17] *** Quits: degraafk (sid71464@id-71464.lymington.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: hrnz (~ethical@vegan.im.it) (*.net *.split)
[01:10:17] *** Quits: iteratee_ (~kyle@162.218.222.107) (*.net *.split)
[01:10:17] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (*.net *.split)
[01:10:17] *** Quits: ProofTechnique (sid79547@5.254.36.60) (*.net *.split)
[01:10:18] *** Quits: agander_m (sid407952@tinside.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: spider__ (~spider@vps-951ce37a.vps.ovh.ca) (*.net *.split)
[01:10:18] *** Quits: xerox (~edi@user/edi) (*.net *.split)
[01:10:18] *** Quits: bwe (~bwe@2a01:4f8:1c1c:4878::2) (*.net *.split)
[01:10:18] *** Quits: ts2 (~ts@46.101.20.9) (*.net *.split)
[01:10:18] *** Quits: sshine_ (~simon@hubris.eta.solutions) (*.net *.split)
[01:10:18] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[01:10:18] *** Quits: guifipedro_ (~quassel@207.188.174.249) (*.net *.split)
[01:10:19] *** Quits: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0) (*.net *.split)
[01:10:19] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (*.net *.split)
[01:10:19] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (*.net *.split)
[01:10:19] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (*.net *.split)
[01:10:19] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (*.net *.split)
[01:10:20] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[01:10:20] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[01:10:20] *** Quits: zaquest (~notzaques@5.130.79.72) (*.net *.split)
[01:10:20] *** Quits: jespada (~jespada@87.74.37.56) (*.net *.split)
[01:10:21] *** Quits: ojsaki (~ojsaki@host86-154-163-169.range86-154.btcentralplus.com) (*.net *.split)
[01:10:21] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (*.net *.split)
[01:10:21] *** Quits: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54) (*.net *.split)
[01:10:21] *** Quits: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7) (*.net *.split)
[01:10:22] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (*.net *.split)
[01:10:23] *** Quits: enikar (~enikar@user/enikar) (*.net *.split)
[01:10:23] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (*.net *.split)
[01:10:23] *** Quits: dobson (~dobson@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[01:10:23] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[01:10:23] *** Quits: feliix42 (~felix@gibbs.uberspace.de) (*.net *.split)
[01:10:23] *** Quits: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70) (*.net *.split)
[01:10:24] *** Quits: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34) (*.net *.split)
[01:10:24] *** Quits: perryprog (~perryprog@wikipedia/perryprog) (*.net *.split)
[01:10:25] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[01:10:25] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[01:10:25] *** Quits: westrom[m] (~westromma@2001:470:69fc:105::b56d) (*.net *.split)
[01:10:25] *** Quits: the-coot[m] (~the-cootm@2001:470:69fc:105::95f) (*.net *.split)
[01:10:25] *** Quits: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d) (*.net *.split)
[01:10:26] *** Quits: kingy (~kingy__@darkpeak.org) (*.net *.split)
[01:10:27] *** Quits: nf (~n@monade.li) (*.net *.split)
[01:10:27] *** Quits: Fernando-Basso (~fernandob@2001:470:69fc:105::d1d4) (*.net *.split)
[01:10:27] *** Quits: Drew[m] (~drewefenw@2001:470:69fc:105::c8c4) (*.net *.split)
[01:10:27] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (*.net *.split)
[01:10:28] *** Quits: opfez (~opfez@ti0013a400-3880.bb.online.no) (*.net *.split)
[01:10:28] *** Quits: a1paca_ (~a1paca@user/a1paca) (*.net *.split)
[01:10:28] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (*.net *.split)
[01:10:29] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[01:10:29] *** Quits: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b) (*.net *.split)
[01:10:30] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[01:10:30] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (*.net *.split)
[01:10:30] *** Quits: hololeap (~hololeap@user/hololeap) (*.net *.split)
[01:14:19] *** Joins: hololeap (~hololeap@user/hololeap)
[01:14:19] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[01:14:19] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[01:14:19] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c)
[01:14:19] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[01:14:19] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[01:14:19] *** Joins: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7)
[01:14:19] *** Joins: enikar (~enikar@user/enikar)
[01:14:19] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[01:14:19] *** Joins: meejah (~meejah@rutas.meejah.ca)
[01:14:19] *** Joins: alx741 (~alx741@181.196.69.176)
[01:14:19] *** Joins: nckx (~nckx@tobias.gr)
[01:14:19] *** Joins: mcglk (~mcglk@131.191.49.120)
[01:14:19] *** Joins: zaquest (~notzaques@5.130.79.72)
[01:14:19] *** Joins: jespada (~jespada@87.74.37.56)
[01:14:19] *** Joins: xsperry (~xs@user/xsperry)
[01:14:19] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[01:14:19] *** Joins: degraafk (sid71464@id-71464.lymington.irccloud.com)
[01:14:19] *** Joins: ojsaki (~ojsaki@host86-154-163-169.range86-154.btcentralplus.com)
[01:14:19] *** Joins: ts2 (~ts@46.101.20.9)
[01:14:19] *** Joins: sshine_ (~simon@hubris.eta.solutions)
[01:14:19] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[01:14:19] *** Joins: guifipedro_ (~quassel@207.188.174.249)
[01:14:19] *** Joins: westrom[m] (~westromma@2001:470:69fc:105::b56d)
[01:14:19] *** Joins: hrnz (~ethical@vegan.im.it)
[01:14:19] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[01:14:19] *** Joins: iteratee_ (~kyle@162.218.222.107)
[01:14:19] *** Joins: a1paca_ (~a1paca@user/a1paca)
[01:14:19] *** Joins: nf (~n@monade.li)
[01:14:19] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[01:14:19] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[01:14:19] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[01:14:19] *** Joins: ProofTechnique (sid79547@5.254.36.60)
[01:14:19] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[01:14:19] *** Joins: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0)
[01:14:19] *** Joins: spider__ (~spider@vps-951ce37a.vps.ovh.ca)
[01:14:19] *** Joins: xerox (~edi@user/edi)
[01:14:19] *** Joins: bwe (~bwe@2a01:4f8:1c1c:4878::2)
[01:14:19] *** Joins: dobson (~dobson@static.38.6.217.95.clients.your-server.de)
[01:14:19] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[01:14:19] *** Joins: feliix42 (~felix@gibbs.uberspace.de)
[01:14:19] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[01:14:19] *** Joins: Fernando-Basso (~fernandob@2001:470:69fc:105::d1d4)
[01:14:19] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[01:14:19] *** Joins: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70)
[01:14:19] *** Joins: the-coot[m] (~the-cootm@2001:470:69fc:105::95f)
[01:14:19] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[01:14:19] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[01:14:19] *** Joins: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b)
[01:14:19] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[01:14:19] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[01:14:19] *** Joins: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54)
[01:14:19] *** Joins: Drew[m] (~drewefenw@2001:470:69fc:105::c8c4)
[01:14:19] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[01:14:19] *** Joins: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d)
[01:14:19] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[01:14:19] *** Joins: ChanServ (ChanServ@services.libera.chat)
[01:14:19] *** Joins: opfez (~opfez@ti0013a400-3880.bb.online.no)
[01:14:19] *** Joins: kingy (~kingy__@darkpeak.org)
[01:14:19] *** Joins: perryprog (~perryprog@wikipedia/perryprog)
[01:14:19] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[01:14:19] *** strontium.libera.chat sets mode: +o ChanServ
[01:16:56] *** Quits: sunarch (uid526836@user/sunarch) (Ping timeout: 268 seconds)
[01:17:26] *** Joins: sunarch (uid526836@user/sunarch)
[02:09:45] <perryprog> I just realized that a list is apparently Ord? How can I see its implementation via hoogle/hackage, as this is quite confusing me.
[02:09:53] <perryprog> >compare [1] [2]
[02:10:01] <perryprog> ack what was it
[02:10:15] <perryprog> > compare [1] [2]
[02:10:16] <lambdabot>  LT
[02:14:14] <boxscape_> perryprog if you look for Ord in hoogle you can go to its haddock page https://hackage.haskell.org/package/base-4.16.0.0/docs/Prelude.html#t:Ord
[02:14:16] <perryprog> (This fact also super messed me up as I was doing maximum $ maximum [[1, 2, 3], [4, 5, 6]] and not actually getting 6 (although in that case that does give six...))
[02:14:32] <boxscape_> at the bottom of the class all the instances are listed
[02:14:44] <boxscape_> you can click on Source on the right hand side to see how an instance is implemented
[02:15:10] <boxscape_> erm, actually the source link for the list instance isn't there, hold on
[02:15:42] <perryprog> yeah hence my confusion :(
[02:15:55] <perryprog> if you expand it there's source links (and I had to scroll to the right for those) but they 404 for me
[02:17:02] <boxscape_> that link would only lead you to the definition of the method anyway I think, not its implementation
[02:17:10] <boxscape_> (the 404 is a bug in haddock I believe)
[02:17:24] <perryprog> ack
[02:18:04] <perryprog> well anyway. Still have no clue what Haskell is doing when you have [1, 2, 3] `compare` [3, 2, 1]
[02:18:42] <boxscape_> perryprog I'm not sure why the source link is missing but if you go here https://hackage.haskell.org/package/ghc-prim-0.8.0/docs/src/GHC.Classes.html you can Ctrl+F for "(Ord a) => Ord [a]"
[02:19:30] <perryprog> ah got it
[02:19:31] <perryprog> ohhhh
[02:19:46] <boxscape_> perryprog basically it's implemented such that Strings are ordered like words in a dictionary
[02:19:50] * perryprog nods
[02:20:19] <perryprog> > [1, 2] `compare` [1, 1] -- 1=1, so it does 2 `compare` 1... I think
[02:20:20] <lambdabot>  GT
[02:20:24] <perryprog> yup.
[02:20:27] <boxscape_> right
[02:21:09] <perryprog> Well, got the answer to the problem I was working on... now to figure out a better way than a triple nested list comprehension
[02:22:33] *** Quits: xsperry (~xs@user/xsperry) ()
[02:26:52] *** Quits: alx741 (~alx741@181.196.69.176) (Quit: alx741)
[02:28:27] *** Joins: alx741 (~alx741@181.196.69.176)
[02:31:48] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c) (Quit: gone to sleep. ZZZzzzâ€¦)
[02:34:15] <dibblego> liftA3
[02:34:28] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 264 seconds)
[02:38:46] * perryprog just found out about listArray
[02:38:46] <perryprog> aaa
[02:42:42] *** Joins: xsperry (~xs@user/xsperry)
[03:07:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:34:45] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[03:39:23] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Ping timeout: 252 seconds)
[03:41:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[03:56:02] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c)
[03:56:08] *** Joins: libertyprime (~libertypr@125.70.69.111.dynamic.snap.net.nz)
[04:03:52] *** Quits: libertyprime (~libertypr@125.70.69.111.dynamic.snap.net.nz) (Ping timeout: 264 seconds)
[04:20:35] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:20:56] <perryprog> Huhâ€”why would a long-running computation magically saturate all eight cores on my laptop, despite being single threaded?
[04:25:08] <boxscape_> perryprog are all cores on 100%?
[04:25:11] <perryprog> Yup
[04:25:33] <perryprog> â‰ˆ 780% CPU usage by stack run
[04:25:36] <boxscape_> hm, don't know then. If it were less I'd say it just switches which core it runs on, but that wouldn't explain this
[04:26:02] <perryprog> It's all prelude types and some recursion
[04:26:25] <perryprog> It's actually a super simple program although it turns out it's uh... quite slow
[04:31:24] <perryprog> func 12 => 3.39 seconds. func 13 => 12.13 seconds. func 14 => 48.78 seconds
[04:31:51] <geekosaur> ackermann's simple too :Ã¾
[04:32:00] <perryprog> RUDE
[04:32:31] <perryprog> Look, if my solution's big-O notation is written with knuth up-arrows, it's still a solution!
[04:32:43] <perryprog> (Just not one that'll finish in the lifespan of the universe.)
[04:33:15] <perryprog> I also suspect there's a linear-time solution to this problem too which would be just incredible if so
[04:33:54] <geekosaur> .oO { with constant factors that still push it beyond the lifetime of the universe }
[04:49:03] *** Joins: hololeap (~hololeap@user/hololeap)
[04:58:16] *** Joins: libertyprime (~libertypr@203.211.73.21)
[05:15:43] * perryprog adds Control.Monad.Memo
[05:15:43] * perryprog execution time for non-memoized versus memoized version is 11.41 versus 0.01 seconds
[05:15:46] <perryprog> thanks, geekosaur.
[05:16:39] <perryprog> Lolâ€”2 minutes 39 seconds for an optimized build to /still/ 0.01 seconds in GHCI
[05:17:04] *** Quits: libertyprime (~libertypr@203.211.73.21) (Ping timeout: 264 seconds)
[05:18:49] <perryprog> Weirdly it seems to require FlexibleConstraints for some reason but I definitely don't understand what that's about
[05:29:17] <boxscape_> There are some somewhat arbitrary rules about what kind of instance declarations are allowed in standard Haskell, and these (not very useful) restrictions are lifted by that extension
[05:30:10] <boxscape_> erm, s/instance declaration/constrains
[05:30:26] <boxscape_> the corresponding extension for instance declarations would be FlexibleInstances
[05:30:52] <boxscape_> s/constrains/constraints
[05:32:07] <perryprog> Huh. (I just want a button to push to memorize my stuff, dangit!)
[05:32:25] <perryprog> Also I was right, there was a constant-time expression for the solution to this problem :P
[05:34:14] <boxscape_> perryprog btw starting with ghc 9.2, both FlexibleInstances and FlexibleContexts are enabled by default
[05:34:21] <perryprog> Oh wow!
[05:35:00] <perryprog> I'm waiting on something to do with HLS to be updated before I switch (I think Wingman maybe?)
[05:36:11] <perryprog> Oh, or maybe hlint
[05:36:19] <boxscape_> HLS for 9.0 is currently waiting for wingman support; HLS for 9.2 doesn't exist yet
[05:37:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:37:48] <perryprog> Ah, you're right
[05:37:52] <perryprog> Was off by one I think
[05:56:16] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[06:12:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[06:33:34] *** Joins: libertyprime (~libertypr@203.96.201.69)
[07:06:00] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[07:06:00] *** Joins: hololeap_ (~hololeap@user/hololeap)
[07:11:38] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:12:38] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[07:17:44] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[08:08:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:20:28] *** Joins: LittleLemon (~AdiIRC@170.55.34.132)
[08:42:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[09:20:04] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 264 seconds)
[09:21:28] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[09:46:49] *** Quits: LittleLemon (~AdiIRC@170.55.34.132) (Quit: Going offline, see ya! (www.adiirc.com))
[10:04:45] *** Joins: LittleLemon (~AdiIRC@170.55.34.132)
[10:10:28] *** Quits: libertyprime (~libertypr@203.96.201.69) (Ping timeout: 264 seconds)
[10:32:01] *** Joins: libertyprime (~libertypr@151.210.172.92)
[10:39:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:13:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[11:25:41] *** Quits: sunarch (uid526836@user/sunarch) (Quit: Connection closed for inactivity)
[11:28:43] *** Joins: LittleLemon_2 (~AdiIRC@075-112-143-124.res.spectrum.com)
[11:32:04] *** Quits: LittleLemon (~AdiIRC@170.55.34.132) (Ping timeout: 264 seconds)
[11:32:09] *** LittleLemon_2 is now known as LittleLemon
[11:53:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:56:40] *** Quits: LittleLemon (~AdiIRC@075-112-143-124.res.spectrum.com) (Ping timeout: 264 seconds)
[12:04:18] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[12:07:16] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[12:13:19] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:25:58] *** Joins: zaquest (~notzaques@5.130.79.72)
[12:31:06] *** Joins: _bo (~bo@217.18.216.247)
[12:31:14] *** Quits: libertyprime (~libertypr@151.210.172.92) (Ping timeout: 252 seconds)
[12:32:49] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[12:41:42] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[12:45:59] *** Joins: libertyprime (~libertypr@151.210.172.92)
[12:47:36] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:36] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:39] *** allbery_b is now known as geekosaur
[12:50:31] *** Joins: boxscape (~boxscape@user/boxscape)
[12:53:04] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 264 seconds)
[12:58:21] *** Quits: libertyprime (~libertypr@151.210.172.92) (Quit: leaving)
[13:37:48] *** Joins: libertyprime (~libertypr@203.211.73.21)
[14:08:17] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c) (Quit: gone to sleep. ZZZzzzâ€¦)
[14:21:59] *** Quits: libertyprime (~libertypr@203.211.73.21) (Ping timeout: 256 seconds)
[14:31:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:32:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:42:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:43:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:49:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[14:49:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:54:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:55:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:58:04] *** Joins: libertyprime (~libertypr@203.211.73.21)
[15:00:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:01:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:06:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:07:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:12:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:13:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:23:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:24:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:27:23] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:4c11:ba21:da7d:dd69)
[15:40:07] *** Joins: amoe (~amoe@visarend.solasistim.net)
[16:14:49] *** Quits: libertyprime (~libertypr@203.211.73.21) (Quit: leaving)
[16:42:57] *** Joins: kadir (~kadir@88.251.54.110)
[17:19:46] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:4c11:ba21:da7d:dd69) (Quit: gone to sleep. ZZZzzzâ€¦)
[18:43:50] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:4c11:ba21:da7d:dd69)
[18:44:59] *** Quits: xsperry (~xs@user/xsperry) (Killed (NickServ (GHOST command used by ahahaha!~xs@cpe-188-129-101-182.dynamic.amis.hr)))
[18:45:22] *** Joins: xsperry (~xs@user/xsperry)
[18:54:55] *** Joins: adziahel[m] (~adziahelm@2001:470:69fc:105::b4d)
[19:36:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:56:44] *** Quits: _bo (~bo@217.18.216.247) (Ping timeout: 252 seconds)
[20:06:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:11:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: dminuoso (~dminuoso@user/dminuoso) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (Ping timeout: 256 seconds)
[20:15:21] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[20:16:50] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[20:40:53] <perryprog> Possibly a naÃ¯ve question, but is there an easier way to add two Just's than (+) <$> Just 1 <*> Just 2?
[20:57:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:06:19] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:4c11:ba21:da7d:dd69) (Quit: gone to sleep. ZZZzzzâ€¦)
[21:18:46] <geekosaur> liftA2?
[21:31:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:39:25] *** Parts: kadir (~kadir@88.251.54.110) (WeeChat 3.3)
[21:39:25] *** Joins: pfurla (~pfurla@201.17.118.230)
[21:59:07] <xsperry> you could make "Num a => Maybe a" a Num instance if you really wanted, but <$> and <*> or liftA2 would be an idiomatic way of doing it
[22:23:40] *** Joins: _bo (~bo@217.18.216.247)
[22:36:38] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[22:37:46] <perryprog> liftA2 looks like what I wanted, thanks :)
[22:38:52] *** hololeap_ is now known as hololeap
[22:43:01] <kennyd> I actually did Num a => (Maybe a) a while ago :P https://paste.tomsmeding.com/PmDaIizc
[22:50:33] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzzâ€¦)
[23:14:09] <boxscape> One reasonable instance would be `Num a => Num (Zip a)`, which would include e.g. Maybe and List
[23:17:52] <geekosaur> isn't the canonical generalized form the Applicative one?
[23:24:09] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[23:28:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:45:59] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c)
[23:50:02] <kennyd> that's interesting, I didn't think of doing (Num a, Applicative f) => Num (f a)
[23:50:33] <kennyd> could Real be written as well? what would be Applicative equivalent of  toRational = maybe 0 toRational?
[23:50:38] <kennyd> Real instance*
[23:56:57] <kennyd> https://paste.tomsmeding.com/2sLDuebA
