[00:01:30] *** Joins: sm2n (ae95cb1267@user/sm2n)
[00:02:19] *** Joins: ahc (~ahc@121.98.229.241)
[00:02:45] *** Joins: gaqwas (~john@dynamic-095-115-055-169.95.115.pool.telefonica.de)
[00:15:57] <hobo> while reading some CL code, I see something like |blahblah|. I remember seeing that before, but can't recall if there's a special name for that.
[00:16:09] <hobo> I think it was an alternative syntax for something.
[00:17:20] <pjb> | is a multiple-escape character.
[00:17:27] <pjb> \ is a single-escape character.
[00:18:15] <ecraven> '|foo bar| is a representation of a symbol with printname "foo bar". the || delimits the symbol name.
[00:18:16] <pjb> With the default readtable setting, (eq '|Foo Bar| 'f\o\o\ b\a\r) #| --> t |#
[00:18:32] <pjb> it doesn't delimit the symbol name.
[00:18:38] <pjb> it delimits an escaped range.
[00:18:52] <ecraven> ah, yes, sorry. I've never seen it used for only part of a name, but it could be, right?
[00:19:03] <pjb>  (list '|Foo Bar| 'f\o\o\ b\a\r 'f|oo |b\a\r) #| --> (|Foo Bar| |Foo Bar| |Foo Bar|) |#
[00:19:14] <ecraven> 'Foo| |Bar works nicely ;)
[00:19:17] <pjb> yes.
[00:19:45] <ecraven> hehe, now *that'll* trip up people that don't know this syntax even worse :P
[00:21:37] <pjb> and you can mix \| and |\\|   (quote \||\\\||\\\|\|) #| --> |\|\\\|\\\|\|| |#
[00:24:07] <White_Flame> '||||||||||||||||
[00:24:24] <White_Flame> (still just an empty symbol name)
[00:26:29] <pjb> (let ((|| 1)) (> (+ || |||| ||||) ||||||||||||)) #| --> t |#
[00:32:55] <Odin-> And people say Perl looks like line noise...
[00:41:23] <hobo> pjb: that's what it was, thank you.
[00:49:26] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 252 seconds)
[00:50:50] <pjb> Odin-: it's too easy in CL, so we just don't do it.
[00:51:01] <pjb> Imagine code obfuscation with lisp reader macros…
[00:51:05] *** Joins: cjb (~cjb@user/cjb)
[00:51:27] <Odin-> I have. As you suggest, it's too easy to be worth it.
[00:52:19] *** Joins: Algernon91 (~Algernon6@88.124.69.179)
[00:54:27] *** Joins: Algernon666 (~Algernon6@2a04:cec0:11ca:25f:c1b:1f06:29f:a3d)
[00:58:14] *** Quits: Algernon91 (~Algernon6@88.124.69.179) (Ping timeout: 252 seconds)
[01:02:40] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 264 seconds)
[01:10:14] *** Quits: gaqwas (~john@dynamic-095-115-055-169.95.115.pool.telefonica.de) (*.net *.split)
[01:10:14] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (*.net *.split)
[01:10:14] *** Quits: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db) (*.net *.split)
[01:10:14] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (*.net *.split)
[01:10:14] *** Quits: cosimone (~user@93-47-231-139.ip115.fastwebnet.it) (*.net *.split)
[01:10:14] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (*.net *.split)
[01:10:14] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (*.net *.split)
[01:10:14] *** Quits: makomo (~makomo@user/makomo) (*.net *.split)
[01:10:14] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (*.net *.split)
[01:10:14] *** Quits: lisp123win (~user@80.227.170.170) (*.net *.split)
[01:10:14] *** Quits: Colt (~Colt@user/colt) (*.net *.split)
[01:10:14] *** Quits: paul0 (~paul0@user/paul0) (*.net *.split)
[01:10:15] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (*.net *.split)
[01:10:15] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (*.net *.split)
[01:10:15] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (*.net *.split)
[01:10:15] *** Quits: hobo (~hobo@69.218.33.204) (*.net *.split)
[01:10:15] *** Quits: Bike (~Glossina@71.69.170.70) (*.net *.split)
[01:10:15] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[01:10:15] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (*.net *.split)
[01:10:15] *** Quits: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) (*.net *.split)
[01:10:16] *** Quits: prxq_ (~quassel@x4dbe8eed.dyn.telefonica.de) (*.net *.split)
[01:10:16] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (*.net *.split)
[01:10:16] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (*.net *.split)
[01:10:16] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[01:10:16] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[01:10:16] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11ca:25f:c1b:1f06:29f:a3d) (*.net *.split)
[01:10:16] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[01:10:16] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[01:10:16] *** Quits: hubvu (sid495858@user/hubvu) (*.net *.split)
[01:10:17] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[01:10:17] *** Quits: gko (~user@user/gko) (*.net *.split)
[01:10:17] *** Quits: gpiero_ (~quassel@camale.rm-rf.it) (*.net *.split)
[01:10:17] *** Quits: robin (~robin@user/terpri) (*.net *.split)
[01:10:17] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[01:10:17] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[01:10:17] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (*.net *.split)
[01:10:17] *** Quits: beach (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr) (*.net *.split)
[01:10:17] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (*.net *.split)
[01:10:17] *** Quits: d_run (sid83858@id-83858.hampstead.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (*.net *.split)
[01:10:17] *** Quits: griffinmb (sid410590@id-410590.helmsley.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: Krystof (~user@81.174.155.115) (*.net *.split)
[01:10:18] *** Quits: dbotton (sid492350@lymington.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: victor_ (sid208353@tinside.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: pl (sid98063@helmsley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: sgithens (sid10659@helmsley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: jsatk (sid304796@helmsley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: gendl (sid100083@hampstead.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[01:10:18] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[01:10:18] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[01:10:18] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (*.net *.split)
[01:10:18] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[01:10:18] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (*.net *.split)
[01:10:18] *** Quits: johnjay (~pi@192.142.100.50) (*.net *.split)
[01:10:19] *** Quits: hayley (~theemacss@user/hayley) (*.net *.split)
[01:10:19] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (*.net *.split)
[01:10:19] *** Quits: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (*.net *.split)
[01:10:19] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[01:10:19] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (*.net *.split)
[01:10:19] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (*.net *.split)
[01:10:19] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (*.net *.split)
[01:10:19] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (*.net *.split)
[01:10:19] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (*.net *.split)
[01:10:19] *** Quits: sp (~sp@user/susam) (*.net *.split)
[01:10:19] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (*.net *.split)
[01:10:19] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (*.net *.split)
[01:10:19] *** Quits: bldr (~bull@185.117.72.168) (*.net *.split)
[01:10:19] *** Quits: MetaYan_ (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[01:10:19] *** Quits: etiago (~etiago@user/etiago) (*.net *.split)
[01:10:20] *** Quits: kdlv (~kdlv@user/kdlv) (*.net *.split)
[01:10:20] *** Quits: scymtym_ (~user@ip-94-114-248-79.unity-media.net) (*.net *.split)
[01:10:20] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[01:10:20] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (*.net *.split)
[01:10:20] *** Quits: Alfr (~Alfr@user/alfr) (*.net *.split)
[01:10:20] *** Quits: flip214 (~marek@user/flip214) (*.net *.split)
[01:10:20] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[01:10:20] *** Quits: jurov (~jurov@rev-81-92-255-36.radiolan.sk) (*.net *.split)
[01:10:20] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (*.net *.split)
[01:10:20] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (*.net *.split)
[01:10:20] *** Quits: copec (~copec@schrodbox.unaen.org) (*.net *.split)
[01:10:20] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[01:10:20] *** Quits: |3b| (bbb@user/3b/x-2324788) (*.net *.split)
[01:10:20] *** Quits: sheb (~sheb@31.223.228.71) (*.net *.split)
[01:10:20] *** Quits: Jing (~hedgehog@125.105.11.101) (*.net *.split)
[01:10:20] *** Quits: phantomics (~phantomic@97-118-231-120.hlrn.qwest.net) (*.net *.split)
[01:10:20] *** Quits: raeda (~raeda@72.49.249.241) (*.net *.split)
[01:10:20] *** Quits: theBlackDragon (~dragon@fvwm/admin) (*.net *.split)
[01:10:20] *** Quits: mingus (~jan-magnu@auth-147-189.anyconnect.uib.no) (*.net *.split)
[01:10:20] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[01:10:21] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[01:10:21] *** Quits: hirez- (~hirez@2602:ffc5:20::1:512e) (*.net *.split)
[01:10:21] *** Quits: alvaro121 (~aa@201.230.126.66) (*.net *.split)
[01:10:21] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[01:10:21] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (*.net *.split)
[01:10:21] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (*.net *.split)
[01:10:21] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[01:10:22] *** Quits: Spawns_Carpet (~weechat@user/spawns-carpeting/x-6969421) (*.net *.split)
[01:10:22] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[01:10:22] *** Quits: ogamita (~t@hubble.informatimago.com) (*.net *.split)
[01:10:22] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (*.net *.split)
[01:10:22] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[01:10:22] *** Quits: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c) (*.net *.split)
[01:10:22] *** Quits: ck_ (~ck@plskthx.org) (*.net *.split)
[01:10:22] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[01:10:22] *** Quits: luis (~luis@lisp/luis) (*.net *.split)
[01:10:23] *** Quits: les (znc@user/les) (*.net *.split)
[01:10:23] *** Quits: even4void (even4void@came.here.for-some.fun) (*.net *.split)
[01:10:23] *** Quits: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (*.net *.split)
[01:10:23] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (*.net *.split)
[01:10:23] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (*.net *.split)
[01:10:23] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (*.net *.split)
[01:10:23] *** Quits: pjb (~pjb@user/pjb) (*.net *.split)
[01:10:23] *** Quits: dmgk (~dmgk@user/dmgk) (*.net *.split)
[01:10:23] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[01:10:23] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[01:10:23] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (*.net *.split)
[01:10:24] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (*.net *.split)
[01:10:24] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[01:10:24] *** Quits: Fade (fade@outrider.deepsky.com) (*.net *.split)
[01:10:24] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[01:10:24] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (*.net *.split)
[01:10:24] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[01:10:24] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (*.net *.split)
[01:10:24] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (*.net *.split)
[01:10:25] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[01:10:25] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: splittist (sid17737@id-17737.tinside.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[01:10:25] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (*.net *.split)
[01:10:25] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (*.net *.split)
[01:10:25] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (*.net *.split)
[01:10:25] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[01:10:26] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[01:10:26] *** Quits: Kabriel (~Kabriel@user/kabriel) (*.net *.split)
[01:10:26] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[01:10:26] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (*.net *.split)
[01:10:26] *** Quits: _death (~death@adeht.org) (*.net *.split)
[01:10:27] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (*.net *.split)
[01:10:27] *** Quits: paulapatience (~paulapati@2001:470:69fc:105::16a4) (*.net *.split)
[01:10:27] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[01:10:27] *** Quits: jemoka (~jemoka@user/jemoka) (*.net *.split)
[01:10:28] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (*.net *.split)
[01:10:28] *** Quits: loke (~loke@junk.nocrew.org) (*.net *.split)
[01:10:28] *** Quits: antoszka-r (~antoni@rozalia.antoszka.pl) (*.net *.split)
[01:10:28] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[01:10:28] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (*.net *.split)
[01:10:28] *** Quits: Xach (~xach@user/xach) (*.net *.split)
[01:10:28] *** Quits: phadthai (mmondor@user/phadthai) (*.net *.split)
[01:10:28] *** Quits: spec (~spec@user/spec) (*.net *.split)
[01:10:28] *** Quits: specbot (~specbot@common-lisp.net) (*.net *.split)
[01:10:29] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (*.net *.split)
[01:10:29] *** Quits: sepanko (~sepanko@user/sepanko) (*.net *.split)
[01:10:29] *** Quits: danirukun[m] (~dpetrovsm@2001:470:69fc:105::7911) (*.net *.split)
[01:10:29] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (*.net *.split)
[01:10:29] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[01:10:29] *** Quits: xaltsc (~xaltsc@user/xaltsc) (*.net *.split)
[01:10:29] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (*.net *.split)
[01:10:29] *** Quits: opcode (~nathan@user/opcode) (*.net *.split)
[01:10:29] *** Quits: dim (~dimlibera@212.85.154.83) (*.net *.split)
[01:10:29] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (*.net *.split)
[01:10:30] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[01:10:30] *** Quits: ahc (~ahc@121.98.229.241) (*.net *.split)
[01:10:30] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (*.net *.split)
[01:10:30] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (*.net *.split)
[01:10:30] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[01:10:30] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (*.net *.split)
[01:10:30] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[01:12:52] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 264 seconds)
[01:14:14] *** Joins: Colt (~Colt@user/colt)
[01:14:14] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[01:14:14] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[01:14:14] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[01:14:14] *** Joins: Algernon666 (~Algernon6@2a04:cec0:11ca:25f:c1b:1f06:29f:a3d)
[01:14:14] *** Joins: gaqwas (~john@dynamic-095-115-055-169.95.115.pool.telefonica.de)
[01:14:14] *** Joins: ahc (~ahc@121.98.229.241)
[01:14:14] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[01:14:14] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[01:14:14] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[01:14:14] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[01:14:14] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[01:14:14] *** Joins: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db)
[01:14:14] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[01:14:14] *** Joins: cosimone (~user@93-47-231-139.ip115.fastwebnet.it)
[01:14:14] *** Joins: xsperry (~xs@user/xsperry)
[01:14:14] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[01:14:14] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:14:14] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:14:14] *** Joins: makomo (~makomo@user/makomo)
[01:14:14] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[01:14:14] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[01:14:14] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[01:14:14] *** Joins: hobo (~hobo@69.218.33.204)
[01:14:14] *** Joins: Bike (~Glossina@71.69.170.70)
[01:14:14] *** Joins: lisp123win (~user@80.227.170.170)
[01:14:14] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:14:14] *** Joins: paul0 (~paul0@user/paul0)
[01:14:14] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[01:14:14] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:14:14] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[01:14:14] *** Joins: les (znc@user/les)
[01:14:14] *** Joins: even4void (even4void@came.here.for-some.fun)
[01:14:14] *** Joins: copec (~copec@schrodbox.unaen.org)
[01:14:14] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[01:14:14] *** Joins: lieven (~mal@ns2.wyrd.be)
[01:14:14] *** Joins: |3b| (bbb@user/3b/x-2324788)
[01:14:14] *** Joins: MetaYan_ (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[01:14:14] *** Joins: bldr (~bull@185.117.72.168)
[01:14:14] *** Joins: etiago (~etiago@user/etiago)
[01:14:14] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[01:14:14] *** Joins: hubvu (sid495858@user/hubvu)
[01:14:14] *** Joins: prxq_ (~quassel@x4dbe8eed.dyn.telefonica.de)
[01:14:14] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[01:14:14] *** Joins: kdlv (~kdlv@user/kdlv)
[01:14:14] *** Joins: scymtym_ (~user@ip-94-114-248-79.unity-media.net)
[01:14:14] *** strontium.libera.chat sets mode: +o Bike
[01:14:14] *** Joins: nckx (~nckx@tobias.gr)
[01:14:14] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[01:14:14] *** Joins: sheb (~sheb@31.223.228.71)
[01:14:14] *** Joins: anddam (~anddam@user/anddam)
[01:14:14] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[01:14:14] *** Joins: AndrewYu (~andrew@user/andrewyu)
[01:14:14] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[01:14:14] *** Joins: Alfr (~Alfr@user/alfr)
[01:14:14] *** Joins: Jing (~hedgehog@125.105.11.101)
[01:14:14] *** Joins: phantomics (~phantomic@97-118-231-120.hlrn.qwest.net)
[01:14:14] *** Joins: raeda (~raeda@72.49.249.241)
[01:14:14] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[01:14:14] *** Joins: lagash (lagash@lagash.shelltalk.net)
[01:14:14] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[01:14:14] *** Joins: mingus (~jan-magnu@auth-147-189.anyconnect.uib.no)
[01:14:14] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[01:14:14] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[01:14:14] *** Joins: ns12 (~ns12@user/ns12)
[01:14:14] *** Joins: gko (~user@user/gko)
[01:14:14] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:14:14] *** Joins: gpiero_ (~quassel@camale.rm-rf.it)
[01:14:14] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[01:14:14] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[01:14:14] *** Joins: splittist (sid17737@id-17737.tinside.irccloud.com)
[01:14:14] *** Joins: robin (~robin@user/terpri)
[01:14:14] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[01:14:14] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[01:14:14] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[01:14:14] *** Joins: _death (~death@adeht.org)
[01:14:14] *** Joins: spec (~spec@user/spec)
[01:14:14] *** Joins: borodust (~irc@user/borodust)
[01:14:14] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[01:14:14] *** Joins: Spawns_Carpet (~weechat@user/spawns-carpeting/x-6969421)
[01:14:14] *** Joins: johnjay (~pi@192.142.100.50)
[01:14:14] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[01:14:14] *** Joins: pjb (~pjb@user/pjb)
[01:14:14] *** Joins: abraham (~abraham@143.244.185.86)
[01:14:14] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[01:14:14] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[01:14:14] *** Joins: beach (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr)
[01:14:14] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[01:14:14] *** Joins: specbot (~specbot@common-lisp.net)
[01:14:14] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[01:14:14] *** Joins: d_run (sid83858@id-83858.hampstead.irccloud.com)
[01:14:14] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[01:14:14] *** Joins: dmgk (~dmgk@user/dmgk)
[01:14:14] *** strontium.libera.chat sets mode: +o MichaelRaskin
[01:14:14] *** Joins: griffinmb (sid410590@id-410590.helmsley.irccloud.com)
[01:14:14] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[01:14:14] *** Joins: Krystof (~user@81.174.155.115)
[01:14:14] *** Joins: ogamita (~t@hubble.informatimago.com)
[01:14:14] *** Joins: hayley (~theemacss@user/hayley)
[01:14:14] *** Joins: dbotton (sid492350@lymington.irccloud.com)
[01:14:14] *** Joins: victor_ (sid208353@tinside.irccloud.com)
[01:14:14] *** Joins: pl (sid98063@helmsley.irccloud.com)
[01:14:14] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[01:14:14] *** Joins: sgithens (sid10659@helmsley.irccloud.com)
[01:14:14] *** Joins: jsatk (sid304796@helmsley.irccloud.com)
[01:14:14] *** Joins: gendl (sid100083@hampstead.irccloud.com)
[01:14:14] *** Joins: hexology (~hexology@user/hexology)
[01:14:14] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[01:14:14] *** Joins: skyl4rk (~tlvb@user/tlvb)
[01:14:14] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[01:14:14] *** Joins: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[01:14:14] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[01:14:14] *** Joins: mzan (~quassel@mail.asterisell.com)
[01:14:14] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[01:14:14] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[01:14:14] *** Joins: alvaro121 (~aa@201.230.126.66)
[01:14:14] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[01:14:14] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[01:14:14] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[01:14:14] *** Joins: paulapatience (~paulapati@2001:470:69fc:105::16a4)
[01:14:14] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[01:14:14] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[01:14:14] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[01:14:14] *** Joins: sepanko (~sepanko@user/sepanko)
[01:14:14] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[01:14:14] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[01:14:14] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[01:14:14] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[01:14:14] *** Joins: danirukun[m] (~dpetrovsm@2001:470:69fc:105::7911)
[01:14:14] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[01:14:14] *** Joins: sp (~sp@user/susam)
[01:14:14] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[01:14:14] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[01:14:14] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[01:14:14] *** Joins: flip214 (~marek@user/flip214)
[01:14:14] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[01:14:14] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[01:14:14] *** Joins: jurov (~jurov@rev-81-92-255-36.radiolan.sk)
[01:14:14] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[01:14:14] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[01:14:14] *** strontium.libera.chat sets mode: +oo pl fe[nl]ix
[01:14:14] *** Joins: ChanServ (ChanServ@services.libera.chat)
[01:14:14] *** Joins: dim (~dimlibera@212.85.154.83)
[01:14:14] *** Joins: opcode (~nathan@user/opcode)
[01:14:14] *** Joins: phadthai (mmondor@user/phadthai)
[01:14:14] *** Joins: Xach (~xach@user/xach)
[01:14:14] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[01:14:14] *** Joins: gabc (~gabc@user/gabc)
[01:14:14] *** Joins: antoszka-r (~antoni@rozalia.antoszka.pl)
[01:14:14] *** Joins: loke (~loke@junk.nocrew.org)
[01:14:14] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[01:14:14] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[01:14:14] *** Joins: jemoka (~jemoka@user/jemoka)
[01:14:14] *** Joins: dstein64 (~dstein64@dannyadam.com)
[01:14:14] *** Joins: lonjil (~quassel@user/lonjil)
[01:14:14] *** Joins: Kabriel (~Kabriel@user/kabriel)
[01:14:14] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[01:14:14] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[01:14:14] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[01:14:14] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[01:14:14] *** Joins: Fade (fade@outrider.deepsky.com)
[01:14:14] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[01:14:14] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[01:14:15] *** Joins: luis (~luis@lisp/luis)
[01:14:15] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[01:14:15] *** Joins: jfb4 (~jfb4@178.62.2.68)
[01:14:15] *** Joins: ck_ (~ck@plskthx.org)
[01:14:15] *** Joins: hirez- (~hirez@2602:ffc5:20::1:512e)
[01:14:15] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[01:14:15] *** Joins: phoe (~phoe@user/phoe)
[01:14:15] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[01:14:15] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[01:14:15] *** Joins: samebchase (~thelounge@51.15.68.182)
[01:14:15] *** strontium.libera.chat sets mode: +ooo ChanServ Xach luis
[01:14:29] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Max SendQ exceeded)
[01:15:19] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[01:15:52] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[01:16:16] *** Joins: Colt (~Colt@user/colt)
[01:17:40] *** Quits: taiju (~taiju@240b:253:ec40:2400:2d48:f53f:bd4f:c325) (Ping timeout: 264 seconds)
[01:18:31] *** Joins: taiju (~taiju@240b:253:ec40:2400:2d48:f53f:bd4f:c325)
[01:28:40] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[01:39:24] *** Joins: akoana (~ah@user/akoana)
[01:40:47] *** Joins: dre (~dre@2001:8003:c932:c301:ca62:53a2:f102:5ef0)
[01:40:50] *** Joins: esb (~esb@2804:14c:1ad:8b70::1000)
[01:50:01] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 256 seconds)
[02:03:41] *** Joins: pillton (~user@124.170.14.166)
[02:22:33] *** Quits: xsperry (~xs@user/xsperry) ()
[02:26:30] *** Joins: dra (~dra@2a04:4540:6417:fd00:95b5:5aa6:2917:4089)
[02:27:17] *** Quits: cosimone (~user@93-47-231-139.ip115.fastwebnet.it) (Remote host closed the connection)
[02:32:26] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11ca:25f:c1b:1f06:29f:a3d) (Ping timeout: 245 seconds)
[02:35:27] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:43:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:50:20] *** Quits: pve (~pve@176-93-100-143.bb.dnainternet.fi) (Quit: leaving)
[02:59:14] *** Quits: gaqwas (~john@dynamic-095-115-055-169.95.115.pool.telefonica.de) (Ping timeout: 252 seconds)
[03:01:25] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 256 seconds)
[03:06:52] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 264 seconds)
[03:07:21] *** Joins: karlosz (~karlosz@47.151.136.69)
[03:07:42] *** Joins: z3t0 (~z3t0@146.71.14.98)
[03:07:51] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 245 seconds)
[03:12:02] *** Joins: Lycurgus (~juan@98.4.112.204)
[03:15:11] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[03:21:13] *** Quits: dra (~dra@2a04:4540:6417:fd00:95b5:5aa6:2917:4089) (Quit: Leaving)
[03:21:59] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:37:46] *** Joins: xsperry (~xs@user/xsperry)
[03:41:52] *** Joins: Oladon (~olad@98.43.81.226)
[03:45:49] *** Joins: igemnace (~ian@user/igemnace)
[03:50:23] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[03:51:45] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[03:51:45] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[03:51:58] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[03:52:19] *** Quits: VincentVega (~user@212.241.28.73) (Remote host closed the connection)
[03:52:28] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[03:54:26] <_73> I am trying to define a constant hash-table with `defconstant` by calling a lambda function that returns a hash. When I try to compile it however I get an error that I am trying to redefine the variable, even though I have not previouly defined the constant. Here is the code and error: http://dpaste.com/7M56CUYDN
[03:57:40] <Catie> _73: Is this under SBCL?
[03:57:44] <_73> yes
[03:57:59] <Catie> That's just how it handles defconstant forms
[03:58:30] <Catie> https://www.sbcl.org/manual/#Defining-Constants
[03:58:46] <Catie> Nope that link doesn't work
[03:59:07] <Catie> Okay try this one http://www.sbcl.org/manual/#Defining-Constants
[03:59:43] <Guest74> I've wondered if somebody has created a perfect hash table for CL.
[04:01:17] <semz> define-constant is a part of alexandria by the way
[04:01:21] <_73> Catie: I understand now. Would you reccomend just using defvar and being careful, or is there a library that provides a macro that does the right thing like in the docs
[04:01:28] <semz> lol
[04:01:41] <_73> semz: you read my mind
[04:02:29] <pjb> or rather, if you don't want to have anybody use (setf gethash), provide your own immutable API.
[04:02:39] <Catie> I guess what I usually do is just use defvar, I only use defconstant for very simple constants. I don't know that I'd call it a recommendation though
[04:04:28] <pjb> the fact that the point of constant variables in CL is to be give a hint to the compiler that it can inline the value (that should therefore be immutable).
[04:05:22] <pjb> With most processors, only small integers and characters can be put inline with the code.  And perhaps a reference, aka a pointer, to things like symbols that are essentially immutable (you cannot change the name of a symbol).
[04:05:44] <pjb> binding a constant variable to anything else doesn't bring anything.
[04:07:54] <_73> I want a guarantee that the hash wont be mutated
[04:08:09] <pjb> (defclass immutable-hash () ((hash-table :initarg :hash-table :reader hash-table))) (defmethod get-ih (key (table immutable-hash)) (gethash key (hash-table table)))  (defvar *table* (make-instance 'immutable-hash :hash-table (let ((h (make-hash-table))) (setf (gethash :k1 h) 'v1  (gethash :k2 h) 'v2) h)))
[04:08:41] <pjb> _73: ^ there.  Then nothing can change the entries in *table*, since the only operator you have is get-ih which cannot change them.
[04:09:04] <_73> Ill study this thank you
[04:09:07] <pjb> You can even   :reader %hash-table   and not export it.
[04:09:21] <White_Flame> pjb: there is a very slight advantage in defconstant for references, avoiding an indirection and a TLS check
[04:09:26] <White_Flame> vs defvar etc
[04:09:39] <semz> It documents intent I suppose, and iirc SBCL is not very happy if you use the +constant+ convention for defvar/defparameter. If alexandria is already a dependency, using define-constant instead costs nothing (as opposed to ε otherwise).
[04:09:40] <White_Flame> but of course you'd have to be accessing that a lot in a tight inner loop to matter
[04:09:48] <Nilby> Keep in mind that unless you're doing something unusual, it's really only developers who keep recompiling/reloading code, that see defconstant redefinitions.
[04:09:51] <pjb> _73: of course, it's conventionnal.  With closures you could ensure a little restrictions, but even with closures, implementations usually have debugging features to inspect and mutate the contents of a closure.
[04:10:33] <White_Flame> _73: (defconstant +foo+ <whatever>) doesn't guarantee that the <whatever> won't be mutated; it guarantees that +foo+ won't be mutated.  If <whatever> is a hashtable, +foo+ is just a constant reference to it.
[04:11:14] <White_Flame> and the compiler might inline references to that hashtable object in code that references it.  But that doesn't prevent mutating the hashtable's contents
[04:11:22] <Catie> Would you have to alias +foo+ to be able to mutate it, or can you directly (setf (gethash +foo) ...)?
[04:11:54] <pjb> (setf (gethash key +foo+) value) doesn't mutate the binding +foo+, so it's valid.
[04:12:26] <semz> afair there is no way in CL to indirectly change a binding
[04:12:26] <White_Flame> by the way, the fact that the compiler can inline references to your defconstant values is why it complains about redefining defconstant with a new hashtable when you re-evaluate (defconstant +foo+ (make-hash-table)) again, since the prior compiled code points to the old hashtable
[04:12:36] <semz> symbol macros don't count
[04:12:50] <semz> I guess progv might
[04:15:37] <Guest74> so, any minimal perfect hash tables in CL?
[04:16:03] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.3)
[04:16:18] *** Joins: mariari (~mariari@user/mariari)
[04:16:41] <White_Flame> Guest74: if that means one with a perfect hash function, isn't that super dependent on the type of key being stored?
[04:18:41] <Guest74> I'm not a hashing connoisseur :)
[04:18:48] <Guest74> but I'd love to use one.
[04:19:41] <White_Flame> if you give a perfect custom hash function to a supporting implementation's regular hash tables, they'll be O(1) anyway
[04:20:09] <White_Flame> you'd have to do the 'minimal' feature manually, though, by giving it its size up front
[04:20:28] <White_Flame> so the tools are all there for you, budding hashing connoiseur ;)
[04:21:02] <Guest74> a minimal perfect hash table would have less indirection than the hash tables we have.
[04:21:18] <Guest74> and of course my needs are for tables that are complete and wouldn't be added to.
[04:21:45] <White_Flame> right, reusing a standard hash table would be O(1)+k overhead
[04:21:53] <Alfr> Guest74, unless you plan to lookup key/values only (almost always) and not (almost never) modify the table's content, maintaining a minimal perfect hash table isn't wort the overhead.
[04:22:52] <Guest74> Alfr: that's what I want them for.
[04:25:46] <Guest74> e.g. svg colours, x11 colours, keysyms
[04:25:50] <Alfr> Guest74, CL doesn't specify one; and iirc the hard part is only to guess a appropriate hash function for the given keys, as you don't need to care about hash collisions, empty entries etc.
[04:31:16] <semz> I don't see how this is a use case for a perfect hash table to be honest. Surely you'd want to handle invalid data by the (e.g. X11) server or check that the library user provides a valid symbol.
[04:31:30] <semz> or is this an internal thing
[04:33:32] <Alfr> Guest74, you may want to simply drop the requirement for the hash-function to be minimal, essentially exchanging memory for reasonable table construction times.
[04:34:31] <Alfr> Guest74, though then you have to deal with empty entries again.
[04:34:45] <Guest74> semz: colour palettes don't change.
[04:35:10] <Guest74> Alfr: construction time doesn't matter if it only has to be constructed once.
[04:35:28] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[04:36:40] <hayley> When in doubt, (defun hash (object) (declare (ignore object)) 1) is a perfectly fine hash function.
[04:38:28] <White_Flame> Guest74: if your keys are symbols, then storing the color lookups in the symbol-plist would probably be faster & smaller than a hashtable
[04:38:50] <White_Flame> and the overall overhead would depend on how often you manifest them as strings that need to be interned
[04:39:26] <Guest74> some colour palettes are large.  Keysyms are in the thousands.
[04:40:52] <White_Flame> and you're going to have all of them in memory at once, right?
[04:41:18] <_73> Guest74: We want similar things. An internal database of immutable program facts that is optimized for read operations. This is something that is intrinsic and natural to do in Prolog.
[04:41:24] <semz> Guest74: What does that have to do with whether the other end of the connection or the user provides correct data? Unless the entire range is assigned (which I doubt, but I haven't checked), this is possible so you'd need a separate validation step anyway - and a normal hash table can do this (because a false key would be missing).
[04:42:16] *** Quits: random-nick (~random-ni@87.116.165.83) (Ping timeout: 264 seconds)
[04:43:01] <Guest74> semz: i don't understand what you're getting at.  If a user types a wrong key?  why would that break anything?
[04:43:36] <Guest74> _73: yup, a perfect use for a minimal perfect hash table imo.
[04:45:10] <White_Flame> minimal only saves some static memory footprint, which isn't going to be much.  perfect saves some (hopefully nondegenerate) few key comparisons.  I wouldn't consider it all that great for a mostly static lookup table, unless there are really egregious circumstances
[04:49:05] <semz> Guest74: A minimal perfect hash is a bijection from some pre-defined key set to some value set. But your code may not actually hand it a value that lies in the key set, e.g. due to user error or a misbehaving/malicious party on the other side of the connection. In that case, your implementation will either error out or compute a completely wrong value and continue with that. So you need some sort of validation that the input lies in the key set anyway.
[04:49:22] <Alfr> White_Flame, it's not entirely free, there's a theorem stating that the hash function must be at least of size ln(2) bits/entry.
[04:49:57] <Alfr> White_Flame, s/entry/key/
[04:50:05] <semz> And a normal hash table gives you that
[04:50:10] <Guest74> semz: errors are good.  they tell you you're doing something wrong.
[04:50:18] <White_Flame> I didn't say it was free, but it's hard to consider that these costs in these situations are worth much
[04:50:20] <semz> ???
[04:50:56] <White_Flame> and the nice thing about using symbols is that it precomputes a lot of this
[04:51:11] <White_Flame> and allows an :eq hashtable, if used
[04:51:23] <White_Flame> (erm, 'eq hashtable :-P)
[04:51:24] <Guest74> and allows documentation
[04:52:12] <semz> Yes, which is why the error should be from your code, and not some internal thing from the hash table implementation that may or may not trigger at all
[04:52:21] <White_Flame> and if size+speed was still a concern, I'd seriously consider the symbol-plist off that
[04:52:57] <Guest74> semz: I don't know what you're arguing.  That some implementation that doesn't seem to exist will be written poorly?
[04:54:00] <semz> Or that somebody is having "fun" with someone running whatever software ends up using it and manages to coax the program into doing something stupid.
[04:54:19] <semz> The point I'm arguing is that this problem doesn't even exist if you use the simpler implementation - a normal hash table.
[04:55:14] <semz> As far as I can tell, you're trading correctness and a lot of effort for basically nothing
[04:55:31] <Guest74> I think the point you're arguing exists regardless if you're using hashtables at all.  To say it is a problem with a minimal perfect hash table that doesn't seem to be implented yet, well, i don't know what to think about that.
[04:56:10] <Guest74> White_Flame: I've thought of just using packages as 'hash tables'.
[04:56:22] <Bike> isn't the issue that a minimal perfect hash table by definition is not defined for unexpected inputs, and will in fact return some random crap instead of signaling an error
[04:56:29] <semz> yes
[04:56:33] <semz> that is precisely the issue
[04:56:40] <Alfr> Guest74, it's perfectly reasonable for a gethash like function for a minimal perfect hash table to return any object or even read out of bounds. Given the hash function, it doesn't even need to store the keys, as any key provided will by the very definition of perfect hashing map to some position the implementation assumes to store the key's vale. So, it you feed it something which isn't one of the original keys, the results might be quite unexpected.
[04:56:44] <Bike> so how you implement the minimal perfect hash table doesn't matter.
[04:57:02] *** Quits: Catie (~user@user/catie) (Quit: going home)
[04:57:50] <Bike> like, if it can recognize an unexpected input and do something else, it's not a minimal perfect hash table.
[05:00:46] <Guest74> hey, i'm fine with that.
[05:03:01] <White_Flame> Bike: it's always just a hash function & fixed array anyway
[05:03:26] <White_Flame> hmm, well maybe for 1 class of them I guess
[05:03:43] <Bike> yeah but if you want The Speed then you skip the boring stuff you do in a general hash table like make sure the key is actually equivalent
[05:04:26] <semz> Guest74: This isn't flamebait, I'd sincerely like to know this. Do you have C/C++ experience?
[05:04:49] <Guest74> No, but what does that have to do with lisp?
[05:05:25] <semz> It has to do with going for design decisions like these.
[05:05:43] <Guest74> sure, if it was programmed in c/c++
[05:10:28] <Guest74> we can always ask Vseloved if he ran into any problems.  I'll have to check out his library.
[05:17:16] <Guest74> if you store the key with the value you just check that they are eq before returning whatever the hash pointed to. If you want to reduce the problems of malicious software or continous user error.  still seem to get more speed and less memory if that's you're concern.
[05:17:27] *** hexology is now known as hexology_
[05:17:51] *** hexology_ is now known as hexology__
[05:18:08] *** hexology__ is now known as hexology`
[05:18:12] *** hexology` is now known as hexology_`
[05:18:57] *** hexology_` is now known as hexology
[05:19:44] *** Quits: OlCe (~user@lfbn-nic-1-564-52.w90-118.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[05:21:02] <_73> What do you think of this general pattern for a closure that can perform dynamic dispatch? http://dpaste.com/6WNBXQGKP
[05:22:05] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[05:22:34] <_73> (assuming I quoted the people lists)
[05:23:54] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[05:25:49] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[05:28:35] <Bike> _73: case doesn't evaluate the keys, so you don't want those quotes. also, usually one would just use defstruct or defclass.
[05:29:02] <Bike> also if you do it this way you don't need an alist, you can just close over three variables, and the binding shouldn't be special.
[05:29:09] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:29:39] <Bike> oh wait, it's an alist of people. never mind that part.
[05:33:43] <_73> If I were to use a struct for `people` instead of a length 3 list do I gain anything in type safety?
[05:34:42] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[05:35:03] <Guest74> well, you can declare the types of the struct slots.
[05:35:31] <Bike> sure, it means you don't get garbage out if you accidentally have (fred ("aggravated assault" "23 years")) in there
[05:35:48] <pjb> _73: if by "type safety" you mean the implementation can perform more checks, then yes.
[05:35:49] <Bike> and also i just noticed you have your persons unquoted, so that won't work
[05:36:00] <_73> Guest74: right that is a given but does not matter if I never plan on inserting into the alist
[05:36:43] <_73> ok a struct clearly makes more sense
[05:37:08] <Bike> i could write this something like (defstruct person gender age marital) (defvar *people* (list (cons 'fred (make-person ...)) ...))
[05:37:28] <pjb> Or even not consing a key, just the structs.
[05:37:38] <Bike> and then maybe (defun gender (name) (person-gender (cdr (assoc name *people*)))) etc instead of the dispatch thing
[05:37:54] <Guest74> I love structs.  Most people will push you towards classes.
[05:37:59] <Bike> also, just realized there's another bug, since assoc returns the pair rather than the value your code won't work
[05:38:07] <pjb> (defstruct person name gender age marital)  (defparameter *persons* (list (make-person :name "Bill") (make-person :name "Mary")))
[05:38:29] <pjb> (find "Mary" *persons* :key (function person-name) :test (function string-equal)) #| --> #S(person :name "Mary" :gender nil :age nil :marital nil) |#
[05:40:47] <Bike> really i read too quickly because i read "closure that can perform dynamic dispatch" and thought of the scheme pattern of using closures as objects, but you're not actually doing that here. in fact, if *people* is a special variable like it looks like, there's not even a closure involved
[05:43:57] <_73> Bike: I see that I misused the ** convention.
[05:44:19] <_73> But this is a lexical variable
[05:46:53] *** Quits: prxq_ (~quassel@x4dbe8eed.dyn.telefonica.de) (Ping timeout: 256 seconds)
[05:47:48] *** Joins: OlCe` (~user@lfbn-nic-1-262-221.w90-116.abo.wanadoo.fr)
[05:50:52] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[05:53:43] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[05:54:20] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[05:56:16] <Guest74> oops, i think I need more dbus services besides firefox.  Just crashed my browser testing a function.  This dbus implementation seems like less of a good idea now that I see there's not much there if you aren't running kde or gnome.
[05:57:19] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[06:02:27] *** Joins: s-liao (~s-liao@101.86.99.70)
[06:04:08] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[06:08:40] *** Quits: taiju (~taiju@240b:253:ec40:2400:2d48:f53f:bd4f:c325) (Ping timeout: 264 seconds)
[06:19:30] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[06:20:20] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[06:22:05] *** Joins: s-liao (~s-liao@101.86.99.70)
[06:30:46] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:11:38] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:12:14] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[07:30:28] <beach> Good morning everyone!
[07:34:11] *** Joins: Lycurgus (~juan@98.4.112.204)
[07:39:06] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Ping timeout: 256 seconds)
[07:39:52] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 264 seconds)
[07:45:52] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 264 seconds)
[07:47:55] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:01:25] <phantomics> Morning beach, is anyone around here using Allegro CL? If so I have something amusing for you to try
[08:16:53] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:18:47] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[08:18:56] <ns12> Does "Object-Oriented Programming in COMMON LISP: A Programmer's Guide to CLOS" by Sonya E. Keene describe CLOS as it appears in ANSI Common Lisp? Or is the book about pre-ANSI CLOS?
[08:24:26] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[08:24:50] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[08:29:04] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 264 seconds)
[08:29:55] *** Joins: semz (~none@user/semz)
[08:31:28] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 264 seconds)
[08:45:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:47:23] <beach> ns12: It is an accurate description.
[08:48:17] <beach> ns12: ANSI pretty much incorporated CLOS as it was defined, or the subset that was necessary for the standard.
[08:50:10] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[09:14:20] <beach> ns12: Hello?
[09:29:52] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[09:44:58] <ns12> beach: Sorry, I was away. Thank you for the information.
[09:46:24] <beach> Sure.
[09:47:01] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[09:56:11] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Remote host closed the connection)
[09:56:29] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[10:18:44] *** Joins: s-liao (~s-liao@101.86.99.70)
[10:40:33] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:05:45] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:14:25] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 256 seconds)
[11:16:23] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:1109:780a:f24c:772c)
[11:17:57] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11ca:25f:b1ee:5079:b9f6:a56f)
[11:18:38] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[11:19:42] *** Joins: pve (~pve@37-136-16-196.rev.dnainternet.fi)
[11:21:13] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:21:29] *** Joins: amb007 (~a_bakic@65.145.204.77.rev.sfr.net)
[11:21:59] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:1109:780a:f24c:772c) (Ping timeout: 250 seconds)
[11:25:47] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[11:27:19] *** Joins: gaqwas (~john@dynamic-077-007-037-228.77.7.pool.telefonica.de)
[11:41:21] *** Joins: ldb (~user@user/ldb)
[11:46:09] *** Quits: amb007 (~a_bakic@65.145.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[11:46:10] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:46:26] *** Joins: amb007 (~a_bakic@171.246.204.77.rev.sfr.net)
[11:50:08] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[11:59:45] *** Quits: amb007 (~a_bakic@171.246.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[12:00:46] *** Joins: amb007 (~a_bakic@129.199.204.77.rev.sfr.net)
[12:03:48] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[12:09:58] *** Quits: ldb (~user@user/ldb) (Remote host closed the connection)
[12:12:57] *** Quits: amb007 (~a_bakic@129.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[12:14:20] *** Joins: amb007 (~a_bakic@129.199.204.77.rev.sfr.net)
[12:14:20] *** Quits: amb007 (~a_bakic@129.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[12:15:24] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:17:26] *** Quits: dre (~dre@2001:8003:c932:c301:ca62:53a2:f102:5ef0) (Quit: Leaving)
[12:18:36] *** Joins: kingofcsu (~kingofcsu@123.118.74.105)
[12:37:28] *** Quits: gaqwas (~john@dynamic-077-007-037-228.77.7.pool.telefonica.de) (Ping timeout: 264 seconds)
[12:55:33] *** Joins: VincentVega (~user@212.241.28.73)
[12:56:04] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:79ff:66df:e107:bbfa)
[13:02:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:16:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:27:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:33:08] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:33:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:34:28] *** Lord_of_Life_ is now known as Lord_of_Life
[13:42:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[13:42:39] *** Joins: s-liao (~s-liao@101.86.99.70)
[13:43:58] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:44:35] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[13:48:47] *** Quits: kingofcsu (~kingofcsu@123.118.74.105) (Ping timeout: 252 seconds)
[13:49:14] *** Quits: OlCe` (~user@lfbn-nic-1-262-221.w90-116.abo.wanadoo.fr) (Quit: ERC (IRC client for Emacs 27.1))
[13:50:12] *** Joins: OlCe (~user@lfbn-nic-1-262-221.w90-116.abo.wanadoo.fr)
[14:06:40] *** Quits: pillton (~user@124.170.14.166) (Quit: ERC (IRC client for Emacs 27.2))
[14:09:24] *** Joins: s-liao22 (~s-liao@101.86.99.70)
[14:09:32] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:16:43] <VincentVega> So, in a situation like this https://pastebin.com/Ft6qYNMa , what can I do to optimize away the WHEN clause? Any way to declare FLAG constant?
[14:17:22] *** Joins: Guest746 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[14:17:35] <phoe> for a single flag I'd do (defun builds (flag) ... (if flag ...))
[14:17:38] <phoe> no closure this way
[14:18:13] <phoe> that's slightly subpar because it leads to code duplication, but you do seem to want code duplication - you want to return different functions depending on the value of flag
[14:18:22] <phoe> one of which always prints and one of which never prints
[14:19:18] <phoe> but, good golly, I hope you don't use microoptimizations like these for simple functions like that
[14:19:27] <VincentVega> phoe: yeah, I was wondering if I could do away with code duplication.
[14:19:42] <VincentVega> nah, this one is just for a discussion
[14:19:50] <phoe> VincentVega: not really; you basically want to return different anonymous functions based on the value of FLAG
[14:20:16] <phoe> and LAMBDA is not a good abstraction for that, because it always describes a single body of code
[14:21:02] <phoe> so I don't think you can avoid duplicating code if you *need* duplicating code
[14:21:22] <VincentVega> phoe: I see. I think I could with a macro, though.
[14:21:30] <phoe> you can only try to hide it behind some sort of macrology, but adding conditionals like that would likely require code walking in order to find the conditionals in the code
[14:22:21] <phoe> like, if a hypothetical FLAG-LAMBDA like (flag-lambda (x y z) ...) expands into conditionals based on X, Y and Z, then (flag-lambda (x y z) (... (... (flag-when x ...))))
[14:22:46] <phoe> this requires code walking so FLAG-LAMBDA can recognize how to skip or not skip the inner FLAG-WHEN invocation
[14:22:59] <phoe> doable, but nontrivial
[14:23:33] <VincentVega> phoe: Hmm, I see what you are saying, that makes sense. But to avoid code walking, I could write a seperate macro too, so that's cool. Well, thanks for explaining this!
[14:24:53] <phoe> ....hmmmm
[14:25:00] <phoe> you know
[14:25:09] <phoe> maybe you could use the symbol-macrolet trick to avoid code walking
[14:25:14] <Nilby> I don't think you need walking if you don't care that there's two versions of the lambda
[14:25:44] <phoe> Nilby: I mean, one of these lambdas needs to have the PRINT call and the other needs to not have it
[14:26:11] <Nilby> that's what I'm thinking
[14:26:32] *** Quits: s-liao22 (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:26:44] <phoe> so something like (flag-lambda (x) (flag-when x (print "foo")) (+ 1 2)) expands into (if x (lambda () (print ...) ...) (lambda () ...))
[14:26:55] <phoe> at least that is my idea
[14:27:14] <phoe> and I just realized that you can avoid code walking - you can pass information in &environment
[14:27:47] <phoe> and it will cause FLAG-WHEN to expand into either (progn) for nothing or (progn ...) - depending on whether a given flag is meant to be set for the given generated lambda
[14:27:58] <phoe> I have no idea if I explain myself clearly here
[14:28:04] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:28:30] <phoe> VincentVega: I can sketch out a solution later today if you're interested and/or don't know how to start
[14:28:45] <phoe> ;; also, uh, hi everyone, sorry for being effectively MIA for the past few months
[14:29:07] <VincentVega> phoe: I think I know what you are saying, I am playing around with code rn to see what works best : )
[14:29:19] <phoe> <3
[14:29:36] <VincentVega> welcome back btw
[14:30:38] <phoe> thanks
[14:34:28] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[14:35:32] *** Quits: esb (~esb@2804:14c:1ad:8b70::1000) (Ping timeout: 252 seconds)
[14:37:12] <Nilby> something like https://plaster.tymoon.eu/view/2736#2736  maybe?
[14:38:13] <Nilby> but it doesn't seem to disassemble the lambda how I expect
[14:39:55] *** Joins: winning-luser (~winning-l@2601:8c1:80:70d0::756)
[14:40:24] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[14:40:38] <phoe> as in?\
[14:40:56] <phoe> (+ 1 2) will likely be constant-folded, that's for sure
[14:41:31] <VincentVega> Nilby: My simplest version is this for now https://pastebin.com/yWe3Vbx5
[14:42:04] <Nilby> phoe: oh right, that makes sense
[14:42:45] <VincentVega> I mean, the other way is to do this generally like phoe suggested. For multiple variables, that is, would be useful. Maybe I will even make it.
[14:45:52] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:46:30] *** Joins: amb007 (~a_bakic@161.199.204.77.rev.sfr.net)
[14:58:57] *** Joins: Krystof (~user@81.174.155.115)
[14:59:52] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:79ff:66df:e107:bbfa) (Remote host closed the connection)
[15:01:56] <VincentVega> phoe: Nilby: OK, it's actually quite nifty with a symbol-macrolet https://pastebin.com/WN3NU68j except for the deleting unreachable code warnings.
[15:01:57] *** Quits: amb007 (~a_bakic@161.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:02:09] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:05:41] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[15:11:49] <phoe> you can avoid unreachable code if you create your own FLAG-WHEN instead
[15:12:32] <phoe> that's not yet the symbol-macrolet trick that I was thinking of
[15:12:49] <phoe> give me a few hours to finish work and then I'll be able to show you if no one does before me :D
[15:13:35] <VincentVega> phoe: cool thanks! i just hope i ain't a bother
[15:16:09] <Nilby> Nice. Nearly zero run cost conditional logging. Probably less code bloat than C++ templates. I'm curious to see phoe's extra fancy way.
[15:17:26] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[15:17:30] <phoe> VincentVega: nah, I'll enjoy a chance to properly exercise my lisp muscles again
[15:17:52] <VincentVega> Nilby: yep, with a custom when-flag, the warnings are gone, will be curious to see another way too : )
[15:17:56] <VincentVega> phoe: ok : )
[15:21:08] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[15:21:30] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[15:23:56] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 252 seconds)
[15:26:38] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[15:30:52] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:46:47] *** Joins: random-nick (~random-ni@87.116.165.83)
[15:55:04] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[16:05:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 268 seconds)
[16:11:39] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[16:16:33] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:22:31] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 250 seconds)
[16:23:56] *** Joins: s-liao (~s-liao@101.86.99.70)
[16:24:00] *** Joins: johnjay (~pi@192.142.100.50)
[16:40:28] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 264 seconds)
[16:43:46] *** Joins: esb (~esb@2804:14c:1ad:8b70::1000)
[16:58:09] *** Quits: thmprover (~user@047-042-215-236.res.spectrum.com) (Remote host closed the connection)
[17:04:12] <phoe> VincentVega: got it
[17:04:45] <phoe> https://plaster.tymoon.eu/view/2737#2737
[17:05:15] <phoe> I use &environment to communicate between the outer macro(s) FLAG-LAMBDA and the inner macro(s) FLAG-WHEN
[17:05:58] <phoe> SYMBOL-MACROLET is a way of writing stuff into the compilation environment and MACROEXPAND-1 with a symbol is a way of reading it
[17:06:06] <phoe> you can use MACROLET as well, just more parens this way
[17:06:33] <phoe> in the fully macroexpanded code, you can ignore L29 completely - it's just noise leftover by the communication
[17:07:18] <phoe> what matters is the fact that the (IF X (LAMBDA ...) (LAMBDA ...)) structure is what you seem to want, and a total of 2^n functions will be generated based on the combination of flags
[17:07:34] <phoe> note that this is untested PoC code, still likely buggy; test before use
[17:08:22] <phoe> a tidbit is my use of LOCALLY instead of PROGN to permit declarations, since you have a lot of #.*burn-baby-burn* style of declarations
[17:09:20] *** Joins: kingofcsu (~kingofcsu@123.118.74.105)
[17:18:37] *** Joins: cosimone (~user@93-47-231-3.ip115.fastwebnet.it)
[17:27:48] <Nilby> Nice a succinct showcase for these cool macroolgy techniques!
[17:28:32] *** Joins: Bike (~Glossina@71.69.170.70)
[17:28:32] *** ChanServ sets mode: +o Bike
[17:36:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[17:38:10] *** Joins: waleee (~waleee@h-82-196-111-63.na.cust.bahnhof.se)
[17:40:00] <Nilby> Mutually and manually macro expanding, moreover meticulously mind expanding.
[17:40:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:44:51] *** Quits: waleee (~waleee@h-82-196-111-63.na.cust.bahnhof.se) (Ping timeout: 256 seconds)
[17:45:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[17:46:37] *** Joins: Lycurgus (~juan@98.4.112.204)
[17:50:39] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[17:51:48] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:58:27] *** Quits: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) (Ping timeout: 256 seconds)
[17:59:01] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[17:59:37] *** Parts: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[18:00:19] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[18:01:22] *** Joins: s-liao (~s-liao@101.86.99.70)
[18:12:08] <phoe> there's actually two layers of macros in there
[18:12:19] <phoe> one being the "real" macros that are expanded into Lisp code
[18:12:45] <phoe> and the other being symbol macros whose only purpose is to exist in &env as a way of passing information deeper into the macroexpansion process
[18:15:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[18:17:16] <hobo> we've got to go deeper
[18:17:59] <VincentVega> phoe: Awesome, thank you! This is sure finer than a single symbol-macrolet.
[18:18:00] <phoe> but not in this way, there is only one compilation environment
[18:18:11] <phoe> VincentVega: no problem, hope it's useful
[18:19:23] *** Joins: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net)
[18:19:23] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[18:19:59] <phoe> VincentVega: in your previous example, you could substitute SYMBOL-MACROLET for LET and it would still work
[18:20:16] <phoe> ;; just, well, with closures, just like before
[18:20:58] <phoe> in your previous example, you had (when x ...) turn into (when t ...) or (when nil ...) which generated unreachable code warnings
[18:21:22] <phoe> now the macro simply doesn't generate any code for the cases that could previously generate something like (when nil ...)
[18:22:15] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:22:33] <VincentVega> phoe: hmm, yes, i see, nice!
[18:23:42] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[18:24:17] *** Joins: Algernon666 (~Algernon6@2a04:cec0:11c0:7657:b1ee:5079:b9f6:a56f)
[18:24:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:27:20] *** Quits: kingofcsu (~kingofcsu@123.118.74.105) (Remote host closed the connection)
[18:27:32] *** Joins: nature (~nature@45.32.235.173)
[18:27:38] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11ca:25f:b1ee:5079:b9f6:a56f) (Ping timeout: 252 seconds)
[18:34:06] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[18:35:35] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[18:40:24] <VincentVega> phoe: I take it you wouldn't mind if I use this stuff in my code (under lgpl) quoting you as the author?
[18:44:43] *** Joins: igemnace (~ian@user/igemnace)
[18:44:59] *** Quits: xsperry (~xs@user/xsperry) (Killed (NickServ (GHOST command used by ahahaha!~xs@cpe-188-129-101-182.dynamic.amis.hr)))
[18:45:29] *** Joins: xsperry (~xs@user/xsperry)
[18:46:08] *** Joins: antoszka (uid528518@id-528518.uxbridge.irccloud.com)
[18:58:45] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[19:06:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:07:25] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:91a7:9893:397c:aaca)
[19:08:53] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[19:13:14] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[19:14:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[19:19:14] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:28:23] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:34:57] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:42:48] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[19:45:47] <phoe> VincentVega: take it under whatever license you'd like under only one condition
[19:46:00] <phoe> you will write extensive unit tests for it to ensure that it works correctly
[19:46:27] <phoe> credit is nice but optional, working code is much more desirable :D
[19:47:45] <phoe> (oh, and don't export the %TRUE-FLAGS% symbol - it's important that users don't have the ability to shadow it in any way)
[19:52:00] <VincentVega> phoe: Understood, will do. Thanks again!
[19:56:49] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 268 seconds)
[20:00:39] <Guest746> phoe: very nice.  Never seen an example of using &env.
[20:04:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:04:46] <phoe> Guest746: it's one of the basic uses - ensuring that MACROEXPAND-1 can expand locally defined macros
[20:05:17] <phoe> otherwise your macros that need to expand other macros will break when MACROLET and SYMBOL-MACROLET come into play
[20:12:15] <Guest746> yeah i haven't run into any nested macro opportunities yet. I suspect it's in the future for my binary reader/writer so i'll try and keep this stuff in mind.
[20:13:02] *** Joins: danieli6 (~danieli@user/danieli)
[20:13:06] *** Joins: hineios4 (~hineios@a95-93-142-124.cpe.netcabo.pt)
[20:13:45] *** Joins: Odin-FOO (~odin@cybernetic.anarchism.is)
[20:13:56] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (Ping timeout: 256 seconds)
[20:13:56] *** Quits: Odin- (~odin@cybernetic.anarchism.is) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: FragmentedCurve (~FC@pool-100-2-232-17.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[20:14:34] *** Joins: dtman34_ (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[20:14:49] <phantomics> How's it going, phoe? Been a while
[20:15:01] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: danieli (~danieli@user/danieli) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: markasoftware (~quassel@107.161.26.124) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Ping timeout: 256 seconds)
[20:15:05] *** danieli6 is now known as danieli
[20:15:05] *** hineios4 is now known as hineios
[20:15:27] *** Joins: markasoftware (~quassel@107.161.26.124)
[20:16:20] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[20:16:25] *** Joins: FragmentedCurve (~FC@pool-100-2-232-17.nycmny.fios.verizon.net)
[20:18:25] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[20:18:29] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[20:18:51] <phoe> phantomics: basically took a small sabbatical from everything programming-related
[20:18:59] *** Quits: dtman34_ (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[20:19:36] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[20:19:45] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:20:10] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[20:20:39] <phantomics> Can help to take a breather sometimes
[20:21:25] <phantomics> April has progressed a lot, I'm checking off the final todos before a new release, been testing it with all different CLs
[20:22:23] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[20:22:35] <phantomics> I just discovered that Allegro CL apparently doesn't know what "alphanumeric" means - try (alphanumericp #\←) and observe the results
[20:22:36] <jackdaniel> well, it is almost December, that makes it approximately April 270 :)
[20:23:04] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:23:45] <phantomics> And then try (acosh -2) and get a divide by 0 error
[20:25:07] <phantomics> It seems that in Allegro, (alphanumericp) gives nil for the common keyboard symbols that aren't alphanumeric like +, / and @ but many other unicode characters not on the keyboard will return T
[20:26:41] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:27:35] *** Joins: makomo (~makomo@user/makomo)
[20:28:44] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:30:10] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[20:32:09] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:34:28] <phoe> phantomics: amazing to hear it about April
[20:34:33] <phoe> and weird to hear it about Allegro :D
[20:34:45] <phantomics> You can find the matching characters in an implementation with (loop :for i :below (expt 2 16) :when (and (code-char i) (alphanumericp (code-char i))) :do (princ (code-char i)))
[20:35:23] <phantomics> It turns out that in CCL, all Chinese/Japanese kanji register as alphanumeric
[20:36:09] <phantomics> Meanwhile in Allegro, all sorts of weird stuff matches, beware though as it may crash your Emacs
[20:41:47] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:91a7:9893:397c:aaca) (Remote host closed the connection)
[20:48:16] *** Quits: Lycurgus (~juan@98.4.112.204) (Ping timeout: 264 seconds)
[20:53:03] *** Joins: Oladon (~olad@98.43.81.226)
[20:56:41] *** Joins: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it)
[21:01:18] *** Joins: bremner (~bremner@notmuch/developer/bremner)
[21:05:41] *** Joins: prxq (~quassel@x4db39774.dyn.telefonica.de)
[21:08:33] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11c0:7657:b1ee:5079:b9f6:a56f)
[21:08:51] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11c0:7657:b1ee:5079:b9f6:a56f) (Quit: Leaving)
[21:12:44] <Guest746> is there any portable way to access ftype declarations?
[21:17:03] <phoe> Guest746: you mean declarations or proclamations?
[21:17:23] <phoe> hm, I guess that (ql:quickload :introspect-environment) should work for both
[21:17:34] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[21:18:20] <phoe> and then call FUNCTION-INFORMATION with the function name plus a lexenv if you have it
[21:22:03] <Guest746> that seems to work. is this sbcl only? or m-. is leading me astray here.
[21:22:20] *** Joins: yewscion (~yewscion@52.94.133.128)
[21:22:58] <CodeBitCookie[m]> Hello everyone,
[21:22:58] <CodeBitCookie[m]> so I want to send keyboard and mouse input automatically with Common Lisp. Is there any way you suggest that I go about this?
[21:22:58] <CodeBitCookie[m]> I would prefer if there were a cross platform solution but if the library depends on Xorg or Windows only stuff then that's fine too.
[21:22:58] <CodeBitCookie[m]> I did read a few outdated blogs.
[21:23:49] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[21:25:28] <jackdaniel> Guest746: cltl2 defines the environment access api that contains necessary information
[21:25:40] <jackdaniel> this information was dropped in the final ansi standard, but some implementations still implement it
[21:26:49] <jackdaniel> s/this information was dropped/this api was dropped/
[21:26:53] <Guest746> so no trivial-cltl2?  I'm not sure it's a big deal since I can't find local-sockets anywhere besides the same ones.
[21:28:58] <Guest746> this is for a probably bad idea to autogenerate dbus interfaces if ftypes are declared.
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:38] *** Joins: ns12 (~ns12@user/ns12)
[21:31:49] <Bike> trivial-cltl2 exists. there's also uhhhhh introspect-environment, which i wrote.
[21:31:58] <Bike> not sure what this has to do with sockets though.
[21:32:34] <Guest746> well it doesn't help to generate a dbus interface if you don't have a socket to communicate with :)
[21:33:59] *** Odin-FOO is now known as Odin-
[21:34:21] <Bike> isn't there a dbus library that can automatically generate an api from the dbus introspection stuff?
[21:35:10] <yitzi> death wrote one I believe.
[21:35:13] <Bike> i poked at it once... yeah, death's
[21:36:40] <Guest746> anybody know the name?
[21:36:50] <Guest746> the onlything i found on cliki was cl-dbus
[21:36:59] <Bike> https://github.com/death/dbus/
[21:37:46] <yitzi> Its in quicklisp, btw.
[21:38:29] <Guest746> well, i'll have to look at that. thanks.  Though it seems to generate from introspected stuff, which is the other half.  I'm thinking about the part of generating from lisp functions.
[21:39:02] <Guest746> ugh, requires iolib.
[21:51:16] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 264 seconds)
[21:52:30] *** Joins: amb007 (~a_bakic@145.199.204.77.rev.sfr.net)
[21:59:20] *** Quits: amb007 (~a_bakic@145.199.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[22:00:33] *** Joins: amb007 (~a_bakic@155.104.204.77.rev.sfr.net)
[22:05:49] <hobo> all aboard the death dbus
[22:06:05] <hobo> make sure you let the people care about know you're leaving
[22:08:30] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[22:12:04] *** Joins: Bike42 (~Bike@71.69.170.70)
[22:12:04] *** ChanServ sets mode: +o Bike42
[22:12:48] *** Bike42 is now known as Bicyclidine
[22:14:05] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[22:17:02] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[22:17:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:20:33] <Guest746> anybody else have problems loading cxml?
[22:26:19] <jcowan> fwiw, Interlisp has two structure editors built-in, one TTY and one GUI; most Interlisp programming is done in the GUI (one function at a time, as in Smalltalk)
[22:28:28] *** Quits: Bike (~Glossina@71.69.170.70) (Ping timeout: 264 seconds)
[22:29:06] *** Joins: rotateq (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de)
[22:29:54] *** Joins: Catie (~user@user/catie)
[22:40:30] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[22:42:42] *** Quits: amb007 (~a_bakic@155.104.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:43:44] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:49:50] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[22:50:11] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[22:55:46] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[22:56:00] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 256 seconds)
[22:57:53] *** Alfr is now known as Guest1819
[22:57:58] *** Joins: Alfr (~Alfr@user/alfr)
[22:58:28] *** Quits: Guest1819 (~Alfr@user/alfr) (Ping timeout: 265 seconds)
[23:01:11] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11c0:7657:b1ee:5079:b9f6:a56f) (Ping timeout: 245 seconds)
[23:01:42] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[23:08:12] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:90b4:e8ac:1c65:38c)
[23:12:39] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:90b4:e8ac:1c65:38c) (Ping timeout: 250 seconds)
[23:16:34] *** MetaYan_ is now known as MetaYan
[23:18:27] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[23:20:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:22:16] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:90b4:e8ac:1c65:38c)
[23:23:56] *** Quits: Guest746 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:25:41] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[23:32:12] *** Joins: Inline (~Inline@aftr-37-201-240-100.unity-media.net)
[23:39:16] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 264 seconds)
[23:39:21] *** Quits: Bicyclidine (~Bike@71.69.170.70) (Quit: Connection closed)
[23:44:59] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:90b4:e8ac:1c65:38c) (Ping timeout: 252 seconds)
[23:46:07] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:50:10] *** Quits: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:52:53] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
