[00:00:03] <lotuseater> just wanted to say hi if it doesn't annoy
[00:00:15] <phantomics> Btw what version of SBCL are you using April under?
[00:00:24] <lotuseater> hm what does the source for rotate say?
[00:00:42] <lotuseater> on the new laptop with Manjaro I'm now on 2.1.7
[00:00:47] <lotuseater> could try now
[00:00:53] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:01:43] *** Joins: cosimone (~user@93-44-186-101.ip98.fastwebnet.it)
[00:02:03] <phantomics> It uses the CL replace function which is where the problem comes from
[00:02:33] <phantomics> Ok, I just upgraded to 2.1.7, could you run (april (test)) and let me know how much time it says it takes?
[00:02:41] <_death> phantomics: I'd expect the first form to give problems, since you're passing a literal to a destructive operator.. the second works for me
[00:02:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[00:03:02] <lotuseater> yes it says -1 not of type SB-INT:INDEX when binding SB-VM::NELEMENTS
[00:03:12] <phantomics> _death: are you using 2.1.7?
[00:03:25] <phantomics> lotuseater: same problem I'm having
[00:03:31] <lotuseater> yes, do I have to wrap it into (time ...) ?
[00:03:34] <_death> I'm using HEAD
[00:03:44] <phantomics> No, (april (test)) will give you the time elapsed at the end
[00:03:57] *** Joins: attila_lendvai (~alendvai@catv-176-63-7-171.catv.broadband.hu)
[00:04:01] <lotuseater> and on CCL? how does it behave there?
[00:04:07] <phantomics> Haven't tried yet
[00:04:07] <lotuseater> okay
[00:04:37] <phantomics> When I switched from 2.0.2 to 2.1.7, April's compiler seems to work 100x slower
[00:05:18] <phantomics> _death: ok, maybe it was a bug that just got fixed
[00:05:41] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[00:05:42] <lotuseater> 4 of 904 tests failed (129995ms)
[00:05:55] <phantomics> Ok, that long duration is that I'm seeing
[00:06:07] <lotuseater> hmmm
[00:06:14] <phantomics> Under 2.0.2 I was seeing exec times around 100ms for the tests, so it's a cause for concern
[00:06:49] <phantomics> And those 4 failed tests are because of the (rotate) bug
[00:07:04] <lotuseater> yes I expected that
[00:07:17] *** Joins: selwyn (~selwyn@user/selwyn)
[00:07:41] <phantomics> I wonder if the new version has some kind of type-checking that wasn't present before and is producing this massive slowdown
[00:08:11] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:08:27] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 240 seconds)
[00:08:28] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[00:09:19] *** Joins: khrbt (~znc@user/khrbt)
[00:10:03] *** Joins: john__ (~john@dynamic-077-004-091-194.77.4.pool.telefonica.de)
[00:10:34] <_death> heh, apparently april expects lparallel:*kernel* to be a kernel instance (or null).. in my case I extended it to be a kind of a "kernel designator" so holds a function initially.. but if I set it to nil then (april (test)) => âœ“ 914 tests completed (123331ms)
[00:15:24] <phantomics> So you customized your lparallel?
[00:15:39] <phantomics> A direct way to test the bug is (REPLACE #(3 1) #(3 1) :START1 1 :START2 0)
[00:15:57] <phantomics> If those #(3 1) vectors are t-type, it works, but if they're 'fixnum it fails
[00:15:58] <_death> again, you are passing a literal to a destructive operator
[00:16:11] <phantomics> I know, this is for the purposes of a test
[00:16:15] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[00:16:35] <_death> what test would that be? the consequences are undefined
[00:16:47] <phantomics> Checking whether the (replace) causes a bug
[00:17:09] <phantomics> In your HEAD it seems not to, lotuseater and I are trying in 2.1.7 and it does
[00:17:18] <lotuseater> and with floats or specializable unsigned-bytes?
[00:17:41] <phantomics> The type is fixnum
[00:18:04] <lotuseater> right but if it's one of the others when doing with rotate
[00:18:19] <phantomics> I tried changing the vector to be t-type and it now works, but it seems strange that (replace) won't work on a fixnum vector
[00:18:24] <phantomics> Let's try
[00:18:27] <_death> anyway (let ((foo (make-array 2 :initial-contents '(3 1) :element-type 'fixnum))) (replace foo foo :start1 1 :start2 0)) => #(3 3) as expected with commit 412939
[00:19:47] <phantomics> (let ((abc (make-array 2 :element-type 'long-float :initial-contents '(3.0d0 1.0d0)))) (alexandria:rotate abc 1) abc) also fails
[00:20:35] <_death> in a few days 2.1.8 will be released, methinks
[00:20:53] <phantomics> but this works: (let ((abc (make-array 2 :element-type 'long-float :initial-contents '(3.0d0 1.0d0)))) (replace abc abc :start1 1 :start2 0) abc)
[00:21:06] <phantomics> And the other problem is that massive slowdown
[00:21:15] <phantomics> Tests used to take ~100ms
[00:21:46] <_death> for that you can try bisecting sbcl
[00:22:06] <phantomics> this also works: (let ((abc (make-array 2 :element-type 'fixnum :initial-contents '(3 1)))) (replace abc abc :start1 1 :start2 0) abc)
[00:22:51] <phantomics> Bisecting? I'm going to try switching back to older versions to see if they'll go faster, make sure it wasn't a change I made
[00:23:10] <_death> https://git-scm.com/docs/git-bisect
[00:23:47] <_death> if it's a change you made, bisect april :)
[00:23:52] *** Quits: attila_lendvai (~alendvai@catv-176-63-7-171.catv.broadband.hu) (Ping timeout: 252 seconds)
[00:24:40] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[00:25:25] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:27:15] *** Quits: cosimone (~user@93-44-186-101.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[00:27:35] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:30:34] <phantomics> Changing that vector from fixnum to t-type solves the problem for now
[00:44:39] *** Quits: cranium (~cranium@user/cranium) (Ping timeout: 250 seconds)
[00:45:05] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 250 seconds)
[00:46:41] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[00:47:31] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502)
[00:58:31] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[01:01:20] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:02:07] *** Quits: silasfox (~sbv@p200300cec722ef9b1b5a7fa8102da339.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[01:03:28] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:07:29] *** Joins: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com)
[01:08:40] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 240 seconds)
[01:11:25] *** Joins: joe_mad (~user@195.53.115.108)
[01:12:22] *** Quits: travv0 (sid293381@user/travv0) ()
[01:12:37] *** Joins: travv0 (sid293381@user/travv0)
[01:17:10] *** Quits: easye (~user@oxi.slack.net) (Remote host closed the connection)
[01:18:13] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[01:18:57] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Remote host closed the connection)
[01:20:13] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[01:21:11] *** Quits: pve (~pve@178-55-235-61.bb.dnainternet.fi) (Quit: leaving)
[01:22:48] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[01:23:24] *** Quits: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com) (Read error: Connection reset by peer)
[01:24:20] *** Quits: jsatk (sid304796@id-304796.brockwell.irccloud.com) ()
[01:24:30] *** Joins: silasfox (~sbv@xdsl-87-78-57-101.nc.de)
[01:24:34] *** Joins: jsatk (sid304796@id-304796.helmsley.irccloud.com)
[01:29:04] <recordgroovy> Quick question: some libraries use special variables like cl-json:*json-stream* for consumers to dynamically bind to. Is there a way for consumers to do some form of package-wide dynamic binding, like a toplevel setf, without overriding settings from other dependents?
[01:29:50] *** Joins: lottaquestions (~nick@2607:fa49:503f:6400:9cd2:19ca:9a38:1647)
[01:31:18] <Bike> packages are just namespaces. they're not involved with anything like that. what do you have in mind exactly? Like when you call any function named by a symbol in your package it binds a dynamic variable?
[01:32:47] <moon-child> (defparameter mypackage:*my-copy-of-json-streame*)  (defun mypackage:some-json-function () (let ((cl-json:*json-stream* mypackage:*my-copy-of-json-stream*)) (cl-json:some-json-function))
[01:33:47] *** Joins: PinealGlandOptic (~PinealGla@178-133-189-55.mobile.vf-ua.net)
[01:35:57] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:36:14] *** Quits: mjoerg (~user@user/mjoerg) (Remote host closed the connection)
[01:36:49] *** Joins: mjoerg (~user@user/mjoerg)
[01:39:58] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[01:40:21] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:45:06] <lisp123> I wonder if symbol-let might help here
[01:46:28] <Bike> what is symbol-let?
[01:47:19] <moon-child> meant symbol-macrolet, maybe?
[02:00:55] *** Quits: mjoerg (~user@user/mjoerg) (Remote host closed the connection)
[02:01:06] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:01:35] <pjb> recordgroovy: your question is incomprehensible.  What does "overriding settings from other dependents" mean? what are those settings? what are those other dependents? What do they depend on?
[02:01:45] *** Joins: mjoerg (~user@user/mjoerg)
[02:03:33] <recordgroovy> pjb: You have packages A and B that both depend on cl-json, and both have a toplevel `(setf cl-json:*json-output* something-or-other)` -- conflict. The usual workaround is a `let`, but if you're calling the dependent library in multiple parts it can get unwieldy
[02:03:44] *** Joins: akoana (~ah@user/akoana)
[02:04:07] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[02:04:07] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[02:04:20] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:04:28] <recordgroovy> I wanted to know if there was any feature that looked like a toplevel setf to the programmer, but behaved like you're wrapping an entire chunk of code under a let.
[02:04:32] <pjb> recordgroovy: does function in package A call a function in package B?
[02:04:50] <recordgroovy> They're both independent and know nothing of each other
[02:05:18] <pjb> dynamic binding = time. ie WHEN you call (a:foo) with the dynamic binding, then DURING that call, it will be visible to any function (a:foo) calls.
[02:05:19] <Bike> okay, but let me ask again - say you have like (let ((cl-json:*json-output* ...)) (defun foo ...)). then in a call to foo that variable won't actually be bound.
[02:05:33] <Bike> that's what wrapping a regular system file in a let would be like, but I don't think you want that.
[02:06:09] <recordgroovy> That's fair -- I guess a let over each cl-json call would be the answer here.
[02:06:24] <pjb> recordgroovy: (let ((json:*output* 'something)) (a:foo)) ; but if a:foo doesn't call any b:bar, and you call b:bar at another time, (or from another thread, subject to some thread configuration), then the binding won't be seen while (b:bar) is executing.
[02:07:18] <Bike> every call in your library, right? you could define some small wrappers. (defun encode-json (object) (json:encode-json object *my-stream*))
[02:07:32] <pjb> recordgroovy: check the :initial-bindings parameter of bt:make-thread
[02:07:45] <pjb> recordgroovy: and bt:*default-special-bindings*
[02:08:55] <pjb> recordgroovy: but note that dynamic variables are specifically designed to have this behavior, of having their binding visible by all the functions called DURING their bindings.  If you don't want that, then you don't want a dynamic variable.
[02:09:30] <pjb> recordgroovy: if the cl-json library didn't want that, then they would have used a global lexical variable (which can be implemented using define-symbol-macro, which is a global lexical binding).
[02:09:58] <recordgroovy> right, got it
[02:10:14] <pjb> recordgroovy: similarly for your own functions in packages A and B. You could use lexical variables to hold the different values, and bind json:*json-output* just around the calls to json:functions
[02:11:20] <pjb> recordgroovy: also the lexical aspect is not necessary, you could just have global (dynamic) variables in A and in B, and  bind json:*json-output* just around the calls to json:functions.
[02:12:30] <pjb> (defvar a:*out* 'some-output) (defvar b:*out* 'some-other-output)  (defun a:foo () (let ((json:*json-output* a:*out*)) (b:bar) (json:stuff)))  (defun b:bar () (let ((json:*json-output* b:*out*)) (json:stuff)))
[02:13:06] <pjb> so even if you can some function of package B in functions of package A, since you rebind *json-output* each time you call json:stuff, you can have a different output in each package.
[02:13:56] <pjb> note that usually (well designed) libraries will have an optional or key parameter for such stream or output parameter, so you can write directly (json:stuff :output a:*out*) instead of binding json:*json-output*.
[02:14:26] <pjb> (the default value for this :output parameter being json:*json-output*)
[02:15:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[02:17:42] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[02:20:28] *** Quits: mjoerg (~user@user/mjoerg) (Remote host closed the connection)
[02:29:29] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 248 seconds)
[02:29:49] *** Quits: john__ (~john@dynamic-077-004-091-194.77.4.pool.telefonica.de) (Ping timeout: 252 seconds)
[02:30:04] *** Joins: makomo (~makomo@user/makomo)
[02:37:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:37:27] *** Joins: john__ (~john@dynamic-077-004-091-194.77.4.pool.telefonica.de)
[02:44:47] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502) (Ping timeout: 240 seconds)
[02:45:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[02:49:07] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:cb9:2d96:4da8:aca7) (Ping timeout: 240 seconds)
[02:49:27] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 250 seconds)
[02:50:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[02:51:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:52:22] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[02:54:02] *** Parts: joe_mad (~user@195.53.115.108) (ERC (IRC client for Emacs 26.3))
[02:56:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[02:56:40] *** Quits: psycomic (~psycomic@2a01:e0a:18:d0a0:722:ca5a:b7d:38dd) (Ping timeout: 240 seconds)
[02:58:49] *** Joins: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net)
[02:59:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:08:47] *** Quits: john__ (~john@dynamic-077-004-091-194.77.4.pool.telefonica.de) (Ping timeout: 240 seconds)
[03:10:10] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:18:05] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[03:24:33] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 250 seconds)
[03:39:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[03:40:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:40:38] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Remote host closed the connection)
[03:41:26] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:41:47] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[03:43:16] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 268 seconds)
[03:44:09] *** Joins: edgar-rft (~edgar-rft@hsi-kbw-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[03:45:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[04:08:43] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:19:16] *** Quits: edgar-rft (~edgar-rft@hsi-kbw-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 252 seconds)
[04:19:51] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[04:21:17] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[04:21:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:29:10] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[04:35:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[04:37:03] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:45:03] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[04:47:58] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[04:49:19] *** Joins: selwyn (~selwyn@user/selwyn)
[04:52:05] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[04:52:29] *** Joins: selwyn (~selwyn@user/selwyn)
[05:06:26] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[05:06:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[05:07:40] *** Lord_of_Life_ is now known as Lord_of_Life
[05:09:18] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 250 seconds)
[05:22:56] *** Quits: PinealGlandOptic (~PinealGla@178-133-189-55.mobile.vf-ua.net) (Quit: leaving)
[05:26:33] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[05:26:42] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[05:29:28] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[05:29:41] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[05:43:48] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[06:33:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:34:12] *** Joins: srhm (~srhm@user/srhm)
[06:36:19] *** Joins: robin (~robin@user/terpri)
[06:38:41] *** Quits: prxq (~quassel@x4db665e2.dyn.telefonica.de) (Ping timeout: 250 seconds)
[06:38:52] *** Joins: prxq (~quassel@x4db96c01.dyn.telefonica.de)
[06:41:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[06:42:16] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[06:52:40] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[07:10:34] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[07:11:18] *** Joins: srhm (~srhm@user/srhm)
[07:16:00] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[07:16:36] *** Joins: srhm (~srhm@user/srhm)
[07:26:24] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[07:27:14] *** Joins: srhm (~srhm@user/srhm)
[07:30:43] *** Quits: Guest29 (~Guest29@72.71.222.77) (Quit: Client closed)
[07:31:00] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 250 seconds)
[07:31:38] <beach> Good morning everyone!
[07:47:22] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[07:47:55] *** Joins: srhm (~srhm@user/srhm)
[07:51:29] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[07:54:05] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[07:54:10] <lotuseater> Good morning beach :)
[08:04:55] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[08:10:17] <lotuseater> Yesterday I looked at some code of the SICL LOOP module and realized it makes totally sense defining classes for the various specifiers. Before I just had seen and worked through the possible LOOP subset implementation given in the Norvig PAIP book.
[08:13:46] <beach> I guess using standard classes just comes natural to me.
[08:14:24] <beach> But of course, this technique creates trouble for an implementation who wants to use SICL loop natively.
[08:14:46] <lotuseater> It's also good for potential extensibility, or not? You said to me once that's one of the goals.
[08:14:54] <beach> Because CLOS must then "exist" before the LOOP module can be defined.
[08:14:59] *** Joins: easye (~user@oxi.slack.net)
[08:15:05] <beach> Yes, that makes it extensible.
[08:15:59] <lotuseater> Oh right, CLOS makes use of LOOP to come to existence... (a next hint I should keep on working through AMOP book)
[08:16:47] <lotuseater> Now I get what you wrote in one of the SICL papers with "certain things must exist in before to define themselves".
[08:16:57] <beach> But this is a problem only for people who think of bootstrapping a Common Lisp system by adding modules to a simple base system.
[08:17:03] <lotuseater> of course not exactly this wording
[08:17:28] <beach> Since my brain is too small to think this way, I decided to do it differently.
[08:18:21] <lotuseater> You are very modest with yourself. :)
[08:19:02] <beach> It's the reality.  I am definitely not as smart as some people might think I am.  So I have to find ways to compensate.
[08:19:30] <lotuseater> I thought about how it would be started if one only has the 25 special operators + Spec + the most needful readmacros, minimum for #\( and #\).
[08:20:22] <Bike> people tend to think about these things in terms of special operators but i strongly feel that that is not correct
[08:20:30] <beach> lotuseater: Yeah, good luck with that.  I found I made dozens of mistake in each incremental module to add when I was thinking like that.
[08:20:58] <Bike> like besides the bootstrapping stuff beach is concerned with, special operators don't actually form a basis. they're just stuff the compiler can handle specially. they don't include things like cons/car/cdr that are implicitly used by any sane implementation of the operators anyway.
[08:21:07] <Bike> how do you do progv without being able to navigate lists?
[08:21:16] *** Joins: semz (~none@user/semz)
[08:21:20] <lotuseater> I didn't mean to think in that. :)
[08:21:25] <beach> Bike: Well put.
[08:22:00] <lotuseater> beach: No don't worry, I know that wouldn't work out tried by me.
[08:22:51] <beach> lotuseater: This incremental way of doing bootstrapping requires each module to use only the subset of the language defined by previous modules.  People with better memories than mine can remember which subset to use.  But I can't.
[08:23:22] <lotuseater> PROGV is one of these standard symbols I never used till today directly.
[08:24:47] <lotuseater> But OK, if one doesn't call it a CL impl, other subsets for self-educational purposes could also do fine.
[08:26:11] <Bike> one interesting mini thing i've run into is i have done some work on an implementation of another lisp, and the guy who defined it defines all the operators one at a time like you would for bootstrapping
[08:26:33] <Bike> but i found that if instead you take letrec as primitive, you can define everything much more clearly since operators can be defined in terms of each other no problem
[08:26:35] *** Joins: Oladon (~olad@98.43.81.226)
[08:26:56] <moon-child> beach: I think focusing on 'smartness' is in general a distraction, and certainly cannot be linearly quantifiable.  Certainly, I don't know how to compare the 'smartness' of someone who figures out how to implement lisp incrementally vs someone who figures out how to bootstrap it using the entire language
[08:27:07] <moon-child> *certainly it cannot...
[08:28:18] <lotuseater> or to people of other disciplines :)
[08:29:34] <lotuseater> There is this quote "You won't judge a fish by its talent to climb on trees."
[08:30:29] <beach> moon-child: Sure.  But I see no better way to describe how I feel when everybody around me seem to be able to do something that I can't.
[08:32:17] <moon-child> lotuseater: I think a more pertinent question is: when is it interesting to make value judgements _at all_?  To a fish able to climb trees I might ascribe value which I wouldn't to another fish.  However is it sensible to judge poorly a fish who fails to climb a tree?  I think not.  I think rather a fish should focus on being as good as it can, in whatever capacity it is able--whether that
[08:32:19] <moon-child> includes climbing trees or no
[08:33:06] <Bike> i dunno, once you've seen a pacific northwest tree octopus at work other fish do seem kind of inadequate
[08:34:18] <lotuseater> moon-child: It's mostly not, especially when judging kids in school for "you're not good in maths/sports/arts/musics etc". Everybody is different and focusing on the wrong things can destroy potential. And as nobody can do all alone people work together to achieve goals.
[08:34:52] <lotuseater> Bike: oh that sounds interesting :)
[08:35:18] <Bike> if you try to get them out of your tree with a stick they just take hold of it and thwack you. demoralizing.
[08:37:06] <lotuseater> Octopus are indeed fascinating. And hard to animate.
[08:38:32] <lotuseater> Oh it's actually an internet hoax. :D
[08:39:25] <hayley> Bike: I assume you saw one.
[08:40:10] * lotuseater checks if his inner ear babel fish is still alive and well.
[08:42:01] <Bike> more often you feel the pinecones they chuck than you see them
[08:45:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:46:05] <lotuseater> To get some more ontopic again, I also like those jelly fish who can "reprogram" themselves (their cells) as they run to live longer. Gives a feel this idea underlies a quite deeper intention.
[08:49:14] <moon-child> 'ontopic' hahha
[08:49:57] <moon-child> crispr has been advancing nicely
[08:49:58] <hayley> lotuseater: If you think about it, animals are just supervisor trees.
[08:50:26] <lotuseater> I don't know exactly what those are right know.
[08:50:28] <lotuseater> *now
[08:51:55] <lotuseater> Ah okay now from reading, I can guess what you mean.
[08:53:32] <lotuseater> So also this when a child process dies the supervisor process decides how to or if reanimate the other?
[08:53:45] <hayley> Something like that, yes.
[08:57:18] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[09:02:07] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[09:09:30] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[09:12:57] *** Quits: silasfox (~sbv@xdsl-87-78-57-101.nc.de) (Ping timeout: 250 seconds)
[09:17:10] *** Quits: d4ryus1 (~d4ryus@ppp-188-174-25-87.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[09:27:58] *** Quits: cheers (user@2600:3c00::f03c:91ff:fe1c:3c39) (Quit: cheers)
[09:28:24] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:30:22] *** Joins: d4ryus1 (~d4ryus@ppp-188-174-25-87.dynamic.mnet-online.de)
[09:43:27] *** Quits: semz (~none@user/semz) (Ping timeout: 240 seconds)
[09:44:02] *** Quits: didi (~user@user/didi) (Ping timeout: 250 seconds)
[09:49:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[09:49:53] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:56:04] *** Joins: semz (~none@user/semz)
[10:04:50] *** Quits: v88m (~Xiro@109.252.61.156) (Ping timeout: 250 seconds)
[10:05:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:06:51] *** Joins: v88m (~Xiro@109.252.61.156)
[10:09:47] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 240 seconds)
[10:18:49] *** Quits: ahlk (~user@2600:1700:31c0:3a10::48) (Ping timeout: 250 seconds)
[10:43:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[10:52:47] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[10:53:26] *** Joins: amb007 (~a_bakic@222.135.22.93.rev.sfr.net)
[11:07:22] *** Joins: livoreno (~livoreno@user/notzmv)
[11:13:55] *** Joins: shka (~herr@109.231.62.239)
[11:23:09] *** Joins: Cymew (~ante@host-78-79-172-54.mobileonline.telia.com)
[11:27:47] *** Quits: amb007 (~a_bakic@222.135.22.93.rev.sfr.net) (Ping timeout: 240 seconds)
[11:28:50] *** Joins: amb007 (~a_bakic@169.133.22.93.rev.sfr.net)
[11:32:57] *** Joins: rowanthorpe (~Thunderbi@ppp005054207247.access.hol.gr)
[11:35:43] *** Joins: rowanthorpe1 (~Thunderbi@ppp005054207247.access.hol.gr)
[11:37:07] *** Quits: rowanthorpe (~Thunderbi@ppp005054207247.access.hol.gr) (Ping timeout: 240 seconds)
[11:42:06] *** Quits: amb007 (~a_bakic@169.133.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:42:45] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:45:33] *** Joins: psycomic (~psycomic@2a01:e0a:18:d0a0:c5a0:f38b:af85:e557)
[11:52:42] *** Joins: pve (~pve@37-33-88-111.bb.dnainternet.fi)
[12:02:27] *** Quits: psycomic (~psycomic@2a01:e0a:18:d0a0:c5a0:f38b:af85:e557) (Ping timeout: 240 seconds)
[12:03:23] *** Joins: john__ (~john@dynamic-095-115-118-051.95.115.pool.telefonica.de)
[12:04:59] *** Joins: Krystof (~user@81.174.155.115)
[12:09:54] *** Joins: selwyn (~selwyn@user/selwyn)
[12:12:16] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[12:13:31] *** Joins: aeth (~aeth@user/aeth)
[12:16:39] *** Joins: psycomic (~psycomic@2a01:e0a:18:d0a0:562c:79fa:e567:949)
[12:18:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:38:01] *** Quits: john__ (~john@dynamic-095-115-118-051.95.115.pool.telefonica.de) (Ping timeout: 248 seconds)
[12:44:03] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:47:06] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:48:15] *** Quits: rowanthorpe1 (~Thunderbi@ppp005054207247.access.hol.gr) (Remote host closed the connection)
[12:50:44] *** Joins: rowanthorpe (~Thunderbi@ppp005054207247.access.hol.gr)
[12:51:29] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[12:52:08] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[12:52:20] *** Joins: elf_fortres (~elf_fortr@adsl-72-50-4-46.prtc.net)
[12:52:39] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 250 seconds)
[12:52:53] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[12:58:34] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:59:51] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:00:00] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502)
[13:02:57] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:03:40] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:05:41] *** Quits: andreyorst (~andreyors@2.92.124.61) (Quit: WeeChat 3.2)
[13:06:17] *** Joins: andreyorst (~andreyors@2.92.124.61)
[13:07:34] *** Quits: elf_fortres (~elf_fortr@adsl-72-50-4-46.prtc.net) (Ping timeout: 246 seconds)
[13:14:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:15:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:20:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[13:21:14] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Quit: Lost terminal)
[13:21:54] *** Quits: psycomic (~psycomic@2a01:e0a:18:d0a0:562c:79fa:e567:949) (Remote host closed the connection)
[13:22:14] *** Joins: psycomic (~psycomic@2a01:e0a:18:d0a0:36fa:e0c1:5915:37cb)
[13:35:04] *** Joins: makomo (~makomo@user/makomo)
[13:36:51] *** Quits: psycomic (~psycomic@2a01:e0a:18:d0a0:36fa:e0c1:5915:37cb) (Ping timeout: 250 seconds)
[13:43:40] *** Joins: okflo (~user@188-23-113-20.adsl.highway.telekom.at)
[13:43:47] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502) (Remote host closed the connection)
[13:44:28] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502)
[13:45:21] *** Joins: psycomic (~psycomic@2a01:e0a:18:d0a0:6d97:c96:241a:4569)
[13:49:18] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[13:49:35] *** Joins: rain3 (~rain3___@79.115.250.43)
[14:00:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:03:30] *** Joins: aeth_ (~aeth@user/aeth)
[14:05:07] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[14:18:05] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:21:27] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[14:24:09] *** Quits: v88m (~Xiro@109.252.61.156) (Remote host closed the connection)
[14:24:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:26:15] *** Quits: Cymew (~ante@host-78-79-172-54.mobileonline.telia.com) (Ping timeout: 250 seconds)
[14:26:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[14:32:58] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[14:34:29] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 250 seconds)
[14:35:30] *** Joins: amb007 (~a_bakic@169.133.22.93.rev.sfr.net)
[14:43:49] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:46:13] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[14:48:58] *** Quits: gpiero (~quassel@camale.rm-rf.it) (Quit: Quitting...)
[14:52:01] *** Joins: gpiero (~quassel@camale.rm-rf.it)
[15:01:38] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[15:01:51] *** Quits: conjunctive (sid433686@brockwell.irccloud.com) ()
[15:02:06] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[15:04:17] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[15:04:30] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[15:19:29] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:31:12] *** Quits: amb007 (~a_bakic@169.133.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:33:34] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[15:34:57] *** Joins: joe_mad (~user@195.53.115.108)
[15:38:17] *** Joins: cosimone (~user@93-44-187-127.ip98.fastwebnet.it)
[15:48:13] *** Joins: didi (~user@user/didi)
[15:50:05] *** Joins: Cymew (~ante@host-78-79-172-88.mobileonline.telia.com)
[15:53:07] *** Joins: nature (~nature@mail.blazebone.com)
[15:57:26] *** Parts: okflo (~user@188-23-113-20.adsl.highway.telekom.at) (Killed buffer)
[15:59:37] *** Quits: cosimone (~user@93-44-187-127.ip98.fastwebnet.it) (Ping timeout: 248 seconds)
[16:15:18] *** Joins: okflo_ (~okflo@lisa.diesenbacher.net)
[16:22:05] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[16:23:07] *** Quits: psycomic (~psycomic@2a01:e0a:18:d0a0:6d97:c96:241a:4569) (Remote host closed the connection)
[16:28:15] *** Quits: nature (~nature@mail.blazebone.com) (Quit: leaving)
[16:28:31] *** Joins: nature (~nature@mail.blazebone.com)
[16:28:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:29:23] *** Joins: psycomic (~psycomic@2a01:e0a:18:d0a0:6d97:c96:241a:4569)
[16:35:43] *** Joins: Skyfire (~pyon@user/pyon)
[16:39:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[16:45:06] *** Quits: okflo_ (~okflo@lisa.diesenbacher.net) (Quit: ZNC 1.6.3+deb1ubuntu0.2 - http://znc.in)
[16:51:27] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 240 seconds)
[16:57:17] *** Joins: silasfox (~silasfox@62.159.27.1)
[17:05:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:16:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:18:20] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[17:30:01] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[17:30:01] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[17:31:17] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[17:31:53] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:32:04] *** Joins: Bike (~Glossina@71.69.170.70)
[17:32:04] *** ChanServ sets mode: +o Bike
[17:33:06] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[17:34:20] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[17:35:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[17:38:02] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:38:43] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:46:19] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[17:49:01] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[17:49:32] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[17:49:53] <lisp123> Anybody have experience of transferring data from a CL image to Emacs via swank?
[17:50:10] <lisp123> Seems like I can transfer across list data, but structures seem unlikely
[17:50:21] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 250 seconds)
[17:50:29] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[17:51:48] <flip214> lisp123: everything that can be serialized (eg to a string) works -- you could use JSON, XML, YAML, ...
[17:52:04] *** Joins: hendursa1 (~weechat@user/hendursaga)
[17:52:20] <lisp123> flip214: Thanks, let me try JSON
[17:52:25] <flip214> S-expressions cannot reliably distinguish between key/value structures (alist, plist, hash-table) and simple lists, so they're not that well suited
[17:52:40] <lisp123> so basically I transfer a string
[17:52:50] <lisp123> and then convert it back on the Emacs side>
[17:52:51] <lisp123> ?
[17:52:58] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[17:53:08] *** Quits: rowanthorpe (~Thunderbi@ppp005054207247.access.hol.gr) (Quit: rowanthorpe)
[17:53:15] <flip214> one possible way, right.
[17:53:43] <lisp123> Any other way? (just because you said 'one' :)
[17:53:48] <flip214> the swank protocol has a maximum size for messages, though - 6 hex digits, I believe. So you might need a different communication.
[17:53:49] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[17:54:13] *** Joins: amb007 (~a_bakic@169.133.22.93.rev.sfr.net)
[17:54:16] <flip214> well, have a plain TCP port, or HTTP, or a file, shared memory, print/scan, QR code and a camera, ...
[17:54:30] <flip214> (https://hackaday.com/2016/11/22/ip-over-qr-codes/  ;)
[17:54:36] <lisp123> lol
[17:54:42] <lisp123> Thanks, that's helpful
[17:54:52] <lisp123> I'll consider writing to file
[17:55:23] <flip214> then you can pass the filename over and read that file
[17:55:33] <lisp123> Yep
[18:04:42] <hexology> there's no spec for swank right? it's just "whatever slime does"?
[18:05:02] *** Joins: lisp123_ (~lisp123@194.5.53.22)
[18:06:02] *** Joins: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at)
[18:06:16] <flip214> hexology: ask #slime ;)
[18:06:27] <hexology> i didn't know they had a channel! thank you
[18:07:27] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502) (Ping timeout: 240 seconds)
[18:08:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[18:09:46] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Quit: ZNC 1.8.2 - https://znc.in)
[18:10:48] *** aeth_ is now known as aeth
[18:12:57] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:17:38] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[18:28:12] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[18:29:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:30:05] *** Joins: ahlk (~user@2600:1700:31c0:3a10::48)
[18:32:19] *** Quits: lisp123_ (~lisp123@194.5.53.22) (Ping timeout: 252 seconds)
[18:32:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:34:37] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-253.prtc.net)
[18:36:29] *** Joins: hafat (~hafat@159.146.87.68)
[18:37:46] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:42:22] *** Joins: makomo (~makomo@user/makomo)
[18:45:29] *** Quits: amb007 (~a_bakic@169.133.22.93.rev.sfr.net) (Ping timeout: 248 seconds)
[18:46:29] *** Joins: amb007 (~a_bakic@241.15.23.93.rev.sfr.net)
[18:55:51] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[18:57:38] *** Quits: amb007 (~a_bakic@241.15.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[19:02:01] *** Quits: hafat (~hafat@159.146.87.68) (Remote host closed the connection)
[19:02:29] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[19:02:39] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[19:06:01] *** Joins: Oladon (~olad@98.43.81.226)
[19:08:31] <lisp123> Is there a way to (in-package :my-package) within REPL, but as part of the .asd file / load process?
[19:10:41] <Bike> does your file not have an in-package?
[19:10:48] *** Joins: srhm (~srhm@user/srhm)
[19:11:17] <lisp123> Yes, that part is fine. I will then call all the functions within REPL
[19:11:26] <lisp123> so I want the REPL to switch to that package
[19:11:34] <lisp123> And typing is a laborious affair..
[19:11:40] <Bike> you can do in-package in the repl?
[19:11:49] <Bike> oh, do you mean you want asd to do in-package for you?
[19:11:52] <lisp123> Yes :)
[19:12:19] <Bike> you could maybe whip something up with a perform method, but generally no there is no way to do that
[19:13:18] <lisp123> Hmm, I have an idea, let me test it out
[19:14:07] <Bike> as it happens, cl:load is specifically defined to make this impossible, because having a side effect like that makes modularity harder
[19:16:06] <lisp123> Ehhh didn't work, but I was hoping it would: (swank:eval-in-emacs `(slime-eval (in-package :my-package))
[19:17:07] <Bike> why involve slime at all...?
[19:17:33] <lisp123> I was hoping the slime command would occur in the REPL
[19:19:13] <lisp123> I got close
[19:20:05] <lisp123> "Synchronous Lisp Evaluation aborted" + in-package is not defined in swank-io-package...well actually thats not really close
[19:20:54] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[19:21:11] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:21:18] *** Joins: srhm (~srhm@user/srhm)
[19:23:07] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-253.prtc.net) (Ping timeout: 246 seconds)
[19:23:48] <lisp123> Bike: would this work?
[19:24:14] <lisp123> https://plaster.tymoon.eu/view/2608#2608
[19:24:34] *** Quits: Cymew (~ante@host-78-79-172-88.mobileonline.telia.com) (Ping timeout: 252 seconds)
[19:24:43] <Bike> uh
[19:24:50] *** Joins: nature (~nature@mail.blazebone.com)
[19:25:01] <Bike> i don't know what tpl is. some implementation specific thing?
[19:26:10] <lisp123> Dunno, when I first started learning lisp I used some guide. I realised that always set me inside package CS325, so I found what I think that code is...I will play around and should be able to figure it out. There's nothing too dangerous about that code is there though?
[19:30:29] <lisp123> Okay looks like that code hacked things onto the SBCL initialisation, so ignore all of the above
[19:31:30] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[19:32:11] *** Joins: srhm (~srhm@user/srhm)
[19:32:26] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[19:34:36] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:46:03] <pve> lisp123: try (swank:eval-in-emacs '(slime-repl-set-package "MY-PACKAGE"))
[19:48:11] <pve> lisp123: and maybe also (swank:eval-in-emacs `(slime-set-default-directory "/path/to/my-dir/")) if you're dealing with files
[19:49:24] <lisp123> pve: tried the first, it crashes
[19:49:37] <lisp123> I guess because the file hasn't fully loaded yet
[19:49:46] <lisp123> q
[19:50:14] <pve> lisp123: the package should exist before calling that, yes
[19:50:33] <lisp123> Bike: so apparently TPL is an allegro package (just for FYI)
[19:51:39] <lisp123> pve: yes, I guess it will be difficult to set the REPL to the package while loading it via ASDF (note that I put the code after the packages.lisp file is run, but as Bike mentioned there might be some locks in place or some sort of circularity)
[19:51:53] <pve> lisp123: anyway, that's what i use in my "session" files.. first I load my system, then set some parameters and lastly set the REPL package and directory
[19:52:13] <lisp123> pve: ah I get you
[19:52:38] <pve> lisp123: i.e. I have a file called "session.lisp" that I load
[19:52:59] <pve> with basically one session per project
[19:53:30] <pve> (actually some projects have several session files)
[19:53:46] <lisp123> pve: thanks!
[19:53:48] <lisp123> Got it working
[19:54:04] <pve> no idea if this practice is a good idea
[19:54:09] <aeth> I just backwards search my SLIME REPL history instead of loading a session.lisp
[19:54:14] <aeth> Kind of works
[19:54:18] <lisp123> So the final trick was to write some elisp : (progn (asdf:load-system "my-package") (slime-rel-set-package "my-package"))
[19:54:40] <aeth> Another major distinction from what I do vs what pve does is that I run tests after loading.
[19:54:59] <lisp123> (and why stop there...I'll just add M-x slime to it first... and bind it to a hotkey... :D)
[19:55:09] <pve> aeth: I do too!
[19:55:19] <pve> run tests in my session file, I mean
[19:56:27] <pve> also I define some convenience symbol-macros and functions in the session file
[19:56:57] <lisp123> pve: nice, thats a good workflow
[19:57:04] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[19:58:14] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[19:58:17] <pve> lisp123: and I load the session files conveniently with an elisp function "pve-load-this-lisp-file" (i.e. the session file I'm currently looking at in the buffer)
[19:58:49] <lisp123> Nice
[19:58:59] <pve> which starts a fresh slime and loads that session
[19:59:25] <lisp123> a fresh slime?
[19:59:34] <lisp123> so you load multiple inferior lisps?
[20:00:41] <pve> no, I mean I can't do C-c C-l if SLIME isn't running, so first it starts SLIME, then loads the file
[20:01:36] <pve> but I'm pretty lazy, most people would just start slime normally and then do C-c C-l :)
[20:03:53] *** Quits: silasfox (~silasfox@62.159.27.1) (Ping timeout: 248 seconds)
[20:04:44] <pve> oh it was actually called "pve-slime-and-load-this-file"
[20:06:33] *** Parts: joe_mad (~user@195.53.115.108) (ERC (IRC client for Emacs 27.2))
[20:07:31] <lisp123> Ah yes, that makes sense :)
[20:29:49] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[20:33:06] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-198.prtc.net)
[20:39:24] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[20:39:48] *** Joins: srhm (~srhm@user/srhm)
[20:39:51] *** Joins: tyson2 (~user@cpea84e3fd00d93-cma84e3fd00d90.sdns.net.rogers.com)
[20:46:17] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[20:47:29] *** Joins: lisp123_ (~lisp123@194.5.53.25)
[20:50:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[21:06:09] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:10:56] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[21:11:51] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[21:14:01] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 252 seconds)
[21:15:34] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[21:26:10] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-198.prtc.net) (Quit: Client closed)
[21:28:06] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[21:28:32] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[21:31:44] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[21:33:04] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:34:48] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[21:34:48] *** ChanServ sets mode: +o MichaelRaskin
[21:34:59] *** Parts: didi (~user@user/didi) (O bella ciao bella ciao bella ciao, ciao, ciao.)
[21:36:33] *** Joins: tyson2` (~user@cpea84e3fd00d93-cma84e3fd00d90.sdns.net.rogers.com)
[21:39:54] *** Quits: tyson2 (~user@cpea84e3fd00d93-cma84e3fd00d90.sdns.net.rogers.com) (Ping timeout: 250 seconds)
[21:54:28] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:16:59] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:22:41] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:25:39] *** Joins: asarch (~asarch@2806:10ae:7:afc6:cfb6:d543:1add:2626)
[22:26:30] <asarch> How could I easily count how many 9 are there from 1 to 100?
[22:27:51] <lisp123_> asarch: use the function mod for example
[22:27:55] <lisp123_> But I won't show you how :)
[22:28:20] <asarch> Great!
[22:29:12] <lisp123_> Another easier way
[22:29:34] <lisp123_> (more efficient) would be to start at the number 9, keeping adding 9 (keeping count) and exit your loop once you hit 100
[22:29:58] <asarch> Considering that '90', '91', '92', â€¦ also count
[22:30:10] <lisp123_> Oh I see
[22:30:33] <lisp123_> I have a solution for that, but better you try find it, its not too hard :)
[22:30:59] <lisp123_> (hint: think of converting numbers to strings and checking)
[22:32:35] <asarch> It's a nice exercise, isn't it?
[22:32:46] <lisp123_> I hope its not from a book ;)
[22:34:37] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[22:34:57] <asarch> Actually, a friend of mine has sleep problems and she told me that last night she counted 20 9s so, I was wondering actually if Common Lisp would have an algorithm for this kind of problems
[22:35:04] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[22:35:26] *** Joins: silasfox (~sbv@xdsl-87-78-57-101.nc.de)
[22:37:06] *** Quits: tyson2` (~user@cpea84e3fd00d93-cma84e3fd00d90.sdns.net.rogers.com) (Ping timeout: 250 seconds)
[22:47:48] <lisp123_> Did you get an answer in the end?
[22:48:10] <lisp123_> I got 19 based on my mental calc just now
[22:54:16] *** Quits: Fade (fade@outrider.deepsky.com) (Remote host closed the connection)
[23:01:56] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:02:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[23:03:55] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:03:57] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:04:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:05:17] *** Quits: lisp123_ (~lisp123@194.5.53.25) (Quit: Leaving...)
[23:08:21] <asarch> I am thinking about how to resolve it using Squeak's collections
[23:09:31] <asarch> (loop for number from 1 to 100 do (let ((count 0) (value (format nil "~s" number"))) â€¦)
[23:10:19] <asarch> However, loop also has its count and its conditional to do the job
[23:10:30] <asarch> But I don't how to use them yet :-P
[23:10:52] <White_Flame> (count #\9 (format nil ...))
[23:11:28] <White_Flame> so you'd use loop's summation thing
[23:12:49] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 252 seconds)
[23:13:37] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[23:14:18] <White_Flame> 65 chars to get a result of 20 for me
[23:15:12] <White_Flame> ah, 55 chars now
[23:15:33] <White_Flame> is there a shorter way of rendering a number to a string than format nil?
[23:16:33] *** Joins: john__ (~john@dynamic-095-115-118-051.95.115.pool.telefonica.de)
[23:16:50] <White_Flame> anyway, spoiler: (loop for x to 100 sum (count #\9 (format nil "~a" x)))
[23:18:11] <pjb> ~10R ?
[23:18:37] <pjb> (let ((*print-base* 2)) (loop for x to 100 sum (count #\9 (format nil "~a" x)))) #| --> 0 |#
[23:18:46] <pjb> (let ((*print-base* 2)) (loop for x to 100 sum (count #\9 (format nil "~10R" x)))) #| --> 20 |#
[23:19:56] <White_Flame> for a code golf, defaults apply
[23:20:04] <White_Flame> and obviously are exploited
[23:21:25] <White_Flame> of course, for real golfing, eliminating whitespace would be the next step: (loop for x to 100 sum(count #\9(format nil"~a"x)))
[23:23:47] <pjb> it could be more efficient to do it like this: (count #\9 (with-output-to-string (out) (loop for x to 100 do (princ x out)))) #| --> 20 |#
[23:24:28] <Bike> the number of 9 digits below 10^m is (* m (expt (1- m))), even shorter
[23:24:34] <Bike> expt 10 (1- m)
[23:32:08] *** Joins: v88m (~Xiro@109.252.61.156)
[23:37:37] <asarch> Wow! You are awesome!
[23:44:07] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[23:46:22] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:47:10] *** Quits: rain3 (~rain3___@79.115.250.43) (Ping timeout: 240 seconds)
[23:49:47] *** Joins: cosimone (~user@93-44-187-127.ip98.fastwebnet.it)
[23:50:54] *** Joins: nature (~nature@mail.blazebone.com)
[23:51:19] *** john__ is now known as gaqwas
[23:52:03] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:55:37] *** Quits: pve (~pve@37-33-88-111.bb.dnainternet.fi) (Quit: leaving)
[23:57:09] *** Quits: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at) (Quit: WeeChat 3.2)
[23:57:51] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:59:08] *** Joins: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at)
