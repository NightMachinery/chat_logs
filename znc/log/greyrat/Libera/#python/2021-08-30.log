[00:00:35] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[00:01:03] *** Joins: notepad (~notepad@129.159.46.243)
[00:01:04] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[00:03:09] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:fd3b:470a:6a67:7e22)
[00:05:29] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 250 seconds)
[00:06:26] *** Parts: shla (~root@user/shla) (The Lounge - https://thelounge.chat)
[00:06:54] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[00:07:15] *** Quits: cn80 (~cn80@173.34.80.53) (Quit: Leaving)
[00:08:13] *** Joins: hanaan (~naan@user/naan)
[00:08:35] *** Joins: shasta_ (~shasta_@2601:586:4000:c9e0::7b45)
[00:08:42] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[00:10:22] *** Quits: shasta_ (~shasta_@2601:586:4000:c9e0::7b45) (Client Quit)
[00:10:56] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[00:11:10] *** Quits: Naan (~naan@user/naan) (Ping timeout: 240 seconds)
[00:11:20] *** Quits: RBEL (~jigubigul@2001:1c06:19c3:7000:6d2b:7ac8:4670:a6fb) (Quit: WeeChat 3.2)
[00:12:08] <Samian> what do you guys think about BLACK format?
[00:12:36] <Samian> I hate it
[00:12:56] <lxer> then dont use it
[00:13:28] *** Quits: mei (~mei@user/mei) (Ping timeout: 252 seconds)
[00:13:41] <Samian> it'll do stuff like torch.clamp( [next line] p0, min=self.loss_threshold, max=(1.0 - self.loss_threshold) [next line] )
[00:13:50] <jinsun> I like it, use it all the tiome (or actually sometimes I don't like it, but it is easy to rewrite the code such that black will format nicely, instead of formatting myself)
[00:13:52] <Samian> [next line] == next line
[00:14:15] <nedbat> Samian: how would you format that line?
[00:14:27] *** Joins: n0mad (~n0mad@2601:586:4000:c9e0::7b45)
[00:14:29] <Samian> one line?
[00:14:33] <grym> Samian: it takes about a week to stop caring
[00:14:39] <Samian> I'll see stuff like:
[00:14:43] <Samian> print(
[00:14:45] <nedbat> Samian: just tell black your preferred line limit, and it will keep it on one line
[00:14:47] <Samian> "some message"
[00:14:49] <Samian> )
[00:14:54] <grym> and yeah, i use -l 119
[00:15:02] <nedbat> Samian: that's only if "some message" is really long
[00:15:15] <Samian> nedbat  does it do that for comments too?
[00:15:27] <nedbat> Samian: i don't know what it does for comments
[00:15:27] <Samian> I don't recall autoformat fixing my paragraph-long comments
[00:15:30] <grym> black doesn't touch comments
[00:16:02] <Samian> yeah that's what I'd like autoformatted. I like explaining my code in the actual source code. I'll often write paragraph of english in the source code
[00:16:36] <lxer> it is possible to disable formatting comments
[00:17:10] <grym> lxer: no, other way around: https://github.com/psf/black/issues/181
[00:17:19] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[00:17:36] <Samian> https://imgur.com/a/CTT791G
[00:17:42] <Samian> that's an example of my comments
[00:18:05] <grym> Samian: as an example of matters of taste: i do not enjoy that code
[00:18:23] <Samian> grym  what I just linked?
[00:18:27] <grym> Samian: yes
[00:18:39] <Samian> what would you prefer? It's mostly comments, not code
[00:18:43] <grym> not-that
[00:18:44] <grym> :)
[00:18:53] <jinsun> comments don't really need thinking too much, just keep a vertical line in your editor, and press enter just before you reach it
[00:19:14] <Samian> grym  I wrote that because it took me a while to figure what's going on. I thought to save the next person some time
[00:19:15] <grym> jinsun: or M-q, if you have an especially civilised editor :)
[00:19:31] *** Quits: mokulus (~mokulus@user/mokulus) (Ping timeout: 252 seconds)
[00:19:42] <grym> Samian: now i can't see the whole function at once and i also have to read two things and decide if they still agree with each other.  i generally find it more work
[00:20:08] <jinsun> grym: emacs?
[00:20:16] <grym> Samian: i get the impulse, and sometimes it's necessary, but it's not my default
[00:20:19] <grym> jinsun: indeed
[00:20:34] <Samian> grym  the original code is messed up. I'm working with what I inherited
[00:20:40] <Samian> here's master HEAD https://raw.githubusercontent.com/facebookresearch/dlrm/main/dlrm_s_pytorch.py
[00:20:49] <Samian> search for def run()
[00:21:25] <Samian> it's a 1000+ line function.
[00:21:34] <deniska> Python is "easier to ask for forgiveness" kind of language, and comments are the place where you do that
[00:21:40] *** Quits: aman (aman@user/aman) (Ping timeout: 240 seconds)
[00:21:45] <jinsun> grym: I want to learn emacs, it has many cool  extensions, but those unintuitive shortcuts kill me
[00:21:57] <grym> jinsun: rebind them
[00:21:58] <lxer> Samian: protip: docopts
[00:24:26] <Samian> lxer  I never heard of docopts before
[00:24:39] <Samian> are you talking about this? https://awesomelists.net/82-c/2315-CLI/13558-docopt-docopt.cpp
[00:25:10] <grym> Samian: perhaps lxer meant doctests
[00:25:11] <lxer> yes, http://docopt.org/ .
[00:25:27] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 240 seconds)
[00:25:27] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:25:28] <grym> lxer: it's very cute.  it's just been surpassed by the competition
[00:26:06] <lxer> like what ?
[00:26:10] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:2129:ddfa:934d:5a38) (Quit: Textual IRC Client: www.textualapp.com)
[00:26:20] <grym> typer and click
[00:27:47] <Samian> lxer I guess you prefer docopt to parseargs?
[00:28:14] <grym> Samian: you mean argparse ?
[00:28:17] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[00:28:18] <Samian> yes
[00:28:22] <Samian> argparse
[00:29:20] <Samian> hah talk about dyslexia
[00:30:12] <Samian> grym  do you have a github I can see?
[00:30:14] <lxer> grym, click and typer don't do the same.
[00:30:26] <grym> lxer: they are argparsers
[00:30:30] <grym> so, yes, they do
[00:30:38] <lxer> yes, but very verbose
[00:30:54] <grym> and what is 50 lines of docstring if not verbose
[00:31:01] <lxer> 1 line.
[00:31:10] <grym> docopt is not one line...
[00:31:15] <grym> it is as long as your API
[00:31:25] <grym> that's how it works
[00:31:43] <lxer> ok.
[00:31:50] <grym> lxer: this is not verbose: https://tildegit.org/grym/oxo/src/branch/master/oxo/__main__.py
[00:32:10] *** Joins: czuk_cza (~mist@188.147.103.124.nat.umts.dynamic.t-mobile.pl)
[00:32:22] <grym> Samian: eh, not really
[00:32:40] <grym> i prefer not to doxx myself and also haven't moved much over to tildegit
[00:32:44] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[00:32:56] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:33:32] <Samian> grym  you seem to be ahead of the game in coding
[00:33:43] <Samian> I just wanted to see the master's code :-D
[00:33:55] *** Joins: lastshel1 (~lastshell@user/lastshell)
[00:33:56] <lxer> I like to have it all in one place, so it acts as documentation as well.
[00:34:08] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[00:34:09] *** Quits: nomic (~nomic@185.217.117.169) (Quit: Leaving)
[00:34:17] *** Quits: lastshell (~lastshell@user/lastshell) (Ping timeout: 248 seconds)
[00:34:39] <grym> lxer: i'd like docopt a lot more if he went whole hog, defined a DSL with a parser, and started permitting things like "parse args into a typed pydantic class" or something
[00:35:10] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[00:35:23] <grym> i like libraries that give me guarantees about input data, i dislike doing the busy work myself
[00:35:39] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[00:35:39] *** Quits: lastshel1 (~lastshell@user/lastshell) (Client Quit)
[00:36:20] *** Quits: Akuli (~Akuli@87-94-111-87.bb.dnainternet.fi) (Quit: Leaving)
[00:36:41] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 250 seconds)
[00:36:55] <lxer> i have no idea what that means
[00:36:57] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 248 seconds)
[00:37:38] <jinsun> so in docopt you are supposed to write the help manually yourself and you automatically get the parser? kinda like the opposite of argparse where you describe the parser and get the help automatically?
[00:37:49] <lxer> yes
[00:38:14] *** Quits: magla (~gelignite@55d4cf57.access.ecotel.net) (Quit: Stay safe!)
[00:38:22] <jinsun> so it is not good at all, my editor helps me a lot when writing python, it stops helping when I write strings
[00:38:41] *** Quits: shangxiao (~davids@124.182.71.141) (Quit: WeeChat 3.2)
[00:40:11] *** Joins: lastshell (~lastshell@user/lastshell)
[00:40:27] <grym> lxer: what i mean is this: by the time i reach https://tildegit.org/grym/oxo/src/branch/master/oxo/__main__.py#L17 , i know two things: i have a nonempty list containing Paths of things on disk that exist and are files, and i have a string called base_url.  my argument parser guarantees it.
[00:40:33] <grym> lxer: docopt cannot do this
[00:41:21] <grym> (but i wish it could!)
[00:42:32] <lxer> true
[00:44:50] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:45:06] *** Quits: Haxxa (~Haxxa@122.199.45.213) (Quit: Haxxa flies away.)
[00:45:31] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[00:46:03] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:fd3b:470a:6a67:7e22) (Ping timeout: 256 seconds)
[00:46:16] *** Quits: greedom (~greedom@2001:16b8:2e23:1a00:d050:da10:3c97:d9cc) (Remote host closed the connection)
[00:46:23] *** Quits: zisu8 (~textual@p200300eab73b6c00f99c8dec4a359c1a.dip0.t-ipconnect.de) (Quit: Textual IRC Client: www.textualapp.com)
[00:46:50] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[00:47:00] *** jeho is now known as jeho2
[00:47:05] *** Joins: greedom (~greedom@2001:16b8:2e23:1a00:d050:da10:3c97:d9cc)
[00:47:09] *** Joins: Shanzem (~Shanzem@86.31.109.147)
[00:47:16] *** jeho2 is now known as jeho
[00:47:25] *** Joins: Haxxa (~Haxxa@122.199.45.213)
[00:47:40] *** Joins: hendursaga (~weechat@user/hendursaga)
[00:50:05] *** Joins: mh_le (~Mads@user/mh-le/x-4465771)
[00:50:25] <mh_le> what would be a fun project to do?
[00:50:55] *** Quits: n0mad (~n0mad@2601:586:4000:c9e0::7b45) (Quit: Leaving)
[00:51:12] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[00:51:21] <The-Compiler> grym: how common is the "import typing as t" thing? I thought about using it, but was put off by the note box at the bottom at https://mypy.readthedocs.io/en/stable/getting_started.html#additional-types-and-the-typing-module recommending against it.
[00:51:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[00:51:44] <The-Compiler> mh_le: we don't know what you'd consider fun :)
[00:52:23] <The-Compiler> mh_le: maybe some software you use regularily is written in Python? Then you could find something to contribute there.
[00:52:39] <Payam> Hi, I am trying to run mya pplication on asyncio. I have a custom row in which a YouTube url will be pasted and then downloaded when a button is clicked. There will be multiple rows and that's why I want to use asyncio. However I don't know where to put asyncio.run(.. However I came across asyncio_glib that ChrisWarrick mentioned. Now I am trying to implement that in my application. This is my tries so far. https://bpa.st/NBHA . I do see
[00:52:39] <Payam> the main window but when adding a row I get the error as mention in bpaste.st I am trying to follow https://github.com/jhenstridge/asyncio-glib/issues/1 . Can anyone help me out being able to add a row and call a async function from it?
[00:53:02] *** Joins: n0mad (~n0mad@2601:586:4000:c9e0::7b45)
[00:55:17] <phy1729> mh_le: There are about 26k open issues on github that are labeled good first issue and concern python   https://github.com/search?l=Python&q=label%3A%22good+first+issue%22&state=open&type=Issues
[00:57:22] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:00:18] *** Quits: n0mad (~n0mad@2601:586:4000:c9e0::7b45) (Quit: Leaving)
[01:00:24] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:1cdc:45ed:1a20:c8f2) (Ping timeout: 250 seconds)
[01:01:08] <Donitz> can you use self in a thread?
[01:01:16] <Donitz> in a class
[01:01:21] <mh_le> The-Compiler: perhaps something science/stats related
[01:02:33] *** Quits: akk (~akk@174-28-98-206.albq.qwest.net) (Ping timeout: 248 seconds)
[01:02:35] <jinsun> The-Compiler: I don't like the t.Thing, doesn't look right, I am put-off even though I didn't see that note before, maybe just because I see those types without the prefix usually
[01:03:04] <mefistofeles> mh_le: well, plenty of related projects in that area, if you want to contribute to them
[01:03:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:03:09] <mefistofeles> mh_le: sklearn might be a good one
[01:03:30] <mefistofeles> even if most of the heavy lifting is done in C/C++ of course
[01:03:54] <mh_le> cool
[01:04:31] *** Joins: d0ku (~d0ku@178.43.56.75.ipv4.supernova.orange.pl)
[01:08:47] *** Joins: belor (~belor@user/belor)
[01:09:31] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[01:11:33] *** Joins: i0e (~is0ke3@user/is0ke3)
[01:12:19] <Samian> anyone know where I can find logs of this channel? I'm looking for logs for this past june
[01:13:13] *** Quits: Payam (~Payam@c188-150-219-9.bredband.tele2.se) (Ping timeout: 248 seconds)
[01:13:19] <mefistofeles> I don't think this channel is officially logged
[01:13:40] *** Quits: MaximB (~MaximB@87.68.164.220) (Quit: Client closed)
[01:14:30] <lxer> did it already exist? most was on freenode perhaps
[01:15:11] <Samian> mefistofeles  don't you leave your computer on 24/7? or maybe grym or snoopJ? I'm looking for the time I had trouble using fbgemm_gpu_py.so. Can anyone search "fbgemm_gpu_py.so" in their logs?  Someone told me about shared object files. It's the first time I learned about them
[01:15:11] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Quit: leaving)
[01:15:20] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[01:16:09] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[01:16:10] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 240 seconds)
[01:16:17] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:16:47] *** Quits: regreg (~regreg@2a02:2f09:531a:c700:a94d:a4a7:1381:2130) (Ping timeout: 240 seconds)
[01:17:35] *** Joins: besnn (~besnn@user/besnn)
[01:17:50] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Client Quit)
[01:18:04] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[01:18:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[01:18:41] *** Lord_of_Life_ is now known as Lord_of_Life
[01:18:46] <jinsun> the matrix IRC bridge might show the logs from before, haven't used it though, try making matrix account and joining from there, or ask graingert
[01:19:07] <Lartza> I don't see how the log is relevant, nobody solved your issue?
[01:19:18] <graingert[m]> Lartza: ?
[01:19:21] <graingert[m]> jinsun: ?
[01:19:26] <Lartza> ?
[01:19:32] <graingert[m]> ?
[01:19:38] <jinsun> graingert[m]: lol
[01:19:41] <Lartza> I'm talking to Samian
[01:19:58] <graingert[m]> I'm miss pressing buttons
[01:20:13] <jinsun> graingert[m]: will the matrix IRC bridge show logs from before if I login now?
[01:20:28] <Samian> Lartza  the issue was solved. But the chat turned into a chat about making package installers
[01:20:32] <graingert[m]> <Samian> "mefistofeles  don't you leave..." <- You should definitely use matrix it's great
[01:20:34] *** Quits: ubert (~Thunderbi@178.165.168.136.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[01:20:37] <graingert[m]> jinsun: Nope
[01:21:08] <Lartza> Samian, Yeah but is there... anything particular you are looking from that day?
[01:21:11] *** Quits: philipp64|work (~philipp64@174.27.28.163) (Quit: philipp64|work)
[01:21:34] <jinsun> graingert[m]: oh no, then it is useless for Samian, will it keep the logs after the first time I login, even if I disconnect?
[01:24:07] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.2)
[01:24:14] *** Joins: philipp64|work (~philipp64@174.27.28.163)
[01:24:41] *** Joins: oriba (~oriba@dynamic-078-054-158-184.78.54.pool.telefonica.de)
[01:34:42] *** Joins: jinsun_ (~jinsunmat@user/jinsun)
[01:36:57] <Samian> Lartza I want to learn how to make a package installer where the package has sourcecode that reads from a file.
[01:37:01] <Samian> look at https://github.com/pytorch/FBGEMM/blob/main/fbgemm_gpu/codegen/split_embedding_codegen_lookup_invoker.template
[01:37:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[01:37:14] *** Quits: gitly (~gitly@148.252.128.45) (Ping timeout: 250 seconds)
[01:37:18] *** Quits: cryptomonad (~cryptomon@194.191.225.149) (Remote host closed the connection)
[01:37:31] <Samian> torch.ops.load_library("fbgemm_gpu_py.so")
[01:37:57] <jean-luc> python >>>
[01:38:11] *** Quits: Narrat (~omnius@p200300df5f01470106ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:38:18] <Samian> when installing fbgemm_gpu, the file "fbgemm_gpu_py.so" needs to be in the current working directory.  But that's not a good solution, because I'll be copying that file everywhere I use fbgemm_gpu.
[01:38:30] *** Joins: Narrat (~omnius@p200300df5f01470106ea56fffe2e7cdc.dip0.t-ipconnect.de)
[01:38:33] <Samian> I don't see other python packages requiring files be copied to the CWD.
[01:38:35] <nedbat> jean-luc: python is much much greater than what?
[01:39:05] <nedbat> Samian: that file probably needs to be on the python path somewhere.
[01:39:10] *** Quits: Narrat (~omnius@p200300df5f01470106ea56fffe2e7cdc.dip0.t-ipconnect.de) (Client Quit)
[01:39:10] *** Joins: gitly (~gitly@148.252.133.219)
[01:39:36] *** Joins: Narrat (~omnius@p200300df5f01470106ea56fffe2e7cdc.dip0.t-ipconnect.de)
[01:39:48] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[01:40:49] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 250 seconds)
[01:41:09] *** Joins: p-i- (~Ohmu@171.6.224.111)
[01:41:28] <Samian> nedbat I don't think that's how it works. If you do fo = open("foo.txt", "r"), it's going to search for foo.txt in the current working directory only. It won't search in all system paths
[01:41:47] <nedbat> Samian: the question is: what is using that file?
[01:41:56] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:42:53] *** Joins: anddt (~anddt@net-130-25-114-32.cust.vodafonedsl.it)
[01:43:44] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 250 seconds)
[01:44:01] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[01:45:11] *** Joins: khrbt (~znc@user/khrbt)
[01:46:34] *** Quits: mteo (francis@user/francis) (Quit: rb)
[01:47:31] *** Joins: mteo (francis@user/francis)
[01:47:31] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[01:49:10] *** Joins: fanis30 (~anon@adsl-209.37.6.3.tellas.gr)
[01:50:01] *** Quits: lexx (~scsi@78.157.70.196) (Ping timeout: 248 seconds)
[01:51:17] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:51:55] <Samian> nedbat previously torch.ops.load_library("fbgemm_gpu_py.so") was in a lot of the source code files. But now I see it only in  https://github.com/pytorch/FBGEMM/blob/main/fbgemm_gpu/codegen/split_embedding_codegen_lookup_invoker.template
[01:52:04] <Samian> I've never heard of the *.template extension
[01:52:39] <Samian> I've never seen syntax like {% else %} before either
[01:53:08] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[01:53:26] <ammar2> it's probably just a jinja2 template
[01:53:30] <jinsun_> looks like Jinja template
[01:53:49] <jinsun_> although I haven't seen imports in those before
[01:54:01] <ammar2> well it's probably used to generate a .py file
[01:54:13] <ammar2> and then that gets imported as regular
[01:54:19] *** Joins: realhack (~hack@user/realhack)
[01:54:41] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Quit: mcleuder)
[01:54:44] <jinsun_> ah yes
[01:55:16] <jinsun_> didn't think people will generate py files with jinja
[01:55:28] <jinsun_> but it is possible obviously
[01:55:32] *** Quits: Classic (~root@user/classic) (Ping timeout: 268 seconds)
[01:55:35] <Samian> jinja2 is a dependency, so that makes sense. Thanks!
[01:55:37] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[01:56:03] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[01:56:14] <Samian> so metaprogramming can be done with jinja? I'll need to learn more!
[01:56:24] *** Joins: Payam (~Payam@c188-150-219-9.bredband.tele2.se)
[01:56:46] *** Quits: nickodd (~nickodd@user/nickodd) (Ping timeout: 250 seconds)
[01:57:21] <lxer> there are easier things for that. I forgot the name. (will look it up)
[01:57:27] *** Parts: mh_le (~Mads@user/mh-le/x-4465771) ()
[01:57:37] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[01:57:46] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[01:58:02] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:58:22] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[01:58:24] *** Quits: montxero (~user@149.167.149.74) (Remote host closed the connection)
[01:58:41] *** Joins: montxero (~user@149.167.149.74)
[01:58:47] <ammar2> Samian: just fyi, it looks like load_library is intended to load a shard library. For those, the .so file is looked up not just in the current working directory but also wherever your OS will supply dynamic libraries from
[01:59:05] <ammar2> Samian: on linux for example you can use `ldconfig -v` to view some of them
[01:59:11] <grym> The-Compiler: `typing as t` is at least one idiom, but i'm really not sure where i adopted it from.
[01:59:14] <lxer> makotemplates
[01:59:34] *** Joins: mattf (~mattf@li908-138.members.linode.com)
[01:59:37] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[01:59:47] <ammar2> Samian: I don't really have much context into what you were asking about related to it but just an fyi
[02:00:02] <Batzy> why am i getting multiprocessing.pool.MaybeEncodingError: Error sending result: '<multiprocessing.pool.ExceptionWithTraceback object at 0x7f2a07ee7d90>'. Reason: 'RecursionError('maximum recursion depth exceeded while calling a Python object')' when it makes 0 sense
[02:00:06] *** Parts: realhack (~hack@user/realhack) (Textual IRC Client: www.textualapp.com)
[02:00:15] <Batzy> im not recursing anything, and it seems to only be happening on my current machine
[02:00:34] <Samian> going back to the situation of having a python package that reads from a binary file.  How can the package be installed  such that the binary file be read from a single location?   If I run python and type import the_package_name and in the package's __init__.py it has something like a =  torch.ops.load_library("binary_file"), it will look for "binary_file" in the directory you ran python from. That's what I want to learn how to get around.
[02:00:36] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Remote host closed the connection)
[02:00:38] <Batzy> error doesnt happen on a weaker machine
[02:00:38] <ammar2> Batzy: show your code?
[02:00:52] <Batzy> ammar2 i guess i can, it's in a django proj though
[02:01:01] <mattf> So in flask when you do something like request.get_json() or get_data the request is consumed? I can't access the data twice from the request object? Is there a way to do that?
[02:01:07] <grym> Samian: importlib.resources lets you specifi things inside your packages
[02:01:17] <ammar2> Batzy: the main part involved in the traceback plus the traceback itself would be good
[02:01:19] <Samian> ah yes! that's it!
[02:01:21] <Samian> thanks
[02:01:24] *** Joins: georgios (~georgios@user/georgios)
[02:01:27] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[02:01:38] <Batzy> https://bpa.st/HGIA here we go
[02:01:42] <Batzy> here you go*
[02:02:17] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Ping timeout: 248 seconds)
[02:02:55] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[02:02:58] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[02:03:27] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[02:06:28] <Batzy> makes no sense, right?
[02:06:34] *** Joins: jaggz (~jaggz@user/jaggz)
[02:06:38] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Remote host closed the connection)
[02:06:53] *** Quits: redgloboli (~redglobol@user/redgloboli) (Quit: ...enter the matrix...)
[02:07:00] <jaggz> ModuleNotFoundError: No module named 'requests'
[02:07:10] <Batzy> jaggz INSTALL REQUESTS
[02:07:10] <jaggz> I made a mess of my debian system packages
[02:07:13] *** Joins: redgloboli (~redglobol@user/redgloboli)
[02:07:14] <Batzy> also dont use requests use httpx
[02:07:14] <Batzy> o
[02:07:18] <jaggz> it's not my code
[02:07:22] <Batzy> damn
[02:07:24] <jaggz> system program too
[02:07:30] <Batzy> d a m
[02:08:21] <jaggz> oh.. it was just python3-requests .. thought I got that in.. grr.
[02:08:22] <jaggz> thanks
[02:08:39] <jaggz> oh, it's because the system thought it was in.
[02:08:49] <jaggz> I made a mess because some software used sudo pip ..
[02:08:58] <Batzy> jesus
[02:09:02] *** Joins: odoood (~odoood@2601:c8:c003:a550::7)
[02:09:11] <jaggz> then I removed stuff, and apparently that is in the system folders
[02:09:14] <jaggz> awful mess
[02:09:24] <jaggz> so i had to apt install --reinstall python3-requests
[02:09:29] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[02:09:42] <jaggz> (since the package manager actually has that module installed already, even though the files were removed)
[02:09:53] <jaggz> damn.. can't believe I made the mistake of letting that software do that.  I had the choice.
[02:10:01] <jaggz> "eh.. what's the worst that could happen"
[02:10:20] <p-i-> In VSCode I've created a .venv with `python3 -m venv .venv` and created foo.ipynb. But VSCode can't find the .venv. Anyone else bump into this one?
[02:10:53] <theprophet> what is the type of isalpha()? for example if i want to find isalpha() in python documentation how do i find it? what keyword i need?
[02:11:03] <Batzy> ammar2 i feel like the problem exists outside of my good
[02:11:10] <Batzy> feels like a multiprocessing library issue
[02:11:16] <Batzy> outside of my code*
[02:12:13] <ChrisWarrick> p-i-: perhaps set the interpreter manually
[02:12:16] <grym> The-Compiler: https://docs.python.org/3/library/stdtypes.html#string-methods
[02:12:17] <grym> er
[02:12:19] <grym> theprophet: https://docs.python.org/3/library/stdtypes.html#string-methods
[02:12:23] *** Quits: Sky_Net (~Sky_Net@176.14.213.85) (Read error: Connection reset by peer)
[02:13:00] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[02:13:01] <ammar2> Batzy: I think so, it's probably running into deep recursion when trying to pickle the object to send across the multiprocessing boundary
[02:13:05] <theprophet> @grym thanks bro, so its called string methods.
[02:13:24] *** Joins: jmft247 (~jmft2@81.149.115.87.dyn.plus.net)
[02:13:36] <grym> theprophet: well, isalpha is a method on str
[02:13:37] *** Joins: nomic (~nomic@185.217.117.169)
[02:13:38] *** jmft247 is now known as jmft2
[02:13:49] <theprophet> got it
[02:14:24] <p-i-> Every time. VSCode .venvs kill me.  ok gottit.  Restart VSCode and click the .venv along the bottom bar and boom.
[02:14:26] <jmft2> Is there a speed boost to using functools.reduce compared to writing out my function explicitly?
[02:15:20] *** hanaan is now known as Naan
[02:15:55] <ammar2> Batzy: try doing multiprocessing.log_to_stderr() before running your code
[02:16:09] <ammar2> it might print some helpful info about the error
[02:16:51] <ammar2> though you might need to do: logger = multiprocessing.log_to_stderr(); logger.setLevel(logging.DEBUG)
[02:18:46] <Batzy> ammar2 where do i put that?
[02:18:51] <Batzy> before with Pool ....
[02:19:01] <ammar2> yeah
[02:19:12] *** Quits: fanis30 (~anon@adsl-209.37.6.3.tellas.gr) (Quit: WeeChat 3.2)
[02:19:16] <Batzy> k
[02:19:37] *** Quits: oriba (~oriba@dynamic-078-054-158-184.78.54.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:19:51] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[02:20:57] *** Quits: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de) (Ping timeout: 248 seconds)
[02:21:05] <Batzy> logging is not defined
[02:21:08] <Batzy> guess i need to import
[02:21:25] <Batzy> ok let's see
[02:21:26] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:21:40] *** Joins: akaWolf (~akaWolf@akawolf.org)
[02:21:58] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::4433) (Quit: Konversation terminated!)
[02:22:04] <Batzy> nothing too useful
[02:22:15] <Batzy> the last debug thing printed before the error is thrown is
[02:22:18] <Batzy> "cleaning up worker 286"
[02:23:33] *** Joins: imp (~imp@192-141-191-229.alternativaip.net.br)
[02:25:04] <Batzy> ammar2 i can say this is always happening at THE END too
[02:25:06] *** Quits: belor (~belor@user/belor) (Remote host closed the connection)
[02:25:16] <Batzy> right at the end of the list i am feeding it
[02:26:11] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[02:26:37] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[02:28:19] *** Joins: srhm (~srhm@user/srhm)
[02:28:41] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:28:42] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[02:29:08] *** Joins: srhm (~srhm@user/srhm)
[02:30:18] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:31:05] *** Quits: trace987 (~trace@95.90.106.112) (Ping timeout: 248 seconds)
[02:31:26] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:32:02] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:33:12] <aphysically> okay I made it a project...now to figure out how to split this into files
[02:33:32] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[02:33:38] <aphysically> I see now I didn't carefully understand the implication of logging in different modules hmmm
[02:34:06] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:34:06] *** Joins: montxero (~user@149.167.149.74)
[02:34:07] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Read error: Connection reset by peer)
[02:34:10] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 240 seconds)
[02:34:23] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[02:35:36] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Remote host closed the connection)
[02:35:50] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[02:37:07] *** Quits: jmft2 (~jmft2@81.149.115.87.dyn.plus.net) (Ping timeout: 256 seconds)
[02:38:17] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Remote host closed the connection)
[02:38:32] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[02:39:03] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[02:39:22] *** Joins: montxero (~user@149.167.149.74)
[02:40:53] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[02:41:02] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:42:31] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 252 seconds)
[02:43:01] *** Quits: Narrat (~omnius@p200300df5f01470106ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:47:34] *** Joins: ice99 (~ice9@user/ice9)
[02:48:09] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 248 seconds)
[02:48:15] <Jigsy> Why is a complex number written with j/J and not i/I?
[02:50:27] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[02:50:30] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:cca9:b466:1d3f:ec1e:75f1)
[02:50:55] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[02:50:56] *** Quits: greedom (~greedom@2001:16b8:2e23:1a00:d050:da10:3c97:d9cc) (Remote host closed the connection)
[02:51:08] *** Joins: kevinlc (~kevinalh@2800:200:e8d0:20b::4)
[02:51:13] *** Joins: montxero (~user@149.167.149.74)
[02:52:10] *** Quits: Payam (~Payam@c188-150-219-9.bredband.tele2.se) (Quit: Leaving)
[02:52:24] <jinsun_> probably some electrical engineers added it, they like to use j
[02:53:31] *** Quits: p-i- (~Ohmu@171.6.224.111) (Ping timeout: 252 seconds)
[02:53:47] *** Joins: jamer05 (~jamer05@user/jamer05)
[02:54:21] *** Joins: zln (~golluq@c80-217-230-193.bredband.tele2.se)
[02:54:22] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[02:54:30] *** Quits: nomic (~nomic@185.217.117.169) (Quit: Leaving)
[02:54:54] <zln> hi guys, where can I learn how I can split long lines without breaking syntax?
[02:55:14] *** Quits: odoood (~odoood@2601:c8:c003:a550::7) (Ping timeout: 250 seconds)
[02:55:21] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:55:35] *** Joins: Trieste (T@user/pilgrim)
[02:56:23] <zln> like var = "some long string".format(some long format args)
[02:56:32] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Ping timeout: 250 seconds)
[02:58:06] *** Joins: akk (~akk@174-28-98-206.albq.qwest.net)
[02:58:30] <jinsun_> zln the simple way is to write it all in one line, then install black and run `black your_file.py`, black will fix most of those long lines for you
[02:58:48] <zln> jinsun_: nice, thank you!
[02:59:08] *** Quits: redgloboli (~redglobol@user/redgloboli) (Quit: ...enter the matrix...)
[02:59:26] *** Joins: redgloboli (~redglobol@user/redgloboli)
[03:00:40] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 240 seconds)
[03:01:07] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 240 seconds)
[03:04:32] <ChrisWarrick> (or you can just decide that line length is not important.)
[03:06:02] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:fd3b:470a:6a67:7e22)
[03:06:06] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[03:06:40] *** Joins: montxero (~user@149.167.149.74)
[03:06:40] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[03:07:45] <nedbat> zln: also, often the best fix for a too-long line is to use more intermediate variables.
[03:07:53] <neshpion> ^
[03:09:42] <zln> yes, but this was just one string and one .format() method with some longer named variables as args :)
[03:10:25] <nedbat> zln: ` msg = "some long string";  var = msg.format(....) `
[03:12:25] *** Joins: fikran (~fikran@user/fikran)
[03:12:40] *** Joins: cjb (~cjb@user/cjb)
[03:12:46] <grym> Jigsy: yeah, `i` means `current` :)
[03:13:10] *** Quits: jamer05 (~jamer05@user/jamer05) (Ping timeout: 240 seconds)
[03:13:59] *** Quits: emika (~emika@83.136.182.240) (Ping timeout: 250 seconds)
[03:15:25] *** Joins: emika (~emika@83.136.182.32)
[03:15:27] <zln> nedbat: nice, thanks :)
[03:16:37] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 252 seconds)
[03:17:17] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Remote host closed the connection)
[03:17:25] *** Joins: pyever___ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[03:17:42] *** Joins: j0be_ (~j0be@user/j0be)
[03:18:10] *** Quits: noord (~noord@user/noord) (Ping timeout: 240 seconds)
[03:18:40] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (Quit: ERR_NOWITTYQUITMESSAGE)
[03:18:40] *** Quits: graingert (sid128301@tinside.irccloud.com) (Ping timeout: 240 seconds)
[03:18:48] <Jigsy> Oh.
[03:18:59] *** Joins: bdeshi- (~bdeshi@bdeshi.space)
[03:19:00] *** Joins: comruminoAlt (~comrumino@li87-103.members.linode.com)
[03:19:06] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[03:19:10] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[03:19:10] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (Ping timeout: 240 seconds)
[03:19:10] *** Quits: bdeshi (~bdeshi@bdeshi.space) (Ping timeout: 240 seconds)
[03:19:10] *** Quits: funabashi (funabashi@185.52.0.236) (Ping timeout: 240 seconds)
[03:19:10] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 240 seconds)
[03:19:11] *** Joins: noord (~noord@user/noord)
[03:19:11] *** bdeshi- is now known as bdeshi
[03:19:29] *** Joins: rowbee (~augh@theguntretort.com)
[03:19:40] *** Quits: czuk_cza (~mist@188.147.103.124.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: mossman93 (~quassel@user/mossman93) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: bidouille (~user_name@trois.potager.org) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: RoyK (~roy@user/royk) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: rwb (~augh@theguntretort.com) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: b0nn (~shane@user/b0nn) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: paperManu (~paperManu@138.197.128.151) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: summonner (~summonner@188.24.126.169) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: j0be (~j0be@user/j0be) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: HurricaneHarry (~quassel@84-85-122-182.fixed.kpn.net) (Ping timeout: 240 seconds)
[03:19:40] *** Quits: nisstyre (~wes@user/nisstyre) (Ping timeout: 240 seconds)
[03:19:41] *** Joins: gry_ (~quassel@botters/gry)
[03:19:55] <mattf> So are flask requests (the request you import from flask) something you can only import once?
[03:19:56] *** Joins: Praise (~Fat@user/praise)
[03:20:01] <mattf> no
[03:20:05] <mattf> not import
[03:20:10] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Ping timeout: 240 seconds)
[03:20:13] <mattf> consume
[03:20:14] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-1803-b7a9-e778-69f0.fixed6.kpn.net)
[03:20:15] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Ping timeout: 276 seconds)
[03:20:18] <nedbat> mattf: can you pastebin the code that is giving you trouble?
[03:20:23] *** Joins: mossman93 (~quassel@user/mossman93)
[03:20:25] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Remote host closed the connection)
[03:20:35] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[03:20:43] *** Joins: nomic (~nomic@185.217.117.169)
[03:20:45] *** rowbee is now known as rwb
[03:20:53] *** Joins: redj (~quassel@76.69.197.62)
[03:20:59] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[03:21:01] *** Joins: RoyK (~roy@user/royk)
[03:21:15] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[03:21:19] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[03:21:39] <mattf> something like this: http://ix.io/3xnu
[03:21:39] <mattf>  
[03:21:45] *** Joins: bidouille (~user_name@trois.potager.org)
[03:21:47] *** Joins: b0nn (~shane@user/b0nn)
[03:22:02] <mattf> im trying to simply log the data without destroying the data on the request nedbat
[03:22:10] *** Quits: nfc_ (nfc@tilde.institute) (Ping timeout: 240 seconds)
[03:22:35] <mattf> but if i call that log function then seems like request.get("questions") is empty, does it get consumed?
[03:22:40] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 240 seconds)
[03:22:40] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (Ping timeout: 240 seconds)
[03:22:47] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[03:22:48] <mattf> is it a thing i can run only once?
[03:22:50] <nedbat> mattf: which line is logging the data, and then which can't get data?  (pastebins with line numbers are great)
[03:22:56] <mattf> its called log
[03:23:05] *** Joins: montxero (~user@149.167.149.74)
[03:23:33] <nedbat> mattf: i wouldn't have thought your log function would consume the data. but it seems like it is?
[03:24:05] <mattf> my problem is: I call request.get_json() then i cant call request.data.get("questions") anymore
[03:24:16] *** Joins: nfc_ (nfc@tilde.institute)
[03:24:29] <mattf> same for get_data
[03:24:36] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[03:24:49] *** Joins: Fedorasan (~fedorasan@user/fedorasan)
[03:24:55] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[03:25:09] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:a1be:2710:2837:d377)
[03:25:15] *** Quits: anddt (~anddt@net-130-25-114-32.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[03:25:21] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[03:25:22] <mattf> i didn't read anywhere that flask request behaved like this, that it would be readable only once. All i want to do is to be able to log and pretty print the incoming json without having to change the code bellow that uses the request
[03:26:26] <nedbat> mattf: i don't know the answer, and a quick check of the flask docs doesn't turn up an answer either.
[03:27:09] *** Joins: paperManu (~paperManu@138.197.128.151)
[03:27:34] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[03:28:09] *** Quits: Gurkenglas (~Gurkengla@dslb-088-064-053-140.088.064.pools.vodafone-ip.de) (Ping timeout: 248 seconds)
[03:29:02] *** Quits: d0ku (~d0ku@178.43.56.75.ipv4.supernova.orange.pl) (Ping timeout: 250 seconds)
[03:31:23] *** Joins: friddo (~friddo@94.147.158.188)
[03:32:51] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:33:02] *** Joins: jim (~jim@about/linux/staff/jim)
[03:33:02] *** Joins: nisstyre (~wes@user/nisstyre)
[03:33:25] *** Joins: koolazer (~koo@user/koolazer)
[03:33:37] *** Quits: elgraz (~elgraz@151.65.9.160) (Quit: Leaving)
[03:33:53] *** Quits: sargon (~sargon@188.250.185.117) (Read error: Connection reset by peer)
[03:34:12] *** Joins: czuk_cza (~mist@188.147.103.124.nat.umts.dynamic.t-mobile.pl)
[03:34:38] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[03:34:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:36:19] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[03:36:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:37:21] *** Joins: Karatsuba (~jamer05@user/karatsuba)
[03:38:24] *** gry_ is now known as gry
[03:38:59] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:11f:6f56:3059:857e)
[03:39:43] *** Quits: ice99 (~ice9@user/ice9) (Ping timeout: 252 seconds)
[03:39:59] *** Quits: lastshell (~lastshell@user/lastshell) (Ping timeout: 250 seconds)
[03:42:02] *** Joins: lastshell (~lastshell@user/lastshell)
[03:42:05] *** Quits: friddo (~friddo@94.147.158.188) (Quit: leaving)
[03:43:57] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[03:46:07] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[03:48:57] *** Quits: lastshell (~lastshell@user/lastshell) (Read error: Connection reset by peer)
[03:51:19] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (Quit: ERR_NOWITTYQUITMESSAGE)
[03:51:32] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[03:51:44] *** Joins: \r (jeda@hellomouse/dev/cryb.jeda)
[03:51:44] *** Aye is now known as Guest3396
[03:51:44] *** \r is now known as Aye
[03:51:47] *** Joins: Ennea_ (~Ennea@user/ennea)
[03:51:58] *** Joins: ThomasJ_ (~ThomasJ@user/thomasj)
[03:52:10] *** Quits: Guest3396 (jeda@hellomouse/dev/cryb.jeda) (Ping timeout: 240 seconds)
[03:52:10] *** Quits: Kaya (~KC@static.89.202.216.95.clients.your-server.de) (Ping timeout: 240 seconds)
[03:52:10] *** Quits: ThomasJ (~ThomasJ@user/thomasj) (Ping timeout: 240 seconds)
[03:52:20] *** ThomasJ_ is now known as ThomasJ
[03:52:40] *** Quits: tty14 (~tty14@152.67.7.96) (Ping timeout: 240 seconds)
[03:52:40] *** Quits: Ennea (~Ennea@user/ennea) (Ping timeout: 240 seconds)
[03:52:40] *** Ennea_ is now known as Ennea
[03:52:45] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Ping timeout: 276 seconds)
[03:53:10] *** Quits: j00n (~mario@user/j00n) (Ping timeout: 240 seconds)
[03:54:17] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 248 seconds)
[03:55:10] *** Joins: tty14 (~tty14@152.67.7.96)
[03:55:39] *** Joins: ansimita (~ansimita@user/ansimita)
[03:56:09] <deltab> mattf: being able to read streamed data from the network (or terminal, etc.) only once is a common thing in APIs; this isthe first one I've seen that can cache data to be read again
[03:59:35] *** Quits: Fedorasan (~fedorasan@user/fedorasan) (Quit: Going offline, see ya! (www.adiirc.com))
[04:02:25] *** Quits: aac (~AAC@2001:8a0:6cc5:7e01:e5c6:1685:1121:1261) (Remote host closed the connection)
[04:03:07] *** Quits: kevinlc (~kevinalh@2800:200:e8d0:20b::4) (Ping timeout: 240 seconds)
[04:03:27] *** Joins: neilthereildeil (~neilthere@pool-108-31-124-45.washdc.fios.verizon.net)
[04:05:32] <mattf> deltab: "this is the first one I've seen that can cache data to be read again" ? can you cache on flask?
[04:05:47] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[04:05:52] *** Quits: zensei (~zensei@user/zensei) (Ping timeout: 250 seconds)
[04:06:16] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[04:07:11] *** Parts: neilthereildeil (~neilthere@pool-108-31-124-45.washdc.fios.verizon.net) ()
[04:07:29] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Remote host closed the connection)
[04:07:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[04:09:40] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:fd3b:470a:6a67:7e22) (Quit: Ping timeout (120 seconds))
[04:10:35] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[04:13:32] *** Quits: syntaxman (~wade@li227-215.members.linode.com) (Quit: leaving)
[04:14:11] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[04:14:26] <deltab> mattf: get_data has a cache parameter, defaulting to True; get_json has that too
[04:14:58] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:16:39] <zln> can I get more details than "SyntaxError: invalid syntax" somehow?
[04:16:59] <grym> zln: in 3.10 prerelease, i think so
[04:17:03] <grym> zln: otherwise, no
[04:17:13] <grym> whatcha got
[04:17:23] <zln> msg  = f"\tName: {names['search_index']}"
[04:17:41] <zln> maybe you guys can point out the invalid syntax here?
[04:18:23] <nedbat> zln: check the line before for a missing paren.  or pastebin the whole file
[04:18:32] <grym> yeah, usually it's the line before
[04:18:41] <nedbat> zln: or, you are using an older python
[04:19:02] <zln> ah, lemme check. btw using 3.9.6
[04:19:56] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[04:21:28] *** Joins: kevinlc (~kevinalh@2800:200:e8d0:20b::4)
[04:22:01] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 248 seconds)
[04:25:28] *** Parts: cornett (~ben@149.28.239.26) (WeeChat 2.9)
[04:26:29] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[04:27:55] *** portalrat is now known as Squeak
[04:28:11] *** Squeak is now known as portalrat
[04:28:21] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Client Quit)
[04:28:38] *** Joins: syntaxman (~wade@li227-215.members.linode.com)
[04:28:49] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[04:29:50] *** Quits: syntaxman (~wade@li227-215.members.linode.com) (Client Quit)
[04:30:08] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[04:30:32] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[04:30:52] *** Quits: xx (~xx@user/xx) (Quit: xx)
[04:30:58] *** Joins: syntaxman (~wade@li227-215.members.linode.com)
[04:30:58] *** Quits: syntaxman (~wade@li227-215.members.linode.com) (Client Quit)
[04:31:18] *** Joins: syntaxman (~wade@li227-215.members.linode.com)
[04:36:55] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[04:37:40] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[04:39:03] <rud0lf> sorry, first time using own module.. if i put variable "my_var" in __init__.py do i access it from module with "from . import my_var"?
[04:39:14] <rud0lf> just making sure of my observations
[04:42:30] *** Quits: syntaxman (~wade@li227-215.members.linode.com) (Quit: leaving)
[04:42:40] *** Quits: Karatsuba (~jamer05@user/karatsuba) (Ping timeout: 240 seconds)
[04:42:44] *** Joins: syntaxman (~wade@li227-215.members.linode.com)
[04:42:53] <jaggz> what are you supposed to do with a list slice if you need variables for a 0 index?
[04:42:59] <jaggz> aa[4:0:-1]
[04:43:09] <jaggz> (for the 0 portion when counting down)
[04:43:23] <grym> [4::-1], i think
[04:43:24] <jaggz> aa[start:smaller_end:-1]
[04:43:29] *** Quits: i0e (~is0ke3@user/is0ke3) (Remote host closed the connection)
[04:43:49] <jaggz> yeah, that works, but if they are vars I need to test the end and make it None if it's going to be 0?
[04:43:53] <jaggz> (well, really -1)
[04:44:00] <jaggz> [4:-1:-1]
[04:44:31] <jaggz> [start:None if end == 0 else end-1: -1]
[04:44:34] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[04:44:55] <jaggz> yeah I guess something like that is it.  grr
[04:44:58] <jaggz> grrrym.
[04:45:32] *** Quits: imp (~imp@192-141-191-229.alternativaip.net.br) (Remote host closed the connection)
[04:45:58] *** Joins: y1n (~y1n@84-115-64-198.wifi.dynamic.surfer.at)
[04:46:50] <jaggz> in another place in my code I did this, but it's lame
[04:46:52] <jaggz> assembly = bui.buf[first:last+1]
[04:46:52] <jaggz> assembly.reverse()
[04:46:54] *** Joins: i0e (~is0ke3@user/is0ke3)
[04:47:03] *** Joins: Fiji (~Fiji@user/fiji)
[04:48:13] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[04:51:27] *** Joins: DarkHelmet (bryan@MrPickles.keekles.org)
[04:58:18] <DarkHelmet> wondering if someone can help me understand a while with a nested if in it
[04:58:28] <DarkHelmet> https://bpa.st/U2JQ
[04:59:04] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[04:59:10] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[04:59:36] *** Quits: heco (~redrum@user/redrum88) (Ping timeout: 250 seconds)
[05:00:52] <jaggz> hmm.. I have a class defined in my buffui.py, and buffui needs to import main
[05:01:11] <jaggz> but main accesses buffui's Buffui class, which isn't yet seen at the import
[05:01:14] <nedbat> jaggz: importing main sounds like a bad idea
[05:01:37] <nedbat> jaggz: why does it need to import main?
[05:01:38] <jaggz> darn.. but it has some mic callback stuff .. and stuff.. hrm..
[05:01:42] <jaggz> I'll see if I can move it
[05:01:43] <jaggz> thanks
[05:01:59] <jaggz> DarkHelmet, what are ;'s for?
[05:02:16] <jaggz> you a C coder?
[05:02:23] <DarkHelmet> end of line
[05:02:40] <jaggz> DarkHelmet, you like them a lot?
[05:02:48] <DarkHelmet> i'm not much of a programer
[05:02:50] <nedbat> DarkHelmet: you don't need the semicolons at all.  btw, `exit` won't do anything.
[05:02:52] <jaggz> it's honestly a more peaceful life to not put them in
[05:02:59] <DarkHelmet> ok
[05:03:33] <jaggz> use \ on a line if you want it to continue to the next line.  MOST (but not all) of python's lines will end at the newline
[05:03:52] <DarkHelmet> i've mostly coded small c programs and lots of MCU stuff in avr
[05:04:18] <jaggz> the others, like within a function call's (parenthesis,\nhere)  can continue to the next line without the \
[05:04:20] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:04:30] <jaggz> so what don't you understand?
[05:04:57] <nedbat> DarkHelmet: what was your question about the loop?
[05:05:31] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[05:05:38] <jaggz> use exit() if you really want to exit.  it's better practice (and nicer) to, instead of erroring with a print and exit, to use a raise() if you can
[05:05:39] <DarkHelmet> ok, well I'm trying to understadn what I'm doing wrong here, I have code stored in BootLoaderData, and it goes through it 8 bytes at a time and sends it using the ser.write
[05:05:55] <jaggz> it'll go to stderr and will dump the call stack
[05:06:12] <jaggz> but if you need that print to be a nice clean line, you can print() it.  you might want to shoot it to stderr though
[05:06:52] <DarkHelmet> the error i get is IndentationError: unexpected indent
[05:07:29] <jaggz> print("I'ma tell you, but not in stdout. Let's take it to stderr, kthx", file=sys.stderr)
[05:07:35] <nedbat> DarkHelmet: on what line? That's an important detail to tell us up front :)
[05:07:43] <DarkHelmet> #19
[05:07:55] <jaggz> no 19 is not an error I think
[05:08:02] <jaggz> comments don't care where they are
[05:08:13] <DarkHelmet> ok, 20
[05:08:16] <jaggz> you might have a tab or spaces mixed up
[05:08:46] <jaggz> exit() will exit by the way
[05:08:59] <jaggz> in python2 you might need import sys;  sys.exit() or something.. I forget.
[05:09:03] <jaggz> but it seems to work in python3
[05:09:09] <DarkHelmet> im on 3.8 on osx
[05:09:16] <jaggz> should be okay I think
[05:09:27] <jaggz> you also use way too many parenthesis for my test.. and I like parens
[05:09:36] * jaggz <3 his father
[05:09:39] <DarkHelmet> yea, last python I worked on was 2.7
[05:09:43] <nedbat> DarkHelmet: i don't see an indentation error here.  are you sure this is the code you are running?
[05:10:01] <jaggz> oh and mother .. but father left.. or changed.. what happened to my father?
[05:10:24] <nedbat> jaggz: keep it on-topic :)
[05:10:31] <jaggz> DarkHelmet, what editor are you using?
[05:10:37] <DarkHelmet> xcode :(
[05:10:48] <DarkHelmet> let me fire up vim
[05:10:52] <jaggz> not sure how to check for tabs there, but make sure it's not mixed up
[05:12:09] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 256 seconds)
[05:12:35] <jaggz> (also, know that the list slices in python stop 1 short..   foo[1:3] is only 2 items)
[05:12:52] <DarkHelmet> jaggz: thanks, I already figured that out
[05:13:10] <DarkHelmet> I got my logic anyalizer hooked up on this
[05:13:16] *** Joins: cjb (~cjb@user/cjb)
[05:13:59] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[05:14:15] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:15:51] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:17:18] *** Quits: anorthall (~anorthall@user/anorthall) (Quit: Goodbye!)
[05:18:41] *** Joins: pycurious (~Adium@user/pycurious)
[05:19:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[05:19:59] *** Joins: audiocat (~audio@2603-8081-1801-3bb5-d6d9-7d6f-7c18-dd49.res6.spectrum.com)
[05:20:22] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[05:21:46] *** Joins: fikran (~fikran@user/fikran)
[05:23:53] *** Quits: y1n (~y1n@84-115-64-198.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[05:24:58] *** Joins: frost (~frost@59.71.240.119)
[05:26:00] *** Joins: jeho2 (~jehoshaph@user/jehoshaphat)
[05:28:27] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 240 seconds)
[05:30:17] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 248 seconds)
[05:30:26] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:55] *** Joins: stocom0988778 (~sam@82-132-230-81.dab.02.net)
[05:32:43] *** Joins: anorthall (~anorthall@user/anorthall)
[05:35:04] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[05:37:04] *** Joins: y1n (~y1n@84-115-64-198.wifi.dynamic.surfer.at)
[05:37:12] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:37:33] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[05:40:27] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[05:41:18] *** Quits: bitdex_ (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[05:41:19] *** Parts: akk (~akk@174-28-98-206.albq.qwest.net) (+++)
[05:41:33] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[05:42:01] *** Joins: montxero (~user@149.167.149.74)
[05:42:02] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:42:16] *** Joins: hanaan (~naan@user/naan)
[05:42:47] *** Quits: Naan (~naan@user/naan) (Ping timeout: 240 seconds)
[05:43:01] *** Joins: bitdex_ (~bitdex@gateway/tor-sasl/bitdex)
[05:43:33] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[05:43:50] *** Joins: montxero (~user@149.167.149.74)
[05:43:54] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[05:44:24] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[05:44:58] *** Joins: stealth_ (~stelath_@216-197-160-97.regn.static.sasknet.sk.ca)
[05:45:27] *** Joins: TonyStone (~TonyStone@cpe-74-76-58-56.nycap.res.rr.com)
[05:45:49] *** Quits: TonyStone (~TonyStone@cpe-74-76-58-56.nycap.res.rr.com) (Remote host closed the connection)
[05:47:11] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:48:15] *** Quits: czuk_cza (~mist@188.147.103.124.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[05:49:04] *** Joins: sharperguy__ (~sharpergu@2001:16b8:5cf2:5b00:2633:59f3:621a:18de)
[05:49:28] *** Joins: nergar (~Nergar@177.225.152.16)
[05:49:32] <stealth_> nedbat, you know as a coverage developer you can add special check... `if package == 'coverage': cover = '100%'`
[05:50:29] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[05:51:36] *** Quits: sharperguy_ (~sharpergu@89.244.124.76) (Ping timeout: 250 seconds)
[05:53:22] *** Quits: schumaml (~schumaml@p4ff9167a.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:54:09] <nedbat> stealth_: TIL
[05:54:15] <nedbat> :)
[05:55:03] *** Joins: schumaml (~schumaml@p57b7e419.dip0.t-ipconnect.de)
[05:55:17] <stealth_> nedbat, hard coding never disappoints ;) listening to your talk https://nedbatchelder.com/blog/202108/me_on_bug_hunters_caf.html
[05:56:22] *** Joins: Abrax (~Abrax@user/abrax)
[05:57:01] *** Joins: Metalsutton (~Metalsutt@101.100.153.131)
[05:58:06] *** Joins: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053)
[05:59:15] *** Joins: techsurvivor (~don@89.46.62.34)
[05:59:22] *** Joins: vlm (~vlm@user/vlm)
[05:59:31] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[06:01:24] <nedbat> stealth_: :)  I hope you like it.
[06:01:44] <stealth_> nedbat, enjoying so far, thanks
[06:03:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:05:14] *** Joins: gggp (~textual@60.10.194.43)
[06:05:51] *** Joins: nickodd (~nickodd@user/nickodd)
[06:07:24] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:09:26] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:09:30] *** Joins: jazzy (~jaziz@2600:380:4671:e333:dd8c:f4f8:72d8:f607)
[06:09:48] *** Quits: gggp (~textual@60.10.194.43) (Ping timeout: 250 seconds)
[06:11:59] *** Joins: gggp (~textual@194.5.79.213)
[06:13:32] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:13:51] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[06:14:01] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 248 seconds)
[06:14:01] *** brabrax_ is now known as brabrax
[06:14:08] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 250 seconds)
[06:17:14] *** Quits: gggp (~textual@194.5.79.213) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:18:09] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 250 seconds)
[06:23:47] *** Quits: y1n (~y1n@84-115-64-198.wifi.dynamic.surfer.at) (Ping timeout: 250 seconds)
[06:25:09] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[06:25:09] *** Quits: nomic (~nomic@185.217.117.169) (Remote host closed the connection)
[06:25:10] *** Joins: montxero (~user@149.167.149.74)
[06:25:23] *** Joins: nomic (~nomic@185.217.117.169)
[06:25:41] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[06:26:36] *** Parts: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) ()
[06:26:53] *** Joins: polyrob (~rob@user/polyrob)
[06:29:40] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 252 seconds)
[06:31:02] *** Quits: zaz (~zaz@poneybl.eu) (Quit: bye)
[06:31:27] *** Joins: zaz (~zaz@poneybl.eu)
[06:31:56] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[06:34:26] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[06:34:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[06:35:38] *** Quits: kenwoodfox (~quassel@user/kenwoodfox) (Quit: Peace homie)
[06:36:39] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[06:37:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[06:38:08] *** Joins: P1ro (~quassel@user/p1ro)
[06:39:10] *** Quits: Lvl4Sword (sid483043@user/lvl4sword) (Ping timeout: 240 seconds)
[06:39:27] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[06:39:37] *** Quits: altendky (sid135382@stonehaven.irccloud.com) (Ping timeout: 248 seconds)
[06:39:40] *** Quits: flagrama (sid145621@id-145621.stonehaven.irccloud.com) (Ping timeout: 258 seconds)
[06:39:55] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[06:39:56] *** Joins: iNeedKoffee (~ubuntu@public.sa-edbd-dsto-liva1.aarnet.net.au)
[06:40:03] *** Quits: WhyNotHugo (sid269118@id-269118.stonehaven.irccloud.com) (Ping timeout: 258 seconds)
[06:40:06] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (Ping timeout: 276 seconds)
[06:40:06] *** jeho2 is now known as jeho
[06:40:10] *** Quits: crazysim (sid86009@id-86009.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[06:40:34] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 250 seconds)
[06:40:45] *** Quits: Pr0phet (sid505706@id-505706.stonehaven.irccloud.com) (Ping timeout: 276 seconds)
[06:40:58] *** Quits: pjlsergeant (sid143467@stonehaven.irccloud.com) (Read error: Connection reset by peer)
[06:41:12] *** Quits: sharpertool (sid80151@id-80151.stonehaven.irccloud.com) (Ping timeout: 258 seconds)
[06:41:12] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 258 seconds)
[06:41:40] *** Quits: Tiago_Paolini (sid172748@stonehaven.irccloud.com) (Ping timeout: 268 seconds)
[06:41:41] *** Quits: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com) (Read error: Connection reset by peer)
[06:42:14] *** Joins: crazysim (sid86009@stonehaven.irccloud.com)
[06:42:15] *** Joins: Pr0phet (sid505706@stonehaven.irccloud.com)
[06:42:21] *** Quits: jesse-s (sid98646@id-98646.stonehaven.irccloud.com) (Ping timeout: 258 seconds)
[06:42:23] *** Joins: raydeeam (uid325131@dgplug/raydeeam)
[06:42:23] *** Joins: sharpertool (sid80151@stonehaven.irccloud.com)
[06:42:23] *** Joins: flagrama (sid145621@id-145621.stonehaven.irccloud.com)
[06:42:23] *** Joins: Lvl4Sword (sid483043@user/lvl4sword)
[06:42:28] *** Joins: Tiago_Paolini (sid172748@id-172748.stonehaven.irccloud.com)
[06:42:28] *** Joins: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com)
[06:42:31] *** Joins: altendky (sid135382@stonehaven.irccloud.com)
[06:42:31] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[06:42:47] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[06:42:56] *** Joins: pjlsergeant (sid143467@stonehaven.irccloud.com)
[06:43:09] *** Joins: WhyNotHugo (sid269118@id-269118.stonehaven.irccloud.com)
[06:43:20] *** Joins: morgabra (sid500580@user/morgabra)
[06:44:04] *** Joins: cybercrypto (~morpheus@189.32.249.113)
[06:44:24] <cybercrypto> hi there!  is it possible to use python to convert a string 8549 into a float 85.49?          Python pandas is giving me back 8549.0
[06:44:24] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[06:45:27] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 250 seconds)
[06:46:17] <phy1729> '123' to 1.23 as well?
[06:46:32] *** Joins: kenwoodfox (~quassel@user/kenwoodfox)
[06:47:19] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:47:36] <carlesso> 8549 doesn't seem any kind of generic float notation. `float("8549") / 100` seems your best bet.
[06:47:54] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[06:48:22] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 250 seconds)
[06:49:43] <jaggz> how can I assign a slice the same value repeated?
[06:49:46] <jaggz> aa[1:3] = 0
[06:49:47] <cybercrypto> phy1729: Yes. last 2 digits are the 2 decimals.
[06:50:00] <jaggz> "Jaggz, can only assign an iterable"
[06:50:01] *** Joins: jesse-s (sid98646@id-98646.stonehaven.irccloud.com)
[06:51:00] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:51:24] *** Quits: hanaan (~naan@user/naan) (Quit: Leaving)
[06:52:12] <cybercrypto> phy1729: when I go like " mydata_var = pd.read_fwf(path, colspecs=colSpec,header=None, names=["field1", etc...]    field1 is 8549, and it is returned like 8549.0      I would like 85.49 instead.
[06:52:50] <jaggz> cybercrypto, so is it returning a string or a float?
[06:52:52] *** Joins: gggp (~textual@194.5.79.213)
[06:52:52] <phy1729> I'm not familiar with pandas, but it seems you just need to divide by 100.
[06:52:55] *** Joins: ELFrederich (~ELFrederi@134.244.29.70)
[06:53:41] <jaggz> maybe it's possible it returns either, and you can either tell pandas to treat that column as float, or you have to check the result type
[06:54:56] <jaggz> if you have to handle a whole column at a time then look into pandas type conversions
[06:54:57] <jaggz> # convert column "a" of a DataFrame
[06:54:57] <jaggz> df["a"] = pd.to_numeric(df["a"])
[06:55:00] <jaggz> i do it for you
[06:55:17] <jaggz> now, someone https://www.linkedin.com/pulse/change-data-type-columns-pandas-mohit-sharma/
[06:55:23] <jaggz> oops
[06:55:50] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[06:56:43] *** Joins: matsaman (~matsaman@user/matsaman)
[06:56:53] <cybercrypto> jaggz: retuning float.
[06:58:18] <cybercrypto> phy1729: let me check and try to manipulate dataframe with that, sounds pretty much easier.
[06:59:52] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[07:00:00] *** Joins: czuk_cza (~mist@188.147.100.88.nat.umts.dynamic.t-mobile.pl)
[07:00:49] <jaggz> cybercrypto, https://stackoverflow.com/questions/34962104/how-can-i-use-the-apply-function-for-a-single-column
[07:02:37] <cybercrypto> jaggz: ok, let me check.
[07:03:24] *** Quits: gggp (~textual@194.5.79.213) (Remote host closed the connection)
[07:03:37] *** Joins: rmm2 (~rmm@user/rmm)
[07:04:57] *** Quits: rmm (~rmm@user/rmm) (Ping timeout: 250 seconds)
[07:05:34] *** Joins: heco (~redrum@user/redrum88)
[07:05:51] *** rmm2 is now known as rmm
[07:07:19] <cybercrypto> phy1729, jaggz: interesting answers and articles. I will dig into it. many thanks for the replies, have a nice week.
[07:07:55] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[07:08:49] *** Joins: r3m (~launch@user/r3m)
[07:08:58] *** Joins: gggp (~textual@123.113.186.169)
[07:15:07] *** Quits: gggp (~textual@123.113.186.169) (Ping timeout: 240 seconds)
[07:15:51] *** Joins: gggp (~textual@60.10.194.43)
[07:18:18] *** Parts: cybercrypto (~morpheus@189.32.249.113) (irssi v1.3-head - running on FreeBSD amd64)
[07:21:54] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[07:22:27] *** Quits: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[07:22:43] *** Quits: Pr0phet (sid505706@stonehaven.irccloud.com) (Ping timeout: 250 seconds)
[07:22:47] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 240 seconds)
[07:22:47] *** Quits: sharpertool (sid80151@stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[07:23:09] *** Quits: jesse-s (sid98646@id-98646.stonehaven.irccloud.com) (Ping timeout: 250 seconds)
[07:23:20] *** Quits: morgabra (sid500580@user/morgabra) (Read error: Connection reset by peer)
[07:23:22] *** Quits: crazysim (sid86009@stonehaven.irccloud.com) (Read error: Connection reset by peer)
[07:23:22] *** Quits: Lvl4Sword (sid483043@user/lvl4sword) (Read error: Connection reset by peer)
[07:23:27] *** Quits: flagrama (sid145621@id-145621.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[07:23:28] *** Quits: llinguini (sid257922@id-257922.stonehaven.irccloud.com) (Read error: Connection reset by peer)
[07:23:38] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Read error: Connection reset by peer)
[07:24:01] *** Quits: WhyNotHugo (sid269118@id-269118.stonehaven.irccloud.com) (Ping timeout: 250 seconds)
[07:24:07] *** Quits: altendky (sid135382@stonehaven.irccloud.com) (Ping timeout: 252 seconds)
[07:24:07] *** Quits: pjlsergeant (sid143467@stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[07:24:10] *** Quits: johnny_ (sid481967@id-481967.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[07:24:27] *** Quits: Tiago_Paolini (sid172748@id-172748.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[07:24:27] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (Ping timeout: 240 seconds)
[07:24:40] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Quit: leaving)
[07:24:50] *** Joins: montybanksnyc (~montybank@pool-71-127-199-18.nwrknj.fios.verizon.net)
[07:25:32] *** Joins: llinguini (sid257922@stonehaven.irccloud.com)
[07:25:45] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 250 seconds)
[07:26:02] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[07:26:04] *** Joins: raydeeam (uid325131@dgplug/raydeeam)
[07:26:09] *** Joins: johnny_ (sid481967@id-481967.stonehaven.irccloud.com)
[07:26:09] *** Joins: Pr0phet (sid505706@id-505706.stonehaven.irccloud.com)
[07:26:12] *** Joins: sharpertool (sid80151@id-80151.stonehaven.irccloud.com)
[07:26:16] *** Joins: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com)
[07:26:19] *** Joins: Tiago_Paolini (sid172748@id-172748.stonehaven.irccloud.com)
[07:26:22] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[07:26:31] *** Joins: altendky (sid135382@id-135382.stonehaven.irccloud.com)
[07:26:35] *** Joins: morgabra (sid500580@user/morgabra)
[07:26:35] *** Joins: pjlsergeant (sid143467@id-143467.stonehaven.irccloud.com)
[07:26:36] *** Joins: flagrama (sid145621@id-145621.stonehaven.irccloud.com)
[07:26:38] *** Joins: WhyNotHugo (sid269118@id-269118.stonehaven.irccloud.com)
[07:26:38] *** Joins: crazysim (sid86009@stonehaven.irccloud.com)
[07:26:46] *** Joins: Lvl4Sword (sid483043@user/lvl4sword)
[07:29:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:31:07] *** Joins: fikran (~fikran@user/fikran)
[07:31:37] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[07:33:13] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[07:33:25] *** Joins: thiras (~thiras@user/thiras)
[07:33:38] *** Joins: montxero (~user@149.167.149.74)
[07:36:01] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[07:37:16] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[07:37:54] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:39:04] *** Quits: DaPinkOne (~Dap@user/dap) (Ping timeout: 250 seconds)
[07:40:37] *** Quits: Samian (~Sami@163.114.130.6) (Ping timeout: 252 seconds)
[07:40:44] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Ping timeout: 252 seconds)
[07:40:52] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:41:28] *** Joins: emika5 (~emika@185.207.249.150)
[07:41:51] *** Joins: devcpu (~rusty@104.243.107.236)
[07:42:27] *** Quits: emika (~emika@83.136.182.32) (Ping timeout: 240 seconds)
[07:42:27] *** emika5 is now known as emika
[07:43:13] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:43:24] *** Quits: techsurvivor (~don@89.46.62.34) (Ping timeout: 250 seconds)
[07:49:18] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[07:50:01] *** Quits: gggp (~textual@60.10.194.43) (Ping timeout: 248 seconds)
[07:51:25] <DarkHelmet> jazzy & nedbat: I got my code working
[07:51:29] <DarkHelmet> thanks for the help
[07:51:39] <jazzy> uh
[07:51:40] <jazzy> no prob?
[07:51:56] <DarkHelmet> I'm just excited it works
[07:52:00] <jazzy> anything for you
[07:53:08] *** Joins: gggp (~textual@60.10.194.43)
[07:57:45] *** Joins: zensei (~zensei@user/zensei)
[07:59:44] *** Joins: Sky_Net (~Sky_Net@176.14.213.85)
[07:59:59] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[08:00:10] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 240 seconds)
[08:01:15] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[08:01:27] *** Quits: gambl0re (~gambl0re@104.247.229.76) (Ping timeout: 240 seconds)
[08:02:13] *** Joins: mei (~mei@user/mei)
[08:03:51] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Remote host closed the connection)
[08:05:28] *** Joins: gambl0re (~gambl0re@216.154.16.193)
[08:06:03] *** Quits: i0e (~is0ke3@user/is0ke3) (Remote host closed the connection)
[08:06:57] *** Joins: DaPinkOne (~Dap@user/dap)
[08:08:16] *** Joins: goose_king (~goose_kin@c-73-222-94-40.hsd1.ca.comcast.net)
[08:08:41] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[08:08:45] *** Joins: i0e (~is0ke3@user/is0ke3)
[08:08:57] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[08:09:46] *** Quits: y04nn (~y04nn@91.193.4.154) (Ping timeout: 252 seconds)
[08:10:01] *** Joins: semeion (~semeion@user/semeion)
[08:10:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:10:16] *** Quits: gggp (~textual@60.10.194.43) (Ping timeout: 250 seconds)
[08:10:46] *** semeion is now known as mnemonic
[08:12:20] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[08:12:54] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[08:13:59] *** Quits: iNeedKoffee (~ubuntu@public.sa-edbd-dsto-liva1.aarnet.net.au) (Read error: No route to host)
[08:14:32] *** Joins: gggp (~textual@60.10.194.43)
[08:14:43] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[08:16:57] *** Quits: gambl0re (~gambl0re@216.154.16.193) (Quit: WeeChat 3.2)
[08:17:57] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[08:19:21] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Ping timeout: 248 seconds)
[08:20:52] *** Quits: goose_king (~goose_kin@c-73-222-94-40.hsd1.ca.comcast.net) (Quit: Leaving)
[08:21:29] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:24:21] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:24:29] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[08:24:50] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[08:25:02] *** Quits: czuk_cza (~mist@188.147.100.88.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 245 seconds)
[08:25:55] *** Quits: nomic (~nomic@185.217.117.169) (Quit: Leaving)
[08:29:02] *** Joins: upsala (~zcb@185.213.155.160)
[08:29:33] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[08:29:35] *** Joins: TML (~tml@user/tml)
[08:29:40] *** Quits: nergar (~Nergar@177.225.152.16) (Read error: Connection reset by peer)
[08:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[08:31:08] *** Joins: djhankb (~djhankb@208.113.164.68)
[08:31:44] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[08:31:47] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[08:32:21] *** Joins: montxero (~user@149.167.149.74)
[08:33:18] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[08:33:27] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Remote host closed the connection)
[08:33:30] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[08:33:53] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[08:34:35] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-d56c-0dd4-b0ec-7c5a.res6.spectrum.com) (Read error: Connection reset by peer)
[08:34:46] *** Quits: tkazi (~tkazi@user/tkazi) (Quit: Disconnected)
[08:34:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:35:06] *** Joins: tkazi (~tkazi@user/tkazi)
[08:35:14] *** Quits: tkazi (~tkazi@user/tkazi) (Remote host closed the connection)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:36] *** Joins: tkazi (~tkazi@user/tkazi)
[08:40:26] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[08:42:01] *** Quits: medium_cool (~medium_co@2605:a601:a9ed:4300:2889:67cd:dc14:c8f5) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[08:43:01] *** Joins: parzival (~parzival@user/parzival)
[08:44:22] *** Joins: saroy (~Sandipan@43.252.250.83)
[08:45:39] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[08:46:33] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 248 seconds)
[08:46:51] *** Joins: midnite (~human@user/midnightlantern)
[08:47:29] *** Quits: gggp (~textual@60.10.194.43) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:50:25] *** Quits: i0e (~is0ke3@user/is0ke3) (Remote host closed the connection)
[08:54:19] *** Quits: upsala (~zcb@185.213.155.160) (Ping timeout: 252 seconds)
[08:54:28] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 250 seconds)
[08:54:51] *** Quits: midnite (~human@user/midnightlantern) (Quit: brb)
[08:55:50] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[08:58:32] *** Joins: sharperguy_ (~sharpergu@88.130.223.12)
[09:01:05] *** Quits: sharperguy__ (~sharpergu@2001:16b8:5cf2:5b00:2633:59f3:621a:18de) (Ping timeout: 250 seconds)
[09:01:08] *** Quits: Sky_Net (~Sky_Net@176.14.213.85) (Read error: Connection reset by peer)
[09:01:27] *** Joins: khrbt (~znc@user/khrbt)
[09:03:06] *** Quits: stealth_ (~stelath_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[09:04:00] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Remote host closed the connection)
[09:04:27] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[09:08:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[09:08:59] *** Joins: i0e (~is0ke3@user/is0ke3)
[09:10:40] *** Quits: stoneware (~stoneware@user/stoneware) (Quit: I'll be back soon)
[09:10:59] *** Quits: tf (~tf@user/tf) (*.net *.split)
[09:10:59] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[09:11:00] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[09:11:00] *** Quits: BlackBishop (dexter@user/blackbishop) (*.net *.split)
[09:11:00] *** Quits: Amun-Ra (~amun-ra@retro.rocks) (*.net *.split)
[09:11:00] *** Quits: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2) (*.net *.split)
[09:11:00] *** Quits: cyphase (~cyphase@user/cyphase) (*.net *.split)
[09:11:00] *** Quits: redkrieg (~redkrieg@user/redkrieg) (*.net *.split)
[09:11:00] *** Quits: duracrisis (~kkh@user/duracrisis) (*.net *.split)
[09:11:00] *** Quits: notevil (~notevil@user/notevil) (*.net *.split)
[09:11:00] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[09:11:00] *** Quits: nubonix (uid492751@id-492751.charlton.irccloud.com) (*.net *.split)
[09:11:00] *** Quits: darxun (sid504814@id-504814.tinside.irccloud.com) (*.net *.split)
[09:11:00] *** Quits: Evolver (sid32215@user/evolver) (*.net *.split)
[09:11:00] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (*.net *.split)
[09:11:00] *** Quits: birkoff (birkoff@user/birkoff) (*.net *.split)
[09:11:00] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[09:11:00] *** Quits: suffer (znc@mutant.penguin.fyi) (*.net *.split)
[09:11:00] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[09:11:00] *** Quits: tofran (~tofran@37.189.158.134) (*.net *.split)
[09:11:00] *** Quits: kujo2 (~kujo@188.166.12.52) (*.net *.split)
[09:11:00] *** Quits: utunbu_ (~utunbu@user/utunbu) (*.net *.split)
[09:11:00] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (*.net *.split)
[09:11:00] *** Quits: lack (~lack@user/lack) (*.net *.split)
[09:11:00] *** Quits: amosbird (~amosbird@13.75.119.182) (*.net *.split)
[09:11:00] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (*.net *.split)
[09:11:00] *** Quits: julia (~quassel@user/julia) (*.net *.split)
[09:11:00] *** Quits: Anderson-D (sid146635@id-146635.tinside.irccloud.com) (*.net *.split)
[09:11:00] *** Quits: JacobFrost (sid494713@id-494713.tinside.irccloud.com) (*.net *.split)
[09:11:00] *** Quits: cloudcell (sid48145@user/cloudcell) (*.net *.split)
[09:11:00] *** Quits: dxrt (~dxrt@user/dxrt) (*.net *.split)
[09:11:00] *** Quits: vince (~vince@75.127.14.76) (*.net *.split)
[09:11:00] *** Quits: kushal (~hopless@dgplug/kushal) (*.net *.split)
[09:11:00] *** Quits: godlike (~godlike@user/godlike) (*.net *.split)
[09:11:00] *** Quits: encukou_ (~quassel@nat-pool-brq-t.redhat.com) (*.net *.split)
[09:11:00] *** Quits: mgubyt_ (u@mgub.yt) (*.net *.split)
[09:11:00] *** Quits: synbiose (~synbiose@user/synbiose) (*.net *.split)
[09:11:00] *** Quits: fleabag (~sirpengi@li587-65.members.linode.com) (*.net *.split)
[09:11:00] *** Quits: frrs (~ferros@vps-eacaba1b.vps.ovh.net) (*.net *.split)
[09:11:00] *** Quits: OPK (~OPK@user/opk) (*.net *.split)
[09:11:00] *** Quits: stigz (sid371747@id-371747.tinside.irccloud.com) (*.net *.split)
[09:11:00] *** Quits: Repiphany (~Repiphany@user/repiphany) (*.net *.split)
[09:11:00] *** Quits: mpmc (~mpmc@user/mpmc) (*.net *.split)
[09:11:00] *** Quits: rpittau (sid346891@id-346891.tinside.irccloud.com) (*.net *.split)
[09:11:00] *** Quits: syllin (~syllin@user/syllin) (*.net *.split)
[09:11:00] *** Quits: mawk (mawk@wireguard/contributor/mawk) (*.net *.split)
[09:11:00] *** Quits: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net) (*.net *.split)
[09:11:00] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[09:11:00] *** Quits: ilmais1n (~il@irc.oh1cgn.fi) (*.net *.split)
[09:11:00] *** Quits: ens (~ens@yoke.ch0wn.org) (*.net *.split)
[09:11:00] *** Quits: Antibody (~Antibody@107.170.145.30) (*.net *.split)
[09:11:00] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[09:11:00] *** Quits: Somni (insomnia@77-88-237-24.gci.net) (*.net *.split)
[09:11:00] *** Quits: BytesAndCoffee (~libera@bytes.coffee) (*.net *.split)
[09:11:00] *** Quits: AUDaags (~ubuntu@ec2-3-106-166-31.ap-southeast-2.compute.amazonaws.com) (*.net *.split)
[09:11:00] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (*.net *.split)
[09:11:00] *** Quits: CrunchyChewie (~CrunchyCh@user/crunchychewie) (*.net *.split)
[09:11:00] *** Quits: alexyov (~alexyov@84.22.6.244) (*.net *.split)
[09:11:00] *** Quits: KernelPanic (~KernelPan@user/kernelpanic) (*.net *.split)
[09:11:00] *** Quits: Wu (~wu@158.red-83-50-192.dynamicip.rima-tde.net) (*.net *.split)
[09:11:00] *** Quits: Mikro (leo@libera.ninja) (*.net *.split)
[09:11:00] *** Quits: kevr (~kevr@user/kevr) (*.net *.split)
[09:11:00] *** Quits: Quietus (~quietus@2a04:52c0:101:181::) (*.net *.split)
[09:11:00] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (*.net *.split)
[09:11:00] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (*.net *.split)
[09:11:11] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[09:11:11] *** Joins: amosbird (~amosbird@13.75.119.182)
[09:11:12] *** Joins: Wu (~wu@158.red-83-50-192.dynamicip.rima-tde.net)
[09:11:15] *** Joins: darxun (sid504814@id-504814.tinside.irccloud.com)
[09:11:18] *** Joins: Evolver (sid32215@user/evolver)
[09:11:24] *** Joins: mgubyt (u@mgub.yt)
[09:11:26] *** Joins: notevil (~notevil@user/notevil)
[09:11:27] *** Joins: utunbu_ (~utunbu@user/utunbu)
[09:11:28] *** Joins: syllin (~syllin@user/syllin)
[09:11:38] *** Joins: lack (~lack@user/lack)
[09:11:38] *** Joins: shodan45 (~quassel@107.161.22.155)
[09:11:41] *** Joins: alexyov (~alexyov@79.124.0.2)
[09:11:43] *** Joins: godlike (~godlike@user/godlike)
[09:11:45] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[09:11:59] *** Joins: julia (~quassel@user/julia)
[09:12:29] *** Joins: kevr (~kevr@user/kevr)
[09:12:32] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca)
[09:12:36] *** Joins: KernelPanic (~KernelPan@user/kernelpanic)
[09:12:38] *** Joins: duracrisis (~kkh@user/duracrisis)
[09:12:44] *** Joins: greatgatsby (~greatgats@142.114.106.7)
[09:12:44] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
[09:12:45] *** Joins: dxrt (~dxrt@user/dxrt)
[09:12:45] *** Joins: suffer (znc@mutant.penguin.fyi)
[09:12:48] *** Joins: CrunchyChewie (~CrunchyCh@user/crunchychewie)
[09:12:49] *** Joins: BytesAndCoffee (~libera@bytes.coffee)
[09:12:49] *** Joins: quesker (~idnet@mail.89vx.net)
[09:12:55] *** Joins: Repiphany (~Repiphany@user/repiphany)
[09:12:55] *** Joins: Antibody (~Antibody@107.170.145.30)
[09:12:58] *** Joins: OPK (~OPK@user/opk)
[09:13:02] *** Joins: encukou (~quassel@nat-pool-brq-t.redhat.com)
[09:13:02] *** Joins: Quietus (~quietus@2a04:52c0:101:181::)
[09:13:06] *** Joins: JacobFrost (sid494713@id-494713.tinside.irccloud.com)
[09:13:07] *** Quits: greatgatsby (~greatgats@142.114.106.7) (Remote host closed the connection)
[09:13:09] *** Joins: kujo2 (~kujo@188.166.12.52)
[09:13:31] *** Joins: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[09:14:10] *** Joins: mpmc (~mpmc@user/mpmc)
[09:14:34] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:14:49] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[09:15:08] *** Quits: cole (~cole@user/cole) (*.net *.split)
[09:15:08] *** Quits: Techcable (~Techcable@168.235.93.147) (*.net *.split)
[09:15:08] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[09:15:08] *** Quits: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com) (*.net *.split)
[09:15:08] *** Quits: adamchainz (~adamj@51.15.34.126) (*.net *.split)
[09:15:08] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[09:15:08] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[09:15:08] *** Quits: FunkyBob (~curtis@vhost3.tinbrain.net) (*.net *.split)
[09:15:08] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[09:15:08] *** Quits: Kingsy (~chris@kingsy.co.uk) (*.net *.split)
[09:15:08] *** Quits: mabi (~m42e@pb42.de) (*.net *.split)
[09:15:08] *** Quits: _Mocramis (~mocramis@dalaran.sceen.net) (*.net *.split)
[09:15:08] *** Quits: dlam1 (~dlam@dlam.me) (*.net *.split)
[09:15:08] *** Quits: njt (~njt@zaph.org) (*.net *.split)
[09:15:08] *** Quits: mjh4386_ (~mjh4386@165.22.53.231) (*.net *.split)
[09:15:08] *** Quits: ario_ (~ario@159.65.220.102) (*.net *.split)
[09:15:08] *** Quits: sco1 (~sco1@charon.whatbox.ca) (*.net *.split)
[09:15:08] *** Quits: librenaut (~librenaut@user/librenaut) (*.net *.split)
[09:15:08] *** Quits: glider (~glider@user/glider) (*.net *.split)
[09:15:08] *** Quits: grym (~grym@user/grym) (*.net *.split)
[09:15:08] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (*.net *.split)
[09:15:08] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (*.net *.split)
[09:15:08] *** Quits: bookworm (~bookworm@neomutt/bookworm) (*.net *.split)
[09:15:08] *** Quits: SeeM (~SeeM@153.ip-54-38-53.eu) (*.net *.split)
[09:15:08] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[09:15:08] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (*.net *.split)
[09:15:08] *** Quits: mbrndtgn5 (~mbrndtgn@undecidable.de) (*.net *.split)
[09:15:08] *** Quits: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net) (*.net *.split)
[09:15:08] *** Quits: Logi (~quassel@83.229.86.115) (*.net *.split)
[09:15:08] *** Quits: spaceone (~spaceone@wc1.wechall.net) (*.net *.split)
[09:15:08] *** Quits: Oddity (Oddity@user/oddity) (*.net *.split)
[09:15:08] *** Quits: CyberShadow (vladimir@89.28.117.31) (*.net *.split)
[09:15:08] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[09:15:08] *** Quits: gerty (~gerty@user/gerty) (*.net *.split)
[09:15:08] *** Quits: ttkpy (501@46-97-229-216.sr2.pon.net) (*.net *.split)
[09:15:08] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (*.net *.split)
[09:15:08] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[09:15:08] *** Quits: ATAD (~ATAD@user/atad) (*.net *.split)
[09:15:08] *** Quits: Geronimo (~Geronimo@user/geronimo) (*.net *.split)
[09:15:08] *** Quits: az (az@user/azz) (*.net *.split)
[09:15:08] *** Quits: adium (adium@user/adium) (*.net *.split)
[09:15:08] *** Quits: struct0 (~struct0@104.248.115.49) (*.net *.split)
[09:15:08] *** Quits: guntbert (~yesitsme@user/guntbert) (*.net *.split)
[09:15:08] *** Quits: poorboy (~poorboy@159.89.189.144) (*.net *.split)
[09:15:08] *** Quits: TallonRain (sid214799@user/tallonrain) (*.net *.split)
[09:15:08] *** Quits: ormiret (sid314108@tooting.irccloud.com) (*.net *.split)
[09:15:08] *** Quits: roolebo (sid64806@charlton.irccloud.com) (*.net *.split)
[09:15:08] *** Quits: nac (~nac@user/nac) (*.net *.split)
[09:15:08] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[09:15:08] *** Quits: harleypig (thelounge@harleypig.com) (*.net *.split)
[09:15:08] *** Quits: dob1 (~dob1@user/dob1) (*.net *.split)
[09:15:08] *** Quits: byzandula (~byzandula@beerbq.net) (*.net *.split)
[09:15:08] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[09:15:08] *** Quits: trashbird (~trashbird@user/trashbird) (*.net *.split)
[09:15:08] *** Quits: odinsbane (~mbs@pat-pool-138.crick.ac.uk) (*.net *.split)
[09:15:08] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (*.net *.split)
[09:15:08] *** Quits: Forty-Bot (~kvirc@pool-108-45-127-224.washdc.fios.verizon.net) (*.net *.split)
[09:15:08] *** Quits: nuala (~nuala@user/nuala) (*.net *.split)
[09:15:08] *** Quits: lystra_ (~lystra@d53-64-11-169.nap.wideopenwest.com) (*.net *.split)
[09:15:08] *** Quits: ntdll (~ntdll@user/ntdll) (*.net *.split)
[09:15:08] *** Quits: remexre (~nathan@user/remexre) (*.net *.split)
[09:15:08] *** Quits: saschi (~saschi@user/saschi) (*.net *.split)
[09:15:08] *** Quits: harm_ (~urth@geertswei.nl) (*.net *.split)
[09:15:08] *** Quits: Fingel_ (~fingel@user/fingel) (*.net *.split)
[09:15:08] *** Quits: mwilson (~mwilson@li159-72.members.linode.com) (*.net *.split)
[09:15:08] *** Quits: voidcat (~voidcat@user/voidcat) (*.net *.split)
[09:15:08] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[09:15:08] *** Quits: _janus (~janus@blotter.ld-linux.so) (*.net *.split)
[09:15:08] *** Quits: chilversc (~chilversc@user/chilversc) (*.net *.split)
[09:15:08] *** Quits: janemba (~janemba@94.204.254.193) (*.net *.split)
[09:15:08] *** Quits: mkoskar (~mkoskar@user/mkoskar) (*.net *.split)
[09:15:08] *** Quits: sybariten (~jake@157.90.217.120) (*.net *.split)
[09:15:08] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (*.net *.split)
[09:15:19] *** Joins: TallonRain (sid214799@user/tallonrain)
[09:15:19] *** Joins: adamchainz (~adamj@51.15.34.126)
[09:15:19] *** Joins: ario (~ario@159.65.220.102)
[09:15:25] *** Joins: mwilson (~mwilson@li159-72.members.linode.com)
[09:15:25] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[09:15:26] *** Joins: SeeM (~SeeM@153.ip-54-38-53.eu)
[09:15:28] *** Joins: FunkyBob (~curtis@vhost3.tinbrain.net)
[09:15:29] *** Joins: ormiret (sid314108@id-314108.tooting.irccloud.com)
[09:15:31] *** Joins: harleypig (thelounge@harleypig.com)
[09:15:34] *** Joins: urth (~urth@geertswei.nl)
[09:15:36] *** Joins: mbrndtgn5 (~mbrndtgn@undecidable.de)
[09:15:55] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[09:16:09] *** Joins: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net)
[09:16:31] *** Joins: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com)
[09:16:31] *** Joins: Byteflux (~byte@byteflux.net)
[09:16:31] *** Joins: sco1 (~sco1@charon.whatbox.ca)
[09:16:37] *** Joins: kushal (~hopless@dgplug/kushal)
[09:16:37] *** Joins: Techcable (~Techcable@168.235.93.147)
[09:16:37] *** Joins: AUDaags (~ubuntu@ec2-3-106-166-31.ap-southeast-2.compute.amazonaws.com)
[09:16:39] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[09:16:41] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[09:16:42] *** Joins: poorboy (~poorboy@159.89.189.144)
[09:16:44] *** Joins: mjh4386 (~mjh4386@165.22.53.231)
[09:16:44] *** Joins: dob1 (~dob1@user/dob1)
[09:16:45] *** Joins: _janus (~janus@blotter.ld-linux.so)
[09:16:47] *** Joins: voidcat (~voidcat@user/voidcat)
[09:16:48] *** Joins: mkoskar (~mkoskar@user/mkoskar)
[09:16:48] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[09:16:49] *** Joins: BUSY (~BUSY@user/busy)
[09:16:50] *** Joins: CyberShadow (vladimir@89.28.117.31)
[09:16:52] *** Joins: Fingel (~fingel@user/fingel)
[09:16:52] *** Joins: wyre (~wyre@user/wyre)
[09:16:54] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[09:16:54] *** Joins: njt (~njt@zaph.org)
[09:16:54] *** Joins: ATAD (~ATAD@user/atad)
[09:16:54] *** Joins: remexre (~nathan@user/remexre)
[09:16:57] *** Joins: struct0 (~struct0@104.248.115.49)
[09:16:57] *** Joins: ntdll (~ntdll@user/ntdll)
[09:16:58] *** Joins: byzandula (~byzandula@beerbq.net)
[09:16:59] *** Joins: glider (~glider@user/glider)
[09:17:01] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[09:17:01] *** Joins: bookworm (~bookworm@neomutt/bookworm)
[09:17:02] *** Joins: Teacup (~teacup@user/teacup)
[09:17:03] *** Joins: dlam1 (~dlam@dlam.me)
[09:17:23] *** Joins: energizer (~energizer@user/energizer)
[09:17:44] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[09:18:27] *** Joins: trashbird (~trashbird@user/trashbird)
[09:19:07] *** Joins: adium (adium@user/adium)
[09:19:29] *** Joins: cole (~cole@user/cole)
[09:19:43] *** Quits: jazzy (~jaziz@2600:380:4671:e333:dd8c:f4f8:72d8:f607) (Ping timeout: 250 seconds)
[09:20:23] *** Joins: chilversc (~chilversc@user/chilversc)
[09:20:29] *** Joins: grym (~grym@user/grym)
[09:20:30] *** Joins: guntbert (~yesitsme@user/guntbert)
[09:21:48] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:e697:e089:9dad:448c)
[09:23:42] *** Joins: stoneware (~stoneware@user/stoneware)
[09:25:23] *** Joins: Oddity (Oddity@user/oddity)
[09:26:54] *** Joins: manin (~x@185.242.190.95)
[09:27:57] *** Joins: birkoff (birkoff@user/birkoff)
[09:27:57] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:27:59] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[09:28:19] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[09:28:36] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[09:30:03] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[09:33:52] *** Joins: Wulf (~Wulf@user/wulf)
[09:34:38] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[09:38:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[09:39:10] <tusko> What is the easiest way to generate 256 hexadecimal numbers of the 00-ff, but with 30 leading zeroes?
[09:39:32] <tusko> That is 00000...00000 to 00000...000ff
[09:39:46] <tusko> each number should be 32-bits
[09:40:05] <tusko> well, 32-characters
[09:40:28] *** Joins: fikran (~fikran@user/fikran)
[09:41:32] *** Quits: portalrat (~portalrat@user/portalrat) (Remote host closed the connection)
[09:41:48] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:41:56] *** Joins: portalrat (~portalrat@user/portalrat)
[09:43:10] *** Quits: computeiro (~Wender@189.37.64.248) (Ping timeout: 240 seconds)
[09:43:27] <leduyquang753> 30 zeroes followed by 00 to ff.
[09:48:12] <quesker>  perl -e 'for $i (0x00..0xff) { printf "%032x\n", $i}'
[09:49:03] <quesker> the 35 lines of python to do it are left as an exercise for the reader
[09:50:27] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 240 seconds)
[09:52:57] <themill> scnr: python3 -c 'for i in range(0xff): print("%032x" % i)'
[09:53:15] <themill> ok + 1 to the range
[09:53:47] <tusko> Ok, so I'm trying to do something like this https://bpa.st/UYHQ
[09:55:06] <tusko> I know the key is somewhere in the range 0x00 and 0xff, but it must be a 16-byte key with 15-bytes of leading zeroes.
[09:57:41] <quesker> I wonder why range has that off by one problem
[09:57:57] *** Joins: gggp (~textual@60.10.194.43)
[09:58:22] <quesker> btw printf is so easily searched but I was searching like crazy for a way in python and none of that weird % % stuff came up
[09:59:35] *** Quits: emerent (~quassel@p200300cd5701a12dba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[09:59:42] *** Joins: emerent_ (~quassel@p200300cd5701a19fba27ebfffed28a59.dip0.t-ipconnect.de)
[09:59:42] <audiocat> how can i reference an the class method of a subclass within a class?
[09:59:42] *** emerent_ is now known as emerent
[10:00:02] <grawity> tusko: I'm pretty sure you need to binascii.unhexlify() all that stuff before giving it to Crypto.AES
[10:00:33] <tusko> grawity, which stuff exactly?
[10:01:47] <tusko> I think you're right, to be honest
[10:02:13] <tusko> I have the hex, but what I actually need is some other cipher format
[10:04:13] *** Quits: manin (~x@185.242.190.95) (Ping timeout: 252 seconds)
[10:05:03] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Remote host closed the connection)
[10:05:13] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[10:05:34] <grawity> tusko: both the message and the key
[10:06:04] <tusko> so the key should be in binary as well?
[10:06:06] <grawity> yes
[10:06:34] <tusko> Ok, let me see if I'm following you. sec to write some code
[10:06:48] <grawity> it's not a password; it's literally a 128-bit key -- so Crypto expects to receive a 16-byte-long bytes() object
[10:07:19] <audiocat> HELLO?
[10:07:28] <audiocat> how can i reference an the class method of a subclass within a class?
[10:07:44] * grawity adjusts audiocat's volume
[10:08:00] <grawity> generally parent classes are not supposed to reference subclasses, I think?
[10:08:01] <tusko> grawity, so something like this https://bpa.st/SISA ?
[10:08:24] <grawity> meanwhile a subclass can use super().foo or possibly ParentClass.foo to reference a parent method
[10:08:41] <grawity> tusko: yes
[10:09:41] <tusko> That gave me an AttributeError: AESCipher instance has no __call__ method
[10:09:46] <audiocat> grawity, i have it backwards
[10:09:52] <grawity> decipher.decrypt(msg)
[10:10:05] <grawity> audiocat: code example?
[10:10:35] <tusko> yo
[10:10:37] <tusko> YO
[10:10:47] <tusko> You are dat dude.
[10:11:29] <audiocat> grawity, i meant how can reference the method of a superclass within a subclass. `class CustomThing(DefaultThing):` DefaultThing has `def something():` and I want to use `something()` inside of a method in `CustomThing`
[10:11:31] *** Joins: OPK (~OPK@user/opk)
[10:11:58] <grawity> the usual way is super().something()
[10:12:01] <audiocat> grawity, 'super' object has no attribute 'something'
[10:12:14] <grawity> yeah, you have to call super() like a function
[10:12:16] <audiocat> does not work grawity
[10:12:24] <grawity> (it used to be super(something, whatever) in py2)
[10:12:35] <audiocat> im using python3
[10:12:58] <grawity> yeah but you still have to use super().something, not just super.something
[10:13:20] *** Quits: schumaml (~schumaml@p57b7e419.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:13:46] <audiocat> super(CustomThing,self).something grawity ?
[10:14:01] <grawity> in py2 yes, in py2 nah, just super().something
[10:14:01] *** Joins: schumaml (~schumaml@p200300e2ef05560053c1821a43d17d29.dip0.t-ipconnect.de)
[10:14:02] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:11f:6f56:3059:857e) (Read error: Connection reset by peer)
[10:14:07] <grawity> err
[10:14:12] <grawity> in py3 just super().something
[10:14:27] <audiocat> grawity, WRONG
[10:14:37] <audiocat> i tried that and got the error i pasted
[10:14:54] <grawity> audiocat: DO YOU FUCKING THINK YOU CAN FUCKING YELL AT ME
[10:15:02] <grawity> audiocat: ARE YOU GIVING ME A GODDAMN TEST OR WHAT
[10:15:11] <leduyquang753> Show what you tried.
[10:15:13] <audiocat> tried super(CustomThing, self).something() and that gave the same error
[10:15:15] <grawity> okay now that that's out of the way
[10:15:53] <audiocat> grawity, do you want me to show you the code?
[10:15:59] <grawity> yes I'd like you to show the code
[10:16:33] <audiocat> grawity, https://bpa.st/AANA -- DefaultAccountAdapter code: https://github.com/pennersr/django-allauth/blob/master/allauth/account/adapter.py#L41
[10:16:38] *** Quits: mnemonic (~semeion@user/semeion) (Quit: WeeChat 3.2)
[10:17:08] <audiocat> grawity, in the bpaste, relevant lines are L59 and L61
[10:17:11] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[10:17:39] *** Joins: montxero (~user@149.167.149.74)
[10:17:58] <grawity> the code looks okay and I can't see how this gives the exact error you posted earlier; do you have a full backtrace?
[10:18:25] <audiocat> grawity, https://bpa.st/JXKA
[10:18:55] <voidcat> why not just super() with no args?
[10:19:31] <voidcat> super().method_from_parent() should work without anything special
[10:19:34] *** Quits: gggp (~textual@60.10.194.43) (Ping timeout: 252 seconds)
[10:19:55] *** Joins: jinsun (~quassel@user/jinsun)
[10:20:22] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[10:20:32] <audiocat> voidcat, i tried that first, same error
[10:22:08] *** Joins: gggp (~textual@60.10.194.43)
[10:22:20] <grawity> hmm, now that I think of it, do you even *need* to reference the parent class? your subclass has those methods inherited anyway, and you're not actually overriding them, so you should be able to use self.something()
[10:22:38] <grawity> but regarding the actual error
[10:22:51] <grawity> since this is a private _method, are you sure it exists in the specific version that you're using?
[10:23:09] <grawity> I see it was only added 13 months ago in git
[10:23:44] <grawity> i.e. take a look at /home/mike/projects/doozer/tc_django/venv/lib/python3.8/site-packages/allauth/account/adapter.py specifically
[10:24:15] <grawity> most likely, "no such attribute" literally means that there is no such attribute in your version
[10:24:43] <audiocat> grawity, the reason i tried to use super() was because self.something() was not working
[10:24:57] <audiocat> ok one sec
[10:25:13] <voidcat> if you have >=0.43.0 it should be in there
[10:25:52] <audiocat> voidcat, i have 0.42.0
[10:25:58] <audiocat> dayum
[10:26:01] <audiocat> thanks guys
[10:26:01] <voidcat> aha lmao
[10:26:06] <audiocat> grawity, but dude
[10:26:20] <audiocat> grawity, what do you mean "inherited"?
[10:26:32] <audiocat> when would i ever not need to use super() ?
[10:26:37] <audiocat> in a case like this
[10:26:50] <audiocat> with a subclass whose parent class' methods i want to access
[10:27:09] <grawity> if you just do a 'class Foo(DefaultAccountAdapter)', then Foo literally has all the methods and attributes of its parent
[10:27:36] <audiocat> grawity, then why is super ever needed?
[10:27:38] <grawity> just like outside callers can use .new_user() or .save_user() on your custom class, even though you aren't defining those functions
[10:27:47] <grawity> so can your class itself call self.new_user() or whatever
[10:27:57] *** Joins: fanis30 (~anon@adsl-209.37.6.3.tellas.gr)
[10:27:57] <voidcat> the child class inherits all the methods from the parent, so as long as you don't re-implment the behaviour of the parent's method in the child, you don't need super(). if you want to change the behaviour *and* call the old behaviour, use super()
[10:28:01] <grawity> generally super() is only needed when you *did* override those methods and specifically want to call the parent
[10:28:10] <audiocat> ohhh
[10:28:16] <grawity> e.g. if you have a custom authenticate() that needs to call the "original" authenticate()
[10:28:20] <audiocat> well darn tootin
[10:28:30] *** Quits: gggp (~textual@60.10.194.43) (Ping timeout: 250 seconds)
[10:28:31] <voidcat> calling super().__init__() is a common use-case for me
[10:28:39] *** Joins: diamondbond (~diamondbo@112.134.170.153)
[10:28:42] <voidcat> in a child class's __init__
[10:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[10:31:05] *** Joins: djhankb (~djhankb@208.113.164.68)
[10:31:23] *** Joins: gggp (~textual@60.10.194.43)
[10:33:50] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[10:34:24] *** Joins: jazzy (~jaziz@2600:380:4671:e333:9dac:5e57:172f:3175)
[10:36:15] *** Joins: iflema (~ian@user/iflema)
[10:36:23] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[10:36:34] *** Quits: pavelow (~pavelow@opticalchimp.com) (Ping timeout: 256 seconds)
[10:37:15] *** Joins: pavelow (~pavelow@opticalchimp.com)
[10:38:15] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[10:38:38] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Client Quit)
[10:38:44] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[10:38:53] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:39:10] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Remote host closed the connection)
[10:40:00] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[10:41:20] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:42:58] *** Quits: parzival (~parzival@user/parzival) (Quit: Leaving)
[10:44:31] *** Joins: minip (~minip@user/minip)
[10:46:10] *** Quits: Bardon (~Bardon@user/Bardon) (Ping timeout: 240 seconds)
[10:46:19] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:52] *** Joins: seednode (~seednode@user/seednode)
[10:48:12] *** Quits: gggp (~textual@60.10.194.43) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:48:33] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 250 seconds)
[10:48:41] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:cca9:b466:1d3f:ec1e:75f1) (Remote host closed the connection)
[10:50:39] *** Quits: sandb0y (~pirate@user/sandb0y) (Quit: WeeChat 3.2)
[10:52:30] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[10:52:56] *** Joins: montxero (~user@149.167.149.74)
[10:53:16] *** Joins: gggp (~textual@60.10.194.43)
[10:59:01] *** Joins: gusto (~Augustus@109.255.100.54)
[11:00:10] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:01:30] *** Joins: p-i- (~Ohmu@171.6.224.111)
[11:02:33] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[11:03:22] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:04:34] *** Quits: fanis30 (~anon@adsl-209.37.6.3.tellas.gr) (Quit: WeeChat 3.2)
[11:04:41] *** Joins: kosh (~kosh@user/kosh)
[11:05:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:05:24] *** Quits: gggp (~textual@60.10.194.43) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:05:40] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:06:54] *** Joins: palasso (~palasso@user/palasso)
[11:07:03] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[11:08:59] *** Joins: rendar (~rendar@user/rendar)
[11:09:10] *** Quits: stocom0988778 (~sam@82-132-230-81.dab.02.net) (Read error: Connection reset by peer)
[11:09:22] *** Joins: stocom0988778 (~sam@82-132-228-140.dab.02.net)
[11:09:37] *** Quits: pyever___ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[11:13:47] *** Quits: reset (~reset@user/reset) (Quit: reset)
[11:14:53] *** clarjon_1 is now known as clarjon1
[11:15:51] *** Quits: kevinlc (~kevinalh@2800:200:e8d0:20b::4) (Ping timeout: 250 seconds)
[11:16:23] *** Joins: kevinlc (~kevinalh@2800:200:e8d0:20b::4)
[11:17:28] *** Joins: lessless (~lessless@ip.82.144.211.11.stat.volia.net)
[11:18:22] <lessless> Folks, I'm running into `AttributeError: 'bytes' object has no attribute 'encode'` on this line https://github.com/rootzoll/raspiblitz/blob/v1.7/home.admin/config.scripts/lnd.initwallet.py#L120 while trying to execute the script. Can you please help me out with fixing that error?
[11:19:05] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 248 seconds)
[11:19:13] <grawity> looks like the function assumes that hexlify() returns a string
[11:19:30] <grawity> while in reality it directly returns a bytes object
[11:19:48] <grawity> so it should be fine to use channel_backups=scb_hex_str
[11:20:17] <grawity> (unless they wanted the opposite i.e. .decode() *to* a string instead?)
[11:26:05] *** Joins: manti7 (~manti7@176.10.104.94)
[11:26:19] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[11:26:58] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:27:46] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Quit: Lost terminal)
[11:29:34] *** Joins: foozle (~foozle@2001-b011-c001-16ef-0490-1a09-d3f9-afa2.dynamic-ip6.hinet.net)
[11:29:36] *** Joins: gareppa (~gareppa@user/gareppa)
[11:29:59] *** Joins: Bardon (~Bardon@user/Bardon)
[11:30:21] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[11:34:16] *** Quits: Shanzem (~Shanzem@86.31.109.147) (Quit: sudo Shanzem -lol -updoot -karma -gold >/dev/lies)
[11:37:29] *** Quits: Metalsutton (~Metalsutt@101.100.153.131) (Ping timeout: 256 seconds)
[11:37:30] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:38:36] *** Joins: d0ku (~d0ku@178.43.56.75.ipv4.supernova.orange.pl)
[11:39:01] *** Quits: rigid- (~rigid@user/rigid) (Quit: +++ ATH)
[11:39:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[11:40:16] *** Joins: greedom (~greedom@2001:16b8:2e47:b300:da70:f588:7ecf:7c68)
[11:40:51] *** Quits: zaz (~zaz@poneybl.eu) (Quit: bye)
[11:41:01] *** Joins: rigid (~rigid@user/rigid)
[11:43:00] *** Joins: zaz (~zaz@poneybl.eu)
[11:43:17] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[11:47:07] *** Joins: fluter (~fluter@user/fluter)
[11:47:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[11:49:46] *** Quits: zln (~golluq@c80-217-230-193.bredband.tele2.se) (Ping timeout: 252 seconds)
[11:49:49] *** Joins: fikran (~fikran@user/fikran)
[11:50:31] *** Joins: gggp (~textual@111.63.14.115)
[11:51:49] *** Quits: audiocat (~audio@2603-8081-1801-3bb5-d6d9-7d6f-7c18-dd49.res6.spectrum.com) (Ping timeout: 250 seconds)
[11:53:08] *** Joins: Pickchea (~private@user/pickchea)
[11:53:41] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[11:57:21] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[11:58:08] *** Joins: node1 (~node1@user/node1)
[12:01:39] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:7d4c:22a:fae1:5b66) (Quit: Leaving)
[12:02:05] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[12:03:56] *** Joins: shad (~shad@user/shad)
[12:06:21] *** Quits: zaz (~zaz@poneybl.eu) (Ping timeout: 244 seconds)
[12:06:33] *** Quits: emika (~emika@185.207.249.150) (Ping timeout: 248 seconds)
[12:07:32] *** Joins: emika (~emika@83.136.182.168)
[12:08:40] *** Joins: fanis30 (~anon@adsl-209.37.6.3.tellas.gr)
[12:14:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:15:17] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[12:15:24] *** Joins: mawk (~mawk@wireguard/contributor/mawk)
[12:16:02] <lessless> grawity thanks for explanation. And I'm not actually sure :') But I do need to restore the wallet hehe
[12:16:13] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[12:17:56] *** Quits: diamondbond (~diamondbo@112.134.170.153) (Quit: Leaving)
[12:18:50] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[12:20:17] <lessless> If I remove `encode` (or add `decode`) Python complains about TypeError: `TypeError: Parameter to MergeFrom() must be instance of same class: expected lnrpc.ChanBackupSnapshot got bytes.` (or `got str` respectively)
[12:20:51] <grawity> sounds like the script is missing some other operation entirely
[12:20:58] <lessless> yeah
[12:21:19] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:21:45] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:21:51] *** Quits: gggp (~textual@111.63.14.115) (Ping timeout: 244 seconds)
[12:22:09] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[12:23:33] *** Quits: p-i- (~Ohmu@171.6.224.111) (Remote host closed the connection)
[12:23:57] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[12:24:15] *** Joins: p-i- (~Ohmu@2403:6200:8870:cca9:250d:2ed5:99d:fc5f)
[12:25:04] *** Joins: gggp (~textual@111.63.14.115)
[12:30:46] *** dcaro_away is now known as dcaro
[12:34:01] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:34:59] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[12:35:04] *** Quits: greedom (~greedom@2001:16b8:2e47:b300:da70:f588:7ecf:7c68) (Remote host closed the connection)
[12:35:32] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:35:41] *** Joins: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net)
[12:36:45] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[12:37:33] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Read error: Connection reset by peer)
[12:38:36] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:39:28] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:39:33] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:39:38] *** Quits: foozle (~foozle@2001-b011-c001-16ef-0490-1a09-d3f9-afa2.dynamic-ip6.hinet.net) (Quit: Leaving)
[12:43:41] *** Joins: gusto (~Augustus@109.255.100.54)
[12:44:29] *** Joins: node1 (~node1@user/node1)
[12:47:01] *** Quits: kevinlc (~kevinalh@2800:200:e8d0:20b::4) (Ping timeout: 252 seconds)
[12:47:08] *** Joins: georgios (~georgios@user/georgios)
[12:47:08] *** Joins: ice99 (~ice9@user/ice9)
[12:48:43] *** Joins: az (az@user/azz)
[12:51:00] *** Quits: km (~km@static.55.93.181.135.clients.your-server.de) (Quit: Leaving)
[12:51:38] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[12:53:10] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[12:53:23] *** Joins: Metalsutton (~Metalsutt@101.100.153.131)
[12:53:34] *** Joins: regreg (~regreg@2a02:2f09:531a:c700:586:97e4:b5d5:795c)
[12:55:05] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 250 seconds)
[12:55:07] *** Quits: fanis30 (~anon@adsl-209.37.6.3.tellas.gr) (Quit: WeeChat 3.2)
[12:55:08] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[12:58:26] *** Joins: GenTooMan (~cyberman@c-73-214-106-63.hsd1.pa.comcast.net)
[12:58:59] *** Quits: AlanMD (~AlanMD@193.105.139.131) (Ping timeout: 250 seconds)
[12:59:13] *** Joins: Mechanismus (~LabMonkey@2602:306:cf62:e270:8521:a498:49e4:60ce)
[12:59:41] *** Quits: Metalsutton (~Metalsutt@101.100.153.131) (Quit: Leaving)
[12:59:42] *** Quits: barometz_ (~dvanb@i117058.upc-i.chello.nl) (Ping timeout: 276 seconds)
[13:00:04] *** Joins: ssbr_ (~ssbr@python/site-packages/ssbr)
[13:00:30] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:00:41] *** Joins: stranac (~stranac@195.29.239.126)
[13:00:43] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[13:00:45] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[13:00:53] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[13:01:07] *** Joins: y1n (~y1n@84-115-64-101.wifi.dynamic.surfer.at)
[13:01:07] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[13:01:35] *** Quits: Proxysna__ (~Proxysna@62.119.254.142) (Remote host closed the connection)
[13:02:02] *** lukedashjr is now known as luke-jr
[13:03:42] <supakeen> Is it just me or was `aioredis` 2.0 not an improvement.
[13:04:47] <jim> hi, if I'm running gnome, can I run a python program that generates and uses gnome-style UIs?
[13:04:50] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[13:05:07] <supakeen> jim: Sure, generally any GTK-based application for Gnome?
[13:05:19] <az> I've the following scinario. cherrypy and a python tool that get exteranl data running in vevn. I need to run cherrypy as super user to access ssl and ports 80,443. When I run as root the python tool compalins. I was able to run the python from venv as superuser but I need also to have the user who the vevn is running in. any suggestion to handle this?
[13:05:22] <grawity> you can use GTK from python, yes
[13:05:37] <jim> (aka are there bindings for gnome)
[13:06:00] <grawity> gnome nowadays uses gobject-based bindings, so you can use any gobject-based API from python
[13:06:08] <grawity> including gtk, gdk, glib, and most others
[13:06:09] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[13:06:16] *** Joins: sgn_ (~sgn@user/sgn)
[13:06:47] <grawity> for gtk 2.x there used to be separate "pygtk" bindings, but AFAIK those are now obsolete in favor of gi-based ones
[13:07:49] <grawity> basically look for "from gi.repository import Gtk"
[13:08:00] <jim> so you could "mess with" pygtk, and create boxes and stuff?
[13:08:02] <jim> ok
[13:08:47] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[13:08:59] <jim> thanks, someone wants to play with em
[13:09:00] *** Joins: frostschutz (~frostschu@2a01:c23:8470:6000:5c9:e6d8:6dc1:3ce0)
[13:09:23] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[13:09:35] <grawity> example https://github.com/GNOME/libchamplain/blob/master/demos/minimal.py
[13:10:25] <grawity> (disregard the comment at the top, that's for testing local versions)
[13:10:25] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 244 seconds)
[13:11:41] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[13:12:33] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:15:15] *** Joins: km (~km@static.55.93.181.135.clients.your-server.de)
[13:15:20] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[13:16:45] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[13:20:45] *** Joins: SoF (~skius@user/skius)
[13:21:41] *** Joins: Hax0r (~Hax0r@51.252.26.81)
[13:22:27] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::4433)
[13:27:20] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:cca9:b466:1d3f:ec1e:75f1)
[13:27:33] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[13:27:41] *** Joins: lothar_m (~lothar_m@84.65.166.229)
[13:28:41] *** Quits: gggp (~textual@111.63.14.115) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:29:38] *** Quits: jazzy (~jaziz@2600:380:4671:e333:9dac:5e57:172f:3175) (Ping timeout: 250 seconds)
[13:31:01] *** Quits: p-i- (~Ohmu@2403:6200:8870:cca9:250d:2ed5:99d:fc5f) (Ping timeout: 252 seconds)
[13:35:53] *** Joins: j00n (~mario@user/j00n)
[13:36:29] *** Joins: artwalker (~Adium@36.113.98.148)
[13:36:52] *** Joins: varaindemian (uid73404@id-73404.charlton.irccloud.com)
[13:36:58] *** Parts: artwalker (~Adium@36.113.98.148) ()
[13:37:01] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 252 seconds)
[13:37:14] *** Joins: Gurkenglas (~Gurkengla@dslb-088-064-053-140.088.064.pools.vodafone-ip.de)
[13:37:40] *** Joins: DerpGusta (~quassel@user/derpgusta)
[13:38:43] *** Quits: Hax0r (~Hax0r@51.252.26.81) (Quit: Leaving)
[13:39:49] *** Quits: stranac (~stranac@195.29.239.126) (Ping timeout: 252 seconds)
[13:40:09] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (Ping timeout: 250 seconds)
[13:40:30] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[13:40:49] *** Joins: HaJo (~HaJo@2a01:c23:9417:7c00:821f:2ff:feef:dabf)
[13:41:17] <HaJo> Moin
[13:42:10] *** Quits: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[13:43:23] *** Joins: darksun (~darksun@user/darksun)
[13:43:45] *** Joins: czuk_cza (~mist@188.147.100.88.nat.umts.dynamic.t-mobile.pl)
[13:44:09] <kosh> HaJo, greetings lifeform
[13:44:11] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[13:45:06] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[13:45:13] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[13:49:37] *** Joins: fleabag (~sirpengi@li587-65.members.linode.com)
[13:50:27] *** Joins: fanis30 (~anon@adsl-209.37.6.3.tellas.gr)
[13:50:31] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:50:55] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[13:52:09] *** Joins: computeiro (~Wender@189.37.66.142)
[13:54:40] *** Quits: y1n (~y1n@84-115-64-101.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[13:55:58] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[13:57:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[13:57:09] <DerpGusta> I have a function that gets called for each item in a list. The function can be divided into sub tasks. I'm thinking of speeding it up by using threadpoolexecutor and using asyncio for the subtasks(each with it's own event loop). Is this a good idea? If there are good alternatives, please elaborate
[13:57:37] <DerpGusta> by each, I mean each thread.
[13:57:38] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[13:57:52] <shlomif> DerpGusta: hi
[13:58:06] <DerpGusta> shlomif: hello shlomif
[13:58:48] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[13:58:56] <shlomif> DerpGusta: how long will it take to write and test  the change?
[13:59:10] *** Joins: fikran (~fikran@user/fikran)
[13:59:20] <DerpGusta> thinking 10 mins or longer
[14:00:02] <shlomif> DerpGusta: ah, doesn't sound too bad
[14:00:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 244 seconds)
[14:01:10] <ssbr_> DerpGusta: I don't understand why each function would get its own event loop. I would've expected all functions to share an event loop and use gather or similar
[14:01:45] <shlomif> DerpGusta: are you sure that loop is a bottleneck? (using code profiling/etc.?)
[14:01:59] *** Joins: Logi (~quassel@83.229.86.115)
[14:02:24] <DerpGusta> shlomif: no idea honestly. I've been given the task to make a synchronous function faster
[14:02:32] <kosh> DerpGusta, are all of these tasks IO bound? otherwise I don't see how threading will speed it up
[14:03:04] <ssbr_> DerpGusta: is this an interview question or...?
[14:03:25] <ssbr_> anyway yes these are good questions: how to improve performance depends on why it's slow
[14:03:41] <kosh> if your program is CPU bound the thread pool isn't going to help almost at all
[14:03:49] <kosh> what does the function do?
[14:03:58] <kosh> is it a bunch of math?
[14:04:07] <DerpGusta> kosh: it's more of a scanner
[14:04:20] <DerpGusta> ssbr_: nope. not an interview question haha
[14:04:49] <DerpGusta> it scans a cloud account and gives you the status
[14:04:52] <kosh> DerpGusta, so it is IO bound? have you profiled it?
[14:05:59] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[14:06:51] *** Joins: MikachuPi (~Mikachu@2001:bc8:47a8:559::1)
[14:07:28] *** Joins: brabrax (~brabrax@user/brabrax)
[14:07:55] <ssbr_> even just running it under time could give good numberinos
[14:08:13] <DerpGusta> kosh: honestly, not IO bound. and it takes around 5 mins or more to run on average
[14:08:34] <kosh> DerpGusta, if it is not IO bound then why would a threadpool make it faster?
[14:08:37] *** Joins: y1n (~y1n@84-115-64-101.wifi.dynamic.surfer.at)
[14:08:50] <kosh> threads are not magic speed sauce that you just add to code and they make it faster
[14:09:21] *** gitesh is now known as mentos
[14:09:27] <DerpGusta> kosh: processpool then? I want to parallelize the execution
[14:09:45] <DerpGusta> is it even possible?
[14:10:33] *** mentos is now known as gitesh
[14:10:37] *** Quits: schumaml (~schumaml@p200300e2ef05560053c1821a43d17d29.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[14:10:39] <kosh> you need to know why it is slow in order to make it faster
[14:11:08] <kosh> if it is slow because it is waiting for a response then that is IO bound and threads could improve that so long as it is possible to make simultaneous requests
[14:12:25] <DerpGusta> actually, one of the tasks makes an api (used for ssl scan) call that takes very long to finish (150 secs or more)
[14:12:33] *** Joins: schumaml (~schumaml@p579aa09a.dip0.t-ipconnect.de)
[14:13:10] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Ping timeout: 240 seconds)
[14:13:27] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[14:14:08] *** Quits: emerent (~quassel@p200300cd5701a19fba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[14:14:38] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:15:12] <Logi> DerpGusta: if it's all a bunhc of API calls and responses, then that's IO-bound, even if it returns in 50ms. A cpu can do a _lot_ in 50ms. But if it uses those 50 ms to make 500 API calls then it might also kill what you're monitoring, so...
[14:15:22] *** Joins: emerent (~quassel@p200300cd5701a19fba27ebfffed28a59.dip0.t-ipconnect.de)
[14:15:57] *** Joins: artwalker (~Adium@36.113.98.148)
[14:16:35] *** Quits: MikachuPi (~Mikachu@2001:bc8:47a8:559::1) (Quit: Mikachuuuuuuu !)
[14:16:47] *** Joins: MikachuPi (~Mikachu@2001:bc8:47a8:559::1)
[14:16:56] <DerpGusta> Logi: I understand this is not my case. All I have is a bunch of functions that need to be executed in parallel to save some time.
[14:17:16] <Gurkenglas> bjs, greenlets do allow me to interrupt an execution and then maybe resume it later but they don't allow me to restart it *twice* with different return values of the interruption callback. Do you know something like that?
[14:19:42] <bjs> Gurkenglas: hmm not off the top of my head,  although you can always make your own greenlet-like library to do it
[14:19:52] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[14:19:56] <Gurkenglas> I can? I was under the impression that there is dark magic at play
[14:21:36] *** Joins: Meteorhead (~Meteorhea@165.225.76.202)
[14:23:04] <bjs> Gurkenglas: I mean it depends what you consider "dark magic".
[14:24:20] <Gurkenglas> How would one go about defining gurk here with as little magic as possible? "def foo(bar): print(1); bar(); print(3)" "def main(): c = gurk(foo); print(2); c()" such that main() prints 1,2,3?
[14:26:05] *** Quits: Vooch (~iovoo@096-038-011-034.biz.spectrum.com) (Ping timeout: 250 seconds)
[14:26:56] <grawity> in this example, why not make the print(2) happen inside foo() instead of having to do this "jump out" trickery
[14:27:55] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 244 seconds)
[14:28:46] <Gurkenglas> grawity, i gave the simplest example where it seems you'd need dark magic; i don't care about this example specifically; your solution doesn't that doesn't let you actually construct gurk.
[14:29:06] <Gurkenglas> s/doesn't that doesn't/doesn't/
[14:30:20] <bjs> Gurkenglas: I mean that you can do with greenlets no?
[14:30:49] <Gurkenglas> yeah, but it seems that they're magic! Fine, something more impossible-seeming:
[14:31:03] <Gurkenglas> make "def main(): c = gurk(foo) print(2) c() c()" print 1,2,3,3
[14:31:21] <bjs> Gurkenglas: well yes okay you need to either use magic or a library that does magic
[14:31:32] <bjs> because Python doesn't expose the stack as an object you can manipulate outside of the C API
[14:33:44] <bjs> Gurkenglas: okay that example is much harder because you'll need to "clone" or "fork" the state somehow;  probably greenlets out of the box can't do it
[14:34:08] *** Joins: ali1234 (~al@user/ali1234)
[14:35:21] <Donitz> I need to READ a integer value in a class which is used in another thread
[14:35:24] <Donitz> is it safe?
[14:35:34] <bjs> greenlets is conceptually very simple, it just has 1 datatype (a greenlet) that stores some stack data and the switch()ing just juggles it around.  What you want is a clone() method to make a new greenlet with a copy of the stack at the current point.  I can even imagine this not being a totally crazy patch to greenlet's own code,  although yes it might fall under your "dark magic" if you dislike the idea of juggling stack around
[14:35:36] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Remote host closed the connection)
[14:35:49] <bjs> Donitz: well,  Python won't explode and nothing bad will happen to your computer
[14:35:55] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 252 seconds)
[14:35:57] *** Joins: wolfgang (~wolfgang@101.174.6.197)
[14:36:12] <Donitz> so it doesn't matter if I read it in the middle of writing to it?
[14:36:33] <Donitz> I originally used a mutex lock to read it
[14:36:37] <Donitz> but I think that's overkill
[14:36:47] <bjs> Donitz: well "doesn't matter" is a much stronger statement than "safe".  The read and writes themselves are safe
[14:37:08] <Donitz> ah
[14:37:18] <Donitz> so it can't like, write half the value, and read a corrupted one
[14:37:24] <bjs> Donitz: yes
[14:37:33] <Donitz> then it should be okay in this case
[14:37:41] <bjs> Donitz: but recall that for example two threads going `x += 1` is not safe.
[14:37:43] <Donitz> no real race conditions to consider
[14:37:56] <Donitz> I only ever read it in the main thread
[14:38:27] <Donitz> though, I'm a bit worried about using the class
[14:38:31] <Donitz> I say this = self
[14:38:39] <Donitz> and in a callback I say this.variable += blah blah
[14:38:54] <Donitz> is it actually safe to refer to the class inside another thread like that
[14:39:08] <Donitz> to the instance of the class
[14:39:15] <bjs> Donitz: again it's all safe, but remember that `x += ...` is not a single operation
[14:39:19] <bjs> it's multiple operations
[14:39:38] <Donitz> yeah, read and write, but since I ever only read it shouldn't be a dangerous
[14:39:40] <Donitz> dangerous*
[14:39:44] <bjs> Donitz: if one thread goes `x += 1` and another thread reads x, that read can happen "in the middle" of the += operation.
[14:39:45] <Donitz> in the main thread
[14:39:53] <Donitz> it's not dangerous to read the old value
[14:39:55] <Donitz> in this case
[14:39:57] <bjs> Okay.
[14:40:25] <Donitz> other programming language has me really paranoid about multithreading :P
[14:40:28] <Donitz> languages*
[14:40:49] <bjs> Donitz: you should be paranoid and you should be paranoid here.  See https://docs.python.org/3/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe
[14:41:29] <Donitz> yepp
[14:41:31] <Donitz> umm
[14:41:34] <Donitz> what about flipping a boolean
[14:41:40] <Donitz> can you do that atomically
[14:41:52] *** Joins: frost (~frost@59.71.240.119)
[14:42:10] <bjs> Donitz: again the read and write are atomic but that'll involve multiple steps
[14:42:15] <kosh> for high performance threaded applications a lot of care has to be done to not do things like write to a shared mutable state wherever possible because of all the problems it causes
[14:42:21] <Donitz> so there is no command to do it in one command?
[14:42:30] <rakoon> :O I get KeyError on this: if i['beginDate'] <= today and not i.get('endDate') or today <= i['endDate']:
[14:42:34] <kosh> bieng a boolean doesn't change it
[14:42:46] <bjs> rakoon: is that question
[14:42:49] *** Joins: Mach (~Mach@82.79.208.93)
[14:42:59] <rakoon> bjs: yes sry
[14:43:03] <bjs> rakoon: what is the question
[14:43:15] *** Joins: Kaya (~KC@2a01:4f9:c010:3917::1)
[14:43:17] <rakoon> why i get error if the 2nd evaluates to True?
[14:43:23] *** sgn_ is now known as sgn
[14:43:34] <rakoon> i might be tired
[14:43:44] <rakoon> but i dont get why
[14:43:55] <rakoon> KeyError on endDate
[14:44:07] <rendar> i have this asyncio design: a producer of strings which reads them from the prompt and then put them into a queue, a consumer of strings which dequeues stuff from that queue and process commands, with create_task() -- now my problem is: in the consumer, some command may ask for a password, and i have to block the prompt in the producer until the password has been typed, how can i do that? but i don't have to block in all other circumstances...
[14:44:14] <bjs> rakoon: have you tried putting some parens in to make things clearer what you're trying to do
[14:44:31] *** Joins: dvx (~dvx@185.63.97.64)
[14:44:37] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[14:44:42] <rakoon> bjs: sure i can do that but i want to understand why it fails cause python lazily evaluates
[14:44:57] <rakoon> True and True or False -> True
[14:44:58] <bjs> rakoon: probably because your parens are in the wrong place right now
[14:45:16] <rakoon> i have no parens
[14:45:33] <bjs> rakoon: well you do they're just implicit
[14:45:41] <rakoon> oh
[14:46:00] <bjs> rakoon: what if `i['beginDate'] <= today` is False also?
[14:46:02] <rakoon> i googled if i can debug see how python does behind the scenes but i didnt find something usefull
[14:46:08] <rakoon> oh
[14:46:14] <grawity> echo "i['beginDate'] <= today and not i.get('endDate') or today <= i['endDate']" | python -m ast
[14:46:19] <bjs> rakoon: `a and b or c` is `(a and b) or c`  is that what you wanted it to be?
[14:46:23] <rakoon> well if the 2nd evaluates to True should stop there
[14:46:29] <Gurkenglas> aight let's see where my feature request goes :) https://github.com/python-greenlet/greenlet/issues/258
[14:46:48] <rakoon> bjs: oh if it is that then i had wrong expectations in the first place
[14:46:56] <bjs> rakoon: hence why I say put the parens in :)
[14:47:02] <bjs> so it's clearer what you're trying to do
[14:47:06] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:47:17] <grawity> or for a simpler output, echo "123 and not 456 or 789" | python -m ast
[14:47:48] <rakoon> bjs: actually i want: a and (b or c)
[14:48:01] <bjs> rakoon: so put the parens in, I don't know how much harder I can say it :)
[14:48:29] <bjs> rendar: I don't think this is really an asyncio question and more a general "how do I have multiple prompts at once" question.  You have to decide if when you ask for a password you want the user to see two prompts on the screen, or just one,  and what should happen if the user was trying to enter something into the other prompt etc
[14:48:34] <rakoon> bjs: i know about the parens but im trying to see if i know python or not :D
[14:48:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:48:55] <rakoon> bjs: i want to know how python evaluates it before solving it with the parens
[14:49:05] <bjs> rakoon: I told you, `a and b or c` is `(a and b) or c`
[14:49:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:49:29] <rakoon> bjs: then it should evaluate to True without going to check the "or c"
[14:49:39] <bjs> rakoon: not if a is False
[14:49:57] <rakoon> bjs: ohhhhhhhhhhhhhhh
[14:50:06] <rakoon> bjs: i see thanks
[14:50:12] <rendar> bjs, it should be like 'su', if it's asking root password, it blocks temporarily the normal prompt
[14:50:30] <rendar> bjs, it's an asyncio stuff, because i think i should use asyncio sync methods here
[14:50:45] <bjs> rendar: but it's not like su because your prompt is concurrent, you're starting the task in the background then as the task runs it decides to prompt
[14:51:18] <bjs> rendar: this is like in the middle of running a program another program tries to `su` using the same prompt.
[14:51:44] <bjs> rendar: maybe the answer is to prompt *before* you start the task
[14:51:51] *** Joins: matkor (~matkor@93.179.197.152)
[14:52:20] <rendar> bjs, before? how you can know before that a whatever command (e.g. 'su') needs to ask for a password?
[14:52:58] *** Quits: y1n (~y1n@84-115-64-101.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[14:52:58] <bjs> rendar: I mean for su it's easy, the user types `su` and then it prompts before it asks for the command
[14:53:05] <rakoon> bjs: the reason of wrapping the first 2 "(a and b) or c" instead of "a and (b or c)" is because "and" has higher presedence than "or"?
[14:53:10] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[14:53:22] <bjs> rakoon: yes, just like in `a * b + c` the * binds more tightly
[14:53:24] *** Joins: dez (uid92154@user/dez)
[14:53:35] <rakoon> bjs: alright thanks a lot
[14:53:42] <bjs> rendar: remember that your example is *concurrent*,  you have one task trying to get commands from the user *at the same time* another tries to get the password
[14:53:45] *** Quits: artwalker (~Adium@36.113.98.148) (Quit: Leaving.)
[14:53:56] <rendar> bjs, exactly
[14:54:04] <rendar> bjs, i want some commands to block that
[14:54:22] <bjs> rendar: again you probably do not mean block here
[14:54:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[14:55:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:55:07] <rendar> i just want to temporarily substitute the normal prompt
[14:55:13] <bjs> rendar: I think what you really want is once the user types "su" (or whatever) but *before* you spawn the new task, you create the prompt.  So just like have 1 task doing all the prompting.  Infact it's going to be very hard to have multiple concurrent prompts
[14:55:23] <bjs> Unless you use a much fancier interface
[14:56:19] <rendar> but how can i know if the new task wants a password...
[14:56:34] *** Quits: lxwulf (~lxwulf@user/lxwulf) (Client Quit)
[14:56:39] <bjs> rendar: just like the terminal does, if the user types "su" then you know it needs to ask for a password
[14:56:41] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 248 seconds)
[14:56:50] <bjs> and once the user enters the password *then* you get the superuser terminal (the task)
[14:57:04] *** Joins: s1b1 (~s1b1@user/s1b1)
[14:57:20] <rendar> but the terminal is not concurrent, when you run 'su' you're running a program, and you're blocking until that program ends, which in turn that program asks for the root password *inside* the program itself
[14:57:46] *** Quits: fanis30 (~anon@adsl-209.37.6.3.tellas.gr) (Quit: WeeChat 3.2)
[14:57:48] <bjs> rendar: yes exactly and you need to do the exact same thing here if you want the same behaviour
[14:57:51] <rendar> there can also be cases when you're not asking only a password but N information, and you want N prompts for those information, like 'adduser'
[14:58:29] <bjs> rendar: if your program is just running along then suddenly decides it needs a password there's going to be a conflict at that moment:  what if the user is currently using the "main" prompt to type commands?
[14:59:03] <rendar> bjs, i know, hence i want to block the main prompt until it understands that the next program won't ask any prompt
[14:59:20] <bjs> rendar: so just do the check before you spawn the actual task
[14:59:24] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[14:59:42] <rendar> bjs, so i can use an asyncio.Semaphore?
[14:59:46] <bjs> rendar: `if command == "start_secure_task": if prompt_password() == "correct": create_task(the_secure_task())`
[14:59:55] <rendar> i can't do that
[15:00:05] <bjs> rendar: why not?
[15:00:07] <rendar> the task can asks also for other inputs, e.g. user name
[15:00:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:00:24] <rendar> think of 'adduser' which asks like 6/7 different data
[15:00:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:00:53] <bjs> rendar: okay so your tasks all have 2 phases, the first one where it prompts things and then the second where it hands the prompt back
[15:01:18] <bjs> rendar: is that right?
[15:01:57] <rendar> actually no, only very few tasks will ask for password, like 1 on 2983493893
[15:02:16] <bjs> rendar: so yes, they all have these two phases it's just that most tasks first phase is empty
[15:02:36] <bjs> rendar: then your code can be something like `await task_first_phase(); create_task(task_second_phase())`
[15:02:42] <bjs> inside the prompting task
[15:02:58] <bjs> it hands over to the first phase and once it's complete, it puts the second phase in the background
[15:03:16] <bjs> (maybe I'd call them `await task_interact(); create_task(task_background())`
[15:03:18] <bjs> or something)
[15:04:16] <rendar> no no, it may ask for password after an http requests
[15:04:24] <rendar> that phases are just wrong
[15:04:41] <bjs> rendar: so do you want the main prompt to wait until after the http requests?
[15:04:50] <rendar> nope
[15:04:57] <rendar> only *IF* there is a password to insert
[15:05:03] <bjs> rendar: okay so you've changed your mind again,  and you're back to the problem of concurrent prompts
[15:05:29] <bjs> rendar: but wait, you just said it asks a password after the http request
[15:05:35] <bjs> so you *do* want it to wait? or you don't?
[15:05:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:05:57] <rendar> bjs, normally the normal prompt shouldn't wait an http request, it would nullify the async benefits
[15:06:30] <rendar> *IF* the http response asks for a password, then it should temporarily change prompt, and ask the user for a password, before going further
[15:06:47] <bjs> rendar: but what if the user is currently typing into the main prompt?
[15:07:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:07:16] <rendar> it will be saved and restored after password typing
[15:08:30] <bjs> rendar: and how are you going to do that
[15:08:37] <rendar> i don't know
[15:08:47] *** Joins: y1n (~y1n@84-115-65-76.wifi.dynamic.surfer.at)
[15:09:01] <rendar> i thought prompt programming was a problem solved since 1960
[15:09:58] *** Quits: P1ro (~quassel@user/p1ro) (Ping timeout: 252 seconds)
[15:11:36] *** Joins: akaWolf (~akaWolf@akawolf.org)
[15:11:49] <TJ-> rendar: for your design requirements it seems pretty clear you need two queues; a 2nd supplies prompts back to the producer which, when it sees something in the prompt queue, interrupts what it is doing to query the operator.
[15:12:07] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:e697:e089:9dad:448c) (Ping timeout: 245 seconds)
[15:12:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:12:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:13:00] <rendar> TJ-, i could that with an asyncio.Semaphore
[15:13:06] <rendar> do*
[15:13:07] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:8b72:3c3e:c654:5bbd)
[15:13:42] <Gurkenglas> (prompt programming is a 1960 term? I thought it's like up to 2 years old, and concerns extracting information from language mdoels)
[15:13:53] *** Joins: reset (~reset@user/reset)
[15:14:08] <rendar> Gurkenglas, then you're wrong
[15:15:38] <bjs> Gurkenglas: yes but that's not what rendar means
[15:15:42] <bjs> rendar is learning CLIs
[15:16:31] <TJ-> Depends on how the comms is structured doesn't it? if the prompts can effectively be free-form there needs to be some way to communicate them. If you control them it makes it easier of course.
[15:17:10] *** Quits: regreg (~regreg@2a02:2f09:531a:c700:586:97e4:b5d5:795c) (Ping timeout: 252 seconds)
[15:18:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:18:51] *** Joins: P1ro (~quassel@user/p1ro)
[15:18:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:19:10] <rendar> my problem is the asyncio flow: when i type a command on the prompt, the producer awaits that string, then it puts into the queue, and then it awaits again the next command, WHEN it awaits the next command, the flow passes to the consumer which dequeues the command from the queue
[15:19:17] <rendar> that's the problem!
[15:19:40] <rendar> you cannot lock the main prompt, because the flow of asyncio works against you, in this case
[15:20:01] *** Joins: Archenfield (~textual@2405:6580:8e60:4600:c6d:7f89:7371:5898)
[15:20:59] *** Quits: HaJo (~HaJo@2a01:c23:9417:7c00:821f:2ff:feef:dabf) (Ping timeout: 256 seconds)
[15:21:26] *** Joins: arinov (~arinov@213.194.126.155)
[15:24:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:24:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:25:22] *** Joins: legola (~legola@46.235.100.27)
[15:28:52] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[15:29:29] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[15:29:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:30:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:30:31] <bjs> rendar: again I don't think it's an asyncio problem at all,  once you've decided what the semantics should be the only hard part is making the console do what you want
[15:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[15:30:41] <bjs> saving off and restoring when you ask
[15:31:04] *** Quits: Archenfield (~textual@2405:6580:8e60:4600:c6d:7f89:7371:5898) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:31:51] <rendar> bjs, look at the flow of asyncio: when i type something into the prompt, it puts the line into the queue and then it will immediately await for the next command, only THEN the command will be dequeued and executed
[15:32:01] <rendar> only when asyncio will await the next prompt
[15:32:25] *** Joins: jazzy (~jaziz@2600:380:4452:a3ec:1dd5:e36f:ac02:9c83)
[15:33:05] <bjs> rendar: yes but every other word seems to be "asyncio" yet the asyncio part seems fairly unimportant. The difficulty here is just making the library do the save/restore.  That process will be entirely synchronous so you can just call it directly when you want.
[15:33:10] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[15:33:52] <bjs> Because the only hard part here is the part where the user is currently typing and you decide you want to "save" the line and come back to it later.  The actual console part of moving the cursor around is easy, it's the logical part of remembering where the line was and what to do
[15:34:52] <bjs> and that's probably just having to read the documentation for prompt_toolkit to either find the method to do it, or the low-level API that you can use to build it yourself
[15:35:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[15:36:18] *** Joins: sazawal (~sazawal@122.162.80.16)
[15:36:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:37:44] <bjs> rendar: have you considered just using an input dialog box to prompt for the password?
[15:38:08] <rendar> yes, of course
[15:38:15] <bjs> rendar: and you decided no?
[15:38:17] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 248 seconds)
[15:38:30] <rendar> problem there is that the dialog box is flickering while other coroutines print stuff
[15:38:50] <bjs> rendar: just make the dialog box synchronous and block everything
[15:38:53] <rendar> bjs, then there is also this: https://github.com/prompt-toolkit/python-prompt-toolkit/issues/1489
[15:38:56] <bjs> (and here for the first time we really do mean block)
[15:39:11] <rendar> i don't want to block everything that doesn't need a password
[15:39:23] <bjs> it'd only block while you enter the password, is it that big a deal?
[15:39:30] <rendar> yep
[15:40:11] <bjs> rendar: have you considered that maybe you should do the easier thing if you've not yet got the ability to build the harder thing?
[15:40:18] *** Joins: HaJo (~HaJo@2a01:c23:9417:7c00:821f:2ff:feef:dabf)
[15:40:24] <rendar> software in 2021 must be smart, if someone notices that entering a password will block the entire program, also parts which don't need any passwords, he could say "wtf?"
[15:40:47] <bjs> rendar: you're writing a CLI in 2021, you already gave that up
[15:40:55] <rendar> lol
[15:41:07] <bjs> sometimes it's good to just admit your own limits and do the easier thing if you don't know how to build the harder thing
[15:41:11] <rendar> everyone uses a CLI even in 2021
[15:42:00] <rendar> bjs, i'd do, but that's not a my limit, i know how to do that! it's just asyncio flow that goes against me
[15:42:13] <bjs> rendar: asyncio here is completely irreelvant
[15:42:17] <gitesh> I have a question on this =====>  https://bpa.st/443Q
[15:42:30] <rendar> bjs, i already made that working, IF i ask the password and await it inside the producer loop
[15:42:30] <gitesh> why "look at the first few characters of the .text attribute of the Response object" is the right answer?
[15:42:37] <bjs> rendar: the hard part is just making the prompt do what you want, if you threw away asyncio and tried to do the same thing you have the same problem
[15:42:49] <rendar> bjs, i already made that working! it works!
[15:43:06] <rendar> it doesn't work when i *move* the asking for password outside the producer loop
[15:43:28] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[15:43:35] <bjs> rendar: the _only_ challenge here _at all_ is to do with prompts not asyncio
[15:43:40] <az> could you please check what is the issue with this snippet? https://dpaste.org/qgB1
[15:43:56] <rendar> bjs, but it works! i have the prompt behavior i want
[15:44:09] <bjs> rendar: you *consistently* misattribute problems to asyncio,  the last 3-4 times I've helped you you have *insisted* the problem was asyncio when it turned out to be just libraries and terminals
[15:44:54] <rendar> bjs, how come that password prompt asking works inside the producer loop, and it doesn't inside the consumer loop? i think that's the asyncio flow that messes things up
[15:45:06] <HaJo> gitesh: My guess would be: The first chars are a good indicator, for everything else. You can see, if the url is correct and so on.
[15:45:11] <bjs> rendar: this is just a general concurrency/terminals/cli prompting question,  all you need to do is think about saving off that prompt and restoring it later if that's what you want to do
[15:45:21] <bjs> that's the only hard part, the asyncio parts around it are trivial
[15:45:27] <rendar> bjs, ok
[15:45:31] <HaJo> gitesh, but it's only a guess...
[15:45:47] <az> I keep getting AttributeError: 'Form' object has no attribute 'a' https://dpaste.org/qgB1
[15:46:10] <bjs> gitesh: where is this from?
[15:46:35] <gitesh> HaJo: but they said in question "....are not what you expected " that doesn't implied we have checked the response?
[15:46:41] <gitesh> bjs: from that book
[15:47:07] <gitesh> bjs: this is from daily practice questions
[15:47:09] <jinsun> az: you are initializing the variables in your index method but you are never calling it
[15:47:12] <bjs> gitesh: please please please stop reading that book, it's terrible. it constantly gives you the wrong names for things,  when it does it never says what the names mean,  and now this just makes no sense
[15:47:40] <bjs> gitesh: why would B be the right answer but not A?  and what about C? isn't C the obvious answer?
[15:47:42] <jinsun> az: you probably want to change the name of index to `__init__` so that it is automatically called when you instantiate the class
[15:47:47] <rendar> which book is that?
[15:48:13] <gitesh> bjs: that book make sense if you read
[15:48:30] <bjs> gitesh: I read some of it and it doesn't make sense, even to me,  who already knows the stuff
[15:49:00] <az> jinsun, any way to call it without using init?
[15:49:21] <gitesh> rendar: https://runestone.academy/runestone/books/published/fopp/index.html
[15:49:52] <jinsun> az: well you can just call `foo.index()` manually before you call `foo.hello()`, but why do you want to avoid `__init__` ?
[15:49:53] <az> ok done it by adding self.index() to hello
[15:49:59] *** Joins: Archenfield (~textual@2405:6580:8e60:4600:c6d:7f89:7371:5898)
[15:50:23] <az> I'm just learning wanted to know :)
[15:50:34] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:50:54] <rendar> bjs, ok btw, i have solved the issue with an asyncio.Semaphore()
[15:52:10] <bjs> rendar: solved how exactly?
[15:52:10] <az> jinsun, thanks it works now
[15:52:10] <az> my main issue that self.b = randint(0,10) is keep changing when ever I call self.b . is there a clean way to fix the number so it doesn't change?
[15:52:27] *** PJBoy is now known as Guest5471
[15:52:27] *** Quits: Guest5471 (~PJBoy@user/pjboy) (Killed (calcium.libera.chat (Nickname regained by services)))
[15:52:32] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[15:52:34] *** Joins: arseru (uid515527@id-515527.tinside.irccloud.com)
[15:52:34] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:52:35] <rendar> bjs, adjusting the asyncio flow, as i was saying: once you block with a semaphore the immediate return to the main prompt, the consumer loop can choose which commands should release iommediately the main prompt semaphore and which ones can't, for instance: a command which needs to ask a password shouldn't release that semaphore, and it works correctly now
[15:52:57] <bjs> rendar: but doesn't that block the main prompt until after the password gets typed
[15:52:57] *** Quits: czuk_cza (~mist@188.147.100.88.nat.umts.dynamic.t-mobile.pl) (Quit: WeeChat 3.2)
[15:53:19] <rendar> bjs, basically yes, but only the main prompt and not all coroutines
[15:53:22] <HaJo> az: you want the random generator to return the same every time?
[15:53:22] <jinsun> az: `self. b = 4` :p
[15:53:27] <bjs> rendar: yes that's what i asked earlier
[15:53:28] <bjs> 3 times
[15:53:31] <bjs> and you kept saying no
[15:53:53] <rendar> bjs, well, i was wrong, i think this is the best solution
[15:54:05] *** Quits: arseru (uid515527@id-515527.tinside.irccloud.com) (Changing host)
[15:54:05] *** Joins: arseru (uid515527@user/arseru)
[15:54:24] *** Joins: stpz (~stpz@240e:341:229d:4a00:c0db:de25:d22d:fab)
[15:54:43] <az> HaJo, no but in my bigger code the same slef.a and self.b is returning different results when called from other function. I may share the code in few
[15:55:46] *** Joins: zaz (~zaz@poneybl.eu)
[15:55:47] *** Quits: y1n (~y1n@84-115-65-76.wifi.dynamic.surfer.at) (Ping timeout: 250 seconds)
[15:56:04] <jinsun> az: if you call the index() method again and again then self.b will change obviously, the solution is to not call self.index() inside the other function, but call it manually once, and just change the name to `__init__` so that you don't evn have to call it
[15:56:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:56:40] <gitesh> pretty_dumm_guy: hi
[15:56:51] <pretty_dumm_guy> hi
[15:57:04] <HaJo> Maybe you could call the random number generator once and store the result somewhere or pass it along with the program flow.
[15:57:28] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[15:57:38] <HaJo> or maybe a global variable?
[15:58:05] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Remote host closed the connection)
[15:58:14] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[16:01:39] *** Quits: zaz (~zaz@poneybl.eu) (Quit: bye)
[16:01:46] *** Quits: stocom0988778 (~sam@82-132-228-140.dab.02.net) (Read error: Connection reset by peer)
[16:02:03] *** Joins: stocom0988778 (~sam@82-132-231-65.dab.02.net)
[16:03:48] *** Joins: upsala (~zcb@185.213.155.160)
[16:03:50] *** Joins: zaz (~zaz@poneybl.eu)
[16:04:07] *** Joins: Pickchea (~private@user/pickchea)
[16:05:09] *** Joins: Moult (~sevenstro@sevenstrokes.net)
[16:05:25] <Moult> is there a recommended python test runner? or are they all roughly equal?
[16:05:43] <nedbat> Moult: pytest
[16:05:50] *** Joins: besnn (~besnn@user/besnn)
[16:05:56] <Moult> nedbat: cheers. thanks! decision made :)
[16:06:36] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[16:06:59] <Logi> ~rendar++
[16:07:08] <Logi> That no longer works?
[16:07:28] <Logi> Hah, no. Wron channel. :rolleyes:
[16:07:42] *** Joins: fdan (~fdan@192.146.154.3)
[16:07:46] <Logi> Anyway, good on rendar for admitting being wrong :-)
[16:07:52] *** Joins: y1n (~y1n@84-115-65-76.wifi.dynamic.surfer.at)
[16:08:26] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[16:08:30] *** Joins: fikran (~fikran@user/fikran)
[16:09:35] *** Joins: besnn (~besnn@user/besnn)
[16:10:50] <az> jinsun, here is the software that I'm using. captcha is not working giving wrong result as the random value change https://dpaste.org/tkOt
[16:10:56] *** Joins: grondilu (~grondilu@91-164-198-91.subs.proxad.net)
[16:11:00] <az> I'm not calling it maybe cherrypy is doing it
[16:11:08] <grondilu> how do I write a byte string to stdout?  And not as b'...'?
[16:11:18] <az> if you want the config I can share it too
[16:13:26] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 250 seconds)
[16:14:49] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[16:19:21] <The-Compiler> grondilu: decode it to a string
[16:19:44] <The-Compiler> grondilu: i.e. print(data.decode(encoding))
[16:20:29] *** Quits: Gurkenglas (~Gurkengla@dslb-088-064-053-140.088.064.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[16:20:32] <gitesh> "Python’s strings are in unicode" means we can type any character in python program and use it?
[16:20:43] <gitesh> *any char from unicode
[16:20:43] *** Quits: Archenfield (~textual@2405:6580:8e60:4600:c6d:7f89:7371:5898) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:21:17] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 245 seconds)
[16:21:55] <The-Compiler> gitesh: in a string, yes - you can't e.g. name a variable 🐍
[16:22:45] <gitesh> The-Compiler: my computer is not unicode?
[16:23:08] *** Joins: BluesKaj (~Blues@user/blueskaj)
[16:23:16] *** Parts: BluesKaj (~Blues@user/blueskaj) (Konversation terminated!)
[16:24:52] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-f994-ccd9-a78d-3463.res6.spectrum.com)
[16:24:56] <The-Compiler> gitesh: I don't understand that question - a computer cares about bits and bytes, and not really about how the data in those is encoded
[16:25:52] <gitesh> The-Compiler: if i try to write python unicode string in a file i will get an error because my computer uses ascii
[16:26:46] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[16:26:56] <The-Compiler> gitesh: can you show the error?
[16:27:15] <gitesh> no I am trying to learn this
[16:27:17] <gitesh> "UnicodeEncodeError: 'ascii' codec can't encode character u'\xea' in position 1: ordinal not in range(128)
[16:27:34] *** Quits: zaz (~zaz@poneybl.eu) (Ping timeout: 252 seconds)
[16:27:46] <The-Compiler> gitesh: can you show the full error?
[16:28:10] *** Quits: km (~km@static.55.93.181.135.clients.your-server.de) (Quit: Leaving)
[16:28:28] *** Joins: Kratos (~Kratos@user/abrax)
[16:29:46] <gitesh> if i used string.encode('utf-8') method all non english characters are encoded using utf-8 which is unicode
[16:29:51] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 244 seconds)
[16:30:16] *** Joins: neo1968 (~neo@98.186.218.167)
[16:30:20] *** Joins: km (~km@static.55.93.181.135.clients.your-server.de)
[16:30:40] <neo1968> Does anyone in here have a fix for the requests module not loading
[16:30:46] <The-Compiler> gitesh: all characters are encoded using utf-8, utf-8 just happens to be compatible with ASCII
[16:30:55] *** Joins: djhankb (~djhankb@208.113.164.68)
[16:30:59] <The-Compiler> gitesh: and yes, utf-8 is one possible encoding for Unicode characters
[16:31:19] <The-Compiler> neo1968: what do you mean with 'not loading'?
[16:32:29] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[16:32:29] <neo1968> The requests module is installed, however I get an error message that it doesn't exist when I run any script that requires it
[16:32:34] <cluelessperson> neo1968, "not loading" ?
[16:32:44] <cluelessperson> neo1968, how are you managing it?
[16:32:50] <cluelessperson> installing for example.
[16:33:03] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:33:03] <neo1968> pip
[16:33:13] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[16:33:19] <The-Compiler> neo1968: can you show the full error?
[16:33:26] <neo1968> wait one
[16:33:33] *** Joins: emika8 (~emika@185.207.249.28)
[16:34:01] <jinsun> az: no idea how cherrypy does things, so can't say for sure, but if your index function is being callied multiple times then a and b will change becasue the index method is changing them, maybe moving the initialization of self.a and self.b into a separate `__init__` method will solve it
[16:34:47] <FFY00> 0xea is not ascii, it's extended ascii
[16:34:59] <FFY00> which is not utf-8 compatible
[16:35:01] *** Quits: emika (~emika@83.136.182.168) (Ping timeout: 244 seconds)
[16:35:01] *** emika8 is now known as emika
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:07] <neo1968> Can't import module 'requests'
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:50] *** Joins: _Mocramis (~mocramis@dalaran.sceen.net)
[16:38:03] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[16:38:10] <The-Compiler> neo1968: there should be more than that - also, what Python version is this on?
[16:38:18] <cluelessperson> neo1968,    pip --version   and python --version
[16:38:19] <neo1968> ver 3.8
[16:38:27] <cluelessperson> make certain that you're running the same python
[16:38:37] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[16:38:55] <FFY00> chr(0xea) does give the expected output, but AFAIK there's no extended ascii encoding
[16:38:55] *** Joins: Ivyy (~Ivyy@2001:a62:483:bf01:2a66:fc03:b1bf:9cff)
[16:39:15] <The-Compiler> could be e.g. latin1
[16:39:22] <The-Compiler> >>> b'\xea'.decode('latin1')
[16:39:24] <The-Compiler> 'ê'
[16:39:38] <FFY00> okay, yeah
[16:39:40] *** Quits: schumaml (~schumaml@p579aa09a.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[16:40:02] <neo1968> pip 20.0.2 from /usr/lib/python3/dist-packages/pip (python 3.8)
[16:40:08] <FFY00> maybe we should add an alias to extended-ascii
[16:40:36] <The-Compiler> neo1968: can you pastebin the output of this?   python3 -v -c "import requests"
[16:40:50] <gitesh> do you always use `import copy` to deep copy?
[16:41:52] *** Joins: schumaml (~schumaml@p4ff91d2b.dip0.t-ipconnect.de)
[16:42:21] <The-Compiler> gitesh: I try to avoid having to deep copy things, but yeah, if it's really needed, copy.deepcopy is probably the thing to use
[16:42:56] *** Joins: regreg (~regreg@2a02:2f09:531a:c700:586:97e4:b5d5:795c)
[16:43:44] <neo1968> pastebin?
[16:43:46] *** Joins: Geronimo (~Geronimo@user/geronimo)
[16:44:56] <jinsun> neo1968: https://bpa.st/
[16:46:03] <gitesh> I did deepcopy still I'm getting same id's for elemenets -----> https://bpa.st/WHNA
[16:46:46] <bjs> gitesh: yes the ints didn't get copied
[16:46:49] *** Quits: y1n (~y1n@84-115-65-76.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[16:46:50] <FFY00> that's expected, ints are immutable
[16:47:00] *** Joins: khrbt (~znc@user/khrbt)
[16:47:04] <gitesh> bjs: oh i got it
[16:47:25] <gitesh> bjs: so mutable and immutable objests matters
[16:48:10] <neo1968> Ok I pasted it there
[16:48:10] <bjs> gitesh: i guess,  it's best to just not use deepcopy ever
[16:48:27] *** Joins: imp (~imp@192-141-191-229.alternativaip.net.br)
[16:48:42] <_Mocramis> gitesh: i don't think so, tuple are immutable but gets copied
[16:49:10] *** Quits: kieto (~kieto@user/kieto) (Ping timeout: 240 seconds)
[16:50:16] <FFY00> they do not
[16:50:19] <FFY00> same id too
[16:50:36] <jinsun_> neo1968: after that you have to paste the link to your paste here too
[16:51:02] <bjs> FFY00: _Mocramis: you're both correct!  they *sometimes* get copied
[16:51:11] *** Quits: bitdex_ (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:51:25] <FFY00> bjs, oh, when?
[16:51:30] <bjs> FFY00: when they need to be copied.
[16:51:38] <_Mocramis> bjs: not at all
[16:51:40] *** Joins: zaz (~zaz@poneybl.eu)
[16:51:45] <bjs> _Mocramis: what "not at all"?
[16:52:00] <_Mocramis> gitesh example is an issue with the 256 first integers
[16:52:20] <_Mocramis> which are statically stored in the .data section of python
[16:52:35] <_Mocramis> and herefore always have the same pointer therefore the same id
[16:52:45] <bjs> _Mocramis: that's not what's going on in gitesh's example, and python doesn't really have sections like that
[16:52:58] <bjs> but yes in gitesh's example the ints are not being copied
[16:54:13] <FFY00> _Mocramis, just try it with a tuple that you think will break
[16:54:20] <_Mocramis> http://ix.io/3xr0
[16:55:02] <bjs> _Mocramis: what are you trying to prove exactly with this example?
[16:55:06] *** Quits: neo1968 (~neo@98.186.218.167) (Ping timeout: 256 seconds)
[16:55:11] <bjs> it doesn't use copy.deepcopy at all
[16:55:15] <_Mocramis> well the loops pause at 256
[16:55:31] <_Mocramis> the issue isn't with deepcopy
[16:55:34] <bjs> _Mocramis: but we're talking about deepcopy here and gitesh's example, your example doesn't use deepcopy at all
[16:55:37] <bjs> _Mocramis: what "issue"?
[16:56:07] <_Mocramis> but deepcopy does not have exception for int
[16:56:19] <FFY00> it doesn't need to
[16:56:24] <bjs> uh, it definitely does
[16:56:28] <_Mocramis> it is just that int(<anything under 256>) have the same id as the original int
[16:56:32] <bjs> and I'm still not sure what you're trying to prove
[16:56:53] <bjs> _Mocramis: this is a fun exercise but a tangent from gitesh's question
[16:57:03] <bjs> because gitesh's question was about deepcopy not about interning of ints
[16:57:14] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[16:57:25] <_Mocramis> it was about getting the same id with deepcopy
[16:57:37] <gitesh> _Mocramis: is that for optimization
[16:58:01] <bjs> _Mocramis: yes,  it's about deepcopy not about interning.  As FFY00 points out, it also happens with tuples (sometimes)
[16:58:05] <_Mocramis> the answer is that deepcopy performs the copy, but that all equal ints under 256 will get the same id
[16:58:05] <bjs> gitesh: yes.
[16:58:11] <bjs> _Mocramis: that is not the correct answer
[16:58:23] <_Mocramis> gitesh: i think so, there was a blog bost about the reason somewhere
[16:58:28] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[16:58:52] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[16:59:07] <bjs> _Mocramis: there's a very simple experiment you can do, you can try copy.deepcopy a big integer and see what happens
[16:59:27] <bjs> ints don't get copied, tuples sometimes get copied
[16:59:28] <bjs> etc
[16:59:30] *** Joins: goepsilongo_ (~goepsilon@2603-7000-ab00-62ed-41c9-c3be-94ad-0c24.res6.spectrum.com)
[16:59:45] <jinsun_> I guess tuples are copied when they have mutable references? but not if they only have ints
[16:59:46] <bjs> and as i say earlier, it's best just to not use deepcopy if possible
[16:59:58] <bjs> jinsun_: that's roughly it
[17:00:12] <bjs> they get copied when they need to be copied :)
[17:00:34] *** Joins: Payam (~Payam@c188-150-219-9.bredband.tele2.se)
[17:00:46] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-f994-ccd9-a78d-3463.res6.spectrum.com) (Ping timeout: 256 seconds)
[17:01:07] <bjs> (or I guess technically they never get copied, just sometimes a new tuple is created)
[17:01:12] <FFY00> https://paste.xinu.at/lTHRLd/
[17:01:51] <FFY00> if it's just immutable data, they don't need to be copied
[17:03:01] <FFY00> in this case, which is just about ints, they only hold immutable data, so do not get copied
[17:03:37] <FFY00> it has nothing to do with optimizations for ints <256
[17:04:35] *** Parts: lessless (~lessless@ip.82.144.211.11.stat.volia.net) (Textual IRC Client: www.textualapp.com)
[17:04:57] <FFY00> I think CPython also does some caching for ints above 256, but I am not sure
[17:05:02] <FFY00> bjs may know
[17:05:14] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:05:15] *** Joins: neo1968 (~neo@98.186.222.167)
[17:05:35] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[17:05:36] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[17:06:01] *** Quits: legola (~legola@46.235.100.27) ()
[17:06:06] <_Mocramis> bjs: FFY00: Ok, my bad then, i guess tuple mutability depends on its content then.
[17:08:24] <neo1968> Ok, so I lost my connection for some reason. I was being helped about the "import requests problem"
[17:08:39] *** Quits: rannnn8888 (~rannnn888@bzq-79-183-158-130.red.bezeqint.net) (Ping timeout: 256 seconds)
[17:09:35] <bjs> FFY00: as far as I recall it does not,  but it does cache some negative ints too
[17:09:38] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 244 seconds)
[17:09:49] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:09:52] <jinsun> neo1968: you pasted something but didn't give us the link
[17:10:06] <bjs> like -5 <= i <= 256 or something
[17:10:06] *** Joins: legola (~legola@46.235.100.27)
[17:13:30] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[17:13:36] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0:fa88:8bc5:c0d2:27cc) (Quit: Leaving)
[17:14:17] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0:fa88:8bc5:c0d2:27cc)
[17:14:52] <HaJo> neo1968: so your installation is missing the requests module?
[17:15:01] *** Joins: ferros (~ferros@vps-eacaba1b.vps.ovh.net)
[17:15:45] *** Joins: ihristov (~ihristov@217.145.94.71)
[17:16:33] <neo1968> https://bpa.st/ZX3Q
[17:16:55] <HaJo> neo1968: If you are on debian, a _apt install python3-requests_ should do whats necessary.
[17:17:16] <neo1968> kubuntu
[17:17:43] <neo1968> ok that's a variation of debian, right?
[17:18:19] *** Joins: maryo87 (~Maryo@117.241.217.8)
[17:18:41] *** Quits: imp (~imp@192-141-191-229.alternativaip.net.br) (Quit: imp)
[17:18:41] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[17:18:43] *** Joins: PyT001 (~PyT001@2402:e280:3d22:227:100f:556b:9085:4e1f)
[17:18:56] <HaJo> sorry neo1968, thats too much input for me. No time to debug all that stuff, sorry...
[17:20:15] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[17:20:27] <neo1968> python3-requests is already the newest version (2.22.0-2ubuntu1).
[17:20:39] *** maryo87 is now known as maryo
[17:21:00] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 244 seconds)
[17:21:42] <PyT001> hi is there a way to redraw a pic image say a flower structure programmatically?
[17:22:00] <Moult> is there a recommended module for checking test coverage? i am using pytest as per nedbat 's recommendation :)
[17:22:50] <PyT001> grym:Thanks the opencv commands to erode the outlines helped and i got the desired output , i would like to redraw the same , is there any library available for redrawing?
[17:22:53] *** Joins: cedric (~cedric@2a01:cb11:867:c200:c50c:54e6:aad6:bd26)
[17:22:59] <jinsun> Moult: https://github.com/nedbat/coveragepy/, written by nedbat himself!
[17:23:02] <neo1968> Anyway, this machine has everything freshly installed.  I'm checking out a distro called KitHack. Anyone familiar?
[17:23:22] <The-Compiler> neo1968: I don't see an error in your paste, the import was done successfully
[17:23:34] <The-Compiler> neo1968: where are you seeing that error exactly
[17:23:50] <neo1968> OK, I'm checking out KitHack
[17:23:52] <Moult> jinsun: hah! yes indeed. very well then :)
[17:24:04] <neo1968> Some of the tools withing KitHack are generating the error
[17:24:07] *** Quits: maryo (~Maryo@117.241.217.8) (Changing host)
[17:24:07] *** Joins: maryo (~Maryo@user/maryo)
[17:24:44] <neo1968> However, the KitHack files look to be 8 years old
[17:24:52] *** Quits: maryo (~Maryo@user/maryo) (Quit: Leaving)
[17:25:22] *** Quits: shad (~shad@user/shad) (Ping timeout: 250 seconds)
[17:25:39] *** Quits: qwedfg_ (~qwedfg@user/qwedfg) (Ping timeout: 244 seconds)
[17:25:47] *** Quits: stpz (~stpz@240e:341:229d:4a00:c0db:de25:d22d:fab) (Quit: Client closed)
[17:26:01] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[17:26:18] *** Joins: maryo (~Maryo@user/maryo)
[17:26:22] *** Joins: Vonter (~Vonter@user/vonter)
[17:26:36] <jinsun> Moult: or use pytest-cov plugin for pytest https://pypi.org/project/pytest-cov/ which uses coveragepy internally, with that you can run `pytest` directly instead of `coverage run -m pytest`
[17:27:27] <neo1968> ok, I'll check that out
[17:27:32] <neo1968> Thanks
[17:27:47] *** Quits: JavaBean (~JavaBean@user/javabean) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:27:59] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[17:28:14] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[17:30:03] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:cca9:b466:1d3f:ec1e:75f1) (Remote host closed the connection)
[17:30:23] *** Quits: daniel-k (~daniel-k@192.241.135.211) (Changing host)
[17:30:23] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[17:30:37] *** Joins: p-i- (~Ohmu@171.6.224.111)
[17:32:28] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[17:32:47] *** Joins: montxero (~user@149.167.149.74)
[17:32:48] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[17:34:33] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 248 seconds)
[17:35:03] *** Joins: Shanzem (~Shanzem@86.31.109.147)
[17:35:45] <Moult> jinsun: thanks for the tip!
[17:35:52] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[17:36:11] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::4433) (Quit: Konversation terminated!)
[17:36:41] *** Joins: vit (~vit@chello085216193138.chello.sk)
[17:37:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Quit: Lost terminal)
[17:37:21] *** Quits: neo1968 (~neo@98.186.222.167) (Quit: Konversation terminated!)
[17:39:14] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:40:06] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 250 seconds)
[17:41:24] *** Quits: vit (~vit@chello085216193138.chello.sk) (Ping timeout: 250 seconds)
[17:43:58] *** Joins: shangxiao (~davids@124.182.71.141)
[17:44:21] *** Joins: Kvothe (~weechat@user/elodin)
[17:44:50] *** Joins: pycurious (~Adium@user/pycurious)
[17:46:28] <Payam> Hi dear Python people. So I try to run asyncio inside a thread. What I have trouble with is run my async functions . For instance I want to  call `get_info` from `download_activate`. I can not come up with a way of calling it from a regular function. Any ideas? https://bpa.st/P6KQ
[17:48:33] *** Joins: tf (~tf@user/tf)
[17:48:42] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[17:48:56] *** Quits: maryo (~Maryo@user/maryo) (Quit: Leaving)
[17:49:11] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (Quit: nyaa~)
[17:49:54] *** Joins: shad (~shad@user/shad)
[17:54:14] *** Joins: JavaBean (~javabean@user/javabean)
[17:54:48] *** Parts: grondilu (~grondilu@91-164-198-91.subs.proxad.net) ()
[17:54:50] *** Joins: czuk_cza (~mist@188.147.100.88.nat.umts.dynamic.t-mobile.pl)
[17:55:50] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[17:57:15] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (Quit: AmigaOS PPC 4.1 +E +U1 // AmIRC 68K)
[17:57:46] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Ping timeout: 252 seconds)
[17:58:02] *** Joins: spaceone (~spaceone@wc1.wechall.net)
[17:58:21] <shangxiao> Payam: I'm still a noob with asyncio myself but from what I understand is that you can't just call a coroutine directly, eg you have to use asyncio.run()
[17:59:08] <Payam> yes. well there wil be instances of ListOperation class and I want all of them to use the same loop
[17:59:22] <Payam> So I can not run asyncio over and over again.
[18:02:07] <shangxiao> Payam: maybe take a look at: https://docs.python.org/3/library/asyncio-task.html#running-tasks-concurrently
[18:02:46] <Payam> shangxiao, yes. but the instances are not created at the same time. so I can not just gather them
[18:02:58] <Payam> There should be a away to somehow put them inside the loop
[18:03:24] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[18:05:23] <Payam> One question: When I import a file, doesn't it run at the same time?
[18:05:34] <Payam> Doesn't the constructor get run?
[18:05:39] *** Quits: PyT001 (~PyT001@2402:e280:3d22:227:100f:556b:9085:4e1f) (Quit: Client closed)
[18:09:40] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[18:10:14] *** Joins: y04nn (~y04nn@91.193.4.154)
[18:10:25] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[18:10:43] *** Joins: spithash (~spithash@user/spithash)
[18:11:18] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 250 seconds)
[18:15:04] <shangxiao> Payam: Constructors will only run at import time if you instantiate an object of that type at module-level
[18:15:22] <Payam> hmm
[18:15:24] <Payam> thanks
[18:15:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[18:16:11] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-9c50-f290-3cc4-9a67.res6.spectrum.com)
[18:17:05] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[18:17:51] *** Joins: fikran (~fikran@user/fikran)
[18:21:35] *** Joins: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[18:22:13] *** Quits: death916 (~death916@user/death916) (Quit: ZNC 1.8.2 - https://znc.in)
[18:23:46] <Kabouik> I am new to Python (never got any course for it) and I am having an issue with this script (https://dpaste.com/455WDL2LA). It scraps data from a website (`res`) and for each event it finds, it scraps extra data from the url in `details`. It almost works, but for some reason the json files it returns is only a replication of the last found event, replicated n times where n is the total number of events there was.
[18:24:09] *** Joins: fanis30 (~anon@adsl-209.37.6.3.tellas.gr)
[18:24:28] <Kabouik> If I remove the `for url in details:` block, then it works, but I lose this extra `details` data.
[18:25:12] <Kabouik> I suspect there is just something looping in a bad way and only returning the last result, but I can't see it with my non-python goggles
[18:26:07] <Repiphany> result = [] in line 40 should be outside of the for loop
[18:26:15] *** Joins: artwalker (~Adium@36.113.113.69)
[18:26:57] <Kabouik> So, just de-indenting lines 40-42? I tried that but it only returns one result in that case
[18:27:08] *** Joins: Pickchea (~private@user/pickchea)
[18:27:13] <Repiphany> It should be before line 25
[18:27:36] <Repiphany> If you have it inside the for loop, it makes a new empty list for every iteration of the loop
[18:27:44] *** Joins: Guest26_ (~textual@d-216-189-175-197.fl.cpe.atlanticbb.net)
[18:27:57] <shangxiao> Kabouik: btw if you run flake8 on that code it should complain about the error Repiphany is referring to
[18:28:31] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 252 seconds)
[18:28:36] *** Joins: arinov (~arinov@5.24.96.241)
[18:28:54] <shangxiao> (because it's possible that result is referred to before any declaration)
[18:29:21] *** Quits: ihristov (~ihristov@217.145.94.71) (Quit: Connection closed)
[18:30:05] <Kabouik> Brilliant, I think it worked!
[18:30:38] *** Joins: lethu (~lethu@user/lethu)
[18:30:38] <Kabouik> Yup, awesome: https://0x0.st/-vsc.png
[18:30:40] <Kabouik> Thanks a lot
[18:31:20] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:39f6:4240:69e2:4657)
[18:32:04] <Kabouik> Hum, except items Time, Location, Title and Details are identical in both evetns
[18:32:15] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[18:32:28] <MrBurns> Why is SSHTunnelForwarder giving error Password is required for key /home/myname/.ssh/id_rsa ... Im using the correct key. code: https://pastebin.com/u4KqB67y
[18:32:33] <Kabouik> Only those in the `for url in details:` are correct
[18:33:13] *** Quits: zaz (~zaz@poneybl.eu) (Quit: bye)
[18:33:17] *** Joins: odoood (~odoood@2601:c8:c003:a550::7)
[18:33:20] *** Joins: mickey (~user@user/mickey)
[18:33:44] *** Joins: zaz (~zaz@poneybl.eu)
[18:34:07] *** Joins: besnn (~besnn@user/besnn)
[18:35:35] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Quit: WeeChat 2.8)
[18:35:40] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 252 seconds)
[18:36:18] <shangxiao> MrBurns: have you verified that your .ssh/ dir and id_rsa file have the correct restricted perms?
[18:37:20] *** Joins: blingrang_ (~blingrang@user/blingrang)
[18:37:29] <MrBurns> shangxiao: Yes. ssh connection to server works from commandline
[18:41:38] *** Quits: GenTooMan (~cyberman@c-73-214-106-63.hsd1.pa.comcast.net) (Ping timeout: 250 seconds)
[18:42:38] *** Quits: fanis30 (~anon@adsl-209.37.6.3.tellas.gr) (Ping timeout: 244 seconds)
[18:42:52] *** Quits: blingrang_ (~blingrang@user/blingrang) (Ping timeout: 252 seconds)
[18:43:02] *** Joins: blingrang_ (~blingrang@user/blingrang)
[18:44:31] *** Joins: fanis30 (~anon@adsl-180.37.6.1.tellas.gr)
[18:44:44] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[18:47:53] *** Joins: magla (~gelignite@55d45175.access.ecotel.net)
[18:48:49] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[18:48:55] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:8b72:3c3e:c654:5bbd) (Ping timeout: 252 seconds)
[18:51:07] *** Quits: y04nn (~y04nn@91.193.4.154) (Ping timeout: 252 seconds)
[18:51:24] <Kabouik> Repiphany, shangxiao, I moved the `restult = []` and fixed all warnings raised by flake8 (except long lines for now): https://dpaste.com/A52CHNTTM However my Time, Location, Title and and Details objects are now the issue. All scraped events share the same values for these. Source, Lat and Lon are OK since I moved `result = []` though.
[18:52:15] *** Joins: Roey (~Roey@user/Roey)
[18:52:39] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[18:54:00] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[18:54:27] *** Joins: mickey (~user@user/mickey)
[18:55:43] <Repiphany> I don't know what you're trying to do with looping through details but you're putting details itself in json_data for every loop
[18:55:48] <Kabouik> I fond an issue with `t, l, t, d, s, y, x`, but I fixed it, it's unrelated
[18:56:01] <Repiphany> also putting EPD, locs, titles in each loop of details
[18:56:25] <Kabouik> In fact the details object is a sub-URL for each event, in which I can get the extra info (source, lat, lon), so I need to loop through details
[18:57:15] *** Joins: jaggz (~jaggz@user/jaggz)
[18:57:32] <jaggz> stg.class_dirs[*(y_max.tolist())]  *** SyntaxError: invalid syntax
[18:57:42] <jaggz> class_dirs is a list of strings
[18:57:46] *** Quits: montxero (~user@149.167.149.74) (Remote host closed the connection)
[18:57:55] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[18:58:00] *** Joins: montxero (~user@149.167.149.74)
[18:58:03] <jaggz> y_max is an int numpy array
[18:58:12] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Remote host closed the connection)
[18:58:14] *** Joins: akk (~akk@174-28-98-206.albq.qwest.net)
[18:58:22] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[18:58:36] <jaggz> can it be splatted or do I need a list comprehension?
[18:59:16] <Repiphany> jaggz: operator.itemgetter is a thing
[18:59:27] <Repiphany> List comprehension is probably more normal
[18:59:33] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Client Quit)
[18:59:56] *** Quits: HaJo (~HaJo@2a01:c23:9417:7c00:821f:2ff:feef:dabf) (Quit: Client closed)
[19:00:22] <Kabouik> Do you mean that I should store `url` instead of `details` in my json_data, and iterate through EPD, locs and titles similarly?
[19:02:11] *** Joins: nomic (~nomic@185.217.117.169)
[19:02:59] *** Quits: shad (~shad@user/shad) (Ping timeout: 250 seconds)
[19:03:02] <Repiphany> Why are you even making json_data and then zipping and unzipping it into the same dict
[19:03:52] *** Quits: xnbq (~xnbq@user/xnbq) (Ping timeout: 245 seconds)
[19:04:05] <Kabouik> There is probably not good reason, I suspect it's just me trying to inflate the script from the existing base but with my limited knowledge
[19:04:28] <jaggz> Repiphany, [for ..] it is! :)
[19:04:54] <Kabouik> In the end I want a json file that contains for each event (EPD): EPD iteration, locs iteration, titles iteration, details iteration, and then source, lat and lon
[19:05:12] <Repiphany> Also could convert it into a numpy array to index it
[19:05:42] <jaggz> Repiphany, oh yeah!  good idea
[19:05:47] <jaggz> not for this one here though, but good reminder
[19:06:04] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-55ae-d7d8-7bcf-ce25.res6.spectrum.com)
[19:06:09] <Kabouik> source, lat and lon being all three fetched from details' url
[19:08:38] <Repiphany> Kabouik: I can't really be bothered trying to understand all of the context but presumably you actually want to be doing `for url, ... in zip(details, EPD, locs, titles)` in line 27
[19:09:39] *** Quits: feoh (~feoh@ec2-18-224-106-217.us-east-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[19:10:55] <Kabouik> I think the zipping and unzipping is just so that data is stored as `{t, l, m, d, s, y, x}, {t, l, m, d, s, y, x}` for two events, instead of `{[t, t], [l, l], [m, m], [d, d], [s, s], [y, y], [x, x]}`, but maybe I just misunderstood when I did it
[19:12:07] <Repiphany> What you have written is identical to just doing `result.append(json_data)`
[19:14:07] *** Joins: shad (~shad@user/shad)
[19:14:43] <DerpGusta> is there a way to pass multiple arguments for each function in concurrent.futures.ProcessPoolExecutor?
[19:15:11] <DerpGusta> with executor.map() function that is...
[19:15:39] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[19:16:46] <Kabouik> I don't get the same json structure if I simplify to `result.append(json_data)`: data is not stored for multiple events inside square brackets: https://0x0.st/-vs_.png
[19:16:49] *** Joins: szymon (~ugh@staticline-31-183-187-232.toya.net.pl)
[19:17:08] <Kabouik> I know it's me doing something wrong, I just have trouble finding my way
[19:17:10] *** Quits: ssbr_ (~ssbr@python/site-packages/ssbr) (Ping timeout: 250 seconds)
[19:17:39] <Payam> can someone be nice and explain to me how to make a object singletonic?
[19:19:10] <Payam> I want to use the same class object for all instances. There is a object inside my class. And all its instances should use the same and only object in that class.
[19:19:27] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 250 seconds)
[19:19:43] *** Joins: medium_cool (~medium_co@2605:a601:a9ed:4300:8445:2d69:8aad:a629)
[19:20:01] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[19:20:14] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[19:21:15] <Payam> I want to make _thread a singleton : https://bpa.st/ZKVQ
[19:22:31] *** Joins: besnn (~besnn@user/besnn)
[19:24:04] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[19:24:17] <jinsun> the class attributes are already "singleton", aren't they? Engine._thread will be the same object no matter what self is
[19:24:20] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[19:27:48] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[19:29:04] *** Quits: goepsilongo_ (~goepsilon@2603-7000-ab00-62ed-41c9-c3be-94ad-0c24.res6.spectrum.com) (Ping timeout: 252 seconds)
[19:29:25] *** Quits: odoood (~odoood@2601:c8:c003:a550::7) (Ping timeout: 250 seconds)
[19:29:46] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:29:52] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:30:31] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-41c9-c3be-94ad-0c24.res6.spectrum.com)
[19:30:59] *** Joins: death916 (AdiIRC@user/death916)
[19:31:16] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 252 seconds)
[19:32:04] <Payam> jinsun, I was wrong. I want to make the whole class a singletone
[19:33:10] *** Quits: ATAD (~ATAD@user/atad) (Ping timeout: 240 seconds)
[19:33:17] *** Joins: brabrax (~brabrax@user/brabrax)
[19:33:51] *** Quits: medium_cool (~medium_co@2605:a601:a9ed:4300:8445:2d69:8aad:a629) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[19:34:00] <Payam> jinsun, https://bpa.st/ZZKQ I create difference instances. and when I run this code it says` metaclass conflicts`
[19:34:34] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[19:35:26] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[19:36:11] *** Quits: matkor (~matkor@93.179.197.152) (Quit: Konversation terminated!)
[19:37:52] *** Joins: ATAD (~ATAD@user/atad)
[19:38:45] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:43:20] <jinsun> hmm, that is probably because the base class has a different metaclass, so your metaclass should inherit from the metaclass of the base class
[19:43:30] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[19:43:44] *** Joins: FTW (~kvirc@host-79-54-126-90.retail.telecomitalia.it)
[19:43:47] <FTW> hi
[19:43:54] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[19:45:15] <FTW> is there any fast pdf library for extracting text from a lot of files?
[19:46:27] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[19:46:40] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[19:47:28] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[19:49:37] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[19:49:38] *** Joins: ssbr_ (~ssbr@python/site-packages/ssbr)
[19:50:53] <FTW> tried pdfplumber, pdfminer.six ...
[19:52:57] *** Joins: pro_z (~pro_z@37.214.46.94)
[19:54:09] *** Joins: dasbootmir (~dasbootmi@user/dasbootmir)
[19:54:31] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[19:55:25] *** Quits: Guest26_ (~textual@d-216-189-175-197.fl.cpe.atlanticbb.net) (Ping timeout: 252 seconds)
[19:55:29] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 244 seconds)
[19:56:48] <grym> it's a hard problem
[19:57:52] <FTW> also i forgot to mention reliable, pdfplumber gave back chars that didn't exist
[19:58:04] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:58:12] *** Joins: medium_cool (~medium_co@2605:a601:a9ed:4300:8445:2d69:8aad:a629)
[19:58:28] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:58:44] <akk> It's tough to find anything reliable dealing with pdf -- there are so many crazy pdfs out there.
[19:59:00] <shlomif> akk++
[19:59:37] <grym> FTW: an overview of pain https://filingdb.com/b/pdf-text-extraction
[19:59:38] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:59:42] <akk> My dealing with pdfs requires converting them to html, and I couldn't find a module that could do that reliably, so I fell back on calling pdftohtml via subprocess.
[19:59:55] *** Quits: nomic (~nomic@185.217.117.169) (Quit: Leaving)
[20:00:12] *** Joins: nomic (~nomic@185.217.117.169)
[20:00:37] *** Quits: zepolen (~zepolen@2a02:587:8611:2428:68dd:47db:570a:ca45) (Quit: Konversation terminated!)
[20:01:22] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[20:02:07] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[20:02:13] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[20:02:29] *** Joins: zepolen (~zepolen@2a02:587:8611:2428:cac:75c1:8080:b6e9)
[20:02:33] <FTW> ok if there is nothing reliable, what's the "most" reliable ?
[20:04:07] *** Quits: zepolen (~zepolen@2a02:587:8611:2428:cac:75c1:8080:b6e9) (Client Quit)
[20:04:36] <FTW> the most forgiving tool out there, if i come across shitty pdfs no problem i just need something flexible if such thing exists
[20:04:41] *** Joins: khrbt (~znc@user/khrbt)
[20:04:52] *** Quits: medium_cool (~medium_co@2605:a601:a9ed:4300:8445:2d69:8aad:a629) (Quit: Textual IRC Client: www.textualapp.com)
[20:05:40] *** Joins: sillyboots (~richdyl@168.208.215.217)
[20:06:15] <akk> I suspect it depends on the PDFs, probably different libraries are written/tested to different types of PDFs.
[20:06:51] *** Quits: czuk_cza (~mist@188.147.100.88.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 244 seconds)
[20:07:02] * akk wishes people would quit using PDF for anything except documents they're about to print on paper
[20:07:25] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:07:26] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 250 seconds)
[20:08:04] <sillyboots> Hey Python friends. Wondering if there's a way to force Python to not use a compiled .so version of a program when invoked? I am trying to test a patch I made against my installed mypy but I can't get it to use the .py files
[20:08:08] <FTW> ebook 's pdf is the main target, hopefully the layout is not crazy
[20:09:05] *** Joins: ens (~ens@yoke.ch0wn.org)
[20:10:03] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:10:52] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[20:11:12] <ens> hi folks. my requirement is to use a socket to read any data periodically from a socket, then do some other stuff involving checking a file contents (and maybe send something to the socket) << in a loop
[20:11:26] <jinsun> sillyboots: did you patch your site-packages folder? ideally you should clone mypy's code and patch that and install it, but a simple solution would be to just delete all the .so files from the mypy folder and resintall mypy later
[20:11:36] *** Joins: legola (~legola@46.235.100.27)
[20:11:43] <ens> does anyone recommend an import that i should use for handling this requirement with sockets being periodically read?
[20:12:33] <sillyboots> jinsun: I did, yes. I was hoping I could just add a quick flag to avoid having to do a whole clone but if there's no way to override what python is loading then I might just do that instead
[20:13:58] *** Joins: friddo (~friddo@94.147.158.188)
[20:14:16] <jinsun> sillyboots: depends on what you find simple, deleting all the .so files recursively from the mypy folder and reinstalling later seems simple enough
[20:14:52] <sillyboots> jinsun: I gave it a try and got a segfault, maybe I should just suck it up and clone mypy :P
[20:15:12] *** Quits: FTW (~kvirc@host-79-54-126-90.retail.telecomitalia.it) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[20:16:06] *** Quits: legola (~legola@46.235.100.27) (Ping timeout: 250 seconds)
[20:16:57] <jinsun> sillyboots: did you delete only some .so files? half .py and half .so will probably cause segfaults, all .py shouldn't, but anyway cloning from github is a better idea, so do that
[20:17:04] <bionade24> Hello, list.append(Object()) doesn't always work for me. Is there a safer method to do this?
[20:17:04] <bionade24> test
[20:17:04] <bionade24> test
[20:17:23] <Wooble> bionade24: what does not working mean?
[20:18:01] <grym> (and what does Object() do)
[20:18:25] *** Joins: Hax0r (~Hax0r@46.38.93.176)
[20:18:32] <Wooble> I don't think somelist.append() will ever fail with anything but a MemoryError...
[20:18:49] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[20:19:25] <Wooble> (and even then constructing the object to append is orders of magnitude more likely to actually cause the error...)
[20:20:35] <bionade24> Wooble: len(list) is still zero after appending multiple objects. Seems like more of a problem with the type of list now though.
[20:21:11] *** Quits: saroy (~Sandipan@43.252.250.83) (Remote host closed the connection)
[20:21:28] <Wooble> bionade24: well, if you have some weird object named "list" that has a method ".append" that doesn't work... reconsider a lot of design choices? :)
[20:22:50] <bionade24> Wooble:  That object that implements a list isn't my choice but the frameworks message IPC stuff. Works fine in Cpp, so let's see if it really is the root cause. I could also blame races of the embedded interpreter,
[20:22:53] <bionade24> lets see.
[20:22:57] *** Quits: d0ku (~d0ku@178.43.56.75.ipv4.supernova.orange.pl) (Ping timeout: 245 seconds)
[20:23:11] <jinsun> bionade24: what is `type(list)` ? (replace list with the actualy variable you have)
[20:23:25] <ens> i guess i will use just socket and select stuff unless there is a more pythonically accepted way to do it.
[20:23:26] <grym> "i have a not-list, its append is broken, and its docs are here: "
[20:23:31] <grym> (would be helpful)
[20:23:35] *** Quits: artwalker (~Adium@36.113.113.69) (Quit: Leaving.)
[20:24:32] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:24:48] <bionade24> jinsun: It's custom ROS msg type, containing an array of ROS msgs. http://wiki.ros.org/msg
[20:25:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[20:25:44] <grym> ah.  ROS.  well, that's why its hosed
[20:26:37] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[20:26:51] *** Joins: montxero (~user@149.167.149.74)
[20:26:57] <bionade24> Ah damn I should have looked into the docs. Variable length array msgs are std::vector in C++, but tuple in Python. WTF?
[20:27:12] *** Joins: fikran (~fikran@user/fikran)
[20:27:27] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[20:28:04] *** Joins: montxero (~user@149.167.149.74)
[20:28:17] *** Joins: lessless (~lessless@ip.82.144.211.11.stat.volia.net)
[20:28:27] <grym> well, you certainly can't append to those
[20:29:02] <bionade24> grym: I know, I just didn't even one second considered they could be tuples.
[20:29:04] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 244 seconds)
[20:29:26] <jinsun> tuple.append should have given clear error, unless that class is wrapping tuples, then it is kind of bad design if it just silently ignores appends instead of throwing error when you try to append
[20:30:36] <bionade24> This choice just damn makes zero sense if they're tuple. They actually implement append(), although it seems to be unreliable. But most of the time it works.
[20:31:09] <grym> (it's because ROS is a mess)
[20:31:38] *** Parts: friddo (~friddo@94.147.158.188) ()
[20:32:11] *** Joins: newpy (~newpy@2601:280:4381:1390:d8a2:4368:1fe2:a8e3)
[20:32:12] *** Joins: colorado (~fluiD@161.97.231.145)
[20:33:11] *** Joins: ssbr` (~ssbr@python/site-packages/ssbr)
[20:34:05] *** Joins: theprophet (~theprophe@85.114.228.184)
[20:34:07] <p-i-> I've just started using arrow for all my date/time needs. It's awesome.
[20:34:22] *** Joins: dxrt_ (~dxrt@user/dxrt)
[20:34:25] <bionade24> grym: Do you know fif they fixed that in ROS2?
[20:34:32] <grym> bionade24: i don't.
[20:34:34] *** Joins: vit (~vit@chello085216193138.chello.sk)
[20:34:40] *** Quits: dxrt (~dxrt@user/dxrt) (Ping timeout: 240 seconds)
[20:34:40] *** dxrt_ is now known as dxrt
[20:35:10] *** Quits: fluiD (~fluiD@161.97.231.145) (Ping timeout: 240 seconds)
[20:35:40] *** Quits: ssbr_ (~ssbr@python/site-packages/ssbr) (Ping timeout: 240 seconds)
[20:38:34] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[20:39:42] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:39:59] *** Joins: qlixed (~qlixed@181.44.129.13)
[20:40:00] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[20:40:37] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[20:41:13] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:a1be:2710:2837:d377) (Quit: Textual IRC Client: www.textualapp.com)
[20:42:00] *** Joins: goepsilongo_ (~goepsilon@2603-7000-ab00-62ed-d076-a878-a2d3-a90b.res6.spectrum.com)
[20:43:05] *** Joins: PyT001 (~PyT001@2402:e280:3d22:227:100f:556b:9085:4e1f)
[20:43:50] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-41c9-c3be-94ad-0c24.res6.spectrum.com) (Ping timeout: 250 seconds)
[20:45:02] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 245 seconds)
[20:46:08] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:46:38] *** Joins: rsx (~dummy@ppp-188-174-154-15.dynamic.mnet-online.de)
[20:47:01] *** Quits: nomic (~nomic@185.217.117.169) (Quit: Leaving)
[20:47:19] *** dcaro is now known as dcaro_away
[20:47:44] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[20:50:36] *** Joins: Shanzem_ (~Shanzem@86.31.109.147)
[20:50:52] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 245 seconds)
[20:51:53] *** Joins: junktext (~junktext@109.201.152.169)
[20:53:30] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[20:53:48] *** Quits: Shanzem (~Shanzem@86.31.109.147) (Ping timeout: 250 seconds)
[20:54:26] *** Joins: Samian (~Sami@2620:10d:c091:480::1:2d50)
[20:54:51] *** Quits: rsx (~dummy@ppp-188-174-154-15.dynamic.mnet-online.de) (Quit: rsx)
[20:55:27] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:56:01] *** Joins: nomic (~nomic@185.217.117.169)
[20:56:04] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[20:56:13] *** Joins: manin (~x@185.242.190.95)
[20:56:51] *** Joins: jmft2 (~jmft2@81.149.115.87.dyn.plus.net)
[20:58:29] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[20:58:47] *** Joins: montxero (~user@149.167.149.74)
[20:59:09] <jmft2> What's a good library for converting Markdown to HTML? I specifically would like the dialect that GitHub supports, including syntax highlighting and LaTeX. I've been using https://python-markdown.github.io/ but it seems a bit limited.
[20:59:31] *** Joins: emika2 (~emika@185.207.249.46)
[20:59:35] *** Joins: timdiels (~user@78-22-205-207.access.telenet.be)
[21:00:04] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 244 seconds)
[21:00:55] *** Quits: emika (~emika@185.207.249.28) (Ping timeout: 252 seconds)
[21:00:55] *** emika2 is now known as emika
[21:01:21] *** Joins: kevinlc (~kevinalh@2800:200:e8d0:20b::4)
[21:01:27] <timdiels> Seems constant variable casing is mainly used for global constants, not e.g. a name passed into a constructor and then kept constant for the rest of the object's life?
[21:01:54] <ChrisWarrick> jmft2: python-markdown is the most popular library for that
[21:01:55] <timdiels> I mean, all upper case variables
[21:02:40] <ChrisWarrick> jmft2: as for latex — katex and mathjax don’t need help from the markdown library to render math
[21:02:59] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:39f6:4240:69e2:4657) (Quit: Textual IRC Client: www.textualapp.com)
[21:03:47] *** Joins: Sky_Net (~Sky_Net@176.14.213.85)
[21:03:50] *** Quits: Mach (~Mach@82.79.208.93) (Quit: q)
[21:05:29] <ChrisWarrick> timdiels: yes, upper-case is for global constants, a name passed into the constructor would be different between instances
[21:05:56] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:06:50] *** Joins: Gurkenglas (~Gurkengla@dslb-088-064-053-140.088.064.pools.vodafone-ip.de)
[21:07:25] *** Quits: Vonter (~Vonter@user/vonter) (Quit: WeeChat 3.2)
[21:07:32] *** Quits: lothar_m (~lothar_m@84.65.166.229) (Quit: WeeChat 3.3-dev)
[21:08:04] *** Quits: jazzy (~jaziz@2600:380:4452:a3ec:1dd5:e36f:ac02:9c83) (Ping timeout: 252 seconds)
[21:08:14] *** Joins: Vonter (~Vonter@user/vonter)
[21:10:09] *** Quits: nomic (~nomic@185.217.117.169) (Quit: Leaving)
[21:10:21] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:11:09] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[21:11:18] <PyT001> grym: any libraries to redraw the image basically to make animation, i could get the  shapes using opensource, i had issue before , last time you suggested me to use erode function ,it is perfect now , any library helps to animate that flow?
[21:11:30] <timdiels> ChrisWarrick: alright, that's an easy rule then. E.g. I was thinking back to java, but seems it was called final there, so seems they don't call them constants either
[21:11:45] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[21:13:01] <ChrisWarrick> timdiels: Java’s constants are `static final`, and some style guides (eg. Google’s) specifies UPPER_SNAKE_CASE for them: https://google.github.io/styleguide/javaguide.html#s5.2.4-constant-names
[21:13:24] *** Quits: rinwa (~user@141.226.14.13) (Read error: Connection reset by peer)
[21:13:38] *** Joins: rinwa (~user@141.226.14.13)
[21:14:50] *** Joins: Akuli (~Akuli@87-94-109-202.bb.dnainternet.fi)
[21:15:02] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 245 seconds)
[21:15:03] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 244 seconds)
[21:15:28] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[21:15:44] *** Joins: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[21:15:47] *** Joins: Narrat (~omnius@p200300df5f00d33506ea56fffe2e7cdc.dip0.t-ipconnect.de)
[21:16:06] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[21:16:28] <p-i-> I'm using a lib that returns an AttributeDict d. d.keys() is actually returning KeysView(AttributeDict({'k1': v1, 'k2': v2}))
[21:16:34] <p-i-> Why isn't it just printing the keys?
[21:17:08] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:18:28] <jinsun_> it is up to the class how repr and str work
[21:18:51] *** Quits: ssbr` (~ssbr@python/site-packages/ssbr) (Read error: Connection reset by peer)
[21:19:08] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[21:20:15] <jinsun_> so KeysView might have defined its repr to show the entire object instead of just the keys
[21:20:17] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:20:58] <p-i-> So maybe I have to manually [k for k,v in attdict.items()]
[21:21:06] *** Quits: arinov (~arinov@5.24.96.241) (Ping timeout: 250 seconds)
[21:22:42] <raek> p-i-: if you want a list you can turn the iterator (KeysView) into a list like this: list(d.keys())
[21:23:14] <raek> both will work equally well in a for loop, but the list will look better in a print statement
[21:23:41] <p-i-> niice
[21:23:46] <raek> as far as I know, normal dictionaries behave like this too (.items() and .keys() return iterators, not lists)
[21:25:32] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[21:27:48] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Ping timeout: 272 seconds)
[21:28:07] <jinsun_> yeah but printing dict.keys() only shows the keys
[21:29:12] *** Quits: Payam (~Payam@c188-150-219-9.bredband.tele2.se) (Quit: Leaving)
[21:29:12] <jinsun_> not keys and values both, like the KeysView thing was showing
[21:30:12] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Remote host closed the connection)
[21:32:27] *** Joins: dtux (~dtux@2601:646:8f00:3f2:632e:50b3:a03e:842a)
[21:34:16] *** Joins: rhax (~yannick@user/rhax)
[21:36:19] *** Quits: dtux (~dtux@2601:646:8f00:3f2:632e:50b3:a03e:842a) (Client Quit)
[21:41:47] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 256 seconds)
[21:43:06] <hsv> Hi, any suggestions please how to unpack a byte array containind a serialised 'c struct' with non-byte aligned bitfields?
[21:43:20] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[21:43:41] * hsv has a look at https://docs.python.org/3/library/struct.html but it seems not to support bit-fields.
[21:44:14] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:44:57] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:45:20] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:45:35] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:47:32] <aphysically> now that I'm splitting up my project into files I'm running into a lot of issues I never really thought much about before
[21:47:39] *** Quits: Narrat (~omnius@p200300df5f00d33506ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[21:47:46] <aphysically> should I use my __init__ to import things that I intend to have available as part of a public API?
[21:47:55] *** Joins: Narrat (~omnius@p200300df5f00d33506ea56fffe2e7cdc.dip0.t-ipconnect.de)
[21:48:33] <aphysically> or at least namespace shuffling for it?
[21:50:50] <jinsun> you put stuff in your package `__init__` if you want to access it as `package.stuff`, leave it in a submodule if you want to access it as `package.submodule.stuff`
[21:51:17] <jinsun> both ways it is part of your public api, unless you call it `_stuff`
[21:51:20] *** Quits: szymon (~ugh@staticline-31-183-187-232.toya.net.pl) (Quit: szymon)
[21:52:42] <aphysically> right, ok
[21:54:02] *** Joins: netsan (~netsan@user/netsan)
[21:55:10] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 240 seconds)
[21:55:16] *** Quits: Sky_Net (~Sky_Net@176.14.213.85) (Quit: Leaving)
[21:59:17] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:cca9:b466:1d3f:ec1e:75f1)
[21:59:29] *** Joins: Cyberg33k (~Cybergeek@91.216.101.170)
[22:00:07] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 240 seconds)
[22:01:31] *** Quits: aphysically (~aphysical@user/aphysically) (Ping timeout: 250 seconds)
[22:01:51] *** Joins: fandre1986 (~fandre198@178-36-241-155.adsl.inetia.pl)
[22:02:16] *** Quits: nickodd (~nickodd@user/nickodd) (Ping timeout: 250 seconds)
[22:02:41] *** Joins: jiffe (~jiffe@mail.nsab.us)
[22:02:53] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[22:02:57] *** Quits: p-i- (~Ohmu@171.6.224.111) (Ping timeout: 245 seconds)
[22:03:09] *** Joins: sharperguy__ (~sharpergu@2001:1438:4010:3101:10a::3133)
[22:04:46] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:05:18] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:05:18] *** Quits: Hax0r (~Hax0r@46.38.93.176) (Read error: Connection reset by peer)
[22:05:27] *** Quits: sharperguy_ (~sharpergu@88.130.223.12) (Ping timeout: 245 seconds)
[22:06:28] *** Joins: Hax0r (~Hax0r@46.38.93.176)
[22:08:02] *** Joins: sharperguy_ (~sharpergu@2001:16b8:5cf2:5b00:2633:59f3:621a:18de)
[22:09:03] *** Joins: duszek (~duszek@adsa179.neoplus.adsl.tpnet.pl)
[22:09:25] *** Joins: aphysically (~aphysical@user/aphysically)
[22:09:52] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:2b96:47e:a2d2:4ad9)
[22:09:53] <duszek> how do i disable autocompetion when i type brackets and quote marks in PyCharm?
[22:10:40] <bookworm> go to the settings panel, autocorrect menu?
[22:10:46] *** Quits: sharperguy__ (~sharpergu@2001:1438:4010:3101:10a::3133) (Ping timeout: 252 seconds)
[22:11:34] *** Quits: fanis30 (~anon@adsl-180.37.6.1.tellas.gr) (Quit: WeeChat 3.2)
[22:13:31] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Ping timeout: 252 seconds)
[22:13:33] <duszek> bookworm: where is that autocorrect menu?
[22:14:15] <bookworm> there aren't too many sections, just click your way through it
[22:14:22] <bookworm> you can do it
[22:14:37] *** Quits: aphysically (~aphysical@user/aphysically) (Ping timeout: 252 seconds)
[22:14:45] <Wooble> duszek: pretty sure you want Editor > Smart Keys
[22:15:00] <Wooble> err... editor > general > smart keys
[22:15:22] <Wooble> in that "autocorrect" doesn't even exist. :P
[22:15:25] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:15:29] <duszek> Wooble: thanks, now what i pick?
[22:16:02] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:16:07] <Wooble> duszek: turn off insert paired brackets and pair quote?
[22:16:13] <bookworm> paraphrasing, but what else do they call it. "Intellisense" or whatever PR bingo they used
[22:16:23] <Wooble> bookworm: do you even have pycharm?
[22:16:31] <bookworm> been a while
[22:16:43] *** Joins: aphysically (~aphysical@user/aphysically)
[22:17:38] <bookworm> but yes, and at least then just clicking through the settings let me configure auto completion and unless they messed up in the meantime you'll still find it in the settings panel
[22:18:03] <bookworm> where else would you put configuration options?
[22:18:16] <duszek> well I find the old-school way of text editor + command line more fun but it's faster to use PyCharm
[22:18:38] <Wooble> duszek: it's even faster if you never have to type a closing ) :P
[22:18:58] <duszek> Wooble: that feature actually irritates me and makes me slower, I'm an outlier
[22:19:33] *** Quits: netsan (~netsan@user/netsan) (Remote host closed the connection)
[22:19:51] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[22:20:26] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:20:28] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[22:20:45] <jinsun> you have to type closing brackets to get out of the brackets (or arrow keys which are even more annoying), it only saves pressing one character in the last line
[22:20:47] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[22:20:49] <Wooble> the one that annoys me is when it adds both the ( and ) after a function name when I didn't want to call the function, just reference it.
[22:21:18] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:22:08] <Wooble> jinsun: I think i usually just hit ctrl-e but it's so automatic that if I think about it now I can't be sure. :)
[22:22:19] <aphysically> my other set of questions is mostly about imports - there's a lot of ways I CAN import stuff, but I'm not sure how I SHOULD import stuff (within my own project)
[22:22:28] <duszek> well it depends on the programming style
[22:22:33] <aphysically> I see a lot of projects using absolute and relative imports interchangeably
[22:23:21] <Wooble> aphysically: I always stick with absolute. the argument that relative lets you rename your package easily seems silly.
[22:23:45] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[22:23:48] <Wooble> like... how often do you actually rename a package, and if you're doing it use a refactoring tool that will rewrite the imports anyway...
[22:24:07] <aphysically> it seems like most projects I've been looking at avoid * imports for the most part
[22:24:25] <Wooble> aphysically: yes, those are pretty univerally accepted as a bad idea.
[22:24:32] <bookworm> how a star import ever passes code review I don't know
[22:24:50] *** Quits: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[22:25:26] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[22:25:35] <Wooble> if you use 1 in a file, from tk or something, it might be almost defensible. with 2 or more... you have no idea where any name came from.
[22:25:46] <jinsun> most projects use a linter like flake8 in pre-commit hooks, and they reject * imports automatically
[22:26:07] <Wooble> (still, the examples that just assume you imported * in docs everywhere annoy me.)
[22:26:11] *** Quits: Hax0r (~Hax0r@46.38.93.176) (Remote host closed the connection)
[22:26:34] <bookworm> pre commit hooks are client side and hence useless if you want to enforce such a thing
[22:26:47] <lxwulf> does someone know why it doesnt save it to my file? source: https://bpa.st/VO3A i can change the value but now i want to save it...
[22:26:57] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[22:27:11] <jinsun> ya you have to fail the CI also
[22:27:12] <aphysically> I haven't gotten to setting up linters/type checking on a project scale yet
[22:27:13] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[22:27:19] <aphysically> or CI
[22:27:50] <aphysically> there seems to be some differing opinions on when or if I should import classes/functions, or always refer to them via a module name, or both as desired for style
[22:28:23] *** Joins: Hax0r (~Hax0r@46.38.93.176)
[22:28:37] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:28:40] *** Joins: Betal (~Betal@user/betal)
[22:29:07] <nedbat> lxwulf: double check that you are looking at the right file.  just before line 10, put:  import os.path; print(os.path.abspath("data.json"))
[22:30:44] *** Joins: summonner (~summonner@188.24.126.169)
[22:31:07] *** Quits: duszek (~duszek@adsa179.neoplus.adsl.tpnet.pl) (Quit: Leaving)
[22:31:27] <Wooble> lxwulf: you should also use context managers to open files like: `with open('data.json', 'w') as of: json.dump(data, of, indent=4)`. I'm not 100% sure that's causing your particular problem, but you *can* end up with unflushed fds the way you did it.
[22:31:48] *** Quits: stocom0988778 (~sam@82-132-231-65.dab.02.net) (Read error: Connection reset by peer)
[22:32:17] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[22:32:42] *** Joins: stocom0988778 (~sam@82-132-219-222.dab.02.net)
[22:33:00] <bookworm> (at least Linux flushes fds upon terminating a process, so that should not be it if main terminates)
[22:33:26] <bookworm> the point still stands though
[22:33:55] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[22:34:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[22:36:32] *** Joins: fikran (~fikran@user/fikran)
[22:37:14] <aphysically> I haven't decided if I'm annoyed by temporary mypy_cache and __pycache__ and should make a clean function or if I'm happy with having it in my .gitignore and forgetting about it
[22:38:44] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:38:54] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[22:39:20] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:39:37] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[22:41:35] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:41:50] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:41:53] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:5e6:167:440a:5f89)
[22:45:59] <jinsun> also .pytest_cache
[22:46:10] *** Quits: akk (~akk@174-28-98-206.albq.qwest.net) (Ping timeout: 240 seconds)
[22:46:34] *** Quits: Meteorhead (~Meteorhea@165.225.76.202) (Quit: Client closed)
[22:47:16] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[22:47:39] <jinsun> .pytest_ccache and .mypy_cache add themselves to .gitignore though, so only thing to be annoyed about is that they show up in the folder tree in vscode
[22:50:35] <aphysically> I haven't learned pytest yet (:
[22:50:43] <aphysically> soon (tm)
[22:51:48] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[22:51:56] <aphysically> I see some large projects where they have some stuff in subpackages even if they're only one file and a mostly empty __init__ and some stuff in files
[22:53:26] *** Quits: Ivyy (~Ivyy@2001:a62:483:bf01:2a66:fc03:b1bf:9cff) (Quit: Leaving)
[22:53:29] *** Joins: ivan_ (~Ivyy@2001:a62:483:bf01:2a66:fc03:b1bf:9cff)
[22:53:33] <lxwulf> okay would try the way which @wooble and @nedbat said thank for the tip
[22:54:28] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Remote host closed the connection)
[22:55:41] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[22:55:45] <lxwulf> it worked! thank you so much @nedbat and @Wooble
[22:56:19] *** Joins: toverna (~uni@128-70-103-249.broadband.corbina.ru)
[22:57:01] *** Joins: jan1 (~jan@user/jan1)
[22:57:06] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[22:58:52] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:59:32] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[22:59:55] *** Quits: lxwulf (~lxwulf@user/lxwulf) (Quit: Leaving)
[23:00:10] *** Quits: esaym153 (~esaym153@net153.net) (Ping timeout: 240 seconds)
[23:00:53] *** Joins: Cypris (uid511277@user/cypris)
[23:01:23] *** Joins: nomic (~nomic@185.217.117.169)
[23:02:42] *** Joins: Fiji (~Fiji@user/fiji)
[23:04:00] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:04:09] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 248 seconds)
[23:04:14] *** Joins: plastico (~plastico@neomutt/plastico)
[23:04:37] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:04:41] *** Joins: cheater (~Username@user/cheater)
[23:05:05] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:08:24] *** Joins: wolfgang (~wolfgang@101.174.6.197)
[23:08:58] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[23:09:01] *** Quits: rinwa (~user@141.226.14.13) (Read error: Connection reset by peer)
[23:09:04] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[23:09:27] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:11:16] *** Quits: kevinlc (~kevinalh@2800:200:e8d0:20b::4) (Ping timeout: 252 seconds)
[23:11:21] *** Joins: rinwa (~user@141.226.14.13)
[23:13:01] *** Quits: Narrat (~omnius@p200300df5f00d33506ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[23:14:19] *** Joins: rannnn8888 (~rannnn888@bzq-79-183-158-130.red.bezeqint.net)
[23:15:07] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Ping timeout: 252 seconds)
[23:16:35] *** Quits: varaindemian (uid73404@id-73404.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[23:17:25] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[23:18:33] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[23:19:41] *** Quits: kstar (~kstar@user/kstar) (Quit: Lost terminal)
[23:19:41] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Client Quit)
[23:20:37] *** Quits: schumaml (~schumaml@p4ff91d2b.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[23:20:48] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:21:06] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Quit: ZNC - http://znc.in)
[23:22:01] *** Joins: esaym153 (~esaym153@net153.net)
[23:23:37] *** Joins: crawler (~crawler__@user/crawler)
[23:24:19] *** Joins: matsaman (~matsaman@user/matsaman)
[23:24:27] <ens> hi folks. i'm trying to pop the first element of an array off rather than the last one. what should i do for this?
[23:24:47] <ens> in perl it is: $value = shift(@array)
[23:25:27] *** Joins: semeion (~semeion@user/semeion)
[23:25:33] <phy1729> foo.pop(0)
[23:26:02] *** Quits: nomic (~nomic@185.217.117.169) (Quit: Leaving)
[23:26:14] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:26:23] <ens> ah nice, thanks phy1729
[23:26:53] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[23:28:12] *** Joins: y1n (~y1n@84-115-64-130.wifi.dynamic.surfer.at)
[23:30:05] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[23:30:31] *** Quits: crawler (~crawler__@user/crawler) (Ping timeout: 252 seconds)
[23:31:05] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Remote host closed the connection)
[23:31:29] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[23:32:19] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[23:32:22] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[23:33:40] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:cca9:b466:1d3f:ec1e:75f1) (Remote host closed the connection)
[23:33:45] <Wooble> ens: note that this is inefficient for lists; consider collections.deque
[23:34:12] *** Joins: p-i- (~Ohmu@2403:6200:8870:cca9:c4ac:50b6:4385:193)
[23:34:19] *** Quits: aead (~aead@user/aead) (Ping timeout: 252 seconds)
[23:34:39] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:34:52] *** Joins: aead (~aead@user/aead)
[23:35:14] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:35:22] *** Joins: thiras (~thiras@user/thiras)
[23:35:42] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[23:36:02] <nedbat> jinsun: how do .pytest_cache and .mypy_cache "add themselves" to .gitignore?
[23:36:34] <nedbat> btw, you can avoid __pycache__ by setting PYTHONPYCACHEPREFIX=/tmp/pyc
[23:38:41] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 244 seconds)
[23:38:43] *** Joins: nomic (~nomic@185.217.117.169)
[23:39:43] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 244 seconds)
[23:40:02] *** Joins: srhm (~srhm@user/srhm)
[23:40:24] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:40:35] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[23:40:51] *** Joins: srhm (~srhm@user/srhm)
[23:41:27] <jinsun> nedbat: they have a .gitignore file inside them with `*` (at least since the past few months when I bothered to check), so they are ignored even if I don't add them to the top level .gitignore
[23:41:38] <nedbat> jinsun: oh, i see. clever
[23:41:39] <p-i-> Suppose I have 3 sets (1,5,7) (2,3,5) and (1,2,5,8), and want to output (most matches first) ((item=)5, (nOccurences=)3), (1,2), (2,2), (3,1), (7,1), (8,1). What's a good way to go about it?
[23:42:12] <p-i-> It's actually k sets of unknown size
[23:42:28] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[23:42:32] <Wooble> p-i-: sounds like a job for collections.Counter
[23:42:37] <p-i-> and items are strings not integers
[23:42:53] <p-i-> tx Wooble, that sounds about right
[23:42:55] * p-i- digs
[23:43:38] <nedbat> jinsun: now i'm wondering if coverage.py should do that for its HTML output directory
[23:44:11] *** Quits: dasbootmir (~dasbootmi@user/dasbootmir) (Quit: dasbootmir)
[23:44:19] *** Quits: srhm (~srhm@user/srhm) (Client Quit)
[23:44:30] *** Quits: timdiels (~user@78-22-205-207.access.telenet.be) (Quit: leaving)
[23:46:07] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[23:47:07] <jinsun> nedbat: seems like a good idea, it is probably manually ignored most of the time anyway
[23:47:18] *** Joins: crawler (~crawler__@user/crawler)
[23:47:34] *** Quits: pro_z (~pro_z@37.214.46.94) (Ping timeout: 252 seconds)
[23:47:39] <nedbat> jinsun: https://twitter.com/coveragepy/status/1432422175169028097
[23:48:06] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Quit: Leaving)
[23:48:22] *** Quits: Samian (~Sami@2620:10d:c091:480::1:2d50) (Quit: Textual IRC Client: www.textualapp.com)
[23:49:01] *** Quits: aead (~aead@user/aead) (Ping timeout: 244 seconds)
[23:49:26] <jinsun> cool let's see what twitter thinks
[23:51:20] *** Joins: Mach (~mach@2a02:2f09:d303:5d00::738)
[23:51:38] *** Joins: sharksauce (sharksauce@user/sharksauce)
[23:51:42] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[23:52:11] *** Joins: semeion (~semeion@user/semeion)
[23:52:20] *** Quits: LiftLeft (~LiftLeft@172.83.47.28) (Ping timeout: 250 seconds)
[23:53:00] <ens> i'm searching for a banner string in a bytearray that i have constructed out of some socket data. I am doing re.match(b'banner', line) but i seem to be always getting None as the result.
[23:53:18] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[23:53:25] <ens> do i need to do something with the "line" bytearray for the regex to match?
[23:53:44] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[23:56:11] *** Joins: aead (~aead@user/aead)
[23:56:18] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[23:56:22] *** Joins: lucyfurnice (~lucyfurni@2601:5cc:8300:4e50:6002:1cd2:ca83:43f8)
[23:57:10] <lucyfurnice> Has anyone here built a windows executable for pgen?
[23:57:35] <lucyfurnice> pip pgen does not have a __main__
[23:58:09] *** Joins: ssbr_ (~ssbr@python/site-packages/ssbr)
