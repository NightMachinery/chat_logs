[00:00:42] *** Joins: trevors (~trevors@user/trevors)
[00:00:47] <Decker> oh that's A 5 not AS
[00:01:07] *** Quits: src (~src@user/src) (Quit: Leaving)
[00:01:16] *** Joins: panella32 (~panella32@185.229.59.132)
[00:01:25] *** Quits: password (~password8@user/password2) (Ping timeout: 256 seconds)
[00:02:05] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[00:02:59] <panella32> Http error code 429 (too many requests) has a header like "retry-after:132000" any idea how long do I have to wait for?
[00:03:05] <Decker> GeDaMo I have kreiger(?) tools somewhere; would have been nice if they had released it more as a pluggable library that I could programatically generate textures etc, and then just replay that through their algorithms
[00:03:13] <Decker> kibbleblitz or something?
[00:03:40] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Client Quit)
[00:03:42] <Decker> panella32 devide by 3600 I'd expect it's in seconds
[00:04:09] <Decker> it's an odd number for milliseconds to be 2:12 minutes?
[00:04:14] <DPA> I hate it when this happens: https://bpa.st/QZBQ Now I've no idea where to look for the error...
[00:04:15] <bayaz> Title: View paste QZBQ 
[00:04:24] <GeDaMo> Decker: https://github.com/farbrausch/fr_public
[00:04:25] <bayaz> Title: GitHub - farbrausch/fr_public: Farbrausch demo tools 2001-2011 
[00:05:13] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[00:05:34] <GeDaMo> DPA: "pc points to the zero page" suggests it's trying to run code at zero, does your program jump to addresses?
[00:05:43] <f843d0> DPA: some side effects of libasan
[00:05:52] *** Joins: rawgreaze (~rawgreaze@c-24-91-94-184.hsd1.nh.comcast.net)
[00:05:52] *** Quits: rawgreaze (~rawgreaze@c-24-91-94-184.hsd1.nh.comcast.net) (Changing host)
[00:05:52] *** Joins: rawgreaze (~rawgreaze@user/rawgreaze)
[00:06:32] <jamea> Decker in Sheet1 have a cell A5   or is possible read Row number 17 ?
[00:06:42] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:07:15] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:07:58] <ProfSimm> Decker: how does... one assign to variables in CPS
[00:08:12] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:08:18] <DPA> GeDaMo: Yes. It jumps all over the place. Callbacks, ref couning & linked lists everywhere. Even inheritance and stuff, all in C.
[00:08:18] <DPA> I think I found it now. Was a callback I didn't check for 0. Not sure why it couldn't provide a better backtrace though, I should have multiple functions deep at that point.
[00:08:39] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[00:09:06] *** Quits: Narrat (~omnius@p200300df5f123b3b06ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[00:09:22] <f843d0> DPA: is it somehow related to gettimeofday?
[00:10:03] <Decker> memory overflow?
[00:10:08] <Decker> reading a structure into an int?
[00:10:50] <Decker> ProfSimm usually you pass the state argument you had, and magic happens that you get more args next?
[00:11:17] <Decker> because that's also sort of a work-dispatch sort of system that the next callback would get the chain state and a new message?  Or the previously pushed message?
[00:11:24] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[00:11:57] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 256 seconds)
[00:12:02] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[00:12:17] <Decker> Filter transform functions are another example... personally I don't know why you need to pass anything to that function, since it should already be aware what function was dispatched to know what chain it should apply to
[00:12:21] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[00:12:24] <Decker> Filter transform functions are another example... personally I don't know why you need to pass anything to that function, since it should already be aware what function was dispatched to know what chain it should apply to
[00:12:50] <DPA> f843d0: No. I just forgat this one check here: https://projects.dpa.li/git/?p=dpaw.git;a=blob;f=wm/src/xev/xinput2.c;h=2ba12b97f7cdf2a057d2c4884c581865c802fc12;hb=refs/heads/desktop#l359
[00:12:52] <bayaz> Title: projects.dpa.li Git - dpaw.git/blob - wm/src/xev/xinput2.c 
[00:13:04] <DPA> On line 359
[00:13:08] *** Quits: diophantoz_ (~diophanto@user/diophantoz) (Ping timeout: 272 seconds)
[00:13:28] <Decker> that would do it DPA :)
[00:13:41] <jamea> cant install https://paste.debian.net/1231655/   pip install win32gui   any advice?
[00:13:45] <bayaz> Title: debian Pastezone 
[00:14:23] *** zaher__ is now known as zaher_
[00:14:29] *** zaher_ is now known as zaher
[00:14:30] <Decker> call 0 should just be a nop :)
[00:14:40] <DPA> Well, sure it would. But I still don't get why I didn't get more of a stack trace. It's not like the stack disappears just because I jump to 0x0
[00:15:16] <Decker> it expects the stack to have a fully new stack, it only has arguments and a return address ?
[00:15:34] <Decker> like after the next function entry sets up ebp esp ? 
[00:15:49] <f843d0> DPA: which check? function pointer looks checked. Is it on dpaw or ev?
[00:16:05] <Decker> is not - wasn't before
[00:16:08] <Decker> (now)
[00:16:30] <DPA> Right.
[00:16:43] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[00:16:56] <DPA> Also, I'm not sure what the compiler or asan do in the background.
[00:17:47] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:19:04] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (Ping timeout: 250 seconds)
[00:19:12] <DPA> Also, this is on ARM. I don't think it was quiet that bad on x86_64
[00:19:53] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[00:20:15] *** Quits: henbruas (~henbruas@ti0003a400-2412.bb.online.no) (Ping timeout: 252 seconds)
[00:20:53] <Decker> ya you'd think it'd know how to decode a 0 call 
[00:20:54] *** Parts: user51 (~user51@176.228.1.103) ()
[00:20:58] <Decker> should almost have a special handler
[00:21:36] <f843d0> Program Counter going to NULL, bad times :)
[00:21:57] <GeDaMo> It does have a special handler, segfault! :P
[00:22:00] *** Joins: henbruas (~henbruas@ti0003a400-2412.bb.online.no)
[00:22:18] <Decker> ya but it didn't dump a good stack trace
[00:22:23] <Decker> think x86 stuff does
[00:24:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[00:24:17] *** Joins: Akiva (~Akiva@user/Akiva)
[00:24:19] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:24:28] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[00:26:52] *** Quits: eein (35f97d3dbd@2604:bf00:561:2000::2a6) (Ping timeout: 250 seconds)
[00:27:00] *** Joins: eein (35f97d3dbd@2604:bf00:561:2000::2a6)
[00:28:20] *** Quits: mikrosis (~mikrosis@dynamic-046-114-173-173.46.114.pool.telefonica.de) (Ping timeout: 272 seconds)
[00:28:47] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[00:31:39] *** Joins: pavonia (~user@user/siracusa)
[00:31:53] *** Joins: Buartawe (~AnCELASTR@216.243.47.158)
[00:31:56] *** Joins: anomal (~anomal@87.227.196.109)
[00:32:06] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[00:32:30] *** Quits: anomal (~anomal@87.227.196.109) (Remote host closed the connection)
[00:32:51] *** majors_ is now known as majors
[00:33:32] <DPA> Now that this works, I'll have to buy more mice to test multi cursor stuff...
[00:33:41] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 245 seconds)
[00:34:17] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:42] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[00:37:20] *** Quits: juliaEnv (~juliaEnv@h-37-123-164-79.A137.corp.bahnhof.se) (Quit: Going offline, see ya! (www.adiirc.com))
[00:39:46] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:40:24] <cockatoodude> multi-cursor? On linux or windows?
[00:41:22] <absentia> both
[00:41:24] <absentia> android too
[00:42:22] <ski> ProfSimm : "Let's not have function return results at all. the function gets a closure, and it calls it with the result to \"return\".","yes but why isn't this the norm" -- in one sense, it is. heard of return addresses ?
[00:42:23] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:42:39] *** Quits: cockatoodude (~communist@bras-base-tnhlon4048w-grc-67-67-71-22-200.dsl.bell.ca) (Quit: Leaving)
[00:42:49] <ski> sonny : "has anyone every considered mapping indices to addresses?","I don't think you need references if you do that" -- it can often be useful to compare them to each other. often we conceptually think of the contents of a memory location as being "inside" the address of that location
[00:42:57] <ski> but if we think of it as an index/key/path, and a separate data structure, there's no need to presuppose that just the former will give us access to the contents/value/object referenced
[00:43:05] <ski> sonny : "Does anyone intentionally make a data structure with cycles?" -- recursive functions are quite common
[00:43:10] <ski> sonny : "will this happen in haskell too?","a cycle in a list" -- yes
[00:43:22] <ski> ProfSimm : "So  with continuations we don't need a stack. Why is that not awesome" -- the (activation) stack is a representation of the continuation
[00:43:54] <ski> ProfSimm : "I've been trying to make call and return symmetric for so long and then I realized... CPS","one usually thinks about it as a compilation intermediate rep","Not an actualy code writing technique" -- there's a programming language, Io, based on continuations as the fundamental structure, which perhaps might interest you
[00:44:44] <ProfSimm> ski: return addresses are not the same thing
[00:45:13] <ProfSimm> ski: CPS can do what a stack can, but a stack can't do all that CPS can do
[00:46:03] <ProfSimm> ski: I don't think Io is fundamentally about CPS, or is it. It was assignment
[00:46:17] <ProfSimm> ski: I mean it has vars and assignment, hence return results 
[00:46:24] <ski> it is mentioned in chapter 2 (section 3) of Raphael A. Finkel's book "Advanced Programming Language Design" in 1996 at <https://web.archive.org/web/20141228230453/http://www.nondot.org/sabre/Mirrored/AdvProgLangDesign/>, and described by Raphael L. Levien (the language creator) in his paper "Io: a new programming notation" in 1989-09-10 at <http://dl.acm.org/citation.cfm?id=70931.70934>
[00:46:30] <ski> Martin Sandin made an implementation, at <https://web.archive.org/web/20091106041222/http://www.guldheden.com/~sandin/amalthea.html>, and BMeph made a later one, at <https://hackage.haskell.org/package/Ganymede>
[00:46:44] *** Quits: GeDaMo (~GeDaMo@user/gedamo) (Remote host closed the connection)
[00:47:20] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[00:47:27] *** Quits: kariosfox (~kariosfox@176.221.123.109) (Remote host closed the connection)
[00:47:35] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:48:00] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[00:48:01] *** Joins: kariosfox (~kariosfox@176.221.123.109)
[00:48:19] *** Joins: trevors (~trevors@user/trevors)
[00:48:55] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[00:49:17] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[00:49:21] <ProfSimm> ski: it's so hard to find info on Io
[00:49:37] <ski> ProfSimm : at a low level, functions tend to be implemented by jumping to the address of a sequence of instructions, after passing parameters in some agreed-upon locations (such as registers, global addresses, or relative to a stack), one of those parameters being a return address which the instructions will eventually jump back to. this sounds pretty close to what you decribed by "the function gets a 
[00:49:38] <ProfSimm> ski: but I've spotted similarities before with what I'm doing
[00:49:43] <ski> closure, and it calls it with the result to \"return\"", no ?
[00:50:40] <ProfSimm> ski: no, because with CPS you can pass multiple such "addresses" and none of them have to be where the call occured
[00:51:06] <ProfSimm> ski: also instead of having a separate return result semantic, we reuse the arguments format.
[00:51:07] <ski> "CPS can do what a stack can, but a stack can't do all that CPS can do" -- sure
[00:51:12] * ski . o O ( <https://en.wikipedia.org/wiki/Spaghetti_stack#Use_as_call_stacks> )
[00:51:13] <ProfSimm> ski: which makes multiple results trivial
[00:52:03] <ski> "I don't think Io is fundamentally about CPS, or is it. It was assignment","I mean it has vars and assignment, hence return results" -- it has no assignment. it has binding, though
[00:52:39] <ProfSimm> ski: single assignment, is this what we're both talking about
[00:52:49] <ski> that's binding
[00:52:54] <ProfSimm> :/
[00:53:00] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:54:12] <ProfSimm> ski: point is in CPS functions never return, so you can't bind anything
[00:54:14] <ProfSimm> Or...
[00:54:19] <ProfSimm> How does IO do it
[00:55:09] <ski> (that implementation of functions correspond to the logical equivalence between implication ⌜A → B⌝ (function type), and ⌜¬ (A ∧ ¬ B)⌝ (type of a continuation (address), which expects one parameter of type ⌜A⌝ (the input), and another (the return address) of type ⌜¬ B⌝, itself being a continuation / address that expects an "input" (function output) of type ⌜B⌝)
[00:56:38] <ProfSimm> ski: ok but still
[00:56:55] <ProfSimm> ski: you technically need no bindings with CPS, you can do all via arguments
[00:58:34] *** Quits: panella32 (~panella32@185.229.59.132) (Quit: Textual IRC Client: www.textualapp.com)
[00:58:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[00:59:50] <ski> Io doesn't have functions, it has continuations. which are more or less like "goto-with-arguments". when you define `writetwice: -> x ret;  write x;  write x;  ret.', `writetwice' refers to a continuation that when jumped to, with parameters `x' and `ret', will jump to `write' with the parameters `x' and `; write x; ret'. the latter is a continuation (of zero parameters) that will jump to `write' with 
[00:59:56] <ski> `x' and `; ret' (which just amounts to `ret', by "TCO" / eta-reduction)
[01:00:55] <absentia> it's bad shit when the unicode characters start coming out
[01:01:10] <ski> "no, because with CPS you can pass multiple such \"addresses\" and none of them have to be where the call occured" -- what is the problem with passing multiple addresses ? and what does "where the call occured" mean ?
[01:01:20] <ProfSimm> ski: wait, "write x" when why have another write x, how do we get to it
[01:02:02] <ski> "also instead of having a separate return result semantic, we reuse the arguments format." -- yes. a function is simulated by a continuation (of a particular kind). its return address is also a continuation (⌜A → B⌝ is ⌜¬ (A ∧ ¬ B)⌝. negation represents the type of continuations)
[01:02:19] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:02:25] <ski> "which makes multiple results trivial" -- yea (if you have multiple parameters, in the first place)
[01:03:08] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:557c:fb1f:da99:8b6d) (Ping timeout: 252 seconds)
[01:03:24] <ProfSimm> ski: I still don't understand if we have "write x; write x" how does the first write get to the second write.
[01:03:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[01:03:27] <ski> "point is in CPS functions never return, so you can't bind anything" -- i don't understand. you bind the formal parameters to the actual parameters, when you invoke (jump to) a continuation, in Io
[01:04:11] <ski> "you technically need no bindings with CPS, you can do all via arguments" -- the formal parameters (whether of a function, or a continuation) does introduce binding
[01:04:13] <ProfSimm> ski: we call write x, it writes x, then where does it continue to
[01:05:51] <ski> ProfSimm : in `writetwice: -> x ret;  write x;  write x;  ret.', if we bracket explicitly, and introduce explicit `->'s, even when there were zero parameters, we'd have `writetwice: (-> x ret;  write x (-> ;  write x (-> ;  ret))).'
[01:07:02] <ski> so, both invocations of `write' pass two (actual) parameters to it. the second one is a continuation that receives zero parameters, and then goes on to jump to another continuation (with two respectively zero parameters)
[01:07:17] *** Joins: mikrosis (~mikrosis@dynamic-046-114-173-173.46.114.pool.telefonica.de)
[01:08:06] <ski> ProfSimm : it doesn't return (like a function call would). it continues by calling the continuation parameter ("return address") that was passed to it
[01:08:53] <ProfSimm> ski: passing the param implicitly sucks
[01:09:02] <ski> implicitly ?
[01:09:12] <ski> there's no implicit parameter passing here
[01:09:25] <ProfSimm> ski:  you just said "if we bracket explicitly" What is the opposite of explicitly
[01:09:38] <ski> oh. that was just about syntactic sugar
[01:09:48] <ski> instead of writing
[01:09:48] <ProfSimm> Syntactic sugar matters sometimes
[01:09:54] <ski>   write x -> ;
[01:09:54] <ski>   write x -> ;
[01:09:56] <ski>   ret
[01:10:16] <ski> we allow some syntactic sugar to express a continuation that accepts zero parameters, allowing us to write this as
[01:10:19] <ProfSimm> So what it'll always append "->" as last arg?
[01:10:19] <ski>   write x;
[01:10:20] <ski>   write x;
[01:10:22] <ski>   ret
[01:11:16] <ski> the first `write' is called with two parameters, `x' and the continuation (accepting zero parameters) `-> ; write x -> ; ret'. it's just a syntactic convenience that we can omit the `->'s from the notation here. it still means the same thing
[01:11:35] <ProfSimm> ski: the problem is when we don't want to mean the same thing
[01:11:56] <ProfSimm> ski: what happens if a function takes two arguments for continuation, say "ok" and "error"
[01:11:56] *** Quits: mmfood (~mmfood@c-5eea3747-74736162.cust.telenor.se) (Read error: Connection reset by peer)
[01:12:24] <ski> "Syntactic sugar matters sometimes" -- oh, it absolutely matters, in the sense that it shapes what things people are more (sugar) respectively less (salt) likely to express
[01:12:49] *** Joins: audio (~audio@user/audio)
[01:13:09] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[01:14:57] <ski> "Contrary to the foolish notion that syntax is immaterial, people optimize the way they express themselves, and so express themselves differently with different syntaxes." -- "S-exp vs XML",nocebo (aka Erik Naggum),2002-12-28,<https://harmful.cat-v.org/software/xml/s-exp_vs_XML>
[01:16:05] <ProfSimm> ski: CPS gets interesting when you pass multiple continuations
[01:16:30] <ProfSimm> ski: or at least when the function can take multiple
[01:16:36] <ski> "So what it'll always append \"->\" as last arg?" -- when there's a `;' with no preceding `->' (and formal parameter list of identifiers inbetween), `-> ' before that `;' is implied
[01:16:44] <ski> ProfSimm : yes
[01:17:24] *** Joins: analognoise (~analognoi@ip98-176-154-48.sd.sd.cox.net)
[01:18:03] <ProfSimm> ski: I'm starting to think the direct style is a mistake
[01:18:09] <ProfSimm> ski:  in structural programming
[01:20:42] *** Quits: magla (~gelignite@55d46ecf.access.ecotel.net) (Quit: Stay safe!)
[01:21:21] *** Quits: makos (~nerdbox@78.9.119.190) (Quit: WeeChat 3.0)
[01:22:59] *** Joins: moniker-- (~mon@dh207-120-173.xnet.hr)
[01:23:08] <sonny> ski: thanks
[01:24:29] *** Joins: ejjfunky (~ejjfunky@125.164.23.55)
[01:24:36] *** Quits: moniker- (~mon@dh207-120-121.xnet.hr) (Ping timeout: 240 seconds)
[01:24:41] <hrob> o/
[01:25:20] *** Joins: ejjfunky0 (~ejjfunky2@125.164.18.221)
[01:25:26] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[01:25:34] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:25:46] <roxlu> hi! I'm working on an app, which hangs sometimes, but only in release mode and I'm wondering if there is somehow a way to debug this? Does someone maybe have some idea how to do this?
[01:25:48] <hrob> ahm, does the code comment "this is no-opt if ... so and so"  make any sense... Ive been using this term but just saw some misunderstanding about that...
[01:25:49] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:b07c:b562:c9fc:b27a)
[01:26:28] <hrob> i.e. Ive always taken that to mean "does not do anything, if so and so.."
[01:27:03] <hrob> or does not modify data / object
[01:27:17] *** Joins: mmfood (~mmfood@c-5eea3747-74736162.cust.telenor.se)
[01:27:48] <ski> ProfSimm : "Multi-return function call" by Olin Shivers,David Fisher in 2004-09,2006-(07,09) at <https://www.ccs.neu.edu/home/shivers/citations.html#mrlc>,<https://www.ccs.neu.edu/home/shivers/papers/mrlc-jfp.(p(s|df),dvi)> is about passing multiple (alternative) continuations to a function, and a related generalization of the notion of "tail call" to "semi tail call" (some of the passed continuations 
[01:27:54] <ski> are the same as the ones you received)
[01:28:09] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[01:28:23] <hrob> roxlu   that's reeeaallly hard to answer without knowing what language your using, frameworks, where your code hangs... what errors you get :S
[01:28:36] <hrob> *you're
[01:28:52] <roxlu> hrob: sorry, I'm using C and normally debugging with GDB
[01:29:08] <ski> .. however, i think the concrete syntax could be nicer than the one that's used in that paper. but the idea itself is quite interesting
[01:29:34] <ski> sonny : any comment/response/question ?
[01:29:37] <roxlu> hrob: I've created a release-wit-debug-symbols but that app works fine too, never hangs (at least nog in 8 hours)
[01:29:51] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:30:46] <hrob> roxlu  long since I used C or C++ but do you mean you are compiling the app with -g  debug symbols and it works fine, but when compiling with optimization say -O3  or other it hangs?
[01:31:18] <ski> ProfSimm : are you saying you think structured programming (every control flow construct should have one entry, and one exit) is a mistake ?
[01:31:21] <roxlu> hrob: yes, but I think when I create a relwithdebinfo builld, it's also compiled with 03
[01:31:33] <roxlu> s/03/O3
[01:31:39] *** Joins: communistmuslim (~communist@bras-base-tnhlon4048w-grc-67-67-71-22-200.dsl.bell.ca)
[01:31:50] <ski> ProfSimm : "the problem is when we don't want to mean the same thing" -- elaborate ?
[01:31:56] <sonny> ski: not yet, just thinking of memory abstractions
[01:32:12] <hrob> roxlu  I recall yes you can't assume things work same with and without optimization... would be good to know where it hangs exactly using dgb or other
[01:32:26] <hrob> although they "should" work the same
[01:32:56] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 272 seconds)
[01:33:01] <ski> sonny : note that functions can be thought of a kind of data structures (in a more general sense). hence recursive functions being an example of a cyclic data structure
[01:33:02] <sonny> ski: I think C terminology is making things more complex than they have to be
[01:33:03] <roxlu> hrob: ok thanks. yeah that's what I'm trying to figure out. 
[01:33:30] <sonny> ski: like being able to compute a list?
[01:34:01] <roxlu> hrob: my guess is ... that ther might be undefined behavior and that the stack gets overwritten; though .. maybe when I build with -g I'm just lucky and a stack/data get's overwritten which is hiding the issue. 
[01:34:09] <hrob> roxlu you may have to filter it down rather old school, by doing debug prints to stdout...  ,  not really a C/C++ expert though
[01:34:10] <roxlu> hrob: but to be honest I'm not sure if that makes sense
[01:34:22] <roxlu> hrob: yeah, tried that too ^.^
[01:34:38] <roxlu> when I add a log, things are fine too, runs for 10+ hours
[01:34:47] <Hash> Hey dudes
[01:34:56] <hrob> roxlu  do you get any seg faults?
[01:34:58] <Hash> I need help from you guys
[01:35:02] <roxlu> hrob: no
[01:35:10] <amigojapan> Hey hash 
[01:35:17] <Hash> So, can you go to https://www.psychedelicsdaily.com and let me know what you think of the site.
[01:35:18] <bayaz> Title: 
[01:35:22] <ski> sonny : there's certainly various aspects of C that gets in the way, when describing things like this, where an appeal to assembler would be more direct (but unfortunately also more machine-specific). e.g. lack of multiple-returns in C (which is natural in assembler .. nevermind LLVM being silly here). or passing multiple return addresses. or having multiple entries to a code block
[01:35:29] *** Joins: breavyn (~breavyn@user/breavyn)
[01:35:37] <Hash> Think you're a psychedelic noob, and you need info. If you go to my site, first time, what's your expression?
[01:35:39] <Hash> Impression
[01:35:43] <hrob> roxlu aw damn... those memory unsafe langauges :S
[01:35:50] <Hash> Navigation wise, info wise, ease of use wise, etc. 
[01:35:59] <roxlu> hrob: haha 
[01:35:59] <Hash> Someone on FB told me that they found my website confusing.
[01:36:06] *** Quits: mikrosis (~mikrosis@dynamic-046-114-173-173.46.114.pool.telefonica.de) (Ping timeout: 272 seconds)
[01:36:11] <Hash> So now I'm kind of worried if other people might find it confusing
[01:36:14] <Hash> I am a programmer, not a user.
[01:36:16] <ski> sonny : but (apart from assembler being more machine-specific, less portable) people are also more familiar with C, so therefore it still is often useful to describe things in C(ish) terms
[01:36:18] <Hash> Huge difference in how I view the site.
[01:36:19] <hrob> roxlu I thought that at least C++ v14 or newer has more safe memory management assigned to variables
[01:36:47] <pulse> Hash, https://lawsofux.com/
[01:36:47] <bayaz> Title: Home | Laws of UX 
[01:36:50] <Hash> I would like to make my site as easy to use and all the info easily available
[01:37:08] <Hash> They said, too many shirt lnks.
[01:37:12] <pulse> hire a designer if you can
[01:37:19] <roxlu> hrob: ok :) 
[01:37:24] *** audio is now known as audioburn
[01:37:26] <Hash> Does it look like I put too many ads for comicthreads.co?
[01:37:32] <ski> sonny : oh, also the C confusion between arrays, and pointers to their first elements. (i know C distinguishes them, but the implicit conversion of the former to the latter, in the language, together with the culture that's to a large extent induced by that, does cause real problems of comprehension)
[01:37:34] <Hash> pulse: design is fine.
[01:37:40] <Hash> Isn't it?
[01:37:45] <roxlu> I was just googling a bit and it seems I can just start an executable via gdb which is a release built
[01:37:55] *** Joins: wildo (~lain6141@119.224.72.222)
[01:37:56] <Hash> Tear down my site here. Let me have it.
[01:37:58] <roxlu> hrob: it still shows me the function names when I hit ctrl+c 
[01:37:58] <sonny> ski: yes exactly, I am trying to make new definitions so it's easier to describe these abstractions without legacy
[01:38:01] <Hash> What can be improved?
[01:38:02] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[01:38:04] <amigojapan> Hash: I think it is well formatted, tho I don't agree with the message
[01:38:15] <Hash> amigojapan: the content?
[01:38:17] *** audioburn is now known as audio
[01:38:27] <amigojapan> Right Hash 
[01:38:33] <pulse> Hash, it's ok, could use some minor improvements
[01:38:42] <hrob> roxlu  I recall a tool called wallgind or other... for memory violations, even within the stack
[01:38:42] <Hash> That is secondary I think. Primary concern is layout, ease of reading, access, navigatino to other useful articles
[01:38:43] <ProfSimm> ski: I think the idea of functions where you get arguments and "return result" is wrong.
[01:39:11] <ProfSimm> ski: I think this whole concept emerged because the first structured languages didn't have a concept of first-class functions
[01:39:12] <Hash> I didn't smoke weed all day. I didn't buy weed all week. I'm out. wish me luck!
[01:39:19] <roxlu> hrob: yeah valgrind and there others
[01:39:33] <ProfSimm> ski: so you had "GOSUB foo" and then "RETURN" in the subroutine
[01:39:53] <ProfSimm> ski: this is where our timeline branched into stupid
[01:39:53] <ski> sonny : "like being able to compute a list?" -- well, i guess, but not necessarily. consider a recursive function for computing fibonacci numbers (or some other commonly recursively defined function on numbers, which themselves are not a recursive data structure). the sequence of instructions that implement the recursive function will itself contain its starting address (or, with 
[01:39:59] <ski> position-independent-code, the offset to its starting address, from the use of that address). so, that instruction sequence *is* a cyclic data structure itself
[01:40:08] *** Joins: mikrosis (~mikrosis@dynamic-046-114-170-099.46.114.pool.telefonica.de)
[01:40:09] *** Quits: communistmuslim (~communist@bras-base-tnhlon4048w-grc-67-67-71-22-200.dsl.bell.ca) (Quit: Leaving)
[01:40:28] <hrob> roxlu, maybe ehm cpp channel or gcc channel?
[01:40:37] <roxlu> yeah thanks
[01:40:47] <hrob> im not going to be much help, but maybe others here though
[01:41:00] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[01:41:54] <amigojapan> Hash: I am on mobile and it looks good
[01:41:56] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[01:42:01] <Hash> Thanks!
[01:42:16] <Hash> I think the navigation could improve.
[01:42:29] <Hash> Looking at the Resouces menu
[01:42:45] <random-jellyfish> how many times have you been fired as a programmer?
[01:42:52] <Hash> Commmunities, Drugs, News, FAQ, Radio should be own menu entries?
[01:42:55] <roxlu> thanks for you suggestions anyway hrob 
[01:42:55] <Hash> Me?
[01:42:59] <hrob> roxlu  but you can get shit-loads done very fast with python :p    with numpy .... if working with big data / matrix / vectors, and already optimized on the C-side and using libblas
[01:43:01] <Hash> Not once.
[01:43:10] <ski> Hash : "So now I'm kind of worried if other people might find it confusing" -- why ?
[01:43:11] <Hash> I get fired as a human being 
[01:43:22] <Hash> ski: just making sure.
[01:43:30] <Hash> My site was rated one of the top psychedelic information sites on the planet multiple times
[01:43:36] <Hash> by other prestigous sites.
[01:43:42] <Hash> So I want to make sure I retain that reputation
[01:43:50] <ejjfunky0> Hash, web site's looking good.
[01:44:06] <Hash> https://www.psychedelicsdaily.com/community/ I need to make thie better.
[01:44:06] <bayaz> Title: Psychedelic Communities 
[01:44:13] <ski> ProfSimm : "I think the idea of functions where you get arguments and \"return result\" is wrong." -- one could argue that the "return" part of that is, in a certain sense, wrong/bad. (can be related to the difference between effects and side-effects, and the difference between expressions and commands ("statements"))
[01:44:16] <Hash> It's a list of communities, countries, states, cities, heirarchy
[01:44:32] <Hash> I did a js map there, but I think I should do a drop down jquery searchable thing
[01:44:33] <ski> ProfSimm : "I think this whole concept emerged because the first structured languages didn't have a concept of first-class functions" -- not really seeing what the first-classness of functions have to do with it, though
[01:44:41] <Hash> You start typing your locality, and it finds your community near you
[01:44:44] <Hash> Or what should I do ?
[01:44:48] <Hash> what's your opinion on the best gui here?
[01:45:10] <hrob> roxlu however, it might be worth seeing at what gcc optimization level you get a problem...  -O1,2,3 etc.... --fast-math  I also recall can be an issue
[01:45:15] <ejjfunky0> Hash, for the menu, since the box before doesn't do anything, i'd suggest if you aren't putting any icon there to just not show it. simple is better
[01:45:36] <roxlu> hrob: O3 but no fast-math
[01:45:37] <Hash> 'box before' ?
[01:45:37] <hrob> roxlu but does sound like a memory violation though
[01:45:41] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[01:45:52] <roxlu> hrob: yeah, like something is getting overwritten
[01:45:54] <ejjfunky0> yea, like box Home, etc.
[01:46:04] <Hash> Oh nav itenms
[01:46:07] <roxlu> though .. my code path is 99% the same and I'm hanling -a lot- of data
[01:46:11] <ejjfunky0> yea, the nav items.
[01:46:13] <ProfSimm> ski: because continuations are tail call of a first-class function
[01:46:18] <Hash> I don't follow.
[01:46:23] <ejjfunky0> unless that's by design. but it doesn't do anything.
[01:46:23] <roxlu> welll not that much, but it's a continuous video/audio stream
[01:46:24] <Hash> Change what bout the nav?
[01:46:26] <ski> ProfSimm : "so you had \"GOSUB foo\" and then \"RETURN\" in the subroutine" -- this seems to be about the expression vs. command dichotomy. arguably, `return' (just like `break' and `continue', and, obviously, `goto') goes against the ideals of structured programming. `return' certainly has a kind of "(lexically) dynamic binding" quality, that is a hindrance to reasoning and refactoring
[01:46:31] <Hash> ejjfunky0: what doesn't do anything?
[01:46:35] <ejjfunky0> it looks like a checkbox but doesnt check
[01:46:58] <ejjfunky0> anyway, you already got a mouse over, you don't need the box 
[01:47:46] *** Quits: XV8 (~XV8@2601:5cb:c001:50::5524) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:47:49] <ejjfunky0> that's just my input. if that's an icon, it's not showing on my end
[01:48:02] <Hash> I am confused man.
[01:48:06] <Hash> What checkbox?
[01:48:12] *** Joins: XV8 (~XV8@2601:5cb:c001:50::5524)
[01:48:18] <ski> ProfSimm : hm, by "this whole concept emerged", what are you referring to ?
[01:48:21] <Hash> I gotta go resetroom, brb
[01:48:26] <ejjfunky0> ahhh, your icon is not showing on my end i think. "fa fa-home"
[01:49:20] <hrob> does "no-opt" mean anything to people?  ...  I'm wondering if I use it incorrectly
[01:50:08] <sonny> opt-out 
[01:50:12] <hrob> I should get a programming dictionary
[01:50:13] <sonny> I haven't see no-opt
[01:50:27] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Quit: emf)
[01:50:33] <ski> ProfSimm : "because continuations are tail call of a first-class function" -- that's one view (out of several, related ones), regarding continuations. (when we were talking about Io before, in that context continuations were not functions at all. similarly, for the low-level implementation of functions as certain memory addresses (together with an environment))
[01:50:39] <hrob> lol, so Ive been using it wrong probably.... confusing other programmers
[01:50:47] <sonny> ski: I want to think abstractly, and then once again wrt to memory
[01:50:59] <sonny> I think 2 layers are required
[01:51:15] <ski> are required, for what purpose ?
[01:51:43] <sonny> to reason about system programming, and keep the abstractions intact
[01:52:13] <hrob> my strange understanding for many years was that when I code comment "this function is no-opt if so and so..."  , it means this function does nothing, or does nothing to the input data, if so and so
[01:52:20] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[01:52:35] <adder> hrob, it's "nop" or "no op"
[01:52:36] <sonny> what do you mean by no-opt?
[01:52:49] <hrob> right lol
[01:53:03] <hrob> no operation,
[01:53:19] <hrob> no op... will change my code comments lol
[01:53:28] *** Joins: palasso (~palasso@user/palasso)
[01:53:30] *** Joins: teut (~teut@122.161.83.81)
[01:53:52] <hrob> adder thanks!
[01:53:58] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[01:54:13] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[01:54:16] <ski> sonny : btw, re "programming without pointers", i suppose the relational data model might also be relevant
[01:54:17] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Quit: Konversation terminated!)
[01:54:50] <hrob> adder didnt know it was such an old school thing in assembly language even https://en.wikipedia.org/wiki/NOP_(code)
[01:54:51] <bayaz> Title: NOP (code) - Wikipedia 
[01:55:18] <hrob> knew what I was trying to say... but not how to say it lol..
[01:55:32] <sonny> ski: it's possible to program that way?
[01:56:25] <ski> ProfSimm : re direct style, i think it's helpful, because we, as humans, seem to have innate capability to handle nested (recursive) language structures. it also enables equational reasoning as a very important reasoning (including refactoring) technique
[01:57:22] <ski> sonny : well, deductive databases (and nowadays, also SQL), is Turing complete ..
[01:57:23] <ProfSimm> ski:  CPS is even more recursive than direct style.
[01:57:38] <ski> ProfSimm : dunno what you mean by that
[01:57:39] <ProfSimm> ski: I think the problem is we as humans like flat lists
[01:57:50] <absentia> i prefer grocery lists
[01:57:57] <ski> iteration is certainly a very important special case of recursion
[01:58:09] <ProfSimm> ski: well look what happens when you transform a program to CPS. Simple flat lists of "commands" become nested closure at every step 
[01:58:40] <Hash> Hmm.
[01:58:41] <ski> ProfSimm : yes, but you lose the ability to have "parallel" subexpressions
[01:58:50] <ProfSimm> ski: do we
[01:58:51] <Hash> ejjfunky0: some of those icons are not showing up. I need to debug.
[01:58:59] * absentia cues vsauce theme
[01:59:14] <ski> translation to CPS picks an evaluation ordering
[01:59:25] <ejjfunky0> Hash, most probably you didn't include fontawesome in your production.
[01:59:35] <Hash> It is.
[01:59:42] <Hash> Otherwise menu nav icons won't show up on my end.
[01:59:47] <ProfSimm> ski: the evaluator can disregard this just like it can disregard it in an imperative program
[01:59:50] <Hash> I serve a minimally customized one
[01:59:51] <amigojapan> Hash: have you added warnings about how horrible bad trips can be?
[01:59:53] <Hash> That's probably the issue.
[01:59:57] <Hash> I'll check my css generatgion
[01:59:58] <ski> can disregard what ?
[02:00:17] <ejjfunky0> in your css, i dont see it
[02:00:52] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:7d50:ed7b:88e6:c382) (Read error: Connection reset by peer)
[02:01:05] <Hash> 3 years since I touched the source
[02:01:07] <Hash> Han gon
[02:01:12] <Hash> It is gonig t take a minute to find out wher emy scode is
[02:01:25] <ProfSimm> ski: the strictly linear order
[02:02:02] <ski> sonny : anyway, it also depends on what you mean by "pointers" in "programming without pointers". do you have in mind forbidding pointer arithmetic ? do you have in mind avoiding an explicit pointer/reference type ? do you have in mind avoiding pass-by-reference (either inputs or outputs) ? do you have in mind avoiding an implementation which relies on passing around addresses ?
[02:02:10] <ski> (these are all different things)
[02:02:43] <Hash>  <!--<link href="{{ $fa.Permalink }}" rel="stylesheet"/>-->
[02:02:45] <Hash>  {{ end }}
[02:02:48] <Hash> I commented out FA.
[02:03:02] <sonny> ski: the last one
[02:03:04] <Hash> If I commented out FA, how the hell are even 4-5 icons shoiwing up?
[02:03:08] <Hash> WTF did I do?
[02:03:15] <ejjfunky0> right, lol
[02:03:30] *** Joins: b1tr0t (~bitrot@149.167.135.129)
[02:03:45] <Hash> {{ $css := slice $base $custom $fa | resources.Concat "css/style.css" | resources.Minify | resources.PostCSS | resources.PostProcess }}
[02:03:50] <ski> ProfSimm : the point of the CPS transformation is to "freeze" an evaluation order into a program, so that, regardless of what evaluation order you use to evaluate (reduce) it, that evaluation still simulates a particular evaluation order (the one that the transformation embodies, like cbv, cbn) of the original (untransformed) program
[02:04:06] *** Joins: Akiva (~Akiva@user/Akiva)
[02:04:08] <Hash> {{ $fa := resources.Get "fa.css" }}
[02:04:11] <absentia> ski: can you recommend a good paper on CPS
[02:04:17] <Hash> Yeah. I will have to try to remember what the fudge I did.
[02:04:23] *** Quits: monr0e (~monr0e@31.132.33.9) (Ping timeout: 256 seconds)
[02:04:30] <Hash> fa is loaded, parsed, processed, combined into final css file.
[02:04:34] <ski> sonny : what about passing around indices/keys ? (or maybe you're thinking even of different computation models than von Neumann machines ?)
[02:04:34] <Hash> I didn't comment it out.
[02:04:36] <Hash> So wtf.
[02:04:45] <Hash> Maybe you can't minify it?
[02:04:55] <Hash> No that's stupid. It's minifiable.
[02:05:02] <ejjfunky0> maybe you were debugging and forgot to uncomment it. happens all the time.
[02:05:11] <Hash> No it's included. Look at my golang code
[02:05:25] <Hash> {{ $css := slice $base $custom $fa | resources.Concat "css/style.css" | resources.Minify | resources.PostCSS | resources.PostProcess }}
[02:05:33] <sonny> ski: yeah I need to think about it some more
[02:05:46] <Hash> get 3 slices, concat them into a css file, minify, run postcss, and postprocess
[02:05:50] <ski> (so i dunno what you mean by "the evaluator can disregard this just like it can disregard it in an imperative program". how can an evaluator disregard it for an imperative program ?)
[02:06:00] <ejjfunky0> Hash, not sure about your golang code but it's not coming through.
[02:06:29] <Hash> IO know the problem.
[02:06:31] <Hash> I know it.
[02:06:33] <Hash> FA is included
[02:06:37] <Hash> https://i.imgur.com/vbYz448.png)
[02:06:37] <bayaz> Type: image/png Size: 87.8 kB 
[02:06:40] <Hash> https://i.imgur.com/vbYz448.png
[02:06:40] <bayaz> Type: image/png Size: 87.8 kB 
[02:06:41] <ski> sonny : from one point-of-view, a memory address is nothing else than an index into the large array called "memory"
[02:06:42] <Hash> Look 
[02:06:45] <Hash> Icons show up
[02:06:50] <Hash> but only FA5.x
[02:06:57] <Hash> The older directives for fa 4.x dont' sho wup
[02:06:59] <ejjfunky0> ic.
[02:07:00] <Hash> I need to fix my html
[02:07:05] <ejjfunky0> yea, i think that's it
[02:07:14] <Hash> Ok no big deal
[02:07:38] <Hash> Thanks man
[02:07:41] <Hash> I wanna get high so bad. OMG. 
[02:07:45] <Hash> See, this is why I stopped smoking.
[02:07:48] <ejjfunky0> other than that, looks pretty solid. flow is nice
[02:07:51] <Hash> If all I wanna do is get high, that's a problem.
[02:07:55] <Hash> Soon as I recognized that, I quit weed.
[02:07:57] <Hash> Whew.
[02:08:15] <Hash> Thanks
[02:08:18] <Hash> About the communities section
[02:08:22] <Hash> https://www.psychedelicsdaily.com/community/
[02:08:23] <bayaz> Title: Psychedelic Communities 
[02:08:27] <amigojapan> Hash: I quit all drugs about 25 years ago
[02:08:36] <Hash> The map is nice and usable, but it needs a serachable thing
[02:08:40] <ejjfunky0> Hash, what framework do you use for your golang?
[02:08:42] <Hash> Try to find a community in your locality using my site
[02:08:44] <Hash> How hard is it?
[02:08:49] <Hash> How many clicks/pages you have to go through
[02:08:52] <ProfSimm> ski, let's have a language, where we do CPS by passing parameter 'ok:' to every function to jump to with the result. Sample program: https://pastebin.com/hSskArYc
[02:08:53] <bayaz> Title: sum (1, 2) ok (sum1): sum (5, 10) ok (sum2): print (sum1, sum2) - Pastebin.com 
[02:08:58] <Hash> Let's find a way to present this info in the most easy to nav manner
[02:09:04] <ProfSimm> ski: what prevents those two sums from being executed in parallel
[02:09:20] <Hash> ejjfunky0: gohugo.io
[02:09:22] <sonny> ski: yes, that is my initial realization
[02:09:25] <Hash> Hugo static site framework
[02:09:29] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[02:09:40] <ejjfunky0> Hash: hehe, "Copyleft"
[02:09:45] <Hash> Yup.
[02:09:46] *** Quits: chives (~chives@64.130.100.177) (Ping timeout: 256 seconds)
[02:10:00] <Hash> https://validator.w3.org/nu/?doc=https%3A%2F%2Fwww.psychedelicsdaily.com%2F valid 100%
[02:10:01] <bayaz> Title: Showing results for https://www.psychedelicsdaily.com/ - Nu Html Checker 
[02:10:11] <Hash> CSS also valid, but only some css3 hacks it says 2 erros no big deal.
[02:10:13] <Hash> css valid too
[02:10:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[02:10:39] <ejjfunky0> Hash, i never used gohugo. if it's quick, i guess it's working.
[02:11:09] <Hash> The fastest.
[02:11:19] <Hash> Literally. Because ... Go lang.
[02:11:28] <ejjfunky0> how does it compare with gin?
[02:11:32] <Hash> I've been using Hugo since it came out, 0.10 etc.
[02:11:52] <Hash> No clue. I don't use subpar software. No need for gatsby or any other, jekyl or whatever
[02:12:05] <ejjfunky0> oh ok. 
[02:12:22] <Hash> I found Hugo in 2016. Been using it since then
[02:12:36] <Hash> I have over 800+ pages on my site
[02:12:48] <Hash> no css post processing, generates site in less than 4 sec
[02:12:53] <ejjfunky0> 2016? development is slow? gin is already v1.7.6
[02:12:56] <Hash> Hugo is blazing fast.
[02:13:02] *** Quits: Sidiq (~Guest21@36.72.21.216) (Quit: Client closed)
[02:13:10] <Hash> No since 2016 meaning it's well established and old
[02:13:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[02:13:22] <Hash> And very highly actively developed with a vibrant and helpful community
[02:14:05] <absentia> > 2016
[02:14:07] <absentia> > old
[02:14:24] *** Joins: Enitin (~Enitin@82.102.22.84)
[02:15:12] <ejjfunky0> Hash, breaking changes since then?
[02:15:13] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Quit: Client closed)
[02:15:18] <Hash> multiple times
[02:15:22] <ejjfunky0> hehehe ok
[02:15:23] <Hash> .20 was one, .60s somewhere
[02:15:26] <Hash> Few yeah.
[02:15:33] <ejjfunky0> got it
[02:15:38] <jamea>  hwnd = win32gui.GetForegroundWindow()python how to create an array of 5 columns and N elements?
[02:15:39] <Hash> No big deal though. I keep up with hugo dev. I login to the forums once every few months
[02:16:18] <jamea> sorry python how to create an array of 5 columns and N elements?
[02:16:29] <Hash> That's not an array, thats a matrix.
[02:16:35] <Hash> What are you trying to do?
[02:17:00] <jamea> i read a excel file, interested in 5 columns, but not know how many rows was
[02:17:15] <Hash> So you're trying to parse a csv or excel file into python array?
[02:17:20] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:17:32] <Hash> Export a CSV of your sheet, load the sheet directly into python using csv reader
[02:17:33] <jamea> not... not parse. open excel evaluate,, and add to matrix..
[02:17:42] <Hash> https://docs.python.org/3/library/csv.html
[02:17:42] <bayaz> Title: csv ? CSV File Reading and Writing ? Python 3.10.2 documentation 
[02:17:47] <Hash> I see.
[02:17:48] <jamea> if a certain row was evaluated 
[02:18:10] <Hash> I am unsrue about excel sheets in python
[02:18:12] <Hash> Try #python
[02:18:22] <ski> absentia : hmm .. i know i was reading stuff (papers) all over the place. i remember "Representing control: a study of the CPS transformation" in 1992,"Abstracting Control" in 1990, both by Olivier Danvy,Andrzej Filinski, at <http://hjemmesider.diku.dk/~andrzej/papers/> made an impression on me (also other papers by Filinski, and by Danvy). also some papers by Hayo Thielecke. oh, and Oleg 
[02:18:25] <phogg> jamea: evaluate excel formulas?
[02:18:27] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:18:28] <ski> <https://okmij.org/ftp/continuations/index.html>. and <https://web.archive.org/web/20180720154748/http://library.readscheme.org/page6.html>
[02:18:42] <jamea> teh content of a cell...
[02:18:58] <jamea> if cell >11 add 
[02:19:05] <Hash> https://www.python-excel.org/
[02:19:05] <bayaz> Title: Python Resources for working with Excel - Working with Excel Files in Python 
[02:19:07] <Hash> have you seen this?
[02:19:15] <Hash> https://openpyxl.readthedocs.io/en/stable/ this one too
[02:19:15] <bayaz> Title: openpyxl - A Python library to read/write Excel 2010 xlsx/xlsm files ? openpyxl 3.0.9 documentation 
[02:19:17] <jamea> no  problem with excel
[02:19:20] <Hash> They would make excel work easy in python
[02:19:23] <jamea> my problem is add to a matrix..
[02:19:42] <phogg> jamea: you just want to know python syntax for multidimensional array?
[02:19:42] <jamea> or need create 5 lists?
[02:19:48] <Hash> Can you explain the problem in clarity so we can understand
[02:19:49] <jamea> phogg yes
[02:19:57] <jamea> again...
[02:20:07] <Hash> You want a multidimensional array? 
[02:20:10] <teut> https://www.youtube.com/watch?v=Y4Gt3Xjd7G8&t=3409s   at 46:32  why is the producer  having a call_later and not a call_soon?
[02:20:11] <jamea> yes
[02:20:11] <bayaz> Title: Build Your Own Async 
[02:20:37] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:20:42] <Hash> jamea: you can create it however you want.
[02:20:44] *** Joins: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at)
[02:21:11] <Hash> There is no certain way to do it. It's how you need the data to be represented
[02:21:24] <Hash> Basic syntax, nested []
[02:21:43] <ski> ProfSimm : "what prevents those two sums from being executed in parallel" -- (well, first, i wasn't talking about parallel execution, but) the second `sum' is wrapped in a piece of code that has a data dependency on the result of the first `sum'. in a naïve evaluation model, this means sequencing. to avoid that, you'd have to apply some analysis to discover their independence
[02:21:55] <jamea> OK
[02:21:59] <Hash> a = [1,2,[b, c, [d, e]],3,4] for example.
[02:22:02] <jamea> xListaSOV1=[]    xListaSOV2=[]     xListaSOV3=[]     xListaSOV4=[]     xListaSOV5=[]
[02:22:17] <jamea> declared 5 lists then
[02:22:20] <teut> he does speaks about that there would be like lots of call calls to the function and to avoid that he's doing that , but he's using call_sooon in the consumer
[02:22:55] <adder> jamea, here's a way to init a 10x10 matrix https://bpa.st/TZPQ
[02:22:56] <bayaz> Title: View paste TZPQ 
[02:23:00] *** Quits: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it) (Remote host closed the connection)
[02:23:23] <ski> sonny : "yes, that is my initial realization" -- it's how e.g. Haskell can allow equality checking of references to mutable locations, without introducing side-effects ("breaking purity/declarativity"). the reference doesn't "contain" the value referenced. conceptually, the value resides in a separate data structure (which is implicitly threaded around, or, with uniqueness, possibly explicitly threaded 
[02:23:24] <phogg> teut: totally unrelated but I like that this guy just reinvented the option type with his result class.
[02:23:32] <ski> around). the references acts just like an index/key into this
[02:24:57] *** Quits: kariosfox (~kariosfox@176.221.123.109) (Remote host closed the connection)
[02:25:26] <teut> oh yes, I had used a similar thing in one of my codes
[02:25:47] <teut> but I think I liked it later
[02:25:55] <teut> I didn't like*
[02:26:10] *** Joins: kariosfox (~kariosfox@176.221.123.109)
[02:26:20] <phogg> teut: it's a useful construct, but much more useful if supported at a language level
[02:26:31] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[02:26:34] <adder> jamea, you then use spam[row][col] to access an individual element
[02:27:04] <teut> maybe its good, I will try using it more and see what usecase it fits well
[02:27:17] <teut> exceptions make debugging very hard
[02:27:20] <jamea> adder 2 columns right?
[02:27:43] <jamea> reading your sample
[02:27:53] <phogg> teut: if exceptions make debugging hard you're doing something wrong. They're supposed to make it easier.
[02:27:56] *** Quits: kariosfox (~kariosfox@176.221.123.109) (Read error: Connection reset by peer)
[02:27:57] <adder> jamea, there are 10 rows and 10 columns in the example
[02:28:17] <adder> each element is a 2-tuple
[02:28:29] *** Joins: kariosfox (~kariosfox@176.221.123.109)
[02:28:29] <teut> ok I ll grab a book to learn how to do the stuff corretly
[02:28:31] <adder> I could have put something else instead
[02:28:35] <teut> correctly
[02:29:11] <sonny> ski: oh, that's really interesting
[02:29:23] <ski> teut : not sure about the distinction between `call_later' or `call_soon' there. i suspect i'd have to view that video from the start, to be able to tell
[02:30:09] <teut> call_later takes a func and an int and calls the func  after  int secs
[02:30:19] <teut> call_soon just calls the func
[02:31:12] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 272 seconds)
[02:31:22] <ski> not sure which `call_later' call you're talking about, either. the one in the `producer' ?
[02:31:36] <phogg> technically the one on the scheduler
[02:31:43] <teut> yes
[02:31:48] <teut> phogg is right
[02:32:18] <phogg> is there another call to it? I didn't notice one
[02:32:34] *** Quits: pizdets_ (~pizdets@183.182.110.129) (Ping timeout: 250 seconds)
[02:32:40] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[02:32:46] * ski has only the faintest idea of the structure of this given piece of code
[02:32:52] <phogg> me either
[02:33:00] <jamea> adder i see. 10 x 10 but i need N Elements how to do?
[02:33:13] <phogg> I would have to go back and hear the rationale for why call_soon and call_later even exist. But then I'd have to look at Python code...
[02:33:20] <ski> (but asynch stuff tends to be related to Continuation-Passing Style (CPS) stuff, which i guess i know a bit about)
[02:33:41] <jamea> python xListaSOV1=[]   xListaSOV1.add(0.48024431877165336)  AttributeError: 'list' object has no attribute 'add'
[02:33:49] *** Joins: pizdets (~pizdets@183.182.114.226)
[02:33:54] <absentia> ski: thanks for the links
[02:34:01] <ProfSimm> ski: so what locks order of execution in CPS
[02:34:10] *** Joins: hololeap (~hololeap@user/hololeap)
[02:35:30] <teut> its cooperative multitasking
[02:36:21] *** Joins: DasBrain (DasBrain@user/dasbrain)
[02:36:36] *** Quits: mmfood (~mmfood@c-5eea3747-74736162.cust.telenor.se) (Ping timeout: 240 seconds)
[02:37:57] *** Quits: Akuli (~Akuli@82-203-160-26.bb.dnainternet.fi) (Quit: Akuli)
[02:38:00] * ski . o O ( "Flattening Callback Chains with Monad Do-Notation" by Remko Tronçon in 2015-07-02 at <https://el-tramo.be/blog/async-monad/> ; "Escaping Hell with Monads" by Philip Nilsson in 2017-05-08 at <https://philipnilsson.github.io/Badness10k/escaping-hell-with-monads/> )
[02:38:05] <ski> (re async)
[02:38:42] <ProfSimm> Monads flatten async chains just cosmetically
[02:38:48] <ProfSimm> Not sure I like that
[02:39:04] <phogg> teut: that's an odd way of looking at it, but sure
[02:39:06] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:39:28] *** Quits: DasBrain_ (~DasBrain@user/dasbrain) (Ping timeout: 250 seconds)
[02:39:43] <absentia> ProfSimm: that's just an artifact of do notation
[02:39:52] <absentia> i would not call `>>=` or `>=>` cosmetic
[02:40:06] <absentia> ... without sufficient brain damage
[02:40:35] <ski> teut : yes, you can do cooperative concurrency with CPS (or, even in direct style, not needing to code in CPS, if you can capture (possibly delimited) continuations). if you also have timer interrupts, you can do preemptive concurrency
[02:40:58] *** Joins: Mangy_Dog (~Mange@user/mangy-dog/x-7397214)
[02:41:00] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:41:11] <ski> absentia : np :)
[02:41:33] <teut> whats the difference between cooperative and preemptive?
[02:41:49] *** Joins: Pickchea (~private@user/pickchea)
[02:41:49] <absentia> one yields control
[02:42:00] <ProfSimm> teut: latter is based on timer interrupts, the former on the good will of every thread to give up control
[02:42:05] <absentia> the other requires a scheduler to stop processes and resume other ones
[02:42:08] <Hash> The controller is the controlled.
[02:42:22] <teut> oh yes, in preemptive there is context switch
[02:42:24] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Remote host closed the connection)
[02:43:09] <absentia> ProfSimm: it may not necessarily be timer interrupts
[02:43:15] <ski> in the former, you can only switch between different threads of control, explicitly (by invoking `yield', or an operation that invokes that). in the latter, your execution can be interrupted, and the current execution context (registers, instruction pointer, stack, &c.) packaged up into a continuation, which can be stored in the thread/task queue, and another one instated in its place for a while
[02:43:19] <absentia> e.g. one process is awaiting input on a file descriptor, but no input is available
[02:43:32] <absentia> process is now blocked on IO => kernel recognizes this, pre-empts it and schedules a different process
[02:43:46] <ski> (cooperative can still have a non-trivial scheduler, btw)
[02:43:58] <absentia> shit
[02:44:52] * ski . o O ( <http://fare.tunes.org/tmp/emergent/pclsr.htm">Emergent Technologies Inc. -- PCLSRing: Keeping Process State Modular - Alan Bawden</a>> )
[02:44:58] <ski> er, sorry
[02:45:27] *** Quits: amigojapan (uid86330@id-86330.helmsley.irccloud.com) ()
[02:45:28] <teut> if we are using preemptive multitasking on a cpu then if one thread is doing IO , does the second works in that time or it too sleeps?
[02:46:14] <ProfSimm> teut: there's no reason a thread that's not waiting for IO to be sleep on IO
[02:46:21] <ProfSimm> to sleep*
[02:46:52] <phogg> It's most fun if you can't touch the actual controller. I wrote a sort of cooporative scheduling thing in JS once, because IE<8 is really bad at not popping up "long running script" warnings. All code had to be in the form of callbacks executed in a loop so they would yield often.
[02:47:09] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[02:47:15] <absentia> teut: if one thread is waiting on IO and cannot proceed otherwise, it's possible the scheduler may decide to pre-empt it and schedule the other one to do work on the CPU
[02:47:20] * ski . o O ( <https://en.wikipedia.org/wiki/PCLSRing>,"PCLSRing: Keeping Process State Modular" by Alan Bawden at <http://fare.tunes.org/tmp/emergent/pclsr.htm>,"PCLSRING in Semantics" by Robert Harper in 2016-07-11 at <https://existentialtype.wordpress.com/2016/07/11/pclsring-in-semantics/> )
[02:48:21] <teut> I couldn't understand that so I am telling the exact problem.  I  wrote some code few months back where there is a producer consumer running in separate threads . Now the consumer is preparing html and consumer is sending mails
[02:48:39] <teut> since python's gil only allows 1 thread to work
[02:48:50] <teut> so using two threads made it any good or not?
[02:49:02] <phogg> okay, I have now watched enough of this video to understand what it's doing (I think)
[02:49:30] <ProfSimm> ski: can we combine CPS and direct in a single subsuming paradigm
[02:49:46] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[02:50:00] *** Quits: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[02:50:02] * ski . o O ( "A Poor Man's Concurrency Monad" (Functional Pearl) in 1993-01 by Koen Claessen at <https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.39.8039> )
[02:50:12] <teut> phogg can you help me with the above ques too? By what you said above I am guessing that the 2 threads approach would make the producer produce items in the time the consumer dose the network request
[02:50:26] <teut> so 2 threads is efficient than single one
[02:50:49] <teut> ski are you doing some research on monads?
[02:50:51] <phogg> teut: I am not clear on what it was you were not clear on
[02:51:30] <teut> I ran the producer and consumer in separate threads
[02:51:50] <teut> but due to python gil only one thread can execute at a time
[02:52:06] <teut> so two threads made it efficient or not?
[02:52:33] <phogg> I can't answer that.
[02:52:38] <EdFletcher> just make them two separate processes. no gil contention then. 
[02:52:44] *** Quits: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at) (Quit: WeeChat 3.4)
[02:52:44] <ski> "The 7th edition, or ECMAScript 2016, was finalized in June 2016. Its features include [..] proper tail calls, [..]." -- <https://en.wikipedia.org/wiki/ECMAscript#7th_Edition_–_ECMAScript_2016>
[02:53:01] <teut> can try that EdFletcher
[02:53:02] <phogg> the difference between a thread and a process on a Unix system is pretty unimportant (most of the time).
[02:53:44] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[02:53:45] <EdFletcher> yup i doubt you'd see any measurable differences really, given that your most expensive stuff is likely i/o you do anyway, the cost of spinning up a process will be effectively noise 
[02:54:09] <phogg> then you port to Windows and suddenly it really matters
[02:54:30] <teut> no, my most expensive stuff is  creation of EmailObject
[02:54:32] <ski> ProfSimm : CPS is a style. you can basically use it, as soon as you can pass functions as arguments. not sure what you have in mind with "a single subsuming paradigm"
[02:54:35] <EdFletcher> lol fair, wasn't considering windows (should we?!) 
[02:54:40] <teut> yes
[02:54:43] <phogg> EdFletcher: I don't
[02:54:48] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[02:54:58] <teut> I am using win
[02:54:58] <EdFletcher> yeah i never do, but if teut is developing for it then we must 
[02:55:14] <phogg> who runs code on Windows? Maybe some people during development (where performance matters less)
[02:55:26] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[02:55:32] <ski> teut : "are you doing some research on monads?" -- nah. the present discussion merely reminded me of some links
[02:55:49] <teut> if my users use windows why would I use linux
[02:55:53] <ProfSimm> ski: it's like saying every machine we do is just a style on an infinite magnetic tape manipulator.
[02:56:05] <ProfSimm> ski: Details matter. Tail call is the most basic example
[02:56:18] <teut> also my producer uses MS office to convert  a .docx to .html
[02:56:35] <teut> consumer sends the html body as attachment of email
[02:56:42] <teut> as body*
[02:56:56] <ProfSimm> ski: I'd go further and say that we should be able to do a tail call not just at "the tail"
[02:57:03] <teut> ski , they are good but , thanks for them
[02:57:07] <ProfSimm> ski: to truly take advantage
[02:57:31] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[02:57:55] <ski> PsyZeus : i basically have no idea what you mean by "combine CPS and direct", apart from what we can already do, just by writing (possibly only part of the program) in CPS
[02:58:01] <ski> er, ProfSimm ^
[02:58:53] <ski> "Details matter." -- yes. i'm not sure what you have in mind with tail calls here, though
[02:59:05] <ProfSimm> ski: 1) be able to jump to any function while replacing the current stack frame, even if it's not at the tail 2) exceptions through CPS 3) be able to replace the return point on any function even if it's not coded explicitly CPS
[02:59:10] <ProfSimm> ski: few points
[03:00:52] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[03:00:54] <ProfSimm> ski: to code CPS "style" in a language not fit for it, means you now have two distinct calling conventions in one language. We know how well that works with sync/async in languages. Poorly
[03:01:20] *** Quits: zaher (~zaher@37.48.151.183) (Ping timeout: 256 seconds)
[03:02:24] <absentia> here we go
[03:02:27] <absentia> why was this so fucking hard to find
[03:02:29] <absentia> https://tldp.org/HOWTO/KernelAnalysis-HOWTO-6.html
[03:02:30] <bayaz> Title: KernelAnalysis-HOWTO: Linux Multitasking 
[03:02:40] <ski> (1) is not a tail call, then, but rather discarding the current continuation. (2) is an example of this (selecting an alternative continuation than the "default" one). not sure what you have in mind with (3)
[03:02:48] <absentia> i fear no longer being able to locate information on the web
[03:02:53] <absentia> brb purchasing a printer
[03:02:59] <phogg> absentia: I blame Google
[03:03:04] <ProfSimm> TASK_ZOMBIE, task child without father <-- they shoulda called it TASK_BATMAN
[03:03:05] <absentia> phogg: i've almost entirely de googled
[03:03:13] <absentia> phogg: use kagi, 2008 era google search quality
[03:03:15] <phogg> absentia: they suckered us in with really good search, then slowly made it less useful over time
[03:03:15] <ski> absentia : bookmarks ? link drop file ?
[03:03:30] <absentia> ski: folder of PDFs
[03:03:31] <phogg> absentia: you have my attention.
[03:03:51] <absentia> phogg: it's pretty good
[03:03:51] <ski> hard to grep through a bunch of PDFs
[03:03:52] *** Joins: pulse (~pulse@user/pulse)
[03:03:54] <phogg> bookmarks? Maybe start maintaining a home page, too. Is it too early for 90s to be retro cool?
[03:04:00] <absentia> phogg: on DDG I used to !g very regularly
[03:04:12] <absentia> phogg: to the point where it became muscle memory
[03:04:25] <absentia> but now on kagi the immediate results are good enough
[03:04:25] <phogg> ski: for pdf in *pdf; do pdftotext "$pdf"; done | grep ...
[03:04:36] <absentia> even though it still has a !g pattern
[03:04:48] <absentia> yeah pdfs not so searchable
[03:05:11] <ski> sometimes PDFs are image scans. sometimes there's annoying markup/whatever inbetween individual characters of words
[03:06:17] <absentia> Task Switching is needed in many cases, such as the following:
[03:06:19] <absentia> when TimeSlice ends, we need to give access to some other task; when a task decide to access a resource, it sleeps for it, so we have to choose another task; when a task waits for a pipe, we have to give access to other task, which would write to pipe
[03:06:28] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[03:07:14] <ski> ProfSimm : "We know how well that works with sync/async in languages. Poorly" -- yes. monads is somewhat better here. then there's also monadic reflection, while allows you to use traditional side-effecting notation (not `do'-notation or something like that), even also for custom effects that are not built-in to the language (but appear to be, via the reflection). Andrzej Filinski (link above) has two 
[03:07:20] <ski> papers about this
[03:08:04] <ski> ProfSimm : anyway, "to code CPS \"style\" in a language not fit for it, means you now have two distinct calling conventions in one language" is why there's a push to go back to direct style, one way or another
[03:08:40] <phogg> absentia: still in private beta, but I signed up for the wait list.
[03:10:04] <phogg> ski: when it comes to image scans there's not much you can do (apart from OCR) but pdftotext is pretty good about the other stuff
[03:11:51] <phogg> ski: which link was that?
[03:11:53] <absentia> i guess bookmarks
[03:12:02] <absentia> but even links rot and die away
[03:12:12] <absentia> maybe i start saving everything in the internet archive??
[03:12:24] <phogg> absentia: that's the only way to be sure
[03:12:32] <absentia> what a world
[03:12:32] * ski . o O ( "Compiling without Continuations" by Luke Maurer,Paul Downen,Simon Peyton Jones in 2016-11 at <https://ix.cs.uoregon.edu/~pdownen/publications/pldi17_appendix.pdf> )
[03:12:42] <phogg> absentia: I started saving pages to local disk some years ago (which is the same idea only less good)
[03:12:50] <absentia> phogg: i've started doing this as well
[03:13:05] <absentia> damn i actually forgot
[03:13:05] <phogg> ski: thanks. This is relevant to my interests, providing it is not too arcane.
[03:13:08] <absentia> i have quite a few saved now
[03:13:12] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Quit: Konversation terminated!)
[03:13:14] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 256 seconds)
[03:13:29] <phogg> absentia: ... and now you need your own local search index
[03:13:35] <phogg> because eventually grep is too slow
[03:13:48] <absentia> mmmm
[03:13:50] *** Joins: communistmuslim (~communist@bras-base-tnhlon4048w-grc-67-67-71-22-200.dsl.bell.ca)
[03:13:52] <absentia> not that many
[03:14:08] <absentia> hacker extraordinaire
[03:14:10] <absentia> communistmuslim: 
[03:15:28] <ProfSimm> ski: I don't think you understood what i said, nor I understood what you said
[03:16:55] *** communistmuslim is now known as cockatoodude
[03:17:01] <ski> phogg : sorry, which link was what ?
[03:17:45] <ski> (btw, that Peyton-Jones, et al. paper title is obviously a tongue-in-cheek reference to the famous book "Compiling with Continuations" by Andrew Appel)
[03:17:49] <phogg> ski: the one you referenced with "Andrzej Filinski (link above)"
[03:17:53] <ski> ah
[03:18:00] <phogg> thought you were linked it after, but I guess not
[03:18:06] <phogg> although this is pretty good stuff, too
[03:18:18] <ski> no, i linked to it above, around an hour ago
[03:18:20] *** Joins: trevors (~trevors@user/trevors)
[03:18:41] *** Joins: cheater (~Username@user/cheater)
[03:18:43] <cheater> what do you call that situation where someone (usually older) wants to show how smart they are so they tell you how to do your job (which you are an expert at) but everything they say is wrong, so it just ends up being a very long ranty admission of ignorance? and when you don't do what they say they'll usually say you're just not listening?
[03:18:47] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:18:48] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[03:18:53] <cheater> it's not exactly saging or pulling rank, but something close by
[03:19:05] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[03:19:06] <perro_> this chan
[03:19:20] <phogg> ski: no wonder I couldn't find it!
[03:19:21] <cheater> that's true
[03:19:45] <cheater> but i'm trying to figure out if there's a concise way to call it out
[03:20:03] <phogg> cheater: invent a term, then act surprised when they don't know what it means, then define it for them
[03:20:09] <phogg> seems only fair
[03:20:14] <perro_> nice
[03:20:43] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:21:20] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[03:21:33] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[03:22:07] <ski> ProfSimm : hm, quite possible. which part do you think i didn't understand ? (and which part of what i said do you think you didn't understand ?)
[03:22:34] <ski> phogg : you found it now ?
[03:22:36] <cheater> phogg, found an archaic one that has this meaning: https://en.wikipedia.org/wiki/Teaching_grandmother_to_suck_eggs
[03:22:36] <bayaz> Title: Teaching grandmother to suck eggs - Wikipedia 
[03:22:52] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:23:00] <phogg> ski: no, but I will.
[03:23:07] <absentia> cheater: bigotry
[03:23:10] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:23:38] <ski> (i could simply give the link again, if you prefer. but perhaps you'd also enjoy the surrounding discussion from before)
[03:23:58] <phogg> ski: knowing about when it was is enough
[03:24:05] * ski nods
[03:24:41] <cheater> absentia: i think that's pretty far
[03:24:51] <ski> (it was almost exactly one hour ago, when i mentioned "an hour ago")
[03:26:47] *** Quits: analognoise (~analognoi@ip98-176-154-48.sd.sd.cox.net) (Read error: Connection reset by peer)
[03:27:03] <phogg> ski: I have it now, just had to remember that I changed where I put my IRC logs
[03:27:10] <cheater> ski, I appreciate the fact that you try to make your statements context-free.
[03:28:07] <ski> hm, i do ?
[03:28:15] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[03:28:19] <ProfSimm> ski: I think there's a way to make CPS more appealing, if we bother to think beyond "it's just calling functions"
[03:28:33] <ProfSimm> ski: and to make direct style just a special case of CPS
[03:30:39] <ski> (btw, apropos Andrew Appel, books, and compilation, his "Modern Compiler Implementation in (ML|C|Java)" in 1998 at <https://www.cs.princeton.edu/~appel/modern/> is a pretty nice book)
[03:31:22] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 272 seconds)
[03:31:57] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:32:20] <ski> (perhaps i do .. but i guess i don't tend to think about it too much, and so i'm not sure which context-free expression of a statement that you had in mind)
[03:33:05] <ski> ProfSimm : well, i think of CPS as a special case of DS. so i'm not sure what you have in mind
[03:33:38] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 256 seconds)
[03:33:56] <ProfSimm> ski: I think what you see first is a matter of habit and culture.
[03:34:12] <ProfSimm> ski: also after all the only way to gain new insights is when you try a new perspective
[03:34:23] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[03:34:24] <absentia> a new kind of computer science
[03:34:35] *** Joins: flakland (~flaknet99@32.211.211.39)
[03:37:14] <ProfSimm> ski: after modeling boolean operators, statements etc. in CPS style, I eliminated a ton of stuff. I no longer need bool values, or operators per se. It call becomes CPS and everything happens on its own, including shortcircuiting
[03:37:38] <ProfSimm> ski: this to me means CPS is more foundational, and the rest we invented is accidental complexity to do it in DS
[03:38:03] <flakland> no operators now too!?
[03:38:12] <absentia> groundbreaking
[03:38:13] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 256 seconds)
[03:38:19] <absentia> we are at the frontiers of informatica
[03:38:23] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[03:38:40] <absentia> it happened right here on libera
[03:38:56] <ProfSimm> I'd (re)explain if you weren't so annoying and sarcastic
[03:39:11] <ProfSimm> Re flakland and absentia'
[03:39:13] <absentia> i will spare us both the migraine
[03:39:19] <absentia> prior attempts at explication have failed
[03:40:35] <ProfSimm> But in short, the operators AND, OR, NOT, ternary, and the statements if/then/else and switch/case disappear if you represent a boolean in CPS style as   test/true: continuation/false: continuation
[03:40:37] * ski . o O ( "Back to direct style" by Olivier Danvy in 1994-02 at <https://cs.au.dk/~danvy/DSc/17_danvy_scp-1994.pdf> ; "Back to Direct Style II: First-Class Continuations" by Olivier Danvy,Julia L. Lawall in 1996-06 at <https://tidsskrift.dk/brics/article/view/19982> )
[03:40:51] * ski . o O ( "Type-directed partial evaluation" by Olivier Danvy in 1996 at <https://dl.acm.org/doi/10.1145/237721.237784> )
[03:40:56] <ProfSimm> When you're compiling boolean expressions this way, they just don't need to exist in the AST at all
[03:41:02] <audio> is there a js framework that is built on jquery
[03:41:04] <ProfSimm> They just become these booleans
[03:41:16] <flakland> oh but there is still boolean comparison operator?
[03:41:24] <absentia> yeah fuck it let's just compile everything down to `mov`
[03:41:32] <absentia> we literally don't require any other instructions
[03:41:33] <absentia> or operators
[03:41:40] <ski> "if we bother to think beyond \"it's just calling functions\"" -- well, i guess my mention of return addresses was one way to do this
[03:41:44] <ProfSimm> absentia: are you mocking RISC architecture now?
[03:41:53] <ProfSimm> absentia: you're so much better than anyone, aren't you
[03:41:53] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:41:54] <absentia> ProfSimm: RISC isn't reduced enough
[03:41:58] <absentia> yes
[03:42:04] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[03:42:13] <absentia> why go RISC when you can go full movfuscator
[03:42:36] <absentia> https://github.com/xoreaxeaxeax/movfuscator
[03:42:37] <bayaz> Title: GitHub - xoreaxeaxeax/movfuscator: The single instruction C compiler 
[03:42:46] <ski> ProfSimm : i guess you're representing booleans, Church/Scott style ?
[03:42:52] <ProfSimm> ski: yes
[03:43:34] <ProfSimm> ski: first time I read about it, it seems like some toy so lamdba calculus can have booleans
[03:43:41] <ProfSimm> ski: but actually no, it's way better
[03:44:07] <flakland> is there a comparison operator for boolean branching or nah?
[03:44:26] <ski> (this is btw related to the "Multi-return function call" paper from above (which btw is not really a good title. something like "Multiple (alternative) return continuations" would better express what it's about. another way to think about it is that it's "unboxing"/virtualizing / making ephemeral sum types (or rather, continuations of those types)))
[03:45:01] <ProfSimm> flakland: you have comparisons, what you don't have is not/and/or, boolean values and branch statements
[03:45:19] <ProfSimm> flakland: the comparisons don't return true/false, they call one of two continuations
[03:45:34] <flakland> one of TWO eh
[03:45:34] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:45:45] <ski> ProfSimm : "When you're compiling boolean expressions this way, they just don't need to exist in the AST at all" -- Appel's book ("Modern compiler implementation in ..") actually mentions this
[03:46:02] <ProfSimm> flakland: well in some cases one or three, if you insist.
[03:46:12] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[03:46:30] <ProfSimm> flakland:    x <=> y  gt: continuation lt: continuation eq: continuation
[03:46:57] <flakland> you say theres no branch, but that does look like a branch
[03:46:58] <ski> "but actually no, it's way better" -- it's a trade-off. do you want emphemeral or persistent booleans ? sometimes you want one, sometimes the other
[03:46:59] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[03:48:09] <ProfSimm> ski: what makes them ephemeral or persistent here
[03:48:58] <ski> flakland : i suppose ProfSimm means that you don't have a dedicated branching construction for booleans. it's just calling a boolean with two continuations (you can think of compiling a boolean expression to a (compile-time) function that, when given two labels (or, in general, addresses), will emit code that will eventually select (jump to) one or the other label)
[03:49:05] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[03:49:09] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[03:50:06] *** Joins: mickey8 (~user@user/mickey)
[03:50:32] <ski> ProfSimm : if you, as soon as you've computed the boolean, want to branch on it (iow use it up), and not use it anymore, then that's ephemeral. if you want to store it somewhere, for later processing, or for multiple use, then that's persistent (to greater or lesser degree. might involve a GC. might just involve storing bits into a bit vector that's allocated on the stack or something)
[03:51:28] <ProfSimm> ski: you can still map N continuations to enum with N cases.
[03:51:40] <ski> ProfSimm : just like, if you're computing a list, you can either be persistent (the list is a materialized object that you can refer to as many times as you like, while it's live), or emphemeral (which is what streams, generators, iterators, are about. getting one element at a time, but never materializing the full list all at the same time)
[03:51:48] <ProfSimm> ski: in fact, that was one realization... booleans for state really suck
[03:52:01] <perro_> prof what do you do professionally?
[03:52:09] <flakland> what's the alternative
[03:52:23] <flakland> not-boolean jump tables?
[03:52:37] <flakland> none of this makes any sense to me
[03:52:41] <ProfSimm> perro_: I program
[03:52:47] <ski> ProfSimm : "you can still map N continuations to enum with N cases." -- yes (what the Shivers & Fisher paper is basically about, at the most basic level)
[03:53:36] *** Joins: trevors (~trevors@user/trevors)
[03:53:52] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[03:55:03] <ProfSimm> ski: we use boolean values for everything because they're too humble and generic. But it quickly turns into a nightmare. So I identified what is the better approach and i came up to the conclusion booleans are used for branching and error reporting, which can be done with continuations, and they're used for state, which can be done with enums and other data structures.
[03:55:23] <ProfSimm> ski: booleans are this odd situation where they have many poor uses, so they seem very useful
[03:55:46] <flakland> lol
[03:55:56] <ProfSimm> ski: kind of like how no matter how much your life sucks, smoking pot always makes it all better
[03:56:01] <flakland> must be a long running comedy routine
[03:56:01] <ski> ProfSimm : why allocate and construct a `struct'-with-`enum'-and-`union' to return, just to have the caller immediately branch on the `enum' and then discard the value of discriminated/tagged/disjoint union / sum/variant / variant record type (while extracting the relevant component(s) of the `union'), when you can pass multiple alternative continuations (multiple return addresses), that point directly 
[03:56:08] <ski> to the branches of the `switch', and let the function return directly to the desired branch
[03:56:46] <ProfSimm> flakland: is being clueless your hobby or
[03:56:54] <flakland> what am i clueless about?
[03:57:01] <flakland> you're the one trying to optimize out booleans somehow
[03:57:08] <ski> ProfSimm : "booleans for state really suck" -- often. not always. sometimes you have a bunch of booleans (e.g. bloom filter, &c.), and you don't want to "immaterialize" it
[03:57:14] <ProfSimm> flakland: and i did
[03:57:19] *** audio is now known as audiomouse
[03:57:22] <flakland> is it optimal though, in reality?
[03:57:27] <flakland> outside of your test setup
[03:58:01] <ProfSimm> flakland: when a programmer has to learn 2 things to do everything they needed 16 things to do, and then some, I consider it a success.
[03:58:20] <perro_> not if those fewer things are more complex and abstract
[03:58:23] <perro_> cps to most poeple is
[03:58:24] <absentia> movfuscator
[03:58:38] <absentia> no ret, no add
[03:58:40] <absentia> only mov
[03:58:47] <absentia> no jmp
[03:59:33] <ProfSimm> ski: in a bloom filter you wouldn't use booleans, you'd use bitflags. 
[03:59:46] <ProfSimm> ski: it's a highly specific situation where you'd go low-level implementing it.
[03:59:51] <flakland> bits, those things that are one of TRWO values?
[04:00:24] <ProfSimm> flakland: do you call your arms "true" and "false" because you have two of them?
[04:00:38] <ProfSimm> flakland: stop playing dumb please
[04:00:58] <flakland> bools are fundamental to digital computing
[04:01:00] <ski> "we use boolean values for everything because they're too humble and generic." -- this is both a good and a bad thing. good, because it's a universal interface (not a custom data type that's only used in one place). bad, because it can be easy to mix up the intended meaning of the two alternatives, and the naming may be unclear or misleading here. also (which is a separate issue) "Boolean Blindness" by 
[04:01:01] <flakland> its a fact
[04:01:06] <ski> Robert Harper in 2011-03-15 at <https://existentialtype.wordpress.com/2011/03/15/boolean-blindness/>
[04:01:20] <flakland> stop  trying to pretend you can optimize them out somehow
[04:01:33] <flakland> might work for your edge case problem, but not in general
[04:01:36] <ProfSimm> flakland: I didn't remove boolean logic, I removed boolean values.
[04:02:13] *** Quits: cockatoodude (~communist@bras-base-tnhlon4048w-grc-67-67-71-22-200.dsl.bell.ca) (Quit: Leaving)
[04:02:14] <ProfSimm> flakland: boolean values are just a shitty special case enum that is abused 99% of the time
[04:02:24] <absentia> world's fastest computer made of air
[04:02:28] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:02:29] <ski> ProfSimm : bits are booleans
[04:02:41] <ProfSimm> flakland: if you want two things, give them proper names, and make them an enum
[04:02:51] <ProfSimm> ski: no
[04:02:56] <absentia> flakland: yeah dipshit, like "true" or "false"
[04:03:04] <absentia> we can call the enum "bool"
[04:03:14] <flakland> TO BOOL or NOT TO BOOL, that is the question
[04:03:39] <ski> ProfSimm : both are data types having exactly two values
[04:03:46] <absentia> whether 'tis nobler in the mind to suffer the slings and arrows
[04:03:50] <absentia> of outrageous software
[04:04:00] <phogg> .toBool() || ! .toBool()
[04:04:25] <ProfSimm> ski: I honestly didn't expect you do adopt this silly stance of "if it's two things, it's boolean". When you drive your car, do you turn the wheel in the true or false direction?
[04:04:33] <ski> whether to represent them persistent (possibly packing multiple bits into words) or ephemeral, is a more low-level concern. at a high level, it's still about representing one of two possible alternatives
[04:04:45] <absentia> imagine conflating the continuum with a set having two elements
[04:04:54] <ProfSimm> ski: what about gears, do you have 5 true gears and 1 false gear?
[04:05:02] <phogg> absentia: s/slings.*/quirks and features of buggy software.'
[04:05:13] <absentia> phogg: i was never a good poet
[04:05:40] <phogg> absentia: no one ever accused me of that, either, but maybe between us we can get a D
[04:06:00] <ProfSimm> ski: I suppose if at a bar if they ask you "coffee or tea" you'd prefer whichever one is the "true"
[04:06:15] <ProfSimm> ski: anyway you get the point
[04:06:18] <ProfSimm> Two things != boolean
[04:06:32] <adder> yes professor
[04:06:43] <adder> what class is this again
[04:06:48] <absentia> sophistry 443
[04:06:53] <ProfSimm> If boolean was about being "two" they'd be called binary
[04:07:08] <ProfSimm> Computers are binary, they're not boolean
[04:07:22] <ski> i don't really agree with "if it's two things, it's boolean". but for both booleans and bits, we have "true" vs."false", "on" vs."off", "one" vs. "zero"
[04:07:50] <ProfSimm> ski: I know as programmers we're very used to zero being false and one being true, but they're not
[04:07:59] <ski> neither booleans not bits have any particular provenance attached to them, like "overwrite" vs. "append", &c.
[04:08:12] <ski> or "empty" vs. "non-empty"
[04:08:54] <ProfSimm> ski: well booleans have some meaning attached to them. A test is made. Did the test pass = true. Did it not = false.
[04:09:04] <ProfSimm> ski: obviously not the case for any given bit
[04:09:10] <ski> ProfSimm : i agree with "Two things != boolean", but i still think of "boolean" and "bit" as basically the same thing (although with different emphasis)
[04:09:34] <ProfSimm> ski: well I understand why you think about them like that, but it's best to stop thinking that :/
[04:09:40] <ProfSimm> Bad habits. C and so on
[04:10:19] <PlanckWalk> Bloolean is basically a bit together with some semantics.
[04:10:22] <PlanckWalk> Boolean*
[04:10:35] <ProfSimm> Uhm.
[04:11:13] <ski> boolean logic/algebra (and classical logic) is all about the principle of bivalence, that either a (meaningful, declarative) statement is true, or it is false. aka "law/principle of excluded middle"
[04:11:28] <ski> (fwiw, i don't believe in bivalence, on a logical level)
[04:11:40] <absentia> heretic
[04:11:47] <ski> ty, kind sir
[04:12:07] <ProfSimm> ski: well it's an axiom, if you believe in it, you're correct, if you don't believe in it, you're also correct :P
[04:13:43] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Quit: WeeChat 3.4)
[04:13:43] <phogg> sri syadasti, nuf said
[04:13:45] <ProfSimm> Not all comparison/test operators fit into binary outcomes though. Classic case scenario, sorting needs three outcomes:  gt/lt/eq
[04:13:46] <absentia> this was a bitter historical debate
[04:13:51] <ProfSimm> Typically encoded as -1, 0, +1
[04:14:15] <ski> ProfSimm : anyway, part of the problem of booleans is that people plug in booleans in their data structure, and then connect their values to different ways of interpreting the remaining data, in a way that is not directly expressed in the language itself, but instead one is supposed to remember the valid ways to interact with the data, depending on the boolean
[04:14:35] <ProfSimm> And null coalescence is an example of a test operator with single outcome:   is not null or .... (nothing)
[04:14:47] <absentia> "stringly typed"
[04:14:55] <ski> (typical example is a boolean `present' flag, that tells whether you should consider the value of some other field as valid or otherwise to be ignored)
[04:15:34] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[04:15:38] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[04:15:50] <ProfSimm> ski: it's flawed, hence best to make enums super trivial to define ad-hoc, and typesafe, and not have boolean values imho
[04:16:02] <ski> (and this is an argument for using proper discriminated/tagged/disjoint union types / sum types / variant record types, including having a reasonable way to pattern-match on those)
[04:16:16] <ProfSimm> ski:  better to have ad-hoc open/close on/off and so on values, rather than a soup of true/false anonymous flags
[04:17:02] <ProfSimm> Yes
[04:17:03] <ski> simple `enum's are not enough for this (they only address the arbitrariness aspect of a boolean). you need sum types
[04:17:03] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:17:28] <ProfSimm> ski: well, I see those as synonyms
[04:17:46] <ProfSimm> ski: exchaustive match, is this what you're referring to
[04:17:49] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[04:17:50] <ProfSimm> exhaustivE*
[04:17:57] <absentia> hail discordia!
[04:17:57] <flakland> you remove booleans, someone will still find a way to use them, because it's fundamental concept
[04:18:15] <PlanckWalk> ... except it will be an ad-hoc piece of rubbish that doesn't work with any other code
[04:18:21] *** Quits: geeknix (~pi@2001:e68:5432:a291:c354:1aa:688f:1ab0) (Quit: WeeChat 2.3)
[04:18:26] *** Joins: Soni (~quassel@autistic.space)
[04:18:26] <absentia> a new kind of computer science
[04:18:27] <ProfSimm> flakland: I remove them precisely because 1) everyone things they are fundamental 2) they're not 3) end up abusing them
[04:18:28] <flakland> but don't let any of this spoil your #war_on_booleans
[04:18:32] <ProfSimm> thinks*
[04:18:32] <absentia> liberated from the dross of legacy computing
[04:18:53] <ski> "well booleans have some meaning attached to them." -- no. when i get the boolean, the test has already been made. from just the boolean, i can't discover what test was made, or how to interpret the boolean, without tracing back where the boolean came from. and the same is true for bits
[04:19:44] <flakland>  it's fundamental even in physics
[04:20:00] <ProfSimm> ski: that's not how CPUs do it actually and you know that probably. you 1) test first 2) the result is one of N states (not necessarily two)  3) you jump if <specific state>
[04:20:19] <flakland> why remov them, just to "feel good" about making something new?
[04:20:31] <absentia> uhh... is there a ternary jump instruction
[04:20:38] <absentia> jle, jne, jeq
[04:20:50] *** Joins: jazzy (~jaziz@user/jaziz)
[04:21:10] <ski> "well, I see those as synonyms" -- i guess they're synonyms, if you're thinking about what Rust calls `enum'. but in C,C++,Java,C#, an `enum' alternative can not carry an additional payload. Rust `enum's are sum/variant types
[04:21:33] <ski> flakland : "you remove booleans, someone will still find a way to use them, because it's fundamental concept" -- yes
[04:21:47] <absentia> literally all of math is built on booleans
[04:21:50] <absentia> maybe not all
[04:21:56] *** Quits: XV8 (~XV8@2601:5cb:c001:50::5524) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:21:56] <absentia> substantial portions of it
[04:22:17] *** Joins: pulse (~pulse@user/pulse)
[04:22:20] <absentia> how does propositional calculus even work otherwise
[04:22:30] <ProfSimm> I didn't eliminate booleans, serioulsy how many times do I say that
[04:22:33] <ProfSimm> Before it sinks in
[04:22:43] <ProfSimm> Whatever
[04:22:46] <perro_> sounds like you need something more concrete
[04:22:50] <perro_> cause smart peo-le aren't getting it
[04:22:54] <ski> ProfSimm : "exchaustive match" -- not really (although that's also useful). i'm talking about a pattern-match construct which may bind local variables to the parts of the alternative (or, in worst case, only assign the parts to locations ("variables")), and which can *nest* patterns
[04:22:58] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:24:03] <ski> (unfortunately, most more main-stream languages don't have proper pattern-matching .. although more languages are starting to provide some kind of support for it (sometimes unfortunately a bit confused))
[04:24:04] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[04:24:20] *** Joins: XV8 (~XV8@2601:5cb:c001:50::5524)
[04:24:46] <jamea> how to python draw text on dektop GetWindowDC(GetDesktopWindow);
[04:24:54] *** Joins: porton (~porton@2.55.5.40)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:25:54] <porton> Which terms to use to distinguish acquired (e.g. a file descriptor) and non-acquired (e.g. a file on disk) resources?
[04:26:29] <ski> ProfSimm : "that's not how CPUs do it actually" -- CPUs typically have instructions for manipulating individual bits of words .. as well as having status bits that you can branch upon (or perhaps use a jump table, if preferred). so they have support both for persistent and emphemeral bits/booleans
[04:28:15] <porton> Handle and resource?
[04:28:46] <porton> No, handle usually is just a pointer or a number.
[04:28:52] <ski> absentia : "How many is two?" by Andrej Bauer in 2005-05-16 at <http://math.andrej.com/2005/05/16/how-many-is-two/> mentions how the set of truth values doesn't necessarily have two values
[04:29:15] <ski> ("how does propositional calculus even work otherwise" -- it works fine, without insisting that every proposition is either true or false)
[04:30:37] <KillerWasp> look the ski!!! look in the ski!!!!!
[04:30:55] * ski glances around nervously
[04:31:14] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:31:36] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[04:31:50] <ProfSimm> ski: RISC processors lack a lot of those, and they're doing the right thing
[04:32:15] <ProfSimm> ski: and conversely, x86 might have an instruction to make you a latte
[04:32:34] * epony points at open architecture
[04:32:51] <epony> https://en.wikipedia.org/wiki/Open_architecture
[04:32:52] <bayaz> Title: Open architecture - Wikipedia 
[04:32:57] <epony> get it while it's hot
[04:33:02] <flakland> sounds like a hoax
[04:33:11] <epony> no u
[04:33:12] <absentia> i wish this site had tex or something
[04:33:46] <epony> the ISA is irrelevant, what you care for is open architecture and standards
[04:33:55] <KillerWasp> sky*
[04:34:31] <epony> with standardisation you get affordable pricing (competition, remember what that was?)
[04:34:53] *** Quits: mikrosis (~mikrosis@dynamic-046-114-170-099.46.114.pool.telefonica.de) (Quit: Connection closed)
[04:35:07] <epony> and software compatibility (remember how you did not have to pay for subscriptions?)
[04:36:09] *** Quits: porton (~porton@2.55.5.40) (Quit: Leaving)
[04:36:27] <KillerWasp> i get bored of playing the doom, and i realize that i waste all my day time in my life.... :(((
[04:36:39] <ProfSimm> epony: Apple saw your link and switched all their hardware to it
[04:37:24] <LjL> not many must remember what an open architecture is, considering how bad and short that WP article is ;(
[04:37:26] <epony> and then, "don't talk bullshit", you get all those points matching.. miraculously commodity computing becomes the de-factor dominant platform
[04:37:28] <epony> https://en.wikipedia.org/wiki/Commodity_computing#The_1980s_to_mid-1990s
[04:37:29] <bayaz> Title: Commodity computing - Wikipedia 
[04:37:30] <KillerWasp> where apple have open architecture???
[04:38:01] <epony> not after 1984
[04:38:06] <epony> Apple died
[04:38:16] <KillerWasp> epony: what?...
[04:38:28] <ProfSimm> Rumor is this is what they're doing after ARM
[04:38:45] <ProfSimm> Makes sense
[04:39:31] <KillerWasp> I'm going to pretend that Wikipedia is smoking a pipette and doesn't know what to write.
[04:40:05] <absentia> fascinating
[04:40:13] <epony> Apple are about 5-8% of all PCs sales, and about 10-12% of all phone sales, but they are not made by Apple, made abroad and just "branded" as Apple.
[04:40:22] <absentia> ski: so classical logic is in fact embedded inside intuitionistic logic?
[04:40:36] <epony> and those are laptops, on the server market Apple is -0%
[04:41:15] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[04:41:26] <absentia> suppose it means there "may" be truth values for propositions or atoms other than conventional T/F
[04:41:28] <epony> on the tower and desktop, Apple is.. 0.1% and declining
[04:43:13] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:8539:51ad:24c1:793)
[04:43:17] <absentia> although again
[04:43:36] <absentia> it appears that when we're interested in logics that are computable
[04:43:39] <absentia> we're restricted to a set of two values
[04:44:09] <absentia> three
[04:44:19] <epony> negative and positive integers ;-)
[04:44:20] <absentia> hrm
[04:46:05] <absentia> ... two
[04:46:07] <epony> https://en.wikipedia.org/wiki/Two%27s_complement#Most_negative_number
[04:46:07] <bayaz> Title: Two's complement - Wikipedia 
[04:48:16] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[04:48:40] <ski> absentia : constructive math is a generalization of classical math. everything provable in intuitionistic logic is also provable in classical logic
[04:49:57] <adder> anyone pronounce 'deque' as 'deck'?
[04:50:07] <phogg> adder: no, never
[04:50:08] <PlanckWalk> Yes
[04:50:22] <phogg> until I saw that video someone linked earlier I would never have thought anyone would do that
[04:50:29] <phogg> deque is probably "de-queue", but spelt wrong
[04:50:38] <Decker> 'de q! de q!' 
[04:50:53] <CoJaBo> Everyone I work with pronounces it deck, but I can't avoid always reading it as de-Q lol
[04:50:56] <PlanckWalk> It was deliberately named to be pronounced like "deck"
[04:51:09] <phogg> CoJaBo: what do they use it to mean? It's not English.
[04:51:19] <PlanckWalk> Double Ended QUEue
[04:51:19] *** Joins: arch-angel (~quassel@user/arch-angel)
[04:51:26] <Decker> do you get enck and deck?
[04:51:30] <CoJaBo> Yeh, the data structure type
[04:51:37] <phogg> weird ass name for that structure
[04:51:38] <PlanckWalk> But also like a deck of cards that you can add/remove cards to the top or bottom.
[04:51:44] <adder> yeah I just saw that pronunciation in The C++ Programming Language 
[04:51:48] <phogg> maybe this comes of me having zero formal compsci education...
[04:51:53] <adder> I can't help it but say "dekyoo"
[04:52:25] <ski> absentia : "suppose it means there \"may\" be truth values for propositions or atoms other than conventional T/F" -- in some vague sense, yes. it's as if the set of truth values is a "fuzzy continuous". the only elements you can "point" at are falsum and verum. but you can't exclude the presence of more than those two (which is what bivalence is about)
[04:52:25] <CoJaBo> One of our apps uses a lot of those duck-ways (which is how I will henceforth be pronouncing this)
[04:52:32] <phogg> I pronounce "double ended queue" as "list", because further differentiation of the concept is not useful.
[04:52:52] <PlanckWalk> Eh, no.
[04:53:01] <absentia> bivalence <=> excluded middle?
[04:53:22] <PlanckWalk> You can implement a deque using a list, but a list isn't generally a deque
[04:53:24] <absentia> ah yes
[04:53:32] <PlanckWalk> (nor vice versa)
[04:53:43] <absentia> wee-chay werr-sa
[04:53:55] <phogg> PlanckWalk: what makes them different?
[04:54:21] <PlanckWalk> The operations that they must support, as well as usually bounds on performance of those operations.
[04:54:40] <phogg> the bounds of performance are an implementation detail and not important to the fundamentals of the data structure
[04:54:53] <PlanckWalk> As I said, *usually*
[04:54:56] <phogg> the operations they must support are, surely, no more or less than push/pop/shift/unshift
[04:55:12] <PlanckWalk> Yes, and lists don't necessarily support those.
[04:55:22] <phogg> if you don't support those you haven't got a list
[04:55:37] <PlanckWalk> Also lists usually support other operations
[04:55:46] <PlanckWalk> (But they vary a lot more)
[04:55:56] <phogg> other operations are *may* support, not *must* support
[04:56:04] <PlanckWalk> Yep.
[04:56:29] <ski> absentia : there's an interesting approach to analysis (Synthetic Differential Geometry), where you consider the subset ⌜D₁ = {d ∈ ℝ | d² = 0}⌝. with just intuitionistic logic, you can't prove ⌜D₁ = {0}⌝. ⌜D₁⌝ is the set of (first-degree) infinitesimals (around ⌜0⌝). next you introduce an axiom saying that any function ⌜f : D₁ → ℝ⌝ has a graph that is large enough to 
[04:56:35] <ski> have a slope (in addition to an "⌜y⌝-intercept", a height), but not large enough to bend (that's what higher-order infinitesimals are for)
[04:56:41] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[04:56:44] <PlanckWalk> If you equate the terms, then you're saying that lists *must* support the deque operations, and every deque must support the list operations.
[04:56:57] *** Joins: flakland (~flaknet99@32.211.211.39)
[04:57:00] *** Quits: ejjfunky (~ejjfunky@125.164.23.55) (Ping timeout: 240 seconds)
[04:57:01] <PlanckWalk> Which is not what those terms mean.
[04:57:09] <phogg> PlanckWalk: I'm saying that "double ended queue" is just a slow way of saying "list"
[04:57:23] <PlanckWalk> I know
[04:57:29] <PlanckWalk> That is indeed what you're saying.
[04:57:33] <PlanckWalk> You're just wrong :)
[04:57:43] *** Joins: TomVoid (~void@84.67.132.76)
[04:58:03] <phogg> All I read is "I use an incorrect definition of list"
[04:58:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[04:58:25] <phogg> and here by 'incorrect' I mean 'not functionally useful' more than invalid.
[04:58:36] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 240 seconds)
[04:59:00] <absentia> ski: how is D1 anything other than 0? or do you mean in intuitionistic logic you are forced to consider that set of infinitesimals
[04:59:01] <ski> i suppose the "folklore" implementation of dequeues in terms of lists would use two lists (?)
[04:59:06] <absentia> what does it mean to bend
[04:59:16] <absentia> s/0/{0}
[04:59:26] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[05:00:09] *** Joins: u0_a81 (~hexingb@2409:8900:2940:1cc8:8102:b0e8:87c:4a0c)
[05:00:11] <ski> absentia : the graph of the function is an "infinitesimally long line segment". it has a slope. if it could bend, then it could have a second derivative that's nonzero
[05:00:30] <epony> https://en.wikipedia.org/wiki/Queue_(abstract_data_type)#Queue_implementation ; https://en.wikipedia.org/wiki/Double-ended_queue "In computer science, a double-ended queue (abbreviated to deque, pronounced deck, like "cheque") is an abstract data type that generalizes a queue, for which elements can be added to or removed from either the front (head) or back (tail)."
[05:00:30] <bayaz> Title: Queue (abstract data type) - Wikipedia 
[05:00:30] <bayaz> Title: Double-ended queue - Wikipedia 
[05:00:36] <ski> absentia : "or do you mean in intuitionistic logic you are forced to consider that set of infinitesimals" -- yes
[05:00:37] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 256 seconds)
[05:02:00] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[05:02:12] * ski . o O ( "Synthetic Differential Geometry" by Anders Kock in 2006 (2nd ed.) at <https://math.au.dk/~kock/sdg99.pdf> )
[05:02:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[05:02:36] *** Quits: u0_a8 (~hexingb@2409:8902:78c2:bc3f:5dc4:26ba:a149:1a67) (Ping timeout: 240 seconds)
[05:02:40] <ski> (first chapter starts slower)
[05:03:28] <KillerWasp> Nobody wants a bitten apple.
[05:03:42] <absentia> fucccccckkk
[05:03:56] <flakland> kWasp what if it's signed by mr. newton himself?
[05:04:29] <epony> https://en.wikipedia.org/wiki/Ring_buffer#Uses
[05:04:29] <bayaz> Title: Circular buffer - Wikipedia 
[05:04:35] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:04:59] *** Joins: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173)
[05:05:50] *** Joins: vysn (~vysn@user/vysn)
[05:08:10] <KillerWasp> epony: I'd say it's pretty down.
[05:08:35] *** Joins: trevors (~trevors@user/trevors)
[05:11:04] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:11:22] <epony> open architecture is the main point behind micro-computers success, since the early 1980ies up to the foreseable future
[05:12:43] <flakland> you mean like, USB?
[05:13:18] <epony> https://en.wikipedia.org/wiki/Mainboard_form_factor#Overview_of_form_factors
[05:13:19] <bayaz> Title: Computer form factor - Wikipedia 
[05:13:41] <flakland> ATX power supply standard?
[05:14:51] <epony> the other point is standardisation, and for the open architecture, it's system board form factors and internal buses and periphery interfaces
[05:15:12] <epony> USB is a fairly late external periphery bus
[05:15:19] <flakland> it's not late
[05:15:50] <flakland> seems to be more commonly used than ATX psu's too
[05:16:15] <jamea> python friends    pyautogui.keyDown('shift')     pyautogui.press('left')    after press left keyb the Shioft continue pressed?
[05:16:17] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[05:16:17] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[05:16:32] <epony> it is, quite late.. so not part of the BIOS system but uses external / loadable payload modules which is a whole "host" (pun intended) of problems
[05:16:47] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[05:16:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[05:16:53] <flakland> quite late, over 2 decades old
[05:17:09] <epony> yeah, it sucks and blows
[05:17:13] <flakland> idk what do you consider "a late modell computer"
[05:17:21] <flakland> pentium II ?
[05:17:44] <epony> USB was on PC'97 computers already.
[05:17:50] *** Quits: TomVoid (~void@84.67.132.76) (Quit: Leaving)
[05:18:27] <epony> but that's quite late in the PC development, like missing the fist stage of the 32bit computing completely
[05:18:44] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[05:19:29] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[05:19:32] <epony> it's just an external serial bus and set of interfaces.. not really part of open architecture, so does not contribute to the significance of the micro-computer adoption
[05:19:52] <flakland> what makes PCIe more open than USB?
[05:20:40] <epony> PCI is an internal periphery bus, if you read that article about open architecture, you would not be asking naive questions
[05:20:45] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[05:20:56] <flakland> you can't use pci for external devices?
[05:20:57] <flakland> lol
[05:21:38] <epony> flakland, any other profound observation for the moment? ;-)
[05:21:41] <flakland> plenty of laptopts use USB for internal IO connection
[05:21:45] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:21:45] <flakland> 8-)
[05:21:58] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 260 seconds)
[05:22:10] <flakland> any more wikipedia spam links?
[05:22:15] <epony> plenty of head bumps in child age too, should not stop you from entering the mobile computing epoch
[05:22:21] <epony> flakland, you suck.
[05:22:30] <flakland> comeup with interesting spam ifyou don't like it
[05:22:37] <epony> flakland, fuck off ;-)
[05:22:45] <flakland> no u ;^)
[05:23:14] <Mangy_Dog> https://twitter.com/MD_Builds/status/1495577120730456069
[05:23:27] <KillerWasp> 🍰
[05:23:45] <vysn> https://tenor.com/view/yugioh-no-u-no-you-reverse-uno-uno-gif-22508660
[05:23:45] <bayaz> Title: Yugioh No U GIF - Yugioh No U No You - Discover & Share GIFs 
[05:25:09] <epony> flakland, for your slow reading capacity "Open architecture is a type of computer architecture or software architecture intended to make adding, upgrading, and swapping components with other computers easy."
[05:26:43] <absentia> that's bad for job security
[05:26:48] <flakland> like USB, rite?
[05:26:51] <flakland> amirite?
[05:26:56] <flakland> or no
[05:27:08] <absentia> https://www.chatsworth.com/chatsworth/media/assets/ektronarchive/uploadedImages/Files/BLOG-cablemanagement4.jpg
[05:27:08] <bayaz> Type: image/jpeg Size: 41.7 kB 
[05:27:12] <absentia> this is what proper architecture looks like
[05:27:27] *** Joins: u0_a82 (~hexingb@103.37.140.45)
[05:27:47] *** Joins: TomVoid (~void@84.67.132.76)
[05:28:45] <epony> flakland, no
[05:28:59] <flakland> Y not?
[05:29:04] *** Quits: Cashlin (~hp@user/cashlin) (Quit: Konversation terminated!)
[05:29:32] <flakland> !Y?
[05:29:46] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[05:30:05] <epony> cause it's not enough to make an open architecture
[05:30:12] *** Quits: u0_a81 (~hexingb@2409:8900:2940:1cc8:8102:b0e8:87c:4a0c) (Ping timeout: 250 seconds)
[05:30:16] <flakland> what is it missing?
[05:30:32] <vysn> Mangy_Dog: That looks very impressive
[05:30:39] <Mangy_Dog> thanks
[05:31:11] <flakland> because it's not on the wikipedia list?
[05:31:50] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[05:32:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:32:16] <epony> flakland, you're disqualified from making conclusions for now ;-) your curvature is showing
[05:32:39] <flakland> i got tired of waiting for a response so i had to fill in the blank myself
[05:32:44] *** Joins: pulse (~pulse@user/pulse)
[05:32:52] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[05:33:32] <flakland> seems to be the most probably answer, considering the trend i've noticed
[05:33:36] *** Joins: Fauto_ (~dante@gateway/tor-sasl/filohuhum)
[05:33:48] <epony> flakland, you sound tired indeed
[05:34:00] <flakland> impossible!
[05:34:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[05:35:15] <epony> yeah, computers without internal periphery buses are not open architecture and not suitable for server and workstation (business computing)
[05:36:21] <beaky> i like the name bus i imagine like schoolbuses or transport tycoon
[05:36:32] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[05:36:32] <flakland> which computer is that epony?
[05:36:35] <beaky> but bus really means wires
[05:38:11] <edgar-rft> there are travelling little automobiles in your computer
[05:38:19] <epony> flakland, see ARM appliances are not suitable for servers  https://en.wikipedia.org/wiki/Server_Base_System_Architecture
[05:38:19] <bayaz> Title: Server Base System Architecture - Wikipedia 
[05:38:47] <flakland> because why, you can't plug an nvidia gpu into it?
[05:39:26] <epony> and the Apple computers are just money wasted for toys, not used for commodity computing
[05:40:00] *** Quits: Mangy_Dog (~Mange@user/mangy-dog/x-7397214) (Ping timeout: 256 seconds)
[05:40:33] <epony> cause they fail on "open architecture" and internal peripheries and standardisation and compliance with server and workstation criteria
[05:40:58] <epony> pretty lame ;-) after 44 years of attempts to make computers
[05:41:25] <epony> 2 models and gone into disuse since 1984
[05:43:01] <flakland> how much power does your web server need to handle web transactions?
[05:43:11] <flakland> you need terraflops?
[05:43:43] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:44:37] <PlanckWalk> Mine would function okay on kiloflops, probably.
[05:44:44] <edgar-rft> flakland: not if you have much time
[05:44:49] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[05:44:58] <epony> flakland, if you're serving TV dinner to your grandma, you can use the tablette
[05:45:16] <PlanckWalk> (Though I'm using "flops" as a proxy for just "instruction throughput")
[05:45:33] <PlanckWalk> (I don't think it does much floating point processing)
[05:46:00] <epony> but if you have 100 million grandmas waiting for their homepages to load up..
[05:46:43] <epony> your USB happy mac-mini is going to make a pretty small impact on the server market
[05:47:31] <flakland> what CPU?
[05:47:52] <flakland> those things are >4 cores i think
[05:48:13] <epony> what part of "not a business machine" is unclear ;-)
[05:48:35] <flakland> the part where it's based on some arbitrary undefined concept of an "open architecture"
[05:49:07] <epony> it's well defined
[05:49:20] <epony> since the larger mainframe and mini-computers
[05:49:39] <epony> machine buses are critical, with standardisation
[05:49:43] *** Quits: grogu (~quassel@user/grogu) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:49:58] *** Joins: grogu (~quassel@user/grogu)
[05:51:20] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[05:51:42] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[05:51:51] <epony> see for example the https://en.wikipedia.org/wiki/Unibus
[05:51:52] <bayaz> Title: Unibus - Wikipedia 
[05:51:58] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 272 seconds)
[05:52:02] <flakland> *of which USB is allegedly not a member
[05:52:23] <epony> USB is "not enough to make an open architecture"
[05:52:28] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 256 seconds)
[05:52:31] <flakland> allegedly
[05:52:46] <epony> with absolute certainty
[05:52:52] <flakland> we became aware of these allegations recently and our offices are investigating the claims
[05:53:08] <epony> flakland, you have no office
[05:53:13] <flakland> orly
[05:53:20] <epony> yep
[05:53:31] <flakland> dam
[05:53:45] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[05:55:29] <epony> https://en.wikipedia.org/wiki/Bus_(computing)#Minis_and_micros
[05:55:30] <bayaz> Title: Bus (computing) - Wikipedia 
[05:57:32] *** Joins: cheater (~Username@user/cheater)
[05:58:59] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[05:59:38] *** Joins: joev (~joev@user/joev)
[06:04:28] <epony> https://en.wikipedia.org/wiki/PCI_Express#PCI_Express_6.0
[06:04:29] <bayaz> Title: PCI Express - Wikipedia 
[06:04:31] *** Sauvin is now known as Vieillard
[06:04:50] *** Quits: TomVoid (~void@84.67.132.76) (Quit: Leaving)
[06:05:20] *** Quits: Hash (~Hash@hashsecurity.org) (Quit: https://hashsecurity.org)
[06:05:30] <epony> "Unlike previous PCI Express versions, forward error correction is used to increase data integrity and PAM-4 is used as line code so that two bits are transferred per transfer. With 64 GT/s data transfer rate (raw bit rate), up to 252 GB/s is possible in ×16 configuration."
[06:05:45] *** Joins: Hash (~Hash@hashsecurity.org)
[06:05:53] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[06:06:25] *** Joins: TomVoid (~void@84.67.132.76)
[06:06:25] *** Joins: justAstache (~justache@user/justache)
[06:09:47] *** Quits: Fauto_ (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[06:11:07] *** Joins: llh (~UPP@user/llh)
[06:11:08] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[06:11:38] *** Joins: junebug (~junebug@2600:1700:3db0:2540:9da7:df1f:2ac:6bb2)
[06:11:43] <beaky> hello how do i measure how many cycles or nanoseconds it takes for me to access ram
[06:11:51] *** Joins: Fauto_ (~dante@gateway/tor-sasl/filohuhum)
[06:12:19] *** Quits: Fauto_ (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[06:13:31] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:6d82:ff00:10df:f4af)
[06:14:09] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[06:14:29] <epony> flakland, the other (opposite) complaint is more popular, that wikipedia inserts apple mentions as advertisements everywhere it can even without relevance, because it simply is quite unpopular
[06:15:19] <epony> (in short: apple was and still is unpopular in computer hardware and software)
[06:16:34] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[06:16:47] *** Joins: flakland (~flaknet99@32.211.211.39)
[06:17:40] <epony> beaky, you know it, per CPU / chipset combination as micro-architecture and ISA (instruction set) specification, instructions have cycles to complete and you know the machine clock
[06:18:17] *** Quits: xff0x (~xff0x@2001:1a81:5301:6400:b772:c1d8:3c5d:2da4) (Ping timeout: 240 seconds)
[06:18:28] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[06:18:41] *** Joins: flakland (~flaknet99@32.211.211.39)
[06:19:20] <beaky> that measures instruction latency but i gotta measure ram access latency
[06:20:22] *** Joins: xff0x (~xff0x@2001:1a81:5339:f000:1ec4:ce6f:8558:a9e8)
[06:20:50] <absentia> i suppose you could go into CAS latency and all that shit
[06:20:58] <absentia> or acquire an atomic clock
[06:21:44] <epony> CPUs have counters, but you know these details per CPU/chipset combination
[06:22:24] *** Joins: src (~src@user/src)
[06:22:30] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 256 seconds)
[06:22:34] <epony> that's why high performance programming targets the hardware as specific combination, not some virtual machine
[06:22:39] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[06:22:54] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[06:23:08] <epony> some CPUs have memory controllers internal (on die)
[06:23:28] <beaky> yes gotta have high performance programmin for sick speeds
[06:23:36] <beaky> finally a usecase for atomic clocks then
[06:25:00] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[06:25:13] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[06:26:22] <epony> what you need to know is, typically from CPU cache fetches are 2-4 cycles, from memory about 20-200 cycles, and from SSD / HDD it's about 100-1000x more
[06:28:29] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[06:28:43] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[06:29:09] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[06:30:33] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[06:32:01] <beaky> i gotta measure against different access patterns and stuff
[06:32:16] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[06:32:25] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[06:32:39] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[06:33:56] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:34:06] <epony> https://en.wikipedia.org/wiki/Time_Stamp_Counter#Use_in_exploiting_cache_side-channel_attacks
[06:34:07] <bayaz> Title: Time Stamp Counter - Wikipedia 
[06:34:47] *** Joins: wutno (~muh.ident@installgentoo.net)
[06:35:00] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Client Quit)
[06:35:13] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[06:35:30] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Client Quit)
[06:35:58] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[06:37:39] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[06:38:44] *** Joins: password (~password8@user/password2)
[06:38:50] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 272 seconds)
[06:40:45] <beaky> nice ill try tiem stamp counter hten
[06:42:26] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[06:44:02] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[06:45:15] *** Quits: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173) (Quit: Night!)
[06:46:57] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:50:55] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[06:51:13] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[06:51:43] <beaky> besides cpuid what other serializing instructions can i use with rdtsc
[06:56:41] *** Joins: trevors (~trevors@user/trevors)
[07:00:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:03:48] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:04:25] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[07:04:58] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[07:05:28] <Decker> https://gist.github.com/d3x0r/81e257e76888b2275a587b69765e65d1#file-testmat-js-L103 would be nice if gist would show wider code ... this line has just one more expression; and the horizontal scroll is much further down so you wouldn't even really know
[07:05:29] <bayaz> Title: Test 4D matrix multiplecations (really axis-angle operations) 
[07:06:32] <beaky> gotta stick to 72 columns wide
[07:07:25] *** Joins: Azem (~haise01@user/haise01)
[07:07:31] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[07:09:27] <sonny> I'm convinced that you need a von neuman style language to implement a HAL. After that, any language is suitable for developing the OS.
[07:11:08] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 272 seconds)
[07:11:26] <epony> sonny, that sounds incorrect terminology
[07:12:10] <absentia> von neuman style
[07:12:14] <absentia> is that a kind of seasoning
[07:12:55] <epony> "HAL"
[07:13:10] <sonny> hardware abstraction layer
[07:13:16] <epony> yeah, what is that? ;-)
[07:13:20] <epony> magic layers
[07:13:55] <sonny> it couldn't be any more self descriptive
[07:14:36] <flakland> they say 'von' is german lang surname but von neumann was martian
[07:15:27] <epony> https://en.wikipedia.org/wiki/HAL_(software)#Implementations_and_obsolescence
[07:15:28] <bayaz> Title: HAL (software) - Wikipedia 
[07:17:14] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[07:17:32] *** Joins: amigojapan (uid86330@id-86330.helmsley.irccloud.com)
[07:17:36] <sonny> linux distributions don't like their HAL implementation ... next
[07:17:48] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[07:18:37] <epony> it's just not called HAL ;-)
[07:18:40] <epony> https://en.wikipedia.org/wiki/Hardware_abstraction#In_operating_systems
[07:18:40] <bayaz> Title: Hardware abstraction - Wikipedia 
[07:19:45] <sonny> what am I to look at?
[07:20:26] <epony> the "any language" part is missing, indeed
[07:21:04] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Read error: Connection reset by peer)
[07:21:05] *** Quits: newwebdev13 (~newwebdev@78.135.91.153) (Quit: Leaving)
[07:21:43] <epony> https://en.wikipedia.org/wiki/Systems_programming
[07:21:44] <bayaz> Title: Systems programming - Wikipedia 
[07:21:49] <sonny> what do you want, links to all the operating systems made in a high level language?
[07:22:01] <sonny> I'm sure you're quite capable on your own
[07:22:01] *** Joins: jazzy2 (~jaziz@user/jaziz)
[07:22:13] <epony> a more realistic claim
[07:22:29] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[07:22:34] <epony> the above is obviously faulty on a number of levels
[07:22:55] <amigojapan> Good afternoon
[07:22:55] <epony> you have to find a "non-neumann" style language first
[07:22:59] <sonny> well, it's not obvious to me, so explain
[07:23:47] <flakland> not the dreaded E word!!
[07:23:52] <epony> it's obvious, you can't program operating systems in application programming languages
[07:24:03] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[07:24:18] *** Quits: TomVoid (~void@84.67.132.76) (Quit: Leaving)
[07:24:27] <epony> you lack tooling, despite your best wishes to do so, you can't so you use system programming languages
[07:24:39] <sonny> https://en.wikipedia.org/wiki/Universal_Turing_machine#Stored-program_computer
[07:24:39] <bayaz> Title: Universal Turing machine - Wikipedia 
[07:24:41] <sonny> happy?
[07:25:18] <epony> is that a fancy attempt at selling more paper tape ;-)
[07:25:28] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 250 seconds)
[07:25:36] <epony> no, of course not, your previous claim is cancelled
[07:25:42] <amigojapan> To make an OS you need a compiled language. And it needs to access pointers and direct memory addresses
[07:26:08] <rindolf> amigojapan: hey, sup?
[07:26:22] <amigojapan> Hey rindolf 
[07:26:27] <epony> https://en.wikipedia.org/wiki/System_programming_language#Major_languages
[07:26:28] <bayaz> Title: System programming language - Wikipedia 
[07:26:36] *** Quits: flipchan (~filip@188-169-255-31.dsl.utg.ge) (Ping timeout: 240 seconds)
[07:27:11] <rindolf> amigojapan: sup?
[07:27:20] <epony> now see the Apple marketing spamming again.. Swift is not suitable for OS development
[07:27:26] <sonny> lack of tooling is why I said a HAL first
[07:27:31] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[07:27:35] <epony> we can also arguably cut out Rust from that too
[07:27:59] <amigojapan> rindolf: the sky is up
[07:28:17] *** Joins: Tech_8 (~Tech_8@24.51.61.131)
[07:28:25] <epony> this "HAL" idea is some DOS/WIN driver branding
[07:28:29] <amigojapan> Hi Tech_8 
[07:28:45] <Tech_8> Hello amigojapan
[07:29:27] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:8539:51ad:24c1:793) (Read error: Connection reset by peer)
[07:29:40] <amigojapan> epony: that list does not seem to mention assembly language
[07:29:47] <epony> also Go is not suitable for OS development ;-)
[07:30:00] <flakland> why not?
[07:30:01] <sonny> you can't cut any language anyways, you can't proove it is not possible to make an OS in it
[07:30:07] <epony> it lists C, so that's like Assembler
[07:30:28] <amigojapan> Ok
[07:30:53] <sonny> here, an OS in golang https://github.com/mit-pdos/biscuit
[07:30:54] <bayaz> Title: GitHub - mit-pdos/biscuit: Biscuit research OS 
[07:31:30] *** Joins: panella32 (~panella32@138.199.31.193)
[07:31:36] <flakland> no sonny thats impossible i was assured go was not suitable for OS development
[07:31:38] <epony> does it have more than 2 users ;-)
[07:31:41] <sonny> womp womp, someone was actually prepared today
[07:31:43] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[07:31:54] <sonny> flakland: oh right
[07:32:00] <rindolf> amigojapan: If Chuck Norris asks you “What's up?” and you answer it literally, then he will club you senseless with all the volumes of the Oxford English Dictionary, and all the servers hosting en.wiktionary.org, to teach you a lesson.
[07:32:56] <epony> a club is a baton type of weapon (stick), not stone tablet (book)
[07:33:04] <panella32> a website tries to encode an imput string and I can't get it. "a" becomes "61000000" and "1" becomes "31000000" Any idea what is it?
[07:33:42] <amigojapan> rindolf: I will eat Chuck Norris up and chew him out
[07:34:14] <panella32> let me try "a1" first
[07:34:30] <sonny> might be ascii
[07:34:46] <panella32> 61310000
[07:34:50] <panella32> for a1
[07:35:00] <rindolf> amigojapan: he is mortally poisonous... ;]
[07:35:19] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[07:35:29] <sonny> no, it's not ascii
[07:35:51] *** Joins: u0_a83 (~hexingb@2409:8900:2940:2f8f:3d7f:34ad:c1b9:d82f)
[07:36:02] *** Joins: joev (~joev@user/joev)
[07:36:16] <panella32> sonny let me know please if you have any specific input you have in mind to test
[07:36:35] <sonny> no clue, sorry
[07:36:42] <amigojapan> rindolf: I am inmune tu pasión. I have drank Mexico city tap water
[07:36:49] <panella32> no problem 
[07:37:19] <sonny> quick, can anyone do cryptanalisis?
[07:37:46] <rindolf> amigojapan: s/pasion/poison/
[07:37:48] <flakland> you could, then you refresh the page to find the encoding scheme is dynamic
[07:38:00] <sonny> oh :/
[07:38:14] <amigojapan> Ty rindolf 
[07:38:28] *** Quits: u0_a82 (~hexingb@103.37.140.45) (Ping timeout: 250 seconds)
[07:38:41] <smallville7123> "GrContext::resetContext function is resetting opengl state to prevent any problems if the client application has changed any opengl state. This works great. Is there a way to restore applications opengl state or roll back when skia has finished its work?"
[07:39:05] *** Quits: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Quit: Leaving)
[07:39:07] <smallville7123> didnt he just answer his own question? "GrContext::resetContext function is resetting opengl state to prevent any problems if the client application has changed any opengl state"
[07:39:27] <rindolf> amigojapan: and nobrony can withstand Chuck
[07:40:28] <amigojapan> rindolf: I take up the challenge
[07:41:32] <epony> you have to see dolf in the johnny mnemonic film to know what you must withstand
[07:42:19] <absentia> I WANT
[07:42:21] <absentia> ROOM
[07:42:23] <absentia> SERVICE
[07:42:44] <rindolf> amigojapan: \o/ «Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.»
[07:43:38] <epony> chuck is like.. a 5th grader canadian ninja
[07:43:53] *** Joins: u0_a84 (~hexingb@103.37.140.35)
[07:44:16] <madprops> are there different algorithms to calculate audio's volume? it seems like reducing to 70% on some player is not the same as 70% on another player
[07:44:28] *** Joins: u0_a8 (~hexingb@2409:8900:2940:23ac:ed56:ab33:bed8:cfe9)
[07:44:36] <amigojapan> rindolf: gambling addict
[07:44:50] <norias> madprops: i think it should be logaritmic
[07:45:03] <epony> linux audio is a horror story
[07:45:19] <rindolf> amigojapan: https://www.shlomifish.org/Files/files/video/Bicycle%20Repairman%20-%20Monty%20Python's%20The%20Flying%20Circus-U01xasUtlvw.mp4
[07:45:20] <bayaz> Type: video/mp4 
[07:45:29] <norias> epony: seems to work for me
[07:46:25] <flakland> how can that be e-pony, its based on open architecture
[07:46:37] *** Quits: u0_a83 (~hexingb@2409:8900:2940:2f8f:3d7f:34ad:c1b9:d82f) (Ping timeout: 240 seconds)
[07:46:58] *** Quits: Tech_8 (~Tech_8@24.51.61.131) (Quit: Client closed)
[07:47:08] *** Henry_The_Longsh is now known as HenryTheLongshot
[07:47:15] <epony> https://en.wikipedia.org/wiki/Advanced_Linux_Sound_Architecture
[07:47:15] <bayaz> Title: Advanced Linux Sound Architecture - Wikipedia 
[07:48:12] *** Quits: u0_a84 (~hexingb@103.37.140.35) (Ping timeout: 240 seconds)
[07:48:17] *** Joins: Guest1680 (~blahboyba@c-67-161-97-9.hsd1.wa.comcast.net)
[07:48:25] <epony> your HAL is nowhere to be found on this drawing  https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Linux_API.svg/1280px-Linux_API.svg.png
[07:48:25] <bayaz> Type: image/png Size: 111.5 kB 
[07:48:31] *** Joins: dsrt^ (~dsrt@50.233.120.162)
[07:49:24] <flakland> theres more than one hardware abstraction in linux for audio
[07:50:15] <epony> madprops, check if they are not getting mixed in or controlling own levels instead  https://en.wikipedia.org/wiki/Softvol
[07:50:16] <bayaz> Title: Softvol - Wikipedia 
[07:50:43] <smallville7123> does anyone know how to use https://www.jetbrains.com/lp/compose-mpp/ as a plugin-architecture ?
[07:50:44] <bayaz> Title: Compose Multiplatform Framework 
[07:52:02] *** Joins: Gry (~quassel@botters/gry)
[07:52:02] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[07:53:21] *** Joins: Kremator (~Kremator@user/kremator)
[07:54:03] <amigojapan> rindolf: that was actually funny
[07:54:31] <epony> flakland, not to worry, you can still use apple-iances in your flat universe, they are just not used by other businesses that need open architecture computers for commodity computing and large scale computer services provisioning
[07:54:35] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 240 seconds)
[07:55:45] <flakland> ok cook up the apple sauce for me
[07:55:52] <flakland> thx ephony
[07:56:19] <epony> flakland, feck, even apple services eye-"cloud" is using.. microsoft and amazon operated server facilities
[07:57:02] <rindolf> amigojapan: \o/
[07:57:06] <flakland> and then?
[07:58:05] <Guest1680> I'm looking at a lesson in js and something doesn't make sense (I don't see it in the code).. https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself  <--  I understand the usefulness of inheritance (in this example they are showing how a function that appears in more than one object can be pulled out into 
[07:58:06] <bayaz> Title: 
[07:58:11] <Guest1680> a parent object) -- what I don't see (in the code) is anything that indicates a tie between the children objects and the parent (Animal.prototype). For example, in C++ the inheriting object has code in it that explicitly ties it to the partent it is inheriting from -- in C++ Bird and Dog might each look mor like class Bird : public Animal and class Dog : public Animal   I also know there is a 
[07:58:16] <absentia> no
[07:58:17] <Guest1680> class keyword in the latest javascript but I am not talking about that either. What I'm saying is (it seems to me) there should be some code in each of the children that ties back to that parant (in the example at that link I might expect to see the word "Animal" somewhere in the code of Bird and Dog. What am I missing?
[07:58:18] <absentia> no no non onnonononono
[07:58:22] <absentia> aaaaaaaaaaaaaa
[07:58:29] * absentia dives for his emergency whiskey
[07:58:34] <flakland> microsoft can't even distribute their own OS updates, why even mention such an incompetent organization?
[07:59:24] <epony> flatland, it's running on 95% of all PCs since 1995, more before that
[07:59:53] <flakland> only by your perverxse definition of "personal computer"
[07:59:58] <epony> on servers, Linux is the largest installation base
[08:00:25] <epony> flakelamb, you know.. these definitions are yours too
[08:00:32] <flakland> not really
[08:00:39] <epony> meeehehehe, sheeple
[08:00:45] <rindolf> flakland: ms has good stuff : https://en.wikipedia.org/wiki/Sturgeon's_law
[08:00:46] <bayaz> Title: Sturgeon's law - Wikipedia 
[08:01:14] <flakland> they bought something valuable at some point
[08:01:35] <flakland> monopoly guy law
[08:01:59] <epony> well, you can't just win contracts by being "openly gay"
[08:02:06] <epony> you need open architectures
[08:02:27] <epony> and standards compliance
[08:03:39] <epony> but, in all correctness of comparison, there is really not much difference between micro soft and app LE (light edition)
[08:04:02] <rindolf> flakland: also https://www.shlomifish.org/philosophy/culture/case-for-commercial-fan-fiction/indiv-nodes/be_communicative.xhtml
[08:04:03] <bayaz> Title: Commercial Real Person Fan Fiction (RPFs), crossovers and parodies as 2021 geek/hacker imperatives for revitalising the film industry (Full Version) - Be communicative 
[08:04:34] <absentia> yeah
[08:04:43] <absentia> in both cases, they're the ones doing the fucking
[08:04:47] <Kremator> hye guys, ion your experience, as a frontend webdev, which other dev field i could move into without being a compleete junior all over again?
[08:04:47] <epony> so, if there was no "gates" there would be "jobse" and if there was none of them, there would be someone else in the semitic investment organisations to take government orders
[08:06:23] <Kremator> epony, if there were none, maybe we would have never standardized the "PC" and we would be running all non-intercompatible computers
[08:06:33] <epony> cause these are "financialised" markets, not even software vending, just business and consumer sectors for providing a "platform" to host and run applications
[08:06:52] *** Quits: password (~password8@user/password2) (Ping timeout: 272 seconds)
[08:06:52] <epony> Kremator, the standardisation ALWAYS happens
[08:06:59] <epony> it's not because of software
[08:07:44] <absentia> imagine thinking either gates or jobs have done anything for standardization
[08:07:50] <absentia> is IE 6 really that long ago
[08:07:50] <epony> it's because of businesses and economic and political pressure and efficiency that elliminates all failures and defective designs over time and large scale international competing manufacturing
[08:07:57] <rindolf> Kremator: try blogging
[08:08:02] <absentia> lmao
[08:08:04] <norias> rindolf: harsh.
[08:08:35] <norias> Kremator: I honestly don't really know this - what does a front end webdev do?
[08:08:36] <epony> the incompatible computers are called app-liencies
[08:08:51] <Kremator> norias, depends on the client, but normally just shit
[08:08:55] <rindolf> Kremator: or youtuberring
[08:09:07] <Kremator> rindolf, im not a people's person :)
[08:09:19] <rindolf> Kremator: y
[08:09:22] <epony> see rindolf here made hundreds of monetary tokens with his blogging
[08:09:29] <norias> Kremator: ok. that was useful.
[08:09:40] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[08:09:47] *** Guest1680 is now known as blahboybaz
[08:10:03] <Kremator> norias, fr, a frontend dev do interfaces mostly, CRUD apps that jsut connect to the backend code which is the one htat handles the logic
[08:10:20] <rindolf> Kremator: yu can become one
[08:10:35] <flakland> we believe in you kremator
[08:10:57] <norias> Kremator: so... that's like html, css and javascript?
[08:11:19] <Kremator> absentia, i kinda disagree, although the obviouslly pieces getting cheaper contributed to it, the fact that all "IBM x86 compatible" computer came with a single OS that all ran the same programs helped tremendously to cement MS as a monopoly
[08:11:34] <Kremator> norias, and in higher levels, React, angulars, Vue, etc
[08:11:55] <norias> Kremator: and those are frameworks, right?
[08:11:59] <Kremator> yep\
[08:12:12] <norias> and that's what you do?
[08:12:19] <Kremator> Yes, daily
[08:12:20] *** Joins: u0_a81 (~hexingb@103.37.140.35)
[08:12:30] <norias> what else do you want to do?
[08:12:40] <norias> and why?
[08:12:45] *** Quits: panella32 (~panella32@138.199.31.193) (Quit: Textual IRC Client: www.textualapp.com)
[08:12:51] <norias> Wouldn't backend be the natural transition?
[08:13:04] <rindolf> Kremator: there is backend too
[08:13:05] <absentia> i suppose if you consider anticompetitive practice to yield a valid form of standardization
[08:13:07] <absentia> that could be true
[08:13:37] <epony> sonny, what you really meant to quote earlier is https://en.wikipedia.org/wiki/Middleware
[08:13:38] <bayaz> Title: Middleware - Wikipedia 
[08:13:41] <Kremator> norias, something that is not 100% dealing with ridiculous stupid UI stuff, "styling" interfaces, dealing with shitty JS by writting even shittier JS and that all the code is just hacks over hacks over hacks of unperformant transpiling
[08:13:43] <norias> absentia: isn't that how we get money?
[08:13:49] <absentia> norias: regrettably
[08:14:00] <flakland> yeah absentia its OPEN ARCHITECTURE, so you are open to boot any OS signed with microsoft keys or kick rocks
[08:14:06] <epony> that's the part that lifts you to the heights of "just any" language
[08:14:09] <rindolf> Kremator: also https://www.shlomifish.org/humour/bits/Emma-Watson-applying-for-a-software-dev-job/
[08:14:09] <bayaz> Type: application/xhtml+xml 
[08:14:13] <absentia> yeah i choose kick rocks
[08:14:17] <absentia> zero my drives and install linux
[08:14:19] <norias> Kremator: so why not backend?
[08:14:52] <epony> flakland, you're closed architecture though, in the embedded computing small form factor of non-standard and incompatible implementations
[08:14:55] <Kremator> norias, mostly because backend market is shrinking, these days the industry is moving towards Backend-as-a-service like firebase, 8base, etc
[08:15:17] *** Quits: u0_a8 (~hexingb@2409:8900:2940:23ac:ed56:ab33:bed8:cfe9) (Ping timeout: 240 seconds)
[08:15:19] <norias> that's interesting.
[08:15:30] <absentia> i... don't think the backend market is shrinking
[08:15:33] <flakland> oh no my DRM module is incompatible, i am unable to watch any OPENVIDEO's
[08:15:44] <flakland> thanks for the tip ephony
[08:15:51] <absentia> but then again it's never really clear what people mean by backend any way
[08:15:59] <epony> flakland, that makes you a really expensive but not very powerful computer-like consumer device
[08:15:59] <Kremator> absentia, maybe not shrinking but rahter transforming or evolving?
[08:16:00] *** Joins: u0_a82 (~hexingb@2409:8900:2940:30de:4d8:de36:c75f:690b)
[08:16:02] <absentia> do you extend that to ops and incident response?
[08:16:23] <norias> Kremator: what sort of stuff interests you? i feel like following stuff you are connected to makes sense
[08:16:23] <Kremator> absentia, no, ops and the like are another branch
[08:16:25] <absentia> what about a DBA
[08:16:28] <absentia> is that backend
[08:16:33] <Kremator> yes
[08:16:37] *** Joins: ejjfunky (~ejjfunky@125.164.19.196)
[08:16:43] *** Joins: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com)
[08:16:44] <ejjfunky0> MBA?
[08:16:47] <Kremator> but it is not mainly a backend developer
[08:16:50] <epony> flakland, my netbook is 20 Watt too
[08:16:56] <ejjfunky0> :P
[08:16:59] <epony> nothing to complain about
[08:17:20] <flakland> netbook isn't open architecture ephony
[08:17:25] <Kremator> epony, if you used a raspi you could shave yet another 15W is you really were that cheap of the elect. bill
[08:17:32] <ejjfunky0> no need backend/front end. Full stack everything.
[08:17:44] <absentia> yeah hold up while i fucking hand wrap a computer
[08:17:55] <Kremator> ejjfunky0, i would commit suicide before doign full stack
[08:18:05] <epony> Kremator, yeah but rpi are for kids who can't afford compact laptops
[08:18:05] <norias> Kremator: why?
[08:18:06] <rindolf> Kremator: «We can see similar progressions in other forms of media (e.g: Comics → Web comics → Captioned images (e.g: lolcats)). All that put aside, newer media does not completely eliminate the need for an older one, and while cuneiform is no longer usable, Jewish scribes (Sofrey SeTam) still write some religious manuscripts by hand, very slowly (and costly), because their quality canno
[08:18:06] <rindolf> t be high enough.» -- 
[08:18:38] <norias> Kremator: what's wrong with full stack?
[08:18:41] <absentia> i am going to stick my head in front of a 20 watt laser
[08:18:53] <ejjfunky0> they even have senior full stack data scientists doing the work of field employees and ceo. one man army!
[08:18:54] <Kremator> norias, because "fullstack" is a term made by the industry to hire a folk to do both frontedn and Backend development while only paying a single salary and being mediocre at both (since you cannot master either)
[08:19:09] <absentia> senior embedded full stack computer engineering architect
[08:19:13] <norias> ah, i see
[08:19:40] <rindolf> https://www.shlomifish.org/philosophy/philosophy/putting-all-cards-on-the-table-2013/indiv-nodes/departing_pope_about_twitter.xhtml
[08:19:41] <bayaz> Type: application/xhtml+xml Size: 3.0 kB 
[08:19:41] <ejjfunky0> Kremator, it's like hiring intern to do everyone's job.
[08:19:48] <Kremator> absentia, you needed to add "guru rockstart programmer, coffee code ninja"
[08:19:51] <epony> flakland, true, it has USB and Ethernet and courage jacks and SD card reader and video out and real storage that I can replace and wireless that works as a server for the local wifi clients.. but it's closed architecture indeed
[08:20:05] *** Quits: u0_a81 (~hexingb@103.37.140.35) (Ping timeout: 256 seconds)
[08:20:05] <Kremator> ejjfunky0, true
[08:20:08] <epony> it's like 10x cheaper than any Apple crap
[08:20:21] <flakland> e-phony OH so now you think usb is open-worthy
[08:20:27] <flakland> still prone to flip-floppage i see
[08:20:27] <epony> and works with all x86 software ;-)
[08:20:31] <flakland> need to tune your algorithm a bit
[08:20:37] <flakland> tighten up the graphics on level 3 
[08:20:47] <norias> Kremator: WebGL?
[08:20:59] <absentia> webgl is cool
[08:20:59] <Kremator> norias, whats up with WebGL?
[08:21:00] <epony> flakland, tighten up your own screws ;-)
[08:21:02] <absentia> i want to learn one day
[08:21:07] <norias> Kremator: you do that?
[08:21:11] <absentia> graphics is endless
[08:21:21] <epony> only Apple is limited
[08:21:24] <absentia> rekt
[08:21:28] <norias> I'm pretty sure WebGL is fairly close to OpenGL ES
[08:21:35] <norias> (minus shaders ?)
[08:21:36] <Kremator> norias, not really, thats reserve mostly for "web dev gaming indsutry" although there are certain niches around math/academia circle
[08:21:51] <flakland> webgl has shaders, roughgly equivalent to opengl ESD 2.0
[08:21:56] <flakland> GLES2.0
[08:21:57] <norias> oh really?
[08:22:00] <norias> neat
[08:22:05] <flakland> since like 2013ish
[08:22:12] * norias shrugs.
[08:22:15] <Kremator> yeah, WebGL is nice, you can do complex renders there
[08:22:18] <norias> Never messed with it.
[08:22:23] <Kremator> and it is not that power hungry IME
[08:22:26] *** Joins: panella32 (~panella32@138.199.31.193)
[08:22:39] *** Joins: u0_a83 (~hexingb@103.37.140.45)
[08:22:50] <norias> Kremator: why not do that?
[08:23:12] <Kremator> norias, i will take it into account
[08:23:21] <norias> webdev -> webgl -> opengl -> CUDA
[08:24:01] <epony> webdev -> web browser -> end of your career
[08:24:31] <ejjfunky0> epony, end of your career?
[08:25:07] <epony> yeah, have you seen anyone exit on the other side of the Office suites?
[08:25:31] <epony> it's like programming for "powerpoint"
[08:25:45] * epony dings the bell of decommission
[08:26:14] <sonny> tanget but I'm pretty impressed they managed to port office stuff to the web
[08:26:17] *** Quits: u0_a82 (~hexingb@2409:8900:2940:30de:4d8:de36:c75f:690b) (Ping timeout: 240 seconds)
[08:26:24] <Kremator> epony, i dont exactly get what you mean by "other side of the office suites" but definitwelly agree on the career progression
[08:26:36] <epony> ;-)
[08:27:04] <epony> tangentially, presentation programming should have been automated by now
[08:27:17] <epony> it's a large inefficiency
[08:27:18] <Kremator> idk dude i jsut dont want to deal with BS anymore, just styling, dealing with ridiculous demands, dealing with "we want this button specifically here with this animation" is killing me
[08:27:23] <absentia> we should do a double-blinded test
[08:27:32] <absentia> CEO "vision talk" vs. GPT-3 generated slide deck
[08:27:41] <InPhase> sonny: Some people just got OpenSCAD running with wasm in the browser.  It's getting much more viable to start porting things over.
[08:27:52] <epony> hahaha
[08:28:06] <sonny> InPhase wow
[08:28:20] <absentia> good
[08:28:20] <epony> next, some loonie will say the browser is an OS ;-)
[08:28:22] <sonny> and the office stuff was pre wasm
[08:28:28] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[08:28:43] <InPhase> sonny: And probably took a large team.  :)
[08:28:43] <absentia> i can't believe this is where we are going
[08:28:51] <InPhase> wasm is lowering the threshold for this sort of work.
[08:29:02] <epony> (heard that before for text editors and userland runtimes)
[08:29:11] <sonny> absentia don't worry just wait till my hobby os is done
[08:29:16] <norias> Kremator: sorry, man.
[08:29:24] <InPhase> sonny: Is it wasmos?
[08:29:33] <ejjfunky0> sonny, is it called Hobbit? :P
[08:29:35] <absentia> sonny: sure i'll try it out when i install hurd
[08:29:42] <sonny> no, it's going to target a risc processor
[08:29:48] *** Joins: toastloop (~toastloop@user/toastloop)
[08:30:02] <InPhase> ejjfunky0: HobbIT, the OS for people who like fixing their friends' computers.
[08:30:08] <sonny> lol
[08:30:23] <epony> learn by wasmosis.. implement an OS in your 80ies with an OS constructor toy kit for your grand-grand-childrens communicator implants
[08:30:33] <ejjfunky0> InPhase, sounds great! :D
[08:30:47] <sonny> I'm gonna make hardware too hopefully
[08:30:48] <epony> you have a bright 60 years ahead
[08:31:10] <norias> ugh. i need to  boot in to windows at some point
[08:31:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:31:27] * epony sends the cancellation note for the 60 year ahead, let's make that 20.
[08:31:34] <InPhase> norias: Don't do it, it's a trap!
[08:31:44] <absentia> prepare to set aside an entire morning before the start menu is rendered operable
[08:31:54] <norias> InPhase: I know. last time it said it needed to update, so I hit the power button and got out
[08:32:01] <absentia> lmao
[08:32:03] <InPhase> norias: One way I got out of that emotional suffering, is to setup a Windows VM with qemu under Linux.
[08:32:20] <epony> now, run WIN/DOS-11 in your WoWser
[08:32:26] <InPhase> norias: Of course it still goes through update chaos...  But at least I can just let it do its nonsense in a side window then.
[08:32:27] <norias> InPhase: I tried that. I couldn't get the whole GPU pass through stuff to work
[08:32:43] <norias> InPhase: and I need the GPU for the only thing I use windows for
[08:32:49] <InPhase> norias: Yeah, that's less viable.  It's not ideal for gaming or other 3D heavy things.
[08:33:00] <norias> InPhase: like CAD? :)
[08:33:08] <norias> (actually CAM)
[08:33:08] <InPhase> norias: That's what OpenSCAD is for!
[08:33:09] * epony reminds people that the wowser is just a very stupid VM hyperviros
[08:33:18] <norias> InPhase: there isn't any good open CAM
[08:33:26] <InPhase> norias: OpenSCAM?
[08:33:27] <epony> norias, why not?
[08:33:31] <norias> InPhase: I have MasterCAM on my windows partition
[08:33:33] <InPhase> Maybe needs some naming work...
[08:33:47] <norias> epony: few users, high complexity?
[08:33:51] <epony> nice
[08:34:02] <norias> also, lots of closed off areas
[08:34:07] <norias> like most of the file formats
[08:34:23] <norias> Kremator: what languages are you good at?
[08:34:24] <epony> see, we would have had a nice wowser if those were the real compelling factors
[08:34:36] <Kremator> norias, JS, Java, C
[08:34:52] <norias> Kremator: you'd think you could get somewhere with that.
[08:35:34] <Kremator> norias, idk enough C to enter embbeded market (unless i get an offer for certain hobby os? :) ) and Java market is saturated
[08:36:16] <norias> Kremator: yeah, i guess everyone knows java, huh?
[08:36:53] <epony> WIN/DOS is not programmed in Java though..
[08:37:02] <Kremator> decades of it getting teached in universities, plus a lot of it past market was eaten by other stacks
[08:37:03] <flakland> sure it is
[08:37:25] <epony> the kernel part is C and the userland is C++ which is just the same as with other operating systems that actually have users
[08:37:29] <Kremator> epony, show me a platform and i will show you a compatible javaw binary
[08:37:51] * epony shows the chart of operating systems
[08:38:10] <sonny> I did program a Java OS ... wasn't fun :(
[08:38:25] <InPhase> norias: I could imagine an open source CAM system getting development interest if one existed, but I guess it would need a strong start, probably via some sort of initial sponsor, before it kicked into the critical mass.  It's slightly less of a hobbyist thing than 3D printing.
[08:38:36] <epony> https://en.wikipedia.org/wiki/Operating_system#Components
[08:38:36] <bayaz> Title: Operating system - Wikipedia 
[08:38:44] <flakland> lol
[08:38:44] <Kremator> epony, lol, https://www.oracle.com/java/technologies/javase/products-doc-jdk8-jre8-certconfig.html
[08:38:45] <bayaz> Title: Oracle JDK 8 and JRE 8 Certified System Configurations 
[08:38:59] <norias> InPhase: I think it would be tough. The commercial folks usually license a CAM kernel.
[08:39:08] <norias> InPhase: so, we really need a CAM kernel first.
[08:39:12] <beaky> at last i have measured my ram latency is it 9348 cpu cycles
[08:39:20] <beaky> but then how do i go from cpu cycles to nanoseconds
[08:39:26] <norias> InPhase: and I think the math required reduces your list of people who can work on it.
[08:39:30] <epony> Kremator, Oracle does not have an operating system.
[08:39:31] <absentia> that sounds... quite high
[08:39:37] <sonny> beaky: there's some ratio
[08:39:49] <sonny> epony solaris
[08:40:01] <Kremator> sad to see Java doesnt even have "windowsPX in its list even if only to say they dont support it, fr the IT world wants to erase "WinXP" from the history
[08:40:05] <norias> InPhase: not that I wouldn't want to, but I think it would be tough
[08:40:06] <Kremator> epony, Solaris?
[08:40:12] <mehwork> why do people make a folder called tests/integration/ if it's entirely unclear what an 'integration' test is?  Like, does it test some internal mocked API, a standing web server, 2 pure functions, etc?
[08:40:19] <InPhase> norias: OpenSCAD functions right now with a library divide where the math is handled by the CGAL project, which is a group of people with somewhat different mathy interests.
[08:40:36] <norias> InPhase: there's an OpenCamlib, but it's fairly crude
[08:40:37] <InPhase> norias: Not all the math, but many of the trickier parts.
[08:40:42] <epony> Kremator, nope
[08:40:45] <epony> https://en.wikipedia.org/wiki/Timeline_of_operating_systems#2020s
[08:40:45] <bayaz> Title: Timeline of operating systems - Wikipedia 
[08:41:01] <norias> InPhase: OpenSCAD kinda cheats if i understand it right because it's not dealing with BREP's
[08:41:05] <epony> solaris is a sun OS-like product
[08:41:35] <norias> InPhase: I think a better codebase / comparison is probably BRL-CAD, which can at least import / export BREP's in step ap's
[08:41:39] <flakland> SCANDELOUS ALLEGATIONS!
[08:41:53] <norias> InPhase: I _think_ BRL-CAD can do step ap 242
[08:42:01] <Kremator> epony, i mean, if we wanted to get technicall i can tell you beforehand that list is shit and invalid, because it doesnt have the best OS: TempleOS
[08:42:22] <Kremator> epony, yeah, but oracle bought sun, so now its their's
[08:42:24] <epony> there is no such OS, it's a hobby software project
[08:42:30] *** Joins: Cashlin (~hp@user/cashlin)
[08:42:36] <Kremator> HERESY
[08:42:48] <InPhase> norias: Yeah, it tends to not be required for the purpose.
[08:43:00] <beaky> nice so it takes me 2.56 microseconds to access my ram
[08:43:00] <epony> Oracle can not develop operating systems, they barely handle databases.
[08:43:10] <norias> InPhase: what does?
[08:43:19] <InPhase> norias: Although there is always someone working at the edges trying to smash those features into OpenSCAD, or request someone else do the mashing.
[08:43:26] <beaky> i thought it took 400 nanoseconds to access ram 
[08:43:32] <InPhase> norias: All the details of step brep.
[08:43:40] * epony sells Apple-branded "bare handles" to Oracle..
[08:43:48] <Kremator> epony, also, apparently Oracle has their own Linux distro which the latest was released in 2021
[08:43:55] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[08:43:58] <norias> InPhase: you don't have to do them all. i don't think anyone does. i think it's always a subset
[08:44:05] <Kremator> epony, we all know Oracle is these days mostly a legal firm
[08:44:13] <epony> it's not their OS, it's some copy
[08:44:23] <flakland> e-phony rejects templeOS and disavows solaris! you won't believe   how netbook windows made the list!
[08:44:35] <Kremator> i bet you love NFTs right 
[08:44:44] <epony> Solaris is kind of obsolete
[08:44:56] <InPhase> norias: All processing is currently done with polygonal or polyhedral representations.  Although we've discussed adding in signed-distance functions as an intermediate option.
[08:45:37] <norias> InPhase: so some sort of bag of triangles?
[08:45:51] <InPhase> norias: They don't need to be triangles, but yes, basically.
[08:46:07] <epony> the Sun company started declining after their peak in 1995 and into 2000 were already into difficulties and bailed out in 2001 with a slow decay and 2004 it was over
[08:46:33] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[08:47:14] <Kremator> why everything IT related seems to have peaked int he 90s and after that we were left with empty souless Shit-as-a-Service "apps"
[08:47:15] <InPhase> norias: Current work is switching all the calculation over to triangles, and then it will undo all the triangles it can at the end.  Turns out this permits some faster math.
[08:47:34] <norias> InPhase: i'd be surprised if you could get a cam to work in that environment, but i don't know.
[08:47:44] *** Joins: torstenvl (~torstenvl@2601:14b:200:1e9c:ad7e:34c:8420:f55f)
[08:47:57] <norias> InPhase: my suspicion is that sdf is probably an ideal representation for CAM
[08:48:13] <epony> https://en.wikipedia.org/wiki/Sun_micro#The_"dot-com_bubble"_and_aftermath
[08:48:13] <bayaz> Title: Sun Microsystems - Wikipedia 
[08:48:27] <ejjfunky0> Hi all, is Redis better than Memcache?
[08:48:32] <norias> InPhase: but i only barely know what i'm talking about, so...
[08:49:03] <norias> InPhase: I just think open source CAM would have too few users and too few developers on too big of a system to develop
[08:49:04] *** Joins: GaxyL (~GaxyL@S0106905851bbda6d.vc.shawcable.net)
[08:49:17] <InPhase> norias: Yeah.  My understanding of CAM is fairly superficial as well, but I concur with your conclusion.  The polyhedral representation is already causing issues with trying to reason out how to properly start supporting multi-color and multi-material 3D printing.
[08:49:33] <InPhase> norias: SDF has natural advantages for this.
[08:49:52] <norias> InPhase: from everything i see, SDF looks pretty great.
[08:50:09] <InPhase> norias: It has a lot of problems that are easy to hide in the demos.  :)
[08:50:10] <norias> InPhase: if i ever have time, i want to do BREP ( STEP ) -> SDF conversion
[08:50:27] <norias> just to poke at the stuff
[08:50:42] <norias> i used the official NIST stuff to play with STEP a bit, but it's HUGE
[08:51:19] <norias> i looked at what BRL-CAD has for STEP R/W and I'd probably just rip that off
[08:51:25] <norias> because it's already in a usable state
[08:51:38] <InPhase> norias: Most troubling with SDF is the leaky abstraction problem, where as soon as you start morphing surfaces you morph the space around them, and so all those clever tricks that you might want to do taking advantage of the structure of the surrounding space start malfunctioning based on prior operations.
[08:51:41] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[08:51:48] *** Quits: stagas (~stagas@2a02:587:c41b:6388:8b34:53c3:322c:bdc5) (Ping timeout: 240 seconds)
[08:52:26] <norias> yeah, not a problem i'm familiar with
[08:52:42] <epony> Kremator, that's because 64bit computers were the same as 32bit computers, and the same software could continue running, and the remote computing facilities are just leasing servers, which consumers can't operate themselves so they need extended services
[08:53:24] <epony> so, only consumers see "everything as a *hosting* service"
[08:53:42] <norias> InPhase: I'm not much of a CAD designer, though
[08:53:53] <epony> and fail to use the correct term and call that "platform" or "sotware"
[08:54:03] <norias> InPhase: I'm a machinist getting a CS degree because I want to improve manufacturing software
[08:54:11] <norias> or that's where i started, at least
[08:54:15] <InPhase> norias: Imagine you take a perfectly defined cube where every value is a proper spatial distance away from it.  If you simply expand outward you will get a rounded cube.  If you stretch the cube into a rectangle, and then try to round your rectangle afterward, your rounding is also stretched.  That problem, but then amplify it out in many layers of complexity with things like combining shapes, 
[08:54:21] <InPhase> chamfering, smooth blending, and so on.
[08:54:47] <norias> i see
[08:54:52] <GaxyL> I wish there was an easy way to get line buffered IO in TCP
[08:55:22] <epony> as flatland already learned, commodity computing is the result of open architectures and standardisation and open access to compatible and modular computing
[08:55:46] <InPhase> norias: There are tricks to try to avoid it all, which is why the demos work.  :)  But it's something that can be a bit of a mental load at times, trying to reason through what you can do.
[08:55:57] <epony> Kremator, the next step is providing services with that adequate hardware and infrastructure provisioning, as a commercial product for suckers
[08:56:05] *** Parts: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com) ()
[08:56:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[08:56:31] <flakland> commodoty computing doesnt give a damn about open architectures
[08:56:32] <flakland> e-phony
[08:56:45] <deniska> While certain aspects of "old IT" were better, I suggest you to daily drive windows 98 or linux of that era for a bit :P
[08:56:51] <norias> InPhase: right on. All I know is that stuff is gonna change, and I want to be there. :)
[08:57:09] <norias> deniska: i refuse. especially windows 98
[08:57:25] <ejjfunky0> deniska, i missed floppy diskettes. :P
[08:57:37] <norias> i was soooo mad when windows 95 came out
[08:57:38] <deniska> At least in windows 98 you don't have to edit xorg.conf
[08:57:43] *** Quits: panella32 (~panella32@138.199.31.193) (Quit: Textual IRC Client: www.textualapp.com)
[08:57:47] <norias> "How do I get out of windows and get back to DOS?"
[08:57:52] <ejjfunky0> i remember 3.5 was revolutionary. :D
[08:57:53] <norias> "You don't"
[08:57:56] <norias> "WTF?"
[08:59:02] <Kremator> deniska, well, back then was perfectly fine, was changed is not hte product but hte enviroment, nowadays everything expects me to have a botnet smartphoen with 999 tracking services feeding metadata to their makers
[08:59:25] <InPhase> norias: Well, I would attempt to lure you over to 3D printing as the more fun area, but improving manufacturing software is a worthy goal.  :)
[08:59:31] <epony> flaklamb, your spelling improves rapidy already
[08:59:52] <flakland> spammm
[09:00:05] <epony> the only problem with W98 was.. it ran for up to 3-4hrs
[09:00:17] <Kremator> ^^^^
[09:00:23] <epony> flakland, no u
[09:00:38] *** Joins: Burgundy (~NA@86.121.143.206)
[09:00:45] <Kremator> i mean, what better reason to use it at the office? you get free 3 minutes for chitchat recreation a day meanwhile your machine rebooted
[09:00:58] <norias> InPhase: I may never get there. I have the SDK for MasterCAM, but I haven't had time to do anything.
[09:01:21] <norias> InPhase: our whole software system around machining is... not good. 
[09:01:26] <Kremator> but fr, Windows peaked (in my opinion) with WinXP, meanwhile i think linux is better than ever
[09:01:55] <norias> InPhase: I could ramble on, but I predict it will change dramatically, and that the industry will consolidate quite a bit
[09:01:59] <epony> then WinME could run almost twice longer than Win98SE, however, it lacked drivers and crashed because of driver problems, and Win2K had incompatible drivers again and could not run applications for Win98 well enough
[09:02:20] <epony> and then viruses appeared in the early days of MS/DOS
[09:02:28] <InPhase> norias: Or you could start the dominant open source system and turn the whole thing around.  :)
[09:02:39] <norias> InPhase: time. money.
[09:02:46] <epony> culminating with the blaster and sasser worms cancelling your computing
[09:02:47] <norias> InPhase: I could also just get a job.
[09:02:54] <InPhase> epony: Well somebody at some point got Windows 98 to run for 49.7 days so that they could notice this now classic bug:  https://www.cnet.com/news/windows-may-crash-after-49-7-days/
[09:02:55] <bayaz> Title: Windows may crash after 49.7 days 
[09:03:40] <epony> so about WinXP it finally started working, until some service packs made it slow and wonky..
[09:04:11] <norias> bah
[09:04:12] <epony> and it was crashing again because of drivers, it was slow because of antivirus software and in general it was miserable
[09:04:30] <epony> culminating with cryptolockers on Win7-11
[09:04:32] <Kremator> epony, AV is biggest fraud ever happened to computing world overall
[09:04:47] <epony> WIN/DOS and MAC/DOS made it possible
[09:05:23] <epony> they affect such stupid systems which lack "system validation" and "normalisation / assurance" tooling
[09:06:25] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[09:06:38] *** Joins: flakland (~flaknet99@32.211.211.39)
[09:06:54] <InPhase> Kremator: I remember the first time I saw a Linux antivirus program, it had zero virus definitions in its configuration files, and existed just to comply with corporate requirements that all systems on the network must have antivirus programs installed.
[09:07:25] <Kremator> InPhase, you know, thats the #1 reason why McAffe software suite got so big in the first place
[09:07:56] <epony> well, commercial systems have other deficits intentionally
[09:08:01] <InPhase> There was a missed opportunity to just require that all systems on a network must be secure operating systems.
[09:08:05] <Kremator> they were shit, even by AV fraud standards, but they had all the AV solutions for all the "potential security risk" that were defined in corporate requirements
[09:08:12] <epony> so they have viruses and malware and forced support and services hooks
[09:08:33] <InPhase> Linux would have been so much easier for IT people to keep setup right, at least going back to 2000 or so.
[09:08:33] <epony> there are viruses for Linux too
[09:08:47] <Kremator> so if you were a manager, or just head of It and you didnt give a damn thing, you would just go andinstall whole mcaffee suite in the new machines for the office and then you would be compliant with all the requirements that HR could ever come
[09:09:18] <epony> but the real problem on Linux is again the same as on other commercial OS "products"
[09:09:31] <epony> (that implies Linux is commercial)
[09:09:57] <flakland> yeah you have to copy the files
[09:10:04] <epony> because it does not resolve the problems of commercial systems, just displaces the problems to another type of commercial service
[09:10:24] <epony> flakland, or learn the business aspects of using freebies
[09:11:44] <epony> technically, you never needed to edit xorg.conf files, it used to have autoconfigure since xfree86 days, and manual tweaking was "special cases" mostly
[09:11:45] <Kremator> or maybe we can just kill anybody that doesnt understand basic computing usage without GUI?
[09:12:03] <Kremator> i bet we would fix many problems with a single solution
[09:12:08] <epony> in the xorg epoch it stopped needing autoconfiguration even, works as is
[09:12:53] <epony> maybe Linux GUI programmers should learn from WIN/DOS but not repeat the mistakes
[09:13:26] <epony> while they are repeating the mistakes, but not the efficiency and speed of the 90ies GUIs
[09:13:48] <epony> blame OOP
[09:14:08] <epony> (it's stupid even for GUI programming)
[09:14:38] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[09:14:52] <epony> makes sense for larger distributed computing systems, but on a desktoy.. is just wasteful
[09:15:30] <epony> now, do you still believe functional programming is how you do your kernel and userland on top of the HAL ;-)
[09:15:31] *** Quits: moniker-- (~mon@dh207-120-173.xnet.hr) (Remote host closed the connection)
[09:16:31] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Read error: Connection reset by peer)
[09:16:55] <sonny> just got back, so I missed what happened
[09:17:09] <flakland> something happened?
[09:17:20] <epony> we were talking about modern (talking) programming
[09:17:20] <Kremator> sonny, epony is ranting about the core of why modern computing is so fucking lame
[09:17:27] <sonny> ah
[09:17:42] <epony> Kremator, that was because of sonny's claim which is "modern"
[09:18:57] <epony> which is :JIT:
[09:19:14] <Kremator> epony, about the linux GUI programmers, i think they are making the same msitakes mostly because at this point in time they all have to already carry with a fuckton of cruft/legacy code
[09:19:33] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[09:19:47] <flakland> jit is last decade
[09:19:48] <Kremator> for example, imagine that you have to make a full GUI non-electron program for linux, the options you have: Qt, GTK and handwritting it in C++
[09:19:49] <flakland> ancient history
[09:19:57] *** Quits: gitgood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net) (Ping timeout: 240 seconds)
[09:20:18] <Kremator> the linux world seems to have chosen Qt just for being "the less shitty" option
[09:20:51] <epony> https://en.wikipedia.org/wiki/List_of_widget_toolkits#High-level_widget_toolkits
[09:20:51] <bayaz> Title: List of widget toolkits - Wikipedia 
[09:20:57] <epony> there are choices
[09:21:25] <edgar-rft> the users try their best to compensate increasing computer speed with getting dumber year by year :-)
[09:22:07] <epony> actually, users are the same
[09:22:36] <epony> developers are not always making optimal choices and decisions
[09:23:05] <Kremator> i cant wait for dev market to crash and idk start going to sell potatoes int he flea market
[09:23:18] <sonny> it wont
[09:23:22] <epony> for reasons you see on commercial systems, functionality and competition for more effects and capabilities
[09:23:33] <Kremator> sonny, let me dream ffs
[09:23:52] *** Joins: moniker- (~mon@dh207-120-173.xnet.hr)
[09:24:09] <edgar-rft> developers need to react on users, they *cannot* make optimal deisions, they need to follow the average
[09:24:26] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[09:24:38] <sonny> I think your best bet is to hope apple kills the browser
[09:24:51] <epony> apple has no leverage
[09:24:58] *** Quits: GaxyL (~GaxyL@S0106905851bbda6d.vc.shawcable.net) (Ping timeout: 256 seconds)
[09:25:00] <Kremator> edgar-rft, idk, as a frontend gay, IME the interfaces went to shit the moment the devs starting developing for user appeal instead of program's functionality
[09:25:33] <Kremator> software is a tool, if you want to use it efficiently, learn to use it properlu
[09:25:46] <sonny> epony: how much do they need?
[09:26:07] <edgar-rft> Kremator: true, but what else can they do when they want to *sell* things?
[09:26:24] <epony> sonny, more than the current 5% on laptops and 10% on mobiles
[09:26:39] <sonny> easy to just not appear in the next phone
[09:26:49] <Kremator> isnt apple like 35% of the phones in the world outside asia?
[09:26:59] <Kremator> i had that impression though
[09:27:08] <epony> sonny, you've heard about 20-25% share price losses
[09:27:23] <epony> some companies drop 80-90% over days
[09:27:33] <sonny> they can afford it 
[09:27:53] <epony> these are the so called hollow and inflationary non-producing but "reselling" companies
[09:27:55] <sonny> #1 right now right?
[09:28:58] <sonny> I mean, it's that or there's just going to be a bunch of senior devs getting 500k to work on safari
[09:29:13] <epony> who cares
[09:29:21] *** Quits: nickel84481 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (Quit: WeeChat 3.3)
[09:29:28] <sonny> even windows couldn't keep up, they dropped their own browser
[09:29:50] <epony> yes, and apple got theirs from khtml / kde
[09:29:57] <sonny> epony you do?
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:30:15] <epony> no, I don't care about apple, they have no value
[09:30:57] <epony> their only purpose is to pull money from the gullible consumers and be a stilt to micro softie against monopoly and anti-trust law campaigns
[09:30:57] <sonny> ok, but the topic is about their impact on not having to support the browser, it would require innovation
[09:31:10] <epony> no such impact
[09:31:14] <epony> you're imagining things
[09:31:15] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:31:22] <sonny> yeah ... literally
[09:31:23] <Gry> hi rindolf
[09:31:25] <epony> 5-10% market share on consumables
[09:31:25] <Gry> hi riff-IRC
[09:31:40] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[09:31:42] <Gry> i'm trying to install po4a and when i write ./Build i'm getting this error https://dpaste.com/8H5GT5AR5.txt in openbsd
[09:31:43] <bayaz> Type: text/plain; charset=utf-8 
[09:32:08] <Gry> asked #po4a in oftc but they're a bit dead (will let you know if they reply)
[09:32:15] <rindolf> Gry: hi
[09:32:34] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[09:33:04] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[09:33:31] *** Joins: nikhilmwarrier (~nikhilmwa@2409:4073:2091:a7d2:64b9:e586:71aa:4411)
[09:33:37] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[09:33:41] <Gry> greetings
[09:33:49] <nikhilmwarrier> Hi
[09:34:00] <bkool> Hi
[09:34:05] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[09:34:37] <norias> Kremator: what language / technology would you learn if you had no obstacles?
[09:35:01] <rindolf> Gry: please paste the output of 'locale'
[09:36:07] <rindolf> nikhilmwarrier: aloha
[09:36:58] <Gry> rindolf: on it
[09:37:39] <Gry> rindolf: output of 'locale' https://dpaste.com/5QSKTYZRT.txt
[09:37:40] <bayaz> Type: text/plain; charset=utf-8 Size: 136 B 
[09:37:54] <ejjfunky0> nikhilmwarrier: aloha!
[09:38:03] <ejjfunky0> nikhilmwarrier: from hawaii?
[09:38:30] <nikhilmwarrier> Nope
[09:39:18] <ejjfunky0> rindolf: why the aloha?
[09:39:46] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[09:39:46] <ejjfunky0> nikhilmwarrier: never mind. heh
[09:40:41] <nikhilmwarrier> yeah
[09:40:48] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[09:41:01] *** Joins: flakland (~flaknet99@32.211.211.39)
[09:41:18] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[09:41:25] *** Quits: mitchxv2 (~mitch@24.31.27.81) (Read error: No route to host)
[09:41:29] *** Quits: nikhilmwarrier (~nikhilmwa@2409:4073:2091:a7d2:64b9:e586:71aa:4411) (Quit: [Autogenerated] Gotta go bye)
[09:42:03] *** Quits: junebug (~junebug@2600:1700:3db0:2540:9da7:df1f:2ac:6bb2) (Remote host closed the connection)
[09:42:22] *** Joins: junebug (~junebug@2600:1700:3db0:2540:e6d0:8f86:be89:6d1)
[09:44:36] <rindolf> ejjfunky0: everybody needs change sometimes: https://www.youtube.com/watch?v=J_It_SvRx3g
[09:44:38] <bayaz> Title: "All Star" by Smash Mouth but it's a beautiful love ballad... 
[09:45:19] <ejjfunky0> rindolf: haha
[09:45:30] <ejjfunky0> rindolf: ever been to hawaii?
[09:45:44] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[09:46:36] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[09:47:29] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:b07c:b562:c9fc:b27a) (Read error: Connection reset by peer)
[09:51:12] <rindolf> ejjfunky0: no, not yet
[09:52:59] <ejjfunky0> rindolf: cool. :)
[09:53:05] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.2 Beta Build (2022/02/20 UTC) 64 Bit)
[09:53:18] <ejjfunky0> rindolf: in hawaii, you get to see and hear aloha everywhere.
[09:53:25] *** Joins: Tempesta (~Tempesta@user/tempesta)
[09:55:29] <ejjfunky0> rindolf: Is shalom still the most common greeting or do you use Ahlan more?
[09:57:40] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[09:59:04] <rindolf> ejjfunky0: 'wiki' is an hawaiian word too
[09:59:44] <ejjfunky0> rindolf: yea
[10:00:13] * ski . o O ( "wikiwiki" <https://wiki.c2.com/> )
[10:01:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[10:01:10] <rindolf> ejjfunky0: "hi" is commonly used too
[10:01:49] <ejjfunky0> rindolf: Ma Shima?
[10:02:16] <ejjfunky0> opps: Ma nishma
[10:02:55] <Gry> rindolf: (i did export LC_ALL=en_US.UTF-8, re trying)
[10:05:47] <ProfSimm> Let's say we combine CPS (continuations) and DS (returning result) in one: you return the continuation result. Thus the caller can choose at runtime whether a function uses CPS, DS or some combination thereof. Is there a name for this?
[10:06:00] <rindolf> ejjfunky0: sorry but i'm busy now
[10:06:15] <ejjfunky0> rindolf: no problem.
[10:06:40] <ski> ProfSimm : `call-with-current-continuation' ?
[10:07:55] <ProfSimm> ski: thanks I'll check
[10:09:04] <ski> it's a Scheme primitive. it's also in SML/NJ (and MLton), and, iiuc, has also been in some Smalltalk and Ruby systems. hm, and OCaml has had delimited continuations
[10:09:10] <ProfSimm> ski: it's very interesting because the caller can decide 1) to pass "unit function" that returns its arguments 1:1 and so get the result naked 2) wrap it in enum/sum type 3) have the closures return thunks the caller then executes 4) go full blown CPS, ignoring the result
[10:09:32] <ProfSimm> And all of this is determined outside the function being executed
[10:10:05] <ski> i can't say i understand any of those four points
[10:10:09] *** Joins: l4s8g_ (~l4s8g@pd9e62e01.dip0.t-ipconnect.de)
[10:10:21] <ProfSimm> ski: 1 sec
[10:10:36] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (Ping timeout: 240 seconds)
[10:10:51] *** Quits: l4s8g_ (~l4s8g@pd9e62e01.dip0.t-ipconnect.de) (Remote host closed the connection)
[10:11:27] <ski> with `call-with-current-continuation', you can convert from a function that is in CPS (expects an explicit continuation parameter) to one that doesn't (is called in DS, returns whenever that continuation is invoked after the call to the original function)
[10:12:01] <ski> (to go in the other direction, you just make a function that takes a continuation parameter, and wraps the call to the DS function in a call to that)
[10:12:45] <ski> ProfSimm : perhaps this isn't exactly what you were asking/looking for .. but it does allow you to go between CPS and DS, at run-time
[10:13:43] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[10:16:56] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[10:17:44] <ProfSimm> ski: it's not, exactly. call/cc seems to change the normal execution order of functions. What I'm trying to describe doesn't
[10:18:38] <ProfSimm> ski:    let div = (x, y, ok, err) -> y == 0 ? err('div by zero') : ok(x/y);
[10:19:14] <ProfSimm> ski: depending on what you pass for ok/err, you can make thus function execute in DS, CPS, or return thunks, and so on
[10:19:40] <ski> "call/cc seems to change the normal execution order of functions" .. it's "just" a particular HOF. it doesn't change how functions execute. (however, supporting `call/cc' does require a kind of generalization of the common notion of function execution)
[10:20:35] <ski> ProfSimm : what is the intended procedural semantics, of that snippet ?
[10:21:25] <ski> (what is being called, what is being defined, what are the binding occurances of identifiers ?)
[10:22:01] <ProfSimm> ski: well, x and y are numbers. ok and err are functions
[10:22:13] <ProfSimm> ski: and nothing else is set
[10:22:18] <ProfSimm> ski: which is the intent
[10:22:36] <ski> does `(x, y, ok, err)' bind those identifiers ? or does it use them ?
[10:22:52] <ski> is `err' and `ok' being bound in this snippet ? or just called ?
[10:22:57] <ski> what is `div' ?
[10:23:23] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:23:33] <ski> hm
[10:23:43] <ProfSimm> let div = function (x, y, ok, err) { if (y == 0) { return err('div by zero'); } else { return  ok(x/y); }}
[10:23:47] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[10:23:51] <ski> i suppose it is defining `div' to be a particular function of four parameters, two of which are continuations ..
[10:24:04] <ski> (sorry, the way to parse it wasn't too clear, to me)
[10:24:26] <ski> ok, so how would you then call this `div' ?
[10:24:26] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[10:24:42] <ProfSimm> ski: well, by passing arguments :P
[10:24:48] <ski> yes, but which ?
[10:24:56] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 272 seconds)
[10:25:03] <ski> you talked about being able to call in both CPS and DS
[10:25:03] <ProfSimm> ski: well that's why they're arguments, they vary
[10:25:17] <ski> how do you intend that to happen ?
[10:25:20] <ProfSimm> ski: let unit = (...args) -> args;
[10:25:43] <ProfSimm> ski:  if you pass this as continuations, then the function literally just returns an error string or divided number
[10:25:49] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[10:25:54] <ProfSimm> Well wait, no it'll return arrayof those, anyway, details
[10:26:12] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 272 seconds)
[10:26:13] <ski> hm, this `unit' is a function, not a "pure continuation"
[10:26:34] <ProfSimm> ski: I'm using what a mainstream language has as an example
[10:26:55] <ski> (a "continuation" can be a mode of usage of a function. but it can also be its own thing, like in SML/NJ, e.g. .. or in assembler)
[10:27:13] <ski> mm
[10:27:35] <ProfSimm> Let's redefine unit a bit   let unit = a -> a;
[10:27:40] <ProfSimm> div(10, 5, unit, unit) <-- return 2
[10:27:42] *** Quits: Kremator (~Kremator@user/kremator) (Remote host closed the connection)
[10:27:46] <ProfSimm> That's clear I hope
[10:28:08] <ski> ok, so `div' is simply in CPS here, and the calls to `err' and `ok' are in tail position
[10:28:31] <ProfSimm> They are
[10:28:52] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[10:28:53] <ski> (i'm not sure i've seen this function called `unit' before, though. `id' or `identity' is what it's usually called, in a programming context)
[10:29:11] <ski> so, that's calling `div' in CPS. what about DS ?
[10:29:19] <ProfSimm> Thart's DS, you get back 2
[10:29:52] <ProfSimm> let result = div(10, 5, unit, unit); print (result); 
[10:30:15] <ProfSimm> div(10, 5, print, print); // Same CPS style
[10:30:38] <ski> oh, i suppose you have e.g. `let divDS = (n,d) -> div(n,d,unit,unit)' in mind
[10:30:48] <ProfSimm> right
[10:31:00] <ski> (so `divDS' is in DS, while `div' is in CPS)
[10:31:26] <ProfSimm> Well div is a hybrid, it's neither. CPS doesn't return results does it?
[10:31:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[10:31:50] <ski> it "returns" by calling a continuation parameter, in tail position
[10:31:56] <ski> which is exactly what your `div' does
[10:32:24] <ProfSimm> This "div" doesn't just call things in tail position, it also has the semantics of a normal function in say, Python, or Java, or C#, or JS
[10:32:34] <ProfSimm> So it returns the result of calling that continuation which also returns
[10:32:44] <ski> sure. that's what CPS is/does
[10:33:01] <ProfSimm> Except CPS doesn't need the concept of "returning a result" in that context
[10:33:07] <ProfSimm> The call itself is the act of returning
[10:33:24] <ProfSimm> We're keeping both
[10:33:28] <ski> with proper tail calls, there's no difference
[10:34:23] <ski> (keeping both what ?)
[10:34:26] <ProfSimm> There is, though. Because at some point this call chain will stop. With pure CPS this is where the program halts. With return results the stack unwinds passing the tail results up
[10:34:58] <ProfSimm> With pure CPS you need no stack
[10:34:59] <ski> "With pure CPS this is where the program halts." -- i think you have (undelimited) first-class continuations in mind here, not CPS per se
[10:35:12] <ProfSimm> You know.
[10:35:22] <ski> CPS is just a style in which you can program, given that you're able to pass functions as parameters
[10:35:44] <ProfSimm> I'm literally writing JS one-liners a kid can understand. You're clearly much more intelligent and knowledgable than this. So I don't know why we can't understand each other
[10:35:59] <ski> having proper tail calls really helps with having CPS not be stupidly inefficient, though
[10:36:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[10:39:14] <ski> "With pure CPS you need no stack" -- the continuations express the stack, sure (and vice versa, the stack is a representation of the current continuation). but you can mix CPS code with non-CPS code (and so still using a language implementation stack for the latter)
[10:40:58] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[10:41:41] *** Joins: stagas (~stagas@2a02:587:c41b:6388:4bc0:6887:ad36:7515)
[10:42:25] <ski> (if you sometimes call a continuation in a non-tail position (which is not the same as just mixing in some non-CPS code) -- this is called nqCPS ("not quite CPS") -- then you do need your continuations to be functions. this is known as composable / delimited / sub- continuations. if you have a separate (non-function) data type of continuations, which can only be invoked / jumped to, but which never 
[10:42:31] <ski> returns back to you (like a call to a continuation function, even if in tail context, do), then you can't (accidentally, or by intent) express nqCPS)
[10:43:52] <ski> perhaps i should ask what you mean by "pure CPS"
[10:47:24] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[10:47:25] <ProfSimm> ski: I mean there's no stack, you call into a function you "goto" it and never come back
[10:48:16] <ski> that's not really what CPS is about. you're describing a system where you have continuations (in the "separate data type" sense), rather than functions
[10:48:21] *** Joins: user51 (~user51@176.228.18.92)
[10:48:46] <ProfSimm> You know.
[10:48:59] <ProfSimm> Do you think this helps the conversation
[10:49:21] <ProfSimm> For example when you were insistinct yesterday that static single assignment should be called binding, and not assignment, despite it's clearly called both ways
[10:49:51] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[10:49:58] *** Quits: phogg (~phogg@static-108-51-94-2.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[10:50:08] <ski> because, in CPS, every call is a tail call, you can interpret this *both* as (a) calling functions, passing other functions (called "continuations") as callback; *and* as (b) invoking (primitive) (non-function) continuations, some of them (the ones simulating functions) taking other continuations as arguments (which correspond to "return address/continuation")
[10:50:12] <ProfSimm> Feels like I'm fighting Rust's borrow checked all the time
[10:50:18] <ProfSimm> checker*
[10:50:37] <ski> when you say "I mean there's no stack, you call into a function you \"goto\" it and never come back", you insist on the (b) interpretation. but CPS applies just as well to (a) as to (b)
[10:50:50] <ProfSimm> I refuse to name things anymore.
[10:50:52] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:51:14] <ProfSimm> We just have a thing where you pass functions you tail call, giving them the result, and returning the result of that tail call.
[10:51:15] <ski> hmm
[10:51:41] <ProfSimm> So the idea is what if every function is coded this way
[10:51:54] <ski> i can agree "single assignment" could be a synonym (more or less. the focus on implementation terms for the former is larger) to "binding"
[10:52:06] <ski> however, "*static* single assignment" is something else. it is not single assignment
[10:52:19] <ProfSimm> We can have "ok" be the identity function by default (default param value), and similarly the "err" default can be something throwing an exception with the message given to it
[10:52:31] <ProfSimm> If we do that, it behaves like classic procedural code
[10:52:51] <ProfSimm> But we can also override the defaults
[10:53:56] <ProfSimm> For example we can override the defaults, so div() returns a Result type, which is either Success + result, or Error + error_message
[10:54:04] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[10:54:11] <ProfSimm> so now both those styles are expressed through a single function implementation
[10:54:35] <ProfSimm> And we can use CPS by implementing custom ok/err that do whatever
[10:55:10] <ski> yea. i'd say your `div' is simply using CPS
[10:55:20] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[10:55:30] *** Joins: Payam25 (~Payam@138.106.57.132)
[10:55:54] *** Quits: swp (~Thunderbi@143.176.249.0) (Quit: swp)
[10:56:43] <ski> hm .. right. if you call `div(n,d,unit,unit)', you're passing trivial continuations to `div' (which, if it were a more complicated function, might pass on those continuations, possibly wrapped inside larger continuations, to other operations it might call)
[10:58:16] <ski> however, what if you wanted to call `div' from a function, and you wanted this function to be in DS (so it does not take any continuation parameter). however, another function, further up the call-chain, does take a continuation parameter. now, what if you wanted the continuation passed to `div' to incorporate the one passed to the function higher up the call-chain, *without* requiring the intermediate 
[10:58:18] <ProfSimm> You can also return a promise
[10:58:22] <ski> function to be rewritten from DS to CPS ?
[10:58:33] <ski> *that* is something that `call-with-current-continuation' can help with
[10:58:37] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:59:09] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[11:00:50] <ski> (in the case of the `err' continuation, you'd also (assuming the intermediate function doesn't expect its result to be a sum type that could either be of `Ok' or `Err' form) need some way to "install an exception handler", either by using some built-in means of the language for that, for the duration of the middle layer, or, perhaps, using a mutable location in which you place this `err' continuation
[11:01:12] *** Joins: phogg (~phogg@static-108-51-94-2.washdc.fios.verizon.net)
[11:01:18] *** Joins: zaher (~zaher@37.48.184.202)
[11:02:06] <ski> .. this last approach is essentially what composable continuations (possibly used via monadic reflection) can be implemented in terms of. or (more efficient), composable continuations could have primitive first-class support)
[11:03:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:03:15] <ski> anyway, perhaps you don't really have a use for mixing CPS and DS in this CPS->DS->CPS way. but it's an example of what first-class continuation support (as opposed to plain CPS) could help you with
[11:03:34] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[11:03:34] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[11:04:32] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:04:33] <ski> (another thing that composable/delimited continuations can do is turn internal iteration into external iteration. if you have a library that exports a `for_each' type of HOF, you can use del-conts to (at run-time) turn that into an iterator/stream that you can externally iterate on, progressing whenever you feel like it)
[11:06:38] <ski> "You can also return a promise" -- yes, because the continuations are only tail called, they are basically polymorphic in the result type, and so you can make your CPS operation (`div') return the result in any form you like, by simply providing continuation(s) that compute their result in that form
[11:07:55] <ProfSimm> ski: there's a similar problem of combining functions that modify things in place, vs return a modified copy. Can you write a single function that does both
[11:08:41] <ski> .. the language could overload these two implementations, binding them to the same name
[11:08:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[11:08:57] <ski> (this is what Clean, and Mercury, does)
[11:09:02] <ProfSimm> ski: yes but that's the boring solution that hides the problem under the carpet
[11:09:17] *** Quits: pizdets (~pizdets@183.182.114.226) (Ping timeout: 240 seconds)
[11:09:53] <ski> one alternative might be to always return the modified version. but in case the input is unique, you simply update that in-place, rather than allocating a new one
[11:10:15] *** Quits: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com) (Remote host closed the connection)
[11:10:19] <ProfSimm> ski: and you can do for real, if the implicit operation when you pass something is a copy, but you can explicitly move something, so take this signature then:    function sort(foo)  { ...sort foo somehow... return move foo;}   if you call it like:   let foo = sort(move foo);  <-- it sorts in place    but if you call it like this:   let foo2 = sort (foo); it returned a sorted copy
[11:10:30] <ski> (that requires some way to detect uniqueness, at run-time. so, i guess, a ref-counting system)
[11:11:57] <ski> (btw, when i said "these two implementations", i didn't mean that the programmer would hand-write the two implementations, separately. rather, they'd write a single implementation, and the implementation woul dsimply generate two pieces of code from that, one for the update-in-place (if unique input), and the other for shared input (so copy-update))
[11:12:01] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:12:28] <ProfSimm> Sure, but it's more interesting how you code it so it works both ways without magic compiler transformation
[11:12:48] *** Joins: pizdets (~pizdets@183.182.115.230)
[11:12:51] <ski> (it is possible, in Mercury, to also hand-write separate implementations. but typically/normally, you wouldn't do that. but, occasionally, you might want to use a different algorithm)
[11:14:00] *** Quits: pizzapants184 (~zachary@umc-178145.dhcp.missouri.edu) (Quit: Leaving.)
[11:14:21] <ski> does `let foo = sort(move foo);' assume the original `foo' is unique ?
[11:14:28] *** Joins: ynnos (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[11:14:54] <ProfSimm> ski: with value semantics, every instance is semantically unique, even if under the hood there's structural sharing of immutable parts
[11:16:00] <ski> "how you code it so it works both ways" -- would you prefer coding each of the two versions separately, or coding a single source implementation that gets turned into both behaviours ?
[11:16:14] <ProfSimm> I meant the latter
[11:16:20] *** Quits: u0_a83 (~hexingb@103.37.140.45) (Read error: Connection reset by peer)
[11:16:32] <ProfSimm> Actually not really
[11:16:34] *** Joins: u0_a83 (~hexingb@103.37.140.45)
[11:16:40] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[11:16:54] <ProfSimm> I'm talking about coding a single source, that doens't get turned into both behaviors, but which is both behaviors at once
[11:17:30] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Ping timeout: 272 seconds)
[11:17:35] *** ynnos is now known as sonny
[11:17:35] <ski> ok, so behaviour selection, to the extent that happens, is at run-time
[11:17:54] <ProfSimm> At call time. You choose to pass a copy, or move
[11:18:11] <ProfSimm> It modifies what you gave it, and returns it by move
[11:18:25] <ski> (i expressed it a bit vaguely, to include both that interpretation, and the "generate two low-level procedures at compile-time" one)
[11:19:01] <ds> ok i really need to make weechat's pings case sensitive.
[11:19:11] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[11:19:12] <ski> oh .. sorry
[11:19:20] <ds> heh, all good
[11:19:48] <ProfSimm> The only issue with that scheme ski, is that the function returns an error instead and you moved the array to sort into it, and now you lost the array
[11:19:56] * ski occasionally gets pings related to combinatory logic
[11:20:07] <ProfSimm> This is why Rust uses borrows.
[11:20:08] <ds> ski: its why im no longer in electronics. those pesky datasheet providers *all* have /ds/ in urls somewhere :P
[11:20:12] <ProfSimm> But I don't like borrows.
[11:20:34] *** Quits: DasBrain (DasBrain@user/dasbrain) (Ping timeout: 256 seconds)
[11:20:38] <ski> i should study in more detail how Rust's borrow system works, sometime
[11:21:00] <ProfSimm> ski: well it's like statically checked refcounting literally
[11:21:09] <ProfSimm> ski: either N immutable, or 1 mutable at a time.
[11:21:43] <ski> (i also feel like the basic ideas of the inst system in Mercury could be helpful to understand and grapple with those concerns in Rust, and the move semantics stuff in C++)
[11:21:46] <ProfSimm> ski: the borrow has an implicit stack, where if you drop the top borrow, the next level below it becomes "usable"
[11:22:06] *** Joins: palasso (~palasso@user/palasso)
[11:22:27] <ski> "the next level below" -- the caller ?
[11:22:45] <ski> ds : heh :b
[11:22:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[11:22:53] <ProfSimm> Well yes, typically
[11:23:12] <ProfSimm> A borrow is like a move with strings attached.
[11:23:23] <ProfSimm> When the borrow gets dropped, you pull the string, get your thing back :P
[11:23:33] * ski idly wonders if there's someone with nickname `http' or `https'
[11:23:44] <ski> mm .. makes sense, i think
[11:23:48] <arash> Hello, what is the meaning of render? specially in PHP/html language. for example render a template?!
[11:23:50] <ds> oh jeez that would be painful
[11:24:02] *** Quits: jab416171 (~jab416171@c-174-52-58-23.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[11:24:12] <ProfSimm> arash: evaluate/compute/calculate/execute
[11:24:16] <PlanckWalk> arash: In that context, it means to produce HTML
[11:24:26] <PlanckWalk> (From whatever template/script/whatever you have)
[11:24:34] <ds> ski: since i didn't read the scrollback, what is ds/cps in this context? data source? seeing rust talk almost makes me wanna read up 
[11:24:35] <ski> arash : plug in the variable parts into the static parts
[11:24:50] <arash> thank you
[11:25:08] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.123)
[11:25:21] <ski> (not that i've heard it called "rendering" .. but that sounds like the likely meaning)
[11:25:57] <PlanckWalk> It's more used in PHP-land than other server code.
[11:25:59] <ski> ds : Continuation-Passing Style vs. Direct Style (the latter being "normal programming style", not any particular stylized form intended for some particular effect)
[11:26:05] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[11:26:24] *** Quits: junebug (~junebug@2600:1700:3db0:2540:e6d0:8f86:be89:6d1) (Quit: Leaving)
[11:27:16] <ds> Ahh so CPS being "whatever tf i need to do to make github/travis/whatever happy"? heh, first ive heard that term
[11:27:27] <ds> what's it called when DS == CPS?
[11:27:38] <PlanckWalk> It's confusing since the term "render" is also used for producing images
[11:27:45] <ski> ds : oh, and the Rust (or really update-in-place vs. copy-update) stuff was a separate conversation from the CPS vs. DS one
[11:27:50] <PlanckWalk> (Sometimes also rendering PDFs)
[11:27:54] <ProfSimm> ds: CPS is when instead of returning a result like "return 123" you get an argument called result, and you call it "result(123)"
[11:28:23] <ProfSimm> ds: so you keep calling things until your stack blows :P
[11:28:23] <ds> ahh gotcha, so nitpicky stuff similar to yoda style conds
[11:28:46] <PlanckWalk> So you can have a PHP server that renders HTML that includes JS that renders PDFs that the browser then renders on the screen.
[11:28:55] <ski> ds : CPS is when you, instead of "returning your result", you call (in tail position, possibly using a `return' keyword if required) a callback parameter (called a "continuation") that expresses "what to do after" computing your result
[11:28:56] <ProfSimm> ds: tail call optimization or thunk execution loops are 2 strategies to avoid the stack blowing
[11:29:39] <PlanckWalk> But I guess that's not worse than a compiler that compiles to some IL that a runtime then compiles to machine code.
[11:29:39] *** Joins: Sidiq (~Sidiq@36.72.21.216)
[11:29:40] *** Joins: jab416171 (~jab416171@c-174-52-58-23.hsd1.ut.comcast.net)
[11:30:01] *** Joins: diophantoz_ (~diophanto@user/diophantoz)
[11:32:02] <beaky> so i thought it takes 400 ns to read from ram but i measured and it takes 1634 cpu cycles to read from ram why is it so high
[11:32:37] *** Joins: Klinda (~superleag@user/klinda)
[11:32:48] <ski> ds : this can be useful for promise or async stuff, for expressing multiple alternative "return paths", for "dependency inversion" (CGI is one, somewhat old, example), for allowing "clone" in server transactions on web pages. also it can be useful as an intermediate form in compilers
[11:32:57] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[11:33:46] <ski> oh, and various other things, like expressing backtracking / (angelic) nondeterminism, (cooperative or preemptive) concurrency
[11:33:49] <PlanckWalk> beaky: 1634 CPU cycles is pretty close to 400 ns
[11:33:53] <beaky> my cpu is 4 ghz so that is around 500 ns
[11:34:19] <beaky> so ram is really slow i better make sure everything fits into cache
[11:34:44] <ski> ("so you keep calling things until your stack blows" -- only if you don't have tail calls :)
[11:34:59] <beaky> 500ns to acccess a single 64-bit integer and my tea database has a 128-bit integer for every tea and i have 500 teas
[11:35:11] <PlanckWalk> That will fit in cache
[11:35:24] *** Quits: moniker- (~mon@dh207-120-173.xnet.hr) (Ping timeout: 240 seconds)
[11:35:35] <PlanckWalk> It's only 8kB!
[11:35:37] <beaky> my l1 cache is 32kb i think
[11:35:56] *** Joins: src_ (~src@user/src)
[11:36:00] <beaky> nice so i have plenty of room to grow my tea collection for the next 10 years
[11:36:23] *** Quits: src (~src@user/src) (Read error: Connection reset by peer)
[11:36:35] *** Joins: moniker- (~mon@dh207-120-173.xnet.hr)
[11:36:59] <ProfSimm> ski: I'll probably have a runtime implementation of a borrow, that uses reverse linked list to track "lenders"
[11:37:33] <ProfSimm> ski: so basically 1) void sort(lend foo);    2) foo2 = sort(foo);
[11:37:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:38:38] *** Joins: raym (~raym@user/raym)
[11:38:57] <PlanckWalk> beaky: Accessing a block of RAM is faster than accessing random words
[11:39:07] <PlanckWalk> Even without a cache
[11:39:33] *** Quits: jab416171 (~jab416171@c-174-52-58-23.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[11:40:03] <beaky> my ram's speed is 1,800,000 hz with a latency of 18 cycles (so around 8ns latency) so why is the actual random word access 500ns
[11:40:08] *** Quits: Payam25 (~Payam@138.106.57.132) (Quit: Client closed)
[11:40:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[11:40:33] <ski> ProfSimm : not sure how to interpret those two (1) and (2). (how are they related ?)
[11:40:58] <ProfSimm> ski: how you call the same function if you want to modify in-place vs get a modified copy
[11:41:34] <PlanckWalk> beaky: I don't know, because 500 ns is longer than I've ever seen on a modern system.
[11:41:50] <ski> ProfSimm : so (1) isn't a signature ?
[11:42:08] <ProfSimm> ski: no I mean i don't use the return result
[11:43:37] <ski> huh ?
[11:44:29] <PlanckWalk> 500 ns sounds more like 30 years ago.
[11:44:32] *** Joins: absc (~absc@81.31.144.28)
[11:45:12] <PlanckWalk> Older than that even.
[11:45:43] <edgar-rft> but 500 ns ago is clearly less than 30 years ago :-)
[11:45:51] *** Joins: Rounin (~david@84.212.130.215)
[11:45:56] <PlanckWalk> True!
[11:46:02] <PlanckWalk> A paradox to ponder.
[11:46:25] <PlanckWalk> I recall that it was ~30 ns in the mid 1990's
[11:46:28] <edgar-rft> one must always try to see the positive things in life :-)
[11:46:34] <ProfSimm> ski: OK: 1) foo = [1, 3, 4, 2]; sort(lend foo);    2) foo = [1, 3, 4, 2]; foo2 = sort(foo);
[11:46:36] *** Joins: MatSharrow (~matthew@11.20.9.51.dyn.plus.net)
[11:47:02] <ProfSimm> ski: I guess if the syntax for lend is & then it'll look like full-blown C++ or Rust
[11:47:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 272 seconds)
[11:47:35] <edgar-rft> that looks to me like a sort of foo
[11:47:38] <PlanckWalk> beaky: Sure you're not reading it from SSD?
[11:47:48] <PlanckWalk> It might have been swapped to disk
[11:47:54] <ProfSimm> edgar-rft: w?
[11:48:14] <edgar-rft> no, foo!
[11:48:52] <beaky> no i dont have swap
[11:49:09] <beaky> i thought 500ns was normal for modern systems with ddr4
[11:50:16] <beaky> although the specs says like 10ns latency
[11:51:11] <ski> ProfSimm : mhm
[11:51:19] * ski . o O ( <https://mercurylang.org/information/doc-latest/mercury_ref/State-variables.html> )
[11:51:22] *** Joins: aradesh (~aradesh@user/aradesh)
[11:52:59] <PlanckWalk> I think the worst case is about 50 RAM clock cycles (for closing a row and opening a new row and gating the column address and getting the data onto the bus)
[11:53:29] *** Quits: Buggys (~Buggys@185.149.90.52) (Remote host closed the connection)
[11:53:36] <beaky> nice so 12ns worst case
[11:53:48] <Hash> o/
[11:53:52] <PlanckWalk> Well, the RAM clock doesn't usually run at 4 GHz
[11:54:09] <beaky> yes my ram is running at only 1.8 ghz
[11:55:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[11:56:47] *** Joins: hiyori (~kaneko@user/hiyori)
[11:56:55] <hiyori> http://dpaste.com/FH8RFWKDN
[11:57:22] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[11:57:35] <hiyori> I have MinGW installed on Gentoo not to mention.
[11:58:20] *** Joins: k8yun (~k8yun@user/k8yun)
[11:58:31] <ds> ski: doing some reading, closest analogy I can come to for CPS is maybe elixir pipeline's, except crossed with the concept of yielding a Promise since there's no "continuation function" as such. how many miles away from accurate is this?
[11:58:43] *** Quits: k8yun (~k8yun@user/k8yun) (Remote host closed the connection)
[11:59:15] <ds> you people are clearly smarter than me either way. saw someone talk about tea and all i thought was whether I'd put enough sugar in my first one this morning
[12:00:04] <ski> hm, "elixir pipeline" is the `operand |> operator' thing ?
[12:00:12] <ds> ye
[12:00:45] <ski> i think that's just an alternative concrete syntax for (or else, having the same behaviour as) `operator(operand)'
[12:01:02] <edgar-rft> hiyori: are you trying to re-compile Gentoo with MinGW?
[12:01:33] <ski> CPS is a particular "style" in which you can program (some part, or maybe most of the program)
[12:02:10] *** Joins: mrig (~mrig@user/mrig)
[12:02:24] <user51> i thought my lexer had an error, but instead it correctly printed the string that says an error has been found :|
[12:02:37] <ski> two other styles which are comparable are accumulating-style (which might be familiar if you've done any Erlang or Elixir), and state-passing/threading-style (which is the same, except you also return the newest version of the state, threading it into (through) subsequent calls that require access to it)
[12:03:05] <hiyori> edgar-rft You're misinterpreting what I am trying to point out, I am trying to compile a little C file into a Windows EXE file on Gentoo Linux.
[12:03:14] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[12:04:31] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[12:06:17] <ds> ski: yeah, ive only dabbled a little in elixir but it just uses the input/return as the first param iirc. i was thinking that style/way of writing it, only with an extra function passed in to act as the continuation thingy
[12:06:28] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.123) (Ping timeout: 256 seconds)
[12:07:13] <ski> well, that is only a local change, affecting how you express a particular call
[12:07:46] <ski> CPS is more like a pervasive change, affecting a larger portion of the program
[12:08:37] <ds> right
[12:09:05] <ski> if you have a function written in CPS, and you want to call it from another function, you either have to write that other function in CPS as well, or you have to "start the CPS" in that other function .. which may not give you the behaviour you're after, by using the CPS
[12:11:05] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:2978:9595:8415:4304)
[12:12:14] *** Quits: hiyori (~kaneko@user/hiyori) (Quit: leaving)
[12:12:49] *** Quits: blahboybaz (~blahboyba@c-67-161-97-9.hsd1.wa.comcast.net) (Quit: leaving)
[12:14:39] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[12:14:47] *** Joins: thecashewtrader (~user@1.186.113.137)
[12:14:58] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[12:15:07] <thecashewtrader> Hi!
[12:15:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:15:24] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[12:15:46] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 272 seconds)
[12:15:48] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[12:16:40] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[12:17:16] <thecashewtrader> I need some help regarding my gitlab account at https://gitlab.com/thecashewtrader
[12:17:16] <thecashewtrader> The account has become "dirty" as in:
[12:17:16] <thecashewtrader> - I have random autocommit scripts that are mostly for backup of notes
[12:17:16] <thecashewtrader> - In some old projects I didn't have proper commit messages
[12:17:17] <bayaz> Title: thecashewtrader 
[12:17:19] <thecashewtrader> - There's https://gitlab.com/thecashewtrader/emojis which also gets these random non-code commits with no proper commit messages
[12:17:20] <bayaz> Title: thecashewtrader / emojis 
[12:17:22] <thecashewtrader>  
[12:17:25] <thecashewtrader> How bad is this? Should I clean this, if it is even possible? Is there some way to isolate non-code commits etc. from actual commits?
[12:17:35] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[12:18:57] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: Leaving)
[12:19:19] *** Joins: toastloop (~toastloop@user/toastloop)
[12:20:07] <Hash> https://www.youtube.com/watch?v=kx3qwqtZvs4
[12:20:08] <bayaz> Title: Deep Sea Internet Cables Connect the World 
[12:21:11] <Hash>   7 layers 
[12:21:55] <ds> ski: found a good (so far) post that explains how i made the elixir/pipeline link - "every call in CPS must be Tail-call. The difference is that instead of passing an accumulator, we pass a continuation to the next call" https://medium.com/lambdaside/on-the-continuation-passing-style-and-its-role-in-fp-d07f151b6c5c
[12:21:57] <bayaz> Title: On the Continuation-Passing Style and its role in FP 
[12:22:33] <ski> yes. CPS can be seen as a particular kind of accumulating-style (plus some more)
[12:22:42] <arahael> thecashewtrader: "dirty" just means that you have changes you haven't committed.
[12:24:26] <thecashewtrader> arahael: I actually meant "dirty" as in the repositories do not have proper commit messages, and there's automated commits which are not related to code. Should those be cleaned up or is it common for people to have old projects that are "dirty" like mine?
[12:24:48] <arahael> thecashewtrader: More common than you think, but definitely bad practice.
[12:24:53] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[12:25:14] <ski> ds : the continuation parameter simulates (encodes) what the activation stack would normally do
[12:25:24] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:25:28] *** Joins: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com)
[12:25:42] <arahael> thecashewtrader: I like to do an 'interactive rebase' before pushing stuff up for public eyes. ('git rebase -i commit')
[12:26:18] <ski> on a quick skim, this article seems mostly ok. it doesn't really go into why one'd want to use CPS, though
[12:26:57] <Hash> 35TB/d
[12:27:01] <Hash> 35TB/s
[12:27:18] <thecashewtrader> arahael: I see, I just started doing proper commit messages some time ago 😅. On another note, I wonder if there's a way to "hide" automated commit messages though. For example: https://gitlab.com/thecashewtrader/org-notes has lots of these which are done through a script.
[12:27:19] <bayaz> Title: thecashewtrader / org-notes 
[12:27:24] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[12:27:25] <Hash> High Tide MS/FB cable, 16Tbs
[12:27:36] <arahael> thecashewtrader: Not really.
[12:27:49] <arahael> thecashewtrader: But you can get fancy with `git log` and various combinations of grep.
[12:28:12] *** Quits: Gry (~quassel@botters/gry) (Ping timeout: 240 seconds)
[12:28:27] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 272 seconds)
[12:28:34] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[12:28:43] *** Joins: wolfshappen (~waff@irc.furworks.de)
[12:28:54] <ski> (one, rather trivial, example of that would be a function that computes the product (non-tail-recursively) of all the numbers in a list (or perhaps a tree). expressing this with CPS instead, you can easily abort if you happen upon a zero)
[12:28:57] *** Quits: yo (~ayu@2405:201:5502:83a:2205:4da7:8c0a:818a) (Ping timeout: 240 seconds)
[12:29:06] *** Joins: Buggys (~Buggys@185.149.90.52)
[12:30:31] *** bayaz sets mode: -q Android!*@*
[12:30:49] *** bayaz sets mode: -q $a:Gdegree
[12:30:57] <thecashewtrader> arahael: Should I be worried in this case? I don't want potential employers or other people to think I am inflating my commit graph when they see my profile. Sorry if this is off topic, this channel seemed to be the best fit from the channels list.
[12:31:59] *** Joins: va5c0 (~vasco.nun@50.0.208.46.dyn.plus.net)
[12:32:05] <arahael> They're not going to be looking at the commit graph, they'll be looking at what you've done and your employment history. However, I'm entirely the wrong person to ask about that
[12:33:24] <thecashewtrader> arahael: I see, thanks!
[12:33:29] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:33:32] *** Parts: thecashewtrader (~user@1.186.113.137) (ERC 5.4 (IRC client for GNU Emacs 28.0.91))
[12:37:38] *** Joins: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de)
[12:37:38] *** Quits: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de) (Changing host)
[12:37:38] *** Joins: menace (~someone@user/menace)
[12:37:48] *** menace is now known as Deknos
[12:38:16] *** Vieillard is now known as Sauvin
[12:40:20] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[12:40:31] *** Quits: va5c0 (~vasco.nun@50.0.208.46.dyn.plus.net) (Read error: Connection reset by peer)
[12:42:17] *** Joins: Gaboradon (~Gaboradon@user/Gaboradon)
[12:42:27] *** Joins: dan01 (~dan01@2a02:2f09:3805:0:9155:c3f6:45fe:d59e)
[12:42:44] <Gaboradon> Hello
[12:43:08] <flakland> are you from new jersey?
[12:43:37] *** Quits: vukky (~vukky@wikipedia/vukky) (Read error: Connection reset by peer)
[12:43:56] <Gaboradon> I'm wondering if there is such a thing such as "packing jobs into threads dynamically" like the engine is written in a way that it usually expects many things to not take a full CPU core and instead of making it their own thread it would pack that into a worker thread?
[12:43:58] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:44:01] *** Joins: vukky (~vukky@wikipedia/vukky)
[12:44:04] <ejjfunky0> what's in new jersey?
[12:44:15] *** Joins: va5c0 (~vasco.nun@50.0.208.46.dyn.plus.net)
[12:44:36] *** Quits: u0_a83 (~hexingb@103.37.140.45) (Ping timeout: 240 seconds)
[12:44:42] <edgar-rft> are you from new jersey? no? then you might know my brother, he's neither from new jersey!
[12:44:55] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 240 seconds)
[12:45:41] <flakland> menlo park
[12:46:16] *** Joins: u0_a83 (~hexingb@103.37.140.28)
[12:46:57] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (Ping timeout: 240 seconds)
[12:47:06] <ejjfunky0> "Menlo Park is a city at the eastern edge of San Mateo County within the San Francisco Bay Area of California in the United States"
[12:47:26] <flakland> https://en.wikipedia.org/wiki/Menlo_Park,_New_Jersey
[12:47:27] <bayaz> Title: Menlo Park, New Jersey - Wikipedia 
[12:47:50] <ejjfunky0> flakland, heh.
[12:48:02] *** Quits: momcorp (7fdc0af8d8@2604:bf00:561:2000::277) (Ping timeout: 240 seconds)
[12:48:37] *** Quits: troels (4eee6b4dcf@2604:bf00:561:2000::3b3) (Ping timeout: 240 seconds)
[12:48:39] *** Joins: jamesp_ (7d1330d23d@sourcehut/user/jamesp)
[12:48:41] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (Ping timeout: 245 seconds)
[12:48:48] *** jamesp_ is now known as jamesp
[12:48:49] <mrig> Hello :)
[12:49:02] *** Quits: eein (35f97d3dbd@2604:bf00:561:2000::2a6) (Ping timeout: 260 seconds)
[12:49:02] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (Ping timeout: 260 seconds)
[12:49:12] *** Joins: troels (4eee6b4dcf@2604:bf00:561:2000::3b3)
[12:49:20] *** Quits: va5c0 (~vasco.nun@50.0.208.46.dyn.plus.net) (Ping timeout: 272 seconds)
[12:49:22] *** Joins: momcorp (7fdc0af8d8@2604:bf00:561:2000::277)
[12:49:23] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[12:49:33] <PlanckWalk> Gaboradon: Sounds like something that task queues are for.
[12:49:50] <ejjfunky0> hello mrig
[12:49:50] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[12:49:54] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[12:49:54] *** Joins: eein (35f97d3dbd@2604:bf00:561:2000::2a6)
[12:49:56] <Gaboradon> PlanckWalk: Ah so the proper term is "task queues" 
[12:49:57] <PlanckWalk> Or, you know, scheduling in general.
[12:50:07] <mrig> Which command line application would you recommend for downloading the content of a folder via ftp? I tend to just reach for filezilla but was wondering if there is a way to use wget for this?
[12:50:14] *** Joins: va5c0 (~vasco.nun@162.154-253-62.static.virginmediabusiness.co.uk)
[12:50:33] <PlanckWalk> Gaboradon: It's a common enough type of thing to have like a hundred different terms for variants
[12:50:56] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[12:51:13] <mrig> I suppose I could just look at doing this with a simple go program, now that I come to think of it.
[12:52:40] <ejjfunky0> mrig, sounds good
[12:58:40] *** Joins: rsx (~dummy@ppp-188-174-156-244.dynamic.mnet-online.de)
[12:59:42] *** Quits: kariosfox (~kariosfox@176.221.123.109) (Remote host closed the connection)
[12:59:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[13:00:32] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[13:02:08] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:ad7e:34c:8420:f55f) (Remote host closed the connection)
[13:04:05] *** Quits: Sidiq (~Sidiq@36.72.21.216) (Quit: Client closed)
[13:05:35] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[13:06:07] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[13:06:28] *** Joins: gry (~quassel@botters/gry)
[13:06:32] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[13:07:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:10:13] <smallville7123> welp qwq
[13:10:14] <smallville7123> https://github.com/JetBrains/skia-build/issues/8
[13:10:15] <bayaz> Title: "src/gpu/GrCaps.h" not found ? Issue #8 ? JetBrains/skia-build 
[13:10:30] *** Quits: diophantoz_ (~diophanto@user/diophantoz) (Ping timeout: 256 seconds)
[13:10:36] *** Joins: rcoote (~rcoote@2a02:908:690:a140:7f7a:fd11:d1e1:ad15)
[13:11:47] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:34] *** Quits: rvgate (~rvgate@user/rvgate) (Quit: Ping timeout (120 seconds))
[13:13:57] *** Joins: rvgate (~rvgate@user/rvgate)
[13:14:46] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[13:16:55] *** Joins: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca)
[13:18:38] *** Quits: Daemonick (~Daemonick@193.92.118.5.dsl.dyn.forthnet.gr) ()
[13:18:54] *** Joins: jontxu_ (~jon@user/jontxu)
[13:19:07] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[13:19:18] *** jontxu_ is now known as jontxu
[13:22:36] *** Quits: src_ (~src@user/src) (Read error: Connection reset by peer)
[13:23:16] *** Joins: src (~src@user/src)
[13:25:25] *** Joins: src_ (~src@user/src)
[13:26:59] *** Quits: xff0x (~xff0x@2001:1a81:5339:f000:1ec4:ce6f:8558:a9e8) (Ping timeout: 256 seconds)
[13:29:12] *** Quits: src (~src@user/src) (Ping timeout: 256 seconds)
[13:29:46] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 256 seconds)
[13:29:57] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Ping timeout: 240 seconds)
[13:32:39] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[13:34:28] *** Joins: src__ (~src@user/src)
[13:35:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:36:37] *** Quits: wildo (~lain6141@119.224.72.222) (Quit: leaving)
[13:38:19] *** Quits: src_ (~src@user/src) (Ping timeout: 250 seconds)
[13:38:54] *** Joins: xff0x (~xff0x@2001:1a81:5339:f000:1ec4:ce6f:8558:a9e8)
[13:39:41] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[13:41:05] *** Quits: src__ (~src@user/src) (Read error: Connection reset by peer)
[13:41:24] *** Joins: src__ (~src@user/src)
[13:42:13] *** Quits: tehenderz_ (~tehenderz@ti0018a400-0109.bb.online.no) (Ping timeout: 240 seconds)
[13:43:03] *** Quits: src__ (~src@user/src) (Read error: Connection reset by peer)
[13:43:22] *** Joins: src__ (~src@user/src)
[13:46:03] *** Joins: teut (~teut@122.161.83.81)
[13:46:51] *** Joins: monr0e (~monr0e@mail.vixen.international)
[13:46:51] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[13:47:23] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[13:48:58] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 250 seconds)
[13:49:00] *** Joins: va5c0_ (~vasco.nun@91.110.154.119)
[13:49:02] *** Quits: u0_a83 (~hexingb@103.37.140.28) (Read error: Connection reset by peer)
[13:49:20] *** Joins: u0_a83 (~hexingb@103.37.140.28)
[13:49:57] *** Joins: u0_a84 (~hexingb@2409:8900:2940:7fc8:fd61:4176:1ccd:11ad)
[13:50:03] *** Quits: src__ (~src@user/src) (Read error: Connection reset by peer)
[13:50:43] *** Joins: src (~src@user/src)
[13:50:54] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[13:51:29] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[13:52:24] *** Joins: tehenderz (~tehenderz@ti0018a400-1550.bb.online.no)
[13:53:00] *** Quits: va5c0_ (~vasco.nun@91.110.154.119) (Ping timeout: 240 seconds)
[13:53:34] *** Joins: src_ (~src@user/src)
[13:53:51] *** Quits: u0_a83 (~hexingb@103.37.140.28) (Ping timeout: 256 seconds)
[13:54:19] *** Joins: Burgundy (~NA@86.121.143.206)
[13:54:53] *** Joins: u0_a8 (~hexingb@103.37.140.35)
[13:55:03] <pyzozord> mrig: if you have ssh access to that folder scp is quite great
[13:55:29] <pyzozord> mrig: otherwise there is sftp utility from openssh package
[13:55:29] *** Joins: u0_a81 (~hexingb@2409:8900:2940:9b1f:4d6c:5772:416e:ba7c)
[13:55:36] <pyzozord> however I never used it myself
[13:56:36] *** Quits: src (~src@user/src) (Ping timeout: 240 seconds)
[13:57:03] *** Quits: src_ (~src@user/src) (Read error: Connection reset by peer)
[13:57:43] *** Joins: src (~src@user/src)
[13:58:38] *** Quits: u0_a84 (~hexingb@2409:8900:2940:7fc8:fd61:4176:1ccd:11ad) (Ping timeout: 252 seconds)
[13:59:31] *** Quits: u0_a8 (~hexingb@103.37.140.35) (Ping timeout: 256 seconds)
[14:02:23] *** Joins: src_ (~src@user/src)
[14:05:15] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Remote host closed the connection)
[14:05:45] *** Quits: src (~src@user/src) (Ping timeout: 256 seconds)
[14:06:29] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[14:06:33] *** Quits: src_ (~src@user/src) (Read error: Connection reset by peer)
[14:06:37] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: Leaving)
[14:06:51] *** Joins: src_ (~src@user/src)
[14:07:54] *** Joins: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk)
[14:07:54] *** Quits: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk) (Changing host)
[14:07:54] *** Joins: GeDaMo (~GeDaMo@user/gedamo)
[14:08:33] *** Quits: src_ (~src@user/src) (Read error: Connection reset by peer)
[14:08:54] *** Joins: src_ (~src@user/src)
[14:13:39] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[14:15:33] *** Quits: src_ (~src@user/src) (Read error: Connection reset by peer)
[14:16:12] *** Joins: src (~src@user/src)
[14:16:37] *** Quits: audiomouse (~audio@user/audio) (Ping timeout: 240 seconds)
[14:16:54] *** Joins: zachel (~zachel@user/zachel)
[14:17:02] *** Joins: diophantoz_ (~diophanto@user/diophantoz)
[14:18:23] *** Joins: src_ (~src@user/src)
[14:20:44] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[14:21:15] *** Joins: u0_a82 (~hexingb@103.37.140.35)
[14:21:48] *** Quits: src (~src@user/src) (Ping timeout: 240 seconds)
[14:22:33] *** Joins: u0_a83 (~hexingb@2409:8900:2940:1e9a:e8d1:2ca4:c9c0:c6fb)
[14:24:16] <mrig> only ftp or http, it is just a little tedious doing it manually when there are a lot of files to retrieve.
[14:24:29] *** Quits: u0_a81 (~hexingb@2409:8900:2940:9b1f:4d6c:5772:416e:ba7c) (Ping timeout: 252 seconds)
[14:24:47] <mrig> filezilla works fine, but it would be nice not to need a clunky GUI applicaiton.
[14:25:03] *** Quits: src_ (~src@user/src) (Read error: Connection reset by peer)
[14:25:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[14:25:22] *** Joins: src_ (~src@user/src)
[14:25:42] <mrig> I suppose you would start by mapping the file system and making a job queue.
[14:25:48] *** Quits: u0_a82 (~hexingb@103.37.140.35) (Ping timeout: 250 seconds)
[14:25:51] <mrig> something along those lines :)
[14:26:02] *** Quits: src_ (~src@user/src) (Remote host closed the connection)
[14:26:13] *** Joins: src (~src@user/src)
[14:26:14] *** Quits: va5c0 (~vasco.nun@162.154-253-62.static.virginmediabusiness.co.uk) (Ping timeout: 272 seconds)
[14:26:53] *** Quits: src (~src@user/src) (Read error: Connection reset by peer)
[14:27:24] *** Joins: src (~src@user/src)
[14:28:06] *** Joins: va5c0 (~vasco.nun@50.0.208.46.dyn.plus.net)
[14:28:10] <pyzozord> there is ftp tool in that openssh package as well
[14:28:54] *** Joins: toastloop (~toastloop@user/toastloop)
[14:29:42] *** Joins: u0_a84 (~hexingb@103.37.140.45)
[14:29:55] *** Joins: src_ (~src@user/src)
[14:30:02] *** Quits: zaher (~zaher@37.48.184.202) (Ping timeout: 272 seconds)
[14:30:20] <pyzozord> filezilla is a classic, I remember first three jobs I worked we used filezilla to deploy
[14:30:32] <mrig> oh right, that could be worth a look.
[14:30:57] <pyzozord> mrig: you might have it already installed, try man ftp
[14:31:16] <pyzozord> I don't know how to use it though
[14:31:33] <mrig> Yes it is a great program, just kind of intrigued by what would be involved in automating a file transfer using the minimum.
[14:31:59] <user51> well, somebody beat me to it :( https://github.com/dbohdan/all-caps-basic
[14:32:00] <bayaz> Title: GitHub - dbohdan/all-caps-basic: (WIP) A compiler written in Awk 
[14:32:08] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[14:32:15] *** Joins: Gallomimia- (~Gallomimi@node-1w7jra2a2gqpwinv60mbo80pd.ipv6.telus.net)
[14:32:28] <mrig> oh yes it is there, makes me realise that I should have been saying using basic TCPIP on the command line.
[14:32:33] <beaky> my highly robust reliable ram latency benchmark program seems my ram has 5000 cpu cycles of latency which is around 500ns of latency (my cpu is 3.8 ghz) https://bpa.st/BXHQ
[14:32:34] <bayaz> Title: View paste BXHQ 
[14:32:47] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:32:48] <pyzozord> I am personally so excited about the V lang, I keep thinking about it
[14:33:00] *** Quits: src (~src@user/src) (Ping timeout: 240 seconds)
[14:33:03] <pyzozord> must focus on golang for now though
[14:33:10] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpx01a9bwsew0sg.ipv6.telus.net) (Ping timeout: 250 seconds)
[14:33:12] <mrig> What is it that makes it interesting?
[14:33:15] <mrig> v lang?
[14:33:36] *** Quits: u0_a83 (~hexingb@2409:8900:2940:1e9a:e8d1:2ca4:c9c0:c6fb) (Ping timeout: 250 seconds)
[14:33:44] <pyzozord> it's alot like go but it you can choose several memory models
[14:33:53] <beaky> what is the most optimal memory model
[14:33:57] <pyzozord> manage memory manually, autoinserted free calls or gc
[14:34:27] <pyzozord> but it's just generally interested because it's primary philosophy is to be simple
[14:34:34] <pyzozord> as simple as go, possibly simpler
[14:35:12] <pyzozord> it's also very static etc
[14:36:32] <pyzozord> beaky: optimal for speed I think it's preallocated memory organized for spatial and temporal locality
[14:36:41] <mrig> does it have coroutines?
[14:36:53] <pyzozord> mrig: yes and it totally calls them "goroutines"
[14:37:02] <pyzozord> shamlessly stealing go's goroutines
[14:37:14] *** Joins: rtypo (~alex@user/rtypo)
[14:37:15] <pyzozord> which I think is great because go's goroutines are great
[14:37:20] <mrig> oh right I see.
[14:37:38] <mrig> sounds interesting, is it a fork?
[14:37:47] <pyzozord> no it's built from ground up by one guy
[14:37:55] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[14:37:57] <pyzozord> he has contributors though
[14:37:57] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:38:19] <pyzozord> it's also self hosted, I think self hosted languages are amazing
[14:38:31] <mrig> yes that's pretty cool.
[14:38:38] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Quit: leaving)
[14:38:41] <pyzozord> this convinced me why compilers that emmit c code are still real compilers
[14:38:49] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: leaving)
[14:38:54] <pyzozord> because they you can run compiler to emmit in c the compiler itself
[14:39:06] <pyzozord> and then use that compiler to emmit the same compiler in your language
[14:39:19] <pyzozord> voila, bootstrapping process of self hosted language
[14:39:25] <mrig> looks like filezilla is not using threads.
[14:39:34] <pyzozord> now you have a compiler for your language written in your language that can compile your language
[14:40:09] <mrig> I suppose one has to be careful about how many they use, but a couple for file download transfers would be fine I would imagine.
[14:40:22] <mrig> not sure what the normal etiquette would be in that situation.
[14:41:20] <pyzozord> watch out I remember some cheap ftp hostings can have limit to the total number of simultaneous ftp connections per user, it might block you for some time if you exceed it
[14:42:39] <mrig> right, you would have thought that these things might have been within the protocol.
[14:42:56] <mrig> when shaking hands, how many hands can I use?
[14:43:03] <mrig> that sort of thing :)
[14:43:27] <pyzozord> yeah that's a good idea, not sure why it's not there
[14:43:51] <mrig> It is not as if coroutines are new or anything :\
[14:45:06] <mrig> just slow on the uptake I suppose, who needs elegance if you can get away with bruit force. That said; I suppose the bandwidth was not up to it in the past either though.
[14:46:10] *** Joins: cursey (~cursey@user/cursey)
[14:46:41] *** Quits: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) (Remote host closed the connection)
[14:46:48] <mrig> the servers upload band width would be a massive limit most of the time too I suppose.
[14:47:48] *** Joins: cvemys (~cvemys@user/cvemys)
[14:47:55] *** Quits: noteness (~noteness@user/noteness) (Ping timeout: 240 seconds)
[14:48:58] *** Joins: noteness (~noteness@user/noteness)
[14:49:37] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[14:51:02] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[14:51:12] *** Joins: toastloop (~toastloop@user/toastloop)
[14:51:14] *** Quits: rcoote (~rcoote@2a02:908:690:a140:7f7a:fd11:d1e1:ad15) (Quit: Konversation terminated!)
[14:54:12] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[14:56:08] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: leaving)
[14:56:35] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[15:01:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[15:02:09] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[15:03:11] *** Joins: swp (~Thunderbi@2001:610:450:90::2:1026)
[15:04:15] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Read error: Connection reset by peer)
[15:05:58] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:06:08] *** Quits: u0_a84 (~hexingb@103.37.140.45) (Ping timeout: 272 seconds)
[15:07:49] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Remote host closed the connection)
[15:08:41] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 272 seconds)
[15:09:11] *** Joins: u0_a84 (~hexingb@103.37.140.45)
[15:10:39] *** Joins: toastloop (~toastloop@user/toastloop)
[15:10:57] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:11:22] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[15:11:31] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[15:12:59] *** Quits: moniker- (~mon@dh207-120-173.xnet.hr) (Remote host closed the connection)
[15:14:43] *** Joins: mithrin (~mithrin@188-167-233-152.dynamic.chello.sk)
[15:17:50] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 250 seconds)
[15:18:20] *** Joins: Twipply (~Twipply@user/twipply)
[15:21:20] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[15:21:48] *** Joins: zachel (~zachel@user/zachel)
[15:23:19] <pyzozord> is there some kind of automatic code generation tool that can create c interface for c++ code?
[15:23:45] <pyzozord> it should be possible in most cases no?
[15:24:11] <pyzozord> I'm wondering how can I use some c++ libraries in go
[15:24:20] <GeDaMo> Isn't it just a case of wrapping the function declarations in a extern "C" {} ?
[15:24:47] <pyzozord> someone here did it manually, but big c++ libraries are too big to do it manually 
[15:24:51] <pyzozord> https://stackoverflow.com/a/1721230/18112619
[15:24:52] <bayaz> Title: How to use C++ in Go 
[15:25:24] <GeDaMo> http://www.swig.org/Doc2.0/Go.html
[15:25:25] <bayaz> Title: SWIG and Go 
[15:25:33] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:25:39] <pyzozord> for functions it might be just the extren trick, but classes are trickier
[15:26:00] <KillerWasp> if Go need C++ for work, then use C++ and not Go. :/
[15:27:06] <pyzozord> I want to use https://skia.org/ from go
[15:27:06] <bayaz> Title: Skia 
[15:27:21] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:27:54] <KillerWasp> pyzozord: ok, like a XY question...
[15:28:02] <pyzozord> That swig thing seems interesting "SWIG is a software development tool that connects programs written in C and C++ with a variety of high-level programming languages"
[15:28:25] <KillerWasp> pyzozord: If a library doesn't support the language you want, then find another library.
[15:28:34] <pyzozord> KillerWasp: ok yeah could be xy case, I guess the real question is "how can I use skia in go"
[15:28:40] *** Joins: moniker- (~mon@dh207-120-173.xnet.hr)
[15:28:52] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:29:14] *** Joins: vitali64 (~vitali64@user/vitali64)
[15:29:18] <pyzozord> I specifically want this library, that's the best one I found. It has hardware accelerated 2d graphics, lots of features and is used by google chrome
[15:29:49] <pyzozord> I mean specficially 2d vector grapihcs
[15:30:07] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[15:30:18] <GeDaMo> Are you sure skia doesn't already support go?
[15:30:34] <pyzozord> I have never thought to check
[15:30:37] <GeDaMo> https://pkg.go.dev/go.skia.org/skia
[15:30:37] <bayaz> Title: skia module - go.skia.org/skia - pkg.go.dev 
[15:31:11] <pyzozord> yeah 1.1k stars on gh https://github.com/go-graphics/skia
[15:31:13] <bayaz> Title: GitHub - go-graphics/skia: Skia is a complete 2D graphic library for drawing Text, Geometries, and Images. 
[15:31:19] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:31:30] *** Joins: Atque (~Atque@user/atque)
[15:31:43] <pyzozord> that's amazing
[15:32:06] <pyzozord> ok, then I should be able to do 2d games as much as I want now
[15:32:12] <pyzozord> well except when math is needed
[15:32:35] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:33:46] *** Joins: thinegen (~thinegen@user/thinegen)
[15:35:38] *** Quits: thinegen (~thinegen@user/thinegen) (Client Quit)
[15:35:50] <pyzozord> looking at the DEPS file is a bit worrying though https://github.com/go-graphics/skia/blob/go-skia/DEPS
[15:35:51] <bayaz> Title: skia/DEPS at go-skia ? go-graphics/skia 
[15:35:56] *** Joins: thinegen (~thinegen@user/thinegen)
[15:37:04] <GeDaMo> SPIR-V has to do with shaders
[15:37:44] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[15:38:03] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:38:32] <pyzozord> imgui is that library for immediate mode guis
[15:38:36] *** Quits: va5c0 (~vasco.nun@50.0.208.46.dyn.plus.net) (Ping timeout: 250 seconds)
[15:38:54] <pyzozord> looks like it really a lot of stuff
[15:38:54] <GeDaMo> It has a web server? :|
[15:39:16] <pyzozord> yeah this is a bit excessive what they have in DEPS
[15:39:21] *** Joins: NEYi (~NEYi@109.251.216.38)
[15:39:55] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:41:37] <pyzozord> "22761 commits behind google:main"
[15:41:41] *** Joins: va5c0 (~vasco.nun@162.154-253-62.static.virginmediabusiness.co.uk)
[15:42:07] <pyzozord> last commit in april 2019, looks like this was abandoned
[15:42:16] <pyzozord> but maybe is still working
[15:43:13] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:43:39] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3027:99e6:c0d6:7e32)
[15:43:46] <pyzozord> when I explore this repo my head spins
[15:44:04] <pyzozord> it's very big
[15:44:48] <pyzozord> doesn't make want to use this library at all
[15:45:03] <pyzozord> but it's probably the best 2d accelerated graphics library with fonts and everything
[15:45:22] <pyzozord> it's the best library to make interfaces
[15:45:33] <Athas> When you reach max level you stop leveling up.
[15:46:07] <GeDaMo> Is Cairo not still a thing?
[15:46:14] *** Quits: thinegen (~thinegen@user/thinegen) (Quit: Leaving)
[15:46:27] *** Quits: src_ (~src@user/src) (Read error: Connection reset by peer)
[15:46:30] *** Joins: rvalue (~rvalue@user/rvalue)
[15:46:37] *** Quits: tehenderz (~tehenderz@ti0018a400-1550.bb.online.no) (Ping timeout: 256 seconds)
[15:46:57] *** Joins: src (~src@user/src)
[15:46:57] *** Quits: monr0e (~monr0e@mail.vixen.international) (Read error: Connection reset by peer)
[15:46:59] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[15:47:04] *** Joins: tehenderz (~tehenderz@ti0018a400-1665.bb.online.no)
[15:48:13] <pyzozord> says it needs pango for font rendering https://www.cairographics.org/OpenGL/
[15:48:13] <bayaz> Title: Using cairo with OpenGL 
[15:48:19] <pyzozord> but I get dns error fro https://www.pango.org/
[15:49:14] <KillerWasp> Giovanni is the first boss villain in Pokemon.
[15:49:35] *** Joins: monr0e (~monr0e@smtp.vixen.international)
[15:49:36] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:49:37] <pyzozord> but I didn't really know about cairo, I need to learn more about it
[15:49:51] <KillerWasp> Giovanni: i'm correct?
[15:50:13] <KillerWasp> in that's the same nick.
[15:50:53] <KillerWasp> seem a bot of anyone here.
[15:51:28] <Amadiro> pyzozord, if the rendering you need to do can be contained, you can always just do it in C++ and "extern C" your own interfaces (not exposing anything of cairo/skia)
[15:51:44] <Amadiro> depends a bit on what you want to do whether that's reasonable tho
[15:53:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:53:55] <pyzozord> I kind of one "best 2d vector graphics"
[15:53:59] *** Quits: vitali64 (~vitali64@user/vitali64) (Ping timeout: 256 seconds)
[15:54:19] <pyzozord> meaning fully accelerated, with features like shaders, font rendering, etc
[15:54:45] <pyzozord> ofcourse gradients, transparency, textures
[15:54:53] <Amadiro> eh, I'm not sure anyone has that
[15:55:01] <pyzozord> skia has that
[15:55:12] <Amadiro> I don't think skia lets you do arbitrary shaders
[15:55:20] <vysn> if you are able to fold rocks. Would that be Ore-igami!?
[15:55:22] *** Joins: frost (~frost@user/frost)
[15:55:28] <pyzozord> it does https://skia.org/docs/user/sksl/
[15:55:28] <bayaz> Title: SkSL & Runtime Effects 
[15:55:38] <pyzozord> it even has it's own shading language appareantly
[15:55:51] <pyzozord> I think skia is behind chrome and andorid
[15:56:12] <KillerWasp> pyzozord: why you're use a 2D vector graphics? it's for a game?
[15:56:27] <Amadiro> sksl is really basic... why do you need this?
[15:56:32] <pyzozord> ooh nevermind
[15:56:40] <KillerWasp> :(
[15:56:41] <pyzozord> the go library for skia is not THAT bad
[15:56:48] *** Joins: swp1 (~Thunderbi@143.176.249.0)
[15:56:48] *** Quits: swp (~Thunderbi@2001:610:450:90::2:1026) (Ping timeout: 250 seconds)
[15:56:49] *** swp1 is now known as swp
[15:56:56] <pyzozord> it is a fork of the original skia, so all that cruft we saw that's skia itself that depends on that
[15:57:06] <pyzozord> now I understand why it has so much stuff, google uses it for many things
[15:57:08] <Amadiro> you might be better off evaluating your curves on the CPU and then using bare GL/Vk/DX to render or some other higher level framework
[15:57:14] <pyzozord> https://github.com/google/skia
[15:57:15] <mrig> pyzozord: there is gio too, if you would like to avoid dependencies, it is a pain for building when you use cgo.
[15:57:15] <bayaz> Title: GitHub - google/skia: Skia is a complete 2D graphic library for drawing Text, Geometries, and Images. 
[15:57:44] <pyzozord> looks very similar to https://github.com/go-graphics/skia/blob/go-skia/
[15:58:15] <Amadiro> If you evaluate your curves on the CPU they still get rendered with hardware acceleration, but it puts a bit more burden on the CPU. You can also evaluate them on the GPU if you really really want, but I doubt that's worth the effort for you
[15:58:28] <mrig> apparently there is a vector rendering engine, not used it though https://gioui.org/
[15:58:29] <bayaz> Title: Gio UI 
[15:58:54] <pyzozord> huh, looks like skia itself already is a go module https://github.com/google/skia/blob/main/go.mod, maybe they abondoned the fork because it is now supported in the original repo
[15:59:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[16:00:12] <pyzozord> mrig: looks very cool, but that's a ui library, it's higher abstraction level
[16:00:13] <Amadiro> (skia also does it all on the CPU)
[16:00:33] <pyzozord> mrig: I want to make buttons myself
[16:00:38] <pyzozord> from vector graphics
[16:00:43] <mrig> pyzozord: I think you can with that.
[16:00:51] <Amadiro> Most GUI frameworks allow you to do that
[16:00:59] <Amadiro> like in Qt you can get a QPainter and go nuts to make your own widgets
[16:01:02] <mrig> there is not other language is the interesting aspect of that one.
[16:01:09] <mrig> no C nor C++
[16:01:15] <Amadiro> but Qt will still handle all the plumbing for you (events)
[16:01:38] <vysn> There is nothing C can't do
[16:01:44] <vysn> It can even raise your children for you
[16:01:45] <mrig> so building is really simple, cross compiling too, ought to be.
[16:02:10] <mrig> C is not so good at distributed systems.
[16:03:08] *** Quits: sebbu (~sebbu@user/sebbu) (Ping timeout: 272 seconds)
[16:03:23] <smallville7123> how do i build skia?
[16:03:50] <smallville7123> as this fails
[16:03:51] <smallville7123> c++ -shared -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.1.sdk -Wl,-w -dead_strip  @libskottie.so.rsp     -Wl,-install_name,@rpath/libskottie.so -o libskottie.so
[16:03:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[16:04:29] *** Quits: Duchess (~Duchess@2604:3d08:1:1b:c189:b6ab:68c1:858f) (Quit: Client closed)
[16:08:35] <pyzozord> I thought that skia would serve perfectly as graphics library for interfaces for games
[16:09:33] <smallville7123> it builds if i put `skia_enable_skottie=false` in args
[16:09:55] <smallville7123> but if i use `skia_enable_skottie=true` i get undefined references to skottie
[16:10:47] <smallville7123> hmm https://skia.org/docs/user/modules/skottie/
[16:10:48] <bayaz> Title: Skottie - Lottie Animation Player 
[16:11:28] *** Joins: sebbu (~sebbu@user/sebbu)
[16:11:44] <Amadiro> pyzozord, it wouldn't be my first choice, but it could serve as an underlying rendering library to build a UI framework on top of
[16:11:58] <Amadiro> But you will have to do a _lot_ of work to make that happen
[16:12:23] <Amadiro> The state of the art used to be scaleform, now it's often webkit (but scaleform is still popular)
[16:12:34] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[16:13:13] <Amadiro> skia and cairo really only handle a small part of the problem
[16:14:31] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:15:29] <pyzozord> Amadiro: yes that's the plan
[16:15:56] *** Joins: va5c0_ (~vasco.nun@91.110.154.119)
[16:16:09] <pyzozord> nah, uis are simple people make it out to be a big thing
[16:16:27] <Amadiro> they are a big thing -- but maybe not in your case.
[16:16:28] <pyzozord> but I need to draw a rectangle and detect clicks on it
[16:16:45] <pyzozord> that's oversimplification but that's the gist of it
[16:17:08] *** Quits: swp (~Thunderbi@143.176.249.0) (Read error: Connection reset by peer)
[16:17:24] <Amadiro> If you have a complex UI that you got multiple people working on, using something like webkit is a godsent because your UI designers can prototype it in the browser using react and whatnot with all the debugging tools, frameworks and expertise they're used to
[16:17:24] <mrig> don't forget to detect the operating mode first :D
[16:17:32] <Amadiro> and if one of them gets hit by a bus you can replace them for cheap
[16:17:41] <Amadiro> but not all UI requirements are complex -- that's your judgement call
[16:17:43] <mrig> mouse might be turned off, and regexp navigation on!
[16:17:50] <pyzozord> I am thinking only about immediate mode
[16:18:06] <mrig> me too
[16:18:27] <mrig> but like vi modes but for a more visual vi.
[16:18:30] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[16:19:03] <Amadiro> pyzozord, if you're only doing UI elements, CPU-based evaluation (like skia does) is fine, and then since you're presumably pushing this into a GL context or whatever which you control anyway, you can apply any shaders you want even without using sksl. So that can work out
[16:19:04] <mrig> oh that would be so nice, to just have a sane gui lib to use that was easily cross compilable.
[16:19:16] <Amadiro> you can even just render to surfaces, which (at least in the beginning) is much easier to do with skia
[16:19:29] <Amadiro> once you want skia to use your GL context you will have to do a bunch of extra integration work
[16:19:53] *** Quits: va5c0 (~vasco.nun@162.154-253-62.static.virginmediabusiness.co.uk) (Quit: WeeChat 3.4)
[16:20:18] *** Joins: swp (~Thunderbi@143.176.249.0)
[16:21:07] <Amadiro> (I've never done that myself, my skia use-cases have been a bit simpler than that)
[16:21:31] *** Quits: va5c0_ (~vasco.nun@91.110.154.119) (Ping timeout: 256 seconds)
[16:21:59] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[16:22:17] <pyzozord> hmm maybe i should implement vector graphics on gpu myself...
[16:22:24] <pyzozord> but I don't think I'm up for rendering fonts
[16:22:26] <pyzozord> that stuff is crazy
[16:22:45] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: WeeChat 3.5-dev)
[16:23:14] *** Joins: toastloop (~toastloop@user/toastloop)
[16:23:18] <Amadiro> Well, there's three ways of rendering vector graphics. 1) evaluate+rasterize on CPU into surface, render surface (on GPU, can still apply shaders etc) 2) evaluate on CPU, rasterize on GPU 3) evaluate and rasterize on GPU
[16:23:38] <Amadiro> almost nobody does 3) because it's not worth the effort unless you want to render ridiculous amounts of curves
[16:23:58] <Amadiro> there's also some in-between approaches using SDFs and such but don't think that's worth talking too much about since it's pretty special-case
[16:24:04] <Amadiro> but it's sometimes used for font-rendering in games
[16:24:05] <Decker> the third is done by smallville
[16:24:23] <Decker> load a precomputed tilemap :)
[16:27:57] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[16:28:39] *** Joins: kish` (~aqua@user/aqua)
[16:31:46] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:33:54] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[16:34:30] <libh> Is it possible to add an extension to a library be it a static lib foo.a or shared library foo.dll/foo.so with library bar to enhance foo?
[16:35:38] *** Quits: jamea (~jamea@177.239.81.39) (Ping timeout: 256 seconds)
[16:39:48] *** Joins: huillin (~huillin@181.92.141.222)
[16:40:25] <pyzozord> Amadiro: how do you "rasterize" on gpu
[16:40:28] <Amadiro> libh, you mean a library using another library?
[16:40:38] <pyzozord> And what do you mean by "evaluate"?
[16:40:45] <rindolf> Amadiro: yo, thanks4the info
[16:41:58] <libh> I guess you could say it as a library using another library, but imagine the new dll (bar.dll) as like a plugin to enhance foo.dll.
[16:42:13] *** Quits: jontxu (~jon@user/jontxu) (Quit: I must go, my people need me)
[16:42:20] <Amadiro> pyzozord, a vector curve (bezier, spline, or any polygon) goes through three representations typically: 1) mathematical representation (e.g. bezier coefficients in an array), 2) polygonal representation (the "mathematically perfect curve" is broken down into many line segments) and 3) rasterized representation (a 2D grid of pixels is filled with some fill-color based on whether you're inside or outside the curve or some other rule)
[16:42:56] <Amadiro> evaluating the curve takes you from 1) to 2), and rasterizing from 2) to 3), but you can also rasterize a curve directly from it's mathematical representation (with many limitations)
[16:43:05] <Amadiro> rindolf, what info?
[16:43:09] <KillerWasp> fndkjfsfksdjhs
[16:43:29] *** Joins: jontxu (~jon@user/jontxu)
[16:43:40] <KillerWasp> i really hate where a game have bad gameplay
[16:43:49] <KillerWasp> dosbox is a shit for this
[16:44:01] <Amadiro> pyzozord, a typical example would be to take your bezier curve on the CPU (array of coefficients), turn it into an array of points (line-segments approximating the curve) and then ship that off to the GPU where it actually gets rasterized into pixels on the screen (this is how skia does it when hardware acceleration is enabled)
[16:44:58] <KillerWasp> It makes me want to boot that emulator the hell out of my system and create a linux remake of every DOS game I care about.
[16:45:09] <Amadiro> pyzozord, one example of an algorithm for evaluating bezier curves is De Casteljau (but it's not the only or even necessarily best, but it has a very neat visual description): https://en.wikipedia.org/wiki/De_Casteljau%27s_algorithm
[16:45:10] <bayaz> Title: De Casteljau's algorithm - Wikipedia 
[16:45:19] <KillerWasp> s/boot/rip/
[16:45:27] *** Joins: Mangy_Dog (~Mange@user/mangy-dog/x-7397214)
[16:45:51] <KillerWasp> Google translator sucks too, I never know what I'm typing.
[16:46:14] <KillerWasp> Google translator ARE SHIT too, I never know what I'm typing.
[16:46:18] <KillerWasp> very trolling.
[16:46:48] <KillerWasp> sometimes I think it's intentional to soften his own services or alter what I'm trying to say.
[16:48:09] <KillerWasp> If I keep track of all the translation errors, I realize that it has a suspicious pattern and nothing is accidental.
[16:48:52] <rindolf> Amadiro: about vector gfx
[16:49:55] <Amadiro> ah, my pleasure
[16:50:12] *** Quits: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[16:50:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:53:16] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[16:53:23] <KillerWasp> Steam and GOG are shit too. With everything they have done so far they have lost all the prestige they had, like a respect bar in GTA 2 they now have 100% hate. They don't have the slightest respect for the games or their authors. And as if that were not enough, they are slandering the old games by falsifying information and reselling them as if they were the new hits. Now every time I see its logo I run away or throw a Molotov cocktail at 
[16:53:23] <KillerWasp> it to erase its existence from my presence.
[16:53:46] *** Joins: SerialSmile (~SerialSmi@37-147-19-2.broadband.corbina.ru)
[16:54:00] <KillerWasp> i really hate steam and gog
[16:54:03] *** Quits: SerialSmile (~SerialSmi@37-147-19-2.broadband.corbina.ru) (Client Quit)
[16:54:09] <KillerWasp> and unity also
[16:54:37] <KillerWasp> It is the destruction of the video game industry.
[16:54:50] *** Joins: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[16:55:59] *** Joins: swp1 (~Thunderbi@2001:610:450:90::2:1026)
[16:56:39] *** Quits: swp (~Thunderbi@143.176.249.0) (Ping timeout: 256 seconds)
[16:56:39] *** swp1 is now known as swp
[16:58:17] *** Quits: MatSharrow (~matthew@11.20.9.51.dyn.plus.net) (Ping timeout: 240 seconds)
[16:59:15] <hans> Steam (well, Valve) has done a great deal of work for Wine though
[16:59:50] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[16:59:53] <hans> and Steam has the best wine bundle
[17:00:14] *** Joins: MatSharrow (~matthew@11.20.9.51.dyn.plus.net)
[17:00:50] <KillerWasp> hans: wine is still wine, you can go to the trouble of configuring it yourself for your old games.
[17:01:15] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[17:01:19] <KillerWasp> Like just telling it which windows system you want to emulate.
[17:01:49] *** Joins: hololeap (~hololeap@user/hololeap)
[17:01:59] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[17:03:17] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:04:21] <mrig> oh gio will not work without GPU.
[17:08:37] *** Quits: MatSharrow (~matthew@11.20.9.51.dyn.plus.net) (Ping timeout: 240 seconds)
[17:09:46] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[17:13:42] <rindolf> hans: mrig ; hi, sup?
[17:15:30] *** Quits: tinhatcat (~Thunderbi@130-127-14-108.generic.clemson.edu) (Quit: tinhatcat)
[17:17:06] *** Joins: yewscion (~yewscion@52.94.133.128)
[17:19:23] <mrig> pondering ephemerides rindolf, you?
[17:20:47] *** Joins: u0_a8 (~hexingb@2409:8900:2940:74ae:f887:bc16:59da:5d1f)
[17:21:28] <rindolf> mrig: got addicted2  https://www.youtube.com/watch?v=LnSYihRoGA4
[17:21:29] <bayaz> Title: Zootopia - Try Everything By Shakira (Music Video) 
[17:22:51] *** Joins: trevors (~trevors@user/trevors)
[17:23:34] *** Quits: u0_a84 (~hexingb@103.37.140.45) (Ping timeout: 272 seconds)
[17:24:15] <mrig> who is this al fellow; They have a hell of a lot of published works?
[17:24:22] *** Joins: newwebdev13 (~newwebdev@78.135.91.153)
[17:24:33] *** Joins: tinhatcat (~Thunderbi@130-127-14-108.generic.clemson.edu)
[17:25:41] *** Quits: dsrt^ (~dsrt@50.233.120.162) (Remote host closed the connection)
[17:25:48] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[17:26:11] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:26:17] <rindolf> mrig: url?
[17:26:59] <mrig> well it is always published by <someone> et al.
[17:28:09] *** Quits: cvemys (~cvemys@user/cvemys) (Quit: Leaving)
[17:28:36] *** Quits: stagas (~stagas@2a02:587:c41b:6388:4bc0:6887:ad36:7515) (Ping timeout: 240 seconds)
[17:29:01] <mrig> very prolific :P
[17:30:01] *** Joins: wedr (~tom_mai78@pool-108-20-128-8.bstnma.fios.verizon.net)
[17:30:19] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:30:20] <mrig> On a more serious note, I was wondering what the abbreviation meant.
[17:31:26] <merijn> mrig: short for "et alli" aka "and others"
[17:34:22] <mrig> oh or et alia, right it's latin then.
[17:35:24] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Ping timeout: 240 seconds)
[17:35:43] <mrig> Origin of allies to I suppose, alligare.
[17:36:02] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:39:21] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[17:39:41] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:41:21] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[17:41:41] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:43:26] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[17:43:45] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:45:25] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[17:45:43] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[17:45:45] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:47:25] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[17:47:45] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:49:24] *** Joins: Limits (~Limits@user/Limits)
[17:51:26] *** Joins: jamea (~jamea@10.189-202-213.bestelclientes.com.mx)
[17:51:37] *** Quits: zwr (~zwr@2804:d45:b966:fb00:ef0a:b873:5367:9d0e) (Ping timeout: 240 seconds)
[17:52:39] *** Joins: zwr (~zwr@2804:d45:b966:fb00:cef0:860a:178a:99b9)
[17:53:26] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[17:55:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[17:56:40] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[17:57:00] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:57:43] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[17:58:02] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:58:38] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[17:58:48] *** Joins: hololeap_ (~hololeap@user/hololeap)
[17:58:56] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[17:59:16] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[17:59:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[18:00:39] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[18:01:23] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[18:04:17] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[18:04:37] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[18:06:17] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[18:06:37] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[18:07:56] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[18:08:45] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[18:10:00] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[18:10:31] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:38cf:c9d7:1d70:331d) (Read error: Connection reset by peer)
[18:11:15] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[18:11:24] *** Joins: absc (~absc@81.31.144.28)
[18:12:20] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 272 seconds)
[18:12:38] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[18:13:56] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:14:31] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Ping timeout: 256 seconds)
[18:14:31] *** Joins: trevors (~trevors@user/trevors)
[18:17:17] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[18:18:56] *** Joins: VoidSync (~sync@user/voidsync)
[18:19:44] <FloridaMan> You would think they could trim more than 1 character off. Not a very efficient abbreviation.
[18:20:47] *** Joins: pulse (~pulse@user/pulse)
[18:20:53] *** Joins: stagas (~stagas@2a02:587:c41b:6388:242a:6e77:a13e:c1d)
[18:21:10] <FloridaMan> &*
[18:21:15] <pulse> hello people, robots and flying spaghetti monsters
[18:21:44] <absentia> mm spaghetti
[18:21:58] <ProfSimm> pulse I feel included
[18:22:43] * pulse grates some cheese over ProfSimm 
[18:23:18] <FloridaMan> "some cheese"... Apparently you don't know what you're doing
[18:23:32] <FloridaMan> You don't just use "some" cheese
[18:23:35] *** Quits: kittyn (~kittyn@096-039-144-255.res.spectrum.com) (Quit: Read error: 2.71828182846 (Excessive e))
[18:23:58] <pulse> it's spaghetti and cheese, not cheese and spaghetti!
[18:24:13] <FloridaMan> You must use a very specific cheese built around the flavor profile
[18:24:30] *** Quits: VoidSync (~sync@user/voidsync) (Quit: VoidSync)
[18:24:43] <FloridaMan> Not any random cheese will do
[18:25:37] <FloridaMan> For instance, with a ProfSimm I should likely choose a Parmigiano-Reggiano, maybe with a bit of Pecorino Romano
[18:26:24] <pulse> i see you are a cheese enthusiast
[18:26:28] <mrig> heh
[18:26:30] <pulse> i am a bit of cheese enthusiast myself
[18:26:55] <rindolf> pulse: hi, sup?
[18:27:05] <pulse> rindolf, hi
[18:27:15] <pulse> rindolf, having a meal
[18:27:48] <FloridaMan> pulse: I do not see you in ##cheese -- how could you be an enthusiast?
[18:28:08] <pulse> alright you got me, i was merely pretending to fit in
[18:28:11] <rindolf> pulse: nice
[18:32:22] *** Quits: tehenderz (~tehenderz@ti0018a400-1665.bb.online.no) (Ping timeout: 256 seconds)
[18:32:45] *** Joins: tehenderz (~tehenderz@ti0018a400-1778.bb.online.no)
[18:33:42] *** Joins: blacked (~blacked@user/blacked)
[18:34:02] <blacked> Hey guys how can i learn building syntax aware parser ?
[18:34:12] *** Quits: Limits (~Limits@user/Limits) (Ping timeout: 240 seconds)
[18:34:57] <davve> you mean a compiler?
[18:35:12] <davve> which a parser or lexer is part of
[18:36:08] <davve> they typically output an abstract syntax tree
[18:37:33] <rindolf> FloridaMan: sup?
[18:37:42] <absentia> blacked: what does a non-syntax aware parser look like
[18:39:38] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[18:39:59] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[18:40:24] <rindolf> FloridaMan: https://www.youtube.com/watch?v=qdlCAbzZ_24
[18:40:25] <bayaz> Title: Sesame Street - Miami Mice - Cerrado with Ernie 
[18:40:39] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:43:22] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Ping timeout: 272 seconds)
[18:43:39] <FloridaMan> rindolf: hey 
[18:43:41] <pyzozord>  
[18:43:53] <pyzozord> Amadiro: thanks! this makes sense
[18:45:30] *** Joins: makos (~nerdbox@78.9.119.190)
[18:45:42] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[18:46:28] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: WeeChat 3.5-dev)
[18:46:42] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[18:48:29] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[18:48:49] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[18:53:39] <Amadiro> pyzozord, you're most welcome. There's an infinite fractal of complexity in rendering libraries (especially when it comes to font rendering). Typically therefore I recommend to start at a higher level framework (like scaleform, webkit, QtQuick or what-have-you) and make it work as the practical approach -- but far be it from me to preempt an interesting and instructive academic exercise
[18:54:21] <Amadiro> If you decide to go down that route you'll almost certainly learn a lot of interesting things about rendering, splines, ...
[18:54:35] <FloridaMan> I'm not great with the names of these things, but I'm sure there's a name for what I'm looking to do... I have a DHT22 sensor that every once in a while reports either a low or high spike in humidity. For example, say it's recently been mostly at around 80% humidity, but for one reading it reports 36% (just as an example) and then goes back to
[18:54:35] <FloridaMan> around 80% for the next reading. I'm trying to figure out the best way to filter these "misreported" values. So do I basically track the last n number of readings and then use an algorithm to filter out ones that are outside of a particular margin?
[18:54:49] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Write error: Connection reset by peer)
[18:54:49] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Write error: Broken pipe)
[18:54:49] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Read error: Connection reset by peer)
[18:54:58] *** Quits: kzootech (~contact@kzoo.tech) (Quit: WeeChat 3.2.1)
[18:55:02] <absentia> FloridaMan: https://en.wikipedia.org/wiki/Hysteresis
[18:55:03] <bayaz> Title: Hysteresis - Wikipedia 
[18:55:03] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:55:08] <absentia> this sounds related
[18:55:08] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[18:55:10] <FloridaMan> absentia: thanks
[18:55:14] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[18:55:15] <Amadiro> FloridaMan, there are a lot of approaches to this, like running averages, kalman filters, ...
[18:55:31] <EdFletcher> FloridaMan: yeah i'd just use standard deviation, if a value is outside of a defined sigma value then it's an outlier and you can discard 
[18:55:40] <EdFletcher> easy to implement too 
[18:55:43] <Amadiro> a running average is very straightforward to implement and won't commit any grave statistical sins
[18:56:02] <Amadiro> also just sampling faster if you can
[18:56:11] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:56:22] <EdFletcher> the DHT22 sensors are quite slow, you can only sample them at 1HZ IIRC 
[18:56:53] <pyzozord> I think running average also requires constant space, just three ints is enough, one for the current average and two for the array slice
[18:57:25] <FloridaMan> Amadiro: so I guess I need to track the average plus the number of readings, such that I'm not filtering out anything at the beginning of collecting the readings into the average?
[18:57:58] <FloridaMan> otherwise it would filter out the first value which may be valid lol
[18:58:09] <Amadiro> FloridaMan, why would you filter out the first value?
[18:58:46] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[18:58:47] <FloridaMan> Amadiro: that's what I'm saying: you don't want to... But when there's no average collected yet, *everything* is outside of your margin of error
[18:58:48] *** Joins: junebug (~junebug@2600:1700:3db0:2540:240a:eb7a:6461:3400)
[18:59:40] <EdFletcher> with only running average, how do you know _what_ your margin of error should be? you could hardcode it sure, but what if the sensor changes behavior (DHT-XXs are notorious flaky). that's why i use stddev. 
[18:59:45] <Amadiro> So with a running average you just start taking measurement points, and you retain a window of measurement points (the size of this window you can determine based on how "smoothed out" you want the curve to be). Each time you take a new data point, you put it at the beginning of your list, and you drop the oldest data point
[18:59:56] <absentia> FloridaMan: you can use an exponentially-weighted moving average
[19:00:08] <absentia> it will discount the contributions of older observations very quickly
[19:00:27] *** Joins: password (~password8@user/password2)
[19:00:44] <absentia> so even if you collect garbage at the beginning, assuming some stability in the "actual" value you're sampling, you should approach its "true" average
[19:00:49] <FloridaMan> EdFletcher: I am waiting for an Si7021, which would be much better in the mini-fridge due to condensation (it has a built-in heater)
[19:01:39] <FloridaMan> but I still want to account for spikes and remove them.
[19:01:41] <EdFletcher> FloridaMan: nice, those are _great_ sensors! also the Bosch ones (BME- family) are great too, but those SiLabs ones are awesome 
[19:01:43] <FloridaMan> thanks for all the great advice
[19:02:02] <FloridaMan> EdFletcher: this if for my smart cheese cave lol
[19:02:02] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[19:02:09] <EdFletcher> FloridaMan: but yeah i've literally done this many times with DHT-22s and DHT-11s and have always used simple standard deviation to discard outliers, it always works great. 
[19:02:19] <Amadiro> damn, I want a cheese cave\
[19:02:24] <EdFletcher> FloridaMan: hell yeah smart cheese cave!! that's such a cool project. also, cheese, YUMMMMM 
[19:02:31] <perro_> CHEESE CAVES AND FLORIDA, HMM
[19:02:37] <Amadiro> I've only ever really made mozz
[19:02:41] <FloridaMan> http://sha1sum.ngrok.io/uploads/7349cee139aef8a2/Screen%20Shot%202022-02-18%20at%2011.11.19%20AM.png 
[19:02:41] <bayaz> Type: image/png Size: 217.4 kB 
[19:02:44] <EdFletcher> in Florida you especially have to watch out for the humidity 
[19:02:49] <FloridaMan> You can see that the spikes are throwing off the humidity graph
[19:02:57] <FloridaMan> so I need to get them filtered out
[19:03:01] <pyzozord> ngrok is pretty cool, lets you have a temporary http server on your local machine
[19:03:32] <FloridaMan> (the fridge is a "Magic Chef" brand which I will be altering the logo on to say "Magic Cheese" lol)
[19:03:42] <EdFletcher> 😆 👏 
[19:04:02] <FloridaMan> EdFletcher: well actually you want around 80%-85% with cheese usually
[19:04:08] <absentia> this is a cool sounding project
[19:04:09] <perro_> the only thing tha towuld be more impressive is if it was actually just amassive block of cheese you slowly dug a cave out of
[19:04:09] <Amadiro> FloridaMan, how many samples are there in these charts, peak-to-peak?
[19:04:13] <FloridaMan> but inside a fridge the condensation is becoming an issue with the DHT22
[19:04:19] <GeDaMo> 🧀
[19:04:33] <EdFletcher> FloridaMan: yeah i didn't know the exactly number high or low, just knew that florida is very humid so either way you need to control your environment well 🙂 
[19:05:00] <FloridaMan> Amadiro: that chart is either 2 or 4 hours, readings about every 10 seconds. Can't remember if it's 2 or 4
[19:05:05] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:05:07] <FloridaMan> I can set it to whichever though
[19:05:11] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[19:05:57] <FloridaMan> EdFletcher: I've got a SSR controlling the fridge compressor and then a humidifier connected to a smart plug that switches on if humidity dips below 75%
[19:05:59] <Amadiro> FloridaMan, I think in that case a moving average should be fine, I mean you're not trying to know the humidity levels at a minute resolution -- more over a long period of time. But something more aggressive like discarding samples is also ok
[19:06:25] <Amadiro> a moving average still recognizes outliers as "real" in a way, discarding them does not
[19:06:31] <FloridaMan> Amadiro: yeah I think I'm fine with just skipping the reading if it's off because the next one will be fine usually
[19:06:35] <pyzozord> FloridaMan: wait so your fridge doesn't work all the time?
[19:06:51] *** Joins: kittyn (~kittyn@096-039-144-255.res.spectrum.com)
[19:07:04] <GeDaMo> Maybe you need to put your fridge in a fridge :|
[19:07:22] <FloridaMan> pyzozord: the DHT22 readings are taken to control the SSR to keep the temp between 52F and 55F
[19:07:33] <Amadiro> FloridaMan, if you're skipping just make sure you do it properly -- if you just keep skipping readings, that'll be an issue (because it'll mis-report a true change in humidity)
[19:07:42] <[itchyjunk]> https://fuse.wikichip.org/news/6603/intel-unveils-bonanzamine-a-bitcoin-accelerator-asic/
[19:07:57] *** Quits: dfg (~dfg@user/dfg) (Quit: I hate quit messages.)
[19:08:00] <pyzozord> FloridaMan: isn't that what fridges do automatically?
[19:08:13] <pyzozord> FloridaMan: I don't hear my going all the time I hear it turn off and on by itself
[19:08:16] *** Quits: dan01 (~dan01@2a02:2f09:3805:0:9155:c3f6:45fe:d59e) (Ping timeout: 245 seconds)
[19:08:17] <FloridaMan> Amadiro: yeah that's my concern. There's a clear "way out of bounds" when it happens, like my example between 80% then 36%
[19:08:23] <FloridaMan> humidity doesn't change *that* quickly heh
[19:08:31] <FloridaMan> at least not inside a fridge
[19:08:39] <GeDaMo> Maybe log the out of bounds values
[19:08:46] <FloridaMan> pyzozord: not 52F to 55F, no
[19:08:51] <EdFletcher> again, all this is easily doable with stddev 😆 
[19:08:53] <user51> GeDaMo: https://prog21.dadgum.com/212.html
[19:08:54] <bayaz> Title: What Can You Put in a Refrigerator? 
[19:09:05] <EdFletcher> and you should discard outliers, not include them in the moving average 
[19:09:13] <Amadiro> FloridaMan, it could change when quickly when you open it I suppose.
[19:09:18] <FloridaMan> pyzozord: fridges keep things too cold when left to themselves
[19:09:36] <FloridaMan> Amadiro: yeah I've tested that as well, but not 50% in 10 seconds heh
[19:09:56] <FloridaMan> the air kind of lingers in there given that the pressure is not much different
[19:09:56] *** Quits: amigojapan (uid86330@id-86330.helmsley.irccloud.com) ()
[19:10:04] *** Quits: arch-angel (~quassel@user/arch-angel) (Ping timeout: 250 seconds)
[19:10:20] <pyzozord> GeDaMo: I put pretty much all foods in containers that don't come with a container already
[19:10:38] <pyzozord> I have a big box of containers, essentially a big box of boxes
[19:10:43] <EdFletcher> FloridaMan: is this for cheese making or just storage? 
[19:10:50] <pyzozord> I also have a big bag of bags for that matter :P
[19:10:51] <FloridaMan> affinage
[19:10:55] <FloridaMan> (aging cheese)
[19:10:57] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:11:06] <FloridaMan> but yes, for homemade cheese
[19:11:12] *** Joins: mickey8 (~user@user/mickey)
[19:11:34] <EdFletcher> FloridaMan: gotcha, it's part of the process pipeline. that's so cool!! what are you making right now? 
[19:11:45] <EdFletcher> (_aging_ right now) 
[19:11:46] <pyzozord> putting a fridge in a fridge sounds sensible to me
[19:11:57] <FloridaMan> I will be making cheddar at first, then probably camembert
[19:12:03] <EdFletcher> mmmmmm 
[19:12:06] <EdFletcher> lovely 
[19:12:11] <GeDaMo> MMM... cheddar :P
[19:12:33] <EdFletcher> a good really sharp cheddar is one of the world's best things 
[19:12:38] <pyzozord> gouda, by far
[19:12:47] <FloridaMan> cheeses need to be kept at a consistent 50F-55F and 80%-85% humidity for most varieties
[19:13:01] <FloridaMan> otherwise they dry out or the bacteria is put into stasis
[19:13:02] <pyzozord> but other cheeses are cool, although I'm partial on blue cheese or the more smelly cheeses
[19:13:49] <pyzozord> I love old gouda and i has these dry bits at the end, those are my favorite :P
[19:13:55] <pyzozord> *it
[19:14:18] <EdFletcher> oh those super-salty bits? mmmm so good! 
[19:14:31] <pyzozord> doesn't work well on toasts but works very well as cubes
[19:15:02] <Jck_true> The solution to the age old fight between tabs and spaces indentation.... Allow both... Even on the same line
[19:15:14] <pyzozord> I think I'll order some cheese sandwitches now because of you :P
[19:15:24] <user51> you're tempting me to make pizza
[19:15:29] <pyzozord> Jck_true: you monster
[19:15:39] <pyzozord> heretic
[19:16:01] <user51> out of habit, i accidentally bought a lower protein flour
[19:16:46] *** Joins: vilhelmbergsoe (~vilhelmbe@2-104-79-222-cable.dk.customer.tdc.net)
[19:17:45] <FloridaMan> Those crystals are actually tyrosine
[19:17:49] <perro_> gouda somehow seems to get saliter when melted
[19:18:01] <FloridaMan> In longer-aged cheeses
[19:19:41] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[19:19:53] <GeDaMo> https://en.wikipedia.org/wiki/Annatto#Cheese
[19:19:53] <bayaz> Title: Annatto - Wikipedia 
[19:20:01] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:20:14] *** Quits: XV8 (~XV8@2601:5cb:c001:50::5524) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:22:30] *** Joins: lilo_booter (~charlie@ptr-1dvvlcpkpvmcbih3on8.18120a2.ip6.access.telenet.be)
[19:22:54] <pyzozord> FloridaMan: "a number of studies have found tyrosine to be useful during conditions of stress, cold, fatigue (in mice),[23] prolonged work and sleep deprivation,[24][25] with reductions in stress hormone levels,[26] reductions in stress-induced weight loss seen in animal trials,[23] and improvements in cognitive and physical performance[21][27][28] seen in human trials."
[19:23:15] <pyzozord> perfect excuse for me
[19:23:36] <pyzozord> Cheese is healthy! I refuse any counterarguments.
[19:23:39] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[19:25:17] *** Joins: XV8 (~XV8@2601:5cb:c001:50::5524)
[19:25:56] <pyzozord> GeDaMo: I just checked, my favorite "daily" cheese Old Amsterdam does use Annato :/
[19:26:18] <GeDaMo> What made you think it didn't?
[19:26:23] <merijn> Old Amsterdam is all marketing, very poor quality, lol
[19:26:46] *** Joins: xkuru (~xkuru@user/xkuru)
[19:26:50] <pyzozord> GeDaMo: possibly marketing
[19:27:06] <pyzozord> merijn: do you have better old gouda brands?
[19:27:16] <merijn> Old Amsterdam also cheats and uses "fast aging" lactic acid bacteria
[19:27:35] <merijn> So their "old" cheese is considerably younger than most *actual* old cheese
[19:27:43] <pyzozord> well when I feel fancy I go to a cheese store and buy some more real stuff
[19:27:53] <pyzozord> but usually I just go to a supermarket
[19:27:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[19:28:07] <merijn> 1-1.5 year would generally be considered old. I think Old Amsterdam is, like, 4 months
[19:28:10] <GeDaMo> I normally alternate between extra mature Cheddar and Red Leicester
[19:28:24] <merijn> The fast aging bacteria are also generally considered to give an unpleasant after taste
[19:28:31] <pyzozord> merijn: I think what I'm buying is like a year old, not 100% sure
[19:28:39] <merijn> pyzozord: You wanna look at the labels and check for actual age statements
[19:28:47] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[19:28:55] <pyzozord> I vaguely recall something but I might be wrong
[19:29:03] <pyzozord> merijn: if you have better brands do share
[19:29:06] <merijn> Packaging not mentioning duration of ripening is a red flag :p
[19:29:19] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[19:29:23] <merijn> Not really, I usually go to the cheese store for old stuff :p
[19:29:31] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[19:29:43] <GeDaMo> I just buy at Lidl :|
[19:29:47] <pyzozord> eh, nah that's too involved for me
[19:30:01] <absentia> pfft snobs
[19:30:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[19:30:06] <absentia> the best cheese: kraft singles
[19:30:09] <pyzozord> I do want to go to a bucher for ham to a baker for bread and to a cheese store for cheese but that's a bit too involved
[19:30:21] <GeDaMo> absentia: that's barely legal as it is :P
[19:30:22] <absentia> both the taste and texture of play-doh
[19:30:23] <pyzozord> also these stores are like more intimate you have to talk to people and stuff :P
[19:30:34] <absentia> GeDaMo: sorry, "cheese product"
[19:31:10] <pyzozord> I do go to specific shops on occasion but rarely
[19:31:21] <absentia> i like going to those artisanal places and asking questions though
[19:31:24] <absentia> sometimes they geek out on you
[19:31:40] <FloridaMan> pyzozord: annatto is usually used for the orange coloring
[19:31:46] <pyzozord> I think they are way more expensive, but I might be wrong
[19:31:50] <absentia> mmmm red leicester
[19:32:26] <FloridaMan> Oh you linked to that heh
[19:32:32] *** Quits: vilhelmbergsoe (~vilhelmbe@2-104-79-222-cable.dk.customer.tdc.net) (Quit: WeeChat 3.4)
[19:33:37] <pyzozord> FloridaMan: "Old Amsterdam Classic is perfectly ripened; on average this takes approximately 8 months." https://oldamsterdam.com/frequently-asked-questions/
[19:33:39] <bayaz> Title: Frequently asked questions - Old Amsterdam US 
[19:33:54] <pyzozord> I say good enough for a friday
[19:34:00] <pyzozord> or tuesdau
[19:34:07] <FloridaMan> https://www.cypressgrovecheese.com/cheese/soft-ripened-cheeses/humboldt-fog/
[19:34:09] <bayaz> Title: Humboldt Fog? - Soft, Ripe Goat Cheese | Cypress Grove Cheese 
[19:34:10] <FloridaMan> This is one of my favorites
[19:34:14] <pyzozord> merijn: ^
[19:34:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[19:34:41] <merijn> 8 months is on the young side for old cheese :)
[19:35:16] <pyzozord> yeah I agree
[19:35:28] <absentia> i want to try casu marzu one day
[19:35:34] <absentia> that's a real cheese
[19:36:37] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[19:37:30] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[19:38:55] <FloridaMan> you would think the hardest thing about cheesemaking would be finding the right cultures, but it turns out that's pretty easy, and it's finding the right *milk* that's the hard part
[19:39:15] <FloridaMan> ultra-pasteurized won't work, and homogenized doesn't hold up properly
[19:39:30] <FloridaMan> finding normally pasteurized non-homogenized "cream top" milk is hard
[19:39:33] <pyzozord> wth
[19:39:41] <pyzozord> how you guys can geek out even about cheese
[19:39:54] <pyzozord> I give up, I will never know anything as much indepth as you people
[19:39:57] <pyzozord> :P
[19:40:06] <FloridaMan> lol
[19:40:14] <GeDaMo> I remember when bottles of milk used to have cream on top
[19:40:32] <FloridaMan> yeah that's lack of homogenization, and very desirable in cheese production
[19:40:45] <FloridaMan> the curds don't form great with homogenized milk
[19:41:08] <ejjfunky0> best milk is when you milk them out of the cows
[19:41:13] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:41:16] <FloridaMan> but you can add calcium chloride to sort of counteract that
[19:41:27] <pyzozord> ejjfunky0: have you ever tried drinking actual cows milk?
[19:41:36] <GeDaMo> "Rats! You promised me dog or better!" :P
[19:41:38] <FloridaMan> ejjfunky0: yeah here we can buy raw milk "for pet consumption" only
[19:41:50] *** Quits: momcorp (7fdc0af8d8@2604:bf00:561:2000::277) (Remote host closed the connection)
[19:41:50] *** Quits: eein (35f97d3dbd@2604:bf00:561:2000::2a6) (Remote host closed the connection)
[19:41:50] *** Quits: troels (4eee6b4dcf@2604:bf00:561:2000::3b3) (Remote host closed the connection)
[19:41:50] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (Remote host closed the connection)
[19:41:50] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (Remote host closed the connection)
[19:41:50] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (Remote host closed the connection)
[19:41:51] *** Quits: jamesp (7d1330d23d@sourcehut/user/jamesp) (Remote host closed the connection)
[19:41:51] * FloridaMan looks at the vendor. "My pet will love this" *wink wink*
[19:41:53] <ejjfunky0> pyzozord, drinking? no.
[19:41:55] <absentia> hmm
[19:42:13] <absentia> looks like an ipv6 subnet got disconnected
[19:42:31] *** Joins: troels (4eee6b4dcf@2604:bf00:561:2000::3b3)
[19:42:35] <absentia> ope
[19:42:37] <FloridaMan> some technician kicked the wrong switch
[19:42:38] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[19:42:38] *** Joins: eein (35f97d3dbd@2604:bf00:561:2000::2a6)
[19:42:38] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[19:42:44] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[19:42:50] *** Joins: jamesp (7d1330d23d@sourcehut/user/jamesp)
[19:42:51] <absentia> kicked it back
[19:42:54] *** Joins: momcorp (7fdc0af8d8@2604:bf00:561:2000::277)
[19:44:45] <FloridaMan> I am now in 3 channels talking about milk right now completely by coincidence
[19:44:48] <FloridaMan> this is freaky
[19:45:04] <FloridaMan> one is talking about milk in coffee, one is talking about carton construction, and here we're talking about milk for cheese
[19:45:15] <pyzozord> lactose intolerant people are so unlucky
[19:45:30] <pyzozord> to miss out on cheese is a great tragedy
[19:45:40] <ejjfunky0> hehe milk is amazing. no wonder why indians worship cows.
[19:45:46] <absentia> i had a lactose intolerant roommate
[19:45:53] <absentia> he would eat cheese and drink milk all the time
[19:45:56] <absentia> and just suffer the consequences
[19:46:00] <absentia> strange fellow
[19:46:04] <FloridaMan> that's probably what I would do
[19:46:07] <pyzozord> yes, I think I would do too
[19:46:07] <FloridaMan> at least with cheese
[19:46:10] <FloridaMan> I rarely drink milk
[19:46:18] <GeDaMo> I've read that hard cheeses are less of a problem for lactose-intolerant people
[19:46:21] <absentia> you are brave souls
[19:46:31] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[19:47:31] <ejjfunky0> if you guys are lactose intolerant, you should check out a2 milk: https://www.medicinenet.com/difference_between_a2_milk_and_regular_milk/article.htm
[19:47:31] *** Quits: adder` (~adder@user/adder) (Read error: Connection reset by peer)
[19:47:31] *** Quits: adder (~adder@user/adder) (Read error: Connection reset by peer)
[19:47:32] <bayaz> Title: What Is the Difference Between A2 Milk and Regular Milk? 
[19:47:58] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 272 seconds)
[19:48:04] <FloridaMan> bacteria in cheese feed on lactose, so longer aging == less lactose
[19:48:38] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[19:49:09] *** Joins: adder` (~adder@user/adder)
[19:49:12] *** Joins: adder (~adder@user/adder)
[19:49:27] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Client Quit)
[19:50:16] <ejjfunky0> "Managing lactose intolerance is possible by choosing dairy products that have little to no lactose. You should not drink a2 Milk® if you have been diagnosed as lactose intolerant.", https://www.a2milk.com/blog/the-difference-between-a-dairy-allergy-lactose-intolerance-and-dairy-sensitivity
[19:50:17] <bayaz> Title: The Difference Between a Dairy Allergy, Lactose Intolerance, and Dairy Sensitivity | a2 Milk? USA 
[19:50:53] <kittyn> or just drink soylent since it's better than milk anyways
[19:51:09] <kittyn> without the weird bacterial colonies aftertaste
[19:51:09] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[19:51:37] <pyzozord> I don't know but cheese aftertaste is when it's the most cheesy
[19:52:19] <ejjfunky0> why do the French have the stinkiest cheeses?
[19:53:06] <piou> we just have the most cheese, so statistically...
[19:53:31] <pyzozord> piou: are you french?
[19:53:34] <FloridaMan> although a lot of french cheese is just trying to mimic dutch cheese :P
[19:53:46] <FloridaMan> mimolette for example
[19:54:12] <piou> pyzozord: yep
[19:54:32] <FloridaMan> mimolette, as the story goes, was made in an attempt to replicate Edam
[19:54:49] <piou> FloridaMan: nah, you're just taking the one that does. But no cheese from Auvergne for example is anything like Dutch cheese
[19:55:03] <piou> and that counts tens of different cheese
[19:55:18] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[19:55:19] <FloridaMan> piou: yeah I'm exaggerating a bit. Maybe trolling. Sorry
[19:55:20] <FloridaMan> lol
[19:55:37] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:55:50] * piou is serious about cheese ò_ó
[19:55:51] <Stefan26> Have you guys ever witnessed a software developer of any kind get fired (for lack of competence or failure to deliver)?
[19:56:13] <kittyn> no, but i've read stories from people having to do it
[19:56:23] <FloridaMan> I've seen it happen to a Team Lead
[19:56:24] <pyzozord> Stefan26: of course I know him, he's me!
[19:56:33] <ejjfunky0> Stefan26, yea. me. I once got fired for lack of competence AND failure to deliver. 
[19:56:46] <pyzozord> Stefan26: only for lack of cultural fit though
[19:57:11] <pyzozord> Stefan26: indeed it wasn't a fit, I think now I found a team that is a quite great fit
[19:57:14] <Stefan26> I feel like I've been extremely unproductive at 2 assignments and they didnt fire me (i had to quit myself)
[19:57:35] <kittyn> so u fired them
[19:57:39] <pyzozord> Stefan26: companies vary wildy and to the extreme
[19:57:44] <Stefan26> yeah but I was useless
[19:57:50] <pyzozord> Stefan26: so can't five you advice
[19:57:56] <pyzozord> *give
[19:58:02] <Stefan26> from this I got the impression developers can act like "rock stars" cause the demand is too high
[19:58:15] <abraxis> I worked with a guy that was put on a pip and didn't improve enough in the lead's eyes, he was going to be let go, but they gave him enough warning so he could quit first
[19:58:21] <pyzozord> Stefan26: but if they didn't even suggest anything is wrong, then it very well may be that they don't really care
[19:58:29] <Stefan26> yes when you say that I believe you pyzozord... well run companies will surely remove unproductive workers
[19:58:32] <pyzozord> Stefan26: and care much more how you interact with others.
[19:58:41] <absentia> Stefan26: not if they get large enough
[19:58:50] <Stefan26> and i believe you in that it wasn't your fault... it's usually lack of project management making one uselesss
[19:58:58] <absentia> they merely want to keep the proportion of unproductive workers below an acceptable threshold
[19:58:59] <kittyn> it's not like someone is going to tell you, specifically, what to work on
[19:59:17] <pyzozord> Stefan26: or it may be that when deadline comes they will start looking for the scapegoat
[19:59:18] <absentia> and as long as you're not actively fucking things up
[19:59:23] <absentia> it's really too much headache
[19:59:26] <pyzozord> Stefan26: 50/50 chance
[19:59:29] <abraxis> i think they should have given him more time and try him under a new lead, but they didn't care what I had to say about it
[19:59:37] <password> why does it work like this
[20:00:10] <password> whole day at work i kind of just want to work on a project , then when i get home , i don't see the point
[20:00:22] <absentia> password: do your project in the morning first
[20:00:31] <password> used to do that
[20:00:31] *** Joins: magla (~gelignite@d5361f17.access.ecotel.net)
[20:00:35] <password> can't be arsed anymore
[20:00:44] <absentia> i'm burned out from computing
[20:00:53] <password> same
[20:00:54] <absentia> used to have at least one or two hobby projects a year
[20:00:59] <kittyn> you should check out the gitlab internal engineering docs....all open-source
[20:01:02] <absentia> can't be fucking arsed for over a year now
[20:01:04] <password> i want to write a really good luamacros script
[20:01:06] <kittyn> hiring/firing procedures
[20:01:19] <password> kittyn, check out emvco
[20:01:37] <password> industrial standard docs on how bank card readers work
[20:02:55] <ejjfunky0> Stefan26, you're the lucky one. Well, they gave me chances to quit but I needed the money. So I held on to the bitter end where they finally tell it to my face, "YOU'RE FIRED!" 
[20:03:16] <mrig> Does anyone know when Chebyshev polynomials were first used in computing?
[20:03:16] <FloridaMan> in a lot of places in the US employers will give you an official reprimand at least once before they terminate your employment so as not to open themselves up to legal issues
[20:03:19] <absentia> damn at least you all got some form of warning
[20:03:21] <ejjfunky0> It was liberating but painful.
[20:03:29] <absentia> for me it was "yeah everything's great company's awesome hahah you're doing a good job"
[20:03:30] <Stefan26> I didn't consider myself lucky, I felt useless and I don't need money that badly
[20:03:37] <absentia> monday morning: "we're laying off almost all of engineering"
[20:03:50] <FloridaMan> :(
[20:04:09] <pyzozord> in my previous company they had a "bloody thursday"
[20:04:11] <absentia> i am scarred from corporate gaslighting
[20:04:17] <absentia> never believe the leadership
[20:04:20] <Stefan26> I literally said to my manager "I don't think I'm useful here, you should consider replacing me/us with a whole new team of consultants"
[20:04:25] <pyzozord> some thursday few years ago the leadership decided to let go about 60% of the staff
[20:04:28] <ejjfunky0> best position is where you could choose to quit. i didn't manage my finances well. bills always piling up.
[20:04:34] <ejjfunky0> that's what i get.
[20:04:40] <FloridaMan> absentia: I'm sure it was heavily-laden with buzzwords as well
[20:04:42] <password> OK
[20:04:46] <Stefan26> (after trying to change/refine things first... and failing)
[20:04:47] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 256 seconds)
[20:04:52] <password> anyone use here luamacros?
[20:05:00] <FloridaMan> "long story short, if we have need for engineers in the future, we'll circle back and give you a shout"
[20:05:05] <absentia> "circle back"
[20:05:07] <absentia> fuck
[20:05:07] *** Joins: monchi (~joints@143.198.92.132)
[20:05:15] <absentia> i want to take a shot every time i hear that
[20:05:17] <absentia> ... of hemlock
[20:05:22] <mrig> :D circle back and drill down :D
[20:05:26] <absentia> fffffff
[20:05:29] <pyzozord> yea!
[20:05:38] * pyzozord rolls eyes so hard it hurts
[20:05:58] <mrig> rofl here, at the suits.
[20:05:58] <FloridaMan> https://www.youtube.com/watch?v=SS59avkxyeg
[20:05:59] <bayaz> Title: Buzzwords 
[20:06:08] <ejjfunky0> Stefan26, what works for me is to just learning new stuffs, get back to the old ones when i finally dare to face the monsters in the closet.
[20:06:36] <mrig> Stefan26: sorry to hear that, probably just a case of not being in the right place at the right time.
[20:06:37] <absentia> Stefan26: sometimes the org is not accepting of change
[20:06:46] <pyzozord> what's more annyoing they took the word synergy :(
[20:06:48] <absentia> just keep your head down and focus on your own goals
[20:06:55] <pyzozord> and now it cannot be used unironically
[20:06:58] <pyzozord> or by a suit
[20:07:01] <mrig> seems like many of the really fast coders are the ones loved by the suits and hated by all good devs.
[20:07:13] <FloridaMan> ^
[20:07:16] <absentia> yeah
[20:07:16] <password> meh
[20:07:18] <FloridaMan> cowboys
[20:07:20] <absentia> code it fast as fuck
[20:07:27] <FloridaMan> "get shit done"
[20:07:30] <absentia> pass the spaghetti to the next poor shmuck who will have to deal with your shit 3 years from now
[20:07:31] <password> if anyone here used luamacros i would have accepted code requests
[20:07:55] <mrig> creating institutional rot and instability for years nay generations to come.
[20:08:02] <pyzozord> FloridaMan: this totally sounds like most of companies I worked for
[20:08:08] <pyzozord> FloridaMan: exaggerated only just a bit
[20:08:11] <mrig> :D got to love the scene. 
[20:08:29] <FloridaMan> absentia: I love the way Uncle Bob talks about this in Clean Agile, saying that the expectation by developers that code will get *worse* over time rather than better is perhaps the most irresponsible, unprofessional perspective that you can take
[20:08:53] <absentia> and if you're one of the few who takes the opposite perspective
[20:08:56] <absentia> you're bailing out a sinking ship
[20:08:57] <FloridaMan> but unfortunately it can be true
[20:09:00] <absentia> with your bare hands
[20:09:18] <absentia> it's just like pissing in the rain
[20:09:26] <mrig> Na, im building torpedo's :P
[20:09:38] <password> i should be writing a math intreperter
[20:09:57] <absentia> i think the industry is shifting from clean code to disposable code
[20:10:09] <absentia> who gives a fuck if it's clean, just throw more money at it and crank out garbage v2.0
[20:10:17] <password> i think it was always disposable code
[20:10:21] <absentia> we'll do a re-write to garbage v3.0 in a few years
[20:10:22] <mrig> ecology will fix this eventualy
[20:10:24] <absentia> once it becomes unmanageable
[20:10:31] <password> i think you are only realising it now
[20:10:38] <FloridaMan> to be quite honest, most of your code will be refactored at some point. Very little of it is permanent.
[20:10:41] <mrig> Once we know what the word means :|
[20:10:58] <koollman> FloridaMan: I'm not sure why that expectation is 'worse'. code gets worse, and you have to fight to make it better instead
[20:11:13] <mrig> How much of that has been driven by the modulating hardware market?
[20:11:17] <password> FloridaMan, none of  my code at work will be refactored
[20:11:23] <absentia> koollman: he's saying developers take it for granted that the code will deteriorate
[20:11:26] <password> because my work is too fucking dumb to refactor
[20:11:27] <absentia> and therefore don't even bother to fight
[20:11:30] <absentia> it's a defeatist position
[20:11:38] <password> either they patch or re-write from scratch
[20:11:53] <FloridaMan> koollman: it's the expectation going into a project that it will get worse instead of better that is the unprofessional part. Yes you have to fight to keep it from getting worse, but that's part of the job.
[20:12:41] <FloridaMan> the resignation is the problem
[20:12:45] <absentia> yes
[20:12:49] <mrig> dang I am going to have to bite the bullet and go full math.
[20:12:53] <FloridaMan> like "broken windows"
[20:13:08] <absentia> or maybe not even understanding the word "refactoring"
[20:13:30] <absentia> sick of hearing this word too, it's devolved to basically mean "change the code"
[20:13:40] <FloridaMan> lol
[20:13:43] <absentia> fowler had an extensive catalog of refactoringS
[20:13:45] <mrig> going full algebra on your code?
[20:14:07] <absentia> actual pre-baked rules or transformations you could apply in any context
[20:14:22] <absentia> resharper even had some of them automated
[20:14:38] <mrig> I would not be surprised if the same things come up over and over.
[20:14:58] <FloridaMan> If any other type of engineer were as loose with things as software engineers the world would have exploded long ago
[20:15:09] <FloridaMan> engineers*
[20:15:15] *** Joins: MatSharrow (~matthew@56.93.9.51.dyn.plus.net)
[20:15:23] <GeDaMo> http://programmersstone.com/
[20:15:23] <bayaz> Title: The Programmers Stone 
[20:16:38] <ejjfunky0> FloridaMan, we got some. Bridges falling, building collapsing, nuclear plants gone awry.
[20:16:56] <FloridaMan> GeDaMo: this looks nice
[20:17:09] <pyzozord> GeDaMo: cool book
[20:17:30] <password> urg
[20:17:49] <FloridaMan> ejjfunky0: yep, and Bob Martin also argues that one day soon there's going to be an accident where thousands of people die because of an error that a software engineer made. I don't think he's wrong either.
[20:18:03] <ejjfunky0> a programmers' book but no code? WTF? Just kiddin. looks interesting. :D
[20:18:26] <pyzozord> FloridaMan: I think that's very probably, for some definition of soon
[20:18:31] <GeDaMo> The bit I remember from it is in chapter 2 and it has code :P
[20:18:40] <FloridaMan> pyzozord: yeah "soon" is flexible I think
[20:18:56] <perro_> don't know that anyone that's been in this undistry for awhile would doubt that
[20:18:58] <perro_> scary
[20:19:12] <GeDaMo> People have already died from software errors
[20:19:18] <ejjfunky0> FloridaMan, happened. Boeing 737 MAx, killed 346 people. https://www.nytimes.com/2020/07/01/business/boeing-faa-737-max.html#:~:text=Boeing%20failed%20to%20share%20key,watchdog%20report%20released%20on%20Wednesday.
[20:19:19] <bayaz> Title: U.S. Watchdog?s Report Faults Boeing?s Disclosures on 737 Max Software (Published 2020) 
[20:19:36] <pyzozord> https://xkcd.com/2030/
[20:19:37] <bayaz> Title: Voting Software 
[20:19:45] <ejjfunky0> Solely software failure.
[20:19:55] <mrig> Oh that looks great GeDaMo, will have a read of that.
[20:19:57] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:19:58] <GeDaMo> https://en.wikipedia.org/wiki/Therac-25
[20:19:58] <bayaz> Title: Therac-25 - Wikipedia 
[20:20:17] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:20:45] <mrig> Complexity and the hidden nature of the task, lack of awareness of any immediate problem or danger; Suits are very short sighted; What could possibly go wrong?
[20:20:51] <pyzozord> also wasn't chernobyl a software failure?
[20:21:56] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:6d82:ff00:10df:f4af) (Quit: fe23)
[20:22:00] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[20:22:09] <mrig> Though the thing that concerns me more is that which can be concealed in code, a whole world of policy that is not voted for that very few would even be aware exists.
[20:22:14] <ejjfunky0> there's also this car, i forgot which maker, where the car automatically steer to the right in some conditions and killed some people. also the famous tesla auto drive
[20:22:30] <mrig> and the nature of those implementing this sort of thing.
[20:22:33] *** Joins: Enitin (~Enitin@82.102.22.86)
[20:23:37] <mrig> There have been scandals in France in which the ethnic origins of temp workers was legible to the initiated in the data base ID's.
[20:24:02] <mrig> hidden in plain sight within a code base.
[20:24:36] <mrig> this is not poor coding it is the nature of the coding that is an issue.
[20:24:51] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[20:25:38] <mrig> How are you going to spot higher order functions that are being judiciously applied upon data sets when everything is automated>
[20:25:43] <mrig> ?
[20:26:18] <perro_> chernobyl was a result of runnjing things in the  wrong order, iirc
[20:26:27] <perro_> they did things with x off that they didn't anticipate
[20:26:35] *** Joins: kzootech (~contact@kzoo.tech)
[20:26:46] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[20:26:49] <mrig> anyhow rant over, back to chebyshev polynomials :)
[20:26:52] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:27:47] <ejjfunky0> i ... don't hate ... math. :D
[20:28:11] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (Remote host closed the connection)
[20:28:11] *** Quits: troels (4eee6b4dcf@2604:bf00:561:2000::3b3) (Remote host closed the connection)
[20:28:11] *** Quits: momcorp (7fdc0af8d8@2604:bf00:561:2000::277) (Remote host closed the connection)
[20:28:11] *** Quits: eein (35f97d3dbd@2604:bf00:561:2000::2a6) (Remote host closed the connection)
[20:28:12] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (Remote host closed the connection)
[20:28:12] *** Quits: jamesp (7d1330d23d@sourcehut/user/jamesp) (Remote host closed the connection)
[20:28:12] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (Remote host closed the connection)
[20:29:11] *** Joins: monchi_ (~joints@143.198.92.132)
[20:29:12] *** Joins: nehsou^ (~nehsou@50.233.120.162)
[20:29:29] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[20:29:29] *** Joins: Enitin (~Enitin@82.102.22.85)
[20:30:40] <mrig> math in some way is not really any different from paining.
[20:30:48] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[20:30:49] <mrig> painting data.
[20:31:01] <pyzozord> math is paining
[20:31:07] <pyzozord> it pains me every time
[20:31:18] <mrig> if it doesn't fit just throw in a coefficient and invent a source for it.
[20:31:43] <mrig> It is the way that it is taught that pains me.
[20:32:08] <pyzozord> could be, there are some aspects of math that I think might be really interesting
[20:32:33] <mrig> ... and those who 'protect' it, tend to assume that all should learn as they do, else they are stupid.
[20:32:35] <ejjfunky0> mrig, i like to just be plugged in and two hours later, i can say, "I know Mathfu"
[20:33:08] <pyzozord> I wish there was a thing for that. I'd pay money
[20:33:25] <mrig> ejjfunky0: every time you pick up a coffee cup your brain is performing massively complicated calculations for you.
[20:33:27] <pyzozord> the learning process is the most exruciating for me
[20:33:47] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[20:33:48] <ejjfunky0> mrig: if it does, i don't see the numbers
[20:33:59] <mrig> the serialisation process is the excruciating part for me.
[20:34:03] <pyzozord> I mean the reading, feeling dumb, not understanding, headaches from overthinking...
[20:34:04] *** monchi_ is now known as monchi
[20:34:17] <mrig> ejjfunky0: the numbers are for the serialisation.
[20:34:17] *** Joins: troels (4eee6b4dcf@2604:bf00:561:2000::3b3)
[20:34:21] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[20:34:29] <pyzozord> but I feel I got a bit better at solving puzzles over the last year
[20:34:31] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[20:34:37] *** Joins: momcorp (7fdc0af8d8@2604:bf00:561:2000::277)
[20:34:37] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[20:34:39] *** Joins: jamesp (7d1330d23d@sourcehut/user/jamesp)
[20:34:40] *** Joins: eein (35f97d3dbd@2604:bf00:561:2000::2a6)
[20:34:48] <absentia> the fuck's wrong with that network
[20:34:56] <ejjfunky0> pyzozord, i need to get better solving puzzles. what's the secret?
[20:35:05] <pyzozord> being stubborn with leetcode, learning what solving puzzles is about, watching other people do it also playing puzzle games helped
[20:35:40] <pyzozord> ejjfunky0: I don't think I know enough to tell you, and I am certainly not good at it either
[20:35:46] *** Quits: b1tr0t (~bitrot@149.167.135.129) (Read error: Connection reset by peer)
[20:35:48] <pyzozord> but I think I am better than I was 
[20:36:04] *** Joins: mmfood (~mmfood@81-233-128-225-no92.tbcn.telia.com)
[20:36:36] <pyzozord> ejjfunky0: I recognize you have a given set of objects and interactions between objects and puzzle is usually about finding the right sequence
[20:36:37] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[20:36:43] <ejjfunky0> pyzozord, leetcode sounds good. that's like a paywall, isnt it?
[20:37:04] <pyzozord> ejjfunky0: i never paid at all
[20:37:24] <pyzozord> no need to, there is abundence of free problems and solutions
[20:37:36] *** Quits: X-Scale (~ARM@92.250.103.242) (Ping timeout: 250 seconds)
[20:37:38] *** X-Scale` is now known as X-Scale
[20:37:42] <ejjfunky0> pyzozord, ahhh. cool. i gotta try them then. 
[20:37:44] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[20:38:19] <pyzozord> sometimes you will have a problem but solution will be behind paywall, but you can still access commends where people posts solutions (often sparingly described)
[20:38:28] *** Joins: Akiva (~Akiva@user/Akiva)
[20:38:28] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[20:38:33] *** Parts: nulleip (~luiz@user/nulleip) ()
[20:38:34] <pyzozord> but then you find the good description on the internet
[20:38:50] <mrig> Its the way that he highest order part of the expression is a multiple of a power of 2 that seems really useful here.
[20:38:52] <ejjfunky0> the thing about employment these days is, i applied randomly, getting into x tech, then the interviews coming and they want a, b, c. beggars can be choosers
[20:39:00] <pyzozord> I recognize puzzles as a set of objects and possible interactions between the objects and the solution as the right sequence
[20:39:04] *** Joins: gitgood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net)
[20:39:19] <pyzozord> it helps to have some kind of thought framework that can minimize the problem
[20:39:25] <mrig> but that is ignoring the numbers and looking at it mechanically.
[20:39:55] *** Joins: nulleip (~luiz@user/nulleip)
[20:40:06] <absentia> https://www.theproofistrivial.com/
[20:40:06] <bayaz> Title: The proof is trivial! 
[20:40:23] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[20:40:27] <pyzozord> and I think actually all of math, science, logic and all the rest of it, is really just those puzzles (plus sometimes empirical data that supplise the objects/interactions)
[20:40:49] <absentia> what is the most fundamental structure of problem solving
[20:40:51] <absentia> i wonder
[20:41:03] <pyzozord> puzzles.
[20:41:20] <absentia> brb purchasing a jigsaw
[20:42:38] <pyzozord> there are two bad experience with puzzles: when you are not equipped to solve the puzzle (missing the right think-frameworks) and getting stuck on something obvious for days by complete accident
[20:43:24] <deniska> Don't even invite me to your puzzle solving if it doesn't feel like AoC or a game from Zachtronics :D
[20:43:36] <pyzozord> the former you can somewhat minimize by doing more structured thikning about the problem
[20:43:40] <user51> i couldn't enjoy AOC
[20:43:41] <pyzozord> *latter
[20:43:53] <pyzozord> but the former there is nothing to do about, just study
[20:43:54] *** Parts: jamesp (7d1330d23d@sourcehut/user/jamesp) (WeeChat 3.4)
[20:43:56] <absentia> can't wait for opus magnum to become a reality
[20:44:02] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Quit: WeeChat 2.8)
[20:44:09] <absentia> start engineering alchemical reagents
[20:44:14] <pyzozord> the worst part is, usually you can't tell which kind are you experiencing at the moment
[20:44:46] <pyzozord> AoC especially later days is really not bad
[20:44:58] *** Joins: X-Scale` (~ARM@46.50.1.149)
[20:45:15] <pyzozord> opus magnum is super cool I need to actually buy and play it
[20:45:16] *** Quits: Cashlin (~hp@user/cashlin) (Quit: Konversation terminated!)
[20:46:09] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 256 seconds)
[20:46:09] *** X-Scale` is now known as X-Scale
[20:46:17] *** Quits: MetaNova (zero-one@znc/supporter/metanova) (Ping timeout: 240 seconds)
[20:46:19] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:8a6:a8d3:62c4:7875)
[20:46:24] *** Joins: teut (~teut@122.161.83.81)
[20:46:32] <pyzozord> I'm talking with authority like I knew what I was talking about...
[20:46:50] <absentia> it's ok me too
[20:46:52] <pyzozord> Just ignore me. I was just sharing my personal thoughts on the subject. No idea if they are correct
[20:46:58] <ejjfunky0> pyzozord: that's ok. we all need that kind of confident. i sure need it.
[20:47:48] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[20:48:35] <user51> pyzozord: i've felt like puzzles can be fun, but sometimes i feel like there's also an artificial element to it.
[20:48:58] <pyzozord> For very long time I hated puzzles
[20:49:06] *** Quits: jdmark (~jdmark@user/jdmark) (Read error: Connection reset by peer)
[20:49:11] <user51> sometimes i wonder if it will be funner to play a simple game: choose the correct compiler optimization
[20:49:15] <user51> interactive gcc
[20:49:21] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:49:36] <pyzozord> but recently I started opening up. Advent of Code was fun (until day 19 :P), Talos Principle is amazing I really really enjoy the puzzles there
[20:49:55] <user51> don't forget, nothing wrong with grand theft auto
[20:49:58] <pyzozord> and months of sweat and tears on leetcode did bring some results
[20:50:23] <absentia> pyzozord: if you like talos principle try manifold garden
[20:50:32] <user51> planescape torment is nice, lots of text though
[20:50:36] <absentia> really stretch your spatial reasoning and intuitions about infinity
[20:50:41] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3027:99e6:c0d6:7e32) (Ping timeout: 256 seconds)
[20:50:41] <icy_troubles> Fuck
[20:50:57] <user51> baldurs gate could be fun if you like coming up with strategies, and i suppose RTS games in general
[20:51:00] <pyzozord> absentia: oh nice thanks! Indeed I was looking for more 3d fpp spatial puzzlers
[20:51:09] <absentia> this fits the bill, highly recommended
[20:51:23] <user51> i tried fallout 1 and it was meh
[20:51:25] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:51:29] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[20:51:33] <deniska> pyzozord: AoC and zachtronics games differ in my experience by their open-ended nature, compared to something like leetcode, in which some noticable amount of puzzles seems to require knowledge of some specific algorithm or datastructure
[20:51:56] *** Quits: joev (~joev@user/joev) (Ping timeout: 272 seconds)
[20:51:59] <pyzozord> deniska: yes, they all differ to some extent
[20:52:23] *** Joins: joev (~joev@user/joev)
[20:52:33] <deniska> the former don't have a "proper" solution, there's a spectrum of solutions which may be better or worse, on multiple axes
[20:52:40] <user51> oh yeah, for programming puzzles, my advice is just to inline the input :P
[20:52:41] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[20:52:48] <deniska> shorter solutions, faster solutions, more readable solutions etc
[20:53:33] <deniska> Zachtronics games literally draw histograms on solution distributions :D
[20:53:39] *** Joins: MetaNova (~zero-one@znc/supporter/metanova)
[20:53:53] <absentia> always optimize for speed
[20:53:58] <pyzozord> but I think it's all called "insight problem"
[20:54:03] <absentia> gotta get that high score hnnnnnnggghhh
[20:54:12] <user51> absentia: speed of writing :P
[20:54:27] <absentia> user51: it was a sort-of-joke about zachtronics games
[20:56:20] *** Joins: edge (~edge@111.92.81.133)
[20:56:35] *** Joins: Wh0 (~V@103.249.233.12)
[20:57:03] <deniska> absentia: "footprint", "lines of code", "runtime" is how most (all?) zachtronics game give score to solutions
[20:57:04] <pyzozord> hmm
[20:57:08] <pyzozord> how can I past a bunch of links?
[20:57:14] <pyzozord> bpaste and ideaone won't let me
[20:57:16] <absentia> i think i've played them all
[20:57:17] <deniska> absentia: and it's rate that a single solution ticks a highscore in all 3 categories
[20:57:22] <absentia> even mobius front
[20:57:33] <absentia> not infinifactory actually
[20:57:51] <deniska> like unrolling loops gives you more lines of code, but better runtime
[20:57:59] <pyzozord> well nevermind, just removed https://
[20:58:12] <pyzozord> here is list of my bookmarked websites about problem solving https://ideone.com/TvIWFw
[20:58:15] <bayaz> Title: Ideone.com 
[20:58:32] <pyzozord> maybe someone will find it useful :P
[20:58:59] <pyzozord> ah and this one too https://www.youtube.com/watch?v=yKf9aUIxdb4
[20:59:00] <bayaz> Title: The Miracle Sudoku 
[20:59:02] <pyzozord> need to bookmark it
[20:59:16] <absentia> probably my favorite puzzle is the binary search from exapunks
[20:59:17] <pyzozord> just watching him reason through the problem
[20:59:40] <absentia> there's not a lot of leeway in the solution - that is, there's really only a handful of ways to solve it
[20:59:47] <deniska> I played through whole exapunks whenever it came out and I don't remember much :D
[20:59:52] <absentia> but it was just awesome seeing it represented both in asm and visually
[20:59:58] *** Quits: edge (~edge@111.92.81.133) (Client Quit)
[21:00:03] <deniska> I think there's DLC released recently?
[21:00:13] <absentia> rly
[21:00:21] <absentia> hmmmm
[21:00:45] <absentia> damn
[21:00:49] <absentia> i don't see any
[21:00:53] <absentia> got excited
[21:01:39] <pyzozord> anyway puzzle games I think can reall help someone who hate puzzles change thier mind
[21:01:41] <deniska> hm, seems like I was scamazed by another guy who told me there is
[21:02:28] <pyzozord> I am personally not convinced by games that use code
[21:02:51] <pyzozord> meaning puzzle games that use code as the main mechanic, I can just go and practice the real thing on leetcode
[21:02:56] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:03:01] <user51> i havent played much videogames in the last decade
[21:03:04] <pyzozord> but for fun I guess some people might like it
[21:03:31] <user51> i still fondly remember assassins creed as something i dont think i've seen a lot
[21:03:53] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:04:04] <user51> fallout games are fun until you notice how stupid the ai is.
[21:04:12] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:04:24] <pyzozord> I get bored in games way too fast unfortunately
[21:04:37] <user51> nop worries, most games suck
[21:04:44] <pyzozord> but I love games
[21:04:51] <user51> i didn't think i'd reach the day gta becomes boring, but here it is
[21:04:55] <ejjfunky0> user51, best game is chess. i can't beat ai chess. they're damn tough.
[21:05:18] *** Joins: spacenautx (~spacenaut@111.92.81.133)
[21:05:24] <user51> ejjfunky0: when in doubt, use brute force :P
[21:05:34] <ejjfunky0> even the best grandmasters nowadays can't even beat pc chess games. imagine that.
[21:05:48] <ejjfunky0> user51, yes. an off switch, usually. :P
[21:06:05] <pyzozord> user51: meaning flip the table and treathen the opponet with fists? :P
[21:06:20] <piou> chess takes a long time before becoming interesting, where you're thinking more about the flow of the pawns than just "can they take my knight, what move can I play here?"
[21:06:25] <pyzozord> or if your opponent is ai threaten pulling the plug
[21:06:56] <pyzozord> I loved getting stoned and playing chess with a friend
[21:07:01] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 245 seconds)
[21:07:18] <pyzozord> it made me stupider but I felt like a general on a battlefiled :P
[21:07:33] *** Quits: spacenautx (~spacenaut@111.92.81.133) (Changing host)
[21:07:33] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[21:07:46] <ejjfunky0> piou, well, depends how fast you make the move. the thing with computer is, they don't need "time" to think. they just move.
[21:07:54] <pyzozord> also dunno sometimes you are in the "flow" you know, and you just see the solutions to things
[21:08:05] <pyzozord> that's a rare but very satisfying feeling
[21:08:09] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Client Quit)
[21:08:27] *** Joins: edge (~spacenaut@111.92.81.133)
[21:08:29] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[21:08:32] <ejjfunky0> pyzozord, now, getting stoned will playing is a different thing. :D
[21:08:42] <ejjfunky0> while*
[21:09:13] <pyzozord> i quit weed, wasn't very healthy for me, but yeah it was fun
[21:09:22] <pyzozord> definitely makes you really immersed in the game
[21:09:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[21:10:12] <pyzozord> but I'd usually get so overwhelmed by the sensory experience video and audio and so dumb that I couldn't take any comprehensive action
[21:10:19] <ejjfunky0> pyzozord, good for you. health is first priority
[21:10:21] <pyzozord> I'd just walk around in a game and look at things
[21:10:38] *** Quits: edge (~spacenaut@111.92.81.133) (Client Quit)
[21:11:06] <pyzozord> or in gta just piss off cups and see how long I can run away
[21:11:13] *** Joins: edge (~spacenaut@111.92.81.133)
[21:11:15] <pyzozord> I think they say "cups" I'm not sure
[21:11:23] <pyzozord> oh no sorry, cops :P
[21:11:31] *** Quits: edge (~spacenaut@111.92.81.133) (Client Quit)
[21:12:14] *** Joins: swp1 (~Thunderbi@143.176.249.0)
[21:12:19] <ejjfunky0> yea, no prob
[21:12:35] *** Quits: swp (~Thunderbi@2001:610:450:90::2:1026) (Ping timeout: 252 seconds)
[21:12:35] *** swp1 is now known as swp
[21:12:38] <ejjfunky0> pyzozord, werent the one who was going to do the d&d game?
[21:12:47] <ejjfunky0> weren't you
[21:12:49] <pyzozord> that's probably me yeah
[21:12:58] <ejjfunky0> hehe. hows that coming along?
[21:13:11] <pyzozord> I am just exploring skia in golang
[21:13:21] <ejjfunky0> skia?
[21:13:28] <pyzozord> skia would be the perfect library to create a vtt interface
[21:13:35] <pyzozord> https://skia.org/
[21:13:35] <bayaz> Title: Skia 
[21:13:47] <pyzozord> it's the vector graphics library behind chrome and android
[21:13:55] <SrPx> Hey everyone, I'm recruiting jr. devs with no experience. I put a job posting, and way more people than I expected replied. I'd like to perform a logic/reasoning test on the candidates before interview. Is there any good site/app for that? One that is fair? This job requires no experience, but demands good reasoning skills, so it shouldn't be a l33t code test. Just a reasoning/logic one.
[21:14:07] <absentia> lmao
[21:14:18] <absentia> i pissed myself laughing when i was given one of these mock IQ/logic/reasoning tests
[21:14:25] <absentia> i would reconsider, unless you don't care
[21:14:27] <ejjfunky0> pyzozord: ic
[21:14:33] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[21:14:51] <pyzozord> SrPx: why do you want to perfor logic/reasoning tests on them?
[21:15:08] <user51> pyzozord: nah, that's cute force
[21:15:17] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 256 seconds)
[21:15:31] <pyzozord> user51: ?
[21:15:35] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[21:15:47] <pyzozord> SrPx: https://www.hackerrank.com/ has specialized products for recruiters
[21:16:17] <user51> 19:36 < pyzozord> user51: meaning flip the table and treathen the opponet with fists? :P
[21:16:22] <pyzozord> SrPx: you can choose puzzles but you can also choose tests for specific frameworks and libraries. I advice the latter
[21:16:24] <piou> I remember a study a few years ago that showed that many applicants could not write a simple for loop, so I'd say make sure they can write a for loop.
[21:16:24] <SrPx> pyzozord: because the job involves learning proof langs (agda, coq) which are considered hard and require good reasoning skills
[21:16:26] <ejjfunky0> SrPx: I got one test you can ask junior dev for reasoning/logic: Do you believe the earth is flat?
[21:16:40] <pyzozord> SrPx: ah ok, then carry on
[21:16:45] <absentia> hmmmm
[21:16:55] <SrPx> pyzozord: will have a look, ty
[21:17:24] <pyzozord> SrPx: I suspect they might have something for you too
[21:17:25] <absentia> SrPx: I think mensa actually offers semi-official non-proctored tests with percentile scoring at the end
[21:17:40] <pyzozord> or yeah just the mensa test
[21:17:43] <absentia> not sure how "scientific" it is or if it's smoke and mirrors
[21:17:50] <SrPx> my current plan is to make a "IQ" test sort of like these you see online, with images/patterns. not the best metric, but I don't know what else would reliably test logical reasoning. any kind of coding question isn't fair because I demand no coding xp 
[21:17:55] <pyzozord> I got mensa test when I was applying for a job in bank, I failed
[21:18:02] <absentia> SrPx: https://test.mensa.no/
[21:18:02] <SrPx> absentia: oh interesting
[21:18:03] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:18:04] <bayaz> Title: IQ Test Made by Mensa Norway - Mensa Norway 
[21:18:23] <absentia> it's really just a bunch of set theoretical and inductive reasoning questions
[21:18:29] <pyzozord> IQ is probably what you want for mathematical proofs
[21:18:32] <kittyn> dw pyzozord they can't have geniuses working at banks
[21:18:36] <apotheon> Mensa tests are basically just IQ tests, or (un)reasonable facsimiles thereof.
[21:18:38] <absentia> if you know your logical connectives you can probably score quite highly
[21:18:43] <pyzozord> kittyn: heh
[21:18:57] <SrPx> absentia: I see no option for personalized tests on mensa though? if I just send a static one they will just find answers online
[21:18:58] <pyzozord> kittyn: I'm afraid it was the other way around
[21:19:13] <kittyn> oof D:
[21:19:13] <absentia> SrPx: so don't tell them it's mensa?
[21:19:27] <absentia> or are you afraid of them "sharing answers" between themselves
[21:19:32] <SrPx> absentia: hmm, even so, this test is immensely popular, chances are some will have done it. and they can tell others etc.
[21:19:39] <SrPx> perhaps I can take mensa as a template and build a randomized one
[21:19:45] <absentia> SrPx: maybe this is a business idea
[21:19:45] <apotheon> The SAT used to be roughly congruent with IQ tests, back when it was actually an aptitude test.  When it changed in . . . the mid-1990s, I think . . . Mensa stopped accepting it, because it was becoming more achievement-y.
[21:19:47] <pyzozord> SrPx: https://www.iq-test.net/ or whatever else, I'm sure there are some services for that
[21:19:49] <bayaz> Title: IQ Test Free, Test IQ online, Gratis Quick IQ test questions 
[21:19:51] <SrPx> absentia: maybe, lol
[21:19:52] <absentia> logic / reasoning tests as a service
[21:19:53] <SrPx> not for me though
[21:19:55] <absentia> haha
[21:20:03] <pyzozord> just google "recuritment iq test"
[21:20:14] <SrPx> donald trump - iq 156
[21:20:19] <absentia> yikes
[21:20:19] <SrPx> how to admit your test is bs
[21:20:23] *** Quits: Twipply (~Twipply@user/twipply) (Ping timeout: 256 seconds)
[21:20:25] <SrPx> :P 
[21:20:32] <absentia> bigly
[21:20:32] <pyzozord> there are some people you'd think pretty dumb that have high iqs
[21:20:43] <apotheon> Donnie probably paid for a test that would give him high numbers.
[21:20:45] <pyzozord> and also some people you'd think smrat that don't have high iqs
[21:20:46] <absentia> you can do a lot of really stupid shit on a 4.2GHz overclocked CPU
[21:20:53] <SrPx> there is no way trump has 156 iq come on
[21:21:06] <pyzozord> also solving iq tests can be learned and improved
[21:21:13] <absentia> he's so intelligent he's actually a dumbass
[21:21:18] <absentia> full circle
[21:21:29] *** Joins: Twipply (~Twipply@user/twipply)
[21:21:32] <SrPx> that is true. i wonder if there is some kind of theoretical "perfect" iq test that can't be learned or prepared for
[21:21:41] <apotheon> no such thing as integer overflow when it comes to intelligence
[21:21:54] <pyzozord> iq is the best and more reliable test we have
[21:21:58] <absentia> surely there's an upper bound on the limitations of the brain
[21:22:02] <pyzozord> and it's so-so
[21:22:32] <apotheon> absentia: Given normal brains, it'd be an asymptotic approach to a limit.
[21:22:38] <absentia> apotheon: agreed
[21:22:55] <pyzozord> my brain is just not that effective
[21:23:19] <apotheon> When you get past the 98th percentile, though, there aren't enough examples to actually plot out the curve worth a damn.
[21:23:31] <absentia> lol
[21:23:34] <absentia> look at magnus carlsen
[21:23:40] <absentia> he just completely crushes the trend
[21:23:52] <apotheon> . . . so there's probably no way to clearly *show* the asymptotic approach by simple statistical analysis.
[21:24:05] <pyzozord> perceptual speed, reasoning, speed & accuracy, spatial visualisation, word meaning - I hear any one of these and I am worried
[21:25:31] <Amadiro> apotheon, 98th percentile isn't that much, that'd still be 140 000 000 people
[21:25:37] <apotheon> My take on a reasonable intelligence description that provides a way to, in principle, measure it is simply the ability to learn arbitrary things.
[21:25:37] <sonny> absentia magnus isn't human
[21:26:08] <Amadiro> or "isn't that exclusive"
[21:26:24] <apotheon> Amadiro: Sure, but statistical trends still get weird in that range, especially because it's damned-near impossible to actually *find* most of them to test them.
[21:26:48] <apotheon> The existence of that many people doesn't mean that many people are being measured.
[21:27:09] <Amadiro> sonny, he seemed pretty human when I bumped into him :)
[21:27:22] <sonny> oh rad
[21:27:34] <sonny> did you challenge him to a game?
[21:27:39] <apotheon> If we had the kind of perfect knowledge necessary to incorporate all those people in our analysis, we would have perfect knowledge to not need to test anyone to come to solid conclusions.
[21:27:42] <Amadiro> nah I don't even play
[21:27:49] <sonny> lol
[21:28:00] *** Quits: blacked (~blacked@user/blacked) (Quit: Client closed)
[21:28:35] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[21:28:54] <pyzozord> I think for my level of inteligence I am doing not bad :P
[21:29:11] <apotheon> That's good.
[21:29:29] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[21:29:42] <pyzozord> I can do better but I don't think I can get more inteligent
[21:29:46] <Amadiro> As long as you always keep an eye out for how to improve and what your mistakes are consistently, you will pretty much always find yourself in the 90th percentile or higher
[21:29:50] <pyzozord> although maybe it's possible, dunno
[21:30:07] <apotheon> I have two questions that relate directly to intelligence that seem like The Important Questions, to me:
[21:30:13] *** Quits: XV8 (~XV8@2601:5cb:c001:50::5524) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:28] <apotheon> 1. Can you learn skills to improve your work, at whatever you choose to pursue as a life path?
[21:30:33] <Amadiro> pyzozord, it is possible to do things to improve the score of IQ test results, but a lot of those things might not meaningfully increase your intelligence in other ways
[21:30:45] <apotheon> 2. Can you meaningfully reason about ethics?
[21:30:56] <pyzozord> Amadiro: yeah I think so too
[21:31:00] <apotheon> If you can do those two things, cool; you're intelligent enough.
[21:31:09] *** Joins: XV8 (~XV8@2601:5cb:c001:50::5524)
[21:31:19] <pyzozord> Amadiro: now question is which score is more real, the one I take before practicing iq tests or after
[21:31:49] <ProfSimm> Functions are just two continuations coupled together.
[21:32:13] <pyzozord> functions are just gotos and stack
[21:32:17] <Amadiro> Well, if I was interested in your IQ because I wanted to, say, employ you for something where I believed intelligence was paramount, I'd probably be interested in the a priori result
[21:32:44] <Amadiro> if I Wanted to employ you for something where persistence, tenaciousness and practice makes a difference (literally every real world job) the second one is arguably also interesting
[21:32:46] <ProfSimm> pyzozord: continuations are functions without a stack
[21:33:08] <apotheon> Someone just asked me a question about WYSIWYG tools, and I found that an interesting experience because nobody has talked to me about WYSIWYG tools in *years*.  I guess that shows I've been insulated by the company I keep, in some sense.  It's a weird realization for me.
[21:33:13] <ProfSimm> A continuation is like a coin with one side.
[21:33:31] <pyzozord> Amadiro: in that case I faild because I did iq test a priori and my score was too low
[21:34:03] <ProfSimm> apotheon: the term is not used because today it's the default expectation, while back in the day it was the exception and hence the term was trendy
[21:34:24] <apotheon> It's not the default expectation in the circles where I travel.
[21:34:29] <pyzozord> (it's ok though, I got used to that fact)
[21:34:38] <apotheon> . . . at all.
[21:34:56] <Amadiro> pyzozord, in the real world the delta between your a priori and a posteri score is probably more important
[21:35:06] <ProfSimm> apotheon: In the circles where I travel, when i draw a circle in Photoshop, I see a circle.
[21:35:11] <Amadiro> not that either necessarily matters anyway
[21:35:40] <apotheon> Image editing is a weird, special case, but I actually know of people who don't use a mouse when creating a circle.
[21:36:21] <apotheon> . . . but I basically know *nobody* who makes webpages in something that acts more like a word processor than a plain ol' text editor.
[21:36:39] *** Joins: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at)
[21:36:45] <ProfSimm> apotheon: image editing, illustration, print documents and publishing, animation 2D and 3D, CAD software and so on. Lots of edge cases.
[21:36:55] <Amadiro> apotheon, tons of people do -- squarespace, wix, wordpress etc are some of the most common tools used by businesses to make websites
[21:36:56] <apotheon> Nobody in my circles seems to click the button with "I" on it for italics.  It's HTML, CSS, or Markdown, for the most part.
[21:37:02] <ProfSimm> apotheon: actually where is WYSIWYG not the default
[21:37:07] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[21:37:13] <apotheon> Amadiro: I'm aware those things exist.  I don't know people who use them.
[21:37:21] <absentia> pyzozord: perhaps iq tests don't measure intelligence in general, but rather your ability to perform well on iq tests
[21:37:26] <apotheon> ProfSimm: programmers
[21:37:43] <Amadiro> apotheon, open google maps, look at restaurants near you, check out the websites (of the ones that have one) -- they'll be made with one of these tools
[21:37:43] *** Quits: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se) (Quit: Bye)
[21:37:51] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[21:38:12] <ProfSimm> apotheon: what do you mean. What I see is what i see in code. I don't see blondes, brunettes, redheads. Just code.
[21:38:54] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[21:38:59] <apotheon> Amadiro: I'm sure that's the case, but I don't sit around jawing with restaurant owners about our daily lives.
[21:39:18] <apotheon> ProfSimm: That's "funny".
[21:39:19] <ProfSimm> Let's think what first-class continuations should work like. They don't have a return result. So maybe only allow them on tail calls?
[21:39:29] <ProfSimm> apotheon: I'm "glad".
[21:39:42] <pyzozord> absentia: I believe they are a good aproximation of brain's ALU unit performance
[21:39:49] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[21:40:07] <apotheon> My brain is an efficient conceptual rendering engine for the work I do with things like Markdown when writing for the web.
[21:40:27] <apotheon> I want *this* to be italic, and it just works.
[21:40:53] <apotheon> no farting around with clicky things on the other end of the editor from my text
[21:41:01] <ProfSimm> apotheon: seriously thought WYSIWYG is the norm. Code is literally an encoding of what you "get" when you run the program. There's no closer way to WYSIWYG a script that calls bunch of APIs and integrates their results in a database.
[21:41:15] <apotheon> no need to *see* it as italics *on the screen* when I'm typing it
[21:41:46] <ProfSimm> apotheon: real people don't use Markdown, they use TinyMCE and the like
[21:41:55] <ProfSimm> apotheon: we're fake people, bud
[21:41:59] <ProfSimm> No one does it like us
[21:42:30] <ProfSimm> Except the part where 80% of the population is programmers now
[21:42:39] <ProfSimm> But you know, the rest don't do it that way
[21:43:54] *** Quits: linext_ (~linext@pool-100-1-123-185.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[21:43:56] <ProfSimm> Why aren't continuations common in all languages?
[21:43:59] *** Joins: trevors (~trevors@user/trevors)
[21:44:02] <ProfSimm> I mean first-class
[21:44:16] <ProfSimm> This is the GOTO we need
[21:44:20] <pyzozord> what is continuation
[21:44:27] <ProfSimm> pyzozord: I just described it
[21:44:47] <ProfSimm> pyzozord: well ok more seriously it's this: an encapsulated GOTO with parameters
[21:45:14] <ProfSimm> pyzozord: also captures the stack state from the place you GOTO tho
[21:45:21] <GeDaMo> ProfSimm: do you know http://foldoc.org/The%20Story%20of%20Mel ?
[21:45:21] <GeDaMo> "The new computer had a one-plus-one addressing scheme, in which each machine instruction, in addition to the operation code and the address of the needed operand, had a second address that indicated where, on the revolving drum, the next instruction was located.  In modern parlance, every single instruction was followed by a GO TO!"
[21:45:22] <bayaz> Title: The story of Mel, a Real Programmer from FOLDOC 
[21:45:32] <pyzozord> ProfSimm: it's called "call" and "ret"
[21:45:54] <ProfSimm> pyzozord: well that's not encapsulated, and also the stack state thing (bindings)
[21:46:14] *** Joins: linext (~linext@pool-100-1-123-185.nwrknj.fios.verizon.net)
[21:46:47] <pyzozord> then Im not sure what are continuations
[21:47:42] *** Joins: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se)
[21:47:51] <ProfSimm> pyzozord: well.
[21:47:56] <ProfSimm> pyzozord: do you know what functions are
[21:47:59] <ProfSimm> closures
[21:48:07] <pyzozord> yes
[21:48:20] <bjs> ProfSimm: it's hard to program with continuations everywhere
[21:48:20] <ProfSimm> A function takes arguments and returns results
[21:48:30] <ProfSimm> A continuation is a closure that takes arguments and...
[21:48:33] <ProfSimm> That's it
[21:48:36] <ProfSimm> It never returns
[21:48:45] <pyzozord> oh ok
[21:49:11] <pyzozord> interesting
[21:49:24] <ProfSimm> pyzozord: this means to emulate a function you need two of those:    let sum = continuation (x, y, return) {  return (x, y; };
[21:49:34] <GeDaMo> Instead of pushing a return address to a stack, the continuation contains the address to continue from afterwards
[21:49:36] <ProfSimm> pyzozord: notice you return a result by calling a continuation you were given as argument
[21:50:20] <ProfSimm> I typoed:  let sum = continuation (x, y, return) {  return (x, y); };
[21:50:39] <bjs> ProfSimm: do you mean x + y
[21:50:48] <ProfSimm> Ah shit I suck at programming
[21:50:50] <ProfSimm> bjs: yes
[21:51:29] <ProfSimm> pyzozord: you can emulate exceptions if you add one more continuation:  let divide = continuation (x, y, return, throw) {  if (y == 0) throw("Div by zero"); else return(x / y); };
[21:51:57] <bjs> pyzozord: a continuation is basically a 'state' of the program that you can 'continue' from
[21:51:59] <ProfSimm> It's magical how flexible they are
[21:52:28] <pyzozord> what happens when you reach the end of a continuation
[21:52:40] <pyzozord> and it didn't call anything else
[21:52:54] <ProfSimm> pyzozord: kind of like reaching the end of main()
[21:53:08] <bjs> pyzozord: ProfSimm is mimicing continuations using functions, so once you reach the end all your functions return and the program ends (if it's entirely continuations)
[21:53:18] <pyzozord> so each continuation runs risk of ending the program if it doesn't call something else?
[21:53:20] <ProfSimm> pyzozord: but typically you call a special continuation like halt()
[21:53:24] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[21:53:55] <ProfSimm> bjs: I'm mimicking it, but my pseudo code is play pretending that those are 1st class continuations, so direct returning is not a thing
[21:54:00] <ProfSimm> but yes you're right
[21:54:07] <bjs> pyzozord: well, perhaps not the entire program it depends how you program it of course
[21:54:21] <pyzozord> a thread then?
[21:54:22] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:54:22] *** Quits: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se) (Quit: Bye)
[21:54:42] *** Joins: joev (~joev@user/joev)
[21:54:51] <ProfSimm> pyzozord: continuations are used to implement/emulate things like returning results, throwing exceptions, green threads, coroutines, generators and so on
[21:55:00] <ProfSimm> pyzozord: so in some sense it is like a thread
[21:55:05] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:55:07] <apotheon> continuations: replaceable main()
[21:56:37] <bjs> pyzozord: I mean where continuations really appear are as intermediate forms in compilers
[21:57:16] <bjs> there is a way of programming called CPS ("continuation passing style") but it's awkward to use and even in languages that make it easy it's not very common
[21:58:04] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[21:58:15] <ProfSimm> bjs: but they should also appear as first class objects in code i think
[21:58:18] <bjs> pyzozord: was it you asking about SSA the other day? CPS is basically the same idea, but for functional/logic languages.
[21:58:48] <ProfSimm> bjs: and all constructs implemented through them. Loops, if, while, try, etc.
[21:59:06] *** Joins: monchi (~joints@143.198.92.132)
[21:59:13] <pyzozord> bjs: probably me yes
[21:59:15] <bjs> pyzozord: by passing explicit continuations everywhere rather than using more complex logical flow eases analysis
[21:59:59] <pyzozord> oh interestning
[22:00:01] <bjs> and this is why you have classics like Appel's "Compiling with Continuations"
[22:00:45] <pyzozord> nice thanks for the recommendation
[22:00:55] <apotheon> Child Protective Services
[22:01:00] <bjs> which show how to use continuation passing style as an intermediate form for a functional compiler to do optimizations (in that case I think he was doing it for SML/NJ)
[22:01:15] *** Joins: edge (~spacenaut@111.92.81.133)
[22:01:26] <sonny> anyplace you guys go to find slides?
[22:01:36] <pyzozord> so SSA/CPS are the two main ways of doing interediate representation?
[22:01:51] <sonny> is it for IR?
[22:01:51] <bjs> pyzozord: well not "main", just common
[22:01:59] <pyzozord> most common?
[22:02:10] <sonny> isn't IR independent of that?
[22:02:11] <bjs> pyzozord: I guess?  a lot of IRs are fairly ad-hoc
[22:02:17] <pyzozord> I see
[22:02:35] <sonny> only ssa is common anyways
[22:03:04] <pyzozord> back to continuations, continuation doesn't return that means whenver anything calls a continuation and that continuation will not call something else, the execution thread will end with that continuation
[22:03:05] <sonny> but there's some way to do cps on top of ssa
[22:03:29] <pyzozord> oh right ssa/cps don't seem mutually exclusive
[22:03:43] <GeDaMo> "Compiling without continuations" https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/compiling-without-continuations.pdf
[22:03:43] <bayaz> Type: application/pdf Size: 369.4 kB 
[22:03:56] <pyzozord> nice, thanks GeDaMo 
[22:04:12] <pyzozord> although looking at the figures inthat paper it might be too much
[22:04:14] *** Quits: edge (~spacenaut@111.92.81.133) (Client Quit)
[22:04:21] <GeDaMo> That's not the thing that bjs mentioned :P
[22:04:23] <pyzozord> figure 2 is a bit intimidating
[22:04:31] <pyzozord> I know that's the opposite
[22:04:51] <GeDaMo> The top of page 4 is a bit much :P
[22:04:55] <ProfSimm> bjs: why is it not considered for high-level code
[22:04:56] *** Joins: spacenautx (~spacenaut@111.92.81.133)
[22:05:03] <apotheon> I've yet to figure out a reason to care much about SSA except as a way to deal with insufficiently smart compilers.
[22:05:03] <bjs> ProfSimm: why is what not considered?
[22:05:08] <GeDaMo> Oh, that's figure 2
[22:05:08] <ProfSimm> bjs: continuations
[22:05:34] <pyzozord> can't even tell if that's one equation or more
[22:05:37] <bjs> ProfSimm: I mean, programmers just don't seem to like programming with them
[22:06:03] <bjs> pyzozord: it's the type judgements for System F, with the grey parts the new judgements for the join points
[22:06:24] *** Quits: spacenautx (~spacenaut@111.92.81.133) (Client Quit)
[22:06:28] <pyzozord> system f?
[22:06:38] <pyzozord> this is lambda stuff
[22:06:41] <pyzozord> https://en.wikipedia.org/wiki/System_F
[22:06:41] <bayaz> Title: System F - Wikipedia 
[22:06:48] <sonny> ProfSimm continuations are in scheme, etc
[22:06:54] <ProfSimm> bjs: I don't know. At the same time tail calls are all the rage in functional etc.
[22:07:19] <pyzozord> ah some more involved typed lambda calculus
[22:07:26] *** Joins: CaCode (~CaCode@user/cacode)
[22:07:28] <bjs> pyzozord: yes in some sense it's basically the "core" intermediate representation for Haskell
[22:07:29] <GeDaMo> Somebody was asking about typed lambda calculus, was it [itchyjunk] ?
[22:07:31] <pyzozord> with extra features like polymorphism
[22:07:36] <sonny> GeDaMo yep
[22:08:05] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[22:08:54] <pyzozord> back to continuations, continuation doesn't return that means whenver anything calls a continuation and that continuation will not call something else, the execution thread will end with that continuation
[22:08:59] <pyzozord> is this true ^
[22:09:06] *** Quits: rsx (~dummy@ppp-188-174-156-244.dynamic.mnet-online.de) (Quit: rsx)
[22:09:08] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[22:09:11] <[itchyjunk]> GeDaMo, a long time ago
[22:09:19] <GeDaMo> OK :P
[22:09:21] <[itchyjunk]> GeDaMo, i wanted to knwo what affine type is more recemntly
[22:09:24] <[itchyjunk]> but its too complciated
[22:09:29] <[itchyjunk]> can't make head or tail of it
[22:09:37] <[itchyjunk]> apparently new haskell might have it
[22:09:41] <[itchyjunk]> but idk what that really means
[22:09:42] <ProfSimm> pyzozord: yes, but you'd typically have a "fallback" continuation that runs when nothing else does
[22:09:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:09:48] <GeDaMo> "head or tail" sounds more like a list :P
[22:09:49] <ProfSimm> pyzozord: to clean up etc
[22:09:50] <bjs> ProfSimm: tbh tail calls aren't that popular
[22:09:56] <[itchyjunk]> lol
[22:09:58] <pyzozord> ProfSimm: oh ok, thanks
[22:10:01] <ProfSimm> bjs: how come
[22:10:11] <bjs> ProfSimm: I mean they appear in folds but lots of computations just aren't very tail-recursivey
[22:10:12] <[itchyjunk]> yeah but i tried reading up on it but it made no sense
[22:10:48] <pyzozord> I feel like those are the deepest depths of CS
[22:10:58] <absentia> that's scott aaronson's blog
[22:11:02] <absentia> i don't understand a word
[22:11:04] <pyzozord> is that true feeling or is there even more difficult stuff out there?
[22:11:09] *** hololeap_ is now known as hololeap
[22:11:14] <bjs> pyzozord: I mean Rust is affine, mostly
[22:11:32] <ProfSimm> bjs: I wanna figure out a natural way to combine continuations and functions into a single concept
[22:11:40] <bjs> a linear type system means you use a thing exactly once, it doesn't type check if you use something twice.
[22:11:50] <bjs> an affine one says you use it "at most once", so you can also not use it.
[22:11:57] <absentia> ProfSimm: the lambda calculus
[22:12:29] <pyzozord> ProfSimm: isn't that just tail function calls?
[22:12:29] <ProfSimm> absentia: I think the lamdba calculus has just functions
[22:12:39] <ProfSimm> pyzozord: not quite. 
[22:12:52] <ProfSimm> pyzozord: I'm not sure
[22:12:57] <absentia> ProfSimm: https://dotat.at/tmp/danvy-filinski-mscs92.pdf
[22:13:00] <bayaz> Type: application/pdf Size: 308.3 kB 
[22:13:07] <pyzozord> I think so, except you ignore the return values
[22:13:37] <absentia> in the first section they discuss the classical transformation from a function into CPS
[22:13:41] <absentia> ... using the lambda calculus
[22:13:42] <ProfSimm> pyzozord: calling continuations just at the end is limiting
[22:14:03] <pyzozord> well you can have branch at the end too
[22:14:29] <absentia> "function"
[22:14:31] <pyzozord> you can do any number of things before you make a call to decide what call you are making
[22:14:48] <pyzozord> imo it's exactly like continuation then (except you ignore the return value)
[22:15:05] <ProfSimm> Ignoring the return value is not ideal
[22:15:19] <bjs> ProfSimm: are you familiar with call/cc ?
[22:15:29] <pyzozord> no i mean in your functions you do { return somecall() }
[22:15:30] <ProfSimm> bjs: I don't like it
[22:15:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:15:55] <pyzozord> bjs: and at some point all the chain of these will return back to main and you just return the return value in main
[22:16:10] <pyzozord> actually screw it, just don't return anywhere
[22:16:22] <pyzozord> just make a call at the bottom of the functions, bam
[22:16:30] <bjs> ProfSimm: why?
[22:16:50] <pyzozord> also ignoring return values is very common
[22:17:21] <pyzozord> unless you have type system bothering you
[22:17:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:18:06] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:18:26] *** Joins: medium_cool (~medium_co@2605:a601:a9aa:f800:64cd:e1df:8737:185)
[22:18:29] <pyzozord> damn it 40 is so close now that I'm 30
[22:18:39] <GeDaMo> https://okmij.org/ftp/continuations/against-callcc.html
[22:18:40] <bayaz> Title: An argument against call/cc 
[22:19:24] <ProfSimm> bjs: it's verbose and unsubtle, and the signature of the function is limiting
[22:19:37] <bjs> ProfSimm: continuations and type systems don't necessarily go together very nicely
[22:19:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:20:00] *** Quits: src (~src@user/src) (Quit: Leaving)
[22:23:16] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 245 seconds)
[22:23:58] <ProfSimm> bjs: I feel as if we need to try strongly to forget the concept of a function (or procedure) and rethink structured programming from first principles
[22:24:02] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:24:48] <apotheon> How many "interpreted" languages are actually truly interpreted these days?  It seems like . . . none-ish?
[22:25:09] <apotheon> Most of them are at least JIT-compiled to an intermediate representation or something like that.
[22:25:10] <GeDaMo> Depends on how you define 'interpreted'
[22:25:43] <GeDaMo> If you mean bytecode / threaded code, that's pretty common
[22:25:55] <GeDaMo> JIT compilation usually refers to native code generation
[22:26:06] <apotheon> Fully/purely "interpreted" seems to me like it just executes commands, in a sense.
[22:26:29] <apotheon> GeDaMo: Sure, if you don't specify it compiles to an intermediate representation.
[22:26:29] <GeDaMo> Even home computer Basics translated to a bytecode form
[22:26:37] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[22:26:49] <ProfSimm> apotheon: JIT implies the existence of an interpreter, so in a way the interpreter is more valid than any time in history.
[22:27:02] <apotheon> Would you consider Java "interpreted", then, because it doesn't translate to machine code when you generate your tarball?
[22:27:11] <pyzozord> apotheon: cpython
[22:27:30] <pyzozord> very interpreted by default
[22:27:40] <ProfSimm> apotheon: in the long run everything will be recursive iterations of interpret/jit/interpret/jit
[22:27:43] <apotheon> Does cpython not generate anything like a parse tree for execution?
[22:27:45] <pyzozord> it compiles to bytecode sure, but bytecode is interpreted
[22:27:46] <apotheon> That surprises me.
[22:28:01] <apotheon> Okay, so it's compiled, then *that* is interpreted.
[22:28:15] <ProfSimm> apotheon: compiled to opcode
[22:28:16] <apotheon> . . . which means it's not purely interpreted.
[22:28:33] <pyzozord> well interpreting language syntax is really bad
[22:28:41] <apotheon> Yeah, it is.
[22:28:47] <ProfSimm> apotheon: no one does the original definition of interpret, from source code directly
[22:28:50] <GeDaMo> I can't think of anything that interprets the source directly
[22:28:55] <Irishmanluke> compiled to me means compiled to a natively executable format
[22:29:12] <apotheon> I've seen direct interpretation of high-level language syntax as implementation of programming languages, but only toys and some really old things.
[22:29:16] <pyzozord> but maybe viml might be actually doing that
[22:29:16] <GeDaMo> printf, maybe :P
[22:29:38] <apotheon> Irishmanluke: Technically, compilation is transformation from one language to another.
[22:29:42] <GeDaMo> Even regex matchers often translate to a bytecode
[22:29:54] <apotheon> Many compiled languages are compiled to . . . C, at least in early dev stages.
[22:30:08] <pyzozord> I use "comiple" in both ways, depending on the context it means either compiled to native code or compiled to some simpler form
[22:30:09] *** Quits: Wh0 (~V@103.249.233.12) (Quit: Leaving)
[22:30:32] <apotheon> It could also be compiled to a more complex form.
[22:30:45] <pyzozord> yes I guess s/simple/different/
[22:30:55] <apotheon> LLVM can be used with various front-ends to compile from C to JavaScript (via its internal VM language).
[22:30:57] <Irishmanluke> apotheon: what exactly do yoy mean by direct intepretation? That the there is no intermediate represantation that is created (externally to the program)?
[22:31:10] <apotheon> Irishmanluke: yep, pretty much that
[22:31:13] <pyzozord> but then I can't tell the difference between compile and transpile
[22:31:19] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[22:31:21] <apotheon> There's no difference.
[22:31:26] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:31:43] *** Joins: Duchess (~Duchess@24.109.185.150)
[22:31:43] <apotheon> The term "transpile" is just a way some people try to describe compilation that doesn't involve a machine code target.
[22:31:45] <pyzozord> "source to source" compilation is what wiki says
[22:31:46] <apotheon> It's all compilation, though.
[22:31:52] <Irishmanluke> its interesting because there almost has to be an intermwdiate representation internal to the program 
[22:31:57] <pyzozord> but everything is a source except machine code
[22:32:00] <ProfSimm> pyzozord: sometimes we make up words that make sense in context, but have no meaning in general. Transpile is one of those. It tends to mean "I compile from one level to another similar level"
[22:32:25] <ProfSimm> pyzozord: so it's compilation, but with a different assumption (same level rather than to lower level)
[22:32:35] <apotheon> DSLs are typically "directly interpreted" in some sense, if you ignore the step where the underlying language gets jitted in most cases.
[22:32:38] <Amadiro> Irishmanluke, some languages used to (or perhaps still do) just execute commands as the parser consumes them. I think bash used to traditionally do it this way (not sure if it still does)
[22:32:40] <deniska> x86 to arm transpiler
[22:32:51] <pyzozord> ProfSimm: yeah I guess that's a good way to think about it "translate from one language to another language at the same level"
[22:32:55] <Amadiro> so the parsing and execution was interleaved
[22:33:04] *** Quits: gingersnapper (~gingersna@bras-base-hmtnon0109w-grc-28-142-113-127-140.dsl.bell.ca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:33:14] <Irishmanluke> and it could be kind of a trivial difference whether or not the intermediate representation happens to be written out to a file or not
[22:33:15] *** Quits: password (~password8@user/password2) (Ping timeout: 256 seconds)
[22:33:17] <apotheon> Of course "if you ignore" is a HUGE caveat, so that probably isn't meaningful (re: DSLs).
[22:35:08] <apotheon> There are probably a couple directly interpreted Scheme implementations that are actually maintained . . . probably . . . at any given time.
[22:35:25] <apotheon> not that anyone seriously uses them
[22:35:32] <Irishmanluke> if youre able to define subroutines it would seem youre already getting away from simply executing commands one at a time although the subroutine definition could be thought of as a command
[22:35:49] <ProfSimm> I just realized that then "then then then..." chaining of church booleans is identical to the Maybe monad and DO notation in Haskell
[22:35:53] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[22:35:58] <ProfSimm> I'll be damned.
[22:36:13] <ProfSimm> A procedure as a single boolean expression, that's rich
[22:36:39] *** Soni is now known as GD-IRC
[22:37:39] <perro_> you seem like you'd enjoy academia
[22:37:53] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[22:38:41] <ProfSimm> perro_: no
[22:38:51] *** Joins: mikrosis (~mikrosis@dynamic-046-114-170-099.46.114.pool.telefonica.de)
[22:38:57] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Max SendQ exceeded)
[22:39:07] <pyzozord> ProfSimm: I was telling you it seemd like it's in category of endofunctors :P
[22:39:20] <ProfSimm> perro_: I'm gonna pack all this in a language and make it look usable without needing a neckbeard
[22:39:26] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:39:27] <Amadiro> Irishmanluke, you don't have to have an IR (counting an AST as an IR) if you really don't want, you can jump to the definition of the subroutine each time you want to execute it and re-parse it (but it'd be pretty wasteful to do that way)
[22:40:12] <Irishmanluke> it would make it hard to have recursion as well
[22:40:14] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:40:26] *** Joins: Akuli (~Akuli@82-203-165-139.bb.dnainternet.fi)
[22:40:27] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[22:40:42] <Amadiro> Why's that? You'd need a stack and then you do the jumping as before
[22:40:48] <Amadiro> same with closures/lambdas
[22:40:49] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:41:15] <Amadiro> idk whether you could do CTE
[22:41:22] <Amadiro> TCE I mean
[22:41:26] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:41:52] <Amadiro> I guess you could, if the recursion is tail-call recursion you just "move forwards" with an empty stack
[22:41:58] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:42:00] <mikrosis> so when I got a cart and that cart is send as an order - should the order items be just correlated by product ID - or rather completely copied, as kind of snapshot - in case the price changes?
[22:42:40] <Irishmanluke> I suppose youre right
[22:42:47] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:43:14] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:43:22] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[22:43:41] <Amadiro> mikrosis, one approach is to version items -- if the client views an order with an item of version v1, but v2 was created by the time they click the "confirm order" button, the "confirm order" operation fails, the UI has to render a warning to the user ("prices have changed, please re-confirm that this is what you really want") and the user has to click submit again
[22:43:47] <GeDaMo> mikrosis: you should be careful about trusting prices being sent from a client
[22:43:57] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:44:02] *** Quits: ejjfunky (~ejjfunky@125.164.19.196) (Ping timeout: 272 seconds)
[22:44:05] <ski> the physical processor is an interpreter, of machine code
[22:44:13] *** Joins: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se)
[22:44:13] <Amadiro> mikrosis, this scales poorly for items that receive updates extremely frequently, but that isn't usually an issue
[22:44:26] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[22:44:28] <ski> pyzozord : "what happens when you reach the end of a continuation","and it didn't call anything else" -- there is no end. continuations don't return
[22:44:30] <Irishmanluke> thats true ski
[22:44:42] <ski> pyzozord : "so each continuation runs risk of ending the program if it doesn't call something else?" -- basically, it must invoke (jump to) another continuation
[22:44:48] <ski> pyzozord : "continuation doesn't return that means whenver anything calls a continuation and that continuation will not call something else, the execution thread will end with that continuation" -- what do you mean by the "and that continuation will not call something else" part ?
[22:44:53] <Irishmanluke> and that processor could be emulated making it nonphysical
[22:45:05] *** Quits: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:36] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Max SendQ exceeded)
[22:46:03] <ski> it's not like you can write a continuation, and not have its body consist of a jump to a continuation
[22:46:05] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:46:09] <GeDaMo> Many programs can be seen as interpreters, video players for example
[22:46:11] <Amadiro> mikrosis, but either way you do it, it should be such that when the user looks at an order and presses "confirm", they should be billed for the exact prices that were displayed to the user on the screen at that moment in time, OR the order should be denied if you cannot fullfill the order anymore at those prices
[22:46:53] <Amadiro> but it should not be possible for a situation to arise where the user confirms price A and then pays price B without a further confirmation of the change
[22:46:55] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:46:57] <Irishmanluke> Is interpeted vs compiled rrall
[22:47:17] <ski> however, in the context of threads or processes, sure, you can have some magic "halt" continuation that ends the thread, or terminates the process, or something
[22:47:23] <Irishmanluke> really a property of the language or is it a property of the implementation
[22:47:23] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[22:47:32] <pyzozord> GeDaMo: video players?
[22:47:45] * ski nods to GeDaMo
[22:47:59] <GeDaMo> A video player interprets a byte stream to produce images
[22:48:12] <ski> also, if you're reading a config file, you're probably interpreting it then
[22:48:13] <pyzozord> that would put audio players in the same category
[22:48:16] <GeDaMo> Yes
[22:48:16] <mikrosis> Amadiro: indeed! so I can either send the prices by order at the time of order - or even send the product names, too
[22:48:26] <pyzozord> as well as cat
[22:48:31] *** Joins: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com)
[22:48:31] <mikrosis> what if the product is later removed or completely renamed - the order would not look the same anymore
[22:48:42] <mikrosis> except I use some kind of versioning and reference to a specific version of the product
[22:48:46] <mikrosis> which overcomplicates things
[22:48:50] <GeDaMo> Mmmm ... cat just passes data through, it's the terminal which interprets it
[22:48:52] <pyzozord> or maybe cat no because it doesn't really interpret
[22:49:35] <pyzozord> I think I get it, code is data, data is code
[22:49:58] <mikrosis> code=data is for specific architectures, right? von-neumann and such, which basically all systems use these days?
[22:50:05] <GeDaMo> You can see an image format as a program: create a blank image this size; paint these pixels; paint these pixels' etc.
[22:50:33] * ski always thought that "code is data, data is code" was a somewhat crude saying
[22:50:54] <absentia> binary is binary, binary is binary
[22:50:58] <mikrosis> "Digitalizing a human? Lol, so many bits of information, forget it." "Storing data? Lol, a harddisk can only hold (much lower number of bits of information)" :P
[22:51:00] <mikrosis> find the mistake
[22:51:06] <Amadiro> mikrosis, it would be better if you stored a tuple (product_id, revision) in the database for the shopping cart. So for instance my shopping cart would be a row in the db like ["Amadiro", [(1234, 2), (425, 1), ...]]. Then when I visit the "order" page, you render this list out on the client side (javascript fetches the items and renders them with the given prices from the database)
[22:51:11] <pyzozord> with video I thought that maybe you are referring to some codes that actually encode video in form of some finite automata or turing machine
[22:51:16] <ski> (it sounds like it's saying there's no difference between code and data)
[22:51:33] <pyzozord> (I wanted to say code, but it's hard to use it in this context)
[22:51:43] <absentia> on one level there's a difference
[22:51:46] <absentia> and on another there isn't
[22:51:47] <mikrosis> Amadiro: ah, yes
[22:51:48] <Amadiro> mikrosis, when I press the order button, you just (on the server side) check in the DB for my orders, and if they are all fullfillable (every pair of (order_id, revision) exists) then you send back "order placed!"
[22:52:06] <mikrosis> Amadiro: let's say the orders are only stored for some hours (due to data protection blah and such), then I wouldn't need this set-up, right?
[22:52:09] <ProfSimm> I'm so deep down the rabbit hole. I've reimplemented all syntax as a set of sequences, and now all sequences turn out to be boolean expressions from church encoded booleans.
[22:52:11] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 256 seconds)
[22:52:14] <GeDaMo> pyzozord: well, that's not impossible, but formats are often divided into blocks with types or tags, the tag tells the interpreter how to process the block
[22:52:24] <Amadiro> mikrosis, if one is missing, you might send back "(12345, 2) doesn't exist anymore, but check out (12345, 3)", which the javascript can then fetch and render a diff to the user (e.g. show the price difference)
[22:52:46] <Amadiro> mikrosis, either way, the client never stores anything in the browser and never sends any data to the server, it should all be stored in the database at all times
[22:52:55] <Irishmanluke> ProfSimm: Have you ever studied set theory?
[22:52:56] <mikrosis> right
[22:52:57] <Amadiro> mikrosis, I don't see how that would change anything
[22:53:10] <mikrosis> Amadiro: this is good! I will implement it like this. But as PoC I will only store the whole thing for now.
[22:53:11] <Amadiro> the "some hours" for a given user could overlap the point in time when you update a price
[22:53:24] <Amadiro> mikrosis, wdym by "store the whole thing"?
[22:53:26] <ski> (there's also the distinction between a value, and a datastructure representing an expression that would evaluate to a value)
[22:53:36] *** Quits: tehenderz (~tehenderz@ti0018a400-1778.bb.online.no) (Ping timeout: 256 seconds)
[22:53:44] <mikrosis> Amadiro: the whole product title + everything. When the thing works I will refine it and use reference+revision instead as you proposed.
[22:53:54] *** Quits: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at) (Quit: WeeChat 3.4)
[22:53:57] *** Joins: tehenderz (~tehenderz@ti0018a400-2286.bb.online.no)
[22:54:15] <ski> ProfSimm : "sequences turn out to be boolean expressions" ?
[22:54:21] *** Joins: AMDIsOurLord (~AMDIsOurL@151.241.145.1)
[22:54:35] <GeDaMo> https://en.wikipedia.org/wiki/FourCC
[22:54:35] <bayaz> Title: FourCC - Wikipedia 
[22:54:38] <Amadiro> mikrosis, where do you want to store it?
[22:54:44] <ProfSimm> ski: do you know promise chaning in JS
[22:54:55] <mikrosis> Amadiro: on an API server thingy
[22:54:55] <ProfSimm> ski: ".then().then().then().then()"
[22:55:49] <pyzozord> I think promises are monads, I heard it somewhere
[22:55:59] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[22:56:00] <ProfSimm> They're close to monads, not 100%, but yeah
[22:56:03] <ski> absentia : it's also that sometimes we use "data" to refer to inductive data types, and sometimes we use it to refer to first-class values. so, with first-class functions, in one sense "code is data". but in another sense, it isn't. (but then, you could have a datastructure representing an expression that'd evaluate to a function, and that would presumably be an inductive data structure)
[22:56:11] <Amadiro> mikrosis, so in a database? that's fine, just remember that someone could add something to their cart and check out much later, and then you're obligated to fill the order at the price the item had when it was added to the cart, not the price at checkout
[22:56:12] <pyzozord> I like promises
[22:56:20] <ski> ProfSimm : not really
[22:56:28] <pyzozord> I heard futures is like advanced promises, I'm not sure how futures work
[22:56:28] <mawk> look at my base32 calculator I made in python: https://bpa.st/AZ7Q
[22:56:30] <bayaz> Title: View paste AZ7Q 
[22:56:30] <mawk> it's beautiful
[22:56:51] <ProfSimm> ski: point is I keep finding more and more things, expressed succinctly with fewer and fewer things.
[22:57:00] <apotheon> Hm.  I have access to the Wikipedia Library.
[22:57:04] <apotheon> I didn't even know it existed.
[22:57:19] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Remote host closed the connection)
[22:57:30] <ski> ProfSimm : learning is a spiral, a circumambulation
[22:57:31] <pyzozord> mawk: can read any of it, too bitwise
[22:57:35] <Irishmanluke> It would be cool to have a language where everything was reprented as sets, probably not practical though
[22:57:37] <pyzozord> can't*
[22:57:47] <ProfSimm> ski: will I hit a singularity in the middle and get psychotic
[22:57:49] <mawk> there's no other way pyzozord , it's the reality of base conversion
[22:58:01] <ski> Irishmanluke : ZF set theory is rather like coding in machine code
[22:58:02] <ProfSimm> ski: like see the beginning and end of the universe at ocne
[22:58:04] <mawk> it worked almost first time
[22:58:07] <apotheon> Irishmanluke: Maybe it'd be an interesting intermediate representation of a language during compilation.
[22:58:09] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[22:58:34] * ski . o O ( <https://xkcd.com/224/> )
[22:58:40] <absentia> ski: that sounds to me like you're using the term "code" to refer not to the actual machine code being executed on CPU, but the mathematical model or abstraction for code
[22:58:44] <mikrosis> Amadiro: yes
[22:58:56] <Irishmanluke> apotheon: you want numbers at least to be represented in the usual way though
[22:58:56] <ProfSimm> https://www.youtube.com/watch?v=a-RAltgH8tw
[22:58:57] <pyzozord> mawk: also one letter names :|
[22:58:57] <bayaz> Title: Functional Programming from First Principles ? Erik Meijer ? GOTO 2012 
[22:59:01] <absentia> in some "physical" sense code and data are all binary
[22:59:08] <pyzozord> mawk: good for competetive programming, not good for sharing code
[22:59:11] <mawk> it's what makes it so stylish pyzozord 
[22:59:19] <mawk> fine I'll fix the variable names then
[22:59:24] <apotheon> Irishmanluke: nah, just stuff a bunch of empty sets into a set and you have an integer
[22:59:29] <mawk> and you can look at its true beauty
[22:59:32] <GeDaMo> ski: https://www.youtube.com/watch?v=oB6_CtlO2Mg :P
[22:59:33] <bayaz> Title: Great 3 Stooges Running Gag: "Curly's Floor Spin" 
[22:59:35] <apotheon> sixteen sets in the set; integer 16
[22:59:35] <absentia> ski: but anyway i think this is a tangent - "in one sense it is, and one sense it isn't" - exactly my point
[22:59:36] *** Joins: Tempesta (~Tempesta@user/tempesta)
[22:59:37] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:64cd:e1df:8737:185) (Quit: I have gone to sleep. ZZZzzz…)
[22:59:47] <Irishmanluke> I know im just saying youre doing a lot of work for no benefit
[22:59:53] <Irishmanluke> apotheon
[23:00:07] <apotheon> Yeah, well, shortcuts happen.
[23:00:33] <ski> absentia : sure. we can think on different levels of abstraction. lambda calculus (or something like it, like Scheme or Smalltalk or whatever) is one level. the "actual" machine code is another level. the electrons and other elemental particles are another. &c.
[23:00:38] <apotheon> https://xkcd.com/224/
[23:00:39] <bayaz> Title: Lisp 
[23:00:41] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:00:43] <apotheon> relevant
[23:00:48] * ski nods to absentia
[23:01:23] <ski> just saying that, "code is data. data is code" could easily be construed to mean that there's not any important distinction here
[23:01:39] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[23:01:39] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[23:01:54] <ProfSimm> ski: well the only distinction is that one is data... and the other is data that you pointed the interpreter head at
[23:02:01] <Irishmanluke> apotheon: Sometimes I think about how on mathematics you typically define a function by first specifying the domain while in mkst programming languages the domain of a function which could be thought of as the set of all possible valid inputs is poorly defined 
[23:02:06] <apotheon> The main reason to represent numbers as something other than sets is because programmers are lazy.  The secondary reason is that the numbers are already implemented at the fucking CPU level, so you might as well let that do the lifting.
[23:02:23] <Irishmanluke> yep
[23:02:32] <apotheon> With a sufficiently stupid CPU, though, sets might be great.  I dunno.
[23:02:57] <apotheon> Maybe your CPU effectively implements integers as set-sets.
[23:02:58] <Irishmanluke> a cpu that doesnt understand what numbers are?
[23:03:04] <absentia> ski: sure, i guess it is crude in that way
[23:03:29] <apotheon> Irishmanluke: The CPU itself may only understand one order of magnitude, in theory.
[23:03:29] <ProfSimm> What would be the s-expr variation that's ternary:    (operation, then, else)
[23:03:54] <apotheon> In practice, I don't think anyone would implement a CPU like that unless they were starting with sticks and stones.
[23:03:55] <GeDaMo> cond?
[23:03:57] <ski> one way to think about it is that "data" is values of inductive data types (or left adjoints, in terms of CT), while "code" is values of coinductive data types (which includes streams, OO objects) (right adjoints in terms of CT)
[23:04:03] *** Joins: Tangent-Man (~Tang3nt-M@31.132.2.72)
[23:04:16] <apotheon> "My CPU's water-wheel doubles as liquid cooling."
[23:04:32] *** Joins: Pickchea (~private@user/pickchea)
[23:04:35] <GeDaMo> Liquid cooling and power generation :P
[23:04:54] <apotheon> yep
[23:05:00] <Irishmanluke> steampunk
[23:05:07] <apotheon> only when it heats up enough
[23:05:09] <ski> and these two are certainly very different from each other. the first one is (in some sense) determined by how you produce/construct it. the second is (in some sense) determined by how you consume/"destruct" (deconstruct/observe/use) it
[23:05:14] <apotheon> This is more like macro-scale clockpunk.
[23:06:13] <smallville7123> https://gist.github.com/mgood7123/321bf9a635ec680cac2a6cf460459892 does anyone know how to correctly set up Skia in an existing GL context?
[23:06:14] <bayaz> Title: Skia_Example.cpp 
[23:07:03] <ski> absentia : i'm not saying it, as a slogan, is really bad. (one use is to (methaphorically speaking) smack people hard enough so that they might gain a useful insight, that requires stepping back a bit from how they used to think of things.) just that it may need a bit of qualification
[23:07:56] <mikrosis> Amadiro: so I will use a cart and an order data structure. The cart data structure will simply reference up until confirming the whole order
[23:08:05] <ski> "The main reason to represent numbers as something other than sets is because programmers are lazy." -- better to not represent numbers (or most anything else) as sets, even on an abstract level
[23:08:18] <mikrosis> then the stuff is written to the order data, ensuring that the data at time of order confirmation stays the same
[23:08:36] <ski> ZF set theory is anti-modular, goes against compositionality
[23:08:49] *** Parts: AMDIsOurLord (~AMDIsOurL@151.241.145.1) (Leaving)
[23:08:51] *** Quits: magla (~gelignite@d5361f17.access.ecotel.net) (Quit: Stay safe!)
[23:09:08] <ski> ProfSimm : `(if <condition> <consequent> <alternate>)' ?
[23:09:45] <absentia> i am all for shock and awe to illustrate a point
[23:09:52] <absentia> followed by a winding back and more careful deliberation
[23:09:53] <ski> (people (mathematicians included) often seem to have a way too high regard for ZF set theory)
[23:11:18] <ski> this is, btw, one advantage of Category Theory. (unlike Set Theory) it focuses on interface/specification/characterization/behaviour over low-level implementation/definition details
[23:11:42] <user51> ski: how are programmers lazy? have you seen how long my variable names are? :P
[23:11:55] <pyzozord> smallville7123: seems like you liked the skia library
[23:12:05] *** Joins: independent56 (~independe@85.255.235.56)
[23:12:08] <Irishmanluke> too lazy to come up with a more concise variable name
[23:12:09] <ski> user51 : i didn't say that, that was a quote
[23:12:20] <user51> yeah, i was joking :P
[23:12:25] <absentia> com.serious.business.enterprise.JavaFizzBuzzAbstractStrategyFactory.Solve(FizzBuzzStandardInstanceGetter.Get())
[23:12:38] <user51> i think there was an EWD where djikstra talked about it
[23:12:45] <ski> i guess, sometimes, programmers aren't lazy enough
[23:13:02] <pyzozord> programs not lazy?
[23:13:03] <KillerWasp> hello random rage tiki guys
[23:13:28] <independent56> Whenever i try to compile my program made with JavaFX, using "javac main.java", i keep on getting errors where java couldn't find javaFX functions.
[23:13:37] <pyzozord> all media constantly bombards programmers with signaling that coolest programmers are lazy nonshalant hackers with hoodies
[23:13:39] <absentia> independent56: are they on your classpath
[23:13:49] *** Quits: huillin (~huillin@181.92.141.222) (Quit: huillin)
[23:13:50] <independent56> How can i check?
[23:13:50] <pyzozord> nonchalant*
[23:14:18] <independent56> acc let me google
[23:14:18] <Irishmanluke> I see ZF set theory as simply one particular and maybe not the best way fo axiomatizing all of mathematics
[23:14:26] <Irishmanluke> is that wrong
[23:14:34] * ski . o O ( "We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris." -- Larry Wall,Randal L. Schwartz -- cited from "The Swine Before Perl" (talk/presentation) by Shriram Krishnamurthi in 2001-11 at <https://cs.brown.edu/~sk/Publications/Talks/SwineBeforePerl/> )
[23:14:54] <mikrosis> :/
[23:14:59] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[23:15:10] <ski> user51 : i'd be interested in seeing it, if you could find the right oen
[23:15:22] <mikrosis> Amadiro: What is practice/etiquette? The price of product at time of being added to cart - or when the order is placed/confirmed as final step?
[23:15:33] <mikrosis> So the price of the product in cart may change - but when the order is placed the price is fixed
[23:15:43] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:15:45] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:15:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:15:57] <ski> Irishmanluke : s/maybe not/probably not/ :)
[23:16:17] <Irishmanluke> ok
[23:16:19] <mikrosis> An inattentive user may be angry that the price listed on the order confirmation page changed from what was shown in the cart or at time of adding to cart and wasn't noticed.
[23:16:47] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:16:54] <mikrosis> otoh, when there is a price issue and the user asks for amending the price, the product would first have to be removed from cart and then re-added
[23:17:03] *** Joins: mickey8 (~user@user/mickey)
[23:18:08] <user51> ski: from what i remember, there was a section about variables.. maybe even a complaint about the ambiguity of sin()
[23:18:22] *** Lord_of_Life_ is now known as Lord_of_Life
[23:18:29] <Irishmanluke> ski: I wouldnt even know how to evaluate that but I believe you.  It does seem particularly difficult to do things in zfc, like programming in brainfuck, I was going to see in a Turing machines but its worse than that
[23:19:01] *** Joins: jazzy (~jaziz@user/jaziz)
[23:20:24] <Irishmanluke> Its like assembly though, most of the time you dont need to actually look at it directly 
[23:20:57] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[23:22:01] <edgar-rft> with ikea asembly you don't even need to look at it when it's assembled
[23:22:42] <ski> GeDaMo : heh, what was that link about ?
[23:23:13] *** Joins: Tang3nt-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[23:23:48] <user51> ski: i'm looking for it, but ironically enough plenty of EWDs are handwritten, so not searchable :|
[23:24:08] <GeDaMo> You said something about learning being a spiral, that's what came to mind :P
[23:24:15] *** Quits: jamea (~jamea@10.189-202-213.bestelclientes.com.mx) (Ping timeout: 256 seconds)
[23:24:17] *** Joins: Auron (Auron956@user/auron)
[23:24:18] *** Quits: independent56 (~independe@85.255.235.56) (Quit: Client closed)
[23:24:37] *** Joins: independent56 (~independe@85.255.235.56)
[23:25:34] <ski> Irishmanluke : the main problem is that even if you ignore some of the implementation details, you can't assume that other people (including yourself, another time) might not (e.g. accidentally) depend on them (also, it depends on the level of abstraction. implementation details on one level can be essential API on another)
[23:25:37] *** Quits: Tangent-Man (~Tang3nt-M@31.132.2.72) (Ping timeout: 240 seconds)
[23:25:40] <KillerWasp> ikea MOVs abuse
[23:27:05] <ski> Irishmanluke : e.g. in group theory, you want to treat two groups that are isomorphic to each other as if they're indistinguishable. this implies that you're only interested in constructions and properties what don't distinguish between isomorphic groups. but if you're doing this in ZF, you still have to prove for every construction and property that it respects isomorphism
[23:27:38] <ski> user51 : yea .. although many of them are now also transcribed
[23:27:44] <Hash> o/
[23:27:51] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Ping timeout: 245 seconds)
[23:28:14] <ski> GeDaMo : ah, hehe :)
[23:28:14] <user51> ski: i think it's ewd, but i'm not 100% certain
[23:28:23] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[23:28:30] <user51> https://www.cs.utexas.edu/users/EWD/transcriptions/EWD13xx/EWD1300.html
[23:28:31] <bayaz> Title: E.W.Dijkstra Archive: The notational conventions I adopted, and why (EWD 1300) 
[23:28:38] <ski> ah, right
[23:28:52] <ski> (i've read this one, although i don't recall in detail)
[23:29:14] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 250 seconds)
[23:29:30] <user51> i wanted to get better handwriting but then i realized i devised an ungreppable method..
[23:30:15] <ski> (hm, i can't find either "lazy" or "programmer" in it, though)
[23:30:50] *** Joins: Auron (Auron956@user/auron)
[23:31:41] *** Joins: asszi (~AdminUser@2a02:ab88:2a00:6d00::ae7)
[23:32:11] <pulse> Hash, what if psychedelics are just a dev branch of reality?
[23:32:37] <Hash> Possibly.
[23:32:52] <Hash> They do help you to debug the cultural operating system running atop the oragnismic machine.
[23:33:00] <Hash> They are debugging tools. If anything.
[23:33:05] <absentia> Hash: i agree
[23:33:17] <absentia> careful not to corrupt your ROM though
[23:33:22] <Hash> :)
[23:33:25] <absentia> some changes are hard to back out
[23:33:30] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 260 seconds)
[23:35:24] <pulse> good theory
[23:35:37] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:2978:9595:8415:4304) (Remote host closed the connection)
[23:38:29] <mikrosis> Sometimes I want to become, be a gardener. Just doing some stuff, leaving and knowing that the garden won't deconstruct itself or crashes or something :(
[23:39:00] *** Joins: magla (~gelignite@d5361f17.access.ecotel.net)
[23:39:13] <mikrosis> after my ride with nodejs ecosystem, all the tools and stuff that is now rotten or deprecated and simply doesn't work - well, I really appreciate PHP now, boring tech is great
[23:39:22] <mikrosis> the more boring the better
[23:39:43] <GeDaMo> In the future, everyone is angry and confused :|
[23:39:44] <mikrosis> but for web apps ofc I will have to use JS and stuff
[23:39:50] <mikrosis> GeDaMo: well possible
[23:39:54] <KillerWasp> /ignore absentia 
[23:40:12] <absentia> yes a brief pause
[23:40:19] <absentia> to allow those who want to ignore me to do so
[23:40:30] <absentia> like i give a fuck
[23:42:44] *** Quits: asszi (~AdminUser@2a02:ab88:2a00:6d00::ae7) ()
[23:42:59] *** Joins: Asszi (~AdminUser@2a02:ab88:2a00:6d00::ae7)
[23:43:07] <Hash> First day, no weed at all. Not a single hit.
[23:43:15] <Hash> Yesterday sober too. Mostly.
[23:43:17] *** Asszi is now known as asszi
[23:43:30] <pyzozord> Hash: going strong keep it up
[23:43:42] <Hash> Thanks, man.
[23:43:58] <pulse> daily use sucks anyway. daily use of anything really
[23:44:00] <pulse> including coffee
[23:44:13] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[23:44:13] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[23:44:13] *** Joins: tane (~tane@user/tane)
[23:44:15] <pulse> daily coffee is miserable. a coffee twice per week is delightful
[23:44:26] <pyzozord> ^++
[23:44:35] <pyzozord> hah I just made a new irc thing
[23:44:37] <mawk> there was a bug in my base32
[23:44:41] <mawk> but now it's 100% working
[23:44:43] <mawk> look pyzozord https://bpa.st/UZMA
[23:44:44] <bayaz> Title: View paste UZMA 
[23:44:52] <mawk> it's beautiful
[23:45:07] <pulse> all those <<s
[23:45:07] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Remote host closed the connection)
[23:45:08] <pulse> nice
[23:45:08] <pyzozord> mawk: nice I can start reading now
[23:45:58] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[23:46:40] *** Quits: brw (~bas@haring.bas.sh) (Remote host closed the connection)
[23:46:59] *** Joins: brw (~bas@haring.bas.sh)
[23:47:08] <pyzozord> mawk: ooh it's some encoding
[23:47:16] <pyzozord> I thought it was supposed to be a calculator?
[23:47:25] <mawk> yes it's a base32 encoder
[23:47:39] <mawk> no it doesn't calculate anything just encodes
[23:47:40] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[23:47:41] <pyzozord> i read it expecting some calcuator sutff and was very confused
[23:47:54] <pyzozord> thought you hidden all the calculations in the bit operators
[23:48:21] <pyzozord> still rough code, very dense
[23:48:31] <pyzozord> I'd need to spend like 30 minutes to understand
[23:48:37] <pyzozord> but cool
[23:48:53] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[23:49:11] <pyzozord> but at least I can follow the high level overview now
[23:49:19] <pyzozord> and can dig into the details when I need to
[23:49:34] <smallville7123> https://gist.github.com/mgood7123/321bf9a635ec680cac2a6cf460459892 does anyone know how to correctly set up Skia in an existing GL context?
[23:49:35] <bayaz> Title: Skia_Example.cpp 
[23:49:48] *** Joins: CaCode_ (~CaCode@user/cacode)
[23:50:15] <pyzozord> mawk: if your goal was to be tricky, it's been achieved
[23:50:29] <mawk> the goal was to be a correct base32 encoding
[23:50:44] <mawk> I'm sure the base32 code in the python stdlib is even uglier
[23:51:59] *** Quits: independent56 (~independe@85.255.235.56) (Quit: Client closed)
[23:52:14] <mawk> there is a bit of redundant code that coud maybe be factored
[23:53:04] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 272 seconds)
[23:53:42] *** Joins: jringstad__ (~Amadiro@31.11.55.179)
[23:55:41] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[23:56:03] *** Quits: Amadiro (~Amadiro@31.11.55.179) (Ping timeout: 250 seconds)
[23:56:20] *** Joins: Tempesta (~Tempesta@user/tempesta)
[23:56:42] <pyzozord> it's more readable https://github.com/python/cpython/blob/main/Lib/base64.py
[23:56:43] <bayaz> Title: cpython/base64.py at main ? python/cpython 
[23:57:08] <pyzozord> but lots more stuff
[23:57:12] *** Quits: makos (~nerdbox@78.9.119.190) (Quit: WeeChat 3.0)
[23:57:35] <pyzozord> mawk: don't get me wrong, it was a nice golf
[23:57:46] <pyzozord> i'm just too dumb to understand it
[23:57:58] <pyzozord> and i, like anyone, don't enjoy too much feeling dumb :P
[23:58:44] <pyzozord> this this one is the 32 encode function https://github.com/python/cpython/blob/main/Lib/base64.py#L166
[23:58:48] <bayaz> Title: cpython/base64.py at main ? python/cpython 
